File: samples/oauth2/sparklr/src/main/java/org/springframework/security/oauth/examples/sparklr/config/OAuth2ServerConfig.java
Patch:
@@ -131,7 +131,7 @@ public void configure(ClientDetailsServiceConfigurer clients) throws Exception {
 	 			        .authorizedGrantTypes("authorization_code", "client_credentials")
 	 			        .authorities("ROLE_CLIENT")
 	 			        .scopes("read", "trust")
-	 			        .redirectUris("https://anywhere?key=value")
+	 			        .redirectUris("http://localhost:8080/tonr2/sparklr/photos")
 		 		    .and()
 	 		        .withClient("my-trusted-client")
  			            .authorizedGrantTypes("password", "authorization_code", "refresh_token", "implicit")

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/web/configuration/AuthorizationServerEndpointsConfiguration.java
Patch:
@@ -82,7 +82,7 @@ public void init() {
 			try {
 				configurer.configure(endpoints);
 			} catch (Exception e) {
-				throw new IllegalStateException("Cannot configure enpdoints", e);
+				throw new IllegalStateException("Cannot configure endpoints", e);
 			}
 		}
 		endpoints.setClientDetailsService(clientDetailsService);

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/OAuth2AccessTokenJackson2Deserializer.java
Patch:
@@ -96,7 +96,7 @@ else if (OAuth2AccessToken.SCOPE.equals(name)) {
 
 		DefaultOAuth2AccessToken accessToken = new DefaultOAuth2AccessToken(tokenValue);
 		accessToken.setTokenType(tokenType);
-		if (expiresIn != null) {
+		if (expiresIn != null && expiresIn != 0) {
 			accessToken.setExpiration(new Date(System.currentTimeMillis() + (expiresIn * 1000)));
 		}
 		if (refreshToken != null) {

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/common/BaseOAuth2AccessTokenJacksonTest.java
Patch:
@@ -55,6 +55,8 @@ abstract class BaseOAuth2AccessTokenJacksonTest {
 
 	protected static final String ACCESS_TOKEN_ADDITIONAL_INFO = "{\"access_token\":\"token-value\",\"token_type\":\"bearer\",\"one\":\"two\",\"three\":4,\"five\":{\"six\":7}}";
 
+	protected static final String ACCESS_TOKEN_ZERO_EXPIRES = "{\"access_token\":\"token-value\",\"token_type\":\"bearer\",\"expires_in\":0}";
+
 	@Rule
 	public ExpectedException thrown = ExpectedException.none();
 

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/config/OAuthProviderBeanDefinitionParser.java
Patch:
@@ -207,7 +207,7 @@ private int insertIndex(List<BeanMetadataElement> filterChain) {
       BeanMetadataElement filter = filterChain.get(i);
       if (filter instanceof BeanDefinition) {
         String beanName = ((BeanDefinition) filter).getBeanClassName();
-        if (beanName.equals(ExceptionTranslationFilter.class.getName())) {
+        if (ExceptionTranslationFilter.class.getName().equals(beanName)) {
            return i + 1;
         }
       }

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/authentication/OAuth2AuthenticationProcessingFilter.java
Patch:
@@ -74,7 +74,9 @@ public class OAuth2AuthenticationProcessingFilter implements Filter, Initializin
 	/**
 	 * Flag to say that this filter guards stateless resources (default true). Set this to true if the only way the
 	 * resource can be accessed is with a token. If false then an incoming cookie can populate the security context and
-	 * allow access to a caller that isn't an OAuth2 client.
+	 * allow access to a caller that isn't an OAuth2 client. When false, remember to also allow sessions to be created
+	 * by configuring session management with a session creation policy that allows sessions to be set.
+	 * See {@link org.springframework.security.config.http.SessionCreationPolicy} for your choices.
 	 * 
 	 * @param stateless the flag to set (default true)
 	 */

File: spring-security-jwt/src/test/java/org/springframework/security/jwt/crypto/sign/RsaSigningTests.java
Patch:
@@ -56,5 +56,8 @@ public void keysFromPrivateAndPublicKeyStringDataAreCorrect() throws Exception {
 
 		verifier = new RsaVerifier(RsaTestKeyData.SSH_PUBLIC_KEY_OPENSSL_PEM_STRING);
 		verifier.verify(content, signed);
+
+		verifier = new RsaVerifier(RsaTestKeyData.SSH_X509_CERTIFICATE_PEM_STRING);
+		verifier.verify(content, signed);
 	}
 }

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/DefaultUserAuthenticationConverter.java
Patch:
@@ -97,7 +97,7 @@ public Authentication extractAuthentication(Map<String, ?> map) {
 		return null;
 	}
 
-	private Collection<? extends GrantedAuthority> getAuthorities(Map<String, ?> map) {
+	protected Collection<? extends GrantedAuthority> getAuthorities(Map<String, ?> map) {
 		if (!map.containsKey(AUTHORITIES)) {
 			return defaultAuthorities;
 		}

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/expression/OAuth2SecurityExpressionMethods.java
Patch:
@@ -80,7 +80,7 @@ public boolean throwOnError(boolean decision) {
 
 	/**
 	 * Check if the OAuth2 client (not the user) has the role specified. To check the user's roles see
-	 * {@link #clientHasRole(String)}.
+	 * {@link #clientHasAnyRole(String...)}.
 	 * 
 	 * @param role the role to check
 	 * @return true if the OAuth2 client has this role
@@ -91,7 +91,7 @@ public boolean clientHasRole(String role) {
 
 	/**
 	 * Check if the OAuth2 client (not the user) has one of the roles specified. To check the user's roles see
-	 * {@link #clientHasAnyRole(String...)}.
+	 * {@link OAuth2ExpressionUtils#clientHasAnyRole(Authentication, String...)}.
 	 * 
 	 * @param roles the roles to check
 	 * @return true if the OAuth2 client has one of these roles

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/token/grant/client/ClientCredentialsAccessTokenProvider.java
Patch:
@@ -13,6 +13,7 @@
 import org.springframework.security.oauth2.client.token.OAuth2AccessTokenSupport;
 import org.springframework.security.oauth2.common.OAuth2RefreshToken;
 import org.springframework.security.oauth2.common.OAuth2AccessToken;
+import org.springframework.security.oauth2.common.util.OAuth2Utils;
 import org.springframework.util.LinkedMultiValueMap;
 import org.springframework.util.MultiValueMap;
 
@@ -52,7 +53,7 @@ public OAuth2AccessToken obtainAccessToken(OAuth2ProtectedResourceDetails detail
 	private MultiValueMap<String, String> getParametersForTokenRequest(ClientCredentialsResourceDetails resource) {
 
 		MultiValueMap<String, String> form = new LinkedMultiValueMap<String, String>();
-		form.set("grant_type", "client_credentials");
+		form.set(OAuth2Utils.GRANT_TYPE, "client_credentials");
 
 		if (resource.isScoped()) {
 

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/token/grant/code/AuthorizationCodeAccessTokenProvider.java
Patch:
@@ -219,7 +219,7 @@ public OAuth2AccessToken refreshAccessToken(OAuth2ProtectedResourceDetails resou
 			OAuth2RefreshToken refreshToken, AccessTokenRequest request) throws UserRedirectRequiredException,
 			OAuth2AccessDeniedException {
 		MultiValueMap<String, String> form = new LinkedMultiValueMap<String, String>();
-		form.add("grant_type", "refresh_token");
+		form.add(OAuth2Utils.GRANT_TYPE, "refresh_token");
 		form.add("refresh_token", refreshToken.getValue());
 		try {
 			return retrieveToken(request, resource, form, getHeadersForTokenRequest(request));
@@ -248,7 +248,7 @@ private MultiValueMap<String, String> getParametersForTokenRequest(Authorization
 			AccessTokenRequest request) {
 
 		MultiValueMap<String, String> form = new LinkedMultiValueMap<String, String>();
-		form.set("grant_type", "authorization_code");
+		form.set(OAuth2Utils.GRANT_TYPE, "authorization_code");
 		form.set("code", request.getAuthorizationCode());
 
 		Object preservedState = request.getPreservedState();

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/token/grant/password/ResourceOwnerPasswordAccessTokenProvider.java
Patch:
@@ -13,6 +13,7 @@
 import org.springframework.security.oauth2.client.token.OAuth2AccessTokenSupport;
 import org.springframework.security.oauth2.common.OAuth2RefreshToken;
 import org.springframework.security.oauth2.common.OAuth2AccessToken;
+import org.springframework.security.oauth2.common.util.OAuth2Utils;
 import org.springframework.util.LinkedMultiValueMap;
 import org.springframework.util.MultiValueMap;
 
@@ -39,7 +40,7 @@ public OAuth2AccessToken refreshAccessToken(OAuth2ProtectedResourceDetails resou
 			OAuth2RefreshToken refreshToken, AccessTokenRequest request) throws UserRedirectRequiredException,
 			OAuth2AccessDeniedException {
 		MultiValueMap<String, String> form = new LinkedMultiValueMap<String, String>();
-		form.add("grant_type", "refresh_token");
+		form.add(OAuth2Utils.GRANT_TYPE, "refresh_token");
 		form.add("refresh_token", refreshToken.getValue());
 		return retrieveToken(request, resource, form, new HttpHeaders());
 	}
@@ -55,7 +56,7 @@ public OAuth2AccessToken obtainAccessToken(OAuth2ProtectedResourceDetails detail
 	private MultiValueMap<String, String> getParametersForTokenRequest(ResourceOwnerPasswordResourceDetails resource, AccessTokenRequest request) {
 
 		MultiValueMap<String, String> form = new LinkedMultiValueMap<String, String>();
-		form.set("grant_type", "password");
+		form.set(OAuth2Utils.GRANT_TYPE, "password");
 
 		form.set("username", resource.getUsername());
 		form.set("password", resource.getPassword());

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/TokenRequest.java
Patch:
@@ -94,7 +94,7 @@ public OAuth2Request createOAuth2Request(ClientDetails client) {
 		modifiable.remove("password");
 		modifiable.remove("client_secret");
 		// Add grant type so it can be retrieved from OAuth2Request
-		modifiable.put("grant_type", grantType);
+		modifiable.put(OAuth2Utils.GRANT_TYPE, grantType);
 		return new OAuth2Request(modifiable, client.getClientId(), client.getAuthorities(), true, this.getScope(),
 				client.getResourceIds(), null, null, null);
 	}

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/AuthorizationEndpoint.java
Patch:
@@ -416,7 +416,7 @@ private String appendAccessToken(AuthorizationRequest authorizationRequest, OAut
 		}
 		String originalScope = authorizationRequest.getRequestParameters().get(OAuth2Utils.SCOPE);
 		if (originalScope == null || !OAuth2Utils.parseParameterList(originalScope).equals(accessToken.getScope())) {
-			vars.put("scope", OAuth2Utils.formatParameterList(accessToken.getScope()));
+			vars.put(OAuth2Utils.SCOPE, OAuth2Utils.formatParameterList(accessToken.getScope()));
 		}
 		Map<String, Object> additionalInformation = accessToken.getAdditionalInformation();
 		for (String key : additionalInformation.keySet()) {

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/TokenEndpointAuthenticationFilter.java
Patch:
@@ -207,7 +207,7 @@ protected void onUnsuccessfulAuthentication(HttpServletRequest request, HttpServ
 	 * @return an authentication for validation (or null if there is no further authentication)
 	 */
 	protected Authentication extractCredentials(HttpServletRequest request) {
-		String grantType = request.getParameter("grant_type");
+		String grantType = request.getParameter(OAuth2Utils.GRANT_TYPE);
 		if (grantType != null && grantType.equals("password")) {
 			UsernamePasswordAuthenticationToken result = new UsernamePasswordAuthenticationToken(
 					request.getParameter("username"), request.getParameter("password"));
@@ -218,7 +218,7 @@ protected Authentication extractCredentials(HttpServletRequest request) {
 	}
 
 	private Set<String> getScope(HttpServletRequest request) {
-		return OAuth2Utils.parseParameterList(request.getParameter("scope"));
+		return OAuth2Utils.parseParameterList(request.getParameter(OAuth2Utils.SCOPE));
 	}
 	
 	public void init(FilterConfig filterConfig) throws ServletException {

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/jwk/EllipticCurveJwkDefinition.java
Patch:
@@ -32,19 +32,21 @@ final class EllipticCurveJwkDefinition extends JwkDefinition {
 	 * Creates an instance of an Elliptic Curve JSON Web Key (JWK).
 	 *
 	 * @param keyId        the Key ID
+	 * @param x5t          the X.509 Certificate SHA-1 Thumbprint (&quot;x5t&quot;)
 	 * @param publicKeyUse the intended use of the Public Key
 	 * @param algorithm    the algorithm intended to be used
 	 * @param x            the x value to be used
 	 * @param y            the y value to be used
 	 * @param curve        the curve to be used
 	 */
 	EllipticCurveJwkDefinition(String keyId,
+							   String x5t,
 							   PublicKeyUse publicKeyUse,
 							   CryptoAlgorithm algorithm,
 							   String x,
 							   String y,
 							   String curve) {
-		super(keyId, KeyType.EC, publicKeyUse, algorithm);
+		super(keyId, x5t, KeyType.EC, publicKeyUse, algorithm);
 		this.x = x;
 		this.y = y;
 		this.curve = curve;

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/jwk/RsaJwkDefinition.java
Patch:
@@ -31,18 +31,19 @@ final class RsaJwkDefinition extends JwkDefinition {
 	 * Creates an instance of a RSA JSON Web Key (JWK).
 	 *
 	 * @param keyId the Key ID
+	 * @param x5t the X.509 Certificate SHA-1 Thumbprint (&quot;x5t&quot;)
 	 * @param publicKeyUse the intended use of the Public Key
 	 * @param algorithm the algorithm intended to be used
 	 * @param modulus the modulus value for the Public Key
 	 * @param exponent the exponent value for the Public Key
 	 */
 	RsaJwkDefinition(String keyId,
+					 String x5t,
 					 PublicKeyUse publicKeyUse,
 					 CryptoAlgorithm algorithm,
 					 String modulus,
 					 String exponent) {
-
-		super(keyId, KeyType.RSA, publicKeyUse, algorithm);
+		super(keyId, x5t, KeyType.RSA, publicKeyUse, algorithm);
 		this.modulus = modulus;
 		this.exponent = exponent;
 	}

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/store/jwk/JwkSetConverterTests.java
Patch:
@@ -36,7 +36,7 @@
  * @author Joe Grandja
  * @author Vedran Pavic
  */
-public class JwkSetConverterTest {
+public class JwkSetConverterTests {
 	private final JwkSetConverter converter = new JwkSetConverter();
 	private final ObjectMapper objectMapper = new ObjectMapper();
 

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/store/jwk/JwkTokenStoreITests.java
Patch:
@@ -38,7 +38,7 @@
 /**
  * @author Joe Grandja
  */
-public class JwkTokenStoreITest {
+public class JwkTokenStoreITests {
 	private MockWebServer server;
 
 	@Before

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/store/jwk/JwkTokenStoreTests.java
Patch:
@@ -48,7 +48,7 @@
  */
 @RunWith(PowerMockRunner.class)
 @PrepareForTest(JwkTokenStore.class)
-public class JwkTokenStoreTest {
+public class JwkTokenStoreTests {
 	private JwkTokenStore jwkTokenStore = new JwkTokenStore("https://identity.server1.io/token_keys");
 
 	@Rule
@@ -129,7 +129,7 @@ public void readAccessTokenWhenJwtClaimsSetVerifierIsSetThenVerifyIsCalled() thr
 		when(jwkDefinitionHolder.getSignatureVerifier()).thenReturn(mock(SignatureVerifier.class));
 
 		JwkDefinitionSource jwkDefinitionSource = mock(JwkDefinitionSource.class);
-		when(jwkDefinitionSource.getDefinitionLoadIfNecessary(anyString())).thenReturn(jwkDefinitionHolder);
+		when(jwkDefinitionSource.getDefinitionLoadIfNecessary(anyString(), anyString())).thenReturn(jwkDefinitionHolder);
 
 		JwkVerifyingJwtAccessTokenConverter jwtVerifyingAccessTokenConverter =
 				new JwkVerifyingJwtAccessTokenConverter(jwkDefinitionSource);

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/store/jwk/JwtHeaderConverterTests.java
Patch:
@@ -32,7 +32,7 @@
  * @author Joe Grandja
  * @author Vedran Pavic
  */
-public class JwtHeaderConverterTest {
+public class JwtHeaderConverterTests {
 	private final JwtHeaderConverter converter = new JwtHeaderConverter();
 
 	@Rule

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/config/xml/AuthorizationServerClientCredentialsPasswordValidXmlTests.java
Patch:
@@ -43,7 +43,6 @@
 @WebAppConfiguration
 public class AuthorizationServerClientCredentialsPasswordValidXmlTests {
 	private static final String CLIENT_ID = "acme";
-	private static final String CLIENT_SECRET = "secret";
 	private static final String USER_ID = "acme";
 	private static final String USER_SECRET = "password";
 

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/token/OAuth2AccessTokenSupport.java
Patch:
@@ -53,7 +53,7 @@ public abstract class OAuth2AccessTokenSupport {
 
 	private static final FormHttpMessageConverter FORM_MESSAGE_CONVERTER = new FormHttpMessageConverter();
 
-	private RestOperations restTemplate;
+	private volatile RestOperations restTemplate;
 
 	private List<HttpMessageConverter<?>> messageConverters;
 

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/web/configurers/ResourceServerSecurityConfigurer.java
Patch:
@@ -50,12 +50,15 @@
 import javax.servlet.http.HttpServletRequest;
 
 /**
+ * <p>
+ * @deprecated See the <a href="https://github.com/spring-projects/spring-security/wiki/OAuth-2.0-Migration-Guide">OAuth 2.0 Migration Guide</a> for Spring Security 5.
  *
  * @author Rob Winch
  * @author Dave Syer
  * 
  * @since 2.0.0
  */
+@Deprecated
 public final class ResourceServerSecurityConfigurer extends
 		SecurityConfigurerAdapter<DefaultSecurityFilterChain, HttpSecurity> {
 

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/AuthorizationRequestTests.java
Patch:
@@ -30,7 +30,7 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.springframework.security.oauth2.common.util.OAuth2Utils;
-import org.springframework.util.SerializationUtils;
+import org.springframework.security.oauth2.common.util.SerializationUtils;
 import org.springframework.util.StringUtils;
 
 /**
@@ -161,8 +161,8 @@ public void testRedirectUriDefaultsToMap() {
 	@Test
 	public void testSerialization() {
 		AuthorizationRequest authorizationRequest = createFromParameters(parameters);
-		AuthorizationRequest other = (AuthorizationRequest) SerializationUtils.deserialize(SerializationUtils
-				.serialize(authorizationRequest));
+		AuthorizationRequest other = SerializationUtils.deserialize(
+				SerializationUtils.serialize(authorizationRequest));
 		assertEquals(authorizationRequest, other);
 	}
 

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/DefaultOAuth2RefreshToken.java
Patch:
@@ -2,8 +2,8 @@
 
 import java.io.Serializable;
 
-import org.codehaus.jackson.annotate.JsonCreator;
-import org.codehaus.jackson.annotate.JsonValue;
+import com.fasterxml.jackson.annotation.JsonCreator;
+import com.fasterxml.jackson.annotation.JsonValue;
 
 /**
  * An OAuth 2 refresh token.

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/OAuth2AccessToken.java
Patch:
@@ -20,11 +20,8 @@
  * @author Dave Syer
  *
  */
-@org.codehaus.jackson.map.annotate.JsonSerialize(using = OAuth2AccessTokenJackson1Serializer.class)
-@org.codehaus.jackson.map.annotate.JsonDeserialize(using = OAuth2AccessTokenJackson1Deserializer.class)
 @com.fasterxml.jackson.databind.annotation.JsonSerialize(using = OAuth2AccessTokenJackson2Serializer.class)
 @com.fasterxml.jackson.databind.annotation.JsonDeserialize(using = OAuth2AccessTokenJackson2Deserializer.class)
-
 public interface OAuth2AccessToken {
 
 	public static String BEARER_TYPE = "Bearer";

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/OAuth2AccessTokenJackson2Serializer.java
Patch:
@@ -26,7 +26,8 @@
 
 /**
  * Provides the ability to serialize an {@link org.springframework.security.oauth2.common.OAuth2AccessToken} with jackson2 by implementing {@link com.fasterxml.jackson.databind.JsonDeserializer}.
- * Refer to {@link org.springframework.security.oauth2.common.OAuth2AccessTokenJackson1Deserializer} to learn more about the JSON format that is used.
+ *
+ * The expected format of the access token is defined by <a href="https://tools.ietf.org/html/draft-ietf-oauth-v2-22#section-5.1">Successful Response</a>.
  *
  * @author Rob Winch
  * @author Brian Clozel

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/OAuth2RefreshToken.java
Patch:
@@ -12,7 +12,7 @@
  */
 package org.springframework.security.oauth2.common;
 
-import org.codehaus.jackson.annotate.JsonValue;
+import com.fasterxml.jackson.annotation.JsonValue;
 
 /**
  * @author Dave Syer

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/exceptions/OAuth2Exception.java
Patch:
@@ -12,8 +12,6 @@
  * @author Dave Syer
  */
 @SuppressWarnings("serial")
-@org.codehaus.jackson.map.annotate.JsonSerialize(using = OAuth2ExceptionJackson1Serializer.class)
-@org.codehaus.jackson.map.annotate.JsonDeserialize(using = OAuth2ExceptionJackson1Deserializer.class)
 @com.fasterxml.jackson.databind.annotation.JsonSerialize(using = OAuth2ExceptionJackson2Serializer.class)
 @com.fasterxml.jackson.databind.annotation.JsonDeserialize(using = OAuth2ExceptionJackson2Deserializer.class)
 public class OAuth2Exception extends RuntimeException {

File: samples/oauth2/sparklr/src/test/java/org/springframework/security/oauth2/provider/AuthorizationCodeProviderTests.java
Patch:
@@ -331,7 +331,7 @@ public void testRegisteredRedirectWithWrongRequestedRedirect() throws Exception
 	public void testRegisteredRedirectWithWrongOneInTokenEndpoint() throws Exception {
 		approveAccessTokenGrant("https://anywhere?key=value", true);
 		// Setting the redirect uri directly in the request shoiuld override the saved value
-		context.getAccessTokenRequest().set("redirect_uri", "http://nowhere.com");
+		context.getAccessTokenRequest().set("redirect_uri", "https://nowhere.com");
 		try {
 			assertNotNull(context.getAccessToken());
 			fail("Expected RedirectMismatchException");

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/client/OAuth2RestTemplateTests.java
Patch:
@@ -209,7 +209,7 @@ public void testTokenIsResetIfInvalid() throws Exception {
 			@Override
 			public OAuth2AccessToken obtainAccessToken(OAuth2ProtectedResourceDetails details,
 					AccessTokenRequest parameters) throws UserRedirectRequiredException, AccessDeniedException {
-				throw new UserRedirectRequiredException("http://www.foo.com/", Collections.<String, String> emptyMap());
+				throw new UserRedirectRequiredException("https://www.foo.com/", Collections.<String, String> emptyMap());
 			}
 		});
 		try {

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/client/token/grant/code/AuthorizationCodeAccessTokenProviderWithConversionTests.java
Patch:
@@ -92,7 +92,7 @@ public HttpHeaders getHeaders() {
 
 		public URI getURI() {
 			try {
-				return new URI("http://www.foo.com/");
+				return new URI("https://www.foo.com/");
 			}
 			catch (URISyntaxException e) {
 				throw new IllegalStateException(e);

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/client/token/grant/code/AuthorizationCodeResourceDetailsTests.java
Patch:
@@ -31,16 +31,16 @@ public class AuthorizationCodeResourceDetailsTests {
 	public void testGetDefaultRedirectUri() {
 		details.setPreEstablishedRedirectUri("https://anywhere.com");
 		DefaultAccessTokenRequest request = new DefaultAccessTokenRequest();
-		request.setCurrentUri("http://nowhere.com");
-		assertEquals("http://nowhere.com", details.getRedirectUri(request));
+		request.setCurrentUri("https://nowhere.com");
+		assertEquals("https://nowhere.com", details.getRedirectUri(request));
 	}
 
 	@Test
 	public void testGetOverrideRedirectUri() {
 		details.setPreEstablishedRedirectUri("https://anywhere.com");
 		details.setUseCurrentUri(false);
 		DefaultAccessTokenRequest request = new DefaultAccessTokenRequest();
-		request.setCurrentUri("http://nowhere.com");
+		request.setCurrentUri("https://nowhere.com");
 		assertEquals("https://anywhere.com", details.getRedirectUri(request));
 	}
 

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/config/xml/InvalidResourceBeanDefinitionParserTests.java
Patch:
@@ -61,21 +61,21 @@ public void testMissingAuthorizationUriForImplicit() {
 	public void testMissingAuthorizationUriForAuthorizationCode() {
 		expected.expect(BeanDefinitionParsingException.class);
 		expected.expectMessage("authorization URI must be supplied");
-		loadContext("type='authorization_code' access-token-uri='http://somewhere.com'");
+		loadContext("type='authorization_code' access-token-uri='https://somewhere.com'");
 	}
 
 	@Test
 	public void testMissingUsernameForPassword() {
 		expected.expect(BeanDefinitionParsingException.class);
 		expected.expectMessage("A username must be supplied on a resource element of type password");
-		loadContext("type='password' access-token-uri='http://somewhere.com'");
+		loadContext("type='password' access-token-uri='https://somewhere.com'");
 	}
 
 	@Test
 	public void testMissingPasswordForPassword() {
 		expected.expect(BeanDefinitionParsingException.class);
 		expected.expectMessage("A password must be supplied on a resource element of type password");
-		loadContext("type='password' username='admin' access-token-uri='http://somewhere.com'");
+		loadContext("type='password' username='admin' access-token-uri='https://somewhere.com'");
 	}
 
 	private void loadContext(String attributes) {

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/endpoint/AuthorizationEndpointTests.java
Patch:
@@ -599,7 +599,7 @@ public void testApproveWithModifiedRedirectUri() throws Exception {
 				"foo", "https://anywhere.com", "state-1234", "read", Collections.singleton("code"));
 		model.put(AUTHORIZATION_REQUEST_ATTR_NAME, authorizationRequest);
 		model.put(ORIGINAL_AUTHORIZATION_REQUEST_ATTR_NAME, endpoint.unmodifiableMap(authorizationRequest));
-		authorizationRequest.setRedirectUri("http://somewhere.com");		// Modify authorization request
+		authorizationRequest.setRedirectUri("https://somewhere.com");		// Modify authorization request
 		Map<String, String> approvalParameters = new HashMap<String, String>();
 		approvalParameters.put("user_oauth_approval", "true");
 		endpoint.approveOrDeny(approvalParameters, model, sessionStatus, principal);

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/endpoint/ExactMatchRedirectResolverTests.java
Patch:
@@ -56,7 +56,7 @@ public void testRedirectWithNoRegisteredValue() throws Exception {
 	// If not we should expect a Oauth2Exception.
 	@Test ( expected = OAuth2Exception.class )
 	public void testRedirectWithNoRequestedValue() throws Exception {
-		Set<String> redirectUris = new HashSet<String>(Arrays.asList("https://anywhere.com", "http://nowhere.com"));
+		Set<String> redirectUris = new HashSet<String>(Arrays.asList("https://anywhere.com", "https://nowhere.com"));
 		client.setRegisteredRedirectUri(redirectUris);
 		resolver.resolveRedirect(null, client);
 	}

File: tests/annotation/common/src/main/java/sparklr/common/AbstractAuthorizationCodeProviderTests.java
Patch:
@@ -213,7 +213,7 @@ public void testRegisteredRedirectWithWrongRequestedRedirect() throws Exception
 	public void testRegisteredRedirectWithWrongOneInTokenEndpoint() throws Exception {
 		approveAccessTokenGrant("https://anywhere?key=value", true);
 		// Setting the redirect uri directly in the request should override the saved value
-		context.getAccessTokenRequest().set("redirect_uri", "http://nowhere.com");
+		context.getAccessTokenRequest().set("redirect_uri", "https://nowhere.com");
 		try {
 			assertNotNull(context.getAccessToken());
 			fail("Expected RedirectMismatchException");

File: tests/annotation/ssl/src/test/java/demo/ImplicitProviderTests.java
Patch:
@@ -56,7 +56,7 @@ public void run() {
 	private void getToken() {
 		Map<String, String> form = new LinkedHashMap<String, String>();
 		form.put("client_id", "my-trusted-client");
-		form.put("redirect_uri", "http://www.foo.com/");
+		form.put("redirect_uri", "https://www.foo.com/");
 		form.put("response_type", "token");
 		form.put("scope", "read");
 		ResponseEntity<Void> response = new TestRestTemplate("user", "password")

File: tests/xml/common/src/main/java/sparklr/common/AbstractAuthorizationCodeProviderTests.java
Patch:
@@ -283,7 +283,7 @@ public void testRegisteredRedirectWithWrongRequestedRedirect() throws Exception
 	public void testRegisteredRedirectWithWrongOneInTokenEndpoint() throws Exception {
 		approveAccessTokenGrant("https://anywhere?key=value", true);
 		// Setting the redirect uri directly in the request should override the saved value
-		context.getAccessTokenRequest().set("redirect_uri", "http://nowhere.com");
+		context.getAccessTokenRequest().set("redirect_uri", "https://nowhere.com");
 		try {
 			assertNotNull(context.getAccessToken());
 			fail("Expected RedirectMismatchException");

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/TokenEndpoint.java
Patch:
@@ -131,7 +131,7 @@ public ResponseEntity<OAuth2AccessToken> postAccessToken(Principal principal, @R
 
 		OAuth2AccessToken token = getTokenGranter().grant(tokenRequest.getGrantType(), tokenRequest);
 		if (token == null) {
-			throw new UnsupportedGrantTypeException("Unsupported grant type: " + tokenRequest.getGrantType());
+			throw new UnsupportedGrantTypeException("Unsupported grant type");
 		}
 
 		return getResponse(token);

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/CheckTokenEndpoint.java
Patch:
@@ -29,6 +29,7 @@
 import org.springframework.security.oauth2.provider.token.ResourceServerTokenServices;
 import org.springframework.web.bind.annotation.ExceptionHandler;
 import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RequestMethod;
 import org.springframework.web.bind.annotation.RequestParam;
 import org.springframework.web.bind.annotation.ResponseBody;
 
@@ -69,7 +70,7 @@ public void setAccessTokenConverter(AccessTokenConverter accessTokenConverter) {
 		this.accessTokenConverter = accessTokenConverter;
 	}
 
-	@RequestMapping(value = "/oauth/check_token")
+	@RequestMapping(value = "/oauth/check_token", method = RequestMethod.POST)
 	@ResponseBody
 	public Map<String, ?> checkToken(@RequestParam("token") String value) {
 

File: tests/annotation/common/src/main/java/sparklr/common/AbstractAuthorizationCodeProviderTests.java
Patch:
@@ -112,7 +112,7 @@ public void testUserDeniesConfirmation() throws Exception {
 		assertTrue(location.startsWith("https://anywhere"));
 		assertTrue(location.substring(location.indexOf('?')).contains("error=access_denied"));
 		// It was a redirect that triggered our client redirect exception:
-		assertEquals(HttpStatus.FOUND, getTokenEndpointResponse().getStatusCode());
+		assertEquals(HttpStatus.SEE_OTHER, getTokenEndpointResponse().getStatusCode());
 	}
 
 	@Test
@@ -172,7 +172,7 @@ public void testInvalidScopeInAuthorizationRequest() throws Exception {
 			uri.queryParam("redirect_uri", redirectUri);
 		}
 		ResponseEntity<String> response = http.getForString(uri.pattern(), headers, uri.params());
-		assertEquals(HttpStatus.FOUND, response.getStatusCode());
+		assertEquals(HttpStatus.SEE_OTHER, response.getStatusCode());
 		String location = response.getHeaders().getLocation().toString();
 		assertTrue(location.startsWith("https://anywhere"));
 		assertTrue(location.contains("error=invalid_scope"));

File: tests/annotation/custom-grant/src/test/java/demo/ImplicitProviderTests.java
Patch:
@@ -55,7 +55,7 @@ private void getToken() {
 				.getForEntity(
 						http.getUrl("/oauth/authorize?client_id={client_id}&redirect_uri={redirect_uri}&response_type={response_type}&scope={scope}"),
 						Void.class, form);
-		assertEquals(HttpStatus.FOUND, response.getStatusCode());
+		assertEquals(HttpStatus.SEE_OTHER, response.getStatusCode());
 		assertTrue(response.getHeaders().getLocation().toString().contains("access_token"));
 		assertTrue(response.getHeaders().getFirst("Cache-Control").contains("no-store"));
 		assertTrue(response.getHeaders().getFirst("Pragma").contains("no-cache"));

File: tests/annotation/jaxb/src/test/java/demo/ImplicitProviderTests.java
Patch:
@@ -61,7 +61,7 @@ private void getToken() {
 				.getForEntity(
 						http.getUrl("/oauth/authorize?client_id={client_id}&redirect_uri={redirect_uri}&response_type={response_type}&scope={scope}"),
 						Void.class, form);
-		assertEquals(HttpStatus.FOUND, response.getStatusCode());
+		assertEquals(HttpStatus.SEE_OTHER, response.getStatusCode());
 		assertTrue(response.getHeaders().getLocation().toString().contains("access_token"));
 		assertTrue(response.getHeaders().getFirst("Cache-Control").contains("no-store"));
 		assertTrue(response.getHeaders().getFirst("Pragma").contains("no-cache"));

File: tests/annotation/jpa/src/test/java/demo/ImplicitProviderTests.java
Patch:
@@ -61,7 +61,7 @@ private void getToken() {
 				.getForEntity(
 						http.getUrl("/oauth/authorize?client_id={client_id}&redirect_uri={redirect_uri}&response_type={response_type}&scope={scope}"),
 						Void.class, form);
-		assertEquals("Wrong status: " + response.getHeaders(), HttpStatus.FOUND, response.getStatusCode());
+		assertEquals("Wrong status: " + response.getHeaders(), HttpStatus.SEE_OTHER, response.getStatusCode());
 		assertTrue(response.getHeaders().getLocation().toString().contains("access_token"));
 		assertTrue(response.getHeaders().getFirst("Cache-Control").contains("no-store"));
 		assertTrue(response.getHeaders().getFirst("Pragma").contains("no-cache"));

File: tests/annotation/vanilla/src/test/java/demo/ImplicitProviderTests.java
Patch:
@@ -61,7 +61,7 @@ private void getToken() {
 				.getForEntity(
 						http.getUrl("/oauth/authorize?client_id={client_id}&redirect_uri={redirect_uri}&response_type={response_type}&scope={scope}"),
 						Void.class, form);
-		assertEquals("Wrong status: " + response.getHeaders(), HttpStatus.FOUND, response.getStatusCode());
+		assertEquals("Wrong status: " + response.getHeaders(), HttpStatus.SEE_OTHER, response.getStatusCode());
 		assertTrue(response.getHeaders().getLocation().toString().contains("access_token"));
 		assertTrue(response.getHeaders().getFirst("Cache-Control").contains("no-store"));
 		assertTrue(response.getHeaders().getFirst("Pragma").contains("no-cache"));

File: tests/xml/common/src/main/java/sparklr/common/AbstractAuthorizationCodeProviderTests.java
Patch:
@@ -182,7 +182,7 @@ public void testUserDeniesConfirmation() throws Exception {
 		assertTrue(location.startsWith("https://anywhere"));
 		assertTrue(location.substring(location.indexOf('?')).contains("error=access_denied"));
 		// It was a redirect that triggered our client redirect exception:
-		assertEquals(HttpStatus.FOUND, tokenEndpointResponse.getStatusCode());
+		assertEquals(HttpStatus.SEE_OTHER, tokenEndpointResponse.getStatusCode());
 	}
 
 	@Test
@@ -242,7 +242,7 @@ public void testInvalidScopeInAuthorizationRequest() throws Exception {
 			uri.queryParam("redirect_uri", redirectUri);
 		}
 		ResponseEntity<String> response = http.getForString(uri.pattern(), headers, uri.params());
-		assertEquals(HttpStatus.FOUND, response.getStatusCode());
+		assertEquals(HttpStatus.SEE_OTHER, response.getStatusCode());
 		String location = response.getHeaders().getLocation().toString();
 		assertTrue(location.startsWith("https://anywhere"));
 		assertTrue(location.contains("error=invalid_scope"));

File: tests/annotation/common/src/main/java/sparklr/common/AbstractResourceOwnerPasswordProviderTests.java
Patch:
@@ -196,6 +196,8 @@ public void testTokenEndpointUnauthenticated() throws Exception {
 		assertEquals(HttpStatus.UNAUTHORIZED, result.getStatusCode());
 		assertTrue("Wrong body: " + result.getBody(),
 				result.getBody().toLowerCase().contains("unauthorized"));
+		assertTrue(result.getHeaders().get("Cache-Control").toString().contains("no-store"));
+		assertTrue(result.getHeaders().get("Pragma").toString().contains("no-cache"));
 	}
 
 	@Test

File: tests/annotation/custom-grant/src/test/java/demo/ImplicitProviderTests.java
Patch:
@@ -57,6 +57,8 @@ private void getToken() {
 						Void.class, form);
 		assertEquals(HttpStatus.FOUND, response.getStatusCode());
 		assertTrue(response.getHeaders().getLocation().toString().contains("access_token"));
+		assertTrue(response.getHeaders().get("Cache-Control").toString().contains("no-store"));
+		assertTrue(response.getHeaders().get("Pragma").toString().contains("no-cache"));
 	}
 
 	protected static class ResourceOwner extends ResourceOwnerPasswordResourceDetails {

File: tests/annotation/jaxb/src/test/java/demo/ImplicitProviderTests.java
Patch:
@@ -63,6 +63,8 @@ private void getToken() {
 						Void.class, form);
 		assertEquals(HttpStatus.FOUND, response.getStatusCode());
 		assertTrue(response.getHeaders().getLocation().toString().contains("access_token"));
+		assertTrue(response.getHeaders().get("Cache-Control").toString().contains("no-store"));
+		assertTrue(response.getHeaders().get("Pragma").toString().contains("no-cache"));
 	}
 
 	protected static class ResourceOwner extends ResourceOwnerPasswordResourceDetails {

File: tests/annotation/jpa/src/test/java/demo/ImplicitProviderTests.java
Patch:
@@ -63,6 +63,8 @@ private void getToken() {
 						Void.class, form);
 		assertEquals("Wrong status: " + response.getHeaders(), HttpStatus.FOUND, response.getStatusCode());
 		assertTrue(response.getHeaders().getLocation().toString().contains("access_token"));
+		assertTrue(response.getHeaders().get("Cache-Control").toString().contains("no-store"));
+		assertTrue(response.getHeaders().get("Pragma").toString().contains("no-cache"));
 	}
 
 	protected static class ResourceOwner extends ResourceOwnerPasswordResourceDetails {

File: tests/annotation/ssl/src/test/java/demo/ImplicitProviderTests.java
Patch:
@@ -65,6 +65,8 @@ private void getToken() {
 						Void.class, form);
 		assertEquals("Wrong status: " + response.getHeaders(), HttpStatus.FOUND, response.getStatusCode());
 		assertTrue(response.getHeaders().getLocation().toString().contains("access_token"));
+		assertTrue(response.getHeaders().get("Cache-Control").toString().contains("no-store"));
+		assertTrue(response.getHeaders().get("Pragma").toString().contains("no-cache"));
 	}
 
 	protected static class ResourceOwner extends ResourceOwnerPasswordResourceDetails {

File: tests/annotation/vanilla/src/test/java/demo/ImplicitProviderTests.java
Patch:
@@ -63,6 +63,8 @@ private void getToken() {
 						Void.class, form);
 		assertEquals("Wrong status: " + response.getHeaders(), HttpStatus.FOUND, response.getStatusCode());
 		assertTrue(response.getHeaders().getLocation().toString().contains("access_token"));
+		assertTrue(response.getHeaders().get("Cache-Control").toString().contains("no-store"));
+		assertTrue(response.getHeaders().get("Pragma").toString().contains("no-cache"));
 	}
 
 	protected static class ResourceOwner extends ResourceOwnerPasswordResourceDetails {

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/resource/OAuth2AccessDeniedException.java
Patch:
@@ -3,7 +3,7 @@
 import org.springframework.security.oauth2.common.exceptions.OAuth2Exception;
 
 /**
- * When access is denied we usually want a 403, but we want the same treatment as all teh other OAuth2Exception types,
+ * When access is denied we usually want a 403, but we want the same treatment as all the other OAuth2Exception types,
  * so this is not a Spring Security AccessDeniedException.
  * 
  * @author Ryan Heaton

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/DefaultRedirectResolver.java
Patch:
@@ -43,7 +43,7 @@ public class DefaultRedirectResolver implements RedirectResolver {
 
 	private Collection<String> redirectGrantTypes = Arrays.asList("implicit", "authorization_code");
 
-	private boolean matchSubdomains = true;
+	private boolean matchSubdomains = false;
 
 	private boolean matchPorts = true;
 

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/config/annotation/ResourceServerConfigurationTests.java
Patch:
@@ -27,6 +27,7 @@
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
+import org.springframework.http.MediaType;
 import org.springframework.mock.web.MockServletContext;
 import org.springframework.security.authentication.AuthenticationDetailsSource;
 import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
@@ -118,7 +119,7 @@ public void testWithAuthServer() throws Exception {
 				.andExpect(MockMvcResultMatchers.header().string("WWW-Authenticate", containsString("Bearer")));
 		mvc.perform(MockMvcRequestBuilders.post("/oauth/token"))
 				.andExpect(MockMvcResultMatchers.header().string("WWW-Authenticate", containsString("Basic")));
-		mvc.perform(MockMvcRequestBuilders.get("/oauth/authorize"))
+		mvc.perform(MockMvcRequestBuilders.get("/oauth/authorize").accept(MediaType.TEXT_HTML))
 				.andExpect(MockMvcResultMatchers.redirectedUrl("http://localhost/login"));
 		mvc.perform(MockMvcRequestBuilders.post("/oauth/token").header("Authorization",
 				"Basic " + new String(Base64.encode("client:secret".getBytes()))))
@@ -137,7 +138,7 @@ public void testWithAuthServerCustomPath() throws Exception {
 				.andExpect(MockMvcResultMatchers.header().string("WWW-Authenticate", containsString("Bearer")));
 		mvc.perform(MockMvcRequestBuilders.post("/token"))
 				.andExpect(MockMvcResultMatchers.header().string("WWW-Authenticate", containsString("Basic")));
-		mvc.perform(MockMvcRequestBuilders.get("/authorize"))
+		mvc.perform(MockMvcRequestBuilders.get("/authorize").accept(MediaType.TEXT_HTML))
 				.andExpect(MockMvcResultMatchers.redirectedUrl("http://localhost/login"));
 		mvc.perform(MockMvcRequestBuilders.post("/token").header("Authorization",
 				"Basic " + new String(Base64.encode("client:secret".getBytes()))))

File: spring-security-oauth/src/test/java/org/springframework/security/oauth/consumer/client/CoreOAuthConsumerSupportTests.java
Patch:
@@ -449,7 +449,7 @@ public void testGetSignatureBaseString() throws Exception {
 		String baseString = support.getSignatureBaseString(oauthParams, new URL("https://photos.example.net/photos"),
 				"geT");
 		assertEquals(
-				"GET&http%3A%2F%2Fphotos.example.net%2Fphotos&file%3Dvacation.jpg%26oauth_consumer_key%3Ddpf43f3p2l4k3l03%26oauth_nonce%3Dkllo9940pd9333jh%26oauth_signature_method%3DHMAC-SHA1%26oauth_timestamp%3D1191242096%26oauth_token%3Dnnch734d00sl2jdk%26oauth_version%3D1.0%26size%3Doriginal",
+				"GET&https%3A%2F%2Fphotos.example.net%2Fphotos&file%3Dvacation.jpg%26oauth_consumer_key%3Ddpf43f3p2l4k3l03%26oauth_nonce%3Dkllo9940pd9333jh%26oauth_signature_method%3DHMAC-SHA1%26oauth_timestamp%3D1191242096%26oauth_token%3Dnnch734d00sl2jdk%26oauth_version%3D1.0%26size%3Doriginal",
 				baseString);
 	}
 
@@ -463,7 +463,7 @@ public void testGetSignatureBaseStringSimple() throws Exception {
 
 		String baseString = support.getSignatureBaseString(oauthParams, new URL("https://photos.example.net/photos"),
 				"get");
-		assertEquals("GET&http%3A%2F%2Fphotos.example.net%2Fphotos&bar%3D120%26bar%3D24%26foo%3Dbar", baseString);
+		assertEquals("GET&https%3A%2F%2Fphotos.example.net%2Fphotos&bar%3D120%26bar%3D24%26foo%3Dbar", baseString);
 	}
 
 	// See SECOAUTH-383
@@ -477,7 +477,7 @@ public void testGetSignatureBaseStringMultivaluedLast() throws Exception {
 
 		String baseString = support.getSignatureBaseString(oauthParams, new URL("https://photos.example.net/photos"),
 				"get");
-		assertEquals("GET&http%3A%2F%2Fphotos.example.net%2Fphotos&foo%3Dbar%26pin%3D1%26pin%3D2", baseString);
+		assertEquals("GET&https%3A%2F%2Fphotos.example.net%2Fphotos&foo%3Dbar%26pin%3D1%26pin%3D2", baseString);
 	}
 
 	static class StreamHandlerForTestingPurposes extends Handler {

File: spring-security-oauth/src/test/java/org/springframework/security/oauth/provider/CoreOAuthProviderSupportTests.java
Patch:
@@ -98,7 +98,7 @@ public void testGetSignatureBaseString() throws Exception {
 
 		String baseString = support.getSignatureBaseString(request);
 		assertEquals(
-				"GET&http%3A%2F%2Fphotos.example.net%2Fphotos&file%3Dvacation.jpg%26oauth_consumer_key%3Ddpf43f3p2l4k3l03%26oauth_nonce%3Dkllo9940pd9333jh%26oauth_signature_method%3DHMAC-SHA1%26oauth_timestamp%3D1191242096%26oauth_token%3Dnnch734d00sl2jdk%26oauth_version%3D1.0%26size%3Doriginal",
+				"GET&https%3A%2F%2Fphotos.example.net%2Fphotos&file%3Dvacation.jpg%26oauth_consumer_key%3Ddpf43f3p2l4k3l03%26oauth_nonce%3Dkllo9940pd9333jh%26oauth_signature_method%3DHMAC-SHA1%26oauth_timestamp%3D1191242096%26oauth_token%3Dnnch734d00sl2jdk%26oauth_version%3D1.0%26size%3Doriginal",
 				baseString);
 	}
 

File: spring-security-oauth/src/test/java/org/springframework/security/oauth/provider/filter/UserAuthorizationSuccessfulAuthenticationHandlerTests.java
Patch:
@@ -45,7 +45,7 @@ public void testAuthenticationSuccess() throws Exception {
 		handler.setRedirectStrategy(redirectStrategy);
 
 		when(request.getAttribute(UserAuthorizationProcessingFilter.CALLBACK_ATTRIBUTE)).thenReturn(
-				"http://my.host.com/my/context");
+				"https://my.host.com/my/context");
 		when(request.getAttribute(UserAuthorizationProcessingFilter.VERIFIER_ATTRIBUTE)).thenReturn("myver");
 		when(request.getParameter("requestToken")).thenReturn("mytok");
 

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/config/xml/InvalidResourceBeanDefinitionParserTests.java
Patch:
@@ -83,7 +83,7 @@ private void loadContext(String attributes) {
 		context = new GenericXmlApplicationContext(new ByteArrayResource(config .getBytes()));
 	}
 
-	private static String HEADER = "<?xml version='1.0' encoding='UTF-8'?><beans xmlns='http://www.springframework.org/schema/beans' xmlns:oauth='http://www.springframework.org/schema/security/oauth2' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'	xsi:schemaLocation='http://www.springframework.org/schema/security/oauth2 https://www.springframework.org/schema/security/spring-security-oauth2-1.0.xsd	http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans-3.0.xsd'>";
+	private static String HEADER = "<?xml version='1.0' encoding='UTF-8'?><beans xmlns='http://www.springframework.org/schema/beans' xmlns:oauth='http://www.springframework.org/schema/security/oauth2' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'	xsi:schemaLocation='http://www.springframework.org/schema/security/oauth2 https://www.springframework.org/schema/security/spring-security-oauth2-2.0.xsd	http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans-3.0.xsd'>";
 	private static String FOOTER = "</beans>";
 	private static String TEMPLATE = "<oauth:resource id='resource' client-id='client' %s/>";
 }

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/endpoint/DefaultRedirectResolverTests.java
Patch:
@@ -130,7 +130,7 @@ public void testRedirectNotMatchingWithHexEncodedTraversal() throws Exception {
 	public void testRedirectNotMatchingSubdomain() throws Exception {
 		Set<String> redirectUris = new HashSet<String>(Arrays.asList("https://anywhere.com/foo"));
 		client.setRegisteredRedirectUri(redirectUris);
-		resolver.resolveRedirect("/OZSLZ/foo", client);
+		resolver.resolveRedirect("https://2anywhere.com/foo", client);
 	}
 
 	// gh-747

File: samples/oauth/tonr/src/main/java/org/springframework/security/oauth/examples/tonr/impl/GoogleServiceImpl.java
Patch:
@@ -38,7 +38,7 @@ public List<String> getLastTenPicasaPictureURLs() {
       parser.parse(photosXML, new DefaultHandler() {
         @Override
         public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {
-          if ("http://search.yahoo.com/mrss/".equals(uri)
+          if ("https://search.yahoo.com/mrss/".equals(uri)
             && "thumbnail".equalsIgnoreCase(localName)) {
             int width = 0;
             try {

File: samples/oauth2/sparklr/src/main/java/org/springframework/security/oauth/examples/sparklr/config/OAuth2ServerConfig.java
Patch:
@@ -131,7 +131,7 @@ public void configure(ClientDetailsServiceConfigurer clients) throws Exception {
 	 			        .authorizedGrantTypes("authorization_code", "client_credentials")
 	 			        .authorities("ROLE_CLIENT")
 	 			        .scopes("read", "trust")
-	 			        .redirectUris("http://anywhere?key=value")
+	 			        .redirectUris("https://anywhere?key=value")
 		 		    .and()
 	 		        .withClient("my-trusted-client")
  			            .authorizedGrantTypes("password", "authorization_code", "refresh_token", "implicit")

File: samples/oauth2/sparklr/src/test/java/org/springframework/security/oauth2/provider/ImplicitProviderTests.java
Patch:
@@ -113,7 +113,7 @@ public AutoApproveImplicit(Object target) {
 			super();
 			setClientId("my-less-trusted-autoapprove-client");
 			setId(getClientId());
-			setPreEstablishedRedirectUri("http://anywhere");
+			setPreEstablishedRedirectUri("https://anywhere");
 			ImplicitProviderTests test = (ImplicitProviderTests) target;
 			setAccessTokenUri(test.serverRunning.getUrl("/sparklr2/oauth/authorize"));
 			setUserAuthorizationUri(test.serverRunning.getUrl("/sparklr2/oauth/authorize"));

File: samples/oauth2/tonr/src/test/java/org/springframework/security/oauth/examples/tonr/AuthorizationCodeGrantTests.java
Patch:
@@ -50,7 +50,7 @@ public class AuthorizationCodeGrantTests {
 	public void testCannotConnectWithoutToken() throws Exception {
 
 		OAuth2RestTemplate template = new OAuth2RestTemplate(resource);
-		resource.setPreEstablishedRedirectUri("http://anywhere.com");
+		resource.setPreEstablishedRedirectUri("https://anywhere.com");
 		try {
 			template.getForObject(serverRunning.getUrl("/tonr2/photos"),
 					String.class);

File: spring-security-jwt/src/main/java/org/springframework/security/jwt/codec/Base64Codec.java
Patch:
@@ -2,7 +2,7 @@
 
 /**
  * Base64 encoder which is a reduced version of Robert Harder's public domain implementation (version 2.3.7).
- * See <a href="http://iharder.net/base64">http://iharder.net/base64</a> for more information.
+ * See <a href="http://iharder.sourceforge.net/current/java/base64/">http://iharder.sourceforge.net/current/java/base64/</a> for more information.
  *
  * @author Luke Taylor
  */

File: spring-security-jwt/src/test/java/org/springframework/security/jwt/JwtTests.java
Patch:
@@ -35,7 +35,7 @@ public class JwtTests {
 	 * Sample from the JWT spec.
 	 */
 	static final String JOE_CLAIM_SEGMENT = "{\"iss\":\"joe\",\r\n" + " \"exp\":1300819380,\r\n"
-			+ " \"http://example.com/is_root\":true}";
+			+ " \"https://example.com/is_root\":true}";
 	static final String JOE_HEADER_HMAC = "{\"typ\":\"JWT\",\r\n" + " \"alg\":\"HS256\"}";
 	static final String JOE_HMAC_TOKEN = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9."
 			+ "eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGFtcGxlLmNvbS9pc19yb290Ijp0cnVlfQ."

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/common/signature/SharedConsumerSecret.java
Patch:
@@ -20,7 +20,7 @@
  * A signature secret that consists of a consumer secret and a token secret.
  *
  * @author Ryan Heaton
- * @author <a href="http://autayeu.com/">Aliaksandr Autayeu</a>
+ * @author <a href="https://autayeu.com/">Aliaksandr Autayeu</a>
  */
 public interface SharedConsumerSecret extends SignatureSecret {
 

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/consumer/token/HttpSessionBasedTokenServices.java
Patch:
@@ -53,7 +53,7 @@ public void storeToken(String resourceId, OAuthConsumerToken token) {
     HttpSession session = getSession();
     session.setAttribute(KEY_PREFIX + "#" + resourceId, token);
 
-    //adding support for oauth session extension (http://oauth.googlecode.com/svn/spec/ext/session/1.0/drafts/1/spec.html)
+    //adding support for oauth session extension (https://oauth.googlecode.com/svn/spec/ext/session/1.0/drafts/1/spec.html)
     Long expiration = null;
     String expiresInValue = token.getAdditionalParameters() != null ? token.getAdditionalParameters().get("oauth_expires_in") : null;
     if (expiresInValue != null) {

File: spring-security-oauth/src/test/java/net/oauth/signature/GoogleCodeCompatibilityTests.java
Patch:
@@ -87,13 +87,13 @@ protected String getBaseUrl(HttpServletRequest request) {
 			when(request.getParameterValues(param.getKey())).thenReturn(param.getValue());
 		}
 
-		String header = "OAuth realm=\"http://sp.example.com/\","
+		String header = "OAuth realm=\"https://sp.example.com/\","
 				+ "                oauth_consumer_key=\"0685bd9184jfhq22\","
 				+ "                oauth_token=\"ad180jjd733klru7\","
 				+ "                oauth_signature_method=\"HMAC-SHA1\","
 				+ "                oauth_signature=\"wOJIO9A2W5mFwDgiDvZbTSMK%2FPY%3D\","
 				+ "                oauth_timestamp=\"137131200\"," + "                oauth_callback=\""
-				+ OAuthCodec.oauthEncode("http://myhost.com/callback") + "\","
+				+ OAuthCodec.oauthEncode("https://myhost.com/callback") + "\","
 				+ "                oauth_nonce=\"4572616e48616d6d65724c61686176\","
 				+ "                oauth_version=\"1.0\"";
 		when(request.getHeaders("Authorization")).thenReturn(Collections.enumeration(Arrays.asList(header)));

File: spring-security-oauth/src/test/java/org/springframework/security/oauth/consumer/GoogleOAuthTests.java
Patch:
@@ -32,14 +32,14 @@ public void testGetRequestToken() throws Exception {
 		googleDetails.setSignatureMethod(HMAC_SHA1SignatureMethod.SIGNATURE_NAME);
 		googleDetails.setRequestTokenHttpMethod("GET");
 		HashMap<String, String> additional = new HashMap<String, String>();
-		additional.put("scope", "http://picasaweb.google.com/data");
+		additional.put("scope", "https://picasaweb.google.com/data");
 		googleDetails.setAdditionalParameters(additional);
 		detailsStore.put(googleDetails.getId(), googleDetails);
 		service.setResourceDetailsStore(detailsStore);
 		support.setProtectedResourceDetailsService(service);
 		// uncomment to see a request to google.
-		// see http://code.google.com/apis/accounts/docs/OAuth_ref.html
-		// and http://jira.codehaus.org/browse/OAUTHSS-37
+		// see https://code.google.com/apis/accounts/docs/OAuth_ref.html
+		// and https://jira.codehaus.org/browse/OAUTHSS-37
 		// OAuthConsumerToken token = support.getUnauthorizedRequestToken("google", "urn:mycallback");
 		// System.out.println(token.getValue());
 		// System.out.println(token.getSecret());

File: spring-security-oauth/src/test/java/org/springframework/security/oauth/consumer/client/OAuthRestTemplateTests.java
Patch:
@@ -29,7 +29,7 @@ public class OAuthRestTemplateTests {
 
     @Test
     public void testOAuthRestTemplateNoAdditionalParameters() {
-        String url = "http://myhost.com/resource?with=some&query=params&too";
+        String url = "https://myhost.com/resource?with=some&query=params&too";
 
         when(details.getSignatureMethod()).thenReturn("HMAC-SHA1");
         when(details.getConsumerKey()).thenReturn("consumerKey");
@@ -57,7 +57,7 @@ public void testOAuthRestTemplateNoAdditionalParameters() {
 
     @Test
     public void testOAuthRestTemplateWithAdditionalParameters() {
-        String url = "http://myhost.com/resource?with=some&query=params&too";
+        String url = "https://myhost.com/resource?with=some&query=params&too";
 
         when(details.getSignatureMethod()).thenReturn("HMAC-SHA1");
         when(details.getConsumerKey()).thenReturn("consumerKey");

File: spring-security-oauth/src/test/java/org/springframework/security/oauth/provider/filter/UserAuthorizationSuccessfulAuthenticationHandlerTests.java
Patch:
@@ -53,19 +53,19 @@ public void testAuthenticationSuccess() throws Exception {
 		handler.onAuthenticationSuccess(request, response, null);
 
 		verify(redirectStrategy).sendRedirect(request, response,
-				"http://my.host.com/my/context?oauth_token=mytok&oauth_verifier=myver");
+				"https://my.host.com/my/context?oauth_token=mytok&oauth_verifier=myver");
 
 		handler = new UserAuthorizationSuccessfulAuthenticationHandler();
 		handler.setRedirectStrategy(redirectStrategy);
 
 		when(request.getAttribute(UserAuthorizationProcessingFilter.CALLBACK_ATTRIBUTE)).thenReturn(
-				"http://my.hosting.com/my/context?with=some&query=parameter");
+				"https://my.hosting.com/my/context?with=some&query=parameter");
 		when(request.getAttribute(UserAuthorizationProcessingFilter.VERIFIER_ATTRIBUTE)).thenReturn("myvera");
 		when(request.getParameter("requestToken")).thenReturn("mytoka");
 
 		handler.onAuthenticationSuccess(request, response, null);
 
 		verify(redirectStrategy).sendRedirect(request, response,
-				"http://my.hosting.com/my/context?with=some&query=parameter&oauth_token=mytoka&oauth_verifier=myvera");
+				"https://my.hosting.com/my/context?with=some&query=parameter&oauth_token=mytoka&oauth_verifier=myvera");
 	}
 }

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/discovery/ProviderConfiguration.java
Patch:
@@ -24,7 +24,7 @@
  * @author Joe Grandja
  * @since 2.2
  * @see ProviderDiscoveryClient
- * @see <a target="_blank" href="http://openid.net/specs/openid-connect-discovery-1_0.html">OpenID Connect Discovery 1.0</a>
+ * @see <a target="_blank" href="https://openid.net/specs/openid-connect-discovery-1_0.html">OpenID Connect Discovery 1.0</a>
  */
 public class ProviderConfiguration {
 	private URL issuer;

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/discovery/ProviderDiscoveryClient.java
Patch:
@@ -34,7 +34,7 @@
  * @author Joe Grandja
  * @since 2.2
  * @see ProviderConfiguration
- * @see <a target="_blank" href="http://openid.net/specs/openid-connect-discovery-1_0.html">OpenID Connect Discovery 1.0</a>
+ * @see <a target="_blank" href="https://openid.net/specs/openid-connect-discovery-1_0.html">OpenID Connect Discovery 1.0</a>
  */
 public class ProviderDiscoveryClient {
 	private static final String PROVIDER_END_PATH = "/.well-known/openid-configuration";

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/test/OAuth2ContextSetup.java
Patch:
@@ -76,7 +76,7 @@
  * 	public void testSomethingWithClientCredentials() {
  * 		// This call will be authenticated with the client credentials in
  * 		// MyClientDetailsResource
- * 		getRestTemplate().getForObject(&quot;http://myserver/resource&quot;, String.class);
+ * 		getRestTemplate().getForObject(&quot;https://myserver/resource&quot;, String.class);
  * 	}
  * 
  * 	// This class is used to initialize the OAuth2 context for the test methods.

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/OAuth2AccessToken.java
Patch:
@@ -38,7 +38,7 @@ public interface OAuth2AccessToken {
 
 	/**
 	 * The type of the token issued as described in <a
-	 * href="http://tools.ietf.org/html/draft-ietf-oauth-v2-22#section-7.1">Section 7.1</a>. Value is case insensitive.
+	 * href="https://tools.ietf.org/html/draft-ietf-oauth-v2-22#section-7.1">Section 7.1</a>. Value is case insensitive.
 	 * This value is REQUIRED.
 	 */
 	public static String TOKEN_TYPE = "token_type";
@@ -51,13 +51,13 @@ public interface OAuth2AccessToken {
 
 	/**
 	 * The refresh token which can be used to obtain new access tokens using the same authorization grant as described
-	 * in <a href="http://tools.ietf.org/html/draft-ietf-oauth-v2-22#section-6">Section 6</a>. This value is OPTIONAL.
+	 * in <a href="https://tools.ietf.org/html/draft-ietf-oauth-v2-22#section-6">Section 6</a>. This value is OPTIONAL.
 	 */
 	public static String REFRESH_TOKEN = "refresh_token";
 
 	/**
 	 * The scope of the access token as described by <a
-	 * href="http://tools.ietf.org/html/draft-ietf-oauth-v2-22#section-3.3">Section 3.3</a>
+	 * href="https://tools.ietf.org/html/draft-ietf-oauth-v2-22#section-3.3">Section 3.3</a>
 	 */
 	public static String SCOPE = "scope";
 

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/OAuth2AccessTokenJackson1Deserializer.java
Patch:
@@ -34,7 +34,7 @@
  * </p>
  * <p>
  * The expected format of the access token is defined by <a
- * href="http://tools.ietf.org/html/draft-ietf-oauth-v2-22#section-5.1">Successful Response</a>.
+ * href="https://tools.ietf.org/html/draft-ietf-oauth-v2-22#section-5.1">Successful Response</a>.
  * </p>
  *
  * @author Rob Winch

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/OAuth2AccessTokenJackson2Deserializer.java
Patch:
@@ -36,7 +36,7 @@
  * </p>
  * <p>
  * The expected format of the access token is defined by <a
- * href="http://tools.ietf.org/html/draft-ietf-oauth-v2-22#section-5.1">Successful Response</a>.
+ * href="https://tools.ietf.org/html/draft-ietf-oauth-v2-22#section-5.1">Successful Response</a>.
  * </p>
  *
  * @author Rob Winch

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/vote/ScopeVoter.java
Patch:
@@ -49,7 +49,7 @@
  * <p>
  * All comparisons and prefixes are case insensitive so you can use (e.g.) <code>SCOPE_READ</code> for simple
  * Facebook-like scope names that might be lower case in the resource definition, or
- * <code>scope=http://my.company.com/scopes/read/</code> (<code>scopePrefix="scope="</code>) for Google-like URI scope
+ * <code>scope=https://my.company.com/scopes/read/</code> (<code>scopePrefix="scope="</code>) for Google-like URI scope
  * names.
  * </p>
  * 

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/client/OAuth2RestTemplateTests.java
Patch:
@@ -166,7 +166,7 @@ public ClientHttpRequest createRequest(URI uri, HttpMethod httpMethod) throws IO
 				throw new AccessTokenRequiredException(resource);
 			}
 		});
-		restTemplate.doExecute(new URI("http://foo"), HttpMethod.GET, new NullRequestCallback(),
+		restTemplate.doExecute(new URI("https://foo"), HttpMethod.GET, new NullRequestCallback(),
 				new SimpleResponseExtractor());
 	}
 
@@ -184,7 +184,7 @@ public ClientHttpRequest createRequest(URI uri, HttpMethod httpMethod) throws IO
 				return request;
 			}
 		});
-		Boolean result = restTemplate.doExecute(new URI("http://foo"), HttpMethod.GET, new NullRequestCallback(),
+		Boolean result = restTemplate.doExecute(new URI("https://foo"), HttpMethod.GET, new NullRequestCallback(),
 				new SimpleResponseExtractor());
 		assertTrue(result);
 	}
@@ -209,7 +209,7 @@ public void testTokenIsResetIfInvalid() throws Exception {
 			@Override
 			public OAuth2AccessToken obtainAccessToken(OAuth2ProtectedResourceDetails details,
 					AccessTokenRequest parameters) throws UserRedirectRequiredException, AccessDeniedException {
-				throw new UserRedirectRequiredException("http://foo.com", Collections.<String, String> emptyMap());
+				throw new UserRedirectRequiredException("http://www.foo.com/", Collections.<String, String> emptyMap());
 			}
 		});
 		try {

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/client/token/OAuth2AccessTokenSupportTests.java
Patch:
@@ -73,7 +73,7 @@ public class OAuth2AccessTokenSupportTests {
 	public void init() throws Exception {
 		resource.setClientId("client");
 		resource.setClientSecret("secret");
-		resource.setAccessTokenUri("http://nowhere/token");
+		resource.setAccessTokenUri("https://nowhere/token");
 		response = new StubHttpClientResponse();
 		support.setRequestFactory(new ClientHttpRequestFactory() {
 			public ClientHttpRequest createRequest(URI uri, HttpMethod httpMethod) throws IOException {

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/client/token/grant/code/AuthorizationCodeAccessTokenProviderTests.java
Patch:
@@ -99,12 +99,12 @@ public void testGetAccessTokenRequest() throws Exception {
 		request.setStateKey("bar");
 		request.setPreservedState(new Object());
 		resource.setAccessTokenUri("http://localhost/oauth/token");
-		resource.setPreEstablishedRedirectUri("http://anywhere.com");
+		resource.setPreEstablishedRedirectUri("https://anywhere.com");
 		assertEquals("FOO", provider.obtainAccessToken(resource, request).getValue());
 		// System.err.println(params);
 		assertEquals("authorization_code", params.getFirst("grant_type"));
 		assertEquals("foo", params.getFirst("code"));
-		assertEquals("http://anywhere.com", params.getFirst("redirect_uri"));
+		assertEquals("https://anywhere.com", params.getFirst("redirect_uri"));
 		// State is not set in token request
 		assertEquals(null, params.getFirst("state"));
 	}

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/client/token/grant/code/AuthorizationCodeAccessTokenProviderWithConversionTests.java
Patch:
@@ -92,7 +92,7 @@ public HttpHeaders getHeaders() {
 
 		public URI getURI() {
 			try {
-				return new URI("http://foo.com");
+				return new URI("http://www.foo.com/");
 			}
 			catch (URISyntaxException e) {
 				throw new IllegalStateException(e);

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/client/token/grant/code/AuthorizationCodeResourceDetailsTests.java
Patch:
@@ -29,19 +29,19 @@ public class AuthorizationCodeResourceDetailsTests {
 
 	@Test
 	public void testGetDefaultRedirectUri() {
-		details.setPreEstablishedRedirectUri("http://anywhere.com");
+		details.setPreEstablishedRedirectUri("https://anywhere.com");
 		DefaultAccessTokenRequest request = new DefaultAccessTokenRequest();
 		request.setCurrentUri("http://nowhere.com");
 		assertEquals("http://nowhere.com", details.getRedirectUri(request));
 	}
 
 	@Test
 	public void testGetOverrideRedirectUri() {
-		details.setPreEstablishedRedirectUri("http://anywhere.com");
+		details.setPreEstablishedRedirectUri("https://anywhere.com");
 		details.setUseCurrentUri(false);
 		DefaultAccessTokenRequest request = new DefaultAccessTokenRequest();
 		request.setCurrentUri("http://nowhere.com");
-		assertEquals("http://anywhere.com", details.getRedirectUri(request));
+		assertEquals("https://anywhere.com", details.getRedirectUri(request));
 	}
 
 }

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/client/token/grant/implicit/ImplicitAccessTokenProviderTests.java
Patch:
@@ -59,11 +59,11 @@ public void testGetAccessTokenRequest() throws Exception {
 		AccessTokenRequest request = new DefaultAccessTokenRequest();
 		resource.setClientId("foo");
 		resource.setAccessTokenUri("http://localhost/oauth/authorize");
-		resource.setPreEstablishedRedirectUri("http://anywhere.com");
+		resource.setPreEstablishedRedirectUri("https://anywhere.com");
 		assertEquals("FOO", provider.obtainAccessToken(resource, request).getValue());
 		assertEquals("foo", params.getFirst("client_id"));
 		assertEquals("token", params.getFirst("response_type"));
-		assertEquals("http://anywhere.com", params.getFirst("redirect_uri"));
+		assertEquals("https://anywhere.com", params.getFirst("redirect_uri"));
 	}
 
 }

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/config/annotation/Gh808EnableAuthorizationServerTests.java
Patch:
@@ -83,7 +83,7 @@ public class Gh808EnableAuthorizationServerTests {
 	MockMvc mockMvc;
 
 	static {
-		client = new BaseClientDetails(CLIENT_ID, null, "read,write", "password,client_credentials", "ROLE_ADMIN", "http://example.com/oauth2callback");
+		client = new BaseClientDetails(CLIENT_ID, null, "read,write", "password,client_credentials", "ROLE_ADMIN", "https://example.com/oauth2callback");
 		client.setClientSecret(CLIENT_SECRET);
 		user = new User(USER_ID, USER_SECRET, Arrays.asList(new SimpleGrantedAuthority("ROLE_USER")));
 	}

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/config/xml/ClientDetailsServiceBeanDefinitionParserTests.java
Patch:
@@ -84,7 +84,7 @@ public void testClientDetailsDefaultFlow() {
 		assertNotNull(clientDetailsService);
 		assertEquals("my-client-id-default-flow", clientDetails.getClientId());
 		assertEquals(1, clientDetails.getRegisteredRedirectUri().size());
-		assertEquals("http://mycompany.com", clientDetails.getRegisteredRedirectUri().iterator().next());
+		assertEquals("https://secure.mycompany.com", clientDetails.getRegisteredRedirectUri().iterator().next());
 
 		Set<String> grantTypes = clientDetails.getAuthorizedGrantTypes();
 		assertNotNull(grantTypes);

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/config/xml/InvalidResourceBeanDefinitionParserTests.java
Patch:
@@ -83,7 +83,7 @@ private void loadContext(String attributes) {
 		context = new GenericXmlApplicationContext(new ByteArrayResource(config .getBytes()));
 	}
 
-	private static String HEADER = "<?xml version='1.0' encoding='UTF-8'?><beans xmlns='http://www.springframework.org/schema/beans' xmlns:oauth='http://www.springframework.org/schema/security/oauth2' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'	xsi:schemaLocation='http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2-1.0.xsd	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd'>";
+	private static String HEADER = "<?xml version='1.0' encoding='UTF-8'?><beans xmlns='http://www.springframework.org/schema/beans' xmlns:oauth='http://www.springframework.org/schema/security/oauth2' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'	xsi:schemaLocation='http://www.springframework.org/schema/security/oauth2 https://www.springframework.org/schema/security/spring-security-oauth2-1.0.xsd	http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans-3.0.xsd'>";
 	private static String FOOTER = "</beans>";
 	private static String TEMPLATE = "<oauth:resource id='resource' client-id='client' %s/>";
 }

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/config/xml/ResourceBeanDefinitionParserTests.java
Patch:
@@ -68,7 +68,7 @@ public void testResourceFromNonPropertyFile() {
 	public void testResourceFromPropertyFile() {
 		assertEquals("my-client-id-property-file", two.getClientId());
 		assertEquals("my-client-secret-property-file", two.getClientSecret());
-		assertEquals("http://myhost.com", two.getAccessTokenUri());
+		assertEquals("https://myhost.com", two.getAccessTokenUri());
 		assertEquals(2, two.getScope().size());
 		assertEquals("[none, all]", two.getScope().toString());
 	}
@@ -78,7 +78,7 @@ public void testResourceWithRedirectUri() {
 		assertEquals("my-client-id", three.getClientId());
 		assertNull(three.getClientSecret());
 		assertEquals("http://somewhere.com", three.getAccessTokenUri());
-		assertEquals("http://anywhere.com", three.getPreEstablishedRedirectUri());
+		assertEquals("https://anywhere.com", three.getPreEstablishedRedirectUri());
 		assertFalse(three.isUseCurrentUri());
 	}
 

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/AuthorizationRequestTests.java
Patch:
@@ -47,7 +47,7 @@ public void prepare() {
 		parameters = new HashMap<String, String>();
 		parameters.put("client_id", "theClient");
 		parameters.put("state", "XYZ123");
-		parameters.put("redirect_uri", "http://www.callistaenterprise.se");
+		parameters.put("redirect_uri", "https://callistaenterprise.se/");
 	}
 	
 	@Test
@@ -153,8 +153,8 @@ public void testRedirectUriDefaultsToMap() {
 
 		assertEquals("XYZ123", authorizationRequest.getState());
 		assertEquals("theClient", authorizationRequest.getClientId());
-		assertEquals("http://www.callistaenterprise.se", authorizationRequest.getRedirectUri());
-		assertEquals("http://www.callistaenterprise.se", authorizationRequest.getRequestParameters().get(OAuth2Utils.REDIRECT_URI));
+		assertEquals("https://callistaenterprise.se/", authorizationRequest.getRedirectUri());
+		assertEquals("https://callistaenterprise.se/", authorizationRequest.getRequestParameters().get(OAuth2Utils.REDIRECT_URI));
 		assertEquals("[one, two]", authorizationRequest.getScope().toString());
 	}
 

File: tests/annotation/approval/src/main/java/demo/Application.java
Patch:
@@ -66,14 +66,14 @@ public void configure(ClientDetailsServiceConfigurer clients) throws Exception {
 		            .scopes("read", "write", "trust")
 		            .resourceIds("oauth2-resource")
 		            .accessTokenValiditySeconds(60)
-		            .redirectUris("http://anywhere")
+		            .redirectUris("https://anywhere")
  		    .and()
 		        .withClient("my-client-with-registered-redirect")
 		            .authorizedGrantTypes("authorization_code")
 		            .authorities("ROLE_CLIENT")
 		            .scopes("read", "trust")
 		            .resourceIds("oauth2-resource")
-		            .redirectUris("http://anywhere?key=value")
+		            .redirectUris("https://anywhere?key=value")
  		    .and()
 		        .withClient("my-client-with-secret")
 		            .authorizedGrantTypes("client_credentials", "password")

File: tests/annotation/common/src/main/java/sparklr/common/AbstractEmptyAuthorizationCodeProviderTests.java
Patch:
@@ -249,7 +249,7 @@ protected static class MyClientWithRegisteredRedirect extends MyTrustedClient {
 		public MyClientWithRegisteredRedirect(Object target) {
 			super(target);
 			setClientId("my-client-with-registered-redirect");
-			setPreEstablishedRedirectUri("http://anywhere?key=value");
+			setPreEstablishedRedirectUri("https://anywhere?key=value");
 		}
 	}
 }

File: tests/annotation/common/src/main/java/sparklr/common/AbstractImplicitProviderTests.java
Patch:
@@ -41,7 +41,7 @@ public NonAutoApproveImplicit(Object target) {
 			super();
 			setClientId("my-trusted-client");
 			setId(getClientId());
-			setPreEstablishedRedirectUri("http://anywhere");
+			setPreEstablishedRedirectUri("https://anywhere");
 		}
 	}
 

File: tests/annotation/custom-authentication/src/main/java/demo/Application.java
Patch:
@@ -60,7 +60,7 @@ public void configure(ClientDetailsServiceConfigurer clients) throws Exception {
 					.resourceIds("oauth2-resource").accessTokenValiditySeconds(600).and()
 					.withClient("my-client-with-registered-redirect").authorizedGrantTypes("authorization_code")
 					.authorities("ROLE_CLIENT").scopes("read", "trust").resourceIds("oauth2-resource")
-					.redirectUris("http://anywhere?key=value").and().withClient("my-client-with-secret")
+					.redirectUris("https://anywhere?key=value").and().withClient("my-client-with-secret")
 					.authorizedGrantTypes("client_credentials", "password").authorities("ROLE_CLIENT").scopes("read")
 					.resourceIds("oauth2-resource").secret("secret");
 			// @formatter:on

File: tests/annotation/custom-grant/src/main/java/demo/Application.java
Patch:
@@ -73,14 +73,14 @@ public void configure(ClientDetailsServiceConfigurer clients) throws Exception {
 		            .scopes("read", "write", "trust")
 		            .resourceIds("oauth2-resource")
 		            .accessTokenValiditySeconds(600)
-		            .redirectUris("http://anywhere")
+		            .redirectUris("https://anywhere")
  		    .and()
 		        .withClient("my-client-with-registered-redirect")
 		            .authorizedGrantTypes("authorization_code")
 		            .authorities("ROLE_CLIENT")
 		            .scopes("read", "trust")
 		            .resourceIds("oauth2-resource")
-		            .redirectUris("http://anywhere?key=value")
+		            .redirectUris("https://anywhere?key=value")
  		    .and()
 		        .withClient("my-client-with-secret")
 		            .authorizedGrantTypes("client_credentials", "password")

File: tests/annotation/custom-grant/src/test/java/demo/ImplicitProviderTests.java
Patch:
@@ -48,7 +48,7 @@ public void run() {
 	private void getToken() {
 		Map<String, String> form = new LinkedHashMap<String, String>();
 		form.put("client_id", "my-trusted-client");
-		form.put("redirect_uri", "http://anywhere");
+		form.put("redirect_uri", "https://anywhere");
 		form.put("response_type", "token");
 		form.put("scope", "read");
 		ResponseEntity<Void> response = new TestRestTemplate("user", "password")

File: tests/annotation/form/src/main/java/demo/Application.java
Patch:
@@ -55,14 +55,14 @@ public void configure(ClientDetailsServiceConfigurer clients) throws Exception {
 		            .scopes("read", "write", "trust")
 		            .resourceIds("oauth2-resource")
 		            .accessTokenValiditySeconds(60)
-		            .redirectUris("http://anywhere")
+		            .redirectUris("https://anywhere")
  		    .and()
 		        .withClient("my-client-with-registered-redirect")
 		            .authorizedGrantTypes("authorization_code")
 		            .authorities("ROLE_CLIENT")
 		            .scopes("read", "trust")
 		            .resourceIds("oauth2-resource")
-		            .redirectUris("http://anywhere?key=value")
+		            .redirectUris("https://anywhere?key=value")
  		    .and()
 		        .withClient("my-client-with-secret")
 		            .authorizedGrantTypes("client_credentials", "password")

File: tests/annotation/jaxb/src/main/java/demo/Application.java
Patch:
@@ -92,14 +92,14 @@ public void configure(ClientDetailsServiceConfigurer clients) throws Exception {
 		            .scopes("read", "write", "trust")
 		            .resourceIds("oauth2-resource")
 		            .accessTokenValiditySeconds(60)
-		            .redirectUris("http://anywhere")
+		            .redirectUris("https://anywhere")
  		    .and()
 		        .withClient("my-client-with-registered-redirect")
 		            .authorizedGrantTypes("authorization_code")
 		            .authorities("ROLE_CLIENT")
 		            .scopes("read", "trust")
 		            .resourceIds("oauth2-resource")
-		            .redirectUris("http://anywhere?key=value")
+		            .redirectUris("https://anywhere?key=value")
  		    .and()
 		        .withClient("my-client-with-secret")
 		            .authorizedGrantTypes("client_credentials", "password")

File: tests/annotation/jaxb/src/test/java/demo/AuthorizationCodeProviderTests.java
Patch:
@@ -31,7 +31,7 @@ public class AuthorizationCodeProviderTests extends AbstractAuthorizationCodePro
 
 	@Test
 	public void testWrongClientIdProvided() throws Exception {
-		ResponseEntity<String> response = attemptToGetConfirmationPage("no-such-client", "http://anywhere");
+		ResponseEntity<String> response = attemptToGetConfirmationPage("no-such-client", "https://anywhere");
 		// With no client id you get an InvalidClientException on the server which is forwarded to /oauth/error
 		assertEquals(HttpStatus.UNAUTHORIZED, response.getStatusCode());
 		String body = response.getBody();
@@ -42,7 +42,7 @@ public void testWrongClientIdProvided() throws Exception {
 	@Test
 	public void testWrongClientIdAndOmittedResponseType() throws Exception {
 	    // Test wrong client id together with an omitted response_type
-	    ResponseEntity<String> response = attemptToGetConfirmationPage("no-such-client", "http://anywhere", null);
+	    ResponseEntity<String> response = attemptToGetConfirmationPage("no-such-client", "https://anywhere", null);
 	    // With bad client id you get an InvalidClientException on the server which is forwarded to /oauth/error
 	    assertEquals(HttpStatus.UNAUTHORIZED, response.getStatusCode());
 	    String body = response.getBody();
@@ -53,7 +53,7 @@ public void testWrongClientIdAndOmittedResponseType() throws Exception {
 	@Test
 	public void testWrongClientIdAndBadResponseTypeProvided() throws Exception {
 	    // Test wrong client id together with an omitted response_type
-	    ResponseEntity<String> response = attemptToGetConfirmationPage("no-such-client", "http://anywhere", "unsupported");
+	    ResponseEntity<String> response = attemptToGetConfirmationPage("no-such-client", "https://anywhere", "unsupported");
 	    // With bad client id you get an InvalidClientException on the server which is forwarded to /oauth/error
 	    assertEquals(HttpStatus.UNAUTHORIZED, response.getStatusCode());
 	    String body = response.getBody();

File: tests/annotation/jaxb/src/test/java/demo/ImplicitProviderTests.java
Patch:
@@ -54,7 +54,7 @@ protected Collection<? extends HttpMessageConverter<?>> getAdditionalConverters(
 	private void getToken() {
 		Map<String, String> form = new LinkedHashMap<String, String>();
 		form.put("client_id", "my-trusted-client");
-		form.put("redirect_uri", "http://anywhere");
+		form.put("redirect_uri", "https://anywhere");
 		form.put("response_type", "token");
 		form.put("scope", "read");
 		ResponseEntity<Void> response = new TestRestTemplate("user", "password")

File: tests/annotation/jdbc/src/main/java/demo/Application.java
Patch:
@@ -111,12 +111,12 @@ public void configure(ClientDetailsServiceConfigurer clients) throws Exception {
 					.scopes("read", "write", "trust")
 					.resourceIds("oauth2-resource")
 					.accessTokenValiditySeconds(60)
-					.redirectUris("http://anywhere").and()
+					.redirectUris("https://anywhere").and()
 				.withClient("my-client-with-registered-redirect")
 					.authorizedGrantTypes("authorization_code")
 					.authorities("ROLE_CLIENT").scopes("read", "trust")
 					.resourceIds("oauth2-resource")
-					.redirectUris("http://anywhere?key=value").and()
+					.redirectUris("https://anywhere?key=value").and()
 				.withClient("my-client-with-secret")
 					.authorizedGrantTypes("client_credentials", "password")
 					.authorities("ROLE_CLIENT").scopes("read")

File: tests/annotation/jpa/src/main/java/demo/Application.java
Patch:
@@ -81,10 +81,10 @@ public void configure(ClientDetailsServiceConfigurer clients) throws Exception {
 			clients.inMemory().withClient("my-trusted-client")
 					.authorizedGrantTypes("password", "authorization_code", "refresh_token", "implicit")
 					.authorities("ROLE_CLIENT", "ROLE_TRUSTED_CLIENT").scopes("read", "write", "trust")
-					.resourceIds("oauth2-resource").accessTokenValiditySeconds(600).redirectUris("http://anywhere").and()
+					.resourceIds("oauth2-resource").accessTokenValiditySeconds(600).redirectUris("https://anywhere").and()
 					.withClient("my-client-with-registered-redirect").authorizedGrantTypes("authorization_code")
 					.authorities("ROLE_CLIENT").scopes("read", "trust").resourceIds("oauth2-resource")
-					.redirectUris("http://anywhere?key=value").and().withClient("my-client-with-secret")
+					.redirectUris("https://anywhere?key=value").and().withClient("my-client-with-secret")
 					.authorizedGrantTypes("client_credentials", "password").authorities("ROLE_CLIENT").scopes("read")
 					.resourceIds("oauth2-resource").secret("secret");
 			// @formatter:on

File: tests/annotation/jpa/src/test/java/demo/AuthorizationCodeProviderCookieTests.java
Patch:
@@ -31,7 +31,7 @@ public class AuthorizationCodeProviderCookieTests extends AbstractEmptyAuthoriza
 	@Test
 	@OAuth2ContextConfiguration(resource = MyClientWithRegisteredRedirect.class, initialize = false)
 	public void testPostToProtectedResource() throws Exception {
-		approveAccessTokenGrant("http://anywhere?key=value", true);
+		approveAccessTokenGrant("https://anywhere?key=value", true);
 		assertNotNull(context.getAccessToken());
 		LinkedMultiValueMap<String, String> form = new LinkedMultiValueMap<>();
 		form.set("foo", "bar");

File: tests/annotation/jpa/src/test/java/demo/ImplicitProviderTests.java
Patch:
@@ -54,7 +54,7 @@ public void run() {
 	private void getToken() {
 		Map<String, String> form = new LinkedHashMap<String, String>();
 		form.put("client_id", "my-trusted-client");
-		form.put("redirect_uri", "http://anywhere");
+		form.put("redirect_uri", "https://anywhere");
 		form.put("response_type", "token");
 		form.put("scope", "read");
 		ResponseEntity<Void> response = new TestRestTemplate("user", "password")

File: tests/annotation/jwt/src/main/java/demo/Application.java
Patch:
@@ -63,13 +63,13 @@ public void configure(ClientDetailsServiceConfigurer clients) throws Exception {
 		            .scopes("read", "write", "trust")
 		            .accessTokenValiditySeconds(60)
 		            .refreshTokenValiditySeconds(160)
-		            .redirectUris("http://anywhere")
+		            .redirectUris("https://anywhere")
  		    .and()
 		        .withClient("my-client-with-registered-redirect")
 		            .authorizedGrantTypes("authorization_code")
 		            .authorities("ROLE_CLIENT")
 		            .scopes("read", "trust")
-		            .redirectUris("http://anywhere?key=value")
+		            .redirectUris("https://anywhere?key=value")
  		    .and()
 		        .withClient("my-client-with-secret")
 		            .authorizedGrantTypes("client_credentials", "password")

File: tests/annotation/mappings/src/main/java/demo/Application.java
Patch:
@@ -109,14 +109,14 @@ public void configure(ClientDetailsServiceConfigurer clients) throws Exception {
 		            .scopes("read", "write", "trust")
 		            .resourceIds("sparklr")
 		            .accessTokenValiditySeconds(60)
-		            .redirectUris("http://anywhere")
+		            .redirectUris("https://anywhere")
  		    .and()
 		        .withClient("my-client-with-registered-redirect")
 		            .authorizedGrantTypes("authorization_code")
 		            .authorities("ROLE_CLIENT")
 		            .scopes("read", "trust")
 		            .resourceIds("sparklr")
-		            .redirectUris("http://anywhere?key=value")
+		            .redirectUris("https://anywhere?key=value")
  		    .and()
 		        .withClient("my-client-with-secret")
 		            .authorizedGrantTypes("client_credentials", "password")

File: tests/annotation/mappings/src/test/java/demo/AuthorizationCodeProviderTests.java
Patch:
@@ -35,7 +35,7 @@ public class AuthorizationCodeProviderTests extends AbstractAuthorizationCodePro
 	public void testInsufficientScopeInResourceRequest() throws Exception {
 		AuthorizationCodeResourceDetails resource = (AuthorizationCodeResourceDetails) context.getResource();
 		resource.setScope(Arrays.asList("trust"));
-		approveAccessTokenGrant("http://anywhere?key=value", true);
+		approveAccessTokenGrant("https://anywhere?key=value", true);
 		assertNotNull(context.getAccessToken());
 		try {
 			http.getForString("/admin/beans");

File: tests/annotation/multi/src/main/java/demo/Application.java
Patch:
@@ -116,14 +116,14 @@ public void configure(ClientDetailsServiceConfigurer clients) throws Exception {
 		            .scopes("read", "write", "trust")
 		            .resourceIds("oauth2/admin")
 		            .accessTokenValiditySeconds(60)
-		            .redirectUris("http://anywhere")
+		            .redirectUris("https://anywhere")
  		    .and()
 		        .withClient("my-client-with-registered-redirect")
 		            .authorizedGrantTypes("authorization_code")
 		            .authorities("ROLE_CLIENT")
 		            .scopes("read", "trust")
 		            .resourceIds("oauth2/admin")
-		            .redirectUris("http://anywhere?key=value")
+		            .redirectUris("https://anywhere?key=value")
  		    .and()
 		        .withClient("my-client-with-secret")
 		            .authorizedGrantTypes("client_credentials", "password")

File: tests/annotation/ssl/src/main/java/demo/Application.java
Patch:
@@ -66,7 +66,7 @@ public void configure(ClientDetailsServiceConfigurer clients) throws Exception {
 		            .authorities("ROLE_CLIENT")
 		            .scopes("read", "trust")
 		            .resourceIds("oauth2-resource")
-		            .redirectUris("http://anywhere?key=value")
+		            .redirectUris("https://anywhere?key=value")
  		    .and()
 		        .withClient("my-client-with-secret")
 		            .authorizedGrantTypes("client_credentials", "password")

File: tests/annotation/ssl/src/test/java/demo/AuthorizationCodeProviderCookieTests.java
Patch:
@@ -33,7 +33,7 @@ public class AuthorizationCodeProviderCookieTests extends AbstractEmptyAuthoriza
 	@Test
 	@OAuth2ContextConfiguration(resource = MyTrustedClient.class, initialize = false)
 	public void testPostToProtectedResource() throws Exception {
-		approveAccessTokenGrant("http://anywhere", true);
+		approveAccessTokenGrant("https://anywhere", true);
 		assertNotNull(context.getAccessToken());
 		LinkedMultiValueMap<String, String> form = new LinkedMultiValueMap<>();
 		form.set("foo", "bar");

File: tests/annotation/ssl/src/test/java/demo/ImplicitProviderTests.java
Patch:
@@ -56,7 +56,7 @@ public void run() {
 	private void getToken() {
 		Map<String, String> form = new LinkedHashMap<String, String>();
 		form.put("client_id", "my-trusted-client");
-		form.put("redirect_uri", "http://foo.com");
+		form.put("redirect_uri", "http://www.foo.com/");
 		form.put("response_type", "token");
 		form.put("scope", "read");
 		ResponseEntity<Void> response = new TestRestTemplate("user", "password")

File: tests/annotation/vanilla/src/main/java/demo/Application.java
Patch:
@@ -66,14 +66,14 @@ public void configure(ClientDetailsServiceConfigurer clients) throws Exception {
 		            .scopes("read", "write", "trust")
 		            .resourceIds("oauth2-resource")
 		            .accessTokenValiditySeconds(600)
-		            .redirectUris("http://anywhere")
+		            .redirectUris("https://anywhere")
  		    .and()
 		        .withClient("my-client-with-registered-redirect")
 		            .authorizedGrantTypes("authorization_code")
 		            .authorities("ROLE_CLIENT")
 		            .scopes("read", "trust")
 		            .resourceIds("oauth2-resource")
-		            .redirectUris("http://anywhere?key=value")
+		            .redirectUris("https://anywhere?key=value")
  		    .and()
 		        .withClient("my-client-with-secret")
 		            .authorizedGrantTypes("client_credentials", "password")

File: tests/annotation/vanilla/src/test/java/demo/AuthorizationCodeProviderCookieTests.java
Patch:
@@ -31,7 +31,7 @@ public class AuthorizationCodeProviderCookieTests extends AbstractEmptyAuthoriza
 	@Test
 	@OAuth2ContextConfiguration(resource = MyClientWithRegisteredRedirect.class, initialize = false)
 	public void testPostToProtectedResource() throws Exception {
-		approveAccessTokenGrant("http://anywhere?key=value", true);
+		approveAccessTokenGrant("https://anywhere?key=value", true);
 		assertNotNull(context.getAccessToken());
 		LinkedMultiValueMap<String, String> form = new LinkedMultiValueMap<>();
 		form.set("foo", "bar");

File: tests/annotation/vanilla/src/test/java/demo/ImplicitProviderTests.java
Patch:
@@ -54,7 +54,7 @@ public void run() {
 	private void getToken() {
 		Map<String, String> form = new LinkedHashMap<String, String>();
 		form.put("client_id", "my-trusted-client");
-		form.put("redirect_uri", "http://anywhere");
+		form.put("redirect_uri", "https://anywhere");
 		form.put("response_type", "token");
 		form.put("scope", "read");
 		ResponseEntity<Void> response = new TestRestTemplate("user", "password")

File: tests/xml/common/src/main/java/sparklr/common/AbstractImplicitProviderTests.java
Patch:
@@ -42,7 +42,7 @@ public NonAutoApproveImplicit(Object target) {
 			super();
 			setClientId("my-trusted-client");
 			setId(getClientId());
-			setPreEstablishedRedirectUri("http://anywhere");
+			setPreEstablishedRedirectUri("https://anywhere");
 		}
 	}
 

File: tests/xml/mappings/src/test/java/demo/AuthorizationCodeProviderTests.java
Patch:
@@ -37,7 +37,7 @@ public class AuthorizationCodeProviderTests extends AbstractAuthorizationCodePro
 	public void testInsufficientScopeInResourceRequest() throws Exception {
 		AuthorizationCodeResourceDetails resource = (AuthorizationCodeResourceDetails) context.getResource();
 		resource.setScope(Arrays.asList("trust"));
-		approveAccessTokenGrant("http://anywhere?key=value", true);
+		approveAccessTokenGrant("https://anywhere?key=value", true);
 		assertNotNull(context.getAccessToken());
 		try {
 			http.getForString("/admin/beans");

File: samples/oauth/sparklr/src/main/java/org/springframework/security/oauth/examples/sparklr/impl/PhotoServiceImpl.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: samples/oauth2/sparklr/src/main/java/org/springframework/security/oauth/examples/sparklr/config/MethodSecurityConfig.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: samples/oauth2/sparklr/src/main/java/org/springframework/security/oauth/examples/sparklr/config/OAuth2ServerConfig.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: samples/oauth2/sparklr/src/main/java/org/springframework/security/oauth/examples/sparklr/config/ServletInitializer.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: samples/oauth2/sparklr/src/main/java/org/springframework/security/oauth/examples/sparklr/oauth/SparklrUserApprovalHandler.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: samples/oauth2/sparklr/src/test/java/org/springframework/security/oauth2/provider/AuthorizationCodeProviderTests.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  * 
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * 
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: samples/oauth2/sparklr/src/test/java/org/springframework/security/samples/config/ApplicationConfigurationTests.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: samples/oauth2/tonr/src/main/java/org/springframework/security/oauth/examples/config/ServletInitializer.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: samples/oauth2/tonr/src/main/java/org/springframework/security/oauth/examples/tonr/converter/AccessTokenRequestConverter.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: samples/oauth2/tonr/src/test/java/org/springframework/security/samples/config/AdHocTests.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: samples/oauth2/tonr/src/test/java/org/springframework/security/samples/config/SecurityConfigTests.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-jwt/src/main/java/org/springframework/security/jwt/AlgorithmMetadata.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-jwt/src/main/java/org/springframework/security/jwt/BinaryFormat.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-jwt/src/main/java/org/springframework/security/jwt/Jwt.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-jwt/src/main/java/org/springframework/security/jwt/JwtAlgorithms.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-jwt/src/main/java/org/springframework/security/jwt/JwtHelper.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-jwt/src/main/java/org/springframework/security/jwt/codec/Codecs.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-jwt/src/main/java/org/springframework/security/jwt/crypto/cipher/CipherMetadata.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-jwt/src/main/java/org/springframework/security/jwt/crypto/sign/EllipticCurveKeyHelper.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-jwt/src/main/java/org/springframework/security/jwt/crypto/sign/EllipticCurveSignatureHelper.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-jwt/src/main/java/org/springframework/security/jwt/crypto/sign/EllipticCurveVerifier.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-jwt/src/main/java/org/springframework/security/jwt/crypto/sign/InvalidSignatureException.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-jwt/src/main/java/org/springframework/security/jwt/crypto/sign/MacSigner.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-jwt/src/main/java/org/springframework/security/jwt/crypto/sign/RsaKeyHelper.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-jwt/src/main/java/org/springframework/security/jwt/crypto/sign/RsaSigner.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-jwt/src/main/java/org/springframework/security/jwt/crypto/sign/RsaVerifier.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-jwt/src/main/java/org/springframework/security/jwt/crypto/sign/SignatureVerifier.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-jwt/src/main/java/org/springframework/security/jwt/crypto/sign/Signer.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-jwt/src/main/java/org/springframework/security/jwt/crypto/sign/SignerVerifier.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-jwt/src/test/java/org/springframework/security/jwt/JwtSpecData.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-jwt/src/test/java/org/springframework/security/jwt/JwtTests.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-jwt/src/test/java/org/springframework/security/jwt/RubyJwtIntegrationTests.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-jwt/src/test/java/org/springframework/security/jwt/crypto/cipher/RsaTestKeyData.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-jwt/src/test/java/org/springframework/security/jwt/crypto/sign/EllipticCurveVerifierTests.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-jwt/src/test/java/org/springframework/security/jwt/crypto/sign/RsaSigningTests.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/common/OAuthCodec.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/common/OAuthConsumerParameter.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/common/OAuthException.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/common/OAuthProviderParameter.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/common/signature/CoreOAuthSignatureMethodFactory.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/common/signature/HMAC_SHA1SignatureMethod.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/common/signature/InvalidSignatureException.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/common/signature/OAuthSignatureMethod.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/common/signature/OAuthSignatureMethodFactory.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/common/signature/PlainTextSignatureMethod.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/common/signature/RSAKeySecret.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/common/signature/RSA_SHA1SignatureMethod.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/common/signature/SharedConsumerSecret.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/common/signature/SharedConsumerSecretImpl.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/common/signature/SignatureSecret.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/common/signature/SignatureSecretEditor.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/common/signature/UnsupportedSignatureMethodException.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/config/ConsumerDetailsFactoryBean.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  * 
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * 
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/config/ConsumerServiceBeanDefinitionParser.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/config/ExpressionHandlerBeanDefinitionParser.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/config/OAuthConsumerBeanDefinitionParser.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/config/OAuthProviderBeanDefinitionParser.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/config/OAuthSecurityNamespaceHandler.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/config/ProtectedResourceDetailsBeanDefinitionParser.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/config/TokenServiceBeanDefinitionParser.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/config/VerifierServiceBeanDefinitionParser.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/consumer/BaseProtectedResourceDetails.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/consumer/InMemoryProtectedResourceDetailsService.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/consumer/InvalidOAuthRealmException.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/consumer/OAuthConsumerSupport.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/consumer/OAuthConsumerToken.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/consumer/OAuthRequestFailedException.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/consumer/ProtectedResourceDetails.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/consumer/ProtectedResourceDetailsService.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/consumer/UnverifiedRequestTokenException.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/consumer/client/CoreOAuthConsumerSupport.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/consumer/filter/OAuthConsumerContextFilter.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/consumer/filter/OAuthConsumerProcessingFilter.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/consumer/net/DefaultOAuthURLStreamHandlerFactory.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/consumer/net/OAuthOverHttpURLStreamHandler.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/consumer/net/OAuthOverHttpsURLStreamHandler.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/consumer/net/OAuthURLStreamHandlerFactory.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/consumer/nonce/NonceFactory.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/consumer/nonce/UUIDNonceFactory.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/consumer/token/HttpSessionBasedTokenServices.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/consumer/token/OAuthConsumerTokenServices.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/provider/BaseConsumerDetails.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/provider/ConsumerAuthentication.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/provider/ConsumerCredentials.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/provider/ConsumerDetails.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/provider/ConsumerDetailsService.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/provider/ExtraTrustConsumerDetails.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/provider/InMemoryConsumerDetailsService.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/provider/InvalidOAuthParametersException.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/provider/OAuthAuthenticationDetails.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/provider/OAuthProcessingFilterEntryPoint.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/provider/OAuthProviderSupport.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/provider/OAuthVersionUnsupportedException.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/provider/ResourceSpecificConsumerDetails.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/provider/attributes/ConsumerKeysAllowed.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/provider/attributes/ConsumerRolesAllowed.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/provider/attributes/ConsumerSecurityConfig.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/provider/attributes/ConsumerSecurityMetadataSource.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/provider/attributes/ConsumerSecurityVoter.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/provider/attributes/DenyAllConsumers.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/provider/attributes/PermitAllConsumers.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/provider/filter/AccessTokenProcessingFilter.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/provider/filter/CoreOAuthProviderSupport.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/provider/filter/OAuthProviderProcessingFilter.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/provider/filter/ProtectedResourceProcessingFilter.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/provider/filter/UnauthenticatedRequestTokenProcessingFilter.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/provider/filter/UserAuthorizationProcessingFilter.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/provider/filter/UserAuthorizationSuccessfulAuthenticationHandler.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/provider/nonce/ExpiringTimestampNonceServices.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/provider/nonce/InMemoryNonceServices.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/provider/nonce/NonceAlreadyUsedException.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/provider/nonce/NullNonceServices.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/provider/nonce/OAuthNonceServices.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/provider/token/ExpiredOAuthTokenException.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/provider/token/InMemoryProviderTokenServices.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/provider/token/InMemorySelfCleaningProviderTokenServices.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/provider/token/InvalidOAuthTokenException.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/provider/token/OAuthAccessProviderToken.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/provider/token/OAuthProviderToken.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/provider/token/OAuthProviderTokenImpl.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/provider/token/OAuthProviderTokenServices.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/provider/token/RandomValueProviderTokenServices.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/provider/verifier/VerificationFailedException.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/test/java/net/oauth/signature/GoogleCodeCompatibilityTests.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/test/java/org/springframework/security/oauth/common/OAuthCodecTests.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/test/java/org/springframework/security/oauth/common/signature/CoreOAuthSignatureMethodFactoryTests.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/test/java/org/springframework/security/oauth/common/signature/HMAC_SHA1SignatureMethodTests.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/test/java/org/springframework/security/oauth/common/signature/PlainTextSignatureMethodTests.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/test/java/org/springframework/security/oauth/common/signature/RSA_SHA1SignatureMethodTests.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/test/java/org/springframework/security/oauth/config/AuthorizationServerBeanDefinitionParserTests.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/test/java/org/springframework/security/oauth/consumer/client/CoreOAuthConsumerSupportTests.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/test/java/org/springframework/security/oauth/consumer/rememberme/HttpSessionOAuthRememberMeServicesTests.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/test/java/org/springframework/security/oauth/provider/CoreOAuthProviderSupportTests.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/test/java/org/springframework/security/oauth/provider/filter/AccessTokenProcessingFilterTests.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/test/java/org/springframework/security/oauth/provider/filter/OAuthProcessingFilterTests.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/test/java/org/springframework/security/oauth/provider/filter/OAuthUserAuthorizationProcessingFilterTests.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/test/java/org/springframework/security/oauth/provider/filter/ProtectedResourceProcessingFilterTests.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/test/java/org/springframework/security/oauth/provider/filter/UnauthenticatedRequestTokenProcessingFilterTests.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth/src/test/java/org/springframework/security/oauth/provider/filter/UserAuthorizationSuccessfulAuthenticationHandlerTests.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/DefaultOAuth2RequestAuthenticator.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/OAuth2ClientContext.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/OAuth2RequestAuthenticator.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/OAuth2RestOperations.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/discovery/ProviderConfiguration.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/discovery/ProviderDiscoveryClient.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/filter/OAuth2ClientAuthenticationProcessingFilter.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/filter/state/DefaultStateKeyGenerator.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  * 
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * 
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/filter/state/StateKeyGenerator.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  * 
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * 
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/http/OAuth2ErrorHandler.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/resource/UserApprovalRequiredException.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/test/BeforeOAuth2Context.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/test/OAuth2ContextConfiguration.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/test/OAuth2ContextSetup.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/test/RestTemplateHolder.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/test/TestAccounts.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/token/AccessTokenProvider.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/token/AccessTokenProviderChain.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/token/AccessTokenRequest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/token/ClientKeyGenerator.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/token/ClientTokenServices.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/token/DefaultAccessTokenRequest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/token/DefaultClientKeyGenerator.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  * 
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * 
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/token/DefaultRequestEnhancer.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/token/RequestEnhancer.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/token/auth/ClientAuthenticationHandler.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/token/grant/code/AuthorizationCodeAccessTokenProvider.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -20,7 +20,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/token/grant/password/ResourceOwnerPasswordResourceDetails.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/AuthenticationScheme.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  * 
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * 
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/ExpiringOAuth2RefreshToken.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/OAuth2AccessToken.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/OAuth2AccessTokenJackson1Deserializer.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/OAuth2AccessTokenJackson1Serializer.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/OAuth2AccessTokenJackson2Deserializer.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/OAuth2AccessTokenJackson2Serializer.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/OAuth2RefreshToken.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/exceptions/InvalidTokenException.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/exceptions/OAuth2ExceptionJackson1Deserializer.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  * 
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * 
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/exceptions/OAuth2ExceptionJackson1Serializer.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  * 
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * 
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/exceptions/OAuth2ExceptionJackson2Deserializer.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  * 
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * 
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/exceptions/OAuth2ExceptionJackson2Serializer.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  * 
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * 
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/util/DefaultJdbcListFactory.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/util/Jackson2JsonParser.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/util/JacksonJsonParser.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/util/JdbcListFactory.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/util/JsonParser.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/util/JsonParserFactory.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/util/OAuth2Utils.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/util/ProxyCreator.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/builders/ClientDetailsServiceBuilder.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/builders/InMemoryClientDetailsServiceBuilder.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/builders/JdbcClientDetailsServiceBuilder.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/configuration/ClientDetailsServiceConfiguration.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/configurers/ClientDetailsServiceConfigurer.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/web/configuration/AuthorizationServerConfigurer.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/web/configuration/AuthorizationServerConfigurerAdapter.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/web/configuration/AuthorizationServerEndpointsConfiguration.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/web/configuration/AuthorizationServerSecurityConfiguration.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/web/configuration/EnableAuthorizationServer.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/web/configuration/EnableOAuth2Client.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/web/configuration/EnableResourceServer.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/web/configuration/OAuth2ClientConfiguration.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/web/configuration/ResourceServerConfiguration.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/web/configuration/ResourceServerConfigurer.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/web/configuration/ResourceServerConfigurerAdapter.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/web/configurers/AuthorizationServerEndpointsConfigurer.java
Patch:
@@ -5,7 +5,7 @@
  * use this file except in compliance with the License. You may obtain a copy of
  * the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/web/configurers/AuthorizationServerSecurityConfigurer.java
Patch:
@@ -5,7 +5,7 @@
  * use this file except in compliance with the License. You may obtain a copy of
  * the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/web/configurers/ResourceServerSecurityConfigurer.java
Patch:
@@ -5,7 +5,7 @@
  * use this file except in compliance with the License. You may obtain a copy of
  * the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/xml/AuthorizationServerBeanDefinitionParser.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  * 
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * 
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/xml/ClientBeanDefinitionParser.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  * 
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * 
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/xml/ClientDetailsServiceBeanDefinitionParser.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/xml/ExpressionHandlerBeanDefinitionParser.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/xml/OAuth2ClientContextFactoryBean.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/xml/OAuth2SecurityNamespaceHandler.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  * 
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * 
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/xml/ProviderBeanDefinitionParser.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/xml/ResourceBeanDefinitionParser.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/xml/ResourceServerBeanDefinitionParser.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  * 
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * 
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/xml/RestTemplateBeanDefinitionParser.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/xml/WebExpressionHandlerBeanDefinitionParser.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/http/converter/FormOAuth2AccessTokenMessageConverter.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/http/converter/FormOAuth2ExceptionHttpMessageConverter.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/http/converter/jaxb/AbstractJaxbMessageConverter.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/http/converter/jaxb/JaxbOAuth2AccessToken.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/http/converter/jaxb/JaxbOAuth2AccessTokenMessageConverter.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/http/converter/jaxb/JaxbOAuth2Exception.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/http/converter/jaxb/JaxbOAuth2ExceptionMessageConverter.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/BaseRequest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/ClientAlreadyExistsException.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/ClientDetailsService.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/ClientRegistrationException.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/ClientRegistrationService.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/CompositeTokenGranter.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/DefaultSecurityContextAccessor.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/NoSuchClientException.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/OAuth2RequestFactory.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/SecurityContextAccessor.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/TokenGranter.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/approval/Approval.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/approval/ApprovalStore.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/approval/ApprovalStoreUserApprovalHandler.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/approval/DefaultUserApprovalHandler.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/approval/InMemoryApprovalStore.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/approval/JdbcApprovalStore.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/approval/TokenApprovalStore.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/approval/TokenStoreUserApprovalHandler.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/authentication/BearerTokenExtractor.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/authentication/OAuth2AuthenticationDetails.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/authentication/OAuth2AuthenticationDetailsSource.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/authentication/OAuth2AuthenticationManager.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  * 
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * 
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/authentication/OAuth2AuthenticationProcessingFilter.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  * 
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * 
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/authentication/TokenExtractor.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/client/ClientCredentialsTokenEndpointFilter.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  * 
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * 
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/client/ClientCredentialsTokenGranter.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/client/ClientDetailsUserDetailsService.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  * 
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * 
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/client/InMemoryClientDetailsService.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/client/JdbcClientDetailsService.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/code/AuthorizationCodeTokenGranter.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/AbstractEndpoint.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/AuthorizationEndpoint.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  * 
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * 
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/CheckTokenEndpoint.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/DefaultRedirectResolver.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/FrameworkEndpoint.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/FrameworkEndpointHandlerMapping.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/TokenEndpoint.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/TokenEndpointAuthenticationFilter.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/error/AbstractOAuth2SecurityExceptionHandler.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  * 
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * 
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/error/DefaultOAuth2ExceptionRenderer.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  * 
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * 
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/error/DefaultWebResponseExceptionTranslator.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/error/OAuth2AccessDeniedHandler.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  * 
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * 
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/error/OAuth2AuthenticationEntryPoint.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  * 
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * 
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/error/OAuth2ExceptionRenderer.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  * 
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * 
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/error/WebResponseExceptionTranslator.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/expression/OAuth2ExpressionParser.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/expression/OAuth2ExpressionUtils.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  * 
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * 
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/expression/OAuth2SecurityExpressionMethods.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/expression/OAuth2WebSecurityExpressionHandler.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  * 
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * 
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/implicit/ImplicitTokenGranter.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/implicit/ImplicitTokenRequest.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/password/ResourceOwnerPasswordTokenGranter.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/refresh/RefreshTokenGranter.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/request/DefaultOAuth2RequestFactory.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  * 
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * 
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/AbstractTokenGranter.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  * 
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * 
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/AuthenticationKeyGenerator.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  * 
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * 
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/AuthorizationServerTokenServices.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/ConsumerTokenServices.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  * 
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * 
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/DefaultAuthenticationKeyGenerator.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  * 
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * 
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/DefaultTokenServices.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  * 
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * 
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/TokenEnhancer.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/TokenEnhancerChain.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/DelegatingJwtClaimsSetVerifier.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/IssuerClaimVerifier.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/JwtClaimsSetVerifier.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/JwtTokenStore.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/KeyStoreKeyFactory.java
Patch:
@@ -4,7 +4,7 @@
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/jwk/EllipticCurveJwkDefinition.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/jwk/JwkAttributes.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/jwk/JwkDefinition.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/jwk/JwkDefinitionSource.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/jwk/JwkException.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/jwk/JwkSetConverter.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/web/configurers/AuthorizationServerSecurityConfigurer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2002-2013 the original author or authors.
+ * Copyright 2002-2019 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
@@ -141,7 +141,7 @@ public void init(HttpSecurity http) throws Exception {
 			http.userDetailsService(new ClientDetailsUserDetailsService(clientDetailsService()));
 		}
 		http.securityContext().securityContextRepository(new NullSecurityContextRepository()).and().csrf().disable()
-				.httpBasic().realmName(realm);
+				.httpBasic().authenticationEntryPoint(this.authenticationEntryPoint).realmName(realm);
 		if (sslOnly) {
 			http.requiresChannel().anyRequest().requiresSecure();
 		}

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/code/SubdomainRedirectResolverTests.java
Patch:
@@ -23,7 +23,7 @@ public class SubdomainRedirectResolverTests
 
 
 	@Test
-	public void testRedirectWatchdox() throws Exception 
+	public void testRedirectMatch() throws Exception
 	{
 		Set<String> redirectUris = new HashSet<String>(Arrays.asList("http://watchdox.com"));
 		client.setRegisteredRedirectUri(redirectUris);
@@ -32,9 +32,9 @@ public void testRedirectWatchdox() throws Exception
 	}
 
 	@Test(expected=RedirectMismatchException.class)
-	public void testRedirectBadWatchdox() throws Exception 
+	public void testRedirectNoMatch() throws Exception
 	{
-		Set<String> redirectUris = new HashSet<String>(Arrays.asList("http//watchdox.com"));
+		Set<String> redirectUris = new HashSet<String>(Arrays.asList("http://watchdox.com"));
 		client.setRegisteredRedirectUri(redirectUris);
 		String requestedRedirect = "http://anywhere.google.com";
 		assertEquals(requestedRedirect, resolver.resolveRedirect(requestedRedirect, client));

File: tests/annotation/jpa/src/test/java/demo/AuthorizationCodeProviderCookieTests.java
Patch:
@@ -31,7 +31,7 @@ public class AuthorizationCodeProviderCookieTests extends AbstractEmptyAuthoriza
 	@Test
 	@OAuth2ContextConfiguration(resource = MyClientWithRegisteredRedirect.class, initialize = false)
 	public void testPostToProtectedResource() throws Exception {
-		approveAccessTokenGrant("http://anywhere", true);
+		approveAccessTokenGrant("http://anywhere?key=value", true);
 		assertNotNull(context.getAccessToken());
 		LinkedMultiValueMap<String, String> form = new LinkedMultiValueMap<>();
 		form.set("foo", "bar");

File: tests/annotation/vanilla/src/test/java/demo/AuthorizationCodeProviderCookieTests.java
Patch:
@@ -31,7 +31,7 @@ public class AuthorizationCodeProviderCookieTests extends AbstractEmptyAuthoriza
 	@Test
 	@OAuth2ContextConfiguration(resource = MyClientWithRegisteredRedirect.class, initialize = false)
 	public void testPostToProtectedResource() throws Exception {
-		approveAccessTokenGrant("http://anywhere", true);
+		approveAccessTokenGrant("http://anywhere?key=value", true);
 		assertNotNull(context.getAccessToken());
 		LinkedMultiValueMap<String, String> form = new LinkedMultiValueMap<>();
 		form.set("foo", "bar");

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/TokenEndpoint.java
Patch:
@@ -165,8 +165,8 @@ public ResponseEntity<OAuth2Exception> handleHttpRequestMethodNotSupportedExcept
 	
 	@ExceptionHandler(Exception.class)
 	public ResponseEntity<OAuth2Exception> handleException(Exception e) throws Exception {
-		if (logger.isWarnEnabled()) {
-			logger.warn("Handling error: " + e.getClass().getSimpleName() + ", " + e.getMessage());
+		if (logger.isErrorEnabled()) {
+			logger.error("Handling error: " + e.getClass().getSimpleName() + ", " + e.getMessage(), e);
 		}
 		return getExceptionTranslator().translate(e);
 	}

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/RemoteTokenServices.java
Patch:
@@ -113,7 +113,7 @@ public OAuth2Authentication loadAuthentication(String accessToken) throws Authen
 		}
 
 		// gh-838
-		if (!Boolean.TRUE.equals(map.get("active"))) {
+		if (map.containsKey("active") && !"true".equals(String.valueOf(map.get("active")))) {
 			logger.debug("check_token returned active attribute: " + map.get("active"));
 			throw new InvalidTokenException(accessToken);
 		}

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/DefaultRedirectResolver.java
Patch:
@@ -167,6 +167,6 @@ private String obtainMatchingRedirect(Set<String> redirectUris, String requested
 			}
 		}
 		throw new RedirectMismatchException("Invalid redirect: " + requestedRedirect
-				+ " does not match one of the registered values: " + redirectUris.toString());
+				+ " does not match one of the registered values.");
 	}
 }

File: samples/oauth2/sparklr/src/main/java/org/springframework/security/oauth/examples/sparklr/config/OAuth2ServerConfig.java
Patch:
@@ -116,6 +116,7 @@ public void configure(ClientDetailsServiceConfigurer clients) throws Exception {
 			 			.authorities("ROLE_CLIENT")
 			 			.scopes("read", "write")
 			 			.secret("secret")
+						.redirectUris("http://localhost:8080/tonr2/sparklr/photos")
 			 		.and()
 			 		.withClient("tonr-with-redirect")
 			 			.resourceIds(SPARKLR_RESOURCE_ID)

File: tests/annotation/approval/src/test/java/demo/AuthorizationCodeProviderTests.java
Patch:
@@ -22,9 +22,9 @@
 public class AuthorizationCodeProviderTests extends AbstractAuthorizationCodeProviderTests {
 
 	protected void verifyAuthorizationPage(String page) {
-		assertTrue(page.contains("action='/oauth/authorize'"));
-		assertTrue(page.contains("<input name='user_oauth_approval'"));
-		assertTrue(page.contains("type='radio")); // approval store
+		assertTrue(page.contains("action=\"/oauth/authorize\""));
+		assertTrue(page.contains("<input name=\"user_oauth_approval\""));
+		assertTrue(page.contains("type=\"radio")); // approval store
 	}
 
 }

File: tests/annotation/jdbc/src/test/java/demo/AuthorizationCodeProviderTests.java
Patch:
@@ -34,8 +34,8 @@ protected String getUsername() {
 	}
 
 	protected void verifyAuthorizationPage(String page) {
-		assertTrue(page.contains("action='/oauth/authorize'"));
-		assertTrue(page.contains("<input name='user_oauth_approval'"));
-		assertFalse(page.contains("type='radio")); // no approval store
+		assertTrue(page.contains("action=\"/oauth/authorize\""));
+		assertTrue(page.contains("<input name=\"user_oauth_approval\""));
+		assertFalse(page.contains("type=\"radio")); // no approval store
 	}
 }

File: tests/xml/approval/src/test/java/demo/AuthorizationCodeProviderTests.java
Patch:
@@ -25,9 +25,9 @@
 public class AuthorizationCodeProviderTests extends AbstractAuthorizationCodeProviderTests {
 
 	protected void verifyAuthorizationPage(String page) {
-		assertTrue(page.contains("action='/oauth/authorize'"));
-		assertTrue(page.contains("<input name='user_oauth_approval'"));
-		assertTrue(page.contains("type='radio")); // approval store
+		assertTrue(page.contains("action=\"/oauth/authorize\""));
+		assertTrue(page.contains("<input name=\"user_oauth_approval\""));
+		assertTrue(page.contains("type=\"radio")); // approval store
 	}
 
 }

File: tests/xml/jdbc/src/test/java/demo/AuthorizationCodeProviderTests.java
Patch:
@@ -26,8 +26,8 @@
 public class AuthorizationCodeProviderTests extends AbstractAuthorizationCodeProviderTests {
 
 	protected void verifyAuthorizationPage(String page) {
-		assertTrue(page.contains("action='/oauth/authorize'"));
-		assertTrue(page.contains("<input name='user_oauth_approval'"));
-		assertFalse(page.contains("type='radio")); // no approval store
+		assertTrue(page.contains("action=\"/oauth/authorize\""));
+		assertTrue(page.contains("<input name=\"user_oauth_approval\""));
+		assertFalse(page.contains("type=\"radio")); // no approval store
 	}
 }

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/AuthorizationEndpoint.java
Patch:
@@ -241,7 +241,9 @@ public View approveOrDeny(@RequestParam Map<String, String> approvalParameters,
 	// We need explicit approval from the user.
 	private ModelAndView getUserApprovalPageResponse(Map<String, Object> model,
 			AuthorizationRequest authorizationRequest, Authentication principal) {
-		logger.debug("Loading user approval page: " + userApprovalPage);
+		if (logger.isDebugEnabled()) {
+			logger.debug("Loading user approval page: " + userApprovalPage);
+		}
 		model.putAll(userApprovalHandler.getUserApprovalRequest(authorizationRequest, principal));
 		return new ModelAndView(userApprovalPage, model);
 	}

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/RemoteTokenServices.java
Patch:
@@ -106,7 +106,9 @@ public OAuth2Authentication loadAuthentication(String accessToken) throws Authen
 		Map<String, Object> map = postForMap(checkTokenEndpointUrl, formData, headers);
 
 		if (map.containsKey("error")) {
-			logger.debug("check_token returned error: " + map.get("error"));
+			if (logger.isDebugEnabled()) {
+				logger.debug("check_token returned error: " + map.get("error"));
+			}
 			throw new InvalidTokenException(accessToken);
 		}
 

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/code/SubdomainRedirectResolverTests.java
Patch:
@@ -27,7 +27,7 @@ public void testRedirectWatchdox() throws Exception
 	{
 		Set<String> redirectUris = new HashSet<String>(Arrays.asList("http://watchdox.com"));
 		client.setRegisteredRedirectUri(redirectUris);
-		String requestedRedirect = "http://anywhere.watchdox.com/something";
+		String requestedRedirect = "http://anywhere.watchdox.com";
 		assertEquals(requestedRedirect, resolver.resolveRedirect(requestedRedirect, client));
 	}
 
@@ -36,7 +36,7 @@ public void testRedirectBadWatchdox() throws Exception
 	{
 		Set<String> redirectUris = new HashSet<String>(Arrays.asList("http//watchdox.com"));
 		client.setRegisteredRedirectUri(redirectUris);
-		String requestedRedirect = "http://anywhere.google.com/something";
+		String requestedRedirect = "http://anywhere.google.com";
 		assertEquals(requestedRedirect, resolver.resolveRedirect(requestedRedirect, client));
 	}
 

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/endpoint/ExactMatchRedirectResolverTests.java
Patch:
@@ -20,6 +20,7 @@
 import java.util.Set;
 
 import org.junit.Test;
+import org.springframework.security.oauth2.common.exceptions.InvalidRequestException;
 import org.springframework.security.oauth2.common.exceptions.OAuth2Exception;
 import org.springframework.security.oauth2.common.exceptions.RedirectMismatchException;
 import org.springframework.security.oauth2.provider.client.BaseClientDetails;
@@ -45,10 +46,10 @@ public void testRedirectNotMatching() throws Exception {
 		assertEquals(redirectUris.iterator().next(), resolver.resolveRedirect(requestedRedirect, client));
 	}
 
-	@Test
+	@Test(expected = InvalidRequestException.class)
 	public void testRedirectWithNoRegisteredValue() throws Exception {
 		String requestedRedirect = "http://anywhere.com/myendpoint";
-		assertEquals(requestedRedirect, resolver.resolveRedirect(requestedRedirect, client));
+		resolver.resolveRedirect(requestedRedirect, client);
 	}
 
 	// As we have one or more registered redirects, the redirect SHOULD be present.

File: tests/annotation/approval/src/main/java/demo/Application.java
Patch:
@@ -66,6 +66,7 @@ public void configure(ClientDetailsServiceConfigurer clients) throws Exception {
 		            .scopes("read", "write", "trust")
 		            .resourceIds("oauth2-resource")
 		            .accessTokenValiditySeconds(60)
+		            .redirectUris("http://anywhere")
  		    .and()
 		        .withClient("my-client-with-registered-redirect")
 		            .authorizedGrantTypes("authorization_code")

File: tests/annotation/custom-grant/src/main/java/demo/Application.java
Patch:
@@ -73,6 +73,7 @@ public void configure(ClientDetailsServiceConfigurer clients) throws Exception {
 		            .scopes("read", "write", "trust")
 		            .resourceIds("oauth2-resource")
 		            .accessTokenValiditySeconds(600)
+		            .redirectUris("http://anywhere")
  		    .and()
 		        .withClient("my-client-with-registered-redirect")
 		            .authorizedGrantTypes("authorization_code")

File: tests/annotation/custom-grant/src/test/java/demo/ImplicitProviderTests.java
Patch:
@@ -48,7 +48,7 @@ public void run() {
 	private void getToken() {
 		Map<String, String> form = new LinkedHashMap<String, String>();
 		form.put("client_id", "my-trusted-client");
-		form.put("redirect_uri", "http://foo.com");
+		form.put("redirect_uri", "http://anywhere");
 		form.put("response_type", "token");
 		form.put("scope", "read");
 		ResponseEntity<Void> response = new TestRestTemplate("user", "password")

File: tests/annotation/form/src/main/java/demo/Application.java
Patch:
@@ -55,6 +55,7 @@ public void configure(ClientDetailsServiceConfigurer clients) throws Exception {
 		            .scopes("read", "write", "trust")
 		            .resourceIds("oauth2-resource")
 		            .accessTokenValiditySeconds(60)
+		            .redirectUris("http://anywhere")
  		    .and()
 		        .withClient("my-client-with-registered-redirect")
 		            .authorizedGrantTypes("authorization_code")

File: tests/annotation/jaxb/src/main/java/demo/Application.java
Patch:
@@ -94,6 +94,7 @@ public void configure(ClientDetailsServiceConfigurer clients) throws Exception {
 		            .scopes("read", "write", "trust")
 		            .resourceIds("oauth2-resource")
 		            .accessTokenValiditySeconds(60)
+		            .redirectUris("http://anywhere")
  		    .and()
 		        .withClient("my-client-with-registered-redirect")
 		            .authorizedGrantTypes("authorization_code")

File: tests/annotation/jaxb/src/test/java/demo/ImplicitProviderTests.java
Patch:
@@ -54,7 +54,7 @@ protected Collection<? extends HttpMessageConverter<?>> getAdditionalConverters(
 	private void getToken() {
 		Map<String, String> form = new LinkedHashMap<String, String>();
 		form.put("client_id", "my-trusted-client");
-		form.put("redirect_uri", "http://foo.com");
+		form.put("redirect_uri", "http://anywhere");
 		form.put("response_type", "token");
 		form.put("scope", "read");
 		ResponseEntity<Void> response = new TestRestTemplate("user", "password")

File: tests/annotation/jdbc/src/main/java/demo/Application.java
Patch:
@@ -110,7 +110,8 @@ public void configure(ClientDetailsServiceConfigurer clients) throws Exception {
 					.authorities("ROLE_CLIENT", "ROLE_TRUSTED_CLIENT")
 					.scopes("read", "write", "trust")
 					.resourceIds("oauth2-resource")
-					.accessTokenValiditySeconds(60).and()
+					.accessTokenValiditySeconds(60)
+					.redirectUris("http://anywhere").and()
 				.withClient("my-client-with-registered-redirect")
 					.authorizedGrantTypes("authorization_code")
 					.authorities("ROLE_CLIENT").scopes("read", "trust")

File: tests/annotation/jpa/src/main/java/demo/Application.java
Patch:
@@ -81,7 +81,7 @@ public void configure(ClientDetailsServiceConfigurer clients) throws Exception {
 			clients.inMemory().withClient("my-trusted-client")
 					.authorizedGrantTypes("password", "authorization_code", "refresh_token", "implicit")
 					.authorities("ROLE_CLIENT", "ROLE_TRUSTED_CLIENT").scopes("read", "write", "trust")
-					.resourceIds("oauth2-resource").accessTokenValiditySeconds(600).and()
+					.resourceIds("oauth2-resource").accessTokenValiditySeconds(600).redirectUris("http://anywhere").and()
 					.withClient("my-client-with-registered-redirect").authorizedGrantTypes("authorization_code")
 					.authorities("ROLE_CLIENT").scopes("read", "trust").resourceIds("oauth2-resource")
 					.redirectUris("http://anywhere?key=value").and().withClient("my-client-with-secret")

File: tests/annotation/jpa/src/test/java/demo/AuthorizationCodeProviderCookieTests.java
Patch:
@@ -29,7 +29,7 @@
 public class AuthorizationCodeProviderCookieTests extends AbstractEmptyAuthorizationCodeProviderTests {
 
 	@Test
-	@OAuth2ContextConfiguration(resource = MyTrustedClient.class, initialize = false)
+	@OAuth2ContextConfiguration(resource = MyClientWithRegisteredRedirect.class, initialize = false)
 	public void testPostToProtectedResource() throws Exception {
 		approveAccessTokenGrant("http://anywhere", true);
 		assertNotNull(context.getAccessToken());

File: tests/annotation/jpa/src/test/java/demo/ImplicitProviderTests.java
Patch:
@@ -54,7 +54,7 @@ public void run() {
 	private void getToken() {
 		Map<String, String> form = new LinkedHashMap<String, String>();
 		form.put("client_id", "my-trusted-client");
-		form.put("redirect_uri", "http://foo.com");
+		form.put("redirect_uri", "http://anywhere");
 		form.put("response_type", "token");
 		form.put("scope", "read");
 		ResponseEntity<Void> response = new TestRestTemplate("user", "password")

File: tests/annotation/jwt/src/main/java/demo/Application.java
Patch:
@@ -63,6 +63,7 @@ public void configure(ClientDetailsServiceConfigurer clients) throws Exception {
 		            .scopes("read", "write", "trust")
 		            .accessTokenValiditySeconds(60)
 		            .refreshTokenValiditySeconds(160)
+		            .redirectUris("http://anywhere")
  		    .and()
 		        .withClient("my-client-with-registered-redirect")
 		            .authorizedGrantTypes("authorization_code")

File: tests/annotation/mappings/src/main/java/demo/Application.java
Patch:
@@ -109,6 +109,7 @@ public void configure(ClientDetailsServiceConfigurer clients) throws Exception {
 		            .scopes("read", "write", "trust")
 		            .resourceIds("sparklr")
 		            .accessTokenValiditySeconds(60)
+		            .redirectUris("http://anywhere")
  		    .and()
 		        .withClient("my-client-with-registered-redirect")
 		            .authorizedGrantTypes("authorization_code")

File: tests/annotation/multi/src/main/java/demo/Application.java
Patch:
@@ -116,6 +116,7 @@ public void configure(ClientDetailsServiceConfigurer clients) throws Exception {
 		            .scopes("read", "write", "trust")
 		            .resourceIds("oauth2/admin")
 		            .accessTokenValiditySeconds(60)
+		            .redirectUris("http://anywhere")
  		    .and()
 		        .withClient("my-client-with-registered-redirect")
 		            .authorizedGrantTypes("authorization_code")

File: tests/annotation/vanilla/src/main/java/demo/Application.java
Patch:
@@ -66,6 +66,7 @@ public void configure(ClientDetailsServiceConfigurer clients) throws Exception {
 		            .scopes("read", "write", "trust")
 		            .resourceIds("oauth2-resource")
 		            .accessTokenValiditySeconds(600)
+		            .redirectUris("http://anywhere")
  		    .and()
 		        .withClient("my-client-with-registered-redirect")
 		            .authorizedGrantTypes("authorization_code")

File: tests/annotation/vanilla/src/test/java/demo/AuthorizationCodeProviderCookieTests.java
Patch:
@@ -29,7 +29,7 @@
 public class AuthorizationCodeProviderCookieTests extends AbstractEmptyAuthorizationCodeProviderTests {
 
 	@Test
-	@OAuth2ContextConfiguration(resource = MyTrustedClient.class, initialize = false)
+	@OAuth2ContextConfiguration(resource = MyClientWithRegisteredRedirect.class, initialize = false)
 	public void testPostToProtectedResource() throws Exception {
 		approveAccessTokenGrant("http://anywhere", true);
 		assertNotNull(context.getAccessToken());

File: tests/annotation/vanilla/src/test/java/demo/ImplicitProviderTests.java
Patch:
@@ -54,7 +54,7 @@ public void run() {
 	private void getToken() {
 		Map<String, String> form = new LinkedHashMap<String, String>();
 		form.put("client_id", "my-trusted-client");
-		form.put("redirect_uri", "http://foo.com");
+		form.put("redirect_uri", "http://anywhere");
 		form.put("response_type", "token");
 		form.put("scope", "read");
 		ResponseEntity<Void> response = new TestRestTemplate("user", "password")

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/DefaultTokenServices.java
Patch:
@@ -371,7 +371,7 @@ public void setRefreshTokenValiditySeconds(int refreshTokenValiditySeconds) {
 
 	/**
 	 * The default validity (in seconds) of the access token. Zero or negative for non-expiring tokens. If a client
-	 * details service is set the validity period will be read from he client, defaulting to this value if not defined
+	 * details service is set the validity period will be read from the client, defaulting to this value if not defined
 	 * by the client.
 	 * 
 	 * @param accessTokenValiditySeconds The validity (in seconds) of the access token.

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/http/OAuth2ErrorHandler.java
Patch:
@@ -118,7 +118,7 @@ public void close() {
 				}
 
 				public int getRawStatusCode() throws IOException {
-					return response.getRawStatusCode();
+					return this.getStatusCode().value();
 				}
 			};
 

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/TokenEndpoint.java
Patch:
@@ -191,6 +191,7 @@ private ResponseEntity<OAuth2AccessToken> getResponse(OAuth2AccessToken accessTo
 		HttpHeaders headers = new HttpHeaders();
 		headers.set("Cache-Control", "no-store");
 		headers.set("Pragma", "no-cache");
+		headers.set("Content-Type", "application/json;charset=UTF-8");
 		return new ResponseEntity<OAuth2AccessToken>(accessToken, headers, HttpStatus.OK);
 	}
 

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/web/configuration/AuthorizationServerEndpointsConfiguration.java
Patch:
@@ -33,6 +33,7 @@
 import org.springframework.context.annotation.Configuration;
 import org.springframework.context.annotation.Import;
 import org.springframework.http.HttpMethod;
+import org.springframework.security.oauth2.common.exceptions.OAuth2Exception;
 import org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerEndpointsConfiguration.TokenKeyEndpointRegistrar;
 import org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer;
 import org.springframework.security.oauth2.provider.ClientDetailsService;
@@ -198,7 +199,7 @@ private AuthorizationCodeServices authorizationCodeServices() throws Exception {
 		return getEndpointsConfigurer().getAuthorizationCodeServices();
 	}
 
-	private WebResponseExceptionTranslator exceptionTranslator() {
+	private WebResponseExceptionTranslator<OAuth2Exception> exceptionTranslator() {
 		return getEndpointsConfigurer().getExceptionTranslator();
 	}
 

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/CheckTokenEndpoint.java
Patch:
@@ -46,7 +46,7 @@ public class CheckTokenEndpoint {
 
 	protected final Log logger = LogFactory.getLog(getClass());
 
-	private WebResponseExceptionTranslator exceptionTranslator = new DefaultWebResponseExceptionTranslator();
+	private WebResponseExceptionTranslator<OAuth2Exception> exceptionTranslator = new DefaultWebResponseExceptionTranslator();
 
 	public CheckTokenEndpoint(ResourceServerTokenServices resourceServerTokenServices) {
 		this.resourceServerTokenServices = resourceServerTokenServices;
@@ -55,7 +55,7 @@ public CheckTokenEndpoint(ResourceServerTokenServices resourceServerTokenService
 	/**
 	 * @param exceptionTranslator the exception translator to set
 	 */
-	public void setExceptionTranslator(WebResponseExceptionTranslator exceptionTranslator) {
+	public void setExceptionTranslator(WebResponseExceptionTranslator<OAuth2Exception> exceptionTranslator) {
 		this.exceptionTranslator = exceptionTranslator;
 	}
 

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/error/OAuth2AuthenticationEntryPoint.java
Patch:
@@ -22,7 +22,6 @@
 import org.springframework.http.ResponseEntity;
 import org.springframework.security.core.AuthenticationException;
 import org.springframework.security.oauth2.common.OAuth2AccessToken;
-import org.springframework.security.oauth2.common.exceptions.OAuth2Exception;
 import org.springframework.security.web.AuthenticationEntryPoint;
 import org.springframework.util.StringUtils;
 
@@ -55,7 +54,7 @@ public void commence(HttpServletRequest request, HttpServletResponse response, A
 	}
 
 	@Override
-	protected ResponseEntity<OAuth2Exception> enhanceResponse(ResponseEntity<OAuth2Exception> response, Exception exception) {
+	protected ResponseEntity<?> enhanceResponse(ResponseEntity<?> response, Exception exception) {
 		HttpHeaders headers = response.getHeaders();
 		String existing = null;
 		if (headers.containsKey("WWW-Authenticate")) {
@@ -70,7 +69,7 @@ protected ResponseEntity<OAuth2Exception> enhanceResponse(ResponseEntity<OAuth2E
 		HttpHeaders update = new HttpHeaders();
 		update.putAll(response.getHeaders());
 		update.set("WWW-Authenticate", builder.toString());
-		return new ResponseEntity<OAuth2Exception>(response.getBody(), update, response.getStatusCode());
+		return new ResponseEntity<Object>(response.getBody(), update, response.getStatusCode());
 	}
 
 	private String extractTypePrefix(String header) {

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/error/DefaultWebResponseExceptionTranslatorTests.java
Patch:
@@ -26,7 +26,7 @@
  * @author Joe Grandja
  */
 public class DefaultWebResponseExceptionTranslatorTests {
-	private WebResponseExceptionTranslator translator = new DefaultWebResponseExceptionTranslator();
+	private WebResponseExceptionTranslator<OAuth2Exception> translator = new DefaultWebResponseExceptionTranslator();
 
 	// gh-1200
 	@Test

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/token/OAuth2AccessTokenSupport.java
Patch:
@@ -218,7 +218,6 @@ public void doWithRequest(ClientHttpRequest request) throws IOException {
 			request.getHeaders().putAll(this.headers);
 			request.getHeaders().setAccept(
 					Arrays.asList(MediaType.APPLICATION_JSON, MediaType.APPLICATION_FORM_URLENCODED));
-			logger.debug("Encoding and sending form: " + form);
 			FORM_MESSAGE_CONVERTER.write(this.form, MediaType.APPLICATION_FORM_URLENCODED, request);
 		}
 	}

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/error/DefaultWebResponseExceptionTranslator.java
Patch:
@@ -66,7 +66,7 @@ public ResponseEntity<OAuth2Exception> translate(Exception e) throws Exception {
 			return handleOAuth2Exception(new MethodNotAllowed(ase.getMessage(), ase));
 		}
 
-		return handleOAuth2Exception(new ServerErrorException(e.getMessage(), e));
+		return handleOAuth2Exception(new ServerErrorException(HttpStatus.INTERNAL_SERVER_ERROR.getReasonPhrase(), e));
 
 	}
 

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/jwk/JwkVerifyingJwtAccessTokenConverter.java
Patch:
@@ -111,7 +111,7 @@ protected Map<String, Object> decode(String token) {
 		if (algorithmHeader == null) {
 			throw new InvalidTokenException("Invalid JWT/JWS: " + ALGORITHM + " is a required JOSE Header");
 		}
-		if (!algorithmHeader.equals(jwkDefinition.getAlgorithm().headerParamValue())) {
+		if (jwkDefinition.getAlgorithm() != null && !algorithmHeader.equals(jwkDefinition.getAlgorithm().headerParamValue())) {
 			throw new InvalidTokenException("Invalid JOSE Header " + ALGORITHM + " (" + algorithmHeader + ")" +
 					" does not match algorithm associated to JWK with " + KEY_ID + " (" + keyIdHeader + ")");
 		}

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/jwk/JwkVerifyingJwtAccessTokenConverter.java
Patch:
@@ -126,6 +126,7 @@ protected Map<String, Object> decode(String token) {
 			Integer expiryInt = (Integer) claims.get(EXP);
 			claims.put(EXP, new Long(expiryInt));
 		}
+		this.getJwtClaimsSetVerifier().verify(claims);
 
 		return claims;
 	}

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/jwk/JwkSetConverter.java
Patch:
@@ -155,11 +155,11 @@ private JwkDefinition createRsaJwkDefinition(Map<String, String> attributes) {
 		// alg
 		JwkDefinition.CryptoAlgorithm algorithm =
 				JwkDefinition.CryptoAlgorithm.fromHeaderParamValue(attributes.get(ALGORITHM));
-		if (!JwkDefinition.CryptoAlgorithm.RS256.equals(algorithm) &&
+		if (algorithm != null &&
+				!JwkDefinition.CryptoAlgorithm.RS256.equals(algorithm) &&
 				!JwkDefinition.CryptoAlgorithm.RS384.equals(algorithm) &&
 				!JwkDefinition.CryptoAlgorithm.RS512.equals(algorithm)) {
-			throw new JwkException((algorithm != null ? algorithm.standardName() : "unknown") +
-					" (" + ALGORITHM + ") is currently not supported.");
+			throw new JwkException(algorithm.standardName() + " (" + ALGORITHM + ") is currently not supported.");
 		}
 
 		// n

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/store/jwk/JwkDefinitionSourceITest.java
Patch:
@@ -70,8 +70,8 @@ public void getDefinitionLoadIfNecessaryWhenMultipleUrlsThenBothUrlsAreLoaded()
 
 		String keyId1 = "key-id-1";
 		String keyId2 = "key-id-2";
-		JwkDefinition jwkDef1 = this.source.getDefinitionLoadIfNecessary(keyId1);
-		JwkDefinition jwkDef2 = this.source.getDefinitionLoadIfNecessary(keyId2);
+		JwkDefinition jwkDef1 = this.source.getDefinitionLoadIfNecessary(keyId1).getJwkDefinition();
+		JwkDefinition jwkDef2 = this.source.getDefinitionLoadIfNecessary(keyId2).getJwkDefinition();
 
 		assertEquals(jwkDef1.getKeyId(), keyId1);
 		assertEquals(jwkDef1.getAlgorithm(), JwkDefinition.CryptoAlgorithm.RS256);

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/store/jwk/JwkDefinitionSourceTest.java
Patch:
@@ -66,7 +66,7 @@ public void getDefinitionLoadIfNecessaryWhenKeyIdNotFoundThenLoadJwkDefinitions(
 	public void getVerifierWhenModulusMostSignificantBitIs1ThenVerifierStillVerifyContentSignature() throws Exception {
 		String jwkSetUrl = JwkDefinitionSourceTest.class.getResource("jwk-set.json").toString();
 		JwkDefinitionSource jwkDefinitionSource = new JwkDefinitionSource(jwkSetUrl);
-		SignatureVerifier verifier = jwkDefinitionSource.getVerifier("_Ci3-VfV_N0YAG22NQOgOUpFBDDcDe_rJxpu5JK702o");
+		SignatureVerifier verifier = jwkDefinitionSource.getDefinitionLoadIfNecessary("_Ci3-VfV_N0YAG22NQOgOUpFBDDcDe_rJxpu5JK702o").getSignatureVerifier();
 		String token = this.readToken("token.jwt");
 		int secondPeriodIndex = token.indexOf('.', token.indexOf('.') + 1);
 		String contentString = token.substring(0, secondPeriodIndex);

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/web/configuration/EnableOAuth2Client.java
Patch:
@@ -46,7 +46,7 @@
  * 
  * Client apps that use client credentials grants do not need the AccessTokenRequest or the scoped RestOperations (the
  * state is global for the app), but they should still use the filter to trigger the OAuth2RestOperations to obtain a
- * token when necessary. Apps that us password grants need to set the authentication properties in the
+ * token when necessary. Apps that use password grants need to set the authentication properties in the
  * OAuth2ProtectedResourceDetails before using the RestOperations, and this means the resource details themselves also
  * have to be per session (assuming there are multiple users in the system).
  * 

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/client/BaseClientDetailsTests.java
Patch:
@@ -21,6 +21,7 @@
 import static org.junit.Assert.assertTrue;
 
 import java.util.Collections;
+import java.util.TreeSet;
 
 import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Test;
@@ -52,7 +53,7 @@ public void testBaseClientDetailsDefaultConstructor() {
 	public void testBaseClientDetailsConvenienceConstructor() {
 		BaseClientDetails details = new BaseClientDetails("foo", "", "foo,bar", "authorization_code", "ROLE_USER");
 		assertEquals("[]", details.getResourceIds().toString());
-		assertEquals("[bar, foo]", details.getScope().toString());
+		assertEquals("[bar, foo]", new TreeSet<String>(details.getScope()).toString());
 		assertEquals("[authorization_code]", details.getAuthorizedGrantTypes().toString());
 		assertEquals("[ROLE_USER]", details.getAuthorities().toString());
 	}

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/error/OAuth2AccessDeniedHandlerTests.java
Patch:
@@ -13,6 +13,7 @@
 package org.springframework.security.oauth2.provider.error;
 
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
 
 import javax.servlet.http.HttpServletResponse;
 
@@ -39,7 +40,7 @@ public void testHandleWithJson() throws Exception {
 		request.addHeader("Accept", MediaType.APPLICATION_JSON_VALUE);
 		handler.handle(request, response, new AccessDeniedException("Bad"));
 		assertEquals(HttpServletResponse.SC_FORBIDDEN, response.getStatus());
-		assertEquals(MediaType.APPLICATION_JSON_VALUE, response.getContentType());
+		assertTrue(response.getContentType().contains(MediaType.APPLICATION_JSON_VALUE));
 		assertEquals(null, response.getErrorMessage());
 	}
 

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/error/OAuth2AuthenticationEntryPointTests.java
Patch:
@@ -46,7 +46,7 @@ public void testCommenceWithJson() throws Exception {
 		entryPoint.commence(request, response, new BadCredentialsException("Bad"));
 		assertEquals(HttpServletResponse.SC_UNAUTHORIZED, response.getStatus());
 		assertEquals("{\"error\":\"unauthorized\",\"error_description\":\"Bad\"}", response.getContentAsString());
-		assertEquals(MediaType.APPLICATION_JSON_VALUE, response.getContentType());
+		assertTrue(response.getContentType().contains(MediaType.APPLICATION_JSON_VALUE));
 		assertEquals(null, response.getErrorMessage());
 	}
 
@@ -57,7 +57,7 @@ public void testCommenceWithOAuth2Exception() throws Exception {
 				"Bad client")));
 		assertEquals(HttpServletResponse.SC_UNAUTHORIZED, response.getStatus());
 		assertEquals("{\"error\":\"invalid_client\",\"error_description\":\"Bad client\"}", response.getContentAsString());
-		assertEquals(MediaType.APPLICATION_JSON_VALUE, response.getContentType());
+		assertTrue(response.getContentType().contains(MediaType.APPLICATION_JSON_VALUE));
 		assertEquals(null, response.getErrorMessage());
 	}
 

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/jwk/JwkDefinitionSource.java
Patch:
@@ -145,8 +145,8 @@ static Map<String, JwkDefinitionHolder> loadJwkDefinitions(URL jwkSetUrl) {
 	private static RsaVerifier createRsaVerifier(RsaJwkDefinition rsaDefinition) {
 		RsaVerifier result;
 		try {
-			BigInteger modulus = new BigInteger(Codecs.b64UrlDecode(rsaDefinition.getModulus()));
-			BigInteger exponent = new BigInteger(Codecs.b64UrlDecode(rsaDefinition.getExponent()));
+			BigInteger modulus = new BigInteger(1, Codecs.b64UrlDecode(rsaDefinition.getModulus()));
+			BigInteger exponent = new BigInteger(1, Codecs.b64UrlDecode(rsaDefinition.getExponent()));
 
 			RSAPublicKey rsaPublicKey = (RSAPublicKey) KeyFactory.getInstance("RSA")
 					.generatePublic(new RSAPublicKeySpec(modulus, exponent));

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/jwk/JwkAttributes.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2016 the original author or authors.
+ * Copyright 2012-2017 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/jwk/JwkException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2016 the original author or authors.
+ * Copyright 2012-2017 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/jwk/JwkVerifyingJwtAccessTokenConverter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2016 the original author or authors.
+ * Copyright 2012-2017 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -100,7 +100,7 @@ protected Map<String, Object> decode(String token) {
 		if (keyIdHeader == null) {
 			throw new InvalidTokenException("Invalid JWT/JWS: " + KEY_ID + " is a required JOSE Header");
 		}
-		JwkDefinition jwkDefinition = this.jwkDefinitionSource.getDefinitionRefreshIfNecessary(keyIdHeader);
+		JwkDefinition jwkDefinition = this.jwkDefinitionSource.getDefinitionLoadIfNecessary(keyIdHeader);
 		if (jwkDefinition == null) {
 			throw new InvalidTokenException("Invalid JOSE Header " + KEY_ID + " (" + keyIdHeader + ")");
 		}

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/jwk/JwtHeaderConverter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2016 the original author or authors.
+ * Copyright 2012-2017 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/jwk/RsaJwkDefinition.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2016 the original author or authors.
+ * Copyright 2012-2017 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -23,7 +23,7 @@
  *
  * @author Joe Grandja
  */
-final class RSAJwkDefinition extends JwkDefinition {
+final class RsaJwkDefinition extends JwkDefinition {
 	private final String modulus;
 	private final String exponent;
 
@@ -36,7 +36,7 @@ final class RSAJwkDefinition extends JwkDefinition {
 	 * @param modulus the modulus value for the Public Key
 	 * @param exponent the exponent value for the Public Key
 	 */
-	RSAJwkDefinition(String keyId,
+	RsaJwkDefinition(String keyId,
 					 PublicKeyUse publicKeyUse,
 					 CryptoAlgorithm algorithm,
 					 String modulus,

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/store/jwk/JwkSetConverterTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2016 the original author or authors.
+ * Copyright 2012-2017 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -31,7 +31,7 @@
 import static org.springframework.security.oauth2.provider.token.store.jwk.JwkAttributes.KEYS;
 
 /**
- * @author jgrandja
+ * @author Joe Grandja
  */
 public class JwkSetConverterTest {
 	private final JwkSetConverter converter = new JwkSetConverter();

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/store/jwk/JwtHeaderConverterTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2016 the original author or authors.
+ * Copyright 2012-2017 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -27,7 +27,7 @@
 import static org.springframework.security.oauth2.provider.token.store.jwk.JwtTestUtil.createJwt;
 
 /**
- * @author jgrandja
+ * @author Joe Grandja
  */
 public class JwtHeaderConverterTest {
 	private final JwtHeaderConverter converter = new JwtHeaderConverter();

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/store/jwk/JwtTestUtil.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2016 the original author or authors.
+ * Copyright 2012-2017 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/web/configuration/ResourceServerConfigurerAdapter.java
Patch:
@@ -27,6 +27,7 @@ public void configure(ResourceServerSecurityConfigurer resources) throws Excepti
 
 	@Override
 	public void configure(HttpSecurity http) throws Exception {
+		http.authorizeRequests().anyRequest().authenticated();
 	}
 
 }

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/BaseRequest.java
Patch:
@@ -151,7 +151,7 @@ protected void setScope(Collection<String> scope) {
 	protected void setRequestParameters(Map<String, String> requestParameters) {
 		if (requestParameters != null) {
 			this.requestParameters = Collections
-					.unmodifiableMap(requestParameters);
+					.unmodifiableMap(new HashMap<String, String>(requestParameters));
 		}
 	}
 

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/DefaultAccessTokenConverter.java
Patch:
@@ -12,6 +12,7 @@
  */
 package org.springframework.security.oauth2.provider.token;
 
+import java.util.Arrays;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.Date;
@@ -151,7 +152,7 @@ private Set<String> extractScope(Map<String, ?> map) {
 		if (map.containsKey(SCOPE)) {
 			Object scopeObj = map.get(SCOPE);
 			if (String.class.isInstance(scopeObj)) {
-				scope = Collections.singleton(String.class.cast(scopeObj));
+				scope = new LinkedHashSet<String>(Arrays.asList(String.class.cast(scopeObj).split(" ")));
 			} else if (Collection.class.isAssignableFrom(scopeObj.getClass())) {
 				@SuppressWarnings("unchecked")
 				Collection<String> scopeColl = (Collection<String>) scopeObj;

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/store/JwtTokenStoreTests.java
Patch:
@@ -169,7 +169,7 @@ public void removeAccessToken() throws Exception {
 				ApprovalStatus.APPROVED)));
 		assertEquals(1, approvalStore.getApprovals("test", "id").size());
 		tokenStore.removeAccessToken(expectedOAuth2AccessToken);
-		assertEquals(0, approvalStore.getApprovals("test", "id").size());
+		assertEquals(1, approvalStore.getApprovals("test", "id").size());
 	}
 
 	@Test
@@ -190,7 +190,7 @@ public void removeAccessTokenFromRefreshToken() throws Exception {
 		assertEquals(1, approvalStore.getApprovals("test", "id").size());
 		tokenStore.removeAccessTokenUsingRefreshToken(new DefaultOAuth2RefreshToken(expectedOAuth2AccessToken
 				.getValue()));
-		assertEquals(0, approvalStore.getApprovals("test", "id").size());
+		assertEquals(1, approvalStore.getApprovals("test", "id").size());
 	}
 
 	@Test

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/approval/ApprovalStoreUserApprovalHandler.java
Patch:
@@ -232,12 +232,12 @@ public Map<String, Object> getUserApprovalRequest(AuthorizationRequest authoriza
 		model.putAll(authorizationRequest.getRequestParameters());
 		Map<String, String> scopes = new LinkedHashMap<String, String>();
 		for (String scope : authorizationRequest.getScope()) {
-			scopes.put(OAuth2Utils.SCOPE_PREFIX + scope, "false");
+			scopes.put(scopePrefix + scope, "false");
 		}
 		for (Approval approval : approvalStore.getApprovals(userAuthentication.getName(),
 				authorizationRequest.getClientId())) {
 			if (authorizationRequest.getScope().contains(approval.getScope())) {
-				scopes.put(OAuth2Utils.SCOPE_PREFIX + approval.getScope(),
+				scopes.put(scopePrefix + approval.getScope(),
 						approval.getStatus() == ApprovalStatus.APPROVED ? "true" : "false");
 			}
 		}

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/web/configuration/AuthorizationServerEndpointsConfiguration.java
Patch:
@@ -49,6 +49,7 @@
 import org.springframework.security.oauth2.provider.token.AuthorizationServerTokenServices;
 import org.springframework.security.oauth2.provider.token.ConsumerTokenServices;
 import org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter;
+import org.springframework.stereotype.Component;
 
 /**
  * @author Dave Syer
@@ -192,7 +193,7 @@ private String extractPath(FrameworkEndpointHandlerMapping mapping, String page)
 		return "forward:" + path;
 	}
 
-	@Configuration
+	@Component
 	protected static class TokenKeyEndpointRegistrar implements BeanDefinitionRegistryPostProcessor {
 
 		private BeanDefinitionRegistry registry;

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/web/configuration/ResourceServerConfiguration.java
Patch:
@@ -94,7 +94,7 @@ public NotOAuthRequestMatcher(FrameworkEndpointHandlerMapping mapping) {
 		public boolean matches(HttpServletRequest request) {
 			String requestPath = getRequestPath(request);
 			for (String path : mapping.getPaths()) {
-				if (requestPath.startsWith(path)) {
+				if (requestPath.startsWith(mapping.getPath(path))) {
 					return false;
 				}
 			}

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/client/token/AccessTokenProviderChainTests.java
Patch:
@@ -35,7 +35,6 @@
 import org.springframework.security.core.context.SecurityContextHolder;
 import org.springframework.security.oauth2.client.resource.BaseOAuth2ProtectedResourceDetails;
 import org.springframework.security.oauth2.client.resource.OAuth2ProtectedResourceDetails;
-import org.springframework.security.oauth2.client.resource.UserApprovalRequiredException;
 import org.springframework.security.oauth2.client.resource.UserRedirectRequiredException;
 import org.springframework.security.oauth2.client.token.grant.client.ClientCredentialsResourceDetails;
 import org.springframework.security.oauth2.client.token.grant.code.AuthorizationCodeAccessTokenProvider;

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/DefaultAccessTokenConverter.java
Patch:
@@ -16,7 +16,6 @@
 import java.util.Collections;
 import java.util.Date;
 import java.util.HashMap;
-import java.util.HashSet;
 import java.util.LinkedHashSet;
 import java.util.Map;
 import java.util.Set;

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/DefaultAccessTokenConverter.java
Patch:
@@ -153,8 +153,9 @@ private Set<String> extractScope(Map<String, ?> map) {
 			Object scopeObj = map.get(SCOPE);
 			if (String.class.isInstance(scopeObj)) {
 				scope = Collections.singleton(String.class.cast(scopeObj));
-			} else if (Collection.class.<String>isAssignableFrom(scopeObj.getClass())) {
-				Collection scopeColl = Collection.class.<String>cast(scopeObj);
+			} else if (Collection.class.isAssignableFrom(scopeObj.getClass())) {
+				@SuppressWarnings("unchecked")
+				Collection<String> scopeColl = (Collection<String>) scopeObj;
 				scope = new LinkedHashSet<String>(scopeColl);	// Preserve ordering
 			}
 		}

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/exceptions/OAuth2Exception.java
Patch:
@@ -99,7 +99,7 @@ public static OAuth2Exception create(String errorCode, String errorMessage) {
 			return new InvalidClientException(errorMessage);
 		}
 		else if (UNAUTHORIZED_CLIENT.equals(errorCode)) {
-			return new UnauthorizedUserException(errorMessage);
+			return new UnauthorizedClientException(errorMessage);
 		}
 		else if (INVALID_GRANT.equals(errorCode)) {
 			return new InvalidGrantException(errorMessage);

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/exceptions/OAuth2ExceptionJackson1Deserializer.java
Patch:
@@ -75,7 +75,7 @@ else if (t == JsonToken.START_OBJECT) {
 			ex = new InvalidClientException(errorMessage);
 		}
 		else if ("unauthorized_client".equals(errorCode)) {
-			ex = new UnauthorizedUserException(errorMessage);
+			ex = new UnauthorizedClientException(errorMessage);
 		}
 		else if ("invalid_grant".equals(errorCode)) {
 			if (errorMessage.toLowerCase().contains("redirect") && errorMessage.toLowerCase().contains("match")) {

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/exceptions/OAuth2ExceptionJackson2Deserializer.java
Patch:
@@ -80,7 +80,7 @@ else if (t == JsonToken.START_OBJECT) {
 			ex = new InvalidClientException(errorMessage);
 		}
 		else if ("unauthorized_client".equals(errorCode)) {
-			ex = new UnauthorizedUserException(errorMessage);
+			ex = new UnauthorizedClientException(errorMessage);
 		}
 		else if ("invalid_grant".equals(errorCode)) {
 			if (errorMessage.toLowerCase().contains("redirect") && errorMessage.toLowerCase().contains("match")) {

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/redis/RedisTokenStore.java
Patch:
@@ -305,12 +305,14 @@ public void removeRefreshToken(OAuth2RefreshToken refreshToken) {
 
 	public void removeRefreshToken(String tokenValue) {
 		byte[] refreshKey = serializeKey(REFRESH + tokenValue);
+		byte[] refreshAuthKey = serializeKey(REFRESH_AUTH + tokenValue);
 		byte[] refresh2AccessKey = serializeKey(REFRESH_TO_ACCESS + tokenValue);
 		byte[] access2RefreshKey = serializeKey(ACCESS_TO_REFRESH + tokenValue);
 		RedisConnection conn = getConnection();
 		try {
 			conn.openPipeline();
 			conn.del(refreshKey);
+			conn.del(refreshAuthKey);
 			conn.del(refresh2AccessKey);
 			conn.del(access2RefreshKey);
 			conn.closePipeline();

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/web/configurers/AuthorizationServerSecurityConfigurer.java
Patch:
@@ -129,8 +129,10 @@ public String getCheckTokenAccess() {
 	public void init(HttpSecurity http) throws Exception {
 		registerDefaultAuthenticationEntryPoint(http);
 		if (passwordEncoder != null) {
+			ClientDetailsUserDetailsService clientDetailsUserDetailsService = new ClientDetailsUserDetailsService(clientDetailsService());
+			clientDetailsUserDetailsService.setPasswordEncoder(passwordEncoder());
 			http.getSharedObject(AuthenticationManagerBuilder.class)
-					.userDetailsService(new ClientDetailsUserDetailsService(clientDetailsService()))
+					.userDetailsService(clientDetailsUserDetailsService)
 					.passwordEncoder(passwordEncoder());
 		}
 		else {

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/exceptions/OAuth2ExceptionJackson2Deserializer.java
Patch:
@@ -70,8 +70,7 @@ else if (t == JsonToken.START_OBJECT) {
 		}
 
 		Object errorCode = errorParams.get("error");
-		String errorMessage = errorParams.containsKey("error_description") ? errorParams.get("error_description")
-				.toString() : null;
+		String errorMessage = errorParams.get("error_description") != null ? errorParams.get("error_description").toString() : null;
 		if (errorMessage == null) {
 			errorMessage = errorCode == null ? "OAuth Error" : errorCode.toString();
 		}

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/DefaultAccessTokenConverter.java
Patch:
@@ -155,7 +155,7 @@ private Set<String> extractScope(Map<String, ?> map) {
 				scope = Collections.singleton(String.class.cast(scopeObj));
 			} else if (Collection.class.<String>isAssignableFrom(scopeObj.getClass())) {
 				Collection scopeColl = Collection.class.<String>cast(scopeObj);
-				scope = new HashSet<String>(scopeColl);
+				scope = new LinkedHashSet<String>(scopeColl);	// Preserve ordering
 			}
 		}
 		return scope;

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/common/BaseOAuth2AccessTokenJacksonTest.java
Patch:
@@ -45,6 +45,8 @@ abstract class BaseOAuth2AccessTokenJacksonTest {
 
 	protected static final String ACCESS_TOKEN_MULTISCOPE = "{\"access_token\":\"token-value\",\"token_type\":\"bearer\",\"refresh_token\":\"refresh-value\",\"expires_in\":10,\"scope\":\"read write\"}";
 
+	protected static final String ACCESS_TOKEN_ARRAYSCOPE = "{\"access_token\":\"token-value\",\"token_type\":\"bearer\",\"refresh_token\":\"refresh-value\",\"expires_in\":10,\"scope\":[\"read\",\"write\"]}";
+
 	protected static final String ACCESS_TOKEN_NOSCOPE = "{\"access_token\":\"token-value\",\"token_type\":\"bearer\",\"refresh_token\":\"refresh-value\",\"expires_in\":10}";
 
 	protected static final String ACCESS_TOKEN_NOREFRESH = "{\"access_token\":\"token-value\",\"token_type\":\"bearer\",\"expires_in\":10}";

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/DefaultTokenServices.java
Patch:
@@ -176,7 +176,7 @@ public OAuth2AccessToken refreshAccessToken(String refreshTokenValue, TokenReque
 		OAuth2AccessToken accessToken = createAccessToken(authentication, refreshToken);
 		tokenStore.storeAccessToken(accessToken, authentication);
 		if (!reuseRefreshToken) {
-			tokenStore.storeRefreshToken(refreshToken, authentication);
+			tokenStore.storeRefreshToken(accessToken.getRefreshToken(), authentication);
 		}
 		return accessToken;
 	}

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/OAuth2Request.java
Patch:
@@ -78,7 +78,6 @@ public OAuth2Request(Map<String, String> requestParameters, String clientId,
 			this.authorities = new HashSet<GrantedAuthority>(authorities);
 		}
 		this.approved = approved;
-		this.resourceIds = resourceIds;
 		if (responseTypes != null) {
 			this.responseTypes = new HashSet<String>(responseTypes);
 		}

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/approval/ApprovalStoreUserApprovalHandler.java
Patch:
@@ -140,8 +140,8 @@ public AuthorizationRequest checkForPreApproval(AuthorizationRequest authorizati
 		Date today = new Date();
 		for (Approval approval : userApprovals) {
 			if (approval.getExpiresAt().after(today)) {
-				validUserApprovedScopes.add(approval.getScope());
 				if (approval.getStatus() == ApprovalStatus.APPROVED) {
+					validUserApprovedScopes.add(approval.getScope());
 					approvedScopes.add(approval.getScope());
 				}
 			}

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/web/configurers/AuthorizationServerEndpointsConfigurer.java
Patch:
@@ -156,7 +156,7 @@ public TokenEnhancer getTokenEnhancer() {
 	}
 
 	public AccessTokenConverter getAccessTokenConverter() {
-		return accessTokenConverter;
+		return accessTokenConverter();
 	}
 
 	public ApprovalStore getApprovalStore() {

File: tests/annotation/jdbc/src/test/java/demo/ApplicationTests.java
Patch:
@@ -4,7 +4,6 @@
 
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.springframework.aop.support.AopUtils;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.IntegrationTest;
 import org.springframework.boot.test.SpringApplicationConfiguration;
@@ -30,7 +29,7 @@ public class ApplicationTests {
 	@Test
 	public void contextLoads() {
 		assertTrue("Wrong token store type: " + tokenStore, tokenStore instanceof JdbcTokenStore);
-		assertTrue("Wrong client details type: " + clientDetailsService, JdbcClientDetailsService.class.isAssignableFrom(AopUtils.getTargetClass(clientDetailsService)));
+		assertTrue("Wrong client details type: " + clientDetailsService, clientDetailsService.toString().contains(JdbcClientDetailsService.class.getName()));
 	}
 
 }

File: tests/annotation/vanilla/src/main/java/demo/Application.java
Patch:
@@ -2,7 +2,7 @@
 
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.SpringApplication;
-import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
+import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.http.HttpStatus;
 import org.springframework.security.authentication.AuthenticationManager;
@@ -18,8 +18,7 @@
 import org.springframework.web.bind.annotation.ResponseStatus;
 import org.springframework.web.bind.annotation.RestController;
 
-@Configuration
-@EnableAutoConfiguration
+@SpringBootApplication
 @EnableResourceServer
 @RestController
 public class Application {

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/FrameworkEndpointHandlerMapping.java
Patch:
@@ -118,7 +118,7 @@ public void setApprovalParameter(String approvalParameter) {
 
 	public FrameworkEndpointHandlerMapping() {
 		// Make sure user-supplied mappings take precedence by default (except the resource mapping)
-		setOrder(Ordered.LOWEST_PRECEDENCE - 1);
+		setOrder(Ordered.LOWEST_PRECEDENCE - 2);
 	}
 
 	/**

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/DefaultRedirectResolver.java
Patch:
@@ -101,7 +101,7 @@ private boolean containsRedirectGrantType(Set<String> grantTypes) {
 	/**
 	 * Whether the requested redirect URI "matches" the specified redirect URI. For a URL, this implementation tests if
 	 * the user requested redirect starts with the registered redirect, so it would have the same host and root path if
-	 * it is an HTTP URL.
+	 * it is an HTTP URL. The port is not matched.
 	 * <p>
 	 * For other (non-URL) cases, such as for some implicit clients, the redirect_uri must be an exact match.
 	 * 

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/JwtAccessTokenConverter.java
Patch:
@@ -217,6 +217,8 @@ public OAuth2AccessToken enhance(OAuth2AccessToken accessToken,
 			DefaultOAuth2AccessToken encodedRefreshToken = new DefaultOAuth2AccessToken(
 					accessToken);
 			encodedRefreshToken.setValue(refreshToken.getValue());
+			// Refresh tokens do not expire unless explicitly of the right type
+			encodedRefreshToken.setExpiration(null);
 			try {
 				Map<String, Object> claims = objectMapper.parseMap(JwtHelper.decode(
 						refreshToken.getValue()).getClaims());

File: tests/annotation/jwt/src/main/java/demo/Application.java
Patch:
@@ -65,6 +65,7 @@ public void configure(ClientDetailsServiceConfigurer clients) throws Exception {
 		            .authorities("ROLE_CLIENT", "ROLE_TRUSTED_CLIENT")
 		            .scopes("read", "write", "trust")
 		            .accessTokenValiditySeconds(60)
+		            .refreshTokenValiditySeconds(160)
  		    .and()
 		        .withClient("my-client-with-registered-redirect")
 		            .authorizedGrantTypes("authorization_code")

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/FrameworkEndpointHandlerMapping.java
Patch:
@@ -22,7 +22,6 @@
 import org.springframework.core.Ordered;
 import org.springframework.core.annotation.AnnotationUtils;
 import org.springframework.security.oauth2.common.util.OAuth2Utils;
-import org.springframework.security.oauth2.provider.AuthorizationRequest;
 import org.springframework.util.StringUtils;
 import org.springframework.web.servlet.mvc.condition.NameValueExpression;
 import org.springframework.web.servlet.mvc.condition.ParamsRequestCondition;

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/config/xml/AuthorizationServerBeanDefinitionParserTests.java
Patch:
@@ -44,6 +44,7 @@ public static List<Object[]> parameters() {
 		return Arrays.asList(new Object[] { "authorization-server-vanilla" },
 				new Object[] { "authorization-server-extras" },
 				new Object[] { "authorization-server-types" },
+				new Object[] { "authorization-server-check-token" },
 				new Object[] { "authorization-server-disable" });
 	}
 

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/SpelView.java
Patch:
@@ -64,8 +64,9 @@ public String getContentType() {
 	public void render(Map<String, ?> model, HttpServletRequest request, HttpServletResponse response)
 			throws Exception {
 		Map<String, Object> map = new HashMap<String, Object>(model);
-		map.put("path", (Object) ServletUriComponentsBuilder.fromContextPath(request).build()
-				.getPath());
+		String path = ServletUriComponentsBuilder.fromContextPath(request).build()
+				.getPath();
+		map.put("path", (Object) path==null ? "" : path);
 		context.setRootObject(map);
 		String result = helper.replacePlaceholders(template, resolver);
 		response.setContentType(getContentType());

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/SpelView.java
Patch:
@@ -26,6 +26,7 @@
 import org.springframework.util.PropertyPlaceholderHelper;
 import org.springframework.util.PropertyPlaceholderHelper.PlaceholderResolver;
 import org.springframework.web.servlet.View;
+import org.springframework.web.servlet.support.ServletUriComponentsBuilder;
 
 /**
  * Simple String template renderer.
@@ -63,7 +64,8 @@ public String getContentType() {
 	public void render(Map<String, ?> model, HttpServletRequest request, HttpServletResponse response)
 			throws Exception {
 		Map<String, Object> map = new HashMap<String, Object>(model);
-		map.put("path", (Object) request.getContextPath());
+		map.put("path", (Object) ServletUriComponentsBuilder.fromContextPath(request).build()
+				.getPath());
 		context.setRootObject(map);
 		String result = helper.replacePlaceholders(template, resolver);
 		response.setContentType(getContentType());

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/filter/OAuth2ClientContextFilter.java
Patch:
@@ -83,7 +83,6 @@ public void doFilter(ServletRequest servletRequest,
 	/**
 	 * Redirect the user according to the specified exception.
 	 * 
-	 * @param resourceThatNeedsAuthorization
 	 * @param e
 	 *            The user redirect exception.
 	 * @param request

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/http/StringSplitUtils.java
Patch:
@@ -90,8 +90,9 @@ public static Map<String, String> splitEachArrayElementAndCreateMap(String[] arr
    * Splits a given string on the given separator character, skips the contents of quoted substrings
    * when looking for separators.
    * Introduced for use in DigestProcessingFilter (see SEC-506).
-   * <p/>
+   * <p>
    * This was copied and modified from commons-lang StringUtils
+   * </p>
    */
   public static String[] splitIgnoringQuotes(String str, char separatorChar) {
     if (str == null) {

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/test/RestTemplateHolder.java
Patch:
@@ -15,7 +15,7 @@
 import org.springframework.web.client.RestOperations;
 
 /**
- * Marker interface for an object that has a getter and setter for a {@link RestTemplate}.
+ * Marker interface for an object that has a getter and setter for a {@link RestOperations}.
  * 
  * @author Dave Syer
  * 

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/exceptions/OAuth2Exception.java
Patch:
@@ -131,7 +131,7 @@ else if (ACCESS_DENIED.equals(errorCode)) {
 	}
 
 	/**
-	 * Creates an {@link OAuth2Exception} from a Map<String,String>.
+	 * Creates an {@link OAuth2Exception} from a Map&lt;String,String&gt;.
 	 * 
 	 * @param errorParams
 	 * @return

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/web/configurers/AuthorizationServerEndpointsConfigurer.java
Patch:
@@ -278,7 +278,7 @@ public AuthorizationServerEndpointsConfigurer exceptionTranslator(WebResponseExc
 	/**
 	 * The AuthenticationManager for the password grant.
 	 * 
-	 * @param builder an AuthenticationManager, fully initialized
+	 * @param authenticationManager an AuthenticationManager, fully initialized
 	 * @return this for a fluent style
 	 */
 	public AuthorizationServerEndpointsConfigurer authenticationManager(AuthenticationManager authenticationManager) {

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/web/configurers/ResourceServerSecurityConfigurer.java
Patch:
@@ -48,7 +48,7 @@
 /**
  *
  * @author Rob Winch
- * @Author Dave Syer
+ * @author Dave Syer
  * 
  * @since 2.0.0
  */

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/AuthorizationRequest.java
Patch:
@@ -209,9 +209,9 @@ public void setClientId(String clientId) {
 	/**
 	 * Set the scope value. If the collection contains only a single scope
 	 * value, this method will parse that value into a collection using
-	 * {@link OAuth2Utils.parseParameterList}.
+	 * {@link OAuth2Utils#parseParameterList}.
 	 * 
-	 * @see TokenRequest.setScope
+	 * @see TokenRequest#setScope
 	 * 
 	 * @param scope
 	 */
@@ -224,7 +224,7 @@ public void setScope(Collection<String> scope) {
 	 * the original request parameters and should never be changed during
 	 * processing. The map passed in is wrapped in an unmodifiable map instance.
 	 * 
-	 * @see TokenRequest.setRequestParameters
+	 * @see TokenRequest#setRequestParameters
 	 * 
 	 * @param requestParameters
 	 */

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/BaseRequest.java
Patch:
@@ -31,7 +31,7 @@
  * 
  * A base class for the three "*Request" classes used in processing OAuth 2
  * authorizations. This class should <strong>never</strong> be used directly,
- * and it should <strong>never</never> be used as the type for a local or other
+ * and it should <strong>never</strong> be used as the type for a local or other
  * variable.
  * 
  * @author Dave Syer

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/TokenRequest.java
Patch:
@@ -61,9 +61,9 @@ public void setClientId(String clientId) {
 
 	/**
 	 * Set the scope value. If the collection contains only a single scope value, this method will parse that value into
-	 * a collection using {@link OAuth2Utils.parseParameterList}.
+	 * a collection using {@link OAuth2Utils#parseParameterList}.
 	 * 
-	 * @see AuthorizationRequest.setScope
+	 * @see AuthorizationRequest#setScope
 	 * 
 	 * @param scope
 	 */
@@ -75,7 +75,7 @@ public void setScope(Collection<String> scope) {
 	 * Set the Request Parameters on this authorization request, which represent the original request parameters and
 	 * should never be changed during processing. The map passed in is wrapped in an unmodifiable map instance.
 	 * 
-	 * @see AuthorizationRequest.setRequestParameters
+	 * @see AuthorizationRequest#setRequestParameters
 	 * 
 	 * @param requestParameters
 	 */

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/authentication/BearerTokenExtractor.java
Patch:
@@ -25,7 +25,7 @@
 
 /**
  * {@link TokenExtractor} that strips the authenticator from a bearer token request (with an Authorization header in the
- * form "Bearer <code><TOKEN></code>", or as a request parameter if that fails). The access token is the principal in
+ * form "Bearer <code>&lt;TOKEN&gt;</code>", or as a request parameter if that fails). The access token is the principal in
  * the authentication token that is extracted.
  * 
  * @author Dave Syer

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/FrameworkEndpointHandlerMapping.java
Patch:
@@ -69,7 +69,7 @@ public void setPrefix(String prefix) {
 	 * Custom mappings for framework endpoint paths. The keys in the map are the default framework endpoint path, e.g.
 	 * "/oauth/authorize", and the values are the desired runtime paths.
 	 * 
-	 * @param mappings the mappings to set
+	 * @param patternMap the mappings to set
 	 */
 	public void setMappings(Map<String, String> patternMap) {
 		this.mappings = new HashMap<String, String>(patternMap);
@@ -109,7 +109,7 @@ public Set<String> getPaths() {
 
 	/**
 	 * The name of the request parameter that distinguishes a call to approve an authorization. Default is
-	 * {@link AuthorizationRequest#USER_OAUTH_APPROVAL}.
+	 * {@link OAuth2Utils#USER_OAUTH_APPROVAL}.
 	 * 
 	 * @param approvalParameter the approvalParameter to set
 	 */

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/implicit/ImplicitGrantService.java
Patch:
@@ -4,7 +4,7 @@
 import org.springframework.security.oauth2.provider.TokenRequest;
 
 /**
- * Service to associate & store an incoming AuthorizationRequest with the TokenRequest that is passed
+ * Service to associate &amp; store an incoming AuthorizationRequest with the TokenRequest that is passed
  * to the ImplicitTokenGranter during the Implicit flow. This mimics the AuthorizationCodeServices
  * functionality from the Authorization Code flow, allowing the ImplicitTokenGranter to reference the original 
  * AuthorizationRequest, while still allowing the ImplicitTokenGranter to adhere to the TokenGranter interface. 

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/TokenStore.java
Patch:
@@ -104,7 +104,6 @@ public interface TokenStore {
 	Collection<OAuth2AccessToken> findTokensByClientIdAndUserName(String clientId, String userName);
 
 	/**
-	 * @param userName the user name to search
 	 * @param clientId the client id to search
 	 * @return a collection of access tokens
 	 */

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/filter/OAuth2ClientContextFilter.java
Patch:
@@ -108,7 +108,7 @@ protected void redirectUser(UserRedirectRequiredException e,
 		}
 
 		this.redirectStrategy.sendRedirect(request, response, builder.build()
-				.toUriString());
+				.encode().toUriString());
 	}
 
 	/**

File: samples/oauth2/sparklr/src/main/java/org/springframework/security/oauth/examples/sparklr/oauth/SparklrUserApprovalHandler.java
Patch:
@@ -77,7 +77,7 @@ public AuthorizationRequest checkForPreApproval(AuthorizationRequest authorizati
 					ClientDetails client = clientDetailsService
 							.loadClientByClientId(authorizationRequest.getClientId());
 					for (String scope : requestedScopes) {
-						if (client.isAutoApprove(scope) || client.isAutoApprove("all")) {
+						if (client.isAutoApprove(scope)) {
 							approved = true;
 							break;
 						}

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/approval/ApprovalStoreUserApprovalHandler.java
Patch:
@@ -112,7 +112,7 @@ public AuthorizationRequest checkForPreApproval(AuthorizationRequest authorizati
 			try {
 				ClientDetails client = clientDetailsService.loadClientByClientId(clientId);
 				for (String scope : requestedScopes) {
-					if (client.isAutoApprove(scope) || client.isAutoApprove("all")) {
+					if (client.isAutoApprove(scope)) {
 						approvedScopes.add(scope);
 					}
 				}

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/web/configuration/ResourceServerConfigurer.java
Patch:
@@ -20,8 +20,8 @@
 
 /**
  * Configurer interface for <code>@EnableResourceServer</code> classes. Implement this interface to adjust the access
- * rules and paths that are protected by OAuth2 security. APplications may provide multiple instances of this interface,
- * and in general (like with other Security configurers), if more than one configures the same preoperty, then the last
+ * rules and paths that are protected by OAuth2 security. Applications may provide multiple instances of this interface,
+ * and in general (like with other Security configurers), if more than one configures the same property, then the last
  * one wins. The configurers are sorted by {@link Order} before being applied.
  * 
  * @author Dave Syer

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/TokenEndpoint.java
Patch:
@@ -156,9 +156,9 @@ protected String getClientId(Principal principal) {
 	}
 
 	@ExceptionHandler(HttpRequestMethodNotSupportedException.class)
-	public void handleHttpRequestMethodNotSupportedException(HttpRequestMethodNotSupportedException e) throws Exception {
+	public ResponseEntity<OAuth2Exception> handleHttpRequestMethodNotSupportedException(HttpRequestMethodNotSupportedException e) throws Exception {
 	    logger.info("Handling error: " + e.getClass().getSimpleName() + ", " + e.getMessage());
-	    throw e;
+	    return getExceptionTranslator().translate(e);
 	}
 	
 	@ExceptionHandler(Exception.class)

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/InMemoryTokenStore.java
Patch:
@@ -203,11 +203,11 @@ public void removeAccessToken(String tokenValue) {
 		if (authentication != null) {
 			this.authenticationToAccessTokenStore.remove(authenticationKeyGenerator.extractKey(authentication));
 			Collection<OAuth2AccessToken> tokens;
-			tokens = this.userNameToAccessTokenStore.get(authentication.getName());
+			String clientId = authentication.getOAuth2Request().getClientId();
+			tokens = this.userNameToAccessTokenStore.get(getApprovalKey(clientId, authentication.getName()));
 			if (tokens != null) {
 				tokens.remove(removed);
 			}
-			String clientId = authentication.getOAuth2Request().getClientId();
 			tokens = this.clientIdToAccessTokenStore.get(clientId);
 			if (tokens != null) {
 				tokens.remove(removed);

File: tests/annotation/common/src/main/java/sparklr/common/AbstractResourceOwnerPasswordProviderTests.java
Patch:
@@ -135,7 +135,7 @@ public void testTokenNotGrantedIfSecretNotProvided() throws Exception {
 			assertEquals(1, values.size());
 			String header = values.get(0);
 			assertTrue("Wrong header " + header,
-					header.contains("Basic realm=\"oauth2/client\""));
+					header.contains("realm=\"oauth2/client\""));
 		}
 	}
 

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/token/AccessTokenProviderChain.java
Patch:
@@ -122,7 +122,7 @@ public OAuth2AccessToken obtainAccessToken(OAuth2ProtectedResourceDetails resour
 			}
 		}
 
-		if (clientTokenServices != null && auth != null && auth.isAuthenticated()) {
+		if (clientTokenServices != null && (resource.isClientOnly() || auth != null && auth.isAuthenticated())) {
 			clientTokenServices.saveAccessToken(resource, auth, accessToken);
 		}
 

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/token/JdbcClientTokenServices.java
Patch:
@@ -75,10 +75,11 @@ public OAuth2AccessToken mapRow(ResultSet rs, int rowNum) throws SQLException {
 	public void saveAccessToken(OAuth2ProtectedResourceDetails resource, Authentication authentication,
 			OAuth2AccessToken accessToken) {
 		removeAccessToken(resource, authentication);
+		String name = authentication==null ? null : authentication.getName();
 		jdbcTemplate.update(
 				insertAccessTokenSql,
 				new Object[] { accessToken.getValue(), new SqlLobValue(SerializationUtils.serialize(accessToken)),
-						keyGenerator.extractKey(resource, authentication), authentication.getName(),
+						keyGenerator.extractKey(resource, authentication), name,
 						resource.getClientId() }, new int[] { Types.VARCHAR, Types.BLOB, Types.VARCHAR, Types.VARCHAR,
 						Types.VARCHAR });
 	}

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/DefaultAccessTokenConverterTests.java
Patch:
@@ -63,6 +63,7 @@ public void extractAuthentication() {
 		assertEquals(singleton(ROLE_USER), map.get(AccessTokenConverter.AUTHORITIES));
 		OAuth2Authentication extracted = converter.extractAuthentication(map);
 		assertTrue(extracted.getOAuth2Request().getResourceIds().contains("resource"));
+		assertEquals("[ROLE_USER]", extracted.getAuthorities().toString());
 	}
 
 	@Test
@@ -77,6 +78,7 @@ public void extractAuthenticationFromClientToken() {
 		assertEquals(singleton(ROLE_CLIENT), map.get(AccessTokenConverter.AUTHORITIES));
 		OAuth2Authentication extracted = converter.extractAuthentication(map);
 		assertTrue(extracted.getOAuth2Request().getResourceIds().contains("resource"));
+		assertEquals("[ROLE_CLIENT]", extracted.getAuthorities().toString());
 	}
 
 }

File: samples/oauth2/sparklr/src/test/java/org/springframework/security/oauth2/provider/AuthorizationCodeProviderTests.java
Patch:
@@ -386,13 +386,13 @@ private String loginAndGrabCookie() {
 
 		MultiValueMap<String, String> formData;
 		formData = new LinkedMultiValueMap<String, String>();
-		formData.add("j_username", "marissa");
-		formData.add("j_password", "koala");
+		formData.add("username", "marissa");
+		formData.add("password", "koala");
 		if (matcher.matches()) {
 			formData.add("_csrf", matcher.group(1));
 		}
 
-		String location = "/sparklr2/login.do";
+		String location = "/sparklr2/login";
 		HttpHeaders headers = new HttpHeaders();
 		headers.set("Cookie", cookie);
 		headers.setAccept(Arrays.asList(MediaType.TEXT_HTML));

File: samples/oauth2/tonr/src/test/java/org/springframework/security/samples/config/SecurityConfigTests.java
Patch:
@@ -21,6 +21,7 @@
 import org.springframework.context.annotation.ComponentScan;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.security.web.FilterChainProxy;
+import org.springframework.test.annotation.DirtiesContext;
 import org.springframework.test.context.ContextConfiguration;
 import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
 import org.springframework.test.context.web.WebAppConfiguration;
@@ -32,6 +33,7 @@
 @RunWith(SpringJUnit4ClassRunner.class)
 @ContextConfiguration
 @WebAppConfiguration
+@DirtiesContext
 public class SecurityConfigTests {
     @Configuration
     @ComponentScan(basePackages = "org.springframework.security.oauth.examples.config")

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/test/OAuth2ContextSetup.java
Patch:
@@ -310,6 +310,9 @@ public void evaluate() {
 				catch (RuntimeException e) {
 					throw e;
 				}
+				catch (AssertionError e) {
+					throw e;
+				}
 				catch (Throwable e) {
 					logger.debug("Exception in befores", e);
 					Assert.assertThat(e, CoreMatchers.not(CoreMatchers.anything()));

File: tests/xml/mappings/src/main/java/demo/Application.java
Patch:
@@ -96,8 +96,8 @@ public FilterRegistrationBean resourceFilterRegistration() {
 		protected void configure(HttpSecurity http) throws Exception {
 			// @formatter:off	
 			http.addFilterBefore(resourceFilter, AbstractPreAuthenticatedProcessingFilter.class)
-				// Just for laughs, apply OAuth protection to only 2 resources
-				.requestMatchers().antMatchers("/","/admin/beans")
+				// Just for laughs, apply OAuth protection to only 3 resources
+				.requestMatchers().antMatchers("/","/admin/beans","/admin/health")
 			.and()
 				.authorizeRequests()
 					.anyRequest().access("#oauth2.hasScope('read')").expressionHandler(new OAuth2WebSecurityExpressionHandler())

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/DefaultTokenServices.java
Patch:
@@ -52,7 +52,6 @@
  * @author Luke Taylor
  * @author Dave Syer
  */
-@Transactional
 public class DefaultTokenServices implements AuthorizationServerTokenServices, ResourceServerTokenServices,
 		ConsumerTokenServices, InitializingBean {
 
@@ -79,6 +78,7 @@ public void afterPropertiesSet() throws Exception {
 		Assert.notNull(tokenStore, "tokenStore must be set");
 	}
 
+	@Transactional
 	public OAuth2AccessToken createAccessToken(OAuth2Authentication authentication) throws AuthenticationException {
 
 		OAuth2AccessToken existingAccessToken = tokenStore.getAccessToken(authentication);
@@ -129,6 +129,7 @@ else if (refreshToken instanceof ExpiringOAuth2RefreshToken) {
 
 	}
 
+	@Transactional(noRollbackFor={InvalidTokenException.class, InvalidGrantException.class})
 	public OAuth2AccessToken refreshAccessToken(String refreshTokenValue, TokenRequest tokenRequest)
 			throws AuthenticationException {
 

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/refresh/RefreshTokenGranter.java
Patch:
@@ -41,5 +41,5 @@ protected OAuth2AccessToken getAccessToken(ClientDetails client, TokenRequest to
 		String refreshToken = tokenRequest.getRequestParameters().get("refresh_token");
 		return getTokenServices().refreshAccessToken(refreshToken, tokenRequest);
 	}
-
+	
 }

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/consumer/client/OAuthClientHttpRequestFactory.java
Patch:
@@ -52,7 +52,7 @@ public ClientHttpRequest createRequest(URI uri, HttpMethod httpMethod) throws IO
     if (!useAuthHeader) {
       String queryString = this.support.getOAuthQueryString(this.resource, accessToken, uri.toURL(), httpMethod.name(), this.additionalOAuthParameters);
       String uriValue = String.valueOf(uri);
-      uri = URI.create(uriValue.contains("?") ? uriValue + "&" + queryString : uriValue + "?" + queryString);
+      uri = URI.create((uriValue.contains("?") ? uriValue.substring(0, uriValue.indexOf('?')) : uriValue) + "?" + queryString);
     }
 
     ClientHttpRequest req = delegate.createRequest(uri, httpMethod);

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/web/configuration/AuthorizationServerEndpointsConfiguration.java
Patch:
@@ -198,7 +198,7 @@ protected static class TokenKeyEndpointRegistrar implements BeanDefinitionRegist
 		@Override
 		public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {
 			String[] names = BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory,
-					JwtAccessTokenConverter.class);
+					JwtAccessTokenConverter.class, false, false);
 			if (names.length > 0) {
 				BeanDefinitionBuilder builder = BeanDefinitionBuilder.rootBeanDefinition(TokenKeyEndpoint.class);
 				builder.addConstructorArgReference(names[0]);

File: tests/annotation/mappings/src/main/java/demo/Application.java
Patch:
@@ -43,8 +43,8 @@ protected static class ResourceServer extends ResourceServerConfigurerAdapter {
 		public void configure(HttpSecurity http) throws Exception {
 			// @formatter:off
 			http
-				// Just for laughs, apply OAuth protection to only 2 resources
-				.requestMatchers().antMatchers("/","/admin/beans")
+				// Just for laughs, apply OAuth protection to only 3 resources
+				.requestMatchers().antMatchers("/","/admin/beans","/admin/health")
 			.and()
 				.authorizeRequests()
 					.anyRequest().access("#oauth2.hasScope('read')");

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/AccessTokenConverter.java
Patch:
@@ -32,6 +32,8 @@ public interface AccessTokenConverter {
 	final String EXP = "exp";
 
 	final String JTI = "jti";
+	
+	final String GRANT_TYPE = "grant_type";
 
 	final String ATI = "ati";
 

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/JwtAccessTokenConverter.java
Patch:
@@ -277,4 +277,5 @@ else if (verifier instanceof  MacSigner){
 		}
 		this.verifier = verifier;
 	}
+
 }

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/client/http/OAuth2ErrorHandlerTests.java
Patch:
@@ -23,6 +23,7 @@
 import java.io.InputStream;
 
 import org.junit.Assert;
+import org.junit.Ignore;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.ExpectedException;
@@ -176,6 +177,7 @@ public void testHandleGeneric403Error() throws Exception {
 	}
 
 	@Test
+	@Ignore("See https://github.com/spring-projects/spring-security-oauth/issues/387")
 	public void testHandleGeneric403ErrorWithBody() throws Exception {
 		HttpHeaders headers = new HttpHeaders();
 		headers.setContentType(MediaType.APPLICATION_JSON);

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/authentication/OAuth2AuthenticationManager.java
Patch:
@@ -43,7 +43,7 @@ public class OAuth2AuthenticationManager implements AuthenticationManager, Initi
 
 	private String resourceId;
 
-	public void setResourceId(String resourceId) {
+    public void setResourceId(String resourceId) {
 		this.resourceId = resourceId;
 	}
 

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/web/configuration/ResourceServerConfiguration.java
Patch:
@@ -138,7 +138,6 @@ else if (endpoints != null) {
 			// N.B. exceptionHandling is duplicated in resources.configure() so that it works
 			.exceptionHandling().accessDeniedHandler(resources.getAccessDeniedHandler())
 		.and()
-			.anonymous().disable()
 			.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)
 		.and()
 			.csrf().disable();

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/DefaultAccessTokenConverter.java
Patch:
@@ -22,6 +22,7 @@
 import java.util.Set;
 
 import org.springframework.security.core.Authentication;
+import org.springframework.security.core.authority.AuthorityUtils;
 import org.springframework.security.oauth2.common.DefaultOAuth2AccessToken;
 import org.springframework.security.oauth2.common.OAuth2AccessToken;
 import org.springframework.security.oauth2.provider.OAuth2Authentication;
@@ -54,7 +55,8 @@ public void setUserTokenConverter(UserAuthenticationConverter userTokenConverter
 			response.putAll(userTokenConverter.convertUserAuthentication(authentication.getUserAuthentication()));
 		} else {
 			if (clientToken.getAuthorities()!=null && !clientToken.getAuthorities().isEmpty()) {
-				response.put(UserAuthenticationConverter.AUTHORITIES, clientToken.getAuthorities());
+				response.put(UserAuthenticationConverter.AUTHORITIES,
+							 AuthorityUtils.authorityListToSet(clientToken.getAuthorities()));
 			}
 		}
 

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/TokenEndpoint.java
Patch:
@@ -42,6 +42,7 @@
 import org.springframework.util.StringUtils;
 import org.springframework.web.bind.annotation.ExceptionHandler;
 import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RequestMethod;
 import org.springframework.web.bind.annotation.RequestParam;
 
 /**
@@ -66,7 +67,7 @@ public class TokenEndpoint extends AbstractEndpoint {
 
 	private OAuth2RequestValidator oAuth2RequestValidator = new DefaultOAuth2RequestValidator();
 
-	@RequestMapping(value = "/oauth/token")
+	@RequestMapping(value = "/oauth/token", method = RequestMethod.POST)
 	public ResponseEntity<OAuth2AccessToken> getAccessToken(Principal principal, @RequestParam
 	Map<String, String> parameters) {
 

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/expression/OAuth2ExpressionParser.java
Patch:
@@ -35,7 +35,8 @@
  * @author Rob Winch
  * 
  */
-final class OAuth2ExpressionParser implements ExpressionParser {
+public class OAuth2ExpressionParser implements ExpressionParser {
+
 	private final ExpressionParser delegate;
 
 	public OAuth2ExpressionParser(ExpressionParser delegate) {

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/endpoint/AuthorizationEndpointTests.java
Patch:
@@ -325,7 +325,7 @@ public boolean isApproved(AuthorizationRequest authorizationRequest, Authenticat
 		ModelAndView result = endpoint.authorize(model, authorizationRequest.getRequestParameters(), sessionStatus,
 				principal);
 		String url = ((RedirectView) result.getView()).getUrl();
-		assertTrue("Wrong scope: " + result, url.contains("&scope=read"));
+		assertTrue("Wrong scope: " + result, url.contains("scope=read"));
 	}
 
 	@Test
@@ -401,7 +401,7 @@ public AuthorizationRequest updateAfterApproval(AuthorizationRequest authorizati
 		ModelAndView result = endpoint.authorize(model, authorizationRequest.getRequestParameters(), sessionStatus,
 				principal);
 		String url = ((RedirectView) result.getView()).getUrl();
-		assertTrue("Wrong scope: " + result, url.contains("&scope=read%20write"));
+		assertTrue("Wrong scope: " + result, url.contains("scope=read%20write"));
 	}
 
 	@Test(expected = InvalidScopeException.class)

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/AccessTokenConverter.java
Patch:
@@ -33,6 +33,8 @@ public interface AccessTokenConverter {
 
 	final String JTI = "jti";
 
+	final String ATI = "ati";
+
 	final String SCOPE = OAuth2AccessToken.SCOPE;
 
 	final String AUTHORITIES = "authorities";

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/ClientDetails.java
Patch:
@@ -90,7 +90,8 @@ public interface ClientDetails extends Serializable {
 	Integer getAccessTokenValiditySeconds();
 
 	/**
-	 * The refresh token validity period for this client. Zero or negative for default value set by token service.
+	 * The refresh token validity period for this client. Null for default value set by token service, and 
+	 * zero or negative for non-expiring tokens.
 	 * 
 	 * @return the refresh token validity period
 	 */

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/test/OAuth2ContextSetup.java
Patch:
@@ -214,10 +214,10 @@ public OAuth2AccessToken getAccessToken() {
 		if (accessToken != null) {
 			return accessToken;
 		}
+		if (accessTokenProvider != null) {
+			client.setAccessTokenProvider(accessTokenProvider);
+		}
 		try {
-			if (accessTokenProvider != null) {
-				client.setAccessTokenProvider(accessTokenProvider);
-			}
 			return client.getAccessToken();
 		}
 		catch (OAuth2AccessDeniedException e) {

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/token/OAuth2AccessTokenSupport.java
Patch:
@@ -82,6 +82,7 @@ protected void prepareConnection(HttpURLConnection connection, String httpMethod
 				throws IOException {
 			super.prepareConnection(connection, httpMethod);
 			connection.setInstanceFollowRedirects(false);
+			connection.setUseCaches(false);
 		}
 	};
 

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/token/grant/code/AuthorizationCodeAccessTokenProvider.java
Patch:
@@ -216,9 +216,7 @@ public OAuth2AccessToken refreshAccessToken(OAuth2ProtectedResourceDetails resou
 
 	private HttpHeaders getHeadersForTokenRequest(AccessTokenRequest request) {
 		HttpHeaders headers = new HttpHeaders();
-		if (request.getCookie() != null) {
-			headers.set("Cookie", request.getCookie());
-		}
+		// No cookie for token request
 		return headers;
 	}
 

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/web/configurers/ResourceServerSecurityConfigurer.java
Patch:
@@ -140,8 +140,6 @@ public ResourceServerSecurityConfigurer tokenServices(ResourceServerTokenService
 	@Override
 	public void init(HttpSecurity http) throws Exception {
 		registerDefaultAuthenticationEntryPoint(http);
-		// TODO: remove this
-		http.csrf().disable();
 	}
 
 	@SuppressWarnings("unchecked")

File: tests/annotation/common/src/main/java/sparklr/common/AbstractRefreshTokenSupportTests.java
Patch:
@@ -36,6 +36,9 @@ public void testHappyDay() throws Exception {
 		assertFalse(newAccessToken.getValue().equals(accessToken.getValue()));
 
 		verifyAccessTokens(accessToken, newAccessToken);
+		
+		cancelToken(accessToken.getValue());
+		cancelToken(newAccessToken.getValue());
 
 	}
 

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/filter/OAuth2ClientAuthenticationProcessingFilter.java
Patch:
@@ -99,6 +99,7 @@ public Authentication attemptAuthentication(HttpServletRequest request, HttpServ
 			OAuth2Authentication result = tokenServices.loadAuthentication(accessToken.getValue());
 			if (authenticationDetailsSource!=null) {
 				request.setAttribute(OAuth2AuthenticationDetails.ACCESS_TOKEN_VALUE, accessToken.getValue());
+				request.setAttribute(OAuth2AuthenticationDetails.ACCESS_TOKEN_TYPE, accessToken.getTokenType());
 				result.setDetails(authenticationDetailsSource.buildDetails(request));
 			}
 			return result;

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/web/configurers/AuthorizationServerEndpointsConfigurer.java
Patch:
@@ -109,7 +109,7 @@ public final class AuthorizationServerEndpointsConfigurer {
 
 	private boolean tokenServicesOverride = false;
 
-	private boolean reuseRefreshToken;
+	private boolean reuseRefreshToken = true;
 
 	public AuthorizationServerTokenServices getTokenServices() {
 		return tokenServices;
@@ -157,8 +157,8 @@ public AuthorizationServerEndpointsConfigurer tokenEnhancer(TokenEnhancer tokenE
 		return this;
 	}
 
-	public AuthorizationServerEndpointsConfigurer reuseRefreshTokens() {
-		this.reuseRefreshToken = true;
+	public AuthorizationServerEndpointsConfigurer reuseRefreshTokens(boolean reuseRefreshToken) {
+		this.reuseRefreshToken = reuseRefreshToken;
 		return this;
 	}
 

File: samples/oauth2/sparklr/src/main/java/org/springframework/security/oauth/examples/sparklr/config/OAuth2ServerConfig.java
Patch:
@@ -58,7 +58,7 @@ protected static class ResourceServerConfiguration extends ResourceServerConfigu
 
 		@Override
 		public void configure(ResourceServerSecurityConfigurer resources) {
-			resources.resourceId(SPARKLR_RESOURCE_ID);
+			resources.resourceId(SPARKLR_RESOURCE_ID).stateless(false);
 		}
 
 		@Override

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/authentication/OAuth2AuthenticationManager.java
Patch:
@@ -76,6 +76,9 @@ public void afterPropertiesSet() {
 	 */
 	public Authentication authenticate(Authentication authentication) throws AuthenticationException {
 
+		if (authentication == null) {
+			throw new InvalidTokenException("Invalid token (token not found)");
+		}
 		String token = (String) authentication.getPrincipal();
 		OAuth2Authentication auth = tokenServices.loadAuthentication(token);
 		if (auth == null) {

File: tests/annotation/mappings/src/test/java/demo/AuthorizationCodeProviderTests.java
Patch:
@@ -45,6 +45,9 @@ public void testInsufficientScopeInResourceRequest() throws Exception {
 		}
 		catch (InsufficientScopeException ex) {
 			assertTrue("Wrong summary: " + ex, ex.getSummary().contains("scope=\"read"));
+		} catch (Exception e) {
+			fail("Wrong exception: " + e.getClass());
+			throw e;
 		}
 	}
 

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/web/configuration/AuthorizationServerEndpointsConfiguration.java
Patch:
@@ -73,7 +73,7 @@ public void init() {
 				throw new IllegalStateException("Cannot configure enpdoints", e);
 			}
 		}
-		endpoints.clientDetailsService(clientDetailsService);
+		endpoints.setClientDetailsService(clientDetailsService);
 	}
 
 	@Bean

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/web/configuration/ResourceServerConfiguration.java
Patch:
@@ -149,10 +149,11 @@ protected void configure(HttpSecurity http) throws Exception {
 		ResourceServerTokenServices services = resolveTokenServices();
 		if (services != null) {
 			resources.tokenServices(services);
-		}
-		else {
+		} else {
 			if (tokenStore != null) {
 				resources.tokenStore(tokenStore);
+			} else if (endpoints!=null) {
+				resources.tokenStore(endpoints.getEndpointsConfigurer().getTokenStore());
 			}
 		}
 		for (ResourceServerConfigurer configurer : configurers) {

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/TokenRequest.java
Patch:
@@ -88,6 +88,7 @@ public OAuth2Request createOAuth2Request(ClientDetails client) {
 		HashMap<String, String> modifiable = new HashMap<String, String>(requestParameters);
 		// Remove password if present to prevent leaks
 		modifiable.remove("password");
+		modifiable.remove("client_secret");
 		// Add grant type so it can be retrieved from OAuth2Request
 		modifiable.put("grant_type", grantType);
 		return new OAuth2Request(modifiable, client.getClientId(), client.getAuthorities(), true, this.getScope(),

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/web/configuration/AuthorizationServerConfigurerAdapter.java
Patch:
@@ -24,7 +24,7 @@
 public class AuthorizationServerConfigurerAdapter implements AuthorizationServerConfigurer {
 
 	@Override
-	public void configure(AuthorizationServerSecurityConfigurer oauthServer) throws Exception {
+	public void configure(AuthorizationServerSecurityConfigurer security) throws Exception {
 	}
 
 	@Override

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/web/configuration/ResourceServerConfiguration.java
Patch:
@@ -28,7 +28,6 @@
 import org.springframework.security.authentication.AnonymousAuthenticationProvider;
 import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
 import org.springframework.security.config.annotation.web.builders.HttpSecurity;
-import org.springframework.security.config.annotation.web.builders.WebSecurity;
 import org.springframework.security.config.annotation.web.builders.HttpSecurity.RequestMatcherConfigurer;
 import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
 import org.springframework.security.oauth2.config.annotation.web.configurers.ResourceServerSecurityConfigurer;

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/RemoteTokenServices.java
Patch:
@@ -56,7 +56,7 @@ public class RemoteTokenServices implements ResourceServerTokenServices {
 
 	private String clientSecret;
 
-    private String tokenName;
+    private String tokenName = "token";
 
 	private AccessTokenConverter tokenConverter = new DefaultAccessTokenConverter();
 

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/token/grant/password/ResourceOwnerPasswordAccessTokenProvider.java
Patch:
@@ -44,17 +44,18 @@ public OAuth2AccessToken obtainAccessToken(OAuth2ProtectedResourceDetails detail
 			throws UserRedirectRequiredException, AccessDeniedException, OAuth2AccessDeniedException {
 
 		ResourceOwnerPasswordResourceDetails resource = (ResourceOwnerPasswordResourceDetails) details;
-		return retrieveToken(request, resource, getParametersForTokenRequest(resource), new HttpHeaders());
+		return retrieveToken(request, resource, getParametersForTokenRequest(resource, request), new HttpHeaders());
 
 	}
 
-	private MultiValueMap<String, String> getParametersForTokenRequest(ResourceOwnerPasswordResourceDetails resource) {
+	private MultiValueMap<String, String> getParametersForTokenRequest(ResourceOwnerPasswordResourceDetails resource, AccessTokenRequest request) {
 
 		MultiValueMap<String, String> form = new LinkedMultiValueMap<String, String>();
 		form.set("grant_type", "password");
 
 		form.set("username", resource.getUsername());
 		form.set("password", resource.getPassword());
+		form.putAll(request);
 
 		if (resource.isScoped()) {
 

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/store/TokenStoreBaseTests.java
Patch:
@@ -100,7 +100,7 @@ public void testRetrieveAccessToken() {
 	}
 
 	@Test
-	public void testFindAccessTokensByUserName() {
+	public void testFindAccessTokensByClientIdAndUserName() {
 		OAuth2Authentication expectedAuthentication = new OAuth2Authentication(RequestTokenFactory.createOAuth2Request("id", false), new TestAuthentication("test2", false));
 		OAuth2AccessToken expectedOAuth2AccessToken = new DefaultOAuth2AccessToken("testToken");
 		getTokenStore().storeAccessToken(expectedOAuth2AccessToken, expectedAuthentication);

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/DefaultTokenServices.java
Patch:
@@ -89,6 +89,8 @@ public OAuth2AccessToken createAccessToken(OAuth2Authentication authentication)
 				tokenStore.removeAccessToken(existingAccessToken);
 			}
 			else {
+				// Re-store the access token in case the authentication has changed
+				tokenStore.storeAccessToken(existingAccessToken, authentication);
 				return existingAccessToken;
 			}
 		}

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/password/ResourceOwnerPasswordTokenGranter.java
Patch:
@@ -18,6 +18,7 @@
 
 import java.util.Map;
 
+import org.springframework.security.authentication.AbstractAuthenticationToken;
 import org.springframework.security.authentication.AccountStatusException;
 import org.springframework.security.authentication.AuthenticationManager;
 import org.springframework.security.authentication.BadCredentialsException;
@@ -57,6 +58,7 @@ protected OAuth2Authentication getOAuth2Authentication(ClientDetails client, Tok
 		String password = parameters.get("password");
 
 		Authentication userAuth = new UsernamePasswordAuthenticationToken(username, password);
+		((AbstractAuthenticationToken) userAuth).setDetails(parameters);
 		try {
 			userAuth = authenticationManager.authenticate(userAuth);
 		}

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/DefaultTokenServices.java
Patch:
@@ -33,6 +33,7 @@
 import org.springframework.security.oauth2.provider.OAuth2Authentication;
 import org.springframework.security.oauth2.provider.OAuth2Request;
 import org.springframework.security.oauth2.provider.TokenRequest;
+import org.springframework.transaction.annotation.Transactional;
 import org.springframework.util.Assert;
 
 /**
@@ -47,6 +48,7 @@
  * @author Luke Taylor
  * @author Dave Syer
  */
+@Transactional
 public class DefaultTokenServices implements AuthorizationServerTokenServices, ResourceServerTokenServices,
 		ConsumerTokenServices, InitializingBean {
 

File: tests/annotation/common/src/main/java/sparklr/common/AbstractRefreshTokenSupportTests.java
Patch:
@@ -101,8 +101,8 @@ private MultiValueMap<String, String> getTokenFormData(String scope, String clie
 			formData.add("client_id", clientId);
 		}
 		formData.add("scope", scope);
-		formData.add("username", security.getUser().getName());
-		formData.add("password", security.getUser().getPassword());
+		formData.add("username", getUsername());
+		formData.add("password", getPassword());
 		return formData;
 	}
 }

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/request/DefaultAuthorizationRequestFactoryTests.java
Patch:
@@ -15,6 +15,7 @@
 
 import static org.junit.Assert.assertEquals;
 
+import java.util.Arrays;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.Map;
@@ -51,6 +52,7 @@ public ClientDetails loadClientByClientId(String clientId) throws OAuth2Exceptio
 	public void start() {
 		client.setClientId("foo");
 		client.setScope(Collections.singleton("bar"));
+		client.setResourceIds(Arrays.asList("bar"));
 	}
 
 	@After
@@ -100,6 +102,7 @@ public void testCreateTokenThenOAuth2RequestWithGrantType() {
 		AuthorizationRequest auth = factory.createAuthorizationRequest(Collections.singletonMap("client_id", "foo"));
 		OAuth2Request request = factory.createTokenRequest(auth, "password").createOAuth2Request(client);
 		assertEquals("password", request.getGrantType());
+		assertEquals("[bar]", request.getResourceIds().toString());
 	}
 
 	@Test

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/AccessTokenConverter.java
Patch:
@@ -35,6 +35,8 @@ public interface AccessTokenConverter {
 
 	final String SCOPE = OAuth2AccessToken.SCOPE;
 
+	final String AUTHORITIES = "authorities";
+
 	/**
 	 * @param token an access token
 	 * @param authentication the current OAuth authentication

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/UserAuthenticationConverter.java
Patch:
@@ -25,7 +25,7 @@
  */
 public interface UserAuthenticationConverter {
 
-	final String AUTHORITIES = "authorities";
+	final String AUTHORITIES = AccessTokenConverter.AUTHORITIES;
 
 	final String USERNAME = "user_name";
 

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/builders/ClientDetailsServiceBuilder.java
Patch:
@@ -203,7 +203,7 @@ public ClientBuilder additionalInformation(String... pairs) {
 				}
 				int index = pair.indexOf(separator);
 				String key = pair.substring(0, index > 0 ? index : pair.length());
-				String value = index > 0 ? pair.substring(index) : null;
+				String value = index > 0 ? pair.substring(index+1) : null;
 				this.additionalInformation.put(key, (Object) value);
 			}
 			return this;

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/DefaultUserAuthenticationConverter.java
Patch:
@@ -68,7 +68,7 @@ private Collection<? extends GrantedAuthority> getAuthorities(Map<String, ?> map
 		}
 		Object authorities = map.get(AUTHORITIES);
 		if (authorities instanceof String) {
-			AuthorityUtils.commaSeparatedStringToAuthorityList((String) authorities);
+			return AuthorityUtils.commaSeparatedStringToAuthorityList((String) authorities);
 		}
 		if (authorities instanceof Collection) {
 			return AuthorityUtils.commaSeparatedStringToAuthorityList(StringUtils

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/TokenRequest.java
Patch:
@@ -89,11 +89,13 @@ public void setRequestParameters(Map<String, String> requestParameters) {
 	}
 
 	public OAuth2Request createOAuth2Request(ClientDetails client) {
-		// Remove password if present to prevent leaks
 		Map<String, String> requestParameters = getRequestParameters();
 		HashMap<String, String> modifiable = new HashMap<String, String>(
 				requestParameters);
+		// Remove password if present to prevent leaks
 		modifiable.remove("password");
+		// Add grant type so it can be retrieved from OAuth2Request
+		modifiable.put("grant_type", grantType);
 		return new OAuth2Request(modifiable, client.getClientId(),
 				client.getAuthorities(), true, this.getScope(), null, null,
 				null, null);

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/token/AccessTokenProviderChain.java
Patch:
@@ -122,7 +122,7 @@ public OAuth2AccessToken obtainAccessToken(OAuth2ProtectedResourceDetails resour
 			}
 		}
 
-		if (clientTokenServices != null) {
+		if (clientTokenServices != null && auth != null && auth.isAuthenticated()) {
 			clientTokenServices.saveAccessToken(resource, auth, accessToken);
 		}
 

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/builders/ClientDetailsServiceBuilder.java
Patch:
@@ -203,7 +203,7 @@ public ClientBuilder additionalInformation(String... pairs) {
 				}
 				int index = pair.indexOf(separator);
 				String key = pair.substring(0, index > 0 ? index : pair.length());
-				String value = index > 0 ? null : pair.substring(index);
+				String value = index > 0 ? pair.substring(index) : null;
 				this.additionalInformation.put(key, (Object) value);
 			}
 			return this;

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/config/annotation/AuthorizationServerConfigurationTests.java
Patch:
@@ -147,7 +147,7 @@ public void configure(ClientDetailsServiceConfigurer clients) throws Exception {
 		            .authorities("ROLE_CLIENT", "ROLE_TRUSTED_CLIENT")
 		            .scopes("read", "write", "trust")
 		            .accessTokenValiditySeconds(60)
-		            .additionalInformation("foo:bar", "spam:bucket");
+		            .additionalInformation("foo:bar", "spam:bucket", "crap");
 		 	// @formatter:on
 		}
 

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/web/configurers/ResourceServerSecurityConfigurer.java
Patch:
@@ -158,6 +158,7 @@ private AuthenticationManager oauthAuthenticationManager(HttpSecurity http) {
 		}
 		oauthAuthenticationManager.setResourceId(resourceId);
 		oauthAuthenticationManager.setTokenServices(resourceTokenServices(http));
+		oauthAuthenticationManager.setClientDetailsService(clientDetails());
 		return oauthAuthenticationManager;
 	}
 

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/ClientDetailsService.java
Patch:
@@ -28,8 +28,8 @@ public interface ClientDetailsService {
    * Load a client by the client id. This method must not return null.
    *
    * @param clientId The client id.
-   * @return The client details.
-   * @throws ClientRegistrationException If the client account is locked, expired, disabled, or for any other reason.
+   * @return The client details (never null).
+   * @throws ClientRegistrationException If the client account is locked, expired, disabled, or invalid for any other reason.
    */
   ClientDetails loadClientByClientId(String clientId) throws ClientRegistrationException;
 

File: tests/annotation/common/src/main/java/sparklr/common/AbstractIntegrationTests.java
Patch:
@@ -85,7 +85,9 @@ public abstract class AbstractIntegrationTests {
 	
 	@Before
 	public void init() {		
+		String prefix = server.getServletPrefix();
 		http.setPort(port);
+		http.setPrefix(prefix);
 	}
 
 	@BeforeOAuth2Context

File: tests/annotation/mappings/src/test/java/demo/ServletPathClientCredentialsProviderTests.java
Patch:
@@ -10,14 +10,16 @@
 import org.springframework.boot.test.TestRestTemplate;
 import org.springframework.http.HttpStatus;
 import org.springframework.http.ResponseEntity;
+import org.springframework.test.annotation.DirtiesContext;
 
 import sparklr.common.AbstractClientCredentialsProviderTests;
 
 /**
  * @author Dave Syer
  */
 @SpringApplicationConfiguration(classes=Application.class)
-@IntegrationTest("server.servlet_path:/server")
+@IntegrationTest({"server.servlet_path:/server", "server.port=0"})
+@DirtiesContext
 public class ServletPathClientCredentialsProviderTests extends AbstractClientCredentialsProviderTests {
 	
 	@Test

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/client/filter/OAuth2ClientAuthenticationProcessingFilterTests.java
Patch:
@@ -27,6 +27,7 @@
 
 import org.junit.Test;
 import org.mockito.Mockito;
+import org.springframework.mock.web.MockHttpServletRequest;
 import org.springframework.security.core.Authentication;
 import org.springframework.security.oauth2.client.OAuth2RestOperations;
 import org.springframework.security.oauth2.client.http.AccessTokenRequiredException;
@@ -57,7 +58,7 @@ public void testAuthentication() throws Exception {
 		OAuth2Request storedOAuth2Request = RequestTokenFactory.createOAuth2Request("client", false, scopes);
 		this.authentication = new OAuth2Authentication(storedOAuth2Request, null);
 		Mockito.when(tokenServices.loadAuthentication("FOO")).thenReturn(authentication);
-		Authentication authentication = filter.attemptAuthentication(null, null);
+		Authentication authentication = filter.attemptAuthentication(new MockHttpServletRequest(), null);
 		assertEquals(this.authentication, authentication);
 	}
 

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/JdbcTokenStore.java
Patch:
@@ -113,7 +113,7 @@ public OAuth2AccessToken mapRow(ResultSet rs, int rowNum) throws SQLException {
 					}, key);
 		}
 		catch (EmptyResultDataAccessException e) {
-			if (LOG.isInfoEnabled()) {
+			if (LOG.isDebugEnabled()) {
 				LOG.debug("Failed to find access token for authentication " + authentication);
 			}
 		}

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/DefaultAccessTokenConverter.java
Patch:
@@ -82,7 +82,7 @@ public OAuth2AccessToken extractAccessToken(String value, Map<String, ?> map) {
 		info.remove(CLIENT_ID);
 		info.remove(SCOPE);
 		if (map.containsKey(EXP)) {
-			token.setExpiration(new Date((Integer) map.get(EXP) * 1000L));
+			token.setExpiration(new Date((Long) map.get(EXP) * 1000L));
 		}
 		if (map.containsKey(JTI)) {
 			info.put(JTI, map.get(JTI));

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/store/TokenStoreBaseTests.java
Patch:
@@ -79,7 +79,8 @@ public void testRetrieveAccessToken() {
 		//Test approved request
 		OAuth2Request storedOAuth2Request = RequestTokenFactory.createOAuth2Request("id", true);
 		OAuth2Authentication authentication = new OAuth2Authentication(storedOAuth2Request, new TestAuthentication("test2", true));
-		OAuth2AccessToken expectedOAuth2AccessToken = new DefaultOAuth2AccessToken("testToken");
+		DefaultOAuth2AccessToken expectedOAuth2AccessToken = new DefaultOAuth2AccessToken("testToken");
+		expectedOAuth2AccessToken.setExpiration(new Date(Long.MAX_VALUE-1));
 		getTokenStore().storeAccessToken(expectedOAuth2AccessToken, authentication);
 
 		//Test unapproved request

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/store/InMemoryTokenStoreTests.java
Patch:
@@ -1,4 +1,4 @@
-package org.springframework.security.oauth2.provider.token;
+package org.springframework.security.oauth2.provider.token.store;
 
 import static org.junit.Assert.assertEquals;
 

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/store/JdbcTokenStoreTests.java
Patch:
@@ -1,4 +1,4 @@
-package org.springframework.security.oauth2.provider.token;
+package org.springframework.security.oauth2.provider.token.store;
 
 import org.junit.After;
 import org.junit.Before;

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/store/JwtTokenStoreTests.java
Patch:
@@ -1,4 +1,4 @@
-package org.springframework.security.oauth2.provider.token;
+package org.springframework.security.oauth2.provider.token.store;
 
 import static org.junit.Assert.assertEquals;
 

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/store/TokenStoreBaseTests.java
Patch:
@@ -10,7 +10,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  */
-package org.springframework.security.oauth2.provider.token;
+package org.springframework.security.oauth2.provider.token.store;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
@@ -30,6 +30,7 @@
 import org.springframework.security.oauth2.provider.OAuth2Authentication;
 import org.springframework.security.oauth2.provider.OAuth2Request;
 import org.springframework.security.oauth2.provider.RequestTokenFactory;
+import org.springframework.security.oauth2.provider.token.TokenStore;
 
 /** 
  * @author Dave Syer

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/xml/AuthorizationServerBeanDefinitionParser.java
Patch:
@@ -250,6 +250,9 @@ protected AbstractBeanDefinition parseEndpointAndReturnFilter(Element element, P
 		if (StringUtils.hasText(oAuth2RequestFactoryRef)) {
 			tokenEndpointBean.addPropertyReference("oAuth2RequestFactory", oAuth2RequestFactoryRef);
 		}
+		if (StringUtils.hasText(oAuth2RequestValidatorRef)) {
+			tokenEndpointBean.addPropertyReference("oAuth2RequestValidator", oAuth2RequestValidatorRef);
+		}
 
 		// Register a handler mapping that can detect the auth server endpoints
 		BeanDefinitionBuilder handlerMappingBean = BeanDefinitionBuilder

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/DefaultTokenServices.java
Patch:
@@ -203,7 +203,7 @@ public OAuth2AccessToken readAccessToken(String accessToken) {
 		return tokenStore.readAccessToken(accessToken);
 	}
 
-	public OAuth2Authentication loadAuthentication(String accessTokenValue) throws AuthenticationException {
+	public OAuth2Authentication loadAuthentication(String accessTokenValue) throws AuthenticationException, InvalidTokenException {
 		OAuth2AccessToken accessToken = tokenStore.readAccessToken(accessTokenValue);
 		if (accessToken == null) {
 			throw new InvalidTokenException("Invalid access token: " + accessTokenValue);

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/RemoteTokenServices.java
Patch:
@@ -92,7 +92,7 @@ public void setAccessTokenConverter(AccessTokenConverter accessTokenConverter) {
 	}
 
 	@Override
-	public OAuth2Authentication loadAuthentication(String accessToken) throws AuthenticationException {
+	public OAuth2Authentication loadAuthentication(String accessToken) throws AuthenticationException, InvalidTokenException {
 
 		MultiValueMap<String, String> formData = new LinkedMultiValueMap<String, String>();
 		formData.add("token", accessToken);

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/ResourceServerTokenServices.java
Patch:
@@ -2,6 +2,7 @@
 
 import org.springframework.security.core.AuthenticationException;
 import org.springframework.security.oauth2.common.OAuth2AccessToken;
+import org.springframework.security.oauth2.common.exceptions.InvalidTokenException;
 import org.springframework.security.oauth2.provider.OAuth2Authentication;
 
 public interface ResourceServerTokenServices {
@@ -12,8 +13,9 @@ public interface ResourceServerTokenServices {
 	 * @param accessToken The access token value.
 	 * @return The authentication for the access token.
 	 * @throws AuthenticationException If the access token is expired
+	 * @throws InvalidTokenException if the token isn't valid
 	 */
-	OAuth2Authentication loadAuthentication(String accessToken) throws AuthenticationException;
+	OAuth2Authentication loadAuthentication(String accessToken) throws AuthenticationException, InvalidTokenException;
 
 	/**
 	 * Retrieve the full access token details from just the value.

File: tests/annotation/common/src/main/java/sparklr/common/AbstractAuthorizationCodeProviderTests.java
Patch:
@@ -30,7 +30,6 @@
 import org.springframework.http.MediaType;
 import org.springframework.http.ResponseEntity;
 import org.springframework.http.client.ClientHttpResponse;
-import org.springframework.security.crypto.codec.Base64;
 import org.springframework.security.oauth2.client.OAuth2RestTemplate;
 import org.springframework.security.oauth2.client.resource.UserApprovalRequiredException;
 import org.springframework.security.oauth2.client.resource.UserRedirectRequiredException;
@@ -319,7 +318,7 @@ private ResponseEntity<String> attemptToGetConfirmationPage(String clientId, Str
 	private HttpHeaders getAuthenticatedHeaders() {
 		HttpHeaders headers = new HttpHeaders();
 		headers.setAccept(Arrays.asList(MediaType.TEXT_HTML));
-		headers.set("Authorization", "Basic " + new String(Base64.encode("user:password".getBytes())));
+		headers.set("Authorization", getBasicAuthentication());
 		if (context.getRestTemplate() != null) {
 			context.getAccessTokenRequest().setHeaders(headers);
 		}

File: tests/annotation/common/src/main/java/sparklr/common/AbstractImplicitProviderTests.java
Patch:
@@ -5,7 +5,6 @@
 
 import org.junit.Test;
 import org.springframework.http.HttpHeaders;
-import org.springframework.security.crypto.codec.Base64;
 import org.springframework.security.oauth2.client.resource.UserRedirectRequiredException;
 import org.springframework.security.oauth2.client.test.OAuth2ContextConfiguration;
 import org.springframework.security.oauth2.client.token.grant.implicit.ImplicitResourceDetails;
@@ -22,7 +21,7 @@ public abstract class AbstractImplicitProviderTests extends AbstractIntegrationT
 	public void testPostForNonAutomaticApprovalToken() throws Exception {
 
 		HttpHeaders headers = new HttpHeaders();
-		headers.set("Authorization", "Basic " + new String(Base64.encode("user:password".getBytes())));
+		headers.set("Authorization", getBasicAuthentication());
 		context.getAccessTokenRequest().setHeaders(headers);
 		try {
 			assertNotNull(context.getAccessToken());

File: tests/annotation/common/src/main/java/sparklr/common/AbstractRefreshTokenSupportTests.java
Patch:
@@ -101,8 +101,8 @@ private MultiValueMap<String, String> getTokenFormData(String scope, String clie
 			formData.add("client_id", clientId);
 		}
 		formData.add("scope", scope);
-		formData.add("username", "user");
-		formData.add("password", "password");
+		formData.add("username", security.getUser().getName());
+		formData.add("password", security.getUser().getPassword());
 		return formData;
 	}
 }

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/web/configuration/AuthorizationServerSecurityConfiguration.java
Patch:
@@ -69,9 +69,9 @@ protected void configure(HttpSecurity http) throws Exception {
 		http.setSharedObject(FrameworkEndpointHandlerMapping.class, handlerMapping);
 		configure(configurer);
 		http.apply(configurer);
-		String tokenEndpointPath = handlerMapping.getPath("/oauth/token");
-		String tokenKeyPath = handlerMapping.getPath("/oauth/token_key");
-		String checkTokenPath = handlerMapping.getPath("/oauth/check_token");
+		String tokenEndpointPath = handlerMapping.getServletPath("/oauth/token");
+		String tokenKeyPath = handlerMapping.getServletPath("/oauth/token_key");
+		String checkTokenPath = handlerMapping.getServletPath("/oauth/check_token");
 		// @formatter:off
 		http
         	.authorizeRequests()

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/web/configurers/AuthorizationServerSecurityConfigurer.java
Patch:
@@ -133,7 +133,7 @@ public void configure(HttpSecurity http) throws Exception {
 
 	private ClientCredentialsTokenEndpointFilter clientCredentialsTokenEndpointFilter(HttpSecurity http) {
 		ClientCredentialsTokenEndpointFilter clientCredentialsTokenEndpointFilter = new ClientCredentialsTokenEndpointFilter(
-				frameworkEndpointHandlerMapping().getPath("/oauth/token"));
+				frameworkEndpointHandlerMapping().getServletPath("/oauth/token"));
 		clientCredentialsTokenEndpointFilter
 				.setAuthenticationManager(http.getSharedObject(AuthenticationManager.class));
 		clientCredentialsTokenEndpointFilter = postProcess(clientCredentialsTokenEndpointFilter);

File: tests/annotation/common/src/main/java/sparklr/common/AbstractAuthorizationCodeProviderTests.java
Patch:
@@ -414,9 +414,6 @@ public MyTrustedClient(Object target) {
 			setClientId("my-trusted-client");
 			setScope(Arrays.asList("read"));
 			setId(getClientId());
-			AbstractAuthorizationCodeProviderTests test = (AbstractAuthorizationCodeProviderTests) target;
-			setAccessTokenUri(test.http.getUrl(tokenPath()));
-			setUserAuthorizationUri(test.http.getUrl(authorizePath()));
 		}
 	}
 

File: tests/annotation/common/src/main/java/sparklr/common/AbstractImplicitProviderTests.java
Patch:
@@ -43,9 +43,6 @@ public NonAutoApproveImplicit(Object target) {
 			setClientId("my-trusted-client");
 			setId(getClientId());
 			setPreEstablishedRedirectUri("http://anywhere");
-			AbstractImplicitProviderTests test = (AbstractImplicitProviderTests) target;
-			setAccessTokenUri(test.http.getUrl(authorizePath()));
-			setUserAuthorizationUri(test.http.getUrl(authorizePath()));
 		}
 	}
 

File: tests/annotation/common/src/main/java/sparklr/common/AbstractResourceOwnerPasswordProviderTests.java
Patch:
@@ -216,8 +216,6 @@ public ResourceOwner(Object target) {
 			setId(getClientId());
 			setUsername("user");
 			setPassword("password");
-			AbstractResourceOwnerPasswordProviderTests test = (AbstractResourceOwnerPasswordProviderTests) target;
-			setAccessTokenUri(test.http.getUrl(tokenPath()));
 		}
 	}
 

File: tests/annotation/mappings/src/test/java/demo/ClientCredentialsProviderTests.java
Patch:
@@ -25,8 +25,7 @@
  */
 @SpringApplicationConfiguration(classes=Application.class)
 public class ClientCredentialsProviderTests extends AbstractClientCredentialsProviderTests {
-
-
+	
 	/**
 	 * tests the check_token endpoint
 	 */

File: tests/annotation/vanilla/src/test/java/demo/ImplicitProviderTests.java
Patch:
@@ -68,8 +68,6 @@ public ResourceOwner(Object target) {
 			setId(getClientId());
 			setUsername("user");
 			setPassword("password");
-			AbstractImplicitProviderTests test = (AbstractImplicitProviderTests) target;
-			setAccessTokenUri(test.http.getUrl(tokenPath()));
 		}
 	}
 

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/DefaultAuthenticationKeyGenerator.java
Patch:
@@ -24,7 +24,7 @@
 import org.springframework.security.oauth2.provider.OAuth2Request;
 
 /**
- * Basic key generator taking into account the client id, scope, reource ids and username (principal name) if they
+ * Basic key generator taking into account the client id, scope, resource ids and username (principal name) if they
  * exist.
  * 
  * @author Dave Syer

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/implicit/ImplicitGrantService.java
Patch:
@@ -10,8 +10,11 @@
  * AuthorizationRequest, while still allowing the ImplicitTokenGranter to adhere to the TokenGranter interface. 
  * 
  * @author Amanda Anganes
+ * 
+ * @deprecated with no replacement (it shouldn't be necessary to use this strategy since 2.0.2)
  *
  */
+@Deprecated
 public interface ImplicitGrantService {
 
 	/**

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/implicit/InMemoryImplicitGrantService.java
Patch:
@@ -11,6 +11,7 @@
  * @author Amanda Anganes
  *
  */
+@SuppressWarnings("deprecation")
 public class InMemoryImplicitGrantService implements ImplicitGrantService {
 
 	protected final ConcurrentHashMap<TokenRequest, OAuth2Request> requestStore = new ConcurrentHashMap<TokenRequest, OAuth2Request>();

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/client/InMemoryClientDetailsService.java
Patch:
@@ -19,9 +19,9 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import org.springframework.security.oauth2.common.exceptions.OAuth2Exception;
 import org.springframework.security.oauth2.provider.ClientDetails;
 import org.springframework.security.oauth2.provider.ClientDetailsService;
+import org.springframework.security.oauth2.provider.ClientRegistrationException;
 import org.springframework.security.oauth2.provider.NoSuchClientException;
 
 /**
@@ -33,7 +33,7 @@ public class InMemoryClientDetailsService implements ClientDetailsService {
 
   private Map<String, ClientDetails> clientDetailsStore = new HashMap<String, ClientDetails>();
 
-  public ClientDetails loadClientByClientId(String clientId) throws OAuth2Exception {
+  public ClientDetails loadClientByClientId(String clientId) throws ClientRegistrationException {
     ClientDetails details = clientDetailsStore.get(clientId);
     if (details == null) {
       throw new NoSuchClientException("No client with requested id: " + clientId);

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/web/configuration/ResourceServerConfigurer.java
Patch:
@@ -30,7 +30,8 @@
 public interface ResourceServerConfigurer {
 
 	/**
-	 * Add resource-server specific properties (like a resource id).
+	 * Add resource-server specific properties (like a resource id). The defaults should work for many applications, but
+	 * you might want to change at least the resource id.
 	 * 
 	 * @param resources configurer for the resource server
 	 * @throws Exception if there is a problem

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/web/configurers/AuthorizationServerEndpointsConfigurer.java
Patch:
@@ -57,6 +57,7 @@
 import org.springframework.security.oauth2.provider.token.store.JwtTokenStore;
 
 /**
+ * Configure the properties and enhanced functionality of the Authorization Server endpoints. 
  * 
  * @author Rob Winch
  * @author Dave Syer

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/RequestTokenFactory.java
Patch:
@@ -15,7 +15,7 @@
 
 import java.io.Serializable;
 import java.util.Collection;
-import java.util.HashSet;
+import java.util.LinkedHashSet;
 import java.util.Map;
 import java.util.Set;
 
@@ -32,7 +32,7 @@ public class RequestTokenFactory {
 	public static OAuth2Request createOAuth2Request(Map<String, String> requestParameters, String clientId,
 			Collection<? extends GrantedAuthority> authorities, boolean approved, Collection<String> scope,
 			Set<String> resourceIds, String redirectUri, Set<String> responseTypes, Map<String, Serializable> extensionProperties) {
-		return new OAuth2Request(requestParameters, clientId, authorities, approved, new HashSet<String>(scope), resourceIds, redirectUri,
+		return new OAuth2Request(requestParameters, clientId, authorities, approved, scope==null ? null : new LinkedHashSet<String>(scope), resourceIds, redirectUri,
 				responseTypes, extensionProperties);
 	}
 

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/config/annotation/AuthorizationServerConfigurationTests.java
Patch:
@@ -270,7 +270,7 @@ protected static class AuthorizationServerJwt extends AuthorizationServerConfigu
 
 		@Override
 		public void configure(AuthorizationServerSecurityConfigurer oauthServer) throws Exception {
-			oauthServer.tokenService(tokenServices).realm("sparklr2/client");
+			oauthServer.tokenServices(tokenServices).realm("sparklr2/client");
 		}
 
 		@Override

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/JwtTokenEnhancer.java
Patch:
@@ -132,7 +132,8 @@ public OAuth2AccessToken enhance(OAuth2AccessToken accessToken, OAuth2Authentica
 			info.put(TOKEN_ID, tokenId);
 		}
 		result.setAdditionalInformation(info);
-		return result.setValue(encode(result, authentication));
+		result.setValue(encode(result, authentication));
+		return result; 
 	}
 
 	protected String encode(OAuth2AccessToken accessToken, OAuth2Authentication authentication) {

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/http/OAuth2ErrorHandler.java
Patch:
@@ -148,7 +148,7 @@ public int getRawStatusCode() throws IOException {
 				errorHandler.handleError(bufferedResponse);
 			}
 			catch (OAuth2Exception ex) {
-				if (bufferedResponse.getRawStatusCode() == 401 || ! ex.getClass().equals(OAuth2Exception.class)) {
+				if (bufferedResponse.getRawStatusCode() == 403 || bufferedResponse.getRawStatusCode() == 401 || ! ex.getClass().equals(OAuth2Exception.class)) {
 					// Status code 401 should always mean that we need a legitimate token.
 					// Caught a specific, derived class so this is not just some generic error
 					throw ex;

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/exceptions/OAuth2Exception.java
Patch:
@@ -27,6 +27,7 @@ public class OAuth2Exception extends RuntimeException {
 	public static final String UNAUTHORIZED_CLIENT = "unauthorized_client";
 	public static final String UNSUPPORTED_GRANT_TYPE = "unsupported_grant_type";
 	public static final String INVALID_SCOPE = "invalid_scope";
+	public static final String INSUFFICIENT_SCOPE = "insufficient_scope";
 	public static final String INVALID_TOKEN = "invalid_token";
 	public static final String REDIRECT_URI_MISMATCH ="redirect_uri_mismatch";
 	public static final String UNSUPPORTED_RESPONSE_TYPE ="unsupported_response_type";

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/web/configurers/OAuth2AuthorizationServerConfigurer.java
Patch:
@@ -133,7 +133,7 @@ public OAuth2RequestValidator getOAuth2RequestValidator() {
 	public UserApprovalHandler getUserApprovalHandler() {
 		return userApprovalHandler;
 	}
-
+	
 	public OAuth2AuthorizationServerConfigurer allowFormAuthenticationForClients() {
 		this.allowFormAuthenticationForClients = true;
 		return this;

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/expression/OAuth2SecurityExpressionMethods.java
Patch:
@@ -65,7 +65,8 @@ public OAuth2SecurityExpressionMethods(Authentication authentication) {
 	 */
 	public boolean throwOnError(boolean decision) {
 		if (!decision && !missingScopes.isEmpty()) {
-			throw new InsufficientScopeException("Insufficient scope for this resource", missingScopes);
+			Throwable failure = new InsufficientScopeException("Insufficient scope for this resource", missingScopes);
+			throw new AccessDeniedException(failure.getMessage(), failure);
 		}
 		return decision;
 	}

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/expression/OAuth2MethodSecurityExpressionHandlerTests.java
Patch:
@@ -25,10 +25,10 @@
 import org.junit.Test;
 import org.springframework.expression.EvaluationContext;
 import org.springframework.expression.Expression;
+import org.springframework.security.access.AccessDeniedException;
 import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
 import org.springframework.security.core.Authentication;
 import org.springframework.security.core.authority.AuthorityUtils;
-import org.springframework.security.oauth2.common.exceptions.InsufficientScopeException;
 import org.springframework.security.oauth2.provider.AuthorizationRequest;
 import org.springframework.security.oauth2.provider.OAuth2Authentication;
 import org.springframework.security.oauth2.provider.OAuth2Request;
@@ -64,7 +64,7 @@ public void testScopesWithOr() throws Exception {
 		assertTrue((Boolean) expression.getValue(context));
 	}
 
-	@Test(expected = InsufficientScopeException.class)
+	@Test(expected = AccessDeniedException.class)
 	public void testScopesInsufficient() throws Exception {
 		AuthorizationRequest request = new AuthorizationRequest("foo", Collections.singleton("read"));
 		request.setResourceIdsAndAuthoritiesFromClientDetails(new BaseClientDetails("foo", "bar", "",
@@ -135,7 +135,7 @@ public void testScopesRegex() throws Exception {
 		assertTrue((Boolean) expression.getValue(context));
 	}
 
-	@Test(expected = InsufficientScopeException.class)
+	@Test(expected = AccessDeniedException.class)
 	public void testScopesRegexThrowsException() throws Exception {
 
 		OAuth2Request clientAuthentication = RequestTokenFactory.createOAuth2Request(null, "foo", null, false,

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/expression/OAuth2SecurityExpressionMethodsTests.java
Patch:
@@ -22,10 +22,10 @@
 import java.util.Collections;
 
 import org.junit.Test;
+import org.springframework.security.access.AccessDeniedException;
 import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
 import org.springframework.security.core.Authentication;
 import org.springframework.security.core.authority.SimpleGrantedAuthority;
-import org.springframework.security.oauth2.common.exceptions.InsufficientScopeException;
 import org.springframework.security.oauth2.provider.AuthorizationRequest;
 import org.springframework.security.oauth2.provider.OAuth2Authentication;
 import org.springframework.security.oauth2.provider.OAuth2Request;
@@ -73,7 +73,7 @@ public void testScopesFalse() throws Exception {
 		assertFalse(root.hasAnyScope("write"));
 	}
 
-	@Test(expected = InsufficientScopeException.class)
+	@Test(expected = AccessDeniedException.class)
 	public void testScopesWithException() throws Exception {
 		OAuth2Request clientAuthentication = RequestTokenFactory.createOAuth2Request(null, "foo", null, false, Collections.singleton("read"), null, null, null, null);
 
@@ -84,7 +84,7 @@ public void testScopesWithException() throws Exception {
 		assertFalse(root.throwOnError(hasAnyScope));
 	}
 
-	@Test(expected = InsufficientScopeException.class)
+	@Test(expected = AccessDeniedException.class)
 	public void testInsufficientScope() throws Exception {
 		OAuth2Request clientAuthentication = RequestTokenFactory.createOAuth2Request(null, "foo", null, false, Collections.singleton("read"), null, null, null, null);
 

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/expression/OAuth2WebSecurityExpressionHandlerTests.java
Patch:
@@ -24,10 +24,10 @@
 import org.junit.Test;
 import org.springframework.expression.EvaluationContext;
 import org.springframework.expression.Expression;
+import org.springframework.security.access.AccessDeniedException;
 import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
 import org.springframework.security.core.Authentication;
 import org.springframework.security.core.authority.AuthorityUtils;
-import org.springframework.security.oauth2.common.exceptions.InsufficientScopeException;
 import org.springframework.security.oauth2.provider.AuthorizationRequest;
 import org.springframework.security.oauth2.provider.OAuth2Authentication;
 import org.springframework.security.oauth2.provider.OAuth2Request;
@@ -90,7 +90,7 @@ public void testScopes() throws Exception {
 		assertTrue((Boolean) expression.getValue(handler.createEvaluationContext(oAuth2Authentication, invocation)));
 	}
 
-	@Test(expected = InsufficientScopeException.class)
+	@Test(expected = AccessDeniedException.class)
 	public void testInsufficientScope() throws Exception {
 		AuthorizationRequest request = new AuthorizationRequest("foo", Collections.singleton("read"));
 		request.setResourceIdsAndAuthoritiesFromClientDetails(new BaseClientDetails("foo", "bar", "",

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/http/OAuth2ErrorHandler.java
Patch:
@@ -96,6 +96,8 @@ public synchronized InputStream getBody() throws IOException {
 						InputStream bodyStream = response.getBody();
 						if (bodyStream != null) {
 							lazyBody = FileCopyUtils.copyToByteArray(bodyStream);
+						} else {
+							lazyBody = new byte[0];
 						}
 					}
 					return new ByteArrayInputStream(lazyBody);

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/util/JsonDateDeserializer.java
Patch:
@@ -36,7 +36,9 @@ public class JsonDateDeserializer extends JsonDeserializer<Date> {
 	@Override
 	public Date deserialize(JsonParser parser, DeserializationContext context) throws IOException, JsonProcessingException {
 		try {
-			return dateFormat.parse(parser.getText());
+			synchronized (dateFormat) {				
+				return dateFormat.parse(parser.getText());
+			}
 		}
 		catch (ParseException e) {
 			throw new JsonParseException("Could not parse date", parser.getCurrentLocation(), e);

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/builders/ClientDetailsServiceBuilder.java
Patch:
@@ -25,9 +25,9 @@
 import org.springframework.security.config.annotation.SecurityBuilder;
 import org.springframework.security.config.annotation.SecurityConfigurerAdapter;
 import org.springframework.security.core.authority.AuthorityUtils;
-import org.springframework.security.oauth2.provider.BaseClientDetails;
 import org.springframework.security.oauth2.provider.ClientDetails;
 import org.springframework.security.oauth2.provider.ClientDetailsService;
+import org.springframework.security.oauth2.provider.client.BaseClientDetails;
 
 /**
  * @author Dave Syer

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/builders/InMemoryClientDetailsServiceBuilder.java
Patch:
@@ -20,7 +20,7 @@
 
 import org.springframework.security.oauth2.provider.ClientDetails;
 import org.springframework.security.oauth2.provider.ClientDetailsService;
-import org.springframework.security.oauth2.provider.InMemoryClientDetailsService;
+import org.springframework.security.oauth2.provider.client.InMemoryClientDetailsService;
 
 /**
  * @author Dave Syer

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/builders/JdbcClientDetailsServiceBuilder.java
Patch:
@@ -22,7 +22,7 @@
 
 import org.springframework.security.oauth2.provider.ClientDetails;
 import org.springframework.security.oauth2.provider.ClientDetailsService;
-import org.springframework.security.oauth2.provider.JdbcClientDetailsService;
+import org.springframework.security.oauth2.provider.client.JdbcClientDetailsService;
 import org.springframework.util.Assert;
 
 /**

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/xml/AuthorizationServerBeanDefinitionParser.java
Patch:
@@ -25,8 +25,6 @@
 import org.springframework.beans.factory.xml.ParserContext;
 import org.springframework.security.config.BeanIds;
 import org.springframework.security.oauth2.provider.CompositeTokenGranter;
-import org.springframework.security.oauth2.provider.DefaultOAuth2RequestFactory;
-import org.springframework.security.oauth2.provider.DefaultOAuth2RequestValidator;
 import org.springframework.security.oauth2.provider.approval.DefaultUserApprovalHandler;
 import org.springframework.security.oauth2.provider.client.ClientCredentialsTokenGranter;
 import org.springframework.security.oauth2.provider.code.AuthorizationCodeTokenGranter;
@@ -39,6 +37,8 @@
 import org.springframework.security.oauth2.provider.implicit.InMemoryImplicitGrantService;
 import org.springframework.security.oauth2.provider.password.ResourceOwnerPasswordTokenGranter;
 import org.springframework.security.oauth2.provider.refresh.RefreshTokenGranter;
+import org.springframework.security.oauth2.provider.request.DefaultOAuth2RequestFactory;
+import org.springframework.security.oauth2.provider.request.DefaultOAuth2RequestValidator;
 import org.springframework.util.StringUtils;
 import org.springframework.util.xml.DomUtils;
 import org.w3c.dom.Element;

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/xml/ClientDetailsServiceBeanDefinitionParser.java
Patch:
@@ -23,8 +23,8 @@
 import org.springframework.beans.factory.support.ManagedMap;
 import org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser;
 import org.springframework.beans.factory.xml.ParserContext;
-import org.springframework.security.oauth2.provider.BaseClientDetails;
-import org.springframework.security.oauth2.provider.InMemoryClientDetailsService;
+import org.springframework.security.oauth2.provider.client.BaseClientDetails;
+import org.springframework.security.oauth2.provider.client.InMemoryClientDetailsService;
 import org.springframework.util.StringUtils;
 import org.springframework.util.xml.DomUtils;
 import org.w3c.dom.Element;

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/AbstractEndpoint.java
Patch:
@@ -21,10 +21,10 @@
 import org.springframework.beans.factory.InitializingBean;
 import org.springframework.security.oauth2.provider.OAuth2RequestFactory;
 import org.springframework.security.oauth2.provider.ClientDetailsService;
-import org.springframework.security.oauth2.provider.DefaultOAuth2RequestFactory;
 import org.springframework.security.oauth2.provider.TokenGranter;
 import org.springframework.security.oauth2.provider.error.DefaultWebResponseExceptionTranslator;
 import org.springframework.security.oauth2.provider.error.WebResponseExceptionTranslator;
+import org.springframework.security.oauth2.provider.request.DefaultOAuth2RequestFactory;
 import org.springframework.util.Assert;
 
 /**

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/JwtTokenEnhancer.java
Patch:
@@ -182,7 +182,7 @@ public void afterPropertiesSet() throws Exception {
 			}
 		}
 		else {
-			// Avoid a race condition where
+			// Avoid a race condition where setters are called in the wrong order. Use of == is intentional.
 			Assert.state(this.signingKey == this.verifierKey,
 					"For MAC signing you do not need to specify the verifier key separately, and if you do it must match the signing key");
 		}

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/config/annotation/ResourceServerConfigurationTests.java
Patch:
@@ -25,10 +25,10 @@
 import org.springframework.security.oauth2.common.DefaultOAuth2AccessToken;
 import org.springframework.security.oauth2.common.OAuth2AccessToken;
 import org.springframework.security.oauth2.config.annotation.web.configurers.OAuth2ResourceServerConfigurer;
-import org.springframework.security.oauth2.provider.BaseClientDetails;
 import org.springframework.security.oauth2.provider.ClientDetails;
 import org.springframework.security.oauth2.provider.OAuth2Authentication;
 import org.springframework.security.oauth2.provider.TokenRequest;
+import org.springframework.security.oauth2.provider.client.BaseClientDetails;
 import org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler;
 import org.springframework.security.oauth2.provider.expression.OAuth2WebSecurityExpressionHandler;
 import org.springframework.security.oauth2.provider.token.InMemoryTokenStore;

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/approval/ApprovalStoreUserApprovalHandlerTests.java
Patch:
@@ -18,10 +18,10 @@
 import org.springframework.security.core.Authentication;
 import org.springframework.security.core.authority.AuthorityUtils;
 import org.springframework.security.oauth2.provider.AuthorizationRequest;
-import org.springframework.security.oauth2.provider.BaseClientDetails;
 import org.springframework.security.oauth2.provider.ClientDetails;
-import org.springframework.security.oauth2.provider.DefaultOAuth2RequestFactory;
-import org.springframework.security.oauth2.provider.InMemoryClientDetailsService;
+import org.springframework.security.oauth2.provider.client.BaseClientDetails;
+import org.springframework.security.oauth2.provider.client.InMemoryClientDetailsService;
+import org.springframework.security.oauth2.provider.request.DefaultOAuth2RequestFactory;
 
 public class ApprovalStoreUserApprovalHandlerTests {
 

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/approval/TokenStoreUserApprovalHandlerTests.java
Patch:
@@ -20,9 +20,9 @@
 import org.springframework.security.authentication.AbstractAuthenticationToken;
 import org.springframework.security.oauth2.common.util.OAuth2Utils;
 import org.springframework.security.oauth2.provider.AuthorizationRequest;
-import org.springframework.security.oauth2.provider.DefaultOAuth2RequestFactory;
 import org.springframework.security.oauth2.provider.OAuth2Authentication;
 import org.springframework.security.oauth2.provider.OAuth2Request;
+import org.springframework.security.oauth2.provider.request.DefaultOAuth2RequestFactory;
 import org.springframework.security.oauth2.provider.token.DefaultTokenServices;
 import org.springframework.security.oauth2.provider.token.InMemoryTokenStore;
 

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/client/BaseClientDetailsTests.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.security.oauth2.provider;
+package org.springframework.security.oauth2.provider.client;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
@@ -24,6 +24,7 @@
 
 import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.Test;
+import org.springframework.security.oauth2.provider.client.BaseClientDetails;
 import org.springframework.util.StringUtils;
 
 /**

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/code/AuthorizationCodeTokenGranterTests.java
Patch:
@@ -26,15 +26,15 @@
 import org.springframework.security.oauth2.common.exceptions.OAuth2Exception;
 import org.springframework.security.oauth2.common.exceptions.RedirectMismatchException;
 import org.springframework.security.oauth2.common.util.OAuth2Utils;
-import org.springframework.security.oauth2.provider.BaseClientDetails;
 import org.springframework.security.oauth2.provider.ClientDetails;
 import org.springframework.security.oauth2.provider.ClientDetailsService;
-import org.springframework.security.oauth2.provider.DefaultOAuth2RequestFactory;
 import org.springframework.security.oauth2.provider.OAuth2Authentication;
 import org.springframework.security.oauth2.provider.OAuth2Request;
 import org.springframework.security.oauth2.provider.OAuth2RequestFactory;
 import org.springframework.security.oauth2.provider.RequestTokenFactory;
 import org.springframework.security.oauth2.provider.TokenRequest;
+import org.springframework.security.oauth2.provider.client.BaseClientDetails;
+import org.springframework.security.oauth2.provider.request.DefaultOAuth2RequestFactory;
 import org.springframework.security.oauth2.provider.token.DefaultTokenServices;
 import org.springframework.security.oauth2.provider.token.InMemoryTokenStore;
 

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/code/SubdomainRedirectResolverTests.java
Patch:
@@ -9,7 +9,7 @@
 
 import org.junit.Test;
 import org.springframework.security.oauth2.common.exceptions.RedirectMismatchException;
-import org.springframework.security.oauth2.provider.BaseClientDetails;
+import org.springframework.security.oauth2.provider.client.BaseClientDetails;
 import org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolver;
 
 public class SubdomainRedirectResolverTests

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/endpoint/DefaultRedirectResolverTests.java
Patch:
@@ -22,7 +22,7 @@
 import org.junit.Test;
 import org.springframework.security.oauth2.common.exceptions.InvalidGrantException;
 import org.springframework.security.oauth2.common.exceptions.RedirectMismatchException;
-import org.springframework.security.oauth2.provider.BaseClientDetails;
+import org.springframework.security.oauth2.provider.client.BaseClientDetails;
 import org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolver;
 
 /**

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/endpoint/ExactMatchRedirectResolverTests.java
Patch:
@@ -22,7 +22,7 @@
 import org.junit.Test;
 import org.springframework.security.oauth2.common.exceptions.OAuth2Exception;
 import org.springframework.security.oauth2.common.exceptions.RedirectMismatchException;
-import org.springframework.security.oauth2.provider.BaseClientDetails;
+import org.springframework.security.oauth2.provider.client.BaseClientDetails;
 import org.springframework.security.oauth2.provider.endpoint.ExactMatchRedirectResolver;
 
 /**

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/endpoint/TokenEndpointAuthenticationFilterTests.java
Patch:
@@ -33,11 +33,11 @@
 import org.springframework.security.core.context.SecurityContextHolder;
 import org.springframework.security.oauth2.common.exceptions.OAuth2Exception;
 import org.springframework.security.oauth2.provider.OAuth2RequestFactory;
-import org.springframework.security.oauth2.provider.BaseClientDetails;
 import org.springframework.security.oauth2.provider.ClientDetails;
 import org.springframework.security.oauth2.provider.ClientDetailsService;
-import org.springframework.security.oauth2.provider.DefaultOAuth2RequestFactory;
 import org.springframework.security.oauth2.provider.OAuth2Authentication;
+import org.springframework.security.oauth2.provider.client.BaseClientDetails;
+import org.springframework.security.oauth2.provider.request.DefaultOAuth2RequestFactory;
 
 /**
  * @author Dave Syer

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/endpoint/TokenEndpointTests.java
Patch:
@@ -41,12 +41,12 @@
 import org.springframework.security.oauth2.common.OAuth2AccessToken;
 import org.springframework.security.oauth2.common.exceptions.InvalidGrantException;
 import org.springframework.security.oauth2.common.util.OAuth2Utils;
-import org.springframework.security.oauth2.provider.BaseClientDetails;
 import org.springframework.security.oauth2.provider.ClientDetails;
 import org.springframework.security.oauth2.provider.ClientDetailsService;
 import org.springframework.security.oauth2.provider.OAuth2RequestFactory;
 import org.springframework.security.oauth2.provider.TokenGranter;
 import org.springframework.security.oauth2.provider.TokenRequest;
+import org.springframework.security.oauth2.provider.client.BaseClientDetails;
 
 /**
  * @author Dave Syer
@@ -148,6 +148,7 @@ public void testImplicitGrant() {
 		HashMap<String, String> parameters = new HashMap<String, String>();
 		parameters.put(OAuth2Utils.GRANT_TYPE, "implicit");
 		parameters.put("client_id", clientId);
+		parameters.put("scope", "read");
 		@SuppressWarnings("unchecked")
 		Map<String, String> anyMap = Mockito.any(Map.class);
 		when(authorizationRequestFactory.createTokenRequest(anyMap, Mockito.eq(clientDetails))).thenReturn(

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/endpoint/WhitelabelApprovalEndpointTests.java
Patch:
@@ -55,7 +55,7 @@ public void testApprovalPage() throws Exception {
 		parameters.put("client_id", "client");
 		HashMap<String, Object> model = new HashMap<String, Object>();
 		model.put("authorizationRequest", createFromParameters(parameters));
-		ModelAndView result = endpoint.getAccessConfirmation(model);
+		ModelAndView result = endpoint.getAccessConfirmation(model, request);
 		result.getView().render(result.getModel(), request , response);
 		String content = response.getContentAsString();
 		assertTrue("Wrong content: " + content, content.contains("<form"));

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/expression/OAuth2MethodSecurityExpressionHandlerTests.java
Patch:
@@ -29,10 +29,10 @@
 import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
 import org.springframework.security.core.Authentication;
 import org.springframework.security.oauth2.provider.AuthorizationRequest;
-import org.springframework.security.oauth2.provider.BaseClientDetails;
 import org.springframework.security.oauth2.provider.OAuth2Authentication;
 import org.springframework.security.oauth2.provider.OAuth2Request;
 import org.springframework.security.oauth2.provider.RequestTokenFactory;
+import org.springframework.security.oauth2.provider.client.BaseClientDetails;
 import org.springframework.security.util.SimpleMethodInvocation;
 import org.springframework.util.ReflectionUtils;
 

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/expression/OAuth2SecurityExpressionMethodsTests.java
Patch:
@@ -26,11 +26,11 @@
 import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
 import org.springframework.security.core.Authentication;
 import org.springframework.security.core.authority.SimpleGrantedAuthority;
-import org.springframework.security.oauth2.provider.BaseClientDetails;
 import org.springframework.security.oauth2.provider.OAuth2Authentication;
 import org.springframework.security.oauth2.provider.AuthorizationRequest;
 import org.springframework.security.oauth2.provider.RequestTokenFactory;
 import org.springframework.security.oauth2.provider.OAuth2Request;
+import org.springframework.security.oauth2.provider.client.BaseClientDetails;
 
 /**
  * @author Dave Syer

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/expression/OAuth2WebSecurityExpressionHandlerTests.java
Patch:
@@ -25,11 +25,11 @@
 import org.springframework.expression.Expression;
 import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
 import org.springframework.security.core.Authentication;
-import org.springframework.security.oauth2.provider.BaseClientDetails;
 import org.springframework.security.oauth2.provider.OAuth2Authentication;
 import org.springframework.security.oauth2.provider.AuthorizationRequest;
 import org.springframework.security.oauth2.provider.RequestTokenFactory;
 import org.springframework.security.oauth2.provider.OAuth2Request;
+import org.springframework.security.oauth2.provider.client.BaseClientDetails;
 import org.springframework.security.web.FilterInvocation;
 
 /**

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/implicit/InMemoryImplicitGrantServiceTests.java
Patch:
@@ -18,10 +18,10 @@
 import java.util.Collections;
 
 import org.junit.Test;
-import org.springframework.security.oauth2.provider.BaseClientDetails;
 import org.springframework.security.oauth2.provider.ClientDetails;
 import org.springframework.security.oauth2.provider.OAuth2Request;
 import org.springframework.security.oauth2.provider.TokenRequest;
+import org.springframework.security.oauth2.provider.client.BaseClientDetails;
 
 /**
  * @author Dave Syer

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/password/ResourceOwnerPasswordTokenGranterTests.java
Patch:
@@ -31,13 +31,13 @@
 import org.springframework.security.oauth2.common.exceptions.InvalidClientException;
 import org.springframework.security.oauth2.common.exceptions.InvalidGrantException;
 import org.springframework.security.oauth2.common.exceptions.OAuth2Exception;
-import org.springframework.security.oauth2.provider.BaseClientDetails;
 import org.springframework.security.oauth2.provider.ClientDetails;
 import org.springframework.security.oauth2.provider.ClientDetailsService;
-import org.springframework.security.oauth2.provider.DefaultOAuth2RequestFactory;
 import org.springframework.security.oauth2.provider.OAuth2Authentication;
 import org.springframework.security.oauth2.provider.OAuth2RequestFactory;
 import org.springframework.security.oauth2.provider.TokenRequest;
+import org.springframework.security.oauth2.provider.client.BaseClientDetails;
+import org.springframework.security.oauth2.provider.request.DefaultOAuth2RequestFactory;
 import org.springframework.security.oauth2.provider.token.DefaultTokenServices;
 import org.springframework.security.oauth2.provider.token.InMemoryTokenStore;
 

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/AbstractTestDefaultTokenServices.java
Patch:
@@ -19,12 +19,12 @@
 import org.springframework.security.oauth2.common.OAuth2RefreshToken;
 import org.springframework.security.oauth2.common.exceptions.InvalidGrantException;
 import org.springframework.security.oauth2.common.exceptions.OAuth2Exception;
-import org.springframework.security.oauth2.provider.BaseClientDetails;
 import org.springframework.security.oauth2.provider.ClientDetails;
 import org.springframework.security.oauth2.provider.ClientDetailsService;
 import org.springframework.security.oauth2.provider.OAuth2Authentication;
 import org.springframework.security.oauth2.provider.RequestTokenFactory;
 import org.springframework.security.oauth2.provider.TokenRequest;
+import org.springframework.security.oauth2.provider.client.BaseClientDetails;
 
 /**
  * @author Dave Syer

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/DefaultTokenServicesWithInMemoryTests.java
Patch:
@@ -19,12 +19,12 @@
 import org.springframework.security.oauth2.common.OAuth2RefreshToken;
 import org.springframework.security.oauth2.common.exceptions.InvalidTokenException;
 import org.springframework.security.oauth2.common.exceptions.OAuth2Exception;
-import org.springframework.security.oauth2.provider.BaseClientDetails;
 import org.springframework.security.oauth2.provider.ClientDetails;
 import org.springframework.security.oauth2.provider.ClientDetailsService;
 import org.springframework.security.oauth2.provider.OAuth2Authentication;
 import org.springframework.security.oauth2.provider.RequestTokenFactory;
 import org.springframework.security.oauth2.provider.TokenRequest;
+import org.springframework.security.oauth2.provider.client.BaseClientDetails;
 import org.springframework.test.util.ReflectionTestUtils;
 
 /**

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/JwtTokenServicesTests.java
Patch:
@@ -35,12 +35,12 @@
 import org.springframework.security.oauth2.common.OAuth2RefreshToken;
 import org.springframework.security.oauth2.common.exceptions.InvalidGrantException;
 import org.springframework.security.oauth2.common.exceptions.OAuth2Exception;
-import org.springframework.security.oauth2.provider.BaseClientDetails;
 import org.springframework.security.oauth2.provider.ClientDetails;
 import org.springframework.security.oauth2.provider.ClientDetailsService;
 import org.springframework.security.oauth2.provider.OAuth2Authentication;
 import org.springframework.security.oauth2.provider.OAuth2Request;
 import org.springframework.security.oauth2.provider.TokenRequest;
+import org.springframework.security.oauth2.provider.client.BaseClientDetails;
 import org.springframework.test.util.ReflectionTestUtils;
 
 /**

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/vote/ClientScopeVoterTests.java
Patch:
@@ -15,9 +15,9 @@
 import org.springframework.security.core.Authentication;
 import org.springframework.security.core.authority.AuthorityUtils;
 import org.springframework.security.oauth2.provider.AuthorizationRequest;
-import org.springframework.security.oauth2.provider.BaseClientDetails;
-import org.springframework.security.oauth2.provider.InMemoryClientDetailsService;
 import org.springframework.security.oauth2.provider.OAuth2Authentication;
+import org.springframework.security.oauth2.provider.client.BaseClientDetails;
+import org.springframework.security.oauth2.provider.client.InMemoryClientDetailsService;
 
 public class ClientScopeVoterTests {
 

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/web/configurers/OAuth2ResourceServerConfigurer.java
Patch:
@@ -115,8 +115,6 @@ public OAuth2ResourceServerConfigurer resourceId(String resourceId) {
 		return this;
 	}
 
-
-
 	@Override
 	public void configure(HttpSecurity http) throws Exception {
 

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/web/configuration/ResourceServerConfiguration.java
Patch:
@@ -101,7 +101,7 @@ protected void configure(HttpSecurity http) throws Exception {
 		// @formatter:off	
 		http
 			.authorizeRequests().expressionHandler(new OAuth2WebSecurityExpressionHandler())
-			.anyRequest().authenticated()
+			// .anyRequest().authenticated()
 		.and()
 			.exceptionHandling().accessDeniedHandler(accessDeniedHandler)
 		.and()

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/AuthorizationEndpoint.java
Patch:
@@ -87,7 +87,6 @@
  */
 @FrameworkEndpoint
 @SessionAttributes("authorizationRequest")
-@RequestMapping(value = "/oauth/authorize")
 public class AuthorizationEndpoint extends AbstractEndpoint {
 
 	private AuthorizationCodeServices authorizationCodeServices = new InMemoryAuthorizationCodeServices();
@@ -114,7 +113,7 @@ public void setErrorPage(String errorPage) {
 		this.errorPage = errorPage;
 	}
 
-	@RequestMapping
+	@RequestMapping(value = "/oauth/authorize")
 	public ModelAndView authorize(Map<String, Object> model, @RequestParam
 	Map<String, String> parameters, SessionStatus sessionStatus, Principal principal) {
 
@@ -190,7 +189,7 @@ public ModelAndView authorize(Map<String, Object> model, @RequestParam
 
 	}
 
-	@RequestMapping(method = RequestMethod.POST, params = OAuth2Utils.USER_OAUTH_APPROVAL)
+	@RequestMapping(value = "/oauth/authorize", method = RequestMethod.POST, params = OAuth2Utils.USER_OAUTH_APPROVAL)
 	public View approveOrDeny(@RequestParam
 	Map<String, String> approvalParameters, Map<String, ?> model, SessionStatus sessionStatus, Principal principal) {
 

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/TokenEndpoint.java
Patch:
@@ -62,12 +62,11 @@
  * 
  */
 @FrameworkEndpoint
-@RequestMapping(value = "/oauth/token")
 public class TokenEndpoint extends AbstractEndpoint {
 
 	private OAuth2RequestValidator oAuth2RequestValidator = new DefaultOAuth2RequestValidator();
 
-	@RequestMapping
+	@RequestMapping(value = "/oauth/token")
 	public ResponseEntity<OAuth2AccessToken> getAccessToken(Principal principal, @RequestParam
 	Map<String, String> parameters) {
 

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/JwtTokenServices.java
Patch:
@@ -61,7 +61,7 @@ public class JwtTokenServices implements AuthorizationServerTokenServices, Resou
 
 	private int accessTokenValiditySeconds = 60 * 60 * 12; // default 12 hours.
 
-	private boolean supportRefreshToken = false;
+	private boolean supportRefreshToken = true;
 
 	private boolean reuseRefreshToken = true;
 

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/JwtTokenServicesTests.java
Patch:
@@ -59,7 +59,6 @@ public void init() throws Exception {
 		services.setSigningKey("FOO");
 		services.afterPropertiesSet();
 		enhancer = (JwtTokenEnhancer) ReflectionTestUtils.getField(services, "jwtTokenEnhancer");
-		services.setSupportRefreshToken(true);
 	}
 
 	@Test

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/web/configuration/AuthorizationServerConfiguration.java
Patch:
@@ -106,14 +106,14 @@ public AuthorizationEndpoint authorizationEndpoint() throws Exception {
 		authorizationEndpoint.setClientDetailsService(clientDetailsService);
 		authorizationEndpoint.setAuthorizationCodeServices(authorizationCodeServices());
 		authorizationEndpoint.setUserApprovalHandler(userApprovalHandler());
-		authorizationEndpoint.setImplicitGrantService(getImplicitGrantService());
+		authorizationEndpoint.setImplicitGrantService(implicitGrantService());
 		return authorizationEndpoint;
 	}
 
 	@Bean
 	@Lazy
 	@Scope(proxyMode = ScopedProxyMode.INTERFACES)
-	public ImplicitGrantService getImplicitGrantService() throws Exception {
+	public ImplicitGrantService implicitGrantService() throws Exception {
 		return authorizationServerConfigurer().getImplicitGrantService();
 	}
 

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/JwtTokenEnhancer.java
Patch:
@@ -148,9 +148,9 @@ protected String encode(OAuth2AccessToken accessToken, OAuth2Authentication auth
 	}
 
 	protected Map<String, Object> decode(String token) {
-		Jwt jwt = JwtHelper.decodeAndVerify(token, verifier);
-		String content = jwt.getClaims();
 		try {
+			Jwt jwt = JwtHelper.decodeAndVerify(token, verifier);
+			String content = jwt.getClaims();
 			@SuppressWarnings("unchecked")
 			Map<String, Object> map = objectMapper.readValue(content, Map.class);
 			return map;

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/JwtTokenServices.java
Patch:
@@ -86,7 +86,7 @@ public void setReuseRefreshToken(boolean reuseRefreshToken) {
 	}
 
 	/**
-	 * An access token enhancer that will be applied to a new token before it is saved in the token store.
+	 * An access token enhancer that will be applied to a new token before it is issued.
 	 * 
 	 * @param accessTokenEnhancer the access token enhancer to set
 	 */

File: samples/oauth2/sparklr/src/main/java/org/springframework/security/oauth/examples/sparklr/config/OAuth2ServerConfig.java
Patch:
@@ -37,7 +37,6 @@
 import org.springframework.security.oauth2.provider.OAuth2RequestFactory;
 import org.springframework.security.oauth2.provider.approval.ApprovalStore;
 import org.springframework.security.oauth2.provider.approval.TokenApprovalStore;
-import org.springframework.security.oauth2.provider.expression.OAuth2WebSecurityExpressionHandler;
 import org.springframework.security.oauth2.provider.token.InMemoryTokenStore;
 import org.springframework.security.oauth2.provider.token.TokenStore;
 
@@ -58,7 +57,6 @@ protected void configure(HttpSecurity http) throws Exception {
 			// @formatter:off
 			http
 			.authorizeRequests()
-				.expressionHandler(new OAuth2WebSecurityExpressionHandler())
 				.antMatchers("/photos").access("hasRole('ROLE_USER')")
 				.antMatchers("/photos/trusted/**").access("hasRole('ROLE_USER')")
 				.antMatchers("/photos/user/**").access("hasRole('ROLE_USER')")
@@ -83,7 +81,6 @@ public void configure(HttpSecurity http) throws Exception {
 			// @formatter:off
 			http
 				.authorizeRequests()
-					.expressionHandler(new OAuth2WebSecurityExpressionHandler())
 					.antMatchers("/photos").access("#oauth2.hasScope('read')")
 					.antMatchers("/photos/trusted/**").access("#oauth2.hasScope('trust')")
 					.antMatchers("/photos/user/**").access("#oauth2.hasScope('trust')")

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/web/configuration/AuthorizationServerConfiguration.java
Patch:
@@ -163,7 +163,7 @@ public WhitelabelApprovalEndpoint approvalEndpoint() {
 	}
 
 	@Bean
-	public FrameworkEndpointHandlerMapping endpointHandlerMapping() {
+	public FrameworkEndpointHandlerMapping oauth2EndpointHandlerMapping() {
 		return new FrameworkEndpointHandlerMapping();
 	}
 

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/web/configurers/OAuth2AuthorizationServerConfigurer.java
Patch:
@@ -244,6 +244,8 @@ private UserApprovalHandler userApprovalHandler() {
 			TokenStoreUserApprovalHandler userApprovalHandler = new TokenStoreUserApprovalHandler();
 			userApprovalHandler.setTokenStore(tokenStore());
 			userApprovalHandler.setClientDetailsService(clientDetails());
+			userApprovalHandler.setRequestFactory(new DefaultOAuth2RequestFactory(clientDetailsService()));
+			this.userApprovalHandler = userApprovalHandler;
 		}
 		return this.userApprovalHandler;
 	}

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/config/annotation/AuthorizationServerConfigurationTests.java
Patch:
@@ -45,6 +45,7 @@
 import org.springframework.security.oauth2.provider.token.InMemoryTokenStore;
 import org.springframework.security.oauth2.provider.token.JdbcTokenStore;
 import org.springframework.security.oauth2.provider.token.TokenStore;
+import org.springframework.test.util.ReflectionTestUtils;
 import org.springframework.web.context.support.AnnotationConfigWebApplicationContext;
 
 /**
@@ -138,6 +139,7 @@ public void configure(ClientDetailsServiceConfigurer clients) throws Exception {
 		public void run() {
 			assertNotNull(context.getBean("clientDetailsService", ClientDetailsService.class).loadClientByClientId(
 					"my-trusted-client"));
+			assertNotNull(ReflectionTestUtils.getField(context.getBean(AuthorizationEndpoint.class), "userApprovalHandler"));
 		}
 
 	}

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/DefaultRedirectResolver.java
Patch:
@@ -115,7 +115,7 @@ protected boolean redirectMatches(String requestedRedirect, String redirectUri)
 			URL reg = new URL(redirectUri);
 
 			if (reg.getProtocol().equals(req.getProtocol()) && hostMatches(reg.getHost(), req.getHost())) {
-				return req.getPath().startsWith(reg.getPath());
+				return StringUtils.cleanPath(req.getPath()).startsWith(StringUtils.cleanPath(reg.getPath()));
 			}
 		}
 		catch (MalformedURLException e) {

File: samples/oauth2/sparklr/src/test/java/org/springframework/security/oauth2/provider/AdminEndpointsTests.java
Patch:
@@ -27,7 +27,7 @@
 /**
  * @author Dave Syer
  */
-public class TestAdminEndpoints {
+public class AdminEndpointsTests {
 
 	@Rule
 	public ServerRunning serverRunning = ServerRunning.isRunning();
@@ -128,7 +128,7 @@ public ResourceOwnerReadOnly(Object target) {
 			setScope(Arrays.asList("read"));
 			setUsername("marissa");
 			setPassword("koala");
-			TestAdminEndpoints test = (TestAdminEndpoints) target;
+			AdminEndpointsTests test = (AdminEndpointsTests) target;
 			setAccessTokenUri(test.serverRunning.getUrl("/sparklr2/oauth/token"));
 		}
 	}
@@ -138,7 +138,7 @@ public ClientCredentialsReadOnly(Object target) {
 			setClientId("my-client-with-registered-redirect");
 			setId(getClientId());
 			setScope(Arrays.asList("read"));
-			TestAdminEndpoints test = (TestAdminEndpoints) target;
+			AdminEndpointsTests test = (AdminEndpointsTests) target;
 			setAccessTokenUri(test.serverRunning.getUrl("/sparklr2/oauth/token"));
 		}
 	}

File: samples/oauth2/sparklr/src/test/java/org/springframework/security/oauth2/provider/AuthorizationCodeProviderTests.java
Patch:
@@ -54,7 +54,7 @@
  * @author Dave Syer
  * @author Luke Taylor
  */
-public class TestAuthorizationCodeProvider {
+public class AuthorizationCodeProviderTests {
 
 	@Rule
 	public ServerRunning serverRunning = ServerRunning.isRunning();
@@ -455,7 +455,7 @@ public MyLessTrustedClient(Object target) {
 			setClientId("my-less-trusted-client");
 			setScope(Arrays.asList("read"));
 			setId(getClientId());
-			TestAuthorizationCodeProvider test = (TestAuthorizationCodeProvider) target;
+			AuthorizationCodeProviderTests test = (AuthorizationCodeProviderTests) target;
 			setAccessTokenUri(test.serverRunning.getUrl("/sparklr2/oauth/token"));
 			setUserAuthorizationUri(test.serverRunning.getUrl("/sparklr2/oauth/authorize"));
 		}

File: samples/oauth2/sparklr/src/test/java/org/springframework/security/oauth2/provider/ClientCredentialsProviderTests.java
Patch:
@@ -27,7 +27,7 @@
  * @author Ryan Heaton
  * @author Dave Syer
  */
-public class TestClientCredentialsProvider {
+public class ClientCredentialsProviderTests {
 
 	@Rule
 	public ServerRunning serverRunning = ServerRunning.isRunning();
@@ -131,7 +131,7 @@ public ClientCredentials(Object target) {
 			setClientId("my-client-with-registered-redirect");
 			setScope(Arrays.asList("read"));
 			setId(getClientId());
-			TestClientCredentialsProvider test = (TestClientCredentialsProvider) target;
+			ClientCredentialsProviderTests test = (ClientCredentialsProviderTests) target;
 			setAccessTokenUri(test.serverRunning.getUrl("/sparklr2/oauth/token"));
 			test.resource = this;
 		}
@@ -148,7 +148,7 @@ static class NoScopeClientCredentials extends ClientCredentialsResourceDetails {
 		public NoScopeClientCredentials(Object target) {
 			setClientId("my-client-with-registered-redirect");
 			setId(getClientId());
-			TestClientCredentialsProvider test = (TestClientCredentialsProvider) target;
+			ClientCredentialsProviderTests test = (ClientCredentialsProviderTests) target;
 			setAccessTokenUri(test.serverRunning.getUrl("/sparklr2/oauth/token"));
 		}
 	}

File: samples/oauth2/sparklr/src/test/java/org/springframework/security/oauth2/provider/ImplicitProviderTests.java
Patch:
@@ -33,7 +33,7 @@
  * @author Ryan Heaton
  * @author Dave Syer
  */
-public class TestImplicitProvider {
+public class ImplicitProviderTests {
 
 	@Rule
 	public ServerRunning serverRunning = ServerRunning.isRunning();
@@ -119,7 +119,7 @@ public AutoApproveImplicit(Object target) {
 			setClientId("my-less-trusted-autoapprove-client");
 			setId(getClientId());
 			setPreEstablishedRedirectUri("http://anywhere");
-			TestImplicitProvider test = (TestImplicitProvider) target;
+			ImplicitProviderTests test = (ImplicitProviderTests) target;
 			setAccessTokenUri(test.serverRunning.getUrl("/sparklr2/oauth/authorize"));
 			setUserAuthorizationUri(test.serverRunning.getUrl("/sparklr2/oauth/authorize"));
 		}

File: samples/oauth2/sparklr/src/test/java/org/springframework/security/oauth2/provider/RefreshTokenSupportTests.java
Patch:
@@ -21,7 +21,7 @@
  * @author Ryan Heaton
  * @author Dave Syer
  */
-public class TestRefreshTokenSupport {
+public class RefreshTokenSupportTests {
 
 	@Rule
 	public ServerRunning serverRunning = ServerRunning.isRunning();

File: samples/oauth2/sparklr/src/test/java/org/springframework/security/oauth2/provider/ResourceOwnerPasswordProviderTests.java
Patch:
@@ -34,7 +34,7 @@
  * @author Ryan Heaton
  * @author Dave Syer
  */
-public class TestResourceOwnerPasswordProvider {
+public class ResourceOwnerPasswordProviderTests {
 
 	@Rule
 	public ServerRunning serverRunning = ServerRunning.isRunning();
@@ -226,7 +226,7 @@ public ResourceOwner(Object target) {
 			setId(getClientId());
 			setUsername("marissa");
 			setPassword("koala");
-			TestResourceOwnerPasswordProvider test = (TestResourceOwnerPasswordProvider) target;
+			ResourceOwnerPasswordProviderTests test = (ResourceOwnerPasswordProviderTests) target;
 			setAccessTokenUri(test.serverRunning.getUrl("/sparklr2/oauth/token"));
 		}
 	}

File: samples/oauth2/tonr/src/test/java/org/springframework/security/oauth/examples/tonr/AuthorizationCodeGrantTests.java
Patch:
@@ -29,7 +29,7 @@
  * @author Ryan Heaton
  * @author Dave Syer
  */
-public class TestAuthorizationCodeGrant {
+public class AuthorizationCodeGrantTests {
 
 	@Rule
 	public ServerRunning serverRunning = ServerRunning.isRunning();

File: samples/oauth2/tonr/src/test/java/org/springframework/security/oauth/examples/tonr/ClientCredentialsGrantTests.java
Patch:
@@ -19,7 +19,7 @@
  * @author Ryan Heaton
  * @author Dave Syer
  */
-public class TestClientCredentialsGrant {
+public class ClientCredentialsGrantTests {
 
 	@Rule
 	public ServerRunning serverRunning = ServerRunning.isRunning();

File: samples/oauth2/tonr/src/test/java/org/springframework/security/oauth/examples/tonr/RefreshTokenGrantTests.java
Patch:
@@ -26,7 +26,7 @@
 /**
  * @author Dave Syer
  */
-public class TestRefreshTokenGrant {
+public class RefreshTokenGrantTests {
 
 	@Rule
 	public ServerRunning serverRunning = ServerRunning.isRunning();

File: samples/oauth2/tonr/src/test/java/org/springframework/security/oauth/examples/tonr/ResourceOwnerPasswordGrantTests.java
Patch:
@@ -13,7 +13,7 @@
 /**
  * @author Dave Syer
  */
-public class TestResourceOwnerPasswordGrant {
+public class ResourceOwnerPasswordGrantTests {
 
 	@Rule
 	public ServerRunning serverRunning = ServerRunning.isRunning();

File: spring-security-oauth/src/test/java/net/oauth/signature/GoogleCodeCompatibilityTests.java
Patch:
@@ -43,7 +43,7 @@
  * @author Dave Syer
  */
 @RunWith(MockitoJUnitRunner.class)
-public class TestGoogleCodeCompatibility {
+public class GoogleCodeCompatibilityTests {
 	@Mock
 	private HttpServletRequest request;
 

File: spring-security-oauth/src/test/java/org/springframework/security/oauth/common/OAuthCodecTests.java
Patch:
@@ -24,7 +24,7 @@
 /**
  * @author Ryan Heaton
  */
-public class TestOAuthCodec {
+public class OAuthCodecTests {
 
 	/**
 	 * tests idempotent decode.

File: spring-security-oauth/src/test/java/org/springframework/security/oauth/common/signature/CoreOAuthSignatureMethodFactoryTests.java
Patch:
@@ -32,7 +32,7 @@
 /**
  * @author Ryan Heaton
  */
-public class TestCoreOAuthSignatureMethodFactory {
+public class CoreOAuthSignatureMethodFactoryTests {
 
 	/**
 	 * tests getting the signature method.

File: spring-security-oauth/src/test/java/org/springframework/security/oauth/common/signature/HMAC_SHA1SignatureMethodTests.java
Patch:
@@ -25,7 +25,7 @@
 /**
  * @author Ryan Heaton
  */
-public class TestHMAC_SHA1SignatureMethod {
+public class HMAC_SHA1SignatureMethodTests {
 
 	/**
 	 * Test sign and verify.

File: spring-security-oauth/src/test/java/org/springframework/security/oauth/common/signature/PlainTextSignatureMethodTests.java
Patch:
@@ -21,7 +21,7 @@
 /**
  * @author Ryan Heaton
  */
-public class TestPlainTextSignatureMethod {
+public class PlainTextSignatureMethodTests {
 
 	/**
 	 * tests signing and verifying.

File: spring-security-oauth/src/test/java/org/springframework/security/oauth/common/signature/RSA_SHA1SignatureMethodTests.java
Patch:
@@ -31,7 +31,7 @@
 /**
  * @author Ryan Heaton
  */
-public class TestRSA_SHA1SignatureMethod {
+public class RSA_SHA1SignatureMethodTests {
 
 	/**
 	 * tests signing and verifying.

File: spring-security-oauth/src/test/java/org/springframework/security/oauth/config/AuthorizationServerBeanDefinitionParserTests.java
Patch:
@@ -34,7 +34,7 @@
 
 @ContextConfiguration
 @RunWith(SpringJUnit4ClassRunner.class)
-public class TestAuthorizationServerBeanDefinitionParser {
+public class AuthorizationServerBeanDefinitionParserTests {
 
   @Autowired
   private UserAuthorizationProcessingFilter filter;

File: spring-security-oauth/src/test/java/org/springframework/security/oauth/config/ConsumerServiceBeanDefinitionParserTests.java
Patch:
@@ -14,7 +14,7 @@
 
 @ContextConfiguration
 @RunWith(SpringJUnit4ClassRunner.class)
-public class TestConsumerServiceBeanDefinitionParser {
+public class ConsumerServiceBeanDefinitionParserTests {
 
 	@Autowired
 	private ConsumerDetailsService clientDetailsService;

File: spring-security-oauth/src/test/java/org/springframework/security/oauth/config/FilterChainInitializationTests.java
Patch:
@@ -14,7 +14,7 @@
 
 @ContextConfiguration
 @RunWith(SpringJUnit4ClassRunner.class)
-public class TestFilterChainInitialization {
+public class FilterChainInitializationTests {
 
 	@Autowired
 	private ConsumerDetailsService clientDetailsService;

File: spring-security-oauth/src/test/java/org/springframework/security/oauth/consumer/GoogleOAuthTests.java
Patch:
@@ -11,7 +11,7 @@
 /**
  * @author Ryan Heaton
  */
-public class TestGoogleOAuth {
+public class GoogleOAuthTests {
 
 	/**
 	 * tests getting a request token.

File: spring-security-oauth/src/test/java/org/springframework/security/oauth/consumer/client/CoreOAuthConsumerSupportTests.java
Patch:
@@ -69,7 +69,7 @@
  */
 @SuppressWarnings("restriction")
 @RunWith(MockitoJUnitRunner.class)
-public class TestCoreOAuthConsumerSupport {
+public class CoreOAuthConsumerSupportTests {
 	@Mock
 	private ProtectedResourceDetails details;
 

File: spring-security-oauth/src/test/java/org/springframework/security/oauth/consumer/filter/OAuthConsumerContextFilterTests.java
Patch:
@@ -36,7 +36,7 @@
  * @author Ryan Heaton
  */
 @RunWith(MockitoJUnitRunner.class)
-public class TestOAuthConsumerContextFilter {
+public class OAuthConsumerContextFilterTests {
 	@Mock
 	private ProtectedResourceDetails details;
 	@Mock

File: spring-security-oauth/src/test/java/org/springframework/security/oauth/consumer/rememberme/HttpSessionOAuthRememberMeServicesTests.java
Patch:
@@ -29,7 +29,7 @@
 /**
  * @author Alex Rau
  */
-public class TestHttpSessionOAuthRememberMeServices {
+public class HttpSessionOAuthRememberMeServicesTests {
 
 	@Test
 	public void testEmptySession() {

File: spring-security-oauth/src/test/java/org/springframework/security/oauth/provider/CoreOAuthProviderSupportTests.java
Patch:
@@ -37,7 +37,7 @@
  * @author Ryan Heaton
  */
 @RunWith(MockitoJUnitRunner.class)
-public class TestCoreOAuthProviderSupport {
+public class CoreOAuthProviderSupportTests {
 	@Mock
 	private HttpServletRequest request;
 

File: spring-security-oauth/src/test/java/org/springframework/security/oauth/provider/filter/AccessTokenProcessingFilterTests.java
Patch:
@@ -39,7 +39,7 @@
  * @author Ryan Heaton
  */
 @RunWith(MockitoJUnitRunner.class)
-public class TestAccessTokenProcessingFilter {
+public class AccessTokenProcessingFilterTests {
 	@Mock
 	private ConsumerDetails consumerDetails;
 	@Mock

File: spring-security-oauth/src/test/java/org/springframework/security/oauth/provider/filter/OAuthProcessingFilterTests.java
Patch:
@@ -65,7 +65,7 @@
  * @author Ryan Heaton
  */
 @RunWith(MockitoJUnitRunner.class)
-public class TestOAuthProcessingFilter {
+public class OAuthProcessingFilterTests {
 	@Mock
 	private OAuthProviderSupport providerSupport;
 	@Mock

File: spring-security-oauth/src/test/java/org/springframework/security/oauth/provider/filter/OAuthUserAuthorizationProcessingFilterTests.java
Patch:
@@ -36,7 +36,7 @@
 /**
  * @author Ryan Heaton
  */
-public class TestOAuthUserAuthorizationProcessingFilter {
+public class OAuthUserAuthorizationProcessingFilterTests {
 
 	/**
 	 * tests the attempt to authenticate.

File: spring-security-oauth/src/test/java/org/springframework/security/oauth/provider/filter/ProtectedResourceProcessingFilterTests.java
Patch:
@@ -38,7 +38,7 @@
 /**
  * @author Ryan Heaton
  */
-public class TestProtectedResourceProcessingFilter {
+public class ProtectedResourceProcessingFilterTests {
 
 	/**
 	 * test onValidSignature

File: spring-security-oauth/src/test/java/org/springframework/security/oauth/provider/filter/UnauthenticatedRequestTokenProcessingFilterTests.java
Patch:
@@ -45,7 +45,7 @@
 /**
  * @author Ryan Heaton
  */
-public class TestUnauthenticatedRequestTokenProcessingFilter {
+public class UnauthenticatedRequestTokenProcessingFilterTests {
 
 	/**
 	 * test onValidSignature

File: spring-security-oauth/src/test/java/org/springframework/security/oauth/provider/filter/UserAuthorizationSuccessfulAuthenticationHandlerTests.java
Patch:
@@ -30,7 +30,7 @@
 /**
  * @author Andrew McCall
  */
-public class TestUserAuthorizationSuccessfulAuthenticationHandler {
+public class UserAuthorizationSuccessfulAuthenticationHandlerTests {
 
 	/**
 	 * test determineTargetUrl

File: spring-security-oauth/src/test/java/org/springframework/security/oauth/provider/nonce/InMemoryNonceServicesTests.java
Patch:
@@ -14,7 +14,7 @@
  * @author Ryan Heaton
  * @author Jilles van Gurp
  */
-public class TestInMemoryNonceServices {
+public class InMemoryNonceServicesTests {
 
 	private long now;
 	private final InMemoryNonceServices nonceServices = new InMemoryNonceServices();

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/client/OAuth2RestTemplateTests.java
Patch:
@@ -39,7 +39,7 @@
  * @author Ryan Heaton
  * @author Dave Syer
  */
-public class TestOAuth2RestTemplate {
+public class OAuth2RestTemplateTests {
 
 	private BaseOAuth2ProtectedResourceDetails resource;
 

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/client/filter/OAuth2ClientAuthenticationProcessingFilterTests.java
Patch:
@@ -36,7 +36,7 @@
 import org.springframework.security.oauth2.provider.OAuth2Request;
 import org.springframework.security.oauth2.provider.token.ResourceServerTokenServices;
 
-public class TestOAuth2ClientAuthenticationProcessingFilter {
+public class OAuth2ClientAuthenticationProcessingFilterTests {
 
 	private OAuth2ClientAuthenticationProcessingFilter filter = new OAuth2ClientAuthenticationProcessingFilter(
 			"/some/url");

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/client/filter/OAuth2ClientContextFilterTests.java
Patch:
@@ -8,7 +8,7 @@
 /**
  * @author Ryan Heaton
  */
-public class TestOAuth2ClientContextFilter {
+public class OAuth2ClientContextFilterTests {
 
 	@Test
 	public void testVanillaCurrentUri() throws Exception {

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/client/http/OAuth2ErrorHandlerTests.java
Patch:
@@ -43,7 +43,7 @@
  * 
  */
 @RunWith(MockitoJUnitRunner.class)
-public class TestOAuth2ErrorHandler {
+public class OAuth2ErrorHandlerTests {
 
 	@Mock
 	private ClientHttpResponse response;

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/client/token/AccessTokenProviderChainTests.java
Patch:
@@ -43,7 +43,7 @@
  * @author Dave Syer
  * 
  */
-public class TestAccessTokenProviderChain {
+public class AccessTokenProviderChainTests {
 
 	private BaseOAuth2ProtectedResourceDetails resource;
 
@@ -56,7 +56,7 @@ public class TestAccessTokenProviderChain {
 
 	private ClientTokenServices clientTokenServices = Mockito.mock(ClientTokenServices.class);
 
-	public TestAccessTokenProviderChain() {
+	public AccessTokenProviderChainTests() {
 		resource = new BaseOAuth2ProtectedResourceDetails();
 		resource.setId("resource");
 	}

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/client/token/JdbcClientTokenServicesTests.java
Patch:
@@ -20,7 +20,7 @@
  * @author Dave Syer
  * 
  */
-public class TestJdbcClientTokenServices {
+public class JdbcClientTokenServicesTests {
 
 	private JdbcClientTokenServices tokenStore;
 

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/client/token/OAuth2AccessTokenSupportTests.java
Patch:
@@ -49,7 +49,7 @@
  * @author Dave Syer
  * 
  */
-public class TestOAuth2AccessTokenSupport {
+public class OAuth2AccessTokenSupportTests {
 
 	private ClientCredentialsResourceDetails resource = new ClientCredentialsResourceDetails();
 

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/client/token/grant/implicit/ImplicitAccessTokenProviderTests.java
Patch:
@@ -30,7 +30,7 @@
  * @author Dave Syer
  * 
  */
-public class TestImplicitAccessTokenProvider {
+public class ImplicitAccessTokenProviderTests {
 
 	@Rule
 	public ExpectedException expected = ExpectedException.none();

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/common/DefaultOAuth2SerializationServiceTests.java
Patch:
@@ -30,7 +30,7 @@
  * @author Dave Syer
  * 
  */
-public class TestDefaultOAuth2SerializationService {
+public class DefaultOAuth2SerializationServiceTests {
 
 	@Test
 	public void testDefaultDeserialization() throws Exception {

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/common/JsonSerializationTests.java
Patch:
@@ -30,7 +30,7 @@
  * @author Dave Syer
  * 
  */
-public class TestJsonSerialization {
+public class JsonSerializationTests {
 
 	@Test
 	public void testDefaultSerialization() throws Exception {

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/common/OAuth2AccessTokenJackson1DeserializerTests.java
Patch:
@@ -32,7 +32,7 @@
  * @author Rob Winch
  */
 @PrepareForTest(OAuth2AccessTokenJackson1Deserializer.class)
-public class TestOAuth2AccessTokenJackson1Deserializer extends BaseOAuth2AccessTokenJacksonTest {
+public class OAuth2AccessTokenJackson1DeserializerTests extends BaseOAuth2AccessTokenJacksonTest {
 
     protected ObjectMapper mapper;
 

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/common/OAuth2AccessTokenJackson1SerializerTests.java
Patch:
@@ -17,7 +17,7 @@
  * @author Rob Winch
  */
 @PrepareForTest(OAuth2AccessTokenJackson1Serializer.class)
-public class TestOAuth2AccessTokenJackson1Serializer extends BaseOAuth2AccessTokenJacksonTest {
+public class OAuth2AccessTokenJackson1SerializerTests extends BaseOAuth2AccessTokenJacksonTest {
 
     protected ObjectMapper mapper;
 

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/common/OAuth2AccessTokenJackson2DeserializerTests.java
Patch:
@@ -32,7 +32,7 @@
  * @author Rob Winch
  */
 @PrepareForTest(OAuth2AccessTokenJackson2Deserializer.class)
-public class TestOAuth2AccessTokenJackson2Deserializer extends BaseOAuth2AccessTokenJacksonTest {
+public class OAuth2AccessTokenJackson2DeserializerTests extends BaseOAuth2AccessTokenJacksonTest {
 
     protected ObjectMapper mapper;
 

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/common/OAuth2AccessTokenJackson2SerializerTests.java
Patch:
@@ -17,7 +17,7 @@
  * @author Rob Winch
  */
 @PrepareForTest(OAuth2AccessTokenJackson2Serializer.class)
-public class TestOAuth2AccessTokenJackson2Serializer extends BaseOAuth2AccessTokenJacksonTest {
+public class OAuth2AccessTokenJackson2SerializerTests extends BaseOAuth2AccessTokenJacksonTest {
 
     protected ObjectMapper mapper;
 

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/common/exception/OAuth2ExceptionDeserializerTests.java
Patch:
@@ -33,7 +33,7 @@
  * @author Rob Winch
  *
  */
-public class TestOAuth2ExceptionDeserializer {
+public class OAuth2ExceptionDeserializerTests {
 	private static final String DETAILS = "some detail";
 	private static ObjectMapper mapper;
 

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/common/exception/OAuth2ExceptionSerializerTests.java
Patch:
@@ -34,7 +34,7 @@
  * @author Rob Winch
  *
  */
-public class TestOAuth2ExceptionSerializer {
+public class OAuth2ExceptionSerializerTests {
 
 	private static final String DETAILS = "some detail";
 	private static ObjectMapper mapper;

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/config/annotation/AuthorizationServerConfigurationTests.java
Patch:
@@ -39,7 +39,7 @@
  * 
  */
 @RunWith(Parameterized.class)
-public class TestAuthorizationServerConfiguration {
+public class AuthorizationServerConfigurationTests {
 
 	private AnnotationConfigWebApplicationContext context;
 
@@ -52,7 +52,7 @@ public static List<Object[]> parameters() {
 				new Object[] { AuthorizationServerExtras.class }, new Object[] { AuthorizationServerTypes.class });
 	}
 
-	public TestAuthorizationServerConfiguration(Class<?> resource) {
+	public AuthorizationServerConfigurationTests(Class<?> resource) {
 		context = new AnnotationConfigWebApplicationContext();
 		context.setServletContext(new MockServletContext());
 		context.register(resource);

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/config/annotation/ClientConfigurationTests.java
Patch:
@@ -45,7 +45,7 @@
  * @author Dave Syer
  * 
  */
-public class TestClientConfiguration {
+public class ClientConfigurationTests {
 
 	@Test
 	public void testAuthCodeRedirect() throws Exception {

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/config/annotation/ResourceServerConfigurationTests.java
Patch:
@@ -43,7 +43,7 @@
  * @author Dave Syer
  * 
  */
-public class TestResourceServerConfiguration {
+public class ResourceServerConfigurationTests {
 	
 	private static InMemoryTokenStore tokenStore = new InMemoryTokenStore();
 	private OAuth2AccessToken token;

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/config/xml/AuthorizationServerBeanDefinitionParserTests.java
Patch:
@@ -32,7 +32,7 @@
  * 
  */
 @RunWith(Parameterized.class)
-public class TestAuthorizationServerBeanDefinitionParser {
+public class AuthorizationServerBeanDefinitionParserTests {
 
 	private ConfigurableApplicationContext context;
 
@@ -45,7 +45,7 @@ public static List<Object[]> parameters() {
 				new Object[] { "authorization-server-extras" }, new Object[] { "authorization-server-types" });
 	}
 
-	public TestAuthorizationServerBeanDefinitionParser(String resource) {
+	public AuthorizationServerBeanDefinitionParserTests(String resource) {
 		context = new GenericXmlApplicationContext(getClass(), resource + ".xml");
 	}
 

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/config/xml/AuthorizationServerCustomGrantParserTests.java
Patch:
@@ -13,7 +13,7 @@
 import org.springframework.security.oauth2.provider.TokenGranter;
 import org.springframework.security.oauth2.provider.TokenRequest;
 
-public class TestAuthorizationServerCustomGrantParser {
+public class AuthorizationServerCustomGrantParserTests {
 	
 	private static String RESOURCE_NAME = "authorization-server-custom-grant.xml";
 	
@@ -22,7 +22,7 @@ public class TestAuthorizationServerCustomGrantParser {
 	@Rule
 	public ExpectedException expected = ExpectedException.none();
 	
-	public TestAuthorizationServerCustomGrantParser() {
+	public AuthorizationServerCustomGrantParserTests() {
 		context = new GenericXmlApplicationContext(getClass(), RESOURCE_NAME);
 	}
 	

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/config/xml/ClientDetailsServiceBeanDefinitionParserTests.java
Patch:
@@ -17,7 +17,7 @@
 
 @ContextConfiguration
 @RunWith ( SpringJUnit4ClassRunner.class )
-public class TestClientDetailsServiceBeanDefinitionParser {
+public class ClientDetailsServiceBeanDefinitionParserTests {
 
 	@Autowired
 	private ClientDetailsService clientDetailsService;

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/config/xml/InvalidResourceBeanDefinitionParserTests.java
Patch:
@@ -29,7 +29,7 @@
  * @author Dave Syer
  * 
  */
-public class TestInvalidResourceBeanDefinitionParser {
+public class InvalidResourceBeanDefinitionParserTests {
 	
 	private ConfigurableApplicationContext context;
 	

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/config/xml/ResourceBeanDefinitionParserTests.java
Patch:
@@ -21,7 +21,7 @@
 
 @ContextConfiguration
 @RunWith(SpringJUnit4ClassRunner.class)
-public class TestResourceBeanDefinitionParser {
+public class ResourceBeanDefinitionParserTests {
 
 	@Autowired
 	@Qualifier("one")

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/config/xml/ResourceServerBeanDefinitionParserTests.java
Patch:
@@ -26,7 +26,7 @@
  * @author Dave Syer
  * 
  */
-public class TestResourceServerBeanDefinitionParser {
+public class ResourceServerBeanDefinitionParserTests {
 
 	@Test
 	public void testDefaults() {

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/http/converter/jaxb/JaxbOAuth2AccessTokenMessageConverterTests.java
Patch:
@@ -35,7 +35,7 @@
  *
  */
 @PrepareForTest(JaxbOAuth2AccessToken.class)
-public class TestJaxbOAuth2AccessTokenMessageConverter extends BaseJaxbMessageConverterTest {
+public class JaxbOAuth2AccessTokenMessageConverterTests extends BaseJaxbMessageConverterTest {
 	private JaxbOAuth2AccessTokenMessageConverter converter;
 	private DefaultOAuth2AccessToken accessToken;
 

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/http/converter/jaxb/JaxbOAuth2ExceptionMessageConverterTests.java
Patch:
@@ -42,7 +42,7 @@
  */
 @RunWith(PowerMockRunner.class)
 @PrepareForTest({ System.class, JaxbOAuth2AccessToken.class })
-public class TestJaxbOAuth2ExceptionMessageConverter extends BaseJaxbMessageConverterTest {
+public class JaxbOAuth2ExceptionMessageConverterTests extends BaseJaxbMessageConverterTest {
 	private JaxbOAuth2ExceptionMessageConverter converter;
 
 	private static String DETAILS = "some detail";

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/AuthorizationRequestTests.java
Patch:
@@ -40,7 +40,7 @@
  * @author Christian Hilmersson
  *
  */
-public class TestAuthorizationRequest {
+public class AuthorizationRequestTests {
 
 	private Map<String, String> parameters;
 

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/BaseClientDetailsTests.java
Patch:
@@ -30,7 +30,7 @@
  * @author Dave Syer
  * 
  */
-public class TestBaseClientDetails {
+public class BaseClientDetailsTests {
 
 	/**
 	 * test default constructor

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/DefaultAuthorizationRequestManagerTests.java
Patch:
@@ -26,7 +26,7 @@
  * @author Dave Syer
  *
  */
-public class TestDefaultAuthorizationRequestManager {
+public class DefaultAuthorizationRequestManagerTests {
 	
 	private BaseClientDetails client = new BaseClientDetails();
 

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/DefaultAuthorizationRequestTests.java
Patch:
@@ -39,7 +39,7 @@
  * @author Christian Hilmersson
  *
  */
-public class TestDefaultAuthorizationRequest {
+public class DefaultAuthorizationRequestTests {
 
 	private Map<String, String> parameters;
 

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/JdbcClientDetailsServiceTests.java
Patch:
@@ -20,7 +20,7 @@
 import org.springframework.security.core.GrantedAuthority;
 import org.springframework.security.crypto.password.PasswordEncoder;
 
-public class TestJdbcClientDetailsService {
+public class JdbcClientDetailsServiceTests {
 	private JdbcClientDetailsService service;
 
 	private JdbcTemplate jdbcTemplate;

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/OAuth2AuthenticationTests.java
Patch:
@@ -13,7 +13,7 @@
 import org.springframework.test.annotation.Rollback;
 import org.springframework.util.SerializationUtils;
 
-public class TestOAuth2Authentication {
+public class OAuth2AuthenticationTests {
 
 	private OAuth2Request request = RequestTokenFactory.createOAuth2Request(null, "id", null, false,
 			Collections.singleton("read"), null, null, null, null);

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/approval/ApprovalStoreUserApprovalHandlerTests.java
Patch:
@@ -23,7 +23,7 @@
 import org.springframework.security.oauth2.provider.DefaultOAuth2RequestFactory;
 import org.springframework.security.oauth2.provider.InMemoryClientDetailsService;
 
-public class TestApprovalStoreUserApprovalHandler {
+public class ApprovalStoreUserApprovalHandlerTests {
 
 	private ApprovalStoreUserApprovalHandler handler = new ApprovalStoreUserApprovalHandler();
 

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/approval/DefaultUserApprovalHandlerTests.java
Patch:
@@ -24,7 +24,7 @@
  * @author Dave Syer
  * 
  */
-public class TestDefaultUserApprovalHandler {
+public class DefaultUserApprovalHandlerTests {
 
 	private DefaultUserApprovalHandler handler = new DefaultUserApprovalHandler();
 

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/approval/InMemoryApprovalStoreTests.java
Patch:
@@ -20,7 +20,7 @@
  * @author Dave Syer
  *
  */
-public class TestInMemoryApprovalStore extends AbstractTestApprovalStore {
+public class InMemoryApprovalStoreTests extends AbstractTestApprovalStore {
 	
 	private ApprovalStore store = new InMemoryApprovalStore();
 

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/approval/JdbcApprovalStoreTests.java
Patch:
@@ -33,7 +33,7 @@
  * @author Dave Syer
  * 
  */
-public class TestJdbcApprovalStore extends AbstractTestApprovalStore {
+public class JdbcApprovalStoreTests extends AbstractTestApprovalStore {
 
 	private JdbcApprovalStore store;
 

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/approval/TokenApprovalStoreTests.java
Patch:
@@ -36,7 +36,7 @@
  * @author Dave Syer
  *
  */
-public class TestTokenApprovalStore extends AbstractTestApprovalStore {
+public class TokenApprovalStoreTests extends AbstractTestApprovalStore {
 	
 	private TokenApprovalStore store = new TokenApprovalStore();
 	private InMemoryTokenStore tokenStore = new InMemoryTokenStore();

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/approval/TokenStoreUserApprovalHandlerTests.java
Patch:
@@ -30,7 +30,7 @@
  * @author Dave Syer
  * 
  */
-public class TestTokenStoreUserApprovalHandler {
+public class TokenStoreUserApprovalHandlerTests {
 
 	private TokenStoreUserApprovalHandler handler = new TokenStoreUserApprovalHandler();
 

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/authentication/OAuth2AuthenticationManagerTests.java
Patch:
@@ -29,7 +29,7 @@
  * @author Dave Syer
  * 
  */
-public class TestOAuth2AuthenticationManager {
+public class OAuth2AuthenticationManagerTests {
 
 	private OAuth2AuthenticationManager manager = new OAuth2AuthenticationManager();
 	

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/authentication/OAuth2AuthenticationProcessingFilterTests.java
Patch:
@@ -35,7 +35,7 @@
  * @author Dave Syer
  * 
  */
-public class TestOAuth2AuthenticationProcessingFilter {
+public class OAuth2AuthenticationProcessingFilterTests {
 
 	private OAuth2AuthenticationProcessingFilter filter = new OAuth2AuthenticationProcessingFilter();
 

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/client/ClientCredentialsTokenEndpointFilterTests.java
Patch:
@@ -29,7 +29,7 @@
  * @author Dave Syer
  * 
  */
-public class TestClientCredentialsTokenEndpointFilter {
+public class ClientCredentialsTokenEndpointFilterTests {
 
 	private ClientCredentialsTokenEndpointFilter filter = new ClientCredentialsTokenEndpointFilter();
 	private AuthenticationManager authenticationManager = Mockito

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/endpoint/AuthorizationEndpointTests.java
Patch:
@@ -55,7 +55,7 @@
  * @author Dave Syer
  * 
  */
-public class TestAuthorizationEndpoint {
+public class AuthorizationEndpointTests {
 
 	private AuthorizationEndpoint endpoint = new AuthorizationEndpoint();
 

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/endpoint/TokenEndpointAuthenticationFilterTests.java
Patch:
@@ -43,7 +43,7 @@
  * @author Dave Syer
  * 
  */
-public class TestTokenEndpointAuthenticationFilter {
+public class TokenEndpointAuthenticationFilterTests {
 
 	private MockHttpServletRequest request = new MockHttpServletRequest();
 

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/endpoint/TokenEndpointTests.java
Patch:
@@ -53,7 +53,7 @@
  * @author Rob Winch
  */
 @RunWith(MockitoJUnitRunner.class)
-public class TestTokenEndpoint {
+public class TokenEndpointTests {
 
 	@Mock
 	private TokenGranter tokenGranter;

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/endpoint/WhitelabelApprovalEndpointTests.java
Patch:
@@ -32,7 +32,7 @@
  * @author Dave Syer
  *
  */
-public class TestWhitelabelApprovalEndpoint {
+public class WhitelabelApprovalEndpointTests {
 	
 	private WhitelabelApprovalEndpoint endpoint = new WhitelabelApprovalEndpoint();
 	private Map<String, String> parameters = new HashMap<String, String>();

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/error/OAuth2AccessDeniedHandlerTests.java
Patch:
@@ -26,7 +26,7 @@
  * @author Dave Syer
  * 
  */
-public class TestOAuth2AccessDeniedHandler {
+public class OAuth2AccessDeniedHandlerTests {
 
 	private OAuth2AccessDeniedHandler handler = new OAuth2AccessDeniedHandler();
 

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/error/OAuth2AuthenticationEntryPointTests.java
Patch:
@@ -28,7 +28,7 @@
  * @author Dave Syer
  * 
  */
-public class TestOAuth2AuthenticationEntryPoint {
+public class OAuth2AuthenticationEntryPointTests {
 
 	private OAuth2AuthenticationEntryPoint entryPoint = new OAuth2AuthenticationEntryPoint();
 

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/expression/OAuth2MethodSecurityExpressionHandlerTests.java
Patch:
@@ -41,7 +41,7 @@
  * @author Radek Ostrowski
  * 
  */
-public class TestOAuth2MethodSecurityExpressionHandler {
+public class OAuth2MethodSecurityExpressionHandlerTests {
 
 	private OAuth2MethodSecurityExpressionHandler handler = new OAuth2MethodSecurityExpressionHandler();
 

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/expression/OAuth2SecurityExpressionMethodsTests.java
Patch:
@@ -36,7 +36,7 @@
  * @author Dave Syer
  * 
  */
-public class TestOAuth2SecurityExpressionMethods {
+public class OAuth2SecurityExpressionMethodsTests {
 
 	@Test
 	public void testOauthClient() throws Exception {

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/expression/OAuth2WebSecurityExpressionHandlerTests.java
Patch:
@@ -36,7 +36,7 @@
  * @author Dave Syer
  * 
  */
-public class TestOAuth2WebSecurityExpressionHandler {
+public class OAuth2WebSecurityExpressionHandlerTests {
 
 	private OAuth2WebSecurityExpressionHandler handler = new OAuth2WebSecurityExpressionHandler();
 

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/implicit/InMemoryImplicitGrantServiceTests.java
Patch:
@@ -27,7 +27,7 @@
  * @author Dave Syer
  * 
  */
-public class TestInMemoryImplicitGrantService {
+public class InMemoryImplicitGrantServiceTests {
 
 	private InMemoryImplicitGrantService service = new InMemoryImplicitGrantService();
 

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/password/ResourceOwnerPasswordTokenGranterTests.java
Patch:
@@ -45,7 +45,7 @@
  * @author Dave Syer
  * 
  */
-public class TestResourceOwnerPasswordTokenGranter {
+public class ResourceOwnerPasswordTokenGranterTests {
 
 	private Authentication validUser = new UsernamePasswordAuthenticationToken(
 			"foo", "bar",
@@ -75,7 +75,7 @@ public ClientDetails loadClientByClientId(String clientId)
 
 	private TokenRequest tokenRequest;
 
-	public TestResourceOwnerPasswordTokenGranter() {
+	public ResourceOwnerPasswordTokenGranterTests() {
 		String clientId = "client";
 		BaseClientDetails clientDetails = new BaseClientDetails();
 		clientDetails.setClientId(clientId);

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/DefaultTokenServicesWithInMemoryTests.java
Patch:
@@ -32,7 +32,7 @@
  * @author Dave Syer
  * 
  */
-public class TestDefaultTokenServicesWithInMemory extends AbstractTestDefaultTokenServices {
+public class DefaultTokenServicesWithInMemoryTests extends AbstractTestDefaultTokenServices {
 
 	private InMemoryTokenStore tokenStore;
 

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/DefaultTokenServicesWithJdbcTests.java
Patch:
@@ -9,7 +9,7 @@
  * @author Dave Syer
  * 
  */
-public class TestDefaultTokenServicesWithJdbc extends AbstractTestDefaultTokenServices {
+public class DefaultTokenServicesWithJdbcTests extends AbstractTestDefaultTokenServices {
 
 	private EmbeddedDatabase db;
 

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/InMemoryTokenStoreTests.java
Patch:
@@ -14,7 +14,7 @@
  * @author Dave Syer
  * 
  */
-public class TestInMemoryTokenStore extends TestTokenStoreBase {
+public class InMemoryTokenStoreTests extends TokenStoreBaseTests {
 
 	private InMemoryTokenStore tokenStore;
 

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/JdbcTokenStoreTests.java
Patch:
@@ -9,7 +9,7 @@
  * @author Dave Syer
  *
  */
-public class TestJdbcTokenStore extends TestTokenStoreBase {
+public class JdbcTokenStoreTests extends TokenStoreBaseTests {
 
 	private JdbcTokenStore tokenStore;
 

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/JwtTokenEnhancerTests.java
Patch:
@@ -33,7 +33,7 @@
  * @author Dave Syer
  * @author Luke Taylor
  */
-public class TestJwtTokenEnhancer {
+public class JwtTokenEnhancerTests {
 
 	private JwtTokenEnhancer tokenEnhancer;
 

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/JwtTokenServicesTests.java
Patch:
@@ -47,7 +47,7 @@
  * @author Dave Syer
  * 
  */
-public class TestJwtTokenServices {
+public class JwtTokenServicesTests {
 
 	private JwtTokenServices services = new JwtTokenServices();
 

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/TokenStoreBaseTests.java
Patch:
@@ -35,7 +35,7 @@
  * @author Dave Syer
  * 
  */
-public abstract class TestTokenStoreBase {
+public abstract class TokenStoreBaseTests {
 
 	public abstract TokenStore getTokenStore();
 

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/vote/ClientScopeVoterTests.java
Patch:
@@ -19,7 +19,7 @@
 import org.springframework.security.oauth2.provider.InMemoryClientDetailsService;
 import org.springframework.security.oauth2.provider.OAuth2Authentication;
 
-public class TestClientScopeVoter {
+public class ClientScopeVoterTests {
 
 	private ClientScopeVoter voter = new ClientScopeVoter();
 

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/vote/ScopeVoterTests.java
Patch:
@@ -35,7 +35,7 @@
  * @author Dave Syer
  * 
  */
-public class TestScopeVoter {
+public class ScopeVoterTests {
 
 	private ScopeVoter voter = new ScopeVoter();
 

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/BaseClientDetails.java
Patch:
@@ -143,8 +143,8 @@ public void setClientId(String clientId) {
 		this.clientId = clientId;
 	}
 
-	public void setAutoApproveScopes(Set<String> autoApproveScopes) {
-		this.autoApproveScopes = autoApproveScopes;
+	public void setAutoApproveScopes(Collection<String> autoApproveScopes) {
+		this.autoApproveScopes = new HashSet<String>(autoApproveScopes);
 	}
 
 	@Override

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/implicit/ImplicitTokenGranter.java
Patch:
@@ -37,7 +37,7 @@ public class ImplicitTokenGranter extends AbstractTokenGranter {
 
 	private static final String GRANT_TYPE = "implicit";
 
-	private ImplicitGrantService service;
+	private ImplicitGrantService service = new InMemoryImplicitGrantService();
 	
 	public ImplicitTokenGranter(AuthorizationServerTokenServices tokenServices, ClientDetailsService clientDetailsService, OAuth2RequestFactory requestFactory) {
 		super(tokenServices, clientDetailsService, requestFactory, GRANT_TYPE);

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/BaseRequest.java
Patch:
@@ -137,7 +137,6 @@ protected void setScope(Collection<String> scope) {
 			 * This is really an error, but it can catch out unsuspecting users
 			 * and it's easy to fix. It happens when an AuthorizationRequest
 			 * gets bound accidentally from request parameters using
-			 * 
 			 * @ModelAttribute.
 			 */
 			if (value.contains(" ") || value.contains(",")) {

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/code/AuthorizationCodeTokenGranter.java
Patch:
@@ -95,7 +95,7 @@ protected OAuth2Authentication getOAuth2Authentication(ClientDetails client, Tok
 		// Combine the parameters adding the new ones last so they override if there are any clashes
 		combinedParameters.putAll(parameters);
 		
-		//Make a new stored request with the combined parameters
+		// Make a new stored request with the combined parameters
 		OAuth2Request finalStoredOAuth2Request = pendingOAuth2Request.createOAuth2Request(combinedParameters);
 		
 		Authentication userAuth = storedAuth.getUserAuthentication();

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/code/TestAuthorizationCodeTokenGranter.java
Patch:
@@ -133,6 +133,8 @@ public void testAuthorizationRequestPreserved() {
 				storedOAuth2Request, userAuthentication));
 
 		parameters.put("code", code);
+		// Ensure even if token request asks for more scope they are not granted
+		parameters.put(OAuth2Utils.SCOPE, "read write");
 		TokenRequest tokenRequest = requestFactory.createTokenRequest(parameters, client);
 		
 		AuthorizationCodeTokenGranter granter = new AuthorizationCodeTokenGranter(providerTokenServices,

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/authentication/OAuth2AuthenticationDetails.java
Patch:
@@ -60,9 +60,9 @@ public OAuth2AuthenticationDetails(HttpServletRequest request) {
 		}
 		if (sessionId!=null) {
 			builder.append("sessionId=<SESSION>");
-		}
-		if (builder.length()>1) {
-			builder.append(", ");
+			if (builder.length()>1) {
+				builder.append(", ");
+			}
 		}
 		if (tokenValue!=null) {
 			builder.append("tokenValue=<TOKEN>");

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/token/AccessTokenProvider.java
Patch:
@@ -19,11 +19,11 @@
 import org.springframework.security.oauth2.client.resource.OAuth2ProtectedResourceDetails;
 import org.springframework.security.oauth2.client.resource.UserApprovalRequiredException;
 import org.springframework.security.oauth2.client.resource.UserRedirectRequiredException;
-import org.springframework.security.oauth2.common.OAuth2RefreshToken;
 import org.springframework.security.oauth2.common.OAuth2AccessToken;
+import org.springframework.security.oauth2.common.OAuth2RefreshToken;
 
 /**
- * A manager for an , which knows how to obtain an access token for a specific resources.
+ * A strategy which knows how to obtain an access token for a specific resource.
  * 
  * @author Ryan Heaton
  * @author Dave Syer

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/token/grant/code/AuthorizationCodeAccessTokenProvider.java
Patch:
@@ -79,14 +79,14 @@ public class AuthorizationCodeAccessTokenProvider extends OAuth2AccessTokenSuppo
 	
 	/**
 	 * A custom enhancer for the authorization request
-	 * @param tokenRequestEnhancer
+	 * @param authorizationRequestEnhancer
 	 */
 	public void setAuthorizationRequestEnhancer(RequestEnhancer authorizationRequestEnhancer) {
 		this.authorizationRequestEnhancer = authorizationRequestEnhancer;
 	}
 	
 	/**
-	 * Prefix for scope approval pamaremeters.
+	 * Prefix for scope approval parameters.
 	 * 
 	 * @param scopePrefix
 	 */

File: samples/oauth2/sparklr/src/test/java/org/springframework/security/oauth2/provider/ServerRunning.java
Patch:
@@ -207,7 +207,7 @@ public ResponseEntity<String> postForString(String path, MultiValueMap<String, S
 	public ResponseEntity<String> postForString(String path, HttpHeaders headers, MultiValueMap<String, String> formData) {
 		HttpHeaders actualHeaders = new HttpHeaders();
 		actualHeaders.putAll(headers);
-		actualHeaders.setAccept(Arrays.asList(MediaType.APPLICATION_FORM_URLENCODED));
+		headers.setAccept(Arrays.asList(MediaType.APPLICATION_JSON));
 		return client.exchange(getUrl(path), HttpMethod.POST, new HttpEntity<MultiValueMap<String, String>>(formData,
 				actualHeaders), String.class);
 	}
@@ -312,6 +312,7 @@ public HttpClient getHttpClient() {
 				HttpClient client = super.getHttpClient();
 				client.getParams().setBooleanParameter(ClientPNames.HANDLE_REDIRECTS, false);
 				client.getParams().setParameter(ClientPNames.COOKIE_POLICY, CookiePolicy.IGNORE_COOKIES);
+				client.getParams().setBooleanParameter(ClientPNames.HANDLE_AUTHENTICATION, false);
 				return client;
 			}
 		});

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/token/grant/client/ClientCredentialsAccessTokenProvider.java
Patch:
@@ -41,7 +41,7 @@ public OAuth2AccessToken obtainAccessToken(OAuth2ProtectedResourceDetails detail
 			throws UserRedirectRequiredException, AccessDeniedException, OAuth2AccessDeniedException {
 
 		ClientCredentialsResourceDetails resource = (ClientCredentialsResourceDetails) details;
-		return retrieveToken(getParametersForTokenRequest(resource), new HttpHeaders(), resource);
+		return retrieveToken(request, resource, getParametersForTokenRequest(resource), new HttpHeaders());
 
 	}
 

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/token/grant/implicit/ImplicitAccessTokenProvider.java
Patch:
@@ -17,8 +17,8 @@
 import org.springframework.security.oauth2.client.token.DefaultAccessTokenRequest;
 import org.springframework.security.oauth2.client.token.OAuth2AccessTokenSupport;
 import org.springframework.security.oauth2.common.DefaultOAuth2AccessToken;
-import org.springframework.security.oauth2.common.OAuth2RefreshToken;
 import org.springframework.security.oauth2.common.OAuth2AccessToken;
+import org.springframework.security.oauth2.common.OAuth2RefreshToken;
 import org.springframework.security.oauth2.common.util.OAuth2Utils;
 import org.springframework.util.LinkedMultiValueMap;
 import org.springframework.util.MultiValueMap;
@@ -58,8 +58,8 @@ public OAuth2AccessToken obtainAccessToken(OAuth2ProtectedResourceDetails detail
 		ImplicitResourceDetails resource = (ImplicitResourceDetails) details;
 		try {
 			// We can assume here that the request contains all the parameters needed for authentication etc.
-			OAuth2AccessToken token = retrieveToken(getParametersForTokenRequest(resource, request),
-					getHeadersForTokenRequest(request), resource);
+			OAuth2AccessToken token = retrieveToken(request,
+					resource, getParametersForTokenRequest(resource, request), getHeadersForTokenRequest(request));
 			if (token==null) {
 				// Probably an authenticated request, but approval is required.  TODO: prompt somehow?
 				throw new UserRedirectRequiredException(resource.getUserAuthorizationUri(), request.toSingleValueMap());				

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/token/grant/password/ResourceOwnerPasswordAccessTokenProvider.java
Patch:
@@ -37,14 +37,14 @@ public OAuth2AccessToken refreshAccessToken(OAuth2ProtectedResourceDetails resou
 		MultiValueMap<String, String> form = new LinkedMultiValueMap<String, String>();
 		form.add("grant_type", "refresh_token");
 		form.add("refresh_token", refreshToken.getValue());
-		return retrieveToken(form, new HttpHeaders(), resource);
+		return retrieveToken(request, resource, form, new HttpHeaders());
 	}
 
 	public OAuth2AccessToken obtainAccessToken(OAuth2ProtectedResourceDetails details, AccessTokenRequest request)
 			throws UserRedirectRequiredException, AccessDeniedException, OAuth2AccessDeniedException {
 
 		ResourceOwnerPasswordResourceDetails resource = (ResourceOwnerPasswordResourceDetails) details;
-		return retrieveToken(getParametersForTokenRequest(resource), new HttpHeaders(), resource);
+		return retrieveToken(request, resource, getParametersForTokenRequest(resource), new HttpHeaders());
 
 	}
 

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/client/token/grant/code/TestAuthorizationCodeAccessTokenProvider.java
Patch:
@@ -41,8 +41,8 @@ public class TestAuthorizationCodeAccessTokenProvider {
 
 	private AuthorizationCodeAccessTokenProvider provider = new AuthorizationCodeAccessTokenProvider() {
 		@Override
-		protected OAuth2AccessToken retrieveToken(MultiValueMap<String, String> form, HttpHeaders headers,
-				OAuth2ProtectedResourceDetails resource) {
+		protected OAuth2AccessToken retrieveToken(AccessTokenRequest request, OAuth2ProtectedResourceDetails resource,
+				MultiValueMap<String, String> form, HttpHeaders headers) {
 			params.putAll(form);
 			return new DefaultOAuth2AccessToken("FOO");
 		}

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/client/token/grant/implicit/TestImplicitAccessTokenProvider.java
Patch:
@@ -39,8 +39,8 @@ public class TestImplicitAccessTokenProvider {
 
 	private ImplicitAccessTokenProvider provider = new ImplicitAccessTokenProvider() {
 		@Override
-		protected OAuth2AccessToken retrieveToken(MultiValueMap<String, String> form, HttpHeaders headers,
-				OAuth2ProtectedResourceDetails resource) {
+		protected OAuth2AccessToken retrieveToken(AccessTokenRequest request, OAuth2ProtectedResourceDetails resource,
+				MultiValueMap<String, String> form, HttpHeaders headers) {
 			params.putAll(form);
 			return new DefaultOAuth2AccessToken("FOO");
 		}

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/util/OAuth2Utils.java
Patch:
@@ -81,8 +81,8 @@ public abstract class OAuth2Utils {
 	public static Set<String> parseParameterList(String values) {
 		Set<String> result = new TreeSet<String>();
 		if (values != null && values.trim().length() > 0) {
-			// the spec says the scope is separated by spaces, but Facebook uses commas, so we'll include commas, too.
-			String[] tokens = values.split("[\\s+,]");
+			// the spec says the scope is separated by spaces
+			String[] tokens = values.split("[\\s+]");
 			result.addAll(Arrays.asList(tokens));
 		}
 		return result;

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/JwtTokenServices.java
Patch:
@@ -316,7 +316,8 @@ private OAuth2Authentication createRefreshedAuthentication(OAuth2Authentication
 						+ ".", originalScope);
 			}
 			else {
-				narrowed = new OAuth2Authentication(clientAuth, authentication.getUserAuthentication());
+				narrowed = new OAuth2Authentication(clientAuth.narrowScope(scope),
+						authentication.getUserAuthentication());
 			}
 		}
 		return narrowed;

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/DefaultTokenServices.java
Patch:
@@ -106,6 +106,8 @@ else if (refreshToken instanceof ExpiringOAuth2RefreshToken) {
 
 		OAuth2AccessToken accessToken = createAccessToken(authentication, refreshToken);
 		tokenStore.storeAccessToken(accessToken, authentication);
+		// In case it was modified
+		refreshToken = accessToken.getRefreshToken();
 		if (refreshToken != null) {
 			tokenStore.storeRefreshToken(refreshToken, authentication);
 		}

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/exceptions/OAuth2Exception.java
Patch:
@@ -98,7 +98,7 @@ public static OAuth2Exception create(String errorCode, String errorMessage) {
 			return new InvalidClientException(errorMessage);
 		}
 		else if (UNAUTHORIZED_CLIENT.equals(errorCode)) {
-			return new UnauthorizedClientException(errorMessage);
+			return new UnauthorizedUserException(errorMessage);
 		}
 		else if (INVALID_GRANT.equals(errorCode)) {
 			return new InvalidGrantException(errorMessage);

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/exceptions/OAuth2ExceptionJackson1Deserializer.java
Patch:
@@ -75,7 +75,7 @@ else if (t == JsonToken.START_OBJECT) {
 			ex = new InvalidClientException(errorMessage);
 		}
 		else if ("unauthorized_client".equals(errorCode)) {
-			ex = new UnauthorizedClientException(errorMessage);
+			ex = new UnauthorizedUserException(errorMessage);
 		}
 		else if ("invalid_grant".equals(errorCode)) {
 			if (errorMessage.toLowerCase().contains("redirect") && errorMessage.toLowerCase().contains("match")) {

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/exceptions/OAuth2ExceptionJackson2Deserializer.java
Patch:
@@ -80,7 +80,7 @@ else if (t == JsonToken.START_OBJECT) {
 			ex = new InvalidClientException(errorMessage);
 		}
 		else if ("unauthorized_client".equals(errorCode)) {
-			ex = new UnauthorizedClientException(errorMessage);
+			ex = new UnauthorizedUserException(errorMessage);
 		}
 		else if ("invalid_grant".equals(errorCode)) {
 			if (errorMessage.toLowerCase().contains("redirect") && errorMessage.toLowerCase().contains("match")) {

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/password/ResourceOwnerPasswordTokenGranter.java
Patch:
@@ -65,7 +65,7 @@ protected OAuth2Authentication getOAuth2Authentication(ClientDetails client, Tok
 			throw new InvalidGrantException(ase.getMessage());
 		}
 		catch (BadCredentialsException e) {
-			// If the username/password are wrong the spec says we should send 400/bad grant
+			// If the username/password are wrong the spec says we should send 400/invlid grant
 			throw new InvalidGrantException(e.getMessage());
 		}
 		if (userAuth == null || !userAuth.isAuthenticated()) {

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/AbstractTokenGranter.java
Patch:
@@ -17,12 +17,12 @@
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.springframework.security.oauth2.common.OAuth2AccessToken;
-import org.springframework.security.oauth2.common.exceptions.InvalidGrantException;
+import org.springframework.security.oauth2.common.exceptions.InvalidClientException;
 import org.springframework.security.oauth2.provider.ClientDetails;
 import org.springframework.security.oauth2.provider.ClientDetailsService;
 import org.springframework.security.oauth2.provider.OAuth2Authentication;
-import org.springframework.security.oauth2.provider.OAuth2RequestFactory;
 import org.springframework.security.oauth2.provider.OAuth2Request;
+import org.springframework.security.oauth2.provider.OAuth2RequestFactory;
 import org.springframework.security.oauth2.provider.TokenGranter;
 import org.springframework.security.oauth2.provider.TokenRequest;
 
@@ -79,7 +79,7 @@ protected void validateGrantType(String grantType, ClientDetails clientDetails)
 		Collection<String> authorizedGrantTypes = clientDetails.getAuthorizedGrantTypes();
 		if (authorizedGrantTypes != null && !authorizedGrantTypes.isEmpty()
 				&& !authorizedGrantTypes.contains(grantType)) {
-			throw new InvalidGrantException("Unauthorized grant type: " + grantType);
+			throw new InvalidClientException("Unauthorized grant type: " + grantType);
 		}
 	}
 

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/common/exception/TestOAuth2ExceptionDeserializer.java
Patch:
@@ -24,7 +24,7 @@
 import org.springframework.security.oauth2.common.exceptions.InvalidTokenException;
 import org.springframework.security.oauth2.common.exceptions.OAuth2Exception;
 import org.springframework.security.oauth2.common.exceptions.RedirectMismatchException;
-import org.springframework.security.oauth2.common.exceptions.UnauthorizedClientException;
+import org.springframework.security.oauth2.common.exceptions.UnauthorizedUserException;
 import org.springframework.security.oauth2.common.exceptions.UnsupportedGrantTypeException;
 import org.springframework.security.oauth2.common.exceptions.UserDeniedAuthorizationException;
 
@@ -78,7 +78,7 @@ public void readValueUnsupportedGrantType() throws Exception {
 	@Test
 	public void readValueUnauthorizedClient() throws Exception {
 		String accessToken = createResponse(OAuth2Exception.UNAUTHORIZED_CLIENT);
-		UnauthorizedClientException result = (UnauthorizedClientException) mapper.readValue(accessToken,
+		UnauthorizedUserException result = (UnauthorizedUserException) mapper.readValue(accessToken,
 				OAuth2Exception.class);
 		assertEquals(DETAILS,result.getMessage());
 		assertEquals(null,result.getAdditionalInformation());

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/common/exception/TestOAuth2ExceptionSerializer.java
Patch:
@@ -25,7 +25,7 @@
 import org.springframework.security.oauth2.common.exceptions.InvalidTokenException;
 import org.springframework.security.oauth2.common.exceptions.OAuth2Exception;
 import org.springframework.security.oauth2.common.exceptions.RedirectMismatchException;
-import org.springframework.security.oauth2.common.exceptions.UnauthorizedClientException;
+import org.springframework.security.oauth2.common.exceptions.UnauthorizedUserException;
 import org.springframework.security.oauth2.common.exceptions.UnsupportedGrantTypeException;
 import org.springframework.security.oauth2.common.exceptions.UserDeniedAuthorizationException;
 
@@ -87,7 +87,7 @@ public void writeValueAsStringUnsupportedGrantType() throws Exception {
 
 	@Test
 	public void writeValueAsStringUnauthorizedClient() throws Exception {
-		oauthException = new UnauthorizedClientException(DETAILS);
+		oauthException = new UnauthorizedUserException(DETAILS);
 		String expected = createResponse(oauthException.getOAuth2ErrorCode());
 		assertEquals(expected,mapper.writeValueAsString(oauthException));
 	}

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/http/converter/jaxb/TestJaxbOAuth2ExceptionMessageConverter.java
Patch:
@@ -31,7 +31,7 @@
 import org.springframework.security.oauth2.common.exceptions.InvalidTokenException;
 import org.springframework.security.oauth2.common.exceptions.OAuth2Exception;
 import org.springframework.security.oauth2.common.exceptions.RedirectMismatchException;
-import org.springframework.security.oauth2.common.exceptions.UnauthorizedClientException;
+import org.springframework.security.oauth2.common.exceptions.UnauthorizedUserException;
 import org.springframework.security.oauth2.common.exceptions.UnsupportedGrantTypeException;
 import org.springframework.security.oauth2.common.exceptions.UserDeniedAuthorizationException;
 
@@ -94,7 +94,7 @@ public void writeUnsupportedGrantType() throws Exception {
 
 	@Test
 	public void writeUnauthorizedClient() throws Exception {
-		OAuth2Exception oauthException = new UnauthorizedClientException(DETAILS);
+		OAuth2Exception oauthException = new UnauthorizedUserException(DETAILS);
 		String expected = createResponse(oauthException.getOAuth2ErrorCode());
 		converter.write(oauthException, contentType, outputMessage);
 		assertEquals(expected, getOutput());
@@ -182,7 +182,7 @@ public void readUnauthorizedClient() throws Exception {
 		String accessToken = createResponse(OAuth2Exception.UNAUTHORIZED_CLIENT);
 		when(inputMessage.getBody()).thenReturn(createInputStream(accessToken));
 		@SuppressWarnings("unused")
-		UnauthorizedClientException result = (UnauthorizedClientException) converter.read(OAuth2Exception.class,
+		UnauthorizedUserException result = (UnauthorizedUserException) converter.read(OAuth2Exception.class,
 				inputMessage);
 	}
 

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/WhitelabelApprovalEndpoint.java
Patch:
@@ -77,6 +77,7 @@ public void render(Map<String, ?> model, HttpServletRequest request, HttpServlet
 			map.put("path", (Object) request.getContextPath());
 			context.setRootObject(map);
 			String result = helper.replacePlaceholders(template, resolver);
+			response.setContentType(getContentType());
 			response.getWriter().append(result);
 		}
 

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/exceptions/RedirectMismatchException.java
Patch:
@@ -16,6 +16,6 @@ public RedirectMismatchException(String msg) {
 
   @Override
   public String getOAuth2ErrorCode() {
-    return "redirect_uri_mismatch";
+    return "invalid_grant";
   }
 }

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/code/AuthorizationCodeTokenGranter.java
Patch:
@@ -22,14 +22,14 @@
 import org.springframework.security.core.Authentication;
 import org.springframework.security.oauth2.common.exceptions.InvalidClientException;
 import org.springframework.security.oauth2.common.exceptions.InvalidGrantException;
-import org.springframework.security.oauth2.common.exceptions.OAuth2Exception;
+import org.springframework.security.oauth2.common.exceptions.InvalidRequestException;
 import org.springframework.security.oauth2.common.exceptions.RedirectMismatchException;
 import org.springframework.security.oauth2.common.util.OAuth2Utils;
 import org.springframework.security.oauth2.provider.ClientDetails;
 import org.springframework.security.oauth2.provider.ClientDetailsService;
 import org.springframework.security.oauth2.provider.OAuth2Authentication;
-import org.springframework.security.oauth2.provider.OAuth2RequestFactory;
 import org.springframework.security.oauth2.provider.OAuth2Request;
+import org.springframework.security.oauth2.provider.OAuth2RequestFactory;
 import org.springframework.security.oauth2.provider.TokenRequest;
 import org.springframework.security.oauth2.provider.token.AbstractTokenGranter;
 import org.springframework.security.oauth2.provider.token.AuthorizationServerTokenServices;
@@ -60,7 +60,7 @@ protected OAuth2Authentication getOAuth2Authentication(ClientDetails client, Tok
 		String redirectUri = parameters.get(OAuth2Utils.REDIRECT_URI);
 
 		if (authorizationCode == null) {
-			throw new OAuth2Exception("An authorization code must be supplied.");
+			throw new InvalidRequestException("An authorization code must be supplied.");
 		}
 
 		OAuth2Authentication storedAuth = authorizationCodeServices.consumeAuthorizationCode(authorizationCode);

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/AuthorizationEndpoint.java
Patch:
@@ -32,7 +32,6 @@
 import org.springframework.security.oauth2.common.exceptions.BadClientCredentialsException;
 import org.springframework.security.oauth2.common.exceptions.ClientAuthenticationException;
 import org.springframework.security.oauth2.common.exceptions.InvalidClientException;
-import org.springframework.security.oauth2.common.exceptions.InvalidGrantException;
 import org.springframework.security.oauth2.common.exceptions.InvalidRequestException;
 import org.springframework.security.oauth2.common.exceptions.OAuth2Exception;
 import org.springframework.security.oauth2.common.exceptions.RedirectMismatchException;
@@ -283,7 +282,7 @@ private String appendAccessToken(AuthorizationRequest authorizationRequest, OAut
         
 		String requestedRedirect = authorizationRequest.getRedirectUri();
 		if (accessToken == null) {
-			throw new InvalidGrantException("An implicit grant could not be made");
+			throw new InvalidRequestException("An implicit grant could not be made");
 		}
 		StringBuilder url = new StringBuilder(requestedRedirect);
 		if (requestedRedirect.contains("#")) {

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/DefaultRedirectResolver.java
Patch:
@@ -23,6 +23,7 @@
 import java.util.Set;
 
 import org.springframework.security.oauth2.common.exceptions.InvalidGrantException;
+import org.springframework.security.oauth2.common.exceptions.InvalidRequestException;
 import org.springframework.security.oauth2.common.exceptions.OAuth2Exception;
 import org.springframework.security.oauth2.common.exceptions.RedirectMismatchException;
 import org.springframework.security.oauth2.provider.ClientDetails;
@@ -79,7 +80,7 @@ else if (StringUtils.hasText(requestedRedirect)) {
 			return requestedRedirect;
 		}
 		else {
-			throw new RedirectMismatchException("A redirect_uri must be supplied.");
+			throw new InvalidRequestException("A redirect_uri must be supplied.");
 		}
 
 	}

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/TokenEndpoint.java
Patch:
@@ -83,10 +83,10 @@ public ResponseEntity<OAuth2AccessToken> getAccessToken(Principal principal,
 		TokenRequest tokenRequest = getOAuth2RequestFactory().createTokenRequest(parameters, authenticatedClient);
 		
 		
-		if (clientId != null) {
+		if (clientId != null && !clientId.equals("")) {
 			// Only validate the client details if a client authenticated during this
 			// request.
-			if (!tokenRequest.getClientId().equals(clientId)) {
+			if (!clientId.equals(tokenRequest.getClientId())) {
 				// double check to make sure that the client ID in the token request is the same as that in the authenticated client
 				throw new InvalidClientException("Given client ID does not match authenticated client");
 			}

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/token/grant/client/ClientCredentialsAccessTokenProvider.java
Patch:
@@ -49,7 +49,6 @@ private MultiValueMap<String, String> getParametersForTokenRequest(ClientCredent
 
 		MultiValueMap<String, String> form = new LinkedMultiValueMap<String, String>();
 		form.set("grant_type", "client_credentials");
-		form.set("client_id", resource.getClientId());
 
 		if (resource.isScoped()) {
 

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/BaseRequest.java
Patch:
@@ -75,7 +75,7 @@ protected void setScope(Collection<String> scope) {
 			 * This is really an error, but it can catch out unsuspecting users and it's easy to fix. It happens when an
 			 * AuthorizationRequest gets bound accidentally from request parameters using @ModelAttribute.
 			 */
-			if (value.contains(" ") || scope.contains(",")) {
+			if (value.contains(" ") || value.contains(",")) {
 				scope = OAuth2Utils.parseParameterList(value);
 			}
 		}

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/expression/TestOAuth2MethodSecurityExpressionHandler.java
Patch:
@@ -82,7 +82,7 @@ public void testScopes() throws Exception {
 	@Test
 	public void testScopesRegex() throws Exception {
 
-		OAuth2Request clientAuthentication = RequestTokenFactory.createOAuth2Request(null, "foo", null, false, Collections.singleton("ns_admin:read"), null, null, null);
+		OAuth2Request clientAuthentication = RequestTokenFactory.createOAuth2Request(null, "foo", null, false, Collections.singleton("ns_admin:read"), null, null, null, null);
 
 		Authentication userAuthentication = null;
 		OAuth2Authentication oAuth2Authentication = new OAuth2Authentication(clientAuthentication, userAuthentication);
@@ -98,7 +98,7 @@ public void testScopesRegex() throws Exception {
 	@Test(expected = AccessDeniedException.class)
 	public void testScopesRegexThrowsException() throws Exception {
 
-		OAuth2Request clientAuthentication = RequestTokenFactory.createOAuth2Request(null, "foo", null, false, Collections.singleton("ns_admin:read"), null, null, null);
+		OAuth2Request clientAuthentication = RequestTokenFactory.createOAuth2Request(null, "foo", null, false, Collections.singleton("ns_admin:read"), null, null, null, null);
 
 		Authentication userAuthentication = null;
 		OAuth2Authentication oAuth2Authentication = new OAuth2Authentication(clientAuthentication, userAuthentication);

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/AuthorizationRequest.java
Patch:
@@ -103,7 +103,7 @@ public AuthorizationRequest(Map<String, String> authorizationParameters, Map<Str
 	}
 
 	public OAuth2Request createOAuth2Request() {
-		return new OAuth2Request(getApprovalParameters(), getClientId(), getAuthorities(), isApproved(), getScope(), getResourceIds(), getRedirectUri(), getResponseTypes(), getExtensions());
+		return new OAuth2Request(getRequestParameters(), getClientId(), getAuthorities(), isApproved(), getScope(), getResourceIds(), getRedirectUri(), getResponseTypes(), getExtensions());
 	}
 
 	/**

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/AuthorizationRequest.java
Patch:
@@ -103,7 +103,7 @@ public AuthorizationRequest(Map<String, String> authorizationParameters, Map<Str
 	}
 
 	public OAuth2Request createOAuth2Request() {
-		return new OAuth2Request(getApprovalParameters(), getClientId(), getAuthorities(), isApproved(), getScope(), getResourceIds(), getRedirectUri(), getExtensions());
+		return new OAuth2Request(getApprovalParameters(), getClientId(), getAuthorities(), isApproved(), getScope(), getResourceIds(), getRedirectUri(), getResponseTypes(), getExtensions());
 	}
 
 	/**

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/TokenRequest.java
Patch:
@@ -77,7 +77,7 @@ public OAuth2Request createOAuth2Request(ClientDetails client) {
 		Map<String,String> requestParameters = getRequestParameters();
 		HashMap<String, String> modifiable = new HashMap<String, String>(requestParameters);
 		modifiable.remove("password");
-		return new OAuth2Request(modifiable, client.getClientId(), client.getAuthorities(), true, this.getScope(), null, null, null);
+		return new OAuth2Request(modifiable, client.getClientId(), client.getAuthorities(), true, this.getScope(), null, null, null, null);
 	}
 	
 }

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/client/filter/TestOAuth2ClientAuthenticationProcessingFilter.java
Patch:
@@ -54,7 +54,7 @@ public void testAuthentication() throws Exception {
 		Mockito.when(restTemplate.getAccessToken()).thenReturn(new DefaultOAuth2AccessToken("FOO"));
 		Set<String> scopes = new HashSet<String>();
 		scopes.addAll(Arrays.asList("read", "write"));
-		OAuth2Request storedOAuth2Request = RequestTokenFactory.createOAuth2Request(null, "client", null, false, scopes, null, null, null);
+		OAuth2Request storedOAuth2Request = RequestTokenFactory.createOAuth2Request(null, "client", null, false, scopes, null, null, null, null);
 		this.authentication = new OAuth2Authentication(storedOAuth2Request, null);
 		Mockito.when(tokenServices.loadAuthentication("FOO")).thenReturn(authentication);
 		Authentication authentication = filter.attemptAuthentication(null, null);

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/RequestTokenFactory.java
Patch:
@@ -30,9 +30,9 @@ public class RequestTokenFactory {
 
 	public static OAuth2Request createOAuth2Request(Map<String, String> requestParameters, String clientId,
 			Collection<? extends GrantedAuthority> authorities, boolean approved, Set<String> scope,
-			Set<String> resourceIds, String redirectUri, Map<String, Serializable> extensionProperties) {
+			Set<String> resourceIds, String redirectUri, Set<String> responseTypes, Map<String, Serializable> extensionProperties) {
 		return new OAuth2Request(requestParameters, clientId, authorities, approved, scope, resourceIds, redirectUri,
-				extensionProperties);
+				responseTypes, extensionProperties);
 	}
 
 }

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/TestOAuth2Authentication.java
Patch:
@@ -16,7 +16,7 @@
 public class TestOAuth2Authentication {
 
 	private OAuth2Request request = RequestTokenFactory.createOAuth2Request(null, "id", null, false,
-			Collections.singleton("read"), null, null, null);
+			Collections.singleton("read"), null, null, null, null);
 
 	private UsernamePasswordAuthenticationToken userAuthentication = new UsernamePasswordAuthenticationToken("foo",
 			"bar", Collections.singleton(new SimpleGrantedAuthority("ROLE_USER")));
@@ -25,7 +25,7 @@ public class TestOAuth2Authentication {
 	@Rollback
 	public void testIsAuthenticated() {
 		request = RequestTokenFactory.createOAuth2Request(null, "id", null, true, Collections.singleton("read"), null,
-				null, null);
+				null, null, null);
 		OAuth2Authentication authentication = new OAuth2Authentication(request, userAuthentication);
 		assertTrue(authentication.isAuthenticated());
 	}

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/authentication/TestOAuth2AuthenticationManager.java
Patch:
@@ -37,7 +37,7 @@ public class TestOAuth2AuthenticationManager {
 
 	private Authentication userAuthentication = new UsernamePasswordAuthenticationToken("marissa", "koala");
 
-	private OAuth2Authentication authentication = new OAuth2Authentication(RequestTokenFactory.createOAuth2Request(null, "foo", null, false, null, null, null, null), userAuthentication);
+	private OAuth2Authentication authentication = new OAuth2Authentication(RequestTokenFactory.createOAuth2Request(null, "foo", null, false, null, null, null, null, null), userAuthentication);
 	
 	{
 		manager.setTokenServices(tokenServices);

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/authentication/TestOAuth2AuthenticationProcessingFilter.java
Patch:
@@ -43,7 +43,7 @@ public class TestOAuth2AuthenticationProcessingFilter {
 
 	private Authentication userAuthentication = new UsernamePasswordAuthenticationToken("marissa", "koala");
 
-	private OAuth2Authentication authentication = new OAuth2Authentication(RequestTokenFactory.createOAuth2Request(null, "foo", null, false, null, null, null, null), userAuthentication);
+	private OAuth2Authentication authentication = new OAuth2Authentication(RequestTokenFactory.createOAuth2Request(null, "foo", null, false, null, null, null, null, null), userAuthentication);
 
 	private FilterChain chain = Mockito.mock(FilterChain.class);
 

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/code/TestAuthorizationCodeServicesBase.java
Patch:
@@ -17,7 +17,7 @@ public abstract class TestAuthorizationCodeServicesBase {
 
 	@Test
 	public void testCreateAuthorizationCode() {
-		OAuth2Request storedOAuth2Request = RequestTokenFactory.createOAuth2Request(null, "id", null, false, null, null, null, null);
+		OAuth2Request storedOAuth2Request = RequestTokenFactory.createOAuth2Request(null, "id", null, false, null, null, null, null, null);
 		OAuth2Authentication expectedAuthentication = new OAuth2Authentication(
 				storedOAuth2Request, new TestAuthentication(
 						"test2", false)); 
@@ -31,7 +31,7 @@ storedOAuth2Request, new TestAuthentication(
 
 	@Test
 	public void testConsumeRemovesCode() {
-		OAuth2Request storedOAuth2Request = RequestTokenFactory.createOAuth2Request(null, "id", null, false, null, null, null, null);
+		OAuth2Request storedOAuth2Request = RequestTokenFactory.createOAuth2Request(null, "id", null, false, null, null, null, null, null);
 		OAuth2Authentication expectedAuthentication = new OAuth2Authentication(
 				storedOAuth2Request, new TestAuthentication(
 						"test2", false));

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/expression/TestOAuth2MethodSecurityExpressionHandler.java
Patch:
@@ -52,7 +52,7 @@ public void testOauthClient() throws Exception {
 		Authentication userAuthentication = null;
 		
 		OAuth2Request clientAuthentication = RequestTokenFactory.createOAuth2Request(request.getRequestParameters(), request.getClientId(), request.getAuthorities(), request.isApproved(), request.getScope(), request.getResourceIds(),
-				request.getRedirectUri(), request.getExtensions());
+				request.getRedirectUri(), request.getResponseTypes(), request.getExtensions());
 		
 		OAuth2Authentication oAuth2Authentication = new OAuth2Authentication(clientAuthentication, userAuthentication);
 		MethodInvocation invocation = new SimpleMethodInvocation(this, ReflectionUtils.findMethod(getClass(),
@@ -66,7 +66,7 @@ public void testOauthClient() throws Exception {
 	@Test
 	public void testScopes() throws Exception {
 		
-		OAuth2Request clientAuthentication = RequestTokenFactory.createOAuth2Request(null, "foo", null, false, Collections.singleton("read"), null, null, null);
+		OAuth2Request clientAuthentication = RequestTokenFactory.createOAuth2Request(null, "foo", null, false, Collections.singleton("read"), null, null, null, null);
 		
 		Authentication userAuthentication = null;
 		OAuth2Authentication oAuth2Authentication = new OAuth2Authentication(clientAuthentication, userAuthentication);
@@ -107,7 +107,7 @@ public void testReEvaluationWithDifferentRoot() throws Exception {
 		EvaluationContext context = handler.createEvaluationContext(clientAuthentication, invocation);
 		assertFalse((Boolean) expression.getValue(context));
 		
-		OAuth2Request storedOAuth2Request = RequestTokenFactory.createOAuth2Request(null, "foo", null, true, Collections.singleton("read"), null, null, null);
+		OAuth2Request storedOAuth2Request = RequestTokenFactory.createOAuth2Request(null, "foo", null, true, Collections.singleton("read"), null, null, null, null);
 		
 		OAuth2Authentication oAuth2Authentication = new OAuth2Authentication(storedOAuth2Request, null);
 		EvaluationContext anotherContext = handler.createEvaluationContext(oAuth2Authentication, invocation);

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/expression/TestOAuth2WebSecurityExpressionHandler.java
Patch:
@@ -46,7 +46,7 @@ public void testOauthClient() throws Exception {
 		request.setResourceIdsAndAuthoritiesFromClientDetails(new BaseClientDetails("foo", "", "", "client_credentials", "ROLE_CLIENT"));
 		
 		OAuth2Request clientAuthentication = RequestTokenFactory.createOAuth2Request(request.getRequestParameters(), request.getClientId(), request.getAuthorities(), request.isApproved(), request.getScope(), request.getResourceIds(),
-				request.getRedirectUri(), request.getExtensions());
+				request.getRedirectUri(), request.getResponseTypes(), request.getExtensions());
 		
 		Authentication userAuthentication = null;
 		OAuth2Authentication oAuth2Authentication = new OAuth2Authentication(clientAuthentication, userAuthentication);
@@ -57,7 +57,7 @@ public void testOauthClient() throws Exception {
 
 	@Test
 	public void testScopes() throws Exception {
-		OAuth2Request clientAuthentication = RequestTokenFactory.createOAuth2Request(null, "foo", null, false, Collections.singleton("read"), null, null, null);
+		OAuth2Request clientAuthentication = RequestTokenFactory.createOAuth2Request(null, "foo", null, false, Collections.singleton("read"), null, null, null, null);
 		Authentication userAuthentication = null;
 		OAuth2Authentication oAuth2Authentication = new OAuth2Authentication(clientAuthentication, userAuthentication);
 		FilterInvocation invocation = new FilterInvocation("/foo", "GET");

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/AbstractTestDefaultTokenServices.java
Patch:
@@ -171,11 +171,11 @@ public void testOneAccessTokenPerAuthentication() throws Exception {
 	@Test
 	public void testOneAccessTokenPerUniqueAuthentication() throws Exception {
 		getTokenServices().createAccessToken(
-				new OAuth2Authentication(RequestTokenFactory.createOAuth2Request(null, "id", null, false, Collections.singleton("read"), null, null, null),
+				new OAuth2Authentication(RequestTokenFactory.createOAuth2Request(null, "id", null, false, Collections.singleton("read"), null, null, null, null),
 						new TestAuthentication("test2", false)));
 		assertEquals(1, getAccessTokenCount());
 		getTokenServices().createAccessToken(
-				new OAuth2Authentication(RequestTokenFactory.createOAuth2Request(null, "id", null, false, Collections.singleton("write"), null, null, null),
+				new OAuth2Authentication(RequestTokenFactory.createOAuth2Request(null, "id", null, false, Collections.singleton("write"), null, null, null, null),
 						new TestAuthentication("test2", false)));
 		assertEquals(2, getAccessTokenCount());
 	}
@@ -207,7 +207,7 @@ public void testNotReuseRefreshTokenMaintainsState() throws Exception {
 
 
 	private OAuth2Authentication createAuthentication() {
-		return new OAuth2Authentication(RequestTokenFactory.createOAuth2Request(null, "id", null, false, Collections.singleton("read"), null, null, null), new TestAuthentication("test2", false));
+		return new OAuth2Authentication(RequestTokenFactory.createOAuth2Request(null, "id", null, false, Collections.singleton("read"), null, null, null, null), new TestAuthentication("test2", false));
 	}
 
 	protected abstract int getAccessTokenCount();

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/TestInMemoryTokenStore.java
Patch:
@@ -31,7 +31,7 @@ public void createStore() {
 	@Test
 	public void testTokenCountConsistency() throws Exception {
 		for (int i = 0; i <= 10; i++) {
-			OAuth2Authentication expectedAuthentication = new OAuth2Authentication(RequestTokenFactory.createOAuth2Request(null, "id" + i, null, false, null, null, null, null), new TestAuthentication("test", false));
+			OAuth2Authentication expectedAuthentication = new OAuth2Authentication(RequestTokenFactory.createOAuth2Request(null, "id" + i, null, false, null, null, null, null, null), new TestAuthentication("test", false));
 			DefaultOAuth2AccessToken expectedOAuth2AccessToken = new DefaultOAuth2AccessToken("testToken" + i);
 			expectedOAuth2AccessToken.setExpiration(new Date(System.currentTimeMillis() - 1000));
 			if (i > 1) {
@@ -43,7 +43,7 @@ public void testTokenCountConsistency() throws Exception {
 
 	@Test
 	public void testTokenCountConsistentWithExpiryQueue() throws Exception {
-		OAuth2Authentication expectedAuthentication = new OAuth2Authentication(RequestTokenFactory.createOAuth2Request(null, "id", null, false, null, null, null, null), new TestAuthentication("test", false));
+		OAuth2Authentication expectedAuthentication = new OAuth2Authentication(RequestTokenFactory.createOAuth2Request(null, "id", null, false, null, null, null, null, null), new TestAuthentication("test", false));
 		DefaultOAuth2AccessToken expectedOAuth2AccessToken = new DefaultOAuth2AccessToken("testToken");
 		expectedOAuth2AccessToken.setExpiration(new Date(System.currentTimeMillis()+10000));
 		for (int i = 0; i <= 10; i++) {
@@ -56,7 +56,7 @@ public void testTokenCountConsistentWithExpiryQueue() throws Exception {
 	public void testAutoFlush() throws Exception {
 		getTokenStore().setFlushInterval(3);
 		for (int i = 0; i <= 10; i++) {
-			OAuth2Authentication expectedAuthentication = new OAuth2Authentication(RequestTokenFactory.createOAuth2Request(null, "id" + i, null, false, null, null, null, null), new TestAuthentication("test", false));
+			OAuth2Authentication expectedAuthentication = new OAuth2Authentication(RequestTokenFactory.createOAuth2Request(null, "id" + i, null, false, null, null, null, null, null), new TestAuthentication("test", false));
 			DefaultOAuth2AccessToken expectedOAuth2AccessToken = new DefaultOAuth2AccessToken("testToken" + i);
 			expectedOAuth2AccessToken.setExpiration(new Date(System.currentTimeMillis() - 1000));
 			if (i > 2) {

File: samples/oauth2/sparklr/src/test/java/org/springframework/security/oauth2/provider/TestAuthorizationCodeProvider.java
Patch:
@@ -223,7 +223,6 @@ public void testNoClientIdProvided() throws Exception {
 		ResponseEntity<String> response = attemptToGetConfirmationPage(null, "http://anywhere");
 		// With no client id you get an InvalidClientException on the server which is forwarded to /oauth/error
 		assertEquals(HttpStatus.UNAUTHORIZED, response.getStatusCode());
-		// TODO: assert the HTML content
 		String body = response.getBody();
 		assertTrue("Wrong body: " + body, body.contains("<html"));
 		assertTrue("Wrong body: " + body, body.contains("OAuth2 Error"));

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/resource/UserRedirectRequiredException.java
Patch:
@@ -46,7 +46,6 @@ public Map<String, String> getRequestParams() {
 	 * 
 	 * @return The key to the state to preserve.
 	 */
-	// TODO: is this obsolete or in the wrong place?
 	public String getStateKey() {
 		return stateKey;
 	}

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/approval/TokenServicesUserApprovalHandler.java
Patch:
@@ -82,7 +82,7 @@ public boolean isApproved(AuthorizationRequest authorizationRequest, Authenticat
 		String flag = authorizationRequest.getApprovalParameters().get(approvalParameter);
 		boolean approved = flag != null && flag.toLowerCase().equals("true");
 
-		OAuth2Request storedOAuth2Request = requestFactory.createStoredAuthorizationRequest(authorizationRequest);
+		OAuth2Request storedOAuth2Request = requestFactory.createOAuth2Request(authorizationRequest);
 		
 		OAuth2Authentication authentication = new OAuth2Authentication(storedOAuth2Request, userAuthentication);
 		if (logger.isDebugEnabled()) {

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/AuthorizationEndpoint.java
Patch:
@@ -249,7 +249,7 @@ private ModelAndView getUserApprovalPageResponse(Map<String, Object> model,
 	// We can grant a token and return it with implicit approval.
 	private ModelAndView getImplicitGrantResponse(AuthorizationRequest authorizationRequest) {
 		try {
-			TokenRequest tokenRequest = getOAuth2RequestFactory().createTokenRequestFromAuthorizationRequest(authorizationRequest);
+			TokenRequest tokenRequest = getOAuth2RequestFactory().createTokenRequest(authorizationRequest, "implicit");
 			OAuth2AccessToken accessToken = getTokenGranter().grant("implicit", tokenRequest);
 			if (accessToken == null) {
 				throw new UnsupportedResponseTypeException("Unsupported response type: token");
@@ -326,7 +326,7 @@ private String generateCode(AuthorizationRequest authorizationRequest, Authentic
 
 		try {
 			
-			OAuth2Request storedOAuth2Request = getOAuth2RequestFactory().createStoredAuthorizationRequest(authorizationRequest);
+			OAuth2Request storedOAuth2Request = getOAuth2RequestFactory().createOAuth2Request(authorizationRequest);
 			
 			OAuth2Authentication combinedAuth = new OAuth2Authentication(storedOAuth2Request,
 					authentication);

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/TokenEndpointAuthenticationFilter.java
Patch:
@@ -139,7 +139,6 @@ public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain)
 							"No client authentication found. Remember to put a filter upstream of the TokenEndpointAuthenticationFilter.");
 				}
 				
-				// FIXME: use client id in factory method
 				Map<String, String> map = getSingleValueMap(request);
 				map.put(OAuth2Utils.CLIENT_ID, clientAuth.getName());
 				AuthorizationRequest authorizationRequest = oAuth2RequestFactory.createAuthorizationRequest(map);
@@ -150,7 +149,7 @@ public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain)
 					authorizationRequest.setApproved(true);
 				}
 
-				OAuth2Request storedOAuth2Request = oAuth2RequestFactory.createStoredAuthorizationRequest(authorizationRequest);
+				OAuth2Request storedOAuth2Request = oAuth2RequestFactory.createOAuth2Request(authorizationRequest);
 				
 				SecurityContextHolder.getContext().setAuthentication(
 						new OAuth2Authentication(storedOAuth2Request, authResult));

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/implicit/ImplicitTokenGranter.java
Patch:
@@ -48,7 +48,7 @@ protected OAuth2Authentication getOAuth2Authentication(TokenRequest clientToken)
 			throw new InsufficientAuthenticationException("There is no currently logged in user");
 		}
 
-		OAuth2Request storedOAuth2Request = getRequestFactory().createStoredTokenRequest(clientToken);
+		OAuth2Request storedOAuth2Request = getRequestFactory().createOAuth2Request(clientToken);
 		
 		return new OAuth2Authentication(storedOAuth2Request, userAuth);
 

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/approval/TestTokenServicesUserApprovalHandler.java
Patch:
@@ -68,7 +68,7 @@ public void testMemorizedApproval() {
 		AuthorizationRequest authorizationRequest = new AuthorizationRequest(parameters, null, "foo", null, null, null, false, null, null, null);
 		authorizationRequest.setApproved(false);
 		TestAuthentication userAuthentication = new TestAuthentication("marissa", true);
-		OAuth2Request storedOAuth2Request = requestFactory.createStoredAuthorizationRequest(authorizationRequest);
+		OAuth2Request storedOAuth2Request = requestFactory.createOAuth2Request(authorizationRequest);
 		
 		tokenServices.createAccessToken(new OAuth2Authentication(storedOAuth2Request, userAuthentication));
 		assertTrue(handler.isApproved(authorizationRequest, userAuthentication));

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/expression/TestOAuth2MethodSecurityExpressionHandler.java
Patch:
@@ -52,7 +52,7 @@ public void testOauthClient() throws Exception {
 		Authentication userAuthentication = null;
 		
 		OAuth2Request clientAuthentication = RequestTokenFactory.createOAuth2Request(request.getRequestParameters(), request.getClientId(), request.getAuthorities(), request.isApproved(), request.getScope(), request.getResourceIds(),
-				request.getRedirectUri(), request.getExtensionProperties());
+				request.getRedirectUri(), request.getExtensions());
 		
 		OAuth2Authentication oAuth2Authentication = new OAuth2Authentication(clientAuthentication, userAuthentication);
 		MethodInvocation invocation = new SimpleMethodInvocation(this, ReflectionUtils.findMethod(getClass(),

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/expression/TestOAuth2SecurityExpressionMethods.java
Patch:
@@ -47,7 +47,7 @@ public void testOauthClient() throws Exception {
 		Authentication userAuthentication = null;
 		
 		OAuth2Request clientAuthentication = RequestTokenFactory.createOAuth2Request(request.getRequestParameters(), request.getClientId(), request.getAuthorities(), request.isApproved(), request.getScope(), request.getResourceIds(),
-				request.getRedirectUri(), request.getExtensionProperties());
+				request.getRedirectUri(), request.getExtensions());
 		
 		OAuth2Authentication oAuth2Authentication = new OAuth2Authentication(clientAuthentication, userAuthentication);
 		assertTrue(new OAuth2SecurityExpressionMethods(oAuth2Authentication, true).clientHasAnyRole("ROLE_CLIENT"));

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/expression/TestOAuth2WebSecurityExpressionHandler.java
Patch:
@@ -46,7 +46,7 @@ public void testOauthClient() throws Exception {
 		request.setResourceIdsAndAuthoritiesFromClientDetails(new BaseClientDetails("foo", "", "", "client_credentials", "ROLE_CLIENT"));
 		
 		OAuth2Request clientAuthentication = RequestTokenFactory.createOAuth2Request(request.getRequestParameters(), request.getClientId(), request.getAuthorities(), request.isApproved(), request.getScope(), request.getResourceIds(),
-				request.getRedirectUri(), request.getExtensionProperties());
+				request.getRedirectUri(), request.getExtensions());
 		
 		Authentication userAuthentication = null;
 		OAuth2Authentication oAuth2Authentication = new OAuth2Authentication(clientAuthentication, userAuthentication);

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/util/OAuth2Utils.java
Patch:
@@ -46,7 +46,7 @@ public static Set<String> parseParameterList(String values) {
 		}
 		return result;
 	}
-
+	
 	/**
 	 * Formats a set of string values into a format appropriate for sending as a single-valued form value.
 	 * 

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/CompositeTokenGranter.java
Patch:
@@ -33,9 +33,9 @@ public CompositeTokenGranter(List<TokenGranter> tokenGranters) {
 		this.tokenGranters = new ArrayList<TokenGranter>(tokenGranters);
 	}
 	
-	public OAuth2AccessToken grant(String grantType, AuthorizationRequest authorizationRequest) {
+	public OAuth2AccessToken grant(String grantType, OAuth2Request tokenRequest) {
 		for (TokenGranter granter : tokenGranters) {
-			OAuth2AccessToken grant = granter.grant(grantType, authorizationRequest);
+			OAuth2AccessToken grant = granter.grant(grantType, tokenRequest);
 			if (grant!=null) {
 				return grant;
 			}

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/OAuth2Authentication.java
Patch:
@@ -13,7 +13,7 @@ public class OAuth2Authentication extends AbstractAuthenticationToken {
 
 	private static final long serialVersionUID = -4809832298438307309L;
 
-	private final AuthorizationRequest clientAuthentication;
+	private final OAuth2Request clientAuthentication;
 
 	private final Authentication userAuthentication;
 
@@ -24,7 +24,7 @@ public class OAuth2Authentication extends AbstractAuthenticationToken {
 	 * @param authorizationRequest The authorization request (must not be null).
 	 * @param userAuthentication The user authentication (possibly null).
 	 */
-	public OAuth2Authentication(AuthorizationRequest authorizationRequest, Authentication userAuthentication) {
+	public OAuth2Authentication(OAuth2Request authorizationRequest, Authentication userAuthentication) {
 		super(userAuthentication == null ? authorizationRequest.getAuthorities() : userAuthentication.getAuthorities());
 		this.clientAuthentication = authorizationRequest;
 		this.userAuthentication = userAuthentication;
@@ -53,7 +53,7 @@ public boolean isClientOnly() {
 	 * 
 	 * @return The client authentication.
 	 */
-	public AuthorizationRequest getAuthorizationRequest() {
+	public OAuth2Request getAuthorizationRequest() {
 		return clientAuthentication;
 	}
 

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/TokenGranter.java
Patch:
@@ -27,6 +27,6 @@
  */
 public interface TokenGranter {
 
-	OAuth2AccessToken grant(String grantType, AuthorizationRequest authorizationRequest);
+	OAuth2AccessToken grant(String grantType, OAuth2Request tokenRequest);
 
 }

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/authentication/OAuth2AuthenticationManager.java
Patch:
@@ -20,7 +20,7 @@
 import org.springframework.security.core.AuthenticationException;
 import org.springframework.security.oauth2.client.resource.OAuth2AccessDeniedException;
 import org.springframework.security.oauth2.common.exceptions.InvalidTokenException;
-import org.springframework.security.oauth2.provider.AuthorizationRequest;
+import org.springframework.security.oauth2.provider.OAuth2Request;
 import org.springframework.security.oauth2.provider.OAuth2Authentication;
 import org.springframework.security.oauth2.provider.token.ResourceServerTokenServices;
 import org.springframework.util.Assert;
@@ -55,7 +55,7 @@ public void afterPropertiesSet() {
 	/**
 	 * Expects the incoming authentication request to have a principal value that is an access token value (e.g. from an
 	 * authorization header) .Loads an authentication from the {@link ResourceServerTokenServices} and checks that the
-	 * resource id is contained in the {@link AuthorizationRequest} (if one is specified). Also copies authentication
+	 * resource id is contained in the {@link OAuth2Request} (if one is specified). Also copies authentication
 	 * details over from the input to the output (e.g. typically so that the access token value and request details can
 	 * be reported later).
 	 * 

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/client/ClientCredentialsTokenGranter.java
Patch:
@@ -18,8 +18,8 @@
 
 import org.springframework.security.oauth2.common.DefaultOAuth2AccessToken;
 import org.springframework.security.oauth2.common.OAuth2AccessToken;
-import org.springframework.security.oauth2.provider.AuthorizationRequest;
 import org.springframework.security.oauth2.provider.ClientDetailsService;
+import org.springframework.security.oauth2.provider.OAuth2Request;
 import org.springframework.security.oauth2.provider.token.AbstractTokenGranter;
 import org.springframework.security.oauth2.provider.token.AuthorizationServerTokenServices;
 
@@ -37,8 +37,8 @@ public ClientCredentialsTokenGranter(AuthorizationServerTokenServices tokenServi
 	}
 
 	@Override
-	public OAuth2AccessToken grant(String grantType, AuthorizationRequest authorizationRequest) {
-		OAuth2AccessToken token = super.grant(grantType, authorizationRequest);
+	public OAuth2AccessToken grant(String grantType, OAuth2Request tokenRequest) {
+		OAuth2AccessToken token = super.grant(grantType, tokenRequest);
 		if (token != null) {
 			DefaultOAuth2AccessToken norefresh = new DefaultOAuth2AccessToken(token);
 			// The spec says that client credentials are not allowed to get a refresh token

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/expression/OAuth2ExpressionUtils.java
Patch:
@@ -18,8 +18,8 @@
 import org.springframework.security.core.Authentication;
 import org.springframework.security.core.GrantedAuthority;
 import org.springframework.security.core.authority.AuthorityUtils;
-import org.springframework.security.oauth2.provider.AuthorizationRequest;
 import org.springframework.security.oauth2.provider.OAuth2Authentication;
+import org.springframework.security.oauth2.provider.OAuth2Request;
 
 /**
  * @author Dave Syer
@@ -29,7 +29,7 @@ public abstract class OAuth2ExpressionUtils {
 
 	public static boolean clientHasAnyRole(Authentication authentication, String... roles) {
 		if (authentication instanceof OAuth2Authentication) {
-			AuthorizationRequest clientAuthentication = ((OAuth2Authentication) authentication).getAuthorizationRequest();
+			OAuth2Request clientAuthentication = ((OAuth2Authentication) authentication).getAuthorizationRequest();
 			Collection<? extends GrantedAuthority> clientAuthorities = clientAuthentication.getAuthorities();
 			if (clientAuthorities != null) {
 				Set<String> roleSet = AuthorityUtils.authorityListToSet(clientAuthorities);
@@ -74,7 +74,7 @@ public static boolean isOAuthUserAuth(Authentication authentication) {
 	public static boolean hasAnyScope(Authentication authentication, String[] scopes) {
 
 		if (authentication instanceof OAuth2Authentication) {
-			AuthorizationRequest clientAuthentication = ((OAuth2Authentication) authentication).getAuthorizationRequest();
+			OAuth2Request clientAuthentication = ((OAuth2Authentication) authentication).getAuthorizationRequest();
 			Collection<String> assigned = clientAuthentication.getScope();
 			if (assigned != null) {
 				for (String scope : scopes) {

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/implicit/ImplicitTokenGranter.java
Patch:
@@ -20,7 +20,7 @@
 import org.springframework.security.authentication.InsufficientAuthenticationException;
 import org.springframework.security.core.Authentication;
 import org.springframework.security.core.context.SecurityContextHolder;
-import org.springframework.security.oauth2.provider.AuthorizationRequest;
+import org.springframework.security.oauth2.provider.OAuth2Request;
 import org.springframework.security.oauth2.provider.ClientDetailsService;
 import org.springframework.security.oauth2.provider.OAuth2Authentication;
 import org.springframework.security.oauth2.provider.token.AbstractTokenGranter;
@@ -39,7 +39,7 @@ public ImplicitTokenGranter(AuthorizationServerTokenServices tokenServices, Clie
 	}
 
 	@Override
-	protected OAuth2Authentication getOAuth2Authentication(AuthorizationRequest clientToken) {
+	protected OAuth2Authentication getOAuth2Authentication(OAuth2Request clientToken) {
 
 		Authentication userAuth = SecurityContextHolder.getContext().getAuthentication();
 		if (userAuth==null || !userAuth.isAuthenticated()) {

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/AuthorizationServerTokenServices.java
Patch:
@@ -18,8 +18,8 @@
 
 import org.springframework.security.core.AuthenticationException;
 import org.springframework.security.oauth2.common.OAuth2AccessToken;
-import org.springframework.security.oauth2.provider.AuthorizationRequest;
 import org.springframework.security.oauth2.provider.OAuth2Authentication;
+import org.springframework.security.oauth2.provider.OAuth2Request;
 
 /**
  * @author Ryan Heaton
@@ -46,7 +46,7 @@ public interface AuthorizationServerTokenServices {
 	 * @return The (new) access token.
 	 * @throws AuthenticationException If the refresh token is invalid or expired.
 	 */
-	OAuth2AccessToken refreshAccessToken(String refreshToken, AuthorizationRequest request)
+	OAuth2AccessToken refreshAccessToken(String refreshToken, OAuth2Request request)
 			throws AuthenticationException;
 
 	/**

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/DefaultAuthenticationKeyGenerator.java
Patch:
@@ -20,8 +20,8 @@
 import java.util.Map;
 
 import org.springframework.security.oauth2.common.util.OAuth2Utils;
-import org.springframework.security.oauth2.provider.AuthorizationRequest;
 import org.springframework.security.oauth2.provider.OAuth2Authentication;
+import org.springframework.security.oauth2.provider.OAuth2Request;
 
 /**
  * Basic key generator taking into account the client id, scope, reource ids and username (principal name) if they
@@ -40,7 +40,7 @@ public class DefaultAuthenticationKeyGenerator implements AuthenticationKeyGener
 
 	public String extractKey(OAuth2Authentication authentication) {
 		Map<String, String> values = new LinkedHashMap<String, String>();
-		AuthorizationRequest authorizationRequest = authentication.getAuthorizationRequest();
+		OAuth2Request authorizationRequest = authentication.getAuthorizationRequest();
 		if (!authentication.isClientOnly()) {
 			values.put(USERNAME, authentication.getName());
 		}

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/client/filter/TestOAuth2ClientAuthenticationProcessingFilter.java
Patch:
@@ -29,8 +29,8 @@
 import org.springframework.security.oauth2.client.OAuth2RestOperations;
 import org.springframework.security.oauth2.client.http.AccessTokenRequiredException;
 import org.springframework.security.oauth2.common.DefaultOAuth2AccessToken;
-import org.springframework.security.oauth2.provider.DefaultAuthorizationRequest;
 import org.springframework.security.oauth2.provider.OAuth2Authentication;
+import org.springframework.security.oauth2.provider.OAuth2Request;
 import org.springframework.security.oauth2.provider.token.ResourceServerTokenServices;
 
 public class TestOAuth2ClientAuthenticationProcessingFilter {
@@ -49,8 +49,8 @@ public void testAuthentication() throws Exception {
 		filter.setRestTemplate(restTemplate);
 		filter.setTokenServices(tokenServices);
 		Mockito.when(restTemplate.getAccessToken()).thenReturn(new DefaultOAuth2AccessToken("FOO"));
-		this.authentication = new OAuth2Authentication(new DefaultAuthorizationRequest("client", Arrays.asList("read",
-				"write")), null);
+		OAuth2Request request = new OAuth2Request("client", Arrays.asList("read", "write"));
+		this.authentication = new OAuth2Authentication(request, null);
 		Mockito.when(tokenServices.loadAuthentication("FOO")).thenReturn(authentication);
 		Authentication authentication = filter.attemptAuthentication(null, null);
 		assertEquals(this.authentication, authentication);

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/config/TestAuthorizationServerCustomGrantParser.java
Patch:
@@ -9,8 +9,8 @@
 import org.springframework.context.support.GenericXmlApplicationContext;
 import org.springframework.security.oauth2.common.DefaultOAuth2AccessToken;
 import org.springframework.security.oauth2.common.OAuth2AccessToken;
-import org.springframework.security.oauth2.provider.AuthorizationRequest;
 import org.springframework.security.oauth2.provider.CompositeTokenGranter;
+import org.springframework.security.oauth2.provider.OAuth2Request;
 import org.springframework.security.oauth2.provider.TokenGranter;
 
 public class TestAuthorizationServerCustomGrantParser {
@@ -37,7 +37,7 @@ public static class CustomTestTokenGranter implements TokenGranter {
 		public CustomTestTokenGranter() {}
 
 		public OAuth2AccessToken grant(String grantType,
-				AuthorizationRequest authorizationRequest) {
+				OAuth2Request OAuth2Request) {
 			if (grantType.equals("test-grant")) {
 				return new DefaultOAuth2AccessToken("test");
 			}

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/TestDefaultAuthorizationRequestManager.java
Patch:
@@ -30,7 +30,7 @@ public class TestDefaultAuthorizationRequestManager {
 	
 	private BaseClientDetails client = new BaseClientDetails();
 
-	private DefaultAuthorizationRequestManager factory = new DefaultAuthorizationRequestManager(new ClientDetailsService() {
+	private DefaultOAuth2RequestFactory factory = new DefaultOAuth2RequestFactory(new ClientDetailsService() {
 		public ClientDetails loadClientByClientId(String clientId) throws OAuth2Exception {
 			return client;
 		}
@@ -44,13 +44,13 @@ public void start() {
 
 	@Test
 	public void testCreateAuthorizationRequest() {
-		AuthorizationRequest request = factory.createAuthorizationRequest(Collections.singletonMap("client_id", "foo"));
+		OAuth2Request request = factory.createOAuth2Request(Collections.singletonMap("client_id", "foo"));
 		assertEquals("foo", request.getClientId());
 	}
 
 	@Test
 	public void testCreateAuthorizationRequestWithDefaultScopes() {
-		AuthorizationRequest request = factory.createAuthorizationRequest(Collections.singletonMap("client_id", "foo"));
+		OAuth2Request request = factory.createOAuth2Request(Collections.singletonMap("client_id", "foo"));
 		assertEquals("[bar]", request.getScope().toString());
 	}
 

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/TestOAuth2Authentication.java
Patch:
@@ -13,7 +13,7 @@
 
 public class TestOAuth2Authentication {
 
-	private DefaultAuthorizationRequest request = new DefaultAuthorizationRequest("id", Arrays.asList("read"));
+	private OAuth2Request request = new OAuth2Request("id", Arrays.asList("read"));
 
 	private UsernamePasswordAuthenticationToken userAuthentication = new UsernamePasswordAuthenticationToken("foo",
 			"bar", Collections.singleton(new SimpleGrantedAuthority("ROLE_USER")));

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/authentication/TestOAuth2AuthenticationManager.java
Patch:
@@ -22,7 +22,7 @@
 import org.mockito.Mockito;
 import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
 import org.springframework.security.core.Authentication;
-import org.springframework.security.oauth2.provider.DefaultAuthorizationRequest;
+import org.springframework.security.oauth2.provider.OAuth2Request;
 import org.springframework.security.oauth2.provider.OAuth2Authentication;
 import org.springframework.security.oauth2.provider.token.ResourceServerTokenServices;
 import org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationToken;
@@ -39,8 +39,8 @@ public class TestOAuth2AuthenticationManager {
 
 	private Authentication userAuthentication = new UsernamePasswordAuthenticationToken("marissa", "koala");
 
-	private OAuth2Authentication authentication = new OAuth2Authentication(new DefaultAuthorizationRequest(
-			Collections.<String, String> emptyMap()), userAuthentication);
+	private OAuth2Authentication authentication = new OAuth2Authentication(new OAuth2Request(
+			Collections.<String, String> emptyMap(), null, null, null, null, null, false, null, null, null), userAuthentication);
 	
 	{
 		manager.setTokenServices(tokenServices);

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/authentication/TestOAuth2AuthenticationProcessingFilter.java
Patch:
@@ -30,7 +30,7 @@
 import org.springframework.security.core.Authentication;
 import org.springframework.security.core.AuthenticationException;
 import org.springframework.security.core.context.SecurityContextHolder;
-import org.springframework.security.oauth2.provider.DefaultAuthorizationRequest;
+import org.springframework.security.oauth2.provider.OAuth2Request;
 import org.springframework.security.oauth2.provider.OAuth2Authentication;
 
 /**
@@ -45,8 +45,8 @@ public class TestOAuth2AuthenticationProcessingFilter {
 
 	private Authentication userAuthentication = new UsernamePasswordAuthenticationToken("marissa", "koala");
 
-	private OAuth2Authentication authentication = new OAuth2Authentication(new DefaultAuthorizationRequest(
-			Collections.<String, String> emptyMap()), userAuthentication);
+	private OAuth2Authentication authentication = new OAuth2Authentication(new OAuth2Request(
+			Collections.<String, String> emptyMap(), null, null, null, null, null, false, null, null, null), userAuthentication);
 
 	private FilterChain chain = Mockito.mock(FilterChain.class);
 

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/code/TestAuthorizationRequestHolder.java
Patch:
@@ -20,15 +20,15 @@
 import org.junit.Test;
 import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
 import org.springframework.security.oauth2.common.util.SerializationUtils;
-import org.springframework.security.oauth2.provider.DefaultAuthorizationRequest;
+import org.springframework.security.oauth2.provider.OAuth2Request;
 
 /**
  * @author Dave Syer
  * 
  */
 public class TestAuthorizationRequestHolder {
 
-	private AuthorizationRequestHolder holder = new AuthorizationRequestHolder(new DefaultAuthorizationRequest(
+	private AuthorizationRequestHolder holder = new AuthorizationRequestHolder(new OAuth2Request(
 			"client", Arrays.asList("read")), new UsernamePasswordAuthenticationToken("user", "pwd"));
 
 	@Test

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/AuthorizationEndpoint.java
Patch:
@@ -333,7 +333,7 @@ private String appendAccessToken(AuthorizationRequest authorizationRequest, OAut
 			Object value = additionalInformation.get(key);
 			if (value != null) {
 				url.append("&" + key + "={extra_" + key + "}");
-				vars.put("extra" + key, value);
+				vars.put("extra_" + key, value);
 			}
 		}
 		UriTemplate template = new UriTemplate(url.toString());

File: samples/oauth2/sparklr/src/test/java/org/springframework/security/oauth2/provider/TestClientCredentialsProvider.java
Patch:
@@ -101,7 +101,7 @@ public void handleError(ClientHttpResponse response) throws IOException {
 	@Test
 	@OAuth2ContextConfiguration(resource = InvalidClientCredentials.class, initialize = false)
 	public void testInvalidCredentialsWithFormAuthentication() throws Exception {
-		resource.setAuthenticationScheme(AuthenticationScheme.form);
+		resource.setClientAuthenticationScheme(AuthenticationScheme.form);
 		context.setAccessTokenProvider(new ClientCredentialsAccessTokenProvider() {
 			@Override
 			protected ResponseErrorHandler getResponseErrorHandler() {
@@ -122,7 +122,7 @@ public void handleError(ClientHttpResponse response) throws IOException {
 		}
 		// System.err.println(responseHeaders);
 		String header = responseHeaders.getFirst("WWW-Authenticate");
-		assertTrue("Wrong header: " + header, header.contains("Basic realm"));
+		assertTrue("Wrong header: " + header, header.contains("Form realm"));
 		assertEquals(HttpStatus.UNAUTHORIZED, responseStatus);
 	}
 

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/client/ClientCredentialsTokenEndpointFilter.java
Patch:
@@ -50,6 +50,8 @@ public ClientCredentialsTokenEndpointFilter() {
 
 	public ClientCredentialsTokenEndpointFilter(String path) {
 		super(path);
+		// If authentication fails the type is "Form"
+		((OAuth2AuthenticationEntryPoint)authenticationEntryPoint).setTypeName("Form");
 	}
 
 	/**

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/AuthorizationServerBeanDefinitionParser.java
Patch:
@@ -22,6 +22,7 @@
 import org.springframework.beans.factory.support.ManagedList;
 import org.springframework.beans.factory.support.ManagedMap;
 import org.springframework.beans.factory.xml.ParserContext;
+import org.springframework.beans.factory.config.RuntimeBeanReference;
 import org.springframework.security.config.BeanIds;
 import org.springframework.security.oauth2.provider.CompositeTokenGranter;
 import org.springframework.security.oauth2.provider.DefaultAuthorizationRequestManager;
@@ -177,8 +178,7 @@ protected AbstractBeanDefinition parseEndpointAndReturnFilter(Element element, P
 			for(Element customGrantElement: customGrantElements) {
 				if(!"true".equalsIgnoreCase(customGrantElement.getAttribute("disabled"))) {
 					String customGranterRef = customGrantElement.getAttribute("token-granter-ref");
-					parserContext.getRegistry().getBeanDefinition(customGranterRef);
-					tokenGranters.add(parserContext.getRegistry().getBeanDefinition(customGranterRef));
+					tokenGranters.add( new RuntimeBeanReference(customGranterRef) );
 				}
 			}
 		}

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/authentication/OAuth2AuthenticationProcessingFilter.java
Patch:
@@ -41,7 +41,7 @@
 import org.springframework.util.Assert;
 
 /**
- * A pre-authemtication filter for OAuth2 protected resources. Extracts an OAuth2 token from the in coming request and
+ * A pre-authentication filter for OAuth2 protected resources. Extracts an OAuth2 token from the incoming request and
  * uses it to populate the Spring Security context with an {@link OAuth2Authentication} (if used in conjunction with an
  * {@link OAuth2AuthenticationManager}).
  * 

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/AuthorizationRequest.java
Patch:
@@ -49,5 +49,5 @@ public interface AuthorizationRequest {
 	public String getRedirectUri();
 
 	public Set<String> getResponseTypes();
-
+	
 }
\ No newline at end of file

File: samples/oauth2/sparklr/src/test/java/org/springframework/security/oauth2/provider/TestClientCredentialsProvider.java
Patch:
@@ -94,7 +94,7 @@ public void handleError(ClientHttpResponse response) throws IOException {
 		}
 		// System.err.println(responseHeaders);
 		String header = responseHeaders.getFirst("WWW-Authenticate");
-		assertTrue("Wrong header: " + header, header.contains("error=\"invalid_client\""));
+		assertTrue("Wrong header: " + header, header.contains("Basic realm"));
 		assertEquals(HttpStatus.UNAUTHORIZED, responseStatus);
 	}
 
@@ -122,7 +122,7 @@ public void handleError(ClientHttpResponse response) throws IOException {
 		}
 		// System.err.println(responseHeaders);
 		String header = responseHeaders.getFirst("WWW-Authenticate");
-		assertTrue("Wrong header: " + header, header.contains("error=\"invalid_client\""));
+		assertTrue("Wrong header: " + header, header.contains("Basic realm"));
 		assertEquals(HttpStatus.UNAUTHORIZED, responseStatus);
 	}
 

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/config/TestResourceServerBeanDefinitionParser.java
Patch:
@@ -28,6 +28,7 @@ public void testDefaults() {
 		GenericXmlApplicationContext context = new GenericXmlApplicationContext(getClass(), getClass().getSimpleName()+"-context.xml");
 		// System.err.println(Arrays.asList(context.getBeanDefinitionNames()));
 		assertTrue(context.containsBeanDefinition("oauth2ProviderFilter"));
+		assertTrue(context.containsBeanDefinition("anotherProviderFilter"));
+		assertTrue(context.containsBeanDefinition("thirdProviderFilter"));
 	}
-
-}
+}
\ No newline at end of file

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/error/DefaultWebResponseExceptionTranslator.java
Patch:
@@ -68,6 +68,7 @@ private ResponseEntity<OAuth2Exception> handleOAuth2Exception(OAuth2Exception e)
 		int status = e.getHttpErrorCode();
 		HttpHeaders headers = new HttpHeaders();
 		headers.set("Cache-Control", "no-store");
+		headers.set("Pragma", "no-cache");
 		if (status == HttpStatus.UNAUTHORIZED.value() || (e instanceof InsufficientScopeException)) {
 			headers.set("WWW-Authenticate", String.format("%s %s", OAuth2AccessToken.BEARER_TYPE, e.getSummary()));
 		}

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/OAuth2AccessTokenJackson1Deserializer.java
Patch:
@@ -37,12 +37,12 @@
  * </p>
  *
  * @author Rob Winch
- * @see OAuth2AccessTokenDeserializer
+ * @see OAuth2AccessTokenJackson1Serializer
  */
 @SuppressWarnings("deprecation")
-public final class OAuth2AccessTokenDeserializer extends StdDeserializer<OAuth2AccessToken> {
+public final class OAuth2AccessTokenJackson1Deserializer extends StdDeserializer<OAuth2AccessToken> {
 
-	public OAuth2AccessTokenDeserializer() {
+	public OAuth2AccessTokenJackson1Deserializer() {
 		super(OAuth2AccessToken.class);
 	}
 

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/exceptions/OAuth2ExceptionJackson1Deserializer.java
Patch:
@@ -28,7 +28,7 @@
  * @author Dave Syer
  * 
  */
-public class OAuth2ExceptionDeserializer extends JsonDeserializer<OAuth2Exception> {
+public class OAuth2ExceptionJackson1Deserializer extends JsonDeserializer<OAuth2Exception> {
 
 	@Override
 	public OAuth2Exception deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException,

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/exceptions/OAuth2ExceptionJackson1Serializer.java
Patch:
@@ -24,7 +24,7 @@
  * @author Dave Syer
  *
  */
-public class OAuth2ExceptionSerializer extends JsonSerializer<OAuth2Exception> {
+public class OAuth2ExceptionJackson1Serializer extends JsonSerializer<OAuth2Exception> {
 
 	@Override
 	public void serialize(OAuth2Exception value, JsonGenerator jgen, SerializerProvider provider) throws IOException,

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/common/BaseOAuth2AccessTokenJacksonTest.java
Patch:
@@ -60,8 +60,6 @@ abstract class BaseOAuth2AccessTokenJacksonTest {
 
 	protected DefaultOAuth2AccessToken accessToken;
 
-	protected ObjectMapper mapper;
-
 	protected Map<String, Object> additionalInformation;
 
 	public BaseOAuth2AccessTokenJacksonTest() {
@@ -78,7 +76,6 @@ public void setUp() {
 
 		accessToken = new DefaultOAuth2AccessToken("token-value");
 		accessToken.setExpiration(expiration);
-		mapper = new ObjectMapper();
 		DefaultOAuth2RefreshToken refreshToken = new DefaultOAuth2RefreshToken("refresh-value");
 		accessToken.setRefreshToken(refreshToken);
 		Set<String> scope = new TreeSet<String>();

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/TokenEndpoint.java
Patch:
@@ -23,7 +23,6 @@
 
 import org.springframework.http.HttpHeaders;
 import org.springframework.http.HttpStatus;
-import org.springframework.http.MediaType;
 import org.springframework.http.ResponseEntity;
 import org.springframework.security.authentication.InsufficientAuthenticationException;
 import org.springframework.security.core.Authentication;
@@ -116,7 +115,6 @@ private ResponseEntity<OAuth2AccessToken> getResponse(OAuth2AccessToken accessTo
 		HttpHeaders headers = new HttpHeaders();
 		headers.set("Cache-Control", "no-store");
 		headers.set("Pragma", "no-cache");
-		headers.setContentType(MediaType.APPLICATION_JSON);
 		return new ResponseEntity<OAuth2AccessToken>(accessToken, headers, HttpStatus.OK);
 	}
 

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/DefaultOAuth2ClientContext.java
Patch:
@@ -15,6 +15,8 @@
  */
 public class DefaultOAuth2ClientContext implements OAuth2ClientContext, Serializable {
 
+	private static final long serialVersionUID = 914967629530462926L;
+
 	private OAuth2AccessToken accessToken;
 
 	private AccessTokenRequest accessTokenRequest;

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/context/DefaultOAuth2ClientContext.java
Patch:
@@ -1,5 +1,6 @@
 package org.springframework.security.oauth2.client.context;
 
+import java.io.Serializable;
 import java.util.HashMap;
 import java.util.Map;
 
@@ -12,7 +13,7 @@
  * 
  * @author Dave Syer
  */
-public class DefaultOAuth2ClientContext implements OAuth2ClientContext {
+public class DefaultOAuth2ClientContext implements OAuth2ClientContext, Serializable {
 
 	private OAuth2AccessToken accessToken;
 

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/consumer/client/CoreOAuthConsumerSupport.java
Patch:
@@ -377,7 +377,7 @@ public String getOAuthQueryString(ProtectedResourceDetails details, OAuthConsume
         while (valuesIt.hasNext()) {
           CharSequence parameterValue = valuesIt.next();
           if (parameterValue != null) {
-            queryString.append('=').append(parameterValue);
+            queryString.append('=').append(urlEncode(parameterValue.toString()));
           }
           if (valuesIt.hasNext()) {
             queryString.append('&').append(parameter);

File: spring-security-oauth/src/test/java/org/springframework/security/oauth/consumer/client/TestCoreOAuthConsumerSupport.java
Patch:
@@ -341,7 +341,7 @@ protected Map<String, Set<CharSequence>> loadOAuthParameters(ProtectedResourceDe
 		when(details.isAcceptsAuthorizationHeader()).thenReturn(false);
 		params.put("with", Collections.singleton((CharSequence) "some"));
 		String encoded_space = URLEncoder.encode(" ", "utf-8");
-		params.put("query", Collections.singleton((CharSequence) ("params" + encoded_space + "spaced")));
+		params.put("query", Collections.singleton((CharSequence) ("params spaced")));
 		params.put("too", null);
 		params.put(OAuthConsumerParameter.oauth_consumer_key.toString(), Collections.singleton((CharSequence) "mykey"));
 		params.put(OAuthConsumerParameter.oauth_nonce.toString(), Collections.singleton((CharSequence) "mynonce"));

File: samples/oauth2/sparklr/src/test/java/org/springframework/security/oauth2/provider/TestAuthorizationCodeProvider.java
Patch:
@@ -329,7 +329,7 @@ public void testInvalidAccessToken() throws Exception {
 		String authenticate = response.getHeaders().getFirst("WWW-Authenticate");
 		assertNotNull(authenticate);
 		assertTrue(authenticate.startsWith("Bearer"));
-		// Resource Server doesn't know what scopes are required until teh token can be validated
+		// Resource Server doesn't know what scopes are required until the token can be validated
 		assertFalse(authenticate.contains("scope=\""));
 
 	}

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/AbstractTestDefaultTokenServices.java
Patch:
@@ -4,6 +4,7 @@
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertTrue;
 
+import java.util.Arrays;
 import java.util.Collections;
 import java.util.Date;
 
@@ -129,6 +130,7 @@ public void testClientSpecificRefreshTokenExpiry() throws Exception {
 			public ClientDetails loadClientByClientId(String clientId) throws OAuth2Exception {
 				BaseClientDetails client = new BaseClientDetails();
 				client.setRefreshTokenValiditySeconds(100);
+				client.setAuthorizedGrantTypes(Arrays.asList("authorization_code", "refresh_token"));
 				return client;
 			}
 		});

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/RedirectResolver.java
Patch:
@@ -13,7 +13,7 @@ public interface RedirectResolver {
   /**
    * Resolve the redirect for the specified client.
    *
-   * @param requestedRedirect The redirect that was requested (may be null).
+   * @param requestedRedirect The redirect that was requested (may not be null).
    * @param client The client for which we're resolving the redirect.
    * @return The resolved redirect URI.
    * @throws OAuth2Exception If the requested redirect is invalid for the specified client.

File: samples/oauth2/sparklr/src/test/java/org/springframework/security/oauth2/provider/TestClientCredentialsProvider.java
Patch:
@@ -21,7 +21,6 @@
 import org.springframework.security.oauth2.common.AuthenticationScheme;
 import org.springframework.security.oauth2.common.OAuth2AccessToken;
 import org.springframework.web.client.DefaultResponseErrorHandler;
-import org.springframework.web.client.ResourceAccessException;
 import org.springframework.web.client.ResponseErrorHandler;
 
 /**
@@ -90,7 +89,7 @@ public void handleError(ClientHttpResponse response) throws IOException {
 			context.getAccessToken();
 			fail("Expected ResourceAccessException");
 		}
-		catch (ResourceAccessException e) {
+		catch (Exception e) {
 			// ignore
 		}
 		// System.err.println(responseHeaders);
@@ -118,7 +117,7 @@ public void handleError(ClientHttpResponse response) throws IOException {
 			context.getAccessToken();
 			fail("Expected ResourceAccessException");
 		}
-		catch (ResourceAccessException e) {
+		catch (Exception e) {
 			// ignore
 		}
 		// System.err.println(responseHeaders);

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/AuthorizationEndpoint.java
Patch:
@@ -46,7 +46,6 @@
 import org.springframework.security.oauth2.provider.code.AuthorizationCodeServices;
 import org.springframework.security.oauth2.provider.code.AuthorizationRequestHolder;
 import org.springframework.security.oauth2.provider.code.InMemoryAuthorizationCodeServices;
-import org.springframework.util.ClassUtils;
 import org.springframework.web.HttpSessionRequiredException;
 import org.springframework.web.bind.annotation.ExceptionHandler;
 import org.springframework.web.bind.annotation.ModelAttribute;

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/AuthorizationEndpoint.java
Patch:
@@ -281,8 +281,8 @@ private String appendAccessToken(AuthorizationRequest authorizationRequest, OAut
 		Map<String, Object> additionalInformation = accessToken.getAdditionalInformation();
 		for (String key : additionalInformation.keySet()) {
 			Object value = additionalInformation.get(key);
-			if (value != null && ClassUtils.isPrimitiveOrWrapper(value.getClass())) {
-				url.append("&" + key + "=" + value);
+			if (value != null) {
+				url.append("&" + key + "=" + value); // implicit call of .toString() here
 			}
 		}
 		// Do not include the refresh token (even if there is one)

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/TestJdbcClientDetailsService.java
Patch:
@@ -45,7 +45,7 @@ public void tearDown() throws Exception {
 		db.shutdown();
 	}
 
-	@Test(expected = BadClientCredentialsException.class)
+	@Test(expected = NoSuchClientException.class)
 	public void testLoadingClientForNonExistingClientId() {
 		service.loadClientByClientId("nonExistingClientId");
 	}

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/DefaultRedirectResolver.java
Patch:
@@ -65,7 +65,7 @@ else if (StringUtils.hasText(requestedRedirect)) {
 			return requestedRedirect;
 		}
 		else {
-			throw new OAuth2Exception("A redirect_uri must be supplied.");
+			throw new RedirectMismatchException("A redirect_uri must be supplied.");
 		}
 
 	}

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/OAuth2RestTemplate.java
Patch:
@@ -208,7 +208,7 @@ protected URI appendQueryParameter(URI uri, OAuth2AccessToken accessToken) {
 
 			// TODO: there is some duplication with UriUtils here. Probably unavoidable as long as this
 			// method signature uses URI not String.
-			String query = uri.getQuery();
+			String query = uri.getRawQuery(); // Don't decode anything here
 			String queryFragment = resource.getTokenName() + "=" + URLEncoder.encode(accessToken.getValue(), "UTF-8");
 			if (query == null) {
 				query = queryFragment;

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/AuthorizationEndpoint.java
Patch:
@@ -32,7 +32,7 @@
 import org.springframework.security.oauth2.common.exceptions.InvalidGrantException;
 import org.springframework.security.oauth2.common.exceptions.OAuth2Exception;
 import org.springframework.security.oauth2.common.exceptions.UnapprovedClientAuthenticationException;
-import org.springframework.security.oauth2.common.exceptions.UnsupportedGrantTypeException;
+import org.springframework.security.oauth2.common.exceptions.UnsupportedResponseTypeException;
 import org.springframework.security.oauth2.common.exceptions.UserDeniedAuthorizationException;
 import org.springframework.security.oauth2.common.util.OAuth2Utils;
 import org.springframework.security.oauth2.provider.AuthorizationRequest;
@@ -122,7 +122,7 @@ public ModelAndView authorize(Map<String, Object> model, @RequestParam("response
 		Set<String> responseTypes = OAuth2Utils.parseParameterList(responseType);
 
 		if (!responseTypes.contains("token") && !responseTypes.contains("code")) {
-			throw new UnsupportedGrantTypeException("Unsupported response types: " + responseTypes);
+			throw new UnsupportedResponseTypeException("Unsupported response types: " + responseTypes);
 		}
 
 		try {
@@ -235,7 +235,7 @@ private ModelAndView getImplicitGrantResponse(AuthorizationRequest authorization
 					authorizationRequest.getAuthorizationParameters(), authorizationRequest.getClientId(),
 					authorizationRequest.getScope());
 			if (accessToken == null) {
-				throw new UnsupportedGrantTypeException("Unsupported grant type: implicit");
+				throw new UnsupportedResponseTypeException("Unsupported response type: token");
 			}
 			return new ModelAndView(new RedirectView(appendAccessToken(authorizationRequest, accessToken), false));
 		}

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/TestBaseClientDetails.java
Patch:
@@ -77,7 +77,7 @@ public void testJsonSerializeAdditionalInformation() throws Exception {
 
 	@Test
 	public void testJsonDeserialize() throws Exception {
-		String value = "{\"foo\":\"bar\",\"client_id\":\"foo\",\"scope\":[\"bar\",\"foo\"],\"authorized_grant_types\":[\"authorization_code\"],\"access_token_validity\":0,\"authorities\":[\"ROLE_USER\"]}";
+		String value = "{\"foo\":\"bar\",\"client_id\":\"foo\",\"scope\":[\"bar\",\"foo\"],\"authorized_grant_types\":[\"authorization_code\"],\"authorities\":[\"ROLE_USER\"]}";
 		BaseClientDetails details = new ObjectMapper().readValue(value, BaseClientDetails.class);
 		BaseClientDetails expected = new BaseClientDetails("foo", "", "foo,bar", "authorization_code", "ROLE_USER");
 		expected.setAdditionalInformation(Collections.singletonMap("foo", (Object)"bar"));
@@ -87,7 +87,7 @@ public void testJsonDeserialize() throws Exception {
 	@Test
 	public void testJsonDeserializeWithArraysAsStrings() throws Exception {
 		// Collection values can be deserialized from space or comma-separated lists
-		String value = "{\"foo\":\"bar\",\"client_id\":\"foo\",\"scope\":\"bar  foo\",\"authorized_grant_types\":\"authorization_code\",\"access_token_validity\":0,\"authorities\":\"ROLE_USER,ROLE_ADMIN\"}";
+		String value = "{\"foo\":\"bar\",\"client_id\":\"foo\",\"scope\":\"bar  foo\",\"authorized_grant_types\":\"authorization_code\",\"authorities\":\"ROLE_USER,ROLE_ADMIN\"}";
 		BaseClientDetails details = new ObjectMapper().readValue(value, BaseClientDetails.class);
 		BaseClientDetails expected = new BaseClientDetails("foo", "", "foo,bar", "authorization_code", "ROLE_USER,ROLE_ADMIN");
 		expected.setAdditionalInformation(Collections.singletonMap("foo", (Object)"bar"));

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/DefaultRedirectResolver.java
Patch:
@@ -49,6 +49,9 @@ public void setRedirectGrantTypes(Collection<String> redirectGrantTypes) {
 	public String resolveRedirect(String requestedRedirect, ClientDetails client) throws OAuth2Exception {
 		
 		Set<String> authorizedGrantTypes = client.getAuthorizedGrantTypes();
+		if (authorizedGrantTypes.isEmpty()) {
+			throw new InvalidGrantException("A client must have at least one authorized grant type.");			
+		}
 		if (!containsRedirectGrantType(authorizedGrantTypes)) {
 			throw new InvalidGrantException("A redirect_uri can only be used by implicit or authorization_code grant types.");			
 		}

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/client/token/grant/code/TestAuthorizationCodeAccessTokenProvider.java
Patch:
@@ -93,7 +93,8 @@ public void testGetAccessTokenRequest() throws Exception {
 		assertEquals("authorization_code", params.getFirst("grant_type"));
 		assertEquals("foo", params.getFirst("code"));
 		assertEquals("http://anywhere.com", params.getFirst("redirect_uri"));
-		assertEquals("bar", params.getFirst("state"));
+		// State is not set in token request
+		assertEquals(null, params.getFirst("state"));
 	}
 
 }

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/token/OAuth2AccessTokenSupport.java
Patch:
@@ -160,6 +160,7 @@ public void doWithRequest(ClientHttpRequest request) throws IOException {
 			request.getHeaders().putAll(this.headers);
 			request.getHeaders().setAccept(
 					Arrays.asList(MediaType.APPLICATION_JSON, MediaType.APPLICATION_FORM_URLENCODED));
+			logger.debug("Encoding and sending form: " + form);
 			FORM_MESSAGE_CONVERTER.write(this.form, MediaType.APPLICATION_FORM_URLENCODED, request);
 		}
 	}

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/vote/TestScopeVoter.java
Patch:
@@ -22,11 +22,11 @@
 
 import org.junit.Test;
 import org.springframework.security.access.AccessDecisionVoter;
+import org.springframework.security.access.AccessDeniedException;
 import org.springframework.security.access.ConfigAttribute;
 import org.springframework.security.access.SecurityConfig;
 import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
 import org.springframework.security.core.Authentication;
-import org.springframework.security.oauth2.common.exceptions.InsufficientScopeException;
 import org.springframework.security.oauth2.provider.AuthorizationRequest;
 import org.springframework.security.oauth2.provider.OAuth2Authentication;
 
@@ -96,7 +96,7 @@ public void testAccessDeniedIfWrongScopesPresent() throws Exception {
 						Collections.<ConfigAttribute> singleton(new SecurityConfig("SCOPE_WRITE"))));
 	}
 
-	@Test(expected = InsufficientScopeException.class)
+	@Test(expected = AccessDeniedException.class)
 	public void testExceptionThrownIfWrongScopesPresent() throws Exception {
 		AuthorizationRequest clientAuthentication = new AuthorizationRequest("foo", Collections.singleton("read"),
 				null, null);

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/vote/ScopeVoter.java
Patch:
@@ -138,13 +138,13 @@ public int vote(Authentication authentication, Object object, Collection<ConfigA
 
 				Set<String> scopes = clientAuthentication.getScope();
 				for (String scope : scopes) {
-					if (attribute.getAttribute().equals(scopePrefix + scope.toUpperCase())) {
+					if (attribute.getAttribute().toUpperCase().equals((scopePrefix + scope).toUpperCase())) {
 						return ACCESS_GRANTED;
 					}
 				}
 				if (result == ACCESS_DENIED && throwException) {
 					throw new InsufficientScopeException("Insufficient scope for this resource scopes",
-							Collections.singleton(attribute.getAttribute()));
+							Collections.singleton(attribute.getAttribute().substring(scopePrefix.length())));
 				}
 			}
 		}

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/token/grant/code/AuthorizationCodeAccessTokenProvider.java
Patch:
@@ -231,7 +231,7 @@ private MultiValueMap<String, String> getParametersForAuthorizeRequest(Authoriza
 			AccessTokenRequest request) {
 
 		MultiValueMap<String, String> form = new LinkedMultiValueMap<String, String>();
-		form.set("response_type", "authorization_code");
+		form.set("response_type", "code");
 		form.set("client_id", resource.getClientId());
 
 		if (request.get("scope") != null) {

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/AuthorizationRequest.java
Patch:
@@ -63,11 +63,11 @@ public AuthorizationRequest(String clientId, Collection<String> scope, Collectio
 	private AuthorizationRequest(AuthorizationRequest copy, boolean approved) {
 		this(copy.getClientId(), copy.scope, copy.authorities, copy.resourceIds, approved, copy.getState(), copy
 				.getRedirectUri());
-		for (String key : parameters.keySet()) {
+		for (String key : copy.parameters.keySet()) {
 			if (key.equals(SCOPE)) {
 				this.parameters.put(SCOPE, OAuth2Utils.formatParameterList(scope));
 			} else {
-				this.parameters.put(key, parameters.get(key));
+				this.parameters.put(key, copy.parameters.get(key));
 			}
 		}
 	}

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/approval/TokenServicesUserApprovalHandler.java
Patch:
@@ -65,7 +65,7 @@ public boolean isApproved(AuthorizationRequest authorizationRequest, Authenticat
 			StringBuilder builder = new StringBuilder("Looking up existing token for ");
 			builder.append("client_id=" + authorizationRequest.getClientId());
 			builder.append(", scope=" + authorizationRequest.getScope());
-			builder.append("and username=" + userAuthentication.getName());
+			builder.append(" and username=" + userAuthentication.getName());
 			logger.debug(builder.toString());
 		}
 

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/TestJdbcClientDetailsService.java
Patch:
@@ -24,7 +24,7 @@ public class TestJdbcClientDetailsService {
 
 	private EmbeddedDatabase db;
 
-	private static final String SELECT_SQL = "select client_id, resource_ids, client_secret, scope, authorized_grant_types, web_server_redirect_uri, authorities, access_token_validity refresh_token_validity from oauth_client_details where client_id=?";
+	private static final String SELECT_SQL = "select client_id, resource_ids, client_secret, scope, authorized_grant_types, web_server_redirect_uri, authorities, access_token_validity, refresh_token_validity from oauth_client_details where client_id=?";
 
 	private static final String INSERT_SQL = "insert into oauth_client_details (client_id, resource_ids, client_secret, scope, authorized_grant_types, web_server_redirect_uri, authorities, access_token_validity, refresh_token_validity) values (?, ?, ?, ?, ?, ?, ?, ?, ?)";
 

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/ClientAlreadyExistsException.java
Patch:
@@ -19,7 +19,7 @@
  * @author Dave Syer
  *
  */
-public class ClientAlreadyExistsException extends ClientRegsitrationException {
+public class ClientAlreadyExistsException extends ClientRegistrationException {
 
 	public ClientAlreadyExistsException(String msg) {
 		super(msg);

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/NoSuchClientException.java
Patch:
@@ -19,7 +19,7 @@
  * @author Dave Syer
  *
  */
-public class NoSuchClientException extends ClientRegsitrationException {
+public class NoSuchClientException extends ClientRegistrationException {
 
 	public NoSuchClientException(String msg) {
 		super(msg);

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/ResourceBeanDefinitionParser.java
Patch:
@@ -94,7 +94,7 @@ protected void doParse(Element element, ParserContext parserContext, BeanDefinit
 			}
 		}
 
-		String preEstablishedRedirectUri = element.getAttribute("preEstablished-redirect-uri");
+		String preEstablishedRedirectUri = element.getAttribute("pre-established-redirect-uri");
 		if (StringUtils.hasText(preEstablishedRedirectUri)) {
 			builder.addPropertyValue("preEstablishedRedirectUri", preEstablishedRedirectUri);
 		}

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/expression/TestOAuth2WebSecurityExpressionRoot.java
Patch:
@@ -26,7 +26,7 @@
 import org.springframework.security.core.Authentication;
 import org.springframework.security.core.GrantedAuthority;
 import org.springframework.security.core.authority.SimpleGrantedAuthority;
-import org.springframework.security.oauth2.common.exceptions.InvalidScopeException;
+import org.springframework.security.oauth2.common.exceptions.InsufficientScopeException;
 import org.springframework.security.oauth2.provider.AuthorizationRequest;
 import org.springframework.security.oauth2.provider.OAuth2Authentication;
 import org.springframework.security.web.FilterInvocation;
@@ -59,7 +59,7 @@ Collections.<GrantedAuthority> singleton(new SimpleGrantedAuthority("ROLE_USER")
 		assertTrue(new OAuth2WebSecurityExpressionRoot(oAuth2Authentication, invocation, false).oauthHasAnyScope("read"));
 	}
 
-	@Test(expected=InvalidScopeException.class)
+	@Test(expected=InsufficientScopeException.class)
 	public void testScopesWithException() throws Exception {
 		AuthorizationRequest clientAuthentication = new AuthorizationRequest("foo", Collections.singleton("read"),
 				Collections.<GrantedAuthority> singleton(new SimpleGrantedAuthority("ROLE_USER")),

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/DefaultTokenServices.java
Patch:
@@ -192,7 +192,7 @@ public OAuth2Authentication loadAuthentication(String accessTokenValue) throws A
 		}
 		else if (accessToken.isExpired()) {
 			tokenStore.removeAccessToken(accessToken);
-			throw new InvalidTokenException("Invalid access token: " + accessTokenValue);
+			throw new InvalidTokenException("Access token expired: " + accessTokenValue);
 		}
 
 		return tokenStore.readAuthentication(accessToken);

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/RandomValueTokenServices.java
Patch:
@@ -229,7 +229,6 @@ protected ExpiringOAuth2RefreshToken createRefreshToken(OAuth2Authentication aut
 		String refreshTokenValue = UUID.randomUUID().toString();
 		refreshToken = createRefreshToken(authentication, refreshTokenValue, new Date(System.currentTimeMillis()
 				+ (refreshTokenValiditySeconds * 1000L)));
-		tokenStore.storeRefreshToken(refreshToken, authentication);
 		return refreshToken;
 	}
 

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/BaseClientDetails.java
Patch:
@@ -31,7 +31,7 @@ public class BaseClientDetails implements ClientDetails {
 	@JsonProperty("client_id")
 	private String clientId;
 
-	@JsonProperty("client_sceret")
+	@JsonProperty("client_secret")
 	private String clientSecret;
 
 	private Set<String> scope = Collections.emptySet();

File: samples/oauth2/sparklr/src/test/java/org/springframework/security/oauth2/provider/TestResourceOwnerPasswordProvider.java
Patch:
@@ -104,6 +104,9 @@ public void testTokenNotGrantedIfSecretNotProvided() throws Exception {
 		}
 		catch (HttpClientErrorException e) {
 			assertEquals(HttpStatus.UNAUTHORIZED, e.getStatusCode());
+			List<String> values = tokenEndpointResponse.getHeaders().get("WWW-Authenticate");
+			assertEquals(1, values.size());
+			assertEquals("Bearer realm=\"sparklr2\", error=\"invalid_token\", error_description=\"Bad Credentials\"", values.get(0));
 		}
 	}
 

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/error/DefaultWebResponseExceptionTranslator.java
Patch:
@@ -78,7 +78,7 @@ private ResponseEntity<OAuth2Exception> handleOAuth2Exception(OAuth2Exception e)
 		HttpHeaders headers = new HttpHeaders();
 		headers.set("Cache-Control", "no-store");
 		if (status==HttpStatus.UNAUTHORIZED.value()) {
-			headers.set("WWW-Authenticate", String.format("%s, %s", OAuth2AccessToken.BEARER_TYPE, e.getSummary()));
+			headers.set("WWW-Authenticate", String.format("%s %s", OAuth2AccessToken.BEARER_TYPE, e.getSummary()));
 		}
 
 		ResponseEntity<OAuth2Exception> response = new ResponseEntity<OAuth2Exception>(e, headers,

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/error/TestOAuth2AuthenticationEntryPoint.java
Patch:
@@ -63,7 +63,7 @@ public void testCommenceWithXml() throws Exception {
 	public void testTypeName() throws Exception {
 		entryPoint.setTypeName("Foo");
 		entryPoint.commence(request, response, new BadCredentialsException("Bad"));
-		assertEquals("Foo realm=\"foo\"", response.getHeader("WWW-Authenticate"));
+		assertEquals("Foo realm=\"foo\", error=\"invalid_token\", error_description=\"Bad\"", response.getHeader("WWW-Authenticate"));
 	}
 
 	@Test

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/ClientDetailsServiceBeanDefinitionParser.java
Patch:
@@ -67,16 +67,16 @@ protected void doParse(Element element, ParserContext parserContext, BeanDefinit
 				client.addConstructorArgValue("");
 			}
 			String redirectUri = clientElement.getAttribute("redirect-uri");
-			if (StringUtils.hasText(redirectUri)) {
-				client.addPropertyValue("registeredRedirectUri", redirectUri);
-			}
 			String tokenValidity = clientElement.getAttribute("access-token-validity");
 			if (StringUtils.hasText(tokenValidity)) {
 				client.addPropertyValue("accessTokenValiditySeconds", tokenValidity);
 			}
 			client.addConstructorArgValue(clientElement.getAttribute("scope"));
 			client.addConstructorArgValue(clientElement.getAttribute("authorized-grant-types"));
 			client.addConstructorArgValue(clientElement.getAttribute("authorities"));
+			if (StringUtils.hasText(redirectUri)) {
+				client.addConstructorArgValue(redirectUri);
+			}
 
 			clients.put(clientId, client.getBeanDefinition());
 		}

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/AuthorizationServerBeanDefinitionParser.java
Patch:
@@ -112,7 +112,7 @@ protected AbstractBeanDefinition parseEndpointAndReturnFilter(Element element, P
 		if (authorizationCodeElement != null
 				&& !"true".equalsIgnoreCase(authorizationCodeElement.getAttribute("disabled"))) {
 			// authorization code grant configuration.
-			String authorizationCodeServices = authorizationCodeElement.getAttribute("services-ref");
+			String authorizationCodeServices = authorizationCodeElement.getAttribute("authorization-code-services-ref");
 			String clientTokenCacheRef = authorizationCodeElement.getAttribute("client-token-cache-ref");
 
 			BeanDefinitionBuilder authorizationCodeTokenGranterBean = BeanDefinitionBuilder

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/InMemoryTokenStore.java
Patch:
@@ -205,8 +205,7 @@ public void removeRefreshToken(String tokenValue) {
 	public void removeAccessTokenUsingRefreshToken(String refreshToken) {
 		String accessToken = this.refreshTokenToAcessTokenStore.remove(refreshToken);
 		if (accessToken != null) {
-			this.accessTokenStore.remove(accessToken);
-			this.authenticationStore.remove(accessToken);
+			removeAccessToken(accessToken);
 		}
 	}
 	

File: samples/oauth2/sparklr/src/test/java/org/springframework/security/oauth2/provider/TestResourceOwnerPasswordProvider.java
Patch:
@@ -177,7 +177,7 @@ public void testUnsupportedMediaType() throws Exception {
 	public void testUnsupportedMediaTypeWithInvalidToken() throws Exception {
 		HttpHeaders headers = new HttpHeaders();
 		headers.set("Authorization", String.format("%s %s", OAuth2AccessToken.BEARER_TYPE, "FOO"));
-		headers.setAccept(Arrays.asList(MediaType.APPLICATION_XML));
+		headers.setAccept(Arrays.asList(MediaType.valueOf("text/foo")));
 		assertEquals(HttpStatus.NOT_ACCEPTABLE, serverRunning.getStatusCode("/sparklr2/photos/user/message", headers));
 	}
 

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/error/DefaultOAuth2ExceptionRenderer.java
Patch:
@@ -32,6 +32,7 @@
 import org.springframework.http.server.ServerHttpResponse;
 import org.springframework.http.server.ServletServerHttpRequest;
 import org.springframework.http.server.ServletServerHttpResponse;
+import org.springframework.security.oauth2.http.converter.jaxb.JaxbOAuth2ExceptionMessageConverter;
 import org.springframework.web.HttpMediaTypeNotAcceptableException;
 import org.springframework.web.client.RestTemplate;
 import org.springframework.web.context.request.NativeWebRequest;
@@ -112,6 +113,7 @@ private void writeWithMessageConverters(Object returnValue, HttpInputMessage inp
 	private List<HttpMessageConverter<?>> geDefaultMessageConverters() {
 		List<HttpMessageConverter<?>> result = new ArrayList<HttpMessageConverter<?>>();
 		result.addAll(new RestTemplate().getMessageConverters());
+		result.add(new JaxbOAuth2ExceptionMessageConverter());
 		return result;
 	}
 

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/error/DefaultWebResponseExceptionTranslator.java
Patch:
@@ -21,7 +21,6 @@
 import org.apache.commons.logging.LogFactory;
 import org.springframework.http.HttpHeaders;
 import org.springframework.http.HttpStatus;
-import org.springframework.http.MediaType;
 import org.springframework.http.ResponseEntity;
 import org.springframework.security.access.AccessDeniedException;
 import org.springframework.security.core.AuthenticationException;
@@ -78,8 +77,9 @@ private ResponseEntity<OAuth2Exception> handleOAuth2Exception(OAuth2Exception e)
 		int status = e.getHttpErrorCode();
 		HttpHeaders headers = new HttpHeaders();
 		headers.set("Cache-Control", "no-store");
-		headers.setContentType(MediaType.APPLICATION_JSON);
-		headers.set("WWW-Authenticate", String.format("%s, %s", OAuth2AccessToken.BEARER_TYPE, e.getSummary()));
+		if (status==HttpStatus.UNAUTHORIZED.value()) {
+			headers.set("WWW-Authenticate", String.format("%s, %s", OAuth2AccessToken.BEARER_TYPE, e.getSummary()));
+		}
 
 		ResponseEntity<OAuth2Exception> response = new ResponseEntity<OAuth2Exception>(e, headers,
 				HttpStatus.valueOf(status));

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/ConsumerTokenServices.java
Patch:
@@ -26,7 +26,7 @@ public interface ConsumerTokenServices {
 
 	Collection<OAuth2AccessToken> findTokensByClientId(String clientId);
 	
-	void revokeToken(String tokenValue);
+	boolean revokeToken(String tokenValue);
 
 	String getClientId(String tokenValue);
 

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/config/TestResourceServerBeanDefinitionParser.java
Patch:
@@ -27,7 +27,7 @@ public class TestResourceServerBeanDefinitionParser {
 	public void testDefaults() {
 		GenericXmlApplicationContext context = new GenericXmlApplicationContext(getClass(), getClass().getSimpleName()+"-context.xml");
 		// System.err.println(Arrays.asList(context.getBeanDefinitionNames()));
-		assertTrue(context.containsBeanDefinition("oauth2ProtectedResourceFilter"));
+		assertTrue(context.containsBeanDefinition("oauth2ProviderFilter"));
 	}
 
 }

File: samples/oauth2/sparklr/src/test/java/org/springframework/security/oauth2/provider/TestAuthorizationCodeProvider.java
Patch:
@@ -178,7 +178,7 @@ public void testInvalidScopeInResourceRequest() throws Exception {
 		HttpHeaders headers = new HttpHeaders();
 		headers.set("Authorization", String.format("%s %s", OAuth2AccessToken.BEARER_TYPE, accessToken.getValue()));
 		ResponseEntity<String> response = serverRunning.getForString("/sparklr2/photos?format=json", headers);
-		assertEquals(HttpStatus.UNAUTHORIZED, response.getStatusCode());
+		assertEquals(HttpStatus.FORBIDDEN, response.getStatusCode());
 
 		String authenticate = response.getHeaders().getFirst("WWW-Authenticate");
 		assertNotNull(authenticate);

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/filter/CompositeFilter.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.security.oauth2.provider.filter;
+package org.springframework.security.oauth2.client.filter;
 
 import java.io.IOException;
 import java.util.ArrayList;

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/AuthorizationServerBeanDefinitionParser.java
Patch:
@@ -24,8 +24,8 @@
 import org.springframework.security.oauth2.provider.code.AuthorizationCodeTokenGranter;
 import org.springframework.security.oauth2.provider.code.InMemoryAuthorizationCodeServices;
 import org.springframework.security.oauth2.provider.endpoint.AuthorizationEndpoint;
+import org.springframework.security.oauth2.provider.endpoint.EndpointValidationFilter;
 import org.springframework.security.oauth2.provider.endpoint.TokenEndpoint;
-import org.springframework.security.oauth2.provider.filter.EndpointValidationFilter;
 import org.springframework.security.oauth2.provider.implicit.ImplicitTokenGranter;
 import org.springframework.security.oauth2.provider.password.ResourceOwnerPasswordTokenGranter;
 import org.springframework.security.oauth2.provider.refresh.RefreshTokenGranter;

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/ClientBeanDefinitionParser.java
Patch:
@@ -25,13 +25,13 @@
 import org.springframework.beans.factory.xml.AbstractBeanDefinitionParser;
 import org.springframework.beans.factory.xml.ParserContext;
 import org.springframework.security.oauth2.client.OAuth2RestTemplate;
+import org.springframework.security.oauth2.client.filter.CompositeFilter;
 import org.springframework.security.oauth2.client.filter.OAuth2ClientContextFilter;
 import org.springframework.security.oauth2.client.filter.OAuth2ClientProcessingFilter;
 import org.springframework.security.oauth2.client.filter.cache.HttpSessionAccessTokenCache;
 import org.springframework.security.oauth2.client.token.AccessTokenProviderChain;
 import org.springframework.security.oauth2.client.token.grant.client.ClientCredentialsAccessTokenProvider;
 import org.springframework.security.oauth2.client.token.grant.code.AuthorizationCodeAccessTokenProvider;
-import org.springframework.security.oauth2.provider.filter.CompositeFilter;
 import org.springframework.util.StringUtils;
 import org.w3c.dom.Element;
 

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/client/ClientCredentialsTokenEndpointFilter.java
Patch:
@@ -10,7 +10,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  */
-package org.springframework.security.oauth2.provider.filter;
+package org.springframework.security.oauth2.provider.client;
 
 import java.io.IOException;
 

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/client/OAuth2AuthenticationFailureHandler.java
Patch:
@@ -10,7 +10,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  */
-package org.springframework.security.oauth2.provider.filter;
+package org.springframework.security.oauth2.provider.client;
 
 import java.io.IOException;
 
@@ -23,8 +23,8 @@
 import org.springframework.security.core.AuthenticationException;
 import org.springframework.security.oauth2.common.exceptions.InvalidClientException;
 import org.springframework.security.oauth2.common.exceptions.OAuth2Exception;
-import org.springframework.security.oauth2.provider.web.DefaultOAuth2ExceptionRenderer;
-import org.springframework.security.oauth2.provider.web.OAuth2ExceptionRenderer;
+import org.springframework.security.oauth2.provider.error.DefaultOAuth2ExceptionRenderer;
+import org.springframework.security.oauth2.provider.error.OAuth2ExceptionRenderer;
 import org.springframework.security.web.authentication.AuthenticationFailureHandler;
 import org.springframework.util.Assert;
 import org.springframework.web.context.request.ServletWebRequest;

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/EndpointValidationFilter.java
Patch:
@@ -1,4 +1,4 @@
-package org.springframework.security.oauth2.provider.filter;
+package org.springframework.security.oauth2.provider.endpoint;
 
 import java.io.IOException;
 

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/error/DefaultOAuth2ExceptionRenderer.java
Patch:
@@ -10,7 +10,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  */
-package org.springframework.security.oauth2.provider.web;
+package org.springframework.security.oauth2.provider.error;
 
 import java.io.IOException;
 import java.util.ArrayList;

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/error/OAuth2ExceptionRenderer.java
Patch:
@@ -10,7 +10,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  */
-package org.springframework.security.oauth2.provider.web;
+package org.springframework.security.oauth2.provider.error;
 
 import org.springframework.http.HttpEntity;
 import org.springframework.security.oauth2.common.exceptions.OAuth2Exception;

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/error/WebResponseExceptionTranslator.java
Patch:
@@ -18,8 +18,8 @@
 import org.springframework.http.ResponseEntity;
 import org.springframework.security.oauth2.common.exceptions.OAuth2Exception;
 
-public interface ProviderExceptionHandler {
+public interface WebResponseExceptionTranslator {
 	
-	ResponseEntity<OAuth2Exception> handle(Exception e) throws Exception;
+	ResponseEntity<OAuth2Exception> translate(Exception e) throws Exception;
 
 }

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/client/TestOAuth2AuthenticationFailureHandler.java
Patch:
@@ -10,7 +10,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  */
-package org.springframework.security.oauth2.provider.filter;
+package org.springframework.security.oauth2.provider.client;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertSame;
@@ -32,7 +32,8 @@
 import org.springframework.security.core.AuthenticationException;
 import org.springframework.security.core.userdetails.UsernameNotFoundException;
 import org.springframework.security.oauth2.common.exceptions.InvalidClientException;
-import org.springframework.security.oauth2.provider.web.OAuth2ExceptionRenderer;
+import org.springframework.security.oauth2.provider.client.OAuth2AuthenticationFailureHandler;
+import org.springframework.security.oauth2.provider.error.OAuth2ExceptionRenderer;
 import org.springframework.web.context.request.ServletWebRequest;
 
 /**

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/endpoint/TestEndpointValidationFilter.java
Patch:
@@ -14,12 +14,13 @@
  * limitations under the License.
  */
 
-package org.springframework.security.oauth2.provider.filter;
+package org.springframework.security.oauth2.provider.endpoint;
 
 import static org.junit.Assert.assertTrue;
 
 import org.junit.Test;
 import org.springframework.mock.web.MockHttpServletRequest;
+import org.springframework.security.oauth2.provider.endpoint.EndpointValidationFilter;
 
 /**
  * @author Dave Syer

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/error/TestMediaTypeAwareAccessDeniedHandler.java
Patch:
@@ -28,7 +28,7 @@
  */
 public class TestMediaTypeAwareAccessDeniedHandler {
 
-	private MediaTypeAwareAccessDeniedHandler handler = new MediaTypeAwareAccessDeniedHandler();
+	private OAuth2AccessDeniedHandler handler = new OAuth2AccessDeniedHandler();
 
 	private MockHttpServletRequest request = new MockHttpServletRequest();
 

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/http/converter/FormOAuth2AccessTokenMessageConverter.java
Patch:
@@ -37,7 +37,7 @@ public class FormOAuth2AccessTokenMessageConverter extends AbstractHttpMessageCo
 	private final FormHttpMessageConverter delegateMessageConverter;
 
 	public FormOAuth2AccessTokenMessageConverter() {
-		super(MediaType.APPLICATION_FORM_URLENCODED);
+		super(MediaType.APPLICATION_FORM_URLENCODED, MediaType.TEXT_PLAIN);
 		this.delegateMessageConverter = new FormHttpMessageConverter();
 	}
 

File: samples/oauth2/sparklr/src/main/java/org/springframework/security/oauth/examples/sparklr/mvc/PhotoController.java
Patch:
@@ -97,8 +97,8 @@ public String getTrustedClientMessage() {
 
 	@RequestMapping("/photos/user/message")
 	@ResponseBody
-	public String getTrustedUserMessage() {
-		return "Hello, Trusted User";
+	public String getTrustedUserMessage(Principal principal) {
+		return "Hello, Trusted User" + (principal!=null ? " " + principal.getName() : "");
 	}
 
 	public PhotoService getPhotoService() {

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/OAuth2Authentication.java
Patch:
@@ -67,7 +67,7 @@ public Authentication getUserAuthentication() {
 
 	@Override
 	public boolean isAuthenticated() {
-		return this.clientAuthentication.isAuthenticated()
+		return this.clientAuthentication.isApproved()
 				&& (this.userAuthentication == null || this.userAuthentication.isAuthenticated());
 	}
 

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/TestOAuth2Authentication.java
Patch:
@@ -19,6 +19,7 @@ public class TestOAuth2Authentication {
 
 	@Test
 	public void testIsAuthenticated() {
+		request = request.approved(true);
 		OAuth2Authentication authentication = new OAuth2Authentication(request, userAuthentication);
 		assertTrue(authentication.isAuthenticated());
 	}

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/TestJdbcClientDetailsService.java
Patch:
@@ -92,7 +92,7 @@ public void testLoadingClientIdWithSingleDetailsInCustomTable() {
 
 		JdbcClientDetailsService customService = new JdbcClientDetailsService(db);
 		customService.setSelectClientDetailsSql("select appId, resourceIds, appSecret, scope, "
-				+ "grantTypes, redirectUrl, authorities, accessTokenValidity from ClientDetails where appId = ?");
+				+ "grantTypes, redirectUrl, authorities, access_token_validity from ClientDetails where appId = ?");
 
 		ClientDetails clientDetails = customService.loadClientByClientId("clientIdWithSingleDetails");
 

File: samples/oauth2/sparklr/src/test/java/org/springframework/security/oauth2/provider/TestNativeApplicationProvider.java
Patch:
@@ -155,7 +155,7 @@ public void testClientRoleBasedSecurity() throws Exception {
 		// now make sure an authorized request is valid.
 		HttpHeaders headers = new HttpHeaders();
 		headers.set("Authorization", String.format("%s %s", OAuth2AccessToken.BEARER_TYPE, accessToken.getValue()));
-		assertEquals(HttpStatus.OK, serverRunning.getStatusCode("/sparklr2/user/message", headers));
+		assertEquals(HttpStatus.OK, serverRunning.getStatusCode("/sparklr2/photos/user/message", headers));
 	}
 
 	private OAuth2AccessToken getAccessToken(String scope, String clientId) throws Exception {

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/resource/BaseOAuth2ProtectedResourceDetails.java
Patch:
@@ -67,7 +67,7 @@ public void setScope(List<String> scope) {
 	}
 
 	public boolean isAuthenticationRequired() {
-		return StringUtils.hasText(clientId);
+		return StringUtils.hasText(clientId); //  && clientSecret!=null;
 	}
 
 	public String getClientSecret() {

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/error/MediaTypeAwareAuthenticationEntryPoint.java
Patch:
@@ -30,9 +30,9 @@
 import org.springframework.util.StringUtils;
 
 /**
- * If authentication or authorization fails and the caller has asked for a specific content type response, this entry
- * point can send one, along with a standard 401 status. Add to the Spring Security configuration as an
- * {@link AuthenticationEntryPoint} in the usual way.
+ * If authentication fails and the caller has asked for a specific content type response, this entry point can send one,
+ * along with a standard 401 status. Add to the Spring Security configuration as an {@link AuthenticationEntryPoint} in
+ * the usual way.
  * 
  * @author Dave Syer
  * 

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/error/TestMediaTypeAwareAuthenticationEntryPoint.java
Patch:
@@ -26,7 +26,7 @@
  * @author Dave Syer
  * 
  */
-public class MediaTypeAwareAuthenticationEntryPointTests {
+public class TestMediaTypeAwareAuthenticationEntryPoint {
 
 	private MediaTypeAwareAuthenticationEntryPoint entryPoint = new MediaTypeAwareAuthenticationEntryPoint();
 

File: samples/oauth2/sparklr/src/test/java/org/springframework/security/oauth2/provider/TestAuthorizationCodeProvider.java
Patch:
@@ -151,7 +151,8 @@ public void testSuccessfulFlowWithRegisteredRedirect() throws Exception {
 
 	}
 
-	@Test
+	// This test is disabled because  approval and code in same request has been disabled
+	// @Test
 	public void testApprovalAndCodeInSameRequest() throws Exception {
 
 		String cookie = loginAndGrabCookie();

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/endpoint/TestAuthorizationEndpoint.java
Patch:
@@ -58,7 +58,7 @@ private AuthorizationRequest getAuthorizationRequest(String clientId, String red
 		parameters.put("redirect_uri", redirectUri);
 		parameters.put("state", state);
 		parameters.put("scope", scope);
-		return endpoint.getClientToken(parameters);
+		return new AuthorizationRequest(parameters);
 	}
 	
 	public TestAuthorizationEndpoint() {

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/provider/ConsumerCredentials.java
Patch:
@@ -16,12 +16,14 @@
 
 package org.springframework.security.oauth.provider;
 
+import java.io.Serializable;
+
 /**
  * The credentials for an OAuth consumer request.
  *
  * @author Ryan Heaton
  */
-public class ConsumerCredentials {
+public class ConsumerCredentials implements Serializable {
 
   private final String consumerKey;
   private final String signature;

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/http/converter/jaxb/AbstractJaxbMessageConverter.java
Patch:
@@ -36,6 +36,7 @@
  * @param <I>
  * @param <E>
  */
+@SuppressWarnings("restriction")
 abstract class AbstractJaxbMessageConverter<I, E> extends AbstractXmlHttpMessageConverter<E> {
 
 	private final Class<I> internalClass;

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/http/converter/jaxb/JaxbOAuth2AccessToken.java
Patch:
@@ -18,6 +18,7 @@
 import javax.xml.bind.annotation.XmlRootElement;
 import javax.xml.bind.annotation.XmlTransient;
 
+@SuppressWarnings("restriction")
 @XmlRootElement(name = "oauth")
 class JaxbOAuth2AccessToken {
 	private String accessToken;

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/http/converter/jaxb/JaxbOAuth2Exception.java
Patch:
@@ -17,6 +17,7 @@
 import javax.xml.bind.annotation.XmlElement;
 import javax.xml.bind.annotation.XmlRootElement;
 
+@SuppressWarnings("restriction")
 @XmlRootElement(name = "oauth")
 @XmlAccessorOrder(XmlAccessOrder.ALPHABETICAL)
 class JaxbOAuth2Exception {

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/filter/ClientCredentialsTokenEndpointFilter.java
Patch:
@@ -22,14 +22,13 @@
 import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
 import org.springframework.security.core.Authentication;
 import org.springframework.security.core.AuthenticationException;
-import org.springframework.security.oauth2.web.authentication.OAuth2AuthenticationFailureHandler;
 import org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter;
 import org.springframework.security.web.authentication.AuthenticationSuccessHandler;
 
 /**
  * A filter and authentication endpoint for the OAuth2 Token Endpoint. Allows clients to authenticate using request
  * parameters if included as a security filter, as permitted by the specification (but not recommended). It is
- * recommended by the specification that you permit HTTP basic authentication for cllients, and not use this filter at
+ * recommended by the specification that you permit HTTP basic authentication for clients, and not use this filter at
  * all.
  * 
  * @author Dave Syer

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/filter/OAuth2AuthenticationFailureHandler.java
Patch:
@@ -10,7 +10,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  */
-package org.springframework.security.oauth2.web.authentication;
+package org.springframework.security.oauth2.provider.filter;
 
 import java.io.IOException;
 

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/filter/TestOAuth2AuthenticationFailureHandler.java
Patch:
@@ -10,7 +10,7 @@
  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  * specific language governing permissions and limitations under the License.
  */
-package org.springframework.security.oauth2.web.authentication;
+package org.springframework.security.oauth2.provider.filter;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertSame;
@@ -32,6 +32,7 @@
 import org.springframework.security.core.AuthenticationException;
 import org.springframework.security.core.userdetails.UsernameNotFoundException;
 import org.springframework.security.oauth2.common.exceptions.InvalidClientException;
+import org.springframework.security.oauth2.provider.filter.OAuth2AuthenticationFailureHandler;
 import org.springframework.security.oauth2.provider.web.OAuth2ExceptionRenderer;
 import org.springframework.web.context.request.ServletWebRequest;
 

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/ClientDetailsServiceBeanDefinitionParser.java
Patch:
@@ -68,7 +68,7 @@ protected void doParse(Element element, ParserContext parserContext, BeanDefinit
       }
       String redirectUri = clientElement.getAttribute("redirect-uri");
       if (StringUtils.hasText(redirectUri)) {
-          client.addPropertyValue("webServerRedirectUri", redirectUri);
+          client.addPropertyValue("registeredRedirectUri", redirectUri);
       }
       client.addConstructorArgValue(clientElement.getAttribute("scope"));
       client.addConstructorArgValue(clientElement.getAttribute("authorized-grant-types"));

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/ClientDetails.java
Patch:
@@ -67,7 +67,7 @@ public interface ClientDetails extends Serializable {
    *
    * @return The pre-defined redirect URI for this client.
    */
-  String getWebServerRedirectUri();
+  String getRegisteredRedirectUri();
 
   /**
    * Get the authorities that are granted to the OAuth client.  Note that these are NOT the authorities

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/JdbcClientDetailsService.java
Patch:
@@ -53,7 +53,7 @@ public ClientDetails mapRow(ResultSet rs, int rowNum) throws SQLException {
 							rs.getString(4), rs.getString(5), rs.getString(7));
 					details.setClientId(rs.getString(1));
 					details.setClientSecret(rs.getString(3));
-					details.setWebServerRedirectUri(rs.getString(6));
+					details.setRegisteredRedirectUri(rs.getString(6));
 					return details;
 				}
 			}, clientId);

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/config/TestClientDetailsServiceBeanDefinitionParser.java
Patch:
@@ -83,7 +83,7 @@ public void testClientDetailsDefaultFlow() {
 		ClientDetails clientDetails = clientDetailsService.loadClientByClientId("my-client-id-default-flow");
 		assertNotNull(clientDetailsService);
 		assertEquals("my-client-id-default-flow", clientDetails.getClientId());
-		assertEquals("http://mycompany.com", clientDetails.getWebServerRedirectUri());
+		assertEquals("http://mycompany.com", clientDetails.getRegisteredRedirectUri());
 
 		List<String> grantTypes = clientDetails.getAuthorizedGrantTypes();
 		assertNotNull(grantTypes);

File: samples/oauth2/tonr/src/main/java/org/springframework/security/oauth/examples/tonr/mvc/SparklrController.java
Patch:
@@ -30,13 +30,13 @@ public class SparklrController {
 
 	private SparklrService sparklrService;
 
-	@RequestMapping("/sparklr2/photos")
+	@RequestMapping("/sparklr/photos")
 	public String photos(Model model) throws Exception {
 		model.addAttribute("photoIds", sparklrService.getSparklrPhotoIds());
 		return "sparklr";
 	}
 
-	@RequestMapping("/sparklr2/photos/{id}")
+	@RequestMapping("/sparklr/photos/{id}")
 	public ResponseEntity<BufferedImage> photo(@PathVariable String id) throws Exception {
 		InputStream photo = sparklrService.loadSparklrPhoto(id);
 		if (photo == null) {

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/filter/state/StateKeyGenerator.java
Patch:
@@ -20,6 +20,6 @@
  */
 public interface StateKeyGenerator {
 	
-	String generateKey(String id, OAuth2ProtectedResourceDetails resource);
+	String generateKey(OAuth2ProtectedResourceDetails resource);
 
 }

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/code/TestInMemoryAuthorizationCodeServices.java
Patch:
@@ -9,11 +9,10 @@ public class TestInMemoryAuthorizationCodeServices extends TestAuthorizationCode
 	@Before
 	public void setUp() throws Exception {
 		authorizationCodeServices = new InMemoryAuthorizationCodeServices();
-		authorizationCodeServices.afterPropertiesSet();
 	}
 
 	@Override
-  AuthorizationCodeServices getAuthorizationCodeServices() {
+	AuthorizationCodeServices getAuthorizationCodeServices() {
 		return authorizationCodeServices;
 	}
 }

File: samples/oauth2/sparklr/src/test/java/org/springframework/security/oauth2/provider/ServerRunning.java
Patch:
@@ -138,7 +138,7 @@ public Statement apply(Statement base, FrameworkMethod method, Object target) {
 		HttpURLConnection.setFollowRedirects(false);
 		boolean online = false;
 		try {
-			client.getForEntity(new UriTemplate(getUrl("/sparklr/login.jsp")).toString(), String.class);
+			client.getForEntity(new UriTemplate(getUrl("/sparklr2/login.jsp")).toString(), String.class);
 			online = true;
 			logger.info("Basic connectivity test passed");
 		}

File: samples/oauth2/tonr/src/main/java/org/springframework/security/oauth/examples/tonr/mvc/SparklrController.java
Patch:
@@ -30,13 +30,13 @@ public class SparklrController {
 
 	private SparklrService sparklrService;
 
-	@RequestMapping("/sparklr/photos")
+	@RequestMapping("/sparklr2/photos")
 	public String photos(Model model) throws Exception {
 		model.addAttribute("photoIds", sparklrService.getSparklrPhotoIds());
 		return "sparklr";
 	}
 
-	@RequestMapping("/sparklr/photos/{id}")
+	@RequestMapping("/sparklr2/photos/{id}")
 	public ResponseEntity<BufferedImage> photo(@PathVariable String id) throws Exception {
 		InputStream photo = sparklrService.loadSparklrPhoto(id);
 		if (photo == null) {

File: samples/oauth2/tonr/src/test/java/org/springframework/security/oauth/examples/tonr/ServerRunning.java
Patch:
@@ -135,7 +135,7 @@ public Statement apply(Statement base, FrameworkMethod method, Object target) {
 		HttpURLConnection.setFollowRedirects(false);
 		boolean online = false;
 		try {
-			client.getForEntity(new UriTemplate(getUrl("/sparklr/login.jsp")).toString(), String.class);
+			client.getForEntity(new UriTemplate(getUrl("/sparklr2/login.jsp")).toString(), String.class);
 			online = true;
 			logger.info("Basic connectivity test passed");
 		} catch (RestClientException e) {

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/token/AccessTokenProvider.java
Patch:
@@ -23,7 +23,7 @@ public interface AccessTokenProvider {
 	 * authorization.
 	 * @throws AccessDeniedException If the user denies access to the protected resource.
 	 */
-	OAuth2AccessToken obtainNewAccessToken(OAuth2ProtectedResourceDetails details, AccessTokenRequest parameters)
+	OAuth2AccessToken obtainAccessToken(OAuth2ProtectedResourceDetails details, AccessTokenRequest parameters)
 			throws UserRedirectRequiredException, AccessDeniedException;
 
 	/**
@@ -42,7 +42,8 @@ OAuth2AccessToken obtainNewAccessToken(OAuth2ProtectedResourceDetails details, A
 	OAuth2AccessToken refreshAccessToken(OAuth2ProtectedResourceDetails resource, OAuth2RefreshToken refreshToken, AccessTokenRequest request) throws UserRedirectRequiredException;
 
 	/**
+	 * @param resource TODO
 	 * @return true if this provider can refresh an access token
 	 */
-	boolean supportsRefresh();
+	boolean supportsRefresh(OAuth2ProtectedResourceDetails resource);
 }

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/token/grant/client/ClientCredentialsAccessTokenProvider.java
Patch:
@@ -26,7 +26,7 @@ public boolean supportsResource(OAuth2ProtectedResourceDetails resource) {
 				&& "client_credentials".equals(resource.getGrantType());
 	}
 
-	public boolean supportsRefresh() {
+	public boolean supportsRefresh(OAuth2ProtectedResourceDetails resource) {
 		return false;
 	}
 	
@@ -35,7 +35,7 @@ public OAuth2AccessToken refreshAccessToken(OAuth2ProtectedResourceDetails resou
 		return null;
 	}
 
-	public OAuth2AccessToken obtainNewAccessToken(OAuth2ProtectedResourceDetails details, AccessTokenRequest request)
+	public OAuth2AccessToken obtainAccessToken(OAuth2ProtectedResourceDetails details, AccessTokenRequest request)
 			throws UserRedirectRequiredException, AccessDeniedException {
 
 		if (request.isError()) {

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/token/grant/implicit/ImplicitAccessTokenProvider.java
Patch:
@@ -40,7 +40,7 @@ public boolean supportsResource(OAuth2ProtectedResourceDetails resource) {
 		return resource instanceof ImplicitResourceDetails && "implicit".equals(resource.getGrantType());
 	}
 	
-	public boolean supportsRefresh() {
+	public boolean supportsRefresh(OAuth2ProtectedResourceDetails resource) {
 		return false;
 	}
 	
@@ -49,7 +49,7 @@ public OAuth2AccessToken refreshAccessToken(OAuth2ProtectedResourceDetails resou
 		return null;
 	}
 
-	public OAuth2AccessToken obtainNewAccessToken(OAuth2ProtectedResourceDetails details, AccessTokenRequest request)
+	public OAuth2AccessToken obtainAccessToken(OAuth2ProtectedResourceDetails details, AccessTokenRequest request)
 			throws UserRedirectRequiredException, AccessDeniedException {
 
 		ImplicitResourceDetails resource = (ImplicitResourceDetails) details;

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/client/rememberme/TestHttpSessionOAuth2RememberMeServices.java
Patch:
@@ -9,6 +9,7 @@
 import org.springframework.mock.web.MockHttpServletRequest;
 import org.springframework.mock.web.MockHttpServletResponse;
 import org.springframework.security.oauth2.client.filter.cache.HttpSessionAccessTokenCache;
+import org.springframework.security.oauth2.client.resource.OAuth2ProtectedResourceDetails;
 import org.springframework.security.oauth2.common.OAuth2AccessToken;
 
 /**
@@ -25,7 +26,7 @@ public class TestHttpSessionOAuth2RememberMeServices {
 	@Test
 	public void testSaveTokensCreatesSessionByDefault() throws Exception {
 		assertNull(request.getSession(false));
-		services.rememberTokens(Collections.<String,OAuth2AccessToken>emptyMap(), request, response);
+		services.rememberTokens(Collections.<OAuth2ProtectedResourceDetails,OAuth2AccessToken>emptyMap(), request, response);
 		assertNotNull(request.getSession(false));
 	}
 }

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/client/token/grant/TestAuthorizationCodeAccessTokenProvider.java
Patch:
@@ -57,7 +57,7 @@ public void testGetAccessToken() throws Exception {
 		AccessTokenRequest request = new AccessTokenRequest();
 		request.setAuthorizationCode("foo");
 		resource.setAccessTokenUri("http://localhost/oauth/token");
-		assertEquals("FOO", provider.obtainNewAccessToken(resource , request).getValue());
+		assertEquals("FOO", provider.obtainAccessToken(resource , request).getValue());
 	}
 
 	@Test
@@ -66,7 +66,7 @@ public void testRedirectToAuthorizationEndpoint() throws Exception {
 		request.setUserAuthorizationRedirectUri("/come/back/soon");
 		resource.setUserAuthorizationUri("http://localhost/oauth/authorize");
 		try {
-			provider.obtainNewAccessToken(resource , request);
+			provider.obtainAccessToken(resource , request);
 			fail("Expected UserRedirectRequiredException");
 		} catch (UserRedirectRequiredException e) {
 			assertEquals("http://localhost/oauth/authorize", e.getRedirectUri());

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/ClientBeanDefinitionParser.java
Patch:
@@ -39,7 +39,7 @@
  * 
  * @author Ryan Heaton
  */
-public class OAuth2ClientBeanDefinitionParser extends AbstractBeanDefinitionParser {
+public class ClientBeanDefinitionParser extends AbstractBeanDefinitionParser {
 
 	@Override
 	protected AbstractBeanDefinition parseInternal(Element element, ParserContext parserContext) {

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/OAuth2SecurityNamespaceHandler.java
Patch:
@@ -25,8 +25,8 @@ public void init() {
 		registerBeanDefinitionParser("authorization-server", new AuthorizationServerBeanDefinitionParser());
 		registerBeanDefinitionParser("resource-server", new ResourceServerBeanDefinitionParser());
 		registerBeanDefinitionParser("client-details-service", new ClientDetailsServiceBeanDefinitionParser());
-		registerBeanDefinitionParser("client", new OAuth2ClientBeanDefinitionParser());
-		registerBeanDefinitionParser("resource", new OAuth2ResourceBeanDefinitionParser());
+		registerBeanDefinitionParser("client", new ClientBeanDefinitionParser());
+		registerBeanDefinitionParser("resource", new ResourceBeanDefinitionParser());
 		registerBeanDefinitionParser("expression-handler", new ExpressionHandlerBeanDefinitionParser());
 	}
 }
\ No newline at end of file

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/ResourceBeanDefinitionParser.java
Patch:
@@ -36,7 +36,7 @@
 /**
  * @author Ryan Heaton
  */
-public class OAuth2ResourceBeanDefinitionParser extends AbstractSingleBeanDefinitionParser {
+public class ResourceBeanDefinitionParser extends AbstractSingleBeanDefinitionParser {
 
 	@Override
 	protected Class<?> getBeanClass(Element element) {

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/filter/cache/HttpSessionAccessTokenCache.java
Patch:
@@ -1,4 +1,4 @@
-package org.springframework.security.oauth2.client.filter.flash;
+package org.springframework.security.oauth2.client.filter.cache;
 
 import org.springframework.security.oauth2.common.OAuth2AccessToken;
 
@@ -13,9 +13,9 @@
  * @author Ryan Heaton
  * @author Dave Syer
  */
-public class HttpSessionClientTokenCache implements ClientTokenCache {
+public class HttpSessionAccessTokenCache implements AccessTokenCache {
 
-	private static final String REMEMBERED_TOKENS_KEY = HttpSessionClientTokenCache.class.getName()
+	private static final String REMEMBERED_TOKENS_KEY = HttpSessionAccessTokenCache.class.getName()
 			+ "#REMEMBERED_TOKENS";
 
     private boolean allowSessionCreation = true;

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/filter/cache/NoOpAccessTokenCache.java
Patch:
@@ -1,4 +1,4 @@
-package org.springframework.security.oauth2.client.filter.flash;
+package org.springframework.security.oauth2.client.filter.cache;
 
 import java.util.Map;
 
@@ -12,7 +12,7 @@
  * 
  * @author Ryan Heaton
  */
-public class NoOpClientTokenFlashServices implements ClientTokenCache {
+public class NoOpAccessTokenCache implements AccessTokenCache {
 
 	public Map<String, OAuth2AccessToken> loadRememberedTokens(HttpServletRequest request, HttpServletResponse response) {
 		return null;

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/token/OAuth2AccessTokenSupport.java
Patch:
@@ -106,12 +106,9 @@ protected OAuth2AccessToken retrieveToken(MultiValueMap<String, String> form,
 
 		}
 		catch (OAuth2Exception oe) {
-
 			throw new OAuth2AccessDeniedException("Access token denied.", resource, oe);
-
 		}
 		catch (RestClientException rce) {
-
 			throw new OAuth2AccessDeniedException("Error requesting access token.", resource, rce);
 		}
 

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/ConfigUtils.java
Patch:
@@ -33,6 +33,7 @@ public static BeanDefinition createSecurityMetadataSource(Element element, Parse
       return null;
     }
 
+    // TODO : add support for lowercase-comparisons
     String patternType = element.getAttribute("path-type");
     if (!StringUtils.hasText(patternType)) {
       patternType = "ant";

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/client/rememberme/TestHttpSessionOAuth2RememberMeServices.java
Patch:
@@ -8,15 +8,15 @@
 import org.junit.Test;
 import org.springframework.mock.web.MockHttpServletRequest;
 import org.springframework.mock.web.MockHttpServletResponse;
-import org.springframework.security.oauth2.client.filter.flash.HttpSessionClientTokenCache;
+import org.springframework.security.oauth2.client.filter.cache.HttpSessionAccessTokenCache;
 import org.springframework.security.oauth2.common.OAuth2AccessToken;
 
 /**
  * @author Dave Syer
  */
 public class TestHttpSessionOAuth2RememberMeServices {
 	
-	private HttpSessionClientTokenCache services = new HttpSessionClientTokenCache();
+	private HttpSessionAccessTokenCache services = new HttpSessionAccessTokenCache();
 	
 	private MockHttpServletRequest request = new MockHttpServletRequest();
 	

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/token/AccessTokenProvider.java
Patch:
@@ -10,7 +10,7 @@
  *
  * @author Ryan Heaton
  */
-public interface OAuth2AccessTokenProvider {
+public interface AccessTokenProvider {
 
   /**
    * Obtain a new access token for the specified protected resource.

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/token/grant/client/ClientCredentialsAccessTokenProvider.java
Patch:
@@ -7,7 +7,7 @@
 import org.springframework.security.oauth2.client.UserRedirectRequiredException;
 import org.springframework.security.oauth2.client.resource.OAuth2ProtectedResourceDetails;
 import org.springframework.security.oauth2.client.token.AccessTokenRequest;
-import org.springframework.security.oauth2.client.token.OAuth2AccessTokenProvider;
+import org.springframework.security.oauth2.client.token.AccessTokenProvider;
 import org.springframework.security.oauth2.client.token.OAuth2AccessTokenSupport;
 import org.springframework.security.oauth2.common.OAuth2AccessToken;
 import org.springframework.util.LinkedMultiValueMap;
@@ -18,7 +18,7 @@
  * 
  * @author Dave Syer
  */
-public class ClientCredentialsAccessTokenProvider extends OAuth2AccessTokenSupport implements OAuth2AccessTokenProvider {
+public class ClientCredentialsAccessTokenProvider extends OAuth2AccessTokenSupport implements AccessTokenProvider {
 
 	public boolean supportsResource(OAuth2ProtectedResourceDetails resource) {
 		return resource instanceof ClientCredentialsResourceDetails

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/token/grant/code/AuthorizationCodeAccessTokenProvider.java
Patch:
@@ -8,7 +8,7 @@
 import org.springframework.security.oauth2.client.UserRedirectRequiredException;
 import org.springframework.security.oauth2.client.resource.OAuth2ProtectedResourceDetails;
 import org.springframework.security.oauth2.client.token.AccessTokenRequest;
-import org.springframework.security.oauth2.client.token.OAuth2AccessTokenProvider;
+import org.springframework.security.oauth2.client.token.AccessTokenProvider;
 import org.springframework.security.oauth2.client.token.OAuth2AccessTokenSupport;
 import org.springframework.security.oauth2.common.OAuth2AccessToken;
 import org.springframework.util.LinkedMultiValueMap;
@@ -20,7 +20,7 @@
  * @author Ryan Heaton
  * @author Dave Syer
  */
-public class AuthorizationCodeAccessTokenProvider extends OAuth2AccessTokenSupport implements OAuth2AccessTokenProvider {
+public class AuthorizationCodeAccessTokenProvider extends OAuth2AccessTokenSupport implements AccessTokenProvider {
 
 	public boolean supportsResource(OAuth2ProtectedResourceDetails resource) {
 		return resource instanceof AuthorizationCodeResourceDetails

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/token/grant/implicit/ImplicitAccessTokenProvider.java
Patch:
@@ -12,7 +12,7 @@
 import org.springframework.security.oauth2.client.UserRedirectRequiredException;
 import org.springframework.security.oauth2.client.resource.OAuth2ProtectedResourceDetails;
 import org.springframework.security.oauth2.client.token.AccessTokenRequest;
-import org.springframework.security.oauth2.client.token.OAuth2AccessTokenProvider;
+import org.springframework.security.oauth2.client.token.AccessTokenProvider;
 import org.springframework.security.oauth2.client.token.OAuth2AccessTokenSupport;
 import org.springframework.security.oauth2.common.OAuth2AccessToken;
 import org.springframework.util.LinkedMultiValueMap;
@@ -33,7 +33,7 @@
  * 
  * @author Dave Syer
  */
-public class ImplicitAccessTokenProvider extends OAuth2AccessTokenSupport implements OAuth2AccessTokenProvider {
+public class ImplicitAccessTokenProvider extends OAuth2AccessTokenSupport implements AccessTokenProvider {
 
 	public boolean supportsResource(OAuth2ProtectedResourceDetails resource) {
 		return resource instanceof ImplicitResourceDetails && "implicit".equals(resource.getGrantType());

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/OAuth2ClientBeanDefinitionParser.java
Patch:
@@ -27,7 +27,7 @@
 import org.springframework.security.oauth2.client.filter.OAuth2ClientContextFilter;
 import org.springframework.security.oauth2.client.filter.OAuth2ClientProcessingFilter;
 import org.springframework.security.oauth2.client.filter.flash.HttpSessionClientTokenFlashServices;
-import org.springframework.security.oauth2.client.token.OAuth2AccessTokenProviderChain;
+import org.springframework.security.oauth2.client.token.AccessTokenProviderChain;
 import org.springframework.security.oauth2.client.token.grant.client.ClientCredentialsAccessTokenProvider;
 import org.springframework.security.oauth2.client.token.grant.code.AuthorizationCodeAccessTokenProvider;
 import org.springframework.security.oauth2.client.token.service.InMemoryOAuth2ClientTokenServices;
@@ -80,7 +80,7 @@ protected AbstractBeanDefinition parseInternal(Element element, ParserContext pa
 			ManagedList<BeanMetadataElement> profiles = new ManagedList<BeanMetadataElement>();
 			profiles.add(BeanDefinitionBuilder.genericBeanDefinition(AuthorizationCodeAccessTokenProvider.class).getBeanDefinition());
 			profiles.add(BeanDefinitionBuilder.genericBeanDefinition(ClientCredentialsAccessTokenProvider.class).getBeanDefinition());
-			BeanDefinitionBuilder profileManager = BeanDefinitionBuilder.rootBeanDefinition(OAuth2AccessTokenProviderChain.class);
+			BeanDefinitionBuilder profileManager = BeanDefinitionBuilder.rootBeanDefinition(AccessTokenProviderChain.class);
 			profileManager.addConstructorArgValue(profiles);
 			if ("false".equalsIgnoreCase(requireAuthenticated)) {
 				profileManager.addPropertyValue("requireAuthenticated", "false");

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/resource/OAuth2ProtectedResourceDetails.java
Patch:
@@ -102,7 +102,7 @@ public enum AuthenticationScheme {
   AuthenticationScheme getAuthenticationScheme();
 
   /**
-   * The name of the bearer token. The default is "bearer_token", which is according to the spec, but some providers (e.g. Facebook) don't conform to the spec.)
+   * The name of the bearer token. The default is "access_token", which is according to the spec, but some providers (e.g. Facebook) don't conform to the spec.)
    *
    * @return The name of the bearer token.
    */

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/OAuth2AccessToken.java
Patch:
@@ -13,7 +13,7 @@ public class OAuth2AccessToken implements Serializable {
 
 	private static final long serialVersionUID = 914967629530462926L;
 
-	public static String BEARER_TYPE_PARAMETER = "bearer_token";
+	public static String BEARER_TYPE_PARAMETER = "access_token";
 
 	public static String BEARER_TYPE = "Bearer";
 

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/OAuth2Authentication.java
Patch:
@@ -13,7 +13,7 @@ public class OAuth2Authentication extends AbstractAuthenticationToken {
 
 	private static final long serialVersionUID = -4809832298438307309L;
 
-	private final ClientAuthenticationToken clientAuthentication;
+	private final ClientToken clientAuthentication;
 	private final Authentication userAuthentication;
 
 	/**
@@ -23,7 +23,7 @@ public class OAuth2Authentication extends AbstractAuthenticationToken {
 	 * @param clientAuthentication The client authentication (may NOT be null).
 	 * @param userAuthentication The user authentication (possibly null).
 	 */
-	public OAuth2Authentication(ClientAuthenticationToken clientAuthentication, Authentication userAuthentication) {
+	public OAuth2Authentication(ClientToken clientAuthentication, Authentication userAuthentication) {
 		super(userAuthentication == null ? clientAuthentication.getAuthorities() : userAuthentication.getAuthorities());
 		this.clientAuthentication = clientAuthentication;
 		this.userAuthentication = userAuthentication;
@@ -44,7 +44,7 @@ public Object getPrincipal() {
 	 * 
 	 * @return The client authentication.
 	 */
-	public ClientAuthenticationToken getClientAuthentication() {
+	public ClientToken getClientAuthentication() {
 		return clientAuthentication;
 	}
 

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/code/DefaultUserApprovalHandler.java
Patch:
@@ -16,7 +16,7 @@
 
 package org.springframework.security.oauth2.provider.code;
 
-import org.springframework.security.oauth2.provider.ClientAuthenticationToken;
+import org.springframework.security.oauth2.provider.ClientToken;
 
 /**
  * @author Dave Syer
@@ -30,7 +30,7 @@ public class DefaultUserApprovalHandler implements UserApprovalHandler {
 	 * @param clientAuthentication The client authentication.
 	 * @return Whether the specified client authentication has been approved by the current user.
 	 */
-	public boolean isApproved(ClientAuthenticationToken clientAuthentication) {
+	public boolean isApproved(ClientToken clientAuthentication) {
 		return clientAuthentication.isAuthenticated();
 	}
 

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/code/UnconfirmedAuthorizationCodeAuthenticationTokenHolder.java
Patch:
@@ -30,17 +30,17 @@ public class UnconfirmedAuthorizationCodeAuthenticationTokenHolder implements Se
 
 	private static final long serialVersionUID = 914967629530462926L;
 
-	private final UnconfirmedAuthorizationCodeAuthenticationToken clientAuthentication;
+	private final UnconfirmedAuthorizationCodeClientToken clientAuthentication;
 
 	private final Authentication userAuthentication;
 
 	public UnconfirmedAuthorizationCodeAuthenticationTokenHolder(
-			UnconfirmedAuthorizationCodeAuthenticationToken clientAuthentication, Authentication userAuthentication) {
+			UnconfirmedAuthorizationCodeClientToken clientAuthentication, Authentication userAuthentication) {
 		this.clientAuthentication = clientAuthentication;
 		this.userAuthentication = userAuthentication;
 	}
 
-	public UnconfirmedAuthorizationCodeAuthenticationToken getClientAuthentication() {
+	public UnconfirmedAuthorizationCodeClientToken getClientAuthentication() {
 		return clientAuthentication;
 	}
 

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/code/UserApprovalHandler.java
Patch:
@@ -1,6 +1,6 @@
 package org.springframework.security.oauth2.provider.code;
 
-import org.springframework.security.oauth2.provider.ClientAuthenticationToken;
+import org.springframework.security.oauth2.provider.ClientToken;
 
 /**
  * Basic interface for determining whether a given client authentication request has been approved by the current user.
@@ -15,5 +15,5 @@ public interface UserApprovalHandler {
    * @param clientAuthentication The client authentication.
    * @return Whether the specified client authentication has been approved by the current user.
    */
-  boolean isApproved(ClientAuthenticationToken clientAuthentication);
+  boolean isApproved(ClientToken clientAuthentication);
 }

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/expression/OAuth2MethodSecurityExpressionHandler.java
Patch:
@@ -17,6 +17,7 @@
 import org.springframework.security.core.Authentication;
 import org.springframework.security.core.GrantedAuthority;
 import org.springframework.security.core.authority.AuthorityUtils;
+import org.springframework.security.oauth2.provider.ClientToken;
 import org.springframework.security.oauth2.provider.OAuth2Authentication;
 
 /**
@@ -35,7 +36,7 @@ public StandardEvaluationContext createEvaluationContextInternal(Authentication
 	public static boolean clientHasAnyRole(SecurityExpressionRoot root, String... roles) {
 		Authentication authentication = root.getAuthentication();
 		if (authentication instanceof OAuth2Authentication) {
-			Authentication clientAuthentication = ((OAuth2Authentication) authentication).getClientAuthentication();
+			ClientToken clientAuthentication = ((OAuth2Authentication) authentication).getClientAuthentication();
 			Collection<? extends GrantedAuthority> clientAuthorities = clientAuthentication.getAuthorities();
 			if (clientAuthorities != null) {
 				Set<String> roleSet = AuthorityUtils.authorityListToSet(clientAuthorities);

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/refresh/RefreshTokenGranter.java
Patch:
@@ -54,7 +54,7 @@ public OAuth2AccessToken grant(String grantType, Map<String, String> parameters,
 		if (!GRANT_TYPE.equals(grantType)) {
 			return null;
 		}
-		
+
 		String refreshToken = parameters.get("refresh_token");
 
 		// TODO: move this out to a filter?
@@ -89,8 +89,8 @@ public OAuth2AccessToken grant(String grantType, Map<String, String> parameters,
 				&& !authorizedGrantTypes.contains(grantType)) {
 			throw new InvalidGrantException("Unauthorized grant type: " + grantType);
 		}
-		
-		return tokenServices.refreshAccessToken(new RefreshTokenDetails(refreshToken, authorizationScope));
+
+		return tokenServices.refreshAccessToken(refreshToken, authorizationScope);
 
 	}
 

File: spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/code/TestAuthorizationCodeServicesBase.java
Patch:
@@ -19,7 +19,7 @@ public abstract class TestAuthorizationCodeServicesBase {
 	@Test
 	public void testCreateAuthorizationCode() {
 		UnconfirmedAuthorizationCodeAuthenticationTokenHolder expectedAuthentication = new UnconfirmedAuthorizationCodeAuthenticationTokenHolder(
-				new UnconfirmedAuthorizationCodeAuthenticationToken("id", null, null, null), new TestAuthentication(
+				new UnconfirmedAuthorizationCodeClientToken("id", null, null, null), new TestAuthentication(
 						"test2", false));
 		String code = getAuthorizationCodeServices().createAuthorizationCode(expectedAuthentication);
 		assertNotNull(code);
@@ -32,7 +32,7 @@ public void testCreateAuthorizationCode() {
 	@Test
 	public void testConsumeRemovesCode() {
 		UnconfirmedAuthorizationCodeAuthenticationTokenHolder expectedAuthentication = new UnconfirmedAuthorizationCodeAuthenticationTokenHolder(
-				new UnconfirmedAuthorizationCodeAuthenticationToken("id", null, null, null), new TestAuthentication(
+				new UnconfirmedAuthorizationCodeClientToken("id", null, null, null), new TestAuthentication(
 						"test2", false));
 		String code = getAuthorizationCodeServices().createAuthorizationCode(expectedAuthentication);
 		assertNotNull(code);

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/AuthorizationEndpoint.java
Patch:
@@ -133,7 +133,7 @@ public void approveOrDeny(@RequestParam("user_oauth_approval") boolean approved,
 
 	}
 
-	public Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response)
+	private Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response)
 			throws AuthenticationException, IOException, ServletException {
 		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
 		if (authentication == null || !authentication.isAuthenticated()) {

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/provider/OAuth2AccessTokenProviderChain.java
Patch:
@@ -26,7 +26,8 @@ public OAuth2AccessTokenProviderChain(List<OAuth2AccessTokenProvider> chain) {
 				.unmodifiableList(chain);
 	}
 
-	public OAuth2AccessToken obtainNewAccessToken(OAuth2ProtectedResourceDetails details)
+	@Override
+	public OAuth2AccessToken obtainNewAccessTokenInternal(OAuth2ProtectedResourceDetails details)
 			throws UserRedirectRequiredException, AccessDeniedException {
 		for (OAuth2AccessTokenProvider tokenProvider : chain) {
 			if (tokenProvider.supportsResource(details)) {

File: samples/oauth2/tonr/src/test/java/org/springframework/security/oauth/examples/tonr/TestClientConnections.java
Patch:
@@ -73,7 +73,7 @@ public void testConnectWithToken() throws Exception {
 		formData.add("username", "marissa");
 		formData.add("password", "koala");
 
-		ResponseEntity<String> response = serverRunning.postForString("/sparklr/oauth/authorize", formData);
+		ResponseEntity<String> response = serverRunning.postForString("/sparklr/oauth/token", formData);
 		assertEquals(HttpStatus.OK, response.getStatusCode());
 		assertEquals("no-store", response.getHeaders().getFirst("Cache-Control"));
 

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/code/AuthorizationCodeAccessTokenProvider.java
Patch:
@@ -56,10 +56,10 @@ private MultiValueMap<String, String> getParametersForTokenRequest(Authorization
 		form.add("code", context.getAuthorizationCode());
 
 		String redirectUri = resource.getPreEstablishedRedirectUri();
-		if (redirectUri == null) {
+		if (context!=null && redirectUri == null) {
 			// no pre-established redirect uri: use the preserved state
 			// TODO: treat redirect URI as a special kind of state (this is a historical mini hack)
-			redirectUri = String.valueOf(context==null ? null : context.getPreservedState());
+			redirectUri = String.valueOf(context.getPreservedState());
 		} else {
 			// TODO: the state key is what should be sent, not the value
 			form.add("state", String.valueOf(context.getPreservedState()));

File: samples/oauth2/sparklr/src/test/java/org/springframework/security/oauth2/provider/TestAuthorizationCodeProvider.java
Patch:
@@ -130,7 +130,7 @@ public void testBasicAuthorizationCodeProvider() throws Exception {
 
 		// let's try that request again and make sure we can't re-use the authorization code...
 		response = serverRunning.postForString("/sparklr/oauth/authorize", formData);
-		assertEquals(HttpStatus.UNAUTHORIZED, response.getStatusCode());
+		assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
 		assertEquals("no-store", response.getHeaders().getFirst("Cache-Control"));
 		try {
 			throw serializationService.deserializeJsonError(new ByteArrayInputStream(response.getBody().getBytes()));
@@ -223,7 +223,7 @@ public void testFailureIfSomeParametersAreMissing() throws Exception {
 		formData.add("redirect_uri", "http://nowhere");
 		formData.add("code", code);
 		ResponseEntity<String> response = serverRunning.postForString("/sparklr/oauth/authorize", formData);
-		assertEquals(HttpStatus.UNAUTHORIZED, response.getStatusCode());
+		assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
 		assertEquals("no-store", response.getHeaders().getFirst("Cache-Control"));
 
 		DefaultOAuth2SerializationService serializationService = new DefaultOAuth2SerializationService();

File: spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/OAuth2AccessToken.java
Patch:
@@ -21,7 +21,7 @@ public class OAuth2AccessToken implements Serializable {
 
 	private String value;
 	private Date expiration;
-	private String tokenType;
+	private String tokenType = BEARER_TYPE.toLowerCase();
 	private OAuth2RefreshToken refreshToken;
 	private Set<String> scope;
 

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/common/signature/HMAC_SHA1SignatureMethod.java
Patch:
@@ -25,7 +25,6 @@
 import java.io.UnsupportedEncodingException;
 import java.security.InvalidKeyException;
 import java.security.NoSuchAlgorithmException;
-import java.util.Arrays;
 
 /**
  * HMAC-SHA1 signature method.

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/common/signature/UnsupportedSignatureMethodException.java
Patch:
@@ -16,8 +16,6 @@
 
 package org.springframework.security.oauth.common.signature;
 
-import org.springframework.security.oauth.common.OAuthException;
-
 /**
  * @author Ryan Heaton
  */

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/config/ExpressionHandlerBeanDefinitionParser.java
Patch:
@@ -16,11 +16,8 @@
 
 package org.springframework.security.oauth.config;
 
-import org.springframework.beans.factory.support.BeanDefinitionBuilder;
 import org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser;
-import org.springframework.beans.factory.xml.ParserContext;
 import org.springframework.security.access.oauth.OAuthMethodSecurityExpressionHandler;
-import org.springframework.util.StringUtils;
 import org.w3c.dom.Element;
 
 /**

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/config/OAuthConsumerBeanDefinitionParser.java
Patch:
@@ -22,17 +22,14 @@
 import org.springframework.beans.factory.support.BeanDefinitionBuilder;
 import org.springframework.beans.factory.xml.BeanDefinitionParser;
 import org.springframework.beans.factory.xml.ParserContext;
-import org.springframework.security.config.BeanIds;
 import org.springframework.security.oauth.consumer.CoreOAuthConsumerSupport;
 import org.springframework.security.oauth.consumer.OAuthConsumerContextFilter;
 import org.springframework.security.oauth.consumer.OAuthConsumerProcessingFilter;
 import org.springframework.security.web.access.AccessDeniedHandlerImpl;
 import org.springframework.util.StringUtils;
 import org.w3c.dom.Element;
 
-import java.util.Iterator;
 import java.util.List;
-import java.util.Map;
 
 /**
  * Parser for the OAuth "consumer" element.

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/provider/UserAuthorizationSuccessfulAuthenticationHandler.java
Patch:
@@ -15,7 +15,6 @@
  */
 package org.springframework.security.oauth.provider;
 
-import org.springframework.security.web.*;
 import org.springframework.security.web.DefaultRedirectStrategy;
 import org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler;
 import org.springframework.security.core.Authentication;

File: spring-security-oauth/src/main/java/org/springframework/security/oauth2/consumer/OAuth2RestTemplate.java
Patch:
@@ -2,7 +2,6 @@
 
 import org.springframework.http.client.ClientHttpRequestFactory;
 import org.springframework.http.client.SimpleClientHttpRequestFactory;
-import org.springframework.web.client.ResponseErrorHandler;
 import org.springframework.web.client.RestTemplate;
 
 /**

File: spring-security-oauth/src/main/java/org/springframework/security/oauth2/provider/OAuth2ProtectedResourceFilter.java
Patch:
@@ -122,7 +122,7 @@ protected void setAuthenticateHeader(HttpServletResponse response, String error,
       }
     }
 
-    //todo: scope
+    // TODO: scope
 
     response.addHeader("WWW-Authenticate", builder.toString());
   }

File: spring-security-oauth/src/test/java/net/oauth/signature/TestGoogleCodeCompatibility.java
Patch:
@@ -16,8 +16,6 @@
 
 package net.oauth.signature;
 
-import junit.framework.TestCase;
-
 import org.junit.Test;
 import org.springframework.security.oauth.common.signature.HMAC_SHA1SignatureMethod;
 import org.springframework.security.oauth.common.OAuthCodec;

File: spring-security-oauth/src/test/java/org/springframework/security/oauth/provider/TestCoreOAuthProviderSupport.java
Patch:
@@ -22,8 +22,6 @@
 import org.junit.Test;
 import org.springframework.security.oauth.common.OAuthConsumerParameter;
 
-import junit.framework.TestCase;
-
 import javax.servlet.http.HttpServletRequest;
 import java.util.Map;
 import java.util.HashMap;

File: spring-security-oauth/src/test/java/org/springframework/security/oauth2/consumer/TestOAuth2ErrorHandler.java
Patch:
@@ -14,6 +14,7 @@
 import org.springframework.http.HttpHeaders;
 import org.springframework.http.HttpStatus;
 import org.springframework.http.client.ClientHttpResponse;
+import org.springframework.security.oauth2.common.OAuth2AccessToken;
 import org.springframework.security.oauth2.common.exceptions.InvalidTokenException;
 import org.springframework.web.client.HttpClientErrorException;
 
@@ -35,7 +36,7 @@ public void setUp() throws Exception {
 	public void testHandleExpiredTokenError() throws IOException {
 
 		final HttpHeaders headers = new HttpHeaders();
-		headers.add("WWW-Authenticate", OAuth2ErrorHandler.AUTH_HEADER + "error=invalid_token");
+		headers.add("WWW-Authenticate", OAuth2AccessToken.BEARER_TYPE + " error=invalid_token");
 		response.getHeaders();
 		expectLastCall().andReturn(headers);
 		replay(response);

File: sparklr2/src/test/java/org/springframework/security/oauth2/provider/TestNativeApplicationProfile.java
Patch:
@@ -54,7 +54,7 @@ public void testHappyDay() throws Exception {
 
 		// now make sure an authorized request is valid.
 		HttpHeaders headers = new HttpHeaders();
-		headers.set("Authorization", String.format("OAuth2 %s", accessToken.getValue()));
+		headers.set("Authorization", String.format("%s %s", OAuth2AccessToken.BEARER_TYPE, accessToken.getValue()));
 		assertEquals(HttpStatus.OK, serverRunning.getStatusCode("/sparklr/photos?format=json", headers));
 	}
 
@@ -142,7 +142,7 @@ public void testClientRoleBasedSecurity() throws Exception {
 
 		// now make sure an authorized request is valid.
 		HttpHeaders headers = new HttpHeaders();
-		headers.set("Authorization", String.format("OAuth2 %s", accessToken.getValue()));
+		headers.set("Authorization", String.format("%s %s", OAuth2AccessToken.BEARER_TYPE, accessToken.getValue()));
 		assertEquals(HttpStatus.OK, serverRunning.getStatusCode("/sparklr/trusted/message", headers));
 	}
 

File: sparklr2/src/test/java/org/springframework/security/oauth2/provider/TestRefreshTokenSupport.java
Patch:
@@ -52,7 +52,7 @@ public void testHappyDay() throws Exception {
 
 		// now make sure an authorized request is valid.
 		HttpHeaders headers = new HttpHeaders();
-		headers.set("Authorization", String.format("OAuth2 %s", accessToken.getValue()));
+		headers.set("Authorization", String.format("%s %s", OAuth2AccessToken.BEARER_TYPE, accessToken.getValue()));
 		assertEquals(HttpStatus.OK, serverRunning.getStatusCode("/sparklr/photos?format=json", headers));
 
 		// now use the refresh token to get a new access token.
@@ -70,11 +70,11 @@ public void testHappyDay() throws Exception {
 
 		// make sure the new access token can be used.
 		headers = new HttpHeaders();
-		headers.set("Authorization", String.format("OAuth2 %s", newAccessToken.getValue()));
+		headers.set("Authorization", String.format("%s %s", OAuth2AccessToken.BEARER_TYPE, newAccessToken.getValue()));
 		assertEquals(HttpStatus.OK, serverRunning.getStatusCode("/sparklr/photos?format=json", headers));
 
 		// make sure the old access token isn't valid anymore.
-		headers.set("Authorization", String.format("OAuth2 %s", accessToken.getValue()));
+		headers.set("Authorization", String.format("%s %s", OAuth2AccessToken.BEARER_TYPE, accessToken.getValue()));
 		assertEquals(HttpStatus.UNAUTHORIZED, serverRunning.getStatusCode("/sparklr/photos?format=json", headers));
 	}
 }

File: sparklr2/src/test/java/org/springframework/security/oauth2/provider/TestWebServerProfile.java
Patch:
@@ -143,7 +143,7 @@ public void testBasicWebServerProfile() throws Exception {
 
 		// now make sure an authorized request is valid.
 		HttpHeaders headers = new HttpHeaders();
-		headers.set("Authorization", String.format("OAuth2 %s", accessToken.getValue()));
+		headers.set("Authorization", String.format("%s %s", OAuth2AccessToken.BEARER_TYPE, accessToken.getValue()));
 		assertEquals(HttpStatus.OK, serverRunning.getStatusCode("/sparklr/photos?format=json", headers));
 	}
 

File: spring-security-oauth/src/main/java/org/springframework/security/oauth2/consumer/OAuth2ClientContextFilter.java
Patch:
@@ -214,7 +214,7 @@ protected String calculateCurrentUri(HttpServletRequest request) throws Unsuppor
         }
       }
 
-      if (paramNames.hasMoreElements()) {
+      if (paramNames.hasMoreElements() && queryBuilder.length()>0) {
         queryBuilder.append('&');
       }
     }

File: sparklr2/src/test/java/org/springframework/security/oauth2/provider/TestNativeApplicationProfile.java
Patch:
@@ -48,7 +48,7 @@ public void testHappyDay() throws Exception {
 
     //now make sure an authorized request is valid.
     response = client.resource("http://localhost:" + port + "/sparklr/json/photos")
-      .header("Authorization", String.format("OAuth %s", accessToken.getValue()))
+      .header("Authorization", String.format("OAuth2 %s", accessToken.getValue()))
       .get(ClientResponse.class);
     assertEquals(200, response.getClientResponseStatus().getStatusCode());
   }

File: sparklr2/src/test/java/org/springframework/security/oauth2/provider/TestRefreshTokenSupport.java
Patch:
@@ -45,7 +45,7 @@ public void testHappyDay() throws Exception {
 
     //now make sure an authorized request is valid.
     response = client.resource("http://localhost:" + port + "/sparklr/json/photos")
-      .header("Authorization", String.format("OAuth %s", accessToken.getValue()))
+      .header("Authorization", String.format("OAuth2 %s", accessToken.getValue()))
       .get(ClientResponse.class);
     assertEquals(200, response.getClientResponseStatus().getStatusCode());
 
@@ -65,13 +65,13 @@ public void testHappyDay() throws Exception {
 
     //make sure the new access token can be used.
     response = client.resource("http://localhost:" + port + "/sparklr/json/photos")
-      .header("Authorization", String.format("OAuth %s", newAccessToken.getValue()))
+      .header("Authorization", String.format("OAuth2 %s", newAccessToken.getValue()))
       .get(ClientResponse.class);
     assertEquals(200, response.getClientResponseStatus().getStatusCode());
 
     //make sure the old access token isn't valid anymore.
     response = client.resource("http://localhost:" + port + "/sparklr/json/photos")
-      .header("Authorization", String.format("OAuth %s", accessToken.getValue()))
+      .header("Authorization", String.format("OAuth2 %s", accessToken.getValue()))
       .get(ClientResponse.class);
     assertEquals(401, response.getClientResponseStatus().getStatusCode());
   }

File: sparklr2/src/test/java/org/springframework/security/oauth2/provider/TestWebServerProfile.java
Patch:
@@ -142,11 +142,11 @@ else if ("state".equals(token)) {
     assertFalse(200 == response.getClientResponseStatus().getStatusCode());
     String authHeader = response.getHeaders().getFirst("WWW-Authenticate");
     assertNotNull(authHeader);
-    assertTrue(authHeader.startsWith("OAuth"));
+    assertTrue(authHeader.startsWith("OAuth2"));
 
     //now make sure an authorized request is valid.
     response = client.resource("http://localhost:" + port + "/sparklr/json/photos")
-      .header("Authorization", String.format("OAuth %s", accessToken.getValue()))
+      .header("Authorization", String.format("OAuth2 %s", accessToken.getValue()))
       .get(ClientResponse.class);
     assertEquals(200, response.getClientResponseStatus().getStatusCode());
   }

File: spring-security-oauth/src/main/java/org/springframework/security/oauth/provider/attributes/ConsumerSecurityVoter.java
Patch:
@@ -29,7 +29,7 @@
  * @author Ryan Heaton
  * @author Andrew McCall
  */
-public class ConsumerSecurityVoter implements AccessDecisionVoter {
+public class ConsumerSecurityVoter implements AccessDecisionVoter<Object> {
 
   /**
    * The config attribute is supported if it's an instance of {@link org.springframework.security.oauth.provider.attributes.ConsumerSecurityConfig}.

File: spring-security-oauth/src/test/java/org/springframework/security/oauth/consumer/TestOAuthConsumerContextFilter.java
Patch:
@@ -76,6 +76,7 @@ protected String getUserAuthorizationRedirectURL(ProtectedResourceDetails detail
     filterChain.doFilter(request, response);
     expectLastCall().andThrow(new AccessTokenRequiredException(resource));
     expect(tokenServices.getToken("dep1")).andReturn(null);
+    expect(request.getParameter("oauth_verifier")).andReturn(null);
     expect(response.encodeRedirectURL("urn:callback")).andReturn("urn:callback?query");
 
     OAuthConsumerToken token = new OAuthConsumerToken();

File: spring-security-oauth/src/main/java/org/springframework/security/oauth2/consumer/OAuth2ErrorHandler.java
Patch:
@@ -16,15 +16,16 @@
  */
 public class OAuth2ErrorHandler extends DefaultResponseErrorHandler {
 
+  public static final String AUTH_HEADER = "oauth2 ";
   private OAuth2SerializationService serializationService = new DefaultOAuth2SerializationService();
 
   @Override
   public void handleError(ClientHttpResponse response) throws IOException {
     //first try: www-authenticate error
     List<String> authenticateHeaders = response.getHeaders().get("WWW-Authenticate");
     for (String authenticateHeader : authenticateHeaders) {
-      if (authenticateHeader.toLowerCase().startsWith("oauth2 ")) {
-        Map<String, String> headerEntries = StringSplitUtils.splitEachArrayElementAndCreateMap(StringSplitUtils.splitIgnoringQuotes(authenticateHeader, ','), "=", "\"");
+      if (authenticateHeader.toLowerCase().startsWith(AUTH_HEADER)) {
+        Map<String, String> headerEntries = StringSplitUtils.splitEachArrayElementAndCreateMap(StringSplitUtils.splitIgnoringQuotes(authenticateHeader.substring(AUTH_HEADER.length()), ','), "=", "\"");
         throw getSerializationService().deserializeError(headerEntries);
       }
     }

