File: auth/src/main/java/com/firebase/ui/auth/ui/phone/CountryListSpinner.java
Patch:
@@ -86,7 +86,7 @@ public CountryListSpinner(Context context, AttributeSet attrs, int defStyle) {
             public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                 CountryInfo info = mCountryListAdapter.getItem(position);
                 if (info != null) {
-                    setText(info.toShortString());
+                    setSelectedForCountry(info.getCountryCode(), info.getLocale());
                 }
 
                 onUnfocus();

File: auth/src/main/java/com/firebase/ui/auth/ui/phone/CountryListSpinner.java
Patch:
@@ -86,6 +86,7 @@ public CountryListSpinner(Context context, AttributeSet attrs, int defStyle) {
             public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                 CountryInfo info = mCountryListAdapter.getItem(position);
                 if (info != null) {
+                    mSelectedCountryInfo = info;
                     setText(info.toShortString());
                 }
 

File: auth/src/main/java/com/firebase/ui/auth/IdpResponse.java
Patch:
@@ -42,12 +42,12 @@ public class IdpResponse implements Parcelable {
         @Override
         public IdpResponse createFromParcel(Parcel in) {
             return new IdpResponse(
-                    in.<User>readParcelable(User.class.getClassLoader()),
+                    in.readParcelable(User.class.getClassLoader()),
                     in.readString(),
                     in.readString(),
                     in.readInt() == 1,
                     (FirebaseUiException) in.readSerializable(),
-                    in.<AuthCredential>readParcelable(AuthCredential.class.getClassLoader())
+                    in.readParcelable(AuthCredential.class.getClassLoader())
             );
         }
 

File: auth/src/main/java/com/firebase/ui/auth/data/model/User.java
Patch:
@@ -23,7 +23,7 @@ public User createFromParcel(Parcel in) {
                     in.readString(),
                     in.readString(),
                     in.readString(),
-                    in.<Uri>readParcelable(Uri.class.getClassLoader()));
+                    in.readParcelable(Uri.class.getClassLoader()));
         }
 
         @Override

File: auth/src/main/java/com/firebase/ui/auth/data/remote/EmailSignInHandler.java
Patch:
@@ -42,7 +42,7 @@ public void onActivityResult(int requestCode, int resultCode, @Nullable Intent d
         } else if (requestCode == RequestCodes.EMAIL_FLOW) {
             IdpResponse response = IdpResponse.fromResultIntent(data);
             if (response == null) {
-                setResult(Resource.<IdpResponse>forFailure(new UserCancellationException()));
+                setResult(Resource.forFailure(new UserCancellationException()));
             } else {
                 setResult(Resource.forSuccess(response));
             }

File: auth/src/main/java/com/firebase/ui/auth/data/remote/PhoneSignInHandler.java
Patch:
@@ -39,7 +39,7 @@ public void onActivityResult(int requestCode, int resultCode, @Nullable Intent d
         if (requestCode == RequestCodes.PHONE_FLOW) {
             IdpResponse response = IdpResponse.fromResultIntent(data);
             if (response == null) {
-                setResult(Resource.<IdpResponse>forFailure(new UserCancellationException()));
+                setResult(Resource.forFailure(new UserCancellationException()));
             } else {
                 setResult(Resource.forSuccess(response));
             }

File: auth/src/main/java/com/firebase/ui/auth/ui/phone/CheckPhoneHandler.java
Patch:
@@ -24,7 +24,7 @@ public CheckPhoneHandler(Application application) {
     }
 
     public void fetchCredential() {
-        setResult(Resource.<PhoneNumber>forFailure(new PendingIntentRequiredException(
+        setResult(Resource.forFailure(new PendingIntentRequiredException(
                 Credentials.getClient(getApplication()).getHintPickerIntent(
                         new HintRequest.Builder().setPhoneNumberIdentifierSupported(true).build()),
                 RequestCodes.CRED_HINT

File: auth/src/main/java/com/firebase/ui/auth/ui/phone/PhoneNumberVerificationHandler.java
Patch:
@@ -29,7 +29,7 @@ public PhoneNumberVerificationHandler(Application application) {
     }
 
     public void verifyPhoneNumber(@NonNull Activity activity, final String number, boolean force) {
-        setResult(Resource.<PhoneVerification>forLoading());
+        setResult(Resource.forLoading());
         PhoneAuthOptions.Builder optionsBuilder = PhoneAuthOptions.newBuilder(getAuth())
                 .setPhoneNumber(number)
                 .setTimeout(AUTO_RETRIEVAL_TIMEOUT_SECONDS, TimeUnit.SECONDS)
@@ -43,15 +43,15 @@ public void onVerificationCompleted(@NonNull PhoneAuthCredential credential) {
 
                     @Override
                     public void onVerificationFailed(@NonNull FirebaseException e) {
-                        setResult(Resource.<PhoneVerification>forFailure(e));
+                        setResult(Resource.forFailure(e));
                     }
 
                     @Override
                     public void onCodeSent(@NonNull String verificationId,
                                            @NonNull PhoneAuthProvider.ForceResendingToken token) {
                         mVerificationId = verificationId;
                         mForceResendingToken = token;
-                        setResult(Resource.<PhoneVerification>forFailure(
+                        setResult(Resource.forFailure(
                                 new PhoneNumberVerificationRequiredException(number)));
                     }
                 });

File: auth/src/main/java/com/firebase/ui/auth/viewmodel/SignInViewModelBase.java
Patch:
@@ -36,7 +36,7 @@ protected void handleMergeFailure(@NonNull AuthCredential credential) {
     }
 
     protected void handleMergeFailure(@NonNull IdpResponse failureResponse) {
-        setResult(Resource.<IdpResponse>forFailure(new FirebaseAuthAnonymousUpgradeException(
+        setResult(Resource.forFailure(new FirebaseAuthAnonymousUpgradeException(
                 ErrorCodes.ANONYMOUS_UPGRADE_MERGE_CONFLICT,
                 failureResponse)));
     }

File: auth/src/test/java/com/firebase/ui/auth/viewmodel/GenericIdpAnonymousUpgradeLinkingHandlerTest.java
Patch:
@@ -137,7 +137,7 @@ public void testStartSignIn_anonymousUpgradeLinkingFlow_expectIdpResponseWithCre
 
         InOrder inOrder = inOrder(mResponseObserver);
         inOrder.verify(mResponseObserver)
-                .onChanged(argThat(ResourceMatchers.<IdpResponse>isLoading()));
+                .onChanged(argThat(ResourceMatchers.isLoading()));
 
         ArgumentCaptor<Resource<IdpResponse>> resolveCaptor =
                 ArgumentCaptor.forClass(Resource.class);

File: auth/src/main/java/com/firebase/ui/auth/ui/phone/PhoneActivity.java
Patch:
@@ -169,7 +169,7 @@ private void handleError(@Nullable Exception e) {
             }
             errorView.setError(getErrorMessage(error));
         } else if (e != null) {
-            errorView.setError(e.getLocalizedMessage());
+            errorView.setError(getErrorMessage(FirebaseAuthError.ERROR_UNKNOWN));
         } else {
             errorView.setError(null);
         }

File: auth/src/main/java/com/firebase/ui/auth/ui/idp/AuthMethodPickerActivity.java
Patch:
@@ -242,7 +242,8 @@ private void populateIdpListCustomLayout(List<IdpConfig> providerConfigs) {
             }
             boolean hasProvider = false;
             for (IdpConfig idpConfig : providerConfigs) {
-                if (providerBtnId.equals(idpConfig.getProviderId())) {
+                String providerId = providerOrEmailLinkProvider(idpConfig.getProviderId());
+                if (providerBtnId.equals(providerId)) {
                     hasProvider = true;
                     break;
                 }

File: auth/src/main/java/com/firebase/ui/auth/util/data/PhoneNumberUtils.java
Patch:
@@ -358,6 +358,7 @@ private static SparseArray<List<String>> createCountryCodeToRegionCodeMap() {
         map.put(380, singletonList("UA"));
         map.put(381, singletonList("RS"));
         map.put(382, singletonList("ME"));
+        map.put(383, singletonList("XK"));
         map.put(385, singletonList("HR"));
         map.put(386, singletonList("SI"));
         map.put(387, singletonList("BA"));
@@ -471,7 +472,6 @@ private static void initCountryCodeByIsoMap() {
         map.remove("TA");
         map.put("HM", 672);
         map.put("GS", 500);
-        map.put("XK", 381);
 
         COUNTRY_TO_ISO_CODES = Collections.unmodifiableMap(map);
     }

File: auth/src/main/java/com/firebase/ui/auth/util/ExtraConstants.java
Patch:
@@ -27,6 +27,7 @@ public final class ExtraConstants {
     public static final String CREDENTIAL = "extra_credential";
 
     public static final String EMAIL = "extra_email";
+    public static final String DEFAULT_EMAIL = "extra_default_email";
     public static final String ALLOW_NEW_EMAILS = "extra_allow_new_emails";
     public static final String REQUIRE_NAME = "extra_require_name";
     public static final String GOOGLE_SIGN_IN_OPTIONS = "extra_google_sign_in_options";

File: auth/src/main/java/com/firebase/ui/auth/util/ui/TextHelper.java
Patch:
@@ -18,7 +18,7 @@ public static void boldAllOccurencesOfText(@NonNull SpannableStringBuilder build
         while (fromIndex < text.length()) {
             int start = text.indexOf(textToBold, fromIndex);
             int end = start + textToBold.length();
-            if (start == -1 || end >= text.length()) {
+            if (start == -1 || end > text.length()) {
                 break;
             }
             builder.setSpan(new StyleSpan(Typeface.BOLD),

File: auth/src/main/java/com/firebase/ui/auth/data/remote/SignInKickstarter.java
Patch:
@@ -135,9 +135,8 @@ public void onComplete(@NonNull Task<CredentialRequestResponse> task) {
     }
 
     private void startAuthMethodChoice() {
-        // If there is only one provider selected, launch the flow directly
         if (!getArguments().shouldShowProviderChoice()) {
-            AuthUI.IdpConfig firstIdpConfig = getArguments().providers.get(0);
+            AuthUI.IdpConfig firstIdpConfig = getArguments().getDefaultOrFirstProvider();
             String firstProvider = firstIdpConfig.getProviderId();
             switch (firstProvider) {
                 case EMAIL_LINK_PROVIDER:

File: auth/src/test/java/com/firebase/ui/auth/testhelpers/TestHelper.java
Patch:
@@ -157,6 +157,7 @@ public static FlowParameters getFlowParameters(Collection<String> providerIds,
         return new FlowParameters(
                 DEFAULT_APP_NAME,
                 idpConfigs,
+                null,
                 AuthUI.getDefaultTheme(),
                 AuthUI.NO_LOGO,
                 null,

File: auth/src/main/java/com/firebase/ui/auth/ui/idp/AuthMethodPickerActivity.java
Patch:
@@ -47,6 +47,7 @@
 import com.firebase.ui.auth.viewmodel.ProviderSignInBase;
 import com.firebase.ui.auth.viewmodel.ResourceObserver;
 import com.firebase.ui.auth.viewmodel.idp.SocialProviderResponseHandler;
+import com.google.android.material.snackbar.Snackbar;
 import com.google.firebase.FirebaseApp;
 import com.google.firebase.auth.EmailAuthProvider;
 import com.google.firebase.auth.FacebookAuthProvider;
@@ -362,7 +363,7 @@ private void handleResponse(@NonNull IdpResponse response) {
             @Override
             public void onClick(View view) {
                 if (isOffline()) {
-                    Toast.makeText(AuthMethodPickerActivity.this, getString(R.string.fui_no_internet), Toast.LENGTH_SHORT).show();
+                    Snackbar.make(findViewById(android.R.id.content), getString(R.string.fui_no_internet), Snackbar.LENGTH_SHORT).show();
                     return;
                 }
 

File: auth/src/main/java/com/firebase/ui/auth/AuthUI.java
Patch:
@@ -487,7 +487,6 @@ public SignInIntentBuilder createSignInIntentBuilder() {
             ANONYMOUS_PROVIDER,
             EmailAuthProvider.EMAIL_LINK_SIGN_IN_METHOD
     })
-
     @Retention(RetentionPolicy.SOURCE)
     public @interface SupportedProvider {
     }

File: auth/src/main/java/com/firebase/ui/auth/ui/idp/AuthMethodPickerActivity.java
Patch:
@@ -223,7 +223,7 @@ private void populateIdpListCustomLayout(List<IdpConfig> providerConfigs) {
             final String providerId = providerOrEmailLinkProvider(idpConfig.getProviderId());
 
             if (!providerButtonIds.containsKey(providerId)) {
-                throw new IllegalStateException("No button found for auth provider: " + providerId);
+                throw new IllegalStateException("No button found for auth provider: " + idpConfig.getProviderId());
             }
 
             @IdRes int buttonId = providerButtonIds.get(providerId);

File: app/src/main/java/com/firebase/uidemo/auth/AuthUiActivity.java
Patch:
@@ -347,7 +347,7 @@ private void startSignedInActivity(@Nullable IdpResponse response) {
     @OnClick({R.id.default_theme, R.id.purple_theme, R.id.green_theme, R.id.dark_theme})
     public void toggleDarkTheme() {
         int mode = mDarkTheme.isChecked() ?
-                AppCompatDelegate.MODE_NIGHT_YES : AppCompatDelegate.MODE_NIGHT_NO;
+                AppCompatDelegate.MODE_NIGHT_YES : AppCompatDelegate.MODE_NIGHT_AUTO_BATTERY;
         AppCompatDelegate.setDefaultNightMode(mode);
         getDelegate().setLocalNightMode(mode);
     }

File: app/src/main/java/com/firebase/uidemo/auth/AuthUiActivity.java
Patch:
@@ -185,6 +185,7 @@ public void onCheckedChanged(CompoundButton compoundButton, boolean checked) {
                     mUseEmailLinkProvider.setChecked(false);
                     mUsePhoneProvider.setChecked(false);
                     mUseAnonymousProvider.setChecked(false);
+                    mUseMicrosoftProvider.setChecked(false);
                     mUseYahooProvider.setChecked(false);
                     mUseAppleProvider.setChecked(false);
                 }

File: app/src/main/java/com/firebase/uidemo/util/ConfigurationUtils.java
Patch:
@@ -69,6 +69,7 @@ public static List<AuthUI.IdpConfig> getConfiguredProviders(@NonNull Context con
         providers.add(new AuthUI.IdpConfig.PhoneBuilder().build());
         providers.add(new AuthUI.IdpConfig.MicrosoftBuilder().build());
         providers.add(new AuthUI.IdpConfig.YahooBuilder().build());
+        providers.add(new AuthUI.IdpConfig.AppleBuilder().build());
 
         return providers;
     }

File: database/src/main/java/com/firebase/ui/database/paging/FirebaseRecyclerPagingAdapter.java
Patch:
@@ -229,8 +229,8 @@ public void onBindViewHolder(@NonNull VH viewHolder, int position) {
      *
      * When {@link DatabaseError} is caught the adapter will stop loading any data
      */
-    protected void onError(@NonNull DatabaseError databaseError){
-
+    protected void onError(@NonNull DatabaseError databaseError) {
+        Log.w(TAG, "onError", databaseError.toException());
     }
 
     @NonNull

File: firestore/src/main/java/com/firebase/ui/firestore/paging/FirestorePagingAdapter.java
Patch:
@@ -223,6 +223,6 @@ protected void onLoadingStateChanged(@NonNull LoadingState state) {
      * When {@link Exception} is caught the adapter will stop loading any data
      */
     protected void onError(@NonNull Exception e) {
-        // For overriding
+        Log.w(TAG, "onError", e);
     }
 }

File: database/src/main/java/com/firebase/ui/database/paging/FirebaseRecyclerPagingAdapter.java
Patch:
@@ -229,8 +229,8 @@ public void onBindViewHolder(@NonNull VH viewHolder, int position) {
      *
      * When {@link DatabaseError} is caught the adapter will stop loading any data
      */
-    protected void onError(@NonNull DatabaseError databaseError){
-
+    protected void onError(@NonNull DatabaseError databaseError) {
+        Log.w(TAG, "onError", databaseError.toException());
     }
 
     @NonNull

File: firestore/src/main/java/com/firebase/ui/firestore/paging/FirestorePagingAdapter.java
Patch:
@@ -223,6 +223,6 @@ protected void onLoadingStateChanged(@NonNull LoadingState state) {
      * When {@link Exception} is caught the adapter will stop loading any data
      */
     protected void onError(@NonNull Exception e) {
-        // For overriding
+        Log.w(TAG, "onError", e);
     }
 }

File: auth/src/main/java/com/firebase/ui/auth/ui/email/RegisterEmailFragment.java
Patch:
@@ -154,7 +154,8 @@ public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceStat
                 mPasswordInput,
                 getResources().getInteger(R.integer.fui_min_password_length));
         mNameValidator = requireName
-                ? new RequiredFieldValidator(nameInput)
+                ? new RequiredFieldValidator(nameInput,
+                      getResources().getString(R.string.fui_missing_first_and_last_name))
                 : new NoOpValidator(nameInput);
         mEmailFieldValidator = new EmailFieldValidator(mEmailInput);
 

File: auth/src/main/java/com/firebase/ui/auth/ui/email/WelcomeBackPasswordPrompt.java
Patch:
@@ -160,7 +160,7 @@ private void validateAndSignIn() {
     private void validateAndSignIn(String password) {
         // Check for null or empty password
         if (TextUtils.isEmpty(password)) {
-            mPasswordLayout.setError(getString(R.string.fui_required_field));
+            mPasswordLayout.setError(getString(R.string.fui_error_invalid_password));
             return;
         } else {
             mPasswordLayout.setError(null);

File: auth/src/test/java/com/firebase/ui/auth/ui/email/EmailActivityTest.java
Patch:
@@ -127,7 +127,7 @@ public void testSignUpButton_validatesFields() {
         TextInputLayout passwordLayout = emailActivity.findViewById(R.id.password_layout);
 
         assertEquals(
-                emailActivity.getString(R.string.fui_required_field),
+                emailActivity.getString(R.string.fui_missing_first_and_last_name),
                 nameLayout.getError().toString());
         assertEquals(
                 String.format(

File: auth/src/test/java/com/firebase/ui/auth/ui/email/WelcomeBackPasswordPromptTest.java
Patch:
@@ -69,7 +69,7 @@ public void testSignInButton_validatesFields() {
                 welcomeBack.findViewById(R.id.password_layout);
 
         assertEquals(
-                welcomeBack.getString(R.string.fui_required_field),
+                welcomeBack.getString(R.string.fui_error_invalid_password),
                 passwordLayout.getError().toString());
 
         // should block and not start a new activity

File: auth/src/main/java/com/firebase/ui/auth/viewmodel/email/RecoverPasswordHandler.java
Patch:
@@ -15,7 +15,7 @@ public RecoverPasswordHandler(Application application) {
         super(application);
     }
 
-    public void startReset(final String email) {
+    public void startReset(@NonNull final String email) {
         setResult(Resource.<String>forLoading());
         getAuth().sendPasswordResetEmail(email)
                 .addOnCompleteListener(new OnCompleteListener<Void>() {

File: auth/src/main/java/com/firebase/ui/auth/data/remote/GoogleSignInHandler.java
Patch:
@@ -62,6 +62,7 @@ public void startSignIn(@NonNull HelperActivityBase activity) {
     }
 
     private void start() {
+        setResult(Resource.<IdpResponse>forLoading());
         setResult(Resource.<IdpResponse>forFailure(new IntentRequiredException(
                 GoogleSignIn.getClient(getApplication(), getSignInOptions()).getSignInIntent(),
                 RequestCodes.GOOGLE_PROVIDER)));

File: auth/src/main/java/com/firebase/ui/auth/viewmodel/email/EmailLinkSignInHandler.java
Patch:
@@ -88,9 +88,9 @@ public void startSignIn() {
             if (getAuth().getCurrentUser() == null
                     || (getAuth().getCurrentUser().isAnonymous()
                     && !anonymousUserIdFromLink.equals(getAuth().getCurrentUser().getUid()))) {
-                // TODO(lsirac): add new error?
                 setResult(Resource.<IdpResponse>forFailure(
-                        new FirebaseUiException(ErrorCodes.EMAIL_LINK_WRONG_DEVICE_ERROR)));
+                        new FirebaseUiException(
+                                ErrorCodes.EMAIL_LINK_DIFFERENT_ANONYMOUS_USER_ERROR)));
                 return;
             }
         }

File: auth/src/main/java/com/firebase/ui/auth/ui/HelperActivityBase.java
Patch:
@@ -33,8 +33,8 @@ protected static Intent createBaseIntent(
         Intent intent = new Intent(
                 checkNotNull(context, "context cannot be null"),
                 checkNotNull(target, "target activity cannot be null"))
-                .putExtra(ExtraConstants.FLOW_BUNDLE,
-                        checkNotNull(flowParams, "flowParams cannot be null").toBundle());
+                .putExtra(ExtraConstants.FLOW_PARAMS,
+                        checkNotNull(flowParams, "flowParams cannot be null"));
         intent.setExtrasClassLoader(AuthUI.class.getClassLoader());
         return intent;
     }

File: auth/src/main/java/com/firebase/ui/auth/util/ExtraConstants.java
Patch:
@@ -21,7 +21,6 @@
  */
 @RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)
 public final class ExtraConstants {
-    public static final String FLOW_BUNDLE = "extra_flow_bundle";
     public static final String FLOW_PARAMS = "extra_flow_params";
     public static final String IDP_RESPONSE = "extra_idp_response";
     public static final String USER = "extra_user";

File: auth/src/main/java/com/firebase/ui/auth/ui/HelperActivityBase.java
Patch:
@@ -32,8 +32,8 @@ protected static Intent createBaseIntent(
         return new Intent(
                 checkNotNull(context, "context cannot be null"),
                 checkNotNull(target, "target activity cannot be null"))
-                .putExtra(ExtraConstants.FLOW_PARAMS,
-                        checkNotNull(flowParams, "flowParams cannot be null"));
+                .putExtra(ExtraConstants.FLOW_BUNDLE,
+                        checkNotNull(flowParams, "flowParams cannot be null").toBundle());
     }
 
     @Override

File: auth/src/main/java/com/firebase/ui/auth/util/ExtraConstants.java
Patch:
@@ -21,6 +21,7 @@
  */
 @RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)
 public final class ExtraConstants {
+    public static final String FLOW_BUNDLE = "extra_flow_bundle";
     public static final String FLOW_PARAMS = "extra_flow_params";
     public static final String IDP_RESPONSE = "extra_idp_response";
     public static final String USER = "extra_user";

File: auth/src/main/java/com/firebase/ui/auth/data/model/FlowParameters.java
Patch:
@@ -23,6 +23,7 @@
 import android.support.annotation.StyleRes;
 import android.text.TextUtils;
 
+import com.firebase.ui.auth.AuthUI;
 import com.firebase.ui.auth.AuthUI.IdpConfig;
 import com.firebase.ui.auth.util.ExtraConstants;
 import com.firebase.ui.auth.util.Preconditions;
@@ -84,6 +85,8 @@ public FlowParameters(
      * Extract FlowParameters from an Intent.
      */
     public static FlowParameters fromIntent(Intent intent) {
+        //this is required to fix #1416 - ClassNotFound for FlowParameters
+        intent.setExtrasClassLoader(AuthUI.class.getClassLoader());
         return intent.getParcelableExtra(ExtraConstants.FLOW_PARAMS);
     }
 

File: auth/src/main/java/com/firebase/ui/auth/data/remote/GoogleSignInHandler.java
Patch:
@@ -97,10 +97,9 @@ public void onActivityResult(int requestCode, int resultCode, @Nullable Intent d
                 // Hack for https://github.com/googlesamples/google-services/issues/345
                 // Google remembers the account so the picker doesn't appear twice for the user.
                 start();
-            }else if(e.getStatusCode() == GoogleSignInStatusCodes.SIGN_IN_CANCELLED){
+            } else if (e.getStatusCode() == GoogleSignInStatusCodes.SIGN_IN_CANCELLED) {
                 setResult(Resource.<IdpResponse>forFailure(new UserCancellationException()));
-            }
-            else {
+            } else {
                 if (e.getStatusCode() == CommonStatusCodes.DEVELOPER_ERROR) {
                     Log.w(TAG, "Developer error: this application is misconfigured. " +
                             "Check your SHA1 and package name in the Firebase console.");

File: auth/src/main/java/com/firebase/ui/auth/AuthUI.java
Patch:
@@ -120,15 +120,13 @@ public final class AuthUI {
 
     /**
      * The set of authentication providers supported in Firebase Auth UI.
-     *
-     * TODO: the Github provider is not included because these tests do not
-     *       depend on the required auth-github module.
      */
     public static final Set<String> SUPPORTED_PROVIDERS =
             Collections.unmodifiableSet(new HashSet<>(Arrays.asList(
                     GoogleAuthProvider.PROVIDER_ID,
                     FacebookAuthProvider.PROVIDER_ID,
                     TwitterAuthProvider.PROVIDER_ID,
+                    GithubAuthProvider.PROVIDER_ID,
                     EmailAuthProvider.PROVIDER_ID,
                     PhoneAuthProvider.PROVIDER_ID,
                     ANONYMOUS_PROVIDER

File: auth/src/main/java/com/firebase/ui/auth/AuthUI.java
Patch:
@@ -120,13 +120,15 @@ public final class AuthUI {
 
     /**
      * The set of authentication providers supported in Firebase Auth UI.
+     *
+     * TODO: the Github provider is not included because these tests do not
+     *       depend on the required auth-github module.
      */
     public static final Set<String> SUPPORTED_PROVIDERS =
             Collections.unmodifiableSet(new HashSet<>(Arrays.asList(
                     GoogleAuthProvider.PROVIDER_ID,
                     FacebookAuthProvider.PROVIDER_ID,
                     TwitterAuthProvider.PROVIDER_ID,
-                    GithubAuthProvider.PROVIDER_ID,
                     EmailAuthProvider.PROVIDER_ID,
                     PhoneAuthProvider.PROVIDER_ID,
                     ANONYMOUS_PROVIDER

File: auth/src/main/java/com/firebase/ui/auth/AuthUI.java
Patch:
@@ -660,7 +660,7 @@ public PhoneBuilder setDefaultCountryIso(@NonNull String iso) {
              * Sets the country codes available in the country code selector for phone
              * authentication. Takes as input a List of both country isos and codes.
              * This is not to be called with
-             * {@link #setBlacklistedCountries(List<String>)}.
+             * {@link #setBlacklistedCountries(List)}.
              * If both are called, an exception will be thrown.
              * <p>
              * Inputting an e-164 country code (e.g. '+1') will include all countries with
@@ -696,7 +696,7 @@ public PhoneBuilder setWhitelistedCountries(
              * Sets the countries to be removed from the country code selector for phone
              * authentication. Takes as input a List of both country isos and codes.
              * This is not to be called with
-             * {@link #setWhitelistedCountries(List<String>)}.
+             * {@link #setWhitelistedCountries(List)}.
              * If both are called, an exception will be thrown.
              * <p>
              * Inputting an e-164 country code (e.g. '+1') will include all countries with

File: auth/src/main/java/com/firebase/ui/auth/ui/email/CheckEmailFragment.java
Patch:
@@ -32,7 +32,7 @@
 /**
  * Fragment that shows a form with an email field and checks for existing accounts with that email.
  * <p>
- * Host Activities should implement {@link CheckEmailListener}.
+ * Host Activities should implement {@link CheckEmailFragment.CheckEmailListener}.
  */
 @RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)
 public class CheckEmailFragment extends FragmentBase implements

File: auth/src/main/java/com/firebase/ui/auth/AuthUI.java
Patch:
@@ -660,7 +660,7 @@ public PhoneBuilder setDefaultCountryIso(@NonNull String iso) {
              * Sets the country codes available in the country code selector for phone
              * authentication. Takes as input a List of both country isos and codes.
              * This is not to be called with
-             * {@link #setBlacklistedCountries(List<String>)}.
+             * {@link #setBlacklistedCountries(List)}.
              * If both are called, an exception will be thrown.
              * <p>
              * Inputting an e-164 country code (e.g. '+1') will include all countries with
@@ -696,7 +696,7 @@ public PhoneBuilder setWhitelistedCountries(
              * Sets the countries to be removed from the country code selector for phone
              * authentication. Takes as input a List of both country isos and codes.
              * This is not to be called with
-             * {@link #setWhitelistedCountries(List<String>)}.
+             * {@link #setWhitelistedCountries(List)}.
              * If both are called, an exception will be thrown.
              * <p>
              * Inputting an e-164 country code (e.g. '+1') will include all countries with

File: auth/src/main/java/com/firebase/ui/auth/ui/email/CheckEmailFragment.java
Patch:
@@ -32,7 +32,7 @@
 /**
  * Fragment that shows a form with an email field and checks for existing accounts with that email.
  * <p>
- * Host Activities should implement {@link CheckEmailListener}.
+ * Host Activities should implement {@link CheckEmailFragment.CheckEmailListener}.
  */
 @RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)
 public class CheckEmailFragment extends FragmentBase implements

File: auth/src/main/java/com/firebase/ui/auth/data/client/CountryListLoadTask.java
Patch:
@@ -50,9 +50,9 @@ public interface Listener {
     Set<String> whitelistedCountryIsos;
     Set<String> blacklistedCountryIsos;
 
-    public CountryListLoadTask(Listener listener,
-                               @Nullable List<String> whitelistedCountries,
-                               @Nullable List<String> blacklistedCountries) {
+    public CountryListLoadTask(@Nullable List<String> whitelistedCountries,
+                               @Nullable List<String> blacklistedCountries,
+                               Listener listener) {
         mListener = listener;
 
         if (whitelistedCountries != null) {

File: auth/src/main/java/com/firebase/ui/auth/ui/phone/CountryListSpinner.java
Patch:
@@ -148,9 +148,8 @@ public void onClick(View view) {
     }
 
     private void loadCountryList() {
-        new CountryListLoadTask(this,
-                whitelistedCountries,
-                blacklistedCountries).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
+        new CountryListLoadTask(whitelistedCountries, blacklistedCountries, this
+        ).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
     }
 
     private void executeUserClickListener(View view) {

File: auth/src/main/java/com/firebase/ui/auth/ui/phone/PhoneActivity.java
Patch:
@@ -79,7 +79,7 @@ protected void onFailure(@NonNull Exception e) {
             protected void onSuccess(@NonNull PhoneVerification verification) {
                 if (verification.isAutoVerified()) {
                     Toast.makeText(
-                            PhoneActivity.this, R.string.fui_verified, Toast.LENGTH_LONG).show();
+                            PhoneActivity.this, R.string.fui_auto_verified, Toast.LENGTH_LONG).show();
                 }
 
                 handler.startSignIn(verification.getCredential(), new IdpResponse.Builder(

File: auth/src/main/java/com/firebase/ui/auth/AuthUI.java
Patch:
@@ -90,7 +90,8 @@
  */
 public final class AuthUI {
 
-    private static final String TAG = "AuthUI";
+    @RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)
+    public static final String TAG = "AuthUI";
 
     @StringDef({
                        EmailAuthProvider.PROVIDER_ID,

File: auth/src/main/java/com/firebase/ui/auth/AuthUI.java
Patch:
@@ -31,6 +31,7 @@
 
 import com.facebook.login.LoginManager;
 import com.firebase.ui.auth.data.model.FlowParameters;
+import com.firebase.ui.auth.data.remote.TwitterSignInHandler;
 import com.firebase.ui.auth.ui.idp.AuthMethodPickerActivity;
 import com.firebase.ui.auth.util.CredentialUtils;
 import com.firebase.ui.auth.util.ExtraConstants;
@@ -276,7 +277,7 @@ public static int getDefaultTheme() {
      * UI-based sign-in flow knowing it is required.
      *
      * @param context        requesting the user be signed in
-     * @param desiredConfigs to use for silent sign in. Only Google and email are currently
+     * @param configs        to use for silent sign in. Only Google and email are currently
      *                       supported, the rest will be ignored.
      * @return a task which indicates whether or not the user was successfully signed in.
      */
@@ -455,6 +456,7 @@ private Task<Void> signOutIdps(@NonNull Context context) {
             LoginManager.getInstance().logOut();
         }
         if (ProviderAvailability.IS_TWITTER_AVAILABLE) {
+            TwitterSignInHandler.initializeTwitter();
             TwitterCore.getInstance().getSessionManager().clearActiveSession();
         }
         return GoogleSignIn.getClient(context, GoogleSignInOptions.DEFAULT_SIGN_IN).signOut();

File: auth/src/main/java/com/firebase/ui/auth/viewmodel/ResourceObserver.java
Patch:
@@ -4,7 +4,6 @@
 import android.support.annotation.NonNull;
 import android.support.annotation.RestrictTo;
 import android.support.annotation.StringRes;
-import android.util.Log;
 
 import com.firebase.ui.auth.data.model.Resource;
 import com.firebase.ui.auth.data.model.State;
@@ -35,7 +34,6 @@ private ResourceObserver(HelperActivityBase activity, FragmentBase fragment, int
     @Override
     public final void onChanged(Resource<T> resource) {
         if (resource.getState() == State.LOADING) {
-            Log.d("DIALOG", "Shown by: " + resource.toString());
             mActivity.getDialogHolder().showLoadingDialog(mLoadingMessage);
             return;
         }

File: auth/src/main/java/com/firebase/ui/auth/AuthUI.java
Patch:
@@ -31,6 +31,7 @@
 
 import com.facebook.login.LoginManager;
 import com.firebase.ui.auth.data.model.FlowParameters;
+import com.firebase.ui.auth.data.remote.TwitterSignInHandler;
 import com.firebase.ui.auth.ui.idp.AuthMethodPickerActivity;
 import com.firebase.ui.auth.util.CredentialUtils;
 import com.firebase.ui.auth.util.ExtraConstants;
@@ -276,7 +277,7 @@ public static int getDefaultTheme() {
      * UI-based sign-in flow knowing it is required.
      *
      * @param context        requesting the user be signed in
-     * @param desiredConfigs to use for silent sign in. Only Google and email are currently
+     * @param configs        to use for silent sign in. Only Google and email are currently
      *                       supported, the rest will be ignored.
      * @return a task which indicates whether or not the user was successfully signed in.
      */
@@ -455,6 +456,7 @@ private Task<Void> signOutIdps(@NonNull Context context) {
             LoginManager.getInstance().logOut();
         }
         if (ProviderAvailability.IS_TWITTER_AVAILABLE) {
+            TwitterSignInHandler.initializeTwitter();
             TwitterCore.getInstance().getSessionManager().clearActiveSession();
         }
         return GoogleSignIn.getClient(context, GoogleSignInOptions.DEFAULT_SIGN_IN).signOut();

File: auth/src/main/java/com/firebase/ui/auth/viewmodel/ResourceObserver.java
Patch:
@@ -4,6 +4,7 @@
 import android.support.annotation.NonNull;
 import android.support.annotation.RestrictTo;
 import android.support.annotation.StringRes;
+import android.util.Log;
 
 import com.firebase.ui.auth.data.model.Resource;
 import com.firebase.ui.auth.data.model.State;
@@ -34,6 +35,7 @@ private ResourceObserver(HelperActivityBase activity, FragmentBase fragment, int
     @Override
     public final void onChanged(Resource<T> resource) {
         if (resource.getState() == State.LOADING) {
+            Log.d("DIALOG", "Shown by: " + resource.toString());
             mActivity.getDialogHolder().showLoadingDialog(mLoadingMessage);
             return;
         }

File: auth/src/main/java/com/firebase/ui/auth/ui/phone/VerifyPhoneNumberFragment.java
Patch:
@@ -202,13 +202,14 @@ private void onNext() {
         if (phoneNumber == null) {
             mPhoneInputLayout.setError(getString(R.string.fui_invalid_phone_number));
         } else {
+            mPhoneInputLayout.setError(null);
             mVerifier.verifyPhoneNumber(phoneNumber, false);
         }
     }
 
     @Nullable
     private String getPseudoValidPhoneNumber() {
-        final CountryInfo countryInfo = (CountryInfo) mCountryListSpinner.getTag();
+        final CountryInfo countryInfo = mCountryListSpinner.getSelectedCountryInfo();
         final String everythingElse = mPhoneEditText.getText().toString();
 
         if (TextUtils.isEmpty(everythingElse)) {

File: auth/src/test/java/com/firebase/ui/auth/ui/phone/PhoneActivityTest.java
Patch:
@@ -131,7 +131,7 @@ public void testDefaultFullPhoneNumber_prePopulatesPhoneNumberInBundle() {
 
         assertEquals(PHONE_NO_COUNTRY_CODE, mPhoneEditText.getText().toString());
         assertEquals(YE_COUNTRY_CODE,
-                String.valueOf(((CountryInfo) mCountryListSpinner.getTag()).getCountryCode()));
+                String.valueOf((mCountryListSpinner.getSelectedCountryInfo()).getCountryCode()));
     }
 
     @Test
@@ -157,9 +157,9 @@ public void testDefaultCountryCodeAndNationalNumber_prePopulatesPhoneNumberInBun
 
         assertEquals(PHONE_NO_COUNTRY_CODE, mPhoneEditText.getText().toString());
         assertEquals(CA_COUNTRY_CODE,
-                String.valueOf(((CountryInfo) mCountryListSpinner.getTag()).getCountryCode()));
+                String.valueOf((mCountryListSpinner.getSelectedCountryInfo()).getCountryCode()));
         assertEquals(new Locale("", CA_ISO2),
-                ((CountryInfo) mCountryListSpinner.getTag()).getLocale());
+                ((CountryInfo) mCountryListSpinner.getSelectedCountryInfo()).getLocale());
     }
 
     @Test

File: auth/src/main/java/com/firebase/ui/auth/viewmodel/ViewModelBase.java
Patch:
@@ -39,6 +39,5 @@ protected void setArguments(T arguments) {
     @Override
     protected void onCleared() {
         mIsInitialized.set(false);
-        mArguments = null;
     }
 }

File: app/src/main/java/com/firebase/uidemo/database/firestore/FirestorePagingActivity.java
Patch:
@@ -101,7 +101,7 @@ protected void onLoadingStateChanged(@NonNull LoadingState state) {
                                 break;
                             case FINISHED:
                                 mProgressBar.setVisibility(View.GONE);
-                                showToast("Reached end of data set,");
+                                showToast("Reached end of data set.");
                                 break;
                             case ERROR:
                                 showToast("An error occurred.");

File: firestore/src/main/java/com/firebase/ui/firestore/paging/FirestoreDataSource.java
Patch:
@@ -182,7 +182,7 @@ public void onSuccess(QuerySnapshot snapshot) {
             mLoadingState.postValue(LoadingState.LOADED);
 
             // Post the 'FINISHED' state when no more pages will be loaded. The data source
-            // callbacks interpret and empty result list as a signal to cancel any future loads
+            // callbacks interpret an empty result list as a signal to cancel any future loads.
             if (snapshot.getDocuments().isEmpty()) {
                 mLoadingState.postValue(LoadingState.FINISHED);
             }

File: auth/src/main/java/com/firebase/ui/auth/data/remote/SignInKickstarter.java
Patch:
@@ -192,6 +192,7 @@ private void handleCredential(final Credential credential) {
             final IdpResponse response = new IdpResponse.Builder(
                     new User.Builder(EmailAuthProvider.PROVIDER_ID, id).build()).build();
 
+            setResult(Resource.<IdpResponse>forLoading());
             getAuth().signInWithEmailAndPassword(id, password)
                     .addOnSuccessListener(new OnSuccessListener<AuthResult>() {
                         @Override

File: auth/src/main/java/com/firebase/ui/auth/ui/HelperActivityBase.java
Patch:
@@ -13,7 +13,7 @@
 import com.firebase.ui.auth.data.model.FlowParameters;
 import com.firebase.ui.auth.ui.credentials.CredentialSaveActivity;
 import com.firebase.ui.auth.util.AuthHelper;
-import com.firebase.ui.auth.util.CredentialsUtil;
+import com.firebase.ui.auth.util.CredentialUtils;
 import com.firebase.ui.auth.util.ExtraConstants;
 import com.firebase.ui.auth.util.data.ProviderUtils;
 import com.firebase.ui.auth.viewmodel.RequestCodes;
@@ -59,7 +59,7 @@ protected void onActivityResult(int requestCode, int resultCode, Intent data) {
         super.onActivityResult(requestCode, resultCode, data);
         // Forward the results of Smart Lock saving
         if (requestCode == RequestCodes.CRED_SAVE_FLOW) {
-            finish(RESULT_OK, data);
+            finish(resultCode, data);
         }
     }
 
@@ -89,7 +89,7 @@ public void startSaveCredentials(
             @Nullable String password) {
         // Build credential
         String accountType = ProviderUtils.idpResponseToAccountType(response);
-        Credential credential = CredentialsUtil.buildCredential(
+        Credential credential = CredentialUtils.buildCredential(
                 firebaseUser, password, accountType);
 
         // Start the dedicated SmartLock Activity

File: auth/src/main/java/com/firebase/ui/auth/util/data/ProviderUtils.java
Patch:
@@ -84,7 +84,7 @@ public static String signInMethodToProviderId(@NonNull String method) {
             case EmailAuthProvider.EMAIL_LINK_SIGN_IN_METHOD:
                 return EmailAuthProvider.PROVIDER_ID;
             default:
-                throw new IllegalStateException("Unknown method: + " + method);
+                throw new IllegalStateException("Unknown method: " + method);
         }
     }
 

File: app/src/main/java/com/firebase/uidemo/auth/AuthUiActivity.java
Patch:
@@ -171,7 +171,7 @@ public void signIn(View view) {
     @OnClick(R.id.sign_in_silent)
     public void silentSignIn(View view) {
         AuthUI.getInstance().silentSignIn(this, getSelectedProviders())
-                .addOnCompleteListener(new OnCompleteListener<AuthResult>() {
+                .addOnCompleteListener(this, new OnCompleteListener<AuthResult>() {
                     @Override
                     public void onComplete(@NonNull Task<AuthResult> task) {
                         if (task.isSuccessful()) {

File: auth/src/main/java/com/firebase/ui/auth/AuthUI.java
Patch:
@@ -307,7 +307,7 @@ public Task<AuthResult> silentSignIn(@NonNull final Context context,
             }
 
             googleOptions = google.getParams()
-                    .getParcelable(ExtraConstants.EXTRA_GOOGLE_SIGN_IN_OPTIONS);
+                    .getParcelable(ExtraConstants.GOOGLE_SIGN_IN_OPTIONS);
         }
 
         final GoogleSignInOptions finalGoogleOptions = googleOptions;

File: auth/src/main/java/com/firebase/ui/auth/data/model/State.java
Patch:
@@ -4,5 +4,5 @@
 
 @RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)
 public enum State {
-    SUCCESS, FAILURE, LOADING, USED
+    SUCCESS, FAILURE, LOADING
 }

File: auth/src/main/java/com/firebase/ui/auth/data/remote/GoogleSignInHandler.java
Patch:
@@ -61,7 +61,7 @@ public void startSignIn(@NonNull HelperActivityBase activity) {
     }
 
     private void start() {
-        setResult(Resource.<IdpResponse>forUsableFailure(new IntentRequiredException(
+        setResult(Resource.<IdpResponse>forFailure(new IntentRequiredException(
                 GoogleSignIn.getClient(getApplication(), getSignInOptions()).getSignInIntent(),
                 RequestCodes.GOOGLE_PROVIDER)));
     }

File: auth/src/main/java/com/firebase/ui/auth/viewmodel/ResourceObserver.java
Patch:
@@ -28,6 +28,8 @@ public final void onChanged(Resource<T> resource) {
         }
         mActivity.getDialogHolder().dismissDialog();
 
+        if (resource.isUsed()) { return; }
+
         if (resource.getState() == State.SUCCESS) {
             onSuccess(resource.getValue());
         } else if (resource.getState() == State.FAILURE) {

File: auth/src/main/java/com/firebase/ui/auth/viewmodel/smartlock/SmartLockHandler.java
Patch:
@@ -76,7 +76,7 @@ public void onComplete(@NonNull Task<Void> task) {
                             setResult(Resource.forVoidSuccess());
                         } else if (task.getException() instanceof ResolvableApiException) {
                             ResolvableApiException rae = (ResolvableApiException) task.getException();
-                            setResult(Resource.<Void>forUsableFailure(
+                            setResult(Resource.<Void>forFailure(
                                     new PendingIntentRequiredException(
                                             rae.getResolution(), RequestCodes.CRED_SAVE)));
                         } else {

File: app/src/main/java/com/firebase/uidemo/ChooserActivity.java
Patch:
@@ -16,6 +16,7 @@
 
 import android.content.Intent;
 import android.os.Bundle;
+import android.support.annotation.Nullable;
 import android.support.annotation.StringRes;
 import android.support.v7.app.AppCompatActivity;
 import android.support.v7.widget.LinearLayoutManager;
@@ -38,7 +39,7 @@ public class ChooserActivity extends AppCompatActivity {
     RecyclerView mActivities;
 
     @Override
-    protected void onCreate(Bundle savedInstanceState) {
+    protected void onCreate(@Nullable Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_chooser);
         ButterKnife.bind(this);

File: app/src/main/java/com/firebase/uidemo/auth/AuthUiActivity.java
Patch:
@@ -18,6 +18,7 @@
 import android.content.Intent;
 import android.os.Bundle;
 import android.support.annotation.DrawableRes;
+import android.support.annotation.Nullable;
 import android.support.annotation.StringRes;
 import android.support.annotation.StyleRes;
 import android.support.design.widget.Snackbar;
@@ -100,7 +101,7 @@ public static Intent createIntent(Context context) {
     }
 
     @Override
-    public void onCreate(Bundle savedInstanceState) {
+    public void onCreate(@Nullable Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.auth_ui_layout);
         ButterKnife.bind(this);

File: app/src/main/java/com/firebase/uidemo/auth/SignedInActivity.java
Patch:
@@ -65,11 +65,11 @@ public class SignedInActivity extends AppCompatActivity {
 
     public static Intent createIntent(Context context, IdpResponse idpResponse) {
         return new Intent().setClass(context, SignedInActivity.class)
-                .putExtra(ExtraConstants.EXTRA_IDP_RESPONSE, idpResponse);
+                .putExtra(ExtraConstants.IDP_RESPONSE, idpResponse);
     }
 
     @Override
-    public void onCreate(Bundle savedInstanceState) {
+    public void onCreate(@Nullable Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
 
         FirebaseUser currentUser = FirebaseAuth.getInstance().getCurrentUser();
@@ -79,7 +79,7 @@ public void onCreate(Bundle savedInstanceState) {
             return;
         }
 
-        IdpResponse response = getIntent().getParcelableExtra(ExtraConstants.EXTRA_IDP_RESPONSE);
+        IdpResponse response = getIntent().getParcelableExtra(ExtraConstants.IDP_RESPONSE);
 
         setContentView(R.layout.signed_in_layout);
         ButterKnife.bind(this);

File: app/src/main/java/com/firebase/uidemo/database/firestore/FirestoreChatActivity.java
Patch:
@@ -2,6 +2,7 @@
 
 import android.os.Bundle;
 import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.support.v7.app.AppCompatActivity;
 import android.support.v7.widget.LinearLayoutManager;
 import android.support.v7.widget.RecyclerView;
@@ -64,7 +65,7 @@ public class FirestoreChatActivity extends AppCompatActivity
     TextView mEmptyListMessage;
 
     @Override
-    protected void onCreate(Bundle savedInstanceState) {
+    protected void onCreate(@Nullable Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_chat);
         ButterKnife.bind(this);

File: app/src/main/java/com/firebase/uidemo/database/realtime/RealtimeDbChatActivity.java
Patch:
@@ -2,6 +2,7 @@
 
 import android.os.Bundle;
 import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.support.v7.app.AppCompatActivity;
 import android.support.v7.widget.LinearLayoutManager;
 import android.support.v7.widget.RecyclerView;
@@ -61,7 +62,7 @@ public class RealtimeDbChatActivity extends AppCompatActivity
     TextView mEmptyListMessage;
 
     @Override
-    protected void onCreate(Bundle savedInstanceState) {
+    protected void onCreate(@Nullable Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_chat);
         ButterKnife.bind(this);

File: app/src/main/java/com/firebase/uidemo/storage/ImageActivity.java
Patch:
@@ -6,6 +6,7 @@
 import android.os.Bundle;
 import android.provider.MediaStore;
 import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.support.v7.app.AppCompatActivity;
 import android.util.Log;
 import android.view.View;
@@ -54,7 +55,7 @@ public class ImageActivity extends AppCompatActivity implements EasyPermissions.
     ImageView mImageView;
 
     @Override
-    protected void onCreate(Bundle savedInstanceState) {
+    protected void onCreate(@Nullable Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_image);
         ButterKnife.bind(this);

File: auth/src/main/java/com/firebase/ui/auth/data/model/FlowParameters.java
Patch:
@@ -81,14 +81,14 @@ public FlowParameters(
      * Extract FlowParameters from an Intent.
      */
     public static FlowParameters fromIntent(Intent intent) {
-        return intent.getParcelableExtra(ExtraConstants.EXTRA_FLOW_PARAMS);
+        return intent.getParcelableExtra(ExtraConstants.FLOW_PARAMS);
     }
 
     /**
      * Extract FlowParameters from a Bundle.
      */
     public static FlowParameters fromBundle(Bundle bundle) {
-        return bundle.getParcelable(ExtraConstants.EXTRA_FLOW_PARAMS);
+        return bundle.getParcelable(ExtraConstants.FLOW_PARAMS);
     }
 
     @Override

File: auth/src/main/java/com/firebase/ui/auth/data/model/User.java
Patch:
@@ -46,11 +46,11 @@ private User(String providerId, String email, String phoneNumber, String name, U
     }
 
     public static User getUser(Intent intent) {
-        return intent.getParcelableExtra(ExtraConstants.EXTRA_USER);
+        return intent.getParcelableExtra(ExtraConstants.USER);
     }
 
     public static User getUser(Bundle arguments) {
-        return arguments.getParcelable(ExtraConstants.EXTRA_USER);
+        return arguments.getParcelable(ExtraConstants.USER);
     }
 
     @NonNull

File: auth/src/main/java/com/firebase/ui/auth/data/remote/FacebookSignInHandler.java
Patch:
@@ -79,7 +79,7 @@ private static IdpResponse createIdpResponse(
     @Override
     protected void onCreate() {
         List<String> permissions = getArguments().getParams()
-                .getStringArrayList(ExtraConstants.EXTRA_FACEBOOK_PERMISSIONS);
+                .getStringArrayList(ExtraConstants.FACEBOOK_PERMISSIONS);
         permissions = new ArrayList<>(
                 permissions == null ? Collections.<String>emptyList() : permissions);
 
@@ -112,6 +112,8 @@ protected void onCleared() {
     private class Callback implements FacebookCallback<LoginResult> {
         @Override
         public void onSuccess(LoginResult result) {
+            setResult(Resource.<IdpResponse>forLoading());
+
             GraphRequest request = GraphRequest.newMeRequest(result.getAccessToken(),
                     new ProfileRequest(result));
 

File: auth/src/main/java/com/firebase/ui/auth/data/remote/GoogleSignInHandler.java
Patch:
@@ -69,7 +69,7 @@ private void start() {
     private GoogleSignInOptions getSignInOptions() {
         GoogleSignInOptions.Builder builder = new GoogleSignInOptions.Builder(
                 mConfig.getParams().<GoogleSignInOptions>getParcelable(
-                        ExtraConstants.EXTRA_GOOGLE_SIGN_IN_OPTIONS));
+                        ExtraConstants.GOOGLE_SIGN_IN_OPTIONS));
 
         if (!TextUtils.isEmpty(mEmail)) {
             builder.setAccountName(mEmail);

File: auth/src/main/java/com/firebase/ui/auth/data/remote/TwitterSignInHandler.java
Patch:
@@ -88,6 +88,7 @@ public void onActivityResult(int requestCode, int resultCode, @Nullable Intent d
     private class TwitterSessionResult extends Callback<TwitterSession> {
         @Override
         public void success(final Result<TwitterSession> sessionResult) {
+            setResult(Resource.<IdpResponse>forLoading());
             TwitterCore.getInstance()
                     .getApiClient()
                     .getAccountService()

File: auth/src/main/java/com/firebase/ui/auth/ui/AppCompatBase.java
Patch:
@@ -15,6 +15,7 @@
 package com.firebase.ui.auth.ui;
 
 import android.os.Bundle;
+import android.support.annotation.Nullable;
 import android.support.annotation.RestrictTo;
 
 import com.firebase.ui.auth.R;
@@ -23,7 +24,7 @@
 @RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)
 public class AppCompatBase extends HelperActivityBase {
     @Override
-    protected void onCreate(Bundle savedInstanceState) {
+    protected void onCreate(@Nullable Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setTheme(R.style.FirebaseUI); // Provides default values
         setTheme(getFlowHolder().getArguments().themeId);

File: auth/src/test/java/com/firebase/ui/auth/AuthUITest.java
Patch:
@@ -45,7 +45,7 @@ public void testCreateStartIntent_shouldHaveEmailAsDefaultProvider() {
                 .getInstance()
                 .createSignInIntentBuilder()
                 .build()
-                .getParcelableExtra(ExtraConstants.EXTRA_FLOW_PARAMS);
+                .getParcelableExtra(ExtraConstants.FLOW_PARAMS);
         assertEquals(1, flowParameters.providerInfo.size());
         assertEquals(EmailAuthProvider.PROVIDER_ID,
                 flowParameters.providerInfo.get(0).getProviderId());
@@ -70,7 +70,7 @@ public void testCreatingStartIntent() {
                 .setTosUrl(TestConstants.TOS_URL)
                 .setPrivacyPolicyUrl(TestConstants.PRIVACY_URL)
                 .build()
-                .getParcelableExtra(ExtraConstants.EXTRA_FLOW_PARAMS);
+                .getParcelableExtra(ExtraConstants.FLOW_PARAMS);
 
         assertEquals(3, flowParameters.providerInfo.size());
         assertEquals(FirebaseApp.getInstance().getName(), flowParameters.appName);

File: auth/src/test/java/com/firebase/ui/auth/testhelpers/TestHelper.java
Patch:
@@ -201,7 +201,7 @@ public static void verifyCredentialSaveStarted(@NonNull  Activity activity,
                 CredentialSaveActivity.class.getName());
 
         // Check the credential passed
-        Credential credential = startedIntent.getParcelableExtra(ExtraConstants.EXTRA_CREDENTIAL);
+        Credential credential = startedIntent.getParcelableExtra(ExtraConstants.CREDENTIAL);
 
         // Check the password
         assertEquals(credential.getPassword(), password);

File: auth/src/test/java/com/firebase/ui/auth/ui/phone/PhoneActivityTest.java
Patch:
@@ -112,7 +112,7 @@ public void setUp() {
     @Test
     public void testDefaultFullPhoneNumber_prePopulatesPhoneNumberInBundle() {
         Bundle fullPhoneParams = new Bundle();
-        fullPhoneParams.putString(ExtraConstants.EXTRA_PHONE, YE_RAW_PHONE);
+        fullPhoneParams.putString(ExtraConstants.PHONE, YE_RAW_PHONE);
         Intent startIntent = PhoneActivity.createIntent(
                 RuntimeEnvironment.application,
                 TestHelper.getFlowParameters(
@@ -137,8 +137,8 @@ public void testDefaultFullPhoneNumber_prePopulatesPhoneNumberInBundle() {
     @Test
     public void testDefaultCountryCodeAndNationalNumber_prePopulatesPhoneNumberInBundle() {
         Bundle phoneParams = new Bundle();
-        phoneParams.putString(ExtraConstants.EXTRA_COUNTRY_ISO, CA_ISO2);
-        phoneParams.putString(ExtraConstants.EXTRA_NATIONAL_NUMBER, PHONE_NO_COUNTRY_CODE);
+        phoneParams.putString(ExtraConstants.COUNTRY_ISO, CA_ISO2);
+        phoneParams.putString(ExtraConstants.NATIONAL_NUMBER, PHONE_NO_COUNTRY_CODE);
         Intent startIntent = PhoneActivity.createIntent(
                 RuntimeEnvironment.application,
                 TestHelper.getFlowParameters(

File: auth/src/main/java/com/firebase/ui/auth/viewmodel/idp/SocialProviderResponseHandler.java
Patch:
@@ -67,10 +67,10 @@ public void onFailure(@NonNull Exception e) {
                                                 setResult(Resource.<IdpResponse>forFailure(e));
                                             }
                                         });
+                                return;
                             }
-                        } else {
-                            setResult(Resource.<IdpResponse>forFailure(e));
                         }
+                        setResult(Resource.<IdpResponse>forFailure(e));
                     }
                 });
     }

File: auth/src/main/java/com/firebase/ui/auth/data/model/State.java
Patch:
@@ -4,5 +4,5 @@
 
 @RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)
 public enum State {
-    SUCCESS, FAILURE, LOADING, USED
+    SUCCESS, FAILURE, LOADING
 }

File: auth/src/main/java/com/firebase/ui/auth/data/remote/GoogleSignInHandler.java
Patch:
@@ -61,7 +61,7 @@ public void startSignIn(@NonNull HelperActivityBase activity) {
     }
 
     private void start() {
-        setResult(Resource.<IdpResponse>forUsableFailure(new IntentRequiredException(
+        setResult(Resource.<IdpResponse>forFailure(new IntentRequiredException(
                 GoogleSignIn.getClient(getApplication(), getSignInOptions()).getSignInIntent(),
                 RequestCodes.GOOGLE_PROVIDER)));
     }

File: auth/src/main/java/com/firebase/ui/auth/ui/credentials/CredentialSaveActivity.java
Patch:
@@ -55,7 +55,7 @@ public void onChanged(@Nullable Resource<Void> resource) {
                     return;
                 }
 
-                onSaveOperation(resource);
+                if (!resource.isUsed()) { onSaveOperation(resource); }
             }
         });
 

File: auth/src/main/java/com/firebase/ui/auth/viewmodel/ResourceObserver.java
Patch:
@@ -28,6 +28,8 @@ public final void onChanged(Resource<T> resource) {
         }
         mActivity.getDialogHolder().dismissDialog();
 
+        if (resource.isUsed()) { return; }
+
         if (resource.getState() == State.SUCCESS) {
             onSuccess(resource.getValue());
         } else if (resource.getState() == State.FAILURE) {

File: auth/src/main/java/com/firebase/ui/auth/viewmodel/idp/SocialProviderResponseHandler.java
Patch:
@@ -109,7 +109,7 @@ public void onSuccess(String provider) {
 
             if (provider.equals(EmailAuthProvider.PROVIDER_ID)) {
                 // Start email welcome back flow
-                setResult(Resource.<IdpResponse>forUsableFailure(new IntentRequiredException(
+                setResult(Resource.<IdpResponse>forFailure(new IntentRequiredException(
                         WelcomeBackPasswordPrompt.createIntent(
                                 getApplication(),
                                 getArguments(),
@@ -118,7 +118,7 @@ public void onSuccess(String provider) {
                 )));
             } else {
                 // Start Idp welcome back flow
-                setResult(Resource.<IdpResponse>forUsableFailure(new IntentRequiredException(
+                setResult(Resource.<IdpResponse>forFailure(new IntentRequiredException(
                         WelcomeBackIdpPrompt.createIntent(
                                 getApplication(),
                                 getArguments(),

File: auth/src/main/java/com/firebase/ui/auth/viewmodel/smartlock/SmartLockHandler.java
Patch:
@@ -76,7 +76,7 @@ public void onComplete(@NonNull Task<Void> task) {
                             setResult(Resource.forVoidSuccess());
                         } else if (task.getException() instanceof ResolvableApiException) {
                             ResolvableApiException rae = (ResolvableApiException) task.getException();
-                            setResult(Resource.<Void>forUsableFailure(
+                            setResult(Resource.<Void>forFailure(
                                     new PendingIntentRequiredException(
                                             rae.getResolution(), RequestCodes.CRED_SAVE)));
                         } else {

File: auth/src/main/java/com/firebase/ui/auth/ui/email/RecoverPasswordActivity.java
Patch:
@@ -81,7 +81,8 @@ public void onChanged(Resource<String> resource) {
                     // No FirebaseUser exists with this email address, show error.
                     mEmailInputLayout.setError(getString(R.string.fui_error_email_does_not_exist));
                 } else {
-                    mEmailInputLayout.setError(resource.getException().getLocalizedMessage());
+                    // Unknown error
+                    mEmailInputLayout.setError(getString(R.string.fui_error_unknown));
                 }
             }
         });

File: auth/src/main/java/com/firebase/ui/auth/ui/idp/WelcomeBackIdpPrompt.java
Patch:
@@ -185,7 +185,7 @@ public void onFailure(@NonNull Exception e) {
     }
 
     private void finishWithError(Exception e) {
-        Toast.makeText(this, R.string.fui_general_error, Toast.LENGTH_LONG).show();
+        Toast.makeText(this, R.string.fui_error_unknown, Toast.LENGTH_LONG).show();
         finish(RESULT_CANCELED, IdpResponse.getErrorIntent(e));
     }
 

File: auth/src/main/java/com/firebase/ui/auth/provider/GoogleProvider.java
Patch:
@@ -25,6 +25,8 @@
 import android.widget.Toast;
 
 import com.firebase.ui.auth.AuthUI.IdpConfig;
+import com.firebase.ui.auth.ErrorCodes;
+import com.firebase.ui.auth.FirebaseUiException;
 import com.firebase.ui.auth.IdpResponse;
 import com.firebase.ui.auth.R;
 import com.firebase.ui.auth.data.model.User;
@@ -152,7 +154,7 @@ private void onError(GoogleSignInResult result) {
 
     private void onError(String errorMessage) {
         Log.e(TAG, "Error logging in with Google. " + errorMessage);
-        mIdpCallback.onFailure();
+        mIdpCallback.onFailure(new FirebaseUiException(ErrorCodes.UNKNOWN_ERROR, errorMessage));
     }
 }
 

File: auth/src/main/java/com/firebase/ui/auth/provider/Provider.java
Patch:
@@ -4,7 +4,9 @@
 import android.content.Context;
 import android.content.Intent;
 import android.support.annotation.LayoutRes;
+import android.support.annotation.RestrictTo;
 
+@RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)
 public interface Provider {
     /** Retrieves the name of the IDP, for display on-screen. */
     String getName(Context context);

File: auth/src/main/java/com/firebase/ui/auth/ui/idp/AuthMethodPickerActivity.java
Patch:
@@ -17,6 +17,7 @@
 import android.content.Context;
 import android.content.Intent;
 import android.os.Bundle;
+import android.support.annotation.NonNull;
 import android.support.annotation.RestrictTo;
 import android.support.constraint.ConstraintLayout;
 import android.support.constraint.ConstraintSet;
@@ -160,7 +161,7 @@ public void onActivityResult(int requestCode, int resultCode, Intent data) {
     }
 
     @Override
-    public void onSuccess(final IdpResponse response) {
+    public void onSuccess(@NonNull final IdpResponse response) {
         AuthCredential credential = ProviderUtils.getAuthCredential(response);
         getAuthHelper().getFirebaseAuth()
                 .signInWithCredential(credential)
@@ -180,7 +181,7 @@ public void onSuccess(AuthResult authResult) {
     }
 
     @Override
-    public void onFailure() {
+    public void onFailure(@NonNull Exception e) {
         // stay on this screen
         getDialogHolder().dismissDialog();
     }

File: auth/src/main/java/com/firebase/ui/auth/ui/idp/CredentialSignInHandler.java
Patch:
@@ -20,7 +20,6 @@
 import android.support.annotation.RestrictTo;
 import android.util.Log;
 
-import com.firebase.ui.auth.ErrorCodes;
 import com.firebase.ui.auth.IdpResponse;
 import com.firebase.ui.auth.data.model.User;
 import com.firebase.ui.auth.ui.HelperActivityBase;
@@ -66,7 +65,7 @@ public void onFailure(@NonNull Exception e) {
                         .addOnFailureListener(new OnFailureListener() {
                             @Override
                             public void onFailure(@NonNull Exception e) {
-                                Intent intent = IdpResponse.getErrorCodeIntent(ErrorCodes.UNKNOWN_ERROR);
+                                Intent intent = IdpResponse.getErrorIntent(e);
                                 mActivity.finish(Activity.RESULT_CANCELED, intent);
                             }
                         });

File: auth/src/main/java/com/firebase/ui/auth/viewmodel/smartlock/SmartLockHandler.java
Patch:
@@ -10,7 +10,7 @@
 import android.util.Log;
 
 import com.firebase.ui.auth.ErrorCodes;
-import com.firebase.ui.auth.data.model.FirebaseUiException;
+import com.firebase.ui.auth.FirebaseUiException;
 import com.firebase.ui.auth.data.model.Resource;
 import com.firebase.ui.auth.util.CredentialsUtil;
 import com.firebase.ui.auth.viewmodel.AuthViewModelBase;

File: auth/src/main/java/com/firebase/ui/auth/KickoffActivity.java
Patch:
@@ -93,8 +93,8 @@ private void start() {
      * @return true if there is no network connection, false otherwise.
      */
     private boolean isOffline() {
-        ConnectivityManager manager =
-                (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);
+        ConnectivityManager manager = (ConnectivityManager) getApplicationContext()
+                .getSystemService(Context.CONNECTIVITY_SERVICE);
 
         return !(manager != null
                 && manager.getActiveNetworkInfo() != null

File: auth/src/main/java/com/firebase/ui/auth/viewmodel/AuthViewModelBase.java
Patch:
@@ -5,7 +5,7 @@
 import android.support.annotation.VisibleForTesting;
 
 import com.firebase.ui.auth.data.model.FlowParameters;
-import com.google.android.gms.auth.api.credentials.Credentials;
+import com.firebase.ui.auth.util.GoogleApiUtils;
 import com.google.android.gms.auth.api.credentials.CredentialsClient;
 import com.google.firebase.FirebaseApp;
 import com.google.firebase.auth.FirebaseAuth;
@@ -27,7 +27,7 @@ protected void onCreate() {
         FirebaseApp app = FirebaseApp.getInstance(getArguments().appName);
         mAuth = FirebaseAuth.getInstance(app);
         mPhoneAuth = PhoneAuthProvider.getInstance(mAuth);
-        mCredentialsClient = Credentials.getClient(getApplication());
+        mCredentialsClient = GoogleApiUtils.getCredentialsClient(getApplication());
     }
 
     protected FirebaseAuth getAuth() {

File: auth/src/test/java/com/firebase/ui/auth/testhelpers/TestHelper.java
Patch:
@@ -14,6 +14,8 @@
 
 package com.firebase.ui.auth.testhelpers;
 
+import android.arch.lifecycle.Lifecycle;
+import android.arch.lifecycle.LifecycleRegistry;
 import android.content.Context;
 import android.content.res.Resources;
 import android.text.TextUtils;
@@ -187,6 +189,7 @@ public static void mockCredentialsClient(HelperActivityBase activity) {
         SaveSmartLock saveSmartLock = SaveSmartLock.getInstance(activity);
         CredentialsClient mockCredentials = mock(CredentialsClient.class);
         saveSmartLock.setCredentialsClient(mockCredentials);
+        ((LifecycleRegistry) saveSmartLock.getLifecycle()).markState(Lifecycle.State.RESUMED);
 
         when(mockCredentials.save(any(Credential.class)))
                 .thenReturn(AutoCompleteTask.<Void>forSuccess(null));

File: auth/src/main/java/com/firebase/ui/auth/util/ui/PreambleHandler.java
Patch:
@@ -46,8 +46,8 @@ public static void setup(Context context,
                              @StringRes int buttonText,
                              TextView textView) {
         PreambleHandler handler = new PreambleHandler(context, parameters, buttonText);
-        handler.setPreamble(textView);
         handler.setupCreateAccountPreamble();
+        handler.setPreamble(textView);
     }
 
     private void setPreamble(TextView textView) {

File: auth/src/main/java/com/firebase/ui/auth/AuthUI.java
Patch:
@@ -230,7 +230,7 @@ public Task<Void> signOut(@NonNull Context context) {
      */
     @NonNull
     public Task<Void> delete(@NonNull Context context) {
-        final FirebaseUser currentUser = FirebaseAuth.getInstance().getCurrentUser();
+        final FirebaseUser currentUser = mAuth.getCurrentUser();
         if (currentUser == null) {
             return Tasks.forException(new FirebaseAuthInvalidUserException(
                     String.valueOf(CommonStatusCodes.SIGN_IN_REQUIRED),

File: firestore/src/main/java/com/firebase/ui/firestore/FirestoreRecyclerAdapter.java
Patch:
@@ -66,7 +66,7 @@ public T getItem(int position) {
 
     @Override
     public int getItemCount() {
-        return mSnapshots.size();
+        return mSnapshots.isListening(this) ? mSnapshots.size() : 0;
     }
 
     @Override

File: auth/src/main/java/com/firebase/ui/auth/ui/phone/PhoneVerificationActivity.java
Patch:
@@ -394,7 +394,7 @@ private void showLoadingDialog(String message) {
     }
 
     private void dismissLoadingDialog() {
-        if (mProgressDialog != null) {
+        if (mProgressDialog != null && !isFinishing()) {
             mProgressDialog.dismissAllowingStateLoss();
             mProgressDialog = null;
         }

File: app/src/main/java/com/firebase/uidemo/database/firestore/FirestoreChatActivity.java
Patch:
@@ -19,7 +19,6 @@
 import com.firebase.ui.firestore.FirestoreRecyclerOptions;
 import com.firebase.uidemo.R;
 import com.firebase.uidemo.database.ChatHolder;
-import com.firebase.uidemo.database.realtime.Chat;
 import com.firebase.uidemo.util.SignInResultNotifier;
 import com.google.android.gms.tasks.OnFailureListener;
 import com.google.firebase.auth.FirebaseAuth;

File: auth/src/main/java/com/firebase/ui/auth/provider/FacebookProvider.java
Patch:
@@ -28,9 +28,9 @@
 import com.facebook.FacebookCallback;
 import com.facebook.FacebookException;
 import com.facebook.FacebookRequestError;
-import com.facebook.FacebookSdk;
 import com.facebook.GraphRequest;
 import com.facebook.GraphResponse;
+import com.facebook.WebDialog;
 import com.facebook.login.LoginManager;
 import com.facebook.login.LoginResult;
 import com.firebase.ui.auth.AuthUI;
@@ -64,7 +64,7 @@ public FacebookProvider(AuthUI.IdpConfig idpConfig, @StyleRes int theme) {
         } else {
             mScopes = scopes;
         }
-        FacebookSdk.setWebDialogTheme(theme);
+        WebDialog.setWebDialogTheme(theme);
     }
 
     public static AuthCredential createAuthCredential(IdpResponse response) {

File: auth/src/main/java/com/firebase/ui/auth/ui/ExtraConstants.java
Patch:
@@ -26,5 +26,8 @@ public class ExtraConstants {
     public static final String EXTRA_USER = "extra_user";
     public static final String EXTRA_EMAIL = "extra_email";
     public static final String EXTRA_PHONE = "extra_phone_number";
+    public static final String EXTRA_COUNTRY_CODE = "extra_country_code";
+    public static final String EXTRA_NATIONAL_NUMBER = "extra_national_number";
     public static final String HAS_EXISTING_INSTANCE = "has_existing_instance";
+    public static final String EXTRA_PARAMS = "extra_params";
 }

File: auth/src/test/java/com/firebase/ui/auth/ui/phone/PhoneTestConstants.java
Patch:
@@ -24,6 +24,8 @@ public class PhoneTestConstants {
     public static final String PHONE_NO_COUNTRY_CODE = "23456789";
     public static final String US_COUNTRY_CODE = "1";
     public static final String US_ISO2 = "US";
+    public static final String CA_ISO2 = "CA";
+    public static final String CA_COUNTRY_CODE = "1";
     public static final String YE_COUNTRY_CODE = "967";
     public static final String YE_ISO2 = "YE";
 }

File: app/src/main/java/com/firebase/uidemo/auth/AuthUiActivity.java
Patch:
@@ -205,7 +205,7 @@ public void signIn(View view) {
                         .setTosUrl(getSelectedTosUrl())
                         .setPrivacyPolicyUrl(getSelectedPrivacyPolicyUrl())
                         .setIsSmartLockEnabled(mEnableCredentialSelector.isChecked(),
-                                               mEnableHintSelector.isChecked())
+                                mEnableHintSelector.isChecked())
                         .setAllowNewEmailAccounts(mAllowNewEmailAccounts.isChecked())
                         .build(),
                 RC_SIGN_IN);

File: app/src/main/java/com/firebase/uidemo/database/ChatActivity.java
Patch:
@@ -146,7 +146,7 @@ protected FirebaseRecyclerAdapter<Chat, ChatHolder> getAdapter() {
                 lastFifty,
                 this) {
             @Override
-            public void populateViewHolder(ChatHolder holder, Cgit hat chat, int position) {
+            public void populateViewHolder(ChatHolder holder, Chat chat, int position) {
                 holder.bind(chat);
             }
 

File: database/src/main/java/com/firebase/ui/database/FirebaseArray.java
Patch:
@@ -121,7 +121,7 @@ public void onDataChange(DataSnapshot dataSnapshot) {
 
     @Override
     public void onCancelled(DatabaseError error) {
-        notifyListenersOnCancelled(error);
+        notifyListenersOnError(error);
     }
 
     private int getIndexForKey(String key) {

File: firestore/src/main/java/com/firebase/ui/firestore/FirestoreArray.java
Patch:
@@ -67,7 +67,7 @@ protected void onDestroy() {
     public void onEvent(QuerySnapshot snapshots, FirebaseFirestoreException e) {
         if (e != null) {
             Log.w(TAG, "Error in snapshot listener", e);
-            notifyOnError(e);
+            notifyListenersOnError(e);
             return;
         }
 

File: auth/src/main/java/com/firebase/ui/auth/ui/email/CheckEmailFragment.java
Patch:
@@ -206,8 +206,7 @@ public void onSuccess(String provider) {
                             mListener.onExistingEmailUser(
                                     new User.Builder(EmailAuthProvider.PROVIDER_ID, email).build());
                         } else {
-                            mListener.onExistingIdpUser(
-                                    new User.Builder(EmailAuthProvider.PROVIDER_ID, email).build());
+                            mListener.onExistingIdpUser(new User.Builder(provider, email).build());
                         }
                     }
                 })

File: auth/src/main/java/com/firebase/ui/auth/ui/email/RegisterEmailFragment.java
Patch:
@@ -302,9 +302,7 @@ public void onSuccess(String provider) {
                                                                 getFlowParams(),
                                                                 new User.Builder(provider, email)
                                                                         .build(),
-                                                                new IdpResponse.Builder(new User.Builder(
-                                                                        EmailAuthProvider.PROVIDER_ID,
-                                                                        email).build()).build()),
+                                                                null),
                                                         RegisterEmailActivity.RC_WELCOME_BACK_IDP);
                                             }
                                         }

File: auth/src/main/java/com/firebase/ui/auth/provider/EmailProvider.java
Patch:
@@ -23,13 +23,13 @@ public EmailProvider(Activity activity, FlowParameters flowParameters) {
 
     @Override
     public String getName(Context context) {
-        return context.getString(R.string.provider_name_email);
+        return context.getString(R.string.fui_provider_name_email);
     }
 
     @Override
     @LayoutRes
     public int getButtonLayout() {
-        return R.layout.provider_button_email;
+        return R.layout.fui_provider_button_email;
     }
 
     @Override

File: auth/src/main/java/com/firebase/ui/auth/provider/FacebookProvider.java
Patch:
@@ -76,13 +76,13 @@ public static AuthCredential createAuthCredential(IdpResponse response) {
 
     @Override
     public String getName(Context context) {
-        return context.getString(R.string.idp_name_facebook);
+        return context.getString(R.string.fui_idp_name_facebook);
     }
 
     @Override
     @LayoutRes
     public int getButtonLayout() {
-        return R.layout.idp_button_facebook;
+        return R.layout.fui_idp_button_facebook;
     }
 
     @Override

File: auth/src/main/java/com/firebase/ui/auth/provider/GoogleProvider.java
Patch:
@@ -92,13 +92,13 @@ private GoogleSignInOptions getSignInOptions(@Nullable String email) {
 
     @Override
     public String getName(Context context) {
-        return context.getString(R.string.idp_name_google);
+        return context.getString(R.string.fui_idp_name_google);
     }
 
     @Override
     @LayoutRes
     public int getButtonLayout() {
-        return R.layout.idp_button_google;
+        return R.layout.fui_idp_button_google;
     }
 
     @Override
@@ -133,7 +133,7 @@ public void onActivityResult(int requestCode, int resultCode, Intent data) {
                         Toast.makeText(
                                 mActivity,
                                 mActivity.getString(
-                                        R.string.signed_in_with_specific_account,
+                                        R.string.fui_signed_in_with_specific_account,
                                         result.getSignInAccount().getEmail()),
                                 Toast.LENGTH_SHORT).show();
                     }

File: auth/src/main/java/com/firebase/ui/auth/provider/PhoneProvider.java
Patch:
@@ -24,13 +24,13 @@ public PhoneProvider(Activity activity, FlowParameters parameters) {
 
     @Override
     public String getName(Context context) {
-        return context.getString(R.string.provider_name_phone);
+        return context.getString(R.string.fui_provider_name_phone);
     }
 
     @Override
     @LayoutRes
     public int getButtonLayout() {
-        return R.layout.provider_button_phone;
+        return R.layout.fui_provider_button_phone;
     }
 
     @Override

File: auth/src/main/java/com/firebase/ui/auth/provider/TwitterProvider.java
Patch:
@@ -67,13 +67,13 @@ private static void signOut() throws IllegalStateException {
 
     @Override
     public String getName(Context context) {
-        return context.getString(R.string.idp_name_twitter);
+        return context.getString(R.string.fui_idp_name_twitter);
     }
 
     @Override
     @LayoutRes
     public int getButtonLayout() {
-        return R.layout.idp_button_twitter;
+        return R.layout.fui_idp_button_twitter;
     }
 
     @Override

File: auth/src/main/java/com/firebase/ui/auth/ui/email/CheckEmailFragment.java
Patch:
@@ -99,7 +99,7 @@ public static CheckEmailFragment newInstance(@NonNull FlowParameters flowParamet
     public View onCreateView(LayoutInflater inflater,
                              @Nullable ViewGroup container,
                              @Nullable Bundle savedInstanceState) {
-        View v = inflater.inflate(R.layout.check_email_layout, container, false);
+        View v = inflater.inflate(R.layout.fui_check_email_layout, container, false);
 
         // Email field and validator
         mEmailLayout = (TextInputLayout) v.findViewById(R.id.email_layout);
@@ -179,7 +179,7 @@ private void validateAndProceed() {
     }
 
     private void checkAccountExists(@NonNull final String email) {
-        getDialogHolder().showLoadingDialog(R.string.progress_dialog_checking_accounts);
+        getDialogHolder().showLoadingDialog(R.string.fui_progress_dialog_checking_accounts);
 
         // Get name from SmartLock, if possible
         String name = null;

File: auth/src/main/java/com/firebase/ui/auth/ui/email/RecoverPasswordActivity.java
Patch:
@@ -52,7 +52,7 @@ public static Intent createIntent(Context context, FlowParameters flowParams, St
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        setContentView(R.layout.forgot_password_layout);
+        setContentView(R.layout.fui_forgot_password_layout);
 
         mEmailFieldValidator =
                 new EmailFieldValidator((TextInputLayout) findViewById(R.id.email_layout));
@@ -86,7 +86,7 @@ public void onFailure(@NonNull Exception e) {
 
                         if (e instanceof FirebaseAuthInvalidUserException) {
                             // No FirebaseUser exists with this email address, show error.
-                            mEmailEditText.setError(getString(R.string.error_email_does_not_exist));
+                            mEmailEditText.setError(getString(R.string.fui_error_email_does_not_exist));
                         }
                     }
                 });
@@ -96,7 +96,7 @@ public void onFailure(@NonNull Exception e) {
     public void onClick(View view) {
         if (view.getId() == R.id.button_done) {
             if (mEmailFieldValidator.validate(mEmailEditText.getText())) {
-                getDialogHolder().showLoadingDialog(R.string.progress_dialog_sending);
+                getDialogHolder().showLoadingDialog(R.string.fui_progress_dialog_sending);
                 next(mEmailEditText.getText().toString());
             }
         }

File: auth/src/main/java/com/firebase/ui/auth/ui/email/RecoveryEmailSentDialog.java
Patch:
@@ -30,8 +30,8 @@ public static void show(String email, FragmentManager manager) {
     @Override
     public Dialog onCreateDialog(Bundle savedInstanceState) {
         return new AlertDialog.Builder(getContext())
-                .setTitle(R.string.title_confirm_recover_password)
-                .setMessage(getString(R.string.confirm_recovery_body,
+                .setTitle(R.string.fui_title_confirm_recover_password)
+                .setMessage(getString(R.string.fui_confirm_recovery_body,
                         getArguments().getString(ExtraConstants.EXTRA_EMAIL)))
                 .setOnDismissListener(new DialogInterface.OnDismissListener() {
                     @Override

File: auth/src/main/java/com/firebase/ui/auth/ui/email/RegisterEmailActivity.java
Patch:
@@ -55,7 +55,7 @@ public static Intent createIntent(Context context, FlowParameters flowParams, St
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_register_email);
+        setContentView(R.layout.fui_activity_register_email);
 
         if (savedInstanceState != null) {
             return;
@@ -132,12 +132,12 @@ public void onNewUser(User user) {
 
             ft.disallowAddToBackStack().commit();
         } else {
-            emailLayout.setError(getString(R.string.error_email_does_not_exist));
+            emailLayout.setError(getString(R.string.fui_error_email_does_not_exist));
         }
     }
 
     private void setSlideAnimation() {
         // Make the next activity slide in
-        overridePendingTransition(R.anim.slide_in_right, R.anim.slide_out_left);
+        overridePendingTransition(R.anim.fui_slide_in_right, R.anim.fui_slide_out_left);
     }
 }

File: auth/src/main/java/com/firebase/ui/auth/ui/email/fieldvalidators/EmailFieldValidator.java
Patch:
@@ -23,8 +23,8 @@ public class EmailFieldValidator extends BaseValidator {
 
     public EmailFieldValidator(TextInputLayout errorContainer) {
         super(errorContainer);
-        mErrorMessage = mErrorContainer.getResources().getString(R.string.invalid_email_address);
-        mEmptyMessage = mErrorContainer.getResources().getString(R.string.missing_email_address);
+        mErrorMessage = mErrorContainer.getResources().getString(R.string.fui_invalid_email_address);
+        mEmptyMessage = mErrorContainer.getResources().getString(R.string.fui_missing_email_address);
     }
 
     @Override

File: auth/src/main/java/com/firebase/ui/auth/ui/email/fieldvalidators/PasswordFieldValidator.java
Patch:
@@ -25,7 +25,7 @@ public PasswordFieldValidator(TextInputLayout errorContainer, int minLength) {
         super(errorContainer);
         mMinLength = minLength;
         mErrorMessage = mErrorContainer.getResources()
-                .getQuantityString(R.plurals.error_weak_password, mMinLength, mMinLength);
+                .getQuantityString(R.plurals.fui_error_weak_password, mMinLength, mMinLength);
     }
 
     @Override

File: auth/src/main/java/com/firebase/ui/auth/ui/email/fieldvalidators/RequiredFieldValidator.java
Patch:
@@ -21,7 +21,7 @@
 public class RequiredFieldValidator extends BaseValidator {
     public RequiredFieldValidator(TextInputLayout errorContainer) {
         super(errorContainer);
-        mErrorMessage = mErrorContainer.getResources().getString(R.string.required_field);
+        mErrorMessage = mErrorContainer.getResources().getString(R.string.fui_required_field);
     }
 
     @Override

File: auth/src/main/java/com/firebase/ui/auth/ui/idp/AuthMethodPickerActivity.java
Patch:
@@ -72,7 +72,7 @@ public static Intent createIntent(Context context, FlowParameters flowParams) {
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        setContentView(R.layout.auth_method_picker_layout);
+        setContentView(R.layout.fui_auth_method_picker_layout);
         mSaveSmartLock = getAuthHelper().getSaveSmartLockInstance(this);
 
         populateIdpList(getFlowParams().providerInfo);
@@ -121,7 +121,7 @@ private void populateIdpList(List<IdpConfig> providers) {
                 @Override
                 public void onClick(View view) {
                     if (provider instanceof IdpProvider) {
-                        getDialogHolder().showLoadingDialog(R.string.progress_dialog_loading);
+                        getDialogHolder().showLoadingDialog(R.string.fui_progress_dialog_loading);
                     }
                     provider.startLogin(AuthMethodPickerActivity.this);
                 }

File: auth/src/main/java/com/firebase/ui/auth/ui/phone/CompletableProgressDialog.java
Patch:
@@ -41,7 +41,7 @@ public CompletableProgressDialog(Context context, int theme) {
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        setContentView(R.layout.phone_progress_dialog);
+        setContentView(R.layout.fui_phone_progress_dialog);
 
         mProgress = (ProgressBar) findViewById(R.id.progress_bar);
         mMessageView = (TextView) findViewById(R.id.progress_msg);

File: auth/src/main/java/com/firebase/ui/auth/ui/phone/CountryListAdapter.java
Patch:
@@ -38,7 +38,7 @@ final class CountryListAdapter extends ArrayAdapter<CountryInfo> implements Sect
     private String[] sections;
 
     public CountryListAdapter(Context context) {
-        super(context, R.layout.dgts__country_row, android.R.id.text1);
+        super(context, R.layout.fui_dgts_country_row, android.R.id.text1);
     }
 
     // The list of countries should be sorted using locale-sensitive string comparison

File: auth/src/main/java/com/firebase/ui/auth/util/signincontainer/SaveSmartLock.java
Patch:
@@ -120,7 +120,7 @@ public void onConnected(Bundle bundle) {
 
     @Override
     public void onConnectionFailed(@NonNull ConnectionResult connectionResult) {
-        Toast.makeText(getContext(), R.string.general_error, Toast.LENGTH_SHORT).show();
+        Toast.makeText(getContext(), R.string.fui_general_error, Toast.LENGTH_SHORT).show();
 
         PendingIntent resolution =
                 PlayServicesHelper.getGoogleApiAvailability()

File: auth/src/main/java/com/firebase/ui/auth/util/signincontainer/SignInDelegate.java
Patch:
@@ -94,7 +94,7 @@ public void onCreate(Bundle savedInstance) {
 
         FlowParameters flowParams = getFlowParams();
         if (flowParams.enableCredentials) {
-            getDialogHolder().showLoadingDialog(R.string.progress_dialog_loading);
+            getDialogHolder().showLoadingDialog(R.string.fui_progress_dialog_loading);
 
             mGoogleApiClient = new GoogleApiClient.Builder(getContext().getApplicationContext())
                     .addConnectionCallbacks(this)

File: auth/src/main/java/com/firebase/ui/auth/util/signincontainer/SmartLockBase.java
Patch:
@@ -123,7 +123,7 @@ public void onStart() {
         if (mActivityResultPair != null) {
             finish(mActivityResultPair.first, mActivityResultPair.second);
         } else if (mWasProgressDialogShowing) {
-            getDialogHolder().showLoadingDialog(com.firebase.ui.auth.R.string.progress_dialog_loading);
+            getDialogHolder().showLoadingDialog(com.firebase.ui.auth.R.string.fui_progress_dialog_loading);
             mWasProgressDialogShowing = false;
         }
     }
@@ -158,7 +158,7 @@ public void finish(int resultCode, Intent resultIntent) {
     @Override
     public void onConnectionFailed(@NonNull ConnectionResult connectionResult) {
         Toast.makeText(getContext(),
-                com.firebase.ui.auth.R.string.general_error,
+                com.firebase.ui.auth.R.string.fui_general_error,
                 Toast.LENGTH_SHORT).show();
     }
 

File: auth/src/main/java/com/firebase/ui/auth/ui/phone/PhoneVerificationActivity.java
Patch:
@@ -230,7 +230,7 @@ private void sendCode(String phoneNumber, boolean forceResend) {
         mPhoneNumber = phoneNumber;
         mVerificationState = VerificationState.VERIFICATION_STARTED;
 
-        getAuthHelper().getPhoneAuthProviderInstance().verifyPhoneNumber(
+        getAuthHelper().getPhoneAuthProvider().verifyPhoneNumber(
                 phoneNumber,
                 AUTO_RETRIEVAL_TIMEOUT_MILLIS,
                 TimeUnit.MILLISECONDS,

File: auth/src/main/java/com/firebase/ui/auth/util/AuthHelper.java
Patch:
@@ -40,7 +40,7 @@ public SaveSmartLock getSaveSmartLockInstance(HelperActivityBase activity) {
         return SaveSmartLock.getInstance(activity);
     }
 
-    public PhoneAuthProvider getPhoneAuthProviderInstance() {
-        return PhoneAuthProvider.getInstance();
+    public PhoneAuthProvider getPhoneAuthProvider() {
+        return PhoneAuthProvider.getInstance(getFirebaseAuth());
     }
 }

File: auth/src/test/java/com/firebase/ui/auth/testhelpers/AuthHelperShadow.java
Patch:
@@ -67,7 +67,7 @@ public static SaveSmartLock getSaveSmartLockInstance(HelperActivityBase activity
     }
 
     @Implementation
-    public static PhoneAuthProvider getPhoneAuthProviderInstance() {
+    public static PhoneAuthProvider getPhoneAuthProvider() {
         return sPhoneAuthProvider;
     }
 

File: database/src/main/java/com/firebase/ui/database/FirebaseIndexArray.java
Patch:
@@ -110,7 +110,7 @@ public void onChildChanged(EventType type, DataSnapshot snapshot, int index, int
 
     @Override
     public void onDataChanged() {
-        if (mHasPendingMoveOrDelete) {
+        if (mHasPendingMoveOrDelete || mKeySnapshots.isEmpty()) {
             notifyListenersOnDataChanged();
             mHasPendingMoveOrDelete = false;
         }

File: auth/src/test/java/com/firebase/ui/auth/testhelpers/CustomCountDownTimerShadow.java
Patch:
@@ -11,9 +11,9 @@ public class CustomCountDownTimerShadow {
     private boolean started;
     private long countDownInterval;
     private long millisInFuture;
-    @Mock
-    public static CountDownTimer countDownTimer;
 
+    @Mock
+    public CountDownTimer countDownTimer;
 
     public CustomCountDownTimerShadow() {
     }

File: auth/src/test/java/com/firebase/ui/auth/ui/idp/AuthMethodPickerActivityTest.java
Patch:
@@ -19,7 +19,6 @@
 import android.widget.Button;
 import android.widget.LinearLayout;
 
-import com.facebook.FacebookSdk;
 import com.firebase.ui.auth.AuthUI;
 import com.firebase.ui.auth.BuildConfig;
 import com.firebase.ui.auth.R;
@@ -132,7 +131,6 @@ public void testFacebookLoginFlow() {
         List<String> providers = Arrays.asList(AuthUI.FACEBOOK_PROVIDER);
 
         AuthMethodPickerActivity authMethodPickerActivity = createActivity(providers);
-        FacebookSdk.sdkInitialize(authMethodPickerActivity);
 
         Button facebookButton = (Button) authMethodPickerActivity.findViewById(R.id.facebook_button);
         assertNotNull(facebookButton);

File: auth/src/main/java/com/firebase/ui/auth/ui/phone/CountryListSpinner.java
Patch:
@@ -80,7 +80,7 @@ public void setSelectedForCountry(final Locale locale, String countryCode) {
         final String countryName = locale.getDisplayName();
         if (!TextUtils.isEmpty(countryName) && !TextUtils.isEmpty(countryCode)) {
             selectedCountryName = countryName;
-            setSpinnerText(Integer.valueOf(countryCode), locale);
+            setSpinnerText(Integer.parseInt(countryCode), locale);
         }
     }
 

File: auth/src/main/java/com/firebase/ui/auth/AuthUI.java
Patch:
@@ -451,7 +451,7 @@ public T setAvailableProviders(@NonNull List<IdpConfig> idpConfigs) {
                     mProviders.add(config);
                 }
 
-                if(config.getProviderId().equals(FACEBOOK_PROVIDER)) {
+                if (config.getProviderId().equals(FACEBOOK_PROVIDER)) {
                     try {
                         Class c = com.facebook.FacebookCallback.class;
                     } catch (NoClassDefFoundError e) {
@@ -461,7 +461,7 @@ public T setAvailableProviders(@NonNull List<IdpConfig> idpConfigs) {
                     }
                 }
 
-                if(config.getProviderId().equals(TWITTER_PROVIDER)) {
+                if (config.getProviderId().equals(TWITTER_PROVIDER)) {
                     try {
                         Class c = com.twitter.sdk.android.core.TwitterCore.class;
                     } catch (NoClassDefFoundError e) {

File: auth/src/main/java/com/firebase/ui/auth/ui/accountlink/WelcomeBackPasswordPrompt.java
Patch:
@@ -169,7 +169,8 @@ public void onSuccess(AuthResult authResult) {
                             authResult.getUser()
                                     .linkWithCredential(authCredential)
                                     .addOnFailureListener(new TaskFailureLogger(
-                                            TAG, "Error signing in with credential " + authCredential.getProvider()))
+                                            TAG, "Error signing in with credential " +
+                                            authCredential.getProvider()))
                                     .addOnSuccessListener(new OnSuccessListener<AuthResult>() {
                                         @Override
                                         public void onSuccess(AuthResult authResult) {

File: auth/src/main/java/com/firebase/ui/auth/ui/idp/AuthMethodPickerActivity.java
Patch:
@@ -152,7 +152,9 @@ public void onSuccess(final IdpResponse response) {
         mActivityHelper.getFirebaseAuth()
                 .signInWithCredential(credential)
                 .addOnFailureListener(
-                        new TaskFailureLogger(TAG, "Firebase sign in with credential " + credential.getProvider() + " unsuccessful. Visit https://console.firebase.google.com to enable it."))
+                        new TaskFailureLogger(TAG, "Firebase sign in with credential "
+                                + credential.getProvider() + " unsuccessful. " +
+                                "Visit https://console.firebase.google.com to enable it."))
                 .addOnCompleteListener(new CredentialSignInHandler(
                         this,
                         mActivityHelper,

File: auth/src/main/java/com/firebase/ui/auth/ui/phone/BucketedTextChangeListener.java
Patch:
@@ -122,4 +122,4 @@ interface ContentChangeCallback {
          */
         void whileIncomplete();
     }
-}
\ No newline at end of file
+}

File: auth/src/main/java/com/firebase/ui/auth/ui/phone/CompletableProgressDialog.java
Patch:
@@ -24,7 +24,7 @@
 
 import com.firebase.ui.auth.R;
 
-final public class CompletableProgressDialog extends ProgressDialog {
+public final class CompletableProgressDialog extends ProgressDialog {
     private ProgressBar mProgress;
     private TextView mMessageView;
     private CharSequence mMessage;
@@ -71,4 +71,4 @@ public void setMessage(CharSequence message) {
             mMessage = message;
         }
     }
-}
\ No newline at end of file
+}

File: auth/src/main/java/com/firebase/ui/auth/ui/phone/CountryListAdapter.java
Patch:
@@ -33,8 +33,8 @@
  * Array adapter used to display a list of countries with section indices.
  */
 final class CountryListAdapter extends ArrayAdapter<CountryInfo> implements SectionIndexer {
-    final private HashMap<String, Integer> alphaIndex = new LinkedHashMap<>();
-    final private HashMap<String, Integer> countryPosition = new LinkedHashMap<>();
+    private final HashMap<String, Integer> alphaIndex = new LinkedHashMap<>();
+    private final HashMap<String, Integer> countryPosition = new LinkedHashMap<>();
     private String[] sections;
 
     public CountryListAdapter(Context context) {
@@ -96,4 +96,4 @@ public int getPositionForCountry(String country) {
         final Integer position = countryPosition.get(country);
         return position == null ? 0 : position;
     }
-}
\ No newline at end of file
+}

File: auth/src/main/java/com/firebase/ui/auth/ui/phone/CountryListLoadTask.java
Patch:
@@ -28,7 +28,7 @@
 // We need to move away from ListView and AsyncTask in the future and use (say)
 // RecyclerView and Task/ThreadPoolExecutor .
 final class CountryListLoadTask extends AsyncTask<Void, Void, List<CountryInfo>> {
-    private final static int MAX_COUNTRIES = 291;
+    private static final int MAX_COUNTRIES = 291;
 
     private final Listener listener;
 

File: auth/src/main/java/com/firebase/ui/auth/ui/phone/CountryListSpinner.java
Patch:
@@ -182,4 +182,4 @@ public static void hideKeyboard(Context context, View view) {
             imm.hideSoftInputFromWindow(view.getWindowToken(), 0);
         }
     }
-}
\ No newline at end of file
+}

File: auth/src/main/java/com/firebase/ui/auth/ui/phone/SpacedEditText.java
Patch:
@@ -33,7 +33,7 @@
  * spaces using spannables.
  * This is required since Android's letter spacing is not available until API 21.
  */
-final public class SpacedEditText extends android.support.v7.widget.AppCompatEditText {
+public final class SpacedEditText extends android.support.v7.widget.AppCompatEditText {
     private float proportion;
     private SpannableStringBuilder originalText;
 
@@ -105,4 +105,4 @@ private SpannableStringBuilder getSpacedOutString(CharSequence text) {
     public Editable getUnspacedText() {
         return this.originalText;
     }
-}
\ No newline at end of file
+}

File: auth/src/main/java/com/firebase/ui/auth/ui/phone/VerifyPhoneNumberFragment.java
Patch:
@@ -143,7 +143,7 @@ public void onActivityResult(int requestCode, int resultCode, Intent data) {
                             PhoneNumberUtils
                                     .formatPhoneNumberUsingCurrentCountry(unformattedPhone,
                                                                           getContext());
-                    if(formattedPhone == null) {
+                    if (formattedPhone == null) {
                         Log.e(TAG, "Unable to normalize phone number from hint selector:"
                                 + unformattedPhone);
                         return;

File: auth/src/main/java/com/firebase/ui/auth/util/signincontainer/IdpSignInContainer.java
Patch:
@@ -133,7 +133,8 @@ public void onSuccess(final IdpResponse response) {
         mHelper.getFirebaseAuth()
                 .signInWithCredential(credential)
                 .addOnFailureListener(
-                        new TaskFailureLogger(TAG, "Failure authenticating with credential " + credential.getProvider()))
+                        new TaskFailureLogger(TAG, "Failure authenticating with credential " +
+                                credential.getProvider()))
                 .addOnCompleteListener(new CredentialSignInHandler(
                         getActivity(),
                         mHelper,

File: auth/src/main/java/com/firebase/ui/auth/util/signincontainer/SignInDelegate.java
Patch:
@@ -9,7 +9,7 @@
 import android.support.v4.app.Fragment;
 import android.support.v4.app.FragmentActivity;
 import android.support.v4.app.FragmentManager;
-import android.text.TextUtils   ;
+import android.text.TextUtils;
 import android.util.Log;
 
 import com.firebase.ui.auth.AuthUI;

File: auth/src/test/java/com/firebase/ui/auth/testhelpers/AutoCompleteTask.java
Patch:
@@ -121,7 +121,8 @@ public Task<TResult> addOnFailureListener(@NonNull Activity activity,
 
     @NonNull
     @Override
-    public <TContinuationResult> Task<TContinuationResult> continueWith(@NonNull Continuation<TResult, TContinuationResult> continuation) {
+    public <TContinuationResult> Task<TContinuationResult> continueWith(
+            @NonNull Continuation<TResult, TContinuationResult> continuation) {
         try {
             return Tasks.forResult(continuation.then(Tasks.forResult(mResult)));
         } catch (Exception e) {

File: auth/src/test/java/com/firebase/ui/auth/testhelpers/BaseHelperShadow.java
Patch:
@@ -40,7 +40,7 @@ public BaseHelperShadow() {
         if (sSaveSmartLock == null) {
             sSaveSmartLock = Mockito.mock(SaveSmartLock.class);
         }
-        if(sPhoneAuthProvider == null) {
+        if (sPhoneAuthProvider == null) {
             sPhoneAuthProvider = Mockito.mock(PhoneAuthProvider.class);
         }
     }

File: auth/src/test/java/com/firebase/ui/auth/ui/phone/CountryInfoTests.java
Patch:
@@ -108,4 +108,4 @@ public void testToString() throws Exception {
                 + " +" + usCountryInfo.countryCode;
         assertEquals(expected.toString(), usCountryInfo.toString());
     }
-}
\ No newline at end of file
+}

File: auth/src/test/java/com/firebase/ui/auth/ui/phone/PhoneNumberTest.java
Patch:
@@ -83,4 +83,4 @@ public void testIsCountryValid() throws Exception {
                 PhoneTestConstants.US_COUNTRY_CODE);
         assertTrue(PhoneNumber.isCountryValid(validPhoneNumber));
     }
-}
\ No newline at end of file
+}

File: auth/src/test/java/com/firebase/ui/auth/ui/phone/SpacedEditTextTest.java
Patch:
@@ -130,4 +130,4 @@ private void testSpacing(String expectedSpacedText, String expectedOriginalText,
         }
     }
 
-}
\ No newline at end of file
+}

File: auth/src/main/java/com/firebase/ui/auth/ui/idp/AuthMethodPickerActivity.java
Patch:
@@ -53,7 +53,8 @@
  * Presents the list of authentication options for this app to the user. If an
  * identity provider option is selected, a {@link CredentialSignInHandler}
  * is launched to manage the IDP-specific sign-in flow. If email authentication is chosen,
- * the {@link RegisterEmailActivity} is started.
+ * the {@link RegisterEmailActivity} is started. if phone authentication is chosen, the
+ * {@link com.firebase.ui.auth.ui.phone.PhoneVerificationActivity} is started.
  */
 @RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)
 public class AuthMethodPickerActivity extends AppCompatBase implements IdpCallback {

File: auth/src/main/java/com/firebase/ui/auth/ui/phone/CountryListLoadTask.java
Patch:
@@ -25,7 +25,6 @@
 import java.util.List;
 import java.util.Locale;
 
-
 // We need to move away from ListView and AsyncTask in the future and use (say)
 // RecyclerView and Task/ThreadPoolExecutor .
 final class CountryListLoadTask extends AsyncTask<Void, Void, List<CountryInfo>> {

File: auth/src/main/java/com/firebase/ui/auth/ui/phone/CountryListLoadTask.java
Patch:
@@ -18,12 +18,13 @@
 
 package com.firebase.ui.auth.ui.phone;
 
+import android.os.AsyncTask;
+
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 import java.util.Locale;
 
-import io.fabric.sdk.android.services.concurrency.AsyncTask;
 
 // We need to move away from ListView and AsyncTask in the future and use (say)
 // RecyclerView and Task/ThreadPoolExecutor .

File: auth/src/main/java/com/firebase/ui/auth/ui/phone/CountryListSpinner.java
Patch:
@@ -67,8 +67,9 @@ private void init() {
         dialogPopup = new DialogPopup(countryListAdapter);
         textFormat = "%1$s  +%2$d";
         selectedCountryName = "";
-        final Locale defaultLocale = Locale.US;
-        final int defaultCountryCode = 1;
+        final Locale defaultLocale = Locale.getDefault();
+        final int defaultCountryCode =
+                PhoneNumberUtils.getCountryCode(defaultLocale.getCountry());
 
         setSpinnerText(defaultCountryCode, defaultLocale);
     }

File: auth/src/test/java/com/firebase/ui/auth/testhelpers/TestHelper.java
Patch:
@@ -30,6 +30,7 @@
 import java.util.List;
 
 import static junit.framework.Assert.assertEquals;
+import static junit.framework.Assert.assertNull;
 import static org.mockito.Mockito.verify;
 
 public class TestHelper {

File: database/src/androidTest/java/com/firebase/ui/database/TestUtils.java
Patch:
@@ -74,10 +74,10 @@ public void onCancelled(DatabaseError error) {
         return listener;
     }
 
-    public static boolean isValuesEqual(ObservableSnapshotArray<?> array, int[] expected) {
+    public static boolean isValuesEqual(ObservableSnapshotArray<Integer> array, int[] expected) {
         if (array.size() != expected.length) return false;
         for (int i = 0; i < array.size(); i++) {
-            if (!array.get(i).getValue(Integer.class).equals(expected[i])) {
+            if (!array.getObject(i).equals(expected[i])) {
                 return false;
             }
         }

File: auth/src/main/java/com/firebase/ui/auth/ui/accountlink/WelcomeBackIdpPrompt.java
Patch:
@@ -30,7 +30,7 @@
 import com.firebase.ui.auth.IdpResponse;
 import com.firebase.ui.auth.R;
 import com.firebase.ui.auth.ResultCodes;
-import com.firebase.ui.auth.provider.AuthCredentialHelper;
+import com.firebase.ui.auth.provider.ProviderUtils;
 import com.firebase.ui.auth.provider.FacebookProvider;
 import com.firebase.ui.auth.provider.GoogleProvider;
 import com.firebase.ui.auth.provider.IdpProvider;
@@ -76,7 +76,7 @@ protected void onCreate(Bundle savedInstanceState) {
         setContentView(R.layout.welcome_back_idp_prompt_layout);
 
         IdpResponse newUserIdpResponse = IdpResponse.fromResultIntent(getIntent());
-        mPrevCredential = AuthCredentialHelper.getAuthCredential(newUserIdpResponse);
+        mPrevCredential = ProviderUtils.getAuthCredential(newUserIdpResponse);
 
         User oldUser = User.getUser(getIntent());
 
@@ -140,7 +140,7 @@ public void onSuccess(final IdpResponse idpResponse) {
             return; // do nothing
         }
 
-        AuthCredential newCredential = AuthCredentialHelper.getAuthCredential(idpResponse);
+        AuthCredential newCredential = ProviderUtils.getAuthCredential(idpResponse);
         if (newCredential == null) {
             Log.e(TAG, "No credential returned");
             finish(ResultCodes.CANCELED, IdpResponse.getErrorCodeIntent(ErrorCodes.UNKNOWN_ERROR));

File: auth/src/main/java/com/firebase/ui/auth/ui/accountlink/WelcomeBackPasswordPrompt.java
Patch:
@@ -35,7 +35,7 @@
 import com.firebase.ui.auth.IdpResponse;
 import com.firebase.ui.auth.R;
 import com.firebase.ui.auth.ResultCodes;
-import com.firebase.ui.auth.provider.AuthCredentialHelper;
+import com.firebase.ui.auth.provider.ProviderUtils;
 import com.firebase.ui.auth.ui.AppCompatBase;
 import com.firebase.ui.auth.ui.BaseHelper;
 import com.firebase.ui.auth.ui.ExtraConstants;
@@ -159,7 +159,7 @@ private void validateAndSignIn(final String email, final String password) {
                     @Override
                     public void onSuccess(AuthResult authResult) {
                         AuthCredential authCredential =
-                                AuthCredentialHelper.getAuthCredential(mIdpResponse);
+                                ProviderUtils.getAuthCredential(mIdpResponse);
 
                         // If authCredential is null, the user only has an email account.
                         // Otherwise, the user has an email account that we need to link to an idp.

File: auth/src/main/java/com/firebase/ui/auth/ui/idp/AuthMethodPickerActivity.java
Patch:
@@ -28,7 +28,7 @@
 import com.firebase.ui.auth.AuthUI.IdpConfig;
 import com.firebase.ui.auth.IdpResponse;
 import com.firebase.ui.auth.R;
-import com.firebase.ui.auth.provider.AuthCredentialHelper;
+import com.firebase.ui.auth.provider.ProviderUtils;
 import com.firebase.ui.auth.provider.EmailProvider;
 import com.firebase.ui.auth.provider.FacebookProvider;
 import com.firebase.ui.auth.provider.GoogleProvider;
@@ -141,7 +141,7 @@ public void onActivityResult(int requestCode, int resultCode, Intent data) {
 
     @Override
     public void onSuccess(final IdpResponse response) {
-        AuthCredential credential = AuthCredentialHelper.getAuthCredential(response);
+        AuthCredential credential = ProviderUtils.getAuthCredential(response);
         mActivityHelper.getFirebaseAuth()
                 .signInWithCredential(credential)
                 .addOnFailureListener(

File: auth/src/main/java/com/firebase/ui/auth/util/signincontainer/IdpSignInContainer.java
Patch:
@@ -27,7 +27,7 @@
 import com.firebase.ui.auth.ErrorCodes;
 import com.firebase.ui.auth.IdpResponse;
 import com.firebase.ui.auth.ResultCodes;
-import com.firebase.ui.auth.provider.AuthCredentialHelper;
+import com.firebase.ui.auth.provider.ProviderUtils;
 import com.firebase.ui.auth.provider.FacebookProvider;
 import com.firebase.ui.auth.provider.GoogleProvider;
 import com.firebase.ui.auth.provider.IdpProvider;
@@ -130,7 +130,7 @@ public void onSaveInstanceState(Bundle outState) {
 
     @Override
     public void onSuccess(final IdpResponse response) {
-        AuthCredential credential = AuthCredentialHelper.getAuthCredential(response);
+        AuthCredential credential = ProviderUtils.getAuthCredential(response);
         mHelper.getFirebaseAuth()
                 .signInWithCredential(credential)
                 .addOnFailureListener(

File: app/src/main/java/com/firebase/uidemo/auth/AuthUiActivity.java
Patch:
@@ -133,6 +133,7 @@ public void onCreate(Bundle savedInstanceState) {
         if (auth.getCurrentUser() != null) {
             startSignedInActivity(null);
             finish();
+            return;
         }
 
         if (!isGoogleConfigured()) {

File: auth/src/main/java/com/firebase/ui/auth/provider/GoogleProvider.java
Patch:
@@ -127,8 +127,9 @@ public void disconnect() {
     }
 
     private IdpResponse createIdpResponse(GoogleSignInAccount account) {
-        return new IdpResponse(
-                GoogleAuthProvider.PROVIDER_ID, account.getEmail(), account.getIdToken());
+        return new IdpResponse.Builder(GoogleAuthProvider.PROVIDER_ID, account.getEmail())
+                .setToken(account.getIdToken())
+                .build();
     }
 
     @Override

File: auth/src/main/java/com/firebase/ui/auth/ui/FlowParameters.java
Patch:
@@ -52,11 +52,9 @@ public class FlowParameters implements Parcelable {
 
     public final boolean allowNewEmailAccounts;
 
-    public final boolean isReauth;
-
     @Nullable
     public final String reauthReason;
-
+    public final boolean isReauth;
 
     public FlowParameters(
             @NonNull String appName,

File: auth/src/main/java/com/firebase/ui/auth/ui/User.java
Patch:
@@ -79,7 +79,7 @@ public void writeToParcel(@NonNull Parcel dest, int flags) {
         dest.writeParcelable(mPhotoUri, flags);
     }
 
-    public static final class Builder {
+    public static class Builder {
         private String mEmail;
         private String mName;
         private String mProvider;

File: auth/src/main/java/com/firebase/ui/auth/ui/accountlink/WelcomeBackIdpPrompt.java
Patch:
@@ -161,7 +161,7 @@ public void onSuccess(AuthResult result) {
                                                 TAG, "Error signing in with previous credential " + idpResponse.getProviderType()))
                                         .addOnCompleteListener(new FinishListener(idpResponse));
                             } else {
-                                finish(ResultCodes.OK, IdpResponse.getIntent(idpResponse));
+                                finish(ResultCodes.OK, idpResponse.toIntent());
                             }
                         }
                     })
@@ -200,7 +200,7 @@ private class FinishListener implements OnCompleteListener<AuthResult> {
         }
 
         public void onComplete(@NonNull Task task) {
-            finish(ResultCodes.OK, IdpResponse.getIntent(mIdpResponse));
+            finish(ResultCodes.OK, mIdpResponse.toIntent());
         }
     }
 }

File: auth/src/main/java/com/firebase/ui/auth/ui/accountlink/WelcomeBackPasswordPrompt.java
Patch:
@@ -168,7 +168,8 @@ public void onSuccess(AuthResult authResult) {
                                     mSaveSmartLock,
                                     authResult.getUser(),
                                     password,
-                                    new IdpResponse(EmailAuthProvider.PROVIDER_ID, email));
+                                    new IdpResponse.Builder(EmailAuthProvider.PROVIDER_ID, email)
+                                            .build());
                         } else {
                             authResult.getUser()
                                     .linkWithCredential(authCredential)

File: auth/src/main/java/com/firebase/ui/auth/ui/email/RegisterEmailActivity.java
Patch:
@@ -102,7 +102,7 @@ public void onExistingEmailUser(User user) {
                 WelcomeBackPasswordPrompt.createIntent(
                         this,
                         mActivityHelper.getFlowParams(),
-                        new IdpResponse(EmailAuthProvider.PROVIDER_ID, user.getEmail())),
+                        new IdpResponse.Builder(EmailAuthProvider.PROVIDER_ID, user.getEmail()).build()),
                 RC_SIGN_IN);
 
         setSlideAnimation();
@@ -115,7 +115,7 @@ public void onExistingIdpUser(User user) {
                 this,
                 mActivityHelper.getFlowParams(),
                 user,
-                new IdpResponse(EmailAuthProvider.PROVIDER_ID, user.getEmail()));
+                new IdpResponse.Builder(EmailAuthProvider.PROVIDER_ID, user.getEmail()).build());
         mActivityHelper.startActivityForResult(intent, RC_WELCOME_BACK_IDP);
 
         setSlideAnimation();

File: auth/src/main/java/com/firebase/ui/auth/ui/email/RegisterEmailFragment.java
Patch:
@@ -276,8 +276,8 @@ public void onComplete(@NonNull Task<Void> task) {
                                                 getActivity(),
                                                 user,
                                                 password,
-                                                new IdpResponse(EmailAuthProvider.PROVIDER_ID,
-                                                                email));
+                                                new IdpResponse.Builder(EmailAuthProvider.PROVIDER_ID, email)
+                                                        .build());
                                     }
                                 });
                     }

File: auth/src/main/java/com/firebase/ui/auth/util/signincontainer/SaveSmartLock.java
Patch:
@@ -184,7 +184,7 @@ public void onActivityResult(int requestCode, int resultCode, Intent data) {
     }
 
     private void finish() {
-        finish(ResultCodes.OK, IdpResponse.getIntent(mResponse));
+        finish(ResultCodes.OK, mResponse.toIntent());
     }
 
     /**

File: auth/src/test/java/com/firebase/ui/auth/testhelpers/TestConstants.java
Patch:
@@ -20,7 +20,7 @@ public class TestConstants {
     public static final String EMAIL = "test@example.com";
     public static final String PASSWORD = "hunter2";
     public static final String NAME = "Test Testerson";
-    public static final String PHOTO_URL = "http://example.com/profile.png";
-    public static final Uri PHOTO_URI = Uri.parse(PHOTO_URL);
+    public static final String TOKEN = "token";
     public static final String TOS_URL = "http://www.google.com";
+    public static final Uri PHOTO_URI = Uri.parse("http://example.com/profile.png");
 }

File: auth/src/main/java/com/firebase/ui/auth/provider/EmailProvider.java
Patch:
@@ -47,7 +47,7 @@ public void startLogin(Activity activity) {
 
     @Override
     public void onActivityResult(int requestCode, int resultCode, Intent data) {
-        if (resultCode == ResultCodes.OK) {
+        if (requestCode == RC_EMAIL_FLOW && resultCode == ResultCodes.OK) {
             mHelper.finishActivity(mActivity, ResultCodes.OK, data);
         }
     }

File: auth/src/main/java/com/firebase/ui/auth/provider/EmailProvider.java
Patch:
@@ -47,7 +47,7 @@ public void startLogin(Activity activity) {
 
     @Override
     public void onActivityResult(int requestCode, int resultCode, Intent data) {
-        if (resultCode == ResultCodes.OK) {
+        if (requestCode == RC_EMAIL_FLOW && resultCode == ResultCodes.OK) {
             mHelper.finishActivity(mActivity, ResultCodes.OK, data);
         }
     }

File: auth/src/main/java/com/firebase/ui/auth/ui/phone/CountryListSpinner.java
Patch:
@@ -158,6 +158,7 @@ public void show(final int selected) {
             dialog.setCanceledOnTouchOutside(true);
             final ListView listView = dialog.getListView();
             listView.setFastScrollEnabled(true);
+            listView.setScrollbarFadingEnabled(false);
             listView.postDelayed(new Runnable() {
                 @Override
                 public void run() {

File: auth/src/main/java/com/firebase/ui/auth/ui/phone/CountryListSpinner.java
Patch:
@@ -21,6 +21,7 @@
 import android.content.Context;
 import android.content.DialogInterface;
 import android.os.AsyncTask;
+import android.support.v7.widget.AppCompatEditText;
 import android.text.TextUtils;
 import android.util.AttributeSet;
 import android.view.View;
@@ -30,7 +31,7 @@
 import java.util.List;
 import java.util.Locale;
 
-final class CountryListSpinner extends android.support.v7.widget.AppCompatEditText implements
+public final class CountryListSpinner extends AppCompatEditText implements
         View.OnClickListener, CountryListLoadTask.Listener {
     private String textFormat;
     private DialogPopup dialogPopup;

File: auth/src/main/java/com/firebase/ui/auth/util/signincontainer/SignInDelegate.java
Patch:
@@ -388,7 +388,7 @@ private void redirectToIdpSignIn(String id, String accountType) {
         }
 
         if (PhoneNumberUtils.isGlobalPhoneNumber(id)
-                && accountType.equals(FIREBASE_PHONE_ACCOUNT_TYPE)) {
+                && (FIREBASE_PHONE_ACCOUNT_TYPE.equals(accountType) || accountType == null)) {
             startActivityForResult(
                     PhoneVerificationActivity.createIntent(
                             getContext(),

File: auth/src/main/java/com/firebase/ui/auth/util/signincontainer/SmartLockBase.java
Patch:
@@ -33,6 +33,8 @@ public abstract class SmartLockBase<R extends Result> extends FragmentBase imple
         ResultCallback<R>,
         GoogleApiClient.OnConnectionFailedListener {
     private static final String TAG = "SmartLockBase";
+    // The account type should not be changed and will result in abandonment of saved accounts
+    // on the client
     public static final String FIREBASE_PHONE_ACCOUNT_TYPE = "https://phone";
 
     protected GoogleApiClient mGoogleApiClient;

File: app/src/main/java/com/firebase/uidemo/auth/SignedInActivity.java
Patch:
@@ -117,7 +117,7 @@ public void onComplete(@NonNull Task<Void> task) {
     public void reauthenticate() {
         Intent reauthIntent = AuthUI.getInstance()
                 .createReauthIntentBuilder()
-                .setProviders(mSignedInConfig.providerInfo)
+                .setAvailableProviders(mSignedInConfig.providerInfo)
                 .setIsSmartLockEnabled(mSignedInConfig.isSmartLockEnabled)
                 .setLogo(mSignedInConfig.logo)
                 .setTheme(mSignedInConfig.theme)

File: auth/src/main/java/com/firebase/ui/auth/ui/idp/AuthMethodPickerActivity.java
Patch:
@@ -114,7 +114,9 @@ private void populateIdpList(List<IdpConfig> providers) {
             loginButton.setOnClickListener(new View.OnClickListener() {
                 @Override
                 public void onClick(View view) {
-                    mActivityHelper.showLoadingDialog(R.string.progress_dialog_loading);
+                    if (provider instanceof IdpProvider) {
+                        mActivityHelper.showLoadingDialog(R.string.progress_dialog_loading);
+                    }
                     provider.startLogin(AuthMethodPickerActivity.this);
                 }
             });

File: app/src/main/java/com/firebase/uidemo/auth/SignedInActivity.java
Patch:
@@ -117,7 +117,7 @@ public void onComplete(@NonNull Task<Void> task) {
     public void reauthenticate() {
         Intent reauthIntent = AuthUI.getInstance()
                 .createReauthIntentBuilder()
-                .setProviders(mSignedInConfig.providerInfo)
+                .setAvailableProviders(mSignedInConfig.providerInfo)
                 .setIsSmartLockEnabled(mSignedInConfig.isSmartLockEnabled)
                 .setLogo(mSignedInConfig.logo)
                 .setTheme(mSignedInConfig.theme)

File: auth/src/main/java/com/firebase/ui/auth/ui/idp/AuthMethodPickerActivity.java
Patch:
@@ -140,7 +140,7 @@ public void onClick(View view) {
                     }
                 });
                 provider.setAuthenticationCallback(this);
-                btnHolder.addView(loginButton, 0);
+                btnHolder.addView(loginButton, btnHolder.getChildCount() - 1);
             }
         }
     }

File: auth/src/main/java/com/firebase/ui/auth/ui/TaskFailureLogger.java
Patch:
@@ -23,7 +23,7 @@ public class TaskFailureLogger implements OnFailureListener {
     private String mTag;
     private String mMessage;
 
-    public TaskFailureLogger(String tag, String message) {
+    public TaskFailureLogger(@NonNull String tag, @NonNull String message) {
         mTag = tag;
         mMessage = message;
     }

File: auth/src/main/java/com/firebase/ui/auth/util/signincontainer/SaveSmartLock.java
Patch:
@@ -145,7 +145,7 @@ public void onResult(@NonNull Status status) {
                     finish();
                 }
             } else {
-                Log.w(TAG, status.getStatusMessage());
+                Log.w(TAG, "Status message:\n" + status.getStatusMessage());
                 finish();
             }
         }

File: auth/src/main/java/com/firebase/ui/auth/util/signincontainer/SignInDelegate.java
Patch:
@@ -377,7 +377,7 @@ private void redirectToIdpSignIn(String email, String accountType) {
                             .setProvider(accountTypeToProviderId(accountType))
                             .build());
         } else {
-            Log.w(TAG, "unknown provider: " + accountType);
+            Log.w(TAG, "Unknown provider: " + accountType);
             startActivityForResult(
                     AuthMethodPickerActivity.createIntent(
                             getContext(),

File: auth/src/main/java/com/firebase/ui/auth/ui/TaskFailureLogger.java
Patch:
@@ -23,7 +23,7 @@ public class TaskFailureLogger implements OnFailureListener {
     private String mTag;
     private String mMessage;
 
-    public TaskFailureLogger(String tag, String message) {
+    public TaskFailureLogger(@NonNull String tag, @NonNull String message) {
         mTag = tag;
         mMessage = message;
     }

File: auth/src/main/java/com/firebase/ui/auth/util/signincontainer/SaveSmartLock.java
Patch:
@@ -145,7 +145,7 @@ public void onResult(@NonNull Status status) {
                     finish();
                 }
             } else {
-                Log.w(TAG, status.getStatusMessage());
+                Log.w(TAG, "Status message:\n" + status.getStatusMessage());
                 finish();
             }
         }

File: auth/src/main/java/com/firebase/ui/auth/util/signincontainer/SignInDelegate.java
Patch:
@@ -377,7 +377,7 @@ private void redirectToIdpSignIn(String email, String accountType) {
                             .setProvider(accountTypeToProviderId(accountType))
                             .build());
         } else {
-            Log.w(TAG, "unknown provider: " + accountType);
+            Log.w(TAG, "Unknown provider: " + accountType);
             startActivityForResult(
                     AuthMethodPickerActivity.createIntent(
                             getContext(),

File: auth/src/main/java/com/firebase/ui/auth/ui/accountlink/WelcomeBackPasswordPrompt.java
Patch:
@@ -173,8 +173,7 @@ public void onSuccess(AuthResult authResult) {
                             authResult.getUser()
                                     .linkWithCredential(authCredential)
                                     .addOnFailureListener(new TaskFailureLogger(
-                                            TAG,
-                                            "Error signing in with credential " + authCredential.getProvider()))
+                                            TAG, "Error signing in with credential " + authCredential.getProvider()))
                                     .addOnSuccessListener(new OnSuccessListener<AuthResult>() {
                                         @Override
                                         public void onSuccess(AuthResult authResult) {

File: auth/src/main/java/com/firebase/ui/auth/util/signincontainer/SignInDelegate.java
Patch:
@@ -158,7 +158,7 @@ public void onResult(@NonNull CredentialRequestResult result) {
                     Log.e(TAG, "Failed to send Credentials intent.", e);
                 }
             } else {
-                Log.e(TAG, status.getStatusMessage());
+                Log.e(TAG, "Status message:\n" + status.getStatusMessage());
             }
         }
         startAuthMethodChoice();

File: database/src/main/java/com/firebase/ui/database/FirebaseArray.java
Patch:
@@ -120,17 +120,17 @@ public void setOnChangedListener(OnChangedListener listener) {
         mListener = listener;
     }
 
-    protected void notifyChangedListeners(OnChangedListener.EventType type, int index) {
+    void notifyChangedListeners(OnChangedListener.EventType type, int index) {
         notifyChangedListeners(type, index, -1);
     }
 
-    protected void notifyChangedListeners(OnChangedListener.EventType type, int index, int oldIndex) {
+    void notifyChangedListeners(OnChangedListener.EventType type, int index, int oldIndex) {
         if (mListener != null) {
             mListener.onChildChanged(type, index, oldIndex);
         }
     }
 
-    protected void notifyCancelledListeners(DatabaseError databaseError) {
+    void notifyCancelledListeners(DatabaseError databaseError) {
         if (mListener != null) {
             mListener.onCancelled(databaseError);
         }

File: auth/src/main/java/com/firebase/ui/auth/provider/GoogleProvider.java
Patch:
@@ -29,7 +29,7 @@
 import com.firebase.ui.auth.AuthUI.IdpConfig;
 import com.firebase.ui.auth.IdpResponse;
 import com.firebase.ui.auth.R;
-import com.firebase.ui.auth.util.GoogleApiConstants;
+import com.firebase.ui.auth.util.GoogleApiHelper;
 import com.google.android.gms.auth.api.Auth;
 import com.google.android.gms.auth.api.signin.GoogleSignInAccount;
 import com.google.android.gms.auth.api.signin.GoogleSignInOptions;
@@ -80,7 +80,7 @@ public GoogleProvider(FragmentActivity activity, IdpConfig idpConfig, @Nullable
         }
 
         mGoogleApiClient = new GoogleApiClient.Builder(activity)
-                .enableAutoManage(activity, GoogleApiConstants.AUTO_MANAGE_ID0, this)
+                .enableAutoManage(activity, GoogleApiHelper.getSafeAutoManageId(), this)
                 .addApi(Auth.GOOGLE_SIGN_IN_API, builder.build())
                 .build();
     }

File: auth/src/main/java/com/firebase/ui/auth/ui/email/CheckEmailFragment.java
Patch:
@@ -23,7 +23,7 @@
 import com.firebase.ui.auth.ui.TaskFailureLogger;
 import com.firebase.ui.auth.ui.User;
 import com.firebase.ui.auth.ui.email.fieldvalidators.EmailFieldValidator;
-import com.firebase.ui.auth.util.GoogleApiConstants;
+import com.firebase.ui.auth.util.GoogleApiHelper;
 import com.google.android.gms.auth.api.Auth;
 import com.google.android.gms.auth.api.credentials.Credential;
 import com.google.android.gms.auth.api.credentials.CredentialPickerConfig;
@@ -234,7 +234,7 @@ private void showEmailAutoCompleteHint() {
     private PendingIntent getEmailHintIntent() {
         GoogleApiClient client = new GoogleApiClient.Builder(getContext())
                 .addApi(Auth.CREDENTIALS_API)
-                .enableAutoManage(getActivity(), GoogleApiConstants.AUTO_MANAGE_ID3,
+                .enableAutoManage(getActivity(), GoogleApiHelper.getSafeAutoManageId(),
                                   new GoogleApiClient.OnConnectionFailedListener() {
                                       @Override
                                       public void onConnectionFailed(@NonNull ConnectionResult connectionResult) {

File: auth/src/main/java/com/firebase/ui/auth/util/GoogleApiClientTaskHelper.java
Patch:
@@ -33,6 +33,7 @@
  * {@link com.google.android.gms.common.api.GoogleApiClient} instance, which manages a single
  * instance per activity.
  */
+@Deprecated
 public class GoogleApiClientTaskHelper {
 
     private static final IdentityHashMap<Activity, GoogleApiClientTaskHelper> INSTANCES

File: auth/src/main/java/com/firebase/ui/auth/util/signincontainer/SaveSmartLock.java
Patch:
@@ -34,7 +34,7 @@
 import com.firebase.ui.auth.ResultCodes;
 import com.firebase.ui.auth.ui.FlowParameters;
 import com.firebase.ui.auth.ui.FragmentHelper;
-import com.firebase.ui.auth.util.GoogleApiConstants;
+import com.firebase.ui.auth.util.GoogleApiHelper;
 import com.firebase.ui.auth.util.PlayServicesHelper;
 import com.google.android.gms.auth.api.Auth;
 import com.google.android.gms.auth.api.credentials.Credential;
@@ -209,7 +209,7 @@ public void saveCredentialsOrFinish(FirebaseUser firebaseUser,
                 .addConnectionCallbacks(this)
                 .addOnConnectionFailedListener(this)
                 .addApi(Auth.CREDENTIALS_API)
-                .enableAutoManage(getActivity(), GoogleApiConstants.AUTO_MANAGE_ID2, this)
+                .enableAutoManage(getActivity(), GoogleApiHelper.getSafeAutoManageId(), this)
                 .build();
         mGoogleApiClient.connect();
     }

File: auth/src/main/java/com/firebase/ui/auth/ui/ActivityHelper.java
Patch:
@@ -20,6 +20,7 @@
 import android.support.annotation.RestrictTo;
 
 import com.firebase.ui.auth.IdpResponse;
+import com.firebase.ui.auth.R;
 import com.firebase.ui.auth.util.signincontainer.SaveSmartLock;
 import com.google.firebase.auth.FirebaseUser;
 
@@ -33,6 +34,7 @@ public ActivityHelper(HelperActivityBase activity, Intent intent) {
     }
 
     public void configureTheme() {
+        mActivity.setTheme(R.style.FirebaseUI); // Provides default values
         mActivity.setTheme(getFlowParams().themeId);
     }
 

File: auth/src/main/java/com/firebase/ui/auth/ui/ActivityHelper.java
Patch:
@@ -20,6 +20,7 @@
 import android.support.annotation.RestrictTo;
 
 import com.firebase.ui.auth.IdpResponse;
+import com.firebase.ui.auth.R;
 import com.firebase.ui.auth.util.signincontainer.SaveSmartLock;
 import com.google.firebase.auth.FirebaseUser;
 
@@ -33,6 +34,7 @@ public ActivityHelper(HelperActivityBase activity, Intent intent) {
     }
 
     public void configureTheme() {
+        mActivity.setTheme(R.style.FirebaseUI); // Provides default values
         mActivity.setTheme(getFlowParams().themeId);
     }
 

File: auth/src/main/java/com/firebase/ui/auth/ui/accountlink/WelcomeBackIdpPrompt.java
Patch:
@@ -113,9 +113,7 @@ public void onClick(View view) {
     }
 
     private String getIdpPromptString(String email) {
-        return  getResources().getString(R.string.welcome_back_idp_prompt,
-                                         email,
-                                         mIdpProvider.getName(this));
+        return getString(R.string.welcome_back_idp_prompt, email, mIdpProvider.getName(this));
     }
 
     @Override

File: auth/src/main/java/com/firebase/ui/auth/ui/accountlink/WelcomeBackPasswordPrompt.java
Patch:
@@ -79,7 +79,7 @@ protected void onCreate(Bundle savedInstanceState) {
         mPasswordField = (EditText) findViewById(R.id.password);
 
         // Create welcome back text with email bolded
-        String bodyText = getResources().getString(R.string.welcome_back_password_prompt_body, mEmail);
+        String bodyText = getString(R.string.welcome_back_password_prompt_body, mEmail);
         SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder(bodyText);
         int emailStart = bodyText.indexOf(mEmail);
         spannableStringBuilder.setSpan(new StyleSpan(Typeface.BOLD),

File: auth/src/main/java/com/firebase/ui/auth/ui/email/RecoveryEmailSentDialog.java
Patch:
@@ -20,7 +20,7 @@ public class RecoveryEmailSentDialog extends DialogBase {
     @Override
     public Dialog onCreateDialog(Bundle savedInstanceState) {
         return new AlertDialog.Builder(getContext(), R.style.FirebaseUI_Dialog)
-                .setTitle(R.string.title_confirm_recover_password_activity)
+                .setTitle(R.string.title_confirm_recover_password)
                 .setMessage(getString(R.string.confirm_recovery_body,
                                       getArguments().getString(ExtraConstants.EXTRA_EMAIL)))
                 .setOnDismissListener(new DialogInterface.OnDismissListener() {

File: auth/src/main/java/com/firebase/ui/auth/ui/email/fieldvalidators/EmailFieldValidator.java
Patch:
@@ -23,8 +23,7 @@ public class EmailFieldValidator extends BaseValidator {
 
     public EmailFieldValidator(TextInputLayout errorContainer) {
         super(errorContainer);
-        mErrorMessage = mErrorContainer.getContext().getResources().getString(
-                R.string.invalid_email_address);
+        mErrorMessage = mErrorContainer.getResources().getString(R.string.invalid_email_address);
         mEmptyMessage = mErrorContainer.getResources().getString(R.string.missing_email_address);
     }
 

File: auth/src/main/java/com/firebase/ui/auth/ui/email/fieldvalidators/PasswordFieldValidator.java
Patch:
@@ -25,7 +25,7 @@ public PasswordFieldValidator(TextInputLayout errorContainer, int minLength) {
         super(errorContainer);
         mMinLength = minLength;
         mErrorMessage = mErrorContainer.getResources()
-                .getQuantityString(R.plurals.password_length, minLength, mMinLength);
+                .getQuantityString(R.plurals.error_weak_password, mMinLength, mMinLength);
     }
 
     @Override

File: auth/src/main/java/com/firebase/ui/auth/ui/email/fieldvalidators/RequiredFieldValidator.java
Patch:
@@ -21,7 +21,7 @@
 public class RequiredFieldValidator extends BaseValidator {
     public RequiredFieldValidator(TextInputLayout errorContainer) {
         super(errorContainer);
-        mErrorMessage = mErrorContainer.getContext().getResources().getString(R.string.required_field);
+        mErrorMessage = mErrorContainer.getResources().getString(R.string.required_field);
     }
 
     @Override

File: auth/src/test/java/com/firebase/ui/auth/ui/email/RegisterEmailActivityTest.java
Patch:
@@ -93,7 +93,7 @@ public void testSignUpButton_validatesFields() {
         assertEquals(
                 String.format(
                         registerEmailActivity.getResources().getQuantityString(
-                                R.plurals.password_length,
+                                R.plurals.error_weak_password,
                                 R.integer.min_password_length),
                         registerEmailActivity.getResources()
                                 .getInteger(R.integer.min_password_length)

File: auth/src/test/java/com/firebase/ui/auth/ui/idp/CredentialSignInHandlerTest.java
Patch:
@@ -32,7 +32,6 @@
 import com.firebase.ui.auth.ui.User;
 import com.firebase.ui.auth.ui.accountlink.WelcomeBackIdpPrompt;
 import com.firebase.ui.auth.ui.accountlink.WelcomeBackPasswordPrompt;
-import com.firebase.ui.auth.util.PlayServicesHelper;
 import com.firebase.ui.auth.util.signincontainer.SaveSmartLock;
 import com.google.android.gms.tasks.Task;
 import com.google.android.gms.tasks.Tasks;
@@ -71,7 +70,6 @@ public class CredentialSignInHandlerTest {
     public void setUp() {
         MockitoAnnotations.initMocks(this);
         TestHelper.initializeApp(RuntimeEnvironment.application);
-        PlayServicesHelper.sApiAvailability = TestHelper.makeMockGoogleApiAvailability();
     }
 
     @Test

File: auth/src/main/java/com/firebase/ui/auth/ui/ExtraConstants.java
Patch:
@@ -20,6 +20,7 @@
 public class ExtraConstants {
     public static final String EXTRA_EMAIL = "extra_email";
     public static final String EXTRA_NAME = "extra_name";
+    public static final String EXTRA_USER = "extra_user";
     public static final String EXTRA_ERROR_MESSAGE = "extra_error_msg";
     public static final String EXTRA_FLOW_PARAMS = "extra_flow_params";
     public static final String EXTRA_IDP_RESPONSE = "extra_idp_response";

File: auth/src/main/java/com/firebase/ui/auth/provider/FacebookProvider.java
Patch:
@@ -113,7 +113,9 @@ public void setAuthenticationCallback(IdpCallback callback) {
 
     @Override
     public void onActivityResult(int requestCode, int resultCode, Intent data) {
-        sCallbackManager.onActivityResult(requestCode, resultCode, data);
+        if (sCallbackManager != null) {
+            sCallbackManager.onActivityResult(requestCode, resultCode, data);
+        }
     }
 
     @Override

File: auth/src/main/java/com/firebase/ui/auth/provider/FacebookProvider.java
Patch:
@@ -113,7 +113,9 @@ public void setAuthenticationCallback(IdpCallback callback) {
 
     @Override
     public void onActivityResult(int requestCode, int resultCode, Intent data) {
-        sCallbackManager.onActivityResult(requestCode, resultCode, data);
+        if (sCallbackManager != null) {
+            sCallbackManager.onActivityResult(requestCode, resultCode, data);
+        }
     }
 
     @Override

File: auth/src/main/java/com/firebase/ui/auth/ui/email/CheckEmailFragment.java
Patch:
@@ -122,9 +122,10 @@ public void onActivityCreated(@Nullable Bundle savedInstanceState) {
         // Check for email
         String email = getArguments().getString(ExtraConstants.EXTRA_EMAIL);
         if (!TextUtils.isEmpty(email)) {
+            // Use email passed in
             mEmailEditText.setText(email);
             validateAndProceed();
-        } if (mHelper.getFlowParams().smartLockEnabled) {
+        } else if (mHelper.getFlowParams().smartLockEnabled) {
             // Try SmartLock email autocomplete hint
             showEmailAutoCompleteHint();
         }

File: app/src/main/java/com/firebase/uidemo/database/ChatActivity.java
Patch:
@@ -77,7 +77,7 @@ public void onClick(View v) {
                 String uid = mAuth.getCurrentUser().getUid();
                 String name = "User " + uid.substring(0, 6);
 
-                Chat chat = new Chat(name, uid, mMessageEdit.getText().toString());
+                Chat chat = new Chat(name, mMessageEdit.getText().toString(), uid);
                 mChatRef.push().setValue(chat, new DatabaseReference.CompletionListener() {
                     @Override
                     public void onComplete(DatabaseError databaseError, DatabaseReference reference) {

File: auth/src/main/java/com/firebase/ui/auth/provider/GoogleProvider.java
Patch:
@@ -111,7 +111,7 @@ public void disconnect() {
         }
     }
 
-    private IdpResponse createIDPResponse(GoogleSignInAccount account) {
+    private IdpResponse createIdpResponse(GoogleSignInAccount account) {
         return new IdpResponse(
                 GoogleAuthProvider.PROVIDER_ID, account.getEmail(), account.getIdToken());
     }
@@ -122,7 +122,7 @@ public void onActivityResult(int requestCode, int resultCode, Intent data) {
             GoogleSignInResult result = Auth.GoogleSignInApi.getSignInResultFromIntent(data);
             if (result != null) {
                 if (result.isSuccess()) {
-                    mIDPCallback.onSuccess(createIDPResponse(result.getSignInAccount()));
+                    mIDPCallback.onSuccess(createIdpResponse(result.getSignInAccount()));
                 } else {
                     onError(result);
                 }

File: app/src/main/java/com/firebase/uidemo/database/ChatActivity.java
Patch:
@@ -77,7 +77,7 @@ public void onClick(View v) {
                 String uid = mAuth.getCurrentUser().getUid();
                 String name = "User " + uid.substring(0, 6);
 
-                Chat chat = new Chat(name, uid, mMessageEdit.getText().toString());
+                Chat chat = new Chat(name, mMessageEdit.getText().toString(), uid);
                 mChatRef.push().setValue(chat, new DatabaseReference.CompletionListener() {
                     @Override
                     public void onComplete(DatabaseError databaseError, DatabaseReference reference) {

File: auth/src/main/java/com/firebase/ui/auth/ui/BaseHelper.java
Patch:
@@ -10,14 +10,14 @@
 import android.support.v4.app.FragmentActivity;
 
 import com.firebase.ui.auth.IdpResponse;
+import com.firebase.ui.auth.ResultCodes;
 import com.firebase.ui.auth.util.signincontainer.SaveSmartLock;
 import com.google.android.gms.auth.api.Auth;
 import com.google.android.gms.auth.api.credentials.CredentialsApi;
 import com.google.firebase.FirebaseApp;
 import com.google.firebase.auth.FirebaseAuth;
 import com.google.firebase.auth.FirebaseUser;
 
-import static android.app.Activity.RESULT_OK;
 import static com.firebase.ui.auth.util.Preconditions.checkNotNull;
 
 public class BaseHelper {
@@ -111,9 +111,9 @@ public void saveCredentialsOrFinish(
             Activity activity,
             FirebaseUser firebaseUser,
             @Nullable String password,
-            @Nullable IdpResponse response) {
+            IdpResponse response) {
         if (saveSmartLock == null) {
-            finishActivity(activity, RESULT_OK, new Intent());
+            finishActivity(activity, ResultCodes.OK, new Intent());
         } else {
             saveSmartLock.saveCredentialsOrFinish(
                     firebaseUser,

File: auth/src/main/java/com/firebase/ui/auth/ui/email/RecoveryEmailSentDialog.java
Patch:
@@ -1,6 +1,5 @@
 package com.firebase.ui.auth.ui.email;
 
-import android.app.Activity;
 import android.app.Dialog;
 import android.content.DialogInterface;
 import android.content.Intent;
@@ -10,6 +9,7 @@
 import android.support.v7.app.AlertDialog;
 
 import com.firebase.ui.auth.R;
+import com.firebase.ui.auth.ResultCodes;
 import com.firebase.ui.auth.ui.BaseDialog;
 import com.firebase.ui.auth.ui.ExtraConstants;
 
@@ -26,7 +26,7 @@ public Dialog onCreateDialog(Bundle savedInstanceState) {
                 .setOnDismissListener(new DialogInterface.OnDismissListener() {
                     @Override
                     public void onDismiss(DialogInterface anInterface) {
-                        finish(Activity.RESULT_OK, new Intent());
+                        finish(ResultCodes.OK, new Intent());
                     }
                 })
                 .setPositiveButton(android.R.string.ok, null)

File: auth/src/main/java/com/firebase/ui/auth/ui/idp/AuthMethodPickerActivity.java
Patch:
@@ -28,6 +28,7 @@
 import com.firebase.ui.auth.BuildConfig;
 import com.firebase.ui.auth.IdpResponse;
 import com.firebase.ui.auth.R;
+import com.firebase.ui.auth.ResultCodes;
 import com.firebase.ui.auth.provider.AuthCredentialHelper;
 import com.firebase.ui.auth.provider.FacebookProvider;
 import com.firebase.ui.auth.provider.GoogleProvider;
@@ -146,8 +147,8 @@ public void onClick(View view) {
     public void onActivityResult(int requestCode, int resultCode, Intent data) {
         super.onActivityResult(requestCode, resultCode, data);
         if (requestCode == RC_EMAIL_FLOW) {
-            if (resultCode == RESULT_OK) {
-                finish(RESULT_OK, data);
+            if (resultCode == ResultCodes.OK) {
+                finish(ResultCodes.OK, data);
             }
         } else if (requestCode == RC_ACCOUNT_LINK) {
             finish(resultCode, data);

File: auth/src/test/java/com/firebase/ui/auth/ui/email/SignInActivityTest.java
Patch:
@@ -31,6 +31,7 @@
 import com.firebase.ui.auth.testhelpers.TestHelper;
 import com.firebase.ui.auth.util.PlayServicesHelper;
 import com.google.firebase.auth.AuthResult;
+import com.google.firebase.auth.EmailAuthProvider;
 import com.google.firebase.auth.FirebaseUser;
 
 import org.junit.Before;
@@ -127,6 +128,6 @@ public void testSignInButton_signsInAndSavesCredentials() {
                 TestConstants.EMAIL,
                 TestConstants.PASSWORD);
 
-        verifySmartLockSave(null, TestConstants.EMAIL, TestConstants.PASSWORD);
+        verifySmartLockSave(EmailAuthProvider.PROVIDER_ID, TestConstants.EMAIL, TestConstants.PASSWORD);
     }
 }

File: auth/src/main/java/com/firebase/ui/auth/AuthUI.java
Patch:
@@ -390,7 +390,7 @@ public static AuthUI getInstance() {
     }
 
     /**
-     * Retrieves the {@link AuthUI} instance associated  the the specified app.
+     * Retrieves the {@link AuthUI} instance associated the the specified app.
      */
     public static AuthUI getInstance(FirebaseApp app) {
         AuthUI authUi;

File: auth/src/main/java/com/firebase/ui/auth/package-info.java
Patch:
@@ -16,4 +16,4 @@
  * The Firebase AuthUI library. See the {@link com.firebase.ui.auth.AuthUI} entry class
  * for information on using the library to manage signed-in user state.
  */
-package com.firebase.ui.auth;
\ No newline at end of file
+package com.firebase.ui.auth;

File: auth/src/main/java/com/firebase/ui/auth/provider/GoogleProvider.java
Patch:
@@ -42,10 +42,10 @@
 
 public class GoogleProvider implements
         IdpProvider, OnClickListener, GoogleApiClient.OnConnectionFailedListener {
-
     private static final String TAG = "GoogleProvider";
     private static final int RC_SIGN_IN = 20;
     private static final String ERROR_KEY = "error";
+
     private GoogleApiClient mGoogleApiClient;
     private Activity mActivity;
     private IdpCallback mIDPCallback;
@@ -140,7 +140,7 @@ public void startLogin(Activity activity) {
 
     private void onError(GoogleSignInResult result) {
         String errorMessage = result.getStatus().getStatusMessage();
-        onError(String.valueOf(result.getStatus().getStatusCode()) + " " + errorMessage);
+        onError(result.getStatus().getStatusCode() + " " + errorMessage);
     }
 
     private void onError(String errorMessage) {

File: auth/src/main/java/com/firebase/ui/auth/provider/package-info.java
Patch:
@@ -16,4 +16,4 @@
  * IDP-specific interactions for signing in users. The contents of this package should
  * be considered an implementation detail and not part of the main API.
  */
-package com.firebase.ui.auth.provider;
\ No newline at end of file
+package com.firebase.ui.auth.provider;

File: auth/src/main/java/com/firebase/ui/auth/ui/AppCompatBase.java
Patch:
@@ -18,6 +18,7 @@
 import android.os.Bundle;
 import android.support.v7.app.AppCompatActivity;
 
+@SuppressWarnings("Registered")
 public class AppCompatBase extends AppCompatActivity {
     protected ActivityHelper mActivityHelper;
 

File: auth/src/main/java/com/firebase/ui/auth/ui/FlowParameters.java
Patch:
@@ -23,7 +23,6 @@
 import com.firebase.ui.auth.AuthUI.IdpConfig;
 import com.firebase.ui.auth.util.Preconditions;
 
-import java.util.ArrayList;
 import java.util.List;
 
 /**
@@ -88,7 +87,7 @@ public FlowParameters createFromParcel(Parcel in) {
             int logoId = in.readInt();
             String termsOfServiceUrl = in.readString();
             int smartLockEnabledInt = in.readInt();
-            boolean smartLockEnabled = (smartLockEnabledInt != 0);
+            boolean smartLockEnabled = smartLockEnabledInt != 0;
 
             return new FlowParameters(
                     appName,

File: auth/src/main/java/com/firebase/ui/auth/ui/ResultCodes.java
Patch:
@@ -7,8 +7,8 @@
  * {@code startActivityForResult}.
  */
 public class ResultCodes {
-
-    /** Sign in failed due to lack of network connection **/
+    /**
+     * Sign in failed due to lack of network connection
+     **/
     public static final int RESULT_NO_NETWORK = 10;
-
 }

File: auth/src/main/java/com/firebase/ui/auth/ui/accountlink/WelcomeBackIdpPrompt.java
Patch:
@@ -12,7 +12,7 @@
  * limitations under the License.
  */
 
-package com.firebase.ui.auth.ui.account_link;
+package com.firebase.ui.auth.ui.accountlink;
 
 import android.app.Activity;
 import android.content.Context;
@@ -94,7 +94,8 @@ protected void onCreate(Bundle savedInstanceState) {
         if (mIdpProvider == null) {
             getIntent().putExtra(
                     ExtraConstants.EXTRA_ERROR_MESSAGE,
-                    "Firebase login successful. Account linking failed due to provider not enabled by application");
+                    "Firebase login successful." +
+                            " Account linking failed due to provider not enabled by application");
             finish(RESULT_CANCELED, getIntent());
             return;
         }

File: auth/src/main/java/com/firebase/ui/auth/ui/accountlink/WelcomeBackPasswordPrompt.java
Patch:
@@ -12,7 +12,7 @@
  * limitations under the License.
  */
 
-package com.firebase.ui.auth.ui.account_link;
+package com.firebase.ui.auth.ui.accountlink;
 
 import android.content.Context;
 import android.content.Intent;
@@ -105,8 +105,6 @@ public void onClick(View view) {
     }
 
     private void next(final String email, final String password) {
-        final FirebaseAuth firebaseAuth = mActivityHelper.getFirebaseAuth();
-
         // Check for null or empty password
         if (TextUtils.isEmpty(password)) {
             mPasswordField.setError(getString(R.string.required_field));
@@ -115,6 +113,7 @@ private void next(final String email, final String password) {
             mPasswordField.setError(null);
         }
 
+        final FirebaseAuth firebaseAuth = mActivityHelper.getFirebaseAuth();
         // Sign in with known email and the password provided
         firebaseAuth.signInWithEmailAndPassword(email, password)
                 .addOnFailureListener(

File: auth/src/main/java/com/firebase/ui/auth/ui/accountlink/package-info.java
Patch:
@@ -15,4 +15,4 @@
 /**
  * Activities related to linking a new authentication method to an existing account.
  */
-package com.firebase.ui.auth.ui.account_link;
\ No newline at end of file
+package com.firebase.ui.auth.ui.accountlink;

File: auth/src/main/java/com/firebase/ui/auth/ui/email/RecoverPasswordActivity.java
Patch:
@@ -28,7 +28,7 @@
 import com.firebase.ui.auth.ui.ExtraConstants;
 import com.firebase.ui.auth.ui.FlowParameters;
 import com.firebase.ui.auth.ui.TaskFailureLogger;
-import com.firebase.ui.auth.ui.email.field_validators.EmailFieldValidator;
+import com.firebase.ui.auth.ui.email.fieldvalidators.EmailFieldValidator;
 import com.google.android.gms.tasks.OnFailureListener;
 import com.google.android.gms.tasks.OnSuccessListener;
 import com.google.firebase.auth.FirebaseAuth;

File: auth/src/main/java/com/firebase/ui/auth/ui/email/SignInActivity.java
Patch:
@@ -31,8 +31,8 @@
 import com.firebase.ui.auth.ui.ExtraConstants;
 import com.firebase.ui.auth.ui.FlowParameters;
 import com.firebase.ui.auth.ui.TaskFailureLogger;
-import com.firebase.ui.auth.ui.email.field_validators.EmailFieldValidator;
-import com.firebase.ui.auth.ui.email.field_validators.RequiredFieldValidator;
+import com.firebase.ui.auth.ui.email.fieldvalidators.EmailFieldValidator;
+import com.firebase.ui.auth.ui.email.fieldvalidators.RequiredFieldValidator;
 import com.firebase.ui.auth.util.signincontainer.SaveSmartLock;
 import com.google.android.gms.tasks.OnFailureListener;
 import com.google.android.gms.tasks.OnSuccessListener;

File: auth/src/main/java/com/firebase/ui/auth/ui/email/fieldvalidators/BaseValidator.java
Patch:
@@ -12,14 +12,14 @@
  * limitations under the License.
  */
 
-package com.firebase.ui.auth.ui.email.field_validators;
+package com.firebase.ui.auth.ui.email.fieldvalidators;
 
 import android.support.design.widget.TextInputLayout;
 
 public class BaseValidator {
     protected TextInputLayout mErrorContainer;
     protected String mErrorMessage = "";
-    protected String mEmptyMessage = null;
+    protected String mEmptyMessage;
 
     public BaseValidator(TextInputLayout errorContainer) {
         mErrorContainer = errorContainer;

File: auth/src/main/java/com/firebase/ui/auth/ui/email/fieldvalidators/EmailFieldValidator.java
Patch:
@@ -12,7 +12,7 @@
  * limitations under the License.
  */
 
-package com.firebase.ui.auth.ui.email.field_validators;
+package com.firebase.ui.auth.ui.email.fieldvalidators;
 
 import android.support.design.widget.TextInputLayout;
 import android.util.Patterns;

File: auth/src/main/java/com/firebase/ui/auth/ui/email/fieldvalidators/PasswordFieldValidator.java
Patch:
@@ -12,7 +12,7 @@
  * limitations under the License.
  */
 
-package com.firebase.ui.auth.ui.email.field_validators;
+package com.firebase.ui.auth.ui.email.fieldvalidators;
 
 import android.support.design.widget.TextInputLayout;
 
@@ -24,7 +24,8 @@ public class PasswordFieldValidator extends BaseValidator {
     public PasswordFieldValidator(TextInputLayout errorContainer, int minLength) {
         super(errorContainer);
         mMinLength = minLength;
-        String template = mErrorContainer.getResources().getString(R.string.password_length);
+        String template = mErrorContainer.getResources()
+                .getQuantityString(R.plurals.password_length, minLength);
         mErrorMessage = String.format(template, mMinLength);
     }
 

File: auth/src/main/java/com/firebase/ui/auth/ui/email/fieldvalidators/RequiredFieldValidator.java
Patch:
@@ -12,7 +12,7 @@
  * limitations under the License.
  */
 
-package com.firebase.ui.auth.ui.email.field_validators;
+package com.firebase.ui.auth.ui.email.fieldvalidators;
 
 import android.support.design.widget.TextInputLayout;
 

File: auth/src/main/java/com/firebase/ui/auth/ui/email/fieldvalidators/package-info.java
Patch:
@@ -17,4 +17,4 @@
  * The contents of this package should be considered an implementation detail and not part of
  * the main API.
  */
-package com.firebase.ui.auth.ui.email.field_validators;
\ No newline at end of file
+package com.firebase.ui.auth.ui.email.fieldvalidators;

File: auth/src/main/java/com/firebase/ui/auth/ui/email/package-info.java
Patch:
@@ -15,4 +15,4 @@
 /**
  * Activities related to the email and password based authentication.
  */
-package com.firebase.ui.auth.ui.email;
\ No newline at end of file
+package com.firebase.ui.auth.ui.email;

File: auth/src/main/java/com/firebase/ui/auth/ui/idp/CredentialSignInHandler.java
Patch:
@@ -22,8 +22,8 @@
 import com.firebase.ui.auth.IdpResponse;
 import com.firebase.ui.auth.ui.BaseHelper;
 import com.firebase.ui.auth.ui.TaskFailureLogger;
-import com.firebase.ui.auth.ui.account_link.WelcomeBackIdpPrompt;
-import com.firebase.ui.auth.ui.account_link.WelcomeBackPasswordPrompt;
+import com.firebase.ui.auth.ui.accountlink.WelcomeBackIdpPrompt;
+import com.firebase.ui.auth.ui.accountlink.WelcomeBackPasswordPrompt;
 import com.firebase.ui.auth.util.signincontainer.SaveSmartLock;
 import com.google.android.gms.tasks.OnCompleteListener;
 import com.google.android.gms.tasks.OnFailureListener;
@@ -37,7 +37,7 @@
 import com.google.firebase.auth.ProviderQueryResult;
 
 public class CredentialSignInHandler implements OnCompleteListener<AuthResult> {
-    private final static String TAG = "CredentialSignInHandler";
+    private static final String TAG = "CredentialSignInHandler";
 
     private Activity mActivity;
     private BaseHelper mHelper;

File: auth/src/main/java/com/firebase/ui/auth/ui/idp/package-info.java
Patch:
@@ -15,4 +15,4 @@
 /**
  * Activites related to identity provider authentication.
  */
-package com.firebase.ui.auth.ui.idp;
\ No newline at end of file
+package com.firebase.ui.auth.ui.idp;

File: auth/src/main/java/com/firebase/ui/auth/ui/package-info.java
Patch:
@@ -15,4 +15,4 @@
 /**
  * Activities which implement the AuthUI authentication flow.
  */
-package com.firebase.ui.auth.ui;
\ No newline at end of file
+package com.firebase.ui.auth.ui;

File: auth/src/main/java/com/firebase/ui/auth/util/CredentialsApiHelper.java
Patch:
@@ -154,7 +154,7 @@ public static CredentialsApiHelper getInstance(GoogleApiClientTaskHelper taskHel
         return new CredentialsApiHelper(taskHelper);
     }
 
-    private static abstract class ExceptionForwardingContinuation<InT, OutT>
+    private abstract static class ExceptionForwardingContinuation<InT, OutT>
             implements Continuation<InT, Task<OutT>> {
 
         @Override

File: auth/src/main/java/com/firebase/ui/auth/util/GoogleApiClientTaskHelper.java
Patch:
@@ -135,7 +135,7 @@ private final class GacLifecycleCallbacks extends AbstractActivityLifecycleCallb
 
         @Override
         public void onActivityStarted(Activity activity) {
-            if (mActivity == activity) {
+            if (mActivity.equals(activity)) {
                 GoogleApiClient client = mClientRef.get();
                 if (client != null) {
                     client.connect();
@@ -145,7 +145,7 @@ public void onActivityStarted(Activity activity) {
 
         @Override
         public void onActivityStopped(Activity activity) {
-            if (mActivity == activity) {
+            if (mActivity.equals(activity)) {
                 GoogleApiClient client = mClientRef.get();
                 if (client != null) {
                     client.disconnect();

File: auth/src/main/java/com/firebase/ui/auth/util/PlayServicesHelper.java
Patch:
@@ -15,11 +15,11 @@
  * Helper class wrapping {@link GoogleApiAvailability}. Used internally but can also be used
  * by client application
  */
-public class PlayServicesHelper {
+public final class PlayServicesHelper {
 
     private static final String TAG = "PlayServicesHelper";
 
-    @VisibleForTesting
+    @VisibleForTesting(otherwise = VisibleForTesting.PRIVATE)
     public static GoogleApiAvailability sApiAvailability = GoogleApiAvailability.getInstance();
 
     private final Context mContext;
@@ -58,7 +58,7 @@ public boolean canMakePlayServicesAvailable() {
         // Although the API considers SERVICE_INVALID to be resolvable, it can cause crashes
         // on devices with no GmsCore installed at all (like emulators) and therefore we will
         // avoid trying to resolve it.
-        return (isUserResolvable && !(availabilityCode == ConnectionResult.SERVICE_INVALID));
+        return (isUserResolvable && availabilityCode != ConnectionResult.SERVICE_INVALID);
     }
 
     /**

File: auth/src/main/java/com/firebase/ui/auth/util/Preconditions.java
Patch:
@@ -22,6 +22,9 @@
  * Precondition checking utility methods.
  */
 public final class Preconditions {
+    private Preconditions() {
+        // Helper classes shouldn't be instantiated
+    }
 
     /**
      * Ensures that the provided value is not null, and throws a {@link NullPointerException}

File: auth/src/main/java/com/firebase/ui/auth/util/signincontainer/SignInDelegate.java
Patch:
@@ -163,6 +163,7 @@ public void onResult(@NonNull CredentialRequestResult result) {
 
     @Override
     public void onConnected(@Nullable Bundle bundle) {
+        // We only care about onResult
     }
 
     @Override
@@ -369,7 +370,7 @@ private boolean hasNetworkConnection() {
     public static void delegate(FragmentActivity activity, FlowParameters params) {
         FragmentManager fm = activity.getSupportFragmentManager();
         Fragment fragment = fm.findFragmentByTag(TAG);
-        if (fragment == null || !(fragment instanceof SignInDelegate)) {
+        if (!(fragment instanceof SignInDelegate)) {
             SignInDelegate result = new SignInDelegate();
             result.setArguments(FragmentHelper.getFlowParamsBundle(params));
             fm.beginTransaction().add(result, TAG).disallowAddToBackStack().commit();
@@ -378,7 +379,7 @@ public static void delegate(FragmentActivity activity, FlowParameters params) {
 
     public static SignInDelegate getInstance(FragmentActivity activity) {
         Fragment fragment = activity.getSupportFragmentManager().findFragmentByTag(TAG);
-        if (fragment != null && fragment instanceof SignInDelegate) {
+        if (fragment instanceof SignInDelegate) {
             return (SignInDelegate) fragment;
         } else {
             return null;

File: auth/src/main/java/com/firebase/ui/auth/util/signincontainer/SmartLockBase.java
Patch:
@@ -32,7 +32,7 @@ public abstract class SmartLockBase<R extends Result> extends BaseFragment imple
     private static final String TAG = "SmartLockBase";
 
     protected GoogleApiClient mGoogleApiClient;
-    private boolean mWasProgressDialogShowing = false;
+    private boolean mWasProgressDialogShowing;
 
     @Override
     public void onCreate(@Nullable Bundle savedInstanceState) {

File: auth/src/test/java/com/firebase/ui/auth/AuthUITest.java
Patch:
@@ -16,9 +16,9 @@
 
 import com.firebase.ui.auth.AuthUI.IdpConfig;
 import com.firebase.ui.auth.AuthUI.SignInIntentBuilder;
-import com.firebase.ui.auth.test_helpers.CustomRobolectricGradleTestRunner;
-import com.firebase.ui.auth.test_helpers.TestConstants;
-import com.firebase.ui.auth.test_helpers.TestHelper;
+import com.firebase.ui.auth.testhelpers.CustomRobolectricGradleTestRunner;
+import com.firebase.ui.auth.testhelpers.TestConstants;
+import com.firebase.ui.auth.testhelpers.TestHelper;
 import com.firebase.ui.auth.ui.FlowParameters;
 import com.google.firebase.FirebaseApp;
 

File: auth/src/test/java/com/firebase/ui/auth/testhelpers/ActivityHelperShadow.java
Patch:
@@ -12,7 +12,7 @@
  * limitations under the License.
  */
 
-package com.firebase.ui.auth.test_helpers;
+package com.firebase.ui.auth.testhelpers;
 
 import com.firebase.ui.auth.ui.ActivityHelper;
 import com.firebase.ui.auth.util.signincontainer.SaveSmartLock;

File: auth/src/test/java/com/firebase/ui/auth/testhelpers/AutoCompleteTask.java
Patch:
@@ -12,7 +12,7 @@
  * limitations under the License.
  */
 
-package com.firebase.ui.auth.test_helpers;
+package com.firebase.ui.auth.testhelpers;
 
 import android.app.Activity;
 import android.support.annotation.NonNull;

File: auth/src/test/java/com/firebase/ui/auth/testhelpers/BaseHelperShadow.java
Patch:
@@ -1,4 +1,4 @@
-package com.firebase.ui.auth.test_helpers;
+package com.firebase.ui.auth.testhelpers;
 
 import com.firebase.ui.auth.ui.BaseHelper;
 import com.google.android.gms.auth.api.credentials.CredentialsApi;

File: auth/src/test/java/com/firebase/ui/auth/testhelpers/CustomRobolectricGradleTestRunner.java
Patch:
@@ -12,7 +12,7 @@
  * limitations under the License.
  */
 
-package com.firebase.ui.auth.test_helpers;
+package com.firebase.ui.auth.testhelpers;
 
 import com.facebook.login.LoginManager;
 import com.firebase.ui.auth.provider.FacebookProvider;

File: auth/src/test/java/com/firebase/ui/auth/testhelpers/FacebookProviderShadow.java
Patch:
@@ -12,7 +12,7 @@
  * limitations under the License.
  */
 
-package com.firebase.ui.auth.test_helpers;
+package com.firebase.ui.auth.testhelpers;
 
 import android.app.Activity;
 
@@ -45,6 +45,7 @@ public FacebookProviderShadow() {
         }
     }
 
+    @SuppressWarnings("checkstyle:methodname")
     public void __constructor__(Activity activity, List<String> scopes) {}
 
     @Implementation

File: auth/src/test/java/com/firebase/ui/auth/testhelpers/FakeAuthResult.java
Patch:
@@ -12,7 +12,7 @@
  * limitations under the License.
  */
 
-package com.firebase.ui.auth.test_helpers;
+package com.firebase.ui.auth.testhelpers;
 
 import com.google.firebase.auth.AuthResult;
 import com.google.firebase.auth.FirebaseUser;

File: auth/src/test/java/com/firebase/ui/auth/testhelpers/FakeProviderQueryResult.java
Patch:
@@ -12,7 +12,7 @@
  * limitations under the License.
  */
 
-package com.firebase.ui.auth.test_helpers;
+package com.firebase.ui.auth.testhelpers;
 
 import android.support.annotation.Nullable;
 

File: auth/src/test/java/com/firebase/ui/auth/testhelpers/FirebaseAuthWrapperImplShadow.java
Patch:
@@ -12,7 +12,7 @@
  * limitations under the License.
  */
 
-package com.firebase.ui.auth.test_helpers;
+package com.firebase.ui.auth.testhelpers;
 
 import android.content.Context;
 

File: auth/src/test/java/com/firebase/ui/auth/testhelpers/GoogleProviderShadow.java
Patch:
@@ -12,7 +12,7 @@
  * limitations under the License.
  */
 
-package com.firebase.ui.auth.test_helpers;
+package com.firebase.ui.auth.testhelpers;
 
 import android.app.Activity;
 import android.support.v4.app.FragmentActivity;
@@ -45,6 +45,7 @@ public GoogleProviderShadow() {
         }
     }
 
+    @SuppressWarnings("checkstyle:methodname")
     public void __constructor__(FragmentActivity activity, String email, List<String> scopes) {}
 
 

File: auth/src/test/java/com/firebase/ui/auth/testhelpers/LoginManagerShadow.java
Patch:
@@ -1,4 +1,4 @@
-package com.firebase.ui.auth.test_helpers;
+package com.firebase.ui.auth.testhelpers;
 
 import android.app.Activity;
 

File: auth/src/test/java/com/firebase/ui/auth/testhelpers/TestConstants.java
Patch:
@@ -12,7 +12,7 @@
  * limitations under the License.
  */
 
-package com.firebase.ui.auth.test_helpers;
+package com.firebase.ui.auth.testhelpers;
 
 import android.net.Uri;
 

File: auth/src/test/java/com/firebase/ui/auth/testhelpers/TestHelper.java
Patch:
@@ -12,7 +12,7 @@
  * limitations under the License.
  */
 
-package com.firebase.ui.auth.test_helpers;
+package com.firebase.ui.auth.testhelpers;
 
 import android.content.Context;
 

File: database/src/androidTest/java/com/firebase/ui/database/utils/Bean.java
Patch:
@@ -29,4 +29,4 @@ public String getText() {
     public boolean isBool() {
         return bool;
     }
-}
\ No newline at end of file
+}

File: auth/src/main/java/com/firebase/ui/auth/ui/account_link/WelcomeBackIdpPrompt.java
Patch:
@@ -73,7 +73,8 @@ protected void onCreate(Bundle savedInstanceState) {
                         mIdpProvider = new GoogleProvider(this, idpConfig, getEmailFromIntent());
                         break;
                     case FacebookAuthProvider.PROVIDER_ID:
-                        mIdpProvider = new FacebookProvider(this, idpConfig);
+                        mIdpProvider = new FacebookProvider(
+                                this, idpConfig, mActivityHelper.getFlowParams().themeId);
                         break;
                     case TwitterAuthProvider.PROVIDER_ID:
                         mIdpProvider = new TwitterProvider(this);

File: auth/src/main/java/com/firebase/ui/auth/ui/idp/AuthMethodPickerActivity.java
Patch:
@@ -95,7 +95,8 @@ private void populateIdpList(List<IdpConfig> providers) {
                     mIdpProviders.add(new GoogleProvider(this, idpConfig));
                     break;
                 case AuthUI.FACEBOOK_PROVIDER:
-                    mIdpProviders.add(new FacebookProvider(this, idpConfig));
+                    mIdpProviders.add(new FacebookProvider(
+                            this, idpConfig, mActivityHelper.getFlowParams().themeId));
                     break;
                 case AuthUI.TWITTER_PROVIDER:
                     mIdpProviders.add(new TwitterProvider(this));

File: auth/src/main/java/com/firebase/ui/auth/util/signincontainer/IdpSignInContainer.java
Patch:
@@ -76,7 +76,8 @@ public void onCreate(@Nullable Bundle savedInstanceState) {
         if (provider.equalsIgnoreCase(GoogleAuthProvider.PROVIDER_ID)) {
             mIdpProvider = new GoogleProvider(getActivity(), providerConfig, email);
         } else if (provider.equalsIgnoreCase(FacebookAuthProvider.PROVIDER_ID)) {
-            mIdpProvider = new FacebookProvider(getContext(), providerConfig);
+            mIdpProvider = new FacebookProvider(
+                    getContext(), providerConfig, mHelper.getFlowParams().themeId);
         } else if (provider.equalsIgnoreCase(TwitterAuthProvider.PROVIDER_ID)) {
             mIdpProvider = new TwitterProvider(getContext());
         }

File: auth/src/main/java/com/firebase/ui/auth/provider/FacebookProvider.java
Patch:
@@ -55,6 +55,8 @@ public class FacebookProvider implements IdpProvider, FacebookCallback<LoginResu
     private IdpCallback mCallbackObject;
 
     public FacebookProvider(Context appContext, IdpConfig idpConfig) {
+        appContext = appContext.getApplicationContext();
+
         if (appContext.getResources().getIdentifier(
                 "facebook_permissions", "array", appContext.getPackageName()) != 0) {
             Log.w(TAG, "DEVELOPER WARNING: You have defined R.array.facebook_permissions but that"

File: auth/src/main/java/com/firebase/ui/auth/provider/TwitterProvider.java
Patch:
@@ -4,8 +4,8 @@
 import android.content.Context;
 import android.content.Intent;
 import android.os.Bundle;
-
 import android.util.Log;
+
 import com.firebase.ui.auth.IdpResponse;
 import com.firebase.ui.auth.R;
 import com.google.firebase.auth.AuthCredential;
@@ -30,7 +30,7 @@ public TwitterProvider(Context appContext) {
         TwitterAuthConfig authConfig = new TwitterAuthConfig(
                 appContext.getString(R.string.twitter_consumer_key),
                 appContext.getString(R.string.twitter_consumer_secret));
-        Fabric.with(appContext, new Twitter(authConfig));
+        Fabric.with(appContext.getApplicationContext(), new Twitter(authConfig));
         mTwitterAuthClient = new TwitterAuthClient();
     }
 

File: auth/src/main/java/com/firebase/ui/auth/util/signincontainer/IdpSignInContainer.java
Patch:
@@ -73,10 +73,10 @@ public void onCreate(@Nullable Bundle savedInstanceState) {
             return;
         }
 
-        if (provider.equalsIgnoreCase(FacebookAuthProvider.PROVIDER_ID)) {
-            mIdpProvider = new FacebookProvider(getContext(), providerConfig);
-        } else if (provider.equalsIgnoreCase(GoogleAuthProvider.PROVIDER_ID)) {
+        if (provider.equalsIgnoreCase(GoogleAuthProvider.PROVIDER_ID)) {
             mIdpProvider = new GoogleProvider(getActivity(), providerConfig, email);
+        } else if (provider.equalsIgnoreCase(FacebookAuthProvider.PROVIDER_ID)) {
+            mIdpProvider = new FacebookProvider(getContext(), providerConfig);
         } else if (provider.equalsIgnoreCase(TwitterAuthProvider.PROVIDER_ID)) {
             mIdpProvider = new TwitterProvider(getContext());
         }

File: database/src/main/java/com/firebase/ui/database/FirebaseIndexListAdapter.java
Patch:
@@ -1,6 +1,7 @@
 package com.firebase.ui.database;
 
 import android.app.Activity;
+import android.support.annotation.LayoutRes;
 
 import com.google.firebase.database.Query;
 
@@ -41,7 +42,7 @@ public abstract class FirebaseIndexListAdapter<T> extends FirebaseListAdapter<T>
      */
     public FirebaseIndexListAdapter(Activity activity,
                                     Class<T> modelClass,
-                                    int modelLayout,
+                                    @LayoutRes int modelLayout,
                                     Query keyRef,
                                     Query dataRef) {
         super(activity, modelClass, modelLayout, new FirebaseIndexArray(keyRef, dataRef));

File: database/src/main/java/com/firebase/ui/database/FirebaseIndexRecyclerAdapter.java
Patch:
@@ -14,6 +14,7 @@
 
 package com.firebase.ui.database;
 
+import android.support.annotation.LayoutRes;
 import android.support.v7.widget.RecyclerView;
 
 import com.google.firebase.database.Query;
@@ -70,7 +71,7 @@ public abstract class FirebaseIndexRecyclerAdapter<T, VH extends RecyclerView.Vi
      *                        Each key key found at {@code keyRef}'s location represents a list item in the {@code RecyclerView}.
      */
     public FirebaseIndexRecyclerAdapter(Class<T> modelClass,
-                                        int modelLayout,
+                                        @LayoutRes int modelLayout,
                                         Class<VH> viewHolderClass,
                                         Query keyRef,
                                         Query dataRef) {

File: database/src/main/java/com/firebase/ui/database/FirebaseListAdapter.java
Patch:
@@ -15,6 +15,7 @@
 package com.firebase.ui.database;
 
 import android.app.Activity;
+import android.support.annotation.LayoutRes;
 import android.util.Log;
 import android.view.View;
 import android.view.ViewGroup;
@@ -57,7 +58,7 @@ public abstract class FirebaseListAdapter<T> extends BaseAdapter {
 
     FirebaseListAdapter(Activity activity,
                         Class<T> modelClass,
-                        int modelLayout,
+                        @LayoutRes int modelLayout,
                         FirebaseArray snapshots) {
         mModelClass = modelClass;
         mLayout = modelLayout;

File: database/src/main/java/com/firebase/ui/database/FirebaseRecyclerAdapter.java
Patch:
@@ -14,6 +14,7 @@
 
 package com.firebase.ui.database;
 
+import android.support.annotation.LayoutRes;
 import android.support.v7.widget.RecyclerView;
 import android.util.Log;
 import android.view.LayoutInflater;
@@ -76,7 +77,7 @@ public abstract class FirebaseRecyclerAdapter<T, VH extends RecyclerView.ViewHol
     FirebaseArray mSnapshots;
 
     FirebaseRecyclerAdapter(Class<T> modelClass,
-                            int modelLayout,
+                            @LayoutRes int modelLayout,
                             Class<VH> viewHolderClass,
                             FirebaseArray snapshots) {
         mModelClass = modelClass;

File: auth/src/main/java/com/firebase/ui/auth/util/FirebaseAuthWrapperImpl.java
Patch:
@@ -14,7 +14,6 @@
 
 package com.firebase.ui.auth.util;
 
-import android.app.Fragment;
 import android.app.PendingIntent;
 import android.content.Context;
 import android.os.Bundle;
@@ -61,7 +60,7 @@ public FirebaseAuthWrapperImpl(@NonNull FirebaseAuth firebaseAuth) {
         if (firebaseAuth == null) {
             throw new IllegalArgumentException("firebaseAuth must not be null");
         }
-        this.mFirebaseAuth = firebaseAuth;
+        mFirebaseAuth = firebaseAuth;
     }
 
     @Override

File: auth/src/main/java/com/firebase/ui/auth/ui/email/EmailHintContainerActivity.java
Patch:
@@ -20,6 +20,7 @@
 import android.content.IntentSender;
 import android.os.Bundle;
 
+import android.util.Log;
 import com.firebase.ui.auth.ui.AcquireEmailHelper;
 import com.firebase.ui.auth.ui.ActivityHelper;
 import com.firebase.ui.auth.ui.AppCompatBase;
@@ -29,6 +30,7 @@
 import com.google.android.gms.auth.api.credentials.Credential;
 
 public class EmailHintContainerActivity extends AppCompatBase {
+    private static final String TAG = "EmailHintContainer";
     private static final int RC_HINT = 13;
     private AcquireEmailHelper mAcquireEmailHelper;
 
@@ -45,7 +47,7 @@ protected void onCreate(Bundle savedInstanceState) {
                 startIntentSenderForResult(hintIntent.getIntentSender(), RC_HINT, null, 0, 0, 0);
                 return;
             } catch (IntentSender.SendIntentException e) {
-                e.printStackTrace();
+                Log.e(TAG, "Unable to start hint intent", e);
             }
         }
         finish(RESULT_CANCELED, new Intent());

File: auth/src/main/java/com/firebase/ui/auth/util/SmartLock.java
Patch:
@@ -168,6 +168,7 @@ public void onResult(@NonNull Status status) {
                     finish();
                 }
             } else {
+                Log.w(TAG, status.getStatusMessage());
                 finish();
             }
         }

File: auth/src/main/java/com/firebase/ui/auth/ui/idp/CredentialSignInHandler.java
Patch:
@@ -65,7 +65,7 @@ public void onComplete(@NonNull Task<AuthResult> task) {
                                                mActivityHelper,
                                                firebaseUser,
                                                null /* password */,
-                                               mResponse.getProviderType());
+                                               mResponse);
         } else {
             if (task.getException() instanceof FirebaseAuthUserCollisionException) {
                 final String email = mResponse.getEmail();

File: auth/src/test/java/com/firebase/ui/auth/ui/idp/CredentialSignInHandlerTest.java
Patch:
@@ -117,7 +117,7 @@ public void testSignInSucceeded() {
                                                   mockActivityHelper,
                                                   mockFirebaseUser,
                                                   null,
-                                                  GoogleAuthProvider.PROVIDER_ID);
+                                                  idpResponse);
     }
 
     @Test

File: auth/src/main/java/com/firebase/ui/auth/provider/FacebookProvider.java
Patch:
@@ -178,6 +178,7 @@ public void onCancel() {
 
     @Override
     public void onError(FacebookException error) {
+        Log.e(TAG, "Error logging in with Facebook. " + error.getMessage());
         Bundle extra = new Bundle();
         extra.putString(ERROR, "error");
         extra.putString(ERROR_MSG, error.getMessage());

File: auth/src/main/java/com/firebase/ui/auth/AuthUI.java
Patch:
@@ -32,7 +32,7 @@
 import com.firebase.ui.auth.util.CredentialsApiHelper;
 import com.firebase.ui.auth.util.GoogleApiClientTaskHelper;
 import com.firebase.ui.auth.util.Preconditions;
-import com.firebase.ui.auth.util.SmartlockUtil;
+import com.firebase.ui.auth.util.SmartLockUtil;
 import com.google.android.gms.auth.api.Auth;
 import com.google.android.gms.auth.api.credentials.Credential;
 import com.google.android.gms.auth.api.signin.GoogleSignInOptions;
@@ -343,7 +343,7 @@ public Task<Void> delete(@NonNull Activity activity) {
         CredentialsApiHelper credentialHelper = CredentialsApiHelper.getInstance(gacHelper);
 
         // Get all SmartLock credentials associated with the user
-        List<Credential> credentials = SmartlockUtil.credentialsFromFirebaseUser(firebaseUser);
+        List<Credential> credentials = SmartLockUtil.credentialsFromFirebaseUser(firebaseUser);
 
         // For each Credential in the list, create a task to delete it.
         List<Task<?>> credentialTasks = new ArrayList<>();

File: auth/src/main/java/com/firebase/ui/auth/ui/AppCompatBase.java
Patch:
@@ -16,8 +16,9 @@
 
 import android.content.Intent;
 import android.os.Bundle;
+import android.support.v7.app.AppCompatActivity;
 
-public class AppCompatBase extends android.support.v7.app.AppCompatActivity {
+public class AppCompatBase extends AppCompatActivity {
     protected ActivityHelper mActivityHelper;
 
     @Override
@@ -36,5 +37,4 @@ protected void onDestroy() {
     public void finish(int resultCode, Intent intent) {
         mActivityHelper.finish(resultCode, intent);
     }
-
 }

File: auth/src/main/java/com/firebase/ui/auth/ui/ChooseAccountActivity.java
Patch:
@@ -141,7 +141,6 @@ private boolean hasNetworkConnection() {
     public void onCredentialsApiConnected(
             CredentialsAPI credentialsApi,
             ActivityHelper activityHelper) {
-
         String email = credentialsApi.getEmailFromCredential();
         String password = credentialsApi.getPasswordFromCredential();
         String accountType = credentialsApi.getAccountTypeFromCredential();
@@ -249,7 +248,6 @@ public void onActivityResult(int requestCode, int resultCode, Intent data) {
                     finish(resultCode, new Intent());
                 }
                 break;
-
         }
     }
 

File: auth/src/main/java/com/firebase/ui/auth/ui/idp/IDPBaseActivity.java
Patch:
@@ -38,5 +38,4 @@ protected AuthCredential createCredential(IdpResponse idpSignInResponse) {
         }
         return null;
     }
-
 }

File: auth/src/main/java/com/firebase/ui/auth/util/CredentialsApiHelper.java
Patch:
@@ -59,6 +59,8 @@ public CredentialRequest createCredentialRequest(List<IdpConfig> providers) {
                 idps.add(IdentityProviders.GOOGLE);
             } else if (AuthUI.FACEBOOK_PROVIDER.equals(providerId)) {
                 idps.add(IdentityProviders.FACEBOOK);
+            } else if (AuthUI.TWITTER_PROVIDER.equals(providerId)) {
+                idps.add(IdentityProviders.TWITTER);
             }
         }
 

File: auth/src/test/java/com/firebase/ui/auth/ui/idp/AuthMethodPickerActivityTest.java
Patch:
@@ -82,6 +82,7 @@ public void testAllProvidersArePopulated() {
         List<String> providers = Arrays.asList(
                 AuthUI.FACEBOOK_PROVIDER,
                 AuthUI.GOOGLE_PROVIDER,
+                AuthUI.TWITTER_PROVIDER,
                 AuthUI.EMAIL_PROVIDER);
 
         AuthMethodPickerActivity authMethodPickerActivity =

File: auth/src/test/java/com/firebase/ui/auth/test_helpers/AutoCompleteTask.java
Patch:
@@ -25,7 +25,7 @@
 
 import java.util.concurrent.Executor;
 
-public class AutoCompleteTask<TResult> extends Task {
+public class AutoCompleteTask<TResult> extends Task<TResult> {
     TResult mResult;
     boolean mComplete;
     boolean mSuccess;
@@ -49,7 +49,7 @@ public boolean isSuccessful() {
     }
 
     @Override
-    public Object getResult() {
+    public TResult getResult() {
         return mResult;
     }
 

File: auth/src/test/java/com/firebase/ui/auth/ui/email/SignInActivityTest.java
Patch:
@@ -31,6 +31,7 @@
 import com.firebase.ui.auth.ui.ExtraConstants;
 import com.firebase.ui.auth.ui.account_link.SaveCredentialsActivity;
 import com.firebase.ui.auth.util.PlayServicesHelper;
+import com.google.firebase.auth.AuthResult;
 import com.google.firebase.auth.FirebaseUser;
 
 import org.junit.Before;
@@ -108,7 +109,7 @@ public void testSignInButton_signsInAndSavesCredentials() {
         when(ActivityHelperShadow.firebaseAuth.signInWithEmailAndPassword(
                 TestConstants.EMAIL,
                 TestConstants.PASSWORD)).thenReturn(
-                    new AutoCompleteTask<>(new FakeAuthResult(mockFirebaseUser), true, null));
+                    new AutoCompleteTask<AuthResult>(new FakeAuthResult(mockFirebaseUser), true, null));
         when(mockFirebaseUser.getDisplayName()).thenReturn(TestConstants.NAME);
         when(mockFirebaseUser.getEmail()).thenReturn(TestConstants.EMAIL);
 

File: auth/src/main/java/com/firebase/ui/auth/ui/account_link/WelcomeBackIDPPrompt.java
Patch:
@@ -90,8 +90,7 @@ protected void onCreate(Bundle savedInstanceState) {
         if (mIdpProvider == null) {
             getIntent().putExtra(
                     ExtraConstants.EXTRA_ERROR_MESSAGE,
-                    "Firebase login successful. Account linking failed due to provider not "
-                            + "enabled by application");
+                    "Firebase login successful. Account linking failed due to provider not enabled by application");
             finish(RESULT_CANCELED, getIntent());
             return;
         }

File: auth/src/main/java/com/firebase/ui/auth/ui/account_link/WelcomeBackPasswordPrompt.java
Patch:
@@ -81,6 +81,8 @@ protected void onCreate(Bundle savedInstanceState) {
         TextView bodyTextView = ((TextView) findViewById(R.id.welcome_back_password_body));
         bodyTextView.setText(spannableStringBuilder);
 
+        ((TextInputLayout) findViewById(R.id.password_layout)).setPasswordVisibilityToggleEnabled(false);
+
         // Click listeners
         findViewById(R.id.button_done).setOnClickListener(this);
         findViewById(R.id.toggle_visibility).setOnClickListener(

File: auth/src/main/java/com/firebase/ui/auth/ui/email/ImageFocusTransparencyChanger.java
Patch:
@@ -39,6 +39,5 @@ public void onFocusChange(View v, boolean hasFocus) {
         } else {
             mTogglePasswordImage.setAlpha(mSlightlyVisible);
         }
-
     }
 }

File: auth/src/test/java/com/firebase/ui/auth/AuthUITest.java
Patch:
@@ -14,8 +14,6 @@
 
 package com.firebase.ui.auth;
 
-import static junit.framework.Assert.assertEquals;
-
 import android.content.Intent;
 
 import com.firebase.ui.auth.test_helpers.CustomRobolectricGradleTestRunner;
@@ -31,8 +29,10 @@
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 
+import static junit.framework.Assert.assertEquals;
+
 @RunWith(CustomRobolectricGradleTestRunner.class)
-@Config(constants = BuildConfig.class, sdk = 21)
+@Config(constants = BuildConfig.class, sdk = 23)
 public class AuthUITest {
     private FirebaseApp mFirebaseApp;
 

File: auth/src/test/java/com/firebase/ui/auth/test_helpers/CustomRobolectricGradleTestRunner.java
Patch:
@@ -23,11 +23,11 @@
 import com.firebase.ui.auth.util.FirebaseAuthWrapperImpl;
 
 import org.junit.runners.model.InitializationError;
-import org.robolectric.RobolectricGradleTestRunner;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 import org.robolectric.internal.bytecode.InstrumentationConfiguration;
 
-public class CustomRobolectricGradleTestRunner extends RobolectricGradleTestRunner {
+public class CustomRobolectricGradleTestRunner extends RobolectricTestRunner {
     public CustomRobolectricGradleTestRunner(Class<?> klass) throws InitializationError {
         super(klass);
     }

File: auth/src/test/java/com/firebase/ui/auth/ui/ChooseAccountActivityTest.java
Patch:
@@ -53,7 +53,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(CustomRobolectricGradleTestRunner.class)
-@Config(constants = BuildConfig.class, shadows = {ActivityHelperShadow.class}, sdk = 21)
+@Config(constants = BuildConfig.class, shadows = {ActivityHelperShadow.class}, sdk = 23)
 public class ChooseAccountActivityTest {
     private FirebaseApp mFirebaseApp;
     @Mock private CredentialsAPI mCredentialsAPI;

File: auth/src/test/java/com/firebase/ui/auth/ui/email/RegisterEmailActivityTest.java
Patch:
@@ -53,7 +53,7 @@
 
 
 @RunWith(CustomRobolectricGradleTestRunner.class)
-@Config(constants = BuildConfig.class, sdk = 21)
+@Config(constants = BuildConfig.class, sdk = 23)
 public class RegisterEmailActivityTest {
 
     private RegisterEmailActivity createActivity(String email) {

File: auth/src/test/java/com/firebase/ui/auth/ui/email/SignInActivityTest.java
Patch:
@@ -51,7 +51,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(CustomRobolectricGradleTestRunner.class)
-@Config(constants = BuildConfig.class, sdk = 21)
+@Config(constants = BuildConfig.class, sdk = 23)
 public class SignInActivityTest {
 
     @Before

File: auth/src/test/java/com/firebase/ui/auth/ui/idp/AuthMethodPickerActivityTest.java
Patch:
@@ -66,7 +66,7 @@
                 GoogleProviderShadow.class,
                 FacebookProviderShadow.class,
                 LoginManagerShadow.class
-        }, sdk = 21)
+        }, sdk = 23)
 public class AuthMethodPickerActivityTest {
 
     @Before

File: auth/src/test/java/com/firebase/ui/auth/ui/idp/CredentialSignInHandlerTest.java
Patch:
@@ -66,7 +66,7 @@
 
 
 @RunWith(CustomRobolectricGradleTestRunner.class)
-@Config(constants = BuildConfig.class, sdk = 21, shadows = {ActivityHelperShadow.class})
+@Config(constants = BuildConfig.class, sdk = 23, shadows = {ActivityHelperShadow.class})
 public class CredentialSignInHandlerTest {
     private static final int RC_ACCOUNT_LINK = 3;
     private static final int RC_SAVE_CREDENTIALS = 4;

File: auth/src/test/java/com/firebase/ui/auth/util/HeadlessAPIWrapperImplTest.java
Patch:
@@ -24,16 +24,16 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
-import org.robolectric.RobolectricGradleTestRunner;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 
 import static junit.framework.Assert.assertFalse;
 import static junit.framework.Assert.assertTrue;
 import static org.mockito.Mockito.when;
 
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(constants = BuildConfig.class, sdk=23)
+@RunWith(RobolectricTestRunner.class)
+@Config(constants = BuildConfig.class, sdk = 23)
 public class HeadlessAPIWrapperImplTest {
 
     private FirebaseAuthWrapperImpl mHeadlessAPIWrapperImpl;

File: auth/src/main/java/com/firebase/ui/auth/ui/email/SignInActivity.java
Patch:
@@ -126,6 +126,7 @@ public void onFailure(@NonNull Exception e) {
                         TextInputLayout passwordInput =
                                 (TextInputLayout) findViewById(R.id.password_layout);
                         passwordInput.setError(getString(R.string.login_error));
+                        mActivityHelper.dismissDialog();
                     }
                 });
     }

File: auth/src/main/java/com/firebase/ui/auth/util/FirebaseAuthWrapper.java
Patch:
@@ -21,6 +21,7 @@
 import android.support.annotation.Nullable;
 import android.support.annotation.WorkerThread;
 
+import android.support.v4.app.FragmentActivity;
 import com.google.firebase.auth.AuthCredential;
 import com.google.firebase.auth.FirebaseUser;
 
@@ -68,7 +69,7 @@ FirebaseUser linkWithCredential(
 
     boolean isPlayServicesAvailable(Context context);
 
-    PendingIntent getEmailHintIntent(Context context);
+    PendingIntent getEmailHintIntent(FragmentActivity context);
 
     void setTimeOut(long timeoutMs);
 

File: auth/src/main/java/com/firebase/ui/auth/provider/FacebookProvider.java
Patch:
@@ -36,6 +36,7 @@
 import org.json.JSONException;
 import org.json.JSONObject;
 
+import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
 
@@ -83,7 +84,7 @@ public void startLogin(Activity activity) {
         loginManager.registerCallback(mCallbackManager, this);
 
         String[] permissions = activity.getResources().getStringArray(R.array.facebook_permissions);
-        List<String> permissionsList = Arrays.asList(permissions);
+        List<String> permissionsList = new ArrayList<>(Arrays.asList(permissions));
 
         // Ensure we have email and public_profile scopes
         if (!permissionsList.contains(EMAIL)) {

File: auth/src/main/java/com/firebase/ui/auth/provider/FacebookProvider.java
Patch:
@@ -36,6 +36,7 @@
 import org.json.JSONException;
 import org.json.JSONObject;
 
+import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
 
@@ -83,7 +84,7 @@ public void startLogin(Activity activity) {
         loginManager.registerCallback(mCallbackManager, this);
 
         String[] permissions = activity.getResources().getStringArray(R.array.facebook_permissions);
-        List<String> permissionsList = Arrays.asList(permissions);
+        List<String> permissionsList = new ArrayList<>(Arrays.asList(permissions));
 
         // Ensure we have email and public_profile scopes
         if (!permissionsList.contains(EMAIL)) {

File: auth/src/main/java/com/firebase/ui/auth/ui/idp/AuthMethodPickerActivity.java
Patch:
@@ -19,7 +19,6 @@
 import android.os.Bundle;
 import android.util.Log;
 import android.view.View;
-import android.widget.Button;
 import android.widget.ImageView;
 import android.widget.LinearLayout;
 
@@ -70,8 +69,7 @@ protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.auth_method_picker_layout);
 
-        Button emailButton = (Button) findViewById(R.id.email_provider);
-        emailButton.setOnClickListener(this);
+        findViewById(R.id.email_provider).setOnClickListener(this);
 
         populateIdpList(mActivityHelper.getFlowParams().providerInfo);
 
@@ -104,6 +102,7 @@ private void populateIdpList(List<IDPProviderParcel> providers) {
                     }
             }
         }
+
         LinearLayout btnHolder = (LinearLayout) findViewById(R.id.btn_holder);
         for (final IDPProvider provider: mIdpProviders) {
             View loginButton = null;

File: auth/src/test/java/com/firebase/ui/auth/test_helpers/AutoCompleteTask.java
Patch:
@@ -108,7 +108,7 @@ public Task addOnFailureListener(@NonNull Executor executor, @NonNull OnFailureL
     @NonNull
     @Override
     public Task addOnFailureListener(@NonNull Activity activity, @NonNull OnFailureListener onFailureListener) {
-        throw new RuntimeException("Method not implemented");
+        return addOnFailureListener(onFailureListener);
     }
 
     @Override

File: auth/src/main/java/com/firebase/ui/auth/ui/idp/AuthMethodPickerActivity.java
Patch:
@@ -19,7 +19,6 @@
 import android.os.Bundle;
 import android.util.Log;
 import android.view.View;
-import android.widget.Button;
 import android.widget.ImageView;
 import android.widget.LinearLayout;
 
@@ -70,8 +69,7 @@ protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.auth_method_picker_layout);
 
-        Button emailButton = (Button) findViewById(R.id.email_provider);
-        emailButton.setOnClickListener(this);
+        findViewById(R.id.email_provider).setOnClickListener(this);
 
         populateIdpList(mActivityHelper.getFlowParams().providerInfo);
 
@@ -104,6 +102,7 @@ private void populateIdpList(List<IDPProviderParcel> providers) {
                     }
             }
         }
+
         LinearLayout btnHolder = (LinearLayout) findViewById(R.id.btn_holder);
         for (final IDPProvider provider: mIdpProviders) {
             View loginButton = null;

File: auth/src/test/java/com/firebase/ui/auth/test_helpers/AutoCompleteTask.java
Patch:
@@ -108,7 +108,7 @@ public Task addOnFailureListener(@NonNull Executor executor, @NonNull OnFailureL
     @NonNull
     @Override
     public Task addOnFailureListener(@NonNull Activity activity, @NonNull OnFailureListener onFailureListener) {
-        throw new RuntimeException("Method not implemented");
+        return addOnFailureListener(onFailureListener);
     }
 
     @Override

File: auth/src/main/java/com/firebase/ui/auth/AuthUI.java
Patch:
@@ -409,6 +409,8 @@ public SignInIntentBuilder setProviders(@NonNull String... providers) {
 
         /**
          * Enables or disables the use of Smart Lock for Passwords in the sign in flow.
+         * 
+         * <p>SmartLock is enabled by default
          */
         public SignInIntentBuilder setIsSmartLockEnabled(boolean enabled) {
             mIsSmartLockEnabled = enabled;

File: auth/src/test/java/com/firebase/ui/auth/ui/idp/AuthMethodPickerActivityTest.java
Patch:
@@ -81,6 +81,7 @@ public void testAllProvidersArePopulated() {
 
         AuthMethodPickerActivity authMethodPickerActivity =
                 createActivity(providers);
+
         assertEquals(providers.size(),
                 ((LinearLayout) authMethodPickerActivity.findViewById(R.id.btn_holder))
                         .getChildCount());

File: app/src/main/java/com/firebase/uidemo/auth/AuthUiActivity.java
Patch:
@@ -40,6 +40,8 @@
 
 public class AuthUiActivity extends AppCompatActivity {
 
+    private static final String TAG = "AuthUIActivity";
+
     private static final String UNCHANGED_CONFIG_VALUE = "CHANGE-ME";
 
     private static final String GOOGLE_TOS_URL =

File: auth/src/main/java/com/firebase/ui/auth/ui/AcquireEmailHelper.java
Patch:
@@ -16,7 +16,6 @@
 
 import android.content.Intent;
 import android.support.annotation.NonNull;
-import android.util.Log;
 
 import com.firebase.ui.auth.R;
 import com.firebase.ui.auth.ui.account_link.WelcomeBackIDPPrompt;
@@ -111,7 +110,7 @@ private void startEmailHandler(String email, List<String> providers) {
 
     public void onActivityResult(int requestCode, int resultCode, Intent data) {
         if (REQUEST_CODES.contains(requestCode)) {
-            mActivityHelper.finish(resultCode, new Intent());
+            mActivityHelper.finish(resultCode, data);
         }
     }
 }

File: auth/src/main/java/com/firebase/ui/auth/ui/account_link/WelcomeBackIDPPrompt.java
Patch:
@@ -94,6 +94,7 @@ protected void onCreate(Bundle savedInstanceState) {
                     "Firebase login successful. Account linking failed due to provider not "
                             + "enabled by application");
             finish(RESULT_CANCELED, getIntent());
+            return;
         }
 
         ((TextView) findViewById(R.id.welcome_back_idp_prompt))

File: app/src/main/java/com/firebase/uidemo/auth/AuthUiActivity.java
Patch:
@@ -40,6 +40,8 @@
 
 public class AuthUiActivity extends AppCompatActivity {
 
+    private static final String TAG = "AuthUIActivity";
+
     private static final String UNCHANGED_CONFIG_VALUE = "CHANGE-ME";
 
     private static final String GOOGLE_TOS_URL =

File: auth/src/main/java/com/firebase/ui/auth/ui/AcquireEmailHelper.java
Patch:
@@ -16,7 +16,6 @@
 
 import android.content.Intent;
 import android.support.annotation.NonNull;
-import android.util.Log;
 
 import com.firebase.ui.auth.R;
 import com.firebase.ui.auth.ui.account_link.WelcomeBackIDPPrompt;
@@ -111,7 +110,7 @@ private void startEmailHandler(String email, List<String> providers) {
 
     public void onActivityResult(int requestCode, int resultCode, Intent data) {
         if (REQUEST_CODES.contains(requestCode)) {
-            mActivityHelper.finish(resultCode, new Intent());
+            mActivityHelper.finish(resultCode, data);
         }
     }
 }

File: auth/src/main/java/com/firebase/ui/auth/ui/account_link/WelcomeBackIDPPrompt.java
Patch:
@@ -94,6 +94,7 @@ protected void onCreate(Bundle savedInstanceState) {
                     "Firebase login successful. Account linking failed due to provider not "
                             + "enabled by application");
             finish(RESULT_CANCELED, getIntent());
+            return;
         }
 
         ((TextView) findViewById(R.id.welcome_back_idp_prompt))

File: auth/src/main/java/com/firebase/ui/auth/ui/account_link/WelcomeBackPasswordPrompt.java
Patch:
@@ -60,7 +60,7 @@ public class WelcomeBackPasswordPrompt extends AppCompatBase implements View.OnC
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        setTitle(R.string.sign_in_title);
+        setTitle(R.string.sign_in);
         setContentView(R.layout.welcome_back_password_prompt_layout);
         mPasswordLayout = (TextInputLayout) findViewById(R.id.password_layout);
         mIdpResponse = getIntent().getParcelableExtra(ExtraConstants.EXTRA_IDP_RESPONSE);

File: app/src/main/java/com/firebase/uidemo/auth/AuthUiActivity.java
Patch:
@@ -14,7 +14,6 @@
 
 package com.firebase.uidemo.auth;
 
-import android.app.Activity;
 import android.content.Context;
 import android.content.Intent;
 import android.os.Bundle;
@@ -23,6 +22,7 @@
 import android.support.annotation.StringRes;
 import android.support.annotation.StyleRes;
 import android.support.design.widget.Snackbar;
+import android.support.v7.app.AppCompatActivity;
 import android.view.View;
 import android.widget.Button;
 import android.widget.CheckBox;
@@ -38,7 +38,7 @@
 import butterknife.ButterKnife;
 import butterknife.OnClick;
 
-public class AuthUiActivity extends Activity {
+public class AuthUiActivity extends AppCompatActivity {
 
     private static final String UNCHANGED_CONFIG_VALUE = "CHANGE-ME";
 

File: app/src/main/java/com/firebase/uidemo/auth/SignedInActivity.java
Patch:
@@ -14,7 +14,6 @@
 
 package com.firebase.uidemo.auth;
 
-import android.app.Activity;
 import android.content.Context;
 import android.content.DialogInterface;
 import android.content.Intent;
@@ -24,6 +23,7 @@
 import android.support.annotation.StringRes;
 import android.support.design.widget.Snackbar;
 import android.support.v7.app.AlertDialog;
+import android.support.v7.app.AppCompatActivity;
 import android.text.TextUtils;
 import android.view.View;
 import android.widget.ImageView;
@@ -46,7 +46,7 @@
 import butterknife.ButterKnife;
 import butterknife.OnClick;
 
-public class SignedInActivity extends Activity {
+public class SignedInActivity extends AppCompatActivity {
 
     @BindView(android.R.id.content)
     View mRootView;

File: app/src/main/java/com/firebase/uidemo/auth/AuthUiActivity.java
Patch:
@@ -14,7 +14,6 @@
 
 package com.firebase.uidemo.auth;
 
-import android.app.Activity;
 import android.content.Context;
 import android.content.Intent;
 import android.os.Bundle;
@@ -23,6 +22,7 @@
 import android.support.annotation.StringRes;
 import android.support.annotation.StyleRes;
 import android.support.design.widget.Snackbar;
+import android.support.v7.app.AppCompatActivity;
 import android.view.View;
 import android.widget.Button;
 import android.widget.CheckBox;
@@ -38,7 +38,7 @@
 import butterknife.ButterKnife;
 import butterknife.OnClick;
 
-public class AuthUiActivity extends Activity {
+public class AuthUiActivity extends AppCompatActivity {
 
     private static final String UNCHANGED_CONFIG_VALUE = "CHANGE-ME";
 

File: app/src/main/java/com/firebase/uidemo/auth/SignedInActivity.java
Patch:
@@ -14,7 +14,6 @@
 
 package com.firebase.uidemo.auth;
 
-import android.app.Activity;
 import android.content.Context;
 import android.content.DialogInterface;
 import android.content.Intent;
@@ -24,6 +23,7 @@
 import android.support.annotation.StringRes;
 import android.support.design.widget.Snackbar;
 import android.support.v7.app.AlertDialog;
+import android.support.v7.app.AppCompatActivity;
 import android.text.TextUtils;
 import android.view.View;
 import android.widget.ImageView;
@@ -46,7 +46,7 @@
 import butterknife.ButterKnife;
 import butterknife.OnClick;
 
-public class SignedInActivity extends Activity {
+public class SignedInActivity extends AppCompatActivity {
 
     @BindView(android.R.id.content)
     View mRootView;

File: auth/src/main/java/com/firebase/ui/auth/util/CredentialsAPI.java
Patch:
@@ -163,7 +163,7 @@ public void handleCredential(Credential credential) {
         } else {
             // Email/password account
             String status = String.format("Signed in as %s", credential.getId());
-            Log.e(TAG, status);
+            Log.d(TAG, status);
         }
     }
 

File: auth/src/main/java/com/firebase/ui/auth/ui/email/SignInActivity.java
Patch:
@@ -148,7 +148,6 @@ public void onClick(View view) {
                     this,
                     mActivityHelper.getFlowParams(),
                     mEmailEditText.getText().toString()));
-            finish(RESULT_OK, new Intent());
             return;
         }
     }

File: auth/src/main/java/com/firebase/ui/auth/ui/account_link/SaveCredentialsActivity.java
Patch:
@@ -23,7 +23,6 @@
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.util.Log;
-import android.widget.Toast;
 
 import com.firebase.ui.auth.BuildConfig;
 import com.firebase.ui.auth.R;
@@ -151,7 +150,6 @@ public void onConnectionFailed(@NonNull ConnectionResult connectionResult) {
     public void onResult(@NonNull Status status) {
 
         if (status.isSuccess()) {
-            Toast.makeText(getApplicationContext(), "Credential saved", Toast.LENGTH_SHORT).show();
             finish(RESULT_OK, getIntent());
         } else {
             if (status.hasResolution()) {

File: auth/src/main/java/com/firebase/ui/auth/ui/idp/AuthMethodPickerActivity.java
Patch:
@@ -207,7 +207,7 @@ public void onComplete(
                                     firebaseUser.getDisplayName(),
                                     firebaseUser.getEmail(),
                                     null,
-                                    firebaseUser.getProviderId(),
+                                    response.getProviderType(),
                                     photoUrl
                             ), RC_ACCOUNT_LINK);
                         }

File: auth/src/main/java/com/firebase/ui/auth/ui/idp/IDPSignInContainerActivity.java
Patch:
@@ -79,10 +79,10 @@ protected void onCreate(Bundle savedInstanceState) {
     private void startAccountLinkingActivity(FirebaseUser firebaseUser, IDPResponse response) {
         List<String> providers = firebaseUser.getProviders();
         String provider = null;
-        if (providers.size() == 1) {
-            provider = providers.get(0);
+        if (providers.isEmpty()) {
+            Log.e(TAG, "User has no existing providers to link with" );
         } else {
-            Log.e(TAG, "Expecting a single provider, received :" + providers.size());
+            provider = firebaseUser.getProviders().get(0);
         }
         startActivityForResult(AccountLinkInitActivity.createIntent(
                 this,

File: auth/src/main/java/com/firebase/ui/auth/ui/account_link/AccountLinkInitActivity.java
Patch:
@@ -108,7 +108,7 @@ public void onComplete(@NonNull Task<ProviderQueryResult> task) {
                             startActivityForResult(WelcomeBackPasswordPrompt.createIntent(
                                     getApplicationContext(),
                                     mActivityHelper.flowParams,
-                                    email),
+                                    mIdpResponse),
                                     RC_WELCOME_BACK_PASSWORD_PROMPT);
                         } else {
                             // existing account but has a different IDP linked

File: app/src/main/java/com/firebase/uidemo/auth/AuthUiActivity.java
Patch:
@@ -132,7 +132,7 @@ private void handleSignInResponse(int resultCode, Intent data) {
     @StyleRes
     private int getSelectedTheme() {
         if (mUseDefaultTheme.isChecked()) {
-            return AuthUI.DEFAULT_THEME;
+            return AuthUI.getDefaultTheme();
         }
 
         if (mUsePurpleTheme.isChecked()) {

File: auth/src/main/java/com/firebase/ui/auth/ui/account_link/AccountLinkInitActivity.java
Patch:
@@ -108,7 +108,7 @@ public void onComplete(@NonNull Task<ProviderQueryResult> task) {
                             startActivityForResult(WelcomeBackPasswordPrompt.createIntent(
                                     getApplicationContext(),
                                     mActivityHelper.flowParams,
-                                    email),
+                                    mIdpResponse),
                                     RC_WELCOME_BACK_PASSWORD_PROMPT);
                         } else {
                             // existing account but has a different IDP linked

File: auth/src/main/java/com/firebase/ui/auth/provider/GoogleProvider.java
Patch:
@@ -83,7 +83,7 @@ public void setAuthenticationCallback(IDPCallback callback) {
     private IDPResponse createIDPResponse(GoogleSignInAccount account) {
         Bundle response = new Bundle();
         response.putString(TOKEN_KEY, account.getIdToken());
-        return new IDPResponse(GoogleAuthProvider.PROVIDER_ID, response);
+        return new IDPResponse(GoogleAuthProvider.PROVIDER_ID, account.getEmail(), response);
     }
 
     @Override

File: auth/src/main/java/com/firebase/ui/auth/ui/AcquireEmailHelper.java
Patch:
@@ -86,6 +86,7 @@ private void startEmailHandler(String email, List<String> providers) {
                         mActivityHelper.getApplicationContext(),
                         mActivityHelper.flowParams,
                         provider,
+                        null,
                         email);
                 mActivityHelper.startActivityForResult(intent, RC_WELCOME_BACK_IDP);
                 return;

File: auth/src/main/java/com/firebase/ui/auth/provider/GoogleProvider.java
Patch:
@@ -83,7 +83,7 @@ public void setAuthenticationCallback(IDPCallback callback) {
     private IDPResponse createIDPResponse(GoogleSignInAccount account) {
         Bundle response = new Bundle();
         response.putString(TOKEN_KEY, account.getIdToken());
-        return new IDPResponse(GoogleAuthProvider.PROVIDER_ID, response);
+        return new IDPResponse(GoogleAuthProvider.PROVIDER_ID, account.getEmail(), response);
     }
 
     @Override

File: auth/src/main/java/com/firebase/ui/auth/ui/AcquireEmailHelper.java
Patch:
@@ -86,6 +86,7 @@ private void startEmailHandler(String email, List<String> providers) {
                         mActivityHelper.getApplicationContext(),
                         mActivityHelper.flowParams,
                         provider,
+                        null,
                         email);
                 mActivityHelper.startActivityForResult(intent, RC_WELCOME_BACK_IDP);
                 return;

File: app/src/main/java/com/firebase/uidemo/ChatActivity.java
Patch:
@@ -223,13 +223,13 @@ public void setIsSender(Boolean isSender) {
 
             int color;
             if (isSender) {
-                color = ContextCompat.getColor(mView.getContext(), R.color.green_300);
+                color = ContextCompat.getColor(mView.getContext(), R.color.material_green_300);
 
                 left_arrow.setVisibility(View.GONE);
                 right_arrow.setVisibility(View.VISIBLE);
                 messageContainer.setGravity(Gravity.RIGHT);
             } else {
-                color = ContextCompat.getColor(mView.getContext(), R.color.grey_300);
+                color = ContextCompat.getColor(mView.getContext(), R.color.material_grey_300);
 
                 left_arrow.setVisibility(View.VISIBLE);
                 right_arrow.setVisibility(View.GONE);

File: auth/src/main/java/com/firebase/ui/auth/ui/account_link/SaveCredentialsActivity.java
Patch:
@@ -29,7 +29,7 @@
 import com.firebase.ui.auth.R;
 import com.firebase.ui.auth.util.FirebaseAuthWrapperFactory;
 import com.firebase.ui.auth.choreographer.ControllerConstants;
-import com.firebase.ui.auth.ui.NoControllerBaseActivity;
+import com.firebase.ui.auth.ui.AppCompatBase;
 import com.google.android.gms.auth.api.Auth;
 import com.google.android.gms.auth.api.credentials.Credential;
 import com.google.android.gms.auth.api.credentials.IdentityProviders;
@@ -41,7 +41,7 @@
 import com.google.firebase.auth.FacebookAuthProvider;
 import com.google.firebase.auth.GoogleAuthProvider;
 
-public class SaveCredentialsActivity extends NoControllerBaseActivity
+public class SaveCredentialsActivity extends AppCompatBase
         implements GoogleApiClient.ConnectionCallbacks, ResultCallback<Status>,
         GoogleApiClient.OnConnectionFailedListener {
     private static final String TAG = "CredentialsSaveBase";
@@ -78,7 +78,7 @@ public static Intent createIntent(
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.save_credentials_layout);
-        if (!FirebaseAuthWrapperFactory.getFirebaseAuthWrapper(mAppName)
+        if (!FirebaseAuthWrapperFactory.getFirebaseAuthWrapper(mActivityHelper.appName)
                 .isPlayServicesAvailable(this)) {
             finish(RESULT_FIRST_USER, getIntent());
         }

File: auth/src/main/java/com/firebase/ui/auth/ui/idp/AuthMethodPickerActivity.java
Patch:
@@ -133,7 +133,7 @@ public void onActivityResult(int requestCode, int resultCode, Intent data) {
     @Override
     public void onSuccess(IDPResponse response) {
         AuthCredential credential = createCredential(response);
-        FirebaseAuth firebaseAuth = getFirebaseAuth();
+        FirebaseAuth firebaseAuth = mActivityHelper.getFirebaseAuth();
         firebaseAuth.signInWithCredential(credential).addOnCompleteListener(
                 new OnCompleteListener<AuthResult>() {
                     @Override
@@ -159,8 +159,8 @@ public void onClick(View view) {
         if (view.getId() == R.id.email_provider) {
             Intent intent = EmailHintContainerActivity.getInitIntent(
                     this,
-                    mAppName,
-                    mTermsOfServiceUrl,
+                    mActivityHelper.appName,
+                    mActivityHelper.termsOfServiceUrl,
                     mProviderParcels
             );
             startActivityForResult(intent, RC_EMAIL_FLOW);

File: auth/src/main/java/com/firebase/ui/auth/ui/idp/IDPBaseActivity.java
Patch:
@@ -17,12 +17,12 @@
 import com.firebase.ui.auth.choreographer.idp.provider.FacebookProvider;
 import com.firebase.ui.auth.choreographer.idp.provider.GoogleProvider;
 import com.firebase.ui.auth.choreographer.idp.provider.IDPResponse;
-import com.firebase.ui.auth.ui.NoControllerBaseActivity;
+import com.firebase.ui.auth.ui.AppCompatBase;
 import com.google.firebase.auth.AuthCredential;
 import com.google.firebase.auth.FacebookAuthProvider;
 import com.google.firebase.auth.GoogleAuthProvider;
 
-public class IDPBaseActivity extends NoControllerBaseActivity {
+public class IDPBaseActivity extends AppCompatBase {
     protected AuthCredential createCredential(IDPResponse idpSignInResponse) {
         if (idpSignInResponse.getProviderType().equalsIgnoreCase(FacebookAuthProvider.PROVIDER_ID)) {
             return FacebookProvider.createAuthCredential(idpSignInResponse);

File: auth/src/main/java/com/firebase/ui/auth/ui/idp/IDPSignInContainerActivity.java
Patch:
@@ -100,7 +100,7 @@ private void startAccountLinkingActivity(FirebaseUser firebaseUser) {
         }
         startActivityForResult(AccountLinkInitActivity.createStartIntent(
                 this,
-                mAppName,
+                mActivityHelper.appName,
                 firebaseUser.getEmail(),
                 provider
         ), RC_ACCOUNT_LINK);
@@ -111,7 +111,7 @@ public void onSuccess(IDPResponse response) {
         Intent data = new Intent();
         data.putExtra(ControllerConstants.EXTRA_IDP_RESPONSE, response);
         AuthCredential credential = createCredential(response);
-        FirebaseAuth firebaseAuth = getFirebaseAuth();
+        FirebaseAuth firebaseAuth = mActivityHelper.getFirebaseAuth();
         Task<AuthResult> authResultTask = firebaseAuth.signInWithCredential(credential);
         authResultTask
                 .addOnCompleteListener(new OnCompleteListener<AuthResult>() {

File: auth/src/main/java/com/firebase/ui/auth/ui/email/AcquireEmailActivity.java
Patch:
@@ -62,6 +62,7 @@ private void startEmailHandler(String email, List<String> providers) {
             Intent registerIntent = RegisterEmailActivity.createIntent(
                     AcquireEmailActivity.this,
                     email,
+                    mTermsOfServiceUrl,
                     mAppName
             );
             startActivityForResult(registerIntent, RC_REGISTER_ACCOUNT);

File: auth/src/main/java/com/firebase/ui/auth/ui/email/RegisterEmailActivity.java
Patch:
@@ -102,9 +102,11 @@ protected void onCreate(Bundle savedInstanceState) {
     public static Intent createIntent(
             Context context,
             String email,
+            String tosUrl,
             String appName) {
        return new Intent(context, RegisterEmailActivity.class)
                .putExtra(ControllerConstants.EXTRA_APP_NAME, appName)
+               .putExtra(ControllerConstants.EXTRA_TERMS_OF_SERVICE_URL, tosUrl)
                .putExtra(ControllerConstants.EXTRA_EMAIL, email);
     }
 

File: auth/src/main/java/com/firebase/ui/auth/ui/email/SignInNoPasswordActivity.java
Patch:
@@ -59,11 +59,13 @@ public static Intent createIntent(
             Context context,
             String email,
             String appName,
+            String tosUrl,
             ArrayList<IDPProviderParcel> providers
     ) {
         return new Intent(context, SignInNoPasswordActivity.class)
                 .putExtra(ControllerConstants.EXTRA_EMAIL, email)
                 .putExtra(ControllerConstants.EXTRA_APP_NAME, appName)
+                .putExtra(ControllerConstants.EXTRA_TERMS_OF_SERVICE_URL, tosUrl)
                 .putExtra(ControllerConstants.EXTRA_PROVIDERS, providers);
     }
 

File: auth/src/main/java/com/firebase/ui/auth/ui/idp/AuthMethodPickerActivity.java
Patch:
@@ -160,6 +160,7 @@ public void onClick(View view) {
             Intent intent = EmailHintContainerActivity.getInitIntent(
                     this,
                     mAppName,
+                    mTermsOfServiceUrl,
                     mProviderParcels
             );
             startActivityForResult(intent, RC_EMAIL_FLOW);
@@ -174,10 +175,11 @@ public void onClick(View view) {
      * @return The intent to start the authentication picker activity.
      */
     public static Intent createIntent(
-            Context context, String appName, ArrayList<IDPProviderParcel> parcels) {
+            Context context, String appName, String tosUrl, ArrayList<IDPProviderParcel> parcels) {
         return new Intent()
                 .setClass(context, AuthMethodPickerActivity.class)
                 .putExtra(ControllerConstants.EXTRA_APP_NAME, appName)
+                .putExtra(ControllerConstants.EXTRA_TERMS_OF_SERVICE_URL, tosUrl)
                 .putParcelableArrayListExtra(ControllerConstants.EXTRA_PROVIDERS, parcels);
     }
 }

File: auth/src/main/java/com/firebase/ui/auth/ui/email/AcquireEmailActivity.java
Patch:
@@ -62,6 +62,7 @@ private void startEmailHandler(String email, List<String> providers) {
             Intent registerIntent = RegisterEmailActivity.createIntent(
                     AcquireEmailActivity.this,
                     email,
+                    mTermsOfServiceUrl,
                     mAppName
             );
             startActivityForResult(registerIntent, RC_REGISTER_ACCOUNT);

File: auth/src/main/java/com/firebase/ui/auth/ui/email/RegisterEmailActivity.java
Patch:
@@ -102,9 +102,11 @@ protected void onCreate(Bundle savedInstanceState) {
     public static Intent createIntent(
             Context context,
             String email,
+            String tosUrl,
             String appName) {
        return new Intent(context, RegisterEmailActivity.class)
                .putExtra(ControllerConstants.EXTRA_APP_NAME, appName)
+               .putExtra(ControllerConstants.EXTRA_TERMS_OF_SERVICE_URL, tosUrl)
                .putExtra(ControllerConstants.EXTRA_EMAIL, email);
     }
 

File: auth/src/main/java/com/firebase/ui/auth/ui/email/SignInNoPasswordActivity.java
Patch:
@@ -59,11 +59,13 @@ public static Intent createIntent(
             Context context,
             String email,
             String appName,
+            String tosUrl,
             ArrayList<IDPProviderParcel> providers
     ) {
         return new Intent(context, SignInNoPasswordActivity.class)
                 .putExtra(ControllerConstants.EXTRA_EMAIL, email)
                 .putExtra(ControllerConstants.EXTRA_APP_NAME, appName)
+                .putExtra(ControllerConstants.EXTRA_TERMS_OF_SERVICE_URL, tosUrl)
                 .putExtra(ControllerConstants.EXTRA_PROVIDERS, providers);
     }
 

File: auth/src/main/java/com/firebase/ui/auth/ui/idp/AuthMethodPickerActivity.java
Patch:
@@ -160,6 +160,7 @@ public void onClick(View view) {
             Intent intent = EmailHintContainerActivity.getInitIntent(
                     this,
                     mAppName,
+                    mTermsOfServiceUrl,
                     mProviderParcels
             );
             startActivityForResult(intent, RC_EMAIL_FLOW);
@@ -174,10 +175,11 @@ public void onClick(View view) {
      * @return The intent to start the authentication picker activity.
      */
     public static Intent createIntent(
-            Context context, String appName, ArrayList<IDPProviderParcel> parcels) {
+            Context context, String appName, String tosUrl, ArrayList<IDPProviderParcel> parcels) {
         return new Intent()
                 .setClass(context, AuthMethodPickerActivity.class)
                 .putExtra(ControllerConstants.EXTRA_APP_NAME, appName)
+                .putExtra(ControllerConstants.EXTRA_TERMS_OF_SERVICE_URL, tosUrl)
                 .putParcelableArrayListExtra(ControllerConstants.EXTRA_PROVIDERS, parcels);
     }
 }

File: auth/src/main/java/com/firebase/ui/auth/ui/email/RegisterEmailActivity.java
Patch:
@@ -127,7 +127,7 @@ protected void blockHandling(Intent nextIntent) {
 
     @Override
     public void onClick(View view) {
-        if(super.isPendingFinishing.get()) {
+        if (super.isPendingFinishing.get()) {
             return;
         }
         if (view.getId() == R.id.button_create) {

File: auth/src/main/java/com/firebase/ui/auth/ui/email/RecoverPasswordActivity.java
Patch:
@@ -51,7 +51,7 @@ protected void onCreate(Bundle savedInstanceState) {
 
     @Override
     public void onClick(View view) {
-        if(super.isPendingFinishing.get()) {
+        if (super.isPendingFinishing.get()) {
             return;
         }
         if (view.getId() == R.id.button_done) {

File: auth/src/main/java/com/firebase/ui/auth/ui/email/SignInNoPasswordActivity.java
Patch:
@@ -41,7 +41,7 @@ protected void onCreate(Bundle savedInstanceState) {
         mEmailFieldValidator = new EmailFieldValidator(
                 (TextInputLayout) findViewById(R.id.input_layout_email));
         mEmailEditText = (EditText) findViewById(R.id.email);
-        if(email != null) {
+        if (email != null) {
             mEmailEditText.setText(email);
         }
 
@@ -57,7 +57,7 @@ public void onClick(View view) {
         if (super.isPendingFinishing.get()) {
             return;
         }
-        if(!mEmailFieldValidator.validate(mEmailEditText.getText())) {
+        if (!mEmailFieldValidator.validate(mEmailEditText.getText())) {
             return;
         }
         showLoadingDialog(getResources().getString(R.string.progress_dialog_loading));

File: auth/src/main/java/com/firebase/ui/auth/ui/email/SignInActivity.java
Patch:
@@ -72,7 +72,7 @@ protected void onCreate(Bundle savedInstanceState) {
         Button signInButton = (Button) findViewById(R.id.button_done);
         TextView recoveryButton =  (TextView) findViewById(R.id.trouble_signing_in);
 
-        if(email != null) {
+        if (email != null) {
             mEmailEditText.setText(email);
         }
         signInButton.setOnClickListener(this);
@@ -94,7 +94,7 @@ protected void blockHandling(Intent nextIntent) {
 
     @Override
     public void onClick(View view) {
-        if( super.isPendingFinishing.get()) {
+        if (super.isPendingFinishing.get()) {
             return;
         }
         if (view.getId() == R.id.button_done) {

File: auth/src/main/java/com/firebase/ui/auth/ui/email/SignInNoPasswordActivity.java
Patch:
@@ -41,7 +41,7 @@ protected void onCreate(Bundle savedInstanceState) {
         mEmailFieldValidator = new EmailFieldValidator(
                 (TextInputLayout) findViewById(R.id.input_layout_email));
         mEmailEditText = (EditText) findViewById(R.id.email);
-        if(email != null) {
+        if (email != null) {
             mEmailEditText.setText(email);
         }
 
@@ -57,7 +57,7 @@ public void onClick(View view) {
         if (super.isPendingFinishing.get()) {
             return;
         }
-        if(!mEmailFieldValidator.validate(mEmailEditText.getText())) {
+        if (!mEmailFieldValidator.validate(mEmailEditText.getText())) {
             return;
         }
         showLoadingDialog(getResources().getString(R.string.progress_dialog_loading));

File: auth/src/main/java/com/firebase/ui/auth/ui/email/SignInActivity.java
Patch:
@@ -72,7 +72,7 @@ protected void onCreate(Bundle savedInstanceState) {
         Button signInButton = (Button) findViewById(R.id.button_done);
         TextView recoveryButton =  (TextView) findViewById(R.id.trouble_signing_in);
 
-        if(email != null) {
+        if (email != null) {
             mEmailEditText.setText(email);
         }
         signInButton.setOnClickListener(this);
@@ -94,7 +94,7 @@ protected void blockHandling(Intent nextIntent) {
 
     @Override
     public void onClick(View view) {
-        if( super.isPendingFinishing.get()) {
+        if (super.isPendingFinishing.get()) {
             return;
         }
         if (view.getId() == R.id.button_done) {

File: auth/src/main/java/com/firebase/ui/auth/ui/email/RegisterEmailActivity.java
Patch:
@@ -127,7 +127,7 @@ protected void blockHandling(Intent nextIntent) {
 
     @Override
     public void onClick(View view) {
-        if(super.isPendingFinishing.get()) {
+        if (super.isPendingFinishing.get()) {
             return;
         }
         if (view.getId() == R.id.button_create) {

File: auth/src/main/java/com/firebase/ui/auth/ui/email/RecoverPasswordActivity.java
Patch:
@@ -51,7 +51,7 @@ protected void onCreate(Bundle savedInstanceState) {
 
     @Override
     public void onClick(View view) {
-        if(super.isPendingFinishing.get()) {
+        if (super.isPendingFinishing.get()) {
             return;
         }
         if (view.getId() == R.id.button_done) {

File: auth/src/main/java/com/firebase/ui/auth/ui/email/EmailHintContainerActivity.java
Patch:
@@ -40,7 +40,7 @@ protected void onCreate(Bundle savedInstanceState) {
 
         PendingIntent hintIntent = apiWrapper.getEmailHintIntent(this);
 
-        if(hintIntent != null) {
+        if (hintIntent != null) {
             try {
                 startIntentSenderForResult(hintIntent.getIntentSender(), RC_HINT, null, 0, 0, 0);
                 return;
@@ -55,9 +55,9 @@ protected void onCreate(Bundle savedInstanceState) {
     @Override
     public void onActivityResult(int requestCode, int resultCode, Intent data) {
         super.onActivityResult(requestCode, resultCode, data);
-        if( requestCode == RC_HINT && data != null) {
+        if (requestCode == RC_HINT && data != null) {
             Credential credential = data.getParcelableExtra(Credential.EXTRA_KEY);
-            if(credential == null) {
+            if (credential == null) {
                 finish(BaseActivity.RESULT_CANCELED, new Intent());
                 return;
             }

File: auth/src/main/java/com/firebase/ui/auth/api/package-info.java
Patch:
@@ -15,4 +15,4 @@
 /**
  * TODO: javadoc
  */
-package com.firebase.ui.auth.api;
\ No newline at end of file
+package com.firebase.ui.auth.api;

File: auth/src/main/java/com/firebase/ui/auth/api/FirebaseAuthWrapper.java
Patch:
@@ -57,7 +57,8 @@ public interface FirebaseAuthWrapper {
 
     @WorkerThread
     @Nullable
-    FirebaseUser createUserWithEmailAndPassword(@NonNull String email, @NonNull String password);
+    FirebaseUser createUserWithEmailAndPassword(@NonNull String email, @NonNull String password)
+            throws ExecutionException, InterruptedException;
 
     @WorkerThread
     FirebaseUser linkWithCredential(

File: auth/src/main/java/com/firebase/ui/auth/ui/email/RegisterEmailActivity.java
Patch:
@@ -109,8 +109,8 @@ private void setUpTermsOfService() {
     @Override
     protected void blockHandling(Intent nextIntent) {
         super.blockHandling(nextIntent);
-        TextInputLayout passwordInput = (TextInputLayout) findViewById(R.id.password_layout);
-        passwordInput.setError(nextIntent.getStringExtra(ControllerConstants.EXTRA_ERROR_MESSAGE));
+        TextInputLayout emailInput = (TextInputLayout) findViewById(R.id.email_layout);
+        emailInput.setError(nextIntent.getStringExtra(ControllerConstants.EXTRA_ERROR_MESSAGE));
     }
 
     @Override

File: auth/src/main/java/com/firebase/ui/auth/ui/credentials/ChooseAccountActivity.java
Patch:
@@ -22,7 +22,7 @@
 import com.firebase.ui.auth.choreographer.credentials.CredentialsController;
 import com.google.android.gms.auth.api.credentials.Credential;
 
-public class ChooseAccountActivity extends CredentialsBaseActivity{
+public class ChooseAccountActivity extends CredentialsBaseActivity {
     private static final String TAG = "ChooseAccountActivity";
     private static final int RC_CREDENTIALS_READ = 2;
 

File: auth/src/main/java/com/firebase/ui/auth/choreographer/credentials/CredentialsController.java
Patch:
@@ -77,7 +77,7 @@ public Action next(Result result) {
                         mCredentialsAPI.googleSilentSignIn();
                         // TODO: (serikb) authenticate Firebase user and continue to application
                         FirebaseUser loggedInUser;
-                        if (!password.isEmpty()) {
+                        if (password != null && !password.isEmpty()) {
                             loggedInUser =
                                     FirebaseAuthWrapperFactory.getFirebaseAuthWrapper(mAppName)
                                             .signInWithEmailPassword(email, password);

File: auth/src/main/java/com/firebase/ui/auth/ui/BaseActivity.java
Patch:
@@ -93,6 +93,7 @@ protected void doAction(Action action) {
             finish();
             return;
         } else if (action.getNextId() == Controller.BLOCK_AT_CURRENT_ACTIVITY_ID) {
+            isPendingFinishing.set(false);
             blockHandling(action.getNextIntent());
             return;
         } else if (action.getNextId() == Controller.START_NEW_FLOW_ID) {

File: auth/src/main/java/com/firebase/ui/auth/ui/account_link/AccountLinkInitActivity.java
Patch:
@@ -20,7 +20,7 @@ protected void onCreate(Bundle savedInstanceState) {
 
     @Override
     protected Controller setUpController() {
-        return new AccountLinkController(getApplicationContext());
+        return new AccountLinkController(getApplicationContext(), mAppName);
     }
 
     public static Intent createStartIntent(Context context, String appName, String id, String

File: auth/src/main/java/com/firebase/ui/auth/ui/account_link/SaveCredentialsActivity.java
Patch:
@@ -87,7 +87,7 @@ protected void onCreate(Bundle savedInstanceState) {
 
     @Override
     protected Controller setUpController() {
-        return new AccountLinkController(getApplicationContext());
+        return new AccountLinkController(getApplicationContext(), mAppName);
     }
 
     @Override

File: auth/src/main/java/com/firebase/ui/auth/ui/account_link/WelcomeBackPasswordPrompt.java
Patch:
@@ -49,7 +49,7 @@ protected void onCreate(Bundle savedInstanceState) {
 
     @Override
     protected Controller setUpController() {
-        return new AccountLinkController(getApplicationContext());
+        return new AccountLinkController(getApplicationContext(), mAppName);
     }
 
     @Override

File: auth/src/main/java/com/firebase/ui/auth/choreographer/email/EmailFlowController.java
Patch:
@@ -37,7 +37,6 @@ public class EmailFlowController implements Controller {
     static final int ID_REGISTER_EMAIL = 40;
     public static final int ID_RECOVER_PASSWORD = 80;
     static final int ID_CONFIRM_RECOVER_PASSWORD = 90;
-    static final int ID_SAVE_CREDENTIALS = 100;
     private final Context mAppContext;
     private final String mAppName;
 

File: auth/src/main/java/com/firebase/ui/auth/choreographer/email/EmailFlowController.java
Patch:
@@ -37,7 +37,6 @@ public class EmailFlowController implements Controller {
     static final int ID_REGISTER_EMAIL = 40;
     public static final int ID_RECOVER_PASSWORD = 80;
     static final int ID_CONFIRM_RECOVER_PASSWORD = 90;
-    static final int ID_SAVE_CREDENTIALS = 100;
     private final Context mAppContext;
     private final String mAppName;
 

File: auth/src/main/java/com/firebase/ui/auth/ui/idp/IDPBaseActivity.java
Patch:
@@ -1,5 +1,6 @@
 package com.firebase.ui.auth.ui.idp;
 
+import android.app.Activity;
 import android.os.Bundle;
 
 import com.firebase.ui.auth.choreographer.Controller;
@@ -8,8 +9,8 @@
 
 public class IDPBaseActivity extends BaseActivity {
 
-    public static final int EMAIL_LOGIN_NEEDED = RESULT_FIRST_USER + 2;
-    public static final int LOGIN_CANCELLED = RESULT_FIRST_USER + 3;
+    public static final int EMAIL_LOGIN_NEEDED = Activity.RESULT_FIRST_USER + 2;
+    public static final int LOGIN_CANCELLED = Activity.RESULT_FIRST_USER + 3;
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {

File: library/src/main/java/com/firebase/ui/database/FirebaseListAdapter.java
Patch:
@@ -46,7 +46,7 @@
  *
  * <blockquote><pre>
  * {@code
- *     Firebase ref = new Firebase("https://<yourapp>.firebaseio.com");
+ *     DatabaseReference ref = FirebaseDatabase.getInstance().getReference();
  *     ListAdapter adapter = new FirebaseListAdapter<ChatMessage>(this, ChatMessage.class, android.R.layout.two_line_list_item, mRef)
  *     {
  *         protected void populateView(View view, ChatMessage chatMessage, int position)

File: library/src/main/java/com/firebase/ui/database/FirebaseRecyclerAdapter.java
Patch:
@@ -62,13 +62,13 @@
  *     }
  *
  *     FirebaseRecyclerAdapter<ChatMessage, ChatMessageViewHolder> adapter;
- *     ref = new Firebase("https://<yourapp>.firebaseio.com");
+ *     DatabaseReference ref = FirebaseDatabase.getInstance().getReference();
  *
  *     RecyclerView recycler = (RecyclerView) findViewById(R.id.messages_recycler);
  *     recycler.setHasFixedSize(true);
  *     recycler.setLayoutManager(new LinearLayoutManager(this));
  *
- *     adapter = new FirebaseRecyclerAdapter<ChatMessage, ChatMessageViewHolder>(ChatMessage.class, android.R.layout.two_line_list_item, ChatMessageViewHolder.class, mRef) {
+ *     adapter = new FirebaseRecyclerAdapter<ChatMessage, ChatMessageViewHolder>(ChatMessage.class, android.R.layout.two_line_list_item, ChatMessageViewHolder.class, ref) {
  *         public void populateViewHolder(ChatMessageViewHolder chatMessageViewHolder, ChatMessage chatMessage, int position) {
  *             chatMessageViewHolder.nameText.setText(chatMessage.getName());
  *             chatMessageViewHolder.messageText.setText(chatMessage.getMessage());

File: library/src/main/java/com/firebase/ui/auth/core/FirebaseLoginDialog.java
Patch:
@@ -64,7 +64,7 @@ public Dialog onCreateDialog(Bundle savedInstanceState) {
 
         for (AuthProviderType providerType : AuthProviderType.values()) {
             if (mEnabledProvidersByType.keySet().contains(providerType)) {
-                showLoginOption(mEnabledProvidersByType.get(providerType), providerType.getViewId());
+                showLoginOption(mEnabledProvidersByType.get(providerType), providerType.getButtonId());
             }
             else {
                 mView.findViewById(providerType.getViewId()).setVisibility(View.GONE);

File: library/src/main/java/com/firebase/ui/auth/core/FirebaseLoginDialog.java
Patch:
@@ -64,10 +64,10 @@ public Dialog onCreateDialog(Bundle savedInstanceState) {
 
         for (AuthProviderType providerType : AuthProviderType.values()) {
             if (mEnabledProvidersByType.keySet().contains(providerType)) {
-                showLoginOption(mEnabledProvidersByType.get(providerType), providerType.getLayoutId());
+                showLoginOption(mEnabledProvidersByType.get(providerType), providerType.getViewId());
             }
             else {
-                mView.findViewById(providerType.getLayoutId()).setVisibility(View.GONE);
+                mView.findViewById(providerType.getViewId()).setVisibility(View.GONE);
             }
         }
 

File: library/src/main/java/com/firebase/ui/auth/core/FirebaseLoginDialog.java
Patch:
@@ -64,10 +64,10 @@ public Dialog onCreateDialog(Bundle savedInstanceState) {
 
         for (AuthProviderType providerType : AuthProviderType.values()) {
             if (mEnabledProvidersByType.keySet().contains(providerType)) {
-                showLoginOption(mEnabledProvidersByType.get(providerType), providerType.getButtonId());
+                showLoginOption(mEnabledProvidersByType.get(providerType), providerType.getLayoutId());
             }
             else {
-                mView.findViewById(providerType.getButtonId()).setVisibility(View.GONE);
+                mView.findViewById(providerType.getLayoutId()).setVisibility(View.GONE);
             }
         }
 

File: library/src/main/java/com/firebase/ui/auth/core/FirebaseLoginDialog.java
Patch:
@@ -94,8 +94,10 @@ public FirebaseLoginDialog setContext(Context context) {
     }
 
     public void reset() {
+      if (mView != null) {
         mView.findViewById(R.id.login_section).setVisibility(View.VISIBLE);
         mView.findViewById(R.id.loading_section).setVisibility(View.GONE);
+      }
     }
 
     public void logout() {

File: library/src/main/java/com/firebase/ui/auth/core/FirebaseLoginBaseActivity.java
Patch:
@@ -2,7 +2,6 @@
 
 import android.content.Intent;
 import android.support.v7.app.AppCompatActivity;
-import android.util.Log;
 
 import com.firebase.client.AuthData;
 import com.firebase.client.Firebase;
@@ -106,7 +105,7 @@ public void resetFirebaseLoginDialog() {
      *
      * @param provider the provider to enable.
      */
-    public void setEnabledAuthProvider(SocialProvider provider) {
+    public void setEnabledAuthProvider(AuthProviderType provider) {
         mDialog.setEnabledProvider(provider);
     }
 

File: library/src/main/java/com/firebase/ui/auth/facebook/FacebookAuthProvider.java
Patch:
@@ -19,7 +19,7 @@
 import com.firebase.ui.auth.core.FirebaseResponse;
 import com.firebase.ui.auth.core.FirebaseLoginError;
 import com.firebase.ui.auth.core.FirebaseOAuthToken;
-import com.firebase.ui.auth.core.SocialProvider;
+import com.firebase.ui.auth.core.AuthProviderType;
 import com.firebase.ui.auth.core.TokenAuthHandler;
 
 import java.util.Arrays;
@@ -32,7 +32,7 @@ public class FacebookAuthProvider extends FirebaseAuthProvider {
     private LoginManager mLoginManager;
     private Boolean isReady = false;
 
-    public FacebookAuthProvider(Context context, SocialProvider providerType, String providerName, Firebase ref, final TokenAuthHandler handler) {
+    public FacebookAuthProvider(Context context, AuthProviderType providerType, String providerName, Firebase ref, final TokenAuthHandler handler) {
         super(context, providerType, providerName, ref, handler);
         FacebookSdk.sdkInitialize(context.getApplicationContext());
 

File: library/src/main/java/com/firebase/ui/auth/google/GoogleAuthProvider.java
Patch:
@@ -12,7 +12,7 @@
 import com.firebase.ui.auth.core.FirebaseLoginError;
 import com.firebase.ui.auth.core.FirebaseOAuthToken;
 import com.firebase.ui.auth.core.FirebaseResponse;
-import com.firebase.ui.auth.core.SocialProvider;
+import com.firebase.ui.auth.core.AuthProviderType;
 import com.firebase.ui.auth.core.TokenAuthHandler;
 import com.google.android.gms.auth.api.Auth;
 import com.google.android.gms.auth.api.signin.GoogleSignInAccount;
@@ -32,7 +32,7 @@ public class GoogleAuthProvider extends FirebaseAuthProvider implements
     private GoogleApiClient mGoogleApiClient;
     private Integer onConnectedAction = 0;
 
-    public GoogleAuthProvider(Context context, SocialProvider providerType, String providerName, Firebase ref, TokenAuthHandler handler) {
+    public GoogleAuthProvider(Context context, AuthProviderType providerType, String providerName, Firebase ref, TokenAuthHandler handler) {
         super(context, providerType, providerName, ref, handler);
 
         GoogleSignInOptions gso = new GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)

File: library/src/main/java/com/firebase/ui/auth/password/PasswordAuthProvider.java
Patch:
@@ -1,6 +1,5 @@
 package com.firebase.ui.auth.password;
 
-import android.app.Activity;
 import android.content.Context;
 
 import com.firebase.client.AuthData;
@@ -9,14 +8,14 @@
 import com.firebase.ui.auth.core.FirebaseAuthProvider;
 import com.firebase.ui.auth.core.FirebaseResponse;
 import com.firebase.ui.auth.core.FirebaseLoginError;
-import com.firebase.ui.auth.core.SocialProvider;
+import com.firebase.ui.auth.core.AuthProviderType;
 import com.firebase.ui.auth.core.TokenAuthHandler;
 
 public class PasswordAuthProvider extends FirebaseAuthProvider {
 
     private final String LOG_TAG = "PasswordAuthProvider";
 
-    public PasswordAuthProvider(Context context, SocialProvider providerType, String providerName, Firebase ref, TokenAuthHandler handler) {
+    public PasswordAuthProvider(Context context, AuthProviderType providerType, String providerName, Firebase ref, TokenAuthHandler handler) {
         super(context, providerType, providerName, ref, handler);
     }
 

File: library/src/main/java/com/firebase/ui/auth/twitter/TwitterAuthProvider.java
Patch:
@@ -9,14 +9,14 @@
 import com.firebase.ui.auth.core.FirebaseLoginError;
 import com.firebase.ui.auth.core.FirebaseOAuthToken;
 import com.firebase.ui.auth.core.FirebaseResponse;
-import com.firebase.ui.auth.core.SocialProvider;
+import com.firebase.ui.auth.core.AuthProviderType;
 import com.firebase.ui.auth.core.TokenAuthHandler;
 
 public class TwitterAuthProvider extends FirebaseAuthProvider {
 
     public static final String TAG = "TwitterAuthProvider";
 
-    public TwitterAuthProvider(Context context, SocialProvider providerType, String providerName, Firebase ref, TokenAuthHandler handler) {
+    public TwitterAuthProvider(Context context, AuthProviderType providerType, String providerName, Firebase ref, TokenAuthHandler handler) {
         super(context, providerType, providerName, ref, handler);
     }
 

File: library/src/main/java/com/firebase/ui/auth/core/FirebaseAuthProvider.java
Patch:
@@ -11,6 +11,7 @@
 import java.util.Map;
 
 public abstract class FirebaseAuthProvider {
+    private static final String TAG = "FirebaseAuthProvider";
     private final Context mContext;
     private final SocialProvider mProviderType;
     private final String mProviderName;
@@ -52,7 +53,8 @@ public void onAuthenticated(AuthData authData) {
 
             @Override
             public void onAuthenticationError(FirebaseError firebaseError) {
-                handler.onProviderError(new FirebaseLoginError(FirebaseResponse.PROVIDER_NOT_ENABLED, "Make sure " + getProviderName() + " login is enabled and configured in your Firebase."));
+                Log.e(TAG, "Authentication failed: "+firebaseError.toString());
+                handler.onProviderError(new FirebaseLoginError(FirebaseResponse.PROVIDER_NOT_ENABLED, "Make sure " + getProviderName() + " login is enabled and configured in your Firebase. ("+firebaseError.toString()+")"));
             }
         };
 

File: app/src/main/java/com/firebase/uidemo/RecyclerViewDemoActivity.java
Patch:
@@ -101,9 +101,9 @@ public void populateViewHolder(ChatHolder chatView, Chat chat) {
     @Override
     protected void onStart() {
         super.onStart();
-        setEnabledAuthProvider(SocialProvider.facebook);
-        setEnabledAuthProvider(SocialProvider.twitter);
-        setEnabledAuthProvider(SocialProvider.google);
+//        setEnabledAuthProvider(SocialProvider.facebook);
+//        setEnabledAuthProvider(SocialProvider.twitter);
+//        setEnabledAuthProvider(SocialProvider.google);
         setEnabledAuthProvider(SocialProvider.password);
     }
 

File: library/src/main/java/com/firebase/ui/auth/core/FirebaseLoginError.java
Patch:
@@ -2,15 +2,15 @@
 
 public class FirebaseLoginError {
     public String message;
-    public int error;
+    public FirebaseResponse error;
 
-    public FirebaseLoginError(int error, String message) {
+    public FirebaseLoginError(FirebaseResponse error, String message) {
         this.message = message;
         this.error = error;
     }
 
     public String toString() {
-        return Integer.toString(error) + ": " + message;
+        return error.toString() + ": " + message;
     }
 
 }

File: library/src/main/java/com/firebase/ui/auth/core/FirebaseAuthHelper.java
Patch:
@@ -26,6 +26,7 @@ public void onFirebaseTokenReceived(FirebaseOAuthToken token, TokenAuthHandler h
     }
 
     private void authenticateRefWithOAuthFirebasetoken(FirebaseOAuthToken token, final TokenAuthHandler handler) {
+        Log.d("Got a token", token.token);
         Firebase.AuthResultHandler authResultHandler = new Firebase.AuthResultHandler() {
             @Override
             public void onAuthenticated(AuthData authData) {
@@ -34,7 +35,7 @@ public void onAuthenticated(AuthData authData) {
 
             @Override
             public void onAuthenticationError(FirebaseError firebaseError) {
-                handler.onProviderError(new FirebaseLoginError(FirebaseErrors.PROVIDER_NOT_ENABLED, "Make sure " + getProviderName() + " login is enabled and configured in your Firebase."));
+                handler.onProviderError(new FirebaseLoginError(FirebaseResponse.PROVIDER_NOT_ENABLED, "Make sure " + getProviderName() + " login is enabled and configured in your Firebase."));
             }
         };
 

File: library/src/main/java/com/firebase/ui/auth/password/PasswordAuthHelper.java
Patch:
@@ -7,7 +7,7 @@
 import com.firebase.client.Firebase;
 import com.firebase.client.FirebaseError;
 import com.firebase.ui.auth.core.FirebaseAuthHelper;
-import com.firebase.ui.auth.core.FirebaseErrors;
+import com.firebase.ui.auth.core.FirebaseResponse;
 import com.firebase.ui.auth.core.FirebaseLoginError;
 import com.firebase.ui.auth.core.TokenAuthHandler;
 
@@ -35,7 +35,7 @@ public void onAuthenticated(AuthData authData) {
             }
             @Override
             public void onAuthenticationError(FirebaseError firebaseError) {
-                mHandler.onUserError(new FirebaseLoginError(FirebaseErrors.MISC_PROVIDER_ERROR, firebaseError.toString()));
+                mHandler.onUserError(new FirebaseLoginError(FirebaseResponse.MISC_PROVIDER_ERROR, firebaseError.toString()));
             }
         });
     }

File: app/src/main/java/com/firebase/uidemo/RecyclerViewDemoActivity.java
Patch:
@@ -22,6 +22,7 @@
 import com.firebase.client.Query;
 import com.firebase.ui.auth.core.FirebaseLoginBaseActivity;
 import com.firebase.ui.FirebaseRecyclerViewAdapter;
+import com.firebase.ui.auth.core.FirebaseLoginError;
 
 public class RecyclerViewDemoActivity extends FirebaseLoginBaseActivity {
 
@@ -147,12 +148,12 @@ public void onFirebaseLogout() {
     }
 
     @Override
-    public void onFirebaseLoginProviderError(FirebaseError firebaseError) {
+    public void onFirebaseLoginProviderError(FirebaseLoginError firebaseError) {
         Log.i(TAG, "Login provider error: " + firebaseError.toString());
     }
 
     @Override
-    public void onFirebaseLoginUserError(FirebaseError firebaseError) {
+    public void onFirebaseLoginUserError(FirebaseLoginError firebaseError) {
         Log.i(TAG, "Login user error: " + firebaseError.toString());
     }
 

File: library/src/main/java/com/firebase/ui/auth/core/FirebaseAuthHelper.java
Patch:
@@ -29,13 +29,12 @@ private void authenticateRefWithOAuthFirebasetoken(FirebaseOAuthToken token, fin
         Firebase.AuthResultHandler authResultHandler = new Firebase.AuthResultHandler() {
             @Override
             public void onAuthenticated(AuthData authData) {
-                Log.d("Helper", "GO GO GO");
                 handler.onSuccess(authData);
             }
 
             @Override
             public void onAuthenticationError(FirebaseError firebaseError) {
-                handler.onProviderError(new FirebaseError(0, "Make sure " + getProviderName() + " login is enabled and configured in your Firebase."));
+                handler.onProviderError(new FirebaseLoginError(FirebaseErrors.PROVIDER_NOT_ENABLED, "Make sure " + getProviderName() + " login is enabled and configured in your Firebase."));
             }
         };
 

File: library/src/main/java/com/firebase/ui/auth/core/FirebaseLoginDialog.java
Patch:
@@ -97,12 +97,12 @@ public void onSuccess(AuthData auth) {
             }
 
             @Override
-            public void onUserError(FirebaseError err) {
+            public void onUserError(FirebaseLoginError err) {
                 handler.onUserError(err);
             }
 
             @Override
-            public void onProviderError(FirebaseError err) {
+            public void onProviderError(FirebaseLoginError err) {
                 handler.onProviderError(err);
             }
         };

File: library/src/main/java/com/firebase/ui/auth/core/TokenAuthHandler.java
Patch:
@@ -5,6 +5,6 @@
 
 public interface TokenAuthHandler {
     void onSuccess(AuthData auth);
-    void onUserError(FirebaseError err);
-    void onProviderError(FirebaseError err);
+    void onUserError(FirebaseLoginError err);
+    void onProviderError(FirebaseLoginError err);
 }
\ No newline at end of file

File: library/src/main/java/com/firebase/ui/auth/password/PasswordAuthHelper.java
Patch:
@@ -7,6 +7,8 @@
 import com.firebase.client.Firebase;
 import com.firebase.client.FirebaseError;
 import com.firebase.ui.auth.core.FirebaseAuthHelper;
+import com.firebase.ui.auth.core.FirebaseErrors;
+import com.firebase.ui.auth.core.FirebaseLoginError;
 import com.firebase.ui.auth.core.TokenAuthHandler;
 
 public class PasswordAuthHelper extends FirebaseAuthHelper {
@@ -33,7 +35,7 @@ public void onAuthenticated(AuthData authData) {
             }
             @Override
             public void onAuthenticationError(FirebaseError firebaseError) {
-                mHandler.onUserError(firebaseError);
+                mHandler.onUserError(new FirebaseLoginError(FirebaseErrors.MISC_PROVIDER_ERROR, firebaseError.toString()));
             }
         });
     }

File: library/src/main/java/com/firebase/ui/FirebaseLoginDialog.java
Patch:
@@ -58,11 +58,8 @@ public void onActivityResult(int requestCode, int resultCode, Intent data) {
     @Override
     public Dialog onCreateDialog(Bundle savedInstanceState) {
         AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
-        // Get the layout inflater
         LayoutInflater inflater = getActivity().getLayoutInflater();
 
-        // Inflate and set the layout for the dialog
-        // Pass null as the parent view because its going in the dialog layout
         mView = inflater.inflate(R.layout.fragment_firebase_login, null);
 
         if (mFacebookAuthHelper != null) showLoginOption(mFacebookAuthHelper, R.id.facebook_button);

File: library/src/main/java/com/firebase/ui/auth/FirebaseAuthHelper.java
Patch:
@@ -29,7 +29,7 @@ private void authenticateRefWithOAuthFirebasetoken(FirebaseOAuthToken token, fin
         Firebase.AuthResultHandler authResultHandler = new Firebase.AuthResultHandler() {
             @Override
             public void onAuthenticated(AuthData authData) {
-                // Do nothing. Auth updates are handled in the AuthStateListener
+                Log.d("Helper", "GO GO GO");
                 handler.onSuccess(authData);
             }
 

File: library/src/main/java/com/firebase/ui/auth/TwitterAuthHelper.java
Patch:
@@ -3,6 +3,7 @@
 import android.app.Activity;
 import android.content.Context;
 import android.content.Intent;
+import android.util.Log;
 
 import com.firebase.client.Firebase;
 import com.firebase.client.FirebaseError;

File: library/src/main/java/com/firebase/ui/auth/GoogleTokenHandler.java
Patch:
@@ -1,4 +1,4 @@
-package com.firebase.ui.com.firebasei.ui.authimpl;
+package com.firebase.ui.auth;
 
 import com.google.android.gms.auth.GoogleAuthException;
 import com.google.android.gms.auth.UserRecoverableAuthException;

File: library/src/main/java/com/firebase/ui/auth/SocialProvider.java
Patch:
@@ -1,8 +1,9 @@
-package com.firebase.ui.com.firebasei.ui.authimpl;
+package com.firebase.ui.auth;
 
 // Note: these enum values must be lowercase, to ensure they match the casing used by the Firebase Authentication providers
 public enum SocialProvider {
     google,
     facebook,
-    twitter
+    twitter,
+    password
 }

File: library/src/main/java/com/firebase/ui/FirebaseLoginDialog.java
Patch:
@@ -8,7 +8,7 @@
 import android.view.View;
 import android.widget.EditText;
 
-import com.firebase.ui.authimpl.FirebaseAuthHelper;
+import com.firebase.ui.auth.FirebaseAuthHelper;
 
 public class FirebaseLoginDialog extends DialogFragment {
 

File: library/src/main/java/com/firebase/ui/auth/FirebaseOAuthToken.java
Patch:
@@ -1,4 +1,4 @@
-package com.firebase.ui.authimpl;
+package com.firebase.ui.auth;
 
 public class FirebaseOAuthToken {
     public String token;

File: library/src/main/java/com/firebase/ui/auth/GoogleAuthHelper.java
Patch:
@@ -1,4 +1,4 @@
-package com.firebase.ui.authimpl;
+package com.firebase.ui.auth;
 
 import android.app.Activity;
 import android.content.Context;
@@ -77,7 +77,7 @@ public void onTokenReceived(String token) {
                 FirebaseOAuthToken foToken = new FirebaseOAuthToken(
                         PROVIDER_NAME,
                         token);
-                //mHandler.onTokenReceived(foToken);
+                onFirebaseTokenReceived(foToken, mHandler);
             }
 
             @Override

File: library/src/main/java/com/firebase/ui/auth/GoogleTokenHandler.java
Patch:
@@ -1,4 +1,4 @@
-package com.firebase.ui.authimpl;
+package com.firebase.ui.auth;
 
 import com.google.android.gms.auth.GoogleAuthException;
 import com.google.android.gms.auth.UserRecoverableAuthException;

File: library/src/main/java/com/firebase/ui/auth/GoogleTokenTask.java
Patch:
@@ -1,4 +1,4 @@
-package com.firebase.ui.authimpl;
+package com.firebase.ui.auth;
 
 import android.content.Context;
 import android.os.AsyncTask;

File: library/src/main/java/com/firebase/ui/auth/PasswordAuthHelper.java
Patch:
@@ -1,4 +1,4 @@
-package com.firebase.ui.authimpl;
+package com.firebase.ui.auth;
 
 import android.app.Activity;
 import android.content.Context;

File: library/src/main/java/com/firebase/ui/auth/SocialProvider.java
Patch:
@@ -1,4 +1,4 @@
-package com.firebase.ui.authimpl;
+package com.firebase.ui.auth;
 
 // Note: these enum values must be lowercase, to ensure they match the casing used by the Firebase Authentication providers
 public enum SocialProvider {

File: library/src/main/java/com/firebase/ui/auth/TokenAuthHandler.java
Patch:
@@ -1,4 +1,4 @@
-package com.firebase.ui.authimpl;
+package com.firebase.ui.auth;
 
 import com.firebase.client.AuthData;
 import com.firebase.client.FirebaseError;

File: library/src/main/java/com/firebase/ui/FirebaseLoginDialog.java
Patch:
@@ -8,7 +8,7 @@
 import android.view.View;
 import android.widget.EditText;
 
-import com.firebase.ui.com.firebasei.ui.authimpl.FirebaseAuthHelper;
+import com.firebase.ui.authimpl.FirebaseAuthHelper;
 
 public class FirebaseLoginDialog extends DialogFragment {
 

File: library/src/main/java/com/firebase/ui/authimpl/FacebookAuthHelper.java
Patch:
@@ -1,4 +1,4 @@
-package com.firebase.ui.com.firebasei.ui.authimpl;
+package com.firebase.ui.authimpl;
 
 import android.app.Activity;
 import android.content.Context;
@@ -38,7 +38,6 @@ public FacebookAuthHelper(Context context, Firebase ref, final TokenAuthHandler
         mCallbackManager = CallbackManager.Factory.create();
         mContext = context;
         mHandler = handler;
-        Log.d(LOG_TAG, ref.toString());
         mRef = ref;
 
         mLoginManager.registerCallback(mCallbackManager,

File: library/src/main/java/com/firebase/ui/authimpl/FirebaseAuthHelper.java
Patch:
@@ -1,4 +1,4 @@
-package com.firebase.ui.com.firebasei.ui.authimpl;
+package com.firebase.ui.authimpl;
 
 import android.util.Log;
 

File: library/src/main/java/com/firebase/ui/authimpl/FirebaseOAuthToken.java
Patch:
@@ -1,4 +1,4 @@
-package com.firebase.ui.com.firebasei.ui.authimpl;
+package com.firebase.ui.authimpl;
 
 public class FirebaseOAuthToken {
     public String token;

File: library/src/main/java/com/firebase/ui/authimpl/GoogleAuthHelper.java
Patch:
@@ -1,4 +1,4 @@
-package com.firebase.ui.com.firebasei.ui.authimpl;
+package com.firebase.ui.authimpl;
 
 import android.app.Activity;
 import android.content.Context;

File: library/src/main/java/com/firebase/ui/authimpl/GoogleTokenHandler.java
Patch:
@@ -1,4 +1,4 @@
-package com.firebase.ui.com.firebasei.ui.authimpl;
+package com.firebase.ui.authimpl;
 
 import com.google.android.gms.auth.GoogleAuthException;
 import com.google.android.gms.auth.UserRecoverableAuthException;

File: library/src/main/java/com/firebase/ui/authimpl/GoogleTokenTask.java
Patch:
@@ -1,4 +1,4 @@
-package com.firebase.ui.com.firebasei.ui.authimpl;
+package com.firebase.ui.authimpl;
 
 import android.content.Context;
 import android.os.AsyncTask;

File: library/src/main/java/com/firebase/ui/authimpl/PasswordAuthHelper.java
Patch:
@@ -1,4 +1,4 @@
-package com.firebase.ui.com.firebasei.ui.authimpl;
+package com.firebase.ui.authimpl;
 
 import android.app.Activity;
 import android.content.Context;

File: library/src/main/java/com/firebase/ui/authimpl/SocialProvider.java
Patch:
@@ -1,4 +1,4 @@
-package com.firebase.ui.com.firebasei.ui.authimpl;
+package com.firebase.ui.authimpl;
 
 // Note: these enum values must be lowercase, to ensure they match the casing used by the Firebase Authentication providers
 public enum SocialProvider {

File: library/src/main/java/com/firebase/ui/authimpl/TokenAuthHandler.java
Patch:
@@ -1,4 +1,4 @@
-package com.firebase.ui.com.firebasei.ui.authimpl;
+package com.firebase.ui.authimpl;
 
 import com.firebase.client.AuthData;
 import com.firebase.client.FirebaseError;

File: library/src/main/java/com/firebase/ui/authimpl/TwitterAuthHelper.java
Patch:
@@ -1,4 +1,4 @@
-package com.firebase.ui.com.firebasei.ui.authimpl;
+package com.firebase.ui.authimpl;
 
 import android.app.Activity;
 import android.content.Context;

File: library/src/main/java/com/firebase/ui/authimpl/TwitterPromptActivity.java
Patch:
@@ -1,4 +1,4 @@
-package com.firebase.ui.com.firebasei.ui.authimpl;
+package com.firebase.ui.authimpl;
 
 import android.app.Activity;
 import android.content.Intent;

File: library/src/main/java/com/firebase/ui/com/firebasei/ui/authimpl/GoogleAuthHelper.java
Patch:
@@ -23,7 +23,8 @@
  */
 public class GoogleAuthHelper implements
         GoogleApiClient.ConnectionCallbacks,
-        GoogleApiClient.OnConnectionFailedListener {
+        GoogleApiClient.OnConnectionFailedListener,
+        FirebaseAuthHelper {
 
     private final String LOG_TAG = "GoogleAuthHelper";
 
@@ -115,6 +116,7 @@ public void login() {
     public void logout() {
         mGoogleApiClient.disconnect();
     }
+    public String getProviderName() { return PROVIDER_NAME; }
 
     @Override
     public void onConnected(Bundle bundle) {

File: library/src/main/java/com/firebase/ui/com/firebasei/ui/authimpl/TwitterPromptActivity.java
Patch:
@@ -33,7 +33,7 @@ protected void onCreate(Bundle savedInstanceState) {
                 .setOAuthConsumerSecret("GgJnJiYSUiHUJ5pCGJ1XQCL0yUsy8G8eBBW2LnAqaQ")
                 .build()).getInstance();
 
-        // setup twitter webview
+        // setup ic_twitter webview
         mTwitterView = new WebView(this);
         mTwitterView.getSettings().setJavaScriptEnabled(true);
 

File: library/src/main/java/com/firebase/ui/FirebaseRecyclerViewAdapter.java
Patch:
@@ -199,7 +199,7 @@ protected void populateViewHolder(VH viewHolder, T model, int position) {
     /**
      * This is a backwards compatible version of populateViewHolder.
      * <p>
-     * You should implement either this method or the other {@link FirebaseListAdapter#populateView(View, Object, int)} method
+     * You should implement either this method or the other {@link FirebaseRecyclerViewAdapter#populateViewHolder(VH, Object, int)} method
      * but not both.
      *
      * @see FirebaseListAdapter#populateView(View, Object, int)

File: library/src/main/java/com/firebase/ui/com/firebasei/ui/authimpl/GoogleAuthHelper.java
Patch:
@@ -149,6 +149,7 @@ private void resolveSignInError() {
             }
         } else {
             // Create error code?
+            Log.e(LOG_TAG, mGoogleConnectionResult.toString());
         }
     }
 }

File: library/src/main/java/com/firebase/ui/FirebaseArray.java
Patch:
@@ -48,7 +48,7 @@ enum EventType { Added, Changed, Removed, Moved }
 
     public FirebaseArray(Query ref) {
         mQuery = ref;
-        mSnapshots = new ArrayList<>();
+        mSnapshots = new ArrayList<DataSnapshot>();
         mQuery.addChildEventListener(this);
     }
 

