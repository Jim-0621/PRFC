File: lib/src/main/java/no/agens/depth/lib/CustomShadow.java
Patch:
@@ -13,8 +13,6 @@
 import android.graphics.Shader;
 import android.graphics.drawable.Drawable;
 
-import no.agens.depth.lib.R;
-
 /**
  * A rounded rectangle drawable which also includes a shadow around.
  */

File: lib/src/main/java/no/agens/depth/lib/DepthRendrer.java
Patch:
@@ -13,7 +13,6 @@
 import android.view.ViewTreeObserver;
 import android.widget.RelativeLayout;
 
-import no.agens.depth.lib.R;
 
 public class DepthRendrer extends RelativeLayout {
 

File: lib/src/main/java/no/agens/depth/lib/CircularSplashView.java
Patch:
@@ -23,7 +23,7 @@
  */
 public class CircularSplashView extends View {
 
-    private List<CircledDrawable> circles = new ArrayList<CircledDrawable>();
+    private final List<CircledDrawable> circles = new ArrayList<>();
 
     public CircularSplashView(Context context) {
         super(context);
@@ -76,9 +76,9 @@ protected void onDraw(Canvas canvas) {
     }
 
     interface CircledDrawable {
-        public void startAnim();
+        void startAnim();
 
-        public void draw(Canvas canvas);
+        void draw(Canvas canvas);
     }
 
     public class CircleBitmapExpand implements CircledDrawable {

File: lib/src/main/java/no/agens/depth/lib/CustomShadow.java
Patch:
@@ -33,7 +33,7 @@ public class CustomShadow extends Drawable {
     * */
     static RoundRectHelper sRoundRectHelper;
 
-    Paint mPaint;
+    final Paint mPaint;
 
     Paint mCornerShadowPaint;
 
@@ -315,7 +315,7 @@ public void setColor(int color) {
         invalidateSelf();
     }
 
-    static interface RoundRectHelper {
+    interface RoundRectHelper {
         void drawRoundRect(Canvas canvas, RectF bounds, float cornerRadius, Paint paint);
     }
 }
\ No newline at end of file

File: lib/src/main/java/no/agens/depth/lib/DepthRendrer.java
Patch:
@@ -17,7 +17,7 @@
 
 public class DepthRendrer extends RelativeLayout {
 
-    private Paint shadowPaint = new Paint();
+    private final Paint shadowPaint = new Paint();
     private NinePatchDrawable softShadow;
     private Drawable roundSoftShadow;
 
@@ -209,9 +209,8 @@ private void drawRectancle(DepthLayout dl, Canvas canvas) {
     }
 
     public float getAngle(PointF point1, PointF point2) {
-        float angle = (float) Math.toDegrees(Math.atan2(point1.y - point2.y, point1.x - point2.x));
 
-        return angle;
+        return (float) Math.toDegrees(Math.atan2(point1.y - point2.y, point1.x - point2.x));
     }
 
     private void drawLeftEdge(DepthLayout dl, Canvas canvas, float[] src) {

File: lib/src/main/java/no/agens/depth/lib/MaterialMenuDrawable.java
Patch:
@@ -681,7 +681,7 @@ public boolean isDrawableVisible(){
     /*
      * Animations
      */
-    private Property<MaterialMenuDrawable, Float> transformationProperty
+    private final Property<MaterialMenuDrawable, Float> transformationProperty
             = new Property<MaterialMenuDrawable, Float>(Float.class, "transformation") {
         @Override
         public Float get(MaterialMenuDrawable object) {

File: lib/src/main/java/no/agens/depth/lib/RectEvaluator.java
Patch:
@@ -7,12 +7,11 @@ public class RectEvaluator implements TypeEvaluator<Rect> {
 
     @Override
     public Rect evaluate(float fraction, Rect startValue, Rect endValue) {
-        Rect rect = new Rect(startValue.left + (int) ((endValue.left - startValue.left) * fraction),
+
+        return new Rect(startValue.left + (int) ((endValue.left - startValue.left) * fraction),
                 startValue.top + (int) ((endValue.top - startValue.top) * fraction),
                 startValue.right + (int) ((endValue.right - startValue.right) * fraction),
                 startValue.bottom + (int) ((endValue.bottom - startValue.bottom) * fraction));
-
-        return rect;
     }
 
 }

File: lib/src/main/java/no/agens/depth/lib/RectFEvaluator.java
Patch:
@@ -7,12 +7,11 @@ public class RectFEvaluator implements TypeEvaluator<RectF> {
 
     @Override
     public RectF evaluate(float fraction, RectF startValue, RectF endValue) {
-        RectF rect = new RectF(startValue.left + (int) ((endValue.left - startValue.left) * fraction),
+
+        return new RectF(startValue.left + (int) ((endValue.left - startValue.left) * fraction),
                 startValue.top + (int) ((endValue.top - startValue.top) * fraction),
                 startValue.right + (int) ((endValue.right - startValue.right) * fraction),
                 startValue.bottom + (int) ((endValue.bottom - startValue.bottom) * fraction));
-
-        return rect;
     }
 
 }

File: lib/src/main/java/no/agens/depth/lib/headers/NoiseEffect.java
Patch:
@@ -13,7 +13,7 @@
 
 public class NoiseEffect extends Renderable {
 
-    private Paint paint = new Paint();
+    private final Paint paint = new Paint();
     BitmapShader shader;
     Matrix matrix;
     float scale;

File: lib/src/main/java/no/agens/depth/lib/tween/TRectFEvaluator.java
Patch:
@@ -23,12 +23,11 @@ public class TRectFEvaluator implements TypeEvaluator<RectF> {
      */
     @Override
     public RectF evaluate(float fraction, RectF startValue, RectF endValue) {
-        RectF rectF = new RectF(startValue.left + (int) ((endValue.left - startValue.left) * fraction),
+
+        return new RectF(startValue.left + (int) ((endValue.left - startValue.left) * fraction),
                 startValue.top + (int) ((endValue.top - startValue.top) * fraction),
                 startValue.right + (int) ((endValue.right - startValue.right) * fraction),
                 startValue.bottom + (int) ((endValue.bottom - startValue.bottom) * fraction));
-
-        return rectF;
     }
 
 }

File: lib/src/main/java/no/agens/depth/lib/tween/interpolators/BackIn.java
Patch:
@@ -11,7 +11,7 @@ public float getInterpolation(float t) {
         float s = param_s;
         return t*t*((s+1)*t - s);
     }
-    protected float param_s = 1.70158f;
+    private float param_s = 1.70158f;
 
     public BackIn amount(float s) {
         param_s = s;

File: lib/src/main/java/no/agens/depth/lib/tween/interpolators/BackInOut.java
Patch:
@@ -12,7 +12,7 @@ public float getInterpolation(float t) {
         if ((t*=2) < 1) return 0.5f*(t*t*(((s*=(1.525f))+1)*t - s));
         return 0.5f*((t-=2)*t*(((s*=(1.525f))+1)*t + s) + 2);
     }
-    protected float param_s = 1.70158f;
+    private float param_s = 1.70158f;
 
     public BackInOut amount(float s) {
         param_s = s;

File: lib/src/main/java/no/agens/depth/lib/tween/interpolators/BackOut.java
Patch:
@@ -11,7 +11,7 @@ public float getInterpolation(float t) {
         float s = param_s;
         return (t-=1)*t*((s+1)*t + s) + 1;
     }
-    protected float param_s = 1.70158f;
+    private float param_s = 1.70158f;
 
     public BackOut amount(float s) {
         param_s = s;

File: lib/src/main/java/no/agens/depth/lib/tween/interpolators/CircIn.java
Patch:
@@ -5,7 +5,7 @@
 /**
  * Created by danielzeller on 14.04.15.
  */
-public class CircIn implements TimeInterpolator {
+class CircIn implements TimeInterpolator {
 
     @Override
     public float getInterpolation(float t) {

File: lib/src/main/java/no/agens/depth/lib/tween/interpolators/CircOut.java
Patch:
@@ -5,7 +5,7 @@
 /**
  * Created by danielzeller on 14.04.15.
  */
-public class CircOut implements TimeInterpolator {
+class CircOut implements TimeInterpolator {
 
     @Override
     public float getInterpolation(float t) {

