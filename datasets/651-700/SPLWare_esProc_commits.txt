File: src/main/java/com/scudata/cellset/graph/draw/ExtGraphCategory.java
Patch:
@@ -135,4 +135,7 @@ public int compareTo(Object o) {
 	return self.compareTo( other );
   }
 
+  public String toString() {
+	  return name+":"+getSumSeries();
+  }
 }

File: src/main/java/com/scudata/expression/FunctionLib.java
Patch:
@@ -13,6 +13,8 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
+import javax.swing.JOptionPane;
+
 import com.scudata.common.Logger;
 import com.scudata.common.MessageManager;
 import com.scudata.common.RQException;
@@ -897,6 +899,7 @@ public static void loadCustomFunctions(String fileName) {
 						"load customFunction file inputstream failed.");
 			} else {
 				loadCustomFunctions(is);
+				JOptionPane.showMessageDialog(null, "Load custom functions from "+fileName+" OK.");
 			}
 		} catch (Exception x) {
 		}

File: src/main/java/com/scudata/expression/fn/Compares.java
Patch:
@@ -48,7 +48,7 @@ public void checkValidity() {
 		
 		if (subSize == 3) {
 			rightParam = param.getSub(2);
-			if (rightParam == null || leftExps.length != rightParam.getSubSize()) {
+			if (rightParam == null || leftParam.getSubSize() != rightParam.getSubSize()) {
 				MessageManager mm = EngineMessage.get();
 				throw new RQException("cmps" + mm.getMessage("function.invalidParam"));
 			}

File: src/main/java/com/scudata/dw/UnknownNodeFilter.java
Patch:
@@ -117,6 +117,8 @@ private void init(ColPhyTable table, Node node, Expression[] exps, String[] name
 				}
 			}
 			colCount = columns.size() + otherNames.size();
+		} else {
+			colCount = 0;
 		}
 		priority = Integer.MAX_VALUE;
 	}

File: src/main/java/com/scudata/dw/ColumnMetaData.java
Patch:
@@ -59,6 +59,7 @@ public ColumnMetaData(ColumnMetaData src) {
 		isDim = src.isDim;
 		isKey = src.isKey;
 		serialBytesLen = src.serialBytesLen;
+		hasMaxMinValues = src.hasMaxMinValues;
 	}
 	
 	/**

File: src/main/java/com/scudata/dm/ObjectReader.java
Patch:
@@ -984,6 +984,7 @@ private void skipMark3(int b) throws IOException {
 			skipFully(4);
 			break;
 		case ObjectWriter.DATETIME64:
+		case ObjectWriter.DATE64:
 			skipFully(8);
 			break;
 		case ObjectWriter.DATE24:

File: src/main/java/com/scudata/dw/BufferReader.java
Patch:
@@ -671,6 +671,7 @@ protected void skipMark3(int b) throws IOException {
 			skipFully(4);
 			break;
 		case BufferWriter.DATETIME64:
+		case BufferWriter.DATE64:
 			skipFully(8);
 			break;
 		case BufferWriter.DATE24:

File: src/main/java/com/scudata/dm/cursor/ConjxCursor.java
Patch:
@@ -82,7 +82,7 @@ protected Sequence get(int n) {
 	
 	protected Sequence fuzzyGet(int n) {
 		if (cursors.length == curIndex || n < 1) return null;
-		Sequence table = cursors[curIndex].fuzzyGet(n);
+		Sequence table = cursors[curIndex].fuzzyFetch(n);
 		if (table != null && table.length() > 0) {
 			return table;
 		}

File: src/main/java/com/scudata/excel/FileXls.java
Patch:
@@ -225,7 +225,7 @@ private SheetInfo getSheetInfo(Sheet sheet) {
 		rowCount = sheet.getLastRowNum() + 1;
 		if (rowCount > 0) {
 			for (int i = 0; i < rowCount; i++) {
-				row = sheet.getRow(0);
+				row = sheet.getRow(i);
 				if (row != null) {
 					colCount = Math.max(colCount, row.getLastCellNum());
 				}

File: src/main/java/com/scudata/util/MinHeap.java
Patch:
@@ -76,7 +76,7 @@ public boolean insert(Object o) {
 	 */
 	public void insertAll(MinHeap other) {
 		Object []heap = other.heap;
-		for (int i = 1, currentSize = this.currentSize; i <= currentSize; ++i) {
+		for (int i = 1, currentSize = other.currentSize; i <= currentSize; ++i) {
 			insert(heap[i]);
 		}
 	}

File: src/main/java/com/scudata/dm/cursor/MultipathCursors.java
Patch:
@@ -5,7 +5,6 @@
 import com.scudata.common.MessageManager;
 import com.scudata.common.RQException;
 import com.scudata.dm.Context;
-import com.scudata.dm.Env;
 import com.scudata.dm.GroupsSyncReader;
 import com.scudata.dm.Sequence;
 import com.scudata.dm.Table;
@@ -393,7 +392,7 @@ private static Table groups(ICursor []cursors, Expression[] exps, String[] names
 	
 	private static Table groups2(ICursor []cursors, Expression[] exps, String[] names, 
 			Expression[] calcExps, String[] calcNames, String opt, Context ctx, int groupCount) {
-		int capacity = groupCount > 0 ? groupCount : 20000000;//Ĭ��2000��
+		int capacity = groupCount > 0 ? groupCount : 30000000;//Ĭ��3000��
 		HashUtil hashUtil = new HashUtil(capacity);
 		GroupsSyncReader cursorReader = new GroupsSyncReader(cursors, exps, hashUtil, ctx);
 		capacity = hashUtil.getCapacity();

File: src/main/java/com/scudata/array/ConstArray.java
Patch:
@@ -84,10 +84,10 @@ public void addAll(IArray array) {
 		
 		if (array instanceof ConstArray && Variant.isEquals(data, array.get(1))) {
 			size += array.size();
+		} else {
+			MessageManager mm = EngineMessage.get();
+			throw new RQException(mm.getMessage("pdm.modifyConstArrayError"));
 		}
-		
-		MessageManager mm = EngineMessage.get();
-		throw new RQException(mm.getMessage("pdm.modifyConstArrayError"));
 	}
 	
 	/**

File: src/main/java/com/scudata/util/DatabaseUtil.java
Patch:
@@ -2446,6 +2446,7 @@ public static Object tranData(int type, int dbType, ResultSet rs, int index, boo
 			if(obj instanceof java.math.BigDecimal){
 				if (opt != null && opt.indexOf('d') > -1)
 					return ((Number)obj).doubleValue();
+				return obj;
 			} else if (obj instanceof Integer | obj instanceof Long || obj instanceof Double){
 				return obj;
 			} else if (obj instanceof java.math.BigInteger) {

File: src/main/java/com/scudata/dw/JoinCursor.java
Patch:
@@ -2369,8 +2369,10 @@ private static Node parseNode(Expression exp, Context ctx) {
 	public static boolean isColTable(Object table) {
 		if (table == null) return false;
 		if (table instanceof ColPhyTable) {
+			if (((ColPhyTable)table).getParent() != null)
+				return false;
 			if (((ColPhyTable)table).getModifyRecords() == null)
-			return true;
+				return true;
 		}
 		return false;
 	}

File: src/main/java/com/scudata/dw/DataBlockType.java
Patch:
@@ -711,7 +711,7 @@ public static Object dictToArray(Sequence dict, int dataType) {
 			for (int i = 1; i <= size; i++) {
 				Object obj = dict.getMem(i);
 				if (obj != null) {
-					longArray[i] = ((Long)obj).longValue();
+					longArray[i] = ((Number)obj).longValue();
 				} else {
 					longArray[0] = i;
 				}
@@ -724,7 +724,7 @@ public static Object dictToArray(Sequence dict, int dataType) {
 			for (int i = 1; i <= size; i++) {
 				Object obj = dict.getMem(i);
 				if (obj != null) {
-					doubleArray[i] = ((Double)obj).doubleValue();
+					doubleArray[i] = ((Number)obj).doubleValue();
 				} else {
 					doubleArray[0] = i;
 				}

File: src/main/java/com/scudata/dw/RowPhyTable.java
Patch:
@@ -2499,7 +2499,7 @@ public boolean[] getDimIndex() {
 	 * @param colName
 	 * @return
 	 */
-	protected boolean isDim(String colName) {
+	public boolean isDim(String colName) {
 		boolean isDim[] = this.isDim;
 		String colNames[] = this.colNames;
 		int len = colNames.length;

File: src/main/java/com/scudata/expression/mfn/file/Structure.java
Patch:
@@ -170,12 +170,11 @@ protected static Sequence getTableColumnStruct(PhyTable table) {
 		} else {
 			RowPhyTable rowTable = ((RowPhyTable) table);
 			String[] columns = rowTable.getColNames();
-			boolean[] isDim = rowTable.getDimIndex();
 			for (int c = 0, len = columns.length; c < len; c++) {
 				String column = columns[c];
 				Record rec = new Record(new DataStruct(ROW_FIELD_FIELD_NAMES));
 				rec.setNormalFieldValue(0, column);
-				rec.setNormalFieldValue(1, isDim[c]);
+				rec.setNormalFieldValue(1, rowTable.isDim(column));
 				seq.add(rec);
 			}
 		}

File: src/main/java/com/scudata/dw/DataBlockType.java
Patch:
@@ -695,7 +695,7 @@ public static Object dictToArray(Sequence dict, int dataType) {
 			for (int i = 1; i <= size; i++) {
 				Object obj = dict.getMem(i);
 				if (obj != null) {
-					intArray[i] = ((Integer)obj).intValue();
+					intArray[i] = ((Number)obj).intValue();
 				} else {
 					intArray[0] = i;
 				}

File: src/main/java/com/scudata/dm/op/Groups.java
Patch:
@@ -430,14 +430,15 @@ private Sequence groups_o(Sequence seq, Context ctx) {
 					data.add(current.getCurrent());
 				} else {
 					group1(data, prevValues, newExps, ctx, result);
-					data.clear();
+					data = new Sequence(); // newExps����Ϊ~����Ҫ���´�������
 					data.add(current.getCurrent());
 				}
 			}
 		} finally {
 			stack.pop();
 		}
 
+		this.data = data;
 		if (result.length() > 0) {
 			if (eopt) {
 				result = result.fieldValues(result.getFieldCount() - 1).derive("o");

File: src/main/java/com/scudata/ide/common/GM.java
Patch:
@@ -2113,7 +2113,7 @@ public static boolean canSaveAsFile(String saveAsFile) {
 					.getMessage("gm.existfile", saveAsFile), IdeCommonMessage
 					.get().getMessage("public.note"),
 					JOptionPane.OK_CANCEL_OPTION);
-			if (r == JOptionPane.CANCEL_OPTION) {
+			if (r != JOptionPane.OK_OPTION) {
 				return false;
 			}
 		}

File: src/main/java/com/scudata/dm/op/New.java
Patch:
@@ -65,7 +65,7 @@ public Sequence process(Sequence seq, Context ctx) {
 				for (int i = 0; i < keyCount; ++i) {
 					String keyName = keyNames[i];
 					for (int f = 0; f < fcount; ++f) {
-						String fname = newExps[f].getFieldName();
+						String fname = newExps[f].getFieldName(ds);
 						if (keyName.equals(fname)) {
 							newKeyNames[i] = names[f];
 							continue Next;

File: src/main/java/com/scudata/dw/Cursor.java
Patch:
@@ -1,6 +1,5 @@
 package com.scudata.dw;
 
-import java.io.File;
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -469,7 +468,8 @@ private static Object combineOr(Node node, Object left, Object right) {
 	}
 
 	private void parseSwitch(ColPhyTable table, Context ctx) {
-		if (hasModify()) {
+		ArrayList<ModifyRecord> mrecords = table.getModifyRecords();
+		if (mrecords != null && mrecords.size() > 0) {
 			int fkCount = fkNames.length;
 			for (int i = 0; i < fkCount; i ++) {
 				String[] fkn = new String[] {fkNames[i]};

File: src/main/java/com/scudata/expression/mfn/sequence/Groupc.java
Patch:
@@ -119,7 +119,7 @@ private Object groupcTable(Context ctx) {
 			
 			if (size > 2 && param.getSub(2) != null) {
 				sub = param.getSub(2);
-				newNames = sub.toStringArray("groupc", false);
+				newNames = sub.toIdentifierNames("groupc");
 			}
 		} else {
 			ParamInfo2 pi = ParamInfo2.parse(param, "groupc", true, false);

File: src/main/java/com/scudata/cellset/graph/draw/DrawBase.java
Patch:
@@ -128,7 +128,7 @@ public void outLabels() {
 			}else if(vAlign==IStyle.VALIGN_BOTTOM) {
 				direction = GraphFontView.TEXT_ON_TOP;
 			}else {
-				direction = GraphFontView.TEXT_ON_CENTER;
+				direction = GraphFontView.TEXT_ON_RIGHT;
 			}
 			gp.GFV_YTITLE.outText(x, y, text, direction);
 			vlYTitle1 = null;
@@ -154,7 +154,7 @@ private double[] getHTitleX(Rectangle2D.Double rect,byte align) {
 			x[1] = GraphFontView.TEXT_ON_LEFT;
 		} else {
 			x[0] = rect.x + gp.gRect2.width / 2;
-			x[1] = GraphFontView.TEXT_ON_CENTER;
+			x[1] = GraphFontView.TEXT_ON_TOP;
 		}
 		return x;
 	}

File: src/main/java/com/scudata/chart/graph/GraphBase.java
Patch:
@@ -57,7 +57,7 @@ public class GraphBase extends ObjectElement{
 	public int graphTitleSize = 16;
 	public Color graphTitleColor = Color.black;
 	public int graphTitleAngle = 0;
-	public int graphTitleMargin = 20;
+	public int graphTitleMargin = 5;
 
 	/** ���ݱ�ʶ */
 	public String dataFont;// = "Dialog";

File: src/main/java/com/scudata/ide/spl/dialog/DialogDisplayChart.java
Patch:
@@ -748,7 +748,7 @@ public void windowClosing(WindowEvent e) {
 			this.setSize(800, 600);
 		} else if (ii.getIconWidth() != -1) {
 			int w = ii.getIconWidth() + 100;
-			int h = ii.getIconHeight();
+			int h = ii.getIconHeight()+ 30;
 			if (w > 700 || h > 570) {
 				w = 800;
 				h = 600;

File: src/main/java/com/scudata/excel/ExcelVersionCompatibleUtilInterface.java
Patch:
@@ -16,6 +16,7 @@
 import org.apache.poi.ss.usermodel.Sheet;
 import org.apache.poi.ss.usermodel.VerticalAlignment;
 import org.apache.poi.ss.usermodel.Workbook;
+import org.apache.poi.xssf.eventusermodel.XSSFReader;
 import org.apache.poi.xssf.model.SharedStrings;
 import org.apache.poi.xssf.model.SharedStringsTable;
 import org.apache.poi.xssf.usermodel.XSSFCellStyle;
@@ -233,4 +234,6 @@ public interface ExcelVersionCompatibleUtilInterface {
 	public CellType getCachedFormulaResultType(Cell cell) ;
 	
 	public XSSFColor getXSSFColor(int color);
+
+	public SharedStrings readSharedStrings(XSSFReader xssfReader);
 }

File: src/main/java/com/scudata/excel/SheetXlsR.java
Patch:
@@ -7,7 +7,6 @@
 import org.apache.poi.openxml4j.exceptions.OpenXML4JException;
 import org.apache.poi.xssf.eventusermodel.XSSFReader;
 import org.apache.poi.xssf.model.SharedStrings;
-import org.apache.poi.xssf.model.SharedStringsTable;
 import org.apache.poi.xssf.model.StylesTable;
 import org.xml.sax.ContentHandler;
 import org.xml.sax.InputSource;
@@ -295,7 +294,8 @@ public boolean skipLine() throws IOException {
 	 */
 	private void process(XSSFReader xssfReader, boolean removeBlank)
 			throws IOException, OpenXML4JException, SAXException {
-		SharedStrings sst = xssfReader.getSharedStringsTable();
+		//SharedStrings sst = xssfReader.getSharedStringsTable();
+		SharedStrings sst = ExcelVersionCompatibleUtilGetter.getInstance().readSharedStrings(xssfReader);
 		StylesTable styles = xssfReader.getStylesTable();
 		XSSFReader.SheetIterator iter = (XSSFReader.SheetIterator) xssfReader
 				.getSheetsData();

File: src/main/java/com/scudata/excel/XlsxSImporter.java
Patch:
@@ -217,7 +217,8 @@ public XlsxSImporter(FileObject fo, String[] fields, int startRow,
 	private void process(Object sheet) throws IOException, OpenXML4JException,
 			SAXException {
 		XSSFReader xssfReader = new XSSFReader(this.xlsxPackage);
-		SharedStrings sst = xssfReader.getSharedStringsTable();
+		//SharedStrings sst = xssfReader.getSharedStringsTable();
+		SharedStrings sst = ExcelVersionCompatibleUtilGetter.getInstance().readSharedStrings(xssfReader);
 		StylesTable styles = xssfReader.getStylesTable();
 		XSSFReader.SheetIterator iter = (XSSFReader.SheetIterator) xssfReader
 				.getSheetsData();

File: src/main/java/com/scudata/chart/element/Line.java
Patch:
@@ -355,7 +355,7 @@ private void drawEnumBasedLine(int step) {
 
 		for (int i = 0; i < markerPoints.size(); i++) {
 			MarkerPoint sp = markerPoints.get(i);
-			Shape shape = drawADot(sp.index, sp.p, step);
+			Shape shape = drawADot(sp.index, sp.p, step,true);
 			if(shape!=null){
 				int index = sp.index;
 				String title = getTipTitle(index);

File: src/main/java/com/scudata/chart/element/Dot.java
Patch:
@@ -133,7 +133,7 @@ private void drawStep(int step) {
 		int size = pointSize();
 		for (int i = 1; i <= size; i++) {
 			try {
-				Point2D p = getScreenPoint(i);
+				Point2D p = getNumericPoint(i,false);
 				Shape shape = drawADot(i, p, step);
 				if(shape!=null){
 					String title = getTipTitle(i);

File: src/main/java/com/scudata/chart/Utils.java
Patch:
@@ -2684,7 +2684,7 @@ public static Shape drawPolarPoint1(Graphics2D g, Point2D point, int shape,
 	/**
 	 * ���Ƽ�����ϵ��һ����Ĳ���2
 	 * @param g ͼ���豸
-	 * @param point ������(������)
+	 * @param point ������(��ֵ���꣬�˴�Ϊ������)
 	 * @param shape �����״��ȡֵ�ο�Consts.PT_XXX
 	 * @param radiusR �����ϵ�ҵ��뾶�����������ص�λ���׳�Ϊ���ϵ�ҵ��뾶
 	 * @param radiusA �����ϵ�ҵ��뾶

File: src/main/java/com/scudata/chart/element/Line.java
Patch:
@@ -253,7 +253,8 @@ private void drawEnumBasedLine(int step) {
 				}
 				Object val1 = data1.get(index);
 				Object val2 = data2.get(index);
-				Point2D p = coor.getScreenPoint(val1, val2);
+				Point2D numericP = coor.getNumericPoint(val1, val2);
+				Point2D p = coor.getScreenPoint( numericP );
 				linePoints.add(p);
 			}
 			drawLine(1, linePoints, step);
@@ -368,7 +369,7 @@ private void drawDots(int step, boolean discardSeries) {
 		int size = pointSize();
 		
 		for (int i = 1; i <= size; i++) {
-			Point2D p = getScreenPoint(i,discardSeries);
+			Point2D p = getNumericPoint(i,discardSeries);
 			Shape shape = drawADot(i, p, step);
 			if(shape!=null){
 				String title = getTipTitle(i);

File: src/main/java/com/scudata/chart/element/TickAxis.java
Patch:
@@ -816,7 +816,7 @@ void drawAxisBorder() {
 	}
 
 	/*
-	 * �������ֵval�����ϳ��ȣ� �����ּ��㷽ʽ��
+	 * ���㡾�߼�ֵ��val�����ϳ��ȡ��ó��������������ϵ����ֵ���꡿�� �����ּ��㷽ʽ��
 	 * 1�����Գ��� ��val�������̶ȷ�Χ����ռ�еĳ��ȣ�һ�����ڰ뾶���㡣
 	 * ö������val��ϵ�п��ȣ��������ǰ�val���㳤�ȣ���ֵ����val�㳤�ȣ����ִ�С��1������� 
 	 * 2:�̶ȳ���  ��val��Ϊ�̶ȷ�Χ�������������ԭ��ĳ��� 

File: src/main/java/com/scudata/chart/DataElement.java
Patch:
@@ -375,7 +375,7 @@ protected Point2D getScreenPoint(int index, boolean discardSeries) {
 				p = coor.getScreenPoint(v1, v2);
 			} else {
 				PolarCoor pc = (PolarCoor) coor;
-				p = pc.getPolarPoint(v1, v2);
+				p = pc.getScreenPoint(v1, v2);
 			}
 		}
 		return p;

File: src/main/java/com/scudata/dm/op/Groups.java
Patch:
@@ -287,7 +287,7 @@ public Sequence finish(Context ctx) {
 				result.alter(alterFields, null);
 			}
 			
-			data = null;
+			data = new Sequence(); //null; Ϊ���α�reset�ظ�ʹ����Ҫ���´�������
 			return result;
 		} else if (tempResult != null) {
 			// @qsѡ��

File: src/main/java/com/scudata/dw/IDWCursor.java
Patch:
@@ -63,7 +63,7 @@ public Object[] getSegmentStartValues(String option) {
 				cols = new ColumnMetaData[] {table.getColumn(segmentCol)};
 			}
 		} else {
-			ColumnMetaData[] tempCols = table.getSortedColumns();
+			ColumnMetaData[] tempCols = table.getAllSortedColumns();
 			int count = 0;
 			for (ColumnMetaData col : tempCols) {
 				if (ds.getFieldIndex(col.getColName()) != -1) {

File: src/main/java/com/scudata/dm/Sequence.java
Patch:
@@ -8852,7 +8852,7 @@ public Sequence align(Expression exp, int n, String opt, Context ctx) {
 	 * @return Sequence
 	 */
 	public Sequence group(String opt) {
-		boolean removeNull = false, isOrg = false, isNumber = false;
+		boolean removeNull = false, isOrg = false, isNumber = false, isSort = true;
 		if (opt != null) {
 			if (opt.indexOf('h') != -1) {
 				opt = opt.replace('h', 'o');
@@ -8862,6 +8862,7 @@ public Sequence group(String opt) {
 			if (opt.indexOf('0') != -1) removeNull = true;
 			if (opt.indexOf('o') != -1) isOrg = true;
 			if (opt.indexOf('n') != -1) isNumber = true;
+			if (opt.indexOf('u') != -1) isSort = false;
 		}
 		
 		Sequence seq = this;
@@ -8872,7 +8873,7 @@ public Sequence group(String opt) {
 		if (isNumber) {
 			return group_n(opt);
 		} else if (!isOrg) {
-			if (length() > SORT_HASH_LEN) {
+			if (!isSort || length() > SORT_HASH_LEN) {
 				return CursorUtil.hashGroup(seq, opt);
 			} else {
 				if (opt == null) {

File: src/main/java/com/scudata/expression/mfn/dw/Import.java
Patch:
@@ -14,6 +14,9 @@
 public class Import extends PhyTableFunction {
 	public Object calculate(Context ctx) {
 		ICursor cursor = CreateCursor.createCursor(table, param, option, ctx);
+		if (option != null && option.indexOf('x') != -1) {
+			CreateCursor.setOptionX(cursor, option);
+		}
 		return cursor.fetch();
 	}
 	

File: src/main/java/com/scudata/expression/mfn/dw/Icursor.java
Patch:
@@ -21,7 +21,8 @@
  *
  */
 public class Icursor extends PhyTableFunction {
-	public Object calculate(Context ctx) {		IParam param = this.param;
+	public Object calculate(Context ctx) {		
+		IParam param = this.param;
 		if (param == null) {
 			MessageManager mm = EngineMessage.get();
 			throw new RQException("icursor" + mm.getMessage("function.missingParam"));

File: src/main/java/com/scudata/app/config/ConfigConsts.java
Patch:
@@ -19,7 +19,7 @@ public class ConfigConsts {
 	/** Use Logger */
 	public static final String LOG_DEFAULT = "default";
 	/** Use slf */
-	public static final String LOG_SLF = "slf";
+	public static final String LOG_SLF = "slf4j";
 
 	/**
 	 * Root node

File: src/main/java/com/scudata/ide/spl/dialog/DialogOptions.java
Patch:
@@ -726,6 +726,7 @@ private boolean save() throws Throwable {
 
 		String sLogType = (String) jCBLogType.x_getSelectedItem();
 		GV.config.setLogType(sLogType);
+		Logger.setLogType(sLogType);
 
 		ConfigOptions.save(!isUnit);
 		try {

File: src/main/java/com/scudata/ide/spl/dialog/DialogOptions.java
Patch:
@@ -36,6 +36,7 @@
 import javax.swing.SpinnerNumberModel;
 
 import com.scudata.app.common.AppConsts;
+import com.scudata.app.config.ConfigConsts;
 import com.scudata.app.config.ConfigUtil;
 import com.scudata.app.config.RaqsoftConfig;
 import com.scudata.cellset.IStyle;
@@ -1017,7 +1018,7 @@ private void initUI() throws Exception {
 		jLabelLogType.setText("��־����");
 		jCBLogType.x_setData(ConfigOptions.codeLogTypes(),
 				ConfigOptions.dispLogTypes());
-		jCBLogType.x_setSelectedCodeItem(Logger.DEBUG);
+		jCBLogType.x_setSelectedCodeItem(ConfigConsts.LOG_DEFAULT);
 		// Normal
 		panelNormal.setLayout(new VFlowLayout(VFlowLayout.TOP));
 		panelNormal.add(jPIdeOpt);

File: src/main/java/com/scudata/app/config/ConfigWriter.java
Patch:
@@ -428,6 +428,7 @@ protected void writeLogger(RaqsoftConfig config) throws SAXException {
 		startElement(ConfigConsts.LOGGER, null);
 		level = 3;
 		writeAttribute(ConfigConsts.LEVEL, config.getLogLevel());
+		writeAttribute(ConfigConsts.LOG_TYPE, config.getLogType());
 		level = 2;
 		endElement(ConfigConsts.LOGGER);
 	}

File: src/main/java/com/scudata/dm/op/Join.java
Patch:
@@ -600,7 +600,7 @@ private Table join_i(Sequence data, Context ctx) {
 		int fkCount = exps.length;
 		
 		if (fkCount == 1) {
-			if (codes[0].getMems() instanceof ColumnList) {
+			if (indexTables[0] instanceof CompressIndexTable) {
 				return join_i_1_c(data, ctx);
 			} else {
 				return join_i_1(data, ctx);

File: src/main/java/com/scudata/dw/PhyTableIndex.java
Patch:
@@ -2612,6 +2612,9 @@ public LongArray select(Expression exp, String opt, Context ctx) {
 			}
 			Sequence series;
 			Object obj = left.calculate(ctx);
+			if (obj == null) {
+				return null;
+			}
 			if (obj instanceof Sequence) {
 				series = (Sequence) obj;
 			} else {

File: src/main/java/com/scudata/ide/spl/base/JTableValue.java
Patch:
@@ -1976,7 +1976,7 @@ private void drillValue(int row, int col) {
 				return;
 			}
 		}
-		if (newValue.equals(value)) { // ��ȡ��Ԫ���Ǳ���ʱ
+		if (newValue == value) { // ��ȡ��Ԫ���Ǳ���ʱ
 			return;
 		}
 		redo.clear();

File: src/main/java/com/scudata/dw/DataBlockType.java
Patch:
@@ -132,8 +132,8 @@ public static DataBlockType getDataBlockType(Sequence data, int col, int start,
 			type = new DataBlockType(OBJECT, false);
 		}
 		
-		if (type.type == INT8 || type.type == LONG8) {
-			return type;//����8ʱ���ü���ֵ�
+		if (type.type == INT8 || type.type == LONG8 || type.type == INC_BLOCK) {
+			return type;//����8ʱ�������ǵ�����ʱ���ü���ֵ�
 		}
 		
 		DataBlockType dictType = checkDict(seq, start, end);
@@ -641,7 +641,7 @@ public static String getTypeName(int type) {
 		case 0:
 			return "Unknown";
 		default:
-			return "Object";	
+			return "Object : " + type;	
 		}
 	}
 	

File: src/main/java/com/scudata/ide/spl/Esprocx.java
Patch:
@@ -303,8 +303,6 @@ public static void main(String[] args) throws Exception {
 		if (lang.equalsIgnoreCase("en")) {
 			usage = usageEn;
 		}
-		System.err.println(args.length);
-		
 		if (!debug && args.length == 0) {
 			System.err.println(usage);
 			Thread.sleep(3000);

File: src/main/java/com/scudata/expression/mfn/file/Structure.java
Patch:
@@ -79,8 +79,7 @@ public Object calculate(Context ctx) {
 				return seq;
 			}
 			
-			File f = file.getLocalFile().file();
-			PhyTable table = ComTable.openBaseTable(f, ctx);
+			PhyTable table = ComTable.openBaseTable(file, ctx);
 			
 			Integer partition = file.getPartition();
 			if (partition != null && partition.intValue() > 0) {

File: src/main/java/com/scudata/expression/mfn/dw/Append.java
Patch:
@@ -63,7 +63,7 @@ public Object calculate(Context ctx) {
 					return tg;
 				}
 				
-				if (cursor instanceof MultipathCursors) {
+				if (option != null && option.indexOf('p') != -1 && cursor instanceof MultipathCursors) {
 					parallelAppend((MultipathCursors) cursor, ctx);
 				} else {
 					table.append(cursor, option);

File: src/main/java/com/scudata/app/config/ConfigHandler.java
Patch:
@@ -501,7 +501,8 @@ public void startElement(String uri, String localName, String qName,
 	 */
 	public void endElement(String uri, String localName, String qName)
 			throws SAXException {
-		if (qName.equalsIgnoreCase(ConfigConsts.JNDI_LIST)) {
+		if (qName.equalsIgnoreCase(ConfigConsts.JNDI_LIST)
+				|| qName.equalsIgnoreCase(ConfigConsts.SPRING_DB_LIST)) {
 			activeNode = SERVER;
 			return;
 		}
@@ -603,7 +604,6 @@ public void endElement(String uri, String localName, String qName)
 				}
 				unitList.add(value);
 			}
-
 		}
 	}
 

File: src/main/java/com/scudata/array/ConstArray.java
Patch:
@@ -613,7 +613,7 @@ public int lastIndexOf(Object elem, int start) {
 	public IntArray indexOfAll(Object elem, int start, boolean isSorted, boolean isFromHead) {
 		if (size > 0 && Variant.isEquals(data, elem)) {
 			int end = size;
-			if (isFromHead) {
+			if (!isFromHead) {
 				end = start;
 				start = 1;
 			}

File: src/main/java/com/scudata/array/DateArray.java
Patch:
@@ -1175,7 +1175,7 @@ public IntArray indexOfAll(Object elem, int start, boolean isSorted, boolean isF
 		Date date = (Date)elem;
 		if (isSorted) {
 			int end = size;
-			if (isFromHead) {
+			if (!isFromHead) {
 				end = start;
 				start = 1;
 			}

File: src/main/java/com/scudata/array/DoubleArray.java
Patch:
@@ -1768,7 +1768,7 @@ public IntArray indexOfAll(Object elem, int start, boolean isSorted, boolean isF
 		Number number = (Number)elem;
 		if (isSorted) {
 			int end = size;
-			if (isFromHead) {
+			if (!isFromHead) {
 				end = start;
 				start = 1;
 			}

File: src/main/java/com/scudata/array/IntArray.java
Patch:
@@ -1838,7 +1838,7 @@ public IntArray indexOfAll(Object elem, int start, boolean isSorted, boolean isF
 		Number number = (Number)elem;
 		if (isSorted) {
 			int end = size;
-			if (isFromHead) {
+			if (!isFromHead) {
 				end = start;
 				start = 1;
 			}

File: src/main/java/com/scudata/array/LongArray.java
Patch:
@@ -1778,7 +1778,7 @@ public IntArray indexOfAll(Object elem, int start, boolean isSorted, boolean isF
 		Number number = (Number)elem;
 		if (isSorted) {
 			int end = size;
-			if (isFromHead) {
+			if (!isFromHead) {
 				end = start;
 				start = 1;
 			}

File: src/main/java/com/scudata/array/ObjectArray.java
Patch:
@@ -1006,7 +1006,7 @@ public IntArray indexOfAll(Object elem, int start, boolean isSorted, boolean isF
 
 		if (isSorted) {
 			int end = size;
-			if (isFromHead) {
+			if (!isFromHead) {
 				end = start;
 				start = 1;
 			}

File: src/main/java/com/scudata/array/SerialBytesArray.java
Patch:
@@ -1185,7 +1185,7 @@ public IntArray indexOfAll(Object elem, int start, boolean isSorted, boolean isF
 			
 			if (isSorted) {
 				int end = size;
-				if (isFromHead) {
+				if (!isFromHead) {
 					end = start;
 					start = 1;
 				}

File: src/main/java/com/scudata/array/StringArray.java
Patch:
@@ -1156,7 +1156,7 @@ public IntArray indexOfAll(Object elem, int start, boolean isSorted, boolean isF
 		String str = (String)elem;
 		if (isSorted) {
 			int end = size;
-			if (isFromHead) {
+			if (!isFromHead) {
 				end = start;
 				start = 1;
 			}

File: src/main/java/com/esproc/jdbc/InternalStatement.java
Patch:
@@ -416,7 +416,6 @@ private Context prepareContext(Context ctx, String sql, byte sqlType) {
 		}
 		if (isGrid) { // ִ������ʱ�������´���������
 			ctx = ctx.newComputeContext();
-			setContextDBSessions(ctx);
 		}
 		return ctx;
 	}

File: src/main/java/com/scudata/parallel/ClusterCursor.java
Patch:
@@ -203,7 +203,7 @@ public static Response executeSkip(HashMap<String, Object> attributes) {
 			JobSpace js = JobSpaceManager.getSpace(jobSpaceID);
 			ResourceManager rm = js.getResourceManager();
 			CursorProxy cursor = (CursorProxy)rm.getProxy(cursorProxyId.intValue());
-			long result = cursor.getCursor().skip(count.intValue());
+			long result = cursor.getCursor().skip(count.longValue());
 			return new Response(new Long(result));
 		} catch (Exception e) {
 			Response response = new Response();

File: src/main/java/com/scudata/expression/mfn/dw/Append.java
Patch:
@@ -108,7 +108,7 @@ private void parallelAppend(MultipathCursors mcs, Context ctx) throws IOExceptio
 		}
 	}
 	
-	private static Thread newAppendThread(final ColPhyTable table, ICursor cs, String option) {
+	private static Thread newAppendThread(final ColPhyTable table, final ICursor cs, final String option) {
 		return new Thread() {
 			public void run() {
 				try {

File: src/main/java/com/scudata/expression/mfn/dw/Icursor.java
Patch:
@@ -126,9 +126,6 @@ public class Icursor extends PhyTableFunction {
 		}
 		
 		ICursor cursor = table.icursor(fields, w, I, option, ctx);
-		if (ctx != null) {
-			ctx.addResource(cursor);
-		}
 		if (segCount != 0 && cursor instanceof IndexCursor) {
 			return ((IndexCursor)cursor).toMultiCursor(segCount);
 		} else {

File: src/main/java/com/scudata/server/IProxy.java
Patch:
@@ -108,7 +108,7 @@ public synchronized IProxy getProxy(int id){
 	 * @param timeOut ��ʱʱ��
 	 * @return ��ʱ�����ٶ��󣬷���true�����򷵻�false
 	 */
-	public synchronized boolean checkTimeOut(int timeOut) {
+	public boolean checkTimeOut(int timeOut) {
 		if(subProxies!=null){
 			for(int i=0;i<subProxies.size(); i++){
 				IProxy sub = subProxies.get(i);

File: src/main/java/com/scudata/dm/cursor/MergeCursor2.java
Patch:
@@ -541,7 +541,7 @@ private long skip1(long n, int field) {
 					data2 = cs2.fetch(FETCHCOUNT_M);
 					if (data2 != null && data2.length() > 0) {
 						cur2 = 1;
-						len2 = data1.length();
+						len2 = data2.length();
 					} else {
 						cur2 = 0;
 						break;
@@ -706,7 +706,7 @@ private long skip2(long n, int []fields) {
 					data2 = cs2.fetch(FETCHCOUNT_M);
 					if (data2 != null && data2.length() > 0) {
 						cur2 = 1;
-						len2 = data1.length();
+						len2 = data2.length();
 					} else {
 						cur2 = 0;
 						break;

File: src/main/java/com/scudata/dw/DataBlockWriterJob.java
Patch:
@@ -78,9 +78,9 @@ private static void writeDataBlock(BufferWriter bufferWriter, Sequence data, Seq
 			bufferWriter.flush();
 		} else if (blockType.getType() == DataBlockType.INC_BLOCK) {
 			bufferWriter.write(DataBlockType.INC_BLOCK);
-			r = (BaseRecord) mems.get(1);
+			r = (BaseRecord) mems.get(start);
 			Object obj1 = r.getNormalFieldValue(col);
-			r = (BaseRecord) mems.get(2);
+			r = (BaseRecord) mems.get(start + 1);
 			Object obj2 = r.getNormalFieldValue(col);
 			bufferWriter.writeObject(obj1);
 			bufferWriter.flush();

File: src/main/java/com/scudata/dw/ColPhyTable.java
Patch:
@@ -1352,11 +1352,11 @@ private void appendSegment(ICursor cursor) throws IOException {
 					if (tableMaxValues != null) {
 						int cmp = Variant.compareArrays(vals, tableMaxValues, sortedColCount);
 						if (cmp < 0) {
-							hasPrimaryKey = false;
+							//hasPrimaryKey = false;//���ٴ�������
 							isSorted = false;
 							maxValues = null;
 						} else if (cmp == 0){
-							if (hasPrimaryKey) hasPrimaryKey = false;
+							//if (hasPrimaryKey) hasPrimaryKey = false;//���ٴ�������
 						} else {
 							System.arraycopy(vals, 0, tableMaxValues, 0, sortedColCount);
 						}

File: src/main/java/com/scudata/dw/PhyTableIndex.java
Patch:
@@ -1598,7 +1598,7 @@ protected ArrayList <ICursor> sortCol(String []fields, Context ctx, Expression f
 				}
 			}
 
-			if (table.length() > 0) {
+			if (table != null && table.length() > 0) {
 				table.sortFields(sortFields);
 				MemoryCursor mc = new MemoryCursor(table);
 				cursorList.add(mc);

File: src/main/java/com/scudata/dw/RowPhyTable.java
Patch:
@@ -879,11 +879,11 @@ private void appendSegment(ICursor cursor) throws IOException {
 					if (tableMaxValues != null) {
 						int cmp = Variant.compareArrays(vals, tableMaxValues, sortedColCount);
 						if (cmp < 0) {
-							hasPrimaryKey = false;
+							//hasPrimaryKey = false;//���ٴ�������
 							isSorted = false;
 							maxValues = null;
 						} else if (cmp == 0){
-							if (hasPrimaryKey) hasPrimaryKey = false;
+							//if (hasPrimaryKey) hasPrimaryKey = false;//���ٴ�������
 						} else {
 							System.arraycopy(vals, 0, tableMaxValues, 0, sortedColCount);
 						}

File: src/main/java/com/scudata/expression/mfn/dw/Icursor.java
Patch:
@@ -91,8 +91,7 @@ public class Icursor extends PhyTableFunction {
 			
 			param = param.getSub(1);
 			if (param == null) {
-				MessageManager mm = EngineMessage.get();
-				throw new RQException("icursor" + mm.getMessage("function.invalidParam"));
+				return table.cursor(fields);//û�й���ʱ
 			}
 
 		}

File: src/main/java/com/scudata/dw/TableHashIndex.java
Patch:
@@ -1529,7 +1529,7 @@ private ArrayList <ICursor> sortCol(String []fields, Context ctx, Expression fil
 				}
 			}
 
-			if (table.length() > 0) {
+			if (table != null && table.length() > 0) {
 				table.sortFields(sortFields);
 				MemoryCursor mc = new MemoryCursor(table);
 				cursorList.add(mc);

File: src/main/java/com/scudata/expression/mfn/file/Structure.java
Patch:
@@ -275,7 +275,7 @@ private static Object getTableCuboidStruct(FileObject fo) {
 				r.setNormalFieldValue(1, newExps[i]);
 				aggr.add(r);
 			}
-			rec.setNormalFieldValue(2, aggr);
+			rec.setNormalFieldValue(1, aggr);
 			srcCuboid.close();
 		} catch (Exception e) {
 			if (srcCuboid != null) srcCuboid.close();

File: src/main/java/com/scudata/expression/fn/convert/Typeof.java
Patch:
@@ -9,7 +9,7 @@
 import com.scudata.dm.Context;
 import com.scudata.dm.Sequence;
 import com.scudata.dm.SerialBytes;
-import com.scudata.dm.query.metadata.Table;
+import com.scudata.dm.Table;
 import com.scudata.expression.Function;
 import com.scudata.resources.EngineMessage;
 

File: src/main/java/com/scudata/expression/FunctionLib.java
Patch:
@@ -714,6 +714,7 @@ private static void loadSystemFunctions() {
 		addFunction("iftime", "com.scudata.expression.fn.convert.IfTime");
 		addFunction("ifnumber", "com.scudata.expression.fn.convert.IfNumber");
 		addFunction("ifstring", "com.scudata.expression.fn.convert.IfString");
+		addFunction("typeof", "com.scudata.expression.fn.convert.Typeof");
 		addFunction("isalpha", "com.scudata.expression.fn.convert.IsAlpha");
 		addFunction("isdigit", "com.scudata.expression.fn.convert.IsDigit");
 		addFunction("islower", "com.scudata.expression.fn.convert.IsLower");

File: src/main/java/com/scudata/ide/spl/Esprocx.java
Patch:
@@ -308,7 +308,7 @@ public static void main(String[] args) throws Exception {
 								.readLine("(%d): ", row++);
 						if (line == null)
 							break;
-						if (fileArgs.length() > 0) {
+						if (fileArgs.length()>1) {
 							fileArgs.append('\n');
 						}
 						fileArgs.append(line);

File: src/main/java/com/scudata/dw/ContainFilter.java
Patch:
@@ -79,13 +79,13 @@ else if (cmp > 0)
 		}
 		
 		// ����Сֵ�ȼ������ֵ����߿���Сֵ�������ֵ��û�з��������ļ�¼
-		if (low1 >= len || Variant.isEquals(minValue, maxValue)) {
+		if (low1 > len || Variant.isEquals(minValue, maxValue)) {
 			return false;
 		}
 		
 		// ���ַ��������ֵ�������е�λ��
-		int low2 = 0;
-		int high2 = len - 1;
+		int low2 = low1;
+		int high2 = len;
 		while (low2 <= high2) {
 			int mid = (low2 + high2) >>> 1;
 			int cmp = Variant.compare(values.get(mid), maxValue, true);

File: src/main/java/com/scudata/server/http/HttpContext.java
Patch:
@@ -150,11 +150,10 @@ public void load(InputStream is) throws Exception {
 			File main = new File( mp );
 			if( main.exists() ) {
 				String mainPath = main.getAbsolutePath();
-//				addSubdir2Sappath( main, mainPath );��Ϊ������Ŀ¼��sappath���ɷ������Զ�����
-//				һ�����·������ΪӲ�̸�Ŀ¼ʱ�����sappath̫���ˣ���û���壬���ᵼ�±༭ʱ���� xq 2023��7��24��
+				addSubdir2Sappath( main, mainPath );//�����װ��Ŀ¼��������Ŀ¼�µ�splx�ļ�����дʱ�����ʲ��� xq 2023��9��6��
 			}
 		}
-		/*buf = XmlUtil.getAttribute(root, "sapPath");
+		/*buf = XmlUtil.getAttribute(root, "sapPath");//�����Ŀ¼�����浽�����ļ��ˣ�һ�����ܴ󣬽���ʱ̫������Ӱ�쵽���������
 		if (StringUtils.isValidString(buf)) {
 			ArgumentTokenizer at = new ArgumentTokenizer(buf, ',');
 			while (at.hasMoreTokens()) {

File: src/main/java/com/scudata/expression/mfn/file/Structure.java
Patch:
@@ -149,7 +149,7 @@ protected static Sequence getTableColumnStruct(PhyTable table) {
 			for (ColumnMetaData column: columns ) {
 				Record rec = new Record(new DataStruct(COL_FIELD_FIELD_NAMES));
 				rec.setNormalFieldValue(0, column.getColName());
-				rec.setNormalFieldValue(1, column.isDim());
+				rec.setNormalFieldValue(1, column.isKey());
 				rec.setNormalFieldValue(2, DataBlockType.getTypeName(column.getDataType()));
 				rec.setNormalFieldValue(3, DataBlockType.getTypeLen(column.getDataType()));
 				Sequence dict = column.getDict();

File: src/main/java/com/scudata/dm/cursor/ICursor.java
Patch:
@@ -1317,7 +1317,7 @@ public void setSkipBlockInfo(String key, IArray[] values) {
 	 * @param opt
 	 */
 	public void setSkipBlock(Expression []srcKeyExps, ICursor []cursors, String []options, Expression [][]keyExps, Expression [][]newExps, String option) {
-		int tableCount = srcKeyExps.length;
+		int tableCount = cursors.length;
 		String key = srcKeyExps[0].getFieldName();
 		if (option == null || option.indexOf('f') == -1) {
 			if ((option == null || option.indexOf('r') == -1) && canSkipBlock()) {

File: src/main/java/com/scudata/dw/ComTable.java
Patch:
@@ -15,7 +15,6 @@
 import com.scudata.dm.FileGroup;
 import com.scudata.dm.FileObject;
 import com.scudata.dm.IFile;
-import com.scudata.dm.LocalFile;
 import com.scudata.dm.LongArray;
 import com.scudata.dm.cursor.ConjxCursor;
 import com.scudata.dm.cursor.ICursor;

File: src/main/java/com/scudata/expression/mfn/db/Update.java
Patch:
@@ -185,7 +185,7 @@ public Object calculate(Context ctx) {
 				}
 
 				MessageManager mm = EngineMessage.get();
-				throw new RQException("update(...; " + pkName + ")" + mm.getMessage("function.invalidParam"));
+				throw new RQException(mm.getMessage("function.paramError", "update", mm.getMessage("mfn.dbUpdateKey")));
 			}
 
 			if (option != null && option.indexOf('1') != -1) {

File: src/main/java/com/scudata/array/LongArray.java
Patch:
@@ -78,7 +78,7 @@ public long[] getDatas() {
 		return datas;
 	}
 	
-	boolean[] getSigns() {
+	public boolean[] getSigns() {
 		return signs;
 	}
 	

File: src/main/java/com/scudata/dw/DataBlockType.java
Patch:
@@ -100,6 +100,8 @@ public static DataBlockType getDataBlockType(Sequence data, int col, int start,
 		
 		if (obj == null) {
 			//�����鶼��null
+			seq = new Sequence();
+			seq.add(null);
 			return new DataBlockType(DICT, seq);
 			//return new DataBlockType(NULL, true);
 		}

File: src/main/java/com/scudata/expression/mfn/sequence/FieldValue.java
Patch:
@@ -152,7 +152,7 @@ public static Sequence getFieldValues(Sequence src, String fieldName) {
 
 		int i = 1;
 		while (i <= size) {
-			Object obj = src.getMem(i);
+			Object obj = src.getMem(i++);
 			if (obj != null) {
 				if (!(obj instanceof BaseRecord)) {
 					MessageManager mm = EngineMessage.get();

File: src/main/java/com/scudata/expression/mfn/file/XlsImport.java
Patch:
@@ -77,7 +77,7 @@ public Object calculate(Context ctx) {
 
 				if (isCursor) {
 					XlsxSImporter importer = new XlsxSImporter(file, null, 0,
-							-1, new Integer(1), opt);
+							0, new Integer(1), opt);
 					String cursorOpt = "";
 					if (hasTitle)
 						cursorOpt += "t";

File: src/main/java/com/scudata/excel/ExcelTool.java
Patch:
@@ -950,7 +950,8 @@ public void fileXlsExport(ICursor cursor, Expression[] exps,
 						for (int f = 0; f < fcount; ++f) {
 							lineObjs[f] = exps[f].calculate(ctx);
 							if (lineObjs[f] instanceof BaseRecord) {
-								lineObjs[f] = ((BaseRecord) lineObjs[f]).value();
+								lineObjs[f] = ((BaseRecord) lineObjs[f])
+										.value();
 							}
 						}
 

File: src/main/java/com/scudata/excel/SheetXls.java
Patch:
@@ -650,7 +650,8 @@ public void xlsexport(ICursor cursor, Expression[] exps, String[] names,
 						for (int f = 0; f < fcount; ++f) {
 							lineObjs[f] = exps[f].calculate(ctx);
 							if (lineObjs[f] instanceof BaseRecord) {
-								lineObjs[f] = ((BaseRecord) lineObjs[f]).value();
+								lineObjs[f] = ((BaseRecord) lineObjs[f])
+										.value();
 							}
 						}
 

File: src/main/java/com/scudata/expression/mfn/file/XlsImport.java
Patch:
@@ -109,7 +109,7 @@ public Object calculate(Context ctx) {
 		String[] fields = null;
 		Object s = null;
 		int start = 0;
-		int end = -1;
+		int end = 0;
 
 		IParam fieldParam;
 		String pwd = null;

File: src/main/java/com/scudata/excel/SheetHandler.java
Patch:
@@ -142,7 +142,7 @@ protected SheetHandler(StylesTable styles, SharedStringsTable sst,
 		this.sst = sst;
 		this.styles = styles;
 		this.fields = fields;
-		this.startRow = startRow + 1;
+		this.startRow = startRow;
 		this.endRow = endRow;
 		this.removeBlank = removeBlank;
 		this.bTitle = bTitle;

File: src/main/java/com/scudata/excel/SheetHandler.java
Patch:
@@ -142,7 +142,7 @@ protected SheetHandler(StylesTable styles, SharedStringsTable sst,
 		this.sst = sst;
 		this.styles = styles;
 		this.fields = fields;
-		this.startRow = startRow;
+		this.startRow = startRow + 1;
 		this.endRow = endRow;
 		this.removeBlank = removeBlank;
 		this.bTitle = bTitle;

File: src/main/java/com/scudata/dw/IndexCursor.java
Patch:
@@ -24,7 +24,7 @@
  *
  */
 public class IndexCursor extends ICursor {
-	private int BUFFER_SIZE = 4096 * 4;
+	private int BUFFER_SIZE = 1024 * 32;
 	
 	private PhyTable table;
 	private String []fields;//ȡ���ֶ�

File: src/main/java/com/scudata/dw/Cursor.java
Patch:
@@ -1161,7 +1161,9 @@ private void init() {
 				if (Variant.isTrue(sr.calc(filter, ctx))) {
 					list.add(mr);
 				} else {
-					list.add(new ModifyRecord(mr.getRecordSeq()));
+					if (mr.isUpdate()) {
+						list.add(new ModifyRecord(mr.getRecordSeq()));
+					}
 				}
 			}
 			if (list.size() == 0) {

File: src/main/java/com/scudata/expression/fn/T.java
Patch:
@@ -236,7 +236,7 @@ public Object calculate(Context ctx) {
 				sopt = "@t";
 			}
 			if (A == null) { // ����
-				buf.append("create().cursor" + sopt + "(");
+				buf.append("open().cursor" + sopt + "(");
 				if (fields != null) {
 					buf.append(fields);
 				}
@@ -245,7 +245,7 @@ public Object calculate(Context ctx) {
 					buf.append(".fetch()");
 				}
 			} else {// ����
-				buf.append("create(");
+				buf.append("open(");
 				if (fields != null) {
 					buf.append(fields);
 				} else {

File: src/main/java/com/scudata/array/LongArray.java
Patch:
@@ -447,7 +447,7 @@ public void insert(int index, Object o) {
 				System.arraycopy(signs, index, signs, index + 1, size - index);
 			}
 			
-			datas[index] = ((Integer)o).intValue();
+			datas[index] = ((Long)o).intValue();
 		} else if (o == null) {
 			ensureCapacity(size + 1);
 			

File: src/main/java/com/scudata/ide/spl/SPL.java
Patch:
@@ -583,7 +583,8 @@ public boolean closeSheet(Object sheet, boolean showSheet, boolean isQuit) {
 		}
 		if (isQuit && sheet instanceof SheetSpl) { // �ر�ȫ��
 			SheetSpl ss = (SheetSpl) sheet;
-			ss.close(true);
+			if (!ss.close(isQuit))
+				return false;
 		} else if (!((IPrjxSheet) sheet).close()) {
 			return false;
 		}

File: src/main/java/com/scudata/cellset/graph/draw/DrawBarStacked.java
Patch:
@@ -238,10 +238,9 @@ private static void drawSeries(int serNumBase, Vector serNames,ExtGraphCategory
 							&& gp.dispValueType == IGraphProperty.DISPDATA_NAME_PERCENTAGE) {
 						sval = getDispName(egc, egs, serNum) + "," + sval;
 					}
-				}else{
+				}else if(egc != null
+						&& gp.dispValueType != IGraphProperty.DISPDATA_NONE){
 					sval = db.getDispValue(egc,egs,gp.serNum);
-//				}else if(gp.dispValueType == IGraphProperty.DISPDATA_TITLE){
-//					sval = egs.getTips();
 				}
 				
 				if(StringUtils.isValidString( sval )){

File: src/main/java/com/scudata/expression/mfn/dw/Update.java
Patch:
@@ -99,7 +99,7 @@ public Object calculate(Context ctx) {
 		if (obj2 != null) {
 			try {
 				Sequence result2 = table.delete((Sequence)obj2, opt);
-				if (hasN) {
+				if (hasN && result != null) {
 					((Sequence)result).addAll(result2);
 				}
 			} catch (IOException e) {

File: src/main/java/com/scudata/parallel/Task.java
Patch:
@@ -1,5 +1,6 @@
 package com.scudata.parallel;
 
+import java.io.Serializable;
 import java.text.DecimalFormat;
 import java.util.ArrayList;
 import java.util.List;
@@ -26,6 +27,7 @@
 import com.scudata.ide.spl.Esprocx;
 import com.scudata.resources.ParallelMessage;
 import com.scudata.server.odbc.OdbcServer;
+import com.scudata.server.unit.JdbcTask;
 import com.scudata.server.unit.UnitServer;
 import com.scudata.thread.Job;
 import com.scudata.util.CellSetUtil;
@@ -335,7 +337,7 @@ private Sequence executeTask() throws Exception {
 		}
 
 		while (pcs.hasNextResult()) {
-			Object tmp = pcs.nextResult();
+			Object tmp = JdbcTask.checkResult( pcs.nextResult() );
 			if (!isLocalExecute && (tmp instanceof ICursor)) {
 				int proxyId = UnitServer.nextId();
 				RemoteCursorProxyManager rcpm = getCursorManager();

File: src/main/java/com/scudata/parallel/UnitWorker.java
Patch:
@@ -1,5 +1,7 @@
 package com.scudata.parallel;
 
+import java.io.Serializable;
+
 import com.scudata.common.MessageManager;
 import com.scudata.dm.Env;
 import com.scudata.dm.ZoneManager;
@@ -114,7 +116,6 @@ public void run() {
 					setName("UnitWorker[execute cmd]:"+req);
 					response = UnitServer.getInstance().execute(req);
 				}
-
 				socketData.write(response);
 			}
 		} catch (Exception x) {

File: src/main/java/com/scudata/cellset/graph/draw/DrawBarStacked.java
Patch:
@@ -260,10 +260,9 @@ private static void drawSeries(int serNumBase, Vector serNames,ExtGraphCategory
 							&& gp.dispValueType == IGraphProperty.DISPDATA_NAME_PERCENTAGE) {
 						sval = getDispName(egc, egs, serNum) + "," + sval;
 					}
-				}else{
+				}else if(egc != null
+						&& gp.dispValueType != IGraphProperty.DISPDATA_NONE){
 					sval = db.getDispValue(egc,egs,gp.serNum);
-//				}else if(gp.dispValueType == IGraphProperty.DISPDATA_TITLE){
-//					sval = egs.getTips();
 				}
 				
 				if(StringUtils.isValidString( sval )){

File: src/main/java/com/scudata/parallel/PartitionUtil.java
Patch:
@@ -148,7 +148,7 @@ public static boolean isYOption(String option){
 		return option!=null && option.indexOf("y")>-1;
 	}
 	/**
-	 * movefile@yc(fn:h,p:hs)	���ֻ�h�ϵ��ļ�fn�Ƶ�hs�ֻ���p·���£�hs�������У�hʡ�Ա���
+	 * movefile(fn:z,h;p,hs)	���ֻ�h�ϵ��ļ�fn�Ƶ�hs�ֻ���p·���£�hs�������У�hʡ�Ա���
 	 * hsʡ��Ϊ����
 	 * p:hsʡ��ɾ��
 	 * h��pʡ�Ե�hs������ɾ��hs�µ��ļ�

File: src/main/java/com/scudata/expression/mfn/dw/Update.java
Patch:
@@ -42,7 +42,7 @@ public Object calculate(Context ctx) {
 		if (param.getType() == IParam.Colon) {
 			IParam sub0 = param.getSub(0);
 			IParam sub1 = param.getSub(1);
-			obj = sub0.getLeafExpression().calculate(ctx);
+			obj = sub0 == null ? null : sub0.getLeafExpression().calculate(ctx);
 			obj2 = sub1 == null ? null : sub1.getLeafExpression().calculate(ctx);
 			
 		} else {

File: src/main/java/com/scudata/dw/JoinCursor2.java
Patch:
@@ -232,7 +232,7 @@ public JoinCursor2(Object table, Expression []exps, String []fields, ICursor cur
 			int len = exps.length;
 			fieldIndex1 = new int[len];
 			for (i = 0; i < len; i++) {
-				fieldIndex1[i] = cursor1.getDataStruct().getFieldIndex(fields[i]);
+				fieldIndex1[i] = cursor1.getDataStruct().getFieldIndex(exps[i].getIdentifierName());
 			}
 		}
 		

File: src/main/java/com/scudata/dw/pseudo/PseudoNew.java
Patch:
@@ -110,7 +110,7 @@ private ICursor getCursor(IPhyTable table, ICursor cursor, String []fkNames, Seq
 		} else if (JoinCursor.isColTable(table)) {
 			result = (ICursor) New._new((ColPhyTable)table, cursor, cursor, csNames, filter, exps,	names, fkNames, codes, opts, option, ctx);
 		} else {
-			result = (ICursor) New._new((IPhyTable)table, cursor, cursor, filter, exps,	names, fkNames, codes, opts, ctx);
+			result = (ICursor) New._new((IPhyTable)table, cursor, cursor, null, filter, exps,	names, fkNames, codes, opts, ctx);
 		}
 		ArrayList<Operation> opList = this.opList;
 		if (opList != null) {

File: src/main/java/com/scudata/dw/pseudo/PseudoNews.java
Patch:
@@ -105,7 +105,7 @@ private ICursor getCursor(IPhyTable table, ICursor cursor, String []fkNames, Seq
 		} else if (JoinCursor.isColTable(table)) {
 			result = (ICursor) News.news((ColPhyTable)table, cursor, cursor, csNames, filter, exps,	names, fkNames, codes, opts, option, ctx);
 		} else {
-			result = (ICursor) News.news((IPhyTable)table, cursor, cursor, filter, exps,	names, fkNames, codes, opts, ctx);
+			result = (ICursor) News.news((IPhyTable)table, cursor, cursor, null, filter, exps,	names, fkNames, codes, opts, ctx);
 		}
 		ArrayList<Operation> opList = this.opList;
 		if (opList != null) {

File: src/main/java/com/scudata/expression/mfn/dw/Derive.java
Patch:
@@ -193,9 +193,9 @@ public static Object derive(ColPhyTable table, ICursor cursor, Object obj, Strin
 	public static Object derive(IPhyTable table, ICursor cursor, Object obj, Expression filter, Expression []exps,
 			String[] names, String []fkNames, Sequence []codes, String[] opts, Context ctx) {
 		if (cursor instanceof MultipathCursors) {
-			return JoinCursor2.makeMultiJoinCursor(table, exps, names, (MultipathCursors)cursor, filter, fkNames, codes, opts, 2, ctx);
+			return JoinCursor2.makeMultiJoinCursor(table, exps, names, (MultipathCursors)cursor, null, filter, fkNames, codes, opts, 2, ctx);
 		}
-		ICursor cs = new JoinCursor2(table, exps, names, cursor, filter, fkNames, codes, opts, 0, ctx);
+		ICursor cs = new JoinCursor2(table, exps, names, cursor, null, filter, fkNames, codes, opts, 0, ctx);
 		if (obj instanceof Sequence) {
 			return cs.fetch();
 		} else {

File: src/main/java/com/scudata/dm/sql/Tokenizer.java
Patch:
@@ -56,7 +56,7 @@ public final class Tokenizer {
 		"MINUS",
 		"NOT","NULL",
 		"ON","ONLY","OR","ORDER",
-		"ROWS",
+		"ROWS", "RIGHT",
 		"SELECT",
 		"THEN","TO","TOP","TABLE","TEMPORARY","TEMP",
 		"UNION",

File: src/main/java/com/scudata/dw/PureBufferReader.java
Patch:
@@ -89,7 +89,7 @@ private void init(Sequence columnDict, int recordCount) {
 				}
 				this.index = idx;
 				this.pos = len;
-				break;
+				return;
 			case DataBlockType.SERIALBYTES:
 				dataSize = 16;
 				break;

File: src/main/java/com/scudata/dw/MemoryTable.java
Patch:
@@ -698,7 +698,7 @@ public Object ifind(Object key, String iname, String opt, Context ctx) {
 		index = this.getIndex(iname);
 		if (index == null) {
 			MessageManager mm = EngineMessage.get();
-			throw new RQException("icursor" + mm.getMessage("dw.indexNotExist") + " : " + iname);
+			throw new RQException("ifind" + mm.getMessage("dw.indexNotExist") + " : " + iname);
 		}
 		return index.ifind(key, opt, ctx);
 	}

File: src/main/java/com/scudata/server/unit/ConnectionProxy.java
Patch:
@@ -89,6 +89,7 @@ public boolean isClosed(){
 	 */
 	public void close() {
 		JobSpaceManager.closeSpace(spaceId);
+		DatabaseUtil.closeAutoDBs(context);
 		closed =  true;
 		Logger.debug(this+" closed.");
 	}

File: src/main/java/com/scudata/dw/MemoryTableIndex.java
Patch:
@@ -207,6 +207,7 @@ private void createSortIndex(String[] fields, Context ctx) {
 		table = table.group(exp, "o", ctx);
 		
 		int len = table.length();
+		int avgNums = 0;
 		Table indexData = new Table(names2, len);
 		IntArray[] recordNums = new IntArray[len + 1]; 
 		

File: src/main/java/com/scudata/dw/DataBlockType.java
Patch:
@@ -379,7 +379,7 @@ private static DataBlockType checkStringBlockType(Sequence data, int start, int
 			Object obj = data.get(i);
 			if (obj == null) {
 				hasNull = true;
-				//isAssic = false;
+				isAssic = false;
 				continue;
 			}
 			if (!(obj instanceof String)) {

File: src/main/java/com/scudata/dw/ColPhyTable.java
Patch:
@@ -4806,7 +4806,7 @@ public long resetByBlock(int block) {
 	 */
 	long[] checkDim(String field, Node node, Context ctx) {
 		ColumnMetaData col = getColumn(field);
-		if (!col.isDim()) {
+		if (col == null || !col.isDim()) {
 			return null;
 		}
 		

File: src/main/java/com/scudata/common/StringUtils.java
Patch:
@@ -1607,9 +1607,9 @@ private final static boolean matches(byte[] src, int pos1, int len1, byte[] fmt,
 	}
 	
 	public static boolean isAssicString(String str) {
-		if (str == null) return false;
+		if (str == null) return true;
 		int len = str.length();
-		if (len == 0) return false;
+		if (len == 0) return true;
 		for (int i = 0; i < len; i++) {
 			char ch = str.charAt(i);
 			if (ch < 0 || ch >= 0x80)

File: src/main/java/com/scudata/dw/DataBlockType.java
Patch:
@@ -379,7 +379,7 @@ private static DataBlockType checkStringBlockType(Sequence data, int start, int
 			Object obj = data.get(i);
 			if (obj == null) {
 				hasNull = true;
-				isAssic = false;
+				//isAssic = false;
 				continue;
 			}
 			if (!(obj instanceof String)) {

File: src/main/java/com/scudata/dw/PhyTable.java
Patch:
@@ -1856,7 +1856,7 @@ MultipathCursors conj(MultipathCursors cs1, ICursor cs2) {
 			}
 		} else {
 			result[0] = new ConjxCursor(new ICursor[]{cursors1[0], cs2});
-			System.arraycopy(cursors1, 1, result, 1, count);
+			System.arraycopy(cursors1, 1, result, 1, count - 1);
 		}
 		
 		return new MultipathCursors(result, ctx);

File: src/main/java/com/scudata/dw/Cursor.java
Patch:
@@ -397,7 +397,7 @@ private static Object combineAnd(Node node, Object left, Object right) {
 					Object obj = filterList2.get(i);
 					if (obj instanceof IFilter) {
 						IFilter filter = (IFilter)obj;
-						for (int j = 0; j < size; ++i) {
+						for (int j = 0; j < size; ++j) {
 							obj = filterList.get(j);
 							if (obj instanceof IFilter && filter.isSameColumn((IFilter)obj)) {
 								LogicAnd and = new LogicAnd((IFilter)obj, filter);
@@ -406,7 +406,7 @@ private static Object combineAnd(Node node, Object left, Object right) {
 							}
 						}
 						
-						filterList.add(obj);
+						filterList.add(filter);
 					} else {
 						filterList.add(obj);
 					}

File: src/main/java/com/scudata/dw/RowCursor.java
Patch:
@@ -377,7 +377,7 @@ private static Object combineAnd(Node node, Object left, Object right) {
 					Object obj = filterList2.get(i);
 					if (obj instanceof IFilter) {
 						IFilter filter = (IFilter)obj;
-						for (int j = 0; j < size; ++i) {
+						for (int j = 0; j < size; ++j) {
 							obj = filterList.get(j);
 							if (obj instanceof IFilter && filter.isSameColumn((IFilter)obj)) {
 								LogicAnd and = new LogicAnd((IFilter)obj, filter, filter.columnName);
@@ -386,7 +386,7 @@ private static Object combineAnd(Node node, Object left, Object right) {
 							}
 						}
 						
-						filterList.add(obj);
+						filterList.add(filter);
 					} else {
 						filterList.add(obj);
 					}

File: src/main/java/com/scudata/dw/Cursor.java
Patch:
@@ -1034,6 +1034,8 @@ private void init() {
 				Record sr = mr.getRecord();
 				if (Variant.isTrue(sr.calc(filter, ctx))) {
 					list.add(mr);
+				} else {
+					list.add(new ModifyRecord(mr.getRecordSeq()));
 				}
 			}
 			if (list.size() == 0) {

File: src/main/java/com/scudata/ide/spl/control/SplEditor.java
Patch:
@@ -113,7 +113,7 @@ public class SplEditor {
 	/**
 	 * ѡ�еĸ��Ӿ���
 	 */
-	public Vector<Object> selectedRects = new Vector<Object>();
+	public Vector<CellRect> selectedRects = new Vector<CellRect>();
 
 	/**
 	 * ѡ�е��к�
@@ -662,7 +662,7 @@ public CellRect getSelectedRect() {
 	 * 
 	 * @return
 	 */
-	public Vector<Object> getSelectedRects() {
+	public Vector<CellRect> getSelectedRects() {
 		return selectedRects;
 	}
 
@@ -1643,7 +1643,7 @@ public boolean note() {
 	 * ���õ�Ԫ����ʾ
 	 */
 	public void setTips() {
-		Vector<Object> rects = getSelectedRects();
+		Vector<CellRect> rects = getSelectedRects();
 		if (rects == null) {
 			return;
 		}

File: src/main/java/com/scudata/ide/spl/etl/element/FExport.java
Patch:
@@ -82,7 +82,7 @@ public String optionString(){
 		if(t){
 			options.append("t");
 		}
-		if(a && !t){//a t ����
+		if(a){
 			options.append("a");
 		}
 		if(b){

File: src/main/java/com/scudata/dm/query/SimpleSelect.java
Patch:
@@ -705,7 +705,7 @@ else if(this.file != null)
 						if(icursor != null)
 						{
 							Sequence seq = icursor.peek(1);
-							System.out.println(seq);
+							//System.out.println(seq);
 							if(seq != null)
 							{
 								this.struct = seq.dataStruct();

File: src/main/java/com/scudata/dm/query/SimpleSelect.java
Patch:
@@ -728,7 +728,7 @@ else if(this.file != null)
 				this.where = where; //��ԭ��ǰ����
 			}
 			
-			System.out.println("this.struct="+Arrays.toString(this.struct.getFieldNames()));
+			//System.out.println("this.struct="+Arrays.toString(this.struct.getFieldNames()));
 			
 			return this.struct;
 		}

File: src/main/java/com/scudata/ide/spl/base/JTableValue.java
Patch:
@@ -647,6 +647,8 @@ public void resetData(int index) {
 	 * @param isFirst �Ƿ��һ������ֵ
 	 */
 	public void resetData(int index, boolean isFirst) {
+		if (index <= 0)
+			index = 1;
 		dispStartIndex = index;
 		if (resetThread != null) {
 			resetThread.stopThread();

File: src/main/java/com/scudata/dw/Cursor.java
Patch:
@@ -2748,7 +2748,7 @@ private Sequence getModify2(int n) {
 	protected long skipOver(long n) {
 		if (isClosed) {
 			return 0;
-		} else if (isFirstSkip && n == MAXSKIPSIZE && filter == null && !isSegment) {
+		} else if (isFirstSkip && n == MAXSKIPSIZE && filter == null && fkNames == null && !isSegment) {
 			return table.getActualRecordCount();
 		}
 		

File: src/main/java/com/scudata/server/unit/StatementProxy.java
Patch:
@@ -13,6 +13,7 @@
 import com.scudata.parallel.RemoteCursor;
 import com.scudata.parallel.RemoteCursorProxy;
 import com.scudata.parallel.RemoteCursorProxyManager;
+import com.scudata.parallel.TaskManager;
 import com.scudata.parallel.UnitContext;
 import com.scudata.server.IProxy;
 
@@ -136,6 +137,7 @@ public boolean cancel() throws Exception {
 	 * �رյ�ǰ������
 	 */
 	public void close() {
+		TaskManager.delTask(getId());
 	}
 
 	/**

File: src/main/java/com/scudata/parallel/Task.java
Patch:
@@ -272,6 +272,7 @@ private Exception getCancelException() {
 	 * ׼������ǰ�������Ļ��� 
 	 * @return ����������
 	 */
+	
 	public static Context prepareEnv() throws Exception{
 		Context context = new Context();
 		if (connectedDsNames == null) {

File: src/main/java/com/scudata/server/http/HttpContext.java
Patch:
@@ -165,6 +165,9 @@ public void load(InputStream is) throws Exception {
 	
 	private void addSubdir2Sappath( File main, String mainPath ) {
 		File[] fs = main.listFiles();
+		if(fs==null) {
+			return;
+		}
 		for( int i = 0; i < fs.length; i++ ) {
 			if( !fs[i].isDirectory() ) continue;
 			String path = fs[i].getAbsolutePath();

File: src/main/java/com/scudata/dw/pseudo/PseudoDefination.java
Patch:
@@ -258,7 +258,9 @@ private void parseFileToTable(String fn, int partitions[], Context ctx) {
 		if (partitions == null) {
 			FileObject fo = new FileObject(fn, null, null, ctx);
 			File f = fo.getLocalFile().file();
-			tables.add(ComTable.openBaseTable(f, ctx));
+			PhyTable t = ComTable.openBaseTable(f, ctx);
+			tables.add(t);
+			ctx.removeResource(t.getGroupTable());
 		} else {
 			int pcount = partitions.length;
 			for (int i = 0; i < pcount; ++i) {

File: src/main/java/com/scudata/dw/MemoryTable.java
Patch:
@@ -693,7 +693,7 @@ public ICursor icursor(String []fields, Expression filter, String iname, String
 	/**
 	 * ������ѯ����ifind�����
 	 */
-	public Sequence ifind(Object key, String iname, String opt, Context ctx) {
+	public Object ifind(Object key, String iname, String opt, Context ctx) {
 		MemoryTableIndex index = null;
 		index = this.getIndex(iname);
 		if (index == null) {

File: src/main/java/com/scudata/dw/MemoryTable.java
Patch:
@@ -693,13 +693,13 @@ public ICursor icursor(String []fields, Expression filter, String iname, String
 	/**
 	 * ������ѯ����ifind�����
 	 */
-	public Sequence ifind(Sequence seq, String iname, String opt, Context ctx) {
+	public Sequence ifind(Object key, String iname, String opt, Context ctx) {
 		MemoryTableIndex index = null;
 		index = this.getIndex(iname);
 		if (index == null) {
 			MessageManager mm = EngineMessage.get();
 			throw new RQException("icursor" + mm.getMessage("dw.indexNotExist") + " : " + iname);
 		}
-		return index.ifind(seq, opt, ctx);
+		return index.ifind(key, opt, ctx);
 	}
 }
\ No newline at end of file

File: src/main/java/com/scudata/ide/spl/dialog/DialogOptions.java
Patch:
@@ -423,7 +423,7 @@ public DialogOptions(JFrame parent, boolean isUnit) {
 			}
 			initUI();
 			load();
-			int dialogWidth = 800;
+			int dialogWidth = 830;
 			if (GC.LANGUAGE == GC.ASIAN_CHINESE && !isUnit) {
 				dialogWidth = 700;
 			}

File: src/main/java/com/scudata/dm/cursor/FileCursor.java
Patch:
@@ -409,7 +409,7 @@ private Sequence fetchAll(LineImporter importer, int n) throws IOException {
 			}
 		}
 		
-		if (importer.getCurrentPosition() > end) {
+		if (end > 0 && importer.getCurrentPosition() > end) {
 			return null;
 		}
 		

File: src/main/java/com/scudata/array/LongArray.java
Patch:
@@ -5319,7 +5319,7 @@ public boolean isEquals(int curIndex, IArray array, int index) {
 	public boolean isEquals(int curIndex, Object value) {
 		if (signs == null || !signs[curIndex]) {
 			if (value instanceof Long || value instanceof Integer) {
-				return ((Integer)value).longValue() == datas[curIndex];
+				return ((Number)value).longValue() == datas[curIndex];
 			} else if (value instanceof BigDecimal) {
 				return new BigDecimal(datas[curIndex]).equals(value);
 			} else if (value instanceof BigInteger) {

File: src/main/java/com/scudata/server/unit/ConnectionProxy.java
Patch:
@@ -89,7 +89,7 @@ public boolean isClosed(){
 	 */
 	public void close() {
 		JobSpaceManager.closeSpace(spaceId);
-		closed = true;
+		closed =  true;
 		Logger.debug(this+" closed.");
 	}
 

File: src/main/java/com/scudata/server/http/SplxServerInIDE.java
Patch:
@@ -84,6 +84,7 @@ public boolean start() throws Throwable {
 			httpServer = HttpServer.create(inetSock, ctx.getMaxLinks());
 			LinksPool.setMaxLinks( ctx.getMaxLinks() );
 		}catch(java.net.BindException ex){
+			ex.printStackTrace();
 			throw new Exception(ParallelMessage.get().getMessage("SplxServerInIDE.portbind",port));
 		}
 		SplxHttpHandler dhh = new SplxHttpHandler();

File: src/main/java/com/scudata/server/unit/ConnectionProxy.java
Patch:
@@ -88,6 +88,7 @@ public boolean isClosed(){
 	 * �ص���ǰ���Ӵ�����
 	 */
 	public void close() {
+		JobSpaceManager.closeSpace(spaceId);
 		closed = true;
 		Logger.debug(this+" closed.");
 	}

File: src/main/java/com/scudata/dw/UnknownNodeFilter.java
Patch:
@@ -140,6 +140,7 @@ public boolean isNeedSelect() {
 	}
 	
 	public int isValueRangeMatch(Context ctx) {
+		if (colCount == 0) return 1;
 		return 0;
 		//if (colCount == 0) return 0;
 		//return exp.isValueRangeMatch(ctx);

File: src/main/java/com/scudata/dm/Sequence.java
Patch:
@@ -2645,6 +2645,8 @@ public Sequence id(String opt) {
 			return result;
 		} else if (opt.indexOf('u') != -1) {
 			return CursorUtil.hashId(this, opt);
+		} else if (opt.indexOf('n') != -1 || opt.indexOf('b') != -1) {
+			return CursorUtil.hashId(this, opt);
 		} else {
 			if (length() > SORT_HASH_LEN) {
 				return CursorUtil.hashId(this, opt);

File: src/main/java/com/scudata/dw/ColumnsOr.java
Patch:
@@ -3,13 +3,15 @@
 import java.util.ArrayList;
 import java.util.Arrays;
 
+import com.scudata.array.BoolArray;
 import com.scudata.expression.Node;
 
 public class ColumnsOr {
 	private ArrayList<IFilter> filterList = new ArrayList<IFilter>();
 
 	private Node node;
 	public boolean sign;
+	public BoolArray signArray;
 	
 	public ArrayList<IFilter> getFilterList() {
 		return filterList;

File: src/main/java/com/scudata/dw/TableHashIndex.java
Patch:
@@ -1530,7 +1530,8 @@ private ArrayList <ICursor> sortCol(String []fields, Context ctx, Expression fil
 			
 			return cursorList;
 		} finally {
-			srcCursor.close();
+			if (srcCursor != null) 
+				srcCursor.close();
 		}
 	}
 

File: src/main/java/com/scudata/dw/ColumnMetaData.java
Patch:
@@ -321,7 +321,7 @@ public String getDataLen() {
 	 */
 	public void adjustDataType(int newType) {
 		int curType = dataType;
-		if (curType == newType) {
+		if (curType == newType || newType == DataBlockType.NULL) {
 			return;
 		}
 		

File: src/main/java/com/scudata/dm/op/Groups1Result.java
Patch:
@@ -589,7 +589,7 @@ private void addGroups_h(Sequence table, Context ctx) {
 					}
 				} else {
 					for (int f = 1; f <= valCount; ++f) {
-						Object val = gathers[f - 11].gather(r.getNormalFieldValue(f), ctx);
+						Object val = gathers[f - 1].gather(r.getNormalFieldValue(f), ctx);
 						r.setNormalFieldValue(f, val);
 					}
 				}

File: src/main/java/com/esproc/jdbc/Server.java
Patch:
@@ -138,6 +138,8 @@ public static Map<String, ParamList> getSplParams(
 			String splPath = key;
 			try {
 				PgmCellSet cs = AppUtil.readCellSet(splPath);
+				if (cs == null)
+					continue;
 				ParamList pl = cs.getParamList();
 				if (pl == null) {
 					continue;

File: src/main/java/com/scudata/dw/ColumnTableMetaData.java
Patch:
@@ -2426,7 +2426,7 @@ public Sequence update(Sequence data, String opt) throws IOException {
 		}
 		
 		if (data != null) {
-			data = new Table((Table)data);
+			data = new Sequence(data);
 		}
 		
 		GroupTable groupTable = getGroupTable();
@@ -3449,7 +3449,7 @@ public Sequence delete(Sequence data, String opt) throws IOException {
 		}
 		
 		if (data != null) {
-			data = new Table(data);
+			data = new Sequence(data);
 		}
 		
 		GroupTable groupTable = getGroupTable();

File: src/main/java/com/scudata/excel/ExcelUtils.java
Patch:
@@ -345,7 +345,7 @@ public static boolean isADateFormat(int formatIndex, String formatString) {
 		// Otherwise, check it's only made up, in any case, of:
 		// y m d h s - / , . :
 		// optionally followed by AM/PM
-		if (fs.matches("^[yYmMdDhHsS\\-/,. :]+[ampAMP/]*$")) {
+		if (fs.matches("^[yYmMdDhHsS0\\-/,. :]+[ampAMP/]*$")) {
 			return true;
 		}
 

File: src/main/java/com/scudata/ide/spl/control/SplControl.java
Patch:
@@ -1094,7 +1094,7 @@ public void setCellSet(PgmCellSet cellSet) {
 	 * 
 	 * @return �������
 	 */
-	public CellSet getCellSet() {
+	public PgmCellSet getCellSet() {
 		return cellSet;
 	}
 

File: src/main/java/com/scudata/cellset/graph/draw/Draw2YColLine.java
Patch:
@@ -23,7 +23,9 @@ public static void drawing(DrawBase db,StringBuffer htmlLink) {
 //		ê�����غ�ʱ��˭��ǰ�棬��������ҵ�˭�����ڵ�С�������ê���������ǰ�档 xq 2017��11��13��
 		StringBuffer colLink = new StringBuffer();
 		int serNum = DrawCol.drawing(db,colLink);
-		
+		if(serNum<0) {//���Ƴ���ʱ
+			return;
+		}
 
 //		˫������ͼʱ������ԭ���غ�
 		db.gp.isOverlapOrigin = false;

File: src/main/java/com/scudata/expression/mfn/cursor/Joinx.java
Patch:
@@ -160,7 +160,6 @@ public Object calculate(Context ctx) {
 		if (option != null && option.indexOf('q') != -1) {
 			return new CSJoinxCursor2(cursor, exps, codes, dataExps, newExps, newNames, fname, ctx, capacity, option);
 		} else if (option != null && option.indexOf('m') != -1) {
-			option += '1';
 			return CSJoinxCursor3.MergeJoinx(cursor, exps, codes, dataExps, newExps, newNames, fname, ctx, capacity, option);
 		} else {
 			return getJoinxCursor(cursor, codes, exps, dataExps, newExps, newNames, fname, ctx, option, capacity);

File: src/main/java/com/scudata/dm/cursor/CSJoinxCursor3.java
Patch:
@@ -292,6 +292,8 @@ public static ICursor MergeJoinx(ICursor cursor, Expression[][] fields, Object[]
 	private static MultipathCursors toMultipathCursors(Object obj, MultipathCursors mcs,  String fields[], Context ctx) {
 		if (obj instanceof ColumnTableMetaData) {
 			return (MultipathCursors) ((ColumnTableMetaData) obj).cursor(null, fields, null, null, null, null, mcs, "k", ctx);
+		} else if (obj instanceof MultipathCursors) {
+			return (MultipathCursors) obj;
 		} else {
 			return null;
 		}

File: src/main/java/com/scudata/dm/cursor/MultipathCursors.java
Patch:
@@ -501,7 +501,9 @@ public Object total(Expression[] calcExps, Context ctx) {
 				for (int i = 0; i < cursorCount; ++i) {
 					jobs[i].join();
 					Sequence seq = (Sequence)jobs[i].getResult();
-					result.newLast(seq.toArray());
+					if (seq != null) {
+						result.newLast(seq.toArray());
+					}
 				}
 			}
 		} finally {

File: src/main/java/com/scudata/expression/mfn/cursor/Joinx.java
Patch:
@@ -160,6 +160,7 @@ public Object calculate(Context ctx) {
 		if (option != null && option.indexOf('q') != -1) {
 			return new CSJoinxCursor2(cursor, exps, codes, dataExps, newExps, newNames, fname, ctx, capacity, option);
 		} else if (option != null && option.indexOf('m') != -1) {
+			option += '1';
 			return CSJoinxCursor3.MergeJoinx(cursor, exps, codes, dataExps, newExps, newNames, fname, ctx, capacity, option);
 		} else {
 			return getJoinxCursor(cursor, codes, exps, dataExps, newExps, newNames, fname, ctx, option, capacity);

File: src/main/java/com/scudata/dm/cursor/CSJoinxCursor3.java
Patch:
@@ -166,7 +166,9 @@ protected Sequence get(int n) {
 			
 			Record record = result.newLast(r1.getFieldValues());
 			for (int f = 0; f < len2; f++) {
-				record.setNormalFieldValue(f + len1, r2.calc(exps[f], ctx));
+				if (r2 != null) {
+					record.setNormalFieldValue(f + len1, r2.calc(exps[f], ctx));
+				}
 			}
 		}
 		

File: src/main/java/com/scudata/ide/common/GM.java
Patch:
@@ -3845,6 +3845,8 @@ public static String removeSqlNote(String sql) {
 	 * @return
 	 */
 	public static int[] getCurrentWordPosition(String str, int p) {
+		if (!StringUtils.isValidString(str))
+			return null;
 		if (p > 0) {
 			if (isSymbol(str.charAt(p))) { // ���λ���Ƿ���
 				if (isSymbol(str.charAt(p - 1))) { // ���ǰһλҲ�Ƿ���
@@ -3880,7 +3882,7 @@ public static int[] getCurrentWordPosition(String str, int p) {
 			return null;
 		return new int[] { start, end };
 	}
-	
+
 	private static boolean isSymbol(char c) {
 		return KeyWord.isSymbol(c) || c == KeyWord.OPTION;
 	}

File: src/main/java/com/scudata/expression/mfn/sequence/PFind.java
Patch:
@@ -1,6 +1,7 @@
 package com.scudata.expression.mfn.sequence;
 
 import com.scudata.common.MessageManager;
+import com.scudata.common.ObjectCache;
 import com.scudata.common.RQException;
 import com.scudata.dm.Context;
 import com.scudata.dm.Sequence;
@@ -50,9 +51,9 @@ public Object calculate(Context ctx) {
 
 		int index = srcSequence.pfindByKey(key, isSorted);
 		if (index < 0 && !isInsertPos) {
-			return new Integer(0);
+			return ObjectCache.getInteger(0);
 		} else {
-			return new Integer(index);
+			return ObjectCache.getInteger(index);
 		}
 	}
 }

File: src/main/java/com/scudata/dw/ColumnTableMetaData.java
Patch:
@@ -3477,7 +3477,7 @@ public Sequence delete(Sequence data, String opt) throws IOException {
 		}
 		
 		if (data != null) {
-			data = new Table((Table)data);
+			data = new Table(data);
 		}
 		
 		GroupTable groupTable = getGroupTable();

File: src/main/java/com/scudata/expression/fn/gather/Maxp.java
Patch:
@@ -76,10 +76,10 @@ public Expression getRegatherExpression(int q) {
 		//top@1(-1,~.x,f)
 		String f = "#" + q;
 		if (isOne) {
-			String str = "top@1(-1," + "~." + exp.toString() + "," + f + ")";
+			String str = "top@1(-1," + "~.(" + exp.toString() + ")," + f + ")";
 			return new Expression(str);
 		} else {
-			String str = "top@2(-1," + "~." + exp.toString() + "," + f + ")";
+			String str = "top@2(-1," + "~.(" + exp.toString() + ")," + f + ")";
 			return new Expression(str);
 		}
 	}

File: src/main/java/com/scudata/expression/fn/gather/Minp.java
Patch:
@@ -76,10 +76,10 @@ public Expression getRegatherExpression(int q) {
 		//top@1(1,~.x,f)
 		String f = "#" + q;
 		if (isOne) {
-			String str = "top@1(1," + "~." + exp.toString() + "," + f + ")";
+			String str = "top@1(1," + "~.(" + exp.toString() + ")," + f + ")";
 			return new Expression(str);
 		} else {
-			String str = "top@2(1," + "~." + exp.toString() + "," + f + ")";
+			String str = "top@2(1," + "~.(" + exp.toString() + ")," + f + ")";
 			return new Expression(str);
 		}
 	}

File: src/main/java/com/scudata/ide/spl/base/FileTree.java
Patch:
@@ -505,7 +505,7 @@ protected void menuAction(FileTreeNode node, JMenuItem mi) {
 	 * ˢ�����ڵ�
 	 * @param node
 	 */
-	protected void refreshNode(FileTreeNode node) {
+	public void refreshNode(FileTreeNode node) {
 		if (node == null)
 			return;
 		node.setLoaded(false);

File: src/main/java/com/scudata/dw/pseudo/PseudoBFile.java
Patch:
@@ -268,7 +268,7 @@ public byte[] getFieldTypes() {
 		byte[] types = new byte[len];
 		
 		for (int i = 0; i < len; i++) {
-			types[i] = Types.getProperDataType(objs[i]);
+			types[i] = PseudoTable.getProperDataType(objs[i]);
 		}
 		return types;
 	}

File: src/main/java/com/scudata/dw/pseudo/PseudoTable.java
Patch:
@@ -1229,7 +1229,7 @@ public String[] getFieldNames() {
 		return getPd().getAllColNames();
 	}
 	
-	private static byte getProperDataType(Object value) {
+	protected static byte getProperDataType(Object value) {
 		if (value instanceof String) {
 			return Types.DT_STRING;
 		}

File: src/main/java/com/scudata/expression/fn/SplServer.java
Patch:
@@ -156,7 +156,7 @@ public static String getStartCmd(SplServerConfig ssc,String host, int port,Strin
 		if( isWindows() ) {
 			cmd.append("cmd /c start \"UnitServer\" ");
 		}
-		cmd.append(EXEC_JAVA+" ");
+		cmd.append("\""+EXEC_JAVA+"\" ");
 		if(StringUtils.isValidString(ssc.JVMArgs)) {
 			cmd.append(ssc.JVMArgs+" ");	
 		}

File: src/main/java/com/scudata/dm/Machines.java
Patch:
@@ -31,10 +31,10 @@ private String parseHost(String str) {
 		if (index == -1) {//û��ð��
 			MessageManager mm = EngineMessage.get();
 			throw new RQException("HS" + mm.getMessage("function.invalidParam")+": "+str);
-		}else if( index==0 ) {//ð�ſ�ͷΪ����
+		}else if( index==0 ) {//ð�ſ�ͷΪ���طֻ�
 			if(str.length()>1) {
 				host = defaultHost;
-			}//����Ϊ��ð�ű�ʾ��������null��host
+			}//����Ϊ��ð�ű�ʾ�����̣���null��host
 		}else {
 			host = str.substring(0, index);
 		}

File: src/main/java/com/scudata/ide/spl/ServerConsole.java
Patch:
@@ -340,6 +340,7 @@ else if(index<0 && i+1<args.length){
 				server.run();
 			} catch (Exception x) {
 				x.printStackTrace();
+				System.exit(-1);
 			}
 			System.exit(0);
 		}

File: src/main/java/com/scudata/dw/pseudo/PseudoTable.java
Patch:
@@ -975,6 +975,8 @@ public Operable addOperation(Operation op, Context ctx) {
 			Expression exp;
 			if (op instanceof Select) {
 				exp = ((Select) op).getFilterExpression();
+			} else if (op instanceof New) {
+				return super.addOperation(op, ctx);
 			} else {
 				exp = op.getFunction().getParam().getLeafExpression();
 			}

File: src/main/java/com/scudata/dw/ColumnTableMetaData.java
Patch:
@@ -4312,6 +4312,9 @@ public void getSegmentInfo2(String []keys, ArrayList<Integer> list, Sequence val
 	 * @throws IOException
 	 */
 	public Object[] getMaxMinValue(String key) throws IOException {
+		if (this.totalRecordCount == 0) {
+			return null;
+		}
 		ColumnMetaData column = getColumn(key);
 		if (column == null) {
 			return null;

File: src/main/java/com/scudata/dw/RowTableMetaData.java
Patch:
@@ -3041,6 +3041,9 @@ public void deleteColumn(String colName) {
 	 * @throws IOException
 	 */
 	public Object[] getMaxMinValue(String key) throws IOException {
+		if (this.totalRecordCount == 0) {
+			return null;
+		}
 		boolean isDim[] = this.isDim;
 		String colNames[] = this.colNames;
 		int len = colNames.length;

File: src/main/java/com/scudata/thread/GroupsJob.java
Patch:
@@ -67,7 +67,7 @@ public void setGroupCount(int groupCount) {
 
 	public void run() {
 		IGroupsResult groups = null;
-		if (cursor.isColumnCursor()) {
+		if (cursor != null && cursor.isColumnCursor()) {
 			groups = IColumnCursorUtil.util.getGroupsResultInstance(exps, names, calcExps, calcNames, opt, ctx);
 		} else {
 			groups = IGroupsResult.instance(exps, names, calcExps, calcNames, opt, ctx);

File: src/main/java/com/scudata/dw/pseudo/PseudoDefination.java
Patch:
@@ -107,6 +107,8 @@ public PseudoDefination(PseudoDefination pd) {
 		this.fileObject = pd.fileObject;
 		this.isBFile = pd.isBFile;
 		this.sortedFields = pd.sortedFields;
+		this.ds = pd.ds;
+		this.updateExp = pd.updateExp;
 		
 		if (pd.columns != null) {
 			this.columns = new ArrayList<PseudoColumn>();

File: src/main/java/com/scudata/expression/mfn/dw/Import.java
Patch:
@@ -2,10 +2,7 @@
 
 import com.scudata.dm.Context;
 import com.scudata.dm.cursor.ICursor;
-import com.scudata.expression.Expression;
-import com.scudata.expression.IParam;
 import com.scudata.expression.TableMetaDataFunction;
-import com.scudata.expression.mfn.sequence.Top;
 
 /**
  * �����������

File: src/main/java/com/scudata/dw/pseudo/PseudoDefination.java
Patch:
@@ -316,7 +316,7 @@ public String[] getAllSortedColNames() {
 		if (isBFile) {
 			return ds.getPrimary();
 		} else if (var == null) {
-			return tables.get(0).getAllSortedColNames();
+			return tables.get(0).getAllKeyColNames();
 		} else {
 			return memoryTable.dataStruct().getPrimary();
 		}

File: src/main/java/com/scudata/expression/mfn/pseudo/Memory.java
Patch:
@@ -64,7 +64,9 @@ private static Object memory(String option, IPseudo pseudo, IParam param, Contex
 	
 	public static Object createMemory(IPseudo pseudo, Expression []exps, String []names, Expression filter, 
 			String option, Context ctx) {
-		pseudo = (IPseudo) pseudo.addOperation(new Select(filter, null), ctx);
+		if (filter != null) {
+			pseudo = (IPseudo) pseudo.addOperation(new Select(filter, null), ctx);
+		}
 		if (pseudo instanceof ClusterPseudo) {
 			return ((ClusterPseudo)pseudo).memory(option, ctx);
 		}

File: src/main/java/com/scudata/ide/spl/base/JTableValue.java
Patch:
@@ -1478,12 +1478,13 @@ private synchronized void setTableColumns(DataStruct ds, int len,
 			// ���ݱ��ⳤ�������п�
 			int[] pkIndex = ds.getPKIndex();
 			final int IMAGE_WIDTH = 35;
-			for (int i = hasIndexCol ? 1 : 0; i < cc; i++) {
+			final int startCol = hasIndexCol ? 1 : 0;
+			for (int i = startCol; i < cc; i++) {
 				tc = getColumn(i);
 				int titleWidth = getFontMetrics(getFont()).stringWidth(
 						getColumnName(i));
 				int colWidth = tc.getWidth();
-				if (isPK(pkIndex, i - 1)) {
+				if (isPK(pkIndex, i - startCol)) {
 					tc.setHeaderRenderer(new PKRenderer());
 					titleWidth += IMAGE_WIDTH;
 				}

File: src/main/java/com/scudata/dw/pseudo/Pseudo.java
Patch:
@@ -352,7 +352,7 @@ public Sequence getCache() {
 	// �ж��Ƿ�������ָ�����Ƶ����
 	public boolean hasForeignKey(String fkName) {
 		PseudoColumn column = pd.findColumnByName(fkName);
-		if (column.getDim() != null)
+		if (column != null && column.getDim() != null)
 			return true;
 		else
 			return false;

File: src/main/java/com/scudata/dm/BFileReader.java
Patch:
@@ -471,7 +471,7 @@ public Sequence read(int n) throws IOException {
 	 * @throws IOException
 	 */
 	public long skip(long n) throws IOException {
-		if (totalRecordCount > 0 && segCount <= 1 && firstRecordPos == position()) {
+		if (totalRecordCount > 0 && segCount <= 1 && firstRecordPos == position() && endPos == -1) {
 			if (totalRecordCount <= n) {
 				seek(file.size());
 				return totalRecordCount;
@@ -1499,7 +1499,7 @@ private ICursor iselectFields(String[] refFields, Object startVal, Object endVal
 				for (int i = startBlock + 1; i < lastBlock; ++i) {
 					seek(blocks[i]);
 					readRecord(selFields, vals);
-					if (compareFields(vals, startVal) > 0) {
+					if (compareFields(vals, endVal) > 0) {
 						endBlock = i;
 						break;
 					}
@@ -1629,7 +1629,7 @@ private ICursor iselectExpression(Expression exp, Object startVal, Object endVal
 					seek(blocks[i]);
 					readRecord(vals);
 					rec.values = vals;
-					if (Variant.compare(rec.calc(exp, ctx), startVal) > 0) {
+					if (Variant.compare(rec.calc(exp, ctx), endVal) > 0) {
 						endBlock = i;
 						break;
 					}

File: src/main/java/com/scudata/dw/ColumnTableMetaData.java
Patch:
@@ -3842,7 +3842,7 @@ public Object[] getMaxMinValue(String key) throws IOException {
 			Expression min = new Expression("min(" + key +")");
 			Expression[] exps = new Expression[] {max, min};
 			Sequence seq = cursor(new String[] {key}).groups(null, null, exps, null, null, new Context());
-			return ((Record)seq.get(0)).getFieldValues();
+			return ((Record)seq.get(1)).getFieldValues();
 		}
 		
 		ObjectReader segmentReader = column.getSegmentReader();

File: src/main/java/com/scudata/dw/RowTableMetaData.java
Patch:
@@ -3063,8 +3063,8 @@ public Object[] getMaxMinValue(String key) throws IOException {
 			Expression max = new Expression("max(" + key +")");
 			Expression min = new Expression("min(" + key +")");
 			Expression[] exps = new Expression[] {max, min};
-			Sequence seq = cursor(new String[] {key}).groups(null, null, exps, null, null, null);
-			return ((Record)seq.get(0)).getFieldValues();
+			Sequence seq = cursor(new String[] {key}).groups(null, null, exps, null, null, new Context());
+			return ((Record)seq.get(1)).getFieldValues();
 		}
 		
 		ObjectReader segmentReader = getSegmentObjectReader();

File: src/main/java/com/scudata/dw/ColumnTableMetaData.java
Patch:
@@ -3841,7 +3841,7 @@ public Object[] getMaxMinValue(String key) throws IOException {
 			Expression max = new Expression("max(" + key +")");
 			Expression min = new Expression("min(" + key +")");
 			Expression[] exps = new Expression[] {max, min};
-			Sequence seq = cursor(new String[] {key}).groups(null, null, exps, null, null, null);
+			Sequence seq = cursor(new String[] {key}).groups(null, null, exps, null, null, new Context());
 			return ((Record)seq.get(0)).getFieldValues();
 		}
 		

File: src/main/java/com/scudata/ide/common/swing/JTableEx.java
Patch:
@@ -1218,12 +1218,13 @@ public boolean verifyColumnData(int colIndex, String colDesc,
 			boolean caseNull, boolean caseRepeat, Component parent) {
 		acceptText();
 
-		HashSet<String> keys = new HashSet<String>();
+		HashSet<Object> keys = new HashSet<Object>();
 		int r = getRowCount();
 		int nullCount = 0;
 		String key;
 		for (int i = 0; i < r; i++) {
-			key = (String) data.getValueAt(i, colIndex);
+			Object tmp = data.getValueAt(i, colIndex);
+			key = tmp != null ? tmp.toString() : null;
 			if (caseNull && !StringUtils.isValidString(key)) {
 				JOptionPane
 						.showMessageDialog(

File: src/main/java/com/scudata/dw/pseudo/PseudoDefination.java
Patch:
@@ -239,7 +239,7 @@ private void parseFileToTable(Context ctx) {
 			parseFileToTable((String) file, partitions, ctx);
 		} else {
 			MessageManager mm = EngineMessage.get();
-			throw new RQException(mm.getMessage("file.fileNotExist"));
+			throw new RQException(mm.getMessage("function.invalidParam"));
 //			Sequence seq = (Sequence) file;
 //			int size = seq.length();
 //			for (int i = 1; i <= size; i++) {

File: src/main/java/com/scudata/ide/spl/base/JTableValue.java
Patch:
@@ -582,7 +582,7 @@ public void cursorFetch(int dispRows) {
 			return;
 		}
 		ICursor cursor = (ICursor) originalValue;
-		Sequence data = cursor.fetch(dispRows);
+		Sequence data = cursor.peek(dispRows); // ��ʵ�ʴ��α�ȡ��
 		forceSetValue(data);
 	}
 

File: src/main/java/com/scudata/common/DateFormatFactory.java
Patch:
@@ -87,11 +87,12 @@ public DateFormat getFormat(String fmt, String locale) {
 			return getFormat(fmt);
 		}
 		
-		DateFormat df = map.get(locale + fmt);
+		String key = locale + fmt;
+		DateFormat df = map.get(key);
 		if(df == null) {
 			df = new SimpleDateFormat(fmt, new Locale(locale));
 			df.getCalendar().setLenient(false);
-			map.put(fmt, df);
+			map.put(key, df);
 		}
 		
 		return df;

File: src/main/java/com/scudata/dw/pseudo/PseudoDefination.java
Patch:
@@ -1,7 +1,6 @@
 package com.scudata.dw.pseudo;
 
 import java.io.File;
-import java.io.IOException;
 import java.util.ArrayList;
 import java.util.List;
 

File: src/main/java/com/scudata/ide/spl/dialog/DialogUnitConfig.java
Patch:
@@ -276,6 +276,7 @@ private boolean save() throws Throwable {
 		uc.setInterval(((Integer) jSInterval.getValue()).intValue());
 		uc.setAutoStart(cbAutoStart.isSelected());
 
+		tableHosts.acceptText();
 		List<Host> hosts = new ArrayList<Host>();
 		for (int i = 0, count = tableHosts.getRowCount(); i < count; i++) {
 			String ip = (String) tableHosts.data.getValueAt(i, COL_HOST);
@@ -293,6 +294,7 @@ private boolean save() throws Throwable {
 		uc.setCheckClients(cbCheck.isSelected());
 		List<String> starts = new ArrayList<String>();
 		List<String> ends = new ArrayList<String>();
+		tableClients.acceptText();
 		for (int i = 0, count = tableClients.getRowCount(); i < count; i++) {
 			String start = (String) tableClients.data.getValueAt(i, COL_START);
 			starts.add(start);

File: src/main/java/com/scudata/expression/mfn/pseudo/Groups.java
Patch:
@@ -262,7 +262,7 @@ public Object calculate(Context ctx) {
 				}
 			}
 			ICount icount = (ICount) tempExps[0].getHome();
-			list.add(icount.getExp().toString());
+			list.add(icount.getParamString());
 			String[] icountFields = new String[list.size()];
 			list.toArray(icountFields);
 			

File: src/main/java/com/scudata/dm/op/MultipathChannel.java
Patch:
@@ -126,18 +126,18 @@ public void finish(Context ctx) {
 	 * @return
 	 */
 	public Object result() {
-		if (result instanceof GroupsResult) {
+		if (result instanceof IGroupsResult) {
 			Table value = null;
 			for (Channel channel : channels) {
-				GroupsResult groups = (GroupsResult)channel.getResult();
+				IGroupsResult groups = (IGroupsResult)channel.getResult();
 				if (value == null) {
 					value = groups.getTempResult();
 				} else {
 					value.addAll(groups.getTempResult());
 				}
 			}
 			
-			GroupsResult gr = (GroupsResult)result;
+			IGroupsResult gr = (IGroupsResult)result;
 			result = null;
 			if (value == null || gr.isSortedGroup()) {
 				return value;

File: src/main/java/com/scudata/dw/pseudo/PseudoDefination.java
Patch:
@@ -289,6 +289,9 @@ public boolean isSortedFields(String[] fields) {
 	 * @return
 	 */
 	private boolean checkBFile(Context ctx) {
+		if (!(file instanceof String)) {
+			return false;
+		}
 		FileObject fo = new FileObject((String)file, null, null, ctx);;
 		BFileReader reader = new BFileReader(fo);
 		try {

File: src/main/java/com/scudata/expression/fn/algebra/LUDecomposition.java
Patch:
@@ -149,7 +149,8 @@ protected double det() {
 	 */
 	private boolean isNonsingular() {
 		for (int c = 0; c < this.cols; c++) {
-			if (this.LU[c][c] == 0)
+			//if (this.LU[c][c] == 0)
+			if (Matrix.ifZero(this.LU[c][c]))
 				return false;
 		}
 		return true;

File: src/main/java/com/scudata/expression/fn/algebra/QRDecomposition.java
Patch:
@@ -59,7 +59,8 @@ protected QRDecomposition(Matrix A) {
 	 */
 	protected boolean isFullRank() {
 		for (int c = 0; c < this.cols; c++) {
-			if (Rdiag[c] == 0)
+			//if (Rdiag[c] == 0)
+			if (Matrix.ifZero(this.Rdiag[c]))
 				return false;
 		}
 		return true;

File: src/main/java/com/scudata/dw/BufferReader.java
Patch:
@@ -104,6 +104,7 @@ public int available() throws IOException {
 
 	public void reset() {
 		index = 0;
+		repeatCount = 0;
 	}
 	
 	public void close() throws IOException {

File: src/main/java/com/scudata/dm/ParallelProcess.java
Patch:
@@ -359,7 +359,7 @@ public static int threadCount(boolean showName) {
 		if(showName){
 		 Iterator<Thread> it = map.keySet().iterator();
 		 while(it.hasNext())
-		 System.out.println( it.next() );
+			 System.out.println( it.next() );
 		}
 
 		return map.size();

File: src/main/java/com/scudata/dm/CanceledException.java
Patch:
@@ -12,7 +12,7 @@ public class CanceledException extends RuntimeException {
 	private static final long serialVersionUID = 4988636705167197473L;
 	static MessageManager mm = ParallelMessage.get();
 
-	public static String TYPE_DATASTORE = mm.getMessage("CanceledException.DataStore");
+	public static String TYPE_MONITOR = mm.getMessage("CanceledException.monitor");
 	public static String TYPE_IDE = "Canceled by IDE.";
 	public static String TYPE_OTHER = "Canceled by other task.";
 	

File: src/main/java/com/scudata/parallel/Task.java
Patch:
@@ -267,7 +267,7 @@ private Exception getCancelException() {
 			MessageManager mm = ParallelMessage.get();
 
 			String status = mm.getMessage("Task.cancel", this, cancelCause);
-			if (cancelCause.equalsIgnoreCase(CanceledException.TYPE_DATASTORE)) {
+			if (cancelCause.equalsIgnoreCase(CanceledException.TYPE_MONITOR)) {
 				return new Exception(status);
 			}
 		}

File: src/main/java/com/scudata/dw/pseudo/Pseudo.java
Patch:
@@ -66,7 +66,8 @@ public void addOpt(Operation op, Context ctx) {
 			ArrayList<String> tempList = new ArrayList<String>();
 			new Expression(op.getFunction()).getUsedFields(ctx, tempList);
 			
-			if (op instanceof Select && op.getFunction() != null) {
+			boolean isBFile = pd.isBFile();
+			if (!isBFile && op instanceof Select && op.getFunction() != null) {
 				Expression exp = ((Select)op).getFilterExpression();
 				boolean flag = true;//true��ʾ���Ǳ������ֶΡ� ����news��new��derive
 				for (String name : tempList) {
@@ -92,7 +93,7 @@ public void addOpt(Operation op, Context ctx) {
 					opList.add(op);
 				}
 				
-			} else if (op instanceof Switch && ((Switch) op).isIsect()) {
+			} else if (!isBFile && op instanceof Switch && ((Switch) op).isIsect()) {
 				//��switch@iת��ΪF:K
 				//ת�����������ֶΡ������ֶδ�������������code����������codeû��������
 				String names[] = ((Switch) op).getFkNames();

File: src/main/java/com/scudata/expression/fn/CreatePseudo.java
Patch:
@@ -104,7 +104,7 @@ public Object calculate(Context ctx) {
 			return ClusterPseudo.createClusterPseudo((Record) pd.get(1), hs, n, ctx);
 		} else {
 			if (var == null) {
-				return new PseudoTable((Record) pd.get(1), n, ctx);
+				return PseudoTable.create((Record) pd.get(1), n, ctx);
 			} else {
 				return new PseudoMemory((Record) pd.get(1), n, ctx);
 			}

File: src/main/java/com/scudata/expression/Expression.java
Patch:
@@ -103,8 +103,7 @@ public Expression(ICellSet cs, Context ctx, String str, boolean opt, boolean doM
 			}
 		} catch (RQException re) {
 			MessageManager mm = EngineMessage.get();
-			re.setMessage(mm.getMessage("Expression.exp") + expStr +
-						   mm.getMessage("Expression.middle") + re.getMessage());
+			re.setMessage(mm.getMessage("Expression.inExp", expStr) + re.getMessage());
 			throw re;
 		}
 	}

File: src/main/java/com/scudata/expression/Expression.java
Patch:
@@ -169,7 +169,7 @@ public void assign(Object value, Context ctx) {
 			home.assign(value, ctx);
 		} else {
 			MessageManager mm = EngineMessage.get();
-			throw new RQException("\"=\"" + mm.getMessage("assign.needVar"));
+			throw new RQException(mm.getMessage("assign.needVar"));
 		}
 	}
 

File: src/main/java/com/scudata/expression/Move.java
Patch:
@@ -78,7 +78,7 @@ public Object assign(Object value, Context ctx) {
 			return getLeft().moveAssign(this, value, ctx);
 		} else {
 			MessageManager mm = EngineMessage.get();
-			throw new RQException("\"=\"" + mm.getMessage("assign.needVar"));
+			throw new RQException(mm.getMessage("assign.needVar"));
 		}
 	}
 

File: src/main/java/com/scudata/expression/Node.java
Patch:
@@ -235,7 +235,7 @@ public Node optimize(Context ctx) {
 	 */
 	public Object assign(Object value, Context ctx) {
 		MessageManager mm = EngineMessage.get();
-		throw new RQException("\"=\"" + mm.getMessage("assign.needVar"));
+		throw new RQException(mm.getMessage("assign.needVar"));
 	}
 	
 	/**
@@ -246,7 +246,7 @@ public Object assign(Object value, Context ctx) {
 	 */
 	public Object addAssign(Object value, Context ctx) {
 		MessageManager mm = EngineMessage.get();
-		throw new RQException("\"=\"" + mm.getMessage("assign.needVar"));
+		throw new RQException(mm.getMessage("assign.needVar"));
 	}
 
 	/**

File: src/main/java/com/scudata/server/unit/UnitServer.java
Patch:
@@ -447,7 +447,7 @@ public void run(){
 		threadGroup.enumerate(threads);
 		for (int i = 0; i < threads.length; i++) {
 			Thread t = threads[i];
-			if (t.isAlive()) {
+			if (t.isAlive() && (t instanceof UnitWorker)) {
 				((UnitWorker)t).shutdown();
 			}
 		}

File: src/main/java/com/scudata/dw/TableMetaData.java
Patch:
@@ -117,6 +117,7 @@ public TableMetaData createAnnexTable(String []colNames, int []serialBytesLen,
 			MessageManager mm = EngineMessage.get();
 			throw new RQException(tableName + mm.getMessage("dw.tableAlreadyExist"));
 		}
+		appendCache();
 		
 		groupTable.checkWritable();
 		TableMetaData table = null;
@@ -132,6 +133,7 @@ public TableMetaData createAnnexTable(String []colNames, int []serialBytesLen,
 			tmd.createAnnexTable(colNames, serialBytesLen, tableName);
 		}
 		
+		groupTable.save();
 		return table;
 	}
 	

File: src/main/java/com/scudata/ide/spl/MenuSpl.java
Patch:
@@ -83,6 +83,7 @@ protected JMenu getFileMenu() {
 
 		menuTemp = newCommonMenuItem(GC.iOPEN, GC.OPEN, 'O',
 				ActionEvent.CTRL_MASK, true);
+		menu.add(menuTemp);
 		menuTemp = newSplMenuItem(GCSpl.iFILE_REOPEN, GCSpl.FILE_REOPEN, 'R',
 				GC.NO_MASK, true);
 		menu.add(menuTemp);

File: src/main/java/com/scudata/dw/TableHashIndex.java
Patch:
@@ -1210,7 +1210,7 @@ public void create(String []fields, String opt, Context ctx, Expression filter)
 			index1RecordCount = 0;
 			
 			ArrayList <ICursor> cursorList;
-			setCapacity((int) (srcTable.getTotalRecordCount() / h));
+			setCapacity(h);
 			if (srcTable instanceof RowTableMetaData) {
 				cursorList = sortRow(fields, ctx, filter);
 			} else {
@@ -2063,7 +2063,7 @@ public Object getIndexStruct() {
 		
 		Record rec = new Record(new DataStruct(INDEX_FIELD_NAMES));
 		rec.setNormalFieldValue(0, name);
-		rec.setNormalFieldValue(1, capacity);
+		rec.setNormalFieldValue(1, h);
 		rec.setNormalFieldValue(2, new Sequence(ifields));
 		rec.setNormalFieldValue(3, null);
 		rec.setNormalFieldValue(4, filter == null ? null : filter.toString());

File: src/main/java/com/scudata/dw/TableMetaDataIndex.java
Patch:
@@ -1108,6 +1108,7 @@ public void create(String []fields, String opt, Context ctx, Expression filter)
 			
 			int size = cursorList.size();
 			if (size == 0) {
+				createIndexTable(new MemoryCursor(null), tmpFile, false);
 				return;
 			} else if (size == 1) {
 				createIndexTable(cursorList.get(0), tmpFile, false);

File: src/main/java/com/scudata/util/XMLUtil.java
Patch:
@@ -160,7 +160,7 @@ public static String toXml(Sequence sequence, String charset, String levels) {
 			toXml(handler, sequence, 0, idTable);
 			
 			if (count > 1) {
-				for (int i = 0; i < count - 1; ++i) {
+				for (int i = count - 2; i >= 0; --i) {
 					handler.endElement("", "", strs[i]);
 				}
 			} else {

File: src/main/java/com/scudata/dw/RowTableMetaData.java
Patch:
@@ -1797,6 +1797,7 @@ public Sequence update(Sequence data, String opt) throws IOException {
 				if (seqs[i] > 0) {
 					if (isUpdate) {
 						ModifyRecord r = new ModifyRecord(seqs[i], ModifyRecord.STATE_UPDATE, sr);
+						r.setParentRecordSeq(recNum[i]);
 						modifyRecords.add(r);
 						if (result != null) {
 							result.add(sr);
@@ -1846,6 +1847,7 @@ public Sequence update(Sequence data, String opt) throws IOException {
 								// ״̬����update
 								Record sr = (Record)data.getMem(t);
 								mr.setRecord(sr, ModifyRecord.STATE_UPDATE);
+								mr.setParentRecordSeq(recNum[t]);
 								if (result != null) {
 									result.add(sr);
 								}
@@ -1859,6 +1861,7 @@ public Sequence update(Sequence data, String opt) throws IOException {
 						if (isUpdate) {
 							Record sr = (Record)data.getMem(t);
 							mr = new ModifyRecord(seq2, ModifyRecord.STATE_UPDATE, sr);
+							mr.setParentRecordSeq(recNum[t]);
 							tmp.add(mr);
 							
 							if (result != null) {

File: src/main/java/com/scudata/expression/fn/E.java
Patch:
@@ -187,7 +187,7 @@ private Table sequence2Pmt(Sequence seq, boolean hasTitle) {
 					for (int c = 1; c <= cc; c++) {
 						val = rowSeq.get(c);
 						if (val != null) {
-							colName = (String) val;
+							colName = String.valueOf(val);
 						} else {
 							colName = null;
 						}

File: src/main/java/com/scudata/ide/spl/SPL.java
Patch:
@@ -1375,6 +1375,9 @@ protected void this_windowActivated(WindowEvent e) {
 			}
 		}
 		GM.resetClipBoard();
+		if (GV.appSheet != null) {
+			GV.appSheet.refresh();
+		}
 		checkUpdate();
 	}
 

File: src/main/java/com/scudata/dw/GroupTable.java
Patch:
@@ -621,6 +621,7 @@ public boolean reset(File file, String opt, Context ctx, String distribute) {
 					((JoinTableCursor) cs).setSegment(startBlock, t.getDataBlockCount());
 				}
 				newTable.append(cs);
+				newTable.appendCache();
 			}
 
 			if (file != null) {

File: src/main/java/com/scudata/dw/RowTableMetaData.java
Patch:
@@ -765,7 +765,8 @@ private void appendAttached(ICursor cursor) throws IOException {
 							pkeyIndex = 1;
 							pkeyDataLen = pkeyData.length();
 						}
-						
+						curPkey = (GroupTableRecord) pkeyData.get(pkeyIndex);
+						curPkeyVals = curPkey.getFieldValues();
 					} else if (cmp > 0) {
 						//��Ӧ�ó��֣����쳣
 						MessageManager mm = EngineMessage.get();

File: src/main/java/com/scudata/ide/common/DataSource.java
Patch:
@@ -261,7 +261,9 @@ public Vector<String> listSchemas() throws Throwable {
 				schemas.add(schema);
 			}
 		} catch (SQLException se) {
-			Logger.debug(se);
+			if (se != null)
+				Logger.debug("Exception occurred while getSchemas():"
+						+ se.getMessage());
 		} finally {
 			if (rs != null)
 				rs.close();

File: src/main/java/com/scudata/ide/common/swing/JTableEx.java
Patch:
@@ -1232,6 +1232,7 @@ public int shiftUp() {
 	 * @return int���ƶ�������к�,����-1��ʾû���ƶ�
 	 */
 	public int shiftRowUp(int row) {
+		acceptText();
 		int start, end;
 		if (row < 0) {
 			int[] rows = getSelectedRows();
@@ -1269,6 +1270,7 @@ public int shiftDown() {
 	 * @return
 	 */
 	public int shiftRowDown(int row) {
+		acceptText();
 		int start, end;
 		if (row < 0) {
 			int[] rows = getSelectedRows();

File: src/main/java/com/scudata/dw/TableFulltextIndex.java
Patch:
@@ -742,7 +742,7 @@ public Object getIndexStruct() {
 		rec.setNormalFieldValue(1, null);
 		rec.setNormalFieldValue(2, new Sequence(ifields));
 		rec.setNormalFieldValue(3, null);
-		rec.setNormalFieldValue(4, filter.toString());
+		rec.setNormalFieldValue(4, filter == null ? null : filter.toString());
 		return rec;
 	}
 }
\ No newline at end of file

File: src/main/java/com/scudata/dw/TableHashIndex.java
Patch:
@@ -2054,7 +2054,7 @@ public Object getIndexStruct() {
 		rec.setNormalFieldValue(1, capacity);
 		rec.setNormalFieldValue(2, new Sequence(ifields));
 		rec.setNormalFieldValue(3, null);
-		rec.setNormalFieldValue(4, filter.toString());
+		rec.setNormalFieldValue(4, filter == null ? null : filter.toString());
 		return rec;
 	}
 }

File: src/main/java/com/scudata/dw/TableKeyValueIndex.java
Patch:
@@ -5132,7 +5132,7 @@ public Object getIndexStruct() {
 		rec.setNormalFieldValue(1, 0);
 		rec.setNormalFieldValue(2, new Sequence(ifields));
 		rec.setNormalFieldValue(3, new Sequence(vfields));
-		rec.setNormalFieldValue(4, filter.toString());
+		rec.setNormalFieldValue(4, filter == null ? null : filter.toString());
 		return rec;
 	}
 }

File: src/main/java/com/scudata/dw/TableMetaDataIndex.java
Patch:
@@ -5690,7 +5690,7 @@ public Object getIndexStruct() {
 		rec.setNormalFieldValue(1, 0);
 		rec.setNormalFieldValue(2, new Sequence(ifields));
 		rec.setNormalFieldValue(3, null);
-		rec.setNormalFieldValue(4, filter.toString());
+		rec.setNormalFieldValue(4, filter == null ? null : filter.toString());
 		return rec;
 	}
 }

File: src/main/java/com/scudata/expression/mfn/file/Structure.java
Patch:
@@ -99,6 +99,7 @@ public static Record getTableStruct(TableMetaData table, String option) {
 			for (TableMetaData tbl : tables) {
 				seq.add(getTableStruct(tbl, option));
 			}
+			rec.setNormalFieldValue(8, seq);
 		}
 		
 		return rec;
@@ -161,11 +162,11 @@ private static Sequence getTableCuboidStruct(TableMetaData table) {
 				for (int i = 0; i < len; i++) {
 					Record r = new Record(new DataStruct(CUBOID_AGGR_FIELD_NAMES));
 					r.setNormalFieldValue(0, names[start + i]);
-					r.setNormalFieldValue(0, newExps[i]);
+					r.setNormalFieldValue(1, newExps[i]);
 					aggr.add(r);
 				}
 				rec.setNormalFieldValue(2, aggr);
-				
+				seq.add(rec);
 				srcCuboid.close();
 			} catch (Exception e) {
 				if (srcCuboid != null) srcCuboid.close();

File: src/main/java/com/scudata/dm/query/SimpleSelect.java
Patch:
@@ -5367,9 +5367,9 @@ else if(whereExp != null && whereExp.trim().equals("1==1"))
 					{
 						//System.out.println("6----"+bak[a]);
 						bak[a] = "'" + fds[a] + "'";
-						fxs[a] = new Expression(String.format("#%d", a+1));
 						for(int b = 0; b < fns.length; b++)
 						{
+							fxs[a] = new Expression(String.format("#%d", b+1));
 							if(fds[a].equalsIgnoreCase(fns[b]))
 							{
 								if(whereExp != null && this.tableNode.getType() == TableNode.TYPE_GTB)

File: src/main/java/com/scudata/expression/mfn/op/AttachConj.java
Patch:
@@ -19,10 +19,12 @@ public class AttachConj extends OperableFunction {
 	public Object calculate(Context ctx) {
 		if (param == null) {
 			Conj op = new Conj(this, null);
+			op.setCurrentCell(cs.getCurrent());
 			return operable.addOperation(op, ctx);
 		} else if (param.isLeaf()) {
 			Expression exp = param.getLeafExpression();
 			Conj op = new Conj(this, exp);
+			op.setCurrentCell(cs.getCurrent());
 			return operable.addOperation(op, ctx);
 		} else {
 			MessageManager mm = EngineMessage.get();

File: src/main/java/com/scudata/expression/mfn/op/AttachDerive.java
Patch:
@@ -74,6 +74,7 @@ public Object calculate(Context ctx) {
 		}
 				
 		Derive derive = new Derive(this, exps, names, option, level);
+		derive.setCurrentCell(cs.getCurrent());
 		return operable.addOperation(derive, ctx);
 	}
 	

File: src/main/java/com/scudata/expression/mfn/op/AttachGroupn.java
Patch:
@@ -46,6 +46,7 @@ public Object calculate(Context ctx) {
 		}
 
 		Groupn groupn = new Groupn(this, exp, out);
+		groupn.setCurrentCell(cs.getCurrent());
 		return operable.addOperation(groupn, ctx);
 	}
 }

File: src/main/java/com/scudata/expression/mfn/op/AttachJoin.java
Patch:
@@ -139,6 +139,7 @@ public Object calculate(Context ctx) {
 			op = new Join(this, fname, exps, seqs, dataExps, newExps, newNames, option);
 		}
 		
+		op.setCurrentCell(cs.getCurrent());
 		return operable.addOperation(op, ctx);
 	}
 }

File: src/main/java/com/scudata/expression/mfn/op/AttachNew.java
Patch:
@@ -36,6 +36,7 @@ public Object calculate(Context ctx) {
 		String []names = pi.getExpressionStrs2();
 
 		New op = new New(this, exps, names, option);
+		op.setCurrentCell(cs.getCurrent());
 		return operable.addOperation(op, ctx);
 	}
 	

File: src/main/java/com/scudata/expression/mfn/op/AttachNews.java
Patch:
@@ -56,6 +56,7 @@ public Object calculate(Context ctx) {
 		String []names = pi.getExpressionStrs2();
 		
 		News news = new News(this, gexp, exps, names, option);
+		news.setCurrentCell(cs.getCurrent());
 		return operable.addOperation(news, ctx);
 	}
 	

File: src/main/java/com/scudata/expression/mfn/op/AttachPush.java
Patch:
@@ -28,6 +28,7 @@ public Object calculate(Context ctx) {
 			}
 			
 			Push push = new Push(this, (Channel)obj);
+			push.setCurrentCell(cs.getCurrent());
 			return operable.addOperation(push, ctx);
 		} else {
 			for (int i = 0, size = param.getSubSize(); i < size; ++i) {
@@ -44,6 +45,7 @@ public Object calculate(Context ctx) {
 				}
 				
 				Push push = new Push(this, (Channel)obj);
+				push.setCurrentCell(cs.getCurrent());
 				operable.addOperation(push, ctx);
 			}
 			

File: src/main/java/com/scudata/expression/mfn/op/AttachRegex.java
Patch:
@@ -119,6 +119,7 @@ public Object calculate(Context ctx) {
 		}
 		
 		Regex regex = new Regex(this, pattern, names, exp);
+		regex.setCurrentCell(cs.getCurrent());
 		return operable.addOperation(regex, ctx);
 	}
 }

File: src/main/java/com/scudata/expression/mfn/op/AttachRename.java
Patch:
@@ -18,6 +18,7 @@ public Object calculate(Context ctx) {
 		String []newFields = pi.getExpressionStrs2();
 		
 		Rename rename = new Rename(this, srcFields, newFields);
+		rename.setCurrentCell(cs.getCurrent());
 		return operable.addOperation(rename, ctx);
 	}
 }

File: src/main/java/com/scudata/expression/mfn/op/AttachRun.java
Patch:
@@ -19,13 +19,15 @@ public Object calculate(Context ctx) {
 		} else if (param.isLeaf()) {
 			Expression exp = param.getLeafExpression();
 			Run run = new Run(this, exp);
+			run.setCurrentCell(cs.getCurrent());
 			return operable.addOperation(run, ctx);
 		} else {
 			ParamInfo2 pi = ParamInfo2.parse(param, "run", true, false);
 			Expression []exps = pi.getExpressions1();
 			Expression []assignExps = pi.getExpressions2();
 
 			Run run = new Run(this, assignExps, exps);
+			run.setCurrentCell(cs.getCurrent());
 			return operable.addOperation(run, ctx);
 		}
 	}

File: src/main/java/com/scudata/expression/mfn/op/AttachSelect.java
Patch:
@@ -26,6 +26,7 @@ public Object calculate(Context ctx) {
 		} else if (param.isLeaf()) {
 			Expression fltExp = param.getLeafExpression();
 			Select select = new Select(this, fltExp, option);
+			select.setCurrentCell(cs.getCurrent());
 			return operable.addOperation(select, ctx);
 		} else {
 			if (param.getSubSize() != 2) {
@@ -56,6 +57,7 @@ public Object calculate(Context ctx) {
 			
 			Expression fltExp = sub0.getLeafExpression();
 			Select select = new Select(this, fltExp, option, pipe);
+			select.setCurrentCell(cs.getCurrent());
 			return operable.addOperation(select, ctx);
 		}
 	}

File: src/main/java/com/scudata/expression/mfn/op/AttachSwitch.java
Patch:
@@ -65,6 +65,7 @@ public Object calculate(Context ctx) {
 			op = new Switch(this, fkNames, seqs, exps, option);
 		}
 		
+		op.setCurrentCell(cs.getCurrent());
 		return operable.addOperation(op, ctx);
 	}
 }

File: src/main/java/com/scudata/ide/spl/dialog/DialogCopyPresent.java
Patch:
@@ -46,6 +46,7 @@ public DialogCopyPresent() {
 		super("Copy code for presentation", 600, 500);
 		try {
 			init();
+			GM.centerWindow(this);
 		} catch (Exception e) {
 			GM.showException(e);
 		}
@@ -90,6 +91,7 @@ protected boolean okAction(ActionEvent e) {
 	 */
 	protected void closeDialog(int option) {
 		super.closeDialog(option);
+		GM.setWindowDimension(this);
 		ConfigOptions.bTextEditorLineWrap = jCBLineWrap.isSelected();
 	}
 

File: src/com/scudata/excel/SheetXlsR.java
Patch:
@@ -362,9 +362,7 @@ public void run() {
 								sheetInputStream.close();
 							} catch (IOException e) {
 							}
-						synchronized (parseFinished) {
-							parseFinished = Boolean.TRUE;
-						}
+						parseFinished = Boolean.TRUE;
 					}
 				}
 			};

File: src/com/scudata/excel/XlsxSImporter.java
Patch:
@@ -267,9 +267,7 @@ public void run() {
 								sheetInputStream.close();
 							} catch (IOException e) {
 							}
-						synchronized (parseFinished) {
-							parseFinished = Boolean.TRUE;
-						}
+						parseFinished = Boolean.TRUE;
 					}
 				}
 			};

File: src/com/esproc/jdbc/JDBCUtil.java
Patch:
@@ -254,6 +254,9 @@ public static Object execute(String sql, ArrayList<?> parameters, Context ctx, b
 		} else if (sql.startsWith("=")) {
 			isGrid = AppUtil.isGrid(sql);
 			sql = sql.substring(1);
+			if (Command.isCommand(sql)) { //��������ʽҲ�������������ʽ
+				isGrid = true;
+			}
 		} else if (sql.toLowerCase().startsWith(JDBCConsts.KEY_CALLS)) {
 			sql = sql.substring(JDBCConsts.KEY_CALLS.length());
 			sql = sql.trim();

File: src/com/scudata/ide/spl/UnitServerConsole.java
Patch:
@@ -834,7 +834,8 @@ public static void main(String[] args) {
 		if (isGraph) {
 			ServerConsole.setDefaultLNF();
 			try {
-				ConfigOptions.load2(false);
+//				������ѡ�����嵽�ڴ棬��Ӧ�ã���������ǰӦ�����壻
+				ConfigOptions.load2(false,false);
 			} catch (Throwable e) {
 				e.printStackTrace();
 			}

File: src/com/scudata/app/common/AppUtil.java
Patch:
@@ -750,7 +750,7 @@ public static boolean isSPLFile(String fileName) {
 		}
 		String[] fileExts = AppConsts.SPL_FILE_EXTS.split(",");
 		for (String ext : fileExts) {
-			if (fileName.toLowerCase().endsWith(ext))
+			if (fileName.toLowerCase().endsWith("." + ext))
 				return true;
 		}
 		return false;

File: src/com/scudata/dw/pseudo/PseudoDefination.java
Patch:
@@ -192,6 +192,9 @@ public String[] getAllSortedColNames() {
 	}
 	
 	public void addPseudoColumn(PseudoColumn column) {
+		if (columns == null) {
+			columns = new ArrayList<PseudoColumn>();
+		}
 		columns.add(column);
 	}
 	

File: src/com/scudata/dw/pseudo/Pseudo.java
Patch:
@@ -66,7 +66,7 @@ public void addOpt(Operation op, Context ctx) {
 			new Expression(op.getFunction()).getUsedFields(ctx, tempList);
 			
 			if (op instanceof Select && op.getFunction() != null) {
-				Expression exp = op.getFunction().getParam().getLeafExpression();
+				Expression exp = ((Select)op).getFilterExpression();
 				boolean flag = true;//true��ʾ���Ǳ������ֶΡ� ����news��new��derive
 				for (String name : tempList) {
 					if (!isColumn(name)) {

File: src/com/scudata/dw/pseudo/Pseudo.java
Patch:
@@ -65,7 +65,7 @@ public void addOpt(Operation op, Context ctx) {
 			ArrayList<String> tempList = new ArrayList<String>();
 			new Expression(op.getFunction()).getUsedFields(ctx, tempList);
 			
-			if (op instanceof Select) {
+			if (op instanceof Select && op.getFunction() != null) {
 				Expression exp = op.getFunction().getParam().getLeafExpression();
 				boolean flag = true;//true��ʾ���Ǳ������ֶΡ� ����news��new��derive
 				for (String name : tempList) {

File: src/com/scudata/expression/mfn/pseudo/Delete.java
Patch:
@@ -1,13 +1,10 @@
 package com.scudata.expression.mfn.pseudo;
 
-import java.io.IOException;
-
 import com.scudata.common.MessageManager;
 import com.scudata.common.RQException;
 import com.scudata.dm.Context;
 import com.scudata.dm.Sequence;
 import com.scudata.expression.PseudoFunction;
-import com.scudata.expression.TableMetaDataFunction;
 import com.scudata.resources.EngineMessage;
 
 /**

File: src/com/scudata/expression/mfn/pseudo/Groups.java
Patch:
@@ -13,15 +13,12 @@
 import com.scudata.dw.ITableMetaData;
 import com.scudata.dw.TableMetaData;
 import com.scudata.dw.pseudo.PseudoTable;
-import com.scudata.expression.CursorFunction;
 import com.scudata.expression.Expression;
 import com.scudata.expression.Gather;
 import com.scudata.expression.IParam;
 import com.scudata.expression.Node;
 import com.scudata.expression.ParamInfo2;
 import com.scudata.expression.PseudoFunction;
-import com.scudata.expression.UnknownSymbol;
-import com.scudata.expression.operator.DotOperator;
 import com.scudata.parallel.ClusterCursor;
 import com.scudata.resources.EngineMessage;
 

File: src/com/scudata/dw/pseudo/IPseudo.java
Patch:
@@ -1,7 +1,5 @@
 package com.scudata.dw.pseudo;
 
-import java.io.IOException;
-
 import com.scudata.dm.Context;
 import com.scudata.dm.Sequence;
 import com.scudata.dm.cursor.ICursor;

File: src/com/scudata/dw/pseudo/PseudoTable.java
Patch:
@@ -15,7 +15,6 @@
 import com.scudata.dm.cursor.MergeCursor;
 import com.scudata.dm.cursor.MultipathCursors;
 import com.scudata.dm.op.Conj;
-import com.scudata.dm.op.Derive;
 import com.scudata.dm.op.Group;
 import com.scudata.dm.op.Join;
 import com.scudata.dm.op.New;
@@ -643,7 +642,8 @@ private void convertPseudoColumn(ICursor cursor, List<PseudoColumn> columns, Str
 				for (int i = 1; i <= len; i++) {
 					String field = (String) bitNames.get(i);
 					//ת��Ϊbitֵ,���ۼ�
-					exp += "+ if(" + field + ",shift(1,-" + (i - 1) + ",0))";
+					int bit = 1 << (i - 1);
+					exp += "+ if(" + field + "," + bit + ",0)";
 				}
 				exps[idx] = new Expression(exp);
 				names[idx] = column.getName();

File: src/com/scudata/cellset/graph/draw/DrawPie3DObj.java
Patch:
@@ -103,8 +103,7 @@ public static void drawing(DrawBase db,StringBuffer htmlLink) {
 		tmpInt1 = radiusx * (2 * gp.serNum);
 		tmpInt2 = radiusy * (2 * gp.serNum) + radiusy * (gp.pieHeight / 100.0);
 
-		gp.graphRect = new Rectangle2D.Double(gp.graphRect.x
-				+ (gp.graphRect.width - tmpInt1) / 2, gp.graphRect.y
+		gp.graphRect = new Rectangle2D.Double(gp.graphRect.x + (gp.graphRect.width - tmpInt1) / 2, gp.graphRect.y
 				+ (gp.graphRect.height - tmpInt2) / 2, tmpInt1, tmpInt2);
 
 		double orgx = gp.graphRect.x + gp.graphRect.width / 2;

File: src/com/scudata/cellset/graph/draw/DrawPie3DObj.java
Patch:
@@ -103,10 +103,9 @@ public static void drawing(DrawBase db,StringBuffer htmlLink) {
 		tmpInt1 = radiusx * (2 * gp.serNum);
 		tmpInt2 = radiusy * (2 * gp.serNum) + radiusy * (gp.pieHeight / 100.0);
 
-		gp.graphRect = (Rectangle2D.Double)(new Rectangle2D.Double(gp.graphRect.x
+		gp.graphRect = new Rectangle2D.Double(gp.graphRect.x
 				+ (gp.graphRect.width - tmpInt1) / 2, gp.graphRect.y
-				+ (gp.graphRect.height - tmpInt2) / 2, tmpInt1, tmpInt2)
-				.getBounds().clone());
+				+ (gp.graphRect.height - tmpInt2) / 2, tmpInt1, tmpInt2);
 
 		double orgx = gp.graphRect.x + gp.graphRect.width / 2;
 		double orgy = gp.graphRect.y + dely + (gp.graphRect.height - dely) / 2;

File: src/com/scudata/ide/common/ConfigFile.java
Patch:
@@ -497,7 +497,8 @@ public static ConfigFile getConfigFile() throws Throwable {
 					return cf;
 				}
 			} else {
-				cf = newInstance(fp);
+				if (GV.appFrame instanceof DFX)
+					cf = newInstance(fp);
 				return cf;
 			}
 		} catch (Throwable err) {

File: src/com/scudata/cellset/graph/config/Palette.java
Patch:
@@ -536,6 +536,7 @@ public static Palette getDefaultPalette() {
 
 	private static Palette getDefaultPalette2() {
 //		ע���ʼsizeҪ������addColor�ĸ���ƥ�䣬������ɫѭ������
+		
 		int size = 7;
 		Palette pl = new Palette( size );
 		       

File: src/com/scudata/cellset/graph/config/Palette.java
Patch:
@@ -535,7 +535,9 @@ public static Palette getDefaultPalette() {
 	}
 
 	private static Palette getDefaultPalette2() {
-		Palette pl = new Palette(26);
+//		ע���ʼsizeҪ������addColor�ĸ���ƥ�䣬������ɫѭ������
+		int size = 7;
+		Palette pl = new Palette( size );
 		       
 		pl.addColor(0x5b9bd5);
 		pl.addColor(0xa5cb50);

File: src/com/scudata/ide/dfx/dialog/DialogDisplayChart.java
Patch:
@@ -48,6 +48,7 @@
 import com.scudata.chart.Consts;
 import com.scudata.chart.Engine;
 import com.scudata.common.AnimatedGifEncoder;
+import com.scudata.common.Escape;
 import com.scudata.common.MessageManager;
 import com.scudata.common.StringUtils;
 import com.scudata.dm.Context;
@@ -666,10 +667,10 @@ private String getAccumulateExp(){
 		if(sCategory==null){
 			return null;
 		}
-		String exp = sCategory;
+		String exp = Escape.addEscAndQuote(sCategory,false);
 		String sSeries = (String)cbSeries.getSelectedItem();
 		if(StringUtils.isValidString(sSeries)){
-			exp += ","+sSeries;
+			exp += ","+Escape.addEscAndQuote(sSeries,false);
 		}
 		
 		return exp;

File: src/com/scudata/dw/pseudo/PseudoTable.java
Patch:
@@ -339,7 +339,7 @@ private ICursor getCursor(ITableMetaData table, ICursor mcs) {
 						newExps[0] = new Expression[] {new Expression("~")};
 						String[][] newNames = new String[1][];
 						newNames[0] = new String[] {column.getName()};
-						Join join = new Join(null, null, exps, codes, null, newExps, newNames, null);
+						Join join = new Join(null, null, exps, new Sequence[] {dim}, new Expression[1][], newExps, newNames, null);
 						cursor.addOperation(join, ctx);
 					}
 				}
@@ -613,7 +613,7 @@ private void convertPseudoColumn(ICursor cursor, List<PseudoColumn> columns, Str
 				for (int i = 1; i <= len; i++) {
 					String field = (String) bitNames.get(i);
 					//ת��Ϊbitֵ,���ۼ�
-					exp += "+ if(" + field + ",0,shift(1,-" + (i - 1) + "))";
+					exp += "+ if(" + field + ",shift(1,-" + (i - 1) + ",0))";
 				}
 				exps[idx] = new Expression(exp);
 				names[idx] = column.getName();

File: src/com/scudata/ide/dfx/base/FileTree.java
Patch:
@@ -673,7 +673,7 @@ protected JMenuItem getMenuItem(byte action, ActionListener al) {
 	 * �˵����������
 	 *
 	 */
-	class MenuListener implements ActionListener {
+	protected class MenuListener implements ActionListener {
 		FileTreeNode node;
 
 		public MenuListener(FileTreeNode node) {

