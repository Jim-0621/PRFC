File: azkaban-common/src/main/java/azkaban/trigger/TriggerManager.java
Patch:
@@ -391,7 +391,7 @@ private void checkAllTriggers() throws TriggerManagerException {
           }
         } catch (final Throwable th) {
           //skip this trigger, moving on to the next one
-          TriggerManager.logger.error("Failed to process trigger with id : " + t, th.fillInStackTrace());
+          TriggerManager.logger.error("Failed to process trigger with id : " + t, th);
         } finally {
           t.unlock();
         }

File: azkaban-common/src/main/java/azkaban/trigger/builtin/BasicTimeChecker.java
Patch:
@@ -168,9 +168,7 @@ public Boolean eval() {
   public void reset() {
     final NextCheckTime nextCheckTimeObj = calculateNextCheckTime();
     this.nextCheckTime = nextCheckTimeObj.nextValidCheckTimeFromNow;
-    if (nextCheckTimeObj.missedCheckTimeBeforeNow.size() > 0) {
-      nextCheckTimeObj.missedCheckTimeBeforeNow.remove(nextCheckTimeObj.missedCheckTimeBeforeNow.size() - 1);
-    }
+    nextCheckTimeObj.missedCheckTimeBeforeNow.remove(nextCheckTimeObj.missedCheckTimeBeforeNow.size() - 1);
     this.missedCheckTimesBeforeNow = nextCheckTimeObj.missedCheckTimeBeforeNow;
   }
 

File: az-core/src/main/java/azkaban/Constants.java
Patch:
@@ -935,7 +935,7 @@ public String getName() {
 
     public static FlowRetryStrategy valueFromName(String name) {
       for(FlowRetryStrategy s: FlowRetryStrategy.values()) {
-        if(s.name.equals(name)) {
+        if(s.name.equals(name) || s.name().equals(name)) {
           return s;
         }
       }

File: azkaban-common/src/main/java/azkaban/server/HttpRequestUtils.java
Patch:
@@ -238,7 +238,7 @@ public static void validatePreprocessFlowParameters(ExecutionOptions options, Pr
     if (flowParameters.containsKey(FlowParameters.FLOW_PARAM_RETRY_STRATEGY)){
       String restartStrategy = flowParameters.get(FlowParameters.FLOW_PARAM_RETRY_STRATEGY);
       try {
-        FlowRetryStrategy restartStrategyEnum = FlowRetryStrategy.valueOf(restartStrategy);
+        FlowRetryStrategy restartStrategyEnum = FlowRetryStrategy.valueFromName(restartStrategy);
       } catch (IllegalArgumentException e){
         errMsg.add(String.format("Invalid %s = %s. Valid values are: %s",
             FlowParameters.FLOW_PARAM_RETRY_STRATEGY, restartStrategy,

File: azkaban-web-server/src/test/java/azkaban/webapp/servlet/ProjectPageHeaderTest.java
Patch:
@@ -19,7 +19,7 @@ public class ProjectPageHeaderTest {
   @Test
   public void testUploadButtonIsPresent() {
     final VelocityContext context = VelocityContextTestUtil.getInstance();
-    context.put("projectUploadLock", false);
+    context.put("hideUploadProjectButton", false);
 
     final String result =
         VelocityTemplateTestUtil.renderTemplate("projectpageheader", context);
@@ -29,7 +29,7 @@ public void testUploadButtonIsPresent() {
   @Test
   public void testUploadButtonIsNotPresent() {
     final VelocityContext context = VelocityContextTestUtil.getInstance();
-    context.put("projectUploadLock", true);
+    context.put("hideUploadProjectButton", true);
 
     final String result =
         VelocityTemplateTestUtil.renderTemplate("projectpageheader", context);

File: azkaban-web-server/src/test/java/azkaban/webapp/servlet/ProjectSideBarViewTest.java
Patch:
@@ -39,6 +39,7 @@ public void testProjectSideBarView()
     context.put("projectUploadLock", project.isUploadLocked());
     context.put("adhocUpload", project.isAdhocUploadEnabled());
     context.put("showUploadLockPanel", true);
+    context.put("showAdhocUploadFeature", true);
 
     context.put("admins", "admin_name");
     context.put("userpermission", "admin_permission");

File: azkaban-common/src/main/java/azkaban/trigger/TriggerManager.java
Patch:
@@ -391,7 +391,7 @@ private void checkAllTriggers() throws TriggerManagerException {
           }
         } catch (final Throwable th) {
           //skip this trigger, moving on to the next one
-          TriggerManager.logger.error("Failed to process trigger with id : " + t, th);
+          TriggerManager.logger.error("Failed to process trigger with id : " + t, th.fillInStackTrace());
         } finally {
           t.unlock();
         }

File: azkaban-common/src/main/java/azkaban/trigger/builtin/BasicTimeChecker.java
Patch:
@@ -168,7 +168,9 @@ public Boolean eval() {
   public void reset() {
     final NextCheckTime nextCheckTimeObj = calculateNextCheckTime();
     this.nextCheckTime = nextCheckTimeObj.nextValidCheckTimeFromNow;
-    nextCheckTimeObj.missedCheckTimeBeforeNow.remove(nextCheckTimeObj.missedCheckTimeBeforeNow.size() - 1);
+    if (nextCheckTimeObj.missedCheckTimeBeforeNow.size() > 0) {
+      nextCheckTimeObj.missedCheckTimeBeforeNow.remove(nextCheckTimeObj.missedCheckTimeBeforeNow.size() - 1);
+    }
     this.missedCheckTimesBeforeNow = nextCheckTimeObj.missedCheckTimeBeforeNow;
   }
 

File: azkaban-common/src/main/java/azkaban/executor/ExecutableFlow.java
Patch:
@@ -60,6 +60,7 @@ public class ExecutableFlow extends ExecutableFlowBase {
   public static final String SLAOPTIONS_PARAM = "slaOptions";
   public static final String AZKABANFLOWVERSION_PARAM = "azkabanFlowVersion";
   public static final String IS_LOCKED_PARAM = "isLocked";
+  public static final String IS_PRODUCTION_FLOW_PARAM = "isProductionFlow";
   public static final String IS_OOM_Killed_PARAM = "isOOMKilled";
   public static final String IS_VPA_Enabled_PARAM = "isVPAEnabled";
   public static final String FLOW_LOCK_ERROR_MESSAGE_PARAM = "flowLockErrorMessage";
@@ -415,6 +416,7 @@ public Map<String, Object> toObject() {
     flowObj.put(SYSTEM_DEFINED_FLOW_RETRY_COUNT_PARAM, this.systemDefinedRetryCount);
 
     flowObj.put(IS_LOCKED_PARAM, this.isLocked);
+    flowObj.put(IS_PRODUCTION_FLOW_PARAM, this.isProductionFlow);
     flowObj.put(IS_OOM_Killed_PARAM, this.isOOMKilled);
     flowObj.put(IS_VPA_Enabled_PARAM, this.isVPAEnabled);
     flowObj.put(FLOW_LOCK_ERROR_MESSAGE_PARAM, this.flowLockErrorMessage);
@@ -495,6 +497,7 @@ public void fillExecutableFromMapObject(
     }
 
     this.setLocked(flowObj.getBool(IS_LOCKED_PARAM, false));
+    this.setProductionFlowMarker(flowObj.getBool(IS_PRODUCTION_FLOW_PARAM, false));
     this.setOOMKilled(flowObj.getBool(IS_OOM_Killed_PARAM, false));
     this.setVPAEnabled(flowObj.getBool(IS_VPA_Enabled_PARAM, false));
     this.setFlowLockErrorMessage(flowObj.getString(FLOW_LOCK_ERROR_MESSAGE_PARAM, null));

File: azkaban-common/src/main/java/azkaban/executor/container/KubernetesContainerizedImpl.java
Patch:
@@ -42,6 +42,7 @@
 import azkaban.flow.Flow;
 import azkaban.flow.FlowResourceRecommendation;
 import azkaban.flow.ImmutableFlowProps;
+import azkaban.imagemgmt.exception.ImageMgmtException;
 import azkaban.imagemgmt.models.ImageVersion.State;
 import azkaban.imagemgmt.rampup.ImageRampupManager;
 import azkaban.imagemgmt.version.VersionInfo;
@@ -698,7 +699,7 @@ VersionSet fetchVersionSet(final int executionId, final Map<String, String> flow
         versionSetBuilder.addElements(versionMap);
         versionSet = versionSetBuilder.addElements(overlayMap).build();
       }
-    } catch (final IOException e) {
+    } catch (NumberFormatException | IOException | ImageMgmtException e) {
       logger.error("ExecId: {}, Exception in fetching the VersionSet. Error msg: {}",
           executionId, e.getMessage());
       throw new ExecutorManagerException(e);

File: az-hadoop-jobtype-plugin/src/main/java/azkaban/jobtype/examples/java/WordCount.java
Patch:
@@ -52,7 +52,7 @@ public class WordCount extends AbstractHadoopJob {
   public WordCount(String name, Props props) {
     super(name, props);
     this.inputPath = props.getString("input.path");
-    this.outputPath = props.getString("output.path");
+    this.outputPath = props.getString("output.path", "/tmp/wordcount_" + System.nanoTime());
     this.forceOutputOverwrite =
         props.getBoolean("force.output.overwrite", false);
     this.outputDelete =

File: azkaban-common/src/main/java/azkaban/scheduler/TriggerBasedScheduleLoader.java
Patch:
@@ -167,7 +167,7 @@ private Schedule triggerToSchedule(final Trigger t) throws ScheduleManagerExcept
           triggerTimeChecker.getCronExpression(),
           t.isBackExecuteOnceOnMiss());
     } else {
-      logger.error("Failed to parse schedule from trigger!");
+      logger.error("Failed to parse schedule from trigger {}!", t.getTriggerId());
       throw new ScheduleManagerException(
           "Failed to parse schedule from trigger!");
     }

File: azkaban-web-server/src/main/java/azkaban/webapp/servlet/ExecutorServlet.java
Patch:
@@ -68,7 +68,6 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 import org.apache.commons.lang.StringEscapeUtils;
-import org.codehaus.jettison.json.JSONObject;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: azkaban-web-server/src/test/java/azkaban/webapp/servlet/ProjectManagerServletTest.java
Patch:
@@ -79,7 +79,7 @@ public void testRemoveScheduleOfDeletedFlows() throws Exception {
         now + 30, now + 30, null, null, now + 30, now + 30, now + 30, "testUser3", null, null, false);
     schedules.add(sched3);
 
-    when(this.scheduleManager.getSchedules()).thenReturn(new ArrayList<>(schedules));
+    when(this.scheduleManager.getAllSchedules()).thenReturn(new ArrayList<>(schedules));
     doAnswer(invocation -> schedules.remove(invocation.getArguments()[0]))
         .when(this.scheduleManager).removeSchedule(any(Schedule.class));
     this.projectManagerServlet

File: azkaban-exec-server/src/test/java/azkaban/execapp/FlowRunnerTest.java
Patch:
@@ -20,7 +20,6 @@
 import static azkaban.Constants.EventReporterConstants.AZ_WEBSERVER;
 import static azkaban.Constants.EventReporterConstants.EXECUTOR_TYPE;
 import static azkaban.Constants.EventReporterConstants.FLOW_NAME;
-import static azkaban.Constants.EventReporterConstants.ORIGINAL_FLOW_EXECUTION_ID_BEFORE_RETRY;
 import static azkaban.Constants.EventReporterConstants.PROJECT_FILE_NAME;
 import static azkaban.Constants.EventReporterConstants.PROJECT_FILE_UPLOADER_IP_ADDR;
 import static azkaban.Constants.EventReporterConstants.PROJECT_FILE_UPLOAD_TIME;
@@ -398,8 +397,6 @@ public void flowEventMetadata() throws Exception {
         ServerUtils.getVersionSetJsonString(versionSet), flowMetadata.get(VERSION_SET)); // Checks version set
     Assert.assertEquals("Event metadata not created as expected", "BAREMETAL",
         flowMetadata.get(EXECUTOR_TYPE)); // Checks executor type
-    Assert.assertNull("Event metadata not created as expected.",
-        flowMetadata.get(ORIGINAL_FLOW_EXECUTION_ID_BEFORE_RETRY));
   }
 
   @Test

File: az-core/src/main/java/azkaban/Constants.java
Patch:
@@ -388,6 +388,8 @@ public static class ConfigurationKeys {
     public static final String AZKABAN_DEPENDENCY_MAX_DOWNLOAD_TRIES = "azkaban.dependency.max.download.tries";
     public static final String AZKABAN_DEPENDENCY_DOWNLOAD_THREADPOOL_SIZE =
         "azkaban.dependency.download.threadpool.size";
+    public static final String AZKABAN_DEPENDENCY_DOWNLOAD_TIMEOUT_SECONDS =
+        "azkaban.dependency.download.timeout.seconds";
     public static final String AZKABAN_STORAGE_TYPE = "azkaban.storage.type";
     public static final String AZKABAN_STORAGE_LOCAL_BASEDIR = "azkaban.storage.local.basedir";
     public static final String HADOOP_CONF_DIR_PATH = "hadoop.conf.dir.path";

File: azkaban-common/src/main/java/azkaban/project/JdbcProjectImpl.java
Patch:
@@ -702,7 +702,6 @@ public void uploadFlows(final Project project, final int version, final Collecti
       throws ProjectManagerException {
     // We do one at a time instead of batch... because well, the batch could be
     // large.
-    logger.info("Uploading flows");
     try {
       for (final Flow flow : flows) {
         uploadFlow(project, version, flow, this.defaultEncodingType);
@@ -752,7 +751,7 @@ private void uploadFlow(final Project project, final int version, final Flow flo
     final String json = JSONUtils.toJSON(flow.toObject());
     final byte[] data = convertJsonToBytes(encType, json);
 
-    logger.info("Flow upload " + flow.getId() + " is byte size " + data.length);
+    logger.info("Flow upload " + flow.getId() + " in project " + project.getName() + " is byte size " + data.length);
     final String INSERT_FLOW =
         "INSERT INTO project_flows (project_id, version, flow_id, modified_time, encoding_type, json) values (?,?,?,?,?,?)";
     try {

File: azkaban-common/src/test/java/azkaban/project/ArchiveUnthinnerTest.java
Patch:
@@ -124,7 +124,7 @@ public void setUp() throws Exception {
         }
       });
       return null;
-    }).when(this.dependencyTransferManager).downloadAllDependencies(any(Set.class));
+    }).when(this.dependencyTransferManager).downloadAllDependencies(any(Set.class), eq(project.getName()));
 
     // When the unthinner attempts to get a validationKey for the project, return our sample one.
     when(this.validatorUtils.getCacheKey(eq(this.project), eq(this.projectFolder), any()))
@@ -411,7 +411,7 @@ public void testErrorDownload() throws Exception {
 
     // When we attempt to download the dependencies, throw an error
     doThrow(new DependencyTransferException())
-        .when(this.dependencyTransferManager).downloadAllDependencies(depSetEq(depSetAB));
+        .when(this.dependencyTransferManager).downloadAllDependencies(depSetEq(depSetAB), eq(project.getName()));
 
     // Run the ArchiveUnthinner!
     runUnthinner();

File: azkaban-exec-server/src/main/java/azkaban/container/ContainerizedFlowPreparer.java
Patch:
@@ -70,7 +70,8 @@ public static Path getCurrentDir() {
   public void setup(final ExecutableFlow flow) throws ExecutorManagerException {
     final ProjectDirectoryMetadata projectDirMetadata = new ProjectDirectoryMetadata(
             flow.getProjectId(),
-            flow.getVersion());
+            flow.getVersion(),
+            flow.getProjectName());
     final long flowPrepStartTime = System.currentTimeMillis();
     final int execId = flow.getExecutionId();
 

File: azkaban-exec-server/src/main/java/azkaban/execapp/AbstractFlowPreparer.java
Patch:
@@ -155,7 +155,7 @@ private void downloadAllDependencies(final ProjectDirectoryMetadata proj, final
 
     try {
       final long start = System.currentTimeMillis();
-      this.dependencyTransferManager.downloadAllDependencies(depFiles);
+      this.dependencyTransferManager.downloadAllDependencies(depFiles, proj.getProjectName());
       LOGGER.info("Downloading {} JAR dependencies for project {} when preparing "
                       + "execution [execid {}] completed in {} second(s)",
               dependencies.size(), proj, execId, (System.currentTimeMillis() - start) / 1000);

File: azkaban-exec-server/src/main/java/azkaban/execapp/FlowPreparer.java
Patch:
@@ -81,7 +81,8 @@ public void setup(final ExecutableFlow flow) throws ExecutorManagerException {
     try {
       final ProjectDirectoryMetadata project = new ProjectDirectoryMetadata(
           flow.getProjectId(),
-          flow.getVersion());
+          flow.getVersion(),
+          flow.getProjectName());
 
       final long flowPrepStartTime = System.currentTimeMillis();
 

File: azkaban-common/src/main/java/azkaban/executor/ExecutionOptions.java
Patch:
@@ -16,7 +16,6 @@
 
 package azkaban.executor;
 
-import static azkaban.Constants.EventReporterConstants.EXECUTION_RETRIED_BY_AZKABAN;
 import static azkaban.Constants.EventReporterConstants.ORIGINAL_FLOW_EXECUTION_ID_BEFORE_RETRY;
 
 import azkaban.executor.mail.DefaultMailCreator;

File: azkaban-common/src/main/java/azkaban/executor/container/VPAFlowCriteria.java
Patch:
@@ -146,6 +146,6 @@ public boolean IsVPAEnabledForFlow(final ExecutableFlow flow) {
   @VisibleForTesting
   public boolean flowExists(final String projectName, final String flowName) {
     return this.projects.contains(projectName) || this.flows.contains(flowName)
-        || this.projectFlows.containsKey(projectName) && this.projectFlows.get(projectName).contains(flowName);
+        || (this.projectFlows.containsKey(projectName) && this.projectFlows.get(projectName).contains(flowName));
   }
 }

File: azkaban-common/src/main/java/azkaban/executor/OnContainerizedExecutionEventListener.java
Patch:
@@ -54,7 +54,7 @@ private void restartExecutableFlow(final ExecutableFlow exFlow) {
       return;
     }
     final ExecutableFlow executableFlow =
-        FlowUtils.createExecutableFlow(project, flow, this.executorManagerAdapter, logger);
+        this.executorManagerAdapter.createExecutableFlow(project, flow);
     executableFlow.setSubmitUser(exFlow.getSubmitUser());
     executableFlow.setExecutionSource(Constants.EXECUTION_SOURCE_ADHOC);
     executableFlow.setUploadUser(project.getUploadUser());

File: azkaban-web-server/src/main/java/azkaban/webapp/servlet/ExecutorServlet.java
Patch:
@@ -1027,9 +1027,7 @@ private void ajaxExecuteFlow(final HttpServletRequest req,
     }
     options.setMailCreator(flow.getMailCreator());
 
-
-    ExecutionOptions merged = exflow.getExecutionOptions().merge(options);
-    exflow.setExecutionOptions(merged);
+    exflow.getExecutionOptions().merge(options);
 
     /**
      * If the user has not explicitly overridden the failure action from the UI or

File: azkaban-web-server/src/test/java/azkaban/flowtrigger/TriggerInstanceProcessorTest.java
Patch:
@@ -25,6 +25,7 @@
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
+import azkaban.executor.ExecutableFlow;
 import azkaban.executor.ExecutorLoader;
 import azkaban.executor.ExecutorManagerAdapter;
 import azkaban.executor.MockExecutorLoader;
@@ -109,6 +110,7 @@ public void setUp() throws Exception {
     this.triggerInstLoader = mock(FlowTriggerInstanceLoader.class);
     this.executorManager = mock(ExecutorManagerAdapter.class);
     this.executorLoader = new MockExecutorLoader();
+    when(this.executorManager.createExecutableFlow(any(), any())).thenReturn(mock(ExecutableFlow.class));
     when(this.executorManager.submitExecutableFlow(any(), anyString())).thenReturn("return");
     final CommonMetrics commonMetrics = new CommonMetrics(new MetricsManager(new MetricRegistry()));
     this.emailer = Mockito.spy(new Emailer(EmailerTest.createMailProperties(), commonMetrics,

File: azkaban-common/src/main/java/azkaban/executor/FlowStatusChangeEventListener.java
Patch:
@@ -78,8 +78,6 @@ public synchronized Map<String, String> getFlowMetaData(final ExecutableFlow flo
     metaData.put(EventReporterConstants.SUBMIT_TIME, String.valueOf(flow.getSubmitTime()));
     metaData.put(EventReporterConstants.FLOW_VERSION, String.valueOf(flow.getAzkabanFlowVersion()));
     metaData.put(EventReporterConstants.FLOW_STATUS, flow.getStatus().name());
-    metaData.put(EventReporterConstants.EXECUTION_RETRIED_BY_AZKABAN,
-        String.valueOf(flow.getExecutionOptions().isExecutionRetried()));
     if (flow.isOOMKilled()) {
       metaData.put(EventReporterConstants.IS_OOM_KILLED,
           String.valueOf(flow.isOOMKilled()));

File: azkaban-common/src/test/java/azkaban/server/HttpRequestUtilsTest.java
Patch:
@@ -435,7 +435,6 @@ public void testValidatePreprocessFlowParamWithEmptyMaxRetries()
 
     HttpRequestUtils.validatePreprocessFlowParameters(options, testAzProps);
     Map<String, String> result = options.getFlowParameters();
-    Assert.assertEquals("1", result.get(FLOW_PARAM_MAX_RETRIES));
+    Assert.assertNull(result.get(FLOW_PARAM_MAX_RETRIES));
   }
-
 }

File: azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java
Patch:
@@ -1740,8 +1740,6 @@ synchronized Map<String, String> getFlowMetadata(final FlowRunner flowRunner,
       metaData.put(EventReporterConstants.EXECUTION_ID, String.valueOf(rootFlow.getExecutionId()));
       metaData.put(EventReporterConstants.START_TIME, String.valueOf(flow.getStartTime()));
       metaData.put(EventReporterConstants.SUBMIT_TIME, String.valueOf(rootFlow.getSubmitTime()));
-      metaData.put(EventReporterConstants.EXECUTION_RETRIED_BY_AZKABAN,
-          String.valueOf(rootFlow.getExecutionOptions().isExecutionRetried()));
       if (rootFlow.getExecutionOptions().getOriginalFlowExecutionIdBeforeRetry() != null) {
         // original flow execution id is set when there is one
         metaData.put(EventReporterConstants.ORIGINAL_FLOW_EXECUTION_ID_BEFORE_RETRY,

File: azkaban-common/src/main/java/azkaban/executor/OnContainerizedExecutionEventListener.java
Patch:
@@ -53,7 +53,8 @@ private void restartExecutableFlow(final ExecutableFlow exFlow) {
       logger.error(e.getMessage());
       return;
     }
-    final ExecutableFlow executableFlow = FlowUtils.createExecutableFlow(project, flow);
+    final ExecutableFlow executableFlow =
+        FlowUtils.createExecutableFlow(project, flow, this.executorManagerAdapter, logger);
     executableFlow.setSubmitUser(exFlow.getSubmitUser());
     executableFlow.setExecutionSource(Constants.EXECUTION_SOURCE_ADHOC);
     executableFlow.setUploadUser(project.getUploadUser());

File: azkaban-common/src/main/java/azkaban/flow/FlowUtils.java
Patch:
@@ -28,7 +28,6 @@
 import azkaban.utils.Props;
 import com.google.gson.Gson;
 import java.util.List;
-import java.util.Map;
 import java.util.UUID;
 import org.joda.time.DateTime;
 

File: azkaban-common/src/main/java/azkaban/trigger/builtin/ExecuteFlowAction.java
Patch:
@@ -192,7 +192,7 @@ public void doAction() throws Exception {
     final Project project = FlowUtils.getProject(projectManager, this.projectId);
     final Flow flow = FlowUtils.getFlow(project, this.flowName);
 
-    final ExecutableFlow exflow = FlowUtils.createExecutableFlow(project, flow);
+    final ExecutableFlow exflow = executorManagerAdapter.createExecutableFlow(project, flow);
 
     exflow.setSubmitUser(this.submitUser);
     exflow.setExecutionSource(Constants.EXECUTION_SOURCE_SCHEDULED);

File: azkaban-web-server/src/main/java/azkaban/flowtrigger/TriggerInstanceProcessor.java
Patch:
@@ -69,7 +69,7 @@ private void executeFlowAndUpdateExecID(final TriggerInstance triggerInst) {
     try {
       final Project project = triggerInst.getProject();
       final Flow flow = FlowUtils.getFlow(project, triggerInst.getFlowId());
-      final ExecutableFlow executableFlow = FlowUtils.createExecutableFlow(project, flow);
+      final ExecutableFlow executableFlow = executorManager.createExecutableFlow(project, flow);
       // execute the flow with default execution option(concurrency option being "ignore
       // currently running")
       executableFlow.setUploadUser(project.getUploadUser());

File: az-core/src/main/java/azkaban/Constants.java
Patch:
@@ -883,7 +883,7 @@ public static class FlowParameters {
     public static final String FLOW_PARAM_ALLOW_RESTART_ON_STATUS = "flow.retry.statuses";
 
     // Constant to define at most how many times can restart the flow
-    public static final String FLOW_PARAM_RESTART_COUNT = "flow.max.retries";
+    public static final String FLOW_PARAM_MAX_RETRIES = "flow.max.retries";
 
     // Constant to define the strategy to restart the execution, default to "restart_from_root",
     public static final String FLOW_PARAM_RESTART_STRATEGY = "flow.retry.strategy";

File: azkaban-common/src/main/java/azkaban/executor/Status.java
Patch:
@@ -54,6 +54,9 @@ public enum Status {
   public static final ImmutableSet<Status> RESTARTABLE_STATUSES =
       ImmutableSet.of(Status.READY, Status.DISPATCHING, Status.PREPARING, Status.EXECUTION_STOPPED);
 
+  public static final ImmutableSet<Status> RESTARTABLE_TERMINATED_STATUSES =
+      ImmutableSet.of(Status.EXECUTION_STOPPED, Status.FAILED);
+
   private final int numVal;
 
   Status(final int numVal) {

File: azkaban-web-server/src/main/java/azkaban/webapp/servlet/ExecutorServlet.java
Patch:
@@ -1010,8 +1010,10 @@ private void ajaxExecuteFlow(final HttpServletRequest req,
     exflow.setExecutionSource(Constants.EXECUTION_SOURCE_ADHOC);
 
     final ExecutionOptions options;
+    final Props azProps = getApplication().getServerProps();
     try {
       options = HttpRequestUtils.parseFlowOptions(req, flowId);
+      options.validateFlowParameters(azProps);
     } catch (final ServletException e) {
       logger.info("parseFlowOptions failed", e);
       ret.put("error", "Error parsing flow options: " + e.getMessage());

File: azkaban-common/src/main/java/azkaban/trigger/JdbcTriggerImpl.java
Patch:
@@ -132,8 +132,9 @@ public void addTrigger(final Trigger t) throws TriggerLoaderException {
 
   @Override
   public void updateTrigger(final Trigger t) throws TriggerLoaderException {
-    logger.info("Updating trigger " + t.getTriggerId() + " into db.");
     t.setLastModifyTime(System.currentTimeMillis());
+    logger.info("Updating trigger " + t.getTriggerId() + " into db"
+        + " with nextCheckTime " + t.getNextCheckTime() + "and lastModifiedTime " + t.getLastModifyTime());
     updateTrigger(t, this.defaultEncodingType);
   }
 

File: azkaban-common/src/main/java/azkaban/executor/ExecutableNode.java
Patch:
@@ -216,6 +216,9 @@ public boolean hasPropsSource() {
   public String getJobSource() {
     return this.jobSource;
   }
+  public void setJobSource(String jobSource) {
+    this.jobSource = jobSource;
+  }
 
   public String getPropsSource() {
     return this.propsSource;

File: azkaban-common/src/main/java/azkaban/project/ProjectManager.java
Patch:
@@ -312,7 +312,7 @@ public Props getProperties(final Project project, final Flow flow, final String
       final String source) throws ProjectManagerException {
     if (FlowLoaderUtils.isAzkabanFlowVersion20(flow.getAzkabanFlowVersion())) {
       // Return the properties from the original uploaded flow file.
-      return getPropertiesFromFlowFile(flow, jobName, source, 1);
+        return getPropertiesFromFlowFile(flow, jobName, source, 1);
     } else {
       return this.projectLoader.fetchProjectProperty(project, source);
     }

File: az-hadoop-jobtype-plugin/src/main/java/azkaban/jobtype/AbstractHadoopJavaProcessJob.java
Patch:
@@ -79,7 +79,8 @@ public void setupHadoopJobProperties() {
         CommonJobProperties.PROJECT_NAME,
         CommonJobProperties.AZKABAN_WEBSERVERHOST,
         CommonJobProperties.JOB_ID,
-        CommonJobProperties.JOB_ATTEMPT
+        CommonJobProperties.JOB_ATTEMPT,
+        CommonJobProperties.NESTED_FLOW_PATH
     };
     Props jobProps = getJobProps();
     String tagList = HadoopJobUtils.constructHadoopTags(jobProps, tagKeys);

File: az-reportal/src/main/java/azkaban/viewer/reportal/ReportalServlet.java
Patch:
@@ -53,8 +53,6 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
-import java.lang.reflect.InvocationTargetException;
-import java.lang.reflect.Method;
 import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.Arrays;

File: azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java
Patch:
@@ -1724,6 +1724,8 @@ synchronized Map<String, String> getFlowMetadata(final FlowRunner flowRunner,
       metaData.put(EventReporterConstants.FLOW_NAME, flow.getNestedId());
       if (! (flow instanceof ExecutableFlow)) {
         metaData.put(EventReporterConstants.IS_ROOT_FLOW, "false");
+      } else {
+        metaData.put(EventReporterConstants.IS_ROOT_FLOW, "true");
       }
       // Azkaban executor hostname
       metaData.put(EventReporterConstants.AZ_HOST, props.getString(AZKABAN_SERVER_HOST_NAME,

File: azkaban-web-server/src/test/java/azkaban/webapp/servlet/ProjectManagerServletTest.java
Patch:
@@ -30,7 +30,6 @@
 import azkaban.project.ProjectManager;
 import azkaban.scheduler.Schedule;
 import azkaban.scheduler.ScheduleManager;
-import azkaban.server.AzkabanServer;
 import azkaban.server.session.Session;
 import azkaban.test.executions.ExecutionsTestUtil;
 import azkaban.user.User;

File: az-core/src/main/java/azkaban/Constants.java
Patch:
@@ -772,6 +772,8 @@ public static class ContainerizedDispatchManagerProperties {
         KUBERNETES_VPA_PREFIX + "rampup";
     public static final String KUBERNETES_VPA_ENABLED =
         KUBERNETES_VPA_PREFIX + "enabled";
+    public static final String KUBERNETES_VPA_FLOW_FILTER_FILE =
+        KUBERNETES_VPA_PREFIX + "flow.filter.file";
 
     // Kubernetes Watch related properties
     public static final String KUBERNETES_WATCH_PREFIX = AZKABAN_KUBERNETES_PREFIX + "watch.";

File: azkaban-common/src/test/java/azkaban/jobcallback/JobCallbackRequestMakerTest.java
Patch:
@@ -26,11 +26,13 @@
 import org.apache.log4j.Logger;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.mortbay.jetty.Server;
 import org.mortbay.jetty.servlet.Context;
 import org.mortbay.jetty.servlet.ServletHolder;
 
+@Ignore
 public class JobCallbackRequestMakerTest {
 
   private static final Logger logger = Logger.getLogger(JobCallbackRequestMakerTest.class);

File: azkaban-web-server/src/main/java/azkaban/webapp/servlet/ExecutorServlet.java
Patch:
@@ -1065,6 +1065,7 @@ private void ajaxUpdateProperty(final HttpServletRequest req,
       if (!HttpRequestUtils.hasPermission(this.userManager, user, Type.ADMIN)) {
         ret.put("error", String.format("User %s doesn't have ADMIN permission for updating "
             + "property", user));
+        return;
       }
       String propType = getParam(req, "propType");
       if (propType.equals("containerDispatch")) {

File: azkaban-hadoop-security-plugin/src/main/java/azkaban/security/commons/HadoopSecurityManager.java
Patch:
@@ -20,6 +20,7 @@
 import java.io.File;
 import java.io.IOException;
 import java.security.KeyStore;
+import java.util.Map;
 import java.util.Properties;
 import org.apache.hadoop.fs.FileSystem;
 import org.apache.hadoop.security.Credentials;
@@ -109,4 +110,6 @@ public abstract void prefetchToken(File tokenFile, Props props, Logger logger)
       throws HadoopSecurityManagerException;
 
   public abstract KeyStore getKeyStore(final Props props);
+
+  public abstract Map<String, KeyStore> getKeyStoreMap(Props commonPluginLoadProps);
 }

File: azkaban-common/src/test/java/azkaban/executor/container/ContainerCleanupManagerTest.java
Patch:
@@ -67,7 +67,7 @@ public class ContainerCleanupManagerTest {
   private ContainerizedImpl containerImpl;
   private ContainerizedDispatchManager containerizedDispatchManager;
   private ContainerCleanupManager cleaner;
-  private DummyContainerizationMetricsImpl metrics;
+  private DummyContainerizationMetricsImpl metrics = new DummyContainerizationMetricsImpl();
   private ClusterRouter clusterRouter;
 
   @Before

File: azkaban-common/src/main/java/azkaban/project/AzkabanProjectLoader.java
Patch:
@@ -297,9 +297,6 @@ private void persistProject(final Project project, final FlowLoader loader, fina
         });
       }
 
-      // Set the project version before upload of project files happens so that the files use
-      // new version.
-      project.setVersion(newProjectVersion);
       if (loader instanceof DirectoryFlowLoader) {
         final DirectoryFlowLoader directoryFlowLoader = (DirectoryFlowLoader) loader;
         log.info("Uploading Job properties for project " + archive.getName());

File: azkaban-common/src/main/java/azkaban/utils/YarnUtils.java
Patch:
@@ -27,8 +27,8 @@
 public class YarnUtils {
 
   //Yarn resource configuration directory for the cluster where the job is scheduled by the cluster router
-  private static final String YARN_CONF_DIRECTORY_PROPERTY = "env.YARN_CONF_DIR";
-  private static final String YARN_CONF_FILENAME = "yarn-site.xml";
+  public static final String YARN_CONF_DIRECTORY_PROPERTY = "env.YARN_CONF_DIR";
+  public static final String YARN_CONF_FILENAME = "yarn-site.xml";
 
   /**
    * Uses YarnClient to kill the jobs one by one

File: azkaban-common/src/main/java/azkaban/trigger/TriggerManager.java
Patch:
@@ -310,9 +310,9 @@ public void run() {
                 this.scannerInterval
                     - (System.currentTimeMillis() - TriggerManager.this.lastRunnerThreadCheckTime);
 
-            if (TriggerManager.this.runnerThreadIdleTime < 0) {
+            if (TriggerManager.this.runnerThreadIdleTime <= 0) {
               logger.error("Trigger manager thread " + this.getName()
-                  + " is too busy!");
+                  + " is too busy! Remaining idle time in ms: " + TriggerManager.this.runnerThreadIdleTime);
             } else {
               TriggerManager.this.syncObj.wait(TriggerManager.this.runnerThreadIdleTime);
             }

File: azkaban-web-server/src/main/java/azkaban/webapp/servlet/LoginAbstractAzkabanServlet.java
Patch:
@@ -747,7 +747,7 @@ protected boolean hasImageManagementPermission(final String imageTypeName, final
     if (permissionManager.isAzkabanAdmin(user)) {
       return true;
     }
-    return permissionManager.hasPermission(imageTypeName, user.getUserId(), type);
+    return permissionManager.hasPermissionForImageType(imageTypeName, user.getUserId(), type);
   }
 
 

File: azkaban-common/src/main/java/azkaban/AzkabanCommonModule.java
Patch:
@@ -46,8 +46,6 @@
 import azkaban.imagemgmt.daos.ImageVersionDaoImpl;
 import azkaban.imagemgmt.daos.RampRuleDao;
 import azkaban.imagemgmt.daos.RampRuleDaoImpl;
-import azkaban.imagemgmt.permission.PermissionManager;
-import azkaban.imagemgmt.permission.PermissionManagerImpl;
 import azkaban.imagemgmt.rampup.ImageRampupManager;
 import azkaban.imagemgmt.rampup.ImageRampupManagerImpl;
 import azkaban.logs.JdbcExecutionLogsLoader;
@@ -228,7 +226,6 @@ private void bindImageManagementDependencies() {
       bind(ImageRampupManager.class).to(ImageRampupManagerImpl.class).in(Scopes.SINGLETON);
       bind(RampRuleDao.class).to(RampRuleDaoImpl.class).in(Scopes.SINGLETON);
       bind(ImageMgmtCommonDao.class).to(ImageMgmtCommonDaoImpl.class).in(Scopes.SINGLETON);
-      bind(PermissionManager.class).to(PermissionManagerImpl.class).in(Scopes.SINGLETON);
       bind(Converter.class).annotatedWith(Names.named(IMAGE_TYPE))
           .to(ImageTypeConverter.class).in(Scopes.SINGLETON);
       bind(Converter.class).annotatedWith(Names.named(IMAGE_VERSION))

File: azkaban-web-server/src/main/java/azkaban/webapp/AzkabanWebServerModule.java
Patch:
@@ -48,6 +48,8 @@
 import azkaban.flowtrigger.database.JdbcFlowTriggerInstanceLoaderImpl;
 import azkaban.flowtrigger.plugin.FlowTriggerDependencyPluginException;
 import azkaban.flowtrigger.plugin.FlowTriggerDependencyPluginManager;
+import azkaban.imagemgmt.permission.PermissionManager;
+import azkaban.imagemgmt.permission.PermissionManagerImpl;
 import azkaban.imagemgmt.services.ImageMgmtCommonService;
 import azkaban.imagemgmt.services.ImageMgmtCommonServiceImpl;
 import azkaban.imagemgmt.services.ImageRampRuleService;
@@ -192,6 +194,7 @@ private void bindImageManagementDependencies() {
       bind(ImageVersionMetadataService.class).to(ImageVersionMetadataServiceImpl.class).in(Scopes.SINGLETON);
       bind(ImageMgmtCommonService.class).to(ImageMgmtCommonServiceImpl.class).in(Scopes.SINGLETON);
       bind(ImageRampRuleService.class).to(ImageRampRuleServiceImpl.class).in(Scopes.SINGLETON);
+      bind(PermissionManager.class).to(PermissionManagerImpl.class).in(Scopes.SINGLETON);
     }
   }
 

File: az-core/src/main/java/azkaban/Constants.java
Patch:
@@ -765,6 +765,7 @@ public static class ImageMgmtConstants {
     public static final String VERSION_STATE = "versionState";
     public static final String ID_KEY = "id";
     public static final String IMAGE_RAMPUP_PLAN = "imageRampupPlan";
+    public static final String IMAGE_RAMP_RULE = "imageRampRule";
     public static final String IMAGE_UPDATE_ADD_USER = "addImageOwners";
     public static final String IMAGE_UPDATE_REMOVE_USER = "removeImageOwners";
   }

File: azkaban-common/src/main/java/azkaban/AzkabanCommonModule.java
Patch:
@@ -44,6 +44,8 @@
 import azkaban.imagemgmt.daos.ImageTypeDaoImpl;
 import azkaban.imagemgmt.daos.ImageVersionDao;
 import azkaban.imagemgmt.daos.ImageVersionDaoImpl;
+import azkaban.imagemgmt.daos.RampRuleDao;
+import azkaban.imagemgmt.daos.RampRuleDaoImpl;
 import azkaban.imagemgmt.permission.PermissionManager;
 import azkaban.imagemgmt.permission.PermissionManagerImpl;
 import azkaban.imagemgmt.rampup.ImageRampupManager;
@@ -224,6 +226,7 @@ private void bindImageManagementDependencies() {
       bind(ImageVersionDao.class).to(ImageVersionDaoImpl.class).in(Scopes.SINGLETON);
       bind(ImageRampupDao.class).to(ImageRampupDaoImpl.class).in(Scopes.SINGLETON);
       bind(ImageRampupManager.class).to(ImageRampupManagerImpl.class).in(Scopes.SINGLETON);
+      bind(RampRuleDao.class).to(RampRuleDaoImpl.class).in(Scopes.SINGLETON);
       bind(ImageMgmtCommonDao.class).to(ImageMgmtCommonDaoImpl.class).in(Scopes.SINGLETON);
       bind(PermissionManager.class).to(PermissionManagerImpl.class).in(Scopes.SINGLETON);
       bind(Converter.class).annotatedWith(Names.named(IMAGE_TYPE))

File: azkaban-web-server/src/main/java/azkaban/webapp/AzkabanWebServerModule.java
Patch:
@@ -50,6 +50,8 @@
 import azkaban.flowtrigger.plugin.FlowTriggerDependencyPluginManager;
 import azkaban.imagemgmt.services.ImageMgmtCommonService;
 import azkaban.imagemgmt.services.ImageMgmtCommonServiceImpl;
+import azkaban.imagemgmt.services.ImageRampRuleService;
+import azkaban.imagemgmt.services.ImageRampRuleServiceImpl;
 import azkaban.imagemgmt.services.ImageRampupService;
 import azkaban.imagemgmt.services.ImageRampupServiceImpl;
 import azkaban.imagemgmt.services.ImageTypeService;
@@ -189,6 +191,7 @@ private void bindImageManagementDependencies() {
       bind(VersionSetLoader.class).to(JdbcVersionSetLoader.class).in(Scopes.SINGLETON);
       bind(ImageVersionMetadataService.class).to(ImageVersionMetadataServiceImpl.class).in(Scopes.SINGLETON);
       bind(ImageMgmtCommonService.class).to(ImageMgmtCommonServiceImpl.class).in(Scopes.SINGLETON);
+      bind(ImageRampRuleService.class).to(ImageRampRuleServiceImpl.class).in(Scopes.SINGLETON);
     }
   }
 

File: azkaban-exec-server/src/test/java/azkaban/execapp/FlowRunnerConditionalFlowTest.java
Patch:
@@ -38,6 +38,7 @@
 
 public class FlowRunnerConditionalFlowTest extends FlowRunnerTestBase {
 
+  //Please create new flow file for new testings
   private static final String FLOW_YAML_DIR = "conditionalflowyamltest";
   private static final String CONDITIONAL_FLOW_1 = "conditional_flow1";
   private static final String CONDITIONAL_FLOW_2 = "conditional_flow2";
@@ -46,6 +47,7 @@ public class FlowRunnerConditionalFlowTest extends FlowRunnerTestBase {
   private static final String CONDITIONAL_FLOW_5 = "conditional_flow5";
   private static final String CONDITIONAL_FLOW_6 = "conditional_flow6";
   private static final String CONDITIONAL_FLOW_7 = "conditional_flow7";
+  private static final String CONDITIONAL_FLOW_8 = "conditional_flow8";
   private FlowRunnerTestUtil testUtil;
   private Project project;
 
@@ -101,15 +103,14 @@ public void runFlowOnJobOutputCondition() throws Exception {
   @Ignore
   public void flowShouldFailWhenConditionalParameterDoesntExist() throws Exception {
     final HashMap<String, String> flowProps = new HashMap<>();
-    setUp(CONDITIONAL_FLOW_2, flowProps);
+    setUp(CONDITIONAL_FLOW_8, flowProps);
     final ExecutableFlow flow = this.runner.getExecutableFlow();
     assertStatus(flow, "jobA", Status.RUNNING);
     final Props generatedProperties = new Props();
     generatedProperties.put("key1", "value1");
     generatedProperties.put("key2", "value2");
     InteractiveTestJob.getTestJob("jobA").succeedJob(generatedProperties);
     assertStatus(flow, "jobA", Status.SUCCEEDED);
-    assertStatus(flow, "jobB", Status.SUCCEEDED);
     assertStatus(flow, "jobC", Status.READY);
     assertStatus(flow, "jobD", Status.READY);
     assertFlowStatus(flow, Status.FAILED);

File: azkaban-exec-server/src/test/java/azkaban/execapp/FlowRunnerConditionalJobsTest.java
Patch:
@@ -73,6 +73,7 @@ public void runFlowOnJobOutputCondition() throws Exception {
     final Props generatedProperties = new Props();
     generatedProperties.put("key1", "value1");
     generatedProperties.put("key2", "value2");
+    generatedProperties.put("key3", "value4");
     InteractiveTestJob.getTestJob((CONDITIONAL_FLOW_2 + ":") + "jobA").succeedJob(generatedProperties);
     assertStatus(flow, "jobA", Status.SUCCEEDED);
     assertStatus(flow, "jobB", Status.SUCCEEDED);
@@ -144,7 +145,7 @@ public void runFlowOnJobStatusConditionNull() throws Exception {
    * JobB has defined "condition: var fImport = new JavaImporter(java.io.File); with(fImport) { var
    * f = new File('new'); f.createNewFile(); }"
    * Null ProtectionDomain will restrict this arbitrary code from creating a new file.
-   * However it will not kick in when the change for condition whitelisting is implemented.
+   * However it will not kick in when the change for condition allow-listing is implemented.
    * As a result, this test case will be ignored.
    *
    * @throws Exception the exception

File: azkaban-common/src/main/java/azkaban/executor/container/KubernetesContainerizedImpl.java
Patch:
@@ -96,7 +96,7 @@
 @Singleton
 public class KubernetesContainerizedImpl extends EventHandler implements ContainerizedImpl {
 
-  public static final String DEFAULT_FLOW_CONTAINER_NAME_PREFIX = "az-flow-container";
+  public static final String DEFAULT_FLOW_CONTAINER_NAME_PREFIX = "az-platform-image";
   public static final String DEFAULT_POD_NAME_PREFIX = "fc-dep";
   public static final String DEFAULT_SERVICE_NAME_PREFIX = "fc-svc";
   public static final String DEFAULT_CLUSTER_NAME = "azkaban";
@@ -1233,7 +1233,6 @@ private void deleteService(final int executionId) throws ExecutorManagerExceptio
     try {
       // Using GenericKubernetesApi due to a Known issue in K8s Java client and OpenAPIv2:
       // See more here: https://github.com/kubernetes-client/java/issues/86
-
       final GenericKubernetesApi<V1Service, V1ServiceList> serviceClient =
           new GenericKubernetesApi<>(V1Service.class, V1ServiceList.class, "",
               "v1", "services", this.client);

File: azkaban-common/src/main/java/azkaban/executor/ExecutionLogsDao.java
Patch:
@@ -54,7 +54,7 @@ public class ExecutionLogsDao {
   }
 
   // TODO kunkun-tang: the interface's parameter is called endByte, but actually is length.
-  LogData fetchLogs(final int execId, final String name, final int attempt,
+  public LogData fetchLogs(final int execId, final String name, final int attempt,
       final int startByte,
       final int length) throws ExecutorManagerException {
     final FetchLogsHandler handler = new FetchLogsHandler(startByte, length + startByte);
@@ -135,7 +135,7 @@ private void uploadLogFile(final DatabaseTransOperator transOperator, final int
     }
   }
 
-  int removeExecutionLogsByTime(final long millis, final int recordCleanupLimit)
+  public int removeExecutionLogsByTime(final long millis, final int recordCleanupLimit)
       throws ExecutorManagerException {
     int totalRecordsRemoved = 0;
     int removedRecords;

File: azkaban-exec-server/src/main/java/azkaban/execapp/AzkabanExecServerModule.java
Patch:
@@ -19,8 +19,6 @@
 
 import azkaban.cluster.ClusterModule;
 import azkaban.common.ExecJettyServerModule;
-import azkaban.executor.ExecutorLoader;
-import azkaban.executor.JdbcExecutorLoader;
 import com.google.inject.AbstractModule;
 
 
@@ -35,7 +33,6 @@ public class AzkabanExecServerModule extends AbstractModule {
   protected void configure() {
     install(new ExecJettyServerModule());
     install(new ClusterModule());
-    bind(ExecutorLoader.class).to(JdbcExecutorLoader.class);
   }
 
 }

File: azkaban-exec-server/src/test/java/azkaban/execapp/event/RemoteFlowWatcherTest.java
Patch:
@@ -21,6 +21,7 @@
 import azkaban.executor.InteractiveTestJob;
 import azkaban.executor.MockExecutorLoader;
 import azkaban.executor.Status;
+import azkaban.logs.MockExecutionLogsLoader;
 import java.io.IOException;
 import org.junit.After;
 import org.junit.Before;

File: azkaban-web-server/src/main/java/azkaban/webapp/AzkabanWebServer.java
Patch:
@@ -16,7 +16,6 @@
 package azkaban.webapp;
 
 import static azkaban.Constants.AZKABAN_SERVLET_CONTEXT_KEY;
-import static azkaban.Constants.ConfigurationKeys.DEFAULT_TIMEZONE_ID;
 import static azkaban.Constants.ConfigurationKeys.ENABLE_QUARTZ;
 import static azkaban.Constants.MAX_FORM_CONTENT_SIZE;
 import static azkaban.ServiceProvider.SERVICE_PROVIDER;
@@ -111,7 +110,6 @@
 import java.util.Map;
 import java.util.Map.Entry;
 import java.util.Optional;
-import java.util.TimeZone;
 import javax.annotation.Nullable;
 import javax.inject.Inject;
 import javax.inject.Singleton;
@@ -121,7 +119,6 @@
 import org.apache.log4j.jmx.HierarchyDynamicMBean;
 import org.apache.velocity.app.VelocityEngine;
 import org.codehaus.jackson.map.ObjectMapper;
-import org.joda.time.DateTimeZone;
 import org.mortbay.jetty.Handler;
 import org.mortbay.jetty.Server;
 import org.mortbay.jetty.servlet.Context;

File: azkaban-web-server/src/test/java/azkaban/webapp/ExecutionLogsCleanerTest.java
Patch:
@@ -6,7 +6,7 @@
 import static org.mockito.Mockito.mock;
 
 import azkaban.Constants.ConfigurationKeys;
-import azkaban.executor.ExecutorLoader;
+import azkaban.logs.JdbcExecutionLogsLoader;
 import azkaban.utils.Props;
 import java.util.concurrent.TimeUnit;
 import org.junit.Before;
@@ -15,15 +15,15 @@
 
 public class ExecutionLogsCleanerTest {
   private Props props;
-  private ExecutorLoader loader;
+  private JdbcExecutionLogsLoader loader;
   private ExecutionLogsCleaner executionLogsCleaner;
 
   @Before
   public void setUp() {
     this.props = new Props();
     /* This config will set the thread to run every 2 seconds */
     this.props.put(ConfigurationKeys.EXECUTION_LOGS_CLEANUP_INTERVAL_SECONDS, 2);
-    this.loader = mock(ExecutorLoader.class);
+    this.loader = mock(JdbcExecutionLogsLoader.class);
     this.executionLogsCleaner = new ExecutionLogsCleaner(this.props, this.loader);
   }
 

File: azkaban-common/src/main/java/azkaban/executor/ExecutionControllerUtils.java
Patch:
@@ -421,10 +421,12 @@ public static void failEverything(final EventHandler eventHandler,
     // Fire correct JOB_STARTED and JOB_FINISHED events.
     if (eventHandler != null && projectManager != null) {
       final Project project = projectManager.getProject(exFlow.getProjectId());
-      final Flow flow = project.getFlow(exFlow.getFlowId());
       for (Entry<ExecutableNode, Status> entry: nodeToOrigStatus.entrySet()) {
         final ExecutableNode node = entry.getKey();
         final Status origStatus = entry.getValue();
+        // We shouldn't use project.getFlow(exFlow.getFlowId()) b/c the node might be in embedded
+        // flows and exFlow might be the ancestor flow but not node's direct parent flow.
+        final Flow flow = project.getFlow(node.getParentFlow().getFlowId());
 
         // Fill in job props by following the logic in ProjectManagerServlet.
         if (node.getInputProps() == null) {

File: az-core/src/main/java/azkaban/Constants.java
Patch:
@@ -219,7 +219,7 @@ public static class EventReporterConstants {
   }
 
   public static class ConfigurationKeys {
-
+    public static final String AZKABAN_WEBSERVER_URL = "azkaban.webserver.url";
     public static final String AZKABAN_CLUSTER_NAME = "azkaban.cluster.name";
     public static final String AZKABAN_CLUSTER_ENV = "azkaban.cluster.env";
     public static final String AZKABAN_GLOBAL_PROPERTIES_EXT_PATH = "executor.global.properties";
@@ -334,6 +334,7 @@ public static class ConfigurationKeys {
     // Legacy configs section, new configs should follow the naming convention of azkaban.server.<rest of the name> for server configs.
 
     // Jetty server configurations.
+    public static final String JETTY_HOSTNAME = "jetty.hostname";
     public static final String JETTY_HEADER_BUFFER_SIZE = "jetty.headerBufferSize";
     public static final String JETTY_USE_SSL = "jetty.use.ssl";
     public static final String JETTY_SSL_PORT = "jetty.ssl.port";

File: azkaban-common/src/main/java/azkaban/executor/FlowStatusChangeEventListener.java
Patch:
@@ -15,6 +15,7 @@
  */
 package azkaban.executor;
 
+import static azkaban.Constants.ConfigurationKeys.JETTY_HOSTNAME;
 import static azkaban.Constants.EventReporterConstants;
 
 import azkaban.DispatchMethod;
@@ -68,7 +69,7 @@ public synchronized Map<String, String> getFlowMetaData(final ExecutableFlow flo
       // or else use jetty.hostname
       metaData.put(EventReporterConstants.AZ_WEBSERVER,
           props.getString(EventReporterConstants.AZ_WEBSERVER,
-          props.getString("jetty.hostname", "localhost")));
+          props.getString(JETTY_HOSTNAME, "localhost")));
     }
     metaData.put(EventReporterConstants.PROJECT_NAME, flow.getProjectName());
     metaData.put(EventReporterConstants.SUBMIT_USER, flow.getSubmitUser());

File: azkaban-common/src/main/java/azkaban/jmx/JmxJobCallback.java
Patch:
@@ -1,4 +1,4 @@
-package azkaban.execapp.jmx;
+package azkaban.jmx;
 
 import org.apache.http.impl.client.FutureRequestExecutionMetrics;
 

File: azkaban-common/src/main/java/azkaban/jmx/JmxJobCallbackMBean.java
Patch:
@@ -1,4 +1,4 @@
-package azkaban.execapp.jmx;
+package azkaban.jmx;
 
 import azkaban.jmx.DisplayName;
 

File: azkaban-common/src/main/java/azkaban/jmx/JmxJobMXBean.java
Patch:
@@ -1,4 +1,4 @@
-package azkaban.execapp.jmx;
+package azkaban.jmx;
 
 import azkaban.jmx.DisplayName;
 import java.util.Map;

File: azkaban-common/src/main/java/azkaban/project/ProjectEventListener.java
Patch:
@@ -7,6 +7,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
+import static azkaban.Constants.ConfigurationKeys.JETTY_HOSTNAME;
 import static azkaban.Constants.EventReporterConstants.AZ_WEBSERVER;
 import static azkaban.Constants.ConfigurationKeys.AZKABAN_WEBSERVER_EXTERNAL_HOSTNAME;
 
@@ -18,7 +19,7 @@ private Map<String, String> getProjectMetadata(final ProjectEvent event){
         final Props props = ServiceProvider.SERVICE_PROVIDER.getInstance(Props.class);
         // Set up properties not in eventData
         metaData.put(AZ_WEBSERVER, props.getString(AZKABAN_WEBSERVER_EXTERNAL_HOSTNAME,
-                props.getString("jetty.hostname", "localhost")));
+                props.getString(JETTY_HOSTNAME, "localhost")));
         metaData.put("projectLogEventType", event.getType().toString());
 
         // Fill up metaData with event specific data

File: azkaban-common/src/main/java/azkaban/server/AzkabanServer.java
Patch:
@@ -17,6 +17,7 @@
 
 import static azkaban.Constants.AZKABAN_PRIVATE_PROPERTIES_FILE;
 import static azkaban.Constants.AZKABAN_PROPERTIES_FILE;
+import static azkaban.Constants.ConfigurationKeys.JETTY_HOSTNAME;
 import static azkaban.Constants.ConfigurationKeys.JETTY_PORT;
 import static azkaban.Constants.ConfigurationKeys.JETTY_SSL_PORT;
 import static azkaban.Constants.ConfigurationKeys.JETTY_USE_SSL;
@@ -97,7 +98,7 @@ private static void updateDerivedConfigs(final Props azkabanSettings) {
         : azkabanSettings.getInt(JETTY_PORT, DEFAULT_PORT_NUMBER);
 
     // setting stats configuration for connectors
-    final String hostname = azkabanSettings.getString("jetty.hostname", "localhost");
+    final String hostname = azkabanSettings.getString(JETTY_HOSTNAME, "localhost");
     azkabanSettings.put("server.hostname", hostname);
     azkabanSettings.put("server.port", port);
     azkabanSettings.put("server.useSSL", String.valueOf(isSslEnabled));

File: azkaban-common/src/main/java/azkaban/utils/Emailer.java
Patch:
@@ -16,6 +16,7 @@
 
 package azkaban.utils;
 
+import static azkaban.Constants.ConfigurationKeys.JETTY_HOSTNAME;
 import static azkaban.Constants.EventReporterConstants.MODIFIED_BY;
 import static java.util.Objects.requireNonNull;
 
@@ -76,7 +77,7 @@ public Emailer(final Props props, final CommonMetrics commonMetrics,
     EmailMessage.setTotalAttachmentMaxSize(getAttachmentMaxSize());
 
     this.clientHostname = props.getString(ConfigurationKeys.AZKABAN_WEBSERVER_EXTERNAL_HOSTNAME,
-        props.getString("jetty.hostname", "localhost"));
+        props.getString(JETTY_HOSTNAME, "localhost"));
 
     if (props.getBoolean(ConfigurationKeys.JETTY_USE_SSL, true)) {
       this.scheme = HTTPS;

File: azkaban-common/src/test/java/azkaban/jobcallback/JobCallbackUtilTest.java
Patch:
@@ -1,4 +1,4 @@
-package azkaban.execapp.event;
+package azkaban.jobcallback;
 
 import static azkaban.jobcallback.JobCallbackConstants.CONTEXT_EXECUTION_ID_TOKEN;
 import static azkaban.jobcallback.JobCallbackConstants.CONTEXT_FLOW_TOKEN;
@@ -11,6 +11,7 @@
 
 import azkaban.jobcallback.JobCallbackConstants;
 import azkaban.jobcallback.JobCallbackStatusEnum;
+import azkaban.jobcallback.JobCallbackUtil;
 import azkaban.utils.Props;
 import java.net.URLEncoder;
 import java.util.HashMap;

File: azkaban-exec-server/src/main/java/azkaban/container/FlowContainer.java
Patch:
@@ -27,7 +27,7 @@
 import azkaban.cluster.ClusterModule;
 import azkaban.cluster.ClusterRouter;
 import azkaban.common.ExecJettyServerModule;
-import azkaban.common.ServerUtils;
+import azkaban.utils.ServerUtils;
 import azkaban.event.Event;
 import azkaban.event.EventListener;
 import azkaban.execapp.AbstractFlowPreparer;
@@ -38,9 +38,9 @@
 import azkaban.execapp.JobRunner;
 import azkaban.execapp.TriggerManager;
 import azkaban.execapp.event.FlowWatcher;
-import azkaban.execapp.event.JobCallbackManager;
+import azkaban.jobcallback.JobCallbackManager;
 import azkaban.execapp.event.RemoteFlowWatcher;
-import azkaban.execapp.jmx.JmxJobMBeanManager;
+import azkaban.jmx.JmxJobMBeanManager;
 import azkaban.executor.AlerterHolder;
 import azkaban.executor.ExecutableFlow;
 import azkaban.executor.ExecutionOptions;

File: azkaban-exec-server/src/test/java/azkaban/container/FlowContainerTest.java
Patch:
@@ -23,7 +23,7 @@
 import azkaban.execapp.AzkabanExecutorServerTest;
 import azkaban.execapp.FlowRunner;
 import azkaban.execapp.FlowRunner.FlowRunnerProxy;
-import azkaban.execapp.event.JobCallbackManager;
+import azkaban.jobcallback.JobCallbackManager;
 import azkaban.executor.ExecutableFlow;
 import azkaban.executor.ExecutorLoader;
 import azkaban.project.ProjectFileHandler;

File: azkaban-exec-server/src/test/java/azkaban/execapp/FlowRunnerTest.java
Patch:
@@ -28,11 +28,10 @@
 import static azkaban.Constants.EventReporterConstants.PROJECT_FILE_UPLOAD_USER;
 import static azkaban.Constants.EventReporterConstants.PROJECT_NAME;
 import static azkaban.Constants.EventReporterConstants.SLA_OPTIONS;
-import static azkaban.Constants.EventReporterConstants.SUBMIT_USER;
 import static azkaban.Constants.EventReporterConstants.VERSION_SET;
 
 import azkaban.Constants;
-import azkaban.common.ServerUtils;
+import azkaban.utils.ServerUtils;
 import azkaban.executor.ExecutableFlow;
 import azkaban.executor.ExecutableNode;
 import azkaban.executor.ExecutionOptions;

File: azkaban-exec-server/src/test/java/azkaban/execapp/FlowRunnerTest2.java
Patch:
@@ -16,6 +16,7 @@
 
 package azkaban.execapp;
 
+import static azkaban.Constants.ConfigurationKeys.AZKABAN_WEBSERVER_URL;
 import static org.junit.Assert.assertEquals;
 import static org.assertj.core.api.Assertions.assertThat;
 
@@ -103,7 +104,7 @@ public void testBasicRun() throws Exception {
     options.setFailureAction(FailureAction.FINISH_CURRENTLY_RUNNING);
 
     Props props = new Props();
-    props.put(JobRunner.AZKABAN_WEBSERVER_URL, "http://localhost:8443");
+    props.put(AZKABAN_WEBSERVER_URL, "http://localhost:8443");
 
     this.runner = this.testUtil.createFromFlowMap("jobf", options, flowParams, props);
 

File: azkaban-exec-server/src/test/java/azkaban/execapp/FlowRunnerTestUtil.java
Patch:
@@ -24,7 +24,7 @@
 import azkaban.DispatchMethod;
 import azkaban.event.Event;
 import azkaban.execapp.event.FlowWatcher;
-import azkaban.execapp.jmx.JmxJobMBeanManager;
+import azkaban.jmx.JmxJobMBeanManager;
 import azkaban.executor.AlerterHolder;
 import azkaban.executor.ExecutableFlow;
 import azkaban.executor.ExecutionOptions;

File: azkaban-common/src/main/java/azkaban/executor/container/ContainerCleanupManager.java
Patch:
@@ -126,7 +126,6 @@ public ContainerCleanupManager(final Props azkProps, final ExecutorLoader execut
         .put(Status.KILLING, new Pair<>(Duration.ofMinutes(maxKillingValidity), UPDATE_TIME))
         .put(Status.FAILED_FINISHING, new Pair<>(Duration.ofMinutes(runningFlowValidity), START_TIME))
         .build();
-
   }
 
   public void cleanUpStaleFlows() {

File: azkaban-common/src/main/java/azkaban/executor/container/watch/AzPodStatusExtractor.java
Patch:
@@ -22,6 +22,7 @@
 import io.kubernetes.client.openapi.models.V1ContainerStatus;
 import io.kubernetes.client.openapi.models.V1Pod;
 import io.kubernetes.client.openapi.models.V1PodCondition;
+import io.kubernetes.client.openapi.models.V1PodCondition.TypeEnum;
 import io.kubernetes.client.openapi.models.V1PodStatus;
 import io.kubernetes.client.util.Watch;
 import io.kubernetes.client.util.Watch.Response;
@@ -30,7 +31,6 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Optional;
-import java.util.stream.Collector;
 import java.util.stream.Collectors;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -180,7 +180,7 @@ private void extractConditions() {
     Map<String, V1PodCondition> conditionMap = new HashMap<>();
     this.podConditions.stream().forEach(
         condition ->
-            conditionMap.put(condition.getType(), condition));
+            conditionMap.put(condition.getType().toString(), condition));
   this.scheduledCondition =
       Optional.ofNullable(conditionMap.remove(PodCondition.PodScheduled.name()));
   this.containersReadyCondition =
@@ -225,7 +225,7 @@ private void extractConditionStatuses() {
   private void extractPhase() {
     requireNonNull(this.v1PodStatus.getPhase(), "pod status phase must not be null");
     // This will throw an IllegalArgumentException in case of an unexpected phase name.
-    this.podPhase = PodPhase.valueOf(this.v1PodStatus.getPhase());
+    this.podPhase = PodPhase.valueOf(String.valueOf(this.v1PodStatus.getPhase()));
   }
 
   /**

File: azkaban-common/src/test/java/azkaban/executor/container/watch/KubernetesWatchTest.java
Patch:
@@ -141,7 +141,7 @@ public void setUp() throws Exception {
   private KubernetesWatch kubernetesWatchWithMockListener() {
     Props azkProps = localProperties();
     ApiClient localApiClient = WatchUtils.createApiClient(azkProps);
-    return new KubernetesWatch(localApiClient, new AzPodStausExtractingListener(),
+    return new KubernetesWatch(azkProps, localApiClient, new AzPodStausExtractingListener(),
         WatchUtils.createPodWatchParams(azkProps)
     );
   }
@@ -501,7 +501,7 @@ public PreInitializedWatch(ApiClient apiClient,
         Watch<V1Pod> preInitPodWatch,
         PodWatchParams podWatchParams,
         int maxInitCount) {
-      super(apiClient, podWatchEventListener, podWatchParams);
+      super(new Props(), apiClient, podWatchEventListener, podWatchParams);
       requireNonNull(preInitPodWatch, "pre init pod watch must not be null");
       this.preInitPodWatch = preInitPodWatch;
       this.maxInitCount = maxInitCount;

File: azkaban-common/src/main/java/azkaban/executor/container/ContainerCleanupManager.java
Patch:
@@ -52,12 +52,12 @@
 @Singleton
 public class ContainerCleanupManager {
 
-  public static final int DEFAULT_AZKABAN_MAX_FLOW_RUNNING_MINS = -1;
   private static final Logger logger = LoggerFactory.getLogger(ContainerCleanupManager.class);
   private static final Duration DEFAULT_STALE_EXECUTION_CLEANUP_INTERVAL = Duration.ofMinutes(10);
   private static final Duration DEFAULT_STALE_CONTAINER_CLEANUP_INTERVAL = Duration.ofMinutes(60);
   private static final int DEFAULT_AZKABAN_MAX_FLOW_DISPATCHING_MINS = 10;
   private static final int DEFAULT_AZKABAN_MAX_FLOW_PREPARINGING_MINS = 15;
+  private static final int DEFAULT_AZKABAN_MAX_FLOW_RUNNING_MINS = 10 * 24 * 60; // 10 days
   private static final int DEFAULT_AZKABAN_MAX_FLOW_KILLING_MINS = 15;
   private static final int DEFAULT_AZKABAN_MAX_FLOW_EXEC_STOPPED_MINS = 15;
 

File: azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunnerManager.java
Patch:
@@ -988,8 +988,10 @@ private class CleanerThread extends Thread {
     private static final long RECENTLY_FINISHED_INTERVAL_MS = 2 * 60 * 1000;
     // Every 5 mins kill flows running longer than allowed max running time
     private static final long LONG_RUNNING_FLOW_KILLING_INTERVAL_MS = 5 * 60 * 1000;
+    // Kill flows running time longer than 10 days by default
+    private static final int DEFAULT_AZKABAN_MAX_FLOW_RUNNING_MINS = 10 * 24 * 60;
     private final long flowMaxRunningTimeInMins = FlowRunnerManager.this.azkabanProps.getInt(
-        Constants.ConfigurationKeys.AZKABAN_MAX_FLOW_RUNNING_MINS, -1);
+        Constants.ConfigurationKeys.AZKABAN_MAX_FLOW_RUNNING_MINS, DEFAULT_AZKABAN_MAX_FLOW_RUNNING_MINS);
     private boolean shutdown = false;
     private long lastRecentlyFinishedCleanTime = -1;
     private long lastLongRunningFlowCleanTime = -1;

File: az-core/src/main/java/azkaban/Constants.java
Patch:
@@ -241,6 +241,7 @@ public static class ConfigurationKeys {
     public static final String AZKABAN_EXECUTOR_HEALTHCHECK_INTERVAL_MIN = "azkaban.executor.healthcheck.interval.min";
     public static final String AZKABAN_EXECUTOR_MAX_FAILURE_COUNT = "azkaban.executor.max.failurecount";
     public static final String AZKABAN_ADMIN_ALERT_EMAIL = "azkaban.admin.alert.email";
+    public static final String AZKABAN_EXECUTOR_PING_TIMEOUT = "azkaban.executor.ping.timeout";
 
     // Configures Azkaban Flow Version in project YAML file
     public static final String AZKABAN_FLOW_VERSION = "azkaban-flow-version";

File: azkaban-common/src/main/java/azkaban/executor/AbstractExecutorManagerAdapter.java
Patch:
@@ -209,7 +209,7 @@ public Map<String, Object> callExecutorJMX(final String hostPort, final String a
 
     final String[] hostPortSplit = hostPort.split(":");
     return this.apiGateway.callForJsonObjectMap(hostPortSplit[0],
-        Integer.valueOf(hostPortSplit[1]), "/jmx", null, paramList);
+        Integer.valueOf(hostPortSplit[1]), "/jmx", null, Optional.empty(), paramList);
   }
 
   /**
@@ -235,7 +235,7 @@ public Map<String, Object> callExecutorStats(final int executorId, final String
         .add(new Pair<>(ConnectorParams.ACTION_PARAM, action));
 
     return this.apiGateway.callForJsonObjectMap(executor.getHost(), executor.getPort(),
-        "/stats", null, paramList);
+        "/stats", null, Optional.empty(), paramList);
   }
 
   @Override

File: azkaban-common/src/main/java/azkaban/executor/ExecutorManager.java
Patch:
@@ -201,7 +201,9 @@ private void refreshExecutors() {
       final Future<ExecutorInfo> fetchExecutionInfo =
           this.executorInfoRefresherService.submit(
               () -> this.apiGateway.callForJsonType(executor.getHost(),
-                  executor.getPort(), "/serverStatistics", DispatchMethod.PUSH, null, ExecutorInfo.class));
+                  executor.getPort(), "/serverStatistics", DispatchMethod.PUSH, Optional.empty(),
+                  null,
+                  ExecutorInfo.class));
       futures.add(new Pair<>(executor,
           fetchExecutionInfo));
     }

File: azkaban-common/src/test/java/azkaban/executor/ContainerizedDispatchManagerTest.java
Patch:
@@ -58,6 +58,7 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.Optional;
 import javax.annotation.concurrent.NotThreadSafe;
 import org.junit.After;
 import org.junit.Assert;
@@ -591,7 +592,8 @@ public URI buildExecutorUri(String host, int port, String path,
     }
 
     @Override
-    public String httpPost(URI uri, List<Pair<String, String>> params)
+    public String httpPost(URI uri, Optional<Integer> httpTimeout,
+        List<Pair<String, String>> params)
         throws IOException {
       this.lastHttpPostUri = uri;
       this.lastHttpPostParams = params;

File: azkaban-common/src/test/java/azkaban/executor/ExecutorApiGatewaySystemTest.java
Patch:
@@ -6,6 +6,7 @@
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
+import java.util.Optional;
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Ignore;
@@ -60,7 +61,8 @@ private void updateExecutions(final int count) throws ExecutorManagerException {
             JSONUtils.toJSON(updateTimesList));
 
     final Map<String, Object> results = this.apiGateway.callWithExecutionId("localhost", 12321,
-        ConnectorParams.UPDATE_ACTION, null, null, null, executionIds, updateTimes);
+        ConnectorParams.UPDATE_ACTION, null, null, null, Optional.empty(),
+        executionIds, updateTimes);
 
     Assert.assertTrue(results != null);
     final List<Map<String, Object>> executionUpdates =

File: azkaban-exec-server/src/test/java/azkaban/common/ExecJettyServerModuleTest.java
Patch:
@@ -31,6 +31,7 @@
 import azkaban.executor.ExecutorApiClientTest.SimpleServlet;
 import azkaban.utils.Props;
 import java.net.URI;
+import java.util.Optional;
 import org.junit.Assert;
 import org.junit.Test;
 import org.mortbay.jetty.Server;
@@ -67,7 +68,7 @@ public void testSslDisabledJettyServer() throws Exception {
     final ExecutorApiClient tlsDisabledClient = new ExecutorApiClient(new Props());
     final String postResponse = tlsDisabledClient
         .doPost(new URI(SimpleServlet.TLS_DISABLED_URI), DispatchMethod.CONTAINERIZED,
-            null);
+            Optional.empty(),null);
     Assert.assertEquals(SimpleServlet.POST_RESPONSE_STRING, postResponse);
     jettyServer.stop();
   }
@@ -106,7 +107,7 @@ public void testSslEnabledJettyServer() throws Exception {
     final ExecutorApiClient tlsEnabledClient = new ExecutorApiClient(clientProps);
     final String postResponse = tlsEnabledClient
         .doPost(new URI(SimpleServlet.TLS_ENABLED_URI), DispatchMethod.CONTAINERIZED,
-            null);
+            Optional.empty(),null);
     Assert.assertEquals(SimpleServlet.POST_RESPONSE_STRING, postResponse);
     jettyServer.stop();
   }

File: azkaban-common/src/main/java/azkaban/executor/container/ContainerCleanupManager.java
Patch:
@@ -138,7 +138,7 @@ public void cleanUpStaleFlows(final Status status) {
       Status originalStatus = flow.getStatus();
       cancelFlowQuietly(flow, originalStatus);
       retryFlowQuietly(flow, originalStatus);
-      deleteContainerQuietly(flow.getExecutionId());
+      deleteContainerQuietly(flow);
     }
   }
 
@@ -199,9 +199,9 @@ private void retryFlowQuietly(ExecutableFlow flow, Status originalStatus) {
   // for Kubernetes as it's declarative API will only submit the request for deleting container
   // resources. In future we can consider making this async to eliminate any chance of the cleanup
   // thread getting blocked.
-  private void deleteContainerQuietly(final int executionId) {
+  private void deleteContainerQuietly(final ExecutableFlow flow) {
     try {
-      this.containerizedImpl.deleteContainer(executionId);
+      this.containerizedImpl.deleteContainer(flow);
     } catch (final ExecutorManagerException eme) {
       logger.error("ExecutorManagerException while deleting container.", eme);
     } catch (final RuntimeException re) {

File: azkaban-common/src/main/java/azkaban/executor/container/ContainerizedImpl.java
Patch:
@@ -15,9 +15,10 @@
  */
 package azkaban.executor.container;
 
+import azkaban.executor.ExecutableFlow;
 import azkaban.executor.ExecutorManagerException;
 
 public interface ContainerizedImpl {
   void createContainer(final int executionId) throws ExecutorManagerException;
-  void deleteContainer(final int executionId) throws ExecutorManagerException;
+  void deleteContainer(final ExecutableFlow flow) throws ExecutorManagerException;
 }

File: azkaban-common/src/test/java/azkaban/executor/container/ContainerCleanupManagerTest.java
Patch:
@@ -92,7 +92,6 @@ public void testExceptionInFetchingExecutions() throws Exception {
     verifyZeroInteractions(this.containerImpl);
   }
 
-  @Ignore
   @Test
   public void testCleanUpPreparingFlows() throws Exception {
     ArrayList<ExecutableFlow> executableFlows = new ArrayList<>();
@@ -122,7 +121,7 @@ public void testCleanUpPreparingFlows() throws Exception {
     this.cleaner.cleanUpStaleFlows(Status.PREPARING);
     TimeUnit.MILLISECONDS.sleep(10);
     Assert.assertEquals(Status.KILLED, flow.getStatus());
-    verify(this.containerImpl).deleteContainer(flow.getExecutionId());
+    verify(this.containerImpl).deleteContainer(flow);
     // Verify that the flow is indeed retried.
     verify(onExecutionEventListener).onExecutionEvent(flow, Constants.RESTART_FLOW);
   }

File: azkaban-common/src/test/java/azkaban/executor/container/KubernetesContainerizedImplTest.java
Patch:
@@ -121,7 +121,7 @@ public class KubernetesContainerizedImplTest {
   private static final String MAX_ALLOWED_MEMORY = "32Gi";
   public static final String DEPENDENCY1 = "dependency1";
   public static final int CPU_LIMIT_MULTIPLIER = 1;
-  public static final int MEMORY_LIMIT_MULTIPLIER = 2;
+  public static final int MEMORY_LIMIT_MULTIPLIER = 1;
   private static Converter<ImageTypeDTO, ImageTypeDTO,
       ImageType> imageTypeConverter;
   private static Converter<ImageVersionDTO, ImageVersionDTO,

File: az-core/src/main/java/azkaban/Constants.java
Patch:
@@ -726,6 +726,8 @@ public static class ImageMgmtConstants {
     public static final String VERSION_STATE = "versionState";
     public static final String ID_KEY = "id";
     public static final String IMAGE_RAMPUP_PLAN = "imageRampupPlan";
+    public static final String IMAGE_UPDATE_ADD_USER = "addImageOwners";
+    public static final String IMAGE_UPDATE_REMOVE_USER = "removeImageOwners";
   }
 
   public static class FlowParameters {

File: azkaban-common/src/main/java/azkaban/imagemgmt/dto/ImageTypeDTO.java
Patch:
@@ -65,6 +65,7 @@ public List<ImageOwnershipDTO> getOwnerships() {
   }
 
   public void setOwnerships(final List<ImageOwnershipDTO> ownerships) {
-    this.ownerships = ownerships;
+            ownerships.forEach(o -> o.setName(getName()));
+            this.ownerships = ownerships;
   }
 }

File: azkaban-common/src/main/java/azkaban/executor/container/KubernetesContainerizedImpl.java
Patch:
@@ -563,7 +563,7 @@ V1PodSpec createPodSpec(final int executionId, final VersionSet versionSet,
     // Get CPU and memory requested for a flow container
     final String flowContainerCPURequest = getFlowContainerCPURequest(flowParam);
     final String flowContainerMemoryRequest = getFlowContainerMemoryRequest(flowParam);
-
+    logger.info("Creating pod for execution-id: " + executionId);
     final AzKubernetesV1SpecBuilder v1SpecBuilder =
         new AzKubernetesV1SpecBuilder(this.clusterEnv, Optional.empty())
             .addFlowContainer(this.flowContainerName,

File: azkaban-common/src/main/java/azkaban/jobExecutor/ProcessJob.java
Patch:
@@ -248,8 +248,10 @@ public void run() throws Exception {
             String.format("Not permitted to proxy as '%s' through Azkaban", effectiveUser)
         );
       }
+
       // Set parent directory permissions to <uid>:azkaban so user can write in their execution directory
-      // if the directory is not permissioned correctly already (should happen once per execution)
+      // if the directory does not have correct permission already (should happen once per
+      // execution)
       if (!canWriteInCurrentWorkingDirectory(effectiveUser)) {
         info("Changing current working directory ownership");
         assignUserFileOwnership(effectiveUser, getWorkingDirectory());

File: azkaban-common/src/main/java/azkaban/executor/container/KubernetesContainerizedImpl.java
Patch:
@@ -613,7 +613,7 @@ String getFlowContainerCPURequest(final Map<String, String> flowParam) {
       userCPURequest = this.cpuRequest;
     }
     this.cpuLimit = getResourceLimitFromResourceRequest(userCPURequest, this.cpuRequest,
-        DEFAULT_CPU_LIMIT_MULTIPLIER);
+        this.cpuLimitMultiplier);
     return userCPURequest;
   }
 
@@ -641,7 +641,7 @@ String getFlowContainerMemoryRequest(final Map<String, String> flowParam) {
       userMemoryRequest = this.memoryRequest;
     }
     this.memoryLimit = getResourceLimitFromResourceRequest(userMemoryRequest, this.memoryRequest,
-        DEFAULT_MEMORY_LIMIT_MULTIPLIER);
+        this.memoryLimitMultiplier);
     return userMemoryRequest;
   }
 

File: azkaban-common/src/test/java/azkaban/executor/ContainerizedDispatchManagerTest.java
Patch:
@@ -549,7 +549,7 @@ public void testRestartFlow() throws Exception {
         this.containerizedDispatchManager.getExecutionDispatcher(this.flow1.getExecutionId()));
     thread.start();
     synchronized (thread) {
-      thread.wait();
+      thread.join();
     }
     assertThat(flow1.getStatus()).isEqualTo(Status.FAILED);
     verify(onExecutionEventListener).onExecutionEvent(this.flow1, Constants.RESTART_FLOW);

File: azkaban-common/src/main/java/azkaban/executor/ExecutableFlow.java
Patch:
@@ -491,6 +491,9 @@ public void setFlowPropsAndParams(final ProjectLoader projectLoader) {
         FlowLoaderUtils.loadPropsFromYamlFile(projectLoader, this, null) :
         projectLoader.fetchProjectProperty(projectId, version, Constants.PARAM_OVERRIDE_FILE);
 
+    if (null == props) {
+      return;
+    }
     // Clone the props object and filter out the properties to keep only the override ones.
     Map<String, String> flowOverridePropsMap = Props.clone(props).getMapByPrefix(PARAM_OVERRIDE);
 

File: azkaban-common/src/main/java/azkaban/executor/JdbcExecutorLoader.java
Patch:
@@ -86,7 +86,9 @@ public void updateExecutableFlow(final ExecutableFlow flow)
   public ExecutableFlow fetchExecutableFlow(final int id)
       throws ExecutorManagerException {
     final ExecutableFlow flow = this.executionFlowDao.fetchExecutableFlow(id);
-    flow.setFlowPropsAndParams(this.projectLoader);
+    if (null != flow) {
+      flow.setFlowPropsAndParams(this.projectLoader);
+    }
     return flow;
   }
 

File: azkaban-common/src/test/java/azkaban/executor/MockExecutorLoader.java
Patch:
@@ -22,6 +22,7 @@
 import azkaban.utils.FileIOUtils.LogData;
 import azkaban.utils.Pair;
 import azkaban.utils.Props;
+import com.google.common.collect.ImmutableMap;
 import java.io.File;
 import java.io.IOException;
 import java.time.Duration;
@@ -450,7 +451,8 @@ public List<Pair<ExecutionReference, ExecutableFlow>> fetchQueuedFlows(Status st
   }
 
   @Override
-  public List<ExecutableFlow> fetchStaleFlowsForStatus(final Status status)
+  public List<ExecutableFlow> fetchStaleFlowsForStatus(final Status status,
+      final ImmutableMap<Status, Pair<Duration, String>> validityMap)
       throws ExecutorManagerException {
     throw new ExecutorManagerException("Method Not Implemented!");
   }

File: azkaban-common/src/main/java/azkaban/executor/container/ContainerCleanupManager.java
Patch:
@@ -95,7 +95,7 @@ public void cleanUpStaleFlows(final Status status) {
     }
     for (final ExecutableFlow flow : staleFlows) {
       if (shouldIgnore(flow, status)) {
-        return;
+        continue;
       }
       logger.info("Cleaning up stale flow " + flow.getExecutionId() + " in state " + status.name());
       cancelFlowQuietly(flow);

File: azkaban-web-server/src/main/java/azkaban/imagemgmt/servlets/ImageVersionServlet.java
Patch:
@@ -199,8 +199,7 @@ private void handleCreateImageVersion(final HttpServletRequest req,
 
   private void handleUpdateImageVersion(final HttpServletRequest req,
       final HttpServletResponse resp, final Session session,
-      final Map<String, String> templateVariableToValue) throws ServletException,
-      IOException {
+      final Map<String, String> templateVariableToValue) throws IOException {
     try {
       final String idString = templateVariableToValue.get(IMAGE_VERSION_ID_KEY);
       final Integer id = Ints.tryParse(idString);

File: az-core/src/main/java/azkaban/Constants.java
Patch:
@@ -150,6 +150,9 @@ public class Constants {
   // Flow restart action on EXECUTION_STOPPED
   public static final String RESTART_FLOW = "Restart Flow";
 
+  // Overridable plugin load properties
+  public static final String AZ_PLUGIN_LOAD_OVERRIDE_PROPS = "azkaban.plugin.load.override.props";
+
   // Azkaban event reporter constants
   public static class EventReporterConstants {
 

File: azkaban-exec-server/src/main/java/azkaban/container/FlowContainer.java
Patch:
@@ -212,7 +212,8 @@ public FlowContainer(final Props props,
         new JobTypeManager(
             this.azKabanProps.getString(AzkabanExecutorServer.JOBTYPE_PLUGIN_DIR,
                 PluginManager.JOBTYPE_DEFAULTDIR),
-            this.globalProps, getClass().getClassLoader(), clusterRouter);
+            this.globalProps, getClass().getClassLoader(), clusterRouter,
+            this.azKabanProps.getString(Constants.AZ_PLUGIN_LOAD_OVERRIDE_PROPS, null));
 
     this.numJobThreadPerFlow = props.getInt(JOB_THREAD_COUNT, DEFAULT_JOB_TREAD_COUNT);
     if (this.azKabanProps.getBoolean(Constants.USE_IN_MEMORY_KEYSTORE,

File: azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunnerManager.java
Patch:
@@ -229,7 +229,8 @@ public FlowRunnerManager(final Props props,
     this.jobtypeManager =
         new JobTypeManager(props.getString(AzkabanExecutorServer.JOBTYPE_PLUGIN_DIR,
             Constants.PluginManager.JOBTYPE_DEFAULTDIR), this.globalProps,
-            getClass().getClassLoader(), this.clusterRouter);
+            getClass().getClassLoader(), this.clusterRouter,
+            props.getString(Constants.AZ_PLUGIN_LOAD_OVERRIDE_PROPS, null));
 
     ProjectCacheCleaner cleaner = null;
     this.LOGGER.info("Configuring Project Cache");

File: azkaban-common/src/main/java/azkaban/imagemgmt/rampup/ImageRampupManager.java
Patch:
@@ -46,7 +46,7 @@ public Map<String, VersionInfo> getVersionForAllImageTypes(ExecutableFlow flow)
    * @throws ImageMgmtException
    */
   public Map<String, VersionInfo> getVersionByImageTypes(ExecutableFlow flow,
-      Set<String> imageTypes)
+      Set<String> imageTypes, Set<String> overlayImageTypes)
       throws ImageMgmtException;
 
   /**

File: azkaban-common/src/main/java/azkaban/executor/container/ContainerizedDispatchManager.java
Patch:
@@ -432,6 +432,7 @@ public void run() {
           dsFlow.setStatus(Status.FAILED);
           dsFlow.setUpdateTime(System.currentTimeMillis());
           ContainerizedDispatchManager.this.executorLoader.updateExecutableFlow(dsFlow);
+          ContainerizedDispatchManager.this.containerizationMetrics.markContainerDispatchFail();
           // Emit failed flow event
           ContainerizedDispatchManager.this.fireEventListeners(Event.create(dsFlow, EventType.FLOW_STATUS_CHANGED,
               new EventData(dsFlow)));

File: azkaban-common/src/test/java/azkaban/executor/container/watch/KubernetesWatchTest.java
Patch:
@@ -113,6 +113,7 @@ public class KubernetesWatchTest {
       AzPodStatus.AZ_POD_COMPLETED);
 
   private ApiClient defaultApiClient;
+  private ContainerizationMetrics containerizationMetrics = new DummyContainerizationMetricsImpl();
 
   @Before
   public void setUp() throws Exception {
@@ -166,7 +167,7 @@ private ExecutableFlow createExecutableFlow(int executionId,
 
   private FlowStatusManagerListener flowStatusUpdatingListener(Props azkProps) {
     return new FlowStatusManagerListener(azkProps, mockedContainerizedImpl(),
-        mockedExecutorLoader(), mock(AlerterHolder.class));
+        mockedExecutorLoader(), mock(AlerterHolder.class), containerizationMetrics);
   }
 
   private AzPodStatusDrivingListener statusDriverWithListener(AzPodStatusListener listener) {

File: azkaban-web-server/src/main/java/azkaban/webapp/AzkabanWebServerModule.java
Patch:
@@ -230,8 +230,9 @@ private AzPodStatusListener createFlowPodMonitoringListener(
       final Props azkProps,
       final ContainerizedImpl containerizedImpl,
       final ExecutorLoader executorLoader,
-      final AlerterHolder alerterHolder) {
-    return new FlowStatusManagerListener(azkProps, containerizedImpl, executorLoader, alerterHolder);
+      final AlerterHolder alerterHolder, final ContainerizationMetrics containerizationMetrics) {
+    return new FlowStatusManagerListener(azkProps, containerizedImpl, executorLoader, alerterHolder,
+        containerizationMetrics);
   }
 
   @Inject

File: azkaban-common/src/main/java/azkaban/project/InMemoryProjectCache.java
Patch:
@@ -115,7 +115,7 @@ public Optional<Project> getProjectByName(final String key) {
   public Optional<Project> getProjectById(final Integer key) throws ProjectManagerException {
     Project project = this.projectsById.get(key);
     if (project == null) {
-      logger.error("Project not found in cache, fetching from DB");
+      logger.info("Project with ID " + key + " not found in cache, fetching from DB");
       project = fetchProjectById(key);
     }
     return Optional.ofNullable(project);

File: azkaban-exec-server/src/test/java/azkaban/execapp/FlowRunnerTest.java
Patch:
@@ -352,7 +352,6 @@ public void flowEventMetadata() throws Exception {
             flowMetadata.get(AZ_WEBSERVER));
     Assert.assertEquals("Event metadata not created as expected.", "unknown",
             flowMetadata.get(AZ_HOST));
-    Assert.assertNull("Event metadata not created as expected.", flowMetadata.get(SUBMIT_USER));
     Assert.assertEquals("Event metadata not created as expected.", "test",
             flowMetadata.get(PROJECT_NAME));
     Assert.assertEquals("Event metadata not created as expected.", "derived-member-data",

File: azkaban-exec-server/src/test/java/azkaban/execapp/FlowRunnerTestUtil.java
Patch:
@@ -200,6 +200,7 @@ public FlowRunner createFromFlowFile(final String flowName,
       throws Exception {
     final ExecutableFlow exFlow = FlowRunnerTestUtil
         .prepareExecDir(this.workingDir, this.projectDir, flowName, 1);
+    exFlow.setSubmitUser("submitUser");
     exFlow.setDispatchMethod(DispatchMethod.POLL);
     if (watcher != null) {
       options.setPipelineLevel(pipeline);
@@ -243,6 +244,7 @@ public FlowRunner createFromFlowMap(final EventCollectorListener eventCollector,
     LOG.info("Creating a FlowRunner for flow '" + flowName + "'");
     final Flow flow = this.flowMap.get(flowName);
     final ExecutableFlow exFlow = new ExecutableFlow(this.project, flow);
+    exFlow.setSubmitUser("submitUser");
     return createFromExecutableFlow(eventCollector, exFlow, options, flowParams,
         azkabanProps);
   }

File: azkaban-common/src/main/java/azkaban/metrics/ContainerizationMetricsImpl.java
Patch:
@@ -26,8 +26,6 @@
 /**
  * Class implements ContainerMetrics and emit metrics for containerized executions
  */
-//Todo haqin: setup timeToDispatch, flowSubmitToExecutor, flowSubmitToContainer, implement
-//corresponding methods
 public class ContainerizationMetricsImpl implements ContainerizationMetrics {
 
   private static final Logger logger = LoggerFactory.getLogger(ContainerizationMetricsImpl.class);
@@ -53,6 +51,9 @@ public void setUp() {
     this.podReady = this.metricsManager.addMeter("Pod-Ready-Meter");
     this.podInitFailure = this.metricsManager.addMeter("Pod-Init-Failure-Meter");
     this.podAppFailure = this.metricsManager.addMeter("Pod-App-Failure-Meter");
+    this.flowSubmitToExecutor = this.metricsManager.addMeter("Flow-Submit-To-Executor-Meter");
+    this.flowSubmitToContainer = this.metricsManager.addMeter("Flow-Submit-To-Container-Meter");
+    this.timeToDispatch = this.metricsManager.addHistogram("Time-To-Dispatch-Pod-Histogram");
   }
 
   @Override

File: azkaban-common/src/test/java/azkaban/executor/ContainerizedDispatchManagerTest.java
Patch:
@@ -312,7 +312,6 @@ public void testSubmitFlows() throws Exception {
   @Test
   public void testSubmitFlowsExceedingMaxConcurrentRuns() throws Exception {
     initializeContainerizedDispatchImpl();
-    this.containerizedDispatchManager.disableQueueProcessorThread();
     this.props.put(ConfigurationKeys.CONCURRENT_RUNS_ONEFLOW_WHITELIST, "exectest1,"
         + "exec2,3");
     submitFlow(this.flow2, this.ref2);
@@ -326,7 +325,6 @@ public void testSubmitFlowsExceedingMaxConcurrentRuns() throws Exception {
   @Test
   public void testSubmitFlowsConcurrentWhitelist() throws Exception {
     initializeContainerizedDispatchImpl();
-    this.containerizedDispatchManager.disableQueueProcessorThread();
     this.props.put(Constants.ConfigurationKeys.MAX_CONCURRENT_RUNS_ONEFLOW, 1);
     submitFlow(this.flow2, this.ref2);
     submitFlow(this.flow3, this.ref3);
@@ -369,6 +367,7 @@ public void testSetFlowLock() throws Exception {
   @Test
   public void testDisablingQueueProcessThread() throws Exception {
     initializeContainerizedDispatchImpl();
+    this.containerizedDispatchManager.start();
     Assert.assertEquals(this.containerizedDispatchManager.isQueueProcessorThreadActive(), true);
     this.containerizedDispatchManager.disableQueueProcessorThread();
     Assert.assertEquals(this.containerizedDispatchManager.isQueueProcessorThreadActive(), false);
@@ -379,6 +378,7 @@ public void testDisablingQueueProcessThread() throws Exception {
   @Test
   public void testEnablingQueueProcessThread() throws Exception {
     initializeContainerizedDispatchImpl();
+    this.containerizedDispatchManager.start();
     this.containerizedDispatchManager.disableQueueProcessorThread();
     Assert.assertEquals(this.containerizedDispatchManager.isQueueProcessorThreadActive(), false);
     this.containerizedDispatchManager.enableQueueProcessorThread();
@@ -407,7 +407,6 @@ private void initializeContainerizedDispatchImpl() throws Exception{
         this.commonMetrics,
         this.apiGateway, this.containerizedImpl, null, null, this.eventListener,
             this.containerizationMetrics);
-    this.containerizedDispatchManager.start();
   }
 
   @Test

File: azkaban-common/src/main/java/azkaban/executor/ExecutorManager.java
Patch:
@@ -89,7 +89,7 @@ public ExecutorManager(final Props azkProps, final ExecutorLoader executorLoader
       final ExecutorManagerUpdaterStage updaterStage,
       final ExecutionFinalizer executionFinalizer,
       final RunningExecutionsUpdaterThread updaterThread) {
-    super(azkProps, executorLoader, commonMetrics, apiGateway, null);
+    super(azkProps, executorLoader, commonMetrics, apiGateway, null, new DummyEventListener());
     this.runningExecutions = runningExecutions;
     this.activeExecutors = activeExecutors;
     this.updaterStage = updaterStage;

File: azkaban-exec-server/src/test/java/azkaban/execapp/FlowRunnerTest.java
Patch:
@@ -369,7 +369,7 @@ public void flowEventMetadata() throws Exception {
         flowMetadata.get(SLA_OPTIONS));
     Assert.assertEquals("Event metadata not created as expected",
         ServerUtils.getVersionSetJsonString(versionSet), flowMetadata.get(VERSION_SET)); // Checks version set
-    Assert.assertEquals("Event metadata not created as expected", "KUBERNETES",
+    Assert.assertEquals("Event metadata not created as expected", "BAREMETAL",
         flowMetadata.get(EXECUTOR_TYPE)); // Checks executor type
   }
 

File: azkaban-web-server/src/test/java/azkaban/webapp/servlet/ExecutorServletTest.java
Patch:
@@ -19,6 +19,7 @@
 import static org.junit.Assert.fail;
 
 import azkaban.executor.container.ContainerizedDispatchManager;
+import azkaban.executor.DummyEventListener;
 import azkaban.sla.SlaAction;
 import azkaban.sla.SlaOption;
 import azkaban.sla.SlaType;
@@ -129,7 +130,7 @@ public void postAjaxFlowInfoErrorFetching() throws Exception {
   @Test
   public void testPostAjaxUpdateProperty() throws Exception {
     ContainerizedDispatchManager containerizedDispatchManager = new ContainerizedDispatchManager(
-        new Props(), null, null, null, null, null, null);
+        new Props(), null, null, null, null, null, null, new DummyEventListener());
     Mockito.when(this.azkabanWebServer.getExecutorManager())
         .thenReturn(containerizedDispatchManager);
     this.executorServlet.init(this.servletConfig);

File: az-core/src/main/java/azkaban/Constants.java
Patch:
@@ -646,8 +646,6 @@ public static class ContainerizedDispatchManagerProperties {
     // Kubernetes Watch related properties
     public static final String KUBERNETES_WATCH_PREFIX = AZKABAN_KUBERNETES_PREFIX + "watch.";
     public static final String KUBERNETES_WATCH_ENABLED = KUBERNETES_WATCH_PREFIX + "enabled";
-    public static final String KUBERNETES_WATCH_DRIVER_THREAD_POOL_SIZE =
-        KUBERNETES_WATCH_PREFIX + "driver.threadpool.size";
     public static final String KUBERNETES_WATCH_EVENT_CACHE_MAX_ENTRIES =
         KUBERNETES_WATCH_PREFIX + "cache.max.entries";
 

File: az-core/src/main/java/azkaban/Constants.java
Patch:
@@ -646,6 +646,8 @@ public static class ContainerizedDispatchManagerProperties {
     public static final String KUBERNETES_WATCH_ENABLED = KUBERNETES_WATCH_PREFIX + "enabled";
     public static final String KUBERNETES_WATCH_DRIVER_THREAD_POOL_SIZE =
         KUBERNETES_WATCH_PREFIX + "driver.threadpool.size";
+    public static final String KUBERNETES_WATCH_EVENT_CACHE_MAX_ENTRIES =
+        KUBERNETES_WATCH_PREFIX + "cache.max.entries";
 
     // Periodicity of lookup and cleanup of stale executions.
     public static final String CONTAINERIZED_STALE_EXECUTION_CLEANUP_INTERVAL_MIN =

File: azkaban-common/src/test/java/azkaban/executor/ContainerizedDispatchManagerTest.java
Patch:
@@ -381,7 +381,7 @@ private void initializeContainerizedDispatchImpl() throws Exception{
     this.containerizedDispatchManager =
         new ContainerizedDispatchManager(this.props, this.loader,
         this.commonMetrics,
-        this.apiGateway, this.containerizedImpl, null);
+        this.apiGateway, this.containerizedImpl, null, null);
     this.containerizedDispatchManager.start();
   }
 
@@ -463,7 +463,7 @@ private ContainerizedDispatchManager createDispatchWithGateway(ExecutorApiGatewa
       Props containerEnabledProps) throws Exception {
     ContainerizedDispatchManager dispatchManager =
         new ContainerizedDispatchManager(containerEnabledProps, this.loader,
-            this.commonMetrics, apiGateway, this.containerizedImpl, null);
+            this.commonMetrics, apiGateway, this.containerizedImpl,null, null);
     dispatchManager.start();
     return dispatchManager;
   }

File: azkaban-web-server/src/test/java/azkaban/webapp/servlet/ExecutorServletTest.java
Patch:
@@ -129,7 +129,7 @@ public void postAjaxFlowInfoErrorFetching() throws Exception {
   @Test
   public void testPostAjaxUpdateProperty() throws Exception {
     ContainerizedDispatchManager containerizedDispatchManager = new ContainerizedDispatchManager(
-        new Props(), null, null, null, null, null);
+        new Props(), null, null, null, null, null, null);
     Mockito.when(this.azkabanWebServer.getExecutorManager())
         .thenReturn(containerizedDispatchManager);
     this.executorServlet.init(this.servletConfig);

File: azkaban-common/src/main/java/azkaban/container/models/AzKubernetesV1SpecBuilder.java
Patch:
@@ -122,7 +122,7 @@ public AzKubernetesV1SpecBuilder addFlowContainer(String name, String image, Ima
      */
     public AzKubernetesV1SpecBuilder addJobType(String name, String image, ImagePullPolicy imagePullPolicy, String initMountPath, String appMountPath) {
         LOGGER.info("Creating spec objects for jobType " + name);
-        String jobTypeVolumeName = JOBTYPE_VOLUME_PREFIX + name;
+        String jobTypeVolumeName = JOBTYPE_VOLUME_PREFIX + name.toLowerCase();
         V1Volume jobTypeVolume = new V1VolumeBuilder()
                 .withName(jobTypeVolumeName)
                 .withNewEmptyDir()
@@ -144,7 +144,7 @@ public AzKubernetesV1SpecBuilder addJobType(String name, String image, ImagePull
                 .build();
         LOGGER.debug("Created volume mount object to app container " + appMountPath);
         V1Container initContainer = new V1ContainerBuilder()
-                .withName(JOBTYPE_INIT_PREFIX + name)
+                .withName(JOBTYPE_INIT_PREFIX + name.toLowerCase())
                 .addToEnv(this.azClusterName, jobTypeMountPath)
                 .withImagePullPolicy(imagePullPolicy.getPolicyVal())
                 .withImage(image)

File: azkaban-common/src/main/java/azkaban/executor/container/KubernetesContainerizedImpl.java
Patch:
@@ -103,6 +103,7 @@ public class KubernetesContainerizedImpl implements ContainerizedImpl {
   public static final String CLUSTER_LABEL_NAME = "cluster";
   public static final String APP_LABEL_NAME = "app";
   public static final String EXECUTION_ID_LABEL_NAME = "execution-id";
+  public static final String EXECUTION_ID_LABEL_PREFIX = "execid-";
 
   private final String namespace;
   private final ApiClient client;
@@ -714,7 +715,7 @@ private String getAzkabanConfigVersion(final VersionSet versionSet) {
   private ImmutableMap getLabelsForPod(final int executionId) {
     final ImmutableMap.Builder mapBuilder = ImmutableMap.builder();
     mapBuilder.put(CLUSTER_LABEL_NAME, this.clusterName);
-    mapBuilder.put(EXECUTION_ID_LABEL_NAME, executionId);
+    mapBuilder.put(EXECUTION_ID_LABEL_NAME, EXECUTION_ID_LABEL_PREFIX + executionId);
     mapBuilder.put(APP_LABEL_NAME, POD_APPLICATION_TAG);
 
     // Note that the service label must match the selector used for the corresponding service

File: azkaban-common/src/main/java/azkaban/executor/container/ContainerizedDispatchManager.java
Patch:
@@ -322,7 +322,7 @@ public void run() {
         //is not able read template files, unable to parse files, unable to replace dynamic
         //variables etc.
         ContainerizedDispatchManager.this.containerizedImpl.createContainer(executionId);
-        logger.info("Time taken to dispatch a container for {} is {}", executionId,
+        logger.info("Time taken to dispatch a container for {} is {} seconds", executionId,
             (System.currentTimeMillis() - startTime) / 1000);
       } catch (ExecutorManagerException e) {
         logger.info("Unable to dispatch container in Kubernetes for : {}", executionId);

File: azkaban-common/src/main/java/azkaban/executor/container/KubernetesContainerizedImpl.java
Patch:
@@ -575,7 +575,9 @@ void setupPodEnvVariables(final Map<String, String> envVariables,
     if (flowParam != null && !flowParam.isEmpty()) {
       flowParam.forEach((k, v) -> {
         if (k.startsWith(FlowParameters.FLOW_PARAM_POD_ENV_VAR)) {
-          envVariables.put(StringUtils.removeStart(k, FlowParameters.FLOW_PARAM_POD_ENV_VAR), v);
+          envVariables
+              .put(StringUtils.removeStart(k, FlowParameters.FLOW_PARAM_POD_ENV_VAR).toUpperCase(),
+                  v);
         }
       });
     }

File: azkaban-common/src/main/java/azkaban/executor/container/ContainerizedDispatchManager.java
Patch:
@@ -139,7 +139,7 @@ public DispatchMethod getDispatchMethod() {
 
   @Override
   public DispatchMethod getDispatchMethod(final ExecutableFlow flow) {
-    DispatchMethod dispatchMethod = getDispatchMethod();
+    DispatchMethod dispatchMethod = this.containerRampUpCriteria.getDispatchMethod(flow);
     if (dispatchMethod != DispatchMethod.CONTAINERIZED) {
       return dispatchMethod;
     }

File: az-core/src/main/java/azkaban/Constants.java
Patch:
@@ -526,6 +526,8 @@ public static class ContainerizedDispatchManagerProperties {
         AZKABAN_CONTAINERIZED_PREFIX + "creation.rate.limit";
     public static final String CONTAINERIZED_RAMPUP =
         AZKABAN_CONTAINERIZED_PREFIX + "rampup";
+    public static final String CONTAINERIZED_JOBTYPE_ALLOWLIST =
+        AZKABAN_CONTAINERIZED_PREFIX + "jobtype.allowlist";
 
     // Kubernetes related properties
     public static final String AZKABAN_KUBERNETES_PREFIX = "azkaban.kubernetes.";

File: azkaban-common/src/main/java/azkaban/imagemgmt/dto/ImageVersionMetadataResponseDTO.java
Patch:
@@ -19,10 +19,12 @@
 import azkaban.imagemgmt.models.ImageVersion.State;
 import java.util.List;
 import org.codehaus.jackson.annotate.JsonProperty;
+import org.codehaus.jackson.annotate.JsonPropertyOrder;
 
 /**
  * This DTO class represents API specific image version metadata response.
  */
+@JsonPropertyOrder({"version", "state", "path", "message", "rampups"})
 public class ImageVersionMetadataResponseDTO {
 
   // Represents version for an image type selected based on random rampup or current active version.
@@ -73,6 +75,7 @@ public String getMessage() {
   /**
    * Represents rampup metadata for an image type.
    */
+  @JsonPropertyOrder({"version", "stabilityTag", "rampupPercentage"})
   public static class RampupMetadata {
 
     @JsonProperty("version")

File: azkaban-common/src/main/java/azkaban/executor/ExecutorApiGateway.java
Patch:
@@ -86,7 +86,7 @@ Map<String, Object> callWithReference(final ExecutionReference ref, final String
         null, params);
   }
 
-  Map<String, Object> callWithReferenceByUser(final ExecutionReference ref,
+  public Map<String, Object> callWithReferenceByUser(final ExecutionReference ref,
       final String action, final String user, final Pair<String, String>... params)
       throws ExecutorManagerException {
     final Executor executor = (isReverseProxyEnabled ? defaultEmptyExecutor : ref.getExecutor().get());

File: azkaban-exec-server/src/test/java/azkaban/execapp/FlowRunnerTestUtil.java
Patch:
@@ -33,6 +33,7 @@
 import azkaban.executor.MockExecutorLoader;
 import azkaban.executor.Status;
 import azkaban.flow.Flow;
+import azkaban.flow.FlowUtils;
 import azkaban.jobtype.JobTypeManager;
 import azkaban.jobtype.JobTypePluginSet;
 import azkaban.metrics.CommonMetrics;
@@ -258,6 +259,7 @@ private FlowRunner createFromExecutableFlow(final EventCollectorListener eventCo
     exFlow.setExecutionId(exId);
     if (options != null) {
       exFlow.setExecutionOptions(options);
+      FlowUtils.applyDisabledJobs(options.getDisabledJobs(), exFlow);
     }
     exFlow.getExecutionOptions().addAllFlowParameters(flowParams);
     this.executorLoader.uploadExecutableFlow(exFlow);

File: azkaban-exec-server/src/main/java/azkaban/execapp/AzkabanExecutorServer.java
Patch:
@@ -18,8 +18,8 @@
 import static azkaban.Constants.ConfigurationKeys;
 import static azkaban.Constants.DEFAULT_EXECUTOR_PORT_FILE;
 import static azkaban.ServiceProvider.SERVICE_PROVIDER;
-import static azkaban.execapp.ExecJettyServerModule.EXEC_JETTY_SERVER;
-import static azkaban.execapp.ExecJettyServerModule.EXEC_ROOT_CONTEXT;
+import static azkaban.common.ExecJettyServerModule.EXEC_JETTY_SERVER;
+import static azkaban.common.ExecJettyServerModule.EXEC_ROOT_CONTEXT;
 import static com.google.common.base.Preconditions.checkState;
 import static java.util.Objects.requireNonNull;
 

File: azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunnerManager.java
Patch:
@@ -712,7 +712,7 @@ public LogData readFlowLogs(final int execId, final int startByte, final int len
         synchronized (this.executionDirDeletionSync) {
           if (!dir.exists()) {
             throw new ExecutorManagerException(
-                "Execution dir file doesn't exist. Probably has beend deleted");
+                "Execution dir file doesn't exist. Probably has been deleted");
           }
 
           final File logFile = runner.getFlowLogFile();
@@ -781,7 +781,7 @@ public List<Object> readJobAttachments(final int execId, final String jobId, fin
       synchronized (this.executionDirDeletionSync) {
         if (!dir.exists()) {
           throw new ExecutorManagerException(
-              "Execution dir file doesn't exist. Probably has beend deleted");
+              "Execution dir file doesn't exist. Probably has been deleted");
         }
 
         final File attachmentFile = runner.getJobAttachmentFile(jobId, attempt);

File: azkaban-exec-server/src/main/java/azkaban/execapp/ProjectCacheCleaner.java
Patch:
@@ -132,12 +132,12 @@ private ProjectDirectoryMetadata fetchProjectMetadata(final Path project) {
          * recursive space calculation is a very expensive operation.
          */
         projectDirectoryMetadata.setDirSizeInByte(
-            FlowPreparer.calculateDirSizeAndSave(projectDirectoryMetadata.getInstalledDir()));
+            AbstractFlowPreparer.calculateDirSizeAndSave(projectDirectoryMetadata.getInstalledDir()));
       }
 
       projectDirectoryMetadata.setLastAccessTime(
           Files.getLastModifiedTime(Paths.get(projectDirectoryMetadata.getInstalledDir().toString(),
-              FlowPreparer.PROJECT_DIR_SIZE_FILE_NAME)));
+              AbstractFlowPreparer.PROJECT_DIR_SIZE_FILE_NAME)));
 
     } catch (final Exception e) {
       log.warn("Error while loading project dir metadata for project {}",

File: azkaban-exec-server/src/main/java/azkaban/execapp/ProjectDirectoryMetadata.java
Patch:
@@ -22,14 +22,14 @@
 import java.nio.file.attribute.FileTime;
 
 
-class ProjectDirectoryMetadata {
+public class ProjectDirectoryMetadata {
   private final int projectId;
   private final int version;
   private File installedDir;
   private Long dirSizeInByte;
   private FileTime lastAccessTime;
 
-  ProjectDirectoryMetadata(final int projectId, final int version) {
+  public ProjectDirectoryMetadata(final int projectId, final int version) {
     checkArgument(projectId > 0);
     checkArgument(version > 0);
 

File: azkaban-exec-server/src/test/java/azkaban/execapp/ProjectCacheCleanerTest.java
Patch:
@@ -60,17 +60,17 @@ public void setUp() throws Exception {
     unzip(Paths.get(classLoader.getResource("1.1.zip").getPath()),
         this.cacheDir.toPath());
     Files.setLastModifiedTime(Paths.get(this.cacheDir.toString(), "1.1",
-        FlowPreparer.PROJECT_DIR_SIZE_FILE_NAME), FileTime.fromMillis(current - 2000));
+        AbstractFlowPreparer.PROJECT_DIR_SIZE_FILE_NAME), FileTime.fromMillis(current - 2000));
 
     unzip(Paths.get(classLoader.getResource("2.1.zip").getPath()),
         this.cacheDir.toPath());
     Files.setLastModifiedTime(Paths.get(this.cacheDir.toString(), "2.1",
-        FlowPreparer.PROJECT_DIR_SIZE_FILE_NAME), FileTime.fromMillis(current - 1000));
+        AbstractFlowPreparer.PROJECT_DIR_SIZE_FILE_NAME), FileTime.fromMillis(current - 1000));
 
     unzip(Paths.get(classLoader.getResource("3.1.zip").getPath()),
         this.cacheDir.toPath());
     Files.setLastModifiedTime(Paths.get(this.cacheDir.toString(), "3.1",
-        FlowPreparer.PROJECT_DIR_SIZE_FILE_NAME), FileTime.fromMillis(current));
+        AbstractFlowPreparer.PROJECT_DIR_SIZE_FILE_NAME), FileTime.fromMillis(current));
   }
 
   @Test

File: az-core/src/main/java/azkaban/Constants.java
Patch:
@@ -486,8 +486,7 @@ public static class PluginManager {
     public static final String COMMONSYSCONFFILE = "commonprivate.properties";
   }
 
-  public static class ContainerizedExecutionManagerProperties {
-
+  public static class ContainerizedDispatchManagerProperties {
     public static final String AZKABAN_CONTAINERIZED_PREFIX = "azkaban.containerized.";
     public static final String CONTAINERIZED_IMPL_TYPE = AZKABAN_CONTAINERIZED_PREFIX + "impl.type";
     public static final String CONTAINERIZED_EXECUTION_BATCH_ENABLED =

File: azkaban-common/src/main/java/azkaban/executor/container/ContainerCleanupManager.java
Patch:
@@ -15,7 +15,7 @@
  */
 package azkaban.executor.container;
 
-import static azkaban.Constants.ContainerizedExecutionManagerProperties;
+import static azkaban.Constants.ContainerizedDispatchManagerProperties;
 
 import azkaban.Constants.ConfigurationKeys;
 import azkaban.executor.ExecutableFlow;
@@ -59,7 +59,7 @@ public ContainerCleanupManager(final Props azkProps, final ExecutorLoader execut
       final ContainerizedImpl containerizedImpl) {
     this.cleanupIntervalMin = azkProps
         .getLong(
-            ContainerizedExecutionManagerProperties.CONTAINERIZED_STALE_EXECUTION_CLEANUP_INTERVAL_MIN,
+            ContainerizedDispatchManagerProperties.CONTAINERIZED_STALE_EXECUTION_CLEANUP_INTERVAL_MIN,
             DEFAULT_STALE_CONTAINER_CLEANUP_INTERVAL.toMinutes());
     this.staleContainerAgeMins = azkProps.getLong(ConfigurationKeys.AZKABAN_MAX_FLOW_RUNNING_MINS,
         DEFAULT_STALE_CONTAINER_AGE_MINS.toMinutes());

File: azkaban-common/src/test/java/azkaban/executor/ContainerizedDispatchManagerTest.java
Patch:
@@ -23,7 +23,7 @@
 
 import azkaban.Constants;
 import azkaban.Constants.ConfigurationKeys;
-import azkaban.Constants.ContainerizedExecutionManagerProperties;
+import azkaban.Constants.ContainerizedDispatchManagerProperties;
 import azkaban.executor.container.ContainerizedDispatchManager;
 import azkaban.executor.container.ContainerizedImpl;
 import azkaban.executor.container.ContainerizedImplType;
@@ -76,7 +76,7 @@ public void setup() throws Exception {
     this.apiGateway = mock(ExecutorApiGateway.class);
     this.containerizedImpl = mock(ContainerizedImpl.class);
     this.props.put(Constants.ConfigurationKeys.MAX_CONCURRENT_RUNS_ONEFLOW, 1);
-    this.props.put(ContainerizedExecutionManagerProperties.CONTAINERIZED_IMPL_TYPE,
+    this.props.put(ContainerizedDispatchManagerProperties.CONTAINERIZED_IMPL_TYPE,
         ContainerizedImplType.KUBERNETES.name());
     this.flow1 = TestUtils.createTestExecutableFlow("exectest1", "exec1");
     this.flow2 = TestUtils.createTestExecutableFlow("exectest1", "exec2");

File: azkaban-common/src/test/java/azkaban/executor/container/KubernetesContainerizedImplTest.java
Patch:
@@ -18,7 +18,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.mock;
 
-import azkaban.Constants.ContainerizedExecutionManagerProperties;
+import azkaban.Constants.ContainerizedDispatchManagerProperties;
 import azkaban.executor.ExecutableFlow;
 import azkaban.executor.ExecutorLoader;
 import azkaban.executor.Status;
@@ -39,8 +39,8 @@ public class KubernetesContainerizedImplTest {
 
   @Before
   public void setup() throws Exception {
-    this.props.put(ContainerizedExecutionManagerProperties.KUBERNETES_NAMESPACE, "dev-namespace");
-    this.props.put(ContainerizedExecutionManagerProperties.KUBERNETES_KUBE_CONFIG_PATH, "src/test"
+    this.props.put(ContainerizedDispatchManagerProperties.KUBERNETES_NAMESPACE, "dev-namespace");
+    this.props.put(ContainerizedDispatchManagerProperties.KUBERNETES_KUBE_CONFIG_PATH, "src/test"
         + "/resources/container/kubeconfig");
     this.executorLoader = mock(ExecutorLoader.class);
     this.kubernetesContainerizedImpl = new KubernetesContainerizedImpl(this.props,

File: azkaban-web-server/src/main/java/azkaban/webapp/AzkabanWebServerModule.java
Patch:
@@ -19,7 +19,7 @@
 
 import azkaban.Constants;
 import azkaban.Constants.ConfigurationKeys;
-import azkaban.Constants.ContainerizedExecutionManagerProperties;
+import azkaban.Constants.ContainerizedDispatchManagerProperties;
 import azkaban.DispatchMethod;
 import azkaban.executor.ExecutionController;
 import azkaban.executor.ExecutorManager;
@@ -39,7 +39,6 @@
 import azkaban.webapp.metrics.DummyWebMetricsImpl;
 import azkaban.webapp.metrics.WebMetrics;
 import azkaban.webapp.metrics.WebMetricsImpl;
-import com.google.common.annotations.VisibleForTesting;
 import com.google.inject.AbstractModule;
 import com.google.inject.Provides;
 import com.google.inject.Scopes;
@@ -95,7 +94,7 @@ protected void configure() {
 
   private Class<? extends ContainerizedImpl> resolveContainerizedImpl() {
     final String containerizedImplProperty =
-        props.getString(ContainerizedExecutionManagerProperties.CONTAINERIZED_IMPL_TYPE,
+        props.getString(ContainerizedDispatchManagerProperties.CONTAINERIZED_IMPL_TYPE,
             ContainerizedImplType.KUBERNETES.name())
             .toUpperCase();
     return ContainerizedImplType.valueOf(containerizedImplProperty).getImplClass();

File: azkaban-web-server/src/test/java/azkaban/webapp/AzkabanWebServerTest.java
Patch:
@@ -30,7 +30,7 @@
 
 import azkaban.AzkabanCommonModule;
 import azkaban.Constants.ConfigurationKeys;
-import azkaban.Constants.ContainerizedExecutionManagerProperties;
+import azkaban.Constants.ContainerizedDispatchManagerProperties;
 import azkaban.DispatchMethod;
 import azkaban.database.AzkabanDatabaseSetup;
 import azkaban.database.AzkabanDatabaseUpdater;
@@ -202,9 +202,9 @@ public void testDispatchMethod() throws ExecutorManagerException {
 
     // Test for CONTAINERIZED method
     props.put(ConfigurationKeys.AZKABAN_EXECUTION_DISPATCH_METHOD, "CONTAINERIZED");
-    props.put(ContainerizedExecutionManagerProperties.KUBERNETES_KUBE_CONFIG_PATH, "src/test"
+    props.put(ContainerizedDispatchManagerProperties.KUBERNETES_KUBE_CONFIG_PATH, "src/test"
         + "/resources/container/kubeconfig");
-    props.put(ContainerizedExecutionManagerProperties.KUBERNETES_NAMESPACE, "dev-namespace");
+    props.put(ContainerizedDispatchManagerProperties.KUBERNETES_NAMESPACE, "dev-namespace");
     final Injector containerizedInjector = Guice.createInjector(
         new AzkabanCommonModule(props),
         new AzkabanWebServerModule(props)

File: az-core/src/main/java/azkaban/Constants.java
Patch:
@@ -183,6 +183,7 @@ public static class ConfigurationKeys {
      * b) azkaban.server.external.history_server_job_url=http://***jh***:19888/jobhistory/job/job_${application.id}
      * c) azkaban.server.external.spark_history_server_job_url=http://***sh***:18080/history/application_${application.id}/1/jobs
      * */
+    public static final String HADOOP_CLUSTER_URL = "azkaban.server.external.hadoop_cluster_url";
     public static final String RESOURCE_MANAGER_JOB_URL = "azkaban.server.external.resource_manager_job_url";
     public static final String HISTORY_SERVER_JOB_URL = "azkaban.server.external.history_server_job_url";
     public static final String SPARK_HISTORY_SERVER_JOB_URL = "azkaban.server.external.spark_history_server_job_url";

File: az-hdfs-viewer/src/main/java/azkaban/viewer/hdfs/AzkabanSequenceFileReader.java
Patch:
@@ -16,7 +16,6 @@
 
 package azkaban.viewer.hdfs;
 
-import azkaban.security.commons.HadoopSecurityManager;
 import java.io.Closeable;
 import java.io.DataInputStream;
 import java.io.DataOutputStream;
@@ -57,7 +56,7 @@
 @SuppressWarnings("deprecation")
 public class AzkabanSequenceFileReader {
   private final static Logger LOG = Logger
-      .getLogger(HadoopSecurityManager.class);
+      .getLogger(AzkabanSequenceFileReader.class);
   private static final byte BLOCK_COMPRESS_VERSION = (byte) 4;
   private static final byte CUSTOM_COMPRESS_VERSION = (byte) 5;
   private static final byte VERSION_WITH_METADATA = (byte) 6;

File: azkaban-common/src/test/java/azkaban/jobExecutor/JavaProcessJobTest.java
Patch:
@@ -18,6 +18,7 @@
 
 import static org.assertj.core.api.Assertions.assertThatThrownBy;
 
+import azkaban.flow.CommonJobProperties;
 import azkaban.jobExecutor.utils.process.ProcessFailureException;
 import azkaban.utils.Props;
 import java.io.File;

File: azkaban-exec-server/src/main/java/azkaban/execapp/AzkabanExecServerModule.java
Patch:
@@ -20,6 +20,7 @@
 import static azkaban.Constants.ConfigurationKeys.AZKABAN_EVENT_REPORTING_CLASS_PARAM;
 import static azkaban.Constants.ConfigurationKeys.AZKABAN_EVENT_REPORTING_ENABLED;
 
+import azkaban.cluster.ClusterModule;
 import azkaban.executor.ExecutorLoader;
 import azkaban.executor.JdbcExecutorLoader;
 import azkaban.spi.AzkabanEventReporter;
@@ -42,6 +43,7 @@ public class AzkabanExecServerModule extends AbstractModule {
   @Override
   protected void configure() {
     install(new ExecJettyServerModule());
+    install(new ClusterModule());
     bind(ExecutorLoader.class).to(JdbcExecutorLoader.class);
   }
 

File: azkaban-exec-server/src/test/java/azkaban/execapp/FlowRunnerTestUtil.java
Patch:
@@ -92,7 +92,7 @@ public FlowRunnerTestUtil(final String flowName, final TemporaryFolder temporary
 
     this.jobtypeManager = new JobTypeManager(null, null, this.getClass().getClassLoader());
     final JobTypePluginSet pluginSet = this.jobtypeManager.getJobTypePluginSet();
-    pluginSet.addPluginClass("test", InteractiveTestJob.class);
+    pluginSet.addPluginClassName("test", InteractiveTestJob.class.getName());
   }
 
   /**

File: azkaban-web-server/src/main/java/azkaban/webapp/servlet/LoginAbstractAzkabanServlet.java
Patch:
@@ -521,7 +521,7 @@ private Session createSession(final String username, final String password, fina
       final User user = manager.getUser(username, password);
 
       if (isSuccessFinal) {
-        WebUtils.reportLoginEvent(EventType.USER_LOGIN, username, ip);
+        WebUtils.reportLoginEvent(EventType.USER_LOGIN, user.getUserId(), ip);
       }
 
       final String randomUID = UUID.randomUUID().toString();
@@ -629,13 +629,13 @@ private void handleAjaxLoginAction(final String username, final String password,
     if (sessionAdded) {
       ret.put("status", "success");
       ret.put(SESSION_ID_KEY, session.getSessionId());
-      WebUtils.reportLoginEvent(EventType.USER_LOGIN, username, ip);
+      WebUtils.reportLoginEvent(EventType.USER_LOGIN, session.getUser().getUserId(), ip);
     } else {
       final String message = "Potential DDoS found, the number of sessions for this user and IP "
           + "reached allowed limit (" + getApplication().getSessionCache()
           .getMaxNumberOfSessionsPerIpPerUser().get() + ").";
       ret.put("error", message);
-      WebUtils.reportLoginEvent(EventType.USER_LOGIN, username, ip, false, message);
+      WebUtils.reportLoginEvent(EventType.USER_LOGIN, session.getUser().getUserId(), ip, false, message);
     }
   }
 

File: azkaban-web-server/src/main/java/azkaban/webapp/servlet/WebUtils.java
Patch:
@@ -24,14 +24,13 @@
 import azkaban.spi.EventType;
 import azkaban.webapp.AzkabanWebServer;
 import com.google.common.base.Strings;
-import com.google.inject.ConfigurationException;
 import java.net.InetAddress;
 import java.net.UnknownHostException;
 import java.text.NumberFormat;
 import java.util.HashMap;
 import java.util.Map;
 import javax.servlet.http.HttpServletRequest;
-import org.apache.log4j.Logger;
+import org.slf4j.LoggerFactory;
 
 public class WebUtils {
 
@@ -48,7 +47,7 @@ public class WebUtils {
       azkabanEventReporter = ServiceProvider.SERVICE_PROVIDER
           .getInstance(AzkabanEventReporter.class);
     } catch (Exception e) {
-      Logger.getLogger(WebUtils.class.getName()).warn("AzkabanEventReporter not configured", e);
+      LoggerFactory.getLogger(WebUtils.class).warn("AzkabanEventReporter not configured", e);
     }
   }
 

File: azkaban-web-server/src/main/java/azkaban/webapp/servlet/WebUtils.java
Patch:
@@ -47,7 +47,7 @@ public class WebUtils {
     try {
       azkabanEventReporter = ServiceProvider.SERVICE_PROVIDER
           .getInstance(AzkabanEventReporter.class);
-    } catch (NullPointerException | ConfigurationException e) {
+    } catch (Exception e) {
       Logger.getLogger(WebUtils.class.getName()).warn("AzkabanEventReporter not configured", e);
     }
   }

File: az-hadoop-jobtype-plugin/src/main/java/azkaban/jobtype/HadoopConfigurationInjector.java
Patch:
@@ -135,7 +135,8 @@ private static void addHadoopProperties(Props props) {
         CommonJobProperties.IN_NODES,
         CommonJobProperties.PROJECT_LAST_CHANGED_DATE,
         CommonJobProperties.PROJECT_LAST_CHANGED_BY,
-        CommonJobProperties.SUBMIT_USER
+        CommonJobProperties.SUBMIT_USER,
+        CommonJobProperties.EXECUTION_SOURCE
     };
 
     for (String propertyName : propsToInject) {

File: az-reportal/src/main/java/azkaban/viewer/reportal/ReportalServlet.java
Patch:
@@ -16,6 +16,7 @@
 
 package azkaban.viewer.reportal;
 
+import azkaban.Constants;
 import azkaban.executor.ExecutableFlow;
 import azkaban.executor.ExecutableNode;
 import azkaban.executor.ExecutionOptions;
@@ -1182,6 +1183,7 @@ private void handleRunReportalWithVariables(final HttpServletRequest req,
     final ExecutableFlow exflow = new ExecutableFlow(project, flow);
     exflow.setSubmitUser(user.getUserId());
     exflow.addAllProxyUsers(project.getProxyUsers());
+    exflow.setExecutionSource(Constants.EXECUTION_SOURCE_ADHOC);
 
     final ExecutionOptions options = exflow.getExecutionOptions();
 

File: azkaban-common/src/main/java/azkaban/executor/ExecutionFlowDao.java
Patch:
@@ -65,8 +65,9 @@ public void uploadExecutableFlow(final ExecutableFlow flow)
 
     final String INSERT_EXECUTABLE_FLOW = "INSERT INTO execution_flows "
         + "(project_id, flow_id, version, status, submit_time, submit_user, update_time, "
-        + "use_executor, flow_priority) values (?,?,?,?,?,?,?,?,?)";
+        + "use_executor, flow_priority, execution_source) values (?,?,?,?,?,?,?,?,?,?)";
     final long submitTime = flow.getSubmitTime();
+    final String executionSource = flow.getExecutionSource();
 
     /**
      * Why we need a transaction to get last insert ID?
@@ -77,7 +78,7 @@ public void uploadExecutableFlow(final ExecutableFlow flow)
     final SQLTransaction<Long> insertAndGetLastID = transOperator -> {
       transOperator.update(INSERT_EXECUTABLE_FLOW, flow.getProjectId(),
           flow.getFlowId(), flow.getVersion(), flow.getStatus().getNumVal(),
-          submitTime, flow.getSubmitUser(), submitTime, executorId, flowPriority);
+          submitTime, flow.getSubmitUser(), submitTime, executorId, flowPriority, executionSource);
       transOperator.getConnection().commit();
       return transOperator.getLastInsertId();
     };

File: azkaban-common/src/main/java/azkaban/flow/FlowUtils.java
Patch:
@@ -47,6 +47,7 @@ public static Props addCommonFlowProperties(final Props parentProps,
     props.put(CommonJobProperties.PROJECT_LAST_CHANGED_BY, flow.getLastModifiedByUser());
     props.put(CommonJobProperties.PROJECT_LAST_CHANGED_DATE, flow.getLastModifiedTimestamp());
     props.put(CommonJobProperties.SUBMIT_USER, flow.getExecutableFlow().getSubmitUser());
+    props.put(CommonJobProperties.EXECUTION_SOURCE, flow.getExecutionSource());
 
     final DateTime loadTime = new DateTime();
 

File: azkaban-common/src/main/java/azkaban/trigger/builtin/ExecuteFlowAction.java
Patch:
@@ -15,6 +15,7 @@
  */
 package azkaban.trigger.builtin;
 
+import azkaban.Constants;
 import azkaban.executor.ExecutableFlow;
 import azkaban.executor.ExecutionOptions;
 import azkaban.executor.ExecutorManagerAdapter;
@@ -194,6 +195,7 @@ public void doAction() throws Exception {
     final ExecutableFlow exflow = FlowUtils.createExecutableFlow(project, flow);
 
     exflow.setSubmitUser(this.submitUser);
+    exflow.setExecutionSource(Constants.EXECUTION_SOURCE_SCHEDULED);
 
     if (this.executionOptions == null) {
       this.executionOptions = new ExecutionOptions();

File: azkaban-web-server/src/main/java/azkaban/flowtrigger/TriggerInstanceProcessor.java
Patch:
@@ -72,6 +72,7 @@ private void executeFlowAndUpdateExecID(final TriggerInstance triggerInst) {
       final ExecutableFlow executableFlow = FlowUtils.createExecutableFlow(project, flow);
       // execute the flow with default execution option(concurrency option being "ignore
       // currently running")
+      executableFlow.setExecutionSource(Constants.EXECUTION_SOURCE_EVENT);
       this.executorManager.submitExecutableFlow(executableFlow, triggerInst.getSubmitUser());
       triggerInst.setFlowExecId(executableFlow.getExecutionId());
     } catch (final Exception ex) {

File: azkaban-web-server/src/main/java/azkaban/webapp/servlet/ExecutorServlet.java
Patch:
@@ -972,6 +972,7 @@ private void ajaxExecuteFlow(final HttpServletRequest req,
 
     final ExecutableFlow exflow = FlowUtils.createExecutableFlow(project, flow);
     exflow.setSubmitUser(user.getUserId());
+    exflow.setExecutionSource(Constants.EXECUTION_SOURCE_ADHOC);
 
     final ExecutionOptions options;
     try {

File: azkaban-exec-server/src/test/java/azkaban/execapp/JobRunnerTest.java
Patch:
@@ -88,14 +88,16 @@ public void tearDown() throws IOException {
   }
 
   @Test
-  public void testBasicRun() throws IOException {
+  public void testBasicRun() throws Exception {
     final MockExecutorLoader loader = new MockExecutorLoader();
     final EventCollectorListener eventCollector = new EventCollectorListener();
     final JobRunner runner =
         createJobRunner(1, "testJob", 0, false, loader, eventCollector);
     final ExecutableNode node = runner.getNode();
     // Job starts to queue
     runner.setTimeInQueue(System.currentTimeMillis());
+    // ensure that queue duration should be > 0
+    Thread.sleep(1L);
 
     eventCollector.handleEvent(Event.create(null, EventType.JOB_STARTED, new EventData(node)));
     Assert.assertTrue(runner.getStatus() != Status.SUCCEEDED

File: az-hdfs-viewer/src/main/java/azkaban/viewer/hdfs/AzkabanSequenceFileReader.java
Patch:
@@ -16,6 +16,7 @@
 
 package azkaban.viewer.hdfs;
 
+import azkaban.security.commons.HadoopSecurityManager;
 import java.io.Closeable;
 import java.io.DataInputStream;
 import java.io.DataOutputStream;
@@ -56,7 +57,7 @@
 @SuppressWarnings("deprecation")
 public class AzkabanSequenceFileReader {
   private final static Logger LOG = Logger
-      .getLogger(AzkabanSequenceFileReader.class);
+      .getLogger(HadoopSecurityManager.class);
   private static final byte BLOCK_COMPRESS_VERSION = (byte) 4;
   private static final byte CUSTOM_COMPRESS_VERSION = (byte) 5;
   private static final byte VERSION_WITH_METADATA = (byte) 6;

File: azkaban-common/src/test/java/azkaban/jobExecutor/JavaProcessJobTest.java
Patch:
@@ -18,7 +18,6 @@
 
 import static org.assertj.core.api.Assertions.assertThatThrownBy;
 
-import azkaban.flow.CommonJobProperties;
 import azkaban.jobExecutor.utils.process.ProcessFailureException;
 import azkaban.utils.Props;
 import java.io.File;

File: azkaban-exec-server/src/main/java/azkaban/execapp/AzkabanExecServerModule.java
Patch:
@@ -20,7 +20,6 @@
 import static azkaban.Constants.ConfigurationKeys.AZKABAN_EVENT_REPORTING_CLASS_PARAM;
 import static azkaban.Constants.ConfigurationKeys.AZKABAN_EVENT_REPORTING_ENABLED;
 
-import azkaban.cluster.ClusterModule;
 import azkaban.executor.ExecutorLoader;
 import azkaban.executor.JdbcExecutorLoader;
 import azkaban.spi.AzkabanEventReporter;
@@ -43,7 +42,6 @@ public class AzkabanExecServerModule extends AbstractModule {
   @Override
   protected void configure() {
     install(new ExecJettyServerModule());
-    install(new ClusterModule());
     bind(ExecutorLoader.class).to(JdbcExecutorLoader.class);
   }
 

File: azkaban-exec-server/src/test/java/azkaban/execapp/FlowRunnerTestUtil.java
Patch:
@@ -92,7 +92,7 @@ public FlowRunnerTestUtil(final String flowName, final TemporaryFolder temporary
 
     this.jobtypeManager = new JobTypeManager(null, null, this.getClass().getClassLoader());
     final JobTypePluginSet pluginSet = this.jobtypeManager.getJobTypePluginSet();
-    pluginSet.addPluginClassName("test", InteractiveTestJob.class.getName());
+    pluginSet.addPluginClass("test", InteractiveTestJob.class);
   }
 
   /**

File: azkaban-exec-server/src/main/java/azkaban/execapp/event/JobCallbackUtil.java
Patch:
@@ -158,6 +158,7 @@ public static List<HttpRequestBase> parseJobCallbackProperties(final Props props
                 + contextInfo.get(CONTEXT_JOB_TOKEN));
           } else {
             // put together an URL
+            privateLogger.info("callbackUrlWithTokenReplaced: " + callbackUrlWithTokenReplaced);
             final HttpPost httpPost = new HttpPost(callbackUrlWithTokenReplaced);
             final String postActualBody =
                 replaceTokens(httpBodyValue, contextInfo, false);

File: azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java
Patch:
@@ -294,7 +294,7 @@ public void run() {
     } catch (final Throwable t) {
       if (this.logger != null) {
         this.logger
-            .error("An error has occurred during the running of the flow. Quiting.", t);
+            .error("An error has occurred during the running of the flow. Quitting.", t);
       }
       if (Status.KILLING.equals(this.flow.getStatus())) {
         this.execMetrics.decrementFlowKillingCount();

File: azkaban-exec-server/src/main/java/azkaban/execapp/JobRunner.java
Patch:
@@ -480,7 +480,7 @@ private boolean blockOnPipeLine() {
           this.currentBlockStatus = bStatus;
           bStatus.blockOnFinishedStatus();
           if (this.isKilled()) {
-            this.logger.info("Job was killed while waiting on pipeline. Quiting.");
+            this.logger.info("Job was killed while waiting on pipeline. Quitting.");
             return true;
           } else {
             this.logger.info("Pipelined job " + bStatus.getJobId() + " finished.");
@@ -514,7 +514,7 @@ private boolean delayExecution() {
         }
 
         if (this.isKilled()) {
-          this.logger.info("Job was killed while in delay. Quiting.");
+          this.logger.info("Job was killed while in delay. Quitting.");
           return true;
         }
       }

File: az-hdfs-viewer/src/main/java/azkaban/viewer/hdfs/AzkabanSequenceFileReader.java
Patch:
@@ -16,7 +16,6 @@
 
 package azkaban.viewer.hdfs;
 
-import azkaban.security.commons.HadoopSecurityManager;
 import java.io.Closeable;
 import java.io.DataInputStream;
 import java.io.DataOutputStream;
@@ -57,7 +56,7 @@
 @SuppressWarnings("deprecation")
 public class AzkabanSequenceFileReader {
   private final static Logger LOG = Logger
-      .getLogger(HadoopSecurityManager.class);
+      .getLogger(AzkabanSequenceFileReader.class);
   private static final byte BLOCK_COMPRESS_VERSION = (byte) 4;
   private static final byte CUSTOM_COMPRESS_VERSION = (byte) 5;
   private static final byte VERSION_WITH_METADATA = (byte) 6;

File: azkaban-common/src/test/java/azkaban/jobExecutor/JavaProcessJobTest.java
Patch:
@@ -18,6 +18,7 @@
 
 import static org.assertj.core.api.Assertions.assertThatThrownBy;
 
+import azkaban.flow.CommonJobProperties;
 import azkaban.jobExecutor.utils.process.ProcessFailureException;
 import azkaban.utils.Props;
 import java.io.File;

File: azkaban-exec-server/src/main/java/azkaban/execapp/AzkabanExecServerModule.java
Patch:
@@ -20,6 +20,7 @@
 import static azkaban.Constants.ConfigurationKeys.AZKABAN_EVENT_REPORTING_CLASS_PARAM;
 import static azkaban.Constants.ConfigurationKeys.AZKABAN_EVENT_REPORTING_ENABLED;
 
+import azkaban.cluster.ClusterModule;
 import azkaban.executor.ExecutorLoader;
 import azkaban.executor.JdbcExecutorLoader;
 import azkaban.spi.AzkabanEventReporter;
@@ -42,6 +43,7 @@ public class AzkabanExecServerModule extends AbstractModule {
   @Override
   protected void configure() {
     install(new ExecJettyServerModule());
+    install(new ClusterModule());
     bind(ExecutorLoader.class).to(JdbcExecutorLoader.class);
   }
 

File: azkaban-exec-server/src/test/java/azkaban/execapp/FlowRunnerTestUtil.java
Patch:
@@ -92,7 +92,7 @@ public FlowRunnerTestUtil(final String flowName, final TemporaryFolder temporary
 
     this.jobtypeManager = new JobTypeManager(null, null, this.getClass().getClassLoader());
     final JobTypePluginSet pluginSet = this.jobtypeManager.getJobTypePluginSet();
-    pluginSet.addPluginClass("test", InteractiveTestJob.class);
+    pluginSet.addPluginClassName("test", InteractiveTestJob.class.getName());
   }
 
   /**

File: az-hdfs-viewer/src/main/java/azkaban/viewer/hdfs/AzkabanSequenceFileReader.java
Patch:
@@ -16,6 +16,7 @@
 
 package azkaban.viewer.hdfs;
 
+import azkaban.security.commons.HadoopSecurityManager;
 import java.io.Closeable;
 import java.io.DataInputStream;
 import java.io.DataOutputStream;
@@ -56,7 +57,7 @@
 @SuppressWarnings("deprecation")
 public class AzkabanSequenceFileReader {
   private final static Logger LOG = Logger
-      .getLogger(AzkabanSequenceFileReader.class);
+      .getLogger(HadoopSecurityManager.class);
   private static final byte BLOCK_COMPRESS_VERSION = (byte) 4;
   private static final byte CUSTOM_COMPRESS_VERSION = (byte) 5;
   private static final byte VERSION_WITH_METADATA = (byte) 6;

File: azkaban-common/src/test/java/azkaban/jobExecutor/JavaProcessJobTest.java
Patch:
@@ -18,7 +18,6 @@
 
 import static org.assertj.core.api.Assertions.assertThatThrownBy;
 
-import azkaban.flow.CommonJobProperties;
 import azkaban.jobExecutor.utils.process.ProcessFailureException;
 import azkaban.utils.Props;
 import java.io.File;

File: azkaban-exec-server/src/main/java/azkaban/execapp/AzkabanExecServerModule.java
Patch:
@@ -20,7 +20,6 @@
 import static azkaban.Constants.ConfigurationKeys.AZKABAN_EVENT_REPORTING_CLASS_PARAM;
 import static azkaban.Constants.ConfigurationKeys.AZKABAN_EVENT_REPORTING_ENABLED;
 
-import azkaban.cluster.ClusterModule;
 import azkaban.executor.ExecutorLoader;
 import azkaban.executor.JdbcExecutorLoader;
 import azkaban.spi.AzkabanEventReporter;
@@ -43,7 +42,6 @@ public class AzkabanExecServerModule extends AbstractModule {
   @Override
   protected void configure() {
     install(new ExecJettyServerModule());
-    install(new ClusterModule());
     bind(ExecutorLoader.class).to(JdbcExecutorLoader.class);
   }
 

File: azkaban-exec-server/src/test/java/azkaban/execapp/FlowRunnerTestUtil.java
Patch:
@@ -92,7 +92,7 @@ public FlowRunnerTestUtil(final String flowName, final TemporaryFolder temporary
 
     this.jobtypeManager = new JobTypeManager(null, null, this.getClass().getClassLoader());
     final JobTypePluginSet pluginSet = this.jobtypeManager.getJobTypePluginSet();
-    pluginSet.addPluginClassName("test", InteractiveTestJob.class.getName());
+    pluginSet.addPluginClass("test", InteractiveTestJob.class);
   }
 
   /**

File: az-core/src/main/java/azkaban/Constants.java
Patch:
@@ -233,7 +233,8 @@ public static class ConfigurationKeys {
 
     // Maximum number of tries to download a dependency (no more retry attempts will be made after this many download failures)
     public static final String AZKABAN_DEPENDENCY_MAX_DOWNLOAD_TRIES = "azkaban.dependency.max.download.tries";
-
+    public static final String AZKABAN_DEPENDENCY_DOWNLOAD_THREADPOOL_SIZE =
+        "azkaban.dependency.download.threadpool.size";
     public static final String AZKABAN_STORAGE_TYPE = "azkaban.storage.type";
     public static final String AZKABAN_STORAGE_LOCAL_BASEDIR = "azkaban.storage.local.basedir";
     public static final String HADOOP_CONF_DIR_PATH = "hadoop.conf.dir.path";

File: azkaban-common/src/main/java/azkaban/flow/CommonJobProperties.java
Patch:
@@ -172,7 +172,6 @@ public class CommonJobProperties {
   public static final String JOBTYPE_CLUSTER_COMPONENTS_DEPENDENCIES = "jobtype.dependency.components";
   public static final String JOB_CLUSTER_COMPONENTS_DEPENDENCIES = "job.dependency.components";
   public static final String JOBTYPE_CLUSTER_COMPONENTS_DEPENDENCIES_EXCLUDED = "jobtype.dependency.components.excluded";
-  public static final String TARGET_CLUSTER = "azkaban.job.target.cluster";
   public static final String TARGET_CLUSTER_CLASSPATH = "azkaban.job.cluster.classpaths";
   public static final String TARGET_CLUSTER_NATIVE_LIB = "azkaban.job.cluster.nativelib";
 }

File: azkaban-common/src/test/java/azkaban/jobtype/JobTypeManagerTest.java
Patch:
@@ -177,7 +177,6 @@ public void testBuildClass() throws Exception {
     assertEquals("commonprop2", props.get("commonprop2"));
     assertEquals("commonprop3", props.get("commonprop3"));
     assertNull(props.get("commonprivate1"));
-    assertNull(props.get(CommonJobProperties.TARGET_CLUSTER));
     assertNull(props.get(CommonJobProperties.TARGET_CLUSTER_CLASSPATH));
     assertNull(props.get(CommonJobProperties.TARGET_CLUSTER_NATIVE_LIB));
   }
@@ -205,7 +204,6 @@ public void testBuildClass2() throws Exception {
     assertEquals("commonprop2", props.get("commonprop2"));
     assertEquals("pluginprops", props.get("commonprop3"));
     assertNull(props.get("commonprivate1"));
-    assertNull(props.get(CommonJobProperties.TARGET_CLUSTER));
     assertNull(props.get(CommonJobProperties.TARGET_CLUSTER_CLASSPATH));
     assertNull(props.get(CommonJobProperties.TARGET_CLUSTER_NATIVE_LIB));
   }

File: azkaban-common/src/main/java/azkaban/cluster/ClusterRouter.java
Patch:
@@ -4,6 +4,7 @@
 import org.apache.hadoop.conf.Configuration;
 
 import java.util.Collection;
+import org.apache.log4j.Logger;
 
 public abstract class ClusterRouter {
   protected final ClusterRegistry clusterRegistry;
@@ -17,6 +18,7 @@ public ClusterRouter(final ClusterRegistry clusterRegistry, final Configuration
    * Gets the information of the cluster that a job should be submitted to.
    */
   public abstract Cluster getCluster(final String jobId, final Props jobProps,
+      final Logger jobLogger,
       final Collection<String> componentDependency);
 
   /**

File: azkaban-common/src/main/java/azkaban/cluster/DisabledClusterRouter.java
Patch:
@@ -4,6 +4,7 @@
 import com.google.common.annotations.VisibleForTesting;
 import java.util.Collection;
 import org.apache.hadoop.conf.Configuration;
+import org.apache.log4j.Logger;
 
 /**
  * An implementation of {@link ClusterRouter} that routes jobs to the UNKNOWN cluster
@@ -20,7 +21,8 @@ public DisabledClusterRouter() {
   }
 
   @Override
-  public Cluster getCluster(final String jobId, final Props jobProps, final Collection<String> componentDependency) {
+  public Cluster getCluster(final String jobId, final Props jobProps,
+      final Logger jobLogger, final Collection<String> componentDependency) {
     return Cluster.UNKNOWN;
   }
 

File: azkaban-common/src/main/java/azkaban/jobtype/JobTypeManager.java
Patch:
@@ -493,7 +493,8 @@ private List<URL> getClusterSpecificURLs(final String jobId, final String jobTyp
       // This job is local with no dependency on a remote cluster, skip routing
       return Collections.emptyList();
     }
-    final Cluster targetCluster = this.clusterRouter.getCluster(jobId, jobProps, components);
+    final Cluster targetCluster = this.clusterRouter.getCluster(jobId, jobProps, logger,
+        components);
 
     if (targetCluster == null || Cluster.UNKNOWN.equals(targetCluster)) {
       return Collections.emptyList();

File: azkaban-exec-server/src/main/java/azkaban/execapp/JobRunner.java
Patch:
@@ -603,11 +603,11 @@ private void doRun() {
     Status finalStatus = this.node.getStatus();
     uploadExecutableNode();
     if (!errorFound && !isKilled()) {
-      fireEvent(Event.create(this, EventType.JOB_STARTED, new EventData(this.node)));
       // End of job in queue and start of execution
       if (this.getTimeInQueue() != -1) {
         this.setTimeInQueue(System.currentTimeMillis() - this.getTimeInQueue());
       }
+      fireEvent(Event.create(this, EventType.JOB_STARTED, new EventData(this.node)));
 
       final Status prepareStatus = prepareJob();
       if (prepareStatus != null) {

File: az-reportal/src/main/java/azkaban/viewer/reportal/ReportalType.java
Patch:
@@ -58,9 +58,9 @@ public void buildJobFiles(final Reportal reportal, final Props propertiesFile,
     }
   },
 
-
-  HiveJob("ReportalHive", "reportalhive", "hadoop"), TeraDataJob(
-      "ReportalTeraData", "reportalteradata", "teradata"),
+  // Removed Teradata Jobtype
+  // Add this line to re-enable Teradata: TeraDataJob("ReportalTeraData", "reportalteradata", "teradata")
+  HiveJob("ReportalHive", "reportalhive", "hadoop"),
   TableauJob("ReportalTableau", "reportaltableau", "hadoop"),
   PrestoJob("ReportalPresto", "reportalpresto", "hadoop"), DataCollectorJob(
       ReportalTypeManager.DATA_COLLECTOR_JOB, ReportalTypeManager.DATA_COLLECTOR_JOB_TYPE, "") {

File: azkaban-exec-server/src/test/java/azkaban/execapp/JobRunnerTest.java
Patch:
@@ -178,7 +178,7 @@ public void testFailedRun() {
     Assert.assertTrue(!runner.isKilled());
     Assert.assertTrue(loader.getNodeUpdateCount(node.getId()) == 3);
     // Check failureMessage and modifiedBy
-    Assert.assertEquals(runner.getNode().getModifiedBy(), "unknown");
+    Assert.assertEquals("unknown", runner.getNode().getModifiedBy());
     Assert.assertEquals(runner.getNode().getFailureMessage(), "java.lang.RuntimeException: Forced"
         + " failure of testJob");
 
@@ -274,9 +274,8 @@ public void testCancelRun() throws Exception {
     Assert.assertTrue(node.getEndTime() - node.getStartTime() < 3000);
     Assert.assertTrue(loader.getNodeUpdateCount(node.getId()) == 3);
     // Check job kill time, user killed the job, and failure message
-    Assert.assertEquals(runner.getNode().getModifiedBy(), "dementor1");
+    Assert.assertEquals("dementor1", runner.getNode().getModifiedBy());
     Assert.assertTrue(runner.getJobKillTime() >= 0);
-    Assert.assertEquals(node.getFailureMessage(), "java.lang.RuntimeException: Forced failure of testJob");
 
     // Log file and output files should not exist.
     final File logFile = new File(runner.getLogFilePath());

File: azkaban-common/src/main/java/azkaban/flow/CommonJobProperties.java
Patch:
@@ -169,4 +169,6 @@ public class CommonJobProperties {
   public static final String FLOW_START_TIMEZONE =
       "azkaban.flow.start.timezone";
 
+  public static final String JOBTYPE_CLUSTER_COMPONENTS_DEPENDENCIES = "jobtype.dependency.components";
+  public static final String JOB_CLUSTER_COMPONENTS_DEPENDENCIES = "job.dependency.components";
 }

File: azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunnerManager.java
Patch:
@@ -281,7 +281,7 @@ public FlowRunnerManager(final Props props,
    * Change the polling interval to the newly specified value and also update the value that's
    * specified in the props
    * @param pollingIntervalMillis The new polling interval.
-   * @param b
+   * @return true if the Polling interval has changed successfully
    */
   public boolean changePollingInterval(long pollingIntervalMillis) {
     long oldVal = this.azkabanProps.getLong(ConfigurationKeys.AZKABAN_POLLING_INTERVAL_MS,

File: az-flow-trigger-dependency-type/kafka-event-trigger/src/main/java/trigger/kafka/KafkaDependencyCheck.java
Patch:
@@ -24,6 +24,7 @@
 import azkaban.flowtrigger.DependencyPluginConfig;
 import com.google.common.base.Preconditions;
 import com.google.common.collect.Sets;
+import com.google.common.util.concurrent.ThreadFactoryBuilder;
 import java.util.Set;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
@@ -45,7 +46,8 @@ public class KafkaDependencyCheck implements DependencyCheck {
   private KafkaEventMonitor dependencyMonitor;
 
   public KafkaDependencyCheck() {
-    this.executorService = Executors.newSingleThreadExecutor();
+    this.executorService = Executors.newSingleThreadExecutor(
+        new ThreadFactoryBuilder().setNameFormat("azk-trigger-dependency").build());
   }
 
   public void remove(final DependencyInstanceContext depContext) {

File: azkaban-common/src/main/java/azkaban/executor/ExecutorHealthChecker.java
Patch:
@@ -19,6 +19,7 @@
 import azkaban.utils.Pair;
 import azkaban.utils.Props;
 import com.google.common.annotations.VisibleForTesting;
+import com.google.common.util.concurrent.ThreadFactoryBuilder;
 import java.time.Duration;
 import java.util.ArrayList;
 import java.util.HashMap;
@@ -64,7 +65,8 @@ public ExecutorHealthChecker(final Props azkProps, final ExecutorLoader executor
     this.executorMaxFailureCount = azkProps.getInt(ConfigurationKeys
         .AZKABAN_EXECUTOR_MAX_FAILURE_COUNT, DEFAULT_EXECUTOR_MAX_FAILURE_COUNT);
     this.alertEmails = azkProps.getStringList(ConfigurationKeys.AZKABAN_ADMIN_ALERT_EMAIL);
-    this.scheduler = Executors.newSingleThreadScheduledExecutor();
+    this.scheduler = Executors.newSingleThreadScheduledExecutor(
+        new ThreadFactoryBuilder().setNameFormat("azk-health-checker").build());
     this.executorLoader = executorLoader;
     this.apiGateway = apiGateway;
     this.alerterHolder = alerterHolder;

File: azkaban-common/src/main/java/azkaban/executor/ExecutorManager.java
Patch:
@@ -31,6 +31,7 @@
 import azkaban.utils.Props;
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.collect.Lists;
+import com.google.common.util.concurrent.ThreadFactoryBuilder;
 import java.io.File;
 import java.io.IOException;
 import java.lang.Thread.State;
@@ -178,7 +179,8 @@ private void setupExecutorFilterList() {
 
   private ExecutorService createExecutorInfoRefresherService() {
     return Executors.newFixedThreadPool(this.azkProps.getInt(
-        ConfigurationKeys.EXECUTORINFO_REFRESH_MAX_THREADS, 5));
+        ConfigurationKeys.EXECUTORINFO_REFRESH_MAX_THREADS, 5),
+        new ThreadFactoryBuilder().setNameFormat("azk-refresher-pool-%d").build());
   }
 
   /**

File: azkaban-common/src/main/java/azkaban/metric/MetricReportManager.java
Patch:
@@ -16,6 +16,7 @@
 
 package azkaban.metric;
 
+import com.google.common.util.concurrent.ThreadFactoryBuilder;
 import java.util.ArrayList;
 import java.util.LinkedList;
 import java.util.List;
@@ -55,7 +56,8 @@ public class MetricReportManager {
 
   private MetricReportManager() {
     logger.debug("Instantiating Metric Manager");
-    this.executorService = Executors.newFixedThreadPool(MAX_EMITTER_THREADS);
+    this.executorService = Executors.newFixedThreadPool(MAX_EMITTER_THREADS,
+        new ThreadFactoryBuilder().setNameFormat("azk-metric-pool-%d").build());
     this.metrics = new ArrayList<>();
     this.metricEmitters = new LinkedList<>();
     enableManager();

File: azkaban-common/src/main/java/azkaban/utils/DependencyTransferManager.java
Patch:
@@ -19,6 +19,7 @@
 import azkaban.Constants;
 import azkaban.spi.DependencyFile;
 import azkaban.spi.Storage;
+import com.google.common.util.concurrent.ThreadFactoryBuilder;
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.util.Set;
@@ -80,7 +81,8 @@ public void downloadAllDependencies(final Set<DependencyFile> deps) {
 
     ensureIsEnabled();
 
-    ExecutorService threadPool = Executors.newFixedThreadPool(NUM_THREADS);
+    ExecutorService threadPool = Executors.newFixedThreadPool(NUM_THREADS,
+        new ThreadFactoryBuilder().setNameFormat("azk-dependency-pool-%d").build());
     CompletableFuture[] taskFutures = deps
         .stream()
         .map(f -> CompletableFuture.runAsync(() -> downloadDependency(f), threadPool))

File: azkaban-common/src/main/java/azkaban/utils/TrackingThreadPool.java
Patch:
@@ -15,6 +15,7 @@
  */
 package azkaban.utils;
 
+import com.google.common.util.concurrent.ThreadFactoryBuilder;
 import java.util.Collections;
 import java.util.Map;
 import java.util.Set;
@@ -50,7 +51,8 @@ public class TrackingThreadPool extends ThreadPoolExecutor {
   public TrackingThreadPool(final int corePoolSize, final int maximumPoolSize,
       final long keepAliveTime, final TimeUnit unit, final BlockingQueue<Runnable> workQueue,
       final ThreadPoolExecutingListener listener) {
-    super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue);
+    super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,
+        new ThreadFactoryBuilder().setNameFormat("azk-tracking-pool-%d").build());
     if (listener != null) {
       this.executingListener = listener;
     }

File: azkaban-exec-server/src/main/java/azkaban/dag/DagService.java
Patch:
@@ -49,7 +49,7 @@ public DagService(final ExecutorServiceUtils executorServiceUtils) {
     // Give the thread a name to make debugging easier.
     this.executorServiceUtils = executorServiceUtils;
     final ThreadFactory namedThreadFactory = new ThreadFactoryBuilder()
-        .setNameFormat("Dag-service").build();
+        .setNameFormat("azk-dag-service").build();
     this.executorService = Executors.newSingleThreadExecutor(namedThreadFactory);
   }
 

File: azkaban-exec-server/src/main/java/azkaban/execapp/FlowRampManager.java
Patch:
@@ -44,6 +44,7 @@
 import azkaban.utils.ThreadPoolExecutingListener;
 import azkaban.utils.TimeUtils;
 import com.google.common.annotations.VisibleForTesting;
+import com.google.common.util.concurrent.ThreadFactoryBuilder;
 import java.io.File;
 import java.io.IOException;
 import java.util.HashMap;
@@ -708,7 +709,8 @@ private class PollingService {
 
     public PollingService(final int statusPollingIntervalMinutes, final FlowRampManager.PollingCriteria pollingCriteria) {
       this.statusPollingIntervalMinutes = statusPollingIntervalMinutes;
-      this.scheduler = Executors.newSingleThreadScheduledExecutor();
+      this.scheduler = Executors.newSingleThreadScheduledExecutor(
+          new ThreadFactoryBuilder().setNameFormat("azk-flowramp-sched").build());
       this.pollingCriteria = pollingCriteria;
     }
 

File: azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java
Patch:
@@ -69,6 +69,7 @@
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.io.Files;
+import com.google.common.util.concurrent.ThreadFactoryBuilder;
 import java.io.File;
 import java.io.IOException;
 import java.security.AccessControlContext;
@@ -254,7 +255,8 @@ AlerterHolder getAlerterHolder() {
   public void run() {
     try {
       if (this.executorService == null) {
-        this.executorService = Executors.newFixedThreadPool(this.numJobThreads);
+        this.executorService = Executors.newFixedThreadPool(this.numJobThreads,
+            new ThreadFactoryBuilder().setNameFormat("azk-job-pool-%d").build());
       }
       setupFlowExecution();
       this.flow.setStartTime(System.currentTimeMillis());

File: azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunnerManager.java
Patch:
@@ -59,6 +59,7 @@
 import azkaban.utils.UndefinedPropertyException;
 import com.codahale.metrics.Timer;
 import com.google.common.base.Preconditions;
+import com.google.common.util.concurrent.ThreadFactoryBuilder;
 import java.io.File;
 import java.io.IOException;
 import java.lang.Thread.State;
@@ -1043,7 +1044,8 @@ private class PollingService {
 
     public PollingService(final long pollingIntervalMs, final PollingCriteria pollingCriteria) {
       this.pollingIntervalMs = pollingIntervalMs;
-      this.scheduler = Executors.newSingleThreadScheduledExecutor();
+      this.scheduler = Executors.newSingleThreadScheduledExecutor(
+          new ThreadFactoryBuilder().setNameFormat("azk-polling-service").build());
       this.pollingCriteria = pollingCriteria;
     }
 

File: azkaban-exec-server/src/main/java/azkaban/execapp/ProjectCacheCleaner.java
Patch:
@@ -20,6 +20,7 @@
 import azkaban.utils.FileIOUtils;
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.base.Preconditions;
+import com.google.common.util.concurrent.ThreadFactoryBuilder;
 import java.io.File;
 import java.io.FilenameFilter;
 import java.nio.file.Files;
@@ -101,7 +102,8 @@ public ProjectCacheCleaner(final File projectCacheDir, final double percentageOf
         projectCacheDir.toPath(), this.percentageOfDisk, this.throttlePercentage);
 
     emptyQCond = barrier.newCondition();
-    deletionService = Executors.newFixedThreadPool(CLEANING_SERVICE_THREAD_NUM);
+    deletionService = Executors.newFixedThreadPool(CLEANING_SERVICE_THREAD_NUM,
+        new ThreadFactoryBuilder().setNameFormat("azk-cleaner-pool-%d").build());
   }
 
   /**

File: azkaban-exec-server/src/main/java/azkaban/execapp/TriggerManager.java
Patch:
@@ -24,6 +24,7 @@
 import azkaban.trigger.TriggerAction;
 import azkaban.trigger.builtin.SlaAlertAction;
 import azkaban.trigger.builtin.SlaChecker;
+import com.google.common.util.concurrent.ThreadFactoryBuilder;
 import java.time.Duration;
 import java.util.ArrayList;
 import java.util.HashMap;
@@ -46,7 +47,8 @@ public class TriggerManager {
 
   @Inject
   public TriggerManager() {
-    this.scheduledService = Executors.newScheduledThreadPool(SCHEDULED_THREAD_POOL_SIZE);
+    this.scheduledService = Executors.newScheduledThreadPool(SCHEDULED_THREAD_POOL_SIZE,
+        new ThreadFactoryBuilder().setNameFormat("azk-trigger-pool-%d").build());
   }
 
   private Condition createCondition(final SlaOption sla, final int execId, final String checkerName,

File: azkaban-exec-server/src/main/java/azkaban/execapp/event/JobCallbackRequestMaker.java
Patch:
@@ -7,6 +7,7 @@
 import static azkaban.Constants.JobCallbackProperties.JOBCALLBACK_THREAD_POOL_SIZE;
 
 import azkaban.utils.Props;
+import com.google.common.util.concurrent.ThreadFactoryBuilder;
 import java.io.BufferedReader;
 import java.io.IOException;
 import java.io.InputStreamReader;
@@ -89,7 +90,8 @@ private JobCallbackRequestMaker(final Props props) {
     logger.info("Jobcall thread pool size: " + jobCallbackThreadPoolSize);
 
     final ExecutorService executorService =
-        Executors.newFixedThreadPool(jobCallbackThreadPoolSize);
+        Executors.newFixedThreadPool(jobCallbackThreadPoolSize,
+            new ThreadFactoryBuilder().setNameFormat("azk-callback-pool-%d").build());
     this.futureRequestExecutionService =
         new FutureRequestExecutionService(httpClient, executorService);
   }

File: azkaban-web-server/src/main/java/azkaban/flowtrigger/FlowTriggerExecutionCleaner.java
Patch:
@@ -17,6 +17,7 @@
 package azkaban.flowtrigger;
 
 import azkaban.flowtrigger.database.FlowTriggerInstanceLoader;
+import com.google.common.util.concurrent.ThreadFactoryBuilder;
 import java.time.Duration;
 import java.util.concurrent.Executors;
 import java.util.concurrent.ScheduledExecutorService;
@@ -40,7 +41,8 @@ public class FlowTriggerExecutionCleaner {
   @Inject
   public FlowTriggerExecutionCleaner(final FlowTriggerInstanceLoader loader) {
     this.flowTriggerInstanceLoader = loader;
-    this.scheduler = Executors.newSingleThreadScheduledExecutor();
+    this.scheduler = Executors.newSingleThreadScheduledExecutor(
+        new ThreadFactoryBuilder().setNameFormat("azk-trigger-cleaner").build());
   }
 
   public void start() {

File: azkaban-web-server/src/main/java/azkaban/flowtrigger/TriggerInstanceProcessor.java
Patch:
@@ -27,6 +27,7 @@
 import azkaban.utils.Emailer;
 import azkaban.utils.TimeUtils;
 import com.google.common.base.Preconditions;
+import com.google.common.util.concurrent.ThreadFactoryBuilder;
 import java.text.SimpleDateFormat;
 import java.util.Date;
 import java.util.List;
@@ -60,7 +61,8 @@ public TriggerInstanceProcessor(final ExecutorManagerAdapter executorManager,
     this.emailer = emailer;
     this.executorManager = executorManager;
     this.flowTriggerInstanceLoader = flowTriggerInstanceLoader;
-    this.executorService = Executors.newFixedThreadPool(THREAD_POOL_SIZE);
+    this.executorService = Executors.newFixedThreadPool(THREAD_POOL_SIZE,
+        new ThreadFactoryBuilder().setNameFormat("azk-trigger-instance-pool-%d").build());
   }
 
   private void executeFlowAndUpdateExecID(final TriggerInstance triggerInst) {

File: azkaban-common/src/main/java/azkaban/executor/ExecutableFlowBase.java
Patch:
@@ -115,7 +115,7 @@ public String getFlowId() {
   }
 
   public String getFlowName() {
-    return String.format(FLOW_ID_FORMAT_PATTERN, this.getProjectName(), this.flowId);
+    return String.format(FLOW_ID_FORMAT_PATTERN, this.getProjectName(), this.getFlowId());
   }
 
   public int getRampPercentageId() {

File: azkaban-common/src/main/java/azkaban/executor/ExecutableNode.java
Patch:
@@ -66,7 +66,7 @@ public class ExecutableNode {
   private Set<String> outNodes = new HashSet<>();
   private Props inputProps;
   private Props outputProps;
-  private Props rampProps = new Props();
+  private Props rampProps;
   private long delayExecution = 0;
   private ArrayList<ExecutionAttempt> pastAttempts = null;
   private String condition;

File: azkaban-common/src/main/java/azkaban/ramppolicy/AbstractRampPolicy.java
Patch:
@@ -38,7 +38,7 @@ protected AbstractRampPolicy(final Props sysProps, final Props privateProps) {
   public boolean check(ExecutableFlow flow, ExecutableRamp executableRamp) {
     preprocess(executableRamp);
 
-    if (!executableRamp.getState().isActive() || executableRamp.getState().isPaused() || !executableRamp.getState().isRamping()) {
+    if (executableRamp.isNotTestable()) {
       return false; // filter out inactive or paused executable ramp flow
     }
 

File: azkaban-common/src/main/java/azkaban/ramppolicy/SimpleRampPolicy.java
Patch:
@@ -11,13 +11,13 @@
 public class SimpleRampPolicy extends AbstractRampPolicy {
   private static final int MAX_RAMP_STAGE = 100;
 
-  protected SimpleRampPolicy(Props sysProps, Props privateProps) {
+  public SimpleRampPolicy(Props sysProps, Props privateProps) {
     super(sysProps, privateProps);
   }
 
   @Override
   protected boolean isRampTestEnabled(ExecutableFlow flow, ExecutableRamp executableRamp) {
-    int rampStage = executableRamp.getState().getRampStage(); // scaled from 0 - 100 to represent the ramp percentage
+    int rampStage = executableRamp.getStage(); // scaled from 0 - 100 to represent the ramp percentage
 
     if (rampStage >= getMaxRampStage()) {
       return true;

File: azkaban-exec-server/src/main/java/azkaban/execapp/JobRunner.java
Patch:
@@ -714,7 +714,7 @@ private Status prepareJob() throws RuntimeException {
 
       Props props = this.node.getRampProps();
       if (props != null) {
-        logger.info("Attached Ramp Props : [" + props.toString() + "]");
+        logger.info(String.format("RAMP_JOB_ATTACH_PROPS : (id = %s, props = %s)", this.node.getId(), props.toString()));
         this.props.putAll(props);
       }
 

File: azkaban-exec-server/src/main/java/azkaban/execapp/event/JobCallbackUtil.java
Patch:
@@ -38,11 +38,12 @@
 import org.apache.http.client.methods.HttpRequestBase;
 import org.apache.http.entity.StringEntity;
 import org.apache.http.message.BasicHeader;
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 public class JobCallbackUtil {
 
-  private static final Logger logger = Logger.getLogger(JobCallbackUtil.class);
+  private static final Logger logger = LoggerFactory.getLogger(JobCallbackUtil.class);
 
   private static final Map<JobCallbackStatusEnum, String> firstJobcallbackPropertyMap =
       new HashMap<>(

File: azkaban-exec-server/src/test/java/azkaban/execapp/event/JobCallbackRequestMakerTest.java
Patch:
@@ -25,18 +25,18 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 import org.apache.http.client.methods.HttpRequestBase;
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 import org.junit.Test;
 import org.mortbay.jetty.Server;
 import org.mortbay.jetty.servlet.Context;
 import org.mortbay.jetty.servlet.ServletHolder;
+import org.slf4j.LoggerFactory;
 
 public class JobCallbackRequestMakerTest {
 
-  private static final Logger logger = Logger
-      .getLogger(JobCallbackRequestMakerTest.class);
+  private static final Logger logger = LoggerFactory.getLogger(JobCallbackRequestMakerTest.class);
 
   private static final String SLEEP_DURATION_PARAM = "sleepDuration";
   private static final String STATUS_CODE_PARAM = "returnedStatusCode";

File: azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java
Patch:
@@ -284,6 +284,8 @@ public void run() {
       } finally {
         this.fireEventListeners(
             Event.create(this, EventType.FLOW_FINISHED, new EventData(this.flow)));
+        this.logger
+            .info("Created " + EventType.FLOW_FINISHED + " event for " + flow.getExecutionId());
         // In polling model, executor will be responsible for sending alerting emails when a flow
         // finishes.
         // Todo jamiesjc: switch to event driven model and alert on FLOW_FINISHED event.
@@ -903,7 +905,7 @@ private void runExecutableNode(final ExecutableNode node) throws IOException {
     prepareJobProperties(node);
 
     node.setStatus(Status.QUEUED);
-    
+
     String jobId = node.getId();
     String jobType = node.getInputProps().getString("type");
     Props rampProps = this.flow.getRampPropsForJob(jobId, jobType);

File: azkaban-common/src/main/java/azkaban/executor/ExecutorApiGateway.java
Patch:
@@ -77,7 +77,7 @@ Map<String, Object> callWithExecutionId(final String host, final int port,
 
       return callForJsonObjectMap(host, port, "/executor", paramList);
     } catch (final IOException e) {
-      throw new ExecutorManagerException(e);
+      throw new ExecutorManagerException(e.getMessage(), e);
     }
   }
 

File: azkaban-common/src/test/java/azkaban/executor/ExecutionRampDaoTest.java
Patch:
@@ -342,7 +342,7 @@ public void testUpdateExecutableRamp() throws ExecutorManagerException {
 
     assertThat(updatedRecord.get("dali").getState().getNumOfFailure()).isEqualTo(1);
     assertThat(updatedRecord.get("dali").getState().getNumOfSuccess()).isEqualTo(3);
-    assertThat(updatedRecord.get("dali").getState().getNumOfTrail()).isEqualTo(0);
+    assertThat(updatedRecord.get("dali").getState().getNumOfTrail()).isEqualTo(5);
     assertThat(updatedRecord.get("dali").getState().getNumOfIgnored()).isEqualTo(1);
     assertThat(updatedRecord.get("dali").getState().getLastUpdatedTime()).isGreaterThan(0);
   }

File: azkaban-common/src/test/java/azkaban/ServiceProviderTest.java
Patch:
@@ -108,7 +108,7 @@ public void testHDFSStorageInjection() throws Exception {
     props.put("database.type", "h2");
     props.put("h2.path", "h2");
     props.put(Constants.ConfigurationKeys.AZKABAN_STORAGE_TYPE, AZKABAN_TEST_HDFS_STORAGE_TYPE);
-    props.put(Constants.ConfigurationKeys.HADOOP_CONF_DIR_PATH, "./");
+    props.put(Constants.ConfigurationKeys.HADOOP_CONF_DIR_PATH, "./src/test/resources/hdfs_conf/");
     props.put(Constants.ConfigurationKeys.AZKABAN_STORAGE_HDFS_PROJECT_ROOT_URI, AZKABAN_TEST_STORAGE_PROJECT_HDFS_URI);
     props.put(Constants.ConfigurationKeys.AZKABAN_STORAGE_CACHE_DEPENDENCY_ROOT_URI, AZKABAN_TEST_STORAGE_DEPENDENCY_HDFS_URI);
     props.put(Constants.ConfigurationKeys.AZKABAN_STORAGE_ORIGIN_DEPENDENCY_ROOT_URI, AZKABAN_TEST_STORAGE_CHTTP_DEPENDENCY_ROOT_URI);

File: azkaban-common/src/main/java/azkaban/storage/StorageManager.java
Patch:
@@ -34,7 +34,6 @@
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
-import java.nio.charset.StandardCharsets;
 import java.util.Arrays;
 import java.util.List;
 import javax.inject.Inject;
@@ -191,8 +190,8 @@ private void validateChecksum(final File file, final ProjectFileHandler pfh) thr
     checkState(Arrays.equals(pfh.getMd5Hash(), hash),
         String.format("MD5 HASH Failed. project ID: %d version: %d Expected: %s Actual: %s",
             pfh.getProjectId(), pfh.getVersion(),
-            new String(pfh.getMd5Hash(), StandardCharsets.UTF_8),
-            new String(hash, StandardCharsets.UTF_8))
+            Arrays.toString(pfh.getMd5Hash()),
+            Arrays.toString(hash))
     );
   }
 

File: azkaban-common/src/test/java/azkaban/storage/StorageCleanerTest.java
Patch:
@@ -67,7 +67,7 @@ public void setUp() throws Exception {
     when(this.storage.delete("14/14-10.zip")).thenReturn(true);
     when(this.storage.delete("14/14-9.zip")).thenReturn(true);
     // This one shouldn't be deleted because it's shared with latest version
-    when(this.storage.delete("14/14-8.zip")).thenThrow(Exception.class);
+    when(this.storage.delete("14/14-8.zip")).thenThrow(RuntimeException.class);
     when(this.storage.delete("14/14-7.zip")).thenReturn(false);
     when(this.databaseOperator.update(any(), anyVararg())).thenReturn(1);
   }

File: az-hadoop-jobtype-plugin/src/main/java/azkaban/jobtype/HadoopSecureHiveWrapper.java
Patch:
@@ -145,8 +145,6 @@ public static void runHive(String[] args) throws Exception {
           "Can't process arguments from session state");
     }
 
-    logger.info("Executing query: " + hiveScript);
-
     CliDriver cli = new CliDriver();
     Map<String, String> hiveVarMap = getHiveVarMap(args);
 
@@ -156,7 +154,9 @@ public static void runHive(String[] args) throws Exception {
       cli.setHiveVariables(getHiveVarMap(args));
     }
 
+    logger.info("Beginning execution of hive script.");
     int returnCode = cli.processFile(hiveScript);
+    logger.info("Completed execution of hive script.");
     if (returnCode != 0) {
       logger.warn("Got exception " + returnCode + " from line: " + hiveScript);
       throw new HiveQueryExecutionException(returnCode, hiveScript);

File: az-hadoop-jobtype-plugin/src/main/java/azkaban/jobtype/HadoopSecurePigWrapper.java
Patch:
@@ -77,11 +77,13 @@ public Void run() throws Exception {
   @SuppressWarnings("deprecation")
   public static void runPigJob(String[] args) throws Exception {
     PigStats stats = null;
+    System.out.println("Beginning execution of pig script.");
     if (props.getBoolean("pig.listener.visualizer", false) == true) {
       stats = PigRunner.run(args, new AzkabanPigListener(props));
     } else {
       stats = PigRunner.run(args, null);
     }
+    System.out.println("Completed execution of pig script.");
 
     dumpHadoopCounters(stats);
 

File: azkaban-common/src/main/java/azkaban/jobExecutor/ProcessJob.java
Patch:
@@ -304,7 +304,7 @@ public void run() throws Exception {
         }
         throw new RuntimeException(e);
       } finally {
-        info("Process completed "
+        info("Process with id " + this.process.getProcessId() + " completed "
             + (this.success ? "successfully" : "unsuccessfully") + " in "
             + ((System.currentTimeMillis() - startMs) / 1000) + " seconds.");
       }

File: azkaban-common/src/main/java/azkaban/jobExecutor/utils/process/AzkabanProcess.java
Patch:
@@ -90,9 +90,9 @@ public void run() throws IOException {
     try {
       this.processId = processId(this.process);
       if (this.processId == 0) {
-        this.logger.debug("Spawned thread with unknown process id");
+        this.logger.info("Spawned process with unknown process id");
       } else {
-        this.logger.debug("Spawned thread with process id " + this.processId);
+        this.logger.info("Spawned process with id " + this.processId);
       }
 
       this.startupLatch.countDown();

File: az-hadoop-jobtype-plugin/src/main/java/azkaban/jobtype/HadoopJobUtils.java
Patch:
@@ -125,7 +125,7 @@ public static HadoopSecurityManager loadHadoopSecurityManager(Props props, Logge
     HadoopSecurityManager hadoopSecurityManager = null;
 
     try {
-      Method getInstanceMethod = hadoopSecurityManagerClass.getMethod("createInstance", Props.class);
+      Method getInstanceMethod = hadoopSecurityManagerClass.getMethod("getInstance", Props.class);
       hadoopSecurityManager = (HadoopSecurityManager) getInstanceMethod.invoke(
           hadoopSecurityManagerClass, props);
     } catch (InvocationTargetException e) {

File: az-hdfs-viewer/src/main/java/azkaban/viewer/hdfs/HdfsBrowserServlet.java
Patch:
@@ -125,7 +125,7 @@ private HadoopSecurityManager loadHadoopSecurityManager(Props props,
 
     try {
       Method getInstanceMethod =
-          hadoopSecurityManagerClass.getMethod("createInstance", Props.class);
+          hadoopSecurityManagerClass.getMethod("getInstance", Props.class);
       hadoopSecurityManager =
           (HadoopSecurityManager) getInstanceMethod.invoke(
               hadoopSecurityManagerClass, props);

File: az-reportal/src/main/java/azkaban/viewer/reportal/ReportalServlet.java
Patch:
@@ -172,7 +172,7 @@ private HadoopSecurityManager loadHadoopSecurityManager(final Props props,
 
     try {
       final Method getInstanceMethod =
-          hadoopSecurityManagerClass.getMethod("createInstance", Props.class);
+          hadoopSecurityManagerClass.getMethod("getInstance", Props.class);
       hadoopSecurityManager =
           (HadoopSecurityManager) getInstanceMethod.invoke(
               hadoopSecurityManagerClass, props);

File: azkaban-common/src/main/java/azkaban/jobExecutor/ProcessJob.java
Patch:
@@ -58,7 +58,7 @@ public class ProcessJob extends AbstractProcessJob {
   public static final String KRB5CCNAME = "KRB5CCNAME";
   private static final Duration KILL_TIME = Duration.ofSeconds(30);
   private static final String MEMCHECK_ENABLED = "memCheck.enabled";
-  private static final String CHOWN = "chown";
+  private static final String CHOWN = "/bin/chown";
   private static final String CREATE_FILE = "touch";
   private static final int SUCCESSFUL_EXECUTION = 0;
   private static final String TEMP_FILE_NAME = "user_can_write";

File: az-hadoop-jobtype-plugin/src/main/java/azkaban/jobtype/HadoopJavaJobRunnerMain.java
Patch:
@@ -26,6 +26,7 @@
 import java.lang.reflect.Constructor;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
+import java.lang.reflect.UndeclaredThrowableException;
 import java.nio.charset.Charset;
 import java.nio.charset.StandardCharsets;
 import java.nio.file.Files;
@@ -222,7 +223,7 @@ public void run() {
 
   private void runMethodAsUser(Properties props, final Object obj,
       final String runMethod, final UserGroupInformation ugi)
-      throws IOException, InterruptedException {
+      throws IOException, InterruptedException, UndeclaredThrowableException {
     ugi.doAs(new PrivilegedExceptionAction<Void>() {
       @Override
       public Void run() throws Exception {

File: az-hadoop-jobtype-plugin/src/main/java/azkaban/jobtype/JavaJobRunnerMain.java
Patch:
@@ -28,6 +28,7 @@
 import java.lang.reflect.Constructor;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
+import java.lang.reflect.UndeclaredThrowableException;
 import java.security.PrivilegedExceptionAction;
 import java.util.HashMap;
 import java.util.LinkedHashMap;
@@ -167,7 +168,7 @@ public void run() {
   }
 
   private void runMethodAsProxyUser(Properties props, final Object obj,
-      final String runMethod) throws IOException, InterruptedException {
+      final String runMethod) throws IOException, InterruptedException, UndeclaredThrowableException {
     UserGroupInformation ugi =
         SecurityUtils.getProxiedUser(props, _logger, new Configuration());
     _logger.info("user " + ugi + " authenticationMethod "

File: azkaban-solo-server/src/test/java/azkaban/soloserver/AzkabanSingleServerTest.java
Patch:
@@ -86,6 +86,7 @@ public void setUp() throws Exception {
     props.put("server.useSSL", "true");
     props.put("jetty.use.ssl", "false");
     props.put("user.manager.xml.file", new File(confPath, "azkaban-users.xml").getPath());
+    props.put("user.manager.class", "azkaban.user.XmlUserManager");
     props.put(ConfigurationKeys.EXECUTOR_PORT, "12321");
 
     // Quartz settings

File: azkaban-web-server/src/main/java/azkaban/webapp/AzkabanWebServerModule.java
Patch:
@@ -27,7 +27,6 @@
 import azkaban.flowtrigger.plugin.FlowTriggerDependencyPluginManager;
 import azkaban.scheduler.ScheduleLoader;
 import azkaban.scheduler.TriggerBasedScheduleLoader;
-import azkaban.user.FileWatcher;
 import azkaban.user.UserManager;
 import azkaban.user.XmlUserManager;
 import azkaban.utils.Props;
@@ -103,7 +102,7 @@ public UserManager createUserManager(final Props props) {
         throw new RuntimeException(e);
       }
     } else {
-      manager = new XmlUserManager(props, FileWatcher::new);
+      manager = new XmlUserManager(props);
     }
     return manager;
   }

File: az-hadoop-jobtype-plugin/src/main/java/azkaban/jobtype/HadoopHiveJob.java
Patch:
@@ -52,7 +52,7 @@ public HadoopHiveJob(String jobid, Props sysProps, Props jobProps, Logger log) {
   public void run() throws Exception {
     setupHadoopJobProperties();
     HadoopConfigurationInjector.prepareResourcesToInject(getJobProps(), getWorkingDirectory());
-    hadoopProxy.setupPropsForProxy(getAllProps(), getJobProps(), getLog());
+    getHadoopProxy().setupPropsForProxy(getAllProps(), getJobProps(), getLog());
     super.run();
   }
 
@@ -174,6 +174,6 @@ public void cancel() throws InterruptedException {
 
     info("Cancel called.  Killing the Hive launched MR jobs on the cluster");
 
-    hadoopProxy.killAllSpawnedHadoopJobs(getJobProps(), getLog());
+    getHadoopProxy().killAllSpawnedHadoopJobs(getJobProps(), getLog());
   }
 }

File: az-hadoop-jobtype-plugin/src/main/java/azkaban/jobtype/HadoopJavaJob.java
Patch:
@@ -115,7 +115,7 @@ protected List<String> getClassPaths() {
   public void run() throws Exception {
     setupHadoopJobProperties();
     HadoopConfigurationInjector.prepareResourcesToInject(getJobProps(), getWorkingDirectory());
-    hadoopProxy.setupPropsForProxy(getAllProps(), getJobProps(), getLog());
+    getHadoopProxy().setupPropsForProxy(getAllProps(), getJobProps(), getLog());
     super.run();
   }
 
@@ -142,6 +142,6 @@ public void cancel() throws InterruptedException {
 
     info("Cancel called.  Killing the launched MR jobs on the cluster");
 
-    hadoopProxy.killAllSpawnedHadoopJobs(getJobProps(), getLog());
+    getHadoopProxy().killAllSpawnedHadoopJobs(getJobProps(), getLog());
   }
 }

File: az-hadoop-jobtype-plugin/src/main/java/azkaban/jobtype/HadoopPigJob.java
Patch:
@@ -69,7 +69,7 @@ public HadoopPigJob(String jobid, Props sysProps, Props jobProps, Logger log) {
   public void run() throws Exception {
     setupHadoopJobProperties();
     HadoopConfigurationInjector.prepareResourcesToInject(getJobProps(), getWorkingDirectory());
-    hadoopProxy.setupPropsForProxy(getAllProps(), getJobProps(), getLog());
+    getHadoopProxy().setupPropsForProxy(getAllProps(), getJobProps(), getLog());
     super.run();
   }
 
@@ -262,6 +262,6 @@ public void cancel() throws InterruptedException {
 
     info("Cancel called.  Killing the Pig launched MR jobs on the cluster");
 
-    hadoopProxy.killAllSpawnedHadoopJobs(getJobProps(), getLog());
+    getHadoopProxy().killAllSpawnedHadoopJobs(getJobProps(), getLog());
   }
 }

File: az-hadoop-jobtype-plugin/src/main/java/azkaban/jobtype/HadoopProxy.java
Patch:
@@ -36,7 +36,8 @@ public class HadoopProxy {
   private String userToProxy = null;
   private File tokenFile = null;
 
-  public HadoopProxy() {
+  public HadoopProxy(Props sysProps, Props jobProps, final Logger logger) {
+    init(sysProps, jobProps, logger);
   }
 
   public boolean isProxyEnabled() {
@@ -50,7 +51,7 @@ public boolean isProxyEnabled() {
    * @param jobProps job properties
    * @param logger logger handler
    */
-  public void init(Props sysProps, Props jobProps, final Logger logger) {
+  private void init(Props sysProps, Props jobProps, final Logger logger) {
     shouldProxy = sysProps.getBoolean(HadoopSecurityManager.ENABLE_PROXYING, false);
     jobProps.put(HadoopSecurityManager.ENABLE_PROXYING, Boolean.toString(shouldProxy));
     obtainTokens = sysProps.getBoolean(HadoopSecurityManager.OBTAIN_BINARY_TOKEN, false);

File: az-hadoop-jobtype-plugin/src/main/java/azkaban/jobtype/HadoopSparkJob.java
Patch:
@@ -302,7 +302,7 @@ public Props appendExtraProps(Props props) {
   @Override
   public void run() throws Exception {
     HadoopConfigurationInjector.prepareResourcesToInject(getJobProps(), getWorkingDirectory());
-    hadoopProxy.setupPropsForProxy(getAllProps(), getJobProps(), getLog());
+    getHadoopProxy().setupPropsForProxy(getAllProps(), getJobProps(), getLog());
     setupHadoopJobProperties();
     super.run();
   }
@@ -592,6 +592,6 @@ public void cancel() throws InterruptedException {
 
     info("Cancel called.  Killing the launched Spark jobs on the cluster");
 
-    hadoopProxy.killAllSpawnedHadoopJobs(getJobProps(), getLog());
+    getHadoopProxy().killAllSpawnedHadoopJobs(getJobProps(), getLog());
   }
 }

File: az-hadoop-jobtype-plugin/src/main/java/azkaban/jobtype/IHadoopJob.java
Patch:
@@ -18,9 +18,9 @@
 public interface IHadoopJob {
 
   /**
-   * Hadoop Proxy Wrapper Object
+   * Get HadoopProxy Instance
    */
-  HadoopProxy hadoopProxy = new HadoopProxy();
+  HadoopProxy getHadoopProxy();
 
   /**
    * Setup Hadoop-related Job Properties

File: azkaban-exec-server/src/main/java/azkaban/execapp/JMXHttpServlet.java
Patch:
@@ -68,12 +68,13 @@ protected void doPost(final HttpServletRequest req, final HttpServletResponse re
     final Map<String, Object> ret = new HashMap<>();
 
     if (hasParam(req, JMX_GET_MBEANS)) {
-      ret.put("mbeans", this.server.mbeanRegistrationManager.getMBeanNames());
+      ret.put("mbeans", this.server.getMBeanRegistrationManager().getMBeanNames());
     } else if (hasParam(req, JMX_GET_ALL_MBEAN_ATTRIBUTES)) {
       if (!hasParam(req, JMX_MBEAN)) {
         ret.put("error", "Parameters 'mbean' must be set");
       } else {
-        ret.putAll(this.server.mbeanRegistrationManager.getMBeanResult(getParam(req, JMX_MBEAN)));
+        ret.putAll(
+            this.server.getMBeanRegistrationManager().getMBeanResult(getParam(req, JMX_MBEAN)));
       }
     }
 

File: azkaban-common/src/test/java/azkaban/utils/OsMemoryUtilTest.java
Patch:
@@ -34,23 +34,23 @@ public void getOsTotalFreeMemorySize() {
             "SwapFree:    4 kB",
             "Foo: 10 kB");
 
-    final long size = this.util.getOsTotalFreeMemorySizeFromStrings(lines);
+    final long size = this.util.getOsTotalFreeMemorySizeFromStrings(lines, OsMemoryUtil.MEM_KEYS);
     assertEquals(10, size);
   }
 
   @Test
   public void getOsTotalFreeMemorySizeMissingEntry() {
     final List<String> lines = Arrays.asList("MemFree:        1 kB", "Foo: 10 kB");
 
-    final long size = this.util.getOsTotalFreeMemorySizeFromStrings(lines);
+    final long size = this.util.getOsTotalFreeMemorySizeFromStrings(lines, OsMemoryUtil.MEM_KEYS);
     assertEquals(0, size);
   }
 
   @Test
   public void getOsTotalFreeMemorySizeWrongEntry() {
     final List<String> lines = Collections.singletonList("MemFree:        foo kB");
 
-    final long size = this.util.getOsTotalFreeMemorySizeFromStrings(lines);
+    final long size = this.util.getOsTotalFreeMemorySizeFromStrings(lines, OsMemoryUtil.MEM_KEYS);
     assertEquals(0, size);
   }
 

File: az-hadoop-jobtype-plugin/src/main/java/azkaban/jobtype/SparkJobArg.java
Patch:
@@ -1,7 +1,7 @@
 package azkaban.jobtype;
 
-public enum SparkJobArg {
 
+public enum SparkJobArg {
   // standard spark submit arguments, ordered in the spark-submit --help order
   MASTER("master", false), // just to trick the eclipse formatter
   DEPLOY_MODE("deploy-mode", false), //
@@ -55,5 +55,4 @@ public enum SparkJobArg {
   final String sparkParamName;
 
   final boolean needSpecialTreatment;
-
 }

File: az-hadoop-jobtype-plugin/src/main/java/azkaban/jobtype/StatsUtils.java
Patch:
@@ -13,7 +13,6 @@
  * License for the specific language governing permissions and limitations under
  * the License.
  */
-
 package azkaban.jobtype;
 
 import java.io.FileNotFoundException;
@@ -27,7 +26,6 @@
 import java.util.Map;
 import java.util.Properties;
 import java.util.Set;
-
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.fs.FileSystem;
 import org.apache.hadoop.fs.Path;
@@ -38,12 +36,13 @@
 import org.apache.log4j.Logger;
 import org.apache.pig.impl.util.ObjectSerializer;
 
+
 public class StatsUtils {
 
   private static Logger logger = Logger.getLogger(StatsUtils.class);
 
   private static final Set<String> JOB_CONF_KEYS = new HashSet<String>(
-      Arrays.asList(new String[] {
+      Arrays.asList(new String[]{
           "mapred.job.map.memory.mb",
           "mapred.job.reduce.memory.mb",
           "mapred.child.java.opts",

File: azkaban-common/src/main/java/azkaban/executor/ConnectorParams.java
Patch:
@@ -13,9 +13,9 @@
  * License for the specific language governing permissions and limitations under
  * the License.
  */
-
 package azkaban.executor;
 
+
 public interface ConnectorParams {
 
   public static final String EXECUTOR_ID_PARAM = "executorId";
@@ -106,6 +106,4 @@ public interface ConnectorParams {
   public static final String STATS_MAP_REPORTINGINTERVAL = "interval";
   public static final String STATS_MAP_CLEANINGINTERVAL = "interval";
   public static final String STATS_MAP_EMITTERNUMINSTANCES = "numInstances";
-
-
 }

File: azkaban-common/src/main/java/azkaban/scheduler/Schedule.java
Patch:
@@ -13,7 +13,6 @@
  * License for the specific language governing permissions and limitations under
  * the License.
  */
-
 package azkaban.scheduler;
 
 import azkaban.executor.ExecutionOptions;
@@ -26,6 +25,7 @@
 import org.joda.time.ReadablePeriod;
 import org.quartz.CronExpression;
 
+
 public class Schedule {
 
   private final int projectId;

File: azkaban-common/src/main/java/azkaban/server/AzkabanServer.java
Patch:
@@ -13,7 +13,6 @@
  * License for the specific language governing permissions and limitations under
  * the License.
  */
-
 package azkaban.server;
 
 import static azkaban.Constants.DEFAULT_PORT_NUMBER;
@@ -152,5 +151,4 @@ private static Props loadConfigurationFromAzkabanHome() {
   public abstract VelocityEngine getVelocityEngine();
 
   public abstract UserManager getUserManager();
-
 }

File: azkaban-common/src/main/java/azkaban/trigger/builtin/BasicTimeChecker.java
Patch:
@@ -13,7 +13,6 @@
  * License for the specific language governing permissions and limitations under
  * the License.
  */
-
 package azkaban.trigger.builtin;
 
 import azkaban.trigger.ConditionChecker;
@@ -28,6 +27,7 @@
 import org.joda.time.ReadablePeriod;
 import org.quartz.CronExpression;
 
+
 public class BasicTimeChecker implements ConditionChecker {
 
   public static final String type = "BasicTimeChecker";
@@ -215,5 +215,4 @@ public void stopChecker() {
   @Override
   public void setContext(final Map<String, Object> context) {
   }
-
 }

File: azkaban-exec-server/src/main/java/azkaban/execapp/event/BlockingStatus.java
Patch:
@@ -13,14 +13,14 @@
  * License for the specific language governing permissions and limitations under
  * the License.
  */
-
 package azkaban.execapp.event;
 
 import azkaban.executor.Status;
 
+
 public class BlockingStatus {
 
-  private static final long WAIT_TIME = 5 * 60 * 1000;
+  private static final long WAIT_TIME = 300000;  // 5 * 60 * 1000
   private final int execId;
   private final String jobId;
   private Status status;

File: azkaban-exec-server/src/main/java/azkaban/execapp/event/RemoteFlowWatcher.java
Patch:
@@ -13,7 +13,6 @@
  * License for the specific language governing permissions and limitations under
  * the License.
  */
-
 package azkaban.execapp.event;
 
 import azkaban.executor.ExecutableFlow;
@@ -24,9 +23,10 @@
 import java.util.ArrayList;
 import java.util.Map;
 
+
 public class RemoteFlowWatcher extends FlowWatcher {
 
-  private final static long CHECK_INTERVAL_MS = 60 * 1000;
+  private final static long CHECK_INTERVAL_MS = 60000; // 60 * 1000
 
   private int execId;
   private ExecutorLoader loader;

File: azkaban-web-server/src/main/java/azkaban/webapp/servlet/AbstractAzkabanServlet.java
Patch:
@@ -13,7 +13,6 @@
  * License for the specific language governing permissions and limitations under
  * the License.
  */
-
 package azkaban.webapp.servlet;
 
 import static azkaban.ServiceProvider.SERVICE_PROVIDER;
@@ -293,7 +292,6 @@ protected Page newPage(final HttpServletRequest req, final HttpServletResponse r
     page.add("timezone", TimeZone.getDefault().getID());
     page.add("currentTime", (new DateTime()).getMillis());
     page.add("size", getDisplayExecutionPageSize());
-
     page.add("System", System.class);
     page.add("TimeUtils", TimeUtils.class);
     page.add("WebUtils", WebUtils.class);

File: azkaban-common/src/main/java/azkaban/executor/ExecutorManager.java
Patch:
@@ -802,7 +802,7 @@ private String getApplicationId(final ExecutableFlow exFlow, final String jobId,
     try {
       while (!finished) {
         final LogData data = getExecutionJobLog(exFlow, jobId, offset, 50000, attempt);
-        if (data != null) {
+        if (data != null && data.getLength() != 0) {
           applicationId = findApplicationIdFromLog(data.getData());
           if (applicationId != null) {
             return applicationId;

File: azkaban-common/src/main/java/azkaban/project/JdbcProjectHandlerSet.java
Patch:
@@ -40,9 +40,6 @@ class JdbcProjectHandlerSet {
 
   public static class ProjectResultHandler implements ResultSetHandler<List<Project>> {
 
-    public static String SELECT_PROJECT_BY_NAME =
-        "SELECT id, name, active, modified_time, create_time, version, last_modified_by, description, enc_type, settings_blob FROM projects WHERE name=?";
-
     public static String SELECT_PROJECT_BY_ID =
         "SELECT id, name, active, modified_time, create_time, version, last_modified_by, description, enc_type, settings_blob FROM projects WHERE id=?";
 

File: azkaban-common/src/test/java/azkaban/project/JdbcProjectImplTest.java
Patch:
@@ -254,8 +254,7 @@ public void testRemoveProject() throws Exception {
     final Project project = this.loader.fetchProjectByName("mytestProject");
     Assert.assertEquals(project.isActive(), true);
     this.loader.removeProject(project, "testUser1");
-    final Project removedProject = this.loader.fetchProjectByName("mytestProject");
-    Assert.assertEquals(removedProject.isActive(), false);
+    Assert.assertNull(this.loader.fetchProjectByName("mytestProject"));
   }
 
   @Test

File: azkaban-web-server/src/restli/java/azkaban/restli/ProjectManagerResource.java
Patch:
@@ -129,7 +129,7 @@ public String deploy(@ActionParam("sessionId") final String sessionId,
       if (enableQuartz) {
         //todo chengren311: should maintain atomicity,
         // e.g, if uploadProject fails, associated schedule shouldn't be added.
-        scheduler.unscheduleAll(project);
+        scheduler.unschedule(project);
       }
       // Check if project upload runs into any errors, such as the file
       // having blacklisted jars
@@ -138,14 +138,14 @@ public String deploy(@ActionParam("sessionId") final String sessionId,
           .uploadProject(project, archiveFile, "zip", user, props);
 
       if (enableQuartz) {
-        scheduler.scheduleAll(project, user.getUserId());
+        scheduler.schedule(project, user.getUserId());
       }
 
       checkReports(reports);
       logger.info("Deploy: project " + projectName + " version is " + project.getVersion()
           + ", reference is " + System.identityHashCode(project));
       return Integer.toString(project.getVersion());
-    } catch (final ProjectManagerException | SchedulerException | ExecutorManagerException e) {
+    } catch (final ProjectManagerException | ExecutorManagerException e) {
       final String errorMsg = "Upload of project " + project + " from " + archiveFile + " failed";
       logger.error(errorMsg, e);
       throw e;

File: az-reportal/src/main/java/azkaban/reportal/util/Reportal.java
Patch:
@@ -290,7 +290,7 @@ public void updateSchedules(final Reportal report, final ScheduleManager schedul
           flow.getId(), "ready", firstSchedTime.getMillis(), endScheduleTime,
           firstSchedTime.getZone(), period, DateTime.now().getMillis(),
           firstSchedTime.getMillis(), firstSchedTime.getMillis(),
-          user.getUserId(), options, null);
+          user.getUserId(), options);
     }
   }
 

File: azkaban-common/src/main/java/azkaban/jobExecutor/JavaProcessJob.java
Patch:
@@ -97,14 +97,12 @@ protected List<String> getClassPaths() {
 
     if (classPaths == null || classPaths.isEmpty()) {
       final File path = new File(getPath());
-      // File parent = path.getParentFile();
       getLog().info(
           "No classpath specified. Trying to load classes from " + path);
 
       if (path != null) {
         for (final File file : path.listFiles()) {
           if (file.getName().endsWith(".jar")) {
-            // log.info("Adding to classpath:" + file.getName());
             classpathList.add(file.getName());
           }
         }

File: azkaban-common/src/main/java/azkaban/scheduler/TriggerBasedScheduleLoader.java
Patch:
@@ -78,7 +78,7 @@ private List<TriggerAction> createActions(final Schedule s) {
     final ExecuteFlowAction executeAct =
         new ExecuteFlowAction("executeFlowAction", s.getProjectId(),
             s.getProjectName(), s.getFlowName(), s.getSubmitUser(),
-            s.getExecutionOptions(), s.getSlaOptions());
+            s.getExecutionOptions());
     actions.add(executeAct);
 
     return actions;
@@ -158,7 +158,6 @@ private Schedule triggerToSchedule(final Trigger t) throws ScheduleManagerExcept
           t.getSubmitTime(),
           t.getSubmitUser(),
           act.getExecutionOptions(),
-          act.getSlaOptions(),
           triggerTimeChecker.getCronExpression());
     } else {
       logger.error("Failed to parse schedule from trigger!");

File: azkaban-common/src/test/java/azkaban/trigger/ExecuteFlowActionTest.java
Patch:
@@ -18,6 +18,7 @@
 
 import static org.junit.Assert.assertTrue;
 
+import azkaban.executor.DisabledJob;
 import azkaban.executor.ExecutionOptions;
 import azkaban.trigger.builtin.ExecuteFlowAction;
 import azkaban.utils.Props;
@@ -35,12 +36,12 @@ public void jsonConversionTest() throws Exception {
     loader.init(new Props());
 
     final ExecutionOptions options = new ExecutionOptions();
-    final List<Object> disabledJobs = new ArrayList<>();
+    final List<DisabledJob> disabledJobs = new ArrayList<>();
     options.setDisabledJobs(disabledJobs);
 
     final ExecuteFlowAction executeFlowAction =
         new ExecuteFlowAction("ExecuteFlowAction", 1, "testproject",
-            "testflow", "azkaban", options, null);
+            "testflow", "azkaban", options);
 
     final Object obj = executeFlowAction.toJson();
 

File: azkaban-common/src/test/java/azkaban/trigger/JdbcTriggerImplTest.java
Patch:
@@ -141,7 +141,7 @@ private Trigger createTrigger(final String projName, final String flowName, fina
     final List<TriggerAction> actions = new ArrayList<>();
     final TriggerAction action =
         new ExecuteFlowAction("executeAction", 1, projName, flowName,
-            "azkaban", new ExecutionOptions(), null);
+            "azkaban", new ExecutionOptions());
     actions.add(action);
 
     return new Trigger.TriggerBuilder("azkaban",

File: azkaban-common/src/test/java/azkaban/trigger/TriggerManagerTest.java
Patch:
@@ -211,8 +211,10 @@ private Trigger createPeriodAndEndCheckerTrigger(final long currMillis) {
 
   private List<TriggerAction> getTriggerActions() {
     final List<TriggerAction> actions = new ArrayList<>();
+    final ExecutionOptions executionOptions = new ExecutionOptions();
+    executionOptions.setSlaOptions(Collections.emptyList());
     final TriggerAction act = new ExecuteFlowAction("fuu", 1, "test-project", "test-flow",
-        "test-user", new ExecutionOptions(), Collections.emptyList());
+        "test-user", executionOptions);
     actions.add(act);
     return actions;
   }

File: azkaban-common/src/test/java/azkaban/trigger/TriggerTest.java
Patch:
@@ -65,7 +65,7 @@ public void jsonConversionTest() throws Exception {
     final List<TriggerAction> actions = new ArrayList<>();
     final TriggerAction action =
         new ExecuteFlowAction("executeAction", 1, "testProj", "testFlow",
-            "azkaban", new ExecutionOptions(), null);
+            "azkaban", new ExecutionOptions());
     actions.add(action);
 
     final Trigger t = new Trigger.TriggerBuilder("azkaban",

File: azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java
Patch:
@@ -1481,8 +1481,8 @@ public synchronized void handleEvent(final Event event) {
         final TriggerManager triggerManager = ServiceProvider.SERVICE_PROVIDER
             .getInstance(TriggerManager.class);
         triggerManager
-            .addTrigger(FlowRunner.this.flow.getExecutionId(), SlaOption.getJobLevelSLAOptions(
-                FlowRunner.this.flow));
+            .addTrigger(FlowRunner.this.flow.getExecutionId(),
+                SlaOption.getJobLevelSLAOptions(flow.getExecutionOptions().getSlaOptions()));
       }
     }
   }

File: azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunnerManager.java
Patch:
@@ -576,7 +576,8 @@ public void handleEvent(final Event event) {
       } else if (event.getType() == EventType.FLOW_STARTED) {
         // add flow level SLA checker
         this.triggerManager
-            .addTrigger(flow.getExecutionId(), SlaOption.getFlowLevelSLAOptions(flow));
+            .addTrigger(flow.getExecutionId(), SlaOption.getFlowLevelSLAOptions(flow
+                .getExecutionOptions().getSlaOptions()));
       }
     }
   }

File: azkaban-common/src/main/java/azkaban/trigger/builtin/BasicTimeChecker.java
Patch:
@@ -17,6 +17,7 @@
 package azkaban.trigger.builtin;
 
 import azkaban.trigger.ConditionChecker;
+import azkaban.utils.TimeUtils;
 import azkaban.utils.Utils;
 import java.util.Date;
 import java.util.HashMap;
@@ -88,7 +89,7 @@ public static BasicTimeChecker createFromJson(final HashMap<String, Object> obj)
     final boolean skipPastChecks =
         Boolean.valueOf((String) jsonObj.get("skipPastChecks"));
     final ReadablePeriod period =
-        Utils.parsePeriodString((String) jsonObj.get("period"));
+        TimeUtils.parsePeriodString((String) jsonObj.get("period"));
     final String id = (String) jsonObj.get("id");
     final String cronExpression = (String) jsonObj.get("cronExpression");
 
@@ -199,7 +200,7 @@ public Object toJson() {
     jsonObj.put("nextCheckTime", String.valueOf(this.nextCheckTime));
     jsonObj.put("isRecurring", String.valueOf(this.isRecurring));
     jsonObj.put("skipPastChecks", String.valueOf(this.skipPastChecks));
-    jsonObj.put("period", Utils.createPeriodString(this.period));
+    jsonObj.put("period", TimeUtils.createPeriodString(this.period));
     jsonObj.put("id", this.id);
     jsonObj.put("cronExpression", this.cronExpression);
 

File: azkaban-common/src/test/java/azkaban/executor/mail/DefaultMailCreatorTest.java
Patch:
@@ -64,7 +64,6 @@ public void setUp() throws Exception {
     assertNotNull(this.defaultTz);
     // EEST
     TimeZone.setDefault(TimeZone.getTimeZone("Europe/Helsinki"));
-    DateTimeUtils.setCurrentMillisFixed(FIXED_CURRENT_TIME_MILLIS);
 
     this.mailCreator = new DefaultMailCreator();
 
@@ -136,6 +135,8 @@ public void createErrorEmail() throws Exception {
   @Test
   public void createFirstErrorMessage() throws Exception {
     setJobStatus(Status.FAILED);
+    // TODO ypadron: implement ability to mock current time in java.time api and remove setEndTime()
+    this.executableFlow.setEndTime(END_TIME_MILLIS);
     this.executableFlow.setStatus(Status.FAILED_FINISHING);
     assertTrue(this.mailCreator.createFirstErrorMessage(
         this.executableFlow, this.message, this.azkabanName, this.scheme, this.clientHostname,

File: azkaban-common/src/test/java/azkaban/trigger/BasicTimeCheckerTest.java
Patch:
@@ -20,7 +20,7 @@
 import static org.junit.Assert.assertTrue;
 
 import azkaban.trigger.builtin.BasicTimeChecker;
-import azkaban.utils.Utils;
+import azkaban.utils.TimeUtils;
 import java.util.HashMap;
 import java.util.Map;
 import org.joda.time.DateTime;
@@ -52,7 +52,7 @@ public void periodTimerTest() {
     // get a new timechecker, start from now, repeat every minute. should
     // evaluate to false now, and true a minute later.
     final long baseTimeInMilliSeconds = 1000;
-    final ReadablePeriod period = Utils.parsePeriodString("10s");
+    final ReadablePeriod period = TimeUtils.parsePeriodString("10s");
 
     DateTimeUtils.setCurrentMillisFixed(baseTimeInMilliSeconds);
     final BasicTimeChecker timeChecker =

File: azkaban-common/src/test/java/azkaban/trigger/ConditionTest.java
Patch:
@@ -22,7 +22,7 @@
 import azkaban.trigger.builtin.BasicTimeChecker;
 import azkaban.utils.JSONUtils;
 import azkaban.utils.Props;
-import azkaban.utils.Utils;
+import azkaban.utils.TimeUtils;
 import java.io.File;
 import java.util.HashMap;
 import java.util.Map;
@@ -83,7 +83,7 @@ public void jsonConversionTest() throws Exception {
     // period);
     final ConditionChecker timeChecker =
         new BasicTimeChecker("BasicTimeChecker_1", now.getMillis(),
-            now.getZone(), true, true, Utils.parsePeriodString(period), null);
+            now.getZone(), true, true, TimeUtils.parsePeriodString(period), null);
     System.out.println("checker id is " + timeChecker.getId());
 
     checkers.put(timeChecker.getId(), timeChecker);

File: azkaban-common/src/test/java/azkaban/trigger/JdbcTriggerImplTest.java
Patch:
@@ -22,7 +22,7 @@
 import azkaban.executor.ExecutionOptions;
 import azkaban.trigger.builtin.BasicTimeChecker;
 import azkaban.trigger.builtin.ExecuteFlowAction;
-import azkaban.utils.Utils;
+import azkaban.utils.TimeUtils;
 import java.sql.SQLException;
 import java.util.ArrayList;
 import java.util.HashMap;
@@ -131,7 +131,7 @@ private Trigger createTrigger(final String projName, final String flowName, fina
     final DateTime now = DateTime.now();
     final ConditionChecker checker1 =
         new BasicTimeChecker("timeChecker1", now.getMillis(), now.getZone(),
-            true, true, Utils.parsePeriodString("1h"), null);
+            true, true, TimeUtils.parsePeriodString("1h"), null);
     final Map<String, ConditionChecker> checkers1 =
         new HashMap<>();
     checkers1.put(checker1.getId(), checker1);

File: azkaban-common/src/test/java/azkaban/trigger/TriggerManagerTest.java
Patch:
@@ -30,7 +30,7 @@
 import azkaban.trigger.builtin.BasicTimeChecker;
 import azkaban.trigger.builtin.ExecuteFlowAction;
 import azkaban.utils.Props;
-import azkaban.utils.Utils;
+import azkaban.utils.TimeUtils;
 import com.google.common.collect.ImmutableMap;
 import java.util.ArrayList;
 import java.util.Collections;
@@ -183,7 +183,7 @@ private Trigger createPeriodAndEndCheckerTrigger(final long currMillis) {
     // In future, we should use some smaller alternative.
     final ConditionChecker triggerChecker = new BasicTimeChecker("BasicTimeChecker_1",
         currMillis, DateTimeZone.UTC, true, true,
-        Utils.parsePeriodString("1s"), null);
+        TimeUtils.parsePeriodString("1s"), null);
 
     // End time is 3 seconds past now.
     final ConditionChecker endTimeChecker = new BasicTimeChecker("EndTimeChecker_1", 111L,

File: azkaban-common/src/test/java/azkaban/trigger/TriggerTest.java
Patch:
@@ -23,7 +23,7 @@
 import azkaban.trigger.builtin.ExecuteFlowAction;
 import azkaban.utils.JSONUtils;
 import azkaban.utils.Props;
-import azkaban.utils.Utils;
+import azkaban.utils.TimeUtils;
 import java.io.File;
 import java.util.ArrayList;
 import java.util.HashMap;
@@ -55,7 +55,7 @@ public void jsonConversionTest() throws Exception {
     final DateTime now = DateTime.now();
     final ConditionChecker checker1 =
         new BasicTimeChecker("timeChecker1", now.getMillis(), now.getZone(),
-            true, true, Utils.parsePeriodString("1h"), null);
+            true, true, TimeUtils.parsePeriodString("1h"), null);
     final Map<String, ConditionChecker> checkers1 =
         new HashMap<>();
     checkers1.put(checker1.getId(), checker1);

File: azkaban-exec-server/src/main/java/azkaban/execapp/TriggerManager.java
Patch:
@@ -24,7 +24,7 @@
 import azkaban.trigger.TriggerAction;
 import azkaban.trigger.builtin.SlaAlertAction;
 import azkaban.trigger.builtin.SlaChecker;
-import azkaban.utils.Utils;
+import azkaban.utils.TimeUtils;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
@@ -95,7 +95,7 @@ public void addTrigger(final int execId, final List<SlaOption> slaOptions) {
 
       final List<TriggerAction> actions = createActions(sla, execId);
       final Trigger trigger = new Trigger(execId, triggerCond, expireCond, actions);
-      final ReadablePeriod duration = Utils
+      final ReadablePeriod duration = TimeUtils
           .parsePeriodString((String) sla.getInfo().get(SlaOption.INFO_DURATION));
       final long durationInMillis = duration.toPeriod().toStandardDuration().getMillis();
 

File: azkaban-web-server/src/main/java/azkaban/flowtrigger/TriggerInstanceProcessor.java
Patch:
@@ -25,7 +25,7 @@
 import azkaban.project.Project;
 import azkaban.utils.EmailMessage;
 import azkaban.utils.Emailer;
-import azkaban.utils.Utils;
+import azkaban.utils.TimeUtils;
 import com.google.common.base.Preconditions;
 import java.text.SimpleDateFormat;
 import java.util.Date;
@@ -104,7 +104,7 @@ private EmailMessage createFlowTriggerFailureEmailMessage(final TriggerInstance
     message.println("<tr><td>End Time</td><td>");
     message.println("<tr><td>" + sdf.format(new Date(triggerInst.getEndTime())) + "</td><td>");
     message.println("<tr><td>Duration</td><td>"
-        + Utils.formatDuration(triggerInst.getStartTime(), triggerInst.getEndTime())
+        + TimeUtils.formatDuration(triggerInst.getStartTime(), triggerInst.getEndTime())
         + "</td></tr>");
     message.println("<tr><td>Status</td><td>" + triggerInst.getStatus() + "</td></tr>");
     message.println("</table>");

File: azkaban-web-server/src/main/java/azkaban/webapp/servlet/FlowTriggerServlet.java
Patch:
@@ -22,6 +22,7 @@
 import azkaban.project.ProjectManager;
 import azkaban.server.session.Session;
 import azkaban.user.Permission.Type;
+import azkaban.utils.TimeUtils;
 import azkaban.webapp.AzkabanWebServer;
 import java.io.IOException;
 import java.util.HashMap;
@@ -70,9 +71,9 @@ private void ajaxFetchTrigger(final int projectId, final String flowId, final Se
       jsonObj.put("cronExpression", res.getFlowTrigger().getSchedule().getCronExpression());
       jsonObj.put("submitUser", res.getSubmitUser());
       jsonObj.put("firstSchedTime",
-          utils.formatDateTime(res.getQuartzTrigger().getStartTime().getTime()));
+          TimeUtils.formatDateTime(res.getQuartzTrigger().getStartTime().getTime()));
       jsonObj.put("nextExecTime",
-          utils.formatDateTime(res.getQuartzTrigger().getNextFireTime().getTime()));
+          TimeUtils.formatDateTime(res.getQuartzTrigger().getNextFireTime().getTime()));
 
       Long maxWaitMin = null;
       if (res.getFlowTrigger().getMaxWaitDuration().isPresent()) {

File: azkaban-web-server/src/test/java/azkaban/webapp/servlet/ProjectSideBarViewTest.java
Patch:
@@ -40,4 +40,4 @@ public void testProjectSideBarView()
     final String actual = FileAssertion.surroundWithHtmlTag(result);
     WebFileAssertion.assertStringEqualFileContent("project-side-bar.html", actual);
   }
-}
\ No newline at end of file
+}

File: azkaban-common/src/main/java/azkaban/jobExecutor/ProcessJob.java
Patch:
@@ -198,7 +198,7 @@ public void run() throws Exception {
     try {
       commands = getCommandList();
     } catch (final Exception e) {
-      handleError("Job set up failed " + e.getCause(), e);
+      handleError("Job set up failed: " + e.getMessage(), e);
     }
 
     final long startMs = System.currentTimeMillis();
@@ -386,8 +386,8 @@ private boolean canWriteInCurrentWorkingDirectory(final String effectiveUser)
   }
 
   /**
-   * Changes permissions on file/directory so that the file/directory is owned by the user and
-   * the group remains the azkaban service account name.
+   * Changes permissions on file/directory so that the file/directory is owned by the user and the
+   * group remains the azkaban service account name.
    *
    * Leverages execute-as-user with "root" as the user to run the command.
    *

File: azkaban-common/src/main/java/azkaban/executor/ExecutorManager.java
Patch:
@@ -953,6 +953,7 @@ public String submitExecutableFlow(final ExecutableFlow exflow, final String use
       } else {
         final int projectId = exflow.getProjectId();
         exflow.setSubmitUser(userId);
+        exflow.setStatus(Status.PREPARING);
         exflow.setSubmitTime(System.currentTimeMillis());
 
         // Get collection of running flows given a project and a specific flow name

File: az-core/src/main/java/azkaban/utils/Utils.java
Patch:
@@ -443,7 +443,7 @@ public static long parseMemString(final String strMemSize) {
       return 0L;
     }
 
-    long size = 0L;
+    final long size;
     if (strMemSize.endsWith("g") || strMemSize.endsWith("G")
         || strMemSize.endsWith("m") || strMemSize.endsWith("M")
         || strMemSize.endsWith("k") || strMemSize.endsWith("K")) {
@@ -453,7 +453,7 @@ public static long parseMemString(final String strMemSize) {
       size = Long.parseLong(strMemSize);
     }
 
-    long sizeInKb = 0L;
+    final long sizeInKb;
     if (strMemSize.endsWith("g") || strMemSize.endsWith("G")) {
       sizeInKb = size * 1024L * 1024L;
     } else if (strMemSize.endsWith("m") || strMemSize.endsWith("M")) {

File: azkaban-common/src/main/java/azkaban/executor/ExecutionFinalizer.java
Patch:
@@ -94,7 +94,7 @@ public void finalizeFlow(final ExecutableFlow flow, final String reason,
 
     this.updaterStage.set("finalizing flow " + execId + " alerting and emailing");
     if (alertUser) {
-      ExecutionControllerUtils.alertUser(flow, this.alerterHolder,
+      ExecutionControllerUtils.alertUserOnFlowFinished(flow, this.alerterHolder,
           ExecutionControllerUtils.getFinalizeFlowReasons(reason,
               originalError));
     }

File: azkaban-common/src/main/java/azkaban/executor/ExecutorHealthChecker.java
Patch:
@@ -176,5 +176,4 @@ private void handleExecutorNotAliveCase(
       this.alerterHolder.get("email").alertOnFailedUpdate(executor, entry.getValue(), e);
     }
   }
-
 }

File: azkaban-common/src/main/java/azkaban/executor/ExecutorManager.java
Patch:
@@ -164,6 +164,7 @@ void initialize() throws ExecutorManagerException {
     this.queueProcessor = setupQueueProcessor();
   }
 
+  @Override
   public void start() throws ExecutorManagerException {
     initialize();
     this.updaterThread.start();

File: azkaban-common/src/main/java/azkaban/executor/ExecutorManagerAdapter.java
Patch:
@@ -116,6 +116,8 @@ public Map<String, Object> callExecutorStats(int executorId, String action,
   public Map<String, Object> callExecutorJMX(String hostPort, String action,
       String mBean) throws IOException;
 
+  public void start() throws ExecutorManagerException;
+
   public void shutdown();
 
   public Set<String> getAllActiveExecutorServerHosts();

File: azkaban-exec-server/src/main/java/azkaban/execapp/ExecutorServlet.java
Patch:
@@ -104,7 +104,7 @@ public void handleRequest(final HttpServletRequest req, final HttpServletRespons
         if (action.equals(UPDATE_ACTION)) {
           handleAjaxUpdateRequest(req, respMap);
         } else if (action.equals(PING_ACTION)) {
-          respMap.put("status", "alive");
+          respMap.put(STATUS_PARAM, RESPONSE_ALIVE);
         } else if (action.equals(RELOAD_JOBTYPE_PLUGINS_ACTION)) {
           logger.info("Reloading Jobtype plugins");
           handleReloadJobTypePlugins(respMap);

File: azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunnerManager.java
Patch:
@@ -110,6 +110,7 @@ public class FlowRunnerManager implements EventListener,
 
   private static final int DEFAULT_NUM_EXECUTING_FLOWS = 30;
   private static final int DEFAULT_FLOW_NUM_JOB_TREADS = 10;
+  private static final int DEFAULT_POLLING_INTERVAL_MS = 1000;
 
   // this map is used to store the flows that have been submitted to
   // the executor service. Once a flow has been submitted, it is either
@@ -215,7 +216,7 @@ public FlowRunnerManager(final Props props,
     if (this.azkabanProps.getBoolean(ConfigurationKeys.AZKABAN_POLL_MODEL, false)) {
       this.logger.info("Starting polling service.");
       this.pollingService = new PollingService(this.azkabanProps.getLong
-          (ConfigurationKeys.AZKABAN_POLLING_INTERVAL_MS, 1000));
+          (ConfigurationKeys.AZKABAN_POLLING_INTERVAL_MS, DEFAULT_POLLING_INTERVAL_MS));
       this.pollingService.start();
     }
   }

File: azkaban-common/src/main/java/azkaban/executor/ExecutionFlowDao.java
Patch:
@@ -52,6 +52,7 @@ public synchronized void uploadExecutableFlow(final ExecutableFlow flow)
         + "values (?,?,?,?,?,?,?)";
     final long submitTime = System.currentTimeMillis();
     flow.setStatus(Status.PREPARING);
+    flow.setSubmitTime(submitTime);
 
     /**
      * Why we need a transaction to get last insert ID?

File: azkaban-common/src/main/java/azkaban/executor/ExecutorLoader.java
Patch:
@@ -42,6 +42,9 @@ Map<Integer, Pair<ExecutionReference, ExecutableFlow>> fetchActiveFlows()
   Map<Integer, Pair<ExecutionReference, ExecutableFlow>> fetchUnfinishedFlows()
       throws ExecutorManagerException;
 
+  Map<Integer, Pair<ExecutionReference, ExecutableFlow>> fetchUnfinishedFlowsMetadata()
+      throws ExecutorManagerException;
+
   Pair<ExecutionReference, ExecutableFlow> fetchActiveFlowByExecId(int execId)
       throws ExecutorManagerException;
 

File: azkaban-common/src/main/java/azkaban/project/ProjectLoader.java
Patch:
@@ -186,9 +186,10 @@ Map<String, Props> fetchProjectProperties(int projectId, int version)
       throws ProjectManagerException;
 
   /**
-   * Cleans all project versions less tha
+   * Cleans all project versions less than the provided version, except the versions to exclude
+   * given as argument
    */
-  void cleanOlderProjectVersion(int projectId, int version)
+  void cleanOlderProjectVersion(int projectId, int version, final List<Integer> excludedVersions)
       throws ProjectManagerException;
 
   void updateProjectProperty(Project project, Props props)

File: azkaban-web-server/src/restli/java/azkaban/restli/ProjectManagerResource.java
Patch:
@@ -16,6 +16,7 @@
 package azkaban.restli;
 
 import azkaban.Constants.ConfigurationKeys;
+import azkaban.executor.ExecutorManagerException;
 import azkaban.flowtrigger.quartz.FlowTriggerScheduler;
 import azkaban.project.Project;
 import azkaban.project.ProjectManager;
@@ -58,7 +59,7 @@ public String deploy(@ActionParam("sessionId") final String sessionId,
       @ActionParam("projectName") final String projectName,
       @ActionParam("packageUrl") final String packageUrl)
       throws ProjectManagerException, RestLiServiceException, UserManagerException,
-      ServletException, IOException, SchedulerException {
+      ServletException, IOException, SchedulerException, ExecutorManagerException {
     logger.info("Deploy called. {projectName: " + projectName + ", packageUrl:" + packageUrl + "}");
 
     final String ip = ResourceUtils.getRealClientIpAddr(this.getContext());
@@ -144,7 +145,7 @@ public String deploy(@ActionParam("sessionId") final String sessionId,
       logger.info("Deploy: project " + projectName + " version is " + project.getVersion()
           + ", reference is " + System.identityHashCode(project));
       return Integer.toString(project.getVersion());
-    } catch (final ProjectManagerException | SchedulerException e) {
+    } catch (final ProjectManagerException | SchedulerException | ExecutorManagerException e) {
       final String errorMsg = "Upload of project " + project + " from " + archiveFile + " failed";
       logger.error(errorMsg, e);
       throw e;

File: az-jobsummary/src/main/java/azkaban/viewer/jobsummary/JobSummaryServlet.java
Patch:
@@ -87,7 +87,7 @@ private Project getProjectByPermission(final int projectId, final User user,
   public void init(final ServletConfig config) throws ServletException {
     super.init(config);
     final AzkabanWebServer server = (AzkabanWebServer) getApplication();
-    this.executorManagerAdapter = server.getExecutorManagerAdapter();
+    this.executorManagerAdapter = server.getExecutorManager();
     this.projectManager = server.getProjectManager();
   }
 

File: az-reportal/src/main/java/azkaban/viewer/reportal/ReportalServlet.java
Patch:
@@ -288,7 +288,7 @@ else if (ajaxName.equals("log")) {
       final int offset = getIntParam(req, "offset");
       final int length = getIntParam(req, "length");
       final ExecutableFlow exec;
-      final ExecutorManagerAdapter executorManagerAdapter = this.server.getExecutorManagerAdapter();
+      final ExecutorManagerAdapter executorManagerAdapter = this.server.getExecutorManager();
       try {
         exec = executorManagerAdapter.getExecutableFlow(execId);
       } catch (final Exception e) {
@@ -364,7 +364,7 @@ private void handleViewReportal(final HttpServletRequest req,
     preparePage(page, session);
 
     final ProjectManager projectManager = this.server.getProjectManager();
-    final ExecutorManagerAdapter executorManagerAdapter = this.server.getExecutorManagerAdapter();
+    final ExecutorManagerAdapter executorManagerAdapter = this.server.getExecutorManager();
 
     final Project project = projectManager.getProject(id);
     final Reportal reportal = Reportal.loadFromProject(project);
@@ -1218,7 +1218,7 @@ private void handleRunReportalWithVariables(final HttpServletRequest req,
 
     try {
       final String message =
-          this.server.getExecutorManagerAdapter().submitExecutableFlow(exflow,
+          this.server.getExecutorManager().submitExecutableFlow(exflow,
               session.getUser().getUserId())
               + ".";
       ret.put("message", message);

File: azkaban-common/src/main/java/azkaban/trigger/builtin/ExecuteFlowAction.java
Patch:
@@ -66,11 +66,11 @@ public static void setLogger(final Logger logger) {
     ExecuteFlowAction.logger = logger;
   }
 
-  public static ExecutorManagerAdapter getExecutorManagerAdapter() {
+  public static ExecutorManagerAdapter getExecutorManager() {
     return executorManagerAdapter;
   }
 
-  public static void setExecutorManagerAdapter(
+  public static void setExecutorManager(
       final ExecutorManagerAdapter executorManagerAdapter) {
     ExecuteFlowAction.executorManagerAdapter = executorManagerAdapter;
   }

File: azkaban-common/src/main/java/azkaban/trigger/builtin/ExecutionChecker.java
Patch:
@@ -43,7 +43,7 @@ public ExecutionChecker(final String checkerId, final int execId, final String j
     this.wantedStatus = wantedStatus;
   }
 
-  public static void setExecutorManagerAdapter(final ExecutorManagerAdapter em) {
+  public static void setExecutorManager(final ExecutorManagerAdapter em) {
     executorManagerAdapter = em;
   }
 

File: azkaban-common/src/main/java/azkaban/trigger/builtin/KillExecutionAction.java
Patch:
@@ -48,7 +48,7 @@ public KillExecutionAction(final String actionId, final int execId) {
     this.actionId = actionId;
   }
 
-  public static void setExecutorManagerAdapter(final ExecutorManagerAdapter em) {
+  public static void setExecutorManager(final ExecutorManagerAdapter em) {
     executorManagerAdapter = em;
   }
 

File: azkaban-common/src/test/java/azkaban/trigger/TriggerManagerTest.java
Patch:
@@ -68,7 +68,7 @@ public void setup() throws Exception {
     when(executorManagerAdapter.submitExecutableFlow(any(), any()))
         .thenThrow(new ExecutorManagerException("Flow is already running. Skipping execution.",
             ExecutorManagerException.Reason.SkippedExecution));
-    ExecuteFlowAction.setExecutorManagerAdapter(this.executorManagerAdapter);
+    ExecuteFlowAction.setExecutorManager(this.executorManagerAdapter);
     ExecuteFlowAction.setProjectManager(this.projectManager);
     ExecuteFlowAction.setTriggerManager(this.triggerManager);
     final Props props = new Props();

File: azkaban-web-server/src/main/java/azkaban/webapp/servlet/ExecutorServlet.java
Patch:
@@ -84,7 +84,7 @@ public void init(final ServletConfig config) throws ServletException {
     final AzkabanWebServer server = (AzkabanWebServer) getApplication();
     this.userManager = server.getUserManager();
     this.projectManager = server.getProjectManager();
-    this.executorManagerAdapter = server.getExecutorManagerAdapter();
+    this.executorManagerAdapter = server.getExecutorManager();
     this.scheduleManager = server.getScheduleManager();
     this.flowTriggerService = server.getFlowTriggerService();
     // TODO: reallocf fully guicify

File: azkaban-web-server/src/main/java/azkaban/webapp/servlet/HistoryServlet.java
Patch:
@@ -42,7 +42,7 @@ public class HistoryServlet extends LoginAbstractAzkabanServlet {
   public void init(final ServletConfig config) throws ServletException {
     super.init(config);
     final AzkabanWebServer server = (AzkabanWebServer) getApplication();
-    this.executorManagerAdapter = server.getExecutorManagerAdapter();
+    this.executorManagerAdapter = server.getExecutorManager();
     this.projectManager = server.getProjectManager();
   }
 

File: azkaban-web-server/src/main/java/azkaban/webapp/servlet/JMXHttpServlet.java
Patch:
@@ -60,7 +60,7 @@ public void init(final ServletConfig config) throws ServletException {
 
     this.server = (AzkabanWebServer) getApplication();
     this.userManager = this.server.getUserManager();
-    this.executorManagerAdapter = this.server.getExecutorManagerAdapter();
+    this.executorManagerAdapter = this.server.getExecutorManager();
 
     this.triggerManager = this.server.getTriggerManager();
   }

File: azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java
Patch:
@@ -118,7 +118,7 @@ public void init(final ServletConfig config) throws ServletException {
 
     final AzkabanWebServer server = (AzkabanWebServer) getApplication();
     this.projectManager = server.getProjectManager();
-    this.executorManagerAdapter = server.getExecutorManagerAdapter();
+    this.executorManagerAdapter = server.getExecutorManager();
     this.scheduleManager = server.getScheduleManager();
     this.userManager = server.getUserManager();
     this.scheduler = server.getScheduler();

File: azkaban-web-server/src/main/java/azkaban/webapp/servlet/StatsServlet.java
Patch:
@@ -54,7 +54,7 @@ public void init(final ServletConfig config) throws ServletException {
     super.init(config);
     final AzkabanWebServer server = (AzkabanWebServer) getApplication();
     this.userManager = server.getUserManager();
-    this.execManagerAdapter = server.getExecutorManagerAdapter();
+    this.execManagerAdapter = server.getExecutorManager();
   }
 
   @Override

File: azkaban-common/src/test/java/azkaban/executor/FetchActiveFlowDaoTest.java
Patch:
@@ -15,6 +15,9 @@
 import org.junit.Test;
 import org.mockito.Mockito;
 
+/**
+ * Also @see ExecutionFlowDaoTest - DB operations of FetchActiveFlowDao are tested there.
+ */
 public class FetchActiveFlowDaoTest {
 
   private ResultSet rs;

File: az-hadoop-jobtype-plugin/src/main/java/azkaban/jobtype/HadoopShell.java
Patch:
@@ -137,9 +137,8 @@ public void cancel() throws InterruptedException {
 
 		info("Cancel called.  Killing the launched Hadoop jobs on the cluster");
 
-		String azExecId = jobProps.getString(CommonJobProperties.EXEC_ID);
-		final String logFilePath = String.format("%s/_job.%s.%s.log", getWorkingDirectory(), azExecId, getId());
-		info("log file path is: " + logFilePath);
+		final String logFilePath = jobProps.getString(CommonJobProperties.JOB_LOG_FILE);
+		info("Log file path is: " + logFilePath);
 
 		HadoopJobUtils.proxyUserKillAllSpawnedHadoopJobs(logFilePath, jobProps, tokenFile, getLog());
 	}

File: azkaban-exec-server/src/main/java/azkaban/execapp/JobRunner.java
Patch:
@@ -49,6 +49,7 @@
 import java.util.HashSet;
 import java.util.Optional;
 import java.util.Set;
+
 import org.apache.kafka.log4jappender.KafkaLog4jAppender;
 import org.apache.log4j.Appender;
 import org.apache.log4j.EnhancedPatternLayout;
@@ -321,6 +322,7 @@ private FileAppender createFileAppender() throws IOException {
     final String logName = createLogFileName(this.node);
     this.logFile = new File(this.workingDir, logName);
     final String absolutePath = this.logFile.getAbsolutePath();
+    this.flowLogger.info("Log file path for job: " + this.jobId + " is: " + absolutePath);
 
     // Attempt to create FileAppender
     final RollingFileAppender fileAppender =
@@ -671,6 +673,7 @@ private Status prepareJob() throws RuntimeException {
       this.props.put(CommonJobProperties.JOB_METADATA_FILE,
           createMetaDataFileName(this.node));
       this.props.put(CommonJobProperties.JOB_ATTACHMENT_FILE, this.attachmentFileName);
+      this.props.put(CommonJobProperties.JOB_LOG_FILE, this.logFile.getAbsolutePath());
       finalStatus = changeStatus(Status.RUNNING);
 
       // Ability to specify working directory

File: azkaban-common/src/test/java/azkaban/executor/ExecutorManagerTest.java
Patch:
@@ -151,7 +151,7 @@ private ExecutorManager createExecutorManager()
     final RunningExecutionsUpdaterThread updaterThread = new RunningExecutionsUpdaterThread(
         new RunningExecutionsUpdater(
             this.updaterStage, this.alertHolder, this.commonMetrics, this.apiGateway,
-            this.runningExecutions, executionFinalizer), this.runningExecutions);
+            this.runningExecutions, executionFinalizer, this.loader), this.runningExecutions);
     updaterThread.waitTimeIdleMs = 0;
     updaterThread.waitTimeMs = 0;
     final ExecutorManager executorManager = new ExecutorManager(this.props, this.loader,

File: azkaban-common/src/test/java/azkaban/trigger/TriggerManagerDeadlockTest.java
Patch:
@@ -86,7 +86,7 @@ private ExecutorManager getExecutorManager(final Props props) throws ExecutorMan
   private RunningExecutionsUpdaterThread getRunningExecutionsUpdaterThread() {
     return new RunningExecutionsUpdaterThread(new RunningExecutionsUpdater(
         this.updaterStage, this.alertHolder, this.commonMetrics, this.apiGateway,
-        this.runningExecutions, this.executionFinalizer), runningExecutions);
+        this.runningExecutions, this.executionFinalizer, this.execLoader), this.runningExecutions);
   }
 
   @After

File: az-core/src/main/java/azkaban/Constants.java
Patch:
@@ -227,6 +227,9 @@ public static class ConfigurationKeys {
     // allowed max size of shared project dir in MB
     public static final String PROJECT_DIR_MAX_SIZE_IN_MB = "azkaban.project_cache_max_size_in_mb";
 
+    // how many older versions of project files are kept in DB before deleting them
+    public static final String PROJECT_VERSION_RETENTION = "project.version.retention";
+
     // number of rows to be displayed on the executions page.
     public static final String DISPLAY_EXECUTION_PAGE_SIZE = "azkaban.display.execution_page_size";
   }

File: azkaban-common/src/main/java/azkaban/project/AzkabanProjectLoader.java
Patch:
@@ -75,7 +75,7 @@ class AzkabanProjectLoader {
     } else {
       log.info("Using temp dir: " + this.tempDir.getAbsolutePath());
     }
-    this.projectVersionRetention = props.getInt("project.version.retention", 3);
+    this.projectVersionRetention = props.getInt(ConfigurationKeys.PROJECT_VERSION_RETENTION, 3);
     log.info("Project version retention is set to " + this.projectVersionRetention);
   }
 

File: azkaban-common/src/main/java/azkaban/executor/Executor.java
Patch:
@@ -97,9 +97,9 @@ public boolean equals(final Object obj) {
 
   @Override
   public String toString() {
-    return String.format("%s:%s (id: %s)",
+    return String.format("%s:%s (id: %s), active=%s",
         null == this.host || this.host.length() == 0 ? "(empty)" : this.host,
-        this.port, this.id);
+        this.port, this.id, this.isActive);
   }
 
   public String getHost() {

File: azkaban-exec-server/src/main/java/azkaban/execapp/AzkabanExecutorServer.java
Patch:
@@ -277,7 +277,10 @@ private void insertExecutorEntryIntoDB() throws ExecutorManagerException {
       checkState(port != -1);
       final Executor executor = this.executionLoader.fetchExecutor(host, port);
       if (executor == null) {
+        logger.info("This executor wasn't found in the DB. Adding self.");
         this.executionLoader.addExecutor(host, port);
+      } else {
+        logger.info("This executor is already in the DB. Found: " + executor);
       }
       // If executor already exists, ignore it
     } catch (final ExecutorManagerException e) {

File: azkaban-common/src/test/java/azkaban/trigger/TriggerManagerDeadlockTest.java
Patch:
@@ -18,6 +18,7 @@
 
 import static org.mockito.Mockito.mock;
 
+import azkaban.Constants.ConfigurationKeys;
 import azkaban.executor.ActiveExecutors;
 import azkaban.executor.AlerterHolder;
 import azkaban.executor.ExecutionFinalizer;
@@ -61,7 +62,7 @@ public void setup() throws ExecutorManagerException, TriggerManagerException {
     this.loader = new MockTriggerLoader();
     final Props props = new Props();
     props.put("trigger.scan.interval", 1000);
-    props.put("executor.port", 12321);
+    props.put(ConfigurationKeys.EXECUTOR_PORT, 12321);
     this.execLoader = new MockExecutorLoader();
     this.apiGateway = mock(ExecutorApiGateway.class);
     this.runningExecutions = new RunningExecutions();
@@ -75,7 +76,7 @@ public void setup() throws ExecutorManagerException, TriggerManagerException {
   }
 
   private ExecutorManager getExecutorManager(final Props props) throws ExecutorManagerException {
-    final ActiveExecutors activeExecutors = new ActiveExecutors(props, this.execLoader);
+    final ActiveExecutors activeExecutors = new ActiveExecutors(this.execLoader);
     final RunningExecutionsUpdaterThread updaterThread = getRunningExecutionsUpdaterThread();
     return new ExecutorManager(props, this.execLoader, this.commonMetrics, this.apiGateway,
         this.runningExecutions, activeExecutors, this.updaterStage, this.executionFinalizer,

File: azkaban-exec-server/src/main/java/azkaban/execapp/AzkabanExecutorServer.java
Patch:
@@ -16,7 +16,7 @@
 
 package azkaban.execapp;
 
-import static azkaban.Constants.AZKABAN_EXECUTOR_PORT_FILENAME;
+import static azkaban.Constants.DEFAULT_EXECUTOR_PORT_FILE;
 import static azkaban.Constants.ConfigurationKeys;
 import static azkaban.ServiceProvider.SERVICE_PROVIDER;
 import static azkaban.execapp.ExecJettyServerModule.EXEC_JETTY_SERVER;
@@ -289,7 +289,7 @@ private void insertExecutorEntryIntoDB() throws ExecutorManagerException {
   private void dumpPortToFile() throws IOException {
     // By default this should write to the working directory
     final String portFileName = this.props
-        .getString(Constants.AZKABAN_EXECUTOR_PORT_FILE, AZKABAN_EXECUTOR_PORT_FILENAME);
+        .getString(ConfigurationKeys.EXECUTOR_PORT_FILE, DEFAULT_EXECUTOR_PORT_FILE);
     FileIOUtils.dumpNumberToFile(Paths.get(portFileName), getPort());
   }
 
@@ -468,7 +468,7 @@ public Object getMBeanAttribute(final ObjectName name, final String attribute) {
    * @return hostname
    */
   public String getHost() {
-    if (this.props.containsKey(Constants.ConfigurationKeys.AZKABAN_SERVER_HOST_NAME)) {
+    if (this.props.containsKey(ConfigurationKeys.AZKABAN_SERVER_HOST_NAME)) {
       final String hostName = this.props
           .getString(Constants.ConfigurationKeys.AZKABAN_SERVER_HOST_NAME);
       if (!StringUtils.isEmpty(hostName)) {

File: azkaban-exec-server/src/main/java/azkaban/execapp/ExecJettyServerModule.java
Patch:
@@ -1,5 +1,6 @@
 package azkaban.execapp;
 
+import azkaban.Constants.ConfigurationKeys;
 import azkaban.utils.Props;
 import com.google.inject.AbstractModule;
 import com.google.inject.Provides;
@@ -38,7 +39,7 @@ private Server createJettyServer(final Props props) {
      * The Jetty server automatically finds an unused port when the port number is set to zero
      * TODO: This is using a highly outdated version of jetty [year 2010]. needs to be updated.
      */
-    final Server server = new Server(props.getInt("executor.port", 0));
+    final Server server = new Server(props.getInt(ConfigurationKeys.EXECUTOR_PORT, 0));
     final QueuedThreadPool httpThreadPool = new QueuedThreadPool(maxThreads);
     server.setThreadPool(httpThreadPool);
 

File: azkaban-exec-server/src/test/java/azkaban/execapp/AzkabanExecutorServerTest.java
Patch:
@@ -75,7 +75,7 @@ public static void setUp() throws Exception {
   public static void tearDown() throws Exception {
     deleteQuietly(new File("h2.mv.db"));
     deleteQuietly(new File("h2.trace.db"));
-    deleteQuietly(new File("executor.port"));
+    deleteQuietly(new File(Constants.DEFAULT_EXECUTOR_PORT_FILE));
     deleteQuietly(new File("executions"));
     deleteQuietly(new File("projects"));
   }

File: azkaban-web-server/src/test/java/azkaban/webapp/AzkabanWebServerTest.java
Patch:
@@ -111,7 +111,7 @@ public static void tearDown() throws Exception {
 
     deleteQuietly(new File("h2.mv.db"));
     deleteQuietly(new File("h2.trace.db"));
-    deleteQuietly(new File("executor.port"));
+    deleteQuietly(new File(Constants.DEFAULT_EXECUTOR_PORT_FILE));
     deleteQuietly(new File("executions"));
     deleteQuietly(new File("projects"));
   }

File: azkaban-common/src/test/java/azkaban/executor/ExecutorManagerTest.java
Patch:
@@ -18,7 +18,6 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.ArgumentMatchers.contains;
-import static org.mockito.Matchers.anyInt;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.any;
 import static org.mockito.Mockito.doReturn;
@@ -367,8 +366,7 @@ private void mockFlowDoesNotExist() throws Exception {
   @SuppressWarnings("unchecked")
   private void mockUpdateResponse(
       final Map<String, List<Map<String, Object>>> map) throws Exception {
-    doReturn(map).when(this.apiGateway).callWithExecutionId(
-        any(), anyInt(), eq(ConnectorParams.UPDATE_ACTION), any(), any(), any(), any());
+    doReturn(map).when(this.apiGateway).updateExecutions(any(), any());
   }
 
   /*

File: azkaban-common/src/test/java/azkaban/executor/ExecutorManagerTest.java
Patch:
@@ -331,7 +331,8 @@ public void testDispatchFailed() throws Exception {
     verify(this.apiGateway)
         .callWithExecutable(flow1, this.manager.fetchExecutor(2), ConnectorParams.EXECUTE_ACTION);
     verify(this.loader, Mockito.times(2)).unassignExecutor(-1);
-    verify(this.mailAlerter).alertOnError(flow1);
+    verify(this.mailAlerter).alertOnError(eq(flow1),
+        eq("Failed to dispatch because reached azkaban.maxDispatchingErrors (tried 2 executors)"));
   }
 
   private void mockFlowDoesNotExist() throws Exception {

File: azkaban-exec-server/src/test/java/azkaban/execapp/FlowRunnerConditionalFlowTest.java
Patch:
@@ -147,7 +147,9 @@ public void runFlowOnJobStatusConditionNull() throws Exception {
     setUp(CONDITIONAL_FLOW_3, flowProps);
     final ExecutableFlow flow = this.runner.getExecutableFlow();
     flow.getExecutableNode("jobC").setConditionOnJobStatus(null);
+    InteractiveTestJob.getTestJob("jobA").succeedJob();
     assertStatus(flow, "jobA", Status.SUCCEEDED);
+    InteractiveTestJob.getTestJob("jobB").succeedJob();
     assertStatus(flow, "jobB", Status.SUCCEEDED);
     assertStatus(flow, "jobC", Status.SUCCEEDED);
     assertFlowStatus(flow, Status.SUCCEEDED);

File: azkaban-web-server/src/main/java/azkaban/webapp/servlet/AbstractAzkabanServlet.java
Patch:
@@ -295,6 +295,8 @@ protected Page newPage(final HttpServletRequest req, final HttpServletResponse r
     page.add("utils", utils);
     page.add("timezone", TimeZone.getDefault().getID());
     page.add("currentTime", (new DateTime()).getMillis());
+    page.add("size", getDisplayExecutionPageSize());
+    
     if (session != null && session.getUser() != null) {
       page.add("user_id", session.getUser().getUserId());
     }
@@ -344,6 +346,7 @@ protected Page newPage(final HttpServletRequest req, final HttpServletResponse r
     page.add("timezone", TimeZone.getDefault().getID());
     page.add("currentTime", (new DateTime()).getMillis());
     page.add("context", req.getContextPath());
+    page.add("size", getDisplayExecutionPageSize());
 
     // @TODO, allow more than one type of viewer. For time sake, I only install
     // the first one

File: az-reportal/src/main/java/azkaban/viewer/reportal/ReportalServlet.java
Patch:
@@ -903,7 +903,7 @@ private String validateAndSaveReport(final HttpServletRequest req,
       // Validate if the session user (who interact with UI) is part of specified user.to.proxy
       // user. If not, reportal can not be saved and warn users.
       if (variable.title.equals("reportal.config.user.to.proxy")) {
-        String userToProxy = variable.name;
+        final String userToProxy = variable.name;
         final UserManager userManager = getApplication().getUserManager();
         if (!userManager.validateProxyUser(userToProxy, user)) {
           errors.add("User " + user.getUserId() + " has no permission to add " + userToProxy

File: az-reportal/src/main/java/azkaban/viewer/reportal/ReportalType.java
Patch:
@@ -57,10 +57,12 @@ public void buildJobFiles(final Reportal reportal, final Props propertiesFile,
       propertiesFile.put("reportal.pig.script", "res/" + jobName + ".pig");
     }
   },
+
+
   HiveJob("ReportalHive", "reportalhive", "hadoop"), TeraDataJob(
       "ReportalTeraData", "reportalteradata", "teradata"),
   TableauJob("ReportalTableau", "reportaltableau", "hadoop"),
-  DataCollectorJob(
+  PrestoJob("ReportalPresto", "reportalpresto", "hadoop"), DataCollectorJob(
       ReportalTypeManager.DATA_COLLECTOR_JOB, ReportalTypeManager.DATA_COLLECTOR_JOB_TYPE, "") {
     @Override
     public void buildJobFiles(final Reportal reportal, final Props propertiesFile,
@@ -96,7 +98,6 @@ public static ReportalType getTypeByName(final String typeName) {
 
   public void buildJobFiles(final Reportal reportal, final Props propertiesFile,
       final File jobFile, final String jobName, final String queryScript, final String proxyUser) {
-
   }
 
   public String getJobTypeName() {

File: azkaban-common/src/main/java/azkaban/flow/ConditionOnJobStatus.java
Patch:
@@ -20,9 +20,7 @@ public enum ConditionOnJobStatus {
   ALL_FAILED("all_failed"),
   ALL_DONE("all_done"),
   ONE_FAILED("one_failed"),
-  ONE_SUCCESS("one_success"),
-  ONE_FAILED_ALL_DONE("one_failed_all_done"),
-  ONE_SUCCESS_ALL_DONE("one_success_all_done");
+  ONE_SUCCESS("one_success");
 
   private final String condition;
 

File: az-core/src/main/java/azkaban/Constants.java
Patch:
@@ -229,6 +229,9 @@ public static class ConfigurationKeys {
 
     // allowed max size of shared project dir in MB
     public static final String PROJECT_DIR_MAX_SIZE_IN_MB = "azkaban.project_cache_max_size_in_mb";
+
+    // number of rows to be displayed on the executions page.
+    public static final String DISPLAY_EXECUTION_PAGE_SIZE = "azkaban.display.execution_page_size";
   }
 
   public static class FlowProperties {

File: azkaban-web-server/src/main/java/azkaban/webapp/servlet/HistoryServlet.java
Patch:
@@ -87,7 +87,7 @@ private void handleHistoryPage(final HttpServletRequest req,
         newPage(req, resp, session,
             "azkaban/webapp/servlet/velocity/historypage.vm");
     int pageNum = getIntParam(req, "page", 1);
-    final int pageSize = getIntParam(req, "size", 16);
+    final int pageSize = getIntParam(req, "size", getDisplayExecutionPageSize());
     page.add("vmutils", new VelocityUtil(this.projectManager));
 
     if (pageNum < 0) {

File: azkaban-common/src/main/java/azkaban/project/CronSchedule.java
Patch:
@@ -29,6 +29,7 @@
  */
 public class CronSchedule implements Serializable {
 
+  private static final long serialVersionUID = -1330280892166841227L;
   private final String cronExpression;
 
   /**

File: azkaban-common/src/main/java/azkaban/project/FlowTrigger.java
Patch:
@@ -37,6 +37,7 @@
  */
 public class FlowTrigger implements Serializable {
 
+  private static final long serialVersionUID = 5613379236523054097L;
   private final Map<String, FlowTriggerDependency> dependencies;
   private final CronSchedule schedule;
   private final Duration maxWaitDuration;

File: azkaban-common/src/main/java/azkaban/project/FlowTriggerDependency.java
Patch:
@@ -29,6 +29,7 @@
  */
 public class FlowTriggerDependency implements Serializable {
 
+  private static final long serialVersionUID = 5875910030716100311L;
   private final Map<String, String> props;
   private final String name;
   private final String type;

File: azkaban-common/src/main/java/azkaban/executor/mail/DefaultMailCreator.java
Patch:
@@ -205,7 +205,7 @@ public boolean createErrorEmail(final ExecutableFlow flow, final List<Executable
             + convertMSToString(executableFlow.getStartTime()) + "</td></tr>");
         message.println("<tr><td>End Time</td><td>"
             + convertMSToString(executableFlow.getEndTime()) + "</td></tr>");
-        message.println("<tr><td>Status</td><td>" + flow.getStatus() + "</td></tr>");
+        message.println("<tr><td>Status</td><td>" + executableFlow.getStatus() + "</td></tr>");
         message.println("</table>");
       }
 

File: azkaban-common/src/main/java/azkaban/executor/ExecutableNode.java
Patch:
@@ -294,7 +294,9 @@ protected void fillMapFromExecutable(final Map<String, Object> objMap) {
     objMap.put(UPDATETIME_PARAM, this.updateTime);
     objMap.put(TYPE_PARAM, this.type);
     objMap.put(CONDITION_PARAM, this.condition);
-    objMap.put(CONDITION_ON_JOB_STATUS_PARAM, this.conditionOnJobStatus.toString());
+    if (this.conditionOnJobStatus != null) {
+      objMap.put(CONDITION_ON_JOB_STATUS_PARAM, this.conditionOnJobStatus.toString());
+    }
     objMap.put(ATTEMPT_PARAM, this.attempt);
 
     if (this.inNodes != null && !this.inNodes.isEmpty()) {

File: azkaban-common/src/main/java/azkaban/executor/ExecutorManager.java
Patch:
@@ -1674,7 +1674,7 @@ public void run() {
             }
           }
         } catch (final Exception e) {
-          logger.error(e);
+          logger.error("Unexpected exception in updating executions", e);
         }
       }
     }

File: azkaban-common/src/main/java/azkaban/executor/ExecutorManagerAdapter.java
Patch:
@@ -25,6 +25,7 @@
 import java.util.Collection;
 import java.util.List;
 import java.util.Map;
+import java.util.Optional;
 import java.util.Set;
 
 public interface ExecutorManagerAdapter {
@@ -44,7 +45,7 @@ public ExecutableFlow getExecutableFlow(int execId)
    * Note, returns empty list if there isn't any running or queued flows
    * </pre>
    */
-  public List<Pair<ExecutableFlow, Executor>> getActiveFlowsWithExecutor()
+  public List<Pair<ExecutableFlow, Optional<Executor>>> getActiveFlowsWithExecutor()
       throws IOException;
 
   public List<ExecutableFlow> getRecentlyFinishedFlows();

File: azkaban-web-server/src/main/java/azkaban/webapp/servlet/ExecutorServlet.java
Patch:
@@ -57,6 +57,7 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.Optional;
 import javax.servlet.ServletConfig;
 import javax.servlet.ServletException;
 import javax.servlet.http.HttpServletRequest;
@@ -357,7 +358,7 @@ private void handleExecutionsPage(final HttpServletRequest req,
         newPage(req, resp, session,
             "azkaban/webapp/servlet/velocity/executionspage.vm");
 
-    final List<Pair<ExecutableFlow, Executor>> runningFlows =
+    final List<Pair<ExecutableFlow, Optional<Executor>>> runningFlows =
         this.executorManager.getActiveFlowsWithExecutor();
     page.add("runningFlows", runningFlows.isEmpty() ? null : runningFlows);
 

File: azkaban-exec-server/src/main/java/azkaban/dag/Dag.java
Patch:
@@ -28,7 +28,7 @@
  * <p>Most of the methods in this class should remain package private. Code outside of this
  * package should mainly interact with the {@link DagService}.
  */
-class Dag {
+public class Dag {
 
   private final String name;
   private final DagProcessor dagProcessor;

File: azkaban-exec-server/src/main/java/azkaban/dag/Node.java
Patch:
@@ -25,7 +25,7 @@
 /**
  * Node in a DAG: Directed acyclic graph.
  */
-class Node {
+public class Node {
 
   private final String name;
 
@@ -48,6 +48,7 @@ class Node {
     this.name = name;
     requireNonNull(dag, "The dag of the node can't be null");
     this.dag = dag;
+    dag.addNode(this);
   }
 
   Dag getDag() {

File: azkaban-exec-server/src/main/java/azkaban/dag/Status.java
Patch:
@@ -18,7 +18,7 @@
 
 import com.google.common.collect.ImmutableSet;
 
-enum Status {
+public enum Status {
   READY, // ready to run
   DISABLED, // disabled by users. Treat as the node has the status of success
   BLOCKED, // temporarily blocked. Need to be unblocked by another external event
@@ -35,7 +35,7 @@ enum Status {
   static final ImmutableSet<Status> TERMINAL_STATES = ImmutableSet.of(DISABLED, SUCCESS, FAILURE,
       CANCELED, KILLED);
 
-  boolean isTerminal() {
+  public boolean isTerminal() {
     return TERMINAL_STATES.contains(this);
   }
 

File: azkaban-common/src/test/java/azkaban/executor/ExecutorManagerTest.java
Patch:
@@ -272,6 +272,7 @@ public void testKillQueuedFlow() throws Exception {
   @Test
   public void testNotFoundFlows() throws Exception {
     testSetUpForRunningFlows();
+    this.manager.start();
     final ExecutableFlow flow1 = TestUtils.createTestExecutableFlow("exectest1", "exec1");
     when(this.loader.fetchExecutableFlow(-1)).thenReturn(flow1);
 

File: azkaban-web-server/src/main/java/azkaban/webapp/AzkabanWebServer.java
Patch:
@@ -228,6 +228,8 @@ public static void launch(final AzkabanWebServer webServer) throws Exception {
     /* This creates the Web Server instance */
     app = webServer;
 
+    webServer.executorManager.start();
+
     // TODO refactor code into ServerProvider
     webServer.prepareAndStartServer();
 

File: azkaban-common/src/main/java/azkaban/flow/Flow.java
Patch:
@@ -195,7 +195,7 @@ private void setLevelsAndEdgeNodes(final Set<Node> levelNodes, int level) {
     numLevels = level;
 
     if (!nextLevelNodes.isEmpty()) {
-      setLevelsAndEdgeNodes(nextLevelNodes, level++);
+      setLevelsAndEdgeNodes(nextLevelNodes, level + 1);
     }
   }
 

File: azkaban-common/src/test/java/azkaban/jobExecutor/ProcessJobTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 LinkedIn Corp.
+ * Copyright 2018 LinkedIn Corp.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
@@ -205,14 +205,13 @@ public void testCancelDuringPreparation() throws InterruptedException, Execution
 
   @Test
   public void testCancelAfterJobProcessCreation() throws InterruptedException, ExecutionException {
-    this.props.put(ProcessJob.COMMAND, "sleep 1");
+    this.props.put(ProcessJob.COMMAND, "sleep 5");
 
     final ExecutorService executorService = Executors.newSingleThreadExecutor();
     final Future future = executorService.submit(() -> {
       try {
         this.job.run();
       } catch (final Exception e) {
-        e.printStackTrace();
       }
     });
 

File: azkaban-exec-server/src/main/java/azkaban/execapp/ExecutorServlet.java
Patch:
@@ -287,7 +287,6 @@ private void handleAjaxExecute(final HttpServletRequest req,
     try {
       this.flowRunnerManager.submitFlow(execId);
     } catch (final ExecutorManagerException e) {
-      e.printStackTrace();
       logger.error(e.getMessage(), e);
       respMap.put(RESPONSE_ERROR, e.getMessage());
     }
@@ -330,7 +329,7 @@ private void handleAjaxResume(final Map<String, Object> respMap, final int execi
       this.flowRunnerManager.resumeFlow(execid, user);
       respMap.put(STATUS_PARAM, RESPONSE_SUCCESS);
     } catch (final ExecutorManagerException e) {
-      e.printStackTrace();
+      logger.error(e.getMessage(), e);
       respMap.put(RESPONSE_ERROR, e.getMessage());
     }
   }

File: azkaban-exec-server/src/test/java/azkaban/dag/TestNodeProcessor.java
Patch:
@@ -22,10 +22,10 @@ public class TestNodeProcessor implements NodeProcessor {
 
   private final DagService dagService;
   private final StatusChangeRecorder statusChangeRecorder;
-  private final Set<Node> nodesToFail;
+  private final Set<String> nodesToFail;
 
   TestNodeProcessor(final DagService dagService,
-      final StatusChangeRecorder statusChangeRecorder, final Set<Node> nodesToFail) {
+      final StatusChangeRecorder statusChangeRecorder, final Set<String> nodesToFail) {
     this.dagService = dagService;
     this.statusChangeRecorder = statusChangeRecorder;
     this.nodesToFail = nodesToFail;
@@ -38,7 +38,7 @@ public void changeStatus(final Node node, final Status status) {
 
     switch (status) {
       case RUNNING:
-        if (this.nodesToFail.contains(node)) {
+        if (this.nodesToFail.contains(node.getName())) {
           this.dagService.markNodeFailed(node);
         } else {
           this.dagService.markNodeSuccess(node);

File: azkaban-exec-server/src/test/java/azkaban/dag/TestUtil.java
Patch:
@@ -25,7 +25,7 @@ class TestUtil {
    *
    * @param name node name
    */
-  static Node createNodeWithNullProcessor(final String name) {
-    return new Node(name, mock(NodeProcessor.class));
+  static Node createNodeWithNullProcessor(final String name, final Dag dag) {
+    return new Node(name, mock(NodeProcessor.class), dag);
   }
 }

File: azkaban-common/src/test/java/azkaban/utils/EmailerTest.java
Patch:
@@ -22,7 +22,6 @@
 import static org.mockito.Mockito.when;
 
 import azkaban.executor.ExecutableFlow;
-import azkaban.executor.mail.DefaultMailCreatorTest;
 import azkaban.flow.Flow;
 import azkaban.metrics.CommonMetrics;
 import azkaban.metrics.MetricsManager;
@@ -94,7 +93,7 @@ public void testSendErrorEmail() throws Exception {
     emailer.alertOnError(exFlow);
     verify(this.message).addAllToAddress(this.receiveAddrList);
     verify(this.message).setSubject("Flow 'jobe' has failed on azkaban");
-    assertThat(DefaultMailCreatorTest.read("errorEmail2.html"))
+    assertThat(TestUtils.readResource("errorEmail2.html", this))
         .isEqualToIgnoringWhitespace(this.message.getBody());
   }
 

File: azkaban-web-server/src/main/java/azkaban/flowtrigger/quartz/FlowTriggerQuartzJob.java
Patch:
@@ -34,6 +34,8 @@ public class FlowTriggerQuartzJob extends AbstractQuartzJob {
   public static final String FLOW_ID = "FLOW_ID";
   public static final String FLOW_VERSION = "FLOW_VERSION";
 
+  public static final String JOB_NAME = "FLOW_TRIGGER";
+
   private final FlowTriggerService triggerService;
   private final ProjectManager projectManager;
 

File: azkaban-common/src/main/java/azkaban/executor/ExecutionFlowDao.java
Patch:
@@ -142,7 +142,7 @@ List<ExecutableFlow> fetchFlowHistory(final String projContain, final String flo
 
     boolean first = true;
     if (projContain != null && !projContain.isEmpty()) {
-      query += " ef JOIN projects p ON ef.project_id = p.id WHERE name LIKE ?";
+      query += " JOIN projects p ON ef.project_id = p.id WHERE name LIKE ?";
       params.add('%' + projContain + '%');
       first = false;
     }
@@ -268,7 +268,7 @@ public static class FetchExecutableFlows implements
       ResultSetHandler<List<ExecutableFlow>> {
 
     static String FETCH_BASE_EXECUTABLE_FLOW_QUERY =
-        "SELECT exec_id, enc_type, flow_data FROM execution_flows ";
+        "SELECT ef.exec_id, ef.enc_type, ef.flow_data FROM execution_flows ef";
     static String FETCH_EXECUTABLE_FLOW =
         "SELECT exec_id, enc_type, flow_data FROM execution_flows "
             + "WHERE exec_id=?";

File: azkaban-common/src/main/java/azkaban/executor/ExecutorManager.java
Patch:
@@ -1734,7 +1734,7 @@ private class QueueProcessorThread extends Thread {
 
     private static final long QUEUE_PROCESSOR_WAIT_IN_MS = 1000;
     private final int maxDispatchingErrors;
-    private final long activeExecutorRefreshWindowInMilisec;
+    private final long activeExecutorRefreshWindowInMillisec;
     private final int activeExecutorRefreshWindowInFlows;
 
     private volatile boolean shutdown = false;
@@ -1748,7 +1748,7 @@ public QueueProcessorThread(final boolean isActive,
       this.maxDispatchingErrors = maxDispatchingErrors;
       this.activeExecutorRefreshWindowInFlows =
           activeExecutorRefreshWindowInFlows;
-      this.activeExecutorRefreshWindowInMilisec =
+      this.activeExecutorRefreshWindowInMillisec =
           activeExecutorRefreshWindowInTime;
       this.setName("AzkabanWebServer-QueueProcessor-Thread");
     }
@@ -1775,7 +1775,7 @@ public void run() {
           try {
             // start processing queue if active, other wait for sometime
             if (this.isActive) {
-              processQueuedFlows(this.activeExecutorRefreshWindowInMilisec,
+              processQueuedFlows(this.activeExecutorRefreshWindowInMillisec,
                   this.activeExecutorRefreshWindowInFlows);
             }
             wait(QUEUE_PROCESSOR_WAIT_IN_MS);

File: azkaban-common/src/main/java/azkaban/metric/TimeBasedReportingMetric.java
Patch:
@@ -26,8 +26,8 @@
  */
 public abstract class TimeBasedReportingMetric<T> extends AbstractMetric<T> {
 
-  protected long MAX_MILISEC_INTERVAL = 60 * 60 * 1000;
-  protected long MIN_MILISEC_INTERVAL = 3 * 1000;
+  protected long MAX_MILLISEC_INTERVAL = 60 * 60 * 1000;
+  protected long MIN_MILLISEC_INTERVAL = 3 * 1000;
   private Timer timer;
 
   /**
@@ -84,7 +84,7 @@ public void updateInterval(final long interval) throws MetricException {
   }
 
   private boolean isValidInterval(final long interval) {
-    return interval >= this.MIN_MILISEC_INTERVAL && interval <= this.MAX_MILISEC_INTERVAL;
+    return interval >= this.MIN_MILLISEC_INTERVAL && interval <= this.MAX_MILLISEC_INTERVAL;
   }
 
   /**

File: azkaban-common/src/main/java/azkaban/metric/inmemoryemitter/InMemoryMetricEmitter.java
Patch:
@@ -70,7 +70,7 @@ public InMemoryMetricEmitter(final Props azkProps) {
   /**
    * Update reporting interval
    *
-   * @param val interval in milli seconds
+   * @param val interval in milliseconds
    */
   public synchronized void setReportingInterval(final long val) {
     this.timeWindow = val;

File: azkaban-common/src/test/java/azkaban/project/DirectoryFlowLoaderTest.java
Patch:
@@ -55,7 +55,9 @@ private static File decompressTarBZ2(InputStream is) throws IOException {
           parent.mkdirs();
         }
 
-        IOUtils.copy(tais, new FileOutputStream(outputFile));
+        try (FileOutputStream os = new FileOutputStream(outputFile)) {
+          IOUtils.copy(tais, os);
+        }
       }
 
       return outputDir;

File: azkaban-web-server/src/main/java/azkaban/flowtrigger/TriggerInstance.java
Patch:
@@ -38,8 +38,9 @@ public class TriggerInstance {
 
   //todo chengren311: convert it to builder
   public TriggerInstance(final String id, final FlowTrigger flowTrigger, final String flowId,
-      final int flowVersion, final String submitUser, final List<DependencyInstance> depInstances,
-      final int flowExecId, final Project project) {
+      final int flowVersion, final String submitUser, final List<DependencyInstance>
+      depInstances, final int flowExecId, final Project project) {
+
     this.depInstances = ImmutableList.copyOf(depInstances);
     this.id = id;
     this.flowTrigger = flowTrigger;

File: azkaban-hadoop-security-plugin/src/main/java/azkaban/security/commons/HadoopSecurityManager.java
Patch:
@@ -30,6 +30,7 @@ public abstract class HadoopSecurityManager {
 
   public static final String PROXY_KEYTAB_LOCATION = "proxy.keytab.location";
   public static final String PROXY_USER = "proxy.user";
+  public static final String USER_TO_PROXY = "user.to.proxy";
   public static final String OBTAIN_BINARY_TOKEN = "obtain.binary.token";
   public static final String MAPREDUCE_JOB_CREDENTIALS_BINARY =
       "mapreduce.job.credentials.binary";

File: azkaban-common/src/main/java/azkaban/executor/ExecutorApiGateway.java
Patch:
@@ -118,10 +118,9 @@ private String callForJsonString(final String host, final int port, final String
     }
 
     @SuppressWarnings("unchecked") final URI uri =
-        ExecutorApiClient.buildUri(host, port, path, true,
-            paramList.toArray(new Pair[0]));
+        ExecutorApiClient.buildUri(host, port, path, true);
 
-    return this.apiClient.httpGet(uri, null);
+    return this.apiClient.httpPost(uri, paramList);
   }
 
 }

File: azkaban-common/src/test/java/azkaban/executor/ExecutorApiGatewayTest.java
Patch:
@@ -40,7 +40,7 @@ public void testExecutorInfoJsonParser() throws Exception {
     final ExecutorInfo exeInfo = new ExecutorInfo(99.9, 14095, 50, System.currentTimeMillis(), 89,
         10);
     final String json = JSONUtils.toJSON(exeInfo);
-    when(this.client.httpGet(Mockito.any(), Mockito.any())).thenReturn(json);
+    when(this.client.httpPost(Mockito.any(), Mockito.any())).thenReturn(json);
     final ExecutorInfo exeInfo2 = this.gateway
         .callForJsonType("localhost", 1234, "executor", null, ExecutorInfo.class);
     Assert.assertTrue(exeInfo.equals(exeInfo2));

File: az-core/src/main/java/azkaban/Constants.java
Patch:
@@ -89,7 +89,6 @@ public class Constants {
   // The flow exec id for a flow trigger instance which hasn't started a flow yet
   public static final int UNASSIGNED_EXEC_ID = -1;
 
-
   public static class ConfigurationKeys {
 
     // Configures Azkaban Flow Version in project YAML file

File: azkaban-common/src/main/java/azkaban/database/DataSourceUtils.java
Patch:
@@ -142,7 +142,7 @@ public static class EmbeddedH2BasicDataSource extends AzkabanDataSource {
 
     private EmbeddedH2BasicDataSource(final Path filePath) {
       super();
-      final String url = "jdbc:h2:file:" + filePath;
+      final String url = "jdbc:h2:file:" + filePath + ";IGNORECASE=TRUE";
       setDriverClassName("org.h2.Driver");
       setUrl(url);
     }

File: azkaban-common/src/test/java/azkaban/database/AzkabanConnectionPoolTest.java
Patch:
@@ -78,7 +78,7 @@ public static class EmbeddedH2BasicDataSource extends AzkabanDataSource {
 
     public EmbeddedH2BasicDataSource() {
       super();
-      final String url = "jdbc:h2:mem:test";
+      final String url = "jdbc:h2:mem:test;IGNORECASE=TRUE";
       setDriverClassName("org.h2.Driver");
       setUrl(url);
     }

File: azkaban-db/src/main/java/azkaban/db/H2FileDataSource.java
Patch:
@@ -29,7 +29,7 @@ public H2FileDataSource(final Props props) {
     super();
     final String filePath = props.getString("h2.path");
     final Path h2DbPath = Paths.get(filePath).toAbsolutePath();
-    final String url = "jdbc:h2:file:" + h2DbPath;
+    final String url = "jdbc:h2:file:" + h2DbPath + ";IGNORECASE=TRUE";
     setDriverClassName("org.h2.Driver");
     setUrl(url);
   }

File: azkaban-db/src/test/java/azkaban/db/AzDBTestUtility.java
Patch:
@@ -36,7 +36,7 @@ public static class EmbeddedH2BasicDataSource extends AzkabanDataSource {
 
     public EmbeddedH2BasicDataSource() {
       super();
-      final String url = "jdbc:h2:mem:test";
+      final String url = "jdbc:h2:mem:test;IGNORECASE=TRUE";
       setDriverClassName("org.h2.Driver");
       setUrl(url);
     }

File: azkaban-web-server/src/test/java/azkaban/flowtrigger/DependencyInstanceProcessorTest.java
Patch:
@@ -21,7 +21,6 @@
 import static org.mockito.Mockito.verify;
 
 import azkaban.flowtrigger.database.FlowTriggerInstanceLoader;
-import java.util.Date;
 import org.junit.BeforeClass;
 import org.junit.Test;
 
@@ -42,8 +41,8 @@ public static void setup() throws Exception {
 
   @Test
   public void testStatusUpdate() {
-    final DependencyInstance depInst = new DependencyInstance("dep1", new Date(), null, null, Status
-        .RUNNING, CancellationCause.NONE);
+    final DependencyInstance depInst = new DependencyInstance("dep1", System.currentTimeMillis()
+        , 0, null, Status.RUNNING, CancellationCause.NONE);
     processor.processStatusUpdate(depInst);
     verify(triggerInstLoader).updateDependencyExecutionStatus(depInst);
   }

File: azkaban-common/src/main/java/azkaban/project/NodeBeanLoader.java
Patch:
@@ -110,8 +110,8 @@ private void validateSchedule(final FlowTriggerBean flowTriggerBean) {
   private void validateFlowTriggerBean(final FlowTriggerBean flowTriggerBean) {
     // validate max wait mins
     Preconditions.checkArgument(flowTriggerBean.getMaxWaitMins() >= Constants
-        .MIN_FLOW_TRIGGER_WAIT_TIME.toMinutes(), "max wait min must be longer than " + Constants
-        .MIN_FLOW_TRIGGER_WAIT_TIME + " min ");
+        .MIN_FLOW_TRIGGER_WAIT_TIME.toMinutes(), "max wait min must be at least " + Constants
+        .MIN_FLOW_TRIGGER_WAIT_TIME.toMinutes() + " min(s)");
 
     validateSchedule(flowTriggerBean);
     validateTriggerDependencies(flowTriggerBean.getTriggerDependencies());

File: azkaban-common/src/test/java/azkaban/project/NodeBeanLoaderTest.java
Patch:
@@ -223,7 +223,8 @@ public void testFlowTriggerMaxWaitMinValidation() throws Exception {
         TRIGGER_FLOW_YML_TEST_DIR, "flow_trigger_zero_max_wait_min.flow"));
 
     assertThatThrownBy(() -> loader.toFlowTrigger(nodeBean2.getTrigger()))
-        .isInstanceOf(IllegalArgumentException.class);
+        .isInstanceOf(IllegalArgumentException.class).hasMessage("max wait min must be at least 1"
+        + " min(s)");
   }
 
   @Test

File: azkaban-common/src/main/java/azkaban/project/ProjectManager.java
Patch:
@@ -213,6 +213,7 @@ public Project getProject(final String name) {
       fetchedProject = this.projectsByName.get(name);
     } else {
       try {
+        logger.info("Project " + name + " doesn't exist in cache, fetching from DB now.");
         fetchedProject = this.projectLoader.fetchProjectByName(name);
       } catch (final ProjectManagerException e) {
         logger.error("Could not load project from store.", e);

File: azkaban-common/src/test/java/azkaban/project/FlowTriggerTest.java
Patch:
@@ -54,7 +54,7 @@ public void testFlowTriggerArgumentValidation() {
     final Duration invalidDuration = Duration.ofMinutes(-1);
 
     assertThatThrownBy(() -> new FlowTrigger(validSchedule, invalidDependencyList, validDuration))
-        .isInstanceOf(IllegalArgumentException.class);
+        .isInstanceOf(NullPointerException.class);
 
     assertThatThrownBy(() -> new FlowTrigger(validSchedule, validDependencyList, invalidDuration))
         .isInstanceOf(IllegalArgumentException.class);

File: az-core/src/main/java/azkaban/Constants.java
Patch:
@@ -225,6 +225,8 @@ public static class JobProperties {
     public static final String MAX_XMS_DEFAULT = "1G";
     public static final String JOB_MAX_XMX = "job.max.Xmx";
     public static final String MAX_XMX_DEFAULT = "2G";
+    // The hadoop user the job should run under. If not specified, it will default to submit user.
+    public static final String USER_TO_PROXY = "user.to.proxy";
   }
 
   public static class JobCallbackProperties {

File: azkaban-common/src/main/java/azkaban/jobExecutor/ProcessJob.java
Patch:
@@ -21,6 +21,7 @@
 import static azkaban.ServiceProvider.SERVICE_PROVIDER;
 
 import azkaban.Constants;
+import azkaban.Constants.JobProperties;
 import azkaban.flow.CommonJobProperties;
 import azkaban.jobExecutor.utils.process.AzkabanProcess;
 import azkaban.jobExecutor.utils.process.AzkabanProcessBuilder;
@@ -54,7 +55,6 @@ public class ProcessJob extends AbstractProcessJob {
   @Deprecated
   public static final String NATIVE_LIB_FOLDER = "azkaban.native.lib";
   public static final String EXECUTE_AS_USER = "execute.as.user";
-  public static final String USER_TO_PROXY = "user.to.proxy";
   public static final String KRB5CCNAME = "KRB5CCNAME";
   private static final Duration KILL_TIME = Duration.ofSeconds(30);
   private static final String MEMCHECK_ENABLED = "memCheck.enabled";
@@ -354,8 +354,8 @@ private String getKrb5ccname(final Props jobProps) {
    */
   private String getEffectiveUser(final Props jobProps) {
     String effectiveUser = null;
-    if (jobProps.containsKey(USER_TO_PROXY)) {
-      effectiveUser = jobProps.getString(USER_TO_PROXY);
+    if (jobProps.containsKey(JobProperties.USER_TO_PROXY)) {
+      effectiveUser = jobProps.getString(JobProperties.USER_TO_PROXY);
     } else if (jobProps.containsKey(CommonJobProperties.SUBMIT_USER)) {
       effectiveUser = jobProps.getString(CommonJobProperties.SUBMIT_USER);
     } else {

File: azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java
Patch:
@@ -19,6 +19,7 @@
 import static azkaban.Constants.ConfigurationKeys.AZKABAN_SERVER_HOST_NAME;
 
 import azkaban.Constants;
+import azkaban.Constants.JobProperties;
 import azkaban.ServiceProvider;
 import azkaban.event.Event;
 import azkaban.event.EventData;
@@ -1241,7 +1242,7 @@ private synchronized Map<String, String> getJobMetadata(final JobRunner jobRunne
       metaData.put("jobType", String.valueOf(node.getType()));
       metaData.put("azkabanHost", props.getString(AZKABAN_SERVER_HOST_NAME, "unknown"));
       metaData.put("jobProxyUser",
-          jobRunner.getProps().getString("user.to.proxy", null));
+          jobRunner.getProps().getString(JobProperties.USER_TO_PROXY, null));
       return metaData;
     }
 

File: azkaban-hadoop-security-plugin/src/main/java/azkaban/security/HadoopSecurityManager_H_2_0.java
Patch:
@@ -286,7 +286,7 @@ public synchronized UserGroupInformation getProxiedUser(final String userToProxy
   @Override
   public UserGroupInformation getProxiedUser(final Props userProp)
       throws HadoopSecurityManagerException {
-    final String userToProxy = verifySecureProperty(userProp, USER_TO_PROXY);
+    final String userToProxy = verifySecureProperty(userProp, JobProperties.USER_TO_PROXY);
     final UserGroupInformation user = getProxiedUser(userToProxy);
     if (user == null) {
       throw new HadoopSecurityManagerException(
@@ -528,7 +528,7 @@ public synchronized void prefetchToken(final File tokenFile,
       final Props props, final Logger logger)
       throws HadoopSecurityManagerException {
 
-    final String userToProxy = props.getString(USER_TO_PROXY);
+    final String userToProxy = props.getString(JobProperties.USER_TO_PROXY);
 
     logger.info("Getting hadoop tokens based on props for " + userToProxy);
 

File: azkaban-hadoop-security-plugin/src/main/java/azkaban/security/commons/HadoopSecurityManager.java
Patch:
@@ -30,7 +30,6 @@ public abstract class HadoopSecurityManager {
 
   public static final String PROXY_KEYTAB_LOCATION = "proxy.keytab.location";
   public static final String PROXY_USER = "proxy.user";
-  public static final String USER_TO_PROXY = "user.to.proxy";
   public static final String OBTAIN_BINARY_TOKEN = "obtain.binary.token";
   public static final String MAPREDUCE_JOB_CREDENTIALS_BINARY =
       "mapreduce.job.credentials.binary";

File: azkaban-exec-server/src/main/java/azkaban/execapp/event/LocalFlowWatcher.java
Patch:
@@ -69,7 +69,7 @@ public void handleEvent(final Event event) {
           // A job runner is finished
           final JobRunner runner = (JobRunner) event.getRunner();
           final ExecutableNode node = runner.getNode();
-          System.out.println(node + " looks like " + node.getStatus());
+          getLogger().info(node + " looks like " + node.getStatus());
           handleJobStatusChange(node.getNestedId(), node.getStatus());
         }
       } else if (event.getType() == EventType.FLOW_FINISHED) {

File: azkaban-common/src/main/java/azkaban/project/DirectoryYamlFlowLoader.java
Patch:
@@ -139,7 +139,9 @@ private Flow convertAzkabanFlowToFlow(final AzkabanFlow azkabanFlow, final Strin
 
     // Add edges for the flow.
     buildFlowEdges(azkabanFlow, flowName);
-    flow.addAllEdges(this.edgeMap.get(flowName));
+    if (this.edgeMap.containsKey(flowName)) {
+      flow.addAllEdges(this.edgeMap.get(flowName));
+    }
 
     // Todo jamiesjc: deprecate startNodes, endNodes and numLevels, and remove below method finally.
     // Blow method will construct startNodes, endNodes and numLevels for the flow.

File: azkaban-common/src/test/java/azkaban/utils/UtilsTest.java
Patch:
@@ -60,12 +60,12 @@ public void testValidCronExpressionV() {
 
     final DateTimeZone timezone = DateTimeZone.getDefault();
     Assert.assertTrue(Utils.isCronExpressionValid("0 0 3 ? * *", timezone));
-    Assert.assertTrue(Utils.isCronExpressionValid("0 0 3 ? * * 2017", timezone));
+    Assert.assertTrue(Utils.isCronExpressionValid("0 0 3 ? * * 2018", timezone));
     Assert.assertTrue(Utils.isCronExpressionValid("0 0 * ? * *", timezone));
     Assert.assertTrue(Utils.isCronExpressionValid("0 0 * ? * FRI", timezone));
 
     // This is a bug from Quartz Cron. It looks like Quartz will parse the preceding 7 fields of a String.
-    Assert.assertTrue(Utils.isCronExpressionValid("0 0 3 ? * * 2017 22", timezone));
+    Assert.assertTrue(Utils.isCronExpressionValid("0 0 3 ? * * 2018 22", timezone));
   }
 
   /* Test CronExpression invalid cases*/

File: az-core/src/main/java/azkaban/Constants.java
Patch:
@@ -51,6 +51,9 @@ public class Constants {
   public static final String CRON_SCHEDULE_TYPE = "cron";
   public static final String SCHEDULE_VALUE = "value";
 
+  // Job properties override suffix
+  public static final String JOB_OVERRIDE_SUFFIX = ".jor";
+
   // Names and paths of various file names to configure Azkaban
   public static final String AZKABAN_PROPERTIES_FILE = "azkaban.properties";
   public static final String AZKABAN_PRIVATE_PROPERTIES_FILE = "azkaban.private.properties";

File: azkaban-common/src/main/java/azkaban/project/AzkabanFlow.java
Patch:
@@ -30,6 +30,7 @@
 /**
  * Flow level definition of the DAG.
  * Contains a list of AzkabanNodes and related flow properties.
+ * Introduced in Flow 2.0 design.
  */
 public class AzkabanFlow extends AzkabanNode {
 

File: azkaban-common/src/main/java/azkaban/project/DirectoryYamlFlowLoader.java
Patch:
@@ -118,6 +118,7 @@ private void convertYamlFiles(final File projectDir) {
   private Flow convertAzkabanFlowToFlow(final AzkabanFlow azkabanFlow, final String flowName,
       final File flowFile) {
     final Flow flow = new Flow(flowName);
+    flow.setAzkabanFlowVersion(Constants.AZKABAN_FLOW_VERSION_2_0);
     final Props props = azkabanFlow.getProps();
     FlowLoaderUtils.addEmailPropsToFlow(flow, props);
     props.setSource(flowFile.getName());

File: azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java
Patch:
@@ -742,7 +742,7 @@ private Props loadJobProps(final ExecutableNode node) throws IOException {
       try {
         props =
             this.projectLoader.fetchProjectProperty(this.flow.getProjectId(),
-                this.flow.getVersion(), node.getId() + ".jor");
+                this.flow.getVersion(), node.getId() + Constants.JOB_OVERRIDE_SUFFIX);
       } catch (final ProjectManagerException e) {
         e.printStackTrace();
         this.logger.error("Error loading job override property for job "

File: azkaban-exec-server/src/main/java/azkaban/execapp/AzkabanExecutorServer.java
Patch:
@@ -140,7 +140,7 @@ public static void main(final String[] args) throws Exception {
     }
 
     /* Initialize Guice Injector */
-    final Injector injector = Guice .createInjector (
+    final Injector injector = Guice.createInjector(
         new AzkabanCommonModule(props),
         new AzkabanExecServerModule()
     );
@@ -188,7 +188,7 @@ public void run() {
       public void logTopMemoryConsumers() throws Exception, IOException {
         if (new File("/bin/bash").exists() && new File("/bin/ps").exists()
             && new File("/usr/bin/head").exists()) {
-          logger.info("logging top memeory consumer");
+          logger.info("logging top memory consumer");
 
           final java.lang.ProcessBuilder processBuilder =
               new java.lang.ProcessBuilder("/bin/bash", "-c",

File: azkaban-web-server/src/main/java/azkaban/webapp/AzkabanWebServer.java
Patch:
@@ -256,7 +256,7 @@ public void run() {
       public void logTopMemoryConsumers() throws Exception {
         if (new File("/bin/bash").exists() && new File("/bin/ps").exists()
             && new File("/usr/bin/head").exists()) {
-          logger.info("logging top memeory consumer");
+          logger.info("logging top memory consumer");
 
           final java.lang.ProcessBuilder processBuilder =
               new java.lang.ProcessBuilder("/bin/bash", "-c",

File: azkaban-common/src/test/java/azkaban/executor/ExecutableFlowTest.java
Patch:
@@ -282,7 +282,9 @@ public void testExecutorFlowJson2() throws Exception {
 
     final ExecutableFlow exFlow = new ExecutableFlow(this.project, flow);
     exFlow.setExecutionId(101);
-    exFlow.setAttempt(2);
+    // reset twice so that attempt = 2
+    exFlow.resetForRetry();
+    exFlow.resetForRetry();
     exFlow.setDelayedExecution(1000);
 
     final ExecutionOptions options = new ExecutionOptions();

File: azkaban-exec-server/src/main/java/azkaban/execapp/event/JobCallbackManager.java
Patch:
@@ -14,6 +14,7 @@
 import azkaban.execapp.jmx.JmxJobCallbackMBean;
 import azkaban.executor.Status;
 import azkaban.jobcallback.JobCallbackStatusEnum;
+import azkaban.spi.EventType;
 import azkaban.utils.Props;
 import azkaban.utils.PropsUtils;
 import java.net.InetAddress;
@@ -108,9 +109,9 @@ public void handleEvent(final Event event) {
 
     if (event.getRunner() instanceof JobRunner) {
       try {
-        if (event.getType() == Event.Type.JOB_STARTED) {
+        if (event.getType() == EventType.JOB_STARTED) {
           processJobCallOnStart(event);
-        } else if (event.getType() == Event.Type.JOB_FINISHED) {
+        } else if (event.getType() == EventType.JOB_FINISHED) {
           processJobCallOnFinish(event);
         }
       } catch (final Throwable e) {

File: azkaban-exec-server/src/main/java/azkaban/execapp/event/LocalFlowWatcher.java
Patch:
@@ -17,12 +17,12 @@
 package azkaban.execapp.event;
 
 import azkaban.event.Event;
-import azkaban.event.Event.Type;
 import azkaban.event.EventData;
 import azkaban.event.EventListener;
 import azkaban.execapp.FlowRunner;
 import azkaban.execapp.JobRunner;
 import azkaban.executor.ExecutableNode;
+import azkaban.spi.EventType;
 
 public class LocalFlowWatcher extends FlowWatcher {
 
@@ -58,7 +58,7 @@ public class LocalFlowWatcherListener implements EventListener {
 
     @Override
     public void handleEvent(final Event event) {
-      if (event.getType() == Type.JOB_FINISHED) {
+      if (event.getType() == EventType.JOB_FINISHED) {
         if (event.getRunner() instanceof FlowRunner) {
           // The flow runner will finish a job without it running
           final EventData eventData = event.getData();
@@ -72,7 +72,7 @@ public void handleEvent(final Event event) {
           System.out.println(node + " looks like " + node.getStatus());
           handleJobStatusChange(node.getNestedId(), node.getStatus());
         }
-      } else if (event.getType() == Type.FLOW_FINISHED) {
+      } else if (event.getType() == EventType.FLOW_FINISHED) {
         stopWatcher();
       }
     }

File: azkaban-exec-server/src/main/java/azkaban/execapp/metric/NumFailedFlowMetric.java
Patch:
@@ -17,13 +17,13 @@
 package azkaban.execapp.metric;
 
 import azkaban.event.Event;
-import azkaban.event.Event.Type;
 import azkaban.event.EventListener;
 import azkaban.execapp.FlowRunner;
 import azkaban.executor.Status;
 import azkaban.metric.MetricException;
 import azkaban.metric.MetricReportManager;
 import azkaban.metric.TimeBasedReportingMetric;
+import azkaban.spi.EventType;
 
 /**
  * Metric to keep track of number of failed flows in between the tracking events
@@ -47,7 +47,7 @@ public NumFailedFlowMetric(final MetricReportManager manager, final long interva
    */
   @Override
   public synchronized void handleEvent(final Event event) {
-    if (event.getType() == Type.FLOW_FINISHED) {
+    if (event.getType() == EventType.FLOW_FINISHED) {
       final FlowRunner runner = (FlowRunner) event.getRunner();
       if (runner != null && runner.getExecutableFlow().getStatus().equals(Status.FAILED)) {
         this.value = this.value + 1;

File: azkaban-exec-server/src/main/java/azkaban/execapp/metric/NumFailedJobMetric.java
Patch:
@@ -17,12 +17,12 @@
 package azkaban.execapp.metric;
 
 import azkaban.event.Event;
-import azkaban.event.Event.Type;
 import azkaban.event.EventListener;
 import azkaban.executor.Status;
 import azkaban.metric.MetricException;
 import azkaban.metric.MetricReportManager;
 import azkaban.metric.TimeBasedReportingMetric;
+import azkaban.spi.EventType;
 
 /**
  * Metric to keep track of number of failed jobs in between the tracking events
@@ -45,7 +45,8 @@ public NumFailedJobMetric(final MetricReportManager manager, final long interval
    */
   @Override
   public synchronized void handleEvent(final Event event) {
-    if (event.getType() == Type.JOB_FINISHED && Status.FAILED.equals(event.getData().getStatus())) {
+    if (event.getType() == EventType.JOB_FINISHED && Status.FAILED
+        .equals(event.getData().getStatus())) {
       this.value = this.value + 1;
     }
   }

File: azkaban-exec-server/src/main/java/azkaban/execapp/metric/NumRunningJobMetric.java
Patch:
@@ -17,11 +17,11 @@
 package azkaban.execapp.metric;
 
 import azkaban.event.Event;
-import azkaban.event.Event.Type;
 import azkaban.event.EventListener;
 import azkaban.metric.MetricException;
 import azkaban.metric.MetricReportManager;
 import azkaban.metric.TimeBasedReportingMetric;
+import azkaban.spi.EventType;
 
 /**
  * Metric to keep track of number of running jobs in Azkaban exec server
@@ -49,9 +49,9 @@ public NumRunningJobMetric(final MetricReportManager manager, final long interva
    */
   @Override
   public synchronized void handleEvent(final Event event) {
-    if (event.getType() == Type.JOB_STARTED) {
+    if (event.getType() == EventType.JOB_STARTED) {
       this.value = this.value + 1;
-    } else if (event.getType() == Type.JOB_FINISHED) {
+    } else if (event.getType() == EventType.JOB_FINISHED) {
       this.value = this.value - 1;
     }
   }

File: azkaban-exec-server/src/test/java/azkaban/execapp/FlowRunnerTest2.java
Patch:
@@ -35,6 +35,7 @@
 import azkaban.jobtype.JobTypePluginSet;
 import azkaban.project.Project;
 import azkaban.project.ProjectLoader;
+import azkaban.spi.AzkabanEventReporter;
 import azkaban.test.Utils;
 import azkaban.test.executions.ExecutionsTestUtil;
 import azkaban.utils.Props;
@@ -95,6 +96,7 @@
 public class FlowRunnerTest2 extends FlowRunnerTestBase {
 
   private static int id = 101;
+  private final AzkabanEventReporter azkabanEventReporter = null;
   @Rule
   public TemporaryFolder temporaryFolder = new TemporaryFolder();
   private File workingDir;
@@ -1127,8 +1129,7 @@ private FlowRunner createFlowRunner(final EventCollectorListener eventCollector,
 
     final FlowRunner runner = new FlowRunner(
         this.fakeExecutorLoader.fetchExecutableFlow(exId), this.fakeExecutorLoader,
-        mock(ProjectLoader.class), this.jobtypeManager, azkabanProps);
-
+        mock(ProjectLoader.class), this.jobtypeManager, azkabanProps, this.azkabanEventReporter);
     runner.addListener(eventCollector);
 
     return runner;

File: azkaban-exec-server/src/main/java/azkaban/execapp/JobRunner.java
Patch:
@@ -405,7 +405,7 @@ private boolean handleNonReadyStatus() {
         nodeStatus = changeStatus(Status.SKIPPED, time);
         quickFinish = true;
       } else if (this.isKilled()) {
-        nodeStatus = changeStatus(Status.KILLING, time);
+        nodeStatus = changeStatus(Status.KILLED, time);
         quickFinish = true;
       }
 

File: azkaban-common/src/main/java/azkaban/executor/ExecutorManager.java
Patch:
@@ -1206,7 +1206,7 @@ private void failEverything(final ExecutableFlow exFlow) {
           continue;
           // case UNKNOWN:
         case READY:
-          node.setStatus(Status.KILLED);
+          node.setStatus(Status.KILLING);
           break;
         default:
           node.setStatus(Status.FAILED);

File: azkaban-common/src/main/java/azkaban/executor/Status.java
Patch:
@@ -25,6 +25,7 @@ public enum Status {
   RUNNING(30),
   PAUSED(40),
   SUCCEEDED(50),
+  KILLING(55),
   KILLED(60),
   FAILED(70),
   FAILED_FINISHING(80),

File: azkaban-common/src/main/java/azkaban/utils/WebUtils.java
Patch:
@@ -97,6 +97,8 @@ public String formatStatus(final Status status) {
         return "Paused";
       case SKIPPED:
         return "Skipped";
+      case KILLING:
+        return "Killing";
       default:
     }
     return "Unknown";

File: azkaban-common/src/main/java/azkaban/jobExecutor/JavaProcessJob.java
Patch:
@@ -16,7 +16,7 @@
 
 package azkaban.jobExecutor;
 
-import azkaban.project.DirectoryFlowLoader;
+import azkaban.Constants;
 import azkaban.server.AzkabanServer;
 import azkaban.utils.Pair;
 import azkaban.utils.Props;
@@ -161,9 +161,9 @@ protected Pair<Long, Long> getProcMemoryRequirement() throws Exception {
     final Props azkabanProperties = AzkabanServer.getAzkabanProperties();
     if (azkabanProperties != null) {
       final String maxXms = azkabanProperties
-          .getString(DirectoryFlowLoader.JOB_MAX_XMS, DirectoryFlowLoader.MAX_XMS_DEFAULT);
+          .getString(Constants.JobProperties.JOB_MAX_XMS, Constants.JobProperties.MAX_XMS_DEFAULT);
       final String maxXmx = azkabanProperties
-          .getString(DirectoryFlowLoader.JOB_MAX_XMX, DirectoryFlowLoader.MAX_XMX_DEFAULT);
+          .getString(Constants.JobProperties.JOB_MAX_XMX, Constants.JobProperties.MAX_XMX_DEFAULT);
       final long sizeMaxXms = Utils.parseMemString(maxXms);
       final long sizeMaxXmx = Utils.parseMemString(maxXmx);
 

File: azkaban-common/src/main/java/azkaban/project/FlowBean.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.Map;
 
 /**
- * This is the top level class which is used by the YAML loader to deserialize a flow.yml file.
+ * Top level class used by the YAML loader to deserialize a flow yaml file.
  */
 public class FlowBean implements Serializable {
 

File: azkaban-common/src/main/java/azkaban/project/FlowBeanLoader.java
Patch:
@@ -33,7 +33,7 @@ public class FlowBeanLoader {
 
   public FlowBean load(final File flowFile) throws FileNotFoundException {
     checkArgument(flowFile.exists());
-    checkArgument(flowFile.getName().endsWith(".yml"));
+    checkArgument(flowFile.getName().endsWith(".flow"));
 
     return new Yaml().loadAs(new FileInputStream(flowFile), FlowBean.class);
   }
@@ -81,7 +81,7 @@ private AzkabanNode toAzkabanNode(final NodeBean nodeBean) {
 
   public String getFlowName(final File flowFile) {
     checkArgument(flowFile.exists());
-    checkArgument(flowFile.getName().endsWith(".yml"));
+    checkArgument(flowFile.getName().endsWith(".flow"));
 
     return Files.getNameWithoutExtension(flowFile.getName());
   }

File: azkaban-common/src/test/java/azkaban/executor/ExecutableFlowTest.java
Patch:
@@ -212,7 +212,7 @@ public void setUp() throws Exception {
 
     loader.loadProjectFlow(this.project, ExecutionsTestUtil.getFlowDir("embedded"));
     Assert.assertEquals(0, loader.getErrors().size());
-
+    this.project.setFlows(loader.getFlowMap());
     this.project.setVersion(123);
   }
 

File: azkaban-common/src/test/java/azkaban/project/FlowBeanLoaderTest.java
Patch:
@@ -25,7 +25,7 @@
 public class FlowBeanLoaderTest {
 
   public static final String TEST_FLOW_NAME = "sample_flow";
-  public static final String TEST_FLOW_YML_FILENAME = TEST_FLOW_NAME + ".yml";
+  public static final String TEST_FLOW_YML_FILENAME = TEST_FLOW_NAME + ".flow";
   public static final String SHELL_END = "shell_end";
   public static final String SHELL_ECHO = "shell_echo";
   public static final String SHELL_BASH = "shell_bash";

File: azkaban-common/src/test/java/azkaban/utils/EmailerTest.java
Patch:
@@ -55,6 +55,7 @@ public void setUp() throws Exception {
     final DirectoryFlowLoader loader = new DirectoryFlowLoader(this.props);
     loader.loadProjectFlow(this.project, ExecutionsTestUtil.getFlowDir("embedded"));
     Assert.assertEquals(0, loader.getErrors().size());
+    this.project.setFlows(loader.getFlowMap());
     this.project.setVersion(123);
   }
 

File: azkaban-exec-server/src/test/java/azkaban/execapp/FlowRunnerTestUtil.java
Patch:
@@ -55,7 +55,8 @@ public static Map<String, Flow> prepareProject(final Project project, final File
           project.getName(), sourceDir));
     }
 
-    final Map<String, Flow> flowMap = project.getFlowMap();
+    final Map<String, Flow> flowMap = loader.getFlowMap();
+    project.setFlows(flowMap);
     FileUtils.copyDirectory(sourceDir, workingDir);
 
     return flowMap;

File: azkaban-exec-server/src/main/java/azkaban/execapp/event/JobCallbackManager.java
Patch:
@@ -14,7 +14,6 @@
 import azkaban.execapp.jmx.JmxJobCallbackMBean;
 import azkaban.executor.Status;
 import azkaban.jobcallback.JobCallbackStatusEnum;
-import azkaban.spi.EventType;
 import azkaban.utils.Props;
 import azkaban.utils.PropsUtils;
 import java.net.InetAddress;
@@ -109,9 +108,9 @@ public void handleEvent(final Event event) {
 
     if (event.getRunner() instanceof JobRunner) {
       try {
-        if (event.getType() == EventType.JOB_STARTED) {
+        if (event.getType() == Event.Type.JOB_STARTED) {
           processJobCallOnStart(event);
-        } else if (event.getType() == EventType.JOB_FINISHED) {
+        } else if (event.getType() == Event.Type.JOB_FINISHED) {
           processJobCallOnFinish(event);
         }
       } catch (final Throwable e) {

File: azkaban-exec-server/src/main/java/azkaban/execapp/event/LocalFlowWatcher.java
Patch:
@@ -17,12 +17,12 @@
 package azkaban.execapp.event;
 
 import azkaban.event.Event;
+import azkaban.event.Event.Type;
 import azkaban.event.EventData;
 import azkaban.event.EventListener;
 import azkaban.execapp.FlowRunner;
 import azkaban.execapp.JobRunner;
 import azkaban.executor.ExecutableNode;
-import azkaban.spi.EventType;
 
 public class LocalFlowWatcher extends FlowWatcher {
 
@@ -58,7 +58,7 @@ public class LocalFlowWatcherListener implements EventListener {
 
     @Override
     public void handleEvent(final Event event) {
-      if (event.getType() == EventType.JOB_FINISHED) {
+      if (event.getType() == Type.JOB_FINISHED) {
         if (event.getRunner() instanceof FlowRunner) {
           // The flow runner will finish a job without it running
           final EventData eventData = event.getData();
@@ -72,7 +72,7 @@ public void handleEvent(final Event event) {
           System.out.println(node + " looks like " + node.getStatus());
           handleJobStatusChange(node.getNestedId(), node.getStatus());
         }
-      } else if (event.getType() == EventType.FLOW_FINISHED) {
+      } else if (event.getType() == Type.FLOW_FINISHED) {
         stopWatcher();
       }
     }

File: azkaban-exec-server/src/main/java/azkaban/execapp/metric/NumFailedFlowMetric.java
Patch:
@@ -17,13 +17,13 @@
 package azkaban.execapp.metric;
 
 import azkaban.event.Event;
+import azkaban.event.Event.Type;
 import azkaban.event.EventListener;
 import azkaban.execapp.FlowRunner;
 import azkaban.executor.Status;
 import azkaban.metric.MetricException;
 import azkaban.metric.MetricReportManager;
 import azkaban.metric.TimeBasedReportingMetric;
-import azkaban.spi.EventType;
 
 /**
  * Metric to keep track of number of failed flows in between the tracking events
@@ -47,7 +47,7 @@ public NumFailedFlowMetric(final MetricReportManager manager, final long interva
    */
   @Override
   public synchronized void handleEvent(final Event event) {
-    if (event.getType() == EventType.FLOW_FINISHED) {
+    if (event.getType() == Type.FLOW_FINISHED) {
       final FlowRunner runner = (FlowRunner) event.getRunner();
       if (runner != null && runner.getExecutableFlow().getStatus().equals(Status.FAILED)) {
         this.value = this.value + 1;

File: azkaban-exec-server/src/main/java/azkaban/execapp/metric/NumFailedJobMetric.java
Patch:
@@ -17,12 +17,12 @@
 package azkaban.execapp.metric;
 
 import azkaban.event.Event;
+import azkaban.event.Event.Type;
 import azkaban.event.EventListener;
 import azkaban.executor.Status;
 import azkaban.metric.MetricException;
 import azkaban.metric.MetricReportManager;
 import azkaban.metric.TimeBasedReportingMetric;
-import azkaban.spi.EventType;
 
 /**
  * Metric to keep track of number of failed jobs in between the tracking events
@@ -45,8 +45,7 @@ public NumFailedJobMetric(final MetricReportManager manager, final long interval
    */
   @Override
   public synchronized void handleEvent(final Event event) {
-    if (event.getType() == EventType.JOB_FINISHED && Status.FAILED
-        .equals(event.getData().getStatus())) {
+    if (event.getType() == Type.JOB_FINISHED && Status.FAILED.equals(event.getData().getStatus())) {
       this.value = this.value + 1;
     }
   }

File: azkaban-exec-server/src/main/java/azkaban/execapp/metric/NumRunningJobMetric.java
Patch:
@@ -17,11 +17,11 @@
 package azkaban.execapp.metric;
 
 import azkaban.event.Event;
+import azkaban.event.Event.Type;
 import azkaban.event.EventListener;
 import azkaban.metric.MetricException;
 import azkaban.metric.MetricReportManager;
 import azkaban.metric.TimeBasedReportingMetric;
-import azkaban.spi.EventType;
 
 /**
  * Metric to keep track of number of running jobs in Azkaban exec server
@@ -49,9 +49,9 @@ public NumRunningJobMetric(final MetricReportManager manager, final long interva
    */
   @Override
   public synchronized void handleEvent(final Event event) {
-    if (event.getType() == EventType.JOB_STARTED) {
+    if (event.getType() == Type.JOB_STARTED) {
       this.value = this.value + 1;
-    } else if (event.getType() == EventType.JOB_FINISHED) {
+    } else if (event.getType() == Type.JOB_FINISHED) {
       this.value = this.value - 1;
     }
   }

File: azkaban-common/src/test/java/azkaban/executor/ExecutorManagerTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014 LinkedIn Corp.
+ * Copyright 2017 LinkedIn Corp.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
@@ -388,7 +388,7 @@ private void testSetUpForRunningFlows() throws Exception {
   }
 
   private ExecutableFlow waitFlowFinished(final ExecutableFlow flow) throws Exception {
-    TestUtils.await().untilAsserted(() -> assertThat(getFlowStatus(flow))
+    azkaban.test.TestUtils.await().untilAsserted(() -> assertThat(getFlowStatus(flow))
         .matches(Status::isStatusFinished, "isStatusFinished"));
     return fetchFlow(flow);
   }

File: azkaban-exec-server/src/test/java/azkaban/execapp/JobRunnerTest.java
Patch:
@@ -31,7 +31,6 @@
 import azkaban.jobtype.JobTypePluginSet;
 import azkaban.spi.EventType;
 import azkaban.utils.Props;
-import azkaban.utils.TestUtils;
 import java.io.File;
 import java.io.IOException;
 import java.util.HashSet;
@@ -315,7 +314,7 @@ public void testDelayedExecutionCancelledJob() throws InterruptedException {
     Assert.assertTrue(logFile.exists());
 
     // wait so that there's time to make the "DB update" for KILLED status
-    TestUtils.await().untilAsserted(
+    azkaban.test.TestUtils.await().untilAsserted(
         () -> assertThat(loader.getNodeUpdateCount("testJob")).isEqualTo(2));
     eventCollector.assertEvents(EventType.JOB_FINISHED);
   }

File: azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunnerManager.java
Patch:
@@ -338,6 +338,8 @@ public void submitFlow(final int execId) throws ExecutorManagerException {
       if (runner != null) {
         watcher = new LocalFlowWatcher(runner);
       } else {
+        // also ends up here if execute is called with pipelineExecId that's not running any more
+        // (it could have just finished, for example)
         watcher = new RemoteFlowWatcher(pipelineExecId, this.executorLoader);
       }
     }

File: azkaban-solo-server/src/main/java/azkaban/soloserver/AzkabanSingleServer.java
Patch:
@@ -28,10 +28,10 @@
 import azkaban.webapp.AzkabanWebServer;
 import azkaban.webapp.AzkabanWebServerModule;
 import com.google.inject.Guice;
-import javax.inject.Inject;
 import com.google.inject.Injector;
 import java.io.File;
 import java.io.IOException;
+import javax.inject.Inject;
 import org.apache.commons.io.FileUtils;
 import org.apache.log4j.Logger;
 

File: az-core/src/main/java/azkaban/metrics/MetricsManager.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016 LinkedIn Corp.
+ * Copyright 2017 LinkedIn Corp.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: azkaban-exec-server/src/main/java/azkaban/execapp/event/JobCallbackManager.java
Patch:
@@ -14,6 +14,7 @@
 import azkaban.execapp.jmx.JmxJobCallbackMBean;
 import azkaban.executor.Status;
 import azkaban.jobcallback.JobCallbackStatusEnum;
+import azkaban.spi.EventType;
 import azkaban.utils.Props;
 import azkaban.utils.PropsUtils;
 import java.net.InetAddress;
@@ -108,9 +109,9 @@ public void handleEvent(final Event event) {
 
     if (event.getRunner() instanceof JobRunner) {
       try {
-        if (event.getType() == Event.Type.JOB_STARTED) {
+        if (event.getType() == EventType.JOB_STARTED) {
           processJobCallOnStart(event);
-        } else if (event.getType() == Event.Type.JOB_FINISHED) {
+        } else if (event.getType() == EventType.JOB_FINISHED) {
           processJobCallOnFinish(event);
         }
       } catch (final Throwable e) {

File: azkaban-exec-server/src/main/java/azkaban/execapp/event/LocalFlowWatcher.java
Patch:
@@ -17,12 +17,12 @@
 package azkaban.execapp.event;
 
 import azkaban.event.Event;
-import azkaban.event.Event.Type;
 import azkaban.event.EventData;
 import azkaban.event.EventListener;
 import azkaban.execapp.FlowRunner;
 import azkaban.execapp.JobRunner;
 import azkaban.executor.ExecutableNode;
+import azkaban.spi.EventType;
 
 public class LocalFlowWatcher extends FlowWatcher {
 
@@ -58,7 +58,7 @@ public class LocalFlowWatcherListener implements EventListener {
 
     @Override
     public void handleEvent(final Event event) {
-      if (event.getType() == Type.JOB_FINISHED) {
+      if (event.getType() == EventType.JOB_FINISHED) {
         if (event.getRunner() instanceof FlowRunner) {
           // The flow runner will finish a job without it running
           final EventData eventData = event.getData();
@@ -72,7 +72,7 @@ public void handleEvent(final Event event) {
           System.out.println(node + " looks like " + node.getStatus());
           handleJobStatusChange(node.getNestedId(), node.getStatus());
         }
-      } else if (event.getType() == Type.FLOW_FINISHED) {
+      } else if (event.getType() == EventType.FLOW_FINISHED) {
         stopWatcher();
       }
     }

File: azkaban-exec-server/src/main/java/azkaban/execapp/metric/NumFailedFlowMetric.java
Patch:
@@ -17,13 +17,13 @@
 package azkaban.execapp.metric;
 
 import azkaban.event.Event;
-import azkaban.event.Event.Type;
 import azkaban.event.EventListener;
 import azkaban.execapp.FlowRunner;
 import azkaban.executor.Status;
 import azkaban.metric.MetricException;
 import azkaban.metric.MetricReportManager;
 import azkaban.metric.TimeBasedReportingMetric;
+import azkaban.spi.EventType;
 
 /**
  * Metric to keep track of number of failed flows in between the tracking events
@@ -47,7 +47,7 @@ public NumFailedFlowMetric(final MetricReportManager manager, final long interva
    */
   @Override
   public synchronized void handleEvent(final Event event) {
-    if (event.getType() == Type.FLOW_FINISHED) {
+    if (event.getType() == EventType.FLOW_FINISHED) {
       final FlowRunner runner = (FlowRunner) event.getRunner();
       if (runner != null && runner.getExecutableFlow().getStatus().equals(Status.FAILED)) {
         this.value = this.value + 1;

File: azkaban-exec-server/src/main/java/azkaban/execapp/metric/NumFailedJobMetric.java
Patch:
@@ -17,12 +17,12 @@
 package azkaban.execapp.metric;
 
 import azkaban.event.Event;
-import azkaban.event.Event.Type;
 import azkaban.event.EventListener;
 import azkaban.executor.Status;
 import azkaban.metric.MetricException;
 import azkaban.metric.MetricReportManager;
 import azkaban.metric.TimeBasedReportingMetric;
+import azkaban.spi.EventType;
 
 /**
  * Metric to keep track of number of failed jobs in between the tracking events
@@ -45,7 +45,8 @@ public NumFailedJobMetric(final MetricReportManager manager, final long interval
    */
   @Override
   public synchronized void handleEvent(final Event event) {
-    if (event.getType() == Type.JOB_FINISHED && Status.FAILED.equals(event.getData().getStatus())) {
+    if (event.getType() == EventType.JOB_FINISHED && Status.FAILED
+        .equals(event.getData().getStatus())) {
       this.value = this.value + 1;
     }
   }

File: azkaban-exec-server/src/main/java/azkaban/execapp/metric/NumRunningJobMetric.java
Patch:
@@ -17,11 +17,11 @@
 package azkaban.execapp.metric;
 
 import azkaban.event.Event;
-import azkaban.event.Event.Type;
 import azkaban.event.EventListener;
 import azkaban.metric.MetricException;
 import azkaban.metric.MetricReportManager;
 import azkaban.metric.TimeBasedReportingMetric;
+import azkaban.spi.EventType;
 
 /**
  * Metric to keep track of number of running jobs in Azkaban exec server
@@ -49,9 +49,9 @@ public NumRunningJobMetric(final MetricReportManager manager, final long interva
    */
   @Override
   public synchronized void handleEvent(final Event event) {
-    if (event.getType() == Type.JOB_STARTED) {
+    if (event.getType() == EventType.JOB_STARTED) {
       this.value = this.value + 1;
-    } else if (event.getType() == Type.JOB_FINISHED) {
+    } else if (event.getType() == EventType.JOB_FINISHED) {
       this.value = this.value - 1;
     }
   }

File: azkaban-common/src/test/java/azkaban/executor/InteractiveTestJob.java
Patch:
@@ -32,8 +32,8 @@ public class InteractiveTestJob extends AbstractProcessJob {
       new ConcurrentHashMap<>();
   private static volatile boolean quickSuccess = false;
   private Props generatedProperties = new Props();
-  private boolean isWaiting = true;
-  private boolean succeed = true;
+  private volatile boolean isWaiting = true;
+  private volatile boolean succeed = true;
 
   public InteractiveTestJob(final String jobId, final Props sysProps, final Props jobProps,
       final Logger log) {

File: azkaban-exec-server/src/test/java/azkaban/execapp/FlowRunnerTest2.java
Patch:
@@ -392,6 +392,7 @@ public void testNormalFailure2() throws Exception {
 
     InteractiveTestJob.getTestJob("joba1").failJob();
     assertStatus("joba1", Status.FAILED);
+    assertFlowStatus(Status.FAILED_FINISHING);
 
     // 3. joba completes, everything is killed
     InteractiveTestJob.getTestJob("jobb:innerJobA").succeedJob();

File: azkaban-common/src/test/java/azkaban/executor/InteractiveTestJob.java
Patch:
@@ -109,7 +109,7 @@ public void run() throws Exception {
 
     while (this.isWaiting) {
       synchronized (this) {
-        final int waitMillis = this.jobProps.getInt("seconds", 5) * 1000;
+        final int waitMillis = this.jobProps.getInt("seconds", 10) * 1000;
         if (waitMillis > 0) {
           try {
             wait(waitMillis);

File: azkaban-exec-server/src/main/java/azkaban/execapp/AzkabanExecutorServer.java
Patch:
@@ -48,7 +48,6 @@
 import azkaban.utils.StdOutErrRedirect;
 import azkaban.utils.Utils;
 import com.google.inject.Guice;
-import com.google.inject.Inject;
 import com.google.inject.Injector;
 import java.io.BufferedWriter;
 import java.io.File;
@@ -64,7 +63,9 @@
 import java.util.ArrayList;
 import java.util.List;
 import java.util.TimeZone;
+import javax.inject.Inject;
 import javax.inject.Named;
+import javax.inject.Singleton;
 import javax.management.MBeanInfo;
 import javax.management.MBeanServer;
 import javax.management.ObjectName;
@@ -75,6 +76,7 @@
 import org.mortbay.jetty.Server;
 import org.mortbay.jetty.servlet.Context;
 
+@Singleton
 public class AzkabanExecutorServer {
 
   public static final String JOBTYPE_PLUGIN_DIR = "azkaban.jobtype.plugin.dir";

File: azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunnerManager.java
Patch:
@@ -44,7 +44,6 @@
 import azkaban.utils.Props;
 import azkaban.utils.ThreadPoolExecutingListener;
 import azkaban.utils.TrackingThreadPool;
-import com.google.inject.Inject;
 import java.io.File;
 import java.io.FilenameFilter;
 import java.io.IOException;
@@ -62,6 +61,8 @@
 import java.util.concurrent.LinkedBlockingQueue;
 import java.util.concurrent.RejectedExecutionException;
 import java.util.concurrent.TimeUnit;
+import javax.inject.Inject;
+import javax.inject.Singleton;
 import org.apache.commons.io.FileUtils;
 import org.apache.log4j.Logger;
 
@@ -83,6 +84,7 @@
  * flows that are in the Status.PREPARING status. The entries in this map is removed once the flow
  * execution is completed.
  */
+@Singleton
 public class FlowRunnerManager implements EventListener,
     ThreadPoolExecutingListener {
 

File: azkaban-exec-server/src/main/java/azkaban/execapp/TriggerManager.java
Patch:
@@ -25,18 +25,20 @@
 import azkaban.trigger.builtin.SlaAlertAction;
 import azkaban.trigger.builtin.SlaChecker;
 import azkaban.utils.Utils;
-import com.google.inject.Inject;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.concurrent.Executors;
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.TimeUnit;
+import javax.inject.Inject;
+import javax.inject.Singleton;
 import org.apache.log4j.Logger;
 import org.joda.time.ReadablePeriod;
 
 
+@Singleton
 public class TriggerManager {
 
   private static final int SCHEDULED_THREAD_POOL_SIZE = 4;

File: azkaban-web-server/src/main/java/azkaban/webapp/AzkabanWebServer.java
Patch:
@@ -62,7 +62,6 @@
 import azkaban.webapp.servlet.StatusServlet;
 import azkaban.webapp.servlet.TriggerManagerServlet;
 import com.google.inject.Guice;
-import com.google.inject.Inject;
 import com.google.inject.Injector;
 import com.linkedin.restli.server.RestliServlet;
 import java.io.File;
@@ -80,6 +79,8 @@
 import java.util.List;
 import java.util.Map;
 import java.util.TimeZone;
+import javax.inject.Inject;
+import javax.inject.Singleton;
 import javax.management.MBeanInfo;
 import javax.management.MBeanServer;
 import javax.management.ObjectName;
@@ -112,6 +113,7 @@
  * jetty.keystore - Jetty keystore . jetty.keypassword - Jetty keystore password jetty.truststore -
  * Jetty truststore jetty.trustpassword - Jetty truststore password
  */
+@Singleton
 public class AzkabanWebServer extends AzkabanServer {
 
   public static final String DEFAULT_CONF_PATH = "conf";

File: azkaban-web-server/src/main/java/azkaban/webapp/AzkabanWebServerModule.java
Patch:
@@ -25,7 +25,6 @@
 import com.google.inject.AbstractModule;
 import com.google.inject.Inject;
 import com.google.inject.Provides;
-import com.google.inject.Scopes;
 import com.google.inject.Singleton;
 import java.lang.reflect.Constructor;
 import org.apache.log4j.Logger;
@@ -49,7 +48,6 @@ public class AzkabanWebServerModule extends AbstractModule {
   @Override
   protected void configure() {
     bind(Server.class).toProvider(WebServerProvider.class);
-    bind(AzkabanWebServer.class).in(Scopes.SINGLETON);
     bind(ScheduleLoader.class).to(TriggerBasedScheduleLoader.class);
   }
 

File: azkaban-web-server/src/test/java/azkaban/webapp/AzkabanWebServerTest.java
Patch:
@@ -127,7 +127,6 @@ public void testInjection() throws Exception {
     executor.setActive(true);
     executorLoader.updateExecutor(executor);
 
-    assertNotNull(injector.getInstance(AzkabanWebServer.class));
     assertNotNull(injector.getInstance(ExecutionFlowDao.class));
 
     //Test if triggermanager is singletonly guiced. If not, the below test will fail.
@@ -148,6 +147,7 @@ public void testInjection() throws Exception {
     assertSingleton(ExecutorEventsDao.class, injector);
     assertSingleton(ActiveExecutingFlowsDao.class, injector);
     assertSingleton(FetchActiveFlowDao.class, injector);
+    assertSingleton(AzkabanWebServer.class, injector);
 
     SERVICE_PROVIDER.unsetInjector();
   }

File: azkaban-db/src/main/java/azkaban/db/AzDBUtil.java
Patch:
@@ -18,5 +18,6 @@
 
 public class AzDBUtil {
 
-  static final int MAX_DB_RETRY_COUNT = 5;
+  // A very big Integer
+  static final int MAX_DB_RETRY_COUNT = 999999;
 }

File: azkaban-common/src/main/java/azkaban/executor/ExecutionFlowDao.java
Patch:
@@ -16,7 +16,7 @@
 
 package azkaban.executor;
 
-import azkaban.database.EncodingType;
+import azkaban.db.EncodingType;
 import azkaban.db.DatabaseOperator;
 import azkaban.db.SQLTransaction;
 import azkaban.utils.GZIPUtils;

File: azkaban-common/src/main/java/azkaban/executor/ExecutionLogsDao.java
Patch:
@@ -16,7 +16,7 @@
 
 package azkaban.executor;
 
-import azkaban.database.EncodingType;
+import azkaban.db.EncodingType;
 import azkaban.db.DatabaseOperator;
 import azkaban.db.DatabaseTransOperator;
 import azkaban.db.SQLTransaction;

File: azkaban-common/src/main/java/azkaban/executor/FetchActiveFlowDao.java
Patch:
@@ -16,7 +16,7 @@
 
 package azkaban.executor;
 
-import azkaban.database.EncodingType;
+import azkaban.db.EncodingType;
 import azkaban.db.DatabaseOperator;
 import azkaban.utils.GZIPUtils;
 import azkaban.utils.Pair;

File: azkaban-common/src/main/java/azkaban/project/JdbcProjectHandlerSet.java
Patch:
@@ -15,7 +15,7 @@
  */
 package azkaban.project;
 
-import azkaban.database.EncodingType;
+import azkaban.db.EncodingType;
 import azkaban.flow.Flow;
 import azkaban.user.Permission;
 import azkaban.utils.GZIPUtils;

File: azkaban-common/src/main/java/azkaban/project/JdbcProjectImpl.java
Patch:
@@ -24,7 +24,7 @@
 import static azkaban.project.JdbcProjectHandlerSet.ProjectResultHandler;
 import static azkaban.project.JdbcProjectHandlerSet.ProjectVersionResultHandler;
 
-import azkaban.database.EncodingType;
+import azkaban.db.EncodingType;
 import azkaban.db.DatabaseOperator;
 import azkaban.db.DatabaseTransOperator;
 import azkaban.db.SQLTransaction;

File: azkaban-common/src/main/java/azkaban/trigger/JdbcTriggerImpl.java
Patch:
@@ -16,7 +16,7 @@
 
 package azkaban.trigger;
 
-import azkaban.database.EncodingType;
+import azkaban.db.EncodingType;
 import azkaban.db.DatabaseOperator;
 import azkaban.db.SQLTransaction;
 import azkaban.utils.GZIPUtils;

File: azkaban-common/src/main/java/azkaban/utils/GZIPUtils.java
Patch:
@@ -16,7 +16,7 @@
 
 package azkaban.utils;
 
-import azkaban.database.EncodingType;
+import azkaban.db.EncodingType;
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;

File: azkaban-db/src/main/java/azkaban/db/EncodingType.java
Patch:
@@ -14,7 +14,7 @@
  * the License.
  */
 
-package azkaban.database;
+package azkaban.db;
 
 /**
  * Used for when we store text data. Plain uses UTF8 encoding.

File: azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java
Patch:
@@ -427,7 +427,8 @@ private boolean progressGraph() throws IOException {
         // The job cannot be retried or has run out of retry attempts. We will
         // fail the job and its flow now.
         if (!retryJobIfPossible(node)) {
-          propagateStatus(node.getParentFlow(), Status.FAILED_FINISHING);
+          propagateStatus(node.getParentFlow(),
+              node.getStatus() == Status.KILLED ? Status.KILLED : Status.FAILED_FINISHING);
           if (this.failureAction == FailureAction.CANCEL_ALL) {
             this.kill();
           }

File: azkaban-common/src/main/java/azkaban/project/AzkabanProjectLoader.java
Patch:
@@ -189,6 +189,9 @@ public Map<String, ValidationReport> uploadProject(final Project project,
     this.projectLoader.cleanOlderProjectVersion(project.getId(),
         project.getVersion() - this.projectVersionRetention);
 
+    // Clean up storage
+    this.storageManager.cleanupProjectArtifacts(project.getId());
+
     return reports;
   }
 

File: azkaban-common/src/test/java/azkaban/executor/ExecutableFlowTest.java
Patch:
@@ -20,7 +20,7 @@
 import azkaban.flow.Flow;
 import azkaban.project.DirectoryFlowLoader;
 import azkaban.project.Project;
-import azkaban.test.executions.TestExecutions;
+import azkaban.test.executions.ExecutionsTestUtil;
 import azkaban.utils.JSONUtils;
 import azkaban.utils.Props;
 import java.util.Arrays;
@@ -212,7 +212,7 @@ public void setUp() throws Exception {
     final Logger logger = Logger.getLogger(this.getClass());
     final DirectoryFlowLoader loader = new DirectoryFlowLoader(new Props(), logger);
 
-    loader.loadProjectFlow(this.project, TestExecutions.getFlowDir("embedded"));
+    loader.loadProjectFlow(this.project, ExecutionsTestUtil.getFlowDir("embedded"));
     Assert.assertEquals(0, loader.getErrors().size());
 
     this.project.setFlows(loader.getFlowMap());

File: azkaban-common/src/test/java/azkaban/utils/EmailerTest.java
Patch:
@@ -21,7 +21,7 @@
 import azkaban.metrics.MetricsManager;
 import azkaban.project.DirectoryFlowLoader;
 import azkaban.project.Project;
-import azkaban.test.executions.TestExecutions;
+import azkaban.test.executions.ExecutionsTestUtil;
 import com.codahale.metrics.MetricRegistry;
 import java.util.ArrayList;
 import java.util.List;
@@ -55,7 +55,7 @@ public void setUp() throws Exception {
 
     this.props = createMailProperties();
     final DirectoryFlowLoader loader = new DirectoryFlowLoader(this.props, logger);
-    loader.loadProjectFlow(this.project, TestExecutions.getFlowDir("embedded"));
+    loader.loadProjectFlow(this.project, ExecutionsTestUtil.getFlowDir("embedded"));
     Assert.assertEquals(0, loader.getErrors().size());
     this.project.setFlows(loader.getFlowMap());
     this.project.setVersion(123);

File: azkaban-exec-server/src/test/java/azkaban/execapp/FlowRunnerTest.java
Patch:
@@ -36,6 +36,7 @@
 import azkaban.project.Project;
 import azkaban.project.ProjectLoader;
 import azkaban.test.Utils;
+import azkaban.test.executions.ExecutionsTestUtil;
 import azkaban.utils.JSONUtils;
 import azkaban.utils.Props;
 import java.io.File;
@@ -51,8 +52,7 @@
 
 public class FlowRunnerTest extends FlowRunnerTestBase {
 
-  private static final File TEST_DIR = new File(
-      "../test/src/test/resources/azkaban/test/executions/exectest1");
+  private static final File TEST_DIR = ExecutionsTestUtil.getFlowDir("exectest1");
   private File workingDir;
   private JobTypeManager jobtypeManager;
 

File: azkaban-exec-server/src/test/java/azkaban/execapp/FlowRunnerTest2.java
Patch:
@@ -36,6 +36,7 @@
 import azkaban.project.Project;
 import azkaban.project.ProjectLoader;
 import azkaban.test.Utils;
+import azkaban.test.executions.ExecutionsTestUtil;
 import azkaban.utils.Props;
 import java.io.File;
 import java.io.IOException;
@@ -95,8 +96,6 @@
  */
 public class FlowRunnerTest2 extends FlowRunnerTestBase {
 
-  private static final File TEST_DIR = new File(
-      "../test/src/test/resources/azkaban/test/executions/embedded2");
   private static int id = 101;
   private final Logger logger = Logger.getLogger(FlowRunnerTest2.class);
   private File workingDir;
@@ -126,7 +125,8 @@ public void setUp() throws Exception {
     JmxJobMBeanManager.getInstance().initialize(new Props());
 
     this.flowMap = FlowRunnerTestUtil
-        .prepareProject(this.project, TEST_DIR, this.logger, this.workingDir);
+        .prepareProject(this.project, ExecutionsTestUtil.getFlowDir("embedded2"), this.logger,
+            this.workingDir);
 
     InteractiveTestJob.clearTestJobs();
   }

File: azkaban-web-server/src/main/java/azkaban/webapp/AzkabanWebServer.java
Patch:
@@ -54,6 +54,7 @@
 import azkaban.webapp.servlet.HistoryServlet;
 import azkaban.webapp.servlet.IndexRedirectServlet;
 import azkaban.webapp.servlet.JMXHttpServlet;
+import azkaban.webapp.servlet.NoteServlet;
 import azkaban.webapp.servlet.ProjectManagerServlet;
 import azkaban.webapp.servlet.ProjectServlet;
 import azkaban.webapp.servlet.ScheduleServlet;
@@ -126,7 +127,7 @@ public class AzkabanWebServer extends AzkabanServer {
 
   @Deprecated
   private static AzkabanWebServer app;
-  
+
   private final VelocityEngine velocityEngine;
   private final StatusService statusService;
   private final Server server;
@@ -476,6 +477,7 @@ private void configureRoutes() throws TriggerManagerException {
     root.addServlet(new ServletHolder(new TriggerManagerServlet()), "/triggers");
     root.addServlet(new ServletHolder(new StatsServlet()), "/stats");
     root.addServlet(new ServletHolder(new StatusServlet(this.statusService)), "/status");
+    root.addServlet(new ServletHolder(new NoteServlet()), "/notes");
 
     final ServletHolder restliHolder = new ServletHolder(new RestliServlet());
     restliHolder.setInitParameter("resourcePackages", "azkaban.restli");

File: azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java
Patch:
@@ -1119,6 +1119,7 @@ public synchronized void handleEvent(final Event event) {
           }
 
           FlowRunner.this.finishedNodes.add(node);
+          activeJobRunners.remove(runner);
           node.getParentFlow().setUpdateTime(System.currentTimeMillis());
           interrupt();
           fireEventListeners(event);

File: azkaban-common/src/main/java/azkaban/storage/LocalStorage.java
Patch:
@@ -30,7 +30,7 @@
 import java.io.FileInputStream;
 import java.io.IOException;
 import java.io.InputStream;
-import java.nio.charset.StandardCharsets;
+import org.apache.commons.codec.binary.Hex;
 import org.apache.commons.io.FileUtils;
 import org.apache.log4j.Logger;
 
@@ -82,7 +82,7 @@ public String put(final StorageMetadata metadata, final File localFile) {
 
     final File targetFile = new File(projectDir, String.format("%s-%s.zip",
         String.valueOf(metadata.getProjectId()),
-        new String(metadata.getHash(), StandardCharsets.UTF_8)));
+        new String(Hex.encodeHex(metadata.getHash()))));
 
     if (targetFile.exists()) {
       log.info(String.format("Duplicate found: meta: %s, targetFile: %s, ", metadata,

File: azkaban-common/src/test/java/azkaban/storage/LocalStorageTest.java
Patch:
@@ -27,7 +27,7 @@
 import azkaban.utils.Md5Hasher;
 import java.io.File;
 import java.io.InputStream;
-import java.nio.charset.StandardCharsets;
+import org.apache.commons.codec.binary.Hex;
 import org.apache.commons.io.FileUtils;
 import org.apache.log4j.Logger;
 import org.junit.After;
@@ -73,7 +73,7 @@ public void testPutGet() throws Exception {
         .append(File.separator)
         .append(metadata.getProjectId())
         .append("-")
-        .append(new String(metadata.getHash(), StandardCharsets.UTF_8))
+        .append(new String(Hex.encodeHex(metadata.getHash())))
         .append(".zip")
         .toString()
     );

File: azkaban-common/src/main/java/azkaban/Constants.java
Patch:
@@ -54,6 +54,7 @@ public class Constants {
 
   public static class ConfigurationKeys {
     // These properties are configurable through azkaban.properties
+    public static final String AZKABAN_PID_FILENAME = "azkaban.pid.filename";
 
     // Defines a list of external links, each referred to as a topic
     public static final String AZKABAN_SERVER_EXTERNAL_TOPICS = "azkaban.server.external.topics";

File: azkaban-web-server/src/main/java/azkaban/webapp/Status.java
Patch:
@@ -29,18 +29,21 @@
 public class Status {
 
   private final String version;
+  private final String pid;
   private final String installationPath;
   private final long usedMemory, xmx;
   private final boolean isDatabaseUp;
   private final Map<Integer, Executor> executorStatusMap;
 
   Status(final String version,
+      final String pid,
       final String installationPath,
       final long usedMemory,
       final long xmx,
       final boolean isDatabaseUp,
       final Map<Integer, Executor> executorStatusMap) {
     this.version = version;
+    this.pid = pid;
     this.installationPath = installationPath;
     this.usedMemory = usedMemory;
     this.xmx = xmx;

File: azkaban-common/src/main/java/azkaban/jobExecutor/ProcessJob.java
Patch:
@@ -386,7 +386,7 @@ private boolean canWriteInCurrentWorkingDirectory(final String effectiveUser)
    *
    * @param effectiveUser user/proxy user running the job
    */
-  private void assignUserDirOwnership(final String effectiveUser) throws IOException {
+  private void assignUserDirOwnership(final String effectiveUser) throws Exception {
     final ExecuteAsUser executeAsUser = new ExecuteAsUser(
         this.sysProps.getString(AZKABAN_SERVER_NATIVE_LIB_FOLDER));
     final String groupName = this.sysProps.getString(AZKABAN_SERVER_GROUP_NAME, "azkaban");
@@ -395,8 +395,8 @@ private void assignUserDirOwnership(final String effectiveUser) throws IOExcepti
     info("Change current working directory ownership to " + effectiveUser + ":" + groupName + ".");
     final int result = executeAsUser.execute("root", changeOwnershipCommand);
     if (result != 0) {
-      error("Failed to change current working directory ownership. Error code: " + Integer
-          .toString(result));
+      handleError("Failed to change current working directory ownership. Error code: " + Integer
+          .toString(result), null);
     }
   }
 

File: azkaban-common/src/main/java/azkaban/utils/ExecuteAsUser.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations under
  * the License.
  */
-package azkaban.security;
+package azkaban.utils;
 
 import java.io.File;
 import java.io.IOException;

File: azkaban-common/src/main/java/azkaban/server/session/SessionCache.java
Patch:
@@ -28,12 +28,12 @@
  * The following global azkaban properties can be used: max.num.sessions - used
  * to determine the number of live sessions that azkaban will handle. Default is
  * 10000 session.time.to.live -Number of seconds before session expires. Default
- * set to 1 days.
+ * set to 10 hours.
  */
 public class SessionCache {
 
   private static final int MAX_NUM_SESSIONS = 10000;
-  private static final long SESSION_TIME_TO_LIVE = 24 * 60 * 60 * 1000L;
+  private static final long SESSION_TIME_TO_LIVE = 10 * 60 * 60 * 1000L;
 
   // private CacheManager manager = CacheManager.create();
   private final Cache<String, Session> cache;

File: azkaban-web-server/src/restli/java/azkaban/restli/ProjectManagerResource.java
Patch:
@@ -59,7 +59,7 @@ public String deploy(@ActionParam("sessionId") final String sessionId,
     logger.info("Deploy called. {projectName: " + projectName + ", packageUrl:" + packageUrl + "}");
 
     final String ip = ResourceUtils.getRealClientIpAddr(this.getContext());
-    final User user = ResourceUtils.getUserFromSessionId(sessionId, ip);
+    final User user = ResourceUtils.getUserFromSessionId(sessionId);
     final ProjectManager projectManager = getAzkaban().getProjectManager();
     final Project project = projectManager.getProject(projectName);
     if (project == null) {

File: azkaban-web-server/src/restli/java/azkaban/restli/ResourceUtils.java
Patch:
@@ -47,14 +47,12 @@ public static boolean hasPermission(final Project project, final User user,
     return false;
   }
 
-  public static User getUserFromSessionId(final String sessionId, final String ip)
+  public static User getUserFromSessionId(final String sessionId)
       throws UserManagerException {
     final Session session =
         AzkabanWebServer.getInstance().getSessionCache().getSession(sessionId);
     if (session == null) {
       throw new UserManagerException("Invalid session. Login required");
-    } else if (!session.getIp().equals(ip)) {
-      throw new UserManagerException("Invalid session. Session expired.");
     }
 
     return session.getUser();

File: azkaban-common/src/main/java/azkaban/user/XmlUserManager.java
Patch:
@@ -60,7 +60,6 @@ public class XmlUserManager implements UserManager {
   private static final Logger logger = Logger.getLogger(XmlUserManager.class
       .getName());
   private final String xmlPath;
-  private final String passwordErrorMessage;
 
   private HashMap<String, User> users;
   private HashMap<String, String> userPassword;
@@ -73,7 +72,7 @@ public class XmlUserManager implements UserManager {
    */
   public XmlUserManager(final Props props) {
     this.xmlPath = props.getString(XML_FILE_PARAM);
-    this.passwordErrorMessage = props.getString("azkaban.error.password.message", "Username/password not found.");
+
     parseXMLFile();
   }
 
@@ -261,7 +260,7 @@ public User getUser(final String username, final String password)
     }
 
     if (foundPassword == null || !foundPassword.equals(password)) {
-      throw new UserManagerException(this.passwordErrorMessage);
+      throw new UserManagerException("Username/Password not found.");
     }
     // Once it gets to this point, no exception has been thrown. User
     // shoudn't be

File: azkaban-common/src/main/java/azkaban/executor/ExecutorManager.java
Patch:
@@ -1483,7 +1483,7 @@ private void failEverything(ExecutableFlow exFlow) {
         continue;
         // case UNKNOWN:
       case READY:
-        node.setStatus(Status.KILLING);
+        node.setStatus(Status.KILLED);
         break;
       default:
         node.setStatus(Status.FAILED);

File: azkaban-common/src/main/java/azkaban/executor/Status.java
Patch:
@@ -25,7 +25,6 @@ public enum Status {
   RUNNING(30),
   PAUSED(40),
   SUCCEEDED(50),
-  KILLING(55),
   KILLED(60),
   FAILED(70),
   FAILED_FINISHING(80),

File: azkaban-common/src/main/java/azkaban/utils/WebUtils.java
Patch:
@@ -97,8 +97,6 @@ public String formatStatus(final Status status) {
         return "Paused";
       case SKIPPED:
         return "Skipped";
-      case KILLING:
-        return "Killing";
       default:
     }
     return "Unknown";

File: azkaban-common/src/main/java/azkaban/executor/Status.java
Patch:
@@ -33,9 +33,8 @@ public enum Status {
   DISABLED(100),
   QUEUED(110),
   FAILED_SUCCEEDED(120),
-  CANCELLED(130);
-  // status is TINYINT and in H2 DB the possible values are: -128 to 127
-  // so trying to store CANCELLED in H2 fails at the moment
+  CANCELLED(125);
+  // status is TINYINT in DB and the value ranges from -128 to 127
 
   private static final ImmutableMap<Integer, Status> numValMap = Arrays.stream(Status.values())
       .collect(ImmutableMap.toImmutableMap(status -> status.getNumVal(), status -> status));

File: azkaban-common/src/main/java/azkaban/jobExecutor/ProcessJob.java
Patch:
@@ -256,7 +256,6 @@ public void run() throws Exception {
 
       boolean success = false;
       this.process = builder.build();
-
       try {
         if (!this.killed) {
           this.process.run();

File: azkaban-common/src/main/java/azkaban/sla/SlaOption.java
Patch:
@@ -46,8 +46,10 @@ public class SlaOption {
   public static final String ALERT_TYPE = "SlaAlertType";
   public static final String ACTION_CANCEL_FLOW = "SlaCancelFlow";
   public static final String ACTION_ALERT = "SlaAlert";
+  public static final String ACTION_KILL_JOB = "SlaKillJob";
   private static final DateTimeFormatter fmt = DateTimeFormat
       .forPattern("MM/dd, YYYY HH:mm");
+  
   private String type;
   private Map<String, Object> info;
   private List<String> actions;

File: azkaban-exec-server/src/main/java/azkaban/execapp/AzkabanExecServerModule.java
Patch:
@@ -36,6 +36,5 @@ protected void configure() {
     bind(AzkabanExecutorServer.class).in(Scopes.SINGLETON);
     bind(TriggerManager.class).in(Scopes.SINGLETON);
     bind(FlowRunnerManager.class).in(Scopes.SINGLETON);
-
   }
 }

File: azkaban-exec-server/src/main/java/azkaban/execapp/Trigger.java
Patch:
@@ -56,7 +56,6 @@ public void run() {
     }
 
     final boolean isTriggerConditionMet = this.triggerCondition.isMet();
-
     if (isTriggerConditionMet) {
       logger.info("Condition " + this.triggerCondition.getExpression() + " met");
       for (final TriggerAction action : this.actions) {

File: azkaban-web-server/src/main/java/azkaban/webapp/servlet/ScheduleServlet.java
Patch:
@@ -240,7 +240,8 @@ private SlaOption parseSlaSetting(final String set) throws ScheduleManagerExcept
         slaInfo.put(SlaOption.ALERT_TYPE, "email");
       }
       if (killAction.equals("true")) {
-        slaActions.add(SlaOption.ACTION_CANCEL_FLOW);
+        String killActionType = id.equals("") ? SlaOption.ACTION_CANCEL_FLOW : SlaOption.ACTION_KILL_JOB;
+        slaActions.add(killActionType);
       }
       if (id.equals("")) {
         if (rule.equals("SUCCESS")) {

File: azkaban-common/src/main/java/azkaban/trigger/TriggerManager.java
Patch:
@@ -26,6 +26,7 @@
 import azkaban.executor.ExecutorManager;
 import azkaban.utils.Props;
 import com.google.inject.Inject;
+import com.google.inject.Singleton;
 import java.util.ArrayList;
 import java.util.Comparator;
 import java.util.HashMap;
@@ -38,6 +39,7 @@
 import java.util.concurrent.PriorityBlockingQueue;
 import org.apache.log4j.Logger;
 
+@Singleton
 public class TriggerManager extends EventHandler implements
     TriggerManagerAdapter {
   public static final long DEFAULT_SCANNER_INTERVAL_MS = 60000;

File: azkaban-common/src/main/java/azkaban/user/XmlUserManager.java
Patch:
@@ -60,6 +60,7 @@ public class XmlUserManager implements UserManager {
   private static final Logger logger = Logger.getLogger(XmlUserManager.class
       .getName());
   private final String xmlPath;
+  private final String passwordErrorMessage;
 
   private HashMap<String, User> users;
   private HashMap<String, String> userPassword;
@@ -72,7 +73,7 @@ public class XmlUserManager implements UserManager {
    */
   public XmlUserManager(final Props props) {
     this.xmlPath = props.getString(XML_FILE_PARAM);
-
+    this.passwordErrorMessage = props.getString("azkaban.error.password.message", "Username/password not found.");
     parseXMLFile();
   }
 
@@ -260,7 +261,7 @@ public User getUser(final String username, final String password)
     }
 
     if (foundPassword == null || !foundPassword.equals(password)) {
-      throw new UserManagerException("Username/Password not found.");
+      throw new UserManagerException(this.passwordErrorMessage);
     }
     // Once it gets to this point, no exception has been thrown. User
     // shoudn't be

File: azkaban-web-server/src/main/java/azkaban/webapp/servlet/AbstractAzkabanServlet.java
Patch:
@@ -58,6 +58,8 @@ public abstract class AbstractAzkabanServlet extends HttpServlet {
   private static final String AZKABAN_FAILURE_MESSAGE =
       "azkaban.failure.message";
   private static final long serialVersionUID = -1;
+
+  protected String passwordPlaceholder;
   private AzkabanServer application;
   private String name;
   private String label;
@@ -103,6 +105,7 @@ public void init(final ServletConfig config) throws ServletException {
     this.name = props.getString("azkaban.name", "");
     this.label = props.getString("azkaban.label", "");
     this.color = props.getString("azkaban.color", "#FF0000");
+    this.passwordPlaceholder = props.getString("azkaban.password.placeholder", "Password");
 
     if (this.application instanceof AzkabanWebServer) {
       final AzkabanWebServer server = (AzkabanWebServer) this.application;

File: azkaban-web-server/src/main/java/azkaban/webapp/servlet/LoginAbstractAzkabanServlet.java
Patch:
@@ -264,6 +264,7 @@ private void handleLogin(final HttpServletRequest req, final HttpServletResponse
   private void handleLogin(final HttpServletRequest req, final HttpServletResponse resp,
       final String errorMsg) throws ServletException, IOException {
     final Page page = newPage(req, resp, "azkaban/webapp/servlet/velocity/login.vm");
+    page.add("passwordPlaceholder", this.passwordPlaceholder);
     if (errorMsg != null) {
       page.add("errorMsg", errorMsg);
     }

File: azkaban-exec-server/src/main/java/azkaban/execapp/JobRunner.java
Patch:
@@ -55,7 +55,6 @@
 import org.apache.log4j.Layout;
 import org.apache.log4j.Logger;
 import org.apache.log4j.RollingFileAppender;
-import org.json.simple.JSONObject;
 
 public class JobRunner extends EventHandler implements Runnable {
 
@@ -345,9 +344,9 @@ private KafkaLog4jAppender createKafkaAppender() throws UndefinedPropertyExcepti
         this.azkabanProps
             .getString(Constants.ConfigurationKeys.AZKABAN_SERVER_LOGGING_KAFKA_TOPIC));
 
-    final JSONObject layout = LogUtil.createLogPatternLayoutJsonObject(this.props, this.jobId);
+    final String layoutString = LogUtil.createLogPatternLayoutJsonString(this.props, this.jobId);
 
-    kafkaProducer.setLayout(new PatternLayoutEscaped(layout.toString()));
+    kafkaProducer.setLayout(new PatternLayoutEscaped(layoutString));
     kafkaProducer.activateOptions();
 
     this.flowLogger.info("Created kafka appender for " + this.jobId);

File: azkaban-exec-server/src/main/java/azkaban/execapp/LogUtil.java
Patch:
@@ -22,7 +22,7 @@
 
 class LogUtil {
 
-  static JSONObject createLogPatternLayoutJsonObject(Props props, String jobId) {
+  static String createLogPatternLayoutJsonString(Props props, String jobId) {
     final JSONObject layout = new JSONObject();
     layout.put("category", "%c{1}");
     layout.put("level", "%p");
@@ -37,6 +37,6 @@ static JSONObject createLogPatternLayoutJsonObject(Props props, String jobId) {
     layout.put("projectversion",
         props.getString(Constants.FlowProperties.AZKABAN_FLOW_PROJECT_VERSION));
     layout.put("logsource", "userJob");
-    return layout;
+    return layout.toString();
   }
 }

File: azkaban-common/src/test/java/azkaban/jobExecutor/ProcessJobTest.java
Patch:
@@ -204,7 +204,7 @@ public void testCancelDuringPreparation() throws InterruptedException, Execution
     assertThat(sleepBeforeRunJob.getProgress()).isEqualTo(0.0);
   }
 
-  class SleepBeforeRunJob extends ProcessJob implements Runnable {
+  static class SleepBeforeRunJob extends ProcessJob implements Runnable {
 
     public SleepBeforeRunJob(final String jobId, final Props sysProps, final Props jobProps,
         final Logger log) {

File: azkaban-common/src/main/java/azkaban/Constants.java
Patch:
@@ -84,6 +84,9 @@ public static class ConfigurationKeys {
     // Hostname for the host, if not specified, canonical hostname will be used
     public static final String AZKABAN_SERVER_HOST_NAME = "azkaban.server.hostname";
 
+    // List of users we prevent azkaban from running flows as. (ie: root, azkaban)
+    public static final String BLACK_LISTED_USERS = "azkaban.server.blacklist.users";
+
     // Legacy configs section, new configs should follow the naming convention of azkaban.server.<rest of the name> for server configs.
 
     // The property is used for the web server to get the host name of the executor when running in SOLO mode.

File: azkaban-common/src/main/java/azkaban/trigger/Trigger.java
Patch:
@@ -150,7 +150,7 @@ public static Trigger fromJson(final Object obj) throws Exception {
         action.setContext(context);
       }
 
-      trigger = new Trigger.TriggerBuilder("azkaban",
+      trigger = new Trigger.TriggerBuilder(submitUser,
           source,
           triggerCond,
           expireCond,

File: azkaban-hadoop-security-plugin/src/main/java/azkaban/security/HadoopSecurityManager_H_2_0.java
Patch:
@@ -123,7 +123,7 @@ public class HadoopSecurityManager_H_2_0 extends HadoopSecurityManager {
       "obtain.jobhistoryserver.token";
   private final static Logger logger = Logger
       .getLogger(HadoopSecurityManager_H_2_0.class);
-  private static HadoopSecurityManager hsmInstance = null;
+  private static volatile HadoopSecurityManager hsmInstance = null;
   private static URLClassLoader ucl;
   private final RecordFactory recordFactory = RecordFactoryProvider.getRecordFactory(null);
   private final ExecuteAsUser executeAsUser;

File: azkaban-common/src/main/java/azkaban/ServiceProvider.java
Patch:
@@ -30,6 +30,7 @@
  * scope so that Guice can automatically resolve dependencies and provide the required services
  * directly.
  */
+@SuppressWarnings("ImmutableEnumChecker")
 public enum ServiceProvider {
   SERVICE_PROVIDER;
 

File: azkaban-common/src/test/java/azkaban/trigger/TriggerManagerTest.java
Patch:
@@ -33,8 +33,11 @@
 import org.junit.After;
 import org.junit.Before;
 import org.junit.BeforeClass;
+import org.junit.Ignore;
 import org.junit.Test;
 
+@Ignore
+// todo HappyRay: fix these slow tests or delete them.
 public class TriggerManagerTest {
 
   private static TriggerLoader triggerLoader;

File: azkaban-exec-server/src/test/java/azkaban/execapp/FlowRunnerTestBase.java
Patch:
@@ -38,7 +38,7 @@ public void assertThreadRunning() {
   }
 
   public void waitFlowRunner(final Function<FlowRunner, Boolean> statusCheck) {
-    for (int i = 0; i < 100; i++) {
+    for (int i = 0; i < 1000; i++) {
       if (statusCheck.apply(this.runner)) {
         return;
       }
@@ -54,7 +54,7 @@ public void waitFlowRunner(final Function<FlowRunner, Boolean> statusCheck) {
 
   public void waitJobStatuses(final Function<Status, Boolean> statusCheck,
       final String... jobs) {
-    for (int i = 0; i < 100; i++) {
+    for (int i = 0; i < 1000; i++) {
       if (checkJobStatuses(statusCheck, jobs)) {
         return;
       }
@@ -74,7 +74,7 @@ public void waitJobsStarted(final FlowRunner runner, final String... jobs) {
 
   protected void waitEventFired(final String nestedId, final Status status)
       throws InterruptedException {
-    for (int i = 0; i < 100; i++) {
+    for (int i = 0; i < 1000; i++) {
       for (final Event event : this.eventCollector.getEventList()) {
         if (event.getData().getStatus() == status && event.getData().getNestedId()
             .equals(nestedId)) {

File: azkaban-common/src/main/java/azkaban/metric/MetricReportManager.java
Patch:
@@ -97,6 +97,7 @@ public static MetricReportManager getInstance() {
    * each element of metrics List is responsible to call this method and report metrics
    * @param metric
    */
+  @SuppressWarnings("FutureReturnValueIgnored")
   public void reportMetric(final IMetric<?> metric) {
     if (metric != null && isAvailable()) {
       try {

File: azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java
Patch:
@@ -706,6 +706,7 @@ private Props loadJobProps(final ExecutableNode node) throws IOException {
     return props;
   }
 
+  @SuppressWarnings("FutureReturnValueIgnored")
   private void runExecutableNode(final ExecutableNode node) throws IOException {
     // Collect output props from the job's dependencies.
     prepareJobProperties(node);

File: azkaban-exec-server/src/main/java/azkaban/execapp/TriggerManager.java
Patch:
@@ -78,6 +78,7 @@ private List<TriggerAction> createActions(final SlaOption sla, final int execId)
     return actions;
   }
 
+  @SuppressWarnings("FutureReturnValueIgnored")
   public void addTrigger(final int execId, final List<SlaOption> slaOptions) {
     for (final SlaOption sla : slaOptions) {
       final Condition triggerCond = createCondition(sla, execId, "slaFailChecker", "isSlaFailed()");

File: azkaban-exec-server/src/main/java/azkaban/execapp/Trigger.java
Patch:
@@ -79,6 +79,7 @@ public boolean isTriggerExpired() {
     return this.expireCondition.isMet();
   }
 
+  @Override
   public String toString() {
     final StringBuilder actionsString = new StringBuilder();
     for (final TriggerAction act : this.actions) {

File: azkaban-common/src/test/java/azkaban/executor/JdbcExecutorLoaderTest.java
Patch:
@@ -55,7 +55,7 @@ public class JdbcExecutorLoaderTest {
   private static boolean testDBExists;
   /* Directory with serialized description of test flows */
   private static final String UNIT_BASE_DIR =
-    "../azkaban-test/src/test/resources/azkaban/test/executions";
+    "../test/src/test/resources/azkaban/test/executions";
   // @TODO remove this and turn into local host.
   private static final String host = "localhost";
   private static final int port = 3306;

File: azkaban-common/src/test/java/azkaban/utils/TestUtils.java
Patch:
@@ -33,7 +33,7 @@ public class TestUtils {
 
   /* Base  resource direcotyr for unit tests */
   private static final String UNIT_RESOURCE_DIR =
-      "../azkaban-test/src/test/resources/azkaban/test";
+      "../test/src/test/resources/azkaban/test";
   /* Directory with serialized description of test flows */
   private static final String UNIT_EXECUTION_DIR =
       UNIT_RESOURCE_DIR + "/executions";

File: azkaban-exec-server/src/test/java/azkaban/execapp/FlowRunnerTest.java
Patch:
@@ -53,7 +53,7 @@
 public class FlowRunnerTest extends FlowRunnerTestBase {
 
   private static final File TEST_DIR = new File(
-      "../azkaban-test/src/test/resources/azkaban/test/executions/exectest1");
+      "../test/src/test/resources/azkaban/test/executions/exectest1");
   private File workingDir;
   private JobTypeManager jobtypeManager;
   private ProjectLoader fakeProjectLoader;

File: azkaban-exec-server/src/test/java/azkaban/execapp/FlowRunnerTest2.java
Patch:
@@ -96,7 +96,7 @@
 public class FlowRunnerTest2 extends FlowRunnerTestBase {
 
   private static final File TEST_DIR = new File(
-      "../azkaban-test/src/test/resources/azkaban/test/executions/embedded2");
+      "../test/src/test/resources/azkaban/test/executions/embedded2");
   private static int id = 101;
   private final Logger logger = Logger.getLogger(FlowRunnerTest2.class);
   private File workingDir;

File: azkaban-common/src/main/java/azkaban/trigger/builtin/BasicTimeChecker.java
Patch:
@@ -22,6 +22,7 @@
 import java.util.HashMap;
 import java.util.Map;
 import org.joda.time.DateTime;
+import org.joda.time.DateTimeUtils;
 import org.joda.time.DateTimeZone;
 import org.joda.time.ReadablePeriod;
 import org.quartz.CronExpression;
@@ -131,7 +132,7 @@ public String getCronExpression() {
 
   @Override
   public Boolean eval() {
-    return this.nextCheckTime < System.currentTimeMillis();
+    return this.nextCheckTime < DateTimeUtils.currentTimeMillis();
   }
 
   @Override

File: azkaban-common/src/main/java/azkaban/utils/SystemMemoryInfo.java
Patch:
@@ -30,7 +30,7 @@ public SystemMemoryInfo(final OsMemoryUtil util) {
    * @return true if the system can satisfy the memory request
    *
    * Given Xmx value (in kb) used by java process, determine if system can satisfy the memory
-   * request
+   * request.
    */
   public boolean canSystemGrantMemory(final long xmx) {
     final long freeMemSize = this.util.getOsTotalFreeMemorySize();
@@ -41,7 +41,8 @@ public boolean canSystemGrantMemory(final long xmx) {
     }
     if (freeMemSize - xmx < LOW_MEM_THRESHOLD) {
       logger.info(String.format(
-          "Free memory amount minus Xmx (%d - %d kb) is less than low mem threshold (%d kb),  memory request declined.",
+          "Free memory amount minus Xmx (%d - %d kb) is less than low mem threshold (%d kb), "
+              + "memory request declined.",
           freeMemSize, xmx, LOW_MEM_THRESHOLD));
       return false;
     }

File: azkaban-common/src/main/java/azkaban/utils/OsMemoryUtil.java
Patch:
@@ -40,7 +40,8 @@ long getOsTotalFreeMemorySize() {
 
     final List<String> lines;
     // The file /proc/meminfo is assumed to contain only ASCII characters.
-    // The assumption is that the file is not too big. So it is simpler to read the whole file into memory.
+    // The assumption is that the file is not too big. So it is simpler to read the whole file
+    // into memory.
     try {
       lines = Files.readAllLines(Paths.get(MEM_INFO_FILE), StandardCharsets.UTF_8);
     } catch (final IOException e) {

File: azkaban-web-server/src/main/java/azkaban/webapp/servlet/HistoryServlet.java
Patch:
@@ -105,12 +105,12 @@ private void handleHistoryPage(final HttpServletRequest req,
       final String begin = getParam(req, "begin");
 
       final long beginTime =
-          begin == "" ? -1 : DateTimeFormat.forPattern(FILTER_BY_DATE_PATTERN)
+          "".equals(begin) ? -1 : DateTimeFormat.forPattern(FILTER_BY_DATE_PATTERN)
               .parseDateTime(begin).getMillis();
       final String end = getParam(req, "end");
 
       final long endTime =
-          end == "" ? -1 : DateTimeFormat.forPattern(FILTER_BY_DATE_PATTERN)
+          "".equals(end) ? -1 : DateTimeFormat.forPattern(FILTER_BY_DATE_PATTERN)
               .parseDateTime(end).getMillis();
       try {
         history =

File: azkaban-web-server/src/restli/java/azkaban/restli/ProjectManagerResource.java
Patch:
@@ -56,8 +56,7 @@ public String deploy(@ActionParam("sessionId") final String sessionId,
       @ActionParam("packageUrl") final String packageUrl)
       throws ProjectManagerException, RestLiServiceException, UserManagerException,
       ServletException, IOException {
-    logger.info("Deploy called. {sessionId: " + sessionId + ", projectName: "
-        + projectName + ", packageUrl:" + packageUrl + "}");
+    logger.info("Deploy called. {projectName: " + projectName + ", packageUrl:" + packageUrl + "}");
 
     final String ip = ResourceUtils.getRealClientIpAddr(this.getContext());
     final User user = ResourceUtils.getUserFromSessionId(sessionId, ip);

File: azkaban-web-server/src/restli/java/azkaban/restli/UserManagerResource.java
Patch:
@@ -49,8 +49,7 @@ public String login(@ActionParam("username") final String username,
 
     final Session session = createSession(username, password, ip);
 
-    logger.info("Session id " + session.getSessionId() + " created for user '"
-        + username + "' and ip " + ip);
+    logger.info("Session id created for user '" + username + "' and ip " + ip);
     return session.getSessionId();
   }
 

File: azkaban-common/src/main/java/azkaban/executor/ExecutionReference.java
Patch:
@@ -20,6 +20,7 @@ public class ExecutionReference {
 
   private final int execId;
   private Executor executor;
+  //Todo jamiesjc: deprecate updateTime in ExecutionReference class gradually.
   private long updateTime;
   private long nextCheckTime = -1;
   private int numErrors = 0;

File: azkaban-common/src/main/java/azkaban/trigger/JdbcTriggerImpl.java
Patch:
@@ -188,7 +188,7 @@ public Trigger loadTrigger(final int triggerId) throws TriggerLoaderException {
     }
   }
 
-  public class TriggerResultHandler implements ResultSetHandler<List<Trigger>> {
+  public static class TriggerResultHandler implements ResultSetHandler<List<Trigger>> {
 
     @Override
     public List<Trigger> handle(final ResultSet rs) throws SQLException {

File: azkaban-common/src/main/java/azkaban/executor/ExecutableFlowPriorityComparator.java
Patch:
@@ -62,7 +62,7 @@ public int compare(final Pair<ExecutionReference, ExecutableFlow> pair1,
       int diff = getPriority(exflow2) - getPriority(exflow1);
       if (diff == 0) {
         // ascending order of update time, if same priority
-        diff = (int) (exflow1.getUpdateTime() - exflow2.getUpdateTime());
+        diff = Long.compare(exflow1.getUpdateTime(), exflow2.getUpdateTime());
       }
       if (diff == 0) {
         // ascending order of execution id, if same priority and updateTime

File: azkaban-common/src/main/java/azkaban/utils/OsMemoryUtil.java
Patch:
@@ -6,7 +6,6 @@
 import java.nio.file.Files;
 import java.nio.file.Paths;
 import java.util.List;
-import java.util.Set;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -24,7 +23,7 @@ class OsMemoryUtil {
   // This file is used by Linux. It doesn't exist on Mac for example.
   private static final String MEM_INFO_FILE = "/proc/meminfo";
 
-  private static final Set<String> MEM_KEYS = ImmutableSet
+  private static final ImmutableSet<String> MEM_KEYS = ImmutableSet
       .of("MemFree", "Buffers", "Cached", "SwapFree");
 
   /**

File: azkaban-exec-server/src/main/java/azkaban/execapp/ServerStatisticsServlet.java
Patch:
@@ -22,6 +22,7 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
+import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import javax.servlet.ServletException;
 import javax.servlet.http.HttpServlet;
@@ -85,7 +86,7 @@ protected void fillRemainingMemoryPercent(final ExecutorInfo stats) {
         final InputStream inputStream = process.getInputStream();
         try {
           final java.io.BufferedReader reader = new java.io.BufferedReader(
-              new InputStreamReader(inputStream));
+              new InputStreamReader(inputStream, StandardCharsets.UTF_8));
           String line = null;
           while ((line = reader.readLine()) != null) {
             output.add(line);
@@ -242,7 +243,7 @@ protected void fillCpuUsage(final ExecutorInfo stats) {
         final InputStream inputStream = process.getInputStream();
         try {
           final java.io.BufferedReader reader = new java.io.BufferedReader(
-              new InputStreamReader(inputStream));
+              new InputStreamReader(inputStream, StandardCharsets.UTF_8));
           String line = null;
           while ((line = reader.readLine()) != null) {
             output.add(line);

File: azkaban-exec-server/src/main/java/azkaban/execapp/event/JobCallbackRequestMaker.java
Patch:
@@ -11,6 +11,7 @@
 import java.io.IOException;
 import java.io.InputStreamReader;
 import java.net.SocketTimeoutException;
+import java.nio.charset.StandardCharsets;
 import java.util.List;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.ExecutorService;
@@ -203,7 +204,7 @@ public Integer handleResponse(final HttpResponse response)
         if (responseEntity != null) {
           bufferedReader =
               new BufferedReader(new InputStreamReader(
-                  responseEntity.getContent()));
+                  responseEntity.getContent(), StandardCharsets.UTF_8));
 
           String line = "";
           int lineCount = 0;

File: azkaban-web-server/src/main/java/azkaban/webapp/AzkabanWebServer.java
Patch:
@@ -32,6 +32,7 @@
 import java.net.MalformedURLException;
 import java.net.URL;
 import java.net.URLClassLoader;
+import java.nio.charset.StandardCharsets;
 import java.sql.SQLException;
 import java.util.ArrayList;
 import java.util.Collections;
@@ -580,7 +581,7 @@ && new File("/usr/bin/head").exists()) {
 
           InputStream is = p.getInputStream();
           java.io.BufferedReader reader =
-              new java.io.BufferedReader(new InputStreamReader(is));
+              new java.io.BufferedReader(new InputStreamReader(is, StandardCharsets.UTF_8));
           String line = null;
           while ((line = reader.readLine()) != null) {
             logger.info(line);

File: azkaban-exec-server/src/main/java/azkaban/execapp/JobRunner.java
Patch:
@@ -625,8 +625,8 @@ private void doRun() {
   private void uploadExecutableNode() {
     try {
       this.loader.uploadExecutableNode(this.node, this.props);
-    } catch (final ExecutorManagerException e1) {
-      this.logger.error("Error writing initial node properties");
+    } catch (final ExecutorManagerException e) {
+      this.logger.error("Error writing initial node properties", e);
     }
   }
 

File: azkaban-common/src/main/java/azkaban/Constants.java
Patch:
@@ -49,6 +49,9 @@ public class Constants {
   public static final int DEFAULT_SSL_PORT_NUMBER = 8443;
   public static final int DEFAULT_JETTY_MAX_THREAD_COUNT = 20;
 
+  // One Schedule's default End Time: 01/01/2050, 00:00:00, UTC
+  public static final long DEFAULT_SCHEDULE_END_EPOCH_TIME = 2524608000000L;
+
   public static class ConfigurationKeys {
     // These properties are configurable through azkaban.properties
 

File: azkaban-common/src/main/java/azkaban/scheduler/ScheduleLoader.java
Patch:
@@ -24,8 +24,6 @@ public interface ScheduleLoader {
 
   public void updateSchedule(Schedule s) throws ScheduleManagerException;
 
-  public List<Schedule> loadSchedules() throws ScheduleManagerException;
-
   public void removeSchedule(Schedule s) throws ScheduleManagerException;
 
   public void updateNextExecTime(Schedule s) throws ScheduleManagerException;

File: azkaban-common/src/main/java/azkaban/executor/JdbcExecutorLoader.java
Patch:
@@ -22,6 +22,7 @@
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.IOException;
+import java.nio.charset.StandardCharsets;
 import java.sql.Connection;
 import java.sql.ResultSet;
 import java.sql.SQLException;
@@ -1190,7 +1191,7 @@ public LogData handle(ResultSet rs) throws SQLException {
           FileIOUtils.getUtf8Range(buffer, 0, buffer.length);
 
       return new LogData(startByte + result.getFirst(), result.getSecond(),
-          new String(buffer, result.getFirst(), result.getSecond()));
+          new String(buffer, result.getFirst(), result.getSecond(), StandardCharsets.UTF_8));
     }
   }
 

File: azkaban-common/src/main/java/azkaban/storage/LocalStorage.java
Patch:
@@ -29,6 +29,7 @@
 import java.io.FileInputStream;
 import java.io.IOException;
 import java.io.InputStream;
+import java.nio.charset.StandardCharsets;
 import org.apache.commons.io.FileUtils;
 import org.apache.log4j.Logger;
 
@@ -79,7 +80,7 @@ public String put(final StorageMetadata metadata, final File localFile) {
 
     final File targetFile = new File(projectDir, String.format("%s-%s.zip",
         String.valueOf(metadata.getProjectId()),
-        new String(metadata.getHash())));
+        new String(metadata.getHash(), StandardCharsets.UTF_8)));
 
     if (targetFile.exists()) {
       log.info(String.format("Duplicate found: meta: %s, targetFile: %s, ", metadata,

File: azkaban-common/src/test/java/azkaban/storage/LocalStorageTest.java
Patch:
@@ -27,6 +27,7 @@
 import azkaban.utils.Md5Hasher;
 import java.io.File;
 import java.io.InputStream;
+import java.nio.charset.StandardCharsets;
 import org.apache.commons.io.FileUtils;
 import org.apache.log4j.Logger;
 import org.junit.After;
@@ -72,7 +73,7 @@ public void testPutGet() throws Exception {
         .append(File.separator)
         .append(metadata.getProjectId())
         .append("-")
-        .append(new String(metadata.getHash()))
+        .append(new String(metadata.getHash(), StandardCharsets.UTF_8))
         .append(".zip")
         .toString()
     );

File: azkaban-exec-server/src/test/java/azkaban/execapp/JobRunnerTest.java
Patch:
@@ -306,6 +306,7 @@ public void testDelayedExecutionCancelledJob() throws InterruptedException {
     Assert.assertTrue(outputProps == null);
     Assert.assertTrue(logFile.exists());
 
+    Assert.assertEquals(2L, (long) loader.getNodeUpdateCount("testJob"));
     eventCollector.checkEventExists(Type.JOB_FINISHED);
   }
 

File: azkaban-common/src/main/java/azkaban/executor/ExecutableNode.java
Patch:
@@ -49,7 +49,7 @@ public class ExecutableNode {
   public static final String PASTATTEMPTS_PARAM = "pastAttempts";
   private String id;
   private String type = null;
-  private Status status = Status.READY;
+  private volatile Status status = Status.READY;
   private long startTime = -1;
   private long endTime = -1;
   private long updateTime = -1;

File: azkaban-common/src/test/java/azkaban/jobExecutor/AllJobExecutorTests.java
Patch:
@@ -19,9 +19,9 @@
 import azkaban.flow.CommonJobProperties;
 import azkaban.utils.Props;
 
-class AllJobExecutorTests {
+public class AllJobExecutorTests {
 
-  static Props setUpCommonProps() {
+  public static Props setUpCommonProps() {
 
     final Props props = new Props();
     props.put("fullPath", ".");

File: azkaban-common/src/main/java/azkaban/alert/Alerter.java
Patch:
@@ -20,8 +20,10 @@
 import azkaban.sla.SlaOption;
 
 public interface Alerter {
+
   void alertOnSuccess(ExecutableFlow exflow) throws Exception;
-  void alertOnError(ExecutableFlow exflow, String ... extraReasons) throws Exception;
+
+  void alertOnError(ExecutableFlow exflow, String... extraReasons) throws Exception;
 
   void alertOnFirstError(ExecutableFlow exflow) throws Exception;
 

File: azkaban-common/src/main/java/azkaban/event/EventListener.java
Patch:
@@ -17,5 +17,6 @@
 package azkaban.event;
 
 public interface EventListener {
+
   public void handleEvent(Event event);
 }

File: azkaban-common/src/main/java/azkaban/executor/ConnectorParams.java
Patch:
@@ -17,6 +17,7 @@
 package azkaban.executor;
 
 public interface ConnectorParams {
+
   public static final String EXECUTOR_ID_PARAM = "executorId";
   public static final String ACTION_PARAM = "action";
   public static final String EXECID_PARAM = "execid";
@@ -101,8 +102,8 @@ public interface ConnectorParams {
   public static final String STATS_MAP_METRICNAMEPARAM = "metricName";
 
   /**
-   * useStats param is used to filter datapoints on /stats graph by using standard deviation and means
-   * By default, we consider only top/bottom 5% datapoints
+   * useStats param is used to filter datapoints on /stats graph by using standard deviation and
+   * means By default, we consider only top/bottom 5% datapoints
    */
 
   public static final String STATS_MAP_METRICRETRIEVALMODE = "useStats";

File: azkaban-common/src/main/java/azkaban/executor/mail/MailCreator.java
Patch:
@@ -20,6 +20,7 @@
 import azkaban.utils.EmailMessage;
 
 public interface MailCreator {
+
   public boolean createFirstErrorMessage(ExecutableFlow flow,
       EmailMessage message, String azkabanName, String scheme,
       String clientHostname, String clientPortNumber, String... vars);

File: azkaban-common/src/main/java/azkaban/flow/CommonJobProperties.java
Patch:
@@ -133,7 +133,7 @@ public class CommonJobProperties {
    * hotspot occurs.
    */
   public static final String PROJECT_VERSION = "azkaban.flow.projectversion";
-  
+
   /**
    * Find out who is the submit user, in addition to the user.to.proxy (they may be different)
    */

File: azkaban-common/src/main/java/azkaban/flow/SpecialJobTypes.java
Patch:
@@ -17,6 +17,7 @@
 package azkaban.flow;
 
 public class SpecialJobTypes {
+
   public static final String BRANCH_START_TYPE = "branch.start";
   public static final String BRANCH_END_TYPE = "branch.end";
 

File: azkaban-common/src/main/java/azkaban/jmx/DisplayName.java
Patch:
@@ -21,7 +21,6 @@
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
-
 import javax.management.DescriptorKey;
 
 /**
@@ -32,6 +31,7 @@
 @Target(ElementType.METHOD)
 @Retention(RetentionPolicy.RUNTIME)
 public @interface DisplayName {
+
   @DescriptorKey("displayName")
   String value();
 }

File: azkaban-common/src/main/java/azkaban/jmx/JmxExecutorManagerAdapterMBean.java
Patch:
@@ -19,6 +19,7 @@
 import java.util.List;
 
 public interface JmxExecutorManagerAdapterMBean {
+
   @DisplayName("OPERATION: getNumRunningFlows")
   public int getNumRunningFlows();
 

File: azkaban-common/src/main/java/azkaban/jmx/JmxExecutorManagerMBean.java
Patch:
@@ -19,6 +19,7 @@
 import java.util.List;
 
 public interface JmxExecutorManagerMBean {
+
   @DisplayName("OPERATION: getNumRunningFlows")
   public int getNumRunningFlows();
 

File: azkaban-common/src/main/java/azkaban/jmx/JmxJettyServerMBean.java
Patch:
@@ -17,6 +17,7 @@
 package azkaban.jmx;
 
 public interface JmxJettyServerMBean {
+
   @DisplayName("OPERATION: isRunning")
   public boolean isRunning();
 

File: azkaban-common/src/main/java/azkaban/jmx/ParameterName.java
Patch:
@@ -19,18 +19,19 @@
  * ParameterName - This annotation allows to supply
  * a parameter name for a method in the MBean interface.
  */
+
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
-
 import javax.management.DescriptorKey;
 
 @Documented
 @Target(ElementType.PARAMETER)
 @Retention(RetentionPolicy.RUNTIME)
 public @interface ParameterName {
+
   @DescriptorKey("parameterName")
   String value();
 }

File: azkaban-common/src/main/java/azkaban/jobExecutor/utils/JobExecutionException.java
Patch:
@@ -20,15 +20,15 @@ public class JobExecutionException extends RuntimeException {
 
   private final static long serialVersionUID = 1;
 
-  public JobExecutionException(String message) {
+  public JobExecutionException(final String message) {
     super(message);
   }
 
-  public JobExecutionException(Throwable cause) {
+  public JobExecutionException(final Throwable cause) {
     super(cause);
   }
 
-  public JobExecutionException(String message, Throwable cause) {
+  public JobExecutionException(final String message, final Throwable cause) {
     super(message, cause);
   }
 

File: azkaban-common/src/main/java/azkaban/jobExecutor/utils/process/ProcessFailureException.java
Patch:
@@ -23,13 +23,13 @@ public class ProcessFailureException extends RuntimeException {
   private final int exitCode;
   private final String logSnippet;
 
-  public ProcessFailureException(int exitCode, String logSnippet) {
+  public ProcessFailureException(final int exitCode, final String logSnippet) {
     this.exitCode = exitCode;
     this.logSnippet = logSnippet;
   }
 
   public int getExitCode() {
-    return exitCode;
+    return this.exitCode;
   }
 
   public String getLogSnippet() {

File: azkaban-common/src/main/java/azkaban/jobcallback/JobCallbackConstants.java
Patch:
@@ -1,6 +1,7 @@
 package azkaban.jobcallback;
 
 public interface JobCallbackConstants {
+
   public static final String STATUS_TOKEN = "status";
   public static final String SEQUENCE_TOKEN = "sequence";
   public static final String HTTP_GET = "GET";

File: azkaban-common/src/main/java/azkaban/metric/IMetricEmitter.java
Patch:
@@ -20,6 +20,8 @@
  * Interface for metric emitters
  */
 public interface IMetricEmitter {
+
   void reportMetric(final IMetric<?> metric) throws MetricException;
+
   void purgeAllData() throws MetricException;
 }
\ No newline at end of file

File: azkaban-common/src/main/java/azkaban/project/ProjectManagerException.java
Patch:
@@ -20,13 +20,14 @@
 
 
 public class ProjectManagerException extends AzkabanException {
+
   private static final long serialVersionUID = 1L;
 
-  public ProjectManagerException(String message) {
+  public ProjectManagerException(final String message) {
     super(message);
   }
 
-  public ProjectManagerException(String message, Throwable cause) {
+  public ProjectManagerException(final String message, final Throwable cause) {
     super(message, cause);
   }
 }

File: azkaban-common/src/main/java/azkaban/project/validator/ValidationStatus.java
Patch:
@@ -12,11 +12,11 @@ public enum ValidationStatus {
   private final String _status;
 
   private ValidationStatus(final String status) {
-    _status = status;
+    this._status = status;
   }
 
   @Override
   public String toString() {
-    return _status;
+    return this._status;
   }
 }

File: azkaban-common/src/main/java/azkaban/trigger/TriggerAgent.java
Patch:
@@ -19,6 +19,7 @@
 import azkaban.utils.Props;
 
 public interface TriggerAgent {
+
   public void loadTriggerFromProps(Props props) throws Exception;
 
   public String getTriggerSource();

File: azkaban-common/src/test/java/azkaban/executor/mail/DefaultMailCreatorTest.java
Patch:
@@ -96,7 +96,7 @@ public void createErrorEmail() throws Exception {
     assertTrue(mailCreator.createErrorEmail(
         executableFlow, message, azkabanName, scheme, clientHostname, clientPortNumber));
     assertEquals("Flow 'mail-creator-test' has failed on unit-tests", message.getSubject());
-    assertEquals(read("errorEmail.html"), message.getBody());
+    assertEquals(read("errorEmail.html").replaceAll("\\s+", ""), message.getBody().replaceAll("\\s+", ""));
   }
 
   @Test
@@ -106,7 +106,7 @@ public void createFirstErrorMessage() throws Exception {
     assertTrue(mailCreator.createFirstErrorMessage(
         executableFlow, message, azkabanName, scheme, clientHostname, clientPortNumber));
     assertEquals("Flow 'mail-creator-test' has encountered a failure on unit-tests", message.getSubject());
-    assertEquals(read("firstErrorMessage.html"), message.getBody());
+    assertEquals(read("firstErrorMessage.html").replaceAll("\\s+", ""), message.getBody().replaceAll("\\s+", ""));
   }
 
   @Test
@@ -117,7 +117,7 @@ public void createSuccessEmail() throws Exception {
     assertTrue(mailCreator.createSuccessEmail(
         executableFlow, message, azkabanName, scheme, clientHostname, clientPortNumber));
     assertEquals("Flow 'mail-creator-test' has succeeded on unit-tests", message.getSubject());
-    assertEquals(read("successEmail.html"), message.getBody());
+    assertEquals(read("successEmail.html").replaceAll("\\s+", ""), message.getBody().replaceAll("\\s+", ""));
   }
 
   private String read(String file) throws Exception {

File: azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java
Patch:
@@ -1059,12 +1059,12 @@ public JobRunnerEventListener() {
 
     @Override
     public synchronized void handleEvent(Event event) {
-      JobRunner runner = (JobRunner) event.getRunner();
 
       if (event.getType() == Type.JOB_STATUS_CHANGED) {
         updateFlow();
       }
       else if (event.getType() == Type.JOB_FINISHED) {
+        JobRunner runner = (JobRunner) event.getRunner();
         ExecutableNode node = runner.getNode();
         EventData eventData = event.getData();
         long seconds = (node.getEndTime() - node.getStartTime()) / 1000;

File: azkaban-common/src/main/java/azkaban/executor/ExecutorManager.java
Patch:
@@ -1358,7 +1358,7 @@ public void run() {
                 ScheduleStatisticManager.invalidateCache(flow.getScheduleId(),
                     cacheDir);
               }
-              fireEventListeners(Event.create(flow, Type.FLOW_FINISHED, new EventData(flow.getStatus())));
+              fireEventListeners(Event.create(flow, Type.FLOW_FINISHED, new EventData(flow)));
               recentlyFinished.put(flow.getExecutionId(), flow);
             }
 
@@ -1423,7 +1423,7 @@ private void finalizeFlows(ExecutableFlow flow) {
       executorLoader.removeActiveExecutableReference(execId);
 
       updaterStage = "finalizing flow " + execId + " cleaning from memory";
-      fireEventListeners(Event.create(dsFlow, Type.FLOW_FINISHED, new EventData(dsFlow.getStatus())));
+      fireEventListeners(Event.create(dsFlow, Type.FLOW_FINISHED, new EventData(dsFlow)));
       recentlyFinished.put(execId, dsFlow);
 
     } catch (ExecutorManagerException e) {

File: azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunner.java
Patch:
@@ -222,7 +222,7 @@ public void run() {
       logger.info("Fetching job and shared properties.");
       loadAllProperties();
 
-      this.fireEventListeners(Event.create(this, Type.FLOW_STARTED, new EventData(this.getExecutableFlow().getStatus())));
+      this.fireEventListeners(Event.create(this, Type.FLOW_STARTED, new EventData(this.getExecutableFlow())));
       runFlow();
     } catch (Throwable t) {
       if (logger != null) {
@@ -246,7 +246,7 @@ public void run() {
       closeLogger();
 
       updateFlow();
-      this.fireEventListeners(Event.create(this, Type.FLOW_FINISHED, new EventData(flow.getStatus())));
+      this.fireEventListeners(Event.create(this, Type.FLOW_FINISHED, new EventData(flow)));
     }
   }
 

File: azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunnerManager.java
Patch:
@@ -296,7 +296,8 @@ private class CleanerThread extends Thread {
     private long lastOldProjectCleanTime = -1;
     private long lastRecentlyFinishedCleanTime = -1;
     private long lastLongRunningFlowCleanTime = -1;
-    private final long flowMaxRunningTimeInMins = azkabanProps.getInt(Constants.ConfigurationKeys.AZKABAN_MAX_FLOW_RUNNING_MINS, 60 * 24 * 10);
+    private final long flowMaxRunningTimeInMins = azkabanProps.getInt(
+        Constants.ConfigurationKeys.AZKABAN_MAX_FLOW_RUNNING_MINS, -1);
 
     public CleanerThread() {
       this.setName("FlowRunnerManager-Cleaner-Thread");

File: azkaban-common/src/main/java/azkaban/storage/LocalStorage.java
Patch:
@@ -61,10 +61,9 @@ public String put(StorageMetadata metadata, File localFile) {
       log.info("Created project dir: " + projectDir.getAbsolutePath());
     }
 
-    final File targetFile = new File(projectDir, String.format("%s-%s.%s",
+    final File targetFile = new File(projectDir, String.format("%s-%s.zip",
         String.valueOf(metadata.getProjectId()),
-        new String(metadata.getHash()),
-        Files.getFileExtension(localFile.getName())));
+        new String(metadata.getHash())));
 
     if (targetFile.exists()) {
       log.info(String.format("Duplicate found: meta: %s, targetFile: %s, ", metadata,

File: azkaban-common/src/main/java/azkaban/Constants.java
Patch:
@@ -90,7 +90,10 @@ public static class ConfigurationKeys {
 
     public static final String AZKABAN_STORAGE_TYPE = "azkaban.storage.type";
     public static final String AZKABAN_STORAGE_LOCAL_BASEDIR = "azkaban.storage.local.basedir";
+    public static final String HADOOP_CONF_DIR_PATH = "hadoop.conf.dir.path";
     public static final String AZKABAN_STORAGE_HDFS_ROOT_URI = "azkaban.storage.hdfs.root.uri";
+    public static final String AZKABAN_KERBEROS_PRINCIPAL = "azkaban.kerberos.principal";
+    public static final String AZKABAN_KEYTAB_PATH = "azkaban.keytab.path";
   }
 
   public static class FlowProperties {

File: azkaban-common/src/test/java/azkaban/ServiceProviderTest.java
Patch:
@@ -17,6 +17,7 @@
 
 package azkaban;
 
+import azkaban.db.DatabaseOperator;
 import azkaban.project.JdbcProjectLoader;
 import azkaban.spi.Storage;
 import azkaban.storage.DatabaseStorage;
@@ -62,5 +63,6 @@ public void testInjections() throws Exception {
     assertNotNull(SERVICE_PROVIDER.getInstance(DatabaseStorage.class));
     assertNotNull(SERVICE_PROVIDER.getInstance(LocalStorage.class));
     assertNotNull(SERVICE_PROVIDER.getInstance(Storage.class));
+    assertNotNull(SERVICE_PROVIDER.getInstance(DatabaseOperator.class));
   }
 }

File: azkaban-common/src/test/java/azkaban/database/AzkabanConnectionPoolTest.java
Patch:
@@ -28,7 +28,7 @@ public class AzkabanConnectionPoolTest{
 
   public static class EmbeddedH2BasicDataSource extends AzkabanDataSource {
 
-    private EmbeddedH2BasicDataSource() {
+    public EmbeddedH2BasicDataSource() {
       super();
       String url = "jdbc:h2:mem:test";
       setDriverClassName("org.h2.Driver");

File: azkaban-common/src/test/java/azkaban/trigger/TriggerManagerDeadlockTest.java
Patch:
@@ -23,6 +23,7 @@
 
 import org.junit.After;
 import org.junit.Before;
+import org.junit.Ignore;
 import org.junit.Test;
 
 import azkaban.alert.Alerter;
@@ -57,7 +58,8 @@ public void tearDown() {
 
   }
 
-  @Test
+  // TODO kunkun-tang: This test has problems. Will fix
+  @Ignore @Test
   public void deadlockTest() throws TriggerLoaderException,
       TriggerManagerException {
     // this should well saturate it

File: azkaban-common/src/test/java/azkaban/jobExecutor/PythonJobTest.java
Patch:
@@ -78,7 +78,7 @@ public static void init() {
   }
 
   @AfterClass
-  public static void cleanup() {
+  public static void cleanup() throws IOException {
     // remove the input file and error input file
     Utils.removeFile(scriptFile);
   }

File: azkaban-web-server/src/main/java/azkaban/webapp/servlet/HistoryServlet.java
Patch:
@@ -200,7 +200,7 @@ private void handleHistoryDayPage(HttpServletRequest req,
       HttpServletResponse resp, Session session) {
   }
 
-  public class PageSelection {
+  public static class PageSelection {
     private int page;
     private int size;
     private boolean disabled;

File: azkaban-web-server/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java
Patch:
@@ -1806,7 +1806,7 @@ public int compare(Node node1, Node node2) {
     }
   }
 
-  public class PageSelection {
+  public static class PageSelection {
     private String page;
     private int size;
     private boolean disabled;

File: azkaban-common/src/main/java/azkaban/executor/selector/FactorFilter.java
Patch:
@@ -70,6 +70,6 @@ public interface Filter<T,V>{
      *                      the object being checked need to be filtered or not.
      * @return true if the check passed, false if check failed, which means the item need to be filtered.
      * */
-    public boolean filterTarget(T filteringTarget, V referencingObject);
+    boolean filterTarget(T filteringTarget, V referencingObject);
   }
 }

File: azkaban-common/src/main/java/azkaban/metric/AbstractMetric.java
Patch:
@@ -64,6 +64,7 @@ public String getValueType() {
    * {@inheritDoc}
    * @see azkaban.metric.IMetric#updateMetricManager(azkaban.metric.MetricReportManager)
    */
+  @Override
   public void updateMetricManager(final MetricReportManager manager) {
     metricManager = manager;
   }

File: azkaban-common/src/main/java/azkaban/trigger/ConditionChecker.java
Patch:
@@ -39,5 +39,4 @@ public interface ConditionChecker {
   void setContext(Map<String, Object> context);
 
   long getNextCheckTime();
-
 }

File: azkaban-common/src/main/java/azkaban/trigger/builtin/BasicTimeChecker.java
Patch:
@@ -32,7 +32,6 @@
 
 public class BasicTimeChecker implements ConditionChecker {
 
-  private static Logger logger = Logger.getLogger(BasicTimeChecker.class);
 
   public static final String type = "BasicTimeChecker";
 
@@ -82,6 +81,7 @@ public ReadablePeriod getPeriod() {
     return period;
   }
 
+  @Override
   public long getNextCheckTime() {
     return nextCheckTime;
   }

File: azkaban-common/src/main/java/azkaban/executor/ExecutorLogEvent.java
Patch:
@@ -28,11 +28,11 @@ public class ExecutorLogEvent {
    * Log event type messages. Do not change the numeric representation of each
    * enum. Only represent from 0 to 255 different codes.
    */
-  public static enum EventType {
+  public enum EventType {
     ERROR(128), HOST_UPDATE(1), PORT_UPDATE(2), ACTIVATION(3), INACTIVATION(4),
     CREATED(5);
 
-    private int numVal;
+    private final int numVal;
 
     EventType(int numVal) {
       this.numVal = numVal;

File: azkaban-common/src/main/java/azkaban/executor/mail/DefaultMailCreator.java
Patch:
@@ -31,8 +31,7 @@
 
 public class DefaultMailCreator implements MailCreator {
   public static final String DEFAULT_MAIL_CREATOR = "default";
-  private static HashMap<String, MailCreator> registeredCreators =
-      new HashMap<String, MailCreator>();
+  private static HashMap<String, MailCreator> registeredCreators = new HashMap<>();
   private static MailCreator defaultCreator;
 
   private static final DateFormat DATE_FORMATTER = new SimpleDateFormat(

File: azkaban-common/src/main/java/azkaban/executor/selector/CandidateComparator.java
Patch:
@@ -19,6 +19,7 @@
 import java.util.Collection;
 import java.util.Comparator;
 import java.util.Map;
+import java.util.Objects;
 import java.util.concurrent.ConcurrentHashMap;
 
 import org.apache.log4j.Logger;
@@ -153,7 +154,6 @@ public Pair<Integer,Integer> getComparisonScore(T object1, T object2){
   @Override
   public int compare(T o1, T o2) {
     Pair<Integer,Integer> result = this.getComparisonScore(o1,o2);
-    return result.getFirst() == result.getSecond() ? 0 :
-                                result.getFirst() > result.getSecond() ? 1 : -1;
+    return Objects.equals(result.getFirst(), result.getSecond()) ? 0 : result.getFirst() > result.getSecond() ? 1 : -1;
   }
 }

File: azkaban-common/src/main/java/azkaban/database/AbstractJdbcLoader.java
Patch:
@@ -33,7 +33,7 @@ public abstract class AbstractJdbcLoader {
   public enum EncodingType {
     PLAIN(1), GZIP(2);
 
-    private int numVal;
+    private final int numVal;
 
     EncodingType(int numVal) {
       this.numVal = numVal;

File: azkaban-common/src/main/java/azkaban/database/DataSourceUtils.java
Patch:
@@ -36,7 +36,7 @@ public class DataSourceUtils {
   public static enum PropertyType {
     DB(1);
 
-    private int numVal;
+    private final int numVal;
 
     PropertyType(int numVal) {
       this.numVal = numVal;

File: azkaban-common/src/main/java/azkaban/executor/Status.java
Patch:
@@ -31,7 +31,7 @@ public enum Status {
   FAILED_SUCCEEDED(120),
   CANCELLED(130);
 
-  private int numVal;
+  private final int numVal;
 
   Status(int numVal) {
     this.numVal = numVal;

File: azkaban-common/src/main/java/azkaban/user/Permission.java
Patch:
@@ -33,7 +33,7 @@ public enum Type {
     CREATEPROJECTS(0x40000000), // Only used for roles
     ADMIN(0x8000000);
 
-    private int numVal;
+    private final int numVal;
 
     Type(int numVal) {
       this.numVal = numVal;

File: azkaban-common/src/main/java/azkaban/executor/JdbcExecutorLoader.java
Patch:
@@ -16,12 +16,12 @@
 
 package azkaban.executor;
 
+import com.google.inject.Inject;
 import java.io.BufferedInputStream;
 import java.io.ByteArrayOutputStream;
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.IOException;
-import java.lang.annotation.Inherited;
 import java.sql.Connection;
 import java.sql.ResultSet;
 import java.sql.SQLException;
@@ -58,6 +58,7 @@ public class JdbcExecutorLoader extends AbstractJdbcLoader implements
 
   private EncodingType defaultEncodingType = EncodingType.GZIP;
 
+  @Inject
   public JdbcExecutorLoader(Props props) {
     super(props);
   }

File: azkaban-common/src/main/java/azkaban/project/ProjectManager.java
Patch:
@@ -413,7 +413,7 @@ public ProjectFileHandler getProjectFileHandler(Project project, int version)
     if (version == -1) {
       version = projectLoader.getLatestProjectVersion(project);
     }
-    return projectLoader.getUploadedFile(project, version);
+    return storageManager.getProjectFile(project.getId(), version);
   }
 
   public Map<String, ValidationReport> uploadProject(Project project,

File: azkaban-common/src/test/java/azkaban/project/JdbcProjectLoaderTest.java
Patch:
@@ -541,7 +541,7 @@ public void testProjectFilesUpload() throws ProjectManagerException {
 
     loader.uploadProjectFile(project.getId(), 1, testFile, user.getUserId());
 
-    ProjectFileHandler handler = loader.getUploadedFile(project, 1);
+    ProjectFileHandler handler = loader.getUploadedFile(project.getId(), 1);
     Assert.assertEquals(handler.getProjectId(), project.getId());
     Assert.assertEquals(handler.getFileName(), "testjob.zip");
     Assert.assertEquals(handler.getVersion(), 1);

File: azkaban-exec-server/src/main/java/azkaban/execapp/AzkabanExecServerModule.java
Patch:
@@ -17,6 +17,8 @@
 
 package azkaban.execapp;
 
+import azkaban.executor.ExecutorLoader;
+import azkaban.executor.JdbcExecutorLoader;
 import com.google.inject.AbstractModule;
 import com.google.inject.Scopes;
 
@@ -29,6 +31,7 @@
 public class AzkabanExecServerModule extends AbstractModule {
   @Override
   protected void configure() {
+    bind(ExecutorLoader.class).to(JdbcExecutorLoader.class).in(Scopes.SINGLETON);
     bind(AzkabanExecutorServer.class).in(Scopes.SINGLETON);
   }
 }

File: azkaban-web-server/src/main/java/azkaban/webapp/AzkabanWebServer.java
Patch:
@@ -1207,9 +1207,9 @@ public void close() {
     executorManager.shutdown();
     try {
       server.stop();
-    } catch (Throwable t) {
+    } catch (Exception e) {
       // Catch all while closing server
-      logger.error(t);
+      logger.error(e);
     }
     server.destroy();
   }

File: azkaban-common/src/main/java/azkaban/Constants.java
Patch:
@@ -43,6 +43,8 @@ public class Constants {
 
   // Max number of memory check retry
   public static final int MEMORY_CHECK_RETRY_LIMIT = 720;
+  public static final int DEFAULT_PORT_NUMBER = 8081;
+  public static final int DEFAULT_SSL_PORT_NUMBER = 8443;
 
   public static class ConfigurationKeys {
     // These properties are configurable through azkaban.properties

File: azkaban-common/src/main/java/azkaban/executor/selector/ExecutorFilter.java
Patch:
@@ -163,7 +163,7 @@ public boolean filterTarget(Executor filteringTarget, ExecutableFlow referencing
         ExecutorInfo stats = filteringTarget.getExecutorInfo();
         if (null == stats) {
           logger.debug(String.format("%s : filtering out %s as it's stats is unavailable.",
-              MINIMUMFREEMEMORY_FILTER_NAME,
+              CPUSTATUS_FILTER_NAME,
               filteringTarget.toString()));
           return false;
         }

File: azkaban-common/src/main/java/azkaban/jobExecutor/ProcessJob.java
Patch:
@@ -19,6 +19,7 @@
 import azkaban.Constants;
 import azkaban.metrics.CommonMetrics;
 import java.io.File;
+import java.time.Duration;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
@@ -40,7 +41,7 @@ public class ProcessJob extends AbstractProcessJob {
 
   public static final String COMMAND = "command";
 
-  private static final long KILL_TIME_MS = 5000;
+  private static final Duration KILL_TIME = Duration.ofSeconds(30);
 
   private volatile AzkabanProcess process;
 
@@ -300,7 +301,7 @@ public void cancel() throws InterruptedException {
 
     if (process == null)
       throw new IllegalStateException("Not started.");
-    boolean processkilled = process.softKill(KILL_TIME_MS, TimeUnit.MILLISECONDS);
+    boolean processkilled = process.softKill(KILL_TIME.toMillis(), TimeUnit.MILLISECONDS);
     if (!processkilled) {
       warn("Kill with signal TERM failed. Killing with KILL signal.");
       process.hardKill();

File: azkaban-common/src/main/java/azkaban/trigger/JdbcTriggerLoader.java
Patch:
@@ -266,7 +266,7 @@ public Long handle(ResultSet rs) throws SQLException {
 
   }
 
-  public class TriggerResultHandler implements ResultSetHandler<List<Trigger>> {
+  public static class TriggerResultHandler implements ResultSetHandler<List<Trigger>> {
 
     @Override
     public List<Trigger> handle(ResultSet rs) throws SQLException {

File: azkaban-common/src/test/java/azkaban/trigger/TriggerManagerDeadlockTest.java
Patch:
@@ -75,7 +75,7 @@ public void deadlockTest() throws TriggerLoaderException,
     System.out.println("No dead lock.");
   }
 
-  public class AlwaysOnChecker implements ConditionChecker {
+  public static class AlwaysOnChecker implements ConditionChecker {
 
     public static final String type = "AlwaysOnChecker";
 

File: azkaban-common/src/test/java/azkaban/trigger/TriggerManagerTest.java
Patch:
@@ -122,7 +122,7 @@ public void triggerManagerSimpleTest() throws TriggerManagerException {
 
   }
 
-  public class MockTriggerLoader implements TriggerLoader {
+  public static class MockTriggerLoader implements TriggerLoader {
 
     private Map<Integer, Trigger> triggers = new HashMap<Integer, Trigger>();
     private int idIndex = 0;

File: azkaban-common/src/test/java/azkaban/utils/RestfulApiClientTest.java
Patch:
@@ -44,7 +44,7 @@
  */
 public class RestfulApiClientTest {
 
-  protected class MockRestfulApiClient extends RestfulApiClient<String> {
+  static class MockRestfulApiClient extends RestfulApiClient<String> {
     private int  status = HttpStatus.SC_OK;
 
     @Override

File: azkaban-common/src/main/java/azkaban/jobtype/JobTypeManager.java
Patch:
@@ -328,8 +328,7 @@ public Job buildJobExecutor(String jobId, Props jobProps, Logger logger)
       if (jobType == null || jobType.length() == 0) {
         /* throw an exception when job name is null or empty */
         throw new JobExecutionException(String.format(
-            "The 'type' parameter for job[%s] is null or empty", jobProps,
-            logger));
+            "The 'type' parameter for job[%s] is null or empty", jobProps));
       }
 
       logger.info("Building " + jobType + " job executor. ");

File: azkaban-common/src/test/java/azkaban/trigger/MockTriggerLoader.java
Patch:
@@ -37,7 +37,7 @@ public synchronized void addTrigger(Trigger t) throws TriggerLoaderException {
   @Override
   public synchronized void removeTrigger(Trigger s)
       throws TriggerLoaderException {
-    triggers.remove(s);
+    triggers.remove(s.getTriggerId());
   }
 
   @Override

File: azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunnerManager.java
Patch:
@@ -447,8 +447,6 @@ private void cleanOlderProjects() {
             } catch (IOException e) {
               logger.error(e);
             }
-
-            installedVersions.remove(versionKey);
           }
         }
       }

File: azkaban-common/src/main/java/azkaban/database/AzkabanDataSource.java
Patch:
@@ -16,7 +16,7 @@
 
 package azkaban.database;
 
-import org.apache.commons.dbcp.BasicDataSource;
+import org.apache.commons.dbcp2.BasicDataSource;
 
 public abstract class AzkabanDataSource extends BasicDataSource {
   public abstract boolean allowsOnDuplicateKey();

File: azkaban-common/src/main/java/azkaban/database/DataSourceUtils.java
Patch:
@@ -137,7 +137,7 @@ private MySQLBasicDataSource(String host, int port, String dbName,
       setUsername(user);
       setPassword(password);
       setUrl(url);
-      setMaxActive(numConnections);
+      setMaxTotal(numConnections);
       setValidationQuery("/* ping */ select 1");
       setTestOnBorrow(true);
     }

File: azkaban-common/src/main/java/azkaban/constants/ServerInternals.java
Patch:
@@ -29,7 +29,7 @@ public class ServerInternals {
 
 
   // Memory check retry interval when OOM in ms
-  public static final long MEMORY_CHECK_INTERVAL = 1000*60*1;
+  public static final long MEMORY_CHECK_INTERVAL_MS = 1000 * 60 * 1;
 
   // Max number of memory check retry
   public static final int MEMORY_CHECK_RETRY_LIMIT = 720;

File: azkaban-common/src/main/java/azkaban/trigger/builtin/ExecuteFlowAction.java
Patch:
@@ -240,6 +240,7 @@ public void doAction() throws Exception {
     exflow.setExecutionOptions(executionOptions);
 
     try {
+      logger.info("Invoking flow " + project.getName() + "." + flowName);
       executorManager.submitExecutableFlow(exflow, submitUser);
       logger.info("Invoked flow " + project.getName() + "." + flowName);
     } catch (ExecutorManagerException e) {

File: azkaban-web-server/src/main/java/azkaban/webapp/servlet/ScheduleServlet.java
Patch:
@@ -718,7 +718,7 @@ private void ajaxScheduleCronFlow(HttpServletRequest req,
     if (flow == null) {
       ret.put("status", "error");
       ret.put("message", "Flow " + flowName + " cannot be found in project "
-          + project);
+          + projectName);
       return;
     }
 

File: azkaban-exec-server/src/main/java/azkaban/execapp/JobRunner.java
Patch:
@@ -599,6 +599,7 @@ private Status prepareJob() throws RuntimeException {
       insertJobMetadata();
       insertJVMAargs();
 
+      props.put(CommonJobProperties.JOB_ID, this.jobId);
       props.put(CommonJobProperties.JOB_ATTEMPT, node.getAttempt());
       props.put(CommonJobProperties.JOB_METADATA_FILE,
           createMetaDataFileName(node));

File: azkaban-common/src/main/java/azkaban/database/AbstractJdbcLoader.java
Patch:
@@ -68,14 +68,15 @@ public AbstractJdbcLoader(Props props) {
   protected Connection getDBConnection(boolean autoCommit) throws IOException {
     Connection connection = null;
     CommonMetrics.INSTANCE.markDBConnection();
+    long startMs = System.currentTimeMillis();
     try {
       connection = dataSource.getConnection();
       connection.setAutoCommit(autoCommit);
     } catch (Exception e) {
       DbUtils.closeQuietly(connection);
       throw new IOException("Error getting DB connection.", e);
     }
-
+    CommonMetrics.INSTANCE.setDBConnectionTime(System.currentTimeMillis() - startMs);
     return connection;
   }
 

File: azkaban-common/src/main/java/azkaban/project/JdbcProjectLoader.java
Patch:
@@ -350,6 +350,7 @@ private synchronized Project createNewProject(Connection connection,
   public void uploadProjectFile(Project project, int version, String filetype,
       String filename, File localFile, String uploader)
       throws ProjectManagerException {
+    long startMs = System.currentTimeMillis();
     logger.info("Uploading to " + project.getName() + " version:" + version
         + " file:" + filename);
     Connection connection = getConnection();
@@ -358,7 +359,8 @@ public void uploadProjectFile(Project project, int version, String filetype,
       uploadProjectFile(connection, project, version, filetype, filename,
           localFile, uploader);
       connection.commit();
-      logger.info("Commiting upload " + localFile.getName());
+      logger.info("project " + project.getName() + " commiting upload " + localFile.getName()
+              + " took " + ((System.currentTimeMillis() - startMs) / 1000) + " seconds.");
     } catch (SQLException e) {
       logger.error(e);
       throw new ProjectManagerException("Error getting DB connection.", e);

File: azkaban-exec-server/src/main/java/azkaban/execapp/ExecutorServlet.java
Patch:
@@ -375,7 +375,7 @@ private void setActiveInternal(boolean value)
     if (executor.isActive() != value) {
       executor.setActive(value);
       executorLoader.updateExecutor(executor);
-      flowRunnerManager.setActive(value);
+      flowRunnerManager.setExecutorActive(value);
     } else {
       logger.warn("Set active action ignored. Executor is already " + (value? "active" : "inactive"));
     }

File: azkaban-common/src/main/java/azkaban/database/DataSourceUtils.java
Patch:
@@ -169,6 +169,7 @@ private class MonitorThread extends Thread {
 
       public MonitorThread(MySQLBasicDataSource mysqlSource) {
         this.setName("MySQL-DB-Monitor-Thread");
+        setDaemon(true);
         dataSource = mysqlSource;
       }
 

File: azkaban-common/src/main/java/azkaban/executor/ConnectorParams.java
Patch:
@@ -37,6 +37,7 @@ public interface ConnectorParams {
   public static final String ACTIVATE = "activate";
   public static final String DEACTIVATE = "deactivate";
   public static final String GET_STATUS = "getStatus";
+  public static final String SHUTDOWN = "shutdown";
 
   public static final String MODIFY_EXECUTION_ACTION = "modifyExecution";
   public static final String MODIFY_EXECUTION_ACTION_TYPE = "modifyType";

File: azkaban-web-server/src/main/java/azkaban/webapp/servlet/ScheduleServlet.java
Patch:
@@ -637,7 +637,7 @@ private void ajaxScheduleFlow(HttpServletRequest req,
     if (flow == null) {
       ret.put("status", "error");
       ret.put("message", "Flow " + flowName + " cannot be found in project "
-          + project);
+          + projectName);
       return;
     }
 

File: azkaban-common/src/main/java/azkaban/server/AbstractServiceServlet.java
Patch:
@@ -16,6 +16,8 @@
 
 package azkaban.server;
 
+import azkaban.constants.ServerInternals;
+
 import java.io.IOException;
 import java.io.OutputStream;
 
@@ -37,7 +39,7 @@ public class AbstractServiceServlet extends HttpServlet {
   @Override
   public void init(ServletConfig config) throws ServletException {
     application =
-        (AzkabanServer) config.getServletContext().getAttribute(Constants.AZKABAN_SERVLET_CONTEXT_KEY);
+        (AzkabanServer) config.getServletContext().getAttribute(ServerInternals.AZKABAN_SERVLET_CONTEXT_KEY);
 
     if (application == null) {
       throw new IllegalStateException(

File: azkaban-exec-server/src/main/java/azkaban/execapp/ExecutorServlet.java
Patch:
@@ -35,12 +35,12 @@
 
 import org.codehaus.jackson.map.ObjectMapper;
 
+import azkaban.constants.ServerInternals;
 import azkaban.executor.ConnectorParams;
 import azkaban.executor.ExecutableFlowBase;
 import azkaban.executor.Executor;
 import azkaban.executor.ExecutorLoader;
 import azkaban.executor.ExecutorManagerException;
-import azkaban.server.Constants;
 import azkaban.utils.FileIOUtils.JobMetaData;
 import azkaban.utils.FileIOUtils.LogData;
 import azkaban.utils.JSONUtils;
@@ -62,7 +62,7 @@ public ExecutorServlet() {
   public void init(ServletConfig config) throws ServletException {
     application =
         (AzkabanExecutorServer) config.getServletContext().getAttribute(
-            Constants.AZKABAN_SERVLET_CONTEXT_KEY);
+            ServerInternals.AZKABAN_SERVLET_CONTEXT_KEY);
 
     if (application == null) {
       throw new IllegalStateException(

File: azkaban-exec-server/src/main/java/azkaban/execapp/FlowRunnerManager.java
Patch:
@@ -497,7 +497,7 @@ public void submitFlow(int execId) throws ExecutorManagerException {
     }
 
     FlowRunner runner =
-        new FlowRunner(flow, executorLoader, projectLoader, jobtypeManager);
+        new FlowRunner(flow, executorLoader, projectLoader, jobtypeManager, azkabanProps);
     runner.setFlowWatcher(watcher)
         .setJobLogSettings(jobLogChunkSize, jobLogNumFiles)
         .setValidateProxyUser(validateProxyUser)

File: azkaban-exec-server/src/main/java/azkaban/execapp/JMXHttpServlet.java
Patch:
@@ -32,9 +32,9 @@
 
 import org.apache.log4j.Logger;
 
+import azkaban.constants.ServerInternals;
 import azkaban.executor.ConnectorParams;
 import azkaban.server.HttpRequestUtils;
-import azkaban.server.Constants;
 import azkaban.utils.JSONUtils;
 
 public class JMXHttpServlet extends HttpServlet implements ConnectorParams {
@@ -45,7 +45,7 @@ public class JMXHttpServlet extends HttpServlet implements ConnectorParams {
   public void init(ServletConfig config) throws ServletException {
     server =
         (AzkabanExecutorServer) config.getServletContext().getAttribute(
-            Constants.AZKABAN_SERVLET_CONTEXT_KEY);
+            ServerInternals.AZKABAN_SERVLET_CONTEXT_KEY);
   }
 
   public boolean hasParam(HttpServletRequest request, String param) {

File: azkaban-web-server/src/main/java/azkaban/webapp/AzkabanWebServer.java
Patch:
@@ -55,6 +55,7 @@
 import org.mortbay.thread.QueuedThreadPool;
 
 import azkaban.alert.Alerter;
+import azkaban.constants.ServerInternals;
 import azkaban.database.AzkabanDatabaseSetup;
 import azkaban.executor.ExecutorManager;
 import azkaban.executor.JdbcExecutorLoader;
@@ -67,7 +68,6 @@
 import azkaban.scheduler.ScheduleManager;
 import azkaban.scheduler.TriggerBasedScheduleLoader;
 import azkaban.server.AzkabanServer;
-import azkaban.server.Constants;
 import azkaban.server.session.SessionCache;
 import azkaban.trigger.JdbcTriggerLoader;
 import azkaban.trigger.TriggerLoader;
@@ -804,7 +804,7 @@ public static void main(String[] args) throws Exception {
     // TODO: find something else to do the job
     app.getTriggerManager().start();
 
-    root.setAttribute(Constants.AZKABAN_SERVLET_CONTEXT_KEY, app);
+    root.setAttribute(ServerInternals.AZKABAN_SERVLET_CONTEXT_KEY, app);
     try {
       server.start();
     } catch (Exception e) {

File: azkaban-common/src/main/java/azkaban/executor/ExecutorManager.java
Patch:
@@ -1048,12 +1048,14 @@ public String submitExecutableFlow(ExecutableFlow exflow, String userId)
   }
 
   private void cleanOldExecutionLogs(long millis) {
+    long beforeDeleteLogsTimestamp = System.currentTimeMillis();
     try {
       int count = executorLoader.removeExecutionLogsByTime(millis);
       logger.info("Cleaned up " + count + " log entries.");
     } catch (ExecutorManagerException e) {
-      e.printStackTrace();
+      logger.error("log clean up failed. ", e);
     }
+    logger.info("log clean up time: "  + (System.currentTimeMillis() - beforeDeleteLogsTimestamp)/1000 + " seconds.");
   }
 
   private Map<String, Object> callExecutorServer(ExecutableFlow exflow,

File: azkaban-common/src/main/java/azkaban/executor/ConnectorParams.java
Patch:
@@ -34,6 +34,8 @@ public interface ConnectorParams {
   public static final String ATTACHMENTS_ACTION = "attachments";
   public static final String METADATA_ACTION = "metadata";
   public static final String RELOAD_JOBTYPE_PLUGINS_ACTION = "reloadJobTypePlugins";
+  public static final String ACTIVATE = "activate";
+  public static final String DEACTIVATE = "deactivate";
 
   public static final String MODIFY_EXECUTION_ACTION = "modifyExecution";
   public static final String MODIFY_EXECUTION_ACTION_TYPE = "modifyType";

File: azkaban-common/src/main/java/azkaban/server/AbstractServiceServlet.java
Patch:
@@ -37,8 +37,7 @@ public class AbstractServiceServlet extends HttpServlet {
   @Override
   public void init(ServletConfig config) throws ServletException {
     application =
-        (AzkabanServer) config.getServletContext().getAttribute(
-            ServerConstants.AZKABAN_SERVLET_CONTEXT_KEY);
+        (AzkabanServer) config.getServletContext().getAttribute(Constants.AZKABAN_SERVLET_CONTEXT_KEY);
 
     if (application == null) {
       throw new IllegalStateException(

File: azkaban-exec-server/src/main/java/azkaban/execapp/JMXHttpServlet.java
Patch:
@@ -34,7 +34,7 @@
 
 import azkaban.executor.ConnectorParams;
 import azkaban.server.HttpRequestUtils;
-import azkaban.server.ServerConstants;
+import azkaban.server.Constants;
 import azkaban.utils.JSONUtils;
 
 public class JMXHttpServlet extends HttpServlet implements ConnectorParams {
@@ -45,7 +45,7 @@ public class JMXHttpServlet extends HttpServlet implements ConnectorParams {
   public void init(ServletConfig config) throws ServletException {
     server =
         (AzkabanExecutorServer) config.getServletContext().getAttribute(
-            ServerConstants.AZKABAN_SERVLET_CONTEXT_KEY);
+            Constants.AZKABAN_SERVLET_CONTEXT_KEY);
   }
 
   public boolean hasParam(HttpServletRequest request, String param) {

File: azkaban-web-server/src/main/java/azkaban/webapp/AzkabanWebServer.java
Patch:
@@ -67,7 +67,7 @@
 import azkaban.scheduler.ScheduleManager;
 import azkaban.scheduler.TriggerBasedScheduleLoader;
 import azkaban.server.AzkabanServer;
-import azkaban.server.ServerConstants;
+import azkaban.server.Constants;
 import azkaban.server.session.SessionCache;
 import azkaban.trigger.JdbcTriggerLoader;
 import azkaban.trigger.TriggerLoader;
@@ -804,7 +804,7 @@ public static void main(String[] args) throws Exception {
     // TODO: find something else to do the job
     app.getTriggerManager().start();
 
-    root.setAttribute(ServerConstants.AZKABAN_SERVLET_CONTEXT_KEY, app);
+    root.setAttribute(Constants.AZKABAN_SERVLET_CONTEXT_KEY, app);
     try {
       server.start();
     } catch (Exception e) {

File: azkaban-common/src/test/java/azkaban/jobExecutor/JavaProcessJobTest.java
Patch:
@@ -108,13 +108,13 @@ public void setUp() throws IOException {
     props.put(AbstractProcessJob.WORKING_DIR, workingDir.getCanonicalPath());
     props.put("type", "java");
     props.put("fullPath", ".");
-    
+
     props.put(CommonJobProperties.PROJECT_NAME, "test_project");
     props.put(CommonJobProperties.FLOW_ID, "test_flow");
     props.put(CommonJobProperties.JOB_ID, "test_job");
     props.put(CommonJobProperties.EXEC_ID, "123");
     props.put(CommonJobProperties.SUBMIT_USER, "test_user");
-    
+    props.put("execute.as.user", "false");
 
     job = new JavaProcessJob("testJavaProcess", props, props, log);
   }

File: azkaban-web-server/src/main/java/azkaban/webapp/servlet/ScheduleServlet.java
Patch:
@@ -731,7 +731,7 @@ private void ajaxScheduleCronFlow(HttpServletRequest req,
         // everything in Azkaban functions is at the minute granularity, so we add 0 here
         // to let the expression to be complete.
         cronExpression = getParam(req, "cronExpression");
-        if(azkaban.utils.Utils.isCronExpressionValid(cronExpression) == false) {
+        if(azkaban.utils.Utils.isCronExpressionValid(cronExpression, timezone) == false) {
           ret.put("error", "This expression <" + cronExpression + "> can not be parsed to quartz cron.");
           return;
         }

File: azkaban-common/src/main/java/azkaban/executor/ExecutorManager.java
Patch:
@@ -45,6 +45,7 @@
 import azkaban.alert.Alerter;
 import azkaban.event.Event;
 import azkaban.event.Event.Type;
+import azkaban.event.EventData;
 import azkaban.event.EventHandler;
 import azkaban.executor.selector.ExecutorComparator;
 import azkaban.executor.selector.ExecutorFilter;
@@ -1349,7 +1350,7 @@ public void run() {
                 ScheduleStatisticManager.invalidateCache(flow.getScheduleId(),
                     cacheDir);
               }
-              fireEventListeners(Event.create(flow, Type.FLOW_FINISHED));
+              fireEventListeners(Event.create(flow, Type.FLOW_FINISHED, new EventData(flow.getStatus())));
               recentlyFinished.put(flow.getExecutionId(), flow);
             }
 
@@ -1415,7 +1416,7 @@ private void finalizeFlows(ExecutableFlow flow) {
 
       updaterStage = "finalizing flow " + execId + " cleaning from memory";
       runningFlows.remove(execId);
-      fireEventListeners(Event.create(dsFlow, Type.FLOW_FINISHED));
+      fireEventListeners(Event.create(dsFlow, Type.FLOW_FINISHED, new EventData(dsFlow.getStatus())));
       recentlyFinished.put(execId, dsFlow);
 
     } catch (ExecutorManagerException e) {

File: azkaban-exec-server/src/main/java/azkaban/execapp/event/JobCallbackManager.java
Patch:
@@ -19,6 +19,7 @@
 import org.apache.log4j.Logger;
 
 import azkaban.event.Event;
+import azkaban.event.EventData;
 import azkaban.event.EventListener;
 import azkaban.execapp.JobRunner;
 import azkaban.execapp.jmx.JmxJobCallback;
@@ -135,6 +136,7 @@ public void handleEvent(Event event) {
 
   private void processJobCallOnFinish(Event event) {
     JobRunner jobRunner = (JobRunner) event.getRunner();
+    EventData eventData = event.getData();
 
     if (!JobCallbackUtil.isThereJobCallbackProperty(jobRunner.getProps(),
         ON_COMPLETION_JOB_CALLBACK_STATUS)) {
@@ -151,7 +153,7 @@ private void processJobCallOnFinish(Event event) {
     JobCallbackStatusEnum jobCallBackStatusEnum = null;
     Logger jobLogger = jobRunner.getLogger();
 
-    Status jobStatus = jobRunner.getNode().getStatus();
+    Status jobStatus = eventData.getStatus();
 
     if (jobStatus == Status.SUCCEEDED) {
 

File: azkaban-exec-server/src/main/java/azkaban/execapp/event/JobCallbackUtil.java
Patch:
@@ -36,6 +36,7 @@
 import org.apache.log4j.Logger;
 
 import azkaban.event.Event;
+import azkaban.event.EventData;
 import azkaban.execapp.JobRunner;
 import azkaban.executor.ExecutableNode;
 import azkaban.jobcallback.JobCallbackStatusEnum;
@@ -244,6 +245,7 @@ public static Map<String, String> buildJobContextInfoMap(Event event,
     if (event.getRunner() instanceof JobRunner) {
       JobRunner jobRunner = (JobRunner) event.getRunner();
       ExecutableNode node = jobRunner.getNode();
+      EventData eventData = event.getData();
       String projectName = node.getParentFlow().getProjectName();
       String flowName = node.getParentFlow().getFlowId();
       String executionId =
@@ -256,7 +258,7 @@ public static Map<String, String> buildJobContextInfoMap(Event event,
       result.put(CONTEXT_FLOW_TOKEN, flowName);
       result.put(CONTEXT_EXECUTION_ID_TOKEN, executionId);
       result.put(CONTEXT_JOB_TOKEN, jobId);
-      result.put(CONTEXT_JOB_STATUS_TOKEN, node.getStatus().name().toLowerCase());
+      result.put(CONTEXT_JOB_STATUS_TOKEN, eventData.getStatus().name().toLowerCase());
 
       /*
        * if (node.getStatus() == Status.SUCCEEDED || node.getStatus() ==

File: azkaban-exec-server/src/main/java/azkaban/execapp/metric/NumFailedJobMetric.java
Patch:
@@ -18,6 +18,7 @@
 
 import azkaban.event.Event;
 import azkaban.event.Event.Type;
+import azkaban.event.EventData;
 import azkaban.event.EventListener;
 import azkaban.execapp.JobRunner;
 import azkaban.executor.Status;
@@ -44,8 +45,7 @@ public NumFailedJobMetric(MetricReportManager manager, long interval) throws Met
    */
   @Override
   public synchronized void handleEvent(Event event) {
-    JobRunner runner = (JobRunner) event.getRunner();
-    if (event.getType() == Type.JOB_FINISHED && runner.getStatus().equals(Status.FAILED)) {
+    if (event.getType() == Type.JOB_FINISHED && Status.FAILED.equals(event.getData().getStatus())) {
       value = value + 1;
     }
   }

File: azkaban-common/src/main/java/azkaban/trigger/TriggerManager.java
Patch:
@@ -60,7 +60,7 @@ public class TriggerManager extends EventHandler implements
   private final Object syncObj = new Object();
 
   private String scannerStage = "";
-  
+
   public TriggerManager(Props props, TriggerLoader triggerLoader,
       ExecutorManager executorManager) throws TriggerManagerException {
 
@@ -277,6 +277,7 @@ private void checkAllTriggers() throws TriggerManagerException {
             shouldSkip = false;
           }
 
+          logger.info("Get Next Check Time =" + t.getNextCheckTime() + "  now = " + now );
           if (shouldSkip) {
             logger.info("Skipping trigger" + t.getTriggerId() + " until " + t.getNextCheckTime());
           }

File: azkaban-common/src/test/java/azkaban/trigger/ConditionTest.java
Patch:
@@ -85,7 +85,7 @@ public void jsonConversionTest() throws Exception {
     // period);
     ConditionChecker timeChecker =
         new BasicTimeChecker("BasicTimeChecker_1", now.getMillis(),
-            now.getZone(), true, true, Utils.parsePeriodString(period));
+            now.getZone(), true, true, Utils.parsePeriodString(period), null);
     System.out.println("checker id is " + timeChecker.getId());
 
     checkers.put(timeChecker.getId(), timeChecker);

File: azkaban-common/src/test/java/azkaban/trigger/JdbcTriggerLoaderTest.java
Patch:
@@ -206,7 +206,7 @@ private Trigger createTrigger(String projName, String flowName, String source) {
     DateTime now = DateTime.now();
     ConditionChecker checker1 =
         new BasicTimeChecker("timeChecker1", now.getMillis(), now.getZone(),
-            true, true, Utils.parsePeriodString("1h"));
+            true, true, Utils.parsePeriodString("1h"), null);
     Map<String, ConditionChecker> checkers1 =
         new HashMap<String, ConditionChecker>();
     checkers1.put(checker1.getId(), checker1);

File: azkaban-common/src/test/java/azkaban/trigger/TriggerTest.java
Patch:
@@ -57,7 +57,7 @@ public void jsonConversionTest() throws Exception {
     DateTime now = DateTime.now();
     ConditionChecker checker1 =
         new BasicTimeChecker("timeChecker1", now.getMillis(), now.getZone(),
-            true, true, Utils.parsePeriodString("1h"));
+            true, true, Utils.parsePeriodString("1h"), null);
     Map<String, ConditionChecker> checkers1 =
         new HashMap<String, ConditionChecker>();
     checkers1.put(checker1.getId(), checker1);

File: azkaban-execserver/src/test/java/azkaban/execapp/event/BlockingStatusTest.java
Patch:
@@ -44,9 +44,9 @@ public long getDiff() {
   }
 
   /**
-   * TODO: Ignore this test at present since travis in Github can not always pass this test.
-   *       We will modify the below code to make travis pass in future.
-   */
+    * TODO: Ignore this test at present since travis in Github can not always pass this test.
+    *       We will modify the below code to make travis pass in future.
+    */
   @Ignore @Test
   public void testFinishedBlock() {
     BlockingStatus status = new BlockingStatus(1, "test", Status.SKIPPED);

File: azkaban-webserver/src/main/java/azkaban/webapp/AzkabanWebServer.java
Patch:
@@ -1065,7 +1065,7 @@ private static void loadViewerPlugins(Context root, String pluginPath,
       if (pluginClass == null) {
         logger.error("Viewer class is not set.");
       } else {
-        logger.error("Plugin class " + pluginClass);
+        logger.info("Plugin class " + pluginClass);
       }
 
       URLClassLoader urlClassLoader = null;

File: azkaban-common/src/main/java/azkaban/utils/AbstractMailer.java
Patch:
@@ -30,6 +30,7 @@ public class AbstractMailer {
   private String mailPassword;
   private String mailSender;
   private String azkabanName;
+  private String tls;
 
   private String referenceURL;
 
@@ -40,6 +41,7 @@ public AbstractMailer(Props props) {
     this.mailHost = props.getString("mail.host", "localhost");
     this.mailUser = props.getString("mail.user", "");
     this.mailPassword = props.getString("mail.password", "");
+    this.tls = props.getString("mail.tls", "false");
     long maxAttachmentSizeInMB =
         props.getInt("mail.max.attachment.size.mb", 100);
 
@@ -75,6 +77,7 @@ protected EmailMessage createEmailMessage(String subject, String mimetype,
     message.setMimeType(mimetype);
     message.setSubject(subject);
     message.setAuth(usesAuth);
+    message.setTLS(tls);
 
     return message;
   }

File: azkaban-common/src/main/java/azkaban/utils/Utils.java
Patch:
@@ -35,6 +35,7 @@
 import java.util.zip.ZipOutputStream;
 
 import org.apache.commons.io.IOUtils;
+import org.joda.time.DateTime;
 import org.joda.time.Days;
 import org.joda.time.DurationFieldType;
 import org.joda.time.Hours;
@@ -298,7 +299,7 @@ public static String formatDuration(long startTime, long endTime) {
 
     long durationMS;
     if (endTime == -1) {
-      durationMS = System.currentTimeMillis() - startTime;
+      durationMS = DateTime.now().getMillis() - startTime;
     } else {
       durationMS = endTime - startTime;
     }

File: azkaban-common/src/main/java/azkaban/utils/Utils.java
Patch:
@@ -35,6 +35,7 @@
 import java.util.zip.ZipOutputStream;
 
 import org.apache.commons.io.IOUtils;
+import org.joda.time.DateTime;
 import org.joda.time.Days;
 import org.joda.time.DurationFieldType;
 import org.joda.time.Hours;
@@ -298,7 +299,7 @@ public static String formatDuration(long startTime, long endTime) {
 
     long durationMS;
     if (endTime == -1) {
-      durationMS = System.currentTimeMillis() - startTime;
+      durationMS = DateTime.now().getMillis() - startTime;
     } else {
       durationMS = endTime - startTime;
     }

File: azkaban-webserver/src/main/java/azkaban/webapp/AzkabanWebServer.java
Patch:
@@ -1065,7 +1065,7 @@ private static void loadViewerPlugins(Context root, String pluginPath,
       if (pluginClass == null) {
         logger.error("Viewer class is not set.");
       } else {
-        logger.error("Plugin class " + pluginClass);
+        logger.info("Plugin class " + pluginClass);
       }
 
       URLClassLoader urlClassLoader = null;

File: azkaban-common/src/main/java/azkaban/project/ProjectManager.java
Patch:
@@ -579,6 +579,7 @@ private File unzipFile(File archiveFile) throws IOException {
     ZipFile zipfile = new ZipFile(archiveFile);
     File unzipped = Utils.createTempDir(tempDir);
     Utils.unzip(zipfile, unzipped);
+    zipfile.close();
 
     return unzipped;
   }

File: azkaban-common/src/main/java/azkaban/utils/AbstractMailer.java
Patch:
@@ -30,6 +30,7 @@ public class AbstractMailer {
   private String mailPassword;
   private String mailSender;
   private String azkabanName;
+  private String tls;
 
   private String referenceURL;
 
@@ -40,6 +41,7 @@ public AbstractMailer(Props props) {
     this.mailHost = props.getString("mail.host", "localhost");
     this.mailUser = props.getString("mail.user", "");
     this.mailPassword = props.getString("mail.password", "");
+    this.tls = props.getString("mail.tls", "false");
     long maxAttachmentSizeInMB =
         props.getInt("mail.max.attachment.size.mb", 100);
 
@@ -75,6 +77,7 @@ protected EmailMessage createEmailMessage(String subject, String mimetype,
     message.setMimeType(mimetype);
     message.setSubject(subject);
     message.setAuth(usesAuth);
+    message.setTLS(tls);
 
     return message;
   }

File: azkaban-webserver/src/test/java/azkaban/fixture/VelocityTemplateTestUtil.java
Patch:
@@ -10,7 +10,7 @@
  */
 public class VelocityTemplateTestUtil {
 
-  private static final String TEMPLATE_BASE_DIR = "src/main/resources/azkaban/webapp/servlet/velocity/";
+  private static final String TEMPLATE_BASE_DIR = "azkaban/webapp/servlet/velocity/";
 
   /**
    * Render a template and return the result
@@ -22,6 +22,7 @@ public class VelocityTemplateTestUtil {
   public static String renderTemplate(String templateName, VelocityContext context) {
     StringWriter stringWriter = new StringWriter();
     VelocityEngine engine = new VelocityEngine();
+    engine.init("src/test/resources/velocity.properties");
 
     engine.mergeTemplate(TEMPLATE_BASE_DIR + templateName + ".vm", "UTF-8", context, stringWriter);
     return stringWriter.getBuffer().toString();

File: azkaban-common/src/main/java/azkaban/project/ProjectManager.java
Patch:
@@ -579,6 +579,7 @@ private File unzipFile(File archiveFile) throws IOException {
     ZipFile zipfile = new ZipFile(archiveFile);
     File unzipped = Utils.createTempDir(tempDir);
     Utils.unzip(zipfile, unzipped);
+    zipfile.close();
 
     return unzipped;
   }

File: azkaban-execserver/src/main/java/azkaban/execapp/AzkabanExecutorServer.java
Patch:
@@ -321,9 +321,7 @@ public static void main(String[] args) throws Exception {
     // Setup time zone
     if (azkabanSettings.containsKey(DEFAULT_TIMEZONE_ID)) {
       String timezone = azkabanSettings.getString(DEFAULT_TIMEZONE_ID);
-      System.setProperty("user.timezone", timezone);
-      TimeZone.setDefault(TimeZone.getTimeZone(timezone));
-      DateTimeZone.setDefault(DateTimeZone.forID(timezone));
+      Utils.setTimeZone(timezone);
 
       logger.info("Setting timezone to " + timezone);
     }

File: azkaban-common/src/main/java/azkaban/jobtype/JobTypeManager.java
Patch:
@@ -358,8 +358,8 @@ public Job buildJobExecutor(String jobId, Props jobProps, Logger logger)
         // pluginSet.getCommonPluginLoadProps() will return null if there is no plugins directory.
         // hence assigning default Props() if that's the case
         pluginLoadProps = pluginSet.getCommonPluginLoadProps();
-        if(pluginJobProps == null)
-          pluginJobProps = new Props();
+        if(pluginLoadProps == null)
+        	pluginLoadProps = new Props();
       }
 
       job =

File: azkaban-common/src/main/java/azkaban/jobtype/JobTypeManager.java
Patch:
@@ -358,8 +358,8 @@ public Job buildJobExecutor(String jobId, Props jobProps, Logger logger)
         // pluginSet.getCommonPluginLoadProps() will return null if there is no plugins directory.
         // hence assigning default Props() if that's the case
         pluginLoadProps = pluginSet.getCommonPluginLoadProps();
-        if(pluginJobProps == null)
-          pluginJobProps = new Props();
+        if(pluginLoadProps == null)
+        	pluginLoadProps = new Props();
       }
 
       job =

File: azkaban-common/src/main/java/azkaban/jobtype/JobTypeManager.java
Patch:
@@ -200,14 +200,14 @@ private void loadJobTypes(File pluginDir, JobTypePluginSet plugins)
       }
 
       pluginLoadProps = new Props(commonPluginLoadProps, pluginLoadPropsFile);
+      pluginLoadProps.put("plugin.dir", pluginDir.getAbsolutePath());
       pluginLoadProps = PropsUtils.resolveProps(pluginLoadProps);
     } catch (Exception e) {
       logger.error("pluginLoadProps to help with debugging: " + pluginLoadProps);
       throw new JobTypeManagerException("Failed to get jobtype properties"
           + e.getMessage(), e);
     }
     // Add properties into the plugin set
-    pluginLoadProps.put("plugin.dir", pluginDir.getAbsolutePath());
     plugins.addPluginLoadProps(jobTypeName, pluginLoadProps);
     if (pluginJobProps != null) {
       plugins.addPluginJobProps(jobTypeName, pluginJobProps);

File: azkaban-common/src/test/java/azkaban/utils/TestUtils.java
Patch:
@@ -33,7 +33,7 @@
 public class TestUtils {
   /* Base  resource direcotyr for unit tests */
   private static final String UNIT_RESOURCE_DIR =
-      "../azkaban-test/src/test/resources";
+      "../azkaban-test/src/test/resources/azkaban/test";
   /* Directory with serialized description of test flows */
   private static final String UNIT_EXECUTION_DIR =
       UNIT_RESOURCE_DIR + "/executions";

File: azkaban-execserver/src/main/java/azkaban/execapp/ServerStatisticsServlet.java
Patch:
@@ -168,7 +168,7 @@ private Long extractMemoryInfo(String field, String result) {
         returnResult = Long.parseLong(result.split("\\s+")[1]);
         logger.debug(field + ":" + returnResult);
       } catch (NumberFormatException e) {
-        returnResult = 0l;
+        returnResult = 0L;
         logger.error(String.format("yielding 0 for %s as output is invalid - %s", field, result));
       }
     }

File: azkaban-common/src/main/java/azkaban/jobExecutor/JavaProcessJob.java
Patch:
@@ -22,8 +22,8 @@
 
 import org.apache.log4j.Logger;
 
+import azkaban.project.DirectoryFlowLoader;
 import azkaban.server.AzkabanServer;
-import azkaban.utils.DirectoryFlowLoader;
 import azkaban.utils.Pair;
 import azkaban.utils.Props;
 import azkaban.utils.Utils;

File: azkaban-common/src/main/java/azkaban/project/ProjectManager.java
Patch:
@@ -32,6 +32,7 @@
 import org.apache.log4j.Logger;
 
 import azkaban.flow.Flow;
+import azkaban.project.DirectoryFlowLoader;
 import azkaban.project.ProjectLogEvent.EventType;
 import azkaban.project.ProjectWhitelist.WhitelistType;
 import azkaban.project.validator.ValidationReport;
@@ -42,7 +43,6 @@
 import azkaban.user.Permission;
 import azkaban.user.Permission.Type;
 import azkaban.user.User;
-import azkaban.utils.DirectoryFlowLoader;
 import azkaban.utils.Props;
 import azkaban.utils.Utils;
 

File: azkaban-common/src/main/java/azkaban/project/validator/XmlValidatorManager.java
Patch:
@@ -24,7 +24,7 @@
 import org.xml.sax.SAXException;
 
 import azkaban.project.Project;
-import azkaban.utils.DirectoryFlowLoader;
+import azkaban.project.DirectoryFlowLoader;
 import azkaban.utils.Props;
 
 /**

File: azkaban-common/src/test/java/azkaban/executor/ExecutableFlowTest.java
Patch:
@@ -33,8 +33,8 @@
 
 import azkaban.executor.ExecutionOptions.FailureAction;
 import azkaban.flow.Flow;
+import azkaban.project.DirectoryFlowLoader;
 import azkaban.project.Project;
-import azkaban.utils.DirectoryFlowLoader;
 import azkaban.utils.JSONUtils;
 import azkaban.utils.Props;
 

File: azkaban-common/src/test/java/azkaban/project/DirectoryFlowLoaderTest.java
Patch:
@@ -14,17 +14,17 @@
  * the License.
  */
 
-package azkaban.utils;
+package azkaban.project;
 
 import java.io.File;
 
+import azkaban.utils.Props;
+
 import org.apache.log4j.Logger;
 import org.junit.Assert;
 import org.junit.Ignore;
 import org.junit.Test;
 
-import azkaban.project.Project;
-
 public class DirectoryFlowLoaderTest {
 
   Project project = new Project(11, "myTestProject");

File: azkaban-common/src/test/java/azkaban/utils/cache/CacheTest.java
Patch:
@@ -17,12 +17,13 @@
 package azkaban.utils.cache;
 
 import org.junit.Assert;
+import org.junit.Ignore;
 import org.junit.Test;
 
 import azkaban.utils.cache.Cache.EjectionPolicy;
 
 public class CacheTest {
-  @Test
+  @Ignore @Test
   public void testLRU() {
     CacheManager manager = CacheManager.getInstance();
     Cache cache = manager.createCache();

File: azkaban-execserver/src/test/java/azkaban/execapp/FlowRunnerPipelineTest.java
Patch:
@@ -43,11 +43,11 @@
 import azkaban.flow.Flow;
 import azkaban.jobtype.JobTypeManager;
 import azkaban.jobtype.JobTypePluginSet;
+import azkaban.project.DirectoryFlowLoader;
 import azkaban.project.Project;
 import azkaban.project.ProjectLoader;
 import azkaban.project.ProjectManagerException;
 import azkaban.project.MockProjectLoader;
-import azkaban.utils.DirectoryFlowLoader;
 import azkaban.utils.Props;
 
 /**

File: azkaban-execserver/src/test/java/azkaban/execapp/FlowRunnerPropertyResolutionTest.java
Patch:
@@ -39,11 +39,11 @@
 import azkaban.executor.MockExecutorLoader;
 import azkaban.flow.Flow;
 import azkaban.jobtype.JobTypeManager;
+import azkaban.project.DirectoryFlowLoader;
 import azkaban.project.Project;
 import azkaban.project.ProjectLoader;
 import azkaban.project.ProjectManagerException;
 import azkaban.project.MockProjectLoader;
-import azkaban.utils.DirectoryFlowLoader;
 import azkaban.utils.Props;
 
 /**

File: azkaban-execserver/src/test/java/azkaban/execapp/FlowRunnerTest2.java
Patch:
@@ -42,11 +42,11 @@
 import azkaban.flow.Flow;
 import azkaban.jobtype.JobTypeManager;
 import azkaban.jobtype.JobTypePluginSet;
+import azkaban.project.DirectoryFlowLoader;
 import azkaban.project.Project;
 import azkaban.project.ProjectLoader;
 import azkaban.project.ProjectManagerException;
 import azkaban.project.MockProjectLoader;
-import azkaban.utils.DirectoryFlowLoader;
 import azkaban.utils.Props;
 
 /**

File: azkaban-common/src/main/java/azkaban/executor/ExecutorManager.java
Patch:
@@ -454,7 +454,8 @@ private void loadQueuedFlows() throws ExecutorManagerException {
 
   /**
    * Gets a list of all the active (running flows and non-dispatched flows)
-   * executions for a given project and flow {@inheritDoc}
+   * executions for a given project and flow {@inheritDoc}. Results should
+   * be sorted as we assume this while setting up pipelined execution Id.
    *
    * @see azkaban.executor.ExecutorManagerAdapter#getRunningFlows(int,
    *      java.lang.String)
@@ -466,6 +467,7 @@ public List<Integer> getRunningFlows(int projectId, String flowId) {
       queuedFlows.getAllEntries()));
     executionIds.addAll(getRunningFlowsHelper(projectId, flowId,
       runningFlows.values()));
+    Collections.sort(executionIds);
     return executionIds;
   }
 

File: azkaban-common/src/main/java/azkaban/executor/ExecutorManager.java
Patch:
@@ -74,7 +74,7 @@ public class ExecutorManager extends EventHandler implements
   private ExecutingManagerUpdaterThread executingManager;
 
   private static final long DEFAULT_EXECUTION_LOGS_RETENTION_MS = 3 * 4 * 7
-      * 24 * 60 * 60 * 1000l;
+      * 24 * 60 * 60 * 1000L;
   private long lastCleanerThreadCheckTime = -1;
 
   private long lastThreadCheckTime = -1;

File: azkaban-common/src/main/java/azkaban/executor/JdbcExecutorLoader.java
Patch:
@@ -101,7 +101,7 @@ private synchronized void uploadExecutableFlow(Connection connection,
           runner.query(connection, LastInsertID.LAST_INSERT_ID,
               new LastInsertID());
 
-      if (id == -1l) {
+      if (id == -1L) {
         throw new ExecutorManagerException(
             "Execution id is not properly created.");
       }
@@ -779,7 +779,7 @@ private static class LastInsertID implements ResultSetHandler<Long> {
     @Override
     public Long handle(ResultSet rs) throws SQLException {
       if (!rs.next()) {
-        return -1l;
+        return -1L;
       }
       long id = rs.getLong(1);
       return id;

File: azkaban-common/src/main/java/azkaban/project/ProjectManager.java
Patch:
@@ -269,7 +269,7 @@ public Project createProject(String projectName, String description,
           "Project names must start with a letter, followed by any number of letters, digits, '-' or '_'.");
     }
 
-    if (projectsByName.contains(projectName)) {
+    if (projectsByName.containsKey(projectName)) {
       throw new ProjectManagerException("Project already exists.");
     }
 

File: azkaban-common/src/main/java/azkaban/server/session/SessionCache.java
Patch:
@@ -58,7 +58,7 @@ public SessionCache(Props props) {
    * @return
    */
   public Session getSession(String sessionId) {
-    Session elem = cache.<Session> get(sessionId);
+    Session elem = cache.get(Session.class, sessionId);
 
     return elem;
   }

File: azkaban-common/src/main/java/azkaban/trigger/JdbcTriggerLoader.java
Patch:
@@ -178,7 +178,7 @@ private synchronized void addTrigger(Connection connection, Trigger t,
           runner.query(connection, LastInsertID.LAST_INSERT_ID,
               new LastInsertID());
 
-      if (id == -1l) {
+      if (id == -1L) {
         logger.error("trigger id is not properly created.");
         throw new TriggerLoaderException("trigger id is not properly created.");
       }
@@ -257,7 +257,7 @@ private static class LastInsertID implements ResultSetHandler<Long> {
     @Override
     public Long handle(ResultSet rs) throws SQLException {
       if (!rs.next()) {
-        return -1l;
+        return -1L;
       }
 
       long id = rs.getLong(1);

File: azkaban-common/src/main/java/azkaban/utils/TypedMapWrapper.java
Patch:
@@ -71,7 +71,7 @@ public Integer getInt(K key, Integer defaultVal) {
   }
 
   public Long getLong(K key) {
-    return getLong(key, -1l);
+    return getLong(key, -1L);
   }
 
   public Long getLong(K key, Long defaultVal) {

File: azkaban-common/src/test/java/azkaban/executor/JavaJobRunnerMain.java
Patch:
@@ -196,7 +196,7 @@ private void outputGeneratedProperties(Props outputProperties) {
       }
       writer.write("}".getBytes());
     } catch (Exception e) {
-      new RuntimeException("Unable to store output properties to: "
+      throw new RuntimeException("Unable to store output properties to: "
           + outputFileStr);
     } finally {
       try {

File: azkaban-common/src/test/java/azkaban/jobExecutor/PythonJobTest.java
Patch:
@@ -24,6 +24,7 @@
 import org.junit.AfterClass;
 import org.junit.Assert;
 import org.junit.BeforeClass;
+import org.junit.Ignore;
 import org.junit.Test;
 
 import azkaban.utils.Props;
@@ -82,6 +83,7 @@ public static void cleanup() {
     Utils.removeFile(scriptFile);
   }
 
+  @Ignore("Test appears to hang.")
   @Test
   public void testPythonJob() {
 

File: azkaban-common/src/test/java/azkaban/project/ProjectTest.java
Patch:
@@ -28,8 +28,8 @@ public class ProjectTest {
   @Test
   public void testToAndFromObject() throws Exception {
     Project project = new Project(1, "tesTing");
-    project.setCreateTimestamp(1l);
-    project.setLastModifiedTimestamp(2l);
+    project.setCreateTimestamp(1L);
+    project.setLastModifiedTimestamp(2L);
     project.setDescription("I am a test");
     project.setUserPermission("user1", new Permission(new Type[] { Type.ADMIN,
         Type.EXECUTE }));

File: azkaban-common/src/main/java/azkaban/executor/ExecutorManager.java
Patch:
@@ -74,7 +74,7 @@ public class ExecutorManager extends EventHandler implements
   private ExecutingManagerUpdaterThread executingManager;
 
   private static final long DEFAULT_EXECUTION_LOGS_RETENTION_MS = 3 * 4 * 7
-      * 24 * 60 * 60 * 1000l;
+      * 24 * 60 * 60 * 1000L;
   private long lastCleanerThreadCheckTime = -1;
 
   private long lastThreadCheckTime = -1;

File: azkaban-common/src/main/java/azkaban/executor/JdbcExecutorLoader.java
Patch:
@@ -101,7 +101,7 @@ private synchronized void uploadExecutableFlow(Connection connection,
           runner.query(connection, LastInsertID.LAST_INSERT_ID,
               new LastInsertID());
 
-      if (id == -1l) {
+      if (id == -1L) {
         throw new ExecutorManagerException(
             "Execution id is not properly created.");
       }
@@ -779,7 +779,7 @@ private static class LastInsertID implements ResultSetHandler<Long> {
     @Override
     public Long handle(ResultSet rs) throws SQLException {
       if (!rs.next()) {
-        return -1l;
+        return -1L;
       }
       long id = rs.getLong(1);
       return id;

File: azkaban-common/src/main/java/azkaban/project/ProjectManager.java
Patch:
@@ -269,7 +269,7 @@ public Project createProject(String projectName, String description,
           "Project names must start with a letter, followed by any number of letters, digits, '-' or '_'.");
     }
 
-    if (projectsByName.contains(projectName)) {
+    if (projectsByName.containsKey(projectName)) {
       throw new ProjectManagerException("Project already exists.");
     }
 

File: azkaban-common/src/main/java/azkaban/server/session/SessionCache.java
Patch:
@@ -58,7 +58,7 @@ public SessionCache(Props props) {
    * @return
    */
   public Session getSession(String sessionId) {
-    Session elem = cache.<Session> get(sessionId);
+    Session elem = cache.get(Session.class, sessionId);
 
     return elem;
   }

File: azkaban-common/src/main/java/azkaban/trigger/JdbcTriggerLoader.java
Patch:
@@ -178,7 +178,7 @@ private synchronized void addTrigger(Connection connection, Trigger t,
           runner.query(connection, LastInsertID.LAST_INSERT_ID,
               new LastInsertID());
 
-      if (id == -1l) {
+      if (id == -1L) {
         logger.error("trigger id is not properly created.");
         throw new TriggerLoaderException("trigger id is not properly created.");
       }
@@ -257,7 +257,7 @@ private static class LastInsertID implements ResultSetHandler<Long> {
     @Override
     public Long handle(ResultSet rs) throws SQLException {
       if (!rs.next()) {
-        return -1l;
+        return -1L;
       }
 
       long id = rs.getLong(1);

File: azkaban-common/src/main/java/azkaban/utils/TypedMapWrapper.java
Patch:
@@ -71,7 +71,7 @@ public Integer getInt(K key, Integer defaultVal) {
   }
 
   public Long getLong(K key) {
-    return getLong(key, -1l);
+    return getLong(key, -1L);
   }
 
   public Long getLong(K key, Long defaultVal) {

File: azkaban-common/src/test/java/azkaban/executor/JavaJobRunnerMain.java
Patch:
@@ -196,7 +196,7 @@ private void outputGeneratedProperties(Props outputProperties) {
       }
       writer.write("}".getBytes());
     } catch (Exception e) {
-      new RuntimeException("Unable to store output properties to: "
+      throw new RuntimeException("Unable to store output properties to: "
           + outputFileStr);
     } finally {
       try {

File: azkaban-common/src/test/java/azkaban/jobExecutor/PythonJobTest.java
Patch:
@@ -24,6 +24,7 @@
 import org.junit.AfterClass;
 import org.junit.Assert;
 import org.junit.BeforeClass;
+import org.junit.Ignore;
 import org.junit.Test;
 
 import azkaban.utils.Props;
@@ -82,6 +83,7 @@ public static void cleanup() {
     Utils.removeFile(scriptFile);
   }
 
+  @Ignore("Test appears to hang.")
   @Test
   public void testPythonJob() {
 

File: azkaban-common/src/test/java/azkaban/project/ProjectTest.java
Patch:
@@ -28,8 +28,8 @@ public class ProjectTest {
   @Test
   public void testToAndFromObject() throws Exception {
     Project project = new Project(1, "tesTing");
-    project.setCreateTimestamp(1l);
-    project.setLastModifiedTimestamp(2l);
+    project.setCreateTimestamp(1L);
+    project.setLastModifiedTimestamp(2L);
     project.setDescription("I am a test");
     project.setUserPermission("user1", new Permission(new Type[] { Type.ADMIN,
         Type.EXECUTE }));

File: azkaban-common/src/main/java/azkaban/executor/selector/ExecutorFilter.java
Patch:
@@ -42,7 +42,7 @@ public static Set<String> getAvailableFilterNames(){
 
   // factor filter names.
   private static final String STATICREMAININGFLOWSIZE_FILTER_NAME = "StaticRemainingFlowSize";
-  private static final String MINIMUMFREEMEMORY_FILTER_NAME = "MinimunFreeMemory";
+  private static final String MINIMUMFREEMEMORY_FILTER_NAME = "MinimumFreeMemory";
   private static final String CPUSTATUS_FILTER_NAME = "CpuStatus";
 
   /**<pre>

File: azkaban-common/src/main/java/azkaban/executor/selector/ExecutorFilter.java
Patch:
@@ -42,7 +42,7 @@ public static Set<String> getAvailableFilterNames(){
 
   // factor filter names.
   private static final String STATICREMAININGFLOWSIZE_FILTER_NAME = "StaticRemainingFlowSize";
-  private static final String MINIMUMFREEMEMORY_FILTER_NAME = "MinimunFreeMemory";
+  private static final String MINIMUMFREEMEMORY_FILTER_NAME = "MinimumFreeMemory";
   private static final String CPUSTATUS_FILTER_NAME = "CpuStatus";
 
   /**<pre>

File: azkaban-common/src/main/java/azkaban/executor/selector/ExecutorFilter.java
Patch:
@@ -42,7 +42,7 @@ public static Set<String> getAvailableFilterNames(){
 
   // factor filter names.
   private static final String STATICREMAININGFLOWSIZE_FILTER_NAME = "StaticRemainingFlowSize";
-  private static final String MINIMUMFREEMEMORY_FILTER_NAME = "MinimunFreeMemory";
+  private static final String MINIMUMFREEMEMORY_FILTER_NAME = "MinimumFreeMemory";
   private static final String CPUSTATUS_FILTER_NAME = "CpuStatus";
 
   /**<pre>

File: azkaban-common/src/main/java/azkaban/executor/selector/ExecutorComparator.java
Patch:
@@ -122,22 +122,22 @@ private static boolean statisticsObjectCheck(ExecutorInfo statisticsObj1,
     result = 0 ;
     // both doesn't expose the info
     if (null == statisticsObj1 && null == statisticsObj2){
-      logger.info(String.format("%s : neither of the executors exposed statistics info.",
+      logger.debug(String.format("%s : neither of the executors exposed statistics info.",
           caller));
       return true;
     }
 
     //right side doesn't expose the info.
     if (null == statisticsObj2 ){
-        logger.info(String.format("%s : choosing left side and the right side executor doesn't expose statistics info",
+        logger.debug(String.format("%s : choosing left side and the right side executor doesn't expose statistics info",
             caller));
         result = 1;
         return true;
     }
 
     //left side doesn't expose the info.
     if (null == statisticsObj1 ){
-      logger.info(String.format("%s : choosing right side and the left side executor doesn't expose statistics info",
+      logger.debug(String.format("%s : choosing right side and the left side executor doesn't expose statistics info",
           caller));
       result = -1;
       return true;

File: azkaban-execserver/src/main/java/azkaban/execapp/AzkabanExecutorServer.java
Patch:
@@ -132,7 +132,7 @@ public AzkabanExecutorServer(Props props) throws Exception {
     root.addServlet(new ServletHolder(new ExecutorServlet()), "/executor");
     root.addServlet(new ServletHolder(new JMXHttpServlet()), "/jmx");
     root.addServlet(new ServletHolder(new StatsServlet()), "/stats");
-    root.addServlet(new ServletHolder(new ServerStatisticsServlet()), "/serverstastics");
+    root.addServlet(new ServletHolder(new ServerStatisticsServlet()), "/serverstatistics");
 
     root.setAttribute(ServerConstants.AZKABAN_SERVLET_CONTEXT_KEY, this);
 

File: azkaban-common/src/main/java/azkaban/utils/PropsUtils.java
Patch:
@@ -292,6 +292,7 @@ public static Props addCommonFlowProperties(Props parentProps,
     props.put(CommonJobProperties.FLOW_UUID, UUID.randomUUID().toString());
     props.put(CommonJobProperties.PROJECT_LAST_CHANGED_BY, flow.getLastModifiedByUser());
     props.put(CommonJobProperties.PROJECT_LAST_CHANGED_DATE, flow.getLastModifiedTimestamp());
+    props.put(CommonJobProperties.SUBMIT_USER, flow.getExecutableFlow().getSubmitUser());  
 
     DateTime loadTime = new DateTime();
 

File: azkaban-common/src/main/java/azkaban/executor/selector/ExecutorSelector.java
Patch:
@@ -16,7 +16,7 @@
 
 package azkaban.executor.selector;
 
-import java.util.List;
+import java.util.Collection;
 import java.util.Map;
 
 import azkaban.executor.ExecutableFlow;
@@ -38,7 +38,7 @@ public class ExecutorSelector extends CandidateSelector<Executor, ExecutableFlow
    * @param comparatorList  name/weight pair list of the comparators to be registered ,
    *                        again comparator feature is disabled if a null value is passed.
    * */
-  public ExecutorSelector(List<String> filterList, Map<String,Integer> comparatorList) {
+  public ExecutorSelector(Collection<String> filterList, Map<String,Integer> comparatorList) {
     super(null == filterList || filterList.isEmpty() ?         null : new ExecutorFilter(filterList),
           null == comparatorList || comparatorList.isEmpty() ? null : new ExecutorComparator(comparatorList));
   }

File: azkaban-common/src/main/java/azkaban/executor/selector/Selector.java
Patch:
@@ -16,7 +16,7 @@
 
 package azkaban.executor.selector;
 
-import java.util.List;
+import java.util.Collection;
 
 
 /**<pre>
@@ -34,7 +34,7 @@ public interface Selector <K extends Comparable<K>,V> {
    *  @param  dispatchingObject : the object to be dispatched .
    *  @return candidate from the candidate list that suits best for the dispatching object.
    * */
-  public K getBest(List<K> candidateList, V dispatchingObject);
+  public K getBest(Collection<K> candidateList, V dispatchingObject);
 
   /** Function returns the name of the current Dispatcher
    *  @return name of the dispatcher.

File: azkaban-common/src/main/java/azkaban/jobtype/JobTypeManager.java
Patch:
@@ -340,6 +340,7 @@ public Job buildJobExecutor(String jobId, Props jobProps, Logger logger)
             jobProps, jobType));
       }
 
+      // TODO: should the logic below mirror the logic for PluginLoadProps?
       Props pluginJobProps = pluginSet.getPluginJobProps(jobType);
       if (pluginJobProps != null) {
         for (String k : pluginJobProps.getKeySet()) {
@@ -354,7 +355,7 @@ public Job buildJobExecutor(String jobId, Props jobProps, Logger logger)
       if (pluginLoadProps != null) {
         pluginLoadProps = PropsUtils.resolveProps(pluginLoadProps);
       } else {
-        pluginLoadProps = new Props();
+        pluginLoadProps = pluginSet.getCommonPluginLoadProps();
       }
 
       job =

File: azkaban-common/src/main/java/azkaban/executor/selector/ExecutorSelector.java
Patch:
@@ -16,7 +16,7 @@
 
 package azkaban.executor.selector;
 
-import java.util.List;
+import java.util.Collection;
 import java.util.Map;
 
 import azkaban.executor.ExecutableFlow;
@@ -38,7 +38,7 @@ public class ExecutorSelector extends CandidateSelector<Executor, ExecutableFlow
    * @param comparatorList  name/weight pair list of the comparators to be registered ,
    *                        again comparator feature is disabled if a null value is passed.
    * */
-  public ExecutorSelector(List<String> filterList, Map<String,Integer> comparatorList) {
+  public ExecutorSelector(Collection<String> filterList, Map<String,Integer> comparatorList) {
     super(null == filterList || filterList.isEmpty() ?         null : new ExecutorFilter(filterList),
           null == comparatorList || comparatorList.isEmpty() ? null : new ExecutorComparator(comparatorList));
   }

File: azkaban-common/src/main/java/azkaban/executor/selector/Selector.java
Patch:
@@ -16,7 +16,7 @@
 
 package azkaban.executor.selector;
 
-import java.util.List;
+import java.util.Collection;
 
 
 /**<pre>
@@ -34,7 +34,7 @@ public interface Selector <K extends Comparable<K>,V> {
    *  @param  dispatchingObject : the object to be dispatched .
    *  @return candidate from the candidate list that suits best for the dispatching object.
    * */
-  public K getBest(List<K> candidateList, V dispatchingObject);
+  public K getBest(Collection<K> candidateList, V dispatchingObject);
 
   /** Function returns the name of the current Dispatcher
    *  @return name of the dispatcher.

File: azkaban-common/src/main/java/azkaban/executor/selector/ExecutorSelector.java
Patch:
@@ -16,7 +16,7 @@
 
 package azkaban.executor.selector;
 
-import java.util.List;
+import java.util.Collection;
 import java.util.Map;
 
 import azkaban.executor.ExecutableFlow;
@@ -38,7 +38,7 @@ public class ExecutorSelector extends CandidateSelector<Executor, ExecutableFlow
    * @param comparatorList  name/weight pair list of the comparators to be registered ,
    *                        again comparator feature is disabled if a null value is passed.
    * */
-  public ExecutorSelector(List<String> filterList, Map<String,Integer> comparatorList) {
+  public ExecutorSelector(Collection<String> filterList, Map<String,Integer> comparatorList) {
     super(null == filterList || filterList.isEmpty() ?         null : new ExecutorFilter(filterList),
           null == comparatorList || comparatorList.isEmpty() ? null : new ExecutorComparator(comparatorList));
   }

File: azkaban-common/src/main/java/azkaban/executor/selector/Selector.java
Patch:
@@ -16,7 +16,7 @@
 
 package azkaban.executor.selector;
 
-import java.util.List;
+import java.util.Collection;
 
 
 /**<pre>
@@ -34,7 +34,7 @@ public interface Selector <K extends Comparable<K>,V> {
    *  @param  dispatchingObject : the object to be dispatched .
    *  @return candidate from the candidate list that suits best for the dispatching object.
    * */
-  public K getBest(List<K> candidateList, V dispatchingObject);
+  public K getBest(Collection<K> candidateList, V dispatchingObject);
 
   /** Function returns the name of the current Dispatcher
    *  @return name of the dispatcher.

File: azkaban-common/src/main/java/azkaban/executor/Executor.java
Patch:
@@ -30,7 +30,7 @@ public class Executor implements Comparable<Executor> {
   private final int port;
   private boolean isActive;
   // cached copy of the latest statistics from  the executor.
-  private ServerStatistics cachedExecutorStats;
+  private ExecutorInfo cachedExecutorStats;
   private Date lastStatsUpdatedTime;
 
   /**
@@ -113,11 +113,11 @@ public int getId() {
     return id;
   }
 
-  public ServerStatistics getExecutorStats() {
+  public ExecutorInfo getExecutorStats() {
     return this.cachedExecutorStats;
   }
 
-  public void setExecutorStats(ServerStatistics stats) {
+  public void setExecutorStats(ExecutorInfo stats) {
     this.cachedExecutorStats = stats;
     this.lastStatsUpdatedTime = new Date();
   }

File: azkaban-execserver/src/main/java/azkaban/execapp/FlowRunnerManager.java
Patch:
@@ -144,7 +144,7 @@ public class FlowRunnerManager implements EventListener,
   private Object executionDirDeletionSync = new Object();
 
   // date time of the the last flow submitted.
-  private Date lastFlowSubmittedDate = null;
+  private long lastFlowSubmittedDate = 0;
 
   public FlowRunnerManager(Props props, ExecutorLoader executorLoader,
       ProjectLoader projectLoader, ClassLoader parentClassLoader)
@@ -258,7 +258,7 @@ public boolean accept(File dir, String name) {
     return allProjects;
   }
 
-  public Date getLastFlowSubmittedTime(){
+  public long getLastFlowSubmittedTime(){
     // Note: this is not thread safe and may result in providing dirty data.
     //       we will provide this data as is for now and will revisit if there
     //       is a string justification for change.
@@ -519,7 +519,7 @@ public void submitFlow(int execId) throws ExecutorManagerException {
       // keep track of this future
       submittedFlows.put(future, runner.getExecutionId());
       // update the last submitted time.
-      this.lastFlowSubmittedDate = new Date();
+      this.lastFlowSubmittedDate = System.currentTimeMillis();
     } catch (RejectedExecutionException re) {
       throw new ExecutorManagerException(
           "Azkaban server can't execute any more flows. "

File: azkaban-common/src/main/java/azkaban/executor/selector/FactorComparator.java
Patch:
@@ -33,13 +33,12 @@ public final class FactorComparator<T>{
    *  method provided below.
    * @param factorName : the factor name .
    * @param weight : the weight of the comparator.
-   * @ comparator : function to be provided by user on how the comparison should be made.
+   * @param comparator : function to be provided by user on how the comparison should be made.
    * */
   private FactorComparator(String factorName, int weight, Comparator<T> comparator){
     this.factorName = factorName;
     this.weight = weight;
     this.comparator = comparator;
-    logger.info("comparator created for " + this.factorName);
   }
 
   /** static function to generate an instance of the class.

File: azkaban-common/src/main/java/azkaban/executor/selector/FactorFilter.java
Patch:
@@ -36,7 +36,6 @@ public final class FactorFilter<T,V>{
   private FactorFilter(String factorName, Filter<T,V> filter){
     this.factorName = factorName;
     this.filter = filter;
-    logger.info("filter created for " + this.factorName);
   }
 
   /** static function to generate an instance of the class.
@@ -66,8 +65,8 @@ public boolean filterTarget(T filteringTarget, V referencingObject){
   public interface Filter<T,V>{
 
     /**function to analyze the target item according to the reference object to decide whether the item should be filtered.
-     * @param filteringTarget:   object to be checked.
-     * @param referencingObject: object which contains statistics based on which a decision is made whether
+     * @param filteringTarget   object to be checked.
+     * @param referencingObject object which contains statistics based on which a decision is made whether
      *                      the object being checked need to be filtered or not.
      * @return true if the check passed, false if check failed, which means the item need to be filtered.
      * */

File: azkaban-common/src/test/java/azkaban/utils/cache/CacheTest.java
Patch:
@@ -84,9 +84,9 @@ public void testFIFO() {
 
   @Test
   public void testTimeToLiveExpiry() {
-    CacheManager.setUpdateFrequency(200);
     CacheManager manager = CacheManager.getInstance();
     Cache cache = manager.createCache();
+    CacheManager.setUpdateFrequency(200);
 
     cache.setUpdateFrequencyMs(200);
     cache.setEjectionPolicy(EjectionPolicy.FIFO);
@@ -122,9 +122,9 @@ public void testTimeToLiveExpiry() {
 
   @Test
   public void testIdleExpireExpiry() {
-    CacheManager.setUpdateFrequency(250);
     CacheManager manager = CacheManager.getInstance();
     Cache cache = manager.createCache();
+    CacheManager.setUpdateFrequency(250);
 
     cache.setUpdateFrequencyMs(250);
     cache.setEjectionPolicy(EjectionPolicy.FIFO);

File: azkaban-execserver/src/main/java/azkaban/execapp/FlowRunnerManager.java
Patch:
@@ -144,7 +144,7 @@ public class FlowRunnerManager implements EventListener,
   private Object executionDirDeletionSync = new Object();
 
   // date time of the the last flow submitted.
-  private Date lastFlowSubmitted = null;
+  private Date lastFlowSubmittedDate = null;
 
   public FlowRunnerManager(Props props, ExecutorLoader executorLoader,
       ProjectLoader projectLoader, ClassLoader parentClassLoader)
@@ -262,7 +262,7 @@ public Date getLastFlowSubmittedTime(){
     // Note: this is not thread safe and may result in providing dirty data.
     //       we will provide this data as is for now and will revisit if there
     //       is a string justification for change.
-    return lastFlowSubmitted;
+    return lastFlowSubmittedDate;
   }
 
   public Props getGlobalProps() {
@@ -519,7 +519,7 @@ public void submitFlow(int execId) throws ExecutorManagerException {
       // keep track of this future
       submittedFlows.put(future, runner.getExecutionId());
       // update the last submitted time.
-      this.lastFlowSubmitted = new Date();
+      this.lastFlowSubmittedDate = new Date();
     } catch (RejectedExecutionException re) {
       throw new ExecutorManagerException(
           "Azkaban server can't execute any more flows. "

File: azkaban-common/src/main/java/azkaban/trigger/Condition.java
Patch:
@@ -25,7 +25,6 @@
 import org.apache.commons.jexl2.JexlEngine;
 import org.apache.commons.jexl2.MapContext;
 import org.apache.log4j.Logger;
-
 import org.joda.time.DateTime;
 
 public class Condition {
@@ -119,7 +118,9 @@ public void setExpression(String expr) {
   }
 
   public boolean isMet() {
-    logger.info("Testing condition " + expression);
+    if (logger.isDebugEnabled()) {
+      logger.debug("Testing condition " + expression);
+    }
     return expression.evaluate(context).equals(Boolean.TRUE);
   }
 

File: azkaban-common/src/main/java/azkaban/trigger/TriggerManager.java
Patch:
@@ -281,7 +281,9 @@ private void checkAllTriggers() throws TriggerManagerException {
             logger.info("Skipping trigger" + t.getTriggerId() + " until " + t.getNextCheckTime());
           }
 
-          logger.info("Checking trigger " + t.getTriggerId());
+          if (logger.isDebugEnabled()) {
+            logger.info("Checking trigger " + t.getTriggerId());
+          }
           if (t.getStatus().equals(TriggerStatus.READY)) {
             if (t.triggerConditionMet()) {
               onTriggerTrigger(t);

File: azkaban-common/src/test/java/azkaban/executor/JdbcExecutorLoaderTest.java
Patch:
@@ -144,7 +144,7 @@ public static void setupDB() {
   }
 
   @After
-  public static void clearDB() {
+  public void clearDB() {
     if (!testDBExists) {
       return;
     }

File: azkaban-common/src/main/java/azkaban/jobExecutor/JavaProcessJob.java
Patch:
@@ -172,10 +172,10 @@ protected Pair<Long, Long> getProcMemoryRequirement() throws Exception {
 
       if (xmx > sizeMaxXmx) {
         throw new Exception(String.format("%s: Xmx value has exceeded the allowed limit (max Xmx = %s)",
-                getId(), maxXms));
+                getId(), maxXmx));
       }
     }
 
     return new Pair<Long, Long>(xms, xmx);
   }
-}
\ No newline at end of file
+}

File: azkaban-common/src/main/java/azkaban/jobExecutor/LongArgJob.java
Patch:
@@ -70,7 +70,7 @@ public void run() throws Exception {
     File[] propFiles = initPropsFiles();
 
     // print out the Job properties to the job log.
-    info("Job properties:" + this.jobProps.getFlattened());
+    this.logJobProperties();
 
     boolean success = false;
     this.process = builder.build();

File: azkaban-common/src/main/java/azkaban/jobExecutor/ProcessJob.java
Patch:
@@ -94,7 +94,7 @@ public void run() throws Exception {
       info("Working directory: " + builder.getWorkingDir());
 
       // print out the Job properties to the job log.
-      info("Job properties:" + this.jobProps.getFlattened());
+      this.logJobProperties();
 
       boolean success = false;
       this.process = builder.build();

File: azkaban-common/src/main/java/azkaban/jobExecutor/JavaProcessJob.java
Patch:
@@ -172,10 +172,10 @@ protected Pair<Long, Long> getProcMemoryRequirement() throws Exception {
 
       if (xmx > sizeMaxXmx) {
         throw new Exception(String.format("%s: Xmx value has exceeded the allowed limit (max Xmx = %s)",
-                getId(), maxXms));
+                getId(), maxXmx));
       }
     }
 
     return new Pair<Long, Long>(xms, xmx);
   }
-}
\ No newline at end of file
+}

File: azkaban-execserver/src/main/java/azkaban/execapp/AzkabanExecutorServer.java
Patch:
@@ -307,7 +307,7 @@ public static AzkabanExecutorServer getApp() {
    * @throws IOException
    */
   public static void main(String[] args) throws Exception {
-    logger.error("Starting Jetty Azkaban Executor...");
+    logger.info("Starting Jetty Azkaban Executor...");
     Props azkabanSettings = AzkabanServer.loadProps(args);
 
     if (azkabanSettings == null) {

File: azkaban-webserver/src/main/java/azkaban/webapp/AzkabanWebServer.java
Patch:
@@ -667,7 +667,7 @@ public Props getServerProps() {
    * @param args
    */
   public static void main(String[] args) throws Exception {
-    logger.error("Starting Jetty Azkaban Executor...");
+    logger.info("Starting Jetty Azkaban Web Server...");
     Props azkabanSettings = AzkabanServer.loadProps(args);
 
     if (azkabanSettings == null) {

File: azkaban-execserver/src/main/java/azkaban/execapp/AzkabanExecutorServer.java
Patch:
@@ -307,7 +307,7 @@ public static AzkabanExecutorServer getApp() {
    * @throws IOException
    */
   public static void main(String[] args) throws Exception {
-    logger.error("Starting Jetty Azkaban Executor...");
+    logger.info("Starting Jetty Azkaban Executor...");
     Props azkabanSettings = AzkabanServer.loadProps(args);
 
     if (azkabanSettings == null) {

File: azkaban-webserver/src/main/java/azkaban/webapp/AzkabanWebServer.java
Patch:
@@ -667,7 +667,7 @@ public Props getServerProps() {
    * @param args
    */
   public static void main(String[] args) throws Exception {
-    logger.error("Starting Jetty Azkaban Executor...");
+    logger.info("Starting Jetty Azkaban Web Server...");
     Props azkabanSettings = AzkabanServer.loadProps(args);
 
     if (azkabanSettings == null) {

File: azkaban-execserver/src/test/java/azkaban/execapp/event/JobCallbackUtilTest.java
Patch:
@@ -7,6 +7,7 @@
 import static azkaban.jobcallback.JobCallbackConstants.JOB_STATUS_TOKEN;
 import static azkaban.jobcallback.JobCallbackConstants.JOB_TOKEN;
 import static azkaban.jobcallback.JobCallbackConstants.PROJECT_TOKEN;
+import static azkaban.jobcallback.JobCallbackConstants.SERVER_TOKEN;
 
 import java.util.HashMap;
 import java.util.List;
@@ -26,6 +27,7 @@
 public class JobCallbackUtilTest {
   private static Map<String, String> contextInfo;
 
+  private static final String SERVER_NAME = "localhost:9999";
   private static final String PROJECT_NANE = "PROJECTX";
   private static final String FLOW_NANE = "FLOWX";
   private static final String JOB_NANE = "JOBX";
@@ -34,6 +36,7 @@ public class JobCallbackUtilTest {
   @BeforeClass
   public static void setup() {
     contextInfo = new HashMap<String, String>();
+    contextInfo.put(SERVER_TOKEN, SERVER_NAME);
     contextInfo.put(PROJECT_TOKEN, PROJECT_NANE);
     contextInfo.put(FLOW_TOKEN, FLOW_NANE);
     contextInfo.put(EXECUTION_ID_TOKEN, EXECUTION_ID);

File: azkaban-execserver/src/test/java/azkaban/execapp/event/JobCallbackRequestMakerTest.java
Patch:
@@ -5,6 +5,7 @@
 import static azkaban.jobcallback.JobCallbackConstants.JOB_STATUS_TOKEN;
 import static azkaban.jobcallback.JobCallbackConstants.JOB_TOKEN;
 import static azkaban.jobcallback.JobCallbackConstants.PROJECT_TOKEN;
+import static azkaban.jobcallback.JobCallbackConstants.SERVER_TOKEN;
 
 import java.io.BufferedReader;
 import java.io.IOException;
@@ -40,6 +41,7 @@ public class JobCallbackRequestMakerTest {
   private static final String SLEEP_DURATION_PARAM = "sleepDuration";
   private static final String STATUS_CODE_PARAM = "returnedStatusCode";
 
+  private static final String SERVER_NAME = "localhost:9999";
   private static final String PROJECT_NANE = "PROJECTX";
   private static final String FLOW_NANE = "FLOWX";
   private static final String JOB_NANE = "JOBX";
@@ -59,6 +61,7 @@ public static void setup() throws Exception {
     jobCBMaker = JobCallbackRequestMaker.getInstance();
 
     contextInfo = new HashMap<String, String>();
+    contextInfo.put(SERVER_TOKEN, SERVER_NAME);
     contextInfo.put(PROJECT_TOKEN, PROJECT_NANE);
     contextInfo.put(FLOW_TOKEN, FLOW_NANE);
     contextInfo.put(EXECUTION_ID_TOKEN, EXECUTION_ID);

File: azkaban-execserver/src/main/java/azkaban/execapp/FlowRunnerManager.java
Patch:
@@ -317,7 +317,7 @@ public void run() {
           } catch (InterruptedException e) {
             logger.info("Interrupted. Probably to shut down.");
           } catch (Throwable t){
-            logger.info("Uncaught throwable, please look into why it is not caught", t);
+            logger.warn("Uncaught throwable, please look into why it is not caught", t);
           }
         }
       }

File: azkaban-execserver/src/main/java/azkaban/execapp/FlowRunnerManager.java
Patch:
@@ -316,6 +316,8 @@ public void run() {
             wait(RECENTLY_FINISHED_TIME_TO_LIVE);
           } catch (InterruptedException e) {
             logger.info("Interrupted. Probably to shut down.");
+          } catch (Throwable t){
+            logger.info("Uncaught throwable, please look into why it is not caught", t);
           }
         }
       }

File: azkaban-common/src/test/java/azkaban/project/validator/ValidationReportTest.java
Patch:
@@ -8,7 +8,7 @@
 import org.junit.Test;
 
 /**
- * Test
+ * Test adding messages to {@link ValidationReport}
  */
 public class ValidationReportTest {
 

File: azkaban-webserver/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java
Patch:
@@ -1596,7 +1596,7 @@ private void ajaxHandleUpload(HttpServletRequest req,
                   warnMsgs.append(ValidationReport.getInfoMsg(msg) + "<br/>");
                   break;
                 default:
-                    break;
+                  break;
               }
             }
           }

File: azkaban-common/src/main/java/azkaban/project/ProjectManager.java
Patch:
@@ -80,6 +80,8 @@ public ProjectManager(ProjectLoader loader, Props props) {
     // initialize itself.
     Props prop = new Props(props);
     prop.put(ValidatorConfigs.PROJECT_ARCHIVE_FILE_PATH, "initialize");
+    // By instantiating an object of XmlValidatorManager, this will verify the
+    // config files for the validators.
     new XmlValidatorManager(prop);
     loadAllProjects();
   }
@@ -361,7 +363,7 @@ public void removeProjectPermission(Project project, String name,
    * caller of this method should call method
    * {@ProjectFileHandler.deleteLocalFile}
    * to delete the temporary file.
-   * 
+   *
    * @param project
    * @param version - latest version is used if value is -1
    * @return ProjectFileHandler - null if can't find project zip file based on

File: azkaban-common/src/main/java/azkaban/metric/TimeBasedReportingMetric.java
Patch:
@@ -39,7 +39,7 @@ public abstract class TimeBasedReportingMetric<T> extends AbstractMetric<T> {
   public TimeBasedReportingMetric(String metricName, String metricType, T initialValue, MetricReportManager manager,
       long interval) throws MetricException {
     super(metricName, metricType, initialValue, manager);
-    if(validateInterval(interval)) {
+    if(!isValidInterval(interval)) {
       throw new MetricException("Invalid interval: Cannot instantiate timer");
     }
     timer = new Timer();
@@ -71,7 +71,7 @@ public void run() {
    * @throws MetricException
    */
   public void updateInterval(final long interval) throws MetricException {
-    if(validateInterval(interval)) {
+    if(!isValidInterval(interval)) {
       throw new MetricException("Invalid interval: Cannot update timer");
     }
     logger.debug(String.format("Updating tracking interval to %d milisecond for %s metric", interval, getName()));
@@ -80,7 +80,7 @@ public void updateInterval(final long interval) throws MetricException {
     timer.schedule(getTimerTask(), interval, interval);
   }
 
-  private boolean validateInterval(final long interval) {
+  private boolean isValidInterval(final long interval) {
     return interval >= MIN_MILISEC_INTERVAL && interval <= MAX_MILISEC_INTERVAL;
   }
 

File: azkaban-common/src/main/java/azkaban/metric/TimeBasedReportingMetric.java
Patch:
@@ -39,7 +39,7 @@ public abstract class TimeBasedReportingMetric<T> extends AbstractMetric<T> {
   public TimeBasedReportingMetric(String metricName, String metricType, T initialValue, MetricReportManager manager,
       long interval) throws MetricException {
     super(metricName, metricType, initialValue, manager);
-    if(validateInterval(interval)) {
+    if(!isValidInterval(interval)) {
       throw new MetricException("Invalid interval: Cannot instantiate timer");
     }
     timer = new Timer();
@@ -71,7 +71,7 @@ public void run() {
    * @throws MetricException
    */
   public void updateInterval(final long interval) throws MetricException {
-    if(validateInterval(interval)) {
+    if(!isValidInterval(interval)) {
       throw new MetricException("Invalid interval: Cannot update timer");
     }
     logger.debug(String.format("Updating tracking interval to %d milisecond for %s metric", interval, getName()));
@@ -80,7 +80,7 @@ public void updateInterval(final long interval) throws MetricException {
     timer.schedule(getTimerTask(), interval, interval);
   }
 
-  private boolean validateInterval(final long interval) {
+  private boolean isValidInterval(final long interval) {
     return interval >= MIN_MILISEC_INTERVAL && interval <= MAX_MILISEC_INTERVAL;
   }
 

File: azkaban-webserver/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java
Patch:
@@ -1536,10 +1536,10 @@ private void ajaxHandleUpload(HttpServletRequest req,
     Project project = projectManager.getProject(projectName);
     String autoFix = (String) multipart.get("fix");
     Props props = new Props();
-    if (autoFix != null && autoFix.equals("on")) {
-      props.put(ValidatorConfigs.CUSTOM_AUTO_FIX_FLAG_PARAM, "true");
-    } else {
+    if (autoFix != null && autoFix.equals("off")) {
       props.put(ValidatorConfigs.CUSTOM_AUTO_FIX_FLAG_PARAM, "false");
+    } else {
+      props.put(ValidatorConfigs.CUSTOM_AUTO_FIX_FLAG_PARAM, "true");
     }
 
     if (projectName == null || projectName.isEmpty()) {

File: azkaban-webserver/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java
Patch:
@@ -1424,10 +1424,10 @@ private void ajaxHandleUpload(HttpServletRequest req,
     Project project = projectManager.getProject(projectName);
     String autoFix = (String) multipart.get("fix");
     Props props = new Props();
-    if (autoFix != null && autoFix.equals("on")) {
-      props.put(ValidatorConfigs.CUSTOM_AUTO_FIX_FLAG_PARAM, "true");
-    } else {
+    if (autoFix != null && autoFix.equals("off")) {
       props.put(ValidatorConfigs.CUSTOM_AUTO_FIX_FLAG_PARAM, "false");
+    } else {
+      props.put(ValidatorConfigs.CUSTOM_AUTO_FIX_FLAG_PARAM, "true");
     }
 
     if (projectName == null || projectName.isEmpty()) {

File: azkaban-common/src/main/java/azkaban/metric/TimeBasedReportingMetric.java
Patch:
@@ -64,7 +64,7 @@ public void run() {
    * @param interval
    */
   public void updateInterval(final long interval) {
-    logger.debug(String.format("Updating tracking interval to %d milisecond for %s metric", interval, getName()));
+    _logger.debug(String.format("Updating tracking interval to %d milisecond for %s metric", interval, getName()));
     timer.cancel();
     timer = new Timer();
     timer.schedule(getTimerTask(), interval, interval);

File: azkaban-execserver/src/main/java/azkaban/execapp/metric/NumFailedFlowMetric.java
Patch:
@@ -31,7 +31,7 @@ public class NumFailedFlowMetric extends TimeBasedReportingMetric<Integer> imple
 
   public NumFailedFlowMetric(MetricReportManager manager, long interval) {
     super(NUM_FAILED_FLOW_METRIC_NAME, NUM_FAILED_FLOW_METRIC_TYPE, 0, manager, interval);
-    logger.debug("Instantiated NumFailedJobMetric");
+    _logger.debug("Instantiated NumFailedJobMetric");
   }
 
   /**

File: azkaban-execserver/src/main/java/azkaban/execapp/metric/NumFailedJobMetric.java
Patch:
@@ -33,7 +33,7 @@ public class NumFailedJobMetric extends TimeBasedReportingMetric<Integer> implem
 
   public NumFailedJobMetric(MetricReportManager manager, long interval) {
     super(NUM_FAILED_JOB_METRIC_NAME, NUM_FAILED_JOB_METRIC_TYPE, 0, manager, interval);
-    logger.debug("Instantiated NumFailedJobMetric");
+    _logger.debug("Instantiated NumFailedJobMetric");
   }
 
   /**

File: azkaban-execserver/src/main/java/azkaban/execapp/metric/NumQueuedFlowMetric.java
Patch:
@@ -33,7 +33,7 @@ public class NumQueuedFlowMetric extends TimeBasedReportingMetric<Integer> {
    */
   public NumQueuedFlowMetric(FlowRunnerManager flowRunnerManager, MetricReportManager manager, long interval) {
     super(NUM_QUEUED_FLOW_METRIC_NAME, NUM_QUEUED_FLOW_METRIC_TYPE, 0, manager, interval);
-    logger.debug("Instantiated NumQueuedFlowMetric");
+    _logger.debug("Instantiated NumQueuedFlowMetric");
     flowManager = flowRunnerManager;
   }
 

File: azkaban-execserver/src/main/java/azkaban/execapp/metric/NumRunningFlowMetric.java
Patch:
@@ -36,7 +36,7 @@ public class NumRunningFlowMetric extends TimeBasedReportingMetric<Integer> {
    */
   public NumRunningFlowMetric(FlowRunnerManager flowRunnerManager, MetricReportManager manager, long interval) {
     super(NUM_RUNNING_FLOW_METRIC_NAME, NUM_RUNNING_FLOW_METRIC_TYPE, 0, manager, interval);
-    logger.debug("Instantiated NumRunningFlowMetric");
+    _logger.debug("Instantiated NumRunningFlowMetric");
     flowManager = flowRunnerManager;
   }
 

File: azkaban-execserver/src/main/java/azkaban/execapp/metric/NumRunningJobMetric.java
Patch:
@@ -35,7 +35,7 @@ public class NumRunningJobMetric extends TimeBasedReportingMetric<Integer> imple
    */
   public NumRunningJobMetric(MetricReportManager manager, long interval) {
     super(NUM_RUNNING_JOB_METRIC_NAME, NUM_RUNNING_JOB_METRIC_TYPE, 0, manager, interval);
-    logger.debug("Instantiated NumRunningJobMetric");
+    _logger.debug("Instantiated NumRunningJobMetric");
   }
 
   /**
@@ -53,7 +53,7 @@ public synchronized void handleEvent(Event event) {
   }
 
   @Override
-  protected synchronized void preTrackingEventMethod() {
+  protected void preTrackingEventMethod() {
     // nothing to finalize value is already updated
   }
 

File: azkaban-webserver/src/main/java/azkaban/webapp/servlet/StatsServlet.java
Patch:
@@ -81,8 +81,8 @@ private void handleAJAXAction(HttpServletRequest req, HttpServletResponse resp,
       handleChangeConfigurationRequest(ConnectorParams.STATS_SET_MAXREPORTERPOINTS, req, ret);
     } else if (actionName.equals(ConnectorParams.STATS_SET_ENABLEMETRICS)) {
       handleChangeConfigurationRequest(ConnectorParams.STATS_SET_ENABLEMETRICS, req, ret);
-    } else if (actionName.equals(ConnectorParams.STATS_SET_DISBLEMETRICS)) {
-      handleChangeConfigurationRequest(ConnectorParams.STATS_SET_DISBLEMETRICS, req, ret);
+    } else if (actionName.equals(ConnectorParams.STATS_SET_DISABLEMETRICS)) {
+      handleChangeConfigurationRequest(ConnectorParams.STATS_SET_DISABLEMETRICS, req, ret);
     }
 
     writeJSON(resp, ret);

File: azkaban-common/src/main/java/azkaban/utils/PropsUtils.java
Patch:
@@ -285,6 +285,8 @@ public static Props addCommonFlowProperties(Props parentProps,
     props.put(CommonJobProperties.PROJECT_NAME, flow.getProjectName());
     props.put(CommonJobProperties.PROJECT_VERSION, flow.getVersion());
     props.put(CommonJobProperties.FLOW_UUID, UUID.randomUUID().toString());
+    props.put(CommonJobProperties.PROJECT_LAST_CHANGED_BY, flow.getLastModifiedByUser());
+    props.put(CommonJobProperties.PROJECT_LAST_CHANGED_DATE, flow.getLastModifiedTimestamp());
 
     DateTime loadTime = new DateTime();
 
@@ -299,6 +301,7 @@ public static Props addCommonFlowProperties(Props parentProps,
         loadTime.toString("SSS"));
     props.put(CommonJobProperties.FLOW_START_TIMEZONE,
         loadTime.toString("ZZZZ"));
+
     return props;
   }
 

File: azkaban-common/src/main/java/azkaban/metric/inmemoryemitter/InMemoryMetricEmitter.java
Patch:
@@ -151,7 +151,7 @@ private void statBasedSelectMetricHistory(final LinkedList<InMemoryHistoryNode>
       InMemoryHistoryNode currentNode = ite.next();
       double value = ((Number) currentNode.getValue()).doubleValue();
       // remove all elements which lies in 95% value band
-      if (value > mean + statisticalDeviationFactor * std && value < mean - statisticalDeviationFactor * std) {
+      if (value < mean + statisticalDeviationFactor * std && value > mean - statisticalDeviationFactor * std) {
         ite.remove();
       }
     }

File: azkaban-execserver/src/main/java/azkaban/execapp/metric/NumQueuedFlowMetric.java
Patch:
@@ -21,7 +21,7 @@
 import azkaban.metric.TimeBasedReportingMetric;
 
 public class NumQueuedFlowMetric extends TimeBasedReportingMetric<Integer> {
-  public static final String NUM_QUEUED_FLOW_METRIC_NAME = "NumRunningFlowMetric";
+  public static final String NUM_QUEUED_FLOW_METRIC_NAME = "NumQueuedFlowMetric";
   private static final String NUM_QUEUED_FLOW_METRIC_TYPE = "uint16";
 
   private FlowRunnerManager flowManager;

File: azkaban-common/src/main/java/azkaban/metric/MetricReportManager.java
Patch:
@@ -25,7 +25,7 @@
 
 
 public class MetricReportManager {
-  private static final int MAX_EMITTER_THREADS = 2;
+  private static final int MAX_EMITTER_THREADS = 4;
   private static final Logger logger = Logger.getLogger(MetricReportManager.class);
 
   private List<IMetric<?>> metrics;
@@ -58,7 +58,8 @@ public static MetricReportManager getInstance() {
   // each element of metrics List is responsible to call this method and report metrics
   public void reportMetric(final IMetric<?> metric) {
     if (metric != null) {
-      logger.debug(String.format("Submitting %s metric for metric emission pool", metric.getName()));
+      // TODO: change to debug level
+      logger.info(String.format("Submitting %s metric for metric emission pool", metric.getName()));
       executorService.submit(new Runnable() {
         @Override
         public void run() {

File: azkaban-execserver/src/main/java/azkaban/execapp/AzkabanExecutorServer.java
Patch:
@@ -142,7 +142,7 @@ private void configureMetricReports(FlowRunnerManager runnerManager, Props props
 
       metricManager.AddMetric(new NumRunningJobMetric());
       metricManager.AddMetric(new NumRunningFlowMetric(runnerManager));
-      logger.info("Copleted configuring Metric Reports");
+      logger.info("Completed configuring Metric Reports");
     }
   }
 

File: azkaban-execserver/src/main/java/azkaban/execapp/metric/NumRunningFlowMetric.java
Patch:
@@ -25,7 +25,7 @@
 public class NumRunningFlowMetric extends AbstractMetric<Integer> {
   public static final String NUM_RUNNING_FLOW_METRIC_NAME = "NumRunningFlowMetric";
   public static final String NUM_RUNNING_FLOW_METRIC_TYPE = "uint16";
-  private static final int NUM_RUNNING_FLOW_INTERVAL = 60 * 1000; //milliseconds
+  private static final int NUM_RUNNING_FLOW_INTERVAL = 5 * 1000; //milliseconds TODO: increase frequency
 
   private FlowRunnerManager flowManager;
   private Timer timer = new Timer();
@@ -46,7 +46,7 @@ public void run() {
 
   }
 
-  public void UpdateValueAndNotifyManager() {
+  public synchronized void UpdateValueAndNotifyManager() {
     value = flowManager.getNumRunningFlows();
     notifyManager();
   }

File: azkaban-execserver/src/main/java/azkaban/execapp/metric/NumRunningJobMetric.java
Patch:
@@ -32,16 +32,16 @@ public NumRunningJobMetric() {
 
   @Override
   public void UpdateValueAndNotifyManager() {
-    metricManager.reportMetric(this);
+    notifyManager();
   }
 
   @Override
-  public void handleEvent(Event event) {
+  public synchronized void handleEvent(Event event) {
     if (event.getType() == Type.JOB_STARTED) {
       value = value + 1;
     } else if (event.getType() == Type.JOB_FINISHED) {
       value = value - 1;
     }
-    notifyManager();
+    UpdateValueAndNotifyManager();
   }
 }

File: azkaban-webserver/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java
Patch:
@@ -1424,7 +1424,9 @@ private void ajaxHandleUpload(HttpServletRequest req,
     Project project = projectManager.getProject(projectName);
     String autoFix = (String) multipart.get("fix");
     Props props = new Props();
-    if (autoFix.equals("on")) {
+    if (autoFix == null) {
+      props.put(ValidatorConfigs.CUSTOM_AUTO_FIX_FLAG_PARAM, "false");
+    } else if (autoFix.equals("on")) {
       props.put(ValidatorConfigs.CUSTOM_AUTO_FIX_FLAG_PARAM, "true");
     } else {
       props.put(ValidatorConfigs.CUSTOM_AUTO_FIX_FLAG_PARAM, "false");

File: azkaban-webserver/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java
Patch:
@@ -1465,7 +1465,7 @@ private void ajaxHandleUpload(HttpServletRequest req,
             message.append("</ul>");
           }
           if (!report.getWarningMsgs().isEmpty()) {
-            message.append("Validator " + reportEntry.getKey() + " reports warnings:<br><ul>");
+            message.append("Validator " + reportEntry.getKey() + " reports warnings:<ul>");
             for (String msg : report.getWarningMsgs()) {
               message.append("<li>" + msg + "</li>");
             }

File: azkaban-common/src/main/java/azkaban/project/validator/ValidationStatus.java
Patch:
@@ -2,15 +2,16 @@
 
 /**
  * Status of the ValidationReport. It also represents the severity of each rule.
+ * The order of severity for the status is PASS < WARN < ERROR.
  */
-public enum Status {
+public enum ValidationStatus {
   PASS("PASS"),
   WARN("WARN"),
   ERROR("ERROR");
 
   private final String _status;
 
-  private Status(final String status) {
+  private ValidationStatus(final String status) {
     _status = status;
   }
 

File: azkaban-webserver/src/main/java/azkaban/webapp/servlet/ProjectManagerServlet.java
Patch:
@@ -1470,7 +1470,7 @@ private void ajaxHandleUpload(HttpServletRequest req,
             }
           }
         }
-        if (message.toString().length() > 0) {
+        if (message.length() > 0) {
           ret.put("error", message.toString());
         }
       } catch (Exception e) {

File: azkaban-common/src/main/java/azkaban/project/validator/ProjectValidator.java
Patch:
@@ -1,10 +1,11 @@
 package azkaban.project.validator;
 
 import java.io.File;
-import java.util.Properties;
+
+import azkaban.utils.Props;
 
 public interface ProjectValidator {
-  boolean initialize(Properties configuration);
+  boolean initialize(Props configuration);
   String getValidatorInfo();
   ValidationReport validateProject(File projectDir);
 }

File: azkaban-common/src/main/java/azkaban/utils/AbstractMailer.java
Patch:
@@ -38,7 +38,7 @@ public AbstractMailer(Props props) {
     this.mailUser = props.getString("mail.user", "");
     this.mailPassword = props.getString("mail.password", "");
     this.mailSender = props.getString("mail.sender", "");
-    this.usesAuth = props.getBoolean("mail.useAuth",true);
+    this.usesAuth = props.getBoolean("mail.useAuth", true);
     
     this.clientHostname = props.get("server.hostname");
     this.clientPort = props.getInt("server.port");

File: azkaban-common/src/main/java/azkaban/utils/Emailer.java
Patch:
@@ -65,7 +65,7 @@ public Emailer(Props props) {
     this.mailPassword = props.getString("mail.password", "");
     this.mailSender = props.getString("mail.sender", "");
     this.tls = props.getString("mail.tls", "false");
-    this.usesAuth = props.getBoolean("mail.useAuth",true);
+    this.usesAuth = props.getBoolean("mail.useAuth", true);
     
     int mailTimeout = props.getInt("mail.timeout.millis", 10000);
     EmailMessage.setTimeout(mailTimeout);

File: azkaban-common/src/main/java/azkaban/flow/CommonJobProperties.java
Patch:
@@ -125,6 +125,8 @@ public class CommonJobProperties {
   public static final String EXECUTION_LINK = "azkaban.link.execution.url";
   public static final String JOBEXEC_LINK = "azkaban.link.jobexec.url";
   public static final String ATTEMPT_LINK = "azkaban.link.attempt.url";
+  public static final String OUT_NODES = "azkaban.job.outnodes";
+  public static final String IN_NODES = "azkaban.job.innodes";
 
   /**
    * Properties for passing the flow start time to the jobs.

File: azkaban-common/src/main/java/azkaban/flow/CommonJobProperties.java
Patch:
@@ -125,6 +125,8 @@ public class CommonJobProperties {
   public static final String EXECUTION_LINK = "azkaban.link.execution.url";
   public static final String JOBEXEC_LINK = "azkaban.link.jobexec.url";
   public static final String ATTEMPT_LINK = "azkaban.link.attempt.url";
+  public static final String OUT_NODES = "azkaban.job.outnodes";
+  public static final String IN_NODES = "azkaban.job.innodes";
 
   /**
    * Properties for passing the flow start time to the jobs.

File: azkaban-execserver/src/main/java/azkaban/execapp/JobRunner.java
Patch:
@@ -51,7 +51,7 @@
 
 public class JobRunner extends EventHandler implements Runnable {
   private final Layout DEFAULT_LAYOUT = new EnhancedPatternLayout(
-      "%d{dd-MM-yyyy HH:mm:ss z} %c %p - %m\n");
+      "%d{dd-MM-yyyy HH:mm:ss z} %c{1} %p - %m\n");
 
   private ExecutorLoader loader;
   private Props props;

File: azkaban-common/src/main/java/azkaban/sla/SlaOption.java
Patch:
@@ -110,9 +110,6 @@ public static SlaOption fromObject(Object object) {
   public Object toWebObject() {
     HashMap<String, Object> slaObj = new HashMap<String, Object>();
 
-    // slaObj.put("type", type);
-    // slaObj.put("info", info);
-    // slaObj.put("actions", actions);
     if (type.equals(TYPE_FLOW_FINISH) || type.equals(TYPE_FLOW_SUCCEED)) {
       slaObj.put("id", "");
     } else {

File: azkaban-common/src/main/java/azkaban/trigger/builtin/CreateTriggerAction.java
Patch:
@@ -60,7 +60,6 @@ public static CreateTriggerAction createFromJson(Object obj) throws Exception {
 
   @Override
   public CreateTriggerAction fromJson(Object obj) throws Exception {
-    // TODO Auto-generated method stub
     return createFromJson(obj);
   }
 

File: azkaban-common/src/main/java/azkaban/trigger/builtin/ExecuteFlowAction.java
Patch:
@@ -241,9 +241,6 @@ public void doAction() throws Exception {
 
     try {
       executorManager.submitExecutableFlow(exflow, submitUser);
-      // Map<String, Object> outputProps = new HashMap<String, Object>();
-      // outputProps.put(EXEC_ID, exflow.getExecutionId());
-      // context.put(actionId, outputProps);
       logger.info("Invoked flow " + project.getName() + "." + flowName);
     } catch (ExecutorManagerException e) {
       throw new RuntimeException(e);

File: azkaban-common/src/main/java/azkaban/trigger/builtin/ExecutionChecker.java
Patch:
@@ -54,7 +54,6 @@ public Object eval() {
     try {
       exflow = executorManager.getExecutableFlow(execId);
     } catch (ExecutorManagerException e) {
-      // TODO Auto-generated catch block
       e.printStackTrace();
       return Boolean.FALSE;
     }

File: azkaban-common/src/main/java/azkaban/trigger/builtin/KillExecutionAction.java
Patch:
@@ -100,8 +100,6 @@ public void doAction() throws Exception {
 
   @Override
   public void setContext(Map<String, Object> context) {
-    // TODO Auto-generated method stub
-
   }
 
   @Override

File: azkaban-common/src/main/java/azkaban/utils/FileIOUtils.java
Patch:
@@ -102,7 +102,6 @@ public static void createDeepSymlink(File sourceDir, File destDir)
     createDirsFindFiles(sourceDir, sourceDir, destDir, paths);
 
     StringBuffer buffer = new StringBuffer();
-    // buffer.append("sh '");
     for (String path : paths) {
       File sourceLink = new File(sourceDir, path);
       path = "." + path;
@@ -111,9 +110,7 @@ public static void createDeepSymlink(File sourceDir, File destDir)
           .append(" ").append(path).append(";");
     }
 
-    // buffer.append("'");
     String command = buffer.toString();
-    // System.out.println(command);
     ProcessBuilder builder = new ProcessBuilder().command("sh", "-c", command);
     builder.directory(destDir);
 

File: azkaban-common/src/main/java/azkaban/sla/SlaOption.java
Patch:
@@ -110,9 +110,6 @@ public static SlaOption fromObject(Object object) {
   public Object toWebObject() {
     HashMap<String, Object> slaObj = new HashMap<String, Object>();
 
-    // slaObj.put("type", type);
-    // slaObj.put("info", info);
-    // slaObj.put("actions", actions);
     if (type.equals(TYPE_FLOW_FINISH) || type.equals(TYPE_FLOW_SUCCEED)) {
       slaObj.put("id", "");
     } else {

File: azkaban-common/src/main/java/azkaban/trigger/builtin/CreateTriggerAction.java
Patch:
@@ -60,7 +60,6 @@ public static CreateTriggerAction createFromJson(Object obj) throws Exception {
 
   @Override
   public CreateTriggerAction fromJson(Object obj) throws Exception {
-    // TODO Auto-generated method stub
     return createFromJson(obj);
   }
 

File: azkaban-common/src/main/java/azkaban/trigger/builtin/ExecuteFlowAction.java
Patch:
@@ -241,9 +241,6 @@ public void doAction() throws Exception {
 
     try {
       executorManager.submitExecutableFlow(exflow, submitUser);
-      // Map<String, Object> outputProps = new HashMap<String, Object>();
-      // outputProps.put(EXEC_ID, exflow.getExecutionId());
-      // context.put(actionId, outputProps);
       logger.info("Invoked flow " + project.getName() + "." + flowName);
     } catch (ExecutorManagerException e) {
       throw new RuntimeException(e);

File: azkaban-common/src/main/java/azkaban/trigger/builtin/ExecutionChecker.java
Patch:
@@ -54,7 +54,6 @@ public Object eval() {
     try {
       exflow = executorManager.getExecutableFlow(execId);
     } catch (ExecutorManagerException e) {
-      // TODO Auto-generated catch block
       e.printStackTrace();
       return Boolean.FALSE;
     }

File: azkaban-common/src/main/java/azkaban/trigger/builtin/KillExecutionAction.java
Patch:
@@ -100,8 +100,6 @@ public void doAction() throws Exception {
 
   @Override
   public void setContext(Map<String, Object> context) {
-    // TODO Auto-generated method stub
-
   }
 
   @Override

File: azkaban-common/src/main/java/azkaban/utils/FileIOUtils.java
Patch:
@@ -102,7 +102,6 @@ public static void createDeepSymlink(File sourceDir, File destDir)
     createDirsFindFiles(sourceDir, sourceDir, destDir, paths);
 
     StringBuffer buffer = new StringBuffer();
-    // buffer.append("sh '");
     for (String path : paths) {
       File sourceLink = new File(sourceDir, path);
       path = "." + path;
@@ -111,9 +110,7 @@ public static void createDeepSymlink(File sourceDir, File destDir)
           .append(" ").append(path).append(";");
     }
 
-    // buffer.append("'");
     String command = buffer.toString();
-    // System.out.println(command);
     ProcessBuilder builder = new ProcessBuilder().command("sh", "-c", command);
     builder.directory(destDir);
 

File: azkaban-common/src/main/java/azkaban/database/AzkabanDatabaseUpdater.java
Patch:
@@ -28,7 +28,7 @@
 
 import azkaban.database.AzkabanDatabaseSetup;
 import azkaban.utils.Props;
-import azkaban.webapp.AzkabanServer;
+import azkaban.server.AzkabanServer;
 
 public class AzkabanDatabaseUpdater {
   private static final Logger logger = Logger

File: azkaban-common/src/main/java/azkaban/event/Event.java
Patch:
@@ -14,7 +14,7 @@
  * the License.
  */
 
-package azkaban.execapp.event;
+package azkaban.event;
 
 public class Event {
   public enum Type {

File: azkaban-common/src/main/java/azkaban/event/EventHandler.java
Patch:
@@ -14,7 +14,7 @@
  * the License.
  */
 
-package azkaban.execapp.event;
+package azkaban.event;
 
 import java.util.ArrayList;
 import java.util.HashSet;

File: azkaban-common/src/main/java/azkaban/event/EventListener.java
Patch:
@@ -14,7 +14,7 @@
  * the License.
  */
 
-package azkaban.execapp.event;
+package azkaban.event;
 
 public interface EventListener {
   public void handleEvent(Event event);

File: azkaban-common/src/main/java/azkaban/executor/ExecutableFlowBase.java
Patch:
@@ -368,7 +368,7 @@ public void reEnableDependents(ExecutableNode... nodes) {
 
   /**
    * Only returns true if the status of all finished nodes is true.
-   * 
+   *
    * @return
    */
   public boolean isFlowFinished() {
@@ -385,10 +385,10 @@ public boolean isFlowFinished() {
   /**
    * Finds all jobs which are ready to run. This occurs when all of its
    * dependency nodes are finished running.
-   * 
+   *
    * It will also return any subflow that has been completed such that the
    * FlowRunner can properly handle them.
-   * 
+   *
    * @param flow
    * @return
    */

File: azkaban-common/src/main/java/azkaban/executor/ExecutableNode.java
Patch:
@@ -24,6 +24,7 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
+
 import azkaban.flow.Node;
 import azkaban.utils.Props;
 import azkaban.utils.PropsUtils;

File: azkaban-common/src/main/java/azkaban/executor/JdbcExecutorLoader.java
Patch:
@@ -37,6 +37,7 @@
 import org.apache.commons.io.IOUtils;
 import org.apache.commons.io.FileUtils;
 import org.apache.log4j.Logger;
+
 import org.joda.time.DateTime;
 
 import azkaban.database.AbstractJdbcLoader;

File: azkaban-common/src/main/java/azkaban/flow/Node.java
Patch:
@@ -40,7 +40,7 @@ public Node(String id) {
 
   /**
    * Clones nodes
-   * 
+   *
    * @param node
    */
   public Node(Node clone) {

File: azkaban-common/src/main/java/azkaban/jmx/JmxTriggerManager.java
Patch:
@@ -68,7 +68,6 @@ public long getScannerIdleTime() {
 
   @Override
   public String getScannerThreadStage() {
-    // TODO Auto-generated method stub
     return jmxStats.getScannerThreadStage();
   }
 }

File: azkaban-common/src/main/java/azkaban/jobExecutor/AbstractProcessJob.java
Patch:
@@ -32,9 +32,8 @@
 import azkaban.utils.Props;
 import azkaban.utils.PropsUtils;
 
-/*
+/**
  * A revised process-based job
- *
  */
 public abstract class AbstractProcessJob extends AbstractJob {
   private final Logger log;
@@ -89,7 +88,7 @@ public Props getJobGeneratedProperties() {
 
   /**
    * initialize temporary and final property file
-   * 
+   *
    * @return {tmpPropFile, outputPropFile}
    */
   public File[] initPropsFiles() {

File: azkaban-common/src/main/java/azkaban/jobExecutor/NoopJob.java
Patch:
@@ -21,7 +21,7 @@
 import azkaban.utils.Props;
 
 /**
- *
+ * A no-op job.
  */
 public class NoopJob implements Job {
   private String jobId;

File: azkaban-common/src/main/java/azkaban/jobExecutor/ProcessJob.java
Patch:
@@ -28,9 +28,8 @@
 import azkaban.jobExecutor.utils.process.AzkabanProcessBuilder;
 import azkaban.utils.Props;
 
-/*
+/**
  * A job that runs a simple unix command
- *
  */
 public class ProcessJob extends AbstractProcessJob {
 
@@ -148,7 +147,7 @@ public String getPath() {
   /**
    * Splits the command into a unix like command line structure. Quotes and
    * single quotes are treated as nested strings.
-   * 
+   *
    * @param command
    * @return
    */

File: azkaban-common/src/main/java/azkaban/jobExecutor/PythonJob.java
Patch:
@@ -28,7 +28,7 @@ public class PythonJob extends LongArgJob {
   private static final String SCRIPT_KEY = "script";
 
   public PythonJob(String jobid, Props sysProps, Props jobProps, Logger log) {
-    super(jobid, 
+    super(jobid,
         new String[] {
           jobProps.getString(PYTHON_BINARY_KEY, "python"),
           jobProps.getString(SCRIPT_KEY)

File: azkaban-common/src/main/java/azkaban/jobExecutor/RubyJob.java
Patch:
@@ -28,7 +28,7 @@ public class RubyJob extends LongArgJob {
   private static final String SCRIPT_KEY = "script";
 
   public RubyJob(String jobid, Props sysProps, Props jobProps, Logger log) {
-    super(jobid, 
+    super(jobid,
         new String[] {
           jobProps.getString(RUBY_BINARY_KEY, "ruby"),
           jobProps.getString(SCRIPT_KEY)

File: azkaban-common/src/main/java/azkaban/jobExecutor/utils/InitErrorJob.java
Patch:
@@ -22,9 +22,8 @@
 
 /**
  * this job is used to throw out exception caught in initialization stage
- * 
+ *
  * @author lguo
- * 
  */
 public class InitErrorJob extends AbstractJob {
 

File: azkaban-common/src/main/java/azkaban/project/JdbcProjectLoader.java
Patch:
@@ -39,11 +39,11 @@
 import org.apache.commons.io.IOUtils;
 import org.apache.log4j.Logger;
 
+import azkaban.database.AbstractJdbcLoader;
 import azkaban.flow.Flow;
 import azkaban.project.ProjectLogEvent.EventType;
 import azkaban.user.Permission;
 import azkaban.user.User;
-import azkaban.database.AbstractJdbcLoader;
 import azkaban.utils.GZIPUtils;
 import azkaban.utils.JSONUtils;
 import azkaban.utils.Md5Hasher;
@@ -191,7 +191,7 @@ private List<Triple<String, Boolean, Permission>> fetchPermissionsForProject(
 
   /**
    * Creates a Project in the db.
-   * 
+   *
    * It will throw an exception if it finds an active project of the same name,
    * or the SQL fails
    */
@@ -674,7 +674,7 @@ public boolean postEvent(Project project, EventType type, String user,
 
   /**
    * Get all the logs for a given project
-   * 
+   *
    * @param project
    * @return
    * @throws ProjectManagerException

File: azkaban-common/src/main/java/azkaban/trigger/ActionTypeLoader.java
Patch:
@@ -1,12 +1,12 @@
 /*
  * Copyright 2012 LinkedIn Corp.
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
  * the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

File: azkaban-common/src/main/java/azkaban/trigger/CheckerTypeLoader.java
Patch:
@@ -1,12 +1,12 @@
 /*
  * Copyright 2012 LinkedIn Corp.
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
  * the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

File: azkaban-common/src/main/java/azkaban/trigger/ConditionChecker.java
Patch:
@@ -1,12 +1,12 @@
 /*
  * Copyright 2012 LinkedIn Corp.
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
  * the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

File: azkaban-common/src/main/java/azkaban/trigger/TriggerAction.java
Patch:
@@ -1,12 +1,12 @@
 /*
  * Copyright 2012 LinkedIn Corp.
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
  * the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

File: azkaban-common/src/main/java/azkaban/trigger/TriggerAgent.java
Patch:
@@ -1,12 +1,12 @@
 /*
  * Copyright 2012 LinkedIn Corp.
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
  * the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

File: azkaban-common/src/main/java/azkaban/trigger/TriggerException.java
Patch:
@@ -1,12 +1,12 @@
 /*
  * Copyright 2012 LinkedIn Corp.
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
  * the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

File: azkaban-common/src/main/java/azkaban/trigger/TriggerLoader.java
Patch:
@@ -1,12 +1,12 @@
 /*
  * Copyright 2012 LinkedIn Corp.
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
  * the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

File: azkaban-common/src/main/java/azkaban/trigger/TriggerLoaderException.java
Patch:
@@ -1,12 +1,12 @@
 /*
  * Copyright 2012 LinkedIn Corp.
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
  * the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

File: azkaban-common/src/main/java/azkaban/trigger/TriggerManagerAdapter.java
Patch:
@@ -1,12 +1,12 @@
 /*
  * Copyright 2012 LinkedIn Corp.
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
  * the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

File: azkaban-common/src/main/java/azkaban/trigger/TriggerManagerException.java
Patch:
@@ -1,12 +1,12 @@
 /*
  * Copyright 2012 LinkedIn Corp.
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
  * the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

File: azkaban-common/src/main/java/azkaban/trigger/TriggerStatus.java
Patch:
@@ -1,12 +1,12 @@
 /*
  * Copyright 2012 LinkedIn Corp.
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
  * the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

File: azkaban-common/src/main/java/azkaban/trigger/builtin/BasicTimeChecker.java
Patch:
@@ -1,12 +1,12 @@
 /*
  * Copyright 2012 LinkedIn Corp.
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
  * the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

File: azkaban-common/src/main/java/azkaban/trigger/builtin/CreateTriggerAction.java
Patch:
@@ -1,12 +1,12 @@
 /*
  * Copyright 2012 LinkedIn Corp.
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
  * the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

File: azkaban-common/src/main/java/azkaban/trigger/builtin/ExecuteFlowAction.java
Patch:
@@ -1,12 +1,12 @@
 /*
  * Copyright 2012 LinkedIn Corp.
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
  * the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

File: azkaban-common/src/main/java/azkaban/trigger/builtin/ExecutionChecker.java
Patch:
@@ -1,12 +1,12 @@
 /*
  * Copyright 2012 LinkedIn Corp.
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
  * the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

File: azkaban-common/src/main/java/azkaban/trigger/builtin/KillExecutionAction.java
Patch:
@@ -1,12 +1,12 @@
 /*
  * Copyright 2012 LinkedIn Corp.
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
  * the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

File: azkaban-common/src/main/java/azkaban/trigger/builtin/SendEmailAction.java
Patch:
@@ -1,12 +1,12 @@
 /*
  * Copyright 2012 LinkedIn Corp.
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
  * the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

File: azkaban-common/src/main/java/azkaban/trigger/builtin/SlaAlertAction.java
Patch:
@@ -1,12 +1,12 @@
 /*
  * Copyright 2012 LinkedIn Corp.
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
  * the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

File: azkaban-common/src/main/java/azkaban/user/Permission.java
Patch:
@@ -1,12 +1,12 @@
 /*
  * Copyright 2012 LinkedIn Corp.
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
  * the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

File: azkaban-common/src/main/java/azkaban/user/Role.java
Patch:
@@ -1,12 +1,12 @@
 /*
  * Copyright 2012 LinkedIn Corp.
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
  * the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

File: azkaban-common/src/main/java/azkaban/user/User.java
Patch:
@@ -1,12 +1,12 @@
 /*
  * Copyright 2012 LinkedIn Corp.
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
  * the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

File: azkaban-common/src/main/java/azkaban/utils/AbstractMailer.java
Patch:
@@ -1,12 +1,12 @@
 /*
  * Copyright 2012 LinkedIn Corp.
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
  * the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

File: azkaban-common/src/main/java/azkaban/utils/DirectoryFlowLoader.java
Patch:
@@ -1,12 +1,12 @@
 /*
  * Copyright 2012 LinkedIn Corp.
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
  * the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

File: azkaban-common/src/main/java/azkaban/utils/EmailMessage.java
Patch:
@@ -1,12 +1,12 @@
 /*
  * Copyright 2012 LinkedIn Corp.
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
  * the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

File: azkaban-common/src/main/java/azkaban/utils/FileIOUtils.java
Patch:
@@ -1,12 +1,12 @@
 /*
  * Copyright 2012 LinkedIn Corp.
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
  * the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

File: azkaban-common/src/main/java/azkaban/utils/GZIPUtils.java
Patch:
@@ -1,12 +1,12 @@
 /*
  * Copyright 2012 LinkedIn Corp.
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
  * the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

File: azkaban-common/src/main/java/azkaban/utils/LogGobbler.java
Patch:
@@ -1,12 +1,12 @@
 /*
  * Copyright 2012 LinkedIn Corp.
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
  * the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

File: azkaban-common/src/main/java/azkaban/utils/SplitterOutputStream.java
Patch:
@@ -1,12 +1,12 @@
 /*
  * Copyright 2012 LinkedIn Corp.
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
  * the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

File: azkaban-common/src/main/java/azkaban/utils/Triple.java
Patch:
@@ -1,12 +1,12 @@
 /*
  * Copyright 2012 LinkedIn Corp.
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
  * the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

File: azkaban-common/src/main/java/azkaban/utils/UndefinedPropertyException.java
Patch:
@@ -1,12 +1,12 @@
 /*
  * Copyright 2012 LinkedIn Corp.
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
  * the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

File: azkaban-common/src/main/java/azkaban/utils/WebUtils.java
Patch:
@@ -1,12 +1,12 @@
 /*
  * Copyright 2012 LinkedIn Corp.
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
  * the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

File: azkaban-common/src/main/java/azkaban/utils/cache/Cache.java
Patch:
@@ -1,12 +1,12 @@
 /*
  * Copyright 2012 LinkedIn Corp.
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
  * the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

File: azkaban-common/src/main/java/azkaban/utils/cache/CacheManager.java
Patch:
@@ -1,12 +1,12 @@
 /*
  * Copyright 2012 LinkedIn Corp.
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
  * the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

File: azkaban-common/src/main/java/azkaban/utils/cache/Element.java
Patch:
@@ -1,12 +1,12 @@
 /*
  * Copyright 2012 LinkedIn Corp.
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
  * the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

File: azkaban-execserver/src/main/java/azkaban/execapp/ExecutorServlet.java
Patch:
@@ -30,15 +30,16 @@
 import javax.servlet.http.HttpServletResponse;
 
 import org.apache.log4j.Logger;
+
 import org.codehaus.jackson.map.ObjectMapper;
 
 import azkaban.executor.ConnectorParams;
 import azkaban.executor.ExecutableFlowBase;
 import azkaban.executor.ExecutorManagerException;
+import azkaban.server.ServerConstants;
 import azkaban.utils.FileIOUtils.JobMetaData;
 import azkaban.utils.FileIOUtils.LogData;
 import azkaban.utils.JSONUtils;
-import azkaban.webapp.servlet.AzkabanServletContextListener;
 
 public class ExecutorServlet extends HttpServlet implements ConnectorParams {
   private static final long serialVersionUID = 1L;
@@ -57,7 +58,7 @@ public ExecutorServlet() {
   public void init(ServletConfig config) throws ServletException {
     application =
         (AzkabanExecutorServer) config.getServletContext().getAttribute(
-            AzkabanServletContextListener.AZKABAN_SERVLET_CONTEXT_KEY);
+            ServerConstants.AZKABAN_SERVLET_CONTEXT_KEY);
 
     if (application == null) {
       throw new IllegalStateException(

File: azkaban-execserver/src/main/java/azkaban/execapp/JMXHttpServlet.java
Patch:
@@ -31,9 +31,9 @@
 import org.apache.log4j.Logger;
 
 import azkaban.executor.ConnectorParams;
+import azkaban.server.ServerConstants;
+import azkaban.server.HttpRequestUtils;
 import azkaban.utils.JSONUtils;
-import azkaban.webapp.servlet.AzkabanServletContextListener;
-import azkaban.webapp.servlet.HttpRequestUtils;
 
 public class JMXHttpServlet extends HttpServlet implements ConnectorParams {
   private static final long serialVersionUID = -3085603824826446270L;
@@ -43,7 +43,7 @@ public class JMXHttpServlet extends HttpServlet implements ConnectorParams {
   public void init(ServletConfig config) throws ServletException {
     server =
         (AzkabanExecutorServer) config.getServletContext().getAttribute(
-            AzkabanServletContextListener.AZKABAN_SERVLET_CONTEXT_KEY);
+            ServerConstants.AZKABAN_SERVLET_CONTEXT_KEY);
   }
 
   public boolean hasParam(HttpServletRequest request, String param) {

File: azkaban-execserver/src/main/java/azkaban/execapp/event/FlowWatcher.java
Patch:
@@ -52,7 +52,7 @@ protected Logger getLogger() {
 
   /**
    * Called to fire events to the JobRunner listeners
-   * 
+   *
    * @param jobId
    */
   protected synchronized void handleJobStatusChange(String jobId, Status status) {

File: azkaban-execserver/src/main/java/azkaban/execapp/event/LocalFlowWatcher.java
Patch:
@@ -16,9 +16,11 @@
 
 package azkaban.execapp.event;
 
+import azkaban.event.Event;
+import azkaban.event.Event.Type;
+import azkaban.event.EventListener;
 import azkaban.execapp.FlowRunner;
 import azkaban.execapp.JobRunner;
-import azkaban.execapp.event.Event.Type;
 import azkaban.executor.ExecutableNode;
 
 public class LocalFlowWatcher extends FlowWatcher {

File: azkaban-execserver/src/main/java/azkaban/execapp/jmx/JmxFlowRunnerManager.java
Patch:
@@ -14,7 +14,7 @@
  * the License.
  */
 
-package azkaban.jmx;
+package azkaban.execapp.jmx;
 
 import azkaban.execapp.FlowRunnerManager;
 

File: azkaban-execserver/src/main/java/azkaban/execapp/jmx/JmxFlowRunnerManagerMBean.java
Patch:
@@ -14,7 +14,9 @@
  * the License.
  */
 
-package azkaban.jmx;
+package azkaban.execapp.jmx;
+
+import azkaban.jmx.DisplayName;
 
 public interface JmxFlowRunnerManagerMBean {
   @DisplayName("OPERATION: getLastCleanerThreadCheckTime")

File: azkaban-common/src/main/java/azkaban/executor/ExecutableFlowBase.java
Patch:
@@ -368,7 +368,7 @@ public void reEnableDependents(ExecutableNode... nodes) {
 
   /**
    * Only returns true if the status of all finished nodes is true.
-   * 
+   *
    * @return
    */
   public boolean isFlowFinished() {
@@ -385,10 +385,10 @@ public boolean isFlowFinished() {
   /**
    * Finds all jobs which are ready to run. This occurs when all of its
    * dependency nodes are finished running.
-   * 
+   *
    * It will also return any subflow that has been completed such that the
    * FlowRunner can properly handle them.
-   * 
+   *
    * @param flow
    * @return
    */

File: azkaban-common/src/main/java/azkaban/executor/ExecutableNode.java
Patch:
@@ -24,6 +24,7 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
+
 import azkaban.flow.Node;
 import azkaban.utils.Props;
 import azkaban.utils.PropsUtils;

File: azkaban-common/src/main/java/azkaban/executor/ExecutorManager.java
Patch:
@@ -38,6 +38,7 @@
 import org.apache.http.impl.client.BasicResponseHandler;
 import org.apache.http.impl.client.DefaultHttpClient;
 import org.apache.log4j.Logger;
+
 import org.joda.time.DateTime;
 
 import azkaban.alert.Alerter;
@@ -54,7 +55,7 @@
 
 /**
  * Executor manager used to manage the client side job.
- * 
+ *
  */
 public class ExecutorManager extends EventHandler implements
     ExecutorManagerAdapter {

File: azkaban-common/src/main/java/azkaban/executor/JdbcExecutorLoader.java
Patch:
@@ -37,6 +37,7 @@
 import org.apache.commons.io.IOUtils;
 import org.apache.commons.io.FileUtils;
 import org.apache.log4j.Logger;
+
 import org.joda.time.DateTime;
 
 import azkaban.database.AbstractJdbcLoader;

File: azkaban-common/src/main/java/azkaban/flow/Node.java
Patch:
@@ -40,7 +40,7 @@ public Node(String id) {
 
   /**
    * Clones nodes
-   * 
+   *
    * @param node
    */
   public Node(Node clone) {

File: azkaban-common/src/main/java/azkaban/jmx/JmxTriggerManager.java
Patch:
@@ -68,7 +68,6 @@ public long getScannerIdleTime() {
 
   @Override
   public String getScannerThreadStage() {
-    // TODO Auto-generated method stub
     return jmxStats.getScannerThreadStage();
   }
 }

File: azkaban-common/src/main/java/azkaban/jobExecutor/AbstractProcessJob.java
Patch:
@@ -32,9 +32,8 @@
 import azkaban.utils.Props;
 import azkaban.utils.PropsUtils;
 
-/*
+/**
  * A revised process-based job
- *
  */
 public abstract class AbstractProcessJob extends AbstractJob {
   private final Logger log;
@@ -89,7 +88,7 @@ public Props getJobGeneratedProperties() {
 
   /**
    * initialize temporary and final property file
-   * 
+   *
    * @return {tmpPropFile, outputPropFile}
    */
   public File[] initPropsFiles() {

File: azkaban-common/src/main/java/azkaban/jobExecutor/NoopJob.java
Patch:
@@ -21,7 +21,7 @@
 import azkaban.utils.Props;
 
 /**
- *
+ * A no-op job.
  */
 public class NoopJob implements Job {
   private String jobId;

File: azkaban-common/src/main/java/azkaban/jobExecutor/ProcessJob.java
Patch:
@@ -28,9 +28,8 @@
 import azkaban.jobExecutor.utils.process.AzkabanProcessBuilder;
 import azkaban.utils.Props;
 
-/*
+/**
  * A job that runs a simple unix command
- *
  */
 public class ProcessJob extends AbstractProcessJob {
 
@@ -148,7 +147,7 @@ public String getPath() {
   /**
    * Splits the command into a unix like command line structure. Quotes and
    * single quotes are treated as nested strings.
-   * 
+   *
    * @param command
    * @return
    */

File: azkaban-common/src/main/java/azkaban/jobExecutor/PythonJob.java
Patch:
@@ -28,7 +28,7 @@ public class PythonJob extends LongArgJob {
   private static final String SCRIPT_KEY = "script";
 
   public PythonJob(String jobid, Props sysProps, Props jobProps, Logger log) {
-    super(jobid, 
+    super(jobid,
         new String[] {
           jobProps.getString(PYTHON_BINARY_KEY, "python"),
           jobProps.getString(SCRIPT_KEY)

File: azkaban-common/src/main/java/azkaban/jobExecutor/RubyJob.java
Patch:
@@ -28,7 +28,7 @@ public class RubyJob extends LongArgJob {
   private static final String SCRIPT_KEY = "script";
 
   public RubyJob(String jobid, Props sysProps, Props jobProps, Logger log) {
-    super(jobid, 
+    super(jobid,
         new String[] {
           jobProps.getString(RUBY_BINARY_KEY, "ruby"),
           jobProps.getString(SCRIPT_KEY)

File: azkaban-common/src/main/java/azkaban/jobExecutor/utils/InitErrorJob.java
Patch:
@@ -22,9 +22,8 @@
 
 /**
  * this job is used to throw out exception caught in initialization stage
- * 
+ *
  * @author lguo
- * 
  */
 public class InitErrorJob extends AbstractJob {
 

File: azkaban-common/src/main/java/azkaban/project/JdbcProjectLoader.java
Patch:
@@ -39,11 +39,11 @@
 import org.apache.commons.io.IOUtils;
 import org.apache.log4j.Logger;
 
+import azkaban.database.AbstractJdbcLoader;
 import azkaban.flow.Flow;
 import azkaban.project.ProjectLogEvent.EventType;
 import azkaban.user.Permission;
 import azkaban.user.User;
-import azkaban.database.AbstractJdbcLoader;
 import azkaban.utils.GZIPUtils;
 import azkaban.utils.JSONUtils;
 import azkaban.utils.Md5Hasher;
@@ -191,7 +191,7 @@ private List<Triple<String, Boolean, Permission>> fetchPermissionsForProject(
 
   /**
    * Creates a Project in the db.
-   * 
+   *
    * It will throw an exception if it finds an active project of the same name,
    * or the SQL fails
    */
@@ -674,7 +674,7 @@ public boolean postEvent(Project project, EventType type, String user,
 
   /**
    * Get all the logs for a given project
-   * 
+   *
    * @param project
    * @return
    * @throws ProjectManagerException

File: azkaban-common/src/main/java/azkaban/trigger/ActionTypeLoader.java
Patch:
@@ -1,12 +1,12 @@
 /*
  * Copyright 2012 LinkedIn Corp.
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
  * the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

File: azkaban-common/src/main/java/azkaban/trigger/CheckerTypeLoader.java
Patch:
@@ -1,12 +1,12 @@
 /*
  * Copyright 2012 LinkedIn Corp.
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
  * the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

File: azkaban-common/src/main/java/azkaban/trigger/ConditionChecker.java
Patch:
@@ -1,12 +1,12 @@
 /*
  * Copyright 2012 LinkedIn Corp.
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
  * the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

File: azkaban-common/src/main/java/azkaban/trigger/TriggerAction.java
Patch:
@@ -1,12 +1,12 @@
 /*
  * Copyright 2012 LinkedIn Corp.
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
  * the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

File: azkaban-common/src/main/java/azkaban/trigger/TriggerAgent.java
Patch:
@@ -1,12 +1,12 @@
 /*
  * Copyright 2012 LinkedIn Corp.
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
  * the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

File: azkaban-common/src/main/java/azkaban/trigger/TriggerException.java
Patch:
@@ -1,12 +1,12 @@
 /*
  * Copyright 2012 LinkedIn Corp.
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
  * the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

File: azkaban-common/src/main/java/azkaban/trigger/TriggerLoader.java
Patch:
@@ -1,12 +1,12 @@
 /*
  * Copyright 2012 LinkedIn Corp.
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
  * the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

File: azkaban-common/src/main/java/azkaban/trigger/TriggerLoaderException.java
Patch:
@@ -1,12 +1,12 @@
 /*
  * Copyright 2012 LinkedIn Corp.
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
  * the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

File: azkaban-common/src/main/java/azkaban/trigger/TriggerManagerAdapter.java
Patch:
@@ -1,12 +1,12 @@
 /*
  * Copyright 2012 LinkedIn Corp.
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
  * the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

File: azkaban-common/src/main/java/azkaban/trigger/TriggerManagerException.java
Patch:
@@ -1,12 +1,12 @@
 /*
  * Copyright 2012 LinkedIn Corp.
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
  * the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

File: azkaban-common/src/main/java/azkaban/trigger/TriggerStatus.java
Patch:
@@ -1,12 +1,12 @@
 /*
  * Copyright 2012 LinkedIn Corp.
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
  * the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

File: azkaban-common/src/main/java/azkaban/trigger/builtin/BasicTimeChecker.java
Patch:
@@ -1,12 +1,12 @@
 /*
  * Copyright 2012 LinkedIn Corp.
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
  * the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

File: azkaban-common/src/main/java/azkaban/trigger/builtin/CreateTriggerAction.java
Patch:
@@ -1,12 +1,12 @@
 /*
  * Copyright 2012 LinkedIn Corp.
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
  * the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

File: azkaban-common/src/main/java/azkaban/trigger/builtin/ExecuteFlowAction.java
Patch:
@@ -1,12 +1,12 @@
 /*
  * Copyright 2012 LinkedIn Corp.
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
  * the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

File: azkaban-common/src/main/java/azkaban/trigger/builtin/ExecutionChecker.java
Patch:
@@ -1,12 +1,12 @@
 /*
  * Copyright 2012 LinkedIn Corp.
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
  * the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

File: azkaban-common/src/main/java/azkaban/trigger/builtin/KillExecutionAction.java
Patch:
@@ -1,12 +1,12 @@
 /*
  * Copyright 2012 LinkedIn Corp.
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
  * the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

File: azkaban-common/src/main/java/azkaban/trigger/builtin/SendEmailAction.java
Patch:
@@ -1,12 +1,12 @@
 /*
  * Copyright 2012 LinkedIn Corp.
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
  * the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

File: azkaban-common/src/main/java/azkaban/trigger/builtin/SlaAlertAction.java
Patch:
@@ -1,12 +1,12 @@
 /*
  * Copyright 2012 LinkedIn Corp.
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
  * the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

File: azkaban-common/src/main/java/azkaban/user/Permission.java
Patch:
@@ -1,12 +1,12 @@
 /*
  * Copyright 2012 LinkedIn Corp.
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
  * the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

File: azkaban-common/src/main/java/azkaban/user/Role.java
Patch:
@@ -1,12 +1,12 @@
 /*
  * Copyright 2012 LinkedIn Corp.
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
  * the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

File: azkaban-common/src/main/java/azkaban/user/User.java
Patch:
@@ -1,12 +1,12 @@
 /*
  * Copyright 2012 LinkedIn Corp.
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
  * the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

File: azkaban-common/src/main/java/azkaban/utils/AbstractMailer.java
Patch:
@@ -1,12 +1,12 @@
 /*
  * Copyright 2012 LinkedIn Corp.
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
  * the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

File: azkaban-common/src/main/java/azkaban/utils/DirectoryFlowLoader.java
Patch:
@@ -1,12 +1,12 @@
 /*
  * Copyright 2012 LinkedIn Corp.
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
  * the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

File: azkaban-common/src/main/java/azkaban/utils/EmailMessage.java
Patch:
@@ -1,12 +1,12 @@
 /*
  * Copyright 2012 LinkedIn Corp.
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
  * the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

File: azkaban-common/src/main/java/azkaban/utils/FileIOUtils.java
Patch:
@@ -1,12 +1,12 @@
 /*
  * Copyright 2012 LinkedIn Corp.
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
  * the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

File: azkaban-common/src/main/java/azkaban/utils/GZIPUtils.java
Patch:
@@ -1,12 +1,12 @@
 /*
  * Copyright 2012 LinkedIn Corp.
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
  * the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

File: azkaban-common/src/main/java/azkaban/utils/LogGobbler.java
Patch:
@@ -1,12 +1,12 @@
 /*
  * Copyright 2012 LinkedIn Corp.
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
  * the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

File: azkaban-common/src/main/java/azkaban/utils/SplitterOutputStream.java
Patch:
@@ -1,12 +1,12 @@
 /*
  * Copyright 2012 LinkedIn Corp.
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
  * the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

File: azkaban-common/src/main/java/azkaban/utils/Triple.java
Patch:
@@ -1,12 +1,12 @@
 /*
  * Copyright 2012 LinkedIn Corp.
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
  * the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

File: azkaban-common/src/main/java/azkaban/utils/UndefinedPropertyException.java
Patch:
@@ -1,12 +1,12 @@
 /*
  * Copyright 2012 LinkedIn Corp.
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
  * the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

File: azkaban-common/src/main/java/azkaban/utils/WebUtils.java
Patch:
@@ -1,12 +1,12 @@
 /*
  * Copyright 2012 LinkedIn Corp.
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
  * the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

File: azkaban-common/src/main/java/azkaban/utils/cache/Cache.java
Patch:
@@ -1,12 +1,12 @@
 /*
  * Copyright 2012 LinkedIn Corp.
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
  * the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

File: azkaban-common/src/main/java/azkaban/utils/cache/CacheManager.java
Patch:
@@ -1,12 +1,12 @@
 /*
  * Copyright 2012 LinkedIn Corp.
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
  * the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

File: azkaban-common/src/main/java/azkaban/utils/cache/Element.java
Patch:
@@ -1,12 +1,12 @@
 /*
  * Copyright 2012 LinkedIn Corp.
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
  * the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

File: azkaban-common/src/test/java/azkaban/database/AzkabanDatabaseSetupTest.java
Patch:
@@ -24,11 +24,12 @@
 
 import org.apache.commons.dbutils.QueryRunner;
 import org.apache.commons.io.FileUtils;
+
 import org.junit.AfterClass;
 import org.junit.Assert;
 import org.junit.BeforeClass;
-import org.junit.Test;
 import org.junit.Ignore;
+import org.junit.Test;
 
 import azkaban.utils.Props;
 

File: azkaban-common/src/test/java/azkaban/executor/ExecutableFlowTest.java
Patch:
@@ -25,10 +25,11 @@
 import java.util.Set;
 
 import org.apache.log4j.Logger;
-import org.junit.Assert;
+
 import org.junit.After;
-import org.junit.Ignore;
+import org.junit.Assert;
 import org.junit.Before;
+import org.junit.Ignore;
 import org.junit.Test;
 
 import azkaban.executor.ExecutionOptions.FailureAction;

File: azkaban-common/src/test/java/azkaban/jobExecutor/JavaProcessJobTest.java
Patch:
@@ -21,6 +21,7 @@
 import java.util.Properties;
 
 import org.apache.log4j.Logger;
+
 import org.junit.AfterClass;
 import org.junit.Assert;
 import org.junit.Before;

File: azkaban-common/src/test/java/azkaban/jobExecutor/ProcessJobTest.java
Patch:
@@ -16,10 +16,11 @@
 
 package azkaban.jobExecutor;
 
+import org.apache.log4j.Logger;
+
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
-import org.apache.log4j.Logger;
 
 import azkaban.utils.Props;
 

File: azkaban-common/src/test/java/azkaban/jobExecutor/PythonJobTest.java
Patch:
@@ -20,6 +20,7 @@
 import java.util.Date;
 
 import org.apache.log4j.Logger;
+
 import org.junit.AfterClass;
 import org.junit.Assert;
 import org.junit.BeforeClass;
@@ -33,7 +34,7 @@ public class PythonJobTest {
   private Props props = null;
   private Logger log = Logger.getLogger(PythonJob.class);
 
-  private static final String scriptContent = 
+  private static final String scriptContent =
       "#!/usr/bin/python  \n" +
           "import re, string, sys  \n" +
           "# if no arguments were given, print a helpful message \n" +

File: azkaban-common/src/test/java/azkaban/jobExecutor/Utils.java
Patch:
@@ -22,6 +22,8 @@
 import java.io.PrintWriter;
 
 public class Utils {
+  private Utils() {
+  }
 
   public static void dumpFile(String filename, String filecontent)
       throws IOException {
@@ -34,5 +36,4 @@ public static void removeFile(String filename) {
     File file = new File(filename);
     file.delete();
   }
-
 }

File: azkaban-common/src/test/java/azkaban/jobtype/FakeJavaJob.java
Patch:
@@ -17,6 +17,7 @@
 package azkaban.jobtype;
 
 import org.apache.log4j.Logger;
+
 import azkaban.jobExecutor.JavaProcessJob;
 import azkaban.utils.Props;
 

File: azkaban-common/src/test/java/azkaban/jobtype/FakeJavaJob2.java
Patch:
@@ -17,6 +17,7 @@
 package azkaban.jobtype;
 
 import org.apache.log4j.Logger;
+
 import azkaban.jobExecutor.JavaProcessJob;
 import azkaban.utils.Props;
 

File: azkaban-common/src/test/java/azkaban/jobtype/JobTypeManagerTest.java
Patch:
@@ -16,18 +16,19 @@
 
 package azkaban.jobtype;
 
-import static org.junit.Assert.*;
-
 import java.io.File;
 import java.io.IOException;
 
 import org.apache.commons.io.FileUtils;
 import org.apache.log4j.Logger;
+
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Ignore;
 import org.junit.Test;
 
+import static org.junit.Assert.*;
+
 import azkaban.jobExecutor.Job;
 import azkaban.utils.Props;
 

File: azkaban-common/src/test/java/azkaban/project/JdbcProjectLoaderTest.java
Patch:
@@ -28,18 +28,19 @@
 import org.apache.commons.dbutils.DbUtils;
 import org.apache.commons.dbutils.QueryRunner;
 import org.apache.commons.dbutils.ResultSetHandler;
+
 import org.junit.Assert;
 import org.junit.BeforeClass;
 import org.junit.Ignore;
 import org.junit.Test;
 
+import azkaban.database.DataSourceUtils;
 import azkaban.flow.Edge;
 import azkaban.flow.Flow;
 import azkaban.flow.Node;
 import azkaban.project.ProjectLogEvent.EventType;
 import azkaban.user.Permission;
 import azkaban.user.User;
-import azkaban.database.DataSourceUtils;
 import azkaban.utils.Pair;
 import azkaban.utils.Props;
 import azkaban.utils.PropsUtils;

File: azkaban-common/src/test/java/azkaban/project/ProjectTest.java
Patch:
@@ -16,10 +16,10 @@
 
 package azkaban.project;
 
-import static org.junit.Assert.*;
-
 import org.junit.Test;
 
+import static org.junit.Assert.*;
+
 import azkaban.user.Permission;
 import azkaban.user.Permission.Type;
 import azkaban.utils.JSONUtils;

File: azkaban-common/src/test/java/azkaban/trigger/ConditionTest.java
Patch:
@@ -25,14 +25,14 @@
 import org.junit.Test;
 import org.junit.Ignore;
 
+import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.assertFalse;
+
 import azkaban.trigger.builtin.BasicTimeChecker;
 import azkaban.utils.JSONUtils;
 import azkaban.utils.Props;
 import azkaban.utils.Utils;
 
-import static org.junit.Assert.assertTrue;
-import static org.junit.Assert.assertFalse;
-
 public class ConditionTest {
 
   @Test

File: azkaban-common/src/test/java/azkaban/trigger/ExecuteFlowActionTest.java
Patch:
@@ -22,12 +22,12 @@
 import org.junit.Ignore;
 import org.junit.Test;
 
+import static org.junit.Assert.*;
+
 import azkaban.executor.ExecutionOptions;
 import azkaban.trigger.builtin.ExecuteFlowAction;
 import azkaban.utils.Props;
 
-import static org.junit.Assert.*;
-
 public class ExecuteFlowActionTest {
 
   @Ignore @Test

File: azkaban-common/src/test/java/azkaban/trigger/JdbcTriggerLoaderTest.java
Patch:
@@ -16,8 +16,6 @@
 
 package azkaban.trigger;
 
-import static org.junit.Assert.*;
-
 import java.sql.Connection;
 import java.sql.ResultSet;
 import java.sql.SQLException;
@@ -39,6 +37,8 @@
 import org.junit.Ignore;
 import org.junit.Test;
 
+import static org.junit.Assert.*;
+
 import azkaban.database.DataSourceUtils;
 import azkaban.executor.ExecutionOptions;
 import azkaban.trigger.builtin.BasicTimeChecker;

File: azkaban-common/src/test/java/azkaban/trigger/TriggerManagerTest.java
Patch:
@@ -16,8 +16,6 @@
 
 package azkaban.trigger;
 
-import static org.junit.Assert.*;
-
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
@@ -30,6 +28,8 @@
 import org.junit.Ignore;
 import org.junit.Test;
 
+import static org.junit.Assert.*;
+
 import azkaban.utils.Props;
 
 public class TriggerManagerTest {

File: azkaban-common/src/test/java/azkaban/trigger/TriggerTest.java
Patch:
@@ -28,15 +28,15 @@
 import org.junit.Ignore;
 import org.junit.Test;
 
+import static org.junit.Assert.*;
+
 import azkaban.executor.ExecutionOptions;
 import azkaban.trigger.builtin.BasicTimeChecker;
 import azkaban.trigger.builtin.ExecuteFlowAction;
 import azkaban.utils.JSONUtils;
 import azkaban.utils.Props;
 import azkaban.utils.Utils;
 
-import static org.junit.Assert.*;
-
 public class TriggerTest {
 
   private CheckerTypeLoader checkerLoader;

File: azkaban-common/src/test/java/azkaban/user/PermissionTest.java
Patch:
@@ -20,10 +20,10 @@
 import org.junit.Before;
 import org.junit.Test;
 
-import azkaban.user.Permission.Type;
-
 import static org.junit.Assert.assertTrue;
 
+import azkaban.user.Permission.Type;
+
 public class PermissionTest {
   @Before
   public void setUp() throws Exception {
@@ -113,7 +113,7 @@ public void testFlags() throws Exception {
 
   /**
    * Why? because it's quicker.
-   * 
+   *
    * @param message
    */
   public void info(String message) {

File: azkaban-common/src/test/java/azkaban/user/XmlUserManagerTest.java
Patch:
@@ -23,11 +23,11 @@
 import org.junit.Ignore;
 import org.junit.Test;
 
+import static org.junit.Assert.fail;
+
 import azkaban.utils.Props;
 import azkaban.utils.UndefinedPropertyException;
 
-import static org.junit.Assert.fail;
-
 public class XmlUserManagerTest {
   private Props baseProps = new Props();
 

File: azkaban-execserver/src/main/java/azkaban/execapp/AzkabanExecutorServer.java
Patch:
@@ -29,7 +29,9 @@
 import javax.management.ObjectName;
 
 import org.apache.log4j.Logger;
+
 import org.joda.time.DateTimeZone;
+
 import org.mortbay.jetty.Connector;
 import org.mortbay.jetty.Server;
 import org.mortbay.jetty.servlet.Context;
@@ -42,8 +44,8 @@
 import azkaban.jmx.JmxJettyServer;
 import azkaban.project.JdbcProjectLoader;
 import azkaban.project.ProjectLoader;
-import azkaban.server.ServerConstants;
 import azkaban.server.AzkabanServer;
+import azkaban.server.ServerConstants;
 import azkaban.utils.Props;
 import azkaban.utils.Utils;
 

File: azkaban-execserver/src/main/java/azkaban/execapp/ExecutorServlet.java
Patch:
@@ -30,6 +30,7 @@
 import javax.servlet.http.HttpServletResponse;
 
 import org.apache.log4j.Logger;
+
 import org.codehaus.jackson.map.ObjectMapper;
 
 import azkaban.executor.ConnectorParams;

File: azkaban-execserver/src/main/java/azkaban/execapp/FlowRunnerManager.java
Patch:
@@ -48,7 +48,6 @@
 import azkaban.executor.ExecutorManagerException;
 import azkaban.jobtype.JobTypeManager;
 import azkaban.jobtype.JobTypeManagerException;
-
 import azkaban.utils.FileIOUtils;
 import azkaban.utils.FileIOUtils.JobMetaData;
 import azkaban.utils.FileIOUtils.LogData;
@@ -58,7 +57,7 @@
 
 /**
  * Execution manager for the server side execution.
- * 
+ *
  */
 public class FlowRunnerManager implements EventListener {
   private static Logger logger = Logger.getLogger(FlowRunnerManager.class);

File: azkaban-execserver/src/main/java/azkaban/execapp/JMXHttpServlet.java
Patch:
@@ -31,9 +31,9 @@
 import org.apache.log4j.Logger;
 
 import azkaban.executor.ConnectorParams;
-import azkaban.utils.JSONUtils;
 import azkaban.server.ServerConstants;
 import azkaban.server.HttpRequestUtils;
+import azkaban.utils.JSONUtils;
 
 public class JMXHttpServlet extends HttpServlet implements ConnectorParams {
   private static final long serialVersionUID = -3085603824826446270L;

File: azkaban-execserver/src/main/java/azkaban/execapp/event/FlowWatcher.java
Patch:
@@ -52,7 +52,7 @@ protected Logger getLogger() {
 
   /**
    * Called to fire events to the JobRunner listeners
-   * 
+   *
    * @param jobId
    */
   protected synchronized void handleJobStatusChange(String jobId, Status status) {

File: azkaban-execserver/src/main/java/azkaban/execapp/event/LocalFlowWatcher.java
Patch:
@@ -16,11 +16,11 @@
 
 package azkaban.execapp.event;
 
-import azkaban.execapp.FlowRunner;
-import azkaban.execapp.JobRunner;
 import azkaban.event.Event;
 import azkaban.event.Event.Type;
 import azkaban.event.EventListener;
+import azkaban.execapp.FlowRunner;
+import azkaban.execapp.JobRunner;
 import azkaban.executor.ExecutableNode;
 
 public class LocalFlowWatcher extends FlowWatcher {

File: azkaban-execserver/src/test/java/azkaban/execapp/FlowRunnerPropertyResolutionTest.java
Patch:
@@ -34,15 +34,15 @@
 import azkaban.executor.ExecutableFlowBase;
 import azkaban.executor.ExecutableNode;
 import azkaban.executor.ExecutorLoader;
+import azkaban.executor.InteractiveTestJob;
+import azkaban.executor.JavaJob;
+import azkaban.executor.MockExecutorLoader;
 import azkaban.flow.Flow;
 import azkaban.jobtype.JobTypeManager;
 import azkaban.project.Project;
 import azkaban.project.ProjectLoader;
 import azkaban.project.ProjectManagerException;
 import azkaban.project.MockProjectLoader;
-import azkaban.executor.MockExecutorLoader;
-import azkaban.executor.InteractiveTestJob;
-import azkaban.executor.JavaJob;
 import azkaban.utils.DirectoryFlowLoader;
 import azkaban.utils.Props;
 

File: azkaban-execserver/src/test/java/azkaban/execapp/FlowRunnerTest2.java
Patch:
@@ -35,6 +35,9 @@
 import azkaban.executor.ExecutableNode;
 import azkaban.executor.ExecutionOptions.FailureAction;
 import azkaban.executor.ExecutorLoader;
+import azkaban.executor.InteractiveTestJob;
+import azkaban.executor.JavaJob;
+import azkaban.executor.MockExecutorLoader;
 import azkaban.executor.Status;
 import azkaban.flow.Flow;
 import azkaban.jobtype.JobTypeManager;
@@ -43,9 +46,6 @@
 import azkaban.project.ProjectLoader;
 import azkaban.project.ProjectManagerException;
 import azkaban.project.MockProjectLoader;
-import azkaban.executor.MockExecutorLoader;
-import azkaban.executor.InteractiveTestJob;
-import azkaban.executor.JavaJob;
 import azkaban.utils.DirectoryFlowLoader;
 import azkaban.utils.Props;
 

File: azkaban-execserver/src/test/java/azkaban/execapp/event/LocalFlowWatcherTest.java
Patch:
@@ -28,20 +28,20 @@
 import org.junit.Ignore;
 import org.junit.Test;
 
+import azkaban.execapp.EventCollectorListener;
 import azkaban.execapp.FlowRunner;
 import azkaban.executor.ExecutableFlow;
 import azkaban.executor.ExecutableNode;
 import azkaban.executor.ExecutionOptions;
 import azkaban.executor.ExecutorLoader;
+import azkaban.executor.JavaJob;
+import azkaban.executor.MockExecutorLoader;
 import azkaban.executor.Status;
 import azkaban.flow.Flow;
 import azkaban.jobtype.JobTypeManager;
 import azkaban.project.Project;
 import azkaban.project.ProjectLoader;
-import azkaban.execapp.EventCollectorListener;
-import azkaban.executor.MockExecutorLoader;
 import azkaban.project.MockProjectLoader;
-import azkaban.executor.JavaJob;
 import azkaban.utils.JSONUtils;
 
 public class LocalFlowWatcherTest {

File: azkaban-execserver/src/test/java/azkaban/execapp/event/RemoteFlowWatcherTest.java
Patch:
@@ -28,21 +28,21 @@
 import org.junit.Ignore;
 import org.junit.Test;
 
+import azkaban.execapp.EventCollectorListener;
 import azkaban.execapp.FlowRunner;
 import azkaban.executor.ExecutableFlow;
 import azkaban.executor.ExecutableFlowBase;
 import azkaban.executor.ExecutableNode;
 import azkaban.executor.ExecutionOptions;
 import azkaban.executor.ExecutorLoader;
+import azkaban.executor.JavaJob;
+import azkaban.executor.MockExecutorLoader;
 import azkaban.executor.Status;
 import azkaban.flow.Flow;
 import azkaban.jobtype.JobTypeManager;
 import azkaban.project.Project;
 import azkaban.project.ProjectLoader;
-import azkaban.execapp.EventCollectorListener;
-import azkaban.executor.MockExecutorLoader;
 import azkaban.project.MockProjectLoader;
-import azkaban.executor.JavaJob;
 import azkaban.utils.JSONUtils;
 
 public class RemoteFlowWatcherTest {

File: azkaban-soloserver/src/main/java/azkaban/soloserver/AzkabanSingleServer.java
Patch:
@@ -20,8 +20,8 @@
 
 import azkaban.database.AzkabanDatabaseSetup;
 import azkaban.database.AzkabanDatabaseUpdater;
-import azkaban.server.AzkabanServer;
 import azkaban.execapp.AzkabanExecutorServer;
+import azkaban.server.AzkabanServer;
 import azkaban.webapp.AzkabanWebServer;
 import azkaban.utils.Props;
 

File: azkaban-webserver/src/main/java/azkaban/webapp/AzkabanWebServer.java
Patch:
@@ -69,6 +69,7 @@
 import azkaban.scheduler.TriggerBasedScheduleLoader;
 import azkaban.server.AzkabanServer;
 import azkaban.server.ServerConstants;
+import azkaban.server.session.SessionCache;
 import azkaban.trigger.JdbcTriggerLoader;
 import azkaban.trigger.TriggerLoader;
 import azkaban.trigger.TriggerManager;
@@ -100,7 +101,6 @@
 import azkaban.webapp.plugin.TriggerPlugin;
 import azkaban.webapp.plugin.ViewerPlugin;
 import azkaban.webapp.plugin.PluginRegistry;
-import azkaban.server.session.SessionCache;
 
 /**
  * The Azkaban Jetty server class

File: azkaban-webserver/src/main/java/azkaban/webapp/servlet/IndexRedirectServlet.java
Patch:
@@ -1,12 +1,12 @@
 /*
  * Copyright 2012 LinkedIn Corp.
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
  * the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

File: azkaban-webserver/src/main/java/azkaban/webapp/servlet/JMXHttpServlet.java
Patch:
@@ -32,13 +32,13 @@
 
 import azkaban.executor.ConnectorParams;
 import azkaban.executor.ExecutorManagerAdapter;
+import azkaban.server.session.Session;
 import azkaban.trigger.TriggerManager;
 import azkaban.user.Permission;
 import azkaban.user.Role;
 import azkaban.user.User;
 import azkaban.user.UserManager;
 import azkaban.webapp.AzkabanWebServer;
-import azkaban.server.session.Session;
 
 /**
  * Limited set of jmx calls for when you cannot attach to the jvm

File: azkaban-webserver/src/main/java/azkaban/webapp/servlet/MultipartParser.java
Patch:
@@ -1,12 +1,12 @@
 /*
  * Copyright 2012 LinkedIn Corp.
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
  * the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

File: azkaban-webserver/src/main/java/azkaban/webapp/servlet/PageRenderException.java
Patch:
@@ -1,12 +1,12 @@
 /*
  * Copyright 2012 LinkedIn Corp.
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
  * the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

File: azkaban-webserver/src/main/java/azkaban/webapp/servlet/ScheduleServlet.java
Patch:
@@ -56,6 +56,8 @@
 import azkaban.scheduler.Schedule;
 import azkaban.scheduler.ScheduleManager;
 import azkaban.scheduler.ScheduleManagerException;
+import azkaban.server.session.Session;
+import azkaban.server.HttpRequestUtils;
 import azkaban.sla.SlaOption;
 import azkaban.user.Permission;
 import azkaban.user.Permission.Type;
@@ -65,8 +67,6 @@
 import azkaban.utils.Utils;
 import azkaban.webapp.AzkabanWebServer;
 import azkaban.webapp.SchedulerStatistics;
-import azkaban.server.session.Session;
-import azkaban.server.HttpRequestUtils;
 
 public class ScheduleServlet extends LoginAbstractAzkabanServlet {
   private static final long serialVersionUID = 1L;

File: azkaban-webserver/src/main/java/azkaban/webapp/servlet/VelocityUtils.java
Patch:
@@ -1,12 +1,12 @@
 /*
  * Copyright 2012 LinkedIn Corp.
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
  * the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

File: azkaban-common/src/main/java/azkaban/database/AzkabanDatabaseUpdater.java
Patch:
@@ -28,7 +28,7 @@
 
 import azkaban.database.AzkabanDatabaseSetup;
 import azkaban.utils.Props;
-import azkaban.webapp.AzkabanServer;
+import azkaban.server.AzkabanServer;
 
 public class AzkabanDatabaseUpdater {
   private static final Logger logger = Logger

File: azkaban-common/src/main/java/azkaban/event/Event.java
Patch:
@@ -14,7 +14,7 @@
  * the License.
  */
 
-package azkaban.execapp.event;
+package azkaban.event;
 
 public class Event {
   public enum Type {

File: azkaban-common/src/main/java/azkaban/event/EventHandler.java
Patch:
@@ -14,7 +14,7 @@
  * the License.
  */
 
-package azkaban.execapp.event;
+package azkaban.event;
 
 import java.util.ArrayList;
 import java.util.HashSet;

File: azkaban-common/src/main/java/azkaban/event/EventListener.java
Patch:
@@ -14,7 +14,7 @@
  * the License.
  */
 
-package azkaban.execapp.event;
+package azkaban.event;
 
 public interface EventListener {
   public void handleEvent(Event event);

File: azkaban-common/src/main/java/azkaban/executor/ExecutorManager.java
Patch:
@@ -41,9 +41,9 @@
 import org.joda.time.DateTime;
 
 import azkaban.alert.Alerter;
-import azkaban.execapp.event.Event;
-import azkaban.execapp.event.Event.Type;
-import azkaban.execapp.event.EventHandler;
+import azkaban.event.Event;
+import azkaban.event.Event.Type;
+import azkaban.event.EventHandler;
 import azkaban.project.Project;
 import azkaban.scheduler.ScheduleStatisticManager;
 import azkaban.utils.FileIOUtils.JobMetaData;

File: azkaban-common/src/main/java/azkaban/executor/ExecutorManagerServlet.java
Patch:
@@ -13,7 +13,7 @@
 
 import azkaban.utils.FileIOUtils.LogData;
 import azkaban.utils.JSONUtils;
-import azkaban.webapp.servlet.AbstractServiceServlet;
+import azkaban.server.AbstractServiceServlet;
 
 
 public class ExecutorManagerServlet extends AbstractServiceServlet {

File: azkaban-common/src/main/java/azkaban/server/AzkabanServer.java
Patch:
@@ -14,7 +14,7 @@
  * the License.
  */
 
-package azkaban.webapp;
+package azkaban.server;
 
 import java.io.File;
 import java.io.FileNotFoundException;
@@ -30,7 +30,7 @@
 
 import azkaban.user.UserManager;
 import azkaban.utils.Props;
-import azkaban.webapp.session.SessionCache;
+import azkaban.server.session.SessionCache;
 
 public abstract class AzkabanServer {
   private static final Logger logger = Logger.getLogger(AzkabanServer.class);

File: azkaban-common/src/main/java/azkaban/server/HttpRequestUtils.java
Patch:
@@ -14,7 +14,7 @@
  * the License.
  */
 
-package azkaban.webapp.servlet;
+package azkaban.server;
 
 import java.util.Arrays;
 import java.util.Enumeration;

File: azkaban-common/src/main/java/azkaban/server/session/Session.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations under
  * the License.
  */
-package azkaban.webapp.session;
+package azkaban.server.session;
 
 import java.util.HashMap;
 import java.util.Map;

File: azkaban-common/src/main/java/azkaban/server/session/SessionCache.java
Patch:
@@ -14,7 +14,7 @@
  * the License.
  */
 
-package azkaban.webapp.session;
+package azkaban.server.session;
 
 import azkaban.utils.Props;
 import azkaban.utils.cache.Cache;
@@ -82,4 +82,4 @@ public void addSession(Session session) {
   public boolean removeSession(String id) {
     return cache.remove(id);
   }
-}
\ No newline at end of file
+}

File: azkaban-execserver/src/main/java/azkaban/execapp/ExecutorServlet.java
Patch:
@@ -35,10 +35,10 @@
 import azkaban.executor.ConnectorParams;
 import azkaban.executor.ExecutableFlowBase;
 import azkaban.executor.ExecutorManagerException;
+import azkaban.server.ServerConstants;
 import azkaban.utils.FileIOUtils.JobMetaData;
 import azkaban.utils.FileIOUtils.LogData;
 import azkaban.utils.JSONUtils;
-import azkaban.webapp.servlet.AzkabanServletContextListener;
 
 public class ExecutorServlet extends HttpServlet implements ConnectorParams {
   private static final long serialVersionUID = 1L;
@@ -57,7 +57,7 @@ public ExecutorServlet() {
   public void init(ServletConfig config) throws ServletException {
     application =
         (AzkabanExecutorServer) config.getServletContext().getAttribute(
-            AzkabanServletContextListener.AZKABAN_SERVLET_CONTEXT_KEY);
+            ServerConstants.AZKABAN_SERVLET_CONTEXT_KEY);
 
     if (application == null) {
       throw new IllegalStateException(

File: azkaban-execserver/src/main/java/azkaban/execapp/FlowRunnerManager.java
Patch:
@@ -37,8 +37,8 @@
 import org.apache.log4j.Logger;
 
 import azkaban.project.ProjectLoader;
-import azkaban.execapp.event.Event;
-import azkaban.execapp.event.EventListener;
+import azkaban.event.Event;
+import azkaban.event.EventListener;
 import azkaban.execapp.event.FlowWatcher;
 import azkaban.execapp.event.LocalFlowWatcher;
 import azkaban.execapp.event.RemoteFlowWatcher;

File: azkaban-execserver/src/main/java/azkaban/execapp/JMXHttpServlet.java
Patch:
@@ -32,8 +32,8 @@
 
 import azkaban.executor.ConnectorParams;
 import azkaban.utils.JSONUtils;
-import azkaban.webapp.servlet.AzkabanServletContextListener;
-import azkaban.webapp.servlet.HttpRequestUtils;
+import azkaban.server.ServerConstants;
+import azkaban.server.HttpRequestUtils;
 
 public class JMXHttpServlet extends HttpServlet implements ConnectorParams {
   private static final long serialVersionUID = -3085603824826446270L;
@@ -43,7 +43,7 @@ public class JMXHttpServlet extends HttpServlet implements ConnectorParams {
   public void init(ServletConfig config) throws ServletException {
     server =
         (AzkabanExecutorServer) config.getServletContext().getAttribute(
-            AzkabanServletContextListener.AZKABAN_SERVLET_CONTEXT_KEY);
+            ServerConstants.AZKABAN_SERVLET_CONTEXT_KEY);
   }
 
   public boolean hasParam(HttpServletRequest request, String param) {

File: azkaban-execserver/src/main/java/azkaban/execapp/JobRunner.java
Patch:
@@ -34,9 +34,9 @@
 import org.apache.log4j.RollingFileAppender;
 
 import azkaban.execapp.event.BlockingStatus;
-import azkaban.execapp.event.Event;
-import azkaban.execapp.event.Event.Type;
-import azkaban.execapp.event.EventHandler;
+import azkaban.event.Event;
+import azkaban.event.Event.Type;
+import azkaban.event.EventHandler;
 import azkaban.execapp.event.FlowWatcher;
 import azkaban.executor.ExecutableFlowBase;
 import azkaban.executor.ExecutableNode;

File: azkaban-execserver/src/main/java/azkaban/execapp/event/LocalFlowWatcher.java
Patch:
@@ -18,7 +18,9 @@
 
 import azkaban.execapp.FlowRunner;
 import azkaban.execapp.JobRunner;
-import azkaban.execapp.event.Event.Type;
+import azkaban.event.Event;
+import azkaban.event.Event.Type;
+import azkaban.event.EventListener;
 import azkaban.executor.ExecutableNode;
 
 public class LocalFlowWatcher extends FlowWatcher {

File: azkaban-execserver/src/main/java/azkaban/execapp/jmx/JmxFlowRunnerManager.java
Patch:
@@ -14,7 +14,7 @@
  * the License.
  */
 
-package azkaban.jmx;
+package azkaban.execapp.jmx;
 
 import azkaban.execapp.FlowRunnerManager;
 

File: azkaban-execserver/src/main/java/azkaban/execapp/jmx/JmxFlowRunnerManagerMBean.java
Patch:
@@ -14,7 +14,9 @@
  * the License.
  */
 
-package azkaban.jmx;
+package azkaban.execapp.jmx;
+
+import azkaban.jmx.DisplayName;
 
 public interface JmxFlowRunnerManagerMBean {
   @DisplayName("OPERATION: getLastCleanerThreadCheckTime")

File: src/main/java/azkaban/executor/mail/DefaultMailCreator.java
Patch:
@@ -92,7 +92,7 @@ public boolean createFirstErrorMessage(ExecutableFlow flow,
       String executionUrl =
           scheme + "://" + clientHostname + ":" + clientPortNumber + "/"
               + "executor?" + "execid=" + execId;
-      message.println("<a href='\"" + executionUrl + "\">" + flow.getFlowId()
+      message.println("<a href=\"" + executionUrl + "\">" + flow.getFlowId()
           + " Execution Link</a>");
 
       message.println("");

File: src/main/java/azkaban/utils/Emailer.java
Patch:
@@ -112,7 +112,7 @@ public void sendFirstErrorMessage(ExecutableFlow flow) {
         + mailCreator.getClass().getCanonicalName());
 
     boolean mailCreated =
-        mailCreator.createFirstErrorMessage(flow, message, azkabanName,
+        mailCreator.createFirstErrorMessage(flow, message, azkabanName, scheme,
             clientHostname, clientPortNumber);
 
     if (mailCreated && !testMode) {
@@ -160,7 +160,7 @@ public void sendSuccessEmail(ExecutableFlow flow) {
         + mailCreator.getClass().getCanonicalName());
 
     boolean mailCreated =
-        mailCreator.createSuccessEmail(flow, message, azkabanName,
+        mailCreator.createSuccessEmail(flow, message, azkabanName, scheme,
             clientHostname, clientPortNumber);
 
     if (mailCreated && !testMode) {

File: src/main/java/azkaban/executor/mail/DefaultMailCreator.java
Patch:
@@ -141,7 +141,7 @@ public boolean createErrorEmail(ExecutableFlow flow, EmailMessage message,
       message.println("</table>");
       message.println("");
       String executionUrl =
-          "https://" + clientHostname + ":" + clientPortNumber + "/"
+          "http://" + clientHostname + ":" + clientPortNumber + "/"
               + "executor?" + "execid=" + execId;
       message.println("<a href=\"" + executionUrl + "\">" + flow.getFlowId()
           + " Execution Link</a>");

File: src/main/java/azkaban/executor/mail/DefaultMailCreator.java
Patch:
@@ -143,7 +143,7 @@ public boolean createErrorEmail(ExecutableFlow flow, EmailMessage message,
       String executionUrl =
           "https://" + clientHostname + ":" + clientPortNumber + "/"
               + "executor?" + "execid=" + execId;
-      message.println("<a href='\"" + executionUrl + "\">" + flow.getFlowId()
+      message.println("<a href=\"" + executionUrl + "\">" + flow.getFlowId()
           + " Execution Link</a>");
 
       message.println("");

File: src/main/java/azkaban/execapp/JobRunner.java
Patch:
@@ -503,7 +503,7 @@ private boolean prepareJob() throws RuntimeException {
 				job = jobtypeManager.buildJobExecutor(this.jobId, props, logger);
 			}
 			catch (JobTypeManagerException e) {
-				logger.error("Failed to build job type");
+				logger.error("Failed to build job type", e);
 				return false;
 			}
 		}

File: unit/java/azkaban/test/utils/EmailMessageTest.java
Patch:
@@ -3,8 +3,10 @@
 import java.io.IOException;
 
 import javax.mail.MessagingException;
+
 import org.junit.After;
 import org.junit.Before;
+import org.junit.Ignore;
 import org.junit.Test;
 
 import azkaban.utils.EmailMessage;
@@ -29,6 +31,7 @@ public void setUp() throws Exception {
 	public void tearDown() throws Exception {
 	}
 
+	@Ignore
 	@Test
 	public void testSendEmail() throws IOException {
 		em.addToAddress(toAddr);

File: src/main/java/azkaban/execapp/JobRunner.java
Patch:
@@ -503,7 +503,7 @@ private boolean prepareJob() throws RuntimeException {
 				job = jobtypeManager.buildJobExecutor(this.jobId, props, logger);
 			}
 			catch (JobTypeManagerException e) {
-				logger.error("Failed to build job type");
+				logger.error("Failed to build job type", e);
 				return false;
 			}
 		}

File: unit/java/azkaban/test/jobExecutor/JavaProcessJobTest.java
Patch:
@@ -30,7 +30,7 @@ public class JavaProcessJobTest
     " By JULIE BOSMAN \n" +
     "Published: August 11, 2010 \n" +
     " \n" +
-    "Twelve years later, it may be Joe Fox���s turn to worry. Readers have gone from skipping small \n" +
+    "Twelve years later, it may be Joe Fox's turn to worry. Readers have gone from skipping small \n" +
     "bookstores to wondering if they need bookstores at all. More people are ordering books online  \n" +
     "or plucking them from the best-seller bin at Wal-Mart";
 

File: unit/java/azkaban/test/utils/EmailMessageTest.java
Patch:
@@ -3,8 +3,10 @@
 import java.io.IOException;
 
 import javax.mail.MessagingException;
+
 import org.junit.After;
 import org.junit.Before;
+import org.junit.Ignore;
 import org.junit.Test;
 
 import azkaban.utils.EmailMessage;
@@ -29,6 +31,7 @@ public void setUp() throws Exception {
 	public void tearDown() throws Exception {
 	}
 
+	@Ignore
 	@Test
 	public void testSendEmail() throws IOException {
 		em.addToAddress(toAddr);

File: unit/java/azkaban/test/execapp/FlowRunnerPipelineTest.java
Patch:
@@ -73,7 +73,7 @@ public void setUp() throws Exception {
 			FileUtils.deleteDirectory(workingDir);
 		}
 		workingDir.mkdirs();
-		jobtypeManager = new JobTypeManager(null, this.getClass().getClassLoader());
+		jobtypeManager = new JobTypeManager(null, null, this.getClass().getClassLoader());
 		JobTypePluginSet pluginSet = jobtypeManager.getJobTypePluginSet();
 		
 		pluginSet.addPluginClass("java", JavaJob.class);

File: unit/java/azkaban/test/execapp/FlowRunnerTest.java
Patch:
@@ -47,7 +47,7 @@ public void setUp() throws Exception {
 			}
 			workingDir.mkdirs();
 		}
-		jobtypeManager = new JobTypeManager(null, this.getClass().getClassLoader());
+		jobtypeManager = new JobTypeManager(null, null, this.getClass().getClassLoader());
 		JobTypePluginSet pluginSet = jobtypeManager.getJobTypePluginSet();
 		pluginSet.addPluginClass("java", JavaJob.class);
 		pluginSet.addPluginClass("test", InteractiveTestJob.class);

File: unit/java/azkaban/test/execapp/JobRunnerTest.java
Patch:
@@ -41,7 +41,7 @@ public void setUp() throws Exception {
 			FileUtils.deleteDirectory(workingDir);
 		}
 		workingDir.mkdirs();
-		jobtypeManager = new JobTypeManager(null, this.getClass().getClassLoader());
+		jobtypeManager = new JobTypeManager(null, null, this.getClass().getClassLoader());
 		
 		jobtypeManager.getJobTypePluginSet().addPluginClass("java", JavaJob.class);
 	}

File: unit/java/azkaban/test/execapp/event/LocalFlowWatcherTest.java
Patch:
@@ -36,7 +36,7 @@ public class LocalFlowWatcherTest {
 	
 	@Before
 	public void setUp() throws Exception {
-		jobtypeManager = new JobTypeManager(null, this.getClass().getClassLoader());
+		jobtypeManager = new JobTypeManager(null, null, this.getClass().getClassLoader());
 		jobtypeManager.getJobTypePluginSet().addPluginClass("java", JavaJob.class);
 		fakeProjectLoader = new MockProjectLoader(workingDir);
 	}

File: unit/java/azkaban/test/execapp/event/RemoteFlowWatcherTest.java
Patch:
@@ -37,7 +37,7 @@ public class RemoteFlowWatcherTest {
 	
 	@Before
 	public void setUp() throws Exception {
-		jobtypeManager = new JobTypeManager(null, this.getClass().getClassLoader());
+		jobtypeManager = new JobTypeManager(null, null, this.getClass().getClassLoader());
 		jobtypeManager.getJobTypePluginSet().addPluginClass("java", JavaJob.class);
 		fakeProjectLoader = new MockProjectLoader(workingDir);
 	}

File: unit/java/azkaban/test/jobtype/JobTypeManagerTest.java
Patch:
@@ -52,7 +52,7 @@ public void setUp() throws Exception {
 		jobTypeDir.mkdirs();
 		
 		FileUtils.copyDirectory(new File("unit/plugins/jobtypes"), jobTypeDir);
-		manager = new JobTypeManager(TEST_PLUGIN_DIR, this.getClass().getClassLoader());
+		manager = new JobTypeManager(TEST_PLUGIN_DIR, null, this.getClass().getClassLoader());
 	}
 	
 	@After

File: src/main/java/azkaban/execapp/FlowRunner.java
Patch:
@@ -966,8 +966,6 @@ else if (node.getStatus() == Status.FAILED || node.getStatus() == Status.KILLED)
 		}
 		flow.setUpdateTime(System.currentTimeMillis());
 		flow.setEndTime(-1);
-		flow.setStartTime(maxStartTime);
-		
 		logger.info("Resetting flow '" + flow.getNestedId() + "' from " + oldFlowState + " to " + flow.getStatus());
 	}
 	

File: src/main/java/azkaban/executor/ConnectorParams.java
Patch:
@@ -32,6 +32,7 @@ public interface ConnectorParams {
 	public static final String LOG_ACTION = "log";
 	public static final String ATTACHMENTS_ACTION = "attachments";
 	public static final String METADATA_ACTION = "metadata";
+	public static final String RELOAD_JOBTYPE_PLUGINS_ACTION = "reloadJobTypePlugins";
 	
 	public static final String MODIFY_EXECUTION_ACTION = "modifyExecution";
 	public static final String MODIFY_EXECUTION_ACTION_TYPE = "modifyType";

File: src/main/java/azkaban/user/UserManager.java
Patch:
@@ -34,7 +34,7 @@ public interface UserManager {
 	 * @throws UserManagerException If the username/password combination doesn't exist.
 	 */
 	public User getUser(String username, String password) throws UserManagerException;
-	
+
 	/**
 	 * Returns true if the user is valid. This is used when adding permissions for users
 	 * 

File: unit/java/azkaban/test/execapp/JobRunnerTest.java
Patch:
@@ -42,7 +42,8 @@ public void setUp() throws Exception {
 		}
 		workingDir.mkdirs();
 		jobtypeManager = new JobTypeManager(null, this.getClass().getClassLoader());
-		jobtypeManager.registerJobType("java", JavaJob.class);
+		
+		jobtypeManager.getJobTypePluginSet().addPluginClass("java", JavaJob.class);
 	}
 
 	@After

File: unit/java/azkaban/test/execapp/event/LocalFlowWatcherTest.java
Patch:
@@ -37,7 +37,7 @@ public class LocalFlowWatcherTest {
 	@Before
 	public void setUp() throws Exception {
 		jobtypeManager = new JobTypeManager(null, this.getClass().getClassLoader());
-		jobtypeManager.registerJobType("java", JavaJob.class);
+		jobtypeManager.getJobTypePluginSet().addPluginClass("java", JavaJob.class);
 		fakeProjectLoader = new MockProjectLoader(workingDir);
 	}
 	

File: unit/java/azkaban/test/execapp/event/RemoteFlowWatcherTest.java
Patch:
@@ -38,7 +38,7 @@ public class RemoteFlowWatcherTest {
 	@Before
 	public void setUp() throws Exception {
 		jobtypeManager = new JobTypeManager(null, this.getClass().getClassLoader());
-		jobtypeManager.registerJobType("java", JavaJob.class);
+		jobtypeManager.getJobTypePluginSet().addPluginClass("java", JavaJob.class);
 		fakeProjectLoader = new MockProjectLoader(workingDir);
 	}
 	

File: src/main/java/azkaban/executor/ConnectorParams.java
Patch:
@@ -32,6 +32,7 @@ public interface ConnectorParams {
 	public static final String LOG_ACTION = "log";
 	public static final String ATTACHMENTS_ACTION = "attachments";
 	public static final String METADATA_ACTION = "metadata";
+	public static final String RELOAD_JOBTYPE_PLUGINS_ACTION = "reloadJobTypePlugins";
 	
 	public static final String MODIFY_EXECUTION_ACTION = "modifyExecution";
 	public static final String MODIFY_EXECUTION_ACTION_TYPE = "modifyType";

File: unit/java/azkaban/test/execapp/JobRunnerTest.java
Patch:
@@ -42,7 +42,8 @@ public void setUp() throws Exception {
 		}
 		workingDir.mkdirs();
 		jobtypeManager = new JobTypeManager(null, this.getClass().getClassLoader());
-		jobtypeManager.registerJobType("java", JavaJob.class);
+		
+		jobtypeManager.getJobTypePluginSet().addPluginClass("java", JavaJob.class);
 	}
 
 	@After

File: unit/java/azkaban/test/execapp/event/LocalFlowWatcherTest.java
Patch:
@@ -37,7 +37,7 @@ public class LocalFlowWatcherTest {
 	@Before
 	public void setUp() throws Exception {
 		jobtypeManager = new JobTypeManager(null, this.getClass().getClassLoader());
-		jobtypeManager.registerJobType("java", JavaJob.class);
+		jobtypeManager.getJobTypePluginSet().addPluginClass("java", JavaJob.class);
 		fakeProjectLoader = new MockProjectLoader(workingDir);
 	}
 	

File: unit/java/azkaban/test/execapp/event/RemoteFlowWatcherTest.java
Patch:
@@ -38,7 +38,7 @@ public class RemoteFlowWatcherTest {
 	@Before
 	public void setUp() throws Exception {
 		jobtypeManager = new JobTypeManager(null, this.getClass().getClassLoader());
-		jobtypeManager.registerJobType("java", JavaJob.class);
+		jobtypeManager.getJobTypePluginSet().addPluginClass("java", JavaJob.class);
 		fakeProjectLoader = new MockProjectLoader(workingDir);
 	}
 	

File: src/main/java/azkaban/jobtype/JobTypePluginSet.java
Patch:
@@ -12,8 +12,8 @@
  * This contains the jobClass objects, the properties for loading plugins, and the
  * properties given by default to the plugin.
  * 
- * This class is not thread safe, so adding to this class should only occur when
- * 
+ * This class is not thread safe, so adding to this class should only be populated 
+ * and controlled by the JobTypeManager
  */
 public class JobTypePluginSet {
 	private Map<String, Class<? extends Job>> jobToClass;

File: src/main/java/azkaban/executor/ConnectorParams.java
Patch:
@@ -32,6 +32,7 @@ public interface ConnectorParams {
 	public static final String LOG_ACTION = "log";
 	public static final String ATTACHMENTS_ACTION = "attachments";
 	public static final String METADATA_ACTION = "metadata";
+	public static final String RELOAD_JOBTYPE_PLUGINS_ACTION = "reloadJobTypePlugins";
 	
 	public static final String MODIFY_EXECUTION_ACTION = "modifyExecution";
 	public static final String MODIFY_EXECUTION_ACTION_TYPE = "modifyType";

File: unit/java/azkaban/test/execapp/JobRunnerTest.java
Patch:
@@ -42,7 +42,8 @@ public void setUp() throws Exception {
 		}
 		workingDir.mkdirs();
 		jobtypeManager = new JobTypeManager(null, this.getClass().getClassLoader());
-		jobtypeManager.registerJobType("java", JavaJob.class);
+		
+		jobtypeManager.getJobTypePluginSet().addPluginClass("java", JavaJob.class);
 	}
 
 	@After

File: unit/java/azkaban/test/execapp/event/LocalFlowWatcherTest.java
Patch:
@@ -37,7 +37,7 @@ public class LocalFlowWatcherTest {
 	@Before
 	public void setUp() throws Exception {
 		jobtypeManager = new JobTypeManager(null, this.getClass().getClassLoader());
-		jobtypeManager.registerJobType("java", JavaJob.class);
+		jobtypeManager.getJobTypePluginSet().addPluginClass("java", JavaJob.class);
 		fakeProjectLoader = new MockProjectLoader(workingDir);
 	}
 	

File: unit/java/azkaban/test/execapp/event/RemoteFlowWatcherTest.java
Patch:
@@ -38,7 +38,7 @@ public class RemoteFlowWatcherTest {
 	@Before
 	public void setUp() throws Exception {
 		jobtypeManager = new JobTypeManager(null, this.getClass().getClassLoader());
-		jobtypeManager.registerJobType("java", JavaJob.class);
+		jobtypeManager.getJobTypePluginSet().addPluginClass("java", JavaJob.class);
 		fakeProjectLoader = new MockProjectLoader(workingDir);
 	}
 	

File: src/main/java/azkaban/project/JdbcProjectLoader.java
Patch:
@@ -271,7 +271,6 @@ public void uploadProjectFile(Project project, int version, String filetype, Str
 		}
 	}
 
-	@SuppressWarnings("resource")
 	private void uploadProjectFile(Connection connection, Project project, int version, String filetype, String filename, File localFile, String uploader) throws ProjectManagerException {
 		QueryRunner runner = new QueryRunner();
 		long updateTime = System.currentTimeMillis();
@@ -361,7 +360,6 @@ public ProjectFileHandler getUploadedFile(int projectId, int version) throws Pro
 		return handler;
 	}
 	
-	@SuppressWarnings("resource")
 	private ProjectFileHandler getUploadedFile(Connection connection, int projectId, int version) throws ProjectManagerException {
 		QueryRunner runner = new QueryRunner();
 		ProjectVersionResultHandler pfHandler = new ProjectVersionResultHandler();

File: src/main/java/azkaban/project/JdbcProjectLoader.java
Patch:
@@ -271,7 +271,6 @@ public void uploadProjectFile(Project project, int version, String filetype, Str
 		}
 	}
 
-	@SuppressWarnings("resource")
 	private void uploadProjectFile(Connection connection, Project project, int version, String filetype, String filename, File localFile, String uploader) throws ProjectManagerException {
 		QueryRunner runner = new QueryRunner();
 		long updateTime = System.currentTimeMillis();
@@ -361,7 +360,6 @@ public ProjectFileHandler getUploadedFile(int projectId, int version) throws Pro
 		return handler;
 	}
 	
-	@SuppressWarnings("resource")
 	private ProjectFileHandler getUploadedFile(Connection connection, int projectId, int version) throws ProjectManagerException {
 		QueryRunner runner = new QueryRunner();
 		ProjectVersionResultHandler pfHandler = new ProjectVersionResultHandler();

File: src/java/azkaban/execapp/FlowRunner.java
Patch:
@@ -975,8 +975,6 @@ else if (node.getStatus() == Status.FAILED || node.getStatus() == Status.KILLED)
 		}
 		flow.setUpdateTime(System.currentTimeMillis());
 		flow.setEndTime(-1);
-		flow.setStartTime(maxStartTime);
-		
 		logger.info("Resetting flow '" + flow.getNestedId() + "' from " + oldFlowState + " to " + flow.getStatus());
 	}
 	

File: src/java/azkaban/execapp/FlowRunner.java
Patch:
@@ -971,8 +971,6 @@ else if (node.getStatus() == Status.FAILED || node.getStatus() == Status.KILLED)
 		}
 		flow.setUpdateTime(System.currentTimeMillis());
 		flow.setEndTime(-1);
-		flow.setStartTime(maxStartTime);
-		
 		logger.info("Resetting flow '" + flow.getNestedId() + "' from " + oldFlowState + " to " + flow.getStatus());
 	}
 	

File: src/java/azkaban/jmx/JmxTriggerManagerMBean.java
Patch:
@@ -3,7 +3,7 @@
 public interface JmxTriggerManagerMBean {	
 	
 	@DisplayName("OPERATION: getLastThreadCheckTime")
-	public String getLastRunnerThreadCheckTime();
+	public long getLastRunnerThreadCheckTime();
 
 	@DisplayName("OPERATION: isThreadActive")
 	public boolean isRunnerThreadActive();

File: src/java/azkaban/project/JdbcProjectLoader.java
Patch:
@@ -271,6 +271,7 @@ public void uploadProjectFile(Project project, int version, String filetype, Str
 		}
 	}
 
+	@SuppressWarnings("resource")
 	private void uploadProjectFile(Connection connection, Project project, int version, String filetype, String filename, File localFile, String uploader) throws ProjectManagerException {
 		QueryRunner runner = new QueryRunner();
 		long updateTime = System.currentTimeMillis();
@@ -360,6 +361,7 @@ public ProjectFileHandler getUploadedFile(int projectId, int version) throws Pro
 		return handler;
 	}
 	
+	@SuppressWarnings("resource")
 	private ProjectFileHandler getUploadedFile(Connection connection, int projectId, int version) throws ProjectManagerException {
 		QueryRunner runner = new QueryRunner();
 		ProjectVersionResultHandler pfHandler = new ProjectVersionResultHandler();

File: unit/java/azkaban/test/execapp/FlowRunnerPipelineTest.java
Patch:
@@ -5,10 +5,9 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import junit.framework.Assert;
-
 import org.apache.commons.io.FileUtils;
 import org.apache.log4j.Logger;
+import org.junit.Assert;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;

File: unit/java/azkaban/test/execapp/FlowRunnerTest2.java
Patch:
@@ -5,10 +5,9 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import junit.framework.Assert;
-
 import org.apache.commons.io.FileUtils;
 import org.apache.log4j.Logger;
+import org.junit.Assert;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;

File: unit/java/azkaban/test/executor/ExecutableFlowTest.java
Patch:
@@ -8,9 +8,8 @@
 import java.util.Map;
 import java.util.Set;
 
-import junit.framework.Assert;
-
 import org.apache.log4j.Logger;
+import org.junit.Assert;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;

File: unit/java/azkaban/test/utils/DirectoryFlowLoaderTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import java.io.File;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import org.apache.log4j.Logger;
 import org.junit.Test;

File: src/java/azkaban/database/DataSourceUtils.java
Patch:
@@ -125,6 +125,8 @@ private MySQLBasicDataSource(String host, int port, String dbName, String user,
 			super();
 			
 			String url = "jdbc:mysql://" + (host + ":" + port + "/" + dbName);
+			addConnectionProperty("useUnicode","yes");
+			addConnectionProperty("characterEncoding","UTF-8");
 			setDriverClassName("com.mysql.jdbc.Driver");
 			setUsername(user);
 			setPassword(password);

File: src/java/azkaban/database/DataSourceUtils.java
Patch:
@@ -124,7 +124,7 @@ public static class MySQLBasicDataSource extends AzkabanDataSource {
 		private MySQLBasicDataSource(String host, int port, String dbName, String user, String password, int numConnections) {
 			super();
 			
-			String url = "jdbc:mysql://" + (host + ":" + port + "/" + dbName+"?useUnicode=yes&characterEncoding=UTF-8");
+			String url = "jdbc:mysql://" + (host + ":" + port + "/" + dbName + "?useUnicode=yes&characterEncoding=UTF-8");
 			setDriverClassName("com.mysql.jdbc.Driver");
 			setUsername(user);
 			setPassword(password);

File: src/java/azkaban/database/DataSourceUtils.java
Patch:
@@ -124,7 +124,7 @@ public static class MySQLBasicDataSource extends AzkabanDataSource {
 		private MySQLBasicDataSource(String host, int port, String dbName, String user, String password, int numConnections) {
 			super();
 			
-			String url = "jdbc:mysql://" + (host + ":" + port + "/" + dbName);
+			String url = "jdbc:mysql://" + (host + ":" + port + "/" + dbName+"?useUnicode=yes&characterEncoding=UTF-8");
 			setDriverClassName("com.mysql.jdbc.Driver");
 			setUsername(user);
 			setPassword(password);

File: unit/java/azkaban/test/project/JdbcProjectLoaderTest.java
Patch:
@@ -35,7 +35,6 @@
 
 public class JdbcProjectLoaderTest {
 	private static boolean testDBExists;
-	//@TODO remove this and turn into local host.
 	private static final String host = "localhost";
 	private static final int port = 3306;
 	private static final String database = "test";

File: src/java/azkaban/webapp/AzkabanWebServer.java
Patch:
@@ -999,7 +999,7 @@ private static void loadViewerPlugins(Context root, String pluginPath, VelocityE
 			
 			String pluginName = pluginProps.getString("viewer.name");
 			String pluginWebPath = pluginProps.getString("viewer.path");
-			String pluginJobType = pluginProps.getString("viewer.jobtype", null);
+			String pluginJobTypes = pluginProps.getString("viewer.jobtypes", null);
 			int pluginOrder = pluginProps.getInt("viewer.order", 0);
 			boolean pluginHidden = pluginProps.getBoolean("viewer.hidden", false);
 			List<String> extLibClasspath = pluginProps.getStringList("viewer.external.classpaths", (List<String>)null);
@@ -1108,7 +1108,7 @@ private static void loadViewerPlugins(Context root, String pluginPath, VelocityE
 						pluginWebPath, 
 						pluginOrder, 
 						pluginHidden,
-						pluginJobType));
+						pluginJobTypes));
 		}
 		
 		// Velocity needs the jar resource paths to be set.

File: src/java/azkaban/webapp/servlet/ProjectManagerServlet.java
Patch:
@@ -944,10 +944,9 @@ private void handleJobHistoryPage(HttpServletRequest req, HttpServletResponse re
 				jobInfo = null;
 			}
 			page.add("history", jobInfo);
+
+			page.add("previous", new PageSelection("Previous", pageSize, true, false, Math.max(pageNum - 1, 1)));
 			
-			if (pageNum == 1) {
-				page.add("previous", new PageSelection("Previous", pageSize, true, false, pageNum - 1));
-			}
 			page.add("next", new PageSelection("Next", pageSize, false, false, Math.min(pageNum + 1, maxPage)));
 
 			if (jobInfo != null) {

File: src/java/azkaban/webapp/servlet/ProjectManagerServlet.java
Patch:
@@ -944,10 +944,9 @@ private void handleJobHistoryPage(HttpServletRequest req, HttpServletResponse re
 				jobInfo = null;
 			}
 			page.add("history", jobInfo);
+
+			page.add("previous", new PageSelection("Previous", pageSize, true, false, Math.max(pageNum - 1, 1)));
 			
-			if (pageNum == 1) {
-				page.add("previous", new PageSelection("Previous", pageSize, true, false, pageNum - 1));
-			}
 			page.add("next", new PageSelection("Next", pageSize, false, false, Math.min(pageNum + 1, maxPage)));
 
 			if (jobInfo != null) {

File: src/java/azkaban/execapp/JobRunner.java
Patch:
@@ -434,7 +434,6 @@ public void run() {
 				writeStatus();
 				fireEvent(Event.create(this, Type.JOB_STATUS_CHANGED), false);
 				runJob();
-				writeStatus();
 			}
 			else {
 				changeStatus(Status.FAILED);
@@ -451,6 +450,7 @@ public void run() {
 		fireEvent(Event.create(this, Type.JOB_FINISHED), false);
 		finalizeLogFile();
 		finalizeAttachmentFile();
+		writeStatus();
 	}
 	
 	private boolean prepareJob() throws RuntimeException {

File: src/java/azkaban/execapp/JobRunner.java
Patch:
@@ -434,7 +434,6 @@ public void run() {
 				writeStatus();
 				fireEvent(Event.create(this, Type.JOB_STATUS_CHANGED), false);
 				runJob();
-				writeStatus();
 			}
 			else {
 				changeStatus(Status.FAILED);
@@ -451,6 +450,7 @@ public void run() {
 		fireEvent(Event.create(this, Type.JOB_FINISHED), false);
 		finalizeLogFile();
 		finalizeAttachmentFile();
+		writeStatus();
 	}
 	
 	private boolean prepareJob() throws RuntimeException {

File: src/java/azkaban/execapp/JobRunner.java
Patch:
@@ -434,7 +434,6 @@ public void run() {
 				writeStatus();
 				fireEvent(Event.create(this, Type.JOB_STATUS_CHANGED), false);
 				runJob();
-				writeStatus();
 			}
 			else {
 				changeStatus(Status.FAILED);
@@ -451,6 +450,7 @@ public void run() {
 		fireEvent(Event.create(this, Type.JOB_FINISHED), false);
 		finalizeLogFile();
 		finalizeAttachmentFile();
+		writeStatus();
 	}
 	
 	private boolean prepareJob() throws RuntimeException {

File: src/java/azkaban/webapp/servlet/ScheduleServlet.java
Patch:
@@ -145,14 +145,13 @@ private void ajaxSetSla(HttpServletRequest req, HashMap<String, Object> ret, Use
 				SlaOption sla;
 				try {
 				sla = parseSlaSetting(settings.get(set));
-				sla.getInfo().put(SlaOption.INFO_FLOW_NAME, sched.getFlowName());
-				sla.getInfo().put(SlaOption.INFO_EMAIL_LIST, slaEmails);
 				}
 				catch (Exception e) {
 					throw new ServletException(e);
 				}
 				if(sla != null) {
-					sla.getInfo().put("SlaEmails", slaEmails);
+					sla.getInfo().put(SlaOption.INFO_FLOW_NAME, sched.getFlowName());
+					sla.getInfo().put(SlaOption.INFO_EMAIL_LIST, slaEmails);
 					slaOptions.add(sla);
 				}
 			}

File: src/java/azkaban/webapp/servlet/ScheduleServlet.java
Patch:
@@ -145,14 +145,13 @@ private void ajaxSetSla(HttpServletRequest req, HashMap<String, Object> ret, Use
 				SlaOption sla;
 				try {
 				sla = parseSlaSetting(settings.get(set));
-				sla.getInfo().put(SlaOption.INFO_FLOW_NAME, sched.getFlowName());
-				sla.getInfo().put(SlaOption.INFO_EMAIL_LIST, slaEmails);
 				}
 				catch (Exception e) {
 					throw new ServletException(e);
 				}
 				if(sla != null) {
-					sla.getInfo().put("SlaEmails", slaEmails);
+					sla.getInfo().put(SlaOption.INFO_FLOW_NAME, sched.getFlowName());
+					sla.getInfo().put(SlaOption.INFO_EMAIL_LIST, slaEmails);
 					slaOptions.add(sla);
 				}
 			}

File: src/java/azkaban/trigger/TriggerManager.java
Patch:
@@ -239,7 +239,7 @@ public void run() {
 						if(runnerThreadIdleTime < 0) {
 							logger.error("Trigger manager thread " + this.getName() + " is too busy!");
 						} else {
-							wait(runnerThreadIdleTime);
+							syncObj.wait(runnerThreadIdleTime);
 						}
 					} catch(InterruptedException e) {
 						logger.info("Interrupted. Probably to shut down.");

File: src/java/azkaban/trigger/TriggerManager.java
Patch:
@@ -239,7 +239,7 @@ public void run() {
 						if(runnerThreadIdleTime < 0) {
 							logger.error("Trigger manager thread " + this.getName() + " is too busy!");
 						} else {
-							wait(runnerThreadIdleTime);
+							syncObj.wait(runnerThreadIdleTime);
 						}
 					} catch(InterruptedException e) {
 						logger.info("Interrupted. Probably to shut down.");

File: src/java/azkaban/trigger/ConditionChecker.java
Patch:
@@ -40,7 +40,4 @@ public interface ConditionChecker {
 	
 	long getNextCheckTime();
 	
-//	void setCondition(Condition c);
-//	
-//	String getDescription();
 }

File: src/java/azkaban/project/JdbcProjectLoader.java
Patch:
@@ -271,7 +271,6 @@ public void uploadProjectFile(Project project, int version, String filetype, Str
 		}
 	}
 
-	@SuppressWarnings("resource")
 	private void uploadProjectFile(Connection connection, Project project, int version, String filetype, String filename, File localFile, String uploader) throws ProjectManagerException {
 		QueryRunner runner = new QueryRunner();
 		long updateTime = System.currentTimeMillis();
@@ -361,7 +360,6 @@ public ProjectFileHandler getUploadedFile(int projectId, int version) throws Pro
 		return handler;
 	}
 	
-	@SuppressWarnings("resource")
 	private ProjectFileHandler getUploadedFile(Connection connection, int projectId, int version) throws ProjectManagerException {
 		QueryRunner runner = new QueryRunner();
 		ProjectVersionResultHandler pfHandler = new ProjectVersionResultHandler();

File: src/java/azkaban/webapp/AzkabanWebServer.java
Patch:
@@ -26,7 +26,6 @@
 import java.net.URLClassLoader;
 import java.util.ArrayList;
 import java.util.Collections;
-import java.util.Comparator;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;

File: src/java/azkaban/webapp/plugin/PluginRegistry.java
Patch:
@@ -21,7 +21,6 @@
 import java.util.HashMap;
 import java.util.Map;
 import java.util.TreeSet;
-import java.util.Set;
 
 public class PluginRegistry {
 

File: src/java/azkaban/executor/ExecutorManager.java
Patch:
@@ -80,7 +80,6 @@ public class ExecutorManager extends EventHandler implements ExecutorManagerAdap
 	File cacheDir;
 	
 	public ExecutorManager(Props props, ExecutorLoader loader, Map<String, Alerter> alters) throws ExecutorManagerException {
-		
 		this.executorLoader = loader;
 		this.loadRunningFlows();
 		executorHost = props.getString("executor.host", "localhost");

File: src/java/azkaban/migration/schedule2trigger/Schedule2Trigger.java
Patch:
@@ -1,6 +1,7 @@
 package azkaban.migration.schedule2trigger;
 
 import java.io.File;
+
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.HashMap;
@@ -26,6 +27,7 @@
 import azkaban.trigger.builtin.ExecuteFlowAction;
 import azkaban.utils.Utils;
 
+@SuppressWarnings("deprecation")
 public class Schedule2Trigger {
 	
 	private static final Logger logger = Logger.getLogger(Schedule2Trigger.class);
@@ -162,6 +164,7 @@ private static void writeScheduleFile(azkaban.migration.scheduler.Schedule sched
 		props.storeLocal(outputFile);
 	}
 
+	@SuppressWarnings("unchecked")
 	private static void file2ScheduleTrigger() throws Exception {
 		
 		TriggerLoader triggerLoader = new JdbcTriggerLoader(props);

File: unit/java/azkaban/test/execapp/FlowRunnerTest.java
Patch:
@@ -315,7 +315,7 @@ public void execAndCancel() throws Exception {
 		testStatus(exFlow, "job4", Status.FAILED);
 		testStatus(exFlow, "job6", Status.FAILED);
 		
-		Assert.assertTrue("Expected KILLED status instead got " + exFlow.getStatus(),exFlow.getStatus() == Status.KILLED);
+		Assert.assertTrue("Expected FAILED status instead got " + exFlow.getStatus(),exFlow.getStatus() == Status.FAILED);
 		
 		try {
 			eventCollector.checkEventExists(new Type[] {Type.FLOW_STARTED, Type.FLOW_FINISHED});

File: src/java/azkaban/executor/ExecutableFlow.java
Patch:
@@ -89,7 +89,8 @@ public ExecutionOptions getExecutionOptions() {
 	protected void setFlow(Project project, Flow flow) {
 		super.setFlow(project, flow);
 		executionOptions = new ExecutionOptions();
-
+		executionOptions.setMailCreator(flow.getMailCreator());
+		
 		if (flow.getSuccessEmails() != null) {
 			executionOptions.setSuccessEmails(flow.getSuccessEmails());
 		}

File: src/java/azkaban/jobExecutor/AbstractProcessJob.java
Patch:
@@ -162,7 +162,8 @@ public File createFlattenedPropsFile(final String workingDir) {
 		File directory = new File(workingDir);
 		File tempFile = null;
 		try {
-			tempFile = File.createTempFile(getId() + "_", "_tmp", directory);
+			// The temp file prefix must be at least 3 characters.
+			tempFile = File.createTempFile(getId() + "_props_", "_tmp", directory);
 			jobProps.storeFlattened(tempFile);
 		} catch (IOException e) {
 			throw new RuntimeException("Failed to create temp property file ", e);

File: src/java/azkaban/utils/Utils.java
Patch:
@@ -322,7 +322,7 @@ public static void copyStream(InputStream input, OutputStream output) throws IOE
 	public static ReadablePeriod parsePeriodString(String periodStr) {
 		ReadablePeriod period;
 		char periodUnit = periodStr.charAt(periodStr.length() - 1);
-		if (periodUnit == 'n') {
+		if (periodStr.equals("null") || periodUnit == 'n') {
 			return null;
 		}
 

File: src/java/azkaban/user/XmlUserManager.java
Patch:
@@ -215,7 +215,7 @@ private void parseRoleTag(Node node, HashMap<String, Role> roles) {
 		Node permissionAttr = roleAttrMap.getNamedItem(ROLEPERMISSIONS_ATTR);
 		if (permissionAttr == null) {
 			throw new RuntimeException(
-					"Error loading user. The password doesn't exist for "+ permissionAttr);
+					"Error loading role. The role 'permissions' attribute doesn't exist");
 		}
 
 		String roleName = roleNameAttr.getNodeValue();

File: src/java/azkaban/webapp/AzkabanWebServer.java
Patch:
@@ -758,6 +758,7 @@ public static void main(String[] args) throws Exception {
 		root.addServlet(staticServlet, "/css/*");
 		root.addServlet(staticServlet, "/js/*");
 		root.addServlet(staticServlet, "/images/*");
+		root.addServlet(staticServlet, "/fonts/*");
 		root.addServlet(staticServlet, "/favicon.ico");
 		
 		root.addServlet(new ServletHolder(new ProjectManagerServlet()),"/manager");

File: src/java/azkaban/trigger/ActionTypeLoader.java
Patch:
@@ -30,8 +30,6 @@ public class ActionTypeLoader {
 	private static Logger logger = Logger.getLogger(ActionTypeLoader.class);
 	
 	public static final String DEFAULT_TRIGGER_ACTION_PLUGIN_DIR = "plugins/triggeractions";
-	private static final String ACTIONTYPECONFFILE = "plugin.properties"; // need jars.to.include property, will be loaded with user property
-	private static final String COMMONCONFFILE = "common.properties";	// common properties for multiple plugins
 
 	protected static Map<String, Class<? extends TriggerAction>> actionToClass = new HashMap<String, Class<? extends TriggerAction>>();
 	

File: src/java/azkaban/trigger/builtin/CreateTriggerAction.java
Patch:
@@ -28,6 +28,7 @@ public class CreateTriggerAction implements TriggerAction {
 	public static final String type = "CreateTriggerAction";
 	private static TriggerManager triggerManager;
 	private Trigger trigger;
+	@SuppressWarnings("unused")
 	private Map<String, Object> context;
 	private String actionId;
 	

File: src/java/azkaban/trigger/builtin/ExecuteFlowAction.java
Patch:
@@ -27,7 +27,6 @@
 import azkaban.executor.ExecutionOptions;
 import azkaban.executor.ExecutorManagerAdapter;
 import azkaban.executor.ExecutorManagerException;
-import azkaban.executor.Status;
 import azkaban.flow.Flow;
 import azkaban.project.Project;
 import azkaban.project.ProjectManager;

File: src/java/azkaban/utils/Emailer.java
Patch:
@@ -36,7 +36,6 @@
 import azkaban.executor.mail.MailCreator;
 import azkaban.utils.EmailMessage;
 import azkaban.utils.Props;
-import azkaban.utils.Utils;
 
 public class Emailer extends AbstractMailer implements Alerter {
 	private static Logger logger = Logger.getLogger(Emailer.class);

File: src/java/azkaban/webapp/servlet/HistoryServlet.java
Patch:
@@ -31,7 +31,6 @@
 
 
 import azkaban.executor.ExecutableFlow;
-import azkaban.executor.ExecutorManager;
 import azkaban.executor.ExecutorManagerAdapter;
 import azkaban.executor.ExecutorManagerException;
 import azkaban.project.Project;

File: src/java/azkaban/webapp/servlet/JMXHttpServlet.java
Patch:
@@ -19,7 +19,6 @@
 import java.io.IOException;
 import java.util.HashMap;
 import java.util.Map;
-import java.util.Set;
 
 import javax.management.MBeanAttributeInfo;
 import javax.management.MBeanInfo;
@@ -32,7 +31,6 @@
 import org.apache.log4j.Logger;
 
 import azkaban.executor.ConnectorParams;
-import azkaban.executor.ExecutorManager;
 import azkaban.executor.ExecutorManagerAdapter;
 import azkaban.trigger.TriggerManager;
 import azkaban.user.Permission;

File: src/java/azkaban/webapp/servlet/ProjectManagerServlet.java
Patch:
@@ -44,7 +44,6 @@
 
 import azkaban.executor.ExecutableFlow;
 import azkaban.executor.ExecutableJobInfo;
-import azkaban.executor.ExecutorManager;
 import azkaban.executor.ExecutorManagerAdapter;
 import azkaban.executor.ExecutorManagerException;
 import azkaban.flow.Edge;

File: unit/java/azkaban/test/database/AzkabanDatabaseSetupTest.java
Patch:
@@ -6,11 +6,10 @@
 
 import javax.sql.DataSource;
 
-import junit.framework.Assert;
-
 import org.apache.commons.dbutils.QueryRunner;
 import org.apache.commons.io.FileUtils;
 import org.junit.AfterClass;
+import org.junit.Assert;
 import org.junit.BeforeClass;
 import org.junit.Test;
 

File: unit/java/azkaban/test/execapp/FlowRunnerTest.java
Patch:
@@ -4,10 +4,9 @@
 import java.io.IOException;
 import java.util.HashMap;
 
-import junit.framework.Assert;
-
 import org.apache.commons.io.FileUtils;
 import org.junit.After;
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 

File: unit/java/azkaban/test/execapp/JobRunnerTest.java
Patch:
@@ -4,11 +4,10 @@
 import java.io.IOException;
 import java.util.HashSet;
 
-import junit.framework.Assert;
-
 import org.apache.commons.io.FileUtils;
 import org.apache.log4j.Logger;
 import org.junit.After;
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 

File: unit/java/azkaban/test/execapp/ProjectVersionsTest.java
Patch:
@@ -3,8 +3,7 @@
 import java.util.ArrayList;
 import java.util.Collections;
 
-import junit.framework.Assert;
-
+import org.junit.Assert;
 import org.junit.Test;
 
 import azkaban.execapp.ProjectVersion;

File: unit/java/azkaban/test/execapp/event/BlockingStatusTest.java
Patch:
@@ -1,8 +1,8 @@
 package azkaban.test.execapp.event;
 
+import org.junit.Assert;
 import org.junit.Test;
 
-import junit.framework.Assert;
 import azkaban.execapp.event.BlockingStatus;
 import azkaban.executor.Status;
 

File: unit/java/azkaban/test/executor/JdbcExecutorLoaderTest.java
Patch:
@@ -6,17 +6,16 @@
 import java.sql.ResultSet;
 import java.sql.SQLException;
 import java.util.HashMap;
-import java.util.HashSet;
+import java.util.HashSet;	
 import java.util.Map;
 
 import javax.sql.DataSource;
 
-import junit.framework.Assert;
-
 import org.apache.commons.dbutils.DbUtils;
 import org.apache.commons.dbutils.QueryRunner;
 import org.apache.commons.dbutils.ResultSetHandler;
 import org.joda.time.DateTime;
+import org.junit.Assert;
 import org.junit.BeforeClass;
 import org.junit.Test;
 

File: unit/java/azkaban/test/project/JdbcProjectLoaderTest.java
Patch:
@@ -9,15 +9,13 @@
 
 import javax.sql.DataSource;
 
-import junit.framework.Assert;
-
 import org.apache.commons.dbutils.DbUtils;
 import org.apache.commons.dbutils.QueryRunner;
 import org.apache.commons.dbutils.ResultSetHandler;
+import org.junit.Assert;
 import org.junit.BeforeClass;
 import org.junit.Test;
 
-
 import azkaban.flow.Edge;
 import azkaban.flow.Flow;
 import azkaban.flow.Node;

File: unit/java/azkaban/test/trigger/ConditionTest.java
Patch:
@@ -1,7 +1,6 @@
 package azkaban.test.trigger;
 
 import java.io.File;
-import java.io.IOException;
 import java.util.HashMap;
 import java.util.Map;
 
@@ -14,7 +13,6 @@
 import azkaban.trigger.CheckerTypeLoader;
 import azkaban.trigger.Condition;
 import azkaban.trigger.ConditionChecker;
-import azkaban.trigger.TriggerException;
 import azkaban.trigger.builtin.BasicTimeChecker;
 import azkaban.utils.JSONUtils;
 import azkaban.utils.Props;
@@ -75,7 +73,6 @@ public void jsonConversionTest() throws Exception {
 		
 		Condition cond2 = Condition.fromJson(JSONUtils.parseJSONFromFile(temp));
 		
-		Map<String, ConditionChecker> checkers1 = cond.getCheckers();
 		Map<String, ConditionChecker> checkers2 = cond2.getCheckers();
 		
 		assertTrue(cond.getExpression().equals(cond2.getExpression()));

File: unit/java/azkaban/test/trigger/ExecuteFlowActionTest.java
Patch:
@@ -2,16 +2,13 @@
 
 import static org.junit.Assert.*;
 
-import java.lang.reflect.InvocationTargetException;
 import java.util.ArrayList;
 import java.util.List;
 
 import org.junit.Test;
 
 import azkaban.executor.ExecutionOptions;
 import azkaban.trigger.ActionTypeLoader;
-import azkaban.trigger.TriggerAction;
-import azkaban.trigger.TriggerException;
 import azkaban.trigger.builtin.ExecuteFlowAction;
 import azkaban.utils.Props;
 

File: unit/java/azkaban/test/trigger/ThresholdChecker.java
Patch:
@@ -2,9 +2,6 @@
 
 import java.util.Map;
 
-import org.joda.time.DateTime;
-import org.joda.time.DateTimeZone;
-
 import azkaban.trigger.ConditionChecker;
 
 

File: unit/java/azkaban/test/trigger/TriggerManagerTest.java
Patch:
@@ -12,13 +12,10 @@
 import org.junit.Before;
 import org.junit.Test;
 
-import azkaban.executor.ExecutorManager;
 import azkaban.trigger.Condition;
 import azkaban.trigger.ConditionChecker;
-import azkaban.trigger.CheckerTypeLoader;
 import azkaban.trigger.Trigger;
 import azkaban.trigger.TriggerAction;
-import azkaban.trigger.ActionTypeLoader;
 import azkaban.trigger.TriggerException;
 import azkaban.trigger.TriggerLoader;
 import azkaban.trigger.TriggerLoaderException;

File: unit/java/azkaban/test/trigger/TriggerTest.java
Patch:
@@ -1,7 +1,6 @@
 package azkaban.test.trigger;
 
 import java.io.File;
-import java.io.IOException;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;

File: unit/java/azkaban/test/utils/FileIOUtilsTest.java
Patch:
@@ -4,10 +4,9 @@
 import java.io.IOException;
 import java.io.UnsupportedEncodingException;
 
-import junit.framework.Assert;
-
 import org.apache.commons.io.FileUtils;
 import org.junit.After;
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 

File: unit/java/azkaban/test/utils/JsonUtilsTest.java
Patch:
@@ -5,8 +5,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import junit.framework.Assert;
-
+import org.junit.Assert;
 import org.junit.Test;
 
 import azkaban.utils.JSONUtils;

File: unit/java/azkaban/test/utils/PropsUtilsTest.java
Patch:
@@ -2,8 +2,7 @@
 
 import java.io.IOException;
 
-import junit.framework.Assert;
-
+import org.junit.Assert;
 import org.junit.Test;
 
 import azkaban.utils.Props;
@@ -88,7 +87,6 @@ public void testCyclesResolveProps() throws IOException {
 	
 	private void failIfNotException(Props props) {
 		try {
-			Props resolved = PropsUtils.resolveProps(props);
 			Assert.fail();
 		}
 		catch (UndefinedPropertyException e) {

File: unit/java/azkaban/test/utils/cache/CacheTest.java
Patch:
@@ -1,7 +1,6 @@
 package azkaban.test.utils.cache;
 
-import junit.framework.Assert;
-
+import org.junit.Assert;
 import org.junit.Test;
 
 import azkaban.utils.cache.Cache;

File: src/java/azkaban/trigger/ActionTypeLoader.java
Patch:
@@ -30,8 +30,6 @@ public class ActionTypeLoader {
 	private static Logger logger = Logger.getLogger(ActionTypeLoader.class);
 	
 	public static final String DEFAULT_TRIGGER_ACTION_PLUGIN_DIR = "plugins/triggeractions";
-	private static final String ACTIONTYPECONFFILE = "plugin.properties"; // need jars.to.include property, will be loaded with user property
-	private static final String COMMONCONFFILE = "common.properties";	// common properties for multiple plugins
 
 	protected static Map<String, Class<? extends TriggerAction>> actionToClass = new HashMap<String, Class<? extends TriggerAction>>();
 	

File: src/java/azkaban/trigger/CheckerTypeLoader.java
Patch:
@@ -30,8 +30,6 @@ public class CheckerTypeLoader {
 	private static Logger logger = Logger.getLogger(CheckerTypeLoader.class);
 	
 	public static final String DEFAULT_CONDITION_CHECKER_PLUGIN_DIR = "plugins/conditioncheckers";
-	private static final String CHECKERTYPECONFFILE = "plugin.properties"; // need jars.to.include property, will be loaded with user property
-	private static final String COMMONCONFFILE = "common.properties";	// common properties for multiple plugins
 	
 	protected static Map<String, Class<? extends ConditionChecker>> checkerToClass = new HashMap<String, Class<? extends ConditionChecker>>();
 	

File: src/java/azkaban/trigger/builtin/CreateTriggerAction.java
Patch:
@@ -28,6 +28,7 @@ public class CreateTriggerAction implements TriggerAction {
 	public static final String type = "CreateTriggerAction";
 	private static TriggerManager triggerManager;
 	private Trigger trigger;
+	@SuppressWarnings("unused")
 	private Map<String, Object> context;
 	private String actionId;
 	

File: unit/java/azkaban/test/database/AzkabanDatabaseSetupTest.java
Patch:
@@ -6,11 +6,10 @@
 
 import javax.sql.DataSource;
 
-import junit.framework.Assert;
-
 import org.apache.commons.dbutils.QueryRunner;
 import org.apache.commons.io.FileUtils;
 import org.junit.AfterClass;
+import org.junit.Assert;
 import org.junit.BeforeClass;
 import org.junit.Test;
 

File: unit/java/azkaban/test/execapp/FlowRunnerTest.java
Patch:
@@ -4,10 +4,9 @@
 import java.io.IOException;
 import java.util.HashMap;
 
-import junit.framework.Assert;
-
 import org.apache.commons.io.FileUtils;
 import org.junit.After;
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 

File: unit/java/azkaban/test/execapp/JobRunnerTest.java
Patch:
@@ -4,11 +4,10 @@
 import java.io.IOException;
 import java.util.HashSet;
 
-import junit.framework.Assert;
-
 import org.apache.commons.io.FileUtils;
 import org.apache.log4j.Logger;
 import org.junit.After;
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 

File: unit/java/azkaban/test/execapp/ProjectVersionsTest.java
Patch:
@@ -3,8 +3,7 @@
 import java.util.ArrayList;
 import java.util.Collections;
 
-import junit.framework.Assert;
-
+import org.junit.Assert;
 import org.junit.Test;
 
 import azkaban.execapp.ProjectVersion;

File: unit/java/azkaban/test/execapp/event/BlockingStatusTest.java
Patch:
@@ -1,8 +1,8 @@
 package azkaban.test.execapp.event;
 
+import org.junit.Assert;
 import org.junit.Test;
 
-import junit.framework.Assert;
 import azkaban.execapp.event.BlockingStatus;
 import azkaban.executor.Status;
 

File: unit/java/azkaban/test/executor/JdbcExecutorLoaderTest.java
Patch:
@@ -6,17 +6,16 @@
 import java.sql.ResultSet;
 import java.sql.SQLException;
 import java.util.HashMap;
-import java.util.HashSet;
+import java.util.HashSet;	
 import java.util.Map;
 
 import javax.sql.DataSource;
 
-import junit.framework.Assert;
-
 import org.apache.commons.dbutils.DbUtils;
 import org.apache.commons.dbutils.QueryRunner;
 import org.apache.commons.dbutils.ResultSetHandler;
 import org.joda.time.DateTime;
+import org.junit.Assert;
 import org.junit.BeforeClass;
 import org.junit.Test;
 

File: unit/java/azkaban/test/project/JdbcProjectLoaderTest.java
Patch:
@@ -9,15 +9,13 @@
 
 import javax.sql.DataSource;
 
-import junit.framework.Assert;
-
 import org.apache.commons.dbutils.DbUtils;
 import org.apache.commons.dbutils.QueryRunner;
 import org.apache.commons.dbutils.ResultSetHandler;
+import org.junit.Assert;
 import org.junit.BeforeClass;
 import org.junit.Test;
 
-
 import azkaban.flow.Edge;
 import azkaban.flow.Flow;
 import azkaban.flow.Node;

File: unit/java/azkaban/test/trigger/ConditionTest.java
Patch:
@@ -73,7 +73,6 @@ public void jsonConversionTest() throws Exception {
 		
 		Condition cond2 = Condition.fromJson(JSONUtils.parseJSONFromFile(temp));
 		
-		Map<String, ConditionChecker> checkers1 = cond.getCheckers();
 		Map<String, ConditionChecker> checkers2 = cond2.getCheckers();
 		
 		assertTrue(cond.getExpression().equals(cond2.getExpression()));

File: unit/java/azkaban/test/utils/FileIOUtilsTest.java
Patch:
@@ -4,10 +4,9 @@
 import java.io.IOException;
 import java.io.UnsupportedEncodingException;
 
-import junit.framework.Assert;
-
 import org.apache.commons.io.FileUtils;
 import org.junit.After;
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 

File: unit/java/azkaban/test/utils/JsonUtilsTest.java
Patch:
@@ -5,8 +5,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import junit.framework.Assert;
-
+import org.junit.Assert;
 import org.junit.Test;
 
 import azkaban.utils.JSONUtils;

File: unit/java/azkaban/test/utils/PropsUtilsTest.java
Patch:
@@ -2,8 +2,7 @@
 
 import java.io.IOException;
 
-import junit.framework.Assert;
-
+import org.junit.Assert;
 import org.junit.Test;
 
 import azkaban.utils.Props;
@@ -88,7 +87,6 @@ public void testCyclesResolveProps() throws IOException {
 	
 	private void failIfNotException(Props props) {
 		try {
-			Props resolved = PropsUtils.resolveProps(props);
 			Assert.fail();
 		}
 		catch (UndefinedPropertyException e) {

File: unit/java/azkaban/test/utils/cache/CacheTest.java
Patch:
@@ -1,7 +1,6 @@
 package azkaban.test.utils.cache;
 
-import junit.framework.Assert;
-
+import org.junit.Assert;
 import org.junit.Test;
 
 import azkaban.utils.cache.Cache;

File: src/java/azkaban/webapp/servlet/LoginAbstractAzkabanServlet.java
Patch:
@@ -64,9 +64,9 @@ public abstract class LoginAbstractAzkabanServlet extends AbstractAzkabanServlet
 		contextType.put(".jpeg", "image/jpeg");
 		contextType.put(".gif", "image/gif");
 		contextType.put(".jpg", "image/jpeg");
+		contextType.put(".tl", "text/dust-template");
 	}
 	
-	
 	private File webResourceDirectory = null;
 	
 	private MultipartParser multipartParser;

File: src/java/azkaban/webapp/AzkabanWebServer.java
Patch:
@@ -185,7 +185,7 @@ public AzkabanWebServer(Server server, Props props) throws Exception {
 		triggerManager = loadTriggerManager(props);
 		loadBuiltinCheckersAndActions();		
 		
-		// load all triggger agents here
+		// load all trigger agents here
 		scheduleManager = loadScheduleManager(triggerManager, props);
 		
 		String triggerPluginDir = props.getString("trigger.plugin.dir", "plugins/triggers");

File: src/java/azkaban/executor/ExecutorManagerAdapter.java
Patch:
@@ -10,7 +10,7 @@
 import azkaban.utils.FileIOUtils.JobMetaData;
 import azkaban.utils.FileIOUtils.LogData;
 
-public interface ExecutorManagerAdapter {
+public interface ExecutorManagerAdapter{
 	
 	public static final String LOCAL_MODE = "local";
 	public static final String REMOTE_MODE = "remote";

File: src/java/azkaban/trigger/Condition.java
Patch:
@@ -119,7 +119,7 @@ public void setExpression(String expr) {
 	}
 	
 	public boolean isMet() {
-		logger.info("Testing ondition " + expression);
+		logger.info("Testing condition " + expression);
 		return expression.evaluate(context).equals(Boolean.TRUE);
 	}
 	

File: unit/java/azkaban/test/trigger/TriggerManagerTest.java
Patch:
@@ -12,6 +12,7 @@
 import org.junit.Before;
 import org.junit.Test;
 
+import azkaban.executor.ExecutorManager;
 import azkaban.trigger.Condition;
 import azkaban.trigger.ConditionChecker;
 import azkaban.trigger.CheckerTypeLoader;
@@ -33,7 +34,6 @@ public class TriggerManagerTest {
 	public void setup() throws TriggerException, TriggerManagerException {
 		triggerLoader = new MockTriggerLoader();
 		
-		
 	}
 	
 	@After
@@ -47,7 +47,7 @@ public void TriggerManagerSimpleTest() throws TriggerManagerException {
 		
 		Props props = new Props();
 		props.put("trigger.scan.interval", 4000);
-		TriggerManager triggerManager = new TriggerManager(props, triggerLoader);
+		TriggerManager triggerManager = new TriggerManager(props, triggerLoader, null);
 		
 		triggerManager.registerCheckerType(ThresholdChecker.type, ThresholdChecker.class);
 		triggerManager.registerActionType(DummyTriggerAction.type, DummyTriggerAction.class);

File: src/java/azkaban/webapp/servlet/ProjectManagerServlet.java
Patch:
@@ -107,7 +107,7 @@ public void init(ServletConfig config) throws ServletException {
 
 	@Override
 	protected void handleGet(HttpServletRequest req, HttpServletResponse resp, Session session) throws ServletException, IOException {
-		if ( hasParam(req, "project") ) {
+		if (hasParam(req, "project") ) {
 			if (hasParam(req, "ajax")) {
 				handleAJAXAction(req, resp, session);
 			}
@@ -825,7 +825,6 @@ private void handleJobHistoryPage(HttpServletRequest req, HttpServletResponse re
 		pageStartValue++;
 		page.add("page5", new PageSelection(String.valueOf(pageStartValue), pageSize, pageStartValue > maxPage, pageStartValue == pageNum, Math.min(pageStartValue, maxPage)));
 
-		
 		page.render();
 	}
 	

File: src/java/azkaban/trigger/builtin/BasicTimeChecker.java
Patch:
@@ -168,7 +168,7 @@ public Object toJson() {
 		jsonObj.put("firstCheckTime", String.valueOf(firstCheckTime));
 		jsonObj.put("timezone", timezone.getID());
 		jsonObj.put("nextCheckTime", String.valueOf(nextCheckTime));
-		jsonObj.put("isRecurrint", String.valueOf(isRecurring));
+		jsonObj.put("isRecurring", String.valueOf(isRecurring));
 		jsonObj.put("skipPastChecks", String.valueOf(skipPastChecks));
 		jsonObj.put("period", Utils.createPeriodString(period));
 		jsonObj.put("id", id);

File: src/java/azkaban/execapp/AzkabanExecutorServer.java
Patch:
@@ -174,6 +174,7 @@ public static void main(String[] args) throws Exception {
 		// Setup time zone
 		if (azkabanSettings.containsKey(DEFAULT_TIMEZONE_ID)) {
 			String timezone = azkabanSettings.getString(DEFAULT_TIMEZONE_ID);
+			System.setProperty("user.timezone", timezone);
 			TimeZone.setDefault(TimeZone.getTimeZone(timezone));
 			DateTimeZone.setDefault(DateTimeZone.forID(timezone));
 

File: src/java/azkaban/webapp/AzkabanWebServer.java
Patch:
@@ -200,6 +200,7 @@ public AzkabanWebServer(Server server, Props props) throws Exception {
 		// Setup time zone
 		if (props.containsKey(DEFAULT_TIMEZONE_ID)) {
 			String timezone = props.getString(DEFAULT_TIMEZONE_ID);
+			System.setProperty("user.timezone", timezone);
 			TimeZone.setDefault(TimeZone.getTimeZone(timezone));
 			DateTimeZone.setDefault(DateTimeZone.forID(timezone));
 			logger.info("Setting timezone to " + timezone);

File: src/java/azkaban/execapp/JobRunner.java
Patch:
@@ -28,9 +28,9 @@
 import java.util.Collections;
 
 import org.apache.log4j.Appender;
+import org.apache.log4j.EnhancedPatternLayout;
 import org.apache.log4j.Layout;
 import org.apache.log4j.Logger;
-import org.apache.log4j.PatternLayout;
 import org.apache.log4j.RollingFileAppender;
 
 import azkaban.execapp.event.BlockingStatus;
@@ -51,7 +51,7 @@
 import azkaban.utils.Props;
 
 public class JobRunner extends EventHandler implements Runnable {
-	private static final Layout DEFAULT_LAYOUT = new PatternLayout("%d{dd-MM-yyyy HH:mm:ss z} %c{1} %p - %m\n");
+	private final Layout DEFAULT_LAYOUT = new EnhancedPatternLayout("%d{dd-MM-yyyy HH:mm:ss z} %c{1} %p - %m\n");
 	
 	private ExecutorLoader loader;
 	private Props props;

File: src/java/azkaban/jobtype/JobTypeManager.java
Patch:
@@ -91,7 +91,7 @@ private void loadDefaultTypes() throws JobTypeManagerException{
 		jobToClass.put("script", ScriptJob.class);	
 	}
 
-	// load Job Typs from dir
+	// load Job Types from jobtype plugin dir
 	private void loadPluginJobTypes() throws JobTypeManagerException
 	{
 		File jobPluginsDir = new File(jobtypePluginDir);

File: src/java/azkaban/jobtype/JobTypeManager.java
Patch:
@@ -91,7 +91,7 @@ private void loadDefaultTypes() throws JobTypeManagerException{
 		jobToClass.put("script", ScriptJob.class);	
 	}
 
-	// load Job Typs from dir
+	// load Job Types from jobtype plugin dir
 	private void loadPluginJobTypes() throws JobTypeManagerException
 	{
 		File jobPluginsDir = new File(jobtypePluginDir);

File: src/java/azkaban/execapp/AzkabanExecutorServer.java
Patch:
@@ -174,6 +174,7 @@ public static void main(String[] args) throws Exception {
 		// Setup time zone
 		if (azkabanSettings.containsKey(DEFAULT_TIMEZONE_ID)) {
 			String timezone = azkabanSettings.getString(DEFAULT_TIMEZONE_ID);
+			System.setProperty("user.timezone", timezone);
 			TimeZone.setDefault(TimeZone.getTimeZone(timezone));
 			DateTimeZone.setDefault(DateTimeZone.forID(timezone));
 

File: src/java/azkaban/webapp/AzkabanWebServer.java
Patch:
@@ -200,6 +200,7 @@ public AzkabanWebServer(Server server, Props props) throws Exception {
 		// Setup time zone
 		if (props.containsKey(DEFAULT_TIMEZONE_ID)) {
 			String timezone = props.getString(DEFAULT_TIMEZONE_ID);
+			System.setProperty("user.timezone", timezone);
 			TimeZone.setDefault(TimeZone.getTimeZone(timezone));
 			DateTimeZone.setDefault(DateTimeZone.forID(timezone));
 			logger.info("Setting timezone to " + timezone);

File: src/java/azkaban/webapp/servlet/Page.java
Patch:
@@ -61,6 +61,8 @@ public Page(HttpServletRequest request, HttpServletResponse response,
 	 */
 	public void render() {
 		try {
+			response.setHeader ("Content-type", "text/html; charset=UTF-8");
+			response.setCharacterEncoding ("UTF-8");
 			response.setContentType(mimeType);
 			engine.mergeTemplate(template, "UTF-8", context, response.getWriter());
 		} catch (Exception e) {

File: src/java/azkaban/sla/SlaOption.java
Patch:
@@ -10,7 +10,6 @@
 import org.joda.time.format.DateTimeFormatter;
 
 import azkaban.executor.ExecutableFlow;
-import azkaban.executor.ExecutorManagerException;
 
 public class SlaOption {
 	

File: src/java/azkaban/trigger/builtin/SlaAlertAction.java
Patch:
@@ -8,7 +8,6 @@
 import azkaban.alert.Alerter;
 import azkaban.executor.ExecutableFlow;
 import azkaban.executor.ExecutorManagerAdapter;
-import azkaban.executor.ExecutorManagerException;
 import azkaban.sla.SlaOption;
 import azkaban.trigger.TriggerAction;
 

File: src/java/azkaban/trigger/builtin/SlaChecker.java
Patch:
@@ -172,7 +172,6 @@ public static SlaChecker createFromJson(Object obj) throws Exception {
 		return createFromJson((HashMap<String, Object>)obj);
 	}
 	
-	@SuppressWarnings("unchecked")
 	public static SlaChecker createFromJson(HashMap<String, Object> obj) throws Exception {
 		Map<String, Object> jsonObj = (HashMap<String, Object>) obj;
 		if(!jsonObj.get("type").equals(type)) {

File: src/java/azkaban/user/Permission.java
Patch:
@@ -29,6 +29,7 @@ public enum Type {
 		WRITE(0x0000002),
 		EXECUTE(0x0000004),
 		SCHEDULE(0x0000008),
+		METRICS(0x0000010),
 		CREATEPROJECTS(0x40000000), // Only used for roles
 		ADMIN(0x8000000);
 		

File: src/java/azkaban/webapp/AzkabanWebServer.java
Patch:
@@ -313,7 +313,7 @@ private Map<String, Alerter> loadPluginAlerters(String pluginPath) {
 		}
 			
 		Map<String, Alerter> installedAlerterPlugins = new HashMap<String, Alerter>();
-		ClassLoader parentLoader = SlaAlertAction.class.getClass().getClassLoader();
+		ClassLoader parentLoader = getClass().getClassLoader();
 		File[] pluginDirs = alerterPluginPath.listFiles();
 		ArrayList<String> jarPaths = new ArrayList<String>();
 		for (File pluginDir: pluginDirs) {

File: src/java/azkaban/jmx/JmxExecutorManagerAdapter.java
Patch:
@@ -43,4 +43,5 @@ public Long getLastExecutorManagerThreadCheckTime() {
 	public List<String> getPrimaryExecutorHostPorts() {
 		return new ArrayList<String>(manager.getPrimaryServerHosts());
 	}
+
 }

File: src/java/azkaban/jobExecutor/NoopJob.java
Patch:
@@ -25,7 +25,7 @@
 public class NoopJob implements Job {
 	private String jobId;
 
-	public NoopJob(String jobid, Props props, Logger log) {
+	public NoopJob(String jobid, Props props, Props jobProps, Logger log) {
 		this.jobId = jobid;
 	}
 

File: src/java/azkaban/trigger/builtin/ExecuteFlowAction.java
Patch:
@@ -227,7 +227,7 @@ public void doAction() throws Exception {
 		if(slaOptions != null && slaOptions.size() > 0) {
 			int execId = exflow.getExecutionId();
 			for(SlaOption sla : slaOptions) {
-				logger.info("Adding sla trigger " + sla.toString());
+				logger.info("Adding sla trigger " + sla.toString() + " to execution " + execId);
 				SlaChecker slaChecker = new SlaChecker("slaChecker", sla, execId);
 				Map<String, ConditionChecker> slaCheckers = new HashMap<String, ConditionChecker>();
 				slaCheckers.put(slaChecker.getId(), slaChecker);
@@ -251,6 +251,7 @@ public void doAction() throws Exception {
 				Trigger slaTrigger = new Trigger("azkaban_sla", "azkaban", triggerCond, expireCond, actions);
 				slaTrigger.setResetOnTrigger(false);
 				slaTrigger.setResetOnExpire(false);
+				logger.info("Ready to put in the sla trigger");
 				triggerManager.insertTrigger(slaTrigger);
 			}
 		}

File: src/java/azkaban/executor/ExecutableNode.java
Patch:
@@ -236,7 +236,7 @@ public List<Object> getAttemptObjects() {
 		return array;
 	}
 	
-	public String getPrintableId() {
+	public String getNestedId() {
 		return getPrintableId(":");
 	}
 	

File: unit/java/azkaban/test/execapp/FlowRunnerTest2.java
Patch:
@@ -830,8 +830,8 @@ private void pause(long millisec) {
 	
 	private void createExpectedStateMap(ExecutableFlowBase flow, Map<String, Status> expectedStateMap, Map<String, ExecutableNode> nodeMap) {
 		for (ExecutableNode node: flow.getExecutableNodes()) {
-			expectedStateMap.put(node.getPrintableId(), node.getStatus());
-			nodeMap.put(node.getPrintableId(), node);
+			expectedStateMap.put(node.getNestedId(), node.getStatus());
+			nodeMap.put(node.getNestedId(), node);
 			
 			if (node instanceof ExecutableFlowBase) {
 				createExpectedStateMap((ExecutableFlowBase)node, expectedStateMap, nodeMap);

File: src/java/azkaban/execapp/JobRunner.java
Patch:
@@ -157,6 +157,7 @@ private void createLogger() {
 				fileAppender.setMaxFileSize(jobLogChunkSize);
 				jobAppender = fileAppender;
 				logger.addAppender(jobAppender);
+				logger.setAdditivity(false);
 			} catch (IOException e) {
 				flowLogger.error("Could not open log file in " + workingDir + " for job " + node.getJobId(), e);
 			}

File: src/java/azkaban/jmx/JmxExecutorManager.java
Patch:
@@ -19,7 +19,7 @@ public int getNumRunningFlows() {
 
 	@Override
 	public String getExecutorThreadState() {
-		return manager.getExecutorThreadState().toString();
+		return manager.getExecutorManagerThreadState().toString();
 	}
 	
 	@Override
@@ -29,12 +29,12 @@ public String getExecutorThreadStage() {
 
 	@Override
 	public boolean isThreadActive() {
-		return manager.isThreadActive();
+		return manager.isExecutorManagerThreadActive();
 	}
 
 	@Override
 	public Long getLastThreadCheckTime() {
-		return manager.getLastThreadCheckTime();
+		return manager.getLastExecutorManagerThreadCheckTime();
 	}
 	
 	@Override 

File: src/java/azkaban/jmx/JmxTriggerManagerMBean.java
Patch:
@@ -27,4 +27,7 @@ public interface JmxTriggerManagerMBean {
 	
 	@DisplayName("OPERATION: getScannerIdleTime")
 	public long getScannerIdleTime();
+	
+	@DisplayName("OPERATION: getScannerThreadStage")
+	public String getScannerThreadStage();
 }

File: src/java/azkaban/trigger/Trigger.java
Patch:
@@ -310,10 +310,12 @@ public boolean expireConditionMet(){
 	
 	public void resetTriggerConditions() {
 		triggerCondition.resetCheckers();
+		updateNextCheckTime();
 	}
 	
 	public void resetExpireCondition() {
 		expireCondition.resetCheckers();
+		updateNextCheckTime();
 	}
 	
 	public List<TriggerAction> getTriggerActions () {

File: src/java/azkaban/trigger/TriggerManagerAdapter.java
Patch:
@@ -42,6 +42,7 @@ public interface TriggerJMX {
 		public String getTriggerIds();
 		public long getScannerIdleTime();
 		public Map<String, Object> getAllJMXMbeans();
+		public String getScannerThreadStage();
 	}
 	
 }

File: src/java/azkaban/webapp/servlet/ExecutorServlet.java
Patch:
@@ -32,7 +32,6 @@
 import azkaban.executor.ExecutionOptions;
 import azkaban.executor.ExecutorManagerAdapter;
 import azkaban.executor.ExecutionOptions.FailureAction;
-import azkaban.executor.ExecutorManager;
 import azkaban.executor.ExecutorManagerException;
 import azkaban.executor.Status;
 import azkaban.flow.Flow;

File: src/java/azkaban/executor/ExecutorManager.java
Patch:
@@ -306,7 +306,7 @@ private void loadRunningFlows() throws ExecutorManagerException {
 	public List<Integer> getRunningFlows(int projectId, String flowId) {
 		ArrayList<Integer> executionIds = new ArrayList<Integer>();
 		for (Pair<ExecutionReference, ExecutableFlow> ref : runningFlows.values()) {
-			if (ref.getSecond().getFlowId().equals(flowId)) {
+			if (ref.getSecond().getFlowId().equals(flowId) && ref.getSecond().getProjectId() == projectId) {
 				executionIds.add(ref.getFirst().getExecId());
 			}
 		}

File: src/java/azkaban/webapp/servlet/ProjectServlet.java
Patch:
@@ -38,8 +38,8 @@
 /**
  * The main page
  */
-public class IndexServlet extends LoginAbstractAzkabanServlet {
-	private static final Logger logger = Logger.getLogger(IndexServlet.class.getName());
+public class ProjectServlet extends LoginAbstractAzkabanServlet {
+	private static final Logger logger = Logger.getLogger(ProjectServlet.class.getName());
 	private static final String LOCKDOWN_CREATE_PROJECTS_KEY = "lockdown.create.projects";
 	private static final long serialVersionUID = -1;
 

File: src/java/azkaban/trigger/Condition.java
Patch:
@@ -106,9 +106,9 @@ public static Condition fromJson(Object obj) throws Exception {
 				ConditionChecker ck = checkerLoader.createCheckerFromJson(type, oneChecker.get("checkerJson"));
 				checkers.put(ck.getId(), ck);
 			}
-				String expr = (String) jsonObj.get("expression");
+			String expr = (String) jsonObj.get("expression");
 				
-				cond = new Condition(checkers, expr);
+			cond = new Condition(checkers, expr);
 			
 		} catch(Exception e) {
 			e.printStackTrace();

File: src/java/azkaban/trigger/TriggerLoader.java
Patch:
@@ -1,9 +1,6 @@
 package azkaban.trigger;
 
 import java.util.List;
-import java.util.Map;
-
-
 
 public interface TriggerLoader {
 

File: unit/java/azkaban/test/trigger/ExecuteFlowActionTest.java
Patch:
@@ -27,7 +27,7 @@ public void jsonConversionTest() throws Exception {
 		List<String> disabledJobs = new ArrayList<String>();
 		options.setDisabledJobs(disabledJobs);
 		
-		ExecuteFlowAction executeFlowAction = new ExecuteFlowAction(1, "testproject", "testflow", "azkaban", options);
+		ExecuteFlowAction executeFlowAction = new ExecuteFlowAction("ExecuteFlowAction", 1, "testproject", "testflow", "azkaban", options, null);
 		
 		Object obj = executeFlowAction.toJson();
 		

File: unit/java/azkaban/test/trigger/JdbcTriggerLoaderTest.java
Patch:
@@ -194,7 +194,7 @@ private Trigger createTrigger(String projName, String flowName, String source) {
 		Condition triggerCond = new Condition(checkers1, expr1);
 		Condition expireCond = new Condition(checkers1, expr1);
 		List<TriggerAction> actions = new ArrayList<TriggerAction>();
-		TriggerAction action = new ExecuteFlowAction(1, projName, flowName, "azkaban", new ExecutionOptions());
+		TriggerAction action = new ExecuteFlowAction("executeAction", 1, projName, flowName, "azkaban", new ExecutionOptions(), null);
 		actions.add(action);
 		Trigger t = new Trigger(now, now, "azkaban", source, triggerCond, expireCond, actions);
 		return t;

File: unit/java/azkaban/test/trigger/TriggerTest.java
Patch:
@@ -52,7 +52,7 @@ public void jsonConversionTest() throws Exception {
 		Condition triggerCond = new Condition(checkers1, expr1);
 		Condition expireCond = new Condition(checkers1, expr1);
 		List<TriggerAction> actions = new ArrayList<TriggerAction>();
-		TriggerAction action = new ExecuteFlowAction(1, "testProj", "testFlow", "azkaban", new ExecutionOptions());
+		TriggerAction action = new ExecuteFlowAction("executeAction", 1, "testProj", "testFlow", "azkaban", new ExecutionOptions(), null);
 		actions.add(action);
 		Trigger t = new Trigger(now, now, "azkaban", "test", triggerCond, expireCond, actions);
 		

File: src/java/azkaban/executor/ExecutionOptions.java
Patch:
@@ -40,7 +40,7 @@ public enum FailureAction {
 	private Set<String> initiallyDisabledJobs = new HashSet<String>();
 	
 	public void setFlowParameters(Map<String,String> flowParam) {
-		flowParameters.get(flowParam);
+		flowParameters.putAll(flowParam);
 	}
 	
 	public Map<String,String> getFlowParameters() {

File: src/java/azkaban/webapp/servlet/ScheduleServlet.java
Patch:
@@ -601,7 +601,7 @@ private DateTime parseDateTime(String scheduleDate, String scheduleTime) {
 		int minutes = Integer.parseInt(parts[1]);
 		boolean isPm = parts[2].equalsIgnoreCase("pm");
 		
-		DateTimeZone timezone = parts[3].equals("UTC") ? DateTimeZone.UTC : DateTimeZone.forID("America/Los_Angeles");
+		DateTimeZone timezone = parts[3].equals("UTC") ? DateTimeZone.UTC : DateTimeZone.getDefault();
 
 		// scheduleDate: 02/10/2013
 		DateTime day = null;

File: src/java/azkaban/webapp/AzkabanWebServer.java
Patch:
@@ -42,6 +42,7 @@
 import org.apache.velocity.runtime.log.Log4JLogChute;
 import org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader;
 import org.apache.velocity.runtime.resource.loader.JarResourceLoader;
+import org.joda.time.DateTime;
 import org.joda.time.DateTimeZone;
 import org.mortbay.jetty.Server;
 import org.mortbay.jetty.bio.SocketConnector;

File: src/java/azkaban/webapp/servlet/AbstractAzkabanServlet.java
Patch:
@@ -306,7 +306,7 @@ protected Page newPage(HttpServletRequest req, HttpServletResponse resp, Session
 		}
 		
 		if(triggerPlugins != null && !triggerPlugins.isEmpty()) {
-			page.add("triggers", triggerPlugins);
+			page.add("triggerPlugins", triggerPlugins);
 		}
 		
 		return page;

File: src/java/azkaban/webapp/session/SessionCache.java
Patch:
@@ -33,7 +33,7 @@
  */
 public class SessionCache {
 	private static final int MAX_NUM_SESSIONS = 10000;
-	private static final int SESSION_TIME_TO_LIVE = 10000;
+	private static final long SESSION_TIME_TO_LIVE = 24*60*60*1000L;
 //	private CacheManager manager = CacheManager.create();
 	private Cache cache;
 
@@ -48,7 +48,7 @@ public SessionCache(Props props) {
 		cache = manager.createCache();
 		cache.setEjectionPolicy(EjectionPolicy.LRU);
 		cache.setMaxCacheSize(props.getInt("max.num.sessions", MAX_NUM_SESSIONS));
-		cache.setExpiryTimeToLiveMs(props.getInt("session.time.to.live", SESSION_TIME_TO_LIVE));
+		cache.setExpiryTimeToLiveMs(props.getLong("session.time.to.live", SESSION_TIME_TO_LIVE));
 	}
 
 	/**
@@ -82,4 +82,4 @@ public void addSession(Session session) {
 	public boolean removeSession(String id) {
 		return cache.remove(id);
 	}
-}
\ No newline at end of file
+}

File: src/java/azkaban/utils/StringUtils.java
Patch:
@@ -15,6 +15,7 @@
  */
 package azkaban.utils;
 
+import java.util.Collection;
 import java.util.List;
 
 public class StringUtils {
@@ -45,7 +46,7 @@ public static String shellQuote(String s, char quoteCh) {
 	 * @param delimiter
 	 * @return
 	 */
-	public static String join(List<String> list, String delimiter) {
+	public static String join(Collection<String> list, String delimiter) {
 		StringBuffer buffer = new StringBuffer();
 		for (String str: list) {
 			buffer.append(str);
@@ -54,4 +55,5 @@ public static String join(List<String> list, String delimiter) {
 		
 		return buffer.toString();
 	}
+
 }

File: src/java/azkaban/executor/ExecutableFlow.java
Patch:
@@ -266,6 +266,7 @@ public Map<String,Object> toObject() {
 		flowObj.put("executionPath", executionPath);
 		flowObj.put("flowId", flowId);
 		flowObj.put("projectId", projectId);
+		
 		if(scheduleId >= 0) {
 			flowObj.put("scheduleId", scheduleId);
 		}

File: src/java/azkaban/executor/JdbcExecutorLoader.java
Patch:
@@ -223,13 +223,13 @@ public List<ExecutableFlow> fetchFlowHistory(String projContain, String flowCont
 		ArrayList<Object> params = new ArrayList<Object>();
 		
 		boolean first = true;
-		if (projContain != null) {
+		if (projContain != null && !projContain.isEmpty()) {
 			query += " ef JOIN projects p ON ef.project_id = p.id WHERE name LIKE ?";
 			params.add('%'+projContain+'%');
 			first = false;
 		}
 		
-		if (flowContains != null) {
+		if (flowContains != null && !flowContains.isEmpty()) {
 			if (first) {
 				query += " WHERE ";
 				first = false;
@@ -242,7 +242,7 @@ public List<ExecutableFlow> fetchFlowHistory(String projContain, String flowCont
 			params.add('%'+flowContains+'%');
 		}
 		
-		if (userNameContains != null) {
+		if (userNameContains != null && !userNameContains.isEmpty()) {
 			if (first) {
 				query += " WHERE ";
 				first = false;

File: src/java/azkaban/executor/ExecutableFlow.java
Patch:
@@ -266,6 +266,7 @@ public Map<String,Object> toObject() {
 		flowObj.put("executionPath", executionPath);
 		flowObj.put("flowId", flowId);
 		flowObj.put("projectId", projectId);
+		
 		if(scheduleId >= 0) {
 			flowObj.put("scheduleId", scheduleId);
 		}

File: src/java/azkaban/executor/JdbcExecutorLoader.java
Patch:
@@ -223,13 +223,13 @@ public List<ExecutableFlow> fetchFlowHistory(String projContain, String flowCont
 		ArrayList<Object> params = new ArrayList<Object>();
 		
 		boolean first = true;
-		if (projContain != null) {
+		if (projContain != null && !projContain.isEmpty()) {
 			query += " ef JOIN projects p ON ef.project_id = p.id WHERE name LIKE ?";
 			params.add('%'+projContain+'%');
 			first = false;
 		}
 		
-		if (flowContains != null) {
+		if (flowContains != null && !flowContains.isEmpty()) {
 			if (first) {
 				query += " WHERE ";
 				first = false;
@@ -242,7 +242,7 @@ public List<ExecutableFlow> fetchFlowHistory(String projContain, String flowCont
 			params.add('%'+flowContains+'%');
 		}
 		
-		if (userNameContains != null) {
+		if (userNameContains != null && !userNameContains.isEmpty()) {
 			if (first) {
 				query += " WHERE ";
 				first = false;

File: src/java/azkaban/executor/ExecutionOptions.java
Patch:
@@ -40,7 +40,7 @@ public enum FailureAction {
 	private Set<String> initiallyDisabledJobs = new HashSet<String>();
 	
 	public void setFlowParameters(Map<String,String> flowParam) {
-		flowParameters.get(flowParam);
+		flowParameters.putAll(flowParam);
 	}
 	
 	public Map<String,String> getFlowParameters() {

File: src/java/azkaban/project/ProjectManager.java
Patch:
@@ -6,6 +6,7 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.regex.Pattern;
 import java.util.regex.PatternSyntaxException;
@@ -178,7 +179,7 @@ else if (!projectName.matches("[a-zA-Z][a-zA-Z_0-9|-]*")) {
 			projectLoader.updatePermission(newProject, creator.getUserId(), new Permission(Permission.Type.ADMIN), false);
 			
 			// Add proxy user 
-			newProject.getProxyUsers().add(creator.getUserId());
+			newProject.addProxyUser(creator.getUserId());
 			try {
 				updateProjectSetting(newProject);
 			} catch (ProjectManagerException e) {

File: src/java/azkaban/execapp/JobRunner.java
Patch:
@@ -231,6 +231,7 @@ public void run() {
 					logger.info("Job was cancelled while waiting on pipeline. Quiting.");
 					node.setStartTime(System.currentTimeMillis());
 					node.setEndTime(System.currentTimeMillis());
+					node.setStatus(Status.FAILED);
 					fireEvent(Event.create(this, Type.JOB_FINISHED));
 					return;
 				}

File: src/java/azkaban/execapp/event/LocalFlowWatcher.java
Patch:
@@ -1,6 +1,5 @@
 package azkaban.execapp.event;
 
-import com.sun.org.apache.regexp.internal.recompile;
 
 import azkaban.execapp.FlowRunner;
 import azkaban.execapp.JobRunner;

File: src/java/azkaban/execapp/event/RemoteFlowWatcher.java
Patch:
@@ -95,6 +95,9 @@ public void run() {
 
 	@Override
 	public synchronized void stopWatcher() {
+		if(isShutdown) {
+			return;
+		}
 		isShutdown = true;
 		if (thread != null) {
 			thread.interrupt();

File: src/java/azkaban/execapp/FlowRunner.java
Patch:
@@ -694,6 +694,8 @@ public synchronized void handleEvent(Event event) {
 						jobOutputProps.put(node.getJobId(), runner.getOutputProps());
 					}
 					
+					updateFlow();
+					
 					if (node.getStatus() == Status.FAILED) {
 						// Retry failure if conditions are met.
 						if (!runner.isCancelled() && runner.getRetries() > node.getAttempt()) {

File: src/java/azkaban/execapp/FlowRunnerManager.java
Patch:
@@ -501,11 +501,12 @@ public ExecutableFlow getExecutableFlow(int execId) {
 	@Override
 	public void handleEvent(Event event) {
 		if (event.getType() == Event.Type.FLOW_FINISHED) {
+			
 			FlowRunner flowRunner = (FlowRunner)event.getRunner();
 			ExecutableFlow flow = flowRunner.getExecutableFlow();
 
 			recentlyFinishedFlows.put(flow.getExecutionId(), flow);
-			logger.info("Flow " + flow.getFlowId() + " is finished. Adding it to recently finished flows list.");
+			logger.info("Flow " + flow.getExecutionId() + " is finished. Adding it to recently finished flows list.");
 			runningFlows.remove(flow.getExecutionId());
 		}
 	}

File: src/java/azkaban/executor/ExecutionOptions.java
Patch:
@@ -18,8 +18,8 @@ public class ExecutionOptions {
 	
 	private boolean notifyOnFirstFailure = true;
 	private boolean notifyOnLastFailure = false;
-	private boolean failureEmailsOverride = true;
-	private boolean successEmailsOverride = true;
+	private boolean failureEmailsOverride = false;
+	private boolean successEmailsOverride = false;
 	private ArrayList<String> failureEmails = new ArrayList<String>();
 	private ArrayList<String> successEmails = new ArrayList<String>();
 	
@@ -164,7 +164,7 @@ public static ExecutionOptions createFromObject(Object obj) {
 			return null;
 		}
 		
-		Map<String,Object> optionsMap = new HashMap<String,Object>();
+		Map<String,Object> optionsMap = (Map<String,Object>)obj;
 		
 		ExecutionOptions options = new ExecutionOptions();
 		if (optionsMap.containsKey("flowParameters")) {

File: src/java/azkaban/executor/ExecutorManager.java
Patch:
@@ -372,7 +372,7 @@ public String submitExecutableFlow(ExecutableFlow exflow) throws ExecutorManager
 					message = "Flow " + flowId + " is already running with exec id " + runningExecId +". Pipelining level " + options.getPipelineLevel() + ". ";
 				}
 				else if (options.getConcurrentOption().equals(ExecutionOptions.CONCURRENT_OPTION_SKIP)) {
-					throw new ExecutorManagerException("Flow " + flowId + " is already running. Skipping execution.");
+					throw new ExecutorManagerException("Flow " + flowId + " is already running. Skipping execution.", ExecutorManagerException.Reason.SkippedExecution);
 				}
 				else {
 					// The settings is to run anyways.

File: src/java/azkaban/executor/ExecutorManager.java
Patch:
@@ -364,14 +364,14 @@ public String submitExecutableFlow(ExecutableFlow exflow) throws ExecutorManager
 			
 			String message = "";
 			if (!running.isEmpty()) {
-				if (options.getConcurrentOption().equals("pipeline")) {
+				if (options.getConcurrentOption().equals(ExecutionOptions.CONCURRENT_OPTION_PIPELINE)) {
 					Collections.sort(running);
 					Integer runningExecId = running.get(running.size() - 1);
 					
 					options.setPipelineExecutionId(runningExecId);
 					message = "Flow " + flowId + " is already running with exec id " + runningExecId +". Pipelining level " + options.getPipelineLevel() + ". ";
 				}
-				else if (options.getConcurrentOption().equals("skip")) {
+				else if (options.getConcurrentOption().equals(ExecutionOptions.CONCURRENT_OPTION_SKIP)) {
 					throw new ExecutorManagerException("Flow " + flowId + " is already running. Skipping execution.");
 				}
 				else {

File: src/java/azkaban/scheduler/Schedule.java
Patch:
@@ -347,9 +347,11 @@ public void createAndSetScheduleOptions(Object obj) {
 		else if (schedObj.containsKey("flowOptions")){
 			ExecutionOptions execOptions = ExecutionOptions.createFromObject(schedObj.get("flowOptions"));
 			this.executionOptions = execOptions;
+			execOptions.setConcurrentOption(ExecutionOptions.CONCURRENT_OPTION_SKIP);
 		}
 		else {
 			this.executionOptions = new ExecutionOptions();
+			this.executionOptions.setConcurrentOption(ExecutionOptions.CONCURRENT_OPTION_SKIP);
 		}
 
 		if (schedObj.containsKey("slaOptions")) {

File: src/java/azkaban/execapp/ExecutorServlet.java
Patch:
@@ -201,7 +201,7 @@ private void handleAjaxUpdateRequest(HttpServletRequest req, Map<String, Object>
 				continue;
 			}
 			
-			if (flow.getUpdateTime() >= updateTime) {
+			if (flow.getUpdateTime() > updateTime) {
 				updateList.add(flow.toUpdateObject(updateTime));
 			}
 		}

File: src/java/azkaban/execapp/ExecutorServlet.java
Patch:
@@ -201,7 +201,7 @@ private void handleAjaxUpdateRequest(HttpServletRequest req, Map<String, Object>
 				continue;
 			}
 			
-			if (flow.getUpdateTime() > updateTime) {
+			if (flow.getUpdateTime() >= updateTime) {
 				updateList.add(flow.toUpdateObject(updateTime));
 			}
 		}

File: src/java/azkaban/execapp/FlowRunnerManager.java
Patch:
@@ -304,6 +304,7 @@ private void cleanRecentlyFinished() {
 			}
 			
 			for (Integer id: executionToKill) {
+				logger.info("Cleaning execution " + id + " from recently finished flows list.");
 				recentlyFinishedFlows.remove(id);
 			}
 		}
@@ -502,8 +503,9 @@ public void handleEvent(Event event) {
 		if (event.getType() == Event.Type.FLOW_FINISHED) {
 			FlowRunner flowRunner = (FlowRunner)event.getRunner();
 			ExecutableFlow flow = flowRunner.getExecutableFlow();
-			recentlyFinishedFlows.put(flow.getExecutionId(), flow);
 
+			recentlyFinishedFlows.put(flow.getExecutionId(), flow);
+			logger.info("Flow " + flow.getFlowId() + " is finished. Adding it to recently finished flows list.");
 			runningFlows.remove(flow.getExecutionId());
 		}
 	}

File: src/java/azkaban/executor/ExecutableFlow.java
Patch:
@@ -356,6 +356,8 @@ public void applyUpdateObject(Map<String, Object> updateData) {
 		}
 		
 		this.flowStatus = Status.fromInteger((Integer)updateData.get("status"));
+		
+		System.out.println("Updating status to " + flowStatus);
 		this.startTime = JSONUtils.getLongFromObject(updateData.get("startTime"));
 		this.endTime = JSONUtils.getLongFromObject(updateData.get("endTime"));
 		this.updateTime = JSONUtils.getLongFromObject(updateData.get("updateTime"));

File: src/java/azkaban/executor/ExecutorManager.java
Patch:
@@ -796,7 +796,6 @@ private ExecutableFlow updateExecution(Map<String,Object> updateData) throws Exe
 		ref.setNextCheckTime(0);
 		ref.setNumErrors(0);
 		Status oldStatus = flow.getStatus();
-		
 		flow.applyUpdateObject(updateData);
 		Status newStatus = flow.getStatus();
 		

File: src/java/azkaban/scheduler/ScheduleManager.java
Patch:
@@ -378,6 +378,9 @@ public void run() {
 										exflow.setProxyUsers(project.getProxyUsers());
 										
 										ExecutionOptions flowOptions = runningSched.getExecutionOptions();
+										if(flowOptions == null) {
+											flowOptions = new ExecutionOptions();
+										}
 										exflow.setExecutionOptions(flowOptions);
 										
 										try {

File: src/java/azkaban/execapp/FlowRunner.java
Patch:
@@ -296,6 +296,7 @@ private void runFlow() throws Exception {
 								Props outputProps = collectOutputProps(node);
 								node.setStatus(Status.QUEUED);
 								JobRunner runner = createJobRunner(node, outputProps);
+								logger.info("Submitting job " + node.getJobId() + " to run.");
 								try {
 									executorService.submit(runner);
 									jobRunners.put(node.getJobId(), runner);
@@ -305,10 +306,12 @@ private void runFlow() throws Exception {
 								
 							} // If killed, then auto complete and KILL
 							else if (node.getStatus() == Status.KILLED) {
+								logger.info("Killing " + node.getJobId() + " due to prior errors.");
 								node.setStartTime(currentTime);
 								node.setEndTime(currentTime);
 							} // If disabled, then we auto skip
 							else if (node.getStatus() == Status.DISABLED) {
+								logger.info("Skipping disabled job " + node.getJobId() + ".");
 								node.setStartTime(currentTime);
 								node.setEndTime(currentTime);
 								node.setStatus(Status.SKIPPED);

File: src/java/azkaban/executor/ExecutorManager.java
Patch:
@@ -528,7 +528,6 @@ public Map<String, Object> callExecutorJMX(String hostPort, String action, Strin
 			httpclient.getConnectionManager().shutdown();
 		}
 		
-		System.out.println(response);
 		@SuppressWarnings("unchecked")
 		Map<String, Object> jsonResponse = (Map<String, Object>)JSONUtils.parseJSONFromString(response);
 		String error = (String)jsonResponse.get(ConnectorParams.RESPONSE_ERROR);

File: src/java/azkaban/user/Permission.java
Patch:
@@ -29,6 +29,7 @@ public enum Type {
 		WRITE(0x0000002),
 		EXECUTE(0x0000004),
 		SCHEDULE(0x0000008),
+		CREATEPROJECTS(0x40000000), // Only used for roles
 		ADMIN(0x8000000);
 		
 		private int numVal;

File: src/java/azkaban/webapp/AzkabanWebServer.java
Patch:
@@ -144,9 +144,6 @@ public class AzkabanWebServer implements AzkabanServer {
 	private MBeanServer mbeanServer;
 	private ArrayList<ObjectName> registeredMBeans = new ArrayList<ObjectName>();
 
-	
-	
-	
 	/**
 	 * Constructor usually called by tomcat AzkabanServletContext to create the
 	 * initial server

File: src/java/azkaban/execapp/FlowRunnerManager.java
Patch:
@@ -136,7 +136,7 @@ public boolean accept(File dir, String name) {
 					String fileName = new File(project.getAbsolutePath()).getName();
 					int projectId = Integer.parseInt(fileName.split("\\.")[0]);
 					int versionNum = Integer.parseInt(fileName.split("\\.")[1]);
-					ProjectVersion version = new ProjectVersion(projectId, versionNum);
+					ProjectVersion version = new ProjectVersion(projectId, versionNum, project);
 					allProjects.put(new Pair<Integer, Integer>(projectId, versionNum), version);
 				}
 				catch (Exception e) {
@@ -223,6 +223,7 @@ public void run() {
 						if (currentTime - OLD_PROJECT_DIR_INTERVAL_MS > lastOldProjectCleanTime) {
 							logger.info("Cleaning old projects");
 							cleanOlderProjects();
+							
 							lastOldProjectCleanTime = currentTime;
 						}
 						
@@ -324,6 +325,7 @@ private void cleanOlderProjects() {
 						try {
 							logger.info("Removing old unused installed project " + version.getProjectId() + ":" + version.getVersion());
 							version.deleteDirectory();
+							installedProjects.remove(new Pair<Integer, Integer>(version.getProjectId(), version.getVersion()));
 						} catch (IOException e) {
 							e.printStackTrace();
 						}

File: src/java/azkaban/execapp/JobRunner.java
Patch:
@@ -279,9 +279,10 @@ private void runJob() {
 		try {
 			job.run();
 		} catch (Exception e) {
+			e.printStackTrace();
 			node.setStatus(Status.FAILED);
 			logError("Job run failed!");
-			logError(e.getMessage());
+			logError(e.getMessage() + e.getCause());
 			return;
 		}
 

File: src/java/azkaban/scheduler/ScheduleManager.java
Patch:
@@ -93,6 +93,7 @@ public ScheduleManager(ExecutorManager executorManager,
 			scheduleList = loader.loadSchedules();
 		} catch (ScheduleManagerException e) {
 			// TODO Auto-generated catch block
+			logger.error("Failed to load schedules" + e.getCause() + e.getMessage());
 			e.printStackTrace();
 		}
 

File: src/java/azkaban/sla/SLAManager.java
Patch:
@@ -342,7 +342,7 @@ private void takeSLAFailActions(SLA s, ExecutableFlow exflow) {
 	}
 	
 	private void takeSLASuccessActions(SLA s, ExecutableFlow exflow) {
-		sendSlaSuccessEmail(s, exflow);
+		//sendSlaSuccessEmail(s, exflow);
 		
 	}
 	

File: src/java/azkaban/executor/ExecutorManager.java
Patch:
@@ -108,7 +108,7 @@ public List<Integer> getRunningFlows(int projectId, String flowId) {
 	
 	public boolean isFlowRunning(int projectId, String flowId) {
 		for (Pair<ExecutionReference, ExecutableFlow> ref : runningFlows.values()) {
-			if (ref.getSecond().getFlowId().equals(flowId)) {
+			if ((ref.getSecond().getProjectId() == projectId) && ref.getSecond().getFlowId().equals(flowId)) {
 				return true;
 			}
 		}

File: src/java/azkaban/user/UserManager.java
Patch:
@@ -59,5 +59,5 @@ public interface UserManager {
 	 */
 	public Role getRole(String roleName);
 
-	public boolean validateProxyUser(String proxyUser, String realUser);
+	public boolean validateProxyUser(String proxyUser, User realUser);
 }

File: src/java/azkaban/user/XmlUserManager.java
Patch:
@@ -271,8 +271,8 @@ public boolean validateGroup(String group) {
 	}
 
 	@Override
-	public boolean validateProxyUser(String proxyUser, String realUser) {
-		if(proxyUserMap.containsKey(realUser) && proxyUserMap.get(realUser).contains(proxyUser)) {
+	public boolean validateProxyUser(String proxyUser, User realUser) {
+		if(proxyUserMap.containsKey(realUser.getUserId()) && proxyUserMap.get(realUser.getUserId()).contains(proxyUser)) {
 			return true;
 		}
 		else {

File: src/java/azkaban/webapp/AzkabanWebServer.java
Patch:
@@ -471,7 +471,6 @@ public void run() {
 					logger.error("Error while shutting down http server.", e);
 				}
 				logger.info("kk thx bye.");
-				System.exit(0);
 			}
 		});
 		logger.info("Server running on port " + sslPortNumber + ".");

File: src/java/azkaban/webapp/servlet/ProjectManagerServlet.java
Patch:
@@ -570,7 +570,7 @@ private void ajaxAddProxyUser(Project project, HashMap<String, Object> ret, Http
 				return;
 			}
 			else {
-				if(userManager.validateProxyUser(name, user.getUserId())) {
+				if(userManager.validateProxyUser(name, user)) {
 					proxyUsers.add(name);
 				}
 				else {
@@ -584,7 +584,7 @@ private void ajaxAddProxyUser(Project project, HashMap<String, Object> ret, Http
 				return;
 			}
 			else {
-				if(userManager.validateProxyUser(name, user.getUserId())) {
+				if(userManager.validateProxyUser(name, user)) {
 					proxyUsers.remove(name);
 				}
 				else {

File: src/java/azkaban/project/ProjectLoader.java
Patch:
@@ -10,6 +10,7 @@
 import azkaban.user.Permission;
 import azkaban.user.User;
 import azkaban.utils.Props;
+import azkaban.utils.Triple;
 
 public interface ProjectLoader {
 
@@ -218,5 +219,7 @@ public interface ProjectLoader {
 	public void updateProjectProperty(Project project, Props props) throws ProjectManagerException;
 
 	Props fetchProjectProperty(int projectId, int projectVer, String propsName) throws ProjectManagerException;
+
+	List<Triple<String, Boolean, Permission>> getProjectPermissions(int projectId) throws ProjectManagerException;
 	
 }
\ No newline at end of file

File: src/java/azkaban/scheduler/ScheduleLoader.java
Patch:
@@ -16,7 +16,6 @@
 
 package azkaban.scheduler;
 
-import java.sql.Connection;
 import java.util.List;
 
 public interface ScheduleLoader {

File: src/java/azkaban/sla/SLA.java
Patch:
@@ -216,7 +216,6 @@ public Map<String,Object> optionToObject() {
 			}
 			slaObj.put("jobSettings", settingsObj);
 		}
-		
 
 		return slaObj;
 	}

File: src/java/azkaban/execapp/FlowRunner.java
Patch:
@@ -541,6 +541,8 @@ public void retryJobs(String[] jobIds, String user) {
 					else {
 						logger.error("Cannot retry a job that hasn't finished. " + jobId);
 					}
+					
+					queueNextJob(node);
 				}
 			}
 			
@@ -555,6 +557,7 @@ public void retryJobs(String[] jobIds, String user) {
 			
 			if (!isFailureFound) {
 				flow.setStatus(Status.RUNNING);
+				flow.setUpdateTime(System.currentTimeMillis());
 			}
 			
 			updateFlow();

File: unit/java/azkaban/test/executor/SleepJavaJob.java
Patch:
@@ -56,7 +56,8 @@ public boolean accept(File pathname) {
 		if (fail) {
 			if (attempts <= 0 || attemptFiles == null || attemptFiles.length > attempts) {
 				File attemptFile = new File(file, id + "." + (attemptFiles == null ? 0 : attemptFiles.length));
-				attemptFile.mkdir();
+
+				attemptFile.mkdirs();
 				throw new Exception("I failed because I had to.");
 			}
 		}

File: src/java/azkaban/execapp/FlowRunnerManager.java
Patch:
@@ -104,7 +104,7 @@ public FlowRunnerManager(Props props, ExecutorLoader executorLoader, ProjectLoad
 		cleanerThread = new CleanerThread();
 		cleanerThread.start();
 		
-		jobtypeManager = new JobTypeManager(props.getString(AzkabanExecutorServer.JOBTYPE_PLUGIN_DIR, null), parentClassLoader);
+		jobtypeManager = new JobTypeManager(props.getString(AzkabanExecutorServer.JOBTYPE_PLUGIN_DIR, JobTypeManager.DEFAULT_JOBTYPEPLUGINDIR), parentClassLoader);
 		
 	}
 

File: src/java/azkaban/webapp/servlet/ProjectManagerServlet.java
Patch:
@@ -1068,12 +1068,14 @@ else if (!hasPermission(project,user,Type.WRITE)) {
 			String type = null;
 			
 			final String contentType = item.getContentType();
-			if(contentType.startsWith("application/zip")) {
+			if(contentType != null && (contentType.startsWith("application/zip") || contentType.startsWith("application/x-zip-compressed"))) {
 				type = "zip";
 			}
 			else {
 				item.delete();
 				setErrorMessageInCookie(resp, "File type " + contentType + " unrecognized.");
+				
+				return;
 			}
 			
 			File tempDir = Utils.createTempDir();

File: src/java/azkaban/project/ProjectManager.java
Patch:
@@ -229,7 +229,7 @@ public void uploadProject(Project project, File archive, String fileType, User u
 		// Unzip.
 		File file = null;
 		try {
-			if (fileType.equals("zip")) {
+			if ("zip".equals(fileType)) {
 				file = unzipFile(archive);
 			}
 			else {

File: src/java/azkaban/execapp/JobRunner.java
Patch:
@@ -197,7 +197,6 @@ private boolean prepareJob() throws RuntimeException{
 			logInfo("Starting job " + node.getJobId() + " at " + node.getStartTime());
 			node.setStatus(Status.RUNNING);
 
-			props.put(AbstractProcessJob.JOB_FULLPATH, props.getSource());
 			// Ability to specify working directory
 			if (!props.containsKey(AbstractProcessJob.WORKING_DIR)) {
 				props.put(AbstractProcessJob.WORKING_DIR, workingDir.getAbsolutePath());

File: src/java/azkaban/execapp/JobRunner.java
Patch:
@@ -196,11 +196,13 @@ private boolean prepareJob() throws RuntimeException{
 
 			logInfo("Starting job " + node.getJobId() + " at " + node.getStartTime());
 			node.setStatus(Status.RUNNING);
+
 			props.put(AbstractProcessJob.JOB_FULLPATH, props.getSource());
 			// Ability to specify working directory
 			if (!props.containsKey(AbstractProcessJob.WORKING_DIR)) {
 				props.put(AbstractProcessJob.WORKING_DIR, workingDir.getAbsolutePath());
 			}
+
 			//job = JobWrappingFactory.getJobWrappingFactory().buildJobExecutor(node.getJobId(), props, logger);
 			job = jobtypeManager.buildJobExecutor(node.getJobId(), props, logger);
 		}

File: src/java/azkaban/jobExecutor/AbstractProcessJob.java
Patch:
@@ -59,9 +59,9 @@ protected AbstractProcessJob(String jobid, final Props sysProps, final Props job
 
 		this.jobProps = jobProps;
 		this.sysProps = sysProps;
-		_jobPath = jobProps.getString(JOB_FULLPATH, jobProps.getSource());
-
 		_cwd = getWorkingDirectory();
+		_jobPath = _cwd;
+		
 		this.log = log;
 	}
 

File: src/java/azkaban/jobtype/JobTypeManager.java
Patch:
@@ -268,12 +268,14 @@ public Job buildJobExecutor(String jobId, Props jobProps, Logger logger) throws
 			
 			// THIS IS WRONG!!! We're just overriding values!
 			Props jobConf = jobtypeJobProps.containsKey(jobType) ? new Props(jobProps, jobtypeJobProps.get(jobType)) : jobProps;
+
 			if (sysConf != null) {
 				sysConf = PropsUtils.resolveProps(sysConf);
 			}
 			else {
 				sysConf = new Props();
 			}
+
 			jobConf = PropsUtils.resolveProps(jobConf);
 			
 //			logger.info("sysConf is " + sysConf);

File: src/java/azkaban/utils/PropsUtils.java
Patch:
@@ -129,6 +129,8 @@ public static boolean endsWith(File file, String... suffixes) {
 			.compile("\\$\\{([a-zA-Z_.0-9]+)\\}");
 
 	public static Props resolveProps(Props props) {
+		if(props == null) return null;
+		
 		Props resolvedProps = new Props();
 
 		for (String key : props.getKeySet()) {

File: unit/java/azkaban/test/execapp/JobRunnerTest.java
Patch:
@@ -262,6 +262,7 @@ private JobRunner createJobRunner(int execId, String name, int time, boolean fai
 		Props props = createProps(time, fail);
 		
 		JobRunner runner = new JobRunner(node, props, workingDir, loader, jobtypeManager);
+
 		runner.addListener(listener);
 		return runner;
 	}

File: unit/java/azkaban/test/executor/JavaJob.java
Patch:
@@ -44,7 +44,7 @@ public class JavaJob extends JavaProcessJob {
 	private String props;
 
 	public JavaJob(String jobid, Props sysProps, Props jobProps, Logger log) {
-		super(jobid, sysProps, jobProps, log);
+		super(jobid, sysProps, new Props(sysProps, jobProps), log);
 	}
 
 	@Override

File: src/java/azkaban/execapp/JobRunner.java
Patch:
@@ -198,7 +198,6 @@ private boolean prepareJob() throws RuntimeException{
 
 			logInfo("Starting job " + node.getJobId() + " at " + node.getStartTime());
 			node.setStatus(Status.RUNNING);
-			props.put(AbstractProcessJob.JOB_FULLPATH, props.getSource());
 			props.put(AbstractProcessJob.WORKING_DIR, workingDir.getAbsolutePath());
 			//job = JobWrappingFactory.getJobWrappingFactory().buildJobExecutor(node.getJobId(), props, logger);
 			job = jobtypeManager.buildJobExecutor(node.getJobId(), sysProps, props, logger);

File: src/java/azkaban/jobExecutor/AbstractProcessJob.java
Patch:
@@ -59,9 +59,9 @@ protected AbstractProcessJob(String jobid, final Props sysProps, final Props job
 
 		this.jobProps = jobProps;
 		this.sysProps = sysProps;
-		_jobPath = jobProps.getString(JOB_FULLPATH, jobProps.getSource());
-
 		_cwd = getWorkingDirectory();
+		_jobPath = _cwd;
+		
 		this.log = log;
 	}
 

File: src/java/azkaban/jobtype/JobTypeManager.java
Patch:
@@ -266,7 +266,7 @@ public Job buildJobExecutor(String jobId, Props sysProps, Props jobProps, Logger
 			
 			Props sysConf = jobtypeSysProps.containsKey(jobType) ? new Props(sysProps, jobtypeSysProps.get(jobType)) : sysProps;
 			Props jobConf = jobtypeJobProps.containsKey(jobType) ? new Props(jobProps, jobtypeJobProps.get(jobType)) : jobProps;
-			sysConf = PropsUtils.resolveProps(sysConf);
+			sysConf = sysConf == null ? new Props() : PropsUtils.resolveProps(sysConf);
 			jobConf = PropsUtils.resolveProps(jobConf);
 			
 //			logger.info("sysConf is " + sysConf);

File: src/java/azkaban/utils/PropsUtils.java
Patch:
@@ -129,6 +129,8 @@ public static boolean endsWith(File file, String... suffixes) {
 			.compile("\\$\\{([a-zA-Z_.0-9]+)\\}");
 
 	public static Props resolveProps(Props props) {
+		if(props == null) return null;
+		
 		Props resolvedProps = new Props();
 
 		for (String key : props.getKeySet()) {

File: unit/java/azkaban/test/execapp/JobRunnerTest.java
Patch:
@@ -261,7 +261,7 @@ private JobRunner createJobRunner(int execId, String name, int time, boolean fai
 		
 		Props props = createProps(time, fail);
 		
-		JobRunner runner = new JobRunner(node, props, props, workingDir, loader, jobtypeManager);
+		JobRunner runner = new JobRunner(node, null, props, workingDir, loader, jobtypeManager);
 		runner.addListener(listener);
 		return runner;
 	}

File: unit/java/azkaban/test/executor/JavaJob.java
Patch:
@@ -44,7 +44,7 @@ public class JavaJob extends JavaProcessJob {
 	private String props;
 
 	public JavaJob(String jobid, Props sysProps, Props jobProps, Logger log) {
-		super(jobid, sysProps, jobProps, log);
+		super(jobid, sysProps, new Props(sysProps, jobProps), log);
 	}
 
 	@Override

File: src/java/azkaban/executor/event/Event.java
Patch:
@@ -9,7 +9,8 @@ public enum Type {
 		JOB_SUCCEEDED,
 		JOB_FAILED,
 		JOB_KILLED,
-		JOB_SKIPPED
+		JOB_SKIPPED,
+		ERROR
 	}
 	
 	private final Object runner;

File: src/java/azkaban/utils/ExecutableFlowLoader.java
Patch:
@@ -169,6 +169,7 @@ public static File writeExecutableFlowFile(File executionDir, ExecutableFlow flo
 		}
 		
 		tempFlowFile.renameTo(flowFile);
+		flow.setUpdateTime(System.currentTimeMillis());
 		return flowFile;
 	}
 	

File: src/java/azkaban/webapp/servlet/ExecutorServlet.java
Patch:
@@ -415,7 +415,7 @@ private void ajaxCancelFlow(HttpServletRequest req, HttpServletResponse resp, Ha
 		}
 		
 		try {
-			executorManager.cancelFlow(exFlow, user.getUserId());
+			executorManager.cancelFlow(exFlow.getExecutionId(), user.getUserId());
 		} catch (ExecutorManagerException e) {
 			ret.put("error", e.getMessage());
 		}
@@ -444,7 +444,7 @@ private void ajaxPauseFlow(HttpServletRequest req, HttpServletResponse resp, Has
 		}
 
 		try {
-			executorManager.pauseFlow(exFlow, user.getUserId());
+			executorManager.pauseFlow(exFlow.getExecutionId(), user.getUserId());
 		} catch (ExecutorManagerException e) {
 			ret.put("error", e.getMessage());
 		}
@@ -457,7 +457,7 @@ private void ajaxResumeFlow(HttpServletRequest req, HttpServletResponse resp, Ha
 		}
 
 		try {
-			executorManager.resumeFlow(exFlow, user.getUserId());
+			executorManager.resumeFlow(exFlow.getExecutionId(), user.getUserId());
 		} catch (ExecutorManagerException e) {
 			ret.put("resume", e.getMessage());
 		}

File: src/java/azkaban/webapp/servlet/ScheduleServlet.java
Patch:
@@ -23,14 +23,11 @@
 import org.joda.time.Seconds;
 import org.joda.time.format.DateTimeFormat;
 
-import azkaban.executor.ExecutorManager.ExecutionReference;
 import azkaban.flow.Flow;
 import azkaban.project.Project;
 import azkaban.project.ProjectManager;
-import azkaban.project.ProjectManagerException;
 import azkaban.user.User;
 import azkaban.user.Permission.Type;
-import azkaban.webapp.servlet.HistoryServlet.PageSelection;
 import azkaban.webapp.session.Session;
 import azkaban.scheduler.ScheduleManager;
 import azkaban.scheduler.ScheduledFlow;

File: src/java/azkaban/executor/FlowRunnerManager.java
Patch:
@@ -52,7 +52,8 @@ public FlowRunnerManager(Props props, Props globalProps, Mailman mailer) {
 		this.senderAddress = props.getString("mail.sender");
 		this.clientHostname = props.getString("jetty.hostname", "localhost");
 		this.clientPortNumber = Utils.nonNull(props.getString("jetty.ssl.port"));
-
+		this.globalProps = globalProps;
+		
 		basePath = new File(props.getString("execution.directory"));
 		numThreads = props.getInt("executor.flow.threads", DEFAULT_NUM_EXECUTING_FLOWS);
 		executorService = Executors.newFixedThreadPool(numThreads);

File: src/java/azkaban/jobExecutor/AbstractProcessJob.java
Patch:
@@ -63,7 +63,7 @@ protected AbstractProcessJob(String jobid, final Props props, final Logger log)
         super(jobid, log);
 
         _props = props;
-        _jobPath = props.getString(JOB_FULLPATH, new File(".").getAbsolutePath());
+        _jobPath = props.getString(JOB_FULLPATH, props.getSource());
 
         _cwd = getWorkingDirectory();
         this.log = log;
@@ -120,7 +120,7 @@ public Map<String, String> getEnvironmentVariables() {
 
     public String getWorkingDirectory() {
         return getProps()//.getString(WORKING_DIR, ".");
-                .getString(WORKING_DIR, new File(_jobPath).getParent());
+                .getString(WORKING_DIR, new File(_jobPath).getAbsolutePath());
     }
 
     public Props loadOutputFileProps(final File outputPropertiesFile) {

File: unit/java/azkaban/test/executor/JobRunnerTest.java
Patch:
@@ -200,12 +200,12 @@ public void testCancelRun() {
 		
 		eventCollector.handleEvent(Event.create(null, Type.JOB_STARTED));
 		Thread thread = new Thread(runner);
-		thread.run();
+		thread.start();
 		
 		eventCollector.handleEvent(Event.create(null, Type.JOB_KILLED));
 		synchronized(this) {
 			try {
-				wait(1000);
+				wait(2000);
 			} catch (InterruptedException e) {
 				// TODO Auto-generated catch block
 				e.printStackTrace();
@@ -214,7 +214,7 @@ public void testCancelRun() {
 		}
 		
 		Assert.assertTrue(runner.getStatus() == node.getStatus());
-		Assert.assertTrue(node.getStatus() == Status.KILLED);
+		Assert.assertTrue(node.getStatus() == Status.FAILED);
 		Assert.assertTrue(node.getStartTime() > 0 && node.getEndTime() > 0);
 		// Give it 10 ms to fail.
 		Assert.assertTrue(node.getEndTime() - node.getStartTime() < 3000);

File: src/java/azkaban/executor/ExecutableFlow.java
Patch:
@@ -34,7 +34,7 @@ public class ExecutableFlow {
 	private long endTime = -1;
 	
 	private int updateNumber = 0;
-	private Status flowStatus = Status.UNKNOWN;
+	private Status flowStatus = Status.READY;
 	private String submitUser;
 	private boolean submitted = false;
 	private boolean notifyOnFirstFailure = true;

File: src/java/azkaban/executor/JobRunner.java
Patch:
@@ -156,8 +156,9 @@ public synchronized void cancel() {
 
 		// will just interrupt, I guess, until the code is finished.
 		this.notifyAll();
-
-		node.setStatus(Status.KILLED);
+		if (node.getStatus() != Status.FAILED) {
+			node.setStatus(Status.KILLED);
+		}
 	}
 
 	public Status getStatus() {

File: src/java/azkaban/webapp/servlet/LoginAbstractAzkabanServlet.java
Patch:
@@ -28,7 +28,7 @@ public abstract class LoginAbstractAzkabanServlet extends
 
 	private static final Logger logger = Logger
 			.getLogger(LoginAbstractAzkabanServlet.class.getName());
-	private static final String SESSION_ID_NAME = "azkaban.session.id";
+	private static final String SESSION_ID_NAME = "azkaban.browser.session.id";
 
 	@Override
 	protected void doGet(HttpServletRequest req, HttpServletResponse resp)

File: src/java/azkaban/executor/FlowRunner.java
Patch:
@@ -419,6 +419,7 @@ private void handleFailedJob(ExecutableNode node) {
 		switch (failedOptions) {
 		// We finish running current jobs and then fail. Do not accept new jobs.
 		case FINISH_RUNNING_JOBS:
+			flow.setStatus(Status.FAILED_FINISHING);
 			runningJobs.clear();
 			executorService.shutdown();
 			break;
@@ -459,6 +460,7 @@ public synchronized void handleEvent(Event event) {
 				outputProps.put(jobID, props);
 				flowRunner.handleSucceededJob(runner.getNode());
 			} else if (event.getType() == Type.JOB_FAILED) {
+
 				logger.info("Job Failed " + jobID + " in "
 						+ (node.getEndTime() - node.getStartTime()) + " ms");
 				emailAddress.addAll(runner.getNotifyEmails());

File: src/java/azkaban/executor/FlowRunner.java
Patch:
@@ -269,7 +269,7 @@ public void run() {
 		logger.info("Finishing up flow. Awaiting Termination");
 		executorService.shutdown();
 
-		while (executorService.isTerminated()) {
+		while (!executorService.isTerminated()) {
 			try {
 				executorService.awaitTermination(1, TimeUnit.SECONDS);
 			} catch (InterruptedException e) {

File: src/java/azkaban/executor/FlowRunnerManager.java
Patch:
@@ -16,7 +16,7 @@
 import azkaban.utils.Props;
 
 /**
- * Execution manager for the server side execution client.
+ * Execution manager for the server side execution.
  *
  */
 public class FlowRunnerManager {

File: src/java/azkaban/utils/ExecutableFlowLoader.java
Patch:
@@ -102,6 +102,7 @@ private static File getLatestExecutableFlowDir(File exDir) throws ExecutorManage
 	 */
 	public static boolean updateFlowStatusFromFile(File exDir, ExecutableFlow flow) throws ExecutorManagerException {
 		File file = getLatestExecutableFlowDir(exDir);
+		System.out.println("Loading from: " + file);
 		int number =  getFlowUpdateNumber(file);
 		if (flow.getUpdateNumber() >= number) {
 			return false;

File: src/java/azkaban/project/ProjectManager.java
Patch:
@@ -28,4 +28,6 @@ public interface ProjectManager {
 	public Props getProperties(Project project, String source, User user) throws ProjectManagerException;
 
 	public HashMap<String, Props> getAllFlowProperties(Project project, String flowId, User user) throws ProjectManagerException;
+	
+	public void copyProjectSourceFilesToDirectory(Project project, File directory) throws ProjectManagerException;
 }
\ No newline at end of file

File: src/java/azkaban/project/FileProjectManager.java
Patch:
@@ -91,7 +91,7 @@ private void loadAllProjects() {
     				String source = project.getSource();
     				if (source == null) {
     					logger.info(project.getName() + ": No flows uploaded");
-    					return;
+    					continue;
     				}
     				
     				File projectDir = new File(dir, source);

