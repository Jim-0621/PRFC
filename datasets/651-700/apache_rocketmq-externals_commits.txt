File: rocketmq-spark/src/main/java/org/apache/rocketmq/spark/streaming/DefaultMessageRetryManager.java
Patch:
@@ -26,8 +26,8 @@
 /**
  * An implementation of MessageRetryManager
  */
-public class DefaultMessageRetryManager implements MessageRetryManager{
-    private Map<String,MessageSet> cache = new ConcurrentHashMap<>(500);
+public class DefaultMessageRetryManager implements MessageRetryManager {
+    private Map<String, MessageSet> cache = new ConcurrentHashMap<>(500);
     private BlockingQueue<MessageSet> queue;
     private int maxRetry;
     private int ttl;
@@ -88,7 +88,7 @@ public boolean needRetry(MessageSet messageSet) {
     }
 
     // just for testing
-    public void setCache(Map<String,MessageSet> cache) {
+    public void setCache(Map<String, MessageSet> cache) {
         this.cache = cache;
     }
 }

File: rocketmq-spark/src/main/java/org/apache/rocketmq/spark/streaming/MessageSet.java
Patch:
@@ -28,7 +28,7 @@
 /**
  * A message collection.
  */
-public class MessageSet implements Iterator<Message>, Serializable{
+public class MessageSet implements Iterator<Message>, Serializable {
     private final String id;
     private final List<MessageExt> data;
     private final Iterator<MessageExt> iterator;

File: src/main/java/org/apache/rocketmq/logappender/log4j/RocketmqLog4jAppender.java
Patch:
@@ -66,7 +66,7 @@ public void activateOptions() {
             return;
         }
         try {
-            producer = ProducerInstance.getInstance(nameServerAddress, producerGroup);
+            producer = ProducerInstance.getProducerInstance().getInstance(nameServerAddress, producerGroup);
         } catch (Exception e) {
             LogLog.error("activateOptions nameserver:" + nameServerAddress + " group:" + producerGroup + " " + e.getMessage());
         }
@@ -129,7 +129,7 @@ public synchronized void close() {
         this.closed = true;
 
         try {
-            ProducerInstance.removeAndClose(this.nameServerAddress, this.producerGroup);
+            ProducerInstance.getProducerInstance().removeAndClose(this.nameServerAddress, this.producerGroup);
         } catch (Exception e) {
             LogLog.error("Closing RocketmqLog4jAppender [" + name + "] nameServerAddress:" + nameServerAddress + " group:" + producerGroup + " " + e.getMessage());
         }

File: src/main/java/org/apache/rocketmq/logappender/log4j2/RocketmqLog4j2Appender.java
Patch:
@@ -81,7 +81,7 @@ protected RocketmqLog4j2Appender(String name, Filter filter, Layout<? extends Se
         this.nameServerAddress = nameServerAddress;
         this.producerGroup = producerGroup;
         try {
-            this.producer = ProducerInstance.getInstance(this.nameServerAddress, this.producerGroup);
+            this.producer = ProducerInstance.getProducerInstance().getInstance(this.nameServerAddress, this.producerGroup);
         } catch (Exception e) {
             ErrorHandler handler = this.getHandler();
             if (handler != null) {
@@ -127,7 +127,7 @@ public void append(LogEvent event) {
     public boolean stop(long timeout, TimeUnit timeUnit) {
         this.setStopping();
         try {
-            ProducerInstance.removeAndClose(this.nameServerAddress, this.producerGroup);
+            ProducerInstance.getProducerInstance().removeAndClose(this.nameServerAddress, this.producerGroup);
         } catch (Exception e) {
             ErrorHandler handler = this.getHandler();
             if (handler != null) {

File: src/main/java/org/apache/rocketmq/logappender/logback/RocketmqLogbackAppender.java
Patch:
@@ -97,7 +97,7 @@ public void start() {
             return;
         }
         try {
-            producer = ProducerInstance.getInstance(nameServerAddress, producerGroup);
+            producer = ProducerInstance.getProducerInstance().getInstance(nameServerAddress, producerGroup);
         } catch (Exception e) {
             addError("Starting RocketmqLogbackAppender [" + this.getName()
                     + "] nameServerAddress:" + nameServerAddress + " group:" + producerGroup + " " + e.getMessage());
@@ -119,7 +119,7 @@ public synchronized void stop() {
         this.started = false;
 
         try {
-            ProducerInstance.removeAndClose(this.nameServerAddress, this.producerGroup);
+            ProducerInstance.getProducerInstance().removeAndClose(this.nameServerAddress, this.producerGroup);
         } catch (Exception e) {
             addError("Closeing RocketmqLogbackAppender [" + this.getName()
                     + "] nameServerAddress:" + nameServerAddress + " group:" + producerGroup + " " + e.getMessage());

File: rocketmq-connect-redis/src/main/java/org/apache/rocketmq/connect/redis/parser/SetParser.java
Patch:
@@ -41,7 +41,7 @@ public KVEntry handleValue(KVEntry builder, String[] args) {
         builder.value(args[0]);
         int idx = 1;
         while (idx < args.length){
-            String param = toRune(args[idx++]);
+            String param = args[idx++];
             if (isEquals(param, RedisConstants.NX)) {
                 builder.param(Options.REDIS_NX, Boolean.TRUE);
             } else if (isEquals(param, RedisConstants.XX)) {

File: rocketmq-connect-kafka/src/main/java/org/apache/rocketmq/connect/kafka/connector/KafkaSourceConnector.java
Patch:
@@ -42,7 +42,7 @@ public String verifyAndSetConfig(KeyValue config) {
 
         log.info("KafkaSourceConnector verifyAndSetConfig enter");
         for (String key : config.keySet()) {
-            log.info("connector verifyAndSetConfig: key:{}, value:{}", key, config.getString(key));
+            log.info("connector verifyAndSetConfig: key: {}, value: {}", key, config.getString(key));
         }
 
         for (String requestKey : ConfigDefine.REQUEST_CONFIG) {

File: rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/config/RuntimeConfigDefine.java
Patch:
@@ -44,7 +44,7 @@ public class RuntimeConfigDefine {
     /**
      * Last updated time of the configuration.
      */
-    public static final String UPDATE_TIMESATMP = "update-timestamp";
+    public static final String UPDATE_TIMESTAMP = "update-timestamp";
 
     /**
      * Whether the current config is deleted.
@@ -60,7 +60,7 @@ public class RuntimeConfigDefine {
 
     public static final String RMQ_PRODUCER_GROUP = "rmq-producer-group";
 
-    public static final String RMQ_CONSUMNER_GROUP = "rmq-consumer-group";
+    public static final String RMQ_CONSUMER_GROUP = "rmq-consumer-group";
 
     public static final String OPERATION_TIMEOUT = "operation-timeout";
 

File: rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/config/RuntimeConfigDefine.java
Patch:
@@ -44,7 +44,7 @@ public class RuntimeConfigDefine {
     /**
      * Last updated time of the configuration.
      */
-    public static final String UPDATE_TIMESATMP = "update-timestamp";
+    public static final String UPDATE_TIMESTAMP = "update-timestamp";
 
     /**
      * Whether the current config is deleted.
@@ -60,7 +60,7 @@ public class RuntimeConfigDefine {
 
     public static final String RMQ_PRODUCER_GROUP = "rmq-producer-group";
 
-    public static final String RMQ_CONSUMNER_GROUP = "rmq-consumer-group";
+    public static final String RMQ_CONSUMER_GROUP = "rmq-consumer-group";
 
     public static final String OPERATION_TIMEOUT = "operation-timeout";
 

File: rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/connectorwrapper/WorkerSinkTask.java
Patch:
@@ -271,11 +271,11 @@ public KeyValue configs() {
                     messageQueues.addAll(messageQueues);
                 }
                 log.debug("{} Initializing and starting task for topicNames {}", this, topicNames);
-            } else if(!StringUtils.isEmpty(topicQueuesStr)) {
+            } else if (!StringUtils.isEmpty(topicQueuesStr)) {
                 String[] topicQueues = topicQueuesStr.split(SEMICOLON);
                 for (String messageQueueStr : topicQueues) {
                     String[] items = messageQueueStr.split(COMMA);
-                    if(items.length != 3) {
+                    if (items.length != 3) {
                         log.error("Topic queue format error, topicQueueStr : " + topicNamesStr);
                         return;
                     }

File: rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/service/OffsetManagementServiceImpl.java
Patch:
@@ -60,7 +60,7 @@ public OffsetManagementServiceImpl(ConnectConfig connectConfig) {
             new ByteBufferConverter());
         this.dataSynchronizer = new BrokerBasedLog(connectConfig,
             connectConfig.getOffsetStoreTopic(),
-            ConnectUtil.createGroupName(offsetManagePrefix),
+            ConnectUtil.createGroupName(offsetManagePrefix, connectConfig.getWorkerId()),
             new OffsetChangeCallback(),
             new JsonConverter(),
             new ByteMapConverter());

File: rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/service/PositionManagementServiceImpl.java
Patch:
@@ -60,7 +60,7 @@ public PositionManagementServiceImpl(ConnectConfig connectConfig) {
             new ByteBufferConverter());
         this.dataSynchronizer = new BrokerBasedLog(connectConfig,
             connectConfig.getPositionStoreTopic(),
-            ConnectUtil.createGroupName(positionManagePrefix),
+            ConnectUtil.createGroupName(positionManagePrefix, connectConfig.getWorkerId()),
             new PositionChangeCallback(),
             new JsonConverter(),
             new ByteMapConverter());

File: rocketmq-replicator/src/main/java/org/apache/rocketmq/replicator/strategy/DivideTaskByConsistentHash.java
Patch:
@@ -63,6 +63,9 @@ public class DivideTaskByConsistentHash extends TaskDivideStrategy {
             keyValue.put(TaskConfigEnum.TASK_DATA_TYPE.getKey(), DataType.COMMON_MESSAGE.ordinal());
             keyValue.put(TaskConfigEnum.TASK_TOPIC_INFO.getKey(), JSONObject.toJSONString(queueTopicList.get(i)));
             keyValue.put(TaskConfigEnum.TASK_SOURCE_RECORD_CONVERTER.getKey(), tdc.getSrcRecordConverter());
+            keyValue.put(TaskConfigEnum.TASK_SOURCE_ACL_ENABLE.getKey(), String.valueOf(tdc.isSrcAclEnable()));
+            keyValue.put(TaskConfigEnum.TASK_SOURCE_ACCESS_KEY.getKey(), tdc.getSrcAccessKey());
+            keyValue.put(TaskConfigEnum.TASK_SOURCE_SECRET_KEY.getKey(), tdc.getSrcSecretKey());
             config.add(keyValue);
         }
 

File: rocketmq-replicator/src/main/java/org/apache/rocketmq/replicator/strategy/DivideTaskByQueue.java
Patch:
@@ -54,6 +54,9 @@ public class DivideTaskByQueue extends TaskDivideStrategy {
             keyValue.put(TaskConfigEnum.TASK_DATA_TYPE.getKey(), DataType.COMMON_MESSAGE.ordinal());
             keyValue.put(TaskConfigEnum.TASK_TOPIC_INFO.getKey(), JSONObject.toJSONString(queueTopicList.get(i)));
             keyValue.put(TaskConfigEnum.TASK_SOURCE_RECORD_CONVERTER.getKey(), tdc.getSrcRecordConverter());
+            keyValue.put(TaskConfigEnum.TASK_SOURCE_ACL_ENABLE.getKey(), String.valueOf(tdc.isSrcAclEnable()));
+            keyValue.put(TaskConfigEnum.TASK_SOURCE_ACCESS_KEY.getKey(), tdc.getSrcAccessKey());
+            keyValue.put(TaskConfigEnum.TASK_SOURCE_SECRET_KEY.getKey(), tdc.getSrcSecretKey());
             config.add(keyValue);
         }
 

File: rocketmq-replicator/src/main/java/org/apache/rocketmq/replicator/strategy/DivideTaskByTopic.java
Patch:
@@ -49,6 +49,9 @@ public class DivideTaskByTopic extends TaskDivideStrategy {
             keyValue.put(TaskConfigEnum.TASK_DATA_TYPE.getKey(), DataType.COMMON_MESSAGE.ordinal());
             keyValue.put(TaskConfigEnum.TASK_TOPIC_INFO.getKey(), JSONObject.toJSONString(taskTopicList.get(i)));
             keyValue.put(TaskConfigEnum.TASK_SOURCE_RECORD_CONVERTER.getKey(), tdc.getSrcRecordConverter());
+            keyValue.put(TaskConfigEnum.TASK_SOURCE_ACL_ENABLE.getKey(), String.valueOf(tdc.isSrcAclEnable()));
+            keyValue.put(TaskConfigEnum.TASK_SOURCE_ACCESS_KEY.getKey(), tdc.getSrcAccessKey());
+            keyValue.put(TaskConfigEnum.TASK_SOURCE_SECRET_KEY.getKey(), tdc.getSrcSecretKey());
             config.add(keyValue);
         }
 

File: rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/connectorwrapper/Worker.java
Patch:
@@ -426,6 +426,9 @@ public void maintainTaskState() throws Exception {
                     this.pendingTasks.put(workerSourceTask, System.currentTimeMillis());
                 } else if (task instanceof SinkTask) {
                     DefaultMQPullConsumer consumer = ConnectUtil.initDefaultMQPullConsumer(connectConfig);
+                    if (connectConfig.isAutoCreateGroupEnable()) {
+                        ConnectUtil.createSubGroup(connectConfig, consumer.getConsumerGroup());
+                    }
 
                     WorkerSinkTask workerSinkTask = new WorkerSinkTask(connectorName,
                         (SinkTask) task, keyValue, offsetManagementService, recordConverter, consumer, workerState);

File: rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/service/ConfigManagementServiceImpl.java
Patch:
@@ -77,7 +77,7 @@ public ConfigManagementServiceImpl(ConnectConfig connectConfig, Plugin plugin) {
         this.connectorConfigUpdateListener = new HashSet<>();
         this.dataSynchronizer = new BrokerBasedLog<>(connectConfig,
             connectConfig.getConfigStoreTopic(),
-            ConnectUtil.createGroupName(configManagePrefix),
+            ConnectUtil.createGroupName(configManagePrefix, connectConfig.getWorkerId()),
             new ConfigChangeCallback(),
             new JsonConverter(),
             new ConnAndTaskConfigConverter());

File: rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/service/OffsetManagementServiceImpl.java
Patch:
@@ -60,7 +60,7 @@ public OffsetManagementServiceImpl(ConnectConfig connectConfig) {
             new ByteBufferConverter());
         this.dataSynchronizer = new BrokerBasedLog(connectConfig,
             connectConfig.getOffsetStoreTopic(),
-            ConnectUtil.createGroupName(offsetManagePrefix),
+            ConnectUtil.createGroupName(offsetManagePrefix, connectConfig.getWorkerId()),
             new OffsetChangeCallback(),
             new JsonConverter(),
             new ByteMapConverter());

File: rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/service/PositionManagementServiceImpl.java
Patch:
@@ -60,7 +60,7 @@ public PositionManagementServiceImpl(ConnectConfig connectConfig) {
             new ByteBufferConverter());
         this.dataSynchronizer = new BrokerBasedLog(connectConfig,
             connectConfig.getPositionStoreTopic(),
-            ConnectUtil.createGroupName(positionManagePrefix),
+            ConnectUtil.createGroupName(positionManagePrefix, connectConfig.getWorkerId()),
             new PositionChangeCallback(),
             new JsonConverter(),
             new ByteMapConverter());

File: rocketmq-replicator/src/main/java/org/apache/rocketmq/replicator/MetaSourceTask.java
Patch:
@@ -120,7 +120,7 @@ public void start(KeyValue config) {
 
                 MessageQueue mq = offsetTable.getKey();
                 long srcOffset = offsetTable.getValue().getConsumerOffset();
-                long targetOffset = this.store.convertTargetOffset(mq, srcOffset);
+                long targetOffset = this.store.convertTargetOffset(mq, group, srcOffset);
 
                 JSONObject jsonObject = new JSONObject();
                 jsonObject.put(RmqConstants.NEXT_POSITION, srcOffset);

File: rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/connectorwrapper/WorkerSinkTask.java
Patch:
@@ -271,11 +271,11 @@ public KeyValue configs() {
                     messageQueues.addAll(messageQueues);
                 }
                 log.debug("{} Initializing and starting task for topicNames {}", this, topicNames);
-            } else if(!StringUtils.isEmpty(topicQueuesStr)) {
+            } else if (!StringUtils.isEmpty(topicQueuesStr)) {
                 String[] topicQueues = topicQueuesStr.split(SEMICOLON);
                 for (String messageQueueStr : topicQueues) {
                     String[] items = messageQueueStr.split(COMMA);
-                    if(items.length != 3) {
+                    if (items.length != 3) {
                         log.error("Topic queue format error, topicQueueStr : " + topicNamesStr);
                         return;
                     }

File: rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/ConnectStartup.java
Patch:
@@ -47,7 +47,6 @@ public class ConnectStartup {
     public static Properties properties = null;
 
     public static void main(String[] args) {
-
         start(createConnectController(args));
     }
 

File: rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/service/ConfigManagementServiceImpl.java
Patch:
@@ -103,8 +103,10 @@ public void start() {
     @Override
     public void stop() {
 
+        sendSynchronizeConfig();
         connectorKeyValueStore.persist();
         taskKeyValueStore.persist();
+        dataSynchronizer.stop();
     }
 
     @Override

File: rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/service/RebalanceImpl.java
Patch:
@@ -78,8 +78,11 @@ public void checkClusterStoreTopic() {
      */
     public void doRebalance() {
         List<String> curAliveWorkers = clusterManagementService.getAllAliveWorkers();
+        log.info("Current Alive workers : " + curAliveWorkers.size());
         Map<String, ConnectKeyValue> curConnectorConfigs = configManagementService.getConnectorConfigs();
+        log.info("Current ConnectorConfigs : " + curConnectorConfigs);
         Map<String, List<ConnectKeyValue>> curTaskConfigs = configManagementService.getTaskConfigs();
+        log.info("Current TaskConfigs : " + curTaskConfigs);
         ConnAndTaskConfigs allocateResult = allocateConnAndTaskStrategy.allocate(curAliveWorkers, clusterManagementService.getCurrentWorker(), curConnectorConfigs, curTaskConfigs);
         log.info("Allocated connector:{}", allocateResult.getConnectorConfigs());
         log.info("Allocated task:{}", allocateResult.getTaskConfigs());

File: rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/service/TaskPositionCommitService.java
Patch:
@@ -69,6 +69,6 @@ public void commitTaskPosition() {
         positionManagementService.persist();
         offsetManagementService.persist();
         positionManagementService.synchronize();
-        positionManagementService.synchronize();
+        offsetManagementService.synchronize();
     }
 }

File: rocketmq-connect/rocketmq-connect-runtime/src/test/java/org/apache/rocketmq/connect/runtime/connectorwrapper/WorkerTest.java
Patch:
@@ -26,6 +26,7 @@
 import java.util.Map;
 import java.util.Set;
 import java.util.UUID;
+import java.util.concurrent.atomic.AtomicReference;
 import org.apache.rocketmq.client.producer.DefaultMQProducer;
 import org.apache.rocketmq.connect.runtime.ConnectController;
 import org.apache.rocketmq.connect.runtime.common.ConnectKeyValue;
@@ -97,7 +98,8 @@ public void init() {
                 connectKeyValue,
                 new TestPositionManageServiceImpl(),
                 new TestConverter(),
-                producer
+                producer,
+                new AtomicReference(WorkerState.STARTED)
             ));
         }
         worker.setWorkingTasks(runnables);

File: rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/ConnectStartup.java
Patch:
@@ -47,7 +47,6 @@ public class ConnectStartup {
     public static Properties properties = null;
 
     public static void main(String[] args) {
-
         start(createConnectController(args));
     }
 

File: rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/service/RebalanceImpl.java
Patch:
@@ -78,8 +78,11 @@ public void checkClusterStoreTopic() {
      */
     public void doRebalance() {
         List<String> curAliveWorkers = clusterManagementService.getAllAliveWorkers();
+        log.info("Current Alive workers : " + curAliveWorkers.size());
         Map<String, ConnectKeyValue> curConnectorConfigs = configManagementService.getConnectorConfigs();
+        log.info("Current ConnectorConfigs : " + curConnectorConfigs);
         Map<String, List<ConnectKeyValue>> curTaskConfigs = configManagementService.getTaskConfigs();
+        log.info("Current TaskConfigs : " + curTaskConfigs);
         ConnAndTaskConfigs allocateResult = allocateConnAndTaskStrategy.allocate(curAliveWorkers, clusterManagementService.getCurrentWorker(), curConnectorConfigs, curTaskConfigs);
         log.info("Allocated connector:{}", allocateResult.getConnectorConfigs());
         log.info("Allocated task:{}", allocateResult.getTaskConfigs());

File: rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/connectorwrapper/WorkerSinkTask.java
Patch:
@@ -430,13 +430,13 @@ private SinkDataEntry convertToSinkDataEntry(MessageExt message) {
         dataEntryBuilder.entryType(entryType);
         dataEntryBuilder.queue(queueName);
         dataEntryBuilder.timestamp(timestamp);
-        SinkDataEntry sinkDataEntry = dataEntryBuilder.buildSinkDataEntry(message.getQueueOffset());
         List<Field> fields = schema.getFields();
         if (null != fields && !fields.isEmpty()) {
             for (Field field : fields) {
                 dataEntryBuilder.putFiled(field.getName(), datas[field.getIndex()]);
             }
         }
+        SinkDataEntry sinkDataEntry = dataEntryBuilder.buildSinkDataEntry(message.getQueueOffset());
         return sinkDataEntry;
     }
 

File: rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/connectorwrapper/Worker.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.rocketmq.connect.runtime.connectorwrapper;
 
+import io.netty.util.concurrent.DefaultThreadFactory;
 import io.netty.util.internal.ConcurrentSet;
 import io.openmessaging.connector.api.Connector;
 import io.openmessaging.connector.api.Task;
@@ -139,7 +140,7 @@ public Worker(ConnectConfig connectConfig,
                   PositionManagementService positionManagementService, PositionManagementService offsetManagementService,
                   Plugin plugin) {
         this.connectConfig = connectConfig;
-        this.taskExecutor = Executors.newCachedThreadPool();
+        this.taskExecutor = Executors.newCachedThreadPool(new DefaultThreadFactory("task-Worker-Executor-"));
         this.positionManagementService = positionManagementService;
         this.offsetManagementService = offsetManagementService;
         this.taskPositionCommitService = new TaskPositionCommitService(

File: rocketmq-console/src/main/java/org/apache/rocketmq/console/service/impl/MessageTraceServiceImpl.java
Patch:
@@ -33,7 +33,6 @@
 import org.apache.rocketmq.client.trace.TraceType;
 import org.apache.rocketmq.common.Pair;
 import org.apache.rocketmq.common.message.MessageExt;
-import org.apache.rocketmq.common.topic.TopicValidator;
 import org.apache.rocketmq.console.config.RMQConfigure;
 import org.apache.rocketmq.console.model.MessageTraceView;
 import org.apache.rocketmq.console.model.trace.ProducerNode;

File: rocketmq-console/src/test/java/org/apache/rocketmq/console/controller/BaseControllerTest.java
Patch:
@@ -63,6 +63,7 @@ protected void mockRmqConfigure() {
         when(configure.getSecretKey()).thenReturn("rocketmq");
         when(configure.getNamesrvAddr()).thenReturn("127.0.0.1:9876");
         when(configure.isACLEnabled()).thenReturn(true);
+        when(configure.isUseTLS()).thenReturn(false);
     }
 
     protected ResultActions performOkExpect(ResultActions perform) throws Exception {

File: rocketmq-console/src/test/java/org/apache/rocketmq/console/controller/TopicControllerTest.java
Patch:
@@ -57,6 +57,7 @@
 import static org.mockito.ArgumentMatchers.anyLong;
 import static org.mockito.ArgumentMatchers.anyString;
 import static org.mockito.Mockito.doNothing;
+import static org.mockito.Mockito.doReturn;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
@@ -108,7 +109,7 @@ public void testList() throws Exception {
             when(defaultMQProducer.getmQClientFactory()).thenReturn(mqClientInstance);
             when(mqClientInstance.getMQClientAPIImpl()).thenReturn(mqClientAPIImpl);
             when(mqClientAPIImpl.getSystemTopicList(anyLong())).thenReturn(sysTopicList);
-            when(topicService.buildDefaultMQProducer(anyString(), any(), anyBoolean())).thenReturn(producer);
+            doReturn(producer).when(topicService).buildDefaultMQProducer(anyString(), any(), anyBoolean());
         }
         final String url = "/topic/list.query";
 
@@ -246,7 +247,7 @@ public void testSendTopicMessage() throws Exception {
             SendResult result = new SendResult(SendStatus.SEND_OK, "7F000001E41A2E5D6D978B82C20F003D",
                 "0A8E83C300002A9F00000000000013D3", new MessageQueue(), 1000L);
             when(producer.send(any(Message.class))).thenReturn(result);
-            when(topicService.buildDefaultMQProducer(anyString(), any(), anyBoolean())).thenReturn(producer);
+            doReturn(producer).when(topicService).buildDefaultMQProducer(anyString(), any(), anyBoolean());
         }
 
         SendTopicMessageRequest request = new SendTopicMessageRequest();

File: rocketmq-console/src/test/java/org/apache/rocketmq/console/controller/MessageTraceControllerTest.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.rocketmq.client.exception.MQClientException;
 import org.apache.rocketmq.client.trace.TraceType;
 import org.apache.rocketmq.common.message.MessageExt;
+import org.apache.rocketmq.common.topic.TopicValidator;
 import org.apache.rocketmq.console.service.impl.MessageServiceImpl;
 import org.apache.rocketmq.console.service.impl.MessageTraceServiceImpl;
 import org.apache.rocketmq.console.util.MockObjectUtil;
@@ -56,7 +57,7 @@ public class MessageTraceControllerTest extends BaseControllerTest {
     @Before
     public void init() throws MQClientException, InterruptedException {
         super.mockRmqConfigure();
-        when(configure.getMsgTrackTopicName()).thenReturn(null);
+        when(configure.getMsgTrackTopicNameOrDefault()).thenReturn(TopicValidator.RMQ_SYS_TRACE_TOPIC);
         List<MessageExt> messageList = new ArrayList<>(2);
         MessageExt messageExt = MockObjectUtil.createMessageExt();
         messageExt.setBody(MockObjectUtil.createTraceData().getBytes());

File: rocketmq-console/src/test/java/org/apache/rocketmq/console/service/impl/MessageTraceServiceImplTest.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.rocketmq.client.QueryResult;
 import org.apache.rocketmq.client.producer.LocalTransactionState;
 import org.apache.rocketmq.common.message.MessageExt;
+import org.apache.rocketmq.common.topic.TopicValidator;
 import org.apache.rocketmq.console.config.RMQConfigure;
 import org.apache.rocketmq.console.model.MessageTraceView;
 import org.apache.rocketmq.console.model.trace.MessageTraceGraph;
@@ -69,7 +70,7 @@ public class MessageTraceServiceImplTest {
     @BeforeEach
     public void init() {
         MockitoAnnotations.initMocks(this);
-        Mockito.when(rmqConfigure.getMsgTrackTopicName()).thenReturn(null);
+        Mockito.when(rmqConfigure.getMsgTrackTopicNameOrDefault()).thenReturn(TopicValidator.RMQ_SYS_TRACE_TOPIC);
         fakeMessageExt = new MessageExt();
         fakeMessageExt.setKeys(Lists.newArrayList(TEST_KEY));
         fakeMessageExt.setBody(PUB_TRACE.getBytes(StandardCharsets.UTF_8));

File: rocketmq-console/src/test/java/org/apache/rocketmq/console/controller/MonitorControllerTest.java
Patch:
@@ -54,7 +54,7 @@ public class MonitorControllerTest extends BaseControllerTest {
     @Before
     public void init() {
         super.mockRmqConfigure();
-        when(configure.getRocketMqConsoleDataPath()).thenReturn("");
+        when(configure.getRocketMqConsoleDataPath()).thenReturn("/tmp/rocketmq-console/test/data");
         Map<String, ConsumerMonitorConfig> configMap = new ConcurrentHashMap<>();
         configMap.put(consumeGroupName, new ConsumerMonitorConfig(0, 100));
         configMap.put(consumeGroupName1, new ConsumerMonitorConfig(10, 200));

File: rocketmq-console/src/test/java/org/apache/rocketmq/console/util/MsgTraceDecodeUtilTest.java
Patch:
@@ -107,7 +107,8 @@ public void testDecodeSubTraceMessage() {
         Assert.assertEquals(traceContextListV1.get(0).isSuccess(), true);
         Assert.assertEquals(traceContextListV1.get(0).getTraceBeans().get(0).getMsgId(), "0A741C02622500000000080cc698003f");
         Assert.assertEquals(traceContextListV1.get(0).getTraceBeans().get(0).getRetryTimes(), 2);
-        Assert.assertEquals(traceContextListV1.get(0).getTraceBeans().get(0).getClientHost(), "10.10.10.11@39960");
+        // FIXME bad case for compatibility backward
+        // Assert.assertEquals(traceContextListV1.get(0).getTraceBeans().get(0).getClientHost(), "10.10.10.11@39960");
         Assert.assertEquals(traceContextListV1.get(1).getTraceType().toString(), "SubAfter");
         Assert.assertEquals(traceContextListV1.get(1).isSuccess(), false);
         Assert.assertEquals(traceContextListV1.get(1).getTraceBeans().get(0).getMsgId(), "0A741C02622500000000080cc698003f");

File: rocketmq-console/src/main/java/org/apache/rocketmq/console/aspect/admin/MQAdminAspect.java
Patch:
@@ -61,10 +61,10 @@ public Object aroundMQAdminMethod(ProceedingJoinPoint joinPoint) throws Throwabl
             Method method = signature.getMethod();
             MultiMQAdminCmdMethod multiMQAdminCmdMethod = method.getAnnotation(MultiMQAdminCmdMethod.class);
             if (multiMQAdminCmdMethod != null && multiMQAdminCmdMethod.timeoutMillis() > 0) {
-                MQAdminInstance.initMQAdminInstance(multiMQAdminCmdMethod.timeoutMillis(),rmqConfigure.getAccessKey(),rmqConfigure.getSecretKey());
+                MQAdminInstance.initMQAdminInstance(multiMQAdminCmdMethod.timeoutMillis(),rmqConfigure.getAccessKey(),rmqConfigure.getSecretKey(), rmqConfigure.isUseTLS());
             }
             else {
-                MQAdminInstance.initMQAdminInstance(0,rmqConfigure.getAccessKey(),rmqConfigure.getSecretKey());
+                MQAdminInstance.initMQAdminInstance(0,rmqConfigure.getAccessKey(),rmqConfigure.getSecretKey(), rmqConfigure.isUseTLS());
             }
             obj = joinPoint.proceed();
         }
@@ -74,4 +74,4 @@ public Object aroundMQAdminMethod(ProceedingJoinPoint joinPoint) throws Throwabl
         }
         return obj;
     }
-}
\ No newline at end of file
+}

File: rocketmq-console/src/main/java/org/apache/rocketmq/console/service/OpsService.java
Patch:
@@ -29,4 +29,6 @@ public interface OpsService {
     Map<CheckerType,Object> rocketMqStatusCheck();
 
     boolean updateIsVIPChannel(String useVIPChannel);
+
+    boolean updateUseTLS(boolean useTLS);
 }

File: rocketmq-console/src/main/java/org/apache/rocketmq/console/service/client/MQAdminInstance.java
Patch:
@@ -51,7 +51,7 @@ public static MQClientInstance threadLocalMqClientInstance() {
         DefaultMQAdminExtImpl defaultMQAdminExtImpl = Reflect.on(MQAdminInstance.threadLocalMQAdminExt()).get("defaultMQAdminExtImpl");
         return Reflect.on(defaultMQAdminExtImpl).get("mqClientInstance");
     }
-    public static void initMQAdminInstance(long timeoutMillis,String accessKey,String secretKey) throws MQClientException {
+    public static void initMQAdminInstance(long timeoutMillis,String accessKey,String secretKey, boolean useTLS) throws MQClientException {
         Integer nowCount = INIT_COUNTER.get();
         if (nowCount == null) {
             RPCHook rpcHook = null;
@@ -66,6 +66,7 @@ public static void initMQAdminInstance(long timeoutMillis,String accessKey,Strin
             else {
                 defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);
             }
+            defaultMQAdminExt.setUseTLS(useTLS);
             defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));
             defaultMQAdminExt.start();
             MQ_ADMIN_EXT_THREAD_LOCAL.set(defaultMQAdminExt);

File: rocketmq-console/src/test/java/org/apache/rocketmq/console/controller/MessageControllerTest.java
Patch:
@@ -50,6 +50,7 @@
 
 import static org.hamcrest.Matchers.hasSize;
 import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.anyBoolean;
 import static org.mockito.ArgumentMatchers.anyInt;
 import static org.mockito.ArgumentMatchers.anyLong;
 import static org.mockito.ArgumentMatchers.anyString;
@@ -88,7 +89,7 @@ public void init() throws Exception {
             when(pullResult.getNextBeginOffset()).thenReturn(Long.MAX_VALUE);
             when(pullResult.getPullStatus()).thenReturn(PullStatus.FOUND);
             when(pullResult.getMsgFoundList()).thenReturn(wrappers);
-            when(messageService.buildDefaultMQPullConsumer(any())).thenReturn(defaultMQPullConsumer);
+            when(messageService.buildDefaultMQPullConsumer(any(), anyBoolean())).thenReturn(defaultMQPullConsumer);
         }
     }
 

File: rocketmq-console/src/test/java/org/apache/rocketmq/console/controller/TopicControllerTest.java
Patch:
@@ -108,7 +108,7 @@ public void testList() throws Exception {
             when(defaultMQProducer.getmQClientFactory()).thenReturn(mqClientInstance);
             when(mqClientInstance.getMQClientAPIImpl()).thenReturn(mqClientAPIImpl);
             when(mqClientAPIImpl.getSystemTopicList(anyLong())).thenReturn(sysTopicList);
-            when(topicService.buildDefaultMQProducer(anyString(), any())).thenReturn(producer);
+            when(topicService.buildDefaultMQProducer(anyString(), any(), anyBoolean())).thenReturn(producer);
         }
         final String url = "/topic/list.query";
 
@@ -246,7 +246,7 @@ public void testSendTopicMessage() throws Exception {
             SendResult result = new SendResult(SendStatus.SEND_OK, "7F000001E41A2E5D6D978B82C20F003D",
                 "0A8E83C300002A9F00000000000013D3", new MessageQueue(), 1000L);
             when(producer.send(any(Message.class))).thenReturn(result);
-            when(topicService.buildDefaultMQProducer(anyString(), any())).thenReturn(producer);
+            when(topicService.buildDefaultMQProducer(anyString(), any(), anyBoolean())).thenReturn(producer);
         }
 
         SendTopicMessageRequest request = new SendTopicMessageRequest();

File: rocketmq-console/src/main/java/org/apache/rocketmq/console/service/impl/DashboardCollectServiceImpl.java
Patch:
@@ -45,7 +45,7 @@
 public class DashboardCollectServiceImpl implements DashboardCollectService {
 
     @Resource
-    private RMQConfigure rmqConfigure;
+    private RMQConfigure configure;
 
     private final static Logger log = LoggerFactory.getLogger(DashboardCollectServiceImpl.class);
 
@@ -133,7 +133,7 @@ public Map<String, List<String>> jsonDataFile2map(File file) {
 
     @Override
     public Map<String, List<String>> getBrokerCache(String date) {
-        String dataLocationPath = rmqConfigure.getConsoleCollectData();
+        String dataLocationPath = configure.getConsoleCollectData();
         File file = new File(dataLocationPath + date + ".json");
         if (!file.exists()) {
             log.info(String.format("No dashboard data for broker cache data: %s", date));
@@ -144,7 +144,7 @@ public Map<String, List<String>> getBrokerCache(String date) {
 
     @Override
     public Map<String, List<String>> getTopicCache(String date) {
-        String dataLocationPath = rmqConfigure.getConsoleCollectData();
+        String dataLocationPath = configure.getConsoleCollectData();
         File file = new File(dataLocationPath + date + "_topic" + ".json");
         if (!file.exists()) {
             log.info(String.format("No dashboard data for data: %s", date));

File: rocketmq-console/src/main/java/org/apache/rocketmq/console/service/impl/MessageTraceServiceImpl.java
Patch:
@@ -59,11 +59,11 @@ public class MessageTraceServiceImpl implements MessageTraceService {
     private MQAdminExt mqAdminExt;
 
     @Resource
-    private RMQConfigure rmqConfigure;
+    private RMQConfigure configure;
 
     @Override
     public List<MessageTraceView> queryMessageTraceKey(String key) {
-        String queryTopic = rmqConfigure.getMsgTrackTopicName();
+        String queryTopic = configure.getMsgTrackTopicName();
         if (StringUtils.isEmpty(queryTopic)) {
             queryTopic = TopicValidator.RMQ_SYS_TRACE_TOPIC;
         }

File: rocketmq-console/src/main/java/org/apache/rocketmq/console/service/impl/MonitorServiceImpl.java
Patch:
@@ -36,7 +36,7 @@ public class MonitorServiceImpl implements MonitorService {
 
 
     @Resource
-    private RMQConfigure rmqConfigure;
+    private RMQConfigure configure;
 
     private Map<String, ConsumerMonitorConfig> configMap = new ConcurrentHashMap<>();
 
@@ -66,7 +66,7 @@ public boolean deleteConsumerMonitor(String consumeGroupName) {
 
     //rocketmq.console.data.path/monitor/consumerMonitorConfig.json
     private String getConsumerMonitorConfigDataPath() {
-        return rmqConfigure.getRocketMqConsoleDataPath() + File.separatorChar + "monitor" + File.separatorChar + "consumerMonitorConfig.json";
+        return configure.getRocketMqConsoleDataPath() + File.separatorChar + "monitor" + File.separatorChar + "consumerMonitorConfig.json";
     }
 
     private String getConsumerMonitorConfigDataPathBackUp() {

File: rocketmq-console/src/main/java/org/apache/rocketmq/console/service/impl/UserServiceImpl.java
Patch:
@@ -61,7 +61,7 @@ public void afterPropertiesSet() throws Exception {
         }
     }
 
-    /*packaged*/ static class FileBasedUserInfoStore {
+    public static class FileBasedUserInfoStore {
         private final Logger log = LoggerFactory.getLogger(this.getClass());
         private static final String FILE_NAME = "users.properties";
 

File: rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/service/TaskPositionCommitService.java
Patch:
@@ -69,6 +69,6 @@ public void commitTaskPosition() {
         positionManagementService.persist();
         offsetManagementService.persist();
         positionManagementService.synchronize();
-        positionManagementService.synchronize();
+        offsetManagementService.synchronize();
     }
 }

File: rocketmq-console/src/main/java/org/apache/rocketmq/console/model/MessageTraceView.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.rocketmq.client.trace.TraceBean;
 import org.apache.rocketmq.client.trace.TraceContext;
 import org.apache.rocketmq.common.message.MessageExt;
+import org.apache.rocketmq.console.model.trace.MessageTraceStatusEnum;
 import org.apache.rocketmq.console.util.MsgTraceDecodeUtil;
 
 import java.util.ArrayList;
@@ -66,9 +67,9 @@ public static List<MessageTraceView> decodeFromTraceTransData(String key, Messag
             messageTraceView.setCostTime(context.getCostTime());
             messageTraceView.setGroupName(context.getGroupName());
             if (context.isSuccess()) {
-                messageTraceView.setStatus("success");
+                messageTraceView.setStatus(MessageTraceStatusEnum.SUCCESS.getStatus());
             } else {
-                messageTraceView.setStatus("failed");
+                messageTraceView.setStatus(MessageTraceStatusEnum.FAILED.getStatus());
             }
             messageTraceView.setKeys(traceBean.getKeys());
             messageTraceView.setMsgId(traceBean.getMsgId());

File: rocketmq-console/src/main/java/org/apache/rocketmq/console/model/trace/TraceNode.java
Patch:
@@ -25,8 +25,8 @@ public class TraceNode {
     private String storeHost;
     private String clientHost;
     private int costTime;
-    private long beginTimeStamp;
-    private long endTimeStamp;
+    private long beginTimestamp;
+    private long endTimestamp;
     private int retryTimes;
     private String status;
     private String transactionState;

File: rocketmq-console/src/main/java/org/apache/rocketmq/console/service/impl/ClusterServiceImpl.java
Patch:
@@ -50,7 +50,6 @@ public Map<String, Object> list() {
                 Map<Long, Object> brokerMasterSlaveMap = Maps.newHashMap();
                 for (Map.Entry<Long/* brokerId */, String/* broker address */> brokerAddr : brokerData.getBrokerAddrs().entrySet()) {
                     KVTable kvTable = mqAdminExt.fetchBrokerRuntimeStats(brokerAddr.getValue());
-//                KVTable kvTable = mqAdminExt.fetchBrokerRuntimeStats("127.0.0.1:10911");
                     brokerMasterSlaveMap.put(brokerAddr.getKey(), kvTable.getTable());
                 }
                 brokerServer.put(brokerData.getBrokerName(), brokerMasterSlaveMap);

File: rocketmq-console/src/test/java/org/apache/rocketmq/console/controller/TopicControllerTest.java
Patch:
@@ -380,7 +380,7 @@ private TopicRouteData createTopicRouteData() {
         queueData.setPerm(6);
         queueData.setReadQueueNums(4);
         queueData.setWriteQueueNums(4);
-        queueData.setTopicSynFlag(0);
+        queueData.setTopicSysFlag(0);
         queueDataList.add(queueData);
         topicRouteData.setQueueDatas(queueDataList);
         return topicRouteData;

File: rocketmq-console/src/main/java/org/apache/rocketmq/console/util/MsgTraceDecodeUtil.java
Patch:
@@ -103,7 +103,6 @@ public static List<TraceContext> decoderFromTraceDataString(String traceData) {
                 bean.setMsgId(line[5]);
                 bean.setRetryTimes(Integer.parseInt(line[6]));
                 bean.setKeys(line[7]);
-                bean.setClientHost(line[8]);
                 subBeforeContext.setTraceBeans(new ArrayList<TraceBean>(1));
                 subBeforeContext.getTraceBeans().add(bean);
                 resList.add(subBeforeContext);

File: rocketmq-connect-jdbc/src/main/java/org/apache/rocketmq/connect/jdbc/common/ConstDefine.java
Patch:
@@ -19,5 +19,5 @@
 public class ConstDefine {
 
     public static String JDBC_CONNECTOR_ADMIN_PREFIX = "JDBC-CONNECTOR-ADMIN";
-
+    public static final String PREFIX = "jdbc";
 }

File: rocketmq-connect-jdbc/src/main/java/org/apache/rocketmq/connect/jdbc/config/SourceDbConnectorConfig.java
Patch:
@@ -18,9 +18,9 @@ public SourceDbConnectorConfig(){
 
     @Override
     public void validate(KeyValue config) {
-        this.taskParallelism = config.getInt(Config.CONN_TASK_PARALLELISM, 0);
+        this.taskParallelism = config.getInt(Config.CONN_TASK_PARALLELISM, 1);
 
-        int strategy = config.getInt(Config.CONN_TASK_DIVIDE_STRATEGY, DivideStrategyEnum.BY_QUEUE.ordinal());
+        int strategy = config.getInt(Config.CONN_TASK_DIVIDE_STRATEGY, DivideStrategyEnum.BY_TOPIC.ordinal());
         if (strategy == DivideStrategyEnum.BY_QUEUE.ordinal()) {
             this.taskDivideStrategy = new DivideTaskByQueue();
         } else {

File: rocketmq-connect-jdbc/src/main/java/org/apache/rocketmq/connect/jdbc/connector/JdbcSourceConnector.java
Patch:
@@ -59,7 +59,7 @@ public String verifyAndSetConfig(KeyValue config) {
 
     @Override
     public void start() {
-
+        log.info("JdbcSourceConnector start");
     }
 
     @Override

File: rocketmq-connect-jdbc/src/main/java/org/apache/rocketmq/connect/jdbc/source/TimestampIncrementingQuerier.java
Patch:
@@ -288,9 +288,9 @@ public void initDataSource() throws Exception {
         incrementingColumn = config.getIncrementingColumnName();
         map.put("driverClassName", "com.mysql.cj.jdbc.Driver");
         map.put("url",
-                "jdbc:mysql://" + config.getJdbcUrl() + "?useSSL=true&verifyServerCertificate=false&serverTimezone=GMT%2B8");
-        map.put("username", config.getJdbcUsername());
-        map.put("password", config.getJdbcPassword());
+                "jdbc:mysql://" + config.getDbUrl() + ":" + config.getDbPort() +"?useSSL=true&verifyServerCertificate=false&serverTimezone=GMT%2B8");
+        map.put("username", config.getDbUsername());
+        map.put("password", config.getDbPassword());
         map.put("initialSize", "2");
         map.put("maxActive", "2");
         map.put("maxWait", "60000");

File: rocketmq-connect-jdbc/src/main/java/org/apache/rocketmq/connect/jdbc/strategy/DivideTaskByQueue.java
Patch:
@@ -19,6 +19,7 @@
 import com.alibaba.fastjson.JSONObject;
 import io.openmessaging.KeyValue;
 import io.openmessaging.internal.DefaultKeyValue;
+import java.util.Set;
 import org.apache.rocketmq.connect.jdbc.config.*;
 
 import java.util.ArrayList;
@@ -41,7 +42,7 @@ public List<KeyValue> divideSinkTaskByQueue(DbConnectorConfig dbConnectorConfig,
         List<KeyValue> config = new ArrayList<KeyValue>();
         int parallelism = tdc.getTaskParallelism();
         Map<Integer, List<TaskTopicInfo>> queueTopicList = new HashMap<Integer, List<TaskTopicInfo>>();
-        Map<String, List<TaskTopicInfo>> topicRouteMap = ((SinkDbConnectorConfig)dbConnectorConfig).getTopicRouteMap();
+        Map<String, Set<TaskTopicInfo>> topicRouteMap = ((SinkDbConnectorConfig)dbConnectorConfig).getTopicRouteMap();
         int id = -1;
         for (String t : topicRouteMap.keySet()) {
             for (TaskTopicInfo taskTopicInfo : topicRouteMap.get(t)) {

File: rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/ConnectStartup.java
Patch:
@@ -101,7 +101,6 @@ private static ConnectController createConnectController(String[] args) {
             // Create controller and initialize.
             ConnectController controller = new ConnectController(connectConfig);
             controller.initialize();
-
             // Invoked when shutdown.
             Runtime.getRuntime().addShutdownHook(new Thread(new Runnable() {
                 private volatile boolean hasShutdown = false;

File: rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/service/RebalanceImpl.java
Patch:
@@ -77,11 +77,9 @@ public void checkClusterStoreTopic() {
      * Distribute connectors and tasks according to the {@link RebalanceImpl#allocateConnAndTaskStrategy}.
      */
     public void doRebalance() {
-
         List<String> curAliveWorkers = clusterManagementService.getAllAliveWorkers();
         Map<String, ConnectKeyValue> curConnectorConfigs = configManagementService.getConnectorConfigs();
         Map<String, List<ConnectKeyValue>> curTaskConfigs = configManagementService.getTaskConfigs();
-
         ConnAndTaskConfigs allocateResult = allocateConnAndTaskStrategy.allocate(curAliveWorkers, clusterManagementService.getCurrentWorker(), curConnectorConfigs, curTaskConfigs);
         log.info("Allocated connector:{}", allocateResult.getConnectorConfigs());
         log.info("Allocated task:{}", allocateResult.getTaskConfigs());

File: rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/service/RebalanceService.java
Patch:
@@ -59,6 +59,7 @@ public void run() {
         this.rebalanceImpl.checkClusterStoreTopic();
 
         while (!this.isStopped()) {
+
             this.waitForRunning(waitInterval);
             this.rebalanceImpl.doRebalance();
         }

File: rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/store/MemoryBasedKeyValueStore.java
Patch:
@@ -17,15 +17,16 @@
 
 package org.apache.rocketmq.connect.runtime.store;
 
-import java.util.HashMap;
+
 import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
 
 public class MemoryBasedKeyValueStore<K, V> implements KeyValueStore<K, V> {
 
     protected Map<K, V> data;
 
     public MemoryBasedKeyValueStore() {
-        this.data = new HashMap<>();
+        this.data = new ConcurrentHashMap<>();
     }
 
     @Override

File: rocketmq-console/src/main/java/org/apache/rocketmq/console/App.java
Patch:
@@ -19,8 +19,10 @@
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.web.servlet.ServletComponentScan;
+import org.springframework.scheduling.annotation.EnableScheduling;
 
 @SpringBootApplication
+@EnableScheduling
 @ServletComponentScan
 public class App {
 

File: rocketmq-console/src/main/java/org/apache/rocketmq/console/controller/MessageTraceController.java
Patch:
@@ -22,8 +22,8 @@
 import java.util.Map;
 import javax.annotation.Resource;
 import org.apache.commons.lang3.StringUtils;
-import org.apache.rocketmq.common.MixAll;
 import org.apache.rocketmq.common.Pair;
+import org.apache.rocketmq.common.topic.TopicValidator;
 import org.apache.rocketmq.console.config.RMQConfigure;
 import org.apache.rocketmq.console.model.MessageView;
 import org.apache.rocketmq.console.service.MessageService;
@@ -65,7 +65,7 @@ public Object viewMessage(@RequestParam(required = false) String topic, @Request
     public Object viewTraceMessages(@RequestParam(required = false) String topic, @RequestParam String msgId) {
         String queryTopic = rmqConfigure.getMsgTrackTopicName();
         if (StringUtils.isEmpty(queryTopic)) {
-            queryTopic = MixAll.RMQ_SYS_TRACE_TOPIC;
+            queryTopic = TopicValidator.RMQ_SYS_TRACE_TOPIC;
         }
         logger.info("query data topic name is:{}",queryTopic);
         return messageTraceService.queryMessageTraceByTopicAndKey(queryTopic, msgId);

File: rocketmq-console/src/main/java/org/apache/rocketmq/console/filter/HttpBasicAuthorizedFilter.java
Patch:
@@ -26,9 +26,8 @@
 import javax.servlet.ServletResponse;
 import javax.servlet.annotation.WebFilter;
 import javax.servlet.http.HttpServletResponse;
-import org.springframework.stereotype.Component;
 
-@Component
+
 @WebFilter(urlPatterns = "/*", filterName = "httpBasicAuthorizedFilter")
 public class HttpBasicAuthorizedFilter implements Filter {
     

File: rocketmq-console/src/main/java/org/apache/rocketmq/console/model/GroupConsumeInfo.java
Patch:
@@ -71,10 +71,9 @@ public void setDiffTotal(long diffTotal) {
     @Override
     public int compareTo(GroupConsumeInfo o) {
         if (this.count != o.count) {
-            return o.count - this.count;
+            return Integer.compare(o.count, this.count);
         }
-
-        return (int) (o.diffTotal - diffTotal);
+        return Long.compare(o.diffTotal, this.diffTotal);
     }
 
     public int getConsumeTps() {

File: rocketmq-console/src/main/java/org/apache/rocketmq/console/service/impl/ConsumerServiceImpl.java
Patch:
@@ -95,15 +95,15 @@ public GroupConsumeInfo queryGroup(String consumerGroup) {
                 consumeStats = mqAdminExt.examineConsumeStats(consumerGroup);
             }
             catch (Exception e) {
-                logger.warn("examineConsumeStats exception, " + consumerGroup, e);
+                logger.warn("examineConsumeStats exception to consumerGroup {}, response [{}]", consumerGroup, e.getMessage());
             }
 
             ConsumerConnection consumerConnection = null;
             try {
                 consumerConnection = mqAdminExt.examineConsumerConnectionInfo(consumerGroup);
             }
             catch (Exception e) {
-                logger.warn("examineConsumerConnectionInfo exception, " + consumerGroup, e);
+                logger.warn("examineConsumeStats exception to consumerGroup {}, response [{}]", consumerGroup, e.getMessage());
             }
 
             groupConsumeInfo.setGroup(consumerGroup);

File: rocketmq-console/src/main/java/org/apache/rocketmq/console/service/impl/DashboardCollectServiceImpl.java
Patch:
@@ -36,7 +36,6 @@
 import java.util.Set;
 import javax.annotation.Resource;
 import org.apache.rocketmq.console.config.RMQConfigure;
-import org.apache.rocketmq.console.exception.ServiceException;
 import org.apache.rocketmq.console.service.DashboardCollectService;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -137,7 +136,8 @@ public Map<String, List<String>> getBrokerCache(String date) {
         String dataLocationPath = rmqConfigure.getConsoleCollectData();
         File file = new File(dataLocationPath + date + ".json");
         if (!file.exists()) {
-            throw Throwables.propagate(new ServiceException(1, "This date have't data!"));
+            log.info(String.format("No dashboard data for broker cache data: %s", date));
+            return Maps.newHashMap();
         }
         return jsonDataFile2map(file);
     }

File: rocketmq-console/src/main/java/org/apache/rocketmq/console/service/impl/LoginServiceImpl.java
Patch:
@@ -62,6 +62,7 @@ protected void auth(HttpServletRequest request, HttpServletResponse response) {
             } catch (UnsupportedEncodingException e) {
                 logger.error("url encode:{}", url, e);
             }
+            logger.debug("redirect url : {}", url);
             WebUtil.redirect(response, request, "/#/login?redirect=" + url);
         } catch (IOException e) {
             logger.error("redirect err", e);

File: rocketmq-console/src/main/java/org/apache/rocketmq/console/service/impl/UserServiceImpl.java
Patch:
@@ -56,7 +56,7 @@ public User queryByUsernameAndPassword(String username, String password) {
 
     @Override
     public void afterPropertiesSet() throws Exception {
-        if (configure.isEnableDashBoardCollect()) {
+        if (configure.isLoginRequired()) {
             fileBasedUserInfoStore = new FileBasedUserInfoStore(configure);
         }
     }

File: rocketmq-replicator/src/main/java/org/apache/rocketmq/replicator/RmqSourceTask.java
Patch:
@@ -160,10 +160,10 @@ private Collection<SourceDataEntry> pollCommonMessage() {
                             schema.getFields().add(new Field(0,
                                 FieldName.COMMON_MESSAGE.getKey(), FieldType.STRING));
 
-                            DataEntryBuilder dataEntryBuilder = new DataEntryBuilder(schema);
-                            dataEntryBuilder.timestamp(System.currentTimeMillis())
-                                .queue(this.config.getStoreTopic()).entryType(EntryType.CREATE);
                             for (MessageExt msg : msgs) {
+                                DataEntryBuilder dataEntryBuilder = new DataEntryBuilder(schema);
+                                dataEntryBuilder.timestamp(System.currentTimeMillis())
+                                        .queue(this.config.getStoreTopic()).entryType(EntryType.CREATE);
                                 dataEntryBuilder.putFiled(FieldName.COMMON_MESSAGE.getKey(), new String(msg.getBody()));
                                 SourceDataEntry sourceDataEntry = dataEntryBuilder.buildSourceDataEntry(
                                     ByteBuffer.wrap(RmqConstants.getPartition(

File: rocketmq-console/src/main/java/org/apache/rocketmq/console/service/impl/ConsumerServiceImpl.java
Patch:
@@ -95,15 +95,15 @@ public GroupConsumeInfo queryGroup(String consumerGroup) {
                 consumeStats = mqAdminExt.examineConsumeStats(consumerGroup);
             }
             catch (Exception e) {
-                logger.warn("examineConsumeStats exception, " + consumerGroup, e);
+                logger.warn("examineConsumeStats exception to consumerGroup {}, response [{}]", consumerGroup, e.getMessage());
             }
 
             ConsumerConnection consumerConnection = null;
             try {
                 consumerConnection = mqAdminExt.examineConsumerConnectionInfo(consumerGroup);
             }
             catch (Exception e) {
-                logger.warn("examineConsumerConnectionInfo exception, " + consumerGroup, e);
+                logger.warn("examineConsumeStats exception to consumerGroup {}, response [{}]", consumerGroup, e.getMessage());
             }
 
             groupConsumeInfo.setGroup(consumerGroup);

File: rocketmq-console/src/main/java/org/apache/rocketmq/console/service/impl/DashboardCollectServiceImpl.java
Patch:
@@ -36,7 +36,6 @@
 import java.util.Set;
 import javax.annotation.Resource;
 import org.apache.rocketmq.console.config.RMQConfigure;
-import org.apache.rocketmq.console.exception.ServiceException;
 import org.apache.rocketmq.console.service.DashboardCollectService;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -137,7 +136,8 @@ public Map<String, List<String>> getBrokerCache(String date) {
         String dataLocationPath = rmqConfigure.getConsoleCollectData();
         File file = new File(dataLocationPath + date + ".json");
         if (!file.exists()) {
-            throw Throwables.propagate(new ServiceException(1, "This date have't data!"));
+            log.info(String.format("No dashboard data for broker cache data: %s", date));
+            return Maps.newHashMap();
         }
         return jsonDataFile2map(file);
     }

File: rocketmq-console/src/main/java/org/apache/rocketmq/console/task/DashboardCollectTask.java
Patch:
@@ -327,7 +327,7 @@ private List<String> appendData(List<String> newTpsList, List<String> oldTpsList
     private void addSystemTopic() throws Exception {
         ClusterInfo clusterInfo = mqAdminExt.examineBrokerClusterInfo();
         HashMap<String, Set<String>> clusterTable = clusterInfo.getClusterAddrTable();
-        for(Map.Entry<String, Set<String>> entry : clusterTable.entrySet()){
+        for (Map.Entry<String, Set<String>> entry : clusterTable.entrySet()) {
             String clusterName = entry.getKey();
             TopicValidator.addSystemTopic(clusterName);
             Set<String> brokerNames = entry.getValue();

File: rocketmq-console/src/main/java/org/apache/rocketmq/console/service/impl/UserServiceImpl.java
Patch:
@@ -56,7 +56,7 @@ public User queryByUsernameAndPassword(String username, String password) {
 
     @Override
     public void afterPropertiesSet() throws Exception {
-        if (configure.isEnableDashBoardCollect()) {
+        if (configure.isLoginRequired()) {
             fileBasedUserInfoStore = new FileBasedUserInfoStore(configure);
         }
     }

File: rocketmq-flink/src/main/java/org/apache/rocketmq/flink/common/serialization/SimpleKeyValueDeserializationSchema.java
Patch:
@@ -22,7 +22,9 @@
 import java.util.HashMap;
 import java.util.Map;
 
+import org.apache.flink.api.common.typeinfo.TypeHint;
 import org.apache.flink.api.common.typeinfo.TypeInformation;
+import org.apache.flink.api.java.tuple.Tuple2;
 
 public class SimpleKeyValueDeserializationSchema implements KeyValueDeserializationSchema<Map> {
     public static final String DEFAULT_KEY_FIELD = "key";
@@ -63,4 +65,4 @@ public Map deserializeKeyAndValue(byte[] key, byte[] value) {
     public TypeInformation<Map> getProducedType() {
         return TypeInformation.of(Map.class);
     }
-}
+}
\ No newline at end of file

File: rocketmq-flink/src/main/java/org/apache/rocketmq/flink/common/util/TestUtils.java
Patch:
@@ -16,7 +16,7 @@
  * limitations under the License.
  */
 
-package org.apache.rocketmq.flink;
+package org.apache.rocketmq.flink.common.util;
 
 import java.lang.reflect.Field;
 

File: rocketmq-console/src/main/java/org/apache/rocketmq/console/service/impl/TopicServiceImpl.java
Patch:
@@ -236,13 +236,13 @@ private TopicList  getSystemTopicList() {
     @Override
     public SendResult sendTopicMessageRequest(SendTopicMessageRequest sendTopicMessageRequest) {
         DefaultMQProducer producer = null;
-        if(rMQConfigure.isACLEnabled()){
+        if (rMQConfigure.isACLEnabled()) {
             producer = new DefaultMQProducer(new AclClientRPCHook(new SessionCredentials(
                     rMQConfigure.getAccessKey(),
                     rMQConfigure.getSecretKey()
             )));
             producer.setProducerGroup(MixAll.SELF_TEST_PRODUCER_GROUP);
-        }else{
+        } else {
             producer = new DefaultMQProducer(MixAll.SELF_TEST_PRODUCER_GROUP);
         }
 

File: rocketmq-console/src/main/java/org/apache/rocketmq/console/config/RMQConfigure.java
Patch:
@@ -82,9 +82,9 @@ public void setNamesrvAddr(String namesrvAddr) {
             logger.info("setNameSrvAddrByProperty nameSrvAddr={}", namesrvAddr);
         }
     }
-    public boolean isACLEnabled(){
-        return !(StringUtils.isAnyBlank(this.accessKey, this.secretKey)||
-                StringUtils.isAnyEmpty(this.accessKey, this.secretKey));
+    public boolean isACLEnabled() {
+        return !(StringUtils.isAnyBlank(this.accessKey, this.secretKey) ||
+                 StringUtils.isAnyEmpty(this.accessKey, this.secretKey));
     }
     public String getRocketMqConsoleDataPath() {
         return dataPath;

File: rocketmq-connect-jdbc/src/main/java/org/apache/rocketmq/connect/jdbc/connector/JdbcSourceConnector.java
Patch:
@@ -59,7 +59,7 @@ public String verifyAndSetConfig(KeyValue config) {
 
     @Override
     public void start() {
-
+        log.info("JdbcSourceConnector start");
     }
 
     @Override

File: rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/connectorwrapper/WorkerSourceTask.java
Patch:
@@ -240,6 +240,7 @@ private void sendRecord(Collection<SourceDataEntry> sourceDataEntries) {
             try {
                 producer.send(sourceMessage, new SendCallback() {
                     @Override public void onSuccess(org.apache.rocketmq.client.producer.SendResult result) {
+                        log.info("Successful send message to RocketMQ:{}", result.getMsgId());
                         try {
                             if (null != partition && null != position) {
                                 positionData.put(partition, position);

File: rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/service/ConfigManagementServiceImpl.java
Patch:
@@ -195,11 +195,11 @@ public void recomputeTaskConfigs(String connectorName, Connector connector, Long
     @Override
     public void removeConnectorConfig(String connectorName) {
 
-        ConnectKeyValue config = new ConnectKeyValue();
+        ConnectKeyValue config = connectorKeyValueStore.get(connectorName);
 
         config.put(RuntimeConfigDefine.UPDATE_TIMESATMP, System.currentTimeMillis());
         config.put(RuntimeConfigDefine.CONFIG_DELETED, 1);
-        List<ConnectKeyValue> taskConfigList = new ArrayList<>();
+        List<ConnectKeyValue> taskConfigList = taskKeyValueStore.get(connectorName);
         taskConfigList.add(config);
 
         connectorKeyValueStore.put(connectorName, config);

File: rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/service/RebalanceImpl.java
Patch:
@@ -80,7 +80,6 @@ public void doRebalance() {
         List<String> curAliveWorkers = clusterManagementService.getAllAliveWorkers();
         Map<String, ConnectKeyValue> curConnectorConfigs = configManagementService.getConnectorConfigs();
         Map<String, List<ConnectKeyValue>> curTaskConfigs = configManagementService.getTaskConfigs();
-        log.info("[ISSUE #2027] The connectorConfigs are:" + curConnectorConfigs.toString() + " with timestamp :" + System.currentTimeMillis());
         ConnAndTaskConfigs allocateResult = allocateConnAndTaskStrategy.allocate(curAliveWorkers, clusterManagementService.getCurrentWorker(), curConnectorConfigs, curTaskConfigs);
         log.info("Allocated connector:{}", allocateResult.getConnectorConfigs());
         log.info("Allocated task:{}", allocateResult.getTaskConfigs());

File: rocketmq-console/src/main/java/org/apache/rocketmq/console/service/impl/LoginServiceImpl.java
Patch:
@@ -62,6 +62,7 @@ protected void auth(HttpServletRequest request, HttpServletResponse response) {
             } catch (UnsupportedEncodingException e) {
                 logger.error("url encode:{}", url, e);
             }
+            logger.debug("redirect url : {}", url);
             WebUtil.redirect(response, request, "/#/login?redirect=" + url);
         } catch (IOException e) {
             logger.error("redirect err", e);

File: rocketmq-console/src/main/java/org/apache/rocketmq/console/model/GroupConsumeInfo.java
Patch:
@@ -71,10 +71,9 @@ public void setDiffTotal(long diffTotal) {
     @Override
     public int compareTo(GroupConsumeInfo o) {
         if (this.count != o.count) {
-            return o.count - this.count;
+            return Integer.compare(o.count, this.count);
         }
-
-        return (int) (o.diffTotal - diffTotal);
+        return Long.compare(o.diffTotal, this.diffTotal);
     }
 
     public int getConsumeTps() {

File: rocketmq-console/src/main/java/org/apache/rocketmq/console/App.java
Patch:
@@ -19,8 +19,10 @@
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.web.servlet.ServletComponentScan;
+import org.springframework.scheduling.annotation.EnableScheduling;
 
 @SpringBootApplication
+@EnableScheduling
 @ServletComponentScan
 public class App {
 

File: rocketmq-console/src/main/java/org/apache/rocketmq/console/App.java
Patch:
@@ -19,8 +19,10 @@
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.web.servlet.ServletComponentScan;
+import org.springframework.scheduling.annotation.EnableScheduling;
 
 @SpringBootApplication
+@EnableScheduling
 @ServletComponentScan
 public class App {
 

File: rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/ConnectStartup.java
Patch:
@@ -101,7 +101,6 @@ private static ConnectController createConnectController(String[] args) {
             // Create controller and initialize.
             ConnectController controller = new ConnectController(connectConfig);
             controller.initialize();
-
             // Invoked when shutdown.
             Runtime.getRuntime().addShutdownHook(new Thread(new Runnable() {
                 private volatile boolean hasShutdown = false;

File: rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/service/RebalanceImpl.java
Patch:
@@ -77,11 +77,10 @@ public void checkClusterStoreTopic() {
      * Distribute connectors and tasks according to the {@link RebalanceImpl#allocateConnAndTaskStrategy}.
      */
     public void doRebalance() {
-
         List<String> curAliveWorkers = clusterManagementService.getAllAliveWorkers();
         Map<String, ConnectKeyValue> curConnectorConfigs = configManagementService.getConnectorConfigs();
         Map<String, List<ConnectKeyValue>> curTaskConfigs = configManagementService.getTaskConfigs();
-
+        log.info("[ISSUE #2027] The connectorConfigs are:" + curConnectorConfigs.toString() + " with timestamp :" + System.currentTimeMillis());
         ConnAndTaskConfigs allocateResult = allocateConnAndTaskStrategy.allocate(curAliveWorkers, clusterManagementService.getCurrentWorker(), curConnectorConfigs, curTaskConfigs);
         log.info("Allocated connector:{}", allocateResult.getConnectorConfigs());
         log.info("Allocated task:{}", allocateResult.getTaskConfigs());

File: rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/service/RebalanceService.java
Patch:
@@ -59,6 +59,7 @@ public void run() {
         this.rebalanceImpl.checkClusterStoreTopic();
 
         while (!this.isStopped()) {
+
             this.waitForRunning(waitInterval);
             this.rebalanceImpl.doRebalance();
         }

File: rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/store/MemoryBasedKeyValueStore.java
Patch:
@@ -17,15 +17,16 @@
 
 package org.apache.rocketmq.connect.runtime.store;
 
-import java.util.HashMap;
+
 import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
 
 public class MemoryBasedKeyValueStore<K, V> implements KeyValueStore<K, V> {
 
     protected Map<K, V> data;
 
     public MemoryBasedKeyValueStore() {
-        this.data = new HashMap<>();
+        this.data = new ConcurrentHashMap<>();
     }
 
     @Override

File: rocketmq-console/src/main/java/org/apache/rocketmq/console/config/RMQConfigure.java
Patch:
@@ -23,9 +23,9 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.boot.context.properties.ConfigurationProperties;
-import org.springframework.boot.web.servlet.ErrorPage;
-import org.springframework.boot.web.servlet.ErrorPageRegistrar;
-import org.springframework.boot.web.servlet.ErrorPageRegistry;
+import org.springframework.boot.web.server.ErrorPage;
+import org.springframework.boot.web.server.ErrorPageRegistrar;
+import org.springframework.boot.web.server.ErrorPageRegistry;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.http.HttpStatus;

File: rocketmq-console/src/main/java/org/apache/rocketmq/console/filter/HttpBasicAuthorizedFilter.java
Patch:
@@ -26,9 +26,8 @@
 import javax.servlet.ServletResponse;
 import javax.servlet.annotation.WebFilter;
 import javax.servlet.http.HttpServletResponse;
-import org.springframework.stereotype.Component;
 
-@Component
+
 @WebFilter(urlPatterns = "/*", filterName = "httpBasicAuthorizedFilter")
 public class HttpBasicAuthorizedFilter implements Filter {
     

File: rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/connectorwrapper/Worker.java
Patch:
@@ -130,7 +130,6 @@ public void start() {
      */
     public synchronized void startConnectors(Map<String, ConnectKeyValue> connectorConfigs,
                                              ConnectController connectController) throws Exception {
-
         Set<WorkerConnector> stoppedConnector = new HashSet<>();
         for (WorkerConnector workerConnector : workingConnectors) {
             String connectorName = workerConnector.getConnectorName();

File: rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/service/ConfigManagementServiceImpl.java
Patch:
@@ -192,6 +192,7 @@ public void removeConnectorConfig(String connectorName) {
         connectorKeyValueStore.put(connectorName, config);
         putTaskConfigs(connectorName, taskConfigList);
         sendSynchronizeConfig();
+        triggerListener();
     }
 
     @Override

File: rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/service/ConfigManagementServiceImpl.java
Patch:
@@ -186,8 +186,6 @@ public void removeConnectorConfig(String connectorName) {
         ConnectKeyValue config = new ConnectKeyValue();
         config.put(RuntimeConfigDefine.UPDATE_TIMESATMP, System.currentTimeMillis());
         config.put(RuntimeConfigDefine.CONFIG_DELETED, 1);
-        Map<String, ConnectKeyValue> connectorConfig = new HashMap<>();
-        connectorConfig.put(connectorName, config);
         List<ConnectKeyValue> taskConfigList = new ArrayList<>();
         taskConfigList.add(config);
 

File: rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/connectorwrapper/WorkerSourceTask.java
Patch:
@@ -167,7 +167,7 @@ private void sendRecord(Collection<SourceDataEntry> sourceDataEntries) {
             ByteBuffer partition = sourceDataEntry.getSourcePartition();
             Optional<ByteBuffer> opartition = Optional.ofNullable(partition);
             ByteBuffer position = sourceDataEntry.getSourcePosition();
-            Optional<ByteBuffer> oposition = Optional.ofNullable(partition);
+            Optional<ByteBuffer> oposition = Optional.ofNullable(position);
             sourceDataEntry.setSourcePartition(null);
             sourceDataEntry.setSourcePosition(null);
             Message sourceMessage = new Message();

File: rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/service/ConfigManagementServiceImpl.java
Patch:
@@ -186,8 +186,6 @@ public void removeConnectorConfig(String connectorName) {
         ConnectKeyValue config = new ConnectKeyValue();
         config.put(RuntimeConfigDefine.UPDATE_TIMESATMP, System.currentTimeMillis());
         config.put(RuntimeConfigDefine.CONFIG_DELETED, 1);
-        Map<String, ConnectKeyValue> connectorConfig = new HashMap<>();
-        connectorConfig.put(connectorName, config);
         List<ConnectKeyValue> taskConfigList = new ArrayList<>();
         taskConfigList.add(config);
 

File: rocketmq-connect-jdbc/src/main/java/org/apache/rocketmq/connect/jdbc/config/Config.java
Patch:
@@ -87,7 +87,6 @@ public class Config {
             add(CONN_DB_USERNAME);
             add(CONN_DB_PASSWORD);
             add(CONN_DB_MODE);
-            add("rocketmqTopic");
             add(CONN_SOURCE_RMQ);
             add(CONN_SOURCE_CLUSTER);
         }

File: rocketmq-connect-jdbc/src/main/java/org/apache/rocketmq/connect/jdbc/common/ConstDefine.java
Patch:
@@ -19,5 +19,5 @@
 public class ConstDefine {
 
     public static String JDBC_CONNECTOR_ADMIN_PREFIX = "JDBC-CONNECTOR-ADMIN";
-
+    public static final String PREFIX = "jdbc";
 }

File: rocketmq-connect-jdbc/src/main/java/org/apache/rocketmq/connect/jdbc/common/DBUtils.java
Patch:
@@ -196,7 +196,7 @@ public static DataSource initDataSource(Config config) throws Exception {
         map.put("username", config.getDbUsername());
         map.put("password", config.getDbPassword());
         map.put("initialSize", "1");
-        map.put("maxActive", "1");
+        map.put("maxActive", "2");
         map.put("maxWait", "60000");
         map.put("timeBetweenEvictionRunsMillis", "60000");
         map.put("minEvictableIdleTimeMillis", "300000");

File: rocketmq-connect-jdbc/src/main/java/org/apache/rocketmq/connect/jdbc/config/SourceDbConnectorConfig.java
Patch:
@@ -18,9 +18,9 @@ public SourceDbConnectorConfig(){
 
     @Override
     public void validate(KeyValue config) {
-        this.taskParallelism = config.getInt(Config.CONN_TASK_PARALLELISM, 0);
+        this.taskParallelism = config.getInt(Config.CONN_TASK_PARALLELISM, 1);
 
-        int strategy = config.getInt(Config.CONN_TASK_DIVIDE_STRATEGY, DivideStrategyEnum.BY_QUEUE.ordinal());
+        int strategy = config.getInt(Config.CONN_TASK_DIVIDE_STRATEGY, DivideStrategyEnum.BY_TOPIC.ordinal());
         if (strategy == DivideStrategyEnum.BY_QUEUE.ordinal()) {
             this.taskDivideStrategy = new DivideTaskByQueue();
         } else {

File: rocketmq-connect-jdbc/src/main/java/org/apache/rocketmq/connect/jdbc/source/TimestampIncrementingQuerier.java
Patch:
@@ -288,9 +288,9 @@ public void initDataSource() throws Exception {
         incrementingColumn = config.getIncrementingColumnName();
         map.put("driverClassName", "com.mysql.cj.jdbc.Driver");
         map.put("url",
-                "jdbc:mysql://" + config.getJdbcUrl() + "?useSSL=true&verifyServerCertificate=false&serverTimezone=GMT%2B8");
-        map.put("username", config.getJdbcUsername());
-        map.put("password", config.getJdbcPassword());
+                "jdbc:mysql://" + config.getDbUrl() + ":" + config.getDbPort() +"?useSSL=true&verifyServerCertificate=false&serverTimezone=GMT%2B8");
+        map.put("username", config.getDbUsername());
+        map.put("password", config.getDbPassword());
         map.put("initialSize", "2");
         map.put("maxActive", "2");
         map.put("maxWait", "60000");

File: rocketmq-connect-jdbc/src/main/java/org/apache/rocketmq/connect/jdbc/strategy/DivideTaskByQueue.java
Patch:
@@ -19,6 +19,7 @@
 import com.alibaba.fastjson.JSONObject;
 import io.openmessaging.KeyValue;
 import io.openmessaging.internal.DefaultKeyValue;
+import java.util.Set;
 import org.apache.rocketmq.connect.jdbc.config.*;
 
 import java.util.ArrayList;
@@ -41,7 +42,7 @@ public List<KeyValue> divideSinkTaskByQueue(DbConnectorConfig dbConnectorConfig,
         List<KeyValue> config = new ArrayList<KeyValue>();
         int parallelism = tdc.getTaskParallelism();
         Map<Integer, List<TaskTopicInfo>> queueTopicList = new HashMap<Integer, List<TaskTopicInfo>>();
-        Map<String, List<TaskTopicInfo>> topicRouteMap = ((SinkDbConnectorConfig)dbConnectorConfig).getTopicRouteMap();
+        Map<String, Set<TaskTopicInfo>> topicRouteMap = ((SinkDbConnectorConfig)dbConnectorConfig).getTopicRouteMap();
         int id = -1;
         for (String t : topicRouteMap.keySet()) {
             for (TaskTopicInfo taskTopicInfo : topicRouteMap.get(t)) {

File: rocketmq-connect-jdbc/src/test/java/org/apache/rocketmq/connect/jdbc/connector/JdbcSourceConnectorTest.java
Patch:
@@ -22,9 +22,7 @@
 import java.util.HashSet;
 import java.util.Set;
 
-import org.apache.rocketmq.connect.jdbc.Config;
-import org.apache.rocketmq.connect.jdbc.connector.JdbcSourceTask;
-
+import org.apache.rocketmq.connect.jdbc.config.Config;
 import org.junit.Test;
 
 import io.openmessaging.KeyValue;

File: rocketmq-connect-jdbc/src/test/java/org/apache/rocketmq/connect/jdbc/connector/JdbcSourceConnectorTest.java
Patch:
@@ -22,9 +22,7 @@
 import java.util.HashSet;
 import java.util.Set;
 
-import org.apache.rocketmq.connect.jdbc.Config;
-import org.apache.rocketmq.connect.jdbc.connector.JdbcSourceTask;
-
+import org.apache.rocketmq.connect.jdbc.config.Config;
 import org.junit.Test;
 
 import io.openmessaging.KeyValue;

File: rocketmq-console/src/main/java/org/apache/rocketmq/console/App.java
Patch:
@@ -17,7 +17,6 @@
 package org.apache.rocketmq.console;
 
 import org.springframework.boot.SpringApplication;
-import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.web.servlet.ServletComponentScan;
 

File: rocketmq-flink/src/main/java/org/apache/rocketmq/flink/RocketMQSource.java
Patch:
@@ -331,7 +331,7 @@ public void initializeState(FunctionInitializationContext context) throws Except
         this.unionOffsetStates = context.getOperatorStateStore().getUnionListState(new ListStateDescriptor<>(
                 OFFSETS_STATE_NAME, TypeInformation.of(new TypeHint<Tuple2<MessageQueue, Long>>() {
 
-        })));
+                })));
         this.restored = context.isRestored();
 
         if (restored) {

File: rocketmq-connect-jdbc/src/main/java/org/apache/rocketmq/connect/jdbc/common/DBUtils.java
Patch:
@@ -192,9 +192,9 @@ public static DataSource initDataSource(Config config) throws Exception {
         Map<String, String> map = new HashMap<>();
         map.put("driverClassName", "com.mysql.cj.jdbc.Driver");
         map.put("url",
-                "jdbc:mysql://" + config.getJdbcUrl() + "?useSSL=true&verifyServerCertificate=false&serverTimezone=GMT%2B8&characterEncoding=utf8");
-        map.put("username", config.getJdbcUsername());
-        map.put("password", config.getJdbcPassword());
+                "jdbc:mysql://" + config.getDbUrl() + ":" + config.getDbPort()  + "?useSSL=true&verifyServerCertificate=false&serverTimezone=GMT%2B8&characterEncoding=utf8");
+        map.put("username", config.getDbUsername());
+        map.put("password", config.getDbPassword());
         map.put("initialSize", "1");
         map.put("maxActive", "1");
         map.put("maxWait", "60000");

File: rocketmq-connect-jdbc/src/main/java/org/apache/rocketmq/connect/jdbc/connector/JdbcSinkTask.java
Patch:
@@ -114,6 +114,7 @@ public void stop() {
         try {
             if (connection != null){
                 connection.close();
+                log.info("jdbc sink task connection is closed.");
             }
         } catch (Throwable e) {
             log.warn("sink task stop error while closing connection to {}", "jdbc", e);

File: rocketmq-replicator/src/main/java/org/apache/rocketmq/replicator/common/Utils.java
Patch:
@@ -22,8 +22,8 @@
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
-import java.util.Map;
 import java.util.Set;
+import java.util.concurrent.ThreadLocalRandom;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.commons.lang3.tuple.ImmutablePair;
 import org.apache.rocketmq.client.exception.MQClientException;
@@ -44,7 +44,7 @@ public class Utils {
     private static final Logger log = LoggerFactory.getLogger(Utils.class);
 
     public static String createGroupName(String prefix) {
-        return new StringBuilder().append(prefix).append("-").append(System.currentTimeMillis()).toString();
+        return new StringBuilder().append(prefix).append("-").append(System.currentTimeMillis()).append("-").append(ThreadLocalRandom.current().nextInt()).toString();
     }
 
     public static String createGroupName(String prefix, String postfix) {
@@ -132,7 +132,7 @@ public static List<KeyValue> groupPartitions(List<String> elements, int numGroup
             keyValue.put(TaskConfigEnum.TASK_STORE_ROCKETMQ.getKey(), tdc.getStoreTopic());
             keyValue.put(TaskConfigEnum.TASK_SOURCE_ROCKETMQ.getKey(), tdc.getSrcNamesrvs());
             keyValue.put(TaskConfigEnum.TASK_SOURCE_CLUSTER.getKey(), tdc.getSrcCluster());
-            keyValue.put(TaskConfigEnum.TASK_OFFSET_SYNC_TOPIC.getKey(), tdc.getSrcCluster());
+            keyValue.put(TaskConfigEnum.TASK_OFFSET_SYNC_TOPIC.getKey(), tdc.getOffsetSyncTopic());
             keyValue.put(TaskConfigEnum.TASK_DATA_TYPE.getKey(), DataType.OFFSET.ordinal());
             keyValue.put(TaskConfigEnum.TASK_GROUP_INFO.getKey(), JSONObject.toJSONString(groupList));
             keyValue.put(TaskConfigEnum.TASK_SOURCE_RECORD_CONVERTER.getKey(), tdc.getConverter());

File: rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/connectorwrapper/WorkerSourceTask.java
Patch:
@@ -203,7 +203,7 @@ private void sendRecord(Collection<SourceDataEntry> sourceDataEntries) {
                 Object[] payload = sourceDataEntry.getPayload();
                 if (null != payload && null != payload[0]) {
                     Object object = payload[0];
-                    final byte[] messageBody = ((String) object).getBytes();
+                    final byte[] messageBody = (String.valueOf(object)).getBytes();
                     if (messageBody.length > RuntimeConfigDefine.MAX_MESSAGE_SIZE) {
                         log.error("Send record, message size is greater than {} bytes, payload: {}", RuntimeConfigDefine.MAX_MESSAGE_SIZE, sourceDataEntry.getPayload());
                         return;

File: rocketmq-replicator/src/main/java/org/apache/rocketmq/replicator/MetaSourceTask.java
Patch:
@@ -77,6 +77,7 @@ public MetaSourceTask() {
         if (started) {
             started = false;
         }
+        srcMQAdminExt.shutdown();
     }
 
     @Override public void pause() {

File: rocketmq-replicator/src/main/java/org/apache/rocketmq/replicator/RmqMetaReplicator.java
Patch:
@@ -106,6 +106,8 @@ public RmqMetaReplicator() {
     @Override public void stop() {
         log.info("stopping...");
         this.executor.shutdown();
+        this.srcMQAdminExt.shutdown();
+        this.targetMQAdminExt.shutdown();
     }
 
     @Override public void pause() {
@@ -217,7 +219,7 @@ private Set<String> listGroups() throws InterruptedException, RemotingTimeoutExc
 
     private boolean skipInnerGroup(String group) {
         if (INNER_CONSUMER_GROUPS.contains(group) || group.startsWith("CID_RMQ_SYS_") || group.startsWith("PositionManage") ||
-            group.startsWith("ConfigManage") || group.startsWith("OffsetManage")) {
+            group.startsWith("ConfigManage") || group.startsWith("OffsetManage") || group.startsWith("DefaultConnectCluster") || group.startsWith("RebalanceService")) {
             return false;
         }
         return true;

File: rocketmq-replicator/src/main/java/org/apache/rocketmq/replicator/RmqSourceTask.java
Patch:
@@ -121,7 +121,7 @@ public void start(KeyValue config) {
         log.info("RocketMQ source task started");
     }
 
-    public void stop() {
+    @Override public void stop() {
 
         if (started) {
             if (this.consumer != null) {

File: rocketmq-replicator/src/main/java/org/apache/rocketmq/replicator/strategy/DivideTaskByConsistentHash.java
Patch:
@@ -23,6 +23,7 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.Set;
 import org.apache.rocketmq.common.consistenthash.ConsistentHashRouter;
 import org.apache.rocketmq.common.consistenthash.Node;
 import org.apache.rocketmq.replicator.config.DataType;
@@ -31,7 +32,7 @@
 import org.apache.rocketmq.replicator.config.TaskTopicInfo;
 
 public class DivideTaskByConsistentHash extends TaskDivideStrategy {
-    @Override public List<KeyValue> divide(Map<String, List<TaskTopicInfo>> topicMap, TaskDivideConfig tdc) {
+    @Override public List<KeyValue> divide(Map<String, Set<TaskTopicInfo>> topicMap, TaskDivideConfig tdc) {
 
         List<KeyValue> config = new ArrayList<>();
         int parallelism = tdc.getTaskParallelism();

File: rocketmq-replicator/src/main/java/org/apache/rocketmq/replicator/strategy/DivideTaskByQueue.java
Patch:
@@ -20,6 +20,7 @@
 import io.openmessaging.KeyValue;
 import io.openmessaging.internal.DefaultKeyValue;
 import java.util.HashMap;
+import java.util.Set;
 import org.apache.rocketmq.replicator.config.DataType;
 import org.apache.rocketmq.replicator.config.TaskConfigEnum;
 import org.apache.rocketmq.replicator.config.TaskDivideConfig;
@@ -29,7 +30,8 @@
 import org.apache.rocketmq.replicator.config.TaskTopicInfo;
 
 public class DivideTaskByQueue extends TaskDivideStrategy {
-    public List<KeyValue> divide(Map<String, List<TaskTopicInfo>> topicRouteMap, TaskDivideConfig tdc) {
+
+    @Override public List<KeyValue> divide(Map<String, Set<TaskTopicInfo>> topicRouteMap, TaskDivideConfig tdc) {
 
         List<KeyValue> config = new ArrayList<KeyValue>();
         int parallelism = tdc.getTaskParallelism();

File: rocketmq-replicator/src/main/java/org/apache/rocketmq/replicator/strategy/DivideTaskByTopic.java
Patch:
@@ -19,7 +19,7 @@
 import com.alibaba.fastjson.JSONObject;
 import io.openmessaging.KeyValue;
 import io.openmessaging.internal.DefaultKeyValue;
-import org.apache.rocketmq.common.message.MessageQueue;
+import java.util.Set;
 import org.apache.rocketmq.replicator.config.*;
 import java.util.ArrayList;
 import java.util.HashMap;
@@ -28,13 +28,13 @@
 
 public class DivideTaskByTopic extends TaskDivideStrategy {
 
-    public List<KeyValue> divide(Map<String, List<TaskTopicInfo>> topicRouteMap, TaskDivideConfig tdc) {
+    @Override public List<KeyValue> divide(Map<String, Set<TaskTopicInfo>> topicRouteMap, TaskDivideConfig tdc) {
 
         List<KeyValue> config = new ArrayList<KeyValue>();
         int parallelism = tdc.getTaskParallelism();
         int id = -1;
         Map<Integer, List<TaskTopicInfo>> taskTopicList = new HashMap<Integer, List<TaskTopicInfo>>();
-        for (Map.Entry<String, List<TaskTopicInfo>> entry : topicRouteMap.entrySet()) {
+        for (Map.Entry<String, Set<TaskTopicInfo>> entry : topicRouteMap.entrySet()) {
             int ind = ++id % parallelism;
             if (!taskTopicList.containsKey(ind)) {
                 taskTopicList.put(ind, new ArrayList<TaskTopicInfo>());

File: rocketmq-replicator/src/main/java/org/apache/rocketmq/replicator/strategy/TaskDivideStrategy.java
Patch:
@@ -17,12 +17,13 @@
 package org.apache.rocketmq.replicator.strategy;
 
 import io.openmessaging.KeyValue;
+import java.util.Set;
 import org.apache.rocketmq.replicator.config.TaskDivideConfig;
 import java.util.List;
 import java.util.Map;
 import org.apache.rocketmq.replicator.config.TaskTopicInfo;
 
 public abstract class TaskDivideStrategy {
 
-    public abstract List<KeyValue> divide(Map<String, List<TaskTopicInfo>> topicMap, TaskDivideConfig tdc);
+    public abstract List<KeyValue> divide(Map<String, Set<TaskTopicInfo>> topicMap, TaskDivideConfig tdc);
 }

File: rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/rest/RestHandler.java
Patch:
@@ -91,7 +91,7 @@ private void handleCreateConnector(Context context) {
         Map keyValue = JSON.parseObject(arg, Map.class);
         ConnectKeyValue configs = new ConnectKeyValue();
         for (Object key : keyValue.keySet()) {
-            configs.put((String) key, (String) keyValue.get(key));
+            configs.put((String) key, keyValue.get(key).toString());
         }
         try {
 

File: rocketmq-replicator/src/main/java/org/apache/rocketmq/replicator/config/TaskTopicInfo.java
Patch:
@@ -22,8 +22,8 @@ public class TaskTopicInfo extends MessageQueue {
 
     private String targetTopic;
 
-    public TaskTopicInfo(String sourceTopic, String brokerName, int queueId, String targetTopic) {
-        super(sourceTopic, brokerName, queueId);
+    public TaskTopicInfo(String topic, String brokerName, int queueId, String targetTopic) {
+        super(topic, brokerName, queueId);
         this.targetTopic = targetTopic;
     }
 

File: rocketmq-connect-jdbc/src/main/java/org/apache/rocketmq/connect/jdbc/connector/JdbcSourceConnector.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import org.apache.rocketmq.connect.jdbc.Config;
+import org.apache.rocketmq.connect.jdbc.config.Config;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: rocketmq-connect-jdbc/src/main/java/org/apache/rocketmq/connect/jdbc/schema/column/DateTimeColumnParser.java
Patch:
@@ -30,7 +30,7 @@ public class DateTimeColumnParser extends ColumnParser {
     static {
         dateTimeFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
         dateTimeUtcFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
-        dateTimeUtcFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
+        dateTimeUtcFormat.setTimeZone(TimeZone.getTimeZone("GMT+8"));
     }
 
     @Override

File: rocketmq-replicator/src/main/java/org/apache/rocketmq/replicator/config/DataType.java
Patch:
@@ -21,5 +21,6 @@ public enum DataType {
     COMMON_MESSAGE,
     TOPIC_CONFIG,
     BROKER_CONFIG,
-    SUB_CONFIG
+    SUB_CONFIG,
+    OFFSET
 }

File: rocketmq-replicator/src/main/java/org/apache/rocketmq/replicator/config/TaskConfigEnum.java
Patch:
@@ -21,13 +21,16 @@ public enum TaskConfigEnum {
     TASK_ID("taskId"),
     TASK_SOURCE_GROUP("sourceGroup"),
     TASK_SOURCE_ROCKETMQ("sourceRocketmq"),
+    TASK_SOURCE_CLUSTER("sourceCluster"),
+    TASK_OFFSET_SYNC_TOPIC("offsetSyncTopic"),
     TASK_SOURCE_TOPIC("sourceTopic"),
     TASK_STORE_ROCKETMQ("storeTopic"),
     TASK_DATA_TYPE("dataType"),
     TASK_BROKER_NAME("brokerName"),
     TASK_QUEUE_ID("queueId"),
     TASK_NEXT_POSITION("nextPosition"),
     TASK_TOPIC_INFO("taskTopicList"),
+    TASK_GROUP_INFO("taskGroupList"),
     TASK_SOURCE_RECORD_CONVERTER("source-record-converter");
 
     private String key;

File: rocketmq-replicator/src/main/java/org/apache/rocketmq/replicator/schema/FieldName.java
Patch:
@@ -17,7 +17,8 @@
 package org.apache.rocketmq.replicator.schema;
 
 public enum FieldName {
-    COMMON_MESSAGE("MessageExt");
+    COMMON_MESSAGE("MessageExt"),
+    OFFSET("Offset");
 
     private String key;
 

File: rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/service/ConfigManagementService.java
Patch:
@@ -21,6 +21,7 @@
 import java.util.List;
 import java.util.Map;
 import org.apache.rocketmq.connect.runtime.common.ConnectKeyValue;
+import org.apache.rocketmq.connect.runtime.utils.Plugin;
 
 /**
  * Interface for config manager. Contains connector configs and task configs. All worker in a cluster should keep the
@@ -90,4 +91,6 @@ interface ConnectorConfigUpdateListener {
          */
         void onConfigUpdate();
     }
+
+    Plugin getPlugin();
 }

File: rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/rest/RestHandler.java
Patch:
@@ -146,9 +146,9 @@ private void handleStopConnector(Context context) {
 
     private void handleStopAllConnector(Context context) {
         try {
-            Set<WorkerConnector> workerConnectors = connectController.getWorker().getWorkingConnectors();
-            for (WorkerConnector connector : workerConnectors) {
-                connectController.getConfigManagementService().removeConnectorConfig(connector.getConnectorName());
+            Map<String, ConnectKeyValue> connectorConfigs = connectController.getConfigManagementService().getConnectorConfigs();
+            for (String connector : connectorConfigs.keySet()) {
+                connectController.getConfigManagementService().removeConnectorConfig(connector);
             }
             context.result("success");
         } catch (Exception e) {

File: rocketmq-replicator/src/main/java/org/apache/rocketmq/replicator/config/TaskTopicInfo.java
Patch:
@@ -18,7 +18,7 @@
 
 import org.apache.rocketmq.common.message.MessageQueue;
 
-public class TaskTopicInfo extends MessageQueue{
+public class TaskTopicInfo extends MessageQueue {
 
     private String targetTopic;
 

File: rocketmq-replicator/src/main/java/org/apache/rocketmq/replicator/common/Utils.java
Patch:
@@ -58,12 +58,12 @@ public static String createInstanceName(String namesrvAddr) {
         return String.valueOf(namesrvList.toString().hashCode());
     }
 
-
-    public static List<BrokerData> examineBrokerData(DefaultMQAdminExt defaultMQAdminExt, String topic, String cluster) throws RemotingException, MQClientException, InterruptedException {
+    public static List<BrokerData> examineBrokerData(DefaultMQAdminExt defaultMQAdminExt, String topic,
+        String cluster) throws RemotingException, MQClientException, InterruptedException {
         List<BrokerData> brokerList = new ArrayList<BrokerData>();
 
         TopicRouteData topicRouteData = defaultMQAdminExt.examineTopicRouteInfo(topic);
-        if (topicRouteData.getBrokerDatas() != null) { // check下
+        if (topicRouteData.getBrokerDatas() != null) {
             for (BrokerData broker : topicRouteData.getBrokerDatas()) {
                 if (StringUtils.equals(broker.getCluster(), cluster)) {
                     brokerList.add(broker);

File: rocketmq-replicator/src/main/java/org/apache/rocketmq/replicator/config/ConfigDefine.java
Patch:
@@ -41,10 +41,12 @@ public class ConfigDefine {
 
     public static final String CONN_TASK_PARALLELISM = "task-parallelism";
 
+    public static final String CONN_TOPIC_RENAME_FMT = "topic.rename.format";
+
     /**
      * The required key for all configurations.
      */
-    public static final Set<String> REQUEST_CONFIG = new HashSet<String>(){
+    public static final Set<String> REQUEST_CONFIG = new HashSet<String>() {
         {
             add(CONN_SOURCE_RMQ);
             add(CONN_TARGET_RMQ);

File: rocketmq-replicator/src/main/java/org/apache/rocketmq/replicator/strategy/TaskDivideStrategy.java
Patch:
@@ -21,8 +21,9 @@
 import org.apache.rocketmq.replicator.config.TaskDivideConfig;
 import java.util.List;
 import java.util.Map;
+import org.apache.rocketmq.replicator.config.TaskTopicInfo;
 
 public abstract class TaskDivideStrategy {
 
-    public abstract List<KeyValue> divide(Map<String, List<MessageQueue>> topicMap, TaskDivideConfig tdc);
+    public abstract List<KeyValue> divide(Map<String, List<TaskTopicInfo>> topicMap, TaskDivideConfig tdc);
 }

File: rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/utils/PluginClassLoader.java
Patch:
@@ -49,7 +49,7 @@ public String toString() {
     }
 
     @Override
-    protected synchronized Class<?> loadClass(String name, boolean resolve)
+    public synchronized Class<?> loadClass(String name, boolean resolve)
         throws ClassNotFoundException {
         synchronized (getClassLoadingLock(name)) {
             Class<?> klass = findLoadedClass(name);

File: rocketmq-replicator/src/main/java/org/apache/rocketmq/replicator/RmqSourceTask.java
Patch:
@@ -126,7 +126,7 @@ public void start(KeyValue config) {
     }
 
     public void stop() {
-      
+
         if (started) {
             if (this.consumer != null) {
                 this.consumer.shutdown();

File: rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/utils/PluginClassLoader.java
Patch:
@@ -55,7 +55,9 @@ protected synchronized Class<?> loadClass(String name, boolean resolve)
             Class<?> klass = findLoadedClass(name);
             if (klass == null) {
                 try {
-                    klass = findClass(name);
+                    if (!PluginUtils.shouldNotLoadInIsolation(name)) {
+                        klass = findClass(name);
+                    }
                 } catch (ClassNotFoundException e) {
                     log.trace("Class '{}' not found. Delegating to parent", name);
                 }

File: rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/utils/PluginClassLoader.java
Patch:
@@ -55,7 +55,7 @@ protected synchronized Class<?> loadClass(String name, boolean resolve)
             Class<?> klass = findLoadedClass(name);
             if (klass == null) {
                 try {
-                    if (PluginUtils.shouldNotLoadInIsolation(name)) {
+                    if (!PluginUtils.shouldNotLoadInIsolation(name)) {
                         klass = findClass(name);
                     }
                 } catch (ClassNotFoundException e) {

File: rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/utils/PluginUtils.java
Patch:
@@ -114,8 +114,8 @@ public class PluginUtils {
         + "|org\\.omg\\.stub\\.java\\.rmi"
         + "|org\\.w3c\\.dom"
         + "|org\\.xml\\.sax"
-        + "|io\\.openmessaging\\.KeyValue"
-        + ")\\..*$");
+        + ")\\..*$"
+        + "|io\\.openmessaging\\.KeyValue");
 
     private static final DirectoryStream.Filter<Path> PLUGIN_PATH_FILTER = new DirectoryStream
         .Filter<Path>() {

File: rocketmq-connect-mongo/src/test/java/org/apache/connect/mongo/FilterTest.java
Patch:
@@ -59,8 +59,9 @@ public void testFilterEvent() {
         ReplicationEvent replicationEvent = new ReplicationEvent();
         replicationEvent.setOperationType(OperationType.NOOP);
         Assert.assertFalse(filter.filterEvent(replicationEvent));
-        replicationEvent.setOperationType(OperationType.DBCOMMAND);
+        replicationEvent.setOperationType(OperationType.DB_COMMAND);
         Assert.assertTrue(filter.filterEvent(replicationEvent));
+
     }
 
 }

File: rocketmq-connect-mongo/src/test/java/org/apache/connect/mongo/MongoSourceConnectorTest.java
Patch:
@@ -12,6 +12,7 @@
 import java.util.concurrent.LinkedBlockingQueue;
 import org.apache.connect.mongo.connector.MongoSourceConnector;
 import org.apache.connect.mongo.connector.MongoSourceTask;
+import org.apache.connect.mongo.replicator.Position;
 import org.apache.connect.mongo.replicator.ReplicaSetConfig;
 import org.apache.connect.mongo.replicator.ReplicaSetsContext;
 import org.apache.connect.mongo.replicator.event.OperationType;
@@ -73,7 +74,7 @@ public void testPoll() throws Exception {
         Assert.assertEquals("testReplicaName", new String(sourcePartition.array()));
 
         ByteBuffer sourcePosition = sourceDataEntry.getSourcePosition();
-        ReplicaSetConfig.Position position = JSONObject.parseObject(new String(sourcePosition.array()), ReplicaSetConfig.Position.class);
+        Position position = JSONObject.parseObject(new String(sourcePosition.array()), Position.class);
         Assert.assertEquals(position.getTimeStamp(), 1565609506);
         Assert.assertEquals(position.getInc(), 1);
         Assert.assertEquals(position.isInitSync(), false);

File: rocketmq-connect-mongo/src/test/java/org/apache/connect/mongo/MongoSourceTaskTest.java
Patch:
@@ -14,7 +14,6 @@
 import java.util.Map;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.connect.mongo.connector.MongoSourceTask;
-import org.apache.connect.mongo.replicator.Constants;
 import org.apache.connect.mongo.replicator.ReplicaSet;
 import org.apache.connect.mongo.replicator.ReplicaSetConfig;
 import org.apache.connect.mongo.replicator.ReplicaSetsContext;
@@ -31,7 +30,7 @@ public void testEmptyContextStart() throws NoSuchFieldException, IllegalAccessEx
         defaultKeyValue.put("positionTimeStamp", "11111111");
         defaultKeyValue.put("positionInc", "111");
         defaultKeyValue.put("serverSelectionTimeoutMS", "10");
-        defaultKeyValue.put("dataSync", Constants.INITSYNC);
+        defaultKeyValue.put("dataSync", "true");
 
         Field context = SourceTask.class.getDeclaredField("context");
         context.setAccessible(true);

File: rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/ConnectStartup.java
Patch:
@@ -55,7 +55,7 @@ private static void start(ConnectController controller) {
 
         try {
             controller.start();
-            String tip = "The worker [" + controller.getWorker().getWorkerId() + "] boot success.";
+            String tip = "The worker [" + controller.getClusterManagementService().getCurrentWorker() + "] boot success.";
             log.info(tip);
             System.out.printf("%s%n", tip);
         } catch (Throwable e) {

File: rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/config/RuntimeConfigDefine.java
Patch:
@@ -52,7 +52,7 @@ public class RuntimeConfigDefine {
 
     public static final String RMQ_PRODUCER_GROUP = "rmq-producer-group";
 
-    public static final String RMQ_CONSUMNER_GROUP = "rmq-consumner-group";
+    public static final String RMQ_CONSUMNER_GROUP = "rmq-consumer-group";
 
     public static final String OPERATION_TIMEOUT = "operation-timeout";
 

File: rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/connectorwrapper/WorkerSourceTask.java
Patch:
@@ -167,7 +167,6 @@ private void sendRecord(Collection<SourceDataEntry> sourceDataEntries) {
                 producer.send(sourceMessage, new SendCallback() {
                     @Override public void onSuccess(org.apache.rocketmq.client.producer.SendResult result) {
                         try {
-                            // send ok
                             if (null != partition && null != position) {
                                 positionData.put(partition, position);
                             }

File: rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/service/RebalanceImpl.java
Patch:
@@ -73,11 +73,11 @@ public RebalanceImpl(Worker worker, ConfigManagementService configManagementServ
      */
     public void doRebalance() {
 
-        Map<String, Long> curAliveWorkers = clusterManagementService.getAllAliveWorkers();
+        List<String> curAliveWorkers = clusterManagementService.getAllAliveWorkers();
         Map<String, ConnectKeyValue> curConnectorConfigs = configManagementService.getConnectorConfigs();
         Map<String, List<ConnectKeyValue>> curTaskConfigs = configManagementService.getTaskConfigs();
 
-        ConnAndTaskConfigs allocateResult = allocateConnAndTaskStrategy.allocate(curAliveWorkers.keySet(), worker.getWorkerId(), curConnectorConfigs, curTaskConfigs);
+        ConnAndTaskConfigs allocateResult = allocateConnAndTaskStrategy.allocate(curAliveWorkers, clusterManagementService.getCurrentWorker(), curConnectorConfigs, curTaskConfigs);
         log.info("Allocated connector:{}", allocateResult.getConnectorConfigs());
         log.info("Allocated task:{}", allocateResult.getTaskConfigs());
         updateProcessConfigsInRebalance(allocateResult);

File: rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/service/RebalanceService.java
Patch:
@@ -76,6 +76,7 @@ class WorkerStatusListenerImpl implements ClusterManagementService.WorkerStatusL
          */
         @Override
         public void onWorkerChange() {
+            log.info("Wake up rebalance service");
             RebalanceService.this.wakeup();
         }
     }

File: rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/service/strategy/AllocateConnAndTaskStrategy.java
Patch:
@@ -19,7 +19,6 @@
 
 import java.util.List;
 import java.util.Map;
-import java.util.Set;
 import org.apache.rocketmq.connect.runtime.common.ConnAndTaskConfigs;
 import org.apache.rocketmq.connect.runtime.common.ConnectKeyValue;
 
@@ -37,6 +36,6 @@ public interface AllocateConnAndTaskStrategy {
      * @param taskConfigs All task configs.
      * @return
      */
-    ConnAndTaskConfigs allocate(Set<String> allWorker, String curWorker, Map<String, ConnectKeyValue> connectorConfigs,
+    ConnAndTaskConfigs allocate(List<String> allWorker, String curWorker, Map<String, ConnectKeyValue> connectorConfigs,
         Map<String, List<ConnectKeyValue>> taskConfigs);
 }

File: rocketmq-connect/rocketmq-connect-runtime/src/test/java/org/apache/rocketmq/connect/runtime/config/ConnectConfigTest.java
Patch:
@@ -27,8 +27,6 @@ public class ConnectConfigTest {
     public void testConnectConfigAttribute() {
         ConnectConfig connectConfig = new ConnectConfig();
         connectConfig.setHttpPort(8081);
-        connectConfig.setWorkerId("DEFAULT_WORKER_1");
         assertThat(connectConfig.getHttpPort()).isEqualTo(8081);
-        assertThat(connectConfig.getWorkerId()).isEqualTo("DEFAULT_WORKER_1");
     }
 }
\ No newline at end of file

File: rocketmq-connect/rocketmq-connect-runtime/src/test/java/org/apache/rocketmq/connect/runtime/connectorwrapper/WorkerTest.java
Patch:
@@ -76,8 +76,8 @@ public class WorkerTest {
     public void init() {
         connectConfig = new ConnectConfig();
         connectConfig.setHttpPort(8081);
-        connectConfig.setWorkerId("DEFAULT_WORKER_1");
         connectConfig.setStorePathRootDir(System.getProperty("user.home") + File.separator + "testConnectorStore");
+        connectConfig.setNamesrvAddr("localhost:9876");
         worker = new Worker(connectConfig, positionManagementService, offsetManagementService, plugin);
 
         Set<WorkerConnector> workingConnectors = new HashSet<>();

File: rocketmq-connect/rocketmq-connect-runtime/src/test/java/org/apache/rocketmq/connect/runtime/service/ConfigManagementServiceImplTest.java
Patch:
@@ -84,7 +84,6 @@ public void init() throws Exception {
         connectConfig = new ConnectConfig();
         connectConfig.setHttpPort(8081);
         connectConfig.setStorePathRootDir(System.getProperty("user.home") + File.separator + "testConnectorStore");
-        connectConfig.setWorkerId("testWorkerId");
         connectConfig.setRmqConsumerGroup("testConsumerGroup");
         connectorName = "testConnectorName";
 

File: rocketmq-connect/rocketmq-connect-runtime/src/test/java/org/apache/rocketmq/connect/runtime/service/PositionManagementServiceImplTest.java
Patch:
@@ -80,8 +80,8 @@ public class PositionManagementServiceImplTest {
     public void init() throws Exception {
         connectConfig = new ConnectConfig();
         connectConfig.setHttpPort(8081);
+        connectConfig.setNamesrvAddr("localhost:9876");
         connectConfig.setStorePathRootDir(System.getProperty("user.home") + File.separator + "testConnectorStore");
-        connectConfig.setWorkerId("testWorkerId");
         connectConfig.setRmqConsumerGroup("testConsumerGroup");
         doAnswer(new Answer() {
             @Override

File: rocketmq-connect/rocketmq-connect-runtime/src/test/java/org/apache/rocketmq/connect/runtime/service/strategy/DefaultAllocateConnAndTaskStrategyTest.java
Patch:
@@ -36,7 +36,7 @@ public class DefaultAllocateConnAndTaskStrategyTest {
     @Test
     public void testAllocate() {
         DefaultAllocateConnAndTaskStrategy defaultAllocateConnAndTaskStrategy = new DefaultAllocateConnAndTaskStrategy();
-        Set<String> allWorker = new HashSet<String>() {
+        List<String> allWorker = new ArrayList<String>() {
             {
                 add("workId1");
                 add("workId2");

File: rocketmq-flink/src/main/java/org/apache/rocketmq/flink/RocketMQSink.java
Patch:
@@ -87,7 +87,7 @@ public void open(Configuration parameters) throws Exception {
         Validate.notNull(topicSelector, "TopicSelector can not be null");
         Validate.notNull(serializationSchema, "KeyValueSerializationSchema can not be null");
 
-        producer = new DefaultMQProducer();
+        producer = new DefaultMQProducer(RocketMQConfig.buildAclRPCHook(props));
         producer.setInstanceName(String.valueOf(getRuntimeContext().getIndexOfThisSubtask()) + "_" + UUID.randomUUID());
         RocketMQConfig.buildProducerConfigs(props, producer);
 

File: rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/utils/Plugin.java
Patch:
@@ -182,7 +182,7 @@ public ClassLoader currentThreadLoader() {
 
     public static ClassLoader compareAndSwapLoaders(ClassLoader loader) {
         ClassLoader current = Thread.currentThread().getContextClassLoader();
-        if (!current.equals(loader)) {
+        if (null != current && !current.equals(loader)) {
             Thread.currentThread().setContextClassLoader(loader);
         }
         return current;

File: rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/utils/PluginClassLoader.java
Patch:
@@ -55,7 +55,9 @@ protected synchronized Class<?> loadClass(String name, boolean resolve)
             Class<?> klass = findLoadedClass(name);
             if (klass == null) {
                 try {
-                    klass = findClass(name);
+                    if (PluginUtils.shouldNotLoadInIsolation(name)) {
+                        klass = findClass(name);
+                    }
                 } catch (ClassNotFoundException e) {
                     log.trace("Class '{}' not found. Delegating to parent", name);
                 }

File: rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/connectorwrapper/WorkerSourceTask.java
Patch:
@@ -138,7 +138,6 @@ public Map<ByteBuffer, ByteBuffer> getPositionData() {
 
     public void stop() {
         isStopping.set(true);
-        producer.shutdown();
         sourceTask.stop();
     }
 

File: rocketmq-connect-mongo/src/test/java/org/apache/connect/mongo/MongoSourceConnectorTest.java
Patch:
@@ -45,9 +45,8 @@ public void takeClass() {
 
     @Test
     public void verifyConfig() {
-        keyValue.put("mongoAddr", "shardName=replicaName:127.0.0.1:27017");
         String s = mongoSourceConnector.verifyAndSetConfig(keyValue);
-        Assert.assertTrue(s.contains("Request sourceTaskConfig key:"));
+        Assert.assertTrue(s.contains("Request config key:"));
     }
 
 

File: rocketmq-connect/rocketmq-connect-sample/src/main/java/org/apache/rocketmq/connect/file/FileSinkTask.java
Patch:
@@ -39,7 +39,7 @@
 
 public class FileSinkTask extends SinkTask {
 
-    private Logger log = LoggerFactory.getLogger(FileSinkTask.class);
+    private Logger log = LoggerFactory.getLogger(LoggerName.FILE_CONNECTOR);
 
     private FileConfig fileConfig;
 

File: rocketmq-connect/rocketmq-connect-sample/src/main/java/org/apache/rocketmq/connect/file/FileSourceTask.java
Patch:
@@ -46,7 +46,7 @@
 
 public class FileSourceTask extends SourceTask {
 
-    private Logger log = LoggerFactory.getLogger(FileSourceTask.class);
+    private Logger log = LoggerFactory.getLogger(LoggerName.FILE_CONNECTOR);
 
     private FileConfig fileConfig;
 

File: rocketmq-replicator/src/main/java/org/apache/rocketmq/replicator/common/Utils.java
Patch:
@@ -23,15 +23,15 @@
 public class Utils {
 
     public static String createGroupName(String prefix) {
-        return new StringBuilder().append(prefix).append("@").append(System.currentTimeMillis()).toString();
+        return new StringBuilder().append(prefix).append("-").append(System.currentTimeMillis()).toString();
     }
 
     public static String createGroupName(String prefix, String postfix) {
-        return new StringBuilder().append(prefix).append("@").append(postfix).toString();
+        return new StringBuilder().append(prefix).append("-").append(postfix).toString();
     }
 
     public static String createTaskId(String prefix) {
-        return new StringBuilder().append(prefix).append("@").append(System.currentTimeMillis()).toString();
+        return new StringBuilder().append(prefix).append("-").append(System.currentTimeMillis()).toString();
     }
 
     public static String createInstanceName(String namesrvAddr) {

File: rocketmq-replicator/src/main/java/org/apache/rocketmq/replicator/RmqConstants.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.connector;
+package org.apache.rocketmq.replicator;
 
 public class RmqConstants {
 
@@ -26,6 +26,8 @@ public class RmqConstants {
 
     public static final String NEXT_POSITION = "nextPosition";
 
+    public static final String SOURCE_INSTANCE_NAME = "REPLICATOR_SOURCE_CONSUMER";
+
     public static String getPartition(String topic, String broker, String queueId) {
         return new StringBuilder().append(broker).append(topic).append(queueId).toString();
     }

File: rocketmq-replicator/src/main/java/org/apache/rocketmq/replicator/common/ConstDefine.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.connector.common;
+package org.apache.rocketmq.replicator.common;
 
 public class ConstDefine {
 

File: rocketmq-replicator/src/main/java/org/apache/rocketmq/replicator/common/Utils.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.connector.common;
+package org.apache.rocketmq.replicator.common;
 
 import java.util.ArrayList;
 import java.util.Collections;

File: rocketmq-replicator/src/main/java/org/apache/rocketmq/replicator/config/ConfigDefine.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.connector.config;
+package org.apache.rocketmq.replicator.config;
 
 import java.util.HashSet;
 import java.util.Set;

File: rocketmq-replicator/src/main/java/org/apache/rocketmq/replicator/config/ConfigUtil.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.connector.config;
+package org.apache.rocketmq.replicator.config;
 
 import io.openmessaging.KeyValue;
 

File: rocketmq-replicator/src/main/java/org/apache/rocketmq/replicator/config/DataType.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.connector.config;
+package org.apache.rocketmq.replicator.config;
 
 public enum DataType {
 

File: rocketmq-replicator/src/main/java/org/apache/rocketmq/replicator/config/TaskConfig.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.connector.config;
+package org.apache.rocketmq.replicator.config;
 
 public class TaskConfig {
 

File: rocketmq-replicator/src/main/java/org/apache/rocketmq/replicator/config/TaskConfigEnum.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.connector.config;
+package org.apache.rocketmq.replicator.config;
 
 public enum TaskConfigEnum {
 

File: rocketmq-replicator/src/main/java/org/apache/rocketmq/replicator/config/TaskDivideConfig.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.connector.config;
+package org.apache.rocketmq.replicator.config;
 
 public class TaskDivideConfig {
 

File: rocketmq-replicator/src/main/java/org/apache/rocketmq/replicator/config/TaskTopicInfo.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.connector.config;
+package org.apache.rocketmq.replicator.config;
 
 public class TaskTopicInfo {
 

File: rocketmq-replicator/src/main/java/org/apache/rocketmq/replicator/schema/FieldName.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.connector.schema;
+package org.apache.rocketmq.replicator.schema;
 
 public enum FieldName {
     COMMON_MESSAGE("MessageExt");

File: rocketmq-replicator/src/main/java/org/apache/rocketmq/replicator/strategy/DivideStrategyEnum.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.connector.strategy;
+package org.apache.rocketmq.replicator.strategy;
 
 public enum DivideStrategyEnum {
 

File: rocketmq-replicator/src/main/java/org/apache/rocketmq/replicator/strategy/DivideTaskByTopic.java
Patch:
@@ -14,14 +14,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.connector.strategy;
+package org.apache.rocketmq.replicator.strategy;
 
 import com.alibaba.fastjson.JSONObject;
 import io.openmessaging.KeyValue;
 import io.openmessaging.internal.DefaultKeyValue;
 import org.apache.rocketmq.common.message.MessageQueue;
-import org.apache.rocketmq.connector.config.*;
-
+import org.apache.rocketmq.replicator.config.*;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;

File: rocketmq-replicator/src/main/java/org/apache/rocketmq/replicator/strategy/TaskDivideStrategy.java
Patch:
@@ -14,12 +14,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.rocketmq.connector.strategy;
+package org.apache.rocketmq.replicator.strategy;
 
 import io.openmessaging.KeyValue;
 import org.apache.rocketmq.common.message.MessageQueue;
-import org.apache.rocketmq.connector.config.TaskDivideConfig;
-
+import org.apache.rocketmq.replicator.config.TaskDivideConfig;
 import java.util.List;
 import java.util.Map;
 

File: rocketmq-connect-mongo/src/main/java/org/apache/connect/mongo/MongoReplicatorConfig.java
Patch:
@@ -17,7 +17,7 @@ public class MongoReplicatorConfig {
     private String interestDbAndCollection;
     private int positionTimeStamp;
     private int positionInc;
-    private String dataSync;
+    private boolean dataSync;
     private int copyThread = Runtime.getRuntime().availableProcessors();
 
 
@@ -85,11 +85,11 @@ public void setMongoPassWord(String mongoPassWord) {
     }
 
 
-    public String getDataSync() {
+    public boolean getDataSync() {
         return dataSync;
     }
 
-    public void setDataSync(String dataSync) {
+    public void setDataSync(boolean dataSync) {
         this.dataSync = dataSync;
     }
 

File: rocketmq-connect-mongo/src/main/java/org/apache/connect/mongo/replicator/ReplicatorTask.java
Patch:
@@ -37,7 +37,7 @@ public ReplicatorTask(MongoReplicator mongoReplicator, MongoClient mongoClient,
     @Override
     public void run() {
 
-        if (Constants.INITIAL.equals(mongoReplicatorConfig.getDataSync())) {
+        if (mongoReplicatorConfig.getDataSync()) {
             InitSync initSync = new InitSync(mongoReplicatorConfig, mongoClient, filter, mongoReplicator);
             initSync.start();
         }

File: rocketmq-connect-mongo/src/main/java/org/apache/connect/mongo/replicator/ReplicatorTask.java
Patch:
@@ -7,9 +7,9 @@
 import com.mongodb.client.MongoDatabase;
 import com.mongodb.client.model.Filters;
 import org.apache.connect.mongo.MongoReplicatorConfig;
+import org.apache.connect.mongo.initsync.InitSync;
 import org.apache.connect.mongo.replicator.event.DocumentConvertEvent;
 import org.apache.connect.mongo.replicator.event.ReplicationEvent;
-import org.apache.connect.mongo.initsync.InitSync;
 import org.bson.Document;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -46,7 +46,7 @@ public void run() {
         FindIterable<Document> iterable;
         if (mongoReplicatorConfig.getPositionTimeStamp() > 0 && mongoReplicatorConfig.getPositionTimeStamp() < System.currentTimeMillis()) {
             iterable = localDataBase.getCollection(Constants.MONGO_OPLOG_RS).find(
-                    Filters.gt("ts", mongoReplicatorConfig.getPositionTimeStamp()));
+                    Filters.gt("ts", mongoReplicatorConfig.getPosition()));
         } else {
             iterable = localDataBase.getCollection(Constants.MONGO_OPLOG_RS).find();
         }

File: rocketmq-replicator/src/main/java/org/apache/rocketmq/connector/RmqSourceConnector.java
Patch:
@@ -111,7 +111,8 @@ public void start() {
             RPCHook rpcHook = null;
             this.defaultMQAdminExt = new DefaultMQAdminExt(rpcHook);
             this.defaultMQAdminExt.setNamesrvAddr(this.config.getString(ConfigDefine.CONN_SOURCE_RMQ));
-            this.defaultMQAdminExt.setInstanceName(Utils.createGroupName(ConstDefine.REPLICATOR_ADMIN_PREFIX));
+            this.defaultMQAdminExt.setAdminExtGroup(Utils.createGroupName(ConstDefine.REPLICATOR_ADMIN_PREFIX));
+            this.defaultMQAdminExt.setInstanceName(Utils.createInstanceName(this.config.getString(ConfigDefine.CONN_SOURCE_RMQ)));
             try {
                 defaultMQAdminExt.start();
             } catch (MQClientException e) {

File: rocketmq-replicator/src/main/java/org/apache/rocketmq/connector/RmqSourceTask.java
Patch:
@@ -71,6 +71,7 @@ public void start(KeyValue config) {
         ConfigUtil.load(config, this.config);
         this.consumer.setConsumerGroup(this.taskId);
         this.consumer.setNamesrvAddr(this.config.getSourceRocketmq());
+        this.consumer.setInstanceName(Utils.createInstanceName(this.config.getSourceRocketmq()));
         List<TaskTopicInfo> topicList = JSONObject.parseArray(this.config.getTaskTopicList(), TaskTopicInfo.class);
 
         try {

File: rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/config/RuntimeConfigDefine.java
Patch:
@@ -69,6 +69,6 @@ public class RuntimeConfigDefine {
     /**
      * Maximum allowed message size in bytes, the default vaule is 4M.
      */
-    public static final int MAX_MESSAGE_SIZE = Integer.parseInt(System.getProperty("odar.max.message.size", "4194304"));
+    public static final int MAX_MESSAGE_SIZE = Integer.parseInt(System.getProperty("rocketmq.runtime.max.message.size", "4194304"));
 
 }

File: rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/connectorwrapper/Worker.java
Patch:
@@ -260,7 +260,7 @@ public synchronized void startTasks(Map<String, List<ConnectKeyValue>> taskConfi
                     producer.setNamesrvAddr(keyValue.getString(RuntimeConfigDefine.NAMESRV_ADDR));
                     String rmqProducerGroup = keyValue.getString(RuntimeConfigDefine.RMQ_PRODUCER_GROUP);
                     if (StringUtils.isEmpty(rmqProducerGroup)) {
-                        rmqProducerGroup = connectConfig.getRmqProducerGroup();
+                        rmqProducerGroup = connectConfig.getRmqProducerGroup() + System.currentTimeMillis();
                     }
                     producer.setProducerGroup(rmqProducerGroup + System.currentTimeMillis());
                     int operationTimeout = keyValue.getInt(RuntimeConfigDefine.OPERATION_TIMEOUT);
@@ -279,7 +279,7 @@ public synchronized void startTasks(Map<String, List<ConnectKeyValue>> taskConfi
                 } else if (task instanceof SinkTask) {
                     DefaultMQPullConsumer consumer = new DefaultMQPullConsumer();
                     consumer.setNamesrvAddr(connectConfig.getNamesrvAddr());
-                    String consumerGroup = connectConfig.getRmqConsumerGroup();
+                    String consumerGroup = connectConfig.getRmqConsumerGroup() + System.currentTimeMillis();
                     if (null != consumerGroup && !consumerGroup.isEmpty()) {
                         consumer.setConsumerGroup(consumerGroup);
                         consumer.setMaxReconsumeTimes(connectConfig.getRmqMaxRedeliveryTimes());

File: rocketmq-connect-kafka/src/main/java/org/apache/rocketmq/connect/kafka/connector/KafkaSourceTask.java
Patch:
@@ -122,6 +122,7 @@ public void stop() {
         log.info("source task stop enter");
         try {
             commitOffset(currentTPList, true);
+            consumer.wakeup(); // wakeup poll in other thread
             consumer.close();
         } catch (Exception e) {
             log.warn("{} consumer {} close exception {}", this, consumer, e);

File: rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/config/RuntimeConfigDefine.java
Patch:
@@ -69,6 +69,6 @@ public class RuntimeConfigDefine {
     /**
      * Maximum allowed message size in bytes, the default vaule is 4M.
      */
-    public static int MAX_MESSAGE_SIZE = Integer.parseInt(System.getProperty("odar.max.message.size", "4194304"));
+    public static final int MAX_MESSAGE_SIZE = Integer.parseInt(System.getProperty("odar.max.message.size", "4194304"));
 
 }

File: rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/connectorwrapper/Worker.java
Patch:
@@ -40,9 +40,9 @@
 import org.apache.rocketmq.connect.runtime.common.ConnectKeyValue;
 import org.apache.rocketmq.connect.runtime.config.ConnectConfig;
 import org.apache.rocketmq.connect.runtime.config.RuntimeConfigDefine;
+import org.apache.rocketmq.connect.runtime.service.DefaultConnectorContext;
 import org.apache.rocketmq.connect.runtime.service.PositionManagementService;
 import org.apache.rocketmq.connect.runtime.service.TaskPositionCommitService;
-import org.apache.rocketmq.connect.runtime.service.DefaultConnectorContext;
 import org.apache.rocketmq.connect.runtime.store.PositionStorageReaderImpl;
 import org.apache.rocketmq.connect.runtime.utils.Plugin;
 import org.apache.rocketmq.remoting.protocol.LanguageCode;

File: rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/service/ClusterManagementServiceImpl.java
Patch:
@@ -56,7 +56,7 @@ public class ClusterManagementServiceImpl implements ClusterManagementService {
     /**
      * Listeners to trigger while worker change.
      */
-    private Set<ClusterManagementService.WorkerStatusListener> workerStatusListener;
+    private Set<WorkerStatusListener> workerStatusListener;
 
     /**
      * Thread pool for scheduled tasks.

File: rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/service/OffsetManagementServiceImpl.java
Patch:
@@ -63,7 +63,7 @@ public OffsetManagementServiceImpl(ConnectConfig connectConfig) {
         this.dataSynchronizer = new BrokerBasedLog(connectConfig,
             OFFSET_MESSAGE_TOPIC,
             connectConfig.getWorkerId() + System.currentTimeMillis(),
-            new OffsetManagementServiceImpl.OffsetChangeCallback(),
+            new OffsetChangeCallback(),
             new JsonConverter(),
             new ByteMapConverter());
         this.offsetUpdateListener = new HashSet<>();
@@ -139,7 +139,7 @@ public void onCompletion(Throwable error, String key, Map<ByteBuffer, ByteBuffer
             OffsetManagementServiceImpl.this.persist();
 
             boolean changed = false;
-            switch (OffsetManagementServiceImpl.OffsetChangeEnum.valueOf(key)) {
+            switch (OffsetChangeEnum.valueOf(key)) {
                 case ONLINE_KEY:
                     mergeOffsetInfo(result);
                     changed = true;

File: rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/service/PositionManagementService.java
Patch:
@@ -65,7 +65,7 @@ public interface PositionManagementService {
      *
      * @param listener
      */
-    void registerListener(PositionManagementService.PositionUpdateListener listener);
+    void registerListener(PositionUpdateListener listener);
 
     interface PositionUpdateListener {
 

File: rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/service/PositionManagementServiceImpl.java
Patch:
@@ -63,7 +63,7 @@ public PositionManagementServiceImpl(ConnectConfig connectConfig) {
         this.dataSynchronizer = new BrokerBasedLog(connectConfig,
             POSITION_MESSAGE_TOPIC,
             connectConfig.getWorkerId() + System.currentTimeMillis(),
-            new PositionManagementServiceImpl.PositionChangeCallback(),
+            new PositionChangeCallback(),
             new JsonConverter(),
             new ByteMapConverter());
         this.positionUpdateListener = new HashSet<>();
@@ -139,7 +139,7 @@ public void onCompletion(Throwable error, String key, Map<ByteBuffer, ByteBuffer
             PositionManagementServiceImpl.this.persist();
 
             boolean changed = false;
-            switch (PositionManagementServiceImpl.PositionChangeEnum.valueOf(key)) {
+            switch (PositionChangeEnum.valueOf(key)) {
                 case ONLINE_KEY:
                     mergePositionInfo(result);
                     changed = true;

File: rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/service/strategy/DefaultAllocateConnAndTaskStrategy.java
Patch:
@@ -44,7 +44,6 @@ public ConnAndTaskConfigs allocate(Set<String> allWorker, String curWorker,
         Collections.sort(sortedWorkers);
         Map<String, ConnectKeyValue> sortedConnectorConfigs = getSortedMap(connectorConfigs);
         Map<String, List<ConnectKeyValue>> sortedTaskConfigs = getSortedMap(taskConfigs);
-        ;
         int index = 0;
         for (String connectorName : sortedConnectorConfigs.keySet()) {
             String allocatedWorker = sortedWorkers.get(index % sortedWorkers.size());

File: rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/utils/ServiceThread.java
Patch:
@@ -17,9 +17,9 @@
 
 package org.apache.rocketmq.connect.runtime.utils;
 
-import org.apache.rocketmq.connect.runtime.common.LoggerName;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicBoolean;
+import org.apache.rocketmq.connect.runtime.common.LoggerName;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: rocketmq-connect/rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/utils/TransferUtils.java
Patch:
@@ -19,12 +19,12 @@
 
 import com.alibaba.fastjson.JSON;
 import com.alibaba.fastjson.JSONObject;
-import org.apache.rocketmq.connect.runtime.common.ConnAndTaskConfigs;
-import org.apache.rocketmq.connect.runtime.common.ConnectKeyValue;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import org.apache.rocketmq.connect.runtime.common.ConnAndTaskConfigs;
+import org.apache.rocketmq.connect.runtime.common.ConnectKeyValue;
 
 public class TransferUtils {
 

File: rocketmq-replicator/src/main/java/org/apache/rocketmq/connector/strategy/TaskDivideStrategy.java
Patch:
@@ -18,11 +18,12 @@
 
 import io.openmessaging.KeyValue;
 import org.apache.rocketmq.common.message.MessageQueue;
+import org.apache.rocketmq.connector.config.TaskDivideConfig;
 
 import java.util.List;
 import java.util.Map;
 
 public abstract class TaskDivideStrategy {
 
-    public abstract List<KeyValue> divide(Map<String, List<MessageQueue>> topicMap, String source, String storeTopic);
+    public abstract List<KeyValue> divide(Map<String, List<MessageQueue>> topicMap, TaskDivideConfig tdc);
 }

File: rocketmq-connect-jms/src/main/java/org/apache/rocketmq/connect/jms/Config.java
Patch:
@@ -94,9 +94,7 @@ private void properties2Object(final KeyValue p, final Object object) {
                 }
             }
         }
-    }
-
-    
+    }    
     
     public String getBrokerUrl() {
 		return brokerUrl;

File: rocketmq-connect-jms/src/main/java/org/apache/rocketmq/connect/jms/connector/BaseJmsSourceConnector.java
Patch:
@@ -20,7 +20,6 @@
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Set;
-
 import io.openmessaging.KeyValue;
 import io.openmessaging.connector.api.Task;
 import io.openmessaging.connector.api.source.SourceConnector;
@@ -31,7 +30,6 @@ public abstract class BaseJmsSourceConnector extends SourceConnector {
 
     @Override
     public String verifyAndSetConfig(KeyValue config) {
-    	
         for (String requestKey : getRequiredConfig()) {
             if (!config.containsKey(requestKey)) {
                 return "Request config key: " + requestKey;
@@ -69,5 +67,5 @@ public List<KeyValue> taskConfigs() {
         return config;
     }
     
-    abstract Set<String> getRequiredConfig();
+    public abstract Set<String> getRequiredConfig();
 }

File: rocketmq-connect-jms/src/main/java/org/apache/rocketmq/connect/jms/connector/BaseJmsSourceTask.java
Patch:
@@ -82,7 +82,6 @@ public void start(KeyValue props) {
             this.config = new Config();
             this.config.load(props);
             this.sourcePartition = ByteBuffer.wrap(config.getBrokerUrl().getBytes("UTF-8"));
-            this.replicator = new Replicator(config,this);
             this.replicator.start();
         } catch (Exception e) {
             log.error("activemq task start failed.", e);
@@ -143,6 +142,9 @@ public ByteBuffer getMessageContent(Message message) throws JMSException {
         }
         return ByteBuffer.wrap(data);
     }
+
+
+    public abstract Config getConfig();
     
     public abstract PatternProcessor getPatternProcessor(Replicator replicator);
 }

File: rocketmq-connect-jms/src/main/java/org/apache/rocketmq/connect/jms/pattern/PatternProcessor.java
Patch:
@@ -33,7 +33,7 @@ public abstract class PatternProcessor {
 
     private Replicator replicator;
 
-    Config config;
+    protected Config config;
 
     private Connection connection;
 
@@ -47,7 +47,7 @@ public PatternProcessor(Replicator replicator) {
     }
 
     public abstract ConnectionFactory connectionFactory();
-    
+
     public void start() throws Exception {
         if (!StringUtils.equals("topic", config.getDestinationType())
             && !StringUtils.equals("queue", config.getDestinationType())) {

File: rocketmq-connect-jms/src/test/java/org/apache/rocketmq/connect/jms/connector/BaseJmsSourceConnectorTest.java
Patch:
@@ -48,7 +48,7 @@ public Class<? extends Task> taskClass() {
 		}
 		
 		@Override
-		Set<String> getRequiredConfig() {
+		public Set<String> getRequiredConfig() {
 			return REQUEST_CONFIG;
 		}
 	};

File: rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/connectorwrapper/WorkerSourceTask.java
Patch:
@@ -119,14 +119,14 @@ public void run() {
                 }
             });
             sourceTask.start(taskConfig);
-            log.info("task start, config:{}", JSON.toJSONString(taskConfig));
+            log.info("Source task start, config:{}", JSON.toJSONString(taskConfig));
             while (!isStopping.get()) {
                 Collection<SourceDataEntry> toSendEntries = sourceTask.poll();
                 if (null != toSendEntries && toSendEntries.size() > 0) {
                     sendRecord(toSendEntries);
                 }
             }
-            log.info("task stop, config:{}", JSON.toJSONString(taskConfig));
+            log.info("Source task stop, config:{}", JSON.toJSONString(taskConfig));
         } catch (Exception e) {
             log.error("Run task failed.", e);
         }
@@ -148,7 +148,6 @@ public void stop() {
      * @param sourceDataEntries
      */
     private void sendRecord(Collection<SourceDataEntry> sourceDataEntries) {
-
         for (SourceDataEntry sourceDataEntry : sourceDataEntries) {
             ByteBuffer partition = sourceDataEntry.getSourcePartition();
             ByteBuffer position = sourceDataEntry.getSourcePosition();

File: rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/ConnectController.java
Patch:
@@ -112,7 +112,7 @@ public ConnectController(ConnectConfig connectConfig) {
         this.configManagementService = new ConfigManagementServiceImpl(connectConfig, plugin);
         this.positionManagementService = new PositionManagementServiceImpl(connectConfig);
         this.worker = new Worker(connectConfig, positionManagementService, plugin);
-        this.rebalanceImpl = new RebalanceImpl(worker, configManagementService, clusterManagementService);
+        this.rebalanceImpl = new RebalanceImpl(worker, configManagementService, clusterManagementService, this);
         this.restHandler = new RestHandler(this);
         this.rebalanceService = new RebalanceService(rebalanceImpl, configManagementService, clusterManagementService);
     }

File: rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/rest/RestHandler.java
Patch:
@@ -81,6 +81,7 @@ private void getClusterInfo(Context context) {
     private void handleCreateConnector(Context context) {
         String connectorName = context.param("connectorName");
         String arg = context.queryParam("config");
+        log.info("config: {}", arg);
         Map keyValue = JSON.parseObject(arg, Map.class);
         ConnectKeyValue configs = new ConnectKeyValue();
         for (Object key : keyValue.keySet()) {

File: rocketmq-connect-runtime/src/main/java/org/apache/rocketmq/connect/runtime/service/ConfigManagementService.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.rocketmq.connect.runtime.service;
 
+import io.openmessaging.connector.api.Connector;
 import java.util.List;
 import java.util.Map;
 import org.apache.rocketmq.connect.runtime.common.ConnectKeyValue;
@@ -61,6 +62,8 @@ public interface ConfigManagementService {
      */
     void removeConnectorConfig(String connectorName);
 
+    void recomputeTaskConfigs(String connectorName, Connector connector, Long currentTimestamp);
+
     /**
      * Get all Task configs.
      *

File: rocketmq-flink/src/main/java/org/apache/rocketmq/flink/RocketMQSink.java
Patch:
@@ -22,6 +22,7 @@
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Properties;
+import java.util.UUID;
 
 import org.apache.commons.lang.Validate;
 import org.apache.flink.configuration.Configuration;
@@ -87,7 +88,7 @@ public void open(Configuration parameters) throws Exception {
         Validate.notNull(serializationSchema, "KeyValueSerializationSchema can not be null");
 
         producer = new DefaultMQProducer();
-        producer.setInstanceName(String.valueOf(getRuntimeContext().getIndexOfThisSubtask()));
+        producer.setInstanceName(String.valueOf(getRuntimeContext().getIndexOfThisSubtask()) + "_" + UUID.randomUUID());
         RocketMQConfig.buildProducerConfigs(props, producer);
 
         batchList = new LinkedList<>();

File: rocketmq-flink/src/main/java/org/apache/rocketmq/flink/RocketMQSource.java
Patch:
@@ -23,6 +23,7 @@
 import java.util.Map;
 import java.util.Properties;
 import java.util.Set;
+import java.util.UUID;
 import java.util.concurrent.ConcurrentHashMap;
 
 import org.apache.commons.lang.Validate;
@@ -115,7 +116,7 @@ public void open(Configuration parameters) throws Exception {
         pullConsumerScheduleService = new MQPullConsumerScheduleService(group);
         consumer = pullConsumerScheduleService.getDefaultMQPullConsumer();
 
-        consumer.setInstanceName(String.valueOf(getRuntimeContext().getIndexOfThisSubtask()));
+        consumer.setInstanceName(String.valueOf(getRuntimeContext().getIndexOfThisSubtask()) + "_" + UUID.randomUUID());
         RocketMQConfig.buildConsumerConfigs(props, consumer);
     }
 

File: rocketmq-flink/src/main/java/org/apache/rocketmq/flink/RocketMQSource.java
Patch:
@@ -320,7 +320,9 @@ public void initializeState(FunctionInitializationContext context) throws Except
             for (Tuple2<MessageQueue, Long> mqOffsets : unionOffsetStates.get()) {
                 // unionOffsetStates is the restored global union state;
                 // should only snapshot mqs that actually belong to us
-                restoredOffsets.put(mqOffsets.f0, mqOffsets.f1);
+                if (!restoredOffsets.containsKey(mqOffsets.f0) || restoredOffsets.get(mqOffsets.f0) < mqOffsets.f1) {
+                    restoredOffsets.put(mqOffsets.f0, mqOffsets.f1);
+                }
             }
             LOG.info("Setting restore state in the consumer. Using the following offsets: {}", restoredOffsets);
         } else {

File: rocketmq-console/src/main/java/org/apache/rocketmq/console/service/TopicService.java
Patch:
@@ -29,7 +29,7 @@
 import java.util.List;
 
 public interface TopicService {
-    TopicList fetchAllTopicList();
+    TopicList fetchAllTopicList(boolean skipSysProcess);
 
     TopicStatsTable stats(String topic);
 

File: rocketmq-console/src/main/java/org/apache/rocketmq/console/service/impl/MessageServiceImpl.java
Patch:
@@ -38,6 +38,7 @@
 import org.apache.rocketmq.common.protocol.body.Connection;
 import org.apache.rocketmq.common.protocol.body.ConsumeMessageDirectlyResult;
 import org.apache.rocketmq.common.protocol.body.ConsumerConnection;
+import org.apache.rocketmq.console.exception.ServiceException;
 import org.apache.rocketmq.console.model.MessageView;
 import org.apache.rocketmq.console.service.MessageService;
 import org.apache.rocketmq.tools.admin.MQAdminExt;
@@ -66,7 +67,7 @@ public Pair<MessageView, List<MessageTrack>> viewMessage(String subject, final S
             return new Pair<>(MessageView.fromMessageExt(messageExt), messageTrackList);
         }
         catch (Exception e) {
-            throw Throwables.propagate(e);
+            throw new ServiceException(-1, String.format("Failed to query message by Id: %s", msgId));
         }
     }
 

File: rocketmq-console/src/main/java/org/apache/rocketmq/console/support/GlobalExceptionHandler.java
Patch:
@@ -39,7 +39,7 @@ public JsonResult<Object> jsonErrorHandler(HttpServletRequest req, Exception ex)
                 value = new JsonResult<Object>(((ServiceException) ex).getCode(), ex.getMessage());
             }
             else {
-                value = new JsonResult<Object>(-1, ex.getMessage());
+                value = new JsonResult<Object>(-1, ex.getMessage() == null ? ex.toString() : ex.getMessage());
             }
         }
         return value;

File: rocketmq-console/src/test/java/org/apache/rocketmq/console/service/impl/TopicServiceImplTest.java
Patch:
@@ -64,7 +64,7 @@ public void tearDown() throws Exception {
 
     @Test
     public void fetchAllTopicList() throws Exception {
-        TopicList topicList = topicService.fetchAllTopicList();
+        TopicList topicList = topicService.fetchAllTopicList(true);
         Assert.assertNotNull(topicList);
         Assert.assertTrue(CollectionUtils.isNotEmpty(topicList.getTopicList()));
         Assert.assertTrue(topicList.getTopicList().contains(TEST_CONSOLE_TOPIC));
@@ -107,7 +107,7 @@ public void createOrUpdate() throws Exception {
         topicConfigInfo.setTopicName(TEST_CREATE_DELETE_TOPIC);
         topicService.createOrUpdate(topicConfigInfo);
 
-        TopicList topicList = topicService.fetchAllTopicList();
+        TopicList topicList = topicService.fetchAllTopicList(true);
 
         Assert.assertNotNull(topicList);
         Assert.assertTrue(CollectionUtils.isNotEmpty(topicList.getTopicList()));

File: rocketmq-console/src/main/java/org/apache/rocketmq/console/service/TopicService.java
Patch:
@@ -29,7 +29,7 @@
 import java.util.List;
 
 public interface TopicService {
-    TopicList fetchAllTopicList();
+    TopicList fetchAllTopicList(boolean skipSysProcess);
 
     TopicStatsTable stats(String topic);
 

File: rocketmq-console/src/main/java/org/apache/rocketmq/console/service/impl/MessageServiceImpl.java
Patch:
@@ -38,6 +38,7 @@
 import org.apache.rocketmq.common.protocol.body.Connection;
 import org.apache.rocketmq.common.protocol.body.ConsumeMessageDirectlyResult;
 import org.apache.rocketmq.common.protocol.body.ConsumerConnection;
+import org.apache.rocketmq.console.exception.ServiceException;
 import org.apache.rocketmq.console.model.MessageView;
 import org.apache.rocketmq.console.service.MessageService;
 import org.apache.rocketmq.tools.admin.MQAdminExt;
@@ -66,7 +67,7 @@ public Pair<MessageView, List<MessageTrack>> viewMessage(String subject, final S
             return new Pair<>(MessageView.fromMessageExt(messageExt), messageTrackList);
         }
         catch (Exception e) {
-            throw Throwables.propagate(e);
+            throw new ServiceException(-1, String.format("Failed to query message by Id: %s", msgId));
         }
     }
 

File: rocketmq-console/src/main/java/org/apache/rocketmq/console/support/GlobalExceptionHandler.java
Patch:
@@ -39,7 +39,7 @@ public JsonResult<Object> jsonErrorHandler(HttpServletRequest req, Exception ex)
                 value = new JsonResult<Object>(((ServiceException) ex).getCode(), ex.getMessage());
             }
             else {
-                value = new JsonResult<Object>(-1, ex.getMessage());
+                value = new JsonResult<Object>(-1, ex.getMessage() == null ? ex.toString() : ex.getMessage());
             }
         }
         return value;

File: rocketmq-console/src/test/java/org/apache/rocketmq/console/service/impl/TopicServiceImplTest.java
Patch:
@@ -64,7 +64,7 @@ public void tearDown() throws Exception {
 
     @Test
     public void fetchAllTopicList() throws Exception {
-        TopicList topicList = topicService.fetchAllTopicList();
+        TopicList topicList = topicService.fetchAllTopicList(true);
         Assert.assertNotNull(topicList);
         Assert.assertTrue(CollectionUtils.isNotEmpty(topicList.getTopicList()));
         Assert.assertTrue(topicList.getTopicList().contains(TEST_CONSOLE_TOPIC));
@@ -107,7 +107,7 @@ public void createOrUpdate() throws Exception {
         topicConfigInfo.setTopicName(TEST_CREATE_DELETE_TOPIC);
         topicService.createOrUpdate(topicConfigInfo);
 
-        TopicList topicList = topicService.fetchAllTopicList();
+        TopicList topicList = topicService.fetchAllTopicList(true);
 
         Assert.assertNotNull(topicList);
         Assert.assertTrue(CollectionUtils.isNotEmpty(topicList.getTopicList()));

File: rocketmq-flume/rocketmq-flume-sink/src/main/java/org/apache/rocketmq/flume/ng/sink/RocketMQSink.java
Patch:
@@ -174,13 +174,13 @@ public Status process() throws EventDeliveryException {
                 return Status.READY;
             }
 
-        } catch (Exception e) {
+        } catch (Throwable e) {
             log.error("Failed to processing event", e);
 
             if (transaction != null) {
                 try {
                     transaction.rollback();
-                } catch (Exception ex) {
+                } catch (Throwable ex) {
                     log.error("Failed to rollback transaction", ex);
                     throw new EventDeliveryException("Failed to rollback transaction", ex);
                 }
@@ -242,4 +242,4 @@ public void onException(Throwable e) {
             }
         }
     }
-}
\ No newline at end of file
+}

File: rocketmq-prometheus-exporter/src/main/java/org/apache/rocketmq/exporter/task/MetricsCollectTask.java
Patch:
@@ -122,6 +122,7 @@ public void collectOffset() {
                         for (Map.Entry<String, Long> consumeOffsetEntry : consumeOffsetEntries) {
                             metricsService.getCollector().AddGroupOffsetMetric(clusterName,consumeOffsetEntry.getKey(), topic, group, consumeOffsetEntry.getValue());
                         }
+                        consumeOffsetMap.clear();
                     }
                 }
             }

File: rocketmq-console/src/main/java/org/apache/rocketmq/console/service/impl/DashboardCollectServiceImpl.java
Patch:
@@ -147,7 +147,9 @@ public Map<String, List<String>> getTopicCache(String date) {
         String dataLocationPath = rmqConfigure.getConsoleCollectData();
         File file = new File(dataLocationPath + date + "_topic" + ".json");
         if (!file.exists()) {
-            throw Throwables.propagate(new ServiceException(1, "This date have't data!"));
+            log.info(String.format("No dashboard data for data: %s", date));
+            //throw Throwables.propagate(new ServiceException(1, "This date have't data!"));
+            return Maps.newHashMap();
         }
         return jsonDataFile2map(file);
     }

File: rocketmq-console/src/main/java/org/apache/rocketmq/console/service/impl/DashboardCollectServiceImpl.java
Patch:
@@ -147,7 +147,9 @@ public Map<String, List<String>> getTopicCache(String date) {
         String dataLocationPath = rmqConfigure.getConsoleCollectData();
         File file = new File(dataLocationPath + date + "_topic" + ".json");
         if (!file.exists()) {
-            throw Throwables.propagate(new ServiceException(1, "This date have't data!"));
+            log.info(String.format("No dashboard data for data: %s", date);
+            //throw Throwables.propagate(new ServiceException(1, "This date have't data!"));
+            return Maps.newHashMap();
         }
         return jsonDataFile2map(file);
     }

File: rocketmq-console/src/main/java/org/apache/rocketmq/console/config/AuthWebMVCConfigurerAdapter.java
Patch:
@@ -33,7 +33,7 @@
 import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;
 
 import javax.annotation.Resource;
-import javax.servlet.ServletRequest;
+import javax.servlet.http.HttpServletRequest;
 import java.util.List;
 
 @Configuration
@@ -64,7 +64,7 @@ public boolean supportsParameter(MethodParameter methodParameter) {
             @Override
             public Object resolveArgument(MethodParameter methodParameter, ModelAndViewContainer modelAndViewContainer,
                                           NativeWebRequest nativeWebRequest, WebDataBinderFactory webDataBinderFactory) throws Exception {
-                UserInfo userInfo = (UserInfo) WebUtil.getAttribute((ServletRequest) nativeWebRequest.getNativeRequest(),
+                UserInfo userInfo = (UserInfo) WebUtil.getValueFromSession((HttpServletRequest) nativeWebRequest.getNativeRequest(),
                         UserInfo.USER_INFO);
                 if (userInfo != null) {
                     return userInfo;

File: rocketmq-console/src/main/java/org/apache/rocketmq/console/App.java
Patch:
@@ -19,9 +19,11 @@
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.boot.web.servlet.ServletComponentScan;
 
 @EnableAutoConfiguration
 @SpringBootApplication
+@ServletComponentScan
 public class App {
 
     public static void main(String[] args) {

File: rocketmq-console/src/main/java/org/apache/rocketmq/console/service/impl/MonitorServiceImpl.java
Patch:
@@ -19,6 +19,7 @@
 import com.fasterxml.jackson.core.type.TypeReference;
 import com.google.common.base.Throwables;
 import java.io.File;
+import java.io.IOException;
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 import javax.annotation.PostConstruct;
@@ -86,7 +87,7 @@ private void writeDataJsonToFile(String path, String dataStr) {
     }
 
     @PostConstruct
-    private void loadData() {
+    private void loadData() throws IOException {
         String content = MixAll.file2String(getConsumerMonitorConfigDataPath());
         if (content == null) {
             content = MixAll.file2String(getConsumerMonitorConfigDataPathBackUp());

File: rocketmq-flink/src/main/java/org/apache/rocketmq/flink/RocketMQSource.java
Patch:
@@ -235,9 +235,8 @@ private long getMessageQueueOffset(MessageQueue mq) throws MQClientException {
                         throw new IllegalArgumentException("Unknown value for CONSUMER_OFFSET_RESET_TO.");
                 }
             }
-            offsetTable.put(mq, offset);
         }
-
+        offsetTable.put(mq, offset);
         return offsetTable.get(mq);
     }
 

File: rocketmq-spring-boot-starter/src/main/java/org/apache/rocketmq/spring/starter/core/RocketMQPushConsumerLifecycleListener.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.rocketmq.spring.starter.core;
 
 import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;
+import org.apache.rocketmq.spring.starter.supports.RocketMQConsumerLifecycleListener;
 
 public interface RocketMQPushConsumerLifecycleListener extends RocketMQConsumerLifecycleListener<DefaultMQPushConsumer> {
 }

File: rocketmq-spring-boot-starter/src/main/java/org/apache/rocketmq/spring/starter/supports/DefaultRocketMQListenerContainer.java
Patch:
@@ -15,9 +15,11 @@
  * limitations under the License.
  */
 
-package org.apache.rocketmq.spring.starter.core;
+package org.apache.rocketmq.spring.starter.supports;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
+import org.apache.rocketmq.spring.starter.core.RocketMQListener;
+import org.apache.rocketmq.spring.starter.core.RocketMQPushConsumerLifecycleListener;
 import org.apache.rocketmq.spring.starter.enums.ConsumeMode;
 import org.apache.rocketmq.spring.starter.enums.SelectorType;
 import java.lang.reflect.ParameterizedType;

File: rocketmq-spring-boot-starter/src/main/java/org/apache/rocketmq/spring/starter/supports/DefaultRocketMQListenerContainerConstants.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.rocketmq.spring.starter.core;
+package org.apache.rocketmq.spring.starter.supports;
 
 /**
  * Constants Created by aqlu on 2017/11/16.

File: rocketmq-spring-boot-starter/src/main/java/org/apache/rocketmq/spring/starter/supports/RocketMQConsumerLifecycleListener.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.rocketmq.spring.starter.core;
+package org.apache.rocketmq.spring.starter.supports;
 
 public interface RocketMQConsumerLifecycleListener<T> {
     void prepareStart(final T consumer);

File: rocketmq-spring-boot-starter/src/main/java/org/apache/rocketmq/spring/starter/supports/RocketMQListenerContainer.java
Patch:
@@ -15,8 +15,9 @@
  * limitations under the License.
  */
 
-package org.apache.rocketmq.spring.starter.core;
+package org.apache.rocketmq.spring.starter.supports;
 
+import org.apache.rocketmq.spring.starter.core.RocketMQListener;
 import org.springframework.beans.factory.DisposableBean;
 
 public interface RocketMQListenerContainer extends DisposableBean {

File: samples/rocketmq-spring-boot-starter-sample/rocketmq-produce-demo/src/main/java/org/apache/rocketmq/samples/springboot/domain/OrderPaidEvent.java
Patch:
@@ -22,9 +22,6 @@
 import java.io.Serializable;
 import java.math.BigDecimal;
 
-/**
- * OrderPaidEvent Created by aqlu on 2017/11/16.
- */
 @Data
 @AllArgsConstructor
 public class OrderPaidEvent implements Serializable {

File: rocketmq-spring-boot-starter/src/main/java/org/apache/rocketmq/spring/starter/core/DefaultRocketMQListenerContainer.java
Patch:
@@ -39,6 +39,7 @@
 import org.apache.rocketmq.client.exception.MQClientException;
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.protocol.heartbeat.MessageModel;
+import org.springframework.aop.support.AopUtils;
 import org.springframework.beans.factory.InitializingBean;
 import org.springframework.util.Assert;
 
@@ -223,7 +224,7 @@ private Object doConvertMessage(MessageExt messageExt) {
     }
 
     private Class getMessageType() {
-        Type[] interfaces = rocketMQListener.getClass().getGenericInterfaces();
+        Type[] interfaces = AopUtils.getTargetClass(rocketMQListener).getGenericInterfaces();
         if (Objects.nonNull(interfaces)) {
             for (Type type : interfaces) {
                 if (type instanceof ParameterizedType) {

File: rocketmq-redis/src/main/java/org/apache/rocketmq/redis/replicator/conf/ReplicatorConstants.java
Patch:
@@ -33,6 +33,8 @@ public class ReplicatorConstants {
 
     public static final String ROCKETMQ_PRODUCER_GROUP_NAME = "rocketmq.producer.groupname";
 
+    public static final String ROCKETMQ_CONSUMER_GROUP_NAME = "rocketmq.consumer.groupname";
+
     public static final String ROCKETMQ_DATA_TOPIC = "rocketmq.data.topic";
 
     public static final String DEPLOY_MODEL = "deploy.model";

File: rocketmq-flume/rocketmq-flume-source/src/main/java/org/apache/rocketmq/flume/ng/source/RocketMQSourceConstants.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.rocketmq.flume.ng.souce;
+package org.apache.rocketmq.flume.ng.source;
 
 /**
  *

File: spring-boot-starter-rocketmq/src/main/java/org/apache/rocketmq/spring/starter/core/RocketMQTemplate.java
Patch:
@@ -100,7 +100,7 @@ public SendResult syncSend(String destination, Message<?> message, long timeout)
             org.apache.rocketmq.common.message.Message rocketMsg = convertToRocketMsg(destination, message);
             SendResult sendResult = producer.send(rocketMsg, timeout);
             long costTime = System.currentTimeMillis() - now;
-            log.info("send message cost: {} ms, msgId:{}", costTime, sendResult.getMsgId());
+            log.debug("send message cost: {} ms, msgId:{}", costTime, sendResult.getMsgId());
             return sendResult;
         } catch (Exception e) {
             log.info("syncSend failed. destination:{}, message:{} ", destination, message);
@@ -164,7 +164,7 @@ public SendResult syncSendOrderly(String destination, Message<?> message, String
             org.apache.rocketmq.common.message.Message rocketMsg = convertToRocketMsg(destination, message);
             SendResult sendResult = producer.send(rocketMsg, messageQueueSelector, hashKey, timeout);
             long costTime = System.currentTimeMillis() - now;
-            log.info("send message cost: {} ms, msgId:{}", costTime, sendResult.getMsgId());
+            log.debug("send message cost: {} ms, msgId:{}", costTime, sendResult.getMsgId());
             return sendResult;
         } catch (Exception e) {
             log.info("syncSendOrderly failed. destination:{}, message:{} ", destination, message);

File: spring-boot-starter-rocketmq/src/main/java/org/apache/rocketmq/spring/starter/core/DefaultRocketMQListenerContainer.java
Patch:
@@ -150,7 +150,7 @@ public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs, ConsumeCo
                     long now = System.currentTimeMillis();
                     rocketMQListener.onMessage(doConvertMessage(messageExt));
                     long costTime = System.currentTimeMillis() - now;
-                    log.info("consume {} cost: {} ms", messageExt.getMsgId(), costTime);
+                    log.debug("consume {} cost: {} ms", messageExt.getMsgId(), costTime);
                 } catch (Exception e) {
                     log.warn("consume message failed. messageExt:{}", messageExt, e);
                     context.setDelayLevelWhenNextConsume(delayLevelWhenNextConsume);

File: rocketmq-redis/src/main/java/org/apache/rocketmq/redis/replicator/cmd/parser/RestoreParser.java
Patch:
@@ -32,7 +32,7 @@ public RestoreCommand parse(Object[] command) {
         String key = objToString(command[idx]);
         byte[] rawKey = objToBytes(command[idx]);
         idx++;
-        int ttl = new BigDecimal(objToString(command[idx++])).intValueExact();
+        long ttl = new BigDecimal(objToString(command[idx++])).longValueExact();
         String serializedValue = objToString(command[idx]);
         byte[] rawSerializedValue = objToBytes(command[idx]);
         idx++;

File: rocketmq-redis/src/test/java/org/apache/rocketmq/redis/replicator/cmd/parser/PingParserTest.java
Patch:
@@ -291,7 +291,7 @@ public void parse() throws Exception {
             RestoreCommand cmd = parser.parse(toObjectArray(new Object[] {"restore", "mykey", "0", "\\n\\x17\\x17\\x00\\x00\\x00\\x12\\x00\\x00\\x00\\x03\\x00\\x00\\xc0\\x01\\x00\\x04\\xc0\\x02\\x00\\x04\\xc0\\x03\\x00\\xff\\x04\\x00u#<\\xc0;.\\xe9\\xdd"}));
             assertEquals("\\n\\x17\\x17\\x00\\x00\\x00\\x12\\x00\\x00\\x00\\x03\\x00\\x00\\xc0\\x01\\x00\\x04\\xc0\\x02\\x00\\x04\\xc0\\x03\\x00\\xff\\x04\\x00u#<\\xc0;.\\xe9\\xdd", cmd.getSerializedValue());
             assertEquals("mykey", cmd.getKey());
-            assertEquals(0, cmd.getTtl());
+            assertEquals(0L, cmd.getTtl());
             assertEquals(null, cmd.getReplace());
             System.out.println(cmd);
         }

File: rocketmq-redis/src/main/java/org/apache/rocketmq/redis/replicator/RedisRdbReplicator.java
Patch:
@@ -54,7 +54,7 @@ public void open() throws IOException {
         } catch (EOFException ignore) {
         } catch (UncheckedIOException e) {
             if (!(e.getCause() instanceof EOFException))
-                throw e;
+                throw e.getCause();
         } finally {
             close();
         }

File: rocketmq-redis/src/main/java/org/apache/rocketmq/redis/replicator/RedisURI.java
Patch:
@@ -154,8 +154,6 @@ private void readObject(ObjectInputStream is) throws ClassNotFoundException, IOE
         }
     }
 
-    // helper
-
     private void parse(String uri) throws URISyntaxException {
         this.uri = new URI(uri);
         if (this.uri.getScheme().equalsIgnoreCase("redis")) {

File: rocketmq-redis/src/main/java/org/apache/rocketmq/redis/replicator/util/Lzf.java
Patch:
@@ -27,6 +27,9 @@
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
  * License for the specific language governing permissions and limitations under
  * the License.
+ *
+ * author Ning
+ * modification: support more than 2GB laf decompression
  */
 
 package org.apache.rocketmq.redis.replicator.util;

File: rocketmq-redis/src/main/java/org/apache/rocketmq/redis/replicator/conf/ReplicatorConstants.java
Patch:
@@ -38,9 +38,12 @@ public class ReplicatorConstants {
     public static final String ROCKETMQ_DATA_TOPIC = "rocketmq.data.topic";
 
     public static final String ORDER_MODEL = "order.model";
+
     public static final String ORDER_MODEL_GLOBAL = "global";
 
     public static final String DEPLOY_MODEL = "deploy.model";
+
     public static final String DEPLOY_MODEL_CLUSTER = "cluster";
+
     public static final String DEPLOY_MODEL_SINGLE = "single";
 }

File: src/main/java/org/apache/rocketmq/jms/domain/CommonContext.java
Patch:
@@ -49,7 +49,7 @@ public class CommonContext {
     /**
      * Set send message timeOut
      */
-    private int sendMsgTimeoutMillis;
+    private int sendMsgTimeoutMillis = -1;
 
     /**
      * @return the appId

File: src/test/java/org/apache/rocketmq/jms/domain/message/JmsMessageConvertTest.java
Patch:
@@ -30,6 +30,8 @@ public void testCovert2RMQ() throws Exception {
         //convert to RMQMessage
         MessageExt message = (MessageExt)MessageConverter.convert2RMQMessage(jmsBaseMessage);
 
+        System.out.println(message);
+
         //then convert back to jmsBaseMessage
         JmsBaseMessage jmsBaseMessageBack = MessageConverter.convert2JMSMessage(message);
 

File: src/main/java/org/apache/rocketmq/console/service/client/MQAdminExtImpl.java
Patch:
@@ -142,7 +142,7 @@ public TopicStatsTable examineTopicStats(String topic)
     @Override
     public TopicList fetchAllTopicList() throws RemotingException, MQClientException, InterruptedException {
         TopicList topicList = MQAdminInstance.threadLocalMQAdminExt().fetchAllTopicList();
-        logger.info("op=look={}", JsonUtil.obj2String(topicList.getTopicList()));
+        logger.debug("op=look={}", JsonUtil.obj2String(topicList.getTopicList()));
         return topicList;
     }
 

File: src/main/java/org/apache/rocketmq/console/service/client/MQAdminInstance.java
Patch:
@@ -47,7 +47,7 @@ public static RemotingClient threadLocalRemotingClient() {
     public static void initMQAdminInstance() throws MQClientException {
         Integer nowCount = INIT_COUNTER.get();
         if (nowCount == null) {
-            DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt();
+            DefaultMQAdminExt defaultMQAdminExt = new DefaultMQAdminExt(50);
             defaultMQAdminExt.setInstanceName(Long.toString(System.currentTimeMillis()));
             defaultMQAdminExt.start();
             MQ_ADMIN_EXT_THREAD_LOCAL.set(defaultMQAdminExt);

File: src/main/java/org/apache/rocketmq/console/aspect/admin/annotation/MultiMQAdminCmdMethod.java
Patch:
@@ -27,5 +27,5 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
 public @interface MultiMQAdminCmdMethod {
-    long timeoutMillis();
+    long timeoutMillis() default 0;
 }

File: rocketmq-flume-sink/src/test/java/org/apache/rocketmq/flume/ng/sink/RocketMQSinkTest.java
Patch:
@@ -156,7 +156,7 @@ public void testBatchEvent() throws MQClientException, InterruptedException, Eve
         /*
         mock flume source
          */
-        Map<String, String> msgs = new HashMap<String, String>();
+        Map<String, String> msgs = new HashMap<>();
 
         Transaction tx = channel.getTransaction();
         tx.begin();

File: rocketmq-flume-souce/src/test/java/org/apache/rocketmq/flume/ng/souce/RocketMQSourceTest.java
Patch:
@@ -85,7 +85,7 @@ public void testEvent() throws EventDeliveryException, UnsupportedEncodingExcept
         context.put(TAG_CONFIG, tag);
         Channel channel = new MemoryChannel();
         Configurables.configure(channel, context);
-        List<Channel> channels = new ArrayList<Channel>();
+        List<Channel> channels = new ArrayList<>();
         channels.add(channel);
         ChannelSelector channelSelector = new ReplicatingChannelSelector();
         channelSelector.setChannels(channels);

File: rocketmq-flume-sink/src/test/java/org/apache/rocketmq/flume/ng/sink/RocketMQSinkTest.java
Patch:
@@ -55,7 +55,7 @@ public class RocketMQSinkTest {
 
     private static final Logger log = org.slf4j.LoggerFactory.getLogger(RocketMQSinkTest.class);
 
-    private String nameserver = "localhost:9876";
+    private String nameServer = "120.55.113.35:9876";
 
     private DefaultMQPullConsumer consumer;
     private String tag = TAG_DEFAULT + "_SINK_TEST";
@@ -68,7 +68,7 @@ public void testEvent() throws MQClientException, InterruptedException, EventDel
         start sink
          */
         Context context = new Context();
-        context.put(NAME_SERVER_CONFIG,nameserver);
+        context.put(NAME_SERVER_CONFIG, nameServer);
         context.put(TAG_CONFIG, tag);
         RocketMQSink sink = new RocketMQSink();
         Configurables.configure(sink,context);
@@ -99,7 +99,7 @@ public void testEvent() throws MQClientException, InterruptedException, EventDel
         consumer message
          */
         consumer = new DefaultMQPullConsumer(consumerGroup);
-        consumer.setNamesrvAddr("localhost:9876");
+        consumer.setNamesrvAddr(nameServer);
         consumer.setMessageModel(MessageModel.valueOf("BROADCASTING"));
         consumer.registerMessageQueueListener(TOPIC_DEFAULT, null);
         consumer.start();

File: rocketmq-flume-souce/src/test/java/org/apache/rocketmq/flume/ng/souce/RocketMQSourceTest.java
Patch:
@@ -56,7 +56,7 @@ public class RocketMQSourceTest {
 
     private static final Logger log = LoggerFactory.getLogger(RocketMQSourceTest.class);
 
-    private static String nameServer = "localhost:9876";
+    private String nameServer = "120.55.113.35:9876";
 
     private String tag = TAG_DEFAULT + "_SOURCE_TEST";
     private String producerGroup = "PRODUCER_GROUP_SOURCE_TEST";

File: src/main/java/org/apache/rocketmq/console/service/impl/MonitorServiceImpl.java
Patch:
@@ -91,7 +91,7 @@ private void loadData() {
         if (content == null) {
             return;
         }
-        configMap = JsonUtil.string2Obj(content, new TypeReference<Map<String, ConsumerMonitorConfig>>() {
+        configMap = JsonUtil.string2Obj(content, new TypeReference<ConcurrentHashMap<String, ConsumerMonitorConfig>>() {
         });
     }
 }

File: src/main/java/org/apache/rocketmq/console/config/RMQConfigure.java
Patch:
@@ -33,7 +33,7 @@ public class RMQConfigure {
     //use rocketmq.namesrv.addr first,if it is empty,than use system proerty or system env
     private String addr = System.getProperty(MixAll.NAMESRV_ADDR_PROPERTY, System.getenv(MixAll.NAMESRV_ADDR_ENV));
 
-    private String isVIPChannel = System.getProperty(ClientConfig.SendMessageWithVIPChannelProperty, System.getenv(ClientConfig.SendMessageWithVIPChannelProperty));
+    private String isVIPChannel;
 
     private String consoleCollectData;
 
@@ -72,7 +72,7 @@ public void setIsVIPChannel(String isVIPChannel){
             System.setProperty(ClientConfig.SendMessageWithVIPChannelProperty, isVIPChannel);
             logger.info("setIsVIPChannel isVIPChannel={}", isVIPChannel);
         }
-        if (StringUtils.isBlank(this.addr)) {
+        if (StringUtils.isBlank(this.isVIPChannel)) {
             throw new IllegalArgumentException("======ERROR====== setIsVIPChannel is empty ======ERROR====== ");
         }
     }

File: src/main/java/org/apache/rocketmq/console/service/impl/TopicServiceImpl.java
Patch:
@@ -128,11 +128,8 @@ public List<TopicConfigInfo> examineTopicConfig(String topic) {
             TopicConfigInfo topicConfigInfo = new TopicConfigInfo();
             TopicConfig topicConfig = examineTopicConfig(topic, brokerData.getBrokerName());
             BeanUtils.copyProperties(topicConfig, topicConfigInfo);
-            boolean hasSameTopicConfig = false;
-            if (!hasSameTopicConfig) {
                 topicConfigInfo.setBrokerNameList(Lists.newArrayList(brokerData.getBrokerName()));
                 topicConfigInfoList.add(topicConfigInfo);
-            }
         }
         return topicConfigInfoList;
     }

File: src/main/java/org/apache/rocketmq/console/service/DashboardCollectService.java
Patch:
@@ -25,6 +25,8 @@ public interface DashboardCollectService {
 
     void collectBroker();
 
+    void collectTopicDLQ();
+
     void saveData();
 
     Map<String, List<String>> getBrokerCache(String date);

File: src/main/java/org/apache/rocketmq/console/service/DashboardCollectService.java
Patch:
@@ -25,6 +25,8 @@ public interface DashboardCollectService {
 
     void collectBroker();
 
+    void collectTopicDLQ();
+
     void saveData();
 
     Map<String, List<String>> getBrokerCache(String date);

File: src/main/java/org/apache/rocketmq/console/service/impl/DashboardCollectServiceImpl.java
Patch:
@@ -284,7 +284,7 @@ public Map<String, List<String>> getBrokerCache(String date) {
         String dataLocationPath = rmqConfigure.getConsoleCollectData();
         File file = new File(dataLocationPath + date + ".json");
         if (!file.exists()) {
-            throw Throwables.propagate(new ServiceException(-1, "this date have't date!"));
+            throw Throwables.propagate(new ServiceException(-1, "This date have't data!"));
         }
         return jsonDataFile2map(file);
     }

File: src/test/java/org/apache/rocketmq/jms/domain/message/JmsMessageConvertTest.java
Patch:
@@ -9,9 +9,6 @@
 import org.junit.Assert;
 import org.junit.Test;
 
-/**
- * Created by win7 on 2017/1/17.
- */
 public class JmsMessageConvertTest {
     @Test
     public void testCovert2RMQ() throws Exception {

File: src/main/java/org/apache/rocketmq/jms/util/MessageConverter.java
Patch:
@@ -146,7 +146,7 @@ else if (JmsBaseConstant.JMS_MESSAGE_ID.equals(properName) ||
     }
 
     public static Message convert2RMQMessage(JmsBaseMessage jmsMsg) throws Exception {
-        Message rocketmqMsg = new Message();
+        Message rocketmqMsg = new MessageExt();
         // 1. Transform message body
         rocketmqMsg.setBody(MessageConverter.getContentFromJms(jmsMsg));
 

File: src/main/java/org/apache/rocketmq/jms/util/MessageConverter.java
Patch:
@@ -173,7 +173,7 @@ public static Message convert2RMQMessage(JmsBaseMessage jmsMsg) throws Exception
             rocketmqMsg.putUserProperty(name, properties.getProperty(name));
         }
 
-        if (systemKeys.size() != 0) {
+        if (systemKeys != null) {
             rocketmqMsg.setKeys(systemKeys);
         }
 

File: src/main/java/org/apache/rocketmq/console/service/MessageService.java
Patch:
@@ -47,9 +47,9 @@ List<MessageView> queryMessageByTopic(final String topic, final long begin,
 
     List<MessageTrack> messageTrackDetail(MessageExt msg);
 
-    ConsumeMessageDirectlyResult consumeMessageDirectly(String msgId, String consumerGroup);
-
-    ConsumeMessageDirectlyResult consumeMessageDirectly(String msgId, String consumerGroup, String clientId);
+    ConsumeMessageDirectlyResult consumeMessageDirectly(String topic, String msgId, String consumerGroup,
+        String clientId);
 
+    @Deprecated // use viewMessage(String subject, final String msgId) instead
     Pair<MessageView, List<MessageTrack>> viewMessageByBrokerAndOffset(String brokerHost, int port, long offset);
 }

File: src/main/java/org/apache/rocketmq/console/service/impl/ConsumerServiceImpl.java
Patch:
@@ -100,7 +100,7 @@ public List<GroupConsumeInfo> queryGroupList() {
                 groupConsumeInfo.setGroup(consumerGroup);
 
                 if (consumeStats != null) {
-                    groupConsumeInfo.setConsumeTps((int)consumeStats.getConsumeTps());
+                    groupConsumeInfo.setConsumeTps((int) consumeStats.getConsumeTps());
                     groupConsumeInfo.setDiffTotal(consumeStats.computeTotalDiff());
                 }
 

File: src/main/java/org/apache/rocketmq/console/service/impl/DashBoardCollectServiceImpl.java
Patch:
@@ -20,9 +20,8 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.scheduling.annotation.Scheduled;
-import org.springframework.stereotype.Service;
 
-@Service
+//@Service
 public class DashBoardCollectServiceImpl implements DashBoardCollectService {
 
     private Logger logger = LoggerFactory.getLogger(DashBoardCollectServiceImpl.class);

File: src/main/java/org/apache/rocketmq/console/controller/TopicController.java
Patch:
@@ -65,7 +65,7 @@ public Object route(@RequestParam String topic) {
         return topicService.route(topic);
     }
 
-    @RequestMapping(value = "/createOrUpdate.do", method = {RequestMethod.GET, RequestMethod.POST})
+    @RequestMapping(value = "/createOrUpdate.do", method = { RequestMethod.POST})
     @JsonBody
     public Object topicCreateOrUpdateRequest(@RequestBody TopicConfigInfo topicCreateOrUpdateRequest) {
         Preconditions.checkArgument(CollectionUtils.isNotEmpty(topicCreateOrUpdateRequest.getBrokerNameList()), "brokerName can not be all blank");

File: src/main/java/org/apache/rocketmq/jms/util/ExceptionUtil.java
Patch:
@@ -21,11 +21,11 @@
 import javax.jms.JMSException;
 
 public class ExceptionUtil {
-    public static final boolean skipSetException
+    public static final boolean SKIP_SET_EXCEPTION
         = Boolean.parseBoolean(System.getProperty("skip.set.exception", "false"));
 
     public static void handleUnSupportedException() {
-        if (!ExceptionUtil.skipSetException) {
+        if (!ExceptionUtil.SKIP_SET_EXCEPTION) {
             throw new UnsupportedOperationException("Operation unsupported! If you want to skip this Exception," +
                 " use '-Dskip.set.exception=true' in JVM options.");
         }

