File: micrometer-core/src/main/java/io/micrometer/core/instrument/logging/LoggingMeterRegistry.java
Patch:
@@ -42,6 +42,7 @@
 import java.util.stream.StreamSupport;
 
 import static io.micrometer.core.instrument.util.DoubleFormat.decimalOrNan;
+import static io.micrometer.core.instrument.util.DoubleFormat.wholeOrDecimal;
 import static java.util.stream.Collectors.joining;
 
 /**
@@ -146,7 +147,7 @@ protected void publish() {
                     int activeTasks = longTaskTimer.activeTasks();
                     if (!config.logInactive() && activeTasks == 0)
                         return;
-                    loggingSink.accept(print.id() + " active=" + print.value(activeTasks) + " duration="
+                    loggingSink.accept(print.id() + " active=" + wholeOrDecimal(activeTasks) + " duration="
                             + print.time(longTaskTimer.duration(getBaseTimeUnit())));
                 }, timeGauge -> {
                     double value = timeGauge.value(getBaseTimeUnit());

File: micrometer-core/src/test/java/io/micrometer/core/instrument/logging/LoggingMeterRegistryTest.java
Patch:
@@ -228,7 +228,7 @@ void publishShouldPrintActiveCountAndDurationWhenMeterIsLongTaskTimer() {
         IntStream.rangeClosed(1, 30).forEach(t -> timer.start());
         clock.add(config.step());
         recordingRegistry.publish();
-        assertThat(recordingRegistry.getLogs()).containsExactly("my.ltt{} active=30 milliseconds duration=30m");
+        assertThat(recordingRegistry.getLogs()).containsExactly("my.ltt{} active=30 duration=30m");
     }
 
     @Test

File: micrometer-core/src/main/java/io/micrometer/core/instrument/logging/LoggingMeterRegistry.java
Patch:
@@ -162,7 +162,7 @@ protected void publish() {
                     double count = timer.count();
                     if (!config.logInactive() && count == 0)
                         return;
-                    loggingSink.accept(print.id() + " throughput=" + print.rate(count) + " mean="
+                    loggingSink.accept(print.id() + " throughput=" + print.unitlessRate(count) + " mean="
                             + print.time(timer.mean(getBaseTimeUnit())));
                 }, meter -> loggingSink.accept(writeMeter(meter, print)));
             });

File: micrometer-core/src/test/java/io/micrometer/core/instrument/logging/LoggingMeterRegistryTest.java
Patch:
@@ -271,8 +271,7 @@ void publishShouldPrintDeltaCountAndThroughputWhenMeterIsFunctionTimer() {
         recordingRegistry.more().timer("my.function-timer", emptyList(), new AtomicDouble(), d -> 30, d -> 30, SECONDS);
         clock.add(config.step());
         recordingRegistry.publish();
-        assertThat(recordingRegistry.getLogs())
-            .containsExactly("my.function-timer{} throughput=0.5 milliseconds/s mean=1s");
+        assertThat(recordingRegistry.getLogs()).containsExactly("my.function-timer{} throughput=0.5/s mean=1s");
     }
 
     @Test
@@ -319,7 +318,7 @@ void publishShouldPrintMetersWithZeroStepCountWhenLogsInactiveIsEnabled() {
         assertThat(recordingRegistry.getMeters()).hasSize(5);
         assertThat(recordingRegistry.getLogs()).containsExactlyInAnyOrder("my.counter{} throughput=0/s",
                 "my.timer{} throughput=0/s mean= max=", "my.summary{} throughput=0/s mean=0 max=0",
-                "my.function-counter{} throughput=0/s", "my.function-timer{} throughput=0 milliseconds/s mean=");
+                "my.function-counter{} throughput=0/s", "my.function-timer{} throughput=0/s mean=");
     }
 
     private static class TestConfig implements LoggingRegistryConfig {

File: concurrency-tests/src/jcstress/java/io/micrometer/concurrencytests/MeterRegistryConcurrencyTest.java
Patch:
@@ -15,7 +15,6 @@
  */
 package io.micrometer.concurrencytests;
 
-import io.micrometer.core.Issue;
 import io.micrometer.core.instrument.Counter;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
@@ -154,7 +153,7 @@ public void arbiter(LL_Result r) {
      * iteration could happen at the same time a new meter is being registered, thus added
      * to the preFilterIdToMeterMap, modifying it while iterating over its KeySet.
      */
-    @Issue("gh-5489")
+    // @Issue("gh-5489")
     @JCStressTest
     @Outcome(id = "OK", expect = Expect.ACCEPTABLE, desc = "No exception")
     @Outcome(expect = Expect.FORBIDDEN, desc = "Exception thrown")

File: micrometer-observation/src/main/java/io/micrometer/observation/Observation.java
Patch:
@@ -21,7 +21,6 @@
 import io.micrometer.common.lang.Nullable;
 import io.micrometer.common.util.internal.logging.InternalLoggerFactory;
 
-import java.util.LinkedHashMap;
 import java.util.Map;
 import java.util.concurrent.Callable;
 import java.util.concurrent.ConcurrentHashMap;
@@ -925,9 +924,9 @@ class Context implements ContextView {
         @Nullable
         private ObservationView parentObservation;
 
-        private final Map<String, KeyValue> lowCardinalityKeyValues = new LinkedHashMap<>();
+        private final Map<String, KeyValue> lowCardinalityKeyValues = new ConcurrentHashMap<>();
 
-        private final Map<String, KeyValue> highCardinalityKeyValues = new LinkedHashMap<>();
+        private final Map<String, KeyValue> highCardinalityKeyValues = new ConcurrentHashMap<>();
 
         /**
          * The observation name.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/grpc/DefaultGrpcServerObservationConvention.java
Patch:
@@ -44,7 +44,7 @@ public KeyValues getLowCardinalityKeyValues(GrpcServerObservationContext context
         String peerPort = context.getPeerPort() != null ? context.getPeerPort().toString() : UNKNOWN;
         return KeyValues.of(LowCardinalityKeyNames.STATUS_CODE.withValue(statusCode),
                 LowCardinalityKeyNames.PEER_NAME.withValue(peerName),
-                LowCardinalityKeyNames.PEER_PORT.withValue(peerPort)
+                LowCardinalityKeyNames.PEER_PORT.withValue(peerPort),
                 LowCardinalityKeyNames.METHOD.withValue(context.getMethodName()),
                 LowCardinalityKeyNames.SERVICE.withValue(context.getServiceName()),
                 LowCardinalityKeyNames.METHOD_TYPE.withValue(context.getMethodType().name()));

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/kafka/KafkaMetrics.java
Patch:
@@ -123,12 +123,12 @@ class KafkaMetrics implements MeterBinder, AutoCloseable {
     }
 
     KafkaMetrics(Supplier<Map<MetricName, ? extends Metric>> metricsSupplier, Iterable<Tag> extraTags,
-                 ScheduledExecutorService scheduler) {
+            ScheduledExecutorService scheduler) {
         this(metricsSupplier, extraTags, scheduler, true);
     }
 
     KafkaMetrics(Supplier<Map<MetricName, ? extends Metric>> metricsSupplier, Iterable<Tag> extraTags,
-                 ScheduledExecutorService scheduler, boolean schedulerExternallyManaged) {
+            ScheduledExecutorService scheduler, boolean schedulerExternallyManaged) {
         this.metricsSupplier = metricsSupplier;
         this.extraTags = extraTags;
         this.scheduler = scheduler;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/grpc/GrpcClientObservationConvention.java
Patch:
@@ -26,6 +26,8 @@
  */
 public interface GrpcClientObservationConvention extends ObservationConvention<GrpcClientObservationContext> {
 
+    String UNKNOWN = "UNKNOWN";
+
     @Override
     default boolean supportsContext(Context context) {
         return context instanceof GrpcClientObservationContext;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/grpc/GrpcServerObservationConvention.java
Patch:
@@ -26,6 +26,8 @@
  */
 public interface GrpcServerObservationConvention extends ObservationConvention<GrpcServerObservationContext> {
 
+    String UNKNOWN = "UNKNOWN";
+
     @Override
     default boolean supportsContext(Context context) {
         return context instanceof GrpcServerObservationContext;

File: implementations/micrometer-registry-signalfx/src/main/java/io/micrometer/signalfx/SignalFxNamingConvention.java
Patch:
@@ -74,7 +74,7 @@ public String tagKey(String key) {
         String conventionKey = delegate.tagKey(key);
         conventionKey = PATTERN_TAG_KEY_DENYLISTED_CHARS.matcher(conventionKey).replaceAll("_");
 
-        if (conventionKey.length() < 1) {
+        if (conventionKey.isEmpty()) {
             return conventionKey;
         }
 
@@ -93,7 +93,7 @@ public String tagKey(String key) {
 
         if (i > 0) {
             conventionKey = conventionKey.substring(i);
-            if (conventionKey.length() < 1) {
+            if (conventionKey.isEmpty()) {
                 return conventionKey;
             }
         }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/config/NamingConvention.java
Patch:
@@ -109,7 +109,7 @@ public String tagKey(String key) {
         }
 
         private String capitalize(String name) {
-            if (name.length() == 0 || Character.isUpperCase(name.charAt(0))) {
+            if (name.isEmpty() || Character.isUpperCase(name.charAt(0))) {
                 return name;
             }
 

File: micrometer-jakarta9/src/main/java/io/micrometer/jakarta9/instrument/jms/DefaultJmsProcessObservationConvention.java
Patch:
@@ -18,7 +18,6 @@
 
 import io.micrometer.common.KeyValue;
 import io.micrometer.common.KeyValues;
-import jakarta.jms.*;
 
 import io.micrometer.jakarta9.instrument.jms.JmsObservationDocumentation.*;
 

File: micrometer-jakarta9/src/main/java/io/micrometer/jakarta9/instrument/jms/DefaultJmsPublishObservationConvention.java
Patch:
@@ -18,7 +18,6 @@
 
 import io.micrometer.common.KeyValue;
 import io.micrometer.common.KeyValues;
-import jakarta.jms.*;
 
 import io.micrometer.jakarta9.instrument.jms.JmsObservationDocumentation.*;
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Gauge.java
Patch:
@@ -53,7 +53,7 @@ static <T> Builder<T> builder(String name, @Nullable T obj, ToDoubleFunction<T>
      * @since 1.1.0
      */
     @Incubating(since = "1.1.0")
-    static Builder<Supplier<Number>> builder(String name, Supplier<Number> f) {
+    static <T extends Number> Builder<Supplier<T>> builder(String name, Supplier<T> f) {
         return new Builder<>(name, f, f2 -> {
             Number val = f2.get();
             return val == null ? Double.NaN : val.doubleValue();

File: micrometer-core/src/main/java/io/micrometer/core/instrument/MultiGauge.java
Patch:
@@ -112,7 +112,7 @@ public static Row<Number> of(Tags uniqueTags, Number number) {
             return new Row<>(uniqueTags, number, Number::doubleValue);
         }
 
-        public static Row<Supplier<Number>> of(Tags uniqueTags, Supplier<Number> valueFunction) {
+        public static <T extends Number> Row<Supplier<T>> of(Tags uniqueTags, Supplier<T> valueFunction) {
             return new Row<>(uniqueTags, valueFunction, f -> {
                 Number value = valueFunction.get();
                 return value == null ? Double.NaN : value.doubleValue();

File: micrometer-core/src/main/java/io/micrometer/core/instrument/TimeGauge.java
Patch:
@@ -46,7 +46,7 @@ static <T> Builder<T> builder(String name, @Nullable T obj, TimeUnit fUnits, ToD
      * @since 1.7.0
      */
     @Incubating(since = "1.7.0")
-    static Builder<Supplier<Number>> builder(String name, Supplier<Number> f, TimeUnit fUnits) {
+    static <T extends Number> Builder<Supplier<T>> builder(String name, Supplier<T> f, TimeUnit fUnits) {
         return new Builder<>(name, f, fUnits, f2 -> {
             Number val = f2.get();
             return val == null ? Double.NaN : val.doubleValue();

File: implementations/micrometer-registry-prometheus/src/test/java/io/micrometer/prometheusmetrics/PrometheusNamingConventionTest.java
Patch:
@@ -30,7 +30,7 @@ class PrometheusNamingConventionTest {
 
     @Test
     void formatName() {
-        assertThat(convention.name("123abc/{:id}水", Meter.Type.GAUGE)).startsWith("_23abc__:id__");
+        assertThat(convention.name("123abc/{:id}水", Meter.Type.GAUGE)).startsWith("_23abc___id__");
     }
 
     @Test

File: samples/micrometer-samples-spring-framework6/src/test/java/io/micrometer/samples/spring6/aop/HighCardinality.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.observation.aop;
+package io.micrometer.samples.spring6.aop;
 
 import io.micrometer.common.annotation.NoOpValueResolver;
 import io.micrometer.common.annotation.ValueResolver;

File: samples/micrometer-samples-spring-framework6/src/test/java/io/micrometer/samples/spring6/aop/HighCardinalityAnnotationHandler.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.observation.aop;
+package io.micrometer.samples.spring6.aop;
 
 import io.micrometer.common.KeyValue;
 import io.micrometer.common.annotation.AnnotationHandler;

File: samples/micrometer-samples-spring-framework6/src/test/java/io/micrometer/samples/spring6/aop/SpelValueExpressionResolver.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.core.aop;
+package io.micrometer.samples.spring6.aop;
 
 import io.micrometer.common.annotation.ValueExpressionResolver;
 import io.micrometer.common.util.internal.logging.InternalLogger;
@@ -23,7 +23,7 @@
 import org.springframework.expression.spel.standard.SpelExpressionParser;
 import org.springframework.expression.spel.support.SimpleEvaluationContext;
 
-class SpelValueExpressionResolver implements ValueExpressionResolver {
+public class SpelValueExpressionResolver implements ValueExpressionResolver {
 
     private static final InternalLogger log = InternalLoggerFactory.getInstance(SpelValueExpressionResolver.class);
 

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/httpcomponents/hc5/DefaultApacheHttpClientObservationConventionTest.java
Patch:
@@ -159,8 +159,7 @@ void shouldContributeTargetWhenAvailable() throws Exception {
         SimpleHttpRequest request = SimpleRequestBuilder.get("https://example.org/resource").build();
         HttpClientContext clientContext = HttpClientContext.create();
         ApacheHttpClientContext context = new ApacheHttpClientContext(request, clientContext);
-        clientContext.setAttribute(HttpClientContext.HTTP_ROUTE,
-                new HttpRoute(HttpHost.create("https://example.org:80")));
+        clientContext.setRoute(new HttpRoute(HttpHost.create("https://example.org:80")));
         assertThat(observationConvention.getLowCardinalityKeyValues(context)).contains(
                 TARGET_HOST.withValue("example.org"), TARGET_PORT.withValue("80"), TARGET_SCHEME.withValue("https"));
     }

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/httpcomponents/hc5/MicrometerHttpRequestExecutorTest.java
Patch:
@@ -37,6 +37,7 @@
 import org.apache.hc.core5.http.io.HttpClientResponseHandler;
 import org.apache.hc.core5.http.io.entity.EntityUtils;
 import org.apache.hc.core5.util.Timeout;
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
 import org.junit.jupiter.params.ParameterizedTest;
@@ -181,6 +182,7 @@ void routeTaggedIfEnabled(boolean configureObservationRegistry, @WiremockResolve
     }
 
     @Test
+    @Disabled("brittle test using reflection to check internals of third-party code")
     void waitForContinueGetsPassedToSuper() {
         MicrometerHttpRequestExecutor requestExecutor = MicrometerHttpRequestExecutor.builder(registry)
             .waitForContinue(Timeout.ofMilliseconds(1000))

File: micrometer-core/src/test/java/io/micrometer/core/instrument/distribution/StepBucketHistogramTest.java
Patch:
@@ -23,7 +23,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-class StepHistogramTest {
+class StepBucketHistogramTest {
 
     MockClock clock = new MockClock();
 

File: micrometer-commons/src/main/java/io/micrometer/common/lang/Nullable.java
Patch:
@@ -16,9 +16,8 @@
  */
 package io.micrometer.common.lang;
 
-import javax.annotation.Nonnull;
+import javax.annotation.CheckForNull;
 import javax.annotation.meta.TypeQualifierNickname;
-import javax.annotation.meta.When;
 import java.lang.annotation.*;
 
 /**
@@ -43,7 +42,7 @@
 @Target({ ElementType.METHOD, ElementType.PARAMETER, ElementType.FIELD })
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
-@Nonnull(when = When.MAYBE)
+@CheckForNull
 @TypeQualifierNickname
 public @interface Nullable {
 

File: implementations/micrometer-registry-elastic/src/main/java/io/micrometer/elastic/DefaultIndexTemplateCreator.java
Patch:
@@ -34,7 +34,7 @@ class DefaultIndexTemplateCreator implements IndexTemplateCreator {
     private final Logger logger = LoggerFactory.getLogger(DefaultIndexTemplateCreator.class);
 
     private final String indexTemplateRequest = "{\n" + "  \"index_patterns\": [\"%s*\"],\n" + "  \"template\": {\n"
-            + "    \"mappings\": {\n" + "      \"_source\": {\n" + "        \"enabled\": false\n" + "      },\n"
+            + "    \"mappings\": {\n" + "      \"_source\": {\n" + "        \"enabled\": %b\n" + "      },\n"
             + "      \"properties\": {\n" + "        \"name\": { \"type\": \"keyword\" },\n"
             + "        \"count\": { \"type\": \"double\", \"index\": false },\n"
             + "        \"value\": { \"type\": \"double\", \"index\": false },\n"
@@ -81,9 +81,10 @@ public IndexTemplateStatus fetchIndexTemplateStatus(ElasticConfig configuration)
     @Override
     public void createIndexTemplate(ElasticConfig configuration) throws Throwable {
         String indexPattern = configuration.index() + configuration.indexDateSeparator();
+        boolean enableSource = configuration.enableSource();
         HttpSender.Request.Builder request = this.httpClient.put(configuration.host() + INDEX_TEMPLATE_PATH);
         configureAuthentication(configuration, request);
-        request.withJsonContent(String.format(indexTemplateRequest, indexPattern))
+        request.withJsonContent(String.format(indexTemplateRequest, indexPattern, enableSource))
             .send()
             .onError(response -> logger.error("Failed to create index template in Elastic: {}", response.body()));
     }

File: implementations/micrometer-registry-elastic/src/main/java/io/micrometer/elastic/ElasticMeterRegistry.java
Patch:
@@ -153,6 +153,9 @@ private void createIndexTemplateIfNeeded() {
         if (this.checkedForIndexTemplate || !this.config.autoCreateIndex()) {
             return;
         }
+        if (config.enableSource()) {
+            logger.warn("'_source' field is enabled. Disable '_source' field to save space and reduce I/O.");
+        }
         attemptIndexTemplateCreation(new DefaultIndexTemplateCreator(this.httpClient));
         if (!this.checkedForIndexTemplate) {
             logger.debug("Attempt to create index template using legacy /_template/ endpoint");

File: implementations/micrometer-registry-elastic/src/main/java/io/micrometer/elastic/LegacyIndexTemplateCreator.java
Patch:
@@ -34,7 +34,7 @@ class LegacyIndexTemplateCreator implements IndexTemplateCreator {
     private final Logger logger = LoggerFactory.getLogger(LegacyIndexTemplateCreator.class);
 
     private final String indexTemplateRequest = "{\n" + "  \"index_patterns\": [\"%s*\"],\n" + "  \"mappings\": {\n"
-            + "    \"_source\": {\n" + "      \"enabled\": false\n" + "    },\n" + "    \"properties\": {\n"
+            + "    \"_source\": {\n" + "      \"enabled\": %b\n" + "    },\n" + "    \"properties\": {\n"
             + "      \"name\": { \"type\": \"keyword\" },\n"
             + "      \"count\": { \"type\": \"double\", \"index\": false },\n"
             + "      \"value\": { \"type\": \"double\", \"index\": false },\n"
@@ -80,9 +80,10 @@ public IndexTemplateStatus fetchIndexTemplateStatus(ElasticConfig configuration)
     @Override
     public void createIndexTemplate(ElasticConfig configuration) throws Throwable {
         String indexPattern = configuration.index() + configuration.indexDateSeparator();
+        boolean enableSource = configuration.enableSource();
         HttpSender.Request.Builder request = this.httpClient.put(configuration.host() + INDEX_TEMPLATE_PATH);
         configureAuthentication(configuration, request);
-        request.withJsonContent(String.format(indexTemplateRequest, indexPattern))
+        request.withJsonContent(String.format(indexTemplateRequest, indexPattern, enableSource))
             .send()
             .onError(response -> logger.error("Failed to create index template in Elastic: {}", response.body()));
     }

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/jetty/JettyClientMetricsTest.java
Patch:
@@ -38,7 +38,7 @@
 import static java.util.concurrent.TimeUnit.SECONDS;
 import static org.assertj.core.api.Assertions.assertThat;
 
-public class JettyClientMetricsTest {
+class JettyClientMetricsTest {
 
     private SimpleMeterRegistry registry = new SimpleMeterRegistry(SimpleConfig.DEFAULT, new MockClock());
 

File: docs/src/test/java/io/micrometer/docs/netty/NettyMetricsTests.java
Patch:
@@ -45,7 +45,7 @@
 /**
  * Sources for netty/index.adoc
  */
-public class NettyMetricsTests {
+class NettyMetricsTests {
 
     private SimpleMeterRegistry registry = new SimpleMeterRegistry(SimpleConfig.DEFAULT, new MockClock());
 

File: micrometer-observation/src/main/java/io/micrometer/observation/Observations.java
Patch:
@@ -36,7 +36,6 @@ public final class Observations {
             initialRegistry);
 
     private Observations() {
-        throw new UnsupportedOperationException("You can't instantiate a utility class");
     }
 
     /**

File: micrometer-observation-test/src/main/java/io/micrometer/observation/tck/TestObservationRegistry.java
Patch:
@@ -38,7 +38,7 @@ public final class TestObservationRegistry implements ObservationRegistry {
     private final StoringObservationHandler handler = new StoringObservationHandler();
 
     private TestObservationRegistry() {
-        observationConfig().observationHandler(this.handler);
+        observationConfig().observationHandler(this.handler).observationHandler(new ObservationValidator());
     }
 
     /**

File: micrometer-core/src/main/java/io/micrometer/core/instrument/MeterRegistry.java
Patch:
@@ -844,7 +844,7 @@ private void logWarningAboutLateFilter() {
                 String stackTrace = Arrays.stream(Thread.currentThread().getStackTrace())
                     .map(StackTraceElement::toString)
                     .collect(Collectors.joining("\n\tat "));
-                logger.debug(baseMessage + "\n" + stackTrace);
+                logger.warn(baseMessage + "\n" + stackTrace);
             }
             else {
                 logger.warn(baseMessage

File: micrometer-core/src/test/java/io/micrometer/core/instrument/MeterRegistryLoggingTest.java
Patch:
@@ -56,8 +56,7 @@ void meterRegistrationBeforeMeterFilterConfigWithDebugLogging(LoggingEvents logE
         try {
             registerMetricsAndConfigure();
 
-            assertThat(logEvents.withLevel(Level.WARN)).isEmpty();
-            assertThat(logEvents.withLevel(Level.DEBUG)).singleElement()
+            assertThat(logEvents.withLevel(Level.WARN)).singleElement()
                 .extracting(ILoggingEvent::getFormattedMessage, as(InstanceOfAssertFactories.STRING))
                 .contains("A MeterFilter is being configured after a Meter has been registered to this registry.")
                 .containsPattern(

File: micrometer-core/src/main/java/io/micrometer/core/aop/CountedAspect.java
Patch:
@@ -167,7 +167,7 @@ public CountedAspect(MeterRegistry registry, Function<ProceedingJoinPoint, Itera
         this.shouldSkip = shouldSkip;
     }
 
-    @Around("@within(io.micrometer.core.annotation.Counted) && !@annotation(io.micrometer.core.annotation.Counted)")
+    @Around("@within(io.micrometer.core.annotation.Counted) and not @annotation(io.micrometer.core.annotation.Counted)")
     @Nullable
     public Object countedClass(ProceedingJoinPoint pjp) throws Throwable {
         if (shouldSkip.test(pjp)) {

File: micrometer-core/src/main/java/io/micrometer/core/aop/TimedAspect.java
Patch:
@@ -161,7 +161,7 @@ public TimedAspect(MeterRegistry registry, Function<ProceedingJoinPoint, Iterabl
         this.shouldSkip = shouldSkip;
     }
 
-    @Around("@within(io.micrometer.core.annotation.Timed) && !@annotation(io.micrometer.core.annotation.Timed)")
+    @Around("@within(io.micrometer.core.annotation.Timed) and not @annotation(io.micrometer.core.annotation.Timed)")
     @Nullable
     public Object timedClass(ProceedingJoinPoint pjp) throws Throwable {
         if (shouldSkip.test(pjp)) {

File: micrometer-observation/src/main/java/io/micrometer/observation/aop/ObservedAspect.java
Patch:
@@ -105,7 +105,7 @@ public ObservedAspect(ObservationRegistry registry,
         this.shouldSkip = shouldSkip;
     }
 
-    @Around("@within(io.micrometer.observation.annotation.Observed) && !@annotation(io.micrometer.observation.annotation.Observed)")
+    @Around("@within(io.micrometer.observation.annotation.Observed) and not @annotation(io.micrometer.observation.annotation.Observed)")
     @Nullable
     public Object observeClass(ProceedingJoinPoint pjp) throws Throwable {
         if (shouldSkip.test(pjp)) {

File: micrometer-core/src/main/java/io/micrometer/core/aop/CountedAspect.java
Patch:
@@ -167,7 +167,7 @@ public CountedAspect(MeterRegistry registry, Function<ProceedingJoinPoint, Itera
         this.shouldSkip = shouldSkip;
     }
 
-    @Around("@within(io.micrometer.core.annotation.Counted) and not @annotation(io.micrometer.core.annotation.Counted)")
+    @Around("@within(io.micrometer.core.annotation.Counted) && !@annotation(io.micrometer.core.annotation.Counted)")
     @Nullable
     public Object countedClass(ProceedingJoinPoint pjp) throws Throwable {
         if (shouldSkip.test(pjp)) {

File: micrometer-core/src/main/java/io/micrometer/core/aop/TimedAspect.java
Patch:
@@ -161,7 +161,7 @@ public TimedAspect(MeterRegistry registry, Function<ProceedingJoinPoint, Iterabl
         this.shouldSkip = shouldSkip;
     }
 
-    @Around("@within(io.micrometer.core.annotation.Timed) and not @annotation(io.micrometer.core.annotation.Timed)")
+    @Around("@within(io.micrometer.core.annotation.Timed) && !@annotation(io.micrometer.core.annotation.Timed)")
     @Nullable
     public Object timedClass(ProceedingJoinPoint pjp) throws Throwable {
         if (shouldSkip.test(pjp)) {

File: micrometer-observation/src/main/java/io/micrometer/observation/aop/ObservedAspect.java
Patch:
@@ -105,7 +105,7 @@ public ObservedAspect(ObservationRegistry registry,
         this.shouldSkip = shouldSkip;
     }
 
-    @Around("@within(io.micrometer.observation.annotation.Observed) and not @annotation(io.micrometer.observation.annotation.Observed)")
+    @Around("@within(io.micrometer.observation.annotation.Observed) && !@annotation(io.micrometer.observation.annotation.Observed)")
     @Nullable
     public Object observeClass(ProceedingJoinPoint pjp) throws Throwable {
         if (shouldSkip.test(pjp)) {

File: implementations/micrometer-registry-otlp/src/main/java/io/micrometer/registry/otlp/OtlpMeterRegistry.java
Patch:
@@ -238,9 +238,10 @@ Metric writeHistogramSupport(HistogramSupport histogramSupport) {
                 .setSum(total)
                 .setCount(count);
             for (ValueAtPercentile percentile : histogramSnapshot.percentileValues()) {
+                double value = percentile.value();
                 summaryData.addQuantileValues(SummaryDataPoint.ValueAtQuantile.newBuilder()
                     .setQuantile(percentile.percentile())
-                    .setValue(TimeUtils.convert(percentile.value(), TimeUnit.NANOSECONDS, getBaseTimeUnit())));
+                    .setValue(isTimeBased ? TimeUtils.convert(value, TimeUnit.NANOSECONDS, getBaseTimeUnit()) : value));
             }
             metricBuilder.setSummary(Summary.newBuilder().addDataPoints(summaryData));
             return metricBuilder.build();

File: implementations/micrometer-registry-otlp/src/main/java/io/micrometer/registry/otlp/OtlpMeterRegistry.java
Patch:
@@ -298,7 +298,7 @@ private Metric.Builder getMetricBuilder(Meter.Id id) {
     }
 
     private Iterable<? extends KeyValue> getTagsForId(Meter.Id id) {
-        return id.getTags()
+        return id.getConventionTags(config().namingConvention())
             .stream()
             .map(tag -> createKeyValue(tag.getKey(), tag.getValue()))
             .collect(Collectors.toList());

File: micrometer-core/src/main/java/io/micrometer/core/aop/CountedAspect.java
Patch:
@@ -167,7 +167,7 @@ public CountedAspect(MeterRegistry registry, Function<ProceedingJoinPoint, Itera
         this.shouldSkip = shouldSkip;
     }
 
-    @Around("@within(io.micrometer.core.annotation.Counted) and not @annotation(io.micrometer.core.annotation.Counted)")
+    @Around("@within(io.micrometer.core.annotation.Counted) && !@annotation(io.micrometer.core.annotation.Counted) && execution(* *(..))")
     @Nullable
     public Object countedClass(ProceedingJoinPoint pjp) throws Throwable {
         if (shouldSkip.test(pjp)) {
@@ -202,7 +202,7 @@ public Object countedClass(ProceedingJoinPoint pjp) throws Throwable {
      * @return Whatever the intercepted method returns.
      * @throws Throwable When the intercepted method throws one.
      */
-    @Around(value = "@annotation(counted)", argNames = "pjp,counted")
+    @Around(value = "@annotation(counted) && execution(* *(..))", argNames = "pjp,counted")
     @Nullable
     public Object interceptAndRecord(ProceedingJoinPoint pjp, Counted counted) throws Throwable {
         if (shouldSkip.test(pjp)) {

File: micrometer-core/src/main/java/io/micrometer/core/aop/TimedAspect.java
Patch:
@@ -161,7 +161,7 @@ public TimedAspect(MeterRegistry registry, Function<ProceedingJoinPoint, Iterabl
         this.shouldSkip = shouldSkip;
     }
 
-    @Around("@within(io.micrometer.core.annotation.Timed) and not @annotation(io.micrometer.core.annotation.Timed)")
+    @Around("@within(io.micrometer.core.annotation.Timed) && !@annotation(io.micrometer.core.annotation.Timed) && execution(* *(..))")
     @Nullable
     public Object timedClass(ProceedingJoinPoint pjp) throws Throwable {
         if (shouldSkip.test(pjp)) {

File: micrometer-observation/src/test/java/io/micrometer/observation/aop/ObservedAspectTests.java
Patch:
@@ -364,7 +364,8 @@ void skipPredicateShouldTakeEffectForClass() {
     void ignoreClassLevelAnnotationIfMethodLevelPresent() {
         registry.observationConfig().observationHandler(new ObservationTextPublisher());
 
-        AspectJProxyFactory pf = new AspectJProxyFactory(new ObservedClassLevelAnnotatedService());
+        ObservedClassLevelAnnotatedService annotatedService = new ObservedClassLevelAnnotatedService();
+        AspectJProxyFactory pf = new AspectJProxyFactory(annotatedService);
         pf.addAspect(new ObservedAspect(registry));
 
         ObservedClassLevelAnnotatedService service = pf.getProxy();

File: implementations/micrometer-registry-otlp/src/main/java/io/micrometer/registry/otlp/OtlpMeterRegistry.java
Patch:
@@ -172,7 +172,8 @@ protected void publish() {
                 }
             }
             catch (Throwable e) {
-                logger.warn("Failed to publish metrics to OTLP receiver (context: {})", getConfigurationContext(), e);
+                logger.warn(String.format("Failed to publish metrics to OTLP receiver (context: %s)",
+                        getConfigurationContext()), e);
             }
         }
     }

File: micrometer-core/src/main/java/io/micrometer/core/lang/NonNullFields.java
Patch:
@@ -36,7 +36,7 @@
  * @see io.micrometer.common.lang.NonNullFields
  * @see io.micrometer.common.lang.Nullable
  * @see io.micrometer.common.lang.NonNull
- * @deprecated Please use {@link io.micrometer.common.lang.NonNullApi} instead.
+ * @deprecated Please use {@link io.micrometer.common.lang.NonNullFields} instead.
  */
 @Target({ ElementType.PACKAGE, ElementType.TYPE })
 @Retention(RetentionPolicy.RUNTIME)

File: micrometer-core/src/main/java/io/micrometer/core/lang/Nullable.java
Patch:
@@ -39,7 +39,7 @@
  * @see io.micrometer.common.lang.NonNullApi
  * @see io.micrometer.common.lang.NonNullFields
  * @see io.micrometer.common.lang.NonNull
- * @deprecated Please use {@link io.micrometer.common.lang.NonNullApi} instead.
+ * @deprecated Please use {@link io.micrometer.common.lang.Nullable} instead.
  */
 @Target({ ElementType.METHOD, ElementType.PARAMETER, ElementType.FIELD })
 @Retention(RetentionPolicy.RUNTIME)

File: micrometer-core/src/main/java/io/micrometer/core/aop/CountedAspect.java
Patch:
@@ -167,7 +167,7 @@ public CountedAspect(MeterRegistry registry, Function<ProceedingJoinPoint, Itera
         this.shouldSkip = shouldSkip;
     }
 
-    @Around("@within(io.micrometer.core.annotation.Counted) && !@annotation(io.micrometer.core.annotation.Counted)")
+    @Around("@within(io.micrometer.core.annotation.Counted) and not @annotation(io.micrometer.core.annotation.Counted)")
     @Nullable
     public Object countedClass(ProceedingJoinPoint pjp) throws Throwable {
         if (shouldSkip.test(pjp)) {

File: micrometer-core/src/main/java/io/micrometer/core/aop/TimedAspect.java
Patch:
@@ -161,7 +161,7 @@ public TimedAspect(MeterRegistry registry, Function<ProceedingJoinPoint, Iterabl
         this.shouldSkip = shouldSkip;
     }
 
-    @Around("@within(io.micrometer.core.annotation.Timed) && !@annotation(io.micrometer.core.annotation.Timed)")
+    @Around("@within(io.micrometer.core.annotation.Timed) and not @annotation(io.micrometer.core.annotation.Timed)")
     @Nullable
     public Object timedClass(ProceedingJoinPoint pjp) throws Throwable {
         if (shouldSkip.test(pjp)) {

File: micrometer-observation/src/main/java/io/micrometer/observation/aop/ObservedAspect.java
Patch:
@@ -105,7 +105,7 @@ public ObservedAspect(ObservationRegistry registry,
         this.shouldSkip = shouldSkip;
     }
 
-    @Around("@within(io.micrometer.observation.annotation.Observed) && !@annotation(io.micrometer.observation.annotation.Observed)")
+    @Around("@within(io.micrometer.observation.annotation.Observed) and not @annotation(io.micrometer.observation.annotation.Observed)")
     @Nullable
     public Object observeClass(ProceedingJoinPoint pjp) throws Throwable {
         if (shouldSkip.test(pjp)) {

File: micrometer-core/src/main/java/io/micrometer/core/aop/CountedAspect.java
Patch:
@@ -167,7 +167,7 @@ public CountedAspect(MeterRegistry registry, Function<ProceedingJoinPoint, Itera
         this.shouldSkip = shouldSkip;
     }
 
-    @Around("@within(io.micrometer.core.annotation.Counted) and not @annotation(io.micrometer.core.annotation.Counted)")
+    @Around("@within(io.micrometer.core.annotation.Counted) && !@annotation(io.micrometer.core.annotation.Counted)")
     @Nullable
     public Object countedClass(ProceedingJoinPoint pjp) throws Throwable {
         if (shouldSkip.test(pjp)) {

File: micrometer-core/src/main/java/io/micrometer/core/aop/TimedAspect.java
Patch:
@@ -161,7 +161,7 @@ public TimedAspect(MeterRegistry registry, Function<ProceedingJoinPoint, Iterabl
         this.shouldSkip = shouldSkip;
     }
 
-    @Around("@within(io.micrometer.core.annotation.Timed) and not @annotation(io.micrometer.core.annotation.Timed)")
+    @Around("@within(io.micrometer.core.annotation.Timed) && !@annotation(io.micrometer.core.annotation.Timed)")
     @Nullable
     public Object timedClass(ProceedingJoinPoint pjp) throws Throwable {
         if (shouldSkip.test(pjp)) {

File: micrometer-observation/src/main/java/io/micrometer/observation/aop/ObservedAspect.java
Patch:
@@ -105,7 +105,7 @@ public ObservedAspect(ObservationRegistry registry,
         this.shouldSkip = shouldSkip;
     }
 
-    @Around("@within(io.micrometer.observation.annotation.Observed) and not @annotation(io.micrometer.observation.annotation.Observed)")
+    @Around("@within(io.micrometer.observation.annotation.Observed) && !@annotation(io.micrometer.observation.annotation.Observed)")
     @Nullable
     public Object observeClass(ProceedingJoinPoint pjp) throws Throwable {
         if (shouldSkip.test(pjp)) {

File: implementations/micrometer-registry-otlp/src/main/java/io/micrometer/registry/otlp/OtlpMeterRegistry.java
Patch:
@@ -309,7 +309,7 @@ Metric writeGauge(Gauge gauge) {
         return getMetricBuilder(gauge.getId())
             .setGauge(io.opentelemetry.proto.metrics.v1.Gauge.newBuilder()
                 .addDataPoints(NumberDataPoint.newBuilder()
-                    .setTimeUnixNano(getTimeUnixNano())
+                    .setTimeUnixNano(TimeUnit.MILLISECONDS.toNanos(clock.wallTime()))
                     .setAsDouble(gauge.value())
                     .addAllAttributes(getTagsForId(gauge.getId()))
                     .build()))

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheusmetrics/PrometheusMeterRegistry.java
Patch:
@@ -556,8 +556,9 @@ private MetricMetadata getMetadata(Meter.Id id) {
     private MetricMetadata getMetadata(Meter.Id id, String suffix) {
         String name = config().namingConvention().name(id.getName(), id.getType(), id.getBaseUnit()) + suffix;
         String help = prometheusConfig.descriptions() ? Optional.ofNullable(id.getDescription()).orElse(" ") : " ";
-        Unit unit = id.getBaseUnit() != null ? new Unit(id.getBaseUnit()) : null;
-        return new MetricMetadata(name, help, unit);
+        // Unit is intentionally not set, see:
+        // https://github.com/OpenObservability/OpenMetrics/blob/1386544931307dff279688f332890c31b6c5de36/specification/OpenMetrics.md#unit
+        return new MetricMetadata(name, help, null);
     }
 
     private void applyToCollector(Meter.Id id, Consumer<MicrometerCollector> consumer) {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/MeterRegistry.java
Patch:
@@ -728,7 +728,9 @@ public Meter remove(Meter meter) {
     @Nullable
     public Meter removeByPreFilterId(Meter.Id preFilterId) {
         final Meter meterToRemove = preFilterIdToMeterMap.get(preFilterId);
-        return meterToRemove == null ? null : remove(meterToRemove);
+        if (meterToRemove == null)
+            return remove(getMappedId(preFilterId));
+        return remove(meterToRemove);
     }
 
     /**

File: micrometer-commons/src/main/java/io/micrometer/common/annotation/AnnotationHandler.java
Patch:
@@ -89,7 +89,6 @@ public AnnotationHandler(BiConsumer<KeyValue, T> keyValueConsumer,
     public void addAnnotatedParameters(T objectToModify, ProceedingJoinPoint pjp) {
         try {
             Method method = ((MethodSignature) pjp.getSignature()).getMethod();
-            method = pjp.getTarget().getClass().getDeclaredMethod(method.getName(), method.getParameterTypes());
             List<AnnotatedParameter> annotatedParameters = AnnotationUtils.findAnnotatedParameters(annotationClass,
                     method, pjp.getArgs());
             getAnnotationsFromInterfaces(pjp, method, annotatedParameters);

File: micrometer-jetty12/src/test/java/io/micrometer/jetty12/JettyConnectionMetricsTest.java
Patch:
@@ -30,7 +30,6 @@
 import org.eclipse.jetty.server.Connector;
 import org.eclipse.jetty.server.NetworkTrafficServerConnector;
 import org.eclipse.jetty.server.Server;
-import org.eclipse.jetty.server.ServerConnector;
 import org.eclipse.jetty.util.component.LifeCycle;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Test;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/httpcomponents/PoolingHttpClientConnectionManagerMetricsBinder.java
Patch:
@@ -43,7 +43,10 @@
  *
  * @author Benjamin Hubert (benjamin.hubert@willhaben.at)
  * @since 1.3.0
+ * @deprecated as of 1.12.5 in favor of HttpComponents 5.x and
+ * {@link io.micrometer.core.instrument.binder.httpcomponents.hc5.PoolingHttpClientConnectionManagerMetricsBinder}.
  */
+@Deprecated
 public class PoolingHttpClientConnectionManagerMetricsBinder implements MeterBinder {
 
     private final ConnPoolControl<HttpRoute> connPoolControl;

File: benchmarks/benchmarks-core/src/jmh/java/io/micrometer/benchmark/core/CounterBenchmark.java
Patch:
@@ -17,8 +17,8 @@
 
 import io.micrometer.core.instrument.Counter;
 import io.micrometer.core.instrument.MeterRegistry;
-import io.micrometer.prometheus.PrometheusConfig;
-import io.micrometer.prometheus.PrometheusMeterRegistry;
+import io.micrometer.prometheusmetrics.PrometheusConfig;
+import io.micrometer.prometheusmetrics.PrometheusMeterRegistry;
 import org.openjdk.jmh.annotations.*;
 import org.openjdk.jmh.runner.Runner;
 import org.openjdk.jmh.runner.RunnerException;

File: benchmarks/benchmarks-core/src/jmh/java/io/micrometer/benchmark/core/TimerBenchmark.java
Patch:
@@ -17,8 +17,8 @@
 
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.Timer;
-import io.micrometer.prometheus.PrometheusConfig;
-import io.micrometer.prometheus.PrometheusMeterRegistry;
+import io.micrometer.prometheusmetrics.PrometheusConfig;
+import io.micrometer.prometheusmetrics.PrometheusMeterRegistry;
 import org.openjdk.jmh.annotations.*;
 import org.openjdk.jmh.runner.Runner;
 import org.openjdk.jmh.runner.RunnerException;

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheusmetrics/PrometheusDurationNamingConvention.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.prometheus;
+package io.micrometer.prometheusmetrics;
 
 public class PrometheusDurationNamingConvention extends PrometheusNamingConvention {
 

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheusmetrics/PrometheusRenameFilter.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.prometheus;
+package io.micrometer.prometheusmetrics;
 
 import io.micrometer.core.instrument.Meter;
 import io.micrometer.core.instrument.config.MeterFilter;

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheusmetrics/package-info.java
Patch:
@@ -15,7 +15,7 @@
  */
 @NonNullApi
 @NonNullFields
-package io.micrometer.prometheus;
+package io.micrometer.prometheusmetrics;
 
 import io.micrometer.common.lang.NonNullApi;
 import io.micrometer.common.lang.NonNullFields;

File: implementations/micrometer-registry-prometheus/src/test/java/io/micrometer/prometheusmetrics/PrometheusDurationNamingConventionTest.java
Patch:
@@ -13,9 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.prometheus;
+package io.micrometer.prometheusmetrics;
 
 import io.micrometer.core.instrument.Meter;
+import io.micrometer.prometheusmetrics.PrometheusDurationNamingConvention;
+import io.micrometer.prometheusmetrics.PrometheusNamingConvention;
 import org.junit.jupiter.api.Test;
 
 import static org.assertj.core.api.Assertions.assertThat;

File: implementations/micrometer-registry-prometheus/src/test/java/io/micrometer/prometheusmetrics/PrometheusNamingConventionTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.prometheus;
+package io.micrometer.prometheusmetrics;
 
 import io.micrometer.core.instrument.Meter;
 import io.micrometer.core.instrument.binder.BaseUnits;
@@ -56,8 +56,8 @@ void unitsAreAppendedToDistributionSummaries() {
     @Test
     void unitsAreAppendedToCounters() {
         assertThat(convention.name("response.size", Meter.Type.COUNTER, BaseUnits.BYTES))
-            .isEqualTo("response_size_bytes_total");
-        assertThat(convention.name("counter", Meter.Type.COUNTER)).isEqualTo("counter_total");
+            .isEqualTo("response_size_bytes");
+        assertThat(convention.name("counter", Meter.Type.COUNTER)).isEqualTo("counter");
     }
 
     @Test

File: implementations/micrometer-registry-prometheus/src/test/java/io/micrometer/prometheusmetrics/PrometheusRenameFilterTest.java
Patch:
@@ -13,12 +13,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.prometheus;
+package io.micrometer.prometheusmetrics;
 
 import io.micrometer.core.instrument.Gauge;
 import io.micrometer.core.instrument.Meter;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
+import io.micrometer.prometheusmetrics.PrometheusRenameFilter;
 import org.junit.jupiter.api.Test;
 
 import static org.assertj.core.api.Assertions.assertThat;

File: samples/micrometer-samples-core/src/main/java/io/micrometer/core/samples/utils/SampleRegistries.java
Patch:
@@ -50,8 +50,8 @@
 import io.micrometer.kairos.KairosMeterRegistry;
 import io.micrometer.newrelic.NewRelicConfig;
 import io.micrometer.newrelic.NewRelicMeterRegistry;
-import io.micrometer.prometheus.PrometheusConfig;
-import io.micrometer.prometheus.PrometheusMeterRegistry;
+import io.micrometer.prometheusmetrics.PrometheusConfig;
+import io.micrometer.prometheusmetrics.PrometheusMeterRegistry;
 import io.micrometer.signalfx.SignalFxConfig;
 import io.micrometer.signalfx.SignalFxMeterRegistry;
 import io.micrometer.stackdriver.StackdriverConfig;

File: samples/micrometer-samples-javalin/src/main/java/io/micrometer/javalin/samples/PrometheusSample.java
Patch:
@@ -36,7 +36,6 @@
 import io.micrometer.jetty11.TimedHandler;
 import io.micrometer.prometheus.PrometheusConfig;
 import io.micrometer.prometheus.PrometheusMeterRegistry;
-import io.prometheus.client.exporter.common.TextFormat;
 import jakarta.servlet.http.HttpServletRequest;
 import jakarta.servlet.http.HttpServletResponse;
 import org.eclipse.jetty.server.Server;
@@ -89,7 +88,8 @@ public static void main(String[] args) {
             System.out.println("hello");
         });
 
-        app.get("/prometheus", ctx -> ctx.contentType(TextFormat.CONTENT_TYPE_004).result(meterRegistry.scrape()));
+        app.get("/prometheus",
+                ctx -> ctx.contentType("text/plain; version=0.0.4; charset=utf-8").result(meterRegistry.scrape()));
     }
 
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jetty/TimedHandler.java
Patch:
@@ -45,7 +45,8 @@
  *
  * @author Jon Schneider
  * @since 1.4.0
- * @deprecated since 1.13.0 in favor of {@code TimedHandler} in the micrometer-jetty12 module
+ * @deprecated since 1.13.0 in favor of {@code TimedHandler} in the micrometer-jetty12
+ * module
  */
 @NonNullApi
 @NonNullFields

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/jetty/JettyClientMetricsTest.java
Patch:
@@ -70,7 +70,7 @@ public void handle(String target, org.eclipse.jetty.server.Request baseRequest,
         server.start();
 
         httpClient.setFollowRedirects(false);
-        //noinspection deprecation
+        // noinspection deprecation
         httpClient.getRequestListeners()
             .add(JettyClientMetrics.builder(registry, result -> result.getRequest().getURI().getPath()).build());
 

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/jetty/JettyClientMetricsWithObservationTest.java
Patch:
@@ -34,7 +34,7 @@ void beforeEach() throws Exception {
         super.beforeEach();
         observationRegistry.observationConfig().observationHandler(new DefaultMeterObservationHandler(registry));
         this.httpClient.getRequestListeners().removeIf(listener -> true);
-        //noinspection deprecation
+        // noinspection deprecation
         this.httpClient.getRequestListeners()
             .add(JettyClientMetrics.builder(registry, (request, result) -> request.getURI().getPath())
                 .observationRegistry(observationRegistry)

File: micrometer-jetty11/src/main/java/io/micrometer/jetty11/TimedHandler.java
Patch:
@@ -42,7 +42,8 @@
  *
  * @author Jon Schneider
  * @since 1.10.0
- * @deprecated since 1.13.0 in favor of {@code TimedHandler} in the micrometer-jetty12 module
+ * @deprecated since 1.13.0 in favor of {@code TimedHandler} in the micrometer-jetty12
+ * module
  */
 @Deprecated
 public class TimedHandler extends HandlerWrapper implements Graceful {

File: implementations/micrometer-registry-cloudwatch2/src/main/java/io/micrometer/cloudwatch2/CloudWatchMeterRegistry.java
Patch:
@@ -132,8 +132,8 @@ void sendMetricData(List<MetricDatum> metricData) throws InterruptedException {
         try {
             @SuppressWarnings("deprecation")
             long readTimeoutMillis = config.readTimeout().toMillis();
-            boolean success = latch.await(readTimeoutMillis, TimeUnit.MILLISECONDS);
-            if (!success) {
+            boolean awaitSuccess = latch.await(readTimeoutMillis, TimeUnit.MILLISECONDS);
+            if (!awaitSuccess) {
                 logger.warn("metrics push to cloudwatch took longer than expected");
             }
         }

File: implementations/micrometer-registry-cloudwatch2/src/main/java/io/micrometer/cloudwatch2/CloudWatchMeterRegistry.java
Patch:
@@ -127,6 +127,7 @@ void sendMetricData(List<MetricDatum> metricData) throws InterruptedException {
                 else {
                     logger.error("error sending metric data.", t);
                 }
+                logger.debug("failed PutMetricDataRequest: {}", putMetricDataRequest);
             }
             else {
                 logger.debug("published {} metrics with namespace:{}", metricData.size(),

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jvm/JvmHeapPressureMetrics.java
Patch:
@@ -21,7 +21,6 @@
 import io.micrometer.core.instrument.Gauge;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.Tag;
-import io.micrometer.core.instrument.binder.BaseUnits;
 import io.micrometer.core.instrument.binder.MeterBinder;
 import io.micrometer.core.instrument.distribution.TimeWindowSum;
 
@@ -92,7 +91,6 @@ public void bindTo(@NonNull MeterRegistry registry) {
                 .tag("area", "heap")
                 .tag("pool", "long-lived")
                 .description("The percentage of long-lived heap pool used after the last GC event, in the range [0..1]")
-                .baseUnit(BaseUnits.PERCENT)
                 .register(registry);
         }
 
@@ -103,7 +101,6 @@ public void bindTo(@NonNull MeterRegistry registry) {
             .tags(tags)
             .description(
                     "An approximation of the percent of CPU time used by GC activities over the last lookback period or since monitoring began, whichever is shorter, in the range [0..1]")
-            .baseUnit(BaseUnits.PERCENT)
             .register(registry);
     }
 

File: micrometer-core/src/main/java11/io/micrometer/core/instrument/binder/jdk/DefaultHttpClientObservationConvention.java
Patch:
@@ -35,7 +35,7 @@ public class DefaultHttpClientObservationConvention implements HttpClientObserva
     /**
      * Instance of this {@link DefaultHttpClientObservationConvention}.
      */
-    public static DefaultHttpClientObservationConvention INSTANCE = new DefaultHttpClientObservationConvention();
+    public static final DefaultHttpClientObservationConvention INSTANCE = new DefaultHttpClientObservationConvention();
 
     @Override
     public KeyValues getLowCardinalityKeyValues(HttpClientContext context) {

File: micrometer-core/src/main/java11/io/micrometer/core/instrument/binder/jdk/DefaultHttpClientObservationConvention.java
Patch:
@@ -29,7 +29,9 @@
  *
  * @author Marcin Grzejszczak
  * @since 1.10.0
+ * @deprecated since 1.13.0 use the same class in the micrometer-java11 module instead
  */
+@Deprecated
 public class DefaultHttpClientObservationConvention implements HttpClientObservationConvention {
 
     /**

File: micrometer-core/src/main/java11/io/micrometer/core/instrument/binder/jdk/HttpClientContext.java
Patch:
@@ -28,7 +28,9 @@
  *
  * @author Marcin Grzejszczak
  * @since 1.10.0
+ * @deprecated since 1.13.0 use the same class in the micrometer-java11 module instead
  */
+@Deprecated
 public class HttpClientContext extends RequestReplySenderContext<HttpRequest.Builder, HttpResponse<?>> {
 
     private final Function<HttpRequest, String> uriMapper;

File: micrometer-core/src/main/java11/io/micrometer/core/instrument/binder/jdk/HttpClientObservationConvention.java
Patch:
@@ -25,7 +25,9 @@
  *
  * @author Marcin Grzejszczak
  * @since 1.10.0
+ * @deprecated since 1.13.0 use the same class in the micrometer-java11 module instead
  */
+@Deprecated
 public interface HttpClientObservationConvention extends ObservationConvention<HttpClientContext> {
 
     @Override

File: micrometer-core/src/main/java11/io/micrometer/core/instrument/binder/jdk/HttpClientObservationDocumentation.java
Patch:
@@ -20,6 +20,7 @@
 import io.micrometer.observation.ObservationConvention;
 import io.micrometer.observation.docs.ObservationDocumentation;
 
+@SuppressWarnings("deprecation")
 enum HttpClientObservationDocumentation implements ObservationDocumentation {
 
     /**

File: micrometer-core/src/main/java11/io/micrometer/core/instrument/binder/jdk/MicrometerHttpClient.java
Patch:
@@ -50,7 +50,9 @@
  *
  * @author Marcin Grzejszczak
  * @since 1.10.0
+ * @deprecated since 1.13.0 use the same class in the micrometer-java11 module instead
  */
+@Deprecated
 public class MicrometerHttpClient extends HttpClient {
 
     /**

File: micrometer-core/src/main/java11/io/micrometer/core/instrument/binder/jdk/package-info.java
Patch:
@@ -15,8 +15,10 @@
  */
 
 /**
- * Instrumentation of JDK classes.
+ * Instrumentation of JDK classes. Deprecated since 1.13.0 use the micrometer-java11
+ * module instead.
  */
+// Note we can't use the @deprecated JavaDoc tag due to compiler bug JDK-8160601
 @NonNullApi
 @NonNullFields
 package io.micrometer.core.instrument.binder.jdk;

File: micrometer-core/src/test/java11/io/micrometer/core/instrument/binder/jdk/MicrometerHttpClientTests.java
Patch:
@@ -37,6 +37,7 @@
 import static com.github.tomakehurst.wiremock.client.WireMock.*;
 import static org.assertj.core.api.BDDAssertions.then;
 
+@SuppressWarnings("deprecation")
 @WireMockTest
 class MicrometerHttpClientTests {
 

File: micrometer-test/src/test/java11/io/micrometer/java11/instrument/binder/jdk/JdkHttpClientTimingInstrumentationVerificationTests.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.core.instrument.binder.jdk;
+package io.micrometer.java11.instrument.binder.jdk;
 
 import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.HttpClientTimingInstrumentationVerificationTests;

File: docs/src/test/java/io/micrometer/docs/observation/ObservationConfiguringTests.java
Patch:
@@ -26,7 +26,7 @@
 import static org.assertj.core.api.BDDAssertions.then;
 
 /**
- * Sources for observation-handler.adoc
+ * Sources for observation-components.adoc
  */
 class ObservationConfiguringTests {
 

File: docs/src/test/java/io/micrometer/docs/observation/ObservationHandlerTests.java
Patch:
@@ -36,7 +36,7 @@
 import static io.micrometer.docs.observation.ObservationHandlerTests.TaxObservationDocumentation.TaxLowCardinalityKeyNames.TAX_TYPE;
 
 /**
- * Sources for observation-handler.adoc
+ * Sources for observation-components.adoc
  */
 class ObservationHandlerTests {
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/grpc/ObservationGrpcServerInterceptor.java
Patch:
@@ -98,7 +98,7 @@ public <ReqT, RespT> Listener<ReqT> interceptCall(ServerCall<ReqT, RespT> call,
 
         ObservationGrpcServerCall<ReqT, RespT> serverCall = new ObservationGrpcServerCall<>(call, observation);
 
-        try {
+        try (Observation.Scope scope = observation.openScope()) {
             Listener<ReqT> result = next.startCall(serverCall, headers);
             return new ObservationGrpcServerCallListener<>(result, observation);
         }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/HighCardinalityTagsDetector.java
Patch:
@@ -170,7 +170,7 @@ public Optional<String> findFirst() {
 
     private void logWarning(String name) {
         WARN_THEN_DEBUG_LOGGER.log(() -> String.format("It seems %s has high cardinality tags (threshold: %d meters).\n"
-                + "Check your configuration for the instrumentation of %s to find and fix the cause of the high cardinality (see: https://micrometer.io/docs/concepts#_tag_values).\n"
+                + "Check your configuration for the instrumentation of %s to find and fix the cause of the high cardinality (see: https://docs.micrometer.io/micrometer/reference/concepts/naming.html#_tag_values).\n"
                 + "If the cardinality is expected and acceptable, raise the threshold for this %s.", name,
                 this.threshold, name, getClass().getSimpleName()));
     }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/internal/DefaultLongTaskTimer.java
Patch:
@@ -128,10 +128,10 @@ public TimeUnit baseTimeUnit() {
 
     @Override
     public HistogramSnapshot takeSnapshot() {
+        double[] percentilesRequestedArr = distributionStatisticConfig.getPercentiles();
         Queue<Double> percentilesRequested = new ArrayBlockingQueue<>(
-                distributionStatisticConfig.getPercentiles() == null ? 1
+                percentilesRequestedArr == null || percentilesRequestedArr.length == 0 ? 1
                         : distributionStatisticConfig.getPercentiles().length);
-        double[] percentilesRequestedArr = distributionStatisticConfig.getPercentiles();
         if (percentilesRequestedArr != null && percentilesRequestedArr.length > 0) {
             Arrays.stream(percentilesRequestedArr).sorted().boxed().forEach(percentilesRequested::add);
         }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/mongodb/DefaultMongoCommandTagsProvider.java
Patch:
@@ -54,7 +54,7 @@ public class DefaultMongoCommandTagsProvider implements MongoCommandTagsProvider
 
     @Override
     public Iterable<Tag> commandTags(CommandEvent event) {
-        return Tags.of(Tag.of("command", event.getCommandName()),
+        return Tags.of(Tag.of("command", event.getCommandName()), Tag.of("database", event.getDatabaseName()),
                 Tag.of("collection", getAndRemoveCollectionNameForCommand(event)),
                 Tag.of("cluster.id",
                         event.getConnectionDescription().getConnectionId().getServerId().getClusterId().getValue()),

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/grpc/GrpcObservationTest.java
Patch:
@@ -51,6 +51,7 @@
 import org.junit.jupiter.api.Test;
 
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.List;
 import java.util.concurrent.Executors;
 import java.util.concurrent.Future;
@@ -147,7 +148,7 @@ void unaryRpc() {
         void unaryRpcAsync() {
             SimpleServiceFutureStub stub = SimpleServiceGrpc.newFutureStub(channel);
             List<String> messages = new ArrayList<>();
-            List<String> responses = new ArrayList<>();
+            List<String> responses = Collections.synchronizedList(new ArrayList<>());
             List<ListenableFuture<SimpleResponse>> futures = new ArrayList<>();
             int count = 40;
             for (int i = 0; i < count; i++) {

File: micrometer-commons/src/main/java/io/micrometer/common/annotation/ValueExpressionResolver.java
Patch:
@@ -16,6 +16,7 @@
 package io.micrometer.common.annotation;
 
 import io.micrometer.common.KeyValue;
+import io.micrometer.common.lang.Nullable;
 
 /**
  * Resolves the {@link KeyValue} value for the given parameter and the provided
@@ -33,6 +34,7 @@ public interface ValueExpressionResolver {
      * @param parameter parameter annotated with a {@link KeyValue} related annotation
      * @return the value of the {@link KeyValue}
      */
-    String resolve(String expression, Object parameter);
+    @Nullable
+    String resolve(String expression, @Nullable Object parameter);
 
 }

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/logging/Log4j2MetricsTest.java
Patch:
@@ -174,8 +174,10 @@ void asyncLogShouldNotBeDuplicated() throws IOException {
 
         assertThat(registry.get("log4j2.events").tags("level", "info").counter().count()).isEqualTo(0);
         logger.info("Hello, world!");
+        logger.info("Hello, world!");
+        logger.info("Hello, world!");
         await().atMost(Duration.ofSeconds(1))
-            .until(() -> registry.get("log4j2.events").tags("level", "info").counter().count() == 1);
+            .until(() -> registry.get("log4j2.events").tags("level", "info").counter().count() == 3);
     }
 
 }

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/jvm/JvmGcMetricsTest.java
Patch:
@@ -41,7 +41,6 @@
 import java.util.Collection;
 import java.util.Collections;
 import java.util.List;
-import java.util.Optional;
 import java.util.concurrent.TimeUnit;
 
 import static com.tngtech.archunit.core.domain.JavaClass.Predicates.resideInAPackage;

File: micrometer-jakarta9/src/test/java/io/micrometer/jakarta9/NoJavaxArchitectureTests.java
Patch:
@@ -21,12 +21,12 @@
 
 import static com.tngtech.archunit.lang.syntax.ArchRuleDefinition.noClasses;
 
-@AnalyzeClasses(packages = "io.micrometer.jakarta10")
+@AnalyzeClasses(packages = "io.micrometer.jakarta9")
 class NoJavaxArchitectureTests {
 
     @ArchTest
     static final ArchRule noJavaxDependencies = noClasses().that()
-        .resideInAPackage("io.micrometer.jakarta10..")
+        .resideInAPackage("io.micrometer.jakarta9..")
         .should()
         .dependOnClassesThat()
         .resideInAPackage("javax..");

File: implementations/micrometer-registry-wavefront/src/main/java/io/micrometer/wavefront/WavefrontMeterRegistry.java
Patch:
@@ -353,7 +353,7 @@ static String getWavefrontReportingUri(WavefrontConfig wavefrontConfig) {
      * @since 1.5.0
      */
     public static WavefrontClient.Builder getDefaultSenderBuilder(WavefrontConfig config) {
-        return new WavefrontClient.Builder(getWavefrontReportingUri(config), config.apiToken())
+        return new WavefrontClient.Builder(getWavefrontReportingUri(config), config.apiTokenType(), config.apiToken())
             .batchSize(config.batchSize())
             .flushInterval((int) config.step().toMillis(), TimeUnit.MILLISECONDS);
     }

File: micrometer-observation/src/main/java/io/micrometer/observation/Observation.java
Patch:
@@ -24,6 +24,7 @@
 import java.util.LinkedHashMap;
 import java.util.Map;
 import java.util.concurrent.Callable;
+import java.util.concurrent.ConcurrentHashMap;
 import java.util.function.Function;
 import java.util.function.Supplier;
 import java.util.stream.Collectors;
@@ -864,7 +865,7 @@ default boolean isNoop() {
     @SuppressWarnings("unchecked")
     class Context implements ContextView {
 
-        private final Map<Object, Object> map = new HashMap<>();
+        private final Map<Object, Object> map = new ConcurrentHashMap<>();
 
         private String name;
 

File: micrometer-observation/src/main/java/io/micrometer/observation/Observation.java
Patch:
@@ -20,7 +20,6 @@
 import io.micrometer.common.lang.NonNull;
 import io.micrometer.common.lang.Nullable;
 
-import java.util.HashMap;
 import java.util.LinkedHashMap;
 import java.util.Map;
 import java.util.concurrent.Callable;

File: micrometer-observation/src/main/java/io/micrometer/observation/Observation.java
Patch:
@@ -24,6 +24,7 @@
 import java.util.LinkedHashMap;
 import java.util.Map;
 import java.util.concurrent.Callable;
+import java.util.concurrent.ConcurrentHashMap;
 import java.util.function.Function;
 import java.util.function.Supplier;
 import java.util.stream.Collectors;
@@ -822,7 +823,7 @@ default boolean isNoop() {
     @SuppressWarnings("unchecked")
     class Context implements ContextView {
 
-        private final Map<Object, Object> map = new HashMap<>();
+        private final Map<Object, Object> map = new ConcurrentHashMap<>();
 
         private String name;
 

File: docs/src/test/java/io/micrometer/docs/context/DefaultContextSnapshotTests.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright 2002-2022 the original author or authors.
+ * Copyright 2023 VMware, Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      https://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: docs/src/test/java/io/micrometer/docs/context/ObservationThreadLocalAccessor.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright 2002-2022 the original author or authors.
+ * Copyright 2023 VMware, Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      https://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: docs/src/test/java/io/micrometer/docs/context/ObservationThreadLocalHolder.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright 2002-2022 the original author or authors.
+ * Copyright 2023 VMware, Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      https://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: docs/src/test/java/io/micrometer/docs/observation/ObservationConfiguringTests.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 VMware, Inc.
+ * Copyright 2023 VMware, Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: docs/src/test/java/io/micrometer/docs/observation/ObservationHandlerTests.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 VMware, Inc.
+ * Copyright 2023 VMware, Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: docs/src/test/java/io/micrometer/docs/observation/ObservationInstrumentingTests.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 VMware, Inc.
+ * Copyright 2023 VMware, Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -15,7 +15,6 @@
  */
 package io.micrometer.docs.observation;
 
-
 import com.github.tomakehurst.wiremock.junit5.WireMockRuntimeInfo;
 import com.github.tomakehurst.wiremock.junit5.WireMockTest;
 import io.javalin.Javalin;

File: docs/src/test/java/io/micrometer/docs/observation/ObservationTestingTests.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 VMware, Inc.
+ * Copyright 2023 VMware, Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-observation/src/test/java/io/micrometer/observation/ObservationTests.java
Patch:
@@ -387,7 +387,7 @@ void observeWithFunction() {
                 passedContextHolder.set(ctx);
                 return "World";
             });
-        assertThat(passedContextHolder).as("passed a noop context").hasValue(NoopObservation.INSTANCE.getContext());
+        assertThat(passedContextHolder).as("passed a noop context").hasValue(NoopObservation.NOOP.getContext());
         assertThat(contextCreated).isFalse();
         assertThat(result).isEqualTo("World");
     }

File: micrometer-observation/src/main/java/io/micrometer/observation/NoopObservationRegistry.java
Patch:
@@ -38,7 +38,7 @@ private NoopObservationRegistry() {
 
     @Override
     public Observation getCurrentObservation() {
-        return NoopObservation.INSTANCE;
+        return Observation.NOOP;
     }
 
     @Override

File: micrometer-observation/src/main/java/io/micrometer/observation/Observation.java
Patch:
@@ -51,7 +51,7 @@ public interface Observation extends ObservationView {
     /**
      * No-op observation.
      */
-    Observation NOOP = NoopObservation.INSTANCE;
+    Observation NOOP = new NoopObservation();
 
     /**
      * Create and start an {@link Observation} with the given name. All Observations of

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/httpcomponents/ApacheHttpClientContext.java
Patch:
@@ -31,7 +31,10 @@
  * for Apache HTTP client 5 support.
  *
  * @since 1.10.0
+ * @deprecated as of 1.12.0 in favor of HttpComponents 5.x and
+ * {@link io.micrometer.core.instrument.binder.httpcomponents.hc5.ApacheHttpClientContext}.
  */
+@Deprecated
 public class ApacheHttpClientContext extends RequestReplySenderContext<HttpRequest, HttpResponse> {
 
     private final HttpContext apacheHttpContext;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/httpcomponents/ApacheHttpClientObservationConvention.java
Patch:
@@ -27,7 +27,10 @@
  *
  * @since 1.10.0
  * @see DefaultApacheHttpClientObservationConvention
+ * @deprecated as of 1.12.0 in favor of HttpComponents 5.x and
+ * {@link io.micrometer.core.instrument.binder.httpcomponents.hc5.ApacheHttpClientObservationConvention}.
  */
+@Deprecated
 public interface ApacheHttpClientObservationConvention extends ObservationConvention<ApacheHttpClientContext> {
 
     @Override

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/httpcomponents/ApacheHttpClientObservationDocumentation.java
Patch:
@@ -29,7 +29,10 @@
  *
  * @since 1.10.0
  * @see MicrometerHttpRequestExecutor
+ * @deprecated as of 1.12.0 in favor of HttpComponents 5.x and
+ * {@link io.micrometer.core.instrument.binder.httpcomponents.hc5.ApacheHttpClientObservationDocumentation}.
  */
+@Deprecated
 public enum ApacheHttpClientObservationDocumentation implements ObservationDocumentation {
 
     DEFAULT {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/httpcomponents/DefaultApacheHttpClientObservationConvention.java
Patch:
@@ -33,7 +33,10 @@
  *
  * @since 1.10.0
  * @see ApacheHttpClientObservationDocumentation
+ * @deprecated as of 1.12.0 in favor of HttpComponents 5.x and
+ * {@link io.micrometer.core.instrument.binder.httpcomponents.hc5.ApacheHttpClientObservationConvention}.
  */
+@Deprecated
 public class DefaultApacheHttpClientObservationConvention implements ApacheHttpClientObservationConvention {
 
     /**

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/httpcomponents/HttpContextUtils.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.http.conn.routing.HttpRoute;
 import org.apache.http.protocol.HttpContext;
 
+@Deprecated
 class HttpContextUtils {
 
     static Tags generateTagsForRoute(HttpContext context) {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/httpcomponents/MicrometerHttpClientInterceptor.java
Patch:
@@ -50,8 +50,11 @@
  *
  * @author Jon Schneider
  * @since 1.4.0
+ * @deprecated as of 1.12.0 in favor of HttpComponents 5.x and
+ * {@link ObservationExecChainHandler}.
  */
 @Incubating(since = "1.4.0")
+@Deprecated
 public class MicrometerHttpClientInterceptor {
 
     private static final String METER_NAME = "httpcomponents.httpclient.request";

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/httpcomponents/MicrometerHttpRequestExecutor.java
Patch:
@@ -56,8 +56,11 @@
  * @author Benjamin Hubert (benjamin.hubert@willhaben.at)
  * @author Tommy Ludwig
  * @since 1.2.0
+ * @deprecated as of 1.12.0 in favor of HttpComponents 5.x and
+ * {@link ObservationExecChainHandler}.
  */
 @Incubating(since = "1.2.0")
+@Deprecated
 public class MicrometerHttpRequestExecutor extends HttpRequestExecutor {
 
     /**

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/httpcomponents/MicrometerHttpClientInterceptorTest.java
Patch:
@@ -43,6 +43,7 @@
  * @author Johnny Lim
  */
 @ExtendWith(WiremockResolver.class)
+@Deprecated
 class MicrometerHttpClientInterceptorTest {
 
     private MeterRegistry registry;

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/httpcomponents/MicrometerHttpRequestExecutorTest.java
Patch:
@@ -55,6 +55,7 @@
  * @author Benjamin Hubert (benjamin.hubert@willhaben.at)
  */
 @ExtendWith(WiremockResolver.class)
+@Deprecated
 class MicrometerHttpRequestExecutorTest {
 
     private static final String EXPECTED_METER_NAME = "httpcomponents.httpclient.request";

File: micrometer-test/src/test/java/io/micrometer/core/instrument/ApacheAsyncHttpClientTimingInstrumentationVerificationTests.java
Patch:
@@ -30,6 +30,7 @@
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.Future;
 
+@SuppressWarnings("deprecation")
 class ApacheAsyncHttpClientTimingInstrumentationVerificationTests
         extends HttpClientTimingInstrumentationVerificationTests<CloseableHttpAsyncClient> {
 

File: micrometer-test/src/test/java/io/micrometer/core/instrument/ApacheHttpClientTimingInstrumentationVerificationTests.java
Patch:
@@ -31,6 +31,7 @@
 import java.io.IOException;
 import java.net.URI;
 
+@Deprecated
 class ApacheHttpClientTimingInstrumentationVerificationTests
         extends HttpClientTimingInstrumentationVerificationTests<HttpClient> {
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/http/DefaultHttpJakartaServletRequestTagsProvider.java
Patch:
@@ -32,8 +32,8 @@ public class DefaultHttpJakartaServletRequestTagsProvider implements HttpJakarta
 
     @Override
     public Iterable<Tag> getTags(HttpServletRequest request, HttpServletResponse response) {
-        return Tags.of(HttpRequestTags.method(request), HttpRequestTags.status(response),
-                HttpRequestTags.outcome(response));
+        return Tags.of(HttpJakartaServletRequestTags.method(request), HttpJakartaServletRequestTags.status(response),
+                HttpJakartaServletRequestTags.outcome(response));
     }
 
 }

File: micrometer-observation/src/main/java/io/micrometer/observation/contextpropagation/ObservationThreadLocalAccessor.java
Patch:
@@ -55,7 +55,7 @@ public ObservationThreadLocalAccessor() {
     }
 
     /**
-     * Creates a new instance of this class and stores a static handle to it.
+     * Creates a new instance of this class.
      * @param observationRegistry observation registry
      * @since 1.10.8
      */

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/httpcomponents/hc5/HttpContextUtils.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.hc.core5.http.HttpHost;
 import org.apache.hc.core5.http.protocol.HttpContext;
 
+@Deprecated
 class HttpContextUtils {
 
     static Tags generateTagsForRoute(HttpContext context) {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/http/HttpRequestTags.java
Patch:
@@ -15,7 +15,6 @@
  */
 package io.micrometer.core.instrument.binder.http;
 
-import io.micrometer.common.lang.Nullable;
 import io.micrometer.common.util.StringUtils;
 import io.micrometer.core.annotation.Incubating;
 import io.micrometer.core.instrument.Tag;
@@ -88,7 +87,7 @@ public static Tag status(jakarta.servlet.http.HttpServletResponse response) {
      * @param exception the exception, may be {@code null}
      * @return the exception tag derived from the exception
      */
-    public static Tag exception(@Nullable Throwable exception) {
+    public static Tag exception(Throwable exception) {
         if (exception != null) {
             String simpleName = exception.getClass().getSimpleName();
             return Tag.of("exception",

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/httpcomponents/MicrometerHttpClientInterceptor.java
Patch:
@@ -21,7 +21,7 @@
 import io.micrometer.core.instrument.Tags;
 import io.micrometer.core.instrument.Timer;
 import io.micrometer.core.instrument.binder.http.Outcome;
-import io.micrometer.core.instrument.binder.httpcomponents.hc5.ApacheHttpClientMetricsBinder;
+import io.micrometer.core.instrument.binder.httpcomponents.hc5.ObservationExecChainHandler;
 import org.apache.http.HttpRequest;
 import org.apache.http.HttpRequestInterceptor;
 import org.apache.http.HttpResponseInterceptor;
@@ -46,7 +46,7 @@
  *             .build();
  * }</pre>
  * <p>
- * See {@link ApacheHttpClientMetricsBinder} for Apache HTTP client 5 support.
+ * See {@link ObservationExecChainHandler} for Apache HTTP client 5 support.
  *
  * @author Jon Schneider
  * @since 1.4.0

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/httpcomponents/MicrometerHttpRequestExecutor.java
Patch:
@@ -22,7 +22,7 @@
 import io.micrometer.core.instrument.Tags;
 import io.micrometer.core.instrument.Timer;
 import io.micrometer.core.instrument.binder.http.Outcome;
-import io.micrometer.core.instrument.binder.httpcomponents.hc5.ApacheHttpClientMetricsBinder;
+import io.micrometer.core.instrument.binder.httpcomponents.hc5.ObservationExecChainHandler;
 import io.micrometer.core.instrument.observation.ObservationOrTimerCompatibleInstrumentation;
 import io.micrometer.observation.Observation;
 import io.micrometer.observation.ObservationRegistry;
@@ -51,7 +51,7 @@
  *         .build();
  * </pre>
  * <p>
- * See {@link ApacheHttpClientMetricsBinder} for Apache HTTP client 5 support.
+ * See {@link ObservationExecChainHandler} for Apache HTTP client 5 support.
  *
  * @author Benjamin Hubert (benjamin.hubert@willhaben.at)
  * @author Tommy Ludwig

File: micrometer-core/src/main/java/io/micrometer/core/instrument/step/StepMeterRegistry.java
Patch:
@@ -138,7 +138,7 @@ public void stop() {
     public void close() {
         stop();
 
-        if (!isPublishing()) {
+        if (!isPublishing() && config.enabled() && !isClosed()) {
             if (!isDataPublishedForCurrentStep()) {
                 // Data was not published for the current step. So, we should flush that
                 // first.

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/grpc/GrpcObservationTest.java
Patch:
@@ -166,7 +166,7 @@ public void onFailure(Throwable t) {
 
                     }
                 }, Executors.newCachedThreadPool());
-                futures.add(stub.unaryRpc(request));
+                futures.add(future);
             }
 
             await().until(() -> futures.stream().allMatch(Future::isDone));

File: micrometer-observation/src/main/java/io/micrometer/observation/contextpropagation/ObservationThreadLocalAccessor.java
Patch:
@@ -40,7 +40,7 @@ public class ObservationThreadLocalAccessor implements ThreadLocalAccessor<Obser
 
     private ObservationRegistry observationRegistry = ObservationRegistry.create();
 
-    public static ObservationThreadLocalAccessor instance;
+    private static ObservationThreadLocalAccessor instance;
 
     /**
      * Creates a new instance of this class and stores a static handle to it. Remember to

File: micrometer-core/src/main/java/io/micrometer/core/instrument/AbstractTimer.java
Patch:
@@ -40,7 +40,7 @@ public abstract class AbstractTimer extends AbstractMeter implements Timer {
 
     protected final Clock clock;
 
-    private final Histogram histogram;
+    protected final Histogram histogram;
 
     private final TimeUnit baseTimeUnit;
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/step/StepCounter.java
Patch:
@@ -47,7 +47,7 @@ public double count() {
 
     @Override
     public void _closingRollover() {
-        value.closingRollover();
+        value._closingRollover();
     }
 
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/step/StepDistributionSummary.java
Patch:
@@ -88,7 +88,7 @@ public Iterable<Measurement> measure() {
 
     @Override
     public void _closingRollover() {
-        countTotal.closingRollover();
+        countTotal._closingRollover();
     }
 
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/step/StepFunctionCounter.java
Patch:
@@ -53,7 +53,7 @@ public double count() {
     @Override
     public void _closingRollover() {
         count(); // add any difference from last count
-        count.closingRollover();
+        count._closingRollover();
     }
 
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/step/StepFunctionTimer.java
Patch:
@@ -121,7 +121,7 @@ public Type type() {
     @Override
     public void _closingRollover() {
         accumulateCountAndTotal();
-        countTotal.closingRollover();
+        countTotal._closingRollover();
     }
 
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/step/StepTimer.java
Patch:
@@ -81,7 +81,7 @@ public double max(final TimeUnit unit) {
 
     @Override
     public void _closingRollover() {
-        countTotal.closingRollover();
+        countTotal._closingRollover();
     }
 
 }

File: micrometer-core/src/test/java/io/micrometer/core/instrument/step/StepValueTest.java
Patch:
@@ -71,7 +71,7 @@ public Long noValue() {
         aLong.set(27);
         assertThat(stepValue.poll()).isEqualTo(24L);
 
-        stepValue.closingRollover();
+        stepValue._closingRollover();
         assertThat(stepValue.poll()).isEqualTo(27L);
     }
 
@@ -98,7 +98,7 @@ public Long noValue() {
         assertThat(stepValue.poll()).isEqualTo(10);
         clock.add(Duration.ofMillis(stepTime - 1));
         aLong.set(5);
-        stepValue.closingRollover();
+        stepValue._closingRollover();
         assertThat(stepValue.poll()).isEqualTo(5);
         clock.add(Duration.ofMillis(1));
         assertThat(stepValue.poll()).isEqualTo(5L);

File: micrometer-core/src/test/java/io/micrometer/core/instrument/step/StepMeterRegistryTest.java
Patch:
@@ -15,9 +15,9 @@
  */
 package io.micrometer.core.instrument.step;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.Issue;
 import io.micrometer.core.instrument.*;
-import io.micrometer.core.lang.Nullable;
 import org.junit.jupiter.api.Test;
 import org.testcontainers.shaded.com.google.common.util.concurrent.AtomicDouble;
 

File: implementations/micrometer-registry-otlp/src/main/java/io/micrometer/registry/otlp/OtlpMeterRegistry.java
Patch:
@@ -413,7 +413,7 @@ static io.micrometer.core.instrument.distribution.Histogram getHistogram(Clock c
                     .merge(distributionStatisticConfig), true, false);
             }
             else if (AggregationTemporality.isDelta(aggregationTemporality) && stepMillis > 0) {
-                return new StepBucketHistogram(clock, stepMillis, distributionStatisticConfig, true);
+                return new StepBucketHistogram(clock, stepMillis, distributionStatisticConfig, true, false);
             }
         }
 

File: implementations/micrometer-registry-otlp/src/test/java/io/micrometer/registry/otlp/OtlpDeltaMeterRegistryTest.java
Patch:
@@ -151,7 +151,7 @@ void timerWithHistogram() {
         timer.record(111, TimeUnit.MILLISECONDS);
 
         HistogramDataPoint histogramDataPoint = writeToMetric(timer).getHistogram().getDataPoints(0);
-        assertThat(histogramDataPoint.getExplicitBoundsCount()).isZero();
+        assertThat(histogramDataPoint.getExplicitBoundsCount()).isEqualTo(4);
         this.stepOverNStep(1);
         assertHistogram(writeToMetric(timer), TimeUnit.MINUTES.toNanos(1), TimeUnit.MINUTES.toNanos(2), "milliseconds",
                 3, 198, 111);
@@ -243,7 +243,7 @@ void distributionSummaryWithHistogram() {
         assertHistogram(writeToMetric(ds), 0, TimeUnit.MINUTES.toNanos(1), "bytes", 0, 0, 0);
 
         HistogramDataPoint histogramDataPoint = writeToMetric(ds).getHistogram().getDataPoints(0);
-        assertThat(histogramDataPoint.getExplicitBoundsCount()).isZero();
+        assertThat(histogramDataPoint.getExplicitBoundsCount()).isEqualTo(4);
         this.stepOverNStep(1);
         assertHistogram(writeToMetric(ds), TimeUnit.MINUTES.toNanos(1), TimeUnit.MINUTES.toNanos(2), "bytes", 3, 198,
                 111);

File: micrometer-core/src/test/java/io/micrometer/core/instrument/distribution/TimeWindowFixedBoundaryHistogramTest.java
Patch:
@@ -38,7 +38,7 @@ private void assertTailSearch(int search, int expectedIndex, double... buckets)
             .build();
         try (TimeWindowFixedBoundaryHistogram histogram = new TimeWindowFixedBoundaryHistogram(Clock.SYSTEM,
                 statisticConfig.merge(DistributionStatisticConfig.DEFAULT), false)) {
-            TimeWindowFixedBoundaryHistogram.FixedBoundaryHistogram bucket = histogram.newBucket();
+            FixedBoundaryHistogram bucket = histogram.newBucket();
             assertThat(bucket.leastLessThanOrEqualTo(search)).isEqualTo(expectedIndex);
         }
     }

File: micrometer-observation/src/main/java/io/micrometer/observation/ObservationView.java
Patch:
@@ -32,7 +32,7 @@ public interface ObservationView {
     ContextView getContextView();
 
     /**
-     * Returns the last scope attached to this {@link ObservationView} in this thread.
+     * Pops the last scope attached to this {@link ObservationView} in this thread.
      * @return scope for this {@link ObservationView}, {@code null} if there was no scope
      * @since 1.10.6
      */

File: micrometer-observation/src/main/java/io/micrometer/observation/ObservationView.java
Patch:
@@ -32,7 +32,7 @@ public interface ObservationView {
     ContextView getContextView();
 
     /**
-     * Returns the last scope attached to this {@link ObservationView} in this thread.
+     * Pops the last scope attached to this {@link ObservationView} in this thread.
      * @return scope for this {@link ObservationView}, {@code null} if there was no scope
      * @since 1.10.6
      */

File: micrometer-commons/src/main/java/io/micrometer/common/annotation/AnnotationUtils.java
Patch:
@@ -34,14 +34,14 @@ private AnnotationUtils() {
 
     }
 
-    static List<AnnotatedParameter> findAnnotatedParameters(Class<? extends Annotation> tagClazz, Method method,
+    static List<AnnotatedParameter> findAnnotatedParameters(Class<? extends Annotation> annotationClazz, Method method,
             Object[] args) {
         Annotation[][] parameters = method.getParameterAnnotations();
         List<AnnotatedParameter> result = new ArrayList<>();
         int i = 0;
         for (Annotation[] parameter : parameters) {
             for (Annotation parameter2 : parameter) {
-                if (tagClazz.isAssignableFrom(parameter2.getClass())) {
+                if (annotationClazz.isAssignableFrom(parameter2.annotationType())) {
                     result.add(new AnnotatedParameter(i, parameter2, args[i]));
                 }
             }

File: micrometer-commons/src/main/java/io/micrometer/common/annotation/NoOpValueResolver.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2022 the original author or authors.
+ * Copyright 2023 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-commons/src/main/java/io/micrometer/common/annotation/ValueExpressionResolver.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2022 the original author or authors.
+ * Copyright 2023 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-commons/src/main/java/io/micrometer/common/annotation/ValueResolver.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2022 the original author or authors.
+ * Copyright 2023 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-commons/src/main/java/io/micrometer/common/annotation/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2022 VMware, Inc.
+ * Copyright 2023 VMware, Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/test/java/io/micrometer/core/aop/SpelValueExpressionResolver.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 VMware, Inc.
+ * Copyright 2023 VMware, Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -36,7 +36,7 @@ public String resolve(String expression, Object parameter) {
             return expressionToEvaluate.getValue(context, parameter, String.class);
         }
         catch (Exception ex) {
-            log.error("Exception occurred while tying to evaluate the SPEL expression [" + expression + "]", ex);
+            log.error("Exception occurred while trying to evaluate the SpEL expression [" + expression + "]", ex);
         }
         return parameter.toString();
     }

File: implementations/micrometer-registry-dynatrace/src/main/java/io/micrometer/dynatrace/types/DynatraceSummary.java
Patch:
@@ -93,9 +93,9 @@ DynatraceSummarySnapshot takeSummarySnapshotAndReset() {
 
     void reset() {
         synchronized (this) {
-            min = 0.;
-            max = 0.;
-            total = 0.;
+            min = 0.0;
+            max = 0.0;
+            total = 0.0;
             count = 0;
         }
     }

File: implementations/micrometer-registry-dynatrace/src/test/java/io/micrometer/dynatrace/types/DynatraceDistributionSummaryTest.java
Patch:
@@ -163,7 +163,9 @@ void testGetSnapshotAndReset() {
 
     private void assertMinMaxSumCount(DynatraceDistributionSummary ds, double expMin, double expMax, double expTotal,
             long expCount) {
-        assertThat(ds.min()).isCloseTo(expMin, OFFSET);
+        @SuppressWarnings("deprecation")
+        double min = ds.min();
+        assertThat(min).isCloseTo(expMin, OFFSET);
         assertThat(ds.max()).isCloseTo(expMax, OFFSET);
         assertThat(ds.totalAmount()).isCloseTo(expTotal, OFFSET);
         assertThat(ds.count()).isEqualTo(expCount);

File: implementations/micrometer-registry-dynatrace/src/test/java/io/micrometer/dynatrace/types/DynatraceTimerTest.java
Patch:
@@ -205,7 +205,9 @@ void testUseAllRecordInterfaces() {
 
     private void assertMinMaxSumCount(DynatraceTimer timer, double expMin, double expMax, double expTotal,
             long expCount) {
-        assertThat(timer.min(BASE_TIME_UNIT)).isCloseTo(expMin, OFFSET);
+        @SuppressWarnings("deprecation")
+        double min = timer.min(BASE_TIME_UNIT);
+        assertThat(min).isCloseTo(expMin, OFFSET);
         assertThat(timer.max(BASE_TIME_UNIT)).isCloseTo(expMax, OFFSET);
         assertThat(timer.totalTime(BASE_TIME_UNIT)).isCloseTo(expTotal, OFFSET);
         assertThat(timer.count()).isEqualTo(expCount);

File: implementations/micrometer-registry-otlp/src/main/java/io/micrometer/registry/otlp/OtlpCumulativeCounter.java
Patch:
@@ -20,11 +20,11 @@
 
 import java.util.concurrent.TimeUnit;
 
-class OtlpCounter extends CumulativeCounter implements StartTimeAwareMeter {
+class OtlpCumulativeCounter extends CumulativeCounter implements StartTimeAwareMeter {
 
     private final long startTimeNanos;
 
-    OtlpCounter(Id id, Clock clock) {
+    OtlpCumulativeCounter(Id id, Clock clock) {
         super(id);
         this.startTimeNanos = TimeUnit.MILLISECONDS.toNanos(clock.wallTime());
     }

File: implementations/micrometer-registry-otlp/src/main/java/io/micrometer/registry/otlp/OtlpCumulativeFunctionCounter.java
Patch:
@@ -21,11 +21,11 @@
 import java.util.concurrent.TimeUnit;
 import java.util.function.ToDoubleFunction;
 
-class OtlpFunctionCounter<T> extends CumulativeFunctionCounter<T> implements StartTimeAwareMeter {
+class OtlpCumulativeFunctionCounter<T> extends CumulativeFunctionCounter<T> implements StartTimeAwareMeter {
 
     private final long startTimeNanos;
 
-    OtlpFunctionCounter(Id id, T obj, ToDoubleFunction<T> f, Clock clock) {
+    OtlpCumulativeFunctionCounter(Id id, T obj, ToDoubleFunction<T> f, Clock clock) {
         super(id, obj, f);
         this.startTimeNanos = TimeUnit.MILLISECONDS.toNanos(clock.wallTime());
     }

File: implementations/micrometer-registry-otlp/src/main/java/io/micrometer/registry/otlp/OtlpCumulativeFunctionTimer.java
Patch:
@@ -22,11 +22,11 @@
 import java.util.function.ToDoubleFunction;
 import java.util.function.ToLongFunction;
 
-class OtlpFunctionTimer<T> extends CumulativeFunctionTimer<T> implements StartTimeAwareMeter {
+class OtlpCumulativeFunctionTimer<T> extends CumulativeFunctionTimer<T> implements StartTimeAwareMeter {
 
     private final long startTimeNanos;
 
-    OtlpFunctionTimer(Id id, T obj, ToLongFunction<T> countFunction, ToDoubleFunction<T> totalTimeFunction,
+    OtlpCumulativeFunctionTimer(Id id, T obj, ToLongFunction<T> countFunction, ToDoubleFunction<T> totalTimeFunction,
             TimeUnit totalTimeFunctionUnit, TimeUnit baseTimeUnit, Clock clock) {
         super(id, obj, countFunction, totalTimeFunction, totalTimeFunctionUnit, baseTimeUnit);
         this.startTimeNanos = TimeUnit.MILLISECONDS.toNanos(clock.wallTime());

File: implementations/micrometer-registry-otlp/src/main/java/io/micrometer/registry/otlp/OtlpCumulativeLongTaskTimer.java
Patch:
@@ -21,11 +21,11 @@
 
 import java.util.concurrent.TimeUnit;
 
-class OtlpLongTaskTimer extends CumulativeHistogramLongTaskTimer implements StartTimeAwareMeter {
+class OtlpCumulativeLongTaskTimer extends CumulativeHistogramLongTaskTimer implements StartTimeAwareMeter {
 
     private final long startTimeNanos;
 
-    OtlpLongTaskTimer(Id id, Clock clock, TimeUnit baseTimeUnit,
+    OtlpCumulativeLongTaskTimer(Id id, Clock clock, TimeUnit baseTimeUnit,
             DistributionStatisticConfig distributionStatisticConfig) {
         super(id, clock, baseTimeUnit, distributionStatisticConfig);
         this.startTimeNanos = TimeUnit.MILLISECONDS.toNanos(clock.wallTime());

File: samples/micrometer-samples-boot2/src/main/java/io/micrometer/boot2/samples/AzureMonitorSample.java
Patch:
@@ -33,7 +33,7 @@ public static void main(String[] args) {
 
     @Bean
     AzureMonitorMeterRegistry azureMonitorMeterRegistry(Environment environment) {
-        // will need an application property `azure.instrumentationKey` to be set
+        // will need an environment variable `azuremonitor.instrumentationKey` to be set
         return AzureMonitorMeterRegistry.builder(environment::getProperty).build();
     }
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/step/StepCounter.java
Patch:
@@ -46,8 +46,8 @@ public double count() {
     }
 
     @Override
-    public void _manualRollover() {
-        value.manualRollover();
+    public void _closingRollover() {
+        value.closingRollover();
     }
 
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/step/StepDistributionSummary.java
Patch:
@@ -87,8 +87,8 @@ public Iterable<Measurement> measure() {
     }
 
     @Override
-    public void _manualRollover() {
-        countTotal.manualRollover();
+    public void _closingRollover() {
+        countTotal.closingRollover();
     }
 
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/step/StepFunctionCounter.java
Patch:
@@ -51,9 +51,9 @@ public double count() {
     }
 
     @Override
-    public void _manualRollover() {
+    public void _closingRollover() {
         count(); // add any difference from last count
-        count.manualRollover();
+        count.closingRollover();
     }
 
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/step/StepFunctionTimer.java
Patch:
@@ -119,9 +119,9 @@ public Type type() {
     }
 
     @Override
-    public void _manualRollover() {
+    public void _closingRollover() {
         accumulateCountAndTotal();
-        countTotal.manualRollover();
+        countTotal.closingRollover();
     }
 
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/step/StepMeter.java
Patch:
@@ -23,8 +23,9 @@ interface StepMeter {
     /**
      * This is an internal method not meant for general use.
      * <p>
-     * Force a rollover of the values returned by a step meter.
+     * Force a rollover of the values returned by a step meter and never rollover again
+     * after.
      */
-    void _manualRollover();
+    void _closingRollover();
 
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/step/StepMeterRegistry.java
Patch:
@@ -111,7 +111,7 @@ public void close() {
             getMeters().stream()
                 .filter(StepMeter.class::isInstance)
                 .map(StepMeter.class::cast)
-                .forEach(StepMeter::_manualRollover);
+                .forEach(StepMeter::_closingRollover);
         }
         super.close();
     }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/step/StepTimer.java
Patch:
@@ -80,8 +80,8 @@ public double max(final TimeUnit unit) {
     }
 
     @Override
-    public void _manualRollover() {
-        countTotal.manualRollover();
+    public void _closingRollover() {
+        countTotal.closingRollover();
     }
 
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/step/StepTuple2.java
Patch:
@@ -77,7 +77,9 @@ private void rollCount(long now) {
      * Intended for internal use. Rolls the values regardless of the clock or current
      * time.
      */
-    void manualRollover() {
+    void closingRollover() {
+        // ensure rollover does not happen again
+        lastInitPos.set(Long.MAX_VALUE);
         t1Previous = t1Supplier.get();
         t2Previous = t2Supplier.get();
     }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/step/StepValue.java
Patch:
@@ -76,7 +76,9 @@ public V poll() {
     /**
      * internal use only; intentionally left package-private
      */
-    void manualRollover() {
+    void closingRollover() {
+        // make sure value does not rollover again if passing a step boundary
+        lastInitPos.set(Long.MAX_VALUE);
         previous = valueSupplier().get();
     }
 

File: implementations/micrometer-registry-azure-monitor/src/main/java/io/micrometer/azuremonitor/AzureMonitorMeterRegistry.java
Patch:
@@ -63,9 +63,9 @@ private AzureMonitorMeterRegistry(AzureMonitorConfig config, Clock clock,
         super(config, clock);
 
         config().namingConvention(new AzureMonitorNamingConvention());
-        if (StringUtils.isEmpty(telemetryConfiguration.getInstrumentationKey())) {
-            checkRequired("instrumentationKey", AzureMonitorConfig::instrumentationKey).apply(config).orThrow();
-            telemetryConfiguration.setInstrumentationKey(config.instrumentationKey());
+        if (StringUtils.isEmpty(telemetryConfiguration.getConnectionString())) {
+            checkRequired("connectionString", AzureMonitorConfig::connectionString).apply(config).orThrow();
+            telemetryConfiguration.setConnectionString(config.connectionString());
         }
 
         client = new TelemetryClient(telemetryConfiguration);

File: implementations/micrometer-registry-azure-monitor/src/test/java/io/micrometer/azuremonitor/AzureMonitorConfigTest.java
Patch:
@@ -30,7 +30,7 @@ class AzureMonitorConfigTest {
 
     @Test
     void valid() {
-        props.put("azuremonitor.instrumentationKey", "secret");
+        props.put("azuremonitor.connectionString", "secret");
 
         assertThat(config.validate().isValid()).isTrue();
     }

File: implementations/micrometer-registry-azure-monitor/src/test/java/io/micrometer/azuremonitor/AzureMonitorMeterRegistryCompatibilityKit.java
Patch:
@@ -25,8 +25,8 @@ class AzureMonitorMeterRegistryCompatibilityKit extends MeterRegistryCompatibili
 
     private final AzureMonitorConfig config = new AzureMonitorConfig() {
         @Override
-        public String instrumentationKey() {
-            return "fakeKey";
+        public String connectionString() {
+            return "InstrumentationKey=fakeKey";
         }
 
         @Override

File: samples/micrometer-samples-boot2/src/main/java/io/micrometer/boot2/samples/AzureMonitorSample.java
Patch:
@@ -33,7 +33,7 @@ public static void main(String[] args) {
 
     @Bean
     AzureMonitorMeterRegistry azureMonitorMeterRegistry(Environment environment) {
-        // will need an application property `azure.instrumentationKey` to be set
+        // will need an application property `azure.connectionString` to be set
         return AzureMonitorMeterRegistry.builder(environment::getProperty).build();
     }
 

File: micrometer-core/src/test/java/io/micrometer/core/instrument/step/StepFunctionCounterTest.java
Patch:
@@ -67,7 +67,8 @@ void count() {
     @Test
     void manualRolloverPartialStep() {
         AtomicInteger n = new AtomicInteger(3);
-        @SuppressWarnings({"rawtypes", "unchecked"}) StepFunctionCounter<AtomicInteger> counter = (StepFunctionCounter) registry.more()
+        @SuppressWarnings({ "rawtypes", "unchecked" })
+        StepFunctionCounter<AtomicInteger> counter = (StepFunctionCounter) registry.more()
             .counter("my.counter", Tags.empty(), n);
 
         assertThat(counter.count()).isZero();

File: implementations/micrometer-registry-atlas/src/main/java/io/micrometer/atlas/SpectatorToDoubleGauge.java
Patch:
@@ -26,7 +26,7 @@
  * identical to com.netflix.spectator.api.ObjectGauge which is not accessible in
  * Spectator.
  */
-class SpectatorToDoubleGauge<T>extends AbstractMeter<T> implements Gauge {
+class SpectatorToDoubleGauge<T> extends AbstractMeter<T> implements Gauge {
 
     private final ToDoubleFunction<T> f;
 

File: implementations/micrometer-registry-otlp/src/main/java/io/micrometer/registry/otlp/OtlpFunctionCounter.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.concurrent.TimeUnit;
 import java.util.function.ToDoubleFunction;
 
-class OtlpFunctionCounter<T>extends CumulativeFunctionCounter<T> implements StartTimeAwareMeter {
+class OtlpFunctionCounter<T> extends CumulativeFunctionCounter<T> implements StartTimeAwareMeter {
 
     private final long startTimeNanos;
 

File: implementations/micrometer-registry-otlp/src/main/java/io/micrometer/registry/otlp/OtlpFunctionTimer.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.function.ToDoubleFunction;
 import java.util.function.ToLongFunction;
 
-class OtlpFunctionTimer<T>extends CumulativeFunctionTimer<T> implements StartTimeAwareMeter {
+class OtlpFunctionTimer<T> extends CumulativeFunctionTimer<T> implements StartTimeAwareMeter {
 
     private final long startTimeNanos;
 

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdFunctionCounter.java
Patch:
@@ -27,7 +27,7 @@
  * @param <T> the type of the state object from which the counter value is extracted
  * @author Jon Schneider
  */
-public class StatsdFunctionCounter<T>extends CumulativeFunctionCounter<T> implements StatsdPollable {
+public class StatsdFunctionCounter<T> extends CumulativeFunctionCounter<T> implements StatsdPollable {
 
     private final StatsdLineBuilder lineBuilder;
 

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdFunctionTimer.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.function.ToDoubleFunction;
 import java.util.function.ToLongFunction;
 
-public class StatsdFunctionTimer<T>extends CumulativeFunctionTimer<T> implements StatsdPollable {
+public class StatsdFunctionTimer<T> extends CumulativeFunctionTimer<T> implements StatsdPollable {
 
     private final StatsdLineBuilder lineBuilder;
 

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdGauge.java
Patch:
@@ -24,7 +24,7 @@
 import java.util.concurrent.atomic.AtomicReference;
 import java.util.function.ToDoubleFunction;
 
-public class StatsdGauge<T>extends AbstractMeter implements Gauge, StatsdPollable {
+public class StatsdGauge<T> extends AbstractMeter implements Gauge, StatsdPollable {
 
     private final StatsdLineBuilder lineBuilder;
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/CaffeineCacheMetrics.java
Patch:
@@ -44,7 +44,7 @@
  */
 @NonNullApi
 @NonNullFields
-public class CaffeineCacheMetrics<K, V, C extends Cache<K, V>>extends CacheMeterBinder<C> {
+public class CaffeineCacheMetrics<K, V, C extends Cache<K, V>> extends CacheMeterBinder<C> {
 
     private static final String DESCRIPTION_CACHE_LOAD = "The number of times cache lookup methods have successfully loaded a new value or failed to load a new value, either because no value was found or an exception was thrown while loading";
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/GuavaCacheMetrics.java
Patch:
@@ -32,7 +32,7 @@
  */
 @NonNullApi
 @NonNullFields
-public class GuavaCacheMetrics<K, V, C extends Cache<K, V>>extends CacheMeterBinder<C> {
+public class GuavaCacheMetrics<K, V, C extends Cache<K, V>> extends CacheMeterBinder<C> {
 
     private static final String DESCRIPTION_CACHE_LOAD = "The number of times cache lookup methods have successfully loaded a new value or failed to load a new value because an exception was thrown while loading";
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/JCacheMetrics.java
Patch:
@@ -41,7 +41,7 @@
  */
 @NonNullApi
 @NonNullFields
-public class JCacheMetrics<K, V, C extends Cache<K, V>>extends CacheMeterBinder<C> {
+public class JCacheMetrics<K, V, C extends Cache<K, V>> extends CacheMeterBinder<C> {
 
     // VisibleForTesting
     @Nullable

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/grpc/MetricCollectingClientCall.java
Patch:
@@ -30,7 +30,7 @@
  * @param <A> The type of message received one or more times from the server.
  * @author Daniel Theuke (daniel.theuke@heuboe.de)
  */
-class MetricCollectingClientCall<Q, A>extends SimpleForwardingClientCall<Q, A> {
+class MetricCollectingClientCall<Q, A> extends SimpleForwardingClientCall<Q, A> {
 
     private final Counter requestCounter;
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/grpc/MetricCollectingClientCallListener.java
Patch:
@@ -29,7 +29,7 @@
  * @param <A> The type of message received one or more times from the server.
  * @author Daniel Theuke (daniel.theuke@heuboe.de)
  */
-class MetricCollectingClientCallListener<A>extends SimpleForwardingClientCallListener<A> {
+class MetricCollectingClientCallListener<A> extends SimpleForwardingClientCallListener<A> {
 
     private final Counter responseCounter;
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/grpc/MetricCollectingServerCall.java
Patch:
@@ -29,7 +29,7 @@
  * @param <A> The type of message sent one or more times to the client.
  * @author Daniel Theuke (daniel.theuke@heuboe.de)
  */
-class MetricCollectingServerCall<Q, A>extends SimpleForwardingServerCall<Q, A> {
+class MetricCollectingServerCall<Q, A> extends SimpleForwardingServerCall<Q, A> {
 
     private final Counter responseCounter;
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/grpc/MetricCollectingServerCallListener.java
Patch:
@@ -30,7 +30,7 @@
  * @param <Q> The type of message received one or more times from the client.
  * @author Daniel Theuke (daniel.theuke@heuboe.de)
  */
-class MetricCollectingServerCallListener<Q>extends SimpleForwardingServerCallListener<Q> {
+class MetricCollectingServerCallListener<Q> extends SimpleForwardingServerCallListener<Q> {
 
     private final Counter requestCounter;
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/AbstractCompositeMeter.java
Patch:
@@ -26,7 +26,7 @@
 import java.util.Map;
 import java.util.concurrent.atomic.AtomicBoolean;
 
-abstract class AbstractCompositeMeter<T extends Meter>extends AbstractMeter implements CompositeMeter {
+abstract class AbstractCompositeMeter<T extends Meter> extends AbstractMeter implements CompositeMeter {
 
     private final AtomicBoolean childrenGuard = new AtomicBoolean();
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeFunctionCounter.java
Patch:
@@ -23,7 +23,7 @@
 import java.lang.ref.WeakReference;
 import java.util.function.ToDoubleFunction;
 
-public class CompositeFunctionCounter<T>extends AbstractCompositeMeter<FunctionCounter> implements FunctionCounter {
+public class CompositeFunctionCounter<T> extends AbstractCompositeMeter<FunctionCounter> implements FunctionCounter {
 
     private final WeakReference<T> ref;
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeFunctionTimer.java
Patch:
@@ -25,7 +25,7 @@
 import java.util.function.ToDoubleFunction;
 import java.util.function.ToLongFunction;
 
-class CompositeFunctionTimer<T>extends AbstractCompositeMeter<FunctionTimer> implements FunctionTimer {
+class CompositeFunctionTimer<T> extends AbstractCompositeMeter<FunctionTimer> implements FunctionTimer {
 
     private final WeakReference<T> ref;
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeGauge.java
Patch:
@@ -24,7 +24,7 @@
 import java.lang.ref.WeakReference;
 import java.util.function.ToDoubleFunction;
 
-class CompositeGauge<T>extends AbstractCompositeMeter<Gauge> implements Gauge {
+class CompositeGauge<T> extends AbstractCompositeMeter<Gauge> implements Gauge {
 
     private final WeakReference<T> ref;
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeTimeGauge.java
Patch:
@@ -24,7 +24,7 @@
 import java.util.concurrent.TimeUnit;
 import java.util.function.ToDoubleFunction;
 
-class CompositeTimeGauge<T>extends AbstractCompositeMeter<TimeGauge> implements TimeGauge {
+class CompositeTimeGauge<T> extends AbstractCompositeMeter<TimeGauge> implements TimeGauge {
 
     private final WeakReference<T> ref;
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/config/validate/Validated.java
Patch:
@@ -41,7 +41,7 @@
  * @since 1.5.0
  */
 @Incubating(since = "1.5.0")
-public interface Validated<T>extends Iterable<Validated<T>> {
+public interface Validated<T> extends Iterable<Validated<T>> {
 
     boolean isValid();
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/cumulative/CumulativeFunctionCounter.java
Patch:
@@ -22,7 +22,7 @@
 import java.lang.ref.WeakReference;
 import java.util.function.ToDoubleFunction;
 
-public class CumulativeFunctionCounter<T>extends AbstractMeter implements FunctionCounter {
+public class CumulativeFunctionCounter<T> extends AbstractMeter implements FunctionCounter {
 
     private final WeakReference<T> ref;
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/cumulative/CumulativeFunctionTimer.java
Patch:
@@ -30,7 +30,7 @@
  * @author Jon Schneider
  * @author Johnny Lim
  */
-public class CumulativeFunctionTimer<T>extends AbstractMeter implements FunctionTimer {
+public class CumulativeFunctionTimer<T> extends AbstractMeter implements FunctionTimer {
 
     private final WeakReference<T> ref;
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/dropwizard/DropwizardFunctionCounter.java
Patch:
@@ -27,7 +27,7 @@
 /**
  * @author Jon Schneider
  */
-public class DropwizardFunctionCounter<T>extends AbstractMeter implements FunctionCounter {
+public class DropwizardFunctionCounter<T> extends AbstractMeter implements FunctionCounter {
 
     private final WeakReference<T> ref;
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/dropwizard/DropwizardFunctionTimer.java
Patch:
@@ -36,7 +36,7 @@
  * @author Jon Schneider
  * @author Johnny Lim
  */
-public class DropwizardFunctionTimer<T>extends AbstractMeter implements FunctionTimer {
+public class DropwizardFunctionTimer<T> extends AbstractMeter implements FunctionTimer {
 
     private final WeakReference<T> ref;
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/internal/DefaultGauge.java
Patch:
@@ -31,7 +31,7 @@
  * @author Jon Schneider
  * @author Johnny Lim
  */
-public class DefaultGauge<T>extends AbstractMeter implements Gauge {
+public class DefaultGauge<T> extends AbstractMeter implements Gauge {
 
     private static final WarnThenDebugLogger logger = new WarnThenDebugLogger(DefaultGauge.class);
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/step/StepFunctionCounter.java
Patch:
@@ -22,7 +22,7 @@
 import java.lang.ref.WeakReference;
 import java.util.function.ToDoubleFunction;
 
-public class StepFunctionCounter<T>extends AbstractMeter implements FunctionCounter {
+public class StepFunctionCounter<T> extends AbstractMeter implements FunctionCounter {
 
     private final WeakReference<T> ref;
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/util/AbstractPartition.java
Patch:
@@ -28,7 +28,7 @@
  * @author Jon Schneider
  * @since 1.2.2
  */
-public abstract class AbstractPartition<T>extends AbstractList<List<T>> {
+public abstract class AbstractPartition<T> extends AbstractList<List<T>> {
 
     final List<T> delegate;
 

File: micrometer-observation/src/main/java/io/micrometer/observation/Observation.java
Patch:
@@ -757,7 +757,7 @@ interface Scope extends AutoCloseable {
 
         /**
          * Clears the current scope and notifies the handlers that the scope was closed.
-         * You don't need to call this method manually, if you use try-with-resource, it
+         * You don't need to call this method manually. If you use try-with-resource, it
          * will call this for you. Please only call this method if you know what you are
          * doing and your use-case demands the usage of it.
          */
@@ -766,9 +766,10 @@ interface Scope extends AutoCloseable {
 
         /**
          * Clears the current scope and notifies the handlers that the scope was reset.
-         * You don't need to call this method in most of the cases, please only call this
+         * You don't need to call this method in most of the cases. Please only call this
          * method if you know what you are doing and your use-case demands the usage of
          * it.
+         * @since 1.10.4
          */
         void reset();
 

File: micrometer-observation/src/main/java/io/micrometer/observation/ObservationHandler.java
Patch:
@@ -73,6 +73,7 @@ default void onScopeClosed(T context) {
      * Reacts to resetting of scopes. If your handler uses a {@link ThreadLocal} value,
      * this method should clear that {@link ThreadLocal}.
      * @param context an {@link Observation.Context}
+     * @since 1.10.4
      */
     default void onScopeReset(T context) {
     }

File: micrometer-observation-test/src/main/java/io/micrometer/observation/tck/AnyContextObservationHandlerCompatibilityKit.java
Patch:
@@ -44,6 +44,8 @@ void handlerSupportsAnyContext() {
         assertThatCode(() -> handler.onEvent(Observation.Event.of("testEvent"), testContext))
                 .doesNotThrowAnyException();
         assertThatCode(() -> handler.onScopeOpened(testContext)).doesNotThrowAnyException();
+        assertThatCode(() -> handler.onScopeClosed(testContext)).doesNotThrowAnyException();
+        assertThatCode(() -> handler.onScopeReset(testContext)).doesNotThrowAnyException();
         assertThatCode(() -> handler.supportsContext(testContext)).doesNotThrowAnyException();
         assertThat(handler.supportsContext(testContext)).as("Handler supports any context").isTrue();
     }

File: micrometer-observation-test/src/main/java/io/micrometer/observation/tck/ConcreteContextObservationHandlerCompatibilityKit.java
Patch:
@@ -60,6 +60,8 @@ void handlerSupportsConcreteContextForHandlerMethods() {
         assertThatCode(() -> handler.onError(context())).doesNotThrowAnyException();
         assertThatCode(() -> handler.onEvent(Observation.Event.of("testEvent"), context())).doesNotThrowAnyException();
         assertThatCode(() -> handler.onScopeOpened(context())).doesNotThrowAnyException();
+        assertThatCode(() -> handler.onScopeClosed(context())).doesNotThrowAnyException();
+        assertThatCode(() -> handler.onScopeReset(context())).doesNotThrowAnyException();
     }
 
     @Test

File: micrometer-observation-test/src/main/java/io/micrometer/observation/tck/NullContextObservationHandlerCompatibilityKit.java
Patch:
@@ -58,6 +58,8 @@ void handlerSupportsNullContext() {
         assertThatCode(() -> handler.onError(null)).doesNotThrowAnyException();
         assertThatCode(() -> handler.onEvent(null, null)).doesNotThrowAnyException();
         assertThatCode(() -> handler.onScopeOpened(null)).doesNotThrowAnyException();
+        assertThatCode(() -> handler.onScopeClosed(null)).doesNotThrowAnyException();
+        assertThatCode(() -> handler.onScopeReset(null)).doesNotThrowAnyException();
         assertThatCode(() -> handler.supportsContext(null)).doesNotThrowAnyException();
         assertThat(handler.supportsContext(null)).as("Handler supports null context").isTrue();
     }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jvm/JvmMemory.java
Patch:
@@ -35,11 +35,13 @@ static Stream<MemoryPoolMXBean> getLongLivedHeapPools() {
     }
 
     static boolean isConcurrentPhase(String cause, String name) {
-        return "No GC".equals(cause) || "Shenandoah Cycles".equals(name) || "ZGC Cycles".equals(name);
+        return "No GC".equals(cause) || "Shenandoah Cycles".equals(name) || "ZGC Cycles".equals(name)
+                || (name.startsWith("GPGC") && !name.endsWith("Pauses"));
     }
 
     static boolean isAllocationPool(String name) {
         return name != null && (name.endsWith("Eden Space") || "Shenandoah".equals(name) || "ZHeap".equals(name)
+                || name.endsWith("New Gen") // Zing GPGC
                 || name.endsWith("nursery-allocate") || name.endsWith("-eden") // "balanced-eden"
                 || "JavaHeap".equals(name) // metronome
         );

File: micrometer-observation/src/main/java/io/micrometer/observation/Observation.java
Patch:
@@ -413,7 +413,7 @@ default boolean isNoop() {
     }
 
     /**
-     * Adds an observation convention that can be used to attach key values to the
+     * Sets an observation convention that can be used to attach key values to the
      * observation. WARNING: You must set the ObservationConvention to the Observation
      * before it is started.
      * @param observationConvention observation convention

File: micrometer-observation/src/main/java/io/micrometer/observation/Observation.java
Patch:
@@ -1042,8 +1042,8 @@ public KeyValues getAllKeyValues() {
         public String toString() {
             return "name='" + name + '\'' + ", contextualName='" + contextualName + '\'' + ", error='" + error + '\''
                     + ", lowCardinalityKeyValues=" + toString(getLowCardinalityKeyValues())
-                    + ", highCardinalityKeyValues=" + toString(getHighCardinalityKeyValues()) + ", map="
-                    + toString(map);
+                    + ", highCardinalityKeyValues=" + toString(getHighCardinalityKeyValues()) + ", map=" + toString(map)
+                    + ", parentObservation=" + parentObservation;
         }
 
         private String toString(KeyValues keyValues) {

File: micrometer-observation/src/test/java/io/micrometer/observation/ObservationTextPublisherTests.java
Patch:
@@ -30,7 +30,7 @@
  */
 class ObservationTextPublisherTests {
 
-    private static final String CONTEXT_TOSTRING = "name='testName', contextualName='testContextualName', error='java.io.IOException: simulated', lowCardinalityKeyValues=[lcTag='foo'], highCardinalityKeyValues=[hcTag='bar'], map=[contextKey='contextValue']";
+    private static final String CONTEXT_TOSTRING = "name='testName', contextualName='testContextualName', error='java.io.IOException: simulated', lowCardinalityKeyValues=[lcTag='foo'], highCardinalityKeyValues=[hcTag='bar'], map=[contextKey='contextValue'], parentObservation=null";
 
     private final TestConsumer consumer = new TestConsumer();
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jersey/server/JerseyContext.java
Patch:
@@ -36,7 +36,7 @@ public class JerseyContext extends RequestReplyReceiverContext<ContainerRequest,
     public JerseyContext(RequestEvent requestEvent) {
         super((carrier, key) -> {
             List<String> requestHeader = carrier.getRequestHeader(key);
-            if (requestHeader.isEmpty()) {
+            if (requestHeader == null || requestHeader.isEmpty()) {
                 return null;
             }
             return requestHeader.get(0);

File: micrometer-observation-test/src/main/java/io/micrometer/observation/tck/ObservationContextAssert.java
Patch:
@@ -212,7 +212,7 @@ public SELF hasSubsetOfKeys(String... keys) {
                 .collect(toList());
 
         if (extra.size() > 0) {
-            failWithMessage("Observation keys are not a subset of %s. Found extra keys: %s", keys, extra);
+            failWithMessage("Observation keys are not a subset of %s. Found extra keys: %s", expectedKeys, extra);
         }
 
         return (SELF) this;

File: micrometer-test/src/main/java/io/micrometer/core/instrument/HttpClientTimingInstrumentationVerificationTests.java
Patch:
@@ -41,8 +41,8 @@
  * to receive real requests from an instrumented HTTP client.
  *
  * In order to make an actual HTTP call use the
- * {@link HttpClientTimingInstrumentationVerificationTests#instrumentedClient()} method
- * that will cache the instrumented instance for a test.
+ * {@link HttpClientTimingInstrumentationVerificationTests#instrumentedClient(TestType)}
+ * method that will cache the instrumented instance for a test.
  */
 @WireMockTest
 @Incubating(since = "1.8.8")

File: micrometer-observation/src/main/java/io/micrometer/observation/docs/ObservationDocumentation.java
Patch:
@@ -75,6 +75,7 @@ default String getName() {
      * {@link #getContextualName()}.
      * @return default naming convention
      */
+    @Nullable
     default Class<? extends ObservationConvention<? extends Observation.Context>> getDefaultConvention() {
         return null;
     }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jersey/server/ObservationRequestEventListener.java
Patch:
@@ -68,7 +68,7 @@ public void onEvent(RequestEvent event) {
             case REQUEST_MATCHED:
                 JerseyContext jerseyContext = new JerseyContext(event);
                 Observation observation = JerseyObservationDocumentation.DEFAULT.start(this.jerseyObservationConvention,
-                        new DefaultJerseyObservationConvention(this.metricName), jerseyContext, this.registry);
+                        new DefaultJerseyObservationConvention(this.metricName), () -> jerseyContext, this.registry);
                 Observation.Scope scope = observation.openScope();
                 observations.put(event.getContainerRequest(), new ObservationScopeAndContext(scope, jerseyContext));
                 break;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/observation/ObservationOrTimerCompatibleInstrumentation.java
Patch:
@@ -97,13 +97,14 @@ private ObservationOrTimerCompatibleInstrumentation(MeterRegistry meterRegistry,
         this.defaultConvention = defaultConvention;
     }
 
+    @SuppressWarnings("unchecked")
     private void start(Supplier<T> contextSupplier) {
         if (observationRegistry.isNoop()) {
             timerSample = Timer.start(meterRegistry);
         }
         else {
-            context = contextSupplier.get();
-            observation = Observation.start(convention, defaultConvention, context, observationRegistry);
+            observation = Observation.start(convention, defaultConvention, contextSupplier, observationRegistry);
+            context = (T) observation.getContext();
         }
     }
 

File: micrometer-observation-test/src/main/java/io/micrometer/observation/tck/ObservationRegistryCompatibilityKit.java
Patch:
@@ -758,7 +758,7 @@ void observationFieldsShouldBeSetOnContext() {
         TestContext testContext = new TestContext();
         testContext.put("context.field", "42");
         Exception exception = new IOException("simulated");
-        Observation observation = Observation.createNotStarted("test.observation", testContext, registry)
+        Observation observation = Observation.createNotStarted("test.observation", () -> testContext, registry)
                 .lowCardinalityKeyValue("lcTag1", "0")
                 // should override the previous line
                 .lowCardinalityKeyValue("lcTag1", "1").lowCardinalityKeyValues(KeyValues.of("lcTag2", "2"))
@@ -809,7 +809,7 @@ void globallyOverridenNameAndContextualNameShouldBeSetOnContext() {
                 .observationHandler(assertingHandler);
 
         TestContext testContext = new TestContext();
-        Observation observation = Observation.createNotStarted("test.observation", testContext, registry)
+        Observation observation = Observation.createNotStarted("test.observation", () -> testContext, registry)
                 .contextualName("test.observation.42").start();
         observation.stop();
 
@@ -829,7 +829,7 @@ void locallyOverridenNameAndContextualNameShouldBeSetOnContext() {
         registry.observationConfig().observationHandler(assertingHandler);
 
         TestContext testContext = new TestContext();
-        Observation observation = Observation.createNotStarted("test.observation", testContext, registry)
+        Observation observation = Observation.createNotStarted("test.observation", () -> testContext, registry)
                 .contextualName("test.observation.42")
                 .observationConvention(new TestObservationConventionWithNameOverrides()).start();
         observation.stop();

File: micrometer-observation/src/main/java/io/micrometer/observation/aop/ObservedAspectObservationDocumentation.java
Patch:
@@ -47,7 +47,7 @@ static Observation of(ProceedingJoinPoint pjp, Observed observed, ObservationReg
                 ? signature.getDeclaringType().getSimpleName() + "#" + signature.getName() : observed.contextualName();
 
         Observation observation = Observation
-                .createNotStarted(name, new ObservedAspect.ObservedAspectContext(pjp), registry)
+                .createNotStarted(name, () -> new ObservedAspect.ObservedAspectContext(pjp), registry)
                 .contextualName(contextualName)
                 .lowCardinalityKeyValue(CLASS_NAME.asString(), signature.getDeclaringTypeName())
                 .lowCardinalityKeyValue(METHOD_NAME.asString(), signature.getName())

File: samples/micrometer-samples-core/src/main/java/io/micrometer/core/samples/ObservationHandlerSample.java
Patch:
@@ -42,7 +42,7 @@ public static void main(String[] args) throws InterruptedException {
                 .observationPredicate(new IgnoringObservationPredicate());
 
         Observation observation = Observation
-                .createNotStarted("sample.operation", new CustomContext(), observationRegistry)
+                .createNotStarted("sample.operation", CustomContext::new, observationRegistry)
                 .contextualName("CALL sampleOperation").lowCardinalityKeyValue("a", "1")
                 .highCardinalityKeyValue("time", Instant.now().toString())
                 .observationConvention(new CustomLocalObservationConvention()).start();
@@ -60,8 +60,8 @@ public static void main(String[] args) throws InterruptedException {
         observation.stop();
 
         Observation.start("sample.no-context", observationRegistry).stop();
-        Observation.start("sample.unsupported", new UnsupportedContext(), observationRegistry).stop();
-        Observation.start("sample.ignored", new CustomContext(), observationRegistry).stop();
+        Observation.start("sample.unsupported", UnsupportedContext::new, observationRegistry).stop();
+        Observation.start("sample.ignored", CustomContext::new, observationRegistry).stop();
 
         System.out.println("--- Meters:");
         System.out.println(registry.getMetersAsString());

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/httpcomponents/ApacheHttpClientObservationDocumentation.java
Patch:
@@ -18,14 +18,14 @@
 import io.micrometer.common.docs.KeyName;
 import io.micrometer.observation.Observation;
 import io.micrometer.observation.ObservationConvention;
-import io.micrometer.observation.docs.DocumentedObservation;
+import io.micrometer.observation.docs.ObservationDocumentation;
 
 /**
- * {@link DocumentedObservation} for Apache HTTP client instrumentation.
+ * {@link ObservationDocumentation} for Apache HTTP client instrumentation.
  * @since 1.10.0
  * @see MicrometerHttpRequestExecutor
  */
-public enum ApacheHttpClientDocumentedObservation implements DocumentedObservation {
+public enum ApacheHttpClientObservationDocumentation implements ObservationDocumentation {
 
     DEFAULT {
         @Override

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jersey/server/JerseyObservationDocumentation.java
Patch:
@@ -19,16 +19,16 @@
 import io.micrometer.common.lang.NonNullApi;
 import io.micrometer.observation.Observation;
 import io.micrometer.observation.ObservationConvention;
-import io.micrometer.observation.docs.DocumentedObservation;
+import io.micrometer.observation.docs.ObservationDocumentation;
 
 /**
- * A {@link DocumentedObservation} for Jersey.
+ * A {@link ObservationDocumentation} for Jersey.
  *
  * @author Marcin Grzejszczak
  * @since 1.10.0
  */
 @NonNullApi
-public enum JerseyDocumentedObservation implements DocumentedObservation {
+public enum JerseyObservationDocumentation implements ObservationDocumentation {
 
     /**
      * Default observation for Jersey.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jersey/server/ObservationRequestEventListener.java
Patch:
@@ -67,7 +67,7 @@ public void onEvent(RequestEvent event) {
                 }
             case REQUEST_MATCHED:
                 JerseyContext jerseyContext = new JerseyContext(event);
-                Observation observation = JerseyDocumentedObservation.DEFAULT.start(this.jerseyObservationConvention,
+                Observation observation = JerseyObservationDocumentation.DEFAULT.start(this.jerseyObservationConvention,
                         new DefaultJerseyObservationConvention(this.metricName), jerseyContext, this.registry);
                 Observation.Scope scope = observation.openScope();
                 observations.put(event.getContainerRequest(), new ObservationScopeAndContext(scope, jerseyContext));

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/okhttp3/DefaultOkHttpObservationConvention.java
Patch:
@@ -33,7 +33,7 @@
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 
-import static io.micrometer.core.instrument.binder.okhttp3.OkHttpDocumentedObservation.OkHttpLegacyLowCardinalityTags.*;
+import static io.micrometer.core.instrument.binder.okhttp3.OkHttpObservationDocumentation.OkHttpLegacyLowCardinalityTags.*;
 import static java.util.stream.Collectors.toList;
 import static java.util.stream.StreamSupport.stream;
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/okhttp3/OkHttpObservationDocumentation.java
Patch:
@@ -19,16 +19,16 @@
 import io.micrometer.common.lang.NonNullApi;
 import io.micrometer.observation.Observation;
 import io.micrometer.observation.ObservationConvention;
-import io.micrometer.observation.docs.DocumentedObservation;
+import io.micrometer.observation.docs.ObservationDocumentation;
 
 /**
- * A {@link DocumentedObservation} for OkHttp3 metrics.
+ * A {@link ObservationDocumentation} for OkHttp3 metrics.
  *
  * @author Marcin Grzejszczak
  * @since 1.10.0
  */
 @NonNullApi
-public enum OkHttpDocumentedObservation implements DocumentedObservation {
+public enum OkHttpObservationDocumentation implements ObservationDocumentation {
 
     /**
      * Default observation for OK HTTP.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/okhttp3/OkHttpObservationInterceptor.java
Patch:
@@ -86,7 +86,7 @@ public Response intercept(@NonNull Chain chain) throws IOException {
                 this.unknownRequestTags, this.includeHostTag, request);
         okHttpContext.setCarrier(newRequestBuilder);
         okHttpContext.setState(new CallState(newRequestBuilder.build()));
-        Observation observation = OkHttpDocumentedObservation.DEFAULT.observation(this.observationConvention,
+        Observation observation = OkHttpObservationDocumentation.DEFAULT.observation(this.observationConvention,
                 new DefaultOkHttpObservationConvention(requestMetricName), okHttpContext, this.registry).start();
         Request newRequest = newRequestBuilder.build();
         OkHttpObservationInterceptor.CallState callState = new CallState(newRequest);

File: micrometer-core/src/main/java11/io/micrometer/core/instrument/binder/jdk/DefaultHttpClientObservationConvention.java
Patch:
@@ -43,11 +43,11 @@ public KeyValues getLowCardinalityKeyValues(HttpClientContext context) {
         }
         HttpRequest httpRequest = context.getCarrier().build();
         KeyValues keyValues = KeyValues.of(
-                HttpClientDocumentedObservation.LowCardinalityKeys.METHOD.withValue(httpRequest.method()),
-                HttpClientDocumentedObservation.LowCardinalityKeys.URI
+                HttpClientObservationDocumentation.LowCardinalityKeys.METHOD.withValue(httpRequest.method()),
+                HttpClientObservationDocumentation.LowCardinalityKeys.URI
                         .withValue(getUriTag(httpRequest, context.getResponse(), context.getUriMapper())));
         if (context.getResponse() != null) {
-            keyValues = keyValues.and(HttpClientDocumentedObservation.LowCardinalityKeys.STATUS
+            keyValues = keyValues.and(HttpClientObservationDocumentation.LowCardinalityKeys.STATUS
                     .withValue(String.valueOf(context.getResponse().statusCode())));
         }
         return keyValues;

File: micrometer-core/src/main/java11/io/micrometer/core/instrument/binder/jdk/HttpClientObservationDocumentation.java
Patch:
@@ -18,9 +18,9 @@
 import io.micrometer.common.docs.KeyName;
 import io.micrometer.observation.Observation;
 import io.micrometer.observation.ObservationConvention;
-import io.micrometer.observation.docs.DocumentedObservation;
+import io.micrometer.observation.docs.ObservationDocumentation;
 
-enum HttpClientDocumentedObservation implements DocumentedObservation {
+enum HttpClientObservationDocumentation implements ObservationDocumentation {
 
     /**
      * Observation when an HTTP call is being made.

File: micrometer-core/src/main/java11/io/micrometer/core/instrument/binder/jdk/MicrometerHttpClient.java
Patch:
@@ -233,11 +233,11 @@ private <T> void stopObservationOrTimer(
             @Nullable HttpResponse<T> res) {
         instrumentation.stop(DefaultHttpClientObservationConvention.INSTANCE.getName(), "Timer for JDK's HttpClient",
                 () -> {
-                    Tags tags = Tags.of(HttpClientDocumentedObservation.LowCardinalityKeys.METHOD.asString(),
-                            request.method(), HttpClientDocumentedObservation.LowCardinalityKeys.URI.asString(),
+                    Tags tags = Tags.of(HttpClientObservationDocumentation.LowCardinalityKeys.METHOD.asString(),
+                            request.method(), HttpClientObservationDocumentation.LowCardinalityKeys.URI.asString(),
                             DefaultHttpClientObservationConvention.INSTANCE.getUriTag(request, res, uriMapper));
                     if (res != null) {
-                        tags = tags.and(Tag.of(HttpClientDocumentedObservation.LowCardinalityKeys.STATUS.asString(),
+                        tags = tags.and(Tag.of(HttpClientObservationDocumentation.LowCardinalityKeys.STATUS.asString(),
                                 String.valueOf(res.statusCode())));
                     }
                     return tags;

File: micrometer-observation/src/main/java/io/micrometer/observation/aop/ObservedAspect.java
Patch:
@@ -129,7 +129,7 @@ public Object observeMethod(ProceedingJoinPoint pjp) throws Throwable {
     }
 
     private Object observe(ProceedingJoinPoint pjp, Method method, Observed observed) throws Throwable {
-        Observation observation = ObservedAspectObservation.of(pjp, observed, this.registry,
+        Observation observation = ObservedAspectObservationDocumentation.of(pjp, observed, this.registry,
                 this.observationConvention);
         if (CompletionStage.class.isAssignableFrom(method.getReturnType())) {
             observation.start();

File: micrometer-observation/src/test/java/io/micrometer/observation/docs/ObservationDocumentationTests.java
Patch:
@@ -32,7 +32,7 @@
 import static org.assertj.core.api.BDDAssertions.then;
 import static org.assertj.core.api.BDDAssertions.thenThrownBy;
 
-class DocumentedObservationTests {
+class ObservationDocumentationTests {
 
     @Test
     void iseShouldBeThrownWhenDocumentedObservationHasNotOverriddenDefaultConvention() {
@@ -142,7 +142,7 @@ private ObservationRegistry observationRegistry() {
         return registry;
     }
 
-    enum TestConventionObservation implements DocumentedObservation {
+    enum TestConventionObservation implements ObservationDocumentation {
 
         NOT_OVERRIDDEN_METHODS {
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/httpcomponents/DefaultApacheHttpClientObservationConvention.java
Patch:
@@ -59,7 +59,7 @@ public KeyValues getLowCardinalityKeyValues(ApacheHttpClientContext context) {
                 ApacheHttpClientDocumentedObservation.ApacheHttpClientKeyNames.URI
                         .withValue(context.getUriMapper().apply(context.getCarrier())),
                 ApacheHttpClientDocumentedObservation.ApacheHttpClientKeyNames.STATUS
-                        .withValue(getStatusValue(context.getResponse(), context.getError().orElse(null))));
+                        .withValue(getStatusValue(context.getResponse(), context.getError())));
         if (context.shouldExportTagsForRoute()) {
             keyValues = keyValues.and(HttpContextUtils.generateTagStringsForRoute(context.getApacheHttpContext()));
         }

File: micrometer-observation/src/test/java/io/micrometer/observation/docs/DocumentedObservationTests.java
Patch:
@@ -130,7 +130,7 @@ void createNotStartedShouldNotCreateContextWithNoopRegistry() {
             return new Observation.Context();
         };
 
-        Observation observation = TestConventionObservation.CONTEXTUAL_NAME.createNotStarted(null,
+        Observation observation = TestConventionObservation.CONTEXTUAL_NAME.observation(null,
                 new FirstObservationConvention(), supplier, registry);
         assertThat(observation.isNoop()).isTrue();
         assertThat(isCalled).isFalse();

File: implementations/micrometer-registry-cloudwatch/src/main/java/io/micrometer/cloudwatch/CloudWatchMeterRegistry.java
Patch:
@@ -293,7 +293,8 @@ private List<Dimension> toDimensions(List<Tag> tags) {
 
         private boolean isAcceptableTag(Tag tag) {
             if (StringUtils.isBlank(tag.getValue())) {
-                warnThenDebugLogger.log("Dropping a tag with key '" + tag.getKey() + "' because its value is blank.");
+                warnThenDebugLogger
+                        .log(() -> "Dropping a tag with key '" + tag.getKey() + "' because its value is blank.");
                 return false;
             }
             return true;

File: implementations/micrometer-registry-cloudwatch2/src/main/java/io/micrometer/cloudwatch2/CloudWatchMeterRegistry.java
Patch:
@@ -275,7 +275,7 @@ private MetricDatum metricDatum(Meter.Id id, @Nullable String suffix, StandardUn
 
             List<Tag> tags = id.getConventionTags(config().namingConvention());
             if (tags.size() > MAX_DIMENSIONS_SIZE) {
-                tooManyTagsLogger.log("Meter " + id.getName() + " has more tags (" + tags.size()
+                tooManyTagsLogger.log(() -> "Meter " + id.getName() + " has more tags (" + tags.size()
                         + ") than the max supported by CloudWatch (" + MAX_DIMENSIONS_SIZE
                         + "). Some tags will be dropped.");
             }
@@ -306,7 +306,8 @@ private List<Dimension> toDimensions(List<Tag> tags) {
 
         private boolean isAcceptableTag(Tag tag) {
             if (StringUtils.isBlank(tag.getValue())) {
-                blankTagValueLogger.log("Dropping a tag with key '" + tag.getKey() + "' because its value is blank.");
+                blankTagValueLogger
+                        .log(() -> "Dropping a tag with key '" + tag.getKey() + "' because its value is blank.");
                 return false;
             }
             return true;

File: implementations/micrometer-registry-dynatrace/src/main/java/io/micrometer/dynatrace/v1/DynatraceNamingConventionV1.java
Patch:
@@ -64,7 +64,7 @@ private String sanitizeName(String name) {
         }
         String sanitized = NAME_CLEANUP_PATTERN.matcher(name).replaceAll("_");
         if (LEADING_NUMERIC_PATTERN.matcher(sanitized).find()) {
-            logger.log("'" + sanitized + "' (original name: '" + name + "') is not a valid meter name. "
+            logger.log(() -> "'" + sanitized + "' (original name: '" + name + "') is not a valid meter name. "
                     + "Dynatrace doesn't allow leading numeric characters after non-alphabets. "
                     + "Please rename it to conform to the constraints. "
                     + "If it comes from a third party, please use MeterFilter to rename it.");

File: implementations/micrometer-registry-signalfx/src/main/java/io/micrometer/signalfx/SignalFxNamingConvention.java
Patch:
@@ -89,7 +89,8 @@ public String tagKey(String key) {
             conventionKey = "a" + conventionKey;
         }
         if (PATTERN_TAG_KEY_DENYLISTED_PREFIX.matcher(conventionKey).matches()) {
-            logger.log("'" + conventionKey + "' (original name: '" + key + "') is not a valid tag key. "
+            String finalConventionKey = conventionKey;
+            logger.log(() -> "'" + finalConventionKey + "' (original name: '" + key + "') is not a valid tag key. "
                     + "Must not start with any of these prefixes: aws_, gcp_, or azure_. "
                     + "Please rename it to conform to the constraints. "
                     + "If it comes from a third party, please use MeterFilter to rename it.");

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdMeterRegistry.java
Patch:
@@ -183,7 +183,7 @@ void poll() {
                 pollableMeter.getValue().poll();
             }
             catch (RuntimeException e) {
-                warnThenDebugLogger.log("Failed to poll a meter '" + pollableMeter.getKey().getName() + "'.", e);
+                warnThenDebugLogger.log(() -> "Failed to poll a meter '" + pollableMeter.getKey().getName() + "'.", e);
             }
         }
     }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/HighCardinalityTagsDetector.java
Patch:
@@ -169,7 +169,7 @@ public Optional<String> findFirst() {
     }
 
     private void logWarning(String name) {
-        WARN_THEN_DEBUG_LOGGER.log(String.format("It seems %s has high cardinality tags (threshold: %d meters).\n"
+        WARN_THEN_DEBUG_LOGGER.log(() -> String.format("It seems %s has high cardinality tags (threshold: %d meters).\n"
                 + "Check your configuration for the instrumentation of %s to find and fix the cause of the high cardinality (see: https://micrometer.io/docs/concepts#_tag_values).\n"
                 + "If the cardinality is expected and acceptable, raise the threshold for this %s.", name,
                 this.threshold, name, getClass().getSimpleName()));

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/kafka/KafkaMetrics.java
Patch:
@@ -227,7 +227,7 @@ else if (tags.size() == meterTagsWithCommonTags.size())
                     catch (Exception ex) {
                         String message = ex.getMessage();
                         if (message != null && message.contains("Prometheus requires")) {
-                            warnThenDebugLogger.log("Failed to bind meter: " + meterName + " " + tags
+                            warnThenDebugLogger.log(() -> "Failed to bind meter: " + meterName + " " + tags
                                     + ". However, this could happen and might be restored in the next refresh.");
                         }
                         else {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/dropwizard/DropwizardMeterRegistry.java
Patch:
@@ -95,7 +95,7 @@ protected <T> io.micrometer.core.instrument.Gauge newGauge(Meter.Id id, @Nullabl
                     return valueFunction.applyAsDouble(obj2);
                 }
                 catch (Throwable ex) {
-                    logger.log("Failed to apply the value function for the gauge '" + id.getName() + "'.", ex);
+                    logger.log(() -> "Failed to apply the value function for the gauge '" + id.getName() + "'.", ex);
                 }
             }
             return nullGaugeValue();

File: micrometer-core/src/main/java/io/micrometer/core/instrument/internal/DefaultGauge.java
Patch:
@@ -53,7 +53,7 @@ public double value() {
                 return value.applyAsDouble(obj);
             }
             catch (Throwable ex) {
-                logger.log("Failed to apply the value function for the gauge '" + getId().getName() + "'.", ex);
+                logger.log(() -> "Failed to apply the value function for the gauge '" + getId().getName() + "'.", ex);
             }
         }
         return Double.NaN;

File: implementations/micrometer-registry-cloudwatch/src/main/java/io/micrometer/cloudwatch/CloudWatchMeterRegistry.java
Patch:
@@ -301,7 +301,8 @@ private List<Dimension> toDimensions(List<Tag> tags) {
 
         private boolean isAcceptableTag(Tag tag) {
             if (StringUtils.isBlank(tag.getValue())) {
-                warnThenDebugLogger.log("Dropping a tag with key '" + tag.getKey() + "' because its value is blank.");
+                warnThenDebugLogger
+                        .log(() -> "Dropping a tag with key '" + tag.getKey() + "' because its value is blank.");
                 return false;
             }
             return true;

File: implementations/micrometer-registry-cloudwatch2/src/main/java/io/micrometer/cloudwatch2/CloudWatchMeterRegistry.java
Patch:
@@ -295,7 +295,8 @@ private List<Dimension> toDimensions(List<Tag> tags) {
 
         private boolean isAcceptableTag(Tag tag) {
             if (StringUtils.isBlank(tag.getValue())) {
-                warnThenDebugLogger.log("Dropping a tag with key '" + tag.getKey() + "' because its value is blank.");
+                warnThenDebugLogger
+                        .log(() -> "Dropping a tag with key '" + tag.getKey() + "' because its value is blank.");
                 return false;
             }
             return true;

File: implementations/micrometer-registry-dynatrace/src/main/java/io/micrometer/dynatrace/v1/DynatraceNamingConventionV1.java
Patch:
@@ -64,7 +64,7 @@ private String sanitizeName(String name) {
         }
         String sanitized = NAME_CLEANUP_PATTERN.matcher(name).replaceAll("_");
         if (LEADING_NUMERIC_PATTERN.matcher(sanitized).find()) {
-            logger.log("'" + sanitized + "' (original name: '" + name + "') is not a valid meter name. "
+            logger.log(() -> "'" + sanitized + "' (original name: '" + name + "') is not a valid meter name. "
                     + "Dynatrace doesn't allow leading numeric characters after non-alphabets. "
                     + "Please rename it to conform to the constraints. "
                     + "If it comes from a third party, please use MeterFilter to rename it.");

File: implementations/micrometer-registry-signalfx/src/main/java/io/micrometer/signalfx/SignalFxNamingConvention.java
Patch:
@@ -89,7 +89,8 @@ public String tagKey(String key) {
             conventionKey = "a" + conventionKey;
         }
         if (PATTERN_TAG_KEY_DENYLISTED_PREFIX.matcher(conventionKey).matches()) {
-            logger.log("'" + conventionKey + "' (original name: '" + key + "') is not a valid tag key. "
+            String finalConventionKey = conventionKey;
+            logger.log(() -> "'" + finalConventionKey + "' (original name: '" + key + "') is not a valid tag key. "
                     + "Must not start with any of these prefixes: aws_, gcp_, or azure_. "
                     + "Please rename it to conform to the constraints. "
                     + "If it comes from a third party, please use MeterFilter to rename it.");

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdMeterRegistry.java
Patch:
@@ -182,7 +182,7 @@ void poll() {
                 pollableMeter.getValue().poll();
             }
             catch (RuntimeException e) {
-                warnThenDebugLogger.log("Failed to poll a meter '" + pollableMeter.getKey().getName() + "'.", e);
+                warnThenDebugLogger.log(() -> "Failed to poll a meter '" + pollableMeter.getKey().getName() + "'.", e);
             }
         }
     }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/kafka/KafkaMetrics.java
Patch:
@@ -227,7 +227,7 @@ else if (tags.size() == meterTagsWithCommonTags.size())
                     catch (Exception ex) {
                         String message = ex.getMessage();
                         if (message != null && message.contains("Prometheus requires")) {
-                            warnThenDebugLogger.log("Failed to bind meter: " + meterName + " " + tags
+                            warnThenDebugLogger.log(() -> "Failed to bind meter: " + meterName + " " + tags
                                     + ". However, this could happen and might be restored in the next refresh.");
                         }
                         else {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/dropwizard/DropwizardMeterRegistry.java
Patch:
@@ -95,7 +95,7 @@ protected <T> io.micrometer.core.instrument.Gauge newGauge(Meter.Id id, @Nullabl
                     return valueFunction.applyAsDouble(obj2);
                 }
                 catch (Throwable ex) {
-                    logger.log("Failed to apply the value function for the gauge '" + id.getName() + "'.", ex);
+                    logger.log(() -> "Failed to apply the value function for the gauge '" + id.getName() + "'.", ex);
                 }
             }
             return nullGaugeValue();

File: micrometer-core/src/main/java/io/micrometer/core/instrument/internal/DefaultGauge.java
Patch:
@@ -53,7 +53,7 @@ public double value() {
                 return value.applyAsDouble(obj);
             }
             catch (Throwable ex) {
-                logger.log("Failed to apply the value function for the gauge '" + getId().getName() + "'.", ex);
+                logger.log(() -> "Failed to apply the value function for the gauge '" + getId().getName() + "'.", ex);
             }
         }
         return Double.NaN;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/httpcomponents/MicrometerHttpRequestExecutor.java
Patch:
@@ -117,11 +117,12 @@ public HttpResponse execute(HttpRequest request, HttpClientConnection conn, Http
         try {
             HttpResponse response = super.execute(request, conn, context);
             sample.setResponse(response);
-            statusCodeOrError = DefaultApacheHttpClientObservationConvention.INSTANCE.getStatusValue(response);
+            statusCodeOrError = DefaultApacheHttpClientObservationConvention.INSTANCE.getStatusValue(response, null);
             return response;
         }
         catch (IOException | HttpException | RuntimeException e) {
             statusCodeOrError = "IO_ERROR";
+            sample.setThrowable(e);
             throw e;
         }
         finally {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/kotlin/KotlinObservationContextElement.java
Patch:
@@ -41,8 +41,8 @@ class KotlinObservationContextElement implements ThreadContextElement<ContextSna
 
     KotlinObservationContextElement(ObservationRegistry observationRegistry, ContextRegistry contextRegistry) {
         this.observationRegistry = observationRegistry;
-        this.contextSnapshot = ContextSnapshot.captureUsing(contextRegistry,
-                ObservationThreadLocalAccessor.KEY::equals);
+        this.contextSnapshot = ContextSnapshot.captureAllUsing(ObservationThreadLocalAccessor.KEY::equals,
+                contextRegistry);
     }
 
     @Override
@@ -57,7 +57,7 @@ Observation getCurrentObservation() {
     @Override
     @SuppressWarnings("MustBeClosedChecker")
     public ContextSnapshot.Scope updateThreadContext(CoroutineContext coroutineContext) {
-        return this.contextSnapshot.setThreadLocalValues(ObservationThreadLocalAccessor.KEY::equals);
+        return this.contextSnapshot.setThreadLocals(ObservationThreadLocalAccessor.KEY::equals);
     }
 
     @Override

File: micrometer-observation/src/test/java/io/micrometer/observation/aop/ObservedAspectTests.java
Patch:
@@ -18,6 +18,7 @@
 import io.micrometer.common.KeyValues;
 import io.micrometer.common.lang.NonNull;
 import io.micrometer.common.lang.Nullable;
+import io.micrometer.context.ContextRegistry;
 import io.micrometer.context.ContextSnapshot;
 import io.micrometer.observation.Observation;
 import io.micrometer.observation.ObservationTextPublisher;
@@ -301,7 +302,7 @@ void error() {
         @Observed(name = "test.async")
         CompletableFuture<String> async(FakeAsyncTask fakeAsyncTask) {
             System.out.println("async");
-            ContextSnapshot contextSnapshot = ContextSnapshot.captureUsing(o -> true);
+            ContextSnapshot contextSnapshot = ContextSnapshot.captureAllUsing(o -> true, ContextRegistry.getInstance());
             return CompletableFuture.supplyAsync(fakeAsyncTask,
                     contextSnapshot.wrapExecutor(Executors.newSingleThreadExecutor()));
         }
@@ -323,7 +324,7 @@ void error() {
 
         CompletableFuture<String> async(FakeAsyncTask fakeAsyncTask) {
             System.out.println("async");
-            ContextSnapshot contextSnapshot = ContextSnapshot.captureUsing(o -> true);
+            ContextSnapshot contextSnapshot = ContextSnapshot.captureAllUsing(o -> true, ContextRegistry.getInstance());
             return CompletableFuture.supplyAsync(fakeAsyncTask,
                     contextSnapshot.wrapExecutor(Executors.newSingleThreadExecutor()));
         }

File: micrometer-observation/src/test/java/io/micrometer/observation/contextpropagation/ObservationThreadLocalAccessorTests.java
Patch:
@@ -44,13 +44,13 @@ void capturedThreadLocalValuesShouldBeCapturedRestoredAndCleared() {
         ContextSnapshot container;
         try (Observation.Scope scope = observation.openScope()) {
             then(observationRegistry.getCurrentObservation()).isSameAs(observation);
-            container = ContextSnapshot.captureUsing(registry, key -> true);
+            container = ContextSnapshot.captureAllUsing(key -> true, registry);
         }
 
         then(observationRegistry.getCurrentObservation()).isNull();
 
         // when restored
-        try (ContextSnapshot.Scope scope = container.setThreadLocalValues()) {
+        try (ContextSnapshot.Scope scope = container.setThreadLocals()) {
             then(observationRegistry.getCurrentObservation()).isSameAs(observation);
         }
 

File: micrometer-commons/src/main/java/io/micrometer/common/KeyValue.java
Patch:
@@ -65,7 +65,8 @@ static <T> KeyValue of(String key, T value, Predicate<? super T> validator) {
     }
 
     /**
-     * Creates a {@link KeyValue} for the given {@link KeyName} and value.
+     * Creates a {@link KeyValue} for the given {@link KeyName} and value and additionally
+     * validates it with the {@link Predicate}.
      * @param keyName name of the key of the KeyValue
      * @param value value for key
      * @param validator the {@link Predicate} used for validating the value

File: micrometer-observation/src/main/java/io/micrometer/observation/Observation.java
Patch:
@@ -972,7 +972,9 @@ static Event of(String name) {
          * {@link String#format(String, Object...)}.
          * @return the contextual name of the event.
          */
-        String getContextualName();
+        default String getContextualName() {
+            return getName();
+        }
 
         /**
          * Creates an event for the given key name.

File: micrometer-observation-test/src/main/java/io/micrometer/observation/tck/AnyContextObservationHandlerCompatibilityKit.java
Patch:
@@ -41,7 +41,7 @@ void handlerSupportsAnyContext() {
         assertThatCode(() -> handler.onStart(testContext)).doesNotThrowAnyException();
         assertThatCode(() -> handler.onStop(testContext)).doesNotThrowAnyException();
         assertThatCode(() -> handler.onError(testContext)).doesNotThrowAnyException();
-        assertThatCode(() -> handler.onEvent(new Observation.Event("testEvent"), testContext))
+        assertThatCode(() -> handler.onEvent(Observation.Event.of("testEvent"), testContext))
                 .doesNotThrowAnyException();
         assertThatCode(() -> handler.onScopeOpened(testContext)).doesNotThrowAnyException();
         assertThatCode(() -> handler.supportsContext(testContext)).doesNotThrowAnyException();

File: micrometer-observation-test/src/main/java/io/micrometer/observation/tck/ConcreteContextObservationHandlerCompatibilityKit.java
Patch:
@@ -58,7 +58,7 @@ void handlerSupportsConcreteContextForHandlerMethods() {
         assertThatCode(() -> handler.onStart(context())).doesNotThrowAnyException();
         assertThatCode(() -> handler.onStop(context())).doesNotThrowAnyException();
         assertThatCode(() -> handler.onError(context())).doesNotThrowAnyException();
-        assertThatCode(() -> handler.onEvent(new Observation.Event("testEvent"), context())).doesNotThrowAnyException();
+        assertThatCode(() -> handler.onEvent(Observation.Event.of("testEvent"), context())).doesNotThrowAnyException();
         assertThatCode(() -> handler.onScopeOpened(context())).doesNotThrowAnyException();
     }
 

File: micrometer-observation-test/src/main/java/io/micrometer/observation/tck/ObservationRegistryCompatibilityKit.java
Patch:
@@ -81,7 +81,7 @@ void observeWithHandlers() {
             inOrder.verify(handler).onScopeOpened(isA(Observation.Context.class));
             assertThat(scope.getCurrentObservation()).isSameAs(observation);
 
-            Observation.Event event = new Observation.Event("testEvent", "event for testing");
+            Observation.Event event = Observation.Event.of("testEvent", "event for testing");
             observation.event(event);
             inOrder.verify(handler).onEvent(same(event), isA(Observation.Context.class));
 

File: micrometer-observation/src/main/java/io/micrometer/observation/SimpleObservation.java
Patch:
@@ -46,7 +46,7 @@ class SimpleObservation implements Observation {
 
     private final Collection<ObservationFilter> filters;
 
-    SimpleObservation(String name, ObservationRegistry registry, Context context) {
+    SimpleObservation(@Nullable String name, ObservationRegistry registry, Context context) {
         this.registry = registry;
         this.context = context;
         this.context.setName(name);

File: micrometer-observation/src/test/java/io/micrometer/observation/AllMatchingCompositeObservationHandlerTests.java
Patch:
@@ -67,7 +67,7 @@ void should_run_on_event_for_all_matching_handlers() {
         AllMatchingCompositeObservationHandler allMatchingHandler = new AllMatchingCompositeObservationHandler(
                 new NotMatchingHandler(), this.matchingHandler, new NotMatchingHandler(), this.matchingHandler2);
 
-        allMatchingHandler.onEvent(new Observation.Event("testEvent"), null);
+        allMatchingHandler.onEvent(Observation.Event.of("testEvent"), null);
 
         assertThat(this.matchingHandler.eventDetected).isTrue();
         assertThat(this.matchingHandler2.eventDetected).isTrue();

File: micrometer-observation/src/test/java/io/micrometer/observation/FirstMatchingCompositeObservationHandlerTests.java
Patch:
@@ -62,7 +62,7 @@ void should_run_on_event_only_for_first_matching_handler() {
         FirstMatchingCompositeObservationHandler firstMatchingHandler = new FirstMatchingCompositeObservationHandler(
                 new NotMatchingHandler(), this.matchingHandler, new NotMatchingHandler());
 
-        firstMatchingHandler.onEvent(new Observation.Event("testEvent"), null);
+        firstMatchingHandler.onEvent(Observation.Event.of("testEvent"), null);
 
         assertThat(this.matchingHandler.eventDetected).isTrue();
     }

File: micrometer-test/src/main/java/io/micrometer/core/tck/MeterRegistryCompatibilityKit.java
Patch:
@@ -642,7 +642,7 @@ void recordWithObservation() {
             observation.lowCardinalityKeyValue("dynamicTag", "24");
 
             clock(registry).add(1, TimeUnit.SECONDS);
-            observation.event(new Observation.Event("testEvent", "event for testing"));
+            observation.event(Observation.Event.of("testEvent", "event for testing"));
 
             LongTaskTimer longTaskTimer = registry.more().longTaskTimer("myObservation.active", "staticTag", "42");
             assertThat(longTaskTimer.activeTasks()).isEqualTo(1);
@@ -667,7 +667,7 @@ void recordWithObservationAndScope() {
             try (Observation.Scope scope = observation.openScope()) {
                 assertThat(scope.getCurrentObservation()).isSameAs(observation);
                 clock(registry).add(10, TimeUnit.NANOSECONDS);
-                observation.event(new Observation.Event("testEvent", "event for testing"));
+                observation.event(Observation.Event.of("testEvent", "event for testing"));
             }
             observation.stop();
             clock(registry).add(step());

File: samples/micrometer-samples-core/src/main/java/io/micrometer/core/samples/ObservationHandlerSample.java
Patch:
@@ -47,7 +47,7 @@ public static void main(String[] args) throws InterruptedException {
 
         try (Observation.Scope scope = observation.openScope()) {
             Thread.sleep(1_000);
-            observation.event(new Observation.Event("custom.event", "Custom " + UUID.randomUUID()));
+            observation.event(Observation.Event.of("custom.event", "Custom " + UUID.randomUUID()));
             observation.error(new IOException("simulated"));
         }
 

File: implementations/micrometer-registry-signalfx/src/main/java/io/micrometer/signalfx/SignalfxTimer.java
Patch:
@@ -98,7 +98,8 @@ public HistogramSnapshot takeSnapshot() {
                 currentSnapshot.total(), // Already delta in sfx implementation
                 currentSnapshot.max(), // Max cannot be calculated as delta, keep the
                                        // current.
-                null, // No percentile values
+                currentSnapshot.percentileValues(), // No changes to the percentile
+                                                    // values.
                 deltaHistogramCounts.calculate(currentSnapshot.histogramCounts()), currentSnapshot::outputSummary);
     }
 

File: micrometer-observation/src/main/java/io/micrometer/observation/transport/RequestReplyReceiverContext.java
Patch:
@@ -27,7 +27,7 @@
  * @param <C> type of the carrier object
  * @param <RES> type of the response object
  */
-public class RequestReplyReceiverContext<C, RES> extends ReceiverContext<C> {
+public class RequestReplyReceiverContext<C, RES> extends ReceiverContext<C> implements ResponseContext<RES> {
 
     @Nullable
     private RES response;
@@ -49,11 +49,13 @@ public RequestReplyReceiverContext(@NonNull Propagator.Getter<C> getter) {
         this(getter, Kind.SERVER);
     }
 
+    @Override
     @Nullable
     public RES getResponse() {
         return response;
     }
 
+    @Override
     public void setResponse(RES response) {
         this.response = response;
     }

File: micrometer-observation/src/main/java/io/micrometer/observation/transport/RequestReplySenderContext.java
Patch:
@@ -27,7 +27,7 @@
  * @param <C> type of the carrier object
  * @param <RES> type of the response object
  */
-public class RequestReplySenderContext<C, RES> extends SenderContext<C> {
+public class RequestReplySenderContext<C, RES> extends SenderContext<C> implements ResponseContext<RES> {
 
     @Nullable
     private RES response;
@@ -49,11 +49,13 @@ public RequestReplySenderContext(@NonNull Propagator.Setter<C> setter) {
         this(setter, Kind.CLIENT);
     }
 
+    @Override
     @Nullable
     public RES getResponse() {
         return response;
     }
 
+    @Override
     public void setResponse(RES response) {
         this.response = response;
     }

File: micrometer-observation/src/main/java/io/micrometer/observation/transport/RequestReplySenderContext.java
Patch:
@@ -21,6 +21,7 @@
 /**
  * Context used when sending data over the wire with the idea that you'll wait for some
  * response from the recipient.
+ *
  * @author Marcin Grzejszczak
  * @since 1.10.0
  * @param <C> type of the carrier object

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/system/ProcessorMetrics.java
Patch:
@@ -130,7 +130,7 @@ private Method detectMethod(String name) {
         try {
             // ensure the Bean we have is actually an instance of the interface
             operatingSystemBeanClass.cast(operatingSystemBean);
-            return operatingSystemBeanClass.getDeclaredMethod(name);
+            return operatingSystemBeanClass.getMethod(name);
         }
         catch (ClassCastException | NoSuchMethodException | SecurityException e) {
             return null;

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/system/ProcessorMetricsTest.java
Patch:
@@ -72,6 +72,7 @@ void openJ9CpuMetrics() {
          * supported system. Thread.sleep() is flaky, though.
          */
         assertThat(registry.get("system.cpu.usage").gauge().value()).isGreaterThanOrEqualTo(-1);
+        assertThat(registry.get("system.cpu.usage").gauge().value()).isGreaterThan(0);
         assertThat(registry.get("process.cpu.usage").gauge().value()).isGreaterThanOrEqualTo(-1);
     }
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jersey/server/JerseyTags.java
Patch:
@@ -87,7 +87,7 @@ public static Tag uri(RequestEvent event) {
         ContainerResponse response = event.getContainerResponse();
         if (response != null) {
             int status = response.getStatus();
-            if (isRedirection(status)) {
+            if (isRedirection(status) && event.getUriInfo().getMatchedResourceMethod() == null) {
                 return URI_REDIRECTION;
             }
             if (status == 404 && event.getUriInfo().getMatchedResourceMethod() == null) {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/GuavaCacheMetrics.java
Patch:
@@ -114,13 +114,14 @@ protected void bindImplementationSpecificMetrics(MeterRegistry registry) {
 
             FunctionCounter.builder("cache.load", cache, c -> c.stats().loadSuccessCount()).tags(getTagsWithCacheName())
                     .tags("result", "success")
-                    .description("The number of times cache lookup methods have successfully loaded a new value")
+                    .description(
+                            "The number of times cache lookup methods have successfully loaded a new value or failed to load a new value because an exception was thrown while loading")
                     .register(registry);
 
             FunctionCounter.builder("cache.load", cache, c -> c.stats().loadExceptionCount())
                     .tags(getTagsWithCacheName()).tags("result", "failure")
                     .description(
-                            "The number of times cache lookup methods threw an exception while loading a new value")
+                            "The number of times cache lookup methods have successfully loaded a new value or failed to load a new value because an exception was thrown while loading")
                     .register(registry);
         }
     }

File: micrometer-commons/src/main/java/io/micrometer/common/ImmutableKeyValue.java
Patch:
@@ -69,7 +69,7 @@ public int hashCode() {
 
     @Override
     public String toString() {
-        return "tag(" + key + "=" + value + ")";
+        return "keyValue(" + key + "=" + value + ")";
     }
 
 }

File: micrometer-observation/src/main/java/io/micrometer/observation/docs/DocumentedObservation.java
Patch:
@@ -56,7 +56,7 @@ public interface DocumentedObservation {
     KeyName[] EMPTY = new KeyName[0];
 
     /**
-     * Default technical name (e.g metric name). You can set the name either by this
+     * Default technical name (e.g.: metric name). You can set the name either by this
      * method or {@link #getDefaultConvention()}. You can't use both.
      * @return name
      */
@@ -75,7 +75,7 @@ default Class<? extends Observation.ObservationConvention<? extends Observation.
     }
 
     /**
-     * More human readable name available within the given context (e.g. span name). You
+     * More human-readable name available within the given context (e.g.: span name). You
      * can set the name either by this method or {@link #getDefaultConvention()}. This
      * method will override what {@link #getDefaultConvention()} has set.
      * @return contextual name

File: micrometer-observation-test/src/test/java/io/micrometer/observation/tck/ObservationContextAssertTests.java
Patch:
@@ -426,7 +426,8 @@ void should_throw_when_has_specific_error_does_not_match() {
 
     @Test
     void should_jump_to_and_back_from_throwable_assert() {
-        context.setName("foo").setError(new RuntimeException("bar"));
+        context.setName("foo");
+        context.setError(new RuntimeException("bar"));
 
         thenNoException().isThrownBy(() -> assertThat(context).hasNameEqualTo("foo").thenError().hasMessage("bar")
                 .backToContext().hasNameEqualTo("foo"));

File: micrometer-observation/src/main/java/io/micrometer/observation/NoopObservation.java
Patch:
@@ -110,7 +110,7 @@ static final class NoopScope implements Scope {
         /**
          * Instance of {@link NoopScope}.
          */
-        public static final Scope INSTANCE = new NoopScope();
+        static final Scope INSTANCE = new NoopScope();
 
         private NoopScope() {
 

File: micrometer-test/src/main/java/io/micrometer/core/instrument/InstrumentationVerificationTests.java
Patch:
@@ -21,7 +21,7 @@ abstract class InstrumentationVerificationTests {
 
     private final MeterRegistry registry = new SimpleMeterRegistry();
 
-    MeterRegistry getRegistry() {
+    protected MeterRegistry getRegistry() {
         return registry;
     }
 

File: micrometer-test/src/test/java/io/micrometer/core/instrument/ApacheHttpClientTimingInstrumentationVerificationTests.java
Patch:
@@ -15,9 +15,9 @@
  */
 package io.micrometer.core.instrument;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.binder.httpcomponents.DefaultUriMapper;
 import io.micrometer.core.instrument.binder.httpcomponents.MicrometerHttpRequestExecutor;
-import io.micrometer.core.lang.Nullable;
 import org.apache.http.client.HttpClient;
 import org.apache.http.client.methods.HttpEntityEnclosingRequestBase;
 import org.apache.http.client.methods.HttpUriRequest;

File: micrometer-test/src/test/java/io/micrometer/core/instrument/JettyClientTimingInstrumentationVerificationTests.java
Patch:
@@ -15,8 +15,8 @@
  */
 package io.micrometer.core.instrument;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.binder.jetty.JettyClientMetrics;
-import io.micrometer.core.lang.Nullable;
 import org.eclipse.jetty.client.HttpClient;
 import org.eclipse.jetty.client.api.Request;
 import org.eclipse.jetty.client.util.BytesContentProvider;

File: micrometer-test/src/test/java/io/micrometer/core/instrument/OkHttpClientTimingInstrumentationVerificationTests.java
Patch:
@@ -15,8 +15,8 @@
  */
 package io.micrometer.core.instrument;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.binder.okhttp3.OkHttpMetricsEventListener;
-import io.micrometer.core.lang.Nullable;
 import okhttp3.OkHttpClient;
 import okhttp3.Request;
 import okhttp3.RequestBody;

File: micrometer-test/src/main/java/io/micrometer/core/instrument/HttpClientTimingInstrumentationVerificationTests.java
Patch:
@@ -17,8 +17,8 @@
 
 import com.github.tomakehurst.wiremock.junit5.WireMockRuntimeInfo;
 import com.github.tomakehurst.wiremock.junit5.WireMockTest;
-import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.annotation.Incubating;
+import io.micrometer.core.lang.Nullable;
 import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 

File: micrometer-observation/src/main/java/io/micrometer/observation/NoopObservation.java
Patch:
@@ -69,7 +69,7 @@ public Observation highCardinalityKeyValue(String key, String value) {
     }
 
     @Override
-    public Observation keyValuesProvider(KeyValuesProvider<?> keyValuesProvider) {
+    public Observation observationConvention(ObservationConvention<?> observationConvention) {
         return this;
     }
 

File: micrometer-observation/src/main/java/io/micrometer/observation/NoopObservationConvention.java
Patch:
@@ -48,17 +48,17 @@ public String getContextualName(Observation.Context context) {
 
     @Override
     public boolean supportsContext(Observation.Context context) {
-        return Observation.KeyValuesProvider.EMPTY.supportsContext(context);
+        return Observation.ObservationConvention.EMPTY.supportsContext(context);
     }
 
     @Override
     public KeyValues getLowCardinalityKeyValues(Observation.Context context) {
-        return Observation.KeyValuesProvider.EMPTY.getLowCardinalityKeyValues(context);
+        return Observation.ObservationConvention.EMPTY.getLowCardinalityKeyValues(context);
     }
 
     @Override
     public KeyValues getHighCardinalityKeyValues(Observation.Context context) {
-        return Observation.KeyValuesProvider.EMPTY.getHighCardinalityKeyValues(context);
+        return Observation.ObservationConvention.EMPTY.getHighCardinalityKeyValues(context);
     }
 
 }

File: micrometer-observation/src/main/java/io/micrometer/observation/aop/ObservedAspectObservation.java
Patch:
@@ -39,7 +39,7 @@ enum ObservedAspectObservation implements DocumentedObservation {
     DEFAULT;
 
     static Observation of(ProceedingJoinPoint pjp, Observed observed, ObservationRegistry registry,
-            @Nullable Observation.KeyValuesProvider<ObservedAspect.ObservedAspectContext> keyValuesProvider) {
+            @Nullable Observation.ObservationConvention<ObservedAspect.ObservedAspectContext> observationConvention) {
         String name = observed.name().isEmpty() ? "method.observed" : observed.name();
         Signature signature = pjp.getStaticPart().getSignature();
         String contextualName = observed.contextualName().isEmpty()
@@ -52,8 +52,8 @@ static Observation of(ProceedingJoinPoint pjp, Observed observed, ObservationReg
                 .lowCardinalityKeyValue(METHOD_NAME.getKeyName(), signature.getName())
                 .lowCardinalityKeyValues(KeyValues.of(observed.lowCardinalityKeyValues()));
 
-        if (keyValuesProvider != null) {
-            observation.keyValuesProvider(keyValuesProvider);
+        if (observationConvention != null) {
+            observation.observationConvention(observationConvention);
         }
 
         return observation;

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/okhttp3/OkHttpObservationInterceptorTest.java
Patch:
@@ -21,7 +21,7 @@
 import io.micrometer.common.KeyValues;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.MockClock;
-import io.micrometer.core.instrument.observation.TimerObservationHandler;
+import io.micrometer.core.instrument.observation.DefaultMeterObservationHandler;
 import io.micrometer.core.instrument.simple.SimpleConfig;
 import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
 import io.micrometer.observation.Observation;
@@ -76,7 +76,7 @@ private OkHttpObservationInterceptor.Builder defaultInterceptorBuilder() {
     @BeforeEach
     void setup() {
         observationRegistry.observationConfig().observationHandler(testHandler);
-        observationRegistry.observationConfig().observationHandler(new TimerObservationHandler(registry));
+        observationRegistry.observationConfig().observationHandler(new DefaultMeterObservationHandler(registry));
         observationRegistry.observationConfig().observationHandler(new PropagatingHandler());
     }
 

File: micrometer-observation-test/src/main/java/io/micrometer/observation/tck/AnyContextObservationHandlerCompatibilityKit.java
Patch:
@@ -41,6 +41,8 @@ void handlerSupportsAnyContext() {
         assertThatCode(() -> handler.onStart(testContext)).doesNotThrowAnyException();
         assertThatCode(() -> handler.onStop(testContext)).doesNotThrowAnyException();
         assertThatCode(() -> handler.onError(testContext)).doesNotThrowAnyException();
+        assertThatCode(() -> handler.onEvent(new Observation.Event("testEvent"), testContext))
+                .doesNotThrowAnyException();
         assertThatCode(() -> handler.onScopeOpened(testContext)).doesNotThrowAnyException();
         assertThatCode(() -> handler.supportsContext(testContext)).doesNotThrowAnyException();
         assertThat(handler.supportsContext(testContext)).as("Handler supports any context").isTrue();

File: micrometer-observation-test/src/main/java/io/micrometer/observation/tck/ConcreteContextObservationHandlerCompatibilityKit.java
Patch:
@@ -58,6 +58,7 @@ void handlerSupportsConcreteContextForHandlerMethods() {
         assertThatCode(() -> handler.onStart(context())).doesNotThrowAnyException();
         assertThatCode(() -> handler.onStop(context())).doesNotThrowAnyException();
         assertThatCode(() -> handler.onError(context())).doesNotThrowAnyException();
+        assertThatCode(() -> handler.onEvent(new Observation.Event("testEvent"), context())).doesNotThrowAnyException();
         assertThatCode(() -> handler.onScopeOpened(context())).doesNotThrowAnyException();
     }
 

File: micrometer-observation-test/src/main/java/io/micrometer/observation/tck/NullContextObservationHandlerCompatibilityKit.java
Patch:
@@ -56,6 +56,7 @@ void handlerSupportsNullContext() {
         assertThatCode(() -> handler.onStart(null)).doesNotThrowAnyException();
         assertThatCode(() -> handler.onStop(null)).doesNotThrowAnyException();
         assertThatCode(() -> handler.onError(null)).doesNotThrowAnyException();
+        assertThatCode(() -> handler.onEvent(null, null)).doesNotThrowAnyException();
         assertThatCode(() -> handler.onScopeOpened(null)).doesNotThrowAnyException();
         assertThatCode(() -> handler.supportsContext(null)).doesNotThrowAnyException();
         assertThat(handler.supportsContext(null)).as("Handler supports null context").isTrue();

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/okhttp3/OkHttpObservationConvention.java
Patch:
@@ -16,10 +16,9 @@
 package io.micrometer.core.instrument.binder.okhttp3;
 
 import io.micrometer.observation.Observation;
-import io.micrometer.observation.transport.http.tags.HttpKeyValueProvider;
 
 /**
- * A {@link HttpKeyValueProvider} for OkHttp3.
+ * A {@link Observation.ObservationConvention} for OkHttp3.
  *
  * @author Marcin Grzejszczak
  * @since 1.10.0

File: micrometer-observation/src/main/java/io/micrometer/observation/aop/ObservedAspect.java
Patch:
@@ -140,6 +140,9 @@ private Object observe(ProceedingJoinPoint pjp, Method method, Observed observed
                 stopObservation(observation, scope, error);
                 throw error;
             }
+            finally {
+                scope.close();
+            }
         }
         else {
             return observation.observeChecked(() -> pjp.proceed());

File: micrometer-core/src/test/java/io/micrometer/core/instrument/MissingLatencyUtilsTest.java
Patch:
@@ -20,7 +20,7 @@
 import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
-import static org.assertj.core.api.Assertions.assertThatThrownBy;
+import static org.assertj.core.api.Assertions.assertThatCode;
 
 /**
  * Tests for demonstrating that a timer works without LatencyUtils dependency when using
@@ -35,7 +35,7 @@ class MissingLatencyUtilsTest {
     @Test
     void test() {
         SimpleMeterRegistry registry = new SimpleMeterRegistry();
-        assertThatThrownBy(() -> Timer.builder("my.timer").register(registry)).doesNotThrowAnyException();
+        assertThatCode(() -> Timer.builder("my.timer").register(registry)).doesNotThrowAnyException();
     }
 
 }

File: micrometer-observation/src/main/java/io/micrometer/observation/ObservationRegistry.java
Patch:
@@ -148,8 +148,8 @@ public ObservationConfig observationFilter(ObservationFilter observationFilter)
         }
 
         /**
-         * Register a {@link Observation.ObservationConvention}.
-         * @param observationConvention observation convention
+         * Register {@link Observation.ObservationConvention observation conventions}.
+         * @param observationConvention observation conventions
          * @return This configuration instance
          */
         public ObservationConfig observationConvention(Observation.ObservationConvention<?>... observationConvention) {

File: micrometer-observation/src/main/java/io/micrometer/observation/SimpleObservationRegistry.java
Patch:
@@ -58,7 +58,7 @@ public ObservationConfig observationConfig() {
 
     @Override
     public boolean isNoop() {
-        return ObservationRegistry.super.isNoop();
+        return ObservationRegistry.super.isNoop() || observationConfig().getObservationHandlers().isEmpty();
     }
 
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/okhttp3/OkHttpObservationConvention.java
Patch:
@@ -24,7 +24,7 @@
  * @author Marcin Grzejszczak
  * @since 1.10.0
  */
-public interface OkHttpKeyValuesProvider extends HttpKeyValueProvider<OkHttpContext> {
+public interface OkHttpObservationConvention extends Observation.ObservationConvention<OkHttpContext> {
 
     @Override
     default boolean supportsContext(Observation.Context context) {

File: micrometer-observation/src/main/java/io/micrometer/observation/docs/DocumentedObservation.java
Patch:
@@ -53,8 +53,7 @@ public interface DocumentedObservation {
 
     /**
      * Default technical name (e.g metric name). Can be overridden by a registered
-     * {@link io.micrometer.common.docs.SemanticNameProvider} via
-     * {@link ObservationRegistry.ObservationConfig}.
+     * {@link Observation.ObservationConvention}.
      * @return name
      */
     String getName();

File: micrometer-observation-test/src/main/java/io/micrometer/observation/tck/ObservationRegistryCompatibilityKit.java
Patch:
@@ -387,8 +387,8 @@ void observationFieldsShouldBeSetOnContext() {
         testContext.put("context.field", "42");
         Exception exception = new IOException("simulated");
         Observation observation = Observation.start("test.observation", testContext, registry)
-                .lowCardinalityKeyValue("lcTag1", "1").lowCardinalityKeyValue(KeyValue.of("lcTag2", "2"))
-                .highCardinalityKeyValue("hcTag1", "3").highCardinalityKeyValue(KeyValue.of("hcTag2", "4"))
+                .lowCardinalityKeyValue("lcTag1", "1").lowCardinalityKeyValues(KeyValues.of("lcTag2", "2"))
+                .highCardinalityKeyValue("hcTag1", "3").highCardinalityKeyValues(KeyValues.of("hcTag2", "4"))
                 .keyValuesProvider(new TestKeyValuesProvider("local"))
                 .keyValuesProvider(new UnsupportedKeyValuesProvider("local")).contextualName("test.observation.42")
                 .error(exception);

File: micrometer-commons/src/main/java/io/micrometer/common/ValidatedKeyValue.java
Patch:
@@ -20,7 +20,7 @@
 /**
  * {@link KeyValue} with value validation.
  *
- * @param <T>
+ * @param <T> value type
  * @author Marcin Grzejszczak
  * @since 1.10.0
  */

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/okhttp3/DefaultOkHttpKeyValuesProvider.java
Patch:
@@ -77,6 +77,7 @@ public KeyValues getLowCardinalityKeyValues(OkHttpContext context) {
         Iterable<BiFunction<Request, Response, Tag>> contextSpecificTags = context.getContextSpecificTags();
         Iterable<Tag> unknownRequestTags = context.getUnknownRequestTags();
         boolean includeHostTag = context.isIncludeHostTag();
+        // TODO: Tags to key values and back - maybe we can improve this?
         KeyValues keyValues = KeyValues.of("method", requestAvailable ? request.method() : TAG_VALUE_UNKNOWN, "uri",
                 getUriTag(urlMapper, state, request), "status", getStatusMessage(state.response, state.exception))
                 .and(tagsToKeyValues(stream(extraTags.spliterator(), false)))

File: implementations/micrometer-registry-stackdriver/src/main/java/io/micrometer/stackdriver/StackdriverMeterRegistry.java
Patch:
@@ -426,7 +426,7 @@ private void prePopulateVerifiedDescriptors() {
         }
 
         private String metricType(Meter.Id id, @Nullable String statistic) {
-            StringBuilder metricType = new StringBuilder("custom.googleapis.com/").append(getConventionName(id));
+            StringBuilder metricType = new StringBuilder(config.metricTypePrefix()).append(getConventionName(id));
             if (statistic != null) {
                 metricType.append('/').append(statistic);
             }

File: micrometer-observation-test/src/main/java/io/micrometer/observation/tck/AnyContextObservationHandlerCompatibilityKit.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.core.tck;
+package io.micrometer.observation.tck;
 
 import io.micrometer.observation.Observation;
 import io.micrometer.observation.ObservationHandler;

File: micrometer-observation-test/src/main/java/io/micrometer/observation/tck/ConcreteContextObservationHandlerCompatibilityKit.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.core.tck;
+package io.micrometer.observation.tck;
 
 import io.micrometer.observation.Observation;
 import io.micrometer.observation.ObservationHandler;

File: micrometer-observation-test/src/main/java/io/micrometer/observation/tck/NullContextObservationHandlerCompatibilityKit.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.core.tck;
+package io.micrometer.observation.tck;
 
 import io.micrometer.observation.Observation;
 import io.micrometer.observation.ObservationHandler;

File: micrometer-observation-test/src/main/java/io/micrometer/observation/tck/ObservationContextAssert.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.core.tck;
+package io.micrometer.observation.tck;
 
 import io.micrometer.common.KeyValue;
 import io.micrometer.common.KeyValues;

File: micrometer-observation-test/src/main/java/io/micrometer/observation/tck/ObservationRegistryAssert.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.core.tck;
+package io.micrometer.observation.tck;
 
 import io.micrometer.observation.Observation;
 import io.micrometer.observation.ObservationRegistry;

File: micrometer-observation-test/src/main/java/io/micrometer/observation/tck/ObservationRegistryCompatibilityKit.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.core.tck;
+package io.micrometer.observation.tck;
 
 import io.micrometer.common.KeyValue;
 import io.micrometer.common.KeyValues;

File: micrometer-observation-test/src/main/java/io/micrometer/observation/tck/TestObservationRegistry.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.core.tck;
+package io.micrometer.observation.tck;
 
 import io.micrometer.observation.Observation;
 import io.micrometer.observation.ObservationHandler;

File: micrometer-observation-test/src/main/java/io/micrometer/observation/tck/TestObservationRegistryAssert.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.core.tck;
+package io.micrometer.observation.tck;
 
 import io.micrometer.observation.Observation;
 

File: micrometer-observation-test/src/test/java/io/micrometer/observation/tck/AnyContextObservationHandlerCompatibilityKitTests.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.core.tck;
+package io.micrometer.observation.tck;
 
 import io.micrometer.observation.Observation;
 import io.micrometer.observation.ObservationHandler;

File: micrometer-observation-test/src/test/java/io/micrometer/observation/tck/ConcreteContextObservationHandlerCompatibilityKitTests.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.core.tck;
+package io.micrometer.observation.tck;
 
 import io.micrometer.observation.Observation;
 import io.micrometer.observation.ObservationHandler;

File: micrometer-observation-test/src/test/java/io/micrometer/observation/tck/NullContextObservationHandlerCompatibilityKitTests.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.core.tck;
+package io.micrometer.observation.tck;
 
 import io.micrometer.observation.Observation;
 import io.micrometer.observation.ObservationHandler;

File: micrometer-observation-test/src/test/java/io/micrometer/observation/tck/ObservationContextAssertTests.java
Patch:
@@ -13,13 +13,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.core.tck;
+package io.micrometer.observation.tck;
 
 import io.micrometer.observation.Observation;
 import io.micrometer.observation.ObservationRegistry;
 import org.junit.jupiter.api.Test;
 
-import static io.micrometer.core.tck.ObservationContextAssert.assertThat;
+import static io.micrometer.observation.tck.ObservationContextAssert.assertThat;
 import static org.assertj.core.api.BDDAssertions.thenNoException;
 import static org.assertj.core.api.BDDAssertions.thenThrownBy;
 

File: micrometer-observation-test/src/test/java/io/micrometer/observation/tck/ObservationRegistryAssertTests.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.core.tck;
+package io.micrometer.observation.tck;
 
 import io.micrometer.observation.Observation;
 import io.micrometer.observation.ObservationRegistry;

File: micrometer-observation-test/src/test/java/io/micrometer/observation/tck/ObservationRegistryCompatibilityKitTests.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.core.tck;
+package io.micrometer.observation.tck;
 
 import io.micrometer.observation.ObservationRegistry;
 

File: micrometer-observation-test/src/test/java/io/micrometer/observation/tck/TestObservationRegistryAssertTests.java
Patch:
@@ -13,13 +13,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.core.tck;
+package io.micrometer.observation.tck;
 
 import io.micrometer.observation.Observation;
 import io.micrometer.observation.ObservationRegistry;
 import org.junit.jupiter.api.Test;
 
-import static io.micrometer.core.tck.TestObservationRegistryAssert.assertThat;
+import static io.micrometer.observation.tck.TestObservationRegistryAssert.assertThat;
 import static org.assertj.core.api.BDDAssertions.thenNoException;
 import static org.assertj.core.api.BDDAssertions.thenThrownBy;
 

File: implementations/micrometer-registry-appoptics/src/main/java/io/micrometer/appoptics/AppOpticsConfig.java
Patch:
@@ -15,10 +15,10 @@
  */
 package io.micrometer.appoptics;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.config.validate.InvalidReason;
 import io.micrometer.core.instrument.config.validate.Validated;
 import io.micrometer.core.instrument.step.StepRegistryConfig;
-import io.micrometer.core.lang.Nullable;
 
 import java.time.Duration;
 

File: implementations/micrometer-registry-appoptics/src/main/java/io/micrometer/appoptics/AppOpticsMeterRegistry.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.micrometer.appoptics;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.*;
 import io.micrometer.core.instrument.config.MeterFilter;
 import io.micrometer.core.instrument.distribution.HistogramSnapshot;
@@ -23,7 +24,6 @@
 import io.micrometer.core.instrument.util.NamedThreadFactory;
 import io.micrometer.core.ipc.http.HttpSender;
 import io.micrometer.core.ipc.http.HttpUrlConnectionSender;
-import io.micrometer.core.lang.Nullable;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: implementations/micrometer-registry-appoptics/src/main/java/io/micrometer/appoptics/AppOpticsNamingConvention.java
Patch:
@@ -15,10 +15,10 @@
  */
 package io.micrometer.appoptics;
 
+import io.micrometer.common.lang.Nullable;
+import io.micrometer.common.util.StringUtils;
 import io.micrometer.core.instrument.Meter;
 import io.micrometer.core.instrument.config.NamingConvention;
-import io.micrometer.core.instrument.util.StringUtils;
-import io.micrometer.core.lang.Nullable;
 
 import java.util.regex.Pattern;
 

File: implementations/micrometer-registry-appoptics/src/main/java/io/micrometer/appoptics/package-info.java
Patch:
@@ -17,5 +17,5 @@
 @NonNullFields
 package io.micrometer.appoptics;
 
-import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
+import io.micrometer.common.lang.NonNullApi;
+import io.micrometer.common.lang.NonNullFields;

File: implementations/micrometer-registry-atlas/src/main/java/io/micrometer/atlas/AtlasMeterRegistry.java
Patch:
@@ -23,6 +23,7 @@
 import com.netflix.spectator.api.patterns.PolledMeter;
 import com.netflix.spectator.atlas.AtlasConfig;
 import com.netflix.spectator.atlas.AtlasRegistry;
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.*;
 import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;
 import io.micrometer.core.instrument.distribution.HistogramGauges;
@@ -33,7 +34,6 @@
 import io.micrometer.core.instrument.step.StepFunctionCounter;
 import io.micrometer.core.instrument.step.StepFunctionTimer;
 import io.micrometer.core.instrument.util.DoubleFormat;
-import io.micrometer.core.lang.Nullable;
 
 import java.util.List;
 import java.util.concurrent.TimeUnit;

File: implementations/micrometer-registry-atlas/src/main/java/io/micrometer/atlas/AtlasNamingConvention.java
Patch:
@@ -15,9 +15,9 @@
  */
 package io.micrometer.atlas;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.Meter;
 import io.micrometer.core.instrument.config.NamingConvention;
-import io.micrometer.core.lang.Nullable;
 
 /**
  * The naming convention most commonly employed at Netflix, and so most likely to show up

File: implementations/micrometer-registry-atlas/src/main/java/io/micrometer/atlas/AtlasUtils.java
Patch:
@@ -15,8 +15,8 @@
  */
 package io.micrometer.atlas;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.Statistic;
-import io.micrometer.core.lang.Nullable;
 
 import static com.netflix.spectator.api.Statistic.*;
 

File: implementations/micrometer-registry-atlas/src/main/java/io/micrometer/atlas/SpectatorToDoubleGauge.java
Patch:
@@ -16,7 +16,7 @@
 package io.micrometer.atlas;
 
 import com.netflix.spectator.api.*;
-import io.micrometer.core.lang.Nullable;
+import io.micrometer.common.lang.Nullable;
 
 import java.util.Collections;
 import java.util.function.ToDoubleFunction;

File: implementations/micrometer-registry-atlas/src/main/java/io/micrometer/atlas/package-info.java
Patch:
@@ -17,5 +17,5 @@
 @NonNullFields
 package io.micrometer.atlas;
 
-import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
+import io.micrometer.common.lang.NonNullApi;
+import io.micrometer.common.lang.NonNullFields;

File: implementations/micrometer-registry-atlas/src/test/java/io/micrometer/atlas/AtlasMeterRegistryTest.java
Patch:
@@ -20,11 +20,11 @@
 import com.netflix.spectator.api.patterns.PolledMeter;
 import com.netflix.spectator.atlas.AtlasConfig;
 import com.netflix.spectator.atlas.AtlasRegistry;
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.Issue;
 import io.micrometer.core.instrument.Clock;
 import io.micrometer.core.instrument.FunctionCounter;
 import io.micrometer.core.instrument.MockClock;
-import io.micrometer.core.lang.Nullable;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
 import ru.lanwen.wiremock.ext.WiremockResolver;

File: implementations/micrometer-registry-azure-monitor/src/main/java/io/micrometer/azuremonitor/AzureMonitorMeterRegistry.java
Patch:
@@ -20,11 +20,11 @@
 import com.microsoft.applicationinsights.telemetry.MetricTelemetry;
 import com.microsoft.applicationinsights.telemetry.SeverityLevel;
 import com.microsoft.applicationinsights.telemetry.TraceTelemetry;
+import io.micrometer.common.lang.Nullable;
+import io.micrometer.common.util.StringUtils;
 import io.micrometer.core.instrument.*;
 import io.micrometer.core.instrument.step.StepMeterRegistry;
 import io.micrometer.core.instrument.util.NamedThreadFactory;
-import io.micrometer.core.instrument.util.StringUtils;
-import io.micrometer.core.lang.Nullable;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: implementations/micrometer-registry-azure-monitor/src/main/java/io/micrometer/azuremonitor/AzureMonitorNamingConvention.java
Patch:
@@ -15,9 +15,9 @@
  */
 package io.micrometer.azuremonitor;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.Meter;
 import io.micrometer.core.instrument.config.NamingConvention;
-import io.micrometer.core.lang.Nullable;
 
 import java.util.regex.Pattern;
 

File: implementations/micrometer-registry-azure-monitor/src/main/java/io/micrometer/azuremonitor/package-info.java
Patch:
@@ -17,5 +17,5 @@
 @NonNullFields
 package io.micrometer.azuremonitor;
 
-import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
+import io.micrometer.common.lang.NonNullApi;
+import io.micrometer.common.lang.NonNullFields;

File: implementations/micrometer-registry-cloudwatch/src/main/java/io/micrometer/cloudwatch/CloudWatchNamingConvention.java
Patch:
@@ -15,10 +15,10 @@
  */
 package io.micrometer.cloudwatch;
 
+import io.micrometer.common.lang.Nullable;
+import io.micrometer.common.util.StringUtils;
 import io.micrometer.core.instrument.Meter;
 import io.micrometer.core.instrument.config.NamingConvention;
-import io.micrometer.core.instrument.util.StringUtils;
-import io.micrometer.core.lang.Nullable;
 
 /**
  * {@link NamingConvention} for CloudWatch.

File: implementations/micrometer-registry-cloudwatch/src/main/java/io/micrometer/cloudwatch/package-info.java
Patch:
@@ -17,5 +17,5 @@
 @NonNullFields
 package io.micrometer.cloudwatch;
 
-import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
+import io.micrometer.common.lang.NonNullApi;
+import io.micrometer.common.lang.NonNullFields;

File: implementations/micrometer-registry-cloudwatch/src/test/java/io/micrometer/cloudwatch/CloudWatchMeterRegistryCompatibilityTest.java
Patch:
@@ -15,9 +15,9 @@
  */
 package io.micrometer.cloudwatch;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.MockClock;
-import io.micrometer.core.lang.Nullable;
 import io.micrometer.core.tck.MeterRegistryCompatibilityKit;
 
 import java.time.Duration;

File: implementations/micrometer-registry-cloudwatch2/src/main/java/io/micrometer/cloudwatch2/CloudWatchMeterRegistry.java
Patch:
@@ -15,13 +15,13 @@
  */
 package io.micrometer.cloudwatch2;
 
+import io.micrometer.common.lang.Nullable;
+import io.micrometer.common.util.StringUtils;
+import io.micrometer.common.util.internal.logging.WarnThenDebugLogger;
 import io.micrometer.core.instrument.Timer;
 import io.micrometer.core.instrument.*;
 import io.micrometer.core.instrument.step.StepMeterRegistry;
 import io.micrometer.core.instrument.util.NamedThreadFactory;
-import io.micrometer.core.instrument.util.StringUtils;
-import io.micrometer.core.lang.Nullable;
-import io.micrometer.core.util.internal.logging.WarnThenDebugLogger;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import software.amazon.awssdk.core.exception.AbortedException;

File: implementations/micrometer-registry-cloudwatch2/src/main/java/io/micrometer/cloudwatch2/CloudWatchNamingConvention.java
Patch:
@@ -15,10 +15,10 @@
  */
 package io.micrometer.cloudwatch2;
 
+import io.micrometer.common.lang.Nullable;
+import io.micrometer.common.util.StringUtils;
 import io.micrometer.core.instrument.Meter;
 import io.micrometer.core.instrument.config.NamingConvention;
-import io.micrometer.core.instrument.util.StringUtils;
-import io.micrometer.core.lang.Nullable;
 
 /**
  * {@link NamingConvention} for CloudWatch.

File: implementations/micrometer-registry-cloudwatch2/src/main/java/io/micrometer/cloudwatch2/package-info.java
Patch:
@@ -17,5 +17,5 @@
 @NonNullFields
 package io.micrometer.cloudwatch2;
 
-import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
+import io.micrometer.common.lang.NonNullApi;
+import io.micrometer.common.lang.NonNullFields;

File: implementations/micrometer-registry-cloudwatch2/src/test/java/io/micrometer/cloudwatch2/CloudWatchMeterRegistryCompatibilityTest.java
Patch:
@@ -15,9 +15,9 @@
  */
 package io.micrometer.cloudwatch2;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.MockClock;
-import io.micrometer.core.lang.Nullable;
 import io.micrometer.core.tck.MeterRegistryCompatibilityKit;
 
 import java.time.Duration;

File: implementations/micrometer-registry-datadog/src/main/java/io/micrometer/datadog/DatadogConfig.java
Patch:
@@ -15,9 +15,9 @@
  */
 package io.micrometer.datadog;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.config.validate.Validated;
 import io.micrometer.core.instrument.step.StepRegistryConfig;
-import io.micrometer.core.lang.Nullable;
 
 import static io.micrometer.core.instrument.config.MeterRegistryConfigValidator.checkAll;
 import static io.micrometer.core.instrument.config.MeterRegistryConfigValidator.checkRequired;

File: implementations/micrometer-registry-datadog/src/main/java/io/micrometer/datadog/DatadogMeterRegistry.java
Patch:
@@ -15,13 +15,13 @@
  */
 package io.micrometer.datadog;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.*;
 import io.micrometer.core.instrument.step.StepMeterRegistry;
 import io.micrometer.core.instrument.util.MeterPartition;
 import io.micrometer.core.instrument.util.NamedThreadFactory;
 import io.micrometer.core.ipc.http.HttpSender;
 import io.micrometer.core.ipc.http.HttpUrlConnectionSender;
-import io.micrometer.core.lang.Nullable;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: implementations/micrometer-registry-datadog/src/main/java/io/micrometer/datadog/DatadogMetricMetadata.java
Patch:
@@ -15,10 +15,10 @@
  */
 package io.micrometer.datadog;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.Meter;
 import io.micrometer.core.instrument.Statistic;
 import io.micrometer.core.instrument.util.StringEscapeUtils;
-import io.micrometer.core.lang.Nullable;
 
 import java.util.*;
 

File: implementations/micrometer-registry-datadog/src/main/java/io/micrometer/datadog/DatadogNamingConvention.java
Patch:
@@ -15,11 +15,11 @@
  */
 package io.micrometer.datadog;
 
+import io.micrometer.common.lang.Nullable;
+import io.micrometer.common.util.StringUtils;
 import io.micrometer.core.instrument.Meter;
 import io.micrometer.core.instrument.config.NamingConvention;
 import io.micrometer.core.instrument.util.StringEscapeUtils;
-import io.micrometer.core.instrument.util.StringUtils;
-import io.micrometer.core.lang.Nullable;
 
 /**
  * {@link NamingConvention} for Datadog.

File: implementations/micrometer-registry-datadog/src/main/java/io/micrometer/datadog/package-info.java
Patch:
@@ -17,5 +17,5 @@
 @NonNullFields
 package io.micrometer.datadog;
 
-import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
+import io.micrometer.common.lang.NonNullApi;
+import io.micrometer.common.lang.NonNullFields;

File: implementations/micrometer-registry-datadog/src/test/java/io/micrometer/datadog/DatadogMeterRegistryCompatibilityTest.java
Patch:
@@ -15,9 +15,9 @@
  */
 package io.micrometer.datadog;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.MockClock;
-import io.micrometer.core.lang.Nullable;
 import io.micrometer.core.tck.MeterRegistryCompatibilityKit;
 
 import java.time.Duration;

File: implementations/micrometer-registry-datadog/src/test/java/io/micrometer/datadog/DatadogNamingConventionTest.java
Patch:
@@ -15,10 +15,10 @@
  */
 package io.micrometer.datadog;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.Issue;
 import io.micrometer.core.instrument.Meter;
 import io.micrometer.core.instrument.config.NamingConvention;
-import io.micrometer.core.lang.Nullable;
 import org.junit.jupiter.api.Test;
 
 import static org.assertj.core.api.Assertions.assertThat;

File: implementations/micrometer-registry-dynatrace/src/main/java/io/micrometer/dynatrace/DynatraceConfig.java
Patch:
@@ -17,9 +17,9 @@
 
 import com.dynatrace.file.util.DynatraceFileBasedConfigurationProvider;
 import com.dynatrace.metric.util.DynatraceMetricApiConstants;
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.config.validate.Validated;
 import io.micrometer.core.instrument.step.StepRegistryConfig;
-import io.micrometer.core.lang.Nullable;
 
 import java.util.Collections;
 import java.util.Map;

File: implementations/micrometer-registry-dynatrace/src/main/java/io/micrometer/dynatrace/DynatraceMeterRegistry.java
Patch:
@@ -15,6 +15,8 @@
  */
 package io.micrometer.dynatrace;
 
+import io.micrometer.common.util.internal.logging.InternalLogger;
+import io.micrometer.common.util.internal.logging.InternalLoggerFactory;
 import io.micrometer.core.instrument.Clock;
 import io.micrometer.core.instrument.DistributionSummary;
 import io.micrometer.core.instrument.Meter;
@@ -27,8 +29,6 @@
 import io.micrometer.core.instrument.util.NamedThreadFactory;
 import io.micrometer.core.ipc.http.HttpSender;
 import io.micrometer.core.ipc.http.HttpUrlConnectionSender;
-import io.micrometer.core.util.internal.logging.InternalLogger;
-import io.micrometer.core.util.internal.logging.InternalLoggerFactory;
 import io.micrometer.dynatrace.types.DynatraceDistributionSummary;
 import io.micrometer.dynatrace.types.DynatraceTimer;
 import io.micrometer.dynatrace.v1.DynatraceExporterV1;

File: implementations/micrometer-registry-dynatrace/src/main/java/io/micrometer/dynatrace/DynatraceNamingConvention.java
Patch:
@@ -15,9 +15,9 @@
  */
 package io.micrometer.dynatrace;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.Meter;
 import io.micrometer.core.instrument.config.NamingConvention;
-import io.micrometer.core.lang.Nullable;
 import io.micrometer.dynatrace.v1.DynatraceNamingConventionV1;
 
 /**

File: implementations/micrometer-registry-dynatrace/src/main/java/io/micrometer/dynatrace/package-info.java
Patch:
@@ -17,5 +17,5 @@
 @NonNullFields
 package io.micrometer.dynatrace;
 
-import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
+import io.micrometer.common.lang.NonNullApi;
+import io.micrometer.common.lang.NonNullFields;

File: implementations/micrometer-registry-dynatrace/src/main/java/io/micrometer/dynatrace/v1/DynatraceMetricDefinition.java
Patch:
@@ -15,9 +15,9 @@
  */
 package io.micrometer.dynatrace.v1;
 
+import io.micrometer.common.lang.Nullable;
+import io.micrometer.common.util.StringUtils;
 import io.micrometer.core.instrument.util.StringEscapeUtils;
-import io.micrometer.core.instrument.util.StringUtils;
-import io.micrometer.core.lang.Nullable;
 
 import java.util.Collections;
 import java.util.Map;

File: implementations/micrometer-registry-dynatrace/src/main/java/io/micrometer/dynatrace/v1/DynatraceNamingConventionV1.java
Patch:
@@ -15,11 +15,11 @@
  */
 package io.micrometer.dynatrace.v1;
 
+import io.micrometer.common.lang.Nullable;
+import io.micrometer.common.util.StringUtils;
+import io.micrometer.common.util.internal.logging.WarnThenDebugLogger;
 import io.micrometer.core.instrument.Meter;
 import io.micrometer.core.instrument.config.NamingConvention;
-import io.micrometer.core.instrument.util.StringUtils;
-import io.micrometer.core.lang.Nullable;
-import io.micrometer.core.util.internal.logging.WarnThenDebugLogger;
 
 import java.util.regex.Pattern;
 

File: implementations/micrometer-registry-dynatrace/src/main/java/io/micrometer/dynatrace/v1/DynatraceTimeSeries.java
Patch:
@@ -15,9 +15,9 @@
  */
 package io.micrometer.dynatrace.v1;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.util.DoubleFormat;
 import io.micrometer.core.instrument.util.StringEscapeUtils;
-import io.micrometer.core.lang.Nullable;
 
 import java.util.Map;
 import java.util.stream.Collectors;

File: implementations/micrometer-registry-elastic/src/main/java/io/micrometer/elastic/ElasticConfig.java
Patch:
@@ -15,10 +15,10 @@
  */
 package io.micrometer.elastic;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.config.validate.InvalidReason;
 import io.micrometer.core.instrument.config.validate.Validated;
 import io.micrometer.core.instrument.step.StepRegistryConfig;
-import io.micrometer.core.lang.Nullable;
 
 import java.time.format.DateTimeFormatter;
 

File: implementations/micrometer-registry-elastic/src/main/java/io/micrometer/elastic/ElasticMeterRegistry.java
Patch:
@@ -15,15 +15,15 @@
  */
 package io.micrometer.elastic;
 
+import io.micrometer.common.lang.NonNull;
+import io.micrometer.common.util.StringUtils;
 import io.micrometer.core.instrument.*;
 import io.micrometer.core.instrument.distribution.HistogramSnapshot;
 import io.micrometer.core.instrument.step.StepMeterRegistry;
 import io.micrometer.core.instrument.util.MeterPartition;
 import io.micrometer.core.instrument.util.NamedThreadFactory;
-import io.micrometer.core.instrument.util.StringUtils;
 import io.micrometer.core.ipc.http.HttpSender;
 import io.micrometer.core.ipc.http.HttpUrlConnectionSender;
-import io.micrometer.core.lang.NonNull;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: implementations/micrometer-registry-elastic/src/main/java/io/micrometer/elastic/ElasticNamingConvention.java
Patch:
@@ -15,9 +15,9 @@
  */
 package io.micrometer.elastic;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.Meter;
 import io.micrometer.core.instrument.config.NamingConvention;
-import io.micrometer.core.lang.Nullable;
 
 import java.util.regex.Pattern;
 

File: implementations/micrometer-registry-elastic/src/main/java/io/micrometer/elastic/package-info.java
Patch:
@@ -17,5 +17,5 @@
 @NonNullFields
 package io.micrometer.elastic;
 
-import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
+import io.micrometer.common.lang.NonNullApi;
+import io.micrometer.common.lang.NonNullFields;

File: implementations/micrometer-registry-elastic/src/test/java/io/micrometer/elastic/AbstractElasticsearchMeterRegistryIntegrationTest.java
Patch:
@@ -15,8 +15,6 @@
  */
 package io.micrometer.elastic;
 
-import java.time.Duration;
-
 import com.jayway.jsonpath.JsonPath;
 import io.micrometer.core.instrument.Counter;
 import io.micrometer.core.ipc.http.HttpSender;
@@ -29,6 +27,8 @@
 import org.testcontainers.junit.jupiter.Testcontainers;
 import org.testcontainers.utility.DockerImageName;
 
+import java.time.Duration;
+
 import static org.assertj.core.api.Assertions.assertThat;
 
 /**

File: implementations/micrometer-registry-elastic/src/test/java/io/micrometer/elastic/ElasticMeterRegistryCompatibilityTest.java
Patch:
@@ -15,9 +15,9 @@
  */
 package io.micrometer.elastic;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.MockClock;
-import io.micrometer.core.lang.Nullable;
 import io.micrometer.core.tck.MeterRegistryCompatibilityKit;
 
 import java.time.Duration;

File: implementations/micrometer-registry-ganglia/src/main/java/io/micrometer/ganglia/GangliaConfig.java
Patch:
@@ -16,9 +16,9 @@
 package io.micrometer.ganglia;
 
 import info.ganglia.gmetric4j.gmetric.GMetric;
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.config.validate.Validated;
 import io.micrometer.core.instrument.step.StepRegistryConfig;
-import io.micrometer.core.lang.Nullable;
 
 import java.util.concurrent.TimeUnit;
 

File: implementations/micrometer-registry-ganglia/src/main/java/io/micrometer/ganglia/GangliaMeterRegistry.java
Patch:
@@ -20,14 +20,14 @@
 import info.ganglia.gmetric4j.gmetric.GMetricSlope;
 import info.ganglia.gmetric4j.gmetric.GMetricType;
 import info.ganglia.gmetric4j.gmetric.GangliaException;
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.*;
 import io.micrometer.core.instrument.config.NamingConvention;
 import io.micrometer.core.instrument.distribution.HistogramSnapshot;
 import io.micrometer.core.instrument.step.StepMeterRegistry;
 import io.micrometer.core.instrument.util.DoubleFormat;
 import io.micrometer.core.instrument.util.HierarchicalNameMapper;
 import io.micrometer.core.instrument.util.NamedThreadFactory;
-import io.micrometer.core.lang.Nullable;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: implementations/micrometer-registry-ganglia/src/main/java/io/micrometer/ganglia/package-info.java
Patch:
@@ -17,5 +17,5 @@
 @NonNullFields
 package io.micrometer.ganglia;
 
-import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
+import io.micrometer.common.lang.NonNullApi;
+import io.micrometer.common.lang.NonNullFields;

File: implementations/micrometer-registry-ganglia/src/test/java/io/micrometer/ganglia/GangliaMeterRegistryCompatibilityTest.java
Patch:
@@ -15,9 +15,9 @@
  */
 package io.micrometer.ganglia;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.MockClock;
-import io.micrometer.core.lang.Nullable;
 import io.micrometer.core.tck.MeterRegistryCompatibilityKit;
 
 import java.time.Duration;

File: implementations/micrometer-registry-graphite/src/main/java/io/micrometer/graphite/GraphiteConfig.java
Patch:
@@ -15,9 +15,9 @@
  */
 package io.micrometer.graphite;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.config.validate.Validated;
 import io.micrometer.core.instrument.dropwizard.DropwizardConfig;
-import io.micrometer.core.lang.Nullable;
 
 import java.util.concurrent.TimeUnit;
 

File: implementations/micrometer-registry-graphite/src/main/java/io/micrometer/graphite/GraphiteDimensionalNamingConvention.java
Patch:
@@ -15,9 +15,9 @@
  */
 package io.micrometer.graphite;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.Meter;
 import io.micrometer.core.instrument.config.NamingConvention;
-import io.micrometer.core.lang.Nullable;
 
 import java.text.Normalizer;
 import java.util.regex.Pattern;

File: implementations/micrometer-registry-graphite/src/main/java/io/micrometer/graphite/GraphiteHierarchicalNamingConvention.java
Patch:
@@ -15,9 +15,9 @@
  */
 package io.micrometer.graphite;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.Meter;
 import io.micrometer.core.instrument.config.NamingConvention;
-import io.micrometer.core.lang.Nullable;
 
 import java.text.Normalizer;
 import java.util.regex.Pattern;

File: implementations/micrometer-registry-graphite/src/main/java/io/micrometer/graphite/GraphiteMeterRegistry.java
Patch:
@@ -17,11 +17,11 @@
 
 import com.codahale.metrics.MetricRegistry;
 import com.codahale.metrics.graphite.*;
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.Clock;
 import io.micrometer.core.instrument.dropwizard.DropwizardClock;
 import io.micrometer.core.instrument.dropwizard.DropwizardMeterRegistry;
 import io.micrometer.core.instrument.util.HierarchicalNameMapper;
-import io.micrometer.core.lang.Nullable;
 
 import java.util.concurrent.TimeUnit;
 

File: implementations/micrometer-registry-graphite/src/main/java/io/micrometer/graphite/package-info.java
Patch:
@@ -17,5 +17,5 @@
 @NonNullFields
 package io.micrometer.graphite;
 
-import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
+import io.micrometer.common.lang.NonNullApi;
+import io.micrometer.common.lang.NonNullFields;

File: implementations/micrometer-registry-graphite/src/test/java/io/micrometer/graphite/GraphiteMeterRegistryCompatibilityTest.java
Patch:
@@ -15,10 +15,10 @@
  */
 package io.micrometer.graphite;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.MockClock;
 import io.micrometer.core.instrument.util.HierarchicalNameMapper;
-import io.micrometer.core.lang.Nullable;
 import io.micrometer.core.tck.MeterRegistryCompatibilityKit;
 
 import java.time.Duration;

File: implementations/micrometer-registry-graphite/src/test/java/io/micrometer/graphite/GraphiteMeterRegistryTest.java
Patch:
@@ -15,8 +15,8 @@
  */
 package io.micrometer.graphite;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.MockClock;
-import io.micrometer.core.lang.Nullable;
 import io.netty.channel.ChannelOption;
 import org.junit.jupiter.api.Test;
 import reactor.core.publisher.Flux;

File: implementations/micrometer-registry-health/src/main/java/io/micrometer/health/HealthMeterRegistry.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.micrometer.health;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.annotation.Incubating;
 import io.micrometer.core.instrument.Clock;
 import io.micrometer.core.instrument.Meter;
@@ -25,7 +26,6 @@
 import io.micrometer.core.instrument.simple.SimpleConfig;
 import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
 import io.micrometer.core.instrument.util.NamedThreadFactory;
-import io.micrometer.core.lang.Nullable;
 
 import java.time.Duration;
 import java.util.ArrayList;

File: implementations/micrometer-registry-health/src/main/java/io/micrometer/health/ServiceLevelObjective.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.micrometer.health;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.Timer;
 import io.micrometer.core.instrument.*;
 import io.micrometer.core.instrument.binder.MeterBinder;
@@ -23,7 +24,6 @@
 import io.micrometer.core.instrument.distribution.HistogramSupport;
 import io.micrometer.core.instrument.distribution.ValueAtPercentile;
 import io.micrometer.core.instrument.search.Search;
-import io.micrometer.core.lang.Nullable;
 
 import java.text.DecimalFormat;
 import java.text.DecimalFormatSymbols;

File: implementations/micrometer-registry-health/src/main/java/io/micrometer/health/package-info.java
Patch:
@@ -20,5 +20,5 @@
 @NonNullFields
 package io.micrometer.health;
 
-import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
+import io.micrometer.common.lang.NonNullApi;
+import io.micrometer.common.lang.NonNullFields;

File: implementations/micrometer-registry-humio/src/main/java/io/micrometer/humio/HumioConfig.java
Patch:
@@ -15,9 +15,9 @@
  */
 package io.micrometer.humio;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.config.validate.Validated;
 import io.micrometer.core.instrument.step.StepRegistryConfig;
-import io.micrometer.core.lang.Nullable;
 
 import java.time.Duration;
 import java.util.Map;

File: implementations/micrometer-registry-humio/src/main/java/io/micrometer/humio/HumioMeterRegistry.java
Patch:
@@ -15,6 +15,8 @@
  */
 package io.micrometer.humio;
 
+import io.micrometer.common.lang.NonNull;
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.*;
 import io.micrometer.core.instrument.distribution.HistogramSnapshot;
 import io.micrometer.core.instrument.step.StepMeterRegistry;
@@ -23,8 +25,6 @@
 import io.micrometer.core.instrument.util.NamedThreadFactory;
 import io.micrometer.core.ipc.http.HttpSender;
 import io.micrometer.core.ipc.http.HttpUrlConnectionSender;
-import io.micrometer.core.lang.NonNull;
-import io.micrometer.core.lang.Nullable;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: implementations/micrometer-registry-humio/src/main/java/io/micrometer/humio/HumioNamingConvention.java
Patch:
@@ -15,9 +15,9 @@
  */
 package io.micrometer.humio;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.Meter;
 import io.micrometer.core.instrument.config.NamingConvention;
-import io.micrometer.core.lang.Nullable;
 
 /**
  * {@link NamingConvention} for Humio.

File: implementations/micrometer-registry-humio/src/main/java/io/micrometer/humio/package-info.java
Patch:
@@ -17,5 +17,5 @@
 @NonNullFields
 package io.micrometer.humio;
 
-import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
+import io.micrometer.common.lang.NonNullApi;
+import io.micrometer.common.lang.NonNullFields;

File: implementations/micrometer-registry-influx/src/main/java/io/micrometer/influx/CreateDatabaseQueryBuilder.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micrometer.influx;
 
-import io.micrometer.core.lang.Nullable;
+import io.micrometer.common.lang.Nullable;
 
 import java.util.Objects;
 import java.util.stream.Stream;

File: implementations/micrometer-registry-influx/src/main/java/io/micrometer/influx/InfluxApiVersion.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micrometer.influx;
 
-import io.micrometer.core.instrument.util.StringUtils;
+import io.micrometer.common.util.StringUtils;
 import io.micrometer.core.ipc.http.HttpSender;
 
 import java.io.UnsupportedEncodingException;

File: implementations/micrometer-registry-influx/src/main/java/io/micrometer/influx/InfluxConfig.java
Patch:
@@ -15,11 +15,11 @@
  */
 package io.micrometer.influx;
 
+import io.micrometer.common.lang.Nullable;
+import io.micrometer.common.util.StringUtils;
 import io.micrometer.core.instrument.config.validate.InvalidReason;
 import io.micrometer.core.instrument.config.validate.Validated;
 import io.micrometer.core.instrument.step.StepRegistryConfig;
-import io.micrometer.core.instrument.util.StringUtils;
-import io.micrometer.core.lang.Nullable;
 
 import static io.micrometer.core.instrument.config.MeterRegistryConfigValidator.checkAll;
 import static io.micrometer.core.instrument.config.MeterRegistryConfigValidator.checkRequired;

File: implementations/micrometer-registry-influx/src/main/java/io/micrometer/influx/InfluxMeterRegistry.java
Patch:
@@ -15,12 +15,12 @@
  */
 package io.micrometer.influx;
 
+import io.micrometer.common.util.StringUtils;
 import io.micrometer.core.instrument.*;
 import io.micrometer.core.instrument.step.StepMeterRegistry;
 import io.micrometer.core.instrument.util.DoubleFormat;
 import io.micrometer.core.instrument.util.MeterPartition;
 import io.micrometer.core.instrument.util.NamedThreadFactory;
-import io.micrometer.core.instrument.util.StringUtils;
 import io.micrometer.core.ipc.http.HttpSender;
 import io.micrometer.core.ipc.http.HttpUrlConnectionSender;
 import org.slf4j.Logger;

File: implementations/micrometer-registry-influx/src/main/java/io/micrometer/influx/InfluxNamingConvention.java
Patch:
@@ -15,9 +15,9 @@
  */
 package io.micrometer.influx;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.Meter;
 import io.micrometer.core.instrument.config.NamingConvention;
-import io.micrometer.core.lang.Nullable;
 
 import java.util.regex.Pattern;
 

File: implementations/micrometer-registry-influx/src/main/java/io/micrometer/influx/package-info.java
Patch:
@@ -17,5 +17,5 @@
 @NonNullFields
 package io.micrometer.influx;
 
-import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
+import io.micrometer.common.lang.NonNullApi;
+import io.micrometer.common.lang.NonNullFields;

File: implementations/micrometer-registry-influx/src/test/java/io/micrometer/influx/InfluxMeterRegistryCompatibilityTest.java
Patch:
@@ -15,9 +15,9 @@
  */
 package io.micrometer.influx;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.MockClock;
-import io.micrometer.core.lang.Nullable;
 import io.micrometer.core.tck.MeterRegistryCompatibilityKit;
 
 import java.time.Duration;

File: implementations/micrometer-registry-influx/src/test/java/io/micrometer/influx/InfluxMeterRegistryVersionsTest.java
Patch:
@@ -17,11 +17,11 @@
 
 import com.github.tomakehurst.wiremock.WireMockServer;
 import com.github.tomakehurst.wiremock.client.BasicCredentials;
+import io.micrometer.common.lang.NonNull;
 import io.micrometer.core.instrument.Counter;
 import io.micrometer.core.instrument.MockClock;
 import io.micrometer.core.instrument.config.validate.Validated;
 import io.micrometer.core.instrument.config.validate.ValidationException;
-import io.micrometer.core.lang.NonNull;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
 import ru.lanwen.wiremock.ext.WiremockResolver;

File: implementations/micrometer-registry-jmx/src/main/java/io/micrometer/jmx/package-info.java
Patch:
@@ -17,5 +17,5 @@
 @NonNullFields
 package io.micrometer.jmx;
 
-import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
+import io.micrometer.common.lang.NonNullApi;
+import io.micrometer.common.lang.NonNullFields;

File: implementations/micrometer-registry-kairos/src/main/java/io/micrometer/kairos/KairosConfig.java
Patch:
@@ -15,9 +15,9 @@
  */
 package io.micrometer.kairos;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.config.validate.Validated;
 import io.micrometer.core.instrument.step.StepRegistryConfig;
-import io.micrometer.core.lang.Nullable;
 
 import static io.micrometer.core.instrument.config.MeterRegistryConfigValidator.checkAll;
 import static io.micrometer.core.instrument.config.MeterRegistryConfigValidator.checkRequired;

File: implementations/micrometer-registry-kairos/src/main/java/io/micrometer/kairos/KairosNamingConvention.java
Patch:
@@ -15,10 +15,10 @@
  */
 package io.micrometer.kairos;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.Meter;
 import io.micrometer.core.instrument.config.NamingConvention;
 import io.micrometer.core.instrument.util.StringEscapeUtils;
-import io.micrometer.core.lang.Nullable;
 
 import java.util.regex.Pattern;
 

File: implementations/micrometer-registry-kairos/src/main/java/io/micrometer/kairos/package-info.java
Patch:
@@ -17,5 +17,5 @@
 @NonNullFields
 package io.micrometer.kairos;
 
-import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
+import io.micrometer.common.lang.NonNullApi;
+import io.micrometer.common.lang.NonNullFields;

File: implementations/micrometer-registry-kairos/src/test/java/io/micrometer/kairos/KairosMeterRegistryCompatibilityTest.java
Patch:
@@ -15,9 +15,9 @@
  */
 package io.micrometer.kairos;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.MockClock;
-import io.micrometer.core.lang.Nullable;
 import io.micrometer.core.tck.MeterRegistryCompatibilityKit;
 
 import java.time.Duration;

File: implementations/micrometer-registry-new-relic/src/main/java/io/micrometer/newrelic/NewRelicConfig.java
Patch:
@@ -15,15 +15,15 @@
  */
 package io.micrometer.newrelic;
 
+import io.micrometer.common.lang.Nullable;
+import io.micrometer.common.util.StringUtils;
 import io.micrometer.core.instrument.config.validate.InvalidReason;
 import io.micrometer.core.instrument.config.validate.Validated;
 import io.micrometer.core.instrument.step.StepRegistryConfig;
-import io.micrometer.core.instrument.util.StringUtils;
-import io.micrometer.core.lang.Nullable;
 
+import static io.micrometer.common.util.StringUtils.isBlank;
 import static io.micrometer.core.instrument.config.MeterRegistryConfigValidator.*;
 import static io.micrometer.core.instrument.config.validate.PropertyValidator.*;
-import static io.micrometer.core.instrument.util.StringUtils.isBlank;
 
 /**
  * Configuration for {@link NewRelicMeterRegistry}.

File: implementations/micrometer-registry-new-relic/src/main/java/io/micrometer/newrelic/NewRelicMeterRegistry.java
Patch:
@@ -15,12 +15,12 @@
  */
 package io.micrometer.newrelic;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.Clock;
 import io.micrometer.core.instrument.config.NamingConvention;
 import io.micrometer.core.instrument.step.StepMeterRegistry;
 import io.micrometer.core.instrument.util.NamedThreadFactory;
 import io.micrometer.core.ipc.http.HttpSender;
-import io.micrometer.core.lang.Nullable;
 
 import java.util.concurrent.ThreadFactory;
 import java.util.concurrent.TimeUnit;

File: implementations/micrometer-registry-new-relic/src/main/java/io/micrometer/newrelic/NewRelicNamingConvention.java
Patch:
@@ -15,10 +15,10 @@
  */
 package io.micrometer.newrelic;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.Meter;
 import io.micrometer.core.instrument.config.NamingConvention;
 import io.micrometer.core.instrument.util.StringEscapeUtils;
-import io.micrometer.core.lang.Nullable;
 
 import java.util.regex.Pattern;
 

File: implementations/micrometer-registry-new-relic/src/main/java/io/micrometer/newrelic/package-info.java
Patch:
@@ -17,5 +17,5 @@
 @NonNullFields
 package io.micrometer.newrelic;
 
-import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
+import io.micrometer.common.lang.NonNullApi;
+import io.micrometer.common.lang.NonNullFields;

File: implementations/micrometer-registry-new-relic/src/test/java/io/micrometer/newrelic/NewRelicMeterRegistryCompatibilityTest.java
Patch:
@@ -15,9 +15,9 @@
  */
 package io.micrometer.newrelic;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.MockClock;
-import io.micrometer.core.lang.Nullable;
 import io.micrometer.core.tck.MeterRegistryCompatibilityKit;
 
 import java.time.Duration;

File: implementations/micrometer-registry-opentsdb/src/main/java/io/micrometer/opentsdb/OpenTSDBConfig.java
Patch:
@@ -15,9 +15,9 @@
  */
 package io.micrometer.opentsdb;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.config.validate.Validated;
 import io.micrometer.core.instrument.push.PushRegistryConfig;
-import io.micrometer.core.lang.Nullable;
 
 import static io.micrometer.core.instrument.config.MeterRegistryConfigValidator.*;
 import static io.micrometer.core.instrument.config.validate.PropertyValidator.*;

File: implementations/micrometer-registry-opentsdb/src/main/java/io/micrometer/opentsdb/OpenTSDBDistributionSummary.java
Patch:
@@ -15,10 +15,10 @@
  */
 package io.micrometer.opentsdb;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.AbstractDistributionSummary;
 import io.micrometer.core.instrument.Clock;
 import io.micrometer.core.instrument.distribution.*;
-import io.micrometer.core.lang.Nullable;
 
 import java.time.Duration;
 import java.util.concurrent.atomic.DoubleAdder;

File: implementations/micrometer-registry-opentsdb/src/main/java/io/micrometer/opentsdb/OpenTSDBMeterRegistry.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.micrometer.opentsdb;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.*;
 import io.micrometer.core.instrument.cumulative.CumulativeCounter;
 import io.micrometer.core.instrument.cumulative.CumulativeFunctionCounter;
@@ -33,7 +34,6 @@
 import io.micrometer.core.instrument.util.NamedThreadFactory;
 import io.micrometer.core.ipc.http.HttpSender;
 import io.micrometer.core.ipc.http.HttpUrlConnectionSender;
-import io.micrometer.core.lang.Nullable;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: implementations/micrometer-registry-opentsdb/src/main/java/io/micrometer/opentsdb/OpenTSDBNamingConvention.java
Patch:
@@ -15,9 +15,9 @@
  */
 package io.micrometer.opentsdb;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.Meter;
 import io.micrometer.core.instrument.config.NamingConvention;
-import io.micrometer.core.lang.Nullable;
 
 import java.util.regex.Pattern;
 

File: implementations/micrometer-registry-opentsdb/src/main/java/io/micrometer/opentsdb/OpenTSDBTimer.java
Patch:
@@ -15,12 +15,12 @@
  */
 package io.micrometer.opentsdb;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.AbstractTimer;
 import io.micrometer.core.instrument.Clock;
 import io.micrometer.core.instrument.distribution.*;
 import io.micrometer.core.instrument.distribution.pause.PauseDetector;
 import io.micrometer.core.instrument.util.TimeUtils;
-import io.micrometer.core.lang.Nullable;
 
 import java.time.Duration;
 import java.util.concurrent.TimeUnit;

File: implementations/micrometer-registry-opentsdb/src/main/java/io/micrometer/opentsdb/package-info.java
Patch:
@@ -17,5 +17,5 @@
 @NonNullFields
 package io.micrometer.opentsdb;
 
-import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
+import io.micrometer.common.lang.NonNullApi;
+import io.micrometer.common.lang.NonNullFields;

File: implementations/micrometer-registry-otlp/src/main/java/io/micrometer/registry/otlp/OtlpDistributionSummary.java
Patch:
@@ -15,10 +15,10 @@
  */
 package io.micrometer.registry.otlp;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.Clock;
 import io.micrometer.core.instrument.cumulative.CumulativeDistributionSummary;
 import io.micrometer.core.instrument.distribution.*;
-import io.micrometer.core.lang.Nullable;
 
 import java.time.Duration;
 import java.util.concurrent.TimeUnit;

File: implementations/micrometer-registry-otlp/src/main/java/io/micrometer/registry/otlp/OtlpMeterRegistry.java
Patch:
@@ -15,6 +15,8 @@
  */
 package io.micrometer.registry.otlp;
 
+import io.micrometer.common.util.internal.logging.InternalLogger;
+import io.micrometer.common.util.internal.logging.InternalLoggerFactory;
 import io.micrometer.core.instrument.Gauge;
 import io.micrometer.core.instrument.*;
 import io.micrometer.core.instrument.config.NamingConvention;
@@ -28,8 +30,6 @@
 import io.micrometer.core.instrument.util.TimeUtils;
 import io.micrometer.core.ipc.http.HttpSender;
 import io.micrometer.core.ipc.http.HttpUrlConnectionSender;
-import io.micrometer.core.util.internal.logging.InternalLogger;
-import io.micrometer.core.util.internal.logging.InternalLoggerFactory;
 import io.opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest;
 import io.opentelemetry.proto.common.v1.AnyValue;
 import io.opentelemetry.proto.common.v1.KeyValue;

File: implementations/micrometer-registry-otlp/src/main/java/io/micrometer/registry/otlp/OtlpTimer.java
Patch:
@@ -15,12 +15,12 @@
  */
 package io.micrometer.registry.otlp;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.Clock;
 import io.micrometer.core.instrument.cumulative.CumulativeTimer;
 import io.micrometer.core.instrument.distribution.*;
 import io.micrometer.core.instrument.distribution.pause.PauseDetector;
 import io.micrometer.core.instrument.util.TimeUtils;
-import io.micrometer.core.lang.Nullable;
 
 import java.time.Duration;
 import java.util.concurrent.TimeUnit;

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusCounter.java
Patch:
@@ -15,11 +15,11 @@
  */
 package io.micrometer.prometheus;
 
+import io.micrometer.common.lang.NonNull;
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.AbstractMeter;
 import io.micrometer.core.instrument.Counter;
 import io.micrometer.core.instrument.Meter;
-import io.micrometer.core.lang.NonNull;
-import io.micrometer.core.lang.Nullable;
 import io.prometheus.client.exemplars.CounterExemplarSampler;
 import io.prometheus.client.exemplars.Exemplar;
 

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusDistributionSummary.java
Patch:
@@ -15,11 +15,11 @@
  */
 package io.micrometer.prometheus;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.AbstractDistributionSummary;
 import io.micrometer.core.instrument.Clock;
 import io.micrometer.core.instrument.DistributionSummary;
 import io.micrometer.core.instrument.distribution.*;
-import io.micrometer.core.lang.Nullable;
 import io.prometheus.client.exemplars.Exemplar;
 import io.prometheus.client.exemplars.HistogramExemplarSampler;
 

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusNamingConvention.java
Patch:
@@ -15,9 +15,9 @@
  */
 package io.micrometer.prometheus;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.Meter;
 import io.micrometer.core.instrument.config.NamingConvention;
-import io.micrometer.core.lang.Nullable;
 
 import java.util.regex.Pattern;
 

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusTimer.java
Patch:
@@ -15,13 +15,13 @@
  */
 package io.micrometer.prometheus;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.AbstractTimer;
 import io.micrometer.core.instrument.Clock;
 import io.micrometer.core.instrument.Timer;
 import io.micrometer.core.instrument.distribution.*;
 import io.micrometer.core.instrument.distribution.pause.PauseDetector;
 import io.micrometer.core.instrument.util.TimeUtils;
-import io.micrometer.core.lang.Nullable;
 import io.prometheus.client.exemplars.Exemplar;
 import io.prometheus.client.exemplars.HistogramExemplarSampler;
 

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/package-info.java
Patch:
@@ -17,5 +17,5 @@
 @NonNullFields
 package io.micrometer.prometheus;
 
-import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
+import io.micrometer.common.lang.NonNullApi;
+import io.micrometer.common.lang.NonNullFields;

File: implementations/micrometer-registry-signalfx/src/main/java/io/micrometer/signalfx/SignalFxMeterRegistry.java
Patch:
@@ -23,6 +23,7 @@
 import com.signalfx.metrics.errorhandler.OnSendErrorHandler;
 import com.signalfx.metrics.flush.AggregateMetricSender;
 import com.signalfx.metrics.protobuf.SignalFxProtocolBuffers;
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.*;
 import io.micrometer.core.instrument.config.NamingConvention;
 import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;
@@ -31,7 +32,6 @@
 import io.micrometer.core.instrument.step.StepMeterRegistry;
 import io.micrometer.core.instrument.util.MeterPartition;
 import io.micrometer.core.instrument.util.NamedThreadFactory;
-import io.micrometer.core.lang.Nullable;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: implementations/micrometer-registry-signalfx/src/main/java/io/micrometer/signalfx/SignalFxNamingConvention.java
Patch:
@@ -15,12 +15,12 @@
  */
 package io.micrometer.signalfx;
 
+import io.micrometer.common.lang.Nullable;
+import io.micrometer.common.util.StringUtils;
+import io.micrometer.common.util.internal.logging.WarnThenDebugLogger;
 import io.micrometer.core.instrument.Meter;
 import io.micrometer.core.instrument.config.NamingConvention;
 import io.micrometer.core.instrument.util.StringEscapeUtils;
-import io.micrometer.core.instrument.util.StringUtils;
-import io.micrometer.core.lang.Nullable;
-import io.micrometer.core.util.internal.logging.WarnThenDebugLogger;
 
 import java.util.regex.Pattern;
 

File: implementations/micrometer-registry-signalfx/src/main/java/io/micrometer/signalfx/package-info.java
Patch:
@@ -17,5 +17,5 @@
 @NonNullFields
 package io.micrometer.signalfx;
 
-import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
+import io.micrometer.common.lang.NonNullApi;
+import io.micrometer.common.lang.NonNullFields;

File: implementations/micrometer-registry-signalfx/src/test/java/io/micrometer/signalfx/SignalFxMeterRegistryCompatibilityTest.java
Patch:
@@ -15,9 +15,9 @@
  */
 package io.micrometer.signalfx;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.MockClock;
-import io.micrometer.core.lang.Nullable;
 import io.micrometer.core.tck.MeterRegistryCompatibilityKit;
 
 import java.time.Duration;

File: implementations/micrometer-registry-stackdriver/src/main/java/io/micrometer/stackdriver/StackdriverConfig.java
Patch:
@@ -19,10 +19,10 @@
 import com.google.api.gax.core.FixedCredentialsProvider;
 import com.google.auth.oauth2.GoogleCredentials;
 import com.google.cloud.monitoring.v3.MetricServiceSettings;
+import io.micrometer.common.util.StringUtils;
 import io.micrometer.core.instrument.config.validate.InvalidReason;
 import io.micrometer.core.instrument.config.validate.Validated;
 import io.micrometer.core.instrument.step.StepRegistryConfig;
-import io.micrometer.core.instrument.util.StringUtils;
 
 import java.io.FileInputStream;
 import java.io.IOException;

File: implementations/micrometer-registry-stackdriver/src/main/java/io/micrometer/stackdriver/StackdriverMeterRegistry.java
Patch:
@@ -24,6 +24,7 @@
 import com.google.cloud.monitoring.v3.MetricServiceSettings;
 import com.google.monitoring.v3.*;
 import com.google.protobuf.Timestamp;
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.Timer;
 import io.micrometer.core.instrument.*;
 import io.micrometer.core.instrument.distribution.CountAtBucket;
@@ -36,7 +37,6 @@
 import io.micrometer.core.instrument.step.StepTimer;
 import io.micrometer.core.instrument.util.DoubleFormat;
 import io.micrometer.core.instrument.util.NamedThreadFactory;
-import io.micrometer.core.lang.Nullable;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: implementations/micrometer-registry-stackdriver/src/main/java/io/micrometer/stackdriver/StackdriverNamingConvention.java
Patch:
@@ -15,10 +15,10 @@
  */
 package io.micrometer.stackdriver;
 
+import io.micrometer.common.lang.Nullable;
+import io.micrometer.common.util.StringUtils;
 import io.micrometer.core.instrument.Meter;
 import io.micrometer.core.instrument.config.NamingConvention;
-import io.micrometer.core.instrument.util.StringUtils;
-import io.micrometer.core.lang.Nullable;
 
 import java.util.regex.Pattern;
 

File: implementations/micrometer-registry-stackdriver/src/main/java/io/micrometer/stackdriver/package-info.java
Patch:
@@ -17,5 +17,5 @@
 @NonNullFields
 package io.micrometer.stackdriver;
 
-import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
+import io.micrometer.common.lang.NonNullApi;
+import io.micrometer.common.lang.NonNullFields;

File: implementations/micrometer-registry-stackdriver/src/test/java/io/micrometer/stackdriver/StackdriverMeterRegistryCompatibilityTest.java
Patch:
@@ -15,9 +15,9 @@
  */
 package io.micrometer.stackdriver;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.MockClock;
-import io.micrometer.core.lang.Nullable;
 import io.micrometer.core.tck.MeterRegistryCompatibilityKit;
 
 import java.time.Duration;

File: implementations/micrometer-registry-stackdriver/src/test/java/io/micrometer/stackdriver/StackdriverMeterRegistryTest.java
Patch:
@@ -16,11 +16,11 @@
 package io.micrometer.stackdriver;
 
 import com.google.api.Distribution;
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.Issue;
 import io.micrometer.core.instrument.MockClock;
 import io.micrometer.core.instrument.distribution.CountAtBucket;
 import io.micrometer.core.instrument.distribution.HistogramSnapshot;
-import io.micrometer.core.lang.Nullable;
 import org.junit.jupiter.api.Test;
 
 import java.util.List;

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdGauge.java
Patch:
@@ -15,9 +15,9 @@
  */
 package io.micrometer.statsd;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.AbstractMeter;
 import io.micrometer.core.instrument.Gauge;
-import io.micrometer.core.lang.Nullable;
 import reactor.core.publisher.FluxSink;
 
 import java.lang.ref.WeakReference;

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdMeterRegistry.java
Patch:
@@ -15,6 +15,8 @@
  */
 package io.micrometer.statsd;
 
+import io.micrometer.common.lang.Nullable;
+import io.micrometer.common.util.internal.logging.WarnThenDebugLogger;
 import io.micrometer.core.annotation.Incubating;
 import io.micrometer.core.instrument.*;
 import io.micrometer.core.instrument.config.NamingConvention;
@@ -23,8 +25,6 @@
 import io.micrometer.core.instrument.distribution.pause.PauseDetector;
 import io.micrometer.core.instrument.internal.DefaultMeter;
 import io.micrometer.core.instrument.util.HierarchicalNameMapper;
-import io.micrometer.core.lang.Nullable;
-import io.micrometer.core.util.internal.logging.WarnThenDebugLogger;
 import io.micrometer.statsd.internal.*;
 import io.netty.channel.unix.DomainSocketAddress;
 import io.netty.util.AttributeKey;

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/internal/DatadogStatsdLineBuilder.java
Patch:
@@ -15,14 +15,14 @@
  */
 package io.micrometer.statsd.internal;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.Meter;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.Statistic;
 import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.config.NamingConvention;
 import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;
 import io.micrometer.core.instrument.util.DoubleFormat;
-import io.micrometer.core.lang.Nullable;
 
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/internal/EtsyStatsdLineBuilder.java
Patch:
@@ -15,12 +15,12 @@
  */
 package io.micrometer.statsd.internal;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.Meter;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.Statistic;
 import io.micrometer.core.instrument.config.NamingConvention;
 import io.micrometer.core.instrument.util.HierarchicalNameMapper;
-import io.micrometer.core.lang.Nullable;
 
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/internal/FlavorStatsdLineBuilder.java
Patch:
@@ -15,11 +15,11 @@
  */
 package io.micrometer.statsd.internal;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.Meter;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.Statistic;
 import io.micrometer.core.instrument.util.DoubleFormat;
-import io.micrometer.core.lang.Nullable;
 import io.micrometer.statsd.StatsdLineBuilder;
 
 import java.util.Objects;

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/internal/SysdigStatsdLineBuilder.java
Patch:
@@ -15,11 +15,11 @@
  */
 package io.micrometer.statsd.internal;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.Meter;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.Statistic;
 import io.micrometer.core.instrument.config.NamingConvention;
-import io.micrometer.core.lang.Nullable;
 
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/internal/TelegrafStatsdLineBuilder.java
Patch:
@@ -15,11 +15,11 @@
  */
 package io.micrometer.statsd.internal;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.Meter;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.Statistic;
 import io.micrometer.core.instrument.config.NamingConvention;
-import io.micrometer.core.lang.Nullable;
 
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/internal/package-info.java
Patch:
@@ -17,5 +17,5 @@
 @NonNullFields
 package io.micrometer.statsd.internal;
 
-import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
+import io.micrometer.common.lang.NonNullApi;
+import io.micrometer.common.lang.NonNullFields;

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/package-info.java
Patch:
@@ -17,5 +17,5 @@
 @NonNullFields
 package io.micrometer.statsd;
 
-import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
+import io.micrometer.common.lang.NonNullApi;
+import io.micrometer.common.lang.NonNullFields;

File: implementations/micrometer-registry-statsd/src/test/java/io/micrometer/statsd/StatsdMeterRegistryTest.java
Patch:
@@ -17,11 +17,11 @@
 
 import ch.qos.logback.classic.Level;
 import ch.qos.logback.classic.Logger;
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.Issue;
 import io.micrometer.core.instrument.*;
 import io.micrometer.core.instrument.binder.logging.LogbackMetrics;
 import io.micrometer.core.instrument.config.NamingConvention;
-import io.micrometer.core.lang.Nullable;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;

File: implementations/micrometer-registry-wavefront/src/main/java/io/micrometer/wavefront/WavefrontConfig.java
Patch:
@@ -15,10 +15,10 @@
  */
 package io.micrometer.wavefront;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.config.validate.InvalidReason;
 import io.micrometer.core.instrument.config.validate.Validated;
 import io.micrometer.core.instrument.push.PushRegistryConfig;
-import io.micrometer.core.lang.Nullable;
 
 import java.net.InetAddress;
 import java.net.UnknownHostException;

File: implementations/micrometer-registry-wavefront/src/main/java/io/micrometer/wavefront/WavefrontDistributionSummary.java
Patch:
@@ -16,10 +16,10 @@
 package io.micrometer.wavefront;
 
 import com.wavefront.sdk.entities.histograms.WavefrontHistogramImpl;
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.Clock;
 import io.micrometer.core.instrument.cumulative.CumulativeDistributionSummary;
 import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;
-import io.micrometer.core.lang.Nullable;
 
 import java.util.Collections;
 import java.util.List;

File: implementations/micrometer-registry-wavefront/src/main/java/io/micrometer/wavefront/WavefrontLongTaskTimer.java
Patch:
@@ -16,10 +16,10 @@
 package io.micrometer.wavefront;
 
 import com.wavefront.sdk.entities.histograms.WavefrontHistogramImpl;
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.Clock;
 import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;
 import io.micrometer.core.instrument.internal.DefaultLongTaskTimer;
-import io.micrometer.core.lang.Nullable;
 
 import java.util.Collections;
 import java.util.List;

File: implementations/micrometer-registry-wavefront/src/main/java/io/micrometer/wavefront/WavefrontMeterRegistry.java
Patch:
@@ -19,6 +19,7 @@
 import com.wavefront.sdk.common.clients.WavefrontClient;
 import com.wavefront.sdk.entities.histograms.HistogramGranularity;
 import com.wavefront.sdk.entities.histograms.WavefrontHistogramImpl;
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.*;
 import io.micrometer.core.instrument.cumulative.CumulativeCounter;
 import io.micrometer.core.instrument.cumulative.CumulativeFunctionCounter;
@@ -31,7 +32,6 @@
 import io.micrometer.core.instrument.push.PushMeterRegistry;
 import io.micrometer.core.instrument.util.NamedThreadFactory;
 import io.micrometer.core.ipc.http.HttpSender;
-import io.micrometer.core.lang.Nullable;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: implementations/micrometer-registry-wavefront/src/main/java/io/micrometer/wavefront/WavefrontNamingConvention.java
Patch:
@@ -15,10 +15,10 @@
  */
 package io.micrometer.wavefront;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.Meter;
 import io.micrometer.core.instrument.config.NamingConvention;
 import io.micrometer.core.instrument.util.StringEscapeUtils;
-import io.micrometer.core.lang.Nullable;
 
 import java.util.regex.Pattern;
 

File: implementations/micrometer-registry-wavefront/src/main/java/io/micrometer/wavefront/WavefrontTimer.java
Patch:
@@ -16,12 +16,12 @@
 package io.micrometer.wavefront;
 
 import com.wavefront.sdk.entities.histograms.WavefrontHistogramImpl;
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.Clock;
 import io.micrometer.core.instrument.cumulative.CumulativeTimer;
 import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;
 import io.micrometer.core.instrument.distribution.pause.PauseDetector;
 import io.micrometer.core.instrument.util.TimeUtils;
-import io.micrometer.core.lang.Nullable;
 
 import java.util.Collections;
 import java.util.List;

File: implementations/micrometer-registry-wavefront/src/main/java/io/micrometer/wavefront/package-info.java
Patch:
@@ -17,5 +17,5 @@
 @NonNullFields
 package io.micrometer.wavefront;
 
-import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
+import io.micrometer.common.lang.NonNullApi;
+import io.micrometer.common.lang.NonNullFields;

File: implementations/micrometer-registry-wavefront/src/test/java/io/micrometer/wavefront/WavefrontMeterRegistryCompatibilityTest.java
Patch:
@@ -15,9 +15,9 @@
  */
 package io.micrometer.wavefront;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.MockClock;
-import io.micrometer.core.lang.Nullable;
 import io.micrometer.core.tck.MeterRegistryCompatibilityKit;
 
 import java.time.Duration;

File: micrometer-commons/src/main/java/io/micrometer/common/ImmutableKeyValue.java
Patch:
@@ -15,10 +15,10 @@
  */
 package io.micrometer.common;
 
-import java.util.Objects;
-
 import io.micrometer.common.lang.Nullable;
 
+import java.util.Objects;
+
 import static java.util.Objects.requireNonNull;
 
 /**

File: micrometer-commons/src/main/java/io/micrometer/common/docs/KeyName.java
Patch:
@@ -15,10 +15,10 @@
  */
 package io.micrometer.common.docs;
 
-import java.util.Arrays;
-
 import io.micrometer.common.KeyValue;
 
+import java.util.Arrays;
+
 /**
  * Represents a key name used for documenting instrumentation.
  *

File: micrometer-core/src/main/java/io/micrometer/core/aop/CountedAspect.java
Patch:
@@ -15,9 +15,9 @@
  */
 package io.micrometer.core.aop;
 
+import io.micrometer.common.lang.NonNullApi;
 import io.micrometer.core.annotation.Counted;
 import io.micrometer.core.instrument.*;
-import io.micrometer.core.lang.NonNullApi;
 import org.aspectj.lang.ProceedingJoinPoint;
 import org.aspectj.lang.annotation.Around;
 import org.aspectj.lang.annotation.Aspect;

File: micrometer-core/src/main/java/io/micrometer/core/aop/TimedAspect.java
Patch:
@@ -15,11 +15,11 @@
  */
 package io.micrometer.core.aop;
 
+import io.micrometer.common.lang.NonNullApi;
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.annotation.Incubating;
 import io.micrometer.core.annotation.Timed;
 import io.micrometer.core.instrument.*;
-import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.Nullable;
 import org.aspectj.lang.ProceedingJoinPoint;
 import org.aspectj.lang.annotation.Around;
 import org.aspectj.lang.annotation.Aspect;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/AbstractMeter.java
Patch:
@@ -15,8 +15,8 @@
  */
 package io.micrometer.core.instrument;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.util.MeterEquivalence;
-import io.micrometer.core.lang.Nullable;
 
 /**
  * Base class for {@link Meter} implementations.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/AbstractTimer.java
Patch:
@@ -15,10 +15,10 @@
  */
 package io.micrometer.core.instrument;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.distribution.*;
 import io.micrometer.core.instrument.distribution.pause.ClockDriftPauseDetector;
 import io.micrometer.core.instrument.distribution.pause.PauseDetector;
-import io.micrometer.core.lang.Nullable;
 import org.LatencyUtils.IntervalEstimator;
 import org.LatencyUtils.SimplePauseDetector;
 import org.LatencyUtils.TimeCappedMovingAverageIntervalEstimator;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/AbstractTimerBuilder.java
Patch:
@@ -15,9 +15,9 @@
  */
 package io.micrometer.core.instrument;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;
 import io.micrometer.core.instrument.distribution.pause.PauseDetector;
-import io.micrometer.core.lang.Nullable;
 
 import java.time.Duration;
 import java.util.Arrays;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Counter.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micrometer.core.instrument;
 
-import io.micrometer.core.lang.Nullable;
+import io.micrometer.common.lang.Nullable;
 
 import java.util.Collections;
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/DistributionSummary.java
Patch:
@@ -15,11 +15,11 @@
  */
 package io.micrometer.core.instrument;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.distribution.CountAtBucket;
 import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;
 import io.micrometer.core.instrument.distribution.HistogramSupport;
 import io.micrometer.core.instrument.distribution.ValueAtPercentile;
-import io.micrometer.core.lang.Nullable;
 
 import java.time.Duration;
 import java.util.Arrays;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/FunctionCounter.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micrometer.core.instrument;
 
-import io.micrometer.core.lang.Nullable;
+import io.micrometer.common.lang.Nullable;
 
 import java.util.Collections;
 import java.util.function.ToDoubleFunction;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/FunctionTimer.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micrometer.core.instrument;
 
-import io.micrometer.core.lang.Nullable;
+import io.micrometer.common.lang.Nullable;
 
 import java.util.Arrays;
 import java.util.concurrent.TimeUnit;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Gauge.java
Patch:
@@ -15,9 +15,9 @@
  */
 package io.micrometer.core.instrument;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.annotation.Incubating;
 import io.micrometer.core.instrument.distribution.HistogramGauges;
-import io.micrometer.core.lang.Nullable;
 
 import java.util.Collections;
 import java.util.function.Supplier;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/ImmutableTag.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micrometer.core.instrument;
 
-import io.micrometer.core.lang.Nullable;
+import io.micrometer.common.lang.Nullable;
 
 import java.util.Objects;
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/LongTaskTimer.java
Patch:
@@ -15,10 +15,10 @@
  */
 package io.micrometer.core.instrument;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.annotation.Timed;
 import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;
 import io.micrometer.core.instrument.distribution.HistogramSupport;
-import io.micrometer.core.lang.Nullable;
 
 import java.time.Duration;
 import java.util.Arrays;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Meter.java
Patch:
@@ -15,10 +15,10 @@
  */
 package io.micrometer.core.instrument;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.annotation.Incubating;
 import io.micrometer.core.instrument.config.NamingConvention;
 import io.micrometer.core.instrument.distribution.HistogramGauges;
-import io.micrometer.core.lang.Nullable;
 
 import java.util.ArrayList;
 import java.util.Collections;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/MeterRegistry.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.micrometer.core.instrument;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.annotation.Incubating;
 import io.micrometer.core.instrument.Meter.Id;
 import io.micrometer.core.instrument.config.MeterFilter;
@@ -28,7 +29,6 @@
 import io.micrometer.core.instrument.search.RequiredSearch;
 import io.micrometer.core.instrument.search.Search;
 import io.micrometer.core.instrument.util.TimeUtils;
-import io.micrometer.core.lang.Nullable;
 
 import java.util.*;
 import java.util.concurrent.ConcurrentHashMap;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Metrics.java
Patch:
@@ -15,8 +15,8 @@
  */
 package io.micrometer.core.instrument;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.composite.CompositeMeterRegistry;
-import io.micrometer.core.lang.Nullable;
 
 import java.util.Collection;
 import java.util.Map;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/MultiGauge.java
Patch:
@@ -15,8 +15,8 @@
  */
 package io.micrometer.core.instrument;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.annotation.Incubating;
-import io.micrometer.core.lang.Nullable;
 
 import java.util.Set;
 import java.util.concurrent.atomic.AtomicReference;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/StrongReferenceGaugeFunction.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micrometer.core.instrument;
 
-import io.micrometer.core.lang.Nullable;
+import io.micrometer.common.lang.Nullable;
 
 import java.util.function.ToDoubleFunction;
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Tags.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micrometer.core.instrument;
 
-import io.micrometer.core.lang.Nullable;
+import io.micrometer.common.lang.Nullable;
 
 import java.util.*;
 import java.util.stream.Stream;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/TimeGauge.java
Patch:
@@ -15,9 +15,9 @@
  */
 package io.micrometer.core.instrument;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.annotation.Incubating;
 import io.micrometer.core.instrument.util.TimeUtils;
-import io.micrometer.core.lang.Nullable;
 
 import java.util.concurrent.TimeUnit;
 import java.util.function.Supplier;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Timer.java
Patch:
@@ -15,13 +15,13 @@
  */
 package io.micrometer.core.instrument;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.annotation.Incubating;
 import io.micrometer.core.annotation.Timed;
 import io.micrometer.core.instrument.distribution.CountAtBucket;
 import io.micrometer.core.instrument.distribution.HistogramSupport;
 import io.micrometer.core.instrument.distribution.ValueAtPercentile;
 import io.micrometer.core.instrument.distribution.pause.PauseDetector;
-import io.micrometer.core.lang.Nullable;
 
 import java.time.Duration;
 import java.util.Arrays;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/MeterBinder.java
Patch:
@@ -15,8 +15,8 @@
  */
 package io.micrometer.core.instrument.binder;
 
+import io.micrometer.common.lang.NonNull;
 import io.micrometer.core.instrument.MeterRegistry;
-import io.micrometer.core.lang.NonNull;
 
 /**
  * Binders register one or more metrics to provide information about the state of some

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/CacheMeterBinder.java
Patch:
@@ -15,11 +15,11 @@
  */
 package io.micrometer.core.instrument.binder.cache;
 
+import io.micrometer.common.lang.NonNullApi;
+import io.micrometer.common.lang.NonNullFields;
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.*;
 import io.micrometer.core.instrument.binder.MeterBinder;
-import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
-import io.micrometer.core.lang.Nullable;
 
 import java.lang.ref.WeakReference;
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/CaffeineCacheMetrics.java
Patch:
@@ -20,10 +20,10 @@
 import com.github.benmanes.caffeine.cache.Caffeine;
 import com.github.benmanes.caffeine.cache.LoadingCache;
 import com.github.benmanes.caffeine.cache.stats.CacheStats;
+import io.micrometer.common.lang.NonNullApi;
+import io.micrometer.common.lang.NonNullFields;
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.*;
-import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
-import io.micrometer.core.lang.Nullable;
 
 import java.util.concurrent.TimeUnit;
 import java.util.function.Function;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/CaffeineStatsCounter.java
Patch:
@@ -19,9 +19,9 @@
 import com.github.benmanes.caffeine.cache.RemovalCause;
 import com.github.benmanes.caffeine.cache.stats.CacheStats;
 import com.github.benmanes.caffeine.cache.stats.StatsCounter;
+import io.micrometer.common.lang.NonNullApi;
+import io.micrometer.common.lang.NonNullFields;
 import io.micrometer.core.instrument.*;
-import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
 
 import java.util.Arrays;
 import java.util.EnumMap;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/EhCache2Metrics.java
Patch:
@@ -15,11 +15,11 @@
  */
 package io.micrometer.core.instrument.binder.cache;
 
+import io.micrometer.common.lang.NonNullApi;
+import io.micrometer.common.lang.NonNullFields;
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.*;
 import io.micrometer.core.instrument.binder.BaseUnits;
-import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
-import io.micrometer.core.lang.Nullable;
 import net.sf.ehcache.Ehcache;
 import net.sf.ehcache.statistics.StatisticsGateway;
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/GuavaCacheMetrics.java
Patch:
@@ -18,10 +18,10 @@
 import com.google.common.cache.Cache;
 import com.google.common.cache.CacheBuilder;
 import com.google.common.cache.LoadingCache;
+import io.micrometer.common.lang.NonNullApi;
+import io.micrometer.common.lang.NonNullFields;
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.*;
-import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
-import io.micrometer.core.lang.Nullable;
 
 import java.util.concurrent.TimeUnit;
 import java.util.function.Function;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/HazelcastCacheMetrics.java
Patch:
@@ -15,12 +15,12 @@
  */
 package io.micrometer.core.instrument.binder.cache;
 
+import io.micrometer.common.lang.NonNullApi;
+import io.micrometer.common.lang.NonNullFields;
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.*;
 import io.micrometer.core.instrument.binder.BaseUnits;
 import io.micrometer.core.instrument.binder.cache.HazelcastIMapAdapter.LocalMapStats;
-import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
-import io.micrometer.core.lang.Nullable;
 
 import java.util.concurrent.TimeUnit;
 import java.util.function.ToDoubleFunction;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/HazelcastIMapAdapter.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micrometer.core.instrument.binder.cache;
 
-import io.micrometer.core.lang.Nullable;
+import io.micrometer.common.lang.Nullable;
 
 import java.lang.invoke.MethodHandle;
 import java.lang.invoke.MethodHandles;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/JCacheMetrics.java
Patch:
@@ -15,14 +15,14 @@
  */
 package io.micrometer.core.instrument.binder.cache;
 
+import io.micrometer.common.lang.NonNullApi;
+import io.micrometer.common.lang.NonNullFields;
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.Gauge;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.Tags;
 import io.micrometer.core.instrument.config.InvalidConfigurationException;
-import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
-import io.micrometer.core.lang.Nullable;
 
 import javax.cache.Cache;
 import javax.cache.CacheManager;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/package-info.java
Patch:
@@ -16,4 +16,4 @@
 @NonNullApi
 package io.micrometer.core.instrument.binder.cache;
 
-import io.micrometer.core.lang.NonNullApi;
+import io.micrometer.common.lang.NonNullApi;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/db/DatabaseTableMetrics.java
Patch:
@@ -15,14 +15,14 @@
  */
 package io.micrometer.core.instrument.binder.db;
 
+import io.micrometer.common.lang.NonNullApi;
+import io.micrometer.common.lang.NonNullFields;
 import io.micrometer.core.instrument.Gauge;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.Tags;
 import io.micrometer.core.instrument.binder.BaseUnits;
 import io.micrometer.core.instrument.binder.MeterBinder;
-import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
 
 import javax.sql.DataSource;
 import java.sql.Connection;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/db/JooqExecuteListener.java
Patch:
@@ -15,10 +15,10 @@
  */
 package io.micrometer.core.instrument.binder.db;
 
+import io.micrometer.common.util.StringUtils;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.Timer;
-import io.micrometer.core.instrument.util.StringUtils;
 import org.jooq.ExecuteContext;
 import org.jooq.exception.DataAccessException;
 import org.jooq.impl.DefaultExecuteListener;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/db/PostgreSQLDatabaseMetrics.java
Patch:
@@ -15,11 +15,11 @@
  */
 package io.micrometer.core.instrument.binder.db;
 
+import io.micrometer.common.lang.NonNullApi;
+import io.micrometer.common.lang.NonNullFields;
 import io.micrometer.core.instrument.*;
 import io.micrometer.core.instrument.binder.BaseUnits;
 import io.micrometer.core.instrument.binder.MeterBinder;
-import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
 
 import javax.sql.DataSource;
 import java.sql.Connection;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/http/HttpRequestTags.java
Patch:
@@ -15,9 +15,9 @@
  */
 package io.micrometer.core.instrument.binder.http;
 
+import io.micrometer.common.util.StringUtils;
 import io.micrometer.core.annotation.Incubating;
 import io.micrometer.core.instrument.Tag;
-import io.micrometer.core.instrument.util.StringUtils;
 
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/httpcomponents/PoolingHttpClientConnectionManagerMetricsBinder.java
Patch:
@@ -15,12 +15,12 @@
  */
 package io.micrometer.core.instrument.binder.httpcomponents;
 
+import io.micrometer.common.lang.NonNull;
 import io.micrometer.core.instrument.Gauge;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.Tags;
 import io.micrometer.core.instrument.binder.MeterBinder;
-import io.micrometer.core.lang.NonNull;
 import org.apache.http.conn.routing.HttpRoute;
 import org.apache.http.pool.ConnPoolControl;
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/hystrix/HystrixMetricsBinder.java
Patch:
@@ -21,10 +21,10 @@
 import com.netflix.hystrix.strategy.executionhook.HystrixCommandExecutionHook;
 import com.netflix.hystrix.strategy.metrics.HystrixMetricsPublisher;
 import com.netflix.hystrix.strategy.properties.HystrixPropertiesStrategy;
+import io.micrometer.common.lang.NonNullApi;
+import io.micrometer.common.lang.NonNullFields;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.binder.MeterBinder;
-import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
 
 @NonNullApi
 @NonNullFields

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/hystrix/MicrometerMetricsPublisher.java
Patch:
@@ -20,9 +20,9 @@
 import com.netflix.hystrix.strategy.metrics.HystrixMetricsPublisherCollapser;
 import com.netflix.hystrix.strategy.metrics.HystrixMetricsPublisherCommand;
 import com.netflix.hystrix.strategy.metrics.HystrixMetricsPublisherThreadPool;
+import io.micrometer.common.lang.NonNullApi;
+import io.micrometer.common.lang.NonNullFields;
 import io.micrometer.core.instrument.MeterRegistry;
-import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
 
 /**
  * @author Clint Checketts

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/hystrix/MicrometerMetricsPublisherThreadPool.java
Patch:
@@ -19,9 +19,9 @@
 import com.netflix.hystrix.HystrixThreadPoolMetrics;
 import com.netflix.hystrix.HystrixThreadPoolProperties;
 import com.netflix.hystrix.strategy.metrics.HystrixMetricsPublisherThreadPool;
+import io.micrometer.common.lang.NonNullApi;
+import io.micrometer.common.lang.NonNullFields;
 import io.micrometer.core.instrument.*;
-import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
 
 /**
  * Micrometer publisher for Hystrix thread pool metrics.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jersey/server/JerseyTags.java
Patch:
@@ -15,9 +15,9 @@
  */
 package io.micrometer.core.instrument.binder.jersey.server;
 
+import io.micrometer.common.util.StringUtils;
 import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.binder.http.Outcome;
-import io.micrometer.core.instrument.util.StringUtils;
 import org.glassfish.jersey.server.ContainerRequest;
 import org.glassfish.jersey.server.ContainerResponse;
 import org.glassfish.jersey.server.ExtendedUriInfo;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jetty/JettyClientTags.java
Patch:
@@ -15,9 +15,9 @@
  */
 package io.micrometer.core.instrument.binder.jetty;
 
+import io.micrometer.common.util.StringUtils;
 import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.binder.http.Outcome;
-import io.micrometer.core.instrument.util.StringUtils;
 import org.eclipse.jetty.client.api.Request;
 import org.eclipse.jetty.client.api.Response;
 import org.eclipse.jetty.client.api.Result;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jetty/JettyStatisticsMetrics.java
Patch:
@@ -15,11 +15,11 @@
  */
 package io.micrometer.core.instrument.binder.jetty;
 
+import io.micrometer.common.lang.NonNullApi;
+import io.micrometer.common.lang.NonNullFields;
 import io.micrometer.core.instrument.*;
 import io.micrometer.core.instrument.binder.BaseUnits;
 import io.micrometer.core.instrument.binder.MeterBinder;
-import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
 import org.eclipse.jetty.server.handler.StatisticsHandler;
 
 import java.util.concurrent.TimeUnit;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jetty/TimedHandler.java
Patch:
@@ -15,12 +15,12 @@
  */
 package io.micrometer.core.instrument.binder.jetty;
 
+import io.micrometer.common.lang.NonNullApi;
+import io.micrometer.common.lang.NonNullFields;
 import io.micrometer.core.instrument.*;
 import io.micrometer.core.instrument.binder.BaseUnits;
 import io.micrometer.core.instrument.binder.http.DefaultHttpServletRequestTagsProvider;
 import io.micrometer.core.instrument.binder.http.HttpServletRequestTagsProvider;
-import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
 import org.eclipse.jetty.http.HttpStatus;
 import org.eclipse.jetty.server.AsyncContextEvent;
 import org.eclipse.jetty.server.Handler;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jpa/HibernateMetrics.java
Patch:
@@ -15,11 +15,11 @@
  */
 package io.micrometer.core.instrument.binder.jpa;
 
+import io.micrometer.common.lang.NonNullApi;
+import io.micrometer.common.lang.NonNullFields;
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.*;
 import io.micrometer.core.instrument.binder.MeterBinder;
-import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
-import io.micrometer.core.lang.Nullable;
 import org.hibernate.SessionFactory;
 import org.hibernate.stat.Statistics;
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jpa/HibernateQueryMetrics.java
Patch:
@@ -15,10 +15,10 @@
  */
 package io.micrometer.core.instrument.binder.jpa;
 
+import io.micrometer.common.lang.NonNullApi;
+import io.micrometer.common.lang.NonNullFields;
 import io.micrometer.core.instrument.*;
 import io.micrometer.core.instrument.binder.MeterBinder;
-import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
 import org.hibernate.SessionFactory;
 import org.hibernate.engine.spi.SessionFactoryImplementor;
 import org.hibernate.event.service.spi.EventListenerRegistry;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jvm/ClassLoaderMetrics.java
Patch:
@@ -15,14 +15,14 @@
  */
 package io.micrometer.core.instrument.binder.jvm;
 
+import io.micrometer.common.lang.NonNullApi;
+import io.micrometer.common.lang.NonNullFields;
 import io.micrometer.core.instrument.FunctionCounter;
 import io.micrometer.core.instrument.Gauge;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.binder.BaseUnits;
 import io.micrometer.core.instrument.binder.MeterBinder;
-import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
 
 import java.lang.management.ClassLoadingMXBean;
 import java.lang.management.ManagementFactory;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jvm/DiskSpaceMetrics.java
Patch:
@@ -15,15 +15,15 @@
  */
 package io.micrometer.core.instrument.binder.jvm;
 
+import io.micrometer.common.lang.NonNullApi;
+import io.micrometer.common.lang.NonNullFields;
 import io.micrometer.core.annotation.Incubating;
 import io.micrometer.core.instrument.Gauge;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.Tags;
 import io.micrometer.core.instrument.binder.BaseUnits;
 import io.micrometer.core.instrument.binder.MeterBinder;
-import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
 
 import java.io.File;
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jvm/JvmCompilationMetrics.java
Patch:
@@ -15,14 +15,14 @@
  */
 package io.micrometer.core.instrument.binder.jvm;
 
+import io.micrometer.common.lang.NonNullApi;
+import io.micrometer.common.lang.NonNullFields;
 import io.micrometer.core.instrument.FunctionCounter;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.Tags;
 import io.micrometer.core.instrument.binder.BaseUnits;
 import io.micrometer.core.instrument.binder.MeterBinder;
-import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
 
 import java.lang.management.CompilationMXBean;
 import java.lang.management.ManagementFactory;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jvm/JvmHeapPressureMetrics.java
Patch:
@@ -17,13 +17,13 @@
 
 import com.sun.management.GarbageCollectionNotificationInfo;
 import com.sun.management.GcInfo;
+import io.micrometer.common.lang.NonNull;
 import io.micrometer.core.instrument.Gauge;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.binder.BaseUnits;
 import io.micrometer.core.instrument.binder.MeterBinder;
 import io.micrometer.core.instrument.distribution.TimeWindowSum;
-import io.micrometer.core.lang.NonNull;
 
 import javax.management.ListenerNotFoundException;
 import javax.management.NotificationEmitter;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jvm/JvmMemory.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micrometer.core.instrument.binder.jvm;
 
-import io.micrometer.core.lang.Nullable;
+import io.micrometer.common.lang.Nullable;
 
 import java.lang.management.ManagementFactory;
 import java.lang.management.MemoryPoolMXBean;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jvm/JvmMemoryMetrics.java
Patch:
@@ -15,14 +15,14 @@
  */
 package io.micrometer.core.instrument.binder.jvm;
 
+import io.micrometer.common.lang.NonNullApi;
+import io.micrometer.common.lang.NonNullFields;
 import io.micrometer.core.instrument.Gauge;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.Tags;
 import io.micrometer.core.instrument.binder.BaseUnits;
 import io.micrometer.core.instrument.binder.MeterBinder;
-import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
 
 import java.lang.management.*;
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jvm/JvmThreadMetrics.java
Patch:
@@ -15,14 +15,14 @@
  */
 package io.micrometer.core.instrument.binder.jvm;
 
+import io.micrometer.common.lang.NonNullApi;
+import io.micrometer.common.lang.NonNullFields;
 import io.micrometer.core.instrument.Gauge;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.Tags;
 import io.micrometer.core.instrument.binder.BaseUnits;
 import io.micrometer.core.instrument.binder.MeterBinder;
-import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
 
 import java.lang.management.ManagementFactory;
 import java.lang.management.ThreadMXBean;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/kafka/KafkaClientMetrics.java
Patch:
@@ -15,10 +15,10 @@
  */
 package io.micrometer.core.instrument.binder.kafka;
 
+import io.micrometer.common.lang.NonNullApi;
+import io.micrometer.common.lang.NonNullFields;
 import io.micrometer.core.annotation.Incubating;
 import io.micrometer.core.instrument.Tag;
-import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
 import org.apache.kafka.clients.admin.AdminClient;
 import org.apache.kafka.clients.consumer.Consumer;
 import org.apache.kafka.clients.producer.Producer;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/kafka/KafkaConsumerMetrics.java
Patch:
@@ -15,13 +15,13 @@
  */
 package io.micrometer.core.instrument.binder.kafka;
 
+import io.micrometer.common.lang.NonNullApi;
+import io.micrometer.common.lang.NonNullFields;
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.annotation.Incubating;
 import io.micrometer.core.instrument.*;
 import io.micrometer.core.instrument.binder.BaseUnits;
 import io.micrometer.core.instrument.binder.MeterBinder;
-import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
-import io.micrometer.core.lang.Nullable;
 
 import javax.management.*;
 import java.lang.management.ManagementFactory;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/kafka/KafkaStreamsMetrics.java
Patch:
@@ -15,10 +15,10 @@
  */
 package io.micrometer.core.instrument.binder.kafka;
 
+import io.micrometer.common.lang.NonNullApi;
+import io.micrometer.common.lang.NonNullFields;
 import io.micrometer.core.annotation.Incubating;
 import io.micrometer.core.instrument.Tag;
-import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
 import org.apache.kafka.common.Metric;
 import org.apache.kafka.streams.KafkaStreams;
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/logging/Log4j2Metrics.java
Patch:
@@ -15,13 +15,13 @@
  */
 package io.micrometer.core.instrument.binder.logging;
 
+import io.micrometer.common.lang.NonNullApi;
+import io.micrometer.common.lang.NonNullFields;
 import io.micrometer.core.instrument.Counter;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.binder.BaseUnits;
 import io.micrometer.core.instrument.binder.MeterBinder;
-import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.core.Filter;
 import org.apache.logging.log4j.core.LogEvent;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/logging/LogbackMetrics.java
Patch:
@@ -21,13 +21,13 @@
 import ch.qos.logback.classic.spi.LoggerContextListener;
 import ch.qos.logback.classic.turbo.TurboFilter;
 import ch.qos.logback.core.spi.FilterReply;
+import io.micrometer.common.lang.NonNullApi;
+import io.micrometer.common.lang.NonNullFields;
 import io.micrometer.core.instrument.Counter;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.binder.BaseUnits;
 import io.micrometer.core.instrument.binder.MeterBinder;
-import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
 import org.slf4j.LoggerFactory;
 import org.slf4j.Marker;
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/mongodb/DefaultMongoCommandTagsProvider.java
Patch:
@@ -18,10 +18,10 @@
 import com.mongodb.event.CommandEvent;
 import com.mongodb.event.CommandStartedEvent;
 import com.mongodb.event.CommandSucceededEvent;
+import io.micrometer.common.util.StringUtils;
+import io.micrometer.common.util.internal.logging.WarnThenDebugLogger;
 import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.Tags;
-import io.micrometer.core.instrument.util.StringUtils;
-import io.micrometer.core.util.internal.logging.WarnThenDebugLogger;
 import org.bson.BsonDocument;
 import org.bson.BsonString;
 import org.bson.BsonValue;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/mongodb/MongoMetricsCommandListener.java
Patch:
@@ -17,11 +17,11 @@
 
 import com.mongodb.client.MongoClient;
 import com.mongodb.event.*;
+import io.micrometer.common.lang.NonNullApi;
+import io.micrometer.common.lang.NonNullFields;
 import io.micrometer.core.annotation.Incubating;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.Timer;
-import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
 
 import java.util.concurrent.TimeUnit;
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/mongodb/MongoMetricsConnectionPoolListener.java
Patch:
@@ -18,12 +18,12 @@
 import com.mongodb.client.MongoClient;
 import com.mongodb.connection.ServerId;
 import com.mongodb.event.*;
+import io.micrometer.common.lang.NonNullApi;
+import io.micrometer.common.lang.NonNullFields;
 import io.micrometer.core.annotation.Incubating;
 import io.micrometer.core.instrument.Gauge;
 import io.micrometer.core.instrument.Meter;
 import io.micrometer.core.instrument.MeterRegistry;
-import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
 
 import java.util.ArrayList;
 import java.util.List;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/okhttp3/OkHttpConnectionPoolMetrics.java
Patch:
@@ -15,13 +15,13 @@
  */
 package io.micrometer.core.instrument.binder.okhttp3;
 
+import io.micrometer.common.lang.NonNull;
 import io.micrometer.core.instrument.Gauge;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.Tags;
 import io.micrometer.core.instrument.binder.BaseUnits;
 import io.micrometer.core.instrument.binder.MeterBinder;
-import io.micrometer.core.lang.NonNull;
 import okhttp3.ConnectionPool;
 
 import java.util.Collections;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/okhttp3/OkHttpMetricsEventListener.java
Patch:
@@ -15,13 +15,13 @@
  */
 package io.micrometer.core.instrument.binder.okhttp3;
 
+import io.micrometer.common.lang.NonNullApi;
+import io.micrometer.common.lang.NonNullFields;
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.Tags;
 import io.micrometer.core.instrument.Timer;
-import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
-import io.micrometer.core.lang.Nullable;
 import okhttp3.EventListener;
 import okhttp3.*;
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/package-info.java
Patch:
@@ -17,5 +17,5 @@
 @NonNullFields
 package io.micrometer.core.instrument.binder;
 
-import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
+import io.micrometer.common.lang.NonNullApi;
+import io.micrometer.common.lang.NonNullFields;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/system/DiskSpaceMetrics.java
Patch:
@@ -15,14 +15,14 @@
  */
 package io.micrometer.core.instrument.binder.system;
 
+import io.micrometer.common.lang.NonNullApi;
+import io.micrometer.common.lang.NonNullFields;
 import io.micrometer.core.instrument.Gauge;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.Tags;
 import io.micrometer.core.instrument.binder.BaseUnits;
 import io.micrometer.core.instrument.binder.MeterBinder;
-import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
 
 import java.io.File;
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/system/FileDescriptorMetrics.java
Patch:
@@ -15,14 +15,14 @@
  */
 package io.micrometer.core.instrument.binder.system;
 
+import io.micrometer.common.lang.NonNullApi;
+import io.micrometer.common.lang.NonNullFields;
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.Gauge;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.binder.BaseUnits;
 import io.micrometer.core.instrument.binder.MeterBinder;
-import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
-import io.micrometer.core.lang.Nullable;
 
 import java.lang.management.ManagementFactory;
 import java.lang.management.OperatingSystemMXBean;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/system/ProcessorMetrics.java
Patch:
@@ -15,13 +15,13 @@
  */
 package io.micrometer.core.instrument.binder.system;
 
+import io.micrometer.common.lang.NonNullApi;
+import io.micrometer.common.lang.NonNullFields;
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.Gauge;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.binder.MeterBinder;
-import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
-import io.micrometer.core.lang.Nullable;
 
 import java.lang.management.ManagementFactory;
 import java.lang.management.OperatingSystemMXBean;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/system/UptimeMetrics.java
Patch:
@@ -15,12 +15,12 @@
  */
 package io.micrometer.core.instrument.binder.system;
 
+import io.micrometer.common.lang.NonNullApi;
+import io.micrometer.common.lang.NonNullFields;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.TimeGauge;
 import io.micrometer.core.instrument.binder.MeterBinder;
-import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
 
 import java.lang.management.ManagementFactory;
 import java.lang.management.RuntimeMXBean;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/tomcat/TomcatMetrics.java
Patch:
@@ -15,12 +15,12 @@
  */
 package io.micrometer.core.instrument.binder.tomcat;
 
+import io.micrometer.common.lang.NonNullApi;
+import io.micrometer.common.lang.NonNullFields;
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.*;
 import io.micrometer.core.instrument.binder.BaseUnits;
 import io.micrometer.core.instrument.binder.MeterBinder;
-import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
-import io.micrometer.core.lang.Nullable;
 import org.apache.catalina.Manager;
 
 import javax.management.*;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/AbstractCompositeMeter.java
Patch:
@@ -15,10 +15,10 @@
  */
 package io.micrometer.core.instrument.composite;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.AbstractMeter;
 import io.micrometer.core.instrument.Meter;
 import io.micrometer.core.instrument.MeterRegistry;
-import io.micrometer.core.lang.Nullable;
 
 import java.util.Collections;
 import java.util.IdentityHashMap;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeGauge.java
Patch:
@@ -15,11 +15,11 @@
  */
 package io.micrometer.core.instrument.composite;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.Gauge;
 import io.micrometer.core.instrument.Meter;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.noop.NoopGauge;
-import io.micrometer.core.lang.Nullable;
 
 import java.lang.ref.WeakReference;
 import java.util.function.ToDoubleFunction;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeMeterRegistry.java
Patch:
@@ -15,11 +15,11 @@
  */
 package io.micrometer.core.instrument.composite;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.*;
 import io.micrometer.core.instrument.config.NamingConvention;
 import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;
 import io.micrometer.core.instrument.distribution.pause.PauseDetector;
-import io.micrometer.core.lang.Nullable;
 
 import java.util.Collections;
 import java.util.IdentityHashMap;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeTimeGauge.java
Patch:
@@ -15,10 +15,10 @@
  */
 package io.micrometer.core.instrument.composite;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.TimeGauge;
 import io.micrometer.core.instrument.noop.NoopTimeGauge;
-import io.micrometer.core.lang.Nullable;
 
 import java.lang.ref.WeakReference;
 import java.util.concurrent.TimeUnit;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/package-info.java
Patch:
@@ -17,5 +17,5 @@
 @NonNullFields
 package io.micrometer.core.instrument.composite;
 
-import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
+import io.micrometer.common.lang.NonNullApi;
+import io.micrometer.common.lang.NonNullFields;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/config/MeterFilter.java
Patch:
@@ -15,9 +15,9 @@
  */
 package io.micrometer.core.instrument.config;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.*;
 import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;
-import io.micrometer.core.lang.Nullable;
 
 import java.time.Duration;
 import java.util.ArrayList;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/config/MeterRegistryConfig.java
Patch:
@@ -15,9 +15,9 @@
  */
 package io.micrometer.core.instrument.config;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.config.validate.Validated;
 import io.micrometer.core.instrument.config.validate.ValidationException;
-import io.micrometer.core.lang.Nullable;
 
 public interface MeterRegistryConfig {
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/config/MissingRequiredConfigurationException.java
Patch:
@@ -15,12 +15,11 @@
  */
 package io.micrometer.core.instrument.config;
 
-import io.micrometer.core.instrument.config.validate.Validated;
-
 /**
  * Signals that a piece of required configuration has not been provided.
  *
- * @deprecated since 1.5.0 replaced with {@link Validated} API.
+ * @deprecated since 1.5.0 replaced with
+ * {@link io.micrometer.core.instrument.config.validate.Validated} API.
  */
 @Deprecated
 public class MissingRequiredConfigurationException extends IllegalStateException {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/config/NamingConvention.java
Patch:
@@ -15,9 +15,9 @@
  */
 package io.micrometer.core.instrument.config;
 
+import io.micrometer.common.lang.Nullable;
+import io.micrometer.common.util.StringUtils;
 import io.micrometer.core.instrument.Meter;
-import io.micrometer.core.instrument.util.StringUtils;
-import io.micrometer.core.lang.Nullable;
 
 import java.util.Arrays;
 import java.util.Objects;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/config/package-info.java
Patch:
@@ -17,5 +17,5 @@
 @NonNullFields
 package io.micrometer.core.instrument.config;
 
-import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
+import io.micrometer.common.lang.NonNullApi;
+import io.micrometer.common.lang.NonNullFields;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/config/validate/DurationValidator.java
Patch:
@@ -15,9 +15,9 @@
  */
 package io.micrometer.core.instrument.config.validate;
 
+import io.micrometer.common.lang.Nullable;
+import io.micrometer.common.util.StringUtils;
 import io.micrometer.core.annotation.Incubating;
-import io.micrometer.core.instrument.util.StringUtils;
-import io.micrometer.core.lang.Nullable;
 
 import java.time.Duration;
 import java.time.temporal.ChronoUnit;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/config/validate/Validated.java
Patch:
@@ -15,10 +15,10 @@
  */
 package io.micrometer.core.instrument.config.validate;
 
+import io.micrometer.common.lang.NonNull;
+import io.micrometer.common.lang.Nullable;
+import io.micrometer.common.util.StringUtils;
 import io.micrometer.core.annotation.Incubating;
-import io.micrometer.core.instrument.util.StringUtils;
-import io.micrometer.core.lang.NonNull;
-import io.micrometer.core.lang.Nullable;
 
 import java.util.Collections;
 import java.util.Iterator;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/cumulative/package-info.java
Patch:
@@ -17,5 +17,5 @@
 @NonNullFields
 package io.micrometer.core.instrument.cumulative;
 
-import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
+import io.micrometer.common.lang.NonNullApi;
+import io.micrometer.common.lang.NonNullFields;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/distribution/AbstractTimeWindowHistogram.java
Patch:
@@ -15,9 +15,9 @@
  */
 package io.micrometer.core.instrument.distribution;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.Clock;
 import io.micrometer.core.instrument.config.InvalidConfigurationException;
-import io.micrometer.core.lang.Nullable;
 
 import java.io.PrintStream;
 import java.lang.reflect.Array;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/distribution/DistributionStatisticConfig.java
Patch:
@@ -15,8 +15,8 @@
  */
 package io.micrometer.core.instrument.distribution;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.internal.Mergeable;
-import io.micrometer.core.lang.Nullable;
 
 import java.time.Duration;
 import java.util.NavigableSet;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/distribution/HistogramSnapshot.java
Patch:
@@ -15,8 +15,8 @@
  */
 package io.micrometer.core.instrument.distribution;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.util.TimeUtils;
-import io.micrometer.core.lang.Nullable;
 
 import java.io.PrintStream;
 import java.util.Arrays;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/distribution/package-info.java
Patch:
@@ -17,5 +17,5 @@
 @NonNullFields
 package io.micrometer.core.instrument.distribution;
 
-import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
+import io.micrometer.common.lang.NonNullApi;
+import io.micrometer.common.lang.NonNullFields;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/distribution/pause/package-info.java
Patch:
@@ -17,5 +17,5 @@
 @NonNullFields
 package io.micrometer.core.instrument.distribution.pause;
 
-import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
+import io.micrometer.common.lang.NonNullApi;
+import io.micrometer.common.lang.NonNullFields;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/docs/DocumentedMeter.java
Patch:
@@ -17,8 +17,8 @@
 package io.micrometer.core.instrument.docs;
 
 import io.micrometer.common.docs.KeyName;
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.Meter;
-import io.micrometer.core.lang.Nullable;
 
 /**
  * In order to describe your metrics via e.g. enums instead of Strings you can use this

File: micrometer-core/src/main/java/io/micrometer/core/instrument/dropwizard/DropwizardMeterRegistry.java
Patch:
@@ -18,6 +18,8 @@
 import com.codahale.metrics.ExponentiallyDecayingReservoir;
 import com.codahale.metrics.Gauge;
 import com.codahale.metrics.MetricRegistry;
+import io.micrometer.common.lang.Nullable;
+import io.micrometer.common.util.internal.logging.WarnThenDebugLogger;
 import io.micrometer.core.instrument.*;
 import io.micrometer.core.instrument.config.NamingConvention;
 import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;
@@ -26,8 +28,6 @@
 import io.micrometer.core.instrument.internal.DefaultLongTaskTimer;
 import io.micrometer.core.instrument.internal.DefaultMeter;
 import io.micrometer.core.instrument.util.HierarchicalNameMapper;
-import io.micrometer.core.lang.Nullable;
-import io.micrometer.core.util.internal.logging.WarnThenDebugLogger;
 
 import java.lang.ref.WeakReference;
 import java.util.concurrent.TimeUnit;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/dropwizard/package-info.java
Patch:
@@ -17,5 +17,5 @@
 @NonNullFields
 package io.micrometer.core.instrument.dropwizard;
 
-import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
+import io.micrometer.common.lang.NonNullApi;
+import io.micrometer.common.lang.NonNullFields;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/internal/CumulativeHistogramLongTaskTimer.java
Patch:
@@ -15,11 +15,11 @@
  */
 package io.micrometer.core.instrument.internal;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.Clock;
 import io.micrometer.core.instrument.distribution.CountAtBucket;
 import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;
 import io.micrometer.core.instrument.distribution.HistogramSnapshot;
-import io.micrometer.core.lang.Nullable;
 
 import java.util.Arrays;
 import java.util.concurrent.TimeUnit;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/internal/DefaultGauge.java
Patch:
@@ -15,11 +15,11 @@
  */
 package io.micrometer.core.instrument.internal;
 
+import io.micrometer.common.lang.Nullable;
+import io.micrometer.common.util.internal.logging.WarnThenDebugLogger;
 import io.micrometer.core.instrument.AbstractMeter;
 import io.micrometer.core.instrument.Gauge;
 import io.micrometer.core.instrument.Meter;
-import io.micrometer.core.lang.Nullable;
-import io.micrometer.core.util.internal.logging.WarnThenDebugLogger;
 
 import java.lang.ref.WeakReference;
 import java.util.function.ToDoubleFunction;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/internal/OnlyOnceLoggingDenyMeterFilter.java
Patch:
@@ -15,11 +15,11 @@
  */
 package io.micrometer.core.instrument.internal;
 
+import io.micrometer.common.util.internal.logging.InternalLogger;
+import io.micrometer.common.util.internal.logging.InternalLoggerFactory;
 import io.micrometer.core.instrument.Meter.Id;
 import io.micrometer.core.instrument.config.MeterFilter;
 import io.micrometer.core.instrument.config.MeterFilterReply;
-import io.micrometer.core.util.internal.logging.InternalLogger;
-import io.micrometer.core.util.internal.logging.InternalLoggerFactory;
 
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.function.Supplier;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/internal/package-info.java
Patch:
@@ -17,5 +17,5 @@
 @NonNullFields
 package io.micrometer.core.instrument.internal;
 
-import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
+import io.micrometer.common.lang.NonNullApi;
+import io.micrometer.common.lang.NonNullFields;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/logging/LoggingMeterRegistry.java
Patch:
@@ -15,6 +15,9 @@
  */
 package io.micrometer.core.instrument.logging;
 
+import io.micrometer.common.lang.Nullable;
+import io.micrometer.common.util.internal.logging.InternalLogger;
+import io.micrometer.common.util.internal.logging.InternalLoggerFactory;
 import io.micrometer.core.annotation.Incubating;
 import io.micrometer.core.instrument.Clock;
 import io.micrometer.core.instrument.DistributionSummary;
@@ -30,9 +33,6 @@
 import io.micrometer.core.instrument.step.StepTimer;
 import io.micrometer.core.instrument.util.NamedThreadFactory;
 import io.micrometer.core.instrument.util.TimeUtils;
-import io.micrometer.core.lang.Nullable;
-import io.micrometer.core.util.internal.logging.InternalLogger;
-import io.micrometer.core.util.internal.logging.InternalLoggerFactory;
 
 import java.time.Duration;
 import java.util.concurrent.ThreadFactory;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/logging/package-info.java
Patch:
@@ -17,5 +17,5 @@
 @NonNullFields
 package io.micrometer.core.instrument.logging;
 
-import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
+import io.micrometer.common.lang.NonNullApi;
+import io.micrometer.common.lang.NonNullFields;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/noop/package-info.java
Patch:
@@ -17,5 +17,5 @@
 @NonNullFields
 package io.micrometer.core.instrument.noop;
 
-import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
+import io.micrometer.common.lang.NonNullApi;
+import io.micrometer.common.lang.NonNullFields;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/observation/TimerObservationHandler.java
Patch:
@@ -15,14 +15,14 @@
  */
 package io.micrometer.core.instrument.observation;
 
-import java.util.stream.Collectors;
-
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.Tags;
 import io.micrometer.core.instrument.Timer;
 import io.micrometer.observation.Observation;
 
+import java.util.stream.Collectors;
+
 /**
  * Handler for {@link Timer.Sample}.
  *

File: micrometer-core/src/main/java/io/micrometer/core/instrument/package-info.java
Patch:
@@ -17,5 +17,5 @@
 @NonNullFields
 package io.micrometer.core.instrument;
 
-import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
+import io.micrometer.common.lang.NonNullApi;
+import io.micrometer.common.lang.NonNullFields;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/push/PushMeterRegistry.java
Patch:
@@ -15,12 +15,12 @@
  */
 package io.micrometer.core.instrument.push;
 
+import io.micrometer.common.lang.Nullable;
+import io.micrometer.common.util.internal.logging.InternalLogger;
+import io.micrometer.common.util.internal.logging.InternalLoggerFactory;
 import io.micrometer.core.instrument.Clock;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.util.TimeUtils;
-import io.micrometer.core.lang.Nullable;
-import io.micrometer.core.util.internal.logging.InternalLogger;
-import io.micrometer.core.util.internal.logging.InternalLoggerFactory;
 
 import java.util.concurrent.Executors;
 import java.util.concurrent.ScheduledExecutorService;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/push/package-info.java
Patch:
@@ -17,5 +17,5 @@
 @NonNullFields
 package io.micrometer.core.instrument.push;
 
-import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
+import io.micrometer.common.lang.NonNullApi;
+import io.micrometer.common.lang.NonNullFields;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/search/MeterNotFoundException.java
Patch:
@@ -15,8 +15,8 @@
  */
 package io.micrometer.core.instrument.search;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.*;
-import io.micrometer.core.lang.Nullable;
 
 import java.util.ArrayList;
 import java.util.Collection;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/search/RequiredSearch.java
Patch:
@@ -15,9 +15,9 @@
  */
 package io.micrometer.core.instrument.search;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.Timer;
 import io.micrometer.core.instrument.*;
-import io.micrometer.core.lang.Nullable;
 
 import java.util.*;
 import java.util.function.Predicate;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/search/Search.java
Patch:
@@ -15,11 +15,11 @@
  */
 package io.micrometer.core.instrument.search;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.Timer;
 import io.micrometer.core.instrument.*;
 import io.micrometer.core.instrument.config.MeterFilter;
 import io.micrometer.core.instrument.config.MeterFilterReply;
-import io.micrometer.core.lang.Nullable;
 
 import java.util.*;
 import java.util.function.Predicate;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/search/package-info.java
Patch:
@@ -17,5 +17,5 @@
 @NonNullFields
 package io.micrometer.core.instrument.search;
 
-import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
+import io.micrometer.common.lang.NonNullApi;
+import io.micrometer.common.lang.NonNullFields;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/simple/SimpleMeterRegistry.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.micrometer.core.instrument.simple;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.annotation.Incubating;
 import io.micrometer.core.instrument.*;
 import io.micrometer.core.instrument.cumulative.*;
@@ -25,7 +26,6 @@
 import io.micrometer.core.instrument.internal.DefaultLongTaskTimer;
 import io.micrometer.core.instrument.internal.DefaultMeter;
 import io.micrometer.core.instrument.step.*;
-import io.micrometer.core.lang.Nullable;
 
 import java.util.Comparator;
 import java.util.concurrent.TimeUnit;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/simple/package-info.java
Patch:
@@ -17,5 +17,5 @@
 @NonNullFields
 package io.micrometer.core.instrument.simple;
 
-import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
+import io.micrometer.common.lang.NonNullApi;
+import io.micrometer.common.lang.NonNullFields;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/step/StepMeterRegistry.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.micrometer.core.instrument.step;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.*;
 import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;
 import io.micrometer.core.instrument.distribution.HistogramGauges;
@@ -23,7 +24,6 @@
 import io.micrometer.core.instrument.internal.DefaultLongTaskTimer;
 import io.micrometer.core.instrument.internal.DefaultMeter;
 import io.micrometer.core.instrument.push.PushMeterRegistry;
-import io.micrometer.core.lang.Nullable;
 
 import java.util.concurrent.TimeUnit;
 import java.util.function.ToDoubleFunction;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/step/package-info.java
Patch:
@@ -17,5 +17,5 @@
 @NonNullFields
 package io.micrometer.core.instrument.step;
 
-import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
+import io.micrometer.common.lang.NonNullApi;
+import io.micrometer.common.lang.NonNullFields;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/util/IOUtils.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micrometer.core.instrument.util;
 
-import io.micrometer.core.lang.Nullable;
+import io.micrometer.common.lang.Nullable;
 
 import java.io.*;
 import java.nio.charset.Charset;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/util/MeterEquivalence.java
Patch:
@@ -15,8 +15,8 @@
  */
 package io.micrometer.core.instrument.util;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.Meter;
-import io.micrometer.core.lang.Nullable;
 
 /**
  * @author Jon Schneider

File: micrometer-core/src/main/java/io/micrometer/core/instrument/util/StringEscapeUtils.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micrometer.core.instrument.util;
 
-import io.micrometer.core.lang.Nullable;
+import io.micrometer.common.lang.Nullable;
 
 /**
  * Utilities for JSON escaping {@code String}.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/util/package-info.java
Patch:
@@ -17,5 +17,5 @@
 @NonNullFields
 package io.micrometer.core.instrument.util;
 
-import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
+import io.micrometer.common.lang.NonNullApi;
+import io.micrometer.common.lang.NonNullFields;

File: micrometer-core/src/main/java/io/micrometer/core/ipc/http/HttpSender.java
Patch:
@@ -15,8 +15,8 @@
  */
 package io.micrometer.core.ipc.http;
 
-import io.micrometer.core.instrument.util.StringUtils;
-import io.micrometer.core.lang.Nullable;
+import io.micrometer.common.lang.Nullable;
+import io.micrometer.common.util.StringUtils;
 
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;

File: micrometer-core/src/main/java/io/micrometer/core/util/internal/logging/InternalLogLevel.java
Patch:
@@ -34,7 +34,10 @@
  * NOTE: This file has been copied from {io.netty.util.internal.logging}.
  *
  * The log level that {@link InternalLogger} can log at.
+ * @deprecated Please use
+ * {@link io.micrometer.common.util.internal.logging.InternalLogLevel} instead.
  */
+@Deprecated
 public enum InternalLogLevel {
 
     /**

File: micrometer-core/src/main/java/io/micrometer/core/util/internal/logging/WarnThenDebugLogger.java
Patch:
@@ -23,7 +23,10 @@
  *
  * @author Johnny Lim
  * @since 1.1.8
+ * @deprecated Please use
+ * {@link io.micrometer.common.util.internal.logging.WarnThenDebugLogger} instead.
  */
+@Deprecated
 public class WarnThenDebugLogger {
 
     private final InternalLogger logger;

File: micrometer-core/src/main/java/io/micrometer/core/util/internal/logging/package-info.java
Patch:
@@ -35,5 +35,7 @@
  *
  * <em>Internal-use-only</em> logging API which is not allowed to be used outside
  * Micrometer.
+ * @deprecated Please use the {@code io.micrometer.common.util.internal.logging} package
+ * instead.
  */
 package io.micrometer.core.util.internal.logging;

File: micrometer-core/src/test/java/io/micrometer/core/aop/TimedAspectTest.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.micrometer.core.aop;
 
+import io.micrometer.common.lang.NonNull;
 import io.micrometer.core.annotation.Timed;
 import io.micrometer.core.instrument.LongTaskTimer;
 import io.micrometer.core.instrument.Meter.Id;
@@ -24,7 +25,6 @@
 import io.micrometer.core.instrument.distribution.pause.PauseDetector;
 import io.micrometer.core.instrument.search.MeterNotFoundException;
 import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
-import io.micrometer.core.lang.NonNull;
 import org.aspectj.lang.ProceedingJoinPoint;
 import org.junit.jupiter.api.Test;
 import org.springframework.aop.aspectj.annotation.AspectJProxyFactory;

File: micrometer-core/src/test/java/io/micrometer/core/instrument/MeterFilterTest.java
Patch:
@@ -15,12 +15,12 @@
  */
 package io.micrometer.core.instrument;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.Issue;
 import io.micrometer.core.instrument.config.MeterFilter;
 import io.micrometer.core.instrument.config.MeterFilterReply;
 import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;
 import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
-import io.micrometer.core.lang.Nullable;
 import org.assertj.core.api.Condition;
 import org.junit.jupiter.api.Test;
 

File: micrometer-core/src/test/java/io/micrometer/core/instrument/MeterRegistryInjectionTest.java
Patch:
@@ -18,8 +18,8 @@
 import com.google.inject.AbstractModule;
 import com.google.inject.Guice;
 import com.google.inject.Injector;
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
-import io.micrometer.core.lang.Nullable;
 import org.junit.jupiter.api.Test;
 import org.springframework.context.annotation.AnnotationConfigApplicationContext;
 import org.springframework.context.annotation.Bean;

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/db/MetricsDSLContextTest.java
Patch:
@@ -15,10 +15,10 @@
  */
 package io.micrometer.core.instrument.binder.db;
 
+import io.micrometer.common.lang.NonNull;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.Tags;
 import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
-import io.micrometer.core.lang.NonNull;
 import org.jooq.Record;
 import org.jooq.*;
 import org.jooq.exception.DataAccessException;

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/logging/LogbackMetricsTest.java
Patch:
@@ -18,6 +18,7 @@
 import ch.qos.logback.classic.Level;
 import ch.qos.logback.classic.Logger;
 import ch.qos.logback.classic.LoggerContext;
+import io.micrometer.common.lang.NonNullApi;
 import io.micrometer.core.Issue;
 import io.micrometer.core.instrument.Counter;
 import io.micrometer.core.instrument.Meter;
@@ -26,7 +27,6 @@
 import io.micrometer.core.instrument.cumulative.CumulativeCounter;
 import io.micrometer.core.instrument.simple.SimpleConfig;
 import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
-import io.micrometer.core.lang.NonNullApi;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;

File: micrometer-core/src/test/java/io/micrometer/core/instrument/dropwizard/DropwizardMeterRegistryTest.java
Patch:
@@ -16,10 +16,10 @@
 package io.micrometer.core.instrument.dropwizard;
 
 import com.codahale.metrics.MetricRegistry;
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.core.Issue;
 import io.micrometer.core.instrument.*;
 import io.micrometer.core.instrument.util.HierarchicalNameMapper;
-import io.micrometer.core.lang.Nullable;
 import org.junit.jupiter.api.Test;
 
 import java.time.Duration;

File: micrometer-observation-test/src/main/java/io/micrometer/core/tck/TestObservationRegistryAssert.java
Patch:
@@ -15,12 +15,12 @@
  */
 package io.micrometer.core.tck;
 
+import io.micrometer.observation.Observation;
+
 import java.util.List;
 import java.util.Objects;
 import java.util.stream.Collectors;
 
-import io.micrometer.observation.Observation;
-
 /**
  * Assertion methods for {@code MeterRegistry}s.
  * <p>

File: micrometer-observation/src/main/java/io/micrometer/observation/ObservationRegistry.java
Patch:
@@ -15,12 +15,12 @@
  */
 package io.micrometer.observation;
 
+import io.micrometer.common.lang.Nullable;
+
 import java.util.Collection;
 import java.util.List;
 import java.util.concurrent.CopyOnWriteArrayList;
 
-import io.micrometer.observation.lang.Nullable;
-
 /**
  * Implementations of this interface are responsible for managing state of an
  * {@link Observation}.

File: micrometer-observation/src/main/java/io/micrometer/observation/ObservationTextPublisher.java
Patch:
@@ -15,12 +15,12 @@
  */
 package io.micrometer.observation;
 
+import io.micrometer.common.util.internal.logging.InternalLoggerFactory;
+
 import java.util.function.Consumer;
 import java.util.function.Function;
 import java.util.function.Predicate;
 
-import io.micrometer.common.util.internal.logging.InternalLoggerFactory;
-
 /**
  * An {@link ObservationHandler} that converts the context to text and Publishes it to the
  * {@link Consumer} of your choice.

File: micrometer-observation/src/main/java/io/micrometer/observation/SimpleObservation.java
Patch:
@@ -15,14 +15,14 @@
  */
 package io.micrometer.observation;
 
+import io.micrometer.common.KeyValue;
+import io.micrometer.common.lang.Nullable;
+
 import java.util.ArrayDeque;
 import java.util.Collection;
 import java.util.Deque;
 import java.util.stream.Collectors;
 
-import io.micrometer.common.KeyValue;
-import io.micrometer.observation.lang.Nullable;
-
 /**
  * Default implementation of {@link Observation}.
  *

File: micrometer-observation/src/main/java/io/micrometer/observation/SimpleObservationRegistry.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micrometer.observation;
 
-import io.micrometer.observation.lang.Nullable;
+import io.micrometer.common.lang.Nullable;
 
 /**
  * Default implementation of {@link ObservationRegistry}.

File: micrometer-observation/src/main/java/io/micrometer/observation/transport/http/HttpClientResponse.java
Patch:
@@ -15,8 +15,8 @@
  */
 package io.micrometer.observation.transport.http;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.observation.transport.Kind;
-import io.micrometer.observation.lang.Nullable;
 
 /**
  * This API is taken from OpenZipkin Brave.

File: micrometer-observation/src/main/java/io/micrometer/observation/transport/http/HttpRequest.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micrometer.observation.transport.http;
 
-import io.micrometer.observation.lang.Nullable;
+import io.micrometer.common.lang.Nullable;
 
 /**
  * This API is taken from OpenZipkin Brave.

File: micrometer-observation/src/main/java/io/micrometer/observation/transport/http/HttpResponse.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micrometer.observation.transport.http;
 
-import io.micrometer.observation.lang.Nullable;
+import io.micrometer.common.lang.Nullable;
 
 /**
  * This API is taken from OpenZipkin Brave.

File: micrometer-observation/src/main/java/io/micrometer/observation/transport/http/HttpServerResponse.java
Patch:
@@ -15,8 +15,8 @@
  */
 package io.micrometer.observation.transport.http;
 
+import io.micrometer.common.lang.Nullable;
 import io.micrometer.observation.transport.Kind;
-import io.micrometer.observation.lang.Nullable;
 
 /**
  * This API is taken from OpenZipkin Brave.

File: implementations/micrometer-registry-otlp/src/main/java/io/micrometer/registry/otlp/OtlpLongTaskTimer.java
Patch:
@@ -21,11 +21,11 @@
 
 import java.util.concurrent.TimeUnit;
 
-class OtlpLongTaskTImer extends CumulativeHistogramLongTaskTimer implements StartTimeAwareMeter {
+class OtlpLongTaskTimer extends CumulativeHistogramLongTaskTimer implements StartTimeAwareMeter {
 
     final long startTimeNanos;
 
-    OtlpLongTaskTImer(Id id, Clock clock, TimeUnit baseTimeUnit, DistributionStatisticConfig distributionStatisticConfig) {
+    OtlpLongTaskTimer(Id id, Clock clock, TimeUnit baseTimeUnit, DistributionStatisticConfig distributionStatisticConfig) {
         super(id, clock, baseTimeUnit, distributionStatisticConfig);
         this.startTimeNanos = TimeUnit.MILLISECONDS.toNanos(clock.wallTime());
     }

File: implementations/micrometer-registry-otlp/src/main/java/io/micrometer/registry/otlp/OtlpMeterRegistry.java
Patch:
@@ -155,7 +155,7 @@ protected <T> FunctionCounter newFunctionCounter(Meter.Id id, T obj, ToDoubleFun
 
     @Override
     protected LongTaskTimer newLongTaskTimer(Meter.Id id, DistributionStatisticConfig distributionStatisticConfig) {
-        return new OtlpLongTaskTImer(id, this.clock, getBaseTimeUnit(), distributionStatisticConfig);
+        return new OtlpLongTaskTimer(id, this.clock, getBaseTimeUnit(), distributionStatisticConfig);
     }
 
     @Override

File: micrometer-test/src/main/java/io/micrometer/core/tck/MeterRegistryAssert.java
Patch:
@@ -315,7 +315,7 @@ public MeterRegistryAssert doesNotHaveMeterWithNameAndTagKeys(String meterName,
         isNotNull();
         Meter foundMeter = actual.find(meterName).tagKeys(tagKeys).meter();
         if (foundMeter != null) {
-            failWithMessage("Expected a meter with name <%s> and tag keys <%s> but found one", meterName, String.join(",", tagKeys));
+            failWithMessage("Expected no meter with name <%s> and tag keys <%s> but found one", meterName, String.join(",", tagKeys));
         }
         return this;
     }
@@ -332,7 +332,7 @@ public MeterRegistryAssert doesNotHaveTimerWithNameAndTagKeys(String timerName,
         isNotNull();
         Timer foundTimer = actual.find(timerName).tagKeys(tagKeys).timer();
         if (foundTimer != null) {
-            failWithMessage("Expected a timer with name <%s> and tag keys <%s> but found one", timerName, String.join(",", tagKeys));
+            failWithMessage("Expected no timer with name <%s> and tag keys <%s> but found one", timerName, String.join(",", tagKeys));
         }
         return this;
     }

File: micrometer-test/src/test/java/io/micrometer/core/tck/MeterRegistryAssertTests.java
Patch:
@@ -95,7 +95,7 @@ void assertionErrorThrownWhenTimerPresentWithTagKeys() {
 
         assertThatThrownBy(() -> meterRegistryAssert.doesNotHaveTimerWithNameAndTagKeys("matching-metric-name", "matching-tag"))
                 .isInstanceOf(AssertionError.class)
-                .hasMessageContaining("Expected a timer with name <matching-metric-name> and tag keys <matching-tag> but found one");
+                .hasMessageContaining("Expected no timer with name <matching-metric-name> and tag keys <matching-tag> but found one");
     }
 
     @Test
@@ -232,7 +232,7 @@ void assertionErrorThrownWhenMeterPresentWithTagKeys() {
 
         assertThatThrownBy(() -> meterRegistryAssert.doesNotHaveMeterWithNameAndTagKeys("matching-metric-name", "matching-tag"))
                 .isInstanceOf(AssertionError.class)
-                .hasMessageContaining("Expected a meter with name <matching-metric-name> and tag keys <matching-tag> but found one");
+                .hasMessageContaining("Expected no meter with name <matching-metric-name> and tag keys <matching-tag> but found one");
     }
 
     @Test

File: micrometer-core/src/main/java/io/micrometer/core/aop/TimedAspect.java
Patch:
@@ -152,6 +152,7 @@ public TimedAspect(MeterRegistry registry, Function<ProceedingJoinPoint, Iterabl
     }
 
     @Around("@within(io.micrometer.core.annotation.Timed)")
+    @Nullable
     public Object timedClass(ProceedingJoinPoint pjp) throws Throwable {
         Method method = ((MethodSignature) pjp.getSignature()).getMethod();
         Class<?> declaringClass = method.getDeclaringClass();

File: micrometer-core/src/main/java/io/micrometer/core/aop/TimedAspect.java
Patch:
@@ -24,6 +24,7 @@
 import io.micrometer.core.instrument.Timer;
 import io.micrometer.core.instrument.Metrics;
 import io.micrometer.core.lang.NonNullApi;
+import io.micrometer.core.lang.Nullable;
 import org.aspectj.lang.ProceedingJoinPoint;
 import org.aspectj.lang.annotation.Around;
 import org.aspectj.lang.annotation.Aspect;
@@ -151,6 +152,7 @@ public TimedAspect(MeterRegistry registry, Function<ProceedingJoinPoint, Iterabl
     }
 
     @Around("execution (@io.micrometer.core.annotation.Timed * *.*(..))")
+    @Nullable
     public Object timedMethod(ProceedingJoinPoint pjp) throws Throwable {
         if (shouldSkip.test(pjp)) {
             return pjp.proceed();

File: implementations/micrometer-registry-elastic/src/test/java/io/micrometer/elastic/AbstractElasticsearchMeterRegistryIntegrationTest.java
Patch:
@@ -22,7 +22,6 @@
 import io.micrometer.core.ipc.http.HttpSender;
 import io.micrometer.core.ipc.http.HttpUrlConnectionSender;
 import org.junit.jupiter.api.BeforeEach;
-import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Tag;
 import org.junit.jupiter.api.Test;
 import org.testcontainers.elasticsearch.ElasticsearchContainer;
@@ -64,7 +63,6 @@ void setUp() {
     }
 
     @Test
-    @Disabled("Fix me")
     void indexTemplateShouldApply() throws Throwable {
         String response = sendHttpGet(host);
         String versionNumber = JsonPath.parse(response).read("$.version.number");

File: micrometer-core/src/main/java/io/micrometer/core/instrument/docs/DocumentedMeter.java
Patch:
@@ -35,7 +35,7 @@
  * </ul>
  *
  * @author Marcin Grzejszczak
- * @since 2.0.0
+ * @since 1.10.0
  */
 public interface DocumentedMeter {
     /**

File: micrometer-core/src/main/java/io/micrometer/core/instrument/observation/MeterObservationHandler.java
Patch:
@@ -23,7 +23,7 @@
  *
  * @author Marcin Grzejszczak
  * @param <T> type of context
- * @since 2.0.0
+ * @since 1.10.0
  */
 public interface MeterObservationHandler<T extends Observation.Context> extends ObservationHandler<T> {
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/observation/TimerObservationHandler.java
Patch:
@@ -27,7 +27,7 @@
  * Handler for {@link Timer.Sample}.
  *
  * @author Marcin Grzejszczak
- * @since 2.0.0
+ * @since 1.10.0
  */
 public class TimerObservationHandler implements MeterObservationHandler<Observation.Context> {
 

File: micrometer-observation-test/src/main/java/io/micrometer/core/tck/AnyContextObservationHandlerCompatibilityKit.java
Patch:
@@ -29,7 +29,7 @@
  * and implement the abstract methods.
  *
  * @author Marcin Grzejszczak
- * @since 2.0.0
+ * @since 1.10.0
  */
 public abstract class AnyContextObservationHandlerCompatibilityKit extends NullContextObservationHandlerCompatibilityKit {
 

File: micrometer-observation-test/src/main/java/io/micrometer/core/tck/ConcreteContextObservationHandlerCompatibilityKit.java
Patch:
@@ -31,7 +31,7 @@
  * and implement the abstract methods.
  *
  * @author Marcin Grzejszczak
- * @since 2.0.0
+ * @since 1.10.0
  */
 public abstract class ConcreteContextObservationHandlerCompatibilityKit<T extends Observation.Context> {
 

File: micrometer-observation-test/src/main/java/io/micrometer/core/tck/NullContextObservationHandlerCompatibilityKit.java
Patch:
@@ -31,7 +31,7 @@
  * and implement the abstract methods.
  *
  * @author Marcin Grzejszczak
- * @since 2.0.0
+ * @since 1.10.0
  */
 public abstract class NullContextObservationHandlerCompatibilityKit {
 

File: micrometer-observation-test/src/main/java/io/micrometer/core/tck/ObservationRegistryAssert.java
Patch:
@@ -26,7 +26,7 @@
  * or {@link ObservationRegistryAssert#then(ObservationRegistry)}.
  *
  * @author Marcin Grzejszczak
- * @since 2.0.0
+ * @since 1.10.0
  */
 @SuppressWarnings("unchecked")
 public class ObservationRegistryAssert<SELF extends ObservationRegistryAssert<SELF, ACTUAL>, ACTUAL extends ObservationRegistry> extends AbstractAssert<SELF, ACTUAL> {

File: micrometer-observation-test/src/main/java/io/micrometer/core/tck/TestObservationRegistry.java
Patch:
@@ -30,7 +30,7 @@
  * @author Tommy Ludwig
  * @author Marcin Grzejszczak
  *
- * @since 2.0.0
+ * @since 1.10.0
  */
 public final class TestObservationRegistry implements ObservationRegistry {
 

File: micrometer-observation-test/src/main/java/io/micrometer/core/tck/TestObservationRegistryAssert.java
Patch:
@@ -28,7 +28,7 @@
  * or {@link TestObservationRegistryAssert#then(TestObservationRegistry)}.
  *
  * @author Marcin Grzejszczak
- * @since 2.0.0
+ * @since 1.10.0
  */
 public class TestObservationRegistryAssert extends ObservationRegistryAssert<TestObservationRegistryAssert, TestObservationRegistry> {
 

File: micrometer-observation/src/main/java/io/micrometer/observation/NoopObservationConfig.java
Patch:
@@ -26,7 +26,7 @@
  * @author Tommy Ludwig
  * @author Marcin Grzejszczak
  *
- * @since 2.0.0
+ * @since 1.10.0
  */
 final class NoopObservationConfig extends ObservationRegistry.ObservationConfig {
     /**

File: micrometer-observation/src/main/java/io/micrometer/observation/NoopObservationRegistry.java
Patch:
@@ -23,7 +23,7 @@
  * @author Tommy Ludwig
  * @author Marcin Grzejszczak
  *
- * @since 2.0.0
+ * @since 1.10.0
  */
 final class NoopObservationRegistry implements ObservationRegistry {
     /**

File: micrometer-observation/src/main/java/io/micrometer/observation/ObservationHandler.java
Patch:
@@ -29,7 +29,7 @@
  * @author Jonatan Ivanov
  * @author Tommy Ludwig
  * @author Marcin Grzejszczak
- * @since 2.0.0
+ * @since 1.10.0
  */
 public interface ObservationHandler<T extends Observation.Context> {
     /**

File: micrometer-observation/src/main/java/io/micrometer/observation/ObservationPredicate.java
Patch:
@@ -24,7 +24,7 @@
  * @author Jonatan Ivanov
  * @author Tommy Ludwig
  * @author Marcin Grzejszczak
- * @since 2.0.0
+ * @since 1.10.0
  */
 public interface ObservationPredicate extends BiPredicate<String, Observation.Context> {
 

File: micrometer-observation/src/main/java/io/micrometer/observation/ObservationRegistry.java
Patch:
@@ -28,7 +28,7 @@
  * @author Tommy Ludwig
  * @author Marcin Grzejszczak
  *
- * @since 2.0.0
+ * @since 1.10.0
  */
 public interface ObservationRegistry {
 

File: micrometer-observation/src/main/java/io/micrometer/observation/ObservationTextPublisher.java
Patch:
@@ -25,7 +25,7 @@
  * An {@link ObservationHandler} that converts the context to text and Publishes it to the {@link Consumer} of your choice.
  *
  * @author Jonatan Ivanov
- * @since 2.0.0
+ * @since 1.10.0
  */
 public class ObservationTextPublisher implements ObservationHandler<Observation.Context> {
     private final Consumer<String> consumer;

File: micrometer-observation/src/main/java/io/micrometer/observation/SimpleObservationRegistry.java
Patch:
@@ -24,7 +24,7 @@
  * @author Tommy Ludwig
  * @author Marcin Grzejszczak
  *
- * @since 2.0.0
+ * @since 1.10.0
  */
 class SimpleObservationRegistry implements ObservationRegistry {
 

File: micrometer-observation/src/main/java/io/micrometer/observation/docs/DocumentedObservation.java
Patch:
@@ -38,7 +38,7 @@
  * </ul>
  *
  * @author Marcin Grzejszczak
- * @since 2.0.0
+ * @since 1.10.0
  */
 public interface DocumentedObservation {
 

File: micrometer-observation/src/main/java/io/micrometer/observation/transport/Kind.java
Patch:
@@ -19,7 +19,7 @@
  * Represents side of communication.
  *
  * @author Marcin Grzejszczak
- * @since 2.0.0
+ * @since 1.10.0
  */
 public enum Kind {
 

File: micrometer-observation/src/main/java/io/micrometer/observation/transport/http/HttpClientRequest.java
Patch:
@@ -24,7 +24,7 @@
  *
  * @author OpenZipkin Brave Authors
  * @author Marcin Grzejszczak
- * @since 2.0.0
+ * @since 1.10.0
  */
 public interface HttpClientRequest extends HttpRequest {
 

File: micrometer-observation/src/main/java/io/micrometer/observation/transport/http/HttpClientResponse.java
Patch:
@@ -26,7 +26,7 @@
  *
  * @author OpenZipkin Brave Authors
  * @author Marcin Grzejszczak
- * @since 2.0.0
+ * @since 1.10.0
  */
 public interface HttpClientResponse extends HttpResponse {
 

File: micrometer-observation/src/main/java/io/micrometer/observation/transport/http/HttpRequest.java
Patch:
@@ -24,7 +24,7 @@
  *
  * @author OpenZipkin Brave Authors
  * @author Marcin Grzejszczak
- * @since 2.0.0
+ * @since 1.10.0
  */
 public interface HttpRequest extends Request {
 

File: micrometer-observation/src/main/java/io/micrometer/observation/transport/http/HttpResponse.java
Patch:
@@ -24,7 +24,7 @@
  *
  * @author OpenZipkin Brave Authors
  * @author Marcin Grzejszczak
- * @since 2.0.0
+ * @since 1.10.0
  */
 public interface HttpResponse extends Response {
 

File: micrometer-observation/src/main/java/io/micrometer/observation/transport/http/HttpServerRequest.java
Patch:
@@ -24,7 +24,7 @@
  *
  * @author OpenZipkin Brave Authors
  * @author Marcin Grzejszczak
- * @since 2.0.0
+ * @since 1.10.0
  */
 public interface HttpServerRequest extends HttpRequest {
 

File: micrometer-observation/src/main/java/io/micrometer/observation/transport/http/HttpServerResponse.java
Patch:
@@ -26,7 +26,7 @@
  *
  * @author OpenZipkin Brave Authors
  * @author Marcin Grzejszczak
- * @since 2.0.0
+ * @since 1.10.0
  */
 public interface HttpServerResponse extends HttpResponse {
 

File: micrometer-observation/src/main/java/io/micrometer/observation/transport/http/Request.java
Patch:
@@ -26,7 +26,7 @@
  *
  * @author OpenZipkin Brave Authors
  * @author Marcin Grzejszczak
- * @since 2.0.0
+ * @since 1.10.0
  */
 public interface Request {
 

File: micrometer-observation/src/main/java/io/micrometer/observation/transport/http/Response.java
Patch:
@@ -27,7 +27,7 @@
  *
  * @author OpenZipkin Brave Authors
  * @author Marcin Grzejszczak
- * @since 2.0.0
+ * @since 1.10.0
  */
 public interface Response {
 

File: micrometer-observation/src/main/java/io/micrometer/observation/transport/http/context/HttpClientContext.java
Patch:
@@ -26,7 +26,7 @@
  *
  * @author Jonatan Ivanov
  * @author Marcin Grzejszczak
- * @since 2.0.0
+ * @since 1.10.0
  */
 public class HttpClientContext extends HttpContext<HttpClientRequest, HttpClientResponse> {
 

File: micrometer-observation/src/main/java/io/micrometer/observation/transport/http/context/HttpContext.java
Patch:
@@ -16,7 +16,7 @@
 package io.micrometer.observation.transport.http.context;
 
 import io.micrometer.observation.Observation;
-import io.micrometer.common.Tags;
+import io.micrometer.common.KeyValues;
 import io.micrometer.observation.transport.http.HttpRequest;
 import io.micrometer.observation.transport.http.HttpResponse;
 import io.micrometer.observation.transport.http.tags.HttpTagsProvider;
@@ -27,7 +27,7 @@
  * {@link Observation.Context} for an HTTP exchange.
  *
  * @author Marcin Grzejszczak
- * @since 2.0.0
+ * @since 1.10.0
  * @param <REQ> request type
  * @param <RES> response type
  */
@@ -79,7 +79,7 @@ public HttpContext(HttpTagsProvider tagsProvider) {
 
     @NonNull
     @Override
-    public Tags getLowCardinalityTags() {
+    public KeyValues getLowCardinalityTags() {
         return this.tagsProvider.getLowCardinalityTags(getRequest(), getResponse(), null);
     }
 }

File: micrometer-observation/src/main/java/io/micrometer/observation/transport/http/context/HttpServerContext.java
Patch:
@@ -24,7 +24,7 @@
  * {@link Observation.Context Context} for an HTTP server request/response.
  *
  * @author Marcin Grzejszczak
- * @since 2.0.0
+ * @since 1.10.0
  */
 public class HttpServerContext extends HttpContext<HttpServerRequest, HttpServerResponse> {
 

File: micrometer-observation/src/test/java/io/micrometer/observation/ObservationTextPublisherTests.java
Patch:
@@ -18,7 +18,7 @@
 import java.io.IOException;
 import java.util.function.Consumer;
 
-import io.micrometer.common.Tag;
+import io.micrometer.common.KeyValue;
 import org.junit.jupiter.api.Test;
 
 import static org.assertj.core.api.Assertions.assertThat;
@@ -89,8 +89,8 @@ private Observation.Context createTestContext() {
                 .setName("testName")
                 .setContextualName("testContextualName")
                 .setError(new IOException("simulated"));
-        context.addLowCardinalityTag(Tag.of("lcTag", "foo"));
-        context.addHighCardinalityTag(Tag.of("hcTag", "bar"));
+        context.addLowCardinalityTag(KeyValue.of("lcTag", "foo"));
+        context.addHighCardinalityTag(KeyValue.of("hcTag", "bar"));
         context.put("contextKey", "contextValue");
 
         return context;

File: samples/micrometer-samples-core/src/main/java/io/micrometer/core/samples/CacheSample.java
Patch:
@@ -15,6 +15,9 @@
  */
 package io.micrometer.core.samples;
 
+import java.time.Duration;
+import java.util.stream.IntStream;
+
 import com.google.common.cache.Cache;
 import com.google.common.cache.CacheBuilder;
 import io.micrometer.core.instrument.MeterRegistry;
@@ -24,9 +27,6 @@
 import io.netty.handler.codec.DelimiterBasedFrameDecoder;
 import reactor.netty.http.client.HttpClient;
 
-import java.time.Duration;
-import java.util.stream.IntStream;
-
 import static io.netty.buffer.Unpooled.wrappedBuffer;
 
 /**

File: samples/micrometer-samples-hazelcast/src/main/java/io/micrometer/samples/hazelcast4/HazelcastCacheSample.java
Patch:
@@ -15,6 +15,8 @@
  */
 package io.micrometer.samples.hazelcast4;
 
+import java.time.Duration;
+
 import com.hazelcast.core.Hazelcast;
 import com.hazelcast.map.IMap;
 import io.micrometer.core.instrument.Clock;
@@ -23,8 +25,6 @@
 import io.micrometer.core.instrument.logging.LoggingMeterRegistry;
 import io.micrometer.core.instrument.logging.LoggingRegistryConfig;
 
-import java.time.Duration;
-
 public class HazelcastCacheSample {
     public static void main(String[] args) throws Exception {
         MeterRegistry registry = loggingMeterRegistry();

File: samples/micrometer-samples-hazelcast3/src/main/java/io/micrometer/samples/hazelcast3/HazelcastCacheSample.java
Patch:
@@ -15,6 +15,8 @@
  */
 package io.micrometer.samples.hazelcast3;
 
+import java.time.Duration;
+
 import com.hazelcast.core.Hazelcast;
 import com.hazelcast.core.IMap;
 import io.micrometer.core.instrument.Clock;
@@ -23,8 +25,6 @@
 import io.micrometer.core.instrument.logging.LoggingMeterRegistry;
 import io.micrometer.core.instrument.logging.LoggingRegistryConfig;
 
-import java.time.Duration;
-
 public class HazelcastCacheSample {
     public static void main(String[] args) throws Exception {
         MeterRegistry registry = loggingMeterRegistry();

File: implementations/micrometer-registry-dynatrace/src/main/java/io/micrometer/dynatrace/types/DynatraceDistributionSummary.java
Patch:
@@ -32,13 +32,13 @@
  * @since 1.9.0
  */
 public final class DynatraceDistributionSummary extends AbstractDistributionSummary implements DynatraceSummarySnapshotSupport {
-    private final DynatraceSummary summary = new DynatraceSummary();
     private static final Logger LOGGER = LoggerFactory.getLogger(DynatraceDistributionSummary.class.getName());
-
     // Configuration that will set the Histogram in AbstractTimer to a NoopHistogram.
     private static final DistributionStatisticConfig NOOP_HISTOGRAM_CONFIG =
             DistributionStatisticConfig.builder().percentilesHistogram(false).percentiles().build();
 
+    private final DynatraceSummary summary = new DynatraceSummary();
+
     public DynatraceDistributionSummary(Id id, Clock clock, DistributionStatisticConfig distributionStatisticConfig, double scale) {
         super(id, clock, NOOP_HISTOGRAM_CONFIG, scale, false);
 

File: implementations/micrometer-registry-dynatrace/src/test/java/io/micrometer/dynatrace/v2/DynatraceExporterV2Test.java
Patch:
@@ -227,7 +227,7 @@ void toTimerLine() {
 
         List<String> lines = exporter.toTimerLine(timer).collect(Collectors.toList());
         assertThat(lines).hasSize(1);
-        assertThat(lines.get(0)).isEqualTo("my.timer,dt.metrics.source=micrometer gauge,min=0.0,max=60.0,sum=90.0,count=3 " + clock.wallTime());
+        assertThat(lines.get(0)).isEqualTo("my.timer,dt.metrics.source=micrometer gauge,min=10.0,max=60.0,sum=90.0,count=3 " + clock.wallTime());
     }
 
     @Test
@@ -341,7 +341,7 @@ void testToDistributionSummaryLine() {
 
         List<String> lines = exporter.toDistributionSummaryLine(summary).collect(Collectors.toList());
         assertThat(lines).hasSize(1);
-        assertThat(lines.get(0)).isEqualTo("my.summary,dt.metrics.source=micrometer gauge,min=0.0,max=5.4,sum=10.9,count=4 " + clock.wallTime());
+        assertThat(lines.get(0)).isEqualTo("my.summary,dt.metrics.source=micrometer gauge,min=0.1,max=5.4,sum=10.9,count=4 " + clock.wallTime());
     }
 
     @Test

File: micrometer-core/src/main/java/io/micrometer/core/instrument/observation/TimerObservationHandler.java
Patch:
@@ -47,7 +47,7 @@ public void onStart(Observation.Context context) {
     public void onStop(Observation.Context context) {
         Timer.Sample sample = context.getRequired(Timer.Sample.class);
         sample.stop(Timer.builder(context.getName())
-                .tag("error", context.getError().map(Throwable::getMessage).orElse("none"))
+                .tag("error", context.getError().map(throwable -> throwable.getClass().getSimpleName()).orElse("none"))
                 .tags(Tags.of(context.getLowCardinalityTags().stream().map(tag -> Tag.of(tag.getKey(), tag.getValue())).collect(Collectors.toList())))
                 .register(this.meterRegistry));
     }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/docs/DocumentedMeter.java
Patch:
@@ -18,6 +18,8 @@
 
 import io.micrometer.core.instrument.Meter;
 import io.micrometer.core.lang.Nullable;
+import io.micrometer.observation.docs.DocumentedObservation;
+import io.micrometer.observation.docs.TagKey;
 
 /**
  * In order to describe your metrics via e.g. enums instead of Strings you can use this

File: micrometer-core/src/main/java/io/micrometer/core/instrument/observation/MeterObservationHandler.java
Patch:
@@ -15,6 +15,9 @@
  */
 package io.micrometer.core.instrument.observation;
 
+import io.micrometer.observation.Observation;
+import io.micrometer.observation.ObservationHandler;
+
 /**
  * Marker interface for meter handlers.
  *

File: micrometer-core/src/test/java/io/micrometer/core/instrument/context/HttpClientContextTest.java
Patch:
@@ -15,9 +15,9 @@
  */
 package io.micrometer.core.instrument.context;
 
-import io.micrometer.core.instrument.transport.http.HttpClientRequest;
-import io.micrometer.core.instrument.transport.http.HttpClientResponse;
-import io.micrometer.core.instrument.transport.http.context.HttpClientContext;
+import io.micrometer.observation.transport.http.HttpClientRequest;
+import io.micrometer.observation.transport.http.HttpClientResponse;
+import io.micrometer.observation.transport.http.context.HttpClientContext;
 import org.junit.jupiter.api.Test;
 
 import static org.assertj.core.api.Assertions.assertThat;

File: micrometer-core/src/test/java/io/micrometer/core/instrument/context/HttpServerContextTests.java
Patch:
@@ -15,9 +15,9 @@
  */
 package io.micrometer.core.instrument.context;
 
-import io.micrometer.core.instrument.transport.http.HttpServerRequest;
-import io.micrometer.core.instrument.transport.http.HttpServerResponse;
-import io.micrometer.core.instrument.transport.http.context.HttpServerContext;
+import io.micrometer.observation.transport.http.HttpServerRequest;
+import io.micrometer.observation.transport.http.HttpServerResponse;
+import io.micrometer.observation.transport.http.context.HttpServerContext;
 import org.junit.jupiter.api.Test;
 
 import static org.assertj.core.api.Assertions.assertThat;

File: micrometer-observation-test/src/main/java/io/micrometer/core/tck/AnyContextObservationHandlerCompatibilityKit.java
Patch:
@@ -15,8 +15,8 @@
  */
 package io.micrometer.core.tck;
 
-import io.micrometer.core.instrument.observation.Observation;
-import io.micrometer.core.instrument.observation.ObservationHandler;
+import io.micrometer.observation.Observation;
+import io.micrometer.observation.ObservationHandler;
 import org.junit.jupiter.api.DisplayName;
 import org.junit.jupiter.api.Test;
 

File: micrometer-observation-test/src/main/java/io/micrometer/core/tck/ObservationRegistryAssert.java
Patch:
@@ -15,8 +15,8 @@
  */
 package io.micrometer.core.tck;
 
-import io.micrometer.core.instrument.observation.Observation;
-import io.micrometer.core.instrument.observation.ObservationRegistry;
+import io.micrometer.observation.Observation;
+import io.micrometer.observation.ObservationRegistry;
 import org.assertj.core.api.AbstractAssert;
 
 /**

File: micrometer-observation-test/src/test/java/io/micrometer/core/tck/AnyContextObservationHandlerCompatibilityKitTests.java
Patch:
@@ -15,8 +15,8 @@
  */
 package io.micrometer.core.tck;
 
-import io.micrometer.core.instrument.observation.Observation;
-import io.micrometer.core.instrument.observation.ObservationHandler;
+import io.micrometer.observation.Observation;
+import io.micrometer.observation.ObservationHandler;
 
 class AnyContextObservationHandlerCompatibilityKitTests extends AnyContextObservationHandlerCompatibilityKit {
 

File: micrometer-observation-test/src/test/java/io/micrometer/core/tck/ConcreteContextObservationHandlerCompatibilityKitTests.java
Patch:
@@ -15,8 +15,8 @@
  */
 package io.micrometer.core.tck;
 
-import io.micrometer.core.instrument.observation.Observation;
-import io.micrometer.core.instrument.observation.ObservationHandler;
+import io.micrometer.observation.Observation;
+import io.micrometer.observation.ObservationHandler;
 
 class ConcreteContextObservationHandlerCompatibilityKitTests extends ConcreteContextObservationHandlerCompatibilityKit<Observation.Context> {
 

File: micrometer-observation-test/src/test/java/io/micrometer/core/tck/NullContextObservationHandlerCompatibilityKitTests.java
Patch:
@@ -15,8 +15,8 @@
  */
 package io.micrometer.core.tck;
 
-import io.micrometer.core.instrument.observation.Observation;
-import io.micrometer.core.instrument.observation.ObservationHandler;
+import io.micrometer.observation.Observation;
+import io.micrometer.observation.ObservationHandler;
 
 class NullContextObservationHandlerCompatibilityKitTests extends NullContextObservationHandlerCompatibilityKit {
 

File: micrometer-observation/src/main/java/io/micrometer/observation/NoopObservation.java
Patch:
@@ -13,9 +13,8 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.core.instrument.observation;
+package io.micrometer.observation;
 
-import io.micrometer.core.instrument.Tag;
 
 /**
  * No-op implementation of {@link Observation} so that we can disable the instrumentation logic.

File: micrometer-observation/src/main/java/io/micrometer/observation/ObservationHandler.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.core.instrument.observation;
+package io.micrometer.observation;
 
 import java.util.Arrays;
 import java.util.List;
@@ -25,8 +25,6 @@
  * Example of handler implementations can create metrics, spans or logs.
  *
  * @param <T> type of context
- * @see MeterObservationHandler
- * @see TimerObservationHandler
  *
  * @author Jonatan Ivanov
  * @author Tommy Ludwig

File: micrometer-observation/src/main/java/io/micrometer/observation/ObservationPredicate.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.core.instrument.observation;
+package io.micrometer.observation;
 
 import java.util.function.BiPredicate;
 

File: micrometer-observation/src/main/java/io/micrometer/observation/ObservationTextPublisher.java
Patch:
@@ -13,13 +13,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.core.instrument.observation;
+package io.micrometer.observation;
 
 import java.util.function.Consumer;
 import java.util.function.Function;
 import java.util.function.Predicate;
 
-import io.micrometer.core.util.internal.logging.InternalLoggerFactory;
+import io.micrometer.observation.util.internal.logging.InternalLoggerFactory;
 
 /**
  * An {@link ObservationHandler} that converts the context to text and Publishes it to the {@link Consumer} of your choice.

File: micrometer-observation/src/main/java/io/micrometer/observation/SimpleObservation.java
Patch:
@@ -13,15 +13,15 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.core.instrument.observation;
+package io.micrometer.observation;
 
 import java.util.ArrayDeque;
 import java.util.Collection;
 import java.util.Deque;
 import java.util.stream.Collectors;
 
-import io.micrometer.core.instrument.Tag;
-import io.micrometer.core.lang.Nullable;
+import io.micrometer.observation.Tag;
+import io.micrometer.observation.lang.Nullable;
 
 /**
  * Default implementation of {@link Observation}.

File: micrometer-observation/src/main/java/io/micrometer/observation/docs/DocumentedObservation.java
Patch:
@@ -13,10 +13,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.core.instrument.docs;
+package io.micrometer.observation.docs;
 
-import io.micrometer.core.instrument.observation.Observation;
-import io.micrometer.core.instrument.observation.ObservationRegistry;
+import io.micrometer.observation.Observation;
+import io.micrometer.observation.ObservationRegistry;
 
 /**
  * In order to describe your samples via e.g. enums instead of Strings you can use this

File: micrometer-observation/src/main/java/io/micrometer/observation/docs/TagKey.java
Patch:
@@ -13,11 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.core.instrument.docs;
+package io.micrometer.observation.docs;
 
 import java.util.Arrays;
 
-import io.micrometer.core.instrument.Tag;
+import io.micrometer.observation.Tag;
 
 /**
  * Represents a tag key.

File: micrometer-observation/src/main/java/io/micrometer/observation/transport/Kind.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.core.instrument.transport;
+package io.micrometer.observation.transport;
 
 /**
  * Represents side of communication.

File: micrometer-observation/src/main/java/io/micrometer/observation/transport/http/HttpClientRequest.java
Patch:
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.core.instrument.transport.http;
+package io.micrometer.observation.transport.http;
 
-import io.micrometer.core.instrument.transport.Kind;
+import io.micrometer.observation.transport.Kind;
 
 /**
  * This API is taken from OpenZipkin Brave.

File: micrometer-observation/src/main/java/io/micrometer/observation/transport/http/HttpClientResponse.java
Patch:
@@ -13,10 +13,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.core.instrument.transport.http;
+package io.micrometer.observation.transport.http;
 
-import io.micrometer.core.instrument.transport.Kind;
-import io.micrometer.core.lang.Nullable;
+import io.micrometer.observation.transport.Kind;
+import io.micrometer.observation.lang.Nullable;
 
 /**
  * This API is taken from OpenZipkin Brave.

File: micrometer-observation/src/main/java/io/micrometer/observation/transport/http/HttpRequest.java
Patch:
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.core.instrument.transport.http;
+package io.micrometer.observation.transport.http;
 
-import io.micrometer.core.lang.Nullable;
+import io.micrometer.observation.lang.Nullable;
 
 /**
  * This API is taken from OpenZipkin Brave.

File: micrometer-observation/src/main/java/io/micrometer/observation/transport/http/HttpResponse.java
Patch:
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.core.instrument.transport.http;
+package io.micrometer.observation.transport.http;
 
-import io.micrometer.core.lang.Nullable;
+import io.micrometer.observation.lang.Nullable;
 
 /**
  * This API is taken from OpenZipkin Brave.

File: micrometer-observation/src/main/java/io/micrometer/observation/transport/http/HttpServerRequest.java
Patch:
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.core.instrument.transport.http;
+package io.micrometer.observation.transport.http;
 
-import io.micrometer.core.instrument.transport.Kind;
+import io.micrometer.observation.transport.Kind;
 
 /**
  * This API is taken from OpenZipkin Brave.

File: micrometer-observation/src/main/java/io/micrometer/observation/transport/http/HttpServerResponse.java
Patch:
@@ -13,10 +13,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.core.instrument.transport.http;
+package io.micrometer.observation.transport.http;
 
-import io.micrometer.core.instrument.transport.Kind;
-import io.micrometer.core.lang.Nullable;
+import io.micrometer.observation.transport.Kind;
+import io.micrometer.observation.lang.Nullable;
 
 /**
  * This API is taken from OpenZipkin Brave.

File: micrometer-observation/src/main/java/io/micrometer/observation/transport/http/Request.java
Patch:
@@ -13,11 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.core.instrument.transport.http;
+package io.micrometer.observation.transport.http;
 
 import java.util.Collection;
 
-import io.micrometer.core.instrument.transport.Kind;
+import io.micrometer.observation.transport.Kind;
 
 /**
  * This API is taken from OpenZipkin Brave.

File: micrometer-observation/src/main/java/io/micrometer/observation/transport/http/Response.java
Patch:
@@ -13,12 +13,12 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.core.instrument.transport.http;
+package io.micrometer.observation.transport.http;
 
 import java.util.Collection;
 
-import io.micrometer.core.instrument.transport.Kind;
-import io.micrometer.core.lang.Nullable;
+import io.micrometer.observation.transport.Kind;
+import io.micrometer.observation.lang.Nullable;
 
 /**
  * This API is taken from OpenZipkin Brave.

File: micrometer-observation/src/main/java/io/micrometer/observation/transport/http/tags/package-info.java
Patch:
@@ -13,4 +13,4 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.core.instrument.binder.http;
+package io.micrometer.observation.transport.http.tags;

File: micrometer-observation/src/test/java/io/micrometer/observation/FirstMatchingCompositeObservationHandlerTests.java
Patch:
@@ -13,12 +13,12 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.core.instrument.observation;
+package io.micrometer.observation;
 
 import java.util.Arrays;
 import java.util.List;
 
-import io.micrometer.core.instrument.observation.ObservationHandler.FirstMatchingCompositeObservationHandler;
+import io.micrometer.observation.ObservationHandler.FirstMatchingCompositeObservationHandler;
 import org.junit.jupiter.api.Test;
 
 import static org.assertj.core.api.Assertions.assertThat;

File: micrometer-observation/src/test/java/io/micrometer/observation/ObservationContextTest.java
Patch:
@@ -13,13 +13,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.core.instrument.observation;
+package io.micrometer.observation;
 
+import org.assertj.core.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 
 import static org.assertj.core.api.Assertions.assertThat;
-import static org.assertj.core.api.Assertions.assertThatThrownBy;
 
 /**
  * Tests for {@link Observation.Context}.
@@ -72,7 +72,7 @@ void getOrDefaultShouldUseFallbackValue() {
     void getRequiredShouldFailIfThereIsNoValue() {
         context.put(String.class, "42");
         assertThat((String) context.getRequired(String.class)).isEqualTo("42");
-        assertThatThrownBy(() -> context.getRequired(Integer.class))
+        Assertions.assertThatThrownBy(() -> context.getRequired(Integer.class))
                 .isInstanceOf(IllegalArgumentException.class)
                 .hasMessage("Context does not have an entry for key [class java.lang.Integer]")
                 .hasNoCause();

File: micrometer-observation/src/test/java/io/micrometer/observation/ObservationTextPublisherTests.java
Patch:
@@ -13,12 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.core.instrument.observation;
+package io.micrometer.observation;
 
 import java.io.IOException;
 import java.util.function.Consumer;
 
-import io.micrometer.core.instrument.Tag;
 import org.junit.jupiter.api.Test;
 
 import static org.assertj.core.api.Assertions.assertThat;

File: micrometer-observation/src/test/java/io/micrometer/observation/TagsProviderTest.java
Patch:
@@ -13,9 +13,8 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.core.instrument;
+package io.micrometer.observation;
 
-import io.micrometer.core.instrument.observation.Observation;
 import org.junit.jupiter.api.Test;
 
 import static org.assertj.core.api.Assertions.assertThat;

File: implementations/micrometer-registry-dynatrace/src/test/java/io/micrometer/dynatrace/DynatraceConfigTest.java
Patch:
@@ -31,7 +31,7 @@
 import java.util.Map;
 import java.util.UUID;
 
-import static java.util.concurrent.TimeUnit.SECONDS;
+import static java.util.concurrent.TimeUnit.MILLISECONDS;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.awaitility.Awaitility.await;
 
@@ -302,14 +302,14 @@ public DynatraceApiVersion apiVersion() {
             }
         };
 
-        await().atMost(1, SECONDS).until(() -> config.apiToken().equals("YOUR.DYNATRACE.TOKEN"));
+        await().atMost(1_000, MILLISECONDS).until(() -> config.apiToken().equals("YOUR.DYNATRACE.TOKEN"));
         assertThat(config.uri()).isEqualTo("https://your-dynatrace-ingest-url/api/v2/metrics/ingest");
 
         Files.write(tempFile,
                 ("DT_METRICS_INGEST_URL = https://a-different-url/api/v2/metrics/ingest\n" +
                         "DT_METRICS_INGEST_API_TOKEN = A.DIFFERENT.TOKEN").getBytes());
 
-        await().atMost(10, SECONDS).until(() -> config.apiToken().equals("A.DIFFERENT.TOKEN"));
+        await().atMost(1_000, MILLISECONDS).until(() -> config.apiToken().equals("A.DIFFERENT.TOKEN"));
         assertThat(config.uri()).isEqualTo("https://a-different-url/api/v2/metrics/ingest");
         
         Files.deleteIfExists(tempFile);

File: implementations/micrometer-registry-dynatrace/src/test/java/io/micrometer/dynatrace/v2/DynatraceExporterV2Test.java
Patch:
@@ -539,7 +539,7 @@ public String get(String key) {
                         "DT_METRICS_INGEST_API_TOKEN = YOUR.DYNATRACE.TOKEN.FIRST").getBytes());
 
         DynatraceFileBasedConfigurationProvider.getInstance().forceOverwriteConfig(tempFile.toString(), Duration.ofMillis(50));
-        await().atMost(1, SECONDS).until(() -> config.uri().equals(firstUri));
+        await().atMost(1_000, MILLISECONDS).until(() -> config.uri().equals(firstUri));
         Counter counter = meterRegistry.counter("test.counter");
         counter.increment(10);
         clock.add(config.step());
@@ -566,7 +566,7 @@ public String get(String key) {
                 ("DT_METRICS_INGEST_URL = " + secondUri + "\n" +
                         "DT_METRICS_INGEST_API_TOKEN = YOUR.DYNATRACE.TOKEN.SECOND").getBytes());
 
-        await().atMost(10, SECONDS).until(() -> config.uri().equals(secondUri));
+        await().atMost(1_000, MILLISECONDS).until(() -> config.uri().equals(secondUri));
         exporter.export(Collections.singletonList(counter));
 
         ArgumentCaptor<HttpSender.Request> secondRequestCaptor = ArgumentCaptor.forClass(HttpSender.Request.class);

File: implementations/micrometer-registry-dynatrace/src/main/java/io/micrometer/dynatrace/v2/DynatraceExporterV2.java
Patch:
@@ -175,7 +175,7 @@ Stream<String> toTimerLine(Timer meter) {
     private Stream<String> toSummaryLine(Meter meter, HistogramSnapshot histogramSnapshot, TimeUnit timeUnit) {
         long count = histogramSnapshot.count();
         if (count < 1) {
-            logger.debug("Summary with 0 count dropped: %s", meter.getId().getName());
+            logger.debug("Summary with 0 count dropped: {}", meter.getId().getName());
             return Stream.empty();
         }
         double total = (timeUnit != null) ? histogramSnapshot.total(timeUnit) : histogramSnapshot.total();
@@ -224,7 +224,7 @@ Stream<String> toFunctionCounterLine(FunctionCounter meter) {
     Stream<String> toFunctionTimerLine(FunctionTimer meter) {
         long count = (long) meter.count();
         if (count < 1) {
-            logger.debug("Timer with 0 count dropped: %s", meter.getId().getName());
+            logger.debug("Timer with 0 count dropped: {}", meter.getId().getName());
             return Stream.empty();
         }
         double total = meter.totalTime(getBaseTimeUnit());

File: micrometer-core/src/main/java/io/micrometer/core/instrument/internal/CumulativeHistogramLongTaskTimer.java
Patch:
@@ -19,7 +19,6 @@
 import io.micrometer.core.instrument.distribution.CountAtBucket;
 import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;
 import io.micrometer.core.instrument.distribution.HistogramSnapshot;
-import io.micrometer.core.instrument.internal.DefaultLongTaskTimer;
 import io.micrometer.core.lang.Nullable;
 
 import java.util.Arrays;

File: micrometer-core/src/test/java/io/micrometer/core/instrument/MeterFilterTest.java
Patch:
@@ -129,7 +129,7 @@ public MeterFilterReply accept(Meter.Id id) {
 
         Meter.Id id = new Meter.Id("name", Tags.of("k", "1"), null, null, Meter.Type.COUNTER);
         Meter.Id id2 = new Meter.Id("name", Tags.of("k", "2"), null, null, Meter.Type.COUNTER);
-        Meter.Id id3 = new Meter.Id("name", Tags.of("k", "3"), null, null, Meter.Type.COUNTER); 
+        Meter.Id id3 = new Meter.Id("name", Tags.of("k", "3"), null, null, Meter.Type.COUNTER);
         Meter.Id id4 = new Meter.Id("anotherName", Tags.of("tag", "4"), null, null, Meter.Type.COUNTER);
 
         filter.accept(id);

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Tags.java
Patch:
@@ -191,7 +191,7 @@ private boolean tagsEqual(Tags obj) {
      * @param otherTags the second set of tags
      * @return the merged tags
      */
-    public static Tags concat(@Nullable Iterable<? extends Tag> tags, @Nullable Iterable<Tag> otherTags) {
+    public static Tags concat(@Nullable Iterable<? extends Tag> tags, @Nullable Iterable<? extends Tag> otherTags) {
         return Tags.of(tags).and(otherTags);
     }
 

File: micrometer-test/src/main/java/io/micrometer/core/tck/ObservationRegistryCompatibilityKit.java
Patch:
@@ -261,9 +261,9 @@ void supplierShouldBeParentScoped() {
 
     @Test
     void supplierShouldNotBeParentScopedIfParentIsNull() {
-        String result = Observation.tryScoped(
+        Observation.tryScoped(
                 null,
-                (Supplier<String>) () -> {
+                () -> {
                     assertThat(registry.getCurrentObservation()).isNull();
                     return "test";
                 });

File: micrometer-binders/src/main/java/io/micrometer/binder/cache/CaffeineCacheMetrics.java
Patch:
@@ -29,6 +29,7 @@
 import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.Tags;
 import io.micrometer.core.instrument.TimeGauge;
+import io.micrometer.core.instrument.binder.cache.CacheMeterBinder;
 import io.micrometer.core.lang.NonNullApi;
 import io.micrometer.core.lang.NonNullFields;
 import io.micrometer.core.lang.Nullable;

File: micrometer-binders/src/main/java/io/micrometer/binder/cache/EhCache2Metrics.java
Patch:
@@ -24,6 +24,7 @@
 import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.Tags;
 import io.micrometer.core.instrument.binder.BaseUnits;
+import io.micrometer.core.instrument.binder.cache.CacheMeterBinder;
 import io.micrometer.core.lang.NonNullApi;
 import io.micrometer.core.lang.NonNullFields;
 import io.micrometer.core.lang.Nullable;

File: micrometer-binders/src/main/java/io/micrometer/binder/cache/GuavaCacheMetrics.java
Patch:
@@ -27,6 +27,7 @@
 import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.Tags;
 import io.micrometer.core.instrument.TimeGauge;
+import io.micrometer.core.instrument.binder.cache.CacheMeterBinder;
 import io.micrometer.core.lang.NonNullApi;
 import io.micrometer.core.lang.NonNullFields;
 import io.micrometer.core.lang.Nullable;

File: micrometer-binders/src/main/java/io/micrometer/binder/cache/HazelcastCacheMetrics.java
Patch:
@@ -27,6 +27,7 @@
 import io.micrometer.core.instrument.Tags;
 import io.micrometer.core.instrument.binder.BaseUnits;
 import io.micrometer.binder.cache.HazelcastIMapAdapter.LocalMapStats;
+import io.micrometer.core.instrument.binder.cache.CacheMeterBinder;
 import io.micrometer.core.lang.NonNullApi;
 import io.micrometer.core.lang.NonNullFields;
 import io.micrometer.core.lang.Nullable;

File: micrometer-binders/src/main/java/io/micrometer/binder/cache/JCacheMetrics.java
Patch:
@@ -32,6 +32,7 @@
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.Tags;
+import io.micrometer.core.instrument.binder.cache.CacheMeterBinder;
 import io.micrometer.core.instrument.config.InvalidConfigurationException;
 import io.micrometer.core.lang.NonNullApi;
 import io.micrometer.core.lang.NonNullFields;

File: micrometer-binders/src/main/java/io/micrometer/binder/jersey/server/JerseyTags.java
Patch:
@@ -18,8 +18,8 @@
 import java.util.List;
 import java.util.regex.Pattern;
 
-import io.micrometer.binder.http.Outcome;
 import io.micrometer.core.instrument.Tag;
+import io.micrometer.core.instrument.binder.http.Outcome;
 import io.micrometer.core.instrument.util.StringUtils;
 import org.glassfish.jersey.server.ContainerRequest;
 import org.glassfish.jersey.server.ContainerResponse;

File: micrometer-binders/src/main/java/io/micrometer/binder/jetty/JettyClientTags.java
Patch:
@@ -18,8 +18,8 @@
 import java.util.function.Function;
 import java.util.regex.Pattern;
 
-import io.micrometer.binder.http.Outcome;
 import io.micrometer.core.instrument.Tag;
+import io.micrometer.core.instrument.binder.http.Outcome;
 import io.micrometer.core.instrument.util.StringUtils;
 import org.eclipse.jetty.client.api.Request;
 import org.eclipse.jetty.client.api.Response;

File: micrometer-binders/src/main/java/io/micrometer/binder/jetty/TimedHandler.java
Patch:
@@ -25,15 +25,15 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
-import io.micrometer.binder.http.DefaultHttpServletRequestTagsProvider;
-import io.micrometer.binder.http.HttpServletRequestTagsProvider;
 import io.micrometer.core.instrument.Counter;
 import io.micrometer.core.instrument.Gauge;
 import io.micrometer.core.instrument.LongTaskTimer;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.Timer;
 import io.micrometer.core.instrument.binder.BaseUnits;
+import io.micrometer.core.instrument.binder.http.DefaultHttpServletRequestTagsProvider;
+import io.micrometer.core.instrument.binder.http.HttpServletRequestTagsProvider;
 import io.micrometer.core.lang.NonNullApi;
 import io.micrometer.core.lang.NonNullFields;
 import org.eclipse.jetty.http.HttpStatus;

File: micrometer-binders/src/test/java/io/micrometer/binder/cache/CaffeineCacheMetricsCompatibilityTest.java
Patch:
@@ -19,8 +19,8 @@
 
 import com.github.benmanes.caffeine.cache.Caffeine;
 import com.github.benmanes.caffeine.cache.LoadingCache;
-import io.micrometer.core.instrument.cache.CacheMeterBinder;
-import io.micrometer.core.instrument.cache.CacheMeterBinderCompatibilityKit;
+import io.micrometer.core.instrument.binder.cache.CacheMeterBinder;
+import io.micrometer.core.instrument.binder.cache.CacheMeterBinderCompatibilityKit;
 
 import static java.util.Collections.emptyList;
 

File: micrometer-binders/src/test/java/io/micrometer/binder/cache/EhCache2MetricsCompatibilityTest.java
Patch:
@@ -17,8 +17,8 @@
 
 import java.util.UUID;
 
-import io.micrometer.core.instrument.cache.CacheMeterBinder;
-import io.micrometer.core.instrument.cache.CacheMeterBinderCompatibilityKit;
+import io.micrometer.core.instrument.binder.cache.CacheMeterBinder;
+import io.micrometer.core.instrument.binder.cache.CacheMeterBinderCompatibilityKit;
 import io.micrometer.core.lang.Nullable;
 import net.sf.ehcache.Cache;
 import net.sf.ehcache.CacheManager;

File: micrometer-binders/src/test/java/io/micrometer/binder/cache/EhCache2MetricsTest.java
Patch:
@@ -21,8 +21,7 @@
 import io.micrometer.core.instrument.Gauge;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.Tags;
-import io.micrometer.binder.cache.EhCache2Metrics;
-import io.micrometer.core.instrument.cache.AbstractCacheMetricsTest;
+import io.micrometer.core.instrument.binder.cache.AbstractCacheMetricsTest;
 import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
 import net.sf.ehcache.Cache;
 import net.sf.ehcache.CacheManager;

File: micrometer-binders/src/test/java/io/micrometer/binder/cache/GuavaCacheMetricsCompatibilityKit.java
Patch:
@@ -21,8 +21,8 @@
 import com.google.common.cache.CacheBuilder;
 import com.google.common.cache.CacheLoader;
 import com.google.common.cache.LoadingCache;
-import io.micrometer.core.instrument.cache.CacheMeterBinder;
-import io.micrometer.core.instrument.cache.CacheMeterBinderCompatibilityKit;
+import io.micrometer.core.instrument.binder.cache.CacheMeterBinder;
+import io.micrometer.core.instrument.binder.cache.CacheMeterBinderCompatibilityKit;
 
 import static java.util.Collections.emptyList;
 

File: micrometer-binders/src/test/java/io/micrometer/binder/cache/GuavaCacheMetricsTest.java
Patch:
@@ -25,8 +25,7 @@
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.Tags;
 import io.micrometer.core.instrument.TimeGauge;
-import io.micrometer.binder.cache.GuavaCacheMetrics;
-import io.micrometer.core.instrument.cache.AbstractCacheMetricsTest;
+import io.micrometer.core.instrument.binder.cache.AbstractCacheMetricsTest;
 import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
 import org.junit.jupiter.api.Test;
 

File: micrometer-binders/src/test/java/io/micrometer/binder/cache/HazelcastCacheMetricsCompatibilityTest.java
Patch:
@@ -19,8 +19,8 @@
 import com.hazelcast.core.Hazelcast;
 import com.hazelcast.map.IMap;
 import io.micrometer.core.Issue;
-import io.micrometer.core.instrument.cache.CacheMeterBinder;
-import io.micrometer.core.instrument.cache.CacheMeterBinderCompatibilityKit;
+import io.micrometer.core.instrument.binder.cache.CacheMeterBinder;
+import io.micrometer.core.instrument.binder.cache.CacheMeterBinderCompatibilityKit;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Disabled;

File: micrometer-binders/src/test/java/io/micrometer/binder/cache/HazelcastCacheMetricsTest.java
Patch:
@@ -30,8 +30,7 @@
 import io.micrometer.core.instrument.Gauge;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.Tags;
-import io.micrometer.binder.cache.HazelcastCacheMetrics;
-import io.micrometer.core.instrument.cache.AbstractCacheMetricsTest;
+import io.micrometer.core.instrument.binder.cache.AbstractCacheMetricsTest;
 import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.BeforeAll;

File: micrometer-binders/src/test/java/io/micrometer/binder/cache/JCacheMetricsCompatibilityTest.java
Patch:
@@ -20,8 +20,8 @@
 import javax.cache.configuration.MutableConfiguration;
 import javax.cache.expiry.AccessedExpiryPolicy;
 
-import io.micrometer.core.instrument.cache.CacheMeterBinder;
-import io.micrometer.core.instrument.cache.CacheMeterBinderCompatibilityKit;
+import io.micrometer.core.instrument.binder.cache.CacheMeterBinder;
+import io.micrometer.core.instrument.binder.cache.CacheMeterBinderCompatibilityKit;
 import org.jsr107.ri.spi.RICachingProvider;
 
 import static java.util.Collections.emptyList;

File: micrometer-binders/src/test/java/io/micrometer/binder/cache/JCacheMetricsTest.java
Patch:
@@ -36,7 +36,7 @@
 import io.micrometer.core.instrument.Gauge;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.Tags;
-import io.micrometer.core.instrument.cache.AbstractCacheMetricsTest;
+import io.micrometer.core.instrument.binder.cache.AbstractCacheMetricsTest;
 import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;

File: micrometer-binders/src/test/java/io/micrometer/binder/jetty/TimedHandlerTest.java
Patch:
@@ -31,8 +31,7 @@
 
 import io.micrometer.core.instrument.MockClock;
 import io.micrometer.core.instrument.Tags;
-import io.micrometer.binder.http.Outcome;
-import io.micrometer.binder.jetty.TimedHandler;
+import io.micrometer.core.instrument.binder.http.Outcome;
 import io.micrometer.core.instrument.simple.SimpleConfig;
 import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
 import org.eclipse.jetty.http.HttpStatus;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/package-info.java
Patch:
@@ -14,7 +14,6 @@
  * limitations under the License.
  */
 @NonNullApi
-@Deprecated
 package io.micrometer.core.instrument.binder.cache;
 
 import io.micrometer.core.lang.NonNullApi;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/cache/CacheMeterBinder.java
Patch:
@@ -35,12 +35,10 @@
  * Having this common base set of metrics ensures that you can reason about basic cache performance
  * in a dimensional slice that spans different cache implementations in your application.
  *
- * @deprecated Scheduled for removal in 2.0.0, please use {@code io.micrometer.binder.cache.CacheMeterBinder}
  * @author Jon Schneider
  */
 @NonNullApi
 @NonNullFields
-@Deprecated
 public abstract class CacheMeterBinder<C> implements MeterBinder {
     private final WeakReference<C> cacheRef;
     private final Iterable<Tag> tags;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/transport/http/tags/DefaultHttpServletRequestTagsProvider.java
Patch:
@@ -25,12 +25,10 @@
 /**
  * Default {@link HttpServletRequestTagsProvider}.
  *
- * @deprecated Scheduled for removal in 2.0.0, please use {@code io.micrometer.binder.http.DefaultHttpServletRequestTagsProvider}
  * @author Jon Schneider
  * @since 1.4.0
  */
 @Incubating(since = "1.4.0")
-@Deprecated
 public class DefaultHttpServletRequestTagsProvider implements HttpServletRequestTagsProvider {
     @Override
     public Iterable<Tag> getTags(HttpServletRequest request, HttpServletResponse response) {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/transport/http/tags/HttpRequestTags.java
Patch:
@@ -25,12 +25,10 @@
 /**
  * Tags for HTTP requests.
  *
- * @deprecated Scheduled for removal in 2.0.0, please use {@code io.micrometer.binder.http.HttpRequestTags}
  * @author Jon Schneider
  * @since 1.4.0
  */
 @Incubating(since = "1.4.0")
-@Deprecated
 public class HttpRequestTags {
     private static final Tag EXCEPTION_NONE = Tag.of("exception", "None");
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/transport/http/tags/HttpServletRequestTagsProvider.java
Patch:
@@ -24,13 +24,11 @@
 /**
  * Provides {@link Tag Tags} for HTTP Servlet request handling.
  *
- * @deprecated Scheduled for removal in 2.0.0, please use {@code io.micrometer.binder.http.HttpServletRequestTagsProvider}
  * @author Jon Schneider
  * @since 1.4.0
  */
 @Incubating(since = "1.4.0")
 @FunctionalInterface
-@Deprecated
 public interface HttpServletRequestTagsProvider {
     /**
      * Provides tags to be associated with metrics for the given {@code request} and

File: micrometer-core/src/main/java/io/micrometer/core/instrument/transport/http/tags/Outcome.java
Patch:
@@ -20,11 +20,9 @@
 /**
  * The outcome of an HTTP request.
  *
- * @deprecated Scheduled for removal in 2.0.0, please use {@code io.micrometer.binder.http.Outcome}
  * @author Andy Wilkinson
  * @since 1.4.0
  */
-@Deprecated
 public enum Outcome {
 
     /**

File: micrometer-test/src/main/java/io/micrometer/core/instrument/cache/AbstractCacheMetricsTest.java
Patch:
@@ -13,11 +13,12 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.core.instrument.cache;
+package io.micrometer.core.instrument.binder.cache;
 
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.Tags;
+import io.micrometer.core.instrument.binder.cache.CacheMeterBinder;
 import io.micrometer.core.instrument.search.RequiredSearch;
 
 /**

File: micrometer-test/src/main/java/io/micrometer/core/instrument/cache/CacheMeterBinderCompatibilityKit.java
Patch:
@@ -26,7 +26,6 @@
 /**
  * @author Jon Schneider
  */
-@Deprecated
 public abstract class CacheMeterBinderCompatibilityKit<C> {
     private MeterRegistry registry = new SimpleMeterRegistry();
     private CacheMeterBinder<C> binder;

File: samples/micrometer-samples-hazelcast3/src/test/java/io/micrometer/samples/hazelcast3/Hazelcast3CacheMetricsCompatibilityTest.java
Patch:
@@ -18,9 +18,9 @@
 import com.hazelcast.config.Config;
 import com.hazelcast.core.Hazelcast;
 import com.hazelcast.core.IMap;
-import io.micrometer.core.instrument.cache.CacheMeterBinder;
 import io.micrometer.binder.cache.HazelcastCacheMetrics;
-import io.micrometer.core.instrument.cache.CacheMeterBinderCompatibilityKit;
+import io.micrometer.core.instrument.binder.cache.CacheMeterBinder;
+import io.micrometer.core.instrument.binder.cache.CacheMeterBinderCompatibilityKit;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;
 

File: samples/micrometer-samples-javalin/src/main/java/io/micrometer/javalin/samples/PrometheusSample.java
Patch:
@@ -23,7 +23,6 @@
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.Tags;
-import io.micrometer.binder.http.DefaultHttpServletRequestTagsProvider;
 import io.micrometer.binder.jetty.JettyConnectionMetrics;
 import io.micrometer.binder.jetty.JettyServerThreadPoolMetrics;
 import io.micrometer.binder.jetty.TimedHandler;
@@ -32,6 +31,7 @@
 import io.micrometer.binder.jvm.JvmMemoryMetrics;
 import io.micrometer.binder.system.FileDescriptorMetrics;
 import io.micrometer.binder.system.ProcessorMetrics;
+import io.micrometer.core.instrument.binder.http.DefaultHttpServletRequestTagsProvider;
 import io.micrometer.core.instrument.util.StringUtils;
 import io.micrometer.core.lang.NonNull;
 import io.micrometer.prometheus.PrometheusConfig;

File: micrometer-binders/src/main/java/io/micrometer/binder/cache/CaffeineCacheMetrics.java
Patch:
@@ -29,7 +29,6 @@
 import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.Tags;
 import io.micrometer.core.instrument.TimeGauge;
-import io.micrometer.core.instrument.cache.CacheMeterBinder;
 import io.micrometer.core.lang.NonNullApi;
 import io.micrometer.core.lang.NonNullFields;
 import io.micrometer.core.lang.Nullable;

File: micrometer-binders/src/main/java/io/micrometer/binder/cache/EhCache2Metrics.java
Patch:
@@ -24,7 +24,6 @@
 import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.Tags;
 import io.micrometer.core.instrument.binder.BaseUnits;
-import io.micrometer.core.instrument.cache.CacheMeterBinder;
 import io.micrometer.core.lang.NonNullApi;
 import io.micrometer.core.lang.NonNullFields;
 import io.micrometer.core.lang.Nullable;

File: micrometer-binders/src/main/java/io/micrometer/binder/cache/GuavaCacheMetrics.java
Patch:
@@ -27,7 +27,6 @@
 import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.Tags;
 import io.micrometer.core.instrument.TimeGauge;
-import io.micrometer.core.instrument.cache.CacheMeterBinder;
 import io.micrometer.core.lang.NonNullApi;
 import io.micrometer.core.lang.NonNullFields;
 import io.micrometer.core.lang.Nullable;

File: micrometer-binders/src/main/java/io/micrometer/binder/cache/HazelcastCacheMetrics.java
Patch:
@@ -27,7 +27,6 @@
 import io.micrometer.core.instrument.Tags;
 import io.micrometer.core.instrument.binder.BaseUnits;
 import io.micrometer.binder.cache.HazelcastIMapAdapter.LocalMapStats;
-import io.micrometer.core.instrument.cache.CacheMeterBinder;
 import io.micrometer.core.lang.NonNullApi;
 import io.micrometer.core.lang.NonNullFields;
 import io.micrometer.core.lang.Nullable;

File: micrometer-binders/src/main/java/io/micrometer/binder/cache/JCacheMetrics.java
Patch:
@@ -32,7 +32,6 @@
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.Tags;
-import io.micrometer.core.instrument.cache.CacheMeterBinder;
 import io.micrometer.core.instrument.config.InvalidConfigurationException;
 import io.micrometer.core.lang.NonNullApi;
 import io.micrometer.core.lang.NonNullFields;

File: micrometer-binders/src/main/java/io/micrometer/binder/commonspool2/CommonsObjectPool2Metrics.java
Patch:
@@ -52,10 +52,10 @@
 import io.micrometer.core.instrument.binder.BaseUnits;
 import io.micrometer.core.instrument.binder.MeterBinder;
 import io.micrometer.core.instrument.util.NamedThreadFactory;
-import io.micrometer.core.util.internal.logging.InternalLogger;
-import io.micrometer.core.util.internal.logging.InternalLoggerFactory;
 import io.micrometer.core.lang.NonNull;
 import io.micrometer.core.lang.Nullable;
+import io.micrometer.core.util.internal.logging.InternalLogger;
+import io.micrometer.core.util.internal.logging.InternalLoggerFactory;
 
 import static java.util.Collections.emptyList;
 

File: micrometer-binders/src/main/java/io/micrometer/binder/http/DefaultHttpServletRequestTagsProvider.java
Patch:
@@ -25,10 +25,12 @@
 /**
  * Default {@link HttpServletRequestTagsProvider}.
  *
+ * @deprecated Scheduled for removal in 2.0.0, please use {@code io.micrometer.binder.http.DefaultHttpServletRequestTagsProvider}
  * @author Jon Schneider
  * @since 1.4.0
  */
 @Incubating(since = "1.4.0")
+@Deprecated
 public class DefaultHttpServletRequestTagsProvider implements HttpServletRequestTagsProvider {
     @Override
     public Iterable<Tag> getTags(HttpServletRequest request, HttpServletResponse response) {

File: micrometer-binders/src/main/java/io/micrometer/binder/http/HttpRequestTags.java
Patch:
@@ -25,10 +25,12 @@
 /**
  * Tags for HTTP requests.
  *
+ * @deprecated Scheduled for removal in 2.0.0, please use {@code io.micrometer.binder.http.HttpRequestTags}
  * @author Jon Schneider
  * @since 1.4.0
  */
 @Incubating(since = "1.4.0")
+@Deprecated
 public class HttpRequestTags {
     private static final Tag EXCEPTION_NONE = Tag.of("exception", "None");
 

File: micrometer-binders/src/main/java/io/micrometer/binder/http/HttpServletRequestTagsProvider.java
Patch:
@@ -24,11 +24,13 @@
 /**
  * Provides {@link Tag Tags} for HTTP Servlet request handling.
  *
+ * @deprecated Scheduled for removal in 2.0.0, please use {@code io.micrometer.binder.http.HttpServletRequestTagsProvider}
  * @author Jon Schneider
  * @since 1.4.0
  */
 @Incubating(since = "1.4.0")
 @FunctionalInterface
+@Deprecated
 public interface HttpServletRequestTagsProvider {
     /**
      * Provides tags to be associated with metrics for the given {@code request} and

File: micrometer-binders/src/main/java/io/micrometer/binder/http/Outcome.java
Patch:
@@ -20,9 +20,11 @@
 /**
  * The outcome of an HTTP request.
  *
+ * @deprecated Scheduled for removal in 2.0.0, please use {@code io.micrometer.binder.http.Outcome}
  * @author Andy Wilkinson
  * @since 1.4.0
  */
+@Deprecated
 public enum Outcome {
 
     /**

File: micrometer-binders/src/main/java/io/micrometer/binder/hystrix/MicrometerMetricsPublisherCommand.java
Patch:
@@ -33,10 +33,10 @@
 import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.Tags;
 import io.micrometer.core.instrument.Timer;
-import io.micrometer.core.util.internal.logging.InternalLogger;
-import io.micrometer.core.util.internal.logging.InternalLoggerFactory;
 import io.micrometer.core.lang.NonNullApi;
 import io.micrometer.core.lang.NonNullFields;
+import io.micrometer.core.util.internal.logging.InternalLogger;
+import io.micrometer.core.util.internal.logging.InternalLoggerFactory;
 
 /**
  * @author Clint Checketts

File: micrometer-binders/src/main/java/io/micrometer/binder/jvm/JvmGcMetrics.java
Patch:
@@ -43,11 +43,11 @@
 import io.micrometer.core.instrument.Timer;
 import io.micrometer.core.instrument.binder.BaseUnits;
 import io.micrometer.core.instrument.binder.MeterBinder;
-import io.micrometer.core.util.internal.logging.InternalLogger;
-import io.micrometer.core.util.internal.logging.InternalLoggerFactory;
 import io.micrometer.core.lang.NonNullApi;
 import io.micrometer.core.lang.NonNullFields;
 import io.micrometer.core.lang.Nullable;
+import io.micrometer.core.util.internal.logging.InternalLogger;
+import io.micrometer.core.util.internal.logging.InternalLoggerFactory;
 
 import static io.micrometer.binder.jvm.JvmMemory.getLongLivedHeapPools;
 import static io.micrometer.binder.jvm.JvmMemory.getUsageValue;

File: micrometer-binders/src/main/java/io/micrometer/binder/kafka/KafkaMetrics.java
Patch:
@@ -40,12 +40,12 @@
 import io.micrometer.core.instrument.Tags;
 import io.micrometer.core.instrument.binder.MeterBinder;
 import io.micrometer.core.instrument.util.NamedThreadFactory;
-import io.micrometer.core.util.internal.logging.InternalLogger;
-import io.micrometer.core.util.internal.logging.InternalLoggerFactory;
-import io.micrometer.core.util.internal.logging.WarnThenDebugLogger;
 import io.micrometer.core.lang.NonNullApi;
 import io.micrometer.core.lang.NonNullFields;
 import io.micrometer.core.lang.Nullable;
+import io.micrometer.core.util.internal.logging.InternalLogger;
+import io.micrometer.core.util.internal.logging.InternalLoggerFactory;
+import io.micrometer.core.util.internal.logging.WarnThenDebugLogger;
 import org.apache.kafka.common.Metric;
 import org.apache.kafka.common.MetricName;
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/cache/CacheMeterBinder.java
Patch:
@@ -35,10 +35,12 @@
  * Having this common base set of metrics ensures that you can reason about basic cache performance
  * in a dimensional slice that spans different cache implementations in your application.
  *
+ * @deprecated Scheduled for removal in 2.0.0, please use {@code io.micrometer.binder.cache.CacheMeterBinder}
  * @author Jon Schneider
  */
 @NonNullApi
 @NonNullFields
+@Deprecated
 public abstract class CacheMeterBinder<C> implements MeterBinder {
     private final WeakReference<C> cacheRef;
     private final Iterable<Tag> tags;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/transport/http/tags/package-info.java
Patch:
@@ -17,5 +17,5 @@
 /**
  * Provides a general-purpose mechanism for injecting a tags provider into HTTP frameworks.
  */
-@Deprecated
+
 package io.micrometer.core.instrument.transport.http.tags;

File: micrometer-test/src/main/java/io/micrometer/core/instrument/cache/CacheMeterBinderCompatibilityKit.java
Patch:
@@ -26,6 +26,7 @@
 /**
  * @author Jon Schneider
  */
+@Deprecated
 public abstract class CacheMeterBinderCompatibilityKit<C> {
     private MeterRegistry registry = new SimpleMeterRegistry();
     private CacheMeterBinder<C> binder;

File: micrometer-binders/src/main/java/io/micrometer/binder/cache/CaffeineCacheMetrics.java
Patch:
@@ -29,6 +29,7 @@
 import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.Tags;
 import io.micrometer.core.instrument.TimeGauge;
+import io.micrometer.core.instrument.binder.cache.CacheMeterBinder;
 import io.micrometer.core.lang.NonNullApi;
 import io.micrometer.core.lang.NonNullFields;
 import io.micrometer.core.lang.Nullable;

File: micrometer-binders/src/main/java/io/micrometer/binder/cache/EhCache2Metrics.java
Patch:
@@ -24,6 +24,7 @@
 import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.Tags;
 import io.micrometer.core.instrument.binder.BaseUnits;
+import io.micrometer.core.instrument.binder.cache.CacheMeterBinder;
 import io.micrometer.core.lang.NonNullApi;
 import io.micrometer.core.lang.NonNullFields;
 import io.micrometer.core.lang.Nullable;

File: micrometer-binders/src/main/java/io/micrometer/binder/cache/GuavaCacheMetrics.java
Patch:
@@ -27,6 +27,7 @@
 import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.Tags;
 import io.micrometer.core.instrument.TimeGauge;
+import io.micrometer.core.instrument.binder.cache.CacheMeterBinder;
 import io.micrometer.core.lang.NonNullApi;
 import io.micrometer.core.lang.NonNullFields;
 import io.micrometer.core.lang.Nullable;

File: micrometer-binders/src/main/java/io/micrometer/binder/cache/HazelcastCacheMetrics.java
Patch:
@@ -27,6 +27,7 @@
 import io.micrometer.core.instrument.Tags;
 import io.micrometer.core.instrument.binder.BaseUnits;
 import io.micrometer.binder.cache.HazelcastIMapAdapter.LocalMapStats;
+import io.micrometer.core.instrument.binder.cache.CacheMeterBinder;
 import io.micrometer.core.lang.NonNullApi;
 import io.micrometer.core.lang.NonNullFields;
 import io.micrometer.core.lang.Nullable;

File: micrometer-binders/src/main/java/io/micrometer/binder/cache/JCacheMetrics.java
Patch:
@@ -32,6 +32,7 @@
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.Tags;
+import io.micrometer.core.instrument.binder.cache.CacheMeterBinder;
 import io.micrometer.core.instrument.config.InvalidConfigurationException;
 import io.micrometer.core.lang.NonNullApi;
 import io.micrometer.core.lang.NonNullFields;

File: micrometer-binders/src/main/java/io/micrometer/binder/jersey/server/JerseyTags.java
Patch:
@@ -18,8 +18,8 @@
 import java.util.List;
 import java.util.regex.Pattern;
 
-import io.micrometer.binder.http.Outcome;
 import io.micrometer.core.instrument.Tag;
+import io.micrometer.core.instrument.binder.http.Outcome;
 import io.micrometer.core.instrument.util.StringUtils;
 import org.glassfish.jersey.server.ContainerRequest;
 import org.glassfish.jersey.server.ContainerResponse;

File: micrometer-binders/src/main/java/io/micrometer/binder/jetty/JettyClientTags.java
Patch:
@@ -18,8 +18,8 @@
 import java.util.function.Function;
 import java.util.regex.Pattern;
 
-import io.micrometer.binder.http.Outcome;
 import io.micrometer.core.instrument.Tag;
+import io.micrometer.core.instrument.binder.http.Outcome;
 import io.micrometer.core.instrument.util.StringUtils;
 import org.eclipse.jetty.client.api.Request;
 import org.eclipse.jetty.client.api.Response;

File: micrometer-binders/src/main/java/io/micrometer/binder/jetty/TimedHandler.java
Patch:
@@ -25,15 +25,15 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
-import io.micrometer.binder.http.DefaultHttpServletRequestTagsProvider;
-import io.micrometer.binder.http.HttpServletRequestTagsProvider;
 import io.micrometer.core.instrument.Counter;
 import io.micrometer.core.instrument.Gauge;
 import io.micrometer.core.instrument.LongTaskTimer;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.Timer;
 import io.micrometer.core.instrument.binder.BaseUnits;
+import io.micrometer.core.instrument.binder.http.DefaultHttpServletRequestTagsProvider;
+import io.micrometer.core.instrument.binder.http.HttpServletRequestTagsProvider;
 import io.micrometer.core.lang.NonNullApi;
 import io.micrometer.core.lang.NonNullFields;
 import org.eclipse.jetty.http.HttpStatus;

File: micrometer-binders/src/test/java/io/micrometer/binder/cache/EhCache2MetricsTest.java
Patch:
@@ -21,7 +21,7 @@
 import io.micrometer.core.instrument.Gauge;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.Tags;
-import io.micrometer.binder.cache.EhCache2Metrics;
+import io.micrometer.core.instrument.binder.cache.AbstractCacheMetricsTest;
 import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
 import net.sf.ehcache.Cache;
 import net.sf.ehcache.CacheManager;

File: micrometer-binders/src/test/java/io/micrometer/binder/cache/GuavaCacheMetricsTest.java
Patch:
@@ -25,7 +25,7 @@
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.Tags;
 import io.micrometer.core.instrument.TimeGauge;
-import io.micrometer.binder.cache.GuavaCacheMetrics;
+import io.micrometer.core.instrument.binder.cache.AbstractCacheMetricsTest;
 import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
 import org.junit.jupiter.api.Test;
 

File: micrometer-binders/src/test/java/io/micrometer/binder/cache/HazelcastCacheMetricsCompatibilityTest.java
Patch:
@@ -19,6 +19,8 @@
 import com.hazelcast.core.Hazelcast;
 import com.hazelcast.map.IMap;
 import io.micrometer.core.Issue;
+import io.micrometer.core.instrument.binder.cache.CacheMeterBinder;
+import io.micrometer.core.instrument.binder.cache.CacheMeterBinderCompatibilityKit;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Disabled;

File: micrometer-binders/src/test/java/io/micrometer/binder/cache/HazelcastCacheMetricsTest.java
Patch:
@@ -30,7 +30,7 @@
 import io.micrometer.core.instrument.Gauge;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.Tags;
-import io.micrometer.binder.cache.HazelcastCacheMetrics;
+import io.micrometer.core.instrument.binder.cache.AbstractCacheMetricsTest;
 import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.BeforeAll;

File: micrometer-binders/src/test/java/io/micrometer/binder/cache/JCacheMetricsTest.java
Patch:
@@ -36,7 +36,7 @@
 import io.micrometer.core.instrument.Gauge;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.Tags;
-import io.micrometer.binder.cache.JCacheMetrics;
+import io.micrometer.core.instrument.binder.cache.AbstractCacheMetricsTest;
 import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;

File: micrometer-binders/src/test/java/io/micrometer/binder/jetty/TimedHandlerTest.java
Patch:
@@ -31,8 +31,7 @@
 
 import io.micrometer.core.instrument.MockClock;
 import io.micrometer.core.instrument.Tags;
-import io.micrometer.binder.http.Outcome;
-import io.micrometer.binder.jetty.TimedHandler;
+import io.micrometer.core.instrument.binder.http.Outcome;
 import io.micrometer.core.instrument.simple.SimpleConfig;
 import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
 import org.eclipse.jetty.http.HttpStatus;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/CacheMeterBinder.java
Patch:
@@ -31,12 +31,10 @@
  * Having this common base set of metrics ensures that you can reason about basic cache performance
  * in a dimensional slice that spans different cache implementations in your application.
  *
- * @deprecated Scheduled for removal in 2.0.0, please use {@code io.micrometer.binder.cache.CacheMeterBinder}
  * @author Jon Schneider
  */
 @NonNullApi
 @NonNullFields
-@Deprecated
 public abstract class CacheMeterBinder<C> implements MeterBinder {
     private final WeakReference<C> cacheRef;
     private final Iterable<Tag> tags;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/package-info.java
Patch:
@@ -14,7 +14,6 @@
  * limitations under the License.
  */
 @NonNullApi
-@Deprecated
 package io.micrometer.core.instrument.binder.cache;
 
 import io.micrometer.core.lang.NonNullApi;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/http/DefaultHttpServletRequestTagsProvider.java
Patch:
@@ -25,12 +25,10 @@
 /**
  * Default {@link HttpServletRequestTagsProvider}.
  *
- * @deprecated Scheduled for removal in 2.0.0, please use {@code io.micrometer.binder.http.DefaultHttpServletRequestTagsProvider}
  * @author Jon Schneider
  * @since 1.4.0
  */
 @Incubating(since = "1.4.0")
-@Deprecated
 public class DefaultHttpServletRequestTagsProvider implements HttpServletRequestTagsProvider {
     @Override
     public Iterable<Tag> getTags(HttpServletRequest request, HttpServletResponse response) {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/http/HttpRequestTags.java
Patch:
@@ -25,12 +25,10 @@
 /**
  * Tags for HTTP requests.
  *
- * @deprecated Scheduled for removal in 2.0.0, please use {@code io.micrometer.binder.http.HttpRequestTags}
  * @author Jon Schneider
  * @since 1.4.0
  */
 @Incubating(since = "1.4.0")
-@Deprecated
 public class HttpRequestTags {
     private static final Tag EXCEPTION_NONE = Tag.of("exception", "None");
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/http/HttpServletRequestTagsProvider.java
Patch:
@@ -24,13 +24,11 @@
 /**
  * Provides {@link Tag Tags} for HTTP Servlet request handling.
  *
- * @deprecated Scheduled for removal in 2.0.0, please use {@code io.micrometer.binder.http.HttpServletRequestTagsProvider}
  * @author Jon Schneider
  * @since 1.4.0
  */
 @Incubating(since = "1.4.0")
 @FunctionalInterface
-@Deprecated
 public interface HttpServletRequestTagsProvider {
     /**
      * Provides tags to be associated with metrics for the given {@code request} and

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/http/Outcome.java
Patch:
@@ -20,11 +20,9 @@
 /**
  * The outcome of an HTTP request.
  *
- * @deprecated Scheduled for removal in 2.0.0, please use {@code io.micrometer.binder.http.Outcome}
  * @author Andy Wilkinson
  * @since 1.4.0
  */
-@Deprecated
 public enum Outcome {
 
     /**

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/http/package-info.java
Patch:
@@ -13,5 +13,4 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-@Deprecated
 package io.micrometer.core.instrument.binder.http;

File: micrometer-test/src/main/java/io/micrometer/core/instrument/binder/cache/AbstractCacheMetricsTest.java
Patch:
@@ -13,20 +13,20 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.binder.cache;
+package io.micrometer.core.instrument.binder.cache;
 
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.Tags;
-import io.micrometer.binder.cache.CacheMeterBinder;
+import io.micrometer.core.instrument.binder.cache.CacheMeterBinder;
 import io.micrometer.core.instrument.search.RequiredSearch;
 
 /**
  * Base class for cache metrics tests.
  *
  * @author Oleksii Bondar
  */
-abstract class AbstractCacheMetricsTest {
+public abstract class AbstractCacheMetricsTest {
 
     protected Tags expectedTag = Tags.of("app", "test");
 

File: micrometer-test/src/main/java/io/micrometer/core/instrument/binder/cache/CacheMeterBinderCompatibilityKit.java
Patch:
@@ -26,7 +26,6 @@
 /**
  * @author Jon Schneider
  */
-@Deprecated
 public abstract class CacheMeterBinderCompatibilityKit<C> {
     private MeterRegistry registry = new SimpleMeterRegistry();
     private CacheMeterBinder<C> binder;

File: samples/micrometer-samples-hazelcast3/src/test/java/io/micrometer/samples/hazelcast3/Hazelcast3CacheMetricsCompatibilityTest.java
Patch:
@@ -18,9 +18,9 @@
 import com.hazelcast.config.Config;
 import com.hazelcast.core.Hazelcast;
 import com.hazelcast.core.IMap;
-import io.micrometer.binder.cache.CacheMeterBinder;
-import io.micrometer.binder.cache.CacheMeterBinderCompatibilityKit;
 import io.micrometer.binder.cache.HazelcastCacheMetrics;
+import io.micrometer.core.instrument.binder.cache.CacheMeterBinder;
+import io.micrometer.core.instrument.binder.cache.CacheMeterBinderCompatibilityKit;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;
 

File: samples/micrometer-samples-javalin/src/main/java/io/micrometer/javalin/samples/PrometheusSample.java
Patch:
@@ -23,7 +23,6 @@
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.Tags;
-import io.micrometer.binder.http.DefaultHttpServletRequestTagsProvider;
 import io.micrometer.binder.jetty.JettyConnectionMetrics;
 import io.micrometer.binder.jetty.JettyServerThreadPoolMetrics;
 import io.micrometer.binder.jetty.TimedHandler;
@@ -32,6 +31,7 @@
 import io.micrometer.binder.jvm.JvmMemoryMetrics;
 import io.micrometer.binder.system.FileDescriptorMetrics;
 import io.micrometer.binder.system.ProcessorMetrics;
+import io.micrometer.core.instrument.binder.http.DefaultHttpServletRequestTagsProvider;
 import io.micrometer.core.instrument.util.StringUtils;
 import io.micrometer.core.lang.NonNull;
 import io.micrometer.prometheus.PrometheusConfig;

File: implementations/micrometer-registry-health/src/main/java/io/micrometer/health/objectives/JvmServiceLevelObjectives.java
Patch:
@@ -15,9 +15,9 @@
  */
 package io.micrometer.health.objectives;
 
-import io.micrometer.core.instrument.binder.jvm.JvmGcMetrics;
-import io.micrometer.core.instrument.binder.jvm.JvmHeapPressureMetrics;
-import io.micrometer.core.instrument.binder.jvm.JvmMemoryMetrics;
+import io.micrometer.binder.jvm.JvmGcMetrics;
+import io.micrometer.binder.jvm.JvmHeapPressureMetrics;
+import io.micrometer.binder.jvm.JvmMemoryMetrics;
 import io.micrometer.health.ServiceLevelObjective;
 
 import java.time.Duration;

File: implementations/micrometer-registry-health/src/main/java/io/micrometer/health/objectives/OperatingSystemServiceLevelObjectives.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micrometer.health.objectives;
 
-import io.micrometer.core.instrument.binder.system.FileDescriptorMetrics;
+import io.micrometer.binder.system.FileDescriptorMetrics;
 import io.micrometer.health.ServiceLevelObjective;
 
 /**

File: implementations/micrometer-registry-health/src/test/java/io/micrometer/health/HealthMeterRegistryTest.java
Patch:
@@ -18,7 +18,7 @@
 import io.micrometer.core.instrument.Meter;
 import io.micrometer.core.instrument.MockClock;
 import io.micrometer.core.instrument.Timer;
-import io.micrometer.core.instrument.binder.jvm.JvmMemoryMetrics;
+import io.micrometer.binder.jvm.JvmMemoryMetrics;
 import io.micrometer.core.instrument.config.MeterFilter;
 import io.micrometer.health.objectives.JvmServiceLevelObjectives;
 import org.junit.jupiter.api.Test;

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/internal/LogbackMetricsSuppressingFluxSink.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.function.LongConsumer;
 
-import io.micrometer.core.instrument.binder.logging.LogbackMetrics;
+import io.micrometer.binder.logging.LogbackMetrics;
 import reactor.core.Disposable;
 import reactor.core.publisher.FluxSink;
 import reactor.util.context.Context;

File: implementations/micrometer-registry-statsd/src/test/java/io/micrometer/statsd/StatsdMeterRegistryTest.java
Patch:
@@ -19,7 +19,7 @@
 import ch.qos.logback.classic.Logger;
 import io.micrometer.core.Issue;
 import io.micrometer.core.instrument.*;
-import io.micrometer.core.instrument.binder.logging.LogbackMetrics;
+import io.micrometer.binder.logging.LogbackMetrics;
 import io.micrometer.core.instrument.config.NamingConvention;
 import io.micrometer.core.lang.Nullable;
 import org.junit.jupiter.api.AfterEach;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/CacheMeterBinder.java
Patch:
@@ -31,10 +31,12 @@
  * Having this common base set of metrics ensures that you can reason about basic cache performance
  * in a dimensional slice that spans different cache implementations in your application.
  *
+ * @deprecated Scheduled for removal in 2.0.0, please use {@code io.micrometer.binder.cache.CacheMeterBinder}
  * @author Jon Schneider
  */
 @NonNullApi
 @NonNullFields
+@Deprecated
 public abstract class CacheMeterBinder<C> implements MeterBinder {
     private final WeakReference<C> cacheRef;
     private final Iterable<Tag> tags;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/CaffeineCacheMetrics.java
Patch:
@@ -36,11 +36,13 @@
  * CaffeineCacheMetrics.monitor(registry, cache, "mycache", "region", "test");
  * }</pre>
  *
+ * @deprecated Scheduled for removal in 2.0.0, please use {@code io.micrometer.binder.cache.CaffeineCacheMetrics}
  * @author Clint Checketts
  * @see CaffeineStatsCounter
  */
 @NonNullApi
 @NonNullFields
+@Deprecated
 public class CaffeineCacheMetrics<K, V, C extends Cache<K, V>> extends CacheMeterBinder<C> {
 
     /**

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/CaffeineStatsCounter.java
Patch:
@@ -51,6 +51,7 @@
  *     .build();
  * }</pre>
  *
+ * @deprecated Scheduled for removal in 2.0.0, please use {@code io.micrometer.binder.cache.CaffeineStatsCounter}
  * @author Ben Manes
  * @author John Karp
  * @author Johnny Lim
@@ -59,6 +60,7 @@
  */
 @NonNullApi
 @NonNullFields
+@Deprecated
 public final class CaffeineStatsCounter implements StatsCounter {
 
     private final MeterRegistry registry;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/EhCache2Metrics.java
Patch:
@@ -29,10 +29,12 @@
 /**
  * Collect metrics on EhCache caches, including detailed metrics on transactions and storage space.
  *
+ * @deprecated Scheduled for removal in 2.0.0, please use {@code io.micrometer.binder.cache.EhCache2Metrics}
  * @author Jon Schneider
  */
 @NonNullApi
 @NonNullFields
+@Deprecated
 public class EhCache2Metrics extends CacheMeterBinder<Ehcache> {
 
     public EhCache2Metrics(Ehcache cache, Iterable<Tag> tags) {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/GuavaCacheMetrics.java
Patch:
@@ -28,10 +28,12 @@
 import java.util.function.ToLongFunction;
 
 /**
+ * @deprecated Scheduled for removal in 2.0.0, please use {@code io.micrometer.binder.cache.GuavaCacheMetrics}
  * @author Jon Schneider
  */
 @NonNullApi
 @NonNullFields
+@Deprecated
 public class GuavaCacheMetrics<K, V, C extends Cache<K, V>> extends CacheMeterBinder<C> {
     /**
      * Record metrics on a Guava cache. You must call {@link CacheBuilder#recordStats()} prior to building the cache

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/HazelcastCacheMetrics.java
Patch:
@@ -29,10 +29,12 @@
 /**
  * Collect metrics on Hazelcast caches, including detailed metrics on storage space, near cache usage, and timings.
  *
+ * @deprecated Scheduled for removal in 2.0.0, please use {@code io.micrometer.binder.cache.HazelcastCacheMetrics}
  * @author Jon Schneider
  */
 @NonNullApi
 @NonNullFields
+@Deprecated
 public class HazelcastCacheMetrics extends CacheMeterBinder<Object> {
     private final HazelcastIMapAdapter cache;
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/HazelcastIMapAdapter.java
Patch:
@@ -29,7 +29,9 @@
  * same time. Dynamically checks which Hazelcast version is on the classpath and resolves the right classes.
  *
  * @implNote Note that {@link MethodHandle} is used, so the performance does not suffer.
+ * @deprecated Scheduled for removal in 2.0.0, please use {@code io.micrometer.binder.cache.HazelcastIMapAdapter}
  */
+@Deprecated
 class HazelcastIMapAdapter {
     private static final Class<?> CLASS_I_MAP = resolveOneOf("com.hazelcast.map.IMap", "com.hazelcast.core.IMap");
     private static final Class<?> CLASS_LOCAL_MAP = resolveOneOf("com.hazelcast.map.LocalMapStats", "com.hazelcast.monitor.LocalMapStats");

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/JCacheMetrics.java
Patch:
@@ -36,10 +36,12 @@
  * Note that JSR-107 does not provide any insight into the size or estimated size of the cache, so
  * the size metric of a JCache cache will always report 0.
  *
+ * @deprecated Scheduled for removal in 2.0.0, please use {@code io.micrometer.binder.cache.JCacheMetrics}
  * @author Jon Schneider
  */
 @NonNullApi
 @NonNullFields
+@Deprecated
 public class JCacheMetrics<K, V, C extends Cache<K, V>> extends CacheMeterBinder<C> {
     // VisibleForTesting
     @Nullable

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/package-info.java
Patch:
@@ -14,6 +14,7 @@
  * limitations under the License.
  */
 @NonNullApi
+@Deprecated
 package io.micrometer.core.instrument.binder.cache;
 
 import io.micrometer.core.lang.NonNullApi;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/commonspool2/CommonsObjectPool2Metrics.java
Patch:
@@ -40,9 +40,11 @@
  * Apache Commons Pool 2.x metrics collected from metrics exposed via the MBeanServer.
  * Metrics are exposed for each object pool.
  *
+ * @deprecated Scheduled for removal in 2.0.0, please use {@code io.micrometer.binder.commonspool2.CommonsObjectPool2Metrics}
  * @author Chao Chang
  * @since 1.6.0
  */
+@Deprecated
 public class CommonsObjectPool2Metrics implements MeterBinder, AutoCloseable {
     private static final InternalLogger log = InternalLoggerFactory.getInstance(CommonsObjectPool2Metrics.class);
     private static final String JMX_DOMAIN = "org.apache.commons.pool2";

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/db/DatabaseTableMetrics.java
Patch:
@@ -32,10 +32,12 @@
 import java.util.function.ToDoubleFunction;
 
 /**
+ * @deprecated Scheduled for removal in 2.0.0, please use {@code io.micrometer.binder.db.DatabaseTableMetrics}
  * @author Jon Schneider
  */
 @NonNullApi
 @NonNullFields
+@Deprecated
 public class DatabaseTableMetrics implements MeterBinder {
     private final DataSource dataSource;
     private final String query;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/db/MetricsDSLContext.java
Patch:
@@ -62,11 +62,13 @@
  *
  * This requires jOOQ 3.14.0 or later.
  *
+ * @deprecated Scheduled for removal in 2.0.0, please use {@code io.micrometer.binder.db.MetricsDSLContext}
  * @author Jon Schneider
  * @author Johnny Lim
  * @since 1.4.0
  */
 @Incubating(since = "1.4.0")
+@Deprecated
 public class MetricsDSLContext implements DSLContext {
     private final DSLContext context;
     private final MeterRegistry registry;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/db/PostgreSQLDatabaseMetrics.java
Patch:
@@ -33,6 +33,7 @@
 /**
  * {@link MeterBinder} for a PostgreSQL database.
  *
+ * @deprecated Scheduled for removal in 2.0.0, please use {@code io.micrometer.binder.db.PostgreSQLDatabaseMetrics}
  * @author Kristof Depypere
  * @author Jon Schneider
  * @author Johnny Lim
@@ -41,6 +42,7 @@
  */
 @NonNullApi
 @NonNullFields
+@Deprecated
 public class PostgreSQLDatabaseMetrics implements MeterBinder {
 
     private static final String SELECT = "SELECT ";

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/grpc/AbstractMetricCollectingInterceptor.java
Patch:
@@ -36,9 +36,11 @@
 /**
  * An abstract gRPC interceptor that will collect metrics.
  *
+ * @deprecated Scheduled for removal in 2.0.0, please use {@code io.micrometer.binder.grpc.AbstractMetricCollectingInterceptor}
  * @author Daniel Theuke (daniel.theuke@heuboe.de)
  * @since 1.7.0
  */
+@Deprecated
 public abstract class AbstractMetricCollectingInterceptor {
 
     /**

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/grpc/MetricCollectingClientCall.java
Patch:
@@ -26,10 +26,12 @@
 /**
  * A simple forwarding client call that collects metrics.
  *
+ * @deprecated Scheduled for removal in 2.0.0, please use {@code io.micrometer.binder.grpc.MetricCollectingClientCall}
  * @param <Q> The type of message sent one or more times to the server.
  * @param <A> The type of message received one or more times from the server.
  * @author Daniel Theuke (daniel.theuke@heuboe.de)
  */
+@Deprecated
 class MetricCollectingClientCall<Q, A> extends SimpleForwardingClientCall<Q, A> {
 
     private final Counter requestCounter;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/grpc/MetricCollectingClientCallListener.java
Patch:
@@ -26,9 +26,11 @@
 /**
  * A simple forwarding client call listener that collects metrics.
  *
+ * @deprecated Scheduled for removal in 2.0.0, please use {@code io.micrometer.binder.grpc.MetricCollectingClientCallListener}
  * @param <A> The type of message received one or more times from the server.
  * @author Daniel Theuke (daniel.theuke@heuboe.de)
  */
+@Deprecated
 class MetricCollectingClientCallListener<A> extends SimpleForwardingClientCallListener<A> {
 
     private final Counter responseCounter;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/grpc/MetricCollectingClientInterceptor.java
Patch:
@@ -44,9 +44,11 @@
  * channel.newCall(method, options);
  * </pre>
  *
+ * @deprecated Scheduled for removal in 2.0.0, please use {@code io.micrometer.binder.grpc.MetricCollectingClientInterceptor}
  * @author Daniel Theuke (daniel.theuke@heuboe.de)
  * @since 1.7.0
  */
+@Deprecated
 public class MetricCollectingClientInterceptor extends AbstractMetricCollectingInterceptor
         implements ClientInterceptor {
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/grpc/MetricCollectingServerCall.java
Patch:
@@ -28,7 +28,9 @@
  * @param <Q> The type of message received one or more times from the client.
  * @param <A> The type of message sent one or more times to the client.
  * @author Daniel Theuke (daniel.theuke@heuboe.de)
+ * @deprecated Scheduled for removal in 2.0.0, please use {@code io.micrometer.binder.grpc.MetricCollectingServerCall}
  */
+@Deprecated
 class MetricCollectingServerCall<Q, A> extends SimpleForwardingServerCall<Q, A> {
 
     private final Counter responseCounter;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/grpc/MetricCollectingServerCallListener.java
Patch:
@@ -29,7 +29,9 @@
  *
  * @param <Q> The type of message received one or more times from the client.
  * @author Daniel Theuke (daniel.theuke@heuboe.de)
+ * @deprecated Scheduled for removal in 2.0.0, please use {@code io.micrometer.binder.grpc.MetricCollectingServerCallListener}
  */
+@Deprecated
 class MetricCollectingServerCallListener<Q> extends SimpleForwardingServerCallListener<Q> {
 
     private final Counter requestCounter;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/grpc/MetricCollectingServerInterceptor.java
Patch:
@@ -48,9 +48,11 @@
  * server.start()
  * </pre>
  *
+ * @deprecated Scheduled for removal in 2.0.0, please use {@code io.micrometer.binder.grpc.MetricCollectingServerInterceptor}
  * @author Daniel Theuke (daniel.theuke@heuboe.de)
  * @since 1.7.0
  */
+@Deprecated
 public class MetricCollectingServerInterceptor extends AbstractMetricCollectingInterceptor
         implements ServerInterceptor {
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/grpc/package-info.java
Patch:
@@ -20,4 +20,5 @@
  * {@link io.micrometer.core.instrument.binder.grpc.MetricCollectingServerInterceptor}
  * for usage examples.
  */
+@Deprecated
 package io.micrometer.core.instrument.binder.grpc;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/http/DefaultHttpServletRequestTagsProvider.java
Patch:
@@ -25,10 +25,12 @@
 /**
  * Default {@link HttpServletRequestTagsProvider}.
  *
+ * @deprecated Scheduled for removal in 2.0.0, please use {@code io.micrometer.binder.http.DefaultHttpServletRequestTagsProvider}
  * @author Jon Schneider
  * @since 1.4.0
  */
 @Incubating(since = "1.4.0")
+@Deprecated
 public class DefaultHttpServletRequestTagsProvider implements HttpServletRequestTagsProvider {
     @Override
     public Iterable<Tag> getTags(HttpServletRequest request, HttpServletResponse response) {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/http/HttpRequestTags.java
Patch:
@@ -25,10 +25,12 @@
 /**
  * Tags for HTTP requests.
  *
+ * @deprecated Scheduled for removal in 2.0.0, please use {@code io.micrometer.binder.http.HttpRequestTags}
  * @author Jon Schneider
  * @since 1.4.0
  */
 @Incubating(since = "1.4.0")
+@Deprecated
 public class HttpRequestTags {
     private static final Tag EXCEPTION_NONE = Tag.of("exception", "None");
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/http/HttpServletRequestTagsProvider.java
Patch:
@@ -24,11 +24,13 @@
 /**
  * Provides {@link Tag Tags} for HTTP Servlet request handling.
  *
+ * @deprecated Scheduled for removal in 2.0.0, please use {@code io.micrometer.binder.http.HttpServletRequestTagsProvider}
  * @author Jon Schneider
  * @since 1.4.0
  */
 @Incubating(since = "1.4.0")
 @FunctionalInterface
+@Deprecated
 public interface HttpServletRequestTagsProvider {
     /**
      * Provides tags to be associated with metrics for the given {@code request} and

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/http/Outcome.java
Patch:
@@ -20,9 +20,11 @@
 /**
  * The outcome of an HTTP request.
  *
+ * @deprecated Scheduled for removal in 2.0.0, please use {@code io.micrometer.binder.http.Outcome}
  * @author Andy Wilkinson
  * @since 1.4.0
  */
+@Deprecated
 public enum Outcome {
 
     /**

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/httpcomponents/DefaultUriMapper.java
Patch:
@@ -23,9 +23,11 @@
 /**
  * Extracts the URI pattern from the predefined request header, {@value DefaultUriMapper#URI_PATTERN_HEADER} if available.
  *
+ * @deprecated Scheduled for removal in 2.0.0, please use {@code io.micrometer.binder.httpcomponents.DefaultUriMapper}
  * @author Benjamin Hubert
  * @since 1.4.0
  */
+@Deprecated
 public class DefaultUriMapper implements Function<HttpRequest, String> {
 
     /**

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/httpcomponents/MicrometerHttpClientInterceptor.java
Patch:
@@ -44,10 +44,12 @@
  *             .build();
  * }</pre>
  *
+ * @deprecated Scheduled for removal in 2.0.0, please use {@code io.micrometer.binder.httpcomponents.MicrometerHttpClientInterceptor}
  * @author Jon Schneider
  * @since 1.4.0
  */
 @Incubating(since = "1.4.0")
+@Deprecated
 public class MicrometerHttpClientInterceptor {
     private static final String METER_NAME = "httpcomponents.httpclient.request";
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/httpcomponents/MicrometerHttpRequestExecutor.java
Patch:
@@ -46,11 +46,13 @@
  *         .build();
  * </pre>
  *
+ * @deprecated Scheduled for removal in 2.0.0, please use {@code io.micrometer.binder.httpcomponents.MicrometerHttpRequestExecutor}
  * @author Benjamin Hubert (benjamin.hubert@willhaben.at)
  * @author Tommy Ludwig
  * @since 1.2.0
  */
 @Incubating(since = "1.2.0")
+@Deprecated
 public class MicrometerHttpRequestExecutor extends HttpRequestExecutor {
 
     /**

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/httpcomponents/PoolingHttpClientConnectionManagerMetricsBinder.java
Patch:
@@ -30,9 +30,11 @@
  * <p>
  * It monitors the overall connection pool state.
  *
+ * @deprecated Scheduled for removal in 2.0.0, please use {@code io.micrometer.binder.httpcomponents.PoolingHttpClientConnectionManagerMetricsBinder}
  * @author Benjamin Hubert (benjamin.hubert@willhaben.at)
  * @since 1.3.0
  */
+@Deprecated
 public class PoolingHttpClientConnectionManagerMetricsBinder implements MeterBinder {
 
     private final ConnPoolControl<HttpRoute> connPoolControl;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/hystrix/MicrometerMetricsPublisher.java
Patch:
@@ -25,10 +25,12 @@
 import io.micrometer.core.lang.NonNullFields;
 
 /**
+ * @deprecated Scheduled for removal in 2.0.0, please use {@code io.micrometer.binder.hystrix.MicrometerMetricsPublisher}
  * @author Clint Checketts
  */
 @NonNullApi
 @NonNullFields
+@Deprecated
 public class MicrometerMetricsPublisher extends HystrixMetricsPublisher {
     private final MeterRegistry registry;
     private HystrixMetricsPublisher metricsPublisher;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/hystrix/MicrometerMetricsPublisherCommand.java
Patch:
@@ -30,10 +30,12 @@
 import java.util.concurrent.TimeUnit;
 
 /**
+ * @deprecated Scheduled for removal in 2.0.0, please use {@code io.micrometer.binder.hystrix.MicrometerMetricsPublisherCommand}
  * @author Clint Checketts
  */
 @NonNullApi
 @NonNullFields
+@Deprecated
 public class MicrometerMetricsPublisherCommand implements HystrixMetricsPublisherCommand {
     private static final InternalLogger LOG = InternalLoggerFactory.getInstance(MicrometerMetricsPublisherCommand.class);
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/hystrix/MicrometerMetricsPublisherThreadPool.java
Patch:
@@ -31,10 +31,12 @@
 /**
  * Micrometer publisher for Hystrix thread pool metrics.
  *
+ * @deprecated Scheduled for removal in 2.0.0, please use {@code io.micrometer.binder.hystrix.MicrometerMetricsPublisherThreadPool}
  * @since 1.2.0
  */
 @NonNullApi
 @NonNullFields
+@Deprecated
 public class MicrometerMetricsPublisherThreadPool implements HystrixMetricsPublisherThreadPool {
   private static final String NAME_HYSTRIX_THREADPOOL = "hystrix.threadpool";
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jersey/server/DefaultJerseyTagsProvider.java
Patch:
@@ -22,11 +22,13 @@
 
 /**
  * Default implementation for {@link JerseyTagsProvider}.
- * 
+ *
+ * @deprecated Scheduled for removal in 2.0.0, please use {@code io.micrometer.binder.jersey.server.DefaultJerseyTagsProvider}
  * @author Michael Weirauch
  * @author Johnny Lim
  * @since 1.8.0
  */
+@Deprecated
 public final class DefaultJerseyTagsProvider implements JerseyTagsProvider {
 
     @Override

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jersey/server/JerseyTags.java
Patch:
@@ -31,10 +31,12 @@
  * Factory methods for {@link Tag Tags} associated with a request-response exchange that
  * is handled by Jersey server.
  *
+ * @deprecated Scheduled for removal in 2.0.0, please use {@code io.micrometer.binder.jersey.server.JerseyTags}
  * @author Michael Weirauch
  * @author Johnny Lim
  * @since 1.8.0
  */
+@Deprecated
 public final class JerseyTags {
 
     private static final Tag URI_NOT_FOUND = Tag.of("uri", "NOT_FOUND");

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jersey/server/JerseyTagsProvider.java
Patch:
@@ -20,10 +20,12 @@
 
 /**
  * Provides {@link Tag Tags} for Jersey request metrics.
- * 
+ *
+ * @deprecated Scheduled for removal in 2.0.0, please use {@code io.micrometer.binder.jersey.server.JerseyTagsProvider}
  * @author Michael Weirauch
  * @since 1.8.0
  */
+@Deprecated
 public interface JerseyTagsProvider {
 
     /**

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jersey/server/MetricsApplicationEventListener.java
Patch:
@@ -27,9 +27,11 @@
  * The Micrometer {@link ApplicationEventListener} which registers
  * {@link RequestEventListener} for instrumenting Jersey server requests.
  *
+ * @deprecated Scheduled for removal in 2.0.0, please use {@code io.micrometer.binder.jersey.server.MetricsApplicationEventListener}
  * @author Michael Weirauch
  * @since 1.8.0
  */
+@Deprecated
 public class MetricsApplicationEventListener implements ApplicationEventListener {
 
     private final MeterRegistry meterRegistry;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jersey/server/MetricsRequestEventListener.java
Patch:
@@ -32,10 +32,12 @@
 /**
  * {@link RequestEventListener} recording timings for Jersey server requests.
  *
+ * @deprecated Scheduled for removal in 2.0.0, please use {@code io.micrometer.binder.jersey.server.MetricsRequestEventListener}
  * @author Michael Weirauch
  * @author Jon Schneider
  * @since 1.8.0
  */
+@Deprecated
 public class MetricsRequestEventListener implements RequestEventListener {
 
     private final Map<ContainerRequest, Timer.Sample> shortTaskSample = Collections

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jetty/InstrumentedQueuedThreadPool.java
Patch:
@@ -30,9 +30,11 @@
  *     // ...
  * }</pre>
  *
+ * @deprecated Scheduled for removal in 2.0.0, please use {@code io.micrometer.binder.jetty.InstrumentedQueuedThreadPool}
  * @since 1.1.0
  * @see JettyServerThreadPoolMetrics
  */
+@Deprecated
 public class InstrumentedQueuedThreadPool extends QueuedThreadPool {
 
     private final MeterRegistry registry;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jetty/JettyClientMetrics.java
Patch:
@@ -32,10 +32,12 @@
  * configured as a {@link org.eclipse.jetty.client.api.Request.Listener Request.Listener}.
  * Incubating in case there emerges a better way to handle path variable detection.
  *
+ * @deprecated Scheduled for removal in 2.0.0, please use {@code io.micrometer.binder.jetty.JettyClientMetrics}
  * @author Jon Schneider
  * @since 1.5.0
  */
 @Incubating(since = "1.5.0")
+@Deprecated
 public class JettyClientMetrics implements Request.Listener {
     private final MeterRegistry registry;
     private final JettyClientTagsProvider tagsProvider;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jetty/JettyClientTags.java
Patch:
@@ -30,9 +30,11 @@
  * Factory methods for {@link Tag Tags} associated with a request-response exchange that
  * is handled by Jetty {@link org.eclipse.jetty.client.HttpClient}.
  *
+ * @deprecated Scheduled for removal in 2.0.0, please use {@code io.micrometer.binder.jetty.JettyClientTags}
  * @author Jon Schneider
  * @since 1.5.0
  */
+@Deprecated
 public final class JettyClientTags {
 
     private static final Tag URI_NOT_FOUND = Tag.of("uri", "NOT_FOUND");

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jetty/JettyClientTagsProvider.java
Patch:
@@ -24,10 +24,12 @@
  * Provides {@link Tag Tags} for Jetty {@link org.eclipse.jetty.client.HttpClient} request metrics.
  * Incubating in case there emerges a better way to handle path variable detection.
  *
+ * @deprecated Scheduled for removal in 2.0.0, please use {@code io.micrometer.binder.jetty.JettyClientTagsProvider}
  * @author Jon Schneider
  * @since 1.5.0
  */
 @Incubating(since = "1.5.0")
+@Deprecated
 public interface JettyClientTagsProvider {
 
     /**

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jetty/JettyConnectionMetrics.java
Patch:
@@ -48,9 +48,11 @@
  *
  * Alternatively, configure on all connectors with {@link JettyConnectionMetrics#addToAllConnectors(Server, MeterRegistry, Iterable)}.
  *
+ * @deprecated Scheduled for removal in 2.0.0, please use {@code io.micrometer.binder.jetty.JettyConnectionMetrics}
  * @author Jon Schneider
  * @since 1.4.0
  */
+@Deprecated
 public class JettyConnectionMetrics extends AbstractLifeCycle implements Connection.Listener {
     private final MeterRegistry registry;
     private final Iterable<Tag> tags;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jetty/JettyServerThreadPoolMetrics.java
Patch:
@@ -35,12 +35,14 @@
  *     }
  * </pre>
  *
+ * @deprecated Scheduled for removal in 2.0.0, please use {@code io.micrometer.binder.jetty.JettyServerThreadPoolMetrics}
  * @author Manabu Matsuzaki
  * @author Andy Wilkinson
  * @author Johnny Lim
  * @since 1.1.0
  * @see InstrumentedQueuedThreadPool
  */
+@Deprecated
 public class JettyServerThreadPoolMetrics implements MeterBinder {
 
     private final ThreadPool threadPool;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jetty/JettySslHandshakeMetrics.java
Patch:
@@ -41,10 +41,12 @@
  *
  * Alternatively, configure on all connectors with {@link JettySslHandshakeMetrics#addToAllConnectors(Server, MeterRegistry, Iterable)}.
  *
+ * @deprecated Scheduled for removal in 2.0.0, please use {@code io.micrometer.binder.jetty.JettySslHandshakeMetrics}
  * @author John Karp
  * @author Johnny Lim
  * @since 1.5.0
  */
+@Deprecated
 public class JettySslHandshakeMetrics implements SslHandshakeListener {
     private static final String METER_NAME = "jetty.ssl.handshakes";
     private static final String DESCRIPTION = "SSL/TLS handshakes";

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jetty/JettyStatisticsMetrics.java
Patch:
@@ -27,7 +27,7 @@
 import java.util.function.ToLongFunction;
 
 /**
- * @deprecated Since 1.4.0. Use {@link TimedHandler} instead.
+ * @deprecated Since 1.4.0. Use {@code io.micrometer.binder.jetty.TimedHandler} instead.
  */
 @Deprecated
 @NonNullApi

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jetty/OnCompletionAsyncListener.java
Patch:
@@ -22,7 +22,10 @@
  * {@link AsyncListener} that calls back to the handler. This class
  * uses only object references to work around
  * <a href="https://issues.redhat.com/browse/WFLY-13345">WFLY-13345</a>
+ *
+ * @deprecated Scheduled for removal in 2.0.0, please use {@code io.micrometer.binder.jetty.OnCompletionAsyncListener}
  */
+@Deprecated
 class OnCompletionAsyncListener implements AsyncListener {
 
     private final Object handler;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jetty/TimedHandler.java
Patch:
@@ -42,11 +42,13 @@
 /**
  * Adapted from Jetty's <a href="https://github.com/eclipse/jetty.project/blob/jetty-9.4.x/jetty-server/src/main/java/org/eclipse/jetty/server/handler/StatisticsHandler.java">StatisticsHandler</a>.
  *
+ * @deprecated Scheduled for removal in 2.0.0, please use {@code io.micrometer.binder.jetty.TimedHandler}
  * @author Jon Schneider
  * @since 1.4.0
  */
 @NonNullApi
 @NonNullFields
+@Deprecated
 public class TimedHandler extends HandlerWrapper implements Graceful {
     private static final String SAMPLE_REQUEST_TIMER_ATTRIBUTE = "__micrometer_timer_sample";
     private static final String SAMPLE_REQUEST_LONG_TASK_TIMER_ATTRIBUTE = "__micrometer_ltt_sample";

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jvm/DiskSpaceMetrics.java
Patch:
@@ -34,7 +34,7 @@
  *
  * @author jmcshane
  * @author Johnny Lim
- * @deprecated use {@link io.micrometer.core.instrument.binder.system.DiskSpaceMetrics} instead.
+ * @deprecated use {@code io.micrometer.binder.system.DiskSpaceMetrics} instead.
  */
 @Incubating(since = "1.1.0")
 @NonNullApi

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jvm/ExecutorServiceMetrics.java
Patch:
@@ -42,12 +42,14 @@
  * a wrapper type for {@link ExecutorService}, like {@link TimedExecutorService}. Make sure to pass the underlying,
  * unwrapped ExecutorService to this MeterBinder, if it is wrapped in another type.
  *
+ * @deprecated Scheduled for removal in 2.0.0, please use {@code io.micrometer.binder.jvm.ExecutorServiceMetrics}
  * @author Jon Schneider
  * @author Clint Checketts
  * @author Johnny Lim
  */
 @NonNullApi
 @NonNullFields
+@Deprecated
 public class ExecutorServiceMetrics implements MeterBinder {
     private static boolean allowIllegalReflectiveAccess = true;
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jvm/JvmCompilationMetrics.java
Patch:
@@ -32,10 +32,12 @@
 /**
  * {@link MeterBinder} for JVM compilation metrics.
  *
+ * @deprecated Scheduled for removal in 2.0.0, please use {@code io.micrometer.binder.jvm.JvmCompilationMetrics}
  * @since 1.4.0
  */
 @NonNullApi
 @NonNullFields
+@Deprecated
 public class JvmCompilationMetrics implements MeterBinder {
     private final Iterable<Tag> tags;
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jvm/JvmGcMetrics.java
Patch:
@@ -51,12 +51,14 @@
  * This provides metrics for OpenJDK garbage collectors (serial, parallel, G1, Shenandoah, ZGC)
  * and for OpenJ9 garbage collectors (gencon, balanced, opthruput, optavgpause, metronome).
  *
+ * @deprecated Scheduled for removal in 2.0.0, please use {@code io.micrometer.binder.jvm.JvmGcMetrics}
  * @author Jon Schneider
  * @author Tommy Ludwig
  * @see GarbageCollectorMXBean
  */
 @NonNullApi
 @NonNullFields
+@Deprecated
 public class JvmGcMetrics implements MeterBinder, AutoCloseable {
 
     private static final InternalLogger log = InternalLoggerFactory.getInstance(JvmGcMetrics.class);

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jvm/JvmHeapPressureMetrics.java
Patch:
@@ -44,9 +44,11 @@
  * Provides methods to access measurements of low pool memory and heavy GC overhead as described in
  * <a href="https://www.jetbrains.com/help/teamcity/teamcity-memory-monitor.html">TeamCity's Memory Monitor</a>.
  *
+ * @deprecated Scheduled for removal in 2.0.0, please use {@code io.micrometer.binder.jvm.JvmHeapPressureMetrics}
  * @author Jon Schneider
  * @since 1.4.0
  */
+@Deprecated
 public class JvmHeapPressureMetrics implements MeterBinder, AutoCloseable {
     private final Iterable<Tag> tags;
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jvm/JvmInfoMetrics.java
Patch:
@@ -22,9 +22,11 @@
 /**
  * {@link MeterBinder} for JVM information.
  *
+ * @deprecated Scheduled for removal in 2.0.0, please use {@code io.micrometer.binder.jvm.JvmInfoMetrics}
  * @author Erin Schnabel
  * @since 1.7.0
  */
+@Deprecated
 public class JvmInfoMetrics implements MeterBinder {
 
     @Override

File: samples/micrometer-samples-core/src/main/java/io/micrometer/core/samples/ObservationHandlerSample.java
Patch:
@@ -22,16 +22,15 @@
 import io.micrometer.api.instrument.observation.Observation;
 import io.micrometer.api.instrument.Tags;
 import io.micrometer.api.instrument.observation.ObservationPredicate;
-import io.micrometer.api.instrument.observation.ObservationTextPublisher;
 import io.micrometer.api.instrument.simple.SimpleMeterRegistry;
 
 public class ObservationHandlerSample {
     private static final SimpleMeterRegistry registry = new SimpleMeterRegistry();
 
     public static void main(String[] args) throws InterruptedException {
         registry.withTimerObservationHandler()
+                .withLoggingObservationHandler()
                 .observationConfig()
-                    .observationHandler(new ObservationTextPublisher(System.out::println))
                     .tagsProvider(new CustomTagsProvider())
                     .observationPredicate(new IgnoringObservationPredicate());
 

File: micrometer-api/src/test/java/io/micrometer/api/instrument/contextpropagation/ObservationThreadLocalAccessorTests.java
Patch:
@@ -19,11 +19,9 @@
 import io.micrometer.api.instrument.observation.ObservationRegistry;
 import io.micrometer.api.instrument.simple.SimpleMeterRegistry;
 import io.micrometer.contextpropagation.ContextContainer;
-import org.assertj.core.api.BDDAssertions;
 import org.junit.jupiter.api.Test;
 
 import static org.assertj.core.api.BDDAssertions.then;
-import static org.junit.jupiter.api.Assertions.*;
 
 class ObservationThreadLocalAccessorTests {
 

File: micrometer-api/src/main/java/io/micrometer/api/instrument/transport/http/context/HttpServerContext.java
Patch:
@@ -16,10 +16,9 @@
 package io.micrometer.api.instrument.transport.http.context;
 
 import io.micrometer.api.instrument.observation.Observation;
-import io.micrometer.api.instrument.transport.http.tags.HttpTagsProvider;
-import io.micrometer.api.lang.NonNull;
 import io.micrometer.api.instrument.transport.http.HttpServerRequest;
 import io.micrometer.api.instrument.transport.http.HttpServerResponse;
+import io.micrometer.api.lang.NonNull;
 
 /**
  * {@link Observation.Context Context} for an HTTP server request/response.

File: micrometer-api/src/main/java/io/micrometer/api/instrument/observation/ObservationRegistry.java
Patch:
@@ -18,7 +18,6 @@
 import java.util.Collection;
 import java.util.List;
 import java.util.concurrent.CopyOnWriteArrayList;
-import java.util.function.BiPredicate;
 
 import io.micrometer.api.instrument.NoopObservation;
 import io.micrometer.api.lang.Nullable;
@@ -64,7 +63,7 @@ class ObservationConfig {
 
         private final List<ObservationHandler<?>> observationHandlers = new CopyOnWriteArrayList<>();
 
-        private final List<BiPredicate<String, Observation.Context>> observationPredicates = new CopyOnWriteArrayList<>();
+        private final List<ObservationPredicate> observationPredicates = new CopyOnWriteArrayList<>();
 
         /**
          * Register a handler for the {@link Observation observations}.
@@ -84,7 +83,7 @@ public ObservationConfig observationHandler(ObservationHandler<?> handler) {
          * @param predicate predicate
          * @return This configuration instance
          */
-        public ObservationConfig observationPredicate(BiPredicate<String, Observation.Context> predicate) {
+        public ObservationConfig observationPredicate(ObservationPredicate predicate) {
             this.observationPredicates.add(predicate);
             return this;
         }

File: micrometer-api/src/main/java/io/micrometer/api/instrument/MeterRegistry.java
Patch:
@@ -88,19 +88,19 @@ public abstract class MeterRegistry implements ObservationRegistry {
     private final Config config = new Config();
     private final More more = new More();
 
-    private final ThreadLocal<Observation> localObservation = new ThreadLocal<>();
+    private static final ThreadLocal<Observation> localObservation = new ThreadLocal<>();
 
     private final ObservationConfig observationConfig = new ObservationConfig();
 
     @Nullable
     @Override
     public Observation getCurrentObservation() {
-        return this.localObservation.get();
+        return localObservation.get();
     }
 
     @Override
     public void setCurrentObservation(@Nullable Observation current) {
-        this.localObservation.set(current);
+        localObservation.set(current);
     }
 
     @Override

File: micrometer-api/src/main/java/io/micrometer/api/aop/TimedAspect.java
Patch:
@@ -201,7 +201,9 @@ private void record(ProceedingJoinPoint pjp, Timed timed, String metricName, Tim
                     .tags(EXCEPTION_TAG, exceptionClass)
                     .tags(tagsBasedOnJoinPoint.apply(pjp))
                     .publishPercentileHistogram(timed.histogram())
-                    .publishPercentiles(timed.percentiles().length == 0 ? null : timed.percentiles()));
+                    .publishPercentiles(timed.percentiles().length == 0 ? null : timed.percentiles())
+                    .register(registry)
+            );
         } catch (Exception e) {
             // ignoring on purpose
         }

File: micrometer-api/src/main/java/io/micrometer/api/instrument/transport/http/context/HttpClientHandlerContext.java
Patch:
@@ -15,14 +15,14 @@
  */
 package io.micrometer.api.instrument.transport.http.context;
 
-import io.micrometer.api.instrument.Timer;
+import io.micrometer.api.instrument.observation.Observation;
 import io.micrometer.api.instrument.transport.http.tags.HttpTagsProvider;
 import io.micrometer.api.instrument.transport.http.HttpClientRequest;
 import io.micrometer.api.instrument.transport.http.HttpClientResponse;
 import io.micrometer.api.lang.NonNull;
 
 /**
- * {@link Timer.HandlerContext HandlerContext}
+ * {@link Observation.Context Context}
  * for an HTTP client request/response.
  *
  * @author Jonatan Ivanov

File: micrometer-api/src/main/java/io/micrometer/api/instrument/transport/http/context/HttpHandlerContext.java
Patch:
@@ -15,23 +15,23 @@
  */
 package io.micrometer.api.instrument.transport.http.context;
 
+import io.micrometer.api.instrument.observation.Observation;
 import io.micrometer.api.instrument.Tags;
-import io.micrometer.api.instrument.Timer;
 import io.micrometer.api.instrument.transport.http.HttpRequest;
 import io.micrometer.api.instrument.transport.http.HttpResponse;
 import io.micrometer.api.instrument.transport.http.tags.HttpTagsProvider;
 import io.micrometer.api.lang.NonNull;
 import io.micrometer.api.lang.Nullable;
 
 /**
- * {@link Timer.HandlerContext HandlerContext} for an HTTP exchange.
+ * {@link Observation.Context} for an HTTP exchange.
  *
  * @author Marcin Grzejszczak
  * @since 2.0.0
  * @param <REQ> request type
  * @param <RES> response type
  */
-public abstract class HttpHandlerContext<REQ extends HttpRequest, RES extends HttpResponse> extends Timer.HandlerContext {
+public abstract class HttpHandlerContext<REQ extends HttpRequest, RES extends HttpResponse> extends Observation.Context {
 
     private final HttpTagsProvider tagsProvider;
 

File: micrometer-api/src/main/java/io/micrometer/api/instrument/transport/http/context/HttpServerHandlerContext.java
Patch:
@@ -15,14 +15,14 @@
  */
 package io.micrometer.api.instrument.transport.http.context;
 
-import io.micrometer.api.instrument.Timer;
+import io.micrometer.api.instrument.observation.Observation;
 import io.micrometer.api.instrument.transport.http.tags.HttpTagsProvider;
 import io.micrometer.api.lang.NonNull;
 import io.micrometer.api.instrument.transport.http.HttpServerRequest;
 import io.micrometer.api.instrument.transport.http.HttpServerResponse;
 
 /**
- * {@link Timer.HandlerContext HandlerContext} for an HTTP server request/response.
+ * {@link Observation.Context Context} for an HTTP server request/response.
  *
  * @author Marcin Grzejszczak
  * @since 2.0.0

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/db/JooqExecuteListener.java
Patch:
@@ -103,6 +103,8 @@ private void stopTimerIfStillRunning(ExecuteContext ctx) {
                 .tag("type", ctx.type().name().toLowerCase())
                 .tag("exception", exceptionName)
                 .tag("exception.subclass", exceptionSubclass)
-                .tags(tags));
+                .tags(tags)
+                .register(registry)
+        );
     }
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/httpcomponents/MicrometerHttpRequestExecutor.java
Patch:
@@ -121,7 +121,9 @@ public HttpResponse execute(HttpRequest request, HttpClientConnection conn, Http
 
             timerSample.stop(Timer.builder(METER_NAME)
                     .description("Duration of Apache HttpClient request execution")
-                    .tags(tags));
+                    .tags(tags)
+                    .register(registry)
+            );
         }
     }
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jetty/JettyClientMetrics.java
Patch:
@@ -78,7 +78,9 @@ public void onQueued(Request request) {
 
             sample.stop(Timer.builder(timingMetricName)
                     .description("Jetty HTTP client request timing")
-                    .tags(httpRequestTags));
+                    .tags(httpRequestTags)
+                    .register(registry)
+            );
         });
     }
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jetty/JettyConnectionMetrics.java
Patch:
@@ -165,7 +165,9 @@ public void onClosed(Connection connection) {
             sample.stop(Timer.builder("jetty.connections.request")
                     .description("Jetty client or server requests")
                     .tag("type", serverOrClient)
-                    .tags(tags));
+                    .tags(tags)
+                    .register(registry)
+            );
         }
 
         messagesIn.increment(connection.getMessagesIn());

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Timer.java
Patch:
@@ -287,7 +287,8 @@ public void error(Throwable throwable) {
         }
 
         /**
-         * Records the duration of the operation.
+         * Records the duration of the operation and adds tags to the {@link Timer.Builder} based on the
+         * {@link HandlerContext} for this {@link Sample}.
          *
          * @param timer The timer to record the sample to.
          * @return The total duration of the sample in nanoseconds

File: micrometer-core/src/main/java/io/micrometer/core/instrument/MeterRegistry.java
Patch:
@@ -116,7 +116,7 @@ protected MeterRegistry(Clock clock) {
         this.clock = clock;
     }
 
-    Timer.Sample getCurrentSample() {
+    @Nullable Timer.Sample getCurrentSample() {
         return localSample.get();
     }
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Timer.java
Patch:
@@ -383,7 +383,7 @@ public void remove(Class<?> clazz) {
             this.map.remove(clazz);
         }
         
-        public <T> T get(Class<T> clazz) {
+        @Nullable public <T> T get(Class<T> clazz) {
             return (T) this.map.get(clazz);
         }
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/TimerRecordingHandler.java
Patch:
@@ -25,7 +25,7 @@
 
 /**
  * Handler with callbacks for the {@link Timer#start(MeterRegistry) start} and
- * {@link io.micrometer.core.instrument.Timer.Sample#stop(Timer) stop} of a {@link Timer} recording.
+ * {@link io.micrometer.core.instrument.Timer.Sample#stop(Timer.Builder) stop} of a {@link Timer} recording.
  *
  * @since 2.0.0
  */

File: micrometer-core/src/main/java/io/micrometer/core/instrument/LongTaskTimer.java
Patch:
@@ -195,7 +195,7 @@ default double duration(long task, TimeUnit unit) {
     default Iterable<Measurement> measure() {
         return Arrays.asList(
                 new Measurement(() -> (double) activeTasks(), Statistic.ACTIVE_TASKS),
-                new Measurement(() -> duration(TimeUnit.NANOSECONDS), Statistic.DURATION)
+                new Measurement(() -> duration(baseTimeUnit()), Statistic.DURATION)
         );
     }
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/tracing/context/HttpHandlerContext.java
Patch:
@@ -16,10 +16,10 @@
 package io.micrometer.core.instrument.tracing.context;
 
 import io.micrometer.core.instrument.Timer;
+import io.micrometer.core.instrument.transport.http.HttpRequest;
+import io.micrometer.core.instrument.transport.http.HttpResponse;
 import io.micrometer.core.lang.NonNull;
 import io.micrometer.core.lang.Nullable;
-import io.micrometer.core.instrument.transport.http.Request;
-import io.micrometer.core.instrument.transport.http.Response;
 
 /**
  * {@link io.micrometer.core.instrument.Timer.HandlerContext HandlerContext} for an HTTP exchange.
@@ -29,7 +29,7 @@
  * @param <REQ> request type
  * @param <RES> response type
  */
-public abstract class HttpHandlerContext<REQ extends Request, RES extends Response> extends Timer.HandlerContext {
+public abstract class HttpHandlerContext<REQ extends HttpRequest, RES extends HttpResponse> extends Timer.HandlerContext {
 
     /**
      * Returns the HTTP request.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/CaffeineCacheMetrics.java
Patch:
@@ -32,7 +32,6 @@
  * Cache<String, String> cache = Caffeine.newBuilder().recordStats().build();
  * CaffeineCacheMetrics.monitor(registry, cache, "mycache", "region", "test");
  * }</pre>
- * <p>
  *
  * @author Clint Checketts
  * @see CaffeineStatsCounter

File: implementations/micrometer-registry-jmx/src/test/java/io/micrometer/jmx/JmxMeterRegistryTest.java
Patch:
@@ -46,7 +46,7 @@ void customClockIsUsed() throws MalformedObjectNameException, ReflectionExceptio
         clock.addSeconds(6);
 
         MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();
-        Double oneMinuteRate = (Double) mbs.getAttribute(new ObjectName(JmxConfig.DEFAULT.domain() + ":name=" + nameOfTimer), "OneMinuteRate");
+        Double oneMinuteRate = (Double) mbs.getAttribute(new ObjectName(String.format("%s:name=%s,type=timers", JmxConfig.DEFAULT.domain(), nameOfTimer)), "OneMinuteRate");
 
         assertThat(oneMinuteRate).isGreaterThan(0.0);
     }

File: implementations/micrometer-registry-elastic/src/main/java/io/micrometer/elastic/ElasticConfig.java
Patch:
@@ -167,7 +167,7 @@ default String indexDateSeparator() {
     /**
      * Base64-encoded credentials string. From a generated API key, concatenate in UTF-8 format
      * the unique {@code id}, a colon ({@code :}), and the {@code api_key} in the following format:
-     * <p><pre>{@code <id>:<api_key>}</pre></p>
+     * <pre>{@code <id>:<api_key>}</pre>
      * The above should be the input for Base64 encoding, and the output is the credentials
      * returned by this method.
      * If configured, ApiKey type authentication is used instead of username/password authentication.

File: implementations/micrometer-registry-stackdriver/src/main/java/io/micrometer/stackdriver/StackdriverConfig.java
Patch:
@@ -70,7 +70,7 @@ default String resourceType() {
      * of backwards compatibility.
      * For example, when this is {@code false}, counter metrics are published as the GAUGE MetricKind.
      * When this is {@code true}, counter metrics are published as the CUMULATIVE MetricKind.
-     * <p></p>
+     * <p>
      * If you have published metrics to Stackdriver before, switching this flag will cause metrics
      * publishing to fail until you delete the old MetricDescriptor with the previous MetricKind so that
      * it can be recreated with the new MetricKind next time that metric is published.

File: micrometer-core/src/main/java/io/micrometer/core/ipc/http/HttpSender.java
Patch:
@@ -167,7 +167,7 @@ public final Builder withBasicAuthentication(@Nullable String user, @Nullable St
             /**
              * Configures the {@code Authorization} HTTP header with the given type and credentials.
              * The format will be:
-             * <p><pre>{@code Authorization: <type> <credentials>}</pre></p>
+             * <pre>{@code Authorization: <type> <credentials>}</pre>
              * No encoding will be performed on the {@code credentials}, so if the authentication scheme
              * expects {@code credentials} to be encoded, encode them before passing them to this method.
              *

File: micrometer-test/src/main/java/io/micrometer/core/instrument/binder/cache/CacheMeterBinderCompatibilityKit.java
Patch:
@@ -32,9 +32,9 @@ public abstract class CacheMeterBinderCompatibilityKit<C> {
     protected C cache;
 
     /**
-     * The return value will be assigned to {@link this#cache}.
+     * The return value will be assigned to {@link #cache}.
      * @return cache to use for tests
-     * @see this#bindToRegistry()
+     * @see #bindToRegistry()
      */
     public abstract C createCache();
 

File: implementations/micrometer-registry-elastic/src/main/java/io/micrometer/elastic/ElasticConfig.java
Patch:
@@ -167,7 +167,7 @@ default String indexDateSeparator() {
     /**
      * Base64-encoded credentials string. From a generated API key, concatenate in UTF-8 format
      * the unique {@code id}, a colon ({@code :}), and the {@code api_key} in the following format:
-     * <pre>{@code <id>:<api_key>}</pre>
+     * <p><pre>{@code <id>:<api_key>}</pre></p>
      * The above should be the input for Base64 encoding, and the output is the credentials
      * returned by this method.
      * If configured, ApiKey type authentication is used instead of username/password authentication.

File: implementations/micrometer-registry-stackdriver/src/main/java/io/micrometer/stackdriver/StackdriverConfig.java
Patch:
@@ -70,7 +70,7 @@ default String resourceType() {
      * of backwards compatibility.
      * For example, when this is {@code false}, counter metrics are published as the GAUGE MetricKind.
      * When this is {@code true}, counter metrics are published as the CUMULATIVE MetricKind.
-     * <p>
+     * <p></p>
      * If you have published metrics to Stackdriver before, switching this flag will cause metrics
      * publishing to fail until you delete the old MetricDescriptor with the previous MetricKind so that
      * it can be recreated with the new MetricKind next time that metric is published.

File: micrometer-core/src/main/java/io/micrometer/core/ipc/http/HttpSender.java
Patch:
@@ -167,7 +167,7 @@ public final Builder withBasicAuthentication(@Nullable String user, @Nullable St
             /**
              * Configures the {@code Authorization} HTTP header with the given type and credentials.
              * The format will be:
-             * <pre>{@code Authorization: <type> <credentials>}</pre>
+             * <p><pre>{@code Authorization: <type> <credentials>}</pre></p>
              * No encoding will be performed on the {@code credentials}, so if the authentication scheme
              * expects {@code credentials} to be encoded, encode them before passing them to this method.
              *

File: micrometer-test/src/main/java/io/micrometer/core/instrument/binder/cache/CacheMeterBinderCompatibilityKit.java
Patch:
@@ -32,9 +32,9 @@ public abstract class CacheMeterBinderCompatibilityKit<C> {
     protected C cache;
 
     /**
-     * The return value will be assigned to {@link #cache}.
+     * The return value will be assigned to {@link this#cache}.
      * @return cache to use for tests
-     * @see #bindToRegistry()
+     * @see this#bindToRegistry()
      */
     public abstract C createCache();
 

File: implementations/micrometer-registry-elastic/src/main/java/io/micrometer/elastic/ElasticConfig.java
Patch:
@@ -167,7 +167,7 @@ default String indexDateSeparator() {
     /**
      * Base64-encoded credentials string. From a generated API key, concatenate in UTF-8 format
      * the unique {@code id}, a colon ({@code :}), and the {@code api_key} in the following format:
-     * <p><pre>{@code <id>:<api_key>}</pre></p>
+     * <pre>{@code <id>:<api_key>}</pre>
      * The above should be the input for Base64 encoding, and the output is the credentials
      * returned by this method.
      * If configured, ApiKey type authentication is used instead of username/password authentication.

File: implementations/micrometer-registry-stackdriver/src/main/java/io/micrometer/stackdriver/StackdriverConfig.java
Patch:
@@ -70,7 +70,7 @@ default String resourceType() {
      * of backwards compatibility.
      * For example, when this is {@code false}, counter metrics are published as the GAUGE MetricKind.
      * When this is {@code true}, counter metrics are published as the CUMULATIVE MetricKind.
-     * <p></p>
+     * <p>
      * If you have published metrics to Stackdriver before, switching this flag will cause metrics
      * publishing to fail until you delete the old MetricDescriptor with the previous MetricKind so that
      * it can be recreated with the new MetricKind next time that metric is published.

File: micrometer-core/src/main/java/io/micrometer/core/ipc/http/HttpSender.java
Patch:
@@ -167,7 +167,7 @@ public final Builder withBasicAuthentication(@Nullable String user, @Nullable St
             /**
              * Configures the {@code Authentication} HTTP header with the given type and credentials.
              * The format will be:
-             * <p><pre>{@code Authorization: <type> <credentials>}</pre></p>
+             * <pre>{@code Authorization: <type> <credentials>}</pre>
              * No encoding will be performed on the {@code credentials}, so if the authentication scheme
              * expects {@code credentials} to be encoded, encode them before passing them to this method.
              *

File: micrometer-test/src/main/java/io/micrometer/core/instrument/binder/cache/CacheMeterBinderCompatibilityKit.java
Patch:
@@ -32,9 +32,9 @@ public abstract class CacheMeterBinderCompatibilityKit<C> {
     protected C cache;
 
     /**
-     * The return value will be assigned to {@link this#cache}.
+     * The return value will be assigned to {@link #cache}.
      * @return cache to use for tests
-     * @see this#bindToRegistry()
+     * @see #bindToRegistry()
      */
     public abstract C createCache();
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/AbstractTimerBuilder.java
Patch:
@@ -15,13 +15,13 @@
  */
 package io.micrometer.core.instrument;
 
+import java.time.Duration;
+import java.util.Arrays;
+
 import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;
 import io.micrometer.core.instrument.distribution.pause.PauseDetector;
 import io.micrometer.core.lang.Nullable;
 
-import java.time.Duration;
-import java.util.Arrays;
-
 /**
  * Base builder for {@link Timer}.
  *

File: micrometer-core/src/main/java/io/micrometer/core/instrument/ImmutableTag.java
Patch:
@@ -15,10 +15,10 @@
  */
 package io.micrometer.core.instrument;
 
-import io.micrometer.core.lang.Nullable;
-
 import java.util.Objects;
 
+import io.micrometer.core.lang.Nullable;
+
 import static java.util.Objects.requireNonNull;
 
 /**

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jersey/server/MetricsRequestEventListener.java
Patch:
@@ -128,8 +128,9 @@ private Set<Timer> shortTimers(Set<Timed> timed, RequestEvent event) {
         }
 
         return timed.stream()
-            .map(t -> Timer.builder(t, metricName).tags(tagsProvider.httpRequestTags(event)).register(registry))
-            .collect(Collectors.toSet());
+                .filter(annotation -> !annotation.longTask())
+                .map(t -> Timer.builder(t, metricName).tags(tagsProvider.httpRequestTags(event)).register(registry))
+                .collect(Collectors.toSet());
     }
 
     private Set<LongTaskTimer> longTaskTimers(Set<Timed> timed, RequestEvent event) {

File: micrometer-jersey2/src/test/java/io/micrometer/jersey2/server/MetricsRequestEventListenerTimedTest.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.micrometer.jersey2.server;
 
+import io.micrometer.core.Issue;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.Tags;
@@ -136,9 +137,9 @@ void longTaskTimerSupported() throws InterruptedException, ExecutionException {
             .isEqualTo(1);
     }
 
-    // See gh-2861
     @Test
-    public void longTaskTimerOnlyOneMeter() throws InterruptedException, ExecutionException {
+    @Issue("gh-2861")
+    void longTaskTimerOnlyOneMeter() throws InterruptedException, ExecutionException {
         final Future<Response> future = target("just-long-timed").request().async().get();
 
         /*

File: implementations/micrometer-registry-wavefront/src/test/java/io/micrometer/wavefront/WavefrontMeterRegistryTest.java
Patch:
@@ -172,8 +172,8 @@ public Duration step() {
         WavefrontClient sender = builder.build();
         assertThat(builder).hasFieldOrPropertyWithValue("flushInterval", 15_000L);
         assertThat(builder).hasFieldOrPropertyWithValue("flushIntervalTimeUnit", TimeUnit.MILLISECONDS);
-        assertThat(sender).extracting("reportingService").hasFieldOrPropertyWithValue("uri", URI.create("https://example.com"));
-        assertThat(sender).extracting("reportingService").hasFieldOrPropertyWithValue("token", "apiToken");
+        assertThat(sender).extracting("metricsReportingService").hasFieldOrPropertyWithValue("uri", URI.create("https://example.com"));
+        assertThat(sender).extracting("metricsReportingService").hasFieldOrPropertyWithValue("token", "apiToken");
         assertThat(sender).hasFieldOrPropertyWithValue("batchSize", 20);
     }
 

File: implementations/micrometer-registry-wavefront/src/test/java/io/micrometer/wavefront/WavefrontMeterRegistryTest.java
Patch:
@@ -172,8 +172,9 @@ public Duration step() {
         WavefrontClient sender = builder.build();
         assertThat(builder).hasFieldOrPropertyWithValue("flushInterval", 15_000L);
         assertThat(builder).hasFieldOrPropertyWithValue("flushIntervalTimeUnit", TimeUnit.MILLISECONDS);
-        assertThat(sender).extracting("reportingService").hasFieldOrPropertyWithValue("uri", URI.create("https://example.com"));
-        assertThat(sender).extracting("reportingService").hasFieldOrPropertyWithValue("token", "apiToken");
+        assertThat(sender).extracting("metricsReportingService")
+                .hasFieldOrPropertyWithValue("uri", URI.create("https://example.com"))
+                .hasFieldOrPropertyWithValue("token", "apiToken");
         assertThat(sender).hasFieldOrPropertyWithValue("batchSize", 20);
     }
 

File: implementations/micrometer-registry-wavefront/src/test/java/io/micrometer/wavefront/WavefrontMeterRegistryTest.java
Patch:
@@ -172,8 +172,9 @@ public Duration step() {
         WavefrontClient sender = builder.build();
         assertThat(builder).hasFieldOrPropertyWithValue("flushInterval", 15_000L);
         assertThat(builder).hasFieldOrPropertyWithValue("flushIntervalTimeUnit", TimeUnit.MILLISECONDS);
-        assertThat(sender).extracting("reportingService").hasFieldOrPropertyWithValue("uri", URI.create("https://example.com"));
-        assertThat(sender).extracting("reportingService").hasFieldOrPropertyWithValue("token", "apiToken");
+        assertThat(sender).extracting("metricsReportingService")
+                .hasFieldOrPropertyWithValue("uri", URI.create("https://example.com"))
+                .hasFieldOrPropertyWithValue("token", "apiToken");
         assertThat(sender).hasFieldOrPropertyWithValue("batchSize", 20);
     }
 

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusNamingConvention.java
Patch:
@@ -67,7 +67,9 @@ public String name(String name, Meter.Type type, @Nullable String baseUnit) {
                 break;
             case TIMER:
             case LONG_TASK_TIMER:
-                if (conventionName.endsWith(timerSuffix)) {
+                if (conventionName.endsWith(timerSuffix + "_seconds")) {
+                    // do nothing, metric name is properly formatted
+                } else if (conventionName.endsWith(timerSuffix)) {
                     conventionName += "_seconds";
                 } else if (!conventionName.endsWith("_seconds"))
                     conventionName += timerSuffix + "_seconds";

File: implementations/micrometer-registry-prometheus/src/test/java/io/micrometer/prometheus/PrometheusDurationNamingConventionTest.java
Patch:
@@ -30,5 +30,6 @@ class PrometheusDurationNamingConventionTest {
     void unitsAreAppendedToTimers() {
         assertThat(convention.name("timer", Meter.Type.TIMER)).isEqualTo("timer_duration_seconds");
         assertThat(convention.name("timer", Meter.Type.LONG_TASK_TIMER)).isEqualTo("timer_duration_seconds");
+        assertThat(convention.name("timer.duration.seconds", Meter.Type.TIMER)).isEqualTo("timer_duration_seconds");
     }
 }

File: implementations/micrometer-registry-prometheus/src/test/java/io/micrometer/prometheus/PrometheusNamingConventionTest.java
Patch:
@@ -40,6 +40,7 @@ void formatTagKey() {
     @Test
     void unitsAreAppendedToTimers() {
         assertThat(convention.name("timer", Meter.Type.TIMER)).isEqualTo("timer_seconds");
+        assertThat(convention.name("timer.seconds", Meter.Type.TIMER)).isEqualTo("timer_seconds");
         assertThat(convention.name("timer", Meter.Type.LONG_TASK_TIMER)).isEqualTo("timer_seconds");
         assertThat(convention.name("timer.duration", Meter.Type.LONG_TASK_TIMER)).isEqualTo("timer_duration_seconds");
     }

File: implementations/micrometer-registry-cloudwatch2/src/main/java/io/micrometer/cloudwatch2/CloudWatchMeterRegistry.java
Patch:
@@ -110,7 +110,7 @@ void sendMetricData(List<MetricDatum> metricData) throws InterruptedException {
                 .metricData(metricData)
                 .build();
         CountDownLatch latch = new CountDownLatch(1);
-        cloudWatchAsyncClient.putMetricData(putMetricDataRequest).whenCompleteAsync((response, t) -> {
+        cloudWatchAsyncClient.putMetricData(putMetricDataRequest).whenComplete((response, t) -> {
             if (t != null) {
                 if (t instanceof AbortedException) {
                     logger.warn("sending metric data was aborted: {}", t.getMessage());

File: micrometer-core/src/main/java/io/micrometer/core/instrument/step/StepCounter.java
Patch:
@@ -20,7 +20,7 @@
 import io.micrometer.core.instrument.Counter;
 
 /**
- * Counter that reports a rate per second to a monitoring system. Note that {@link #count()}
+ * Counter that reports a rate per step interval to a monitoring system. Note that {@link #count()}
  * will report the number of events in the last complete interval rather than the total for
  * the life of the process.
  *

File: implementations/micrometer-registry-appoptics/src/main/java/io/micrometer/appoptics/AppOpticsMeterRegistry.java
Patch:
@@ -23,10 +23,10 @@
 import io.micrometer.core.instrument.util.NamedThreadFactory;
 import io.micrometer.core.ipc.http.HttpSender;
 import io.micrometer.core.ipc.http.HttpUrlConnectionSender;
+import io.micrometer.core.lang.Nullable;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import javax.annotation.Nullable;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Optional;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/JCacheMetrics.java
Patch:
@@ -40,7 +40,7 @@
  */
 @NonNullApi
 @NonNullFields
-public class JCacheMetrics extends CacheMeterBinder {
+public class JCacheMetrics<K, V, C extends Cache<K, V>> extends CacheMeterBinder<C> {
     // VisibleForTesting
     @Nullable
     ObjectName objectName;
@@ -72,11 +72,11 @@ public static <K, V, C extends Cache<K, V>> C monitor(MeterRegistry registry, C
      * @return The instrumented cache, unchanged. The original cache is not wrapped or proxied in any way.
      */
     public static <K, V, C extends Cache<K, V>> C monitor(MeterRegistry registry, C cache, Iterable<Tag> tags) {
-        new JCacheMetrics(cache, tags).bindTo(registry);
+        new JCacheMetrics<>(cache, tags).bindTo(registry);
         return cache;
     }
 
-    public JCacheMetrics(Cache<?, ?> cache, Iterable<Tag> tags) {
+    public JCacheMetrics(C cache, Iterable<Tag> tags) {
         super(cache, cache.getName(), tags);
         try {
             CacheManager cacheManager = cache.getCacheManager();

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/cache/AbstractCacheMetricsTest.java
Patch:
@@ -32,7 +32,7 @@ abstract class AbstractCacheMetricsTest {
     /**
      * Verifies base metrics presence
      */
-    protected void verifyCommonCacheMetrics(MeterRegistry meterRegistry, CacheMeterBinder meterBinder) {
+    protected void verifyCommonCacheMetrics(MeterRegistry meterRegistry, CacheMeterBinder<?> meterBinder) {
         meterRegistry.get("cache.puts").tags(expectedTag).functionCounter();
         meterRegistry.get("cache.gets").tags(expectedTag).tag("result", "hit").functionCounter();
 

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/tomcat/TomcatMetricsTest.java
Patch:
@@ -343,7 +343,7 @@ private void checkMbeansInitialState() {
         assertThat(registry.get("tomcat.global.request.max").timeGauge().value(TimeUnit.MILLISECONDS)).isEqualTo(0.0);
         assertThat(registry.get("tomcat.threads.config.max").gauge().value()).isGreaterThan(0.0);
         assertThat(registry.get("tomcat.threads.busy").gauge().value()).isGreaterThanOrEqualTo(0.0);
-        assertThat(registry.get("tomcat.threads.current").gauge().value()).isGreaterThan(0.0);
+        assertThat(registry.get("tomcat.threads.current").gauge().value()).isGreaterThanOrEqualTo(0.0);
         assertThat(registry.get("tomcat.connections.current").gauge().value()).isGreaterThanOrEqualTo(0.0);
         assertThat(registry.get("tomcat.connections.keepalive.current").gauge().value()).isGreaterThanOrEqualTo(0.0);
         assertThat(registry.get("tomcat.connections.config.max").gauge().value()).isGreaterThan(0.0);

File: micrometer-core/src/main/java/io/micrometer/core/instrument/dropwizard/DropwizardMeterRegistry.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.micrometer.core.instrument.dropwizard;
 
+import com.codahale.metrics.ExponentiallyDecayingReservoir;
 import com.codahale.metrics.Gauge;
 import com.codahale.metrics.MetricRegistry;
 import io.micrometer.core.instrument.*;
@@ -101,7 +102,7 @@ protected <T> io.micrometer.core.instrument.Gauge newGauge(Meter.Id id, @Nullabl
 
     @Override
     protected Timer newTimer(Meter.Id id, DistributionStatisticConfig distributionStatisticConfig, PauseDetector pauseDetector) {
-        DropwizardTimer timer = new DropwizardTimer(id, registry.timer(hierarchicalName(id)), clock, distributionStatisticConfig, pauseDetector);
+        DropwizardTimer timer = new DropwizardTimer(id, registry.timer(hierarchicalName(id), () -> new com.codahale.metrics.Timer(new ExponentiallyDecayingReservoir(), dropwizardClock)), clock, distributionStatisticConfig, pauseDetector);
         HistogramGauges.registerWithCommonFormat(timer, this);
         return timer;
     }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/MeterRegistry.java
Patch:
@@ -566,7 +566,7 @@ private <M extends Meter> M registerMeterIfNecessary(Class<M> meterClass, Meter.
         Meter m = getOrCreateMeter(config, builder, id, mappedId, noopBuilder);
 
         if (!meterClass.isInstance(m)) {
-            throw new IllegalArgumentException("There is already a registered meter of a different type with the same name");
+            throw new IllegalArgumentException("There is already a registered meter of a different type with the same name: " + id.getName());
         }
         return meterClass.cast(m);
     }

File: micrometer-test/src/main/java/io/micrometer/core/tck/LongTaskTimerTest.java
Patch:
@@ -143,5 +143,5 @@ default void timedAnnotation(MeterRegistry registry) {
 
     @Timed(value = "my.name", longTask = true, extraTags = {"a", "tag"},
             description = "some description", histogram = true)
-    class AnnotationHolder {}
+    class AnnotationHolder { }
 }

File: implementations/micrometer-registry-stackdriver/src/main/java/io/micrometer/stackdriver/StackdriverMeterRegistry.java
Patch:
@@ -24,7 +24,6 @@
 import com.google.cloud.monitoring.v3.MetricServiceSettings;
 import com.google.monitoring.v3.*;
 import com.google.protobuf.Timestamp;
-import io.micrometer.core.annotation.Incubating;
 import io.micrometer.core.instrument.Timer;
 import io.micrometer.core.instrument.*;
 import io.micrometer.core.instrument.distribution.CountAtBucket;
@@ -61,7 +60,6 @@
  * @author Jon Schneider
  * @since 1.1.0
  */
-@Incubating(since = "1.1.0")
 public class StackdriverMeterRegistry extends StepMeterRegistry {
 
     private static final ThreadFactory DEFAULT_THREAD_FACTORY = new NamedThreadFactory("stackdriver-metrics-publisher");

File: micrometer-core/src/main/java/io/micrometer/core/aop/CountedAspect.java
Patch:
@@ -35,16 +35,16 @@
 /**
  * <p>
  * Aspect responsible for intercepting all methods annotated with the {@link Counted @Counted}
- * annotation and recording a few counter metrics about their execution status.<br />
+ * annotation and recording a few counter metrics about their execution status.<br>
  * The aspect supports programmatic customizations through constructor-injectable custom logic.
  * </p>
  * <p>
- * You might want to add tags programmatically to the {@link Counter}.<br />
+ * You might want to add tags programmatically to the {@link Counter}.<br>
  * In this case, the tags provider function (<code>Function&lt;ProceedingJoinPoint, Iterable&lt;Tag&gt;&gt;</code>) can help.
  * It receives a {@link ProceedingJoinPoint} and returns the {@link Tag}s that will be attached to the {@link Counter}.
  * </p>
  * <p>
- * You might also want to skip the {@link Counter} creation programmatically.<br />
+ * You might also want to skip the {@link Counter} creation programmatically.<br>
  * One use-case can be having another component in your application that already processes the {@link Counted @Counted} annotation
  * in some cases so that {@code CountedAspect} should not intercept these methods.
  * By using the skip predicate (<code>Predicate&lt;ProceedingJoinPoint&gt;</code>)

File: micrometer-core/src/main/java/io/micrometer/core/aop/TimedAspect.java
Patch:
@@ -37,16 +37,16 @@
 
 /**
  * <p>
- * AspectJ aspect for intercepting types or methods annotated with {@link Timed @Timed}.<br />
+ * AspectJ aspect for intercepting types or methods annotated with {@link Timed @Timed}.<br>
  * The aspect supports programmatic customizations through constructor-injectable custom logic.
  * </p>
  * <p>
- * You might want to add tags programmatically to the {@link Timer}.<br />
+ * You might want to add tags programmatically to the {@link Timer}.<br>
  * In this case, the tags provider function (<code>Function&lt;ProceedingJoinPoint, Iterable&lt;Tag&gt;&gt;</code>) can help.
  * It receives a {@link ProceedingJoinPoint} and returns the {@link Tag}s that will be attached to the {@link Timer}.
  * </p>
  * <p>
- * You might also want to skip the {@link Timer} creation programmatically.<br />
+ * You might also want to skip the {@link Timer} creation programmatically.<br>
  * One use-case can be having another component in your application that already processes the {@link Timed @Timed} annotation
  * in some cases so that {@code TimedAspect} should not intercept these methods. E.g.: Spring Boot does this for its controllers.
  * By using the skip predicate (<code>Predicate&lt;ProceedingJoinPoint&gt;</code>)

File: implementations/micrometer-registry-dynatrace/src/main/java/io/micrometer/dynatrace/v2/DynatraceExporterV2.java
Patch:
@@ -270,7 +270,7 @@ private void send(List<String> metricLines) {
                     .onSuccess(response -> handleSuccess(metricLines.size(), response))
                     .onError(response -> logger.error("Failed metric ingestion: Error Code={}, Response Body={}", response.code(), response.body()));
         } catch (Throwable throwable) {
-            logger.error("Failed metric ingestion: {}" + throwable.getMessage(), throwable);
+            logger.error("Failed metric ingestion: " + throwable.getMessage(), throwable);
         }
     }
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/mongodb/MongoMetricsCommandListener.java
Patch:
@@ -64,6 +64,7 @@ public MongoMetricsCommandListener(MeterRegistry registry, MongoCommandTagsProvi
 
     @Override
     public void commandStarted(CommandStartedEvent commandStartedEvent) {
+        tagsProvider.commandStarted(commandStartedEvent);
     }
 
     @Override

File: implementations/micrometer-registry-dynatrace/src/main/java/io/micrometer/dynatrace/v2/DynatraceExporterV2.java
Patch:
@@ -23,10 +23,10 @@
 import io.micrometer.core.instrument.distribution.ValueAtPercentile;
 import io.micrometer.core.instrument.util.AbstractPartition;
 import io.micrometer.core.ipc.http.HttpSender;
+import io.micrometer.core.util.internal.logging.InternalLogger;
+import io.micrometer.core.util.internal.logging.InternalLoggerFactory;
 import io.micrometer.dynatrace.AbstractDynatraceExporter;
 import io.micrometer.dynatrace.DynatraceConfig;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 
 import java.net.MalformedURLException;
 import java.net.URI;
@@ -53,7 +53,7 @@ public final class DynatraceExporterV2 extends AbstractDynatraceExporter {
     private static final Pattern EXTRACT_LINES_INVALID = Pattern.compile("\"linesInvalid\":\\s?(\\d+)");
     private static final Pattern IS_NULL_ERROR_RESPONSE = Pattern.compile("\"error\":\\s?null");
 
-    private static final Logger logger = LoggerFactory.getLogger(DynatraceExporterV2.class);
+    private final InternalLogger logger = InternalLoggerFactory.getInstance(DynatraceExporterV2.class);
     private static final Map<String, String> staticDimensions = Collections.singletonMap("dt.metrics.source", "micrometer");
 
     private final String endpoint;

File: implementations/micrometer-registry-dynatrace/src/main/java/io/micrometer/dynatrace/DynatraceMeterRegistry.java
Patch:
@@ -24,8 +24,8 @@
 import io.micrometer.core.ipc.http.HttpSender;
 import io.micrometer.core.ipc.http.HttpUrlConnectionSender;
 import io.micrometer.core.lang.Nullable;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
+import io.micrometer.core.util.internal.logging.InternalLogger;
+import io.micrometer.core.util.internal.logging.InternalLoggerFactory;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -53,7 +53,7 @@
 public class DynatraceMeterRegistry extends StepMeterRegistry {
     private static final ThreadFactory DEFAULT_THREAD_FACTORY = new NamedThreadFactory("dynatrace-metrics-publisher");
     private static final int MAX_MESSAGE_SIZE = 15360; //max message size in bytes that Dynatrace will accept
-    private final Logger logger = LoggerFactory.getLogger(DynatraceMeterRegistry.class);
+    private final InternalLogger logger = InternalLoggerFactory.getInstance(DynatraceMeterRegistry.class);
     private final DynatraceConfig config;
     private final HttpSender httpClient;
 

File: implementations/micrometer-registry-appoptics/src/main/java/io/micrometer/appoptics/AppOpticsMeterRegistry.java
Patch:
@@ -267,7 +267,7 @@ private String write(Meter.Id id, @Nullable String type, String... statistics) {
             // appoptics requires at least one tag for every metric, so we hang something here that may be useful.
             sb.append("\"_type\":\"").append(type).append('"');
             if (!tags.isEmpty())
-                sb.append(",");
+                sb.append(',');
         }
 
         if (!tags.isEmpty()) {

File: implementations/micrometer-registry-elastic/src/main/java/io/micrometer/elastic/ElasticMeterRegistry.java
Patch:
@@ -430,7 +430,7 @@ String writeDocument(Meter meter, Consumer<StringBuilder> consumer) {
         }
 
         consumer.accept(sb);
-        sb.append("}");
+        sb.append('}');
 
         return sb.toString();
     }

File: implementations/micrometer-registry-graphite/src/main/java/io/micrometer/graphite/GraphiteHierarchicalNameMapper.java
Patch:
@@ -43,7 +43,7 @@ public String toHierarchicalName(Meter.Id id, NamingConvention convention) {
         for (String tagKey : tagsAsPrefix) {
             String tagValue = id.getTag(tagKey);
             if (tagValue != null) {
-                hierarchicalName.append(convention.tagValue(tagValue)).append(".");
+                hierarchicalName.append(convention.tagValue(tagValue)).append('.');
             }
         }
         hierarchicalName.append(id.getConventionName(convention));

File: implementations/micrometer-registry-stackdriver/src/main/java/io/micrometer/stackdriver/StackdriverMeterRegistry.java
Patch:
@@ -414,7 +414,7 @@ private void prePopulateVerifiedDescriptors() {
         private String metricType(Meter.Id id, @Nullable String statistic) {
             StringBuilder metricType = new StringBuilder("custom.googleapis.com/").append(getConventionName(id));
             if (statistic != null) {
-                metricType.append("/").append(statistic);
+                metricType.append('/').append(statistic);
             }
             return metricType.toString();
         }

File: micrometer-core/src/main/java/io/micrometer/core/ipc/http/HttpSender.java
Patch:
@@ -107,7 +107,7 @@ public static Builder build(String uri, HttpSender sender) {
 
         @Override
         public String toString() {
-            StringBuilder printed = new StringBuilder(method.toString()).append(" ")
+            StringBuilder printed = new StringBuilder(method.toString()).append(' ')
                     .append(url.toString()).append("\n");
             if (entity.length == 0) {
                 printed.append("<no request body>");

File: implementations/micrometer-registry-dynatrace/src/main/java/io/micrometer/dynatrace/DynatraceApiVersion.java
Patch:
@@ -18,8 +18,11 @@
 
 /**
  * An enum containing valid Dynatrace API versions.
+ *
+ * @author Georg Pirklbauer
  * @since 1.8.0
  */
 public enum DynatraceApiVersion {
     V1,
+    V2
 }

File: implementations/micrometer-registry-dynatrace/src/test/java/io/micrometer/dynatrace/v1/DynatraceExporterV1Test.java
Patch:
@@ -39,7 +39,7 @@
 import static org.assertj.core.api.Assertions.assertThatThrownBy;
 
 /**
- * Tests for {@link DynatraceMeterRegistry}.
+ * Tests for {@link DynatraceExporterV1}.
  *
  * @author Johnny Lim
  */

File: implementations/micrometer-registry-dynatrace/src/main/java/io/micrometer/dynatrace/DynatraceConfig.java
Patch:
@@ -86,7 +86,7 @@ default Validated<?> validate() {
                             if (apiVersionValidation.isValid()) {
                                 return checkAll(this,
                                         config -> {
-                                            if (config.apiVersion() ==  DynatraceApiVersion.V1) {
+                                            if (config.apiVersion() == DynatraceApiVersion.V1) {
                                                 return checkAll(this,
                                                         checkRequired("apiToken", DynatraceConfig::apiToken),
                                                         checkRequired("uri", DynatraceConfig::uri),

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Timer.java
Patch:
@@ -119,6 +119,7 @@ default void record(Duration duration) {
      * @param <T> The return type of the {@link Supplier}.
      * @return The return value of {@code f}.
      */
+    @Nullable
     <T> T record(Supplier<T> f);
 
     /**
@@ -129,6 +130,7 @@ default void record(Duration duration) {
      * @return The return value of {@code f}.
      * @throws Exception Any exception bubbling up from the callable.
      */
+    @Nullable
     <T> T recordCallable(Callable<T> f) throws Exception;
 
     /**

File: implementations/micrometer-registry-dynatrace/src/main/java/io/micrometer/dynatrace/v1/DynatraceNamingConventionV1.java
Patch:
@@ -21,7 +21,6 @@
 import io.micrometer.core.instrument.util.StringUtils;
 import io.micrometer.core.lang.Nullable;
 import io.micrometer.core.util.internal.logging.WarnThenDebugLogger;
-import io.micrometer.dynatrace.DynatraceNamingConvention;
 
 import java.util.regex.Pattern;
 
@@ -34,7 +33,7 @@
  * @since 1.8.0
  */
 public class DynatraceNamingConventionV1 implements NamingConvention {
-    private static final WarnThenDebugLogger logger = new WarnThenDebugLogger(DynatraceNamingConvention.class);
+    private static final WarnThenDebugLogger logger = new WarnThenDebugLogger(DynatraceNamingConventionV1.class);
 
     private static final Pattern NAME_CLEANUP_PATTERN = Pattern.compile("[^\\w._-]");
     private static final Pattern LEADING_NUMERIC_PATTERN = Pattern.compile("[._-]([\\d])+");

File: implementations/micrometer-registry-dynatrace/src/main/java/io/micrometer/dynatrace/v1/DynatraceBatchedPayload.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.dynatrace;
+package io.micrometer.dynatrace.v1;
 
 class DynatraceBatchedPayload {
     final String payload;

File: implementations/micrometer-registry-dynatrace/src/main/java/io/micrometer/dynatrace/v1/DynatraceMetricDefinition.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.dynatrace;
+package io.micrometer.dynatrace.v1;
 
 import io.micrometer.core.instrument.util.StringEscapeUtils;
 import io.micrometer.core.instrument.util.StringUtils;
@@ -32,7 +32,6 @@
  * @author Oriol Barcelona
  */
 class DynatraceMetricDefinition {
-
     private static final int MAX_DISPLAY_NAME = 256;
     private static final int MAX_GROUP_NAME = 256;
     private final String metricId;

File: implementations/micrometer-registry-dynatrace/src/main/java/io/micrometer/dynatrace/v1/DynatraceTimeSeries.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.dynatrace;
+package io.micrometer.dynatrace.v1;
 
 import io.micrometer.core.instrument.util.DoubleFormat;
 import io.micrometer.core.instrument.util.StringEscapeUtils;

File: implementations/micrometer-registry-dynatrace/src/test/java/io/micrometer/dynatrace/v1/DynatraceMetricDefinitionTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.dynatrace;
+package io.micrometer.dynatrace.v1;
 
 import org.junit.jupiter.api.Test;
 

File: implementations/micrometer-registry-dynatrace/src/test/java/io/micrometer/dynatrace/v1/DynatraceTimeSeriesTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.dynatrace;
+package io.micrometer.dynatrace.v1;
 
 import org.junit.jupiter.api.Test;
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jvm/JvmGcMetrics.java
Patch:
@@ -83,7 +83,8 @@ public JvmGcMetrics(Iterable<Tag> tags) {
             String name = mbean.getName();
             if (isAllocationPool(name)) {
                 allocationPoolName = name;
-            } else if (isLongLivedPool(name)) {
+            }
+            if (isLongLivedPool(name)) {
                 longLivedPoolName = name;
             }
         }
@@ -189,6 +190,7 @@ public void bindTo(MeterRegistry registry) {
 
     private boolean isGenerationalGcConfigured() {
         return ManagementFactory.getMemoryPoolMXBeans().stream()
+                .filter(JvmMemory::isHeap)
                 .map(MemoryPoolMXBean::getName)
                 .filter(name -> !name.contains("tenured"))
                 .count() > 1;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jvm/JvmGcMetrics.java
Patch:
@@ -165,7 +165,7 @@ public void bindTo(MeterRegistry registry) {
                     // Some GC implementations such as G1 can reduce the old gen size as part of a minor GC. To track the
                     // live data size we record the value if we see a reduction in the old gen heap size or
                     // after a major GC.
-                    if (oldAfter < oldBefore || isMajorGc(notificationInfo)) {
+                    if (oldAfter < oldBefore || isMajorGc(notificationInfo.getGcName())) {
                         liveDataSize.set(oldAfter);
                         final long oldMaxAfter = after.get(oldGenPoolName).getMax();
                         maxDataSize.set(oldMaxAfter);
@@ -193,8 +193,8 @@ public void bindTo(MeterRegistry registry) {
         }
     }
 
-    private boolean isMajorGc(GarbageCollectionNotificationInfo notificationInfo) {
-        return GcGenerationAge.fromGcName(notificationInfo.getGcName()) == GcGenerationAge.OLD;
+    private boolean isMajorGc(String gcName) {
+        return GcGenerationAge.fromGcName(gcName) == GcGenerationAge.OLD;
     }
 
     private static boolean isManagementExtensionsPresent() {

File: micrometer-core/src/main/java/io/micrometer/core/aop/CountedAspect.java
Patch:
@@ -51,19 +51,18 @@
  * you can tell the {@code CountedAspect} when not to create a {@link Counter}.
  *
  * Here's a theoretic example to disable {@link Counter} creation for Spring controllers:
- *
+ *</p>
  * <pre>
  * &#064;Bean
  * public CountedAspect countedAspect(MeterRegistry meterRegistry) {
  *     return new CountedAspect(meterRegistry, this::skipControllers);
  * }
  *
  * private boolean skipControllers(ProceedingJoinPoint pjp) {
- *     Class<?> targetClass = pjp.getTarget().getClass();
+ *     Class&lt;?&gt; targetClass = pjp.getTarget().getClass();
  *     return targetClass.isAnnotationPresent(RestController.class) || targetClass.isAnnotationPresent(Controller.class);
  * }
  * </pre>
- * </p>
  *
  * @author Ali Dehghani
  * @author Jonatan Ivanov

File: micrometer-core/src/main/java/io/micrometer/core/aop/TimedAspect.java
Patch:
@@ -53,19 +53,18 @@
  * you can tell the {@code TimedAspect} when not to create a {@link Timer}.
  *
  * Here's an example to disable {@link Timer} creation for Spring controllers:
- *
+ *</p>
  * <pre>
  * &#064;Bean
  * public TimedAspect timedAspect(MeterRegistry meterRegistry) {
  *     return new TimedAspect(meterRegistry, this::skipControllers);
  * }
  *
  * private boolean skipControllers(ProceedingJoinPoint pjp) {
- *     Class<?> targetClass = pjp.getTarget().getClass();
+ *     Class&lt;?&gt; targetClass = pjp.getTarget().getClass();
  *     return targetClass.isAnnotationPresent(RestController.class) || targetClass.isAnnotationPresent(Controller.class);
  * }
  * </pre>
- * </p>
  *
  * @author David J. M. Karlsen
  * @author Jon Schneider

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/mongodb/DefaultMongoCommandTagsProvider.java
Patch:
@@ -21,12 +21,12 @@
 import io.micrometer.core.instrument.Tags;
 
 /**
- * Default implementation for {@link MongoMetricsCommandTagsProvider}.
+ * Default implementation for {@link MongoCommandTagsProvider}.
  *
  * @author Chris Bono
  * @since 1.7.0
  */
-public class DefaultMongoMetricsCommandTagsProvider implements MongoMetricsCommandTagsProvider {
+public class DefaultMongoCommandTagsProvider implements MongoCommandTagsProvider {
 
     @Override
     public Iterable<Tag> commandTags(CommandEvent event) {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/mongodb/DefaultMongoConnectionPoolTagsProvider.java
Patch:
@@ -20,12 +20,12 @@
 import io.micrometer.core.instrument.Tags;
 
 /**
- * Default implementation for {@link MongoMetricsConnectionPoolTagsProvider}.
+ * Default implementation for {@link MongoConnectionPoolTagsProvider}.
  *
  * @author Gustavo Monarin
  * @since 1.7.0
  */
-public class DefaultMongoMetricsConnectionPoolTagsProvider implements MongoMetricsConnectionPoolTagsProvider {
+public class DefaultMongoConnectionPoolTagsProvider implements MongoConnectionPoolTagsProvider {
 
     @Override
     public Iterable<Tag> connectionPoolTags(final ConnectionPoolCreatedEvent event) {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/mongodb/MongoCommandTagsProvider.java
Patch:
@@ -25,7 +25,7 @@
  * @since 1.7.0
  */
 @FunctionalInterface
-public interface MongoMetricsCommandTagsProvider {
+public interface MongoCommandTagsProvider {
 
     /**
      * Provides tags to be associated with metrics for the given Mongo command.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/mongodb/MongoConnectionPoolTagsProvider.java
Patch:
@@ -25,7 +25,7 @@
  * @since 1.7.0
  */
 @FunctionalInterface
-public interface MongoMetricsConnectionPoolTagsProvider {
+public interface MongoConnectionPoolTagsProvider {
 
     /**
      * Provides tags to be associated with the Mongo connection metrics for the given {@link ConnectionPoolCreatedEvent event}.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/mongodb/MongoMetricsCommandListener.java
Patch:
@@ -39,15 +39,15 @@ public class MongoMetricsCommandListener implements CommandListener {
 
     private final MeterRegistry registry;
 
-    private final MongoMetricsCommandTagsProvider tagsProvider;
+    private final MongoCommandTagsProvider tagsProvider;
 
     /**
      * Constructs a command listener that uses the default tags provider.
      *
      * @param registry meter registry
      */
     public MongoMetricsCommandListener(MeterRegistry registry) {
-        this(registry, new DefaultMongoMetricsCommandTagsProvider());
+        this(registry, new DefaultMongoCommandTagsProvider());
     }
 
     /**
@@ -57,7 +57,7 @@ public MongoMetricsCommandListener(MeterRegistry registry) {
      * @param tagsProvider provides tags to be associated with metrics for the given Mongo command
      * @since 1.7.0
      */
-    public MongoMetricsCommandListener(MeterRegistry registry, MongoMetricsCommandTagsProvider tagsProvider) {
+    public MongoMetricsCommandListener(MeterRegistry registry, MongoCommandTagsProvider tagsProvider) {
         this.registry = registry;
         this.tagsProvider = tagsProvider;
     }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/mongodb/MongoMetricsConnectionPoolListener.java
Patch:
@@ -52,15 +52,15 @@ public class MongoMetricsConnectionPoolListener implements ConnectionPoolListene
     private final Map<ServerId, List<Meter>> meters = new ConcurrentHashMap<>();
 
     private final MeterRegistry registry;
-    private final MongoMetricsConnectionPoolTagsProvider tagsProvider;
+    private final MongoConnectionPoolTagsProvider tagsProvider;
 
     /**
      * Create a new {@code MongoMetricsConnectionPoolListener}.
      *
      * @param registry registry to use
      */
     public MongoMetricsConnectionPoolListener(MeterRegistry registry) {
-        this(registry, new DefaultMongoMetricsConnectionPoolTagsProvider());
+        this(registry, new DefaultMongoConnectionPoolTagsProvider());
     }
 
     /**
@@ -70,7 +70,7 @@ public MongoMetricsConnectionPoolListener(MeterRegistry registry) {
      * @param tagsProvider tags provider to use
      * @since 1.7.0
      */
-    public MongoMetricsConnectionPoolListener(MeterRegistry registry, MongoMetricsConnectionPoolTagsProvider tagsProvider) {
+    public MongoMetricsConnectionPoolListener(MeterRegistry registry, MongoConnectionPoolTagsProvider tagsProvider) {
         this.registry = registry;
         this.tagsProvider = tagsProvider;
     }

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/mongodb/MongoMetricsCommandListenerTest.java
Patch:
@@ -103,7 +103,7 @@ void shouldCreateFailedCommandMetric() {
 
     @Test
     void shouldCreateSuccessCommandMetricWithCustomSettings() {
-        MongoMetricsCommandTagsProvider tagsProvider = new DefaultMongoMetricsCommandTagsProvider() {
+        MongoCommandTagsProvider tagsProvider = new DefaultMongoCommandTagsProvider() {
             @Override
             public Iterable<Tag> commandTags(CommandEvent event) {
                 return Tags.of(super.commandTags(event)).and(Tag.of("mongoz", "5150"));
@@ -137,7 +137,7 @@ public void clusterOpening(ClusterOpeningEvent event) {
 
     @Test
     void shouldCreateFailedCommandMetricWithCustomSettings() {
-        MongoMetricsCommandTagsProvider tagsProvider = new DefaultMongoMetricsCommandTagsProvider() {
+        MongoCommandTagsProvider tagsProvider = new DefaultMongoCommandTagsProvider() {
             @Override
             public Iterable<Tag> commandTags(CommandEvent event) {
                 return Tags.of(super.commandTags(event)).and(Tag.of("mongoz", "5150"));

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/CaffeineStatsCounter.java
Patch:
@@ -118,7 +118,7 @@ public CaffeineStatsCounter(MeterRegistry registry, String cacheName, Iterable<T
      *
      * @param cache cache to register a gauge for its size
      */
-    public void registerSizeMetric(Cache<?,?> cache) {
+    public void registerSizeMetric(Cache<?, ?> cache) {
         Gauge.builder("cache.size", cache, Cache::estimatedSize).tags(tags)
                 .description("The approximate number of entries in this cache.")
                 .register(registry);

File: implementations/micrometer-registry-health/src/main/java/io/micrometer/health/ServiceLevelObjective.java
Patch:
@@ -50,7 +50,7 @@
 public abstract class ServiceLevelObjective {
     private static final ThreadLocal<DecimalFormat> WHOLE_OR_SHORT_DECIMAL = ThreadLocal.withInitial(() -> {
         DecimalFormatSymbols otherSymbols = new DecimalFormatSymbols(Locale.US);
-        return new DecimalFormat("##0.##",otherSymbols);
+        return new DecimalFormat("##0.##", otherSymbols);
     });
 
     private final String name;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jpa/HibernateMetrics.java
Patch:
@@ -244,9 +244,9 @@ public void bindTo(MeterRegistry registry) {
             Statistics::getQueryCacheMissCount, "result", "miss");
         counter(registry, "hibernate.cache.query.puts", "The number of cacheable queries put in cache",
             Statistics::getQueryCachePutCount);
-        counter(registry,"hibernate.cache.query.plan", "The global number of query plans successfully retrieved from cache",
+        counter(registry, "hibernate.cache.query.plan", "The global number of query plans successfully retrieved from cache",
                 Statistics::getQueryPlanCacheHitCount, "result", "hit");
-        counter(registry,"hibernate.cache.query.plan", "The global number of query plans lookups not found in cache",
+        counter(registry, "hibernate.cache.query.plan", "The global number of query plans lookups not found in cache",
                 Statistics::getQueryPlanCacheMissCount, "result", "miss");
     }
 

File: implementations/micrometer-registry-health/src/main/java/io/micrometer/health/ServiceLevelObjective.java
Patch:
@@ -695,7 +695,7 @@ public final MultipleIndicator combine(BinaryOperator<Boolean> combiner, Service
              *
              * @param combiner combiner to combine {@link ServiceLevelObjective ServiceLevelObjectives}
              * @return combined {@code MultipleIndicator}
-             * @since 1.6.4
+             * @since 1.6.5
              */
             public final MultipleIndicator combine(BinaryOperator<Boolean> combiner) {
                 return new MultipleIndicator(name, tags, failedMessage, objectives, combiner);

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jvm/ExecutorServiceMetrics.java
Patch:
@@ -301,8 +301,10 @@ private ThreadPoolExecutor unwrapThreadPoolExecutor(ExecutorService executor, Cl
             Field e = wrapper.getDeclaredField("e");
             e.setAccessible(true);
             return (ThreadPoolExecutor) e.get(executor);
-        } catch (NoSuchFieldException | IllegalAccessException e) {
+        } catch (NoSuchFieldException | IllegalAccessException | RuntimeException e) {
+            // Cannot use InaccessibleObjectException since it was introduced in Java 9, so catch all RuntimeExceptions instead
             // Do nothing. We simply can't get to the underlying ThreadPoolExecutor.
+            log.info("Cannot unwrap ThreadPoolExecutor for monitoring from {} due to {}: {}", wrapper.getName(), e.getClass().getName(), e.getMessage());
         }
         return null;
     }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/TimeGauge.java
Patch:
@@ -40,6 +40,7 @@ static <T> Builder<T> builder(String name, @Nullable T obj, TimeUnit fUnits, ToD
      *
      * @param name The time gauge's name.
      * @param f    A function that yields a double value for the time gauge.
+     * @param fUnits time unit
      * @return A new time gauge builder.
      * @since 1.7.0
      */

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/CaffeineCacheMetrics.java
Patch:
@@ -27,7 +27,7 @@
  * Collect metrics from Caffeine's {@link com.github.benmanes.caffeine.cache.Cache}. {@link CaffeineStatsCounter} is an
  * alternative that can collect more detailed statistics.
  * <p>
- * Note that `recordStats()` is required to gather non-zero statistics:
+ * Note that {@code recordStats()} is required to gather non-zero statistics:
  * <pre>{@code
  * Cache<String, String> cache = Caffeine.newBuilder().recordStats().build();
  * CaffeineCacheMetrics.monitor(registry, cache, "mycache", "region", "test");

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/CaffeineStatsCounter.java
Patch:
@@ -115,6 +115,8 @@ public CaffeineStatsCounter(MeterRegistry registry, String cacheName, Iterable<T
 
     /**
      * Register a gauge for the size of the given cache.
+     *
+     * @param cache cache to register a gauge for its size
      */
     public void registerSizeMetric(Cache<?,?> cache) {
         Gauge.builder("cache.size", cache, Cache::estimatedSize).tags(tags)

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/grpc/MetricCollectingClientInterceptor.java
Patch:
@@ -37,15 +37,13 @@
  * <b>Usage:</b>
  * </p>
  *
- * <code>
  * <pre>
  * ManagedChannel channel = ManagedChannelBuilder.forAddress("localhost", 8080)
  *     .intercept(new MetricCollectingClientInterceptor(meterRegistry))
  *     .build();
  *
  * channel.newCall(method, options);
  * </pre>
- * </code>
  *
  * @author Daniel Theuke (daniel.theuke@heuboe.de)
  * @since 1.7.0

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/grpc/MetricCollectingServerInterceptor.java
Patch:
@@ -41,15 +41,13 @@
  * <b>Usage:</b>
  * </p>
  *
- * <code>
  * <pre>
  * Server server = ServerBuilder.forPort(8080)
  *         .intercept(new MetricCollectingServerInterceptor(meterRegistry))
  *         .build();
  *
  * server.start()
  * </pre>
- * </code>
  *
  * @author Daniel Theuke (daniel.theuke@heuboe.de)
  * @since 1.7.0

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/MicrometerCollector.java
Patch:
@@ -98,11 +98,11 @@ public List<MetricFamilySamples> describe() {
             case LONG_TASK_TIMER:
                 return Arrays.asList(
                         new MetricFamilySamples(conventionName, Type.HISTOGRAM, help, Collections.emptyList()),
-                        new MetricFamilySamples(conventionName, Type.UNTYPED, help, Collections.emptyList()));
+                        new MetricFamilySamples(conventionName, Type.UNKNOWN, help, Collections.emptyList()));
 
             default:
                 return Collections.singletonList(
-                        new MetricFamilySamples(conventionName, Type.UNTYPED, help, Collections.emptyList()));
+                        new MetricFamilySamples(conventionName, Type.UNKNOWN, help, Collections.emptyList()));
         }
     }
 

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusMeterRegistry.java
Patch:
@@ -248,7 +248,7 @@ protected <T> FunctionCounter newFunctionCounter(Meter.Id id, T obj, ToDoubleFun
 
     @Override
     protected Meter newMeter(Meter.Id id, Meter.Type type, Iterable<Measurement> measurements) {
-        Collector.Type promType = Collector.Type.UNTYPED;
+        Collector.Type promType = Collector.Type.UNKNOWN;
         switch (type) {
             case COUNTER:
                 promType = Collector.Type.COUNTER;

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusMeterRegistry.java
Patch:
@@ -420,7 +420,7 @@ private void applyToCollector(Meter.Id id, Consumer<MicrometerCollector> consume
                     " set of tag keys. There is already an existing meter named '" + id.getName() + "' containing tag keys [" +
                     String.join(", ", collectorMap.get(getConventionName(id)).getTagKeys()) + "]. The meter you are attempting to register" +
                     " has keys [" + getConventionTags(id).stream().map(Tag::getKey).collect(joining(", ")) + "].");
-            return null;
+            return existingCollector;
         });
     }
 

File: implementations/micrometer-registry-datadog/src/main/java/io/micrometer/datadog/DatadogMeterRegistry.java
Patch:
@@ -188,7 +188,7 @@ private Stream<String> writeSummary(DistributionSummary summary, Map<String, Dat
         metrics.add(writeMetric(id, "avg", wallTime, summary.mean(), Statistic.VALUE, null));
         metrics.add(writeMetric(id, "max", wallTime, summary.max(), Statistic.MAX, null));
 
-        addToMetadataList(metadata, id, "sum", Statistic.TOTAL_TIME, null);
+        addToMetadataList(metadata, id, "sum", Statistic.TOTAL, null);
         addToMetadataList(metadata, id, "count", Statistic.COUNT, "occurrence");
         addToMetadataList(metadata, id, "avg", Statistic.VALUE, null);
         addToMetadataList(metadata, id, "max", Statistic.MAX, null);

File: implementations/micrometer-registry-statsd/src/test/java/io/micrometer/statsd/internal/BufferingFluxTest.java
Patch:
@@ -66,7 +66,7 @@ void bufferMultipleStrings() {
                 "fourteen bytes"
         );
 
-        Flux<String> buffered = BufferingFlux.create(source, "\n", 27, 1000);
+        Flux<String> buffered = BufferingFlux.create(source, "\n", 27, Long.MAX_VALUE);
 
         StepVerifier.create(buffered)
                 .expectNext("twelve bytes\nfourteen bytes\n")

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/logging/LogbackMetricsTest.java
Patch:
@@ -79,13 +79,12 @@ void isLevelEnabledDoesntContributeToCounts() {
 
     @Issue("#411")
     @Test
-    void ignoringLogMetricsInsideCounters() {
+    void ignoringMetricsInsideCounters() {
         registry = new LoggingCounterMeterRegistry();
         try (LogbackMetrics logbackMetrics = new LogbackMetrics()) {
             logbackMetrics.bindTo(registry);
             registry.counter("my.counter").increment();
         }
-        assertThat(registry.get("logback.events").tags("level", "info").counter().count()).isZero();
     }
 
     @Issue("#421")

File: micrometer-core/src/test/java/io/micrometer/core/ipc/http/ReactorNettySenderTests.java
Patch:
@@ -36,9 +36,9 @@ class ReactorNettySenderTests {
     @Test
     void customReadTimeoutHonored(@WiremockResolver.Wiremock WireMockServer server) throws Throwable {
         this.httpSender = new ReactorNettySender(HttpClient.create()
-                .doOnConnected(connection ->
+                .tcpConfiguration(tcpClient -> tcpClient.doOnConnected(connection ->
                         connection.addHandlerLast(new ReadTimeoutHandler(1, TimeUnit.MILLISECONDS))
-                                .addHandlerLast(new WriteTimeoutHandler(1, TimeUnit.MILLISECONDS))));
+                                .addHandlerLast(new WriteTimeoutHandler(1, TimeUnit.MILLISECONDS)))));
         server.stubFor(any(urlEqualTo("/metrics")).willReturn(ok().withFixedDelay(5)));
 
         assertThatExceptionOfType(ReadTimeoutException.class)

File: implementations/micrometer-registry-statsd/src/test/java/io/micrometer/statsd/internal/BufferingFluxTest.java
Patch:
@@ -66,7 +66,7 @@ void bufferMultipleStrings() {
                 "fourteen bytes"
         );
 
-        Flux<String> buffered = BufferingFlux.create(source, "\n", 27, 1000);
+        Flux<String> buffered = BufferingFlux.create(source, "\n", 27, Long.MAX_VALUE);
 
         StepVerifier.create(buffered)
                 .expectNext("twelve bytes\nfourteen bytes\n")

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/logging/LogbackMetricsTest.java
Patch:
@@ -79,13 +79,12 @@ void isLevelEnabledDoesntContributeToCounts() {
 
     @Issue("#411")
     @Test
-    void ignoringLogMetricsInsideCounters() {
+    void ignoringMetricsInsideCounters() {
         registry = new LoggingCounterMeterRegistry();
         try (LogbackMetrics logbackMetrics = new LogbackMetrics()) {
             logbackMetrics.bindTo(registry);
             registry.counter("my.counter").increment();
         }
-        assertThat(registry.get("logback.events").tags("level", "info").counter().count()).isZero();
     }
 
     @Issue("#421")

File: micrometer-core/src/test/java/io/micrometer/core/ipc/http/ReactorNettySenderTests.java
Patch:
@@ -36,9 +36,9 @@ class ReactorNettySenderTests {
     @Test
     void customReadTimeoutHonored(@WiremockResolver.Wiremock WireMockServer server) throws Throwable {
         this.httpSender = new ReactorNettySender(HttpClient.create()
-                .doOnConnected(connection ->
+                .tcpConfiguration(tcpClient -> tcpClient.doOnConnected(connection ->
                         connection.addHandlerLast(new ReadTimeoutHandler(1, TimeUnit.MILLISECONDS))
-                                .addHandlerLast(new WriteTimeoutHandler(1, TimeUnit.MILLISECONDS))));
+                                .addHandlerLast(new WriteTimeoutHandler(1, TimeUnit.MILLISECONDS)))));
         server.stubFor(any(urlEqualTo("/metrics")).willReturn(ok().withFixedDelay(5)));
 
         assertThatExceptionOfType(ReadTimeoutException.class)

File: implementations/micrometer-registry-statsd/src/test/java/io/micrometer/statsd/internal/BufferingFluxTest.java
Patch:
@@ -66,7 +66,7 @@ void bufferMultipleStrings() {
                 "fourteen bytes"
         );
 
-        Flux<String> buffered = BufferingFlux.create(source, "\n", 27, Long.MAX_VALUE);
+        Flux<String> buffered = BufferingFlux.create(source, "\n", 27, 1000);
 
         StepVerifier.create(buffered)
                 .expectNext("twelve bytes\nfourteen bytes\n")

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/logging/LogbackMetricsTest.java
Patch:
@@ -79,12 +79,13 @@ void isLevelEnabledDoesntContributeToCounts() {
 
     @Issue("#411")
     @Test
-    void ignoringMetricsInsideCounters() {
+    void ignoringLogMetricsInsideCounters() {
         registry = new LoggingCounterMeterRegistry();
         try (LogbackMetrics logbackMetrics = new LogbackMetrics()) {
             logbackMetrics.bindTo(registry);
             registry.counter("my.counter").increment();
         }
+        assertThat(registry.get("logback.events").tags("level", "info").counter().count()).isZero();
     }
 
     @Issue("#421")

File: micrometer-core/src/test/java/io/micrometer/core/ipc/http/ReactorNettySenderTests.java
Patch:
@@ -36,9 +36,9 @@ class ReactorNettySenderTests {
     @Test
     void customReadTimeoutHonored(@WiremockResolver.Wiremock WireMockServer server) throws Throwable {
         this.httpSender = new ReactorNettySender(HttpClient.create()
-                .tcpConfiguration(tcpClient -> tcpClient.doOnConnected(connection ->
+                .doOnConnected(connection ->
                         connection.addHandlerLast(new ReadTimeoutHandler(1, TimeUnit.MILLISECONDS))
-                                .addHandlerLast(new WriteTimeoutHandler(1, TimeUnit.MILLISECONDS)))));
+                                .addHandlerLast(new WriteTimeoutHandler(1, TimeUnit.MILLISECONDS))));
         server.stubFor(any(urlEqualTo("/metrics")).willReturn(ok().withFixedDelay(5)));
 
         assertThatExceptionOfType(ReadTimeoutException.class)

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusMeterRegistry.java
Patch:
@@ -433,8 +433,9 @@ protected DistributionStatisticConfig defaultHistogramConfig() {
     }
 
     /**
-     * For use with {@link MeterRegistry.Config#onMeterRegistrationFailed(BiConsumer)} when you want meters with the same name
-     * but different tags to cause an unchecked exception.
+     * For use with {@link io.micrometer.core.instrument.MeterRegistry.Config#onMeterRegistrationFailed(BiConsumer)
+     * MeterRegistry.Config#onMeterRegistrationFailed(BiConsumer)} when you want meters with the same name but different
+     * tags to cause an unchecked exception.
      *
      * @return This registry
      * @since 1.6.0

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdMeterRegistry.java
Patch:
@@ -95,8 +95,8 @@ public StatsdMeterRegistry(StatsdConfig config, Clock clock) {
     }
 
     /**
-     * Use this constructor for Etsy-flavored StatsD when you need to influence the way Micrometer's dimensional {@link Meter.Id}
-     * is written to a flat hierarchical name.
+     * Use this constructor for Etsy-flavored StatsD when you need to influence the way Micrometer's dimensional
+     * {@link io.micrometer.core.instrument.Meter.Id Meter.Id} is written to a flat hierarchical name.
      *
      * @param config     The StatsD configuration.
      * @param nameMapper A strategy for flattening dimensional IDs.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/httpcomponents/DefaultUriMapper.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.function.Function;
 
 /**
- * Extracts the URI pattern from the predefined request header, {@value URI_PATTERN_HEADER} if available.
+ * Extracts the URI pattern from the predefined request header, {@value DefaultUriMapper#URI_PATTERN_HEADER} if available.
  *
  * @author Benjamin Hubert
  * @since 1.4.0

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/okhttp3/OkHttpMetricsEventListener.java
Patch:
@@ -42,8 +42,9 @@
  * {@link EventListener} for collecting metrics from {@link OkHttpClient}.
  * <p>
  * {@literal uri} tag is usually limited to URI patterns to mitigate tag cardinality explosion but {@link OkHttpClient}
- * doesn't provide URI patterns. We provide {@value URI_PATTERN} header to support {@literal uri} tag or you can
- * configure a {@link Builder#uriMapper(Function) URI mapper} to provide your own tag values for {@literal uri} tag.
+ * doesn't provide URI patterns. We provide {@value OkHttpMetricsEventListener#URI_PATTERN} header to support
+ * {@literal uri} tag or you can configure a {@link Builder#uriMapper(Function) URI mapper} to provide your own tag
+ * values for {@literal uri} tag.
  *
  * @author Bjarte S. Karlsen
  * @author Jon Schneider

File: micrometer-core/src/main/java/io/micrometer/core/instrument/distribution/TimeWindowFixedBoundaryHistogram.java
Patch:
@@ -112,7 +112,7 @@ void outputSummary(PrintStream printStream, double bucketScaling) {
     class FixedBoundaryHistogram {
         /**
          * For recording efficiency, this is a normal histogram. We turn these values into
-         * cumulative counts only on calls to {@link #countAtValue(long)}.
+         * cumulative counts only on calls to {@link #countAtValue(double)}.
          */
         final AtomicLongArray values;
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/util/JsonUtils.java
Patch:
@@ -74,8 +74,8 @@ public static String prettyPrint(String unformattedJsonString) {
     /**
      * Print a new line with indention at the beginning of the new line.
      *
-     * @param indentLevel
-     * @param stringBuilder
+     * @param indentLevel The indention level to use.
+     * @param stringBuilder The string builder to append it to.
      */
     private static void appendIndentedNewLine(int indentLevel, StringBuilder stringBuilder) {
         stringBuilder.append("\n");

File: implementations/micrometer-registry-elastic/src/main/java/io/micrometer/elastic/ElasticConfig.java
Patch:
@@ -68,12 +68,12 @@ default String host() {
 
     /**
      * The index name to write metrics to.
-     * Default is: "metrics"
+     * Default is: "micrometer-metrics"
      *
      * @return index name
      */
     default String index() {
-        return getString(this, "index").orElse("metrics");
+        return getString(this, "index").orElse("micrometer-metrics");
     }
 
     /**

File: implementations/micrometer-registry-elastic/src/test/java/io/micrometer/elastic/AbstractElasticsearchMeterRegistryIntegrationTest.java
Patch:
@@ -113,7 +113,7 @@ private String sendHttpGet(String uri) throws Throwable {
     }
 
     private static String getDockerImageName(String version) {
-        return "docker.elastic.co/elasticsearch/elasticsearch-oss:" + version;
+        return "docker.elastic.co/elasticsearch/elasticsearch:" + version;
     }
 
 }

File: implementations/micrometer-registry-elastic/src/test/java/io/micrometer/elastic/ElasticsearchMeterRegistryElasticsearch6IntegrationTest.java
Patch:
@@ -25,7 +25,7 @@ class ElasticsearchMeterRegistryElasticsearch6IntegrationTest
 
     @Override
     protected String getVersion() {
-        return "6.8.6";
+        return "6.8.12";
     }
 
 }

File: implementations/micrometer-registry-elastic/src/test/java/io/micrometer/elastic/ElasticsearchMeterRegistryElasticsearch7IntegrationTest.java
Patch:
@@ -25,7 +25,7 @@ class ElasticsearchMeterRegistryElasticsearch7IntegrationTest
 
     @Override
     protected String getVersion() {
-        return "7.6.0";
+        return "7.9.2";
     }
 
     @Override

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/jpa/HibernateMetricsTest.java
Patch:
@@ -61,7 +61,7 @@ private static SessionFactory createMockSessionFactory(boolean statsEnabled) {
         SecondLevelCacheStatistics secondLevelCacheStatistics = mock(SecondLevelCacheStatistics.class, defaultAnswer);
         doReturn(statsEnabled).when(stats).isStatisticsEnabled();
         doReturn(new String[]{"region1", "region2"}).when(stats).getSecondLevelCacheRegionNames();
-        doReturn(secondLevelCacheStatistics).when(stats).getSecondLevelCacheStatistics(anyString());
+        doReturn(secondLevelCacheStatistics).when(stats).getDomainDataRegionStatistics(anyString());
         when(sf.getStatistics()).thenReturn(stats);
         return sf;
     }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/kafka/KafkaMetrics.java
Patch:
@@ -36,6 +36,7 @@
 
 import io.micrometer.core.util.internal.logging.InternalLogger;
 import io.micrometer.core.util.internal.logging.InternalLoggerFactory;
+import io.micrometer.core.util.internal.logging.WarnThenDebugLogger;
 import org.apache.kafka.common.Metric;
 import org.apache.kafka.common.MetricName;
 
@@ -54,6 +55,7 @@
 @NonNullFields
 class KafkaMetrics implements MeterBinder, AutoCloseable {
     private final static InternalLogger log = InternalLoggerFactory.getInstance(KafkaMetrics.class);
+    private final static WarnThenDebugLogger warnThenDebugLogger = new WarnThenDebugLogger(KafkaMetrics.class);
 
     static final String METRIC_NAME_PREFIX = "kafka.";
     static final String METRIC_GROUP_APP_INFO = "app-info";
@@ -166,7 +168,7 @@ else if (tags.size() == meterTagsWithCommonTags.size())
                 catch (Exception ex) {
                     String message = ex.getMessage();
                     if (message != null && message.contains("Prometheus requires")) {
-                        log.info("Failed to bind meter: " + meterName + " " + tags
+                        warnThenDebugLogger.log("Failed to bind meter: " + meterName + " " + tags
                                 + ". However, this could happen and might be restored in the next refresh.");
                     }
                     else {

File: implementations/micrometer-registry-elastic/src/main/java/io/micrometer/elastic/ElasticMeterRegistry.java
Patch:
@@ -120,7 +120,7 @@ public class ElasticMeterRegistry extends StepMeterRegistry {
     @Nullable
     private volatile Integer majorVersion;
 
-    private volatile boolean checkedForIndexTemplate = false;
+    private volatile boolean checkedForIndexTemplate;
 
     @SuppressWarnings("deprecation")
     public ElasticMeterRegistry(ElasticConfig config, Clock clock) {

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdCounter.java
Patch:
@@ -29,7 +29,7 @@ public class StatsdCounter extends AbstractMeter implements Counter {
     private final StatsdLineBuilder lineBuilder;
     private final FluxSink<String> sink;
     private DoubleAdder count = new DoubleAdder();
-    private volatile boolean shutdown = false;
+    private volatile boolean shutdown;
 
     StatsdCounter(Id id, StatsdLineBuilder lineBuilder, FluxSink<String> sink) {
         super(id);

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdDistributionSummary.java
Patch:
@@ -33,7 +33,7 @@ public class StatsdDistributionSummary extends AbstractDistributionSummary {
     private final TimeWindowMax max;
     private final StatsdLineBuilder lineBuilder;
     private final FluxSink<String> sink;
-    private volatile boolean shutdown = false;
+    private volatile boolean shutdown;
 
     StatsdDistributionSummary(Meter.Id id, StatsdLineBuilder lineBuilder, FluxSink<String> sink, Clock clock,
                               DistributionStatisticConfig distributionStatisticConfig, double scale) {

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdTimer.java
Patch:
@@ -33,7 +33,7 @@ public class StatsdTimer extends AbstractTimer {
     private final StatsdLineBuilder lineBuilder;
     private final FluxSink<String> sink;
     private StepDouble max;
-    private volatile boolean shutdown = false;
+    private volatile boolean shutdown;
 
     StatsdTimer(Id id, StatsdLineBuilder lineBuilder, FluxSink<String> sink, Clock clock,
                 DistributionStatisticConfig distributionStatisticConfig, PauseDetector pauseDetector, TimeUnit baseTimeUnit, long stepMillis) {

File: implementations/micrometer-registry-statsd/src/test/java/io/micrometer/statsd/StatsdMeterRegistryPublishTest.java
Patch:
@@ -57,7 +57,7 @@ class StatsdMeterRegistryPublishTest {
     CountDownLatch serverLatch;
     AtomicInteger serverMetricReadCount = new AtomicInteger();
 
-    volatile boolean bound = false;
+    volatile boolean bound;
 
     @AfterEach
     void cleanUp() {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/cumulative/CumulativeFunctionTimer.java
Patch:
@@ -38,8 +38,8 @@ public class CumulativeFunctionTimer<T> implements FunctionTimer {
     private final TimeUnit totalTimeFunctionUnit;
     private final TimeUnit baseTimeUnit;
 
-    private volatile long lastCount = 0;
-    private volatile double lastTime = 0.0;
+    private volatile long lastCount;
+    private volatile double lastTime;
 
     public CumulativeFunctionTimer(Id id, T obj, ToLongFunction<T> countFunction, ToDoubleFunction<T> totalTimeFunction,
                                    TimeUnit totalTimeFunctionUnit, TimeUnit baseTimeUnit) {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/distribution/TimeWindowMax.java
Patch:
@@ -40,7 +40,7 @@ public class TimeWindowMax {
     private volatile long lastRotateTimestampMillis;
 
     @SuppressWarnings({"unused", "FieldCanBeLocal"})
-    private volatile int rotating = 0; // 0 - not rotating, 1 - rotating
+    private volatile int rotating; // 0 - not rotating, 1 - rotating
 
     @SuppressWarnings("ConstantConditions")
     public TimeWindowMax(Clock clock, DistributionStatisticConfig config) {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/distribution/TimeWindowSum.java
Patch:
@@ -35,7 +35,7 @@ public class TimeWindowSum {
     private volatile long lastRotateTimestampMillis;
 
     @SuppressWarnings({"unused", "FieldCanBeLocal"})
-    private volatile int rotating = 0; // 0 - not rotating, 1 - rotating
+    private volatile int rotating; // 0 - not rotating, 1 - rotating
 
     public TimeWindowSum(int bufferLength, Duration expiry) {
         this.durationBetweenRotatesMillis = expiry.toMillis();

File: micrometer-core/src/main/java/io/micrometer/core/instrument/dropwizard/DropwizardFunctionTimer.java
Patch:
@@ -46,7 +46,7 @@ public class DropwizardFunctionTimer<T> extends AbstractMeter implements Functio
     private final DropwizardRate rate;
     private final Timer dropwizardMeter;
     private final TimeUnit registryBaseTimeUnit;
-    private volatile double lastTime = 0.0;
+    private volatile double lastTime;
 
     DropwizardFunctionTimer(Meter.Id id, Clock clock,
                             T obj, ToLongFunction<T> countFunction,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/internal/DefaultLongTaskTimer.java
Patch:
@@ -220,7 +220,7 @@ public HistogramSnapshot takeSnapshot() {
 
     class SampleImpl extends Sample {
         private final long startTime;
-        private volatile boolean stopped = false;
+        private volatile boolean stopped;
 
         private SampleImpl() {
             this.startTime = clock.monotonicTime();

File: micrometer-core/src/main/java/io/micrometer/core/instrument/step/StepFunctionTimer.java
Patch:
@@ -43,8 +43,8 @@ public class StepFunctionTimer<T> implements FunctionTimer {
     private final Clock clock;
     private volatile long lastUpdateTime = (long) (-2e6);
 
-    private volatile long lastCount = 0;
-    private volatile double lastTime = 0.0;
+    private volatile long lastCount;
+    private volatile double lastTime;
 
     private final LongAdder count = new LongAdder();
     private final DoubleAdder total = new DoubleAdder();

File: implementations/micrometer-registry-prometheus/src/test/java/io/micrometer/prometheus/PrometheusMeterRegistryTest.java
Patch:
@@ -83,7 +83,7 @@ void meterRegistrationFailedListenerCalledOnSameNameDifferentTags() throws Inter
 
     @Test
     void baseUnitMakesItToScrape() {
-        AtomicInteger n = new AtomicInteger(0);
+        AtomicInteger n = new AtomicInteger();
         Gauge.builder("gauge", n, AtomicInteger::get).tags("a", "b").baseUnit(BaseUnits.BYTES).register(registry);
         assertThat(registry.scrape()).contains("gauge_bytes");
     }
@@ -443,7 +443,7 @@ void summaryQuantilesAreBasedOffOfOnlyRecentSamples() {
     @Issue("#1883")
     @Test
     void namesToCollectors() {
-        AtomicInteger n = new AtomicInteger(0);
+        AtomicInteger n = new AtomicInteger();
         Gauge.builder("gauge", n, AtomicInteger::get).tags("a", "b").baseUnit(BaseUnits.BYTES).register(registry);
         assertThat(prometheusRegistry).extracting("namesToCollectors").extracting("gauge_bytes").isNotNull();
     }

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdMeterRegistry.java
Patch:
@@ -76,7 +76,7 @@ public class StatsdMeterRegistry extends MeterRegistry {
     private final StatsdConfig statsdConfig;
     private final HierarchicalNameMapper nameMapper;
     private final Map<Meter.Id, StatsdPollable> pollableMeters = new ConcurrentHashMap<>();
-    private final AtomicBoolean started = new AtomicBoolean(false);
+    private final AtomicBoolean started = new AtomicBoolean();
     DirectProcessor<String> processor = DirectProcessor.create();
     FluxSink<String> fluxSink = new NoopFluxSink();
     Disposable.Swap statsdConnection = Disposables.swap();

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/internal/BufferingFlux.java
Patch:
@@ -43,8 +43,8 @@ private BufferingFlux() {
     public static Flux<String> create(final Flux<String> source, final String delimiter, final int maxByteArraySize, final long maxMillisecondsBetweenEmits) {
         return Flux.defer(() -> {
             final int delimiterSize = delimiter.getBytes().length;
-            final AtomicInteger byteSize = new AtomicInteger(0);
-            final AtomicLong lastTime = new AtomicLong(0);
+            final AtomicInteger byteSize = new AtomicInteger();
+            final AtomicLong lastTime = new AtomicLong();
 
             final DirectProcessor<Void> intervalEnd = DirectProcessor.create();
 

File: implementations/micrometer-registry-statsd/src/test/java/io/micrometer/statsd/StatsdGaugeTest.java
Patch:
@@ -28,7 +28,7 @@ class StatsdGaugeTest {
 
     @Test
     void shouldAlwaysPublishValue() {
-        AtomicInteger lines = new AtomicInteger(0);
+        AtomicInteger lines = new AtomicInteger();
         MeterRegistry registry = StatsdMeterRegistry.builder(StatsdConfig.DEFAULT)
                 .lineSink(l -> lines.incrementAndGet())
                 .build();
@@ -44,7 +44,7 @@ void shouldAlwaysPublishValue() {
 
     @Test
     void shouldOnlyPublishValueWhenValueChanges() {
-        AtomicInteger lines = new AtomicInteger(0);
+        AtomicInteger lines = new AtomicInteger();
         MeterRegistry registry = StatsdMeterRegistry
                 .builder(new StatsdConfig() {
                     @Override

File: implementations/micrometer-registry-statsd/src/test/java/io/micrometer/statsd/StatsdMeterRegistryTest.java
Patch:
@@ -384,7 +384,7 @@ void interactWithStoppedRegistry() {
     @EnumSource(StatsdFlavor.class)
     @Issue("#600")
     void memoryPerformanceOfNamingConventionInHotLoops(StatsdFlavor flavor) {
-        AtomicInteger namingConventionUses = new AtomicInteger(0);
+        AtomicInteger namingConventionUses = new AtomicInteger();
 
         registry = new StatsdMeterRegistry(configWithFlavor(flavor), clock);
 
@@ -425,7 +425,7 @@ public String tagValue(String value) {
     @Test
     @Issue("#778")
     void doNotPublishNanOrInfiniteGaugeValues() {
-        AtomicInteger lineCount = new AtomicInteger(0);
+        AtomicInteger lineCount = new AtomicInteger();
         registry = StatsdMeterRegistry.builder(StatsdConfig.DEFAULT)
                 .lineSink(l -> lineCount.incrementAndGet())
                 .build();

File: micrometer-core/src/main/java/io/micrometer/core/instrument/MeterRegistry.java
Patch:
@@ -96,7 +96,7 @@ public abstract class MeterRegistry {
     // Guarded by meterMapLock for both reads and writes
     private final Map<Id, Set<Id>> syntheticAssociations = new HashMap<>();
 
-    private final AtomicBoolean closed = new AtomicBoolean(false);
+    private final AtomicBoolean closed = new AtomicBoolean();
     private PauseDetector pauseDetector = new NoPauseDetector();
 
     /**

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jvm/JvmGcMetrics.java
Patch:
@@ -100,7 +100,7 @@ public void bindTo(MeterRegistry registry) {
             .baseUnit(BaseUnits.BYTES)
             .register(registry);
 
-        AtomicLong liveDataSize = new AtomicLong(0L);
+        AtomicLong liveDataSize = new AtomicLong();
 
         Gauge.builder("jvm.gc.live.data.size", liveDataSize, AtomicLong::get)
             .tags(tags)
@@ -119,7 +119,7 @@ public void bindTo(MeterRegistry registry) {
             .register(registry);
 
         // start watching for GC notifications
-        final AtomicLong youngGenSizeAfter = new AtomicLong(0L);
+        final AtomicLong youngGenSizeAfter = new AtomicLong();
 
         for (GarbageCollectorMXBean mbean : ManagementFactory.getGarbageCollectorMXBeans()) {
             if (!(mbean instanceof NotificationEmitter)) {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeMeterRegistry.java
Patch:
@@ -38,14 +38,14 @@
  * @author Johnny Lim
  */
 public class CompositeMeterRegistry extends MeterRegistry {
-    private final AtomicBoolean registriesLock = new AtomicBoolean(false);
+    private final AtomicBoolean registriesLock = new AtomicBoolean();
     private final Set<MeterRegistry> registries = Collections.newSetFromMap(new IdentityHashMap<>());
     private final Set<MeterRegistry> unmodifiableRegistries = Collections.unmodifiableSet(registries);
 
     // VisibleForTesting
     volatile Set<MeterRegistry> nonCompositeDescendants = Collections.emptySet();
 
-    private final AtomicBoolean parentLock = new AtomicBoolean(false);
+    private final AtomicBoolean parentLock = new AtomicBoolean();
     private volatile Set<CompositeMeterRegistry> parents = Collections.newSetFromMap(new IdentityHashMap<>());
 
     public CompositeMeterRegistry() {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/distribution/FixedBoundaryVictoriaMetricsHistogram.java
Patch:
@@ -95,9 +95,9 @@ public class FixedBoundaryVictoriaMetricsHistogram implements Histogram {
     final DoubleAdder sum;
 
     public FixedBoundaryVictoriaMetricsHistogram() {
-        this.zeros = new AtomicLong(0);
-        this.lower = new AtomicLong(0);
-        this.upper = new AtomicLong(0);
+        this.zeros = new AtomicLong();
+        this.lower = new AtomicLong();
+        this.upper = new AtomicLong();
         this.sum = new DoubleAdder();
 
         this.values = new AtomicReferenceArray<>(BUCKETS_COUNT);

File: micrometer-core/src/main/java/io/micrometer/core/instrument/dropwizard/DropwizardFunctionCounter.java
Patch:
@@ -30,7 +30,7 @@
 public class DropwizardFunctionCounter<T> extends AbstractMeter implements FunctionCounter {
     private final WeakReference<T> ref;
     private final ToDoubleFunction<T> f;
-    private final AtomicLong last = new AtomicLong(0);
+    private final AtomicLong last = new AtomicLong();
     private final DropwizardRate rate;
     private final Meter dropwizardMeter;
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/dropwizard/DropwizardFunctionTimer.java
Patch:
@@ -42,7 +42,7 @@ public class DropwizardFunctionTimer<T> extends AbstractMeter implements Functio
     private final ToDoubleFunction<T> totalTimeFunction;
     private final TimeUnit totalTimeFunctionUnit;
 
-    private final AtomicLong lastCount = new AtomicLong(0);
+    private final AtomicLong lastCount = new AtomicLong();
     private final DropwizardRate rate;
     private final Timer dropwizardMeter;
     private final TimeUnit registryBaseTimeUnit;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/dropwizard/DropwizardTimer.java
Patch:
@@ -28,7 +28,7 @@
 
 public class DropwizardTimer extends AbstractTimer {
     private final Timer impl;
-    private final AtomicLong totalTime = new AtomicLong(0);
+    private final AtomicLong totalTime = new AtomicLong();
     private final TimeWindowMax max;
 
     DropwizardTimer(Id id, Timer impl, Clock clock, DistributionStatisticConfig distributionStatisticConfig, PauseDetector pauseDetector) {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/internal/CumulativeHistogramLongTaskTimer.java
Patch:
@@ -44,7 +44,7 @@ public CumulativeHistogramLongTaskTimer(Id id, Clock clock, TimeUnit baseTimeUni
     public HistogramSnapshot takeSnapshot() {
         HistogramSnapshot snapshot = super.takeSnapshot();
 
-        AtomicInteger i = new AtomicInteger(0);
+        AtomicInteger i = new AtomicInteger();
 
         snapshot = new HistogramSnapshot(
                 snapshot.count(),

File: micrometer-core/src/main/java/io/micrometer/core/instrument/internal/OnlyOnceLoggingDenyMeterFilter.java
Patch:
@@ -36,7 +36,7 @@ public final class OnlyOnceLoggingDenyMeterFilter implements MeterFilter {
 
     private static final InternalLogger logger = InternalLoggerFactory.getInstance(OnlyOnceLoggingDenyMeterFilter.class);
 
-    private final AtomicBoolean alreadyWarned = new AtomicBoolean(false);
+    private final AtomicBoolean alreadyWarned = new AtomicBoolean();
 
     private final Supplier<String> message;
 

File: micrometer-core/src/test/java/io/micrometer/core/instrument/MeterFilterTest.java
Patch:
@@ -108,7 +108,7 @@ void maximumAllowableMetrics() {
 
     @Test
     void maximumAllowableTags() {
-        AtomicInteger n = new AtomicInteger(0);
+        AtomicInteger n = new AtomicInteger();
 
         MeterFilter filter = MeterFilter.maximumAllowableTags("name", "k", 2, new MeterFilter() {
             @Override

File: micrometer-core/src/test/java/io/micrometer/core/instrument/TimeGaugeTest.java
Patch:
@@ -28,7 +28,7 @@ class TimeGaugeTest {
     void hasBaseTimeUnit() {
         MeterRegistry registry = new SimpleMeterRegistry();
 
-        AtomicLong n = new AtomicLong(0);
+        AtomicLong n = new AtomicLong();
         TimeGauge g = registry.more().timeGauge("my.time.gauge", Tags.empty(), n, TimeUnit.SECONDS, AtomicLong::doubleValue);
 
         assertThat(g.getId().getBaseUnit()).isEqualTo("seconds");

File: micrometer-core/src/test/java/io/micrometer/core/instrument/composite/CompositeMeterRegistryTest.java
Patch:
@@ -71,7 +71,7 @@ void baseUnitsPreserved() {
 
         Counter.builder("counter").baseUnit(BaseUnits.BYTES).register(composite);
         DistributionSummary.builder("summary").baseUnit(BaseUnits.BYTES).register(composite);
-        Gauge.builder("gauge", new AtomicInteger(0), AtomicInteger::get).baseUnit(BaseUnits.BYTES).register(composite);
+        Gauge.builder("gauge", new AtomicInteger(), AtomicInteger::get).baseUnit(BaseUnits.BYTES).register(composite);
 
         assertThat(simple.get("counter").counter().getId().getBaseUnit()).isEqualTo(BaseUnits.BYTES);
         assertThat(simple.get("summary").summary().getId().getBaseUnit()).isEqualTo(BaseUnits.BYTES);

File: micrometer-core/src/test/java/io/micrometer/core/instrument/step/StepMeterRegistryTest.java
Patch:
@@ -38,7 +38,7 @@
  * @author Johnny Lim
  */
 class StepMeterRegistryTest {
-    private AtomicInteger publishes = new AtomicInteger(0);
+    private AtomicInteger publishes = new AtomicInteger();
     private MockClock clock = new MockClock();
 
     private StepRegistryConfig config = new StepRegistryConfig() {

File: micrometer-test/src/main/java/io/micrometer/core/tck/CounterTest.java
Patch:
@@ -62,7 +62,7 @@ default void incrementAmount(MeterRegistry registry) {
     @Test
     @DisplayName("function-tracking counter increments by change in a monotonically increasing function when observed")
     default void functionTrackingCounter(MeterRegistry registry) {
-        AtomicLong n = new AtomicLong(0);
+        AtomicLong n = new AtomicLong();
         registry.more().counter("tracking", emptyList(), n);
         n.incrementAndGet();
 

File: micrometer-test/src/main/java/io/micrometer/core/tck/GaugeTest.java
Patch:
@@ -31,7 +31,7 @@ interface GaugeTest {
     @Test
     @DisplayName("gauges attached to a number are updated when their values are observed")
     default void numericGauge(MeterRegistry registry) {
-        AtomicInteger n = registry.gauge("my.gauge", new AtomicInteger(0));
+        AtomicInteger n = registry.gauge("my.gauge", new AtomicInteger());
         n.set(1);
 
         Gauge g = registry.get("my.gauge").gauge();

File: samples/micrometer-samples-core/src/main/java/io/micrometer/core/samples/CounterSample.java
Patch:
@@ -32,7 +32,7 @@ public static void main(String[] args) {
         MeterRegistry registry = SampleConfig.myMonitoringSystem();
         Counter counter = registry.counter("counter", "method", "actual");
 
-        AtomicInteger n = new AtomicInteger(0);
+        AtomicInteger n = new AtomicInteger();
         registry.more().counter("counter", Tags.of("method", "function"), n);
 
         RandomEngine r = new MersenneTwister64(0);

File: samples/micrometer-samples-core/src/main/java/io/micrometer/core/samples/FunctionCounterSample.java
Patch:
@@ -28,7 +28,7 @@ public class FunctionCounterSample {
     public static void main(String[] args) {
         MeterRegistry registry = SampleConfig.myMonitoringSystem();
 
-        AtomicInteger n = new AtomicInteger(0);
+        AtomicInteger n = new AtomicInteger();
 
         FunctionCounter.builder("my.fcounter", n, AtomicInteger::get)
             .baseUnit("happiness")

File: samples/micrometer-samples-core/src/main/java/io/micrometer/core/samples/FunctionTimerSample.java
Patch:
@@ -40,8 +40,8 @@ public static void main(String[] args) {
             .register(registry);
 
         Object placeholder = new Object();
-        AtomicLong totalTimeNanos = new AtomicLong(0);
-        AtomicLong totalCount = new AtomicLong(0);
+        AtomicLong totalTimeNanos = new AtomicLong();
+        AtomicLong totalCount = new AtomicLong();
 
         FunctionTimer.builder("ftimer", placeholder, p -> totalCount.get(), p -> totalTimeNanos.get(), TimeUnit.NANOSECONDS)
             .register(registry);

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusMeterRegistry.java
Patch:
@@ -97,6 +97,7 @@ public String scrape() {
      *
      * @param writer Target that serves the content to be scraped by Prometheus.
      * @throws IOException if writing fails
+     * @since 1.2.0
      */
     public void scrape(Writer writer) throws IOException {
         TextFormat.write004(writer, registry.metricFamilySamples());

File: micrometer-core/src/test/java/io/micrometer/core/instrument/config/NamingConventionTest.java
Patch:
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.core.instrument;
+package io.micrometer.core.instrument.config;
 
-import io.micrometer.core.instrument.config.NamingConvention;
+import io.micrometer.core.instrument.Meter;
 import org.junit.jupiter.api.Test;
 
 import static org.assertj.core.api.AssertionsForClassTypes.assertThat;

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/kafka/KafkaClientMetricsIntegrationTest.java
Patch:
@@ -42,7 +42,7 @@
 @Tag("docker")
 class KafkaClientMetricsIntegrationTest {
     @Container
-    private KafkaContainer kafkaContainer = new KafkaContainer();
+    private KafkaContainer kafkaContainer = new KafkaContainer("5.5.1");
 
     @Test
     void shouldManageProducerAndConsumerMetrics() {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jvm/JvmGcMetrics.java
Patch:
@@ -195,7 +195,7 @@ public void bindTo(MeterRegistry registry) {
     private static boolean isManagementExtensionsPresent() {
         try {
             Class.forName("com.sun.management.GarbageCollectionNotificationInfo", false,
-                    JvmGcMetrics.class.getClassLoader());
+                    MemoryPoolMXBean.class.getClassLoader());
             return true;
         } catch (Throwable e) {
             // We are operating in a JVM without access to this level of detail

File: implementations/micrometer-registry-influx/src/main/java/io/micrometer/influx/InfluxNamingConvention.java
Patch:
@@ -62,7 +62,7 @@ public String tagKey(String key) {
 
     @Override
     public String tagValue(String value) {
-        return escape(this.delegate.tagValue(value));
+        return escape(this.delegate.tagValue(value).replace('\n', ' '));
     }
 
     private String escape(String string) {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/MeterRegistry.java
Patch:
@@ -135,7 +135,7 @@ protected MeterRegistry(Clock clock) {
      *
      * @param id The id that uniquely identifies the long task timer.
      * @return A new long task timer.
-     * @deprecated Implement {@link #newLongTaskTimer(Id, DistributionStatisticConfig)} instead.
+     * @deprecated Implement {@link #newLongTaskTimer(Meter.Id, DistributionStatisticConfig)} instead.
      */
     @SuppressWarnings("DeprecatedIsStillUsed")
     @Deprecated

File: micrometer-core/src/main/java/io/micrometer/core/instrument/internal/DefaultLongTaskTimer.java
Patch:
@@ -18,6 +18,7 @@
 import io.micrometer.core.instrument.AbstractMeter;
 import io.micrometer.core.instrument.Clock;
 import io.micrometer.core.instrument.LongTaskTimer;
+import io.micrometer.core.instrument.Meter;
 import io.micrometer.core.instrument.distribution.CountAtBucket;
 import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;
 import io.micrometer.core.instrument.distribution.HistogramSnapshot;
@@ -53,7 +54,7 @@ public class DefaultLongTaskTimer extends AbstractMeter implements LongTaskTimer
      *
      * @param id ID
      * @param clock clock
-     * @deprecated Use {@link #DefaultLongTaskTimer(Id, Clock, TimeUnit, DistributionStatisticConfig, boolean)} instead.
+     * @deprecated Use {@link #DefaultLongTaskTimer(Meter.Id, Clock, TimeUnit, DistributionStatisticConfig, boolean)} instead.
      */
     @Deprecated
     public DefaultLongTaskTimer(Id id, Clock clock) {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/mongodb/MongoMetricsConnectionPoolListener.java
Patch:
@@ -116,8 +116,9 @@ public void connectionRemoved(ConnectionRemovedEvent event) {
     }
 
     private Gauge registerGauge(ServerId serverId, String metricName, String description, Map<ServerId, AtomicInteger> metrics) {
-        metrics.put(serverId, new AtomicInteger());
-        return Gauge.builder(metricName, metrics, m -> m.get(serverId).doubleValue())
+        AtomicInteger value = new AtomicInteger();
+        metrics.put(serverId, value);
+        return Gauge.builder(metricName, value, AtomicInteger::doubleValue)
                     .description(description)
                     .tag("cluster.id", serverId.getClusterId().getValue())
                     .tag("server.address", serverId.getAddress().toString())

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/db/MetricsDSLContext.java
Patch:
@@ -20,6 +20,7 @@
 import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.Tags;
 import org.jooq.*;
+import org.jooq.Record;
 import org.jooq.conf.Settings;
 import org.jooq.exception.*;
 import org.jooq.impl.DSL;
@@ -44,8 +45,6 @@
 import java.util.function.Function;
 import java.util.stream.Stream;
 
-import static org.jooq.SQLDialect.*;
-
 /**
  * Time SQL queries passing through jOOQ.
  *

File: micrometer-core/src/main/java/io/micrometer/core/instrument/util/StringEscapeUtils.java
Patch:
@@ -20,7 +20,7 @@
 /**
  * Utilities for JSON escaping {@code String}.
  *
- * <h3>Implementation Approach</h3>
+ * <h2>Implementation Approach</h2>
  * This uses a replacement char array to perform escaping, an idea from Square/Moshi. In their case,
  * it was an internal detail of {@code com.squareup.moshi.JsonUtf8Writer}, licensed Apache 2.0
  * Copyright 2010 Google Inc. The comments and initialization of {@code REPLACEMENT_CHARS} came

File: samples/micrometer-samples-javalin/src/main/java/io/micrometer/javalin/samples/PrometheusSample.java
Patch:
@@ -111,7 +111,7 @@ public Iterable<Tag> getTags(HttpServletRequest request, HttpServletResponse res
                 response.setHeader(EXCEPTION_HEADER, null);
 
                 String uri = app.servlet().getMatcher()
-                        .findEntries(HandlerType.GET, request.getPathInfo())
+                        .findEntries(HandlerType.valueOf(request.getMethod()), request.getPathInfo())
                         .stream()
                         .findAny()
                         .map(HandlerEntry::getPath)

File: samples/micrometer-samples-javalin/src/main/java/io/micrometer/javalin/samples/PrometheusSample.java
Patch:
@@ -28,11 +28,11 @@
 import io.micrometer.core.instrument.binder.jetty.JettyServerThreadPoolMetrics;
 import io.micrometer.core.instrument.binder.jetty.TimedHandler;
 import io.micrometer.core.instrument.util.StringUtils;
+import io.micrometer.core.lang.NonNull;
 import io.micrometer.prometheus.PrometheusConfig;
 import io.micrometer.prometheus.PrometheusMeterRegistry;
 import io.prometheus.client.exporter.common.TextFormat;
 import org.eclipse.jetty.server.Server;
-import org.jetbrains.annotations.NotNull;
 
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
@@ -99,7 +99,7 @@ public MicrometerPlugin(MeterRegistry registry, Iterable<Tag> tags) {
     }
 
     @Override
-    public void apply(@NotNull Javalin app) {
+    public void apply(@NonNull Javalin app) {
         Server server = app.server().server();
 
         app.exception(Exception.class, EXCEPTION_HANDLER);

File: implementations/micrometer-registry-cloudwatch2/src/main/java/io/micrometer/cloudwatch2/CloudWatchMeterRegistry.java
Patch:
@@ -260,6 +260,7 @@ private MetricDatum metricDatum(Meter.Id id, @Nullable String suffix, StandardUn
 
             List<Tag> tags = id.getConventionTags(config().namingConvention());
             return MetricDatum.builder()
+                    .storageResolution(config.highResolution() ? 1 : 60)
                     .metricName(getMetricName(id, suffix))
                     .dimensions(toDimensions(tags))
                     .timestamp(timestamp)

File: micrometer-core/src/main/java/io/micrometer/core/instrument/DistributionSummary.java
Patch:
@@ -59,7 +59,8 @@ static Builder builder(String name) {
      * @return The distribution average for all recorded events.
      */
     default double mean() {
-        return count() == 0 ? 0 : totalAmount() / count();
+        long count = count();
+        return count == 0 ? 0 : totalAmount() / count;
     }
 
     /**

File: micrometer-core/src/main/java/io/micrometer/core/instrument/FunctionTimer.java
Patch:
@@ -53,7 +53,8 @@ static <T> Builder<T> builder(String name, T obj, ToLongFunction<T> countFunctio
      * @return The distribution average for all recorded events.
      */
     default double mean(TimeUnit unit) {
-        return count() == 0 ? 0 : totalTime(unit) / count();
+        double count = count();
+        return count == 0 ? 0 : totalTime(unit) / count;
     }
 
     /**

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Timer.java
Patch:
@@ -187,7 +187,8 @@ default <T> Supplier<T> wrap(Supplier<T> f) {
      * @return The distribution average for all recorded events.
      */
     default double mean(TimeUnit unit) {
-        return count() == 0 ? 0 : totalTime(unit) / count();
+        long count = count();
+        return count == 0 ? 0 : totalTime(unit) / count;
     }
 
     /**

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/system/ProcessorMetrics.java
Patch:
@@ -53,8 +53,8 @@ public class ProcessorMetrics implements MeterBinder {
 
     /** List of public, exported interface class names from supported JVM implementations. */
     private static final List<String> OPERATING_SYSTEM_BEAN_CLASS_NAMES = Arrays.asList(
-        "com.sun.management.OperatingSystemMXBean", // HotSpot
-        "com.ibm.lang.management.OperatingSystemMXBean" // J9
+        "com.ibm.lang.management.OperatingSystemMXBean", // J9
+        "com.sun.management.OperatingSystemMXBean" // HotSpot
     );
 
     private final Iterable<Tag> tags;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/distribution/DistributionStatisticConfig.java
Patch:
@@ -238,7 +238,8 @@ public Integer getBufferLength() {
      * use with a {@link io.micrometer.core.instrument.Timer}, the SLA unit is in nanoseconds.
      *
      * @return The SLA boundaries to include the set of histogram buckets shipped to the monitoring system.
-     * @deprecated Use {@link #getServiceLevelObjectiveBoundaries()} instead.
+     * @deprecated Use {@link #getServiceLevelObjectiveBoundaries()}. If you use this method, your
+     * code will not be compatible with code that uses Micrometer 1.5.x and later.
      */
     @Nullable
     @Deprecated

File: implementations/micrometer-registry-opentsdb/src/main/java/io/micrometer/opentsdb/OpenTSDBTimer.java
Patch:
@@ -80,8 +80,9 @@ protected void recordNonNegative(long amount, TimeUnit unit) {
         totalTime.add(nanoAmount);
         max.record(nanoAmount, TimeUnit.NANOSECONDS);
 
-        if (histogram != null)
-            histogram.recordLong(TimeUnit.NANOSECONDS.convert(amount, unit));
+        if (histogram != null) {
+            histogram.recordLong(nanoAmount);
+        }
     }
 
     @Override

File: implementations/micrometer-registry-opentsdb/src/main/java/io/micrometer/opentsdb/OpenTSDBTimer.java
Patch:
@@ -118,8 +118,8 @@ public HistogramSnapshot takeSnapshot() {
         }
 
         return new HistogramSnapshot(snapshot.count(),
-                snapshot.total(TimeUnit.SECONDS),
-                snapshot.max(TimeUnit.SECONDS),
+                snapshot.total(),
+                snapshot.max(),
                 snapshot.percentileValues(),
                 histogramCounts(),
                 snapshot::outputSummary);

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusTimer.java
Patch:
@@ -120,8 +120,8 @@ public HistogramSnapshot takeSnapshot() {
         }
 
         return new HistogramSnapshot(snapshot.count(),
-                snapshot.total(TimeUnit.SECONDS),
-                snapshot.max(TimeUnit.SECONDS),
+                snapshot.total(),
+                snapshot.max(),
                 snapshot.percentileValues(),
                 histogramCounts(),
                 snapshot::outputSummary);

File: micrometer-core/src/main/java/io/micrometer/core/instrument/distribution/DistributionStatisticConfig.java
Patch:
@@ -236,7 +236,7 @@ public Integer getBufferLength() {
      *
      * @return The SLA boundaries to include the set of histogram buckets shipped to the monitoring system.
      * @deprecated Use {@link #getServiceLevelObjectiveBoundaries()}. If you use this method, your
-     * code will not be compatible with code that uses Micrometer 1.5.x and later.
+     * code will not be compatible with code that uses Micrometer 1.4.x and later.
      */
     @Deprecated
     @Nullable

File: implementations/micrometer-registry-azure-monitor/src/main/java/io/micrometer/azuremonitor/AzureMonitorMeterRegistry.java
Patch:
@@ -49,7 +49,6 @@ public class AzureMonitorMeterRegistry extends StepMeterRegistry {
 
     private final Logger logger = LoggerFactory.getLogger(AzureMonitorMeterRegistry.class);
     private final TelemetryClient client;
-    private final AzureMonitorConfig config;
 
     public AzureMonitorMeterRegistry(AzureMonitorConfig config, Clock clock) {
         this(config, clock, TelemetryConfiguration.getActive(), DEFAULT_THREAD_FACTORY);
@@ -59,7 +58,6 @@ private AzureMonitorMeterRegistry(AzureMonitorConfig config, Clock clock,
                                       TelemetryConfiguration telemetryConfiguration,
                                       ThreadFactory threadFactory) {
         super(config, clock);
-        this.config = config;
 
         config().namingConvention(new AzureMonitorNamingConvention());
         if (StringUtils.isEmpty(telemetryConfiguration.getInstrumentationKey())) {

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/jvm/ExecutorServiceMetricsTest.java
Patch:
@@ -246,6 +246,8 @@ private void assertThreadPoolExecutorMetrics(String executorName, @Nullable Stri
         registry.get(metricPrefix + "executor.queue.remaining").tags(userTags).tag("name", executorName).gauge();
         registry.get(metricPrefix + "executor.active").tags(userTags).tag("name", executorName).gauge();
         registry.get(metricPrefix + "executor.pool.size").tags(userTags).tag("name", executorName).gauge();
+        registry.get(metricPrefix + "executor.pool.core").tags(userTags).tag("name", executorName).gauge();
+        registry.get(metricPrefix + "executor.pool.max").tags(userTags).tag("name", executorName).gauge();
         registry.get(metricPrefix + "executor.idle").tags(userTags).tag("name", executorName).timer();
         registry.get(metricPrefix + "executor").tags(userTags).tag("name", executorName).timer();
     }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jvm/ExecutorServiceMetrics.java
Patch:
@@ -43,7 +43,7 @@
 @NonNullApi
 @NonNullFields
 public class ExecutorServiceMetrics implements MeterBinder {
-    static final String DEFAULT_EXECUTOR_METRIC_PREFIX = "";
+    private static final String DEFAULT_EXECUTOR_METRIC_PREFIX = "";
     @Nullable
     private final ExecutorService executorService;
 

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/jvm/ExecutorServiceMetricsTest.java
Patch:
@@ -28,7 +28,6 @@
 
 import java.util.concurrent.*;
 
-import static io.micrometer.core.instrument.binder.jvm.ExecutorServiceMetrics.DEFAULT_EXECUTOR_METRIC_PREFIX;
 import static org.assertj.core.api.AssertionsForClassTypes.assertThat;
 
 /**

File: implementations/micrometer-registry-wavefront/src/main/java/io/micrometer/wavefront/WavefrontConfig.java
Patch:
@@ -83,6 +83,9 @@ default String uri() {
     }
 
     /**
+     * Get distribution port.
+     *
+     * @return distribution port
      * @deprecated since 1.5.0 this is no longer used as a single proxy port can handle all wavefront formats.
      */
     @Deprecated

File: implementations/micrometer-registry-wavefront/src/main/java/io/micrometer/wavefront/WavefrontMeterRegistry.java
Patch:
@@ -336,6 +336,9 @@ public Builder threadFactory(ThreadFactory threadFactory) {
         }
 
         /**
+         * Set an HTTP client to use.
+         *
+         * @param httpClient HTTP client to use
          * @return builder
          * @deprecated since 1.5.0 this call no-longer affects the transport used to send metrics to Wavefront. Use
          * {@link #wavefrontSender(WavefrontSender)} to supply your own transport (whether proxy or direct ingestion).

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jetty/InstrumentedQueuedThreadPool.java
Patch:
@@ -24,7 +24,7 @@
 /**
  * A {@link QueuedThreadPool} that binds metrics about the Jetty server thread pool.
  * This can be passed when constructing a Jetty server. For example:
- * <p>
+ *
  * <pre>{@code
  *     Server server = new Server(new InstrumentedQueuedThreadPool(registry, Tags.empty()));
  *     // ...

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jetty/JettyClientTags.java
Patch:
@@ -91,6 +91,7 @@ public static Tag status(Result result) {
      * {@code REDIRECTION} for 3xx responses, {@code NOT_FOUND} for 404 responses.
      *
      * @param result the request result
+     * @param successfulUriPattern successful URI pattern
      * @return the uri tag derived from the request result
      */
     public static Tag uri(Result result, Function<Result, String> successfulUriPattern) {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/config/MeterRegistryConfigValidator.java
Patch:
@@ -47,6 +47,7 @@ public static <M extends MeterRegistryConfig> Validated<?> checkAll(M config, Fu
      * @param property The named property to retrieve.
      * @param getter   The method on the configuration interface which corresponds to this property.
      * @param <M>      The type of the configuration interface.
+     * @param <T>      The type of the property.
      * @return A function which, given a configuration instance, validates the property.
      */
     @SuppressWarnings("unchecked")

File: micrometer-core/src/main/java/io/micrometer/core/instrument/config/validate/Validated.java
Patch:
@@ -95,6 +95,7 @@ default <U> Validated<U> flatMap(Function<T, Validated<U>> mapping) {
      *
      * @param condition {@code true} when the property should be considered invalid.
      * @param message   A message explaining the reason why the property is considered invalid.
+     * @param reason    An invalid reason.
      * @return When originally {@link Valid}, apply the test and either retain the valid decision or make it {@link Invalid}.
      * When originally {@link Invalid} or {@link None}, don't apply the test at all, and pass through the original decision.
      */

File: micrometer-core/src/main/java/io/micrometer/core/instrument/distribution/DistributionStatisticConfig.java
Patch:
@@ -96,6 +96,9 @@ public DistributionStatisticConfig merge(DistributionStatisticConfig parent) {
 
     /**
      * For internal use only.
+     *
+     * @param supportsAggregablePercentiles whether it supports aggregable percentiles
+     * @return histogram buckets
      */
     public NavigableSet<Double> getHistogramBuckets(boolean supportsAggregablePercentiles) {
         NavigableSet<Double> buckets = new TreeSet<>();

File: implementations/micrometer-registry-appoptics/src/test/java/io/micrometer/appoptics/AppOpticsConfigTest.java
Patch:
@@ -34,7 +34,7 @@ void invalid() {
 
         assertThat(config.validate().failures().stream().map(Validated.Invalid::getMessage))
                 .containsExactlyInAnyOrder(
-                        "malformed URL",
+                        "must be a valid URL",
                         "is required"
                 );
     }

File: implementations/micrometer-registry-elastic/src/test/java/io/micrometer/elastic/ElasticConfigTest.java
Patch:
@@ -34,7 +34,7 @@ void invalid() {
 
         assertThat(config.validate().failures().stream().map(Validated.Invalid::getMessage))
                 .containsExactlyInAnyOrder(
-                        "malformed URL",
+                        "must be a valid URL",
                         "invalid date format"
                 );
     }

File: implementations/micrometer-registry-ganglia/src/test/java/io/micrometer/ganglia/GangliaConfigTest.java
Patch:
@@ -40,10 +40,10 @@ void invalid() {
         // can iterate over failures to display messages
         assertThat(config.validate().failures().stream().map(Validated.Invalid::getMessage))
                 .containsExactlyInAnyOrder(
-                        "not an integer",
+                        "must be an integer",
                         "should be one of 'MULTICAST', 'UNICAST'",
-                        "not an integer",
-                        "unknown time unit 'weeks'"
+                        "must be an integer",
+                        "must contain a valid time unit"
                 );
     }
 

File: implementations/micrometer-registry-graphite/src/test/java/io/micrometer/graphite/GraphiteConfigTest.java
Patch:
@@ -33,7 +33,7 @@ void invalid() {
         props.put("graphite.durationUnits", "bad duration");
 
         assertThat(config.validate().failures().stream().map(Validated.Invalid::getMessage))
-                .containsExactlyInAnyOrder("unknown time unit 'bad rate'", "unknown time unit 'bad duration'");
+                .containsOnly("must contain a valid time unit");
     }
 
     @Test

File: implementations/micrometer-registry-humio/src/test/java/io/micrometer/humio/HumioConfigTest.java
Patch:
@@ -32,7 +32,7 @@ void invalid() {
         props.put("humio.uri", "bad");
 
         assertThat(config.validate().failures().stream().map(Validated.Invalid::getMessage))
-                .containsOnly("malformed URL");
+                .containsOnly("must be a valid URL");
     }
 
     @Test

File: implementations/micrometer-registry-influx/src/test/java/io/micrometer/influx/InfluxConfigTest.java
Patch:
@@ -33,7 +33,7 @@ void invalid() {
         props.put("influx.consistency", "bad");
 
         assertThat(config.validate().failures().stream().map(Validated.Invalid::getMessage))
-                .containsExactlyInAnyOrder("malformed URL", "should be one of 'ANY', 'ONE', 'QUORUM', 'ALL'");
+                .containsExactlyInAnyOrder("must be a valid URL", "should be one of 'ANY', 'ONE', 'QUORUM', 'ALL'");
     }
 
     @Test

File: implementations/micrometer-registry-kairos/src/test/java/io/micrometer/kairos/KairosConfigTest.java
Patch:
@@ -32,7 +32,7 @@ void invalid() {
         props.put("kairos.uri", "bad");
 
         assertThat(config.validate().failures().stream().map(Validated.Invalid::getMessage))
-                .containsExactly("malformed URL");
+                .containsExactly("must be a valid URL");
     }
 
     @Test

File: implementations/micrometer-registry-opentsdb/src/test/java/io/micrometer/opentsdb/OpenTSDBConfigTest.java
Patch:
@@ -33,7 +33,7 @@ void invalid() {
         props.put("opentsdb.flavor", "bad");
 
         assertThat(config.validate().failures().stream().map(Validated.Invalid::getMessage))
-                .containsExactlyInAnyOrder("malformed URL", "should be one of 'VictoriaMetrics'");
+                .containsExactlyInAnyOrder("must be a valid URL", "should be one of 'VictoriaMetrics'");
     }
 
     @Test

File: implementations/micrometer-registry-prometheus/src/test/java/io/micrometer/prometheus/PrometheusConfigTest.java
Patch:
@@ -34,7 +34,7 @@ void invalid() {
 
         assertThat(config.validate().failures().stream().map(Validated.Invalid::getMessage))
                 .containsExactlyInAnyOrder(
-                        "unknown time unit 'w'",
+                        "must contain a valid time unit",
                         "should be one of 'Prometheus', 'VictoriaMetrics'"
                 );
     }

File: implementations/micrometer-registry-signalfx/src/test/java/io/micrometer/signalfx/SignalFxConfigTest.java
Patch:
@@ -32,7 +32,7 @@ void invalid() {
         props.put("signalfx.uri", "bad");
 
         assertThat(config.validate().failures().stream().map(Validated.Invalid::getMessage))
-                .containsExactlyInAnyOrder("malformed URL", "is required");
+                .containsExactlyInAnyOrder("must be a valid URL", "is required");
     }
 
     @Test

File: implementations/micrometer-registry-statsd/src/test/java/io/micrometer/statsd/StatsdConfigTest.java
Patch:
@@ -38,7 +38,7 @@ void invalid() {
                 .containsOnly(
                         "should be one of 'ETSY', 'DATADOG', 'TELEGRAF', 'SYSDIG'",
                         "should be one of 'UDP', 'TCP'",
-                        "unknown time unit 'w'"
+                        "must contain a valid time unit"
                 );
     }
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/config/validate/PropertyValidator.java
Patch:
@@ -48,7 +48,7 @@ public static Validated<Integer> getInteger(MeterRegistryConfig config, String p
         try {
             return Validated.valid(prefixedProperty, value == null ? null : Integer.parseInt(value));
         } catch (NumberFormatException e) {
-            return Validated.invalid(prefixedProperty, value, "not an integer", InvalidReason.MALFORMED, e);
+            return Validated.invalid(prefixedProperty, value, "must be an integer", InvalidReason.MALFORMED, e);
         }
     }
 
@@ -84,7 +84,7 @@ public static Validated<Boolean> getBoolean(MeterRegistryConfig config, String p
         try {
             return Validated.valid(prefixedProperty, value == null ? null : Boolean.parseBoolean(value));
         } catch (NumberFormatException e) {
-            return Validated.invalid(prefixedProperty, value, "not a boolean", InvalidReason.MALFORMED, e);
+            return Validated.invalid(prefixedProperty, value, "must be a boolean", InvalidReason.MALFORMED, e);
         }
     }
 
@@ -107,7 +107,7 @@ public static Validated<String> getUrlString(MeterRegistryConfig config, String
         try {
             return Validated.valid(prefixedProperty, value == null ? null : URI.create(value).toURL()).map(url -> value);
         } catch (MalformedURLException | IllegalArgumentException ex) {
-            return Validated.invalid(prefixedProperty, value, "malformed URL", InvalidReason.MALFORMED, ex);
+            return Validated.invalid(prefixedProperty, value, "must be a valid URL", InvalidReason.MALFORMED, ex);
         }
     }
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/config/validate/ValidationException.java
Patch:
@@ -29,9 +29,9 @@ public class ValidationException extends IllegalStateException {
 
     public ValidationException(Validated<?> validation) {
         super(validation.failures().stream()
-                .map(invalid -> invalid.getProperty() + "='" +
+                .map(invalid -> invalid.getProperty() + " was '" +
                         (invalid.getValue() == null ? "null" : invalid.getValue().toString()) +
-                        "' " + invalid.getMessage())
+                        "' but it " + invalid.getMessage())
                 .collect(Collectors.joining(
                         "\n",
                         validation.failures().size() > 1 ? "Multiple validation failures:\n" : "",

File: micrometer-core/src/test/java/io/micrometer/core/instrument/config/ValidatedTest.java
Patch:
@@ -35,18 +35,18 @@ void mapInvalid() {
     @Test
     void combine() {
         Validated<?> validated = Validated.valid("simple.step", Duration.ofSeconds(1))
-                .and(Validated.invalid("simple.mode", "BAD", "Mode must be STEP or CUMULATIVE", InvalidReason.MALFORMED));
+                .and(Validated.invalid("simple.mode", "BAD", "must be 'STEP' or 'CUMULATIVE'", InvalidReason.MALFORMED));
 
         assertThat(validated.isValid()).isFalse();
     }
 
     @Test
     void orThrowOnEitherWithInvalidThrows() {
         Validated<?> valid = Validated.valid("prop", "good")
-                .and(Validated.invalid("prop2", "bad", "is not good", InvalidReason.MALFORMED));
+                .and(Validated.invalid("prop2", "bad", "must be good", InvalidReason.MALFORMED));
 
         assertThatThrownBy(valid::orThrow)
                 .isInstanceOf(ValidationException.class)
-                .hasMessage("prop2='bad' is not good");
+                .hasMessage("prop2 was 'bad' but it must be good");
     }
 }

File: micrometer-core/src/test/java/io/micrometer/core/instrument/push/PushRegistryConfigTest.java
Patch:
@@ -60,9 +60,9 @@ void invalid() {
         assertThat(failures.size()).isEqualTo(5);
         assertThat(failures.stream().map(Validated.Invalid::getMessage))
                 .containsOnly(
-                        "does not match a simple duration pattern",
-                        "unknown time unit 'w'",
-                        "not an integer"
+                        "must be a valid duration",
+                        "must contain a valid time unit",
+                        "must be an integer"
                 );
 
         assertThatThrownBy(config::batchSize).isInstanceOf(ValidationException.class);

File: implementations/micrometer-registry-elastic/src/main/java/io/micrometer/elastic/ElasticNamingConvention.java
Patch:
@@ -17,6 +17,7 @@
 
 import io.micrometer.core.instrument.Meter;
 import io.micrometer.core.instrument.config.NamingConvention;
+import io.micrometer.core.lang.Nullable;
 
 import java.util.regex.Pattern;
 
@@ -41,7 +42,7 @@ public ElasticNamingConvention(NamingConvention delegate) {
     }
 
     @Override
-    public String name(String name, Meter.Type type, String baseUnit) {
+    public String name(String name, Meter.Type type, @Nullable String baseUnit) {
         return delegate.name(name, type, baseUnit);
     }
 

File: implementations/micrometer-registry-elastic/src/test/java/io/micrometer/elastic/ElasticMeterRegistryTest.java
Patch:
@@ -298,6 +298,4 @@ public String indexName() {
         };
         assertThat(registry.indexName()).isEqualTo("my-metrics");
     }
-
-
 }

File: implementations/micrometer-registry-ganglia/src/main/java/io/micrometer/ganglia/GangliaMeterRegistry.java
Patch:
@@ -196,7 +196,7 @@ String getMetricName(Meter.Id id, @Nullable String suffix) {
 
     @Override
     protected TimeUnit getBaseTimeUnit() {
-        return TimeUnit.MILLISECONDS;
+        return config.durationUnits();
     }
 
     public static class Builder {

File: implementations/micrometer-registry-new-relic/src/main/java/io/micrometer/newrelic/NewRelicMeterRegistry.java
Patch:
@@ -110,9 +110,11 @@ public static class Builder {
 
         @Nullable
         private NewRelicClientProvider clientProvider;
+
         private NamingConvention convention = new NewRelicNamingConvention();
         private Clock clock = Clock.SYSTEM;
         private ThreadFactory threadFactory = DEFAULT_THREAD_FACTORY;
+
         @Nullable
         private HttpSender httpClient;
 

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusMeterRegistry.java
Patch:
@@ -57,9 +57,11 @@ public PrometheusMeterRegistry(PrometheusConfig config) {
     public PrometheusMeterRegistry(PrometheusConfig config, CollectorRegistry registry, Clock clock) {
         super(clock);
         this.registry = registry;
+        this.prometheusConfig = config;
+
+        config.requireValid();
         config().namingConvention(new PrometheusNamingConvention());
         config().onMeterRemoved(this::onMeterRemoved);
-        this.prometheusConfig = config;
     }
 
     private static List<String> tagValues(Meter.Id id) {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/config/MissingRequiredConfigurationException.java
Patch:
@@ -17,7 +17,10 @@
 
 /**
  * Signals that a piece of required configuration has not been provided.
+ *
+ * @since 1.5.0 replaced with {@link io.micrometer.core.instrument.config.validate.Validated} API.
  */
+@Deprecated
 public class MissingRequiredConfigurationException extends IllegalStateException {
     public MissingRequiredConfigurationException(String s) {
         super(s);

File: micrometer-core/src/main/java/io/micrometer/core/instrument/push/PushMeterRegistry.java
Patch:
@@ -37,6 +37,7 @@ public abstract class PushMeterRegistry extends MeterRegistry {
     protected PushMeterRegistry(PushRegistryConfig config, Clock clock) {
         super(clock);
         this.config = config;
+        config.requireValid();
     }
 
     protected abstract void publish();

File: micrometer-core/src/main/java/io/micrometer/core/instrument/simple/SimpleMeterRegistry.java
Patch:
@@ -46,6 +46,7 @@ public SimpleMeterRegistry() {
     public SimpleMeterRegistry(SimpleConfig config, Clock clock) {
         super(clock);
         this.config = config;
+        config.requireValid();
     }
 
     @Override

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/kafka/KafkaClientMetricsIntegrationTest.java
Patch:
@@ -44,7 +44,8 @@ class KafkaClientMetricsIntegrationTest {
     @Container
     private KafkaContainer kafkaContainer = new KafkaContainer();
 
-    @Test void shouldManageProducerAndConsumerMetrics() {
+    @Test
+    void shouldManageProducerAndConsumerMetrics() {
         SimpleMeterRegistry registry = new SimpleMeterRegistry();
 
         assertThat(registry.getMeters()).hasSize(0);

File: micrometer-core/src/test/java/io/micrometer/core/instrument/util/TimeUtilsTest.java
Patch:
@@ -22,6 +22,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.assertThatThrownBy;
 
+@SuppressWarnings("deprecation")
 class TimeUtilsTest {
     @Test
     void simpleParse() {

File: implementations/micrometer-registry-elastic/src/main/java/io/micrometer/elastic/ElasticNamingConvention.java
Patch:
@@ -17,7 +17,6 @@
 
 import io.micrometer.core.instrument.Meter;
 import io.micrometer.core.instrument.config.NamingConvention;
-import io.micrometer.core.lang.Nullable;
 
 import java.util.regex.Pattern;
 
@@ -42,7 +41,7 @@ public ElasticNamingConvention(NamingConvention delegate) {
     }
 
     @Override
-    public String name(String name, Meter.Type type, @Nullable String baseUnit) {
+    public String name(String name, Meter.Type type, String baseUnit) {
         return delegate.name(name, type, baseUnit);
     }
 

File: implementations/micrometer-registry-elastic/src/test/java/io/micrometer/elastic/ElasticMeterRegistryTest.java
Patch:
@@ -298,4 +298,6 @@ public String indexName() {
         };
         assertThat(registry.indexName()).isEqualTo("my-metrics");
     }
+
+
 }

File: implementations/micrometer-registry-ganglia/src/main/java/io/micrometer/ganglia/GangliaMeterRegistry.java
Patch:
@@ -196,7 +196,7 @@ String getMetricName(Meter.Id id, @Nullable String suffix) {
 
     @Override
     protected TimeUnit getBaseTimeUnit() {
-        return config.durationUnits();
+        return TimeUnit.MILLISECONDS;
     }
 
     public static class Builder {

File: implementations/micrometer-registry-new-relic/src/main/java/io/micrometer/newrelic/NewRelicMeterRegistry.java
Patch:
@@ -110,11 +110,9 @@ public static class Builder {
 
         @Nullable
         private NewRelicClientProvider clientProvider;
-
         private NamingConvention convention = new NewRelicNamingConvention();
         private Clock clock = Clock.SYSTEM;
         private ThreadFactory threadFactory = DEFAULT_THREAD_FACTORY;
-
         @Nullable
         private HttpSender httpClient;
 

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusMeterRegistry.java
Patch:
@@ -57,11 +57,9 @@ public PrometheusMeterRegistry(PrometheusConfig config) {
     public PrometheusMeterRegistry(PrometheusConfig config, CollectorRegistry registry, Clock clock) {
         super(clock);
         this.registry = registry;
-        this.prometheusConfig = config;
-
-        config.requireValid();
         config().namingConvention(new PrometheusNamingConvention());
         config().onMeterRemoved(this::onMeterRemoved);
+        this.prometheusConfig = config;
     }
 
     private static List<String> tagValues(Meter.Id id) {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/config/MissingRequiredConfigurationException.java
Patch:
@@ -17,10 +17,7 @@
 
 /**
  * Signals that a piece of required configuration has not been provided.
- *
- * @since 1.5.0 replaced with {@link io.micrometer.core.instrument.config.validate.Validated} API.
  */
-@Deprecated
 public class MissingRequiredConfigurationException extends IllegalStateException {
     public MissingRequiredConfigurationException(String s) {
         super(s);

File: micrometer-core/src/main/java/io/micrometer/core/instrument/push/PushMeterRegistry.java
Patch:
@@ -37,7 +37,6 @@ public abstract class PushMeterRegistry extends MeterRegistry {
     protected PushMeterRegistry(PushRegistryConfig config, Clock clock) {
         super(clock);
         this.config = config;
-        config.requireValid();
     }
 
     protected abstract void publish();

File: micrometer-core/src/main/java/io/micrometer/core/instrument/simple/SimpleMeterRegistry.java
Patch:
@@ -46,7 +46,6 @@ public SimpleMeterRegistry() {
     public SimpleMeterRegistry(SimpleConfig config, Clock clock) {
         super(clock);
         this.config = config;
-        config.requireValid();
     }
 
     @Override

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/kafka/KafkaClientMetricsIntegrationTest.java
Patch:
@@ -44,8 +44,7 @@ class KafkaClientMetricsIntegrationTest {
     @Container
     private KafkaContainer kafkaContainer = new KafkaContainer();
 
-    @Test
-    void shouldManageProducerAndConsumerMetrics() {
+    @Test void shouldManageProducerAndConsumerMetrics() {
         SimpleMeterRegistry registry = new SimpleMeterRegistry();
 
         assertThat(registry.getMeters()).hasSize(0);

File: micrometer-core/src/test/java/io/micrometer/core/instrument/util/TimeUtilsTest.java
Patch:
@@ -22,7 +22,6 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.assertThatThrownBy;
 
-@SuppressWarnings("deprecation")
 class TimeUtilsTest {
     @Test
     void simpleParse() {

File: implementations/micrometer-registry-elastic/src/main/java/io/micrometer/elastic/ElasticNamingConvention.java
Patch:
@@ -17,6 +17,7 @@
 
 import io.micrometer.core.instrument.Meter;
 import io.micrometer.core.instrument.config.NamingConvention;
+import io.micrometer.core.lang.Nullable;
 
 import java.util.regex.Pattern;
 
@@ -41,7 +42,7 @@ public ElasticNamingConvention(NamingConvention delegate) {
     }
 
     @Override
-    public String name(String name, Meter.Type type, String baseUnit) {
+    public String name(String name, Meter.Type type, @Nullable String baseUnit) {
         return delegate.name(name, type, baseUnit);
     }
 

File: implementations/micrometer-registry-elastic/src/test/java/io/micrometer/elastic/ElasticMeterRegistryTest.java
Patch:
@@ -298,6 +298,4 @@ public String indexName() {
         };
         assertThat(registry.indexName()).isEqualTo("my-metrics");
     }
-
-
 }

File: implementations/micrometer-registry-ganglia/src/main/java/io/micrometer/ganglia/GangliaMeterRegistry.java
Patch:
@@ -196,7 +196,7 @@ String getMetricName(Meter.Id id, @Nullable String suffix) {
 
     @Override
     protected TimeUnit getBaseTimeUnit() {
-        return TimeUnit.MILLISECONDS;
+        return config.durationUnits();
     }
 
     public static class Builder {

File: implementations/micrometer-registry-new-relic/src/main/java/io/micrometer/newrelic/NewRelicMeterRegistry.java
Patch:
@@ -110,9 +110,11 @@ public static class Builder {
 
         @Nullable
         private NewRelicClientProvider clientProvider;
+
         private NamingConvention convention = new NewRelicNamingConvention();
         private Clock clock = Clock.SYSTEM;
         private ThreadFactory threadFactory = DEFAULT_THREAD_FACTORY;
+
         @Nullable
         private HttpSender httpClient;
 

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusMeterRegistry.java
Patch:
@@ -57,9 +57,11 @@ public PrometheusMeterRegistry(PrometheusConfig config) {
     public PrometheusMeterRegistry(PrometheusConfig config, CollectorRegistry registry, Clock clock) {
         super(clock);
         this.registry = registry;
+        this.prometheusConfig = config;
+
+        config.requireValid();
         config().namingConvention(new PrometheusNamingConvention());
         config().onMeterRemoved(this::onMeterRemoved);
-        this.prometheusConfig = config;
     }
 
     private static List<String> tagValues(Meter.Id id) {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/config/MissingRequiredConfigurationException.java
Patch:
@@ -17,7 +17,10 @@
 
 /**
  * Signals that a piece of required configuration has not been provided.
+ *
+ * @since 1.5.0 replaced with {@link io.micrometer.core.instrument.config.validate.Validated} API.
  */
+@Deprecated
 public class MissingRequiredConfigurationException extends IllegalStateException {
     public MissingRequiredConfigurationException(String s) {
         super(s);

File: micrometer-core/src/main/java/io/micrometer/core/instrument/push/PushMeterRegistry.java
Patch:
@@ -37,6 +37,7 @@ public abstract class PushMeterRegistry extends MeterRegistry {
     protected PushMeterRegistry(PushRegistryConfig config, Clock clock) {
         super(clock);
         this.config = config;
+        config.requireValid();
     }
 
     protected abstract void publish();

File: micrometer-core/src/main/java/io/micrometer/core/instrument/simple/SimpleMeterRegistry.java
Patch:
@@ -46,6 +46,7 @@ public SimpleMeterRegistry() {
     public SimpleMeterRegistry(SimpleConfig config, Clock clock) {
         super(clock);
         this.config = config;
+        config.requireValid();
     }
 
     @Override

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/kafka/KafkaClientMetricsIntegrationTest.java
Patch:
@@ -44,7 +44,8 @@ class KafkaClientMetricsIntegrationTest {
     @Container
     private KafkaContainer kafkaContainer = new KafkaContainer();
 
-    @Test void shouldManageProducerAndConsumerMetrics() {
+    @Test
+    void shouldManageProducerAndConsumerMetrics() {
         SimpleMeterRegistry registry = new SimpleMeterRegistry();
 
         assertThat(registry.getMeters()).hasSize(0);

File: micrometer-core/src/test/java/io/micrometer/core/instrument/util/TimeUtilsTest.java
Patch:
@@ -22,6 +22,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.assertThatThrownBy;
 
+@SuppressWarnings("deprecation")
 class TimeUtilsTest {
     @Test
     void simpleParse() {

File: implementations/micrometer-registry-graphite/src/main/java/io/micrometer/graphite/GraphiteConfig.java
Patch:
@@ -49,12 +49,13 @@ default String prefix() {
 
     /**
      * @return Whether Graphite tags should be used, as opposed to a hierarchical naming convention.
-     * Defaults to {@code true}.
+     * Defaults to true if no values are present for {@link GraphiteConfig#tagsAsPrefix}.
      * @see <a href="https://graphite.readthedocs.io/en/latest/tags.html">Graphite Tag Support</a>
      * @since 1.4.0
      */
     default boolean graphiteTagsEnabled() {
-        return true;
+        String v = get(prefix() + ".graphiteTagsEnabled");
+        return v == null ? tagsAsPrefix().length == 0 : Boolean.parseBoolean(v);
     }
 
     /**

File: implementations/micrometer-registry-atlas/src/main/java/io/micrometer/atlas/SpectatorLongTaskTimer.java
Patch:
@@ -60,7 +60,7 @@ public int hashCode() {
         return MeterEquivalence.hashCode(this);
     }
 
-    public class SpectatorSample implements Sample {
+    public class SpectatorSample extends Sample {
         private final Sample delegate;
         private final long taskId;
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/LongTaskTimer.java
Patch:
@@ -187,19 +187,19 @@ default Iterable<Measurement> measure() {
         );
     }
 
-    interface Sample {
+    abstract class Sample {
         /**
          * Records the duration of the operation
          *
          * @return The duration, in nanoseconds, of this sample that was stopped
          */
-        long stop();
+        public abstract long stop();
 
         /**
          * @param unit time unit to which the return value will be scaled
          * @return duration of this sample
          */
-        double duration(TimeUnit unit);
+        public abstract double duration(TimeUnit unit);
     }
 
     /**

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeLongTaskTimer.java
Patch:
@@ -98,7 +98,7 @@ LongTaskTimer registerNewMeter(MeterRegistry registry) {
         return builder.register(registry);
     }
 
-    public static class CompositeSample implements Sample {
+    public static class CompositeSample extends Sample {
         private final List<Sample> samples;
 
         private CompositeSample(List<Sample> samples) {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/internal/DefaultLongTaskTimer.java
Patch:
@@ -199,7 +199,7 @@ public HistogramSnapshot takeSnapshot() {
         );
     }
 
-    public class SampleImpl implements Sample {
+    public class SampleImpl extends Sample {
         private final long startTime;
         private volatile boolean stopped = false;
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/noop/NoopLongTaskTimer.java
Patch:
@@ -55,7 +55,7 @@ public TimeUnit baseTimeUnit() {
         return TimeUnit.SECONDS;
     }
 
-    public static class NoopSample implements Sample {
+    public static class NoopSample extends Sample {
         @Override
         public long stop() {
             return 0;

File: implementations/micrometer-registry-atlas/src/main/java/io/micrometer/atlas/AtlasMeterRegistry.java
Patch:
@@ -173,8 +173,9 @@ protected <T> FunctionTimer newFunctionTimer(Meter.Id id, T obj, ToLongFunction<
     }
 
     @Override
-    protected LongTaskTimer newLongTaskTimer(Meter.Id id) {
-        return new SpectatorLongTaskTimer(id, com.netflix.spectator.api.patterns.LongTaskTimer.get(registry, spectatorId(id)));
+    protected LongTaskTimer newLongTaskTimer(Meter.Id id, DistributionStatisticConfig distributionStatisticConfig) {
+        return new SpectatorLongTaskTimer(id, com.netflix.spectator.api.patterns.LongTaskTimer.get(registry, spectatorId(id)),
+                clock, distributionStatisticConfig);
     }
 
     @Override

File: implementations/micrometer-registry-opentsdb/src/main/java/io/micrometer/opentsdb/OpenTSDBMeterRegistry.java
Patch:
@@ -119,8 +119,8 @@ protected <T> Gauge newGauge(Meter.Id id, @Nullable T obj, ToDoubleFunction<T> v
     }
 
     @Override
-    protected LongTaskTimer newLongTaskTimer(Meter.Id id) {
-        return new DefaultLongTaskTimer(id, clock);
+    protected LongTaskTimer newLongTaskTimer(Meter.Id id, DistributionStatisticConfig distributionStatisticConfig) {
+        return new DefaultLongTaskTimer(id, clock, getBaseTimeUnit(), distributionStatisticConfig, false);
     }
 
     @Override

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusTimer.java
Patch:
@@ -101,7 +101,6 @@ public HistogramFlavor histogramFlavor() {
         return histogramFlavor;
     }
 
-
     /**
      * For Prometheus we cannot use the histogram counts from HistogramSnapshot, as it is based on a
      * rolling histogram. Prometheus requires a histogram that accumulates values over the lifetime of the app.

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdMeterRegistry.java
Patch:
@@ -329,8 +329,9 @@ protected Counter newCounter(Meter.Id id) {
     }
 
     @Override
-    protected LongTaskTimer newLongTaskTimer(Meter.Id id) {
-        StatsdLongTaskTimer ltt = new StatsdLongTaskTimer(id, lineBuilder(id), fluxSink, clock, statsdConfig.publishUnchangedMeters());
+    protected LongTaskTimer newLongTaskTimer(Meter.Id id, DistributionStatisticConfig distributionStatisticConfig) {
+        StatsdLongTaskTimer ltt = new StatsdLongTaskTimer(id, lineBuilder(id), fluxSink, clock, statsdConfig.publishUnchangedMeters(),
+                distributionStatisticConfig, getBaseTimeUnit());
         pollableMeters.put(id, ltt);
         return ltt;
     }

File: implementations/micrometer-registry-wavefront/src/main/java/io/micrometer/wavefront/WavefrontMeterRegistry.java
Patch:
@@ -124,8 +124,8 @@ protected Counter newCounter(Meter.Id id) {
     }
 
     @Override
-    protected LongTaskTimer newLongTaskTimer(Meter.Id id) {
-        return new DefaultLongTaskTimer(id, clock);
+    protected LongTaskTimer newLongTaskTimer(Meter.Id id, DistributionStatisticConfig distributionStatisticConfig) {
+        return new DefaultLongTaskTimer(id, clock, getBaseTimeUnit(), distributionStatisticConfig, false);
     }
 
     @Override

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeMeterRegistry.java
Patch:
@@ -90,8 +90,8 @@ protected Counter newCounter(Meter.Id id) {
     }
 
     @Override
-    protected LongTaskTimer newLongTaskTimer(Meter.Id id) {
-        return new CompositeLongTaskTimer(id);
+    protected LongTaskTimer newLongTaskTimer(Meter.Id id, DistributionStatisticConfig distributionStatisticConfig) {
+        return new CompositeLongTaskTimer(id, distributionStatisticConfig);
     }
 
     @Override

File: micrometer-core/src/main/java/io/micrometer/core/instrument/simple/SimpleMeterRegistry.java
Patch:
@@ -114,8 +114,8 @@ protected Counter newCounter(Meter.Id id) {
     }
 
     @Override
-    protected LongTaskTimer newLongTaskTimer(Meter.Id id) {
-        return new DefaultLongTaskTimer(id, clock);
+    protected LongTaskTimer newLongTaskTimer(Meter.Id id, DistributionStatisticConfig distributionStatisticConfig) {
+        return new DefaultLongTaskTimer(id, clock, getBaseTimeUnit(), distributionStatisticConfig, false);
     }
 
     @Override

File: micrometer-core/src/test/java/io/micrometer/core/aop/TimedAspectTest.java
Patch:
@@ -125,7 +125,7 @@ protected Timer newTimer(@NonNull Id id,
 
         @NonNull
         @Override
-        protected LongTaskTimer newLongTaskTimer(@Nonnull Id id) {
+        protected LongTaskTimer newLongTaskTimer(@Nonnull Id id, @Nonnull DistributionStatisticConfig distributionStatisticConfig) {
             throw new RuntimeException();
         }
     }

File: micrometer-core/src/test/java/io/micrometer/core/instrument/composite/CompositeLongTaskTimerTest.java
Patch:
@@ -45,8 +45,6 @@ void mapIdsToEachLongTaskTimerInComposite() {
         clock.add(100, TimeUnit.NANOSECONDS);
         assertThat(anotherSample.stop()).isEqualTo(110);
 
-        // if this fails, the composite is using a timer ID that overlaps with a separate timer in a member
-        // of the composite rather than mapping the ID to a separate ID in the composite member.
         assertThat(sample.stop()).isEqualTo(100);
     }
 }

File: implementations/micrometer-registry-atlas/src/main/java/io/micrometer/atlas/AtlasMeterRegistry.java
Patch:
@@ -115,7 +115,7 @@ protected io.micrometer.core.instrument.DistributionSummary newDistributionSumma
                 percentile -> Tags.concat(id.getTagsAsIterable(), "percentile", DoubleFormat.decimalOrNan(percentile.percentile())),
                 ValueAtPercentile::value,
                 bucket -> id.getName(),
-                bucket -> Tags.concat(id.getTagsAsIterable(), "sla", DoubleFormat.wholeOrDecimal(bucket.bucket())));
+                bucket -> Tags.concat(id.getTagsAsIterable(), "service.level.objective", DoubleFormat.wholeOrDecimal(bucket.bucket())));
 
         return summary;
     }
@@ -139,7 +139,7 @@ protected Timer newTimer(Meter.Id id, DistributionStatisticConfig distributionSt
                 percentile -> Tags.concat(id.getTagsAsIterable(), "percentile", DoubleFormat.decimalOrNan(percentile.percentile())),
                 percentile -> percentile.value(timer.baseTimeUnit()),
                 bucket -> id.getName(),
-                bucket -> Tags.concat(id.getTagsAsIterable(), "sla", DoubleFormat.wholeOrDecimal(bucket.bucket(timer.baseTimeUnit()))));
+                bucket -> Tags.concat(id.getTagsAsIterable(), "service.level.objective", DoubleFormat.wholeOrDecimal(bucket.bucket(timer.baseTimeUnit()))));
 
         return timer;
     }

File: implementations/micrometer-registry-opentsdb/src/main/java/io/micrometer/opentsdb/OpenTSDBDistributionSummary.java
Patch:
@@ -46,7 +46,7 @@ public class OpenTSDBDistributionSummary extends AbstractDistributionSummary {
         super(id, clock,
                 DistributionStatisticConfig.builder()
                         .percentilesHistogram(false)
-                        .sla(new double[0])
+                        .serviceLevelObjectives()
                         .build()
                         .merge(distributionStatisticConfig),
                 scale, false);

File: implementations/micrometer-registry-opentsdb/src/main/java/io/micrometer/opentsdb/OpenTSDBTimer.java
Patch:
@@ -48,7 +48,7 @@ public class OpenTSDBTimer extends AbstractTimer {
         super(id, clock,
                 DistributionStatisticConfig.builder()
                         .percentilesHistogram(false)
-                        .sla(new double[0])
+                        .serviceLevelObjectives()
                         .build()
                         .merge(distributionStatisticConfig),
                 pauseDetector, TimeUnit.SECONDS, false);

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusDistributionSummary.java
Patch:
@@ -39,7 +39,7 @@ public class PrometheusDistributionSummary extends AbstractDistributionSummary {
         super(id, clock,
                 DistributionStatisticConfig.builder()
                         .percentilesHistogram(false)
-                        .sla(new double[0])
+                        .serviceLevelObjectives()
                         .build()
                         .merge(distributionStatisticConfig),
                 scale, false);

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusTimer.java
Patch:
@@ -42,7 +42,7 @@ public class PrometheusTimer extends AbstractTimer {
         super(id, clock,
                 DistributionStatisticConfig.builder()
                         .percentilesHistogram(false)
-                        .sla(new double[0])
+                        .serviceLevelObjectives()
                         .build()
                         .merge(distributionStatisticConfig),
                 pauseDetector, TimeUnit.SECONDS, false);

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeDistributionSummary.java
Patch:
@@ -77,7 +77,7 @@ DistributionSummary registerNewMeter(MeterRegistry registry) {
                 .distributionStatisticBufferLength(distributionStatisticConfig.getBufferLength())
                 .distributionStatisticExpiry(distributionStatisticConfig.getExpiry())
                 .percentilePrecision(distributionStatisticConfig.getPercentilePrecision())
-                .sla(distributionStatisticConfig.getSlaBoundaries())
+                .serviceLevelObjectives(distributionStatisticConfig.getServiceLevelObjectiveBoundaries())
                 .scale(scale)
                 .register(registry);
     }

File: micrometer-core/src/test/java/io/micrometer/core/instrument/DistributionSummaryTest.java
Patch:
@@ -29,7 +29,7 @@ void histogramsInCumulativeMode() {
         MockClock clock = new MockClock();
         MeterRegistry registry = new SimpleMeterRegistry(SimpleConfig.DEFAULT, clock);
         DistributionSummary summary = DistributionSummary.builder("my.summary")
-                .sla(1.0)
+                .serviceLevelObjectives(1.0)
                 .register(registry);
 
         summary.record(1);
@@ -56,7 +56,7 @@ public CountingMode mode() {
         }, clock);
 
         DistributionSummary summary = DistributionSummary.builder("my.summary")
-                .sla(1.0)
+                .serviceLevelObjectives(1.0)
                 .register(registry);
 
         summary.record(1);

File: micrometer-core/src/test/java/io/micrometer/core/instrument/distribution/TimeWindowFixedBoundaryHistogramTest.java
Patch:
@@ -32,7 +32,7 @@ void binarySearchForTail() {
     }
 
     private void assertTailSearch(int search, int expectedIndex, double... buckets) {
-        DistributionStatisticConfig statisticConfig = DistributionStatisticConfig.builder().sla(buckets).build();
+        DistributionStatisticConfig statisticConfig = DistributionStatisticConfig.builder().serviceLevelObjectives(buckets).build();
         try (TimeWindowFixedBoundaryHistogram histogram = new TimeWindowFixedBoundaryHistogram(Clock.SYSTEM,
                 statisticConfig.merge(DistributionStatisticConfig.DEFAULT), false)) {
             TimeWindowFixedBoundaryHistogram.FixedBoundaryHistogram bucket = histogram.newBucket();
@@ -44,7 +44,7 @@ private void assertTailSearch(int search, int expectedIndex, double... buckets)
     void histogramsAreCumulative() {
         try (TimeWindowFixedBoundaryHistogram histogram = new TimeWindowFixedBoundaryHistogram(new MockClock(),
                 DistributionStatisticConfig.builder()
-                        .sla(3.0, 6, 7)
+                        .serviceLevelObjectives(3.0, 6, 7)
                         .bufferLength(1)
                         .build()
                         .merge(DistributionStatisticConfig.DEFAULT), false)) {

File: micrometer-core/src/test/java/io/micrometer/core/instrument/distribution/TimeWindowRotationTest.java
Patch:
@@ -72,9 +72,9 @@ void expectedValueRangeValidation(Class<? extends AbstractTimeWindowHistogram<?,
 
     @ParameterizedTest
     @MethodSource("histogramTypes")
-    void slaBoundariesValidation(Class<? extends AbstractTimeWindowHistogram<?, ?>> histogramType) {
+    void serviceLevelObjectiveBoundariesValidation(Class<? extends AbstractTimeWindowHistogram<?, ?>> histogramType) {
         expectValidationFailure(histogramType, DistributionStatisticConfig.builder()
-            .sla(0.0)
+            .serviceLevelObjectives(0.0)
             .build());
     }
 

File: micrometer-test/src/main/java/io/micrometer/core/tck/DistributionSummaryTest.java
Patch:
@@ -102,7 +102,7 @@ default void percentiles(MeterRegistry registry) {
     @Test
     default void histogramCounts(MeterRegistry registry) {
         DistributionSummary s = DistributionSummary.builder("my.summmary")
-                .sla(1.0)
+                .serviceLevelObjectives(1.0)
                 .register(registry);
 
         s.record(1);

File: micrometer-test/src/main/java/io/micrometer/core/tck/MeterRegistryCompatibilityKit.java
Patch:
@@ -137,7 +137,7 @@ void functionTimerUnits(MeterRegistry registry) {
     void removeMeterWithSynthetic(MeterRegistry registry) {
         Timer timer = Timer.builder("my.timer")
                 .publishPercentiles(0.95)
-                .sla(Duration.ofMillis(10))
+                .serviceLevelObjectives(Duration.ofMillis(10))
                 .register(registry);
 
         registry.remove(timer);

File: micrometer-test/src/main/java/io/micrometer/core/tck/TimerTest.java
Patch:
@@ -214,7 +214,7 @@ default void percentiles(MeterRegistry registry) {
     @Test
     default void histogramCounts(MeterRegistry registry) {
         Timer t = Timer.builder("my.timer")
-                .sla(Duration.ofMillis(1))
+                .serviceLevelObjectives(Duration.ofMillis(1))
                 .register(registry);
 
         t.record(1, TimeUnit.MILLISECONDS);

File: samples/micrometer-samples-core/src/main/java/io/micrometer/core/samples/TimerMaximumThroughputSample.java
Patch:
@@ -38,7 +38,7 @@ public static void main(String[] args) {
         Timer timer = Timer.builder("timer")
                 .publishPercentileHistogram()
 //                .publishPercentiles(0.5, 0.95, 0.99)
-                .sla(Duration.ofMillis(275), Duration.ofMillis(300), Duration.ofMillis(500))
+                .serviceLevelObjectives(Duration.ofMillis(275), Duration.ofMillis(300), Duration.ofMillis(500))
                 .distributionStatisticExpiry(Duration.ofSeconds(10))
                 .distributionStatisticBufferLength(3)
                 .register(registry);

File: samples/micrometer-samples-core/src/main/java/io/micrometer/core/samples/TimerMemory.java
Patch:
@@ -33,7 +33,7 @@ public static void main(String[] args) throws InterruptedException {
             t = Timer.builder("my.timer")
                     .tag("index", i.toString())
 //                    .publishPercentileHistogram()
-                    .sla(Stream.of(1, 150, 300, 500, 900, 1000, 1200, 1500, 2000, 3000, 4000)
+                    .serviceLevelObjectives(Stream.of(1, 150, 300, 500, 900, 1000, 1200, 1500, 2000, 3000, 4000)
                             .map(Duration::ofMillis)
                             .toArray(Duration[]::new))
                     .publishPercentiles(0.95)

File: samples/micrometer-samples-core/src/main/java/io/micrometer/core/samples/TimerSample.java
Patch:
@@ -35,7 +35,7 @@ public static void main(String[] args) {
         Timer timer = Timer.builder("timer")
                 .publishPercentileHistogram()
                 .publishPercentiles(0.5, 0.95, 0.99)
-                .sla(Duration.ofMillis(275), Duration.ofMillis(300), Duration.ofMillis(500))
+                .serviceLevelObjectives(Duration.ofMillis(275), Duration.ofMillis(300), Duration.ofMillis(500))
                 .distributionStatisticExpiry(Duration.ofSeconds(10))
                 .distributionStatisticBufferLength(3)
                 .register(registry);

File: micrometer-core/src/main/java/io/micrometer/core/instrument/step/StepDistributionSummary.java
Patch:
@@ -20,6 +20,7 @@
 import io.micrometer.core.instrument.Measurement;
 import io.micrometer.core.instrument.Statistic;
 import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;
+import io.micrometer.core.instrument.distribution.TimeWindowMax;
 
 import java.util.Arrays;
 
@@ -32,7 +33,7 @@
 public class StepDistributionSummary extends AbstractDistributionSummary {
     private final StepLong count;
     private final StepDouble total;
-    private final StepDoubleMax max;
+    private final TimeWindowMax max;
 
     /**
      * Create a new {@code StepDistributionSummary}.
@@ -44,13 +45,12 @@ public class StepDistributionSummary extends AbstractDistributionSummary {
      * @param stepMillis                    step in milliseconds
      * @param supportsAggregablePercentiles whether it supports aggregable percentiles
      */
-    @SuppressWarnings("ConstantConditions")
     public StepDistributionSummary(Id id, Clock clock, DistributionStatisticConfig distributionStatisticConfig, double scale,
                                    long stepMillis, boolean supportsAggregablePercentiles) {
         super(id, clock, distributionStatisticConfig, scale, supportsAggregablePercentiles);
         this.count = new StepLong(clock, stepMillis);
         this.total = new StepDouble(clock, stepMillis);
-        this.max = new StepDoubleMax(clock, stepMillis);
+        this.max = new TimeWindowMax(clock, distributionStatisticConfig);
     }
 
     @Override

File: micrometer-core/src/main/java/io/micrometer/core/instrument/step/StepTimer.java
Patch:
@@ -18,6 +18,7 @@
 import io.micrometer.core.instrument.AbstractTimer;
 import io.micrometer.core.instrument.Clock;
 import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;
+import io.micrometer.core.instrument.distribution.TimeWindowMax;
 import io.micrometer.core.instrument.distribution.pause.PauseDetector;
 import io.micrometer.core.instrument.util.TimeUtils;
 
@@ -29,7 +30,7 @@
 public class StepTimer extends AbstractTimer {
     private final StepLong count;
     private final StepLong total;
-    private final StepLongMax max;
+    private final TimeWindowMax max;
 
     /**
      * Create a new {@code StepTimer}.
@@ -50,7 +51,7 @@ public StepTimer(final Id id, final Clock clock, final DistributionStatisticConf
 
         count = new StepLong(clock, stepDurationMillis);
         total = new StepLong(clock, stepDurationMillis);
-        max = new StepLongMax(clock, stepDurationMillis);
+        max = new TimeWindowMax(clock, distributionStatisticConfig);
     }
 
     @Override

File: benchmarks/benchmarks-core/src/jmh/java/io/micrometer/benchmark/compare/CompareCountersWithOtherLibraries.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2018 Pivotal Software, Inc.
+ * Copyright 2018 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -164,4 +164,4 @@ public static void main(String[] args) throws RunnerException {
                 .build();
         new Runner(opt).run();
     }
-}
\ No newline at end of file
+}

File: benchmarks/benchmarks-core/src/jmh/java/io/micrometer/benchmark/compare/CompareHistogramsWithOtherLibraries.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2018 Pivotal Software, Inc.
+ * Copyright 2018 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: benchmarks/benchmarks-core/src/jmh/java/io/micrometer/benchmark/core/CounterBenchmark.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: benchmarks/benchmarks-core/src/jmh/java/io/micrometer/benchmark/core/MeterRegistrationBenchmark.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: benchmarks/benchmarks-core/src/jmh/java/io/micrometer/benchmark/core/TagsBenchmark.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2018 Pivotal Software, Inc.
+ * Copyright 2018 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: benchmarks/benchmarks-core/src/jmh/java/io/micrometer/benchmark/core/TimerBenchmark.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-appoptics/src/main/java/io/micrometer/appoptics/AppOpticsConfig.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2018 Pivotal Software, Inc.
+ * Copyright 2018 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-appoptics/src/main/java/io/micrometer/appoptics/AppOpticsMeterRegistry.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2018 Pivotal Software, Inc.
+ * Copyright 2018 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-appoptics/src/main/java/io/micrometer/appoptics/AppOpticsNamingConvention.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2018 Pivotal Software, Inc.
+ * Copyright 2018 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-appoptics/src/main/java/io/micrometer/appoptics/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2018 Pivotal Software, Inc.
+ * Copyright 2018 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-appoptics/src/test/java/io/micrometer/appoptics/AppOpticsMeterRegistryCompatibilityTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-appoptics/src/test/java/io/micrometer/appoptics/AppOpticsMeterRegistryTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2018 Pivotal Software, Inc.
+ * Copyright 2018 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-atlas/src/main/java/io/micrometer/atlas/AtlasMeterRegistry.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-atlas/src/main/java/io/micrometer/atlas/AtlasNamingConvention.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-atlas/src/main/java/io/micrometer/atlas/AtlasUtils.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-atlas/src/main/java/io/micrometer/atlas/SpectatorCounter.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-atlas/src/main/java/io/micrometer/atlas/SpectatorDistributionSummary.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-atlas/src/main/java/io/micrometer/atlas/SpectatorGauge.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-atlas/src/main/java/io/micrometer/atlas/SpectatorLongTaskTimer.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -66,4 +66,4 @@ public boolean equals(Object o) {
     public int hashCode() {
         return MeterEquivalence.hashCode(this);
     }
-}
\ No newline at end of file
+}

File: implementations/micrometer-registry-atlas/src/main/java/io/micrometer/atlas/SpectatorTimer.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-atlas/src/main/java/io/micrometer/atlas/SpectatorToDoubleGauge.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -44,4 +44,4 @@ public double value() {
         final T obj = ref.get();
         return (obj == null) ? Double.NaN : f.applyAsDouble(obj);
     }
-}
\ No newline at end of file
+}

File: implementations/micrometer-registry-atlas/src/main/java/io/micrometer/atlas/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-atlas/src/test/java/io/micrometer/atlas/AtlasMeterRegistryCompatibilityTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-atlas/src/test/java/io/micrometer/atlas/AtlasMeterRegistryTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-atlas/src/test/java/io/micrometer/atlas/AtlasNamingConventionTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -34,4 +34,4 @@ void replaceNameTag() {
     void replaceStatisticTag() {
         assertThat(namingConvention.tagKey("statistic")).isEqualTo("statisticTag");
     }
-}
\ No newline at end of file
+}

File: implementations/micrometer-registry-atlas/src/test/java/io/micrometer/atlas/SpectatorTimerTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-azure-monitor/src/main/java/io/micrometer/azuremonitor/AzureMonitorConfig.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2018 Pivotal Software, Inc.
+ * Copyright 2018 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-azure-monitor/src/main/java/io/micrometer/azuremonitor/AzureMonitorMeterRegistry.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2018 Pivotal Software, Inc.
+ * Copyright 2018 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-azure-monitor/src/main/java/io/micrometer/azuremonitor/AzureMonitorNamingConvention.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2018 Pivotal Software, Inc.
+ * Copyright 2018 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-azure-monitor/src/main/java/io/micrometer/azuremonitor/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2018 Pivotal Software, Inc.
+ * Copyright 2018 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-azure-monitor/src/test/java/io/micrometer/azuremonitor/AzureMonitorMeterRegistryCompatibilityKit.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2018 Pivotal Software, Inc.
+ * Copyright 2018 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-azure-monitor/src/test/java/io/micrometer/azuremonitor/AzureMonitorNamingConventionTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2018 Pivotal Software, Inc.
+ * Copyright 2018 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -32,4 +32,4 @@ void testNameContainsDesiredCharacters() {
     void testTagKeyContainsDesiredCharacters() {
         assertThat(namingConvention.tagKey("Pc.N@me")).isEqualTo("Pc_N_me");
     }
-}
\ No newline at end of file
+}

File: implementations/micrometer-registry-cloudwatch/src/main/java/io/micrometer/cloudwatch/CloudWatchConfig.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-cloudwatch/src/main/java/io/micrometer/cloudwatch/CloudWatchMeterRegistry.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-cloudwatch/src/main/java/io/micrometer/cloudwatch/CloudWatchNamingConvention.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-cloudwatch/src/main/java/io/micrometer/cloudwatch/CloudWatchUtils.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-cloudwatch/src/main/java/io/micrometer/cloudwatch/MetricDatumPartition.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-cloudwatch/src/main/java/io/micrometer/cloudwatch/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-cloudwatch/src/test/java/io/micrometer/cloudwatch/CloudWatchMeterRegistryCompatibilityTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-cloudwatch/src/test/java/io/micrometer/cloudwatch/CloudWatchMeterRegistryTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-cloudwatch/src/test/java/io/micrometer/cloudwatch/CloudWatchNamingConventionTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-cloudwatch/src/test/java/io/micrometer/cloudwatch/CloudWatchUtilsTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-cloudwatch2/src/main/java/io/micrometer/cloudwatch2/CloudWatchConfig.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-cloudwatch2/src/main/java/io/micrometer/cloudwatch2/CloudWatchMeterRegistry.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-cloudwatch2/src/main/java/io/micrometer/cloudwatch2/CloudWatchNamingConvention.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-cloudwatch2/src/main/java/io/micrometer/cloudwatch2/CloudWatchUtils.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-cloudwatch2/src/main/java/io/micrometer/cloudwatch2/MetricDatumPartition.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-cloudwatch2/src/main/java/io/micrometer/cloudwatch2/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-cloudwatch2/src/test/java/io/micrometer/cloudwatch2/CloudWatchMeterRegistryCompatibilityTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-cloudwatch2/src/test/java/io/micrometer/cloudwatch2/CloudWatchMeterRegistryTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-cloudwatch2/src/test/java/io/micrometer/cloudwatch2/CloudWatchNamingConventionTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-cloudwatch2/src/test/java/io/micrometer/cloudwatch2/CloudWatchUtilsTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-datadog/src/main/java/io/micrometer/datadog/DatadogConfig.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-datadog/src/main/java/io/micrometer/datadog/DatadogMeterRegistry.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-datadog/src/main/java/io/micrometer/datadog/DatadogMetricMetadata.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-datadog/src/main/java/io/micrometer/datadog/DatadogNamingConvention.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-datadog/src/main/java/io/micrometer/datadog/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-datadog/src/test/java/io/micrometer/datadog/DatadogConfigTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2019 Pivotal Software, Inc.
+ * Copyright 2019 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-datadog/src/test/java/io/micrometer/datadog/DatadogMeterRegistryCompatibilityTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-datadog/src/test/java/io/micrometer/datadog/DatadogMeterRegistryTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-datadog/src/test/java/io/micrometer/datadog/DatadogMetricMetadataTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-datadog/src/test/java/io/micrometer/datadog/DatadogNamingConventionTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-dynatrace/src/main/java/io/micrometer/dynatrace/DynatraceBatchedPayload.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2019 Pivotal Software, Inc.
+ * Copyright 2019 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-dynatrace/src/main/java/io/micrometer/dynatrace/DynatraceConfig.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-dynatrace/src/main/java/io/micrometer/dynatrace/DynatraceMeterRegistry.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-dynatrace/src/main/java/io/micrometer/dynatrace/DynatraceMetricDefinition.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-dynatrace/src/main/java/io/micrometer/dynatrace/DynatraceNamingConvention.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-dynatrace/src/main/java/io/micrometer/dynatrace/DynatraceTimeSeries.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-dynatrace/src/main/java/io/micrometer/dynatrace/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -19,4 +19,4 @@
 package io.micrometer.dynatrace;
 
 import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
\ No newline at end of file
+import io.micrometer.core.lang.NonNullFields;

File: implementations/micrometer-registry-dynatrace/src/test/java/io/micrometer/dynatrace/DynatraceMeterRegistryCompatibilityTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-dynatrace/src/test/java/io/micrometer/dynatrace/DynatraceMeterRegistryTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-dynatrace/src/test/java/io/micrometer/dynatrace/DynatraceMetricDefinitionTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-dynatrace/src/test/java/io/micrometer/dynatrace/DynatraceNamingConventionTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-dynatrace/src/test/java/io/micrometer/dynatrace/DynatraceTimeSeriesTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-elastic/src/main/java/io/micrometer/elastic/ElasticConfig.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-elastic/src/main/java/io/micrometer/elastic/ElasticMeterRegistry.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-elastic/src/main/java/io/micrometer/elastic/ElasticNamingConvention.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-elastic/src/main/java/io/micrometer/elastic/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,4 +13,4 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.elastic;
\ No newline at end of file
+package io.micrometer.elastic;

File: implementations/micrometer-registry-elastic/src/test/java/io/micrometer/elastic/AbstractElasticsearchMeterRegistryIntegrationTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2019 Pivotal Software, Inc.
+ * Copyright 2019 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-elastic/src/test/java/io/micrometer/elastic/ElasticMeterRegistryCompatibilityTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-elastic/src/test/java/io/micrometer/elastic/ElasticMeterRegistryTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-elastic/src/test/java/io/micrometer/elastic/ElasticNamingConventionTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-elastic/src/test/java/io/micrometer/elastic/ElasticsearchMeterRegistryElasticsearch6IntegrationTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2019 Pivotal Software, Inc.
+ * Copyright 2019 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-elastic/src/test/java/io/micrometer/elastic/ElasticsearchMeterRegistryElasticsearch7IntegrationTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2019 Pivotal Software, Inc.
+ * Copyright 2019 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-ganglia/src/main/java/io/micrometer/ganglia/GangliaConfig.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-ganglia/src/main/java/io/micrometer/ganglia/GangliaMeterRegistry.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-ganglia/src/main/java/io/micrometer/ganglia/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-ganglia/src/test/java/io/micrometer/ganglia/GangliaMeterRegistryCompatibilityTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-ganglia/src/test/java/io/micrometer/ganglia/GangliaMeterRegistryTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-graphite/src/main/java/io/micrometer/graphite/GraphiteConfig.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-graphite/src/main/java/io/micrometer/graphite/GraphiteDimensionalNameMapper.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2020 Pivotal Software, Inc.
+ * Copyright 2020 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-graphite/src/main/java/io/micrometer/graphite/GraphiteDimensionalNamingConvention.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2020 Pivotal Software, Inc.
+ * Copyright 2020 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-graphite/src/main/java/io/micrometer/graphite/GraphiteHierarchicalNameMapper.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-graphite/src/main/java/io/micrometer/graphite/GraphiteHierarchicalNamingConvention.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-graphite/src/main/java/io/micrometer/graphite/GraphiteMeterRegistry.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-graphite/src/main/java/io/micrometer/graphite/GraphiteProtocol.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-graphite/src/main/java/io/micrometer/graphite/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-graphite/src/test/java/io/micrometer/graphite/GraphiteDimensionalNameMapperTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2020 Pivotal Software, Inc.
+ * Copyright 2020 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-graphite/src/test/java/io/micrometer/graphite/GraphiteDimensionalNamingConventionTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2020 Pivotal Software, Inc.
+ * Copyright 2020 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-graphite/src/test/java/io/micrometer/graphite/GraphiteHierarchicalNameMapperTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-graphite/src/test/java/io/micrometer/graphite/GraphiteHierarchicalNamingConventionTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-graphite/src/test/java/io/micrometer/graphite/GraphiteMeterRegistryCompatibilityTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-graphite/src/test/java/io/micrometer/graphite/GraphiteMeterRegistryTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-humio/src/main/java/io/micrometer/humio/HumioConfig.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-humio/src/main/java/io/micrometer/humio/HumioMeterRegistry.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-humio/src/main/java/io/micrometer/humio/HumioNamingConvention.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-humio/src/main/java/io/micrometer/humio/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -18,4 +18,4 @@
 package io.micrometer.humio;
 
 import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
\ No newline at end of file
+import io.micrometer.core.lang.NonNullFields;

File: implementations/micrometer-registry-humio/src/test/java/io/micrometer/humio/HumioMeterRegistryCompatibilityTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-humio/src/test/java/io/micrometer/humio/HumioMeterRegistryTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-humio/src/test/java/io/micrometer/humio/HumioNamingConventionTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-influx/src/main/java/io/micrometer/influx/CreateDatabaseQueryBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-influx/src/main/java/io/micrometer/influx/InfluxConfig.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-influx/src/main/java/io/micrometer/influx/InfluxConsistency.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-influx/src/main/java/io/micrometer/influx/InfluxMeterRegistry.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-influx/src/main/java/io/micrometer/influx/InfluxNamingConvention.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-influx/src/main/java/io/micrometer/influx/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-influx/src/test/java/io/micrometer/influx/CreateDatabaseQueryBuilderTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-influx/src/test/java/io/micrometer/influx/InfluxMeterRegistryCompatibilityTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-influx/src/test/java/io/micrometer/influx/InfluxMeterRegistryFieldTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-influx/src/test/java/io/micrometer/influx/InfluxMeterRegistryTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2019 Pivotal Software, Inc.
+ * Copyright 2019 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-influx/src/test/java/io/micrometer/influx/InfluxNamingConventionTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-jmx/src/main/java/io/micrometer/jmx/JmxConfig.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-jmx/src/main/java/io/micrometer/jmx/JmxMeterRegistry.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-jmx/src/main/java/io/micrometer/jmx/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-jmx/src/test/java/io/micrometer/jmx/JmxMeterRegistryCompatibilityTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-kairos/src/main/java/io/micrometer/kairos/KairosConfig.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2018 Pivotal Software, Inc.
+ * Copyright 2018 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-kairos/src/main/java/io/micrometer/kairos/KairosMeterRegistry.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2018 Pivotal Software, Inc.
+ * Copyright 2018 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-kairos/src/main/java/io/micrometer/kairos/KairosNamingConvention.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2018 Pivotal Software, Inc.
+ * Copyright 2018 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-kairos/src/main/java/io/micrometer/kairos/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2018 Pivotal Software, Inc.
+ * Copyright 2018 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -18,4 +18,4 @@
 package io.micrometer.kairos;
 
 import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
\ No newline at end of file
+import io.micrometer.core.lang.NonNullFields;

File: implementations/micrometer-registry-kairos/src/test/java/io/micrometer/kairos/KairosMeterRegistryCompatibilityTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-kairos/src/test/java/io/micrometer/kairos/KairosMeterRegistryTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2019 Pivotal Software, Inc.
+ * Copyright 2019 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-kairos/src/test/java/io/micrometer/kairos/KairosNamingConventionTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -30,4 +30,4 @@ class KairosNamingConventionTest {
     void defaultToSnakeCase() {
         assertThat(convention.name("gauge.size", Meter.Type.GAUGE)).isEqualTo("gauge_size");
     }
-}
\ No newline at end of file
+}

File: implementations/micrometer-registry-new-relic/src/main/java/io/micrometer/newrelic/ClientProviderType.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2020 Pivotal Software, Inc.
+ * Copyright 2020 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-new-relic/src/main/java/io/micrometer/newrelic/NewRelicClientProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2020 Pivotal Software, Inc.
+ * Copyright 2020 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-new-relic/src/main/java/io/micrometer/newrelic/NewRelicConfig.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-new-relic/src/main/java/io/micrometer/newrelic/NewRelicInsightsAgentClientProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2020 Pivotal Software, Inc.
+ * Copyright 2020 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-new-relic/src/main/java/io/micrometer/newrelic/NewRelicInsightsApiClientProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2020 Pivotal Software, Inc.
+ * Copyright 2020 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-new-relic/src/main/java/io/micrometer/newrelic/NewRelicMeterRegistry.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-new-relic/src/main/java/io/micrometer/newrelic/NewRelicNamingConvention.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-new-relic/src/main/java/io/micrometer/newrelic/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-new-relic/src/test/java/io/micrometer/newrelic/NewRelicMeterRegistryCompatibilityTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-new-relic/src/test/java/io/micrometer/newrelic/NewRelicMeterRegistryTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-new-relic/src/test/java/io/micrometer/newrelic/NewRelicNamingConventionTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2019 Pivotal Software, Inc.
+ * Copyright 2019 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-opentsdb/src/main/java/io/micrometer/opentsdb/OpenTSDBConfig.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2020 Pivotal Software, Inc.
+ * Copyright 2020 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-opentsdb/src/main/java/io/micrometer/opentsdb/OpenTSDBDistributionSummary.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2020 Pivotal Software, Inc.
+ * Copyright 2020 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-opentsdb/src/main/java/io/micrometer/opentsdb/OpenTSDBFlavor.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2020 Pivotal Software, Inc.
+ * Copyright 2020 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-opentsdb/src/main/java/io/micrometer/opentsdb/OpenTSDBMeterRegistry.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2020 Pivotal Software, Inc.
+ * Copyright 2020 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-opentsdb/src/main/java/io/micrometer/opentsdb/OpenTSDBNamingConvention.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2020 Pivotal Software, Inc.
+ * Copyright 2020 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-opentsdb/src/main/java/io/micrometer/opentsdb/OpenTSDBTimer.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2020 Pivotal Software, Inc.
+ * Copyright 2020 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-opentsdb/src/main/java/io/micrometer/opentsdb/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2018 Pivotal Software, Inc.
+ * Copyright 2018 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-opentsdb/src/test/java/io/micrometer/opentsdb/OpenTSDBMeterRegistryCompatibilityTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2020 Pivotal Software, Inc.
+ * Copyright 2020 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-opentsdb/src/test/java/io/micrometer/opentsdb/OpenTSDBMeterRegistryTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2020 Pivotal Software, Inc.
+ * Copyright 2020 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-opentsdb/src/test/java/io/micrometer/opentsdb/OpenTSDBNamingConventionTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2020 Pivotal Software, Inc.
+ * Copyright 2020 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/HistogramFlavor.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2020 Pivotal Software, Inc.
+ * Copyright 2020 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/MicrometerCollector.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusConfig.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusCounter.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusDistributionSummary.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusDurationNamingConvention.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusMeterRegistry.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusNamingConvention.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusRenameFilter.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusTimer.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-prometheus/src/test/java/io/micrometer/prometheus/MicrometerCollectorTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-prometheus/src/test/java/io/micrometer/prometheus/PrometheusDurationNamingConventionTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-prometheus/src/test/java/io/micrometer/prometheus/PrometheusMeterRegistryCompatibilityTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-prometheus/src/test/java/io/micrometer/prometheus/PrometheusMeterRegistryTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-prometheus/src/test/java/io/micrometer/prometheus/PrometheusNamingConventionTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-prometheus/src/test/java/io/micrometer/prometheus/PrometheusRenameFilterTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-signalfx/src/main/java/io/micrometer/signalfx/SignalFxConfig.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-signalfx/src/main/java/io/micrometer/signalfx/SignalFxMeterRegistry.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-signalfx/src/main/java/io/micrometer/signalfx/SignalFxNamingConvention.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-signalfx/src/main/java/io/micrometer/signalfx/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-signalfx/src/test/java/io/micrometer/signalfx/SignalFxMeterRegistryCompatibilityTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-signalfx/src/test/java/io/micrometer/signalfx/SignalFxMeterRegistryTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2019 Pivotal Software, Inc.
+ * Copyright 2019 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-signalfx/src/test/java/io/micrometer/signalfx/SignalFxNamingConventionTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-stackdriver/src/main/java/io/micrometer/stackdriver/StackdriverConfig.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2018 Pivotal Software, Inc.
+ * Copyright 2018 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-stackdriver/src/main/java/io/micrometer/stackdriver/StackdriverMeterRegistry.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2018 Pivotal Software, Inc.
+ * Copyright 2018 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-stackdriver/src/main/java/io/micrometer/stackdriver/StackdriverNamingConvention.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2018 Pivotal Software, Inc.
+ * Copyright 2018 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-stackdriver/src/main/java/io/micrometer/stackdriver/UserAgentHeaderProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2019 Pivotal Software, Inc.
+ * Copyright 2019 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-stackdriver/src/main/java/io/micrometer/stackdriver/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -18,4 +18,4 @@
 package io.micrometer.stackdriver;
 
 import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
\ No newline at end of file
+import io.micrometer.core.lang.NonNullFields;

File: implementations/micrometer-registry-stackdriver/src/main/java/io/micrometer/stackdriver/util/ClearCustomMetricDescriptors.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2018 Pivotal Software, Inc.
+ * Copyright 2018 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-stackdriver/src/test/java/io/micrometer/stackdriver/StackdriverMeterRegistryCompatibilityTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2018 Pivotal Software, Inc.
+ * Copyright 2018 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-stackdriver/src/test/java/io/micrometer/stackdriver/StackdriverMeterRegistryTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2020 Pivotal Software, Inc.
+ * Copyright 2020 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-stackdriver/src/test/java/io/micrometer/stackdriver/StackdriverNamingConventionTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2019 Pivotal Software, Inc.
+ * Copyright 2019 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdConfig.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdCounter.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdDistributionSummary.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdFlavor.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -38,4 +38,4 @@ public enum StatsdFlavor {
      * https://support.sysdig.com/hc/en-us/articles/204376099-Metrics-integrations-StatsD
      */
     SYSDIG
-}
\ No newline at end of file
+}

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdFunctionCounter.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdFunctionTimer.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdGauge.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdLineBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdLongTaskTimer.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdMeterRegistry.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdMetrics.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdPollable.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdProtocol.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdTimer.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/internal/BufferingFlux.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/internal/DatadogStatsdLineBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/internal/EtsyStatsdLineBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/internal/FlavorStatsdLineBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -72,4 +72,4 @@ protected String tags(@Nullable Statistic stat, @Nullable String otherTags, Stri
             tags = preamble + tags;
         return tags;
     }
-}
\ No newline at end of file
+}

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/internal/LogbackMetricsSuppressingFluxSink.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/internal/SysdigStatsdLineBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/internal/TelegrafStatsdLineBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/internal/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-statsd/src/test/java/io/micrometer/statsd/StatsdGaugeTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-statsd/src/test/java/io/micrometer/statsd/StatsdMeterRegistryCompatibilityTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-statsd/src/test/java/io/micrometer/statsd/StatsdMeterRegistryPublishTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2020 Pivotal Software, Inc.
+ * Copyright 2020 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-statsd/src/test/java/io/micrometer/statsd/StatsdMeterRegistryTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-statsd/src/test/java/io/micrometer/statsd/internal/BufferingFluxTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-statsd/src/test/java/io/micrometer/statsd/internal/DatadogStatsdLineBuilderTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -49,4 +49,4 @@ void sanitizeColons() {
         registry.config().namingConvention(NamingConvention.dot);
         assertThat(lb.line("1", Statistic.COUNT, "c")).isEqualTo("my_counter:1|c|#statistic:count,my_tag:my_value");
     }
-}
\ No newline at end of file
+}

File: implementations/micrometer-registry-statsd/src/test/java/io/micrometer/statsd/internal/EtsyStatsdLineBuilderTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -50,4 +50,4 @@ void sanitizeColons() {
         registry.config().namingConvention(NamingConvention.dot);
         assertThat(lb.line("1", Statistic.COUNT, "c")).isEqualTo("my_counter.my_tag.my_value.statistic.count:1|c");
     }
-}
\ No newline at end of file
+}

File: implementations/micrometer-registry-statsd/src/test/java/io/micrometer/statsd/internal/SysdigStatsdLineBuilderTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -72,4 +72,4 @@ void sanitizeAllNonAlphaNumericCharacters() {
                 .isEqualTo(expected.toString());
     }
 
-}
\ No newline at end of file
+}

File: implementations/micrometer-registry-statsd/src/test/java/io/micrometer/statsd/internal/TelegrafStatsdLineBuilderTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -57,4 +57,4 @@ void sanitizeColons() {
         registry.config().namingConvention(NamingConvention.dot);
         assertThat(lb.line("1", Statistic.COUNT, "c")).isEqualTo("my_counter,statistic=count,my_tag=my_value:1|c");
     }
-}
\ No newline at end of file
+}

File: implementations/micrometer-registry-wavefront/src/main/java/io/micrometer/wavefront/WavefrontConfig.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-wavefront/src/main/java/io/micrometer/wavefront/WavefrontDistributionSummary.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2019 Pivotal Software, Inc.
+ * Copyright 2019 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-wavefront/src/main/java/io/micrometer/wavefront/WavefrontMeterRegistry.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-wavefront/src/main/java/io/micrometer/wavefront/WavefrontMetricLineData.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2019 Pivotal Software, Inc.
+ * Copyright 2019 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-wavefront/src/main/java/io/micrometer/wavefront/WavefrontNamingConvention.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-wavefront/src/main/java/io/micrometer/wavefront/WavefrontTimer.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2019 Pivotal Software, Inc.
+ * Copyright 2019 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-wavefront/src/main/java/io/micrometer/wavefront/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-wavefront/src/test/java/io/micrometer/wavefront/WavefrontMeterRegistryCompatibilityTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-wavefront/src/test/java/io/micrometer/wavefront/WavefrontMeterRegistryTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-wavefront/src/test/java/io/micrometer/wavefront/WavefrontNamingConventionTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -38,4 +38,4 @@ void tagValue() {
         assertThat(convention.tagValue("123abc/\"{:id}水\\")).isEqualTo("123abc/\\\"{:id}水_");
         assertThat(convention.tagValue("\\")).isEqualTo("_");
     }
-}
\ No newline at end of file
+}

File: micrometer-core/src/main/java/io/micrometer/core/annotation/Counted.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/annotation/Incubating.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/annotation/Timed.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/annotation/TimedSet.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/aop/CountedAspect.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/aop/TimedAspect.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/AbstractDistributionSummary.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/AbstractMeter.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/AbstractTimer.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Clock.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Counter.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/DistributionSummary.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/FunctionCounter.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/FunctionTimer.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Gauge.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/ImmutableTag.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/LongTaskTimer.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Measurement.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Meter.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/MeterRegistry.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Metrics.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/MockClock.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/MultiGauge.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2018 Pivotal Software, Inc.
+ * Copyright 2018 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Statistic.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/StrongReferenceGaugeFunction.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2018 Pivotal Software, Inc.
+ * Copyright 2018 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -46,4 +46,4 @@ class StrongReferenceGaugeFunction<T> implements ToDoubleFunction<T> {
     public double applyAsDouble(T value) {
         return f.applyAsDouble(value);
     }
-}
\ No newline at end of file
+}

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Tag.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Tags.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/TimeGauge.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Timer.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2019 Pivotal Software, Inc.
+ * Copyright 2019 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/BaseUnits.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/MeterBinder.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/CacheMeterBinder.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/CaffeineCacheMetrics.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/EhCache2Metrics.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/GuavaCacheMetrics.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/HazelcastCacheMetrics.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/JCacheMetrics.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,4 +16,4 @@
 @NonNullApi
 package io.micrometer.core.instrument.binder.cache;
 
-import io.micrometer.core.lang.NonNullApi;
\ No newline at end of file
+import io.micrometer.core.lang.NonNullApi;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/db/DatabaseTableMetrics.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/db/JooqExecuteListener.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2020 Pivotal Software, Inc.
+ * Copyright 2020 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/db/MetricsDSLContext.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2020 Pivotal Software, Inc.
+ * Copyright 2020 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/db/PostgreSQLDatabaseMetrics.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/http/DefaultHttpServletRequestTagsProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2020 Pivotal Software, Inc.
+ * Copyright 2020 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/http/HttpRequestTags.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2020 Pivotal Software, Inc.
+ * Copyright 2020 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/http/HttpServletRequestTagsProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2020 Pivotal Software, Inc.
+ * Copyright 2020 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/http/Outcome.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2020 Pivotal Software, Inc.
+ * Copyright 2020 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/http/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2020 Pivotal Software, Inc.
+ * Copyright 2020 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/httpcomponents/DefaultUriMapper.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2020 Pivotal Software, Inc.
+ * Copyright 2020 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/httpcomponents/HttpContextUtils.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2020 Pivotal Software, Inc.
+ * Copyright 2020 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/httpcomponents/MicrometerHttpClientInterceptor.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2020 Pivotal Software, Inc.
+ * Copyright 2020 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/httpcomponents/MicrometerHttpRequestExecutor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Pivotal Software, Inc.
+ * Copyright 2019 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/httpcomponents/PoolingHttpClientConnectionManagerMetricsBinder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Pivotal Software, Inc.
+ * Copyright 2019 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/hystrix/HystrixMetricsBinder.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/hystrix/MicrometerMetricsPublisher.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/hystrix/MicrometerMetricsPublisherCommand.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/hystrix/MicrometerMetricsPublisherThreadPool.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jetty/InstrumentedQueuedThreadPool.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2019 Pivotal Software, Inc.
+ * Copyright 2019 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jetty/JettyConnectionMetrics.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2019 Pivotal Software, Inc.
+ * Copyright 2019 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jetty/JettyServerThreadPoolMetrics.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2019 Pivotal Software, Inc.
+ * Copyright 2019 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jetty/OnCompletionAsyncListener.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2019 Pivotal Software, Inc.
+ * Copyright 2019 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jetty/TimedHandler.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2019 Pivotal Software, Inc.
+ * Copyright 2019 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jpa/HibernateMetrics.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jpa/HibernateQueryMetrics.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2020 Pivotal Software, Inc.
+ * Copyright 2020 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jvm/ClassLoaderMetrics.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: benchmarks/benchmarks-core/src/jmh/java/io/micrometer/benchmark/compare/CompareCountersWithOtherLibraries.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2018 Pivotal Software, Inc.
+ * Copyright 2018 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -164,4 +164,4 @@ public static void main(String[] args) throws RunnerException {
                 .build();
         new Runner(opt).run();
     }
-}
\ No newline at end of file
+}

File: benchmarks/benchmarks-core/src/jmh/java/io/micrometer/benchmark/compare/CompareHistogramsWithOtherLibraries.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2018 Pivotal Software, Inc.
+ * Copyright 2018 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -194,4 +194,4 @@ public static void main(String[] args) throws RunnerException {
                 .build();
         new Runner(opt).run();
     }
-}
\ No newline at end of file
+}

File: benchmarks/benchmarks-core/src/jmh/java/io/micrometer/benchmark/core/CounterBenchmark.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: benchmarks/benchmarks-core/src/jmh/java/io/micrometer/benchmark/core/MeterRegistrationBenchmark.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: benchmarks/benchmarks-core/src/jmh/java/io/micrometer/benchmark/core/TagsBenchmark.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2018 Pivotal Software, Inc.
+ * Copyright 2018 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: benchmarks/benchmarks-core/src/jmh/java/io/micrometer/benchmark/core/TimerBenchmark.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-appoptics/src/main/java/io/micrometer/appoptics/AppOpticsConfig.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2018 Pivotal Software, Inc.
+ * Copyright 2018 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-appoptics/src/main/java/io/micrometer/appoptics/AppOpticsMeterRegistry.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2018 Pivotal Software, Inc.
+ * Copyright 2018 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-appoptics/src/main/java/io/micrometer/appoptics/AppOpticsNamingConvention.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2018 Pivotal Software, Inc.
+ * Copyright 2018 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-appoptics/src/main/java/io/micrometer/appoptics/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2018 Pivotal Software, Inc.
+ * Copyright 2018 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-appoptics/src/test/java/io/micrometer/appoptics/AppOpticsMeterRegistryCompatibilityTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-appoptics/src/test/java/io/micrometer/appoptics/AppOpticsMeterRegistryTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2018 Pivotal Software, Inc.
+ * Copyright 2018 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-atlas/src/main/java/io/micrometer/atlas/AtlasMeterRegistry.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-atlas/src/main/java/io/micrometer/atlas/AtlasNamingConvention.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-atlas/src/main/java/io/micrometer/atlas/AtlasUtils.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-atlas/src/main/java/io/micrometer/atlas/SpectatorCounter.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-atlas/src/main/java/io/micrometer/atlas/SpectatorDistributionSummary.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-atlas/src/main/java/io/micrometer/atlas/SpectatorGauge.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-atlas/src/main/java/io/micrometer/atlas/SpectatorLongTaskTimer.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -66,4 +66,4 @@ public boolean equals(Object o) {
     public int hashCode() {
         return MeterEquivalence.hashCode(this);
     }
-}
\ No newline at end of file
+}

File: implementations/micrometer-registry-atlas/src/main/java/io/micrometer/atlas/SpectatorTimer.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-atlas/src/main/java/io/micrometer/atlas/SpectatorToDoubleGauge.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -44,4 +44,4 @@ public double value() {
         final T obj = ref.get();
         return (obj == null) ? Double.NaN : f.applyAsDouble(obj);
     }
-}
\ No newline at end of file
+}

File: implementations/micrometer-registry-atlas/src/main/java/io/micrometer/atlas/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-atlas/src/test/java/io/micrometer/atlas/AtlasMeterRegistryCompatibilityTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-atlas/src/test/java/io/micrometer/atlas/AtlasMeterRegistryTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-atlas/src/test/java/io/micrometer/atlas/AtlasNamingConventionTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -34,4 +34,4 @@ void replaceNameTag() {
     void replaceStatisticTag() {
         assertThat(namingConvention.tagKey("statistic")).isEqualTo("statisticTag");
     }
-}
\ No newline at end of file
+}

File: implementations/micrometer-registry-atlas/src/test/java/io/micrometer/atlas/SpectatorTimerTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-azure-monitor/src/main/java/io/micrometer/azuremonitor/AzureMonitorConfig.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2018 Pivotal Software, Inc.
+ * Copyright 2018 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-azure-monitor/src/main/java/io/micrometer/azuremonitor/AzureMonitorMeterRegistry.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2018 Pivotal Software, Inc.
+ * Copyright 2018 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-azure-monitor/src/main/java/io/micrometer/azuremonitor/AzureMonitorNamingConvention.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2018 Pivotal Software, Inc.
+ * Copyright 2018 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-azure-monitor/src/main/java/io/micrometer/azuremonitor/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2018 Pivotal Software, Inc.
+ * Copyright 2018 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-azure-monitor/src/test/java/io/micrometer/azuremonitor/AzureMonitorMeterRegistryCompatibilityKit.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2018 Pivotal Software, Inc.
+ * Copyright 2018 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-azure-monitor/src/test/java/io/micrometer/azuremonitor/AzureMonitorNamingConventionTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2018 Pivotal Software, Inc.
+ * Copyright 2018 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -32,4 +32,4 @@ void testNameContainsDesiredCharacters() {
     void testTagKeyContainsDesiredCharacters() {
         assertThat(namingConvention.tagKey("Pc.N@me")).isEqualTo("Pc_N_me");
     }
-}
\ No newline at end of file
+}

File: implementations/micrometer-registry-cloudwatch/src/main/java/io/micrometer/cloudwatch/CloudWatchConfig.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-cloudwatch/src/main/java/io/micrometer/cloudwatch/CloudWatchMeterRegistry.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-cloudwatch/src/main/java/io/micrometer/cloudwatch/CloudWatchNamingConvention.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-cloudwatch/src/main/java/io/micrometer/cloudwatch/CloudWatchUtils.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-cloudwatch/src/main/java/io/micrometer/cloudwatch/MetricDatumPartition.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-cloudwatch/src/main/java/io/micrometer/cloudwatch/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-cloudwatch/src/test/java/io/micrometer/cloudwatch/CloudWatchMeterRegistryCompatibilityTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-cloudwatch/src/test/java/io/micrometer/cloudwatch/CloudWatchMeterRegistryTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-cloudwatch/src/test/java/io/micrometer/cloudwatch/CloudWatchNamingConventionTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-cloudwatch/src/test/java/io/micrometer/cloudwatch/CloudWatchUtilsTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-cloudwatch2/src/main/java/io/micrometer/cloudwatch2/CloudWatchConfig.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-cloudwatch2/src/main/java/io/micrometer/cloudwatch2/CloudWatchMeterRegistry.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-cloudwatch2/src/main/java/io/micrometer/cloudwatch2/CloudWatchNamingConvention.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-cloudwatch2/src/main/java/io/micrometer/cloudwatch2/CloudWatchUtils.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-cloudwatch2/src/main/java/io/micrometer/cloudwatch2/MetricDatumPartition.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-cloudwatch2/src/main/java/io/micrometer/cloudwatch2/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-cloudwatch2/src/test/java/io/micrometer/cloudwatch2/CloudWatchMeterRegistryCompatibilityTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-cloudwatch2/src/test/java/io/micrometer/cloudwatch2/CloudWatchMeterRegistryTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-cloudwatch2/src/test/java/io/micrometer/cloudwatch2/CloudWatchNamingConventionTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-cloudwatch2/src/test/java/io/micrometer/cloudwatch2/CloudWatchUtilsTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-datadog/src/main/java/io/micrometer/datadog/DatadogConfig.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-datadog/src/main/java/io/micrometer/datadog/DatadogMeterRegistry.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-datadog/src/main/java/io/micrometer/datadog/DatadogMetricMetadata.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-datadog/src/main/java/io/micrometer/datadog/DatadogNamingConvention.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-datadog/src/main/java/io/micrometer/datadog/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-datadog/src/test/java/io/micrometer/datadog/DatadogConfigTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2019 Pivotal Software, Inc.
+ * Copyright 2019 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-datadog/src/test/java/io/micrometer/datadog/DatadogMeterRegistryCompatibilityTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-datadog/src/test/java/io/micrometer/datadog/DatadogMeterRegistryTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -75,4 +75,4 @@ public boolean enabled() {
 
         registry.close();
     }
-}
\ No newline at end of file
+}

File: implementations/micrometer-registry-datadog/src/test/java/io/micrometer/datadog/DatadogMetricMetadataTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-datadog/src/test/java/io/micrometer/datadog/DatadogNamingConventionTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-dynatrace/src/main/java/io/micrometer/dynatrace/DynatraceBatchedPayload.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2019 Pivotal Software, Inc.
+ * Copyright 2019 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-dynatrace/src/main/java/io/micrometer/dynatrace/DynatraceConfig.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-dynatrace/src/main/java/io/micrometer/dynatrace/DynatraceMeterRegistry.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-dynatrace/src/main/java/io/micrometer/dynatrace/DynatraceMetricDefinition.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-dynatrace/src/main/java/io/micrometer/dynatrace/DynatraceNamingConvention.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-dynatrace/src/main/java/io/micrometer/dynatrace/DynatraceTimeSeries.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-dynatrace/src/main/java/io/micrometer/dynatrace/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -19,4 +19,4 @@
 package io.micrometer.dynatrace;
 
 import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
\ No newline at end of file
+import io.micrometer.core.lang.NonNullFields;

File: implementations/micrometer-registry-dynatrace/src/test/java/io/micrometer/dynatrace/DynatraceMeterRegistryCompatibilityTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-dynatrace/src/test/java/io/micrometer/dynatrace/DynatraceMeterRegistryTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-dynatrace/src/test/java/io/micrometer/dynatrace/DynatraceMetricDefinitionTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-dynatrace/src/test/java/io/micrometer/dynatrace/DynatraceNamingConventionTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-dynatrace/src/test/java/io/micrometer/dynatrace/DynatraceTimeSeriesTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-elastic/src/main/java/io/micrometer/elastic/ElasticConfig.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-elastic/src/main/java/io/micrometer/elastic/ElasticMeterRegistry.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-elastic/src/main/java/io/micrometer/elastic/ElasticNamingConvention.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-elastic/src/main/java/io/micrometer/elastic/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,4 +13,4 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.elastic;
\ No newline at end of file
+package io.micrometer.elastic;

File: implementations/micrometer-registry-elastic/src/test/java/io/micrometer/elastic/ElasticMeterRegistryCompatibilityTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-elastic/src/test/java/io/micrometer/elastic/ElasticMeterRegistryTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-elastic/src/test/java/io/micrometer/elastic/ElasticNamingConventionTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-ganglia/src/main/java/io/micrometer/ganglia/GangliaConfig.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-ganglia/src/main/java/io/micrometer/ganglia/GangliaMeterRegistry.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-ganglia/src/main/java/io/micrometer/ganglia/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-ganglia/src/test/java/io/micrometer/ganglia/GangliaMeterRegistryCompatibilityTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-ganglia/src/test/java/io/micrometer/ganglia/GangliaMeterRegistryTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-graphite/src/main/java/io/micrometer/graphite/GraphiteConfig.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-graphite/src/main/java/io/micrometer/graphite/GraphiteHierarchicalNameMapper.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-graphite/src/main/java/io/micrometer/graphite/GraphiteMeterRegistry.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-graphite/src/main/java/io/micrometer/graphite/GraphiteNamingConvention.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-graphite/src/main/java/io/micrometer/graphite/GraphiteProtocol.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-graphite/src/main/java/io/micrometer/graphite/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-graphite/src/test/java/io/micrometer/graphite/GraphiteHierarchicalNameMapperTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-graphite/src/test/java/io/micrometer/graphite/GraphiteMeterRegistryCompatibilityTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-graphite/src/test/java/io/micrometer/graphite/GraphiteMeterRegistryTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -107,4 +107,4 @@ public String[] tagsAsPrefix() {
         assertTrue(receiveLatch.await(10, TimeUnit.SECONDS), "line was received");
         server.dispose();
     }
-}
\ No newline at end of file
+}

File: implementations/micrometer-registry-graphite/src/test/java/io/micrometer/graphite/GraphiteNamingConventionTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-humio/src/main/java/io/micrometer/humio/HumioConfig.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-humio/src/main/java/io/micrometer/humio/HumioMeterRegistry.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-humio/src/main/java/io/micrometer/humio/HumioNamingConvention.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-humio/src/main/java/io/micrometer/humio/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -18,4 +18,4 @@
 package io.micrometer.humio;
 
 import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
\ No newline at end of file
+import io.micrometer.core.lang.NonNullFields;

File: implementations/micrometer-registry-humio/src/test/java/io/micrometer/humio/HumioMeterRegistryCompatibilityTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-humio/src/test/java/io/micrometer/humio/HumioMeterRegistryTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-humio/src/test/java/io/micrometer/humio/HumioNamingConventionTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-influx/src/main/java/io/micrometer/influx/CreateDatabaseQueryBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-influx/src/main/java/io/micrometer/influx/InfluxConfig.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-influx/src/main/java/io/micrometer/influx/InfluxConsistency.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-influx/src/main/java/io/micrometer/influx/InfluxMeterRegistry.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-influx/src/main/java/io/micrometer/influx/InfluxNamingConvention.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-influx/src/main/java/io/micrometer/influx/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-influx/src/test/java/io/micrometer/influx/CreateDatabaseQueryBuilderTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-influx/src/test/java/io/micrometer/influx/InfluxMeterRegistryCompatibilityTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-influx/src/test/java/io/micrometer/influx/InfluxMeterRegistryFieldTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-influx/src/test/java/io/micrometer/influx/InfluxMeterRegistryTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2019 Pivotal Software, Inc.
+ * Copyright 2019 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-influx/src/test/java/io/micrometer/influx/InfluxNamingConventionTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-jmx/src/main/java/io/micrometer/jmx/JmxConfig.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-jmx/src/main/java/io/micrometer/jmx/JmxMeterRegistry.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-jmx/src/main/java/io/micrometer/jmx/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-jmx/src/test/java/io/micrometer/jmx/JmxMeterRegistryCompatibilityTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-kairos/src/main/java/io/micrometer/kairos/KairosConfig.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2018 Pivotal Software, Inc.
+ * Copyright 2018 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-kairos/src/main/java/io/micrometer/kairos/KairosMeterRegistry.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2018 Pivotal Software, Inc.
+ * Copyright 2018 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-kairos/src/main/java/io/micrometer/kairos/KairosNamingConvention.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2018 Pivotal Software, Inc.
+ * Copyright 2018 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-kairos/src/main/java/io/micrometer/kairos/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2018 Pivotal Software, Inc.
+ * Copyright 2018 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -18,4 +18,4 @@
 package io.micrometer.kairos;
 
 import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
\ No newline at end of file
+import io.micrometer.core.lang.NonNullFields;

File: implementations/micrometer-registry-kairos/src/test/java/io/micrometer/kairos/KairosMeterRegistryCompatibilityTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-kairos/src/test/java/io/micrometer/kairos/KairosMeterRegistryTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2019 Pivotal Software, Inc.
+ * Copyright 2019 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-kairos/src/test/java/io/micrometer/kairos/KairosNamingConventionTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -30,4 +30,4 @@ class KairosNamingConventionTest {
     void defaultToSnakeCase() {
         assertThat(convention.name("gauge.size", Meter.Type.GAUGE)).isEqualTo("gauge_size");
     }
-}
\ No newline at end of file
+}

File: implementations/micrometer-registry-new-relic/src/main/java/io/micrometer/newrelic/NewRelicConfig.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-new-relic/src/main/java/io/micrometer/newrelic/NewRelicMeterRegistry.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-new-relic/src/main/java/io/micrometer/newrelic/NewRelicNamingConvention.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-new-relic/src/main/java/io/micrometer/newrelic/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-new-relic/src/test/java/io/micrometer/newrelic/NewRelicMeterRegistryCompatibilityTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-new-relic/src/test/java/io/micrometer/newrelic/NewRelicMeterRegistryTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-new-relic/src/test/java/io/micrometer/newrelic/NewRelicNamingConventionTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2019 Pivotal Software, Inc.
+ * Copyright 2019 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/MicrometerCollector.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusConfig.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusCounter.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusDistributionSummary.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusDurationNamingConvention.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusMeterRegistry.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusNamingConvention.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusRenameFilter.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusTimer.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-prometheus/src/test/java/io/micrometer/prometheus/MicrometerCollectorTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-prometheus/src/test/java/io/micrometer/prometheus/PrometheusDurationNamingConventionTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-prometheus/src/test/java/io/micrometer/prometheus/PrometheusMeterRegistryCompatibilityTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-prometheus/src/test/java/io/micrometer/prometheus/PrometheusMeterRegistryTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-prometheus/src/test/java/io/micrometer/prometheus/PrometheusNamingConventionTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-prometheus/src/test/java/io/micrometer/prometheus/PrometheusRenameFilterTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-signalfx/src/main/java/io/micrometer/signalfx/SignalFxConfig.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-signalfx/src/main/java/io/micrometer/signalfx/SignalFxMeterRegistry.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-signalfx/src/main/java/io/micrometer/signalfx/SignalFxNamingConvention.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-signalfx/src/main/java/io/micrometer/signalfx/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-signalfx/src/test/java/io/micrometer/signalfx/SignalFxMeterRegistryCompatibilityTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-signalfx/src/test/java/io/micrometer/signalfx/SignalFxMeterRegistryTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2019 Pivotal Software, Inc.
+ * Copyright 2019 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-signalfx/src/test/java/io/micrometer/signalfx/SignalFxNamingConventionTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-stackdriver/src/main/java/io/micrometer/stackdriver/StackdriverConfig.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2018 Pivotal Software, Inc.
+ * Copyright 2018 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-stackdriver/src/main/java/io/micrometer/stackdriver/StackdriverMeterRegistry.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2018 Pivotal Software, Inc.
+ * Copyright 2018 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-stackdriver/src/main/java/io/micrometer/stackdriver/StackdriverNamingConvention.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2018 Pivotal Software, Inc.
+ * Copyright 2018 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-stackdriver/src/main/java/io/micrometer/stackdriver/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -18,4 +18,4 @@
 package io.micrometer.stackdriver;
 
 import io.micrometer.core.lang.NonNullApi;
-import io.micrometer.core.lang.NonNullFields;
\ No newline at end of file
+import io.micrometer.core.lang.NonNullFields;

File: implementations/micrometer-registry-stackdriver/src/main/java/io/micrometer/stackdriver/util/ClearCustomMetricDescriptors.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2018 Pivotal Software, Inc.
+ * Copyright 2018 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-stackdriver/src/test/java/io/micrometer/stackdriver/StackdriverMeterRegistryCompatibilityTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2018 Pivotal Software, Inc.
+ * Copyright 2018 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-stackdriver/src/test/java/io/micrometer/stackdriver/StackdriverMeterRegistryTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2020 Pivotal Software, Inc.
+ * Copyright 2020 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-stackdriver/src/test/java/io/micrometer/stackdriver/StackdriverNamingConventionTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2019 Pivotal Software, Inc.
+ * Copyright 2019 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdConfig.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdCounter.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdDistributionSummary.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdFlavor.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -38,4 +38,4 @@ public enum StatsdFlavor {
      * https://support.sysdig.com/hc/en-us/articles/204376099-Metrics-integrations-StatsD
      */
     SYSDIG
-}
\ No newline at end of file
+}

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdFunctionCounter.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdFunctionTimer.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdGauge.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdLineBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdLongTaskTimer.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdMeterRegistry.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdMetrics.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdPollable.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdProtocol.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdTimer.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/internal/BufferingFlux.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/internal/DatadogStatsdLineBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/internal/EtsyStatsdLineBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/internal/FlavorStatsdLineBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -72,4 +72,4 @@ protected String tags(@Nullable Statistic stat, @Nullable String otherTags, Stri
             tags = preamble + tags;
         return tags;
     }
-}
\ No newline at end of file
+}

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/internal/LogbackMetricsSuppressingUnicastProcessor.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -60,4 +60,4 @@ public int size() {
     public int getBufferSize() {
         return processor.getBufferSize();
     }
-}
\ No newline at end of file
+}

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/internal/SysdigStatsdLineBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -89,4 +89,4 @@ private String tagsByStatistic(@Nullable Statistic stat) {
             return tagString;
         }
     }
-}
\ No newline at end of file
+}

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/internal/TelegrafStatsdLineBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/internal/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-statsd/src/test/java/io/micrometer/statsd/StatsdGaugeTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-statsd/src/test/java/io/micrometer/statsd/StatsdMeterRegistryCompatibilityTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-statsd/src/test/java/io/micrometer/statsd/StatsdMeterRegistryTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-statsd/src/test/java/io/micrometer/statsd/internal/BufferingFluxTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-statsd/src/test/java/io/micrometer/statsd/internal/DatadogStatsdLineBuilderTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -49,4 +49,4 @@ void sanitizeColons() {
         registry.config().namingConvention(NamingConvention.dot);
         assertThat(lb.line("1", Statistic.COUNT, "c")).isEqualTo("my_counter:1|c|#statistic:count,my_tag:my_value");
     }
-}
\ No newline at end of file
+}

File: implementations/micrometer-registry-statsd/src/test/java/io/micrometer/statsd/internal/EtsyStatsdLineBuilderTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -50,4 +50,4 @@ void sanitizeColons() {
         registry.config().namingConvention(NamingConvention.dot);
         assertThat(lb.line("1", Statistic.COUNT, "c")).isEqualTo("my_counter.my_tag.my_value.statistic.count:1|c");
     }
-}
\ No newline at end of file
+}

File: implementations/micrometer-registry-statsd/src/test/java/io/micrometer/statsd/internal/SysdigStatsdLineBuilderTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -72,4 +72,4 @@ void sanitizeAllNonAlphaNumericCharacters() {
                 .isEqualTo(expected.toString());
     }
 
-}
\ No newline at end of file
+}

File: implementations/micrometer-registry-statsd/src/test/java/io/micrometer/statsd/internal/TelegrafStatsdLineBuilderTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -57,4 +57,4 @@ void sanitizeColons() {
         registry.config().namingConvention(NamingConvention.dot);
         assertThat(lb.line("1", Statistic.COUNT, "c")).isEqualTo("my_counter,statistic=count,my_tag=my_value:1|c");
     }
-}
\ No newline at end of file
+}

File: implementations/micrometer-registry-wavefront/src/main/java/io/micrometer/wavefront/WavefrontConfig.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-wavefront/src/main/java/io/micrometer/wavefront/WavefrontDistributionSummary.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2019 Pivotal Software, Inc.
+ * Copyright 2019 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-wavefront/src/main/java/io/micrometer/wavefront/WavefrontMeterRegistry.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-wavefront/src/main/java/io/micrometer/wavefront/WavefrontMetricLineData.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2019 Pivotal Software, Inc.
+ * Copyright 2019 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-wavefront/src/main/java/io/micrometer/wavefront/WavefrontNamingConvention.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-wavefront/src/main/java/io/micrometer/wavefront/WavefrontTimer.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2019 Pivotal Software, Inc.
+ * Copyright 2019 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-wavefront/src/main/java/io/micrometer/wavefront/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-wavefront/src/test/java/io/micrometer/wavefront/WavefrontMeterRegistryCompatibilityTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-wavefront/src/test/java/io/micrometer/wavefront/WavefrontMeterRegistryTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-wavefront/src/test/java/io/micrometer/wavefront/WavefrontNamingConventionTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -38,4 +38,4 @@ void tagValue() {
         assertThat(convention.tagValue("123abc/\"{:id}水\\")).isEqualTo("123abc/\\\"{:id}水_");
         assertThat(convention.tagValue("\\")).isEqualTo("_");
     }
-}
\ No newline at end of file
+}

File: micrometer-core/src/main/java/io/micrometer/core/annotation/Counted.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/annotation/Incubating.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/annotation/Timed.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/annotation/TimedSet.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/aop/CountedAspect.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/aop/TimedAspect.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/AbstractDistributionSummary.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/AbstractMeter.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/AbstractTimer.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Clock.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Counter.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/DistributionSummary.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/FunctionCounter.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/FunctionTimer.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Gauge.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/ImmutableTag.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/LongTaskTimer.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Measurement.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Meter.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/MeterRegistry.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Metrics.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/MockClock.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/MultiGauge.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2018 Pivotal Software, Inc.
+ * Copyright 2018 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Statistic.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/StrongReferenceGaugeFunction.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2018 Pivotal Software, Inc.
+ * Copyright 2018 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -46,4 +46,4 @@ class StrongReferenceGaugeFunction<T> implements ToDoubleFunction<T> {
     public double applyAsDouble(T value) {
         return f.applyAsDouble(value);
     }
-}
\ No newline at end of file
+}

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Tag.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Tags.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/TimeGauge.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Timer.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2019 Pivotal Software, Inc.
+ * Copyright 2019 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -154,7 +154,7 @@ default Runnable wrap(Runnable f) {
     default <T> Callable<T> wrap(Callable<T> f) {
         return () -> recordCallable(f);
     }
-    
+
     /**
      * Wrap a {@link Supplier} so that it is timed when invoked.
      *

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/BaseUnits.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/MeterBinder.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/CacheMeterBinder.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/CaffeineCacheMetrics.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/EhCache2Metrics.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/GuavaCacheMetrics.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/HazelcastCacheMetrics.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/JCacheMetrics.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,4 +16,4 @@
 @NonNullApi
 package io.micrometer.core.instrument.binder.cache;
 
-import io.micrometer.core.lang.NonNullApi;
\ No newline at end of file
+import io.micrometer.core.lang.NonNullApi;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/db/DatabaseTableMetrics.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/db/PostgreSQLDatabaseMetrics.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/httpcomponents/MicrometerHttpRequestExecutor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Pivotal Software, Inc.
+ * Copyright 2019 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/httpcomponents/PoolingHttpClientConnectionManagerMetricsBinder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Pivotal Software, Inc.
+ * Copyright 2019 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/hystrix/HystrixMetricsBinder.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/hystrix/MicrometerMetricsPublisher.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/hystrix/MicrometerMetricsPublisherCommand.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/hystrix/MicrometerMetricsPublisherThreadPool.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jetty/InstrumentedQueuedThreadPool.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jetty/JettyServerThreadPoolMetrics.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jetty/JettyStatisticsMetrics.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jpa/HibernateMetrics.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jvm/ClassLoaderMetrics.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jvm/DiskSpaceMetrics.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jvm/ExecutorServiceMetrics.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jvm/JvmGcMetrics.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jvm/JvmMemory.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2019 Pivotal Software, Inc.
+ * Copyright 2019 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jvm/JvmMemoryMetrics.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jvm/JvmThreadMetrics.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/kafka/KafkaConsumerMetrics.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2018 Pivotal Software, Inc.
+ * Copyright 2018 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/logging/Log4j2Metrics.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/logging/LogbackMetrics.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/mongodb/MongoMetricsCommandListener.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2019 Pivotal Software, Inc.
+ * Copyright 2019 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/mongodb/MongoMetricsConnectionPoolListener.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2019 Pivotal Software, Inc.
+ * Copyright 2019 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/okhttp3/OkHttpMetricsEventListener.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/system/FileDescriptorMetrics.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/system/ProcessorMetrics.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/system/UptimeMetrics.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/tomcat/TomcatMetrics.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/AbstractCompositeMeter.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeCounter.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeCustomMeter.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeDistributionSummary.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeFunctionCounter.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeFunctionTimer.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeGauge.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeLongTaskTimer.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeMeter.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeMeterRegistry.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeTimeGauge.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeTimer.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/config/InvalidConfigurationException.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/config/MeterFilter.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/config/MeterFilterReply.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/config/MeterRegistryConfig.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/config/MissingRequiredConfigurationException.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/config/NamingConvention.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/config/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/cumulative/CumulativeCounter.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2017 VMware, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-wavefront/src/main/java/io/micrometer/wavefront/WavefrontMeterRegistry.java
Patch:
@@ -317,7 +317,7 @@ public static WavefrontDirectIngestionClient.Builder getDefaultSenderBuilder(Wav
                     "apiToken must be set whenever publishing directly to the Wavefront API");
         }
         return new WavefrontDirectIngestionClient.Builder(getWavefrontReportingUri(config),
-                config.apiToken());
+                config.apiToken()).batchSize(config.batchSize());
     }
 
     public static Builder builder(WavefrontConfig config) {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/MeterRegistry.java
Patch:
@@ -425,7 +425,7 @@ public More more() {
      * @param obj           State object used to compute a value.
      * @param valueFunction Function that produces an instantaneous gauge value from the state object.
      * @param <T>           The type of the state object from which the gauge value is extracted.
-     * @return The number that was passed in so the registration can be done as part of an assignment
+     * @return The state object that was passed in so the registration can be done as part of an assignment
      * statement.
      */
     @Nullable

File: implementations/micrometer-registry-new-relic/src/main/java/io/micrometer/newrelic/NewRelicClientProvider.java
Patch:
@@ -83,4 +83,6 @@ default String getEventType(Meter.Id id, NewRelicConfig config, NamingConvention
     Object writeFunctionCounter(FunctionCounter counter);
 
     Object writeMeter(Meter meter);
+
+    void setNamingConvention(NamingConvention namingConvention);
 }

File: implementations/micrometer-registry-new-relic/src/main/java/io/micrometer/newrelic/NewRelicMeterRegistry.java
Patch:
@@ -37,7 +37,6 @@ public class NewRelicMeterRegistry extends StepMeterRegistry {
 
     private static final ThreadFactory DEFAULT_THREAD_FACTORY = new NamedThreadFactory("new-relic-metrics-publisher");
 
-    private final NewRelicConfig config;
     // VisibleForTesting
     final NewRelicClientProvider clientProvider;
 
@@ -71,7 +70,7 @@ public NewRelicMeterRegistry(NewRelicConfig config, NewRelicClientProvider clien
                     : new NewRelicInsightsApiClientProvider(config);
         }
 
-        this.config = config;
+        clientProvider.setNamingConvention(namingConvention);
         this.clientProvider = clientProvider;
 
         config().namingConvention(namingConvention);
@@ -119,7 +118,7 @@ public Builder clientProvider(NewRelicClientProvider clientProvider) {
         }
 
         /**
-         * Use the naming convention.
+         * Use the naming convention. Defaults to {@link NewRelicNamingConvention}
          * @param convention naming convention to use
          * @return builder
          * @since 1.4.0

File: implementations/micrometer-registry-new-relic/src/main/java/io/micrometer/newrelic/NewRelicInsightsApiClientProvider.java
Patch:
@@ -62,7 +62,8 @@ public class NewRelicInsightsApiClientProvider implements NewRelicClientProvider
     private final Logger logger = LoggerFactory.getLogger(NewRelicInsightsApiClientProvider.class);
 
     private final NewRelicConfig config;
-    private final HttpSender httpClient;
+    // VisibleForTesting
+    final HttpSender httpClient;
     private final NamingConvention namingConvention;
     private final String insightsEndpoint;
 

File: micrometer-core/src/test/java/io/micrometer/core/instrument/distribution/TimeWindowFixedBoundaryHistogramTest.java
Patch:
@@ -26,8 +26,8 @@ class TimeWindowFixedBoundaryHistogramTest {
     void binarySearchForTail() {
         assertTailSearch(3, 1, 1.0, 5.0, 10.0);
         assertTailSearch(5, 1, 1.0, 5.0, 10.0);
-        assertTailSearch(3, 1, 1.0, 4.0, 5L, 10.0);
-        assertTailSearch(3, 2, 1.0, 2.0, 5L, 10.0);
+        assertTailSearch(3, 1, 1.0, 4.0, 5.0, 10.0);
+        assertTailSearch(3, 2, 1.0, 2.0, 5.0, 10.0);
         assertTailSearch(11, -1, 1.0, 5.0, 10.0);
     }
 

File: implementations/micrometer-registry-cloudwatch/src/main/java/io/micrometer/cloudwatch/CloudWatchNamingConvention.java
Patch:
@@ -24,6 +24,7 @@
  * {@link NamingConvention} for CloudWatch.
  *
  * @author Klaus Hartl
+ * @since 1.1.11
  */
 public class CloudWatchNamingConvention implements NamingConvention {
 

File: implementations/micrometer-registry-new-relic/src/main/java/io/micrometer/newrelic/NewRelicInsightsAgentClientProvider.java
Patch:
@@ -95,7 +95,7 @@ public void publish(NewRelicMeterRegistry meterRegistry) {
     @Override
     public Map<String, Object> writeLongTaskTimer(LongTaskTimer timer) {
         Map<String, Object> attributes = new HashMap<>();
-        TimeUnit timeUnit = TimeUnit.valueOf(timer.getId().getBaseUnit());
+        TimeUnit timeUnit = TimeUnit.valueOf(timer.getId().getBaseUnit().toUpperCase());
         addAttribute(ACTIVE_TASKS, timer.activeTasks(), attributes);          	
         addAttribute(DURATION, timer.duration(timeUnit), attributes);
         addAttribute(TIME_UNIT, timeUnit.name().toLowerCase(), attributes);
@@ -167,7 +167,7 @@ public Map<String, Object> writeSummary(DistributionSummary summary) {
     @Override
     public Map<String, Object> writeTimer(Timer timer) {
         Map<String, Object> attributes = new HashMap<>();
-        TimeUnit timeUnit = TimeUnit.valueOf(timer.getId().getBaseUnit());
+        TimeUnit timeUnit = timer.baseTimeUnit();
         addAttribute(COUNT, timer.count(), attributes);
         addAttribute(AVG, timer.mean(timeUnit), attributes);
         addAttribute(TOTAL_TIME, timer.totalTime(timeUnit), attributes);		
@@ -181,7 +181,7 @@ public Map<String, Object> writeTimer(Timer timer) {
     @Override
     public Map<String, Object> writeFunctionTimer(FunctionTimer timer) {
         Map<String, Object> attributes = new HashMap<>();
-        TimeUnit timeUnit = TimeUnit.valueOf(timer.getId().getBaseUnit());
+        TimeUnit timeUnit = timer.baseTimeUnit();
         addAttribute(COUNT, timer.count(), attributes);
         addAttribute(AVG, timer.mean(timeUnit), attributes);
         addAttribute(TOTAL_TIME, timer.totalTime(timeUnit), attributes);

File: implementations/micrometer-registry-new-relic/src/main/java/io/micrometer/newrelic/NewRelicInsightsApiClientProvider.java
Patch:
@@ -118,7 +118,7 @@ public void publish(NewRelicMeterRegistry meterRegistry) {
     
     @Override
     public Stream<String> writeLongTaskTimer(LongTaskTimer timer) {
-        TimeUnit timeUnit = TimeUnit.valueOf(timer.getId().getBaseUnit());
+        TimeUnit timeUnit = TimeUnit.valueOf(timer.getId().getBaseUnit().toUpperCase());
         return Stream.of(
                 event(timer.getId(),
                         new Attribute(ACTIVE_TASKS, timer.activeTasks()),
@@ -179,7 +179,7 @@ public Stream<String> writeSummary(DistributionSummary summary) {
 
     @Override
     public Stream<String> writeTimer(Timer timer) {
-        TimeUnit timeUnit = TimeUnit.valueOf(timer.getId().getBaseUnit());
+        TimeUnit timeUnit = timer.baseTimeUnit();
         return Stream.of(
                 event(timer.getId(),
                         new Attribute(COUNT, timer.count()),
@@ -193,7 +193,7 @@ public Stream<String> writeTimer(Timer timer) {
 
     @Override
     public Stream<String> writeFunctionTimer(FunctionTimer timer) {
-        TimeUnit timeUnit = TimeUnit.valueOf(timer.getId().getBaseUnit());
+        TimeUnit timeUnit = timer.baseTimeUnit();
         return Stream.of(
                 event(timer.getId(),
                         new Attribute(COUNT, timer.count()),

File: implementations/micrometer-registry-opentsdb/src/main/java/io/micrometer/opentsdb/OpenTSDBDistributionSummary.java
Patch:
@@ -47,14 +47,14 @@ public class OpenTSDBDistributionSummary extends AbstractDistributionSummary {
         this.max = new TimeWindowMax(clock, distributionStatisticConfig);
 
         if (distributionStatisticConfig.isPublishingHistogram()) {
-            if(flavor == null) {
+            if (flavor == null) {
                 histogram = new TimeWindowFixedBoundaryHistogram(clock, DistributionStatisticConfig.builder()
                         .expiry(Duration.ofDays(1825)) // effectively never roll over
                         .bufferLength(1)
                         .build()
                         .merge(distributionStatisticConfig), true);
             }
-            else if(OpenTSDBFlavor.VictoriaMetrics.equals(flavor)) {
+            else if (OpenTSDBFlavor.VictoriaMetrics.equals(flavor)) {
                 histogram = new FixedBoundaryVictoriaMetricsHistogram();
             } else {
                 histogram = null;

File: implementations/micrometer-registry-opentsdb/src/main/java/io/micrometer/opentsdb/OpenTSDBMeterRegistry.java
Patch:
@@ -267,7 +267,7 @@ private List<String> writePercentiles(Meter meter, long wallTime, ValueAtPercent
     private List<String> writeHistogram(long wallTime, Meter meter, CountAtBucket[] histogramCounts, double count) {
         List<String> metrics = new ArrayList<>(histogramCounts.length);
 
-        if(config.flavor() == null) {
+        if (config.flavor() == null) {
             // satisfies https://prometheus.io/docs/concepts/metric_types/#histogram, which is at least SOME standard
             // histogram format to follow
             for (CountAtBucket c : histogramCounts) {
@@ -287,7 +287,7 @@ private List<String> writeHistogram(long wallTime, Meter meter, CountAtBucket[]
                     count
             ));
         }
-        else if(OpenTSDBFlavor.VictoriaMetrics.equals(config.flavor())) {
+        else if (OpenTSDBFlavor.VictoriaMetrics.equals(config.flavor())) {
             for (CountAtBucket c : histogramCounts) {
                 metrics.add(writeMetricWithSuffix(
                         meter.getId().withTag(Tag.of("vmrange", getRangeTagValue(c.bucket()))),

File: implementations/micrometer-registry-opentsdb/src/main/java/io/micrometer/opentsdb/OpenTSDBTimer.java
Patch:
@@ -49,14 +49,14 @@ public class OpenTSDBTimer extends AbstractTimer {
         this.max = new TimeWindowMax(clock, distributionStatisticConfig);
 
         if (distributionStatisticConfig.isPublishingHistogram()) {
-            if(flavor == null) {
+            if (flavor == null) {
                 histogram = new TimeWindowFixedBoundaryHistogram(clock, DistributionStatisticConfig.builder()
                         .expiry(Duration.ofDays(1825)) // effectively never roll over
                         .bufferLength(1)
                         .build()
                         .merge(distributionStatisticConfig), true);
             }
-            else if(OpenTSDBFlavor.VictoriaMetrics.equals(flavor)) {
+            else if (OpenTSDBFlavor.VictoriaMetrics.equals(flavor)) {
                 histogram = new FixedBoundaryVictoriaMetricsHistogram();
             } else {
                 histogram = null;

File: implementations/micrometer-registry-opentsdb/src/main/java/io/micrometer/opentsdb/OpenTSDBNamingConvention.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2020 Pivotal Software, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -29,7 +29,7 @@ public class OpenTSDBNamingConvention implements NamingConvention {
     private final String timerSuffix;
 
     public OpenTSDBNamingConvention() {
-        this("");
+        this("_duration");
     }
 
     public OpenTSDBNamingConvention(String timerSuffix) {

File: implementations/micrometer-registry-opentsdb/src/test/java/io/micrometer/opentsdb/OpenTSDBNamingConventionTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2020 Pivotal Software, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusConfig.java
Patch:
@@ -16,7 +16,6 @@
 package io.micrometer.prometheus;
 
 import io.micrometer.core.instrument.config.MeterRegistryConfig;
-import io.micrometer.core.instrument.distribution.HistogramFlavor;
 
 import java.time.Duration;
 
@@ -55,16 +54,17 @@ default Duration step() {
     }
 
     /**
-     * Histogram type for backing DistributionSummary && Timer
+     * Histogram type for backing DistributionSummary and Timer
      *
      * @return Choose which type of histogram to use
+     * @since 1.4.0
      */
     default HistogramFlavor histogramFlavor() {
         String v = get(prefix() + ".histogramFlavor");
 
         // Default micrometer histogram implementation
         if (v == null)
-            return HistogramFlavor.Plain;
+            return HistogramFlavor.Prometheus;
 
         for (HistogramFlavor flavor : HistogramFlavor.values()) {
             if (flavor.toString().equalsIgnoreCase(v))

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/httpcomponents/MicrometerHttpRequestExecutorTest.java
Patch:
@@ -27,7 +27,6 @@
 import org.apache.http.client.methods.HttpGet;
 import org.apache.http.client.methods.HttpPost;
 import org.apache.http.impl.client.HttpClientBuilder;
-import org.apache.http.impl.nio.client.HttpAsyncClients;
 import org.apache.http.protocol.HttpRequestExecutor;
 import org.apache.http.util.EntityUtils;
 import org.junit.jupiter.api.BeforeEach;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/CaffeineCacheMetrics.java
Patch:
@@ -144,7 +144,7 @@ protected long putCount() {
 
     @Override
     protected void bindImplementationSpecificMetrics(MeterRegistry registry) {
-        Gauge.builder("cache.eviction.weight", cache, c -> c.stats().evictionWeight())
+        FunctionCounter.builder("cache.eviction.weight", cache, c -> c.stats().evictionWeight())
                 .tags(getTagsWithCacheName())
                 .description("The sum of weights of evicted entries. This total does not include manual invalidations.")
                 .register(registry);

File: micrometer-core/src/main/java/io/micrometer/core/instrument/MeterRegistry.java
Patch:
@@ -82,7 +82,7 @@ public abstract class MeterRegistry {
     private final Config config = new Config();
     private final More more = new More();
 
-    // Eventhough writes are guarded by meterMapLock, iterators across value space are supported
+    // Even though writes are guarded by meterMapLock, iterators across value space are supported
     // Hence, we use CHM to support that iteration without ConcurrentModificationException risk
     private final Map<Id, Meter> meterMap = new ConcurrentHashMap<>();
 

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/httpcomponents/MicrometerHttpRequestExecutorTest.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.http.client.methods.HttpGet;
 import org.apache.http.client.methods.HttpPost;
 import org.apache.http.impl.client.HttpClientBuilder;
+import org.apache.http.impl.nio.client.HttpAsyncClients;
 import org.apache.http.protocol.HttpRequestExecutor;
 import org.apache.http.util.EntityUtils;
 import org.junit.jupiter.api.BeforeEach;

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdMeterRegistry.java
Patch:
@@ -175,7 +175,7 @@ void poll() {
     public void start() {
         if (started.compareAndSet(false, true)) {
             if (lineSink != null) {
-                this.processor.subscribe(new Subscriber<>() {
+                this.processor.subscribe(new Subscriber<String>() {
                     @Override
                     public void onSubscribe(Subscription s) {
                         s.request(Long.MAX_VALUE);

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jvm/JvmHeapPressureMetrics.java
Patch:
@@ -24,7 +24,6 @@
 import io.micrometer.core.instrument.binder.MeterBinder;
 import io.micrometer.core.instrument.distribution.TimeWindowSum;
 import io.micrometer.core.lang.NonNull;
-import org.jetbrains.annotations.NotNull;
 
 import javax.management.ListenerNotFoundException;
 import javax.management.NotificationEmitter;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/distribution/TimeWindowMax.java
Patch:
@@ -28,7 +28,6 @@
  * @author Jon Schneider
  */
 public class TimeWindowMax {
-    @SuppressWarnings("rawtypes")
     private static final AtomicIntegerFieldUpdater<TimeWindowMax> rotatingUpdater =
             AtomicIntegerFieldUpdater.newUpdater(TimeWindowMax.class, "rotating");
 

File: benchmarks/benchmarks-core/src/jmh/java/io/micrometer/benchmark/compare/CompareHistogramsWithOtherLibraries.java
Patch:
@@ -145,7 +145,7 @@ public static class PrometheusState {
         public void setup() {
             double[] micrometerBuckets =
                     Doubles.toArray(PercentileHistogramBuckets.buckets(
-                            DistributionStatisticConfig.builder().minimumExpectedValue(0L).maximumExpectedValue(Long.MAX_VALUE)
+                            DistributionStatisticConfig.builder().minimumExpectedValue(0.0).maximumExpectedValue(Double.POSITIVE_INFINITY)
                                     .percentilesHistogram(true).build()));
             histogram = io.prometheus.client.Histogram.build("histogram", "A histogram")
                     .buckets(micrometerBuckets).create();
@@ -194,4 +194,4 @@ public static void main(String[] args) throws RunnerException {
                 .build();
         new Runner(opt).run();
     }
-}
\ No newline at end of file
+}

File: implementations/micrometer-registry-new-relic/src/main/java/io/micrometer/newrelic/NewRelicAgentClientProvider.java
Patch:
@@ -168,7 +168,7 @@ public Map<String, Object> writeSummary(DistributionSummary summary) {
     public Map<String, Object> writeTimer(Timer timer) {
         Map<String, Object> attributes = new HashMap<>();
         TimeUnit timeUnit = TimeUnit.valueOf(timer.getId().getBaseUnit());
-        addAttribute(COUNT, (new Double(timer.count())).longValue(), attributes);
+        addAttribute(COUNT, timer.count(), attributes);
         addAttribute(AVG, timer.mean(timeUnit), attributes);
         addAttribute(TOTAL_TIME, timer.totalTime(timeUnit), attributes);		
         addAttribute(MAX, timer.max(timeUnit), attributes);
@@ -182,7 +182,7 @@ public Map<String, Object> writeTimer(Timer timer) {
     public Map<String, Object> writeFunctionTimer(FunctionTimer timer) {
         Map<String, Object> attributes = new HashMap<>();
         TimeUnit timeUnit = TimeUnit.valueOf(timer.getId().getBaseUnit());
-        addAttribute(COUNT, (new Double(timer.count())).longValue(), attributes);
+        addAttribute(COUNT, timer.count(), attributes);
         addAttribute(AVG, timer.mean(timeUnit), attributes);
         addAttribute(TOTAL_TIME, timer.totalTime(timeUnit), attributes);
         addAttribute(TIME_UNIT, timeUnit.name().toLowerCase(), attributes);

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusDistributionSummary.java
Patch:
@@ -37,7 +37,7 @@ public class PrometheusDistributionSummary extends AbstractDistributionSummary {
         super(id, clock,
                 DistributionStatisticConfig.builder()
                         .percentilesHistogram(false)
-                        .sla()
+                        .sla(new double[0])
                         .build()
                         .merge(distributionStatisticConfig),
                 scale, false);

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusTimer.java
Patch:
@@ -40,7 +40,7 @@ public class PrometheusTimer extends AbstractTimer {
         super(id, clock,
                 DistributionStatisticConfig.builder()
                         .percentilesHistogram(false)
-                        .sla()
+                        .sla(new double[0])
                         .build()
                         .merge(distributionStatisticConfig),
                 pauseDetector, TimeUnit.SECONDS, false);

File: implementations/micrometer-registry-stackdriver/src/test/java/io/micrometer/stackdriver/StackdriverMeterRegistryTest.java
Patch:
@@ -55,7 +55,7 @@ public String get(String key) {
     void distributionCountBucketsInfinityBucketIsNotNegative() {
         StackdriverMeterRegistry.Batch batch = meterRegistry.new Batch();
         // count is 4, but sum of bucket counts is 5 due to inconsistent snapshotting
-        HistogramSnapshot histogramSnapshot = new HistogramSnapshot(4, 14.7, 5, null, new CountAtBucket[]{new CountAtBucket(1, 2), new CountAtBucket(2, 5)}, null);
+        HistogramSnapshot histogramSnapshot = new HistogramSnapshot(4, 14.7, 5, null, new CountAtBucket[]{new CountAtBucket(1.0, 2), new CountAtBucket(2.0, 5)}, null);
         Distribution distribution = batch.distribution(histogramSnapshot, false);
         List<Long> bucketCountsList = distribution.getBucketCountsList();
         assertThat(bucketCountsList.get(bucketCountsList.size() - 1)).isNotNegative();

File: implementations/micrometer-registry-statsd/src/test/java/io/micrometer/statsd/StatsdMeterRegistryTest.java
Patch:
@@ -304,7 +304,7 @@ void counterIncrementDoesNotCauseStackOverflow() {
     void slasOnlyNoPercentileHistogram(StatsdFlavor flavor) {
         StatsdConfig config = configWithFlavor(flavor);
         MeterRegistry registry = new StatsdMeterRegistry(config, clock);
-        DistributionSummary summary = DistributionSummary.builder("my.summary").sla(1, 2).register(registry);
+        DistributionSummary summary = DistributionSummary.builder("my.summary").sla(1.0, 2).register(registry);
         summary.record(1);
 
         Timer timer = Timer.builder("my.timer").sla(Duration.ofMillis(1)).register(registry);
@@ -343,7 +343,7 @@ void timersWithSlasHaveInfBucket() {
     @Test
     void distributionSummariesWithSlasHaveInfBucket() {
         StatsdMeterRegistry registry = new StatsdMeterRegistry(configWithFlavor(StatsdFlavor.ETSY), clock);
-        DistributionSummary summary = DistributionSummary.builder("my.distribution").sla(1).register(registry);
+        DistributionSummary summary = DistributionSummary.builder("my.distribution").sla(1.0).register(registry);
 
         // A io.micrometer.core.instrument.search.MeterNotFoundException is thrown if the gauge isn't present
         registry.get("my.distribution.histogram").tag("le", "+Inf").gauge();

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Timer.java
Patch:
@@ -378,7 +378,7 @@ public Builder publishPercentileHistogram(@Nullable Boolean enabled) {
          */
         public Builder sla(@Nullable Duration... sla) {
             if (sla != null) {
-                this.distributionConfigBuilder.sla(Arrays.stream(sla).mapToLong(Duration::toNanos).toArray());
+                this.distributionConfigBuilder.sla(Arrays.stream(sla).mapToDouble(Duration::toNanos).toArray());
             }
             return this;
         }
@@ -392,7 +392,7 @@ public Builder sla(@Nullable Duration... sla) {
          */
         public Builder minimumExpectedValue(@Nullable Duration min) {
             if (min != null)
-                this.distributionConfigBuilder.minimumExpectedValue(min.toNanos());
+                this.distributionConfigBuilder.minimumExpectedValue((double) min.toNanos());
             return this;
         }
 
@@ -405,7 +405,7 @@ public Builder minimumExpectedValue(@Nullable Duration min) {
          */
         public Builder maximumExpectedValue(@Nullable Duration max) {
             if (max != null)
-                this.distributionConfigBuilder.maximumExpectedValue(max.toNanos());
+                this.distributionConfigBuilder.maximumExpectedValue((double) max.toNanos());
             return this;
         }
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.java
Patch:
@@ -81,7 +81,7 @@ void resetAccumulatedHistogram() {
     }
 
     @Override
-    double countAtValue(long value) {
+    double countAtValue(double value) {
         return accumulatedHistogram().getCountBetweenValues(0, value);
     }
 

File: micrometer-core/src/test/java/io/micrometer/core/instrument/MeterFilterTest.java
Patch:
@@ -182,7 +182,7 @@ void maximumAllowableTagsWhenAlreadyInAllowableTagValuesShouldNotAffect() {
 
     @Test
     void minExpectedOnSummary() {
-        MeterFilter filter = MeterFilter.minExpected("name", 100);
+        MeterFilter filter = MeterFilter.minExpected("name", 100.0);
         Meter.Id timer = new Meter.Id("name", Tags.empty(), null, null, Meter.Type.DISTRIBUTION_SUMMARY);
 
         assertThat(filter.configure(timer, DistributionStatisticConfig.DEFAULT))
@@ -191,7 +191,7 @@ void minExpectedOnSummary() {
 
     @Test
     void maxExpectedOnSummary() {
-        MeterFilter filter = MeterFilter.maxExpected("name", 100);
+        MeterFilter filter = MeterFilter.maxExpected("name", 100.0);
         Meter.Id timer = new Meter.Id("name", Tags.empty(), null, null, Meter.Type.DISTRIBUTION_SUMMARY);
 
         assertThat(filter.configure(timer, DistributionStatisticConfig.DEFAULT))

File: micrometer-core/src/test/java/io/micrometer/core/instrument/distribution/HistogramGaugesTest.java
Patch:
@@ -75,7 +75,7 @@ void histogramsContainLongMaxValue() {
                 .register(registry);
 
         DistributionSummary distributionSummary = DistributionSummary.builder("my.distribution")
-                .sla(Long.MAX_VALUE)
+                .sla(Double.POSITIVE_INFINITY)
                 .register(registry);
 
         HistogramGauges distributionGauges = HistogramGauges.registerWithCommonFormat(distributionSummary, registry);

File: micrometer-core/src/test/java/io/micrometer/core/instrument/dropwizard/DropwizardMeterRegistryTest.java
Patch:
@@ -76,7 +76,7 @@ void customMeasurementsThatDifferOnlyInTagValue() {
     @Issue("#370")
     @Test
     void slasOnlyNoPercentileHistogram() {
-        DistributionSummary summary = DistributionSummary.builder("my.summary").sla(1, 2).register(registry);
+        DistributionSummary summary = DistributionSummary.builder("my.summary").sla(1.0, 2).register(registry);
         summary.record(1);
 
         Timer timer = Timer.builder("my.timer").sla(Duration.ofMillis(1)).register(registry);

File: micrometer-core/src/test/java/io/micrometer/core/instrument/simple/SimpleMeterRegistryTest.java
Patch:
@@ -48,7 +48,7 @@ class SimpleMeterRegistryTest {
     @Issue("#370")
     @Test
     void slasOnlyNoPercentileHistogram() {
-        DistributionSummary summary = DistributionSummary.builder("my.summary").sla(1, 2).register(registry);
+        DistributionSummary summary = DistributionSummary.builder("my.summary").sla(1.0, 2).register(registry);
         summary.record(1);
 
         Timer timer = Timer.builder("my.timer").sla(Duration.ofMillis(1)).register(registry);

File: micrometer-core/src/test/java/io/micrometer/core/instrument/step/StepMeterRegistryTest.java
Patch:
@@ -63,7 +63,7 @@ protected TimeUnit getBaseTimeUnit() {
     @Issue("#370")
     @Test
     void slasOnlyNoPercentileHistogram() {
-        DistributionSummary summary = DistributionSummary.builder("my.summary").sla(1, 2).register(registry);
+        DistributionSummary summary = DistributionSummary.builder("my.summary").sla(1.0, 2).register(registry);
         summary.record(1);
 
         Timer timer = Timer.builder("my.timer").sla(Duration.ofMillis(1)).register(registry);

File: micrometer-test/src/main/java/io/micrometer/core/tck/DistributionSummaryTest.java
Patch:
@@ -102,7 +102,7 @@ default void percentiles(MeterRegistry registry) {
     @Test
     default void histogramCounts(MeterRegistry registry) {
         DistributionSummary s = DistributionSummary.builder("my.summmary")
-                .sla(1)
+                .sla(1.0)
                 .register(registry);
 
         s.record(1);

File: implementations/micrometer-registry-elastic/src/test/java/io/micrometer/elastic/ElasticMeterRegistryTest.java
Patch:
@@ -281,7 +281,6 @@ void getVersionWhenVersionIs5AndNotPrettyPrinted() {
         assertThat(ElasticMeterRegistry.getMajorVersion(responseBody)).isEqualTo(5);
     }
     
-    @Issue("#1891")
     @Test
     void canExtendElasticMeterRegistry() {
         ElasticMeterRegistry registry = new ElasticMeterRegistry(config, clock) {

File: implementations/micrometer-registry-elastic/src/main/java/io/micrometer/elastic/ElasticConfig.java
Patch:
@@ -157,7 +157,7 @@ default String indexDateSeparator() {
      * @since 1.4.0
      */
     default String documentType() {
-        String v = get(prefix() + ".type");
+        String v = get(prefix() + ".documentType");
         return v == null ? "doc" : v;
     }
 }

File: implementations/micrometer-registry-elastic/src/main/java/io/micrometer/elastic/ElasticMeterRegistry.java
Patch:
@@ -272,7 +272,7 @@ static int getMajorVersion(String responseBody) {
     }
 
     private String getTypePath() {
-        return majorVersion < 7 ? "/" + config.type() : TYPE_PATH_AFTER_VERSION_7;
+        return majorVersion < 7 ? "/" + config.documentType() : TYPE_PATH_AFTER_VERSION_7;
     }
 
     // VisibleForTesting

File: implementations/micrometer-registry-stackdriver/src/main/java/io/micrometer/stackdriver/StackdriverMeterRegistry.java
Patch:
@@ -354,6 +354,7 @@ private TimeSeries createTimeSeries(Meter.Id id, TypedValue typedValue, MetricDe
                     .setResource(MonitoredResource.newBuilder()
                             .setType(config.resourceType())
                             .putLabels("project_id", config.projectId())
+                            .putAllLabels(config.resourceLabels())
                             .build())
                     .setMetricKind(MetricDescriptor.MetricKind.GAUGE) // https://cloud.google.com/monitoring/api/v3/metrics-details#metric-kinds
                     .setValueType(valueType)

File: micrometer-core/src/main/java/io/micrometer/core/instrument/step/StepDistributionSummary.java
Patch:
@@ -88,7 +88,7 @@ protected void recordNonNegative(double amount) {
 
     @Override
     public long count() {
-        return (long) count.poll();
+        return count.poll();
     }
 
     @Override

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdMeterRegistry.java
Patch:
@@ -419,6 +419,7 @@ protected DistributionStatisticConfig defaultHistogramConfig() {
 
     /**
      * @deprecated queue size is no longer available since 1.4.0
+     * @return constant {@literal -1}
      */
     @Deprecated
     public int queueSize() {
@@ -427,6 +428,7 @@ public int queueSize() {
 
     /**
      * @deprecated queue capacity is no longer available since 1.4.0
+     * @return constant {@literal -1}
      */
     @Deprecated
     public int queueCapacity() {

File: implementations/micrometer-registry-stackdriver/src/main/java/io/micrometer/stackdriver/StackdriverNamingConvention.java
Patch:
@@ -29,7 +29,6 @@
  *
  *
  * @see <a href="https://cloud.google.com/monitoring/api/v3/metrics-details">"Naming rules" section on Stackdriver's reference documentation</a>
- * and
  * @see <a href="https://cloud.google.com/monitoring/quotas#custom_metrics_quotas">"Custom Metrics" on the Stackdriver's Quotas and limits reference documentation</a>
  * 
  * @author Jon Schneider

File: implementations/micrometer-registry-datadog/src/main/java/io/micrometer/datadog/DatadogConfig.java
Patch:
@@ -62,7 +62,7 @@ default String hostTag() {
      */
     default String uri() {
         String v = get(prefix() + ".uri");
-        return v == null ? "https://app.datadoghq.com" : v;
+        return v == null ? "https://api.datadoghq.com" : v;
     }
 
     /**

File: implementations/micrometer-registry-datadog/src/test/java/io/micrometer/datadog/DatadogConfigTest.java
Patch:
@@ -67,7 +67,7 @@ void returnsUri() {
 
     @Test
     void defaultsUriWhenMissing() {
-        assertThat(new TestDatadogConfig(null).uri()).isEqualTo("https://app.datadoghq.com");
+        assertThat(new TestDatadogConfig(null).uri()).isEqualTo("https://api.datadoghq.com");
     }
 
     @Test

File: micrometer-core/src/main/java/io/micrometer/core/instrument/MeterRegistry.java
Patch:
@@ -558,8 +558,7 @@ private Meter getOrCreateMeter(@Nullable DistributionStatisticConfig config,
                 m = meterMap.get(mappedId);
 
                 if (m == null) {
-                    if (!accept(originalId)) {
-                        //noinspection unchecked
+                    if (!accept(mappedId)) {
                         return noopBuilder.apply(mappedId);
                     }
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/MeterRegistry.java
Patch:
@@ -559,8 +559,7 @@ private Meter getOrCreateMeter(@Nullable DistributionStatisticConfig config,
                 m = meterMap.get(mappedId);
 
                 if (m == null) {
-                    if (!accept(originalId)) {
-                        //noinspection unchecked
+                    if (!accept(mappedId)) {
                         return noopBuilder.apply(mappedId);
                     }
 

File: implementations/micrometer-registry-cloudwatch/src/test/java/io/micrometer/cloudwatch/CloudWatchUtilsTest.java
Patch:
@@ -31,7 +31,7 @@ class CloudWatchUtilsTest {
     void testClamp() {
         assertThat(CloudWatchUtils.clampMetricValue(Double.NaN))
                 .as("Check NaN")
-                .isEqualTo(Double.NaN);
+                .isNaN();
 
         assertThat(CloudWatchUtils.clampMetricValue(Double.MIN_VALUE))
                 .as("Check minimum value")

File: micrometer-test/src/main/java/io/micrometer/core/tck/DistributionSummaryTest.java
Patch:
@@ -95,7 +95,7 @@ default void percentiles(MeterRegistry registry) {
 
         s.record(1);
         assertThat(s.percentile(1)).isEqualTo(1, Offset.offset(0.3));
-        assertThat(s.percentile(0.5)).isEqualTo(Double.NaN);
+        assertThat(s.percentile(0.5)).isNaN();
     }
 
     @Deprecated
@@ -107,6 +107,6 @@ default void histogramCounts(MeterRegistry registry) {
 
         s.record(1);
         assertThat(s.histogramCountAtValue(1)).isEqualTo(1);
-        assertThat(s.histogramCountAtValue(2)).isEqualTo(Double.NaN);
+        assertThat(s.histogramCountAtValue(2)).isNaN();
     }
 }

File: micrometer-test/src/main/java/io/micrometer/core/tck/GaugeTest.java
Patch:
@@ -88,7 +88,7 @@ default void strongReferenceGauges(MeterRegistry registry) {
 
         System.gc();
 
-        assertThat(registry.get("weak.ref").gauge().value()).isEqualTo(Double.NaN);
+        assertThat(registry.get("weak.ref").gauge().value()).isNaN();
         assertThat(registry.get("strong.ref").gauge().value()).isEqualTo(1.0);
     }
 }

File: micrometer-test/src/main/java/io/micrometer/core/tck/TimerTest.java
Patch:
@@ -157,7 +157,7 @@ default void percentiles(MeterRegistry registry) {
 
         t.record(1, TimeUnit.MILLISECONDS);
         assertThat(t.percentile(1, TimeUnit.MILLISECONDS)).isEqualTo(1, Offset.offset(0.3));
-        assertThat(t.percentile(0.5, TimeUnit.MILLISECONDS)).isEqualTo(Double.NaN);
+        assertThat(t.percentile(0.5, TimeUnit.MILLISECONDS)).isNaN();
     }
 
     @Deprecated
@@ -169,6 +169,6 @@ default void histogramCounts(MeterRegistry registry) {
 
         t.record(1, TimeUnit.MILLISECONDS);
         assertThat(t.histogramCountAtValue((long) millisToUnit(1, TimeUnit.NANOSECONDS))).isEqualTo(1);
-        assertThat(t.histogramCountAtValue(1)).isEqualTo(Double.NaN);
+        assertThat(t.histogramCountAtValue(1)).isNaN();
     }
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/tomcat/TomcatMetrics.java
Patch:
@@ -26,6 +26,7 @@
 import javax.management.*;
 import java.lang.management.ManagementFactory;
 import java.util.Collections;
+import java.util.Comparator;
 import java.util.List;
 import java.util.Set;
 import java.util.concurrent.Callable;
@@ -236,7 +237,8 @@ private void registerMetricsEventually(String key, String value, BiConsumer<Obje
                 Set<ObjectName> objectNames = this.mBeanServer.queryNames(new ObjectName(name), null);
                 if (!objectNames.isEmpty()) {
                     // MBean is present, so we can register metrics now.
-                    objectNames.forEach(objectName -> perObject.accept(objectName, Tags.concat(tags, nameTag(objectName))));
+                    objectNames.stream().sorted(Comparator.reverseOrder()).findFirst()
+                            .ifPresent(objectName -> perObject.accept(objectName, Tags.concat(tags, nameTag(objectName))));
                     return;
                 }
             } catch (MalformedObjectNameException e) {

File: micrometer-core/src/test/java/io/micrometer/core/instrument/dropwizard/DropwizardMeterRegistryTest.java
Patch:
@@ -62,7 +62,7 @@ protected Double nullGaugeValue() {
     @Test
     void gaugeOnNullValue() {
         registry.gauge("gauge", emptyList(), null, obj -> 1.0);
-        assertThat(registry.get("gauge").gauge().value()).isEqualTo(Double.NaN);
+        assertThat(registry.get("gauge").gauge().value()).isNaN();
     }
 
     @Test

File: micrometer-core/src/test/java/io/micrometer/core/instrument/dropwizard/DropwizardMeterRegistryTest.java
Patch:
@@ -62,7 +62,7 @@ protected Double nullGaugeValue() {
     @Test
     void gaugeOnNullValue() {
         registry.gauge("gauge", emptyList(), null, obj -> 1.0);
-        assertThat(registry.get("gauge").gauge().value()).isEqualTo(Double.NaN);
+        assertThat(registry.get("gauge").gauge().value()).isNaN();
     }
 
     @Test

File: implementations/micrometer-registry-statsd/src/test/java/io/micrometer/statsd/StatsdMeterRegistryTest.java
Patch:
@@ -455,7 +455,7 @@ public boolean enabled() {
             .build();
 
         registry.counter("some.metric").increment();
-        assertThat(registry.queueSize()).as("counter increment should already be processed").isZero();
+        assertThat(registry.processor.inners().count()).as("processor has no subscribers registered").isZero();
     }
 
     @Test

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/jvm/JvmCompilationMetricsTest.java
Patch:
@@ -23,7 +23,7 @@
 import java.lang.management.ManagementFactory;
 
 import static org.assertj.core.api.AssertionsForClassTypes.assertThat;
-import static org.junit.Assume.assumeTrue;
+import static org.junit.jupiter.api.Assumptions.assumeTrue;
 
 /**
  * Tests for {@link JvmCompilationMetrics}.

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/jpa/HibernateMetricsTest.java
Patch:
@@ -133,14 +133,14 @@ private void assertThatMonitorShouldExposeMetricsWhenStatsEnabled() {
     void deprecatedMonitorShouldNotExposeMetricsWhenStatsNotEnabled() {
         EntityManagerFactory entityManagerFactory = createMockEntityManagerFactory(false);
         HibernateMetrics.monitor(registry, entityManagerFactory, "entityManagerFactory");
-        assertThat(registry.find("hibernate.sessions.open").gauge()).isNull();
+        assertThat(registry.find("hibernate.sessions.open").functionCounter()).isNull();
     }
 
     @Test
     void monitorShouldNotExposeMetricsWhenStatsNotEnabled() {
-        SessionFactory sessionFactory = createMockSessionFactory(true);
+        SessionFactory sessionFactory = createMockSessionFactory(false);
         HibernateMetrics.monitor(registry, sessionFactory, "sessionFactory");
-        assertThat(registry.find("hibernate.sessions.open").gauge()).isNull();
+        assertThat(registry.find("hibernate.sessions.open").functionCounter()).isNull();
     }
 
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/tomcat/TomcatMetrics.java
Patch:
@@ -227,7 +227,7 @@ private void registerMetricsEventually(String key, String value, BiConsumer<Obje
     private void registerMetricsEventually(String key, String value, BiConsumer<ObjectName, Iterable<Tag>> perObject, boolean hasName) {
         if (getJmxDomain() != null) {
             try {
-                String name = getJmxDomain() + ":" + key + "=" + value + (hasName ? ",name=*" : "");
+                String name = getJmxDomain() + ":" + key + "=" + value + (hasName ? ",name=*,*" : "");
                 Set<ObjectName> objectNames = this.mBeanServer.queryNames(new ObjectName(name), null);
                 if (!objectNames.isEmpty()) {
                     // MBean is present, so we can register metrics now.

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/tomcat/TomcatMetricsTest.java
Patch:
@@ -228,6 +228,7 @@ private void checkMbeansInitialState() {
         assertThat(registry.get("tomcat.threads.current").gauge().value()).isGreaterThan(0.0);
         assertThat(registry.get("tomcat.cache.access").functionCounter().count()).isEqualTo(0.0);
         assertThat(registry.get("tomcat.cache.hit").functionCounter().count()).isEqualTo(0.0);
+        assertThat(registry.get("tomcat.servlet.error").functionCounter().count()).isEqualTo(0.0);
     }
 
     private void checkMbeansAfterRequests(long expectedSentBytes) {
@@ -242,5 +243,6 @@ private void checkMbeansAfterRequests(long expectedSentBytes) {
         assertThat(registry.get("tomcat.threads.current").gauge().value()).isGreaterThan(0.0);
         assertThat(registry.get("tomcat.cache.access").functionCounter().count()).isEqualTo(0.0);
         assertThat(registry.get("tomcat.cache.hit").functionCounter().count()).isEqualTo(0.0);
+        assertThat(registry.get("tomcat.servlet.error").functionCounter().count()).isEqualTo(1.0);
     }
 }

File: micrometer-core/src/main/java/io/micrometer/core/util/internal/logging/AbstractInternalLogger.java
Patch:
@@ -52,6 +52,8 @@ public abstract class AbstractInternalLogger implements InternalLogger, Serializ
 
     /**
      * Creates a new instance.
+     *
+     * @param name logger name
      */
     protected AbstractInternalLogger(String name) {
         requireNonNull(name, "name");

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/export/prometheus/PrometheusScrapeMvcEndpoint.java
Patch:
@@ -16,8 +16,10 @@
 package io.micrometer.spring.export.prometheus;
 
 import org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter;
+import org.springframework.boot.context.properties.ConfigurationProperties;
 import org.springframework.web.bind.annotation.GetMapping;
 
+@ConfigurationProperties("endpoints.prometheus")
 public class PrometheusScrapeMvcEndpoint extends EndpointMvcAdapter {
 
     public PrometheusScrapeMvcEndpoint(PrometheusScrapeEndpoint delegate) {

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/tomcat/TomcatMetricsTest.java
Patch:
@@ -203,8 +203,8 @@ void runTomcat(HttpServlet servlet, Callable<Void> doWithTomcat) throws Exceptio
             server.setPort(this.port);
             server.start();
 
-            Context context = server.addContext("/", null);
-            server.addServlet("/", "servletname", servlet);
+            Context context = server.addContext("", null);
+            server.addServlet("", "servletname", servlet);
             context.addServletMappingDecoded("/", "servletname");
 
             doWithTomcat.call();

File: micrometer-core/src/main/java/io/micrometer/core/instrument/LongTaskTimer.java
Patch:
@@ -143,7 +143,7 @@ default void record(Runnable f) {
 
     /**
      * @param unit The time unit to scale the duration to.
-     * @return The cumulative duration of all current tasks in nanoseconds.
+     * @return The cumulative duration of all current tasks.
      */
     double duration(TimeUnit unit);
 

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdMeterRegistry.java
Patch:
@@ -33,6 +33,7 @@
 import reactor.core.Disposables;
 import reactor.core.publisher.Flux;
 import reactor.core.publisher.UnicastProcessor;
+import reactor.netty.NettyPipeline;
 import reactor.netty.udp.UdpClient;
 import reactor.netty.tcp.TcpClient;
 import reactor.util.concurrent.Queues;
@@ -222,6 +223,7 @@ private void prepareUdpClient(Publisher<String> publisher) {
                 .host(statsdConfig.host())
                 .port(statsdConfig.port())
                 .handle((in, out) -> out
+                        .options(NettyPipeline.SendOptions::flushOnEach)
                         .sendString(publisher)
                         .neverComplete()
                 )
@@ -239,6 +241,7 @@ private void prepareTcpClient(Publisher<String> publisher) {
                 .host(statsdConfig.host())
                 .port(statsdConfig.port())
                 .handle((in, out) -> out
+                        .options(NettyPipeline.SendOptions::flushOnEach)
                         .sendString(publisher)
                         .neverComplete())
                 .connect()

File: implementations/micrometer-registry-cloudwatch2/src/main/java/io/micrometer/cloudwatch2/CloudWatchMeterRegistry.java
Patch:
@@ -282,12 +282,13 @@ String getMetricName(Meter.Id id, @Nullable String suffix) {
             return config().namingConvention().name(name, id.getType(), id.getBaseUnit());
         }
 
-        private StandardUnit toStandardUnit(@Nullable String unit) {
+        // VisibleForTesting
+        StandardUnit toStandardUnit(@Nullable String unit) {
             if (unit == null) {
                 return StandardUnit.NONE;
             }
             StandardUnit standardUnit = STANDARD_UNIT_BY_LOWERCASE_VALUE.get(unit.toLowerCase());
-            return standardUnit != null ? standardUnit : StandardUnit.UNKNOWN_TO_SDK_VERSION;
+            return standardUnit != null ? standardUnit : StandardUnit.NONE;
         }
 
         private List<Dimension> toDimensions(List<Tag> tags) {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/MeterRegistry.java
Patch:
@@ -573,7 +573,6 @@ private Meter getOrCreateMeter(@Nullable DistributionStatisticConfig config,
                     }
 
                     m = builder.apply(mappedId, config);
-                    meterMap = meterMap.plus(mappedId, m);
 
                     Id synAssoc = originalId.syntheticAssociation();
                     if (synAssoc != null) {
@@ -584,6 +583,7 @@ private Meter getOrCreateMeter(@Nullable DistributionStatisticConfig config,
                     for (Consumer<Meter> onAdd : meterAddedListeners) {
                         onAdd.accept(m);
                     }
+                    meterMap = meterMap.plus(mappedId, m);
                 }
             }
         }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/httpcomponents/PoolingHttpClientConnectionManagerMetricsBinder.java
Patch:
@@ -76,7 +76,7 @@ private void registerTotalMetrics(MeterRegistry registry) {
         Gauge.builder("httpcomponents.httpclient.pool.total.connections",
             connectionManager,
             (connectionManager) -> connectionManager.getTotalStats().getAvailable())
-            .description("The number of persistent and leased connections for all routes.")
+            .description("The number of persistent and available connections for all routes.")
             .tags(tags).tag("state", "available")
             .register(registry);
         Gauge.builder("httpcomponents.httpclient.pool.total.connections",

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/hystrix/MicrometerMetricsPublisherCommand.java
Patch:
@@ -21,8 +21,8 @@
 import io.micrometer.core.instrument.*;
 import io.micrometer.core.lang.NonNullApi;
 import io.micrometer.core.lang.NonNullFields;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
+import io.micrometer.core.util.internal.logging.InternalLogger;
+import io.micrometer.core.util.internal.logging.InternalLoggerFactory;
 
 import java.util.Arrays;
 import java.util.HashMap;
@@ -35,7 +35,7 @@
 @NonNullApi
 @NonNullFields
 public class MicrometerMetricsPublisherCommand implements HystrixMetricsPublisherCommand {
-    private static final Logger LOG = LoggerFactory.getLogger(MicrometerMetricsPublisherCommand.class);
+    private static final InternalLogger LOG = InternalLoggerFactory.getInstance(MicrometerMetricsPublisherCommand.class);
 
     private static final String NAME_HYSTRIX_CIRCUIT_BREAKER_OPEN = "hystrix.circuit.breaker.open";
     private static final String NAME_HYSTRIX_EXECUTION = "hystrix.execution";

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusMeterRegistry.java
Patch:
@@ -71,7 +71,7 @@ private static List<String> tagValues(Meter.Id id) {
     }
 
     /**
-     * @return Content that should be included in the response body for an endpoint designate for
+     * @return Content that should be included in the response body for an endpoint designated for
      * Prometheus to scrape from.
      */
     public String scrape() {

File: micrometer-test/src/main/java/io/micrometer/core/ipc/http/HttpSenderCompatibilityKit.java
Patch:
@@ -96,7 +96,7 @@ void successfulRequestSentWithBody(HttpSender.Method method, @WiremockResolver.W
                         MatchResult.of(request.getUrl().equals("/metrics"))
                 ))
                 .withHeader("Accept", equalTo("customAccept"))
-                .withHeader("Content-Type", equalTo("custom/type"))
+                .withHeader("Content-Type", containing("custom/type")) // charset may be added to the type
                 .withRequestBody(equalTo("this is a line")));
     }
 
@@ -137,7 +137,7 @@ void basicAuth(HttpSender.Method method, @WiremockResolver.Wiremock WireMockServ
                         MatchResult.of(request.getMethod().getName().equals(method.name())),
                         MatchResult.of(request.getUrl().equals("/metrics"))
                 ))
-                .withBasicAuth(new BasicCredentials("user", "pass")));
+                .withBasicAuth(new BasicCredentials("superuser", "superpassword")));
     }
 
     @ParameterizedTest

File: micrometer-core/src/main/java/io/micrometer/core/ipc/http/HttpSender.java
Patch:
@@ -168,7 +168,7 @@ public final Builder withBasicAuthentication(@Nullable String user, @Nullable St
             }
 
             /**
-             * Set the request body as JSON.
+             * Set the request body as JSON content type.
              *
              * @param content The request body.
              * @return This request builder.
@@ -178,7 +178,7 @@ public final Builder withJsonContent(String content) {
             }
 
             /**
-             * Set the request body as JSON.
+             * Set the request body as plain text content type.
              *
              * @param content The request body.
              * @return This request builder.

File: micrometer-core/src/main/java/io/micrometer/core/ipc/http/ReactorNettySender.java
Patch:
@@ -38,7 +38,6 @@ public Response send(Request request) {
                 .uri(request.getUrl().toString())
                 .send(ByteBufFlux.fromString(Mono.just(new String(request.getEntity()))))
                 .responseSingle((r, body) -> Mono.just(r.status().code()).zipWith(body.asString().defaultIfEmpty("")))
-                .log()
                 .block();
 
         return new Response(response.getT1(), response.getT2());

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdMeterRegistry.java
Patch:
@@ -33,7 +33,6 @@
 import reactor.core.Disposables;
 import reactor.core.publisher.Flux;
 import reactor.core.publisher.UnicastProcessor;
-import reactor.netty.NettyPipeline;
 import reactor.netty.udp.UdpClient;
 import reactor.netty.tcp.TcpClient;
 import reactor.util.concurrent.Queues;
@@ -223,7 +222,6 @@ private void prepareUdpClient(Publisher<String> publisher) {
                 .host(statsdConfig.host())
                 .port(statsdConfig.port())
                 .handle((in, out) -> out
-                        .options(NettyPipeline.SendOptions::flushOnEach)
                         .sendString(publisher)
                         .neverComplete()
                 )
@@ -241,7 +239,6 @@ private void prepareTcpClient(Publisher<String> publisher) {
                 .host(statsdConfig.host())
                 .port(statsdConfig.port())
                 .handle((in, out) -> out
-                        .options(NettyPipeline.SendOptions::flushOnEach)
                         .sendString(publisher)
                         .neverComplete())
                 .connect()

File: micrometer-core/src/test/java/io/micrometer/core/aop/TimedAspectTest.java
Patch:
@@ -104,7 +104,7 @@ void timeMethodFailureWithLongTaskTimer() {
         assertThatExceptionOfType(MeterNotFoundException.class).isThrownBy(() -> {
             failingRegistry.get("longCall")
                     .tag("class", "io.micrometer.core.aop.TimedAspectTest$TimedService")
-                    .tag("method", "call")
+                    .tag("method", "longCall")
                     .tag("extra", "tag")
                     .longTaskTimer();
         });

File: implementations/micrometer-registry-elastic/src/main/java/io/micrometer/elastic/ElasticMeterRegistry.java
Patch:
@@ -102,7 +102,7 @@ public class ElasticMeterRegistry extends StepMeterRegistry {
     private static final String TYPE_PATH_BEFORE_VERSION_7 = "/doc";
     private static final String TYPE_PATH_AFTER_VERSION_7 = "";
 
-    private static final Pattern MAJOR_VERSION_PATTERN = Pattern.compile("\"number\" : \"([\\d]+)");
+    private static final Pattern MAJOR_VERSION_PATTERN = Pattern.compile("\"number\" *: *\"([\\d]+)");
 
     private static final String ERROR_RESPONSE_BODY_SIGNATURE = "\"errors\":true";
     private static final Pattern STATUS_CREATED_PATTERN = Pattern.compile("\"status\":201");

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/internal/BufferingFlux.java
Patch:
@@ -47,15 +47,15 @@ public static Flux<String> create(final Flux<String> source, final String delimi
 
             final DirectProcessor<Void> intervalEnd = DirectProcessor.create();
 
-            final Flux<String> hearbeat = Flux.interval(Duration.ofMillis(maxMillisecondsBetweenEmits))
+            final Flux<String> heartbeat = Flux.interval(Duration.ofMillis(maxMillisecondsBetweenEmits))
                     .map(l -> "")
                     .takeUntilOther(intervalEnd);
 
             // Create a stream that emits at least once every $maxMillisecondsBetweenEmits, to avoid long pauses between
             // buffer flushes when the source doesn't emit for a while.
             final Flux<String> sourceWithEmptyStringKeepAlive = source
                     .doOnTerminate(intervalEnd::onComplete)
-                    .mergeWith(hearbeat);
+                    .mergeWith(heartbeat);
 
             return sourceWithEmptyStringKeepAlive
                     .bufferUntil(line -> {
@@ -97,4 +97,4 @@ public static Flux<String> create(final Flux<String> source, final String delimi
                     });
         });
     }
-}
\ No newline at end of file
+}

File: implementations/micrometer-registry-wavefront/src/main/java/io/micrometer/wavefront/WavefrontMeterRegistry.java
Patch:
@@ -60,7 +60,7 @@
 import static java.util.stream.StreamSupport.stream;
 
 /**
- * {@link StepMeterRegistry} for Wavefront.
+ * {@link PushMeterRegistry} for Wavefront.
  *
  * @author Jon Schneider
  * @author Howard Yoo

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/httpcomponents/MicrometerHttpRequestExecutor.java
Patch:
@@ -36,13 +36,13 @@
  * registered as request executor when creating the HttpClient instance.
  * For example:
  *
- * <code><pre>
+ * <pre>
  *     HttpClientBuilder.create()
  *         .setRequestExecutor(MicrometerHttpRequestExecutor
  *                 .builder(meterRegistry)
  *                 .build())
  *         .build();
- * </pre></code>
+ * </pre>
  *
  * @author Benjamin Hubert (benjamin.hubert@willhaben.at)
  * @author Tommy Ludwig

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/mongodb/MongoMetricsCommandListener.java
Patch:
@@ -36,7 +36,7 @@
 @NonNullFields
 public class MongoMetricsCommandListener implements CommandListener {
 
-    private final Timer.Builder timerBuilder = Timer.builder("org.mongodb.driver.commands")
+    private final Timer.Builder timerBuilder = Timer.builder("mongodb.driver.commands")
             .description("Timer of mongodb commands");
 
     private final MeterRegistry registry;

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/mongodb/MongoMetricsCommandListenerTest.java
Patch:
@@ -93,7 +93,7 @@ void shouldCreateSuccessCommandMetric() {
                 "command", "insert",
                 "status", "SUCCESS"
         );
-        assertEquals(1, registry.get("org.mongodb.driver.commands").tags(tags).timer().count());
+        assertEquals(1, registry.get("mongodb.driver.commands").tags(tags).timer().count());
     }
 
     @Test
@@ -108,7 +108,7 @@ void shouldCreateFailedCommandMetric() {
                 "command", "dropIndexes",
                 "status", "FAILED"
         );
-        assertEquals(1, registry.get("org.mongodb.driver.commands").tags(tags).timer().count());
+        assertEquals(1, registry.get("mongodb.driver.commands").tags(tags).timer().count());
     }
 
     @AfterEach

File: implementations/micrometer-registry-atlas/src/main/java/io/micrometer/atlas/AtlasMeterRegistry.java
Patch:
@@ -126,7 +126,7 @@ protected io.micrometer.core.instrument.DistributionSummary newDistributionSumma
                 percentile -> Tags.concat(id.getTagsAsIterable(), "percentile", DoubleFormat.decimalOrNan(percentile.percentile())),
                 ValueAtPercentile::value,
                 bucket -> id.getName(),
-                bucket -> Tags.concat(id.getTagsAsIterable(), "sla", DoubleFormat.decimalOrWhole(bucket.bucket())));
+                bucket -> Tags.concat(id.getTagsAsIterable(), "sla", DoubleFormat.wholeOrDecimal(bucket.bucket())));
 
         return summary;
     }
@@ -150,7 +150,7 @@ protected Timer newTimer(Meter.Id id, DistributionStatisticConfig distributionSt
                 percentile -> Tags.concat(id.getTagsAsIterable(), "percentile", DoubleFormat.decimalOrNan(percentile.percentile())),
                 percentile -> percentile.value(timer.baseTimeUnit()),
                 bucket -> id.getName(),
-                bucket -> Tags.concat(id.getTagsAsIterable(), "sla", DoubleFormat.decimalOrWhole(bucket.bucket(timer.baseTimeUnit()))));
+                bucket -> Tags.concat(id.getTagsAsIterable(), "sla", DoubleFormat.wholeOrDecimal(bucket.bucket(timer.baseTimeUnit()))));
 
         return timer;
     }

File: implementations/micrometer-registry-new-relic/src/main/java/io/micrometer/newrelic/NewRelicMeterRegistry.java
Patch:
@@ -226,7 +226,7 @@ private String event(Meter.Id id, Iterable<Tag> extraTags, Attribute... attribut
         }
 
         return Arrays.stream(attributes)
-                .map(attr -> ",\"" + attr.getName() + "\":" + DoubleFormat.decimalOrWhole(attr.getValue().doubleValue()))
+                .map(attr -> ",\"" + attr.getName() + "\":" + DoubleFormat.wholeOrDecimal(attr.getValue().doubleValue()))
                 .collect(Collectors.joining("", "{\"eventType\":\"" + escapeJson(getConventionName(id)) + "\"", tagsJson + "}"));
     }
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/distribution/HistogramGauges.java
Patch:
@@ -50,7 +50,7 @@ public static HistogramGauges registerWithCommonFormat(Timer timer, MeterRegistr
                 bucket -> id.getName() + ".histogram",
                 // We look for Long.MAX_VALUE to ensure a sensible tag on our +Inf bucket
                 bucket -> Tags.concat(id.getTagsAsIterable(), "le", bucket.bucket() != Long.MAX_VALUE
-                        ? DoubleFormat.decimalOrWhole(bucket.bucket(timer.baseTimeUnit())) : "+Inf"));
+                        ? DoubleFormat.wholeOrDecimal(bucket.bucket(timer.baseTimeUnit())) : "+Inf"));
     }
 
     public static HistogramGauges registerWithCommonFormat(DistributionSummary summary, MeterRegistry registry) {
@@ -62,7 +62,7 @@ public static HistogramGauges registerWithCommonFormat(DistributionSummary summa
                 bucket -> id.getName() + ".histogram",
                 // We look for Long.MAX_VALUE to ensure a sensible tag on our +Inf bucket
                 bucket -> Tags.concat(id.getTagsAsIterable(), "le", bucket.bucket() != Long.MAX_VALUE
-                        ? DoubleFormat.decimalOrWhole(bucket.bucket()) : "+Inf"));
+                        ? DoubleFormat.wholeOrDecimal(bucket.bucket()) : "+Inf"));
     }
 
     public static HistogramGauges register(HistogramSupport meter, MeterRegistry registry,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jvm/ExecutorServiceMetrics.java
Patch:
@@ -168,7 +168,7 @@ private void monitor(MeterRegistry registry, @Nullable ThreadPoolExecutor tp) {
         Gauge.builder("executor.queue.remaining", tp, tpRef -> tpRef.getQueue().remainingCapacity())
                 .tags(tags)
                 .description("The number of additional elements that this queue can ideally accept without blocking")
-                .baseUnit(BaseUnits.THREADS)
+                .baseUnit(BaseUnits.TASKS)
                 .register(registry);
 
         Gauge.builder("executor.pool.size", tp, ThreadPoolExecutor::getPoolSize)

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/HazelcastCacheMetrics.java
Patch:
@@ -164,21 +164,21 @@ private void nearCacheMetrics(MeterRegistry registry) {
     private void timings(MeterRegistry registry) {
         FunctionTimer.builder("cache.gets.latency", cache,
                 cache -> cache.getLocalMapStats().getGetOperationCount(),
-                cache -> cache.getLocalMapStats().getTotalGetLatency(), TimeUnit.NANOSECONDS)
+                cache -> cache.getLocalMapStats().getTotalGetLatency(), TimeUnit.MILLISECONDS)
                 .tags(getTagsWithCacheName())
                 .description("Cache gets")
                 .register(registry);
 
         FunctionTimer.builder("cache.puts.latency", cache,
                 cache -> cache.getLocalMapStats().getPutOperationCount(),
-                cache -> cache.getLocalMapStats().getTotalPutLatency(), TimeUnit.NANOSECONDS)
+                cache -> cache.getLocalMapStats().getTotalPutLatency(), TimeUnit.MILLISECONDS)
                 .tags(getTagsWithCacheName())
                 .description("Cache puts")
                 .register(registry);
 
         FunctionTimer.builder("cache.removals.latency", cache,
                 cache -> cache.getLocalMapStats().getRemoveOperationCount(),
-                cache -> cache.getLocalMapStats().getTotalRemoveLatency(), TimeUnit.NANOSECONDS)
+                cache -> cache.getLocalMapStats().getTotalRemoveLatency(), TimeUnit.MILLISECONDS)
                 .tags(getTagsWithCacheName())
                 .description("Cache removals")
                 .register(registry);

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jvm/DiskSpaceMetrics.java
Patch:
@@ -59,11 +59,13 @@ public void bindTo(MeterRegistry registry) {
                 .tags(tagsWithPath)
                 .description("Usable space for path")
                 .baseUnit("bytes")
+                .strongReference(true)
                 .register(registry);
         Gauge.builder("disk.total", path, File::getTotalSpace)
                 .tags(tagsWithPath)
                 .description("Total space for path")
                 .baseUnit("bytes")
+                .strongReference(true)
                 .register(registry);
     }
 }

File: implementations/micrometer-registry-new-relic/src/main/java/io/micrometer/newrelic/NewRelicMeterRegistry.java
Patch:
@@ -32,6 +32,7 @@
 import java.net.MalformedURLException;
 import java.net.URI;
 import java.net.URL;
+import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
 import java.util.concurrent.Executors;
@@ -49,6 +50,7 @@
  *
  * @author Jon Schneider
  * @author Johnny Lim
+ * @author Denis Tazhkenov
  * @since 1.0.0
  */
 public class NewRelicMeterRegistry extends StepMeterRegistry {
@@ -237,7 +239,7 @@ private void sendEvents(URL insightsEndpoint, List<String> events) {
         HttpURLConnection con = null;
 
         try {
-            logger.info("Sending {} events to New Relic", events.size());
+            logger.debug("Sending {} events to New Relic", events.size());
 
             con = (HttpURLConnection) insightsEndpoint.openConnection();
             con.setConnectTimeout((int) config.connectTimeout().toMillis());

File: implementations/micrometer-registry-influx/src/main/java/io/micrometer/influx/InfluxMeterRegistry.java
Patch:
@@ -162,7 +162,8 @@ Stream<String> writeMeter(Meter m) {
         if (fields.isEmpty()) {
             return Stream.empty();
         }
-        return Stream.of(influxLineProtocol(m.getId(), "unknown", fields.stream()));
+        Meter.Id id = m.getId();
+        return Stream.of(influxLineProtocol(id, id.getType().name().toLowerCase(), fields.stream()));
     }
 
     private Stream<String> writeLongTaskTimer(LongTaskTimer timer) {

File: implementations/micrometer-registry-influx/src/test/java/io/micrometer/influx/InfluxMeterRegistryTest.java
Patch:
@@ -124,7 +124,7 @@ void writeShouldDropTagWithBlankValue() {
 
     @Test
     void writeCustomMeter() {
-        String expectedInfluxLine = "my_custom,metric_type=unknown value=23,value=13,total=5 1";
+        String expectedInfluxLine = "my_custom,metric_type=other value=23,value=13,total=5 1";
 
         Measurement m1 = new Measurement(() -> 23d, Statistic.VALUE);
         Measurement m2 = new Measurement(() -> 13d, Statistic.VALUE);
@@ -153,6 +153,6 @@ void writeMeterWhenCustomMeterHasMixedFiniteAndNonFiniteValuesShouldSkipOnlyNonF
         Measurement measurement5 = new Measurement(() -> 2d, Statistic.VALUE);
         List<Measurement> measurements = Arrays.asList(measurement1, measurement2, measurement3, measurement4, measurement5);
         Meter meter = Meter.builder("my.meter", Meter.Type.GAUGE, measurements).register(this.meterRegistry);
-        assertThat(meterRegistry.writeMeter(meter)).containsExactly("my_meter,metric_type=unknown value=1,value=2 1");
+        assertThat(meterRegistry.writeMeter(meter)).containsExactly("my_meter,metric_type=gauge value=1,value=2 1");
     }
 }

File: micrometer-core/src/test/java/io/micrometer/core/ipc/http/HttpUrlConnectionSenderTest.java
Patch:
@@ -95,10 +95,8 @@ void sendRequestWithDefaultTimeoutSettings() throws IOException {
             assertThat(response.body()).isEqualTo(expectedBody);
             verify(connection).setReadTimeout(eq(10000));
             verify(connection).setConnectTimeout(eq(1000));
-            verify(connection).setDoOutput(true);
-            verify(connection).setRequestMethod(eq(request.getMethod().toString()));
+            verify(connection).setRequestMethod(eq("GET"));
             verify(connection).getErrorStream();
-            verify(connection).getOutputStream();
             verify(connection, times(2)).getInputStream();
             verify(connection).disconnect();
         }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/db/PostgreSQLDatabaseMetrics.java
Patch:
@@ -80,7 +80,7 @@ public PostgreSQLDatabaseMetrics(DataSource postgresDataSource, String database,
         this.queryConnectionCount = getDBStatQuery(database, "SUM(numbackends)");
         this.queryReadCount = getDBStatQuery(database, "tup_fetched");
         this.queryInsertCount = getDBStatQuery(database, "tup_inserted");
-        this.queryTempBytes = getDBStatQuery(database, "tmp_bytes");
+        this.queryTempBytes = getDBStatQuery(database, "temp_bytes");
         this.queryUpdateCount = getDBStatQuery(database, "tup_updated");
         this.queryDeleteCount = getDBStatQuery(database, "tup_deleted");
         this.queryBlockHits = getDBStatQuery(database, "blks_hit");

File: implementations/micrometer-registry-wavefront/src/main/java/io/micrometer/wavefront/WavefrontConfig.java
Patch:
@@ -20,6 +20,7 @@
 import io.micrometer.core.lang.Nullable;
 
 import java.net.InetAddress;
+import java.net.URI;
 import java.net.UnknownHostException;
 import java.time.Duration;
 
@@ -90,13 +91,13 @@ default String uri() {
 
     /**
      * @return The port to send to when sending histogram distributions to a Wavefront proxy.
-     * Default is 40000.
+     * The default is the port specified in the uri.
      * <p>For details on configuring the histogram proxy port, see
      * https://docs.wavefront.com/proxies_installing.html#configuring-proxy-ports-for-metrics-histograms-and-traces
      */
     default int distributionPort() {
         String v = get(prefix() + ".distributionPort");
-        return v == null ? 40000 : Integer.parseInt(v);
+        return v == null ? URI.create(uri()).getPort() : Integer.parseInt(v);
     }
 
     /**

File: implementations/micrometer-registry-wavefront/src/main/java/io/micrometer/wavefront/WavefrontMeterRegistry.java
Patch:
@@ -65,6 +65,7 @@ public class WavefrontMeterRegistry extends StepMeterRegistry {
     private final WavefrontConfig config;
     private final HttpSender httpClient;
     private final URI uri;
+    private final int distributionPort;
     private final Set<HistogramGranularity> histogramGranularities;
 
     /**
@@ -99,6 +100,7 @@ private WavefrontMeterRegistry(WavefrontConfig config, Clock clock, ThreadFactor
         }
         this.httpClient = httpClient;
         this.uri = URI.create(config.uri());
+        this.distributionPort = config.distributionPort();
 
         this.histogramGranularities = new HashSet<>();
         if (config.reportMinuteDistribution()) {
@@ -179,7 +181,7 @@ protected void publish() {
                     "distributions", distributionCount.get());
             } else {
                 flushToProxy(metricStream, uri.getPort(), "metrics", batch.size());
-                flushToProxy(distributionStream, config.distributionPort(), "distributions",
+                flushToProxy(distributionStream, distributionPort, "distributions",
                     distributionCount.get());
             }
         }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/MeterRegistry.java
Patch:
@@ -503,13 +503,13 @@ public <T extends Collection<?>> T gaugeCollectionSize(String name, Iterable<Tag
         return gauge(name, tags, map, Map::size);
     }
 
-    private <M extends Meter> M registerMeterIfNecessary(Class<M> meterClass, Meter.Id id, Function<Meter.Id, Meter> builder,
+    private <M extends Meter> M registerMeterIfNecessary(Class<M> meterClass, Meter.Id id, Function<Meter.Id, M> builder,
                                                          Function<Meter.Id, M> noopBuilder) {
         return registerMeterIfNecessary(meterClass, id, null, (id2, conf) -> builder.apply(id2), noopBuilder);
     }
 
     private <M extends Meter> M registerMeterIfNecessary(Class<M> meterClass, Meter.Id id,
-                                                         @Nullable DistributionStatisticConfig config, BiFunction<Meter.Id, DistributionStatisticConfig, Meter> builder,
+                                                         @Nullable DistributionStatisticConfig config, BiFunction<Meter.Id, DistributionStatisticConfig, M> builder,
                                                          Function<Meter.Id, M> noopBuilder) {
         Meter.Id mappedId = id;
 
@@ -528,7 +528,7 @@ private <M extends Meter> M registerMeterIfNecessary(Class<M> meterClass, Meter.
     }
 
     private Meter getOrCreateMeter(@Nullable DistributionStatisticConfig config,
-                                   BiFunction<Id, /*Nullable Generic*/ DistributionStatisticConfig, Meter> builder,
+                                   BiFunction<Id, /*Nullable Generic*/ DistributionStatisticConfig, ? extends Meter> builder,
                                    Id originalId, Id mappedId, Function<Meter.Id, ? extends Meter> noopBuilder) {
         Meter m = meterMap.get(mappedId);
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/util/DoubleFormat.java
Patch:
@@ -29,7 +29,7 @@ public class DoubleFormat {
     /**
      * Because NumberFormat is not thread-safe we cannot share instances across threads. Use a ThreadLocal to
      * create one pre thread as this seems to offer a significant performance improvement over creating one per-thread:
-     * http://stackoverflow.com/a/1285297/2648
+     * https://stackoverflow.com/a/1285297/2648
      * https://github.com/indeedeng/java-dogstatsd-client/issues/4
      */
     private static final ThreadLocal<NumberFormat> DECIMAL_OR_NAN = ThreadLocal.withInitial(() -> {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/logging/LoggingMeterRegistry.java
Patch:
@@ -171,7 +171,7 @@ String writeMeter(Meter meter, Printer print) {
                         case DURATION:
                             return msLine + print.time(ms.getValue());
                         case COUNT:
-                            return msLine + print.rate(ms.getValue());
+                            return "throughput=" + print.rate(ms.getValue());
                         default:
                             return msLine + decimalOrNan(ms.getValue());
                     }
@@ -277,4 +277,4 @@ public LoggingMeterRegistry build() {
             return new LoggingMeterRegistry(config, clock, threadFactory, loggingSink);
         }
     }
-}
\ No newline at end of file
+}

File: micrometer-core/src/test/java/io/micrometer/core/instrument/logging/LoggingMeterRegistryTest.java
Patch:
@@ -92,7 +92,7 @@ void writeMeterMultipleValues() {
 
     @Test
     void writeMeterByteValues() {
-        final String expectedResult = "bus-throughput{} count=5 B/s, value=64 B, value=2.125 KiB, value=8 MiB, value=1 GiB";
+        final String expectedResult = "bus-throughput{} throughput=5 B/s, value=64 B, value=2.125 KiB, value=8 MiB, value=1 GiB";
 
         Measurement m1 = new Measurement(() -> 300d, Statistic.COUNT);
         Measurement m2 = new Measurement(() -> (double) (1 << 6), Statistic.VALUE);
@@ -122,4 +122,4 @@ void printerValueWhenGaugeIsInfinityShouldPrintInfinity() {
         assertThat(printer.value(Double.POSITIVE_INFINITY)).isEqualTo("∞");
     }
 
-}
\ No newline at end of file
+}

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/export/wavefront/WavefrontProperties.java
Patch:
@@ -65,12 +65,12 @@ public class WavefrontProperties extends StepRegistryProperties {
     /**
      * Report histogram distributions aggregated into hour intervals.
      */
-    private Boolean reportHourDistribution = true;
+    private Boolean reportHourDistribution = false;
 
     /**
      * Report histogram distributions aggregated into day intervals.
      */
-    private Boolean reportDayDistribution = true;
+    private Boolean reportDayDistribution = false;
 
     public URI getUri() {
         return this.uri;

File: benchmarks/benchmarks-core/src/jmh/java/io/micrometer/benchmark/compare/CompareCountersWithOtherLibraries.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: benchmarks/benchmarks-core/src/jmh/java/io/micrometer/benchmark/compare/CompareHistogramsWithOtherLibraries.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: benchmarks/benchmarks-core/src/jmh/java/io/micrometer/benchmark/core/CounterBenchmark.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: benchmarks/benchmarks-core/src/jmh/java/io/micrometer/benchmark/core/MeterRegistrationBenchmark.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: benchmarks/benchmarks-core/src/jmh/java/io/micrometer/benchmark/core/TagsBenchmark.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: benchmarks/benchmarks-core/src/jmh/java/io/micrometer/benchmark/core/TimerBenchmark.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-appoptics/src/main/java/io/micrometer/appoptics/AppOpticsConfig.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-appoptics/src/main/java/io/micrometer/appoptics/AppOpticsMeterRegistry.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-appoptics/src/main/java/io/micrometer/appoptics/AppOpticsNamingConvention.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-appoptics/src/main/java/io/micrometer/appoptics/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-appoptics/src/test/java/io/micrometer/appoptics/AppOpticsMeterRegistryCompatibilityTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-appoptics/src/test/java/io/micrometer/appoptics/AppOpticsMeterRegistryTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-atlas/src/main/java/io/micrometer/atlas/AtlasMeterRegistry.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-atlas/src/main/java/io/micrometer/atlas/AtlasNamingConvention.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-atlas/src/main/java/io/micrometer/atlas/AtlasUtils.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-atlas/src/main/java/io/micrometer/atlas/SpectatorCounter.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-atlas/src/main/java/io/micrometer/atlas/SpectatorDistributionSummary.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-atlas/src/main/java/io/micrometer/atlas/SpectatorGauge.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-atlas/src/main/java/io/micrometer/atlas/SpectatorLongTaskTimer.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-atlas/src/main/java/io/micrometer/atlas/SpectatorTimer.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-atlas/src/main/java/io/micrometer/atlas/SpectatorToDoubleGauge.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-atlas/src/main/java/io/micrometer/atlas/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-atlas/src/test/java/io/micrometer/atlas/AtlasMeterRegistryCompatibilityTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-atlas/src/test/java/io/micrometer/atlas/AtlasMeterRegistryTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-atlas/src/test/java/io/micrometer/atlas/AtlasNamingConventionTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-atlas/src/test/java/io/micrometer/atlas/SpectatorTimerTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-azure-monitor/src/main/java/io/micrometer/azuremonitor/AzureMonitorConfig.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-azure-monitor/src/main/java/io/micrometer/azuremonitor/AzureMonitorMeterRegistry.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-azure-monitor/src/main/java/io/micrometer/azuremonitor/AzureMonitorNamingConvention.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-azure-monitor/src/main/java/io/micrometer/azuremonitor/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-azure-monitor/src/test/java/io/micrometer/azuremonitor/AzureMonitorMeterRegistryCompatibilityKit.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-azure-monitor/src/test/java/io/micrometer/azuremonitor/AzureMonitorNamingConventionTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-cloudwatch/src/main/java/io/micrometer/cloudwatch/CloudWatchConfig.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-cloudwatch/src/main/java/io/micrometer/cloudwatch/CloudWatchMeterRegistry.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-cloudwatch/src/main/java/io/micrometer/cloudwatch/CloudWatchUtils.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-cloudwatch/src/main/java/io/micrometer/cloudwatch/MetricDatumPartition.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-cloudwatch/src/main/java/io/micrometer/cloudwatch/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-cloudwatch/src/test/java/io/micrometer/cloudwatch/CloudWatchMeterRegistryCompatibilityTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-cloudwatch/src/test/java/io/micrometer/cloudwatch/CloudWatchMeterRegistryTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-cloudwatch/src/test/java/io/micrometer/cloudwatch/CloudWatchUtilsTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-datadog/src/main/java/io/micrometer/datadog/DatadogConfig.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-datadog/src/main/java/io/micrometer/datadog/DatadogMeterRegistry.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-datadog/src/main/java/io/micrometer/datadog/DatadogMetricMetadata.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-datadog/src/main/java/io/micrometer/datadog/DatadogNamingConvention.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-datadog/src/main/java/io/micrometer/datadog/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-datadog/src/test/java/io/micrometer/datadog/DatadogMeterRegistryCompatibilityTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-datadog/src/test/java/io/micrometer/datadog/DatadogMeterRegistryTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-datadog/src/test/java/io/micrometer/datadog/DatadogMetricMetadataTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-datadog/src/test/java/io/micrometer/datadog/DatadogNamingConventionTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-dynatrace/src/main/java/io/micrometer/dynatrace/DynatraceBatchedPayload.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-dynatrace/src/main/java/io/micrometer/dynatrace/DynatraceConfig.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-dynatrace/src/main/java/io/micrometer/dynatrace/DynatraceMeterRegistry.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-dynatrace/src/main/java/io/micrometer/dynatrace/DynatraceMetricDefinition.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-dynatrace/src/main/java/io/micrometer/dynatrace/DynatraceNamingConvention.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-dynatrace/src/main/java/io/micrometer/dynatrace/DynatraceTimeSeries.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-dynatrace/src/main/java/io/micrometer/dynatrace/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-dynatrace/src/test/java/io/micrometer/dynatrace/DynatraceMeterRegistryCompatibilityTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-dynatrace/src/test/java/io/micrometer/dynatrace/DynatraceMeterRegistryTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-dynatrace/src/test/java/io/micrometer/dynatrace/DynatraceMetricDefinitionTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-dynatrace/src/test/java/io/micrometer/dynatrace/DynatraceNamingConventionTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-dynatrace/src/test/java/io/micrometer/dynatrace/DynatraceTimeSeriesTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-elastic/src/main/java/io/micrometer/elastic/ElasticConfig.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-elastic/src/main/java/io/micrometer/elastic/ElasticMeterRegistry.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-elastic/src/main/java/io/micrometer/elastic/ElasticNamingConvention.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-elastic/src/main/java/io/micrometer/elastic/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-elastic/src/test/java/io/micrometer/elastic/ElasticMeterRegistryCompatibilityTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-elastic/src/test/java/io/micrometer/elastic/ElasticMeterRegistryTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-elastic/src/test/java/io/micrometer/elastic/ElasticNamingConventionTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-ganglia/src/main/java/io/micrometer/ganglia/GangliaConfig.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-ganglia/src/main/java/io/micrometer/ganglia/GangliaMeterRegistry.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-ganglia/src/main/java/io/micrometer/ganglia/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-ganglia/src/test/java/io/micrometer/ganglia/GangliaMeterRegistryCompatibilityTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-ganglia/src/test/java/io/micrometer/ganglia/GangliaMeterRegistryTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-graphite/src/main/java/io/micrometer/graphite/GraphiteConfig.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-graphite/src/main/java/io/micrometer/graphite/GraphiteHierarchicalNameMapper.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-graphite/src/main/java/io/micrometer/graphite/GraphiteMeterRegistry.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-graphite/src/main/java/io/micrometer/graphite/GraphiteNamingConvention.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-graphite/src/main/java/io/micrometer/graphite/GraphiteProtocol.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-graphite/src/main/java/io/micrometer/graphite/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-graphite/src/test/java/io/micrometer/graphite/GraphiteHierarchicalNameMapperTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-graphite/src/test/java/io/micrometer/graphite/GraphiteMeterRegistryCompatibilityTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-graphite/src/test/java/io/micrometer/graphite/GraphiteMeterRegistryTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-graphite/src/test/java/io/micrometer/graphite/GraphiteNamingConventionTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-humio/src/main/java/io/micrometer/humio/HumioConfig.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-humio/src/main/java/io/micrometer/humio/HumioMeterRegistry.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-humio/src/main/java/io/micrometer/humio/HumioNamingConvention.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-humio/src/main/java/io/micrometer/humio/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-humio/src/test/java/io/micrometer/humio/HumioMeterRegistryCompatibilityTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-humio/src/test/java/io/micrometer/humio/HumioMeterRegistryTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-humio/src/test/java/io/micrometer/humio/HumioNamingConventionTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-influx/src/main/java/io/micrometer/influx/CreateDatabaseQueryBuilder.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-influx/src/main/java/io/micrometer/influx/InfluxConfig.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-influx/src/main/java/io/micrometer/influx/InfluxConsistency.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-influx/src/main/java/io/micrometer/influx/InfluxMeterRegistry.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-influx/src/main/java/io/micrometer/influx/InfluxNamingConvention.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-influx/src/main/java/io/micrometer/influx/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-influx/src/test/java/io/micrometer/influx/CreateDatabaseQueryBuilderTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-influx/src/test/java/io/micrometer/influx/InfluxMeterRegistryCompatibilityTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-influx/src/test/java/io/micrometer/influx/InfluxMeterRegistryFieldToStringTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-influx/src/test/java/io/micrometer/influx/InfluxMeterRegistryTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-influx/src/test/java/io/micrometer/influx/InfluxNamingConventionTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-jmx/src/main/java/io/micrometer/jmx/JmxConfig.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-jmx/src/main/java/io/micrometer/jmx/JmxMeterRegistry.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-jmx/src/main/java/io/micrometer/jmx/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-jmx/src/test/java/io/micrometer/jmx/JmxMeterRegistryCompatibilityTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-kairos/src/main/java/io/micrometer/kairos/KairosConfig.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-kairos/src/main/java/io/micrometer/kairos/KairosMeterRegistry.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-kairos/src/main/java/io/micrometer/kairos/KairosNamingConvention.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-kairos/src/main/java/io/micrometer/kairos/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-kairos/src/test/java/io/micrometer/kairos/KairosMeterRegistryCompatibilityTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-kairos/src/test/java/io/micrometer/kairos/KairosMeterRegistryTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-kairos/src/test/java/io/micrometer/kairos/KairosNamingConventionTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-new-relic/src/main/java/io/micrometer/newrelic/NewRelicConfig.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-new-relic/src/main/java/io/micrometer/newrelic/NewRelicMeterRegistry.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-new-relic/src/main/java/io/micrometer/newrelic/NewRelicNamingConvention.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-new-relic/src/main/java/io/micrometer/newrelic/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-new-relic/src/test/java/io/micrometer/newrelic/NewRelicMeterRegistryCompatibilityTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-new-relic/src/test/java/io/micrometer/newrelic/NewRelicMeterRegistryTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-new-relic/src/test/java/io/micrometer/newrelic/NewRelicNamingConventionTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/MicrometerCollector.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusConfig.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusCounter.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusDistributionSummary.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusDurationNamingConvention.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusMeterRegistry.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusNamingConvention.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusRenameFilter.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusTimer.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-prometheus/src/test/java/io/micrometer/prometheus/MicrometerCollectorTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-prometheus/src/test/java/io/micrometer/prometheus/PrometheusDurationNamingConventionTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-prometheus/src/test/java/io/micrometer/prometheus/PrometheusMeterRegistryCompatibilityTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-prometheus/src/test/java/io/micrometer/prometheus/PrometheusMeterRegistryTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-prometheus/src/test/java/io/micrometer/prometheus/PrometheusNamingConventionTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-prometheus/src/test/java/io/micrometer/prometheus/PrometheusRenameFilterTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-signalfx/src/main/java/io/micrometer/signalfx/SignalFxConfig.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-signalfx/src/main/java/io/micrometer/signalfx/SignalFxMeterRegistry.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-signalfx/src/main/java/io/micrometer/signalfx/SignalFxNamingConvention.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-signalfx/src/main/java/io/micrometer/signalfx/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-signalfx/src/test/java/io/micrometer/signalfx/SignalFxMeterRegistryCompatibilityTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-signalfx/src/test/java/io/micrometer/signalfx/SignalFxNamingConventionTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-stackdriver/src/main/java/io/micrometer/stackdriver/StackdriverConfig.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-stackdriver/src/main/java/io/micrometer/stackdriver/StackdriverMeterRegistry.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-stackdriver/src/main/java/io/micrometer/stackdriver/StackdriverNamingConvention.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-stackdriver/src/main/java/io/micrometer/stackdriver/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-stackdriver/src/main/java/io/micrometer/stackdriver/util/ClearCustomMetricDescriptors.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-stackdriver/src/test/java/io/micrometer/stackdriver/StackdriverMeterRegistryCompatibilityTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdConfig.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdCounter.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdDistributionSummary.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdFlavor.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdFunctionCounter.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdFunctionTimer.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdGauge.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdLineBuilder.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdLongTaskTimer.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdMeterRegistry.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdMetrics.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdPollable.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdProtocol.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdTimer.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/internal/BufferingFlux.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/internal/DatadogStatsdLineBuilder.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/internal/EtsyStatsdLineBuilder.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/internal/FlavorStatsdLineBuilder.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/internal/LogbackMetricsSuppressingUnicastProcessor.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/internal/SysdigStatsdLineBuilder.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/internal/TelegrafStatsdLineBuilder.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/internal/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-statsd/src/test/java/io/micrometer/statsd/StatsdGaugeTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-statsd/src/test/java/io/micrometer/statsd/StatsdMeterRegistryCompatibilityTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-statsd/src/test/java/io/micrometer/statsd/StatsdMeterRegistryTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-statsd/src/test/java/io/micrometer/statsd/internal/BufferingFluxTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-statsd/src/test/java/io/micrometer/statsd/internal/DatadogStatsdLineBuilderTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-statsd/src/test/java/io/micrometer/statsd/internal/EtsyStatsdLineBuilderTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-statsd/src/test/java/io/micrometer/statsd/internal/SysdigStatsdLineBuilderTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-statsd/src/test/java/io/micrometer/statsd/internal/TelegrafStatsdLineBuilderTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-wavefront/src/main/java/io/micrometer/wavefront/WavefrontConfig.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-wavefront/src/main/java/io/micrometer/wavefront/WavefrontMeterRegistry.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-wavefront/src/main/java/io/micrometer/wavefront/WavefrontNamingConvention.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-wavefront/src/main/java/io/micrometer/wavefront/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-wavefront/src/test/java/io/micrometer/wavefront/WavefrontMeterRegistryCompatibilityTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-wavefront/src/test/java/io/micrometer/wavefront/WavefrontMeterRegistryTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-wavefront/src/test/java/io/micrometer/wavefront/WavefrontNamingConventionTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/annotation/Incubating.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/annotation/Timed.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/annotation/TimedSet.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/aop/TimedAspect.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/AbstractDistributionSummary.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/AbstractMeter.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/AbstractTimer.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Clock.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Counter.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/DistributionSummary.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/FunctionCounter.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/FunctionTimer.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Gauge.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/ImmutableTag.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/LongTaskTimer.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Measurement.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Meter.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/MeterRegistry.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Metrics.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/MockClock.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/MultiGauge.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Statistic.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/StrongReferenceGaugeFunction.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Tag.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Tags.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/TimeGauge.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Timer.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/MeterBinder.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/CacheMeterBinder.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/CaffeineCacheMetrics.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/EhCache2Metrics.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/GuavaCacheMetrics.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/HazelcastCacheMetrics.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/JCacheMetrics.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/db/DatabaseTableMetrics.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/db/PostgreSQLDatabaseMetrics.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/hystrix/HystrixMetricsBinder.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/hystrix/MicrometerMetricsPublisher.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/hystrix/MicrometerMetricsPublisherCommand.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jetty/InstrumentedQueuedThreadPool.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jetty/JettyServerThreadPoolMetrics.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jetty/JettyStatisticsMetrics.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jpa/HibernateMetrics.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jvm/ClassLoaderMetrics.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jvm/DiskSpaceMetrics.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jvm/ExecutorServiceMetrics.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jvm/JvmGcMetrics.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jvm/JvmMemoryMetrics.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jvm/JvmThreadMetrics.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/kafka/KafkaConsumerMetrics.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/logging/Log4j2Metrics.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/logging/LogbackMetrics.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/okhttp3/OkHttpMetricsEventListener.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/system/FileDescriptorMetrics.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/system/ProcessorMetrics.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/system/UptimeMetrics.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/tomcat/TomcatMetrics.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/AbstractCompositeMeter.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeCounter.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeCustomMeter.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeDistributionSummary.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeFunctionCounter.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeFunctionTimer.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeGauge.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeLongTaskTimer.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeMeter.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeMeterRegistry.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeTimeGauge.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeTimer.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/config/InvalidConfigurationException.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/config/MeterFilter.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/config/MeterFilterReply.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/config/MeterRegistryConfig.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/config/MissingRequiredConfigurationException.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/config/NamingConvention.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/config/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/cumulative/CumulativeCounter.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/cumulative/CumulativeDistributionSummary.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/cumulative/CumulativeFunctionCounter.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/cumulative/CumulativeFunctionTimer.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/cumulative/CumulativeTimer.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/cumulative/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/distribution/AbstractTimeWindowHistogram.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/distribution/CountAtBucket.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/distribution/DistributionStatisticConfig.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/distribution/Histogram.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/distribution/HistogramGauges.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/distribution/HistogramSnapshot.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/distribution/HistogramSupport.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/distribution/NoopHistogram.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/distribution/PercentileHistogramBuckets.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/distribution/TimeWindowFixedBoundaryHistogram.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/distribution/TimeWindowMax.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/distribution/ValueAtPercentile.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/distribution/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/distribution/pause/ClockDriftPauseDetector.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/distribution/pause/NoPauseDetector.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/distribution/pause/PauseDetector.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/distribution/pause/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/dropwizard/DelegatingDropwizardLongGauge.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/dropwizard/DropwizardClock.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/dropwizard/DropwizardConfig.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/dropwizard/DropwizardCounter.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/dropwizard/DropwizardDistributionSummary.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: benchmarks/benchmarks-core/src/main/java/io/micrometer/benchmark/compare/CompareCountersWithOtherLibraries.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: benchmarks/benchmarks-core/src/main/java/io/micrometer/benchmark/compare/CompareHistogramsWithOtherLibraries.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: benchmarks/benchmarks-core/src/main/java/io/micrometer/benchmark/core/CounterBenchmark.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: benchmarks/benchmarks-core/src/main/java/io/micrometer/benchmark/core/MeterRegistrationBenchmark.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: benchmarks/benchmarks-core/src/main/java/io/micrometer/benchmark/core/TagsBenchmark.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: benchmarks/benchmarks-core/src/main/java/io/micrometer/benchmark/core/TimerBenchmark.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-appoptics/src/main/java/io/micrometer/appoptics/AppOpticsConfig.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-appoptics/src/main/java/io/micrometer/appoptics/AppOpticsMeterRegistry.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-appoptics/src/main/java/io/micrometer/appoptics/AppOpticsNamingConvention.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-appoptics/src/main/java/io/micrometer/appoptics/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-appoptics/src/test/java/io/micrometer/appoptics/AppOpticsMeterRegistryCompatibilityTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-appoptics/src/test/java/io/micrometer/appoptics/AppOpticsMeterRegistryTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-atlas/src/main/java/io/micrometer/atlas/AtlasMeterRegistry.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-atlas/src/main/java/io/micrometer/atlas/AtlasNamingConvention.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-atlas/src/main/java/io/micrometer/atlas/AtlasUtils.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-atlas/src/main/java/io/micrometer/atlas/SpectatorCounter.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-atlas/src/main/java/io/micrometer/atlas/SpectatorDistributionSummary.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-atlas/src/main/java/io/micrometer/atlas/SpectatorGauge.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-atlas/src/main/java/io/micrometer/atlas/SpectatorLongTaskTimer.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-atlas/src/main/java/io/micrometer/atlas/SpectatorTimer.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-atlas/src/main/java/io/micrometer/atlas/SpectatorToDoubleGauge.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-atlas/src/main/java/io/micrometer/atlas/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-atlas/src/test/java/io/micrometer/atlas/AtlasMeterRegistryCompatibilityTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-atlas/src/test/java/io/micrometer/atlas/AtlasMeterRegistryTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-atlas/src/test/java/io/micrometer/atlas/AtlasNamingConventionTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-atlas/src/test/java/io/micrometer/atlas/SpectatorTimerTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-azure-monitor/src/main/java/io/micrometer/azuremonitor/AzureMonitorConfig.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-azure-monitor/src/main/java/io/micrometer/azuremonitor/AzureMonitorMeterRegistry.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-azure-monitor/src/main/java/io/micrometer/azuremonitor/AzureMonitorNamingConvention.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-azure-monitor/src/main/java/io/micrometer/azuremonitor/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-azure-monitor/src/test/java/io/micrometer/azuremonitor/AzureMonitorMeterRegistryCompatibilityKit.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-azure-monitor/src/test/java/io/micrometer/azuremonitor/AzureMonitorNamingConventionTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-cloudwatch/src/main/java/io/micrometer/cloudwatch/CloudWatchConfig.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-cloudwatch/src/main/java/io/micrometer/cloudwatch/CloudWatchMeterRegistry.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-cloudwatch/src/main/java/io/micrometer/cloudwatch/CloudWatchUtils.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-cloudwatch/src/main/java/io/micrometer/cloudwatch/MetricDatumPartition.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-cloudwatch/src/main/java/io/micrometer/cloudwatch/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-cloudwatch/src/test/java/io/micrometer/cloudwatch/CloudWatchMeterRegistryCompatibilityTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-cloudwatch/src/test/java/io/micrometer/cloudwatch/CloudWatchMeterRegistryTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-cloudwatch/src/test/java/io/micrometer/cloudwatch/CloudWatchUtilsTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-datadog/src/main/java/io/micrometer/datadog/DatadogConfig.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-datadog/src/main/java/io/micrometer/datadog/DatadogMeterRegistry.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-datadog/src/main/java/io/micrometer/datadog/DatadogMetricMetadata.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-datadog/src/main/java/io/micrometer/datadog/DatadogNamingConvention.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-datadog/src/main/java/io/micrometer/datadog/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-datadog/src/test/java/io/micrometer/datadog/DatadogMeterRegistryCompatibilityTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-datadog/src/test/java/io/micrometer/datadog/DatadogMeterRegistryTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-datadog/src/test/java/io/micrometer/datadog/DatadogMetricMetadataTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-datadog/src/test/java/io/micrometer/datadog/DatadogNamingConventionTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-dynatrace/src/main/java/io/micrometer/dynatrace/DynatraceBatchedPayload.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-dynatrace/src/main/java/io/micrometer/dynatrace/DynatraceConfig.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-dynatrace/src/main/java/io/micrometer/dynatrace/DynatraceMeterRegistry.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-dynatrace/src/main/java/io/micrometer/dynatrace/DynatraceMetricDefinition.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-dynatrace/src/main/java/io/micrometer/dynatrace/DynatraceNamingConvention.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-dynatrace/src/main/java/io/micrometer/dynatrace/DynatraceTimeSeries.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-dynatrace/src/main/java/io/micrometer/dynatrace/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-dynatrace/src/test/java/io/micrometer/dynatrace/DynatraceMeterRegistryCompatibilityTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-dynatrace/src/test/java/io/micrometer/dynatrace/DynatraceMeterRegistryTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-dynatrace/src/test/java/io/micrometer/dynatrace/DynatraceMetricDefinitionTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-dynatrace/src/test/java/io/micrometer/dynatrace/DynatraceNamingConventionTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-dynatrace/src/test/java/io/micrometer/dynatrace/DynatraceTimeSeriesTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-elastic/src/main/java/io/micrometer/elastic/ElasticConfig.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-elastic/src/main/java/io/micrometer/elastic/ElasticMeterRegistry.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-elastic/src/main/java/io/micrometer/elastic/ElasticNamingConvention.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-elastic/src/main/java/io/micrometer/elastic/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-elastic/src/test/java/io/micrometer/elastic/ElasticMeterRegistryCompatibilityTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-elastic/src/test/java/io/micrometer/elastic/ElasticMeterRegistryTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-elastic/src/test/java/io/micrometer/elastic/ElasticNamingConventionTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-ganglia/src/main/java/io/micrometer/ganglia/GangliaConfig.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-ganglia/src/main/java/io/micrometer/ganglia/GangliaMeterRegistry.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-ganglia/src/main/java/io/micrometer/ganglia/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-ganglia/src/test/java/io/micrometer/ganglia/GangliaMeterRegistryCompatibilityTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-ganglia/src/test/java/io/micrometer/ganglia/GangliaMeterRegistryTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-graphite/src/main/java/io/micrometer/graphite/GraphiteConfig.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-graphite/src/main/java/io/micrometer/graphite/GraphiteHierarchicalNameMapper.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-graphite/src/main/java/io/micrometer/graphite/GraphiteMeterRegistry.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-graphite/src/main/java/io/micrometer/graphite/GraphiteNamingConvention.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-graphite/src/main/java/io/micrometer/graphite/GraphiteProtocol.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-graphite/src/main/java/io/micrometer/graphite/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-graphite/src/test/java/io/micrometer/graphite/GraphiteHierarchicalNameMapperTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-graphite/src/test/java/io/micrometer/graphite/GraphiteMeterRegistryCompatibilityTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-graphite/src/test/java/io/micrometer/graphite/GraphiteMeterRegistryTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-graphite/src/test/java/io/micrometer/graphite/GraphiteNamingConventionTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-humio/src/main/java/io/micrometer/humio/HumioConfig.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-humio/src/main/java/io/micrometer/humio/HumioMeterRegistry.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-humio/src/main/java/io/micrometer/humio/HumioNamingConvention.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-humio/src/main/java/io/micrometer/humio/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-humio/src/test/java/io/micrometer/humio/HumioMeterRegistryCompatibilityTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-humio/src/test/java/io/micrometer/humio/HumioMeterRegistryTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-humio/src/test/java/io/micrometer/humio/HumioNamingConventionTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-influx/src/main/java/io/micrometer/influx/CreateDatabaseQueryBuilder.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-influx/src/main/java/io/micrometer/influx/InfluxConfig.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-influx/src/main/java/io/micrometer/influx/InfluxConsistency.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-influx/src/main/java/io/micrometer/influx/InfluxMeterRegistry.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-influx/src/main/java/io/micrometer/influx/InfluxNamingConvention.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-influx/src/main/java/io/micrometer/influx/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-influx/src/test/java/io/micrometer/influx/CreateDatabaseQueryBuilderTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-influx/src/test/java/io/micrometer/influx/InfluxMeterRegistryCompatibilityTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-influx/src/test/java/io/micrometer/influx/InfluxMeterRegistryFieldToStringTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-influx/src/test/java/io/micrometer/influx/InfluxMeterRegistryTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-influx/src/test/java/io/micrometer/influx/InfluxNamingConventionTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-jmx/src/main/java/io/micrometer/jmx/JmxConfig.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-jmx/src/main/java/io/micrometer/jmx/JmxMeterRegistry.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-jmx/src/main/java/io/micrometer/jmx/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-jmx/src/test/java/io/micrometer/jmx/JmxMeterRegistryCompatibilityTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-kairos/src/main/java/io/micrometer/kairos/KairosConfig.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-kairos/src/main/java/io/micrometer/kairos/KairosMeterRegistry.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-kairos/src/main/java/io/micrometer/kairos/KairosNamingConvention.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-kairos/src/main/java/io/micrometer/kairos/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-kairos/src/test/java/io/micrometer/kairos/KairosMeterRegistryCompatibilityTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-kairos/src/test/java/io/micrometer/kairos/KairosMeterRegistryTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-kairos/src/test/java/io/micrometer/kairos/KairosNamingConventionTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-new-relic/src/main/java/io/micrometer/newrelic/NewRelicConfig.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-new-relic/src/main/java/io/micrometer/newrelic/NewRelicMeterRegistry.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-new-relic/src/main/java/io/micrometer/newrelic/NewRelicNamingConvention.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-new-relic/src/main/java/io/micrometer/newrelic/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-new-relic/src/test/java/io/micrometer/newrelic/NewRelicMeterRegistryCompatibilityTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-new-relic/src/test/java/io/micrometer/newrelic/NewRelicMeterRegistryTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-new-relic/src/test/java/io/micrometer/newrelic/NewRelicNamingConventionTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/MicrometerCollector.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusConfig.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusCounter.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusDistributionSummary.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusDurationNamingConvention.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusMeterRegistry.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusNamingConvention.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusRenameFilter.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusTimer.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-prometheus/src/test/java/io/micrometer/prometheus/MicrometerCollectorTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-prometheus/src/test/java/io/micrometer/prometheus/PrometheusDurationNamingConventionTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-prometheus/src/test/java/io/micrometer/prometheus/PrometheusMeterRegistryCompatibilityTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-prometheus/src/test/java/io/micrometer/prometheus/PrometheusMeterRegistryTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-prometheus/src/test/java/io/micrometer/prometheus/PrometheusNamingConventionTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-prometheus/src/test/java/io/micrometer/prometheus/PrometheusRenameFilterTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-signalfx/src/main/java/io/micrometer/signalfx/SignalFxConfig.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-signalfx/src/main/java/io/micrometer/signalfx/SignalFxMeterRegistry.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-signalfx/src/main/java/io/micrometer/signalfx/SignalFxNamingConvention.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-signalfx/src/main/java/io/micrometer/signalfx/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-signalfx/src/test/java/io/micrometer/signalfx/SignalFxMeterRegistryCompatibilityTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-signalfx/src/test/java/io/micrometer/signalfx/SignalFxNamingConventionTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-stackdriver/src/main/java/io/micrometer/stackdriver/StackdriverConfig.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-stackdriver/src/main/java/io/micrometer/stackdriver/StackdriverMeterRegistry.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-stackdriver/src/main/java/io/micrometer/stackdriver/StackdriverNamingConvention.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-stackdriver/src/main/java/io/micrometer/stackdriver/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-stackdriver/src/main/java/io/micrometer/stackdriver/util/ClearCustomMetricDescriptors.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-stackdriver/src/test/java/io/micrometer/stackdriver/StackdriverMeterRegistryCompatibilityTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdConfig.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdCounter.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdDistributionSummary.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdFlavor.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdFunctionCounter.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdFunctionTimer.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdGauge.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdLineBuilder.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdLongTaskTimer.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdMeterRegistry.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdMetrics.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdPollable.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdTimer.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/internal/BufferingFlux.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/internal/DatadogStatsdLineBuilder.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/internal/EtsyStatsdLineBuilder.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/internal/FlavorStatsdLineBuilder.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/internal/LogbackMetricsSuppressingUnicastProcessor.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/internal/SysdigStatsdLineBuilder.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/internal/TelegrafStatsdLineBuilder.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/internal/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-statsd/src/test/java/io/micrometer/statsd/StatsdGaugeTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-statsd/src/test/java/io/micrometer/statsd/StatsdMeterRegistryCompatibilityTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-statsd/src/test/java/io/micrometer/statsd/StatsdMeterRegistryTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-statsd/src/test/java/io/micrometer/statsd/internal/BufferingFluxTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-statsd/src/test/java/io/micrometer/statsd/internal/DatadogStatsdLineBuilderTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-statsd/src/test/java/io/micrometer/statsd/internal/EtsyStatsdLineBuilderTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-statsd/src/test/java/io/micrometer/statsd/internal/SysdigStatsdLineBuilderTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-statsd/src/test/java/io/micrometer/statsd/internal/TelegrafStatsdLineBuilderTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-wavefront/src/main/java/io/micrometer/wavefront/WavefrontConfig.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-wavefront/src/main/java/io/micrometer/wavefront/WavefrontMeterRegistry.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-wavefront/src/main/java/io/micrometer/wavefront/WavefrontNamingConvention.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-wavefront/src/main/java/io/micrometer/wavefront/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-wavefront/src/test/java/io/micrometer/wavefront/WavefrontMeterRegistryCompatibilityTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-wavefront/src/test/java/io/micrometer/wavefront/WavefrontMeterRegistryTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: implementations/micrometer-registry-wavefront/src/test/java/io/micrometer/wavefront/WavefrontNamingConventionTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/annotation/Incubating.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/annotation/Timed.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/annotation/TimedSet.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/aop/TimedAspect.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/AbstractDistributionSummary.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/AbstractMeter.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/AbstractTimer.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Clock.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Counter.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/DistributionSummary.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/FunctionCounter.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/FunctionTimer.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Gauge.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/ImmutableTag.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/LongTaskTimer.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Measurement.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Meter.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/MeterRegistry.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Metrics.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/MockClock.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/MultiGauge.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Statistic.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/StrongReferenceGaugeFunction.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Tag.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Tags.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/TimeGauge.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Timer.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/MeterBinder.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/CacheMeterBinder.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/CaffeineCacheMetrics.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/EhCache2Metrics.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/GuavaCacheMetrics.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/HazelcastCacheMetrics.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/JCacheMetrics.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/db/DatabaseTableMetrics.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/db/PostgreSQLDatabaseMetrics.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/hystrix/HystrixMetricsBinder.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/hystrix/MicrometerMetricsPublisher.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/hystrix/MicrometerMetricsPublisherCommand.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jetty/InstrumentedQueuedThreadPool.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jetty/JettyServerThreadPoolMetrics.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jetty/JettyStatisticsMetrics.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jpa/HibernateMetrics.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jvm/ClassLoaderMetrics.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jvm/DiskSpaceMetrics.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jvm/ExecutorServiceMetrics.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jvm/JvmGcMetrics.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jvm/JvmMemoryMetrics.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jvm/JvmThreadMetrics.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/kafka/KafkaConsumerMetrics.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/logging/Log4j2Metrics.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/logging/LogbackMetrics.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/okhttp3/OkHttpMetricsEventListener.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/system/FileDescriptorMetrics.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/system/ProcessorMetrics.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/system/UptimeMetrics.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/tomcat/TomcatMetrics.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/AbstractCompositeMeter.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeCounter.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeCustomMeter.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeDistributionSummary.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeFunctionCounter.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeFunctionTimer.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeGauge.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeLongTaskTimer.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeMeter.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeMeterRegistry.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeTimeGauge.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeTimer.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/config/InvalidConfigurationException.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/config/MeterFilter.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/config/MeterFilterReply.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/config/MeterRegistryConfig.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/config/MissingRequiredConfigurationException.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/config/NamingConvention.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/config/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/cumulative/CumulativeCounter.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/cumulative/CumulativeDistributionSummary.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/cumulative/CumulativeFunctionCounter.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/cumulative/CumulativeFunctionTimer.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/cumulative/CumulativeTimer.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/cumulative/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/distribution/AbstractTimeWindowHistogram.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/distribution/CountAtBucket.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/distribution/DistributionStatisticConfig.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/distribution/Histogram.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/distribution/HistogramGauges.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/distribution/HistogramSnapshot.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/distribution/HistogramSupport.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/distribution/NoopHistogram.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/distribution/PercentileHistogramBuckets.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/distribution/TimeWindowFixedBoundaryHistogram.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/distribution/TimeWindowMax.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/distribution/ValueAtPercentile.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/distribution/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/distribution/pause/ClockDriftPauseDetector.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/distribution/pause/NoPauseDetector.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/distribution/pause/PauseDetector.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/distribution/pause/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/dropwizard/DelegatingDropwizardLongGauge.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/dropwizard/DropwizardClock.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/dropwizard/DropwizardConfig.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/dropwizard/DropwizardCounter.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/dropwizard/DropwizardDistributionSummary.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/dropwizard/DropwizardFunctionCounter.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  * <p>
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/StrongReferenceGaugeFunction.java
Patch:
@@ -33,7 +33,7 @@ class StrongReferenceGaugeFunction<T> implements ToDoubleFunction<T> {
      */
     @Nullable
     @SuppressWarnings("FieldCanBeLocal")
-    private final Object obj;
+    private final T obj;
 
     private final ToDoubleFunction<T> f;
 

File: micrometer-core/src/test/java/io/micrometer/core/instrument/MultiGaugeTest.java
Patch:
@@ -92,7 +92,7 @@ private static class Color {
             this.hex = hex;
         }
 
-        Row toRow(double frequency) {
+        Row<Color> toRow(double frequency) {
             return Row.of(Tags.of("color", name, "hex", hex), this, c -> frequency);
         }
     }

File: micrometer-core/src/main/java/io/micrometer/core/annotation/Timed.java
Patch:
@@ -24,6 +24,8 @@
 public @interface Timed {
     /**
      * Name of the Timer metric.
+     *
+     * @return name of the Timer metric
      */
     String value() default "";
 

File: implementations/micrometer-registry-influx/src/main/java/io/micrometer/influx/InfluxMeterRegistry.java
Patch:
@@ -286,6 +286,7 @@ private Stream<String> writeSummary(DistributionSummary summary) {
 
     private String influxLineProtocol(Meter.Id id, String metricType, Stream<Field> fields, long time) {
         String tags = getConventionTags(id).stream()
+                .filter(t -> StringUtils.isNotBlank(t.getValue()))
                 .map(t -> "," + t.getKey() + "=" + t.getValue())
                 .collect(joining(""));
 

File: implementations/micrometer-registry-appoptics/src/test/java/io/micrometer/appoptics/AppOpticsMeterRegistryCompatibilityTest.java
Patch:
@@ -21,7 +21,7 @@
 
 import java.time.Duration;
 
-public class AppOpticsMeterRegistryCompatibilityTest extends MeterRegistryCompatibilityKit {
+class AppOpticsMeterRegistryCompatibilityTest extends MeterRegistryCompatibilityKit {
     private final AppOpticsConfig config = new AppOpticsConfig() {
         @Override
         public String get(String key) {

File: implementations/micrometer-registry-azure-monitor/src/test/java/io/micrometer/azuremonitor/AzureMonitorMeterRegistryCompatibilityKit.java
Patch:
@@ -21,7 +21,7 @@
 
 import java.time.Duration;
 
-public class AzureMonitorMeterRegistryCompatibilityKit extends MeterRegistryCompatibilityKit {
+class AzureMonitorMeterRegistryCompatibilityKit extends MeterRegistryCompatibilityKit {
 
     private final AzureMonitorConfig config = new AzureMonitorConfig() {
         @Override

File: implementations/micrometer-registry-dynatrace/src/test/java/io/micrometer/dynatrace/DynatraceMeterRegistryCompatibilityTest.java
Patch:
@@ -21,7 +21,7 @@
 
 import java.time.Duration;
 
-public class DynatraceMeterRegistryCompatibilityTest extends MeterRegistryCompatibilityKit {
+class DynatraceMeterRegistryCompatibilityTest extends MeterRegistryCompatibilityKit {
 
     private final DynatraceConfig config = new DynatraceConfig() {
         @Override

File: implementations/micrometer-registry-elastic/src/test/java/io/micrometer/elastic/ElasticMeterRegistryCompatibilityTest.java
Patch:
@@ -22,7 +22,7 @@
 
 import java.time.Duration;
 
-public class ElasticMeterRegistryCompatibilityTest extends MeterRegistryCompatibilityKit {
+class ElasticMeterRegistryCompatibilityTest extends MeterRegistryCompatibilityKit {
     @Override
     public MeterRegistry registry() {
         return new ElasticMeterRegistry(new ElasticConfig() {

File: implementations/micrometer-registry-humio/src/test/java/io/micrometer/humio/HumioMeterRegistryCompatibilityTest.java
Patch:
@@ -27,7 +27,7 @@
  * @author Martin Westergaard Lassen
  * @author Jon Schneider
  */
-public class HumioMeterRegistryCompatibilityTest extends MeterRegistryCompatibilityKit {
+class HumioMeterRegistryCompatibilityTest extends MeterRegistryCompatibilityKit {
     private final HumioConfig config = new HumioConfig() {
         @Override
         public String get(String key) {

File: implementations/micrometer-registry-stackdriver/src/test/java/io/micrometer/stackdriver/StackdriverMeterRegistryCompatibilityTest.java
Patch:
@@ -22,7 +22,7 @@
 
 import java.time.Duration;
 
-public class StackdriverMeterRegistryCompatibilityTest extends MeterRegistryCompatibilityKit {
+class StackdriverMeterRegistryCompatibilityTest extends MeterRegistryCompatibilityKit {
 
     private final StackdriverConfig config = new StackdriverConfig() {
         @Override

File: micrometer-test/src/test/java/io/micrometer/core/ipc/http/HttpUrlConnectionSenderTest.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micrometer.core.ipc.http;
 
-public class HttpUrlConnectionSenderTest extends HttpSenderCompatibilityKit {
+class HttpUrlConnectionSenderTest extends HttpSenderCompatibilityKit {
     @Override
     public HttpSender httpClient() {
         return new HttpUrlConnectionSender();

File: micrometer-test/src/test/java/io/micrometer/core/ipc/http/OkHttpSenderTest.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micrometer.core.ipc.http;
 
-public class OkHttpSenderTest extends HttpSenderCompatibilityKit {
+class OkHttpSenderTest extends HttpSenderCompatibilityKit {
     @Override
     public HttpSender httpClient() {
         return new OkHttpSender();

File: micrometer-test/src/test/java/io/micrometer/core/ipc/http/ReactorNettySenderTest.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micrometer.core.ipc.http;
 
-public class ReactorNettySenderTest extends HttpSenderCompatibilityKit {
+class ReactorNettySenderTest extends HttpSenderCompatibilityKit {
     @Override
     public HttpSender httpClient() {
         return new ReactorNettySender();

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/autoconfigure/export/humio/HumioMetricsExportAutoConfigurationTest.java
Patch:
@@ -43,7 +43,7 @@ void anyAdditionToTagsReplacesDefault() {
     @Test
     void defaultTag() {
         registerAndRefresh(ClockConfiguration.class, HumioMetricsExportAutoConfiguration.class);
-        assertThat(context.getBean(HumioConfig.class).tags()).isNull();
+        assertThat(context.getBean(HumioConfig.class).tags()).isEmpty();
     }
 
     @AfterEach

File: micrometer-core/src/main/java/io/micrometer/core/instrument/simple/SimpleMeterRegistry.java
Patch:
@@ -126,7 +126,7 @@ protected <T> FunctionTimer newFunctionTimer(Meter.Id id, T obj, ToLongFunction<
 
             case STEP:
             default:
-                return new StepFunctionTimer(id, clock, config.step().toMillis(), obj, countFunction, totalTimeFunction, totalTimeFunctionUnits, getBaseTimeUnit());
+                return new StepFunctionTimer<>(id, clock, config.step().toMillis(), obj, countFunction, totalTimeFunction, totalTimeFunctionUnits, getBaseTimeUnit());
         }
     }
 

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/export/elastic/ElasticMetricsExportAutoConfiguration.java
Patch:
@@ -37,6 +37,7 @@
  * Configuration for exporting metrics to Elastic.
  *
  * @author Nicolas Portmann
+ * @since 1.1.0
  */
 @Configuration
 @AutoConfigureBefore({CompositeMeterRegistryAutoConfiguration.class,

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/export/elastic/ElasticProperties.java
Patch:
@@ -22,6 +22,7 @@
  * {@link ConfigurationProperties} for configuring Elastic metrics export.
  *
  * @author Nicolas Portmann
+ * @since 1.1.0
  */
 @ConfigurationProperties(prefix = "management.metrics.export.elastic")
 public class ElasticProperties extends StepRegistryProperties {

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/export/elastic/ElasticPropertiesConfigAdapter.java
Patch:
@@ -23,9 +23,9 @@
  *
  * @author Nicolas Portmann
  */
-public class ElasticPropertiesConfigAdapter extends StepRegistryPropertiesConfigAdapter<ElasticProperties> implements ElasticConfig {
+class ElasticPropertiesConfigAdapter extends StepRegistryPropertiesConfigAdapter<ElasticProperties> implements ElasticConfig {
 
-    public ElasticPropertiesConfigAdapter(ElasticProperties properties) {
+    ElasticPropertiesConfigAdapter(ElasticProperties properties) {
         super(properties);
     }
 

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/web/client/DefaultRestTemplateExchangeTagsProvider.java
Patch:
@@ -39,6 +39,7 @@ public Iterable<Tag> getTags(@Nullable String urlTemplate, HttpRequest request,
             : RestTemplateExchangeTags.uri(request);
         return Arrays.asList(RestTemplateExchangeTags.method(request), uriTag,
             RestTemplateExchangeTags.status(response),
-            RestTemplateExchangeTags.clientName(request));
+            RestTemplateExchangeTags.clientName(request),
+            RestTemplateExchangeTags.outcome(response));
     }
 }

File: micrometer-core/src/test/java/io/micrometer/core/instrument/logging/LoggingMeterRegistryTest.java
Patch:
@@ -18,8 +18,6 @@
 import io.micrometer.core.instrument.DistributionSummary;
 import org.junit.jupiter.api.Test;
 
-import java.time.Duration;
-
 import static org.assertj.core.api.Assertions.assertThat;
 
 class LoggingMeterRegistryTest {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jvm/ExecutorServiceMetrics.java
Patch:
@@ -159,8 +159,8 @@ private void monitor(MeterRegistry registry, @Nullable ThreadPoolExecutor tp) {
 
         Gauge.builder("executor.queued", tp, tpRef -> tpRef.getQueue().size())
                 .tags(tags)
-                .description("The approximate number of threads that are queued for execution")
-                .baseUnit("threads")
+                .description("The approximate number of tasks that are queued for execution")
+                .baseUnit("tasks")
                 .register(registry);
 
         Gauge.builder("executor.pool.size", tp, ThreadPoolExecutor::getPoolSize)

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/orm/jpa/HibernateMetricsAutoConfiguration.java
Patch:
@@ -19,6 +19,8 @@
 import io.micrometer.core.instrument.binder.jpa.HibernateMetrics;
 import io.micrometer.spring.autoconfigure.MetricsAutoConfiguration;
 import io.micrometer.spring.autoconfigure.export.simple.SimpleMetricsExportAutoConfiguration;
+import org.hibernate.SessionFactory;
+
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
 import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
@@ -43,7 +45,7 @@
 @Configuration
 @AutoConfigureAfter({MetricsAutoConfiguration.class, HibernateJpaAutoConfiguration.class,
         SimpleMetricsExportAutoConfiguration.class})
-@ConditionalOnClass({EntityManagerFactory.class, MeterRegistry.class})
+@ConditionalOnClass({EntityManagerFactory.class, SessionFactory.class, MeterRegistry.class})
 @ConditionalOnBean({EntityManagerFactory.class, MeterRegistry.class})
 public class HibernateMetricsAutoConfiguration {
     private static final String ENTITY_MANAGER_FACTORY_SUFFIX = "entityManagerFactory";

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Tags.java
Patch:
@@ -29,6 +29,7 @@
  * @author Jon Schneider
  * @author Maciej Walkowiak
  * @author Phillip Webb
+ * @author Johnny Lim
  */
 public final class Tags implements Iterable<Tag> {
 
@@ -98,7 +99,7 @@ public Tags and(@Nullable Tag... tags) {
         }
         Tag[] newTags = new Tag[last + tags.length];
         System.arraycopy(this.tags, 0, newTags, 0, last);
-        System.arraycopy(tags, 0, newTags, this.tags.length, tags.length);
+        System.arraycopy(tags, 0, newTags, last, tags.length);
         return new Tags(newTags);
     }
 

File: implementations/micrometer-registry-dynatrace/src/test/java/io/micrometer/dynatrace/DynatraceMeterRegistryTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.micrometer.core.instrument.Clock;
 import io.micrometer.core.instrument.config.MissingRequiredConfigurationException;
-import io.micrometer.core.ipc.http.HttpResponse;
+import io.micrometer.core.ipc.http.HttpSender;
 import org.junit.jupiter.api.Test;
 
 import java.lang.reflect.Field;
@@ -123,7 +123,7 @@ public String apiToken() {
             }
         };
         DynatraceMeterRegistry registry = DynatraceMeterRegistry.builder(config)
-                .httpPushHandler(request -> new HttpResponse(200, null))
+                .httpPushHandler(request -> new HttpSender.Response(200, null))
                 .build();
 
         Field createdCustomMetricsField = DynatraceMeterRegistry.class.getDeclaredField("createdCustomMetrics");

File: micrometer-core/src/main/java/io/micrometer/core/instrument/push/PushRegistryConfig.java
Patch:
@@ -16,7 +16,7 @@
 package io.micrometer.core.instrument.push;
 
 import io.micrometer.core.instrument.config.MeterRegistryConfig;
-import io.micrometer.core.ipc.http.HttpClient;
+import io.micrometer.core.ipc.http.HttpSender;
 
 import java.time.Duration;
 
@@ -56,7 +56,7 @@ default int numThreads() {
      * @return The connection timeout for requests to the backend. The default is
      * 1 second.
      * @deprecated Connect timeout and read timeout have different meanings depending on the HTTP client. Configure
-     * timeout options on your {@link HttpClient} of choice instead.
+     * timeout options on your {@link HttpSender} of choice instead.
      */
     @Deprecated
     default Duration connectTimeout() {
@@ -68,7 +68,7 @@ default Duration connectTimeout() {
      * @return The read timeout for requests to the backend. The default is
      * 10 seconds.
      * @deprecated Connect timeout and read timeout have different meanings depending on the HTTP client. Configure
-     * timeout options on your {@link HttpClient} of choice instead.
+     * timeout options on your {@link HttpSender} of choice instead.
      */
     @Deprecated
     default Duration readTimeout() {

File: micrometer-core/src/main/java/io/micrometer/core/ipc/http/HttpStatusClass.java
Patch:
@@ -20,7 +20,7 @@
  *
  * @author Jon Schneider
  */
-public enum HttpStatusClass {
+enum HttpStatusClass {
     INFORMATIONAL(100, 200),
     SUCCESS(200, 300),
     REDIRECTION(300, 400),

File: micrometer-test/src/main/java/io/micrometer/core/ipc/http/HttpClientResolver.java
Patch:
@@ -28,7 +28,7 @@
 public class HttpClientResolver implements ParameterResolver {
     @Override
     public boolean supportsParameter(ParameterContext parameterContext, ExtensionContext extensionContext) throws ParameterResolutionException {
-        return parameterContext.getParameter().getType().equals(HttpClient.class);
+        return parameterContext.getParameter().getType().equals(HttpSender.class);
     }
 
     @Override

File: micrometer-test/src/test/java/io/micrometer/core/ipc/http/HttpUrlConnectionClientTest.java
Patch:
@@ -15,9 +15,9 @@
  */
 package io.micrometer.core.ipc.http;
 
-public class HttpUrlConnectionClientTest extends HttpClientCompatibilityKit {
+public class HttpUrlConnectionClientTest extends HttpSenderCompatibilityKit {
     @Override
-    public HttpClient httpClient() {
-        return new HttpUrlConnectionClient();
+    public HttpSender httpClient() {
+        return new HttpUrlConnectionSender();
     }
 }

File: micrometer-test/src/test/java/io/micrometer/core/ipc/http/OkHttpSenderTest.java
Patch:
@@ -15,9 +15,9 @@
  */
 package io.micrometer.core.ipc.http;
 
-public class OkHttpHttpClientTest extends HttpClientCompatibilityKit {
+public class OkHttpSenderTest extends HttpSenderCompatibilityKit {
     @Override
-    public HttpClient httpClient() {
-        return new OkHttpHttpClient();
+    public HttpSender httpClient() {
+        return new OkHttpSender();
     }
 }

File: micrometer-test/src/test/java/io/micrometer/core/ipc/http/ReactorNettyClientTest.java
Patch:
@@ -15,9 +15,9 @@
  */
 package io.micrometer.core.ipc.http;
 
-public class ReactorNettyClientTest extends HttpClientCompatibilityKit {
+public class ReactorNettyClientTest extends HttpSenderCompatibilityKit {
     @Override
-    public HttpClient httpClient() {
-        return new ReactorNettyClient();
+    public HttpSender httpClient() {
+        return new ReactorNettySender();
     }
 }

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/export/logging/LoggingMetricsExportAutoConfiguration.java
Patch:
@@ -43,7 +43,7 @@
 @AutoConfigureAfter(MetricsAutoConfiguration.class)
 @ConditionalOnBean(Clock.class)
 @ConditionalOnClass(LoggingMeterRegistry.class)
-@ConditionalOnProperty(prefix = "management.metrics.export.logging", name = "enabled", havingValue = "true", matchIfMissing = true)
+@ConditionalOnProperty(prefix = "management.metrics.export.logging", name = "enabled", havingValue = "true", matchIfMissing = false)
 @EnableConfigurationProperties(LoggingRegistryProperties.class)
 @Import(StringToDurationConverter.class)
 public class LoggingMetricsExportAutoConfiguration {

File: implementations/micrometer-registry-cloudwatch/src/main/java/io/micrometer/cloudwatch/CloudWatchMeterRegistry.java
Patch:
@@ -21,6 +21,7 @@
 import io.micrometer.core.instrument.*;
 import io.micrometer.core.instrument.config.NamingConvention;
 import io.micrometer.core.instrument.step.StepMeterRegistry;
+import io.micrometer.core.instrument.util.NamedThreadFactory;
 import io.micrometer.core.instrument.util.TimeUtils;
 import io.micrometer.core.lang.Nullable;
 import org.slf4j.Logger;
@@ -29,7 +30,6 @@
 import java.util.Date;
 import java.util.List;
 import java.util.Objects;
-import java.util.concurrent.Executors;
 import java.util.concurrent.ThreadFactory;
 import java.util.concurrent.TimeUnit;
 import java.util.stream.Stream;
@@ -48,7 +48,7 @@ public class CloudWatchMeterRegistry extends StepMeterRegistry {
 
     public CloudWatchMeterRegistry(CloudWatchConfig config, Clock clock,
                                    AmazonCloudWatchAsync amazonCloudWatchAsync) {
-        this(config, clock, amazonCloudWatchAsync, Executors.defaultThreadFactory());
+        this(config, clock, amazonCloudWatchAsync, new NamedThreadFactory("cloudwatch-metrics-publisher"));
     }
 
     public CloudWatchMeterRegistry(CloudWatchConfig config, Clock clock,

File: implementations/micrometer-registry-signalfx/src/main/java/io/micrometer/signalfx/SignalFxMeterRegistry.java
Patch:
@@ -27,6 +27,7 @@
 import io.micrometer.core.instrument.config.NamingConvention;
 import io.micrometer.core.instrument.step.StepMeterRegistry;
 import io.micrometer.core.instrument.util.MeterPartition;
+import io.micrometer.core.instrument.util.NamedThreadFactory;
 import io.micrometer.core.instrument.util.TimeUtils;
 import io.micrometer.core.lang.Nullable;
 import org.slf4j.Logger;
@@ -36,7 +37,6 @@
 import java.util.Collections;
 import java.util.List;
 import java.util.Set;
-import java.util.concurrent.Executors;
 import java.util.concurrent.ThreadFactory;
 import java.util.concurrent.TimeUnit;
 import java.util.stream.Stream;
@@ -49,6 +49,7 @@
  * @author Jon Schneider
  */
 public class SignalFxMeterRegistry extends StepMeterRegistry {
+    private static final ThreadFactory DEFAULT_THREAD_FACTORY = new NamedThreadFactory("signalfx-metrics-publisher");
     private final Logger logger = LoggerFactory.getLogger(SignalFxMeterRegistry.class);
     private final SignalFxConfig config;
     private final HttpDataPointProtobufReceiverFactory dataPointReceiverFactory;
@@ -57,7 +58,7 @@ public class SignalFxMeterRegistry extends StepMeterRegistry {
             metricError -> this.logger.warn("failed to send metrics: {}", metricError.getMessage()));
 
     public SignalFxMeterRegistry(SignalFxConfig config, Clock clock) {
-        this(config, clock, Executors.defaultThreadFactory());
+        this(config, clock, DEFAULT_THREAD_FACTORY);
     }
 
     public SignalFxMeterRegistry(SignalFxConfig config, Clock clock, ThreadFactory threadFactory) {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/logging/LoggingMeterRegistry.java
Patch:
@@ -27,12 +27,12 @@
 import io.micrometer.core.instrument.step.StepDistributionSummary;
 import io.micrometer.core.instrument.step.StepMeterRegistry;
 import io.micrometer.core.instrument.step.StepTimer;
+import io.micrometer.core.instrument.util.NamedThreadFactory;
 import io.micrometer.core.instrument.util.TimeUtils;
 
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.time.Duration;
-import java.util.concurrent.Executors;
 import java.util.concurrent.ThreadFactory;
 import java.util.concurrent.TimeUnit;
 import java.util.function.Consumer;
@@ -55,7 +55,7 @@ public LoggingMeterRegistry() {
     }
 
     public LoggingMeterRegistry(LoggingRegistryConfig config, Clock clock) {
-        this(config, clock, Executors.defaultThreadFactory(), defaultLoggingSink());
+        this(config, clock, new NamedThreadFactory("logging-metrics-publisher"), defaultLoggingSink());
     }
 
     private LoggingMeterRegistry(LoggingRegistryConfig config, Clock clock, ThreadFactory threadFactory, Consumer<String> loggingSink) {
@@ -224,7 +224,7 @@ public static class Builder {
         private final LoggingRegistryConfig config;
 
         private Clock clock = Clock.SYSTEM;
-        private ThreadFactory threadFactory = Executors.defaultThreadFactory();
+        private ThreadFactory threadFactory = new NamedThreadFactory("logging-metrics-publisher");
         private Consumer<String> loggingSink = defaultLoggingSink();
 
         Builder(LoggingRegistryConfig config) {

File: samples/micrometer-samples-core/src/main/java/io/micrometer/core/samples/utils/SampleConfig.java
Patch:
@@ -22,6 +22,6 @@
 public class SampleConfig {
     public static MeterRegistry myMonitoringSystem() {
         // Pick a monitoring system here to use in your samples.
-        return SampleRegistries.prometheus();
+        return SampleRegistries.elastic();
     }
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/logging/package-info.java
Patch:
@@ -15,7 +15,7 @@
  */
 @NonNullApi
 @NonNullFields
-package io.micrometer.core.instrument.log;
+package io.micrometer.core.instrument.logging;
 
 import io.micrometer.core.lang.NonNullApi;
 import io.micrometer.core.lang.NonNullFields;

File: micrometer-core/src/test/java/io/micrometer/core/instrument/util/TimeUtilsTest.java
Patch:
@@ -50,5 +50,6 @@ void formatDuration() {
         assertThat(TimeUtils.format(Duration.ofSeconds(10))).isEqualTo("10s");
         assertThat(TimeUtils.format(Duration.ofSeconds(90))).isEqualTo("1m 30s");
         assertThat(TimeUtils.format(Duration.ofMinutes(2))).isEqualTo("2m");
+        assertThat(TimeUtils.format(Duration.ofNanos(1001234000000L))).isEqualTo("16m 41.234s");
     }
 }

File: implementations/micrometer-registry-appoptics/src/main/java/io/micrometer/appoptics/AppOpticsMeterRegistry.java
Patch:
@@ -34,7 +34,6 @@
 import java.util.concurrent.TimeUnit;
 import java.util.stream.StreamSupport;
 
-import static io.micrometer.core.instrument.Meter.Type.match;
 import static io.micrometer.core.instrument.util.DoubleFormat.decimal;
 import static java.util.stream.Collectors.joining;
 
@@ -95,7 +94,7 @@ protected void publish() {
                         .withBasicAuthentication(config.apiToken(), "")
                         .withJsonContent(
                                 batch.stream()
-                                        .map(meter -> match(meter,
+                                        .map(meter -> meter.apply(
                                                 this::writeGauge,
                                                 this::writeCounter,
                                                 this::writeTimer,

File: implementations/micrometer-registry-azure-monitor/src/main/java/io/micrometer/azuremonitor/AzureMonitorMeterRegistry.java
Patch:
@@ -33,7 +33,6 @@
 import java.util.concurrent.TimeUnit;
 import java.util.stream.Stream;
 
-import static io.micrometer.core.instrument.Meter.Type.match;
 import static java.util.stream.StreamSupport.stream;
 
 /**
@@ -87,7 +86,7 @@ public void start(ThreadFactory threadFactory) {
     @Override
     protected void publish() {
         for (Meter meter : getMeters()) {
-            match(meter,
+            meter.apply(
                     this::trackGauge,
                     this::trackCounter,
                     this::trackTimer,

File: implementations/micrometer-registry-cloudwatch/src/main/java/io/micrometer/cloudwatch/CloudWatchMeterRegistry.java
Patch:
@@ -34,7 +34,6 @@
 import java.util.concurrent.TimeUnit;
 import java.util.stream.Stream;
 
-import static io.micrometer.core.instrument.Meter.Type.match;
 import static java.util.Objects.requireNonNull;
 import static java.util.stream.Collectors.toList;
 import static java.util.stream.StreamSupport.stream;
@@ -96,7 +95,7 @@ public void onSuccess(PutMetricDataRequest request, PutMetricDataResult result)
     }
 
     private List<MetricDatum> metricData() {
-        return getMeters().stream().flatMap(m -> match(m,
+        return getMeters().stream().flatMap(m -> m.apply(
                 this::metricData,
                 this::metricData,
                 this::timerData,

File: implementations/micrometer-registry-datadog/src/main/java/io/micrometer/datadog/DatadogMeterRegistry.java
Patch:
@@ -36,7 +36,6 @@
 import java.util.concurrent.TimeUnit;
 import java.util.stream.Stream;
 
-import static io.micrometer.core.instrument.Meter.Type.match;
 import static java.util.Objects.requireNonNull;
 import static java.util.stream.Collectors.joining;
 import static java.util.stream.StreamSupport.stream;
@@ -106,7 +105,7 @@ protected void publish() {
                 */
                 httpClient.post(datadogEndpoint)
                         .withJsonContent(
-                                batch.stream().flatMap(meter -> match(meter,
+                                batch.stream().flatMap(meter -> meter.apply(
                                         m -> writeMeter(m, metadataToSend),
                                         m -> writeMeter(m, metadataToSend),
                                         timer -> writeTimer(timer, metadataToSend),

File: implementations/micrometer-registry-dynatrace/src/main/java/io/micrometer/dynatrace/DynatraceMeterRegistry.java
Patch:
@@ -37,7 +37,6 @@
 import java.util.stream.Stream;
 import java.util.stream.StreamSupport;
 
-import static io.micrometer.core.instrument.Meter.Type.match;
 import static io.micrometer.dynatrace.DynatraceMetricDefinition.DynatraceUnit;
 import static java.util.Objects.requireNonNull;
 import static java.util.stream.Collectors.joining;
@@ -101,7 +100,7 @@ protected void publish() {
 
         for (List<Meter> batch : MeterPartition.partition(this, config.batchSize())) {
             final List<DynatraceCustomMetric> series = batch.stream()
-                    .flatMap(meter -> match(meter,
+                    .flatMap(meter -> meter.apply(
                             this::writeMeter,
                             this::writeMeter,
                             this::writeTimer,

File: implementations/micrometer-registry-elastic/src/main/java/io/micrometer/elastic/ElasticMeterRegistry.java
Patch:
@@ -36,7 +36,6 @@
 import java.util.concurrent.TimeUnit;
 import java.util.function.Consumer;
 
-import static io.micrometer.core.instrument.Meter.Type.match;
 import static java.util.stream.Collectors.joining;
 
 /**
@@ -123,7 +122,7 @@ protected void publish() {
                         .post(config.host() + "/" + indexName + "/doc/_bulk")
                         .withBasicAuthentication(config.userName(), config.password())
                         .withJsonContent(batch.stream()
-                                .map(m -> match(m,
+                                .map(m -> m.apply(
                                         this::writeGauge,
                                         this::writeCounter,
                                         this::writeTimer,

File: implementations/micrometer-registry-ganglia/src/main/java/io/micrometer/ganglia/GangliaMeterRegistry.java
Patch:
@@ -36,8 +36,6 @@
 import java.util.concurrent.ThreadFactory;
 import java.util.concurrent.TimeUnit;
 
-import static io.micrometer.core.instrument.Meter.Type.consume;
-
 /**
  * {@link StepMeterRegistry} for Ganglia.
  *
@@ -115,7 +113,7 @@ public void start(ThreadFactory threadFactory) {
     @Override
     protected void publish() {
         for (Meter meter : getMeters()) {
-            consume(meter,
+            meter.use(
                     this::announceGauge,
                     this::announceCounter,
                     this::announceTimer,

File: implementations/micrometer-registry-humio/src/main/java/io/micrometer/humio/HumioMeterRegistry.java
Patch:
@@ -38,7 +38,6 @@
 import java.util.concurrent.TimeUnit;
 import java.util.stream.StreamSupport;
 
-import static io.micrometer.core.instrument.Meter.Type.match;
 import static java.util.stream.Collectors.joining;
 
 /**
@@ -103,7 +102,7 @@ protected void publish() {
                 }
 
                 post.withJsonContent(meters.stream()
-                        .map(m -> match(m,
+                        .map(m -> m.apply(
                                 batch::writeGauge,
                                 batch::writeCounter,
                                 batch::writeTimer,

File: implementations/micrometer-registry-influx/src/main/java/io/micrometer/influx/InfluxMeterRegistry.java
Patch:
@@ -34,7 +34,6 @@
 import java.util.concurrent.TimeUnit;
 import java.util.stream.Stream;
 
-import static io.micrometer.core.instrument.Meter.Type.match;
 import static java.util.stream.Collectors.joining;
 
 /**
@@ -112,7 +111,7 @@ protected void publish() {
                 httpClient.post(influxEndpoint)
                         .withBasicAuthentication(config.userName(), config.password())
                         .withPlainText(batch.stream()
-                                .flatMap(m -> match(m,
+                                .flatMap(m -> m.apply(
                                         gauge -> writeGauge(gauge.getId(), gauge.value()),
                                         counter -> writeCounter(counter.getId(), counter.count()),
                                         this::writeTimer,

File: implementations/micrometer-registry-kairos/src/main/java/io/micrometer/kairos/KairosMeterRegistry.java
Patch:
@@ -34,8 +34,6 @@
 import java.util.stream.Stream;
 import java.util.stream.StreamSupport;
 
-import static io.micrometer.core.instrument.Meter.Type.match;
-
 /**
  * @author Anton Ilinchik
  */
@@ -78,7 +76,7 @@ protected void publish() {
                 httpClient.post(config.uri())
                         .withBasicAuthentication(config.userName(), config.password())
                         .withJsonContent(
-                                batch.stream().flatMap(m -> match(m,
+                                batch.stream().flatMap(m -> m.apply(
                                         this::writeGauge,
                                         this::writeCounter,
                                         this::writeTimer,

File: implementations/micrometer-registry-new-relic/src/main/java/io/micrometer/newrelic/NewRelicMeterRegistry.java
Patch:
@@ -35,7 +35,6 @@
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 
-import static io.micrometer.core.instrument.Meter.Type.match;
 import static java.util.Objects.requireNonNull;
 import static java.util.stream.StreamSupport.stream;
 
@@ -91,7 +90,7 @@ protected void publish() {
 
         // New Relic's Insights API limits us to 1000 events per call
         for (List<Meter> batch : MeterPartition.partition(this, Math.min(config.batchSize(), 1000))) {
-            sendEvents(insightsEndpoint, batch.stream().flatMap(meter -> match(meter,
+            sendEvents(insightsEndpoint, batch.stream().flatMap(meter -> meter.apply(
                     this::writeGauge,
                     this::writeCounter,
                     this::writeTimer,

File: implementations/micrometer-registry-signalfx/src/main/java/io/micrometer/signalfx/SignalFxMeterRegistry.java
Patch:
@@ -43,7 +43,6 @@
 
 import static com.signalfx.metrics.protobuf.SignalFxProtocolBuffers.MetricType.COUNTER;
 import static com.signalfx.metrics.protobuf.SignalFxProtocolBuffers.MetricType.GAUGE;
-import static io.micrometer.core.instrument.Meter.Type.match;
 import static java.util.stream.StreamSupport.stream;
 
 /**
@@ -103,7 +102,7 @@ protected void publish() {
         for (List<Meter> batch : MeterPartition.partition(this, config.batchSize())) {
             try (AggregateMetricSender.Session session = metricSender.createSession()) {
                 batch.stream()
-                        .map(meter -> match(meter,
+                        .map(meter -> meter.apply(
                                 this::addGauge,
                                 this::addCounter,
                                 this::addTimer,

File: implementations/micrometer-registry-stackdriver/src/main/java/io/micrometer/stackdriver/StackdriverMeterRegistry.java
Patch:
@@ -49,7 +49,6 @@
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 
-import static io.micrometer.core.instrument.Meter.Type.match;
 import static java.util.stream.Collectors.toCollection;
 import static java.util.stream.Collectors.toList;
 import static java.util.stream.StreamSupport.stream;
@@ -133,7 +132,7 @@ protected void publish() {
             Batch publishBatch = new Batch();
 
             Iterable<TimeSeries> series = batch.stream()
-                    .flatMap(meter -> match(meter,
+                    .flatMap(meter -> meter.apply(
                             m -> createGauge(publishBatch, m),
                             m -> createCounter(publishBatch, m),
                             m -> createTimer(publishBatch, m),

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdMeterRegistry.java
Patch:
@@ -46,8 +46,6 @@
 import java.util.function.ToDoubleFunction;
 import java.util.function.ToLongFunction;
 
-import static io.micrometer.core.instrument.Meter.Type.consume;
-
 /**
  * @author Jon Schneider
  */
@@ -137,7 +135,7 @@ public void onComplete() {
 
         config().onMeterRemoved(meter -> {
             //noinspection SuspiciousMethodCalls
-            consume(meter,
+            meter.use(
                     this::removePollableMeter,
                     c -> ((StatsdCounter) c).shutdown(),
                     t -> ((StatsdTimer) t).shutdown(),

File: implementations/micrometer-registry-wavefront/src/main/java/io/micrometer/wavefront/WavefrontMeterRegistry.java
Patch:
@@ -38,7 +38,6 @@
 import java.util.concurrent.TimeUnit;
 import java.util.stream.Stream;
 
-import static io.micrometer.core.instrument.Meter.Type.match;
 import static java.util.stream.Collectors.joining;
 import static java.util.stream.StreamSupport.stream;
 
@@ -87,7 +86,7 @@ public void start(ThreadFactory threadFactory) {
     @Override
     protected void publish() {
         for (List<Meter> batch : MeterPartition.partition(this, config.batchSize())) {
-            Stream<String> stream = batch.stream().flatMap(m -> match(m,
+            Stream<String> stream = batch.stream().flatMap(m -> m.apply(
                     this::writeMeter,
                     this::writeMeter,
                     this::writeTimer,

File: samples/micrometer-samples-core/src/main/java/io/micrometer/core/samples/utils/SampleConfig.java
Patch:
@@ -16,14 +16,12 @@
 package io.micrometer.core.samples.utils;
 
 import io.micrometer.core.instrument.MeterRegistry;
-import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
 
 // Run: git update-index --assume-unchanged **/SampleConfig.java
 // If you legitimately need to change this file, you can undo this with: git update-index --no-assume-unchanged **/SampleConfig.java
 public class SampleConfig {
     public static MeterRegistry myMonitoringSystem() {
         // Pick a monitoring system here to use in your samples.
-//        return SampleRegistries.prometheus();
-        return new SimpleMeterRegistry();
+        return SampleRegistries.prometheus();
     }
 }

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/web/servlet/WebMvcMetricsFilter.java
Patch:
@@ -21,8 +21,8 @@
 import io.micrometer.core.instrument.Timer;
 import io.micrometer.core.lang.NonNullApi;
 import io.micrometer.spring.TimedUtils;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 import org.springframework.core.Ordered;
 import org.springframework.core.annotation.Order;
 import org.springframework.http.HttpStatus;
@@ -54,7 +54,7 @@
 public class WebMvcMetricsFilter extends OncePerRequestFilter {
     private static final String TIMING_SAMPLE = "micrometer.timingSample";
 
-    private final Logger logger = LoggerFactory.getLogger(WebMvcMetricsFilter.class);
+    private static final Log logger = LogFactory.getLog(WebMvcMetricsFilter.class);
 
     private final MeterRegistry registry;
     private final WebMvcTagsProvider tagsProvider;

File: implementations/micrometer-registry-cloudwatch/src/main/java/io/micrometer/cloudwatch/CloudWatchUtils.java
Patch:
@@ -44,7 +44,7 @@ private CloudWatchUtils() {
      */
     static double clampMetricValue(double value) {
         // Leave as is and let the SDK reject it
-        if (Double.isNaN(value) || Double.isInfinite(value)) {
+        if (Double.isNaN(value)) {
             return value;
         }
         double magnitude = Math.abs(value);

File: implementations/micrometer-registry-cloudwatch/src/main/java/io/micrometer/cloudwatch/CloudWatchUtils.java
Patch:
@@ -40,11 +40,11 @@ private CloudWatchUtils() {
      * {@link com.amazonaws.services.cloudwatch.model.MetricDatum#setValue(Double)}
      *
      * @param value unsanitized value
-     * @return value clamped to allowable range, 0, or NaN
+     * @return value clamped to allowable range
      */
     static double clampMetricValue(double value) {
         // Leave as is and let the SDK reject it
-        if (Double.isNaN(value)) {
+        if (Double.isNaN(value) || Double.isInfinite(value)) {
             return value;
         }
         double magnitude = Math.abs(value);

File: implementations/micrometer-registry-wavefront/src/main/java/io/micrometer/wavefront/WavefrontMeterRegistry.java
Patch:
@@ -194,7 +194,7 @@ private Stream<String> writeMeter(Meter meter) {
 
     // VisibleForTesting
     void addMetric(Stream.Builder<String> metrics, Meter.Id id, @Nullable String suffix, long wallTime, double value) {
-        if (!Double.isNaN(value)) {
+        if (!Double.isNaN(value) && !Double.isInfinite(value)) {
             metrics.add(writeMetric(id, suffix, wallTime, value));
         }
     }

File: implementations/micrometer-registry-wavefront/src/test/java/io/micrometer/wavefront/WavefrontMeterRegistryTest.java
Patch:
@@ -57,10 +57,11 @@ void addMetric() {
     }
 
     @Test
-    void addMetricWhenNanShouldNotAdd() {
+    void addMetricWhenNanOrInfinityShouldNotAdd() {
         Stream.Builder<String> metricsStreamBuilder = Stream.builder();
         Meter.Id id = registry.counter("name").getId();
         registry.addMetric(metricsStreamBuilder, id, null, System.currentTimeMillis(), Double.NaN);
+        registry.addMetric(metricsStreamBuilder, id, null, System.currentTimeMillis(), Double.POSITIVE_INFINITY);
         assertThat(metricsStreamBuilder.build().count()).isEqualTo(0);
     }
 }

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/kafka/KafkaConsumerMetricsTest.java
Patch:
@@ -70,6 +70,6 @@ void consumerMetrics() {
     void kafkaMajorVersion() {
         createConsumer();
 
-        assertThat(kafkaConsumerMetrics.kafkaMajorVersion(Tags.of("client.id", "consumer-1"))).isGreaterThanOrEqualTo(2);
+        assertThat(kafkaConsumerMetrics.getKafkaMajorVersion(Tags.of("client.id", "consumer-1"))).isGreaterThanOrEqualTo(2);
     }
-}
\ No newline at end of file
+}

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Meter.java
Patch:
@@ -36,7 +36,7 @@
  *
  * @author Jon Schneider
  */
-public interface Meter extends AutoCloseable {
+public interface Meter {
     static Builder builder(String name, Type type, Iterable<Measurement> measurements) {
         return new Builder(name, type, measurements);
     }
@@ -472,7 +472,6 @@ public Meter register(MeterRegistry registry) {
         }
     }
 
-    @Override
     default void close() {
     }
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/MeterRegistry.java
Patch:
@@ -54,7 +54,7 @@
  *
  * @author Jon Schneider
  */
-public abstract class MeterRegistry implements AutoCloseable {
+public abstract class MeterRegistry {
     protected final Clock clock;
     private final Object meterMapLock = new Object();
     private volatile MeterFilter[] filters = new MeterFilter[0];
@@ -924,7 +924,6 @@ <T> TimeGauge timeGauge(Meter.Id id, @Nullable T obj, TimeUnit timeFunctionUnit,
      * Closes this registry, releasing any resources in the process. Once closed, this registry will no longer
      * accept new meters and any publishing activity will cease.
      */
-    @Override
     public void close() {
         if (closed.compareAndSet(false, true)) {
             synchronized (meterMapLock) {

File: implementations/micrometer-registry-appoptics/src/main/java/io/micrometer/appoptics/AppOpticsMeterRegistry.java
Patch:
@@ -211,6 +211,7 @@ private String write(Meter.Id id, @Nullable String type, String... statistics) {
         for (int i = 0; i < statistics.length; i += 2) {
             sb.append(",\"").append(statistics[i]).append("\":").append(statistics[i + 1]);
         }
+
         List<Tag> tags = id.getTags();
 
         sb.append(",\"tags\":{");

File: implementations/micrometer-registry-graphite/src/main/java/io/micrometer/graphite/GraphiteHierarchicalNameMapper.java
Patch:
@@ -40,7 +40,7 @@ public String toHierarchicalName(Meter.Id id, NamingConvention convention) {
             }
         }
         hierarchicalName.append(id.getConventionName(convention));
-        for (Tag tag : id.getTags()) {
+        for (Tag tag : id.getTagsAsIterable()) {
             if (!tagsAsPrefix.contains(tag.getKey())) {
                 hierarchicalName.append('.').append(sanitize(convention.tagKey(tag.getKey())))
                         .append('.').append(sanitize(convention.tagValue(tag.getValue())));

File: implementations/micrometer-registry-graphite/src/test/java/io/micrometer/graphite/GraphiteHierarchicalNameMapperTest.java
Patch:
@@ -17,16 +17,16 @@
 
 import io.micrometer.core.Issue;
 import io.micrometer.core.instrument.Meter;
-import io.micrometer.core.instrument.Tags;
 import io.micrometer.core.instrument.config.NamingConvention;
+import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
 import org.junit.jupiter.api.Test;
 
 import static org.assertj.core.api.Assertions.assertThat;
 
 class GraphiteHierarchicalNameMapperTest {
     private final GraphiteHierarchicalNameMapper nameMapper = new GraphiteHierarchicalNameMapper("stack", "app.name");
-    private final Meter.Id id = new Meter.Id("my.name", Tags.of("app.name", "MYAPP", "stack", "PROD", "other.tag", "value"),
-            null, null, Meter.Type.COUNTER);
+    private final Meter.Id id = new SimpleMeterRegistry().counter("my.name",
+            "app.name", "MYAPP", "stack", "PROD", "other.tag", "value").getId();
 
     @Issue("#561")
     @Test

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusMeterRegistry.java
Patch:
@@ -66,7 +66,7 @@ public PrometheusMeterRegistry(PrometheusConfig config, CollectorRegistry regist
     }
 
     private static List<String> tagValues(Meter.Id id) {
-        return id.getTags().stream().map(Tag::getValue).collect(toList());
+        return stream(id.getTagsAsIterable().spliterator(), false).map(Tag::getValue).collect(toList());
     }
 
     /**

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusRenameFilter.java
Patch:
@@ -38,7 +38,6 @@ public class PrometheusRenameFilter implements MeterFilter {
     @Override
     public Meter.Id map(Meter.Id id) {
         String convertedName = MICROMETER_TO_PROMETHEUS_NAMES.get(id.getName());
-        return convertedName == null ? id :
-                new Meter.Id(convertedName, id.getTags(), id.getBaseUnit(), id.getDescription(), id.getType());
+        return convertedName == null ? id : id.withName(convertedName);
     }
 }

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/internal/DatadogStatsdLineBuilder.java
Patch:
@@ -53,7 +53,7 @@ private void updateIfNamingConventionChanged() {
             this.namingConvention = next;
             this.name = next.name(sanitize(id.getName()), id.getType(), id.getBaseUnit()) + ":";
             this.tags = HashTreePMap.empty();
-            this.conventionTags = id.getTags().iterator().hasNext() ?
+            this.conventionTags = id.getTagsAsIterable().iterator().hasNext() ?
                     id.getConventionTags(this.namingConvention).stream()
                             .map(t -> sanitize(t.getKey()) + ":" + sanitize(t.getValue()))
                             .collect(Collectors.joining(","))

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/internal/SysdigStatsdLineBuilder.java
Patch:
@@ -53,7 +53,7 @@ private void updateIfNamingConventionChanged() {
             this.namingConvention = next;
             this.name = next.name(id.getName(), id.getType(), id.getBaseUnit()).replace(':', '_');
             this.tags = HashTreePMap.empty();
-            this.conventionTags = id.getTags().iterator().hasNext() ?
+            this.conventionTags = id.getTagsAsIterable().iterator().hasNext() ?
                     id.getConventionTags(this.namingConvention).stream()
                             .map(t -> t.getKey().replace(':', '_') + "=" + t.getValue().replace(':', '_'))
                             .collect(Collectors.joining(","))

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/internal/TelegrafStatsdLineBuilder.java
Patch:
@@ -64,7 +64,7 @@ private void updateIfNamingConventionChanged() {
 
             this.name = telegrafEscape(next.name(id.getName(), id.getType(), id.getBaseUnit()));
             this.tags = HashTreePMap.empty();
-            this.conventionTags = id.getTags().iterator().hasNext() ?
+            this.conventionTags = id.getTagsAsIterable().iterator().hasNext() ?
                     id.getConventionTags(this.namingConvention).stream()
                             .map(t -> telegrafEscape(t.getKey()) + "=" + telegrafEscape(t.getValue()))
                             .collect(Collectors.joining(","))

File: micrometer-core/src/main/java/io/micrometer/core/instrument/ImmutableTag.java
Patch:
@@ -53,7 +53,9 @@ public boolean equals(@Nullable Object o) {
 
     @Override
     public int hashCode() {
-        return Objects.hash(key, value);
+        int result = key.hashCode();
+        result = 31 * result + value.hashCode();
+        return result;
     }
 
     @Override

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeCustomMeter.java
Patch:
@@ -28,7 +28,7 @@ class CompositeCustomMeter extends DefaultMeter implements CompositeMeter {
     @Override
     public void add(MeterRegistry registry) {
         Meter.builder(getId().getName(), getType(), measure())
-            .tags(getId().getTags())
+            .tags(getId().getTagsAsIterable())
             .description(getId().getDescription())
             .baseUnit(getId().getBaseUnit())
             .register(registry);

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeDistributionSummary.java
Patch:
@@ -67,7 +67,7 @@ DistributionSummary newNoopMeter() {
     @Override
     DistributionSummary registerNewMeter(MeterRegistry registry) {
         return DistributionSummary.builder(getId().getName())
-                .tags(getId().getTags())
+                .tags(getId().getTagsAsIterable())
                 .description(getId().getDescription())
                 .baseUnit(getId().getBaseUnit())
                 .publishPercentiles(distributionStatisticConfig.getPercentiles())

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeFunctionCounter.java
Patch:
@@ -52,7 +52,7 @@ FunctionCounter registerNewMeter(MeterRegistry registry) {
         }
 
         return FunctionCounter.builder(getId().getName(), obj, f)
-            .tags(getId().getTags())
+            .tags(getId().getTagsAsIterable())
             .description(getId().getDescription())
             .baseUnit(getId().getBaseUnit())
             .register(registry);

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeFunctionTimer.java
Patch:
@@ -69,7 +69,7 @@ FunctionTimer registerNewMeter(MeterRegistry registry) {
 
         return FunctionTimer.builder(getId().getName(), obj, countFunction,
             totalTimeFunction, totalTimeFunctionUnit)
-            .tags(getId().getTags())
+            .tags(getId().getTagsAsIterable())
             .description(getId().getDescription())
             .register(registry);
     }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeGauge.java
Patch:
@@ -52,7 +52,7 @@ Gauge registerNewMeter(MeterRegistry registry) {
         }
 
         return Gauge.builder(getId().getName(), obj, f)
-            .tags(getId().getTags())
+            .tags(getId().getTagsAsIterable())
             .description(getId().getDescription())
             .baseUnit(getId().getBaseUnit())
             .register(registry);

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeLongTaskTimer.java
Patch:
@@ -85,7 +85,7 @@ LongTaskTimer newNoopMeter() {
     @Override
     LongTaskTimer registerNewMeter(MeterRegistry registry) {
         return LongTaskTimer.builder(getId().getName())
-                .tags(getId().getTags())
+                .tags(getId().getTagsAsIterable())
                 .description(getId().getDescription())
                 .register(registry);
     }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeTimeGauge.java
Patch:
@@ -60,7 +60,7 @@ TimeGauge registerNewMeter(MeterRegistry registry) {
         }
 
         return TimeGauge.builder(getId().getName(), obj, fUnit, f)
-            .tags(getId().getTags())
+            .tags(getId().getTagsAsIterable())
             .description(getId().getDescription())
             .register(registry);
     }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeTimer.java
Patch:
@@ -117,7 +117,7 @@ Timer newNoopMeter() {
     @Override
     Timer registerNewMeter(MeterRegistry registry) {
         Timer.Builder builder = Timer.builder(getId().getName())
-                .tags(getId().getTags())
+                .tags(getId().getTagsAsIterable())
                 .description(getId().getDescription())
                 .maximumExpectedValue(Duration.ofNanos(distributionStatisticConfig.getMaximumExpectedValue()))
                 .minimumExpectedValue(Duration.ofNanos(distributionStatisticConfig.getMinimumExpectedValue()))

File: micrometer-core/src/main/java/io/micrometer/core/instrument/noop/NoopTimer.java
Patch:
@@ -15,8 +15,8 @@
  */
 package io.micrometer.core.instrument.noop;
 
-import io.micrometer.core.instrument.distribution.HistogramSnapshot;
 import io.micrometer.core.instrument.Timer;
+import io.micrometer.core.instrument.distribution.HistogramSnapshot;
 
 import java.util.concurrent.Callable;
 import java.util.concurrent.TimeUnit;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/search/Search.java
Patch:
@@ -206,7 +206,7 @@ private Stream<Meter> meterStream() {
                     requiredKeysPresent = tagKeys.containsAll(requiredTagKeys);
                 }
 
-                return m.getId().getTags().containsAll(tags) && requiredKeysPresent;
+                return requiredKeysPresent && m.getId().getTags().containsAll(tags);
             });
         }
 

File: micrometer-test/src/main/java/io/micrometer/core/tck/MeterRegistryCompatibilityKit.java
Patch:
@@ -98,7 +98,7 @@ void addCommonTags(MeterRegistry registry) {
         Counter c = registry.counter("foo");
 
         assertThat(registry.get("foo").tags("k", "v").counter()).isSameAs(c);
-        assertThat(c.getId().getTags()).hasSize(1);
+        assertThat(c.getId().getTagsAsIterable()).hasSize(1);
     }
 
     @Test

File: samples/micrometer-samples-core/src/main/java/io/micrometer/core/samples/utils/SampleConfig.java
Patch:
@@ -16,12 +16,14 @@
 package io.micrometer.core.samples.utils;
 
 import io.micrometer.core.instrument.MeterRegistry;
+import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
 
 // Run: git update-index --assume-unchanged **/SampleConfig.java
 // If you legitimately need to change this file, you can undo this with: git update-index --no-assume-unchanged **/SampleConfig.java
 public class SampleConfig {
     public static MeterRegistry myMonitoringSystem() {
         // Pick a monitoring system here to use in your samples.
-        return SampleRegistries.prometheus();
+//        return SampleRegistries.prometheus();
+        return new SimpleMeterRegistry();
     }
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/distribution/HistogramSnapshot.java
Patch:
@@ -27,7 +27,6 @@ public final class HistogramSnapshot {
     private static final ValueAtPercentile[] EMPTY_VALUES = new ValueAtPercentile[0];
     private static final CountAtBucket[] EMPTY_COUNTS = new CountAtBucket[0];
 
-    private static final HistogramSnapshot EMPTY = new HistogramSnapshot(0, 0, 0, null, null, null);
     private final ValueAtPercentile[] percentileValues;
     private final CountAtBucket[] histogramCounts;
 

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/web/servlet/WebMvcTags.java
Patch:
@@ -162,7 +162,7 @@ public static Tag exception(@Nullable Throwable exception) {
      * @return the outcome tag derived from the status of the response
      * @since 1.1.0
      */
-    public static Tag outcome(HttpServletResponse response) {
+    public static Tag outcome(@Nullable HttpServletResponse response) {
         if (response != null) {
             int status = response.getStatus();
             if (status < 200) {

File: samples/micrometer-samples-core/src/main/java/io/micrometer/core/samples/TimerSample.java
Patch:
@@ -39,8 +39,8 @@ public static void main(String[] args) {
                 .distributionStatisticBufferLength(3)
                 .register(registry);
 
-        FunctionTimer.builder("ftimer", timer, Timer::count, t -> t.totalTime(TimeUnit.SECONDS), TimeUnit.SECONDS)
-                .register(registry);
+//        FunctionTimer.builder("ftimer", timer, Timer::count, t -> t.totalTime(TimeUnit.SECONDS), TimeUnit.SECONDS)
+//                .register(registry);
 
         RandomEngine r = new MersenneTwister64(0);
         Normal incomingRequests = new Normal(0, 1, r);

File: samples/micrometer-samples-core/src/main/java/io/micrometer/core/samples/utils/SampleConfig.java
Patch:
@@ -22,6 +22,7 @@
 public class SampleConfig {
     public static MeterRegistry myMonitoringSystem() {
         // Pick a monitoring system here to use in your samples.
-        return SampleRegistries.kairos();
+        return SampleRegistries.stackdriver("/Users/jschneider/Downloads/cf-sandbox-jschneider-8b62d505f1e5.json",
+                "cf-sandbox-jschneider");
     }
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/DistributionSummary.java
Patch:
@@ -29,7 +29,7 @@
 
 /**
  * Track the sample distribution of events. An example would be the response sizes for requests
- * hitting and http server.
+ * hitting an http server.
  *
  * @author Jon Schneider
  */

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jvm/JvmThreadMetrics.java
Patch:
@@ -75,9 +75,10 @@ public void bindTo(MeterRegistry registry) {
         }
     }
 
-    private static long getThreadStateCount(ThreadMXBean threadBean, Thread.State state) {
+    // VisibleForTesting
+    static long getThreadStateCount(ThreadMXBean threadBean, Thread.State state) {
         return Arrays.stream(threadBean.getThreadInfo(threadBean.getAllThreadIds()))
-                .filter(threadInfo -> threadInfo.getThreadState() == state)
+                .filter(threadInfo -> threadInfo != null && threadInfo.getThreadState() == state)
                 .count();
     }
 

File: implementations/micrometer-registry-appoptics/src/main/java/io/micrometer/appoptics/AppOpticsConfig.java
Patch:
@@ -48,8 +48,8 @@ default String apiToken() {
     }
 
     /**
-     * @return The tag that will be mapped to "@host" when shipping metrics to AppOptics, or {@code null} if
-     * "@host" should be omitted on publishing.
+     * @return The tag that will be mapped to {@literal @}host when shipping metrics to AppOptics, or {@code null} if
+     * {@literal @}host should be omitted on publishing.
      */
     @Nullable
     default String hostTag() {

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/export/appoptics/AppOpticsProperties.java
Patch:
@@ -32,10 +32,9 @@ public class AppOpticsProperties extends StepRegistryProperties {
     public String apiToken;
 
     /**
-     * The tag that will be mapped to "@host" when shipping metrics to AppOptics, or {@code null} if
-     * "@host" should be omitted on publishing.
+     * The tag that will be mapped to "@host" when shipping metrics to AppOptics.
      */
-    public String hostTag;
+    public String hostTag = "instance";
 
     /**
      * The URI to ship metrics to.

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/export/datadog/DatadogProperties.java
Patch:
@@ -47,7 +47,7 @@ public class DatadogProperties extends StepRegistryProperties {
      * Tag that will be mapped to "host" when shipping metrics to Datadog. Can be
      * omitted if host should be omitted on publishing.
      */
-    private String hostTag;
+    private String hostTag = "instance";
 
     /**
      * URI to ship metrics to. If you need to publish metrics to an internal proxy

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/export/wavefront/WavefrontPropertiesConfigAdapter.java
Patch:
@@ -16,14 +16,15 @@
 package io.micrometer.spring.autoconfigure.export.wavefront;
 
 import io.micrometer.spring.autoconfigure.export.PropertiesConfigAdapter;
+import io.micrometer.spring.autoconfigure.export.StepRegistryPropertiesConfigAdapter;
 import io.micrometer.wavefront.WavefrontConfig;
 
 /**
  * Adapter to convert {@link WavefrontProperties} to a {@link WavefrontConfig}.
  *
  * @author Jon Schneider
  */
-public class WavefrontPropertiesConfigAdapter extends PropertiesConfigAdapter<WavefrontProperties> implements WavefrontConfig {
+public class WavefrontPropertiesConfigAdapter extends StepRegistryPropertiesConfigAdapter<WavefrontProperties> implements WavefrontConfig {
 
     public WavefrontPropertiesConfigAdapter(WavefrontProperties properties) {
         super(properties);

File: micrometer-jersey2/src/main/java/io/micrometer/jersey2/server/JerseyTagsProvider.java
Patch:
@@ -15,7 +15,6 @@
  */
 package io.micrometer.jersey2.server;
 
-import io.micrometer.core.instrument.TagsProvider;
 import org.glassfish.jersey.server.monitoring.RequestEvent;
 
 import io.micrometer.core.instrument.Tag;
@@ -25,7 +24,7 @@
  * 
  * @author Michael Weirauch
  */
-public interface JerseyTagsProvider extends TagsProvider {
+public interface JerseyTagsProvider {
 
     /**
      * Provides tags to be associated with metrics for the given {@code event}.

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/web/client/RestTemplateExchangeTagsProvider.java
Patch:
@@ -16,7 +16,6 @@
 package io.micrometer.spring.web.client;
 
 import io.micrometer.core.instrument.Tag;
-import io.micrometer.core.instrument.TagsProvider;
 import io.micrometer.core.lang.Nullable;
 import org.springframework.http.HttpRequest;
 import org.springframework.http.client.ClientHttpResponse;
@@ -29,7 +28,7 @@
  * @author Andy Wilkinson
  */
 @FunctionalInterface
-public interface RestTemplateExchangeTagsProvider extends TagsProvider {
+public interface RestTemplateExchangeTagsProvider {
 
     /**
      * Provides the tags to be associated with metrics that are recorded for the given

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/web/servlet/WebMvcTagsProvider.java
Patch:
@@ -17,7 +17,6 @@
 
 import io.micrometer.core.instrument.LongTaskTimer;
 import io.micrometer.core.instrument.Tag;
-import io.micrometer.core.instrument.TagsProvider;
 import io.micrometer.core.lang.NonNull;
 import io.micrometer.core.lang.NonNullApi;
 import io.micrometer.core.lang.Nullable;
@@ -32,7 +31,7 @@
  * @author Andy Wilkinson
  */
 @NonNullApi
-public interface WebMvcTagsProvider extends TagsProvider {
+public interface WebMvcTagsProvider {
 
     /**
      * Provides tags to be used by {@link LongTaskTimer long task timers}.

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/MetricsAutoConfiguration.java
Patch:
@@ -124,7 +124,7 @@ public SpringIntegrationMetrics springIntegrationMetrics(
 
     @Configuration
     @ConditionalOnClass(name = "org.aspectj.lang.ProceedingJoinPoint")
-    @ConditionalOnProperty(value = "spring.aop.enabled", havingValue = "true", matchIfMissing = true)
+    @ConditionalOnProperty(value = "spring.aop.auto", havingValue = "true", matchIfMissing = true)
     static class AopRequiredConfiguration {
 
         // If AOP is not enabled, scheduled interception will not work.

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/autoconfigure/MetricsAutoConfigurationTest.java
Patch:
@@ -89,7 +89,7 @@ void configuresMeterRegistries() {
 
     @Test
     void backsOffWhenSpringAopEnabledIsFalse() {
-        EnvironmentTestUtils.addEnvironment(context, "spring.aop.enabled=false");
+        EnvironmentTestUtils.addEnvironment(context, "spring.aop.auto=false");
 
         registerAndRefresh(BaseMeterRegistryConfiguration.class);
 

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/autoconfigure/export/humio/HumioMetricsExportAutoConfigurationTest.java
Patch:
@@ -43,7 +43,7 @@ void anyAdditionToTagsReplacesDefault() {
     @Test
     void defaultTag() {
         registerAndRefresh(ClockConfiguration.class, HumioMetricsExportAutoConfiguration.class);
-        assertThat(context.getBean(HumioConfig.class).tags()).containsOnlyKeys("name");
+        assertThat(context.getBean(HumioConfig.class).tags()).isNull();
     }
 
     @AfterEach

File: implementations/micrometer-registry-kairos/src/test/java/io/micrometer/kairos/KairosNamingConventionTest.java
Patch:
@@ -24,12 +24,10 @@
  * @author Anton Ilinchik
  */
 class KairosNamingConventionTest {
-
     private KairosNamingConvention convention = new KairosNamingConvention();
 
     @Test
-    void dotNotationIsConvertedToSnakeCase() {
+    void defaultToSnakeCase() {
         assertThat(convention.name("gauge.size", Meter.Type.GAUGE)).isEqualTo("gauge_size");
     }
-
 }
\ No newline at end of file

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/export/kairos/KairosMetricsExportAutoConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2018 Pivotal Software, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/export/kairos/KairosPropertiesConfigAdapter.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2018 Pivotal Software, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -30,8 +30,8 @@ public KairosPropertiesConfigAdapter(KairosProperties properties) {
     }
 
     @Override
-    public String host() {
-        return get(KairosProperties::getHost, KairosConfig.super::host);
+    public String uri() {
+        return get(KairosProperties::getUri, KairosConfig.super::uri);
     }
 
     @Override

File: samples/micrometer-samples-core/src/main/java/io/micrometer/core/samples/utils/SampleConfig.java
Patch:
@@ -22,6 +22,6 @@
 public class SampleConfig {
     public static MeterRegistry myMonitoringSystem() {
         // Pick a monitoring system here to use in your samples.
-        return SampleRegistries.atlas();
+        return SampleRegistries.kairos();
     }
 }

File: implementations/micrometer-registry-appoptics/src/main/java/io/micrometer/appoptics/Measurement.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2017 Pivotal Software, Inc.
+ * Copyright 2018 Pivotal Software, Inc.
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: implementations/micrometer-registry-datadog/src/main/java/io/micrometer/datadog/DatadogMeterRegistry.java
Patch:
@@ -106,7 +106,7 @@ protected void publish() {
                                         m -> writeMeter(m, metadataToSend))
                                 ).collect(joining(",", "{\"series\":[", "]}")))
                         .send()
-                        .onSuccess(response -> logger.debug("successfully sent {} metrics to Datadog.", batch.size()))
+                        .onSuccess(response -> logger.debug("successfully sent {} metrics to datadog", batch.size()))
                         .onError(response -> logger.error("failed to send metrics to datadog: {}", response.body()));
             }
         } catch (Throwable e) {

File: samples/micrometer-samples-core/src/main/java/io/micrometer/core/samples/utils/SampleRegistries.java
Patch:
@@ -68,9 +68,6 @@ public static AppOpticsMeterRegistry appOptics(String apiToken) {
             @Override
             public String token() { return apiToken; }
 
-            @Override
-            public String metricPrefix() { return "micrometer.samples.test"; }
-
             @Override
             public Duration step() {
                 return Duration.ofSeconds(10);

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jvm/DiskSpaceMetrics.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.micrometer.core.instrument.binder.jvm;
 
+import io.micrometer.core.annotation.Incubating;
 import io.micrometer.core.instrument.Gauge;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.Tag;
@@ -33,6 +34,7 @@
  * @author jmcshane
  * @author Johnny Lim
  */
+@Incubating(since = "1.1.0")
 @NonNullApi
 @NonNullFields
 public class DiskSpaceMetrics implements MeterBinder {

File: implementations/micrometer-registry-azure-monitor/src/main/java/io/micrometer/azuremonitor/AzureMonitorConfig.java
Patch:
@@ -24,7 +24,6 @@
  * @author Dhaval Doshi
  */
 public interface AzureMonitorConfig extends StepRegistryConfig {
-    AzureMonitorConfig DEFAULT = k -> null;
 
     @Override
     default String prefix() {

File: implementations/micrometer-registry-dynatrace/src/main/java/io/micrometer/dynatrace/DynatraceConfig.java
Patch:
@@ -26,8 +26,6 @@
  */
 public interface DynatraceConfig extends StepRegistryConfig {
 
-    DynatraceConfig DEFAULT = k -> null;
-
     @Override
     default String prefix() {
         return "dynatrace";

File: implementations/micrometer-registry-signalfx/src/main/java/io/micrometer/signalfx/SignalFxConfig.java
Patch:
@@ -28,7 +28,6 @@
  * @author Jon Schneider
  */
 public interface SignalFxConfig extends StepRegistryConfig {
-    SignalFxConfig DEFAULT = k -> null;
 
     @Override
     default String prefix() {

File: implementations/micrometer-registry-datadog/src/main/java/io/micrometer/datadog/DatadogMeterRegistry.java
Patch:
@@ -106,7 +106,7 @@ protected void publish() {
                                         m -> writeMeter(m, metadataToSend))
                                 ).collect(joining(",", "{\"series\":[", "]}")))
                         .send()
-                        .onSuccess(response -> logger.debug("Successfully sent {} metrics to Datadog.", batch.size()))
+                        .onSuccess(response -> logger.debug("successfully sent {} metrics to Datadog.", batch.size()))
                         .onError(response -> logger.error("failed to send metrics to datadog: {}", response.body()));
             }
         } catch (Throwable e) {

File: implementations/micrometer-registry-dynatrace/src/main/java/io/micrometer/dynatrace/DynatraceMeterRegistry.java
Patch:
@@ -219,7 +219,7 @@ private void postCustomMetricValues(String type, List<DynatraceTimeSeries> timeS
                                     .collect(joining(",")) +
                             "]}")
                     .send()
-                    .onSuccess(response -> logger.debug("Successfully sent {} metrics to Dynatrace.", timeSeries.size()))
+                    .onSuccess(response -> logger.debug("successfully sent {} metrics to Dynatrace.", timeSeries.size()))
                     .onError(response -> logger.error("failed to send metrics to dynatrace: {}", response.body()));
         } catch (Throwable e) {
             logger.error("failed to send metrics to dynatrace", e);

File: implementations/micrometer-registry-elastic/src/main/java/io/micrometer/elastic/ElasticMeterRegistry.java
Patch:
@@ -131,7 +131,7 @@ protected void publish() {
                             if (body.contains("\"errors\":true")) {
                                 logger.error("failed to send metrics to elastic: {}", body);
                             } else {
-                                logger.debug("Successfully sent {} metrics to Elasticsearch.", batch.size());
+                                logger.debug("successfully sent {} metrics to Elasticsearch.", batch.size());
                             }
                         })
                         .onError(response -> logger.error("failed to send metrics to elastic: {}", response.body()));

File: implementations/micrometer-registry-influx/src/main/java/io/micrometer/influx/InfluxMeterRegistry.java
Patch:
@@ -113,7 +113,7 @@ protected void publish() {
                         .compressWhen(config::compressed)
                         .send()
                         .onSuccess(response -> {
-                            logger.debug("Successfully sent {} metrics to InfluxDB.", batch.size());
+                            logger.debug("successfully sent {} metrics to InfluxDB.", batch.size());
                             databaseExists = true;
                         })
                         .onError(response -> logger.error("failed to send metrics to influx: {}", response.body()));

File: implementations/micrometer-registry-new-relic/src/main/java/io/micrometer/newrelic/NewRelicMeterRegistry.java
Patch:
@@ -182,7 +182,7 @@ private void sendEvents(String insightsEndpoint, Stream<String> events) {
                     .withHeader("X-Insert-Key", config.apiKey())
                     .withJsonContent(events.peek(ev -> totalEvents.incrementAndGet()).collect(Collectors.joining(",", "[", "]")))
                     .send()
-                    .onSuccess(response -> logger.debug("Successfully sent {} metrics to New Relic.", totalEvents))
+                    .onSuccess(response -> logger.debug("successfully sent {} metrics to New Relic.", totalEvents))
                     .onError(response -> logger.error("failed to send metrics to new relic: {}", response.body()));
         } catch (Throwable e) {
             logger.warn("failed to send metrics to new relic", e);

File: implementations/micrometer-registry-signalfx/src/main/java/io/micrometer/signalfx/SignalFxMeterRegistry.java
Patch:
@@ -107,7 +107,7 @@ protected void publish() {
                         .flatMap(builders -> builders.map(builder -> builder.setTimestamp(timestamp).build()))
                         .forEach(session::setDatapoint);
 
-                logger.debug("Successfully sent {} metrics to SignalFx.", batch.size());
+                logger.debug("successfully sent {} metrics to SignalFx.", batch.size());
             } catch (Throwable e) {
                 logger.warn("failed to send metrics", e);
             }

File: implementations/micrometer-registry-wavefront/src/main/java/io/micrometer/wavefront/WavefrontMeterRegistry.java
Patch:
@@ -119,7 +119,7 @@ protected void publish() {
     }
 
     private void logSuccessfulMetricsSent(List<Meter> batch) {
-        logger.debug("Successfully sent {} metrics to Wavefront.", batch.size());
+        logger.debug("successfully sent {} metrics to Wavefront.", batch.size());
     }
 
     private boolean directToApi() {

File: implementations/micrometer-registry-elastic/src/main/java/io/micrometer/elastic/ElasticMeterRegistry.java
Patch:
@@ -129,7 +129,7 @@ protected void publish() {
                             // {"took":16,"errors":true,"items":[{"index":{"_index":"metrics-2018-03","_type":"timer","_id":"i8kdBmIBmtn9wpUGezjX","status":400,"error":{"type":"illegal_argument_exception","reason":"Rejecting mapping update to [metrics-2018-03] as the final mapping would have more than 1 type: [metric, doc]"}}}]}
                             String body = response.body();
                             if (body.contains("\"errors\":true")) {
-                                logger.error("failed to send metrics to elastic: {}", response);
+                                logger.error("failed to send metrics to elastic: {}", body);
                             } else {
                                 logger.debug("Successfully sent {} metrics to Elasticsearch.", batch.size());
                             }

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/MetricsAutoConfiguration.java
Patch:
@@ -52,9 +52,6 @@
 @ConditionalOnClass(Timed.class)
 @EnableConfigurationProperties(MetricsProperties.class)
 @Import({
-        // default binders
-        MeterBindersConfiguration.class,
-
         // default instrumentation
         TomcatMetricsConfiguration.class,
         JerseyServerMetricsConfiguration.class,

File: implementations/micrometer-registry-ganglia/src/main/java/io/micrometer/ganglia/GangliaConfig.java
Patch:
@@ -17,6 +17,7 @@
 
 import info.ganglia.gmetric4j.gmetric.GMetric;
 import io.micrometer.core.instrument.dropwizard.DropwizardConfig;
+import io.micrometer.core.instrument.step.StepRegistryConfig;
 import io.micrometer.core.lang.Nullable;
 
 import java.util.concurrent.TimeUnit;
@@ -26,7 +27,7 @@
  *
  * @author Jon Schneider
  */
-public interface GangliaConfig extends DropwizardConfig {
+public interface GangliaConfig extends StepRegistryConfig {
     /**
      * Accept configuration defaults
      */

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Meter.java
Patch:
@@ -140,7 +140,7 @@ public static <T> T match(Meter meter,
          * @param visitMeter           function to apply as a fallback
          * @since 1.1.0
          */
-        public static void match(Meter meter,
+        public static void consume(Meter meter,
                                  Consumer<Gauge> visitGauge,
                                  Consumer<Counter> visitCounter,
                                  Consumer<Timer> visitTimer,

File: implementations/micrometer-registry-wavefront/src/main/java/io/micrometer/wavefront/WavefrontMeterRegistry.java
Patch:
@@ -199,8 +199,9 @@ private Stream<String> writeMeter(Meter meter) {
         return metrics.build();
     }
 
-    private void addMetric(Stream.Builder<String> metrics, Meter.Id id, @Nullable String suffix, long wallTime, double value) {
-        if (value != Double.NaN) {
+    // VisibleForTesting
+    void addMetric(Stream.Builder<String> metrics, Meter.Id id, @Nullable String suffix, long wallTime, double value) {
+        if (!Double.isNaN(value)) {
             metrics.add(writeMetric(id, suffix, wallTime, value));
         }
     }

File: implementations/micrometer-registry-jmx/src/main/java/io/micrometer/jmx/JmxMeterRegistry.java
Patch:
@@ -15,8 +15,8 @@
  */
 package io.micrometer.jmx;
 
-import com.codahale.metrics.JmxReporter;
 import com.codahale.metrics.MetricRegistry;
+import com.codahale.metrics.jmx.JmxReporter;
 import io.micrometer.core.instrument.Clock;
 import io.micrometer.core.instrument.dropwizard.DropwizardMeterRegistry;
 import io.micrometer.core.instrument.util.HierarchicalNameMapper;

File: micrometer-core/src/main/java/io/micrometer/core/ipc/http/ReactorNettyClient.java
Patch:
@@ -37,11 +37,11 @@ public HttpResponse send(URL url, HttpRequest request) {
         Tuple2<Integer, String> response = httpClient.request(toNettyHttpMethod(request.getMethod()))
                 .uri(url.toString())
                 .send(ByteBufFlux.fromString(Mono.just(new String(request.getEntity()))))
-                .responseSingle((r, body) -> Mono.just(r.status().code()).zipWith(body.asString()))
+                .responseSingle((r, body) -> Mono.just(r.status().code()).zipWith(body.asString().defaultIfEmpty("")))
+                .log()
                 .block();
 
-        return response == null ?
-                new HttpResponse(500, null) : new HttpResponse(response.getT1(), response.getT2());
+        return new HttpResponse(response.getT1(), response.getT2());
     }
 
     private io.netty.handler.codec.http.HttpMethod toNettyHttpMethod(HttpMethod method) {

File: implementations/micrometer-registry-datadog/src/main/java/io/micrometer/datadog/DatadogMeterRegistry.java
Patch:
@@ -106,7 +106,7 @@ protected void publish() {
                                         m -> writeMeter(m, metadataToSend))
                                 ).collect(joining(",", "{\"series\":[", "]}")))
                         .send()
-                        .onSuccess(response -> logger.info("successfully sent {} metrics to datadog", batch.size()))
+                        .onSuccess(response -> logger.debug("Successfully sent {} metrics to Datadog.", batch.size()))
                         .onError(response -> logger.error("failed to send metrics to datadog: {}", response.body()));
             }
         } catch (Throwable e) {

File: implementations/micrometer-registry-dynatrace/src/main/java/io/micrometer/dynatrace/DynatraceMeterRegistry.java
Patch:
@@ -219,7 +219,7 @@ private void postCustomMetricValues(String type, List<DynatraceTimeSeries> timeS
                                     .collect(joining(",")) +
                             "]}")
                     .send()
-                    .onSuccess(response -> logger.info("successfully sent {} metrics to dynatrace", timeSeries.size()))
+                    .onSuccess(response -> logger.debug("Successfully sent {} metrics to Dynatrace.", timeSeries.size()))
                     .onError(response -> logger.error("failed to send metrics to dynatrace: {}", response.body()));
         } catch (Throwable e) {
             logger.error("failed to send metrics to dynatrace", e);

File: implementations/micrometer-registry-elastic/src/main/java/io/micrometer/elastic/ElasticMeterRegistry.java
Patch:
@@ -131,7 +131,7 @@ protected void publish() {
                             if (body.contains("\"errors\":true")) {
                                 logger.error("failed to send metrics to elastic: {}", response);
                             } else {
-                                logger.info("successfully sent {} metrics to elastic", batch.size());
+                                logger.debug("Successfully sent {} metrics to Elasticsearch.", batch.size());
                             }
                         })
                         .onError(response -> logger.error("failed to send metrics to elastic: {}", response.body()));

File: implementations/micrometer-registry-influx/src/main/java/io/micrometer/influx/InfluxMeterRegistry.java
Patch:
@@ -113,7 +113,7 @@ protected void publish() {
                         .compressWhen(config::compressed)
                         .send()
                         .onSuccess(response -> {
-                            logger.info("successfully sent {} metrics to influx", batch.size());
+                            logger.debug("Successfully sent {} metrics to InfluxDB.", batch.size());
                             databaseExists = true;
                         })
                         .onError(response -> logger.error("failed to send metrics to influx: {}", response.body()));

File: implementations/micrometer-registry-new-relic/src/main/java/io/micrometer/newrelic/NewRelicMeterRegistry.java
Patch:
@@ -182,7 +182,7 @@ private void sendEvents(String insightsEndpoint, Stream<String> events) {
                     .withHeader("X-Insert-Key", config.apiKey())
                     .withJsonContent(events.peek(ev -> totalEvents.incrementAndGet()).collect(Collectors.joining(",", "[", "]")))
                     .send()
-                    .onSuccess(response -> logger.info("successfully sent {} metrics to new relic", totalEvents.get()))
+                    .onSuccess(response -> logger.debug("Successfully sent {} metrics to New Relic.", totalEvents))
                     .onError(response -> logger.error("failed to send metrics to new relic: {}", response.body()));
         } catch (Throwable e) {
             logger.warn("failed to send metrics to new relic", e);

File: implementations/micrometer-registry-signalfx/src/main/java/io/micrometer/signalfx/SignalFxMeterRegistry.java
Patch:
@@ -107,7 +107,7 @@ protected void publish() {
                         .flatMap(builders -> builders.map(builder -> builder.setTimestamp(timestamp).build()))
                         .forEach(session::setDatapoint);
 
-                logger.info("successfully sent " + batch.size() + " metrics to SignalFx");
+                logger.debug("Successfully sent {} metrics to SignalFx.", batch.size());
             } catch (Throwable e) {
                 logger.warn("failed to send metrics", e);
             }

File: implementations/micrometer-registry-wavefront/src/main/java/io/micrometer/wavefront/WavefrontMeterRegistry.java
Patch:
@@ -91,7 +91,7 @@ protected void publish() {
                             .acceptJson()
                             .withJsonContent("{" + stream.collect(joining(",")) + "}")
                             .send()
-                            .onSuccess(response -> logger.info("successfully sent {} metrics to wavefront", batch.size()))
+                            .onSuccess(response -> logger.debug("Successfully sent {} metrics to Wavefront.", batch.size()))
                             .onError(response -> logger.error("failed to send metrics to wavefront: {}", response.body()));
                 } catch (Throwable e) {
                     logger.error("failed to send metrics to wavefront", e);

File: implementations/micrometer-registry-elastic/src/test/java/io/micrometer/elastic/ElasticMeterRegistryTest.java
Patch:
@@ -100,8 +100,8 @@ void writeSummary() {
     @Test
     void writeMeter() {
         Timer timer = Timer.builder("myTimer").register(registry);
-        assertThat(registry.writeTimer(timer))
-                .contains("{ \"index\" : {} }\n{\"@timestamp\":\"1970-01-01T00:00:00.001Z\",\"name\":\"myTimer\",\"type\":\"timer\",\"count\":0,\"sum\":0.0,\"mean\":0.0,\"max\":0.0}");
+        assertThat(registry.writeMeter(timer))
+                .contains("{ \"index\" : {} }\n{\"@timestamp\":\"1970-01-01T00:00:00.001Z\",\"name\":\"myTimer\",\"type\":\"timer\",\"count\":\"0.0\",\"total\":\"0.0\",\"max\":\"0.0\"}");
     }
 
     @Test
@@ -131,4 +131,4 @@ void wholeCountIsReportedWithDecimal() {
         assertThat(registry.writeCounter(c)).contains("{ \"index\" : {} }\n" +
                 "{\"@timestamp\":\"1970-01-01T00:00:00.001Z\",\"name\":\"counter\",\"type\":\"counter\",\"count\":0.0}");
     }
-}
\ No newline at end of file
+}

File: implementations/micrometer-registry-azure-monitor/src/main/java/io/micrometer/azuremonitor/AzureMonitorMeterRegistry.java
Patch:
@@ -45,11 +45,9 @@ public class AzureMonitorMeterRegistry extends StepMeterRegistry {
 
     private final Logger logger = LoggerFactory.getLogger(AzureMonitorMeterRegistry.class);
     private final TelemetryClient client;
-    private final AzureMonitorConfig config;
 
     public AzureMonitorMeterRegistry(AzureMonitorConfig config, Clock clock, @Nullable TelemetryConfiguration clientConfig) {
         super(config, clock);
-        this.config = config;
 
         config().namingConvention(new AzureMonitorNamingConvention());
 

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/export/elastic/ElasticPropertiesConfigAdapter.java
Patch:
@@ -30,8 +30,8 @@ public ElasticPropertiesConfigAdapter(ElasticProperties properties) {
     }
 
     @Override
-    public String[] hosts() {
-        return get(ElasticProperties::getHosts, ElasticConfig.super::hosts);
+    public String host() {
+        return get(ElasticProperties::getHost, ElasticConfig.super::host);
     }
 
     @Override

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/jvm/ExecutorServiceMetricsTest.java
Patch:
@@ -44,7 +44,8 @@ void executor() throws InterruptedException {
         executor.execute(() -> System.out.println("hello"));
         lock.await();
 
-        assertThat(registry.get("executor").tags(userTags).tag("name", "exec").timer().count()).isEqualTo(1L);
+        assertThat(registry.get("executor.execution").tags(userTags).tag("name", "exec").timer().count()).isEqualTo(1L);
+        assertThat(registry.get("executor.idle").tags(userTags).tag("name", "exec").timer().count()).isEqualTo(1L);
     }
 
     @DisplayName("ExecutorService is casted from Executor when necessary")

File: implementations/micrometer-registry-wavefront/src/main/java/io/micrometer/wavefront/WavefrontMeterRegistry.java
Patch:
@@ -96,7 +96,7 @@ protected void publish() {
 
                         try (OutputStream os = con.getOutputStream();
                              OutputStreamWriter writer = new OutputStreamWriter(os, "UTF-8")) {
-                            writer.write("{" + stream.collect(joining(",")) + "}");
+                            writer.write(stream.collect(joining(",", "{", "}")));
                             writer.flush();
                         }
 
@@ -121,7 +121,7 @@ protected void publish() {
                     try (Socket socket = new Socket()) {
                         socket.connect(endpoint, timeout);
                         try (OutputStreamWriter writer = new OutputStreamWriter(socket.getOutputStream(), "UTF-8")) {
-                          writer.write(stream.collect(joining("\n")) + "\n");
+                          writer.write(stream.collect(joining("\n", "", "\n")));
                           writer.flush();
                         }
                     }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/kafka/KafkaConsumerMetrics.java
Patch:
@@ -15,7 +15,6 @@
  */
 package io.micrometer.core.instrument.binder.kafka;
 
-import io.micrometer.core.annotation.Incubating;
 import io.micrometer.core.instrument.*;
 import io.micrometer.core.instrument.binder.MeterBinder;
 import io.micrometer.core.lang.NonNullApi;
@@ -240,4 +239,4 @@ private Iterable<Tag> nameTag(ObjectName name) {
 
         return tags;
     }
-}
\ No newline at end of file
+}

File: micrometer-core/src/main/java/io/micrometer/core/instrument/distribution/HistogramGauges.java
Patch:
@@ -97,6 +97,7 @@ private HistogramGauges(HistogramSupport meter, MeterRegistry registry,
 
             Gauge.builder(percentileName.apply(valueAtPercentiles[i]), meter, percentileValueFunction)
                     .tags(percentileTags.apply(valueAtPercentiles[i]))
+                    .baseUnit(meter.getId().getBaseUnit())
                     .synthetic(true)
                     .register(registry);
         }

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/TimedAspectTest.java
Patch:
@@ -35,7 +35,7 @@
 
 import java.util.concurrent.atomic.AtomicReference;
 
-import static io.micrometer.core.aop.TimedAspect.DEFAULT_EXCEPTION_TAG;
+import static io.micrometer.core.aop.TimedAspect.EXCEPTION_TAG;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.jupiter.api.Assertions.assertThrows;
 
@@ -63,13 +63,13 @@ public void serviceIsTimedWhenNoValue() {
     @Test
     public void serviceIsTimedWhenThereIsAnException() {
         assertThrows(RuntimeException.class, () -> service.timeWithException());
-        assertThat(registry.get("somethingElse").tags(DEFAULT_EXCEPTION_TAG, "RuntimeException").timer().count()).isEqualTo(1);
+        assertThat(registry.get("somethingElse").tags(EXCEPTION_TAG, "RuntimeException").timer().count()).isEqualTo(1);
     }
 
     @Test
     public void serviceIsTimedWhenThereIsNoException() {
         service.timeWithoutException();
-        assertThat(registry.get("somethingElse").tags(DEFAULT_EXCEPTION_TAG, "none").timer().count()).isEqualTo(1);
+        assertThat(registry.get("somethingElse").tags(EXCEPTION_TAG, "none").timer().count()).isEqualTo(1);
     }
 
     @Test

File: implementations/micrometer-registry-ganglia/src/main/java/io/micrometer/ganglia/GangliaMeterRegistry.java
Patch:
@@ -67,7 +67,7 @@ public void start() {
 
     @Override
     public void close() {
-        if(config.enabled()) {
+        if (config.enabled()) {
             reporter.report();
         }
         stop();

File: implementations/micrometer-registry-graphite/src/main/java/io/micrometer/graphite/GraphiteMeterRegistry.java
Patch:
@@ -87,7 +87,7 @@ public void start() {
 
     @Override
     public void close() {
-        if(config.enabled()) {
+        if (config.enabled()) {
             reporter.report();
         }
         stop();

File: implementations/micrometer-registry-ganglia/src/main/java/io/micrometer/ganglia/GangliaMeterRegistry.java
Patch:
@@ -67,7 +67,9 @@ public void start() {
 
     @Override
     public void close() {
-        reporter.report();
+        if(config.enabled()) {
+            reporter.report();
+        }
         stop();
         this.reporter.close();
         super.close();

File: implementations/micrometer-registry-graphite/src/main/java/io/micrometer/graphite/GraphiteMeterRegistry.java
Patch:
@@ -87,7 +87,9 @@ public void start() {
 
     @Override
     public void close() {
-        reporter.report();
+        if(config.enabled()) {
+            reporter.report();
+        }
         stop();
         this.reporter.close();
         super.close();

File: implementations/micrometer-registry-azure-monitor/src/main/java/io/micrometer/azuremonitor/AzureMonitorConfig.java
Patch:
@@ -28,7 +28,7 @@ public interface AzureMonitorConfig extends StepRegistryConfig {
 
     @Override
     default String prefix() {
-        return "azure.monitor";
+        return "azuremonitor";
     }
 
     /**

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Statistic.java
Patch:
@@ -29,7 +29,7 @@ public enum Statistic {
     /**
      * The sum of the times recorded. Reported in the monitoring system's base unit of time
      */
-    TOTAL_TIME("totalTime"),
+    TOTAL_TIME("total"),
 
     /**
      * Rate per second for calls.
@@ -54,7 +54,7 @@ public enum Statistic {
     /**
      * Number of currently active tasks for a long task timer.
      */
-    ACTIVE_TASKS("activeTasks"),
+    ACTIVE_TASKS("active"),
 
     /**
      * Duration of a running task in a long task timer. Always reported in the monitoring system's base unit of time.

File: micrometer-core/src/test/java/io/micrometer/core/instrument/MeterIdTest.java
Patch:
@@ -24,7 +24,7 @@ class MeterIdTest {
     @Test
     void withStatistic() {
         Meter.Id id = new Meter.Id("my.id", emptyList(), null, null, Meter.Type.TIMER);
-        assertThat(id.withTag(Statistic.TOTAL_TIME).getTags()).contains(Tag.of("statistic", "totalTime"));
+        assertThat(id.withTag(Statistic.TOTAL_TIME).getTags()).contains(Tag.of("statistic", "total"));
     }
 
     @Test

File: samples/micrometer-samples-core/src/main/java/io/micrometer/core/samples/utils/SampleConfig.java
Patch:
@@ -22,6 +22,6 @@
 public class SampleConfig {
     public static MeterRegistry myMonitoringSystem() {
         // Pick a monitoring system here to use in your samples.
-        return SampleRegistries.jmx();
+        return SampleRegistries.prometheus();
     }
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/tomcat/TomcatMetrics.java
Patch:
@@ -239,7 +239,7 @@ private double safeDouble(Callable<Object> callable) {
         try {
             return Double.parseDouble(callable.call().toString());
         } catch (Exception e) {
-            return 0.0;
+            return Double.NaN;
         }
     }
 

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/web/servlet/WebMvcMetricsFilter.java
Patch:
@@ -50,7 +50,7 @@
  * @author Jon Schneider
  */
 @NonNullApi
-@Order(Ordered.HIGHEST_PRECEDENCE)
+@Order(Ordered.HIGHEST_PRECEDENCE + 1)
 public class WebMvcMetricsFilter extends OncePerRequestFilter {
     private static final String TIMING_SAMPLE = "micrometer.timingSample";
 

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/export/signalfx/SignalFxMetricsExportAutoConfiguration.java
Patch:
@@ -34,7 +34,7 @@
 import org.springframework.context.annotation.Import;
 
 /**
- * Configuration for exporting metrics to Signalfx.
+ * Configuration for exporting metrics to SignalFx.
  *
  * @author Jon Schneider
  */
@@ -51,7 +51,7 @@ public class SignalFxMetricsExportAutoConfiguration {
 
     @Bean
     @ConditionalOnMissingBean
-    public SignalFxConfig signalfxConfig(SignalFxProperties props) {
+    public SignalFxConfig signalFxConfig(SignalFxProperties props) {
         return new SignalFxPropertiesConfigAdapter(props);
     }
 

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/internal/DatadogStatsdLineBuilder.java
Patch:
@@ -55,11 +55,11 @@ private void updateIfNamingConventionChanged() {
         NamingConvention next = config.namingConvention();
         if (this.namingConvention != next) {
             this.namingConvention = next;
-            this.name = next.name(id.getName(), id.getType(), id.getBaseUnit()) + ":";
+            this.name = next.name(id.getName().replace(':', '_'), id.getType(), id.getBaseUnit()) + ":";
             this.tags = HashTreePMap.empty();
             this.conventionTags = id.getTags().iterator().hasNext() ?
                     id.getConventionTags(this.namingConvention).stream()
-                            .map(t -> t.getKey() + ":" + t.getValue())
+                            .map(t -> t.getKey().replace(':', '_') + ":" + t.getValue().replace(':', '_'))
                             .collect(Collectors.joining(","))
                     : null;
             this.tagsNoStat = tags(null, conventionTags, ":", "|#");

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/internal/EtsyStatsdLineBuilder.java
Patch:
@@ -82,6 +82,7 @@ private String nameByStatistic(@Nullable Statistic stat) {
     }
 
     private String etsyName(@Nullable Statistic stat) {
-        return nameMapper.toHierarchicalName(stat != null ? id.withTag(stat) : id, config.namingConvention());
+        return nameMapper.toHierarchicalName(stat != null ? id.withTag(stat) : id, config.namingConvention())
+                .replace(':', '_');
     }
 }

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/internal/TelegrafStatsdLineBuilder.java
Patch:
@@ -98,6 +98,7 @@ private String tagsByStatistic(@Nullable Statistic stat) {
     private String telegrafEscape(String value) {
         return value.replace(",", "\\,")
                 .replace("=", "\\=")
-                .replace(" ", "\\ ");
+                .replace(" ", "\\ ")
+                .replace(":", "\\:");
     }
 }
\ No newline at end of file

File: micrometer-core/src/main/java/io/micrometer/core/instrument/MeterRegistry.java
Patch:
@@ -152,7 +152,7 @@ protected <T> TimeGauge newTimeGauge(Meter.Id id, T obj, TimeUnit valueFunctionU
         return new TimeGauge() {
             @Override
             public Id getId() {
-                return id;
+                return withUnit;
             }
 
             @Override

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Statistic.java
Patch:
@@ -27,7 +27,7 @@ public enum Statistic {
     TOTAL("total"),
 
     /**
-     * The sum of the times recorded. Always reported in nanoseconds.
+     * The sum of the times recorded. Reported in the monitoring system's base unit of time
      */
     TOTAL_TIME("totalTime"),
 
@@ -37,7 +37,7 @@ public enum Statistic {
     COUNT("count"),
 
     /**
-     * The maximum amount recorded. When this represents a time, it is always reported in nanoseconds.
+     * The maximum amount recorded. When this represents a time, it is reported in the monitoring system's base unit of time.
      */
     MAX("max"),
 
@@ -57,7 +57,7 @@ public enum Statistic {
     ACTIVE_TASKS("activeTasks"),
 
     /**
-     * Duration of a running task in a long task timer. Always reported in nanoseconds.
+     * Duration of a running task in a long task timer. Always reported in the monitoring system's base unit of time.
      */
     DURATION("duration");
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/config/MeterFilter.java
Patch:
@@ -262,7 +262,7 @@ public MeterFilterReply accept(Meter.Id id) {
             }
 
             private String getTagValue(Meter.Id id) {
-                return (id.getName().equals(meterNamePrefix) ? id.getTag(tagKey) : null);
+                return (id.getName().startsWith(meterNamePrefix) ? id.getTag(tagKey) : null);
             }
 
             @Override

File: micrometer-core/src/test/java/io/micrometer/core/instrument/distribution/TimeWindowFixedBoundaryHistogramTest.java
Patch:
@@ -53,12 +53,14 @@ void histogramsAreCumulative() {
 
         histogram.recordDouble(6);
 
+        histogram.recordDouble(7);
+
         // Proves that the accumulated histogram is truly cumulative, and not just a representation
         // of the last snapshot
         assertThat(histogram.takeSnapshot(0, 0, 0).histogramCounts()).containsExactly(
                 new CountAtBucket(3, 1),
                 new CountAtBucket(6, 2),
-                new CountAtBucket(7, 2)
+                new CountAtBucket(7, 3)
         );
     }
 }
\ No newline at end of file

File: micrometer-core/src/main/java/io/micrometer/core/instrument/distribution/TimeWindowFixedBoundaryHistogram.java
Patch:
@@ -159,7 +159,7 @@ else if (buckets[mid] > key)
                     return mid; // exact match
             }
 
-            return low >= buckets.length - 1 ? -1 : low;
+            return low >= buckets.length ? -1 : low;
         }
     }
 }
\ No newline at end of file

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/system/UptimeMetrics.java
Patch:
@@ -61,9 +61,9 @@ public void bindTo(MeterRegistry registry) {
             .description("The uptime of the Java virtual machine")
             .register(registry);
 
-        TimeGauge.builder("process.start.time", runtimeMXBean, TimeUnit.MILLISECONDS, x -> Long.valueOf(x.getStartTime()).doubleValue())
+        TimeGauge.builder("process.start.time", runtimeMXBean, TimeUnit.SECONDS, x -> Long.valueOf(x.getStartTime()).doubleValue() / 1000.0)
             .tags(tags)
-            .description("The start time of the Java virtual machine")
+            .description("Start time of the process since unix epoch in seconds.")
             .register(registry);
     }
 }

File: micrometer-core/src/test/java/io/micrometer/core/instrument/distribution/TimeWindowFixedBoundaryHistogramTest.java
Patch:
@@ -53,12 +53,14 @@ void histogramsAreCumulative() {
 
         histogram.recordDouble(6);
 
+        histogram.recordDouble(7);
+
         // Proves that the accumulated histogram is truly cumulative, and not just a representation
         // of the last snapshot
         assertThat(histogram.takeSnapshot(0, 0, 0).histogramCounts()).containsExactly(
                 new CountAtBucket(3, 1),
                 new CountAtBucket(6, 2),
-                new CountAtBucket(7, 2)
+                new CountAtBucket(7, 3)
         );
     }
 }
\ No newline at end of file

File: micrometer-core/src/main/java/io/micrometer/core/instrument/distribution/TimeWindowFixedBoundaryHistogram.java
Patch:
@@ -159,7 +159,7 @@ else if (buckets[mid] > key)
                     return mid; // exact match
             }
 
-            return low >= buckets.length - 1 ? -1 : low;
+            return low >= buckets.length ? -1 : low;
         }
     }
 }
\ No newline at end of file

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/jdbc/db/PostgreSQLDatabaseMetrics.java
Patch:
@@ -186,12 +186,12 @@ private void registerCheckpointMetrics(MeterRegistry registry) {
         FunctionCounter.builder("postgres.buffers.clean", postgresDataSource,
                 dataSource -> resettableFunctionalCounter("postgres.buffers.clean", this::getBuffersClean))
                 .tags(tags)
-                .description("Number of buffers written directly by a backend")
+                .description("Number of buffers written by the background writer")
                 .register(registry);
         FunctionCounter.builder("postgres.buffers.backend", postgresDataSource,
                 dataSource -> resettableFunctionalCounter("postgres.buffers.backend", this::getBuffersBackend))
                 .tags(tags)
-                .description("Number of buffers written by the background writer")
+                .description("Number of buffers written directly by a backend")
                 .register(registry);
     }
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/system/UptimeMetrics.java
Patch:
@@ -61,9 +61,9 @@ public void bindTo(MeterRegistry registry) {
             .description("The uptime of the Java virtual machine")
             .register(registry);
 
-        TimeGauge.builder("process.start.time", runtimeMXBean, TimeUnit.MILLISECONDS, x -> Long.valueOf(x.getStartTime()).doubleValue())
+        TimeGauge.builder("process.start.time", runtimeMXBean, TimeUnit.SECONDS, x -> Long.valueOf(x.getStartTime()).doubleValue() / 1000.0)
             .tags(tags)
-            .description("The start time of the Java virtual machine")
+            .description("Start time of the process since unix epoch in seconds.")
             .register(registry);
     }
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Metrics.java
Patch:
@@ -238,7 +238,7 @@ public static <T extends Collection<?>> T gaugeCollectionSize(String name, Itera
     /**
      * Additional, less commonly used meter types.
      */
-    static class More {
+    public static class More {
         /**
          * Measures the time taken for long tasks.
          *

File: micrometer-core/src/main/java/io/micrometer/core/instrument/distribution/HistogramGauges.java
Patch:
@@ -101,6 +101,7 @@ private HistogramGauges(HistogramSupport meter, MeterRegistry registry,
 
             Gauge.builder(percentileName.apply(valueAtPercentiles[i]), meter, percentileValueFunction)
                     .tags(percentileTags.apply(valueAtPercentiles[i]))
+                    .synthetic(true)
                     .register(registry);
         }
 
@@ -115,6 +116,7 @@ private HistogramGauges(HistogramSupport meter, MeterRegistry registry,
 
             Gauge.builder(bucketName.apply(countAtBuckets[i]), meter, bucketCountFunction)
                     .tags(bucketTags.apply(countAtBuckets[i]))
+                    .synthetic(true)
                     .register(registry);
         }
     }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Metrics.java
Patch:
@@ -238,7 +238,7 @@ public static <T extends Collection<?>> T gaugeCollectionSize(String name, Itera
     /**
      * Additional, less commonly used meter types.
      */
-    static class More {
+    public static class More {
         /**
          * Measures the time taken for long tasks.
          *

File: micrometer-core/src/main/java/io/micrometer/core/instrument/distribution/HistogramGauges.java
Patch:
@@ -97,6 +97,7 @@ private HistogramGauges(HistogramSupport meter, MeterRegistry registry,
 
             Gauge.builder(percentileName.apply(valueAtPercentiles[i]), meter, percentileValueFunction)
                     .tags(percentileTags.apply(valueAtPercentiles[i]))
+                    .synthetic(true)
                     .register(registry);
         }
 
@@ -111,6 +112,7 @@ private HistogramGauges(HistogramSupport meter, MeterRegistry registry,
 
             Gauge.builder(bucketName.apply(countAtBuckets[i]), meter, bucketCountFunction)
                     .tags(bucketTags.apply(countAtBuckets[i]))
+                    .synthetic(true)
                     .register(registry);
         }
     }

File: implementations/micrometer-registry-influx/src/main/java/io/micrometer/influx/InfluxNamingConvention.java
Patch:
@@ -39,7 +39,7 @@ public InfluxNamingConvention(NamingConvention delegate) {
 
     @Override
     public String name(String name, Meter.Type type, @Nullable String baseUnit) {
-        return format(name.replace("=", "_"));
+        return format(delegate.name(name, type, baseUnit).replace("=", "_"));
     }
 
     @Override

File: implementations/micrometer-registry-influx/src/test/java/io/micrometer/influx/InfluxNamingConventionTest.java
Patch:
@@ -26,14 +26,15 @@
 class InfluxNamingConventionTest {
     private InfluxNamingConvention convention = new InfluxNamingConvention(NamingConvention.snakeCase);
 
+    @Issue("#693")
     @Test
     void name() {
-        assertThat(convention.name("foo=, bar", Meter.Type.GAUGE)).isEqualTo("foo_\\,\\ bar");
+        assertThat(convention.name("foo.bar=, baz", Meter.Type.GAUGE)).isEqualTo("foo_bar_\\,\\ baz");
     }
 
     @Test
     void tagKey() {
-        assertThat(convention.tagKey("foo=, bar")).isEqualTo("foo\\=\\,\\ bar");
+        assertThat(convention.tagKey("foo.bar=, baz")).isEqualTo("foo_bar\\=\\,\\ baz");
     }
 
     @Test

File: implementations/micrometer-registry-dynatrace/src/test/java/io/micrometer/dynatrace/DynatraceTimeSeriesTest.java
Patch:
@@ -30,6 +30,6 @@ void addsDimensionsValuesWhenAvailable() {
         dimensions.put("first", "one");
         dimensions.put("second", "two");
         final DynatraceTimeSeries timeSeries = new DynatraceTimeSeries("custom:test.metric", 12345, 1, dimensions);
-        assertThat(timeSeries.asJson()).isEqualTo("{\"timeSeriesId\":\"custom:test.metric\",\"dataPoints\":[[12345,1]],\"dimensions\":{\"first\":\"one\",\"second\":\"two\"}}");
+        assertThat(timeSeries.asJson()).isEqualTo("{\"timeseriesId\":\"custom:test.metric\",\"dataPoints\":[[12345,1]],\"dimensions\":{\"first\":\"one\",\"second\":\"two\"}}");
     }
 }
\ No newline at end of file

File: implementations/micrometer-registry-dynatrace/src/main/java/io/micrometer/dynatrace/DynatraceTimeSeries.java
Patch:
@@ -39,7 +39,7 @@ public String getMetricId() {
     }
 
     String asJson() {
-        String body = "{\"timeSeriesId\":\"" + metricId + "\"" +
+        String body = "{\"timeseriesId\":\"" + metricId + "\"" +
             ",\"dataPoints\":[[" + time + "," + DoubleFormat.decimalOrWhole(value) + "]]";
 
         if (dimensions != null && !dimensions.isEmpty()) {

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/web/jetty/JettyMetricsAutoConfiguration.java
Patch:
@@ -24,6 +24,7 @@
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration;
 import org.springframework.boot.context.embedded.jetty.JettyEmbeddedServletContainerFactory;
+import org.springframework.context.ApplicationContext;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 
@@ -43,7 +44,7 @@
 public class JettyMetricsAutoConfiguration {
 
     @Bean
-    public JettyMetricsPostProcessor jettyMetricsPostProcessor(MeterRegistry registry) {
-        return new JettyMetricsPostProcessor(registry);
+    public JettyMetricsPostProcessor jettyMetricsPostProcessor(ApplicationContext context) {
+        return new JettyMetricsPostProcessor(context);
     }
 }

File: implementations/micrometer-registry-prometheus/src/test/java/io/micrometer/prometheus/PrometheusMeterRegistryTest.java
Patch:
@@ -71,9 +71,9 @@ void quantiles() {
         assertThat(prometheusRegistry.metricFamilySamples()).has(withNameAndQuantile("ds"));
     }
 
+    @Issue("#27")
     @DisplayName("custom distribution summaries respect varying tags")
     @Test
-    /** Issue #27 */
     void customSummaries() {
         Arrays.asList("v1", "v2").forEach(v -> {
             registry.summary("s", "k", v).record(1.0);

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/web/client/MetricsRestTemplateCustomizerTest.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.micrometer.spring.web.client;
 
+import io.micrometer.core.Issue;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.MockClock;
 import io.micrometer.core.instrument.Tag;
@@ -73,9 +74,7 @@ public void interceptRestTemplate() {
         mockServer.verify();
     }
 
-    /**
-     * Issue #283
-     */
+    @Issue("#283")
     @Test
     public void normalizeUriToContainLeadingSlash() {
         mockServer.expect(MockRestRequestMatchers.requestTo("test/123"))

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/internal/DatadogStatsdLineBuilder.java
Patch:
@@ -50,9 +50,9 @@ public DatadogStatsdLineBuilder(Meter.Id id, MeterRegistry.Config config) {
     }
 
     @Override
-    String line(String amount, @Nullable Statistic stat, StatsdMeterType type) {
+    String line(String amount, @Nullable Statistic stat, String type) {
         updateIfNamingConventionChanged();
-        return name + amount + "|" + type.getCode() + tagsByStatistic(stat);
+        return name + amount + "|" + type + tagsByStatistic(stat);
     }
 
     private void updateIfNamingConventionChanged() {

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/internal/EtsyStatsdLineBuilder.java
Patch:
@@ -47,9 +47,9 @@ public EtsyStatsdLineBuilder(Meter.Id id, MeterRegistry.Config config, Hierarchi
     }
 
     @Override
-    String line(String amount, @Nullable Statistic stat, StatsdMeterType type) {
+    String line(String amount, @Nullable Statistic stat, String type) {
         updateIfNamingConventionChanged();
-        return nameByStatistic(stat) + ":" + amount + "|" + type.getCode();
+        return nameByStatistic(stat) + ":" + amount + "|" + type;
     }
 
     private void updateIfNamingConventionChanged() {

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/internal/TelegrafStatsdLineBuilder.java
Patch:
@@ -50,9 +50,9 @@ public TelegrafStatsdLineBuilder(Meter.Id id, MeterRegistry.Config config) {
     }
 
     @Override
-    String line(String amount, @Nullable Statistic stat, StatsdMeterType type) {
+    String line(String amount, @Nullable Statistic stat, String type) {
         updateIfNamingConventionChanged();
-        return name + tagsByStatistic(stat) + ":" + amount + "|" + type.getCode();
+        return name + tagsByStatistic(stat) + ":" + amount + "|" + type;
     }
 
     private void updateIfNamingConventionChanged() {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/AbstractTimer.java
Patch:
@@ -185,7 +185,7 @@ public final void record(long amount, TimeUnit unit) {
 
     @Override
     public HistogramSnapshot takeSnapshot() {
-        return histogram.takeSnapshot(count(), totalTime(baseTimeUnit), max(baseTimeUnit));
+        return histogram.takeSnapshot(count(), totalTime(TimeUnit.NANOSECONDS), max(TimeUnit.NANOSECONDS));
     }
 
     @Override

File: implementations/micrometer-registry-influx/src/main/java/io/micrometer/influx/InfluxNamingConvention.java
Patch:
@@ -47,7 +47,7 @@ public String tagKey(String key) {
         // `time` cannot be a field key or tag key
         if (key.equals("time"))
             throw new IllegalArgumentException("'time' is an invalid tag key in InfluxDB");
-        return format(key);
+        return format(delegate.tagKey(key));
     }
 
     @Override
@@ -60,7 +60,7 @@ public String tagValue(String value) {
 
     private String format(String name) {
         // https://docs.influxdata.com/influxdb/v1.3/write_protocols/line_protocol_reference/#special-characters
-        return delegate.tagKey(name)
+        return name
                 .replace(",", "\\,")
                 .replace(" ", "\\ ")
                 .replace("=", "\\=")

File: implementations/micrometer-registry-dynatrace/src/main/java/io/micrometer/dynatrace/DynatraceNamingConvention.java
Patch:
@@ -23,7 +23,7 @@
 
 public class DynatraceNamingConvention implements NamingConvention {
 
-	private static final Pattern KEY_CLEANUP_PATTERN = Pattern.compile("[^\\w.-]");
+    private static final Pattern KEY_CLEANUP_PATTERN = Pattern.compile("[^\\w.-]");
 	
     private final NamingConvention delegate;
 
@@ -42,6 +42,6 @@ public String name(String name, Meter.Type type, @Nullable String baseUnit) {
 
     @Override
     public String tagKey(String key) {
-    	return KEY_CLEANUP_PATTERN.matcher(delegate.tagKey(key)).replaceAll("_");
+        return KEY_CLEANUP_PATTERN.matcher(delegate.tagKey(key)).replaceAll("_");
     }
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/util/TimeUtils.java
Patch:
@@ -29,7 +29,7 @@
  */
 public final class TimeUtils {
 	
-	private static final Pattern PARSE_PATTERN = Pattern.compile("[,_ ]");
+    private static final Pattern PARSE_PATTERN = Pattern.compile("[,_ ]");
 	
     private static final long C0 = 1L;
     private static final long C1 = C0 * 1000L;

File: micrometer-jersey2/src/main/java/io/micrometer/jersey2/server/DefaultJerseyTagsProvider.java
Patch:
@@ -38,7 +38,7 @@
  */
 public final class DefaultJerseyTagsProvider implements JerseyTagsProvider {
 
-	private static final Pattern URI_CLEANUP_PATTERN = Pattern.compile("//+");
+    private static final Pattern URI_CLEANUP_PATTERN = Pattern.compile("//+");
 	
     // VisibleForTesting
     static final String TAG_METHOD = "method";

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/CompositeMeterRegistryAutoConfiguration.java
Patch:
@@ -29,8 +29,8 @@
  * @since 2.0.0
  */
 @Import({ NoOpMeterRegistryConfiguration.class,
-		CompositeMeterRegistryConfiguration.class })
+        CompositeMeterRegistryConfiguration.class })
 @ConditionalOnClass(CompositeMeterRegistry.class)
 public class CompositeMeterRegistryAutoConfiguration {
 
-}
\ No newline at end of file
+}

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jvm/ExecutorServiceMetrics.java
Patch:
@@ -171,7 +171,7 @@ private void monitor(MeterRegistry registry, @Nullable ThreadPoolExecutor tp) {
     }
 
     private void monitor(MeterRegistry registry, ForkJoinPool fj) {
-        FunctionCounter.builder("exeuctor.steals", fj, ForkJoinPool::getStealCount)
+        FunctionCounter.builder("executor.steals", fj, ForkJoinPool::getStealCount)
                 .tags(tags)
                 .description("Estimate of the total number of tasks stolen from " +
                         "one thread's work queue by another. The reported value " +

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdMeterRegistry.java
Patch:
@@ -349,6 +349,7 @@ public int queueCapacity() {
     private static NamingConvention namingConventionFromFlavor(StatsdFlavor flavor) {
         switch (flavor) {
             case DATADOG:
+            case SYSDIG:
                 return NamingConvention.dot;
             case TELEGRAF:
                 return NamingConvention.snakeCase;

File: implementations/micrometer-registry-dynatrace/src/test/java/io/micrometer/dynatrace/DynatraceTimeSeriesTest.java
Patch:
@@ -30,6 +30,6 @@ void addsDimensionsValuesWhenAvailable() {
         dimensions.put("first", "one");
         dimensions.put("second", "two");
         final DynatraceTimeSeries timeSeries = new DynatraceTimeSeries("custom:test.metric", 12345, 1, dimensions);
-        assertThat(timeSeries.asJson()).isEqualTo("{\"timeSeriesId\":\"custom:test.metric\",\"dataPoints\":[[12345,1.0]],\"dimensions\":{\"first\":\"one\",\"second\":\"two\"}}");
+        assertThat(timeSeries.asJson()).isEqualTo("{\"timeSeriesId\":\"custom:test.metric\",\"dataPoints\":[[12345,1]],\"dimensions\":{\"first\":\"one\",\"second\":\"two\"}}");
     }
 }
\ No newline at end of file

File: implementations/micrometer-registry-dynatrace/src/main/java/io/micrometer/dynatrace/DynatraceTimeSeries.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.micrometer.dynatrace;
 
+import io.micrometer.core.instrument.util.DoubleFormat;
 import io.micrometer.core.lang.Nullable;
 
 import java.util.Map;
@@ -39,7 +40,7 @@ public String getMetricId() {
 
     String asJson() {
         String body = "{\"timeSeriesId\":\"" + metricId + "\"" +
-            ",\"dataPoints\":[[" + time + "," + value + "]]";
+            ",\"dataPoints\":[[" + time + "," + DoubleFormat.decimalOrWhole(value) + "]]";
 
         if (dimensions != null && !dimensions.isEmpty()) {
             body += ",\"dimensions\":{" +

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/ServiceLevelAgreementBoundary.java
Patch:
@@ -24,7 +24,8 @@
 
 /**
  * A service level agreement boundary. Can be specified as either a {@link Long}
- * (applicable to timers and distribution summaries) or a {@link Long} (applicable to only timers).
+ * (applicable to timers and distribution summaries) or a {@link Duration}
+ * (applicable to only timers).
  *
  * @author Phillip Webb
  */

File: micrometer-core/src/main/java/io/micrometer/core/instrument/step/StepRegistryConfig.java
Patch:
@@ -27,7 +27,7 @@
  */
 public interface StepRegistryConfig extends MeterRegistryConfig {
     /**
-     * @return The step size (reporting frequency) to use. The default is 10 seconds.
+     * @return The step size (reporting frequency) to use. The default is 1 minute.
      */
     default Duration step() {
         String v = get(prefix() + ".step");

File: implementations/micrometer-registry-new-relic/src/main/java/io/micrometer/newrelic/NewRelicMeterRegistry.java
Patch:
@@ -65,7 +65,7 @@ public NewRelicMeterRegistry(NewRelicConfig config, Clock clock, ThreadFactory t
         requireNonNull(config.accountId());
         requireNonNull(config.apiKey());
 
-        config().namingConvention(NamingConvention.camelCase);
+        config().namingConvention(new NewRelicNamingConvention());
         start(threadFactory);
     }
 

File: implementations/micrometer-registry-signalfx/src/main/java/io/micrometer/signalfx/SignalFxNamingConvention.java
Patch:
@@ -17,6 +17,7 @@
 
 import io.micrometer.core.instrument.Meter;
 import io.micrometer.core.instrument.config.NamingConvention;
+import io.micrometer.core.instrument.util.StringEscapeUtils;
 import io.micrometer.core.lang.Nullable;
 
 /**
@@ -38,7 +39,7 @@ public SignalFxNamingConvention(NamingConvention delegate) {
     // Metric (the metric name) can be any non-empty UTF-8 string, with a maximum length <= 256 characters
     @Override
     public String name(String name, Meter.Type type, @Nullable String baseUnit) {
-        String formattedName = delegate.name(name, type, baseUnit);
+        String formattedName = delegate.name(StringEscapeUtils.escapeJson(name), type, baseUnit);
         return formattedName.length() > 256 ? formattedName.substring(0, 256) : formattedName;
     }
 
@@ -66,7 +67,7 @@ public String tagKey(String key) {
     // Dimension value can be any non-empty UTF-8 string, with a maximum length <= 256 characters.
     @Override
     public String tagValue(String value) {
-        String formattedValue = delegate.tagValue(value);
+        String formattedValue = StringEscapeUtils.escapeJson(delegate.tagValue(value));
         return formattedValue.length() > 256 ? formattedValue.substring(0, 256) : formattedValue;
     }
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/CaffeineCacheMetrics.java
Patch:
@@ -131,7 +131,7 @@ protected long hitCount() {
     }
 
     @Override
-    protected long missCount() {
+    protected Long missCount() {
         return cache.stats().missCount();
     }
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/EhCache2Metrics.java
Patch:
@@ -74,7 +74,7 @@ protected long hitCount() {
     }
 
     @Override
-    protected long missCount() {
+    protected Long missCount() {
         return stats.cacheMissCount();
     }
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/GuavaCacheMetrics.java
Patch:
@@ -81,7 +81,7 @@ protected long hitCount() {
     }
 
     @Override
-    protected long missCount() {
+    protected Long missCount() {
         return cache.stats().missCount();
     }
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/JCacheMetrics.java
Patch:
@@ -100,7 +100,7 @@ protected long hitCount() {
     }
 
     @Override
-    protected long missCount() {
+    protected Long missCount() {
         return lookupStatistic("CacheMisses");
     }
 

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/cache/ConcurrentMapCacheMetrics.java
Patch:
@@ -81,7 +81,7 @@ protected long hitCount() {
     }
 
     @Override
-    protected long missCount() {
+    protected Long missCount() {
         return cache.missCount.get();
     }
 

File: implementations/micrometer-registry-influx/src/main/java/io/micrometer/influx/InfluxMeterRegistry.java
Patch:
@@ -51,7 +51,7 @@ public class InfluxMeterRegistry extends StepMeterRegistry {
 
     public InfluxMeterRegistry(InfluxConfig config, Clock clock, ThreadFactory threadFactory) {
         super(config, clock);
-        this.config().namingConvention(new InfluxNamingConvention(NamingConvention.snakeCase));
+        this.config().namingConvention(new InfluxNamingConvention());
         this.config = config;
         start(threadFactory);
     }

File: implementations/micrometer-registry-datadog/src/main/java/io/micrometer/datadog/DatadogMeterRegistry.java
Patch:
@@ -117,6 +117,8 @@ protected void publish() {
                             }).collect(joining(",")) +
                             "]}";
 
+                    logger.debug(body);
+
                     try (OutputStream os = con.getOutputStream()) {
                         os.write(body.getBytes());
                         os.flush();
@@ -237,7 +239,7 @@ String writeMetric(Meter.Id id, @Nullable String suffix, long wallTime, double v
         if (suffix != null)
             fullId = idWithSuffix(id, suffix);
 
-        Iterable<Tag> tags = fullId.getTags();
+        Iterable<Tag> tags = getConventionTags(fullId);
 
         String host = config.hostTag() == null ? "" : stream(tags.spliterator(), false)
                 .filter(t -> requireNonNull(config.hostTag()).equals(t.getKey()))

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Meter.java
Patch:
@@ -147,7 +147,7 @@ public List<Tag> getTags() {
 
         /**
          * @param key The tag key to attempt to match.
-         * @return A matching tag, or {@code null} if no tag with the provided key exists on this id.
+         * @return A matching tag value, or {@code null} if no tag with the provided key exists on this id.
          */
         @Nullable
         public String getTag(String key) {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Meter.java
Patch:
@@ -147,7 +147,7 @@ public List<Tag> getTags() {
 
         /**
          * @param key The tag key to attempt to match.
-         * @return A matching tag, or {@code null} if no tag with the provided key exists on this id.
+         * @return A matching tag value, or {@code null} if no tag with the provided key exists on this id.
          */
         @Nullable
         public String getTag(String key) {

File: implementations/micrometer-registry-elastic/src/main/java/io/micrometer/elastic/ElasticMeterRegistry.java
Patch:
@@ -65,7 +65,7 @@ public ElasticMeterRegistry(ElasticConfig config, Clock clock, NamingConvention
     }
 
     public ElasticMeterRegistry(ElasticConfig config, Clock clock) {
-        this(config, clock, NamingConvention.snakeCase, Executors.defaultThreadFactory());
+        this(config, clock, new ElasticNamingConvention(), Executors.defaultThreadFactory());
     }
 
     private void createIndexIfNeeded() {
@@ -250,7 +250,7 @@ private Stream<String> writeMeter(Meter meter, long wallTime) {
     }
 
     private IndexBuilder index(Meter meter, long wallTime) {
-        return new IndexBuilder(config, getConventionName(meter.getId()), meter.getId().getType().toString().toLowerCase(), meter.getId().getTags(), wallTime);
+        return new IndexBuilder(config, getConventionName(meter.getId()), meter.getId().getType().toString().toLowerCase(), getConventionTags(meter.getId()), wallTime);
     }
 
     // VisibleForTesting

File: micrometer-core/src/main/java/io/micrometer/core/instrument/DistributionSummary.java
Patch:
@@ -199,7 +199,7 @@ public Builder publishPercentiles(@Nullable double... percentiles) {
          * @param digitsOfPrecision The digits of precision to maintain for percentile approximations.
          * @return This builder.
          */
-        public Builder percentilePrecision(int digitsOfPrecision) {
+        public Builder percentilePrecision(Integer digitsOfPrecision) {
             this.distributionConfigBuilder.percentilePrecision(digitsOfPrecision);
             return this;
         }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Timer.java
Patch:
@@ -309,7 +309,7 @@ public Builder publishPercentiles(@Nullable double... percentiles) {
          * @param digitsOfPrecision The digits of precision to maintain for percentile approximations.
          * @return This builder.
          */
-        public Builder percentilePrecision(int digitsOfPrecision) {
+        public Builder percentilePrecision(Integer digitsOfPrecision) {
             this.distributionConfigBuilder.percentilePrecision(digitsOfPrecision);
             return this;
         }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeDistributionSummary.java
Patch:
@@ -76,6 +76,7 @@ DistributionSummary registerNewMeter(MeterRegistry registry) {
                 .minimumExpectedValue(distributionStatisticConfig.getMinimumExpectedValue())
                 .distributionStatisticBufferLength(distributionStatisticConfig.getBufferLength())
                 .distributionStatisticExpiry(distributionStatisticConfig.getExpiry())
+                .percentilePrecision(distributionStatisticConfig.getPercentilePrecision())
                 .sla(distributionStatisticConfig.getSlaBoundaries())
                 .scale(scale)
                 .register(registry);

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeTimer.java
Patch:
@@ -125,6 +125,7 @@ Timer registerNewMeter(MeterRegistry registry) {
                 .publishPercentileHistogram(distributionStatisticConfig.isPercentileHistogram())
                 .distributionStatisticBufferLength(distributionStatisticConfig.getBufferLength())
                 .distributionStatisticExpiry(distributionStatisticConfig.getExpiry())
+                .percentilePrecision(distributionStatisticConfig.getPercentilePrecision())
                 .pauseDetector(pauseDetector);
 
         final long[] slaNanos = distributionStatisticConfig.getSlaBoundaries();

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/web/servlet/WebMvcTagsTest.java
Patch:
@@ -23,12 +23,12 @@
 import static org.assertj.core.api.Assertions.assertThat;
 
 public class WebMvcTagsTest {
-    private final MockHttpServletRequest request = new MockHttpServletRequest();
-    private final MockHttpServletResponse response = new MockHttpServletResponse();
+    private MockHttpServletRequest request = new MockHttpServletRequest();
+    private MockHttpServletResponse response = new MockHttpServletResponse();
 
     @Test
     public void uriTrailingSlashesAreSuppressed() {
-        request.setAttribute(HandlerMapping.BEST_MATCHING_PATTERN_ATTRIBUTE, "//foo/");
+        request.setPathInfo("//foo/");
         assertThat(WebMvcTags.uri(request, null).getValue()).isEqualTo("/foo");
     }
 

File: implementations/micrometer-registry-atlas/src/main/java/io/micrometer/atlas/AtlasNamingConvention.java
Patch:
@@ -20,7 +20,8 @@
 import io.micrometer.core.lang.Nullable;
 
 /**
- * The naming convention most commonly employed at Netflix, and so most to show up in Netflix examples.
+ * The naming convention most commonly employed at Netflix, and so most likely to
+ * show up in Netflix examples.
  *
  * @author Jon Schneider
  */

File: implementations/micrometer-registry-atlas/src/main/java/io/micrometer/atlas/SpectatorDistributionSummary.java
Patch:
@@ -33,7 +33,7 @@ public class SpectatorDistributionSummary extends AbstractDistributionSummary {
                                  Clock clock,
                                  DistributionStatisticConfig distributionStatisticConfig,
                                  double scale) {
-        super(id, clock, distributionStatisticConfig, scale);
+        super(id, clock, distributionStatisticConfig, scale, false);
         this.summary = distributionSummary;
     }
 
@@ -60,8 +60,8 @@ public double totalAmount() {
     @Override
     public double max() {
         for (Measurement measurement : summary.measure()) {
-            if(stream(measurement.id().tags().spliterator(), false)
-                .anyMatch(tag -> tag.key().equals("statistic") && tag.value().equals(Statistic.max.toString()))) {
+            if (stream(measurement.id().tags().spliterator(), false)
+                    .anyMatch(tag -> tag.key().equals("statistic") && tag.value().equals(Statistic.max.toString()))) {
                 return measurement.value();
             }
         }

File: implementations/micrometer-registry-atlas/src/main/java/io/micrometer/atlas/SpectatorTimer.java
Patch:
@@ -32,7 +32,7 @@ public class SpectatorTimer extends AbstractTimer {
     private final com.netflix.spectator.api.Timer timer;
 
     public SpectatorTimer(Id id, Timer timer, Clock clock, DistributionStatisticConfig statsConf, PauseDetector pauseDetector, TimeUnit baseTimeUnit) {
-        super(id, clock, statsConf, pauseDetector, baseTimeUnit);
+        super(id, clock, statsConf, pauseDetector, baseTimeUnit, false);
         this.timer = timer;
     }
 

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdTimer.java
Patch:
@@ -17,7 +17,6 @@
 
 import io.micrometer.core.instrument.AbstractTimer;
 import io.micrometer.core.instrument.Clock;
-import io.micrometer.core.instrument.Timer;
 import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;
 import io.micrometer.core.instrument.distribution.pause.PauseDetector;
 import io.micrometer.core.instrument.step.StepDouble;
@@ -28,7 +27,7 @@
 import java.util.concurrent.atomic.DoubleAdder;
 import java.util.concurrent.atomic.LongAdder;
 
-public class StatsdTimer extends AbstractTimer implements Timer {
+public class StatsdTimer extends AbstractTimer {
     private final LongAdder count = new LongAdder();
     private final DoubleAdder totalTime = new DoubleAdder();
     private StepDouble max;
@@ -38,7 +37,7 @@ public class StatsdTimer extends AbstractTimer implements Timer {
 
     StatsdTimer(Id id, StatsdLineBuilder lineBuilder, Subscriber<String> publisher, Clock clock,
                 DistributionStatisticConfig distributionStatisticConfig, PauseDetector pauseDetector, TimeUnit baseTimeUnit, long stepMillis) {
-        super(id, clock, distributionStatisticConfig, pauseDetector, baseTimeUnit);
+        super(id, clock, distributionStatisticConfig, pauseDetector, baseTimeUnit, false);
         this.max = new StepDouble(clock, stepMillis);
         this.lineBuilder = lineBuilder;
         this.publisher = publisher;

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/filter/PropertiesMeterFilterTest.java
Patch:
@@ -233,9 +233,9 @@ public void configureWhenSlaDurationShouldOnlyApplyToTimer() {
         assertThat(filter.configure(timer, DistributionStatisticConfig.DEFAULT).getSlaBoundaries())
                 .containsExactly(1000000, 2000000, 3000000);
         assertThat(filter.configure(summary, DistributionStatisticConfig.DEFAULT).getSlaBoundaries())
-                .isEmpty();
+                .isNull();
         assertThat(filter.configure(counter, DistributionStatisticConfig.DEFAULT).getSlaBoundaries())
-                .isEmpty();
+                .isNull();
     }
 
     @Test
@@ -249,7 +249,7 @@ public void configureWhenSlaLongShouldOnlyApplyToTimerAndDistributionSummary() {
         assertThat(filter.configure(summary, DistributionStatisticConfig.DEFAULT).getSlaBoundaries())
                 .containsExactly(1, 2, 3);
         assertThat(filter.configure(counter, DistributionStatisticConfig.DEFAULT).getSlaBoundaries())
-                .isEmpty();
+                .isNull();
     }
 
     private Meter.Id createSpringBootMeter() {

File: samples/micrometer-samples-boot1/src/main/java/io/micrometer/boot1/samples/components/PersonController.java
Patch:
@@ -77,8 +77,6 @@ public Map<String, Number> stats() {
             result.put("count", t.count());
             result.put("max", t.max(TimeUnit.MILLISECONDS));
             result.put("mean", t.mean(TimeUnit.MILLISECONDS));
-            result.put("50.percentile", t.percentile(0.5, TimeUnit.MILLISECONDS));
-            result.put("95.percentile", t.percentile(0.95, TimeUnit.MILLISECONDS));
         }
         return result;
 

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/MetricsAutoConfiguration.java
Patch:
@@ -95,7 +95,7 @@ public ScheduledMethodMetrics metricsSchedulingAspect(MeterRegistry registry) {
 
     @Bean
     @ConditionalOnClass(name = "com.netflix.hystrix.strategy.HystrixPlugins")
-    @ConditionalOnProperty(value = "management.metrics.export.hystrix.enabled", matchIfMissing = true)
+    @ConditionalOnProperty(value = "management.metrics.binders.hystrix.enabled", matchIfMissing = true)
     public HystrixMetricsBinder hystrixMetricsBinder() {
         return new HystrixMetricsBinder();
     }

File: micrometer-core/src/main/java/io/micrometer/core/aop/TimedAspect.java
Patch:
@@ -41,7 +41,7 @@
 @NonNullApi
 @Incubating(since = "1.0.0")
 public class TimedAspect {
-    public static final String DEFAULT_METRIC_NAME = "method_timed";
+    public static final String DEFAULT_METRIC_NAME = "method.timed";
     private final MeterRegistry registry;
     private final Function<ProceedingJoinPoint, Iterable<Tag>> tagsBasedOnJoinpoint;
 

File: implementations/micrometer-registry-elastic/src/main/java/io/micrometer/elastic/ElasticMeterRegistry.java
Patch:
@@ -182,7 +182,8 @@ protected void publish() {
         }
     }
 
-    private Stream<String> writeCounter(Counter counter, long wallTime) {
+    // VisibleForTesting
+    Stream<String> writeCounter(Counter counter, long wallTime) {
         return Stream.of(index(counter, wallTime).field("count", counter.count()).build());
     }
 
@@ -315,7 +316,7 @@ private IndexBuilder(ElasticConfig config, String name, String type, List<Tag> t
         }
 
         IndexBuilder field(String name, double value) {
-            indexLine.append(",\"").append(name).append("\":").append(DoubleFormat.decimalOrNan(value));
+            indexLine.append(",\"").append(name).append("\":").append(DoubleFormat.decimal(value));
             return this;
         }
 

File: implementations/micrometer-registry-elastic/src/main/java/io/micrometer/elastic/ElasticMeterRegistry.java
Patch:
@@ -165,7 +165,7 @@ protected void publish() {
                         // {"took":16,"errors":true,"items":[{"index":{"_index":"metrics-2018-03","_type":"timer","_id":"i8kdBmIBmtn9wpUGezjX","status":400,"error":{"type":"illegal_argument_exception","reason":"Rejecting mapping update to [metrics-2018-03] as the final mapping would have more than 1 type: [metric, doc]"}}}]}
                         String response = IOUtils.toString(connection.getInputStream(), StandardCharsets.UTF_8);
                         if (response.contains("\"errors\":true")) {
-                            logger.error("failed to send metrics to elasticsearch (HTTP {}). Cause: {}", connection.getResponseCode(), response);
+                            logger.warn("failed to send metrics to elasticsearch (HTTP {}). Cause: {}", connection.getResponseCode(), response);
                             return;
                         } else {
                             logger.info("successfully sent {} metrics to elasticsearch", batch.size());

File: micrometer-core/src/main/java/io/micrometer/core/instrument/MeterRegistry.java
Patch:
@@ -143,7 +143,7 @@ protected MeterRegistry(Clock clock) {
      * @param <T>               The type of the object upon which the value function derives a measurement.
      * @return A new time gauge.
      */
-    protected <T> TimeGauge newTimeGauge(Meter.Id id, T obj, TimeUnit valueFunctionUnit, ToDoubleFunction<T> valueFunction) {
+    protected <T> TimeGauge newTimeGauge(Meter.Id id, @Nullable T obj, TimeUnit valueFunctionUnit, ToDoubleFunction<T> valueFunction) {
         Meter.Id withUnit = id.withBaseUnit(getBaseTimeUnitStr());
         Gauge gauge = newGauge(withUnit, obj, obj2 -> TimeUtils.convert(valueFunction.applyAsDouble(obj2), valueFunctionUnit, getBaseTimeUnit()));
 
@@ -833,7 +833,7 @@ public <T> TimeGauge timeGauge(String name, Iterable<Tag> tags, T obj,
          * @param <T>              The type of the state object from which the gauge value is extracted.
          * @return A new or existing time gauge.
          */
-        <T> TimeGauge timeGauge(Meter.Id id, T obj, TimeUnit timeFunctionUnit, ToDoubleFunction<T> timeFunction) {
+        <T> TimeGauge timeGauge(Meter.Id id, @Nullable T obj, TimeUnit timeFunctionUnit, ToDoubleFunction<T> timeFunction) {
             return registerMeterIfNecessary(TimeGauge.class, id, id2 -> newTimeGauge(id2, obj, timeFunctionUnit, timeFunction), NoopTimeGauge::new);
         }
     }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeMeterRegistry.java
Patch:
@@ -80,7 +80,7 @@ protected <T> Gauge newGauge(Meter.Id id, @Nullable T obj, ToDoubleFunction<T> v
     }
 
     @Override
-    protected <T> TimeGauge newTimeGauge(Meter.Id id, T obj, TimeUnit valueFunctionUnit, ToDoubleFunction<T> valueFunction) {
+    protected <T> TimeGauge newTimeGauge(Meter.Id id, @Nullable T obj, TimeUnit valueFunctionUnit, ToDoubleFunction<T> valueFunction) {
         return new CompositeTimeGauge<>(id, obj, valueFunctionUnit, valueFunction);
     }
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeTimeGauge.java
Patch:
@@ -18,6 +18,7 @@
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.TimeGauge;
 import io.micrometer.core.instrument.noop.NoopTimeGauge;
+import io.micrometer.core.lang.Nullable;
 
 import java.lang.ref.WeakReference;
 import java.util.concurrent.TimeUnit;
@@ -29,7 +30,7 @@ class CompositeTimeGauge<T> extends AbstractCompositeMeter<TimeGauge> implements
     private final ToDoubleFunction<T> f;
     private final TimeUnit fUnit;
 
-    CompositeTimeGauge(Id id, T obj, TimeUnit fUnit, ToDoubleFunction<T> f) {
+    CompositeTimeGauge(Id id, @Nullable T obj, TimeUnit fUnit, ToDoubleFunction<T> f) {
         super(id);
         ref = new WeakReference<>(obj);
         this.f = f;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/cumulative/CumulativeFunctionTimer.java
Patch:
@@ -55,7 +55,7 @@ public CumulativeFunctionTimer(Id id, T obj, ToLongFunction<T> countFunction, To
      */
     public double count() {
         T obj2 = ref.get();
-        return obj2 != null ? (lastCount = countFunction.applyAsLong(obj2)) : lastCount;
+        return obj2 != null ? (lastCount = Math.max(countFunction.applyAsLong(obj2), 0)) : lastCount;
     }
 
     /**
@@ -65,9 +65,9 @@ public double totalTime(TimeUnit unit) {
         T obj2 = ref.get();
         if (obj2 == null)
             return lastTime;
-        return (lastTime = TimeUtils.convert(totalTimeFunction.applyAsDouble(obj2),
+        return (lastTime = Math.max(TimeUtils.convert(totalTimeFunction.applyAsDouble(obj2),
             totalTimeFunctionUnits,
-            unit));
+            unit), 0));
     }
 
     @Override

File: micrometer-core/src/main/java/io/micrometer/core/instrument/step/StepFunctionTimer.java
Patch:
@@ -62,7 +62,7 @@ public double count() {
         T obj2 = ref.get();
         if (obj2 != null) {
             long prevLast = lastCount;
-            lastCount = countFunction.applyAsLong(obj2);
+            lastCount = Math.max(countFunction.applyAsLong(obj2), 0);
             count.getCurrent().add(lastCount - prevLast);
         }
         return count.poll();
@@ -75,7 +75,8 @@ public double totalTime(TimeUnit unit) {
         T obj2 = ref.get();
         if (obj2 != null) {
             double prevLast = lastTime;
-            lastTime = TimeUtils.convert(totalTimeFunction.applyAsDouble(obj2), totalTimeFunctionUnits, unit);
+            lastTime = Math.max(TimeUtils.convert(totalTimeFunction.applyAsDouble(obj2), totalTimeFunctionUnits, unit), 0);
+            System.out.println("prevLast: " + prevLast + " last: " + lastTime + "accum: " + (lastTime - prevLast));
             total.getCurrent().add(lastTime - prevLast);
         }
         return total.poll();

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/export/elastic/ElasticMetricsExportAutoConfiguration.java
Patch:
@@ -18,8 +18,7 @@
 import io.micrometer.core.instrument.Clock;
 import io.micrometer.elastic.ElasticConfig;
 import io.micrometer.elastic.ElasticMeterRegistry;
-import io.micrometer.influx.InfluxConfig;
-import io.micrometer.influx.InfluxMeterRegistry;
+import io.micrometer.spring.autoconfigure.CompositeMeterRegistryAutoConfiguration;
 import io.micrometer.spring.autoconfigure.MetricsAutoConfiguration;
 import io.micrometer.spring.autoconfigure.export.StringToDurationConverter;
 import io.micrometer.spring.autoconfigure.export.simple.SimpleMetricsExportAutoConfiguration;
@@ -40,7 +39,8 @@
  * @author Nicolas Portmann
  */
 @Configuration
-@AutoConfigureBefore(SimpleMetricsExportAutoConfiguration.class)
+@AutoConfigureBefore({CompositeMeterRegistryAutoConfiguration.class,
+        SimpleMetricsExportAutoConfiguration.class})
 @AutoConfigureAfter(MetricsAutoConfiguration.class)
 @ConditionalOnBean(Clock.class)
 @ConditionalOnClass(ElasticMeterRegistry.class)

File: samples/micrometer-samples-core/src/main/java/io/micrometer/core/samples/utils/SampleRegistries.java
Patch:
@@ -45,7 +45,6 @@
 import io.micrometer.wavefront.WavefrontConfig;
 import io.micrometer.wavefront.WavefrontMeterRegistry;
 
-import java.io.Closeable;
 import java.io.IOException;
 import java.io.OutputStream;
 import java.net.InetSocketAddress;

File: implementations/micrometer-registry-ganglia/src/main/java/io/micrometer/ganglia/GangliaMeterRegistry.java
Patch:
@@ -67,6 +67,7 @@ public void start() {
 
     @Override
     public void close() {
+        reporter.report();
         stop();
         super.close();
     }

File: implementations/micrometer-registry-graphite/src/main/java/io/micrometer/graphite/GraphiteMeterRegistry.java
Patch:
@@ -84,6 +84,7 @@ public void start() {
 
     @Override
     public void close() {
+        reporter.report();
         stop();
         super.close();
     }

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdMeterRegistry.java
Patch:
@@ -228,6 +228,7 @@ public void stop() {
 
     @Override
     public void close() {
+        pollableMeters.forEach(StatsdPollable::poll);
         stop();
         super.close();
     }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/step/StepMeterRegistry.java
Patch:
@@ -71,6 +71,7 @@ public void stop() {
 
     @Override
     public void close() {
+        publish();
         stop();
         super.close();
     }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/distribution/TimeWindowHistogramBase.java
Patch:
@@ -249,6 +249,7 @@ private void rotate() {
         }
 
         try {
+            int iterations = 0;
             synchronized (this) {
                 do {
                     resetBucket(ringBuffer[currentBucket]);
@@ -257,7 +258,7 @@ private void rotate() {
                     }
                     timeSinceLastRotateMillis -= durationBetweenRotatesMillis;
                     lastRotateTimestampMillis += durationBetweenRotatesMillis;
-                } while (timeSinceLastRotateMillis >= durationBetweenRotatesMillis);
+                } while (timeSinceLastRotateMillis >= durationBetweenRotatesMillis && ++iterations < ringBuffer.length);
 
                 resetAccumulatedHistogram(accumulatedHistogram);
                 accumulatedHistogramStale = true;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/util/TimeDecayingMax.java
Patch:
@@ -127,6 +127,7 @@ private void rotate() {
         }
 
         try {
+            int iterations = 0;
             synchronized (this) {
                 do {
                     ringBuffer[currentBucket].set(0);
@@ -135,7 +136,7 @@ private void rotate() {
                     }
                     timeSinceLastRotateMillis -= durationBetweenRotatesMillis;
                     lastRotateTimestampMillis += durationBetweenRotatesMillis;
-                } while (timeSinceLastRotateMillis >= durationBetweenRotatesMillis);
+                } while (timeSinceLastRotateMillis >= durationBetweenRotatesMillis && ++iterations < ringBuffer.length);
             }
         } finally {
             rotating = 0;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/distribution/TimeWindowHistogramBase.java
Patch:
@@ -249,6 +249,7 @@ private void rotate() {
         }
 
         try {
+            int iterations = 0;
             synchronized (this) {
                 do {
                     resetBucket(ringBuffer[currentBucket]);
@@ -257,7 +258,7 @@ private void rotate() {
                     }
                     timeSinceLastRotateMillis -= durationBetweenRotatesMillis;
                     lastRotateTimestampMillis += durationBetweenRotatesMillis;
-                } while (timeSinceLastRotateMillis >= durationBetweenRotatesMillis);
+                } while (timeSinceLastRotateMillis >= durationBetweenRotatesMillis && ++iterations < ringBuffer.length);
 
                 resetAccumulatedHistogram(accumulatedHistogram);
                 accumulatedHistogramStale = true;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/util/TimeDecayingMax.java
Patch:
@@ -127,6 +127,7 @@ private void rotate() {
         }
 
         try {
+            int iterations = 0;
             synchronized (this) {
                 do {
                     ringBuffer[currentBucket].set(0);
@@ -135,7 +136,7 @@ private void rotate() {
                     }
                     timeSinceLastRotateMillis -= durationBetweenRotatesMillis;
                     lastRotateTimestampMillis += durationBetweenRotatesMillis;
-                } while (timeSinceLastRotateMillis >= durationBetweenRotatesMillis);
+                } while (timeSinceLastRotateMillis >= durationBetweenRotatesMillis && ++iterations < ringBuffer.length);
             }
         } finally {
             rotating = 0;

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/internal/FlavorStatsdLineBuilder.java
Patch:
@@ -105,7 +105,7 @@ private String line(String amount, @Nullable Statistic stat, String type) {
     }
 
     private String tags(@Nullable Statistic stat, String otherTags, String keyValueSeparator, String preamble) {
-        String tags = of(stat == null ? null : "statistic" + keyValueSeparator + stat.toString().toLowerCase(), otherTags)
+        String tags = of(stat == null ? null : "statistic" + keyValueSeparator + stat.getTagValueRepresentation(), otherTags)
                 .filter(Objects::nonNull)
                 .collect(Collectors.joining(","));
 

File: implementations/micrometer-registry-datadog/src/test/java/io/micrometer/datadog/DatadogMeterRegistryTest.java
Patch:
@@ -17,6 +17,7 @@
 
 import io.micrometer.core.Issue;
 import io.micrometer.core.instrument.Clock;
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 import reactor.core.Disposable;
 import reactor.ipc.netty.http.server.HttpServer;
@@ -37,7 +38,7 @@ void encodeMetricName() throws InterruptedException {
         DatadogMeterRegistry registry = new DatadogMeterRegistry(new DatadogConfig() {
             @Override
             public String uri() {
-                return "http://localhost:29000";
+                return "http://localhost:3036";
             }
 
             @Override
@@ -66,7 +67,7 @@ public boolean enabled() {
 
         Pattern p = Pattern.compile("/api/v1/metrics/([^\\?]+)\\?.*");
 
-        Disposable server = HttpServer.create(29000)
+        Disposable server = HttpServer.create(3036)
                 .newHandler((req, resp) -> {
                     Matcher matcher = p.matcher(req.uri());
                     if (matcher.matches()) {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/dropwizard/DropwizardGauge.java
Patch:
@@ -33,7 +33,8 @@ public class DropwizardGauge extends AbstractMeter implements Gauge {
 
     @Override
     public double value() {
-        return impl.getValue();
+        Double value = impl.getValue();
+        return value == null ? Double.NaN : value;
     }
 
     @SuppressWarnings("EqualsWhichDoesntCheckParameterClass")

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/async/ThreadPoolTaskExecutorMetricsIntegrationTest.java
Patch:
@@ -24,7 +24,6 @@
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.test.context.SpringBootTest;
-import org.springframework.context.ApplicationContext;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.context.annotation.Import;

File: micrometer-test/src/main/java/io/micrometer/core/tck/GaugeTest.java
Patch:
@@ -75,6 +75,6 @@ default void mapSizeGauge(MeterRegistry registry) {
     @DisplayName("gauges that reference an object that is garbage collected report NaN")
     default void garbageCollectedSourceObject(MeterRegistry registry) {
         registry.gauge("my.gauge", emptyList(), (Map) null, Map::size);
-        assertThat(registry.get("my.gauge").gauge().value()).matches(val -> Double.isNaN(val) || val == 0.0);
+        assertThat(registry.get("my.gauge").gauge().value()).matches(val -> val == null || Double.isNaN(val) || val == 0.0);
     }
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/dropwizard/DropwizardFunctionTimer.java
Patch:
@@ -103,7 +103,8 @@ public long getMax() {
 
                     @Override
                     public double getMean() {
-                        return totalTime(TimeUnit.NANOSECONDS) / count();
+                        double count = count();
+                        return count == 0 ? 0 : totalTime(baseTimeUnit()) / count;
                     }
 
                     @Override

File: samples/micrometer-samples-core/src/main/java/io/micrometer/core/samples/utils/SampleConfig.java
Patch:
@@ -22,6 +22,6 @@
 public class SampleConfig {
     public static MeterRegistry myMonitoringSystem() {
         // Pick a monitoring system here to use in your samples.
-        return SampleRegistries.prometheus();
+        return SampleRegistries.jmx();
     }
 }

File: implementations/micrometer-registry-wavefront/src/main/java/io/micrometer/wavefront/WavefrontConfig.java
Patch:
@@ -42,7 +42,7 @@ public String get(String key) {
         @Override
         public String uri() {
             String v = get(prefix() + ".uri");
-            return v == null ? "proxy://localhost:7828" : v;
+            return v == null ? "proxy://localhost:2878" : v;
         }
     };
 

File: implementations/micrometer-registry-influx/src/main/java/io/micrometer/influx/InfluxMeterRegistry.java
Patch:
@@ -33,7 +33,6 @@
 import java.util.concurrent.Executors;
 import java.util.concurrent.ThreadFactory;
 import java.util.concurrent.TimeUnit;
-import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.stream.Stream;
 import java.util.zip.GZIPOutputStream;
 

File: samples/micrometer-samples-core/src/main/java/io/micrometer/core/samples/CounterSample.java
Patch:
@@ -27,8 +27,6 @@
 import java.time.Duration;
 import java.util.concurrent.atomic.AtomicInteger;
 
-import static java.util.Collections.emptyList;
-
 public class CounterSample {
     public static void main(String[] args) {
         MeterRegistry registry = SampleConfig.myMonitoringSystem();

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdMeterRegistry.java
Patch:
@@ -100,7 +100,7 @@ public StatsdMeterRegistry(StatsdConfig config, HierarchicalNameMapper nameMappe
                 config().namingConvention(NamingConvention.camelCase);
         }
 
-        UnicastProcessor<String> processor = UnicastProcessor.create(Queues.<String>get(statsdConfig.queueSize()).get());
+        UnicastProcessor<String> processor = UnicastProcessor.create(Queues.<String>unboundedMultiproducer().get());
 
         try {
             Class.forName("ch.qos.logback.classic.turbo.TurboFilter", false, getClass().getClassLoader());

File: implementations/micrometer-registry-influx/src/main/java/io/micrometer/influx/InfluxMeterRegistry.java
Patch:
@@ -81,7 +81,7 @@ private void createDatabaseIfNecessary() {
                             .lines().collect(joining("\n")));
                 }
             }
-        } catch (IOException e) {
+        } catch (Throwable e) {
             logger.warn("unable to create database '{}'", config.db(), e);
         } finally {
             quietlyCloseUrlConnection(con);

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/web/client/DefaultRestTemplateExchangeTagsProvider.java
Patch:
@@ -32,9 +32,9 @@ public class DefaultRestTemplateExchangeTagsProvider
     implements RestTemplateExchangeTagsProvider {
 
     @Override
-    public Iterable<Tag> getTags(String urlTemplate, HttpRequest request,
+    public Iterable<Tag> getTags(@Nullable String urlTemplate, HttpRequest request,
                                  @Nullable ClientHttpResponse response) {
-        Tag uriTag = StringUtils.hasText(urlTemplate)
+        Tag uriTag = urlTemplate != null && StringUtils.hasText(urlTemplate)
             ? RestTemplateExchangeTags.uri(urlTemplate)
             : RestTemplateExchangeTags.uri(request);
         return Arrays.asList(RestTemplateExchangeTags.method(request), uriTag,

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/web/client/MetricsClientHttpRequestInterceptor.java
Patch:
@@ -118,7 +118,7 @@ public URI expand(String url, Object... arguments) {
         };
     }
 
-    private Timer.Builder getTimeBuilder(String urlTemplate, HttpRequest request,
+    private Timer.Builder getTimeBuilder(@Nullable String urlTemplate, HttpRequest request,
                                          @Nullable ClientHttpResponse response) {
         return Timer.builder(this.metricName)
                 .tags(this.tagProvider.getTags(urlTemplate, request, response))

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/web/client/RestTemplateExchangeTagsProvider.java
Patch:
@@ -39,7 +39,7 @@ public interface RestTemplateExchangeTagsProvider {
      * @param response    the response (may be {@code null} if the exchange failed)
      * @return the tags
      */
-    Iterable<Tag> getTags(String urlTemplate, HttpRequest request,
+    Iterable<Tag> getTags(@Nullable String urlTemplate, HttpRequest request,
                           @Nullable ClientHttpResponse response);
 
 }

File: implementations/micrometer-registry-atlas/src/main/java/io/micrometer/atlas/AtlasMeterRegistry.java
Patch:
@@ -162,8 +162,8 @@ protected <T> io.micrometer.core.instrument.Gauge newGauge(Meter.Id id, @Nullabl
     }
 
     @Override
-    protected <T> FunctionCounter newFunctionCounter(Meter.Id id, T obj, ToDoubleFunction<T> valueFunction) {
-        FunctionCounter fc = new StepFunctionCounter<>(id, clock, atlasConfig.step().toMillis(), obj, valueFunction);
+    protected <T> FunctionCounter newFunctionCounter(Meter.Id id, T obj, ToDoubleFunction<T> countFunction) {
+        FunctionCounter fc = new StepFunctionCounter<>(id, clock, atlasConfig.step().toMillis(), obj, countFunction);
         newMeter(id, Meter.Type.COUNTER, fc.measure());
         return fc;
     }

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusDistributionSummary.java
Patch:
@@ -82,6 +82,8 @@ public int hashCode() {
     /**
      * For Prometheus we cannot use the histogram counts from HistogramSnapshot, as it is based on a
      * rolling histogram. Prometheus requires a histogram that accumulates values over the lifetime of the app.
+     *
+     * @return Cumulative histogram buckets.
      */
     public CountAtBucket[] histogramCounts() {
         return percentilesHistogram.takeSnapshot(0, 0, 0, true).histogramCounts();

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusMeterRegistry.java
Patch:
@@ -67,7 +67,7 @@ public PrometheusMeterRegistry(PrometheusConfig config, CollectorRegistry regist
     }
 
     /**
-     * Content that should be included in the response body for an endpoint designate for
+     * @return Content that should be included in the response body for an endpoint designate for
      * Prometheus to scrape from.
      */
     public String scrape() {
@@ -263,9 +263,9 @@ protected <T> FunctionTimer newFunctionTimer(Meter.Id id, T obj, ToLongFunction<
     }
 
     @Override
-    protected <T> FunctionCounter newFunctionCounter(Meter.Id id, T obj, ToDoubleFunction<T> valueFunction) {
+    protected <T> FunctionCounter newFunctionCounter(Meter.Id id, T obj, ToDoubleFunction<T> countFunction) {
         MicrometerCollector collector = collectorByName(id, Collector.Type.COUNTER);
-        FunctionCounter fc = new CumulativeFunctionCounter<>(id, obj, valueFunction);
+        FunctionCounter fc = new CumulativeFunctionCounter<>(id, obj, countFunction);
         List<String> tagValues = tagValues(id);
 
         collector.add((conventionName, tagKeys) -> Stream.of(

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusTimer.java
Patch:
@@ -17,8 +17,8 @@
 
 import io.micrometer.core.instrument.AbstractTimer;
 import io.micrometer.core.instrument.Clock;
-import io.micrometer.core.instrument.distribution.CountAtBucket;
 import io.micrometer.core.instrument.Timer;
+import io.micrometer.core.instrument.distribution.CountAtBucket;
 import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;
 import io.micrometer.core.instrument.distribution.TimeWindowLatencyHistogram;
 import io.micrometer.core.instrument.distribution.pause.PauseDetector;
@@ -74,6 +74,8 @@ public double max(TimeUnit unit) {
     /**
      * For Prometheus we cannot use the histogram counts from HistogramSnapshot, as it is based on a
      * rolling histogram. Prometheus requires a histogram that accumulates values over the lifetime of the app.
+     *
+     * @return Cumulative histogram buckets.
      */
     public CountAtBucket[] histogramCounts() {
         return percentilesHistogram.takeSnapshot(0, 0, 0, true).histogramCounts();

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdMeterRegistry.java
Patch:
@@ -213,8 +213,8 @@ protected DistributionSummary newDistributionSummary(Meter.Id id, DistributionSt
     }
 
     @Override
-    protected <T> FunctionCounter newFunctionCounter(Meter.Id id, T obj, ToDoubleFunction<T> valueFunction) {
-        StatsdFunctionCounter fc = new StatsdFunctionCounter<>(id, obj, valueFunction, lineBuilder(id), publisher);
+    protected <T> FunctionCounter newFunctionCounter(Meter.Id id, T obj, ToDoubleFunction<T> countFunction) {
+        StatsdFunctionCounter fc = new StatsdFunctionCounter<>(id, obj, countFunction, lineBuilder(id), publisher);
         pollableMeters.add(fc);
         return fc;
     }

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/internal/MemoizingFunction.java
Patch:
@@ -19,7 +19,9 @@
 
 /**
  * Modified from Guava's MemoizingFunction
- * @param <R>
+ *
+ * @param <T> The domain type.
+ * @param <R> The range type.
  */
 public class MemoizingFunction<T, R> implements Function<T, R> {
 

File: micrometer-core/src/main/java/io/micrometer/core/aop/TimedAspect.java
Patch:
@@ -56,9 +56,6 @@ public TimedAspect(MeterRegistry registry, Function<ProceedingJoinPoint, Iterabl
         this.tagsBasedOnJoinpoint = tagsBasedOnJoinpoint;
     }
 
-    /**
-     * To be used when pointcut marker is @Timed, either at type or method-level.
-     */
     @Around("execution (@io.micrometer.core.annotation.Timed * *.*(..))")
     public Object timedMethod(ProceedingJoinPoint pjp) throws Throwable {
         Method method = ((MethodSignature) pjp.getSignature()).getMethod();

File: micrometer-core/src/main/java/io/micrometer/core/instrument/FunctionCounter.java
Patch:
@@ -33,7 +33,7 @@ static <T> Builder<T> builder(String name, @Nullable T obj, ToDoubleFunction<T>
     }
 
     /**
-     * The cumulative count since this counter was created.
+     * @return The cumulative count since this counter was created.
      */
     double count();
 
@@ -69,6 +69,7 @@ private Builder(String name, @Nullable T obj, ToDoubleFunction<T> f) {
 
         /**
          * @param tags Must be an even number of arguments representing key/value pairs of tags.
+         * @return The function counter builder with added tags.
          */
         public Builder<T> tags(String... tags) {
             return tags(Tags.of(tags));

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/CacheMeterBinder.java
Patch:
@@ -73,7 +73,7 @@ public final void bindTo(MeterRegistry registry) {
                 .description("The number of entries added to the cache")
                 .register(registry);
 
-        if(evictionCount() != null) {
+        if (evictionCount() != null) {
             FunctionCounter.builder("cache.evictions", cache.get(),
                     c -> {
                         Long evictions = evictionCount();
@@ -126,6 +126,8 @@ public final void bindTo(MeterRegistry registry) {
      * Bind detailed metrics that are particular to the cache implementation, e.g. load duration for
      * Caffeine caches, heap and disk size for EhCache caches. These metrics are above and beyond the
      * basic set of metrics that is common to all caches.
+     *
+     * @param registry The registry to bind metrics to.
      */
     protected abstract void bindImplementationSpecificMetrics(MeterRegistry registry);
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/GuavaCacheMetrics.java
Patch:
@@ -40,6 +40,7 @@ public class GuavaCacheMetrics extends CacheMeterBinder {
      * @param cache     The cache to instrument.
      * @param cacheName Will be used to tag metrics with "cache".
      * @param tags      Tags to apply to all recorded metrics. Must be an even number of arguments representing key/value pairs of tags.
+     * @param <C>       The cache type.
      * @return The instrumented cache, unchanged. The original cache is not wrapped or proxied in any way.
      * @see com.google.common.cache.CacheStats
      */
@@ -55,6 +56,7 @@ public static <C extends Cache> C monitor(MeterRegistry registry, C cache, Strin
      * @param cache     The cache to instrument.
      * @param cacheName The name prefix of the metrics.
      * @param tags      Tags to apply to all recorded metrics.
+     * @param <C>       The cache type.
      * @return The instrumented cache, unchanged. The original cache is not wrapped or proxied in any way.
      * @see com.google.common.cache.CacheStats
      */

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeMeterRegistry.java
Patch:
@@ -90,8 +90,8 @@ protected <T> FunctionTimer newFunctionTimer(Meter.Id id, T obj, ToLongFunction<
     }
 
     @Override
-    protected <T> FunctionCounter newFunctionCounter(Meter.Id id, T obj, ToDoubleFunction<T> valueFunction) {
-        return new CompositeFunctionCounter<>(id, obj, valueFunction);
+    protected <T> FunctionCounter newFunctionCounter(Meter.Id id, T obj, ToDoubleFunction<T> countFunction) {
+        return new CompositeFunctionCounter<>(id, obj, countFunction);
     }
 
     @Override

File: micrometer-core/src/main/java/io/micrometer/core/instrument/cumulative/CumulativeTimer.java
Patch:
@@ -33,9 +33,6 @@ public class CumulativeTimer extends AbstractTimer {
     private final AtomicLong total;
     private final TimeDecayingMax max;
 
-    /**
-     * Create a new instance.
-     */
     public CumulativeTimer(Id id, Clock clock, DistributionStatisticConfig distributionStatisticConfig, PauseDetector pauseDetector, TimeUnit baseTimeUnit) {
         super(id, clock, distributionStatisticConfig, pauseDetector, baseTimeUnit);
         this.count = new AtomicLong();

File: micrometer-core/src/main/java/io/micrometer/core/instrument/dropwizard/DropwizardMeterRegistry.java
Patch:
@@ -130,8 +130,8 @@ protected <T> FunctionTimer newFunctionTimer(Meter.Id id, T obj, ToLongFunction<
     }
 
     @Override
-    protected <T> FunctionCounter newFunctionCounter(Meter.Id id, T obj, ToDoubleFunction<T> valueFunction) {
-        DropwizardFunctionCounter<T> fc = new DropwizardFunctionCounter<>(id, clock, obj, valueFunction);
+    protected <T> FunctionCounter newFunctionCounter(Meter.Id id, T obj, ToDoubleFunction<T> countFunction) {
+        DropwizardFunctionCounter<T> fc = new DropwizardFunctionCounter<>(id, clock, obj, countFunction);
         registry.register(hierarchicalName(id), fc.getDropwizardMeter());
         return fc;
     }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/simple/SimpleMeterRegistry.java
Patch:
@@ -148,8 +148,8 @@ protected <T> FunctionTimer newFunctionTimer(Meter.Id id, T obj, ToLongFunction<
     }
 
     @Override
-    protected <T> FunctionCounter newFunctionCounter(Meter.Id id, T obj, ToDoubleFunction<T> valueFunction) {
-        return new CumulativeFunctionCounter<>(id, obj, valueFunction);
+    protected <T> FunctionCounter newFunctionCounter(Meter.Id id, T obj, ToDoubleFunction<T> countFunction) {
+        return new CumulativeFunctionCounter<>(id, obj, countFunction);
     }
 
     @Override

File: micrometer-core/src/main/java/io/micrometer/core/instrument/step/StepCounter.java
Patch:
@@ -27,9 +27,6 @@
 public class StepCounter extends AbstractMeter implements Counter {
     private final StepDouble value;
 
-    /**
-     * Create a new instance.
-     */
     public StepCounter(Id id, Clock clock, long stepMillis) {
         super(id);
         this.value = new StepDouble(clock, stepMillis);

File: micrometer-core/src/main/java/io/micrometer/core/instrument/step/StepDouble.java
Patch:
@@ -56,7 +56,7 @@ public DoubleAdder getCurrent() {
     }
 
     /**
-     * Get the value for the last completed interval.
+     * @return The value for the last completed interval.
      */
     public double poll() {
         rollCount(clock.wallTime());

File: micrometer-core/src/main/java/io/micrometer/core/instrument/step/StepLong.java
Patch:
@@ -50,7 +50,7 @@ public LongAdder getCurrent() {
     }
 
     /**
-     * Get the value for the last completed interval.
+     * @return The value for the last completed interval.
      */
     public double poll() {
         rollCount(clock.wallTime());

File: micrometer-core/src/main/java/io/micrometer/core/instrument/step/StepMeterRegistry.java
Patch:
@@ -138,8 +138,8 @@ protected <T> FunctionTimer newFunctionTimer(Meter.Id id, T obj, ToLongFunction<
     }
 
     @Override
-    protected <T> FunctionCounter newFunctionCounter(Meter.Id id, T obj, ToDoubleFunction<T> valueFunction) {
-        return new StepFunctionCounter<>(id, clock, config.step().toMillis(), obj, valueFunction);
+    protected <T> FunctionCounter newFunctionCounter(Meter.Id id, T obj, ToDoubleFunction<T> countFunction) {
+        return new StepFunctionCounter<>(id, clock, config.step().toMillis(), obj, countFunction);
     }
 
     @Override

File: micrometer-core/src/main/java/io/micrometer/core/instrument/step/StepTimer.java
Patch:
@@ -32,9 +32,6 @@ public class StepTimer extends AbstractTimer {
     private final StepLong total;
     private final TimeDecayingMax max;
 
-    /**
-     * Create a new instance.
-     */
     @SuppressWarnings("ConstantConditions")
     public StepTimer(Id id, Clock clock, DistributionStatisticConfig distributionStatisticConfig, PauseDetector pauseDetector, TimeUnit baseTimeUnit) {
         super(id, clock, distributionStatisticConfig, pauseDetector, baseTimeUnit);

File: micrometer-core/src/main/java/io/micrometer/core/instrument/util/MathUtils.java
Patch:
@@ -25,9 +25,7 @@ public final class MathUtils {
     private MathUtils() {
     }
 
-    /**
-     * Simplified {@link com.google.common.math.IntMath#divide(int, int, java.math.RoundingMode)}.
-     */
+    // Simplified {@link com.google.common.math.IntMath#divide(int, int, java.math.RoundingMode)}.
     public static int divideWithCeilingRoundingMode(int p, int q) {
         if (q == 0) {
             throw new ArithmeticException("/ by zero"); // for GWT

File: micrometer-core/src/main/java/io/micrometer/core/lang/NonNull.java
Patch:
@@ -23,10 +23,8 @@
  * A common annotation to declare that annotated elements cannot be {@code null}.
  * Leverages JSR 305 meta-annotations to indicate nullability in Java to common tools with
  * JSR 305 support and used by Kotlin to infer nullability of the API.
- * <p>
  * <p>Should be used at parameter, return value, and field level. Method overrides should
  * repeat parent {@code @NonNull} annotations unless they behave differently.
- * <p>
  * <p>Use {@code @NonNullApi} (scope = parameters + return values) and/or {@code @NonNullFields}
  * (scope = fields) to set the default behavior to non-nullable in order to avoid annotating
  * your whole codebase with {@code @NonNull}.

File: micrometer-core/src/main/java/io/micrometer/core/lang/NonNullApi.java
Patch:
@@ -22,10 +22,8 @@
 /**
  * A common annotation to declare that parameters and return values
  * are to be considered as non-nullable by default for a given package.
- * <p>
  * <p>Leverages JSR-305 meta-annotations to indicate nullability in Java to common
  * tools with JSR-305 support and used by Kotlin to infer nullability of the API.
- * <p>
  * <p>Should be used at package level in association with {@link Nullable}
  * annotations at parameter and return value level.
  *

File: micrometer-core/src/main/java/io/micrometer/core/lang/NonNullFields.java
Patch:
@@ -22,10 +22,8 @@
 /**
  * A common annotation to declare that fields are to be considered as
  * non-nullable by default for a given package.
- * <p>
  * <p>Leverages JSR-305 meta-annotations to indicate nullability in Java to common
  * tools with JSR-305 support and used by Kotlin to infer nullability of the API.
- * <p>
  * <p>Should be used at package level in association with {@link Nullable}
  * annotations at field level.
  *

File: micrometer-core/src/main/java/io/micrometer/core/lang/Nullable.java
Patch:
@@ -24,10 +24,8 @@
  * A common annotation to declare that annotated elements can be {@code null} under
  * some circumstance. Leverages JSR 305 meta-annotations to indicate nullability in Java
  * to common tools with JSR 305 support and used by Kotlin to infer nullability of the API.
- * <p>
  * <p>Should be used at parameter, return value, and field level. Methods override should
  * repeat parent {@code @Nullable} annotations unless they behave differently.
- * <p>
  * <p>Can be used in association with {@code NonNullApi} or {@code @NonNullFields} to
  * override the default non-nullable semantic to nullable.
  *

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/MetricsAutoConfiguration.java
Patch:
@@ -85,9 +85,7 @@ public MeterRegistryCustomizer<MeterRegistry> propertyBasedFilter(MetricsPropert
         return r -> r.config().meterFilter(new PropertiesMeterFilter(props));
     }
 
-    /**
-     * If AOP is not enabled, scheduled interception will not work.
-     */
+    // If AOP is not enabled, scheduled interception will not work.
     @Bean
     @ConditionalOnClass(name = "org.aspectj.lang.ProceedingJoinPoint")
     @ConditionalOnProperty(value = "spring.aop.enabled", havingValue = "true", matchIfMissing = true)

File: samples/micrometer-samples-core/src/main/java/io/micrometer/core/samples/FunctionTimerSample.java
Patch:
@@ -31,9 +31,7 @@
 import java.util.concurrent.atomic.AtomicLong;
 
 public class FunctionTimerSample {
-    /**
-     * For Atlas: http://localhost:7101/api/v1/graph?q=name,ftimer,:eq,:dist-avg,name,timer,:eq,:dist-avg,1,:axis&s=e-5m&l=0
-     */
+    // For Atlas: http://localhost:7101/api/v1/graph?q=name,ftimer,:eq,:dist-avg,name,timer,:eq,:dist-avg,1,:axis&s=e-5m&l=0
     public static void main(String[] args) {
         MeterRegistry registry = SampleConfig.myMonitoringSystem();
 

File: samples/micrometer-samples-core/src/main/java/io/micrometer/core/samples/utils/SampleRegistries.java
Patch:
@@ -56,7 +56,8 @@ public static MeterRegistry pickOne() {
     /**
      * To use pushgateway instead:
      * new PushGateway("localhost:9091").pushAdd(registry.getPrometheusRegistry(), "samples");
-     * @return
+     *
+     * @return A prometheus registry.
      */
     public static PrometheusMeterRegistry prometheus() {
         PrometheusMeterRegistry prometheusRegistry = new PrometheusMeterRegistry(new PrometheusConfig() {

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/jdbc/DataSourcePoolMetrics.java
Patch:
@@ -52,9 +52,9 @@ public DataSourcePoolMetrics(DataSource dataSource, @Nullable Collection<DataSou
     @Override
     public void bindTo(MeterRegistry registry) {
         if (poolMetadata != null) {
-            registry.gauge(name + ".active.connections", tags, dataSource, dataSource -> poolMetadata.getActive() != null ? poolMetadata.getActive() : 0);
-            registry.gauge(name + ".max.connections", tags, dataSource, dataSource -> poolMetadata.getMax());
-            registry.gauge(name + ".min.connections", tags, dataSource, dataSource -> poolMetadata.getMin());
+            registry.gauge(name + ".connections.active", tags, dataSource, dataSource -> poolMetadata.getActive() != null ? poolMetadata.getActive() : 0);
+            registry.gauge(name + ".connections.max", tags, dataSource, dataSource -> poolMetadata.getMax());
+            registry.gauge(name + ".connections.min", tags, dataSource, dataSource -> poolMetadata.getMin());
         }
     }
 }

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/jdbc/DataSourcePoolMetricsTest.java
Patch:
@@ -55,7 +55,7 @@ public class DataSourcePoolMetricsTest {
     @Test
     public void dataSourceIsInstrumented() throws SQLException {
         dataSource.getConnection().getMetaData();
-        registry.find("data.source.max.connections").meter();
+        registry.find("data.source.connections.max").meter();
     }
 
     @SpringBootApplication(scanBasePackages = "isolated")

File: micrometer-core/src/main/java/io/micrometer/core/annotation/Incubating.java
Patch:
@@ -21,7 +21,7 @@
 /**
  * This is a feature that is experimental and may yield a breaking change in a minor release.
  */
-@Target({ElementType.METHOD, ElementType.TYPE})
+@Target({ElementType.METHOD, ElementType.TYPE, ElementType.CONSTRUCTOR})
 public @interface Incubating {
     String since();
 }

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/web/client/DefaultRestTemplateExchangeTagsProvider.java
Patch:
@@ -41,5 +41,4 @@ public Iterable<Tag> getTags(String urlTemplate, HttpRequest request,
             RestTemplateExchangeTags.status(response),
             RestTemplateExchangeTags.clientName(request));
     }
-
 }

File: implementations/micrometer-registry-atlas/src/main/java/io/micrometer/atlas/AtlasMeterRegistry.java
Patch:
@@ -100,15 +100,16 @@ protected io.micrometer.core.instrument.Counter newCounter(Meter.Id id) {
 
     @SuppressWarnings("ConstantConditions")
     @Override
-    protected io.micrometer.core.instrument.DistributionSummary newDistributionSummary(Meter.Id id, DistributionStatisticConfig distributionStatisticConfig) {
+    protected io.micrometer.core.instrument.DistributionSummary newDistributionSummary(Meter.Id id, DistributionStatisticConfig distributionStatisticConfig,
+                                                                                       double scale) {
         com.netflix.spectator.api.DistributionSummary internalSummary = registry.distributionSummary(spectatorId(id));
 
         if (distributionStatisticConfig.isPercentileHistogram()) {
             // This doesn't report the normal count/totalTime/max stats, so we treat it as additive
             PercentileDistributionSummary.get(registry, spectatorId(id));
         }
 
-        SpectatorDistributionSummary summary = new SpectatorDistributionSummary(id, internalSummary, clock, distributionStatisticConfig);
+        SpectatorDistributionSummary summary = new SpectatorDistributionSummary(id, internalSummary, clock, distributionStatisticConfig, scale);
 
         for (long sla : distributionStatisticConfig.getSlaBoundaries()) {
             gauge(id.getName(), Tags.concat(getConventionTags(id), "sla", Long.toString(sla)), sla, summary::histogramCountAtValue);

File: implementations/micrometer-registry-atlas/src/main/java/io/micrometer/atlas/SpectatorDistributionSummary.java
Patch:
@@ -31,8 +31,9 @@ public class SpectatorDistributionSummary extends AbstractDistributionSummary {
     SpectatorDistributionSummary(Id id,
                                  com.netflix.spectator.api.DistributionSummary distributionSummary,
                                  Clock clock,
-                                 DistributionStatisticConfig distributionStatisticConfig) {
-        super(id, clock, distributionStatisticConfig);
+                                 DistributionStatisticConfig distributionStatisticConfig,
+                                 double scale) {
+        super(id, clock, distributionStatisticConfig, scale);
         this.summary = distributionSummary;
     }
 

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusDistributionSummary.java
Patch:
@@ -34,8 +34,8 @@ public class PrometheusDistributionSummary extends AbstractDistributionSummary {
     private TimeDecayingMax max;
     private final TimeWindowHistogram percentilesHistogram;
 
-    PrometheusDistributionSummary(Id id, Clock clock, DistributionStatisticConfig distributionStatisticConfig) {
-        super(id, clock, distributionStatisticConfig);
+    PrometheusDistributionSummary(Id id, Clock clock, DistributionStatisticConfig distributionStatisticConfig, double scale) {
+        super(id, clock, distributionStatisticConfig, scale);
         this.max = new TimeDecayingMax(clock, distributionStatisticConfig);
         this.percentilesHistogram = new TimeWindowHistogram(clock,
                 DistributionStatisticConfig.builder()

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusMeterRegistry.java
Patch:
@@ -95,9 +95,9 @@ public Counter newCounter(Meter.Id id) {
     }
 
     @Override
-    public DistributionSummary newDistributionSummary(Meter.Id id, DistributionStatisticConfig distributionStatisticConfig) {
+    public DistributionSummary newDistributionSummary(Meter.Id id, DistributionStatisticConfig distributionStatisticConfig, double scale) {
         MicrometerCollector collector = collectorByName(id, Collector.Type.SUMMARY);
-        PrometheusDistributionSummary summary = new PrometheusDistributionSummary(id, clock, distributionStatisticConfig);
+        PrometheusDistributionSummary summary = new PrometheusDistributionSummary(id, clock, distributionStatisticConfig, scale);
         List<String> tagValues = tagValues(id);
 
         collector.add((conventionName, tagKeys) -> {

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdDistributionSummary.java
Patch:
@@ -36,8 +36,8 @@ public class StatsdDistributionSummary extends AbstractDistributionSummary {
     private final Subscriber<String> publisher;
 
     StatsdDistributionSummary(Meter.Id id, StatsdLineBuilder lineBuilder, Subscriber<String> publisher, Clock clock,
-                              DistributionStatisticConfig distributionStatisticConfig) {
-        super(id, clock, distributionStatisticConfig);
+                              DistributionStatisticConfig distributionStatisticConfig, double scale) {
+        super(id, clock, distributionStatisticConfig, scale);
         this.max = new TimeDecayingMax(clock, distributionStatisticConfig);
         this.lineBuilder = lineBuilder;
         this.publisher = publisher;

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdMeterRegistry.java
Patch:
@@ -161,8 +161,8 @@ protected Timer newTimer(Meter.Id id, DistributionStatisticConfig distributionSt
     @SuppressWarnings("ConstantConditions")
     @Override
     protected DistributionSummary newDistributionSummary(Meter.Id id, DistributionStatisticConfig
-            distributionStatisticConfig) {
-        DistributionSummary summary = new StatsdDistributionSummary(id, lineBuilder(id), publisher, clock, distributionStatisticConfig);
+            distributionStatisticConfig, double scale) {
+        DistributionSummary summary = new StatsdDistributionSummary(id, lineBuilder(id), publisher, clock, distributionStatisticConfig, scale);
 
         if (distributionStatisticConfig.getPercentiles() != null) {
             for (double percentile : distributionStatisticConfig.getPercentiles()) {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/MeterRegistry.java
Patch:
@@ -117,7 +117,7 @@ protected MeterRegistry(Clock clock) {
      * @param id The id that uniquely identifies the distribution summary.
      * @return A new distribution summary.
      */
-    protected abstract DistributionSummary newDistributionSummary(Meter.Id id, DistributionStatisticConfig distributionStatisticConfig);
+    protected abstract DistributionSummary newDistributionSummary(Meter.Id id, DistributionStatisticConfig distributionStatisticConfig, double scale);
 
     /**
      * Build a new custom meter to be added to the registry. This is guaranteed to only be called if the custom meter doesn't already exist.
@@ -244,9 +244,9 @@ Timer timer(Meter.Id id, DistributionStatisticConfig distributionStatisticConfig
      * @param distributionStatisticConfig Configuration that governs how distribution statistics are computed.
      * @return A new or existing distribution summary.
      */
-    DistributionSummary summary(Meter.Id id, DistributionStatisticConfig distributionStatisticConfig) {
+    DistributionSummary summary(Meter.Id id, DistributionStatisticConfig distributionStatisticConfig, double scale) {
         return registerMeterIfNecessary(DistributionSummary.class, id, distributionStatisticConfig, (id2, filteredConfig) ->
-            newDistributionSummary(id2, filteredConfig.merge(defaultHistogramConfig())), NoopDistributionSummary::new);
+            newDistributionSummary(id2, filteredConfig.merge(defaultHistogramConfig()), scale), NoopDistributionSummary::new);
     }
 
     /**

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeMeterRegistry.java
Patch:
@@ -60,8 +60,8 @@ protected Timer newTimer(Meter.Id id, DistributionStatisticConfig distributionSt
     }
 
     @Override
-    protected DistributionSummary newDistributionSummary(Meter.Id id, DistributionStatisticConfig distributionStatisticConfig) {
-        return new CompositeDistributionSummary(id, distributionStatisticConfig);
+    protected DistributionSummary newDistributionSummary(Meter.Id id, DistributionStatisticConfig distributionStatisticConfig, double scale) {
+        return new CompositeDistributionSummary(id, distributionStatisticConfig, scale);
     }
 
     @Override

File: micrometer-core/src/main/java/io/micrometer/core/instrument/cumulative/CumulativeDistributionSummary.java
Patch:
@@ -39,8 +39,8 @@ public class CumulativeDistributionSummary extends AbstractDistributionSummary {
     private final DoubleAdder total;
     private final TimeDecayingMax max;
 
-    public CumulativeDistributionSummary(Id id, Clock clock, DistributionStatisticConfig distributionStatisticConfig) {
-        super(id, clock, distributionStatisticConfig);
+    public CumulativeDistributionSummary(Id id, Clock clock, DistributionStatisticConfig distributionStatisticConfig, double scale) {
+        super(id, clock, distributionStatisticConfig, scale);
         this.count = new AtomicLong();
         this.total = new DoubleAdder();
         this.max = new TimeDecayingMax(clock, distributionStatisticConfig);

File: micrometer-core/src/main/java/io/micrometer/core/instrument/dropwizard/DropwizardDistributionSummary.java
Patch:
@@ -32,8 +32,9 @@ public class DropwizardDistributionSummary extends AbstractDistributionSummary {
     private final DoubleAdder totalAmount = new DoubleAdder();
     private final TimeDecayingMax max;
 
-    DropwizardDistributionSummary(Id id, Clock clock, com.codahale.metrics.Histogram impl, DistributionStatisticConfig distributionStatisticConfig) {
-        super(id, clock, distributionStatisticConfig);
+    DropwizardDistributionSummary(Id id, Clock clock, com.codahale.metrics.Histogram impl, DistributionStatisticConfig distributionStatisticConfig,
+                                  double scale) {
+        super(id, clock, distributionStatisticConfig, scale);
         this.impl = impl;
         this.max = new TimeDecayingMax(clock, distributionStatisticConfig);
     }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/dropwizard/DropwizardMeterRegistry.java
Patch:
@@ -94,8 +94,8 @@ protected Timer newTimer(Meter.Id id, DistributionStatisticConfig distributionSt
     }
 
     @Override
-    protected DistributionSummary newDistributionSummary(Meter.Id id, DistributionStatisticConfig distributionStatisticConfig) {
-        DropwizardDistributionSummary summary = new DropwizardDistributionSummary(id, clock, registry.histogram(hierarchicalName(id)), distributionStatisticConfig);
+    protected DistributionSummary newDistributionSummary(Meter.Id id, DistributionStatisticConfig distributionStatisticConfig, double scale) {
+        DropwizardDistributionSummary summary = new DropwizardDistributionSummary(id, clock, registry.histogram(hierarchicalName(id)), distributionStatisticConfig, scale);
 
         if (distributionStatisticConfig.getPercentiles() != null) {
             for (double percentile : distributionStatisticConfig.getPercentiles()) {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/simple/SimpleMeterRegistry.java
Patch:
@@ -51,19 +51,19 @@ public SimpleMeterRegistry(SimpleConfig config, Clock clock) {
     }
 
     @Override
-    protected DistributionSummary newDistributionSummary(Meter.Id id, DistributionStatisticConfig distributionStatisticConfig) {
+    protected DistributionSummary newDistributionSummary(Meter.Id id, DistributionStatisticConfig distributionStatisticConfig, double scale) {
         DistributionStatisticConfig merged = distributionStatisticConfig.merge(DistributionStatisticConfig.builder()
             .expiry(config.step())
             .build());
 
         DistributionSummary summary;
         switch (config.mode()) {
             case CUMULATIVE:
-                summary = new CumulativeDistributionSummary(id, clock, merged);
+                summary = new CumulativeDistributionSummary(id, clock, merged, scale);
                 break;
             case STEP:
             default:
-                summary = new StepDistributionSummary(id, clock, merged);
+                summary = new StepDistributionSummary(id, clock, merged, scale);
                 break;
         }
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/step/StepDistributionSummary.java
Patch:
@@ -30,8 +30,8 @@ public class StepDistributionSummary extends AbstractDistributionSummary {
     private final TimeDecayingMax max;
 
     @SuppressWarnings("ConstantConditions")
-    public StepDistributionSummary(Id id, Clock clock, DistributionStatisticConfig distributionStatisticConfig) {
-        super(id, clock, distributionStatisticConfig);
+    public StepDistributionSummary(Id id, Clock clock, DistributionStatisticConfig distributionStatisticConfig, double scale) {
+        super(id, clock, distributionStatisticConfig, scale);
         this.count = new StepLong(clock, distributionStatisticConfig.getExpiry().toMillis());
         this.total = new StepDouble(clock, distributionStatisticConfig.getExpiry().toMillis());
         this.max = new TimeDecayingMax(clock, distributionStatisticConfig);

File: micrometer-core/src/main/java/io/micrometer/core/instrument/step/StepMeterRegistry.java
Patch:
@@ -113,8 +113,8 @@ protected Timer newTimer(Meter.Id id, DistributionStatisticConfig distributionSt
     }
 
     @Override
-    protected DistributionSummary newDistributionSummary(Meter.Id id, DistributionStatisticConfig distributionStatisticConfig) {
-        DistributionSummary summary = new StepDistributionSummary(id, clock, distributionStatisticConfig);
+    protected DistributionSummary newDistributionSummary(Meter.Id id, DistributionStatisticConfig distributionStatisticConfig, double scale) {
+        DistributionSummary summary = new StepDistributionSummary(id, clock, distributionStatisticConfig, scale);
 
         if (distributionStatisticConfig.getPercentiles() != null) {
             for (double percentile : distributionStatisticConfig.getPercentiles()) {

File: implementations/micrometer-registry-new-relic/src/main/java/io/micrometer/newrelic/NewRelicMeterRegistry.java
Patch:
@@ -15,7 +15,6 @@
  */
 package io.micrometer.newrelic;
 
-import io.micrometer.core.annotation.Incubating;
 import io.micrometer.core.instrument.*;
 import io.micrometer.core.instrument.config.NamingConvention;
 import io.micrometer.core.instrument.distribution.HistogramSnapshot;
@@ -45,9 +44,10 @@
 import static java.util.stream.Collectors.toList;
 
 /**
+ * Publishes metrics to New Relic Insights.
+ *
  * @author Jon Schneider
  */
-@Incubating(since = "1.0.0-rc.5")
 public class NewRelicMeterRegistry extends StepMeterRegistry {
     private final NewRelicConfig config;
     private final Logger logger = LoggerFactory.getLogger(NewRelicMeterRegistry.class);

File: micrometer-core/src/main/java/io/micrometer/core/annotation/Incubating.java
Patch:
@@ -19,7 +19,7 @@
 import java.lang.annotation.Target;
 
 /**
- * This is a feature that may still yet change before 1.0.0 GA.
+ * This is a feature that is experimental and may yield a breaking change in a minor release.
  */
 @Target({ElementType.METHOD, ElementType.TYPE})
 public @interface Incubating {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/config/MeterFilter.java
Patch:
@@ -15,7 +15,6 @@
  */
 package io.micrometer.core.instrument.config;
 
-import io.micrometer.core.annotation.Incubating;
 import io.micrometer.core.instrument.Meter;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.Tag;
@@ -42,7 +41,6 @@
  *
  * @author Jon Schneider
  */
-@Incubating(since = "1.0.0-rc.3")
 public interface MeterFilter {
     /**
      * Add common tags that are applied to every meter created afterward.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/distribution/TimeWindowHistogram.java
Patch:
@@ -15,7 +15,6 @@
  */
 package io.micrometer.core.instrument.distribution;
 
-import io.micrometer.core.annotation.Incubating;
 import io.micrometer.core.instrument.Clock;
 import org.HdrHistogram.DoubleHistogram;
 import org.HdrHistogram.DoubleRecorder;
@@ -24,7 +23,6 @@
  * @author Jon Schneider
  * @author Trustin Heuiseung Lee
  */
-@Incubating(since = "1.0.0-rc.3")
 public class TimeWindowHistogram extends TimeWindowHistogramBase<DoubleRecorder, DoubleHistogram> {
 
     private final DoubleHistogram intervalHistogram;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/distribution/TimeWindowLatencyHistogram.java
Patch:
@@ -15,7 +15,6 @@
  */
 package io.micrometer.core.instrument.distribution;
 
-import io.micrometer.core.annotation.Incubating;
 import io.micrometer.core.instrument.Clock;
 import io.micrometer.core.instrument.distribution.pause.ClockDriftPauseDetector;
 import io.micrometer.core.instrument.distribution.pause.NoPauseDetector;
@@ -34,7 +33,6 @@
  * @author Jon Schneider
  * @author Trustin Heuiseung Lee
  */
-@Incubating(since = "1.0.0-rc.3")
 public class TimeWindowLatencyHistogram extends TimeWindowHistogramBase<LatencyStats, Histogram> implements AutoCloseable {
     private static Map<io.micrometer.core.instrument.distribution.pause.PauseDetector, PauseDetector> pauseDetectorCache =
         new ConcurrentHashMap<>();

File: micrometer-core/src/main/java/io/micrometer/core/instrument/util/TimeDecayingMax.java
Patch:
@@ -15,7 +15,6 @@
  */
 package io.micrometer.core.instrument.util;
 
-import io.micrometer.core.annotation.Incubating;
 import io.micrometer.core.instrument.Clock;
 import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;
 
@@ -28,7 +27,6 @@
  *
  * @author Jon Schneider
  */
-@Incubating(since = "1.0.0-rc.6")
 public class TimeDecayingMax {
     @SuppressWarnings("rawtypes")
     private static final AtomicIntegerFieldUpdater<TimeDecayingMax> rotatingUpdater =

File: samples/micrometer-samples-core/src/main/java/io/micrometer/core/samples/utils/SampleConfig.java
Patch:
@@ -31,4 +31,4 @@ public static MeterRegistry myMonitoringSystem() {
 //        return SampleRegistries.datadog("26ec541df8f1181b0bdc1bf51fde7cb2", "3288f53fc89a5cac3fb83e725f051f09fd6aba2e");
 //        return SampleRegistries.newRelic("1799539", "1jyWDmrk5kswb-RBuLrhYkKQbBrn9_1Q");
     }
-}q
+}

File: samples/micrometer-samples-core/src/main/java/io/micrometer/core/samples/utils/SampleConfig.java
Patch:
@@ -31,4 +31,4 @@ public static MeterRegistry myMonitoringSystem() {
 //        return SampleRegistries.datadog("26ec541df8f1181b0bdc1bf51fde7cb2", "3288f53fc89a5cac3fb83e725f051f09fd6aba2e");
 //        return SampleRegistries.newRelic("1799539", "1jyWDmrk5kswb-RBuLrhYkKQbBrn9_1Q");
     }
-}
+}q

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/export/datadog/DatadogProperties.java
Patch:
@@ -50,8 +50,8 @@ public class DatadogProperties extends StepRegistryProperties {
     private String hostTag;
 
     /**
-     * URI to ship metrics to. If you need to publish metrics to an internal PROXY
-     * en-route to Datadog, you can define the location of the PROXY with this.
+     * URI to ship metrics to. If you need to publish metrics to an internal proxy
+     * en-route to Datadog, you can define the location of the proxy with this.
      */
     private String uri;
 

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/export/ganglia/GangliaProperties.java
Patch:
@@ -55,7 +55,7 @@ public class GangliaProperties {
     private String protocolVersion;
 
     /**
-     * UDP addressing PublishTarget, either unicast or multicast.
+     * UDP addressing mode, either unicast or multicast.
      */
     private GMetric.UDPAddressingMode addressingMode;
 

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/export/signalfx/SignalFxProperties.java
Patch:
@@ -36,8 +36,8 @@ public class SignalFxProperties extends StepRegistryProperties {
     private String source;
 
     /**
-     * The URI to ship metrics to. If you need to publish metrics to an internal PROXY en route to
-     * SignalFx, you can define the location of the PROXY with this.
+     * The URI to ship metrics to. If you need to publish metrics to an internal proxy en route to
+     * SignalFx, you can define the location of the proxy with this.
      */
     private String uri;
 

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/export/simple/SimpleProperties.java
Patch:
@@ -42,7 +42,7 @@ public class SimpleProperties {
     private Duration step = Duration.ofSeconds(10);
 
     /**
-     * Counting PublishTarget.
+     * Counting mode.
      */
     private CountingMode mode = CountingMode.CUMULATIVE;
 

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/export/atlas/AtlasMetricsExportAutoConfiguration.java
Patch:
@@ -54,7 +54,7 @@ public AtlasConfig atlasConfig(AtlasProperties atlasProperties) {
         return new AtlasPropertiesConfigAdapter(atlasProperties);
     }
 
-    @Bean(destroyMethod = "stop")
+    @Bean
     @ConditionalOnMissingBean
     public AtlasMeterRegistry atlasMeterRegistry(AtlasConfig config, Clock clock) {
         return new AtlasMeterRegistry(config, clock);

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/export/datadog/DatadogMetricsExportAutoConfiguration.java
Patch:
@@ -53,7 +53,7 @@ public DatadogConfig datadogConfig(DatadogProperties props) {
         return new DatadogPropertiesConfigAdapter(props);
     }
 
-    @Bean(destroyMethod = "stop")
+    @Bean
     @ConditionalOnMissingBean
     public DatadogMeterRegistry datadogMeterRegistry(DatadogConfig config, Clock clock) {
         return new DatadogMeterRegistry(config, clock);

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/export/ganglia/GangliaMetricsExportAutoConfiguration.java
Patch:
@@ -54,7 +54,7 @@ public GangliaConfig gangliaConfig(GangliaProperties props) {
         return new GangliaPropertiesConfigAdapter(props);
     }
 
-    @Bean(destroyMethod = "stop")
+    @Bean
     @ConditionalOnMissingBean
     public GangliaMeterRegistry gangliaMeterRegistry(GangliaConfig config, HierarchicalNameMapper nameMapper, Clock clock) {
         return new GangliaMeterRegistry(config, clock, nameMapper);

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/export/graphite/GraphiteMetricsExportAutoConfiguration.java
Patch:
@@ -54,7 +54,7 @@ public GraphiteConfig graphiteConfig(GraphiteProperties props) {
         return new GraphitePropertiesConfigAdapter(props);
     }
 
-    @Bean(destroyMethod = "stop")
+    @Bean
     @ConditionalOnMissingBean
     public GraphiteMeterRegistry graphiteMeterRegistry(GraphiteConfig config, HierarchicalNameMapper nameMapper, Clock clock) {
         return new GraphiteMeterRegistry(config, clock, nameMapper);

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/export/influx/InfluxMetricsExportAutoConfiguration.java
Patch:
@@ -53,7 +53,7 @@ public InfluxConfig influxConfig(InfluxProperties props) {
         return new InfluxPropertiesConfigAdapter(props);
     }
 
-    @Bean(destroyMethod = "stop")
+    @Bean
     @ConditionalOnMissingBean
     public InfluxMeterRegistry influxMeterRegistry(InfluxConfig config, Clock clock) {
         return new InfluxMeterRegistry(config, clock);

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/export/jmx/JmxMetricsExportAutoConfiguration.java
Patch:
@@ -54,7 +54,7 @@ public JmxConfig jmxConfig(JmxProperties props) {
         return new JmxPropertiesConfigAdapter(props);
     }
 
-    @Bean(destroyMethod = "stop")
+    @Bean
     @ConditionalOnMissingBean
     public JmxMeterRegistry jmxMeterRegistry(JmxConfig config, HierarchicalNameMapper nameMapper, Clock clock) {
         return new JmxMeterRegistry(config, clock, nameMapper);

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/export/newrelic/NewRelicMetricsExportAutoConfiguration.java
Patch:
@@ -53,7 +53,7 @@ public NewRelicConfig newRelicConfig(NewRelicProperties props) {
         return new NewRelicPropertiesConfigAdapter(props);
     }
 
-    @Bean(destroyMethod = "stop")
+    @Bean
     @ConditionalOnMissingBean
     public NewRelicMeterRegistry newRelicMeterRegistry(NewRelicConfig config, Clock clock) {
         return new NewRelicMeterRegistry(config, clock);

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/export/signalfx/SignalFxMetricsExportAutoConfiguration.java
Patch:
@@ -53,7 +53,7 @@ public SignalFxConfig signalfxConfig(SignalFxProperties props) {
         return new SignalFxPropertiesConfigAdapter(props);
     }
 
-    @Bean(destroyMethod = "stop")
+    @Bean
     @ConditionalOnMissingBean
     public SignalFxMeterRegistry signalFxMeterRegistry(SignalFxConfig config, Clock clock) {
         return new SignalFxMeterRegistry(config, clock);

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/export/statsd/StatsdMetricsExportAutoConfiguration.java
Patch:
@@ -54,7 +54,7 @@ public StatsdConfig statsdConfig(StatsdProperties props) {
         return new StatsdPropertiesConfigAdapter(props);
     }
 
-    @Bean(destroyMethod = "stop")
+    @Bean
     @ConditionalOnMissingBean
     public StatsdMeterRegistry statsdMeterRegistry(StatsdConfig config, HierarchicalNameMapper hierarchicalNameMapper,
                                                    Clock clock) {

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/export/wavefront/WavefrontMetricsExportAutoConfiguration.java
Patch:
@@ -48,7 +48,7 @@ public WavefrontConfig wavefrontConfig(WavefrontProperties props) {
         return new WavefrontPropertiesConfigAdapter(props);
     }
 
-    @Bean(destroyMethod = "stop")
+    @Bean
     @ConditionalOnMissingBean
     public WavefrontMeterRegistry wavefrontMeterRegistry(WavefrontConfig config, Clock clock) {
         return new WavefrontMeterRegistry(config, clock);

File: samples/micrometer-samples-boot1/src/main/java/io/micrometer/boot1/samples/components/PersonController.java
Patch:
@@ -15,7 +15,6 @@
  */
 package io.micrometer.boot1.samples.components;
 
-import com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;
 import io.micrometer.core.annotation.Timed;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.Timer;
@@ -37,7 +36,6 @@ public PersonController(MeterRegistry registry) {
 
     @GetMapping("/api/people")
     @Timed(percentiles = {0.5, 0.95, 0.999}, histogram = true)
-    @HystrixCommand(fallbackMethod = "fallbackPeople")
     public List<String> allPeople() {
         try {
             Thread.sleep(200);

File: implementations/micrometer-registry-atlas/src/main/java/io/micrometer/atlas/AtlasMeterRegistry.java
Patch:
@@ -23,7 +23,6 @@
 import com.netflix.spectator.atlas.AtlasConfig;
 import com.netflix.spectator.atlas.AtlasRegistry;
 import io.micrometer.core.instrument.*;
-import io.micrometer.core.instrument.config.NamingConvention;
 import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;
 import io.micrometer.core.instrument.distribution.pause.PauseDetector;
 import io.micrometer.core.instrument.internal.DefaultMeter;
@@ -67,7 +66,7 @@ public long monotonicTime() {
 
         // invalid character replacement happens in the spectator-reg-atlas module, so doesn't need
         // to be duplicated here.
-        this.config().namingConvention(NamingConvention.camelCase);
+        this.config().namingConvention(new AtlasNamingConvention());
 
         start();
     }

File: implementations/micrometer-registry-signalfx/src/main/java/io/micrometer/signalfx/SignalFxMeterRegistry.java
Patch:
@@ -69,7 +69,7 @@ public SignalFxMeterRegistry(SignalFxConfig config, Clock clock, ThreadFactory t
 
         SignalFxReceiverEndpoint signalFxEndpoint = new SignalFxEndpoint(apiUri.getScheme(), apiUri.getHost(), port);
 
-        metricSender = new AggregateMetricSender("test.SendMetrics",
+        metricSender = new AggregateMetricSender(config.source(),
                 new HttpDataPointProtobufReceiverFactory(signalFxEndpoint).setVersion(2),
                 new HttpEventProtobufReceiverFactory(signalFxEndpoint),
                 new StaticAuthToken(config.accessToken()),

File: implementations/micrometer-registry-cloudwatch/src/main/java/io/micrometer/cloudwatch/CloudWatchMeterRegistry.java
Patch:
@@ -20,6 +20,8 @@
 import com.amazonaws.services.cloudwatch.model.*;
 import io.micrometer.core.instrument.*;
 import io.micrometer.core.instrument.config.NamingConvention;
+import io.micrometer.core.instrument.distribution.HistogramSnapshot;
+import io.micrometer.core.instrument.distribution.ValueAtPercentile;
 import io.micrometer.core.instrument.step.StepMeterRegistry;
 import io.micrometer.core.instrument.util.DoubleFormat;
 import io.micrometer.core.lang.Nullable;

File: implementations/micrometer-registry-datadog/src/main/java/io/micrometer/datadog/DatadogMeterRegistry.java
Patch:
@@ -16,6 +16,7 @@
 package io.micrometer.datadog;
 
 import io.micrometer.core.instrument.*;
+import io.micrometer.core.instrument.distribution.HistogramSnapshot;
 import io.micrometer.core.instrument.step.StepMeterRegistry;
 import io.micrometer.core.instrument.util.MeterPartition;
 import io.micrometer.core.lang.Nullable;

File: implementations/micrometer-registry-influx/src/main/java/io/micrometer/influx/InfluxMeterRegistry.java
Patch:
@@ -17,6 +17,7 @@
 
 import io.micrometer.core.instrument.*;
 import io.micrometer.core.instrument.config.NamingConvention;
+import io.micrometer.core.instrument.distribution.HistogramSnapshot;
 import io.micrometer.core.instrument.step.StepMeterRegistry;
 import io.micrometer.core.instrument.util.DoubleFormat;
 import io.micrometer.core.instrument.util.MeterPartition;

File: implementations/micrometer-registry-new-relic/src/main/java/io/micrometer/newrelic/NewRelicMeterRegistry.java
Patch:
@@ -19,6 +19,7 @@
 import io.micrometer.core.annotation.Incubating;
 import io.micrometer.core.instrument.*;
 import io.micrometer.core.instrument.config.NamingConvention;
+import io.micrometer.core.instrument.distribution.HistogramSnapshot;
 import io.micrometer.core.instrument.step.StepMeterRegistry;
 import io.micrometer.core.lang.Nullable;
 import org.slf4j.Logger;

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusDistributionSummary.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.micrometer.core.instrument.AbstractDistributionSummary;
 import io.micrometer.core.instrument.Clock;
-import io.micrometer.core.instrument.CountAtBucket;
+import io.micrometer.core.instrument.distribution.CountAtBucket;
 import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;
 import io.micrometer.core.instrument.distribution.TimeWindowHistogram;
 import io.micrometer.core.instrument.util.MeterEquivalence;

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusMeterRegistry.java
Patch:
@@ -18,7 +18,10 @@
 import io.micrometer.core.instrument.*;
 import io.micrometer.core.instrument.cumulative.CumulativeFunctionCounter;
 import io.micrometer.core.instrument.cumulative.CumulativeFunctionTimer;
+import io.micrometer.core.instrument.distribution.CountAtBucket;
 import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;
+import io.micrometer.core.instrument.distribution.HistogramSnapshot;
+import io.micrometer.core.instrument.distribution.ValueAtPercentile;
 import io.micrometer.core.instrument.distribution.pause.PauseDetector;
 import io.micrometer.core.instrument.internal.DefaultGauge;
 import io.micrometer.core.instrument.internal.DefaultLongTaskTimer;

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusTimer.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.micrometer.core.instrument.AbstractTimer;
 import io.micrometer.core.instrument.Clock;
-import io.micrometer.core.instrument.CountAtBucket;
+import io.micrometer.core.instrument.distribution.CountAtBucket;
 import io.micrometer.core.instrument.Timer;
 import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;
 import io.micrometer.core.instrument.distribution.TimeWindowLatencyHistogram;

File: implementations/micrometer-registry-signalfx/src/main/java/io/micrometer/signalfx/SignalFxMeterRegistry.java
Patch:
@@ -24,6 +24,7 @@
 import com.signalfx.metrics.protobuf.SignalFxProtocolBuffers;
 import io.micrometer.core.instrument.*;
 import io.micrometer.core.instrument.config.NamingConvention;
+import io.micrometer.core.instrument.distribution.HistogramSnapshot;
 import io.micrometer.core.instrument.step.StepMeterRegistry;
 import io.micrometer.core.instrument.util.MeterPartition;
 import io.micrometer.core.lang.Nullable;

File: implementations/micrometer-registry-wavefront/src/main/java/io/micrometer/wavefront/WavefrontMeterRegistry.java
Patch:
@@ -17,6 +17,7 @@
 
 import io.micrometer.core.instrument.*;
 import io.micrometer.core.instrument.config.MissingRequiredConfigurationException;
+import io.micrometer.core.instrument.distribution.HistogramSnapshot;
 import io.micrometer.core.instrument.step.StepMeterRegistry;
 import io.micrometer.core.instrument.util.DoubleFormat;
 import io.micrometer.core.instrument.util.MeterPartition;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/AbstractDistributionSummary.java
Patch:
@@ -16,6 +16,7 @@
 package io.micrometer.core.instrument;
 
 import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;
+import io.micrometer.core.instrument.distribution.HistogramSnapshot;
 import io.micrometer.core.instrument.distribution.TimeWindowHistogram;
 import io.micrometer.core.instrument.util.MeterEquivalence;
 import io.micrometer.core.lang.Nullable;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/AbstractTimer.java
Patch:
@@ -16,6 +16,7 @@
 package io.micrometer.core.instrument;
 
 import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;
+import io.micrometer.core.instrument.distribution.HistogramSnapshot;
 import io.micrometer.core.instrument.distribution.TimeWindowLatencyHistogram;
 import io.micrometer.core.instrument.distribution.pause.PauseDetector;
 import io.micrometer.core.instrument.util.MeterEquivalence;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/DistributionSummary.java
Patch:
@@ -16,6 +16,7 @@
 package io.micrometer.core.instrument;
 
 import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;
+import io.micrometer.core.instrument.distribution.HistogramSnapshot;
 import io.micrometer.core.lang.Nullable;
 
 import java.time.Duration;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Timer.java
Patch:
@@ -17,6 +17,7 @@
 
 import io.micrometer.core.annotation.Timed;
 import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;
+import io.micrometer.core.instrument.distribution.HistogramSnapshot;
 import io.micrometer.core.instrument.distribution.pause.PauseDetector;
 import io.micrometer.core.lang.Nullable;
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeDistributionSummary.java
Patch:
@@ -16,7 +16,7 @@
 package io.micrometer.core.instrument.composite;
 
 import io.micrometer.core.instrument.DistributionSummary;
-import io.micrometer.core.instrument.HistogramSnapshot;
+import io.micrometer.core.instrument.distribution.HistogramSnapshot;
 import io.micrometer.core.instrument.Meter;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeTimer.java
Patch:
@@ -16,7 +16,7 @@
 package io.micrometer.core.instrument.composite;
 
 import io.micrometer.core.instrument.Clock;
-import io.micrometer.core.instrument.HistogramSnapshot;
+import io.micrometer.core.instrument.distribution.HistogramSnapshot;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.Timer;
 import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/distribution/CountAtBucket.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.core.instrument;
+package io.micrometer.core.instrument.distribution;
 
 import io.micrometer.core.instrument.util.TimeUtils;
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/distribution/HistogramSnapshot.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.core.instrument;
+package io.micrometer.core.instrument.distribution;
 
 import io.micrometer.core.instrument.util.TimeUtils;
 import io.micrometer.core.lang.Nullable;
@@ -31,6 +31,7 @@ public final class HistogramSnapshot {
     private final double max;
     private final ValueAtPercentile[] percentileValues;
     private final CountAtBucket[] histogramCounts;
+
     private HistogramSnapshot(long count, double total, double max,
                               @Nullable ValueAtPercentile[] percentileValues,
                               @Nullable CountAtBucket[] histogramCounts) {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/distribution/TimeWindowHistogramBase.java
Patch:
@@ -16,9 +16,6 @@
 package io.micrometer.core.instrument.distribution;
 
 import io.micrometer.core.instrument.Clock;
-import io.micrometer.core.instrument.CountAtBucket;
-import io.micrometer.core.instrument.HistogramSnapshot;
-import io.micrometer.core.instrument.ValueAtPercentile;
 import io.micrometer.core.instrument.config.InvalidConfigurationException;
 import io.micrometer.core.instrument.util.TimeUtils;
 import io.micrometer.core.lang.Nullable;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/distribution/ValueAtPercentile.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.core.instrument;
+package io.micrometer.core.instrument.distribution;
 
 import io.micrometer.core.instrument.util.TimeUtils;
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/noop/NoopDistributionSummary.java
Patch:
@@ -16,7 +16,7 @@
 package io.micrometer.core.instrument.noop;
 
 import io.micrometer.core.instrument.DistributionSummary;
-import io.micrometer.core.instrument.HistogramSnapshot;
+import io.micrometer.core.instrument.distribution.HistogramSnapshot;
 
 public class NoopDistributionSummary extends NoopMeter implements DistributionSummary {
     public NoopDistributionSummary(Id id) {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/noop/NoopTimer.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micrometer.core.instrument.noop;
 
-import io.micrometer.core.instrument.HistogramSnapshot;
+import io.micrometer.core.instrument.distribution.HistogramSnapshot;
 import io.micrometer.core.instrument.Timer;
 
 import java.util.concurrent.Callable;

File: implementations/micrometer-registry-influx/src/test/java/io/micrometer/influx/InfluxMeterRegistryFieldToStringTest.java
Patch:
@@ -47,9 +47,9 @@ void testWithEnglishLocaleWithLargerResolution() {
 		Locale.setDefault(Locale.ENGLISH);
 		InfluxMeterRegistry instance = new InfluxMeterRegistry(k -> null, new MockClock());
 
-		InfluxMeterRegistry.Field field = instance.new Field("value", 0.00009);
+		InfluxMeterRegistry.Field field = instance.new Field("value", 0.0000009);
 
-		assertThat(field.toString()).isEqualTo("value=0.0001");
+		assertThat(field.toString()).isEqualTo("value=0.000001");
 	}
 
 	@Test

File: micrometer-core/src/main/java/io/micrometer/core/instrument/MockClock.java
Patch:
@@ -15,12 +15,14 @@
  */
 package io.micrometer.core.instrument;
 
+import io.micrometer.core.instrument.util.TimeUtils;
+
 import java.time.Duration;
 import java.util.concurrent.TimeUnit;
 
 public class MockClock implements Clock {
     // has to be non-zero to prevent divide-by-zeroes and other weird math results based on the clock
-    private long timeNanos = 1;
+    private long timeNanos = (long) TimeUtils.millisToUnit(1, TimeUnit.NANOSECONDS);
 
     public static MockClock clock(MeterRegistry registry) {
         return (MockClock) registry.config().clock();

File: micrometer-core/src/main/java/io/micrometer/core/instrument/ValueAtPercentile.java
Patch:
@@ -28,6 +28,7 @@ public final class ValueAtPercentile {
 
     private final double percentile;
     private final double value;
+
     private ValueAtPercentile(double percentile, double value) {
         this.percentile = percentile;
         this.value = value;

File: micrometer-core/src/test/java/io/micrometer/core/instrument/distribution/TimeWindowHistogramTest.java
Patch:
@@ -30,7 +30,7 @@ void histogramsAreCumulative() {
 
         histogram.recordDouble(6);
 
-        // Proves that the accumulated histogram is truly accumulative, and not just a representation
+        // Proves that the accumulated histogram is truly cumulative, and not just a representation
         // of the last snapshot
         assertThat(histogram.histogramCountAtValue(3)).isEqualTo(1);
 

File: implementations/micrometer-registry-atlas/src/main/java/io/micrometer/atlas/AtlasMeterRegistry.java
Patch:
@@ -24,8 +24,8 @@
 import com.netflix.spectator.atlas.AtlasRegistry;
 import io.micrometer.core.instrument.*;
 import io.micrometer.core.instrument.config.NamingConvention;
-import io.micrometer.core.instrument.histogram.DistributionStatisticConfig;
-import io.micrometer.core.instrument.histogram.pause.PauseDetector;
+import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;
+import io.micrometer.core.instrument.distribution.pause.PauseDetector;
 import io.micrometer.core.instrument.internal.DefaultMeter;
 import io.micrometer.core.instrument.step.StepFunctionCounter;
 import io.micrometer.core.instrument.step.StepFunctionTimer;

File: implementations/micrometer-registry-atlas/src/main/java/io/micrometer/atlas/SpectatorDistributionSummary.java
Patch:
@@ -19,7 +19,7 @@
 import com.netflix.spectator.api.Statistic;
 import io.micrometer.core.instrument.AbstractDistributionSummary;
 import io.micrometer.core.instrument.Clock;
-import io.micrometer.core.instrument.histogram.DistributionStatisticConfig;
+import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;
 import io.micrometer.core.instrument.util.MeterEquivalence;
 import io.micrometer.core.lang.Nullable;
 

File: implementations/micrometer-registry-atlas/src/main/java/io/micrometer/atlas/SpectatorTimer.java
Patch:
@@ -20,8 +20,8 @@
 import com.netflix.spectator.api.Timer;
 import io.micrometer.core.instrument.AbstractTimer;
 import io.micrometer.core.instrument.Clock;
-import io.micrometer.core.instrument.histogram.DistributionStatisticConfig;
-import io.micrometer.core.instrument.histogram.pause.PauseDetector;
+import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;
+import io.micrometer.core.instrument.distribution.pause.PauseDetector;
 import io.micrometer.core.instrument.util.TimeUtils;
 
 import java.util.concurrent.TimeUnit;

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusDistributionSummary.java
Patch:
@@ -18,8 +18,8 @@
 import io.micrometer.core.instrument.AbstractDistributionSummary;
 import io.micrometer.core.instrument.Clock;
 import io.micrometer.core.instrument.CountAtValue;
-import io.micrometer.core.instrument.histogram.DistributionStatisticConfig;
-import io.micrometer.core.instrument.histogram.TimeWindowHistogram;
+import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;
+import io.micrometer.core.instrument.distribution.TimeWindowHistogram;
 import io.micrometer.core.instrument.util.MeterEquivalence;
 import io.micrometer.core.instrument.util.TimeDecayingMax;
 import io.micrometer.core.lang.Nullable;

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusMeterRegistry.java
Patch:
@@ -18,8 +18,8 @@
 import io.micrometer.core.instrument.*;
 import io.micrometer.core.instrument.cumulative.CumulativeFunctionCounter;
 import io.micrometer.core.instrument.cumulative.CumulativeFunctionTimer;
-import io.micrometer.core.instrument.histogram.DistributionStatisticConfig;
-import io.micrometer.core.instrument.histogram.pause.PauseDetector;
+import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;
+import io.micrometer.core.instrument.distribution.pause.PauseDetector;
 import io.micrometer.core.instrument.internal.DefaultGauge;
 import io.micrometer.core.instrument.internal.DefaultLongTaskTimer;
 import io.micrometer.core.instrument.internal.DefaultMeter;

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusTimer.java
Patch:
@@ -19,9 +19,9 @@
 import io.micrometer.core.instrument.Clock;
 import io.micrometer.core.instrument.CountAtValue;
 import io.micrometer.core.instrument.Timer;
-import io.micrometer.core.instrument.histogram.DistributionStatisticConfig;
-import io.micrometer.core.instrument.histogram.TimeWindowLatencyHistogram;
-import io.micrometer.core.instrument.histogram.pause.PauseDetector;
+import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;
+import io.micrometer.core.instrument.distribution.TimeWindowLatencyHistogram;
+import io.micrometer.core.instrument.distribution.pause.PauseDetector;
 import io.micrometer.core.instrument.util.TimeDecayingMax;
 import io.micrometer.core.instrument.util.TimeUtils;
 

File: implementations/micrometer-registry-prometheus/src/test/java/io/micrometer/prometheus/PrometheusMeterRegistryTest.java
Patch:
@@ -18,7 +18,7 @@
 import io.micrometer.core.Issue;
 import io.micrometer.core.instrument.*;
 import io.micrometer.core.instrument.composite.CompositeMeterRegistry;
-import io.micrometer.core.instrument.histogram.DistributionStatisticConfig;
+import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;
 import io.prometheus.client.Collector;
 import io.prometheus.client.CollectorRegistry;
 import org.assertj.core.api.Condition;

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdDistributionSummary.java
Patch:
@@ -18,7 +18,7 @@
 import io.micrometer.core.instrument.AbstractDistributionSummary;
 import io.micrometer.core.instrument.Clock;
 import io.micrometer.core.instrument.Meter;
-import io.micrometer.core.instrument.histogram.DistributionStatisticConfig;
+import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;
 import io.micrometer.core.instrument.util.MeterEquivalence;
 import io.micrometer.core.instrument.util.TimeDecayingMax;
 import io.micrometer.core.lang.Nullable;

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdMeterRegistry.java
Patch:
@@ -18,8 +18,8 @@
 import io.micrometer.core.instrument.*;
 import io.micrometer.core.instrument.binder.logging.LogbackMetrics;
 import io.micrometer.core.instrument.config.NamingConvention;
-import io.micrometer.core.instrument.histogram.DistributionStatisticConfig;
-import io.micrometer.core.instrument.histogram.pause.PauseDetector;
+import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;
+import io.micrometer.core.instrument.distribution.pause.PauseDetector;
 import io.micrometer.core.instrument.internal.DefaultMeter;
 import io.micrometer.core.instrument.util.HierarchicalNameMapper;
 import io.micrometer.core.instrument.util.TimeUtils;

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdTimer.java
Patch:
@@ -18,8 +18,8 @@
 import io.micrometer.core.instrument.AbstractTimer;
 import io.micrometer.core.instrument.Clock;
 import io.micrometer.core.instrument.Timer;
-import io.micrometer.core.instrument.histogram.DistributionStatisticConfig;
-import io.micrometer.core.instrument.histogram.pause.PauseDetector;
+import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;
+import io.micrometer.core.instrument.distribution.pause.PauseDetector;
 import io.micrometer.core.instrument.step.StepDouble;
 import io.micrometer.core.instrument.util.TimeUtils;
 import org.reactivestreams.Subscriber;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/AbstractDistributionSummary.java
Patch:
@@ -15,8 +15,8 @@
  */
 package io.micrometer.core.instrument;
 
-import io.micrometer.core.instrument.histogram.DistributionStatisticConfig;
-import io.micrometer.core.instrument.histogram.TimeWindowHistogram;
+import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;
+import io.micrometer.core.instrument.distribution.TimeWindowHistogram;
 import io.micrometer.core.instrument.util.MeterEquivalence;
 import io.micrometer.core.lang.Nullable;
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/AbstractTimer.java
Patch:
@@ -15,9 +15,9 @@
  */
 package io.micrometer.core.instrument;
 
-import io.micrometer.core.instrument.histogram.DistributionStatisticConfig;
-import io.micrometer.core.instrument.histogram.TimeWindowLatencyHistogram;
-import io.micrometer.core.instrument.histogram.pause.PauseDetector;
+import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;
+import io.micrometer.core.instrument.distribution.TimeWindowLatencyHistogram;
+import io.micrometer.core.instrument.distribution.pause.PauseDetector;
 import io.micrometer.core.instrument.util.MeterEquivalence;
 import io.micrometer.core.lang.Nullable;
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/DistributionSummary.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micrometer.core.instrument;
 
-import io.micrometer.core.instrument.histogram.DistributionStatisticConfig;
+import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;
 import io.micrometer.core.lang.Nullable;
 
 import java.time.Duration;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeDistributionSummary.java
Patch:
@@ -19,7 +19,7 @@
 import io.micrometer.core.instrument.HistogramSnapshot;
 import io.micrometer.core.instrument.Meter;
 import io.micrometer.core.instrument.MeterRegistry;
-import io.micrometer.core.instrument.histogram.DistributionStatisticConfig;
+import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;
 import io.micrometer.core.instrument.noop.NoopDistributionSummary;
 
 class CompositeDistributionSummary extends AbstractCompositeMeter<DistributionSummary> implements DistributionSummary {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeMeterRegistry.java
Patch:
@@ -17,8 +17,8 @@
 
 import io.micrometer.core.instrument.*;
 import io.micrometer.core.instrument.config.NamingConvention;
-import io.micrometer.core.instrument.histogram.DistributionStatisticConfig;
-import io.micrometer.core.instrument.histogram.pause.PauseDetector;
+import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;
+import io.micrometer.core.instrument.distribution.pause.PauseDetector;
 import io.micrometer.core.lang.Nullable;
 
 import java.util.Collections;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeTimer.java
Patch:
@@ -19,8 +19,8 @@
 import io.micrometer.core.instrument.HistogramSnapshot;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.Timer;
-import io.micrometer.core.instrument.histogram.DistributionStatisticConfig;
-import io.micrometer.core.instrument.histogram.pause.PauseDetector;
+import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;
+import io.micrometer.core.instrument.distribution.pause.PauseDetector;
 import io.micrometer.core.instrument.noop.NoopTimer;
 
 import java.time.Duration;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/config/MeterFilter.java
Patch:
@@ -19,7 +19,7 @@
 import io.micrometer.core.instrument.Meter;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.Tag;
-import io.micrometer.core.instrument.histogram.DistributionStatisticConfig;
+import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;
 import io.micrometer.core.lang.Nullable;
 
 import java.util.ArrayList;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/cumulative/CumulativeDistributionSummary.java
Patch:
@@ -19,7 +19,7 @@
 import io.micrometer.core.instrument.Clock;
 import io.micrometer.core.instrument.Measurement;
 import io.micrometer.core.instrument.Statistic;
-import io.micrometer.core.instrument.histogram.DistributionStatisticConfig;
+import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;
 import io.micrometer.core.instrument.util.TimeDecayingMax;
 
 import java.util.Arrays;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/cumulative/CumulativeTimer.java
Patch:
@@ -17,8 +17,8 @@
 
 import io.micrometer.core.instrument.AbstractTimer;
 import io.micrometer.core.instrument.Clock;
-import io.micrometer.core.instrument.histogram.DistributionStatisticConfig;
-import io.micrometer.core.instrument.histogram.pause.PauseDetector;
+import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;
+import io.micrometer.core.instrument.distribution.pause.PauseDetector;
 import io.micrometer.core.instrument.util.TimeDecayingMax;
 import io.micrometer.core.instrument.util.TimeUtils;
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/distribution/DistributionStatisticConfig.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.core.instrument.histogram;
+package io.micrometer.core.instrument.distribution;
 
 import io.micrometer.core.instrument.internal.Mergeable;
 import io.micrometer.core.lang.Nullable;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/distribution/NoopHistogram.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.core.instrument.histogram;
+package io.micrometer.core.instrument.distribution;
 
 import org.HdrHistogram.AbstractHistogram;
 import org.HdrHistogram.Histogram;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/distribution/PercentileHistogramBuckets.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.core.instrument.histogram;
+package io.micrometer.core.instrument.distribution;
 
 import java.util.NavigableSet;
 import java.util.TreeSet;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/distribution/TimeWindowHistogram.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.core.instrument.histogram;
+package io.micrometer.core.instrument.distribution;
 
 import io.micrometer.core.annotation.Incubating;
 import io.micrometer.core.instrument.Clock;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/distribution/TimeWindowHistogramBase.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.core.instrument.histogram;
+package io.micrometer.core.instrument.distribution;
 
 import io.micrometer.core.instrument.Clock;
 import io.micrometer.core.instrument.CountAtValue;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/distribution/package-info.java
Patch:
@@ -15,7 +15,7 @@
  */
 @NonNullApi
 @NonNullFields
-package io.micrometer.core.instrument.histogram;
+package io.micrometer.core.instrument.distribution;
 
 import io.micrometer.core.lang.NonNullApi;
 import io.micrometer.core.lang.NonNullFields;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/distribution/pause/ClockDriftPauseDetector.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.core.instrument.histogram.pause;
+package io.micrometer.core.instrument.distribution.pause;
 
 import java.time.Duration;
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/distribution/pause/NoPauseDetector.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.core.instrument.histogram.pause;
+package io.micrometer.core.instrument.distribution.pause;
 
 public class NoPauseDetector implements PauseDetector {
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/distribution/pause/PauseDetector.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.core.instrument.histogram.pause;
+package io.micrometer.core.instrument.distribution.pause;
 
 public interface PauseDetector {
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/distribution/pause/package-info.java
Patch:
@@ -15,7 +15,7 @@
  */
 @NonNullApi
 @NonNullFields
-package io.micrometer.core.instrument.histogram.pause;
+package io.micrometer.core.instrument.distribution.pause;
 
 import io.micrometer.core.lang.NonNullApi;
 import io.micrometer.core.lang.NonNullFields;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/dropwizard/DropwizardDistributionSummary.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.micrometer.core.instrument.AbstractDistributionSummary;
 import io.micrometer.core.instrument.Clock;
-import io.micrometer.core.instrument.histogram.DistributionStatisticConfig;
+import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;
 import io.micrometer.core.instrument.util.MeterEquivalence;
 import io.micrometer.core.instrument.util.TimeDecayingMax;
 import io.micrometer.core.lang.Nullable;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/dropwizard/DropwizardMeterRegistry.java
Patch:
@@ -19,8 +19,8 @@
 import com.codahale.metrics.MetricRegistry;
 import io.micrometer.core.instrument.*;
 import io.micrometer.core.instrument.config.NamingConvention;
-import io.micrometer.core.instrument.histogram.DistributionStatisticConfig;
-import io.micrometer.core.instrument.histogram.pause.PauseDetector;
+import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;
+import io.micrometer.core.instrument.distribution.pause.PauseDetector;
 import io.micrometer.core.instrument.internal.DefaultLongTaskTimer;
 import io.micrometer.core.instrument.internal.DefaultMeter;
 import io.micrometer.core.instrument.util.DoubleFormat;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/dropwizard/DropwizardTimer.java
Patch:
@@ -18,8 +18,8 @@
 import com.codahale.metrics.Timer;
 import io.micrometer.core.instrument.AbstractTimer;
 import io.micrometer.core.instrument.Clock;
-import io.micrometer.core.instrument.histogram.DistributionStatisticConfig;
-import io.micrometer.core.instrument.histogram.pause.PauseDetector;
+import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;
+import io.micrometer.core.instrument.distribution.pause.PauseDetector;
 import io.micrometer.core.instrument.util.TimeDecayingMax;
 import io.micrometer.core.instrument.util.TimeUtils;
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/simple/SimpleMeterRegistry.java
Patch:
@@ -17,8 +17,8 @@
 
 import io.micrometer.core.instrument.*;
 import io.micrometer.core.instrument.cumulative.*;
-import io.micrometer.core.instrument.histogram.DistributionStatisticConfig;
-import io.micrometer.core.instrument.histogram.pause.PauseDetector;
+import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;
+import io.micrometer.core.instrument.distribution.pause.PauseDetector;
 import io.micrometer.core.instrument.internal.DefaultGauge;
 import io.micrometer.core.instrument.internal.DefaultLongTaskTimer;
 import io.micrometer.core.instrument.internal.DefaultMeter;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/step/StepDistributionSummary.java
Patch:
@@ -19,7 +19,7 @@
 import io.micrometer.core.instrument.Clock;
 import io.micrometer.core.instrument.Measurement;
 import io.micrometer.core.instrument.Statistic;
-import io.micrometer.core.instrument.histogram.DistributionStatisticConfig;
+import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;
 import io.micrometer.core.instrument.util.TimeDecayingMax;
 
 import java.util.Arrays;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/step/StepMeterRegistry.java
Patch:
@@ -16,8 +16,8 @@
 package io.micrometer.core.instrument.step;
 
 import io.micrometer.core.instrument.*;
-import io.micrometer.core.instrument.histogram.DistributionStatisticConfig;
-import io.micrometer.core.instrument.histogram.pause.PauseDetector;
+import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;
+import io.micrometer.core.instrument.distribution.pause.PauseDetector;
 import io.micrometer.core.instrument.internal.DefaultGauge;
 import io.micrometer.core.instrument.internal.DefaultLongTaskTimer;
 import io.micrometer.core.instrument.internal.DefaultMeter;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/step/StepTimer.java
Patch:
@@ -17,8 +17,8 @@
 
 import io.micrometer.core.instrument.AbstractTimer;
 import io.micrometer.core.instrument.Clock;
-import io.micrometer.core.instrument.histogram.DistributionStatisticConfig;
-import io.micrometer.core.instrument.histogram.pause.PauseDetector;
+import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;
+import io.micrometer.core.instrument.distribution.pause.PauseDetector;
 import io.micrometer.core.instrument.util.TimeDecayingMax;
 import io.micrometer.core.instrument.util.TimeUtils;
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/util/TimeDecayingMax.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.micrometer.core.annotation.Incubating;
 import io.micrometer.core.instrument.Clock;
-import io.micrometer.core.instrument.histogram.DistributionStatisticConfig;
+import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;
 
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;

File: micrometer-core/src/test/java/io/micrometer/core/instrument/MeterFilterTest.java
Patch:
@@ -18,7 +18,7 @@
 import io.micrometer.core.Issue;
 import io.micrometer.core.instrument.config.MeterFilter;
 import io.micrometer.core.instrument.config.MeterFilterReply;
-import io.micrometer.core.instrument.histogram.DistributionStatisticConfig;
+import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;
 import io.micrometer.core.lang.Nullable;
 import org.assertj.core.api.Condition;
 import org.junit.jupiter.api.Test;

File: micrometer-core/src/test/java/io/micrometer/core/instrument/MeterRegistryTest.java
Patch:
@@ -17,8 +17,8 @@
 
 import io.micrometer.core.instrument.config.MeterFilter;
 import io.micrometer.core.instrument.config.MeterFilterReply;
-import io.micrometer.core.instrument.histogram.DistributionStatisticConfig;
-import io.micrometer.core.instrument.histogram.pause.PauseDetector;
+import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;
+import io.micrometer.core.instrument.distribution.pause.PauseDetector;
 import io.micrometer.core.instrument.noop.NoopCounter;
 import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
 import org.junit.jupiter.api.Test;

File: micrometer-core/src/test/java/io/micrometer/core/instrument/composite/CompositeMeterRegistryTest.java
Patch:
@@ -19,7 +19,7 @@
 import io.micrometer.core.instrument.*;
 import io.micrometer.core.instrument.config.MeterFilter;
 import io.micrometer.core.instrument.config.NamingConvention;
-import io.micrometer.core.instrument.histogram.pause.ClockDriftPauseDetector;
+import io.micrometer.core.instrument.distribution.pause.ClockDriftPauseDetector;
 import io.micrometer.core.instrument.simple.SimpleConfig;
 import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
 import org.junit.jupiter.api.DisplayName;

File: micrometer-core/src/test/java/io/micrometer/core/instrument/distribution/DistributionStatisticConfigTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.core.instrument.histogram;
+package io.micrometer.core.instrument.distribution;
 
 import org.junit.jupiter.api.Test;
 

File: micrometer-core/src/test/java/io/micrometer/core/instrument/distribution/TimeWindowHistogramTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.core.instrument.histogram;
+package io.micrometer.core.instrument.distribution;
 
 import io.micrometer.core.instrument.MockClock;
 import org.junit.jupiter.api.Test;

File: micrometer-core/src/test/java/io/micrometer/core/instrument/distribution/TimeWindowLatencyHistogramTest.java
Patch:
@@ -13,12 +13,12 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.core.instrument.histogram;
+package io.micrometer.core.instrument.distribution;
 
 import io.micrometer.core.instrument.Clock;
 import io.micrometer.core.instrument.MockClock;
-import io.micrometer.core.instrument.histogram.pause.NoPauseDetector;
-import io.micrometer.core.instrument.histogram.pause.PauseDetector;
+import io.micrometer.core.instrument.distribution.pause.NoPauseDetector;
+import io.micrometer.core.instrument.distribution.pause.PauseDetector;
 import org.assertj.core.data.Offset;
 import org.junit.jupiter.api.Test;
 

File: micrometer-core/src/test/java/io/micrometer/core/instrument/distribution/TimeWindowRotationTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.core.instrument.histogram;
+package io.micrometer.core.instrument.distribution;
 
 import io.micrometer.core.instrument.Clock;
 import io.micrometer.core.instrument.MockClock;

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/PropertiesMeterFilter.java
Patch:
@@ -18,7 +18,7 @@
 import io.micrometer.core.instrument.Meter;
 import io.micrometer.core.instrument.config.MeterFilter;
 import io.micrometer.core.instrument.config.MeterFilterReply;
-import io.micrometer.core.instrument.histogram.DistributionStatisticConfig;
+import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;
 import io.micrometer.core.lang.NonNullApi;
 import io.micrometer.core.lang.Nullable;
 import io.micrometer.spring.autoconfigure.MetricsProperties;

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/filter/PropertiesMeterFilterTest.java
Patch:
@@ -19,7 +19,7 @@
 import io.micrometer.core.instrument.Meter;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.config.MeterFilterReply;
-import io.micrometer.core.instrument.histogram.DistributionStatisticConfig;
+import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;
 import io.micrometer.core.instrument.simple.SimpleConfig;
 import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
 import io.micrometer.spring.PropertiesMeterFilter;

File: micrometer-test/src/main/java/io/micrometer/core/tck/TimerTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.Timer;
-import io.micrometer.core.instrument.histogram.DistributionStatisticConfig;
+import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;
 import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
 import org.junit.jupiter.api.DisplayName;
 import org.junit.jupiter.api.Test;

File: implementations/micrometer-registry-prometheus/src/test/java/io/micrometer/prometheus/PrometheusRenameFilterTest.java
Patch:
@@ -22,13 +22,13 @@
 import static org.assertj.core.api.Assertions.assertThat;
 
 /**
- * Tests for {@link PrometheusMetricRenameFilter}.
+ * Tests for {@link PrometheusRenameFilter}.
  *
  * @author Tommy Ludwig
  */
-class PrometheusMetricRenameFilterTest {
+class PrometheusRenameFilterTest {
 
-    private final PrometheusMetricRenameFilter filter = new PrometheusMetricRenameFilter();
+    private final PrometheusRenameFilter filter = new PrometheusRenameFilter();
 
     @Test
     void doesNotChangeUnrelatedMeter() {

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/MeterBindersConfiguration.java
Patch:
@@ -89,7 +89,7 @@ public ProcessorMetrics processorMetrics() {
     }
 
     @Bean
-    @ConditionalOnProperty(value = "management.metrics.binders.fds.enabled", matchIfMissing = true)
+    @ConditionalOnProperty(value = "management.metrics.binders.files.enabled", matchIfMissing = true)
     @ConditionalOnMissingBean
     public FileDescriptorMetrics fileDescriptorMetrics() {
         return new FileDescriptorMetrics();

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/filter/PropertiesMeterFilterIntegrationTest.java
Patch:
@@ -34,8 +34,8 @@
 @RunWith(SpringRunner.class)
 @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.NONE, classes = PropertiesMeterFilterIntegrationTest.MetricsApp.class)
 @TestPropertySource(properties = {
-    "management.metrics.enabled[my.timer]=true", /* overriden by programmatic filter */
-    "management.metrics.enabled[my.counter]=false"
+    "management.metrics.enable[my.timer]=true", /* overriden by programmatic filter */
+    "management.metrics.enable[my.counter]=false"
 })
 public class PropertiesMeterFilterIntegrationTest {
 

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/autoconfigure/MetricsAutoConfigurationTest.java
Patch:
@@ -22,6 +22,7 @@
 import io.micrometer.core.instrument.binder.jvm.JvmGcMetrics;
 import io.micrometer.core.instrument.binder.jvm.JvmThreadMetrics;
 import io.micrometer.core.instrument.binder.logging.LogbackMetrics;
+import io.micrometer.core.instrument.binder.system.FileDescriptorMetrics;
 import io.micrometer.core.instrument.binder.system.ProcessorMetrics;
 import io.micrometer.core.instrument.binder.system.UptimeMetrics;
 import org.junit.Test;
@@ -99,7 +100,8 @@ public void automaticallyRegisteredBinders() {
             .hasAtLeastOneElementOfType(JvmThreadMetrics.class)
             .hasAtLeastOneElementOfType(ClassLoaderMetrics.class)
             .hasAtLeastOneElementOfType(UptimeMetrics.class)
-            .hasAtLeastOneElementOfType(ProcessorMetrics.class);
+            .hasAtLeastOneElementOfType(ProcessorMetrics.class)
+            .hasAtLeastOneElementOfType(FileDescriptorMetrics.class);
     }
 
     @Test

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/web/tomcat/TomcatMetricsConfiguration.java
Patch:
@@ -26,9 +26,11 @@
 import org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer;
 import org.springframework.context.ApplicationContext;
 import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
 
 import java.util.Collections;
 
+@Configuration
 @ConditionalOnClass(name = "org.apache.catalina.startup.Tomcat")
 public class TomcatMetricsConfiguration {
 

File: implementations/micrometer-registry-datadog/src/main/java/io/micrometer/datadog/DatadogConfig.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.micrometer.datadog;
 
+import io.micrometer.core.instrument.config.MissingRequiredConfigurationException;
 import io.micrometer.core.instrument.step.StepRegistryConfig;
 import io.micrometer.core.lang.Nullable;
 
@@ -37,7 +38,7 @@ default String prefix() {
     default String apiKey() {
         String v = get(prefix() + ".apiKey");
         if(v == null)
-            throw new IllegalStateException("apiKey must be set to report metrics to Datadog");
+            throw new MissingRequiredConfigurationException("apiKey must be set to report metrics to Datadog");
         return v;
     }
 

File: implementations/micrometer-registry-new-relic/src/main/java/io/micrometer/newrelic/NewRelicConfig.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.micrometer.newrelic;
 
+import io.micrometer.core.instrument.config.MissingRequiredConfigurationException;
 import io.micrometer.core.instrument.step.StepRegistryConfig;
 
 public interface NewRelicConfig extends StepRegistryConfig {
@@ -31,14 +32,14 @@ default String prefix() {
     default String apiKey() {
         String v = get(prefix() + ".apiKey");
         if (v == null)
-            throw new IllegalStateException("apiKey must be set to report metrics to New Relic");
+            throw new MissingRequiredConfigurationException("apiKey must be set to report metrics to New Relic");
         return v;
     }
 
     default String accountId() {
         String v = get(prefix() + ".accountId");
         if (v == null)
-            throw new IllegalStateException("accountId must be set to report metrics to New Relic");
+            throw new MissingRequiredConfigurationException("accountId must be set to report metrics to New Relic");
         return v;
     }
 

File: implementations/micrometer-registry-signalfx/src/main/java/io/micrometer/signalfx/SignalFxConfig.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.micrometer.signalfx;
 
+import io.micrometer.core.instrument.config.MissingRequiredConfigurationException;
 import io.micrometer.core.instrument.step.StepRegistryConfig;
 
 import java.time.Duration;
@@ -30,7 +31,7 @@ default String prefix() {
     default String accessToken() {
         String v = get(prefix() + ".accessToken");
         if(v == null)
-            throw new IllegalStateException("accessToken must be set to report metrics to SignalFX");
+            throw new MissingRequiredConfigurationException("accessToken must be set to report metrics to SignalFX");
         return v;
     }
 

File: implementations/micrometer-registry-wavefront/src/main/java/io/micrometer/wavefront/WavefrontConfig.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.micrometer.wavefront;
 
+import io.micrometer.core.instrument.config.MissingRequiredConfigurationException;
 import io.micrometer.core.instrument.step.StepRegistryConfig;
 import io.micrometer.core.lang.Nullable;
 
@@ -77,7 +78,7 @@ default String prefix() {
     default String uri() {
         String v = get(prefix() + ".uri");
         if(v == null)
-            throw new IllegalStateException("A uri is required to publish metrics to Wavefront");
+            throw new MissingRequiredConfigurationException("A uri is required to publish metrics to Wavefront");
         return v;
     }
 

File: implementations/micrometer-registry-wavefront/src/main/java/io/micrometer/wavefront/WavefrontMeterRegistry.java
Patch:
@@ -16,6 +16,7 @@
 package io.micrometer.wavefront;
 
 import io.micrometer.core.instrument.*;
+import io.micrometer.core.instrument.config.MissingRequiredConfigurationException;
 import io.micrometer.core.instrument.step.StepMeterRegistry;
 import io.micrometer.core.instrument.util.DoubleFormat;
 import io.micrometer.core.instrument.util.MeterPartition;
@@ -59,7 +60,7 @@ public WavefrontMeterRegistry(WavefrontConfig config, Clock clock, ThreadFactory
         this.directToApi = !"proxy".equals(uri.getScheme());
 
         if (directToApi && config.apiToken() == null) {
-            throw new IllegalStateException("apiToken must be set whenever publishing directly to the Wavefront API");
+            throw new MissingRequiredConfigurationException("apiToken must be set whenever publishing directly to the Wavefront API");
         }
 
         config().namingConvention(new WavefrontNamingConvention(config.globalPrefix()));

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/JCacheMetrics.java
Patch:
@@ -19,6 +19,7 @@
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.Tags;
+import io.micrometer.core.instrument.config.InvalidConfigurationException;
 import io.micrometer.core.lang.NonNullApi;
 import io.micrometer.core.lang.NonNullFields;
 
@@ -77,7 +78,7 @@ public JCacheMetrics(Cache<?, ?> cache, Iterable<Tag> tags) {
                     + ",CacheManager=" + cacheManagerUri
                     + ",Cache=" + cache.getName());
         } catch (MalformedObjectNameException ignored) {
-            throw new IllegalStateException("Cache name '" + cache.getName() + "' results in an invalid JMX name");
+            throw new InvalidConfigurationException("Cache name '" + cache.getName() + "' results in an invalid JMX name");
         }
     }
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/histogram/TimeWindowHistogramBase.java
Patch:
@@ -19,6 +19,7 @@
 import io.micrometer.core.instrument.CountAtValue;
 import io.micrometer.core.instrument.HistogramSnapshot;
 import io.micrometer.core.instrument.ValueAtPercentile;
+import io.micrometer.core.instrument.config.InvalidConfigurationException;
 import io.micrometer.core.instrument.util.TimeUtils;
 import io.micrometer.core.lang.Nullable;
 
@@ -109,7 +110,7 @@ private static HistogramConfig validateHistogramConfig(HistogramConfig histogram
     }
 
     private static void rejectHistogramConfig(String msg) {
-        throw new IllegalStateException("Invalid HistogramConfig: " + msg);
+        throw new InvalidConfigurationException("Invalid HistogramConfig: " + msg);
     }
 
     void initRingBuffer() {

File: micrometer-core/src/test/java/io/micrometer/core/instrument/histogram/TimeWindowRotationTest.java
Patch:
@@ -17,6 +17,7 @@
 
 import io.micrometer.core.instrument.Clock;
 import io.micrometer.core.instrument.MockClock;
+import io.micrometer.core.instrument.config.InvalidConfigurationException;
 import org.junit.jupiter.params.ParameterizedTest;
 import org.junit.jupiter.params.provider.MethodSource;
 
@@ -45,7 +46,7 @@ class TimeWindowRotationTest {
     private static void expectValidationFailure(Class<? extends TimeWindowHistogramBase<?, ?>> histogramType,
                                                 HistogramConfig badConfig) {
         assertThatThrownBy(() -> newHistogram(histogramType, new MockClock(), badConfig.merge(HistogramConfig.DEFAULT)))
-            .hasRootCauseExactlyInstanceOf(IllegalStateException.class)
+            .hasRootCauseExactlyInstanceOf(InvalidConfigurationException.class)
             .satisfies(cause -> assertThat(cause.getCause()).hasMessageStartingWith("Invalid HistogramConfig:"));
     }
 

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdCounter.java
Patch:
@@ -38,7 +38,7 @@ public class StatsdCounter extends AbstractMeter implements Counter {
 
     @Override
     public void increment(double amount) {
-        if(amount > 0) {
+        if (amount > 0) {
             count.add(amount);
             publisher.onNext(lineBuilder.count((long) amount));
         }

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdDistributionSummary.java
Patch:
@@ -36,7 +36,7 @@ public class StatsdDistributionSummary extends AbstractDistributionSummary {
     private final Subscriber<String> publisher;
 
     StatsdDistributionSummary(Meter.Id id, StatsdLineBuilder lineBuilder, Subscriber<String> publisher, Clock clock,
-                              HistogramConfig histogramConfig, long stepMillis) {
+                              HistogramConfig histogramConfig) {
         super(id, clock, histogramConfig);
         this.max = new TimeDecayingMax(clock, histogramConfig);
         this.lineBuilder = lineBuilder;

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdTimer.java
Patch:
@@ -22,7 +22,7 @@
 import io.micrometer.core.instrument.histogram.pause.PauseDetector;
 import io.micrometer.core.instrument.step.StepDouble;
 import io.micrometer.core.instrument.util.TimeUtils;
-import org.reactivestreams.Processor;
+import org.reactivestreams.Subscriber;
 
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.DoubleAdder;
@@ -34,9 +34,9 @@ public class StatsdTimer extends AbstractTimer implements Timer {
     private StepDouble max;
 
     private final StatsdLineBuilder lineBuilder;
-    private final Processor<String, String> publisher;
+    private final Subscriber<String> publisher;
 
-    StatsdTimer(Id id, StatsdLineBuilder lineBuilder, Processor<String, String> publisher, Clock clock,
+    StatsdTimer(Id id, StatsdLineBuilder lineBuilder, Subscriber<String> publisher, Clock clock,
                 HistogramConfig histogramConfig, PauseDetector pauseDetector, TimeUnit baseTimeUnit, long stepMillis) {
         super(id, clock, histogramConfig, pauseDetector, baseTimeUnit);
         this.max = new StepDouble(clock, stepMillis);

File: micrometer-core/src/main/java/io/micrometer/core/instrument/cumulative/CumulativeCounter.java
Patch:
@@ -23,9 +23,6 @@
 public class CumulativeCounter extends AbstractMeter implements Counter {
     private final DoubleAdder value;
 
-    /**
-     * Create a new instance.
-     */
     public CumulativeCounter(Id id) {
         super(id);
         this.value = new DoubleAdder();

File: implementations/micrometer-registry-cloudwatch/src/main/java/io/micrometer/cloudwatch/CloudWatchConfig.java
Patch:
@@ -39,7 +39,7 @@ default String prefix() {
     default String namespace() {
         String v = get(prefix() + ".namespace");
         if(v == null)
-            throw new IllegalStateException(prefix() + ".namespace must be set to report metrics to CloudWatch");
+            throw new IllegalStateException("namespace must be set to report metrics to CloudWatch");
         return v;
     }
 
@@ -51,7 +51,7 @@ default int batchSize() {
         }
         int vInt = Integer.parseInt(v);
         if(vInt > MAX_BATCH_SIZE)
-            throw new IllegalStateException(prefix() + ".batchSize must be <= " + MAX_BATCH_SIZE);
+            throw new IllegalStateException("batchSize must be <= " + MAX_BATCH_SIZE);
 
         return vInt;
     }

File: implementations/micrometer-registry-cloudwatch/src/main/java/io/micrometer/cloudwatch/CloudWatchMeterRegistry.java
Patch:
@@ -33,6 +33,7 @@
 import java.util.concurrent.TimeUnit;
 import java.util.stream.Stream;
 
+import static java.util.Objects.requireNonNull;
 import static java.util.stream.Collectors.toList;
 import static java.util.stream.StreamSupport.stream;
 
@@ -53,6 +54,8 @@ public CloudWatchMeterRegistry(CloudWatchConfig config, Clock clock,
     public CloudWatchMeterRegistry(CloudWatchConfig config, Clock clock,
                                    AmazonCloudWatchAsync amazonCloudWatchAsync, ThreadFactory threadFactory) {
         super(config, clock);
+        requireNonNull(config.namespace());
+
         this.amazonCloudWatchAsync = amazonCloudWatchAsync;
         this.config = config;
         this.config().namingConvention(NamingConvention.identity);

File: implementations/micrometer-registry-datadog/src/main/java/io/micrometer/datadog/DatadogConfig.java
Patch:
@@ -37,7 +37,7 @@ default String prefix() {
     default String apiKey() {
         String v = get(prefix() + ".apiKey");
         if(v == null)
-            throw new IllegalStateException(prefix() + ".apiKey must be set to report metrics to Datadog");
+            throw new IllegalStateException("apiKey must be set to report metrics to Datadog");
         return v;
     }
 

File: implementations/micrometer-registry-datadog/src/main/java/io/micrometer/datadog/DatadogMeterRegistry.java
Patch:
@@ -62,6 +62,7 @@ public DatadogMeterRegistry(DatadogConfig config, Clock clock) {
 
     public DatadogMeterRegistry(DatadogConfig config, Clock clock, ThreadFactory threadFactory) {
         super(config, clock);
+        requireNonNull(config.apiKey());
 
         this.config().namingConvention(new DatadogNamingConvention());
 

File: implementations/micrometer-registry-new-relic/src/main/java/io/micrometer/newrelic/NewRelicConfig.java
Patch:
@@ -31,14 +31,14 @@ default String prefix() {
     default String apiKey() {
         String v = get(prefix() + ".apiKey");
         if (v == null)
-            throw new IllegalStateException(prefix() + ".apiKey must be set to report metrics to New Relic");
+            throw new IllegalStateException("apiKey must be set to report metrics to New Relic");
         return v;
     }
 
     default String accountId() {
         String v = get(prefix() + ".accountId");
         if (v == null)
-            throw new IllegalStateException(prefix() + ".accountId must be set to report metrics to New Relic");
+            throw new IllegalStateException("accountId must be set to report metrics to New Relic");
         return v;
     }
 

File: implementations/micrometer-registry-signalfx/src/main/java/io/micrometer/signalfx/SignalFxConfig.java
Patch:
@@ -30,7 +30,7 @@ default String prefix() {
     default String accessToken() {
         String v = get(prefix() + ".accessToken");
         if(v == null)
-            throw new IllegalStateException(prefix() + ".accessToken must be set to report metrics to SignalFX");
+            throw new IllegalStateException("accessToken must be set to report metrics to SignalFX");
         return v;
     }
 

File: implementations/micrometer-registry-datadog/src/main/java/io/micrometer/datadog/DatadogConfig.java
Patch:
@@ -61,7 +61,7 @@ default String hostTag() {
      * datadoghq, you can define the location of the proxy with this.
      */
     default String uri() {
-        String v = get(prefix() + ".apiHost");
+        String v = get(prefix() + ".uri");
         return v == null ? "https://app.datadoghq.com" : v;
     }
 

File: implementations/micrometer-registry-datadog/src/main/java/io/micrometer/datadog/DatadogMeterRegistry.java
Patch:
@@ -74,7 +74,8 @@ public DatadogMeterRegistry(DatadogConfig config, Clock clock, ThreadFactory thr
 
         this.config = config;
 
-        start(threadFactory);
+        if(config.enabled())
+            start(threadFactory);
     }
 
     @Override

File: implementations/micrometer-registry-new-relic/src/main/java/io/micrometer/newrelic/NewRelicMeterRegistry.java
Patch:
@@ -124,7 +124,7 @@ protected void publish() {
                 sendEvents(insightsEndpoint, events);
             }
         } catch (MalformedURLException e) {
-            throw new IllegalArgumentException("Malformed New Relic insights endpoint, see '" + config.prefix() + ".uri'", e);
+            throw new IllegalArgumentException("malformed New Relic insights endpoint -- see the 'uri' configuration", e);
         } catch (Throwable t) {
             logger.warn("failed to send metrics", t);
         }

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/export/datadog/DatadogProperties.java
Patch:
@@ -50,8 +50,8 @@ public class DatadogProperties extends StepRegistryProperties {
     private String hostTag;
 
     /**
-     * URI to ship metrics to. If you need to publish metrics to an internal proxy
-     * en-route to Datadog, you can define the location of the proxy with this.
+     * URI to ship metrics to. If you need to publish metrics to an internal PROXY
+     * en-route to Datadog, you can define the location of the PROXY with this.
      */
     private String uri;
 

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/export/ganglia/GangliaProperties.java
Patch:
@@ -55,7 +55,7 @@ public class GangliaProperties {
     private String protocolVersion;
 
     /**
-     * UDP addressing mode, either unicast or multicast.
+     * UDP addressing PublishTarget, either unicast or multicast.
      */
     private GMetric.UDPAddressingMode addressingMode;
 

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/export/signalfx/SignalFxProperties.java
Patch:
@@ -31,8 +31,8 @@ public class SignalFxProperties extends StepRegistryProperties {
     private String accessToken;
 
     /**
-     * The URI to ship metrics to. If you need to publish metrics to an internal proxy en route to
-     * datadoghq, you can define the location of the proxy with this.
+     * The URI to ship metrics to. If you need to publish metrics to an internal PROXY en route to
+     * SignalFx, you can define the location of the PROXY with this.
      */
     private String uri;
 

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/export/simple/SimpleProperties.java
Patch:
@@ -42,7 +42,7 @@ public class SimpleProperties {
     private Duration step = Duration.ofSeconds(10);
 
     /**
-     * Counting mode.
+     * Counting PublishTarget.
      */
     private CountingMode mode = CountingMode.CUMULATIVE;
 

File: samples/micrometer-samples-core/src/main/java/io/micrometer/core/samples/utils/SampleConfig.java
Patch:
@@ -22,11 +22,12 @@
 public class SampleConfig {
     public static MeterRegistry myMonitoringSystem() {
         // Pick a monitoring system here to use in your samples.
+        return SampleRegistries.wavefrontDirect("a6f74e29-7577-4b72-bef8-578f6053e908");
 //        return SampleRegistries.graphite();
 //        return SampleRegistries.signalFx("XNWd8jM0YiDPrroW3Ph0dw");
 //        return SampleRegistries.jmx();
 //        return SampleRegistries.jmx();
-        return SampleRegistries.prometheus();
+//        return SampleRegistries.prometheus();
 //        return SampleRegistries.datadog("26ec541df8f1181b0bdc1bf51fde7cb2", "3288f53fc89a5cac3fb83e725f051f09fd6aba2e");
 //        return SampleRegistries.newRelic("1799539", "1jyWDmrk5kswb-RBuLrhYkKQbBrn9_1Q");
     }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Gauge.java
Patch:
@@ -85,7 +85,7 @@ public Builder<T> tags(Iterable<Tag> tags) {
          * @param value The tag value.
          * @return The gauge builder with a single added tag.
          */
-        public Builder tag(String key, String value) {
+        public Builder<T> tag(String key, String value) {
             tags.add(Tag.of(key, value));
             return this;
         }
@@ -94,7 +94,7 @@ public Builder tag(String key, String value) {
          * @param description Description text of the eventual gauge.
          * @return The gauge builder with added description.
          */
-        public Builder description(@Nullable String description) {
+        public Builder<T> description(@Nullable String description) {
             this.description = description;
             return this;
         }
@@ -103,7 +103,7 @@ public Builder description(@Nullable String description) {
          * @param unit Base unit of the eventual gauge.
          * @return The gauge builder with added base unit.
          */
-        public Builder baseUnit(@Nullable String unit) {
+        public Builder<T> baseUnit(@Nullable String unit) {
             this.baseUnit = unit;
             return this;
         }

File: implementations/micrometer-registry-datadog/src/main/java/io/micrometer/datadog/DatadogMetricMetadata.java
Patch:
@@ -29,7 +29,7 @@ class DatadogMetricMetadata {
 
     // Datadog rejects anything not on this list: https://docs.datadoghq.com/units/
     private static final Set<String> UNIT_WHITELIST = Collections.unmodifiableSet(new HashSet<>(Arrays.asList(
-        "bit", "byte", "kilobyte", "megabyte", "gigabyte", "terabyte", "petabyte", "exobyte",
+        "bit", "byte", "kibibyte", "mebibyte", "gibibyte", "tebibyte", "pebibyte", "exbibyte",
         "microsecond", "millisecond", "second", "minute", "hour", "day", "week", "nanosecond",
         "fraction", "percent", "percent_nano", "apdex",
         "connection", "request", "packet", "segment", "response", "message", "payload", "timeout", "datagram", "route", "session",

File: implementations/micrometer-registry-datadog/src/main/java/io/micrometer/datadog/DatadogMetricMetadata.java
Patch:
@@ -18,6 +18,7 @@
 import io.micrometer.core.instrument.Meter;
 import io.micrometer.core.instrument.Statistic;
 import io.micrometer.core.lang.Nullable;
+import org.apache.commons.text.StringEscapeUtils;
 
 import java.util.*;
 
@@ -90,7 +91,7 @@ String editMetadataBody() {
         }
 
         if (descriptionsEnabled && id.getDescription() != null) {
-            body += ",\"description\":\"" + id.getDescription() + "\"";
+            body += ",\"description\":\"" + StringEscapeUtils.escapeJson(id.getDescription()) + "\"";
         }
 
         body += "}";

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/GuavaCacheMetrics.java
Patch:
@@ -38,7 +38,7 @@ public class GuavaCacheMetrics extends CacheMeterBinder {
      *
      * @param registry  The registry to bind metrics to.
      * @param cache     The cache to instrument.
-     * @param cacheName The name prefix of the metrics.
+     * @param cacheName Will be used to tag metrics with "cache".
      * @param tags      Tags to apply to all recorded metrics. Must be an even number of arguments representing key/value pairs of tags.
      * @return The instrumented cache, unchanged. The original cache is not wrapped or proxied in any way.
      * @see com.google.common.cache.CacheStats

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/db/DatabaseTableMetrics.java
Patch:
@@ -46,7 +46,7 @@ public class DatabaseTableMetrics implements MeterBinder {
      * Record the row count for an individual database table.
      *
      * @param dataSource     The data source to use to run the row count query.
-     * @param dataSourceName The name prefix of the metrics.
+     * @param dataSourceName Will be used to tag metrics with "db".
      * @param tableName      The name of the table to report table size for.
      * @param tags           Tags to apply to all recorded metrics.
      */
@@ -77,7 +77,7 @@ public DatabaseTableMetrics(DataSource dataSource, String query, String dataSour
      *
      * @param registry       The registry to bind metrics to.
      * @param tableName      The name of the table to report table size for.
-     * @param dataSourceName The name prefix of the metrics.
+     * @param dataSourceName Will be used to tag metrics with "db".
      * @param dataSource     The data source to use to run the row count query.
      * @param tags           Tags to apply to all recorded metrics. Must be an even number of arguments representing key/value pairs of tags.
      */

File: micrometer-core/src/main/java/io/micrometer/core/instrument/internal/TimedExecutor.java
Patch:
@@ -17,6 +17,7 @@
 
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.Tag;
+import io.micrometer.core.instrument.Tags;
 import io.micrometer.core.instrument.Timer;
 
 import java.util.concurrent.Executor;
@@ -28,9 +29,9 @@ public class TimedExecutor implements Executor {
     private final Executor delegate;
     private final Timer timer;
 
-    public TimedExecutor(MeterRegistry registry, Executor delegate, String name, Iterable<Tag> tags) {
+    public TimedExecutor(MeterRegistry registry, Executor delegate, String executorName, Iterable<Tag> tags) {
         this.delegate = delegate;
-        this.timer = registry.timer(name, tags);
+        this.timer = registry.timer("executor", Tags.concat(tags, "name", executorName));
     }
 
     @Override

File: micrometer-core/src/main/java/io/micrometer/core/instrument/internal/TimedExecutorService.java
Patch:
@@ -17,6 +17,7 @@
 
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.Tag;
+import io.micrometer.core.instrument.Tags;
 import io.micrometer.core.instrument.Timer;
 
 import java.util.Collection;
@@ -34,9 +35,9 @@ public class TimedExecutorService implements ExecutorService {
     private final ExecutorService delegate;
     private final Timer timer;
 
-    public TimedExecutorService(MeterRegistry registry, ExecutorService delegate, String name, Iterable<Tag> tags) {
+    public TimedExecutorService(MeterRegistry registry, ExecutorService delegate, String executorServiceName, Iterable<Tag> tags) {
         this.delegate = delegate;
-        this.timer = registry.timer(name, tags);
+        this.timer = registry.timer("executor", Tags.concat(tags ,"name", executorServiceName));
     }
 
     @Override

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/scheduling/ExecutorServiceMetricsTest.java
Patch:
@@ -48,8 +48,8 @@ public void taskScheduler() {
     }
 
     private void assertThreadPoolExecutorMetrics(String name) {
-        registry.get(name + ".completed").meter();
-        registry.get(name + ".queued").gauge();
-        registry.get(name + ".pool").gauge();
+        registry.get("executor.completed").tag("name", name).meter();
+        registry.get("executor.queued").tag("name", name).gauge();
+        registry.get("executor.pool.size").tag("name", name).gauge();
     }
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/MeterRegistry.java
Patch:
@@ -36,6 +36,7 @@
 import java.util.function.*;
 
 import static java.util.Collections.emptyList;
+import static java.util.Objects.requireNonNull;
 
 /**
  * Creates and manages your application's set of meters. Exporters use the meter registry to iterate
@@ -69,6 +70,7 @@ public abstract class MeterRegistry {
     private NamingConvention namingConvention = NamingConvention.snakeCase;
 
     protected MeterRegistry(Clock clock) {
+        requireNonNull(clock);
         this.clock = clock;
     }
 

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/CompositeMeterRegistryPostProcessor.java
Patch:
@@ -96,8 +96,7 @@ private void registerPrimaryCompositeMeterRegistry(BeanDefinitionRegistry regist
         definition.setPrimary(true);
 
         ConstructorArgumentValues arguments = new ConstructorArgumentValues();
-        arguments.addIndexedArgumentValue(0,
-            new ConstructorArgumentValues.ValueHolder(null, Clock.class.getName()));
+        arguments.addIndexedArgumentValue(0, this.beanFactory.getBean(Clock.class));
         arguments.addIndexedArgumentValue(1, getBeanReferences(registryBeans));
         definition.setConstructorArgumentValues(arguments);
 

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/autoconfigure/CompositeMeterRegistryConfigurationTest.java
Patch:
@@ -46,6 +46,8 @@ public void compositeRegistryIsCreated() {
         assertThat(((CompositeMeterRegistry) registry).getRegistries())
             .hasAtLeastOneElementOfType(JmxMeterRegistry.class)
             .hasAtLeastOneElementOfType(PrometheusMeterRegistry.class);
+
+        assertThat(registry.config().clock()).isNotNull();
     }
 
     @SpringBootApplication(scanBasePackages = "ignored")

File: implementations/micrometer-registry-atlas/src/main/java/io/micrometer/atlas/AtlasMeterRegistry.java
Patch:
@@ -159,14 +159,14 @@ protected <T> io.micrometer.core.instrument.Gauge newGauge(Meter.Id id, @Nullabl
     @Override
     protected <T> FunctionCounter newFunctionCounter(Meter.Id id, T obj, ToDoubleFunction<T> valueFunction) {
         FunctionCounter fc = new StepFunctionCounter<>(id, clock, atlasConfig.step().toMillis(), obj, valueFunction);
-        newMeter(id, Meter.Type.Counter, fc.measure());
+        newMeter(id, Meter.Type.COUNTER, fc.measure());
         return fc;
     }
 
     @Override
     protected <T> FunctionTimer newFunctionTimer(Meter.Id id, T obj, ToLongFunction<T> countFunction, ToDoubleFunction<T> totalTimeFunction, TimeUnit totalTimeFunctionUnits) {
         FunctionTimer ft = new StepFunctionTimer<>(id, clock, atlasConfig.step().toMillis(), obj, countFunction, totalTimeFunction, totalTimeFunctionUnits, getBaseTimeUnit());
-        newMeter(id, Meter.Type.Timer, ft.measure());
+        newMeter(id, Meter.Type.TIMER, ft.measure());
         return ft;
     }
 

File: implementations/micrometer-registry-datadog/src/test/java/io/micrometer/datadog/DatadogNamingConventionTest.java
Patch:
@@ -25,7 +25,7 @@ class DatadogNamingConventionTest {
 
     @Test
     void nameStartsWithLetter() {
-        assertThat(convention.name("123", Meter.Type.Gauge, null)).isEqualTo("m.123");
+        assertThat(convention.name("123", Meter.Type.GAUGE, null)).isEqualTo("m.123");
     }
 
     @Test
@@ -35,6 +35,6 @@ void tagKeyStartsWithLetter() {
 
     @Test
     void dotNotationIsConvertedToCamelCase() {
-        assertThat(convention.name("gauge.size", Meter.Type.Gauge, null)).isEqualTo("gauge.size");
+        assertThat(convention.name("gauge.size", Meter.Type.GAUGE, null)).isEqualTo("gauge.size");
     }
 }

File: implementations/micrometer-registry-graphite/src/test/java/io/micrometer/graphite/GraphiteHierarchicalNameMapperTest.java
Patch:
@@ -26,7 +26,7 @@ class GraphiteHierarchicalNameMapperTest {
     @Test
     void tagsAsPrefix() {
         GraphiteHierarchicalNameMapper nameMapper = new GraphiteHierarchicalNameMapper("application");
-        Meter.Id id = new Meter.Id("my.name", Tags.of("application", "MYAPP", "other", "value"), null, null, Meter.Type.Counter);
+        Meter.Id id = new Meter.Id("my.name", Tags.of("application", "MYAPP", "other", "value"), null, null, Meter.Type.COUNTER);
 
         assertThat(nameMapper.toHierarchicalName(id, NamingConvention.camelCase))
             .isEqualTo("MYAPP.myName.other.value");

File: implementations/micrometer-registry-graphite/src/test/java/io/micrometer/graphite/GraphiteNamingConventionTest.java
Patch:
@@ -25,11 +25,11 @@ class GraphiteNamingConventionTest {
 
     @Test
     void name() {
-        assertThat(convention.name("name([{id}])/1", Meter.Type.Timer)).isEqualTo("name___id____1");
+        assertThat(convention.name("name([{id}])/1", Meter.Type.TIMER)).isEqualTo("name___id____1");
     }
 
     @Test
     void dotNotationIsConvertedToCamelCase() {
-        assertThat(convention.name("gauge.size", Meter.Type.Gauge)).isEqualTo("gaugeSize");
+        assertThat(convention.name("gauge.size", Meter.Type.GAUGE)).isEqualTo("gaugeSize");
     }
 }

File: implementations/micrometer-registry-influx/src/test/java/io/micrometer/influx/InfluxNamingConventionTest.java
Patch:
@@ -27,7 +27,7 @@ class InfluxNamingConventionTest {
 
     @Test
     void name() {
-        assertThat(convention.name("foo=, bar", Meter.Type.Gauge)).isEqualTo("foo_\\,\\ bar");
+        assertThat(convention.name("foo=, bar", Meter.Type.GAUGE)).isEqualTo("foo_\\,\\ bar");
     }
 
     @Test

File: implementations/micrometer-registry-prometheus/src/test/java/io/micrometer/prometheus/PrometheusDurationNamingConventionTest.java
Patch:
@@ -28,7 +28,7 @@ class PrometheusDurationNamingConventionTest {
 
     @Test
     void unitsAreAppendedToTimers() {
-        assertThat(convention.name("timer", Meter.Type.Timer)).isEqualTo("timer_duration_seconds");
-        assertThat(convention.name("timer", Meter.Type.LongTaskTimer)).isEqualTo("timer_duration_seconds");
+        assertThat(convention.name("timer", Meter.Type.TIMER)).isEqualTo("timer_duration_seconds");
+        assertThat(convention.name("timer", Meter.Type.LONG_TASK_TIMER)).isEqualTo("timer_duration_seconds");
     }
 }

File: implementations/micrometer-registry-prometheus/src/test/java/io/micrometer/prometheus/PrometheusMeterRegistryTest.java
Patch:
@@ -86,7 +86,7 @@ void customSummaries() {
     @DisplayName("custom meters can be typed")
     @Test
     void typedCustomMeters() {
-        Meter.builder("name", Meter.Type.Counter, Collections.singletonList(new Measurement(() -> 1.0, Statistic.COUNT)))
+        Meter.builder("name", Meter.Type.COUNTER, Collections.singletonList(new Measurement(() -> 1.0, Statistic.COUNT)))
             .register(registry);
 
         assertThat(registry.getPrometheusRegistry().metricFamilySamples().nextElement().type)

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Counter.java
Patch:
@@ -55,7 +55,7 @@ default Iterable<Measurement> measure() {
 
     @Override
     default Type type() {
-        return Type.Counter;
+        return Type.COUNTER;
     }
 
     /**
@@ -128,7 +128,7 @@ public Builder baseUnit(@Nullable String unit) {
          * @return A new or existing counter.
          */
         public Counter register(MeterRegistry registry) {
-            return registry.counter(new Meter.Id(name, tags, baseUnit, description, Type.Counter));
+            return registry.counter(new Meter.Id(name, tags, baseUnit, description, Type.COUNTER));
         }
     }
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/DistributionSummary.java
Patch:
@@ -252,7 +252,7 @@ public Builder histogramBufferLength(@Nullable Integer bufferLength) {
          * @return A new or existing distribution summary.
          */
         public DistributionSummary register(MeterRegistry registry) {
-            return registry.summary(new Meter.Id(name, tags, baseUnit, description, Type.DistributionSummary), histogramConfigBuilder.build());
+            return registry.summary(new Meter.Id(name, tags, baseUnit, description, Type.DISTRIBUTION_SUMMARY), histogramConfigBuilder.build());
         }
     }
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/FunctionCounter.java
Patch:
@@ -44,7 +44,7 @@ default Iterable<Measurement> measure() {
 
     @Override
     default Meter.Type type() {
-        return Meter.Type.Counter;
+        return Meter.Type.COUNTER;
     }
 
     /**
@@ -121,7 +121,7 @@ public Builder<T> baseUnit(@Nullable String unit) {
          * @return A new or existing function counter.
          */
         public FunctionCounter register(MeterRegistry registry) {
-            return registry.more().counter(new Meter.Id(name, tags, baseUnit, description, Type.Counter), obj, f);
+            return registry.more().counter(new Meter.Id(name, tags, baseUnit, description, Type.COUNTER), obj, f);
         }
     }
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/FunctionTimer.java
Patch:
@@ -126,7 +126,7 @@ public Builder<T> description(@Nullable String description) {
          * @return A new or existing function timer.
          */
         public FunctionTimer register(MeterRegistry registry) {
-            return registry.more().timer(new Meter.Id(name, tags, null, description, Type.Timer), obj, countFunction, totalTimeFunction,
+            return registry.more().timer(new Meter.Id(name, tags, null, description, Type.TIMER), obj, countFunction, totalTimeFunction,
                 totalTimeFunctionUnits);
         }
     }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Gauge.java
Patch:
@@ -40,7 +40,7 @@ default Iterable<Measurement> measure() {
 
     @Override
     default Type type() {
-        return Type.Gauge;
+        return Type.GAUGE;
     }
 
     /**
@@ -122,7 +122,7 @@ public Builder baseUnit(@Nullable String unit) {
          * @return A new or existing gauge.
          */
         public Gauge register(MeterRegistry registry) {
-            return registry.gauge(new Meter.Id(name, tags, baseUnit, description, Type.Gauge), obj, f);
+            return registry.gauge(new Meter.Id(name, tags, baseUnit, description, Type.GAUGE), obj, f);
         }
     }
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/LongTaskTimer.java
Patch:
@@ -153,7 +153,7 @@ default Iterable<Measurement> measure() {
 
     @Override
     default Type type() {
-        return Type.LongTaskTimer;
+        return Type.LONG_TASK_TIMER;
     }
 
     class Sample {
@@ -236,7 +236,7 @@ public Builder description(@Nullable String description) {
          * @return A new or existing long task timer.
          */
         public LongTaskTimer register(MeterRegistry registry) {
-            return registry.more().longTaskTimer(new Meter.Id(name, tags, null, description, Type.LongTaskTimer));
+            return registry.more().longTaskTimer(new Meter.Id(name, tags, null, description, Type.LONG_TASK_TIMER));
         }
     }
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/TimeGauge.java
Patch:
@@ -101,7 +101,7 @@ public Builder<T> description(@Nullable String description) {
          * @return A new or existing time gauge.
          */
         public TimeGauge register(MeterRegistry registry) {
-            return registry.more().timeGauge(new Meter.Id(name, tags, null, description, Type.Gauge),
+            return registry.more().timeGauge(new Meter.Id(name, tags, null, description, Type.GAUGE),
                 obj, fUnits, f);
         }
     }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Timer.java
Patch:
@@ -168,7 +168,7 @@ default Iterable<Measurement> measure() {
 
     @Override
     default Type type() {
-        return Type.Timer;
+        return Type.TIMER;
     }
 
     class Sample {
@@ -374,7 +374,7 @@ public Builder description(@Nullable String description) {
          */
         public Timer register(MeterRegistry registry) {
             // the base unit for a timer will be determined by the monitoring system implementation
-            return registry.timer(new Meter.Id(name, tags, null, description, Type.Timer), histogramConfigBuilder.build(),
+            return registry.timer(new Meter.Id(name, tags, null, description, Type.TIMER), histogramConfigBuilder.build(),
                 pauseDetector == null ? registry.config().pauseDetector() : pauseDetector);
         }
     }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/cumulative/CumulativeFunctionTimer.java
Patch:
@@ -81,6 +81,6 @@ public TimeUnit baseTimeUnit() {
     }
 
     public Type type() {
-        return Type.Timer;
+        return Type.TIMER;
     }
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/step/StepFunctionTimer.java
Patch:
@@ -92,6 +92,6 @@ public TimeUnit baseTimeUnit() {
     }
 
     public Type type() {
-        return Type.Timer;
+        return Type.TIMER;
     }
 }

File: micrometer-core/src/test/java/io/micrometer/core/instrument/MeterIdTest.java
Patch:
@@ -23,14 +23,14 @@
 class MeterIdTest {
     @Test
     void withStatistic() {
-        Meter.Id id = new Meter.Id("my.id", emptyList(), null, null, Meter.Type.Timer);
+        Meter.Id id = new Meter.Id("my.id", emptyList(), null, null, Meter.Type.TIMER);
         assertThat(id.withTag(Statistic.TOTAL_TIME).getTags()).contains(Tag.of("statistic", "totalTime"));
     }
 
     @Test
     void equalsAndHashCode() {
-        Meter.Id id = new Meter.Id("my.id", emptyList(), null, null, Meter.Type.Counter);
-        Meter.Id id2 = new Meter.Id("my.id", emptyList(), null, null, Meter.Type.Counter);
+        Meter.Id id = new Meter.Id("my.id", emptyList(), null, null, Meter.Type.COUNTER);
+        Meter.Id id2 = new Meter.Id("my.id", emptyList(), null, null, Meter.Type.COUNTER);
 
         assertThat(id).isEqualTo(id2);
         assertThat(id.hashCode()).isEqualTo(id2.hashCode());

File: micrometer-core/src/test/java/io/micrometer/core/instrument/NamingConventionTest.java
Patch:
@@ -23,19 +23,19 @@
 class NamingConventionTest {
     @Test
     void camelCase() {
-        String name = NamingConvention.camelCase.name("a.Name.with.Words", Meter.Type.Counter);
+        String name = NamingConvention.camelCase.name("a.Name.with.Words", Meter.Type.COUNTER);
         assertThat(name).isEqualTo("aNameWithWords");
     }
 
     @Test
     void snakeCase() {
-        String name = NamingConvention.snakeCase.name("a.Name.with.Words", Meter.Type.Counter);
+        String name = NamingConvention.snakeCase.name("a.Name.with.Words", Meter.Type.COUNTER);
         assertThat(name).isEqualTo("a_Name_with_Words");
     }
 
     @Test
     void upperCamelCase() {
-        String name = NamingConvention.upperCamelCase.name("a.name.with.words", Meter.Type.Counter);
+        String name = NamingConvention.upperCamelCase.name("a.name.with.words", Meter.Type.COUNTER);
         assertThat(name).isEqualTo("ANameWithWords");
     }
 }
\ No newline at end of file

File: micrometer-core/src/test/java/io/micrometer/core/instrument/dropwizard/DropwizardMeterRegistryTest.java
Patch:
@@ -53,7 +53,7 @@ void gaugeOnNullValue() {
 
     @Test
     void customMeasurementsThatDifferOnlyInTagValue() {
-        Meter.builder("my.custom", Meter.Type.Gauge, Arrays.asList(
+        Meter.builder("my.custom", Meter.Type.GAUGE, Arrays.asList(
             new Measurement(() -> 1.0, Statistic.COUNT),
             new Measurement(() -> 2.0, Statistic.TOTAL)
         )).register(registry);

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/PropertiesMeterFilter.java
Patch:
@@ -60,7 +60,7 @@ else if (k.isEmpty() || k.equals("all")) {
 
     @Override
     public HistogramConfig configure(Meter.Id id, HistogramConfig config) {
-        if (!id.getType().equals(Meter.Type.Timer) && !id.getType().equals(Meter.Type.DistributionSummary))
+        if (!id.getType().equals(Meter.Type.TIMER) && !id.getType().equals(Meter.Type.DISTRIBUTION_SUMMARY))
             return config;
 
         HistogramConfig.Builder builder = HistogramConfig.builder();
@@ -93,7 +93,7 @@ public HistogramConfig configure(Meter.Id id, HistogramConfig config) {
             builder.histogramExpiry(histogramExpiry);
         }
 
-        if (id.getType().equals(Meter.Type.Timer)) {
+        if (id.getType().equals(Meter.Type.TIMER)) {
             Duration max = getMostSpecific(name -> props.getTimers().getMaximumExpectedValue().get(name), id.getName());
             if (max != null) {
                 builder.maximumExpectedValue(max.toNanos());
@@ -112,7 +112,7 @@ public HistogramConfig configure(Meter.Id id, HistogramConfig config) {
                 }
                 builder.sla(slaNanos);
             }
-        } else if (id.getType().equals(Meter.Type.DistributionSummary)) {
+        } else if (id.getType().equals(Meter.Type.DISTRIBUTION_SUMMARY)) {
             Long max = getMostSpecific(name -> props.getSummaries().getMaximumExpectedValue().get(name), id.getName());
             if (max != null) {
                 builder.maximumExpectedValue(max);

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/autoconfigure/CompositeMeterRegistryConfigurationTest.java
Patch:
@@ -16,10 +16,7 @@
 package io.micrometer.spring.autoconfigure;
 
 import io.micrometer.core.instrument.MeterRegistry;
-import io.micrometer.core.instrument.MockClock;
 import io.micrometer.core.instrument.composite.CompositeMeterRegistry;
-import io.micrometer.datadog.DatadogConfig;
-import io.micrometer.datadog.DatadogMeterRegistry;
 import io.micrometer.jmx.JmxMeterRegistry;
 import io.micrometer.prometheus.PrometheusMeterRegistry;
 import org.junit.Test;

File: implementations/micrometer-registry-datadog/src/main/java/io/micrometer/datadog/DatadogMeterRegistry.java
Patch:
@@ -140,7 +140,7 @@ protected void publish() {
                     quietlyCloseUrlConnection(con);
                 }
             }
-        } catch (Exception e) {
+        } catch (Throwable e) {
             logger.warn("failed to send metrics", e);
         }
 

File: implementations/micrometer-registry-influx/src/main/java/io/micrometer/influx/InfluxMeterRegistry.java
Patch:
@@ -179,7 +179,7 @@ protected void publish() {
             }
         } catch (MalformedURLException e) {
             throw new IllegalArgumentException("Malformed InfluxDB publishing endpoint, see '" + config.prefix() + ".uri'", e);
-        } catch (IOException e) {
+        } catch (Throwable e) {
             logger.warn("failed to send metrics", e);
         }
     }

File: implementations/micrometer-registry-new-relic/src/main/java/io/micrometer/newrelic/NewRelicMeterRegistry.java
Patch:
@@ -125,6 +125,8 @@ protected void publish() {
             }
         } catch (MalformedURLException e) {
             throw new IllegalArgumentException("Malformed New Relic insights endpoint, see '" + config.prefix() + ".uri'", e);
+        } catch (Throwable t) {
+            logger.warn("failed to send metrics", t);
         }
     }
 

File: implementations/micrometer-registry-signalfx/src/main/java/io/micrometer/signalfx/SignalFxMeterRegistry.java
Patch:
@@ -111,7 +111,7 @@ protected void publish() {
                 }
 
                 logger.info("successfully sent " + batch.size() + " metrics to Signalfx");
-            } catch (Exception e) {
+            } catch (Throwable e) {
                 logger.warn("failed to send metrics", e);
             }
         }

File: implementations/micrometer-registry-datadog/src/main/java/io/micrometer/datadog/DatadogMetricMetadata.java
Patch:
@@ -65,9 +65,9 @@ class DatadogMetricMetadata {
         this.overrideBaseUnit = overrideBaseUnit;
 
         switch (statistic) {
-            case Count:
-            case Total:
-            case TotalTime:
+            case COUNT:
+            case TOTAL:
+            case TOTAL_TIME:
                 this.type = "count";
                 break;
             default:

File: implementations/micrometer-registry-graphite/src/main/java/io/micrometer/graphite/GraphiteConfig.java
Patch:
@@ -90,7 +90,7 @@ default GraphiteProtocol protocol() {
         String v = get(prefix() + ".protocol");
 
         if(v == null)
-            return GraphiteProtocol.Pickled;
+            return GraphiteProtocol.PICKLED;
 
         for (GraphiteProtocol flavor : GraphiteProtocol.values()) {
             if(flavor.toString().equalsIgnoreCase(v))

File: implementations/micrometer-registry-graphite/src/main/java/io/micrometer/graphite/GraphiteMeterRegistry.java
Patch:
@@ -57,13 +57,13 @@ public GraphiteMeterRegistry(GraphiteConfig config, Clock clock, HierarchicalNam
     private static GraphiteReporter defaultGraphiteReporter(GraphiteConfig config, MetricRegistry metricRegistry) {
         GraphiteSender sender;
         switch (config.protocol()) {
-            case Plaintext:
+            case PLAINTEXT:
                 sender = new Graphite(new InetSocketAddress(config.host(), config.port()));
                 break;
-            case Udp:
+            case UDP:
                 sender = new GraphiteUDP(new InetSocketAddress(config.host(), config.port()));
                 break;
-            case Pickled:
+            case PICKLED:
             default:
                 sender = new PickledGraphite(new InetSocketAddress(config.host(), config.port()));
         }

File: implementations/micrometer-registry-graphite/src/main/java/io/micrometer/graphite/GraphiteProtocol.java
Patch:
@@ -16,7 +16,7 @@
 package io.micrometer.graphite;
 
 public enum GraphiteProtocol {
-    Plaintext,
-    Udp,
-    Pickled
+    PLAINTEXT,
+    UDP,
+    PICKLED
 }

File: implementations/micrometer-registry-graphite/src/test/java/io/micrometer/graphite/GraphiteMeterRegistryTest.java
Patch:
@@ -63,7 +63,7 @@ public Duration step() {
 
             @Override
             public GraphiteProtocol protocol() {
-                return GraphiteProtocol.Udp;
+                return GraphiteProtocol.UDP;
             }
 
             @Override

File: implementations/micrometer-registry-prometheus/src/test/java/io/micrometer/prometheus/PrometheusMeterRegistryTest.java
Patch:
@@ -86,7 +86,7 @@ void customSummaries() {
     @DisplayName("custom meters can be typed")
     @Test
     void typedCustomMeters() {
-        Meter.builder("name", Meter.Type.Counter, Collections.singletonList(new Measurement(() -> 1.0, Statistic.Count)))
+        Meter.builder("name", Meter.Type.Counter, Collections.singletonList(new Measurement(() -> 1.0, Statistic.COUNT)))
             .register(registry);
 
         assertThat(registry.getPrometheusRegistry().metricFamilySamples().nextElement().type)

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdConfig.java
Patch:
@@ -43,7 +43,7 @@ default StatsdFlavor flavor() {
         // vanilla StatsD (Etsy), and Telegraf supports Datadog's format with a configuration
         // option.
         if(v == null)
-            return StatsdFlavor.Datadog;
+            return StatsdFlavor.DATADOG;
 
         for (StatsdFlavor flavor : StatsdFlavor.values()) {
             if(flavor.toString().equalsIgnoreCase(v))

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdFlavor.java
Patch:
@@ -19,18 +19,18 @@ public enum StatsdFlavor {
     /**
      * https://github.com/etsy/statsd/blob/master/docs/metric_types.md
      */
-    Etsy,
+    ETSY,
 
     /**
      * https://docs.datadoghq.com/guides/dogstatsd/#datagram-format
      */
-    Datadog,
+    DATADOG,
 
     /**
      * https://www.influxdata.com/blog/getting-started-with-sending-statsd-metrics-to-telegraf-influxdb/
      *
      * For gauges to work as expected, you should set `delete_gauges = false` in your input options as documented here:
      * https://github.com/influxdata/telegraf/tree/master/plugins/inputs/statsd
      */
-    Telegraf
+    TELEGRAF
 }
\ No newline at end of file

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdLongTaskTimer.java
Patch:
@@ -40,12 +40,12 @@ public class StatsdLongTaskTimer extends DefaultLongTaskTimer implements StatsdP
     public void poll() {
         long active = activeTasks();
         if(lastActive.getAndSet(active) != active) {
-            publisher.onNext(lineBuilder.gauge(active, Statistic.ActiveTasks));
+            publisher.onNext(lineBuilder.gauge(active, Statistic.ACTIVE_TASKS));
         }
 
         double duration = duration(TimeUnit.MILLISECONDS);
         if(lastDuration.getAndSet(duration) != duration) {
-            publisher.onNext(lineBuilder.gauge(duration, Statistic.Duration));
+            publisher.onNext(lineBuilder.gauge(duration, Statistic.DURATION));
         }
     }
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Counter.java
Patch:
@@ -50,7 +50,7 @@ default void increment() {
 
     @Override
     default Iterable<Measurement> measure() {
-        return Collections.singletonList(new Measurement(this::count, Statistic.Count));
+        return Collections.singletonList(new Measurement(this::count, Statistic.COUNT));
     }
 
     @Override

File: micrometer-core/src/main/java/io/micrometer/core/instrument/DistributionSummary.java
Patch:
@@ -74,8 +74,8 @@ default double mean() {
     @Override
     default Iterable<Measurement> measure() {
         return Arrays.asList(
-            new Measurement(() -> (double) count(), Statistic.Count),
-            new Measurement(this::totalAmount, Statistic.Total)
+            new Measurement(() -> (double) count(), Statistic.COUNT),
+            new Measurement(this::totalAmount, Statistic.TOTAL)
         );
     }
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/FunctionCounter.java
Patch:
@@ -39,7 +39,7 @@ static <T> Builder<T> builder(String name, T obj, ToDoubleFunction<T> f) {
 
     @Override
     default Iterable<Measurement> measure() {
-        return Collections.singletonList(new Measurement(this::count, Statistic.Count));
+        return Collections.singletonList(new Measurement(this::count, Statistic.COUNT));
     }
 
     @Override

File: micrometer-core/src/main/java/io/micrometer/core/instrument/FunctionTimer.java
Patch:
@@ -50,8 +50,8 @@ default double mean(TimeUnit unit) {
     @Override
     default Iterable<Measurement> measure() {
         return Arrays.asList(
-            new Measurement(this::count, Statistic.Count),
-            new Measurement(() -> totalTime(baseTimeUnit()), Statistic.TotalTime)
+            new Measurement(this::count, Statistic.COUNT),
+            new Measurement(() -> totalTime(baseTimeUnit()), Statistic.TOTAL_TIME)
         );
     }
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Gauge.java
Patch:
@@ -35,7 +35,7 @@ static <T> Builder<T> builder(String name, @Nullable T obj, ToDoubleFunction<T>
 
     @Override
     default Iterable<Measurement> measure() {
-        return Collections.singletonList(new Measurement(this::value, Statistic.Value));
+        return Collections.singletonList(new Measurement(this::value, Statistic.VALUE));
     }
 
     @Override

File: micrometer-core/src/main/java/io/micrometer/core/instrument/LongTaskTimer.java
Patch:
@@ -146,8 +146,8 @@ default void record(Runnable f) {
     @Override
     default Iterable<Measurement> measure() {
         return Arrays.asList(
-            new Measurement(() -> (double) activeTasks(), Statistic.ActiveTasks),
-            new Measurement(() -> duration(TimeUnit.NANOSECONDS), Statistic.Duration)
+            new Measurement(() -> (double) activeTasks(), Statistic.ACTIVE_TASKS),
+            new Measurement(() -> duration(TimeUnit.NANOSECONDS), Statistic.DURATION)
         );
     }
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Meter.java
Patch:
@@ -18,7 +18,6 @@
 import io.micrometer.core.instrument.config.NamingConvention;
 import io.micrometer.core.lang.Nullable;
 
-import java.beans.Introspector;
 import java.util.*;
 import java.util.stream.Collectors;
 
@@ -114,7 +113,7 @@ public Id withTag(Tag tag) {
          * @return A new id with the provided tag. The source id remains unchanged.
          */
         public Id withTag(Statistic statistic) {
-            return withTag(Tag.of("statistic", Introspector.decapitalize(statistic.toString())));
+            return withTag(Tag.of("statistic", statistic.getTagValueRepresentation()));
         }
 
         /**

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Timer.java
Patch:
@@ -158,9 +158,9 @@ default double mean(TimeUnit unit) {
     @Override
     default Iterable<Measurement> measure() {
         return Arrays.asList(
-            new Measurement(() -> (double) count(), Statistic.Count),
-            new Measurement(() -> totalTime(baseTimeUnit()), Statistic.TotalTime),
-            new Measurement(() -> max(baseTimeUnit()), Statistic.Max)
+            new Measurement(() -> (double) count(), Statistic.COUNT),
+            new Measurement(() -> totalTime(baseTimeUnit()), Statistic.TOTAL_TIME),
+            new Measurement(() -> max(baseTimeUnit()), Statistic.MAX)
         );
     }
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/JCacheMetrics.java
Patch:
@@ -114,6 +114,7 @@ public void bindTo(MeterRegistry registry) {
      * Defining cache statistics parameters as constants.
      */
     private enum CacheStatistics {
+        // these constants are capitalized to match the object names found in JMX
         CacheHits, CacheHitPercentage,
         CacheMisses, CacheMissPercentage,
         CacheGets, CachePuts, CacheRemovals, CacheEvictions,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/cumulative/CumulativeDistributionSummary.java
Patch:
@@ -71,9 +71,9 @@ public double max() {
     @Override
     public Iterable<Measurement> measure() {
         return Arrays.asList(
-            new Measurement(() -> (double) count(), Statistic.Count),
-            new Measurement(this::totalAmount, Statistic.Total),
-            new Measurement(this::max, Statistic.Max)
+            new Measurement(() -> (double) count(), Statistic.COUNT),
+            new Measurement(this::totalAmount, Statistic.TOTAL),
+            new Measurement(this::max, Statistic.MAX)
         );
     }
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/dropwizard/DropwizardMeterRegistry.java
Patch:
@@ -119,8 +119,8 @@ protected DistributionSummary newDistributionSummary(Meter.Id id, HistogramConfi
     @Override
     protected LongTaskTimer newLongTaskTimer(Meter.Id id) {
         LongTaskTimer ltt = new DefaultLongTaskTimer(id, clock);
-        registry.register(hierarchicalName(id.withTag(Statistic.ActiveTasks)), (Gauge<Integer>) ltt::activeTasks);
-        registry.register(hierarchicalName(id.withTag(Statistic.Duration)), (Gauge<Double>) () -> ltt.duration(TimeUnit.NANOSECONDS));
+        registry.register(hierarchicalName(id.withTag(Statistic.ACTIVE_TASKS)), (Gauge<Integer>) ltt::activeTasks);
+        registry.register(hierarchicalName(id.withTag(Statistic.DURATION)), (Gauge<Double>) () -> ltt.duration(TimeUnit.NANOSECONDS));
         return ltt;
     }
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/simple/CountingMode.java
Patch:
@@ -19,10 +19,10 @@ public enum CountingMode {
     /**
      * Counts and totals are monotonically increasing.
      */
-    Cumulative,
+    CUMULATIVE,
 
     /**
      * Rate normalize counts and totals.
      */
-    Step
+    STEP
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/simple/SimpleConfig.java
Patch:
@@ -38,7 +38,7 @@ default Duration step() {
     default CountingMode mode() {
         String v = get(prefix() + ".mode");
         if (v == null)
-            return CountingMode.Cumulative;
+            return CountingMode.CUMULATIVE;
         for (CountingMode countingMode : CountingMode.values()) {
             if (v.equalsIgnoreCase(countingMode.name()))
                 return countingMode;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/step/StepDistributionSummary.java
Patch:
@@ -62,9 +62,9 @@ public double max() {
     @Override
     public Iterable<Measurement> measure() {
         return Arrays.asList(
-            new Measurement(() -> (double) count(), Statistic.Count),
-            new Measurement(this::totalAmount, Statistic.Total),
-            new Measurement(this::max, Statistic.Max)
+            new Measurement(() -> (double) count(), Statistic.COUNT),
+            new Measurement(this::totalAmount, Statistic.TOTAL),
+            new Measurement(this::max, Statistic.MAX)
         );
     }
 }

File: micrometer-core/src/test/java/io/micrometer/core/instrument/MeterIdTest.java
Patch:
@@ -24,7 +24,7 @@ class MeterIdTest {
     @Test
     void withStatistic() {
         Meter.Id id = new Meter.Id("my.id", emptyList(), null, null, Meter.Type.Timer);
-        assertThat(id.withTag(Statistic.TotalTime).getTags()).contains(Tag.of("statistic", "totalTime"));
+        assertThat(id.withTag(Statistic.TOTAL_TIME).getTags()).contains(Tag.of("statistic", "totalTime"));
     }
 
     @Test

File: micrometer-core/src/test/java/io/micrometer/core/instrument/dropwizard/DropwizardMeterRegistryTest.java
Patch:
@@ -54,8 +54,8 @@ void gaugeOnNullValue() {
     @Test
     void customMeasurementsThatDifferOnlyInTagValue() {
         Meter.builder("my.custom", Meter.Type.Gauge, Arrays.asList(
-            new Measurement(() -> 1.0, Statistic.Count),
-            new Measurement(() -> 2.0, Statistic.Total)
+            new Measurement(() -> 1.0, Statistic.COUNT),
+            new Measurement(() -> 2.0, Statistic.TOTAL)
         )).register(registry);
     }
 }

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/export/simple/SimpleProperties.java
Patch:
@@ -44,7 +44,7 @@ public class SimpleProperties {
     /**
      * Counting mode.
      */
-    private CountingMode mode = CountingMode.Cumulative;
+    private CountingMode mode = CountingMode.CUMULATIVE;
 
     public boolean getEnabled() {
         return this.enabled;

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/export/statsd/StatsdProperties.java
Patch:
@@ -37,7 +37,7 @@ public class StatsdProperties {
     /**
      * StatsD line protocol to use.
      */
-    private StatsdFlavor flavor = StatsdFlavor.Datadog;
+    private StatsdFlavor flavor = StatsdFlavor.DATADOG;
 
     /**
      * Host of the StatsD server to receive exported metrics.

File: micrometer-test/src/main/java/io/micrometer/core/tck/MeterRegistryCompatibilityKit.java
Patch:
@@ -122,7 +122,7 @@ void functionTimerUnits(MeterRegistry registry) {
         assertThat(ft.measure())
             .anySatisfy(ms -> {
                 TimeUnit baseUnit = TimeUnit.valueOf(requireNonNull(ft.getId().getBaseUnit()).toUpperCase());
-                assertThat(ms.getStatistic()).isEqualTo(Statistic.TotalTime);
+                assertThat(ms.getStatistic()).isEqualTo(Statistic.TOTAL_TIME);
                 assertThat(TimeUtils.convert(ms.getValue(), baseUnit, TimeUnit.MILLISECONDS)).isEqualTo(1);
             });
     }

File: samples/micrometer-samples-core/src/main/java/io/micrometer/core/samples/utils/SampleRegistries.java
Patch:
@@ -146,7 +146,7 @@ public String get(String k) {
 
             @Override
             public StatsdFlavor flavor() {
-                return StatsdFlavor.Datadog;
+                return StatsdFlavor.DATADOG;
             }
         }, Clock.SYSTEM);
     }
@@ -166,7 +166,7 @@ public String get(String k) {
 
             @Override
             public StatsdFlavor flavor() {
-                return StatsdFlavor.Telegraf;
+                return StatsdFlavor.TELEGRAF;
             }
         }, Clock.SYSTEM);
     }

File: implementations/micrometer-registry-signalfx/src/main/java/io/micrometer/signalfx/SignalFxMeterRegistry.java
Patch:
@@ -61,10 +61,10 @@ public SignalFxMeterRegistry(SignalFxConfig config, Clock clock, ThreadFactory t
 
         URI apiUri = URI.create(config.uri());
         int port = apiUri.getPort();
-        if(port == -1) {
-            if("http".equals(apiUri.getScheme())) {
+        if (port == -1) {
+            if ("http".equals(apiUri.getScheme())) {
                 port = 80;
-            } else if("https".equals(apiUri.getScheme())) {
+            } else if ("https".equals(apiUri.getScheme())) {
                 port = 443;
             }
         }

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/web/servlet/MetricsFilterCustomExceptionHandlerTest.java
Patch:
@@ -125,9 +125,9 @@ static class Exception2 extends RuntimeException {
     @ControllerAdvice
     static class CustomExceptionHandler {
 
+        @SuppressWarnings("unused")
         @ExceptionHandler
         ResponseEntity<String> handleError(Exception1 ex) {
-            WebMvcMetricsFilter.tagWithException(ex);
             return new ResponseEntity<>("this is a custom exception body",
                 HttpStatus.INTERNAL_SERVER_ERROR);
         }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeFunctionTimer.java
Patch:
@@ -71,6 +71,6 @@ FunctionTimer registerNewMeter(MeterRegistry registry) {
             totalTimeFunction, totalTimeFunctionUnits)
             .tags(getId().getTags())
             .description(getId().getDescription())
-            .baseUnit(getId().getBaseUnit()).register(registry);
+            .register(registry);
     }
 }

File: implementations/micrometer-registry-cloudwatch/src/test/java/io/micrometer/cloudwatch/CloudWatchMeterRegistryCompatibilityTest.java
Patch:
@@ -29,7 +29,7 @@ public MeterRegistry registry() {
         return new CloudWatchMeterRegistry(new CloudWatchConfig() {
             @Override
             @Nullable
-            public String get(String k) {
+            public String get(String key) {
                 return null;
             }
 

File: implementations/micrometer-registry-datadog/src/test/java/io/micrometer/datadog/DatadogMeterRegistryCompatibilityTest.java
Patch:
@@ -38,7 +38,7 @@ public String apiKey() {
 
             @Override
             @Nullable
-            public String get(String k) {
+            public String get(String key) {
                 return null;
             }
         }, new MockClock());

File: implementations/micrometer-registry-ganglia/src/main/java/io/micrometer/ganglia/GangliaConfig.java
Patch:
@@ -33,13 +33,13 @@ public interface GangliaConfig extends DropwizardConfig {
     /**
      * Get the value associated with a key.
      *
-     * @param k
+     * @param key
      *     Key to lookup in the config.
      * @return
      *     Value for the key or null if no key is present.
      */
     @Nullable
-    String get(String k);
+    String get(String key);
 
     /**
      * Property prefix to prepend to configuration names.

File: implementations/micrometer-registry-ganglia/src/test/java/io/micrometer/ganglia/GangliaMeterRegistryCompatibilityTest.java
Patch:
@@ -34,7 +34,7 @@ public boolean enabled() {
 
             @Override
             @Nullable
-            public String get(String k) {
+            public String get(String key) {
                 return null;
             }
         }, new MockClock(), HierarchicalNameMapper.DEFAULT);

File: implementations/micrometer-registry-graphite/src/main/java/io/micrometer/graphite/GraphiteConfig.java
Patch:
@@ -32,13 +32,13 @@ public interface GraphiteConfig extends DropwizardConfig {
     /**
      * Get the value associated with a key.
      *
-     * @param k
+     * @param key
      *     Key to lookup in the config.
      * @return
      *     Value for the key or null if no key is present.
      */
     @Nullable
-    String get(String k);
+    String get(String key);
 
     /**
      * Property prefix to prepend to configuration names.

File: implementations/micrometer-registry-graphite/src/test/java/io/micrometer/graphite/GraphiteHierarchicalNameMapperTest.java
Patch:
@@ -26,7 +26,7 @@ class GraphiteHierarchicalNameMapperTest {
     @Test
     void tagsAsPrefix() {
         GraphiteHierarchicalNameMapper nameMapper = new GraphiteHierarchicalNameMapper("application");
-        Meter.Id id = new Meter.Id("my.name", Tags.zip("application", "MYAPP", "other", "value"), null, null, Meter.Type.Counter);
+        Meter.Id id = new Meter.Id("my.name", Tags.of("application", "MYAPP", "other", "value"), null, null, Meter.Type.Counter);
 
         assertThat(nameMapper.toHierarchicalName(id, NamingConvention.camelCase))
             .isEqualTo("MYAPP.myName.other.value");

File: implementations/micrometer-registry-graphite/src/test/java/io/micrometer/graphite/GraphiteMeterRegistryCompatibilityTest.java
Patch:
@@ -34,7 +34,7 @@ public boolean enabled() {
 
             @Override
             @Nullable
-            public String get(String k) {
+            public String get(String key) {
                 return null;
             }
         }, new MockClock(), HierarchicalNameMapper.DEFAULT);

File: implementations/micrometer-registry-graphite/src/test/java/io/micrometer/graphite/GraphiteMeterRegistryTest.java
Patch:
@@ -52,7 +52,7 @@ void metricPrefixes() {
         final GraphiteMeterRegistry registry = new GraphiteMeterRegistry(new GraphiteConfig() {
             @Override
             @Nullable
-            public String get(String k) {
+            public String get(String key) {
                 return null;
             }
 

File: implementations/micrometer-registry-influx/src/test/java/io/micrometer/influx/InfluxMeterRegistryCompatibilityTest.java
Patch:
@@ -33,7 +33,7 @@ public boolean enabled() {
 
             @Override
             @Nullable
-            public String get(String k) {
+            public String get(String key) {
                 return null;
             }
         }, new MockClock());

File: implementations/micrometer-registry-new-relic/src/test/java/io/micrometer/newrelic/NewRelicMeterRegistryCompatibilityTest.java
Patch:
@@ -43,7 +43,7 @@ public String accountId() {
 
             @Override
             @Nullable
-            public String get(String k) {
+            public String get(String key) {
                 return null;
             }
         }, new MockClock());

File: implementations/micrometer-registry-signalfx/src/test/java/io/micrometer/signalfx/SignalFxMeterRegistryCompatibilityTest.java
Patch:
@@ -28,7 +28,7 @@ public MeterRegistry registry() {
         return new SignalFxMeterRegistry(new SignalFxConfig() {
             @Override
             @Nullable
-            public String get(String k) {
+            public String get(String key) {
                 return null;
             }
 

File: implementations/micrometer-registry-statsd/src/test/java/io/micrometer/statsd/StatsdMeterRegistryTest.java
Patch:
@@ -122,7 +122,7 @@ private StatsdMeterRegistry registry(StatsdFlavor flavor) {
         return new StatsdMeterRegistry(new StatsdConfig() {
             @Override
             @Nullable
-            public String get(String k) {
+            public String get(String key) {
                 return null;
             }
 
@@ -178,7 +178,7 @@ void gaugeLineProtocol(StatsdFlavor flavor) {
         }
 
         Integer n = 2;
-        assertLines(r -> r.gauge("my.gauge", Tags.zip("my.tag", "val"), n), flavor, line);
+        assertLines(r -> r.gauge("my.gauge", Tags.of("my.tag", "val"), n), flavor, line);
     }
 
     @ParameterizedTest

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Counter.java
Patch:
@@ -74,7 +74,7 @@ private Builder(String name) {
          * @param tags Must be an even number of arguments representing key/value pairs of tags.
          */
         public Builder tags(String... tags) {
-            return tags(Tags.zip(tags));
+            return tags(Tags.of(tags));
         }
 
         public Builder tags(Iterable<Tag> tags) {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/DistributionSummary.java
Patch:
@@ -94,7 +94,7 @@ private Builder(String name) {
          * @param tags Must be an even number of arguments representing key/value pairs of tags.
          */
         public Builder tags(String... tags) {
-            return tags(Tags.zip(tags));
+            return tags(Tags.of(tags));
         }
 
         public Builder tags(Iterable<Tag> tags) {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/FunctionCounter.java
Patch:
@@ -67,7 +67,7 @@ private Builder(String name, T obj, ToDoubleFunction<T> f) {
          * @param tags Must be an even number of arguments representing key/value pairs of tags.
          */
         public Builder<T> tags(String... tags) {
-            return tags(Tags.zip(tags));
+            return tags(Tags.of(tags));
         }
 
         public Builder<T> tags(Iterable<Tag> tags) {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/FunctionTimer.java
Patch:
@@ -82,7 +82,7 @@ private Builder(String name, T obj,
          * @param tags Must be an even number of arguments representing key/value pairs of tags.
          */
         public Builder<T> tags(String... tags) {
-            return tags(Tags.zip(tags));
+            return tags(Tags.of(tags));
         }
 
         public Builder<T> tags(Iterable<Tag> tags) {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Gauge.java
Patch:
@@ -65,7 +65,7 @@ private Builder(String name, @Nullable T obj, ToDoubleFunction<T> f) {
          * @return the builder
          */
         public Builder tags(String... tags) {
-            return tags(Tags.zip(tags));
+            return tags(Tags.of(tags));
         }
 
         public Builder tags(Iterable<Tag> tags) {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/LongTaskTimer.java
Patch:
@@ -193,7 +193,7 @@ private Builder(String name) {
          * @param tags Must be an even number of arguments representing key/value pairs of tags.
          */
         public Builder tags(String... tags) {
-            return tags(Tags.zip(tags));
+            return tags(Tags.of(tags));
         }
 
         public Builder tags(Iterable<Tag> tags) {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Measurement.java
Patch:
@@ -27,8 +27,8 @@ public class Measurement {
     private final Supplier<Double> f;
     private final Statistic statistic;
 
-    public Measurement(Supplier<Double> f, Statistic statistic) {
-        this.f = f;
+    public Measurement(Supplier<Double> valueFunction, Statistic statistic) {
+        this.f = valueFunction;
         this.statistic = statistic;
     }
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Meter.java
Patch:
@@ -187,7 +187,7 @@ private Builder(String name, Type type, Iterable<Measurement> measurements) {
          * @param tags Must be an even number of arguments representing key/value pairs of tags.
          */
         public Builder tags(String... tags) {
-            return tags(Tags.zip(tags));
+            return tags(Tags.of(tags));
         }
 
         public Builder tags(Iterable<Tag> tags) {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/TimeGauge.java
Patch:
@@ -58,7 +58,7 @@ private Builder(String name, T obj, TimeUnit fUnits, ToDoubleFunction<T> f) {
          * @return
          */
         public Builder<T> tags(String... tags) {
-            return tags(Tags.zip(tags));
+            return tags(Tags.of(tags));
         }
 
         public Builder<T> tags(Iterable<Tag> tags) {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Timer.java
Patch:
@@ -299,7 +299,7 @@ public Builder pauseDetector(@Nullable PauseDetector pauseDetector) {
          * @param tags Must be an even number of arguments representing key/value pairs of tags.
          */
         public Builder tags(String... tags) {
-            return tags(Tags.zip(tags));
+            return tags(Tags.of(tags));
         }
 
         public Builder description(@Nullable String description) {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/CaffeineCacheMetrics.java
Patch:
@@ -71,7 +71,7 @@ public CaffeineCacheMetrics(Cache<?, ?> cache, String name, Iterable<Tag> tags)
      * @return The instrumented cache, unchanged. The original cache is not wrapped or proxied in any way.
      */
     public static <C extends Cache> C monitor(MeterRegistry registry, C cache, String name, String... tags) {
-        return monitor(registry, cache, name, Tags.zip(tags));
+        return monitor(registry, cache, name, Tags.of(tags));
     }
 
     /**
@@ -101,7 +101,7 @@ public static <C extends Cache> C monitor(MeterRegistry registry, C cache, Strin
      * @return The instrumented cache, unchanged. The original cache is not wrapped or proxied in any way.
      */
     public static <C extends AsyncLoadingCache> C monitor(MeterRegistry registry, C cache, String name, String... tags) {
-        return monitor(registry, cache, name, Tags.zip(tags));
+        return monitor(registry, cache, name, Tags.of(tags));
     }
 
     /**

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/EhCache2Metrics.java
Patch:
@@ -49,7 +49,7 @@ public EhCache2Metrics(Ehcache cache, String name, Iterable<Tag> tags) {
      * @see com.google.common.cache.CacheStats
      */
     public static Ehcache monitor(MeterRegistry registry, Ehcache cache, String name, String... tags) {
-        return monitor(registry, cache, name, Tags.zip(tags));
+        return monitor(registry, cache, name, Tags.of(tags));
     }
 
     /**

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/GuavaCacheMetrics.java
Patch:
@@ -52,7 +52,7 @@ public GuavaCacheMetrics(Cache<?, ?> cache, String name, Iterable<Tag> tags) {
      * @see com.google.common.cache.CacheStats
      */
     public static <C extends Cache> C monitor(MeterRegistry registry, C cache, String name, String... tags) {
-        return monitor(registry, cache, name, Tags.zip(tags));
+        return monitor(registry, cache, name, Tags.of(tags));
     }
 
     /**

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/HazelcastCacheMetrics.java
Patch:
@@ -48,7 +48,7 @@ public HazelcastCacheMetrics(IMap<?, ?> cache, String name, Iterable<Tag> tags)
      * @see com.google.common.cache.CacheStats
      */
     public static <K, V, C extends IMap<K, V>> C monitor(MeterRegistry registry, C cache, String name, String... tags) {
-        return monitor(registry, cache, name, Tags.zip(tags));
+        return monitor(registry, cache, name, Tags.of(tags));
     }
 
     /**

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/JCacheMetrics.java
Patch:
@@ -64,7 +64,7 @@ public JCacheMetrics(Cache<?, ?> cache, String name, Iterable<Tag> tags) {
      * @see com.google.common.cache.CacheStats
      */
     public static <K, V, C extends Cache<K, V>> C monitor(MeterRegistry registry, C cache, String name, String... tags) {
-        return monitor(registry, cache, name, Tags.zip(tags));
+        return monitor(registry, cache, name, Tags.of(tags));
     }
 
     /**

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/hystrix/MicrometerMetricsPublisherCommand.java
Patch:
@@ -78,7 +78,7 @@ public MicrometerMetricsPublisherCommand(MeterRegistry meterRegistry, HystrixCom
         this.circuitBreaker = circuitBreaker;
         this.commandKey = commandKey;
 
-        tags = Tags.zip("group", commandGroupKey.name(), "key", commandKey.name());
+        tags = Tags.of("group", commandGroupKey.name(), "key", commandKey.name());
 
         //Initialize commands at zero
         Counter.builder(NAME_HYSTRIX_ERRORS).tags(tags).register(meterRegistry);

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/okhttp3/OkHttpMetricsEventListener.java
Patch:
@@ -96,7 +96,7 @@ private void time(CallState state) {
         String uri = state.response == null ? "UNKNOWN" :
             (state.response.code() == 404 || state.response.code() == 301 ? "NOT_FOUND" : urlMapper.apply(state.request));
 
-        Iterable<Tag> tags = Tags.concat(extraTags, Tags.zip(
+        Iterable<Tag> tags = Tags.concat(extraTags, Tags.of(
             "method", state.request != null ? state.request.method() : "UNKNOWN",
             "uri", uri,
             "status", getStatusMessage(state.response, state.exception),

File: micrometer-core/src/main/java/io/micrometer/core/instrument/config/MeterRegistryConfig.java
Patch:
@@ -23,9 +23,9 @@ public interface MeterRegistryConfig {
     /**
      * Get the value associated with a key.
      *
-     * @param k Key to lookup in the config.
+     * @param key Key to lookup in the config.
      * @return Value for the key or null if no key is present.
      */
     @Nullable
-    String get(String k);
+    String get(String key);
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/search/RequiredSearch.java
Patch:
@@ -24,8 +24,6 @@
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 
-import static io.micrometer.core.instrument.Tags.zip;
-
 /**
  * Search that requires the search terms are satisfiable, or an {@link MeterNotFoundException} is thrown.
  */
@@ -48,7 +46,7 @@ public RequiredSearch tags(Iterable<Tag> tags) {
      * @param tags Must be an even number of arguments representing key/value pairs of tags.
      */
     public RequiredSearch tags(String... tags) {
-        return tags(zip(tags));
+        return tags(Tags.of(tags));
     }
 
     public Timer timer() {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/search/Search.java
Patch:
@@ -24,8 +24,6 @@
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 
-import static io.micrometer.core.instrument.Tags.zip;
-
 public class Search {
     private final MeterRegistry registry;
     private final String name;
@@ -45,7 +43,7 @@ public Search tags(Iterable<Tag> tags) {
      * @param tags Must be an even number of arguments representing key/value pairs of tags.
      */
     public Search tags(String... tags) {
-        return tags(zip(tags));
+        return tags(Tags.of(tags));
     }
 
     @Nullable

File: micrometer-core/src/test/java/io/micrometer/core/instrument/TagsTest.java
Patch:
@@ -45,7 +45,7 @@ void concatOnTwoTagsWithSameKeyAreMergedIntoOneTag() {
 
     @Test
     void zipOnTwoTagsWithSameKeyAreMergedIntoOneTag() {
-        Iterable<Tag> tags = Tags.zip("k", "v1", "k", "v2");
+        Iterable<Tag> tags = Tags.of("k", "v1", "k", "v2");
         assertThat(tags).containsExactly(Tag.of("k", "v2"));
     }
 
@@ -162,7 +162,7 @@ void concatStringsShouldReturnNewInstanceWithAddedTags() throws Exception {
     @Test
     @Deprecated
     void zipShouldReturnNewInstanceWithTags() throws Exception {
-        Tags tags = Tags.zip("t1", "v1", "t2", "v2");
+        Tags tags = Tags.of("t1", "v1", "t2", "v2");
         assertTags(tags, "t1", "v1", "t2", "v2");
     }
 

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/cache/CaffeineCacheMetricsTest.java
Patch:
@@ -32,7 +32,7 @@
 class CaffeineCacheMetricsTest {
     private SimpleMeterRegistry registry = new SimpleMeterRegistry();
 
-    private Iterable<Tag> userTags = Tags.zip("userTagKey", "userTagValue");
+    private Iterable<Tag> userTags = Tags.of("userTagKey", "userTagValue");
 
     @Test
     void cacheExposesMetricsForHitMissAndEviction() {

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/hystrix/MicrometerMetricsPublisherCommandTest.java
Patch:
@@ -66,7 +66,7 @@ void testCumulativeCounters() throws Exception {
             new SuccessCommand(key).execute();
         }
 
-        Iterable<Tag> tags = Tags.zip("group", "MicrometerGROUP", "key", "MicrometerCOMMAND-A");
+        Iterable<Tag> tags = Tags.of("group", "MicrometerGROUP", "key", "MicrometerCOMMAND-A");
 
         assertExecutionMetric(registry, "success", 24.0);
         assertThat(registry.get("hystrix.execution").tags(tags).tags("event", "timeout").functionCounter().count()).isEqualTo(3.0);
@@ -107,7 +107,7 @@ void testOpenCircuit() {
         new FailureCommand(key).execute();
         new SuccessCommand(key).execute();
 
-        Iterable<Tag> tags = Tags.zip("group", groupKey.name(), "key", key.name());
+        Iterable<Tag> tags = Tags.of("group", groupKey.name(), "key", key.name());
 
         assertExecutionMetric(registry, "short_circuited", 6.0);
         assertThat(registry.get("hystrix.execution").tags(tags).tags("event", "success").functionCounter().count()).isEqualTo(0.0);

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/jvm/ExecutorServiceMetricsTest.java
Patch:
@@ -30,7 +30,7 @@
 
 class ExecutorServiceMetricsTest {
     private MeterRegistry registry = new SimpleMeterRegistry(SimpleConfig.DEFAULT, new MockClock());
-    private Iterable<Tag> userTags = Tags.zip("userTagKey", "userTagValue");
+    private Iterable<Tag> userTags = Tags.of("userTagKey", "userTagValue");
 
     @DisplayName("Normal executor can be instrumented after being initialized")
     @Test

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/okhttp3/OkHttpMetricsEventListenerTest.java
Patch:
@@ -35,7 +35,7 @@ class OkHttpMetricsEventListenerTest {
     private OkHttpClient client = new OkHttpClient.Builder()
         .eventListener(OkHttpMetricsEventListener.builder(registry, "okhttp.requests")
             .uriMapper(req -> req.url().encodedPath())
-            .tags(Tags.zip("foo", "bar"))
+            .tags(Tags.of("foo", "bar"))
             .build())
         .build();
 
@@ -79,7 +79,7 @@ void timeFailureDueToTimeout() {
             .connectTimeout(1, TimeUnit.MILLISECONDS)
             .eventListener(OkHttpMetricsEventListener.builder(registry, "okhttp.requests")
                 .uriMapper(req -> req.url().encodedPath())
-                .tags(Tags.zip("foo", "bar"))
+                .tags(Tags.of("foo", "bar"))
                 .build())
             .build();
 

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/system/FileDescriptorMetricsTest.java
Patch:
@@ -53,7 +53,7 @@ void fileDescriptorMetricsRuntime() {
     @Test
     void fileDescriptorMetricsUnsupportedOsBeanMock() {
         final OperatingSystemMXBean osBean = mock(OperatingSystemMXBean.class);
-        new FileDescriptorMetrics(osBean, Tags.zip("some", "tag")).bindTo(registry);
+        new FileDescriptorMetrics(osBean, Tags.of("some", "tag")).bindTo(registry);
 
         assertThat(registry.find("process.open.fds").gauge()).isNull();
         assertThat(registry.find("process.max.fds").gauge()).isNull();
@@ -65,7 +65,7 @@ void fileDescriptorMetricsSupportedOsBeanMock() {
             HotSpotLikeOperatingSystemMXBean.class);
         when(osBean.getOpenFileDescriptorCount()).thenReturn(Long.valueOf(512));
         when(osBean.getMaxFileDescriptorCount()).thenReturn(Long.valueOf(1024));
-        new FileDescriptorMetrics(osBean, Tags.zip("some", "tag")).bindTo(registry);
+        new FileDescriptorMetrics(osBean, Tags.of("some", "tag")).bindTo(registry);
 
         assertThat(registry.get("process.open.fds").tags("some", "tag")
             .gauge().value()).isEqualTo(512.0);
@@ -79,7 +79,7 @@ void fileDescriptorMetricsInvocationException() {
             HotSpotLikeOperatingSystemMXBean.class);
         when(osBean.getOpenFileDescriptorCount()).thenThrow(InvocationTargetException.class);
         when(osBean.getMaxFileDescriptorCount()).thenThrow(InvocationTargetException.class);
-        new FileDescriptorMetrics(osBean, Tags.zip("some", "tag")).bindTo(registry);
+        new FileDescriptorMetrics(osBean, Tags.of("some", "tag")).bindTo(registry);
 
         assertThat(registry.get("process.open.fds").tags("some", "tag")
             .gauge().value()).isEqualTo(Double.NaN);

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/tomcat/TomcatMetricsTest.java
Patch:
@@ -80,7 +80,7 @@ public Context getContext() {
         expiredSession.setCreationTime(System.currentTimeMillis() - 10_000);
         manager.remove(expiredSession, true);
 
-        Iterable<Tag> tags = Tags.zip("metricTag", "val1");
+        Iterable<Tag> tags = Tags.of("metricTag", "val1");
         TomcatMetrics.monitor(registry, manager, tags);
 
         assertThat(registry.get("tomcat.sessions.active.max").tags(tags).gauge().value()).isEqualTo(3.0);

File: micrometer-core/src/test/java/io/micrometer/core/instrument/dropwizard/DropwizardMeterRegistryTest.java
Patch:
@@ -40,7 +40,7 @@ public String prefix() {
 
             @Override
             @Nullable
-            public String get(String k) {
+            public String get(String key) {
                 return null;
             }
         }, new MetricRegistry(), HierarchicalNameMapper.DEFAULT, clock);

File: micrometer-jersey2/src/test/java/io/micrometer/jersey2/server/DefaultJerseyTagsProviderTest.java
Patch:
@@ -128,7 +128,7 @@ private static RequestEvent event(Integer status, Exception exception, String ba
     }
 
     private static Tag[] tagsFrom(String uri, int status, String exception) {
-        Iterable<Tag> expectedTags = Tags.zip(
+        Iterable<Tag> expectedTags = Tags.of(
             TAG_METHOD, "GET",
             TAG_URI, uri,
             TAG_STATUS, String.valueOf(status),

File: micrometer-jersey2/src/test/java/io/micrometer/jersey2/server/MetricsRequestEventListenerTest.java
Patch:
@@ -139,7 +139,7 @@ public void exceptionsAreMappedCorrectly() {
     }
 
     private static Iterable<Tag> tagsFrom(String uri, int status, String exception) {
-        return Tags.zip(DefaultJerseyTagsProvider.TAG_METHOD, "GET",
+        return Tags.of(DefaultJerseyTagsProvider.TAG_METHOD, "GET",
             DefaultJerseyTagsProvider.TAG_URI, uri, DefaultJerseyTagsProvider.TAG_STATUS,
             String.valueOf(status), DefaultJerseyTagsProvider.TAG_EXCEPTION,
             exception == null ? "None" : exception);

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/export/StepRegistryPropertiesConfigAdapter.java
Patch:
@@ -39,7 +39,7 @@ public String prefix() {
     }
 
     @Override
-    public String get(String k) {
+    public String get(String key) {
         return null;
     }
 

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/export/ganglia/GangliaPropertiesConfigAdapter.java
Patch:
@@ -36,7 +36,7 @@ class GangliaPropertiesConfigAdapter extends PropertiesConfigAdapter<GangliaProp
     }
 
     @Override
-    public String get(String k) {
+    public String get(String key) {
         return null;
     }
 

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/export/graphite/GraphitePropertiesConfigAdapter.java
Patch:
@@ -36,7 +36,7 @@ class GraphitePropertiesConfigAdapter extends PropertiesConfigAdapter<GraphitePr
     }
 
     @Override
-    public String get(String k) {
+    public String get(String key) {
         return null;
     }
 

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/export/jmx/JmxPropertiesConfigAdapter.java
Patch:
@@ -32,7 +32,7 @@ class JmxPropertiesConfigAdapter extends PropertiesConfigAdapter<JmxProperties>
     }
 
     @Override
-    public String get(String k) {
+    public String get(String key) {
         return null;
     }
 

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/export/simple/SimplePropertiesConfigAdapter.java
Patch:
@@ -33,7 +33,7 @@ public SimplePropertiesConfigAdapter(SimpleProperties properties) {
     }
 
     @Override
-    public String get(String k) {
+    public String get(String key) {
         return null;
     }
 

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/export/statsd/StatsdPropertiesConfigAdapter.java
Patch:
@@ -33,7 +33,7 @@ public StatsdPropertiesConfigAdapter(StatsdProperties properties) {
     }
 
     @Override
-    public String get(String s) {
+    public String get(String key) {
         return null;
     }
 

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/cache/ConcurrentMapCacheMetrics.java
Patch:
@@ -46,7 +46,7 @@ public ConcurrentMapCacheMetrics(ConcurrentMapCache cache, String name, Iterable
      * @see com.google.common.cache.CacheStats
      */
     public static ConcurrentMapCache monitor(MeterRegistry registry, ConcurrentMapCache cache, String name, String... tags) {
-        return monitor(registry, cache, name, Tags.zip(tags));
+        return monitor(registry, cache, name, Tags.of(tags));
     }
 
     /**

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/async/ThreadPoolTaskExecutorMetricsTest.java
Patch:
@@ -32,7 +32,7 @@
 
 public class ThreadPoolTaskExecutorMetricsTest {
     private MeterRegistry registry;
-    private Iterable<Tag> userTags = Tags.zip("userTagKey", "userTagValue");
+    private Iterable<Tag> userTags = Tags.of("userTagKey", "userTagValue");
 
     @Before
     public void before() {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/MeterRegistry.java
Patch:
@@ -190,7 +190,7 @@ public Search find(String name) {
         return new Search(this, name);
     }
 
-    public RequiredSearch mustFind(String name) {
+    public RequiredSearch get(String name) {
         return new RequiredSearch(this, name);
     }
 

File: micrometer-core/src/test/java/io/micrometer/core/instrument/MeterRegistryInjectionTest.java
Patch:
@@ -44,7 +44,7 @@ void injectWithSpring() {
         MyComponent component = ctx.getBean(MyComponent.class);
         component.performanceCriticalFeature();
         assertThat(component.registry).isInstanceOf(SimpleMeterRegistry.class);
-        component.registry.mustFind("feature.counter").counter();
+        component.registry.get("feature.counter").counter();
     }
 
 //    @Test
@@ -65,7 +65,7 @@ void injectWithGuice() {
         component.after(); // @PostConstruct is not automatically called
         component.performanceCriticalFeature();
         assertThat(component.registry).isInstanceOf(SimpleMeterRegistry.class);
-        component.registry.mustFind("feature.counter").counter();
+        component.registry.get("feature.counter").counter();
     }
 
     @Test

File: micrometer-core/src/test/java/io/micrometer/core/instrument/MeterRegistryTest.java
Patch:
@@ -48,7 +48,7 @@ void idTransformingMeterFilter() {
         registry.config().meterFilter(MeterFilter.ignoreTags("k1"));
 
         registry.counter("my.counter", "k1", "v1");
-        registry.mustFind("my.counter").counter();
+        registry.get("my.counter").counter();
         assertThat(registry.find("my.counter").tags("k1", "v1").counter()).isNull();
     }
 

File: micrometer-core/src/test/java/io/micrometer/core/instrument/MetricsTest.java
Patch:
@@ -38,6 +38,6 @@ void metricCanBeCreatedBeforeStaticRegistryIsConfigured() {
         Metrics.addRegistry(simple);
         counter.increment();
 
-        assertThat(Metrics.globalRegistry.mustFind("counter").counter().count()).isEqualTo(1.0);
+        assertThat(Metrics.globalRegistry.get("counter").counter().count()).isEqualTo(1.0);
     }
 }

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/cache/EhCache2MetricsTest.java
Patch:
@@ -36,6 +36,6 @@ void cacheExposesMetrics() {
 
         c.put(new Element("k", "v", 1));
 
-        registry.mustFind("ehcache.size").tags("name", "a").gauge();
+        registry.get("ehcache.size").tags("name", "a").gauge();
     }
 }

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/cache/HazelcastCacheMetricsTest.java
Patch:
@@ -52,7 +52,7 @@ void cacheMetrics() {
         map.put("key", "value");
         map.get("key");
 
-        assertThat(registry.mustFind("cache.gets").functionTimer().count()).isEqualTo(1L);
-        assertThat(registry.mustFind("cache.puts").functionTimer().count()).isEqualTo(1L);
+        assertThat(registry.get("cache.gets").functionTimer().count()).isEqualTo(1L);
+        assertThat(registry.get("cache.puts").functionTimer().count()).isEqualTo(1L);
     }
 }

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/cache/JCacheMetricsTest.java
Patch:
@@ -60,6 +60,6 @@ void cacheExposesMetrics(CachingProvider provider) {
         MeterRegistry registry = new SimpleMeterRegistry();
         JCacheMetrics.monitor(registry, cache, "jcache", emptyList());
 
-        assertThat(registry.mustFind("jcache.puts").tags("name", "a").gauge().value()).isEqualTo(1.0);
+        assertThat(registry.get("jcache.puts").tags("name", "a").gauge().value()).isEqualTo(1.0);
     }
 }

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/db/DatabaseTableMetricsTest.java
Patch:
@@ -57,12 +57,12 @@ void shutdown() throws SQLException {
     @Test
     void rowCountGauge() {
         DatabaseTableMetrics.monitor(registry, ds, "foo", "db.table.size");
-        assertThat(registry.mustFind("db.table.size").gauge().value()).isEqualTo(1.0);
+        assertThat(registry.get("db.table.size").gauge().value()).isEqualTo(1.0);
     }
 
     @Test
     void rowCountForNonExistentTable() {
         DatabaseTableMetrics.monitor(registry, ds, "dne", "db.table.size");
-        assertThat(registry.mustFind("db.table.size").gauge().value()).isEqualTo(0.0);
+        assertThat(registry.get("db.table.size").gauge().value()).isEqualTo(0.0);
     }
 }

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/jetty/JettyStatisticsMetricsTest.java
Patch:
@@ -57,7 +57,7 @@ void stats() throws IOException, ServletException {
 
         handler.handle("/testUrl", baseReq, new MockHttpServletRequest(), new MockHttpServletResponse());
 
-        assertThat(registry.mustFind("jetty.requests").functionTimer().count()).isEqualTo(1L);
-        assertThat(registry.mustFind("jetty.responses.size").functionCounter().count()).isEqualTo(772.0);
+        assertThat(registry.get("jetty.requests").functionTimer().count()).isEqualTo(1L);
+        assertThat(registry.get("jetty.responses.size").functionCounter().count()).isEqualTo(772.0);
     }
 }

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/jvm/ClassLoaderMetricsTest.java
Patch:
@@ -27,6 +27,6 @@ void classLoadingMetrics() {
         MeterRegistry registry = new SimpleMeterRegistry();
         new ClassLoaderMetrics().bindTo(registry);
 
-        assertThat(registry.mustFind("jvm.classes.loaded").gauge().value()).isGreaterThan(0);
+        assertThat(registry.get("jvm.classes.loaded").gauge().value()).isGreaterThan(0);
     }
 }

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/jvm/JvmThreadMetricsTest.java
Patch:
@@ -27,8 +27,8 @@ void threadMetrics() {
         MeterRegistry registry = new SimpleMeterRegistry();
         new JvmThreadMetrics().bindTo(registry);
 
-        assertThat(registry.mustFind("jvm.threads.live").gauge().value()).isGreaterThan(0);
-        assertThat(registry.mustFind("jvm.threads.daemon").gauge().value()).isGreaterThan(0);
-        assertThat(registry.mustFind("jvm.threads.peak").gauge().value()).isGreaterThan(0);
+        assertThat(registry.get("jvm.threads.live").gauge().value()).isGreaterThan(0);
+        assertThat(registry.get("jvm.threads.daemon").gauge().value()).isGreaterThan(0);
+        assertThat(registry.get("jvm.threads.peak").gauge().value()).isGreaterThan(0);
     }
 }

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/okhttp3/OkHttpMetricsEventListenerTest.java
Patch:
@@ -47,7 +47,7 @@ void timeSuccessful() throws IOException {
 
         client.newCall(request).execute().close();
 
-        assertThat(registry.mustFind("okhttp.requests")
+        assertThat(registry.get("okhttp.requests")
             .tags("uri", "/helloworld.txt", "status", "200")
             .timer().count()).isEqualTo(1L);
     }
@@ -64,7 +64,7 @@ void timeNotFound() {
             // expected
         }
 
-        assertThat(registry.mustFind("okhttp.requests")
+        assertThat(registry.get("okhttp.requests")
             .tags("uri", "NOT_FOUND")
             .timer().count()).isEqualTo(1L);
     }
@@ -89,7 +89,7 @@ void timeFailureDueToTimeout() {
             // expected
         }
 
-        assertThat(registry.mustFind("okhttp.requests")
+        assertThat(registry.get("okhttp.requests")
             .tags("uri", "UNKNOWN", "status", "IO_ERROR")
             .timer().count()).isEqualTo(1L);
     }

File: micrometer-core/src/test/java/io/micrometer/core/instrument/composite/CompositeCounterTest.java
Patch:
@@ -33,6 +33,6 @@ void increment() {
 
         registry.counter("counter").increment(2.0);
 
-        assertThat(simple.mustFind("counter").counter().count()).isEqualTo(2.0);
+        assertThat(simple.get("counter").counter().count()).isEqualTo(2.0);
     }
 }

File: micrometer-core/src/test/java/io/micrometer/core/instrument/config/PropertyMeterFilterTest.java
Patch:
@@ -75,7 +75,7 @@ void disable() {
     @Test
     void enable() {
         registry.timer("my.timer");
-        registry.mustFind("my.timer").timer();
+        registry.get("my.timer").timer();
     }
 
     @Test

File: micrometer-core/src/test/java/io/micrometer/core/instrument/dropwizard/DropwizardMeterRegistryTest.java
Patch:
@@ -48,7 +48,7 @@ public String get(String k) {
     @Test
     void gaugeOnNullValue() {
         registry.gauge("gauge", emptyList(), null, obj -> 1.0);
-        assertThat(registry.mustFind("gauge").gauge().value()).isEqualTo(Double.NaN);
+        assertThat(registry.get("gauge").gauge().value()).isEqualTo(Double.NaN);
     }
 
     @Test

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/autoconfigure/MeterRegistryCustomizerTest.java
Patch:
@@ -36,7 +36,7 @@ public class MeterRegistryCustomizerTest {
 
     @Test
     public void commonTagsAreAppliedToAutoConfiguredBinders() {
-        registry.mustFind("jvm.memory.used").tags("region", "us-east-1").gauge();
+        registry.get("jvm.memory.used").tags("region", "us-east-1").gauge();
     }
 
     @SpringBootApplication(scanBasePackages = "isolated")

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/autoconfigure/MetricsAutoConfigurationTest.java
Patch:
@@ -76,14 +76,14 @@ public void restTemplateIsInstrumented() {
 
         assertThat(external.getForObject("/api/external", String.class)).isEqualTo("hello");
 
-        assertThat(registry.mustFind("http.client.requests").timer().count()).isEqualTo(1L);
+        assertThat(registry.get("http.client.requests").timer().count()).isEqualTo(1L);
     }
 
     @Test
     public void requestMappingIsInstrumented() {
         loopback.getForObject("/api/people", String.class);
 
-        assertThat(registry.mustFind("http.server.requests").timer().count()).isEqualTo(1L);
+        assertThat(registry.get("http.server.requests").timer().count()).isEqualTo(1L);
     }
 
     @Test
@@ -95,7 +95,7 @@ public void automaticallyRegisteredBinders() {
 
     @Test
     public void registryCustomizersAreAppliedBeforeRegistryIsInjectableElsewhere() {
-        registry.mustFind("my.thing").tags("common", "tag").gauge();
+        registry.get("my.thing").tags("common", "tag").gauge();
     }
 
     @SpringBootApplication(scanBasePackages = "ignored")

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/autoconfigure/web/client/RestTemplateMetricsConfigurationTest.java
Patch:
@@ -65,7 +65,7 @@ public void before() {
     @Test
     public void restTemplatesCreatedWithBuilderAreInstrumented() {
         client.getForObject("/it/1", String.class);
-        registry.mustFind("http.client.requests").meter();
+        registry.get("http.client.requests").meter();
     }
 
     @Test
@@ -75,7 +75,7 @@ public void afterMaxUrisReachedFurtherUrisAreDenied() {
             client.getForObject("/it/" + i, String.class);
         }
 
-        assertThat(registry.mustFind("http.client.requests").meters()).hasSize(maxUriTags);
+        assertThat(registry.get("http.client.requests").meters()).hasSize(maxUriTags);
     }
 
     @SpringBootApplication(scanBasePackages = "ignore")

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/cache/ConcurrentMapCacheMetricsTest.java
Patch:
@@ -32,7 +32,7 @@ public void gaugeCacheSize() {
         MeterRegistry registry = new SimpleMeterRegistry();
         new ConcurrentMapCacheMetrics(cache, "spring.cache", emptyList()).bindTo(registry);
 
-        assertThat(registry.mustFind("spring.cache.size").tags("name", "a")
+        assertThat(registry.get("spring.cache.size").tags("name", "a")
             .gauge().value()).isEqualTo(1.0);
     }
 }

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/filter/PropertiesMeterFilterTest.java
Patch:
@@ -74,7 +74,7 @@ public void enable() {
         props.getEnabled().put("my.timer", true);
         registry.timer("my.timer");
 
-        registry.mustFind("my.timer").timer();
+        registry.get("my.timer").timer();
     }
 
     @Test

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/integration/SpringIntegrationMetricsTest.java
Patch:
@@ -50,10 +50,10 @@ public class SpringIntegrationMetricsTest {
     public void springIntegrationMetrics() {
         converter.fahrenheitToCelcius(68.0f);
 
-        assertThat(registry.mustFind("spring.integration.channel.sends")
+        assertThat(registry.get("spring.integration.channel.sends")
             .tags("channel", "convert.input").functionCounter().count()).isEqualTo(1.0);
-        registry.mustFind("spring.integration.handler.duration.min").meter();
-        registry.mustFind("spring.integration.sourceNames").meter();
+        registry.get("spring.integration.handler.duration.min").meter();
+        registry.get("spring.integration.sourceNames").meter();
     }
 
     @SpringBootApplication

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/jdbc/DataSourceMetricsHikariTest.java
Patch:
@@ -53,7 +53,7 @@ public class DataSourceMetricsHikariTest {
 
     @Test
     public void dataSourceIsInstrumented() {
-        registry.mustFind("data.source.active.connections").meter();
+        registry.get("data.source.active.connections").meter();
     }
 
     @SpringBootApplication(scanBasePackages = "isolated")

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/scheduling/ExecutorServiceMetricsTest.java
Patch:
@@ -48,8 +48,8 @@ public void taskScheduler() {
     }
 
     private void assertThreadPoolExecutorMetrics(String name) {
-        registry.mustFind(name + ".completed").meter();
-        registry.mustFind(name + ".queued").gauge();
-        registry.mustFind(name + ".pool").gauge();
+        registry.get(name + ".completed").meter();
+        registry.get(name + ".queued").gauge();
+        registry.get(name + ".pool").gauge();
     }
 }

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/security/SpringSecurityTest.java
Patch:
@@ -56,7 +56,7 @@ public class SpringSecurityTest {
     public void securityAllowsAccess() throws Exception {
         mvc.perform(get("/api/secured")).andExpect(status().isOk());
 
-        registry.mustFind("http.server.requests")
+        registry.get("http.server.requests")
             .tags("status", "200")
             .timer();
     }
@@ -65,7 +65,7 @@ public void securityAllowsAccess() throws Exception {
     public void securityBlocksAccess() throws Exception {
         mvc.perform(get("/api/secured")).andExpect(status().isUnauthorized());
 
-        registry.mustFind("http.server.requests")
+        registry.get("http.server.requests")
             .tags("status", "401")
             .timer();
     }

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/web/client/MetricsRestTemplateCustomizerTest.java
Patch:
@@ -59,10 +59,10 @@ public void interceptRestTemplate() {
 
         String result = restTemplate.getForObject("/test/{id}", String.class, 123);
 
-        assertThat(registry.mustFind("http.client.requests").meters())
+        assertThat(registry.get("http.client.requests").meters())
             .anySatisfy(m -> assertThat(stream(m.getId().getTags().spliterator(), false).map(Tag::getKey)).doesNotContain("bucket"));
 
-        assertThat(registry.mustFind("http.client.requests")
+        assertThat(registry.get("http.client.requests")
             .tags("method", "GET", "uri", "/test/{id}", "status", "200")
             .timer().count()).isEqualTo(1L);
 

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/web/servlet/MetricsFilterAutoTimedTest.java
Patch:
@@ -64,7 +64,7 @@ public class MetricsFilterAutoTimedTest {
     public void metricsCanBeAutoTimed() throws Exception {
         this.mvc.perform(get("/api/10")).andExpect(status().isOk());
 
-        assertThat(this.registry.mustFind("http.server.requests").tags("status", "200").timer().count()).isEqualTo(1);
+        assertThat(this.registry.get("http.server.requests").tags("status", "200").timer().count()).isEqualTo(1);
     }
 
     @Configuration

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/web/servlet/MetricsFilterCustomExceptionHandlerTest.java
Patch:
@@ -68,7 +68,7 @@ public class MetricsFilterCustomExceptionHandlerTest {
     public void handledExceptionIsRecordedInMetricTag() throws Exception {
         mvc.perform(get("/api/handledError")).andExpect(status().is5xxServerError());
 
-        assertThat(this.registry.mustFind("http.server.requests")
+        assertThat(this.registry.get("http.server.requests")
             .tags("exception", "Exception1", "status", "500").timer().count()).isEqualTo(1L);
     }
 
@@ -77,7 +77,7 @@ public void rethrownExceptionIsRecordedInMetricTag() {
         assertThatCode(() -> mvc.perform(get("/api/rethrownError"))
             .andExpect(status().is5xxServerError()));
 
-        assertThat(this.registry.mustFind("http.server.requests")
+        assertThat(this.registry.get("http.server.requests")
             .tags("exception", "Exception2", "status", "500").timer().count()).isEqualTo(1L);
     }
 

File: micrometer-test/src/main/java/io/micrometer/core/tck/CounterTest.java
Patch:
@@ -68,6 +68,6 @@ default void functionTrackingCounter(MeterRegistry registry) {
 
         clock(registry).add(step());
         registry.forEachMeter(Meter::measure);
-        assertThat(registry.mustFind("tracking").functionCounter().count()).isEqualTo(1.0);
+        assertThat(registry.get("tracking").functionCounter().count()).isEqualTo(1.0);
     }
 }

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/filter/PropertiesMeterFilterIntegrationTest.java
Patch:
@@ -34,8 +34,8 @@
 @RunWith(SpringRunner.class)
 @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.NONE, classes = PropertiesMeterFilterIntegrationTest.MetricsApp.class)
 @TestPropertySource(properties = {
-    "management.metrics.enabled.my.timer=true", /* overriden by programmatic filter */
-    "management.metrics.enabled.my.counter=false"
+    "management.metrics.enabled[my.timer]=true", /* overriden by programmatic filter */
+    "management.metrics.enabled[my.counter]=false"
 })
 public class PropertiesMeterFilterIntegrationTest {
 

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/MeterRegistryPostProcessor.java
Patch:
@@ -22,12 +22,13 @@
 import org.springframework.beans.factory.ObjectProvider;
 import org.springframework.beans.factory.config.BeanPostProcessor;
 import org.springframework.context.annotation.Configuration;
+import org.springframework.stereotype.Component;
 
 import java.util.Collection;
 
 import static java.util.Collections.emptyList;
 
-@Configuration
+@Component
 @NonNullApi
 public class MeterRegistryPostProcessor implements BeanPostProcessor {
     private final MetricsProperties config;

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/autoconfigure/CompositeMeterRegistryConfigurationTest.java
Patch:
@@ -26,6 +26,7 @@
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.test.context.TestPropertySource;
 import org.springframework.test.context.junit4.SpringRunner;
+import org.springframework.test.context.web.WebAppConfiguration;
 
 import static org.assertj.core.api.Assertions.assertThat;
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/AbstractTimer.java
Patch:
@@ -27,8 +27,8 @@
 
 public abstract class AbstractTimer extends AbstractMeter implements Timer {
     protected final Clock clock;
-    private final HistogramConfig histogramConfig;
     protected final TimeWindowLatencyHistogram histogram;
+    private final HistogramConfig histogramConfig;
     private final TimeUnit baseTimeUnit;
 
     protected AbstractTimer(Id id, Clock clock, HistogramConfig histogramConfig, PauseDetector pauseDetector, TimeUnit baseTimeUnit) {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/MeterBinder.java
Patch:
@@ -21,7 +21,7 @@
 /**
  * Binders register one or more metrics to provide information about the state
  * of some aspect of the application or its container.
- *
+ * <p>
  * Binders are enabled by default if they source data for an alert
  * that is recommended for a production ready app.
  */

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/hystrix/MicrometerMetricsPublisherCommand.java
Patch:
@@ -134,7 +134,7 @@ public void initialize() {
                     int count = hystrixCommandCompletion.getEventCounts().getCount(hystrixEventType);
                     if (count > 0) {
                         switch (hystrixEventType) {
-                                /* this list is derived from {@link HystrixCommandMetrics.HealthCounts.plus} */
+                            /* this list is derived from {@link HystrixCommandMetrics.HealthCounts.plus} */
                             case FAILURE:
                             case TIMEOUT:
                             case THREAD_POOL_REJECTED:
@@ -152,9 +152,9 @@ public void initialize() {
                                 break;
                         }
 
-                        if(executionEvents.contains(hystrixEventType)) {
+                        if (executionEvents.contains(hystrixEventType)) {
                             getExecutionCounter(hystrixEventType).increment(count);
-                        } else if(fallbackEvents.contains(hystrixEventType)){
+                        } else if (fallbackEvents.contains(hystrixEventType)) {
                             getFallbackCounter(hystrixEventType).increment(count);
                         } else {
                             getOtherExecutionCounter(hystrixEventType).increment(count);

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jvm/JvmMemoryMetrics.java
Patch:
@@ -33,10 +33,9 @@
 /**
  * Record metrics that report utilization of various memory and buffer pools.
  *
+ * @author Jon Schneider
  * @see MemoryPoolMXBean
  * @see BufferPoolMXBean
- *
- * @author Jon Schneider
  */
 @NonNullApi
 @NonNullFields
@@ -76,7 +75,7 @@ public void bindTo(MeterRegistry registry) {
 
         for (MemoryPoolMXBean memoryPoolBean : ManagementFactory.getPlatformMXBeans(MemoryPoolMXBean.class)) {
             String area = MemoryType.HEAP.equals(memoryPoolBean.getType()) ? "heap" : "nonheap";
-            Iterable<Tag> tagsWithId = Tags.concat(tags,"id", memoryPoolBean.getName(), "area", area);
+            Iterable<Tag> tagsWithId = Tags.concat(tags, "id", memoryPoolBean.getName(), "area", area);
 
             Gauge.builder("jvm.memory.used", memoryPoolBean, (mem) -> mem.getUsage().getUsed())
                 .tags(tagsWithId)

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/logging/LogbackMetrics.java
Patch:
@@ -93,7 +93,7 @@ class MetricsTurboFilter extends TurboFilter {
     @Override
     public FilterReply decide(Marker marker, Logger logger, Level level, String format, Object[] params, Throwable t) {
         // cannot use logger.isEnabledFor(level), as it would cause a StackOverflowError by calling this filter again!
-        if(level.isGreaterOrEqual(logger.getEffectiveLevel()) && format != null) {
+        if (level.isGreaterOrEqual(logger.getEffectiveLevel()) && format != null) {
             switch (level.toInt()) {
                 case Level.ERROR_INT:
                     errorCounter.increment();

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/reactor/ReactorMetrics.java
Patch:
@@ -31,6 +31,9 @@
  * @author Jon Schneider
  */
 public class ReactorMetrics {
+    private static final Predicate<Scannable> POINTCUT_FILTER =
+        s -> !(s instanceof Fuseable.ScalarCallable);
+
     private ReactorMetrics() {
     }
 
@@ -50,7 +53,4 @@ private ReactorMetrics() {
             );
         }));
     }
-
-    private static final Predicate<Scannable> POINTCUT_FILTER =
-        s -> !(s instanceof Fuseable.ScalarCallable);
 }
\ No newline at end of file

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/system/UptimeMetrics.java
Patch:
@@ -61,7 +61,7 @@ public void bindTo(MeterRegistry registry) {
             .description("The uptime of the Java virtual machine")
             .register(registry);
 
-        TimeGauge.builder("process.start.time" ,runtimeMXBean, TimeUnit.MILLISECONDS, x -> Long.valueOf(x.getStartTime()).doubleValue())
+        TimeGauge.builder("process.start.time", runtimeMXBean, TimeUnit.MILLISECONDS, x -> Long.valueOf(x.getStartTime()).doubleValue())
             .tags(tags)
             .description("The start time of the Java virtual machine")
             .register(registry);

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeMeter.java
Patch:
@@ -20,5 +20,6 @@
 
 interface CompositeMeter extends Meter {
     void add(MeterRegistry registry);
+
     void remove(MeterRegistry registry);
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeMeterRegistry.java
Patch:
@@ -105,15 +105,15 @@ protected Meter newMeter(Meter.Id id, Meter.Type type, Iterable<Measurement> mea
     }
 
     public CompositeMeterRegistry add(MeterRegistry registry) {
-        if(registries.add(registry)) {
+        if (registries.add(registry)) {
             // in the event of a race, the new meter will be added to this registry via the onMeterAdded listener
             forEachMeter(m -> ((CompositeMeter) m).add(registry));
         }
         return this;
     }
 
     public CompositeMeterRegistry remove(MeterRegistry registry) {
-        if(registries.remove(registry)) {
+        if (registries.remove(registry)) {
             forEachMeter(m -> ((CompositeMeter) m).remove(registry));
         }
         return this;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeTimeGauge.java
Patch:
@@ -59,8 +59,8 @@ TimeGauge registerNewMeter(MeterRegistry registry) {
         }
 
         return TimeGauge.builder(getId().getName(), obj, fUnit, f)
-                        .tags(getId().getTags())
-                        .description(getId().getDescription())
-                        .register(registry);
+            .tags(getId().getTags())
+            .description(getId().getDescription())
+            .register(registry);
     }
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/cumulative/CumulativeCounter.java
Patch:
@@ -23,7 +23,9 @@
 public class CumulativeCounter extends AbstractMeter implements Counter {
     private final DoubleAdder value;
 
-    /** Create a new instance. */
+    /**
+     * Create a new instance.
+     */
     public CumulativeCounter(Id id) {
         super(id);
         this.value = new DoubleAdder();

File: micrometer-core/src/main/java/io/micrometer/core/instrument/dropwizard/DropwizardFunctionTimer.java
Patch:
@@ -37,10 +37,10 @@ public class DropwizardFunctionTimer<T> extends AbstractMeter implements Functio
     private final TimeUnit totalTimeFunctionUnits;
 
     private final AtomicLong lastCount = new AtomicLong(0);
-    private volatile double lastTime = 0.0;
     private final DropwizardRate rate;
     private final Timer dropwizardMeter;
     private final TimeUnit registryBaseTimeUnit;
+    private volatile double lastTime = 0.0;
 
     DropwizardFunctionTimer(Meter.Id id, Clock clock,
                             T obj, ToLongFunction<T> countFunction,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/simple/SimpleConfig.java
Patch:
@@ -37,10 +37,10 @@ default Duration step() {
 
     default CountingMode mode() {
         String v = get(prefix() + ".mode");
-        if(v == null)
+        if (v == null)
             return CountingMode.Cumulative;
         for (CountingMode countingMode : CountingMode.values()) {
-            if(v.equalsIgnoreCase(countingMode.name()))
+            if (v.equalsIgnoreCase(countingMode.name()))
                 return countingMode;
         }
         throw new IllegalArgumentException("Counting mode must be one of 'cumulative' or 'step' (check property " + prefix() + ".mode)");

File: micrometer-core/src/main/java/io/micrometer/core/instrument/step/StepCounter.java
Patch:
@@ -27,7 +27,9 @@
 public class StepCounter extends AbstractMeter implements Counter {
     private final StepDouble value;
 
-    /** Create a new instance. */
+    /**
+     * Create a new instance.
+     */
     public StepCounter(Id id, Clock clock, long stepMillis) {
         super(id);
         this.value = new StepDouble(clock, stepMillis);

File: micrometer-core/src/main/java/io/micrometer/core/instrument/step/StepDouble.java
Patch:
@@ -29,11 +29,9 @@
 public class StepDouble {
     private final Clock clock;
     private final long stepMillis;
-
-    private volatile double previous = 0.0;
     private final DoubleAdder current = new DoubleAdder();
-
     private final AtomicLong lastInitPos;
+    private volatile double previous = 0.0;
 
     public StepDouble(Clock clock, long stepMillis) {
         this.clock = clock;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/step/StepFunctionCounter.java
Patch:
@@ -38,7 +38,7 @@ public StepFunctionCounter(Id id, Clock clock, long stepMillis, T obj, ToDoubleF
     @Override
     public double count() {
         T obj2 = ref.get();
-        if(obj2 != null) {
+        if (obj2 != null) {
             double prevLast = last;
             last = f.applyAsDouble(obj2);
             count.getCurrent().add(last - prevLast);

File: micrometer-core/src/main/java/io/micrometer/core/instrument/step/StepFunctionTimer.java
Patch:
@@ -60,7 +60,7 @@ public StepFunctionTimer(Id id, Clock clock, long stepMillis, T obj, ToLongFunct
      */
     public double count() {
         T obj2 = ref.get();
-        if(obj2 != null) {
+        if (obj2 != null) {
             long prevLast = lastCount;
             lastCount = countFunction.applyAsLong(obj2);
             count.getCurrent().add(lastCount - prevLast);
@@ -73,7 +73,7 @@ public double count() {
      */
     public double totalTime(TimeUnit unit) {
         T obj2 = ref.get();
-        if(obj2 != null) {
+        if (obj2 != null) {
             double prevLast = lastTime;
             lastTime = TimeUtils.convert(totalTimeFunction.applyAsDouble(obj2), totalTimeFunctionUnits, unit);
             total.getCurrent().add(lastTime - prevLast);

File: micrometer-core/src/main/java/io/micrometer/core/instrument/step/StepLong.java
Patch:
@@ -23,11 +23,9 @@
 public class StepLong {
     private final Clock clock;
     private final long stepMillis;
-
-    private volatile double previous = 0.0;
     private final LongAdder current = new LongAdder();
-
     private final AtomicLong lastInitPos;
+    private volatile double previous = 0.0;
 
     public StepLong(Clock clock, long stepMillis) {
         this.clock = clock;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/util/HierarchicalNameMapper.java
Patch:
@@ -33,7 +33,7 @@ public interface HierarchicalNameMapper {
     HierarchicalNameMapper DEFAULT = (id, convention) -> {
         String tags = "";
 
-        if(id.getTags().iterator().hasNext()) {
+        if (id.getTags().iterator().hasNext()) {
             tags = "." + id.getConventionTags(convention).stream()
                 .map(t -> t.getKey() + "." + t.getValue())
                 .map(nameSegment -> nameSegment.replace(" ", "_"))

File: micrometer-core/src/main/java/io/micrometer/core/instrument/util/MathUtils.java
Patch:
@@ -22,6 +22,9 @@
  */
 public final class MathUtils {
 
+    private MathUtils() {
+    }
+
     /**
      * Simplified {@link com.google.common.math.IntMath#divide(int, int, java.math.RoundingMode)}.
      */
@@ -48,7 +51,4 @@ public static int divideWithCeilingRoundingMode(int p, int q) {
         return increment ? div + signum : div;
     }
 
-    private MathUtils() {
-    }
-
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/util/MeterEquivalence.java
Patch:
@@ -22,9 +22,10 @@
  * @author Jon Schneider
  */
 public final class MeterEquivalence {
-    private MeterEquivalence() {}
+    private MeterEquivalence() {
+    }
 
-    public static boolean equals(@Nullable Meter m1,@Nullable Object o) {
+    public static boolean equals(@Nullable Meter m1, @Nullable Object o) {
         if (m1 == null && o != null) return false;
         if (o == null && m1 != null) return false;
         if (!(o instanceof Meter)) return false;

File: micrometer-core/src/test/java/io/micrometer/core/Issue.java
Patch:
@@ -25,7 +25,7 @@
  *
  * @author Jon Schneider
  */
-@Target({ ElementType.TYPE, ElementType.METHOD })
+@Target({ElementType.TYPE, ElementType.METHOD})
 @Retention(RetentionPolicy.SOURCE)
 public @interface Issue {
     String value();

File: micrometer-core/src/test/java/io/micrometer/core/instrument/MeterRegistryTest.java
Patch:
@@ -72,7 +72,7 @@ public HistogramConfig configure(Meter.Id mappedId, HistogramConfig config) {
                     .merge(config);
             }
         });
-        
+
         registry.timer("my.timer");
     }
 }

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/cache/CaffeineCacheMetricsTest.java
Patch:
@@ -35,7 +35,7 @@ class CaffeineCacheMetricsTest {
     private Iterable<Tag> userTags = Tags.zip("userTagKey", "userTagValue");
 
     @Test
-    void cacheExposesMetricsForHitMissAndEviction() throws Exception {
+    void cacheExposesMetricsForHitMissAndEviction() {
         // Run cleanup in same thread, to remove async behavior with evictions
         Cache<String, String> cache = Caffeine.newBuilder().maximumSize(2).recordStats().executor(Runnable::run).build();
         CaffeineCacheMetrics.monitor(registry, cache, "c", userTags);
@@ -57,7 +57,7 @@ void cacheExposesMetricsForHitMissAndEviction() throws Exception {
 
     @SuppressWarnings("unchecked")
     @Test
-    void loadingCacheExposesMetricsForLoadsAndExceptions() throws Exception {
+    void loadingCacheExposesMetricsForLoadsAndExceptions() {
         LoadingCache<Integer, String> cache = CaffeineCacheMetrics.monitor(registry, Caffeine.newBuilder()
             .recordStats()
             .build(key -> {

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/cache/HazelcastCacheMetricsTest.java
Patch:
@@ -32,13 +32,13 @@ class HazelcastCacheMetricsTest {
     private HazelcastInstance h;
 
     @BeforeEach
-    void setup(){
+    void setup() {
         Config config = new Config();
         h = Hazelcast.newHazelcastInstance(config);
     }
 
     @AfterEach
-    void cleanup(){
+    void cleanup() {
         h.shutdown();
     }
 
@@ -47,7 +47,7 @@ void cacheMetrics() {
         IMap<String, String> map = h.getMap("my-distributed-map");
 
         SimpleMeterRegistry registry = new SimpleMeterRegistry();
-        HazelcastCacheMetrics.monitor(registry, map, "cache",emptyList());
+        HazelcastCacheMetrics.monitor(registry, map, "cache", emptyList());
 
         map.put("key", "value");
         map.get("key");

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/db/DatabaseTableMetricsTest.java
Patch:
@@ -41,15 +41,15 @@ void setup() throws SQLException {
         ds = new JDBCDataSource();
         ds.setURL("jdbc:hsqldb:mem:test");
 
-        try(Connection conn = ds.getConnection()) {
+        try (Connection conn = ds.getConnection()) {
             conn.prepareStatement("CREATE TABLE foo (id int)").execute();
             conn.prepareStatement("INSERT INTO foo VALUES (1)").executeUpdate();
         }
     }
 
     @AfterEach
     void shutdown() throws SQLException {
-        try(Connection conn = ds.getConnection()) {
+        try (Connection conn = ds.getConnection()) {
             conn.prepareStatement("SHUTDOWN").execute();
         }
     }

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/hystrix/MicrometerMetricsPublisherCommandTest.java
Patch:
@@ -82,7 +82,7 @@ private void assertExecutionMetric(SimpleMeterRegistry registry, String eventTyp
                     .functionCounter()
                     .count() == count)
                 .blockLast(Duration.ofSeconds(30));
-        } catch(RuntimeException e) {
+        } catch (RuntimeException e) {
             assertThat(registry.mustFind("hystrix.execution").tags("event", eventType)
                 .functionCounter()
                 .count()).isEqualTo(count);
@@ -91,7 +91,7 @@ private void assertExecutionMetric(SimpleMeterRegistry registry, String eventTyp
 
     @Disabled
     @Test
-    void testOpenCircuit() throws Exception {
+    void testOpenCircuit() {
         HystrixCommandKey key = HystrixCommandKey.Factory.asKey("MicrometerCOMMAND-B");
         HystrixCommandProperties properties = new HystrixPropertiesCommandDefault(key, propertiesSetter.withCircuitBreakerForceOpen(true));
         HystrixCommandMetrics metrics = HystrixCommandMetrics.getInstance(key, groupKey, properties);

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/jetty/JettyStatisticsMetricsTest.java
Patch:
@@ -29,7 +29,6 @@
 
 import javax.servlet.ServletException;
 import java.io.IOException;
-import java.sql.SQLException;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.mock;
@@ -40,7 +39,7 @@ class JettyStatisticsMetricsTest {
     private StatisticsHandler handler;
 
     @BeforeEach
-    void setup() throws SQLException {
+    void setup() {
         this.registry = new SimpleMeterRegistry(SimpleConfig.DEFAULT, new MockClock());
         this.handler = new StatisticsHandler();
         JettyStatisticsMetrics.monitor(registry, handler);
@@ -49,7 +48,8 @@ void setup() throws SQLException {
     @Test
     void stats() throws IOException, ServletException {
         Request baseReq = mock(Request.class);
-        HttpChannelState s = new HttpChannelState(null){};
+        HttpChannelState s = new HttpChannelState(null) {
+        };
         when(baseReq.getHttpChannelState()).thenReturn(s);
         Response resp = mock(Response.class);
         when(baseReq.getResponse()).thenReturn(resp);

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/okhttp3/OkHttpMetricsEventListenerTest.java
Patch:
@@ -60,7 +60,7 @@ void timeNotFound() {
 
         try {
             client.newCall(request).execute().close();
-        } catch(IOException ignore) {
+        } catch (IOException ignore) {
             // expected
         }
 
@@ -85,7 +85,7 @@ void timeFailureDueToTimeout() {
 
         try {
             client.newCall(request).execute().close();
-        } catch(IOException ignored) {
+        } catch (IOException ignored) {
             // expected
         }
 

File: micrometer-core/src/test/java/io/micrometer/core/instrument/composite/CompositeMeterRegistryTest.java
Patch:
@@ -204,7 +204,7 @@ void histogramConfigDefaultIsNotAffectedByComposite() {
     }
 
     @Test
-    void compositePauseDetectorConfigOverridesChild() throws InterruptedException {
+    void compositePauseDetectorConfigOverridesChild() {
         composite.add(simple);
 
         CountDownLatch count = new CountDownLatch(1);

File: micrometer-core/src/test/java/io/micrometer/core/instrument/config/PropertyMeterFilterTest.java
Patch:
@@ -50,7 +50,8 @@ public <V> V get(String k, Class<V> vClass) {
         }
     };
 
-    @Nullable private HistogramConfig histogramConfig;
+    @Nullable
+    private HistogramConfig histogramConfig;
 
     private MeterRegistry registry = new SimpleMeterRegistry(SimpleConfig.DEFAULT, new MockClock()) {
         @Override

File: micrometer-core/src/test/java/io/micrometer/core/instrument/histogram/TimeWindowLatencyHistogramTest.java
Patch:
@@ -69,7 +69,7 @@ void recordValuesThatExceedTheDynamicRange() {
     void percentiles() {
         TimeWindowLatencyHistogram histogram = new TimeWindowLatencyHistogram(new MockClock(), HistogramConfig.DEFAULT, noPause);
 
-        for(int i = 1; i <= 10; i++) {
+        for (int i = 1; i <= 10; i++) {
             histogram.recordLong((long) millisToUnit(i, TimeUnit.NANOSECONDS));
         }
 
@@ -88,14 +88,14 @@ void percentilesWithNoSamples() {
     void percentilesChangeWithMoreRecentSamples() {
         TimeWindowLatencyHistogram histogram = new TimeWindowLatencyHistogram(new MockClock(), HistogramConfig.DEFAULT, noPause);
 
-        for(int i = 1; i <= 10; i++) {
+        for (int i = 1; i <= 10; i++) {
             histogram.recordLong((long) millisToUnit(i, TimeUnit.NANOSECONDS));
         }
 
         // baseline median
         assertThat(nanosToUnit(histogram.percentile(0.50), TimeUnit.MILLISECONDS)).isEqualTo(5, Offset.offset(0.1));
 
-        for(int i = 11; i <= 20; i++) {
+        for (int i = 11; i <= 20; i++) {
             histogram.recordLong((long) millisToUnit(i, TimeUnit.NANOSECONDS));
         }
 

File: micrometer-core/src/test/java/io/micrometer/core/instrument/util/TimeUtilsTest.java
Patch:
@@ -21,7 +21,6 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.assertThatThrownBy;
-import static org.junit.jupiter.api.Assertions.*;
 
 class TimeUtilsTest {
     @Test
@@ -41,7 +40,7 @@ void simpleParseHandlesSpacesCommasAndUnderscores() {
     }
 
     @Test
-    void cantParseDecimal(){
+    void cantParseDecimal() {
         assertThatThrownBy(() -> TimeUtils.simpleParse("1.1s"))
             .isInstanceOf(NumberFormatException.class);
     }

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/jdbc/DataSourceMetricsHikariTest.java
Patch:
@@ -30,7 +30,6 @@
 import org.springframework.test.context.junit4.SpringRunner;
 
 import javax.sql.DataSource;
-import java.sql.SQLException;
 import java.util.Collection;
 
 import static java.util.Collections.emptyList;
@@ -43,7 +42,6 @@
 @TestPropertySource(properties = {
     "spring.datasource.generate-unique-name=true",
     "management.security.enabled=false",
-    "management.metrics.useGlobalRegistry=false",
     "spring.datasource.type=com.zaxxer.hikari.HikariDataSource"
 })
 public class DataSourceMetricsHikariTest {
@@ -54,7 +52,7 @@ public class DataSourceMetricsHikariTest {
     MeterRegistry registry;
 
     @Test
-    public void dataSourceIsInstrumented() throws SQLException, InterruptedException {
+    public void dataSourceIsInstrumented() {
         registry.mustFind("data.source.active.connections").meter();
     }
 

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/jdbc/DataSourceMetricsTest.java
Patch:
@@ -43,7 +43,6 @@
 @TestPropertySource(properties = {
     "spring.datasource.generate-unique-name=true",
     "management.security.enabled=false",
-    "management.metrics.useGlobalRegistry=false",
     "spring.datasource.type=org.apache.tomcat.jdbc.pool.DataSource"
 })
 public class DataSourceMetricsTest {
@@ -54,7 +53,7 @@ public class DataSourceMetricsTest {
     MeterRegistry registry;
 
     @Test
-    public void dataSourceIsInstrumented() throws SQLException, InterruptedException {
+    public void dataSourceIsInstrumented() throws SQLException {
         dataSource.getConnection().getMetaData();
         registry.find("data.source.max.connections").meter();
     }

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/scheduling/ScheduledMethodMetricsTest.java
Patch:
@@ -28,7 +28,6 @@
 import org.springframework.scheduling.annotation.EnableScheduling;
 import org.springframework.scheduling.annotation.Scheduled;
 import org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;
-import org.springframework.test.context.TestPropertySource;
 import org.springframework.test.context.junit4.SpringRunner;
 
 import java.util.concurrent.CountDownLatch;
@@ -37,7 +36,6 @@
 
 @RunWith(SpringRunner.class)
 @SpringBootTest
-@TestPropertySource(properties = "management.metrics.useGlobalRegistry=false")
 @Ignore("Race condition still...")
 public class ScheduledMethodMetricsTest {
 

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/web/servlet/MetricsFilterCustomExceptionHandlerTest.java
Patch:
@@ -73,7 +73,7 @@ public void handledExceptionIsRecordedInMetricTag() throws Exception {
     }
 
     @Test
-    public void rethrownExceptionIsRecordedInMetricTag() throws Exception {
+    public void rethrownExceptionIsRecordedInMetricTag() {
         assertThatCode(() -> mvc.perform(get("/api/rethrownError"))
             .andExpect(status().is5xxServerError()));
 
@@ -126,14 +126,14 @@ static class Exception2 extends RuntimeException {
     static class CustomExceptionHandler {
 
         @ExceptionHandler
-        ResponseEntity<String> handleError(Exception1 ex) throws Throwable {
+        ResponseEntity<String> handleError(Exception1 ex) {
             MetricsFilter.tagWithException(ex);
             return new ResponseEntity<>("this is a custom exception body",
                 HttpStatus.INTERNAL_SERVER_ERROR);
         }
 
         @ExceptionHandler
-        ResponseEntity<String> rethrowError(Exception2 ex) throws Throwable {
+        ResponseEntity<String> rethrowError(Exception2 ex) {
             throw ex;
         }
     }

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/web/servlet/MetricsFilterTest.java
Patch:
@@ -160,7 +160,7 @@ public void notFoundRequest() throws Exception {
     }
 
     @Test
-    public void unhandledError() throws Exception {
+    public void unhandledError() {
         assertThatCode(() -> mvc.perform(get("/api/c1/unhandledError/10"))
             .andExpect(status().isOk()))
             .hasRootCauseInstanceOf(RuntimeException.class);
@@ -409,7 +409,7 @@ CompletableFuture<String> asyncCompletableFuture(@PathVariable Long id) throws E
         @Timed
         @Timed(value = "my.long.request.exception", longTask = true)
         @GetMapping("/completableFutureException")
-        CompletableFuture<String> asyncCompletableFutureException() throws Exception {
+        CompletableFuture<String> asyncCompletableFutureException() {
             return CompletableFuture.supplyAsync(() -> {
                 throw new RuntimeException("boom");
             });

File: micrometer-test/src/main/java/io/micrometer/core/tck/TimerTest.java
Patch:
@@ -87,7 +87,7 @@ default void recordZero(MeterRegistry registry) {
 
     @Test
     @DisplayName("record a runnable task")
-    default void recordWithRunnable(MeterRegistry registry) throws Exception {
+    default void recordWithRunnable(MeterRegistry registry) {
         Timer t = registry.timer("myTimer");
 
         try {
@@ -101,7 +101,7 @@ default void recordWithRunnable(MeterRegistry registry) throws Exception {
 
     @Test
     @DisplayName("record with stateful Sample instance")
-    default void recordWithSample(MeterRegistry registry) throws Exception {
+    default void recordWithSample(MeterRegistry registry) {
         Timer timer = registry.timer("myTimer");
         Timer.Sample sample = Timer.start(registry);
 

File: samples/micrometer-samples-boot2/src/main/java/io/micrometer/boot2/samples/AtlasSample.java
Patch:
@@ -15,12 +15,11 @@
  */
 package io.micrometer.boot2.samples;
 
+import io.micrometer.boot2.samples.components.PersonController;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.builder.SpringApplicationBuilder;
 import org.springframework.scheduling.annotation.EnableScheduling;
 
-import io.micrometer.boot2.samples.components.PersonController;
-
 @SpringBootApplication(scanBasePackageClasses = PersonController.class)
 @EnableScheduling
 public class AtlasSample {

File: samples/micrometer-samples-boot2/src/main/java/io/micrometer/boot2/samples/DatadogSample.java
Patch:
@@ -15,12 +15,11 @@
  */
 package io.micrometer.boot2.samples;
 
+import io.micrometer.boot2.samples.components.PersonController;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.builder.SpringApplicationBuilder;
 import org.springframework.scheduling.annotation.EnableScheduling;
 
-import io.micrometer.boot2.samples.components.PersonController;
-
 @SpringBootApplication(scanBasePackageClasses = PersonController.class)
 @EnableScheduling
 public class DatadogSample {

File: samples/micrometer-samples-boot2/src/main/java/io/micrometer/boot2/samples/InfluxSample.java
Patch:
@@ -15,12 +15,11 @@
  */
 package io.micrometer.boot2.samples;
 
+import io.micrometer.boot2.samples.components.PersonController;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.builder.SpringApplicationBuilder;
 import org.springframework.scheduling.annotation.EnableScheduling;
 
-import io.micrometer.boot2.samples.components.PersonController;
-
 @SpringBootApplication(scanBasePackageClasses = PersonController.class)
 @EnableScheduling
 public class InfluxSample {

File: samples/micrometer-samples-boot2/src/main/java/io/micrometer/boot2/samples/JmxSample.java
Patch:
@@ -15,12 +15,11 @@
  */
 package io.micrometer.boot2.samples;
 
+import io.micrometer.boot2.samples.components.PersonController;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.builder.SpringApplicationBuilder;
 import org.springframework.scheduling.annotation.EnableScheduling;
 
-import io.micrometer.boot2.samples.components.PersonController;
-
 @SpringBootApplication(scanBasePackageClasses = PersonController.class)
 @EnableScheduling
 public class JmxSample {

File: samples/micrometer-samples-boot2/src/main/java/io/micrometer/boot2/samples/NewRelicSample.java
Patch:
@@ -15,12 +15,11 @@
  */
 package io.micrometer.boot2.samples;
 
+import io.micrometer.boot2.samples.components.PersonController;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.builder.SpringApplicationBuilder;
 import org.springframework.scheduling.annotation.EnableScheduling;
 
-import io.micrometer.boot2.samples.components.PersonController;
-
 @SpringBootApplication(scanBasePackageClasses = PersonController.class)
 @EnableScheduling
 public class NewRelicSample {

File: samples/micrometer-samples-boot2/src/main/java/io/micrometer/boot2/samples/PrometheusSample.java
Patch:
@@ -16,13 +16,12 @@
 package io.micrometer.boot2.samples;
 
 import com.netflix.hystrix.contrib.javanica.aop.aspectj.HystrixCommandAspect;
+import io.micrometer.boot2.samples.components.PersonController;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.builder.SpringApplicationBuilder;
 import org.springframework.context.annotation.Bean;
 import org.springframework.scheduling.annotation.EnableScheduling;
 
-import io.micrometer.boot2.samples.components.PersonController;
-
 @SpringBootApplication(scanBasePackageClasses = PersonController.class)
 @EnableScheduling
 public class PrometheusSample {

File: samples/micrometer-samples-boot2/src/main/java/io/micrometer/boot2/samples/SignalfxSample.java
Patch:
@@ -15,12 +15,11 @@
  */
 package io.micrometer.boot2.samples;
 
+import io.micrometer.boot2.samples.components.PersonController;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.builder.SpringApplicationBuilder;
 import org.springframework.scheduling.annotation.EnableScheduling;
 
-import io.micrometer.boot2.samples.components.PersonController;
-
 @SpringBootApplication(scanBasePackageClasses = PersonController.class)
 @EnableScheduling
 public class SignalfxSample {

File: samples/micrometer-samples-boot2/src/main/java/io/micrometer/boot2/samples/SimpleSample.java
Patch:
@@ -15,15 +15,14 @@
  */
 package io.micrometer.boot2.samples;
 
+import io.micrometer.boot2.samples.components.PersonController;
+import io.micrometer.core.instrument.histogram.pause.NoPauseDetector;
 import org.springframework.boot.actuate.autoconfigure.metrics.MeterRegistryConfigurer;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.builder.SpringApplicationBuilder;
 import org.springframework.context.annotation.Bean;
 import org.springframework.scheduling.annotation.EnableScheduling;
 
-import io.micrometer.boot2.samples.components.PersonController;
-import io.micrometer.core.instrument.histogram.pause.NoPauseDetector;
-
 @SpringBootApplication(scanBasePackageClasses = PersonController.class)
 @EnableScheduling
 public class SimpleSample {

File: samples/micrometer-samples-boot2/src/main/java/io/micrometer/boot2/samples/StatsdDatadogSample.java
Patch:
@@ -15,12 +15,11 @@
  */
 package io.micrometer.boot2.samples;
 
+import io.micrometer.boot2.samples.components.PersonController;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.builder.SpringApplicationBuilder;
 import org.springframework.scheduling.annotation.EnableScheduling;
 
-import io.micrometer.boot2.samples.components.PersonController;
-
 @SpringBootApplication(scanBasePackageClasses = PersonController.class)
 @EnableScheduling
 public class StatsdDatadogSample {

File: samples/micrometer-samples-boot2/src/main/java/io/micrometer/boot2/samples/StatsdTelegrafSample.java
Patch:
@@ -15,12 +15,11 @@
  */
 package io.micrometer.boot2.samples;
 
+import io.micrometer.boot2.samples.components.PersonController;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.builder.SpringApplicationBuilder;
 import org.springframework.scheduling.annotation.EnableScheduling;
 
-import io.micrometer.boot2.samples.components.PersonController;
-
 @SpringBootApplication(scanBasePackageClasses = PersonController.class)
 @EnableScheduling
 public class StatsdTelegrafSample {

File: samples/micrometer-samples-core/src/main/java/io/micrometer/core/samples/UptimeMetricsSample.java
Patch:
@@ -19,13 +19,11 @@
 import io.micrometer.core.instrument.binder.system.UptimeMetrics;
 import io.micrometer.core.samples.utils.SampleConfig;
 
-import java.io.IOException;
-
 /**
  * Sample to diagnose issue #243
  */
 public class UptimeMetricsSample {
-    public static void main(String[] args) throws IOException {
+    public static void main(String[] args) {
         MeterRegistry registry = SampleConfig.myMonitoringSystem();
         registry.config().commonTags("instance", "sample-host");
         new UptimeMetrics().bindTo(registry);

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/hystrix/MicrometerMetricsPublisherCommand.java
Patch:
@@ -69,7 +69,7 @@ public class MicrometerMetricsPublisherCommand implements HystrixMetricsPublishe
     private final MeterRegistry meterRegistry;
     private final HystrixCommandMetrics metrics;
     private final HystrixCircuitBreaker circuitBreaker;
-    private final List<Tag> tags;
+    private final Iterable<Tag> tags;
     private final HystrixCommandKey commandKey;
 
     public MicrometerMetricsPublisherCommand(MeterRegistry meterRegistry, HystrixCommandKey commandKey, HystrixCommandGroupKey commandGroupKey, HystrixCommandMetrics metrics, HystrixCircuitBreaker circuitBreaker, HystrixCommandProperties properties) {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/okhttp3/OkHttpMetricsEventListener.java
Patch:
@@ -29,7 +29,6 @@
 
 import java.io.IOException;
 import java.util.Collections;
-import java.util.List;
 import java.util.Optional;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
@@ -138,14 +137,14 @@ public static class Builder {
         private MeterRegistry registry;
         private String name;
         private Function<Request, String> uriMapper = (request) -> Optional.ofNullable(request.header(URI_PATTERN)).orElse("none");
-        private List<Tag> tags = Collections.emptyList();
+        private Iterable<Tag> tags = Collections.emptyList();
 
         Builder(MeterRegistry registry, String name) {
             this.registry = registry;
             this.name = name;
         }
 
-        public Builder tags(List<Tag> tags) {
+        public Builder tags(Iterable<Tag> tags) {
             this.tags = tags;
             return this;
         }

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/hystrix/MicrometerMetricsPublisherCommandTest.java
Patch:
@@ -25,7 +25,6 @@
 import reactor.core.publisher.Flux;
 
 import java.time.Duration;
-import java.util.List;
 
 import static org.assertj.core.api.Assertions.assertThat;
 
@@ -67,7 +66,7 @@ void testCumulativeCounters() throws Exception {
             new SuccessCommand(key).execute();
         }
 
-        List<Tag> tags = Tags.zip("group", "MicrometerGROUP", "key", "MicrometerCOMMAND-A");
+        Iterable<Tag> tags = Tags.zip("group", "MicrometerGROUP", "key", "MicrometerCOMMAND-A");
 
         assertExecutionMetric(registry, "success", 24.0);
         assertThat(registry.mustFind("hystrix.execution").tags(tags).tags("event", "timeout").functionCounter().count()).isEqualTo(3.0);
@@ -108,7 +107,7 @@ void testOpenCircuit() throws Exception {
         new FailureCommand(key).execute();
         new SuccessCommand(key).execute();
 
-        List<Tag> tags = Tags.zip("group", groupKey.name(), "key", key.name());
+        Iterable<Tag> tags = Tags.zip("group", groupKey.name(), "key", key.name());
 
         assertExecutionMetric(registry, "short_circuited", 6.0);
         assertThat(registry.mustFind("hystrix.execution").tags(tags).tags("event", "success").functionCounter().count()).isEqualTo(0.0);

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/tomcat/TomcatMetricsTest.java
Patch:
@@ -31,7 +31,6 @@
 import org.junit.jupiter.api.Test;
 
 import java.io.IOException;
-import java.util.List;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
 
@@ -82,7 +81,7 @@ public Context getContext() {
         expiredSession.setCreationTime(System.currentTimeMillis() - 10_000);
         manager.remove(expiredSession, true);
 
-        List<Tag> tags = Tags.zip("metricTag", "val1");
+        Iterable<Tag> tags = Tags.zip("metricTag", "val1");
         TomcatMetrics.monitor(registry, manager, tags);
 
         assertThat(registry.mustFind("tomcat.sessions.active.max").tags(tags).gauge().value()).isEqualTo(3.0);

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/MeterRegistryCustomizer.java
Patch:
@@ -30,13 +30,12 @@
  */
 @FunctionalInterface
 @NonNullApi
-public interface MeterRegistryConfigurer {
+public interface MeterRegistryCustomizer {
 
     /**
      * Configure the given {@code registry}.
      *
      * @param registry the registry to configure
      */
     void configureRegistry(MeterRegistry registry);
-
 }

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/jersey2/server/JerseyServerMetricsConfiguration.java
Patch:
@@ -51,7 +51,7 @@ public DefaultJerseyTagsProvider jerseyTagsProvider() {
 
     @Bean
     public ResourceConfigCustomizer jerseyResourceConfigCustomizer(MeterRegistry meterRegistry,
-            JerseyServerMetricsProperties properties, JerseyTagsProvider tagsProvider) {
+                                                                   JerseyServerMetricsProperties properties, JerseyTagsProvider tagsProvider) {
         return (config) -> config.register(new MetricsApplicationEventListener(meterRegistry, tagsProvider,
             properties.getRequestsMetricName(), properties.isAutoTimeRequests(),
             new AnnotationFinder() {

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/web/servlet/ServletMetricsConfiguration.java
Patch:
@@ -52,8 +52,8 @@ public MetricsFilter webMetricsFilter(MeterRegistry registry, MetricsProperties
                                           ServletTagsProvider tagsProvider,
                                           WebApplicationContext ctx) {
         return new MetricsFilter(registry, tagsProvider,
-                properties.getWeb().getServer().getRequestsMetricName(),
-                properties.getWeb().getServer().isAutoTimeRequests(),
-                new HandlerMappingIntrospector(ctx));
+            properties.getWeb().getServer().getRequestsMetricName(),
+            properties.getWeb().getServer().isAutoTimeRequests(),
+            new HandlerMappingIntrospector(ctx));
     }
 }

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/integration/SpringIntegrationMetrics.java
Patch:
@@ -35,9 +35,8 @@
 @NonNullFields
 public class SpringIntegrationMetrics implements MeterBinder, SmartInitializingSingleton {
     private final Iterable<Tag> tags;
-    private Collection<MeterRegistry> registries = new ArrayList<>();
-
     private final IntegrationManagementConfigurer configurer;
+    private Collection<MeterRegistry> registries = new ArrayList<>();
 
     public SpringIntegrationMetrics(IntegrationManagementConfigurer configurer) {
         this(configurer, emptyList());
@@ -60,7 +59,7 @@ public void bindTo(MeterRegistry registry) {
             .description("The number of spring integration handlers")
             .register(registry);
 
-        Gauge.builder("spring.integration.sourceNames" ,configurer, c -> c.getSourceNames().length)
+        Gauge.builder("spring.integration.sourceNames", configurer, c -> c.getSourceNames().length)
             .tags(tags)
             .description("The number of spring integration sources")
             .register(registry);

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/jdbc/DataSourceMetrics.java
Patch:
@@ -35,7 +35,8 @@
 @NonNullFields
 public class DataSourceMetrics implements MeterBinder {
     private final DataSource dataSource;
-    @Nullable private final DataSourcePoolMetadata poolMetadata;
+    @Nullable
+    private final DataSourcePoolMetadata poolMetadata;
     private final String name;
     private final Iterable<Tag> tags;
 

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/web/client/MetricsClientHttpRequestInterceptor.java
Patch:
@@ -94,7 +94,7 @@ private Timer.Builder getTimeBuilder(HttpRequest request,
     // This normalization improves tag value matching when one code path requests test/{id} and another
     // requests /test/{id}
     private String ensureLeadingSlash(@Nullable String url) {
-        if(url == null)
+        if (url == null)
             return "/";
         return url.startsWith("/") ? url : "/" + url;
     }

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/web/client/MetricsRestTemplateCustomizer.java
Patch:
@@ -40,9 +40,9 @@ public class MetricsRestTemplateCustomizer implements RestTemplateCustomizer {
      * the given {@code meterRegistry} with tags provided by the given
      * {@code tagProvider}.
      *
-     * @param meterRegistry     the meter registry
-     * @param tagProvider       the tag provider
-     * @param metricName        the name of the recorded metric
+     * @param meterRegistry the meter registry
+     * @param tagProvider   the tag provider
+     * @param metricName    the name of the recorded metric
      */
     public MetricsRestTemplateCustomizer(MeterRegistry meterRegistry,
                                          RestTemplateExchangeTagsProvider tagProvider, String metricName) {

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/SpringEnvironmentMeterFilterTest.java
Patch:
@@ -100,7 +100,7 @@ public void summaryHistogramConfig() {
     }
 
     @Test
-    public void configErrorMessage(){
+    public void configErrorMessage() {
         assertThatThrownBy(() -> registry.timer("my.timer.that.is.misconfigured"))
             .isInstanceOf(ConfigurationException.class)
             .hasMessage("Invalid configuration for 'my.timer.that.is.misconfigured.enabled' value 'troo' as class java.lang.Boolean");

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/scheduling/ScheduledMethodMetricsTest.java
Patch:
@@ -55,7 +55,8 @@ public class ScheduledMethodMetricsTest {
     @Test
     public void shortTasksAreInstrumented() throws InterruptedException {
         shortBeepsExecuted.await();
-        while(scheduler.getActiveCount() > 0) {}
+        while (scheduler.getActiveCount() > 0) {
+        }
 
         assertThat(registry.mustFind("beeper").timer().count()).isEqualTo(1L);
         registry.mustFind("beeper").tags("percentile", "50").gauge();

File: micrometer-test/src/main/java/io/micrometer/core/tck/RegistryResolver.java
Patch:
@@ -53,7 +53,8 @@ public Object resolveParameter(ParameterContext parameterContext, ExtensionConte
                     break;
                 }
             } while ((clazz = clazz.getEnclosingClass()) != null);
-        } catch (IllegalAccessException | InvocationTargetException ignored) {
+        } catch (IllegalAccessException | InvocationTargetException e) {
+            e.printStackTrace();
         }
         fail("This should never happen -- an implementation of registry() was not found");
         return null;

File: samples/micrometer-samples-boot1/src/main/java/io/micrometer/boot1/samples/AtlasSample.java
Patch:
@@ -15,11 +15,12 @@
  */
 package io.micrometer.boot1.samples;
 
+import io.micrometer.boot1.samples.components.PersonController;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.builder.SpringApplicationBuilder;
 import org.springframework.scheduling.annotation.EnableScheduling;
 
-@SpringBootApplication(scanBasePackages = "io.micrometer.boot1.samples.components")
+@SpringBootApplication(scanBasePackageClasses = PersonController.class)
 @EnableScheduling
 public class AtlasSample {
     public static void main(String[] args) {

File: samples/micrometer-samples-boot1/src/main/java/io/micrometer/boot1/samples/DatadogSample.java
Patch:
@@ -15,11 +15,12 @@
  */
 package io.micrometer.boot1.samples;
 
+import io.micrometer.boot1.samples.components.PersonController;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.builder.SpringApplicationBuilder;
 import org.springframework.scheduling.annotation.EnableScheduling;
 
-@SpringBootApplication(scanBasePackages = "io.micrometer.boot1.samples.components")
+@SpringBootApplication(scanBasePackageClasses = PersonController.class)
 @EnableScheduling
 public class DatadogSample {
     public static void main(String[] args) {

File: samples/micrometer-samples-boot1/src/main/java/io/micrometer/boot1/samples/InfluxSample.java
Patch:
@@ -15,11 +15,12 @@
  */
 package io.micrometer.boot1.samples;
 
+import io.micrometer.boot1.samples.components.PersonController;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.builder.SpringApplicationBuilder;
 import org.springframework.scheduling.annotation.EnableScheduling;
 
-@SpringBootApplication(scanBasePackages = "io.micrometer.boot1.samples.components")
+@SpringBootApplication(scanBasePackageClasses = PersonController.class)
 @EnableScheduling
 public class InfluxSample {
     public static void main(String[] args) {

File: samples/micrometer-samples-boot1/src/main/java/io/micrometer/boot1/samples/JmxSample.java
Patch:
@@ -15,11 +15,12 @@
  */
 package io.micrometer.boot1.samples;
 
+import io.micrometer.boot1.samples.components.PersonController;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.builder.SpringApplicationBuilder;
 import org.springframework.scheduling.annotation.EnableScheduling;
 
-@SpringBootApplication(scanBasePackages = "io.micrometer.boot1.samples.components")
+@SpringBootApplication(scanBasePackageClasses = PersonController.class)
 @EnableScheduling
 public class JmxSample {
     public static void main(String[] args) {

File: samples/micrometer-samples-boot1/src/main/java/io/micrometer/boot1/samples/NewRelicSample.java
Patch:
@@ -15,11 +15,12 @@
  */
 package io.micrometer.boot1.samples;
 
+import io.micrometer.boot1.samples.components.PersonController;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.builder.SpringApplicationBuilder;
 import org.springframework.scheduling.annotation.EnableScheduling;
 
-@SpringBootApplication(scanBasePackages = "io.micrometer.boot1.samples.components")
+@SpringBootApplication(scanBasePackageClasses = PersonController.class)
 @EnableScheduling
 public class NewRelicSample {
     public static void main(String[] args) {

File: samples/micrometer-samples-boot1/src/main/java/io/micrometer/boot1/samples/PrometheusSample.java
Patch:
@@ -16,20 +16,21 @@
 package io.micrometer.boot1.samples;
 
 import com.netflix.hystrix.contrib.javanica.aop.aspectj.HystrixCommandAspect;
+import io.micrometer.boot1.samples.components.PersonController;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.builder.SpringApplicationBuilder;
 import org.springframework.context.annotation.Bean;
 import org.springframework.scheduling.annotation.EnableScheduling;
 
-@SpringBootApplication(scanBasePackages = "io.micrometer.boot1.samples.components")
+@SpringBootApplication(scanBasePackageClasses = PersonController.class)
 @EnableScheduling
 public class PrometheusSample {
     public static void main(String[] args) {
         new SpringApplicationBuilder(PrometheusSample.class).profiles("prometheus").run(args);
     }
 
     @Bean
-    public HystrixCommandAspect hystrixAspect(){
+    public HystrixCommandAspect hystrixAspect() {
         return new HystrixCommandAspect();
     }
 

File: samples/micrometer-samples-boot1/src/main/java/io/micrometer/boot1/samples/SignalfxSample.java
Patch:
@@ -15,11 +15,12 @@
  */
 package io.micrometer.boot1.samples;
 
+import io.micrometer.boot1.samples.components.PersonController;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.builder.SpringApplicationBuilder;
 import org.springframework.scheduling.annotation.EnableScheduling;
 
-@SpringBootApplication(scanBasePackages = "io.micrometer.boot1.samples.components")
+@SpringBootApplication(scanBasePackageClasses = PersonController.class)
 @EnableScheduling
 public class SignalfxSample {
     public static void main(String[] args) {

File: samples/micrometer-samples-boot1/src/main/java/io/micrometer/boot1/samples/SimpleSample.java
Patch:
@@ -15,14 +15,15 @@
  */
 package io.micrometer.boot1.samples;
 
+import io.micrometer.boot1.samples.components.PersonController;
 import io.micrometer.core.instrument.histogram.pause.NoPauseDetector;
 import io.micrometer.spring.autoconfigure.MeterRegistryConfigurer;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.builder.SpringApplicationBuilder;
 import org.springframework.context.annotation.Bean;
 import org.springframework.scheduling.annotation.EnableScheduling;
 
-@SpringBootApplication(scanBasePackages = "io.micrometer.boot1.samples.components")
+@SpringBootApplication(scanBasePackageClasses = PersonController.class)
 @EnableScheduling
 public class SimpleSample {
     public static void main(String[] args) {

File: samples/micrometer-samples-boot1/src/main/java/io/micrometer/boot1/samples/StatsdDatadogSample.java
Patch:
@@ -15,11 +15,12 @@
  */
 package io.micrometer.boot1.samples;
 
+import io.micrometer.boot1.samples.components.PersonController;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.builder.SpringApplicationBuilder;
 import org.springframework.scheduling.annotation.EnableScheduling;
 
-@SpringBootApplication(scanBasePackages = "io.micrometer.boot1.samples.components")
+@SpringBootApplication(scanBasePackageClasses = PersonController.class)
 @EnableScheduling
 public class StatsdDatadogSample {
     public static void main(String[] args) {

File: samples/micrometer-samples-boot1/src/main/java/io/micrometer/boot1/samples/StatsdTelegrafSample.java
Patch:
@@ -15,11 +15,12 @@
  */
 package io.micrometer.boot1.samples;
 
+import io.micrometer.boot1.samples.components.PersonController;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.builder.SpringApplicationBuilder;
 import org.springframework.scheduling.annotation.EnableScheduling;
 
-@SpringBootApplication(scanBasePackages = "io.micrometer.boot1.samples.components")
+@SpringBootApplication(scanBasePackageClasses = PersonController.class)
 @EnableScheduling
 public class StatsdTelegrafSample {
     public static void main(String[] args) {

File: samples/micrometer-samples-boot1/src/main/java/io/micrometer/boot1/samples/components/PersonController.java
Patch:
@@ -28,7 +28,7 @@
 
 @RestController
 public class PersonController {
-    private List<String> people = Arrays.asList("mike", "suzy");
+    private final List<String> people = Arrays.asList("mike", "suzy");
     private final MeterRegistry registry;
 
     public PersonController(MeterRegistry registry) {
@@ -54,6 +54,7 @@ public CompletableFuture<Collection<String>> personNamesAsync() {
 
     /**
      * Fallback for {@link PersonController#allPeople()}
+     *
      * @return people
      */
     @SuppressWarnings("unused")
@@ -72,7 +73,7 @@ public Map<String, Number> stats() {
 
         Map<String, Number> result = null;
 
-        if(t != null){
+        if (t != null) {
             result = new HashMap<>();
 
             result.put("count", t.count());

File: samples/micrometer-samples-boot2/src/main/java/io/micrometer/boot2/samples/AtlasSample.java
Patch:
@@ -19,7 +19,9 @@
 import org.springframework.boot.builder.SpringApplicationBuilder;
 import org.springframework.scheduling.annotation.EnableScheduling;
 
-@SpringBootApplication(scanBasePackages = "io.micrometer.boot2.samples.components")
+import io.micrometer.boot2.samples.components.PersonController;
+
+@SpringBootApplication(scanBasePackageClasses = PersonController.class)
 @EnableScheduling
 public class AtlasSample {
     public static void main(String[] args) {

File: samples/micrometer-samples-boot2/src/main/java/io/micrometer/boot2/samples/DatadogSample.java
Patch:
@@ -19,7 +19,9 @@
 import org.springframework.boot.builder.SpringApplicationBuilder;
 import org.springframework.scheduling.annotation.EnableScheduling;
 
-@SpringBootApplication(scanBasePackages = "io.micrometer.boot2.samples.components")
+import io.micrometer.boot2.samples.components.PersonController;
+
+@SpringBootApplication(scanBasePackageClasses = PersonController.class)
 @EnableScheduling
 public class DatadogSample {
     public static void main(String[] args) {

File: samples/micrometer-samples-boot2/src/main/java/io/micrometer/boot2/samples/InfluxSample.java
Patch:
@@ -19,7 +19,9 @@
 import org.springframework.boot.builder.SpringApplicationBuilder;
 import org.springframework.scheduling.annotation.EnableScheduling;
 
-@SpringBootApplication(scanBasePackages = "io.micrometer.boot2.samples.components")
+import io.micrometer.boot2.samples.components.PersonController;
+
+@SpringBootApplication(scanBasePackageClasses = PersonController.class)
 @EnableScheduling
 public class InfluxSample {
     public static void main(String[] args) {

File: samples/micrometer-samples-boot2/src/main/java/io/micrometer/boot2/samples/JmxSample.java
Patch:
@@ -19,7 +19,9 @@
 import org.springframework.boot.builder.SpringApplicationBuilder;
 import org.springframework.scheduling.annotation.EnableScheduling;
 
-@SpringBootApplication(scanBasePackages = "io.micrometer.boot2.samples.components")
+import io.micrometer.boot2.samples.components.PersonController;
+
+@SpringBootApplication(scanBasePackageClasses = PersonController.class)
 @EnableScheduling
 public class JmxSample {
     public static void main(String[] args) {

File: samples/micrometer-samples-boot2/src/main/java/io/micrometer/boot2/samples/NewRelicSample.java
Patch:
@@ -19,7 +19,9 @@
 import org.springframework.boot.builder.SpringApplicationBuilder;
 import org.springframework.scheduling.annotation.EnableScheduling;
 
-@SpringBootApplication(scanBasePackages = "io.micrometer.boot2.samples.components")
+import io.micrometer.boot2.samples.components.PersonController;
+
+@SpringBootApplication(scanBasePackageClasses = PersonController.class)
 @EnableScheduling
 public class NewRelicSample {
     public static void main(String[] args) {

File: samples/micrometer-samples-boot2/src/main/java/io/micrometer/boot2/samples/PrometheusSample.java
Patch:
@@ -21,7 +21,9 @@
 import org.springframework.context.annotation.Bean;
 import org.springframework.scheduling.annotation.EnableScheduling;
 
-@SpringBootApplication(scanBasePackages = "io.micrometer.boot2.samples.components")
+import io.micrometer.boot2.samples.components.PersonController;
+
+@SpringBootApplication(scanBasePackageClasses = PersonController.class)
 @EnableScheduling
 public class PrometheusSample {
     public static void main(String[] args) {

File: samples/micrometer-samples-boot2/src/main/java/io/micrometer/boot2/samples/SignalfxSample.java
Patch:
@@ -19,7 +19,9 @@
 import org.springframework.boot.builder.SpringApplicationBuilder;
 import org.springframework.scheduling.annotation.EnableScheduling;
 
-@SpringBootApplication(scanBasePackages = "io.micrometer.boot2.samples.components")
+import io.micrometer.boot2.samples.components.PersonController;
+
+@SpringBootApplication(scanBasePackageClasses = PersonController.class)
 @EnableScheduling
 public class SignalfxSample {
     public static void main(String[] args) {

File: samples/micrometer-samples-boot2/src/main/java/io/micrometer/boot2/samples/StatsdDatadogSample.java
Patch:
@@ -19,7 +19,9 @@
 import org.springframework.boot.builder.SpringApplicationBuilder;
 import org.springframework.scheduling.annotation.EnableScheduling;
 
-@SpringBootApplication(scanBasePackages = "io.micrometer.boot2.samples.components")
+import io.micrometer.boot2.samples.components.PersonController;
+
+@SpringBootApplication(scanBasePackageClasses = PersonController.class)
 @EnableScheduling
 public class StatsdDatadogSample {
     public static void main(String[] args) {

File: samples/micrometer-samples-boot2/src/main/java/io/micrometer/boot2/samples/StatsdTelegrafSample.java
Patch:
@@ -19,7 +19,9 @@
 import org.springframework.boot.builder.SpringApplicationBuilder;
 import org.springframework.scheduling.annotation.EnableScheduling;
 
-@SpringBootApplication(scanBasePackages = "io.micrometer.boot2.samples.components")
+import io.micrometer.boot2.samples.components.PersonController;
+
+@SpringBootApplication(scanBasePackageClasses = PersonController.class)
 @EnableScheduling
 public class StatsdTelegrafSample {
     public static void main(String[] args) {

File: implementations/micrometer-registry-signalfx/src/main/java/io/micrometer/signalfx/SignalFxConfig.java
Patch:
@@ -38,6 +38,6 @@ default String accessToken() {
      */
     default String uri() {
         String v = get(prefix() + ".apiHost");
-        return v == null ? "https://ingest.signalfx.com/v2" : v;
+        return v == null ? "https://ingest.signalfx.com" : v;
     }
 }

File: samples/micrometer-samples-boot1/src/main/java/io/micrometer/boot1/samples/AtlasSample.java
Patch:
@@ -19,7 +19,7 @@
 import org.springframework.boot.builder.SpringApplicationBuilder;
 import org.springframework.scheduling.annotation.EnableScheduling;
 
-@SpringBootApplication(scanBasePackages = "io.micrometer.spring.samples.components")
+@SpringBootApplication(scanBasePackages = "io.micrometer.boot1.samples.components")
 @EnableScheduling
 public class AtlasSample {
     public static void main(String[] args) {

File: samples/micrometer-samples-boot1/src/main/java/io/micrometer/boot1/samples/DatadogSample.java
Patch:
@@ -19,7 +19,7 @@
 import org.springframework.boot.builder.SpringApplicationBuilder;
 import org.springframework.scheduling.annotation.EnableScheduling;
 
-@SpringBootApplication(scanBasePackages = "io.micrometer.spring.samples.components")
+@SpringBootApplication(scanBasePackages = "io.micrometer.boot1.samples.components")
 @EnableScheduling
 public class DatadogSample {
     public static void main(String[] args) {

File: samples/micrometer-samples-boot1/src/main/java/io/micrometer/boot1/samples/InfluxSample.java
Patch:
@@ -19,7 +19,7 @@
 import org.springframework.boot.builder.SpringApplicationBuilder;
 import org.springframework.scheduling.annotation.EnableScheduling;
 
-@SpringBootApplication(scanBasePackages = "io.micrometer.spring.samples.components")
+@SpringBootApplication(scanBasePackages = "io.micrometer.boot1.samples.components")
 @EnableScheduling
 public class InfluxSample {
     public static void main(String[] args) {

File: samples/micrometer-samples-boot1/src/main/java/io/micrometer/boot1/samples/JmxSample.java
Patch:
@@ -19,7 +19,7 @@
 import org.springframework.boot.builder.SpringApplicationBuilder;
 import org.springframework.scheduling.annotation.EnableScheduling;
 
-@SpringBootApplication(scanBasePackages = "io.micrometer.spring.samples.components")
+@SpringBootApplication(scanBasePackages = "io.micrometer.boot1.samples.components")
 @EnableScheduling
 public class JmxSample {
     public static void main(String[] args) {

File: samples/micrometer-samples-boot1/src/main/java/io/micrometer/boot1/samples/NewRelicSample.java
Patch:
@@ -19,7 +19,7 @@
 import org.springframework.boot.builder.SpringApplicationBuilder;
 import org.springframework.scheduling.annotation.EnableScheduling;
 
-@SpringBootApplication(scanBasePackages = "io.micrometer.spring.samples.components")
+@SpringBootApplication(scanBasePackages = "io.micrometer.boot1.samples.components")
 @EnableScheduling
 public class NewRelicSample {
     public static void main(String[] args) {

File: samples/micrometer-samples-boot1/src/main/java/io/micrometer/boot1/samples/PrometheusSample.java
Patch:
@@ -21,7 +21,7 @@
 import org.springframework.context.annotation.Bean;
 import org.springframework.scheduling.annotation.EnableScheduling;
 
-@SpringBootApplication(scanBasePackages = "io.micrometer.spring.samples.components")
+@SpringBootApplication(scanBasePackages = "io.micrometer.boot1.samples.components")
 @EnableScheduling
 public class PrometheusSample {
     public static void main(String[] args) {

File: samples/micrometer-samples-boot1/src/main/java/io/micrometer/boot1/samples/SignalfxSample.java
Patch:
@@ -19,7 +19,7 @@
 import org.springframework.boot.builder.SpringApplicationBuilder;
 import org.springframework.scheduling.annotation.EnableScheduling;
 
-@SpringBootApplication(scanBasePackages = "io.micrometer.spring.samples.components")
+@SpringBootApplication(scanBasePackages = "io.micrometer.boot1.samples.components")
 @EnableScheduling
 public class SignalfxSample {
     public static void main(String[] args) {

File: samples/micrometer-samples-boot1/src/main/java/io/micrometer/boot1/samples/SimpleSample.java
Patch:
@@ -22,7 +22,7 @@
 import org.springframework.context.annotation.Bean;
 import org.springframework.scheduling.annotation.EnableScheduling;
 
-@SpringBootApplication(scanBasePackages = "io.micrometer.spring.samples.components")
+@SpringBootApplication(scanBasePackages = "io.micrometer.boot1.samples.components")
 @EnableScheduling
 public class SimpleSample {
     public static void main(String[] args) {

File: samples/micrometer-samples-boot1/src/main/java/io/micrometer/boot1/samples/StatsdDatadogSample.java
Patch:
@@ -19,7 +19,7 @@
 import org.springframework.boot.builder.SpringApplicationBuilder;
 import org.springframework.scheduling.annotation.EnableScheduling;
 
-@SpringBootApplication(scanBasePackages = "io.micrometer.spring.samples.components")
+@SpringBootApplication(scanBasePackages = "io.micrometer.boot1.samples.components")
 @EnableScheduling
 public class StatsdDatadogSample {
     public static void main(String[] args) {

File: samples/micrometer-samples-boot1/src/main/java/io/micrometer/boot1/samples/StatsdTelegrafSample.java
Patch:
@@ -19,7 +19,7 @@
 import org.springframework.boot.builder.SpringApplicationBuilder;
 import org.springframework.scheduling.annotation.EnableScheduling;
 
-@SpringBootApplication(scanBasePackages = "io.micrometer.spring.samples.components")
+@SpringBootApplication(scanBasePackages = "io.micrometer.boot1.samples.components")
 @EnableScheduling
 public class StatsdTelegrafSample {
     public static void main(String[] args) {

File: samples/micrometer-samples-boot2/src/main/java/io/micrometer/boot2/samples/AtlasSample.java
Patch:
@@ -19,7 +19,7 @@
 import org.springframework.boot.builder.SpringApplicationBuilder;
 import org.springframework.scheduling.annotation.EnableScheduling;
 
-@SpringBootApplication(scanBasePackages = "io.micrometer.spring.samples.components")
+@SpringBootApplication(scanBasePackages = "io.micrometer.boot2.samples.components")
 @EnableScheduling
 public class AtlasSample {
     public static void main(String[] args) {

File: samples/micrometer-samples-boot2/src/main/java/io/micrometer/boot2/samples/DatadogSample.java
Patch:
@@ -19,7 +19,7 @@
 import org.springframework.boot.builder.SpringApplicationBuilder;
 import org.springframework.scheduling.annotation.EnableScheduling;
 
-@SpringBootApplication(scanBasePackages = "io.micrometer.spring.samples.components")
+@SpringBootApplication(scanBasePackages = "io.micrometer.boot2.samples.components")
 @EnableScheduling
 public class DatadogSample {
     public static void main(String[] args) {

File: samples/micrometer-samples-boot2/src/main/java/io/micrometer/boot2/samples/InfluxSample.java
Patch:
@@ -19,7 +19,7 @@
 import org.springframework.boot.builder.SpringApplicationBuilder;
 import org.springframework.scheduling.annotation.EnableScheduling;
 
-@SpringBootApplication(scanBasePackages = "io.micrometer.spring.samples.components")
+@SpringBootApplication(scanBasePackages = "io.micrometer.boot2.samples.components")
 @EnableScheduling
 public class InfluxSample {
     public static void main(String[] args) {

File: samples/micrometer-samples-boot2/src/main/java/io/micrometer/boot2/samples/JmxSample.java
Patch:
@@ -19,7 +19,7 @@
 import org.springframework.boot.builder.SpringApplicationBuilder;
 import org.springframework.scheduling.annotation.EnableScheduling;
 
-@SpringBootApplication(scanBasePackages = "io.micrometer.spring.samples.components")
+@SpringBootApplication(scanBasePackages = "io.micrometer.boot2.samples.components")
 @EnableScheduling
 public class JmxSample {
     public static void main(String[] args) {

File: samples/micrometer-samples-boot2/src/main/java/io/micrometer/boot2/samples/NewRelicSample.java
Patch:
@@ -19,7 +19,7 @@
 import org.springframework.boot.builder.SpringApplicationBuilder;
 import org.springframework.scheduling.annotation.EnableScheduling;
 
-@SpringBootApplication(scanBasePackages = "io.micrometer.spring.samples.components")
+@SpringBootApplication(scanBasePackages = "io.micrometer.boot2.samples.components")
 @EnableScheduling
 public class NewRelicSample {
     public static void main(String[] args) {

File: samples/micrometer-samples-boot2/src/main/java/io/micrometer/boot2/samples/PrometheusSample.java
Patch:
@@ -21,7 +21,7 @@
 import org.springframework.context.annotation.Bean;
 import org.springframework.scheduling.annotation.EnableScheduling;
 
-@SpringBootApplication(scanBasePackages = "io.micrometer.spring.samples.components")
+@SpringBootApplication(scanBasePackages = "io.micrometer.boot2.samples.components")
 @EnableScheduling
 public class PrometheusSample {
     public static void main(String[] args) {

File: samples/micrometer-samples-boot2/src/main/java/io/micrometer/boot2/samples/SignalfxSample.java
Patch:
@@ -19,7 +19,7 @@
 import org.springframework.boot.builder.SpringApplicationBuilder;
 import org.springframework.scheduling.annotation.EnableScheduling;
 
-@SpringBootApplication(scanBasePackages = "io.micrometer.spring.samples.components")
+@SpringBootApplication(scanBasePackages = "io.micrometer.boot2.samples.components")
 @EnableScheduling
 public class SignalfxSample {
     public static void main(String[] args) {

File: samples/micrometer-samples-boot2/src/main/java/io/micrometer/boot2/samples/SimpleSample.java
Patch:
@@ -22,7 +22,7 @@
 import org.springframework.context.annotation.Bean;
 import org.springframework.scheduling.annotation.EnableScheduling;
 
-@SpringBootApplication(scanBasePackages = "io.micrometer.spring.samples.components")
+@SpringBootApplication(scanBasePackages = "io.micrometer.boot2.samples.components")
 @EnableScheduling
 public class SimpleSample {
     public static void main(String[] args) {

File: samples/micrometer-samples-boot2/src/main/java/io/micrometer/boot2/samples/StatsdDatadogSample.java
Patch:
@@ -19,7 +19,7 @@
 import org.springframework.boot.builder.SpringApplicationBuilder;
 import org.springframework.scheduling.annotation.EnableScheduling;
 
-@SpringBootApplication(scanBasePackages = "io.micrometer.spring.samples.components")
+@SpringBootApplication(scanBasePackages = "io.micrometer.boot2.samples.components")
 @EnableScheduling
 public class StatsdDatadogSample {
     public static void main(String[] args) {

File: samples/micrometer-samples-boot2/src/main/java/io/micrometer/boot2/samples/StatsdTelegrafSample.java
Patch:
@@ -19,7 +19,7 @@
 import org.springframework.boot.builder.SpringApplicationBuilder;
 import org.springframework.scheduling.annotation.EnableScheduling;
 
-@SpringBootApplication(scanBasePackages = "io.micrometer.spring.samples.components")
+@SpringBootApplication(scanBasePackages = "io.micrometer.boot2.samples.components")
 @EnableScheduling
 public class StatsdTelegrafSample {
     public static void main(String[] args) {

File: implementations/micrometer-registry-atlas/src/main/java/io/micrometer/atlas/SpectatorDistributionSummary.java
Patch:
@@ -21,6 +21,7 @@
 import io.micrometer.core.instrument.Clock;
 import io.micrometer.core.instrument.histogram.HistogramConfig;
 import io.micrometer.core.instrument.util.MeterEquivalence;
+import io.micrometer.core.lang.Nullable;
 
 import static java.util.stream.StreamSupport.stream;
 
@@ -69,7 +70,7 @@ public double max() {
 
     @SuppressWarnings("EqualsWhichDoesntCheckParameterClass")
     @Override
-    public boolean equals(Object o) {
+    public boolean equals(@Nullable Object o) {
         return MeterEquivalence.equals(this, o);
     }
 

File: implementations/micrometer-registry-atlas/src/main/java/io/micrometer/atlas/SpectatorToDoubleGauge.java
Patch:
@@ -16,6 +16,7 @@
 package io.micrometer.atlas;
 
 import com.netflix.spectator.api.*;
+import io.micrometer.core.lang.Nullable;
 
 import java.util.Collections;
 import java.util.function.ToDoubleFunction;
@@ -28,7 +29,7 @@ class SpectatorToDoubleGauge<T> extends AbstractMeter<T> implements Gauge {
 
     private final ToDoubleFunction<T> f;
 
-    SpectatorToDoubleGauge(Clock clock, Id id, T obj, ToDoubleFunction<T> f) {
+    SpectatorToDoubleGauge(Clock clock, Id id, @Nullable T obj, ToDoubleFunction<T> f) {
         super(clock, id, obj);
         this.f = f;
     }

File: implementations/micrometer-registry-atlas/src/test/java/io/micrometer/atlas/AtlasMeterRegistryCompatibilityTest.java
Patch:
@@ -31,6 +31,7 @@ public boolean enabled() {
                 return false;
             }
 
+            @SuppressWarnings("ConstantConditions")
             @Override
             public String get(String k) {
                 return null;

File: implementations/micrometer-registry-cloudwatch/src/main/java/io/micrometer/cloudwatch/CloudWatchMeterRegistry.java
Patch:
@@ -21,6 +21,7 @@
 import io.micrometer.core.instrument.*;
 import io.micrometer.core.instrument.config.NamingConvention;
 import io.micrometer.core.instrument.step.StepMeterRegistry;
+import io.micrometer.core.lang.Nullable;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -159,7 +160,7 @@ private MetricDatum metricDatum(Meter.Id id, long wallTime, double value) {
                 .withUnit(toStandardUnit(id.getBaseUnit()));
     }
 
-    private StandardUnit toStandardUnit(String unit) {
+    private StandardUnit toStandardUnit(@Nullable String unit) {
         if (unit == null) {
             return StandardUnit.None;
         }
@@ -196,7 +197,7 @@ private Meter.Id idWithSuffix(Meter.Id id, String suffix) {
     /**
      * Copy tags and description from an existing id, but change the name and unit.
      */
-    private Meter.Id idWithSuffixAndUnit(Meter.Id id, String suffix, String unit) {
+    private Meter.Id idWithSuffixAndUnit(Meter.Id id, String suffix, @Nullable String unit) {
         return new Meter.Id(id.getName() + "." + suffix, id.getTags(), unit, id.getDescription(), id.getType());
     }
 }

File: implementations/micrometer-registry-cloudwatch/src/main/java/io/micrometer/cloudwatch/package-info.java
Patch:
@@ -15,7 +15,7 @@
  */
 @NonNullApi
 @NonNullFields
-package io.micrometer.core.instrument.binder.db;
+package io.micrometer.cloudwatch;
 
 import io.micrometer.core.lang.NonNullApi;
 import io.micrometer.core.lang.NonNullFields;

File: implementations/micrometer-registry-cloudwatch/src/test/java/io/micrometer/cloudwatch/CloudWatchMeterRegistryCompatibilityTest.java
Patch:
@@ -17,15 +17,18 @@
 
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.MockClock;
+import io.micrometer.core.lang.Nullable;
 import io.micrometer.core.tck.MeterRegistryCompatibilityKit;
 
 import java.time.Duration;
 
 class CloudWatchMeterRegistryCompatibilityTest extends MeterRegistryCompatibilityKit {
     @Override
     public MeterRegistry registry() {
+        //noinspection ConstantConditions
         return new CloudWatchMeterRegistry(new CloudWatchConfig() {
             @Override
+            @Nullable
             public String get(String k) {
                 return null;
             }

File: implementations/micrometer-registry-datadog/src/main/java/io/micrometer/datadog/DatadogConfig.java
Patch:
@@ -16,6 +16,7 @@
 package io.micrometer.datadog;
 
 import io.micrometer.core.instrument.step.StepRegistryConfig;
+import io.micrometer.core.lang.Nullable;
 
 /**
  * Configuration for Datadog exporting.
@@ -40,6 +41,7 @@ default String apiKey() {
         return v;
     }
 
+    @Nullable
     default String applicationKey() {
         return get(prefix() + ".applicationKey");
     }
@@ -48,6 +50,7 @@ default String applicationKey() {
      * The tag that will be mapped to "host" when shipping metrics to datadog, or {@code null} if
      * host should be omitted on publishing.
      */
+    @Nullable
     default String hostTag() {
         String v = get(prefix() + ".hostTag");
         return v == null ? "instance" : v;

File: implementations/micrometer-registry-datadog/src/main/java/io/micrometer/datadog/DatadogNamingConvention.java
Patch:
@@ -17,6 +17,7 @@
 
 import io.micrometer.core.instrument.Meter;
 import io.micrometer.core.instrument.config.NamingConvention;
+import io.micrometer.core.lang.Nullable;
 
 /**
  * @author Jon Schneider
@@ -29,7 +30,7 @@ public class DatadogNamingConvention implements NamingConvention {
      * all non-alphanumeric characters with '_'.
      */
     @Override
-    public String name(String name, Meter.Type type, String baseUnit) {
+    public String name(String name, Meter.Type type, @Nullable String baseUnit) {
         String sanitized = name;
 
         // Metrics that don't start with a letter get dropped on the floor by the Datadog publish API,

File: implementations/micrometer-registry-datadog/src/main/java/io/micrometer/datadog/package-info.java
Patch:
@@ -15,7 +15,7 @@
  */
 @NonNullApi
 @NonNullFields
-package io.micrometer.core.instrument.binder.jvm;
+package io.micrometer.datadog;
 
 import io.micrometer.core.lang.NonNullApi;
 import io.micrometer.core.lang.NonNullFields;

File: implementations/micrometer-registry-datadog/src/test/java/io/micrometer/datadog/DatadogMeterRegistryCompatibilityTest.java
Patch:
@@ -17,6 +17,7 @@
 
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.MockClock;
+import io.micrometer.core.lang.Nullable;
 import io.micrometer.core.tck.MeterRegistryCompatibilityKit;
 
 import java.time.Duration;
@@ -36,6 +37,7 @@ public String apiKey() {
             }
 
             @Override
+            @Nullable
             public String get(String k) {
                 return null;
             }

File: implementations/micrometer-registry-ganglia/src/main/java/io/micrometer/ganglia/GangliaConfig.java
Patch:
@@ -17,6 +17,7 @@
 
 import info.ganglia.gmetric4j.gmetric.GMetric;
 import io.micrometer.core.instrument.dropwizard.DropwizardConfig;
+import io.micrometer.core.lang.Nullable;
 
 import java.util.concurrent.TimeUnit;
 
@@ -37,6 +38,7 @@ public interface GangliaConfig extends DropwizardConfig {
      * @return
      *     Value for the key or null if no key is present.
      */
+    @Nullable
     String get(String k);
 
     /**

File: implementations/micrometer-registry-ganglia/src/main/java/io/micrometer/ganglia/package-info.java
Patch:
@@ -15,7 +15,7 @@
  */
 @NonNullApi
 @NonNullFields
-package io.micrometer.core.instrument.binder.jpa;
+package io.micrometer.ganglia;
 
 import io.micrometer.core.lang.NonNullApi;
 import io.micrometer.core.lang.NonNullFields;

File: implementations/micrometer-registry-ganglia/src/test/java/io/micrometer/ganglia/GangliaMeterRegistryCompatibilityTest.java
Patch:
@@ -18,6 +18,7 @@
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.MockClock;
 import io.micrometer.core.instrument.util.HierarchicalNameMapper;
+import io.micrometer.core.lang.Nullable;
 import io.micrometer.core.tck.MeterRegistryCompatibilityKit;
 
 import java.time.Duration;
@@ -32,6 +33,7 @@ public boolean enabled() {
             }
 
             @Override
+            @Nullable
             public String get(String k) {
                 return null;
             }

File: implementations/micrometer-registry-graphite/src/main/java/io/micrometer/graphite/GraphiteConfig.java
Patch:
@@ -16,6 +16,7 @@
 package io.micrometer.graphite;
 
 import io.micrometer.core.instrument.dropwizard.DropwizardConfig;
+import io.micrometer.core.lang.Nullable;
 
 import java.util.concurrent.TimeUnit;
 
@@ -36,6 +37,7 @@ public interface GraphiteConfig extends DropwizardConfig {
      * @return
      *     Value for the key or null if no key is present.
      */
+    @Nullable
     String get(String k);
 
     /**

File: implementations/micrometer-registry-graphite/src/main/java/io/micrometer/graphite/GraphiteNamingConvention.java
Patch:
@@ -17,6 +17,7 @@
 
 import io.micrometer.core.instrument.Meter;
 import io.micrometer.core.instrument.config.NamingConvention;
+import io.micrometer.core.lang.Nullable;
 
 import java.text.Normalizer;
 import java.util.regex.Pattern;
@@ -29,7 +30,7 @@ public class GraphiteNamingConvention implements NamingConvention {
     private static final Pattern blacklistedChars = Pattern.compile("[{}(),=\\[\\]/]");
 
     @Override
-    public String name(String name, Meter.Type type, String baseUnit) {
+    public String name(String name, Meter.Type type, @Nullable String baseUnit) {
         return format(name);
     }
 

File: implementations/micrometer-registry-graphite/src/main/java/io/micrometer/graphite/package-info.java
Patch:
@@ -15,7 +15,7 @@
  */
 @NonNullApi
 @NonNullFields
-package io.micrometer.core.instrument.binder.jetty;
+package io.micrometer.graphite;
 
 import io.micrometer.core.lang.NonNullApi;
 import io.micrometer.core.lang.NonNullFields;

File: implementations/micrometer-registry-graphite/src/test/java/io/micrometer/graphite/GraphiteMeterRegistryCompatibilityTest.java
Patch:
@@ -18,6 +18,7 @@
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.MockClock;
 import io.micrometer.core.instrument.util.HierarchicalNameMapper;
+import io.micrometer.core.lang.Nullable;
 import io.micrometer.core.tck.MeterRegistryCompatibilityKit;
 
 import java.time.Duration;
@@ -32,6 +33,7 @@ public boolean enabled() {
             }
 
             @Override
+            @Nullable
             public String get(String k) {
                 return null;
             }

File: implementations/micrometer-registry-graphite/src/test/java/io/micrometer/graphite/GraphiteMeterRegistryTest.java
Patch:
@@ -16,6 +16,7 @@
 package io.micrometer.graphite;
 
 import io.micrometer.core.instrument.MockClock;
+import io.micrometer.core.lang.Nullable;
 import io.netty.channel.ChannelOption;
 import org.junit.jupiter.api.Test;
 import reactor.core.Disposable;
@@ -50,6 +51,7 @@ void metricPrefixes() {
 
         final GraphiteMeterRegistry registry = new GraphiteMeterRegistry(new GraphiteConfig() {
             @Override
+            @Nullable
             public String get(String k) {
                 return null;
             }

File: implementations/micrometer-registry-influx/src/main/java/io/micrometer/influx/InfluxNamingConvention.java
Patch:
@@ -17,6 +17,7 @@
 
 import io.micrometer.core.instrument.Meter;
 import io.micrometer.core.instrument.config.NamingConvention;
+import io.micrometer.core.lang.Nullable;
 
 /**
  * @author Jon Schneider
@@ -34,7 +35,7 @@ public InfluxNamingConvention(NamingConvention basic) {
     }
 
     @Override
-    public String name(String name, Meter.Type type, String baseUnit) {
+    public String name(String name, Meter.Type type, @Nullable String baseUnit) {
         return format(name.replace("=", "_"));
     }
 

File: implementations/micrometer-registry-influx/src/test/java/io/micrometer/influx/InfluxMeterRegistryCompatibilityTest.java
Patch:
@@ -17,6 +17,7 @@
 
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.MockClock;
+import io.micrometer.core.lang.Nullable;
 import io.micrometer.core.tck.MeterRegistryCompatibilityKit;
 
 import java.time.Duration;
@@ -31,6 +32,7 @@ public boolean enabled() {
             }
 
             @Override
+            @Nullable
             public String get(String k) {
                 return null;
             }

File: implementations/micrometer-registry-new-relic/src/test/java/io/micrometer/newrelic/NewRelicMeterRegistryCompatibilityTest.java
Patch:
@@ -17,6 +17,7 @@
 
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.MockClock;
+import io.micrometer.core.lang.Nullable;
 import io.micrometer.core.tck.MeterRegistryCompatibilityKit;
 
 import java.time.Duration;
@@ -41,6 +42,7 @@ public String accountId() {
             }
 
             @Override
+            @Nullable
             public String get(String k) {
                 return null;
             }

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusDistributionSummary.java
Patch:
@@ -22,6 +22,7 @@
 import io.micrometer.core.instrument.histogram.TimeWindowHistogram;
 import io.micrometer.core.instrument.util.MeterEquivalence;
 import io.micrometer.core.instrument.util.TimeDecayingMax;
+import io.micrometer.core.lang.Nullable;
 
 import java.time.Duration;
 import java.util.concurrent.atomic.DoubleAdder;
@@ -69,7 +70,7 @@ public double max() {
 
     @SuppressWarnings("EqualsWhichDoesntCheckParameterClass")
     @Override
-    public boolean equals(Object o) {
+    public boolean equals(@Nullable Object o) {
         return MeterEquivalence.equals(this, o);
     }
 

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusMeterRegistry.java
Patch:
@@ -23,6 +23,7 @@
 import io.micrometer.core.instrument.internal.DefaultGauge;
 import io.micrometer.core.instrument.internal.DefaultLongTaskTimer;
 import io.micrometer.core.instrument.internal.DefaultMeter;
+import io.micrometer.core.lang.Nullable;
 import io.prometheus.client.Collector;
 import io.prometheus.client.CollectorRegistry;
 import io.prometheus.client.exporter.common.TextFormat;
@@ -218,7 +219,7 @@ protected io.micrometer.core.instrument.Timer newTimer(Meter.Id id, HistogramCon
 
     @SuppressWarnings("unchecked")
     @Override
-    protected <T> io.micrometer.core.instrument.Gauge newGauge(Meter.Id id, T obj, ToDoubleFunction<T> f) {
+    protected <T> io.micrometer.core.instrument.Gauge newGauge(Meter.Id id, @Nullable T obj, ToDoubleFunction<T> f) {
         MicrometerCollector collector = collectorByName(id, Collector.Type.GAUGE);
         Gauge gauge = new DefaultGauge(id, obj, f);
         List<String> tagValues = tagValues(id);

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusNamingConvention.java
Patch:
@@ -17,6 +17,7 @@
 
 import io.micrometer.core.instrument.Meter;
 import io.micrometer.core.instrument.config.NamingConvention;
+import io.micrometer.core.lang.Nullable;
 
 import java.util.regex.Pattern;
 
@@ -38,7 +39,7 @@ public class PrometheusNamingConvention implements NamingConvention {
      * [a-zA-Z_:][a-zA-Z0-9_:]*
      */
     @Override
-    public String name(String name, Meter.Type type, String baseUnit) {
+    public String name(String name, Meter.Type type, @Nullable String baseUnit) {
         String conventionName = NamingConvention.snakeCase.name(name, type, baseUnit);
 
         switch(type) {

File: implementations/micrometer-registry-signalfx/src/main/java/io/micrometer/signalfx/SignalFxNamingConvention.java
Patch:
@@ -17,6 +17,7 @@
 
 import io.micrometer.core.instrument.Meter;
 import io.micrometer.core.instrument.config.NamingConvention;
+import io.micrometer.core.lang.Nullable;
 
 /**
  * See https://developers.signalfx.com/reference#section-criteria-for-metric-and-dimension-names-and-values for criteria.
@@ -37,7 +38,7 @@ public SignalFxNamingConvention(NamingConvention rootConvention) {
      * Metric (the metric name) can be any non-empty UTF-8 string, with a maximum length <= 256 characters
      */
     @Override
-    public String name(String name, Meter.Type type, String baseUnit) {
+    public String name(String name, Meter.Type type, @Nullable String baseUnit) {
         String formattedName = rootConvention.name(name, type, baseUnit);
         return formattedName.length() > 256 ? formattedName.substring(0, 256) : formattedName;
     }

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdDistributionSummary.java
Patch:
@@ -21,6 +21,7 @@
 import io.micrometer.core.instrument.histogram.HistogramConfig;
 import io.micrometer.core.instrument.util.MeterEquivalence;
 import io.micrometer.core.instrument.util.TimeDecayingMax;
+import io.micrometer.core.lang.Nullable;
 import org.reactivestreams.Subscriber;
 
 import java.util.concurrent.atomic.DoubleAdder;
@@ -73,7 +74,7 @@ public double max() {
 
     @SuppressWarnings("EqualsWhichDoesntCheckParameterClass")
     @Override
-    public boolean equals(Object o) {
+    public boolean equals(@Nullable Object o) {
         return MeterEquivalence.equals(this, o);
     }
 

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdGauge.java
Patch:
@@ -19,6 +19,7 @@
 import io.micrometer.core.instrument.Gauge;
 import io.micrometer.core.instrument.Meter;
 import io.micrometer.core.instrument.util.MeterEquivalence;
+import io.micrometer.core.lang.Nullable;
 import org.reactivestreams.Subscriber;
 
 import java.lang.ref.WeakReference;
@@ -33,7 +34,7 @@ public class StatsdGauge<T> extends AbstractMeter implements Gauge, StatsdPollab
     private final ToDoubleFunction<T> value;
     private final AtomicReference<Double> lastValue = new AtomicReference<>(Double.NaN);
 
-    StatsdGauge(Meter.Id id, StatsdLineBuilder lineBuilder, Subscriber<String> publisher, T obj, ToDoubleFunction<T> value) {
+    StatsdGauge(Meter.Id id, StatsdLineBuilder lineBuilder, Subscriber<String> publisher, @Nullable T obj, ToDoubleFunction<T> value) {
         super(id);
         this.lineBuilder = lineBuilder;
         this.publisher = publisher;

File: implementations/micrometer-registry-statsd/src/test/java/io/micrometer/statsd/StatsdMeterRegistryTest.java
Patch:
@@ -21,6 +21,7 @@
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.MockClock;
 import io.micrometer.core.instrument.Tags;
+import io.micrometer.core.lang.Nullable;
 import io.netty.channel.ChannelOption;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Disabled;
@@ -120,6 +121,7 @@ private void assertLines(Consumer<StatsdMeterRegistry> registryAction, StatsdFla
     private StatsdMeterRegistry registry(StatsdFlavor flavor) {
         return new StatsdMeterRegistry(new StatsdConfig() {
             @Override
+            @Nullable
             public String get(String k) {
                 return null;
             }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Counter.java
Patch:
@@ -61,8 +61,8 @@ static Builder builder(String name) {
     class Builder {
         private final String name;
         private final List<Tag> tags = new ArrayList<>();
-        private @Nullable String description;
-        private @Nullable String baseUnit;
+        @Nullable private String description;
+        @Nullable private String baseUnit;
 
         private Builder(String name) {
             this.name = name;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/FunctionCounter.java
Patch:
@@ -52,8 +52,8 @@ class Builder<T> {
         private final T obj;
         private final ToDoubleFunction<T> f;
         private final List<Tag> tags = new ArrayList<>();
-        private @Nullable String description;
-        private @Nullable String baseUnit;
+        @Nullable private String description;
+        @Nullable private String baseUnit;
 
         private Builder(String name, T obj, ToDoubleFunction<T> f) {
             this.name = name;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/FunctionTimer.java
Patch:
@@ -62,8 +62,8 @@ class Builder<T> {
         private final ToDoubleFunction<T> totalTimeFunction;
         private final TimeUnit totalTimeFunctionUnits;
         private final List<Tag> tags = new ArrayList<>();
-        private @Nullable String description;
-        private @Nullable String baseUnit;
+        @Nullable private String description;
+        @Nullable private String baseUnit;
 
         private Builder(String name, T obj,
                         ToLongFunction<T> countFunction,

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Gauge.java
Patch:
@@ -39,19 +39,19 @@ default Type type() {
         return Type.Gauge;
     }
 
-    static <T> Builder<T> builder(String name, T obj, ToDoubleFunction<T> f) {
+    static <T> Builder<T> builder(String name, @Nullable T obj, ToDoubleFunction<T> f) {
         return new Builder<>(name, obj, f);
     }
 
     class Builder<T> {
         private final String name;
-        private final T obj;
+        @Nullable private final T obj;
         private final ToDoubleFunction<T> f;
         private final List<Tag> tags = new ArrayList<>();
         @Nullable private String description;
         @Nullable private String baseUnit;
 
-        private Builder(String name, T obj, ToDoubleFunction<T> f) {
+        private Builder(String name, @Nullable T obj, ToDoubleFunction<T> f) {
             this.name = name;
             this.obj = obj;
             this.f = f;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/LongTaskTimer.java
Patch:
@@ -182,7 +182,7 @@ static Builder builder(Timed timed) {
     class Builder {
         private final String name;
         private final List<Tag> tags = new ArrayList<>();
-        private @Nullable String description;
+        @Nullable private String description;
 
         private Builder(String name) {
             this.name = name;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/TimeGauge.java
Patch:
@@ -43,7 +43,7 @@ class Builder<T> {
         private final TimeUnit fUnits;
         private final ToDoubleFunction<T> f;
         private final List<Tag> tags = new ArrayList<>();
-        private @Nullable String description;
+        @Nullable private String description;
 
         private Builder(String name, T obj, TimeUnit fUnits, ToDoubleFunction<T> f) {
             this.name = name;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Timer.java
Patch:
@@ -290,7 +290,7 @@ public Builder histogramBufferLength(@Nullable Integer bufferLength) {
             return this;
         }
 
-        public Builder pauseDetector(PauseDetector pauseDetector) {
+        public Builder pauseDetector(@Nullable PauseDetector pauseDetector) {
             this.pauseDetector = pauseDetector;
             return this;
         }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/reactor/ReactorMetrics.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.core.instrument.reactor;
+package io.micrometer.core.instrument.binder.reactor;
 
 import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.Tags;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/reactor/ReactorMetricsSubscriber.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.core.instrument.reactor;
+package io.micrometer.core.instrument.binder.reactor;
 
 import io.micrometer.core.instrument.Tag;
 import org.reactivestreams.Subscription;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/reactor/package-info.java
Patch:
@@ -15,7 +15,7 @@
  */
 @NonNullApi
 @NonNullFields
-package io.micrometer.core.instrument.binder.cache;
+package io.micrometer.core.instrument.binder.reactor;
 
 import io.micrometer.core.lang.NonNullApi;
 import io.micrometer.core.lang.NonNullFields;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeGauge.java
Patch:
@@ -19,6 +19,7 @@
 import io.micrometer.core.instrument.Meter;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.noop.NoopGauge;
+import io.micrometer.core.lang.Nullable;
 
 import java.lang.ref.WeakReference;
 import java.util.function.ToDoubleFunction;
@@ -27,7 +28,7 @@ class CompositeGauge<T> extends AbstractCompositeMeter<Gauge> implements Gauge {
     private final WeakReference<T> ref;
     private final ToDoubleFunction<T> f;
 
-    CompositeGauge(Meter.Id id, T obj, ToDoubleFunction<T> f) {
+    CompositeGauge(Meter.Id id, @Nullable T obj, ToDoubleFunction<T> f) {
         super(id);
         ref = new WeakReference<>(obj);
         this.f = f;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeMeterRegistry.java
Patch:
@@ -19,6 +19,7 @@
 import io.micrometer.core.instrument.config.NamingConvention;
 import io.micrometer.core.instrument.histogram.HistogramConfig;
 import io.micrometer.core.instrument.histogram.pause.PauseDetector;
+import io.micrometer.core.lang.Nullable;
 
 import java.util.Collections;
 import java.util.Set;
@@ -69,7 +70,7 @@ protected LongTaskTimer newLongTaskTimer(Meter.Id id) {
     }
 
     @Override
-    protected <T> Gauge newGauge(Meter.Id id, T obj, ToDoubleFunction<T> f) {
+    protected <T> Gauge newGauge(Meter.Id id, @Nullable T obj, ToDoubleFunction<T> f) {
         return new CompositeGauge<>(id, obj, f);
     }
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeTimer.java
Patch:
@@ -123,6 +123,7 @@ Timer newNoopMeter() {
         return new NoopTimer(getId());
     }
 
+    @SuppressWarnings("ConstantConditions")
     @Override
     Timer registerNewMeter(MeterRegistry registry) {
         final long[] slaNanos = histogramConfig.getSlaBoundaries();
@@ -138,8 +139,8 @@ Timer registerNewMeter(MeterRegistry registry) {
         return Timer.builder(getId().getName())
                     .tags(getId().getTags())
                     .description(getId().getDescription())
-                    .maximumExpectedValue(histogramConfig.getMaximumExpectedValue() == null ? null : Duration.ofNanos(histogramConfig.getMaximumExpectedValue()))
-                    .minimumExpectedValue(histogramConfig.getMinimumExpectedValue() == null ? null : Duration.ofNanos(histogramConfig.getMinimumExpectedValue()))
+                    .maximumExpectedValue(Duration.ofNanos(histogramConfig.getMaximumExpectedValue()))
+                    .minimumExpectedValue(Duration.ofNanos(histogramConfig.getMinimumExpectedValue()))
                     .publishPercentiles(histogramConfig.getPercentiles())
                     .publishPercentileHistogram(histogramConfig.isPercentileHistogram())
                     .histogramBufferLength(histogramConfig.getHistogramBufferLength())

File: micrometer-core/src/main/java/io/micrometer/core/instrument/config/MeterFilter.java
Patch:
@@ -20,6 +20,7 @@
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.histogram.HistogramConfig;
+import io.micrometer.core.lang.Nullable;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -65,6 +66,7 @@ default Meter.Id map(Meter.Id id) {
      * @param config A histogram configuration guaranteed to be non-null.
      * @return Overrides to any part of the histogram config, when applicable.
      */
+    @Nullable
     default HistogramConfig configure(Meter.Id id, HistogramConfig config) {
         return config;
     }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/config/MeterRegistryConfig.java
Patch:
@@ -15,6 +15,8 @@
  */
 package io.micrometer.core.instrument.config;
 
+import io.micrometer.core.lang.Nullable;
+
 public interface MeterRegistryConfig {
     String prefix();
 
@@ -26,5 +28,6 @@ public interface MeterRegistryConfig {
      * @return
      *     Value for the key or null if no key is present.
      */
+    @Nullable
     String get(String k);
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/config/PropertyMeterFilter.java
Patch:
@@ -17,6 +17,7 @@
 
 import io.micrometer.core.instrument.Meter;
 import io.micrometer.core.instrument.histogram.HistogramConfig;
+import io.micrometer.core.lang.Nullable;
 
 import java.time.Duration;
 
@@ -27,8 +28,10 @@
  * @author Jon Schneider
  */
 public abstract class PropertyMeterFilter implements MeterFilter {
+    @Nullable
     public abstract <V> V get(String k, Class<V> vClass);
 
+    @Nullable
     protected <V> V getMostSpecific(String k, String suffix, Class<V> vClass) {
         V v = get(k.isEmpty() ? suffix : k + "." + suffix, vClass);
         if(v != null)

File: micrometer-core/src/main/java/io/micrometer/core/instrument/dropwizard/DropwizardDistributionSummary.java
Patch:
@@ -20,6 +20,7 @@
 import io.micrometer.core.instrument.histogram.HistogramConfig;
 import io.micrometer.core.instrument.util.MeterEquivalence;
 import io.micrometer.core.instrument.util.TimeDecayingMax;
+import io.micrometer.core.lang.Nullable;
 
 import java.util.concurrent.atomic.DoubleAdder;
 
@@ -63,7 +64,7 @@ public double max() {
 
     @SuppressWarnings("EqualsWhichDoesntCheckParameterClass")
     @Override
-    public boolean equals(Object o) {
+    public boolean equals(@Nullable Object o) {
         return MeterEquivalence.equals(this, o);
     }
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/histogram/TimeWindowHistogramBase.java
Patch:
@@ -20,6 +20,7 @@
 import io.micrometer.core.instrument.HistogramSnapshot;
 import io.micrometer.core.instrument.ValueAtPercentile;
 import io.micrometer.core.instrument.util.TimeUtils;
+import io.micrometer.core.lang.Nullable;
 
 import java.lang.reflect.Array;
 import java.util.Iterator;
@@ -34,6 +35,7 @@
  * @author Jon Schneider
  * @author Trustin Heuiseung Lee
  */
+@SuppressWarnings("ConstantConditions")
 abstract class TimeWindowHistogramBase<T, U> {
 
     static final int NUM_SIGNIFICANT_VALUE_DIGITS = 2;
@@ -46,7 +48,7 @@ abstract class TimeWindowHistogramBase<T, U> {
     private final HistogramConfig histogramConfig;
 
     private final T[] ringBuffer;
-    private U accumulatedHistogram;
+    @Nullable private U accumulatedHistogram;
     private volatile boolean accumulatedHistogramStale;
 
     private final long durationBetweenRotatesMillis;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/histogram/TimeWindowLatencyHistogram.java
Patch:
@@ -70,6 +70,7 @@ public TimeWindowLatencyHistogram(Clock clock, HistogramConfig histogramConfig,
         initRingBuffer();
     }
 
+    @SuppressWarnings("ConstantConditions")
     @Override
     LatencyStats newBucket(HistogramConfig histogramConfig) {
         requireNonNull(pauseDetector);

File: micrometer-core/src/main/java/io/micrometer/core/instrument/histogram/pause/package-info.java
Patch:
@@ -15,7 +15,7 @@
  */
 @NonNullApi
 @NonNullFields
-package io.micrometer.core.instrument.binder.hystrix;
+package io.micrometer.core.instrument.histogram.pause;
 
 import io.micrometer.core.lang.NonNullApi;
 import io.micrometer.core.lang.NonNullFields;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/internal/DefaultGauge.java
Patch:
@@ -19,6 +19,7 @@
 import io.micrometer.core.instrument.Gauge;
 import io.micrometer.core.instrument.Meter;
 import io.micrometer.core.instrument.util.MeterEquivalence;
+import io.micrometer.core.lang.Nullable;
 
 import java.lang.ref.WeakReference;
 import java.util.function.ToDoubleFunction;
@@ -27,7 +28,7 @@ public class DefaultGauge<T> extends AbstractMeter implements Gauge {
     private final WeakReference<T> ref;
     private final ToDoubleFunction<T> value;
 
-    public DefaultGauge(Meter.Id id, T obj, ToDoubleFunction<T> value) {
+    public DefaultGauge(Meter.Id id, @Nullable T obj, ToDoubleFunction<T> value) {
         super(id);
         this.ref = new WeakReference<>(obj);
         this.value = value;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/step/StepDistributionSummary.java
Patch:
@@ -29,6 +29,7 @@ public class StepDistributionSummary extends AbstractDistributionSummary {
     private final StepDouble total;
     private final TimeDecayingMax max;
 
+    @SuppressWarnings("ConstantConditions")
     public StepDistributionSummary(Id id, Clock clock, HistogramConfig histogramConfig) {
         super(id, clock, histogramConfig);
         this.count = new StepLong(clock, histogramConfig.getHistogramExpiry().toMillis());

File: micrometer-core/src/main/java/io/micrometer/core/instrument/step/StepMeterRegistry.java
Patch:
@@ -21,6 +21,7 @@
 import io.micrometer.core.instrument.internal.DefaultGauge;
 import io.micrometer.core.instrument.internal.DefaultLongTaskTimer;
 import io.micrometer.core.instrument.internal.DefaultMeter;
+import io.micrometer.core.lang.Nullable;
 
 import java.util.concurrent.Executors;
 import java.util.concurrent.ScheduledFuture;
@@ -36,7 +37,7 @@
  */
 public abstract class StepMeterRegistry extends MeterRegistry {
     private final StepRegistryConfig config;
-    private ScheduledFuture<?> publisher;
+    @Nullable private ScheduledFuture<?> publisher;
 
     public StepMeterRegistry(StepRegistryConfig config, Clock clock) {
         super(clock);
@@ -65,7 +66,7 @@ public void stop() {
     protected abstract void publish();
 
     @Override
-    protected <T> Gauge newGauge(Meter.Id id, T obj, ToDoubleFunction<T> f) {
+    protected <T> Gauge newGauge(Meter.Id id, @Nullable T obj, ToDoubleFunction<T> f) {
         return new DefaultGauge<>(id, obj, f);
     }
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/step/StepTimer.java
Patch:
@@ -35,6 +35,7 @@ public class StepTimer extends AbstractTimer {
     /**
      * Create a new instance.
      */
+    @SuppressWarnings("ConstantConditions")
     public StepTimer(Id id, Clock clock, HistogramConfig histogramConfig, PauseDetector pauseDetector, TimeUnit baseTimeUnit) {
         super(id, clock, histogramConfig, pauseDetector, baseTimeUnit);
         this.count = new StepLong(clock, histogramConfig.getHistogramExpiry().toMillis());

File: micrometer-core/src/main/java/io/micrometer/core/instrument/util/TimeDecayingMax.java
Patch:
@@ -38,6 +38,7 @@ public class TimeDecayingMax {
     @SuppressWarnings({ "unused", "FieldCanBeLocal" })
     private volatile int rotating = 0; // 0 - not rotating, 1 - rotating
 
+    @SuppressWarnings("ConstantConditions")
     public TimeDecayingMax(Clock clock, HistogramConfig config) {
         this(clock, config.getHistogramExpiry().toMillis(), config.getHistogramBufferLength());
     }

File: micrometer-core/src/main/java/io/micrometer/core/lang/NonNullFields.java
Patch:
@@ -33,12 +33,11 @@
  * <p>Should be used at package level in association with {@link Nullable}
  * annotations at field level.
  *
- * @since 1.0
  * @see NonNullFields
  * @see Nullable
  * @see NonNull
  */
-@Target(ElementType.PACKAGE)
+@Target({ElementType.PACKAGE, ElementType.TYPE})
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
 @Nonnull

File: micrometer-core/src/test/java/io/micrometer/core/instrument/MeterFilterTest.java
Patch:
@@ -18,6 +18,7 @@
 import io.micrometer.core.Issue;
 import io.micrometer.core.instrument.config.MeterFilter;
 import io.micrometer.core.instrument.config.MeterFilterReply;
+import io.micrometer.core.lang.Nullable;
 import org.assertj.core.api.Condition;
 import org.junit.jupiter.api.Test;
 
@@ -90,7 +91,7 @@ private static Condition<Meter.Id> tag(String tagKey) {
         return tag(tagKey, null);
     }
 
-    private static Condition<Meter.Id> tag(String tagKey, String tagValue) {
+    private static Condition<Meter.Id> tag(String tagKey, @Nullable String tagValue) {
         return new Condition<>(
             id -> stream(id.getTags().spliterator(), false)
                 .anyMatch(t -> t.getKey().equals(tagKey) && (tagValue == null || t.getValue().equals(tagValue))),

File: micrometer-core/src/test/java/io/micrometer/core/instrument/MeterRegistryTest.java
Patch:
@@ -23,6 +23,8 @@
 import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
 import org.junit.jupiter.api.Test;
 
+import javax.annotation.Nonnull;
+
 import static org.assertj.core.api.Assertions.assertThat;
 
 class MeterRegistryTest {
@@ -54,7 +56,7 @@ void idTransformingMeterFilter() {
     void histogramConfigTransformingMeterFilter() {
         MeterRegistry registry = new SimpleMeterRegistry() {
             @Override
-            protected Timer newTimer(Meter.Id id, HistogramConfig histogramConfig, PauseDetector pauseDetector) {
+            protected Timer newTimer(@Nonnull Meter.Id id, HistogramConfig histogramConfig, PauseDetector pauseDetector) {
                 assertThat(histogramConfig.isPublishingHistogram()).isTrue();
                 return super.newTimer(id, histogramConfig, pauseDetector);
             }

File: micrometer-core/src/test/java/io/micrometer/core/instrument/dropwizard/DropwizardMeterRegistryTest.java
Patch:
@@ -21,6 +21,7 @@
 import io.micrometer.core.instrument.MockClock;
 import io.micrometer.core.instrument.Statistic;
 import io.micrometer.core.instrument.util.HierarchicalNameMapper;
+import io.micrometer.core.lang.Nullable;
 import org.junit.jupiter.api.Test;
 
 import java.util.Arrays;
@@ -34,10 +35,11 @@ class DropwizardMeterRegistryTest {
         new DropwizardConfig() {
             @Override
             public String prefix() {
-                return null;
+                return "dropwizard";
             }
 
             @Override
+            @Nullable
             public String get(String k) {
                 return null;
             }

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/TimedUtils.java
Patch:
@@ -31,6 +31,7 @@ private TimedUtils() {
 
     public static Set<Timed> findTimedAnnotations(AnnotatedElement element) {
         Timed t = AnnotationUtils.findAnnotation(element, Timed.class);
+        //noinspection ConstantConditions
         if (t != null)
             return Collections.singleton(t);
 

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/MeterRegistryConfigurer.java
Patch:
@@ -17,6 +17,7 @@
 
 import io.micrometer.core.instrument.Meter;
 import io.micrometer.core.instrument.MeterRegistry;
+import io.micrometer.core.lang.NonNullApi;
 
 /**
  * Callback interface that can be used to customize auto-configured {@link MeterRegistry
@@ -28,6 +29,7 @@
  * @author Jon Schneider
  */
 @FunctionalInterface
+@NonNullApi
 public interface MeterRegistryConfigurer {
 
     /**

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/MetricsAutoConfiguration.java
Patch:
@@ -81,6 +81,7 @@ MeterRegistryConfigurer springEnvironmentMeterFilter(Environment environment) {
         return r -> r.config().meterFilter(new SpringEnvironmentMeterFilter(environment));
     }
 
+    @SuppressWarnings("ConstantConditions")
     @Bean
     @ConditionalOnMissingBean(MeterRegistry.class)
     public CompositeMeterRegistry compositeMeterRegistry(
@@ -141,6 +142,7 @@ public ScheduledMethodMetrics metricsSchedulingAspect(MeterRegistry registry) {
     @Configuration
     static class MeterRegistryConfigurationSupport {
 
+        @SuppressWarnings("ConstantConditions")
         MeterRegistryConfigurationSupport(MeterRegistry registry,
                                           MetricsProperties config,
                                           ObjectProvider<Collection<MeterBinder>> binders) {

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/web/tomcat/TomcatMetricsConfiguration.java
Patch:
@@ -16,6 +16,7 @@
 package io.micrometer.spring.autoconfigure.web.tomcat;
 
 import io.micrometer.core.instrument.binder.tomcat.TomcatMetrics;
+import io.micrometer.core.lang.Nullable;
 import org.apache.catalina.Container;
 import org.apache.catalina.Context;
 import org.apache.catalina.Manager;
@@ -40,6 +41,7 @@ public TomcatMetrics metrics(ApplicationContext applicationContext) {
         return new TomcatMetrics(manager, Collections.emptyList());
     }
 
+    @Nullable
     private Manager getManagerFromContext(EmbeddedWebApplicationContext applicationContext) {
         EmbeddedServletContainer embeddedServletContainer = applicationContext.getEmbeddedServletContainer();
         if (embeddedServletContainer instanceof TomcatEmbeddedServletContainer) {
@@ -48,6 +50,7 @@ private Manager getManagerFromContext(EmbeddedWebApplicationContext applicationC
         return null;
     }
 
+    @Nullable
     private Manager getManagerFromContainer(TomcatEmbeddedServletContainer servletContainer) {
         for (Container container : servletContainer.getTomcat().getHost().findChildren()) {
             if (container instanceof Context) {

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/web/client/DefaultRestTemplateExchangeTagsProvider.java
Patch:
@@ -16,6 +16,7 @@
 package io.micrometer.spring.web.client;
 
 import io.micrometer.core.instrument.Tag;
+import io.micrometer.core.lang.Nullable;
 import org.springframework.http.HttpRequest;
 import org.springframework.http.client.ClientHttpResponse;
 import org.springframework.util.StringUtils;
@@ -32,7 +33,7 @@ public class DefaultRestTemplateExchangeTagsProvider
 
     @Override
     public Iterable<Tag> getTags(String urlTemplate, HttpRequest request,
-                                 ClientHttpResponse response) {
+                                 @Nullable ClientHttpResponse response) {
         Tag uriTag = StringUtils.hasText(urlTemplate)
             ? RestTemplateExchangeTags.uri(urlTemplate)
             : RestTemplateExchangeTags.uri(request);

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/web/client/MetricsClientHttpRequestInterceptor.java
Patch:
@@ -17,6 +17,7 @@
 
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.Timer;
+import io.micrometer.core.lang.Nullable;
 import org.springframework.core.NamedThreadLocal;
 import org.springframework.http.HttpRequest;
 import org.springframework.http.client.ClientHttpRequestExecution;
@@ -84,15 +85,15 @@ public URI expand(String url, Object... arguments) {
     }
 
     private Timer.Builder getTimeBuilder(HttpRequest request,
-                                         ClientHttpResponse response) {
+                                         @Nullable ClientHttpResponse response) {
         return Timer.builder(this.metricName)
             .tags(this.tagProvider.getTags(ensureLeadingSlash(urlTemplate.get()), request, response))
             .description("Timer of RestTemplate operation");
     }
 
     // This normalization improves tag value matching when one code path requests test/{id} and another
     // requests /test/{id}
-    private String ensureLeadingSlash(String url) {
+    private String ensureLeadingSlash(@Nullable String url) {
         if(url == null)
             return "/";
         return url.startsWith("/") ? url : "/" + url;

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/web/client/RestTemplateExchangeTags.java
Patch:
@@ -16,6 +16,7 @@
 package io.micrometer.spring.web.client;
 
 import io.micrometer.core.instrument.Tag;
+import io.micrometer.core.lang.Nullable;
 import org.springframework.http.HttpRequest;
 import org.springframework.http.client.ClientHttpResponse;
 import org.springframework.util.StringUtils;
@@ -79,11 +80,11 @@ private static String stripUri(String uri) {
      * @param response the response
      * @return the status tag
      */
-    public static Tag status(ClientHttpResponse response) {
+    public static Tag status(@Nullable ClientHttpResponse response) {
         return Tag.of("status", getStatusMessage(response));
     }
 
-    private static String getStatusMessage(ClientHttpResponse response) {
+    private static String getStatusMessage(@Nullable ClientHttpResponse response) {
         try {
             if (response == null) {
                 return "CLIENT_ERROR";

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/web/client/RestTemplateExchangeTagsProvider.java
Patch:
@@ -16,6 +16,7 @@
 package io.micrometer.spring.web.client;
 
 import io.micrometer.core.instrument.Tag;
+import io.micrometer.core.lang.Nullable;
 import org.springframework.http.HttpRequest;
 import org.springframework.http.client.ClientHttpResponse;
 import org.springframework.web.client.RestTemplate;
@@ -39,6 +40,6 @@ public interface RestTemplateExchangeTagsProvider {
      * @return the tags
      */
     Iterable<Tag> getTags(String urlTemplate, HttpRequest request,
-                          ClientHttpResponse response);
+                          @Nullable ClientHttpResponse response);
 
 }

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/web/servlet/MetricsFilter.java
Patch:
@@ -19,6 +19,7 @@
 import io.micrometer.core.instrument.LongTaskTimer;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.Timer;
+import io.micrometer.core.lang.NonNullApi;
 import io.micrometer.spring.TimedUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -47,6 +48,7 @@
  *
  * @author Jon Schneider
  */
+@NonNullApi
 @Order(Ordered.HIGHEST_PRECEDENCE)
 public class MetricsFilter extends OncePerRequestFilter {
     private static final String EXCEPTION_ATTRIBUTE = "micrometer.requestException";
@@ -80,6 +82,7 @@ protected boolean shouldNotFilterAsyncDispatch() {
         return false;
     }
 
+    @SuppressWarnings("ConstantConditions")
     @Override
     protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {
         HandlerExecutionChain handler = null;

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/SpringEnvironmentMeterFilterTest.java
Patch:
@@ -20,6 +20,7 @@
 import io.micrometer.core.instrument.histogram.pause.PauseDetector;
 import io.micrometer.core.instrument.simple.SimpleConfig;
 import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
+import io.micrometer.core.lang.NonNull;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -52,13 +53,13 @@ public class SpringEnvironmentMeterFilterTest {
 
     private MeterRegistry registry = new SimpleMeterRegistry(SimpleConfig.DEFAULT, new MockClock()) {
         @Override
-        protected Timer newTimer(Meter.Id id, HistogramConfig conf, PauseDetector pauseDetector) {
+        protected Timer newTimer(@NonNull Meter.Id id, @NonNull HistogramConfig conf, @NonNull PauseDetector pauseDetector) {
             histogramConfig = conf;
             return super.newTimer(id, conf, pauseDetector);
         }
 
         @Override
-        protected DistributionSummary newDistributionSummary(Meter.Id id, HistogramConfig conf) {
+        protected DistributionSummary newDistributionSummary(@NonNull Meter.Id id, @NonNull HistogramConfig conf) {
             histogramConfig = conf;
             return super.newDistributionSummary(id, conf);
         }

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/autoconfigure/MetricsAutoConfigurationTest.java
Patch:
@@ -109,7 +109,7 @@ public void registryConfigurersAreAppliedBeforeRegistryIsInjectableElsewhere() {
     @Test
     public void propertyBasedMeterFiltersCanTakeLowerPrecedenceThanProgrammaticallyBoundFilters() {
         registry.timer("my.timer");
-        assertThat(registry.mustFind("my.timer").meter()).isNotPresent();
+        assertThat(registry.find("my.timer").meter()).isNull();
     }
 
     @SpringBootApplication(scanBasePackages = "ignored")

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/autoconfigure/web/client/RestTemplateMetricsConfigurationTest.java
Patch:
@@ -27,8 +27,6 @@
 import org.springframework.test.context.junit4.SpringRunner;
 import org.springframework.web.client.RestTemplate;
 
-import static org.assertj.core.api.Assertions.assertThat;
-
 @RunWith(SpringRunner.class)
 @SpringBootTest(classes = ClientApp.class, webEnvironment = SpringBootTest.WebEnvironment.NONE)
 public class RestTemplateMetricsConfigurationTest {
@@ -45,7 +43,7 @@ public void restTemplatesCreatedWithBuilderAreInstrumented() {
         } catch (Throwable ignored) {
             // doesn't matter whether the request succeeded or not
         }
-        assertThat(registry.find("http.client.requests").meter()).isPresent();
+        registry.mustFind("http.client.requests").meter();
     }
 }
 

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/integration/SpringIntegrationMetricsTest.java
Patch:
@@ -64,8 +64,8 @@ public void springIntegrationMetrics() {
 
         assertThat(registry.mustFind("spring.integration.channel.sends")
             .tags("channel", "convert.input").functionCounter().count()).isEqualTo(1.0);
-        assertThat(registry.mustFind("spring.integration.handler.duration.min").meter()).isPresent();
-        assertThat(registry.mustFind("spring.integration.sourceNames").meter()).isPresent();
+        registry.mustFind("spring.integration.handler.duration.min").meter();
+        registry.mustFind("spring.integration.sourceNames").meter();
     }
 
     @SpringBootApplication

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/jdbc/DataSourceMetricsHikariTest.java
Patch:
@@ -34,7 +34,6 @@
 import java.util.Collection;
 
 import static java.util.Collections.emptyList;
-import static org.assertj.core.api.AssertionsForClassTypes.assertThat;
 
 /**
  * @author Arthur Gavlyukovskiy
@@ -56,7 +55,7 @@ public class DataSourceMetricsHikariTest {
 
     @Test
     public void dataSourceIsInstrumented() throws SQLException, InterruptedException {
-        assertThat(registry.mustFind("data.source.active.connections").meter()).isPresent();
+        registry.mustFind("data.source.active.connections").meter();
     }
 
     @SpringBootApplication(scanBasePackages = "isolated")

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/jdbc/DataSourceMetricsTest.java
Patch:
@@ -34,7 +34,6 @@
 import java.util.Collection;
 
 import static java.util.Collections.emptyList;
-import static org.assertj.core.api.AssertionsForClassTypes.assertThat;
 
 /**
  * @author Jon Schneider
@@ -57,7 +56,7 @@ public class DataSourceMetricsTest {
     @Test
     public void dataSourceIsInstrumented() throws SQLException, InterruptedException {
         dataSource.getConnection().getMetaData();
-        assertThat(registry.find("data.source.max.connections").meter()).isPresent();
+        registry.find("data.source.max.connections").meter();
     }
 
     @SpringBootApplication(scanBasePackages = "isolated")

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/web/client/MetricsRestTemplateCustomizerTest.java
Patch:
@@ -59,10 +59,10 @@ public void interceptRestTemplate() {
 
         String result = restTemplate.getForObject("/test/{id}", String.class, 123);
 
-        assertThat(registry.find("http.client.requests").meters())
+        assertThat(registry.mustFind("http.client.requests").meters())
             .anySatisfy(m -> assertThat(stream(m.getId().getTags().spliterator(), false).map(Tag::getKey)).doesNotContain("bucket"));
 
-        assertThat(registry.find("http.client.requests")
+        assertThat(registry.mustFind("http.client.requests")
             .tags("method", "GET", "uri", "/test/{id}", "status", "200")
             .timer().count()).isEqualTo(1L);
 

File: micrometer-test/src/main/java/io/micrometer/core/tck/GaugeTest.java
Patch:
@@ -26,6 +26,7 @@
 import static java.util.Collections.emptyList;
 import static org.assertj.core.api.Assertions.assertThat;
 
+@SuppressWarnings("ConstantConditions")
 interface GaugeTest {
     @Test
     @DisplayName("gauges attached to a number are updated when their values are observed")

File: micrometer-test/src/main/java/io/micrometer/core/tck/MeterRegistryCompatibilityKit.java
Patch:
@@ -29,6 +29,7 @@
 
 import static io.micrometer.core.instrument.MockClock.clock;
 import static java.util.Collections.emptyList;
+import static java.util.Objects.requireNonNull;
 import static org.assertj.core.api.Assertions.assertThat;
 
 /**
@@ -120,7 +121,7 @@ void functionTimerUnits(MeterRegistry registry) {
         clock(registry).add(step());
         assertThat(ft.measure())
             .anySatisfy(ms -> {
-                TimeUnit baseUnit = TimeUnit.valueOf(ft.getId().getBaseUnit().toUpperCase());
+                TimeUnit baseUnit = TimeUnit.valueOf(requireNonNull(ft.getId().getBaseUnit()).toUpperCase());
                 assertThat(ms.getStatistic()).isEqualTo(Statistic.TotalTime);
                 assertThat(TimeUtils.convert(ms.getValue(), baseUnit, TimeUnit.MILLISECONDS)).isEqualTo(1);
             });

File: micrometer-test/src/main/java/io/micrometer/core/tck/TimerTest.java
Patch:
@@ -123,6 +123,7 @@ default void recordMax(MeterRegistry registry) {
         assertThat(timer.max(TimeUnit.SECONDS)).isEqualTo(1);
         assertThat(timer.max(TimeUnit.MILLISECONDS)).isEqualTo(1000);
 
+        //noinspection ConstantConditions
         clock(registry).add(Duration.ofMillis(step().toMillis() * HistogramConfig.DEFAULT.getHistogramBufferLength()));
         assertThat(timer.max(TimeUnit.SECONDS)).isEqualTo(0);
     }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/GuavaCacheMetrics.java
Patch:
@@ -54,15 +54,15 @@ public static <C extends Cache> C monitor(MeterRegistry registry, C cache, Strin
      * @see com.google.common.cache.CacheStats
      */
     public static <C extends Cache> C monitor(MeterRegistry registry, C cache, String name, Iterable<Tag> tags) {
-        new GuavaCacheMetrics(cache, tags, name).bindTo(registry);
+        new GuavaCacheMetrics(cache, name, tags).bindTo(registry);
         return cache;
     }
 
     private final String name;
     private final Iterable<Tag> tags;
     private final Cache<?, ?> cache;
 
-    public GuavaCacheMetrics(Cache<?, ?> cache, Iterable<Tag> tags, String name) {
+    public GuavaCacheMetrics(Cache<?, ?> cache, String name, Iterable<Tag> tags) {
         this.name = name;
         this.tags = tags;
         this.cache = cache;

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/cache/CaffeineCacheMetricsTest.java
Patch:
@@ -18,7 +18,6 @@
 import com.github.benmanes.caffeine.cache.Cache;
 import com.github.benmanes.caffeine.cache.Caffeine;
 import com.github.benmanes.caffeine.cache.LoadingCache;
-import io.micrometer.core.instrument.FunctionCounter;
 import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.Tags;
 import io.micrometer.core.instrument.simple.SimpleMeterRegistry;

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/cache/EhCache2MetricsTest.java
Patch:
@@ -23,7 +23,6 @@
 import org.junit.jupiter.api.Test;
 
 import static java.util.Collections.emptyList;
-import static org.assertj.core.api.Assertions.assertThat;
 
 class EhCache2MetricsTest {
     @Test

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/cache/HazelcastCacheMetricsTest.java
Patch:
@@ -19,7 +19,6 @@
 import com.hazelcast.core.Hazelcast;
 import com.hazelcast.core.HazelcastInstance;
 import com.hazelcast.core.IMap;
-import io.micrometer.core.instrument.FunctionTimer;
 import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/cache/JCacheMetricsTest.java
Patch:
@@ -15,7 +15,6 @@
  */
 package io.micrometer.core.instrument.binder.cache;
 
-import io.micrometer.core.instrument.Gauge;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
 import org.ehcache.jsr107.EhcacheCachingProvider;

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/db/DatabaseTableMetricsTest.java
Patch:
@@ -15,7 +15,6 @@
  */
 package io.micrometer.core.instrument.binder.db;
 
-import io.micrometer.core.instrument.Gauge;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
 import org.hsqldb.jdbc.JDBCDataSource;

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/hystrix/MicrometerMetricsPublisherCommandTest.java
Patch:
@@ -17,8 +17,6 @@
 
 import com.netflix.hystrix.*;
 import com.netflix.hystrix.strategy.properties.HystrixPropertiesCommandDefault;
-import io.micrometer.core.instrument.FunctionCounter;
-import io.micrometer.core.instrument.Gauge;
 import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.Tags;
 import io.micrometer.core.instrument.simple.SimpleMeterRegistry;

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/jpa/HibernateMetricsTest.java
Patch:
@@ -15,7 +15,6 @@
  */
 package io.micrometer.core.instrument.binder.jpa;
 
-import io.micrometer.core.instrument.FunctionCounter;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.MockClock;
 import io.micrometer.core.instrument.simple.SimpleConfig;

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/logging/LogbackMetricsTest.java
Patch:
@@ -18,7 +18,6 @@
 import ch.qos.logback.classic.Level;
 import ch.qos.logback.classic.Logger;
 import io.micrometer.core.Issue;
-import io.micrometer.core.instrument.Counter;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.MockClock;
 import io.micrometer.core.instrument.simple.SimpleConfig;

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/okhttp3/OkHttpMetricsEventListenerTest.java
Patch:
@@ -18,7 +18,6 @@
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.MockClock;
 import io.micrometer.core.instrument.Tags;
-import io.micrometer.core.instrument.Timer;
 import io.micrometer.core.instrument.simple.SimpleConfig;
 import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
 import okhttp3.OkHttpClient;

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/system/FileDescriptorMetricsTest.java
Patch:
@@ -15,7 +15,6 @@
  */
 package io.micrometer.core.instrument.binder.system;
 
-import io.micrometer.core.instrument.Gauge;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.Tags;
 import io.micrometer.core.instrument.simple.SimpleMeterRegistry;

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/system/ProcessorMetricsTest.java
Patch:
@@ -17,7 +17,6 @@
 
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
-import net.sf.ehcache.search.expression.IsNull;
 import org.junit.jupiter.api.Test;
 
 import static org.assertj.core.api.AssertionsForClassTypes.assertThat;

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/system/UptimeMetricsTest.java
Patch:
@@ -17,7 +17,6 @@
 
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.MockClock;
-import io.micrometer.core.instrument.TimeGauge;
 import io.micrometer.core.instrument.simple.SimpleConfig;
 import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
 import org.junit.jupiter.api.Test;

File: micrometer-jersey2/src/test/java/io/micrometer/jersey2/server/MetricsRequestEventListenerTest.java
Patch:
@@ -109,7 +109,7 @@ public void redirectsAreAccumulatedUnderSameUri() {
 
         assertThat(registry.mustFind(METRIC_NAME)
             .tags(tagsFrom("REDIRECTION", 302, null)).timer().count())
-            .isEqualTo(2);
+            .isEqualTo(1);
 
         assertThat(registry.mustFind(METRIC_NAME)
             .tags(tagsFrom("REDIRECTION", 307, null)).timer().count())

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/web/client/MetricsClientHttpRequestInterceptor.java
Patch:
@@ -93,6 +93,8 @@ private Timer.Builder getTimeBuilder(HttpRequest request,
     // This normalization improves tag value matching when one code path requests test/{id} and another
     // requests /test/{id}
     private String ensureLeadingSlash(String url) {
+        if(url == null)
+            return "/";
         return url.startsWith("/") ? url : "/" + url;
     }
 }

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/SpringEnvironmentMeterFilterTest.java
Patch:
@@ -20,7 +20,6 @@
 import io.micrometer.core.instrument.histogram.pause.PauseDetector;
 import io.micrometer.core.instrument.simple.SimpleConfig;
 import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
-import net.sf.ehcache.search.expression.IsNull;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/autoconfigure/MeterRegistryConfigurerTest.java
Patch:
@@ -26,8 +26,6 @@
 import org.springframework.test.context.TestPropertySource;
 import org.springframework.test.context.junit4.SpringRunner;
 
-import static org.assertj.core.api.Assertions.assertThat;
-
 /**
  * @author Jon Schneider
  */

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/autoconfigure/MetricsAutoConfigurationTest.java
Patch:
@@ -17,7 +17,6 @@
 
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.MockClock;
-import io.micrometer.core.instrument.Timer;
 import io.micrometer.core.instrument.binder.MeterBinder;
 import io.micrometer.core.instrument.binder.jvm.JvmMemoryMetrics;
 import io.micrometer.core.instrument.binder.logging.LogbackMetrics;

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/cache/ConcurrentMapCacheMetricsTest.java
Patch:
@@ -15,9 +15,7 @@
  */
 package io.micrometer.spring.cache;
 
-import io.micrometer.core.instrument.Gauge;
 import io.micrometer.core.instrument.MeterRegistry;
-import io.micrometer.core.instrument.Statistic;
 import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
 import org.junit.Test;
 import org.springframework.cache.concurrent.ConcurrentMapCache;

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/integration/SpringIntegrationMetricsTest.java
Patch:
@@ -15,10 +15,8 @@
  */
 package io.micrometer.spring.integration;
 
-import io.micrometer.core.instrument.FunctionCounter;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.MockClock;
-import io.micrometer.core.instrument.Statistic;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.beans.factory.annotation.Autowired;

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/scheduling/ExecutorServiceMetricsTest.java
Patch:
@@ -23,8 +23,6 @@
 import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;
 import org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;
 
-import static org.assertj.core.api.AssertionsForClassTypes.assertThat;
-
 /**
  * @author Jon Schneider
  * @author Clint Checketts

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/scheduling/ScheduledMethodMetricsTest.java
Patch:
@@ -16,9 +16,7 @@
 package io.micrometer.spring.scheduling;
 
 import io.micrometer.core.annotation.Timed;
-import io.micrometer.core.instrument.LongTaskTimer;
 import io.micrometer.core.instrument.MeterRegistry;
-import io.micrometer.core.instrument.Timer;
 import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
 import org.junit.Ignore;
 import org.junit.Test;
@@ -35,7 +33,6 @@
 
 import java.util.concurrent.CountDownLatch;
 
-import static io.micrometer.core.instrument.Statistic.Count;
 import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(SpringRunner.class)

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/security/SpringSecurityTest.java
Patch:
@@ -34,7 +34,6 @@
 import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.RestController;
 
-import static org.assertj.core.api.Assertions.assertThat;
 import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
 

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/web/servlet/MetricsFilterCustomExceptionHandlerTest.java
Patch:
@@ -19,8 +19,6 @@
 import io.micrometer.core.instrument.Clock;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.MockClock;
-import io.micrometer.core.instrument.Statistic;
-import io.micrometer.core.instrument.Timer;
 import io.micrometer.core.instrument.simple.SimpleConfig;
 import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
 import io.micrometer.spring.autoconfigure.web.servlet.ServletMetricsConfiguration;

File: micrometer-test/src/main/java/io/micrometer/core/tck/CounterTest.java
Patch:
@@ -18,7 +18,6 @@
 import io.micrometer.core.instrument.Counter;
 import io.micrometer.core.instrument.Meter;
 import io.micrometer.core.instrument.MeterRegistry;
-import io.micrometer.core.instrument.Statistic;
 import org.junit.jupiter.api.DisplayName;
 import org.junit.jupiter.api.Test;
 

File: micrometer-test/src/main/java/io/micrometer/core/tck/GaugeTest.java
Patch:
@@ -17,7 +17,6 @@
 
 import io.micrometer.core.instrument.Gauge;
 import io.micrometer.core.instrument.MeterRegistry;
-import io.micrometer.core.instrument.Statistic;
 import org.junit.jupiter.api.DisplayName;
 import org.junit.jupiter.api.Test;
 
@@ -26,7 +25,6 @@
 
 import static java.util.Collections.emptyList;
 import static org.assertj.core.api.Assertions.assertThat;
-import static org.junit.jupiter.api.Assertions.assertNotNull;
 
 interface GaugeTest {
     @Test

File: implementations/micrometer-registry-ganglia/src/test/java/io/micrometer/ganglia/GangliaMeterRegistryCompatibilityTest.java
Patch:
@@ -35,7 +35,7 @@ public boolean enabled() {
             public String get(String k) {
                 return null;
             }
-        }, HierarchicalNameMapper.DEFAULT, new MockClock());
+        }, new MockClock(), HierarchicalNameMapper.DEFAULT);
     }
 
     @Override

File: implementations/micrometer-registry-graphite/src/main/java/io/micrometer/graphite/GraphiteProtocol.java
Patch:
@@ -17,5 +17,6 @@
 
 public enum GraphiteProtocol {
     Plaintext,
+    Udp,
     Pickled
 }

File: implementations/micrometer-registry-graphite/src/test/java/io/micrometer/graphite/GraphiteMeterRegistryCompatibilityTest.java
Patch:
@@ -35,7 +35,7 @@ public boolean enabled() {
             public String get(String k) {
                 return null;
             }
-        }, HierarchicalNameMapper.DEFAULT, new MockClock());
+        }, new MockClock(), HierarchicalNameMapper.DEFAULT);
     }
 
     @Override

File: implementations/micrometer-registry-jmx/src/test/java/io/micrometer/jmx/JmxMeterRegistryCompatibilityTest.java
Patch:
@@ -34,7 +34,7 @@ static void before() {
 
     @Override
     public MeterRegistry registry() {
-        return new JmxMeterRegistry(JmxConfig.DEFAULT, HierarchicalNameMapper.DEFAULT, new MockClock());
+        return new JmxMeterRegistry(JmxConfig.DEFAULT, new MockClock(), HierarchicalNameMapper.DEFAULT);
     }
 
     @Override

File: micrometer-core/src/main/java/io/micrometer/core/instrument/dropwizard/DropwizardMeterRegistry.java
Patch:
@@ -40,11 +40,11 @@ public class DropwizardMeterRegistry extends MeterRegistry {
     private final DropwizardClock dropwizardClock;
     private final DropwizardConfig dropwizardConfig;
 
-    public DropwizardMeterRegistry(DropwizardConfig config, HierarchicalNameMapper nameMapper, Clock clock) {
+    public DropwizardMeterRegistry(DropwizardConfig config, MetricRegistry registry, HierarchicalNameMapper nameMapper, Clock clock) {
         super(clock);
         this.dropwizardConfig = config;
         this.dropwizardClock = new DropwizardClock(clock);
-        this.registry = new MetricRegistry();
+        this.registry = registry;
         this.nameMapper = nameMapper;
         this.config().namingConvention(NamingConvention.camelCase);
     }

File: micrometer-core/src/test/java/io/micrometer/core/instrument/dropwizard/DropwizardMeterRegistryTest.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.micrometer.core.instrument.dropwizard;
 
+import com.codahale.metrics.MetricRegistry;
 import io.micrometer.core.instrument.Measurement;
 import io.micrometer.core.instrument.Meter;
 import io.micrometer.core.instrument.MockClock;
@@ -40,7 +41,7 @@ public String prefix() {
             public String get(String k) {
                 return null;
             }
-        }, HierarchicalNameMapper.DEFAULT, clock);
+        }, new MetricRegistry(), HierarchicalNameMapper.DEFAULT, clock);
 
     @Test
     void gaugeOnNullValue() {

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/export/ganglia/GangliaExportConfiguration.java
Patch:
@@ -112,7 +112,7 @@ public GangliaConfig gangliaConfig(GangliaProperties props) {
     @ConditionalOnProperty(value = "management.metrics.export.ganglia.enabled", matchIfMissing = true)
     public MetricsExporter gangliaExporter(GangliaConfig config,
                                            HierarchicalNameMapper nameMapper, Clock clock) {
-        return () -> new GangliaMeterRegistry(config, nameMapper, clock);
+        return () -> new GangliaMeterRegistry(config, clock, nameMapper);
     }
 
     @Bean

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/export/graphite/GraphiteExportConfiguration.java
Patch:
@@ -102,7 +102,7 @@ public GraphiteConfig graphiteConfig(GraphiteProperties props) {
     @ConditionalOnProperty(value = "management.metrics.export.graphite.enabled", matchIfMissing = true)
     public MetricsExporter graphiteExporter(GraphiteConfig config,
                                             HierarchicalNameMapper nameMapper, Clock clock) {
-        return () -> new GraphiteMeterRegistry(config, nameMapper, clock);
+        return () -> new GraphiteMeterRegistry(config, clock, nameMapper);
     }
 
     @Bean

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/export/jmx/JmxExportConfiguration.java
Patch:
@@ -66,7 +66,7 @@ public JmxConfig jmxConfig(JmxProperties props) {
     @Bean
     @ConditionalOnProperty(value = "management.metrics.export.jmx.enabled", matchIfMissing = true)
     public MetricsExporter jmxExporter(JmxConfig config, HierarchicalNameMapper nameMapper, Clock clock) {
-        return () -> new JmxMeterRegistry(config, nameMapper, clock);
+        return () -> new JmxMeterRegistry(config, clock, nameMapper);
     }
 
     @Bean

File: micrometer-core/src/main/java/io/micrometer/core/instrument/histogram/TimeWindowHistogram.java
Patch:
@@ -32,6 +32,7 @@ public class TimeWindowHistogram extends TimeWindowHistogramBase<DoubleRecorder,
     public TimeWindowHistogram(Clock clock, HistogramConfig histogramConfig) {
         super(clock, histogramConfig, DoubleRecorder.class);
         intervalHistogram = new DoubleHistogram(NUM_SIGNIFICANT_VALUE_DIGITS);
+        initRingBuffer();
     }
 
     @Override

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/MicrometerCollector.java
Patch:
@@ -23,6 +23,7 @@
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
+import java.util.concurrent.CopyOnWriteArrayList;
 import java.util.stream.Stream;
 
 import static java.util.stream.Collectors.toList;
@@ -36,7 +37,7 @@ interface Child {
     }
 
     private final Meter.Id id;
-    private final List<Child> children = new ArrayList<>();
+    private final List<Child> children = new CopyOnWriteArrayList<>();
     private Type type;
     private final String conventionName;
     private final List<String> tagKeys;

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/jersey2/server/JerseyServerMetricsConfiguration.java
Patch:
@@ -35,7 +35,7 @@
  */
 @Configuration
 @ConditionalOnClass(MicrometerApplicationEventListener.class)
-@ConditionalOnProperty(value = "spring.metrics.jersey2.server.enabled", matchIfMissing = true)
+@ConditionalOnProperty(value = "management.metrics.jersey2.server.enabled", matchIfMissing = true)
 @EnableConfigurationProperties(JerseyServerMetricsProperties.class)
 public class JerseyServerMetricsConfiguration {
 

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/jersey2/server/JerseyServerMetricsProperties.java
Patch:
@@ -22,7 +22,7 @@
  *
  * @author Michael Weirauch
  */
-@ConfigurationProperties(prefix = "spring.metrics.jersey2.server")
+@ConfigurationProperties(prefix = "management.metrics.jersey2.server")
 public class JerseyServerMetricsProperties {
 
     private boolean enabled = true;

File: micrometer-jersey2/src/test/java/io/micrometer/jersey2/server/MicrometerRequestEventListenerTest.java
Patch:
@@ -85,6 +85,9 @@ public void resourcesAreTimed() {
         Optional<Timer> timerSubName = registry.find(METRIC_NAME)
                 .tags(tagsFrom("GET", "/sub-resource/sub-hello/{name}", 200, null)).timer();
         assertThat(timerSubName).hasValueSatisfying(t -> assertThat(t.count()).isEqualTo(1));
+
+        // assert we are not auto-timing long task @Timed
+        assertThat(registry.getMeters()).hasSize(4);
     }
 
     @Test

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/async/ThreadPoolTaskExecutorMetricsTest.java
Patch:
@@ -77,12 +77,12 @@ public void monitorExecutorService() throws InterruptedException {
         pool.submit(() -> System.out.println("boop"));
 
         taskStart.await(1, TimeUnit.SECONDS);
-        assertThat(registry.find("beep.pool.queued").tags(userTags).value(Value, 1.0).gauge()).isPresent();
+        assertThat(registry.find("beep.pool.queued").tags(userTags).gauge().map(Gauge::value)).hasValue(1.0);
 
         taskComplete.countDown();
         pool.shutdown();
 
-        assertThat(registry.find("beep.pool").tags(userTags).value(Count, 2.0).timer()).isPresent();
-        assertThat(registry.find("beep.pool.queued").tags(userTags).value(Value, 0.0).gauge()).isPresent();
+        assertThat(registry.find("beep.pool").tags(userTags).timer().map(Timer::count)).hasValue(2L);
+        assertThat(registry.find("beep.pool.queued").tags(userTags).gauge().map(Gauge::value)).hasValue(0.0);
     }
 }

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/cache/ConcurrentMapCacheMetricsTest.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.micrometer.spring.cache;
 
+import io.micrometer.core.instrument.Gauge;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.Statistic;
 import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
@@ -33,7 +34,7 @@ public void gaugeCacheSize() {
         MeterRegistry registry = new SimpleMeterRegistry();
         new ConcurrentMapCacheMetrics(cache, "spring.cache", emptyList()).bindTo(registry);
 
-        assertThat(registry.find("spring.cache.size").tags("name", "a").value(Statistic.Value, 1.0).gauge())
-            .isPresent();
+        assertThat(registry.find("spring.cache.size").tags("name", "a")
+            .gauge().map(Gauge::value)).hasValue(1.0);
     }
 }

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/integration/SpringIntegrationMetricsTest.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.micrometer.spring.integration;
 
+import io.micrometer.core.instrument.FunctionCounter;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.MockClock;
 import io.micrometer.core.instrument.Statistic;
@@ -64,7 +65,7 @@ public void springIntegrationMetrics() {
         converter.fahrenheitToCelcius(68.0f);
 
         assertThat(registry.find("spring.integration.channel.sends")
-            .tags("channel", "convert.input").value(Statistic.Count, 1).meter()).isPresent();
+            .tags("channel", "convert.input").functionCounter().map(FunctionCounter::count)).hasValue(1.0);
         assertThat(registry.find("spring.integration.handler.duration.min").meter()).isPresent();
         assertThat(registry.find("spring.integration.sourceNames").meter()).isPresent();
     }

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/web/client/MetricsRestTemplateCustomizerTest.java
Patch:
@@ -19,6 +19,7 @@
 import io.micrometer.core.instrument.MockClock;
 import io.micrometer.core.instrument.Statistic;
 import io.micrometer.core.instrument.Tag;
+import io.micrometer.core.instrument.Timer;
 import io.micrometer.core.instrument.simple.SimpleConfig;
 import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
 import org.junit.Test;
@@ -62,7 +63,7 @@ registry, new DefaultRestTemplateExchangeTagsProvider(),
 
         assertThat(registry.find("http.client.requests")
             .tags("method", "GET", "uri", "/test/{id}", "status", "200")
-            .value(Statistic.Count, 1.0).timer()).isPresent();
+            .timer().map(Timer::count)).hasValue(1L);
 
         assertThat(result).isEqualTo("OK");
 

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/web/servlet/WebMvcMetricsIntegrationTest.java
Patch:
@@ -20,6 +20,7 @@
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.MockClock;
 import io.micrometer.core.instrument.Statistic;
+import io.micrometer.core.instrument.Timer;
 import io.micrometer.core.instrument.simple.SimpleConfig;
 import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
 import io.micrometer.spring.autoconfigure.web.servlet.WebMvcMetricsConfiguration;
@@ -80,7 +81,7 @@ public void handledExceptionIsRecordedInMetricTag() throws Exception {
         this.mvc.perform(get("/api/handledError")).andExpect(status().is5xxServerError());
 
         assertThat(this.registry.find("http.server.requests")
-            .tags("exception", "Exception1", "status", "500").value(Statistic.Count, 1.0).timer())
+            .//TODOCDC ("exception", "Exception1").timer().map(Timer::count)).hasValue(1L)
             .isPresent();
     }
 
@@ -90,8 +91,7 @@ public void rethrownExceptionIsRecordedInMetricTag() throws Exception {
             .andExpect(status().is5xxServerError()));
 
         assertThat(this.registry.find("http.server.requests")
-            .tags("exception", "Exception2", "status", "500").value(Statistic.Count, 1.0).timer())
-            .isPresent();
+            .//TODOCDC tags("exception", "Exception2").timer().map(Timer::count)).hasValue(1L);
     }
 
     @Configuration

File: micrometer-test/src/main/java/io/micrometer/core/tck/CounterTest.java
Patch:
@@ -69,6 +69,6 @@ default void functionTrackingCounter(MeterRegistry registry) {
 
         clock(registry).add(step());
         registry.forEachMeter(Meter::measure);
-        assertThat(registry.find("tracking").value(Statistic.Count, 1.0).meter()).isPresent();
+        assertThat(registry.find("tracking").counter().map(Counter::count)).hasValue(1.0);
     }
 }

File: micrometer-test/src/main/java/io/micrometer/core/tck/GaugeTest.java
Patch:
@@ -80,6 +80,6 @@ default void mapSizeGauge(MeterRegistry registry) {
     @DisplayName("gauges that reference an object that is garbage collected report NaN")
     default void garbageCollectedSourceObject(MeterRegistry registry) {
         registry.gauge("my.gauge", emptyList(), (Map) null, Map::size);
-        assertThat(registry.find("my.gauge").value(Statistic.Value, 0).gauge()).isPresent();
+        assertThat(registry.find("my.gauge").gauge().map(Gauge::value)).hasValue(0.0);
     }
-}
\ No newline at end of file
+}

File: micrometer-test/src/main/java/io/micrometer/core/tck/MeterRegistryCompatibilityKit.java
Patch:
@@ -90,9 +90,9 @@ void findMetersByValue(MeterRegistry registry) {
 
         clock(registry).add(step());
 
-        assertThat(registry.find("counter").value(Count, 1.0).counter()).isPresent();
-        assertThat(registry.find("timer").value(Count, 1.0).timer()).isPresent();
-        assertThat(registry.find("timer").value(Total, 10.0).timer()).isPresent();
+        assertThat(registry.find("counter").counter().map(Counter::count)).hasValue(1.0);
+        assertThat(registry.find("timer").timer().map(Timer::count)).hasValue(1L);
+        assertThat(registry.find("timer").timer().map(ti -> ti.totalTime(TimeUnit.NANOSECONDS))).hasValue(10.0);
     }
 
     @Test

File: micrometer-core/src/main/java/io/micrometer/core/instrument/step/StepTimer.java
Patch:
@@ -39,7 +39,7 @@ public StepTimer(Id id, Clock clock, HistogramConfig histogramConfig, PauseDetec
         super(id, clock, histogramConfig, pauseDetector, baseTimeUnit);
         this.count = new StepLong(clock, histogramConfig.getHistogramExpiry().toMillis());
         this.total = new StepLong(clock, histogramConfig.getHistogramExpiry().toMillis());
-        this.max = new TimeDecayingMax(clock, histogramConfig.getHistogramExpiry().toMillis(), histogramConfig.getHistogramBufferLength());
+        this.max = new TimeDecayingMax(clock, histogramConfig);
     }
 
     @Override

File: implementations/micrometer-registry-signalfx/src/main/java/io/micrometer/signalfx/SignalFxConfig.java
Patch:
@@ -17,8 +17,8 @@
 
 import io.micrometer.core.instrument.step.StepRegistryConfig;
 
-public interface SignalfxConfig extends StepRegistryConfig {
-    SignalfxConfig DEFAULT = k -> null;
+public interface SignalFxConfig extends StepRegistryConfig {
+    SignalFxConfig DEFAULT = k -> null;
 
     @Override
     default String prefix() {

File: implementations/micrometer-registry-signalfx/src/main/java/io/micrometer/signalfx/SignalFxNamingConvention.java
Patch:
@@ -22,14 +22,14 @@
  * See https://developers.signalfx.com/reference#section-criteria-for-metric-and-dimension-names-and-values for criteria.
  * @author Jon Schneider
  */
-public class SignalfxNamingConvention implements NamingConvention {
+public class SignalFxNamingConvention implements NamingConvention {
     private final NamingConvention rootConvention;
 
-    public SignalfxNamingConvention() {
+    public SignalFxNamingConvention() {
         this(NamingConvention.dot);
     }
 
-    public SignalfxNamingConvention(NamingConvention rootConvention) {
+    public SignalFxNamingConvention(NamingConvention rootConvention) {
         this.rootConvention = rootConvention;
     }
 

File: implementations/micrometer-registry-signalfx/src/test/java/io/micrometer/signalfx/SignalFxMeterRegistryCompatibilityTest.java
Patch:
@@ -22,16 +22,16 @@
 
 import java.time.Duration;
 
-public class SignalfxMeterRegistryCompatibilityTest extends MeterRegistryCompatibilityKit {
+public class SignalFxMeterRegistryCompatibilityTest extends MeterRegistryCompatibilityKit {
     @Override
     public MeterRegistry registry() {
         return new CompositeMeterRegistry(new MockClock()) {{
-            add(new SignalfxMeterRegistry(SignalfxConfig.DEFAULT, clock));
+            add(new SignalFxMeterRegistry(SignalFxConfig.DEFAULT, clock));
         }};
     }
 
     @Override
     public Duration step() {
-        return SignalfxConfig.DEFAULT.step();
+        return SignalFxConfig.DEFAULT.step();
     }
 }
\ No newline at end of file

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/MetricsAutoConfiguration.java
Patch:
@@ -31,7 +31,7 @@
 import io.micrometer.spring.autoconfigure.export.jmx.JmxExportConfiguration;
 import io.micrometer.spring.autoconfigure.export.newrelic.NewRelicExportConfiguration;
 import io.micrometer.spring.autoconfigure.export.prometheus.PrometheusExportConfiguration;
-import io.micrometer.spring.autoconfigure.export.signalfx.SignalfxExportConfiguration;
+import io.micrometer.spring.autoconfigure.export.signalfx.SignalFxExportConfiguration;
 import io.micrometer.spring.autoconfigure.export.simple.SimpleExportConfiguration;
 import io.micrometer.spring.autoconfigure.export.statsd.StatsdExportConfiguration;
 import io.micrometer.spring.autoconfigure.web.client.RestTemplateMetricsConfiguration;
@@ -72,7 +72,7 @@
     NewRelicExportConfiguration.class, JmxExportConfiguration.class,
     StatsdExportConfiguration.class, PrometheusExportConfiguration.class,
     TomcatMetricsConfiguration.class, SimpleExportConfiguration.class,
-    SignalfxExportConfiguration.class})
+    SignalFxExportConfiguration.class})
 public class MetricsAutoConfiguration {
     @Bean
     @Order(0)

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/export/signalfx/SignalFxProperties.java
Patch:
@@ -24,7 +24,7 @@
  * @author Jon Schneider
  */
 @ConfigurationProperties(prefix = "management.metrics.export.signalfx")
-public class SignalfxProperties extends StepRegistryProperties {
+public class SignalFxProperties extends StepRegistryProperties {
     /**
      * Your access token, found in your account settings at SignalFX. This property is required.
      */

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/web/tomcat/TomcatMetricsConfiguration.java
Patch:
@@ -37,7 +37,6 @@ public TomcatMetrics metrics(ApplicationContext applicationContext) {
         Manager manager = null;
         if (applicationContext instanceof EmbeddedWebApplicationContext) {
             manager = getManagerFromContext((EmbeddedWebApplicationContext) applicationContext);
-
         }
         return new TomcatMetrics(manager, Collections.emptyList());
     }

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/web/servlet/WebMvcMetrics.java
Patch:
@@ -82,7 +82,7 @@ public void tagWithException(Throwable exception) {
 
     void preHandle(HttpServletRequest request, Object handler) {
         if (request.getAttribute(TIMING_REQUEST_ATTRIBUTE) == null) {
-            request.setAttribute(TIMING_REQUEST_ATTRIBUTE, System.nanoTime());
+            request.setAttribute(TIMING_REQUEST_ATTRIBUTE, registry.config().clock().monotonicTime());
         }
         request.setAttribute(HANDLER_REQUEST_ATTRIBUTE, handler);
         longTaskTimed(handler).forEach((config) -> {

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/autoconfigure/MeterRegistryConfigurerTest.java
Patch:
@@ -43,7 +43,8 @@
     "management.metrics.export.influx.enabled=false",
     "management.metrics.export.jmx.enabled=false",
     "management.metrics.export.statsd.enabled=false",
-    "management.metrics.export.newrelic.enabled=false"
+    "management.metrics.export.newrelic.enabled=false",
+    "management.metrics.export.signalfx.enabled=false"
 })
 public class MeterRegistryConfigurerTest {
 

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/autoconfigure/MetricsConfigurationCompositeTest.java
Patch:
@@ -43,7 +43,8 @@
     "management.metrics.export.jmx.enabled=false",
     "management.metrics.export.statsd.enabled=false",
     "management.metrics.export.prometheus.enabled=true",
-    "management.metrics.export.newrelic.enabled=false"
+    "management.metrics.export.newrelic.enabled=false",
+    "management.metrics.export.signalfx.enabled=false"
 })
 public class MetricsConfigurationCompositeTest {
     @Autowired

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/autoconfigure/export/simple/SimpleExportConfigurationTest.java
Patch:
@@ -41,7 +41,8 @@
     "management.metrics.export.influx.enabled=false",
     "management.metrics.export.jmx.enabled=false",
     "management.metrics.export.statsd.enabled=false",
-    "management.metrics.export.newrelic.enabled=false"
+    "management.metrics.export.newrelic.enabled=false",
+    "management.metrics.export.signalfx.enabled=false"
 })
 public class SimpleExportConfigurationTest {
     @Autowired

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/integration/SpringIntegrationMetricsTest.java
Patch:
@@ -46,7 +46,8 @@
     "management.metrics.export.influx.enabled=false",
     "management.metrics.export.jmx.enabled=false",
     "management.metrics.export.statsd.enabled=false",
-    "management.metrics.export.newrelic.enabled=false"
+    "management.metrics.export.newrelic.enabled=false",
+    "management.metrics.export.signalfx.enabled=false"
 })
 public class SpringIntegrationMetricsTest {
     @Autowired

File: implementations/micrometer-registry-atlas/src/main/java/io/micrometer/atlas/AtlasMeterRegistry.java
Patch:
@@ -110,7 +110,7 @@ protected io.micrometer.core.instrument.DistributionSummary newDistributionSumma
 
         for (double percentile : histogramConfig.getPercentiles()) {
             gauge(id.getName(), Tags.concat(getConventionTags(id), "percentile", percentileFormat.format(percentile)),
-                percentile, summary::percentile);
+                summary, s -> s.percentile(percentile));
         }
 
         return summary;
@@ -133,7 +133,7 @@ protected Timer newTimer(Meter.Id id, HistogramConfig histogramConfig, PauseDete
 
         for (double percentile : histogramConfig.getPercentiles()) {
             gauge(id.getName(), Tags.concat(getConventionTags(id), "percentile", percentileFormat.format(percentile)),
-                percentile, p -> timer.percentile(p, TimeUnit.SECONDS));
+                timer, t -> t.percentile(percentile, TimeUnit.SECONDS));
         }
 
         return timer;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/dropwizard/DropwizardMeterRegistry.java
Patch:
@@ -78,7 +78,7 @@ protected Timer newTimer(Meter.Id id, HistogramConfig histogramConfig, PauseDete
 
         for (double percentile : histogramConfig.getPercentiles()) {
             gauge(id.getName(), Tags.concat(getConventionTags(id), "percentile", percentileFormat.format(percentile)),
-                percentile, p -> timer.percentile(p, getBaseTimeUnit()));
+                timer, t -> t.percentile(percentile, getBaseTimeUnit()));
         }
 
         if (histogramConfig.isPublishingHistogram()) {
@@ -97,7 +97,7 @@ protected DistributionSummary newDistributionSummary(Meter.Id id, HistogramConfi
 
         for (double percentile : histogramConfig.getPercentiles()) {
             gauge(id.getName(), Tags.concat(getConventionTags(id), "percentile", percentileFormat.format(percentile)),
-                percentile, summary::percentile);
+                summary, s -> summary.percentile(percentile));
         }
 
         if (histogramConfig.isPublishingHistogram()) {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/simple/SimpleMeterRegistry.java
Patch:
@@ -69,7 +69,7 @@ protected DistributionSummary newDistributionSummary(Meter.Id id, HistogramConfi
 
         for (double percentile : histogramConfig.getPercentiles()) {
             gauge(id.getName(), Tags.concat(getConventionTags(id), "percentile", percentileFormat.format(percentile)),
-                percentile, summary::percentile);
+                summary, s -> summary.percentile(percentile));
         }
 
         if(histogramConfig.isPublishingHistogram()) {
@@ -106,7 +106,7 @@ protected Timer newTimer(Meter.Id id, HistogramConfig histogramConfig, PauseDete
 
         for (double percentile : histogramConfig.getPercentiles()) {
             gauge(id.getName(), Tags.concat(getConventionTags(id), "percentile", percentileFormat.format(percentile)),
-                percentile, p -> timer.percentile(p, getBaseTimeUnit()));
+                timer, t -> t.percentile(percentile, getBaseTimeUnit()));
         }
 
         if(histogramConfig.isPublishingHistogram()) {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/CaffeineCacheMetrics.java
Patch:
@@ -64,7 +64,7 @@ public static <C extends Cache> C monitor(MeterRegistry registry, C cache, Strin
      * @see CacheStats
      */
     public static <C extends Cache> C monitor(MeterRegistry registry, C cache, String name, Iterable<Tag> tags) {
-        new CaffeineCacheMetrics(cache, tags, name).bindTo(registry);
+        new CaffeineCacheMetrics(cache, name, tags).bindTo(registry);
         return cache;
     }
 
@@ -107,7 +107,7 @@ public static <C extends AsyncLoadingCache> C monitor(MeterRegistry registry, C
      *              for metrics to be recorded.
      * @param name  The metric name prefix
      */
-    public CaffeineCacheMetrics(Cache<?, ?> cache, Iterable<Tag> tags, String name) {
+    public CaffeineCacheMetrics(Cache<?, ?> cache, String name, Iterable<Tag> tags) {
         this.name = name;
         this.tags = tags;
         this.cache = cache;

File: implementations/micrometer-registry-ganglia/src/main/java/io/micrometer/ganglia/GangliaMeterRegistry.java
Patch:
@@ -39,7 +39,7 @@ public GangliaMeterRegistry(GangliaConfig config) {
     public GangliaMeterRegistry(GangliaConfig config, HierarchicalNameMapper nameMapper, Clock clock) {
         // Technically, Ganglia doesn't have any constraints on metric or tag names, but the encoding of Unicode can look
         // horrible in the UI. So be aware...
-        super(nameMapper, clock);
+        super(config, nameMapper, clock);
         this.config = config;
 
         try {

File: implementations/micrometer-registry-graphite/src/main/java/io/micrometer/graphite/GraphiteMeterRegistry.java
Patch:
@@ -40,7 +40,7 @@ public GraphiteMeterRegistry(GraphiteConfig config) {
     }
 
     public GraphiteMeterRegistry(GraphiteConfig config, HierarchicalNameMapper nameMapper, Clock clock) {
-        super(nameMapper, clock);
+        super(config, nameMapper, clock);
 
         this.config = config;
         this.config().namingConvention(new GraphiteNamingConvention());

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdConfig.java
Patch:
@@ -111,11 +111,11 @@ default int queueSize() {
     }
 
     /**
-     * Returns the step size to use in computing windowed statistics like max. The default is 10 seconds.
+     * Returns the step size to use in computing windowed statistics like max. The default is 1 minute.
      * To get the most out of these statistics, align the step interval to be close to your scrape interval.
      */
     default Duration step() {
         String v = get(prefix() + ".step");
-        return v == null ? Duration.ofSeconds(10) : Duration.parse(v);
+        return v == null ? Duration.ofMinutes(1) : Duration.parse(v);
     }
 }

File: micrometer-core/src/test/java/io/micrometer/core/instrument/MetricsTest.java
Patch:
@@ -19,7 +19,6 @@
 import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
 import org.junit.jupiter.api.Test;
 
-import static io.micrometer.core.instrument.MockClock.clock;
 import static org.assertj.core.api.Assertions.assertThat;
 
 class MetricsTest {
@@ -39,7 +38,6 @@ void metricCanBeCreatedBeforeStaticRegistryIsConfigured() {
         Metrics.addRegistry(simple);
         counter.increment();
 
-        clock(simple).add(SimpleConfig.DEFAULT_STEP);
         assertThat(Metrics.globalRegistry.find("counter").value(Statistic.Count, 1.0).counter()).isPresent();
     }
 }

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/jetty/JettyStatisticsMetricsTest.java
Patch:
@@ -33,7 +33,6 @@
 import java.io.IOException;
 import java.sql.SQLException;
 
-import static io.micrometer.core.instrument.MockClock.clock;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
@@ -60,8 +59,6 @@ void stats() throws IOException, ServletException {
 
         handler.handle("/testUrl", baseReq, new MockHttpServletRequest(), new MockHttpServletResponse());
 
-        clock(registry).add(SimpleConfig.DEFAULT_STEP);
-
         assertThat(registry.find("jetty.requests").value(Statistic.Count, 1.0).meter()).isPresent();
         assertThat(registry.find("jetty.responses.size").functionCounter().map(FunctionCounter::count)).isPresent().hasValue(772.0);
     }

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/jvm/ExecutorServiceMetricsTest.java
Patch:
@@ -24,7 +24,6 @@
 
 import java.util.concurrent.*;
 
-import static io.micrometer.core.instrument.MockClock.clock;
 import static io.micrometer.core.instrument.Statistic.Count;
 import static io.micrometer.core.instrument.Statistic.Value;
 import static org.assertj.core.api.AssertionsForClassTypes.assertThat;
@@ -51,7 +50,6 @@ void executor() throws InterruptedException {
         executor.execute(() -> System.out.println("hello"));
         lock.await();
 
-        clock(registry).add(SimpleConfig.DEFAULT_STEP);
         assertThat(registry.find("exec").tags(userTags).timer()).map(Timer::count).hasValue(1L);
     }
 
@@ -100,7 +98,6 @@ void monitorExecutorService() throws InterruptedException {
         taskComplete.countDown();
         pool.awaitTermination(1, TimeUnit.SECONDS);
 
-        clock(registry).add(SimpleConfig.DEFAULT_STEP);
         assertThat(registry.find("beep.pool").tags(userTags).value(Count, 2.0).timer()).isPresent();
         assertThat(registry.find("beep.pool.queued").tags(userTags).value(Value, 0.0).gauge()).isPresent();
     }

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/logging/LogbackMetricsTest.java
Patch:
@@ -26,7 +26,6 @@
 import org.junit.jupiter.api.Test;
 import org.slf4j.LoggerFactory;
 
-import static io.micrometer.core.instrument.MockClock.clock;
 import static io.micrometer.core.instrument.Statistic.Count;
 import static org.assertj.core.api.Assertions.assertThat;
 
@@ -49,7 +48,6 @@ void logbackLevelMetrics() {
         logger.error("error");
         logger.debug("debug"); // shouldn't record a metric
 
-        clock(registry).add(SimpleConfig.DEFAULT_STEP);
         assertThat(registry.find("logback.events").tags("level", "warn").value(Count, 1.0).counter()).isPresent();
         assertThat(registry.find("logback.events").tags("level", "debug").value(Count, 0.0).counter()).isPresent();
     }
@@ -59,7 +57,6 @@ void logbackLevelMetrics() {
     void isLevelEnabledDoesntContributeToCounts() {
         logger.isErrorEnabled();
 
-        clock(registry).add(SimpleConfig.DEFAULT_STEP);
         assertThat(registry.find("logback.events").tags("level", "error").value(Count, 0.0).counter()).isPresent();
     }
 }

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/system/UptimeMetricsTest.java
Patch:
@@ -24,7 +24,6 @@
 
 import java.lang.management.RuntimeMXBean;
 
-import static io.micrometer.core.instrument.MockClock.clock;
 import static java.util.Collections.emptyList;
 import static org.assertj.core.api.AssertionsForClassTypes.assertThat;
 import static org.mockito.Mockito.mock;
@@ -54,7 +53,6 @@ void uptimeMetricsMock() {
         when(runtimeMXBean.getStartTime()).thenReturn(4711L);
         new UptimeMetrics(runtimeMXBean, emptyList()).bindTo(registry);
 
-        clock(registry).add(SimpleConfig.DEFAULT_STEP);
         assertThat(registry.find("process.uptime").value(Statistic.Value, 1.337).meter()).isPresent();
         assertThat(registry.find("process.start.time").value(Statistic.Value, 4.711).meter()).isPresent();
     }

File: micrometer-core/src/test/java/io/micrometer/core/instrument/composite/CompositeCounterTest.java
Patch:
@@ -22,7 +22,6 @@
 import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
 import org.junit.jupiter.api.Test;
 
-import static io.micrometer.core.instrument.MockClock.clock;
 import static org.assertj.core.api.Assertions.assertThat;
 
 class CompositeCounterTest {
@@ -35,7 +34,6 @@ void increment() {
 
         registry.counter("counter").increment(2.0);
 
-        clock(simple).add(SimpleConfig.DEFAULT_STEP);
         assertThat(simple.find("counter").value(Statistic.Count, 2.0).counter()).isPresent();
     }
 }

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/async/ThreadPoolTaskExecutorMetricsTest.java
Patch:
@@ -25,7 +25,6 @@
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
 
-import static io.micrometer.core.instrument.MockClock.clock;
 import static io.micrometer.core.instrument.Statistic.Count;
 import static io.micrometer.core.instrument.Statistic.Value;
 import static org.assertj.core.api.AssertionsForClassTypes.assertThat;
@@ -52,7 +51,6 @@ public void executor() throws InterruptedException {
         lock.await();
         pool.shutdown();
 
-        clock(registry).add(SimpleConfig.DEFAULT_STEP);
         assertThat(registry.find("exec").tags(userTags).timer()).map(Timer::count).hasValue(1L);
         assertThat(registry.find("exec.completed").tags(userTags).meter()).isPresent();
         assertThat(registry.find("exec.queued").tags(userTags).gauge()).isPresent();
@@ -84,7 +82,6 @@ public void monitorExecutorService() throws InterruptedException {
         taskComplete.countDown();
         pool.shutdown();
 
-        clock(registry).add(SimpleConfig.DEFAULT_STEP);
         assertThat(registry.find("beep.pool").tags(userTags).value(Count, 2.0).timer()).isPresent();
         assertThat(registry.find("beep.pool.queued").tags(userTags).value(Value, 0.0).gauge()).isPresent();
     }

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/integration/SpringIntegrationMetricsTest.java
Patch:
@@ -18,7 +18,6 @@
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.MockClock;
 import io.micrometer.core.instrument.Statistic;
-import io.micrometer.core.instrument.simple.SimpleConfig;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -63,7 +62,6 @@ public class SpringIntegrationMetricsTest {
     public void springIntegrationMetrics() {
         converter.fahrenheitToCelcius(68.0f);
 
-        clock.add(SimpleConfig.DEFAULT_STEP);
         assertThat(registry.find("spring.integration.channel.sends")
             .tags("channel", "convert.input").value(Statistic.Count, 1).meter()).isPresent();
         assertThat(registry.find("spring.integration.handler.duration.min").meter()).isPresent();

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/security/SpringSecurityTest.java
Patch:
@@ -33,7 +33,6 @@
 import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.RestController;
 
-import static io.micrometer.core.instrument.MockClock.clock;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
@@ -57,7 +56,6 @@ public class SpringSecurityTest {
     public void securityAllowsAccess() throws Exception {
         mvc.perform(get("/api/secured")).andExpect(status().isOk());
 
-        clock(registry).add(SimpleConfig.DEFAULT_STEP);
         assertThat(registry.find("http.server.requests")
             .tags("status", "200")
             .timer()).isPresent();
@@ -67,7 +65,6 @@ public void securityAllowsAccess() throws Exception {
     public void securityBlocksAccess() throws Exception {
         mvc.perform(get("/api/secured")).andExpect(status().isUnauthorized());
 
-        clock(registry).add(SimpleConfig.DEFAULT_STEP);
         assertThat(registry.find("http.server.requests")
             .tags("status", "401")
             .timer()).isPresent();

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/web/client/MetricsRestTemplateCustomizerTest.java
Patch:
@@ -29,7 +29,6 @@
 import org.springframework.test.web.client.response.MockRestResponseCreators;
 import org.springframework.web.client.RestTemplate;
 
-import static io.micrometer.core.instrument.MockClock.clock;
 import static java.util.stream.StreamSupport.stream;
 import static org.assertj.core.api.Assertions.assertThat;
 
@@ -61,7 +60,6 @@ registry, new DefaultRestTemplateExchangeTagsProvider(),
         assertThat(registry.find("http.client.requests").meters())
             .anySatisfy(m -> assertThat(stream(m.getId().getTags().spliterator(), false).map(Tag::getKey)).doesNotContain("bucket"));
 
-        clock(registry).add(SimpleConfig.DEFAULT_STEP);
         assertThat(registry.find("http.client.requests")
             .tags("method", "GET", "uri", "/test/{id}", "status", "200")
             .value(Statistic.Count, 1.0).timer()).isPresent();

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/web/servlet/MetricsFilterAutoTimedTest.java
Patch:
@@ -75,7 +75,6 @@ public void setupMockMvc() {
     public void metricsCanBeAutoTimed() throws Exception {
         this.mvc.perform(get("/api/10")).andExpect(status().isOk());
 
-        clock.add(SimpleConfig.DEFAULT_STEP);
         assertThat(this.registry.find("http.server.requests").tags("status", "200").timer())
             .hasValueSatisfying((t) -> assertThat(t.count()).isEqualTo(1));
     }

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/web/servlet/WebMvcMetricsIntegrationTest.java
Patch:
@@ -79,7 +79,6 @@ public void setupMockMvc() {
     public void handledExceptionIsRecordedInMetricTag() throws Exception {
         this.mvc.perform(get("/api/handledError")).andExpect(status().is5xxServerError());
 
-        clock.add(SimpleConfig.DEFAULT_STEP);
         assertThat(this.registry.find("http.server.requests")
             .tags("exception", "Exception1", "status", "500").value(Statistic.Count, 1.0).timer())
             .isPresent();
@@ -90,7 +89,6 @@ public void rethrownExceptionIsRecordedInMetricTag() throws Exception {
         assertThatCode(() -> this.mvc.perform(get("/api/rethrownError"))
             .andExpect(status().is5xxServerError()));
 
-        clock.add(SimpleConfig.DEFAULT_STEP);
         assertThat(this.registry.find("http.server.requests")
             .tags("exception", "Exception2", "status", "500").value(Statistic.Count, 1.0).timer())
             .isPresent();

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/web/client/MetricsRestTemplateCustomizer.java
Patch:
@@ -62,5 +62,4 @@ public void customize(RestTemplate restTemplate) {
         interceptors.addAll(restTemplate.getInterceptors());
         restTemplate.setInterceptors(interceptors);
     }
-
 }

File: implementations/micrometer-registry-atlas/src/main/java/io/micrometer/atlas/AtlasMeterRegistry.java
Patch:
@@ -25,6 +25,7 @@
 import io.micrometer.core.instrument.*;
 import io.micrometer.core.instrument.config.NamingConvention;
 import io.micrometer.core.instrument.histogram.HistogramConfig;
+import io.micrometer.core.instrument.histogram.pause.PauseDetector;
 import io.micrometer.core.instrument.internal.DefaultMeter;
 import io.micrometer.core.instrument.step.StepFunctionCounter;
 import io.micrometer.core.instrument.step.StepFunctionTimer;
@@ -116,15 +117,15 @@ protected io.micrometer.core.instrument.DistributionSummary newDistributionSumma
     }
 
     @Override
-    protected Timer newTimer(Meter.Id id, HistogramConfig histogramConfig) {
+    protected Timer newTimer(Meter.Id id, HistogramConfig histogramConfig, PauseDetector pauseDetector) {
         com.netflix.spectator.api.Timer internalTimer = registry.timer(spectatorId(id));
 
         if (histogramConfig.isPercentileHistogram()) {
             // This doesn't report the normal count/totalTime/max stats, so we treat it as additive
             PercentileTimer.get(registry, spectatorId(id));
         }
 
-        SpectatorTimer timer = new SpectatorTimer(id, internalTimer, clock, histogramConfig);
+        SpectatorTimer timer = new SpectatorTimer(id, internalTimer, clock, histogramConfig, pauseDetector);
 
         for (long sla : histogramConfig.getSlaBoundaries()) {
             gauge(id.getName(), Tags.concat(getConventionTags(id), "sla", Duration.ofNanos(sla).toString()), sla, timer::histogramCountAtValue);

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusDistributionSummary.java
Patch:
@@ -19,7 +19,7 @@
 import io.micrometer.core.instrument.Clock;
 import io.micrometer.core.instrument.CountAtValue;
 import io.micrometer.core.instrument.histogram.HistogramConfig;
-import io.micrometer.core.instrument.histogram.TimeWindowLatencyHistogram;
+import io.micrometer.core.instrument.histogram.TimeWindowHistogram;
 import io.micrometer.core.instrument.step.StepDouble;
 import io.micrometer.core.instrument.util.MeterEquivalence;
 
@@ -31,12 +31,12 @@ public class PrometheusDistributionSummary extends AbstractDistributionSummary {
     private LongAdder count = new LongAdder();
     private DoubleAdder amount = new DoubleAdder();
     private StepDouble max;
-    private final TimeWindowLatencyHistogram percentilesHistogram;
+    private final TimeWindowHistogram percentilesHistogram;
 
     PrometheusDistributionSummary(Id id, Clock clock, HistogramConfig histogramConfig, long maxStepMillis) {
         super(id, clock, histogramConfig);
         this.max = new StepDouble(clock, maxStepMillis);
-        this.percentilesHistogram = new TimeWindowLatencyHistogram(clock,
+        this.percentilesHistogram = new TimeWindowHistogram(clock,
             HistogramConfig.builder()
                 .histogramExpiry(Duration.ofDays(1825)) // effectively never roll over
                 .histogramBufferLength(1)

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusMeterRegistry.java
Patch:
@@ -19,6 +19,7 @@
 import io.micrometer.core.instrument.histogram.HistogramConfig;
 import io.micrometer.core.instrument.cumulative.CumulativeFunctionCounter;
 import io.micrometer.core.instrument.cumulative.CumulativeFunctionTimer;
+import io.micrometer.core.instrument.histogram.pause.PauseDetector;
 import io.micrometer.core.instrument.internal.DefaultGauge;
 import io.micrometer.core.instrument.internal.DefaultLongTaskTimer;
 import io.micrometer.core.instrument.internal.DefaultMeter;
@@ -153,9 +154,9 @@ public DistributionSummary newDistributionSummary(Meter.Id id, HistogramConfig h
     }
 
     @Override
-    protected io.micrometer.core.instrument.Timer newTimer(Meter.Id id, HistogramConfig histogramConfig) {
+    protected io.micrometer.core.instrument.Timer newTimer(Meter.Id id, HistogramConfig histogramConfig, PauseDetector pauseDetector) {
         MicrometerCollector collector = collectorByName(id, histogramConfig.isPublishingHistogram() ? Collector.Type.HISTOGRAM : Collector.Type.SUMMARY);
-        PrometheusTimer timer = new PrometheusTimer(id, clock, histogramConfig, prometheusConfig.step().toMillis());
+        PrometheusTimer timer = new PrometheusTimer(id, clock, histogramConfig, pauseDetector, prometheusConfig.step().toMillis());
         List<String> tagValues = tagValues(id);
 
         collector.add((conventionName, tagKeys) -> {

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdMeterRegistry.java
Patch:
@@ -18,6 +18,7 @@
 import io.micrometer.core.instrument.*;
 import io.micrometer.core.instrument.config.NamingConvention;
 import io.micrometer.core.instrument.histogram.HistogramConfig;
+import io.micrometer.core.instrument.histogram.pause.PauseDetector;
 import io.micrometer.core.instrument.internal.DefaultMeter;
 import io.micrometer.core.instrument.util.HierarchicalNameMapper;
 import io.micrometer.core.instrument.util.TimeUtils;
@@ -133,8 +134,8 @@ protected LongTaskTimer newLongTaskTimer(Meter.Id id) {
     private final DecimalFormat percentileFormat = new DecimalFormat("#.####");
 
     @Override
-    protected Timer newTimer(Meter.Id id, HistogramConfig histogramConfig) {
-        Timer timer = new StatsdTimer(id, lineBuilder(id), publisher, clock, histogramConfig, statsdConfig.step().toMillis());
+    protected Timer newTimer(Meter.Id id, HistogramConfig histogramConfig, PauseDetector pauseDetector) {
+        Timer timer = new StatsdTimer(id, lineBuilder(id), publisher, clock, histogramConfig, pauseDetector, statsdConfig.step().toMillis());
 
         for (double percentile : histogramConfig.getPercentiles()) {
             switch (statsdConfig.flavor()) {

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdTimer.java
Patch:
@@ -19,6 +19,7 @@
 import io.micrometer.core.instrument.Clock;
 import io.micrometer.core.instrument.Timer;
 import io.micrometer.core.instrument.histogram.HistogramConfig;
+import io.micrometer.core.instrument.histogram.pause.PauseDetector;
 import io.micrometer.core.instrument.step.StepDouble;
 import io.micrometer.core.instrument.util.TimeUtils;
 import org.reactivestreams.Processor;
@@ -36,8 +37,8 @@ public class StatsdTimer extends AbstractTimer implements Timer {
     private final Processor<String, String> publisher;
 
     StatsdTimer(Id id, StatsdLineBuilder lineBuilder, Processor<String, String> publisher, Clock clock,
-                HistogramConfig histogramConfig, long stepMillis) {
-        super(id, clock, histogramConfig);
+                HistogramConfig histogramConfig, PauseDetector pauseDetector, long stepMillis) {
+        super(id, clock, histogramConfig, pauseDetector);
         this.max = new StepDouble(clock, stepMillis);
         this.lineBuilder = lineBuilder;
         this.publisher = publisher;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/AbstractTimer.java
Patch:
@@ -17,6 +17,7 @@
 
 import io.micrometer.core.instrument.histogram.HistogramConfig;
 import io.micrometer.core.instrument.histogram.TimeWindowLatencyHistogram;
+import io.micrometer.core.instrument.histogram.pause.PauseDetector;
 import io.micrometer.core.instrument.util.MeterEquivalence;
 
 import java.util.concurrent.Callable;
@@ -28,11 +29,11 @@ public abstract class AbstractTimer extends AbstractMeter implements Timer {
     private final HistogramConfig histogramConfig;
     protected final TimeWindowLatencyHistogram histogram;
 
-    protected AbstractTimer(Meter.Id id, Clock clock, HistogramConfig histogramConfig) {
+    protected AbstractTimer(Id id, Clock clock, HistogramConfig histogramConfig, PauseDetector pauseDetector) {
         super(id);
         this.clock = clock;
         this.histogramConfig = histogramConfig;
-        this.histogram = new TimeWindowLatencyHistogram(clock, histogramConfig);
+        this.histogram = new TimeWindowLatencyHistogram(clock, histogramConfig, pauseDetector);
     }
 
     @Override

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeMeterRegistry.java
Patch:
@@ -18,6 +18,7 @@
 import io.micrometer.core.instrument.*;
 import io.micrometer.core.instrument.config.NamingConvention;
 import io.micrometer.core.instrument.histogram.HistogramConfig;
+import io.micrometer.core.instrument.histogram.pause.PauseDetector;
 
 import java.util.Collections;
 import java.util.Set;
@@ -48,8 +49,8 @@ public CompositeMeterRegistry(Clock clock) {
     }
 
     @Override
-    protected Timer newTimer(Meter.Id id, HistogramConfig histogramConfig) {
-        return new CompositeTimer(id, clock, histogramConfig);
+    protected Timer newTimer(Meter.Id id, HistogramConfig histogramConfig, PauseDetector pauseDetector) {
+        return new CompositeTimer(id, clock, histogramConfig, pauseDetector);
     }
 
     @Override

File: micrometer-core/src/main/java/io/micrometer/core/instrument/cumulative/CumulativeTimer.java
Patch:
@@ -20,6 +20,7 @@
 import io.micrometer.core.instrument.Measurement;
 import io.micrometer.core.instrument.Statistic;
 import io.micrometer.core.instrument.histogram.HistogramConfig;
+import io.micrometer.core.instrument.histogram.pause.PauseDetector;
 import io.micrometer.core.instrument.util.TimeUtils;
 
 import java.util.Arrays;
@@ -37,8 +38,8 @@ public class CumulativeTimer extends AbstractTimer {
     /**
      * Create a new instance.
      */
-    public CumulativeTimer(Id id, Clock clock, HistogramConfig histogramConfig) {
-        super(id, clock, histogramConfig);
+    public CumulativeTimer(Id id, Clock clock, HistogramConfig histogramConfig, PauseDetector pauseDetector) {
+        super(id, clock, histogramConfig, pauseDetector);
         this.count = new AtomicLong();
         this.total = new AtomicLong();
         this.max = new AtomicLong();

File: micrometer-core/src/main/java/io/micrometer/core/instrument/dropwizard/DropwizardMeterRegistry.java
Patch:
@@ -20,6 +20,7 @@
 import io.micrometer.core.instrument.*;
 import io.micrometer.core.instrument.config.NamingConvention;
 import io.micrometer.core.instrument.histogram.HistogramConfig;
+import io.micrometer.core.instrument.histogram.pause.PauseDetector;
 import io.micrometer.core.instrument.internal.DefaultLongTaskTimer;
 import io.micrometer.core.instrument.internal.DefaultMeter;
 import io.micrometer.core.instrument.util.HierarchicalNameMapper;
@@ -70,8 +71,8 @@ protected <T> io.micrometer.core.instrument.Gauge newGauge(Meter.Id id, T obj, T
     }
 
     @Override
-    protected Timer newTimer(Meter.Id id, HistogramConfig histogramConfig) {
-        DropwizardTimer timer = new DropwizardTimer(id, registry.timer(hierarchicalName(id)), clock, histogramConfig);
+    protected Timer newTimer(Meter.Id id, HistogramConfig histogramConfig, PauseDetector pauseDetector) {
+        DropwizardTimer timer = new DropwizardTimer(id, registry.timer(hierarchicalName(id)), clock, histogramConfig, pauseDetector);
 
         for (double percentile : histogramConfig.getPercentiles()) {
             gauge(id.getName(), Tags.concat(getConventionTags(id), "percentile", percentileFormat.format(percentile)),

File: micrometer-core/src/main/java/io/micrometer/core/instrument/dropwizard/DropwizardTimer.java
Patch:
@@ -19,6 +19,7 @@
 import io.micrometer.core.instrument.AbstractTimer;
 import io.micrometer.core.instrument.Clock;
 import io.micrometer.core.instrument.histogram.HistogramConfig;
+import io.micrometer.core.instrument.histogram.pause.PauseDetector;
 import io.micrometer.core.instrument.step.StepDouble;
 import io.micrometer.core.instrument.util.TimeUtils;
 
@@ -30,8 +31,8 @@ public class DropwizardTimer extends AbstractTimer {
     private final AtomicLong totalTime = new AtomicLong(0);
     private final StepDouble max;
 
-    DropwizardTimer(Id id, Timer impl, Clock clock, HistogramConfig histogramConfig) {
-        super(id, clock, histogramConfig);
+    DropwizardTimer(Id id, Timer impl, Clock clock, HistogramConfig histogramConfig, PauseDetector pauseDetector) {
+        super(id, clock, histogramConfig, pauseDetector);
         this.impl = impl;
         this.max = new StepDouble(clock, 60000);
     }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/step/StepMeterRegistry.java
Patch:
@@ -17,6 +17,7 @@
 
 import io.micrometer.core.instrument.*;
 import io.micrometer.core.instrument.histogram.HistogramConfig;
+import io.micrometer.core.instrument.histogram.pause.PauseDetector;
 import io.micrometer.core.instrument.internal.DefaultGauge;
 import io.micrometer.core.instrument.internal.DefaultLongTaskTimer;
 import io.micrometer.core.instrument.internal.DefaultMeter;
@@ -78,12 +79,12 @@ protected LongTaskTimer newLongTaskTimer(Meter.Id id) {
     }
 
     @Override
-    protected Timer newTimer(Meter.Id id, HistogramConfig histogramConfig) {
+    protected Timer newTimer(Meter.Id id, HistogramConfig histogramConfig, PauseDetector pauseDetector) {
         HistogramConfig merged = histogramConfig.merge(HistogramConfig.builder()
             .histogramExpiry(config.step())
             .build());
 
-        Timer timer = new StepTimer(id, clock, histogramConfig, config.step().toMillis());
+        Timer timer = new StepTimer(id, clock, histogramConfig, pauseDetector, config.step().toMillis());
         histogramConfigs.put(timer, merged);
         return timer;
     }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/step/StepTimer.java
Patch:
@@ -17,6 +17,7 @@
 
 import io.micrometer.core.instrument.*;
 import io.micrometer.core.instrument.histogram.HistogramConfig;
+import io.micrometer.core.instrument.histogram.pause.PauseDetector;
 import io.micrometer.core.instrument.util.TimeUtils;
 
 import java.util.Arrays;
@@ -33,8 +34,8 @@ public class StepTimer extends AbstractTimer {
     /**
      * Create a new instance.
      */
-    public StepTimer(Id id, Clock clock, HistogramConfig histogramConfig, long step) {
-        super(id, clock, histogramConfig);
+    public StepTimer(Id id, Clock clock, HistogramConfig histogramConfig, PauseDetector pauseDetector, long step) {
+        super(id, clock, histogramConfig, pauseDetector);
         this.count = new StepLong(clock, step);
         this.total = new StepLong(clock, step);
         this.max = new StepLong(clock, step);

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/SpringEnvironmentMeterFilterTest.java
Patch:
@@ -17,6 +17,7 @@
 
 import io.micrometer.core.instrument.*;
 import io.micrometer.core.instrument.histogram.HistogramConfig;
+import io.micrometer.core.instrument.histogram.pause.PauseDetector;
 import io.micrometer.core.instrument.simple.SimpleConfig;
 import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
 import org.junit.Before;
@@ -51,9 +52,9 @@ public class SpringEnvironmentMeterFilterTest {
 
     private MeterRegistry registry = new SimpleMeterRegistry(SimpleConfig.DEFAULT, new MockClock()) {
         @Override
-        protected Timer newTimer(Meter.Id id, HistogramConfig conf) {
+        protected Timer newTimer(Meter.Id id, HistogramConfig conf, PauseDetector pauseDetector) {
             histogramConfig = conf;
-            return super.newTimer(id, conf);
+            return super.newTimer(id, conf, pauseDetector);
         }
 
         @Override

File: implementations/micrometer-registry-datadog/src/main/java/io/micrometer/datadog/DatadogMeterRegistry.java
Patch:
@@ -229,6 +229,9 @@ private Stream<String> writeMeter(Meter m, Map<String, DatadogMetricMetadata> me
     }
 
     private void addToMetadataList(Map<String, DatadogMetricMetadata> metadata, Meter.Id id, String suffix, Statistic stat, String overrideBaseUnit) {
+        if(config.applicationKey() == null)
+            return; // we can't set metadata correctly without the application key
+
         Meter.Id fullId = id;
         if(suffix != null)
             fullId = idWithSuffix(id, suffix);

File: micrometer-samples/src/main/java/io/micrometer/core/samples/TimerSample.java
Patch:
@@ -30,7 +30,7 @@
 
 public class TimerSample {
     public static void main(String[] args) {
-        MeterRegistry registry = SampleRegistries.prometheusPushgateway();
+        MeterRegistry registry = SampleRegistries.datadog();
         Timer timer = Timer.builder("timer")
             .publishPercentiles(0.5, 0.95)
             .register(registry);

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/AbstractCompositeMeter.java
Patch:
@@ -101,17 +101,17 @@ public final void add(MeterRegistry registry) {
 
     public final void remove(MeterRegistry registry) {
         // Not very efficient, but this operation is expected to be used rarely.
-        final AtomicReference<T> meterHolder = new AtomicReference<>();
+        final AtomicReference<T> firstMeterHolder = new AtomicReference<>();
         children.removeIf(e -> {
             if (e.registry() == registry) {
-                meterHolder.set(e.meter());
+                firstMeterHolder.compareAndSet(null, e.meter());
                 return true;
             } else {
                 return false;
             }
         });
 
-        final T removedMeter = meterHolder.get();
+        final T removedMeter = firstMeterHolder.get();
         if (removedMeter != null) {
             firstMeterUpdater.compareAndSet(this, removedMeter, null);
         }

File: implementations/micrometer-registry-cloudwatch/src/main/java/io/micrometer/cloudwatch/CloudWatchMeterRegistry.java
Patch:
@@ -158,7 +158,7 @@ private MetricDatum metricDatum(Meter.Id id, long wallTime, double value) {
                 .withMetricName(metricName)
                 .withDimensions(toDimensions(tags))
                 .withTimestamp(new Date(wallTime))
-                .withValue(value)
+                .withValue(CloudWatchUtils.clampMetricValue(value))
                 .withUnit(toStandardUnit(id.getBaseUnit()));
     }
 

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusConfig.java
Patch:
@@ -40,7 +40,7 @@ default boolean descriptions() {
     }
 
     /**
-     * Returns the step size to use in computing windowed statistics like max. The default is 10 seconds.
+     * Returns the step size to use in computing windowed statistics like max. The default is 1 minute.
      * To get the most out of these statistics, align the step interval to be close to your scrape interval.
      */
     default Duration step() {

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/export/prometheus/PrometheusProperties.java
Patch:
@@ -38,10 +38,10 @@ public class PrometheusProperties {
     private Boolean descriptions = true;
 
     /**
-     * The step size to use in computing windowed statistics like max. The default is 10 seconds.
+     * The step size to use in computing windowed statistics like max. The default is 1 minute.
      * To get the most out of these statistics, align the step interval to be close to your scrape interval.
      */
-    private Duration step = Duration.ofSeconds(10);
+    private Duration step = Duration.ofMinutes(1);
 
     public Boolean getEnabled() {
         return enabled;

File: implementations/micrometer-registry-atlas/src/main/java/io/micrometer/atlas/AtlasMeterRegistry.java
Patch:
@@ -25,6 +25,7 @@
 import io.micrometer.core.instrument.*;
 import io.micrometer.core.instrument.config.NamingConvention;
 import io.micrometer.core.instrument.histogram.HistogramConfig;
+import io.micrometer.core.instrument.internal.DefaultMeter;
 import io.micrometer.core.instrument.step.StepFunctionCounter;
 import io.micrometer.core.instrument.step.StepFunctionTimer;
 
@@ -171,7 +172,7 @@ protected LongTaskTimer newLongTaskTimer(Meter.Id id) {
     }
 
     @Override
-    protected void newMeter(Meter.Id id, Meter.Type type, Iterable<io.micrometer.core.instrument.Measurement> measurements) {
+    protected Meter newMeter(Meter.Id id, Meter.Type type, Iterable<io.micrometer.core.instrument.Measurement> measurements) {
         Id spectatorId = spectatorId(id);
         com.netflix.spectator.api.AbstractMeter<Id> spectatorMeter = new com.netflix.spectator.api.AbstractMeter<Id>(registry.clock(), spectatorId, spectatorId) {
             @Override
@@ -186,6 +187,7 @@ public Iterable<com.netflix.spectator.api.Measurement> measure() {
             }
         };
         registry.register(spectatorMeter);
+        return new DefaultMeter(id, type, measurements);
     }
 
     /**

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdMeterRegistry.java
Patch:
@@ -18,6 +18,7 @@
 import io.micrometer.core.instrument.*;
 import io.micrometer.core.instrument.config.NamingConvention;
 import io.micrometer.core.instrument.histogram.HistogramConfig;
+import io.micrometer.core.instrument.internal.DefaultMeter;
 import io.micrometer.core.instrument.util.HierarchicalNameMapper;
 import io.micrometer.core.instrument.util.TimeUtils;
 import reactor.core.Disposable;
@@ -210,7 +211,7 @@ protected <T> FunctionTimer newFunctionTimer(Meter.Id id, T obj, ToLongFunction<
     }
 
     @Override
-    protected void newMeter(Meter.Id id, Meter.Type type, Iterable<Measurement> measurements) {
+    protected Meter newMeter(Meter.Id id, Meter.Type type, Iterable<Measurement> measurements) {
         measurements.forEach(ms -> {
             StatsdLineBuilder line = lineBuilder(id);
             switch (ms.getStatistic()) {
@@ -227,6 +228,7 @@ protected void newMeter(Meter.Id id, Meter.Type type, Iterable<Measurement> meas
                     break;
             }
         });
+        return new DefaultMeter(id, type, measurements);
     }
 
     @Override

File: micrometer-core/src/main/java/io/micrometer/core/instrument/dropwizard/DropwizardMeterRegistry.java
Patch:
@@ -21,6 +21,7 @@
 import io.micrometer.core.instrument.config.NamingConvention;
 import io.micrometer.core.instrument.histogram.HistogramConfig;
 import io.micrometer.core.instrument.internal.DefaultLongTaskTimer;
+import io.micrometer.core.instrument.internal.DefaultMeter;
 import io.micrometer.core.instrument.util.HierarchicalNameMapper;
 
 import java.lang.ref.WeakReference;
@@ -130,8 +131,9 @@ protected <T> FunctionCounter newFunctionCounter(Meter.Id id, T obj, ToDoubleFun
     }
 
     @Override
-    protected void newMeter(Meter.Id id, Meter.Type type, Iterable<Measurement> measurements) {
+    protected Meter newMeter(Meter.Id id, Meter.Type type, Iterable<Measurement> measurements) {
         measurements.forEach(ms -> registry.register(hierarchicalName(id.withTag(ms.getStatistic())), (Gauge<Double>) ms::getValue));
+        return new DefaultMeter(id, type, measurements);
     }
 
     @Override

File: micrometer-core/src/main/java/io/micrometer/core/instrument/simple/SimpleMeterRegistry.java
Patch:
@@ -24,6 +24,7 @@
 import io.micrometer.core.instrument.cumulative.CumulativeFunctionTimer;
 import io.micrometer.core.instrument.internal.DefaultGauge;
 import io.micrometer.core.instrument.internal.DefaultLongTaskTimer;
+import io.micrometer.core.instrument.internal.DefaultMeter;
 import io.micrometer.core.instrument.step.StepCounter;
 import io.micrometer.core.instrument.step.StepDistributionSummary;
 import io.micrometer.core.instrument.step.StepTimer;
@@ -85,8 +86,8 @@ protected DistributionSummary newDistributionSummary(Meter.Id id, HistogramConfi
     }
 
     @Override
-    protected void newMeter(Meter.Id id, Meter.Type type, Iterable<Measurement> measurements) {
-        // nothing to do here
+    protected Meter newMeter(Meter.Id id, Meter.Type type, Iterable<Measurement> measurements) {
+        return new DefaultMeter(id, type, measurements);
     }
 
     @Override

File: micrometer-core/src/main/java/io/micrometer/core/instrument/step/StepMeterRegistry.java
Patch:
@@ -19,6 +19,7 @@
 import io.micrometer.core.instrument.histogram.HistogramConfig;
 import io.micrometer.core.instrument.internal.DefaultGauge;
 import io.micrometer.core.instrument.internal.DefaultLongTaskTimer;
+import io.micrometer.core.instrument.internal.DefaultMeter;
 
 import java.util.Map;
 import java.util.concurrent.*;
@@ -109,7 +110,7 @@ protected <T> FunctionCounter newFunctionCounter(Meter.Id id, T obj, ToDoubleFun
     }
 
     @Override
-    protected void newMeter(Meter.Id id, Meter.Type type, Iterable<Measurement> measurements) {
-        // nothing special to do here
+    protected Meter newMeter(Meter.Id id, Meter.Type type, Iterable<Measurement> measurements) {
+        return new DefaultMeter(id, type, measurements);
     }
 }

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/web/servlet/MetricsFilter.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.micrometer.spring.web.servlet;
 
+import org.apache.http.HttpStatus;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.core.Ordered;
@@ -76,6 +77,7 @@ protected void doFilterInternal(HttpServletRequest request, HttpServletResponse
                         this.webMvcMetrics.record(request, response, null);
                     }
                 } catch (NestedServletException e) {
+                    response.setStatus(HttpStatus.SC_INTERNAL_SERVER_ERROR);
                     this.webMvcMetrics.record(request, response, e.getCause());
                     throw e;
                 }

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/web/servlet/MetricsFilterTest.java
Patch:
@@ -141,7 +141,6 @@ public void badClientRequest() throws Exception {
             .timer()).isPresent();
     }
 
-
     @Test
     public void redirectRequest() throws Exception {
         this.mvc.perform(get("/api/redirect")

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/web/tomcat/TomcatMetricsConfiguration.java
Patch:
@@ -29,10 +29,10 @@
 
 import java.util.Collections;
 
+@ConditionalOnClass(name="org.apache.catalina.startup.Tomcat")
 public class TomcatMetricsConfiguration {
 
         @Bean
-        @ConditionalOnClass(name="org.apache.catalina.startup.Tomcat")
         @ConditionalOnProperty(value = "spring.metrics.export.tomcat.enabled", matchIfMissing = true)
         public TomcatMetrics metrics(ApplicationContext applicationContext) {
             Manager manager = null;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/cumulative/CumulativeTimer.java
Patch:
@@ -72,7 +72,7 @@ public Iterable<Measurement> measure() {
         return Arrays.asList(
             new Measurement(() -> (double) count(), Statistic.Count),
             new Measurement(() -> totalTime(TimeUnit.NANOSECONDS), Statistic.TotalTime),
-            new Measurement(() -> totalTime(TimeUnit.NANOSECONDS), Statistic.Max)
+            new Measurement(() -> max(TimeUnit.NANOSECONDS), Statistic.Max)
         );
     }
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/dropwizard/DropwizardMeterRegistry.java
Patch:
@@ -136,7 +136,7 @@ protected void newMeter(Meter.Id id, Meter.Type type, Iterable<Measurement> meas
 
     @Override
     protected TimeUnit getBaseTimeUnit() {
-        return TimeUnit.NANOSECONDS;
+        return TimeUnit.MILLISECONDS;
     }
 
     private String hierarchicalName(Meter.Id id) {

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/SpringEnvironmentMeterFilterTest.java
Patch:
@@ -36,7 +36,7 @@
 
 @RunWith(SpringRunner.class)
 @TestPropertySource(properties = {
-    "spring.metrics.export.filter.enabled=false", // turn off all metrics by default
+    "spring.metrics.filter.enabled=false", // turn off all metrics by default
     "spring.metrics.filter.my.timer.enabled=true",
     "spring.metrics.filter.my.timer.maximumExpectedValue=PT10S",
     "spring.metrics.filter.my.timer.minimumExpectedValue=1ms",

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/MetricsAutoConfiguration.java
Patch:
@@ -147,7 +147,7 @@ static class MeterRegistryConfigurationSupport {
 
     @Bean
     @ConditionalOnClass(name = "com.netflix.hystrix.strategy.HystrixPlugins")
-    @ConditionalOnProperty(value = "spring.metrics.hystrix.enabled", matchIfMissing = true)
+    @ConditionalOnProperty(value = "spring.metrics.export.hystrix.enabled", matchIfMissing = true)
     public HystrixMetricsBinder hystrixMetricsBinder() {
         return new HystrixMetricsBinder();
     }

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/export/atlas/AtlasExportConfiguration.java
Patch:
@@ -95,7 +95,7 @@ public AtlasConfig atlasConfig(AtlasProperties props) {
     }
 
     @Bean
-    @ConditionalOnProperty(value = "spring.metrics.atlas.enabled", matchIfMissing = true)
+    @ConditionalOnProperty(value = "spring.metrics.export.atlas.enabled", matchIfMissing = true)
     public MetricsExporter atlasExporter(AtlasConfig config, Clock clock) {
         return () -> new AtlasMeterRegistry(config, clock);
     }

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/export/atlas/AtlasProperties.java
Patch:
@@ -25,7 +25,7 @@
  *
  * @author Jon Schneider
  */
-@ConfigurationProperties(prefix = "spring.metrics.atlas")
+@ConfigurationProperties(prefix = "spring.metrics.export.atlas")
 public class AtlasProperties extends StepRegistryProperties {
     /**
      * The URI for the Atlas backend

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/export/cloudwatch/CloudWatchExportConfiguration.java
Patch:
@@ -66,7 +66,7 @@ public CloudWatchConfig cloudwatchConfig(CloudWatchProperties props) {
     }
 
     @Bean
-    @ConditionalOnProperty(value = "spring.metrics.cloudwatch.enabled", matchIfMissing = true)
+    @ConditionalOnProperty(value = "spring.metrics.export.cloudwatch.enabled", matchIfMissing = true)
     public MetricsExporter cloudwatchExporter(CloudWatchConfig config, Clock clock, AmazonCloudWatchAsync client) {
         return () -> new CloudWatchMeterRegistry(config, clock, client);
     }

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/export/cloudwatch/CloudWatchProperties.java
Patch:
@@ -23,7 +23,7 @@
  *
  * @author Jon Schneider
  */
-@ConfigurationProperties(prefix = "spring.metrics.cloudwatch")
+@ConfigurationProperties(prefix = "spring.metrics.export.cloudwatch")
 public class CloudWatchProperties extends StepRegistryProperties {
     private String namespace;
 

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/export/datadog/DatadogExportConfiguration.java
Patch:
@@ -67,7 +67,7 @@ public DatadogConfig datadogConfig(DatadogProperties props) {
     }
 
     @Bean
-    @ConditionalOnProperty(value = "spring.metrics.datadog.enabled", matchIfMissing = true)
+    @ConditionalOnProperty(value = "spring.metrics.export.datadog.enabled", matchIfMissing = true)
     public MetricsExporter datadogExporter(DatadogConfig config, Clock clock) {
         return () -> new DatadogMeterRegistry(config, clock);
     }

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/export/datadog/DatadogProperties.java
Patch:
@@ -23,7 +23,7 @@
  *
  * @author Jon Schneider
  */
-@ConfigurationProperties(prefix = "spring.metrics.datadog")
+@ConfigurationProperties(prefix = "spring.metrics.export.datadog")
 public class DatadogProperties extends StepRegistryProperties {
     /**
      * Your API key, found in your account settings at datadoghq. This property is required.

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/export/ganglia/GangliaExportConfiguration.java
Patch:
@@ -109,7 +109,7 @@ public GangliaConfig gangliaConfig(GangliaProperties props) {
     }
 
     @Bean
-    @ConditionalOnProperty(value = "spring.metrics.ganglia.enabled", matchIfMissing = true)
+    @ConditionalOnProperty(value = "spring.metrics.export.ganglia.enabled", matchIfMissing = true)
     public MetricsExporter gangliaExporter(GangliaConfig config,
                                            HierarchicalNameMapper nameMapper, Clock clock) {
         return () -> new GangliaMeterRegistry(config, nameMapper, clock);

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/export/ganglia/GangliaProperties.java
Patch:
@@ -26,7 +26,7 @@
  *
  * @author Jon Schneider
  */
-@ConfigurationProperties(prefix = "spring.metrics.ganglia")
+@ConfigurationProperties(prefix = "spring.metrics.export.ganglia")
 public class GangliaProperties {
     /**
      * Enable publishing to the backend.

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/export/graphite/GraphiteExportConfiguration.java
Patch:
@@ -99,7 +99,7 @@ public GraphiteConfig graphiteConfig(GraphiteProperties props) {
     }
     
     @Bean
-    @ConditionalOnProperty(value = "spring.metrics.graphite.enabled", matchIfMissing = true)
+    @ConditionalOnProperty(value = "spring.metrics.export.graphite.enabled", matchIfMissing = true)
     public MetricsExporter graphiteExporter(GraphiteConfig config,
                                             HierarchicalNameMapper nameMapper, Clock clock) {
         return () -> new GraphiteMeterRegistry(config, nameMapper, clock);

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/export/graphite/GraphiteProperties.java
Patch:
@@ -26,7 +26,7 @@
  *
  * @author Jon Schneider
  */
-@ConfigurationProperties(prefix = "spring.metrics.graphite")
+@ConfigurationProperties(prefix = "spring.metrics.export.graphite")
 public class GraphiteProperties {
     /**
      * Enable publishing to the backend.

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/export/influx/InfluxExportConfiguration.java
Patch:
@@ -92,7 +92,7 @@ public InfluxConfig influxConfig(InfluxProperties props) {
     }
 
     @Bean
-    @ConditionalOnProperty(value = "spring.metrics.influx.enabled", matchIfMissing = true)
+    @ConditionalOnProperty(value = "spring.metrics.export.influx.enabled", matchIfMissing = true)
     public MetricsExporter influxExporter(InfluxConfig config, Clock clock) {
         return () -> new InfluxMeterRegistry(config, clock);
     }

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/export/influx/InfluxProperties.java
Patch:
@@ -24,7 +24,7 @@
  *
  * @author Jon Schneider
  */
-@ConfigurationProperties(prefix = "spring.metrics.influx")
+@ConfigurationProperties(prefix = "spring.metrics.export.influx")
 public class InfluxProperties extends StepRegistryProperties {
     /**
      * The tag that will be mapped to "host" when shipping metrics to Influx, or {@code null} if

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/export/jmx/JmxExportConfiguration.java
Patch:
@@ -35,7 +35,7 @@
 public class JmxExportConfiguration {
 
     @Bean
-    @ConditionalOnProperty(value = "spring.metrics.jmx.enabled", matchIfMissing = true)
+    @ConditionalOnProperty(value = "spring.metrics.export.jmx.enabled", matchIfMissing = true)
     public MetricsExporter jmxExporter(HierarchicalNameMapper nameMapper, Clock clock) {
         return () -> new JmxMeterRegistry(nameMapper, clock);
     }

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/export/newrelic/NewRelicExportConfiguration.java
Patch:
@@ -73,7 +73,7 @@ public NewRelicConfig newRelicConfig(NewRelicProperties props) {
     }
 
     @Bean
-    @ConditionalOnProperty(value = "spring.metrics.newrelic.enabled", matchIfMissing = true)
+    @ConditionalOnProperty(value = "spring.metrics.export.newrelic.enabled", matchIfMissing = true)
     public MetricsExporter newRelicExporter(NewRelicConfig config, Clock clock) {
         return () -> new NewRelicMeterRegistry(config, clock);
     }

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/export/newrelic/NewRelicProperties.java
Patch:
@@ -23,7 +23,7 @@
  *
  * @author Jon Schneider
  */
-@ConfigurationProperties(prefix = "spring.metrics.newrelic")
+@ConfigurationProperties(prefix = "spring.metrics.export.newrelic")
 public class NewRelicProperties extends StepRegistryProperties {
     /**
      * Your API key, found in your account settings at New Relic. This property is required.

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/export/prometheus/PrometheusExportConfiguration.java
Patch:
@@ -75,7 +75,7 @@ public PrometheusConfig prometheusConfig(PrometheusProperties props) {
     }
 
     @Bean
-    @ConditionalOnProperty(value = "spring.metrics.prometheus.enabled", matchIfMissing = true)
+    @ConditionalOnProperty(value = "spring.metrics.export.prometheus.enabled", matchIfMissing = true)
     public MetricsExporter prometheusExporter(PrometheusConfig config,
                                               CollectorRegistry collectorRegistry, Clock clock) {
         return () -> new PrometheusMeterRegistry(config, collectorRegistry, clock);

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/export/prometheus/PrometheusProperties.java
Patch:
@@ -24,7 +24,7 @@
  *
  * @author Jon Schneider
  */
-@ConfigurationProperties(prefix = "spring.metrics.prometheus")
+@ConfigurationProperties(prefix = "spring.metrics.export.prometheus")
 public class PrometheusProperties {
     /**
      * Enable publishing to Prometheus.

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/export/simple/SimpleExportConfiguration.java
Patch:
@@ -35,7 +35,7 @@
 public class SimpleExportConfiguration {
 
     @Bean
-    @ConditionalOnProperty(value = "spring.metrics.simple.enabled", matchIfMissing = true)
+    @ConditionalOnProperty(value = "spring.metrics.export.simple.enabled", matchIfMissing = true)
     @ConditionalOnMissingBean(MetricsExporter.class)
     public MetricsExporter simpleExporter(SimpleConfig config, Clock clock) {
         return () -> new SimpleMeterRegistry(config, clock);

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/export/simple/SimpleProperties.java
Patch:
@@ -24,7 +24,7 @@
  *
  * @author Jon Schneider
  */
-@ConfigurationProperties(prefix = "spring.metrics.simple")
+@ConfigurationProperties(prefix = "spring.metrics.export.simple")
 public class SimpleProperties {
 
     private boolean enabled = true;

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/export/statsd/StatsdExportConfiguration.java
Patch:
@@ -98,7 +98,7 @@ public StatsdConfig statsdConfig(StatsdProperties props) {
     }
 
     @Bean
-    @ConditionalOnProperty(value = "spring.metrics.statsd.enabled", matchIfMissing = true)
+    @ConditionalOnProperty(value = "spring.metrics.export.statsd.enabled", matchIfMissing = true)
     public MetricsExporter statsdExporter(StatsdConfig config, HierarchicalNameMapper hierarchicalNameMapper, Clock clock) {
         return () -> new StatsdMeterRegistry(config, hierarchicalNameMapper, clock);
     }

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/export/statsd/StatsdProperties.java
Patch:
@@ -25,7 +25,7 @@
  *
  * @author Jon Schneider
  */
-@ConfigurationProperties(prefix = "spring.metrics.statsd")
+@ConfigurationProperties(prefix = "spring.metrics.export.statsd")
 public class StatsdProperties {
     /**
      * Enable publishing to the backend.

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/web/tomcat/TomcatMetricsConfiguration.java
Patch:
@@ -33,7 +33,7 @@ public class TomcatMetricsConfiguration {
 
         @Bean
         @ConditionalOnClass(name="org.apache.catalina.startup.Tomcat")
-        @ConditionalOnProperty(value = "spring.metrics.tomcat.enabled", matchIfMissing = true)
+        @ConditionalOnProperty(value = "spring.metrics.export.tomcat.enabled", matchIfMissing = true)
         public TomcatMetrics metrics(ApplicationContext applicationContext) {
             Manager manager = null;
             if (applicationContext instanceof EmbeddedWebApplicationContext) {

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/SpringEnvironmentMeterFilterTest.java
Patch:
@@ -36,7 +36,7 @@
 
 @RunWith(SpringRunner.class)
 @TestPropertySource(properties = {
-    "spring.metrics.filter.enabled=false", // turn off all metrics by default
+    "spring.metrics.export.filter.enabled=false", // turn off all metrics by default
     "spring.metrics.filter.my.timer.enabled=true",
     "spring.metrics.filter.my.timer.maximumExpectedValue=PT10S",
     "spring.metrics.filter.my.timer.minimumExpectedValue=1ms",

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Tags.java
Patch:
@@ -51,7 +51,7 @@ public static Iterable<Tag> concat(Iterable<Tag> tags, String... keyValues) {
         return concat(tags, zip(keyValues));
     }
 
-    public static Iterable<Tag> singletonList(String tagKey, String tagValue) {
+    public static Iterable<Tag> of(String tagKey, String tagValue) {
         return Collections.singletonList(Tag.of(tagKey, tagValue));
     }
 }

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdGauge.java
Patch:
@@ -31,7 +31,7 @@ public class StatsdGauge<T> extends AbstractMeter implements Gauge, StatsdPollab
 
     private final WeakReference<T> ref;
     private final ToDoubleFunction<T> value;
-    private final AtomicReference<Double> lastValue = new AtomicReference<>(Double.NEGATIVE_INFINITY);
+    private final AtomicReference<Double> lastValue = new AtomicReference<>(Double.NaN);
 
     StatsdGauge(Meter.Id id, StatsdLineBuilder lineBuilder, Subscriber<String> publisher, T obj, ToDoubleFunction<T> value) {
         super(id);
@@ -50,9 +50,9 @@ public double value() {
     @Override
     public void poll() {
         double val = value();
-//        if(lastValue.getAndSet(val) != val) {
+        if(lastValue.getAndSet(val) != val) {
             publisher.onNext(lineBuilder.gauge(val));
-//        }
+        }
     }
 
     @SuppressWarnings("EqualsWhichDoesntCheckParameterClass")

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/MetricsAutoConfiguration.java
Patch:
@@ -25,7 +25,7 @@
 import io.micrometer.spring.autoconfigure.export.MetricsExporter;
 import io.micrometer.spring.autoconfigure.export.atlas.AtlasExportConfiguration;
 import io.micrometer.spring.autoconfigure.export.datadog.DatadogExportConfiguration;
-import io.micrometer.spring.autoconfigure.export.datadog.NewRelicExportConfiguration;
+import io.micrometer.spring.autoconfigure.export.newrelic.NewRelicExportConfiguration;
 import io.micrometer.spring.autoconfigure.export.ganglia.GangliaExportConfiguration;
 import io.micrometer.spring.autoconfigure.export.graphite.GraphiteExportConfiguration;
 import io.micrometer.spring.autoconfigure.export.influx.InfluxExportConfiguration;

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/export/newrelic/NewRelicExportConfiguration.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.spring.autoconfigure.export.datadog;
+package io.micrometer.spring.autoconfigure.export.newrelic;
 
 import io.micrometer.core.instrument.Clock;
 import io.micrometer.newrelic.NewRelicConfig;

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusMeterRegistry.java
Patch:
@@ -20,7 +20,6 @@
 import io.micrometer.core.instrument.internal.DefaultFunctionTimer;
 import io.micrometer.core.instrument.internal.DefaultGauge;
 import io.micrometer.core.instrument.internal.DefaultLongTaskTimer;
-import io.micrometer.core.instrument.util.TimeUtils;
 import io.prometheus.client.Collector;
 import io.prometheus.client.CollectorRegistry;
 import io.prometheus.client.exporter.common.TextFormat;

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdLineBuilder.java
Patch:
@@ -29,7 +29,7 @@
 import java.util.function.Function;
 import java.util.stream.Collectors;
 
-import static io.micrometer.statsd.internal.MemoizingSupplier.memoize;
+import static io.micrometer.statsd.internal.MemoizingFunction.memoize;
 import static java.beans.Introspector.decapitalize;
 import static java.util.stream.Stream.of;
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/cumulative/CumulativeCounter.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.core.instrument.simple;
+package io.micrometer.core.instrument.cumulative;
 
 import io.micrometer.core.instrument.AbstractMeter;
 import io.micrometer.core.instrument.Counter;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/cumulative/CumulativeDistributionSummary.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.core.instrument.simple;
+package io.micrometer.core.instrument.cumulative;
 
 import com.google.common.util.concurrent.AtomicDouble;
 import io.micrometer.core.instrument.AbstractDistributionSummary;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/cumulative/CumulativeTimer.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.core.instrument.simple;
+package io.micrometer.core.instrument.cumulative;
 
 import io.micrometer.core.instrument.AbstractTimer;
 import io.micrometer.core.instrument.Clock;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/simple/SimpleMeterRegistry.java
Patch:
@@ -16,6 +16,9 @@
 package io.micrometer.core.instrument.simple;
 
 import io.micrometer.core.instrument.*;
+import io.micrometer.core.instrument.cumulative.CumulativeCounter;
+import io.micrometer.core.instrument.cumulative.CumulativeDistributionSummary;
+import io.micrometer.core.instrument.cumulative.CumulativeTimer;
 import io.micrometer.core.instrument.histogram.HistogramConfig;
 import io.micrometer.core.instrument.internal.DefaultGauge;
 import io.micrometer.core.instrument.internal.DefaultLongTaskTimer;

File: micrometer-samples/src/main/java/io/micrometer/core/samples/CounterSample.java
Patch:
@@ -26,7 +26,7 @@
 
 public class CounterSample {
     public static void main(String[] args) {
-        Counter counter = SampleRegistries.prometheus().counter("counter");
+        Counter counter = SampleRegistries.newRelic().counter("counter");
 
         RandomEngine r = new MersenneTwister64(0);
         Normal dist = new Normal(0, 1, r);

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/autoconfigure/MeterRegistryConfigurerTest.java
Patch:
@@ -42,7 +42,8 @@
     "spring.metrics.graphite.enabled=false",
     "spring.metrics.influx.enabled=false",
     "spring.metrics.jmx.enabled=false",
-    "spring.metrics.statsd.enabled=false"
+    "spring.metrics.statsd.enabled=false",
+    "spring.metrics.newrelic.enabled=false"
 })
 public class MeterRegistryConfigurerTest {
 

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/autoconfigure/MetricsConfigurationCompositeTest.java
Patch:
@@ -42,7 +42,8 @@
     "spring.metrics.influx.enabled=false",
     "spring.metrics.jmx.enabled=false",
     "spring.metrics.statsd.enabled=false",
-    "spring.metrics.prometheus.enabled=true"
+    "spring.metrics.prometheus.enabled=true",
+    "spring.metrics.newrelic.enabled=false"
 })
 public class MetricsConfigurationCompositeTest {
     @Autowired

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/autoconfigure/export/simple/SimpleExportConfigurationTest.java
Patch:
@@ -41,6 +41,7 @@
     "spring.metrics.influx.enabled=false",
     "spring.metrics.jmx.enabled=false",
     "spring.metrics.statsd.enabled=false",
+    "spring.metrics.newrelic.enabled=false"
 })
 public class SimpleExportConfigurationTest {
     @Autowired

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/integration/SpringIntegrationMetricsTest.java
Patch:
@@ -47,7 +47,8 @@
     "spring.metrics.ganglia.enabled=false",
     "spring.metrics.influx.enabled=false",
     "spring.metrics.jmx.enabled=false",
-    "spring.metrics.statsd.enabled=false"
+    "spring.metrics.statsd.enabled=false",
+    "spring.metrics.newrelic.enabled=false"
 })
 public class SpringIntegrationMetricsTest {
     @Autowired

File: implementations/micrometer-registry-datadog/src/main/java/io/micrometer/datadog/DatadogMeterRegistry.java
Patch:
@@ -190,7 +190,7 @@ private String writeMetric(Meter.Id id, long wallTime, double value) {
         String host = config.hostTag() == null ? "" : stream(tags.spliterator(), false)
             .filter(t -> config.hostTag().equals(t.getKey()))
             .findAny()
-            .map(t -> ",\"host\":" + t.getValue())
+            .map(t -> ",\"host\":\"" + t.getValue() + "\"")
             .orElse("");
 
         String tagsArray = tags.iterator().hasNext() ?

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/export/StringToDurationConverter.java
Patch:
@@ -16,6 +16,7 @@
 package io.micrometer.spring.autoconfigure.export;
 
 import org.springframework.boot.context.properties.ConfigurationPropertiesBinding;
+import org.springframework.core.annotation.Order;
 import org.springframework.core.convert.converter.Converter;
 
 import java.time.Duration;
@@ -30,6 +31,7 @@
  * @author Andy Wilkinson
  */
 @ConfigurationPropertiesBinding
+@Order(0)
 public class StringToDurationConverter implements Converter<String, Duration> {
 
     @Override

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/web/servlet/WebMvcMetricsConfiguration.java
Patch:
@@ -23,6 +23,7 @@
 import io.micrometer.spring.web.servlet.WebMvcTagsProvider;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
@@ -37,6 +38,7 @@
  */
 @Configuration
 @ConditionalOnClass(DispatcherServlet.class)
+@ConditionalOnWebApplication
 @EnableConfigurationProperties(MetricsProperties.class)
 public class WebMvcMetricsConfiguration {
 

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusMeterRegistry.java
Patch:
@@ -126,7 +126,7 @@ public DistributionSummary newDistributionSummary(Meter.Id id, HistogramConfig h
                     if (bucket == Long.MAX_VALUE) {
                         histogramValues.add("+Inf");
                     } else {
-                        histogramValues.add(Collector.doubleToGoString(TimeUtils.nanosToUnit(bucket, TimeUnit.SECONDS)));
+                        histogramValues.add(Collector.doubleToGoString(bucket));
                     }
 
                     samples.add(new Collector.MetricFamilySamples.Sample(

File: micrometer-core/src/main/java/io/micrometer/core/instrument/histogram/HistogramConfig.java
Patch:
@@ -67,7 +67,6 @@ public NavigableSet<Long> getHistogramBuckets(boolean supportsAggregablePercenti
             buckets.addAll(PercentileHistogramBuckets.buckets(this));
             buckets.add(minimumExpectedValue);
             buckets.add(maximumExpectedValue);
-            buckets.add(Long.MAX_VALUE);
         }
 
         for (long slaBoundary : sla) {

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusMeterRegistry.java
Patch:
@@ -151,7 +151,7 @@ public DistributionSummary newDistributionSummary(Meter.Id id, HistogramConfig h
 
     @Override
     protected io.micrometer.core.instrument.Timer newTimer(Meter.Id id, HistogramConfig histogramConfig) {
-        MicrometerCollector collector = collectorByName(id, Collector.Type.SUMMARY);
+        MicrometerCollector collector = collectorByName(id, histogramConfig.isPublishingHistogram() ? Collector.Type.HISTOGRAM : Collector.Type.SUMMARY);
         PrometheusTimer timer = new PrometheusTimer(id, clock, histogramConfig, prometheusConfig.step().toMillis());
         List<String> tagValues = tagValues(id);
 

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusMeterRegistry.java
Patch:
@@ -288,9 +288,6 @@ protected void newMeter(Meter.Id id, Meter.Type type, Iterable<Measurement> meas
                         case TotalTime:
                             name += "_sum";
                             break;
-                        case Count:
-                            name += "_count";
-                            break;
                         case Max:
                             name += "_max";
                             break;

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/web/servlet/WebMvcTags.java
Patch:
@@ -86,6 +86,9 @@ public static Tag uri(HttpServletRequest request, HttpServletResponse response)
         if (!StringUtils.hasText(uri)) {
             uri = "/";
         }
+
+        uri = uri.replaceAll("//+", "/").replaceAll("/$", "");
+
         return Tag.of("uri", uri.isEmpty() ? "root" : uri);
     }
 

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/web/servlet/MetricsFilter.java
Patch:
@@ -60,6 +60,7 @@ protected void doFilterInternal(HttpServletRequest request, HttpServletResponse
             handler = matchableHandlerMapping.getHandler(request);
         } catch (Exception e) {
             logger.debug("Unable to time request", e);
+            filterChain.doFilter(request, response);
             return;
         }
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/MeterRegistry.java
Patch:
@@ -153,7 +153,6 @@ DistributionSummary summary(Meter.Id id, HistogramConfig histogramConfig) {
      */
     Meter register(Meter.Id id, Meter.Type type, Iterable<Measurement> measurements) {
         return registerMeterIfNecessary(Meter.class, id, id2 -> {
-            id.setType(type);
             newMeter(id2, type, measurements);
             return new Meter() {
                 @Override

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Counter.java
Patch:
@@ -48,7 +48,7 @@ default Iterable<Measurement> measure() {
     }
 
     @Override
-    default Type getType() {
+    default Type type() {
         return Type.Counter;
     }
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/FunctionCounter.java
Patch:
@@ -37,7 +37,7 @@ default Iterable<Measurement> measure() {
     }
 
     @Override
-    default Meter.Type getType() {
+    default Meter.Type type() {
         return Meter.Type.Counter;
     }
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Gauge.java
Patch:
@@ -33,7 +33,7 @@ default Iterable<Measurement> measure() {
     }
 
     @Override
-    default Type getType() {
+    default Type type() {
         return Type.Gauge;
     }
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/LongTaskTimer.java
Patch:
@@ -126,7 +126,7 @@ default Iterable<Measurement> measure() {
     }
 
     @Override
-    default Type getType() {
+    default Type type() {
         return Type.LongTaskTimer;
     }
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/MeterRegistry.java
Patch:
@@ -97,7 +97,7 @@ public double value() {
             }
 
             @Override
-            public TimeUnit getBaseTimeUnit() {
+            public TimeUnit baseTimeUnit() {
                 return baseTimeUnit;
             }
         };
@@ -162,7 +162,7 @@ public Id getId() {
                 }
 
                 @Override
-                public Type getType() {
+                public Type type() {
                     return type;
                 }
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/TimeGauge.java
Patch:
@@ -26,10 +26,10 @@
  * @author Jon Schneider
  */
 public interface TimeGauge extends Gauge {
-    TimeUnit getBaseTimeUnit();
+    TimeUnit baseTimeUnit();
 
     default double value(TimeUnit unit) {
-        return TimeUtils.convert(value(), getBaseTimeUnit(), unit);
+        return TimeUtils.convert(value(), baseTimeUnit(), unit);
     }
 
     static <T> Builder<T> builder(String name, T obj, TimeUnit fUnits, ToDoubleFunction<T> f) {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Timer.java
Patch:
@@ -129,7 +129,7 @@ default Iterable<Measurement> measure() {
     }
 
     @Override
-    default Type getType() {
+    default Type type() {
         return Type.Timer;
     }
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeTimeGauge.java
Patch:
@@ -42,8 +42,8 @@ public double value() {
     }
 
     @Override
-    public TimeUnit getBaseTimeUnit() {
-        return firstChild().getBaseTimeUnit();
+    public TimeUnit baseTimeUnit() {
+        return firstChild().baseTimeUnit();
     }
 
     @Override

File: micrometer-core/src/main/java/io/micrometer/core/instrument/internal/DefaultFunctionTimer.java
Patch:
@@ -80,7 +80,7 @@ public TimeUnit baseTimeUnit() {
         return this.baseTimeUnit;
     }
 
-    public Type getType() {
+    public Type type() {
         return Type.Timer;
     }
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/noop/NoopTimeGauge.java
Patch:
@@ -26,7 +26,7 @@ public NoopTimeGauge(Id id) {
     }
 
     @Override
-    public TimeUnit getBaseTimeUnit() {
+    public TimeUnit baseTimeUnit() {
         return TimeUnit.NANOSECONDS;
     }
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/histogram/HistogramConfig.java
Patch:
@@ -33,7 +33,7 @@ public class HistogramConfig implements Mergeable<HistogramConfig> {
     private Duration histogramExpiry;
     private Integer histogramBufferLength;
 
-    public static HistogramConfig DEFAULT = builder()
+    public static final HistogramConfig DEFAULT = builder()
         .percentilesHistogram(false)
         .percentiles()
         .sla()
@@ -110,7 +110,7 @@ public static Builder builder() {
     }
 
     public static class Builder {
-        private HistogramConfig config = new HistogramConfig();
+        private final HistogramConfig config = new HistogramConfig();
 
         public Builder percentilesHistogram(Boolean enabled) {
             config.percentileHistogram = enabled;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeLongTaskTimer.java
Patch:
@@ -62,7 +62,7 @@ public double duration(long task, TimeUnit unit) {
                 return mapping.ltt.duration(mapping.id, unit);
             }
         }
-        return 0.0;
+        return -1.0;
     }
 
     @Override

File: micrometer-test/src/test/java/io/micrometer/core/instrument/composite/CompositeMeterRegistryCompatibilityTest.java
Patch:
@@ -21,7 +21,7 @@
 import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
 import io.micrometer.core.tck.MeterRegistryCompatibilityKit;
 
-class CompositeMeterRegistryCompatibility extends MeterRegistryCompatibilityKit {
+class CompositeMeterRegistryCompatibilityTest extends MeterRegistryCompatibilityKit {
     @Override
     public MeterRegistry registry() {
         return new CompositeMeterRegistry(new MockClock()) {{

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdMeterRegistry.java
Patch:
@@ -255,6 +255,6 @@ protected TimeUnit getBaseTimeUnit() {
     }
 
     private StatsdLineBuilder lineBuilder(Meter.Id id) {
-        return new StatsdLineBuilder(id, statsdConfig.flavor(), nameMapper, config().namingConvention());
+        return new StatsdLineBuilder(id, statsdConfig.flavor(), nameMapper, config());
     }
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/AbstractCompositeMeter.java
Patch:
@@ -89,7 +89,6 @@ private T findFirstChild() {
         return i.hasNext() ? i.next().meter() : null;
     }
 
-    @Override
     public final void add(MeterRegistry registry) {
         final T newMeter = registerNewMeter(registry);
         if (newMeter == null) {
@@ -100,7 +99,6 @@ public final void add(MeterRegistry registry) {
         firstMeterUpdater.compareAndSet(this, null, newMeter);
     }
 
-    @Override
     public final void remove(MeterRegistry registry) {
         // Not very efficient, but this operation is expected to be used rarely.
         final AtomicReference<T> meterHolder = new AtomicReference<>();

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Timer.java
Patch:
@@ -88,7 +88,9 @@ default Runnable wrap(Runnable f) {
      * @param f The Callable to time when it is invoked.
      * @return The wrapped Callable.
      */
-    <T> Callable<T> wrap(Callable<T> f);
+    default <T> Callable<T> wrap(Callable<T> f) {
+        return () -> recordCallable(f);
+    }
 
     /**
      * The number of times that record has been called on this timer.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeCustomMeter.java
Patch:
@@ -19,7 +19,7 @@
 import io.micrometer.core.instrument.Meter;
 import io.micrometer.core.instrument.MeterRegistry;
 
-public class CompositeCustomMeter implements CompositeMeter {
+class CompositeCustomMeter implements CompositeMeter {
     private final Meter.Id id;
     private final Meter.Type type;
     private final Iterable<Measurement> measurements;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeMeter.java
Patch:
@@ -18,7 +18,7 @@
 import io.micrometer.core.instrument.Meter;
 import io.micrometer.core.instrument.MeterRegistry;
 
-public interface CompositeMeter extends Meter {
+interface CompositeMeter extends Meter {
     void add(MeterRegistry registry);
     void remove(MeterRegistry registry);
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/noop/NoopTimeGauge.java
Patch:
@@ -20,13 +20,14 @@
 import java.util.concurrent.TimeUnit;
 
 public class NoopTimeGauge extends NoopMeter implements TimeGauge {
+
     public NoopTimeGauge(Id id) {
         super(id);
     }
 
     @Override
     public TimeUnit getBaseTimeUnit() {
-        return null;
+        return TimeUnit.NANOSECONDS;
     }
 
     @Override

File: micrometer-core/src/main/java/io/micrometer/core/instrument/dropwizard/DropwizardMeterRegistry.java
Patch:
@@ -101,6 +101,7 @@ protected DistributionSummary newDistributionSummary(Meter.Id id, HistogramConfi
         return summary;
     }
 
+    @Override
     protected LongTaskTimer newLongTaskTimer(Meter.Id id) {
         LongTaskTimer ltt = new DefaultLongTaskTimer(id, clock);
         registry.register(hierarchicalName(id.withTag(Statistic.ActiveTasks)), (Gauge<Integer>) ltt::activeTasks);

File: micrometer-core/src/main/java/io/micrometer/core/instrument/DistributionSummary.java
Patch:
@@ -62,6 +62,8 @@ default double mean() {
 
     double histogramCountAtValue(long value);
 
+    HistogramSnapshot takeSnapshot(boolean supportsAggregablePercentiles);
+
     static Builder builder(String name) {
         return new Builder(name);
     }
@@ -176,4 +178,4 @@ default Iterable<Measurement> measure() {
         );
     }
 
-}
\ No newline at end of file
+}

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Timer.java
Patch:
@@ -116,6 +116,8 @@ default double mean(TimeUnit unit) {
 
     double histogramCountAtValue(long valueNanos);
 
+    HistogramSnapshot takeSnapshot(boolean supportsAggregablePercentiles);
+
     @Override
     default Iterable<Measurement> measure() {
         return Arrays.asList(

File: micrometer-core/src/main/java/io/micrometer/core/instrument/AbstractDistributionSummary.java
Patch:
@@ -21,15 +21,15 @@
 public abstract class AbstractDistributionSummary extends AbstractMeter implements DistributionSummary {
     private final TimeWindowHistogram histogram;
 
-    public AbstractDistributionSummary(Id id, Clock clock, HistogramConfig histogramConfig) {
+    protected AbstractDistributionSummary(Id id, Clock clock, HistogramConfig histogramConfig) {
         super(id);
         this.histogram = new TimeWindowHistogram(clock, histogramConfig);
     }
 
     @Override
     public final void record(double amount) {
         if (amount >= 0) {
-            histogram.record(amount);
+            histogram.recordDouble(amount);
             recordNonNegative(amount);
         }
     }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/AbstractTimer.java
Patch:
@@ -85,7 +85,7 @@ public void record(Runnable f) {
     @Override
     public final void record(long amount, TimeUnit unit) {
         if(amount >= 0) {
-            histogram.record((long) TimeUtils.convert(amount, unit, TimeUnit.NANOSECONDS));
+            histogram.recordLong(TimeUnit.NANOSECONDS.convert(amount, unit));
             recordNonNegative(amount, unit);
         }
     }
@@ -94,7 +94,7 @@ public final void record(long amount, TimeUnit unit) {
 
     @Override
     public double percentile(double percentile, TimeUnit unit) {
-        return histogram.percentile(percentile, unit);
+        return TimeUtils.nanosToUnit(histogram.percentile(percentile), unit);
     }
 
     @Override

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/system/ProcessorMetrics.java
Patch:
@@ -43,7 +43,7 @@ public ProcessorMetrics(Iterable<Tag> tags) {
     public void bindTo(MeterRegistry registry) {
         Runtime runtime = Runtime.getRuntime();
 
-        Gauge.builder("cpu", runtime, Runtime::availableProcessors)
+        Gauge.builder("system.cpu.count", runtime, Runtime::availableProcessors)
             .tags(tags)
             .description("The number of processors available to the Java virtual machine")
             .register(registry);

File: micrometer-core/src/main/java/io/micrometer/core/instrument/simple/SimpleConfig.java
Patch:
@@ -23,7 +23,7 @@ public interface SimpleConfig extends StepRegistryConfig {
     SimpleConfig DEFAULT = k -> null;
 
     // Useful in tests
-    Duration DEFAULT_STEP = Duration.ofSeconds(10);
+    Duration DEFAULT_STEP = Duration.ofMinutes(1);
 
     @Override
     default String prefix() {

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/web/servlet/DefaultWebMvcTagsProvider.java
Patch:
@@ -37,7 +37,7 @@ public class DefaultWebMvcTagsProvider implements WebMvcTagsProvider {
      */
     @Override
     public Iterable<Tag> httpLongRequestTags(HttpServletRequest request, Object handler) {
-        return Arrays.asList(WebMvcTags.method(request), WebMvcTags.uri(request));
+        return Arrays.asList(WebMvcTags.method(request), WebMvcTags.uri(request, null));
     }
 
     /**
@@ -51,7 +51,7 @@ public Iterable<Tag> httpLongRequestTags(HttpServletRequest request, Object hand
     @Override
     public Iterable<Tag> httpRequestTags(HttpServletRequest request,
                                          HttpServletResponse response, Throwable ex) {
-        return Arrays.asList(WebMvcTags.method(request), WebMvcTags.uri(request),
+        return Arrays.asList(WebMvcTags.method(request), WebMvcTags.uri(request, response),
             WebMvcTags.exception(ex), WebMvcTags.status(response));
     }
 

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/autoconfigure/MetricsConfigurationCompositeTest.java
Patch:
@@ -16,7 +16,6 @@
 package io.micrometer.spring.autoconfigure;
 
 import io.micrometer.core.instrument.composite.CompositeMeterRegistry;
-import io.micrometer.graphite.GraphiteMeterRegistry;
 import io.micrometer.prometheus.PrometheusMeterRegistry;
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: implementations/micrometer-registry-prometheus/src/test/java/io/micrometer/prometheus/PrometheusMeterRegistryTest.java
Patch:
@@ -192,7 +192,7 @@ void timersRecordMax() {
         assertThat(timer.max(TimeUnit.SECONDS)).isEqualTo(0);
         assertThat(registry.scrape()).contains("my_timer_duration_seconds_max 0.0");
 
-        clock(registry).add(SimpleConfig.DEFAULT_STEP);
+        clock(registry).add(PrometheusConfig.DEFAULT.step());
         assertThat(timer.max(TimeUnit.SECONDS)).isEqualTo(1);
         assertThat(timer.max(TimeUnit.MILLISECONDS)).isEqualTo(1000);
 
@@ -209,7 +209,7 @@ void distributionSummariesRecordMax() {
         assertThat(summary.max()).isEqualTo(0);
         assertThat(registry.scrape()).contains("my_summary_max 0.0");
 
-        clock(registry).add(SimpleConfig.DEFAULT_STEP);
+        clock(registry).add(PrometheusConfig.DEFAULT.step());
         assertThat(summary.max()).isEqualTo(10);
 
         assertThat(registry.scrape()).contains("my_summary_max 10.0");

File: implementations/micrometer-registry-atlas/src/main/java/io/micrometer/atlas/SpectatorDistributionSummary.java
Patch:
@@ -19,7 +19,7 @@
 import com.netflix.spectator.api.Statistic;
 import io.micrometer.core.instrument.AbstractDistributionSummary;
 import io.micrometer.core.instrument.Clock;
-import io.micrometer.core.instrument.histogram.StatsConfig;
+import io.micrometer.core.instrument.histogram.HistogramConfig;
 import io.micrometer.core.instrument.util.MeterEquivalence;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -33,8 +33,8 @@ public class SpectatorDistributionSummary extends AbstractDistributionSummary {
     SpectatorDistributionSummary(Id id,
                                  com.netflix.spectator.api.DistributionSummary distributionSummary,
                                  Clock clock,
-                                 StatsConfig statsConfig) {
-        super(id, clock, statsConfig);
+                                 HistogramConfig histogramConfig) {
+        super(id, clock, histogramConfig);
         this.summary = distributionSummary;
     }
 

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusDistributionSummary.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.micrometer.core.instrument.AbstractDistributionSummary;
 import io.micrometer.core.instrument.Clock;
-import io.micrometer.core.instrument.histogram.StatsConfig;
+import io.micrometer.core.instrument.histogram.HistogramConfig;
 import io.micrometer.core.instrument.step.StepDouble;
 import io.micrometer.core.instrument.util.MeterEquivalence;
 
@@ -29,8 +29,8 @@ public class PrometheusDistributionSummary extends AbstractDistributionSummary {
     private DoubleAdder amount = new DoubleAdder();
     private StepDouble max;
 
-    PrometheusDistributionSummary(Id id, Clock clock, StatsConfig statsConfig, long maxStepMillis) {
-        super(id, clock, statsConfig);
+    PrometheusDistributionSummary(Id id, Clock clock, HistogramConfig histogramConfig, long maxStepMillis) {
+        super(id, clock, histogramConfig);
         this.max = new StepDouble(clock, maxStepMillis);
     }
 

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusTimer.java
Patch:
@@ -18,7 +18,7 @@
 import io.micrometer.core.instrument.AbstractTimer;
 import io.micrometer.core.instrument.Clock;
 import io.micrometer.core.instrument.Timer;
-import io.micrometer.core.instrument.histogram.StatsConfig;
+import io.micrometer.core.instrument.histogram.HistogramConfig;
 import io.micrometer.core.instrument.step.StepDouble;
 import io.micrometer.core.instrument.util.TimeUtils;
 
@@ -30,8 +30,8 @@ public class PrometheusTimer extends AbstractTimer implements Timer {
     private final LongAdder totalTime = new LongAdder();
     private final StepDouble max;
 
-    PrometheusTimer(Id id, Clock clock, StatsConfig statsConfig, long maxStepMillis) {
-        super(id, clock, statsConfig);
+    PrometheusTimer(Id id, Clock clock, HistogramConfig histogramConfig, long maxStepMillis) {
+        super(id, clock, histogramConfig);
         this.max = new StepDouble(clock, maxStepMillis);
     }
 

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdDistributionSummary.java
Patch:
@@ -18,7 +18,7 @@
 import io.micrometer.core.instrument.AbstractDistributionSummary;
 import io.micrometer.core.instrument.Clock;
 import io.micrometer.core.instrument.Meter;
-import io.micrometer.core.instrument.histogram.StatsConfig;
+import io.micrometer.core.instrument.histogram.HistogramConfig;
 import io.micrometer.core.instrument.step.StepDouble;
 import io.micrometer.core.instrument.util.MeterEquivalence;
 import org.reactivestreams.Subscriber;
@@ -35,8 +35,8 @@ public class StatsdDistributionSummary extends AbstractDistributionSummary {
     private final Subscriber<String> publisher;
 
     StatsdDistributionSummary(Meter.Id id, StatsdLineBuilder lineBuilder, Subscriber<String> publisher, Clock clock,
-                              StatsConfig statsConfig, long stepMillis) {
-        super(id, clock, statsConfig);
+                              HistogramConfig histogramConfig, long stepMillis) {
+        super(id, clock, histogramConfig);
         this.max = new StepDouble(clock, stepMillis);
         this.lineBuilder = lineBuilder;
         this.publisher = publisher;

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdTimer.java
Patch:
@@ -18,7 +18,7 @@
 import io.micrometer.core.instrument.AbstractTimer;
 import io.micrometer.core.instrument.Clock;
 import io.micrometer.core.instrument.Timer;
-import io.micrometer.core.instrument.histogram.StatsConfig;
+import io.micrometer.core.instrument.histogram.HistogramConfig;
 import io.micrometer.core.instrument.step.StepDouble;
 import io.micrometer.core.instrument.util.TimeUtils;
 import org.reactivestreams.Processor;
@@ -36,8 +36,8 @@ public class StatsdTimer extends AbstractTimer implements Timer {
     private final Processor<String, String> publisher;
 
     StatsdTimer(Id id, StatsdLineBuilder lineBuilder, Processor<String, String> publisher, Clock clock,
-                StatsConfig statsConfig, long stepMillis) {
-        super(id, clock, statsConfig);
+                HistogramConfig histogramConfig, long stepMillis) {
+        super(id, clock, histogramConfig);
         this.max = new StepDouble(clock, stepMillis);
         this.lineBuilder = lineBuilder;
         this.publisher = publisher;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeCounter.java
Patch:
@@ -38,7 +38,7 @@ public void increment(double amount) {
 
     @Override
     public double count() {
-        return counters.values().stream().findFirst().orElse(NoopCounter.INSTANCE).count();
+        return counters.values().stream().findFirst().orElse(new NoopCounter(getId())).count();
     }
 
     @Override

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeGauge.java
Patch:
@@ -40,7 +40,7 @@ public class CompositeGauge<T> extends AbstractMeter implements Gauge, Composite
 
     @Override
     public double value() {
-        return gauges.values().stream().findFirst().orElse(NoopGauge.INSTANCE).value();
+        return gauges.values().stream().findFirst().orElse(new NoopGauge(getId())).value();
     }
 
     @Override

File: micrometer-core/src/main/java/io/micrometer/core/instrument/dropwizard/DropwizardDistributionSummary.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.micrometer.core.instrument.AbstractDistributionSummary;
 import io.micrometer.core.instrument.Clock;
-import io.micrometer.core.instrument.histogram.StatsConfig;
+import io.micrometer.core.instrument.histogram.HistogramConfig;
 import io.micrometer.core.instrument.step.StepDouble;
 import io.micrometer.core.instrument.util.MeterEquivalence;
 
@@ -31,8 +31,8 @@ public class DropwizardDistributionSummary extends AbstractDistributionSummary {
     private final DoubleAdder totalAmount = new DoubleAdder();
     private final StepDouble max;
 
-    DropwizardDistributionSummary(Id id, Clock clock, com.codahale.metrics.Histogram impl, StatsConfig statsConfig) {
-        super(id, clock, statsConfig);
+    DropwizardDistributionSummary(Id id, Clock clock, com.codahale.metrics.Histogram impl, HistogramConfig histogramConfig) {
+        super(id, clock, histogramConfig);
         this.impl = impl;
         this.max = new StepDouble(clock, 60000);
     }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/dropwizard/DropwizardTimer.java
Patch:
@@ -18,7 +18,7 @@
 import com.codahale.metrics.Timer;
 import io.micrometer.core.instrument.AbstractTimer;
 import io.micrometer.core.instrument.Clock;
-import io.micrometer.core.instrument.histogram.StatsConfig;
+import io.micrometer.core.instrument.histogram.HistogramConfig;
 import io.micrometer.core.instrument.step.StepDouble;
 import io.micrometer.core.instrument.util.TimeUtils;
 
@@ -30,8 +30,8 @@ public class DropwizardTimer extends AbstractTimer {
     private final AtomicLong totalTime = new AtomicLong(0);
     private final StepDouble max;
 
-    DropwizardTimer(Id id, Timer impl, Clock clock, StatsConfig statsConfig) {
-        super(id, clock, statsConfig);
+    DropwizardTimer(Id id, Timer impl, Clock clock, HistogramConfig histogramConfig) {
+        super(id, clock, histogramConfig);
         this.impl = impl;
         this.max = new StepDouble(clock, 60000);
     }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/histogram/PercentileHistogramBuckets.java
Patch:
@@ -71,8 +71,8 @@ public class PercentileHistogramBuckets {
      * timers and distribution summaries because monitoring systems like Prometheus require us to report the
      * same buckets at every interval, regardless of where actual samples have been observed.
      */
-    public static NavigableSet<Long> buckets(StatsConfig statsConfig) {
-        return PERCENTILE_BUCKETS.subSet(statsConfig.getMinimumExpectedValue(), true,
-            statsConfig.getMaximumExpectedValue(), true);
+    public static NavigableSet<Long> buckets(HistogramConfig histogramConfig) {
+        return PERCENTILE_BUCKETS.subSet(histogramConfig.getMinimumExpectedValue(), true,
+            histogramConfig.getMaximumExpectedValue(), true);
     }
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/noop/NoopGauge.java
Patch:
@@ -18,9 +18,9 @@
 import io.micrometer.core.instrument.Gauge;
 
 public class NoopGauge extends NoopMeter implements Gauge {
-    public static final NoopGauge INSTANCE = new NoopGauge();
-
-    private NoopGauge() {}
+    public NoopGauge(Id id) {
+        super(id);
+    }
 
     @Override
     public double value() {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/noop/NoopLongTaskTimer.java
Patch:
@@ -20,9 +20,9 @@
 import java.util.concurrent.TimeUnit;
 
 public class NoopLongTaskTimer extends NoopMeter implements LongTaskTimer {
-    public static NoopLongTaskTimer INSTANCE = new NoopLongTaskTimer();
-
-    private NoopLongTaskTimer() {}
+    public NoopLongTaskTimer(Id id) {
+        super(id);
+    }
 
     @Override
     public long start() {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/step/StepDistributionSummary.java
Patch:
@@ -16,7 +16,7 @@
 package io.micrometer.core.instrument.step;
 
 import io.micrometer.core.instrument.*;
-import io.micrometer.core.instrument.histogram.StatsConfig;
+import io.micrometer.core.instrument.histogram.HistogramConfig;
 
 import java.util.Arrays;
 
@@ -25,8 +25,8 @@ public class StepDistributionSummary extends AbstractDistributionSummary {
     private final StepDouble total;
     private final StepDouble max;
 
-    public StepDistributionSummary(Id id, Clock clock, StatsConfig statsConfig, long stepMillis) {
-        super(id, clock, statsConfig);
+    public StepDistributionSummary(Id id, Clock clock, HistogramConfig histogramConfig, long stepMillis) {
+        super(id, clock, histogramConfig);
         this.count = new StepLong(clock, stepMillis);
         this.total = new StepDouble(clock, stepMillis);
         this.max = new StepDouble(clock, stepMillis);

File: micrometer-core/src/main/java/io/micrometer/core/instrument/step/StepTimer.java
Patch:
@@ -16,7 +16,7 @@
 package io.micrometer.core.instrument.step;
 
 import io.micrometer.core.instrument.*;
-import io.micrometer.core.instrument.histogram.StatsConfig;
+import io.micrometer.core.instrument.histogram.HistogramConfig;
 import io.micrometer.core.instrument.util.TimeUtils;
 
 import java.util.Arrays;
@@ -33,8 +33,8 @@ public class StepTimer extends AbstractTimer {
     /**
      * Create a new instance.
      */
-    public StepTimer(Id id, Clock clock, StatsConfig statsConfig, long step) {
-        super(id, clock, statsConfig);
+    public StepTimer(Id id, Clock clock, HistogramConfig histogramConfig, long step) {
+        super(id, clock, histogramConfig);
         this.count = new StepLong(clock, step);
         this.total = new StepLong(clock, step);
         this.max = new StepLong(clock, step);

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/system/ProcessorMetrics.java
Patch:
@@ -50,7 +50,7 @@ public void bindTo(MeterRegistry registry) {
 
         OperatingSystemMXBean operatingSystemBean = ManagementFactory.getOperatingSystemMXBean();
         if(operatingSystemBean != null && operatingSystemBean.getSystemLoadAverage() >= 0) {
-            Gauge.builder("cpu.load.average", operatingSystemBean, OperatingSystemMXBean::getSystemLoadAverage)
+            Gauge.builder("system.load.average.1m", operatingSystemBean, OperatingSystemMXBean::getSystemLoadAverage)
                 .tags(tags)
                 .description("The sum of the number of runnable entities queued to available processors and the number " +
                     "of runnable entities running on the available processors averaged over a period of time")

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/system/ProcessorMetricsTest.java
Patch:
@@ -29,7 +29,7 @@ void cpuMetrics() {
 
         assertThat(registry.find("cpu").gauge())
                 .hasValueSatisfying(g -> assertThat(g.value()).isGreaterThan(0));
-        assertThat(registry.find("cpu.load.average").gauge())
+        assertThat(registry.find("system.load.average.1m").gauge())
                 .hasValueSatisfying(g -> assertThat(g.value()).isGreaterThan(0));
     }
 }

File: implementations/micrometer-registry-prometheus/src/test/java/io/micrometer/prometheus/PrometheusNamingConventionTest.java
Patch:
@@ -28,12 +28,12 @@ class PrometheusNamingConventionTest {
 
     @Test
     void formatName() {
-        assertThat(convention.name("123abc/{:id}水", Meter.Type.Gauge)).isEqualTo("m_123abc__:id__");
+        assertThat(convention.name("123abc/{:id}水", Meter.Type.Gauge)).startsWith("m_123abc__:id__");
     }
 
     @Test
     void formatTagKey() {
-        assertThat(convention.tagKey("123abc/{:id}水")).isEqualTo("m_123abc___id__");
+        assertThat(convention.tagKey("123abc/{:id}水")).startsWith("m_123abc___id__");
     }
 
     @Test

File: implementations/micrometer-registry-statsd/src/test/java/io/micrometer/statsd/StatsdMeterRegistryCompatibilityTest.java
Patch:
@@ -31,6 +31,6 @@ static void before() {
 
     @Override
     public MeterRegistry registry() {
-        return new StatsdMeterRegistry(StatsdConfig.DEFAULT, null, new MockClock());
+        return new StatsdMeterRegistry(StatsdConfig.DEFAULT, new MockClock());
     }
 }

File: implementations/micrometer-registry-statsd/src/test/java/io/micrometer/statsd/StatsdMeterRegistryTest.java
Patch:
@@ -130,7 +130,7 @@ public StatsdFlavor flavor() {
             public Duration pollingFrequency() {
                 return Duration.ofMillis(1);
             }
-        }, null, mockClock);
+        }, mockClock);
     }
 
     @ParameterizedTest

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/system/ProcessorMetricsTest.java
Patch:
@@ -29,7 +29,9 @@ void cpuMetrics() {
 
         assertThat(registry.find("cpu").gauge())
                 .hasValueSatisfying(g -> assertThat(g.value()).isGreaterThan(0));
-        assertThat(registry.find("cpu.load.average").gauge())
+        if (!System.getProperty("os.name").toLowerCase().contains("win")) {   // Not present on Windows
+            assertThat(registry.find("cpu.load.average").gauge())
                 .hasValueSatisfying(g -> assertThat(g.value()).isGreaterThan(0));
+        }
     }
 }

File: implementations/micrometer-registry-statsd/src/test/java/io/micrometer/statsd/StatsdMeterRegistryCompatibilityTest.java
Patch:
@@ -31,6 +31,6 @@ static void before() {
 
     @Override
     public MeterRegistry registry() {
-        return new StatsdMeterRegistry(StatsdConfig.DEFAULT, new MockClock());
+        return new StatsdMeterRegistry(StatsdConfig.DEFAULT, null, new MockClock());
     }
 }

File: implementations/micrometer-registry-statsd/src/test/java/io/micrometer/statsd/StatsdMeterRegistryTest.java
Patch:
@@ -130,7 +130,7 @@ public StatsdFlavor flavor() {
             public Duration pollingFrequency() {
                 return Duration.ofMillis(1);
             }
-        }, mockClock);
+        }, null, mockClock);
     }
 
     @ParameterizedTest
@@ -242,4 +242,4 @@ void longTaskTimerLineProtocol(StatsdFlavor flavor) {
             .then(() -> mockClock.add(10, TimeUnit.MILLISECONDS))
             .thenAwait(Duration.ofMillis(10));
     }
-}
\ No newline at end of file
+}

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/logging/LogbackMetrics.java
Patch:
@@ -87,7 +87,7 @@ class MetricsTurboFilter extends TurboFilter {
     @Override
     public FilterReply decide(Marker marker, Logger logger, Level level, String format, Object[] params, Throwable t) {
         // cannot use logger.isEnabledFor(level), as it would cause a StackOverflowException by calling this filter again!
-        if(level.isGreaterOrEqual(logger.getEffectiveLevel())) {
+        if(level.isGreaterOrEqual(logger.getEffectiveLevel()) && format != null) {
             switch (level.toInt()) {
                 case Level.ERROR_INT:
                     errorCounter.increment();

File: implementations/micrometer-registry-statsd/src/main/java/io/micrometer/statsd/StatsdLineBuilder.java
Patch:
@@ -138,7 +138,7 @@ private String metricName(Statistic stat) {
             case Datadog:
             case Telegraf:
             default:
-                return convention.name(id.getName(), Meter.Type.Counter, id.getBaseUnit());
+                return convention.name(id.getName(), id.getType(), id.getBaseUnit());
         }
     }
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/MeterRegistry.java
Patch:
@@ -625,9 +625,8 @@ private <M extends Meter> M registerMeterIfNecessary(Class<M> meterClass, Meter.
         Meter m = meterMap.get(idWithCommonTags);
 
         if (m == null) {
-            m = builder.apply(idWithCommonTags);
-
             synchronized (meterMap) {
+                m = builder.apply(idWithCommonTags);
                 Meter m2 = meterMap.putIfAbsent(idWithCommonTags, m);
                 m = m2 == null ? m : m2;
             }

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusMeterRegistry.java
Patch:
@@ -103,7 +103,7 @@ public DistributionSummary newDistributionSummary(Meter.Id id, StatsConfig stats
                 // satisfies https://prometheus.io/docs/concepts/metric_types/#summary
                 for (double percentile : statsConfig.getPercentiles()) {
                     List<String> quantileValues = new LinkedList<>(tagValues);
-                    quantileValues.add(Collector.doubleToGoString(percentile / 100));
+                    quantileValues.add(Collector.doubleToGoString(percentile));
                     samples.add(new Collector.MetricFamilySamples.Sample(conventionName, quantileKeys, quantileValues,
                         summary.percentile(percentile)));
                 }
@@ -161,7 +161,7 @@ protected io.micrometer.core.instrument.Timer newTimer(Meter.Id id, StatsConfig
                 // satisfies https://prometheus.io/docs/concepts/metric_types/#summary
                 for (double percentile : statsConfig.getPercentiles()) {
                     List<String> quantileValues = new LinkedList<>(tagValues);
-                    quantileValues.add(Collector.doubleToGoString(percentile / 100));
+                    quantileValues.add(Collector.doubleToGoString(percentile));
                     samples.add(new Collector.MetricFamilySamples.Sample(conventionName, quantileKeys, quantileValues,
                         timer.percentile(percentile, TimeUnit.SECONDS)));
                 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/histogram/StatsConfig.java
Patch:
@@ -50,6 +50,7 @@ public NavigableSet<Long> getHistogramBuckets(boolean supportsAggregablePercenti
             buckets.addAll(PercentileHistogramBuckets.buckets(this));
             buckets.add(minimumExpectedValue);
             buckets.add(maximumExpectedValue);
+            buckets.add(Long.MAX_VALUE);
         }
 
         for (long slaBoundary : sla) {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/simple/SimpleMeterRegistry.java
Patch:
@@ -19,6 +19,7 @@
 import io.micrometer.core.instrument.histogram.PercentileHistogramBuckets;
 import io.micrometer.core.instrument.histogram.StatsConfig;
 import io.micrometer.core.instrument.step.StepMeterRegistry;
+import io.micrometer.core.instrument.util.TimeUtils;
 
 import java.text.DecimalFormat;
 import java.util.concurrent.TimeUnit;
@@ -74,7 +75,8 @@ protected io.micrometer.core.instrument.Timer newTimer(Meter.Id id, StatsConfig
 
         if(statsConfig.isPublishingHistogram()) {
             for (Long bucket : statsConfig.getHistogramBuckets(false)) {
-                more().counter(getConventionName(id), Tags.concat(getConventionTags(id), "bucket", Long.toString(bucket)),
+                more().counter(getConventionName(id), Tags.concat(getConventionTags(id), "bucket",
+                    percentileFormat.format(TimeUtils.nanosToUnit(bucket, getBaseTimeUnit()))),
                     timer, t -> t.histogramCountAtValue(bucket));
             }
         }

File: implementations/micrometer-registry-atlas/src/main/java/io/micrometer/atlas/AtlasMeterRegistry.java
Patch:
@@ -123,7 +123,7 @@ protected Timer newTimer(Meter.Id id, StatsConfig statsConfig) {
         }
 
         for (double percentile : statsConfig.getPercentiles()) {
-            gauge(id.getName(), Tags.concat(id.getTags(), "percentile", percentileFormat.format(percentile)),
+            gauge(id.getName(), Tags.concat(getConventionTags(id), "percentile", percentileFormat.format(percentile)),
                 percentile, p -> timer.percentile(p, TimeUnit.SECONDS));
         }
 

File: implementations/micrometer-registry-influx/src/main/java/io/micrometer/influx/InfluxMeterRegistry.java
Patch:
@@ -42,6 +42,7 @@ public class InfluxMeterRegistry extends StepMeterRegistry {
     private final Logger logger = LoggerFactory.getLogger(InfluxMeterRegistry.class);
     private final DecimalFormat format = new DecimalFormat("#.####");
 
+    // FIXME naming convention not working!
     public InfluxMeterRegistry(InfluxConfig config, Clock clock) {
         super(config, clock);
         this.config().namingConvention(new InfluxNamingConvention(NamingConvention.snakeCase));
@@ -254,7 +255,7 @@ private String influxLineProtocol(Meter.Id id, String metricType, Stream<Field>
             .map(t -> "," + t.getKey() + "=" + t.getValue())
             .collect(joining(""));
 
-        return id.getName()
+        return getConventionName(id)
             + tags + ",metric_type=" + metricType + " "
             + fields.map(Field::toString).collect(joining(","))
             + " " + time;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/system/UptimeMetrics.java
Patch:
@@ -54,7 +54,7 @@ public UptimeMetrics(Iterable<Tag> tags) {
     public void bindTo(MeterRegistry registry) {
         registry.more().timeGauge(registry.createId("process.uptime", tags, "The uptime of the Java virtual machine"),
             runtimeMXBean, TimeUnit.MILLISECONDS, x -> Long.valueOf(x.getUptime()).doubleValue());
-        registry.more().timeGauge(registry.createId("process.starttime", tags, "The starttime of the Java virtual machine"),
+        registry.more().timeGauge(registry.createId("process.start.time", tags, "The start time of the Java virtual machine"),
             runtimeMXBean, TimeUnit.MILLISECONDS, x -> Long.valueOf(x.getStartTime()).doubleValue());
     }
 }

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/system/UptimeMetricsTest.java
Patch:
@@ -40,7 +40,7 @@ void uptimeMetricsRuntime() {
         new UptimeMetrics().bindTo(registry);
 
         assertThat(registry.find("process.uptime").meter()).isPresent();
-        assertThat(registry.find("process.starttime").meter()).isPresent();
+        assertThat(registry.find("process.start.time").meter()).isPresent();
     }
 
     @Test
@@ -52,7 +52,7 @@ void uptimeMetricsMock() {
         new UptimeMetrics(runtimeMXBean, emptyList()).bindTo(registry);
 
         assertThat(registry.find("process.uptime").value(Statistic.Value, 1.337e9).meter()).isPresent();
-        assertThat(registry.find("process.starttime").value(Statistic.Value, 4.711e9).meter()).isPresent();
+        assertThat(registry.find("process.start.time").value(Statistic.Value, 4.711e9).meter()).isPresent();
     }
 
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jvm/ExecutorServiceMetrics.java
Patch:
@@ -140,11 +140,11 @@ private void monitor(MeterRegistry registry, ThreadPoolExecutor tp) {
             return;
         }
 
-        registry.more().counter(registry.createId(name + ".completed", tags, null,
+        registry.more().counter(registry.createId(name + ".completed", tags,
                 "The approximate total number of tasks that have completed execution"),
             tp, ThreadPoolExecutor::getCompletedTaskCount);
 
-        registry.gauge(registry.createId(name + ".active", tags, null,
+        registry.gauge(registry.createId(name + ".active", tags,
             "The approximate number of threads that are actively executing tasks"),
             tp, ThreadPoolExecutor::getActiveCount);
 

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/jvm/ExecutorServiceMetricsTest.java
Patch:
@@ -106,6 +106,8 @@ void monitorExecutorService() throws InterruptedException {
     private void assertThreadPoolExecutorMetrics() {
         assertThat(registry.find("exec.completed").tags(userTags).meter()).isPresent();
         assertThat(registry.find("exec.queued").tags(userTags).gauge()).isPresent();
+        assertThat(registry.find("exec.active").tags(userTags).gauge()).isPresent();
         assertThat(registry.find("exec.pool").tags(userTags).gauge()).isPresent();
+        assertThat(registry.find("exec").tags(userTags).timer()).isPresent();
     }
 }

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/export/prometheus/PrometheusExportConfiguration.java
Patch:
@@ -96,7 +96,7 @@ public Clock clock() {
     }
 
     @ManagementContextConfiguration
-//    @ConditionalOnClass(AbstractEndpoint.class)
+    @ConditionalOnClass(AbstractEndpoint.class)
     public static class PrometheusScrapeEndpointConfiguration {
         @Bean
         public PrometheusScrapeEndpoint prometheusEndpoint(

File: implementations/micrometer-registry-prometheus/src/test/java/io/micrometer/prometheus/PrometheusMeterRegistryCompatibilityTest.java
Patch:
@@ -23,6 +23,6 @@
 class PrometheusMeterRegistryCompatibilityTest extends MeterRegistryCompatibilityKit {
     @Override
     public MeterRegistry registry() {
-        return new PrometheusMeterRegistry(k -> null, new CollectorRegistry(true), new MockClock());
+        return new PrometheusMeterRegistry(PrometheusConfig.DEFAULT, new CollectorRegistry(true), new MockClock());
     }
 }

File: implementations/micrometer-registry-prometheus/src/test/java/io/micrometer/prometheus/PrometheusMeterRegistryTest.java
Patch:
@@ -49,7 +49,7 @@ class PrometheusMeterRegistryTest {
     @BeforeEach
     void before() {
         prometheusRegistry = new CollectorRegistry();
-        registry = new PrometheusMeterRegistry(k -> null, prometheusRegistry, Clock.SYSTEM);
+        registry = new PrometheusMeterRegistry(PrometheusConfig.DEFAULT, prometheusRegistry, Clock.SYSTEM);
     }
 
     @Test

File: implementations/micrometer-registry-statsd/src/test/java/io/micrometer/statsd/StatsdMeterRegistryCompatibilityTest.java
Patch:
@@ -31,6 +31,6 @@ static void before() {
 
     @Override
     public MeterRegistry registry() {
-        return new StatsdMeterRegistry(k -> null, new MockClock());
+        return new StatsdMeterRegistry(StatsdConfig.DEFAULT, new MockClock());
     }
 }

File: micrometer-samples/src/main/java/io/micrometer/core/samples/utils/SampleRegistries.java
Patch:
@@ -26,6 +26,7 @@
 import io.micrometer.influx.InfluxConfig;
 import io.micrometer.influx.InfluxMeterRegistry;
 import io.micrometer.jmx.JmxMeterRegistry;
+import io.micrometer.prometheus.PrometheusConfig;
 import io.micrometer.prometheus.PrometheusMeterRegistry;
 import io.micrometer.statsd.StatsdConfig;
 import io.micrometer.statsd.StatsdFlavor;
@@ -39,7 +40,7 @@
 
 public class SampleRegistries {
     public static PrometheusMeterRegistry prometheus() {
-        PrometheusMeterRegistry prometheusRegistry = new PrometheusMeterRegistry(k -> null);
+        PrometheusMeterRegistry prometheusRegistry = new PrometheusMeterRegistry(PrometheusConfig.DEFAULT);
 
         try {
             HttpServer server = HttpServer.create(new InetSocketAddress(8080), 0);

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/web/servlet/WebMvcMetricsConfiguration.java
Patch:
@@ -16,10 +16,10 @@
 package io.micrometer.spring.autoconfigure.web.servlet;
 
 import io.micrometer.core.instrument.MeterRegistry;
-import io.micrometer.spring.WebMvcMetrics;
 import io.micrometer.spring.autoconfigure.MetricsProperties;
 import io.micrometer.spring.web.servlet.DefaultWebMvcTagsProvider;
 import io.micrometer.spring.web.servlet.MetricsHandlerInterceptor;
+import io.micrometer.spring.web.servlet.WebMvcMetrics;
 import io.micrometer.spring.web.servlet.WebMvcTagsProvider;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/web/servlet/MetricsHandlerInterceptor.java
Patch:
@@ -15,7 +15,6 @@
  */
 package io.micrometer.spring.web.servlet;
 
-import io.micrometer.spring.WebMvcMetrics;
 import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;
 
 import javax.servlet.http.HttpServletRequest;

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/web/servlet/MetricsHandlerInterceptorAutoTimedTest.java
Patch:
@@ -17,8 +17,6 @@
 
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
-import io.micrometer.spring.TimedUtilsTest;
-import io.micrometer.spring.WebMvcMetrics;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/web/servlet/WebMvcMetricsIntegrationTest.java
Patch:
@@ -20,7 +20,6 @@
 import io.micrometer.core.instrument.Statistic;
 import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
 import io.micrometer.spring.TimedUtilsTest;
-import io.micrometer.spring.WebMvcMetrics;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: implementations/micrometer-registry-datadog/src/main/java/io/micrometer/datadog/DatadogRegistry.java
Patch:
@@ -47,7 +47,7 @@ public DatadogRegistry(DatadogConfig config, Clock clock) {
         super(config, clock);
 
         try {
-            this.metricsEndpoint = URI.create("https://app.datadoghq.com/api/v1/series?api_key=" + config.apiKey()).toURL();
+            this.metricsEndpoint = URI.create(config.uri()).toURL();
         } catch (MalformedURLException e) {
             // not possible
             throw new RuntimeException(e);

File: implementations/micrometer-registry-datadog/src/main/java/io/micrometer/datadog/DatadogRegistry.java
Patch:
@@ -111,7 +111,7 @@ protected void pushMetrics() {
                 if (status >= 200 && status < 300) {
                     logger.info("successfully sent " + batch.size() + " metrics to datadog");
                 } else if (status >= 400) {
-                    try (InputStream in = (status >= 400) ? con.getErrorStream() : con.getInputStream()) {
+                    try (InputStream in = con.getErrorStream()) {
                         logger.error("failed to send metrics: " + new BufferedReader(new InputStreamReader(in))
                                 .lines().collect(joining("\n")));
                     }

File: micrometer-core/src/main/java/io/micrometer/core/annotation/Timed.java
Patch:
@@ -17,9 +17,10 @@
 
 import java.lang.annotation.*;
 
-@Target({ElementType.TYPE, ElementType.METHOD})
+@Target({ElementType.ANNOTATION_TYPE, ElementType.TYPE, ElementType.METHOD})
 @Repeatable(TimedSet.class)
 @Retention(RetentionPolicy.RUNTIME)
+@Inherited
 public @interface Timed {
     String value() default "";
 

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/export/prometheus/PrometheusExportConfiguration.java
Patch:
@@ -21,6 +21,7 @@
 import io.micrometer.spring.autoconfigure.export.MetricsExporter;
 import io.prometheus.client.CollectorRegistry;
 import org.springframework.boot.actuate.autoconfigure.ManagementContextConfiguration;
+import org.springframework.boot.actuate.endpoint.AbstractEndpoint;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
@@ -95,6 +96,7 @@ public Clock clock() {
     }
 
     @ManagementContextConfiguration
+//    @ConditionalOnClass(AbstractEndpoint.class)
     public static class PrometheusScrapeEndpointConfiguration {
         @Bean
         public PrometheusScrapeEndpoint prometheusEndpoint(

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/web/servlet/WebMvcMetricsConfiguration.java
Patch:
@@ -16,10 +16,10 @@
 package io.micrometer.spring.autoconfigure.web.servlet;
 
 import io.micrometer.core.instrument.MeterRegistry;
+import io.micrometer.spring.WebMvcMetrics;
 import io.micrometer.spring.autoconfigure.MetricsProperties;
 import io.micrometer.spring.web.servlet.DefaultWebMvcTagsProvider;
 import io.micrometer.spring.web.servlet.MetricsHandlerInterceptor;
-import io.micrometer.spring.web.servlet.WebMvcMetrics;
 import io.micrometer.spring.web.servlet.WebMvcTagsProvider;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/scheduling/ScheduledMethodMetrics.java
Patch:
@@ -21,13 +21,14 @@
 import io.micrometer.core.instrument.Tags;
 import io.micrometer.core.instrument.Timer;
 import io.micrometer.core.instrument.stats.quantile.WindowSketchQuantiles;
-import io.micrometer.core.instrument.util.AnnotationUtils;
+import io.micrometer.spring.TimedUtils;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.aspectj.lang.ProceedingJoinPoint;
 import org.aspectj.lang.annotation.Around;
 import org.aspectj.lang.annotation.Aspect;
 import org.aspectj.lang.reflect.MethodSignature;
+import org.springframework.core.annotation.AnnotationUtils;
 
 import java.lang.reflect.Method;
 import java.util.concurrent.TimeUnit;
@@ -60,7 +61,7 @@ public Object timeScheduledOperation(ProceedingJoinPoint pjp) throws Throwable {
         Timer shortTaskTimer = null;
         LongTaskTimer longTaskTimer = null;
 
-        for (Timed timed : AnnotationUtils.findTimed(method).toArray(Timed[]::new)) {
+        for (Timed timed : TimedUtils.findTimedAnnotations(method).toArray(Timed[]::new)) {
             if (timed.longTask())
                 longTaskTimer = registry.more().longTaskTimer(registry.createId(timed.value(), Tags.zip(timed.extraTags()),
                     "Timer of @Scheduled long task"));

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/web/servlet/MetricsHandlerInterceptor.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.micrometer.spring.web.servlet;
 
+import io.micrometer.spring.WebMvcMetrics;
 import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;
 
 import javax.servlet.http.HttpServletRequest;

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/web/servlet/MetricsHandlerInterceptorAutoTimedTest.java
Patch:
@@ -17,6 +17,8 @@
 
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
+import io.micrometer.spring.TimedUtilsTest;
+import io.micrometer.spring.WebMvcMetrics;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/web/servlet/WebMvcMetricsIntegrationTest.java
Patch:
@@ -19,6 +19,8 @@
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.Statistic;
 import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
+import io.micrometer.spring.TimedUtilsTest;
+import io.micrometer.spring.WebMvcMetrics;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -43,7 +45,7 @@
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
 
 /**
- * Integration tests for {@link WebMvcMetrics}.
+ * Integration tests for {@link TimedUtilsTest}.
  *
  * @author Jon Schneider
  */

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeCustomMeter.java
Patch:
@@ -24,7 +24,7 @@ public class CompositeCustomMeter implements CompositeMeter {
     private final Meter.Type type;
     private final Iterable<Measurement> measurements;
 
-    public CompositeCustomMeter(Meter.Id id, Type type, Iterable<Measurement> measurements) {
+    CompositeCustomMeter(Meter.Id id, Type type, Iterable<Measurement> measurements) {
         this.id = id;
         this.type = type;
         this.measurements = measurements;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeTimeGauge.java
Patch:
@@ -32,9 +32,7 @@ public class CompositeTimeGauge<T> extends CompositeGauge<T> {
     public void add(MeterRegistry registry) {
         T obj = ref.get();
         if(obj != null) {
-            synchronized (gauges) {
-                gauges.put(registry, registry.more().timeGauge(getId(), obj, fUnit, f));
-            }
+            gauges.put(registry, registry.more().timeGauge(getId(), obj, fUnit, f));
         }
     }
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/MeterRegistry.java
Patch:
@@ -33,6 +33,9 @@
  * over the set of meters instrumenting your application, and then further iterate over each meter's metrics, generally
  * resulting in a time series in the metrics backend for each combination of metrics and dimensions.
  *
+ * MeterRegistry may be used in a reactive context. As such, implementations must not negatively impact the calling
+ * thread, e.g. it should respond immediately by avoiding IO call, deep stack recursion or any coordination.
+ *
  * @author Jon Schneider
  */
 public interface MeterRegistry {

File: micrometer-test/src/main/java/io/micrometer/core/tck/MeterRegistryCompatibilityKit.java
Patch:
@@ -98,6 +98,7 @@ void addCommonTags(MeterRegistry registry) {
         Counter c = registry.counter("foo");
 
         assertThat(registry.find("foo").tags("k", "v").counter()).containsSame(c);
+        assertThat(c.getId().getTags()).hasSize(1);
     }
 
     @Test

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Counter.java
Patch:
@@ -66,6 +66,9 @@ private Builder(String name) {
             this.name = name;
         }
 
+        /**
+         * @param tags Must be an even number of arguments representing key/value pairs of tags.
+         */
         public Builder tags(String... tags) {
             return tags(Tags.zip(tags));
         }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/DistributionSummary.java
Patch:
@@ -72,6 +72,9 @@ public Builder histogram(Histogram.Builder<?> histogram) {
             return this;
         }
 
+        /**
+         * @param tags Must be an even number of arguments representing key/value pairs of tags.
+         */
         public Builder tags(String... tags) {
             return tags(Tags.zip(tags));
         }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/LongTaskTimer.java
Patch:
@@ -143,6 +143,9 @@ private Builder(String name) {
             this.name = name;
         }
 
+        /**
+         * @param tags Must be an even number of arguments representing key/value pairs of tags.
+         */
         public Builder tags(String... tags) {
             return tags(Tags.zip(tags));
         }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Timer.java
Patch:
@@ -134,6 +134,9 @@ public Builder tags(Iterable<Tag> tags) {
             return this;
         }
 
+        /**
+         * @param tags Must be an even number of arguments representing key/value pairs of tags.
+         */
         public Builder tags(String... tags) {
             return tags(Tags.zip(tags));
         }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/CaffeineCacheMetrics.java
Patch:
@@ -47,7 +47,7 @@ public class CaffeineCacheMetrics implements MeterBinder {
      * @param registry The registry to bind metrics to.
      * @param cache    The cache to instrument.
      * @param name     The name prefix of the metrics.
-     * @param tags     Tags to apply to all recorded metrics.
+     * @param tags     Tags to apply to all recorded metrics. Must be an even number of arguments representing key/value pairs of tags.
      * @return The instrumented cache, unchanged. The original cache is not wrapped or proxied in any way.
      */
     public static <C extends Cache> C monitor(MeterRegistry registry, C cache, String name, String... tags) {
@@ -77,7 +77,7 @@ public static <C extends Cache> C monitor(MeterRegistry registry, C cache, Strin
      * @param registry The registry to bind metrics to.
      * @param cache    The cache to instrument.
      * @param name     The name prefix of the metrics.
-     * @param tags     Tags to apply to all recorded metrics.
+     * @param tags     Tags to apply to all recorded metrics. Must be an even number of arguments representing key/value pairs of tags.
      * @return The instrumented cache, unchanged. The original cache is not wrapped or proxied in any way.
      */
     public static <C extends AsyncLoadingCache> C monitor(MeterRegistry registry, C cache, String name, String... tags) {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/EhCache2Metrics.java
Patch:
@@ -36,7 +36,7 @@ public class EhCache2Metrics implements MeterBinder {
      * @param registry The registry to bind metrics to.
      * @param cache    The cache to instrument.
      * @param name     The name prefix of the metrics.
-     * @param tags     Tags to apply to all recorded metrics.
+     * @param tags     Tags to apply to all recorded metrics. Must be an even number of arguments representing key/value pairs of tags.
      * @return The instrumented cache, unchanged. The original cache is not wrapped or proxied in any way.
      * @see com.google.common.cache.CacheStats
      */

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/GuavaCacheMetrics.java
Patch:
@@ -36,7 +36,7 @@ public class GuavaCacheMetrics implements MeterBinder {
      * @param registry The registry to bind metrics to.
      * @param cache    The cache to instrument.
      * @param name     The name prefix of the metrics.
-     * @param tags     Tags to apply to all recorded metrics.
+     * @param tags     Tags to apply to all recorded metrics. Must be an even number of arguments representing key/value pairs of tags.
      * @return The instrumented cache, unchanged. The original cache is not wrapped or proxied in any way.
      * @see com.google.common.cache.CacheStats
      */

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/HazelcastCacheMetrics.java
Patch:
@@ -35,7 +35,7 @@ public class HazelcastCacheMetrics implements MeterBinder {
      * @param registry The registry to bind metrics to.
      * @param cache    The cache to instrument.
      * @param name     The name prefix of the metrics.
-     * @param tags     Tags to apply to all recorded metrics.
+     * @param tags     Tags to apply to all recorded metrics. Must be an even number of arguments representing key/value pairs of tags.
      * @return The instrumented cache, unchanged. The original cache is not wrapped or proxied in any way.
      * @see com.google.common.cache.CacheStats
      */

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/JCacheMetrics.java
Patch:
@@ -70,7 +70,7 @@ public long get(ObjectName objectName) {
      * @param registry The registry to bind metrics to.
      * @param cache    The cache to instrument.
      * @param name     The name prefix of the metrics.
-     * @param tags     Tags to apply to all recorded metrics.
+     * @param tags     Tags to apply to all recorded metrics. Must be an even number of arguments representing key/value pairs of tags.
      * @return The instrumented cache, unchanged. The original cache is not wrapped or proxied in any way.
      * @see com.google.common.cache.CacheStats
      */

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/db/DatabaseTableMetrics.java
Patch:
@@ -37,7 +37,7 @@ public class DatabaseTableMetrics implements MeterBinder {
      * @param ds        The data source to use to run the row count query.
      * @param tableName The name of the table to report table size for.
      * @param name      The name prefix of the metrics.
-     * @param tags      Tags to apply to all recorded metrics.
+     * @param tags      Tags to apply to all recorded metrics. Must be an even number of arguments representing key/value pairs of tags.
      */
     public static void monitor(MeterRegistry registry, DataSource ds, String tableName, String name, String... tags) {
         monitor(registry, ds, tableName, name, Tags.zip(tags));

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/cache/ConcurrentMapCacheMetrics.java
Patch:
@@ -35,7 +35,7 @@ public class ConcurrentMapCacheMetrics implements MeterBinder {
      * @param registry The registry to bind metrics to.
      * @param cache    The cache to instrument.
      * @param name     The name prefix of the metrics.
-     * @param tags     Tags to apply to all recorded metrics.
+     * @param tags     Tags to apply to all recorded metrics. Must be an even number of arguments representing key/value pairs of tags.
      * @return The instrumented cache, unchanged. The original cache is not wrapped or proxied in any way.
      * @see com.google.common.cache.CacheStats
      */

File: implementations/micrometer-registry-datadog/src/main/java/io/micrometer/datadog/DatadogConfig.java
Patch:
@@ -23,6 +23,7 @@
  * @author Jon Schneider
  */
 public interface DatadogConfig extends StepRegistryConfig {
+    @Override
     default String prefix() {
         return "datadog";
     }

File: implementations/micrometer-registry-datadog/src/test/java/io/micrometer/datadog/DatadogMeterRegistryCompatibilityTest.java
Patch:
@@ -15,9 +15,9 @@
  */
 package io.micrometer.datadog;
 
+import io.micrometer.core.MockClock;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.tck.MeterRegistryCompatibilityKit;
-import io.micrometer.core.MockClock;
 
 import java.time.Duration;
 

File: implementations/micrometer-registry-datadog/src/test/java/io/micrometer/datadog/DatadogNamingConventionTest.java
Patch:
@@ -25,16 +25,16 @@ class DatadogNamingConventionTest {
 
     @Test
     void nameStartsWithLetter() {
-        assertThat(convention.name("123", Meter.Type.Gauge, null)).isEqualTo("m_123");
+        assertThat(convention.name("123", Meter.Type.Gauge, null)).isEqualTo("m.123");
     }
 
     @Test
     void tagKeyStartsWithLetter() {
-        assertThat(convention.tagKey("123")).isEqualTo("m_123");
+        assertThat(convention.tagKey("123")).isEqualTo("m.123");
     }
 
     @Test
     void dotNotationIsConvertedToCamelCase() {
-        assertThat(convention.name("gauge.size", Meter.Type.Gauge, null)).isEqualTo("gaugeSize");
+        assertThat(convention.name("gauge.size", Meter.Type.Gauge, null)).isEqualTo("gauge.size");
     }
 }

File: implementations/micrometer-registry-ganglia/src/test/java/io/micrometer/ganglia/GangliaMeterRegistryCompatibilityTest.java
Patch:
@@ -15,10 +15,10 @@
  */
 package io.micrometer.ganglia;
 
+import io.micrometer.core.MockClock;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.util.HierarchicalNameMapper;
 import io.micrometer.core.tck.MeterRegistryCompatibilityKit;
-import io.micrometer.core.MockClock;
 
 class GangliaMeterRegistryCompatibilityTest extends MeterRegistryCompatibilityKit {
     @Override

File: implementations/micrometer-registry-graphite/src/test/java/io/micrometer/graphite/GraphiteMeterRegistryCompatibilityTest.java
Patch:
@@ -15,10 +15,10 @@
  */
 package io.micrometer.graphite;
 
+import io.micrometer.core.MockClock;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.util.HierarchicalNameMapper;
 import io.micrometer.core.tck.MeterRegistryCompatibilityKit;
-import io.micrometer.core.MockClock;
 
 class GraphiteMeterRegistryCompatibilityTest extends MeterRegistryCompatibilityKit {
     @Override

File: implementations/micrometer-registry-influx/src/main/java/io/micrometer/influx/InfluxNamingConvention.java
Patch:
@@ -45,7 +45,7 @@ public String tagValue(String value) {
 
     private String format(String name) {
         // https://docs.influxdata.com/influxdb/v1.3/write_protocols/line_protocol_reference/#special-characters
-        return NamingConvention.snakeCase.tagKey(name)
+        return NamingConvention.camelCase.tagKey(name)
             .replace(",", "\\,")
             .replace(" ", "\\ ")
             .replace("=", "\\=")

File: implementations/micrometer-registry-influx/src/test/java/io/micrometer/influx/InfluxNamingConventionTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.catchThrowable;
-import static org.assertj.core.api.Assertions.fail;
 
 class InfluxNamingConventionTest {
     private InfluxNamingConvention convention = new InfluxNamingConvention();

File: implementations/micrometer-registry-prometheus/src/test/java/io/micrometer/prometheus/PrometheusMeterRegistryCompatibilityTest.java
Patch:
@@ -15,9 +15,9 @@
  */
 package io.micrometer.prometheus;
 
+import io.micrometer.core.MockClock;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.tck.MeterRegistryCompatibilityKit;
-import io.micrometer.core.MockClock;
 import io.prometheus.client.CollectorRegistry;
 
 class PrometheusMeterRegistryCompatibilityTest extends MeterRegistryCompatibilityKit {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/LongTaskTimer.java
Patch:
@@ -120,8 +120,8 @@ default void record(Runnable f) {
     @Override
     default Iterable<Measurement> measure() {
         return Arrays.asList(
-            new Measurement(() -> (double) activeTasks(), Statistic.Count),
-            new Measurement(() -> duration(TimeUnit.NANOSECONDS), Statistic.Total)
+            new Measurement(() -> (double) activeTasks(), Statistic.ActiveTasks),
+            new Measurement(() -> duration(TimeUnit.NANOSECONDS), Statistic.Duration)
         );
     }
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/MeterRegistry.java
Patch:
@@ -15,7 +15,6 @@
  */
 package io.micrometer.core.instrument;
 
-import io.micrometer.core.instrument.internal.DefaultFunctionTimer;
 import io.micrometer.core.instrument.stats.hist.Histogram;
 import io.micrometer.core.instrument.stats.quantile.Quantiles;
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/MeterRegistryConfig.java
Patch:
@@ -16,9 +16,7 @@
 package io.micrometer.core.instrument;
 
 public interface MeterRegistryConfig {
-    default String prefix() {
-        return "prometheus";
-    }
+    String prefix();
 
     /**
      * Get the value associated with a key.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Timer.java
Patch:
@@ -95,7 +95,7 @@ default Runnable wrap(Runnable f) {
     default Iterable<Measurement> measure() {
         return Arrays.asList(
             new Measurement(() -> (double) count(), Statistic.Count),
-            new Measurement(() -> totalTime(TimeUnit.NANOSECONDS), Statistic.Total)
+            new Measurement(() -> totalTime(TimeUnit.NANOSECONDS), Statistic.TotalTime)
         );
     }
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/EhCache2Metrics.java
Patch:
@@ -22,8 +22,6 @@
 import net.sf.ehcache.Ehcache;
 import net.sf.ehcache.statistics.StatisticsGateway;
 
-import javax.cache.Cache;
-
 /**
  * @author Jon Schneider
  */

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/HazelcastCacheMetrics.java
Patch:
@@ -15,8 +15,6 @@
  */
 package io.micrometer.core.instrument.binder.cache;
 
-import com.google.common.cache.Cache;
-import com.google.common.cache.CacheBuilder;
 import com.hazelcast.core.IMap;
 import com.hazelcast.monitor.LocalMapStats;
 import io.micrometer.core.instrument.MeterRegistry;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jvm/ExecutorServiceMetrics.java
Patch:
@@ -25,7 +25,6 @@
 import java.util.concurrent.*;
 
 import static java.util.Arrays.asList;
-import static java.util.Collections.emptyList;
 
 /**
  * Monitors the status of executor service pools. Does not record timings on operations executed in the {@link ExecutorService},

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/system/ProcessorMetrics.java
Patch:
@@ -19,7 +19,6 @@
 import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.binder.MeterBinder;
 
-import javax.annotation.processing.Processor;
 import java.lang.management.ManagementFactory;
 import java.lang.management.OperatingSystemMXBean;
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeLongTaskTimer.java
Patch:
@@ -20,7 +20,6 @@
 import io.micrometer.core.instrument.Meter;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.noop.NoopLongTaskTimer;
-import io.micrometer.core.instrument.util.TimeUtils;
 
 import java.util.Collections;
 import java.util.LinkedHashMap;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/internal/DefaultFunctionTimer.java
Patch:
@@ -16,13 +16,10 @@
 package io.micrometer.core.instrument.internal;
 
 import io.micrometer.core.instrument.FunctionTimer;
-import io.micrometer.core.instrument.Measurement;
 import io.micrometer.core.instrument.Meter;
-import io.micrometer.core.instrument.Statistic;
 import io.micrometer.core.instrument.util.TimeUtils;
 
 import java.lang.ref.WeakReference;
-import java.util.Arrays;
 import java.util.concurrent.TimeUnit;
 import java.util.function.ToDoubleFunction;
 import java.util.function.ToLongFunction;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/internal/TimedExecutor.java
Patch:
@@ -15,12 +15,12 @@
  */
 package io.micrometer.core.instrument.internal;
 
-import java.util.concurrent.Executor;
-
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.Timer;
 
+import java.util.concurrent.Executor;
+
 /**
  * An {@link Executor} that is timed
  */

File: micrometer-core/src/main/java/io/micrometer/core/instrument/spectator/SpectatorLongTaskTimer.java
Patch:
@@ -15,14 +15,12 @@
  */
 package io.micrometer.core.instrument.spectator;
 
-import ch.qos.logback.core.util.TimeUtil;
 import io.micrometer.core.instrument.AbstractMeter;
 import io.micrometer.core.instrument.LongTaskTimer;
 import io.micrometer.core.instrument.Meter;
 import io.micrometer.core.instrument.util.MeterEquivalence;
 import io.micrometer.core.instrument.util.TimeUtils;
 
-import java.sql.Time;
 import java.util.concurrent.TimeUnit;
 
 public class SpectatorLongTaskTimer extends AbstractMeter implements LongTaskTimer {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/spectator/step/AbstractStepRegistry.java
Patch:
@@ -71,7 +71,7 @@ public void start() {
                         .withFrequency(Scheduler.Policy.FIXED_RATE_SKIP_IF_LONG, step)
                         .withInitialDelay(Duration.ofMillis(getInitialDelay(stepMillis)))
                         .withStopOnFailure(false);
-                scheduler = new Scheduler(this, "spring-metrics-publisher", numThreads);
+                scheduler = new Scheduler(this, "micrometer-publisher", numThreads);
                 scheduler.schedule(options, this::pushMetrics);
                 logger.info("started collecting metrics every {}", step);
             } else {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/spectator/step/StepSpectatorMeterRegistry.java
Patch:
@@ -19,7 +19,6 @@
 import io.micrometer.core.instrument.Clock;
 import io.micrometer.core.instrument.Measurement;
 import io.micrometer.core.instrument.Meter;
-import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.spectator.SpectatorMeterRegistry;
 
 import java.util.List;

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/cache/CaffeineCacheMetricsTest.java
Patch:
@@ -18,10 +18,8 @@
 import com.github.benmanes.caffeine.cache.Cache;
 import com.github.benmanes.caffeine.cache.Caffeine;
 import com.github.benmanes.caffeine.cache.LoadingCache;
-
 import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.Tags;
-import io.micrometer.core.instrument.binder.cache.CaffeineCacheMetrics;
 import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
 import org.junit.jupiter.api.Test;
 

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/jvm/ClassLoaderMetricsTest.java
Patch:
@@ -16,7 +16,6 @@
 package io.micrometer.core.instrument.binder.jvm;
 
 import io.micrometer.core.instrument.MeterRegistry;
-import io.micrometer.core.instrument.binder.jvm.ClassLoaderMetrics;
 import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
 import org.junit.jupiter.api.Test;
 

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/jvm/JvmThreadMetricsTest.java
Patch:
@@ -16,7 +16,6 @@
 package io.micrometer.core.instrument.binder.jvm;
 
 import io.micrometer.core.instrument.MeterRegistry;
-import io.micrometer.core.instrument.binder.jvm.JvmThreadMetrics;
 import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
 import org.junit.jupiter.api.Test;
 

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/logging/LogbackMetricsTest.java
Patch:
@@ -18,7 +18,6 @@
 import ch.qos.logback.classic.Level;
 import ch.qos.logback.classic.Logger;
 import io.micrometer.core.instrument.MeterRegistry;
-import io.micrometer.core.instrument.binder.logging.LogbackMetrics;
 import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
 import org.junit.jupiter.api.Test;
 import org.slf4j.LoggerFactory;

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/system/ProcessorMetricsTest.java
Patch:
@@ -16,7 +16,6 @@
 package io.micrometer.core.instrument.binder.system;
 
 import io.micrometer.core.instrument.MeterRegistry;
-import io.micrometer.core.instrument.binder.system.ProcessorMetrics;
 import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
 import org.junit.jupiter.api.Test;
 

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/system/UptimeMetricsTest.java
Patch:
@@ -17,7 +17,6 @@
 
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.Statistic;
-import io.micrometer.core.instrument.binder.system.UptimeMetrics;
 import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
 import org.junit.jupiter.api.Test;
 

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/MeterBindersConfiguration.java
Patch:
@@ -15,9 +15,9 @@
  */
 package io.micrometer.spring.autoconfigure;
 
+import io.micrometer.core.instrument.binder.MeterBinder;
 import io.micrometer.core.instrument.binder.jvm.JvmMemoryMetrics;
 import io.micrometer.core.instrument.binder.logging.LogbackMetrics;
-import io.micrometer.core.instrument.binder.MeterBinder;
 import io.micrometer.core.instrument.binder.system.UptimeMetrics;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/export/atlas/AtlasExportConfiguration.java
Patch:
@@ -20,7 +20,6 @@
 import io.micrometer.core.instrument.Clock;
 import io.micrometer.spring.autoconfigure.export.DefaultStepRegistryConfig;
 import io.micrometer.spring.autoconfigure.export.MetricsExporter;
-import io.micrometer.spring.autoconfigure.export.StepRegistryProperties;
 import io.micrometer.spring.autoconfigure.export.StringToDurationConverter;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/jdbc/DataSourceMetrics.java
Patch:
@@ -23,7 +23,6 @@
 import org.springframework.boot.autoconfigure.jdbc.metadata.DataSourcePoolMetadataProviders;
 
 import javax.sql.DataSource;
-import java.util.ArrayList;
 import java.util.Collection;
 
 /**

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/autoconfigure/MetricsAutoConfigurationTest.java
Patch:
@@ -17,9 +17,9 @@
 
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.Statistic;
+import io.micrometer.core.instrument.binder.MeterBinder;
 import io.micrometer.core.instrument.binder.jvm.JvmMemoryMetrics;
 import io.micrometer.core.instrument.binder.logging.LogbackMetrics;
-import io.micrometer.core.instrument.binder.MeterBinder;
 import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/autoconfigure/export/simple/SimpleExportConfigurationTest.java
Patch:
@@ -39,7 +39,8 @@
     "spring.metrics.ganglia.enabled=false",
     "spring.metrics.graphite.enabled=false",
     "spring.metrics.influx.enabled=false",
-    "spring.metrics.jmx.enabled=false"
+    "spring.metrics.jmx.enabled=false",
+    "spring.metrics.statsd.enabled=false",
 })
 public class SimpleExportConfigurationTest {
     @Autowired

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/jdbc/DataSourceMetricsHikariTest.java
Patch:
@@ -30,7 +30,6 @@
 import org.springframework.test.context.junit4.SpringRunner;
 
 import javax.sql.DataSource;
-
 import java.sql.SQLException;
 import java.util.Collection;
 

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/web/servlet/MetricsHandlerInterceptorAutoTimedTest.java
Patch:
@@ -35,7 +35,6 @@
 import org.springframework.web.context.WebApplicationContext;
 import org.springframework.web.servlet.config.annotation.EnableWebMvc;
 import org.springframework.web.servlet.config.annotation.InterceptorRegistry;
-import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
 import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;
 
 import static org.assertj.core.api.Assertions.assertThat;

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/web/servlet/WebMvcMetricsIntegrationTest.java
Patch:
@@ -35,7 +35,6 @@
 import org.springframework.web.context.WebApplicationContext;
 import org.springframework.web.servlet.config.annotation.EnableWebMvc;
 import org.springframework.web.servlet.config.annotation.InterceptorRegistry;
-import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
 import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;
 
 import static org.assertj.core.api.Assertions.assertThat;

File: micrometer-test/src/test/java/io/micrometer/core/instrument/simple/SimpleMeterRegistryCompatibilityTest.java
Patch:
@@ -15,11 +15,9 @@
  */
 package io.micrometer.core.instrument.simple;
 
+import io.micrometer.core.MockClock;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.tck.MeterRegistryCompatibilityKit;
-import io.micrometer.core.MockClock;
-import io.micrometer.core.tck.RegistryResolver;
-import org.junit.jupiter.api.extension.ExtendWith;
 
 public class SimpleMeterRegistryCompatibilityTest extends MeterRegistryCompatibilityKit {
     @Override

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/JCacheMetrics.java
Patch:
@@ -118,7 +118,7 @@ public void bindTo(MeterRegistry registry) {
             "The number of times cache lookup methods have not returned a value"),
             objectName, CacheStatistics.CacheMisses::get);
 
-        registry.gauge(registry.createId(name + ".puts", tags, "Cache removals"),
+        registry.gauge(registry.createId(name + ".puts", tags, "Cache puts"),
             objectName, CacheStatistics.CachePuts::get);
 
         registry.gauge(registry.createId(name + ".removals", tags, "Cache removals"),

File: implementations/micrometer-registry-ganglia/src/main/java/io/micrometer/ganglia/GangliaMeterRegistry.java
Patch:
@@ -17,15 +17,13 @@
 
 import com.codahale.metrics.ganglia.GangliaReporter;
 import info.ganglia.gmetric4j.gmetric.GMetric;
-import io.micrometer.core.annotation.CompatibilityTested;
 import io.micrometer.core.instrument.Clock;
 import io.micrometer.core.instrument.dropwizard.DropwizardMeterRegistry;
 import io.micrometer.core.instrument.util.HierarchicalNameMapper;
 
 import java.io.IOException;
 import java.util.concurrent.TimeUnit;
 
-@CompatibilityTested
 public class GangliaMeterRegistry extends DropwizardMeterRegistry {
     private final GangliaReporter reporter;
     private final GangliaConfig config;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/CaffeineCacheMetrics.java
Patch:
@@ -66,7 +66,7 @@ public static <C extends Cache> C monitor(MeterRegistry registry, C cache, Strin
      * @see CacheStats
      */
     public static <C extends Cache> C monitor(MeterRegistry registry, C cache, String name, Iterable<Tag> tags) {
-        new CaffeineCacheMetrics(name, tags, cache).bindTo(registry);
+        new CaffeineCacheMetrics(cache, tags, name).bindTo(registry);
         return cache;
     }
 
@@ -105,11 +105,11 @@ public static <C extends AsyncLoadingCache> C monitor(MeterRegistry registry, C
     private final Cache<?, ?> cache;
 
     /**
-     * @param name  The metric name prefix
      * @param cache The cache to be instrumented. You must call {@link Caffeine#recordStats()} prior to building the cache
      *              for metrics to be recorded.
+     * @param name  The metric name prefix
      */
-    public CaffeineCacheMetrics(String name, Iterable<Tag> tags, Cache<?, ?> cache) {
+    public CaffeineCacheMetrics(Cache<?, ?> cache, Iterable<Tag> tags, String name) {
         this.name = name;
         this.tags = tags;
         this.cache = cache;

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/cache/EhCache2MetricsTest.java
Patch:
@@ -33,7 +33,7 @@ void cacheExposesMetrics() {
         Cache c = cacheManager.getCache("a");
 
         MeterRegistry registry = new SimpleMeterRegistry();
-        new EhCache2Metrics(c, "ehcache", emptyList()).bindTo(registry);
+        EhCache2Metrics.monitor(registry, c, "ehcache", emptyList());
 
         c.put(new Element("k", "v", 1));
 

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/cache/JCacheMetricsTest.java
Patch:
@@ -52,7 +52,7 @@ void cacheExposesMetrics(CachingProvider provider) {
         cache.put(1, "test");
 
         MeterRegistry registry = new SimpleMeterRegistry();
-        new JCacheMetrics(cache, "jcache", emptyList()).bindTo(registry);
+        JCacheMetrics.monitor(registry, cache, "jcache", emptyList());
 
         assertThat(registry.find("jcache.puts").tags("name", "a").value(Statistic.Value, 1.0).gauge()).isPresent();
     }

File: micrometer-samples/src/main/java/io/micrometer/core/samples/CacheSample.java
Patch:
@@ -41,7 +41,7 @@ public Integer load(Integer key) {
                 });
 
         MeterRegistry registry = SampleRegistries.prometheus();
-        new GuavaCacheMetrics("inverting.cache", emptyList(), cache).bindTo(registry);
+        new GuavaCacheMetrics(cache, emptyList(), "inverting.cache").bindTo(registry);
 
         for(int i = 0;; i++) {
             cache.getUnchecked(i);

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/GuavaCacheMetrics.java
Patch:
@@ -76,10 +76,10 @@ public void bindTo(MeterRegistry registry) {
             cache, Cache::size);
 
         registry.more().counter(registry.createId(name + ".requests", Tags.concat(tags, "result", "miss"),
-            "the number of times cache lookup methods have returned an uncached (newly loaded) value, or null"),
+            "The number of times cache lookup methods have returned an uncached (newly loaded) value, or null"),
             cache, c -> c.stats().missCount());
         registry.more().counter(registry.createId(name + ".requests", Tags.concat(tags, "result", "hit"),
-            "The number of times cache lookup methods have returned a cached value."),
+            "The number of times cache lookup methods have returned a cached value"),
             cache, c -> c.stats().hitCount());
         registry.more().counter(registry.createId(name + ".evictions", tags, "cache evictions"),
             cache, c -> c.stats().evictionCount());

File: implementations/micrometer-registry-ganglia/src/main/java/io/micrometer/ganglia/GangliaMeterRegistry.java
Patch:
@@ -17,13 +17,15 @@
 
 import com.codahale.metrics.ganglia.GangliaReporter;
 import info.ganglia.gmetric4j.gmetric.GMetric;
+import io.micrometer.core.annotation.CompatibilityTested;
 import io.micrometer.core.instrument.Clock;
 import io.micrometer.core.instrument.dropwizard.DropwizardMeterRegistry;
 import io.micrometer.core.instrument.util.HierarchicalNameMapper;
 
 import java.io.IOException;
 import java.util.concurrent.TimeUnit;
 
+@CompatibilityTested
 public class GangliaMeterRegistry extends DropwizardMeterRegistry {
     private final GangliaReporter reporter;
     private final GangliaConfig config;

File: implementations/micrometer-registry-influx/src/test/java/io/micrometer/influx/InfluxNamingConventionTest.java
Patch:
@@ -20,6 +20,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.catchThrowable;
+import static org.assertj.core.api.Assertions.fail;
 
 class InfluxNamingConventionTest {
     private InfluxNamingConvention convention = new InfluxNamingConvention();

File: implementations/micrometer-registry-jmx/src/main/java/io/micrometer/jmx/JmxMeterRegistry.java
Patch:
@@ -35,7 +35,7 @@ public JmxMeterRegistry(HierarchicalNameMapper nameMapper, Clock clock) {
 
         this.reporter = JmxReporter.forRegistry(getDropwizardRegistry()).build();
         this.reporter.start();
-    }
+}
 
     public void stop() {
         this.reporter.stop();

File: implementations/micrometer-registry-prometheus/src/test/java/io/micrometer/prometheus/PrometheusMeterRegistryTest.java
Patch:
@@ -15,9 +15,9 @@
  */
 package io.micrometer.prometheus;
 
+import io.micrometer.core.Issue;
 import io.micrometer.core.instrument.*;
 import io.micrometer.core.instrument.composite.CompositeMeterRegistry;
-import io.micrometer.core.instrument.stats.hist.Bucket;
 import io.micrometer.core.instrument.stats.hist.BucketFilter;
 import io.micrometer.core.instrument.stats.hist.Histogram;
 import io.micrometer.core.instrument.stats.quantile.GKQuantiles;

File: micrometer-core/src/main/java/io/micrometer/core/annotation/Timed.java
Patch:
@@ -18,7 +18,6 @@
 import java.lang.annotation.*;
 
 @Target({ElementType.TYPE, ElementType.METHOD})
-@Documented
 @Repeatable(TimedSet.class)
 @Retention(RetentionPolicy.RUNTIME)
 public @interface Timed {

File: micrometer-core/src/main/java/io/micrometer/core/annotation/TimedSet.java
Patch:
@@ -18,7 +18,6 @@
 import java.lang.annotation.*;
 
 @Target({ElementType.TYPE, ElementType.METHOD})
-@Documented
 @Retention(RetentionPolicy.RUNTIME)
 public @interface TimedSet {
     Timed[] value();

File: micrometer-test/src/main/java/io/micrometer/core/Issue.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.prometheus;
+package io.micrometer.core;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/CaffeineCacheMetrics.java
Patch:
@@ -121,10 +121,10 @@ public void bindTo(MeterRegistry registry) {
             "The approximate number of entries in this cache"),
             cache, Cache::estimatedSize);
 
-        registry.more().counter(registry.createId(name + ".requests", Tags.zip("result", "miss"),
+        registry.more().counter(registry.createId(name + ".requests", Tags.concat(tags, "result", "miss"),
             "the number of times cache lookup methods have returned an uncached (newly loaded) value, or null"),
             cache, c -> c.stats().missCount());
-        registry.more().counter(registry.createId(name + ".requests", Tags.zip("result", "hit"),
+        registry.more().counter(registry.createId(name + ".requests", Tags.concat(tags, "result", "hit"),
             "The number of times cache lookup methods have returned a cached value."),
             cache, c -> c.stats().hitCount());
         registry.more().counter(registry.createId(name + ".evictions", tags, "cache evictions"),

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/cache/GuavaCacheMetrics.java
Patch:
@@ -75,10 +75,10 @@ public void bindTo(MeterRegistry registry) {
             "The approximate number of entries in this cache"),
             cache, Cache::size);
 
-        registry.more().counter(registry.createId(name + ".requests", Tags.zip("result", "miss"),
+        registry.more().counter(registry.createId(name + ".requests", Tags.concat(tags, "result", "miss"),
             "the number of times cache lookup methods have returned an uncached (newly loaded) value, or null"),
             cache, c -> c.stats().missCount());
-        registry.more().counter(registry.createId(name + ".requests", Tags.zip("result", "hit"),
+        registry.more().counter(registry.createId(name + ".requests", Tags.concat(tags, "result", "hit"),
             "The number of times cache lookup methods have returned a cached value."),
             cache, c -> c.stats().hitCount());
         registry.more().counter(registry.createId(name + ".evictions", tags, "cache evictions"),

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jvm/ExecutorServiceMetrics.java
Patch:
@@ -159,7 +159,7 @@ private void monitor(MeterRegistry registry, ThreadPoolExecutor tp) {
     }
 
     private void monitor(MeterRegistry registry, ForkJoinPool fj) {
-        registry.more().counter(registry.createId(name + ".steals", emptyList(),
+        registry.more().counter(registry.createId(name + ".steals", tags,
             "Estimate of the total number of tasks stolen from " +
                 "one thread's work queue by another. The reported value " +
                 "underestimates the actual total number of steals when the pool " +

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jvm/JvmGcMetrics.java
Patch:
@@ -90,12 +90,12 @@ public void bindTo(MeterRegistry registry) {
 
                         if(isConcurrentPhase(notificationInfo)) {
                             registry.timer(registry.createId("jvm.gc.concurrent.phase.time",
-                                Tags.zip("action", notificationInfo.getGcAction(), "cause", notificationInfo.getGcCause()),
+                                Tags.concat(tags, "action", notificationInfo.getGcAction(), "cause", notificationInfo.getGcCause()),
                                 "Time spent in concurrent phase"), null, null)
                                 .record(notificationInfo.getGcInfo().getDuration(), TimeUnit.MILLISECONDS);
                         } else {
                             registry.timer(registry.createId("jvm.gc.pause",
-                                Tags.zip("action", notificationInfo.getGcAction(), "cause", notificationInfo.getGcCause()),
+                                Tags.concat(tags, "action", notificationInfo.getGcAction(), "cause", notificationInfo.getGcCause()),
                                 "Time spent in GC pause"), null, null)
                                 .record(notificationInfo.getGcInfo().getDuration(), TimeUnit.MILLISECONDS);
                         }

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/jdbc/DataSourceMetrics.java
Patch:
@@ -46,7 +46,7 @@ public DataSourceMetrics(DataSource dataSource, Collection<DataSourcePoolMetadat
     @Override
     public void bindTo(MeterRegistry registry) {
         if (poolMetadata != null) {
-            registry.gauge(name + ".active.connections", tags, dataSource, dataSource -> poolMetadata.getActive());
+            registry.gauge(name + ".active.connections", tags, dataSource, dataSource -> poolMetadata.getActive() != null ? poolMetadata.getActive() : 0);
             registry.gauge(name + ".max.connections", tags, dataSource, dataSource -> poolMetadata.getMax());
             registry.gauge(name + ".min.connections", tags, dataSource, dataSource -> poolMetadata.getMin());
         }

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/jdbc/DataSourceMetricsTest.java
Patch:
@@ -44,7 +44,8 @@
 @TestPropertySource(properties = {
     "spring.datasource.generate-unique-name=true",
     "management.security.enabled=false",
-    "spring.metrics.useGlobalRegistry=false"
+    "spring.metrics.useGlobalRegistry=false",
+    "spring.datasource.type=org.apache.tomcat.jdbc.pool.DataSource"
 })
 public class DataSourceMetricsTest {
     @Autowired

File: implementations/micrometer-registry-prometheus/src/main/java/io/micrometer/prometheus/PrometheusMeterRegistry.java
Patch:
@@ -125,6 +125,8 @@ private <T> Histogram<T> buildHistogramIfNecessary(Histogram.Builder<T> builder)
                 double min = (double) prometheusConfig.timerPercentilesMin().toNanos() / 1e9;
                 percentileHistBuilder.filterBuckets(BucketFilter.clampMin(min));
             }
+
+            percentileHistBuilder.bucketTimeScale(TimeUnit.SECONDS);
         }
         else if(builder instanceof TimeHistogram.Builder) {
             TimeHistogram.Builder timeHist = (TimeHistogram.Builder) builder;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/stats/hist/PercentileTimeHistogram.java
Patch:
@@ -44,7 +44,7 @@ public Builder bucketTimeScale(TimeUnit bucketTimeScale) {
 
         @Override
         public PercentileTimeHistogram create(Summation defaultSummationMode) {
-            return new PercentileTimeHistogram(new DefaultHistogram<>(f, domainFilters,
+            return new PercentileTimeHistogram(new DefaultHistogram<>(f, scaledDomainFilters(),
                 summation == null ? defaultSummationMode : summation), bucketTimeScale, fUnits);
         }
     }

File: micrometer-core/src/test/java/io/micrometer/core/instrument/stats/hist/DefaultHistogramTest.java
Patch:
@@ -86,8 +86,7 @@ void cumulativeHistogramsContainPositiveInfinityBucket(Histogram.Builder<Double>
     @ParameterizedTest
     @ArgumentsSource(ProvidedHistogramFunctions.class)
     void valuesAboveClampedMaxStillAccumulatedToInfinityBucket(Histogram.Builder<Double> builder) {
-        Histogram<Double> hist = builder.create(Cumulative);
-        hist.filterBuckets(BucketFilter.clampMax(3.0));
+        Histogram<Double> hist = builder.filterBuckets(BucketFilter.clampMax(3.0)).create(Cumulative);
         hist.observe(5);
 
         assertThat(hist.getBucket(Double.POSITIVE_INFINITY))

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/export/datadog/DatadogProperties.java
Patch:
@@ -39,13 +39,13 @@ public class DatadogProperties extends StepRegistryProperties {
     private String hostKey;
 
     /**
-     * The bucket filter clamping the bucket domain of timer percentiles histograms to some max value.
+     * Used to create a bucket filter clamping the bucket domain of timer percentiles histograms to some max value.
      * This is used to limit the number of buckets shipped to Prometheus to save on storage.
      */
     private Duration timerPercentilesMax = Duration.ofMinutes(2);
 
     /**
-     * The bucket filter clamping the bucket domain of timer percentiles histograms to some min value.
+     * Used to create a bucket filter clamping the bucket domain of timer percentiles histograms to some min value.
      * This is used to limit the number of buckets shipped to Prometheus to save on storage.
      */
     private Duration timerPercentilesMin = Duration.ofMillis(10);

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/export/influx/InfluxProperties.java
Patch:
@@ -66,13 +66,13 @@ public class InfluxProperties extends StepRegistryProperties {
     private Boolean compressed;
 
     /**
-     * The bucket filter clamping the bucket domain of timer percentiles histograms to some max value.
+     * Used to create a bucket filter clamping the bucket domain of timer percentiles histograms to some max value.
      * This is used to limit the number of buckets shipped to Prometheus to save on storage.
      */
     private Duration timerPercentilesMax = Duration.ofMinutes(2);
 
     /**
-     * The bucket filter clamping the bucket domain of timer percentiles histograms to some min value.
+     * Used to create a bucket filter clamping the bucket domain of timer percentiles histograms to some min value.
      * This is used to limit the number of buckets shipped to Prometheus to save on storage.
      */
     private Duration timerPercentilesMin = Duration.ofMillis(10);

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/autoconfigure/export/prometheus/PrometheusProperties.java
Patch:
@@ -38,13 +38,13 @@ public class PrometheusProperties {
     private Boolean descriptions = true;
 
     /**
-     * The bucket filter clamping the bucket domain of timer percentiles histograms to some max value.
+     * Used to create a bucket filter clamping the bucket domain of timer percentiles histograms to some max value.
      * This is used to limit the number of buckets shipped to Prometheus to save on storage.
      */
     private Duration timerPercentilesMax = Duration.ofMinutes(2);
 
     /**
-     * The bucket filter clamping the bucket domain of timer percentiles histograms to some min value.
+     * Used to create a bucket filter clamping the bucket domain of timer percentiles histograms to some min value.
      * This is used to limit the number of buckets shipped to Prometheus to save on storage.
      */
     private Duration timerPercentilesMin = Duration.ofMillis(10);

File: micrometer-core/src/main/java/io/micrometer/core/instrument/stats/hist/DefaultHistogram.java
Patch:
@@ -45,9 +45,7 @@ public DefaultHistogram<U> create(Summation defaultSummationMode) {
             toMap(
                 Bucket::getTag,
                 Function.identity(),
-                (u, v) -> {
-                    throw new IllegalStateException(String.format("Duplicate key %s", u));
-                },
+                (u, v) -> u,
                 TreeMap::new
             )
         );

File: micrometer-core/src/main/java/io/micrometer/core/instrument/stats/hist/PercentileBucketFunction.java
Patch:
@@ -42,9 +42,11 @@ public Double bucket(double d) {
     @Override
     public Collection<? extends Bucket<Double>> buckets() {
         List<Bucket<Double>> domain = new ArrayList<>();
-        for (int i = 0; i < BUCKET_VALUES.length; i++) {
+        int i = 0;
+        for (; i < BUCKET_VALUES.length; i++) {
             domain.add(new Bucket<>(BUCKET_VALUES[i], i));
         }
+        domain.add(new Bucket<>(Double.POSITIVE_INFINITY, i));
         return domain;
     }
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/stats/hist/PercentileHistogram.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micrometer.core.instrument.stats.hist;
 
-public class PercentileHistogram extends DoubleHistogram {
+public class PercentileHistogram extends DefaultHistogram<Double> {
     public PercentileHistogram(BucketFunction<Double> f, Summation summation) {
         super(f, summation);
     }
@@ -27,7 +27,7 @@ public static class Builder extends Histogram.Builder<Double> {
 
         @Override
         public PercentileHistogram create(Summation defaultSummationMode) {
-            return new PercentileHistogram(f, summation);
+            return new PercentileHistogram(f, summation == null ? defaultSummationMode : summation);
         }
     }
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/stats/hist/PercentileTimeHistogram.java
Patch:
@@ -18,7 +18,7 @@
 import java.util.concurrent.TimeUnit;
 
 public class PercentileTimeHistogram extends TimeHistogram {
-    PercentileTimeHistogram(DoubleHistogram delegate, TimeUnit fUnits) {
+    PercentileTimeHistogram(Histogram<Double> delegate, TimeUnit fUnits) {
         super(delegate, fUnits);
     }
 
@@ -32,7 +32,7 @@ public static class Builder extends Histogram.Builder<Double> {
 
         @Override
         public PercentileTimeHistogram create(Summation defaultSummationMode) {
-            return new PercentileTimeHistogram(new DoubleHistogram(f, summation == null ? defaultSummationMode : summation), fUnits);
+            return new PercentileTimeHistogram(new DefaultHistogram<>(f, summation == null ? defaultSummationMode : summation), fUnits);
         }
     }
 }

File: micrometer-core/src/test/java/io/micrometer/core/instrument/MeterRegistriesProvider.java
Patch:
@@ -24,7 +24,6 @@
 import io.micrometer.graphite.GraphiteMeterRegistry;
 import io.micrometer.influx.InfluxConfig;
 import io.micrometer.influx.InfluxMeterRegistry;
-import io.micrometer.prometheus.PrometheusConfig;
 import io.micrometer.prometheus.PrometheusMeterRegistry;
 import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
 import io.micrometer.core.instrument.util.HierarchicalNameMapper;

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/scheduling/ScheduledMethodMetricsTest.java
Patch:
@@ -18,6 +18,7 @@
 import io.micrometer.core.annotation.Timed;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -42,6 +43,7 @@
 @RunWith(SpringRunner.class)
 @SpringBootTest
 @TestPropertySource(properties = "spring.metrics.useGlobalRegistry=false")
+@Ignore("Race condition still...")
 public class ScheduledMethodMetricsTest {
 
     static CountDownLatch longTaskStarted = new CountDownLatch(1);

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/web/servlet/WebMvcMetrics.java
Patch:
@@ -77,7 +77,7 @@ public WebMvcMetrics(MeterRegistry registry, WebMvcTagsProvider tagsProvider,
         this.recordAsPercentiles = recordAsPercentiles;
     }
 
-    void tagWithException(Throwable exception) {
+    public void tagWithException(Throwable exception) {
         RequestAttributes attributes = RequestContextHolder.getRequestAttributes();
         attributes.setAttribute(EXCEPTION_ATTRIBUTE, exception,
             RequestAttributes.SCOPE_REQUEST);

File: implementations/micrometer-registry-influx/src/main/java/io/micrometer/influx/InfluxConfig.java
Patch:
@@ -27,16 +27,15 @@ default String prefix() {
     }
 
     /**
-     * The tag that will be mapped to "host" when shipping metrics to Influx, or {@code null} if
-     * host should be omitted on publishing.
+     * The db to send metrics to. Defaults to "mydb".
      */
     default String db() {
         String v = get(prefix() + ".db");
         return v == null ? "mydb" : v;
     }
 
     /**
-     * Sets the write consistency for the point. The Influx default is 'one'. Must
+     * Sets the write consistency for each point. The Influx default is 'one'. Must
      * be one of 'any', 'one', 'quorum', or 'all'.
      *
      * Only available for InfluxEnterprise clusters.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/spectator/step/StepSpectatorMeterRegistry.java
Patch:
@@ -34,8 +34,8 @@
 public abstract class StepSpectatorMeterRegistry extends SpectatorMeterRegistry {
     private long stepMillis;
 
-    public StepSpectatorMeterRegistry(Registry registry, Clock clock, long stepMillis) {
-        super(registry, clock);
+    public StepSpectatorMeterRegistry(StepRegistryConfig config, Registry registry, Clock clock, long stepMillis) {
+        super(config, registry, clock);
         this.stepMillis = stepMillis;
     }
 

File: starter/micrometer-atlas-starter/src/main/java/io/micrometer/atlas/AtlasMeterRegistry.java
Patch:
@@ -37,7 +37,7 @@ public class AtlasMeterRegistry extends StepSpectatorMeterRegistry {
     public AtlasMeterRegistry(AtlasConfig config, Clock clock) {
         // The Spectator Atlas registry will do tag formatting for us, so we'll just pass through
         // tag keys and values with the identity formatter.
-        super(new AtlasRegistry(new com.netflix.spectator.api.Clock() {
+        super(null, new AtlasRegistry(new com.netflix.spectator.api.Clock() {
             @Override
             public long wallTime() {
                 return clock.wallTime();

File: starter/micrometer-datadog-starter/src/main/java/io/micrometer/datadog/DatadogMeterRegistry.java
Patch:
@@ -23,7 +23,7 @@
  */
 public class DatadogMeterRegistry extends StepSpectatorMeterRegistry {
     public DatadogMeterRegistry(DatadogConfig config, Clock clock) {
-        super(new DatadogRegistry(config, new com.netflix.spectator.api.Clock() {
+        super(config, new DatadogRegistry(config, new com.netflix.spectator.api.Clock() {
             @Override
             public long wallTime() {
                 return clock.wallTime();

File: starter/micrometer-influx-starter/src/main/java/io/micrometer/influx/InfluxMeterRegistry.java
Patch:
@@ -20,7 +20,7 @@
 
 public class InfluxMeterRegistry extends StepSpectatorMeterRegistry {
     public InfluxMeterRegistry(InfluxConfig config, Clock clock) {
-        super(new InfluxRegistry(config, new com.netflix.spectator.api.Clock() {
+        super(config, new InfluxRegistry(config, new com.netflix.spectator.api.Clock() {
             @Override
             public long wallTime() {
                 return clock.wallTime();

File: starter/micrometer-prometheus-starter/src/main/java/io/micrometer/prometheus/PrometheusConfig.java
Patch:
@@ -56,7 +56,6 @@ default Duration timerPercentilesMax() {
      */
     default Duration timerPercentilesMin() {
         String v = get(prefix() + ".timerPercentilesMin");
-        // default is 0.1 ms
-        return v == null ? Duration.ofNanos(100000) : Duration.parse(v);
+        return v == null ? Duration.ofMillis(10) : Duration.parse(v);
     }
 }

File: starter/micrometer-prometheus-starter/src/main/java/io/micrometer/prometheus/PrometheusMeterRegistry.java
Patch:
@@ -117,7 +117,8 @@ private <T> Histogram<T> buildHistogramIfNecessary(Histogram.Builder<T> builder)
             double max = (double) prometheusConfig.timerPercentilesMax().toNanos() / 1e9;
             double min = (double) prometheusConfig.timerPercentilesMin().toNanos() / 1e9;
 
-            percentileHist.filterBuckets(BucketFilter.clampMax(max));
+            BucketFilter<Double> clampMax = BucketFilter.clampMax(max);
+            percentileHist.filterBuckets(b -> b.getTag() == Double.POSITIVE_INFINITY || clampMax.shouldPublish(b));
             percentileHist.filterBuckets(BucketFilter.clampMin(min));
         }
         if(hist instanceof DoubleHistogram) {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/stats/hist/BucketFunction.java
Patch:
@@ -26,4 +26,6 @@
  */
 public interface BucketFunction<T> {
     T bucket(double d);
+
+    Collection<? extends Bucket<T>> buckets();
 }

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/export/prometheus/PrometheusExportConfiguration.java
Patch:
@@ -18,6 +18,7 @@
 import io.micrometer.core.instrument.Clock;
 import io.micrometer.prometheus.PrometheusConfig;
 import io.micrometer.prometheus.PrometheusMeterRegistry;
+import io.micrometer.spring.export.DurationConverter;
 import io.micrometer.spring.export.MetricsExporter;
 import io.prometheus.client.CollectorRegistry;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
@@ -26,9 +27,11 @@
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
+import org.springframework.context.annotation.Import;
 
 @Configuration
 @ConditionalOnClass(name = "io.micrometer.prometheus.PrometheusMeterRegistry")
+@Import(DurationConverter.class)
 @EnableConfigurationProperties(PrometheusConfigurationProperties.class)
 public class PrometheusExportConfiguration {
     @ConditionalOnProperty(value = "metrics.prometheus.enabled", matchIfMissing = true)

File: micrometer-core/src/main/java/io/micrometer/core/instrument/util/HierarchicalNameMapper.java
Patch:
@@ -40,6 +40,7 @@ public interface HierarchicalNameMapper {
         tagsCopy.sort(Comparator.comparing(Tag::getKey));
         return id.getConventionName(convention) + "." + tagsCopy.stream()
             .map(t -> t.getKey() + "." + t.getValue())
+            .map(nameSegment -> nameSegment.replace(" ", "_"))
             .collect(Collectors.joining("."));
     };
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/stats/hist/Histogram.java
Patch:
@@ -171,8 +171,8 @@ public void observe(double value) {
                 Bucket<T> bucket;
 
                 if (isCumulative()) {
-                    Map.Entry<T, Bucket<T>> ceiling = buckets.ceilingEntry(tag);
-                    bucket = new Bucket<>(tag, percentiles, ceiling == null ? 1 : ceiling.getValue().getValue() + 1);
+                    Map.Entry<T, Bucket<T>> floor = buckets.floorEntry(tag);
+                    bucket = new Bucket<>(tag, percentiles, floor == null ? 1 : floor.getValue().getValue() + 1);
                 } else bucket = new Bucket<>(tag, percentiles, 1);
 
                 bucketListeners.forEach(listener -> listener.bucketAdded(bucket));

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/LogbackMetrics.java
Patch:
@@ -77,7 +77,7 @@ class MetricsTurboFilter extends TurboFilter {
     @Override
     public FilterReply decide(Marker marker, Logger logger, Level level, String format, Object[] params, Throwable t) {
         // cannot use logger.isEnabledFor(level), as it would cause a StackOverflowException by calling this filter again!
-        if(logger.getEffectiveLevel().isGreaterOrEqual(level)) {
+        if(level.isGreaterOrEqual(logger.getEffectiveLevel())) {
             switch (level.toInt()) {
                 case Level.ERROR_INT:
                     errorCounter.increment();

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeCounter.java
Patch:
@@ -35,7 +35,7 @@ class CompositeCounter extends AbstractMeter implements Counter, CompositeMeter
     @Override
     public void increment(double amount) {
         synchronized (counters) {
-            counters.values().forEach(Counter::increment);
+            counters.values().forEach(c -> c.increment(amount));
         }
     }
 

File: micrometer-core/src/test/java/io/micrometer/core/instrument/MeterRegistryTest.java
Patch:
@@ -25,6 +25,7 @@
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicInteger;
 
+import static io.micrometer.core.instrument.MockClock.clock;
 import static io.micrometer.core.instrument.Statistic.Count;
 import static io.micrometer.core.instrument.Statistic.Total;
 import static org.assertj.core.api.Assertions.assertThat;
@@ -95,8 +96,9 @@ void findMetersByValue(MeterRegistry registry) {
         Timer t = registry.timer("timer");
         t.record(10, TimeUnit.NANOSECONDS);
 
-        assertThat(registry.find("counter").value(Count, 1.0).counter()).isPresent();
+        clock(registry).addAndGet(1, TimeUnit.SECONDS);
 
+        assertThat(registry.find("counter").value(Count, 1.0).counter()).isPresent();
         assertThat(registry.find("timer").value(Count, 1.0).timer()).isPresent();
         assertThat(registry.find("timer").value(Total, 10.0).timer()).isPresent();
     }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Meter.java
Patch:
@@ -58,8 +58,8 @@ interface Id {
         String getBaseUnit();
         String getDescription();
 
-        String getConventionName();
-        List<Tag> getConventionTags();
+        String getConventionName(NamingConvention convention);
+        List<Tag> getConventionTags(NamingConvention convention);
 
         /**
          * Associate this id with a specific type, sometimes used in the determinatio of a

File: micrometer-core/src/main/java/io/micrometer/core/instrument/noop/NoopMeter.java
Patch:
@@ -17,6 +17,7 @@
 
 import io.micrometer.core.instrument.Measurement;
 import io.micrometer.core.instrument.Meter;
+import io.micrometer.core.instrument.NamingConvention;
 import io.micrometer.core.instrument.Tag;
 
 import java.util.Collections;
@@ -47,12 +48,12 @@ public String getDescription() {
             }
 
             @Override
-            public String getConventionName() {
+            public String getConventionName(NamingConvention convention) {
                 return "noop";
             }
 
             @Override
-            public List<Tag> getConventionTags() {
+            public List<Tag> getConventionTags(NamingConvention convention) {
                 return Collections.emptyList();
             }
 

File: micrometer-core/src/test/java/io/micrometer/core/instrument/composite/CompositeMeterRegistryTest.java
Patch:
@@ -19,6 +19,7 @@
 import io.micrometer.core.instrument.DistributionSummary;
 import io.micrometer.core.instrument.Gauge;
 import io.micrometer.core.instrument.NamingConvention;
+import io.micrometer.core.instrument.binder.ClassLoaderMetrics;
 import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
 import org.junit.jupiter.api.DisplayName;
 import org.junit.jupiter.api.Test;

File: starter/micrometer-atlas-starter/src/main/java/io/micrometer/atlas/AtlasMeterRegistry.java
Patch:
@@ -93,7 +93,7 @@ protected Timer newTimer(Meter.Id id, Histogram.Builder<?> histogram, Quantiles
         if (histogram != null && histogram.create(TimeUnit.NANOSECONDS, Histogram.Type.Normal).isPercentiles()) {
             // scale nanosecond precise quantile values to seconds
             registerQuantilesGaugeIfNecessary(id, quantiles, t -> t / 1.0e6);
-            com.netflix.spectator.api.Timer timer = PercentileTimer.get(getSpectatorRegistry(), getSpectatorRegistry().createId(id.getConventionName(), toSpectatorTags(id.getConventionTags())));
+            com.netflix.spectator.api.Timer timer = PercentileTimer.get(getSpectatorRegistry(), getSpectatorRegistry().createId(getConventionName(id), toSpectatorTags(getConventionTags(id))));
             return new SpectatorTimer(id, timer, clock, quantiles, null);
         }
 
@@ -104,8 +104,8 @@ protected Timer newTimer(Meter.Id id, Histogram.Builder<?> histogram, Quantiles
     protected DistributionSummary newDistributionSummary(Meter.Id id, Histogram.Builder<?> histogram, Quantiles quantiles) {
         if(histogram != null && histogram.create(TimeUnit.NANOSECONDS, Histogram.Type.Normal).isPercentiles()) {
             registerQuantilesGaugeIfNecessary(id, quantiles, UnaryOperator.identity());
-            com.netflix.spectator.api.DistributionSummary ds = PercentileDistributionSummary.get(getSpectatorRegistry(), getSpectatorRegistry().createId(id.getConventionName(),
-                toSpectatorTags(id.getConventionTags())));
+            com.netflix.spectator.api.DistributionSummary ds = PercentileDistributionSummary.get(getSpectatorRegistry(), getSpectatorRegistry().createId(getConventionName(id),
+                toSpectatorTags(getConventionTags(id))));
             return new SpectatorDistributionSummary(id, ds, quantiles, null);
         }
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/AbstractMeterRegistry.java
Patch:
@@ -49,8 +49,6 @@ public abstract class AbstractMeterRegistry implements MeterRegistry {
      */
     private NamingConvention namingConvention = NamingConvention.snakeCase;
 
-    private TimeUnit baseTimeUnit = TimeUnit.NANOSECONDS;
-
     private MeterRegistry.Config config = new MeterRegistry.Config() {
         @Override
         public Config commonTags(Iterable<Tag> tags) {
@@ -206,7 +204,7 @@ public Timer.Builder description(String description) {
         @Override
         public Timer create() {
             // the base unit for a timer will be determined by the monitoring system if it is part of the convention name
-            return registerMeterIfNecessary(Timer.class, Meter.Type.Timer, name, tags, baseTimeUnit.toString().toLowerCase(), id ->
+            return registerMeterIfNecessary(Timer.class, Meter.Type.Timer, name, tags, null, id ->
                 newTimer(id, description, histogram, quantiles));
         }
     }

File: starter/micrometer-prometheus-starter/src/main/java/io/micrometer/prometheus/PrometheusNamingConvention.java
Patch:
@@ -56,10 +56,10 @@ public String name(String name, Meter.Type type, String baseUnit) {
                 break;
             case Timer:
                 if(conventionName.endsWith("_duration")) {
-                    conventionName += "_" + baseUnit;
+                    conventionName += "_seconds";
                 }
-                else if(!conventionName.endsWith("_" + baseUnit))
-                    conventionName += "_duration_" + baseUnit;
+                else if(!conventionName.endsWith("_seconds"))
+                    conventionName += "_duration_seconds";
                 break;
         }
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/spectator/SpectatorDistributionSummary.java
Patch:
@@ -26,7 +26,7 @@ public class SpectatorDistributionSummary extends AbstractMeter implements Distr
     private final Quantiles quantiles;
     private final Histogram<?> histogram;
 
-    SpectatorDistributionSummary(Id id, String description,
+    public SpectatorDistributionSummary(Id id, String description,
                                  com.netflix.spectator.api.DistributionSummary distributionSummary,
                                  Quantiles quantiles,
                                  Histogram<?> histogram) {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/spectator/SpectatorMeterRegistry.java
Patch:
@@ -44,7 +44,7 @@ public SpectatorMeterRegistry(Registry registry, Clock clock) {
         this.registry = registry;
     }
 
-    private Collection<com.netflix.spectator.api.Tag> toSpectatorTags(Iterable<io.micrometer.core.instrument.Tag> tags) {
+    protected Collection<com.netflix.spectator.api.Tag> toSpectatorTags(Iterable<io.micrometer.core.instrument.Tag> tags) {
         return stream(tags.spliterator(), false)
             .map(t -> new BasicTag(t.getKey(), t.getValue()))
             .collect(toList());
@@ -88,7 +88,7 @@ protected <T> io.micrometer.core.instrument.Gauge newGauge(Meter.Id id, String d
         return new SpectatorGauge(id, description, gauge);
     }
 
-    private Histogram<?> registerHistogramCounterIfNecessary(Meter.Id id, Histogram.Builder<?> histogramBuilder) {
+    protected Histogram<?> registerHistogramCounterIfNecessary(Meter.Id id, Histogram.Builder<?> histogramBuilder) {
         if (histogramBuilder != null) {
             return histogramBuilder
                 .bucketListener(bucket -> {
@@ -100,7 +100,7 @@ private Histogram<?> registerHistogramCounterIfNecessary(Meter.Id id, Histogram.
         return null;
     }
 
-    private void registerQuantilesGaugeIfNecessary(Meter.Id id, Quantiles quantiles, UnaryOperator<Double> scaling) {
+    protected void registerQuantilesGaugeIfNecessary(Meter.Id id, Quantiles quantiles, UnaryOperator<Double> scaling) {
         if (quantiles != null) {
             for (Double q : quantiles.monitored()) {
                 if (!Double.isNaN(q)) {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/spectator/SpectatorTimer.java
Patch:
@@ -29,7 +29,7 @@ public class SpectatorTimer extends AbstractTimer {
     private final Quantiles quantiles;
     private final Histogram<?> histogram;
 
-    SpectatorTimer(Id id, String description, Timer timer,
+    public SpectatorTimer(Id id, String description, Timer timer,
                    Clock clock, Quantiles quantiles, Histogram<?> histogram) {
         super(id, description, clock);
         this.timer = timer;

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/MetricsConfiguration.java
Patch:
@@ -28,7 +28,7 @@
 import io.micrometer.spring.export.influx.InfluxExportConfiguration;
 import io.micrometer.spring.export.jmx.JmxExportConfiguration;
 import io.micrometer.spring.export.prometheus.PrometheusExportConfiguration;
-import io.micrometer.spring.scheduling.MetricsSchedulingAspect;
+import io.micrometer.spring.scheduling.ScheduledMethodMetrics;
 import io.micrometer.spring.web.MetricsRestTemplateConfiguration;
 import io.micrometer.spring.web.MetricsServletRequestConfiguration;
 import org.springframework.beans.factory.ObjectProvider;
@@ -104,8 +104,8 @@ public MeterRegistryConfigurationSupport(MeterRegistry registry,
     @Bean
     @ConditionalOnClass(name = "org.aspectj.lang.ProceedingJoinPoint")
     @ConditionalOnProperty(value = "spring.aop.enabled", havingValue = "true", matchIfMissing = true)
-    public MetricsSchedulingAspect metricsSchedulingAspect(MeterRegistry registry) {
-        return new MetricsSchedulingAspect(registry);
+    public ScheduledMethodMetrics metricsSchedulingAspect(MeterRegistry registry) {
+        return new ScheduledMethodMetrics(registry);
     }
 
     @Configuration

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/scheduling/ScheduledMethodMetrics.java
Patch:
@@ -32,12 +32,12 @@
 import java.util.concurrent.TimeUnit;
 
 @Aspect
-public class MetricsSchedulingAspect {
-    private static final Log logger = LogFactory.getLog(MetricsSchedulingAspect.class);
+public class ScheduledMethodMetrics {
+    private static final Log logger = LogFactory.getLog(ScheduledMethodMetrics.class);
 
     private final MeterRegistry registry;
 
-    public MetricsSchedulingAspect(MeterRegistry registry) {
+    public ScheduledMethodMetrics(MeterRegistry registry) {
         this.registry = registry;
     }
 

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/web/ControllerMetrics.java
Patch:
@@ -49,13 +49,13 @@ public class ControllerMetrics {
 
     private final MeterRegistry registry;
     private MetricsConfigurationProperties properties;
-    private final WebmvcTagConfigurer tagConfigurer;
+    private final WebServletTagConfigurer tagConfigurer;
 
     private final Map<HttpServletRequest, Long> longTaskTimerIds = Collections.synchronizedMap(new IdentityHashMap<>());
 
     public ControllerMetrics(MeterRegistry registry,
                              MetricsConfigurationProperties properties,
-                             WebmvcTagConfigurer tagConfigurer) {
+                             WebServletTagConfigurer tagConfigurer) {
         this.registry = registry;
         this.properties = properties;
         this.tagConfigurer = tagConfigurer;

File: micrometer-spring-legacy/src/samples/java/io/micrometer/spring/samples/components/PersonController.java
Patch:
@@ -27,7 +27,7 @@ public class PersonController {
     private List<String> people = Arrays.asList("mike", "suzy");
 
     @GetMapping("/api/people")
-    @Timed(quantiles = 0.95)
+    @Timed(percentiles = true)
     public List<String> allPeople() {
         return people;
     }

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/MetricsConfigurationTest.java
Patch:
@@ -21,6 +21,7 @@
 import io.micrometer.core.instrument.binder.LogbackMetrics;
 import io.micrometer.core.instrument.binder.MeterBinder;
 import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
+import io.micrometer.core.instrument.stats.hist.Histogram;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -119,7 +120,6 @@ public RestTemplate restTemplate() {
 
     @RestController
     static class PersonController {
-        @Timed
         @GetMapping("/api/people")
         Set<String> personName() {
             return Collections.singleton("Jon");

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/scheduling/ScheduledMethodMetricsTest.java
Patch:
@@ -38,7 +38,7 @@
 @RunWith(SpringRunner.class)
 @SpringBootTest
 @TestPropertySource(properties = "metrics.useGlobalRegistry=false")
-public class MetricsSchedulingAspectTest {
+public class ScheduledMethodMetricsTest {
 
     static CountDownLatch longTaskStarted = new CountDownLatch(1);
     static CountDownLatch longTaskShouldComplete = new CountDownLatch(1);

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/web/ControllerMetrics.java
Patch:
@@ -154,7 +154,7 @@ private class TimerConfig {
         Iterable<Tag> extraTags = Collections.emptyList();
         boolean longTask = false;
         double[] quantiles = new double[0];
-        boolean percentiles = properties.getWeb().getAutoTimeServerRequests();
+        boolean percentiles = properties.getWeb().getServerRequestPercentiles();
 
         @Override
         public boolean equals(Object o) {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/ClassLoaderMetrics.java
Patch:
@@ -27,7 +27,7 @@ public class ClassLoaderMetrics implements MeterBinder {
     public void bindTo(MeterRegistry registry) {
         ClassLoadingMXBean classLoadingBean = ManagementFactory.getClassLoadingMXBean();
 
-        registry.gauge("classes.loaded", classLoadingBean, ClassLoadingMXBean::getLoadedClassCount);
-        registry.more().counter("classes.unloaded", emptyList(), classLoadingBean, ClassLoadingMXBean::getUnloadedClassCount);
+        registry.gauge("jvm.classes.loaded", classLoadingBean, ClassLoadingMXBean::getLoadedClassCount);
+        registry.more().counter("jvm.classes.unloaded", emptyList(), classLoadingBean, ClassLoadingMXBean::getUnloadedClassCount);
     }
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/JvmThreadMetrics.java
Patch:
@@ -26,8 +26,8 @@ public class JvmThreadMetrics implements MeterBinder {
     public void bindTo(MeterRegistry registry) {
         ThreadMXBean threadBean = ManagementFactory.getThreadMXBean();
 
-        registry.gauge("threads.peak", threadBean, ThreadMXBean::getPeakThreadCount);
-        registry.gauge("threads.daemon", threadBean, ThreadMXBean::getDaemonThreadCount);
-        registry.gauge("threads.live", threadBean, ThreadMXBean::getThreadCount);
+        registry.gauge("jvm.threads.peak", threadBean, ThreadMXBean::getPeakThreadCount);
+        registry.gauge("jvm.threads.daemon", threadBean, ThreadMXBean::getDaemonThreadCount);
+        registry.gauge("jvm.threads.live", threadBean, ThreadMXBean::getThreadCount);
     }
 }

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/ClassLoaderMetricsTest.java
Patch:
@@ -27,7 +27,7 @@ void classLoadingMetrics() {
         MeterRegistry registry = new SimpleMeterRegistry();
         new ClassLoaderMetrics().bindTo(registry);
 
-        assertThat(registry.find("classes.loaded").gauge())
+        assertThat(registry.find("jvm.classes.loaded").gauge())
                 .hasValueSatisfying(g -> assertThat(g.value()).isGreaterThan(0));
     }
 }

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/JvmThreadMetricsTest.java
Patch:
@@ -27,11 +27,11 @@ void threadMetrics() {
         MeterRegistry registry = new SimpleMeterRegistry();
         new JvmThreadMetrics().bindTo(registry);
 
-        assertThat(registry.find("threads.live").gauge())
+        assertThat(registry.find("jvm.threads.live").gauge())
                 .hasValueSatisfying(g -> assertThat(g.value()).isGreaterThan(0));
-        assertThat(registry.find("threads.daemon").gauge())
+        assertThat(registry.find("jvm.threads.daemon").gauge())
                 .hasValueSatisfying(g -> assertThat(g.value()).isGreaterThan(0));
-        assertThat(registry.find("threads.peak").gauge())
+        assertThat(registry.find("jvm.threads.peak").gauge())
                 .hasValueSatisfying(g ->  assertThat(g.value()).isGreaterThan(0));
     }
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/dropwizard/DropwizardMeterRegistry.java
Patch:
@@ -89,7 +89,7 @@ private Histogram<?> registerHistogramCounterIfNecessary(Meter.Id id, Histogram.
         if (histogramBuilder != null) {
             return histogramBuilder
                 .bucketListener(bucket -> {
-                    more().counter(id.getName(), Tags.concat(id.getTags(), "bucket", bucket.toString()),
+                    more().counter(id.getName(), Tags.concat(id.getTags(), "bucket", bucket.getTag()),
                         bucket, Bucket::getValue);
                 })
                 .create(TimeUnit.NANOSECONDS, Histogram.Type.Normal);

File: micrometer-core/src/main/java/io/micrometer/core/instrument/simple/SimpleMeterRegistry.java
Patch:
@@ -77,7 +77,7 @@ private Histogram<?> registerHistogramCounterIfNecessary(Meter.Id id, Histogram.
         if (histogramBuilder != null) {
             return histogramBuilder
                 .bucketListener(bucket -> {
-                    more().counter(id.getName(), Tags.concat(id.getTags(), "bucket", bucket.toString()),
+                    more().counter(id.getName(), Tags.concat(id.getTags(), "bucket", bucket.getTag()),
                         bucket, Bucket::getValue);
                 })
                 .create(TimeUnit.NANOSECONDS, Histogram.Type.Normal);

File: micrometer-core/src/main/java/io/micrometer/core/instrument/spectator/SpectatorMeterRegistry.java
Patch:
@@ -92,7 +92,7 @@ private Histogram<?> registerHistogramCounterIfNecessary(Meter.Id id, Histogram.
         if (histogramBuilder != null) {
             return histogramBuilder
                 .bucketListener(bucket -> {
-                    more().counter(id.getName(), Tags.concat(id.getTags(), "bucket", bucket.toString()),
+                    more().counter(id.getName(), Tags.concat(id.getTags(), "bucket", bucket.getTag()),
                         bucket, Bucket::getValue);
                 })
                 .create(TimeUnit.NANOSECONDS, Histogram.Type.Normal);

File: micrometer-core/src/jmh/java/io/micrometer/core/benchmark/SimpleMeasureBenchmark.java
Patch:
@@ -86,12 +86,12 @@ public List<Tag> getConventionTags() {
             }
         };
         
-        timer = new SimpleTimer(id, "", Clock.SYSTEM);
+        timer = new SimpleTimer(id, "", Clock.SYSTEM, null, null);
         longTaskTimer = new SimpleLongTaskTimer(id, "", Clock.SYSTEM);
         counter = new SimpleCounter(id, "");
         List<Integer> testListReference = Arrays.asList(1, 2);
         gauge = new SimpleGauge<>(id, "", testListReference, List::size);
-        distributionSummary = new SimpleDistributionSummary(id, "");
+        distributionSummary = new SimpleDistributionSummary(id, "", null, null);
     }
 
     @Benchmark

File: micrometer-core/src/main/java/io/micrometer/core/annotation/Timed.java
Patch:
@@ -29,4 +29,6 @@
     boolean longTask() default false;
 
     double[] quantiles() default {};
+
+    boolean percentiles() default false;
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/DistributionSummary.java
Patch:
@@ -47,7 +47,7 @@ public interface DistributionSummary extends Meter {
     interface Builder {
         Builder quantiles(Quantiles quantiles);
 
-        Builder histogram(Histogram<?> histogram);
+        Builder histogram(Histogram.Builder<?> histogram);
 
         Builder tags(Iterable<Tag> tags);
         default Builder tags(String... tags) {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Timer.java
Patch:
@@ -112,7 +112,7 @@ default Type getType() {
     interface Builder {
         Builder quantiles(Quantiles quantiles);
 
-        Builder histogram(Histogram<?> histogram);
+        Builder histogram(Histogram.Builder<?> histogram);
 
         Builder tags(Iterable<Tag> tags);
         default Builder tags(String... tags) {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeDistributionSummary.java
Patch:
@@ -29,12 +29,12 @@
 
 public class CompositeDistributionSummary extends AbstractMeter implements DistributionSummary, CompositeMeter {
     private final Quantiles quantiles;
-    private final Histogram histogram;
+    private final Histogram.Builder<?> histogram;
 
     private final Map<MeterRegistry, DistributionSummary> distributionSummaries =
         Collections.synchronizedMap(new LinkedHashMap<>());
 
-    CompositeDistributionSummary(Meter.Id id, String description, Quantiles quantiles, Histogram histogram) {
+    CompositeDistributionSummary(Meter.Id id, String description, Quantiles quantiles, Histogram.Builder<?> histogram) {
         super(id, description);
         this.quantiles = quantiles;
         this.histogram = histogram;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeMeterRegistry.java
Patch:
@@ -46,15 +46,15 @@ public CompositeMeterRegistry(Clock clock) {
     }
 
     @Override
-    protected Timer newTimer(Meter.Id id, String description, Histogram<?> histogram, Quantiles quantiles) {
+    protected Timer newTimer(Meter.Id id, String description, Histogram.Builder<?> histogram, Quantiles quantiles) {
         CompositeTimer timer = new CompositeTimer(id, description, quantiles, histogram, clock);
         compositeMeters.add(timer);
         registries.forEach(timer::add);
         return timer;
     }
 
     @Override
-    protected DistributionSummary newDistributionSummary(Meter.Id id, String description, Histogram<?> histogram, Quantiles quantiles) {
+    protected DistributionSummary newDistributionSummary(Meter.Id id, String description, Histogram.Builder<?> histogram, Quantiles quantiles) {
         CompositeDistributionSummary ds = new CompositeDistributionSummary(id, description, quantiles, histogram);
         compositeMeters.add(ds);
         registries.forEach(ds::add);

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeTimer.java
Patch:
@@ -27,11 +27,11 @@
 
 public class CompositeTimer extends AbstractTimer implements CompositeMeter {
     private final Quantiles quantiles;
-    private final Histogram histogram;
+    private final Histogram.Builder<?> histogram;
 
     private final Map<MeterRegistry, Timer> timers = Collections.synchronizedMap(new LinkedHashMap<>());
 
-    CompositeTimer(Meter.Id id, String description, Quantiles quantiles, Histogram histogram, Clock clock) {
+    CompositeTimer(Meter.Id id, String description, Quantiles quantiles, Histogram.Builder<?> histogram, Clock clock) {
         super(id, description, clock);
         this.quantiles = quantiles;
         this.histogram = histogram;

File: micrometer-core/src/samples/java/io/micrometer/core/samples/HistogramSample.java
Patch:
@@ -19,9 +19,10 @@
 import cern.jet.random.engine.MersenneTwister64;
 import cern.jet.random.engine.RandomEngine;
 import io.micrometer.core.instrument.DistributionSummary;
-import io.micrometer.prometheus.PrometheusMeterRegistry;
+import io.micrometer.core.instrument.stats.hist.Histogram;
 import io.micrometer.core.instrument.stats.quantile.CKMSQuantiles;
 import io.micrometer.core.samples.utils.SampleRegistries;
+import io.micrometer.prometheus.PrometheusMeterRegistry;
 
 /**
  * Demonstrates how a histogram can also contain quantiles.
@@ -36,7 +37,7 @@ public static void main(String[] args) throws InterruptedException {
         Normal dist = new Normal(100, 50, r);
 
         DistributionSummary hist = registry.summaryBuilder("hist")
-                .histogram(registry.histogram().cumulative().linear(0, 10, 20))
+                .histogram(Histogram.linear(0, 10, 20))
                 .quantiles(CKMSQuantiles
                         .quantile(0.95, 0.01)
                         .quantile(0.5, 0.05)

File: micrometer-core/src/test/java/io/micrometer/core/instrument/CounterTest.java
Patch:
@@ -61,7 +61,8 @@ void incrementAmount(MeterRegistry registry) {
     @ParameterizedTest
     @ArgumentsSource(MeterRegistriesProvider.class)
     void functionTrackingCounter(MeterRegistry registry) {
-        AtomicLong n = registry.more().counter("tracking", emptyList(), new AtomicLong(0));
+        AtomicLong n = new AtomicLong(0);
+        registry.more().counter("tracking", emptyList(), n);
         n.incrementAndGet();
 
         clock(registry).addAndGet(1, TimeUnit.SECONDS);

File: micrometer-core/src/main/java/io/micrometer/core/instrument/dropwizard/DropwizardTimer.java
Patch:
@@ -19,6 +19,7 @@
 import io.micrometer.core.instrument.AbstractTimer;
 import io.micrometer.core.instrument.Clock;
 import io.micrometer.core.instrument.Meter;
+import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.util.TimeUtils;
 
 import java.util.concurrent.TimeUnit;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/simple/SimpleTimer.java
Patch:
@@ -18,6 +18,7 @@
 import io.micrometer.core.instrument.AbstractTimer;
 import io.micrometer.core.instrument.Clock;
 import io.micrometer.core.instrument.Meter;
+import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.util.TimeUtils;
 
 import java.util.concurrent.TimeUnit;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/spectator/SpectatorMeterRegistry.java
Patch:
@@ -68,7 +68,7 @@ protected io.micrometer.core.instrument.Timer newTimer(Meter.Id id, String descr
         registerQuantilesGaugeIfNecessary(id, quantiles, t -> t / 1.0e6);
         registerHistogramCounterIfNecessary(id, histogram);
         com.netflix.spectator.api.Timer timer = registry.timer(id.getConventionName(), toSpectatorTags(id.getConventionTags()));
-        return new SpectatorTimer(id, description, timer, quantiles, config().clock());
+        return new SpectatorTimer(id, description, timer, quantiles, config());
     }
 
     @Override
@@ -82,7 +82,7 @@ protected <T> io.micrometer.core.instrument.Gauge newGauge(Meter.Id id, String d
     private void registerHistogramCounterIfNecessary(Meter.Id id, Histogram<?> histogram) {
         if(histogram != null) {
             for (Bucket<?> bucket : histogram.getBuckets()) {
-                more().counter(id.getName(), Tags.concat(id.getTags(), "bucket", bucket.toString(), "statistic", "histogram"),
+                more().counter(id.getName(), Tags.concat(id.getTags(), "bucket", bucket.toString()),
                     bucket, Bucket::getValue);
             }
         }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/stats/hist/Bucket.java
Patch:
@@ -53,7 +53,7 @@ public Bucket<T> increment() {
         return this;
     }
 
-    public double getValue() {
-        return value.doubleValue();
+    public long getValue() {
+        return value.longValue();
     }
 }

File: starter/micrometer-prometheus-starter/src/main/java/io/micrometer/prometheus/PrometheusMeterRegistry.java
Patch:
@@ -33,6 +33,7 @@
 import java.lang.ref.WeakReference;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
+import java.util.concurrent.TimeUnit;
 import java.util.function.Function;
 import java.util.function.ToDoubleFunction;
 import java.util.stream.Collectors;
@@ -56,6 +57,7 @@ public PrometheusMeterRegistry(CollectorRegistry registry, Clock clock) {
         super(clock);
         this.registry = registry;
         this.config().namingConvention(new PrometheusNamingConvention());
+        this.config().baseTimeUnit(TimeUnit.SECONDS);
     }
 
     /**
@@ -94,7 +96,7 @@ public DistributionSummary newDistributionSummary(Meter.Id id, String descriptio
     protected io.micrometer.core.instrument.Timer newTimer(Meter.Id id, String description, Histogram<?> histogram, Quantiles quantiles) {
         final CustomPrometheusSummary summary = collectorByName(CustomPrometheusSummary.class, id.getConventionName(),
             n -> new CustomPrometheusSummary(id, description).register(registry));
-        return new PrometheusTimer(id, description, summary.child(id.getConventionTags(), quantiles, histogram), config().clock());
+        return new PrometheusTimer(id, description, summary.child(id.getConventionTags(), quantiles, histogram), config());
     }
 
     @SuppressWarnings("unchecked")

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/web/MetricsRestTemplateConfiguration.java
Patch:
@@ -16,6 +16,7 @@
 package io.micrometer.spring.web;
 
 import io.micrometer.core.instrument.MeterRegistry;
+import io.micrometer.spring.MetricsConfigurationProperties;
 import org.springframework.beans.BeansException;
 import org.springframework.beans.factory.config.BeanPostProcessor;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
@@ -47,9 +48,8 @@ RestTemplateTagConfigurer restTemplateTagConfigurer() {
     @Bean
     MetricsRestTemplateInterceptor clientHttpRequestInterceptor(MeterRegistry meterRegistry,
                                                                 RestTemplateTagConfigurer restTemplateTagConfigurer,
-                                                                Environment environment) {
-        return new MetricsRestTemplateInterceptor(meterRegistry, restTemplateTagConfigurer,
-                environment.getProperty("spring.metrics.web.client_requests.name", "http.client.requests"));
+                                                                MetricsConfigurationProperties properties) {
+        return new MetricsRestTemplateInterceptor(meterRegistry, restTemplateTagConfigurer, properties);
     }
 
     @Bean

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/web/MetricsRestTemplateInterceptor.java
Patch:
@@ -16,6 +16,7 @@
 package io.micrometer.spring.web;
 
 import io.micrometer.core.instrument.MeterRegistry;
+import io.micrometer.spring.MetricsConfigurationProperties;
 import org.springframework.http.HttpRequest;
 import org.springframework.http.client.ClientHttpRequestExecution;
 import org.springframework.http.client.ClientHttpRequestInterceptor;
@@ -36,10 +37,10 @@ public class MetricsRestTemplateInterceptor implements ClientHttpRequestIntercep
 
     public MetricsRestTemplateInterceptor(MeterRegistry meterRegistry,
                                           RestTemplateTagConfigurer tagProvider,
-                                          String metricName) {
+                                          MetricsConfigurationProperties properties) {
         this.tagProvider = tagProvider;
         this.meterRegistry = meterRegistry;
-        this.metricName = metricName;
+        this.metricName = properties.getWeb().getClientRequestsName();
     }
 
     @Override

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/web/MetricsRestTemplateInterceptorTest.java
Patch:
@@ -17,6 +17,7 @@
 
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
+import io.micrometer.spring.MetricsConfigurationProperties;
 import org.junit.Test;
 import org.springframework.http.HttpMethod;
 import org.springframework.http.MediaType;
@@ -40,7 +41,7 @@ public void interceptRestTemplate() {
         RestTemplate restTemplate = new RestTemplate();
         restTemplate.setInterceptors(singletonList(new MetricsRestTemplateInterceptor(
                 registry, new RestTemplateTagConfigurer(),
-                "http.client.requests"
+                new MetricsConfigurationProperties()
         )));
 
         MockRestServiceServer mockServer = MockRestServiceServer.createServer(restTemplate);

File: micrometer-core/src/main/java/io/micrometer/core/instrument/AbstractTimer.java
Patch:
@@ -24,8 +24,8 @@
 public abstract class AbstractTimer extends AbstractMeter implements Timer {
     protected Clock clock;
 
-    protected AbstractTimer(String name, Iterable<Tag> tags, String description, Clock clock) {
-        super(name, tags, description);
+    protected AbstractTimer(Meter.Id id, String description, Clock clock) {
+        super(id, description);
         this.clock = clock;
     }
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeTimer.java
Patch:
@@ -31,8 +31,8 @@ public class CompositeTimer extends AbstractTimer implements CompositeMeter {
 
     private final Map<MeterRegistry, Timer> timers = Collections.synchronizedMap(new LinkedHashMap<>());
 
-    CompositeTimer(String name, Iterable<Tag> tags, String description, Quantiles quantiles, Histogram histogram, Clock clock) {
-        super(name, tags, description, clock);
+    CompositeTimer(Meter.Id id, String description, Quantiles quantiles, Histogram histogram, Clock clock) {
+        super(id, description, clock);
         this.quantiles = quantiles;
         this.histogram = histogram;
     }
@@ -62,7 +62,7 @@ public double totalTime(TimeUnit unit) {
     public void add(MeterRegistry registry) {
         synchronized (timers) {
             timers.put(registry,
-                registry.timerBuilder(getName()).tags(getTags()).quantiles(quantiles).histogram(histogram).create());
+                registry.timerBuilder(getId().getName()).tags(getId().getTags()).quantiles(quantiles).histogram(histogram).create());
         }
     }
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/dropwizard/DropwizardCounter.java
Patch:
@@ -18,7 +18,6 @@
 import com.codahale.metrics.Meter;
 import io.micrometer.core.instrument.AbstractMeter;
 import io.micrometer.core.instrument.Counter;
-import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.util.MeterEquivalence;
 
 /**
@@ -27,8 +26,8 @@
 public class DropwizardCounter extends AbstractMeter implements Counter {
     private final com.codahale.metrics.Meter impl;
 
-    DropwizardCounter(String name, Iterable<Tag> tags, String description, Meter impl) {
-        super(name, tags, description);
+    DropwizardCounter(io.micrometer.core.instrument.Meter.Id id, String description, Meter impl) {
+        super(id, description);
         this.impl = impl;
     }
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/dropwizard/DropwizardDistributionSummary.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.micrometer.core.instrument.AbstractMeter;
 import io.micrometer.core.instrument.DistributionSummary;
-import io.micrometer.core.instrument.Tag;
+import io.micrometer.core.instrument.Meter;
 import io.micrometer.core.instrument.util.MeterEquivalence;
 
 import java.util.concurrent.atomic.DoubleAdder;
@@ -29,8 +29,8 @@ public class DropwizardDistributionSummary extends AbstractMeter implements Dist
     private final com.codahale.metrics.Histogram impl;
     private final DoubleAdder totalAmount = new DoubleAdder();
 
-    DropwizardDistributionSummary(String name, Iterable<Tag> tags, String description, com.codahale.metrics.Histogram impl) {
-        super(name, tags, description);
+    DropwizardDistributionSummary(Meter.Id id, String description, com.codahale.metrics.Histogram impl) {
+        super(id, description);
         this.impl = impl;
     }
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/dropwizard/DropwizardGauge.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.micrometer.core.instrument.AbstractMeter;
 import io.micrometer.core.instrument.Gauge;
-import io.micrometer.core.instrument.Tag;
+import io.micrometer.core.instrument.Meter;
 import io.micrometer.core.instrument.util.MeterEquivalence;
 
 /**
@@ -26,8 +26,8 @@
 public class DropwizardGauge extends AbstractMeter implements Gauge {
     private final com.codahale.metrics.Gauge<Double> impl;
 
-    DropwizardGauge(String name, Iterable<Tag> tags, String description, com.codahale.metrics.Gauge<Double> impl) {
-        super(name, tags, description);
+    DropwizardGauge(Meter.Id id, String description, com.codahale.metrics.Gauge<Double> impl) {
+        super(id, description);
         this.impl = impl;
     }
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/dropwizard/DropwizardTimer.java
Patch:
@@ -18,7 +18,7 @@
 import com.codahale.metrics.Timer;
 import io.micrometer.core.instrument.AbstractTimer;
 import io.micrometer.core.instrument.Clock;
-import io.micrometer.core.instrument.Tag;
+import io.micrometer.core.instrument.Meter;
 import io.micrometer.core.instrument.util.TimeUtils;
 
 import java.util.concurrent.TimeUnit;
@@ -28,8 +28,8 @@ public class DropwizardTimer extends AbstractTimer {
     private final Timer impl;
     private final AtomicLong totalTime = new AtomicLong(0);
 
-    DropwizardTimer(String name, Iterable<Tag> tags, String description, Timer impl, Clock clock) {
-        super(name, tags, description, clock);
+    DropwizardTimer(Meter.Id id, String description, Timer impl, Clock clock) {
+        super(id, description, clock);
         this.impl = impl;
     }
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/simple/SimpleCounter.java
Patch:
@@ -28,8 +28,8 @@
 public class SimpleCounter extends AbstractSimpleMeter implements Counter {
     private DoubleAdder count = new DoubleAdder();
 
-    public SimpleCounter(String name, Iterable<Tag> tags, String description) {
-        super(name, tags, description, Meter.Type.Counter);
+    public SimpleCounter(Meter.Id id, String description) {
+        super(id, description);
     }
 
     @Override

File: micrometer-core/src/main/java/io/micrometer/core/instrument/simple/SimpleDistributionSummary.java
Patch:
@@ -17,7 +17,6 @@
 
 import io.micrometer.core.instrument.DistributionSummary;
 import io.micrometer.core.instrument.Meter;
-import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.util.MeterEquivalence;
 
 import java.util.concurrent.atomic.DoubleAdder;
@@ -27,8 +26,8 @@ public class SimpleDistributionSummary extends AbstractSimpleMeter implements Di
     private LongAdder count = new LongAdder();
     private DoubleAdder amount = new DoubleAdder();
 
-    public SimpleDistributionSummary(String name, Iterable<Tag> tags, String description) {
-        super(name, tags, description, Meter.Type.DistributionSummary);
+    public SimpleDistributionSummary(Meter.Id id, String description) {
+        super(id, description);
     }
 
     @Override

File: micrometer-core/src/main/java/io/micrometer/core/instrument/simple/SimpleGauge.java
Patch:
@@ -17,7 +17,6 @@
 
 import io.micrometer.core.instrument.Gauge;
 import io.micrometer.core.instrument.Meter;
-import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.util.MeterEquivalence;
 
 import java.lang.ref.WeakReference;
@@ -27,8 +26,8 @@ public class SimpleGauge<T> extends AbstractSimpleMeter implements Gauge {
     private final WeakReference<T> ref;
     private final ToDoubleFunction<T> value;
 
-    public SimpleGauge(String name, Iterable<Tag> tags, String description, T obj, ToDoubleFunction<T> value) {
-        super(name, tags, description, Meter.Type.Gauge);
+    public SimpleGauge(Meter.Id id, String description, T obj, ToDoubleFunction<T> value) {
+        super(id, description);
         this.ref = new WeakReference<>(obj);
         this.value = value;
     }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/simple/SimpleLongTaskTimer.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.micrometer.core.instrument.Clock;
 import io.micrometer.core.instrument.LongTaskTimer;
-import io.micrometer.core.instrument.Tag;
+import io.micrometer.core.instrument.Meter;
 import io.micrometer.core.instrument.util.MeterEquivalence;
 
 import java.util.concurrent.ConcurrentHashMap;
@@ -29,8 +29,8 @@ public class SimpleLongTaskTimer extends AbstractSimpleMeter implements LongTask
     private final AtomicLong nextTask = new AtomicLong(0L);
     private final Clock clock;
 
-    public SimpleLongTaskTimer(String name, Iterable<Tag> tags, String description, Clock clock) {
-        super(name, tags, description, Type.LongTaskTimer);
+    public SimpleLongTaskTimer(Meter.Id id, String description, Clock clock) {
+        super(id, description);
         this.clock = clock;
     }
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/simple/SimpleTimer.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.micrometer.core.instrument.AbstractTimer;
 import io.micrometer.core.instrument.Clock;
-import io.micrometer.core.instrument.Tag;
+import io.micrometer.core.instrument.Meter;
 import io.micrometer.core.instrument.util.TimeUtils;
 
 import java.util.concurrent.TimeUnit;
@@ -30,8 +30,8 @@ public class SimpleTimer extends AbstractTimer {
     private LongAdder count = new LongAdder();
     private LongAdder totalTime = new LongAdder();
 
-    public SimpleTimer(String name, Iterable<Tag> tags, String description, Clock clock) {
-        super(name, tags, description, clock);
+    public SimpleTimer(Meter.Id id, String description, Clock clock) {
+        super(id, description, clock);
     }
 
     @Override

File: micrometer-core/src/main/java/io/micrometer/core/instrument/spectator/SpectatorTimer.java
Patch:
@@ -18,6 +18,7 @@
 import com.netflix.spectator.api.Timer;
 import io.micrometer.core.instrument.AbstractTimer;
 import io.micrometer.core.instrument.Clock;
+import io.micrometer.core.instrument.Meter;
 import io.micrometer.core.instrument.stats.quantile.Quantiles;
 import io.micrometer.core.instrument.util.TimeUtils;
 
@@ -27,8 +28,8 @@ public class SpectatorTimer extends AbstractTimer {
     private final com.netflix.spectator.api.Timer timer;
     private final Quantiles quantiles;
 
-    SpectatorTimer(Timer timer, String description, Quantiles quantiles, Clock clock) {
-        super(timer.id().name(), SpectatorUtils.tags(timer), description, clock);
+    SpectatorTimer(Meter.Id id, String description, Timer timer, Quantiles quantiles, Clock clock) {
+        super(id, description, clock);
         this.timer = timer;
         this.quantiles = quantiles;
     }

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/web/MetricsHandlerInterceptorTest.java
Patch:
@@ -135,9 +135,8 @@ public void regexBasedRequestMapping() throws Exception {
     public void recordQuantiles() throws Exception {
         mvc.perform(get("/api/c1/quantiles/10")).andExpect(status().isOk());
 
-        // TODO this is ugly, the way quantiles gauges are added to the meter map with a name normalized form
-        assertThat(registry.find("http_server_requests").tags("quantile", "0.5").gauge()).isNotEmpty();
-        assertThat(registry.find("http_server_requests").tags("quantile", "0.95").gauge()).isNotEmpty();
+        assertThat(registry.find("http.server.requests").tags("quantile", "0.5").gauge()).isNotEmpty();
+        assertThat(registry.find("http.server.requests").tags("quantile", "0.95").gauge()).isNotEmpty();
     }
 
     @SpringBootApplication(scanBasePackages = "isolated")

File: starter/micrometer-prometheus-starter/src/main/java/io/micrometer/prometheus/PrometheusCounter.java
Patch:
@@ -17,14 +17,14 @@
 
 import io.micrometer.core.instrument.AbstractMeter;
 import io.micrometer.core.instrument.Counter;
-import io.micrometer.core.instrument.Tag;
+import io.micrometer.core.instrument.Meter;
 import io.micrometer.core.instrument.util.MeterEquivalence;
 
 public class PrometheusCounter extends AbstractMeter implements Counter {
     private io.prometheus.client.Counter.Child counter;
 
-    PrometheusCounter(String name, Iterable<Tag> tags, String description, io.prometheus.client.Counter.Child counter) {
-        super(name, tags, description);
+    PrometheusCounter(Meter.Id id, String description, io.prometheus.client.Counter.Child counter) {
+        super(id, description);
         this.counter = counter;
     }
 

File: starter/micrometer-prometheus-starter/src/main/java/io/micrometer/prometheus/PrometheusGauge.java
Patch:
@@ -17,14 +17,14 @@
 
 import io.micrometer.core.instrument.AbstractMeter;
 import io.micrometer.core.instrument.Gauge;
-import io.micrometer.core.instrument.Tag;
+import io.micrometer.core.instrument.Meter;
 import io.micrometer.core.instrument.util.MeterEquivalence;
 
 public class PrometheusGauge extends AbstractMeter implements Gauge {
     private io.prometheus.client.Gauge.Child gauge;
 
-    PrometheusGauge(String name, Iterable<Tag> tags, String description, io.prometheus.client.Gauge.Child gauge) {
-        super(name, tags, description);
+    PrometheusGauge(Meter.Id id, String description, io.prometheus.client.Gauge.Child gauge) {
+        super(id, description);
         this.gauge = gauge;
     }
 

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/MetricsConfiguration.java
Patch:
@@ -93,7 +93,7 @@ public MeterRegistryConfigurationSupport(MeterRegistry registry,
             }
 
             if (config.getUseGlobalRegistry()) {
-                Metrics.globalRegistry.add(registry);
+                Metrics.addRegistry(registry);
             }
         }
     }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/NamingConvention.java
Patch:
@@ -32,6 +32,8 @@
  * @author Jon Schneider
  */
 public interface NamingConvention {
+    NamingConvention identity = (name, type, baseUnit) -> name;
+
     NamingConvention snakeCase = new NamingConvention() {
         @Override
         public String name(String name, Meter.Type type, String baseUnit) {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeMeterRegistry.java
Patch:
@@ -42,6 +42,7 @@ public CompositeMeterRegistry() {
 
     public CompositeMeterRegistry(Clock clock) {
         super(clock);
+        config().namingConvention(NamingConvention.identity);
     }
 
     @Override

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/export/atlas/AtlasConfigurationProperties.java
Patch:
@@ -80,6 +80,6 @@ public void setBatchSize(Integer batchSize) {
 
     @Override
     protected String prefix() {
-        return "metrics.atlas";
+        return "atlas";
     }
 }

File: micrometer-spring-legacy/src/samples/java/io/micrometer/spring/samples/components/PersonController.java
Patch:
@@ -27,7 +27,7 @@ public class PersonController {
     private List<String> people = Arrays.asList("mike", "suzy");
 
     @GetMapping("/api/people")
-    @Timed
+    @Timed(quantiles = 0.95)
     public List<String> allPeople() {
         return people;
     }

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/binder/DataSourceMetrics.java
Patch:
@@ -50,13 +50,13 @@ public DataSourceMetrics(DataSource dataSource, Collection<DataSourcePoolMetadat
     public void bindTo(MeterRegistry registry) {
         if (poolMetadata != null) {
             if(poolMetadata.getActive() != null)
-                registry.gauge(name  + "_active_connections", tags, poolMetadata, DataSourcePoolMetadata::getActive);
+                registry.gauge(name  + ".active.connections", tags, poolMetadata, DataSourcePoolMetadata::getActive);
 
             if(poolMetadata.getMax() != null)
-                registry.gauge(name + "_max_connections", tags, poolMetadata, DataSourcePoolMetadata::getMax);
+                registry.gauge(name + ".max.connections", tags, poolMetadata, DataSourcePoolMetadata::getMax);
 
             if(poolMetadata.getMin() != null)
-                registry.gauge(name + "_min_connections", tags, poolMetadata, DataSourcePoolMetadata::getMin);
+                registry.gauge(name + ".min.connections", tags, poolMetadata, DataSourcePoolMetadata::getMin);
         }
     }
 }

File: micrometer-spring-legacy/src/samples/java/io/micrometer/spring/samples/integration/SpringIntegrationApplication.java
Patch:
@@ -15,7 +15,6 @@
  */
 package io.micrometer.spring.samples.integration;
 
-import io.micrometer.spring.export.prometheus.EnablePrometheusMetrics;
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.context.ConfigurableApplicationContext;
@@ -31,7 +30,6 @@
 
 @Configuration
 @SpringBootApplication
-@EnablePrometheusMetrics
 @IntegrationComponentScan
 public class SpringIntegrationApplication {
 

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/MeterRegistryConfigurerTest.java
Patch:
@@ -25,6 +25,7 @@
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.context.annotation.Bean;
+import org.springframework.test.context.TestPropertySource;
 import org.springframework.test.context.junit4.SpringRunner;
 
 import java.util.Optional;
@@ -35,10 +36,11 @@
  * @author Jon Schneider
  */
 @RunWith(SpringRunner.class)
+@TestPropertySource(properties = "metrics.useGlobalRegistry=false")
 public class MeterRegistryConfigurerTest {
 
     @Autowired
-    SimpleMeterRegistry registry;
+    MeterRegistry registry;
 
     @Test
     public void commonTagsAreAppliedToAutoConfiguredBinders() {
@@ -47,7 +49,6 @@ public void commonTagsAreAppliedToAutoConfiguredBinders() {
     }
 
     @SpringBootApplication(scanBasePackages = "isolated")
-    @EnableMetrics
     static class MetricsApp {
         public static void main(String[] args) {
             SpringApplication.run(MetricsApp.class);

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/web/ControllerMetricsTest.java
Patch:
@@ -18,7 +18,6 @@
 import io.micrometer.core.annotation.Timed;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
-import io.micrometer.spring.EnableMetrics;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -29,6 +28,7 @@
 import org.springframework.http.HttpStatus;
 import org.springframework.http.ResponseEntity;
 import org.springframework.test.context.ContextConfiguration;
+import org.springframework.test.context.TestPropertySource;
 import org.springframework.test.context.junit4.SpringRunner;
 import org.springframework.test.web.servlet.MockMvc;
 import org.springframework.web.bind.annotation.*;
@@ -42,6 +42,7 @@
 @RunWith(SpringRunner.class)
 @ContextConfiguration(classes = ControllerMetricsTest.App.class)
 @WebMvcTest(ControllerMetricsTest.Controller1.class)
+@TestPropertySource(properties = "metrics.useGlobalRegistry=false")
 public class ControllerMetricsTest {
     @Autowired
     private MockMvc mvc;
@@ -64,7 +65,6 @@ public void rethrownExceptionIsRecordedInMetricTag() throws Exception {
     }
 
     @SpringBootApplication(scanBasePackages = "isolated")
-    @EnableMetrics
     @Import(Controller1.class)
     static class App {
         @Bean

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/web/RestTemplateUrlTemplateCapturingAspectTest.java
Patch:
@@ -17,7 +17,6 @@
 
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
-import io.micrometer.spring.EnableMetrics;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -26,6 +25,7 @@
 import org.springframework.context.annotation.Bean;
 import org.springframework.http.HttpMethod;
 import org.springframework.http.MediaType;
+import org.springframework.test.context.TestPropertySource;
 import org.springframework.test.context.junit4.SpringRunner;
 import org.springframework.test.web.client.ExpectedCount;
 import org.springframework.test.web.client.MockRestServiceServer;
@@ -41,6 +41,7 @@
 
 @RunWith(SpringRunner.class)
 @SpringBootTest
+@TestPropertySource(properties = "metrics.useGlobalRegistry=false")
 public class RestTemplateUrlTemplateCapturingAspectTest {
     @Autowired
     RestTemplate restTemplate;
@@ -70,7 +71,6 @@ public void urlCaptured() throws URISyntaxException {
     }
 
     @SpringBootApplication(scanBasePackages = "isolated")
-    @EnableMetrics
     static class MetricsApp {
         @Bean
         public MeterRegistry registry() {

File: starter/micrometer-influx-starter/src/main/java/io/micrometer/influx/InfluxRegistry.java
Patch:
@@ -49,7 +49,7 @@ public InfluxRegistry(InfluxConfig config, Clock clock) {
         super(config, clock);
 
         try {
-            String queryParams = "?consistency=" + config.consistency() + "&precision=ms&db=" + config.db();
+            String queryParams = "?consistency=" + config.consistency().toString().toLowerCase() + "&precision=ms&db=" + config.db();
             if(config.retentionPolicy() != null)
                 queryParams += "&rp=" + config.retentionPolicy();
             this.influxEndpoint = URI.create(config.uri() + queryParams).toURL();

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Counter.java
Patch:
@@ -57,6 +57,8 @@ default Builder tags(String... tags) {
             return tags(Tags.zip(tags));
         }
 
+        Builder baseUnit(String unit);
+
         Builder description(String description);
 
         Counter create();

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Gauge.java
Patch:
@@ -43,6 +43,8 @@ default Builder tags(String... tags) {
 
         Builder description(String description);
 
+        Builder baseUnit(String unit);
+
         Gauge create();
     }
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/ProcessorMetrics.java
Patch:
@@ -27,7 +27,7 @@ public class ProcessorMetrics implements MeterBinder {
     @Override
     public void bindTo(MeterRegistry registry) {
         Runtime runtime = Runtime.getRuntime();
-        registry.gauge("cpu.total", runtime, Runtime::availableProcessors);
+        registry.gauge("cpu", runtime, Runtime::availableProcessors);
 
         OperatingSystemMXBean operatingSystemBean = ManagementFactory.getOperatingSystemMXBean();
         if(operatingSystemBean != null && operatingSystemBean.getSystemLoadAverage() >= 0) {

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/MetricsConfiguration.java
Patch:
@@ -18,6 +18,9 @@
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.spring.binder.SpringIntegrationMetrics;
 import io.micrometer.spring.scheduling.MetricsSchedulingAspect;
+import io.micrometer.spring.web.MetricsServletRequestConfiguration;
+import io.micrometer.spring.web.RestTemplateMetricsConfiguration;
+import io.micrometer.spring.web.RestTemplateUrlTemplateCapturingAspect;
 import org.springframework.boot.autoconfigure.condition.*;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/web/MetricsServletRequestConfiguration.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.spring;
+package io.micrometer.spring.web;
 
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.spring.web.ControllerMetrics;
@@ -33,7 +33,7 @@
  * @author Jon Schneider
  */
 @Configuration
-class MetricsServletRequestConfiguration extends WebMvcConfigurerAdapter {
+public class MetricsServletRequestConfiguration extends WebMvcConfigurerAdapter {
     @Bean
     @ConditionalOnMissingBean(WebmvcTagConfigurer.class)
     WebmvcTagConfigurer webmvcTagConfigurer() {

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/web/RestTemplateMetricsConfiguration.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.spring;
+package io.micrometer.spring.web;
 
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.spring.web.MetricsRestTemplateInterceptor;
@@ -38,7 +38,7 @@
  */
 @Configuration
 @ConditionalOnClass(name = "org.springframework.web.client.RestTemplate")
-class RestTemplateMetricsConfiguration {
+public class RestTemplateMetricsConfiguration {
     @Bean
     @ConditionalOnMissingBean(RestTemplateTagConfigurer.class)
     RestTemplateTagConfigurer restTemplateTagConfigurer() {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/DistributionSummary.java
Patch:
@@ -56,6 +56,8 @@ default Builder tags(String... tags) {
 
         Builder description(String description);
 
+        Builder baseUnit(String unit);
+
         DistributionSummary create();
     }
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/datadog/DatadogNamingConvention.java
Patch:
@@ -29,8 +29,8 @@ public class DatadogNamingConvention implements NamingConvention {
      * all non-alphanumeric characters with '_'.
      */
     @Override
-    public String name(String name, Meter.Type type) {
-        String sanitized = NamingConvention.camelCase.name(name, type);
+    public String name(String name, Meter.Type type, String baseUnit) {
+        String sanitized = NamingConvention.camelCase.name(name, type, baseUnit);
 
         // Metrics that don't start with a letter get dropped on the floor by the Datadog publish API,
         // so we will prepend them with 'm_'.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/graphite/GraphiteNamingConvention.java
Patch:
@@ -29,7 +29,7 @@ public class GraphiteNamingConvention implements NamingConvention {
     private static final Pattern blacklistedChars = Pattern.compile("[{}(),=\\[\\]/]");
 
     @Override
-    public String name(String name, Meter.Type type) {
+    public String name(String name, Meter.Type type, String baseUnit) {
         return format(name);
     }
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/influx/InfluxNamingConvention.java
Patch:
@@ -23,7 +23,7 @@
  */
 public class InfluxNamingConvention implements NamingConvention {
     @Override
-    public String name(String name, Meter.Type type) {
+    public String name(String name, Meter.Type type, String baseUnit) {
         return format(name.replace("=", "_"));
     }
 

File: micrometer-core/src/test/java/io/micrometer/core/instrument/datadog/DatadogNamingConventionTest.java
Patch:
@@ -25,7 +25,7 @@ class DatadogNamingConventionTest {
 
     @Test
     void nameStartsWithLetter() {
-        assertThat(convention.name("123", Meter.Type.Gauge)).isEqualTo("m_123");
+        assertThat(convention.name("123", Meter.Type.Gauge, null)).isEqualTo("m_123");
     }
 
     @Test
@@ -35,6 +35,6 @@ void tagKeyStartsWithLetter() {
 
     @Test
     void dotNotationIsConvertedToCamelCase() {
-        assertThat(convention.name("gauge.size", Meter.Type.Gauge)).isEqualTo("gaugeSize");
+        assertThat(convention.name("gauge.size", Meter.Type.Gauge, null)).isEqualTo("gaugeSize");
     }
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/MeterRegistry.java
Patch:
@@ -15,15 +15,13 @@
  */
 package io.micrometer.core.instrument;
 
-import io.micrometer.core.instrument.composite.CompositeMeterRegistry;
-
 import java.util.Collection;
 import java.util.Map;
 import java.util.Optional;
 import java.util.function.ToDoubleFunction;
 
-import static java.util.Collections.emptyList;
 import static io.micrometer.core.instrument.Tags.zip;
+import static java.util.Collections.emptyList;
 
 /**
  * Creates and manages your application's set of meters. Exporters use the meter registry to iterate
@@ -76,6 +74,8 @@ default Search tags(String... tags) {
 
         Search tags(Iterable<Tag> tags);
 
+        Search value(Statistic statistic, double value);
+
         Optional<Timer> timer();
         Optional<Counter> counter();
         Optional<Gauge> gauge();

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/JvmMemoryMetrics.java
Patch:
@@ -15,8 +15,8 @@
  */
 package io.micrometer.core.instrument.binder;
 
-import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.MeterRegistry;
+import io.micrometer.core.instrument.Tag;
 
 import java.lang.management.BufferPoolMXBean;
 import java.lang.management.ManagementFactory;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/LogbackMetrics.java
Patch:
@@ -20,10 +20,10 @@
 import ch.qos.logback.classic.LoggerContext;
 import ch.qos.logback.classic.turbo.TurboFilter;
 import ch.qos.logback.core.spi.FilterReply;
+import io.micrometer.core.instrument.Counter;
 import io.micrometer.core.instrument.MeterRegistry;
 import org.slf4j.LoggerFactory;
 import org.slf4j.Marker;
-import io.micrometer.core.instrument.Counter;
 
 public class LogbackMetrics implements MeterBinder {
     @Override

File: micrometer-core/src/main/java/io/micrometer/core/instrument/graphite/GraphiteConfig.java
Patch:
@@ -15,8 +15,6 @@
  */
 package io.micrometer.core.instrument.graphite;
 
-import info.ganglia.gmetric4j.gmetric.GMetric;
-
 import java.time.Duration;
 import java.util.concurrent.TimeUnit;
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/lazy/LazyCounter.java
Patch:
@@ -16,10 +16,8 @@
 package io.micrometer.core.instrument.lazy;
 
 import io.micrometer.core.instrument.Counter;
-import io.micrometer.core.instrument.Measurement;
 import io.micrometer.core.instrument.Tag;
 
-import java.util.List;
 import java.util.function.Supplier;
 
 public final class LazyCounter implements Counter {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/prometheus/internal/CustomPrometheusLongTaskTimer.java
Patch:
@@ -15,9 +15,9 @@
  */
 package io.micrometer.core.instrument.prometheus.internal;
 
+import io.micrometer.core.instrument.Clock;
 import io.micrometer.core.instrument.Tag;
 import io.prometheus.client.Collector;
-import io.micrometer.core.instrument.Clock;
 
 import java.util.Collection;
 import java.util.Collections;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/spectator/SpectatorGauge.java
Patch:
@@ -16,8 +16,8 @@
 package io.micrometer.core.instrument.spectator;
 
 import io.micrometer.core.instrument.Gauge;
-import io.micrometer.core.instrument.util.MeterEquivalence;
 import io.micrometer.core.instrument.Tag;
+import io.micrometer.core.instrument.util.MeterEquivalence;
 
 public class SpectatorGauge implements Gauge {
     private com.netflix.spectator.api.Gauge gauge;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/util/HierarchicalNameMapper.java
Patch:
@@ -18,7 +18,6 @@
 import io.micrometer.core.instrument.Tag;
 
 import java.util.ArrayList;
-import java.util.Collection;
 import java.util.Comparator;
 import java.util.List;
 import java.util.stream.Collectors;

File: micrometer-core/src/test/java/io/micrometer/core/instrument/DistributionSummaryTest.java
Patch:
@@ -22,9 +22,7 @@
 import java.util.concurrent.TimeUnit;
 
 import static io.micrometer.core.instrument.MockClock.clock;
-import static org.junit.jupiter.api.Assertions.assertAll;
-import static org.junit.jupiter.api.Assertions.assertEquals;
-import static org.junit.jupiter.api.Assertions.assertTrue;
+import static org.junit.jupiter.api.Assertions.*;
 
 class DistributionSummaryTest {
 

File: micrometer-core/src/test/java/io/micrometer/core/instrument/MeterRegistriesProvider.java
Patch:
@@ -20,7 +20,6 @@
 import io.micrometer.core.instrument.composite.CompositeMeterRegistry;
 import io.micrometer.core.instrument.datadog.DatadogConfig;
 import io.micrometer.core.instrument.datadog.DatadogMeterRegistry;
-import io.micrometer.core.instrument.dropwizard.DropwizardMeterRegistry;
 import io.micrometer.core.instrument.graphite.GraphiteConfig;
 import io.micrometer.core.instrument.graphite.GraphiteMeterRegistry;
 import io.micrometer.core.instrument.influx.InfluxConfig;

File: micrometer-core/src/test/java/io/micrometer/core/instrument/MeterRegistryInjectionTest.java
Patch:
@@ -21,7 +21,6 @@
 import dagger.Component;
 import dagger.Module;
 import dagger.Provides;
-import io.micrometer.core.instrument.composite.CompositeMeterRegistry;
 import io.micrometer.core.instrument.prometheus.PrometheusMeterRegistry;
 import io.prometheus.client.CollectorRegistry;
 import org.junit.jupiter.api.Test;

File: micrometer-core/src/test/java/io/micrometer/core/instrument/MetricsTest.java
Patch:
@@ -36,7 +36,6 @@ void metricCanBeCreatedBeforeStaticRegistryIsConfigured() {
         Metrics.addRegistry(new SimpleMeterRegistry());
         counter.increment();
 
-        assertThat(Metrics.globalRegistry.find("counter").counter())
-            .hasValueSatisfying(c -> assertThat(c.count()).isEqualTo(1));
+        assertThat(Metrics.globalRegistry.find("counter").value(Statistic.Count, 1.0).counter()).isPresent();
     }
 }

File: micrometer-core/src/test/java/io/micrometer/core/instrument/TimerTest.java
Patch:
@@ -15,17 +15,17 @@
  */
 package io.micrometer.core.instrument;
 
+import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
 import org.junit.jupiter.api.DisplayName;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.params.ParameterizedTest;
 import org.junit.jupiter.params.provider.ArgumentsSource;
-import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
 
 import java.util.concurrent.TimeUnit;
 import java.util.function.Supplier;
 
-import static org.junit.jupiter.api.Assertions.*;
 import static io.micrometer.core.instrument.MockClock.clock;
+import static org.junit.jupiter.api.Assertions.*;
 
 class TimerTest {
 

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/ProcessorMetricsTest.java
Patch:
@@ -15,10 +15,8 @@
  */
 package io.micrometer.core.instrument.binder;
 
-import io.micrometer.core.instrument.Gauge;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
-import org.assertj.core.api.AssertionsForClassTypes;
 import org.junit.jupiter.api.Test;
 
 import static org.assertj.core.api.AssertionsForClassTypes.assertThat;

File: micrometer-core/src/test/java/io/micrometer/core/instrument/composite/CompositeMeterRegistryTest.java
Patch:
@@ -22,6 +22,7 @@
 
 import java.util.Optional;
 
+import static io.micrometer.core.instrument.Statistic.Count;
 import static org.assertj.core.api.Assertions.assertThat;
 
 /**
@@ -77,7 +78,7 @@ void metricBeforeRegistryAdd() {
         assertThat(compositeCounter.count()).isEqualTo(1);
 
         // only the increment AFTER simple is added to the composite is counted to it
-        assertThat(simple.find("counter").counter()).hasValueSatisfying(c -> assertThat(c.count()).isEqualTo(1));
+        assertThat(simple.find("counter").value(Count, 1.0).counter()).isPresent();
     }
 
     @DisplayName("metrics that are created after a registry is added to that registry")
@@ -87,6 +88,6 @@ void registryBeforeMetricAdd() {
         composite.add(simple);
         composite.counter("counter").increment();
 
-        assertThat(simple.find("counter").counter()).hasValueSatisfying(c -> assertThat(c.count()).isEqualTo(1));
+        assertThat(simple.find("counter").value(Count, 1.0).counter()).isPresent();
     }
 }

File: micrometer-core/src/test/java/io/micrometer/core/instrument/graphite/GraphiteNamingConventionTest.java
Patch:
@@ -20,7 +20,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-class GraphiteTagFormatterTest {
+class GraphiteNamingConventionTest {
     private GraphiteNamingConvention convention = new GraphiteNamingConvention();
 
     @Test

File: micrometer-core/src/test/java/io/micrometer/core/instrument/stats/hist/CumulativeHistogramTest.java
Patch:
@@ -19,9 +19,9 @@
 
 import java.util.concurrent.TimeUnit;
 
+import static io.micrometer.core.instrument.stats.hist.CumulativeHistogram.*;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.AssertionsForClassTypes.offset;
-import static io.micrometer.core.instrument.stats.hist.CumulativeHistogram.*;
 
 class CumulativeHistogramTest {
 

File: micrometer-core/src/test/java/io/micrometer/core/instrument/util/HierarchicalNameMapperTest.java
Patch:
@@ -16,7 +16,6 @@
 package io.micrometer.core.instrument.util;
 
 import io.micrometer.core.instrument.Tags;
-import io.micrometer.core.instrument.util.HierarchicalNameMapper;
 import org.junit.jupiter.api.Test;
 
 import static org.assertj.core.api.Assertions.assertThat;

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/RecommendedMeterBinders.java
Patch:
@@ -16,10 +16,10 @@
 package io.micrometer.spring;
 
 import io.micrometer.core.instrument.binder.JvmMemoryMetrics;
+import io.micrometer.core.instrument.binder.LogbackMetrics;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
-import io.micrometer.core.instrument.binder.LogbackMetrics;
 
 @Configuration
 class RecommendedMeterBinders {

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/export/jmx/EnableJmxMetrics.java
Patch:
@@ -16,7 +16,6 @@
 package io.micrometer.spring.export.jmx;
 
 import io.micrometer.spring.EnableMetrics;
-import io.micrometer.spring.export.graphite.GraphiteMetricsConfiguration;
 import org.springframework.context.annotation.Import;
 
 import java.lang.annotation.*;

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/scheduling/MetricsSchedulingAspect.java
Patch:
@@ -16,17 +16,17 @@
 package io.micrometer.spring.scheduling;
 
 import io.micrometer.core.annotation.Timed;
+import io.micrometer.core.instrument.LongTaskTimer;
+import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.Timer;
-import io.micrometer.core.instrument.util.AnnotationUtils;
 import io.micrometer.core.instrument.stats.quantile.WindowSketchQuantiles;
+import io.micrometer.core.instrument.util.AnnotationUtils;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.aspectj.lang.ProceedingJoinPoint;
 import org.aspectj.lang.annotation.Around;
 import org.aspectj.lang.annotation.Aspect;
 import org.aspectj.lang.reflect.MethodSignature;
-import io.micrometer.core.instrument.LongTaskTimer;
-import io.micrometer.core.instrument.MeterRegistry;
 
 import java.lang.reflect.Method;
 import java.util.concurrent.TimeUnit;

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/web/MetricsRestTemplateInterceptor.java
Patch:
@@ -15,11 +15,11 @@
  */
 package io.micrometer.spring.web;
 
+import io.micrometer.core.instrument.MeterRegistry;
 import org.springframework.http.HttpRequest;
 import org.springframework.http.client.ClientHttpRequestExecution;
 import org.springframework.http.client.ClientHttpRequestInterceptor;
 import org.springframework.http.client.ClientHttpResponse;
-import io.micrometer.core.instrument.MeterRegistry;
 
 import java.io.IOException;
 import java.util.concurrent.TimeUnit;

File: micrometer-spring-legacy/src/samples/java/io/micrometer/spring/samples/integration/SpringIntegrationApplication.java
Patch:
@@ -15,7 +15,6 @@
  */
 package io.micrometer.spring.samples.integration;
 
-import io.micrometer.spring.binder.SpringIntegrationMetrics;
 import io.micrometer.spring.export.prometheus.EnablePrometheusMetrics;
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
@@ -27,7 +26,6 @@
 import org.springframework.integration.annotation.MessagingGateway;
 import org.springframework.integration.dsl.IntegrationFlow;
 import org.springframework.integration.dsl.support.Transformers;
-import org.springframework.integration.support.management.IntegrationManagementConfigurer;
 import org.springframework.integration.ws.SimpleWebServiceOutboundGateway;
 import org.springframework.integration.ws.WebServiceHeaders;
 

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/web/MetricsRestTemplateInterceptorTest.java
Patch:
@@ -16,7 +16,6 @@
 package io.micrometer.spring.web;
 
 import io.micrometer.core.instrument.MeterRegistry;
-import io.micrometer.core.instrument.Timer;
 import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
 import org.junit.Test;
 import org.springframework.http.HttpMethod;
@@ -26,6 +25,7 @@
 import org.springframework.test.web.client.response.MockRestResponseCreators;
 import org.springframework.web.client.RestTemplate;
 
+import static io.micrometer.core.instrument.Statistic.Count;
 import static java.util.Collections.singletonList;
 import static org.assertj.core.api.Assertions.assertThat;
 
@@ -51,8 +51,8 @@ registry, new RestTemplateTagConfigurer(),
         String s = restTemplate.getForObject("/test/{id}", String.class, 123);
 
         // the uri requires AOP to determine
-        assertThat(registry.find("http.client.requests").tags("method", "GET", "uri", "none", "status", "200").timer())
-                .hasValueSatisfying(t -> assertThat(t.count()).isEqualTo(1));
+        assertThat(registry.find("http.client.requests").tags("method", "GET", "uri", "none", "status", "200")
+            .value(Count, 1.0).timer()).isPresent();
 
         assertThat(s).isEqualTo("OK");
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/AbstractTimer.java
Patch:
@@ -24,8 +24,8 @@
 public abstract class AbstractTimer extends AbstractMeter implements Timer {
     protected Clock clock;
 
-    protected AbstractTimer(String name, Iterable<Tag> tags, Clock clock) {
-        super(name, tags);
+    protected AbstractTimer(String name, Iterable<Tag> tags, String description, Clock clock) {
+        super(name, tags, description);
         this.clock = clock;
     }
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Counter.java
Patch:
@@ -57,6 +57,8 @@ default Builder tags(String... tags) {
             return tags(Tags.zip(tags));
         }
 
+        Builder description(String description);
+
         Counter create();
     }
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/DistributionSummary.java
Patch:
@@ -54,6 +54,8 @@ default Builder tags(String... tags) {
             return tags(Tags.zip(tags));
         }
 
+        Builder description(String description);
+
         DistributionSummary create();
     }
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Gauge.java
Patch:
@@ -41,6 +41,8 @@ default Builder tags(String... tags) {
             return tags(Tags.zip(tags));
         }
 
+        Builder description(String description);
+
         Gauge create();
     }
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/LongTaskTimer.java
Patch:
@@ -133,6 +133,8 @@ default Builder tags(String... tags) {
             return tags(Tags.zip(tags));
         }
 
+        Builder description(String description);
+
         LongTaskTimer create();
     }
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Meter.java
Patch:
@@ -23,6 +23,8 @@ public interface Meter {
 
     Iterable<Tag> getTags();
 
+    String getDescription();
+
     /**
      * Get a set of measurements. Should always return
      * the same number of measurements and in the same order, regardless of the
@@ -33,7 +35,7 @@ public interface Meter {
     default Type getType() {
         return Type.Other;
     }
-    
+
     /**
      * Custom meters may emit metrics like one of these types without implementing
      * the corresponding interface. For example, a heisen-counter like structure

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Timer.java
Patch:
@@ -119,6 +119,8 @@ default Builder tags(String... tags) {
             return tags(Tags.zip(tags));
         }
 
+        Builder description(String description);
+
         Timer create();
     }
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeCounter.java
Patch:
@@ -28,8 +28,8 @@
 class CompositeCounter extends AbstractMeter implements Counter, CompositeMeter {
     private final Map<MeterRegistry, Counter> counters = Collections.synchronizedMap(new LinkedHashMap<>());
 
-    CompositeCounter(String name, Iterable<Tag> tags) {
-        super(name, tags);
+    CompositeCounter(String name, Iterable<Tag> tags, String description) {
+        super(name, tags, description);
     }
 
     @Override

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeDistributionSummary.java
Patch:
@@ -34,8 +34,8 @@ public class CompositeDistributionSummary extends AbstractMeter implements Distr
     private final Map<MeterRegistry, DistributionSummary> distributionSummaries =
         Collections.synchronizedMap(new LinkedHashMap<>());
 
-    CompositeDistributionSummary(String name, Iterable<Tag> tags, Quantiles quantiles, Histogram histogram) {
-        super(name, tags);
+    CompositeDistributionSummary(String name, Iterable<Tag> tags, String description, Quantiles quantiles, Histogram histogram) {
+        super(name, tags, description);
         this.quantiles = quantiles;
         this.histogram = histogram;
     }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeGauge.java
Patch:
@@ -33,8 +33,8 @@ public class CompositeGauge<T> extends AbstractMeter implements Gauge, Composite
 
     private final Map<MeterRegistry, Gauge> gauges = Collections.synchronizedMap(new LinkedHashMap<>());
 
-    CompositeGauge(String name, Iterable<Tag> tags, T obj, ToDoubleFunction<T> f) {
-        super(name, tags);
+    CompositeGauge(String name, Iterable<Tag> tags, String description, T obj, ToDoubleFunction<T> f) {
+        super(name, tags, description);
         this.ref = new WeakReference<>(obj);
         this.f = f;
     }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeLongTaskTimer.java
Patch:
@@ -28,8 +28,8 @@
 public class CompositeLongTaskTimer extends AbstractMeter implements LongTaskTimer, CompositeMeter {
     private final Map<MeterRegistry, LongTaskTimer> timers = Collections.synchronizedMap(new LinkedHashMap<>());
 
-    CompositeLongTaskTimer(String name, Iterable<Tag> tags) {
-        super(name, tags);
+    CompositeLongTaskTimer(String name, Iterable<Tag> tags, String description) {
+        super(name, tags, description);
     }
 
     @Override

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeTimer.java
Patch:
@@ -31,8 +31,8 @@ public class CompositeTimer extends AbstractTimer implements CompositeMeter {
 
     private final Map<MeterRegistry, Timer> timers = Collections.synchronizedMap(new LinkedHashMap<>());
 
-    CompositeTimer(String name, Iterable<Tag> tags, Quantiles quantiles, Histogram histogram, Clock clock) {
-        super(name, tags, clock);
+    CompositeTimer(String name, Iterable<Tag> tags, String description, Quantiles quantiles, Histogram histogram, Clock clock) {
+        super(name, tags, description, clock);
         this.quantiles = quantiles;
         this.histogram = histogram;
     }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/dropwizard/DropwizardCounter.java
Patch:
@@ -27,8 +27,8 @@
 public class DropwizardCounter extends AbstractMeter implements Counter {
     private final com.codahale.metrics.Meter impl;
 
-    DropwizardCounter(String name, Iterable<Tag> tags, Meter impl) {
-        super(name, tags);
+    DropwizardCounter(String name, Iterable<Tag> tags, String description, Meter impl) {
+        super(name, tags, description);
         this.impl = impl;
     }
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/dropwizard/DropwizardDistributionSummary.java
Patch:
@@ -29,8 +29,8 @@ public class DropwizardDistributionSummary extends AbstractMeter implements Dist
     private final com.codahale.metrics.Histogram impl;
     private final DoubleAdder totalAmount = new DoubleAdder();
 
-    DropwizardDistributionSummary(String name, Iterable<Tag> tags, com.codahale.metrics.Histogram impl) {
-        super(name, tags);
+    DropwizardDistributionSummary(String name, Iterable<Tag> tags, String description, com.codahale.metrics.Histogram impl) {
+        super(name, tags, description);
         this.impl = impl;
     }
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/dropwizard/DropwizardGauge.java
Patch:
@@ -26,8 +26,8 @@
 public class DropwizardGauge extends AbstractMeter implements Gauge {
     private final com.codahale.metrics.Gauge<Double> impl;
 
-    DropwizardGauge(String name, Iterable<Tag> tags, com.codahale.metrics.Gauge<Double> impl) {
-        super(name, tags);
+    DropwizardGauge(String name, Iterable<Tag> tags, String description, com.codahale.metrics.Gauge<Double> impl) {
+        super(name, tags, description);
         this.impl = impl;
     }
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/dropwizard/DropwizardTimer.java
Patch:
@@ -28,8 +28,8 @@ public class DropwizardTimer extends AbstractTimer {
     private final Timer impl;
     private final AtomicLong totalTime = new AtomicLong(0);
 
-    DropwizardTimer(String name, Iterable<Tag> tags, Timer impl, Clock clock) {
-        super(name, tags, clock);
+    DropwizardTimer(String name, Iterable<Tag> tags, String description, Timer impl, Clock clock) {
+        super(name, tags, description, clock);
         this.impl = impl;
     }
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/prometheus/PrometheusCounter.java
Patch:
@@ -23,8 +23,8 @@
 public class PrometheusCounter extends AbstractMeter implements Counter {
     private io.prometheus.client.Counter.Child counter;
 
-    PrometheusCounter(String name, Iterable<Tag> tags, io.prometheus.client.Counter.Child counter) {
-        super(name, tags);
+    PrometheusCounter(String name, Iterable<Tag> tags, String description, io.prometheus.client.Counter.Child counter) {
+        super(name, tags, description);
         this.counter = counter;
     }
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/prometheus/PrometheusGauge.java
Patch:
@@ -23,8 +23,8 @@
 public class PrometheusGauge extends AbstractMeter implements Gauge {
     private io.prometheus.client.Gauge.Child gauge;
 
-    PrometheusGauge(String name, Iterable<Tag> tags, io.prometheus.client.Gauge.Child gauge) {
-        super(name, tags);
+    PrometheusGauge(String name, Iterable<Tag> tags, String description, io.prometheus.client.Gauge.Child gauge) {
+        super(name, tags, description);
         this.gauge = gauge;
     }
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/prometheus/PrometheusLongTaskTimer.java
Patch:
@@ -24,8 +24,8 @@
 public class PrometheusLongTaskTimer extends AbstractMeter implements LongTaskTimer {
     private final CustomPrometheusLongTaskTimer.Child timer;
 
-    PrometheusLongTaskTimer(String name, Iterable<Tag> tags, CustomPrometheusLongTaskTimer.Child timer) {
-        super(name, tags);
+    PrometheusLongTaskTimer(String name, Iterable<Tag> tags, String description, CustomPrometheusLongTaskTimer.Child timer) {
+        super(name, tags, description);
         this.timer = timer;
     }
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/prometheus/PrometheusTimer.java
Patch:
@@ -26,8 +26,8 @@
 public class PrometheusTimer extends AbstractTimer {
     private CustomPrometheusSummary.Child summary;
 
-    PrometheusTimer(String name, Iterable<Tag> tags, CustomPrometheusSummary.Child summary, Clock clock) {
-        super(name, tags, clock);
+    PrometheusTimer(String name, Iterable<Tag> tags, String description, CustomPrometheusSummary.Child summary, Clock clock) {
+        super(name, tags, description, clock);
         this.summary = summary;
     }
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/simple/AbstractSimpleMeter.java
Patch:
@@ -21,7 +21,7 @@
 import io.micrometer.core.instrument.Tags;
 
 abstract class AbstractSimpleMeter extends AbstractMeter {
-    AbstractSimpleMeter(String name, Iterable<Tag> tags, Meter.Type type) {
-        super(name, Tags.concat(tags, "simple.type", type.toString().toLowerCase()));
+    AbstractSimpleMeter(String name, Iterable<Tag> tags, String description, Meter.Type type) {
+        super(name, Tags.concat(tags, "simple.type", type.toString().toLowerCase()), description);
     }
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/simple/SimpleCounter.java
Patch:
@@ -28,8 +28,8 @@
 public class SimpleCounter extends AbstractSimpleMeter implements Counter {
     private DoubleAdder count = new DoubleAdder();
 
-    public SimpleCounter(String name, Iterable<Tag> tags) {
-        super(name, tags, Meter.Type.Counter);
+    public SimpleCounter(String name, Iterable<Tag> tags, String description) {
+        super(name, tags, description, Meter.Type.Counter);
     }
 
     @Override

File: micrometer-core/src/main/java/io/micrometer/core/instrument/simple/SimpleDistributionSummary.java
Patch:
@@ -27,8 +27,8 @@ public class SimpleDistributionSummary extends AbstractSimpleMeter implements Di
     private LongAdder count = new LongAdder();
     private DoubleAdder amount = new DoubleAdder();
 
-    public SimpleDistributionSummary(String name, Iterable<Tag> tags) {
-        super(name, tags, Meter.Type.DistributionSummary);
+    public SimpleDistributionSummary(String name, Iterable<Tag> tags, String description) {
+        super(name, tags, description, Meter.Type.DistributionSummary);
     }
 
     @Override

File: micrometer-core/src/main/java/io/micrometer/core/instrument/simple/SimpleGauge.java
Patch:
@@ -27,8 +27,8 @@ public class SimpleGauge<T> extends AbstractSimpleMeter implements Gauge {
     private final WeakReference<T> ref;
     private final ToDoubleFunction<T> value;
 
-    public SimpleGauge(String name, Iterable<Tag> tags, T obj, ToDoubleFunction<T> value) {
-        super(name, tags, Meter.Type.Gauge);
+    public SimpleGauge(String name, Iterable<Tag> tags, String description, T obj, ToDoubleFunction<T> value) {
+        super(name, tags, description, Meter.Type.Gauge);
         this.ref = new WeakReference<>(obj);
         this.value = value;
     }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/simple/SimpleLongTaskTimer.java
Patch:
@@ -29,8 +29,8 @@ public class SimpleLongTaskTimer extends AbstractSimpleMeter implements LongTask
     private final AtomicLong nextTask = new AtomicLong(0L);
     private final Clock clock;
 
-    public SimpleLongTaskTimer(String name, Iterable<Tag> tags, Clock clock) {
-        super(name, tags, Type.LongTaskTimer);
+    public SimpleLongTaskTimer(String name, Iterable<Tag> tags, String description, Clock clock) {
+        super(name, tags, description, Type.LongTaskTimer);
         this.clock = clock;
     }
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/simple/SimpleTimer.java
Patch:
@@ -30,8 +30,8 @@ public class SimpleTimer extends AbstractTimer {
     private LongAdder count = new LongAdder();
     private LongAdder totalTime = new LongAdder();
 
-    public SimpleTimer(String name, Iterable<Tag> tags, Clock clock) {
-        super(name, tags, clock);
+    public SimpleTimer(String name, Iterable<Tag> tags, String description, Clock clock) {
+        super(name, tags, description, clock);
     }
 
     @Override

File: micrometer-core/src/main/java/io/micrometer/core/instrument/spectator/SpectatorTimer.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.micrometer.core.instrument.spectator;
 
+import com.netflix.spectator.api.Timer;
 import io.micrometer.core.instrument.AbstractTimer;
 import io.micrometer.core.instrument.Clock;
 import io.micrometer.core.instrument.stats.quantile.Quantiles;
@@ -26,8 +27,8 @@ public class SpectatorTimer extends AbstractTimer {
     private final com.netflix.spectator.api.Timer timer;
     private final Quantiles quantiles;
 
-    SpectatorTimer(com.netflix.spectator.api.Timer timer, Quantiles quantiles, Clock clock) {
-        super(timer.id().name(), SpectatorUtils.tags(timer), clock);
+    SpectatorTimer(Timer timer, String description, Quantiles quantiles, Clock clock) {
+        super(timer.id().name(), SpectatorUtils.tags(timer), description, clock);
         this.timer = timer;
         this.quantiles = quantiles;
     }

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/binder/DataSourceMetricsTest.java
Patch:
@@ -35,6 +35,8 @@
 import java.sql.SQLException;
 import java.util.Collection;
 
+import static org.assertj.core.api.AssertionsForClassTypes.assertThat;
+
 /**
  * @author Jon Schneider
  */
@@ -53,7 +55,7 @@ public class DataSourceMetricsTest {
     public void dataSourceIsInstrumented() throws SQLException, InterruptedException {
         dataSource.getConnection().getMetaData();
         String scrape = restTemplate.getForObject("/prometheus", String.class);
-        System.out.println(scrape);
+        assertThat(scrape).contains("data_source_max_connections");
     }
 
     @SpringBootApplication(scanBasePackages = "isolated")

File: micrometer-core/src/main/java/io/micrometer/core/instrument/composite/CompositeMeterRegistry.java
Patch:
@@ -41,7 +41,7 @@ public CompositeMeterRegistry() {
     }
 
     public CompositeMeterRegistry(Clock clock) {
-        super(clock, TagFormatter.identity);
+        super(clock);
     }
 
     @Override

File: micrometer-core/src/main/java/io/micrometer/core/instrument/datadog/DatadogMeterRegistry.java
Patch:
@@ -15,7 +15,6 @@
  */
 package io.micrometer.core.instrument.datadog;
 
-import com.netflix.spectator.atlas.AtlasRegistry;
 import io.micrometer.core.instrument.Clock;
 import io.micrometer.core.instrument.spectator.step.StepSpectatorMeterRegistry;
 
@@ -34,7 +33,9 @@ public long wallTime() {
             public long monotonicTime() {
                 return clock.monotonicTime();
             }
-        }), clock, new DatadogTagFormatter(), config.step().toMillis());
+        }), clock, config.step().toMillis());
+
+        this.config().namingConvention(new DatadogNamingConvention());
 
         start();
     }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/dropwizard/DropwizardMeterRegistry.java
Patch:
@@ -33,8 +33,8 @@ public class DropwizardMeterRegistry extends AbstractMeterRegistry {
     private final MetricRegistry registry;
     private final HierarchicalNameMapper nameMapper;
 
-    public DropwizardMeterRegistry(HierarchicalNameMapper nameMapper, Clock clock, TagFormatter tagFormatter) {
-        super(clock, tagFormatter);
+    public DropwizardMeterRegistry(HierarchicalNameMapper nameMapper, Clock clock) {
+        super(clock);
         this.registry = new MetricRegistry();
         this.nameMapper = nameMapper;
         this.config().namingConvention(NamingConvention.camelCase);

File: micrometer-core/src/main/java/io/micrometer/core/instrument/influx/InfluxMeterRegistry.java
Patch:
@@ -16,7 +16,6 @@
 package io.micrometer.core.instrument.influx;
 
 import io.micrometer.core.instrument.Clock;
-import io.micrometer.core.instrument.TagFormatter;
 import io.micrometer.core.instrument.spectator.step.StepSpectatorMeterRegistry;
 
 public class InfluxMeterRegistry extends StepSpectatorMeterRegistry {
@@ -31,7 +30,9 @@ public long wallTime() {
             public long monotonicTime() {
                 return clock.monotonicTime();
             }
-        }), clock, TagFormatter.identity, config.step().toMillis());
+        }), clock, config.step().toMillis());
+
+        this.config().namingConvention(new InfluxNamingConvention());
 
         start();
     }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/jmx/JmxMeterRegistry.java
Patch:
@@ -17,7 +17,6 @@
 
 import com.codahale.metrics.JmxReporter;
 import io.micrometer.core.instrument.Clock;
-import io.micrometer.core.instrument.TagFormatter;
 import io.micrometer.core.instrument.dropwizard.DropwizardMeterRegistry;
 import io.micrometer.core.instrument.util.HierarchicalNameMapper;
 
@@ -29,7 +28,7 @@ public JmxMeterRegistry() {
     }
 
     public JmxMeterRegistry(HierarchicalNameMapper nameMapper, Clock clock) {
-        super(nameMapper, clock, TagFormatter.identity);
+        super(nameMapper, clock);
 
         this.reporter = JmxReporter.forRegistry(getDropwizardRegistry()).build();
         this.reporter.start();

File: micrometer-core/src/main/java/io/micrometer/core/instrument/prometheus/PrometheusMeterRegistry.java
Patch:
@@ -16,7 +16,6 @@
 package io.micrometer.core.instrument.prometheus;
 
 import io.micrometer.core.instrument.*;
-import io.micrometer.core.instrument.LongTaskTimer;
 import io.micrometer.core.instrument.prometheus.internal.CustomPrometheusCollector;
 import io.micrometer.core.instrument.prometheus.internal.CustomPrometheusLongTaskTimer;
 import io.micrometer.core.instrument.prometheus.internal.CustomPrometheusSummary;
@@ -56,7 +55,7 @@ public PrometheusMeterRegistry(CollectorRegistry registry) {
     }
 
     public PrometheusMeterRegistry(CollectorRegistry registry, Clock clock) {
-        super(clock, new PrometheusTagFormatter());
+        super(clock);
         this.registry = registry;
         this.config().namingConvention(new PrometheusNamingConvention());
     }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/simple/SimpleMeterRegistry.java
Patch:
@@ -34,7 +34,7 @@ public SimpleMeterRegistry() {
     }
 
     public SimpleMeterRegistry(Clock clock) {
-        super(clock, TagFormatter.identity);
+        super(clock);
     }
 
     @Override

File: micrometer-core/src/main/java/io/micrometer/core/instrument/spectator/SpectatorMeterRegistry.java
Patch:
@@ -39,8 +39,8 @@
 public abstract class SpectatorMeterRegistry extends AbstractMeterRegistry {
     private final Registry registry;
 
-    public SpectatorMeterRegistry(Registry registry, Clock clock, TagFormatter tagFormatter) {
-        super(clock, tagFormatter);
+    public SpectatorMeterRegistry(Registry registry, Clock clock) {
+        super(clock);
         this.registry = registry;
     }
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/spectator/step/StepSpectatorMeterRegistry.java
Patch:
@@ -31,8 +31,8 @@
 public abstract class StepSpectatorMeterRegistry extends SpectatorMeterRegistry {
     private long stepMillis;
 
-    public StepSpectatorMeterRegistry(Registry registry, Clock clock, TagFormatter tagFormatter, long stepMillis) {
-        super(registry, clock, tagFormatter);
+    public StepSpectatorMeterRegistry(Registry registry, Clock clock, long stepMillis) {
+        super(registry, clock);
         this.stepMillis = stepMillis;
     }
 

File: micrometer-core/src/test/java/io/micrometer/core/instrument/spectator/SpectatorMeterRegistryTest.java
Patch:
@@ -20,7 +20,6 @@
 import com.netflix.spectator.api.Meter;
 import com.netflix.spectator.api.Registry;
 import io.micrometer.core.instrument.Clock;
-import io.micrometer.core.instrument.TagFormatter;
 import io.micrometer.core.instrument.Timer;
 import io.micrometer.core.instrument.stats.quantile.GKQuantiles;
 import org.assertj.core.api.Condition;
@@ -41,7 +40,7 @@ class SpectatorMeterRegistryTest {
     @DisplayName("quantiles are registered as a separate gauge")
     @Test
     void quantiles() {
-        SpectatorMeterRegistry registry = new SpectatorMeterRegistry(new DefaultRegistry(), Clock.SYSTEM, TagFormatter.identity) {};
+        SpectatorMeterRegistry registry = new SpectatorMeterRegistry(new DefaultRegistry(), Clock.SYSTEM) {};
         Registry spectatorRegistry = registry.getSpectatorRegistry();
 
         Timer timer = registry.timerBuilder("timer")

File: micrometer-core/src/main/java/io/micrometer/core/instrument/LazyMetrics.java
Patch:
@@ -25,7 +25,7 @@
 /**
  * @author Jon Schneider
  */
-public class Meters {
+public class LazyMetrics {
     public static Counter lazyCounter(Supplier<Counter> counterBuilder) {
         return new LazyCounter(counterBuilder);
     }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/MeterRegistry.java
Patch:
@@ -33,8 +33,6 @@
  * @author Jon Schneider
  */
 public interface MeterRegistry {
-    CompositeMeterRegistry globalRegistry = new CompositeMeterRegistry();
-
     /**
      * @return The set of registered meters.
      */

File: micrometer-core/src/samples/java/io/micrometer/core/samples/CacheSample.java
Patch:
@@ -20,7 +20,7 @@
 import com.google.common.cache.LoadingCache;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.binder.GuavaCacheMetrics;
-import io.micrometer.core.samples.utils.Registries;
+import io.micrometer.core.samples.utils.SampleRegistries;
 import reactor.core.publisher.Mono;
 
 import java.time.Duration;
@@ -40,8 +40,8 @@ public Integer load(Integer key) {
                     }
                 });
 
-        MeterRegistry registry = Registries.prometheus();
-        new GuavaCacheMetrics("inverting_cache", emptyList(), cache).bindTo(registry);
+        MeterRegistry registry = SampleRegistries.prometheus();
+        new GuavaCacheMetrics("inverting.cache", emptyList(), cache).bindTo(registry);
 
         for(int i = 0;; i++) {
             cache.getUnchecked(i);

File: micrometer-core/src/samples/java/io/micrometer/core/samples/CounterSample.java
Patch:
@@ -19,14 +19,14 @@
 import cern.jet.random.engine.MersenneTwister64;
 import cern.jet.random.engine.RandomEngine;
 import io.micrometer.core.instrument.Counter;
-import io.micrometer.core.samples.utils.Registries;
+import io.micrometer.core.samples.utils.SampleRegistries;
 import reactor.core.publisher.Flux;
 
 import java.time.Duration;
 
 public class CounterSample {
     public static void main(String[] args) {
-        Counter counter = Registries.influx().counter("counter");
+        Counter counter = SampleRegistries.influx().counter("counter");
 
         RandomEngine r = new MersenneTwister64(0);
         Normal dist = new Normal(0, 1, r);

File: micrometer-core/src/samples/java/io/micrometer/core/samples/ExecutorServiceSample.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.binder.ExecutorServiceMetrics;
-import io.micrometer.core.samples.utils.Registries;
+import io.micrometer.core.samples.utils.SampleRegistries;
 import reactor.core.publisher.Mono;
 
 import java.time.Duration;
@@ -29,9 +29,9 @@
 
 public class ExecutorServiceSample {
     public static void main(String[] args) {
-        MeterRegistry registry = Registries.prometheus();
+        MeterRegistry registry = SampleRegistries.prometheus();
         ScheduledExecutorService es = Executors.newSingleThreadScheduledExecutor();
-        new ExecutorServiceMetrics(es, "executor_sample", emptyList()).bindTo(registry);
+        new ExecutorServiceMetrics(es, "executor.sample", emptyList()).bindTo(registry);
 
         es.scheduleWithFixedDelay(() -> Mono.delay(Duration.ofMillis(20)).block(), 0,
                 10, TimeUnit.MILLISECONDS);

File: micrometer-core/src/samples/java/io/micrometer/core/samples/HistogramSample.java
Patch:
@@ -22,7 +22,7 @@
 import io.micrometer.core.instrument.prometheus.PrometheusMeterRegistry;
 import io.micrometer.core.instrument.stats.hist.CumulativeHistogram;
 import io.micrometer.core.instrument.stats.quantile.CKMSQuantiles;
-import io.micrometer.core.samples.utils.Registries;
+import io.micrometer.core.samples.utils.SampleRegistries;
 
 import static io.micrometer.core.instrument.stats.hist.CumulativeHistogram.linear;
 
@@ -33,7 +33,7 @@
  */
 public class HistogramSample {
     public static void main(String[] args) throws InterruptedException {
-        PrometheusMeterRegistry meterRegistry = Registries.prometheus();
+        PrometheusMeterRegistry meterRegistry = SampleRegistries.prometheus();
 
         RandomEngine r = new MersenneTwister64(0);
         Normal dist = new Normal(100, 50, r);

File: micrometer-core/src/samples/java/io/micrometer/core/samples/LongTaskTimerSample.java
Patch:
@@ -19,7 +19,7 @@
 import cern.jet.random.engine.MersenneTwister64;
 import cern.jet.random.engine.RandomEngine;
 import io.micrometer.core.instrument.LongTaskTimer;
-import io.micrometer.core.samples.utils.Registries;
+import io.micrometer.core.samples.utils.SampleRegistries;
 import reactor.core.publisher.Flux;
 
 import java.time.Duration;
@@ -30,7 +30,7 @@
 
 public class LongTaskTimerSample {
     public static void main(String[] args) {
-        LongTaskTimer timer = Registries.influx().more().longTaskTimer("longTaskTimer");
+        LongTaskTimer timer = SampleRegistries.influx().more().longTaskTimer("longTaskTimer");
 
         RandomEngine r = new MersenneTwister64(0);
         Normal incomingRequests = new Normal(0, 1, r);

File: micrometer-core/src/samples/java/io/micrometer/core/samples/TimerSample.java
Patch:
@@ -21,7 +21,7 @@
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.Timer;
 import io.micrometer.core.instrument.stats.quantile.GKQuantiles;
-import io.micrometer.core.samples.utils.Registries;
+import io.micrometer.core.samples.utils.SampleRegistries;
 import reactor.core.publisher.Flux;
 
 import java.time.Duration;
@@ -30,7 +30,7 @@
 
 public class TimerSample {
     public static void main(String[] args) {
-        MeterRegistry registry = Registries.atlas();
+        MeterRegistry registry = SampleRegistries.atlas();
         GKQuantiles quantiles = GKQuantiles.quantiles(0.95, 0.5).error(0.05).create();
         Timer timer = registry.timerBuilder("timer").quantiles(quantiles).create();
 

File: micrometer-core/src/samples/java/io/micrometer/core/samples/utils/SampleRegistries.java
Patch:
@@ -34,7 +34,7 @@
 import java.time.Duration;
 import java.util.Properties;
 
-public class Registries {
+public class SampleRegistries {
     public static PrometheusMeterRegistry prometheus() {
         PrometheusMeterRegistry prometheusRegistry = new PrometheusMeterRegistry();
 
@@ -76,7 +76,7 @@ public static DatadogMeterRegistry datadog() {
 
             {
                 try {
-                    props.load(Registries.class.getResourceAsStream("/datadog.properties"));
+                    props.load(SampleRegistries.class.getResourceAsStream("/datadog.properties"));
                 } catch (IOException e) {
                     throw new RuntimeException("must have application.properties with datadog.apiKey defined", e);
                 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/TagFormatter.java
Patch:
@@ -26,6 +26,8 @@
  * @author Jon Schneider
  */
 public interface TagFormatter {
+    TagFormatter identity = new TagFormatter() {};
+
     default String formatName(String name) { return name; }
     default String formatTagKey(String key) { return key; }
     default String formatTagValue(String value) { return value; }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/ClassLoaderMetrics.java
Patch:
@@ -27,7 +27,7 @@ public class ClassLoaderMetrics implements MeterBinder {
     public void bindTo(MeterRegistry registry) {
         ClassLoadingMXBean classLoadingBean = ManagementFactory.getClassLoadingMXBean();
 
-        registry.gauge("classes_loaded", classLoadingBean, ClassLoadingMXBean::getLoadedClassCount);
-        registry.counter("classes_unloaded", emptyList(), classLoadingBean, ClassLoadingMXBean::getUnloadedClassCount);
+        registry.gauge("classes.loaded", classLoadingBean, ClassLoadingMXBean::getLoadedClassCount);
+        registry.more().counter("classes.unloaded", emptyList(), classLoadingBean, ClassLoadingMXBean::getUnloadedClassCount);
     }
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/ProcessorMetrics.java
Patch:
@@ -27,11 +27,11 @@ public class ProcessorMetrics implements MeterBinder {
     @Override
     public void bindTo(MeterRegistry registry) {
         Runtime runtime = Runtime.getRuntime();
-        registry.gauge("cpu_total", runtime, Runtime::availableProcessors);
+        registry.gauge("cpu.total", runtime, Runtime::availableProcessors);
 
         OperatingSystemMXBean operatingSystemBean = ManagementFactory.getOperatingSystemMXBean();
         if(operatingSystemBean != null && operatingSystemBean.getSystemLoadAverage() >= 0) {
-            registry.gauge("cpu_load_average", operatingSystemBean, OperatingSystemMXBean::getSystemLoadAverage);
+            registry.gauge("cpu.load.average", operatingSystemBean, OperatingSystemMXBean::getSystemLoadAverage);
         }
     }
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/ThreadMetrics.java
Patch:
@@ -26,8 +26,8 @@ public class ThreadMetrics implements MeterBinder {
     public void bindTo(MeterRegistry registry) {
         ThreadMXBean threadBean = ManagementFactory.getThreadMXBean();
 
-        registry.gauge("threads_peak", threadBean, ThreadMXBean::getPeakThreadCount);
-        registry.gauge("threads_daemon", threadBean, ThreadMXBean::getDaemonThreadCount);
-        registry.gauge("threads_live", threadBean, ThreadMXBean::getThreadCount);
+        registry.gauge("threads.peak", threadBean, ThreadMXBean::getPeakThreadCount);
+        registry.gauge("threads.daemon", threadBean, ThreadMXBean::getDaemonThreadCount);
+        registry.gauge("threads.live", threadBean, ThreadMXBean::getThreadCount);
     }
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/ganglia/GangliaMeterRegistry.java
Patch:
@@ -18,7 +18,7 @@
 import com.codahale.metrics.ganglia.GangliaReporter;
 import info.ganglia.gmetric4j.gmetric.GMetric;
 import io.micrometer.core.instrument.Clock;
-import io.micrometer.core.instrument.IdentityTagFormatter;
+import io.micrometer.core.instrument.TagFormatter;
 import io.micrometer.core.instrument.dropwizard.DropwizardMeterRegistry;
 import io.micrometer.core.instrument.util.HierarchicalNameMapper;
 
@@ -40,7 +40,7 @@ public GangliaMeterRegistry(GangliaConfig config) {
     public GangliaMeterRegistry(GangliaConfig config, HierarchicalNameMapper nameMapper, Clock clock) {
         // Technically, Ganglia doesn't have any constraints on metric or tag names, but the encoding of Unicode can look
         // horrible in the UI. So be aware...
-        super(nameMapper, clock, new IdentityTagFormatter());
+        super(nameMapper, clock, TagFormatter.identity);
         this.config = config;
 
         try {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/internal/TimedExecutorService.java
Patch:
@@ -36,7 +36,7 @@ public class TimedExecutorService implements ExecutorService {
 
     public TimedExecutorService(MeterRegistry registry, ExecutorService delegate, String name, Iterable<Tag> tags) {
         this.delegate = delegate;
-        this.timer = registry.timer(name + "_duration", tags);
+        this.timer = registry.timer(name, tags);
     }
 
     @Override

File: micrometer-core/src/main/java/io/micrometer/core/instrument/jmx/JmxMeterRegistry.java
Patch:
@@ -17,7 +17,7 @@
 
 import com.codahale.metrics.JmxReporter;
 import io.micrometer.core.instrument.Clock;
-import io.micrometer.core.instrument.IdentityTagFormatter;
+import io.micrometer.core.instrument.TagFormatter;
 import io.micrometer.core.instrument.dropwizard.DropwizardMeterRegistry;
 import io.micrometer.core.instrument.util.HierarchicalNameMapper;
 
@@ -29,7 +29,7 @@ public JmxMeterRegistry() {
     }
 
     public JmxMeterRegistry(HierarchicalNameMapper nameMapper, Clock clock) {
-        super(nameMapper, clock, new IdentityTagFormatter());
+        super(nameMapper, clock, TagFormatter.identity);
 
         this.reporter = JmxReporter.forRegistry(getDropwizardRegistry()).build();
         this.reporter.start();

File: micrometer-core/src/main/java/io/micrometer/core/instrument/prometheus/internal/CustomPrometheusLongTaskTimer.java
Patch:
@@ -38,10 +38,10 @@ public class CustomPrometheusLongTaskTimer extends Collector {
     private final List<String> tagKeys;
     private final Collection<Child> children = new ConcurrentLinkedQueue<>();
 
-    public CustomPrometheusLongTaskTimer(String name, List<String> tagKeys, Clock clock) {
+    public CustomPrometheusLongTaskTimer(String name, Iterable<Tag> tags, Clock clock) {
         this.clock = clock;
         this.name = name;
-        this.tagKeys = tagKeys;
+        this.tagKeys = stream(tags.spliterator(), false).map(Tag::getKey).collect(toList());
     }
 
     public Child child(Iterable<Tag> tags) {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/prometheus/internal/CustomPrometheusSummary.java
Patch:
@@ -46,11 +46,11 @@ public class CustomPrometheusSummary extends Collector {
 
     private final Collection<Child> children = new ConcurrentLinkedQueue<>();
 
-    public CustomPrometheusSummary(String name, List<String> tagKeys) {
+    public CustomPrometheusSummary(String name, Iterable<Tag> tags) {
         this.name = name;
         this.countName = name + "_count";
         this.sumName = name + "_sum";
-        this.tagKeys = tagKeys;
+        this.tagKeys = stream(tags.spliterator(), false).map(Tag::getKey).collect(toList());
     }
 
     public Child child(Iterable<Tag> tags, Quantiles quantiles, Histogram histogram) {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/util/MeterEquivalence.java
Patch:
@@ -30,14 +30,12 @@ public static boolean equals(Meter m1, Object o) {
         if (m1 == o) return true;
         Meter m2 = (Meter) o;
         return (m1.getName() != null ? m1.getName().equals(m2.getName()) : m2.getName() == null) &&
-                (m1.getTags() != null ? m1.getTags().equals(m2.getTags()) : m2.getTags() == null) &&
-                (m1.getType() != null ? m1.getType().equals(m2.getType()) : m2.getType() == null);
+                (m1.getTags() != null ? m1.getTags().equals(m2.getTags()) : m2.getTags() == null);
     }
 
     public static int hashCode(Meter m) {
         int result = m.getName() != null ? m.getName().hashCode() : 0;
         result = 31 * result + (m.getTags() != null ? m.getTags().hashCode() : 0);
-        result = 31 * result + (m.getType() != null ? m.getType().hashCode() : 0);
         return result;
     }
 }

File: micrometer-core/src/samples/java/io/micrometer/core/samples/LongTaskTimerSample.java
Patch:
@@ -30,7 +30,7 @@
 
 public class LongTaskTimerSample {
     public static void main(String[] args) {
-        LongTaskTimer timer = Registries.influx().longTaskTimer("longTaskTimer");
+        LongTaskTimer timer = Registries.influx().more().longTaskTimer("longTaskTimer");
 
         RandomEngine r = new MersenneTwister64(0);
         Normal incomingRequests = new Normal(0, 1, r);

File: micrometer-core/src/test/java/io/micrometer/core/instrument/LongTaskTimerTest.java
Patch:
@@ -19,17 +19,17 @@
 import org.junit.jupiter.params.ParameterizedTest;
 import org.junit.jupiter.params.provider.ArgumentsSource;
 
+import static io.micrometer.core.instrument.MockClock.clock;
 import static org.junit.jupiter.api.Assertions.assertAll;
 import static org.junit.jupiter.api.Assertions.assertEquals;
-import static io.micrometer.core.instrument.MockClock.clock;
 
 class LongTaskTimerTest {
 
     @DisplayName("total time is preserved for a single timing")
     @ParameterizedTest
     @ArgumentsSource(MeterRegistriesProvider.class)
     void record(MeterRegistry registry) {
-        LongTaskTimer t = registry.longTaskTimer("myTimer");
+        LongTaskTimer t = registry.more().longTaskTimer("myTimer");
 
         long tId = t.start();
         clock(registry).addAndGetNanos(10);

File: micrometer-core/src/test/java/io/micrometer/core/instrument/MeterRegistriesProvider.java
Patch:
@@ -77,7 +77,7 @@ public Duration step() {
                         return Duration.ofSeconds(1);
                     }
                 }, new MockClock()),
-                new DropwizardMeterRegistry(HierarchicalNameMapper.DEFAULT, new MockClock(), new IdentityTagFormatter()),
+                new DropwizardMeterRegistry(HierarchicalNameMapper.DEFAULT, new MockClock(), TagFormatter.identity),
                 new InfluxMeterRegistry(new InfluxConfig() {
                     @Override
                     public boolean enabled() {

File: micrometer-core/src/test/java/io/micrometer/core/instrument/MockClock.java
Patch:
@@ -32,7 +32,7 @@ public long wallTime() {
     }
 
     public static MockClock clock(MeterRegistry registry) {
-        return (MockClock) registry.getClock();
+        return (MockClock) registry.config().clock();
     }
 
     public long addAndGet(long amount, TimeUnit unit) {

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/ClassLoaderMetricsTest.java
Patch:
@@ -15,7 +15,6 @@
  */
 package io.micrometer.core.instrument.binder;
 
-import io.micrometer.core.instrument.Gauge;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
 import org.junit.jupiter.api.Test;
@@ -28,7 +27,7 @@ void classLoadingMetrics() {
         MeterRegistry registry = new SimpleMeterRegistry();
         new ClassLoaderMetrics().bindTo(registry);
 
-        assertThat(registry.findMeter(Gauge.class, "classes_loaded"))
+        assertThat(registry.find("classes.loaded").gauge())
                 .hasValueSatisfying(g -> assertThat(g.value()).isGreaterThan(0));
     }
 }

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/ProcessorMetricsTest.java
Patch:
@@ -29,9 +29,9 @@ void cpuMetrics() {
         MeterRegistry registry = new SimpleMeterRegistry();
         new ProcessorMetrics().bindTo(registry);
 
-        AssertionsForClassTypes.assertThat(registry.findMeter(Gauge.class, "cpu_total"))
+        assertThat(registry.find("cpu.total").gauge())
                 .hasValueSatisfying(g -> assertThat(g.value()).isGreaterThan(0));
-        assertThat(registry.findMeter(Gauge.class, "cpu_load_average"))
+        assertThat(registry.find("cpu.load.average").gauge())
                 .hasValueSatisfying(g -> assertThat(g.value()).isGreaterThan(0));
     }
 }

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/MetricsServletRequestConfiguration.java
Patch:
@@ -43,7 +43,7 @@ WebmvcTagConfigurer webmvcTagConfigurer() {
     @Bean
     ControllerMetrics controllerMetrics(MeterRegistry registry, WebmvcTagConfigurer configurer, Environment environment) {
         return new ControllerMetrics(registry, configurer,
-                environment.getProperty("spring.metrics.web.server_requests.name", "http_server_requests"));
+                environment.getProperty("spring.metrics.web.server_requests.name", "http.server.requests"));
     }
 
     @Bean

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/RestTemplateMetricsConfiguration.java
Patch:
@@ -50,7 +50,7 @@ MetricsRestTemplateInterceptor clientHttpRequestInterceptor(MeterRegistry meterR
                                                                 RestTemplateTagConfigurer restTemplateTagConfigurer,
                                                                 Environment environment) {
         return new MetricsRestTemplateInterceptor(meterRegistry, restTemplateTagConfigurer,
-                environment.getProperty("spring.metrics.web.client_requests.name", "http_client_requests"));
+                environment.getProperty("spring.metrics.web.client_requests.name", "http.client.requests"));
     }
 
     @Bean

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/scheduling/MetricsSchedulingAspect.java
Patch:
@@ -61,7 +61,7 @@ public Object timeScheduledOperation(ProceedingJoinPoint pjp) throws Throwable {
 
         for (Timed timed : AnnotationUtils.findTimed(method).toArray(Timed[]::new)) {
             if(timed.longTask())
-                longTaskTimer = registry.longTaskTimer(timed.value(), timed.extraTags());
+                longTaskTimer = registry.more().longTaskTimer(timed.value(), timed.extraTags());
             else {
                 Timer.Builder timerBuilder = registry.timerBuilder(timed.value())
                         .tags(timed.extraTags());
@@ -96,11 +96,11 @@ private Object recordThrowable(LongTaskTimer timer, ThrowableCallable f) throws
     }
 
     private Object recordThrowable(Timer timer, ThrowableCallable f) throws Throwable {
-        long start = registry.getClock().monotonicTime();
+        long start = registry.config().clock().monotonicTime();
         try {
             return f.call();
         } finally {
-            timer.record(registry.getClock().monotonicTime() - start, TimeUnit.NANOSECONDS);
+            timer.record(registry.config().clock().monotonicTime() - start, TimeUnit.NANOSECONDS);
         }
     }
 

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/web/MetricsHandlerInterceptor.java
Patch:
@@ -15,8 +15,6 @@
  */
 package io.micrometer.spring.web;
 
-import org.springframework.web.method.HandlerMethod;
-import org.springframework.web.servlet.ModelAndView;
 import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;
 
 import javax.servlet.http.HttpServletRequest;

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/MeterRegistryConfigurerTest.java
Patch:
@@ -25,7 +25,6 @@
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.context.annotation.Bean;
-import org.springframework.context.annotation.Import;
 import org.springframework.test.context.junit4.SpringRunner;
 
 import java.util.Optional;
@@ -43,7 +42,7 @@ public class MeterRegistryConfigurerTest {
 
     @Test
     public void commonTagsAreAppliedToAutoConfiguredBinders() {
-        Optional<Gauge> memUsed = registry.findMeter(Gauge.class, "jvm_memory_used");
+        Optional<Gauge> memUsed = registry.find("jvm.memory.used").gauge();
         assertThat(memUsed).hasValueSatisfying(g -> assertThat(g.getTags()).contains(Tag.of("region", "us-east-1")));
     }
 
@@ -61,7 +60,7 @@ public MeterRegistry registry() {
 
         @Bean
         public MeterRegistryConfigurer registryConfigurer() {
-            return registry -> registry.commonTags("region", "us-east-1");
+            return registry -> registry.config().commonTags("region", "us-east-1");
         }
     }
 }

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/export/prometheus/EnablePrometheusMetricsTest.java
Patch:
@@ -68,7 +68,7 @@ public void commonTags() {
     static class PrometheusApp {
         @Bean
         public MeterRegistryConfigurer registryConfigurer() {
-            return registry -> registry.commonTags("stack", "prod", "region", "us-east-1");
+            return registry -> registry.config().commonTags("stack", "prod", "region", "us-east-1");
         }
     }
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/lazy/LazyDistributionSummary.java
Patch:
@@ -31,8 +31,8 @@ private DistributionSummary summary() {
         return result == null ? (summary == null ? summary = summaryBuilder.get() : summary) : result;
     }
 
-    public LazyDistributionSummary(Supplier<DistributionSummary> counterBuilder) {
-        this.summaryBuilder = counterBuilder;
+    public LazyDistributionSummary(Supplier<DistributionSummary> summaryBuilder) {
+        this.summaryBuilder = summaryBuilder;
     }
 
     @Override

File: micrometer-core/src/main/java/io/micrometer/core/instrument/lazy/LazyLongTaskTimer.java
Patch:
@@ -31,8 +31,8 @@ private LongTaskTimer timer() {
         return result == null ? (timer == null ? timer = timerBuilder.get() : timer) : result;
     }
 
-    public LazyLongTaskTimer(Supplier<LongTaskTimer> counterBuilder) {
-        this.timerBuilder = counterBuilder;
+    public LazyLongTaskTimer(Supplier<LongTaskTimer> timerBuilder) {
+        this.timerBuilder = timerBuilder;
     }
 
     @Override

File: micrometer-core/src/main/java/io/micrometer/core/instrument/lazy/LazyTimer.java
Patch:
@@ -33,8 +33,8 @@ private Timer timer() {
         return result == null ? (timer == null ? timer = timerBuilder.get() : timer) : result;
     }
 
-    public LazyTimer(Supplier<Timer> counterBuilder) {
-        this.timerBuilder = counterBuilder;
+    public LazyTimer(Supplier<Timer> timerBuilder) {
+        this.timerBuilder = timerBuilder;
     }
 
     @Override
@@ -86,4 +86,4 @@ public long count() {
     public double totalTime(TimeUnit unit) {
         return timer().totalTime(unit);
     }
-}
\ No newline at end of file
+}

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/web/MetricsHandlerInterceptor.java
Patch:
@@ -37,7 +37,7 @@ public MetricsHandlerInterceptor(ControllerMetrics controllerMetrics) {
     @Override
     public boolean preHandle(HttpServletRequest request, HttpServletResponse response,
                              Object handler) throws Exception {
-        controllerMetrics.preHandle(request, (HandlerMethod) handler);
+        controllerMetrics.preHandle(request, handler);
         return super.preHandle(request, response, handler);
     }
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/MeterRegistry.java
Patch:
@@ -33,7 +33,7 @@
  * @author Jon Schneider
  */
 public interface MeterRegistry {
-    MeterRegistry globalRegistry = new CompositeMeterRegistry();
+    CompositeMeterRegistry globalRegistry = new CompositeMeterRegistry();
 
     /**
      * @return The set of registered meters.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/AbstractTimer.java
Patch:
@@ -16,7 +16,7 @@
 package io.micrometer.core.instrument;
 
 import io.micrometer.core.instrument.util.MeterId;
-import io.micrometer.core.instrument.util.Meters;
+import io.micrometer.core.instrument.util.MeterEquivalence;
 
 import java.util.concurrent.Callable;
 import java.util.concurrent.TimeUnit;
@@ -90,11 +90,11 @@ public Iterable<Tag> getTags() {
     @SuppressWarnings("EqualsWhichDoesntCheckParameterClass")
     @Override
     public boolean equals(Object o) {
-        return Meters.equals(this, o);
+        return MeterEquivalence.equals(this, o);
     }
 
     @Override
     public int hashCode() {
-        return Meters.hashCode(this);
+        return MeterEquivalence.hashCode(this);
     }
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/dropwizard/DropwizardCounter.java
Patch:
@@ -18,7 +18,7 @@
 import com.codahale.metrics.Meter;
 import io.micrometer.core.instrument.Counter;
 import io.micrometer.core.instrument.Measurement;
-import io.micrometer.core.instrument.util.Meters;
+import io.micrometer.core.instrument.util.MeterEquivalence;
 import io.micrometer.core.instrument.util.MeterId;
 
 import java.util.Collections;
@@ -53,11 +53,11 @@ public double count() {
     @SuppressWarnings("EqualsWhichDoesntCheckParameterClass")
     @Override
     public boolean equals(Object o) {
-        return Meters.equals(this, o);
+        return MeterEquivalence.equals(this, o);
     }
 
     @Override
     public int hashCode() {
-        return Meters.hashCode(this);
+        return MeterEquivalence.hashCode(this);
     }
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/dropwizard/DropwizardDistributionSummary.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.micrometer.core.instrument.DistributionSummary;
 import io.micrometer.core.instrument.Measurement;
-import io.micrometer.core.instrument.util.Meters;
+import io.micrometer.core.instrument.util.MeterEquivalence;
 import io.micrometer.core.instrument.util.MeterId;
 
 import java.util.Collections;
@@ -62,11 +62,11 @@ public double totalAmount() {
     @SuppressWarnings("EqualsWhichDoesntCheckParameterClass")
     @Override
     public boolean equals(Object o) {
-        return Meters.equals(this, o);
+        return MeterEquivalence.equals(this, o);
     }
 
     @Override
     public int hashCode() {
-        return Meters.hashCode(this);
+        return MeterEquivalence.hashCode(this);
     }
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/dropwizard/DropwizardGauge.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.micrometer.core.instrument.Gauge;
 import io.micrometer.core.instrument.Measurement;
-import io.micrometer.core.instrument.util.Meters;
+import io.micrometer.core.instrument.util.MeterEquivalence;
 import io.micrometer.core.instrument.util.MeterId;
 
 import java.util.Collections;
@@ -47,11 +47,11 @@ public List<Measurement> measure() {
     @SuppressWarnings("EqualsWhichDoesntCheckParameterClass")
     @Override
     public boolean equals(Object o) {
-        return Meters.equals(this, o);
+        return MeterEquivalence.equals(this, o);
     }
 
     @Override
     public int hashCode() {
-        return Meters.hashCode(this);
+        return MeterEquivalence.hashCode(this);
     }
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/prometheus/PrometheusCounter.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.micrometer.core.instrument.Counter;
 import io.micrometer.core.instrument.Measurement;
-import io.micrometer.core.instrument.util.Meters;
+import io.micrometer.core.instrument.util.MeterEquivalence;
 import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.util.MeterId;
 
@@ -61,11 +61,11 @@ public List<Measurement> measure() {
     @SuppressWarnings("EqualsWhichDoesntCheckParameterClass")
     @Override
     public boolean equals(Object o) {
-        return Meters.equals(this, o);
+        return MeterEquivalence.equals(this, o);
     }
 
     @Override
     public int hashCode() {
-        return Meters.hashCode(this);
+        return MeterEquivalence.hashCode(this);
     }
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/prometheus/PrometheusDistributionSummary.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micrometer.core.instrument.prometheus;
 
-import io.micrometer.core.instrument.util.Meters;
+import io.micrometer.core.instrument.util.MeterEquivalence;
 import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.prometheus.internal.CustomPrometheusSummary;
 import io.micrometer.core.instrument.util.MeterId;
@@ -68,11 +68,11 @@ public List<Measurement> measure() {
     @SuppressWarnings("EqualsWhichDoesntCheckParameterClass")
     @Override
     public boolean equals(Object o) {
-        return Meters.equals(this, o);
+        return MeterEquivalence.equals(this, o);
     }
 
     @Override
     public int hashCode() {
-        return Meters.hashCode(this);
+        return MeterEquivalence.hashCode(this);
     }
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/prometheus/PrometheusGauge.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.micrometer.core.instrument.Gauge;
 import io.micrometer.core.instrument.Measurement;
-import io.micrometer.core.instrument.util.Meters;
+import io.micrometer.core.instrument.util.MeterEquivalence;
 import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.util.MeterId;
 
@@ -56,11 +56,11 @@ public List<Measurement> measure() {
     @SuppressWarnings("EqualsWhichDoesntCheckParameterClass")
     @Override
     public boolean equals(Object o) {
-        return Meters.equals(this, o);
+        return MeterEquivalence.equals(this, o);
     }
 
     @Override
     public int hashCode() {
-        return Meters.hashCode(this);
+        return MeterEquivalence.hashCode(this);
     }
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/prometheus/PrometheusLongTaskTimer.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.micrometer.core.instrument.LongTaskTimer;
 import io.micrometer.core.instrument.Measurement;
-import io.micrometer.core.instrument.util.Meters;
+import io.micrometer.core.instrument.util.MeterEquivalence;
 import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.prometheus.internal.CustomPrometheusLongTaskTimer;
 import io.micrometer.core.instrument.util.MeterId;
@@ -76,11 +76,11 @@ public List<Measurement> measure() {
     @SuppressWarnings("EqualsWhichDoesntCheckParameterClass")
     @Override
     public boolean equals(Object o) {
-        return Meters.equals(this, o);
+        return MeterEquivalence.equals(this, o);
     }
 
     @Override
     public int hashCode() {
-        return Meters.hashCode(this);
+        return MeterEquivalence.hashCode(this);
     }
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/simple/SimpleCounter.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.micrometer.core.instrument.Counter;
 import io.micrometer.core.instrument.Measurement;
-import io.micrometer.core.instrument.util.Meters;
+import io.micrometer.core.instrument.util.MeterEquivalence;
 import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.util.MeterId;
 
@@ -57,11 +57,11 @@ public List<Measurement> measure() {
     @SuppressWarnings("EqualsWhichDoesntCheckParameterClass")
     @Override
     public boolean equals(Object o) {
-        return Meters.equals(this, o);
+        return MeterEquivalence.equals(this, o);
     }
 
     @Override
     public int hashCode() {
-        return Meters.hashCode(this);
+        return MeterEquivalence.hashCode(this);
     }
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/simple/SimpleDistributionSummary.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.micrometer.core.instrument.DistributionSummary;
 import io.micrometer.core.instrument.Measurement;
-import io.micrometer.core.instrument.util.Meters;
+import io.micrometer.core.instrument.util.MeterEquivalence;
 import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.util.MeterId;
 
@@ -71,11 +71,11 @@ public List<Measurement> measure() {
     @SuppressWarnings("EqualsWhichDoesntCheckParameterClass")
     @Override
     public boolean equals(Object o) {
-        return Meters.equals(this, o);
+        return MeterEquivalence.equals(this, o);
     }
 
     @Override
     public int hashCode() {
-        return Meters.hashCode(this);
+        return MeterEquivalence.hashCode(this);
     }
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/simple/SimpleGauge.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.micrometer.core.instrument.Gauge;
 import io.micrometer.core.instrument.Measurement;
-import io.micrometer.core.instrument.util.Meters;
+import io.micrometer.core.instrument.util.MeterEquivalence;
 import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.util.MeterId;
 
@@ -52,11 +52,11 @@ public List<Measurement> measure() {
     @SuppressWarnings("EqualsWhichDoesntCheckParameterClass")
     @Override
     public boolean equals(Object o) {
-        return Meters.equals(this, o);
+        return MeterEquivalence.equals(this, o);
     }
 
     @Override
     public int hashCode() {
-        return Meters.hashCode(this);
+        return MeterEquivalence.hashCode(this);
     }
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/simple/SimpleLongTaskTimer.java
Patch:
@@ -16,8 +16,8 @@
 package io.micrometer.core.instrument.simple;
 
 import io.micrometer.core.instrument.*;
+import io.micrometer.core.instrument.util.MeterEquivalence;
 import io.micrometer.core.instrument.util.MeterId;
-import io.micrometer.core.instrument.util.Meters;
 
 import java.util.Arrays;
 import java.util.List;
@@ -93,11 +93,11 @@ public List<Measurement> measure() {
     @SuppressWarnings("EqualsWhichDoesntCheckParameterClass")
     @Override
     public boolean equals(Object o) {
-        return Meters.equals(this, o);
+        return MeterEquivalence.equals(this, o);
     }
 
     @Override
     public int hashCode() {
-        return Meters.hashCode(this);
+        return MeterEquivalence.hashCode(this);
     }
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/spectator/SpectatorCounter.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.micrometer.core.instrument.Counter;
 import io.micrometer.core.instrument.Measurement;
-import io.micrometer.core.instrument.util.Meters;
+import io.micrometer.core.instrument.util.MeterEquivalence;
 import io.micrometer.core.instrument.Tag;
 
 import java.util.List;
@@ -57,11 +57,11 @@ public List<Measurement> measure() {
     @SuppressWarnings("EqualsWhichDoesntCheckParameterClass")
     @Override
     public boolean equals(Object o) {
-        return Meters.equals(this, o);
+        return MeterEquivalence.equals(this, o);
     }
 
     @Override
     public int hashCode() {
-        return Meters.hashCode(this);
+        return MeterEquivalence.hashCode(this);
     }
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/spectator/SpectatorDistributionSummary.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micrometer.core.instrument.spectator;
 
-import io.micrometer.core.instrument.util.Meters;
+import io.micrometer.core.instrument.util.MeterEquivalence;
 import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.DistributionSummary;
 import io.micrometer.core.instrument.Measurement;
@@ -67,11 +67,11 @@ public List<Measurement> measure() {
     @SuppressWarnings("EqualsWhichDoesntCheckParameterClass")
     @Override
     public boolean equals(Object o) {
-        return Meters.equals(this, o);
+        return MeterEquivalence.equals(this, o);
     }
 
     @Override
     public int hashCode() {
-        return Meters.hashCode(this);
+        return MeterEquivalence.hashCode(this);
     }
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/spectator/SpectatorGauge.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.micrometer.core.instrument.Gauge;
 import io.micrometer.core.instrument.Measurement;
-import io.micrometer.core.instrument.util.Meters;
+import io.micrometer.core.instrument.util.MeterEquivalence;
 import io.micrometer.core.instrument.Tag;
 
 import java.util.List;
@@ -52,11 +52,11 @@ public List<Measurement> measure() {
     @SuppressWarnings("EqualsWhichDoesntCheckParameterClass")
     @Override
     public boolean equals(Object o) {
-        return Meters.equals(this, o);
+        return MeterEquivalence.equals(this, o);
     }
 
     @Override
     public int hashCode() {
-        return Meters.hashCode(this);
+        return MeterEquivalence.hashCode(this);
     }
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/spectator/SpectatorLongTaskTimer.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micrometer.core.instrument.spectator;
 
-import io.micrometer.core.instrument.util.Meters;
+import io.micrometer.core.instrument.util.MeterEquivalence;
 import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.LongTaskTimer;
 import io.micrometer.core.instrument.Measurement;
@@ -72,11 +72,11 @@ public List<Measurement> measure() {
     @SuppressWarnings("EqualsWhichDoesntCheckParameterClass")
     @Override
     public boolean equals(Object o) {
-        return Meters.equals(this, o);
+        return MeterEquivalence.equals(this, o);
     }
 
     @Override
     public int hashCode() {
-        return Meters.hashCode(this);
+        return MeterEquivalence.hashCode(this);
     }
 }
\ No newline at end of file

File: micrometer-core/src/main/java/io/micrometer/core/instrument/spectator/SpectatorMeterWrapper.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.micrometer.core.instrument.Measurement;
 import io.micrometer.core.instrument.Meter;
-import io.micrometer.core.instrument.util.Meters;
+import io.micrometer.core.instrument.util.MeterEquivalence;
 import io.micrometer.core.instrument.Tag;
 
 import java.util.List;
@@ -63,11 +63,11 @@ public List<Measurement> measure() {
     @SuppressWarnings("EqualsWhichDoesntCheckParameterClass")
     @Override
     public boolean equals(Object o) {
-        return Meters.equals(this, o);
+        return MeterEquivalence.equals(this, o);
     }
 
     @Override
     public int hashCode() {
-        return Meters.hashCode(this);
+        return MeterEquivalence.hashCode(this);
     }
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/util/MeterEquivalence.java
Patch:
@@ -20,8 +20,8 @@
 /**
  * @author Jon Schneider
  */
-public final class Meters {
-    private Meters() {}
+public final class MeterEquivalence {
+    private MeterEquivalence() {}
 
     public static boolean equals(Meter m1, Object o) {
         if (m1 == null && o != null) return false;

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/ExecutorServiceMetricsTest.java
Patch:
@@ -17,7 +17,6 @@
 
 import io.micrometer.core.instrument.*;
 import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
-import io.micrometer.core.instrument.util.Meters;
 import org.assertj.core.api.AssertionsForClassTypes;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.DisplayName;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Counter.java
Patch:
@@ -15,6 +15,9 @@
  */
 package io.micrometer.core.instrument;
 
+import java.util.Collections;
+import java.util.List;
+
 /**
  * Used to measure the rate of change based on calls to increment.
  */

File: micrometer-core/src/test/java/io/micrometer/core/instrument/CounterTest.java
Patch:
@@ -57,10 +57,10 @@ void incrementAmount(MeterRegistry registry) {
         assertEquals(2L, c.count());
     }
 
-    @DisplayName("heisen-counter increments by change in a monotonically increasing function when observed")
+    @DisplayName("function-tracking counter increments by change in a monotonically increasing function when observed")
     @ParameterizedTest
     @ArgumentsSource(MeterRegistriesProvider.class)
-    void heisenCounter(MeterRegistry registry) {
+    void functionTrackingCounter(MeterRegistry registry) {
         AtomicLong n = registry.counter("heisen", emptyList(), new AtomicLong(0));
         n.incrementAndGet();
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Tags.java
Patch:
@@ -25,7 +25,9 @@
 /**
  * @author Jon Schneider
  */
-public class Tags {
+public final class Tags {
+    private Tags() {}
+
     public static List<Tag> zip(String... keyValues) {
         if (keyValues.length % 2 == 1) {
             throw new IllegalArgumentException("size must be even, it is a set of key=value pairs");

File: micrometer-core/src/main/java/io/micrometer/core/instrument/util/AnnotationUtils.java
Patch:
@@ -31,7 +31,9 @@
  *
  * @author Jon Schneider
  */
-public class AnnotationUtils {
+public final class AnnotationUtils {
+    private AnnotationUtils() {}
+
     public static Stream<Timed> findTimed(Class<?> clazz) {
         return findTimed(clazz.getAnnotation(Timed.class), clazz.getAnnotation(TimedSet.class));
     }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/util/Meters.java
Patch:
@@ -20,7 +20,9 @@
 /**
  * @author Jon Schneider
  */
-public class Meters {
+public final class Meters {
+    private Meters() {}
+
     public static boolean equals(Meter m1, Object o) {
         if (m1 == null && o != null) return false;
         if (o == null && m1 != null) return false;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/util/TimeUtils.java
Patch:
@@ -23,7 +23,9 @@
  *
  * @author Jon Schneider
  */
-public class TimeUtils {
+public final class TimeUtils {
+    private TimeUtils() {}
+
     public static double convert(double t, TimeUnit sourceUnit, TimeUnit destinationUnit) {
         switch(sourceUnit) {
             case NANOSECONDS:

File: micrometer-core/src/test/java/io/micrometer/core/instrument/MeterRegistriesProvider.java
Patch:
@@ -76,7 +76,7 @@ public Duration step() {
                         return Duration.ofSeconds(1);
                     }
                 }, new MockClock()),
-                new DropwizardMeterRegistry(new HierarchicalNameMapper(), new MockClock(), new IdentityTagFormatter()),
+                new DropwizardMeterRegistry(HierarchicalNameMapper.DEFAULT, new MockClock(), new IdentityTagFormatter()),
                 new InfluxMeterRegistry(new InfluxConfig() {
                     @Override
                     public boolean enabled() {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/util/MeterId.java
Patch:
@@ -19,6 +19,7 @@
 import io.micrometer.core.instrument.Measurement;
 
 import java.util.Arrays;
+import java.util.Collections;
 import java.util.Comparator;
 import java.util.List;
 import java.util.stream.Collectors;
@@ -39,8 +40,8 @@ public class MeterId {
 
     public MeterId(String name, Iterable<Tag> tags) {
         this.name = name;
-        this.tags = stream(tags.spliterator(), false).sorted(Comparator.comparing(Tag::getKey))
-                .collect(Collectors.toList());
+        this.tags = Collections.unmodifiableList(stream(tags.spliterator(), false).sorted(Comparator.comparing(Tag::getKey))
+                .collect(Collectors.toList()));
     }
 
     public String getName() {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/AbstractTimer.java
Patch:
@@ -16,6 +16,7 @@
 package io.micrometer.core.instrument;
 
 import io.micrometer.core.instrument.util.MeterId;
+import io.micrometer.core.instrument.util.Meters;
 
 import java.util.concurrent.Callable;
 import java.util.concurrent.TimeUnit;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/dropwizard/DropwizardCounter.java
Patch:
@@ -18,7 +18,7 @@
 import com.codahale.metrics.Meter;
 import io.micrometer.core.instrument.Counter;
 import io.micrometer.core.instrument.Measurement;
-import io.micrometer.core.instrument.Meters;
+import io.micrometer.core.instrument.util.Meters;
 import io.micrometer.core.instrument.util.MeterId;
 
 import java.util.Collections;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/dropwizard/DropwizardDistributionSummary.java
Patch:
@@ -17,12 +17,11 @@
 
 import io.micrometer.core.instrument.DistributionSummary;
 import io.micrometer.core.instrument.Measurement;
-import io.micrometer.core.instrument.Meters;
+import io.micrometer.core.instrument.util.Meters;
 import io.micrometer.core.instrument.util.MeterId;
 
 import java.util.Collections;
 import java.util.List;
-import java.util.concurrent.atomic.AtomicLong;
 import java.util.concurrent.atomic.DoubleAdder;
 
 /**

File: micrometer-core/src/main/java/io/micrometer/core/instrument/dropwizard/DropwizardGauge.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.micrometer.core.instrument.Gauge;
 import io.micrometer.core.instrument.Measurement;
-import io.micrometer.core.instrument.Meters;
+import io.micrometer.core.instrument.util.Meters;
 import io.micrometer.core.instrument.util.MeterId;
 
 import java.util.Collections;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/prometheus/PrometheusCounter.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.micrometer.core.instrument.Counter;
 import io.micrometer.core.instrument.Measurement;
-import io.micrometer.core.instrument.Meters;
+import io.micrometer.core.instrument.util.Meters;
 import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.util.MeterId;
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/prometheus/PrometheusDistributionSummary.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micrometer.core.instrument.prometheus;
 
-import io.micrometer.core.instrument.Meters;
+import io.micrometer.core.instrument.util.Meters;
 import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.prometheus.internal.CustomPrometheusSummary;
 import io.micrometer.core.instrument.util.MeterId;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/prometheus/PrometheusGauge.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.micrometer.core.instrument.Gauge;
 import io.micrometer.core.instrument.Measurement;
-import io.micrometer.core.instrument.Meters;
+import io.micrometer.core.instrument.util.Meters;
 import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.util.MeterId;
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/prometheus/PrometheusLongTaskTimer.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.micrometer.core.instrument.LongTaskTimer;
 import io.micrometer.core.instrument.Measurement;
-import io.micrometer.core.instrument.Meters;
+import io.micrometer.core.instrument.util.Meters;
 import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.prometheus.internal.CustomPrometheusLongTaskTimer;
 import io.micrometer.core.instrument.util.MeterId;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/simple/SimpleCounter.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.micrometer.core.instrument.Counter;
 import io.micrometer.core.instrument.Measurement;
-import io.micrometer.core.instrument.Meters;
+import io.micrometer.core.instrument.util.Meters;
 import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.util.MeterId;
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/simple/SimpleDistributionSummary.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.micrometer.core.instrument.DistributionSummary;
 import io.micrometer.core.instrument.Measurement;
-import io.micrometer.core.instrument.Meters;
+import io.micrometer.core.instrument.util.Meters;
 import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.util.MeterId;
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/simple/SimpleGauge.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.micrometer.core.instrument.Gauge;
 import io.micrometer.core.instrument.Measurement;
-import io.micrometer.core.instrument.Meters;
+import io.micrometer.core.instrument.util.Meters;
 import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.util.MeterId;
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/simple/SimpleLongTaskTimer.java
Patch:
@@ -17,6 +17,7 @@
 
 import io.micrometer.core.instrument.*;
 import io.micrometer.core.instrument.util.MeterId;
+import io.micrometer.core.instrument.util.Meters;
 
 import java.util.Arrays;
 import java.util.List;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/spectator/SpectatorCounter.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.micrometer.core.instrument.Counter;
 import io.micrometer.core.instrument.Measurement;
-import io.micrometer.core.instrument.Meters;
+import io.micrometer.core.instrument.util.Meters;
 import io.micrometer.core.instrument.Tag;
 
 import java.util.List;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/spectator/SpectatorDistributionSummary.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micrometer.core.instrument.spectator;
 
-import io.micrometer.core.instrument.Meters;
+import io.micrometer.core.instrument.util.Meters;
 import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.DistributionSummary;
 import io.micrometer.core.instrument.Measurement;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/spectator/SpectatorGauge.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.micrometer.core.instrument.Gauge;
 import io.micrometer.core.instrument.Measurement;
-import io.micrometer.core.instrument.Meters;
+import io.micrometer.core.instrument.util.Meters;
 import io.micrometer.core.instrument.Tag;
 
 import java.util.List;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/spectator/SpectatorLongTaskTimer.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micrometer.core.instrument.spectator;
 
-import io.micrometer.core.instrument.Meters;
+import io.micrometer.core.instrument.util.Meters;
 import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.LongTaskTimer;
 import io.micrometer.core.instrument.Measurement;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/spectator/SpectatorMeterWrapper.java
Patch:
@@ -17,9 +17,8 @@
 
 import io.micrometer.core.instrument.Measurement;
 import io.micrometer.core.instrument.Meter;
-import io.micrometer.core.instrument.Meters;
+import io.micrometer.core.instrument.util.Meters;
 import io.micrometer.core.instrument.Tag;
-import io.micrometer.core.instrument.spectator.SpectatorUtils;
 
 import java.util.List;
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/MeterRegistry.java
Patch:
@@ -227,13 +227,13 @@ default <T extends Collection<?>> T gaugeCollectionSize(String name, Iterable<Ta
      * {@link java.util.Map#size()} can be expensive for some collection implementations
      * and should be considered before registering.
      *
-     * @param tags Sequence of dimensions for breaking down the getName.
      * @param name Name of the gauge being registered.
+     * @param tags Sequence of dimensions for breaking down the getName.
      * @param map  Thread-safe implementation of {@link Map} used to access the value.
      * @return The number that was passed in so the registration can be done as part of an assignment
      * statement.
      */
-    default <T extends Map<?, ?>> T gaugeMapSize(Iterable<Tag> tags, String name, T map) {
+    default <T extends Map<?, ?>> T gaugeMapSize(String name, Iterable<Tag> tags, T map) {
         return gauge(name, tags, map, Map::size);
     }
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Meters.java
Patch:
@@ -16,7 +16,7 @@
 package io.micrometer.core.instrument;
 
 import com.google.common.cache.Cache;
-import io.micrometer.core.instrument.binder.CacheMetrics;
+import io.micrometer.core.instrument.binder.GuavaCacheMetrics;
 import io.micrometer.core.instrument.binder.ExecutorServiceMetrics;
 import io.micrometer.core.instrument.internal.TimedExecutorService;
 
@@ -167,7 +167,7 @@ public int hashCode() {
      * @see com.google.common.cache.CacheStats
      */
     public static Cache monitor(MeterRegistry registry, Cache cache, String name, Tag... tags) {
-        new CacheMetrics(name, asList(tags), cache).bindTo(registry);
+        new GuavaCacheMetrics(name, asList(tags), cache).bindTo(registry);
         return cache;
     }
 
@@ -182,7 +182,7 @@ public static Cache monitor(MeterRegistry registry, Cache cache, String name, Ta
      * @see com.google.common.cache.CacheStats
      */
     public static Cache monitor(MeterRegistry registry, Cache cache, String name, Iterable<Tag> tags) {
-        new CacheMetrics(name, tags, cache).bindTo(registry);
+        new GuavaCacheMetrics(name, tags, cache).bindTo(registry);
         return cache;
     }
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/ClassLoaderMetrics.java
Patch:
@@ -20,12 +20,14 @@
 import java.lang.management.ClassLoadingMXBean;
 import java.lang.management.ManagementFactory;
 
+import static java.util.Collections.emptyList;
+
 public class ClassLoaderMetrics implements MeterBinder {
     @Override
     public void bindTo(MeterRegistry registry) {
         ClassLoadingMXBean classLoadingBean = ManagementFactory.getClassLoadingMXBean();
 
         registry.gauge("classes_loaded", classLoadingBean, ClassLoadingMXBean::getLoadedClassCount);
-        registry.counter("classes_unloaded", classLoadingBean, ClassLoadingMXBean::getUnloadedClassCount);
+        registry.counter("classes_unloaded", emptyList(), classLoadingBean, ClassLoadingMXBean::getUnloadedClassCount);
     }
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/GuavaCacheMetrics.java
Patch:
@@ -22,12 +22,12 @@
 /**
  * @author Jon Schneider
  */
-public class CacheMetrics implements MeterBinder {
+public class GuavaCacheMetrics implements MeterBinder {
     private final String name;
     private final Iterable<Tag> tags;
     private final Cache<?, ?> cache;
 
-    public CacheMetrics(String name, Iterable<Tag> tags, Cache<?, ?> cache) {
+    public GuavaCacheMetrics(String name, Iterable<Tag> tags, Cache<?, ?> cache) {
         this.name = name;
         this.tags = tags;
         this.cache = cache;

File: micrometer-core/src/samples/java/io/micrometer/core/samples/CacheSample.java
Patch:
@@ -19,7 +19,7 @@
 import com.google.common.cache.CacheLoader;
 import com.google.common.cache.LoadingCache;
 import io.micrometer.core.instrument.MeterRegistry;
-import io.micrometer.core.instrument.binder.CacheMetrics;
+import io.micrometer.core.instrument.binder.GuavaCacheMetrics;
 import io.micrometer.core.samples.utils.Registries;
 import reactor.core.publisher.Mono;
 
@@ -41,7 +41,7 @@ public Integer load(Integer key) {
                 });
 
         MeterRegistry registry = Registries.prometheus();
-        new CacheMetrics("inverting_cache", emptyList(), cache).bindTo(registry);
+        new GuavaCacheMetrics("inverting_cache", emptyList(), cache).bindTo(registry);
 
         for(int i = 0;; i++) {
             cache.getUnchecked(i);

File: micrometer-core/src/test/java/io/micrometer/core/instrument/CounterTest.java
Patch:
@@ -23,6 +23,7 @@
 import java.util.concurrent.atomic.AtomicLong;
 
 import static io.micrometer.core.instrument.MockClock.clock;
+import static java.util.Collections.emptyList;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.offset;
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -60,7 +61,7 @@ void incrementAmount(MeterRegistry registry) {
     @ParameterizedTest
     @ArgumentsSource(MeterRegistriesProvider.class)
     void heisenCounter(MeterRegistry registry) {
-        AtomicLong n = registry.counter("heisen", new AtomicLong(0));
+        AtomicLong n = registry.counter("heisen", emptyList(), new AtomicLong(0));
         n.incrementAndGet();
 
         Meter c = registry.findMeter(Meter.class, "heisen").get();

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/CaffeineCacheMetricsTest.java
Patch:
@@ -37,9 +37,11 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
+/**
+ * @author Clint Checketts
+ */
 class CaffeineCacheMetricsTest {
 
-
     @Test
     public void cacheExposesMetricsForHitMissAndEviction() throws Exception {
         Cache<String, String> cache = Caffeine.newBuilder().maximumSize(2).recordStats().executor(new Executor() {
@@ -70,7 +72,6 @@ public void execute(Runnable command) {
         assertMetric(registry, Counter, "users", 2.0, "caffeine_cache_evictions_total");
     }
 
-
     @SuppressWarnings("unchecked")
     @Test
     public void loadingCacheExposesMetricsForLoadsAndExceptions() throws Exception {

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/RecommendedMeterBinders.java
Patch:
@@ -29,7 +29,7 @@ JvmMemoryMetrics jvmMemoryMetrics() {
     }
 
     @Bean
-    @ConditionalOnClass(ch.qos.logback.classic.Logger.class)
+    @ConditionalOnClass(name = "ch.qos.logback.classic.Logger")
     LogbackMetrics logbackMetrics() {
         return new LogbackMetrics();
     }

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/RestTemplateMetricsConfiguration.java
Patch:
@@ -35,7 +35,7 @@
 import java.util.List;
 
 @Configuration
-@ConditionalOnClass(RestTemplate.class)
+@ConditionalOnClass(name = "org.springframework.web.client.RestTemplate")
 class RestTemplateMetricsConfiguration {
     @Autowired(required = false)
     RestTemplateTagConfigurer tagConfigurer;

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/export/prometheus/PrometheusEndpointConfiguration.java
Patch:
@@ -16,12 +16,11 @@
 package io.micrometer.spring.export.prometheus;
 
 import io.micrometer.core.instrument.prometheus.PrometheusMeterRegistry;
-import org.springframework.boot.actuate.endpoint.Endpoint;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 
-@ConditionalOnClass(Endpoint.class)
+@ConditionalOnClass(name = "org.springframework.boot.actuate.endpoint.Endpoint")
 @Configuration
 public class PrometheusEndpointConfiguration {
     @Bean

File: micrometer-spring-legacy/src/samples/java/io/micrometer/spring/samples/AtlasSample.java
Patch:
@@ -20,9 +20,9 @@
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.scheduling.annotation.EnableScheduling;
 
-//@SpringBootApplication(scanBasePackages = "io.micromter.spring.samples.components")
-//@EnableAtlasMetrics
-//@EnableScheduling
+@SpringBootApplication(scanBasePackages = "io.micrometer.spring.samples.components")
+@EnableAtlasMetrics
+@EnableScheduling
 public class AtlasSample {
     public static void main(String[] args) {
         SpringApplication.run(AtlasSample.class, args);

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/web/MetricsHandlerInterceptorTest.java
Patch:
@@ -110,7 +110,7 @@ public void longRunningRequest() throws Exception {
                 .andReturn();
 
         // while the mapping is running, it contributes to the activeTasks count
-        assertThat(registry.findMeter(LongTaskTimer.class, "my_long_request"))
+        assertThat(registry.findMeter(LongTaskTimer.class, "my_long_request", "region", "test"))
                 .hasValueSatisfying(t -> assertThat(t.activeTasks()).isEqualTo(1));
 
         // once the mapping completes, we can gather information about status, etc.
@@ -165,7 +165,7 @@ public String successfulWithExtraTags(@PathVariable Long id) {
         }
 
         @Timed // contains dimensions for status, etc. that can't be known until after the response is sent
-        @Timed(value = "my_long_request", longTask = true) // in progress metric
+        @Timed(value = "my_long_request", extraTags = {"region", "test"}, longTask = true) // in progress metric
         @GetMapping("/long/{id}")
         public Callable<String> takesLongTimeToSatisfy(@PathVariable Long id) {
             return () -> {

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/web/MetricsHandlerInterceptor.java
Patch:
@@ -16,6 +16,7 @@
 package io.micrometer.spring.web;
 
 import org.springframework.web.method.HandlerMethod;
+import org.springframework.web.servlet.ModelAndView;
 import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;
 
 import javax.servlet.http.HttpServletRequest;

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/web/WebmvcTagConfigurer.java
Patch:
@@ -37,6 +37,7 @@ public class WebmvcTagConfigurer {
      * @param handler  The request method that is responsible for handling the request.
      * @return A set of tags added to every Spring MVC HTTP request
      */
+    @SuppressWarnings("unused") // we aren't doing anything with the handler by default
     public Iterable<Tag> httpLongRequestTags(HttpServletRequest request, Object handler) {
         return asList(method(request), uri(request));
     }

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/MetricsConfiguration.java
Patch:
@@ -43,7 +43,7 @@ public TagFormatter tagFormatter() {
 
     @Configuration
     @ConditionalOnWebApplication
-    @Import(InstrumentServletRequestConfiguration.class)
+    @Import(MetricsServletRequestConfiguration.class)
     static class WebMvcConfiguration {}
 
     /**

File: micrometer-core/src/main/java/io/micrometer/core/instrument/binder/ClassLoaderMetrics.java
Patch:
@@ -26,6 +26,6 @@ public void bindTo(MeterRegistry registry) {
         ClassLoadingMXBean classLoadingBean = ManagementFactory.getClassLoadingMXBean();
 
         registry.gauge("classes_loaded", classLoadingBean, ClassLoadingMXBean::getLoadedClassCount);
-        registry.gauge("classes_unloaded", classLoadingBean, ClassLoadingMXBean::getUnloadedClassCount);
+        registry.counter("classes_unloaded", classLoadingBean, ClassLoadingMXBean::getUnloadedClassCount);
     }
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/prometheus/PrometheusDistributionSummary.java
Patch:
@@ -17,6 +17,7 @@
 
 import io.micrometer.core.instrument.Meters;
 import io.micrometer.core.instrument.Tag;
+import io.micrometer.core.instrument.prometheus.internal.CustomPrometheusSummary;
 import io.micrometer.core.instrument.util.MeterId;
 import io.micrometer.core.instrument.DistributionSummary;
 import io.micrometer.core.instrument.Measurement;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/prometheus/PrometheusLongTaskTimer.java
Patch:
@@ -19,6 +19,7 @@
 import io.micrometer.core.instrument.Measurement;
 import io.micrometer.core.instrument.Meters;
 import io.micrometer.core.instrument.Tag;
+import io.micrometer.core.instrument.prometheus.internal.CustomPrometheusLongTaskTimer;
 import io.micrometer.core.instrument.util.MeterId;
 
 import java.util.List;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/prometheus/PrometheusTimer.java
Patch:
@@ -18,6 +18,7 @@
 import io.micrometer.core.instrument.Clock;
 import io.micrometer.core.instrument.Measurement;
 import io.micrometer.core.instrument.AbstractTimer;
+import io.micrometer.core.instrument.prometheus.internal.CustomPrometheusSummary;
 import io.micrometer.core.instrument.util.MeterId;
 import io.micrometer.core.instrument.util.TimeUtils;
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/prometheus/internal/CustomPrometheusLongTaskTimer.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.core.instrument.prometheus;
+package io.micrometer.core.instrument.prometheus.internal;
 
 import io.micrometer.core.instrument.Tag;
 import io.prometheus.client.Collector;
@@ -44,13 +44,13 @@ public CustomPrometheusLongTaskTimer(String name, List<String> tagKeys, Clock cl
         this.tagKeys = tagKeys;
     }
 
-    Child child(Iterable<Tag> tags) {
+    public Child child(Iterable<Tag> tags) {
         Child child = new Child(tags);
         children.add(child);
         return child;
     }
 
-    class Child implements CustomCollectorChild {
+    public class Child implements CustomCollectorChild {
         private final List<String> tagValues;
         private final ConcurrentMap<Long, Long> tasks = new ConcurrentHashMap<>();
         private final AtomicLong nextTask = new AtomicLong(0L);

File: micrometer-core/src/samples/java/io/micrometer/core/samples/TimerSample.java
Patch:
@@ -30,9 +30,9 @@
 
 public class TimerSample {
     public static void main(String[] args) {
-        MeterRegistry registry = Registries.influx();
+        MeterRegistry registry = Registries.atlas();
         GKQuantiles quantiles = GKQuantiles.quantiles(0.95, 0.5).error(0.05).create();
-        Timer timer = registry.timerBuilder("timer4").quantiles(quantiles).create();
+        Timer timer = registry.timerBuilder("timer").quantiles(quantiles).create();
 
         RandomEngine r = new MersenneTwister64(0);
         Normal incomingRequests = new Normal(0, 1, r);

File: micrometer-core/src/test/java/io/micrometer/core/instrument/binder/ExecutorServiceMetricsTest.java
Patch:
@@ -83,7 +83,7 @@ void monitorExecutorService() throws InterruptedException {
     }
 
     private void assertThreadPoolExecutorMetrics(String name) {
-        assertThat(registry.findMeter(Meter.Type.Counter, name)).isPresent();
+        assertThat(registry.findMeter(Meter.Type.Counter, name + "_tasks")).isPresent();
         assertThat(registry.findMeter(Gauge.class, name + "_queue_size")).isPresent();
         assertThat(registry.findMeter(Gauge.class, name + "_pool_size")).isPresent();
     }

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/scheduling/ExecutorServiceMetricsTest.java
Patch:
@@ -58,7 +58,7 @@ public void taskScheduler() {
     }
 
     private void assertThreadPoolExecutorMetrics(String name) {
-        assertThat(registry.findMeter(Meter.Type.Counter, name)).isPresent();
+        assertThat(registry.findMeter(Meter.Type.Counter, name + "_tasks")).isPresent();
         assertThat(registry.findMeter(Gauge.class, name + "_queue_size")).isPresent();
         assertThat(registry.findMeter(Gauge.class, name + "_pool_size")).isPresent();
     }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/spectator/step/FunctionTrackingStepCounter.java
Patch:
@@ -63,8 +63,9 @@ public long count() {
     }
 
     private void pollFunction() {
-        if(ref.get() != null) {
-            long absoluteCount = (long) f.applyAsDouble(ref.get());
+        T t = ref.get();
+        if(t != null) {
+            long absoluteCount = (long) f.applyAsDouble(t);
             long inc = Math.max(0, absoluteCount - lastCount.get());
             lastCount.addAndGet(inc);
             value.getCurrent().add(inc);

File: micrometer-core/src/main/java/io/micrometer/core/instrument/AbstractMeterRegistry.java
Patch:
@@ -19,7 +19,6 @@
 import io.micrometer.core.instrument.stats.quantile.Quantiles;
 
 import java.util.ArrayList;
-import java.util.LinkedList;
 import java.util.List;
 import java.util.stream.Stream;
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Counter.java
Patch:
@@ -22,7 +22,9 @@ public interface Counter extends Meter {
     /**
      * Update the counter by one.
      */
-    void increment();
+    default void increment() {
+        increment(1.0);
+    }
 
     /**
      * Update the counter by {@code amount}.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/datadog/DatadogRegistry.java
Patch:
@@ -44,7 +44,7 @@ final class DatadogRegistry extends AbstractStepRegistry {
     private final String hostTag;
 
     public DatadogRegistry(DatadogConfig config, Clock clock) {
-        super(clock, config);
+        super(config, clock);
 
         try {
             this.metricsEndpoint = URI.create("https://app.datadoghq.com/api/v1/series?api_key=" + config.apiKey()).toURL();

File: micrometer-core/src/main/java/io/micrometer/core/instrument/ganglia/GangliaConfig.java
Patch:
@@ -42,8 +42,7 @@ default String prefix() {
     }
 
     /**
-     * Returns the step size (reporting frequency) to use. The default is 10 seconds, matching the default
-     * for the Datadog agent.
+     * Returns the step size (reporting frequency) to use. The default is 10 seconds.
      */
     default Duration step() {
         String v = get(prefix() + ".step");

File: micrometer-core/src/main/java/io/micrometer/core/instrument/graphite/GraphiteConfig.java
Patch:
@@ -42,8 +42,7 @@ default String prefix() {
     }
 
     /**
-     * Returns the step size (reporting frequency) to use. The default is 10 seconds, matching the default
-     * for the Datadog agent.
+     * Returns the step size (reporting frequency) to use. The default is 10 seconds.
      */
     default Duration step() {
         String v = get(prefix() + ".step");

File: micrometer-core/src/main/java/io/micrometer/core/instrument/spectator/step/StepRegistryConfig.java
Patch:
@@ -32,16 +32,15 @@ public interface StepRegistryConfig extends RegistryConfig {
     String prefix();
     
     /**
-     * Returns the step size (reporting frequency) to use. The default is 10 seconds, matching the default
-     * for the Datadog agent.
+     * Returns the step size (reporting frequency) to use. The default is 10 seconds.
      */
     default Duration step() {
         String v = get(prefix() + ".step");
         return v == null ? Duration.ofSeconds(10) : Duration.parse(v);
     }
 
     /**
-     * Returns true if publishing to Datadog is enabled. Default is {@code true}.
+     * Returns true if publishing is enabled. Default is {@code true}.
      */
     default boolean enabled() {
         String v = get(prefix() + ".enabled");

File: micrometer-core/src/samples/java/io/micrometer/core/samples/CounterSample.java
Patch:
@@ -26,7 +26,7 @@
 
 public class CounterSample {
     public static void main(String[] args) {
-        Counter counter = Registries.ganglia().counter("complextagvalue/{id}水");
+        Counter counter = Registries.influx().counter("counter");
 
         RandomEngine r = new MersenneTwister64(0);
         Normal dist = new Normal(0, 1, r);

File: micrometer-core/src/samples/java/io/micrometer/core/samples/LongTaskTimerSample.java
Patch:
@@ -30,7 +30,7 @@
 
 public class LongTaskTimerSample {
     public static void main(String[] args) {
-        LongTaskTimer timer = Registries.prometheus().longTaskTimer("longTaskTimer");
+        LongTaskTimer timer = Registries.influx().longTaskTimer("longTaskTimer");
 
         RandomEngine r = new MersenneTwister64(0);
         Normal incomingRequests = new Normal(0, 1, r);

File: micrometer-core/src/main/java/io/micrometer/core/instrument/ImmutableTag.java
Patch:
@@ -40,9 +40,9 @@ public String getValue() {
     public boolean equals(Object o) {
         if (this == o) return true;
         if (o == null || getClass() != o.getClass()) return false;
-        ImmutableTag that = (ImmutableTag) o;
-        return Objects.equals(key, that.key) &&
-                Objects.equals(value, that.value);
+        Tag that = (Tag) o;
+        return Objects.equals(key, that.getKey()) &&
+                Objects.equals(value, that.getValue());
     }
 
     @Override

File: micrometer-core/src/main/java/io/micrometer/core/instrument/atlas/AtlasUtils.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.spring.export.atlas;
+package io.micrometer.core.instrument.atlas;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.module.SimpleModule;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/datadog/DatadogRegistry.java
Patch:
@@ -43,7 +43,7 @@ final class DatadogRegistry extends AbstractStepRegistry {
     private final URL metricsEndpoint;
     private final String hostTag;
 
-    public DatadogRegistry(Clock clock, DatadogConfig config) {
+    public DatadogRegistry(DatadogConfig config, Clock clock) {
         super(clock, config);
 
         try {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/graphite/GraphiteMeterRegistry.java
Patch:
@@ -38,7 +38,7 @@ public GraphiteMeterRegistry(GraphiteConfig config) {
     }
 
     public GraphiteMeterRegistry(GraphiteConfig config, HierarchicalNameMapper nameMapper, Clock clock) {
-        super(nameMapper, clock);
+        super(nameMapper, clock, new GraphiteTagFormatter());
 
         this.config = config;
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/jmx/JmxMeterRegistry.java
Patch:
@@ -17,6 +17,7 @@
 
 import com.codahale.metrics.JmxReporter;
 import io.micrometer.core.instrument.Clock;
+import io.micrometer.core.instrument.IdentityTagFormatter;
 import io.micrometer.core.instrument.dropwizard.DropwizardMeterRegistry;
 import io.micrometer.core.instrument.util.HierarchicalNameMapper;
 
@@ -28,7 +29,7 @@ public JmxMeterRegistry() {
     }
 
     public JmxMeterRegistry(HierarchicalNameMapper nameMapper, Clock clock) {
-        super(nameMapper, clock);
+        super(nameMapper, clock, new IdentityTagFormatter());
 
         this.reporter = JmxReporter.forRegistry(getDropwizardRegistry()).build();
         this.reporter.start();

File: micrometer-core/src/samples/java/io/micrometer/core/samples/CounterSample.java
Patch:
@@ -26,7 +26,7 @@
 
 public class CounterSample {
     public static void main(String[] args) {
-        Counter counter = Registries.jmx().counter("counter");
+        Counter counter = Registries.ganglia().counter("complextagvalue/{id}水");
 
         RandomEngine r = new MersenneTwister64(0);
         Normal dist = new Normal(0, 1, r);

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/export/prometheus/EnablePrometheusMetrics.java
Patch:
@@ -24,7 +24,6 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
 @EnableMetrics
-@EnablePrometheusScraping
-@Import(PrometheusMetricsConfiguration.class)
+@Import({ PrometheusMetricsConfiguration.class, PrometheusEndpointConfiguration.class })
 public @interface EnablePrometheusMetrics {
 }

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/export/prometheus/PrometheusEndpointConfiguration.java
Patch:
@@ -16,9 +16,12 @@
 package io.micrometer.spring.export.prometheus;
 
 import io.micrometer.core.instrument.prometheus.PrometheusMeterRegistry;
+import org.springframework.boot.actuate.endpoint.Endpoint;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 
+@ConditionalOnClass(Endpoint.class)
 @Configuration
 public class PrometheusEndpointConfiguration {
     @Bean

File: micrometer-spring-legacy/src/test/java/io/micrometer/spring/web/MetricsRestTemplateInterceptorTest.java
Patch:
@@ -15,7 +15,6 @@
  */
 package io.micrometer.spring.web;
 
-import io.micrometer.core.instrument.IdentityTagFormatter;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.Timer;
 import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
@@ -40,7 +39,7 @@ public void interceptRestTemplate() {
 
         RestTemplate restTemplate = new RestTemplate();
         restTemplate.setInterceptors(singletonList(new MetricsRestTemplateInterceptor(
-                registry, new RestTemplateTagConfigurer(new IdentityTagFormatter()),
+                registry, new RestTemplateTagConfigurer(),
                 "http_client_requests"
         )));
 

File: micrometer-core/src/test/java/io/micrometer/core/instrument/MeterRegistriesProvider.java
Patch:
@@ -15,7 +15,6 @@
  */
 package io.micrometer.core.instrument;
 
-import com.codahale.metrics.MetricRegistry;
 import com.netflix.spectator.api.DefaultRegistry;
 import io.micrometer.core.instrument.datadog.DatadogConfig;
 import io.micrometer.core.instrument.datadog.DatadogMeterRegistry;
@@ -60,7 +59,7 @@ public Duration step() {
                         return Duration.ofSeconds(1);
                     }
                 }),
-                new DropwizardMeterRegistry(new MetricRegistry(), new HierarchicalNameMapper(), new MockClock())
+                new DropwizardMeterRegistry(new HierarchicalNameMapper(), new MockClock())
         ).map(Arguments::of);
     }
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/dropwizard/DropwizardMeterRegistry.java
Patch:
@@ -41,9 +41,9 @@ public class DropwizardMeterRegistry extends AbstractMeterRegistry {
     private final ConcurrentMap<MeterId, Meter> meterMap = new ConcurrentHashMap<>();
     private final HierarchicalNameMapper nameMapper;
 
-    public DropwizardMeterRegistry(MetricRegistry registry, HierarchicalNameMapper nameMapper, Clock clock) {
+    public DropwizardMeterRegistry(HierarchicalNameMapper nameMapper, Clock clock) {
         super(clock);
-        this.registry = registry;
+        this.registry = new MetricRegistry();
         this.nameMapper = nameMapper;
     }
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/util/HierarchicalNameMapper.java
Patch:
@@ -29,6 +29,8 @@
  * @author Jon Schneider
  */
 public class HierarchicalNameMapper {
+    public static final HierarchicalNameMapper DEFAULT = new HierarchicalNameMapper();
+
     protected String tagSeparator = ".";
     protected String valueSeparator = ".";
     protected Comparator<Tag> tagComparator = Comparator.comparing(Tag::getKey);

File: micrometer-core/src/samples/java/io/micrometer/core/samples/CounterSample.java
Patch:
@@ -26,7 +26,7 @@
 
 public class CounterSample {
     public static void main(String[] args) {
-        Counter counter = Registries.graphite().counter("counter");
+        Counter counter = Registries.jmx().counter("counter");
 
         RandomEngine r = new MersenneTwister64(0);
         Normal dist = new Normal(0, 1, r);

File: micrometer-core/src/samples/java/io/micrometer/core/samples/CounterSample.java
Patch:
@@ -26,7 +26,7 @@
 
 public class CounterSample {
     public static void main(String[] args) {
-        Counter counter = Registries.ganglia().counter("counter");
+        Counter counter = Registries.graphite().counter("counter");
 
         RandomEngine r = new MersenneTwister64(0);
         Normal dist = new Normal(0, 1, r);

File: micrometer-core/src/samples/java/io/micrometer/core/samples/TimerSample.java
Patch:
@@ -28,8 +28,8 @@
 
 public class TimerSample {
     public static void main(String[] args) {
-        Timer timer = Registries.prometheus().timer("timer", "instance", "local");
-        Timer timer2 = Registries.prometheus().timer("timer", "instance", "cloud");
+        Timer timer = Registries.ganglia().timer("timer", "instance", "local");
+        Timer timer2 = Registries.ganglia().timer("timer", "instance", "cloud");
 
         RandomEngine r = new MersenneTwister64(0);
         Normal incomingRequests = new Normal(0, 1, r);

File: micrometer-core/src/samples/java/io/micrometer/core/samples/CounterSample.java
Patch:
@@ -26,7 +26,7 @@
 
 public class CounterSample {
     public static void main(String[] args) {
-        Counter counter = Registries.datadog().counter("counter");
+        Counter counter = Registries.ganglia().counter("counter");
 
         RandomEngine r = new MersenneTwister64(0);
         Normal dist = new Normal(0, 1, r);

File: micrometer-core/src/main/java/io/micrometer/core/instrument/AbstractMeterRegistry.java
Patch:
@@ -19,6 +19,7 @@
 import io.micrometer.core.instrument.stats.quantile.Quantiles;
 
 import java.util.ArrayList;
+import java.util.LinkedList;
 import java.util.List;
 import java.util.stream.Stream;
 

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/EnableMetrics.java
Patch:
@@ -26,7 +26,6 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
 @Inherited
-@Import({ MetricsConfiguration.class, MetricsConfiguration.class })
+@Import(MetricsConfiguration.class)
 public @interface EnableMetrics {
 }
-

File: micrometer-core/src/jmh/java/io/micrometer/core/benchmark/SimpleMeasureBenchmark.java
Patch:
@@ -61,7 +61,7 @@ public static void main(String[] args) throws RunnerException {
 
     @Setup
     public void setup() {
-        MeterId meterId = new MeterId("tested.timer", Tag.of("tag1", "v1"), Tag.of("tag2", "v2"));
+        MeterId meterId = new MeterId("tested.timer", Arrays.asList(Tag.of("tag1", "v1"), Tag.of("tag2", "v2")));
         timer = new SimpleTimer(meterId, Clock.SYSTEM);
         longTaskTimer = new SimpleLongTaskTimer(meterId, Clock.SYSTEM);
         counter = new SimpleCounter(meterId);

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Measurement.java
Patch:
@@ -30,7 +30,7 @@ public final class Measurement {
 
     private final String name;
     private final SortedSet<Tag> tags = new TreeSet<>(Comparator.comparing(Tag::getKey));
-    private final double    value;
+    private final double value;
 
     /**
      * Create a new instance.

File: micrometer-core/src/main/java/io/micrometer/core/instrument/prometheus/CustomCollectorChild.java
Patch:
@@ -27,7 +27,7 @@
 public interface CustomCollectorChild {
     Stream<Collector.MetricFamilySamples.Sample> collect();
 
-    default Iterable<Measurement> measure() {
+    default List<Measurement> measure() {
         return collect().map(sample -> {
             List<Tag> tags = IntStream.range(0, sample.labelNames.size())
                     .mapToObj(i -> Tag.of(sample.labelNames.get(i), sample.labelValues.get(i)))

File: micrometer-core/src/main/java/io/micrometer/core/instrument/prometheus/PrometheusCounter.java
Patch:
@@ -21,6 +21,7 @@
 import io.micrometer.core.instrument.util.MeterId;
 
 import java.util.Collections;
+import java.util.List;
 
 public class PrometheusCounter implements Counter {
     private final MeterId id;
@@ -57,7 +58,7 @@ public Iterable<Tag> getTags() {
     }
 
     @Override
-    public Iterable<Measurement> measure() {
+    public List<Measurement> measure() {
         return Collections.singletonList(id.measurement(count()));
     }
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/prometheus/PrometheusDistributionSummary.java
Patch:
@@ -20,6 +20,8 @@
 import io.micrometer.core.instrument.DistributionSummary;
 import io.micrometer.core.instrument.Measurement;
 
+import java.util.List;
+
 public class PrometheusDistributionSummary implements DistributionSummary {
     private final MeterId id;
     private final CustomPrometheusSummary.Child summary;
@@ -57,7 +59,7 @@ public Iterable<Tag> getTags() {
     }
 
     @Override
-    public Iterable<Measurement> measure() {
+    public List<Measurement> measure() {
         return summary.measure();
     }
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/prometheus/PrometheusGauge.java
Patch:
@@ -21,6 +21,7 @@
 import io.micrometer.core.instrument.util.MeterId;
 
 import java.util.Collections;
+import java.util.List;
 
 public class PrometheusGauge implements Gauge {
     private final MeterId id;
@@ -47,7 +48,7 @@ public Iterable<Tag> getTags() {
     }
 
     @Override
-    public Iterable<Measurement> measure() {
+    public List<Measurement> measure() {
         return Collections.singletonList(id.measurement(gauge.get()));
     }
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/prometheus/PrometheusLongTaskTimer.java
Patch:
@@ -20,6 +20,8 @@
 import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.util.MeterId;
 
+import java.util.List;
+
 public class PrometheusLongTaskTimer implements LongTaskTimer {
     private final MeterId id;
     private final CustomPrometheusLongTaskTimer.Child timer;
@@ -65,7 +67,7 @@ public Iterable<Tag> getTags() {
     }
 
     @Override
-    public Iterable<Measurement> measure() {
+    public List<Measurement> measure() {
         return timer.measure();
     }
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/prometheus/PrometheusTimer.java
Patch:
@@ -21,6 +21,7 @@
 import io.micrometer.core.instrument.util.MeterId;
 import io.micrometer.core.instrument.util.TimeUtils;
 
+import java.util.List;
 import java.util.concurrent.TimeUnit;
 
 public class PrometheusTimer extends AbstractTimer {
@@ -52,7 +53,7 @@ public double totalTime(TimeUnit unit) {
     }
 
     @Override
-    public Iterable<Measurement> measure() {
+    public List<Measurement> measure() {
         return summary.measure();
     }
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/simple/SimpleCounter.java
Patch:
@@ -21,6 +21,7 @@
 import io.micrometer.core.instrument.util.MeterId;
 
 import java.util.Collections;
+import java.util.List;
 import java.util.concurrent.atomic.DoubleAdder;
 
 /**
@@ -52,7 +53,7 @@ public double count() {
     }
 
     @Override
-    public Iterable<Measurement> measure() {
+    public List<Measurement> measure() {
         return Collections.singletonList(countId.measurement(count()));
     }
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/simple/SimpleDistributionSummary.java
Patch:
@@ -21,6 +21,7 @@
 import io.micrometer.core.instrument.util.MeterId;
 
 import java.util.Arrays;
+import java.util.List;
 import java.util.concurrent.atomic.DoubleAdder;
 import java.util.concurrent.atomic.LongAdder;
 
@@ -60,7 +61,7 @@ public double totalAmount() {
     }
 
     @Override
-    public Iterable<Measurement> measure() {
+    public List<Measurement> measure() {
         return Arrays.asList(
                 countId.measurement(count()),
                 amountId.measurement(totalAmount()));

File: micrometer-core/src/main/java/io/micrometer/core/instrument/simple/SimpleGauge.java
Patch:
@@ -22,6 +22,7 @@
 
 import java.lang.ref.WeakReference;
 import java.util.Collections;
+import java.util.List;
 import java.util.function.ToDoubleFunction;
 
 public class SimpleGauge<T> extends AbstractSimpleMeter implements Gauge {
@@ -43,7 +44,7 @@ public double value() {
     }
 
     @Override
-    public Iterable<Measurement> measure() {
+    public List<Measurement> measure() {
         return Collections.singletonList(gaugeId.measurement(value()));
     }
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/simple/SimpleLongTaskTimer.java
Patch:
@@ -22,6 +22,7 @@
 import io.micrometer.core.instrument.Measurement;
 
 import java.util.Arrays;
+import java.util.List;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
 import java.util.concurrent.atomic.AtomicLong;
@@ -85,7 +86,7 @@ public int activeTasks() {
     }
 
     @Override
-    public Iterable<Measurement> measure() {
+    public List<Measurement> measure() {
         return Arrays.asList(
                 activeTasksId.measurement(activeTasks()),
                 durationId.measurement(duration()));

File: micrometer-core/src/main/java/io/micrometer/core/instrument/simple/SimpleTimer.java
Patch:
@@ -23,6 +23,7 @@
 import io.micrometer.core.instrument.AbstractTimer;
 
 import java.util.Arrays;
+import java.util.List;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.LongAdder;
 
@@ -64,7 +65,7 @@ public double totalTime(TimeUnit unit) {
     }
 
     @Override
-    public Iterable<Measurement> measure() {
+    public List<Measurement> measure() {
         return Arrays.asList(
                 countId.measurement(count()),
                 amountId.measurement(totalTime(TimeUnit.NANOSECONDS)));

File: micrometer-core/src/main/java/io/micrometer/core/instrument/spectator/SpectatorCounter.java
Patch:
@@ -19,6 +19,8 @@
 import io.micrometer.core.instrument.Measurement;
 import io.micrometer.core.instrument.Tag;
 
+import java.util.List;
+
 public class SpectatorCounter implements Counter {
     private com.netflix.spectator.api.Counter counter;
 
@@ -52,7 +54,7 @@ public Iterable<Tag> getTags() {
     }
 
     @Override
-    public Iterable<Measurement> measure() {
+    public List<Measurement> measure() {
         return SpectatorUtils.measurements(counter);
     }
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/spectator/SpectatorDistributionSummary.java
Patch:
@@ -19,6 +19,8 @@
 import io.micrometer.core.instrument.DistributionSummary;
 import io.micrometer.core.instrument.Measurement;
 
+import java.util.List;
+
 public class SpectatorDistributionSummary implements DistributionSummary {
     private com.netflix.spectator.api.DistributionSummary distributionSummary;
 
@@ -57,7 +59,7 @@ public Iterable<Tag> getTags() {
     }
 
     @Override
-    public Iterable<Measurement> measure() {
+    public List<Measurement> measure() {
         return SpectatorUtils.measurements(distributionSummary);
     }
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/spectator/SpectatorGauge.java
Patch:
@@ -19,6 +19,8 @@
 import io.micrometer.core.instrument.Measurement;
 import io.micrometer.core.instrument.Tag;
 
+import java.util.List;
+
 public class SpectatorGauge implements Gauge {
     private com.netflix.spectator.api.Gauge gauge;
 
@@ -42,7 +44,7 @@ public Iterable<Tag> getTags() {
     }
 
     @Override
-    public Iterable<Measurement> measure() {
+    public List<Measurement> measure() {
         return SpectatorUtils.measurements(gauge);
     }
 }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/spectator/SpectatorLongTaskTimer.java
Patch:
@@ -19,6 +19,8 @@
 import io.micrometer.core.instrument.LongTaskTimer;
 import io.micrometer.core.instrument.Measurement;
 
+import java.util.List;
+
 public class SpectatorLongTaskTimer implements LongTaskTimer {
     private final com.netflix.spectator.api.LongTaskTimer timer;
 
@@ -62,7 +64,7 @@ public Iterable<Tag> getTags() {
     }
 
     @Override
-    public Iterable<Measurement> measure() {
+    public List<Measurement> measure() {
         return SpectatorUtils.measurements(timer);
     }
 }
\ No newline at end of file

File: micrometer-core/src/main/java/io/micrometer/core/instrument/spectator/SpectatorTimer.java
Patch:
@@ -21,6 +21,7 @@
 import io.micrometer.core.instrument.util.MeterId;
 import io.micrometer.core.instrument.util.TimeUtils;
 
+import java.util.List;
 import java.util.concurrent.TimeUnit;
 
 public class SpectatorTimer extends AbstractTimer {
@@ -48,7 +49,7 @@ public double totalTime(TimeUnit unit) {
     }
 
     @Override
-    public Iterable<Measurement> measure() {
+    public List<Measurement> measure() {
         return SpectatorUtils.measurements(timer);
     }
 }

File: micrometer-core/src/test/java/io/micrometer/core/instrument/DistributionSummaryTest.java
Patch:
@@ -56,7 +56,7 @@ void recordNegative(MeterRegistry registry) {
 
         ds.record(-10);
         assertAll(() -> assertEquals(0, ds.count()),
-                () -> assertEquals(-0L, ds.totalAmount()));
+                () -> assertEquals(0L, ds.totalAmount()));
     }
 
     @DisplayName("record zero")

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/export/prometheus/PrometheusMetricsConfiguration.java
Patch:
@@ -31,7 +31,7 @@ PrometheusTagFormatter tagFormatter() {
     @ConditionalOnMissingBean
     @Bean
     CollectorRegistry collectorRegistry() {
-        return new CollectorRegistry();
+        return new CollectorRegistry(true);
     }
 
     @Bean

File: micrometer-core/src/main/java/io/micrometer/core/instrument/spectator/SpectatorMeterRegistry.java
Patch:
@@ -26,6 +26,7 @@
 import java.util.*;
 import java.util.function.ToDoubleFunction;
 import java.util.stream.Collectors;
+import java.util.stream.Stream;
 
 import static java.util.stream.StreamSupport.stream;
 import static io.micrometer.core.instrument.spectator.SpectatorUtils.spectatorId;
@@ -75,7 +76,7 @@ public long monotonicTime() {
     }
 
     private Collection<com.netflix.spectator.api.Tag> toSpectatorTags(Iterable<io.micrometer.core.instrument.Tag> tags) {
-        return stream(tags.spliterator(), false)
+        return Stream.concat(commonTags.stream(), stream(tags.spliterator(), false))
                 .map(t -> new BasicTag(t.getKey(), t.getValue()))
                 .collect(Collectors.toList());
     }

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/MetricsConfiguration.java
Patch:
@@ -32,8 +32,6 @@
  * @author Jon Schneider
  */
 @Configuration
-// this class didn't exist until Spring 5
-@ConditionalOnMissingClass("org.springframework.web.server.WebFilter") // TODO got to be a better way...
 @Import({
         RestTemplateMetricsConfiguration.class,
         RecommendedMeterBinders.class,

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/export/prometheus/EnablePrometheusScraping.java
Patch:
@@ -43,8 +43,7 @@
  * <li>{@code endpoints.prometheus.sensitive} (default: {@code true})</li>
  * </ul>
  *
- * @author Marco Aust
- * @author Eliezio Oliveira
+ * @author Jon Schneider
  */
 @Target(ElementType.TYPE)
 @Retention(RetentionPolicy.RUNTIME)

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/export/prometheus/PrometheusEndpointConfiguration.java
Patch:
@@ -15,9 +15,9 @@
  */
 package io.micrometer.spring.export.prometheus;
 
+import io.micrometer.core.instrument.prometheus.PrometheusMeterRegistry;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
-import io.micrometer.core.instrument.prometheus.PrometheusMeterRegistry;
 
 @Configuration
 public class PrometheusEndpointConfiguration {

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/export/prometheus/PrometheusMetricsConfiguration.java
Patch:
@@ -35,7 +35,7 @@ CollectorRegistry collectorRegistry() {
     }
 
     @Bean
-    PrometheusMeterRegistry meterRegistry(CollectorRegistry collectorRegistry) {
+    PrometheusMeterRegistry prometheusMeterRegistry(CollectorRegistry collectorRegistry) {
         return new PrometheusMeterRegistry();
     }
 }

File: micrometer-core/src/jmh/java/io/micrometer/core/benchmark/QuantilesBenchmark.java
Patch:
@@ -27,6 +27,9 @@
 
 import java.util.concurrent.TimeUnit;
 
+@Warmup(iterations = 2)
+@Fork(value = 0)
+@Measurement(iterations = 5)
 @BenchmarkMode(Mode.AverageTime)
 @OutputTimeUnit(TimeUnit.NANOSECONDS)
 @State(Scope.Benchmark)

File: micrometer-core/src/main/java/io/micrometer/core/instrument/AbstractMeterRegistry.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.core.instrument.internal;
+package io.micrometer.core.instrument;
 
 import io.micrometer.core.instrument.*;
 import io.micrometer.core.instrument.stats.hist.Histogram;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/ImmutableTag.java
Patch:
@@ -13,9 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.core.instrument.internal;
-
-import io.micrometer.core.instrument.Tag;
+package io.micrometer.core.instrument;
 
 import java.util.Objects;
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/Tag.java
Patch:
@@ -15,8 +15,6 @@
  */
 package io.micrometer.core.instrument;
 
-import io.micrometer.core.instrument.internal.ImmutableTag;
-
 /**
  * Key/value pair representing a dimension of a meter used to classify and drill into measurements.
  *

File: micrometer-core/src/main/java/io/micrometer/core/instrument/prometheus/PrometheusCounter.java
Patch:
@@ -18,7 +18,7 @@
 import io.micrometer.core.instrument.Counter;
 import io.micrometer.core.instrument.Measurement;
 import io.micrometer.core.instrument.Tag;
-import io.micrometer.core.instrument.internal.MeterId;
+import io.micrometer.core.instrument.util.MeterId;
 
 import java.util.Collections;
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/prometheus/PrometheusDistributionSummary.java
Patch:
@@ -16,7 +16,7 @@
 package io.micrometer.core.instrument.prometheus;
 
 import io.micrometer.core.instrument.Tag;
-import io.micrometer.core.instrument.internal.MeterId;
+import io.micrometer.core.instrument.util.MeterId;
 import io.micrometer.core.instrument.DistributionSummary;
 import io.micrometer.core.instrument.Measurement;
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/prometheus/PrometheusGauge.java
Patch:
@@ -18,7 +18,7 @@
 import io.micrometer.core.instrument.Gauge;
 import io.micrometer.core.instrument.Measurement;
 import io.micrometer.core.instrument.Tag;
-import io.micrometer.core.instrument.internal.MeterId;
+import io.micrometer.core.instrument.util.MeterId;
 
 import java.util.Collections;
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/prometheus/PrometheusLongTaskTimer.java
Patch:
@@ -18,7 +18,7 @@
 import io.micrometer.core.instrument.LongTaskTimer;
 import io.micrometer.core.instrument.Measurement;
 import io.micrometer.core.instrument.Tag;
-import io.micrometer.core.instrument.internal.MeterId;
+import io.micrometer.core.instrument.util.MeterId;
 
 public class PrometheusLongTaskTimer implements LongTaskTimer {
     private final MeterId id;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/prometheus/PrometheusMeterRegistry.java
Patch:
@@ -16,9 +16,9 @@
 package io.micrometer.core.instrument.prometheus;
 
 import io.micrometer.core.instrument.*;
-import io.micrometer.core.instrument.internal.AbstractMeterRegistry;
-import io.micrometer.core.instrument.internal.MapAccess;
-import io.micrometer.core.instrument.internal.MeterId;
+import io.micrometer.core.instrument.AbstractMeterRegistry;
+import io.micrometer.core.instrument.util.MapAccess;
+import io.micrometer.core.instrument.util.MeterId;
 import io.micrometer.core.instrument.stats.hist.Histogram;
 import io.micrometer.core.instrument.stats.quantile.Quantiles;
 import io.prometheus.client.Collector;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/prometheus/PrometheusTimer.java
Patch:
@@ -17,9 +17,9 @@
 
 import io.micrometer.core.instrument.Clock;
 import io.micrometer.core.instrument.Measurement;
-import io.micrometer.core.instrument.internal.AbstractTimer;
-import io.micrometer.core.instrument.internal.MeterId;
-import io.micrometer.core.instrument.internal.TimeUtils;
+import io.micrometer.core.instrument.AbstractTimer;
+import io.micrometer.core.instrument.util.MeterId;
+import io.micrometer.core.instrument.util.TimeUtils;
 
 import java.util.concurrent.TimeUnit;
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/simple/AbstractSimpleMeter.java
Patch:
@@ -16,7 +16,7 @@
 package io.micrometer.core.instrument.simple;
 
 import io.micrometer.core.instrument.Tag;
-import io.micrometer.core.instrument.internal.MeterId;
+import io.micrometer.core.instrument.util.MeterId;
 import io.micrometer.core.instrument.Meter;
 
 public abstract class AbstractSimpleMeter implements Meter {

File: micrometer-core/src/main/java/io/micrometer/core/instrument/simple/SimpleCounter.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.micrometer.core.instrument.Counter;
 import io.micrometer.core.instrument.Measurement;
-import io.micrometer.core.instrument.internal.MeterId;
+import io.micrometer.core.instrument.util.MeterId;
 
 import java.util.Collections;
 import java.util.concurrent.atomic.DoubleAdder;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/simple/SimpleDistributionSummary.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.micrometer.core.instrument.Measurement;
 import io.micrometer.core.instrument.Tag;
-import io.micrometer.core.instrument.internal.MeterId;
+import io.micrometer.core.instrument.util.MeterId;
 import io.micrometer.core.instrument.DistributionSummary;
 
 import java.util.Arrays;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/simple/SimpleGauge.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.micrometer.core.instrument.Gauge;
 import io.micrometer.core.instrument.Measurement;
-import io.micrometer.core.instrument.internal.MeterId;
+import io.micrometer.core.instrument.util.MeterId;
 
 import java.lang.ref.WeakReference;
 import java.util.Collections;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/simple/SimpleLongTaskTimer.java
Patch:
@@ -16,7 +16,7 @@
 package io.micrometer.core.instrument.simple;
 
 import io.micrometer.core.instrument.Tag;
-import io.micrometer.core.instrument.internal.MeterId;
+import io.micrometer.core.instrument.util.MeterId;
 import io.micrometer.core.instrument.Clock;
 import io.micrometer.core.instrument.LongTaskTimer;
 import io.micrometer.core.instrument.Measurement;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/simple/SimpleMeterRegistry.java
Patch:
@@ -16,11 +16,11 @@
 package io.micrometer.core.instrument.simple;
 
 import io.micrometer.core.instrument.*;
-import io.micrometer.core.instrument.internal.MapAccess;
-import io.micrometer.core.instrument.internal.MeterId;
+import io.micrometer.core.instrument.util.MapAccess;
+import io.micrometer.core.instrument.util.MeterId;
 import io.micrometer.core.instrument.stats.hist.Histogram;
 import io.micrometer.core.instrument.stats.quantile.Quantiles;
-import io.micrometer.core.instrument.internal.AbstractMeterRegistry;
+import io.micrometer.core.instrument.AbstractMeterRegistry;
 
 import java.util.*;
 import java.util.concurrent.ConcurrentHashMap;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/simple/SimpleTimer.java
Patch:
@@ -18,9 +18,9 @@
 import io.micrometer.core.instrument.Clock;
 import io.micrometer.core.instrument.Measurement;
 import io.micrometer.core.instrument.Tag;
-import io.micrometer.core.instrument.internal.MeterId;
-import io.micrometer.core.instrument.internal.TimeUtils;
-import io.micrometer.core.instrument.internal.AbstractTimer;
+import io.micrometer.core.instrument.util.MeterId;
+import io.micrometer.core.instrument.util.TimeUtils;
+import io.micrometer.core.instrument.AbstractTimer;
 
 import java.util.Arrays;
 import java.util.concurrent.TimeUnit;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/spectator/SpectatorMeterRegistry.java
Patch:
@@ -18,8 +18,8 @@
 import com.netflix.spectator.api.*;
 import com.netflix.spectator.api.Measurement;
 import io.micrometer.core.instrument.*;
-import io.micrometer.core.instrument.internal.AbstractMeterRegistry;
-import io.micrometer.core.instrument.internal.ImmutableTag;
+import io.micrometer.core.instrument.AbstractMeterRegistry;
+import io.micrometer.core.instrument.ImmutableTag;
 import io.micrometer.core.instrument.stats.hist.Histogram;
 import io.micrometer.core.instrument.stats.quantile.Quantiles;
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/spectator/SpectatorTimer.java
Patch:
@@ -17,9 +17,9 @@
 
 import io.micrometer.core.instrument.Clock;
 import io.micrometer.core.instrument.Measurement;
-import io.micrometer.core.instrument.internal.AbstractTimer;
-import io.micrometer.core.instrument.internal.MeterId;
-import io.micrometer.core.instrument.internal.TimeUtils;
+import io.micrometer.core.instrument.AbstractTimer;
+import io.micrometer.core.instrument.util.MeterId;
+import io.micrometer.core.instrument.util.TimeUtils;
 
 import java.util.concurrent.TimeUnit;
 

File: micrometer-core/src/main/java/io/micrometer/core/instrument/spectator/step/StepClock.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.core.instrument.datadog;
+package io.micrometer.core.instrument.spectator.step;
 
 import com.netflix.spectator.api.Clock;
 
@@ -23,13 +23,13 @@
  * from gauges will all have the same timestamp for a given reporting
  * interval.
  */
-class StepClock implements Clock {
+public class StepClock implements Clock {
 
   private final Clock impl;
   private final long step;
 
   /** Create a new instance. */
-  StepClock(Clock impl, long step) {
+  public StepClock(Clock impl, long step) {
     this.impl = impl;
     this.step = step;
   }

File: micrometer-core/src/main/java/io/micrometer/core/instrument/spectator/step/StepGauge.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.core.instrument.datadog;
+package io.micrometer.core.instrument.spectator.step;
 
 import com.netflix.spectator.api.Clock;
 import com.netflix.spectator.api.Gauge;
@@ -23,13 +23,13 @@
 
 import java.util.Collections;
 
-class DatadogGauge implements Gauge {
+class StepGauge implements Gauge {
     private final Id id;
     private final Clock clock;
     private final AtomicDouble value;
 
     /** Create a new instance. */
-    DatadogGauge(Id id, Clock clock) {
+    public StepGauge(Id id, Clock clock) {
         this.id = id;
         this.clock = clock;
         this.value = new AtomicDouble(0.0);

File: micrometer-core/src/main/java/io/micrometer/core/instrument/stats/hist/TimeScaleCumulativeHistogram.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.micrometer.core.instrument.stats.hist;
 
-import io.micrometer.core.instrument.internal.TimeUtils;
+import io.micrometer.core.instrument.util.TimeUtils;
 
 import java.util.concurrent.TimeUnit;
 import java.util.stream.Collectors;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/stats/hist/TimeScaleNormalHistogram.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.concurrent.TimeUnit;
 
-import static io.micrometer.core.instrument.internal.TimeUtils.convert;
+import static io.micrometer.core.instrument.util.TimeUtils.convert;
 
 public class TimeScaleNormalHistogram extends NormalHistogram<Double> {
     private final TimeUnit timeScale;

File: micrometer-core/src/main/java/io/micrometer/core/instrument/util/AnnotationUtils.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.micrometer.core.instrument.internal;
+package io.micrometer.core.instrument.util;
 
 import io.micrometer.core.annotation.Timed;
 import io.micrometer.core.annotation.TimedSet;
@@ -27,6 +27,8 @@
 import static java.util.stream.Stream.of;
 
 /**
+ * Convenience utility for locating {@link Timed} annotations on classes and methods.
+ *
  * @author Jon Schneider
  */
 public class AnnotationUtils {

File: micrometer-core/src/samples/java/io/micrometer/core/samples/CounterSample.java
Patch:
@@ -26,7 +26,7 @@
 
 public class CounterSample {
     public static void main(String[] args) {
-        Counter counter = Registries.prometheus().counter("counter");
+        Counter counter = Registries.datadog().counter("counter");
 
         RandomEngine r = new MersenneTwister64(0);
         Normal dist = new Normal(0, 1, r);

File: micrometer-core/src/samples/java/io/micrometer/core/samples/utils/Registries.java
Patch:
@@ -74,7 +74,7 @@ public static SpectatorMeterRegistry datadog() {
 
             {
                 try {
-                    props.load(Registries.class.getResourceAsStream("/application.properties"));
+                    props.load(Registries.class.getResourceAsStream("/datadog.properties"));
                 } catch (IOException e) {
                     throw new RuntimeException("must have application.properties with datadog.apiKey defined", e);
                 }

File: micrometer-core/src/test/java/io/micrometer/core/instrument/MeterRegistriesProvider.java
Patch:
@@ -30,7 +30,7 @@ class MeterRegistriesProvider implements ArgumentsProvider {
     @Override
     public Stream<? extends Arguments> provideArguments(ExtensionContext context) throws Exception {
         return Stream.of(
-                new SpectatorMeterRegistry(new DefaultRegistry(), new MockClock()),
+                (Object) new SpectatorMeterRegistry(new DefaultRegistry(), new MockClock()),
                 new PrometheusMeterRegistry(new CollectorRegistry(true), new MockClock()),
                 new SimpleMeterRegistry(new MockClock())
         ).map(Arguments::of);

File: micrometer-core/src/test/java/io/micrometer/core/instrument/internal/MeterIdTest.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.micrometer.core.instrument.internal;
 
+import io.micrometer.core.instrument.util.MeterId;
 import org.junit.jupiter.api.Test;
 
 import static org.assertj.core.api.Assertions.assertThat;

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/scheduling/MetricsSchedulingAspect.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.micrometer.core.annotation.Timed;
 import io.micrometer.core.instrument.Timer;
-import io.micrometer.core.instrument.internal.AnnotationUtils;
+import io.micrometer.core.instrument.util.AnnotationUtils;
 import io.micrometer.core.instrument.stats.quantile.WindowSketchQuantiles;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/web/MetricsHandlerInterceptor.java
Patch:
@@ -19,7 +19,7 @@
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.Tag;
 import io.micrometer.core.instrument.Timer;
-import io.micrometer.core.instrument.internal.AnnotationUtils;
+import io.micrometer.core.instrument.util.AnnotationUtils;
 import io.micrometer.core.instrument.stats.quantile.WindowSketchQuantiles;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;

File: micrometer-spring-legacy/src/main/java/io/micrometer/spring/InstrumentServletRequestConfiguration.java
Patch:
@@ -16,14 +16,14 @@
 package io.micrometer.spring;
 
 import io.micrometer.spring.web.MetricsHandlerInterceptor;
+import io.micrometer.spring.web.WebmvcTagConfigurer;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.core.env.Environment;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.TagFormatter;
-import org.springframework.boot.metrics.web.WebmvcTagConfigurer;
 import org.springframework.web.servlet.config.annotation.InterceptorRegistry;
 
 /**

File: src/main/java/org/springframework/metrics/boot/MetricsBoot1Configuration.java
Patch:
@@ -54,7 +54,7 @@ static class WebMvcConfiguration {}
      * If AOP is not enabled, scheduled interception will not work.
      */
     @Bean
-    @ConditionalOnClass(name = {"org.springframework.web.client.RestTemplate", "org.aopalliance.intercept.JoinPoint"})
+    @ConditionalOnClass(name = {"org.aopalliance.intercept.JoinPoint"})
     @ConditionalOnProperty(value = "spring.aop.enabled", havingValue = "true", matchIfMissing = true)
     public MetricsSchedulingAspect metricsSchedulingAspect(MeterRegistry registry) {
         return new MetricsSchedulingAspect(registry);

File: src/main/java/org/springframework/metrics/instrument/web/WebfluxTagConfigurer.java
Patch:
@@ -38,7 +38,7 @@ Iterable<Tag> httpRequestTags(ServerWebExchange exchange, Throwable exception) {
     }
 
     public Tag uri(ServerWebExchange exchange) {
-        String rawUri = (String) exchange.getAttribute(org.springframework.web.reactive.HandlerMapping.BEST_MATCHING_PATTERN_ATTRIBUTE).orElse(null);
+        String rawUri = exchange.getAttributeOrDefault(org.springframework.web.reactive.HandlerMapping.BEST_MATCHING_PATTERN_ATTRIBUTE, null);
 
         if (!StringUtils.hasText(rawUri)) {
             rawUri = "/";

File: src/main/java/org/springframework/metrics/instrument/simple/SimpleCounter.java
Patch:
@@ -30,7 +30,7 @@
 public class SimpleCounter extends AbstractSimpleMeter implements Counter {
     private DoubleAdder count = new DoubleAdder();
 
-    SimpleCounter(MeterId id) {
+    public SimpleCounter(MeterId id) {
         super(id);
     }
 

File: src/main/java/org/springframework/metrics/instrument/simple/SimpleDistributionSummary.java
Patch:
@@ -30,7 +30,7 @@ public class SimpleDistributionSummary extends AbstractSimpleMeter implements Di
     private LongAdder count = new LongAdder();
     private DoubleAdder amount = new DoubleAdder();
 
-    SimpleDistributionSummary(MeterId id) {
+    public SimpleDistributionSummary(MeterId id) {
         super(id);
     }
 

File: src/main/java/org/springframework/metrics/instrument/simple/SimpleGauge.java
Patch:
@@ -29,7 +29,7 @@ public class SimpleGauge<T> extends AbstractSimpleMeter implements Gauge {
     private final WeakReference<T> ref;
     private final ToDoubleFunction<T> value;
 
-    SimpleGauge(MeterId id, T obj, ToDoubleFunction<T> value) {
+    public SimpleGauge(MeterId id, T obj, ToDoubleFunction<T> value) {
         super(id);
         this.ref = new WeakReference<>(obj);
         this.value = value;

File: src/main/java/org/springframework/metrics/instrument/simple/SimpleLongTaskTimer.java
Patch:
@@ -33,7 +33,7 @@ public class SimpleLongTaskTimer extends AbstractSimpleMeter implements LongTask
     private final AtomicLong nextTask = new AtomicLong(0L);
     private final Clock clock;
 
-    SimpleLongTaskTimer(MeterId id, Clock clock) {
+    public SimpleLongTaskTimer(MeterId id, Clock clock) {
         super(id);
         this.clock = clock;
     }

File: src/main/java/org/springframework/metrics/instrument/simple/SimpleTimer.java
Patch:
@@ -35,7 +35,7 @@ public class SimpleTimer extends AbstractTimer {
     private LongAdder count = new LongAdder();
     private LongAdder totalTime = new LongAdder();
 
-    SimpleTimer(MeterId id, Clock clock) {
+    public SimpleTimer(MeterId id, Clock clock) {
         super(id, clock);
     }
 

File: src/main/java/org/springframework/metrics/boot/MetricsBoot1Configuration.java
Patch:
@@ -31,6 +31,7 @@
  * @author Jon Schneider
  */
 @Configuration
+// this class didn't exist until Spring 5
 @ConditionalOnMissingClass("org.springframework.web.server.WebFilter") // TODO got to be a better way...
 @Import({
         InstrumentRestTemplateConfiguration.class,
@@ -53,7 +54,7 @@ static class WebMvcConfiguration {}
      * If AOP is not enabled, scheduled interception will not work.
      */
     @Bean
-    @ConditionalOnClass({RestTemplate.class, JoinPoint.class})
+    @ConditionalOnClass(name = {"org.springframework.web.client.RestTemplate", "org.aopalliance.intercept.JoinPoint"})
     @ConditionalOnProperty(value = "spring.aop.enabled", havingValue = "true", matchIfMissing = true)
     public MetricsSchedulingAspect metricsSchedulingAspect(MeterRegistry registry) {
         return new MetricsSchedulingAspect(registry);
@@ -64,7 +65,7 @@ public MetricsSchedulingAspect metricsSchedulingAspect(MeterRegistry registry) {
      * will always be evaluated to "none".
      */
     @Configuration
-    @ConditionalOnClass({RestTemplate.class, JoinPoint.class})
+    @ConditionalOnClass(name = {"org.springframework.web.client.RestTemplate", "org.aopalliance.intercept.JoinPoint"})
     @ConditionalOnProperty(value = "spring.aop.enabled", havingValue = "true", matchIfMissing = true)
     static class MetricsRestTemplateAspectConfiguration {
         @Bean

File: src/main/java/org/springframework/metrics/export/datadog/DatadogRegistry.java
Patch:
@@ -85,7 +85,7 @@ public DatadogRegistry(Clock clock, DatadogConfig config) {
      */
     public void start() {
         if (scheduler == null) {
-            // Setup main collection for publishing to Atlas
+            // Setup main collection for publishing to Datadog
             if (enabled) {
                 Scheduler.Options options = new Scheduler.Options()
                         .withFrequency(Scheduler.Policy.FIXED_RATE_SKIP_IF_LONG, step)

File: src/main/java/org/springframework/metrics/export/datadog/DatadogTimer.java
Patch:
@@ -27,7 +27,7 @@
 import java.util.concurrent.atomic.AtomicLong;
 
 /**
- * Timer that reports four measurements to Atlas:
+ * Timer that reports four measurements to Datadog:
  * <p>
  * <ul>
  * <li><b>count:</b> counter incremented each time record is called</li>

File: src/main/java/org/springframework/metrics/instrument/spectator/SpectatorMeterRegistry.java
Patch:
@@ -42,7 +42,7 @@
  * @author Jon Schneider
  */
 public class SpectatorMeterRegistry extends AbstractMeterRegistry {
-    private final Registry registry;
+    private final ExternalClockSpectatorRegistry registry;
     private final Map<com.netflix.spectator.api.Meter, Meter> meterMap = new HashMap<>();
 
     private final com.netflix.spectator.api.Clock spectatorClock = new com.netflix.spectator.api.Clock() {
@@ -205,6 +205,6 @@ public <T> T gauge(String name, Iterable<Tag> tags, T obj, ToDoubleFunction<T> f
      * @return The underlying Spectator {@link Registry}.
      */
     public Registry getSpectatorRegistry() {
-        return registry;
+        return registry.getSpectatorRegistry();
     }
 }

File: src/main/java/org/springframework/metrics/instrument/simple/AbstractSimpleMeter.java
Patch:
@@ -7,7 +7,7 @@
 public abstract class AbstractSimpleMeter implements Meter {
     protected final MeterId id;
 
-    public AbstractSimpleMeter(MeterId id) {
+    AbstractSimpleMeter(MeterId id) {
         this.id = id;
     }
 

File: src/main/java/org/springframework/metrics/instrument/simple/SimpleGauge.java
Patch:
@@ -17,7 +17,6 @@
 
 import org.springframework.metrics.instrument.Gauge;
 import org.springframework.metrics.instrument.Measurement;
-import org.springframework.metrics.instrument.Tag;
 import org.springframework.metrics.instrument.internal.MeterId;
 
 import java.lang.ref.WeakReference;

File: src/test/java/org/springframework/metrics/instrument/MeterRegistriesProvider.java
Patch:
@@ -22,6 +22,7 @@
 import org.junit.jupiter.params.provider.ArgumentsProvider;
 import org.junit.jupiter.params.provider.ObjectArrayArguments;
 import org.springframework.metrics.instrument.prometheus.PrometheusMeterRegistry;
+import org.springframework.metrics.instrument.simple.SimpleMeterRegistry;
 import org.springframework.metrics.instrument.spectator.SpectatorMeterRegistry;
 
 import java.util.stream.Stream;
@@ -31,7 +32,8 @@ class MeterRegistriesProvider implements ArgumentsProvider {
     public Stream<? extends Arguments> arguments(ContainerExtensionContext context) throws Exception {
         return Stream.of(
                 new SpectatorMeterRegistry(new DefaultRegistry(), new MockClock()),
-                new PrometheusMeterRegistry(new CollectorRegistry(true), new MockClock())
+                new PrometheusMeterRegistry(new CollectorRegistry(true), new MockClock()),
+                new SimpleMeterRegistry(new MockClock())
         ).map(ObjectArrayArguments::create);
     }
 }

File: src/test/java/org/springframework/metrics/instrument/scheduling/ExecutorServiceMetricsTest.java
Patch:
@@ -19,6 +19,7 @@
 import org.junit.jupiter.api.DisplayName;
 import org.junit.jupiter.api.Test;
 import org.springframework.metrics.instrument.Gauge;
+import org.springframework.metrics.instrument.Meter;
 import org.springframework.metrics.instrument.MeterRegistry;
 import org.springframework.metrics.instrument.Timer;
 import org.springframework.metrics.instrument.simple.SimpleMeterRegistry;
@@ -111,7 +112,7 @@ void monitorExecutorService() throws InterruptedException {
     }
 
     private void assertThreadPoolExecutorMetrics(String name) {
-        assertThat(registry.findMeter(Gauge.class, name)).isPresent();
+        assertThat(registry.findMeter(Meter.Type.Counter, name)).isPresent();
         assertThat(registry.findMeter(Gauge.class, name + "_queue_size")).isPresent();
         assertThat(registry.findMeter(Gauge.class, name + "_pool_size")).isPresent();
     }

File: src/main/java/org/springframework/metrics/instrument/Counter.java
Patch:
@@ -35,4 +35,7 @@ public interface Counter extends Meter {
      * The cumulative count since this counter was created.
      */
     double count();
+
+    @Override
+    default Type getType() { return Type.Counter; }
 }

File: src/main/java/org/springframework/metrics/instrument/prometheus/PrometheusMeterRegistry.java
Patch:
@@ -72,13 +72,13 @@ public <M extends Meter> Optional<M> findMeter(Class<M> mClass, String name, Ite
         Collection<Tag> tagsToMatch = new ArrayList<>();
         tags.forEach(tagsToMatch::add);
 
-        //noinspection unchecked
         return meterMap.keySet().stream()
                 .filter(id -> id.getName().equals(name))
                 .filter(id -> id.getTags().containsAll(tagsToMatch))
                 .findAny()
                 .map(meterMap::get)
-                .map(m -> (M) m);
+                .filter(mClass::isInstance)
+                .map(mClass::cast);
     }
 
 

File: src/main/java/org/springframework/metrics/instrument/simple/SimpleMeterRegistry.java
Patch:
@@ -99,13 +99,13 @@ public <M extends Meter> Optional<M> findMeter(Class<M> mClass, String name, Ite
         Collection<Tag> tagsToMatch = new ArrayList<>();
         tags.forEach(tagsToMatch::add);
 
-        //noinspection unchecked
         return meterMap.keySet().stream()
                 .filter(id -> id.getName().equals(name))
                 .filter(id -> id.getTags().containsAll(tagsToMatch))
                 .findAny()
                 .map(meterMap::get)
-                .map(m -> (M) m);
+                .filter(mClass::isInstance)
+                .map(mClass::cast);
     }
 
     /**

File: samples/sample-prometheus-quantiles/src/main/java/org/springframework/metrics/samples/PrometheusHistogramSample.java
Patch:
@@ -43,7 +43,7 @@ public static void main(String[] args) throws UnknownHostException, LifecycleExc
 
         DistributionSummary hist = meterRegistry.distributionSummaryBuilder("hist")
                 .histogram(CumulativeHistogram.buckets(linear(0, 10, 20)))
-                .quantiles(CKMSQuantiles.build()
+                .quantiles(CKMSQuantiles
                         .quantile(0.95, 0.01)
                         .quantile(0.5, 0.05)
                         .create())

File: src/main/java/org/springframework/metrics/instrument/scheduling/MetricsSchedulingAspect.java
Patch:
@@ -66,7 +66,7 @@ public Object timeScheduledOperation(ProceedingJoinPoint pjp) throws Throwable {
                 Timer.Builder timerBuilder = registry.timerBuilder(timed.value())
                         .tags(timed.extraTags());
                 if(timed.quantiles().length > 0) {
-                    timerBuilder = timerBuilder.quantiles(WindowSketchQuantiles.build().quantile(timed.quantiles()).create());
+                    timerBuilder = timerBuilder.quantiles(WindowSketchQuantiles.quantiles(timed.quantiles()).create());
                 }
                 shortTaskTimer = timerBuilder.create();
             }

File: src/main/java/org/springframework/metrics/instrument/stats/quantile/CKMSQuantiles.java
Patch:
@@ -293,8 +293,8 @@ public Quantile[] getQuantiles() {
         return quantiles;
     }
 
-    public static Builder build() {
-        return new Builder();
+    public static Builder quantile(double quantile, double error) {
+        return new Builder().quantile(quantile, error);
     }
 
     public static class Builder {

File: src/main/java/org/springframework/metrics/instrument/stats/quantile/Frugal2UQuantiles.java
Patch:
@@ -142,8 +142,8 @@ public Quantile[] getQuantiles() {
         return quantiles;
     }
 
-    public static Builder build() {
-        return new Builder();
+    public static Builder quantile(double quantile, double estimate) {
+        return new Builder().quantile(quantile, estimate);
     }
 
     public static class Builder {

File: src/main/java/org/springframework/metrics/instrument/stats/quantile/WindowSketchQuantiles.java
Patch:
@@ -406,15 +406,15 @@ Float getEpsilon() {
         }
     }
 
-    public static Builder build() {
-        return new Builder();
+    public static Builder quantiles(double... quantiles) {
+        return new Builder().quantiles(quantiles);
     }
 
     public static class Builder {
         private Collection<Double> monitored = new ArrayList<>();
         private double error = 0.05;
 
-        public Builder quantile(double... quantiles) {
+        public Builder quantiles(double... quantiles) {
             for (double quantile : quantiles) {
                 monitored.add(quantile);
             }

File: src/main/java/org/springframework/metrics/instrument/web/MetricsHandlerInterceptor.java
Patch:
@@ -132,7 +132,7 @@ private void recordMetric(HttpServletRequest request, HttpServletResponse respon
             }
 
             if(t.quantiles().length > 0) {
-                timerBuilder = timerBuilder.quantiles(WindowSketchQuantiles.build().quantile(t.quantiles()).create());
+                timerBuilder = timerBuilder.quantiles(WindowSketchQuantiles.quantiles(t.quantiles()).create());
             }
 
             timerBuilder.create().record(endTime - startTime, TimeUnit.NANOSECONDS);

File: src/test/java/org/springframework/metrics/instrument/prometheus/PrometheusMeterRegistryTest.java
Patch:
@@ -63,11 +63,11 @@ void before() {
     @Test
     void quantiles() {
         registry.timerBuilder("timer")
-                .quantiles(GKQuantiles.build().quantile(0.5).create())
+                .quantiles(GKQuantiles.quantiles(0.5).create())
                 .create();
 
         registry.distributionSummaryBuilder("ds")
-                .quantiles(GKQuantiles.build().quantile(0.5).create())
+                .quantiles(GKQuantiles.quantiles(0.5).create())
                 .create();
 
         assertThat(prometheusRegistry.metricFamilySamples()).has(withNameAndTagKey("timer", "quantile"));

File: src/test/java/org/springframework/metrics/instrument/spectator/SpectatorMeterRegistryTest.java
Patch:
@@ -40,11 +40,11 @@ void quantiles() {
         Registry spectatorRegistry = registry.getSpectatorRegistry();
 
         registry.timerBuilder("timer")
-                .quantiles(GKQuantiles.build().quantile(0.5).create())
+                .quantiles(GKQuantiles.quantiles(0.5).create())
                 .create();
 
         registry.distributionSummaryBuilder("ds")
-                .quantiles(GKQuantiles.build().quantile(0.5).create())
+                .quantiles(GKQuantiles.quantiles(0.5).create())
                 .create();
 
         assertThat(spectatorRegistry).haveAtLeastOne(withNameAndTagKey("timer", "quantile"));

File: src/main/java/org/springframework/metrics/boot/InstrumentWebfluxRequestConfiguration.java
Patch:
@@ -23,7 +23,8 @@
 import org.springframework.core.env.Environment;
 import org.springframework.metrics.instrument.MeterRegistry;
 import org.springframework.metrics.instrument.TagFormatter;
-import org.springframework.metrics.instrument.web.*;
+import org.springframework.metrics.instrument.web.MetricsWebFilter;
+import org.springframework.metrics.instrument.web.WebfluxTagConfigurer;
 
 /**
  * Instrument Spring Webflux annotation-based programming model request mappings.

File: src/main/java/org/springframework/metrics/boot/MetricsConfiguration.java
Patch:
@@ -39,6 +39,7 @@
         InstrumentRestTemplateConfiguration.class,
         InstrumentWebfluxRequestConfiguration.class,
         RecommendedMeterBinders.class,
+        MeterBinderRegistration.class
 })
 class MetricsConfiguration {
     // TODO when we figure out if or how Boot 2 might be different, change this

File: src/main/java/org/springframework/metrics/boot/MetricsEnvironmentPostProcessor.java
Patch:
@@ -23,7 +23,6 @@
 import org.springframework.core.env.MapPropertySource;
 import org.springframework.core.env.MutablePropertySources;
 import org.springframework.core.env.PropertySource;
-import org.springframework.util.ClassUtils;
 
 import java.util.LinkedHashMap;
 import java.util.Map;

File: src/main/java/org/springframework/metrics/export/prometheus/PrometheusMetricsConfiguration.java
Patch:
@@ -17,7 +17,6 @@
 
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
-import org.springframework.metrics.instrument.binder.JvmMemoryMetrics;
 import org.springframework.metrics.instrument.prometheus.PrometheusMeterRegistry;
 
 @Configuration

File: src/main/java/org/springframework/metrics/instrument/internal/AbstractTimer.java
Patch:
@@ -16,7 +16,6 @@
 package org.springframework.metrics.instrument.internal;
 
 import org.springframework.metrics.instrument.Clock;
-import org.springframework.metrics.instrument.Meter;
 import org.springframework.metrics.instrument.Tag;
 import org.springframework.metrics.instrument.Timer;
 

File: src/main/java/org/springframework/metrics/instrument/internal/MeterId.java
Patch:
@@ -23,7 +23,6 @@
 import java.util.List;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
-import java.util.stream.StreamSupport;
 
 import static java.util.stream.Stream.concat;
 import static java.util.stream.StreamSupport.stream;

File: src/main/java/org/springframework/metrics/instrument/prometheus/PrometheusCounter.java
Patch:
@@ -17,7 +17,6 @@
 
 import org.springframework.metrics.instrument.Counter;
 import org.springframework.metrics.instrument.Measurement;
-import org.springframework.metrics.instrument.Meter;
 import org.springframework.metrics.instrument.Tag;
 import org.springframework.metrics.instrument.internal.MeterId;
 

File: src/main/java/org/springframework/metrics/instrument/prometheus/PrometheusDistributionSummary.java
Patch:
@@ -17,7 +17,6 @@
 
 import org.springframework.metrics.instrument.DistributionSummary;
 import org.springframework.metrics.instrument.Measurement;
-import org.springframework.metrics.instrument.Meter;
 import org.springframework.metrics.instrument.Tag;
 import org.springframework.metrics.instrument.internal.MeterId;
 

File: src/main/java/org/springframework/metrics/instrument/prometheus/PrometheusGauge.java
Patch:
@@ -17,7 +17,6 @@
 
 import org.springframework.metrics.instrument.Gauge;
 import org.springframework.metrics.instrument.Measurement;
-import org.springframework.metrics.instrument.Meter;
 import org.springframework.metrics.instrument.Tag;
 import org.springframework.metrics.instrument.internal.MeterId;
 

File: src/main/java/org/springframework/metrics/instrument/prometheus/PrometheusLongTaskTimer.java
Patch:
@@ -17,7 +17,6 @@
 
 import org.springframework.metrics.instrument.LongTaskTimer;
 import org.springframework.metrics.instrument.Measurement;
-import org.springframework.metrics.instrument.Meter;
 import org.springframework.metrics.instrument.Tag;
 import org.springframework.metrics.instrument.internal.MeterId;
 

File: src/main/java/org/springframework/metrics/instrument/simple/SimpleCounter.java
Patch:
@@ -18,7 +18,6 @@
 import com.netflix.spectator.impl.AtomicDouble;
 import org.springframework.metrics.instrument.Counter;
 import org.springframework.metrics.instrument.Measurement;
-import org.springframework.metrics.instrument.Meter;
 import org.springframework.metrics.instrument.Tag;
 import org.springframework.metrics.instrument.internal.MeterId;
 

File: src/main/java/org/springframework/metrics/instrument/simple/SimpleDistributionSummary.java
Patch:
@@ -24,7 +24,6 @@
 import java.util.concurrent.atomic.DoubleAdder;
 import java.util.concurrent.atomic.LongAdder;
 
-import static java.util.stream.Stream.of;
 import static org.springframework.metrics.instrument.simple.SimpleUtils.typeTag;
 
 public class SimpleDistributionSummary implements DistributionSummary {

File: src/main/java/org/springframework/metrics/instrument/simple/SimpleGauge.java
Patch:
@@ -17,7 +17,6 @@
 
 import org.springframework.metrics.instrument.Gauge;
 import org.springframework.metrics.instrument.Measurement;
-import org.springframework.metrics.instrument.Meter;
 import org.springframework.metrics.instrument.Tag;
 import org.springframework.metrics.instrument.internal.MeterId;
 

File: src/main/java/org/springframework/metrics/instrument/spectator/SpectatorCounter.java
Patch:
@@ -17,7 +17,6 @@
 
 import org.springframework.metrics.instrument.Counter;
 import org.springframework.metrics.instrument.Measurement;
-import org.springframework.metrics.instrument.Meter;
 import org.springframework.metrics.instrument.Tag;
 
 public class SpectatorCounter implements Counter {

File: src/main/java/org/springframework/metrics/instrument/stats/hist/CumulativeHistogram.java
Patch:
@@ -15,7 +15,9 @@
  */
 package org.springframework.metrics.instrument.stats.hist;
 
-import java.util.*;
+import java.util.Collection;
+import java.util.HashSet;
+import java.util.Set;
 import java.util.concurrent.ConcurrentNavigableMap;
 import java.util.concurrent.ConcurrentSkipListMap;
 import java.util.concurrent.TimeUnit;

File: src/main/java/org/springframework/metrics/instrument/stats/hist/TimeScaleCumulativeHistogram.java
Patch:
@@ -17,7 +17,6 @@
 
 import org.springframework.metrics.instrument.internal.TimeUtils;
 
-import java.util.Comparator;
 import java.util.concurrent.TimeUnit;
 import java.util.stream.Collectors;
 

File: src/main/java/org/springframework/metrics/instrument/web/MetricsHandlerInterceptor.java
Patch:
@@ -35,6 +35,7 @@
 import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.TimeUnit;
+import java.util.stream.Collectors;
 import java.util.stream.IntStream;
 
 import static java.util.stream.Collectors.toSet;
@@ -125,7 +126,8 @@ private void recordMetric(HttpServletRequest request, HttpServletResponse respon
                     }
                 } else {
                     timerBuilder = timerBuilder.tags(IntStream.range(0, extraTags.length / 2)
-                            .mapToObj(i -> Tag.of(extraTags[i], extraTags[i + 1])));
+                            .mapToObj(i -> Tag.of(extraTags[i], extraTags[i + 1]))
+                            .collect(Collectors.toList()));
                 }
             }
 

File: src/test/java/org/springframework/metrics/export/atlas/EnableAtlasMetricsTest.java
Patch:
@@ -35,8 +35,6 @@
 import org.springframework.test.context.junit.jupiter.SpringExtension;
 import org.springframework.web.reactive.function.server.ServerResponse;
 
-import java.time.LocalDate;
-import java.time.LocalDateTime;
 import java.time.ZonedDateTime;
 import java.time.format.DateTimeFormatter;
 import java.util.concurrent.CountDownLatch;

File: src/test/java/org/springframework/metrics/instrument/CounterTest.java
Patch:
@@ -18,7 +18,6 @@
 import org.junit.jupiter.api.DisplayName;
 import org.junit.jupiter.params.ParameterizedTest;
 import org.junit.jupiter.params.provider.ArgumentsSource;
-import org.springframework.metrics.instrument.prometheus.PrometheusCounter;
 import org.springframework.metrics.instrument.prometheus.PrometheusMeterRegistry;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;

File: src/test/java/org/springframework/metrics/instrument/DistributionSummaryTest.java
Patch:
@@ -28,7 +28,7 @@ class DistributionSummaryTest {
     @ParameterizedTest
     @ArgumentsSource(MeterRegistriesProvider.class)
     void record(MeterRegistry registry) {
-        DistributionSummary ds = registry.distributionSummary("myDistributionSummary");
+        DistributionSummary ds = registry.summary("myDistributionSummary");
 
         ds.record(10);
         assertAll(() -> assertEquals(1L, ds.count()),
@@ -44,7 +44,7 @@ void record(MeterRegistry registry) {
     @ParameterizedTest
     @ArgumentsSource(MeterRegistriesProvider.class)
     void recordNegative(MeterRegistry collector) {
-        DistributionSummary ds = collector.distributionSummary("myDistributionSummary");
+        DistributionSummary ds = collector.summary("myDistributionSummary");
 
         ds.record(-10);
         assertAll(() -> assertEquals(0, ds.count()),
@@ -55,7 +55,7 @@ void recordNegative(MeterRegistry collector) {
     @ParameterizedTest
     @ArgumentsSource(MeterRegistriesProvider.class)
     void recordZero(MeterRegistry collector) {
-        DistributionSummary ds = collector.distributionSummary("myDistributionSummary");
+        DistributionSummary ds = collector.summary("myDistributionSummary");
 
         ds.record(0);
         assertAll(() -> assertEquals(1L, ds.count()),

File: src/test/java/org/springframework/metrics/instrument/GaugeTest.java
Patch:
@@ -54,7 +54,7 @@ void objectGauge(MeterRegistry registry) {
     @ParameterizedTest
     @ArgumentsSource(MeterRegistriesProvider.class)
     void collectionSizeGauge(MeterRegistry registry) {
-        List<String> list = registry.collectionSize("myGauge", new ArrayList<>());
+        List<String> list = registry.collectionSize(new ArrayList<>(), "myGauge");
         list.addAll(Arrays.asList("a", "b"));
 
         assertEquals(2, singleGauge(registry).value());
@@ -64,7 +64,7 @@ void collectionSizeGauge(MeterRegistry registry) {
     @ParameterizedTest
     @ArgumentsSource(MeterRegistriesProvider.class)
     void mapSizeGauge(MeterRegistry registry) {
-        Map<String, Integer> map = registry.mapSize("myGauge", new HashMap<>());
+        Map<String, Integer> map = registry.mapSize(new HashMap<>(), "myGauge");
         map.put("a", 1);
 
         assertEquals(1, singleGauge(registry).value());

File: src/test/java/org/springframework/metrics/instrument/MeterRegistriesProvider.java
Patch:
@@ -21,12 +21,12 @@
 import org.junit.jupiter.params.provider.Arguments;
 import org.junit.jupiter.params.provider.ArgumentsProvider;
 import org.junit.jupiter.params.provider.ObjectArrayArguments;
-import org.springframework.metrics.instrument.spectator.*;
-import org.springframework.metrics.instrument.prometheus.*;
+import org.springframework.metrics.instrument.prometheus.PrometheusMeterRegistry;
+import org.springframework.metrics.instrument.spectator.SpectatorMeterRegistry;
 
 import java.util.stream.Stream;
 
-public class MeterRegistriesProvider implements ArgumentsProvider {
+class MeterRegistriesProvider implements ArgumentsProvider {
     @Override
     public Stream<? extends Arguments> arguments(ContainerExtensionContext context) throws Exception {
         return Stream.of(

File: src/test/java/org/springframework/metrics/instrument/MetersTest.java
Patch:
@@ -24,7 +24,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.offset;
-import static org.springframework.metrics.instrument.Tag.tags;
+import static org.springframework.metrics.instrument.Tags.zip;
 
 /**
  * @author Jon Schneider
@@ -40,12 +40,12 @@ void customMeter() {
                 .create(letters, (name, letterSet) -> {
                     SortedSet<String> after = letterSet.tailSet("b");
                     Measurement total = new Measurement(name,
-                            tags("statistic", "total"),
+                            zip("statistic", "total"),
                             letterSet.tailSet("b").size() - 1);
 
                     after.retainAll(Arrays.asList("a", "e", "i", "o", "u", "y"));
                     Measurement vowels = new Measurement(name,
-                            tags("statistic", "vowels"),
+                            zip("statistic", "vowels"),
                             after.size());
 
                     return Arrays.asList(total, vowels);

File: src/test/java/org/springframework/metrics/instrument/TimerTest.java
Patch:
@@ -24,9 +24,7 @@
 import java.util.concurrent.TimeUnit;
 import java.util.function.Supplier;
 
-import static org.junit.jupiter.api.Assertions.assertAll;
-import static org.junit.jupiter.api.Assertions.assertEquals;
-import static org.junit.jupiter.api.Assertions.assertThrows;
+import static org.junit.jupiter.api.Assertions.*;
 import static org.springframework.metrics.instrument.MockClock.clock;
 
 class TimerTest {

File: src/test/java/org/springframework/metrics/instrument/scheduling/MetricsSchedulingAspectTest.java
Patch:
@@ -21,12 +21,12 @@
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.context.annotation.Bean;
+import org.springframework.metrics.annotation.Timed;
 import org.springframework.metrics.boot.EnableMetrics;
 import org.springframework.metrics.instrument.Gauge;
 import org.springframework.metrics.instrument.LongTaskTimer;
 import org.springframework.metrics.instrument.MeterRegistry;
 import org.springframework.metrics.instrument.Timer;
-import org.springframework.metrics.annotation.Timed;
 import org.springframework.metrics.instrument.simple.SimpleMeterRegistry;
 import org.springframework.scheduling.annotation.EnableScheduling;
 import org.springframework.scheduling.annotation.Scheduled;

File: src/test/java/org/springframework/metrics/instrument/web/MetricsHandlerInterceptorTest.java
Patch:
@@ -24,12 +24,12 @@
 import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
 import org.springframework.context.annotation.Bean;
 import org.springframework.http.HttpStatus;
+import org.springframework.metrics.annotation.Timed;
 import org.springframework.metrics.boot.EnableMetrics;
 import org.springframework.metrics.instrument.Gauge;
 import org.springframework.metrics.instrument.LongTaskTimer;
 import org.springframework.metrics.instrument.MeterRegistry;
 import org.springframework.metrics.instrument.Timer;
-import org.springframework.metrics.annotation.Timed;
 import org.springframework.metrics.instrument.simple.SimpleMeterRegistry;
 import org.springframework.test.context.ContextConfiguration;
 import org.springframework.test.context.junit.jupiter.SpringExtension;

File: src/test/java/org/springframework/metrics/instrument/web/MetricsRestTemplateInterceptorTest.java
Patch:
@@ -18,8 +18,8 @@
 import org.junit.jupiter.api.Test;
 import org.springframework.http.HttpMethod;
 import org.springframework.http.MediaType;
-import org.springframework.metrics.instrument.MeterRegistry;
 import org.springframework.metrics.instrument.IdentityTagFormatter;
+import org.springframework.metrics.instrument.MeterRegistry;
 import org.springframework.metrics.instrument.Timer;
 import org.springframework.metrics.instrument.simple.SimpleMeterRegistry;
 import org.springframework.test.web.client.MockRestServiceServer;

File: src/main/java/org/springframework/metrics/instrument/simple/SimpleCounter.java
Patch:
@@ -24,6 +24,8 @@
 
 import java.util.Collections;
 
+import static org.springframework.metrics.instrument.simple.SimpleUtils.typeTag;
+
 /**
  * @author Jon Schneider
  */
@@ -67,6 +69,6 @@ public Type getType() {
 
     @Override
     public Iterable<Measurement> measure() {
-        return Collections.singletonList(id.withTags(Tag.of(getType())).measurement(count()));
+        return Collections.singletonList(id.withTags(typeTag(getType())).measurement(count()));
     }
 }

File: src/main/java/org/springframework/metrics/instrument/simple/SimpleGauge.java
Patch:
@@ -25,6 +25,8 @@
 import java.util.Collections;
 import java.util.function.ToDoubleFunction;
 
+import static org.springframework.metrics.instrument.simple.SimpleUtils.typeTag;
+
 public class SimpleGauge<T> implements Gauge {
     private final MeterId id;
     private final WeakReference<T> ref;
@@ -58,6 +60,6 @@ public Type getType() {
 
     @Override
     public Iterable<Measurement> measure() {
-        return Collections.singletonList(id.withTags(Tag.of(getType())).measurement(value()));
+        return Collections.singletonList(id.withTags(typeTag(getType())).measurement(value()));
     }
 }

File: src/main/java/org/springframework/metrics/instrument/simple/SimpleLongTaskTimer.java
Patch:
@@ -24,6 +24,7 @@
 import java.util.concurrent.atomic.AtomicLong;
 
 import static org.springframework.metrics.instrument.Tag.tags;
+import static org.springframework.metrics.instrument.simple.SimpleUtils.typeTag;
 
 public class SimpleLongTaskTimer implements LongTaskTimer {
     private final MeterId id;
@@ -92,10 +93,9 @@ public Type getType() {
 
     @Override
     public Iterable<Measurement> measure() {
-        MeterId typedId = id.withTags(Tag.of(getType()));
         return Arrays.asList(
-                typedId.withTags(Tag.of("statistic", "activeTasks")).measurement(activeTasks()),
-                typedId.withTags(Tag.of("statistic", "duration")).measurement(duration())
+                id.withTags(typeTag(getType()), Tag.of("statistic", "activeTasks")).measurement(activeTasks()),
+                id.withTags(typeTag(getType()), Tag.of("statistic", "duration")).measurement(duration())
         );
     }
 }

File: src/main/java/org/springframework/metrics/instrument/simple/SimpleTimer.java
Patch:
@@ -26,6 +26,7 @@
 import java.util.concurrent.atomic.LongAdder;
 
 import static org.springframework.metrics.instrument.internal.TimeUtils.nanosToUnit;
+import static org.springframework.metrics.instrument.simple.SimpleUtils.typeTag;
 
 /**
  * @author Jon Schneider
@@ -56,10 +57,9 @@ public double totalTime(TimeUnit unit) {
 
     @Override
     public Iterable<Measurement> measure() {
-        MeterId typedId = id.withTags(Tag.of(getType()));
         return Arrays.asList(
-                typedId.withTags(Tag.of("statistic", "count")).measurement(count()),
-                typedId.withTags(Tag.of("statistic", "amount")).measurement(totalTime(TimeUnit.NANOSECONDS))
+                id.withTags(typeTag(getType()), Tag.of("statistic", "count")).measurement(count()),
+                id.withTags(typeTag(getType()), Tag.of("statistic", "amount")).measurement(totalTime(TimeUnit.NANOSECONDS))
         );
     }
 }

File: src/main/java/org/springframework/metrics/instrument/spectator/SpectatorMeterRegistry.java
Patch:
@@ -18,12 +18,12 @@
 import com.netflix.spectator.api.*;
 import com.netflix.spectator.api.Measurement;
 import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.metrics.instrument.*;
 import org.springframework.metrics.instrument.Clock;
 import org.springframework.metrics.instrument.Counter;
 import org.springframework.metrics.instrument.DistributionSummary;
 import org.springframework.metrics.instrument.LongTaskTimer;
 import org.springframework.metrics.instrument.Meter;
+import org.springframework.metrics.instrument.*;
 import org.springframework.metrics.instrument.Tag;
 import org.springframework.metrics.instrument.Timer;
 import org.springframework.metrics.instrument.internal.AbstractMeterRegistry;
@@ -34,7 +34,6 @@
 import java.util.*;
 import java.util.function.ToDoubleFunction;
 import java.util.stream.Collectors;
-import java.util.stream.Stream;
 
 import static java.util.stream.StreamSupport.stream;
 import static org.springframework.metrics.instrument.spectator.SpectatorUtils.spectatorId;

File: src/jmh/java/org.springframework.metrics.benchmark/QuantilesBenchmark.java
Patch:
@@ -23,7 +23,7 @@
 import org.openjdk.jmh.runner.RunnerException;
 import org.openjdk.jmh.runner.options.Options;
 import org.openjdk.jmh.runner.options.OptionsBuilder;
-import org.springframework.metrics.instrument.stats.*;
+import org.springframework.metrics.instrument.stats.quantile.*;
 
 import java.util.concurrent.TimeUnit;
 

File: src/main/java/org/springframework/metrics/instrument/prometheus/PrometheusDistributionSummary.java
Patch:
@@ -16,7 +16,7 @@
 package org.springframework.metrics.instrument.prometheus;
 
 import org.springframework.metrics.instrument.DistributionSummary;
-import org.springframework.metrics.instrument.stats.Quantiles;
+import org.springframework.metrics.instrument.stats.quantile.Quantiles;
 
 public class PrometheusDistributionSummary implements DistributionSummary {
     private final String name;

File: src/main/java/org/springframework/metrics/instrument/prometheus/PrometheusTimer.java
Patch:
@@ -17,10 +17,12 @@
 
 import org.springframework.metrics.instrument.Clock;
 import org.springframework.metrics.instrument.internal.AbstractTimer;
-import org.springframework.metrics.instrument.stats.Quantiles;
+import org.springframework.metrics.instrument.stats.quantile.Quantiles;
 
 import java.util.concurrent.TimeUnit;
 
+import static org.springframework.metrics.instrument.internal.TimeUtils.secondsToUnit;
+
 public class PrometheusTimer extends AbstractTimer {
     private CustomPrometheusSummary.Child summary;
     private Quantiles quantiles;

File: src/main/java/org/springframework/metrics/instrument/scheduling/MetricsSchedulingAspect.java
Patch:
@@ -26,8 +26,8 @@
 import org.springframework.metrics.instrument.MeterRegistry;
 import org.springframework.metrics.instrument.Tags;
 import org.springframework.metrics.instrument.Timer;
-import org.springframework.metrics.instrument.internal.TimedUtils;
-import org.springframework.metrics.instrument.stats.WindowSketchQuantiles;
+import org.springframework.metrics.instrument.internal.AnnotationUtils;
+import org.springframework.metrics.instrument.stats.quantile.WindowSketchQuantiles;
 
 import java.lang.reflect.Method;
 import java.util.concurrent.TimeUnit;
@@ -60,7 +60,7 @@ public Object timeScheduledOperation(ProceedingJoinPoint pjp) throws Throwable {
         Timer shortTaskTimer = null;
         LongTaskTimer longTaskTimer = null;
 
-        for (Timed timed : TimedUtils.findTimed(method).toArray(Timed[]::new)) {
+        for (Timed timed : AnnotationUtils.findTimed(method).toArray(Timed[]::new)) {
             if(timed.longTask())
                 longTaskTimer = registry.longTaskTimer(timed.value(), Tags.tagList(timed.extraTags()));
             else {

File: src/main/java/org/springframework/metrics/instrument/simple/SimpleTimer.java
Patch:
@@ -21,6 +21,8 @@
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicLong;
 
+import static org.springframework.metrics.instrument.internal.TimeUtils.nanosToUnit;
+
 /**
  * @author Jon Schneider
  */

File: src/main/java/org/springframework/metrics/instrument/spectator/SpectatorTimer.java
Patch:
@@ -20,6 +20,8 @@
 
 import java.util.concurrent.TimeUnit;
 
+import static org.springframework.metrics.instrument.internal.TimeUtils.nanosToUnit;
+
 public class SpectatorTimer extends AbstractTimer {
     private com.netflix.spectator.api.Timer timer;
 

File: src/main/java/org/springframework/metrics/instrument/stats/quantile/CKMSQuantiles.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.springframework.metrics.instrument.stats;
+package org.springframework.metrics.instrument.stats.quantile;
 
 import java.util.*;
 

File: src/main/java/org/springframework/metrics/instrument/stats/quantile/Frugal2UQuantiles.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.springframework.metrics.instrument.stats;
+package org.springframework.metrics.instrument.stats.quantile;
 
 import java.util.ArrayList;
 import java.util.Collection;

File: src/main/java/org/springframework/metrics/instrument/stats/quantile/GKQuantiles.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.springframework.metrics.instrument.stats;
+package org.springframework.metrics.instrument.stats.quantile;
 
 import java.io.Serializable;
 import java.util.ArrayList;

File: src/main/java/org/springframework/metrics/instrument/stats/quantile/PowerOfTwo.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.springframework.metrics.instrument.stats;
+package org.springframework.metrics.instrument.stats.quantile;
 
 /**
  * Copied from https://github.com/mayconbordin/streaminer#quantiles

File: src/main/java/org/springframework/metrics/instrument/stats/quantile/Quantiles.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.springframework.metrics.instrument.stats;
+package org.springframework.metrics.instrument.stats.quantile;
 
 import java.util.Collection;
 

File: src/main/java/org/springframework/metrics/instrument/stats/quantile/SlidingWindow.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.springframework.metrics.instrument.stats;
+package org.springframework.metrics.instrument.stats.quantile;
 
 import java.io.Serializable;
 import java.util.Collection;

File: src/main/java/org/springframework/metrics/instrument/stats/quantile/WindowSketchQuantiles.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.springframework.metrics.instrument.stats;
+package org.springframework.metrics.instrument.stats.quantile;
 
 import java.io.Serializable;
 import java.util.*;

File: src/test/java/org/springframework/metrics/instrument/prometheus/PrometheusMeterRegistryTest.java
Patch:
@@ -21,7 +21,7 @@
 import org.junit.jupiter.api.DisplayName;
 import org.junit.jupiter.api.Test;
 import org.springframework.metrics.Issue;
-import org.springframework.metrics.instrument.stats.GKQuantiles;
+import org.springframework.metrics.instrument.stats.quantile.GKQuantiles;
 
 import java.util.Arrays;
 import java.util.Enumeration;

File: src/test/java/org/springframework/metrics/instrument/spectator/SpectatorMeterRegistryTest.java
Patch:
@@ -21,7 +21,7 @@
 import org.assertj.core.api.Condition;
 import org.junit.jupiter.api.DisplayName;
 import org.junit.jupiter.api.Test;
-import org.springframework.metrics.instrument.stats.GKQuantiles;
+import org.springframework.metrics.instrument.stats.quantile.GKQuantiles;
 
 import java.util.function.Predicate;
 

File: src/main/java/org/springframework/metrics/instrument/prometheus/PrometheusDistributionSummary.java
Patch:
@@ -20,10 +20,10 @@
 
 public class PrometheusDistributionSummary implements DistributionSummary {
     private final String name;
-    private final CustomPrometheusSummary summary;
+    private final CustomPrometheusSummary.Child summary;
     private final Quantiles quantiles;
 
-    public PrometheusDistributionSummary(String name, CustomPrometheusSummary summary, Quantiles quantiles) {
+    public PrometheusDistributionSummary(String name, CustomPrometheusSummary.Child summary, Quantiles quantiles) {
         this.name = name;
         this.summary = summary;
         this.quantiles = quantiles;

File: src/main/java/org/springframework/metrics/instrument/prometheus/PrometheusTimer.java
Patch:
@@ -22,10 +22,10 @@
 import java.util.concurrent.TimeUnit;
 
 public class PrometheusTimer extends AbstractTimer {
-    private CustomPrometheusSummary summary;
+    private CustomPrometheusSummary.Child summary;
     private Quantiles quantiles;
 
-    public PrometheusTimer(String name, CustomPrometheusSummary summary, Clock clock, Quantiles quantiles) {
+    public PrometheusTimer(String name, CustomPrometheusSummary.Child summary, Clock clock, Quantiles quantiles) {
         super(name, clock);
         this.summary = summary;
         this.quantiles = quantiles;

File: src/main/java/org/springframework/metrics/annotation/Timed.java
Patch:
@@ -27,4 +27,6 @@
     String[] extraTags() default {};
 
     boolean longTask() default false;
+
+    double[] quantiles() default {};
 }

File: src/main/java/org/springframework/metrics/instrument/simple/SimpleMeterRegistry.java
Patch:
@@ -65,7 +65,7 @@ private void registerQuantilesGaugeIfNecessary(String name, Iterable<Tag> tags,
                 List<Tag> quantileTags = new LinkedList<>();
                 tags.forEach(quantileTags::add);
                 quantileTags.add(Tag.of("quantile", Double.isNaN(q) ? "NaN" : Double.toString(q)));
-                meterMap.computeIfAbsent(new MeterId(name, quantileTags), id -> storeId(id, new SimpleGauge<>(name, q, quantiles::get)));
+                meterMap.computeIfAbsent(new MeterId(name + ".quantiles", quantileTags), id -> storeId(id, new SimpleGauge<>(name, q, quantiles::get)));
             }
         }
     }

File: src/main/java/org/springframework/metrics/export/prometheus/PrometheusActuatorEndpoint.java
Patch:
@@ -32,12 +32,11 @@
  * can be scraped by the Prometheus server
  */
 @ConfigurationProperties("endpoints.prometheus")
-public class PrometheusEndpoint extends AbstractEndpoint<ResponseEntity<String>> {
+public class PrometheusActuatorEndpoint extends AbstractEndpoint<ResponseEntity<String>> {
 
-    // TODO what to do in the event that we have multiple registries?
     private final CollectorRegistry collectorRegistry;
 
-    PrometheusEndpoint(CollectorRegistry collectorRegistry) {
+    PrometheusActuatorEndpoint(CollectorRegistry collectorRegistry) {
         super("prometheus");
         this.collectorRegistry = collectorRegistry;
     }

File: src/main/java/org/springframework/metrics/export/prometheus/PrometheusEndpointConfiguration.java
Patch:
@@ -18,11 +18,12 @@
 import io.prometheus.client.CollectorRegistry;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
+import org.springframework.metrics.instrument.prometheus.PrometheusMeterRegistry;
 
 @Configuration
 public class PrometheusEndpointConfiguration {
     @Bean
-    public PrometheusEndpoint prometheusEndpoint() {
-        return new PrometheusEndpoint(CollectorRegistry.defaultRegistry);
+    public PrometheusActuatorEndpoint prometheusEndpoint(PrometheusMeterRegistry registry) {
+        return new PrometheusActuatorEndpoint(registry.getCollectorRegistry());
     }
 }
\ No newline at end of file

File: src/main/java/org/springframework/metrics/instrument/simple/SimpleMeterRegistry.java
Patch:
@@ -19,6 +19,7 @@
 import org.springframework.metrics.instrument.Timer;
 import org.springframework.metrics.instrument.internal.AbstractMeterRegistry;
 import org.springframework.metrics.instrument.internal.MeterId;
+import org.springframework.metrics.instrument.stats.Quantiles;
 
 import java.util.*;
 import java.util.concurrent.ConcurrentHashMap;
@@ -52,7 +53,7 @@ public DistributionSummary distributionSummary(String name, Iterable<Tag> tags)
     }
 
     @Override
-    public Timer timer(String name, Iterable<Tag> tags) {
+    protected Timer timer(String name, Iterable<Tag> tags, Quantiles quantiles) {
         return (Timer) meterMap.computeIfAbsent(new MeterId(name, tags), id -> storeId(id, new SimpleTimer(name)));
     }
 

File: src/main/java/org/springframework/metrics/export/prometheus/EnablePrometheusScraping.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.springframework.metrics.instrument.prometheus;
+package org.springframework.metrics.export.prometheus;
 
 import org.springframework.context.annotation.Import;
 

File: src/main/java/org/springframework/metrics/export/prometheus/PrometheusEndpoint.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.springframework.metrics.instrument.prometheus;
+package org.springframework.metrics.export.prometheus;
 
 import io.prometheus.client.CollectorRegistry;
 import io.prometheus.client.exporter.common.TextFormat;
@@ -32,7 +32,7 @@
  * can be scraped by the Prometheus server
  */
 @ConfigurationProperties("endpoints.prometheus")
-class PrometheusEndpoint extends AbstractEndpoint<ResponseEntity<String>> {
+public class PrometheusEndpoint extends AbstractEndpoint<ResponseEntity<String>> {
 
     // TODO what to do in the event that we have multiple registries?
     private final CollectorRegistry collectorRegistry;

File: src/main/java/org/springframework/metrics/export/prometheus/PrometheusEndpointConfiguration.java
Patch:
@@ -13,15 +13,14 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.springframework.metrics.instrument.prometheus;
+package org.springframework.metrics.export.prometheus;
 
 import io.prometheus.client.CollectorRegistry;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 
 @Configuration
-class PrometheusEndpointConfiguration {
-
+public class PrometheusEndpointConfiguration {
     @Bean
     public PrometheusEndpoint prometheusEndpoint() {
         return new PrometheusEndpoint(CollectorRegistry.defaultRegistry);

File: src/main/java/org/springframework/metrics/instrument/web/MetricsClientHttpRequestInterceptor.java
Patch:
@@ -31,11 +31,11 @@
  */
 public class MetricsClientHttpRequestInterceptor implements ClientHttpRequestInterceptor {
     private final MeterRegistry meterRegistry;
-    private final WebMetricsTagProvider tagProvider;
+    private final WebMetricsTagConfigurer tagProvider;
     private final String metricName;
 
     public MetricsClientHttpRequestInterceptor(MeterRegistry meterRegistry,
-                                               WebMetricsTagProvider tagProvider,
+                                               WebMetricsTagConfigurer tagProvider,
                                                String metricName) {
         this.tagProvider = tagProvider;
         this.meterRegistry = meterRegistry;

File: src/main/java/org/springframework/metrics/instrument/web/WebMetricsTagConfigurer.java
Patch:
@@ -34,7 +34,7 @@
  *
  * @author Jon Schneider
  */
-public interface WebMetricsTagProvider {
+public interface WebMetricsTagConfigurer {
     /**
      * Supplies default tags to timers monitoring RestTemplate requests.
      *
@@ -67,7 +67,7 @@ default Stream<Tag> httpLongRequestTags(HttpServletRequest request, Object handl
      * @return a map of tags added to every Spring MVC HTTP request metric
      */
     default Stream<Tag> httpRequestTags(HttpServletRequest request,
-                                HttpServletResponse response, Object handler) {
+                                        HttpServletResponse response, Object handler) {
         return Stream.empty();
     }
 

File: src/main/java/org/springframework/metrics/instrument/web/WebfluxMetricsWebFilter.java
Patch:
@@ -30,11 +30,11 @@
  */
 public class WebfluxMetricsWebFilter implements WebFilter {
     private final MeterRegistry registry;
-    private final WebMetricsTagProvider tagProvider;
+    private final WebMetricsTagConfigurer tagProvider;
     private final String metricName;
 
     public WebfluxMetricsWebFilter(MeterRegistry registry,
-                                   WebMetricsTagProvider tagProvider,
+                                   WebMetricsTagConfigurer tagProvider,
                                    String metricName) {
         this.registry = registry;
         this.tagProvider = tagProvider;

File: src/main/java/org/springframework/metrics/instrument/web/WebmvcMetricsHandlerInterceptor.java
Patch:
@@ -51,13 +51,13 @@ public class WebmvcMetricsHandlerInterceptor extends HandlerInterceptorAdapter {
     private static final String TIMING_REQUEST_ATTRIBUTE = "requestStartTime";
 
     private final MeterRegistry registry;
-    private final WebMetricsTagProvider provider;
+    private final WebMetricsTagConfigurer provider;
     private final String metricName;
 
     private final Map<Timed, Long> longTaskTimerIds = new ConcurrentHashMap<>();
 
     public WebmvcMetricsHandlerInterceptor(MeterRegistry registry,
-                                           WebMetricsTagProvider provider,
+                                           WebMetricsTagConfigurer provider,
                                            String metricName) {
         this.registry = registry;
         this.provider = provider;

File: src/test/java/org/springframework/metrics/boot/EnableMetricsTestReactive.java
Patch:
@@ -27,8 +27,6 @@
 import org.springframework.metrics.instrument.MeterRegistry;
 import org.springframework.metrics.instrument.Timer;
 import org.springframework.metrics.instrument.simple.SimpleMeterRegistry;
-import org.springframework.metrics.instrument.web.WebMetricsTagProvider;
-import org.springframework.metrics.instrument.web.WebfluxMetricsWebFilter;
 import org.springframework.test.context.junit4.SpringRunner;
 import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.PathVariable;
@@ -55,7 +53,7 @@ public class EnableMetricsTestReactive {
     public void reactiveRequestMappingIsInstrumented() {
         assertThat(loopback.getForObject("/api/echo/hi", String.class)).isEqualTo("hi");
 
-        assertThat(registry.findMeter(Timer.class, "http_server_requests", "status", "200", "uri", "api_echo_-word-"))
+        assertThat(registry.findMeter(Timer.class, "http_server_requests", "status", "200", "uri", "api/echo/{word}"))
                 .containsInstanceOf(Timer.class)
                 .hasValueSatisfying(t -> assertThat(t.count()).isEqualTo(1));
     }

File: src/test/java/org/springframework/metrics/instrument/web/MetricsClientHttpRequestInterceptorTest.java
Patch:
@@ -18,6 +18,7 @@
 import org.junit.jupiter.api.Test;
 import org.springframework.http.HttpMethod;
 import org.springframework.http.MediaType;
+import org.springframework.metrics.export.atlas.AtlasTagFormatter;
 import org.springframework.metrics.instrument.MeterRegistry;
 import org.springframework.metrics.instrument.Timer;
 import org.springframework.metrics.instrument.simple.SimpleMeterRegistry;
@@ -40,7 +41,7 @@ void interceptRestTemplate() {
 
         RestTemplate restTemplate = new RestTemplate();
         restTemplate.setInterceptors(singletonList(new MetricsClientHttpRequestInterceptor(
-                registry, new DefaultWebMetricsTagProvider(),
+                registry, new DefaultWebMetricsTagConfigurer(new AtlasTagFormatter()),
                 "http_client_requests"
         )));
 

File: src/test/java/org/springframework/metrics/instrument/web/WebfluxMetricsWebFilterTest.java
Patch:
@@ -18,6 +18,7 @@
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 import org.mockito.ArgumentCaptor;
+import org.springframework.metrics.export.atlas.AtlasTagFormatter;
 import org.springframework.metrics.instrument.MeterRegistry;
 import org.springframework.metrics.instrument.Tag;
 import org.springframework.metrics.annotation.Timed;
@@ -47,7 +48,7 @@ class WebfluxMetricsWebFilterTest {
     void before() {
         registry = mock(MeterRegistry.class);
         client = WebTestClient.bindToController(new Controller2())
-                .webFilter(new WebfluxMetricsWebFilter(registry, new DefaultWebMetricsTagProvider(), "http_server_requests"))
+                .webFilter(new WebfluxMetricsWebFilter(registry, new DefaultWebMetricsTagConfigurer(new AtlasTagFormatter()), "http_server_requests"))
                 .build();
     }
 

File: src/test/java/org/springframework/metrics/instrument/web/WebmvcMetricsHandlerInterceptorTest.java
Patch:
@@ -68,7 +68,7 @@ void clearRegistry() {
     @Test
     void metricsGatheredWhenMethodIsTimed() throws Exception {
         mvc.perform(get("/api/c1/10")).andExpect(status().isOk());
-        assertThat(registry.findMeter(Timer.class, "http_server_requests", "status", "200", "uri", "api_c1_-id-", "public", "true"))
+        assertThat(registry.findMeter(Timer.class, "http_server_requests", "status", "200", "uri", "api/c1/{id}", "public", "true"))
                 .hasValueSatisfying(t -> assertThat(t.count()).isEqualTo(1));
     }
 
@@ -132,7 +132,7 @@ void metricsGatheredWhenHandledError() throws Exception {
     @Test
     void metricsGatheredWhenRegexEndpoint() throws Exception {
         mvc.perform(get("/api/c1/regex/.abc")).andExpect(status().isOk());
-        assertThat(registry.findMeter(Timer.class, "http_server_requests", "uri", "api_c1_regex_-id-"))
+        assertThat(registry.findMeter(Timer.class, "http_server_requests", "uri", "api/c1/regex/{id:\\.[a-z]+}"))
                 .hasValueSatisfying(t -> assertThat(t.count()).isEqualTo(1));
     }
 

File: src/main/java/org/springframework/metrics/instrument/LongTaskTimer.java
Patch:
@@ -15,7 +15,6 @@
  */
 package org.springframework.metrics.instrument;
 
-import java.util.concurrent.Callable;
 import java.util.function.Consumer;
 
 public interface LongTaskTimer extends Meter {
@@ -25,7 +24,7 @@ public interface LongTaskTimer extends Meter {
      * @param f Function to execute and measure the execution time.
      * @return The return value of `f`.
      */
-    default <T> T record(Callable<T> f) throws Exception {
+    default <T> T recordThrowable(ThrowableCallable<T> f) throws Throwable {
         long id = start();
         try {
             return f.call();

File: src/main/java/org/springframework/metrics/instrument/annotation/Timed.java
Patch:
@@ -19,9 +19,12 @@
 
 @Target({ElementType.TYPE, ElementType.METHOD})
 @Documented
+@Repeatable(TimedSet.class)
 @Retention(RetentionPolicy.RUNTIME)
 public @interface Timed {
     String value() default "";
 
     String[] extraTags() default {};
+
+    boolean longTask() default false;
 }

File: src/main/java/org/springframework/metrics/instrument/web/RouterFunctionMetrics.java
Patch:
@@ -48,7 +48,7 @@ public HandlerFilterFunction<ServerResponse, ServerResponse> timer(String name,
             return next
                     .handle(request)
                     .doOnSuccess(response -> {
-                        Stream<Tag> allTags = Stream.concat(tags, tagProvider.httpRequestTags(request, response, "", null, null));
+                        Stream<Tag> allTags = Stream.concat(tags, tagProvider.httpRequestTags(request, response, "", null));
                         registry.timer(name, allTags).record(System.nanoTime() - start, TimeUnit.NANOSECONDS);
                     });
         };

File: src/main/java/org/springframework/metrics/instrument/web/WebfluxMetricsWebFilter.java
Patch:
@@ -47,11 +47,11 @@ public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {
         Mono<Void> filtered = chain.filter(exchange);
         return filtered
                 .doOnSuccess(done ->
-                        registry.timer(metricName, tagProvider.httpRequestTags(exchange, null, null))
+                        registry.timer(metricName, tagProvider.httpRequestTags(exchange, null))
                                 .record(System.nanoTime() - start, TimeUnit.NANOSECONDS)
                 )
                 .doOnError(t ->
-                        registry.timer(metricName, tagProvider.httpRequestTags(exchange, t, null))
+                        registry.timer(metricName, tagProvider.httpRequestTags(exchange, t))
                                 .record(System.nanoTime() - start, TimeUnit.NANOSECONDS)
                 );
     }

File: src/main/java/org/springframework/metrics/instrument/web/MetricsWebFilter.java
Patch:
@@ -38,11 +38,11 @@ public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {
         Mono<Void> filtered = chain.filter(exchange);
         return filtered
                 .doOnSuccess(done ->
-                        registry.timer("http-request", tagProvider.httpRequestTags(exchange, null, null))
+                        registry.timer("http_server_requests", tagProvider.httpRequestTags(exchange, null, null))
                                 .record(System.nanoTime() - start, TimeUnit.NANOSECONDS)
                 )
                 .doOnError(t ->
-                        registry.timer("http-request", tagProvider.httpRequestTags(exchange, t, null))
+                        registry.timer("http_server_requests", tagProvider.httpRequestTags(exchange, t, null))
                                 .record(System.nanoTime() - start, TimeUnit.NANOSECONDS)
                 );
     }

File: src/main/java/org/springframework/metrics/instrument/web/RouterFunctionMetrics.java
Patch:
@@ -26,7 +26,7 @@
 public class RouterFunctionMetrics {
     private final MeterRegistry registry;
 
-    private String defaultTagName = "http-request";
+    private String defaultTagName = "http_server_requests";
     private WebMetricsTagProvider tagProvider = new DefaultWebMetricsTagProvider();
 
     public RouterFunctionMetrics(MeterRegistry registry) {

File: src/main/java/org/springframework/metrics/instrument/web/WebmvcMetricsHandlerInterceptor.java
Patch:
@@ -89,7 +89,7 @@ private void recordMetric(HttpServletRequest request, HttpServletResponse respon
             }
 
             if (timed != null) {
-                String name = environment.getProperty("spring.metrics.web.name", "http-request");
+                String name = environment.getProperty("spring.metrics.web.name", "http_server_requests");
                 if (!timed.value().isEmpty()) {
                     name = timed.value();
                 }

File: src/test/java/org/springframework/metrics/instrument/web/RouterFunctionMetricsTest.java
Patch:
@@ -77,7 +77,7 @@ private SimpleTimer expectTimer() {
         SimpleTimer timer = new SimpleTimer();
 
         //noinspection unchecked
-        when(registry.timer(eq("http-request"), any(Stream.class))).thenReturn(timer);
+        when(registry.timer(eq("http_server_requests"), any(Stream.class))).thenReturn(timer);
         return timer;
     }
 }

File: src/test/java/org/springframework/metrics/instrument/web/WebfluxMetricsHandlerInterceptorTest.java
Patch:
@@ -84,7 +84,7 @@ private SimpleTimer expectTimer() {
         SimpleTimer timer = new SimpleTimer();
 
         //noinspection unchecked
-        when(registry.timer(eq("http-request"), any(Stream.class))).thenReturn(timer);
+        when(registry.timer(eq("http_server_requests"), any(Stream.class))).thenReturn(timer);
         return timer;
     }
 

File: src/test/java/org/springframework/metrics/instrument/web/WebmvcMetricsHandlerInterceptorTest.java
Patch:
@@ -132,7 +132,7 @@ private SimpleTimer expectTimer() {
         SimpleTimer timer = new SimpleTimer();
 
         //noinspection unchecked
-        when(registry.timer(eq("http-request"), any(Stream.class))).thenReturn(timer);
+        when(registry.timer(eq("http_server_requests"), any(Stream.class))).thenReturn(timer);
         return timer;
     }
 

