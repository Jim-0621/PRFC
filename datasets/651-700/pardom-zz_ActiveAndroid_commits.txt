File: tests/src/com/activeandroid/test/ConfigurationTest.java
Patch:
@@ -20,6 +20,7 @@ public void testDefaultValue() throws IOException, ClassNotFoundException {
         assertNull(conf.getModelClasses());
         assertFalse(conf.isValid());
         assertNull(conf.getTypeSerializers());
+        assertEquals(Configuration.SQL_PARSER_LEGACY, conf.getSqlParser());
     }
 
     public void testCreateConfigurationWithMockModel() {

File: tests/src/com/activeandroid/test/CacheTest.java
Patch:
@@ -1,21 +1,22 @@
 package com.activeandroid.test;
 
+import android.test.AndroidTestCase;
+
 import com.activeandroid.ActiveAndroid;
 import com.activeandroid.Cache;
 import com.activeandroid.Configuration;
 import com.activeandroid.Model;
 import com.activeandroid.TableInfo;
 import com.activeandroid.annotation.Table;
 
-import android.test.AndroidTestCase;
-
 import java.util.Collection;
 
 public class CacheTest extends AndroidTestCase {
 
     @Override
     protected void setUp() {
         Configuration conf = new Configuration.Builder(getContext())
+                .setDatabaseName("CacheTest")
                 .addModelClasses(CacheTestModel.class, CacheTestModel2.class)
                 .create();
         ActiveAndroid.initialize(conf, true);

File: tests/src/com/activeandroid/test/MockModel.java
Patch:
@@ -19,6 +19,6 @@
 import com.activeandroid.Model;
 import com.activeandroid.annotation.Table;
 
-@Table(name = "MockModel", id = "Id")
+@Table(name = "MockModel")
 public class MockModel extends Model {
 }

File: tests/src/com/activeandroid/test/query/FromTest.java
Patch:
@@ -166,11 +166,11 @@ private From from() {
 		return new Select().all().from(MockModel.class);
 	}
 	
-	@Table(name = "JoinModel", id = "Id")
+	@Table(name = "JoinModel")
 	private static class JoinModel extends Model {
 	}
 	
-	@Table(name = "JoinModel2", id = "Id")
+	@Table(name = "JoinModel2")
 	private static class JoinModel2 extends Model {
 	}
 }

File: tests/src/com/activeandroid/test/CacheTest.java
Patch:
@@ -16,6 +16,7 @@ public class CacheTest extends AndroidTestCase {
     @Override
     protected void setUp() {
         Configuration conf = new Configuration.Builder(getContext())
+                .setDatabaseName("CacheTest")
                 .addModelClasses(CacheTestModel.class, CacheTestModel2.class)
                 .create();
         ActiveAndroid.initialize(conf, true);

File: tests/src/com/activeandroid/test/MockModel.java
Patch:
@@ -19,6 +19,6 @@
 import com.activeandroid.Model;
 import com.activeandroid.annotation.Table;
 
-@Table(name = "MockModel", id = "Id")
+@Table(name = "MockModel")
 public class MockModel extends Model {
 }

File: tests/src/com/activeandroid/test/query/FromTest.java
Patch:
@@ -166,11 +166,11 @@ private From from() {
 		return new Select().all().from(MockModel.class);
 	}
 	
-	@Table(name = "JoinModel", id = "Id")
+	@Table(name = "JoinModel")
 	private static class JoinModel extends Model {
 	}
 	
-	@Table(name = "JoinModel2", id = "Id")
+	@Table(name = "JoinModel2")
 	private static class JoinModel2 extends Model {
 	}
 }

File: src/com/activeandroid/annotation/Table.java
Patch:
@@ -24,5 +24,8 @@
 @Target(ElementType.TYPE)
 @Retention(RetentionPolicy.RUNTIME)
 public @interface Table {
+
+	public static final String DEFAULT_ID_NAME = "Id";
 	public String name();
+	public String id() default DEFAULT_ID_NAME;
 }

File: tests/src/com/activeandroid/test/MockModel.java
Patch:
@@ -19,6 +19,6 @@
 import com.activeandroid.Model;
 import com.activeandroid.annotation.Table;
 
-@Table(name = "MockModel")
+@Table(name = "MockModel", id = "Id")
 public class MockModel extends Model {
 }

File: tests/src/com/activeandroid/test/query/FromTest.java
Patch:
@@ -166,11 +166,11 @@ private From from() {
 		return new Select().all().from(MockModel.class);
 	}
 	
-	@Table(name = "JoinModel")
+	@Table(name = "JoinModel", id = "Id")
 	private static class JoinModel extends Model {
 	}
 	
-	@Table(name = "JoinModel2")
+	@Table(name = "JoinModel2", id = "Id")
 	private static class JoinModel2 extends Model {
 	}
 }

File: src/com/activeandroid/ModelInfo.java
Patch:
@@ -149,7 +149,7 @@ private void scanForModel(Context context) throws IOException {
 
 		for (String path : paths) {
 			File file = new File(path);
-			scanForModelClasses(file, packageName, context.getClass().getClassLoader());
+			scanForModelClasses(file, packageName, context.getClassLoader());
 		}
 	}
 

File: src/com/activeandroid/query/From.java
Patch:
@@ -219,7 +219,8 @@ public <T extends Model> T executeSingle() {
 			return (T) SQLiteUtils.rawQuerySingle(mType, toSql(), getArguments());
 		}
 		else {
-			SQLiteUtils.execSql(toSql(), getArguments());
+			limit(1);
+			SQLiteUtils.rawQuerySingle(mType, toSql(), getArguments()).delete();
 			return null;
 		}
 	}

File: src/com/activeandroid/query/From.java
Patch:
@@ -219,7 +219,8 @@ public <T extends Model> T executeSingle() {
 			return (T) SQLiteUtils.rawQuerySingle(mType, toSql(), getArguments());
 		}
 		else {
-			SQLiteUtils.execSql(toSql(), getArguments());
+			limit(1);
+			SQLiteUtils.rawQuerySingle(mType, toSql(), getArguments()).delete();
 			return null;
 		}
 	}

File: src/com/activeandroid/query/From.java
Patch:
@@ -19,6 +19,7 @@
 import android.text.TextUtils;
 import com.activeandroid.Cache;
 import com.activeandroid.Model;
+import com.activeandroid.content.ContentProvider;
 import com.activeandroid.query.Join.JoinType;
 import com.activeandroid.util.Log;
 import com.activeandroid.util.SQLiteUtils;
@@ -206,6 +207,8 @@ public <T extends Model> List<T> execute() {
 		}
 		else {
 			SQLiteUtils.execSql(toSql(), getArguments());
+			Cache.getContext().getContentResolver().notifyChange(ContentProvider
+					.createUri(mType, null), null);
 			return null;
 		}
 	}

File: src/com/activeandroid/query/From.java
Patch:
@@ -19,6 +19,7 @@
 import android.text.TextUtils;
 import com.activeandroid.Cache;
 import com.activeandroid.Model;
+import com.activeandroid.content.ContentProvider;
 import com.activeandroid.query.Join.JoinType;
 import com.activeandroid.util.Log;
 import com.activeandroid.util.SQLiteUtils;
@@ -206,6 +207,8 @@ public <T extends Model> List<T> execute() {
 		}
 		else {
 			SQLiteUtils.execSql(toSql(), getArguments());
+			Cache.getContext().getContentResolver().notifyChange(ContentProvider
+					.createUri(mType, null), null);
 			return null;
 		}
 	}

File: src/com/activeandroid/annotation/Table.java
Patch:
@@ -24,5 +24,8 @@
 @Target(ElementType.TYPE)
 @Retention(RetentionPolicy.RUNTIME)
 public @interface Table {
+
+	public static final String DEFAULT_ID_NAME = "Id";
 	public String name();
+	public String id() default DEFAULT_ID_NAME;
 }

File: tests/src/com/activeandroid/test/MockModel.java
Patch:
@@ -19,6 +19,6 @@
 import com.activeandroid.Model;
 import com.activeandroid.annotation.Table;
 
-@Table(name = "MockModel")
+@Table(name = "MockModel", id = "Id")
 public class MockModel extends Model {
 }

File: tests/src/com/activeandroid/test/query/FromTest.java
Patch:
@@ -156,11 +156,11 @@ private From from() {
 		return new Select().all().from(MockModel.class);
 	}
 	
-	@Table(name = "JoinModel")
+	@Table(name = "JoinModel", id = "Id")
 	private static class JoinModel extends Model {
 	}
 	
-	@Table(name = "JoinModel2")
+	@Table(name = "JoinModel2", id = "Id")
 	private static class JoinModel2 extends Model {
 	}
 }

File: src/com/activeandroid/TableInfo.java
Patch:
@@ -24,6 +24,8 @@
 import java.util.List;
 import java.util.Map;
 
+import android.text.TextUtils;
+
 import com.activeandroid.annotation.Column;
 import com.activeandroid.annotation.Table;
 import com.activeandroid.util.ReflectionUtils;
@@ -59,7 +61,7 @@ public TableInfo(Class<? extends Model> type) {
 		for (Field field : fields) {
 			final Column columnAnnotation = field.getAnnotation(Column.class);
 			String columnName = columnAnnotation.name();
-			if (columnName == null || columnName.isEmpty()) {
+			if (TextUtils.isEmpty(columnName)) {
 				columnName = field.getName();
 			}
 			

File: src/com/activeandroid/annotation/Column.java
Patch:
@@ -1,4 +1,4 @@
- package com.activeandroid.annotation;
+package com.activeandroid.annotation;
 
 /*
  * Copyright (C) 2010 Michael Pardo

File: src/com/activeandroid/annotation/Column.java
Patch:
@@ -1,4 +1,4 @@
-package com.activeandroid.annotation;
+ package com.activeandroid.annotation;
 
 /*
  * Copyright (C) 2010 Michael Pardo
@@ -32,7 +32,7 @@ public enum ForeignKeyAction {
 		SET_NULL, SET_DEFAULT, CASCADE, RESTRICT, NO_ACTION
 	}
 
-	public String name();
+	public String name() default "";
 
 	public int length() default -1;
 

File: src/com/activeandroid/ModelInfo.java
Patch:
@@ -147,7 +147,7 @@ private void scanForModel(Context context) throws IOException {
 
 		for (String path : paths) {
 			File file = new File(path);
-			scanForModelClasses(file, packageName, context.getClass().getClassLoader());
+			scanForModelClasses(file, packageName, context.getClassLoader());
 		}
 	}
 

File: src/com/activeandroid/Configuration.java
Patch:
@@ -255,7 +255,7 @@ private List<Class<? extends Model>> loadModelList(String[] models) {
 			final ClassLoader classLoader = mContext.getClass().getClassLoader();
 			for (String model : models) {
 				try {
-					Class modelClass = Class.forName(model, false, classLoader);
+					Class modelClass = Class.forName(model.trim(), false, classLoader);
 					if (ReflectionUtils.isModel(modelClass)) {
 						modelClasses.add(modelClass);
 					}
@@ -273,7 +273,7 @@ private List<Class<? extends TypeSerializer>> loadSerializerList(String[] serial
 			final ClassLoader classLoader = mContext.getClass().getClassLoader();
 			for (String serializer : serializers) {
 				try {
-					Class serializerClass = Class.forName(serializer, false, classLoader);
+					Class serializerClass = Class.forName(serializer.trim(), false, classLoader);
 					if (ReflectionUtils.isTypeSerializer(serializerClass)) {
 						typeSerializers.add(serializerClass);
 					}

File: src/com/activeandroid/ModelInfo.java
Patch:
@@ -123,7 +123,7 @@ private void scanForModel(Context context) throws IOException {
 		String sourcePath = context.getApplicationInfo().sourceDir;
 		List<String> paths = new ArrayList<String>();
 
-		if (sourcePath != null && new File(sourcePath).isDirectory()) {
+		if (sourcePath != null && !(new File(sourcePath).isDirectory())) {
 			DexFile dexfile = new DexFile(sourcePath);
 			Enumeration<String> entries = dexfile.entries();
 

File: src/com/activeandroid/Configuration.java
Patch:
@@ -75,7 +75,7 @@ public int getCacheSize() {
 	}
 
 	public boolean isValid() {
-		return mModelClasses.size() > 0;
+		return mModelClasses != null && mModelClasses.size() > 0;
 	}
 
 	//////////////////////////////////////////////////////////////////////////////////////

File: src/com/activeandroid/query/From.java
Patch:
@@ -181,6 +181,7 @@ public String toSql() {
 
 		if (mLimit != null) {
 			sql.append("LIMIT ");
+			sql.append(mLimit);
 			sql.append(" ");
 		}
 

File: src/com/activeandroid/query/From.java
Patch:
@@ -181,6 +181,7 @@ public String toSql() {
 
 		if (mLimit != null) {
 			sql.append("LIMIT ");
+			sql.append(mLimit);
 			sql.append(" ");
 		}
 

File: src/com/activeandroid/query/From.java
Patch:
@@ -174,7 +174,7 @@ public String toSql() {
 		// Don't wast time building the string
 		// unless we're going to log it.
 		if (Log.isEnabled())
-			Log.v(sqlBuilder.append(" ").append(TextUtils.join(",", getArguments())).toString());
+			Log.v(sqlBuilder.toString() + " " + TextUtils.join(",", getArguments()));
 
 		return sqlBuilder.toString().trim();
 	}

File: src/com/activeandroid/query/Set.java
Patch:
@@ -92,7 +92,7 @@ public String[] getArguments() {
 		}
 
 		for (int i = 0; i < whereSize; i++) {
-			args[i] = mWhereArguments.get(i).toString();
+			args[i+setSize] = mWhereArguments.get(i).toString();
 		}
 
 		return args;

File: src/com/activeandroid/Model.java
Patch:
@@ -164,7 +164,7 @@ public static void delete(Class<? extends Model> type, long id) {
 		new Delete().from(type).where("Id=?", id).execute();
 	}
 
-	public static <T extends Model> T load(Class<? extends Model> type, long id) {
+	public static <T extends Model> T load(Class<T> type, long id) {
 		return new Select().from(type).where("Id=?", id).executeSingle();
 	}
 
@@ -269,7 +269,7 @@ else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
 	// PROTECTED METHODS
 	//////////////////////////////////////////////////////////////////////////////////////
 
-	protected final <E extends Model> List<E> getMany(Class<? extends Model> type, String foreignKey) {
+	protected final <T extends Model> List<T> getMany(Class<T> type, String foreignKey) {
 		return new Select().from(type).where(Cache.getTableName(type) + "." + foreignKey + "=?", getId()).execute();
 	}
 

File: src/com/activeandroid/Model.java
Patch:
@@ -164,7 +164,7 @@ public static void delete(Class<? extends Model> type, long id) {
 		new Delete().from(type).where("Id=?", id).execute();
 	}
 
-	public static <T extends Model> T load(Class<? extends Model> type, long id) {
+	public static <T extends Model> T load(Class<T> type, long id) {
 		return new Select().from(type).where("Id=?", id).executeSingle();
 	}
 
@@ -269,7 +269,7 @@ else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
 	// PROTECTED METHODS
 	//////////////////////////////////////////////////////////////////////////////////////
 
-	protected final <E extends Model> List<E> getMany(Class<? extends Model> type, String foreignKey) {
+	protected final <T extends Model> List<T> getMany(Class<T> type, String foreignKey) {
 		return new Select().from(type).where(Cache.getTableName(type) + "." + foreignKey + "=?", getId()).execute();
 	}
 

File: src/com/activeandroid/Model.java
Patch:
@@ -254,13 +254,13 @@ else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
 				}
 			}
 			catch (IllegalArgumentException e) {
-				Log.e(e.getMessage());
+                Log.e(e.getClass().getName(), e);
 			}
 			catch (IllegalAccessException e) {
-				Log.e(e.getMessage());
+                Log.e(e.getClass().getName(), e);
 			}
 			catch (SecurityException e) {
-				Log.e(e.getMessage());
+                Log.e(e.getClass().getName(), e);
 			}
 		}
 	}

File: src/com/activeandroid/Cache.java
Patch:
@@ -83,7 +83,6 @@ public static synchronized void initialize(Application application, int cacheSiz
 
 	public static synchronized void clear() {
 		sEntities.evictAll();
-		;
 		Log.v("Cache cleared.");
 	}
 

File: src/com/activeandroid/query/Set.java
Patch:
@@ -92,7 +92,7 @@ public String[] getArguments() {
 		}
 
 		for (int i = 0; i < whereSize; i++) {
-			args[i] = mWhereArguments.get(i).toString();
+			args[i+setSize] = mWhereArguments.get(i).toString();
 		}
 
 		return args;

File: src/com/activeandroid/Cache.java
Patch:
@@ -78,12 +78,12 @@ public static synchronized void clear() {
 	}
 
 	public static synchronized void dispose() {
+		closeDatabase();
+		
 		sEntities = null;
 		sModelInfo = null;
 		sDatabaseHelper = null;
 
-		closeDatabase();
-
 		sIsInitialized = false;
 
 		Log.v("ActiveAndroid disposed. Call initialize to use library.");

File: src/com/activeandroid/serializer/TypeSerializer.java
Patch:
@@ -16,12 +16,10 @@
  * limitations under the License.
  */
 
-import com.activeandroid.util.SQLiteUtils.SQLiteType;
-
 public abstract class TypeSerializer {
 	public abstract Class<?> getDeserializedType();
 
-	public abstract SQLiteType getSerializedType();
+	public abstract Class<?> getSerializedType();
 
 	public abstract Object serialize(Object data);
 

File: src/com/activeandroid/Model.java
Patch:
@@ -255,7 +255,7 @@ protected final <E extends Model> List<E> getMany(Class<? extends Model> type, S
 	public boolean equals(Object obj) {
 		final Model other = (Model) obj;
 
-		return this.mId != null && (this.mTableInfo.getTableName() == other.mTableInfo.getTableName())
-				&& (this.mId == other.mId);
+		return this.mId != null && (this.mTableInfo.getTableName().equals(other.mTableInfo.getTableName()))
+				&& (this.mId.equals(other.mId));
 	}
-}
\ No newline at end of file
+}

File: src/com/activeandroid/Model.java
Patch:
@@ -255,7 +255,7 @@ protected final <E extends Model> List<E> getMany(Class<? extends Model> type, S
 	public boolean equals(Object obj) {
 		final Model other = (Model) obj;
 
-		return this.mId != null && (this.mTableInfo.getTableName() == other.mTableInfo.getTableName())
-				&& (this.mId == other.mId);
+		return this.mId != null && (this.mTableInfo.getTableName().equals(other.mTableInfo.getTableName()))
+				&& (this.mId.equals(other.mId));
 	}
-}
\ No newline at end of file
+}

File: src/com/activeandroid/ModelInfo.java
Patch:
@@ -156,7 +156,7 @@ private void scanForModelClasses(File path, String packageName, ClassLoader clas
 				}
 				else if (ReflectionUtils.isTypeSerializer(discoveredClass)) {
 					TypeSerializer typeSerializer = (TypeSerializer) discoveredClass.newInstance();
-					mTypeSerializers.put(typeSerializer.getClass(), typeSerializer);
+					mTypeSerializers.put(typeSerializer.getDeserializedType(), typeSerializer);
 				}
 			}
 			catch (ClassNotFoundException e) {

File: src/com/activeandroid/util/SQLiteUtils.java
Patch:
@@ -125,7 +125,7 @@ public static String createColumnDefinition(TableInfo tableInfo, Field field) {
 
 		final Class<?> type = field.getType();
 		final String name = tableInfo.getColumnName(field);
-		final TypeSerializer typeSerializer = Cache.getParserForType(tableInfo.getType());
+		final TypeSerializer typeSerializer = Cache.getParserForType(field.getType());
 		final Column column = field.getAnnotation(Column.class);
 
 		if (typeSerializer != null) {

File: src/com/activeandroid/ModelInfo.java
Patch:
@@ -156,7 +156,7 @@ private void scanForModelClasses(File path, String packageName, ClassLoader clas
 				}
 				else if (ReflectionUtils.isTypeSerializer(discoveredClass)) {
 					TypeSerializer typeSerializer = (TypeSerializer) discoveredClass.newInstance();
-					mTypeSerializers.put(typeSerializer.getClass(), typeSerializer);
+					mTypeSerializers.put(typeSerializer.getDeserializedType(), typeSerializer);
 				}
 			}
 			catch (ClassNotFoundException e) {

File: src/com/activeandroid/util/SQLiteUtils.java
Patch:
@@ -125,7 +125,7 @@ public static String createColumnDefinition(TableInfo tableInfo, Field field) {
 
 		final Class<?> type = field.getType();
 		final String name = tableInfo.getColumnName(field);
-		final TypeSerializer typeSerializer = Cache.getParserForType(tableInfo.getType());
+		final TypeSerializer typeSerializer = Cache.getParserForType(field.getType());
 		final Column column = field.getAnnotation(Column.class);
 
 		if (typeSerializer != null) {

File: src/com/activeandroid/Model.java
Patch:
@@ -244,7 +244,7 @@ else if (ReflectionUtils.isModel(fieldType)) {
 	//////////////////////////////////////////////////////////////////////////////////////
 
 	protected final <E extends Model> List<E> getMany(Class<? extends Model> type, String foreignKey) {
-		return new Select().from(type).where(mTableInfo.getTableName() + "." + foreignKey + "=?", getId()).execute();
+		return new Select().from(type).where(Cache.getTableName(type) + "." + foreignKey + "=?", getId()).execute();
 	}
 
 	//////////////////////////////////////////////////////////////////////////////////////

File: src/com/activeandroid/content/ContentProvider.java
Patch:
@@ -83,7 +83,8 @@ public int update(Uri uri, ContentValues values, String selection, String[] sele
 
 	@Override
 	public int delete(Uri uri, String selection, String[] selectionArgs) {
-		int count = Cache.openDatabase().delete(uri.getPath(), selection, selectionArgs);
+		Class<? extends Model> type = getModelType(uri);
+		int count = Cache.openDatabase().delete(Cache.getTableName(type), selection, selectionArgs);
 		notifyChange(uri);
 
 		return count;

File: src/com/activeandroid/DatabaseHelper.java
Patch:
@@ -36,7 +36,7 @@
 import com.activeandroid.util.ReflectionUtils;
 import com.activeandroid.util.SQLiteUtils;
 
-public class DatabaseHelper extends SQLiteOpenHelper {
+public final class DatabaseHelper extends SQLiteOpenHelper {
 	//////////////////////////////////////////////////////////////////////////////////////
 	// PRIVATE CONSTANTS
 	//////////////////////////////////////////////////////////////////////////////////////

File: src/com/activeandroid/ModelInfo.java
Patch:
@@ -34,7 +34,7 @@
 
 import dalvik.system.DexFile;
 
-class ModelInfo {
+final class ModelInfo {
 	//////////////////////////////////////////////////////////////////////////////////////
 	// PRIVATE METHODS
 	//////////////////////////////////////////////////////////////////////////////////////

File: src/com/activeandroid/TableInfo.java
Patch:
@@ -28,7 +28,7 @@
 import com.activeandroid.annotation.Table;
 import com.activeandroid.util.Log;
 
-public class TableInfo {
+public final class TableInfo {
 	//////////////////////////////////////////////////////////////////////////////////////
 	// PRIVATE MEMBERS
 	//////////////////////////////////////////////////////////////////////////////////////

File: src/com/activeandroid/query/Delete.java
Patch:
@@ -18,7 +18,7 @@
 
 import com.activeandroid.Model;
 
-final public class Delete implements Sqlable {
+public final class Delete implements Sqlable {
 	public Delete() {
 	}
 

File: src/com/activeandroid/query/From.java
Patch:
@@ -25,7 +25,7 @@
 import com.activeandroid.query.Join.JoinType;
 import com.activeandroid.util.SQLiteUtils;
 
-public class From implements Sqlable {
+public final class From implements Sqlable {
 	private Sqlable mQueryBase;
 
 	private Class<? extends Model> mType;

File: src/com/activeandroid/query/Join.java
Patch:
@@ -21,7 +21,7 @@
 import com.activeandroid.Cache;
 import com.activeandroid.Model;
 
-public class Join implements Sqlable {
+public final class Join implements Sqlable {
 	static enum JoinType {
 		LEFT, OUTER, INNER, CROSS
 	}

File: src/com/activeandroid/query/Select.java
Patch:
@@ -20,7 +20,7 @@
 
 import com.activeandroid.Model;
 
-public class Select implements Sqlable {
+public final class Select implements Sqlable {
 	private String[] mColumns;
 	private boolean mDistinct = false;
 	private boolean mAll = false;

File: src/com/activeandroid/query/Set.java
Patch:
@@ -22,7 +22,7 @@
 
 import com.activeandroid.util.SQLiteUtils;
 
-public class Set implements Sqlable {
+public final class Set implements Sqlable {
 	private Update mUpdate;
 
 	private String mSet;

File: src/com/activeandroid/query/Update.java
Patch:
@@ -19,7 +19,7 @@
 import com.activeandroid.Cache;
 import com.activeandroid.Model;
 
-final public class Update implements Sqlable {
+public final class Update implements Sqlable {
 	private Class<? extends Model> mType;
 
 	public Update(Class<? extends Model> table) {

File: src/com/activeandroid/serializer/CalendarSerializer.java
Patch:
@@ -20,7 +20,7 @@
 
 import com.activeandroid.util.SQLiteUtils.SQLiteType;
 
-final public class CalendarSerializer extends TypeSerializer {
+public final class CalendarSerializer extends TypeSerializer {
 	public Class<?> getDeserializedType() {
 		return Calendar.class;
 	}

File: src/com/activeandroid/serializer/SqlDateSerializer.java
Patch:
@@ -20,7 +20,7 @@
 
 import com.activeandroid.util.SQLiteUtils.SQLiteType;
 
-final public class SqlDateSerializer extends TypeSerializer {
+public final class SqlDateSerializer extends TypeSerializer {
 	public Class<?> getDeserializedType() {
 		return Date.class;
 	}

File: src/com/activeandroid/serializer/UtilDateSerializer.java
Patch:
@@ -20,7 +20,7 @@
 
 import com.activeandroid.util.SQLiteUtils.SQLiteType;
 
-final public class UtilDateSerializer extends TypeSerializer {
+public final class UtilDateSerializer extends TypeSerializer {
 	public Class<?> getDeserializedType() {
 		return Date.class;
 	}

File: src/com/activeandroid/util/Log.java
Patch:
@@ -16,7 +16,7 @@
  * limitations under the License.
  */
 
-public class Log {
+public final class Log {
 	//////////////////////////////////////////////////////////////////////////////////////
 	// PRIVATE MEMBERS
 	//////////////////////////////////////////////////////////////////////////////////////

File: src/com/activeandroid/Cache.java
Patch:
@@ -126,7 +126,7 @@ public static synchronized List<Field> getClassFields(Class<? extends Model> typ
 	}
 
 	public static synchronized TypeSerializer getParserForType(Class<?> Type) {
-		return sModelInfo.getParser(Type);
+		return sModelInfo.getTypeSerializer(Type);
 	}
 
 	public static synchronized String getTableName(Class<? extends Model> type) {

File: src/com/activeandroid/TableInfo.java
Patch:
@@ -1,7 +1,6 @@
 package com.activeandroid;
 
 import java.lang.reflect.Field;
-import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
@@ -58,8 +57,9 @@ public String getTableName() {
 		return mTableName;
 	}
 
+	@SuppressWarnings("unchecked")
 	public List<Field> getFields() {
-		return new ArrayList(mColumnNames.keySet());
+		return (List<Field>) mColumnNames.keySet();
 	}
 
 	public String getColumnName(Field field) {

File: src/com/activeandroid/Cache.java
Patch:
@@ -37,7 +37,7 @@ private Cache() {
 	}
 
 	//////////////////////////////////////////////////////////////////////////////////////
-	// INTERFACES
+	// PUBLIC METHODS
 	//////////////////////////////////////////////////////////////////////////////////////
 
 	public static synchronized void initialize(Context context) {

File: src/com/activeandroid/Params.java
Patch:
@@ -4,6 +4,6 @@ class Params {
 	public static final String VERSION = "2.1.0";
 	public static final boolean IS_TRIAL = false;
 	
-	public static final boolean LOGGING_ENABLED = false;
+	public static final boolean LOGGING_ENABLED = true;
 	public static final String LOGGING_TAG = "ActiveAndroid";
 }

File: src/com/activeandroid/Application.java
Patch:
@@ -1,6 +1,7 @@
 package com.activeandroid;
 
 import java.util.HashSet;
+import java.util.Map;
 import java.util.Set;
 
 import android.database.sqlite.SQLiteDatabase;
@@ -10,6 +11,7 @@ public class Application extends android.app.Application {
 	private DatabaseHelper mDatabaseHelper;
 	private SQLiteDatabase mDatabase;
 	private Set<ActiveRecordBase<?>> mEntities;
+	private Map<Class<?>, TypeParser<?>> mParsers;
 
 	@Override
 	public void onCreate() {
@@ -20,6 +22,7 @@ public void onCreate() {
 		}
 
 		mDatabaseHelper = new DatabaseHelper(this);
+		mParsers = ReflectionUtils.getParsers(this);
 		mEntities = new HashSet<ActiveRecordBase<?>>();
 	}
 	

File: src/com/activeandroid/ActiveRecordBase.java
Patch:
@@ -223,7 +223,7 @@ public static <T> T last(Context context, Class<? extends ActiveRecordBase<?>> t
 	 * @return int the number of records affected.
 	 */
 	public static <T> int delete(Context context, Class<? extends ActiveRecordBase<?>> type) {
-		return delete(context, type, "1");
+		return delete(context, type, null);
 	}
 
 	/**

File: src/com/activeandroid/ActiveRecordBase.java
Patch:
@@ -112,7 +112,7 @@ else if (fieldType.equals(java.sql.Date.class)) {
 				}
 				// Calendar
 				else if (fieldType.equals(Calendar.class)) {
-					values.put(fieldName, ((Calendar) field.get(this)).getTimeInMillis());
+					values.put(fieldName, ((Calendar) field.get(this)).getTime().getTime());
 				}
 				// Double
 				else if (fieldType.equals(Double.class) || fieldType.equals(double.class)) {
@@ -496,7 +496,7 @@ private static final <T> ArrayList<T> processCursor(Context context, Class<? ext
 			Log.e(Params.LOGGING_TAG, e.getMessage());
 		}
 		catch (NoSuchMethodException e) {
-			Log.e(Params.LOGGING_TAG, e.getMessage());
+			Log.e(Params.LOGGING_TAG, "Missing required constructor: " + e.getMessage());
 		}
 
 		return entities;

File: src/com/activeandroid/Application.java
Patch:
@@ -57,7 +57,7 @@ final void removeEntity(ActiveRecordBase<?> entity) {
 
 	final ActiveRecordBase<?> getEntity(Class<? extends ActiveRecordBase<?>> entityType, long id) {
 		for (ActiveRecordBase<?> entity : mEntities) {
-			if (entity.getClass() == entityType && entity.getId() == id) {
+			if (entity != null && entity.getClass() == entityType && entity.getId() == id) {
 				return entity;
 			}
 		}

File: src/com/activeandroid/ReflectionUtils.java
Patch:
@@ -2,6 +2,7 @@
 
 import java.lang.reflect.Field;
 import java.util.ArrayList;
+import java.util.Calendar;
 
 import android.util.Log;
 
@@ -79,6 +80,7 @@ public static boolean typeIsSQLiteInteger(Class<?> type) {
 			|| type.equals(boolean.class)
 			|| type.equals(java.util.Date.class)
 			|| type.equals(java.sql.Date.class)
+			|| type.equals(Calendar.class)
 			|| type.equals(Integer.class)
 			|| type.equals(int.class)
 			|| type.equals(Long.class)

