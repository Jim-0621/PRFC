File: src/main/java/com/tagtraum/perf/gcviewer/view/AboutDialog.java
Patch:
@@ -76,6 +76,7 @@ public class AboutDialog extends ScreenCenteredDialog implements ActionListener
         "Seraf√≠n Sedano",
         "Jugal Shah",
         "Andrey Skripalschikov",
+        "Jeffrey Swan",
         "Kamil Szymanski",
         "Pierre Viret",
         "Yin Xunjun",

File: src/main/java/com/tagtraum/perf/gcviewer/ctrl/action/Exit.java
Patch:
@@ -39,7 +39,8 @@ public void actionPerformed(final ActionEvent e) {
     }
 
     // Used by OS X adaptations
-    public void quit() {
+    public boolean quit() {
         actionPerformed(null);
+        return true;
     }
 }

File: src/main/java/com/tagtraum/perf/gcviewer/ctrl/action/Exit.java
Patch:
@@ -39,7 +39,8 @@ public void actionPerformed(final ActionEvent e) {
     }
 
     // Used by OS X adaptations
-    public void quit() {
+    public boolean quit() {
         actionPerformed(null);
+        return true;
     }
 }

File: src/main/java/com/tagtraum/perf/gcviewer/ctrl/GCModelLoaderGroupTracker.java
Patch:
@@ -13,6 +13,7 @@
   */
 public interface GCModelLoaderGroupTracker extends PropertyChangeListener {
     /**
+     * @param listener The PropertyChangeListener to be added
      * @see java.beans.PropertyChangeSupport#addPropertyChangeListener(java.beans.PropertyChangeListener)
      */
     void addPropertyChangeListener(PropertyChangeListener listener);
@@ -36,6 +37,7 @@ public interface GCModelLoaderGroupTracker extends PropertyChangeListener {
     void propertyChange(PropertyChangeEvent evt);
 
     /**
+     * @param listener The PropertyChangeListener to be removed
      * @see java.beans.PropertyChangeSupport#removePropertyChangeListener(java.beans.PropertyChangeListener)
      */
     void removePropertyChangeListener(PropertyChangeListener listener);

File: src/main/java/com/tagtraum/perf/gcviewer/ctrl/impl/ViewMenuController.java
Patch:
@@ -24,7 +24,7 @@ public class ViewMenuController implements ActionListener, PropertyChangeListene
     private GCViewerGui gui;
 
     /**
-     * @param gui
+     * @param gui gui to listen for actions
      */
     public ViewMenuController(GCViewerGui gui) {
         this.gui = gui;

File: src/main/java/com/tagtraum/perf/gcviewer/exp/impl/DataWriterFactory.java
Patch:
@@ -17,6 +17,7 @@
  * @author <a href="mailto:hs@tagtraum.com">Hendrik Schreiber</a>
  */
 public class DataWriterFactory {
+    public static final String GC_PREFERENCES = "gcPreferences";
 
     /**
      * Standard factory method to retrieve one of the <code>DataWriter</code> implementations.
@@ -53,7 +54,7 @@ public static DataWriter getDataWriter(File file, DataWriterType type, Map<Strin
             case CSV_TS  : return new CSVTSDataWriter(outputStream);
             case SIMPLE  : return new SimpleGcWriter(outputStream);
             case SUMMARY : return new SummaryDataWriter(outputStream, configuration);
-            case PNG     : return new PNGDataWriter(outputStream);
+            case PNG     : return new PNGDataWriter(outputStream, configuration);
             default : throw new IOException(LocalisationHelper.getString("datawriterfactory_instantiation_failed") + " " + file);
         }
     }

File: src/main/java/com/tagtraum/perf/gcviewer/view/GCViewerGuiMenuBar.java
Patch:
@@ -120,7 +120,7 @@ public void addToWindowMenuGroup(JCheckBoxMenuItem menuItem) {
     
     /**
      * Remove a menuItem from the window menu including removal of the group. 
-     * @param menuItem
+     * @param menuItem menuItem to be removed
      */
     public void removeFromWindowMenuGroup(JMenuItem menuItem) {
         windowMenu.remove(menuItem);

File: src/main/java/com/tagtraum/perf/gcviewer/view/model/GCResourceGroup.java
Patch:
@@ -16,7 +16,6 @@
 
 /**
  * <p>Holds a group of resource names (those displayed in the same GCDocument).</p>
- * <p>
  * <p>This class was refactored from "URLSet".</p>
  *
  * @author <a href="mailto:gcviewer@gmx.ch">Joerg Wuethrich</a>

File: src/main/java/com/tagtraum/perf/gcviewer/view/renderer/ConcurrentGcBegionEndRenderer.java
Patch:
@@ -37,7 +37,7 @@ public void paintComponent(Graphics2D g2d) {
         for (Iterator<ConcurrentGCEvent> i = getModelChart().getModel().getConcurrentGCEvents(); i.hasNext();) {
             final ConcurrentGCEvent event = i.next();
             if (event.isConcurrentCollectionStart()) {
-                final int scaledTimestamp = (int) (scaleFactor * (event.getTimestamp() - getModelChart().getModel().getFirstPauseTimeStamp()));
+                final int scaledTimestamp = (int) (scaleFactor * (event.getTimestamp() - getModelChart().getModel().getFirstPauseTimeStamp() - event.getPause()));
                 if (scaledTimestamp != lastScaledTimestampBegin) {
                     g2d.setPaint(CONCURRENT_COLLECTION_BEGIN);
                     g2d.drawLine(scaledTimestamp, 0, scaledTimestamp, height);

File: src/main/java/com/tagtraum/perf/gcviewer/view/renderer/GCRectanglesRenderer.java
Patch:
@@ -8,9 +8,9 @@
 import java.util.Iterator;
 
 import com.tagtraum.perf.gcviewer.model.AbstractGCEvent;
+import com.tagtraum.perf.gcviewer.model.VmOperationEvent;
 import com.tagtraum.perf.gcviewer.view.ChartRenderer;
 import com.tagtraum.perf.gcviewer.view.ModelChartImpl;
-import com.tagtraum.perf.gcviewer.model.VmOperationEvent;
 
 /**
  * Renders all stop the world event pauses as rectangles.
@@ -56,7 +56,7 @@ public void paintComponent(Graphics2D g2d) {
             double pause = event.getPause();
             int width = (int) Math.max(Math.abs(scaleFactor * pause), 1.0d);
             int height = (int) (pause * scaledHeight);
-            int x = (int) (scaleFactor * (event.getTimestamp() - getModelChart().getModel().getFirstPauseTimeStamp()));
+            int x = (int) (scaleFactor * (event.getTimestamp() - getModelChart().getModel().getFirstPauseTimeStamp() - event.getPause()));
             int y = getHeight() - (int) (pause * scaledHeight);
             if (lastX != x || lastY != y || lastWidth != width || lastHeight != height) {
                 if ((x + width) > leftBoundary && x < rightBoundary) {

File: src/main/java/com/tagtraum/perf/gcviewer/view/renderer/TotalTenuredRenderer.java
Patch:
@@ -48,7 +48,7 @@ public Polygon computePolygon(ModelChart modelChart, GCModel model) {
                         // but with a slanting line between 0 and after the first pause
                         polygon.addPoint(0, (double)tenured.getTotal());
                     }
-                    polygon.addPoint(tenured.getTimestamp() - model.getFirstPauseTimeStamp() + event.getPause(),
+                    polygon.addPoint(tenured.getTimestamp() - model.getFirstPauseTimeStamp(),
                             tenured.getTotal());
                     lastTotal = tenured.getTotal();
                 }

File: src/main/java/com/tagtraum/perf/gcviewer/view/renderer/TotalYoungRenderer.java
Patch:
@@ -57,7 +57,7 @@ public Polygon computePolygon(ModelChart modelChart, GCModel model) {
                         // but with a slanting line between 0 and after the first pause
                         polygon.addPoint(0, tenuredSize + youngSize);
                     }
-                    polygon.addPoint(event.getTimestamp() - model.getFirstPauseTimeStamp() + event.getPause(), tenuredSize + youngSize);
+                    polygon.addPoint(event.getTimestamp() - model.getFirstPauseTimeStamp(), tenuredSize + youngSize);
                     lastYoung = youngSize;
                     lastTenured = tenuredSize;
                 }

File: src/main/java/com/tagtraum/perf/gcviewer/view/renderer/UsedTenuredRenderer.java
Patch:
@@ -39,7 +39,7 @@ public Polygon computePolygon(ModelChart modelChart, GCModel model) {
                     // only -XX:+PrintGCDetails adds information about generations
                     // e.g. "GC remark" of G1 algorithm does not contain memory information
                     if (tenuredEvent.getTotal() > 0) {
-                        final double timestamp = event.getTimestamp() - model.getFirstPauseTimeStamp();
+                        final double timestamp = event.getTimestamp() - model.getFirstPauseTimeStamp() - event.getPause();
                         polygon.addPoint(timestamp, tenuredEvent.getPreUsed());
                         polygon.addPoint(timestamp + event.getPause(), tenuredEvent.getPostUsed());
                     }

File: src/main/java/com/tagtraum/perf/gcviewer/view/renderer/UsedYoungRenderer.java
Patch:
@@ -54,7 +54,7 @@ public Polygon computePolygon(ModelChart modelChart, GCModel model) {
                     }
                     // e.g. "GC remark" of G1 algorithm does not contain memory information
                     if (youngEvent.getTotal() > 0) {
-                        final double timestamp = event.getTimestamp() - model.getFirstPauseTimeStamp();
+                        final double timestamp = event.getTimestamp() - model.getFirstPauseTimeStamp() - event.getPause();
                         polygon.addPoint(timestamp, lastTenuredTotal + youngEvent.getPreUsed());
                         polygon.addPoint(timestamp + event.getPause(), tenuredTotal + youngEvent.getPostUsed());
                     }

File: src/main/java/com/tagtraum/perf/gcviewer/view/util/ExtensionFileFilter.java
Patch:
@@ -1,7 +1,7 @@
 package com.tagtraum.perf.gcviewer.view.util;
 
-import javax.swing.filechooser.FileFilter;
 import java.io.File;
+import javax.swing.filechooser.FileFilter;
 
 /**
  * ExtensionFileFilter.
@@ -22,7 +22,6 @@ public ExtensionFileFilter(String extension) {
     }
 
     public boolean accept(File f) {
-        // TODO: Can probably be refactored; seems to be the same as in Export class
         try {
             return f.isDirectory() || f.toString().toLowerCase().endsWith("." + extension);
         }

File: src/test/java/com/tagtraum/perf/gcviewer/imp/TestDataReaderIBM_J9_R26.java
Patch:
@@ -10,6 +10,7 @@
 import java.util.logging.Level;
 
 import com.tagtraum.perf.gcviewer.UnittestHelper;
+import com.tagtraum.perf.gcviewer.UnittestHelper.FOLDER;
 import com.tagtraum.perf.gcviewer.model.GCEvent;
 import com.tagtraum.perf.gcviewer.model.GCModel;
 import com.tagtraum.perf.gcviewer.model.GCResource;
@@ -21,7 +22,7 @@
  */
 public class TestDataReaderIBM_J9_R26 {
     private InputStream getInputStream(String fileName) throws IOException {
-        return UnittestHelper.getResourceAsStream(UnittestHelper.FOLDER_IBM, fileName);
+        return UnittestHelper.getResourceAsStream(FOLDER.IBM, fileName);
     }
 
     private DataReader getDataReader(GCResource gcResource) throws IOException {

File: src/test/java/com/tagtraum/perf/gcviewer/imp/TestDataReaderIBM_J9_R27.java
Patch:
@@ -10,6 +10,7 @@
 import java.util.logging.Level;
 
 import com.tagtraum.perf.gcviewer.UnittestHelper;
+import com.tagtraum.perf.gcviewer.UnittestHelper.FOLDER;
 import com.tagtraum.perf.gcviewer.model.GCEvent;
 import com.tagtraum.perf.gcviewer.model.GCModel;
 import com.tagtraum.perf.gcviewer.model.GCResource;
@@ -23,7 +24,7 @@
 public class TestDataReaderIBM_J9_R27 {
 
     private InputStream getInputStream(String fileName) throws IOException {
-        return UnittestHelper.getResourceAsStream(UnittestHelper.FOLDER_IBM, fileName);
+        return UnittestHelper.getResourceAsStream(FOLDER.IBM, fileName);
     }
 
     private DataReader getDataReader(GCResource gcResource) throws IOException {

File: src/test/java/com/tagtraum/perf/gcviewer/imp/TestDataReaderIBM_J9_R28.java
Patch:
@@ -11,6 +11,7 @@
 import java.util.logging.Level;
 
 import com.tagtraum.perf.gcviewer.UnittestHelper;
+import com.tagtraum.perf.gcviewer.UnittestHelper.FOLDER;
 import com.tagtraum.perf.gcviewer.model.GCEvent;
 import com.tagtraum.perf.gcviewer.model.GCModel;
 import com.tagtraum.perf.gcviewer.model.GCResource;
@@ -25,7 +26,7 @@
 public class TestDataReaderIBM_J9_R28 {
 
     private InputStream getInputStream(String fileName) throws IOException {
-        return UnittestHelper.getResourceAsStream(UnittestHelper.FOLDER_IBM, fileName);
+        return UnittestHelper.getResourceAsStream(FOLDER.IBM, fileName);
     }
 
     private DataReader getDataReader(GCResource gcResource) throws IOException {

File: src/test/java/com/tagtraum/perf/gcviewer/util/TestHttpUrlConnectionHelper.java
Patch:
@@ -24,16 +24,15 @@
 import java.nio.file.Path;
 import java.nio.file.Paths;
 
+import com.tagtraum.perf.gcviewer.UnittestHelper.FOLDER;
 import org.junit.Test;
 
-import com.tagtraum.perf.gcviewer.UnittestHelper;
-
 public class TestHttpUrlConnectionHelper {
 
     private static final String SAMPLE_GCLOG_SUN1_6_0 = "SampleSun1_6_0PrintHeapAtGC.txt";
     private static final String SAMPLE_GCLOG_SUN1_6_0_GZ = SAMPLE_GCLOG_SUN1_6_0 + ".gz";  
     
-    private static final String PARENT_PATH = "src/test/resources/" + UnittestHelper.FOLDER_OPENJDK + "/";
+    private static final String PARENT_PATH = "src/test/resources/" + FOLDER.OPENJDK.getFolderName() + "/";
     private static final Charset UTF8 = StandardCharsets.UTF_8;
 
     private ByteArrayInputStream create404InputStream() {

File: src/main/java/com/tagtraum/perf/gcviewer/model/AbstractGCEvent.java
Patch:
@@ -668,6 +668,7 @@ public String toString() {
         public static final Type UJL_G1_SURVIVOR = new Type("Survivor regions", Generation.YOUNG, Concurrency.SERIAL, GcPattern.GC_REGION);
         public static final Type UJL_G1_OLD = new Type("Old regions", Generation.TENURED, Concurrency.SERIAL, GcPattern.GC_REGION);
         public static final Type UJL_G1_HUMongous = new Type("Humongous regions", Generation.TENURED, Concurrency.SERIAL, GcPattern.GC_REGION);
+        public static final Type UJL_G1_ARCHIVE = new Type("Archive regions", Generation.TENURED, Concurrency.SERIAL, GcPattern.GC_REGION);
 
         public static final Type UJL_G1_PHASE_PRE_EVACUATE_COLLECTION_SET = new Type("Pre Evacuate Collection Set", Generation.YOUNG, Concurrency.SERIAL, GcPattern.GC_PAUSE);
         public static final Type UJL_G1_PHASE_EVACUATE_COLLECTION_SET = new Type("Evacuate Collection Set", Generation.YOUNG, Concurrency.SERIAL, GcPattern.GC_PAUSE);

File: src/main/java/com/tagtraum/perf/gcviewer/view/AboutDialog.java
Patch:
@@ -52,6 +52,7 @@ public class AboutDialog extends ScreenCenteredDialog implements ActionListener
         "Mary Sunitha Joseph",
         "Johan Kaving",
         "Maciej Kwiecien",
+        "Dennis Lawler",
         "Yanqi Li",
         "Henry Lin",
         "James Livingston",

File: src/main/java/com/tagtraum/perf/gcviewer/exp/impl/DataWriterFactory.java
Patch:
@@ -17,6 +17,7 @@
  * @author <a href="mailto:hs@tagtraum.com">Hendrik Schreiber</a>
  */
 public class DataWriterFactory {
+    public static final String GC_PREFERENCES = "gcPreferences";
 
     /**
      * Standard factory method to retrieve one of the <code>DataWriter</code> implementations.
@@ -53,7 +54,7 @@ public static DataWriter getDataWriter(File file, DataWriterType type, Map<Strin
             case CSV_TS  : return new CSVTSDataWriter(outputStream);
             case SIMPLE  : return new SimpleGcWriter(outputStream);
             case SUMMARY : return new SummaryDataWriter(outputStream, configuration);
-            case PNG     : return new PNGDataWriter(outputStream);
+            case PNG     : return new PNGDataWriter(outputStream, configuration);
             default : throw new IOException(LocalisationHelper.getString("datawriterfactory_instantiation_failed") + " " + file);
         }
     }

File: src/main/java/com/tagtraum/perf/gcviewer/view/AboutDialog.java
Patch:
@@ -67,6 +67,7 @@ public class AboutDialog extends ScreenCenteredDialog implements ActionListener
         "Thomas Peyrard",
         "Rupesh Ramachandran",
         "Fred Rolland",
+        "Sandro Rossi",
         "Heiko W. Rupp",
         "Stephan Schroevers",
         "Fran√ßois Secherre",

File: src/main/java/com/tagtraum/perf/gcviewer/exp/impl/DataWriterFactory.java
Patch:
@@ -17,6 +17,7 @@
  * @author <a href="mailto:hs@tagtraum.com">Hendrik Schreiber</a>
  */
 public class DataWriterFactory {
+    public static final String GC_PREFERENCES = "gcPreferences";
 
     /**
      * Standard factory method to retrieve one of the <code>DataWriter</code> implementations.
@@ -53,7 +54,7 @@ public static DataWriter getDataWriter(File file, DataWriterType type, Map<Strin
             case CSV_TS  : return new CSVTSDataWriter(outputStream);
             case SIMPLE  : return new SimpleGcWriter(outputStream);
             case SUMMARY : return new SummaryDataWriter(outputStream, configuration);
-            case PNG     : return new PNGDataWriter(outputStream);
+            case PNG     : return new PNGDataWriter(outputStream, configuration);
             default : throw new IOException(LocalisationHelper.getString("datawriterfactory_instantiation_failed") + " " + file);
         }
     }

File: src/main/java/com/tagtraum/perf/gcviewer/imp/DataReaderUnifiedJvmLogging.java
Patch:
@@ -338,7 +338,7 @@ private AbstractGCEvent<?> parseTail(ParseContext context, AbstractGCEvent<?> ev
     }
 
     private void parseGcTail(ParseContext context, String tail) {
-        if (!(tail == null)) {
+        if (tail != null) {
             getLogger().warning(String.format("Unexpected tail present in the end of line number %d (expected nothing to be present, tail=\"%s\"; line=\"%s\")", in.getLineNumber(), tail, context.getLine()));
         }
     }

File: src/test/java/com/tagtraum/perf/gcviewer/UnittestHelper.java
Patch:
@@ -141,7 +141,7 @@ public static GCModel getGCModelFromLogFile(String fileName, FOLDER folderName,
             assertThat("reader from factory", reader.getClass().getName(), is(expectedDataReaderClass.getName()));
 
             GCModel model = reader.read();
-            // TODO: add support for [gc,phases] in all gc algorithms
+            // TODO: add support for "[gc,phases" in all gc algorithms
             // assertThat("number of errors", handler.getCount(), is(0));
             return model;
         }

File: src/main/java/com/tagtraum/perf/gcviewer/imp/DataReaderUnifiedJvmLogging.java
Patch:
@@ -250,11 +250,11 @@ private AbstractGCEvent<?> handleTagGcStartTail(ParseContext context, AbstractGC
     }
 
     private AbstractGCEvent<?> handleTagGcMetaspaceTail(ParseContext context, AbstractGCEvent<?> event, String tail) {
-        event = parseTail(context, event, tail);
+        AbstractGCEvent<?> returnEvent = parseTail(context, event, tail);
         // the UJL "Old" event occurs often after the next STW events have taken place; ignore it for now
         //   size after concurrent collection will be calculated by GCModel#add()
-        if (!event.getExtendedType().getType().equals(Type.UJL_CMS_CONCURRENT_OLD)) {
-            updateEventDetails(context, event);
+        if (!returnEvent.getExtendedType().getType().equals(Type.UJL_CMS_CONCURRENT_OLD)) {
+            updateEventDetails(context, returnEvent);
         }
         return null;
     }

File: src/main/java/com/tagtraum/perf/gcviewer/model/AbstractGCEvent.java
Patch:
@@ -329,7 +329,7 @@ public boolean hasPause() {
     public boolean isCycleStart() {
         return Type.UJL_ZGC_GARBAGE_COLLECTION.equals(getExtendedType().getType());
     }
-    
+
     public double getPause() {
         return pause;
     }
@@ -727,7 +727,7 @@ public enum GcPattern {
     	GC_MEMORY_PAUSE,
         /** "GC type": "# regions before"-&gt;"# regions after"[("#total regions")] ("total regions" is optional; needs a region size to calculate memory usage)*/
         GC_REGION,
-        /** "Garbage Collection (Reason)" "memory before"("percentage of total")->"memory after"("percentage of total") */
+        /** "Garbage Collection (Reason)" "memory before"("percentage of total")-&gt;"memory after"("percentage of total") */
         GC_MEMORY_PERCENTAGE,
         /** "Heap memory type" "memory current"("memory percentage") */
         GC_HEAP_MEMORY_PERCENTAGE

File: src/main/java/com/tagtraum/perf/gcviewer/model/AbstractGCEvent.java
Patch:
@@ -327,7 +327,7 @@ public boolean hasPause() {
     }
 
     public boolean isCycleStart() {
-    	return Type.UJL_ZGC_GARBAGE_COLLECTION.equals(getExtendedType().getType());
+        return Type.UJL_ZGC_GARBAGE_COLLECTION.equals(getExtendedType().getType());
     }
     
     public double getPause() {

File: src/main/java/com/tagtraum/perf/gcviewer/imp/DataReaderUnifiedJvmLogging.java
Patch:
@@ -171,7 +171,7 @@ public GCModel read() throws IOException {
         getLogger().info("Reading Oracle / OpenJDK unified jvm logging format...");
 
         try {
-            // some information shared accross several lines of parsing...
+            // some information shared across several lines of parsing...
             Map<String, AbstractGCEvent<?>> partialEventsMap = new HashMap<>();
             Map<String, Object> infoMap = new HashMap<>();
 

File: src/main/java/com/tagtraum/perf/gcviewer/imp/DataReaderUnifiedJvmLogging.java
Patch:
@@ -469,11 +469,11 @@ private boolean lineContainsParseableEvent(ParseContext context) {
         return false;
     }
 
-    private boolean isParseablePhaseEvent(String line) {    	
+    private boolean isParseablePhaseEvent(String line) {
         Matcher phaseStringMatcher = line != null ? PATTERN_INCLUDE_STRINGS_PHASE.matcher(line) : null;
-        if(phaseStringMatcher.find()) {
+        if (phaseStringMatcher.find()) {
             String phaseType = phaseStringMatcher.group(GROUP_DECORATORS_GC_TYPE);
-            if(phaseType != null && AbstractGCEvent.Type.lookup(phaseType) != null) {
+            if (phaseType != null && AbstractGCEvent.Type.lookup(phaseType) != null) {
                 return true;
             }
         }

File: src/main/java/com/tagtraum/perf/gcviewer/imp/DataReaderSun1_6_0.java
Patch:
@@ -601,8 +601,8 @@ protected AbstractGCEvent<?> parseLine(String line, ParseInformation pos) throws
 
             return ae;
         }
-        catch (RuntimeException rte) {
-            throw new ParseException("Error parsing entry (" + rte.toString() + ")", line, pos);
+        catch (RuntimeException | UnknownGcTypeException e) {
+            throw new ParseException(e.toString(), line, pos);
         }
     }
 

File: src/main/java/com/tagtraum/perf/gcviewer/model/AbstractGCEvent.java
Patch:
@@ -583,6 +583,7 @@ public String toString() {
 
         // TODO: Generation: young and tenured!
         public static final Type G1_YOUNG_INITIAL_MARK = new Type("GC pause (young) (initial-mark)", Generation.TENURED, Concurrency.SERIAL, GcPattern.GC_MEMORY_PAUSE);
+        public static final Type G1_YOUNG_INITIAL_MARK_SYSTEM_GC = new Type("GC pause (System.gc()) (young) (initial-mark)", Generation.TENURED, Concurrency.SERIAL, GcPattern.GC_MEMORY_PAUSE);
         public static final Type G1_YOUNG_INITIAL_MARK_TO_SPACE_OVERFLOW = new Type("GC pause (young) (to-space overflow) (initial-mark)", Generation.TENURED, Concurrency.SERIAL, GcPattern.GC_MEMORY_PAUSE);
         // The following two Types are basically the same but in a different order. In JDK 6 the order was defined, no longer the case with JDK 7 (see: https://github.com/chewiebug/GCViewer/issues/100)
         public static final Type G1_YOUNG_INITIAL_MARK_TO_SPACE_EXHAUSTED = new Type("GC pause (young) (initial-mark) (to-space exhausted)", Generation.TENURED, Concurrency.SERIAL, GcPattern.GC_MEMORY_PAUSE);

File: src/test/java/com/tagtraum/perf/gcviewer/UnittestHelper.java
Patch:
@@ -35,7 +35,7 @@ public enum FOLDER {
         IBM("ibm"),
         JROCKIT("jrockit"),
         OPENJDK(FOLDER_OPENJDK),
-        OPENJDK_UJL(OPENJDK + File.separator + "unified-jvm-logging"),
+        OPENJDK_UJL(OPENJDK.getFolderName() + File.separator + "unified-jvm-logging"),
         HTTP("http");
 
         private String folderName;

File: src/test/java/com/tagtraum/perf/gcviewer/util/TestHttpUrlConnectionHelper.java
Patch:
@@ -32,7 +32,7 @@ public class TestHttpUrlConnectionHelper {
     private static final String SAMPLE_GCLOG_SUN1_6_0 = "SampleSun1_6_0PrintHeapAtGC.txt";
     private static final String SAMPLE_GCLOG_SUN1_6_0_GZ = SAMPLE_GCLOG_SUN1_6_0 + ".gz";  
     
-    private static final String PARENT_PATH = "src/test/resources/" + FOLDER.OPENJDK + "/";
+    private static final String PARENT_PATH = "src/test/resources/" + FOLDER.OPENJDK.getFolderName() + "/";
     private static final Charset UTF8 = StandardCharsets.UTF_8;
 
     private ByteArrayInputStream create404InputStream() {

File: src/main/java/com/tagtraum/perf/gcviewer/imp/DataReaderShenandoah.java
Patch:
@@ -1,6 +1,5 @@
 package com.tagtraum.perf.gcviewer.imp;
 
-import java.io.BufferedReader;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.UnsupportedEncodingException;
@@ -93,7 +92,7 @@ public GCModel read() throws IOException {
         GCModel model = new GCModel();
         model.setFormat(GCModel.Format.RED_HAT_SHENANDOAH_GC);
 
-        Stream<String> lines = new BufferedReader(in).lines();
+        Stream<String> lines = in.lines();
         lines.filter(this::lineNotInExcludedStrings)
                 .map(this::parseShenandoahEvent)
                 .filter(Objects::nonNull)
@@ -118,7 +117,7 @@ private AbstractGCEvent<?> parseShenandoahEvent(String line) {
             setPauseAndTimestamp(event, withHeapMatcher.group(WITH_HEAP_DURATION), withHeapMatcher.group(WITH_HEAP_TIMESTAMP));
             addHeapDetailsToEvent(event, withHeapMatcher.group(WITH_HEAP_MEMORY));
         } else {
-            getLogger().warning("Found line that has no match:" + line);
+            getLogger().warning(String.format("Failed to parse Line number %d in the log file: %s", in.getLineNumber(), line));
         }
 
         return event;

File: src/main/java/com/tagtraum/perf/gcviewer/view/model/GCPreferences.java
Patch:
@@ -197,7 +197,7 @@ private int getIntValue(String key, int defaultValue) {
             result = Integer.parseInt(properties.getProperty(key));
         }
         catch (NumberFormatException e) {
-            e.printStackTrace();
+            LOGGER.info(() -> "could not read property '" + key + "' from " + getPreferencesFile().getAbsolutePath() + "; using default: " + defaultValue);
         }
         
         return result;

File: src/main/java/com/tagtraum/perf/gcviewer/ctrl/impl/GCModelSeriesLoaderImpl.java
Patch:
@@ -28,6 +28,6 @@ public GCResource getGcResource() {
 
     @Override
     protected GCModel loadGcModel() throws DataReaderException {
-        return dataReaderFacade.loadModelFromSeries(gcResourceSeries);
+        return dataReaderFacade.loadModel(gcResourceSeries);
     }
 }

File: src/test/java/com/tagtraum/perf/gcviewer/imp/TestDataReaderHPUX1_2.java
Patch:
@@ -4,11 +4,11 @@
 
 import java.io.InputStream;
 
+import com.tagtraum.perf.gcviewer.model.GcResourceFile;
 import org.junit.Test;
 
 import com.tagtraum.perf.gcviewer.UnittestHelper;
 import com.tagtraum.perf.gcviewer.model.GCModel;
-import com.tagtraum.perf.gcviewer.model.GCResource;
 
 /**
  *
@@ -22,7 +22,7 @@ public class TestDataReaderHPUX1_2 {
     public void testParse1() throws Exception {
         String fileName = "SampleHP-UX1_3.txt";
         InputStream in = UnittestHelper.getResourceAsStream(UnittestHelper.FOLDER_HP, fileName);
-        DataReader reader = new DataReaderHPUX1_2(new GCResource(fileName), in);
+        DataReader reader = new DataReaderHPUX1_2(new GcResourceFile(fileName), in);
         GCModel model = reader.read();
         
         assertEquals("number of events", 135, model.size());

File: src/test/java/com/tagtraum/perf/gcviewer/imp/TestDataReaderHPUX1_4_1.java
Patch:
@@ -10,11 +10,11 @@
 
 import java.io.InputStream;
 
+import com.tagtraum.perf.gcviewer.model.GcResourceFile;
 import org.junit.Test;
 
 import com.tagtraum.perf.gcviewer.UnittestHelper;
 import com.tagtraum.perf.gcviewer.model.GCModel;
-import com.tagtraum.perf.gcviewer.model.GCResource;
 
 /**
  *
@@ -28,7 +28,7 @@ public class TestDataReaderHPUX1_4_1 {
     public void testParse1() throws Exception {
         String fileName = "SampleHP-UX1_4_1.txt";
         final InputStream in = UnittestHelper.getResourceAsStream(UnittestHelper.FOLDER_HP, fileName);
-        final DataReader reader = new DataReaderHPUX1_4_1(new GCResource(fileName), in);
+        final DataReader reader = new DataReaderHPUX1_4_1(new GcResourceFile(fileName), in);
         GCModel model = reader.read();
         
         assertEquals("number of events", 4, model.size());

File: src/test/java/com/tagtraum/perf/gcviewer/imp/TestDataReaderIBM1_2_2.java
Patch:
@@ -4,11 +4,11 @@
 
 import java.io.InputStream;
 
+import com.tagtraum.perf.gcviewer.model.GcResourceFile;
 import org.junit.Test;
 
 import com.tagtraum.perf.gcviewer.UnittestHelper;
 import com.tagtraum.perf.gcviewer.model.GCModel;
-import com.tagtraum.perf.gcviewer.model.GCResource;
 
 /**
  *
@@ -22,7 +22,7 @@ public class TestDataReaderIBM1_2_2 {
     public void testParse1() throws Exception {
         String fileName = "SampleIBM1_2_2.txt";
         InputStream in = UnittestHelper.getResourceAsStream(UnittestHelper.FOLDER_IBM, fileName);
-        DataReader reader = new DataReaderIBM1_3_0(new GCResource(fileName), in);
+        DataReader reader = new DataReaderIBM1_3_0(new GcResourceFile(fileName), in);
         GCModel model = reader.read();
         
         assertEquals("number of events", 28, model.size());

File: src/test/java/com/tagtraum/perf/gcviewer/imp/TestDataReaderIBM1_3_1.java
Patch:
@@ -4,11 +4,11 @@
 
 import java.io.InputStream;
 
+import com.tagtraum.perf.gcviewer.model.GcResourceFile;
 import org.junit.Test;
 
 import com.tagtraum.perf.gcviewer.UnittestHelper;
 import com.tagtraum.perf.gcviewer.model.GCModel;
-import com.tagtraum.perf.gcviewer.model.GCResource;
 
 /**
  *
@@ -22,7 +22,7 @@ public class TestDataReaderIBM1_3_1 {
     public void testParse1() throws Exception {
         String fileName = "SampleIBM1_3_1.txt";
         InputStream in = UnittestHelper.getResourceAsStream(UnittestHelper.FOLDER_IBM, fileName);
-        DataReader reader = new DataReaderIBM1_3_1(new GCResource(fileName), in);
+        DataReader reader = new DataReaderIBM1_3_1(new GcResourceFile(fileName), in);
         GCModel model = reader.read();
         
         assertEquals("number of events", 21, model.size());

File: src/test/java/com/tagtraum/perf/gcviewer/imp/TestDataReaderIBM1_4_2.java
Patch:
@@ -10,12 +10,12 @@
 
 import java.io.InputStream;
 
+import com.tagtraum.perf.gcviewer.model.GcResourceFile;
 import org.junit.Ignore;
 import org.junit.Test;
 
 import com.tagtraum.perf.gcviewer.UnittestHelper;
 import com.tagtraum.perf.gcviewer.model.GCModel;
-import com.tagtraum.perf.gcviewer.model.GCResource;
 
 /**
  *
@@ -30,7 +30,7 @@ public class TestDataReaderIBM1_4_2 {
     public void testParse1() throws Exception {
         String fileName = "SampleIBM1_4_2.txt";
         final InputStream in = UnittestHelper.getResourceAsStream(UnittestHelper.FOLDER_IBM, fileName);
-        final DataReader reader = new DataReaderIBM1_4_2(new GCResource(fileName), in);
+        final DataReader reader = new DataReaderIBM1_4_2(new GcResourceFile(fileName), in);
         GCModel model = reader.read();
         
         assertEquals("number of events", 2884, model.size());

File: src/test/java/com/tagtraum/perf/gcviewer/imp/TestDataReaderIBMJ9_5_0.java
Patch:
@@ -6,12 +6,12 @@
 import java.io.InputStream;
 import java.io.UnsupportedEncodingException;
 
+import com.tagtraum.perf.gcviewer.model.GcResourceFile;
 import org.junit.Test;
 
 import com.tagtraum.perf.gcviewer.UnittestHelper;
 import com.tagtraum.perf.gcviewer.model.GCEvent;
 import com.tagtraum.perf.gcviewer.model.GCModel;
-import com.tagtraum.perf.gcviewer.model.GCResource;
 import com.tagtraum.perf.gcviewer.model.AbstractGCEvent.Type;
 
 /**
@@ -27,7 +27,7 @@ private InputStream getInputStream(String filename) throws IOException {
     }
     
     private DataReader getDataReader(String fileName) throws UnsupportedEncodingException, IOException {
-        return new DataReaderIBM_J9_5_0(new GCResource(fileName), getInputStream(fileName));
+        return new DataReaderIBM_J9_5_0(new GcResourceFile(fileName), getInputStream(fileName));
     }
     
     @Test

File: src/test/java/com/tagtraum/perf/gcviewer/imp/TestDataReaderIBMi5OS1_4_2.java
Patch:
@@ -4,11 +4,11 @@
 
 import java.io.InputStream;
 
+import com.tagtraum.perf.gcviewer.model.GcResourceFile;
 import org.junit.Test;
 
 import com.tagtraum.perf.gcviewer.UnittestHelper;
 import com.tagtraum.perf.gcviewer.model.GCModel;
-import com.tagtraum.perf.gcviewer.model.GCResource;
 
 
 /**
@@ -23,7 +23,7 @@ public class TestDataReaderIBMi5OS1_4_2 {
     public void testParse1() throws Exception {
         String fileName = "SampleIBMi5OS1_4_2.txt";
         final InputStream in = UnittestHelper.getResourceAsStream(UnittestHelper.FOLDER_IBM, fileName);
-        final DataReader reader = new DataReaderIBMi5OS1_4_2(new GCResource(fileName), in);
+        final DataReader reader = new DataReaderIBMi5OS1_4_2(new GcResourceFile(fileName), in);
         GCModel model = reader.read();
         
         assertEquals("number of events", 53, model.size());

File: src/test/java/com/tagtraum/perf/gcviewer/imp/TestDataReaderSun1_3_1_19.java
Patch:
@@ -4,12 +4,12 @@
 
 import java.io.InputStream;
 
+import com.tagtraum.perf.gcviewer.model.GcResourceFile;
 import org.junit.Ignore;
 import org.junit.Test;
 
 import com.tagtraum.perf.gcviewer.UnittestHelper;
 import com.tagtraum.perf.gcviewer.model.GCModel;
-import com.tagtraum.perf.gcviewer.model.GCResource;
 
 /**
  *
@@ -26,10 +26,10 @@ public void testCMSPrintGCDetails() throws Exception {
     	
         String fileName = "SampleSun1_3_1_19SunOS.txt";
     	final InputStream in = UnittestHelper.getResourceAsStream(UnittestHelper.FOLDER_OPENJDK, fileName);
-        final DataReader reader = new DataReaderSun1_3_1(new GCResource(fileName), in, GcLogType.SUN1_3_1);
+        final DataReader reader = new DataReaderSun1_3_1(new GcResourceFile(fileName), in, GcLogType.SUN1_3_1);
         GCModel model = reader.read();
         
         assertEquals("throughput", 95.21, model.getThroughput(), 0.01);
     }
 
-}
\ No newline at end of file
+}

File: src/main/java/com/tagtraum/perf/gcviewer/imp/DataReaderFacade.java
Patch:
@@ -10,7 +10,6 @@
 import java.net.MalformedURLException;
 import java.net.URL;
 import java.net.URLConnection;
-import java.text.MessageFormat;
 import java.util.logging.Logger;
 
 import javax.swing.BorderFactory;
@@ -138,15 +137,15 @@ private GCModel readModel(URL url) throws IOException {
      */
     private void showErrorDialog(final URL url, TextAreaLogHandler textAreaLogHandler, final Component parent) {
         final JPanel panel = new JPanel(new BorderLayout());
-        final JLabel messageLabel = new JLabel(new MessageFormat(LocalisationHelper.getString("datareader_parseerror_dialog_message")).format(new Object[]{textAreaLogHandler.getErrorCount(), url}));
+        final JLabel messageLabel = new JLabel(LocalisationHelper.getString("datareader_parseerror_dialog_message", textAreaLogHandler.getErrorCount(), url));
         messageLabel.setBorder(BorderFactory.createEmptyBorder(5, 0, 5, 0));
         panel.add(messageLabel, BorderLayout.NORTH);
         final JScrollPane textAreaScrollPane = new JScrollPane(textAreaLogHandler.getTextArea());
         textAreaScrollPane.setPreferredSize(new Dimension(700, 500));
         panel.add(textAreaScrollPane, BorderLayout.CENTER);
         SwingUtilities.invokeLater(new Runnable(){
             public void run() {
-                JOptionPane.showMessageDialog(parent, panel, new MessageFormat(LocalisationHelper.getString("datareader_parseerror_dialog_title")).format(new Object[]{url}), JOptionPane.ERROR_MESSAGE);
+                JOptionPane.showMessageDialog(parent, panel, LocalisationHelper.getString("datareader_parseerror_dialog_title", url), JOptionPane.ERROR_MESSAGE);
             }
         });
     }

File: src/main/java/com/tagtraum/perf/gcviewer/imp/AbstractDataReaderSun.java
Patch:
@@ -595,7 +595,6 @@ private boolean nextIsPromotionFailed(String line, ParseInformation pos) {
      * @param in inputStream of the current log to be read
      * @param pos current parse position
      * @param lineStartStrings lines starting with these strings should be ignored
-     * @return line number including lines read in this method
      * @throws IOException problem with reading from the file
      */
     protected void skipLines(LineNumberReader in, ParseInformation pos, List<String> lineStartStrings) throws IOException {

File: src/main/java/com/tagtraum/perf/gcviewer/imp/DataReaderSun1_6_0.java
Patch:
@@ -530,7 +530,7 @@ private boolean isPrintTenuringDistribution(String line) {
                 || line.endsWith("[ParNew") // parallel young (CMS, parallel GC)
                 || line.endsWith(" (promotion failed)") // CMS (if -XX:+PrintPromotionFailure is active, additional text between "ParNew" + "(promotion failed)" is introduced...)
                 || line.endsWith("[GC") // PSYoungGen (parallel sweep)
-                || (line.contains("[GC ") && line.endsWith(") ")); // parallel GC (-XX:+PrintGCCause); ends actually with "[GC (Allocation Failure) ", but text in paranthesis can vary
+                || (line.contains("[GC (") && (line.endsWith(") ") || line.endsWith(")"))); // parallel GC (-XX:+PrintGCCause); ends actually with "[GC (Allocation Failure) ", but text in paranthesis can vary; there may be a " " in the end
     }
 
     private boolean isCmsScavengeBeforeRemark(String line) {

File: src/main/java/com/tagtraum/perf/gcviewer/imp/DataReaderSun1_6_0.java
Patch:
@@ -156,7 +156,7 @@ public class DataReaderSun1_6_0 extends AbstractDataReaderSun {
     // pattern looks always like "...[CMS<datestamp>..." or "...[CMS<timestamp>..."
     // the next line starts with " (concurrent mode failure)" which in earlier releases followed "CMS" immediately
     // the same can happen with "...ParNew<timestamp|datestamp>..."
-    private static Pattern linesMixedPattern = Pattern.compile("(.*\\[(CMS|ParNew|DefNew|ASCMS|ASParNew))([0-9]+[-.].*)");
+    private static Pattern linesMixedPattern = Pattern.compile("(.*\\[(CMS|ParNew|DefNew|ASCMS|ASParNew))([0-9]+[-.,].*)");
     // Matcher group of start of line
     private static final int LINES_MIXED_STARTOFLINE_GROUP = 1;
     // Matcher group of end of line
@@ -169,7 +169,7 @@ public class DataReaderSun1_6_0 extends AbstractDataReaderSun {
     // AdaptiveSizeStop: collection: 1
     //  [PSYoungGen: 16420K->2657K(19136K)] 16420K->15919K(62848K), 0.0109211 secs] [Times: user=0.00 sys=0.00, real=0.01 secs]
     // -> to parse it, the first line must be split, and the following left out until the rest of the gc information follows
-    private static final String ADAPTIVE_SIZE_POLICY_PATTERN_STRING = "(.*GC \\([a-zA-Z ]*\\)|.*GC)(?:[0-9.:]*.*)[ ]?AdaptiveSize.*";
+    private static final String ADAPTIVE_SIZE_POLICY_PATTERN_STRING = "(.*GC \\([a-zA-Z ]*\\)|.*GC)(?:[0-9.,:]*.*)[ ]?AdaptiveSize.*";
     private static final Pattern adaptiveSizePolicyPattern = Pattern.compile(ADAPTIVE_SIZE_POLICY_PATTERN_STRING);
 
     // -XX:+PrintAdaptiveSizePolicy combined with -XX:-UseAdaptiveSizePolicy (not using the policy, just printing)

File: src/main/java/com/tagtraum/perf/gcviewer/AboutDialog.java
Patch:
@@ -50,6 +50,7 @@ public class AboutDialog extends ScreenCenteredDialog implements ActionListener
         "Samuel Mendenhall",
         "Carl Meyer",
         "Reinhard N√§gele",
+        "√Ängel Oll√© Bl√°zquez",
         "Rupesh Ramachandran",
         "Heiko W. Rupp",
         "Stephan Schroevers",

File: src/main/java/com/tagtraum/perf/gcviewer/GCViewer.java
Patch:
@@ -1,6 +1,7 @@
 package com.tagtraum.perf.gcviewer;
 
 import java.io.File;
+import java.io.FileOutputStream;
 import java.io.IOException;
 import java.util.logging.Level;
 import java.util.logging.Logger;
@@ -82,7 +83,7 @@ private void exportType(GCModel model, String summaryFilePath, DataWriterType ty
 
     private void renderChart(GCModel model, String chartFilePath) throws IOException {
         SimpleChartRenderer renderer = new SimpleChartRenderer();
-        renderer.render(model, chartFilePath);
+        renderer.render(model, new FileOutputStream(new File(chartFilePath)));
     }
 
 	private static void usage() {

File: src/main/java/com/tagtraum/perf/gcviewer/action/Export.java
Patch:
@@ -49,6 +49,7 @@ public Export(final GCViewerGui gcViewer) {
         saveDialog.addChoosableFileFilter(new ExtensionFileFilter(".txt", LocalisationHelper.getString("fileexport_dialog_txt"), DataWriterType.PLAIN));
         saveDialog.addChoosableFileFilter(new ExtensionFileFilter(".simple.log", LocalisationHelper.getString("fileexport_dialog_simplelog"), DataWriterType.SIMPLE));
         saveDialog.addChoosableFileFilter(new ExtensionFileFilter(".csv", LocalisationHelper.getString("fileexport_dialog_summarylog"), DataWriterType.SUMMARY));
+        saveDialog.addChoosableFileFilter(new ExtensionFileFilter(".png", LocalisationHelper.getString("fileexport_dialog_png"), DataWriterType.PNG));
         }
 
     public void actionPerformed(final ActionEvent e) {

File: src/main/java/com/tagtraum/perf/gcviewer/exp/DataWriterType.java
Patch:
@@ -11,5 +11,6 @@ public enum DataWriterType {
     CSV,
     CSV_TS,
     SIMPLE,
-    SUMMARY;
+    SUMMARY,
+    PNG;
 }

File: src/main/java/com/tagtraum/perf/gcviewer/exp/impl/DataWriterFactory.java
Patch:
@@ -53,6 +53,7 @@ public static DataWriter getDataWriter(File file, DataWriterType type, Map<Strin
             case CSV_TS  : return new CSVTSDataWriter(outputStream);
             case SIMPLE  : return new SimpleGcWriter(outputStream);
             case SUMMARY : return new SummaryDataWriter(outputStream, configuration); 
+            case PNG	 : return new PNGDataWriter(outputStream);
             default : throw new IOException(LocalisationHelper.getString("datawriterfactory_instantiation_failed") + " " + file);
         }
     }

File: src/main/java/com/tagtraum/perf/gcviewer/GCViewer.java
Patch:
@@ -1,6 +1,7 @@
 package com.tagtraum.perf.gcviewer;
 
 import java.io.File;
+import java.io.FileOutputStream;
 import java.io.IOException;
 import java.lang.reflect.InvocationTargetException;
 import java.util.logging.Level;
@@ -86,7 +87,7 @@ private void exportType(GCModel model, String summaryFilePath, DataWriterType ty
 
     private void renderChart(GCModel model, String chartFilePath) throws IOException {
         SimpleChartRenderer renderer = new SimpleChartRenderer();
-        renderer.render(model, chartFilePath);
+        renderer.render(model, new FileOutputStream(new File(chartFilePath)));
     }
 
 	private static void usage() {

File: src/main/java/com/tagtraum/perf/gcviewer/ctrl/action/Export.java
Patch:
@@ -48,6 +48,7 @@ public Export(final GCViewerGui gcViewer) {
         saveDialog.addChoosableFileFilter(new ExtensionFileFilter(".txt", LocalisationHelper.getString("fileexport_dialog_txt"), DataWriterType.PLAIN));
         saveDialog.addChoosableFileFilter(new ExtensionFileFilter(".simple.log", LocalisationHelper.getString("fileexport_dialog_simplelog"), DataWriterType.SIMPLE));
         saveDialog.addChoosableFileFilter(new ExtensionFileFilter(".csv", LocalisationHelper.getString("fileexport_dialog_summarylog"), DataWriterType.SUMMARY));
+        saveDialog.addChoosableFileFilter(new ExtensionFileFilter(".png", LocalisationHelper.getString("fileexport_dialog_png"), DataWriterType.PNG));
         }
 
     public void actionPerformed(final ActionEvent e) {

File: src/main/java/com/tagtraum/perf/gcviewer/exp/DataWriterType.java
Patch:
@@ -11,5 +11,6 @@ public enum DataWriterType {
     CSV,
     CSV_TS,
     SIMPLE,
-    SUMMARY;
+    SUMMARY,
+    PNG;
 }

File: src/main/java/com/tagtraum/perf/gcviewer/view/AboutDialog.java
Patch:
@@ -51,6 +51,7 @@ public class AboutDialog extends ScreenCenteredDialog implements ActionListener
         "Samuel Mendenhall",
         "Carl Meyer",
         "Reinhard N√§gele",
+        "√Ängel Oll√© Bl√°zquez",
         "Rupesh Ramachandran",
         "Heiko W. Rupp",
         "Stephan Schroevers",

File: src/main/java/com/tagtraum/perf/gcviewer/AutoCompletionComboBox.java
Patch:
@@ -7,9 +7,6 @@
 
 /**
  * AutoCompletionComboBox.
- * <p/>
- * Date: Oct 6, 2005
- * Time: 1:16:42 PM
  *
  * @author <a href="mailto:hs@tagtraum.com">Hendrik Schreiber</a>
  */

File: src/main/java/com/tagtraum/perf/gcviewer/AutoCompletionTextField.java
Patch:
@@ -14,9 +14,6 @@
 
 /**
  * AutoCompletionTextField.
- * <p/>
- * Date: Oct 6, 2005
- * Time: 9:49:21 AM
  *
  * @author <a href="mailto:hs@tagtraum.com">Hendrik Schreiber</a>
  */

File: src/main/java/com/tagtraum/perf/gcviewer/RecentURLEvent.java
Patch:
@@ -4,9 +4,6 @@
 
 /**
  * RecentURLEvent.
- * <p/>
- * Date: Oct 6, 2005
- * Time: 10:18:15 AM
  *
  * @author <a href="mailto:hs@tagtraum.com">Hendrik Schreiber</a>
  */

File: src/main/java/com/tagtraum/perf/gcviewer/RecentURLsListener.java
Patch:
@@ -2,9 +2,6 @@
 
 /**
  * RecentURLsListener.
- * <p/>
- * Date: Oct 6, 2005
- * Time: 10:17:05 AM
  *
  * @author <a href="mailto:hs@tagtraum.com">Hendrik Schreiber</a>
  */

File: src/main/java/com/tagtraum/perf/gcviewer/RecentURLsMenu.java
Patch:
@@ -8,9 +8,6 @@
 
 /**
  * RecentFilesMenu.
- * <p/>
- * Date: Sep 25, 2005
- * Time: 10:54:45 PM
  *
  * @author <a href="mailto:hs@tagtraum.com">Hendrik Schreiber</a>
  */

File: src/main/java/com/tagtraum/perf/gcviewer/TimeOffsetPanel.java
Patch:
@@ -22,9 +22,6 @@
 
 /**
  * TimeOffsetPanel.
- * <p/>
- * Date: Sep 24, 2005
- * Time: 5:53:41 PM
  *
  * @author <a href="mailto:hs@tagtraum.com">Hendrik Schreiber</a>
  */

File: src/main/java/com/tagtraum/perf/gcviewer/action/OpenRecent.java
Patch:
@@ -8,9 +8,6 @@
 
 /**
  * OpenRecent.
- * <p/>
- * Date: Sep 25, 2005
- * Time: 11:16:49 PM
  *
  * @author <a href="mailto:hs@tagtraum.com">Hendrik Schreiber</a>
  */

File: src/main/java/com/tagtraum/perf/gcviewer/imp/DataReaderHPUX1_2.java
Patch:
@@ -16,9 +16,6 @@
 
 /**
  * DataReader for HP-UX 1.2/1.3/1.4.0
- * <p/>
- * Date: Oct 11, 2005
- * Time: 10:57:39 AM
  *
  * @see <a href="http://www.hp.com/products1/unix/java/infolibrary/prog_guide/xverbosegc.html">http://www.hp.com/products1/unix/java/infolibrary/prog_guide/xverbosegc.html</a>
  * @author <a href="mailto:hs@tagtraum.com">Hendrik Schreiber</a>

File: src/main/java/com/tagtraum/perf/gcviewer/imp/DataReaderJRockit1_4_2.java
Patch:
@@ -15,9 +15,6 @@
 
 /**
  * DataReaderJRockit1_4_2.
- * <p/>
- * Date: Jan 5, 2006
- * Time: 5:31:50 AM
  *
  * @author <a href="mailto:hs@tagtraum.com">Hendrik Schreiber</a>
  */

File: src/main/java/com/tagtraum/perf/gcviewer/AutoCompletionComboBox.java
Patch:
@@ -7,9 +7,6 @@
 
 /**
  * AutoCompletionComboBox.
- * <p/>
- * Date: Oct 6, 2005
- * Time: 1:16:42 PM
  *
  * @author <a href="mailto:hs@tagtraum.com">Hendrik Schreiber</a>
  */

File: src/main/java/com/tagtraum/perf/gcviewer/AutoCompletionTextField.java
Patch:
@@ -14,9 +14,6 @@
 
 /**
  * AutoCompletionTextField.
- * <p/>
- * Date: Oct 6, 2005
- * Time: 9:49:21 AM
  *
  * @author <a href="mailto:hs@tagtraum.com">Hendrik Schreiber</a>
  */

File: src/main/java/com/tagtraum/perf/gcviewer/RecentURLEvent.java
Patch:
@@ -4,9 +4,6 @@
 
 /**
  * RecentURLEvent.
- * <p/>
- * Date: Oct 6, 2005
- * Time: 10:18:15 AM
  *
  * @author <a href="mailto:hs@tagtraum.com">Hendrik Schreiber</a>
  */

File: src/main/java/com/tagtraum/perf/gcviewer/RecentURLsListener.java
Patch:
@@ -2,9 +2,6 @@
 
 /**
  * RecentURLsListener.
- * <p/>
- * Date: Oct 6, 2005
- * Time: 10:17:05 AM
  *
  * @author <a href="mailto:hs@tagtraum.com">Hendrik Schreiber</a>
  */

File: src/main/java/com/tagtraum/perf/gcviewer/RecentURLsMenu.java
Patch:
@@ -8,9 +8,6 @@
 
 /**
  * RecentFilesMenu.
- * <p/>
- * Date: Sep 25, 2005
- * Time: 10:54:45 PM
  *
  * @author <a href="mailto:hs@tagtraum.com">Hendrik Schreiber</a>
  */

File: src/main/java/com/tagtraum/perf/gcviewer/TimeOffsetPanel.java
Patch:
@@ -22,9 +22,6 @@
 
 /**
  * TimeOffsetPanel.
- * <p/>
- * Date: Sep 24, 2005
- * Time: 5:53:41 PM
  *
  * @author <a href="mailto:hs@tagtraum.com">Hendrik Schreiber</a>
  */

File: src/main/java/com/tagtraum/perf/gcviewer/action/OpenRecent.java
Patch:
@@ -8,9 +8,6 @@
 
 /**
  * OpenRecent.
- * <p/>
- * Date: Sep 25, 2005
- * Time: 11:16:49 PM
  *
  * @author <a href="mailto:hs@tagtraum.com">Hendrik Schreiber</a>
  */

File: src/main/java/com/tagtraum/perf/gcviewer/imp/DataReaderHPUX1_2.java
Patch:
@@ -16,9 +16,6 @@
 
 /**
  * DataReader for HP-UX 1.2/1.3/1.4.0
- * <p/>
- * Date: Oct 11, 2005
- * Time: 10:57:39 AM
  *
  * @see <a href="http://www.hp.com/products1/unix/java/infolibrary/prog_guide/xverbosegc.html">http://www.hp.com/products1/unix/java/infolibrary/prog_guide/xverbosegc.html</a>
  * @author <a href="mailto:hs@tagtraum.com">Hendrik Schreiber</a>

File: src/main/java/com/tagtraum/perf/gcviewer/imp/DataReaderJRockit1_4_2.java
Patch:
@@ -15,9 +15,6 @@
 
 /**
  * DataReaderJRockit1_4_2.
- * <p/>
- * Date: Jan 5, 2006
- * Time: 5:31:50 AM
  *
  * @author <a href="mailto:hs@tagtraum.com">Hendrik Schreiber</a>
  */

File: src/main/java/com/tagtraum/perf/gcviewer/ModelChartImpl.java
Patch:
@@ -173,7 +173,7 @@ public void maybePopup(MouseEvent e) {
                     else {
                         long suggestedStartDate = model.getLastModified();
                         if (model.hasDateStamp()) {
-                        	suggestedStartDate = model.getFirstDateStamp().getTime();
+                            suggestedStartDate = model.getFirstDateStamp().toInstant().toEpochMilli();
                         }
                         else if (model.hasCorrectTimestamp()) {
                             suggestedStartDate -= (long)(model.getRunningTime() * 1000.0d);
@@ -351,7 +351,7 @@ public void setShowConcurrentCollectionBeginEnd(boolean showConcurrentCollection
     @Override
     public void setShowDateStamp(boolean showDateStamp) {
         if (showDateStamp && model.hasDateStamp()) {
-            timeOffsetPanel.setDate(model.getFirstDateStamp());
+            timeOffsetPanel.setDate(Date.from(model.getFirstDateStamp().toInstant()));
             timestampRuler.setOffset(timeOffsetPanel.getDate().getTime() / 1000);
             timeOffsetPanel.setOffsetSet(true);
             timestampRuler.revalidate();

File: src/main/java/com/tagtraum/perf/gcviewer/exp/impl/CSVTSDataWriter.java
Patch:
@@ -37,7 +37,7 @@ public void write(GCModel model) throws IOException {
 
             // If the true timestamp is present, output the unix timestamp
             if (model.hasDateStamp()) {
-                out.print(event.getDatestamp().getTime());
+                out.print(event.getDatestamp());
             } else if (model.hasCorrectTimestamp()) {
                 // we have the timestamps therefore we can correct it with the pause time
                 out.print((event.getTimestamp() - event.getPause()));

File: src/main/java/com/tagtraum/perf/gcviewer/imp/DataReaderSun1_6_0.java
Patch:
@@ -4,7 +4,7 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.UnsupportedEncodingException;
-import java.util.Date;
+import java.time.ZonedDateTime;
 import java.util.Deque;
 import java.util.LinkedList;
 import java.util.List;
@@ -507,7 +507,7 @@ protected AbstractGCEvent<?> parseLine(String line, ParseInformation pos) throws
             // parse collection type    "[TYPE"
             // either GC data or another collection type starting with timestamp
             // pre-used->post-used, total, time
-            Date datestamp = parseDatestamp(line, pos);
+            ZonedDateTime datestamp = parseDatestamp(line, pos);
             double timestamp = getTimestamp(line, pos, datestamp);
             ExtendedType type = parseType(line, pos);
             // special provision for CMS events

File: src/main/java/com/tagtraum/perf/gcviewer/util/UrlDisplayHelper.java
Patch:
@@ -3,7 +3,6 @@
 import java.awt.Component;
 import java.awt.Desktop;
 import java.awt.Desktop.Action;
-import java.awt.Frame;
 import java.io.IOException;
 import java.net.URI;
 import java.net.URL;
@@ -51,7 +50,7 @@ public static void displayUrl(Component parent, String url) {
     /**
      * Convenience method to display an url.
      * 
-     * @see #displayUrl(Frame, String)
+     * @see #displayUrl(Component, String)
      */
     public static void displayUrl(Component parent, URL url) {
         displayUrl(parent, url.toString());

File: src/test/java/com/tagtraum/perf/gcviewer/ModelChartImplTest.java
Patch:
@@ -7,6 +7,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mockito;
 
+import java.time.ZonedDateTime;
 import java.util.Date;
 
 import static org.hamcrest.Matchers.equalTo;
@@ -38,7 +39,7 @@ public void shouldShowOrNotDateStampAccordingToModelAndSettings(TestCase testCas
         GCPreferences preferences = new GCPreferences();
         GCModel gcModel = Mockito.mock(GCModel.class);
         Mockito.when(gcModel.hasDateStamp()).thenReturn(testCase.hasDateStamp());
-        Mockito.when(gcModel.getFirstDateStamp()).thenReturn(new Date());
+        Mockito.when(gcModel.getFirstDateStamp()).thenReturn(ZonedDateTime.now());
         preferences.setShowDateStamp(testCase.isShowDateStamp());
 
         //when

File: src/main/java/com/tagtraum/perf/gcviewer/util/UrlDisplayHelper.java
Patch:
@@ -3,7 +3,6 @@
 import java.awt.Component;
 import java.awt.Desktop;
 import java.awt.Desktop.Action;
-import java.awt.Frame;
 import java.io.IOException;
 import java.net.URI;
 import java.net.URL;
@@ -51,7 +50,7 @@ public static void displayUrl(Component parent, String url) {
     /**
      * Convenience method to display an url.
      * 
-     * @see #displayUrl(Frame, String)
+     * @see #displayUrl(Component, String)
      */
     public static void displayUrl(Component parent, URL url) {
         displayUrl(parent, url.toString());

File: src/test/java/com/tagtraum/perf/gcviewer/imp/TestDataReaderSun1_8_0G1.java
Patch:
@@ -1,5 +1,6 @@
 package com.tagtraum.perf.gcviewer.imp;
 
+import static org.hamcrest.Matchers.closeTo;
 import static org.hamcrest.Matchers.is;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertThat;
@@ -46,6 +47,8 @@ public void fullConcurrentCycle() throws Exception {
         assertThat("tenured size after concurrent cycle", model.getPostConcurrentCycleTenuredUsedSizes().getMax(), is(31949 - 10*1024 - 3072));
         assertThat("heap size after concurrent cycle", model.getPostConcurrentCycleHeapUsedSizes().getMax(), is(31949));
         
+        assertThat("initiatingOccupancyFraction", model.getCmsInitiatingOccupancyFraction().getMax(), closeTo(0.69, 0.001));
+        
         assertThat("number of errors", handler.getCount(), is(0));
     }
     

File: src/main/java/com/tagtraum/perf/gcviewer/imp/AbstractDataReaderSun.java
Patch:
@@ -336,7 +336,7 @@ protected ExtendedType extractTypeFromParsedString(String typeName) throws Unkno
         }
         
         if (gcType != null) {
-            extendedType = new ExtendedType(gcType, typeName);
+            extendedType = ExtendedType.lookup(gcType, typeName);
         }
         
         return extendedType;

File: src/test/java/com/tagtraum/perf/gcviewer/model/TestAbstractGCEvent.java
Patch:
@@ -92,7 +92,7 @@ public void getGenerationFullGc() {
     public void addExtendedTypePrintGcCause() {
         // 2013-05-25T17:02:46.238+0200: 0.194: [GC (Allocation Failure) [PSYoungGen: 16430K->2657K(19136K)] 16430K->15759K(62848K), 0.0109373 secs] [Times: user=0.05 sys=0.02, real=0.02 secs]
         GCEvent event = new GCEvent();
-        event.setExtendedType(new ExtendedType(Type.GC, "GC (Allocation Failure)"));
+        event.setExtendedType(ExtendedType.lookup(Type.GC, "GC (Allocation Failure)"));
         
         GCEvent detailedEvent = new GCEvent();
         detailedEvent.setType(Type.PS_YOUNG_GEN);

File: src/main/java/com/tagtraum/perf/gcviewer/ModelChartImpl.java
Patch:
@@ -73,8 +73,6 @@ public ModelChartImpl() {
         chart.add(usedHeapRenderer, gridBagConstraints);
         usedTenuredRenderer = new UsedTenuredRenderer(this);
         chart.add(usedTenuredRenderer, gridBagConstraints);
-        gcTimesRenderer = new GCTimesRenderer(this);
-        chart.add(gcTimesRenderer, gridBagConstraints);
         fullGCLineRenderer = new FullGCLineRenderer(this);
         chart.add(fullGCLineRenderer, gridBagConstraints);
         gcRectanglesRenderer = new GCRectanglesRenderer(this);
@@ -83,6 +81,8 @@ public ModelChartImpl() {
         chart.add(incLineRenderer, gridBagConstraints);
         concurrentGcLineRenderer = new ConcurrentGcBegionEndRenderer(this);
         chart.add(concurrentGcLineRenderer, gridBagConstraints);
+        gcTimesRenderer = new GCTimesRenderer(this);
+        chart.add(gcTimesRenderer, gridBagConstraints);
         usedYoungRenderer = new UsedYoungRenderer(this);
         chart.add(usedYoungRenderer, gridBagConstraints);
         totalTenuredRenderer = new TotalTenuredRenderer(this);

File: src/test/java/com/tagtraum/perf/gcviewer/imp/TestDataReaderSun1_3_1.java
Patch:
@@ -30,8 +30,8 @@ public void testParse1() throws Exception {
         DataReader reader = new DataReaderSun1_3_1(in, GcLogType.SUN1_3_1);
         GCModel model = reader.read();
         assertTrue(model.size() == 4);
-        Iterator<GCEvent> i = model.getGCEvents();
-        AbstractGCEvent<GCEvent> event = i.next();
+        Iterator<AbstractGCEvent<?>> i = model.getStopTheWorldEvents();
+        AbstractGCEvent<?> event = i.next();
         assertEquals(event, event1);
         event = i.next();
         assertEquals(event, event2);
@@ -40,7 +40,7 @@ public void testParse1() throws Exception {
         event = i.next();
         assertEquals(event, event4);
 
-        assertEquals("throughput", 89.13905666, model.getThroughput(), 0.00000001);
+        assertEquals("throughput", 90.17011554119, model.getThroughput(), 0.00000001);
     }
 
 }

File: src/test/java/com/tagtraum/perf/gcviewer/imp/TestDataReaderSun1_6_0G1.java
Patch:
@@ -43,9 +43,9 @@ public void testG1GcVerbose() throws Exception {
         GCModel model = reader.read();
         
         assertEquals("gc pause sum", 62.616796, model.getPause().getSum(), 0.000000001);
-        assertEquals("throughput", 47.75795226, model.getThroughput(), 0.000000001);
+        assertEquals("throughput", 47.7730602904, model.getThroughput(), 0.000000001);
         assertEquals("longest pause", 0.1581177, model.getPause().getMax(), 0.000001);
-        assertEquals("total runtime", 119.859, model.getRunningTime(), 0.000001);
+        assertEquals("total runtime", 119.8936724, model.getRunningTime(), 0.000001);
         
         assertEquals("number of errors", 0, handler.getCount());
         

File: src/main/java/com/tagtraum/perf/gcviewer/ctrl/action/Export.java
Patch:
@@ -44,9 +44,11 @@ public Export(final GCViewerGui gcViewer) {
         saveDialog.setDialogTitle(LocalisationHelper.getString("fileexport_dialog_title"));
         saveDialog.removeChoosableFileFilter(saveDialog.getAcceptAllFileFilter());
         saveDialog.addChoosableFileFilter(new ExtensionFileFilter(".csv", LocalisationHelper.getString("fileexport_dialog_csv"), DataWriterType.CSV));
+        saveDialog.addChoosableFileFilter(new ExtensionFileFilter(".csv", LocalisationHelper.getString("fileexport_dialog_csv_ts"), DataWriterType.CSV_TS));
         saveDialog.addChoosableFileFilter(new ExtensionFileFilter(".txt", LocalisationHelper.getString("fileexport_dialog_txt"), DataWriterType.PLAIN));
         saveDialog.addChoosableFileFilter(new ExtensionFileFilter(".simple.log", LocalisationHelper.getString("fileexport_dialog_simplelog"), DataWriterType.SIMPLE));
-    }
+        saveDialog.addChoosableFileFilter(new ExtensionFileFilter(".csv", LocalisationHelper.getString("fileexport_dialog_summarylog"), DataWriterType.SUMMARY));
+        }
 
     public void actionPerformed(final ActionEvent e) {
         final GCDocument gcDocument = gcViewer.getSelectedGCDocument();

File: src/main/java/com/tagtraum/perf/gcviewer/exp/DataWriterType.java
Patch:
@@ -9,6 +9,7 @@
 public enum DataWriterType {
     PLAIN,
     CSV,
+    CSV_TS,
     SIMPLE,
     SUMMARY;
 }

File: src/main/java/com/tagtraum/perf/gcviewer/imp/GcLogType.java
Patch:
@@ -23,5 +23,7 @@ public enum GcLogType {
     SUN1_6,
     SUN1_6G1,
     SUN1_7,
-    SUN1_7G1
+    SUN1_7G1,
+    SUN1_8,
+    SUN1_8G1,
 }

File: src/main/java/com/tagtraum/perf/gcviewer/view/AboutDialog.java
Patch:
@@ -48,6 +48,7 @@ public class AboutDialog extends ScreenCenteredDialog implements ActionListener
         "Michi Gysel",
         "Johan Kaving",
         "Maciej Kwiecien",
+        "Samuel Mendenhall",
         "Carl Meyer",
         "Reinhard N√§gele",
         "Rupesh Ramachandran",

File: src/test/java/com/tagtraum/perf/gcviewer/TestAll.java
Patch:
@@ -27,6 +27,7 @@
     TestAllModel.class,
     TestAllUtil.class,
     TestAllCtrl.class,
+    TestGCViewerArgsParser.class
 })
 public class TestAll {
 }

File: src/test/java/com/tagtraum/perf/gcviewer/imp/TestAllImp.java
Patch:
@@ -25,6 +25,7 @@
     TestDataReaderSun1_7_0.class,
     TestDataReaderSun1_7_0G1.class,
     TestDataReaderSun1_8_0.class,
+    TestDataReaderSun1_8_0G1.class,
 
     TestDataReaderIBM1_2_2.class,
     TestDataReaderIBM1_3_1.class,

File: src/test/java/com/tagtraum/perf/gcviewer/imp/TestDataReaderSun1_8_0.java
Patch:
@@ -32,7 +32,7 @@ public void parallelPrintHeapAtGC() throws Exception {
         gcResource.getLogger().addHandler(handler);
         
         final InputStream in = getInputStream(gcResource.getResourceName());
-        final DataReader reader = new DataReaderSun1_6_0(gcResource, in, GcLogType.SUN1_7);
+        final DataReader reader = new DataReaderSun1_6_0(gcResource, in, GcLogType.SUN1_8);
         GCModel model = reader.read();
         
         assertEquals("gc pause sum", 0.0103603, model.getPause().getSum(), 0.000000001);

File: src/main/java/com/tagtraum/perf/gcviewer/imp/DataReaderSun1_6_0G1.java
Patch:
@@ -79,7 +79,7 @@ public class DataReaderSun1_6_0G1 extends AbstractDataReaderSun {
     
     // the following pattern is specific for G1 with -XX:+PrintGCDetails
     // "[<datestamp>: ]0.295: [GC pause (young), 0.00594747 secs]"
-    private static final Pattern PATTERN_GC_PAUSE = Pattern.compile("^([0-9-T:.+]{29})?[ ]?([0-9.]+)?[: \\[]{2,3}([A-Z0-9a-z- ().]+)[, ]+([0-9.,]+)[ sec\\]]+$");
+    private static final Pattern PATTERN_GC_PAUSE = Pattern.compile("^([0-9-T:.+]{29})?[ ]?([0-9.,]+)?[: \\[]{2,3}([A-Z0-9a-z- ().]+)[, ]+([0-9.,]+)[ sec\\]]+$");
     private static final int GC_PAUSE_GROUP_DATESTAMP = 1;
     private static final int GC_PAUSE_GROUP_TIMESTAMP = 2;
     private static final int GC_PAUSE_GROUP_TYPE = 3;

File: src/main/java/com/tagtraum/perf/gcviewer/model/AbstractGCEvent.java
Patch:
@@ -463,7 +463,9 @@ public String toString() {
         // TODO: Generation: young and tenured!
         public static final Type G1_YOUNG_INITIAL_MARK = new Type("GC pause (young) (initial-mark)", Generation.TENURED, Concurrency.SERIAL, GcPattern.GC_MEMORY_PAUSE);
         public static final Type G1_YOUNG_INITIAL_MARK_TO_SPACE_OVERFLOW = new Type("GC pause (young) (to-space overflow) (initial-mark)", Generation.TENURED, Concurrency.SERIAL, GcPattern.GC_MEMORY_PAUSE);
-        public static final Type G1_YOUNG_INITIAL_MARK_TO_SPACE_EXHAUSTED = new Type("GC pause (young) (to-space exhausted) (initial-mark)", Generation.TENURED, Concurrency.SERIAL, GcPattern.GC_MEMORY_PAUSE);
+        // The following two Types are basically the same but in a different order. In JDK 6 the order was defined, no longer the case with JDK 7 (see: https://github.com/chewiebug/GCViewer/issues/100) 
+        public static final Type G1_YOUNG_INITIAL_MARK_TO_SPACE_EXHAUSTED = new Type("GC pause (young) (initial-mark) (to-space exhausted)", Generation.TENURED, Concurrency.SERIAL, GcPattern.GC_MEMORY_PAUSE);
+        public static final Type G1_YOUNG_TO_SPACE_EXHAUSTED_INITIAL_MARK = new Type("GC pause (young) (to-space exhausted) (initial-mark)", Generation.TENURED, Concurrency.SERIAL, GcPattern.GC_MEMORY_PAUSE);
         public static final Type G1_PARTIAL_INITIAL_MARK = new Type("GC pause (partial) (initial-mark)", Generation.TENURED, Concurrency.SERIAL, GcPattern.GC_MEMORY_PAUSE);
         public static final Type G1_PARTIAL_INITIAL_MARK_TO_SPACE_OVERFLOW = new Type("GC pause (partial) (to-space overflow) (initial-mark)", Generation.TENURED, Concurrency.SERIAL, GcPattern.GC_MEMORY_PAUSE);
         public static final Type G1_REMARK = new Type("GC remark", Generation.TENURED, Concurrency.SERIAL, GcPattern.GC_PAUSE, CollectionType.CONCURRENCY_HELPER);

File: src/main/java/com/tagtraum/perf/gcviewer/view/AboutDialog.java
Patch:
@@ -39,6 +39,7 @@ public class AboutDialog extends ScreenCenteredDialog implements ActionListener
     private static final String[] CONTRIBUTORS = {
         "Hans Bausewein",
         "Peter Bilstein",
+        "Steve Boardwell",
         "Cka3o4Huk",
         "Frank Dietrich",
         "Bernd Eckenfels",

File: src/main/java/com/tagtraum/perf/gcviewer/model/GCModel.java
Patch:
@@ -718,7 +718,9 @@ public boolean hasDateStamp() {
     
     public Date getFirstDateStamp() {
     	return allEvents.size() > 0 
-    			? get(0).getDatestamp() 
+    			? hasDateStamp()
+    			        ? get(0).getDatestamp()
+    			        : new Date(getLastModified() - (long)(getRunningTime() * 1000.0d))
     			: null;
     }
 

File: src/main/java/com/tagtraum/perf/gcviewer/view/model/RecentGCResourcesListener.java
Patch:
@@ -1,5 +1,7 @@
 package com.tagtraum.perf.gcviewer.view.model;
 
+import java.util.EventListener;
+
 
 /**
  * Listener interface for add / remove events from the {@link RecentGCResourcesModel}.
@@ -9,7 +11,7 @@
  *
  * @author <a href="mailto:hs@tagtraum.com">Hendrik Schreiber</a>
  */
-public interface RecentGCResourcesListener {
+public interface RecentGCResourcesListener extends EventListener {
     
     /**
      * Invoked, when an item is removed from the model.

File: src/main/java/com/tagtraum/perf/gcviewer/imp/GcLogType.java
Patch:
@@ -23,5 +23,7 @@ public enum GcLogType {
     SUN1_6,
     SUN1_6G1,
     SUN1_7,
-    SUN1_7G1
+    SUN1_7G1,
+    SUN1_8,
+    SUN1_8G1,
 }

File: src/test/java/com/tagtraum/perf/gcviewer/imp/TestAllImp.java
Patch:
@@ -25,6 +25,7 @@
     TestDataReaderSun1_7_0.class,
     TestDataReaderSun1_7_0G1.class,
     TestDataReaderSun1_8_0.class,
+    TestDataReaderSun1_8_0G1.class,
 
     TestDataReaderIBM1_2_2.class,
     TestDataReaderIBM1_3_1.class,

File: src/test/java/com/tagtraum/perf/gcviewer/imp/TestDataReaderSun1_8_0.java
Patch:
@@ -33,7 +33,7 @@ public void parallelPrintHeapAtGC() throws Exception {
         DATA_READER_FACTORY_LOGGER.addHandler(handler);
         
         final InputStream in = getInputStream("SampleSun1_8_0ParallelPrintHeapAtGC.txt");
-        final DataReader reader = new DataReaderSun1_6_0(in, GcLogType.SUN1_7);
+        final DataReader reader = new DataReaderSun1_6_0(in, GcLogType.SUN1_8);
         GCModel model = reader.read();
         
         assertEquals("gc pause sum", 0.0103603, model.getPause().getSum(), 0.000000001);

File: src/main/java/com/tagtraum/perf/gcviewer/imp/DataReaderHPUX1_2.java
Patch:
@@ -11,6 +11,7 @@
 import com.tagtraum.perf.gcviewer.model.GCEvent;
 import com.tagtraum.perf.gcviewer.model.GCModel;
 import com.tagtraum.perf.gcviewer.model.GCResource;
+import com.tagtraum.perf.gcviewer.util.NumberParser;
 
 /**
  * DataReader for HP-UX 1.2/1.3/1.4.0
@@ -62,7 +63,7 @@ public GCModel read() throws IOException {
                 final int reason = Integer.parseInt(st.nextToken());
                 event.setType(findType(reason));
                 // %2:  Program time at the beginning of the collection, in seconds
-                event.setTimestamp(Double.parseDouble(st.nextToken()));
+                event.setTimestamp(NumberParser.parseDouble(st.nextToken()));
                 // %3:  Garbage collection invocation.  Counts of Scavenge and
                 // Full GCs are maintained separately
                 st.nextToken();
@@ -135,7 +136,7 @@ public GCModel read() throws IOException {
                 permEvent.setTotal((int)(permCapacity / 1024));
 
                 // %18:  Time taken in seconds to finish the gc
-                final double pause = Double.parseDouble(st.nextToken());
+                final double pause = NumberParser.parseDouble(st.nextToken());
                 event.setPause(pause);
                 event.setPreUsed(newEvent.getPreUsed() + oldEvent.getPreUsed());
                 event.setPostUsed(newEvent.getPostUsed() + oldEvent.getPostUsed());

File: src/main/java/com/tagtraum/perf/gcviewer/imp/DataReaderHPUX1_4_1.java
Patch:
@@ -17,6 +17,7 @@
 import com.tagtraum.perf.gcviewer.model.GCEvent;
 import com.tagtraum.perf.gcviewer.model.GCModel;
 import com.tagtraum.perf.gcviewer.model.GCResource;
+import com.tagtraum.perf.gcviewer.util.NumberParser;
 
 /**
  * DataReader for HP-UX 1.4.1/1.4.2
@@ -113,7 +114,7 @@ If the heap area holding the reflection objects (representing classes and method
                 final float gcDetails = Float.parseFloat(st.nextToken());
                 event.setType(findType(typeOfGC, gcDetails));
                 // %3:  Program time at the beginning of the collection, in seconds
-                event.setTimestamp(Double.parseDouble(st.nextToken()));
+                event.setTimestamp(NumberParser.parseDouble(st.nextToken()));
                 // %4:  Garbage collection invocation. Counts of background CMS GCs
                 // and other GCs are maintained separately
                 st.nextToken();
@@ -186,7 +187,7 @@ If the heap area holding the reflection objects (representing classes and method
                 permEvent.setTotal((int)(permCapacity / 1024));
 
                 // %19:  The total stop-the-world duration, in seconds.
-                final double pause = Double.parseDouble(st.nextToken());
+                final double pause = NumberParser.parseDouble(st.nextToken());
                 event.setPause(pause);
                 // %20:  The total time used in collection, in seconds.
                 // ignore for now

File: src/main/java/com/tagtraum/perf/gcviewer/imp/DataReaderIBM1_3_0.java
Patch:
@@ -9,6 +9,7 @@
 import com.tagtraum.perf.gcviewer.model.GCEvent;
 import com.tagtraum.perf.gcviewer.model.GCModel;
 import com.tagtraum.perf.gcviewer.model.GCResource;
+import com.tagtraum.perf.gcviewer.util.NumberParser;
 
 /**
  * Parses -verbose:gc output from IBM JDK 1.3.0.
@@ -93,7 +94,7 @@ public GCModel read() throws IOException {
     private double parseTimeSinceLastAF(String line) {
         int start = line.indexOf(',') + 2;
         int end = line.indexOf(' ', start);
-        return Double.parseDouble(line.substring(start, end)) / 1000.0d;
+        return NumberParser.parseDouble(line.substring(start, end)) / 1000.0d;
     }
 
     private int parsePreUsed(String line) {
@@ -130,6 +131,6 @@ private int parseTotalAfterHeapExpansion(String line) {
     private double parsePause(String line) {
         int start = line.indexOf("in ") + 3;
         int end = line.indexOf(' ', start);
-        return Double.parseDouble(line.substring(start, end)) / 1000.0d;
+        return NumberParser.parseDouble(line.substring(start, end)) / 1000.0d;
     }
 }

File: src/main/java/com/tagtraum/perf/gcviewer/imp/DataReaderIBM1_3_1.java
Patch:
@@ -13,6 +13,7 @@
 import com.tagtraum.perf.gcviewer.model.GCEvent;
 import com.tagtraum.perf.gcviewer.model.GCModel;
 import com.tagtraum.perf.gcviewer.model.GCResource;
+import com.tagtraum.perf.gcviewer.util.NumberParser;
 
 /**
  * Parses -verbose:gc output from IBM JDK 1.3.0.
@@ -134,7 +135,7 @@ private long parseGCCycleStart(final String line) throws IOException {
     private double parseTimeSinceLastAF(final String line) {
         final int start = line.indexOf(',') + 2;
         final int end = line.indexOf(' ', start);
-        return Double.parseDouble(line.substring(start, end)) / 1000.0d;
+        return NumberParser.parseDouble(line.substring(start, end)) / 1000.0d;
     }
 
     private int parsePreUsed(final String line) {
@@ -182,6 +183,6 @@ private int parseTotalAfterHeapExpansion(final String line) {
     private double parsePause(final String line) {
         final int start = line.indexOf("in ") + 3;
         final int end = line.indexOf(' ', start);
-        return Double.parseDouble(line.substring(start, end)) / 1000.0d;
+        return NumberParser.parseDouble(line.substring(start, end)) / 1000.0d;
     }
 }

File: src/main/java/com/tagtraum/perf/gcviewer/imp/DataReaderIBM1_4_2.java
Patch:
@@ -19,6 +19,7 @@
 import com.tagtraum.perf.gcviewer.model.GCEvent;
 import com.tagtraum.perf.gcviewer.model.GCModel;
 import com.tagtraum.perf.gcviewer.model.GCResource;
+import com.tagtraum.perf.gcviewer.util.NumberParser;
 
 /**
  * Parses -verbose:gc output from IBM JDK 1.4.2.
@@ -142,7 +143,7 @@ private long parseGCCycleStart(final String line) throws IOException {
     private double parseTimeSinceLastAF(final String line) {
         final int start = line.indexOf(',') + 2;
         final int end = line.indexOf(' ', start);
-        return Double.parseDouble(line.substring(start, end)) / 1000.0d;
+        return NumberParser.parseDouble(line.substring(start, end)) / 1000.0d;
     }
 
     private int parsePreUsed(final String line) {
@@ -190,6 +191,6 @@ private int parseTotalAfterHeapExpansion(final String line) {
     private double parsePause(final String line) {
         final int start = line.indexOf("in ") + 3;
         final int end = line.indexOf(' ', start);
-        return Double.parseDouble(line.substring(start, end)) / 1000.0d;
+        return NumberParser.parseDouble(line.substring(start, end)) / 1000.0d;
     }
 }

File: src/main/java/com/tagtraum/perf/gcviewer/imp/DataReaderIBMi5OS1_4_2.java
Patch:
@@ -12,6 +12,7 @@
 import com.tagtraum.perf.gcviewer.model.GCEvent;
 import com.tagtraum.perf.gcviewer.model.GCModel;
 import com.tagtraum.perf.gcviewer.model.GCResource;
+import com.tagtraum.perf.gcviewer.util.NumberParser;
 
 /**
  * Parses -verbose:gc output from IBM i5/OS JDK 1.4.2.
@@ -229,6 +230,6 @@ private int parsePreviousCycle(final String line) {
     private double parsePause(final String line) {
         final int start = line.indexOf("collect (milliseconds) ") + 23;
         final int end = line.indexOf('.', start);
-        return Double.parseDouble(line.substring(start, end)) / 1000.0d;
+        return NumberParser.parseDouble(line.substring(start, end)) / 1000.0d;
     }
 }

File: src/main/java/com/tagtraum/perf/gcviewer/imp/DataReaderSun1_6_0.java
Patch:
@@ -21,6 +21,7 @@
 import com.tagtraum.perf.gcviewer.model.GCEvent;
 import com.tagtraum.perf.gcviewer.model.GCModel;
 import com.tagtraum.perf.gcviewer.model.GCResource;
+import com.tagtraum.perf.gcviewer.util.NumberParser;
 import com.tagtraum.perf.gcviewer.util.ParseInformation;
 
 /**
@@ -454,10 +455,10 @@ protected AbstractGCEvent<?> parseLine(final String line, final ParseInformation
                     // the -end events contain a pause and duration as well
                     int start = pos.getIndex();
                     int end = line.indexOf('/', pos.getIndex());
-                    event.setPause(Double.parseDouble(line.substring(start, end)));
+                    event.setPause(NumberParser.parseDouble(line.substring(start, end)));
                     start = end + 1;
                     end = line.indexOf(' ', start);
-                    event.setDuration(Double.parseDouble(line.substring(start, end)));
+                    event.setDuration(NumberParser.parseDouble(line.substring(start, end)));
                 }
                 ae = event;
                 // nothing more to parse...

File: src/main/java/com/tagtraum/perf/gcviewer/view/renderer/UsedHeapRenderer.java
Patch:
@@ -35,7 +35,7 @@ public Polygon computePolygon(ModelChart modelChart, GCModel model) {
             if (event.getTotal() > 0) {
                 final double timestamp = event.getTimestamp() - model.getFirstPauseTimeStamp();
                 polygon.addPoint(timestamp, event.getPreUsed());
-                polygon.addPoint(timestamp, event.getPostUsed());
+                polygon.addPoint(timestamp + event.getPause(), event.getPostUsed());
             }
         }
         // dummy point to make the polygon complete

File: src/main/java/com/tagtraum/perf/gcviewer/view/renderer/UsedTenuredRenderer.java
Patch:
@@ -38,7 +38,7 @@ public Polygon computePolygon(ModelChart modelChart, GCModel model) {
                 if (tenuredEvent.getTotal() > 0) {
                     final double timestamp = event.getTimestamp() - model.getFirstPauseTimeStamp();
                     polygon.addPoint(timestamp, tenuredEvent.getPreUsed());
-                    polygon.addPoint(timestamp, tenuredEvent.getPostUsed());
+                    polygon.addPoint(timestamp + event.getPause(), tenuredEvent.getPostUsed());
                 }
             }
         }

File: src/main/java/com/tagtraum/perf/gcviewer/view/renderer/UsedYoungRenderer.java
Patch:
@@ -53,7 +53,7 @@ public Polygon computePolygon(ModelChart modelChart, GCModel model) {
                 if (youngEvent.getTotal() > 0) {
                     final double timestamp = event.getTimestamp() - model.getFirstPauseTimeStamp();
                     polygon.addPoint(timestamp, lastTenuredTotal + youngEvent.getPreUsed());
-                    polygon.addPoint(timestamp, tenuredTotal + youngEvent.getPostUsed());
+                    polygon.addPoint(timestamp + event.getPause(), tenuredTotal + youngEvent.getPostUsed());
                 }
             }
         }

File: src/test/java/com/tagtraum/perf/gcviewer/TestAll.java
Patch:
@@ -19,6 +19,7 @@
 @RunWith(Suite.class)
 @Suite.SuiteClasses({
     ModelMetricsPanelTest.class,
+    ModelChartImplTest.class,
     TestBuildInfoReader.class,
     TestAllExp.class,
     TestAllImp.class,

File: src/main/java/com/tagtraum/perf/gcviewer/imp/DataReaderSun1_3_1.java
Patch:
@@ -12,7 +12,7 @@
 import com.tagtraum.perf.gcviewer.model.GCEvent;
 import com.tagtraum.perf.gcviewer.model.GCModel;
 import com.tagtraum.perf.gcviewer.model.GCResource;
-import com.tagtraum.perf.gcviewer.util.ParsePosition;
+import com.tagtraum.perf.gcviewer.util.ParseInformation;
 
 /**
  * Parses -verbose:gc output from Sun JDK 1.3.1.
@@ -72,7 +72,7 @@ else if (c == ']') {
         }
     }
 
-    protected AbstractGCEvent<GCEvent> parseLine(String line, ParsePosition pos) throws ParseException {
+    protected AbstractGCEvent<GCEvent> parseLine(String line, ParseInformation pos) throws ParseException {
         AbstractGCEvent<GCEvent> event = new GCEvent();
         try {
             event.setTimestamp(count);

File: src/main/java/com/tagtraum/perf/gcviewer/imp/ParseException.java
Patch:
@@ -2,7 +2,7 @@
 
 import java.io.IOException;
 
-import com.tagtraum.perf.gcviewer.util.ParsePosition;
+import com.tagtraum.perf.gcviewer.util.ParseInformation;
 
 /**
  * Is thrown whenever a ParseError occurs.
@@ -13,7 +13,7 @@
  */
 public class ParseException extends IOException {
     private String line;
-    private ParsePosition parsePosition;
+    private ParseInformation parsePosition;
 
     public ParseException(String s) {
         this(s, null);
@@ -24,7 +24,7 @@ public ParseException(String s, String line) {
         this.line = line;
     }
 
-    public ParseException(String s, String line, ParsePosition pos) {
+    public ParseException(String s, String line, ParseInformation pos) {
         super(s);
         this.line = line;
         this.parsePosition = pos;

File: src/main/java/com/tagtraum/perf/gcviewer/imp/UnknownGcTypeException.java
Patch:
@@ -1,6 +1,6 @@
 package com.tagtraum.perf.gcviewer.imp;
 
-import com.tagtraum.perf.gcviewer.util.ParsePosition;
+import com.tagtraum.perf.gcviewer.util.ParseInformation;
 
 /**
  * GC Types are the text introducing specific information for (part of) a GC (e.g. "Full GC") 
@@ -10,7 +10,7 @@
  */
 public class UnknownGcTypeException extends ParseException {
 
-    public UnknownGcTypeException(String gcType, String line, ParsePosition pos) {
+    public UnknownGcTypeException(String gcType, String line, ParseInformation pos) {
         super("Unknown gc type: '" + gcType + "'", line, pos);
     }
 

File: src/test/java/com/tagtraum/perf/gcviewer/imp/TestDataReaderSun1_6_0.java
Patch:
@@ -10,7 +10,6 @@
 import java.io.InputStream;
 import java.text.SimpleDateFormat;
 import java.util.logging.Level;
-import java.util.logging.Logger;
 
 import org.junit.Test;
 

File: src/main/java/com/tagtraum/perf/gcviewer/view/GCViewerGui.java
Patch:
@@ -261,8 +261,6 @@ public void internalFrameActivated(final InternalFrameEvent e) {
                 JCheckBoxMenuItem item = menuEntry.getValue();
                 item.setState(preferences.getGcLineProperty(menuEntry.getKey()));
             }
-            menuItemShowModelMetricsPanel.setState(preferences.getBooleanProperty(GCPreferences.SHOW_MODEL_METRICS_PANEL));
-            menuItemAntiAlias.setSelected(preferences.getBooleanProperty(GCPreferences.ANTI_ALIAS));
         }
 
         public void internalFrameDeactivated(final InternalFrameEvent e) {

File: src/main/java/com/tagtraum/perf/gcviewer/exp/DataWriterType.java
Patch:
@@ -9,6 +9,7 @@
 public enum DataWriterType {
     PLAIN,
     CSV,
+    CSV_TS,
     SIMPLE,
     SUMMARY;
 }

File: src/main/java/com/tagtraum/perf/gcviewer/exp/impl/DataWriterFactory.java
Patch:
@@ -50,6 +50,7 @@ public static DataWriter getDataWriter(File file, DataWriterType type, Map<Strin
         switch (type) {
             case PLAIN   : return new PlainDataWriter(outputStream); 
             case CSV     : return new CSVDataWriter(outputStream);
+            case CSV_TS  : return new CSVTSDataWriter(outputStream);
             case SIMPLE  : return new SimpleGcWriter(outputStream);
             case SUMMARY : return new SummaryDataWriter(outputStream, configuration); 
             default : throw new IOException(LocalisationHelper.getString("datawriterfactory_instantiation_failed") + " " + file);

File: src/test/java/com/tagtraum/perf/gcviewer/TestAll.java
Patch:
@@ -25,6 +25,7 @@
     TestAllMath.class,
     TestAllModel.class,
     TestAllUtil.class,
+    TestGCViewer.class
 })
 public class TestAll {
 }

File: src/main/java/com/tagtraum/perf/gcviewer/model/AbstractGCEvent.java
Patch:
@@ -463,7 +463,9 @@ public String toString() {
         // TODO: Generation: young and tenured!
         public static final Type G1_YOUNG_INITIAL_MARK = new Type("GC pause (young) (initial-mark)", Generation.TENURED, Concurrency.SERIAL, GcPattern.GC_MEMORY_PAUSE);
         public static final Type G1_YOUNG_INITIAL_MARK_TO_SPACE_OVERFLOW = new Type("GC pause (young) (to-space overflow) (initial-mark)", Generation.TENURED, Concurrency.SERIAL, GcPattern.GC_MEMORY_PAUSE);
-        public static final Type G1_YOUNG_INITIAL_MARK_TO_SPACE_EXHAUSTED = new Type("GC pause (young) (to-space exhausted) (initial-mark)", Generation.TENURED, Concurrency.SERIAL, GcPattern.GC_MEMORY_PAUSE);
+        // The following two Types are basically the same but in a different order. In JDK 6 the order was defined, no longer the case with JDK 7 (see: https://github.com/chewiebug/GCViewer/issues/100) 
+        public static final Type G1_YOUNG_INITIAL_MARK_TO_SPACE_EXHAUSTED = new Type("GC pause (young) (initial-mark) (to-space exhausted)", Generation.TENURED, Concurrency.SERIAL, GcPattern.GC_MEMORY_PAUSE);
+        public static final Type G1_YOUNG_TO_SPACE_EXHAUSTED_INITIAL_MARK = new Type("GC pause (young) (to-space exhausted) (initial-mark)", Generation.TENURED, Concurrency.SERIAL, GcPattern.GC_MEMORY_PAUSE);
         public static final Type G1_PARTIAL_INITIAL_MARK = new Type("GC pause (partial) (initial-mark)", Generation.TENURED, Concurrency.SERIAL, GcPattern.GC_MEMORY_PAUSE);
         public static final Type G1_PARTIAL_INITIAL_MARK_TO_SPACE_OVERFLOW = new Type("GC pause (partial) (to-space overflow) (initial-mark)", Generation.TENURED, Concurrency.SERIAL, GcPattern.GC_MEMORY_PAUSE);
         public static final Type G1_REMARK = new Type("GC remark", Generation.TENURED, Concurrency.SERIAL, GcPattern.GC_PAUSE, CollectionType.CONCURRENCY_HELPER);

File: src/main/java/com/tagtraum/perf/gcviewer/renderer/UsedTenuredRenderer.java
Patch:
@@ -38,7 +38,7 @@ public Polygon computePolygon(ModelChart modelChart, GCModel model) {
                 if (tenuredEvent.getTotal() > 0) {
                     final double timestamp = event.getTimestamp() - model.getFirstPauseTimeStamp();
                     polygon.addPoint(timestamp, tenuredEvent.getPreUsed());
-                    polygon.addPoint(timestamp, tenuredEvent.getPostUsed());
+                    polygon.addPoint(timestamp + event.getPause(), tenuredEvent.getPostUsed());
                 }
             }
         }

File: src/main/java/com/tagtraum/perf/gcviewer/renderer/UsedYoungRenderer.java
Patch:
@@ -53,7 +53,7 @@ public Polygon computePolygon(ModelChart modelChart, GCModel model) {
                 if (youngEvent.getTotal() > 0) {
                     final double timestamp = event.getTimestamp() - model.getFirstPauseTimeStamp();
                     polygon.addPoint(timestamp, lastTenuredTotal + youngEvent.getPreUsed());
-                    polygon.addPoint(timestamp, tenuredTotal + youngEvent.getPostUsed());
+                    polygon.addPoint(timestamp + event.getPause(), tenuredTotal + youngEvent.getPostUsed());
                 }
             }
         }

File: src/main/java/com/tagtraum/perf/gcviewer/ModelChartImpl.java
Patch:
@@ -362,7 +362,7 @@ private void applyPreferences(GCPreferences preferences) {
         setAntiAlias(preferences.getGcLineProperty(GCPreferences.ANTI_ALIAS));
         setShowTenured(preferences.getGcLineProperty(GCPreferences.TENURED_MEMORY));
         setShowYoung(preferences.getGcLineProperty(GCPreferences.YOUNG_MEMORY));
-        setShowGCTimesLine(preferences.getGcLineProperty(GCPreferences.GC_LINES_LINE));
+        setShowGCTimesLine(preferences.getGcLineProperty(GCPreferences.GC_TIMES_LINE));
         setShowGCTimesRectangles(preferences.getGcLineProperty(GCPreferences.GC_TIMES_RECTANGLES));
         setShowFullGCLines(preferences.getGcLineProperty(GCPreferences.FULL_GC_LINES));
         setShowIncGCLines(preferences.getGcLineProperty(GCPreferences.INC_GC_LINES));

File: src/main/java/com/tagtraum/perf/gcviewer/ModelMetricsPanel.java
Patch:
@@ -28,7 +28,7 @@
  * Time: 9:58:00 PM
  * @author <a href="mailto:hs@tagtraum.com">Hendrik Schreiber</a>
  */
-public class ModelPanel extends JTabbedPane {
+public class ModelMetricsPanel extends JTabbedPane {
 
     private NumberFormat pauseFormatter;
     private DateFormat totalTimeFormatter;
@@ -47,7 +47,7 @@ public class ModelPanel extends JTabbedPane {
     private PauseTab pauseTab;
 
 
-    public ModelPanel() {
+    public ModelMetricsPanel() {
         //setBorder(new TitledBorder(LocalisationHelper.getString("data_panel_title")));
         pauseFormatter = NumberFormat.getInstance();
         pauseFormatter.setMaximumFractionDigits(5);

File: src/test/java/com/tagtraum/perf/gcviewer/TestAll.java
Patch:
@@ -17,7 +17,7 @@
  */
 @RunWith(Suite.class)
 @Suite.SuiteClasses({
-    ModelPanelTest.class,
+    ModelMetricsPanelTest.class,
     TestBuildInfoReader.class,
     TestAllExp.class,
     TestAllImp.class,

File: src/main/java/com/tagtraum/perf/gcviewer/GCViewer.java
Patch:
@@ -42,7 +42,7 @@ else if (args.length >= 2) {
     private static void export(String gcFilename, String summaryFilePath, String chartFilePath)
             throws IOException, DataReaderException {
         final DataReaderFacade dataReaderFacade = new DataReaderFacade();
-    	GCModel model = dataReaderFacade.loadModel(gcFilename);
+        GCModel model = dataReaderFacade.loadModel(gcFilename);
 
         exportSummary(model, summaryFilePath);
         if (chartFilePath != null)

File: src/main/java/com/tagtraum/perf/gcviewer/ChartPanelView.java
Patch:
@@ -110,9 +110,7 @@ public GCModelLoader(final GCModelLoader prevModel,
 		@Override
 		protected GCModel doInBackground() throws Exception {
 			setProgress(0);
-	        final GCModel model = dataReaderFacade.loadModel(url, this);
-	        model.setURL(url);
-			return model;
+			return dataReaderFacade.loadModel(url, this);
 		}
 
 		protected void done() {

File: src/main/java/com/tagtraum/perf/gcviewer/imp/DataReaderFacade.java
Patch:
@@ -66,7 +66,7 @@ public GCModel loadModel(final String fileOrUrl) throws DataReaderException {
     public GCModel loadModel(final URL url, final ProgressCallback callback) throws DataReaderException {
         DataReaderException dataReaderException = new DataReaderException();
         GCModel model = null;
-        final Logger parserLogger = Logger.getLogger(callback == null ? "DataReaderFacade" : callback.getLoggerName());
+        final Logger parserLogger = Logger.getLogger(callback == null ? "com.tagtraum.perf.gcviewer" : callback.getLoggerName());
 
         try {
         	final String msg = "GCViewer version " + BuildInfoReader.getVersion() + " (" + BuildInfoReader.getBuildDate() + ")"; 
@@ -85,7 +85,7 @@ public GCModel loadModel(final URL url, final ProgressCallback callback) throws
         if (dataReaderException.getCause() != null) {
             throw dataReaderException;
         }
-        
+        model.setURL(url);
         return model;
     }
     

File: src/main/java/com/tagtraum/perf/gcviewer/GCViewer.java
Patch:
@@ -63,7 +63,7 @@ private static void export(String gcFilename, String summaryFilePath, String cha
             throws IOException, DataReaderException {
         final DataReaderFacade dataReaderFacade = DataReaderFacade.getInstance();
     	addShutdownHandler(dataReaderFacade.getThreadGroup());
-        GCModel model = dataReaderFacade.loadModel(gcFilename, false, null);
+        GCModel model = dataReaderFacade.loadModel(gcFilename);
 
         exportSummary(model, summaryFilePath);
         if (chartFilePath != null)

File: src/main/java/com/tagtraum/perf/gcviewer/imp/MonitoredBufferedInputStream.java
Patch:
@@ -14,8 +14,9 @@
 public class MonitoredBufferedInputStream extends BufferedInputStream {
 
 	public interface ProgressCallback {
-		public void publishP(Integer... chunks);
+		void publishP(Integer... chunks);
 		void updateProgress(int progress);
+		String getLoggerName();
 	}
 	
 	private final ProgressCallback callback;

File: src/main/java/com/tagtraum/perf/gcviewer/imp/DataReaderSun1_6_0.java
Patch:
@@ -70,6 +70,7 @@ public class DataReaderSun1_6_0 extends AbstractDataReaderSun {
     private static final String TIMES_ALONE = " [Times";
     private static final String FINISHED = "Finished"; // -XX:PrintCmsStatistics=2
     private static final String CARDTABLE = " (cardTable: "; // -XX:PrintCmsStatistics=2 
+    private static final String GC_LOCKER = "GC locker: Trying a full collection because scavenge failed";
     private static final List<String> EXCLUDE_STRINGS = new LinkedList<String>();
 
     static {
@@ -81,6 +82,7 @@ public class DataReaderSun1_6_0 extends AbstractDataReaderSun {
         EXCLUDE_STRINGS.add(TIMES_ALONE);
         EXCLUDE_STRINGS.add(FINISHED);
         EXCLUDE_STRINGS.add(CARDTABLE);
+        EXCLUDE_STRINGS.add(GC_LOCKER);
     }
     
     private static final String EVENT_YG_OCCUPANCY = "YG occupancy";

File: src/main/java/com/tagtraum/perf/gcviewer/exp/impl/CSVDataWriter.java
Patch:
@@ -47,7 +47,7 @@ public void write(GCModel model) throws IOException {
             out.print(',');
             out.print(event.getPause());
             out.print(',');
-            out.println(event.getType());
+            out.println(event.getExtendedType());
 
             out.print(event.getTimestamp());
             out.print(',');

File: src/main/java/com/tagtraum/perf/gcviewer/exp/impl/SimpleGcWriter.java
Patch:
@@ -83,15 +83,15 @@ else if (event.isFull()) {
      */
     private boolean isYoungOnly(GCEvent event) {
         boolean isYoungOnly = false;
-        if (!event.hasDetails() && event.getType().getGeneration().equals(Generation.YOUNG)) {
+        if (!event.hasDetails() && event.getExtendedType().getGeneration().equals(Generation.YOUNG)) {
             isYoungOnly = true;
         }
-        else if (event.getType().getGeneration().equals(Generation.YOUNG)) {
+        else if (event.getExtendedType().getGeneration().equals(Generation.YOUNG)) {
             isYoungOnly = true;
             Iterator<GCEvent> iterator = event.details();
             while (iterator.hasNext()) {
                 GCEvent currentEvent = iterator.next();
-                if (!currentEvent.getType().getGeneration().equals(Generation.YOUNG)) {
+                if (!currentEvent.getExtendedType().getGeneration().equals(Generation.YOUNG)) {
                     isYoungOnly = false;
                     break;
                 }

File: src/main/java/com/tagtraum/perf/gcviewer/model/ConcurrentGCEvent.java
Patch:
@@ -44,13 +44,13 @@ public void setPause(double pause) {
     }
     
     public boolean hasDuration() {
-        return !getType().getType().endsWith("-start");
+        return !getExtendedType().getName().endsWith("-start");
     }
 
     public void toStringBuffer(StringBuffer sb) {
         sb.append(getTimestamp());
         sb.append(": [");
-        sb.append(getType());
+        sb.append(getExtendedType().getName());
         if (hasDuration()) {
             sb.append(' ');
             sb.append(pause);

File: src/main/java/com/tagtraum/perf/gcviewer/model/G1GcEvent.java
Patch:
@@ -12,7 +12,7 @@ public class G1GcEvent extends GCEvent {
 
     @Override
     public String getTypeAsString() {
-        return getType().getType();
+        return getExtendedType().getName();
     }
 
     @Override

File: src/main/java/com/tagtraum/perf/gcviewer/model/GCModel.java
Patch:
@@ -308,7 +308,7 @@ public void add(final AbstractGCEvent<?> abstractEvent) {
         	final ConcurrentGCEvent concEvent = (ConcurrentGCEvent)abstractEvent;
             concurrentGCEvents.add(concEvent);
         
-            DoubleData pauses = getDoubleData(concEvent.getType().getType(), concurrentGcEventPauses);
+            DoubleData pauses = getDoubleData(concEvent.getExtendedType().getName(), concurrentGcEventPauses);
             pauses.add(concEvent.getPause());
 
         } else if (abstractEvent instanceof GCEvent) {

File: src/main/java/com/tagtraum/perf/gcviewer/renderer/GCRectanglesRenderer.java
Patch:
@@ -67,9 +67,9 @@ public void paintComponent(Graphics2D g2d) {
             if (lastX != x || lastY != y || lastWidth != width || lastHeight != height) {
                 if ((x + width) > leftBoundary && x < rightBoundary) {
                     // make sure only visible rectangles are drawn
-                    if (event.getType() == AbstractGCEvent.Type.FULL_GC) {
+                    if (event.isFull()) {
                         g2d.setPaint(darker);
-                    } else if (event.getType() == AbstractGCEvent.Type.INC_GC) {
+                    } else if (event.getExtendedType().getType() == AbstractGCEvent.Type.INC_GC) {
                         g2d.setPaint(brighter);
                     } else {
                         g2d.setPaint(getLinePaint());

File: src/main/java/com/tagtraum/perf/gcviewer/renderer/PolygonChartRenderer.java
Patch:
@@ -204,8 +204,8 @@ private static int getLowestY(Polygon polygon) {
      * @return <code>true</code> if <code>event</code> contains memory information
      */
     protected boolean hasMemoryInformation(GCEvent event) {
-        return event.getType().getPattern().equals(GcPattern.GC_MEMORY)
-                || event.getType().getPattern().equals(GcPattern.GC_MEMORY_PAUSE); 
+        return event.getExtendedType().getPattern().equals(GcPattern.GC_MEMORY)
+                || event.getExtendedType().getPattern().equals(GcPattern.GC_MEMORY_PAUSE); 
     }
 
     /**

File: src/test/java/com/tagtraum/perf/gcviewer/imp/TestDataReaderIBMJ9_5_0.java
Patch:
@@ -35,7 +35,7 @@ public void afTenuredGlobal() throws Exception {
         assertEquals("pause", 0.035912, event.getPause(), 0.0000001);
 
         assertEquals("timestamp", 0, event.getTimestamp(), 0.000001);
-        assertEquals("name", Type.FULL_GC.getType(), event.getType().getType());
+        assertEquals("name", Type.FULL_GC.getName(), event.getExtendedType().getName());
         assertEquals("before", (52428800 - 2621440) / 1024, event.getPreUsed());
         assertEquals("after", (52428800 - 40481192) / 1024, event.getPostUsed());
         assertEquals("total", 52428800 / 1024, event.getTotal());
@@ -53,7 +53,7 @@ public void afTenuredGlobal_20090417_AA() throws Exception {
         assertEquals("pause", 0.837024, event.getPause(), 0.0000001);
 
         assertEquals("timestamp", 0, event.getTimestamp(), 0.000001);
-        assertEquals("name", Type.FULL_GC.getType(), event.getType().getType());
+        assertEquals("name", Type.FULL_GC.getName(), event.getExtendedType().getName());
         assertEquals("before", (12884901888L - 4626919608L) / 1024, event.getPreUsed());
         assertEquals("after", (12884901888L - 10933557088L) / 1024, event.getPostUsed());
         assertEquals("total", 12884901888L / 1024, event.getTotal());

File: src/main/java/com/tagtraum/perf/gcviewer/imp/DataReaderSun1_6_0G1.java
Patch:
@@ -41,6 +41,7 @@
  * <li>-XX:+PrintGCApplicationStoppedTime (output ignored)</li>
  * <li>-XX:+PrintGCApplicationConcurrentTime (output ignored)</li>
  * <li>-XX:+PrintAdaptiveSizePolicy (output ignored)</li>
+ * <li>-XX:+PrintGCCause (output ignored)</li>
  * </ul>
  * </p>
  * @author <a href="mailto:gcviewer@gmx.ch">Joerg Wuethrich</a>

File: src/test/java/com/tagtraum/perf/gcviewer/util/TestAllUtil.java
Patch:
@@ -12,6 +12,7 @@
 @RunWith(Suite.class)
 @Suite.SuiteClasses({
     TestLocalisationHelper.class,
+    TestHttpUrlConnectionHelper.class,
 })
 public class TestAllUtil {
 }

File: src/main/java/com/tagtraum/perf/gcviewer/imp/AbstractDataReaderSun.java
Patch:
@@ -318,7 +318,9 @@ protected double parsePause(String line, ParsePosition pos) {
     }
     
     protected boolean hasNextDetail(String line, ParsePosition pos) {
-        return nextIsTimestamp(line, pos) || nextCharIsBracket(line, pos);
+        return nextIsTimestamp(line, pos) 
+                || nextIsDatestamp(line, pos) 
+                || nextCharIsBracket(line, pos);
     }
 
     protected boolean nextCharIsBracket(String line, ParsePosition pos) {

File: src/main/java/com/tagtraum/perf/gcviewer/util/UrlDisplayHelper.java
Patch:
@@ -24,7 +24,7 @@ public class UrlDisplayHelper {
      * @return <code>true</code> if displaying of urls is supported
      */
     public static boolean displayUrlIsSupported() {
-        return Desktop.getDesktop().isSupported(Action.BROWSE);
+        return Desktop.isDesktopSupported() && Desktop.getDesktop().isSupported(Action.BROWSE);
     }
     
     /**

File: src/main/java/com/tagtraum/perf/gcviewer/imp/AbstractDataReaderSun.java
Patch:
@@ -402,8 +402,7 @@ protected GCEvent.Type extractTypeFromParsedString(String s) throws UnknownGcTyp
             Matcher parenMatcher = parenthesesPattern.matcher(s);
             if (parenMatcher.find()) {
                 gcType = AbstractGCEvent.Type.parse(parenMatcher.replaceFirst(""));
-                // retain the full string representation of the GC (including the cause)
-                gcType.setType(s);
+                // TODO: retain the full string representation of the GC (including the cause)
             }
         }
         return gcType;

File: src/test/java/com/tagtraum/perf/gcviewer/imp/TestDataReaderSun1_6_0.java
Patch:
@@ -826,7 +826,9 @@ public void testPrintGCCause() throws Exception {
         assertEquals("GC count", 1, model.size());
         assertEquals("GC pause", 0.0035370, model.getGCPause().getMax(), 0.0000001);
         assertEquals("GC timestamp", 111.080, model.get(0).getTimestamp(), 0.000001);
-        assertEquals("GC (Allocation Failure) ParNew:", model.get(0).getTypeAsString());
+        // If types get retained, this will be:
+        // assertEquals("GC (Allocation Failure) ParNew:", model.get(0).getTypeAsString());
+        assertEquals("GC ParNew:", model.get(0).getTypeAsString());
     }
     
     /**

File: src/main/java/com/tagtraum/perf/gcviewer/ModelPanel.java
Patch:
@@ -386,7 +386,7 @@ public void setModel(GCModel model) {
             		true);
             updateValue(localStrings.getString("data_panel_avg_fullgcpause"), 
             		fullGCDataAvailable ? pauseFormatter.format(model.getFullGCPause().average()) + "s (\u03c3=" + pauseFormatter.format(model.getFullGCPause().standardDeviation()) +")" : "n/a", 
-            		fullGCDataAvailable ? isSignificant(model.getFullGCPause().average(), model.getPause().standardDeviation()) : false);
+            		fullGCDataAvailable ? isSignificant(model.getFullGCPause().average(), model.getFullGCPause().standardDeviation()) : false);
             updateValue(localStrings.getString("data_panel_min_max_full_gc_pause"), 
             		fullGCDataAvailable ? pauseFormatter.format(model.getFullGCPause().getMin()) + "s / " + pauseFormatter.format(model.getFullGCPause().getMax()) + "s" : "n/a", 
             		fullGCDataAvailable);

File: src/main/java/com/tagtraum/perf/gcviewer/exp/impl/SummaryDataWriter.java
Patch:
@@ -210,7 +210,7 @@ private void exportPauseSummary(PrintWriter out, GCModel model) {
 			}
 
 			if (fullGCDataAvailable) {
-				exportValue(out, "avgFullGCPauseIsSig", isSignificant(model.getFullGCPause().average(), model.getPause().standardDeviation()));
+				exportValue(out, "avgFullGCPauseIsSig", isSignificant(model.getFullGCPause().average(), model.getFullGCPause().standardDeviation()));
 				exportValue(out, "avgFullGCPause", pauseFormatter.format(model.getFullGCPause().average()), "s");
 				exportValue(out, "avgFullGCPause\u03c3", pauseFormatter.format(model.getFullGCPause().standardDeviation()), "s");
 			}

File: src/main/java/com/tagtraum/perf/gcviewer/renderer/GCRectanglesRenderer.java
Patch:
@@ -65,7 +65,7 @@ public void paintComponent(Graphics2D g2d) {
             final int x = (int) (scaleFactor * (event.getTimestamp() - getModelChart().getModel().getFirstPauseTimeStamp()));
             final int y = getHeight() - (int) (pause * scaledHeight);
             if (lastX != x || lastY != y || lastWidth != width || lastHeight != height) {
-                if ((x + pause) > leftBoundary && x < rightBoundary) {
+                if ((x + width) > leftBoundary && x < rightBoundary) {
                     // make sure only visible rectangles are drawn
                     if (event.getType() == AbstractGCEvent.Type.FULL_GC) {
                         g2d.setPaint(darker);

File: src/main/java/com/tagtraum/perf/gcviewer/renderer/TotalHeapRenderer.java
Patch:
@@ -29,14 +29,17 @@ public TotalHeapRenderer(ModelChartImpl modelChart) {
     public Polygon computePolygon(ModelChart modelChart, GCModel model) {
         ScaledPolygon polygon = createMemoryScaledPolygon();
         polygon.addPoint(0.0d, 0.0d);
+        int lastTotal = 0;
         for (Iterator<GCEvent> i = model.getGCEvents(); i.hasNext();) {
             GCEvent event = i.next();
             if (event.getTotal() > 0) {
             	// there are events that don't have a heap size associated (like "GC remark" of G1)
             	// -> skip them
             	polygon.addPoint(event.getTimestamp() - model.getFirstPauseTimeStamp(), event.getTotal());
+            	lastTotal = event.getTotal();
             }
         }
+        polygon.addPointNotOptimised(model.getRunningTime(), lastTotal);
         polygon.addPointNotOptimised(model.getRunningTime(), 0.0d);
         return polygon;
     }

File: src/test/java/com/tagtraum/perf/gcviewer/imp/TestAll.java
Patch:
@@ -27,6 +27,7 @@
     TestDataReaderIBM1_2_2.class,
     TestDataReaderIBM1_3_1.class,
     TestDataReaderIBMi5OS1_4_2.class,
+    TestDataReaderIBMJ9_5_0.class,
     TestDataReaderHPUX1_2.class,
     TestDataReaderJRockit1_4_2.class,
     TestDataReaderJRockit1_5_0.class

File: src/main/java/com/tagtraum/perf/gcviewer/GCDocument.java
Patch:
@@ -127,7 +127,7 @@ public void setShowModelPanel(boolean showModelPanel) {
     public boolean reloadModels(boolean background) throws DataReaderException {
         boolean reloaded = false;
         for (ChartPanelView chartPanelView : chartPanelViews) {
-            reloaded |= chartPanelView.reloadModel();
+            reloaded |= chartPanelView.reloadModel(!refreshWatchDog.isRunning());
         }
         if (!background) {
             relayout();

File: src/main/java/com/tagtraum/perf/gcviewer/exp/impl/SimpleGcWriter.java
Patch:
@@ -3,6 +3,7 @@
 import java.io.IOException;
 import java.io.OutputStream;
 import java.util.Iterator;
+import java.util.Locale;
 
 import com.tagtraum.perf.gcviewer.exp.AbstractDataWriter;
 import com.tagtraum.perf.gcviewer.model.AbstractGCEvent;
@@ -38,7 +39,7 @@ public void write(GCModel model) throws IOException {
             AbstractGCEvent<?> abstractEvent = i.next();
             if (abstractEvent.isStopTheWorld()) {
                 GCEvent event = (GCEvent)abstractEvent;
-                out.printf("%s %f %f", getSimpleType(event), event.getTimestamp(), event.getPause());
+                out.printf((Locale)null, "%s %f %f", getSimpleType(event), event.getTimestamp(), event.getPause());
                 out.println();
             }
         }

File: src/test/java/com/tagtraum/perf/gcviewer/imp/TestAll.java
Patch:
@@ -13,6 +13,7 @@
 @Suite.SuiteClasses({
     TestAbstractDataReaderSun.class,
     
+    TestDataReaderFacade.class,
     TestDataReaderFactory.class,
     TestDataReaderSun1_2_2.class,
     TestDataReaderSun1_3_1.class,

File: src/main/java/com/tagtraum/perf/gcviewer/imp/DataReaderSun1_3_1.java
Patch:
@@ -28,8 +28,8 @@ public class DataReaderSun1_3_1 extends AbstractDataReaderSun implements DataRea
     
     private int count;
 
-    public DataReaderSun1_3_1(InputStream in) throws UnsupportedEncodingException {
-        super(in);
+    public DataReaderSun1_3_1(InputStream in, GcLogType gcLogType) throws UnsupportedEncodingException {
+        super(in, gcLogType);
     }
 
     public GCModel read() throws IOException {

File: src/main/java/com/tagtraum/perf/gcviewer/imp/DataReaderSun1_6_0G1.java
Patch:
@@ -106,8 +106,8 @@ public class DataReaderSun1_6_0G1 extends AbstractDataReaderSun {
         HEAP_STRINGS.add("}");
     }
     
-    public DataReaderSun1_6_0G1(InputStream in) throws UnsupportedEncodingException {
-        super(in);
+    public DataReaderSun1_6_0G1(InputStream in, GcLogType gcLogType) throws UnsupportedEncodingException {
+        super(in, gcLogType);
     }
 
     @Override

File: src/main/java/com/tagtraum/perf/gcviewer/model/AbstractGCEvent.java
Patch:
@@ -328,6 +328,9 @@ public String toString() {
         public static final Type JROCKIT_16_YOUNG_GC = new Type("jrockit.YC", Generation.YOUNG);
         public static final Type JROCKIT_16_PARALLEL_NURSERY_GC = new Type("jrockit.parallel nursery GC", Generation.YOUNG);
         
+        // Sun JDK 1.5
+        public static final Type SCAVENGE_BEFORE_REMARK = new Type("Scavenge-Before-Remark", "Scavenge-Before-Remark", Generation.ALL);
+        
         public static final Type FULL_GC = new Type("Full GC", Generation.ALL);
         public static final Type FULL_GC_SYSTEM = new Type("Full GC (System)", Generation.ALL);
         public static final Type GC = new Type("GC", Generation.YOUNG);

File: src/test/java/com/tagtraum/perf/gcviewer/imp/TestAbstractDataReaderSun.java
Patch:
@@ -21,7 +21,7 @@ public class TestAbstractDataReaderSun {
     
     @Before
     public void setUp() throws UnsupportedEncodingException {
-        dataReader = new AbstractDataReaderSunSub(new ByteArrayInputStream(new byte[0]));
+        dataReader = new AbstractDataReaderSunSub(new ByteArrayInputStream(new byte[0]), GcLogType.SUN1_6);
     }
     
     /**
@@ -85,8 +85,8 @@ public void setMemorySimplePreHeap_postHeap() throws ParseException {
      */
     private class AbstractDataReaderSunSub extends AbstractDataReaderSun {
         
-        public AbstractDataReaderSunSub(InputStream in) throws UnsupportedEncodingException {
-            super(in);
+        public AbstractDataReaderSunSub(InputStream in, GcLogType gcLogType) throws UnsupportedEncodingException {
+            super(in, gcLogType);
         }
     
         @Override

File: src/test/java/com/tagtraum/perf/gcviewer/imp/TestDataReaderSun1_3_1.java
Patch:
@@ -29,7 +29,7 @@ public void testParse1() throws Exception {
         AbstractGCEvent<GCEvent> event3 = new GCEvent(2, 8968, 8230, 10912, 0.0037192d, AbstractGCEvent.Type.GC);
         AbstractGCEvent<GCEvent> event4 = new GCEvent(3, 10753, 6046, 10912, 0.3146707d, AbstractGCEvent.Type.FULL_GC);
         ByteArrayInputStream in = new ByteArrayInputStream("[GC 8968K->8230K(10912K), 0.0037192 secs]\r\n[GC 8968K->8230K(10[GC 8968K->8230K(10912K), 0.0037192 secs]912K), 0.0037192 secs]\r\n[Full GC 10753K->6046K(10912K), 0.3146707 secs]".getBytes());
-        DataReader reader = new DataReaderSun1_3_1(in);
+        DataReader reader = new DataReaderSun1_3_1(in, GcLogType.SUN1_3_1);
         GCModel model = reader.read();
         assertTrue(model.size() == 4);
         Iterator<GCEvent> i = model.getGCEvents();

File: src/test/java/com/tagtraum/perf/gcviewer/imp/TestDataReaderSun1_3_1_19.java
Patch:
@@ -23,7 +23,7 @@ public void testCMSPrintGCDetails() throws Exception {
     	// does not seem to be implemented at all
     	
     	final InputStream in = getClass().getResourceAsStream("SampleSun1_3_1_19SunOS.txt");
-        final DataReader reader = new DataReaderSun1_3_1(in);
+        final DataReader reader = new DataReaderSun1_3_1(in, GcLogType.SUN1_3_1);
         GCModel model = reader.read();
         
         assertEquals("throughput", 95.21, model.getThroughput(), 0.01);

File: src/test/java/com/tagtraum/perf/gcviewer/model/TestAll.java
Patch:
@@ -11,7 +11,8 @@
  */
 @RunWith(Suite.class)
 @Suite.SuiteClasses({
-    TestGcEvent.class
+    TestGcEvent.class,
+    TestAbstractGCEvent.class
 })
 public class TestAll {
 }

File: src/main/java/com/tagtraum/perf/gcviewer/model/AbstractGCEvent.java
Patch:
@@ -396,6 +396,7 @@ public String toString() {
         public static final Type G1_CONCURRENT_MARK_START = new Type("GC concurrent-mark-start", "GC concurrent-mark-start", Generation.TENURED, Concurrency.CONCURRENT, GcPattern.GC);
         public static final Type G1_CONCURRENT_MARK_END = new Type("GC concurrent-mark-end", "GC concurrent-mark-end,", Generation.TENURED, Concurrency.CONCURRENT, GcPattern.GC_PAUSE);
         public static final Type G1_CONCURRENT_MARK_ABORT = new Type("GC concurrent-mark-abort", "GC concurrent-mark-abort", Generation.TENURED, Concurrency.CONCURRENT, GcPattern.GC);
+        public static final Type G1_CONCURRENT_MARK_RESET_FOR_OVERFLOW = new Type("GC concurrent-mark-reset-for-overflow", "GC concurrent-mark-reset-for-overflow", Generation.TENURED, Concurrency.CONCURRENT, GcPattern.GC);
         public static final Type G1_CONCURRENT_COUNT_START = new Type("GC concurrent-count-start", "GC concurrent-count-start", Generation.TENURED, Concurrency.CONCURRENT, GcPattern.GC);
         public static final Type G1_CONCURRENT_COUNT_END = new Type("GC concurrent-count-end", "GC concurrent-count-end,", Generation.TENURED, Concurrency.CONCURRENT, GcPattern.GC_PAUSE);
         public static final Type G1_CONCURRENT_CLEANUP_START = new Type("GC concurrent-cleanup-start", "GC concurrent-cleanup-start", Generation.TENURED, Concurrency.CONCURRENT, GcPattern.GC);

File: src/main/java/com/tagtraum/perf/gcviewer/model/GCEvent.java
Patch:
@@ -144,6 +144,7 @@ public void toStringBuffer(StringBuffer sb) {
             for (GCEvent event : details) {
                 event.toStringBuffer(sb);
             }
+            sb.append(' ');
         }
         sb.append(preUsed);
         sb.append("K->");

File: src/main/java/com/tagtraum/perf/gcviewer/imp/DataReaderJRockit1_6_0.java
Patch:
@@ -42,7 +42,7 @@ public GCModel read() throws IOException {
             GCEvent event = null;
             int nurserySize = -1;
             while ((line = in.readLine()) != null) {
-                // Log entry types to be parsed:
+                // Sample JRockit log entry types to be parsed:
                 //
                 // [INFO ][memory ] GC mode: Garbage collection optimized for throughput, strategy: Generational Parallel Mark & Sweep
                 // [INFO ][memory ] Heap size: 8388608KB, maximal heap size: 8388608KB, nursery size: 4194304KB

File: src/main/java/com/tagtraum/perf/gcviewer/ModelChartImpl.java
Patch:
@@ -563,8 +563,7 @@ private String format(final double val) {
                 s = ((NumberFormat)formatter).format(offsetValue);
             }
             else if (formatter instanceof DateFormat) {
-                final Date date = new Date(((long)offsetValue) * 1000l);
-                //final Date date = new Date((long)Math.ceil(val * 1000.0d));
+                final Date date = new Date(Math.round(offsetValue) * 1000);
                 s = ((DateFormat)formatter).format(date);
             }
             return s;

File: src/main/java/com/tagtraum/perf/gcviewer/imp/DataReaderSun1_6_0.java
Patch:
@@ -131,8 +131,8 @@ public class DataReaderSun1_6_0 extends AbstractDataReaderSun {
     // AdaptiveSizeStop: collection: 1 
     //  [PSYoungGen: 16420K->2657K(19136K)] 16420K->15919K(62848K), 0.0109211 secs] [Times: user=0.00 sys=0.00, real=0.01 secs]
     // -> to parse it, the first line must be split, and the following left out until the rest of the gc information follows
-    private static Pattern adaptiveSizePolicyPattern = Pattern.compile("(.*GC)Adaptive.*");
-    private static final String ADAPTIVE_PATTERN = "GCAdaptive";
+    private static Pattern adaptiveSizePolicyPattern = Pattern.compile("(.*GC|.*\\(System\\))Adaptive.*");
+    private static final String ADAPTIVE_PATTERN = "AdaptiveSize";
 
     public DataReaderSun1_6_0(InputStream in) throws UnsupportedEncodingException {
         super(in);

File: src/main/java/com/tagtraum/perf/gcviewer/imp/DataReaderSun1_6_0G1.java
Patch:
@@ -171,6 +171,7 @@ else if (beginningOfLine != null) {
                             // detailed G1 events start with GC_MEMORY pattern, but are of type GC_MEMORY_PAUSE
 
                             gcEvent = new G1GcEvent();
+                            gcEvent.setDateStamp(parseDatestamp(gcPauseMatcher.group(GC_DATESTAMP), parsePosition));
                             gcEvent.setTimestamp(Double.parseDouble(gcPauseMatcher.group(GC_TIMESTAMP)));
                             gcEvent.setType(type);
                             gcEvent.setPause(Double.parseDouble(gcPauseMatcher.group(GC_PAUSE)));

File: src/test/java/com/tagtraum/perf/gcviewer/imp/TestDataReaderSun1_6_0.java
Patch:
@@ -15,6 +15,8 @@ public class TestDataReaderSun1_6_0 extends TestCase {
     private static final Logger IMP_LOGGER = Logger.getLogger("com.tagtraum.perf.gcviewer.imp");
     private static final Logger DATA_READER_FACTORY_LOGGER = Logger.getLogger("com.tagtraum.perf.gcviewer.DataReaderFactory");
 
+    private static final SimpleDateFormat dateParser = new SimpleDateFormat(AbstractDataReaderSun.DATE_STAMP_FORMAT);
+
     public void testPrintGCDateStamps() throws Exception {
 		final ByteArrayInputStream in = new ByteArrayInputStream(
 				("2011-10-05T04:23:39.427+0200: 19.845: [GC 19.845: [ParNew: 93184K->5483K(104832K), 0.0384413 secs] 93184K->5483K(1036928K), 0.0388082 secs] [Times: user=0.41 sys=0.06, real=0.04 secs]")
@@ -24,7 +26,6 @@ public void testPrintGCDateStamps() throws Exception {
 		GCModel model = reader.read();
 
 		assertTrue("hasDateStamp", model.hasDateStamp());
-		SimpleDateFormat dateParser = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.S");
 		assertEquals("DateStamp",
 				dateParser.parse("2011-10-05T04:23:39.427+0200"),
 				model.getFirstDateStamp());

File: src/main/java/com/tagtraum/perf/gcviewer/action/Arrange.java
Patch:
@@ -23,7 +23,7 @@ public Arrange(final GCViewer gcViewer) {
         putValue(SHORT_DESCRIPTION, GCViewer.localStrings.getString("main_frame_menuitem_hint_arrange"));
         putValue(MNEMONIC_KEY, new Integer(GCViewer.localStrings.getString("main_frame_menuitem_mnemonic_arrange").charAt(0)));
         putValue(ACTION_COMMAND_KEY, "arrange");
-        putValue(ACCELERATOR_KEY, KeyStroke.getKeyStroke('G', Event.CTRL_MASK ));
+        putValue(ACCELERATOR_KEY, KeyStroke.getKeyStroke('G', Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() ));
         setEnabled(false);
     }
 

File: src/main/java/com/tagtraum/perf/gcviewer/action/Export.java
Patch:
@@ -29,7 +29,7 @@ public Export(final GCViewer gcViewer) {
         putValue(MNEMONIC_KEY, new Integer(GCViewer.localStrings.getString("main_frame_menuitem_mnemonic_export").charAt(0)));
         putValue(SHORT_DESCRIPTION, GCViewer.localStrings.getString("main_frame_menuitem_hint_export"));
         putValue(ACTION_COMMAND_KEY, "export");
-        putValue(ACCELERATOR_KEY, KeyStroke.getKeyStroke('E', Event.CTRL_MASK ));
+        putValue(ACCELERATOR_KEY, KeyStroke.getKeyStroke('E', Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() ));
         putValue(SMALL_ICON, new ImageIcon(Toolkit.getDefaultToolkit().getImage(gcViewer.getClass().getResource("images/save.png"))));
         setEnabled(false);
         saveDialog = new JFileChooser();

File: src/main/java/com/tagtraum/perf/gcviewer/action/OpenFile.java
Patch:
@@ -28,7 +28,7 @@ public OpenFile(final GCViewer gcViewer) {
         putValue(SHORT_DESCRIPTION, GCViewer.localStrings.getString("main_frame_menuitem_hint_open_file"));
         putValue(MNEMONIC_KEY, new Integer(GCViewer.localStrings.getString("main_frame_menuitem_mnemonic_open_file").charAt(0)));
         putValue(ACTION_COMMAND_KEY, "open");
-        putValue(ACCELERATOR_KEY, KeyStroke.getKeyStroke('O', Event.CTRL_MASK ));
+        putValue(ACCELERATOR_KEY, KeyStroke.getKeyStroke('O', Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() ));
         putValue(SMALL_ICON, new ImageIcon(Toolkit.getDefaultToolkit().getImage(gcViewer.getClass().getResource("images/open.png"))));
         openDialog = new JFileChooser();
         openDialog.setDialogTitle(GCViewer.localStrings.getString("fileopen_dialog_title"));

File: src/main/java/com/tagtraum/perf/gcviewer/action/OpenURL.java
Patch:
@@ -29,7 +29,7 @@ public OpenURL(final GCViewer gcViewer) {
         putValue(SHORT_DESCRIPTION, GCViewer.localStrings.getString("main_frame_menuitem_hint_open_url"));
         putValue(MNEMONIC_KEY, new Integer(GCViewer.localStrings.getString("main_frame_menuitem_mnemonic_open_url").charAt(0)));
         putValue(ACTION_COMMAND_KEY, "open_url");
-        putValue(ACCELERATOR_KEY, KeyStroke.getKeyStroke('U', Event.CTRL_MASK ));
+        putValue(ACCELERATOR_KEY, KeyStroke.getKeyStroke('U', Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() ));
         putValue(SMALL_ICON, new ImageIcon(Toolkit.getDefaultToolkit().getImage(gcViewer.getClass().getResource("images/open_url.png"))));
     }
 

File: src/main/java/com/tagtraum/perf/gcviewer/action/Refresh.java
Patch:
@@ -23,7 +23,7 @@ public Refresh(final GCViewer gcViewer) {
         putValue(SHORT_DESCRIPTION, GCViewer.localStrings.getString("main_frame_menuitem_hint_refresh"));
         putValue(MNEMONIC_KEY, new Integer(GCViewer.localStrings.getString("main_frame_menuitem_mnemonic_refresh").charAt(0)));
         putValue(ACTION_COMMAND_KEY, "refresh");
-        putValue(ACCELERATOR_KEY, KeyStroke.getKeyStroke('R', Event.CTRL_MASK ));
+        putValue(ACCELERATOR_KEY, KeyStroke.getKeyStroke('R', Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() ));
         putValue(SMALL_ICON, new ImageIcon(Toolkit.getDefaultToolkit().getImage(gcViewer.getClass().getResource("images/refresh.png"))));
         setEnabled(false);
     }

File: src/main/java/com/tagtraum/perf/gcviewer/action/Watch.java
Patch:
@@ -24,7 +24,7 @@ public Watch(final GCViewer gcViewer) {
         putValue(SHORT_DESCRIPTION, GCViewer.localStrings.getString("main_frame_menuitem_hint_watch"));
         putValue(MNEMONIC_KEY, new Integer(GCViewer.localStrings.getString("main_frame_menuitem_mnemonic_watch").charAt(0)));
         putValue(ACTION_COMMAND_KEY, "watch");
-        putValue(ACCELERATOR_KEY, KeyStroke.getKeyStroke('W', Event.CTRL_MASK ));
+        putValue(ACCELERATOR_KEY, KeyStroke.getKeyStroke('W', Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() ));
         putValue(SMALL_ICON, WATCH_ICON);
         setEnabled(false);
     }

File: src/main/java/com/tagtraum/perf/gcviewer/action/Zoom.java
Patch:
@@ -23,7 +23,7 @@ public Zoom(final GCViewer gcViewer) {
         putValue(SHORT_DESCRIPTION, GCViewer.localStrings.getString("action_zoom_hint"));
         //putValue(Action.MNEMONIC_KEY, new Integer(localStrings.getString("main_frame_menuitem_mnemonic_export").charAt(0)));
         putValue(ACTION_COMMAND_KEY, "zoom");
-        //putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke('E', java.awt.Event.CTRL_MASK ));
+        //putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke('E', Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() ));
         setEnabled(false);
     }
 

File: src/main/java/com/tagtraum/perf/gcviewer/model/AbstractGCEvent.java
Patch:
@@ -20,7 +20,7 @@ public abstract class AbstractGCEvent<T extends AbstractGCEvent<T>> implements S
     private final Iterator<T> EMPTY_ITERATOR = Collections.EMPTY_LIST.iterator();
     private Date datestamp;
     private double timestamp;
-    private Type type = Type.GC;
+    private Type type = Type.UNDEFINED;
     private boolean tenuredDetail;
     private String typeAsString;
     protected List<T> details;
@@ -277,6 +277,8 @@ public String toString() {
             return rep;
         }
 
+        public static final Type UNDEFINED = new Type("undefined", Generation.YOUNG);
+
         // TODO: is jrockit GC really of type Generation.ALL or rather Generation.TENURED ?
         public static final Type JROCKIT_GC = new Type("jrockit.GC", Generation.TENURED);
         public static final Type JROCKIT_NURSERY_GC = new Type("jrockit.Nursery GC", Generation.YOUNG);

File: src/main/java/com/tagtraum/perf/gcviewer/imp/DataReaderSun1_6_0G1.java
Patch:
@@ -236,6 +236,9 @@ protected AbstractGCEvent parseLine(final String line, final ParsePosition pos)
                 final GCEvent event = new GCEvent();
                 event.setTimestamp(timestamp);
                 event.setType(type);
+                if (isTimestamp(line, pos)) {
+                    event.add(parseLine(line, pos));
+                }
                 if (event.getType().getPattern() == GcPattern.GC_MEMORY_PAUSE) {
                     setMemoryAndPauses((GCEvent)event, line, pos);
                 }

File: src/main/java/com/tagtraum/perf/gcviewer/model/AbstractGCEvent.java
Patch:
@@ -341,6 +341,8 @@ public String toString() {
         public static final Type G1_PARTIAL_INITIAL_MARK = new Type("GC pause (partial) (initial-mark)", "GC pause (partial) (initial-mark)", Generation.TENURED, Concurrency.SERIAL, GcPattern.GC_MEMORY_PAUSE);
         public static final Type G1_PARTIAL_INITIAL_MARK_TO_SPACE_OVERFLOW = new Type("GC pause (partial) (to-space overflow) (initial-mark)", "GC pause (partial) (to-space overflow) (initial-mark)", Generation.TENURED, Concurrency.SERIAL, GcPattern.GC_MEMORY_PAUSE);
         public static final Type G1_REMARK = new Type("GC remark", "GC remark", Generation.TENURED, Concurrency.SERIAL, GcPattern.GC_PAUSE, CollectionType.CONCURRENCY_HELPER);
+        // Java 7; detail event inside G1_REMARK
+        public static final Type G1_GC_REFPROC = new Type("GC ref-proc", "GC ref-proc", Generation.TENURED, Concurrency.SERIAL, GcPattern.GC_PAUSE, CollectionType.CONCURRENCY_HELPER);
         public static final Type G1_CLEANUP = new Type("GC cleanup", "GC cleanup", Generation.TENURED, Concurrency.SERIAL, GcPattern.GC_MEMORY_PAUSE, CollectionType.CONCURRENCY_HELPER);
         
         // G1 concurrent types

File: src/test/java/com/tagtraum/perf/gcviewer/imp/TestDataReaderSun1_4_0.java
Patch:
@@ -49,7 +49,7 @@ public void testParse1() throws Exception {
         event = (AbstractGCEvent) i.next();
         assertEquals(event, event6);
         
-        assertEquals("throughput", 65.680144, model.getThroughput(), 0.0000001);
+        assertEquals("throughput", 65.680128659, model.getThroughput(), 0.0000001);
     }
 
     public void testNoFullGC() throws Exception {

File: src/test/java/com/tagtraum/perf/gcviewer/imp/TestDataReaderSun1_5_0.java
Patch:
@@ -26,7 +26,7 @@ public void testCMSPrintGCDetails() throws Exception {
         GCModel model = reader.read();
         
         assertEquals("size", 515, model.size());
-        assertEquals("throughput", 88.275334, model.getThroughput(), 0.00000001);
+        assertEquals("throughput", 88.28044896, model.getThroughput(), 0.00000001);
         assertEquals("sum of pauses", model.getPause().getSum(), model.getFullGCPause().getSum() + model.getGCPause().getSum(), 0.0000001);
         assertEquals("total pause", 9.1337492, model.getPause().getSum(), 0.0000001);
         assertEquals("full gc pause", 5.1633541, model.getFullGCPause().getSum(), 0.00000001);
@@ -47,7 +47,7 @@ public void testCMSIncrementalPacing() throws Exception {
         GCModel model = reader.read();
 
         assertEquals("size", 810, model.size());
-        assertEquals("throughput", 94.155883322, model.getThroughput(), 0.00000001);
+        assertEquals("throughput", 94.17869828, model.getThroughput(), 0.00000001);
         assertEquals("total gc pause", 2.3410947, model.getPause().getSum(), 0.000000001);
         assertEquals("gc pause", 2.3410947, model.getGCPause().getSum(), 0.000000001);
         assertEquals("full gc paus", 0.0, model.getFullGCPause().getSum(), 0.01);
@@ -69,7 +69,7 @@ public void testCMSConcurrentModeFailure() throws Exception {
         GCModel model = reader.read();
         
         assertEquals("size", 3417, model.size());
-        assertEquals("throughput", 78.588803087, model.getThroughput(), 0.00000001);
+        assertEquals("throughput", 78.5579711577, model.getThroughput(), 0.00000001);
         assertEquals("gc pause", 181.8116798, model.getPause().getSum(), 0.000000001);
     }
 

File: src/test/java/com/tagtraum/perf/gcviewer/imp/TestDataReaderSun1_6_0G1.java
Patch:
@@ -25,9 +25,9 @@ public void testG1GcVerbose() throws Exception {
         GCModel model = reader.read();
         
         assertEquals("gc pause sum", 62.616796, model.getPause().getSum(), 0.000000001);
-        assertEquals("throughput", 47.9126598178, model.getThroughput(), 0.000000001);
+        assertEquals("throughput", 47.75795226, model.getThroughput(), 0.000000001);
         assertEquals("longest pause", 0.1581177, model.getPause().getMax(), 0.000001);
-        assertEquals("total runtime", 120.215, model.getRunningTime(), 0.000001);
+        assertEquals("total runtime", 119.859, model.getRunningTime(), 0.000001);
         assertEquals("number of errors", 2, handler.getCount());
         
         assertEquals("max interval", 0.211, model.getPauseInterval().getMax(), 0.000001);

File: src/main/java/com/tagtraum/perf/gcviewer/imp/DataReaderSun1_6_0.java
Patch:
@@ -53,7 +53,7 @@ public class DataReaderSun1_6_0 extends AbstractDataReaderSun {
     static {
         HEAP_STRINGS.add("def new generation"); // serial young collection -XX:+UseSerialGC
         HEAP_STRINGS.add("PSYoungGen"); // parallel young collection -XX:+UseParallelGC
-        HEAP_STRINGS.add("par new generation"); // parallel young (CMS)
+        HEAP_STRINGS.add("par new generation"); // parallel young (CMS / -XX:+UseParNewGC)
         HEAP_STRINGS.add("eden space");
         HEAP_STRINGS.add("from space");
         HEAP_STRINGS.add("to   space");
@@ -139,7 +139,7 @@ else if (beginningOfLine != null) {
                     }
                     else if (line.indexOf(HEAP_SIZING_START) >= 0) {
                         // the next few lines will be the sizing of the heap
-                        lineNumber = skipHeapSizes(in, lineNumber, HEAP_STRINGS);
+                        lineNumber = skipHeapSizes(in, parsePosition, lineNumber, HEAP_STRINGS);
                         continue;
                     }
                     model.add(parseLine(line, parsePosition));

File: src/main/java/com/tagtraum/perf/gcviewer/imp/DataReaderSun1_6_0G1.java
Patch:
@@ -142,7 +142,7 @@ else if (beginningOfLine != null) {
                         }
                         else if (line.indexOf(HEAP_SIZING_START) >= 0) {
                             // the next few lines will be the sizing of the heap
-                            lineNumber = skipHeapSizes(in, lineNumber, HEAP_STRINGS);
+                            lineNumber = skipHeapSizes(in, parsePosition, lineNumber, HEAP_STRINGS);
                             continue;
                         }
                         else if (line.indexOf("Times") < 0) {

File: src/main/java/com/tagtraum/perf/gcviewer/GCDocument.java
Patch:
@@ -270,7 +270,7 @@ public void relayout() {
             getContentPane().add(new JPanel(), constraints);
         }
         scaleModelChart();
-        revalidate();
+        invalidate();
     }
 
     private void lockChartsToOneScrollbar(final JViewport viewport, final boolean lastMaximizedChartPanelView, final ModelChartImpl modelChart, MasterViewPortChangeListener masterViewPortChangeListener) {

File: src/main/java/com/tagtraum/perf/gcviewer/AbstractGCEvent.java
Patch:
@@ -273,8 +273,9 @@ public String toString() {
         // Parnew (promotion failed)
         public static final Type PAR_NEW_PROMOTION_FAILED = new Type("ParNew (promotion failed)", "ParNew (promotion failed):", Generation.YOUNG, Concurrency.SERIAL);
         
-        // CMS (concurrent mode failure)
+        // CMS (concurrent mode failure / interrupted)
         public static final Type CMS_CMF = new Type("CMS (concurrent mode failure)", "CMS (concurrent mode failure):", Generation.TENURED, Concurrency.SERIAL);
+        public static final Type CMS_CMI = new Type("CMS (concurrent mode interrupted)", "CMS (concurrent mode interrupted):", Generation.TENURED, Concurrency.SERIAL);
 
         // CMS (Concurrent Mark Sweep) Event Types
         public static final Type CMS_CONCURRENT_MARK_START = new Type("CMS-concurrent-mark-start", "CMS-concurrent-mark-start", Generation.TENURED, Concurrency.CONCURRENT, GcPattern.GC);

File: src/test/java/com/tagtraum/perf/gcviewer/imp/TestDataReaderSun1_6_0G1.java
Patch:
@@ -29,7 +29,7 @@ public void testG1GcVerbose() throws Exception {
         assertEquals("throughput", 47.93401098, model.getThroughput(), 0.000000001);
         assertEquals("longest pause", 0.1581177, model.getPause().getMax(), 0.000001);
         assertEquals("total runtime", 120.215, model.getRunningTime(), 0.000001);
-        assertEquals("number of errors", 8, handler.getCount());
+        assertEquals("number of errors", 6, handler.getCount());
         
         assertEquals("max interval", 0.211, model.getPauseInterval().getMax(), 0.000001);
         assertEquals("avg interval", 0.048291297, model.getPauseInterval().average(), 0.0000001);

File: src/main/java/com/tagtraum/perf/gcviewer/ChartPanelView.java
Patch:
@@ -96,7 +96,7 @@ private GCModel loadModel(final URL url) throws IOException {
             final DataReader reader = factory.getDataReader(in);
             final GCModel model = reader.read();
             model.setURL(url);
-            if (textAreaLogHandler.hasErrors()) {
+            if (textAreaLogHandler.hasErrors() && !gcDocument.isWatched()) {
                 // show error dialog
                 final JPanel panel = new JPanel(new BorderLayout());
                 final JLabel messageLabel = new JLabel(new MessageFormat(localStrings.getString("datareader_parseerror_dialog_message")).format(new Object[]{textAreaLogHandler.getErrorCount(), url}));

File: src/main/java/com/tagtraum/perf/gcviewer/imp/DataReaderSun1_6_0.java
Patch:
@@ -210,8 +210,7 @@ protected AbstractGCEvent parseLine(final String line, final ParsePosition pos)
             }
             return ae;
         } catch (RuntimeException rte) {
-            if (LOG.isLoggable(Level.WARNING)) LOG.log(Level.WARNING, rte.toString() + " while parsing line: " + line, rte);
-            throw new ParseException("Error parsing entry: " + line + ", " + rte.toString());
+            throw new ParseException("Error parsing entry (" + rte.toString() + ")", line, pos);
         }
     }
 

File: src/main/java/com/tagtraum/perf/gcviewer/GCModel.java
Patch:
@@ -321,7 +321,7 @@ public void add(final AbstractGCEvent abstractEvent) {
             if (lastPauseTimeStamp > 0) {
                 // JRockit sometimes has special timestamps that seem to go back in time,
                 // omit them here
-                if (event.getTimestamp() - lastPauseTimeStamp > 0) {
+                if (event.getTimestamp() - lastPauseTimeStamp >= 0) {
                     pauseInterval.add(event.getTimestamp() - lastPauseTimeStamp);
                 }
             }

File: src/main/java/com/tagtraum/perf/gcviewer/imp/AbstractDataReaderSun.java
Patch:
@@ -46,7 +46,7 @@ else if ('G' == memUnit) {
     	}
     	else {
     		if (LOG.isLoggable(Level.WARNING)) {
-    			LOG.warning("unknown memoryunit: " + memUnit + " in line " + line);
+    			LOG.warning("unknown memoryunit '" + memUnit + "' in line " + line);
     		}
     		return 1;
     	}
@@ -165,7 +165,7 @@ else if (line.indexOf("icms_dc=", pos.getIndex()) != -1) {
 	                else
 	                    pos.setIndex(closingBracket + 1);
 	            } else {
-	                LOG.severe("Hm... something went wrong here... (line='" + line + "'");
+	                LOG.severe("Hm... something went wrong here... (line " + pos.getLineNumber() + "='" + line + "'");
 	            }
 	        }
     	}

File: src/main/java/com/tagtraum/perf/gcviewer/imp/DataReaderSun1_4_0.java
Patch:
@@ -3,7 +3,6 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.UnsupportedEncodingException;
-import java.text.ParsePosition;
 import java.util.HashSet;
 import java.util.Set;
 import java.util.logging.Level;
@@ -14,6 +13,7 @@
 import com.tagtraum.perf.gcviewer.DataReader;
 import com.tagtraum.perf.gcviewer.GCEvent;
 import com.tagtraum.perf.gcviewer.GCModel;
+import com.tagtraum.perf.gcviewer.util.ParsePosition;
 
 /**
  * Parses -verbose:gc output from Sun JDK 1.4.0.

File: src/main/java/com/tagtraum/perf/gcviewer/imp/DataReaderSun1_5_0.java
Patch:
@@ -2,14 +2,14 @@
 
 import java.io.InputStream;
 import java.io.UnsupportedEncodingException;
-import java.text.ParsePosition;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
 import com.tagtraum.perf.gcviewer.AbstractGCEvent;
 import com.tagtraum.perf.gcviewer.AbstractGCEvent.Concurrency;
 import com.tagtraum.perf.gcviewer.ConcurrentGCEvent;
 import com.tagtraum.perf.gcviewer.GCEvent;
+import com.tagtraum.perf.gcviewer.util.ParsePosition;
 
 /**
  * Parses -Xloggc: output from Sun JDK 1.5.0.

File: src/main/java/com/tagtraum/perf/gcviewer/imp/DataReaderSun1_6_0.java
Patch:
@@ -3,7 +3,6 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.UnsupportedEncodingException;
-import java.text.ParsePosition;
 import java.text.SimpleDateFormat;
 import java.util.Date;
 import java.util.HashSet;
@@ -19,6 +18,7 @@
 import com.tagtraum.perf.gcviewer.ConcurrentGCEvent;
 import com.tagtraum.perf.gcviewer.GCEvent;
 import com.tagtraum.perf.gcviewer.GCModel;
+import com.tagtraum.perf.gcviewer.util.ParsePosition;
 
 public class DataReaderSun1_6_0 extends DataReaderSun1_5_0 {
 

File: src/main/java/com/tagtraum/perf/gcviewer/imp/DataReaderSun1_6_0G1.java
Patch:
@@ -3,7 +3,6 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.UnsupportedEncodingException;
-import java.text.ParsePosition;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import java.util.regex.Matcher;
@@ -16,6 +15,7 @@
 import com.tagtraum.perf.gcviewer.DataReader;
 import com.tagtraum.perf.gcviewer.GCEvent;
 import com.tagtraum.perf.gcviewer.GCModel;
+import com.tagtraum.perf.gcviewer.util.ParsePosition;
 
 public class DataReaderSun1_6_0G1 extends AbstractDataReaderSun implements DataReader {
 
@@ -114,7 +114,7 @@ protected AbstractGCEvent parseLine(final String line, final ParsePosition pos)
             }
             return ae;
         } catch (RuntimeException rte) {
-            throw new ParseException("Error parsing entry: " + line + ", " + rte.toString());
+            throw new ParseException(rte.toString(), line, pos);
         }
     }
 	

File: src/main/java/com/tagtraum/perf/gcviewer/imp/DataReaderSun1_6_0G1_Detailed.java
Patch:
@@ -3,7 +3,6 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.UnsupportedEncodingException;
-import java.text.ParsePosition;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import java.util.regex.Matcher;
@@ -14,6 +13,7 @@
 import com.tagtraum.perf.gcviewer.G1GcEvent;
 import com.tagtraum.perf.gcviewer.GCEvent;
 import com.tagtraum.perf.gcviewer.GCModel;
+import com.tagtraum.perf.gcviewer.util.ParsePosition;
 
 public class DataReaderSun1_6_0G1_Detailed extends DataReaderSun1_6_0G1 {
 
@@ -51,6 +51,7 @@ public GCModel read() throws IOException {
             int lineNumber = 0;
             while ((line = in.readLine()) != null) {
                 ++lineNumber;
+                parsePosition.setLineNumber(lineNumber);
                 // the following case is special for -XX:+PrintGCDetails and must be treated
                 // different from the other cases occuring in G1 standard mode
                 // 0.356: [GC pause (young), 0.00219944 secs] -> GC_PAUSE pattern but GC_MEMORY_PAUSE 

File: src/main/java/com/tagtraum/perf/gcviewer/imp/AbstractDataReaderSun.java
Patch:
@@ -4,14 +4,14 @@
 import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.io.UnsupportedEncodingException;
-import java.text.ParsePosition;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
 import com.tagtraum.perf.gcviewer.AbstractGCEvent;
 import com.tagtraum.perf.gcviewer.DataReader;
 import com.tagtraum.perf.gcviewer.GCEvent;
 import com.tagtraum.perf.gcviewer.util.NumberParser;
+import com.tagtraum.perf.gcviewer.util.ParsePosition;
 
 /**
  *

File: src/main/java/com/tagtraum/perf/gcviewer/imp/DataReaderSun1_4_0.java
Patch:
@@ -3,7 +3,6 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.UnsupportedEncodingException;
-import java.text.ParsePosition;
 import java.util.HashSet;
 import java.util.Set;
 import java.util.logging.Level;
@@ -14,6 +13,7 @@
 import com.tagtraum.perf.gcviewer.DataReader;
 import com.tagtraum.perf.gcviewer.GCEvent;
 import com.tagtraum.perf.gcviewer.GCModel;
+import com.tagtraum.perf.gcviewer.util.ParsePosition;
 
 /**
  * Parses -verbose:gc output from Sun JDK 1.4.0.

File: src/main/java/com/tagtraum/perf/gcviewer/imp/DataReaderSun1_5_0.java
Patch:
@@ -2,14 +2,14 @@
 
 import java.io.InputStream;
 import java.io.UnsupportedEncodingException;
-import java.text.ParsePosition;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
 import com.tagtraum.perf.gcviewer.AbstractGCEvent;
 import com.tagtraum.perf.gcviewer.AbstractGCEvent.Concurrency;
 import com.tagtraum.perf.gcviewer.ConcurrentGCEvent;
 import com.tagtraum.perf.gcviewer.GCEvent;
+import com.tagtraum.perf.gcviewer.util.ParsePosition;
 
 /**
  * Parses -Xloggc: output from Sun JDK 1.5.0.

File: src/main/java/com/tagtraum/perf/gcviewer/imp/DataReaderSun1_6_0.java
Patch:
@@ -3,7 +3,6 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.UnsupportedEncodingException;
-import java.text.ParsePosition;
 import java.text.SimpleDateFormat;
 import java.util.Date;
 import java.util.HashSet;
@@ -19,6 +18,7 @@
 import com.tagtraum.perf.gcviewer.ConcurrentGCEvent;
 import com.tagtraum.perf.gcviewer.GCEvent;
 import com.tagtraum.perf.gcviewer.GCModel;
+import com.tagtraum.perf.gcviewer.util.ParsePosition;
 
 public class DataReaderSun1_6_0 extends DataReaderSun1_5_0 {
 

File: src/main/java/com/tagtraum/perf/gcviewer/imp/DataReaderSun1_6_0G1.java
Patch:
@@ -3,7 +3,6 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.UnsupportedEncodingException;
-import java.text.ParsePosition;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import java.util.regex.Matcher;
@@ -16,6 +15,7 @@
 import com.tagtraum.perf.gcviewer.DataReader;
 import com.tagtraum.perf.gcviewer.GCEvent;
 import com.tagtraum.perf.gcviewer.GCModel;
+import com.tagtraum.perf.gcviewer.util.ParsePosition;
 
 public class DataReaderSun1_6_0G1 extends AbstractDataReaderSun implements DataReader {
 
@@ -114,7 +114,7 @@ protected AbstractGCEvent parseLine(final String line, final ParsePosition pos)
             }
             return ae;
         } catch (RuntimeException rte) {
-            throw new ParseException("Error parsing entry: " + line + ", " + rte.toString());
+            throw new ParseException(rte.toString(), line, pos);
         }
     }
 	

File: src/main/java/com/tagtraum/perf/gcviewer/imp/DataReaderSun1_6_0G1_Detailed.java
Patch:
@@ -3,7 +3,6 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.UnsupportedEncodingException;
-import java.text.ParsePosition;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import java.util.regex.Matcher;
@@ -14,6 +13,7 @@
 import com.tagtraum.perf.gcviewer.G1GcEvent;
 import com.tagtraum.perf.gcviewer.GCEvent;
 import com.tagtraum.perf.gcviewer.GCModel;
+import com.tagtraum.perf.gcviewer.util.ParsePosition;
 
 public class DataReaderSun1_6_0G1_Detailed extends DataReaderSun1_6_0G1 {
 
@@ -51,6 +51,7 @@ public GCModel read() throws IOException {
             int lineNumber = 0;
             while ((line = in.readLine()) != null) {
                 ++lineNumber;
+                parsePosition.setLineNumber(lineNumber);
                 // the following case is special for -XX:+PrintGCDetails and must be treated
                 // different from the other cases occuring in G1 standard mode
                 // 0.356: [GC pause (young), 0.00219944 secs] -> GC_PAUSE pattern but GC_MEMORY_PAUSE 

