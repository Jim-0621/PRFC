File: src/main/java/de/neemann/digital/analyse/CSVImporter.java
Patch:
@@ -136,10 +136,10 @@ else if (e.equals("x"))
     }
 
     private static final class ColHolder {
-        int rCol;
-        int val;
+        private final int rCol;
+        private final int val;
 
-        public ColHolder(int rCol, int val) {
+        private ColHolder(int rCol, int val) {
             this.rCol = rCol;
             this.val = val;
         }

File: src/test/java/de/neemann/digital/integration/TestInGUI.java
Patch:
@@ -963,7 +963,7 @@ public void testRomDialog() {
                 .press("RIGHT", 1)
                 .press("DOWN", 1)
                 .press("ENTER", 1)
-                .press("control TAB", 8)
+                .press("control TAB", 7)
                 .press("RIGHT", 1)
                 .add(new GuiTester.SetFocusTo<>(AttributeDialog.class,
                         b -> b instanceof JButton && Lang.get("btn_edit").equals(((JButton) b).getText())))

File: src/main/java/de/neemann/digital/analyse/CycleDetector.java
Patch:
@@ -48,7 +48,7 @@ public static void checkForCycles(ArrayList<Signal> values) throws BacktrackExce
             traverse(root, s.getValue(), nodes, visited);
         }
 
-        // Turned of for now because if it is used you can build circuits with a state
+        // Turned off for now because if it is used you can build circuits with a cycle
         // which are not detected as such.
         //removeSwitchCycles(nodes.values());
 

File: src/main/java/de/neemann/digital/analyse/ModelAnalyser.java
Patch:
@@ -324,7 +324,7 @@ public int calcMaxPathLen() throws PinException, BacktrackException, AnalyseExce
         if (!Main.isExperimentalMode() && !modelContainsSwitches())
             CycleDetector.checkForCycles(inputs);
 
-        DependencyAnalyser da = new DependencyAnalyser(this);
+        PathLenAnalyser da = new PathLenAnalyser(this);
         return da.getMaxPathLen();
     }
 

File: src/main/java/de/neemann/digital/gui/components/CircuitComponent.java
Patch:
@@ -1460,7 +1460,7 @@ private VisualElement getActualVisualElement() {
             mouseNormal.activate();
 
         VisualElement ve = null;
-        if (activeMouseController instanceof MouseControllerNormal) {
+        if (activeMouseController instanceof MouseControllerNormal && lastMousePos != null) {
             Vector pos = getPosVector(lastMousePos.x, lastMousePos.y);
             ve = getCircuit().getElementAt(pos);
             if (ve == null)

File: src/main/java/de/neemann/digital/gui/components/CircuitComponent.java
Patch:
@@ -1930,9 +1930,9 @@ private boolean needsMinRaster(VisualElement element) {
         if (getCircuit().getAttributes().get(Keys.SHAPE_TYPE) != CustomCircuitShapeType.MINIMIZED)
             return false;
 
-        return element.equalsDescription(In.DESCRIPTION) ||
-                element.equalsDescription(Out.DESCRIPTION) ||
-                element.equalsDescription(Clock.DESCRIPTION);
+        return element.equalsDescription(In.DESCRIPTION)
+                || element.equalsDescription(Out.DESCRIPTION)
+                || element.equalsDescription(Clock.DESCRIPTION);
     }
 
     private void insertWires(VisualElement element) {

File: src/main/java/de/neemann/digital/testing/TestExecutor.java
Patch:
@@ -234,7 +234,7 @@ private <LL extends LineListener> LL execute(LL lineListener, boolean closeModel
             return lineListener;
         } catch (RuntimeException re) {
             errorOccurred = true;
-            throw new TestingDataException(Lang.get("err_whileExecutingTests_N0", label, re));
+            throw new TestingDataException(Lang.get("err_whileExecutingTests_N0", label), re);
         } finally {
             if (closeModel)
                 model.close();

File: src/main/java/de/neemann/digital/gui/components/DataEditor.java
Patch:
@@ -425,7 +425,9 @@ private MyRenderer(ValueFormatter intFormat, int bits) {
         @Override
         public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
             super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
-            long val = ((Number) value).longValue();
+            long val = 0;
+            if (value != null)
+                val = ((Number) value).longValue();
             setText(intFormat.formatToView(new Value(val, bits)));
             return this;
         }

File: src/main/java/de/neemann/digital/core/io/Probe.java
Patch:
@@ -78,7 +78,7 @@ private static final class Counter implements Observer {
         private final ObservableValue in;
         private final ObservableValue value;
         private final ProbeMode mode;
-        private boolean last = false;
+        private boolean last;
         private long counter;
 
         private Counter(String label, ObservableValue value, ProbeMode mode) {

File: src/main/java/de/neemann/digital/core/io/Probe.java
Patch:
@@ -83,6 +83,7 @@ private static final class Counter implements Observer {
 
         private Counter(String label, ObservableValue value, ProbeMode mode) {
             this.in = value;
+            this.last = in.getBool();
             this.value = new ObservableValue(label, 64);
             value.addObserver(this);
             this.mode = mode;

File: src/main/java/de/neemann/digital/draw/library/CustomElement.java
Patch:
@@ -35,6 +35,7 @@ public CustomElement(ElementTypeDescriptionCustom descriptionCustom) {
      * Gets a {@link ModelCreator} of this circuit.
      * Every time this method is called a new {@link ModelCreator} is created.
      *
+     * @param library                 the element library
      * @param subName                 name of the circuit, used to name unique elements
      * @param depth                   recursion depth, used to detect a circuit which contains itself
      * @param errorVisualElement      visual element used for error indicating
@@ -44,8 +45,8 @@ public CustomElement(ElementTypeDescriptionCustom descriptionCustom) {
      * @throws NodeException            NodeException
      * @throws ElementNotFoundException ElementNotFoundException
      */
-    public ModelCreator getModelCreator(String subName, int depth, VisualElement errorVisualElement, VisualElement containingVisualElement) throws PinException, NodeException, ElementNotFoundException {
-        return descriptionCustom.getModelCreator(subName, depth, errorVisualElement, containingVisualElement);
+    public ModelCreator getModelCreator(LibraryInterface library, String subName, int depth, VisualElement errorVisualElement, VisualElement containingVisualElement) throws PinException, NodeException, ElementNotFoundException {
+        return descriptionCustom.getModelCreator(library, subName, depth, errorVisualElement, containingVisualElement);
     }
 
     @Override

File: src/main/java/de/neemann/digital/draw/library/ElementTypeDescriptionCustom.java
Patch:
@@ -126,7 +126,7 @@ public String getDescription(ElementAttributes elementAttributes) {
      * @throws NodeException            NodeException
      * @throws ElementNotFoundException ElementNotFoundException
      */
-    ModelCreator getModelCreator(String subName, int depth, VisualElement errorVisualElement, VisualElement containingVisualElement) throws PinException, NodeException, ElementNotFoundException {
+    ModelCreator getModelCreator(LibraryInterface library, String subName, int depth, VisualElement errorVisualElement, VisualElement containingVisualElement) throws PinException, NodeException, ElementNotFoundException {
         if (netList == null)
             netList = new NetList(circuit);
 

File: src/main/java/de/neemann/digital/draw/model/ModelCreator.java
Patch:
@@ -166,7 +166,7 @@ public ModelCreator(Circuit circuit, LibraryInterface library, boolean isNestedC
                 if (me.getElement() instanceof CustomElement) {        // at first look for custom elements
 
                     CustomElement ce = (CustomElement) me.getElement();
-                    ModelCreator child = ce.getModelCreator(
+                    ModelCreator child = ce.getModelCreator(library,
                             combineNames(subName, me.getVisualElement().getElementAttributes().getLabel()),
                             depth + 1,
                             containingVisualElement != null ? containingVisualElement : me.getVisualElement(),

File: src/main/java/de/neemann/digital/gui/Main.java
Patch:
@@ -1769,15 +1769,17 @@ public void setStatus(String message) {
     private class ModelClosedObserver implements ModelStateObserverTyped {
 
         private boolean closedByRestart = false;
+        private boolean errorDialogIsOpened = true;
 
         @Override
         public void handleEvent(ModelEvent event) {
             switch (event.getType()) {
                 case ERROR_OCCURRED:
                     SwingUtilities.invokeLater(() -> showError(Lang.get("msg_errorCalculatingStep"), event.getCause()));
+                    errorDialogIsOpened = true;
                     break;
                 case CLOSED:
-                    if (!closedByRestart)
+                    if (!errorDialogIsOpened && !closedByRestart)
                         SwingUtilities.invokeLater(Main.this::ensureModelIsStopped);
                     break;
             }

File: src/main/java/de/neemann/digital/analyse/ModelAnalyser.java
Patch:
@@ -54,7 +54,7 @@ public ModelAnalyser(Model model) throws AnalyseException {
         modelAnalyzerInfo.setInOut(inputs, outputs);
 
         for (Node n : model)
-            if (n.hasState() && !(n instanceof FlipflopD))
+            if (n.hasState() && !(n.getClass() == FlipflopD.class))
                 throw new AnalyseException(Lang.get("err_cannotAnalyse_N", n.getClass().getSimpleName()));
 
         int i = 0;

File: src/main/java/de/neemann/digital/testing/parser/functions/Random.java
Patch:
@@ -38,8 +38,8 @@ public void setSeed(long seed) {
 
     @Override
     public long calcValue(Context c, ArrayList<Expression> args) throws ParserException {
-        final long value = Math.abs(rnd.nextLong());
+        final long value = rnd.nextLong();
         final long max = args.get(0).value(c);
-        return value % max;
+        return Long.remainderUnsigned(value, max);
     }
 }

File: src/main/java/de/neemann/digital/testing/parser/functions/Random.java
Patch:
@@ -38,6 +38,8 @@ public void setSeed(long seed) {
 
     @Override
     public long calcValue(Context c, ArrayList<Expression> args) throws ParserException {
-        return (long) (rnd.nextDouble() * args.get(0).value(c));
+        final long value = Math.abs(rnd.nextLong());
+        final long max = args.get(0).value(c);
+        return value % max;
     }
 }

File: src/test/java/de/neemann/digital/hdl/verilog2/VerilogSimulatorTest.java
Patch:
@@ -62,7 +62,7 @@ public void testInSimulator2() throws Exception {
         File examples = new File(Resources.getRoot(), "/dig/hdl");
         try {
             int tested = new FileScanner(this::checkVerilogExport).noOutput().scan(examples);
-            assertEquals(51, tested);
+            assertEquals(53, tested);
         } catch (FileScanner.SkipAllException e) {
             // if iverilog is not installed its also ok
         }

File: src/test/java/de/neemann/digital/hdl/vhdl2/VHDLSimulatorTest.java
Patch:
@@ -55,7 +55,7 @@ public void testInSimulator2() throws Exception {
         File examples = new File(Resources.getRoot(), "/dig/hdl");
         try {
             int tested = new FileScanner(this::checkVHDLExport).noOutput().scan(examples);
-            assertEquals(51, tested);
+            assertEquals(53, tested);
         } catch (FileScanner.SkipAllException e) {
             // if ghdl is not installed its also ok
         }

File: src/main/java/de/neemann/digital/draw/shapes/InputShape.java
Patch:
@@ -161,7 +161,7 @@ public void clicked(CircuitComponent cc, Point pos, IOState ioState, Element ele
             } else {
                 if (dialog == null || !dialog.isVisible()) {
                     Model model = ((In) element).getModel();
-                    dialog = new SingleValueDialog(model.getWindowPosManager().getMainFrame(), pos, label, value, isHighZ, model)
+                    dialog = new SingleValueDialog(model.getWindowPosManager().getMainFrame(), pos, label, value, isHighZ, model, modelSync)
                             .setSelectedFormat(formatter);
                     dialog.setVisible(true);
                 } else

File: src/main/java/de/neemann/digital/gui/components/SingleValueDialog.java
Patch:
@@ -83,12 +83,13 @@ private static Format findFormat(ValueFormatter f) {
      * @param value         the value to edit
      * @param supportsHighZ true is high z is supported
      * @param model         the model
+     * @param syncAccess    used to apply the value to the running model
      */
-    public SingleValueDialog(JFrame parent, Point pos, String label, ObservableValue value, boolean supportsHighZ, Model model) {
+    public SingleValueDialog(JFrame parent, Point pos, String label, ObservableValue value, boolean supportsHighZ, Model model, SyncAccess syncAccess) {
         super(parent, Lang.get("win_valueInputTitle_N", label), false);
         setDefaultCloseOperation(DISPOSE_ON_CLOSE);
         this.value = value;
-        this.syncAccess = model;
+        this.syncAccess = syncAccess;
 
         editValue = value.getCopy();
         this.supportsHighZ = supportsHighZ;

File: src/main/java/de/neemann/digital/draw/library/ElementLibrary.java
Patch:
@@ -411,8 +411,7 @@ public boolean isFileAccessible(File file) {
 
         try {
             String root = rootLibraryPath.getCanonicalPath();
-            String path = file.getParentFile().getCanonicalPath();
-            return path.startsWith(root);
+            return file.getParentFile().getCanonicalFile().toPath().startsWith(root);
         } catch (IOException e) {
             return false;
         }

File: src/main/java/de/neemann/digital/gui/components/BehavioralFixtureCreator.java
Patch:
@@ -124,15 +124,14 @@ private void addValue(StringBuilder testCase, Signal s) {
     }
 
     private void createTestCase() {
+        dispose();
         try {
             VisualElement tc = new VisualElement(TestCaseElement.DESCRIPTION.getName())
                     .setShapeFactory(shapeFactory)
                     .setAttribute(Keys.TESTDATA, new TestCaseDescription(testCase.toString()));
-            main.getCircuitComponent().setPartToInsert(tc);
+            SwingUtilities.invokeLater(() -> main.getCircuitComponent().setPartToInsert(tc));
         } catch (IOException | ParserException e) {
             SwingUtilities.invokeLater(new ErrorMessage(Lang.get("msg_errorCreatingTestCase")).addCause(e));
-        } finally {
-            dispose();
         }
     }
 

File: src/main/java/de/neemann/gui/InfoDialog.java
Patch:
@@ -226,7 +226,7 @@ private void createInfoString(StringBuilder sb) {
             p = path.lastIndexOf('/');
             sb.append("<p>");
             sb.append(path.substring(p + 1)).append("<br/>");
-            sb.append("Build git-Revision").append(": ");
+            sb.append("Build Git-Revision").append(": ");
             sb.append(get(REVISION)).append("<br/>");
             sb.append("Build Time").append(": ");
             sb.append(get(TIME)).append("<br/></p>");

File: src/main/java/de/neemann/digital/gui/components/ROMEditorDialog.java
Patch:
@@ -259,7 +259,7 @@ private void sort() {
         }
 
         public void delete(int i) {
-            romlist.get(i).data = new DataField(0);
+            romlist.get(i).state = RomHolder.State.noData;
             fireChanged(i);
         }
 

File: src/main/java/de/neemann/digital/gui/Settings.java
Patch:
@@ -61,6 +61,8 @@ private static List<Key> createKeyList() {
         intList.add(Keys.SETTINGS_MAC_MOUSE);
         intList.add(Keys.SETTINGS_USE_EQUALS_KEY);
         intList.add(Keys.SETTINGS_SHOW_TUNNEL_RENAME_DIALOG);
+        intList.add(Keys.SETTINGS_OPEN_REMOTE_PORT);
+        intList.add(Keys.SETTINGS_REMOTE_PORT);
 
         return Collections.unmodifiableList(intList);
     }

File: src/main/java/de/neemann/digital/gui/components/DataEditor.java
Patch:
@@ -83,7 +83,9 @@ public DataEditor(Component parent, DataField dataField, int dataBits, int addrB
         int tableWidth = 0;
         MyTableModel dm = new MyTableModel(this.localDataField, cols, rows, modelSync);
         table = new JTable(dm);
-        int widthOfZero = table.getFontMetrics(table.getFont()).stringWidth("00000000") / 8;
+        final FontMetrics fontMetrics = table.getFontMetrics(table.getFont());
+        table.setRowHeight(fontMetrics.getHeight() * 9 / 8);
+        int widthOfZero = fontMetrics.stringWidth("00000000") / 8;
         int widthOfData = widthOfZero * (dataFormat.strLen(dataBits) + 1);
         for (int c = 1; c < table.getColumnModel().getColumnCount(); c++) {
             tableWidth += widthOfData;

File: src/test/java/de/neemann/digital/integration/TestExamples.java
Patch:
@@ -41,7 +41,7 @@ public class TestExamples extends TestCase {
     public void testDistExamples() throws Exception {
         File examples = new File(Resources.getRoot().getParentFile().getParentFile(), "/main/dig");
         assertEquals(324, new FileScanner(this::check).scan(examples));
-        assertEquals(514, testCasesInFiles);
+        assertEquals(515, testCasesInFiles);
     }
 
     /**

File: src/test/java/de/neemann/digital/integration/TestInGUI.java
Patch:
@@ -958,7 +958,7 @@ public void testRomDialog() {
                 .press("RIGHT", 1)
                 .press("DOWN", 1)
                 .press("ENTER", 1)
-                .press("control TAB", 7)
+                .press("control TAB", 8)
                 .press("RIGHT", 1)
                 .add(new GuiTester.SetFocusTo<>(AttributeDialog.class,
                         b -> b instanceof JButton && Lang.get("btn_edit").equals(((JButton) b).getText())))

File: src/main/java/de/neemann/digital/testing/TestResult.java
Patch:
@@ -106,7 +106,7 @@ public boolean isErrorOccurred() {
     public int failedPercent() {
         if (passedCount == 0)
             return 100;
-        int p = 100 * failedCount / passedCount;
+        int p = (100 * failedCount) / (failedCount + passedCount);
         if (p == 0 && failedCount > 0)
             p = 1;
         return p;

File: src/test/java/de/neemann/digital/testing/TestResultTest.java
Patch:
@@ -66,6 +66,8 @@ public void testResultError() throws Exception {
         assertEquals(true, ((MatchedValue) valueTable.getValue(1, 2)).isPassed());
         assertEquals(true, ((MatchedValue) valueTable.getValue(2, 2)).isPassed());
         assertEquals(false, ((MatchedValue) valueTable.getValue(3, 2)).isPassed());
+
+        assertEquals(25, tr.failedPercent());
     }
 
     public void testResultDontCare() throws Exception {

File: src/test/java/de/neemann/digital/integration/TestExamples.java
Patch:
@@ -40,7 +40,7 @@ public class TestExamples extends TestCase {
      */
     public void testDistExamples() throws Exception {
         File examples = new File(Resources.getRoot().getParentFile().getParentFile(), "/main/dig");
-        assertEquals(323, new FileScanner(this::check).scan(examples));
+        assertEquals(324, new FileScanner(this::check).scan(examples));
         assertEquals(514, testCasesInFiles);
     }
 

File: src/test/java/de/neemann/digital/integration/TestExamples.java
Patch:
@@ -40,7 +40,7 @@ public class TestExamples extends TestCase {
      */
     public void testDistExamples() throws Exception {
         File examples = new File(Resources.getRoot().getParentFile().getParentFile(), "/main/dig");
-        assertEquals(319, new FileScanner(this::check).scan(examples));
+        assertEquals(320, new FileScanner(this::check).scan(examples));
         assertEquals(511, testCasesInFiles);
     }
 

File: src/main/java/de/neemann/digital/core/element/Keys.java
Patch:
@@ -522,7 +522,7 @@ private Keys() {
      * enables the MAC mouse mode
      */
     public static final Key<Boolean> SETTINGS_MAC_MOUSE
-            = new Key<>("macMouse", Screen.isMac()).setRequiresRestart().setSecondary();
+            = new Key<>("macMouse", false).setRequiresRestart().setSecondary();
 
     /**
      * enables tunnel rename dialog

File: src/test/java/de/neemann/digital/draw/graphics/text/formatter/LaTeXFormatterTest.java
Patch:
@@ -44,10 +44,10 @@ public void testSumProd() throws ParseException {
     }
 
     public void testVeeWedge() throws ParseException {
-        assertEquals("A $\\vee$ B", LaTeXFormatter.format(new Parser("A \\vee B").parse()));
+        assertEquals("A $\\vee$ B", LaTeXFormatter.format(new Parser("A \\vee  B").parse()));
         assertEquals("A $\\vee$ B", LaTeXFormatter.format(new Parser("A ∨ B").parse()));
         assertEquals("A$\\vee$B", LaTeXFormatter.format(new Parser("A∨B").parse()));
-        assertEquals("$A \\wedge  B$", LaTeXFormatter.format(new Parser("$A \\wedge B$").parse()));
+        assertEquals("$A \\wedge B$", LaTeXFormatter.format(new Parser("$A \\wedge B$").parse()));
         assertEquals("$A\\wedge B$", LaTeXFormatter.format(new Parser("$A\\wedge{}B$").parse()));
     }
 }

File: src/main/java/de/neemann/digital/draw/shapes/GenericShape.java
Patch:
@@ -35,12 +35,12 @@ public class GenericShape implements Shape {
     private int width;
     private final boolean symmetric;
     private final String label;
+    private final boolean showPinLabels;
 
     private boolean invert = false;
     private Color color = Color.WHITE;
 
     private Pins pins;
-    private boolean showPinLabels;
     private InverterConfig inverterConfig;
     private int topBottomBorder = SIZE2;
 

File: src/test/java/de/neemann/digital/integration/TestInGUI.java
Patch:
@@ -463,8 +463,9 @@ public void testHardware() {
                 .press("ENTER")
                 .press("control typed a")
                 .typeTempFile("test")
-                .press("ENTER")
-                .delay(600)
+                .press("TAB", 2)
+                .press("SPACE")
+                .delay(1000)
                 .add(new GuiTester.WaitFor(4000, () -> {
                     Window activeWindow = FocusManager.getCurrentManager().getActiveWindow();
                     return !(activeWindow instanceof Main || activeWindow instanceof TableDialog);

File: src/main/java/de/neemann/digital/gui/components/CircuitComponent.java
Patch:
@@ -82,6 +82,7 @@ public class CircuitComponent extends JComponent implements ChangedListener, Lib
         ATTR_LIST.add(Keys.SHOW_DATA_TABLE);
         ATTR_LIST.add(Keys.SHOW_DATA_GRAPH);
         ATTR_LIST.add(Keys.SHOW_DATA_GRAPH_MICRO);
+        ATTR_LIST.add(Keys.SETTINGS_MAX_STEP_COUNT);
         ATTR_LIST.add(Keys.PRELOAD_PROGRAM);
         ATTR_LIST.add(Keys.PROGRAM_TO_PRELOAD);
         ATTR_LIST.add(Keys.IS_GENERIC);

File: src/main/java/de/neemann/digital/gui/Main.java
Patch:
@@ -2221,12 +2221,12 @@ public interface AdvanceSimulator {
         void advance(Model model) throws Exception;
     }
 
-    private static class RunToBreakRunnable implements Runnable {
+    private static final class RunToBreakRunnable implements Runnable {
         private final Model model;
         private final JLabel statusLabel;
         private int steps;
 
-        public RunToBreakRunnable(Model model, JLabel statusLabel) {
+        private RunToBreakRunnable(Model model, JLabel statusLabel) {
             this.model = model;
             this.statusLabel = statusLabel;
             steps = 10000;

File: src/main/java/de/neemann/digital/draw/library/ResolveGenerics.java
Patch:
@@ -125,7 +125,7 @@ private Args createArgsFromGenericInitBlock() throws NodeException {
     }
 
     private CircuitHolder createResolvedCircuit(Args args) throws NodeException, ElementNotFoundException {
-        LOGGER.info("create concrete circuit based on " + circuit.getOrigin() + " width: " + args);
+        LOGGER.debug("create concrete circuit based on " + circuit.getOrigin() + " width: " + args);
         final Circuit c = circuit.createDeepCopy();
         ArrayList<VisualElement> newComponents = new ArrayList<>();
         ArrayList<Wire> newWires = new ArrayList<>();

File: src/main/java/de/neemann/digital/draw/shapes/RectShape.java
Patch:
@@ -19,7 +19,7 @@
 /**
  * Simple rectangle
  */
-public class RectShape implements ShapeMatch {
+public class RectShape implements ShapeSpecificMatch {
     private final String label;
     private final int width;
     private final int height;

File: src/main/java/de/neemann/digital/draw/shapes/ShapeSpecificMatch.java
Patch:
@@ -11,7 +11,7 @@
  * A shape where the clickable area is not simply the bounding box, but
  * defined by the shape itself.
  */
-public interface ShapeMatch extends Shape {
+public interface ShapeSpecificMatch extends Shape {
 
     /**
      * Checks is the given position matches the shape

File: src/main/java/de/neemann/digital/core/Model.java
Patch:
@@ -924,7 +924,7 @@ public SyncAccess createSync(boolean microStep) {
             return new SyncAccess() {
                 @Override
                 public <A extends Runnable> A modify(A run) {
-                    synchronized (this) {
+                    synchronized (Model.this) {
                         run.run();
                     }
                     fireEvent(ModelEvent.MICROSTEP);  // record the external modification as a micro step!

File: src/test/java/de/neemann/digital/integration/TestInGUI.java
Patch:
@@ -41,6 +41,7 @@
 import de.neemann.digital.gui.components.table.TableDialog;
 import de.neemann.digital.gui.components.terminal.KeyboardDialog;
 import de.neemann.digital.gui.components.terminal.Terminal;
+import de.neemann.digital.gui.components.terminal.TerminalDialog;
 import de.neemann.digital.gui.components.testing.TestAllDialog;
 import de.neemann.digital.gui.components.testing.ValueTableDialog;
 import de.neemann.digital.gui.remote.RemoteException;
@@ -545,7 +546,7 @@ public void testKeyboard2() {
                         (gt, kb) -> keyboard = kb))
                 .press("ENTER")
                 .delay(200)
-                .add(new GuiTester.WindowCheck<>(Main.class,
+                .add(new GuiTester.WindowCheck<>(TerminalDialog.class,
                         (gt, td) -> keyboard.toFront()))
                 .delay(200)
                 .type("Hello World!")

File: src/main/java/de/neemann/digital/data/DataPlotter.java
Patch:
@@ -34,7 +34,8 @@ public class DataPlotter implements Drawable {
     /**
      * Creates a new instance
      *
-     * @param data the signals used to collect DataSamples
+     * @param data      the signals used to collect DataSamples
+     * @param modelSync used to access the model
      */
     public DataPlotter(ValueTable data, SyncAccess modelSync) {
         this.dataOriginal = data;

File: src/main/java/de/neemann/digital/gui/components/data/GraphComponent.java
Patch:
@@ -31,7 +31,7 @@ public class GraphComponent extends JComponent {
      * @param modelSync lock to access the model
      */
     GraphComponent(ValueTable dataSet, SyncAccess modelSync) {
-        plotter = new DataPlotter(dataSet).setModelSync(modelSync);
+        plotter = new DataPlotter(dataSet, modelSync);
         addMouseWheelListener(e -> {
             double f = Math.pow(0.9, e.getWheelRotation());
             scale(f, e.getX());

File: src/main/java/de/neemann/digital/core/io/telnet/ServerHolder.java
Patch:
@@ -34,10 +34,11 @@ private ServerHolder() {
      */
     public Server getServer(int port) throws IOException {
         Server server = serverMap.get(port);
-        if (server == null) {
+        if (server == null || server.isDead()) {
             server = new Server(port);
             serverMap.put(port, server);
-        }
+        } else
+            server.deleteAll();
         return server;
     }
 }

File: src/main/java/de/neemann/digital/core/io/telnet/Telnet.java
Patch:
@@ -75,7 +75,7 @@ public void readInputs() throws NodeException {
             if (writeEnable.getBool())
                 server.send((int) dataIn.getValue());
             if (readEnable)
-                server.delete();
+                server.deleteOldest();
         }
         lastClock = clock;
     }

File: src/test/java/de/neemann/digital/hdl/vhdl2/VHDLSimulatorTest.java
Patch:
@@ -30,7 +30,7 @@ public class VHDLSimulatorTest extends TestCase {
     private static final String GHDL = System.getProperty("ghdl", "ghdl");
     private int testBenches;
 
-    // *
+    /*
     public void testDebug() throws Exception {
         File file = new File(Resources.getRoot(), "dig/external/ghdl/ghdlFile.dig");
 

File: src/main/java/de/neemann/digital/builder/ATF150x/ATF150xCuplExporter.java
Patch:
@@ -6,7 +6,6 @@
 package de.neemann.digital.builder.ATF150x;
 
 import de.neemann.digital.builder.Gal16v8.CuplExporter;
-import de.neemann.digital.builder.PinMap;
 
 import java.io.IOException;
 import java.io.Writer;
@@ -38,8 +37,9 @@ public ATF150xCuplExporter(String devName, int clockPin, int[] pins) {
      * @param pins     the bidirectional pins
      */
     public ATF150xCuplExporter(String username, Date date, String devName, int clockPin, int[] pins) {
-        super(username, date, devName, new PinMap()
-                .setAvailBidirectional(pins));
+        super(username, date, devName);
+        getPinMapping()
+                .setAvailBidirectional(pins);
         setClockPin(clockPin);
         setCreateNodes(true);
     }

File: src/main/java/de/neemann/digital/builder/Gal22v10/Gal22v10CuplExporter.java
Patch:
@@ -6,7 +6,6 @@
 package de.neemann.digital.builder.Gal22v10;
 
 import de.neemann.digital.builder.Gal16v8.CuplExporter;
-import de.neemann.digital.builder.PinMap;
 
 import java.io.IOException;
 import java.io.Writer;
@@ -31,9 +30,10 @@ public Gal22v10CuplExporter() {
      * @param date     date
      */
     public Gal22v10CuplExporter(String username, Date date) {
-        super(username, date, "g22v10", new PinMap()
+        super(username, date, "g22v10");
+        getPinMapping()
                 .setAvailInputs(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13)
-                .setAvailOutputs(14, 15, 16, 17, 18, 19, 20, 21, 22, 23));
+                .setAvailOutputs(14, 15, 16, 17, 18, 19, 20, 21, 22, 23);
     }
 
     @Override

File: src/main/java/de/neemann/digital/draw/graphics/GraphicsImage.java
Patch:
@@ -62,7 +62,8 @@ public Graphic setBoundingBox(VectorInterface min, VectorInterface max) {
     @Override
     public void close() throws IOException {
         if (out != null) {
-            ImageIO.write(bi, format, out);
+            if (bi != null)
+                ImageIO.write(bi, format, out);
             out.close();
         }
     }

File: src/main/java/de/neemann/digital/hdl/hgs/Context.java
Patch:
@@ -56,7 +56,6 @@ public class Context implements HGSMap {
         BUILT_IN.put("identifier", new FunctionIdentifier());
         BUILT_IN.put("loadHex", new FunctionLoadHex());
         BUILT_IN.put("sizeOf", new Func(1, args -> Value.toArray(args[0]).hgsArraySize()));
-        BUILT_IN.put("newMap", new Func(0, args -> new HashMap()));
         BUILT_IN.put("newList", new Func(-1, args -> new ArrayList<>(Arrays.asList(args))));
     }
 

File: src/main/java/de/neemann/digital/gui/components/CircuitComponent.java
Patch:
@@ -1542,6 +1542,8 @@ public void mouseReleased(MouseEvent e) {
         }
 
         private boolean wasMoved(MouseEvent e) {
+            if (pos == null) // seems to happen in very rare cases
+                return false;
             Vector d = new Vector(e.getX(), e.getY()).sub(pos);
             return Math.abs(d.x) > DRAG_DISTANCE || Math.abs(d.y) > DRAG_DISTANCE;
         }

File: src/main/java/de/neemann/digital/gui/Main.java
Patch:
@@ -1194,6 +1194,9 @@ public void startTests() {
             if (tsl.isEmpty())
                 throw new TestingDataException(Lang.get("err_noTestData"));
 
+            for (Circuit.TestCase tc : tsl)
+                tc.getTestCaseDescription().setNewSeed();
+
             windowPosManager.register("testResult", new ValueTableDialog(Main.this, Lang.get("msg_testResult"))
                     .addTestResult(tsl, circuitComponent.getCircuit(), library))
                     .setVisible(true);

File: src/test/java/de/neemann/digital/integration/TestInGUI.java
Patch:
@@ -170,7 +170,7 @@ public void testTreeView() {
         new GuiTester()
                 .delay(500)
                 .press("F5")
-                .mouseMove(100, 100)
+                .mouseMove(100, 110)
                 .delay(300)
                 .mouseClick(InputEvent.BUTTON1_DOWN_MASK)
                 .delay(200)

File: src/main/java/de/neemann/digital/analyse/CSVImporter.java
Patch:
@@ -96,6 +96,7 @@ private static TruthTable readHeader(BufferedReader r) throws IOException {
     }
 
     private static void parseLine(TruthTable tt, String line) throws IOException {
+        int resNum = tt.getResultCount();
         int varNum = tt.getVars().size();
         int mask = 1 << (varNum - 1);
         ArrayList<Integer> dc = new ArrayList<>();
@@ -116,7 +117,7 @@ else if (e.equals("x"))
                         dc.add(mask);
                     mask = mask >> 1;
                 } else {
-                    if (rCol >= varNum)
+                    if (rCol >= resNum)
                         throw new IOException(Lang.get("err_csvToManyValues"));
                     if (e.equals("1"))
                         generator.addCol(rCol);

File: src/main/java/de/neemann/digital/testing/parser/Tokenizer.java
Patch:
@@ -184,7 +184,7 @@ public Token peek() throws IOException {
                     boolean wasChar = true;
                     do {
                         c = readChar();
-                        if (isNumberChar(c) || isHexChar(c) || c == 'x' || c == 'X') {
+                        if (isNumberChar(c) || isHexChar(c) || c == 'x' || c == 'X' || c == ':' || c == '.') {
                             builder.append((char) c);
                         } else {
                             unreadChar(c);

File: src/main/java/de/neemann/digital/analyse/TruthTable.java
Patch:
@@ -14,8 +14,6 @@
 import de.neemann.digital.analyse.expression.Variable;
 import de.neemann.digital.analyse.quinemc.BoolTable;
 import de.neemann.digital.analyse.quinemc.BoolTableByteArray;
-import de.neemann.digital.analyse.quinemc.ThreeStateValue;
-import de.neemann.digital.lang.Lang;
 import de.neemann.digital.undo.Copyable;
 
 import java.io.*;

File: src/main/java/de/neemann/digital/gui/components/table/TableDialog.java
Patch:
@@ -445,7 +445,7 @@ public void actionPerformed(ActionEvent e) {
         fileMenu.add(export);
         export.add(new FileExportActionConfirm(Lang.get("menu_table_exportHex"), "hex") {
             @Override
-            protected String getString() throws FormatterException, ExpressionException {
+            protected String getString() throws ExpressionException {
                 return new TruthTableFormatterHex().format(undoManager.getActual());
             }
         }.setToolTip(Lang.get("menu_table_exportHex_tt")).createJMenuItem());
@@ -1060,4 +1060,4 @@ protected boolean confirmExport() {
 
     }
 
-}
\ No newline at end of file
+}

File: src/main/java/de/neemann/digital/gui/Main.java
Patch:
@@ -399,7 +399,7 @@ public void actionPerformed(ActionEvent e) {
                 componentOnPane = split;
             } else {
                 if (treeModel != null) {
-                    library.removeListener(treeModel);
+                    treeModel.close();
                     treeModel = null;
                 }
                 getContentPane().add(circuitScrollPanel);

File: src/main/java/de/neemann/digital/gui/components/tree/SelectTree.java
Patch:
@@ -80,8 +80,9 @@ public void setModel(LibraryTreeModel newModel) {
         if (!oldModel.isFiltered() && newModel.isFiltered())
             storedExpanded = getExpandedDescendants(new TreePath(getModel().getRoot()));
 
-        boolean restore = oldModel.isFiltered() && !newModel.isFiltered();
+        oldModel.close();
 
+        boolean restore = oldModel.isFiltered() && !newModel.isFiltered();
         super.setModel(newModel);
         if (restore && storedExpanded != null) {
             while (storedExpanded.hasMoreElements())

File: src/test/java/de/neemann/digital/core/memory/importer/LogisimReaderTest.java
Patch:
@@ -99,7 +99,7 @@ public void testLoadRLE() throws Exception {
     }
 
     public void testLoadRLEMultiline() throws Exception {
-        String data = "v2.0 raw\n#test1 \n 5*0x0 10*0x10 0xAA 0XFF #test";
+        String data = "v2.0 raw\n#test1 \n 5*0x0 10 * 0x10 0xAA 0XFF #test";
 
         DataField df = new DataField(1024);
         new LogisimReader(new StringReader(data)).read(new DataFieldValueArray(df, 0));

File: src/test/java/de/neemann/digital/core/memory/importer/LogisimReaderTest.java
Patch:
@@ -99,7 +99,7 @@ public void testLoadRLE() throws Exception {
     }
 
     public void testLoadRLEMultiline() throws Exception {
-        String data = "v2.0 raw\n#test1 \n 5*0x0 10*0x10 0xAA 0XFF #test";
+        String data = "v2.0 raw\n#test1 \n 5*0x0 10 * 0x10 0xAA 0XFF #test";
 
         DataField df = new DataField(1024);
         new LogisimReader(new StringReader(data)).read(new DataFieldValueArray(df, 0));

File: src/main/java/de/neemann/digital/core/wiring/bus/BusModelStateObserver.java
Patch:
@@ -31,7 +31,7 @@ public final class BusModelStateObserver implements ModelStateObserverTyped {
 
     @Override
     public void handleEvent(ModelEvent event) {
-        if (event == ModelEvent.STEP && !busList.isEmpty()) {
+        if ((event == ModelEvent.STEP || event == ModelEvent.CHECKBURN) && !busList.isEmpty()) {
             for (AbstractBusHandler bus : busList) {
                 bus.checkBurn();
             }
@@ -42,7 +42,7 @@ public void handleEvent(ModelEvent event) {
 
     @Override
     public ModelEventType[] getEvents() {
-        return new ModelEventType[]{ModelEventType.STEP};
+        return new ModelEventType[]{ModelEventType.STEP, ModelEventType.CHECKBURN};
     }
 
     /**

File: src/test/java/de/neemann/digital/integration/TestExamples.java
Patch:
@@ -51,7 +51,7 @@ public void testDistExamples() throws Exception {
      */
     public void testTestExamples() throws Exception {
         File examples = new File(Resources.getRoot(), "/dig/test");
-        assertEquals(207, new FileScanner(this::check).scan(examples));
+        assertEquals(208, new FileScanner(this::check).scan(examples));
         assertEquals(193, testCasesInFiles);
     }
 

File: src/main/java/de/neemann/digital/core/wiring/bus/BusModelStateObserver.java
Patch:
@@ -31,7 +31,7 @@ public final class BusModelStateObserver implements ModelStateObserverTyped {
 
     @Override
     public void handleEvent(ModelEvent event) {
-        if (event == ModelEvent.STEP && !busList.isEmpty()) {
+        if ((event == ModelEvent.STEP || event == ModelEvent.CHECKBURN) && !busList.isEmpty()) {
             for (AbstractBusHandler bus : busList) {
                 bus.checkBurn();
             }
@@ -42,7 +42,7 @@ public void handleEvent(ModelEvent event) {
 
     @Override
     public ModelEventType[] getEvents() {
-        return new ModelEventType[]{ModelEventType.STEP};
+        return new ModelEventType[]{ModelEventType.STEP, ModelEventType.CHECKBURN};
     }
 
     /**

File: src/test/java/de/neemann/digital/integration/TestExamples.java
Patch:
@@ -51,7 +51,7 @@ public void testDistExamples() throws Exception {
      */
     public void testTestExamples() throws Exception {
         File examples = new File(Resources.getRoot(), "/dig/test");
-        assertEquals(206, new FileScanner(this::check).scan(examples));
+        assertEquals(207, new FileScanner(this::check).scan(examples));
         assertEquals(192, testCasesInFiles);
     }
 

File: src/test/java/de/neemann/digital/integration/TestSelect.java
Patch:
@@ -20,7 +20,7 @@ public void testSelect() throws Exception {
         Circuit c = new ToBreakRunner("dig/selectOuter.dig").getCircuit();
 
         // don't select by clicking in label size bounding box
-        VisualElement el = c.getElementAt(new Vector(65, 15));
+        VisualElement el = c.getElementAt(new Vector(75, 15));
         assertNull(el);
 
         // select by clicking in shape size bounding box

File: src/main/java/de/neemann/digital/draw/graphics/GraphicMinMax.java
Patch:
@@ -69,7 +69,7 @@ public void drawCircle(VectorInterface p1, VectorInterface p2, Style style) {
     }
 
     /**
-     * Checks the given point a makes the bounding box larger if necessary
+     * Checks the given point and makes the bounding box larger if necessary.
      *
      * @param p the point to check
      */

File: src/main/java/de/neemann/digital/lang/Lang.java
Patch:
@@ -141,6 +141,8 @@ static String evalMultilingualContent(String text, Language currentLanguage) {
                 String l = text.substring(pos + 2, pos + 4);
                 if (l.equalsIgnoreCase(currentLanguage.getName()))
                     return text.substring(pos + 4, p2).trim();
+                if (l.equalsIgnoreCase("en") && def.isEmpty())
+                    def = text.substring(pos + 4, p2).trim();
 
                 pos = text.indexOf("{{", p2);
             } else

File: src/main/java/de/neemann/digital/lang/Lang.java
Patch:
@@ -141,6 +141,8 @@ static String evalMultilingualContent(String text, Language currentLanguage) {
                 String l = text.substring(pos + 2, pos + 4);
                 if (l.equalsIgnoreCase(currentLanguage.getName()))
                     return text.substring(pos + 4, p2).trim();
+                if (l.equalsIgnoreCase("en") && def.isEmpty())
+                    def = text.substring(pos + 4, p2).trim();
 
                 pos = text.indexOf("{{", p2);
             } else

File: src/main/java/de/neemann/digital/draw/shapes/InputShape.java
Patch:
@@ -183,7 +183,7 @@ public void pressed(CircuitComponent cc, Point pos, IOState ioState, Element ele
         @Override
         public void dragged(CircuitComponent cc, Point posOnScreen, Vector pos, Transform transform, IOState ioState, Element element, SyncAccess modelSync) {
             ObservableValue value = ioState.getOutput(0);
-            if (bits > 1 && !value.isHighZ()) {
+            if (bits > 1 && !value.isHighZ() && formatter.isProportional()) {
                 if (!isDrag) {
                     isDrag = true;
                     startPos = posOnScreen;

File: src/main/java/de/neemann/digital/core/element/Keys.java
Patch:
@@ -509,6 +509,7 @@ private Keys() {
             .setMin(1)
             .setMax(64)
             .setDependsOn(INT_FORMAT, intFormat -> intFormat instanceof IntFormatFixedPoint)
+            .allowGroupEdit()
             .setSecondary();
 
     /**

File: src/main/java/de/neemann/digital/gui/components/EditorFactory.java
Patch:
@@ -790,7 +790,7 @@ public void setValue(E value) {
 
         private int indexOf(E value) {
             for (int i = 0; i < values.length; i++)
-                if (value == values[i])
+                if (value.equals(values[i]))
                     return i;
             return 0;
         }

File: src/main/java/de/neemann/digital/core/Bits.java
Patch:
@@ -225,9 +225,9 @@ public static long decode(String str, int p, int radix) throws NumberFormatExcep
     private static long decodeFixed(String str) throws NumberFormatException {
         int p = str.indexOf(':');
         try {
-            int frac = Integer.parseInt(str.substring(p + 1));
+            int frac = Math.abs(Integer.parseInt(str.substring(p + 1)));
             double floating = Double.parseDouble(str.substring(0, p));
-            return (long) (floating * (1L << frac));
+            return Math.round(floating * (1L << frac));
         } catch (java.lang.NumberFormatException e) {
             throw new NumberFormatException(str, 0);
         }

File: src/main/java/de/neemann/digital/core/element/ElementTypeDescription.java
Patch:
@@ -155,6 +155,8 @@ public String getDescription(ElementAttributes elementAttributes) {
      */
     public <VALUE> ElementTypeDescription addAttribute(Key<VALUE> key) {
         attributeList.add(key);
+        if (key == Keys.INT_FORMAT)
+            attributeList.add(Keys.FIXED_POINT);
         return this;
     }
 

File: src/main/java/de/neemann/digital/core/io/In.java
Patch:
@@ -71,7 +71,7 @@ public In(ElementAttributes attributes) {
             output.setValue(value.getValue());
 
         label = attributes.getLabel();
-        format = attributes.get(Keys.INT_FORMAT);
+        format = attributes.getIntFormat();
         showInGraph = attributes.get(Keys.ADD_VALUE_TO_GRAPH);
     }
 

File: src/main/java/de/neemann/digital/core/io/Out.java
Patch:
@@ -99,7 +99,7 @@ public Out(ElementAttributes attributes) {
         bits = new int[]{attributes.getBits()};
         label = attributes.getLabel();
         pinNumber = attributes.get(Keys.PINNUMBER);
-        format = attributes.get(Keys.INT_FORMAT);
+        format = attributes.getIntFormat();
         showInGraph = attributes.get(Keys.ADD_VALUE_TO_GRAPH);
     }
 

File: src/main/java/de/neemann/digital/core/io/Probe.java
Patch:
@@ -40,7 +40,7 @@ public class Probe implements Element {
      */
     public Probe(ElementAttributes attributes) {
         label = attributes.get(Keys.LABEL);
-        format = attributes.get(Keys.INT_FORMAT);
+        format = attributes.getIntFormat();
         showInGraph = attributes.get(Keys.ADD_VALUE_TO_GRAPH);
     }
 

File: src/main/java/de/neemann/digital/core/memory/EEPROM.java
Patch:
@@ -15,8 +15,6 @@
 import de.neemann.digital.gui.components.CircuitModifier;
 import de.neemann.digital.gui.components.modification.ModifyAttribute;
 
-import javax.swing.*;
-
 import static de.neemann.digital.core.element.PinInfo.input;
 
 /**
@@ -81,7 +79,7 @@ public EEPROM(ElementAttributes attr) {
                 .setPinDescription(DESCRIPTION)
                 .setBidirectional();
         isProgramMemory = attr.get(Keys.IS_PROGRAM_MEMORY);
-        intFormat = attr.get(Keys.INT_FORMAT);
+        intFormat = attr.getIntFormat();
     }
 
     @Override

File: src/main/java/de/neemann/digital/core/memory/RAMDualPort.java
Patch:
@@ -66,7 +66,7 @@ public RAMDualPort(ElementAttributes attr) {
         memory = createDataField(attr, size);
         label = attr.getLabel();
         isProgramMemory = attr.get(Keys.IS_PROGRAM_MEMORY);
-        intFormat = attr.get(Keys.INT_FORMAT);
+        intFormat = attr.getIntFormat();
     }
 
     /**

File: src/main/java/de/neemann/digital/core/memory/ROM.java
Patch:
@@ -75,7 +75,7 @@ public ROM(ElementAttributes attr) {
             hexFile = attr.getFile(LAST_DATA_FILE_KEY);
         } else
             hexFile = null;
-        intFormat = attr.get(Keys.INT_FORMAT);
+        intFormat = attr.getIntFormat();
     }
 
     ObservableValue createOutput1() {

File: src/main/java/de/neemann/digital/draw/shapes/ConstShape.java
Patch:
@@ -36,7 +36,7 @@ public class ConstShape implements Shape {
     public ConstShape(ElementAttributes attr, PinDescriptions inputs, PinDescriptions outputs) {
         this.outputs = outputs;
         int bits = attr.getBits();
-        IntFormat format = attr.get(Keys.INT_FORMAT);
+        IntFormat format = attr.getIntFormat();
         this.value = format.formatToView(new Value(attr.get(Keys.VALUE), bits));
     }
 

File: src/main/java/de/neemann/digital/draw/shapes/InputShape.java
Patch:
@@ -60,7 +60,7 @@ public InputShape(ElementAttributes attr, PinDescriptions inputs, PinDescription
         else
             this.label = attr.getLabel() + " (" + pinNumber + ")";
 
-        format = attr.get(Keys.INT_FORMAT);
+        format = attr.getIntFormat();
 
         isHighZ = attr.get(Keys.INPUT_DEFAULT).isHighZ() || attr.get(Keys.IS_HIGH_Z);
 

File: src/main/java/de/neemann/digital/draw/shapes/OutputShape.java
Patch:
@@ -60,7 +60,7 @@ public OutputShape(ElementAttributes attr, PinDescriptions inputs, PinDescriptio
         else
             this.label = attr.getLabel() + " (" + pinNumber + ")";
 
-        format = attr.get(Keys.INT_FORMAT);
+        format = attr.getIntFormat();
     }
 
     @Override

File: src/main/java/de/neemann/digital/draw/shapes/ProbeShape.java
Patch:
@@ -9,7 +9,6 @@
 import de.neemann.digital.core.ObservableValue;
 import de.neemann.digital.core.Value;
 import de.neemann.digital.core.element.ElementAttributes;
-import de.neemann.digital.core.element.Keys;
 import de.neemann.digital.core.element.PinDescriptions;
 import de.neemann.digital.draw.elements.IOState;
 import de.neemann.digital.draw.elements.Pin;
@@ -42,7 +41,7 @@ public ProbeShape(ElementAttributes attr, PinDescriptions inputs, PinDescription
         this.inputs = inputs;
         label = attr.getLabel();
         isLabel = label != null && label.length() > 0;
-        this.format = attr.get(Keys.INT_FORMAT);
+        this.format = attr.getIntFormat();
     }
 
     @Override

File: src/main/java/de/neemann/digital/gui/components/EditorFactory.java
Patch:
@@ -420,7 +420,7 @@ public JComponent getComponent(ElementAttributes attr) {
         public void addToPanel(EditorPanel panel, Key<Long> key, ElementAttributes attr, AttributeDialog attributeDialog) {
             if (key.isAdaptiveIntFormat()) {
                 Value value = new Value(attr.get(key), attr.getBits());
-                comboBox.setSelectedItem(attr.get(Keys.INT_FORMAT).formatToEdit(value));
+                comboBox.setSelectedItem(attr.getIntFormat().formatToEdit(value));
             }
             super.addToPanel(panel, key, attr, attributeDialog);
         }
@@ -461,7 +461,7 @@ public InValueEditor(InValue value, Key<Integer> key) {
         public void addToPanel(EditorPanel panel, Key<InValue> key, ElementAttributes attr, AttributeDialog attributeDialog) {
             if (key.isAdaptiveIntFormat()) {
                 Value value = new Value(attr.get(key), attr.getBits());
-                comboBox.setSelectedItem(attr.get(Keys.INT_FORMAT).formatToEdit(value));
+                comboBox.setSelectedItem(attr.getIntFormat().formatToEdit(value));
             }
             super.addToPanel(panel, key, attr, attributeDialog);
         }
@@ -640,7 +640,7 @@ public void actionPerformed(ActionEvent e) {
                         getAttributeDialog().storeEditedValues();
                         int dataBits = attr.get(Keys.BITS);
                         int addrBits = getAddrBits(attr);
-                        DataEditor de = new DataEditor(panel, data, dataBits, addrBits, false, SyncAccess.NOSYNC, attr.get(Keys.INT_FORMAT));
+                        DataEditor de = new DataEditor(panel, data, dataBits, addrBits, false, SyncAccess.NOSYNC, attr.getIntFormat());
                         de.setFileName(new FileLocator(attr.getFile(ROM.LAST_DATA_FILE_KEY))
                                 .setupWithMain(getAttributeDialog().getMain())
                                 .locate());

File: src/main/java/de/neemann/digital/gui/components/CircuitComponent.java
Patch:
@@ -1231,7 +1231,7 @@ public void actionPerformed(ActionEvent actionEvent) {
 
                 ElementAttributes modified = attributeDialog.showDialog();
                 if (elementType == Tunnel.DESCRIPTION) {
-                    if (modified.contains(Keys.NETNAME))
+                    if (modified != null && modified.contains(Keys.NETNAME))
                         lastUsedTunnelName = modified.get(Keys.NETNAME);
                 }
                 if (modified != null && !locked) {

File: src/test/java/de/neemann/digital/hdl/verilog2/VerilogSimulatorTest.java
Patch:
@@ -51,8 +51,8 @@ public void testInSimulator() throws Exception {
         File examples = new File(Resources.getRoot(), "/dig/test/vhdl");
         try {
             int tested = new FileScanner(this::checkVerilogExport).noOutput().scan(examples);
-            assertEquals(66, tested);
-            assertEquals(56, testBenches);
+            assertEquals(67, tested);
+            assertEquals(57, testBenches);
         } catch (FileScanner.SkipAllException e) {
             // if iverilog is not installed its also ok
         }

File: src/test/java/de/neemann/digital/hdl/vhdl2/VHDLSimulatorTest.java
Patch:
@@ -43,8 +43,8 @@ public void testInSimulator() throws Exception {
         File examples = new File(Resources.getRoot(), "/dig/test/vhdl");
         try {
             int tested = new FileScanner(this::checkVHDLExport).noOutput().scan(examples);
-            assertEquals(66, tested);
-            assertEquals(56, testBenches);
+            assertEquals(67, tested);
+            assertEquals(57, testBenches);
         } catch (FileScanner.SkipAllException e) {
             // if ghdl is not installed its also ok
         }

File: src/test/java/de/neemann/digital/integration/TestExamples.java
Patch:
@@ -51,8 +51,8 @@ public void testDistExamples() throws Exception {
      */
     public void testTestExamples() throws Exception {
         File examples = new File(Resources.getRoot(), "/dig/test");
-        assertEquals(205, new FileScanner(this::check).scan(examples));
-        assertEquals(191, testCasesInFiles);
+        assertEquals(206, new FileScanner(this::check).scan(examples));
+        assertEquals(192, testCasesInFiles);
     }
 
     /**

File: src/main/java/de/neemann/digital/draw/library/ElementTypeDescriptionCustom.java
Patch:
@@ -189,7 +189,7 @@ public PinDescriptions getInputDescription(ElementAttributes elementAttributes)
             try {
                 Circuit c = resolveGenerics.resolveCircuit(elementAttributes).getCircuit();
                 return new PinDescriptions(c.getInputNames());
-            } catch (ElementNotFoundException | PinException e) {
+            } catch (Exception e) {
                 return super.getInputDescription(elementAttributes);
             }
         } else
@@ -202,7 +202,7 @@ public PinDescriptions getOutputDescriptions(ElementAttributes elementAttributes
             try {
                 Circuit c = resolveGenerics.resolveCircuit(elementAttributes).getCircuit();
                 return new PinDescriptions(c.getOutputNames());
-            } catch (ElementNotFoundException | PinException | NodeException e) {
+            } catch (Exception e) {
                 return super.getOutputDescriptions(elementAttributes);
             }
         } else

File: src/main/java/de/neemann/digital/hdl/hgs/Context.java
Patch:
@@ -631,7 +631,7 @@ public Object call(Context c, ArrayList<Expression> args) throws HGSEvalExceptio
             File hexFile = fileLocator.locate();
 
             if (hexFile == null)
-                throw new HGSEvalException("file " + name + " not found!");
+                throw new HGSEvalException("File " + name + " not found! Is circuit saved?");
 
             try {
                 DataField dataField = Importer.read(hexFile, dataBits);

File: src/test/java/de/neemann/digital/hdl/verilog2/VerilogSimulatorTest.java
Patch:
@@ -62,7 +62,7 @@ public void testInSimulator2() throws Exception {
         File examples = new File(Resources.getRoot(), "/dig/hdl");
         try {
             int tested = new FileScanner(this::checkVerilogExport).noOutput().scan(examples);
-            assertEquals(48, tested);
+            assertEquals(51, tested);
         } catch (FileScanner.SkipAllException e) {
             // if iverilog is not installed its also ok
         }
@@ -187,7 +187,7 @@ private String startProcess(File dir, String... args) throws IOException, FileSc
     }
 
     private String getTime() {
-        DateFormat f = new SimpleDateFormat("YY-MM-dd_HH-mm_ss");
+        DateFormat f = new SimpleDateFormat("yy-MM-dd_HH-mm_ss");
         return f.format(new Date());
     }
 

File: src/test/java/de/neemann/digital/hdl/vhdl2/VHDLSimulatorTest.java
Patch:
@@ -54,7 +54,7 @@ public void testInSimulator2() throws Exception {
         File examples = new File(Resources.getRoot(), "/dig/hdl");
         try {
             int tested = new FileScanner(this::checkVHDLExport).noOutput().scan(examples);
-            assertEquals(48, tested);
+            assertEquals(51, tested);
         } catch (FileScanner.SkipAllException e) {
             // if ghdl is not installed its also ok
         }
@@ -179,7 +179,7 @@ private String startProcess(File dir, String... args) throws IOException, FileSc
     }
 
     private String getTime() {
-        DateFormat f = new SimpleDateFormat("YY-MM-dd_HH-mm_ss");
+        DateFormat f = new SimpleDateFormat("yy-MM-dd_HH-mm_ss");
         return f.format(new Date());
     }
 

File: src/test/java/de/neemann/digital/draw/graphics/SVGExportTest.java
Patch:
@@ -33,7 +33,7 @@ public void testSVGExportInOut() throws Exception {
                 (out) -> new GraphicSVG(out, attr));
 
         String actual = new String(baos.toByteArray(), StandardCharsets.UTF_8);
-        assertTrue(actual.contains("A"));
+        assertTrue(actual.contains(">A<"));
         assertTrue(actual.contains("$Y_n$"));
     }
 
@@ -60,7 +60,7 @@ public void testSVGExportShapePins() throws Exception {
                 (out) -> new GraphicSVG(out, attr));
 
         String actual = new String(baos.toByteArray(), StandardCharsets.UTF_8);
-        assertFalse(actual.contains("$A$"));
+        assertTrue(actual.contains("{\\scriptsize A}"));
         assertTrue(actual.contains("$Y_n$"));
     }
 
@@ -73,7 +73,7 @@ public void testSVGExportShapePinsMath() throws Exception {
                 (out) -> new GraphicSVG(out, attr));
 
         String actual = new String(baos.toByteArray(), StandardCharsets.UTF_8);
-        assertTrue(actual.contains("$A$"));
+        assertTrue(actual.contains("{\\scriptsize $A$}"));
         assertTrue(actual.contains("$Y_n$"));
     }
 

File: src/main/java/de/neemann/digital/draw/graphics/TextFormatLaTeX.java
Patch:
@@ -75,7 +75,7 @@ private static String getFontSizeName(int fontSize) {
     public String format(String text, Style style) {
         try {
             Text t = new Parser(text).parse();
-            if (style.getFontStyle() == Font.ITALIC || (style == Style.SHAPE_PIN && pinStyleInMathMode))
+            if (style.getFontStyle() == Font.ITALIC && !(style == Style.INOUT && !pinStyleInMathMode))
                 t = Decorate.math(t);
             text = LaTeXFormatter.format(t);
         } catch (ParseException e) {

File: src/test/java/de/neemann/digital/integration/TestExamples.java
Patch:
@@ -39,8 +39,8 @@ public class TestExamples extends TestCase {
      */
     public void testDistExamples() throws Exception {
         File examples = new File(Resources.getRoot().getParentFile().getParentFile(), "/main/dig");
-        assertEquals(302, new FileScanner(this::check).scan(examples));
-        assertEquals(347, testCasesInFiles);
+        assertEquals(303, new FileScanner(this::check).scan(examples));
+        assertEquals(490, testCasesInFiles);
     }
 
     /**

File: src/main/java/de/neemann/digital/gui/SaveAsHelper.java
Patch:
@@ -86,7 +86,7 @@ public void checkOverwrite(SaveAs saveAs) {
                             Lang.get("msg_warning"),
                             JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE,
                             null, options, options[0]);
-                    if (res == 1) {
+                    if (res != JOptionPane.OK_OPTION) {
                         repeat = true;
                         continue;
                     }

File: src/test/java/de/neemann/digital/integration/TestExamples.java
Patch:
@@ -40,7 +40,7 @@ public class TestExamples extends TestCase {
     public void testDistExamples() throws Exception {
         File examples = new File(Resources.getRoot().getParentFile().getParentFile(), "/main/dig");
         assertEquals(301, new FileScanner(this::check).scan(examples));
-        assertEquals(258, testCasesInFiles);
+        assertEquals(325, testCasesInFiles);
     }
 
     /**

File: src/test/java/de/neemann/digital/integration/TestExamples.java
Patch:
@@ -40,7 +40,7 @@ public class TestExamples extends TestCase {
     public void testDistExamples() throws Exception {
         File examples = new File(Resources.getRoot().getParentFile().getParentFile(), "/main/dig");
         assertEquals(301, new FileScanner(this::check).scan(examples));
-        assertEquals(233, testCasesInFiles);
+        assertEquals(246, testCasesInFiles);
     }
 
     /**

File: src/main/java/de/neemann/digital/testing/parser/TestRow.java
Patch:
@@ -13,7 +13,7 @@
 public class TestRow {
     private final Value[] values;
     private final String description;
-    private int rowCount;
+    private int rowCount = -1;
 
     /**
      * Creates a new instance
@@ -72,7 +72,7 @@ public TestRow setRow(int rowCount) {
     }
 
     /**
-     * @return the row number of this row
+     * @return the row number of this row, or -1 if no row number is available
      */
     public int getRow() {
         return rowCount;

File: src/main/java/de/neemann/digital/testing/TestExecutor.java
Patch:
@@ -234,9 +234,9 @@ private void checkRow(Model model, TestRow testRow) {
         if (visibleRows < (ok ? MAX_RESULTS : ERR_RESULTS)) {
             visibleRows++;
             results.add(new TestRow(res, testRow.getDescription()).setRow(rowCount));
-            rowCount++;
         } else
             toManyResults = true;
+        rowCount++;
     }
 
     private void advanceModel(Model model, TestRow testRow, Value[] values, Value[] res) {

File: src/main/java/de/neemann/digital/testing/parser/Context.java
Patch:
@@ -47,7 +47,9 @@ public long getVar(String name) throws ParserException {
         if (map == null || !map.containsKey(name)) {
             if (parent == null) {
                 if (model != null) {
-                    for (Signal s : model.getSignals())
+                    // inputs are not supported because there are cases where values
+                    // are evaluated and model inputs are not set!
+                    for (Signal s : model.getOutputs())
                         if (s.getName().equals(name))
                             return s.getValue().getValue();
                 }

File: src/test/java/de/neemann/digital/testing/parser/ParserTest.java
Patch:
@@ -196,8 +196,8 @@ public void test_GitHub_49() throws IOException, ParserException {
 
     public void test_modelInitState() throws IOException, ParserException {
         Model model = new Model();
-        model.addSignal(new Signal("A", new ObservableValue("A", 3).setValue(2)));
-        model.addSignal(new Signal("B", new ObservableValue("B", 3).setValue(3)));
+        model.addOutput(new Signal("A", new ObservableValue("A", 3).setValue(2)));
+        model.addOutput(new Signal("B", new ObservableValue("B", 3).setValue(3)));
         Parser parser = new Parser("A B Y\n" +
                 "let a=A+B;\n" +
                 "1 1 1\n#test").parse();

File: src/main/java/de/neemann/digital/testing/TestCaseDescription.java
Patch:
@@ -43,6 +43,7 @@ public TestCaseDescription(String data) throws IOException, ParserException {
         Parser tdp = new Parser(data).parse();
         lines = tdp.getLines();
         names = tdp.getNames();
+        virtualSignals = tdp.getVirtualSignals();
     }
 
     /**

File: src/main/java/de/neemann/digital/core/element/Keys.java
Patch:
@@ -874,6 +874,6 @@ private static File getATMISPPath() {
      * The test data
      */
     public static final Key<TestCaseDescription> TESTDATA =
-            new Key<>("Testdata", () -> new TestCaseDescription(""));
+            new Key<>("Testdata", TestCaseDescription::new);
 
 }

File: src/test/java/de/neemann/digital/testing/TestDataTest.java
Patch:
@@ -28,8 +28,8 @@ public void testSetDataNonParseable() throws Exception {
 
         // try to set a non parsable string
         try {
-            td.setDataString(DATA3);
-            assertTrue(false);
+            td = new TestCaseDescription(DATA3);
+            fail();
         } catch (IOException | ParserException e) {
             assertTrue(true);
         }
@@ -46,7 +46,7 @@ public void testSetDataParseable() throws Exception {
         assertEquals(DATA1, td.getDataString());
 
         // try to set a parsable string
-        td.setDataString(DATA2);
+        td = new TestCaseDescription(DATA2);
         // TestData has changed!
         assertEquals(DATA2, td.getDataString());
     }

File: src/main/java/de/neemann/digital/hdl/model2/HDLCircuit.java
Patch:
@@ -144,6 +144,9 @@ else if (isRealElement(v))
         for (HDLNet n : listOfNets)
             n.fixBits();
 
+        for (HDLNet n : listOfNets)
+            n.checkPinControlUsage();
+
         // fix inverted inputs
         ArrayList<HDLNode> newNodes = new ArrayList<>();
         for (HDLNode n : nodes) {

File: src/main/java/de/neemann/digital/hdl/model2/HDLNet.java
Patch:
@@ -203,6 +203,8 @@ public int getBits() throws HDLException {
      * @return true if this is a clock net
      */
     public boolean isClock() {
+        if (output == null)
+            return false;
         return output.isClock();
     }
 

File: src/main/java/de/neemann/digital/draw/shapes/ButtonLEDShape.java
Patch:
@@ -71,7 +71,7 @@ public void readObservableValues() {
     public void drawTo(Graphic graphic, Style heighLight) {
         super.drawTo(graphic, heighLight);
 
-        boolean ledOn = ledValue == null || ledValue.getBool();
+        boolean ledOn = ledValue == null || (ledValue.getBool() & !ledValue.isHighZ());
         boolean pressed = button != null && button.isPressed();
 
         Vector center;

File: src/main/java/de/neemann/digital/gui/Main.java
Patch:
@@ -757,7 +757,7 @@ public void actionPerformed(ActionEvent e) {
         ToolTipAction actualToDefault = new ToolTipAction(Lang.get("menu_actualToDefault")) {
             @Override
             public void actionPerformed(ActionEvent e) {
-                circuitComponent.actualToDefault();
+                circuitComponent.currentToDefault();
                 ensureModelIsStopped();
             }
         }.setToolTip(Lang.get("menu_actualToDefault_tt"));

File: src/main/java/de/neemann/digital/testing/FolderTestRunner.java
Patch:
@@ -201,7 +201,7 @@ public void run() {
                             try {
                                 TestExecutor.Result tr = new TestExecutor(tc, circuit, library).execute();
                                 if (tr.allPassed()) {
-                                    rowCount += tr.getValueTable().getRows();
+                                    rowCount += tr.getRowsTested();
                                 } else {
                                     if (sb.length() > 0)
                                         sb.append("; ");

File: src/main/java/de/neemann/digital/gui/components/EditorFactory.java
Patch:
@@ -34,7 +34,6 @@
 import de.neemann.gui.language.Language;
 
 import javax.swing.*;
-import javax.swing.plaf.ColorUIResource;
 import javax.swing.text.JTextComponent;
 import java.awt.*;
 import java.awt.event.ActionEvent;

File: src/main/java/de/neemann/digital/gui/components/expression/ExpressionDialog.java
Patch:
@@ -57,7 +57,7 @@ public void actionPerformed(ActionEvent e) {
                 new ShowStringDialog(
                         ExpressionDialog.this,
                         Lang.get("msg_expressionHelpTitle"),
-                        Lang.get("msg_expressionHelp"))
+                        Lang.get("msg_expressionHelp"), true)
                         .setVisible(true);
             }
         }.createJButton());

File: src/main/java/de/neemann/gui/language/Resources.java
Patch:
@@ -152,7 +152,7 @@ public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext co
             while (reader.hasMoreChildren()) {
                 reader.moveDown();
                 String key = reader.getAttribute("name");
-                String value = reader.getValue();
+                String value = reader.getValue().trim();
                 map.put(key, value);
                 reader.moveUp();
             }

File: src/main/java/de/neemann/digital/hdl/hgs/Parser.java
Patch:
@@ -637,14 +637,14 @@ public Object value(Context c) throws HGSEvalException {
         }
     }
 
-    private static class StructLiteral implements Expression {
+    private static final class StructLiteral implements Expression {
         private final HashMap<String, Expression> map;
 
         private StructLiteral() {
             map = new HashMap<>();
         }
 
-        public void add(String key, Expression exp) {
+        private void add(String key, Expression exp) {
             map.put(key, exp);
         }
 

File: src/main/java/de/neemann/digital/gui/components/CircuitComponent.java
Patch:
@@ -591,7 +591,7 @@ public String getToolTipText(MouseEvent event) {
             }
         }
 
-        Wire w = getCircuit().getWireAt(pos, SIZE2);
+        Wire w = getCircuit().getWireAt(pos, (int) (SIZE2 / transform.getScaleX()));
         if (w != null) {
             ObservableValue v = w.getValue();
             if (v != null)

File: src/main/java/de/neemann/digital/fsm/gui/OptimizerDialog.java
Patch:
@@ -40,9 +40,9 @@ public OptimizerDialog(FSMFrame owner) throws FiniteStateMachineException, Forma
 
         GridLayout layout = new GridLayout(2, 2);
         JPanel panel = new JPanel(layout);
-        panel.add(addBorder(new JLabel("Initial")));
+        panel.add(addBorder(new JLabel(Lang.get("msg_fsm_optimizer_initial"))));
         panel.add(addBorder(new JLabel(Integer.toString(optimizer.getInitialComplexity()))));
-        panel.add(addBorder(new JLabel("Best")));
+        panel.add(addBorder(new JLabel(Lang.get("msg_fsm_optimizer_best"))));
         bestLabel = new JLabel(Integer.toString(optimizer.getInitialComplexity()));
         panel.add(addBorder(bestLabel));
 

File: src/main/java/de/neemann/digital/gui/components/ElementOrderer.java
Patch:
@@ -109,7 +109,7 @@ public void actionPerformed(ActionEvent e) {
                 int i = list.getSelectedIndex();
                 if (data.size() > minEntries && i >= 0 && i < data.size())
                     listModel.delete(i);
-                if (data.size() == minEntries)
+                if (data.size() <= minEntries)
                     setEnabled(false);
             }
         }.setToolTip(Lang.get("tt_deleteItem")).setEnabledChain(data.size() > minEntries).createJButton());

File: src/main/java/de/neemann/digital/gui/components/ElementOrderer.java
Patch:
@@ -109,7 +109,7 @@ public void actionPerformed(ActionEvent e) {
                 int i = list.getSelectedIndex();
                 if (data.size() > minEntries && i >= 0 && i < data.size())
                     listModel.delete(i);
-                if (data.size() >= minEntries)
+                if (data.size() == minEntries)
                     setEnabled(false);
             }
         }.setToolTip(Lang.get("tt_deleteItem")).setEnabledChain(data.size() > minEntries).createJButton());

File: src/main/java/de/neemann/digital/draw/shapes/InputShape.java
Patch:
@@ -68,7 +68,7 @@ public InputShape(ElementAttributes attr, PinDescriptions inputs, PinDescription
 
         bits = attr.getBits();
         if (format.isSigned()) {
-            max = Bits.mask(bits) >> 1;
+            max = Bits.mask(bits) >>> 1;
             min = -max - 1;
         } else {
             min = 0;

File: src/main/java/de/neemann/digital/hdl/hgs/Parser.java
Patch:
@@ -447,7 +447,7 @@ private Expression parseShiftRight() throws IOException, ParserException {
         while (nextIs(SHIFTRIGHT)) {
             Expression a = ac;
             Expression b = parseShiftLeft();
-            ac = c -> Value.toLong(a.value(c)) >> Value.toLong(b.value(c));
+            ac = c -> Value.toLong(a.value(c)) >>> Value.toLong(b.value(c));
         }
         return ac;
     }

File: src/main/java/de/neemann/digital/testing/parser/Parser.java
Patch:
@@ -357,7 +357,7 @@ private Expression parseShiftRight() throws IOException, ParserException {
         while (isToken(Tokenizer.Token.SHIFTRIGHT)) {
             Expression a = ac;
             Expression b = parseShiftLeft();
-            ac = (c) -> a.value(c) >> b.value(c);
+            ac = (c) -> a.value(c) >>> b.value(c);
         }
         return ac;
     }

File: src/main/java/de/neemann/digital/testing/parser/ValueAppenderBits.java
Patch:
@@ -34,7 +34,7 @@ public void appendValues(ArrayList<Value> values, Context context) throws Parser
         for (int i = 0; i < bitCount; i++) {
             boolean v = (value & mask) != 0;
             values.add(new Value(v ? 1 : 0));
-            mask >>= 1;
+            mask >>>= 1;
         }
     }
 }

File: src/main/java/de/neemann/digital/core/extern/External.java
Patch:
@@ -113,7 +113,7 @@ public void init(Model model) throws NodeException {
         }
 
         model.addObserver(event -> {
-            if (event.equals(ModelEventType.CLOSED)) {
+            if (event.getType().equals(ModelEventType.CLOSED)) {
                 try {
                     processInterface.close();
                 } catch (IOException e) {

File: src/main/java/de/neemann/digital/core/io/MIDIHelper.java
Patch:
@@ -73,7 +73,7 @@ private void ensureOpen(Model model) throws NodeException {
             isOpen = true;
 
             model.addObserver(event -> {
-                if (event.equals(ModelEventType.CLOSED))
+                if (event.getType().equals(ModelEventType.CLOSED))
                     close();
             }, ModelEventType.CLOSED);
         }

File: src/main/java/de/neemann/digital/core/switching/TransGate.java
Patch:
@@ -72,7 +72,7 @@ public void writeOutputs() throws NodeException {
     public void init(Model model) throws NodeException {
         aSwitch.init(model);
         model.addObserver(event -> {
-            if (event.equals(ModelEventType.STEP)) {
+            if (event.getType().equals(ModelEventType.STEP)) {
                 if (!s.isHighZ() && !ns.isHighZ() && (s.getBool() == ns.getBool()))
                     throw new BurnException(Lang.get("err_invalidTransmissionGateState"), new ObservableValues(s, ns));
             }

File: src/test/java/de/neemann/digital/hdl/verilog2/VerilogSimulatorTest.java
Patch:
@@ -62,7 +62,7 @@ public void testInSimulator2() throws Exception {
         File examples = new File(Resources.getRoot(), "/dig/hdl");
         try {
             int tested = new FileScanner(this::checkVerilogExport).noOutput().scan(examples);
-            assertEquals(47, tested);
+            assertEquals(48, tested);
         } catch (FileScanner.SkipAllException e) {
             // if iverilog is not installed its also ok
         }

File: src/test/java/de/neemann/digital/hdl/vhdl2/VHDLSimulatorTest.java
Patch:
@@ -54,7 +54,7 @@ public void testInSimulator2() throws Exception {
         File examples = new File(Resources.getRoot(), "/dig/hdl");
         try {
             int tested = new FileScanner(this::checkVHDLExport).noOutput().scan(examples);
-            assertEquals(47, tested);
+            assertEquals(48, tested);
         } catch (FileScanner.SkipAllException e) {
             // if ghdl is not installed its also ok
         }

File: src/main/java/de/neemann/digital/gui/components/DataEditor.java
Patch:
@@ -231,7 +231,7 @@ public void showDialog(String label, Model model) {
         if (model != null) {
             model.getWindowPosManager().register("RAM_DATA_" + label, this);
             model.addObserver(event -> {
-                if (event.equals(ModelEventType.CLOSED))
+                if (event.getType().equals(ModelEventType.CLOSED))
                     detachFromRunningModel();
             }, ModelEventType.CLOSED);
         }

File: src/test/java/de/neemann/digital/integration/TestExamples.java
Patch:
@@ -33,7 +33,7 @@ public class TestExamples extends TestCase {
      */
     public void testDistExamples() throws Exception {
         File examples = new File(Resources.getRoot().getParentFile().getParentFile(), "/main/dig");
-        assertEquals(299, new FileScanner(this::check).scan(examples));
+        assertEquals(297, new FileScanner(this::check).scan(examples));
         assertEquals(195, testCasesInFiles);
     }
 

File: src/test/java/de/neemann/digital/core/arithmetic/BitExtenderTest.java
Patch:
@@ -53,6 +53,7 @@ public void testSignExtendInit() throws Exception {
                 .set(Keys.INPUT_BITS, 4)
                 .set(Keys.OUTPUT_BITS, 8));
         bitExtender.setInputs(in.asList());
+        bitExtender.init(null);
 
         assertEquals(1, bitExtender.getOutputs().get(0).getValue());
     }

File: src/main/java/de/neemann/digital/gui/components/table/TableDialog.java
Patch:
@@ -205,7 +205,7 @@ public void mouseClicked(MouseEvent event) {
             public void actionPerformed(ActionEvent e) {
                 ArrayList<String> varNames = undoManager.getActual().getVarNames();
                 if (new ElementOrderer<>(TableDialog.this, Lang.get("menu_table_reorder_inputs"), new ElementOrderer.ListOrder<>(varNames))
-                        .addDeleteButton()
+                        .addDeleteButton(2)
                         .addOkButton()
                         .showDialog()) {
 
@@ -242,7 +242,7 @@ public void actionPerformed(ActionEvent actionEvent) {
             public void actionPerformed(ActionEvent e) {
                 ArrayList<String> resultNames = undoManager.getActual().getResultNames();
                 if (new ElementOrderer<>(TableDialog.this, Lang.get("menu_table_reorder_outputs"), new ElementOrderer.ListOrder<>(resultNames))
-                        .addDeleteButton()
+                        .addDeleteButton(1)
                         .addOkButton()
                         .showDialog()) {
                     try {

File: src/main/java/de/neemann/digital/gui/components/expression/ExpressionDialog.java
Patch:
@@ -24,6 +24,8 @@
 import java.io.File;
 import java.util.ArrayList;
 
+import static de.neemann.digital.gui.components.EditorFactory.addF1Traversal;
+
 /**
  * Dialog to enter an expression.
  * Creates a new frame with a circuit generated from the entered expression.
@@ -42,7 +44,7 @@ public ExpressionDialog(Main parent, ElementLibrary library, ShapeFactory shapeF
         super(parent, Lang.get("expression"), false);
 
         String exampleEquation = "(C ∨ B) ∧ (A ∨ C) ∧ (B ∨ !C) * (C + !A)";
-        JTextArea text = new JTextArea(exampleEquation, 5, 40);
+        JTextArea text = addF1Traversal(new JTextArea(exampleEquation, 5, 40));
         getContentPane().add(new JScrollPane(text), BorderLayout.CENTER);
         getContentPane().add(new JLabel(Lang.get("msg_enterAnExpression")), BorderLayout.NORTH);
 

File: src/test/java/de/neemann/digital/integration/TestInGUI.java
Patch:
@@ -212,7 +212,8 @@ public void testExpression() {
                 .press("ENTER")
                 .press("control typed a")
                 .type("a b + b c")
-                .press("TAB", 2)
+                .press("F1", 1)
+                .press("TAB", 1)
                 .press("SPACE")
                 .delay(500)
                 .add(new GuiTester.WindowCheck<>(Main.class,

File: src/main/java/de/neemann/digital/gui/components/graphics/GraphicComponent.java
Patch:
@@ -30,9 +30,9 @@ public GraphicComponent(int width, int height) {
         this.height = height;
 
         int pw = 640 / width;
-        if (pw < 2) pw = 2;
+        if (pw < 1) pw = 1;
         int ph = 400 / height;
-        if (ph < 2) ph = 2;
+        if (ph < 1) ph = 1;
         int pixSize = (pw + ph) / 2;
 
         Dimension size = new Dimension(width * pixSize, height * pixSize);

File: src/main/java/de/neemann/digital/gui/Main.java
Patch:
@@ -273,7 +273,7 @@ public void windowClosed(WindowEvent e) {
                 library.removeListener(circuitComponent);
                 if (treeModel != null)
                     library.removeListener(treeModel);
-                windowPosManager.closeAll();
+                windowPosManager.shutdown();
             }
         });
 

File: src/main/java/de/neemann/digital/XStreamValid.java
Patch:
@@ -35,7 +35,7 @@ public XStreamValid() {
         super(new StaxDriver());
         addPermission(NoTypePermission.NONE);
         addPermission(PrimitiveTypePermission.PRIMITIVES);
-        addPermission(new ExplicitTypePermission(new Class[]{Map.class, Map.Entry.class, File.class, Color.class, String.class}));
+        addPermission(new ExplicitTypePermission(new Class[]{Map.class, Map.Entry.class, File.class, Color.class, String.class, java.util.List.class}));
         addPermission(aClass -> aClass.getName().startsWith("de.neemann."));
     }
 

File: src/main/java/de/neemann/digital/gui/components/graphics/LedMatrix.java
Patch:
@@ -79,7 +79,7 @@ public ObservableValues getOutputs() throws PinException {
     public void readInputs() throws NodeException {
         long rowData = rowDataVal.getValue();
         int colAddr = (int) colAddrVal.getValue();
-        if (colAddr < dx && data[colAddr] != rowData) {
+        if (colAddr < dx && (!ledPersist || data[colAddr] != rowData)) {
             data[colAddr] = rowData;
             dataChanged(colAddr, rowData);
         }

File: src/test/java/de/neemann/digital/integration/TestExamples.java
Patch:
@@ -43,8 +43,8 @@ public void testDistExamples() throws Exception {
      */
     public void testTestExamples() throws Exception {
         File examples = new File(Resources.getRoot(), "/dig/test");
-        assertEquals(191, new FileScanner(this::check).scan(examples));
-        assertEquals(179, testCasesInFiles);
+        assertEquals(192, new FileScanner(this::check).scan(examples));
+        assertEquals(181, testCasesInFiles);
     }
 
     /**

File: src/main/java/de/neemann/digital/fsm/gui/FSMComponent.java
Patch:
@@ -315,7 +315,7 @@ MouseMovable getElementMoved() {
     protected void paintComponent(Graphics graphics) {
         super.paintComponent(graphics);
 
-        graphics.setColor(Color.WHITE);
+        graphics.setColor(ColorScheme.getInstance().getColor(ColorKey.BACKGROUND));
         graphics.fillRect(0, 0, getWidth(), getHeight());
 
         Graphics2D gr2 = (Graphics2D) graphics;

File: src/main/java/de/neemann/digital/gui/components/CircuitComponent.java
Patch:
@@ -43,7 +43,6 @@
 import java.util.List;
 import java.util.*;
 
-import static de.neemann.digital.draw.graphics.ColorScheme.*;
 import static de.neemann.digital.draw.shapes.GenericShape.SIZE;
 import static de.neemann.digital.draw.shapes.GenericShape.SIZE2;
 
@@ -858,7 +857,7 @@ protected void paintComponent(Graphics g) {
 
             Graphics2D gr2 = buffer.createGraphics();
             enableAntiAlias(gr2);
-            gr2.setColor(getInstance().getColor(ColorKey.BACKGROUND));
+            gr2.setColor(ColorScheme.getInstance().getColor(ColorKey.BACKGROUND));
             gr2.fillRect(0, 0, getWidth(), getHeight());
 
             if (scaleX > 0.3 && Settings.getInstance().get(Keys.SETTINGS_GRID))
@@ -916,7 +915,7 @@ private void drawGrid(Graphics2D gr2) {
         if (delta > max) delta = max;
         double sub = delta / 2.0;
 
-        gr2.setColor(getInstance().getColor(ColorKey.GRID));
+        gr2.setColor(ColorScheme.getInstance().getColor(ColorKey.GRID));
         for (int x = 0; x <= cx; x++) {
             double xx = p1.getX() + (p2.getX() - p1.getX()) * x / cx - sub;
             for (int y = 0; y <= cy; y++) {

File: src/test/java/de/neemann/digital/draw/graphics/text/ParserTest.java
Patch:
@@ -20,9 +20,8 @@ public void testPlainString() throws ParseException {
         assertTrue(t instanceof Simple);
         assertEquals("In", ((Simple) t).getText());
 
-        t = new Parser("\\I^n_0").parse();
-        assertTrue(t instanceof Simple);
-        assertEquals("I^n_0", ((Simple) t).getText());
+        t = new Parser("I\\^n\\_0").parse();
+        assertEquals("I^n_0", t.toString());
 
         t = new Parser("A\\_B").parse();
         assertEquals("A_B", t.toString());

File: src/main/java/de/neemann/digital/cli/ArgumentBase.java
Patch:
@@ -102,7 +102,7 @@ public boolean isBool() {
      */
     public void toggle() throws CLIException {
         if (isBool()) {
-            boolean b = (boolean) get();
+            boolean b = (Boolean) get();
             setString(Boolean.toString(!b));
         }
     }

File: src/main/java/de/neemann/digital/builder/circuit/CircuitBuilder.java
Patch:
@@ -430,7 +430,7 @@ public Circuit createCircuit() {
             variables = order(variables, sequentialVars);
 
         if (mai != null)
-            checkForInputBus(variables, -(variables.size() + 5) * SIZE * 2, circuit);
+            checkForInputBus(variables, -SIZE * 5 - variables.size() * SIZE * 3, circuit);
 
         createInputBus(variables, circuit);
 

File: src/main/java/de/neemann/digital/core/memory/ROM.java
Patch:
@@ -12,6 +12,7 @@
 import de.neemann.digital.core.element.Keys;
 import de.neemann.digital.core.memory.importer.Importer;
 import de.neemann.digital.core.memory.rom.ROMInterface;
+import de.neemann.digital.lang.Lang;
 
 import java.io.File;
 import java.io.IOException;
@@ -106,6 +107,8 @@ public void writeOutputs() throws NodeException {
     @Override
     public void init(Model model) throws NodeException {
         if (autoLoad) {
+            if (hexFile == null)
+                throw new NodeException(Lang.get("err_ROM_noFileGivenToLoad"), this, -1, null);
             try {
                 data = Importer.read(hexFile, dataBits);
             } catch (IOException e) {

File: src/main/java/de/neemann/digital/fsm/Transition.java
Patch:
@@ -167,9 +167,9 @@ public void drawTo(Graphic gr) {
         // text
         ArrayList<String> strings = new ArrayList<>();
         if (condition != null && !condition.isEmpty())
-            strings.add(condition);
+            strings.add("$" + condition + "$");
         if (getValues() != null && !getValues().isEmpty())
-            strings.add(Lang.get("fsm_set_N", getValues()));
+            strings.add(Lang.get("fsm_set_N", "$" + getValues() + "$"));
 
         if (!strings.isEmpty()) {
             final int fontSize = Style.NORMAL.getFontSize();
@@ -186,7 +186,7 @@ public void drawTo(Graphic gr) {
             }
 
             for (String s : strings) {
-                gr.drawText(textPos, s, Orientation.CENTERCENTER, Style.INOUT);
+                gr.drawText(textPos, s, Orientation.CENTERCENTER, Style.NORMAL);
                 textPos = textPos.add(0, fontSize);
             }
         }

File: src/main/java/de/neemann/digital/draw/shapes/DataShape.java
Patch:
@@ -77,6 +77,7 @@ public void drawTo(Graphic graphic, Style heighLight) {
     @Override
     public void registerModel(ModelCreator modelCreator, Model model, ModelEntry element) {
         ArrayList<Signal> signals = model.getSignalsCopy();
+        signals.removeIf(signal -> !signal.isShowInGraph());
         new OrderMerger<String, Signal>(modelCreator.getCircuit().getMeasurementOrdering()) {
             @Override
             public boolean equals(Signal a, String b) {

File: src/main/java/de/neemann/digital/gui/components/table/TableDialog.java
Patch:
@@ -428,7 +428,7 @@ public void actionPerformed(ActionEvent e) {
             public void actionPerformed(ActionEvent e) {
                 try {
                     ModelAnalyserInfo modelAnalyzerInfo = undoManager.getActual().getModelAnalyzerInfo();
-                    if (modelAnalyzerInfo.isSequential())
+                    if (modelAnalyzerInfo != null && modelAnalyzerInfo.isSequential())
                         JOptionPane.showMessageDialog(
                                 TableDialog.this,
                                 Lang.get("menu_table_createFunctionFixture_isSequential"));

File: src/test/java/de/neemann/digital/docu/DocuTest.java
Patch:
@@ -327,7 +327,7 @@ public void testDocu() throws IOException, NodeException, PinException, Transfor
             File pdf = new File(target, basename + ".pdf");
             startFOP(fopFactory, xslFO, pdf);
 
-            copy(pdf, new File(target2, "Doc_" + l + ".pdf"));
+            copy(pdf, new File(target2, "Doc_" + l.getFileName() + ".pdf"));
         }
     }
 

File: src/main/java/de/neemann/digital/draw/shapes/RAMShape.java
Patch:
@@ -6,6 +6,7 @@
 package de.neemann.digital.draw.shapes;
 
 import de.neemann.digital.core.Model;
+import de.neemann.digital.core.Node;
 import de.neemann.digital.core.NodeException;
 import de.neemann.digital.core.SyncAccess;
 import de.neemann.digital.core.element.*;
@@ -73,6 +74,8 @@ public void clicked(CircuitComponent cc, Point pos, IOState ioState, Element ele
                     RAMInterface ram = (RAMInterface) element;
                     DataField dataField = ram.getMemory();
                     DataEditor dataEditor = new DataEditor(cc, dataField, dataBits, addrBits, true, modelSync, ram.getIntFormat());
+                    if (element instanceof Node)
+                        dataEditor.setNode((Node) element);
                     dataEditor.showDialog(dialogTitle, model);
                 }
             }

File: src/main/java/de/neemann/digital/gui/Main.java
Patch:
@@ -1460,7 +1460,7 @@ private void showMeasurementGraph(ModelEvent updateEvent) {
 
     private void showMeasurementDialog(ModelEvent updateEvent) {
         List<String> ordering = circuitComponent.getCircuit().getMeasurementOrdering();
-        windowPosManager.register("probe", new ProbeDialog(this, model, updateEvent, ordering, circuitComponent)).setVisible(true);
+        windowPosManager.register("probe", new ProbeDialog(this, model, updateEvent, ordering)).setVisible(true);
     }
 
     /**

File: src/main/java/de/neemann/digital/core/SyncAccess.java
Patch:
@@ -41,7 +41,8 @@ public <A extends ModelRun> A modifyNEx(A run) throws NodeException {
 
         @Override
         public <A extends Runnable> A read(A run) {
-            return null;
+            run.run();
+            return run;
         }
     };
 

File: src/test/java/de/neemann/digital/integration/TestInGUI.java
Patch:
@@ -434,7 +434,7 @@ public void testHardware() {
                 .press("control typed a")
                 .typeTempFile("test")
                 .press("ENTER")
-                .delay(300)
+                .delay(600)
                 .add(new GuiTester.WaitFor(() -> {
                     Window activeWindow = FocusManager.getCurrentManager().getActiveWindow();
                     return !(activeWindow instanceof Main || activeWindow instanceof TableDialog);
@@ -915,7 +915,7 @@ public void testRomDialog() {
                 .press("RIGHT", 1)
                 .press("DOWN", 1)
                 .press("ENTER", 1)
-                .press("control TAB", 4)
+                .press("control TAB", 7)
                 .press("RIGHT", 1)
                 .add(new GuiTester.SetFocusTo<>(AttributeDialog.class,
                         b -> b instanceof JButton && Lang.get("btn_edit").equals(((JButton) b).getText())))

File: src/test/java/de/neemann/digital/docu/DocuTest.java
Patch:
@@ -59,6 +59,8 @@ private void writeXML(Writer w, File images, String language, File libFile) thro
                 .append(Lang.get("tableOfContent"))
                 .append("\" lang=\"")
                 .append(language)
+                .append("\" fontFamily=\"")
+                .append(language.equals("cn") ? "SimSun" : "SansSerif")
                 .append("\" rev=\"")
                 .append(System.getProperty("buildnumber"))
                 .append("\" revt=\"")

File: src/main/java/de/neemann/digital/draw/shapes/LayoutShape.java
Patch:
@@ -227,7 +227,7 @@ private void createPosition(HashMap<String, PinPos> map, Vector startPos, int le
             } else {
                 // length: user defined width, always larger or equal to pins.size()+1
 
-                int delta = length / (pins.size() + 1);
+                int delta = (length + 2) / (pins.size() + 1);
 
                 int pinsOnly = delta * (pins.size() - 1);
 

File: src/main/java/de/neemann/digital/core/element/Keys.java
Patch:
@@ -434,7 +434,7 @@ private Keys() {
      * shape setting
      */
     public static final Key<Boolean> SETTINGS_IEEE_SHAPES
-            = new Key<>("IEEEShapes", Locale.getDefault().getLanguage().equals(Locale.US.getLanguage())).setRequiresRestart();
+            = new Key<>("IEEEShapes", !Locale.getDefault().getLanguage().equals(Locale.GERMAN.getLanguage())).setRequiresRestart();
 
     /**
      * The GUI Language

File: src/main/java/de/neemann/digital/hdl/verilog2/VerilogGenerator.java
Patch:
@@ -98,7 +98,7 @@ public VerilogGenerator export(Circuit circuit) throws IOException {
             }
 
             return this;
-        } catch (PinException | NodeException | HDLException | HGSEvalException e) {
+        } catch (PinException | NodeException | HDLException | HGSEvalException | NullPointerException e) {
             throw new IOException(Lang.get("err_verilogExporting"), e);
         }
     }

File: src/main/java/de/neemann/digital/hdl/vhdl2/VHDLGenerator.java
Patch:
@@ -85,7 +85,7 @@ public VHDLGenerator export(Circuit circuit) throws IOException {
             }
 
             return this;
-        } catch (PinException | NodeException | HDLException | HGSEvalException e) {
+        } catch (PinException | NodeException | HDLException | HGSEvalException | NullPointerException e) {
             throw new IOException(Lang.get("err_vhdlExporting"), e);
         }
     }

File: src/main/java/de/neemann/digital/hdl/hgs/Context.java
Patch:
@@ -515,9 +515,9 @@ protected Object f(Object... args) {
                     if (sb.length() == 0)
                         sb.append('n');
                     sb.append(c);
-                } else if ((c >= 'A' && c <= 'Z') ||
-                        (c >= 'a' && c <= 'z') ||
-                        c == '_') {
+                } else if ((c >= 'A' && c <= 'Z')
+                        || (c >= 'a' && c <= 'z')
+                        || c == '_') {
                     sb.append(c);
                 }
             }

File: src/main/java/de/neemann/digital/gui/components/CircuitComponent.java
Patch:
@@ -1713,6 +1713,8 @@ private void insertWirePin(Pin p, VisualElement element, Modifications.Builder<C
         for (VisualElement ve : el) {
             final Pin pinAt = ve.getPinAt(pos);
             if (pinAt != null) {
+                if (found != null)
+                    return;
                 found = pinAt;
             }
             if (ve.isPinPos(p.getPos()))

File: src/main/java/de/neemann/digital/draw/shapes/custom/CustomShapeDescription.java
Patch:
@@ -49,7 +49,7 @@ private CustomShapeDescription(HashMap<String, Pin> pins, ArrayList<Holder> draw
     Pin getPin(String name) throws PinException {
         final Pin pin = pins.get(name);
         if (pin == null)
-            throw new PinException(Lang.get("err_pin_N_notFound", name));
+            throw new PinException(Lang.get("err_customShapeHasNoPin_N", name));
         return pin;
     }
 

File: src/main/java/de/neemann/digital/gui/SaveAsHelper.java
Patch:
@@ -34,6 +34,7 @@ public final class SaveAsHelper {
         KNOWN.add("tt2");
         KNOWN.add("cupl");
         KNOWN.add("jed");
+        KNOWN.add("zip");
     }
 
     private final Component parent;

File: src/test/java/de/neemann/digital/hdl/model2/HDLModelTest.java
Patch:
@@ -21,7 +21,7 @@ public class HDLModelTest extends TestCase {
 
     private HDLCircuit getCircuit(String filename, HDLClockIntegrator ci) throws IOException, PinException, HDLException, NodeException, ElementNotFoundException {
         ToBreakRunner br = new ToBreakRunner(filename);
-        return new HDLCircuit(br.getCircuit(), "main", new HDLModel(br.getLibrary()), ci);
+        return new HDLCircuit(br.getCircuit(), "main", new HDLModel(br.getLibrary()), 0, ci);
     }
 
     public void testSimple() throws IOException, PinException, HDLException, NodeException, ElementNotFoundException {

File: src/test/java/de/neemann/digital/hdl/verilog2/DescriptionTest.java
Patch:
@@ -26,7 +26,7 @@ public void testDescription() throws PinException, NodeException, ElementNotFoun
                 br.getCircuit(),
                 "main"
                 , new HDLModel(br.getLibrary()),
-                null)
+                0, null)
                 .applyDefaultOptimizations();
         CodePrinterStr out = new CodePrinterStr();
         new VerilogCreator(out, br.getLibrary()).printHDLCircuit(circuit, "naming");

File: src/test/java/de/neemann/digital/hdl/vhdl2/ClockTest.java
Patch:
@@ -123,7 +123,7 @@ String create(HDLClockIntegrator ci) throws IOException, PinException, NodeExcep
         HDLCircuit c = new HDLCircuit(
                 br.getCircuit(), "main",
                 new HDLModel(br.getLibrary()),
-                ci);
+                0, ci);
 
         c.applyDefaultOptimizations();
 

File: src/test/java/de/neemann/digital/hdl/vhdl2/DescriptionTest.java
Patch:
@@ -26,7 +26,7 @@ public void testDescription() throws PinException, NodeException, ElementNotFoun
                 br.getCircuit(),
                 "main"
                 , new HDLModel(br.getLibrary()),
-                null)
+                0, null)
                 .applyDefaultOptimizations();
         CodePrinterStr out = new CodePrinterStr();
         new VHDLCreator(out, br.getLibrary()).printHDLCircuit(circuit);

File: src/test/java/de/neemann/digital/hdl/vhdl2/VHDLSimulatorTest.java
Patch:
@@ -34,7 +34,7 @@ public class VHDLSimulatorTest extends TestCase {
 
     /*
     public void testDebug() throws Exception {
-        File file = new File(Resources.getRoot(), "/dig/test/pinControl/simple.dig");
+        File file = new File(Resources.getRoot(), "/dig/test/pinControl/nesting.dig");
 
         ToBreakRunner br = new ToBreakRunner(file);
         System.out.println(new VHDLGenerator(br.getLibrary(), new CodePrinterStr(true)).export(br.getCircuit()));

File: src/main/java/de/neemann/digital/hdl/model2/HDLModel.java
Patch:
@@ -10,7 +10,6 @@
 import de.neemann.digital.core.basic.*;
 import de.neemann.digital.core.element.ElementTypeDescription;
 import de.neemann.digital.core.element.Keys;
-import de.neemann.digital.core.element.PinDescription;
 import de.neemann.digital.core.io.Const;
 import de.neemann.digital.core.io.DipSwitch;
 import de.neemann.digital.core.io.Ground;

File: src/main/java/de/neemann/digital/hdl/model2/HDLNet.java
Patch:
@@ -7,7 +7,6 @@
 
 import de.neemann.digital.hdl.model2.expression.ExprConstant;
 import de.neemann.digital.hdl.printer.CodePrinter;
-import de.neemann.digital.hdl.vhdl2.VHDLTestBenchCreator;
 import de.neemann.digital.lang.Lang;
 
 import java.io.IOException;
@@ -187,6 +186,7 @@ void setIsOutput(String name, boolean singleRead) {
 
     /**
      * @return the number of bits on this net
+     * @throws HDLException HDLException
      */
     public int getBits() throws HDLException {
         if (output != null)

File: src/main/java/de/neemann/digital/hdl/model2/HDLNode.java
Patch:
@@ -9,7 +9,6 @@
 import de.neemann.digital.hdl.model2.expression.Expression;
 import de.neemann.digital.hdl.model2.expression.Visitor;
 import de.neemann.digital.hdl.printer.CodePrinter;
-import de.neemann.digital.hdl.vhdl2.VHDLTestBenchCreator;
 
 import java.io.IOException;
 import java.util.ArrayList;

File: src/main/java/de/neemann/digital/builder/Gal22v10/Gal22v10JEDECExporter.java
Patch:
@@ -17,7 +17,7 @@
 import java.io.OutputStream;
 
 /**
- * Class to create a JEDEC file for the Lattice GAL16V8
+ * Class to create a JEDEC file for the Lattice GAL22V10
  */
 public class Gal22v10JEDECExporter implements ExpressionExporter<Gal22v10JEDECExporter> {
     private static final int[] PRODUCTS_BY_OLMC = new int[]{8, 10, 12, 14, 16, 16, 14, 12, 10, 8};

File: src/main/java/de/neemann/digital/builder/jedec/FuseMap.java
Patch:
@@ -6,6 +6,8 @@
 package de.neemann.digital.builder.jedec;
 
 /**
+ * Represents the fuses in the fuse map.
+ * Fuse data is represented by bytes containing 8 fuses each
  */
 public class FuseMap {
 

File: src/main/java/de/neemann/digital/builder/jedec/FuseMapFiller.java
Patch:
@@ -26,8 +26,6 @@ public class FuseMapFiller {
 
     /**
      * Creates a new instance
-     * The given vars list needs to contain all variables connected to the matrix in the correct order.
-     * If a variable in the matrix is not used, you have to add a null to the variables list.
      *
      * @param fuseMap            the fuse map to fill
      * @param varsConnectedToMap the number variables available in matrix

File: src/main/java/de/neemann/digital/gui/components/SingleValueDialog.java
Patch:
@@ -87,7 +87,7 @@ public SingleValueDialog(JFrame parent, Point pos, String label, ObservableValue
 
         editValue = value.getValue();
         this.supportsHighZ = supportsHighZ;
-        mask = (1L << value.getBits()) - 1;
+        mask = Bits.mask(value.getBits());
 
         textField = new JTextField(10);
         textField.setHorizontalAlignment(JTextField.RIGHT);

File: src/main/java/de/neemann/digital/hdl/model2/optimizations/InlineManyToOne.java
Patch:
@@ -21,7 +21,7 @@ public void optimize(HDLCircuit circuit) {
             if (node instanceof HDLNodeAssignment) {
                 HDLNodeAssignment assign = (HDLNodeAssignment) node;
                 final HDLNet net = assign.getTargetNet();
-                if (net.getInputs().size() == 1) {
+                if (net != null && net.getInputs().size() == 1) {
                     HDLNode receiver = net.getInputs().get(0).getParent();
                     if (receiver instanceof HDLNodeSplitterManyToOne) {
                         HDLNodeSplitterManyToOne mto = (HDLNodeSplitterManyToOne) receiver;

File: src/main/java/de/neemann/digital/draw/elements/Circuit.java
Patch:
@@ -28,12 +28,12 @@
 import de.neemann.digital.draw.shapes.Drawable;
 import de.neemann.digital.draw.shapes.ShapeFactory;
 import de.neemann.digital.draw.shapes.custom.CustomShapeDescription;
+import de.neemann.digital.gui.components.TransformHolder;
 import de.neemann.digital.lang.Lang;
 import de.neemann.digital.testing.TestCaseDescription;
 import de.neemann.digital.undo.Copyable;
 import de.neemann.gui.language.Language;
 
-import java.awt.geom.AffineTransform;
 import java.io.*;
 import java.nio.charset.StandardCharsets;
 import java.util.*;
@@ -99,7 +99,7 @@ public static XStream getxStream() {
         xStream.alias("text", CustomShapeDescription.TextHolder.class);
         xStream.alias("polygon", Polygon.class);
         xStream.alias("shapeType", CustomCircuitShapeType.class);
-        xStream.alias("transform", AffineTransform.class);
+        xStream.alias("transform", TransformHolder.class);
         xStream.registerConverter(new PolygonConverter());
         return xStream;
     }

File: src/main/java/de/neemann/digital/analyse/TruthTable.java
Patch:
@@ -171,6 +171,7 @@ public void clear(Collection<? extends Variable> vars) {
         variables.clear();
         variables.addAll(vars);
         results.clear();
+        bitSetter = null;
     }
 
     /**

File: src/main/java/de/neemann/digital/gui/components/table/TableDialog.java
Patch:
@@ -212,11 +212,11 @@ public void actionPerformed(ActionEvent e) {
                         undoManager.apply(tt -> {
                             try {
                                 new ReorderInputs(tt, varNames).reorder();
-                                tableChanged();
                             } catch (ExpressionException ex) {
                                 throw new ModifyException("failed to reorder", ex);
                             }
                         });
+                        tableChanged();
                     } catch (ModifyException e1) {
                         new ErrorMessage().addCause(e1).show(TableDialog.this);
                     }
@@ -248,11 +248,11 @@ public void actionPerformed(ActionEvent e) {
                         undoManager.apply(tt -> {
                             try {
                                 new ReorderOutputs(tt, resultNames).reorder();
-                                tableChanged();
                             } catch (ExpressionException ex) {
                                 throw new ModifyException("failed to reorder", ex);
                             }
                         });
+                        tableChanged();
                     } catch (ModifyException e1) {
                         new ErrorMessage().addCause(e1).show(TableDialog.this);
                     }

File: src/main/java/de/neemann/digital/draw/graphics/VectorInterface.java
Patch:
@@ -98,6 +98,9 @@ public interface VectorInterface {
     VectorInterface getOrthogonal();
 
     /**
+     * Calculates the scalar product
+     *
+     * @param v the vector to multiply with
      * @return the scalar product
      */
     default float scalar(VectorInterface v) {

File: src/main/java/de/neemann/digital/draw/shapes/DILShape.java
Patch:
@@ -104,7 +104,7 @@ public void drawTo(Graphic graphic, Style highLight) {
                         .add(x - pin, -SIZE)
                         .add(x - pin, h)
                         .add(pin, h), Style.NORMAL);
-        graphic.drawText(new Vector(x / 2, SIZE2), shortName, Orientation.LEFTCENTER, Style.NORMAL_TEXT);
+        graphic.drawText(new Vector(x / 2, SIZE2), new Vector(x / 2, SIZE * 2), shortName, Orientation.LEFTCENTER, Style.NORMAL_TEXT);
 
         if (label != null && label.length() > 0)
             graphic.drawText(new Vector(x / 2, h + SIZE2), label, Orientation.CENTERTOP, Style.NORMAL_TEXT);

File: src/main/java/de/neemann/digital/draw/graphics/Graphic.java
Patch:
@@ -64,6 +64,7 @@ public Graphic setBoundingBox(VectorInterface min, VectorInterface max) {
      *
      * @param p1          point to draw the text
      * @param p2          point at the left of p1, is used to determine the correct orientation of the text after transforming coordinates
+     * @param p3          point at the top of p1, is used to determine the correct orientation of the text after transforming coordinates
      * @param text        the text
      * @param orientation the text orientation
      * @param style       the text style

File: src/main/java/de/neemann/digital/draw/graphics/GraphicMinMax.java
Patch:
@@ -95,6 +95,7 @@ public void drawText(VectorInterface p1, VectorInterface p2, VectorInterface p3,
      * @param gr          the Graphic instance to use
      * @param p1          point to draw the text
      * @param p2          at the left of p1, is used to determine the correct orientation of the text after transforming coordinates
+     * @param p3          at the top of p1, is used to determine the correct orientation of the text after transforming coordinates
      * @param text        the text
      * @param orientation the texts orientation
      * @param style       the text style

File: src/main/java/de/neemann/digital/core/memory/CounterPreset.java
Patch:
@@ -64,9 +64,10 @@ public CounterPreset(ElementAttributes attributes) {
         this.out = new ObservableValue("out", bits).setPinDescription(DESCRIPTION);
         this.ovf = new ObservableValue("ovf", 1).setPinDescription(DESCRIPTION);
 
-        long m = attributes.get(Keys.MAX_VALUE);
+        long mask = Bits.mask(bits);
+        long m = attributes.get(Keys.MAX_VALUE) & mask;
         if (m == 0)
-            m = Bits.mask(bits);
+            m = mask;
         maxValue = m;
 
         probe = attributes.get(Keys.VALUE_IS_PROBE);

File: src/main/java/de/neemann/digital/draw/graphics/Style.java
Patch:
@@ -167,7 +167,7 @@ private Style(Builder builder) {
         this.mattersForSize = builder.mattersForSize;
 
         stroke = new BasicStroke(thickness, builder.endCap, BasicStroke.JOIN_MITER, 10f, dash, 0f);
-        font = new Font("Arial", fontStyle, fontSize);
+        font = new Font(null, fontStyle, fontSize);
     }
 
     /**

File: src/main/java/de/neemann/digital/gui/components/graphics/MoveFocusTo.java
Patch:
@@ -27,7 +27,8 @@ public MoveFocusTo(Window parent) {
 
     @Override
     public void windowGainedFocus(WindowEvent windowEvent) {
-        SwingUtilities.invokeLater(parent::requestFocus);
+        if (parent != null)
+            SwingUtilities.invokeLater(parent::requestFocus);
     }
 
     @Override

File: src/main/java/de/neemann/digital/gui/components/table/TableDialog.java
Patch:
@@ -327,7 +327,7 @@ public void actionPerformed(ActionEvent actionEvent) {
                 }
             }
         }.setAcceleratorCTRLplus("Y");
-        
+
         edit.add(undo.createJMenuItem());
         edit.add(redo.createJMenuItem());
         undoManager.addListener(() -> {

File: src/test/java/de/neemann/digital/integration/TestInGUI.java
Patch:
@@ -332,7 +332,7 @@ public void testCounterJK() {
         new GuiTester()
                 .use(create4BitCounterTruthTable)
                 .press("F10")
-                .press("RIGHT", 4)
+                .press("RIGHT", 3)
                 .press("DOWN", 2)
                 .press("ENTER")
                 .delay(500)
@@ -424,7 +424,7 @@ public void testHardware() {
                 }))
                 .delay(500)
                 .press("F10")
-                .press("RIGHT", 4)
+                .press("RIGHT", 3)
                 .press("DOWN", 7)
                 .press("RIGHT")
                 .press("DOWN", 2)
@@ -947,7 +947,7 @@ public void visit(Component component) {
                             assertEquals(4, model.getRowCount());
                             for (int i = 0; i < 4; i++) {
                                 final Object valueAt = model.getValueAt(i, 1);
-                                assertEquals("0x0", valueAt.toString());
+                                assertEquals("0", valueAt.toString());
                             }
                             found();
                         }

File: src/main/java/de/neemann/digital/core/memory/CounterPreset.java
Patch:
@@ -66,7 +66,7 @@ public CounterPreset(ElementAttributes attributes) {
 
         long m = attributes.get(Keys.MAX_VALUE);
         if (m == 0)
-            m = (1L << bits) - 1;
+            m = Bits.mask(bits);
         maxValue = m;
 
         probe = attributes.get(Keys.VALUE_IS_PROBE);

File: src/main/java/de/neemann/digital/core/memory/Counter.java
Patch:
@@ -49,7 +49,7 @@ public Counter(ElementAttributes attributes) {
         int bits = attributes.getBits();
         this.out = new ObservableValue("out", bits).setPinDescription(DESCRIPTION);
         this.ovf = new ObservableValue("ovf", 1).setPinDescription(DESCRIPTION);
-        maxValue = (1L << bits) - 1;
+        maxValue = Bits.mask(bits);
         probe = attributes.get(Keys.VALUE_IS_PROBE);
         label = attributes.getLabel();
     }

File: src/main/java/de/neemann/digital/gui/components/terminal/Keyboard.java
Patch:
@@ -71,7 +71,7 @@ public void readInputs() throws NodeException {
         enableVal = enable.getBool();
         boolean nowClock = clock.getBool();
 
-        if (keyboardInterface != null && !nowClock && lastClock && enableVal)
+        if (keyboardInterface != null && nowClock && !lastClock && enableVal)
             keyboardInterface.deleteFirstChar();
 
         lastClock = nowClock;

File: src/test/java/de/neemann/digital/integration/TestExamples.java
Patch:
@@ -32,7 +32,7 @@ public class TestExamples extends TestCase {
      */
     public void testDistExamples() throws Exception {
         File examples = new File(Resources.getRoot().getParentFile().getParentFile(), "/main/dig");
-        assertEquals(283, new FileScanner(this::check).scan(examples));
+        assertEquals(281, new FileScanner(this::check).scan(examples));
         assertEquals(191, testCasesInFiles);
     }
 

File: src/main/java/de/neemann/digital/gui/components/CircuitComponent.java
Patch:
@@ -283,7 +283,7 @@ private void enableFavoritePositions() {
                 @Override
                 public void actionPerformed(ActionEvent actionEvent) {
                     ElementAttributes attr = new ElementAttributes(getCircuit().getAttributes());
-                    attr.set(key, transform);
+                    attr.set(key, new AffineTransform(transform));
                     modify(new ModifyCircuitAttributes(attr));
                 }
             }.setAcceleratorCTRLplus((char) ('0' + i)).enableAcceleratorIn(this);
@@ -292,7 +292,7 @@ public void actionPerformed(ActionEvent actionEvent) {
                 public void actionPerformed(ActionEvent actionEvent) {
                     AffineTransform tr = getCircuit().getAttributes().get(key);
                     if (!tr.isIdentity()) {
-                        transform = tr;
+                        transform = new AffineTransform(tr);
                         isManualScale = true;
                         graphicHasChanged();
                         if (circuitScrollPanel != null)

File: src/main/java/de/neemann/digital/core/flipflops/FlipflopRSAsync.java
Patch:
@@ -91,7 +91,7 @@ public void writeOutputs() throws NodeException {
     @Override
     public void setInputs(ObservableValues inputs) throws BitsException {
         sVal = inputs.get(0).addObserverToValue(this).checkBits(1, this, 0);
-        rVal = inputs.get(1).addObserverToValue(this).checkBits(1, this, 2);
+        rVal = inputs.get(1).addObserverToValue(this).checkBits(1, this, 1);
     }
 
 }

File: src/main/java/de/neemann/digital/fsm/gui/FSMFrame.java
Patch:
@@ -348,7 +348,7 @@ public void actionPerformed(ActionEvent e) {
             public void actionPerformed(ActionEvent e) {
                 fsmComponent.scaleCircuit(1 / 0.9);
             }
-        }.setAccelerator("control PLUS");
+        }.setAcceleratorCTRLplus("PLUS");
         // enable [+] which is SHIFT+[=] on english keyboard layout
         fsmComponent.getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_EQUALS, KeyEvent.CTRL_DOWN_MASK, false), zoomIn);
         fsmComponent.getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_ADD, KeyEvent.CTRL_DOWN_MASK, false), zoomIn);
@@ -359,7 +359,7 @@ public void actionPerformed(ActionEvent e) {
             public void actionPerformed(ActionEvent e) {
                 fsmComponent.scaleCircuit(0.9);
             }
-        }.setAccelerator("control MINUS");
+        }.setAcceleratorCTRLplus("MINUS");
         // enable [+] which is SHIFT+[=] on english keyboard layout
         fsmComponent.getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_SUBTRACT, KeyEvent.CTRL_DOWN_MASK, false), zoomOut);
         fsmComponent.getActionMap().put(zoomOut, zoomOut);

File: src/main/java/de/neemann/digital/gui/Main.java
Patch:
@@ -352,7 +352,7 @@ public void actionPerformed(ActionEvent e) {
             public void actionPerformed(ActionEvent e) {
                 circuitComponent.scaleCircuit(1 / 0.9);
             }
-        }.setAccelerator("control PLUS");
+        }.setAcceleratorCTRLplus("PLUS");
         // enable [+] which is SHIFT+[=] on english keyboard layout
         circuitComponent.getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_EQUALS, KeyEvent.CTRL_DOWN_MASK, false), zoomIn);
         circuitComponent.getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_ADD, KeyEvent.CTRL_DOWN_MASK, false), zoomIn);
@@ -363,7 +363,7 @@ public void actionPerformed(ActionEvent e) {
             public void actionPerformed(ActionEvent e) {
                 circuitComponent.scaleCircuit(0.9);
             }
-        }.setAccelerator("control MINUS");
+        }.setAcceleratorCTRLplus("MINUS");
         // enable [+] which is SHIFT+[=] on english keyboard layout
         circuitComponent.getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_SUBTRACT, KeyEvent.CTRL_DOWN_MASK, false), zoomOut);
         circuitComponent.getActionMap().put(zoomOut, zoomOut);

File: src/main/java/de/neemann/digital/gui/components/data/GraphDialog.java
Patch:
@@ -129,13 +129,13 @@ public void actionPerformed(ActionEvent e) {
             public void actionPerformed(ActionEvent e) {
                 graphComponent.scale(1.25f, getWidth() / 2);
             }
-        }.setAccelerator("control PLUS");
+        }.setAcceleratorCTRLplus("PLUS");
         ToolTipAction zoomOut = new ToolTipAction(Lang.get("menu_zoomOut"), ICON_ZOOM_OUT) {
             @Override
             public void actionPerformed(ActionEvent e) {
                 graphComponent.scale(0.8f, getWidth() / 2);
             }
-        }.setAccelerator("control MINUS");
+        }.setAcceleratorCTRLplus("MINUS");
 
         showTable = new ToolTipAction(Lang.get("menu_showDataAsTable")) {
             @Override

File: src/main/java/de/neemann/digital/draw/graphics/Graphic.java
Patch:
@@ -18,7 +18,7 @@ public interface Graphic extends Closeable {
     /**
      * The available flags
      */
-    enum Flag {noShapeFilling, smallIO, hideTest, noPinMarker, thinnerLines}
+    enum Flag {noShapeFilling, smallIO, hideTest, noPinMarker, thinnerLines, tiny}
 
     /**
      * Sets the bounding box of the future usage of this instance

File: src/main/java/de/neemann/digital/hdl/model2/HDLNet.java
Patch:
@@ -7,6 +7,7 @@
 
 import de.neemann.digital.hdl.model2.expression.ExprConstant;
 import de.neemann.digital.hdl.printer.CodePrinter;
+import de.neemann.digital.lang.Lang;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -50,7 +51,7 @@ public boolean isUserNamed() {
     public void addPort(HDLPort hdlPort) throws HDLException {
         if (hdlPort.getDirection().equals(HDLPort.Direction.OUT)) {
             if (output != null)
-                throw new HDLException("multiple outputs connected to net " + name + ": " + output + " and " + hdlPort);
+                throw new HDLException(Lang.get("err_hdlMultipleOutputsConnectedToNet_N_N_N", name, output, hdlPort));
             output = hdlPort;
         } else
             inputs.add(hdlPort);

File: src/main/java/de/neemann/digital/core/memory/DataField.java
Patch:
@@ -182,6 +182,8 @@ public int trim() {
      * @return the new length of the data array
      */
     private int trim(int size) {
+        if (size > data.length)
+            size = data.length;
         while (size > 0 && data[size - 1] == 0) size--;
         if (size < data.length)
             data = Arrays.copyOf(data, size);

File: src/main/java/de/neemann/digital/gui/components/DataEditor.java
Patch:
@@ -135,7 +135,9 @@ public void actionPerformed(ActionEvent e) {
                     if (fc.showOpenDialog(DataEditor.this) == JFileChooser.APPROVE_OPTION) {
                         fileName = fc.getSelectedFile();
                         try {
-                            localDataField.setDataFrom(Importer.read(fc.getSelectedFile(), dataBits));
+                            DataField dataRead = Importer.read(fc.getSelectedFile(), dataBits)
+                                    .trimValues(addrBits, dataBits);
+                            localDataField.setDataFrom(dataRead);
                             dm.fireEvent(new TableModelEvent(dm));
                         } catch (IOException e1) {
                             new ErrorMessage(Lang.get("msg_errorReadingFile")).addCause(e1).show(DataEditor.this);

File: src/main/java/de/neemann/digital/draw/shapes/GenericShape.java
Patch:
@@ -209,7 +209,7 @@ public void drawTo(Graphic graphic, Style highLight) {
         int top = topBottomBorder;
         if (outputs.size() > 1) {
             top += 3;
-            yBottom += 6;
+            yBottom += 3;
         }
 
         Polygon polygon = new Polygon(true)

File: src/main/java/de/neemann/digital/gui/components/CircuitComponent.java
Patch:
@@ -5,7 +5,6 @@
  */
 package de.neemann.digital.gui.components;
 
-import de.neemann.digital.analyse.expression.Variable;
 import de.neemann.digital.core.NodeException;
 import de.neemann.digital.core.ObservableValue;
 import de.neemann.digital.core.Observer;

File: src/main/java/de/neemann/digital/draw/shapes/ShapeFactory.java
Patch:
@@ -212,7 +212,7 @@ public Shape getShape(String elementName, ElementAttributes elementAttributes) {
                                 return new LayoutShape(customDescr, elementAttributes);
                             case CUSTOM:
                                 final CustomShapeDescription customShapeDescription = customDescr.getAttributes().get(Keys.CUSTOM_SHAPE);
-                                if (customShapeDescription != CustomShapeDescription.EMPTY)
+                                if (!customShapeDescription.isEmpty())
                                     return new CustomShape(customShapeDescription, elementAttributes.getLabel(),
                                             pt.getInputDescription(elementAttributes),
                                             pt.getOutputDescriptions(elementAttributes));

File: src/main/java/de/neemann/digital/gui/components/CustomShapeEditor.java
Patch:
@@ -52,7 +52,7 @@ public JComponent getComponent(ElementAttributes attr) {
         clear = new ToolTipAction(Lang.get("btn_clearData")) {
             @Override
             public void actionPerformed(ActionEvent e) {
-                customShapeDescription = CustomShapeDescription.EMPTY;
+                customShapeDescription = new CustomShapeDescription.Builder().build();
             }
         };
         panel.add(clear.createJButton());

File: src/main/java/de/neemann/digital/gui/components/EditorFactory.java
Patch:
@@ -1010,12 +1010,12 @@ public boolean showDialog() {
         }
 
         private InverterConfig getInverterConfig() {
-            InverterConfig ic = new InverterConfig();
+            InverterConfig.Builder ic = new InverterConfig.Builder();
             for (JCheckBox cb : boxes) {
                 if (cb.isSelected())
                     ic.add(cb.getText());
             }
-            return ic;
+            return ic.build();
         }
     }
 

File: src/main/java/de/neemann/digital/gui/components/ROMEditorDialog.java
Patch:
@@ -206,7 +206,7 @@ private ROMManger createRomManager() {
             for (RomHolder rh : romlist)
                 rm.addRom(rh.ri.getLabel(), rh.data);
 
-            return rm.getMinimized();
+            return rm;
         }
     }
 

File: src/main/java/de/neemann/digital/testing/TestCaseElement.java
Patch:
@@ -18,7 +18,7 @@ public class TestCaseElement implements Element {
     /**
      * the used {@link ElementAttributes} key
      */
-    public static final Key<TestCaseDescription> TESTDATA = new Key<>("Testdata", TestCaseDescription.DEFAULT);
+    public static final Key<TestCaseDescription> TESTDATA = new Key<>("Testdata", () -> new TestCaseDescription(""));
 
     /**
      * The TestCaseElement description

File: src/main/java/de/neemann/digital/draw/shapes/ShapeFactory.java
Patch:
@@ -212,7 +212,7 @@ public Shape getShape(String elementName, ElementAttributes elementAttributes) {
                                 return new LayoutShape(customDescr, elementAttributes);
                             case CUSTOM:
                                 final CustomShapeDescription customShapeDescription = customDescr.getAttributes().get(Keys.CUSTOM_SHAPE);
-                                if (customShapeDescription != CustomShapeDescription.EMPTY)
+                                if (!customShapeDescription.isEmpty())
                                     return new CustomShape(customShapeDescription, elementAttributes.getLabel(),
                                             pt.getInputDescription(elementAttributes),
                                             pt.getOutputDescriptions(elementAttributes));

File: src/main/java/de/neemann/digital/gui/components/CustomShapeEditor.java
Patch:
@@ -52,7 +52,7 @@ public JComponent getComponent(ElementAttributes attr) {
         clear = new ToolTipAction(Lang.get("btn_clearData")) {
             @Override
             public void actionPerformed(ActionEvent e) {
-                customShapeDescription = CustomShapeDescription.EMPTY;
+                customShapeDescription = new CustomShapeDescription.Builder().build();
             }
         };
         panel.add(clear.createJButton());

File: src/main/java/de/neemann/digital/gui/components/EditorFactory.java
Patch:
@@ -1010,12 +1010,12 @@ public boolean showDialog() {
         }
 
         private InverterConfig getInverterConfig() {
-            InverterConfig ic = new InverterConfig();
+            InverterConfig.Builder ic = new InverterConfig.Builder();
             for (JCheckBox cb : boxes) {
                 if (cb.isSelected())
                     ic.add(cb.getText());
             }
-            return ic;
+            return ic.build();
         }
     }
 

File: src/main/java/de/neemann/digital/gui/components/ROMEditorDialog.java
Patch:
@@ -206,7 +206,7 @@ private ROMManger createRomManager() {
             for (RomHolder rh : romlist)
                 rm.addRom(rh.ri.getLabel(), rh.data);
 
-            return rm.getMinimized();
+            return rm;
         }
     }
 

File: src/main/java/de/neemann/digital/testing/TestCaseElement.java
Patch:
@@ -18,7 +18,7 @@ public class TestCaseElement implements Element {
     /**
      * the used {@link ElementAttributes} key
      */
-    public static final Key<TestCaseDescription> TESTDATA = new Key<>("Testdata", TestCaseDescription.DEFAULT);
+    public static final Key<TestCaseDescription> TESTDATA = new Key<>("Testdata", () -> new TestCaseDescription(""));
 
     /**
      * The TestCaseElement description

File: src/main/java/de/neemann/digital/gui/components/CircuitComponent.java
Patch:
@@ -1335,7 +1335,7 @@ private class MouseDispatcher extends MouseAdapter implements MouseMotionListene
 
         @Override
         public void mousePressed(MouseEvent e) {
-            hadFocusAtClick = SwingUtilities.getWindowAncestor(CircuitComponent.this).isFocused();
+            hadFocusAtClick = hasFocus() || parent.hasMouseFocus();
             pos = new Vector(e.getX(), e.getY());
             isMoved = false;
             requestFocusInWindow();

File: src/main/java/de/neemann/digital/gui/components/CircuitComponent.java
Patch:
@@ -1335,7 +1335,7 @@ private class MouseDispatcher extends MouseAdapter implements MouseMotionListene
 
         @Override
         public void mousePressed(MouseEvent e) {
-            hadFocusAtClick = hasFocus();
+            hadFocusAtClick = SwingUtilities.getWindowAncestor(CircuitComponent.this).isFocused();
             pos = new Vector(e.getX(), e.getY());
             isMoved = false;
             requestFocusInWindow();

File: src/main/java/de/neemann/digital/gui/components/table/ExpressionComponent.java
Patch:
@@ -29,7 +29,8 @@ public class ExpressionComponent extends JComponent {
      */
     public void setExpression(Expression expression) {
         ArrayList<Expression> l = new ArrayList<>();
-        l.add(expression);
+        if (expression != null)
+            l.add(expression);
         setExpressions(l);
     }
 

File: src/main/java/de/neemann/digital/gui/components/DataEditor.java
Patch:
@@ -340,6 +340,9 @@ private MyLongRenderer(int bits) {
 
         @Override
         protected void setValue(Object value) {
+            if (value == null)
+                super.setValue(value);
+
             String str = Long.toHexString(((MyLong) value).getValue()).toUpperCase();
             while (str.length() < chars) str = "0" + str;
             super.setValue(str);

File: src/main/java/de/neemann/digital/gui/SaveAsHelper.java
Patch:
@@ -31,6 +31,9 @@ public final class SaveAsHelper {
         KNOWN.add("csv");
         KNOWN.add("gif");
         KNOWN.add("png");
+        KNOWN.add("tt2");
+        KNOWN.add("cupl");
+        KNOWN.add("jed");
     }
 
     private final Component parent;

File: src/main/java/de/neemann/digital/builder/tt2/TT2Exporter.java
Patch:
@@ -43,7 +43,7 @@ public TT2Exporter(String projectName) {
         // if simple aliases are filtered out, a direct input to output connection isn't possible anymore
         builder = new BuilderCollector();
         cleanNameBuilder = new CleanNameBuilder(builder);
-        pinMap = new PinMap().setClockPin(43);
+        pinMap = cleanNameBuilder.createPinMap().setClockPin(43);
         device = "f1502ispplcc44";
         this.projectName = projectName;
     }

File: src/test/java/de/neemann/digital/analyse/ModelAnalyserTest.java
Patch:
@@ -185,8 +185,8 @@ public void testAnalyzerUniqueNames4() throws Exception {
     public void testAnalyzerMultiBit() throws Exception {
         Model model = createModel("dig/analyze/multiBitCounter.dig");
         TruthTable tt = new ModelAnalyser(model).analyse();
-        checkTable(tt.getResult("Q0^{n+1}"), one, zero, one, zero);
-        checkTable(tt.getResult("Q1^{n+1}"), zero, one, one, zero);
+        checkTable(tt.getResult("Q_0^{n+1}"), one, zero, one, zero);
+        checkTable(tt.getResult("Q_1^{n+1}"), zero, one, one, zero);
 
         assertEquals("Y1", tt.getResultName(2));
         assertEquals("Y0", tt.getResultName(3));

File: src/main/java/de/neemann/digital/builder/circuit/CircuitBuilder.java
Patch:
@@ -9,7 +9,6 @@
 import de.neemann.digital.analyse.ModelAnalyserInfo;
 import de.neemann.digital.analyse.expression.*;
 import de.neemann.digital.analyse.expression.Not;
-import de.neemann.digital.analyse.expression.format.FormatterException;
 import de.neemann.digital.builder.BuilderException;
 import de.neemann.digital.builder.BuilderInterface;
 import de.neemann.digital.core.basic.*;
@@ -182,7 +181,7 @@ public CircuitBuilder addSequential(String name, Expression expression) throws B
                         fragments.add(new FragmentExpression(Arrays.asList(frJ, frK), fe));
                     }
                 }
-            } catch (ExpressionException | FormatterException e) {
+            } catch (ExpressionException e) {
                 throw new BuilderException(e.getMessage());
             }
         }

File: src/test/java/de/neemann/digital/analyse/DetermineJKStateMachineTest.java
Patch:
@@ -28,7 +28,7 @@ public class DetermineJKStateMachineTest extends TestCase {
     private Expression c;
     private Expression notc;
 
-    public void setUp() throws Exception {
+    public void setUp() {
         a = v("a");
         nota = not(a);
         b = v("b");

File: src/main/java/de/neemann/digital/gui/components/karnaugh/KarnaughMapComponent.java
Patch:
@@ -8,7 +8,6 @@
 import de.neemann.digital.analyse.expression.Expression;
 import de.neemann.digital.analyse.expression.Not;
 import de.neemann.digital.analyse.expression.Variable;
-import de.neemann.digital.analyse.expression.format.FormatToExpression;
 import de.neemann.digital.analyse.quinemc.BoolTable;
 import de.neemann.digital.draw.graphics.text.formatter.GraphicsFormatter;
 import de.neemann.digital.lang.Lang;
@@ -22,8 +21,6 @@
 import java.awt.geom.Rectangle2D;
 import java.util.ArrayList;
 
-import static de.neemann.digital.analyse.expression.Not.not;
-
 /**
  * JComponent to show a kv map.
  */

File: src/main/java/de/neemann/digital/analyse/expression/format/FormatToTable.java
Patch:
@@ -17,7 +17,7 @@
 public class FormatToTable implements Formatter {
 
     @Override
-    public String format(Expression expression) throws FormatterException, ExpressionException {
+    public String format(Expression expression) throws ExpressionException {
         StringBuilder sb = new StringBuilder();
         ContextFiller cf = new ContextFiller(expression);
         formatHead(sb, cf.getVarCount());

File: src/main/java/de/neemann/digital/draw/graphics/text/formatter/GraphicsFormatter.java
Patch:
@@ -130,6 +130,7 @@ public static Fragment createFragment(Graphics2D gr, Expression expression) thro
      * @param font       the font
      * @param expression the expression
      * @return the fragment
+     * @throws FormatterException FormatterException
      */
     public static Fragment createFragment(FontSizer sizer, Font font, Expression expression) throws FormatterException {
         if (expression instanceof Variable) {

File: src/main/java/de/neemann/digital/draw/graphics/text/formatter/GraphicsFormatter.java
Patch:
@@ -58,7 +58,6 @@ public static Fragment createFragment(FontSizer sizer, Font font, String text) {
             // if there was an exception, return the complete raw text as a fragment
             fragment = new TextFragment(sizer, font, text);
         }
-        fragment.dx += font.getSize() / 10;
         return fragment;
     }
 
@@ -132,7 +131,7 @@ public static Fragment createFragment(Graphics2D gr, Expression expression) thro
      * @param expression the expression
      * @return the fragment
      */
-    private static Fragment createFragment(FontSizer sizer, Font font, Expression expression) throws FormatterException {
+    public static Fragment createFragment(FontSizer sizer, Font font, Expression expression) throws FormatterException {
         if (expression instanceof Variable) {
             String ident = ((Variable) expression).getIdentifier();
             return createFragment(sizer, font, ident);

File: src/test/java/de/neemann/digital/analyse/expression/format/FormatToExpressionTest.java
Patch:
@@ -75,8 +75,8 @@ public void testFormatExpNot2() throws Exception {
     public void testFormatExpLaTeX() throws Exception {
         Variable a = new Variable("A_n");
         Variable b = new Variable("B_n");
-        Expression e = new NamedExpression("Y_n+1", and(a, not(b)));
-        assertEquals("Y_{n+1} = A_{n} \\und \\nicht{B_{n}}", FormatToExpression.FORMATTER_LATEX.format(e));
+        Expression e = new NamedExpression("Y^n+1", and(a, not(b)));
+        assertEquals("Y^{n+1} = A_n \\und \\nicht{B_n}", FormatToExpression.FORMATTER_LATEX.format(e));
     }
 
     public void testFormatTable() throws Exception {

File: src/test/java/de/neemann/digital/analyse/format/TruthTableFormatterLaTeXTest.java
Patch:
@@ -19,7 +19,7 @@ public void testFormat() throws Exception {
 
         assertEquals("\\begin{center}\n" +
                 "\\begin{tabular}{ccc|cc}\n" +
-                "$A$&$B$&$C$&$Y_{0}$&$Y_{1}$\\\\\n" +
+                "$A$&$B$&$C$&$Y_0$&$Y_1$\\\\\n" +
                 "\\hline\n" +
                 "$0$&$0$&$0$&$0$&$0$\\\\\n" +
                 "$0$&$0$&$1$&$0$&$0$\\\\\n" +

File: src/main/java/de/neemann/digital/gui/components/table/AllSolutionsDialog.java
Patch:
@@ -15,8 +15,6 @@
 import java.awt.event.WindowEvent;
 import java.util.ArrayList;
 
-import static de.neemann.digital.draw.graphics.text.formatter.GraphicsFormatter.createFragment;
-
 /**
  * Simple Dialog to show all possible functions of a truth table.
  */

File: src/main/java/de/neemann/digital/gui/components/AttributeDialog.java
Patch:
@@ -318,7 +318,7 @@ Window getDialogParent() {
     /**
      * @return true if ok is pressed
      */
-    boolean isOkPressed() {
+    public boolean isOkPressed() {
         return okPressed;
     }
 

File: src/test/java/de/neemann/digital/integration/TestExamples.java
Patch:
@@ -33,7 +33,7 @@ public class TestExamples extends TestCase {
     public void testDistExamples() throws Exception {
         File examples = new File(Resources.getRoot().getParentFile().getParentFile(), "/main/dig");
         assertEquals(269, new FileScanner(this::check).scan(examples));
-        assertEquals(184, testCasesInFiles);
+        assertEquals(186, testCasesInFiles);
     }
 
     /**

File: src/main/java/de/neemann/digital/data/DataPlotter.java
Patch:
@@ -164,11 +164,11 @@ public void run() {
                     if (width == 0) width = 1;
                     long value = s.getValue(i).getValue();
                     int ry;
-                    if (Math.abs(width >>> 1) < Integer.MAX_VALUE) {
+                    long sWidth = (width >>> 32);
+                    if (sWidth == 0) {
                         ry = (int) (SIZE - (SIZE * value) / width);
                     } else {
-                        width = (width >>> 32);
-                        ry = (int) (SIZE - (SIZE * (value >>> 32)) / width);
+                        ry = (int) (SIZE - (SIZE * (value >>> 32)) / sWidth);
                     }
 
                     if (value != last[i].value)

File: src/main/java/de/neemann/digital/gui/components/CircuitComponent.java
Patch:
@@ -1168,11 +1168,12 @@ public void labelPins() {
     }
 
     private VisualElement getActualVisualElement() {
+        if (activeMouseController instanceof MouseControllerMoveElement)
+            mouseNormal.activate();
+
         VisualElement ve = null;
         if (activeMouseController instanceof MouseControllerNormal)
             ve = getCircuit().getElementAt(getPosVector(lastMousePos.x, lastMousePos.y));
-//        if (activeMouseController instanceof MouseControllerMoveElement)
-//            ve = ((MouseControllerMoveElement) activeMouseController).getVisualElement();
         return ve;
     }
 

File: src/main/java/de/neemann/digital/gui/components/table/TableDialog.java
Patch:
@@ -62,6 +62,8 @@
 import java.util.StringTokenizer;
 import java.util.prefs.Preferences;
 
+import static de.neemann.digital.draw.graphics.GraphicSVG.escapeXML;
+
 /**
  *
  */
@@ -811,6 +813,7 @@ private HTMLFormatter(FormatToExpression format) {
 
         @Override
         public String identifier(String ident) {
+            ident = escapeXML(ident);
             int p = ident.indexOf("_");
             if (p < 0)
                 return ident;

File: src/test/java/de/neemann/digital/draw/graphics/GraphicSVGIndexTest.java
Patch:
@@ -14,9 +14,9 @@ public void testFormatText() throws Exception {
         GraphicSVGIndex gs = new GraphicSVGIndex(System.out, null, 30);
         gs.setBoundingBox(new Vector(0, 0), new Vector(30, 30));
 
-        assertEquals("Z<tspan style=\"font-size:80%;baseline-shift:sub\">0</tspan>", gs.formatText("Z_0", Style.NORMAL));
+        assertEquals("Z<tspan style=\"font-size:80%;baseline-shift:sub;\">0</tspan>", gs.formatText("Z_0", Style.NORMAL));
         assertEquals("&lt;a&gt;", gs.formatText("<a>", Style.NORMAL));
-        assertEquals("\u00ACZ", gs.formatText("~Z", Style.NORMAL));
+        assertEquals("<tspan style=\"text-decoration:overline;\">Z</tspan>", gs.formatText("~Z", Style.NORMAL));
     }
 
 }

File: src/main/java/de/neemann/digital/draw/graphics/GraphicSVG.java
Patch:
@@ -180,9 +180,9 @@ public void drawText(VectorInterface p1, VectorInterface p2, String text, Orient
             }
 
             if (rotateText)
-                w.write("<text text-anchor=\"" + getAchor(orientation.getX()) + "\" x=\"" + p.getXFloat() + "\" y=\"" + p.getYFloat() + "\" fill=\"" + getColor(style) + "\" style=\"font-size:" + style.getFontSize() + "\" transform=\"rotate(-90," + str(p1) + ")\" >" + text + "</text>\n");
+                w.write("<text text-anchor=\"" + getAchor(orientation.getX()) + "\" x=\"" + p.getXFloat() + "\" y=\"" + p.getYFloat() + "\" fill=\"" + getColor(style) + "\" style=\"font-size:" + style.getFontSize() + "px\" transform=\"rotate(-90," + str(p1) + ")\" >" + text + "</text>\n");
             else
-                w.write("<text text-anchor=\"" + getAchor(orientation.getX()) + "\" x=\"" + p.getXFloat() + "\" y=\"" + p.getYFloat() + "\" fill=\"" + getColor(style) + "\" style=\"font-size:" + style.getFontSize() + "\">" + text + "</text>\n");
+                w.write("<text text-anchor=\"" + getAchor(orientation.getX()) + "\" x=\"" + p.getXFloat() + "\" y=\"" + p.getYFloat() + "\" fill=\"" + getColor(style) + "\" style=\"font-size:" + style.getFontSize() + "px\">" + text + "</text>\n");
         } catch (IOException e) {
             throw new RuntimeException(e);
         }

File: src/test/java/de/neemann/digital/integration/GuiTester.java
Patch:
@@ -175,6 +175,8 @@ public void execute() {
                             SwingUtilities.invokeLater(() -> main.setTitle(displayName + " - Digital"));
                     } else
                         main = new Main.MainBuilder().setCircuit(new Circuit()).build();
+                    main.setSize(1024,768);
+                    main.setLocationRelativeTo(null);
                     main.setVisible(true);
                 });
                 Thread.sleep(500);

File: src/main/java/de/neemann/digital/testing/parser/Parser.java
Patch:
@@ -169,7 +169,7 @@ private LineEmitter parseSingleRow() throws IOException, ParserException {
                     break;
                 case OPEN:
                     exp = parseExpression();
-                    line.add((vals, context) -> vals.add(new Value((int) exp.value(context))));
+                    line.add((vals, context) -> vals.add(new Value(exp.value(context))));
                     expect(Tokenizer.Token.CLOSE);
                     break;
                 case EOF:

File: src/test/java/de/neemann/digital/core/memory/DataFieldTest.java
Patch:
@@ -62,7 +62,7 @@ public void testSave() throws IOException {
                 "7\n" +
                 "8\n" +
                 "9\n" +
-                "a\n", w.toString());
+                "a\n", w.toString().replace("\r",""));
     }
 
     public void testSaveEmpty() throws IOException {
@@ -71,7 +71,7 @@ public void testSaveEmpty() throws IOException {
         StringWriter w = new StringWriter();
         data.saveTo(w);
 
-        assertEquals("v2.0 raw\n", w.toString());
+        assertEquals("v2.0 raw\n", w.toString().replace("\r",""));
     }
 
     public void testSaveRLE() throws IOException {
@@ -97,7 +97,7 @@ public void testSaveRLE() throws IOException {
                 "7*6\n" +
                 "8*7\n" +
                 "9*8\n" +
-                "10*9\n", w.toString());
+                "10*9\n", w.toString().replace("\r",""));
 
         DataField readData = new DataField(100);
         LogisimReader r = new LogisimReader(new StringReader(w.toString()));

File: src/test/java/de/neemann/digital/integration/Resources.java
Patch:
@@ -6,6 +6,7 @@
 package de.neemann.digital.integration;
 
 import java.io.File;
+import java.net.URISyntaxException;
 
 /**
  */

File: src/test/java/de/neemann/digital/toolchain/ConfigurationTest.java
Patch:
@@ -100,7 +100,7 @@ public void testFileWriter() throws IOException, ElementNotFoundException, PinEx
 
         assertEquals(4, fileWriter.files.size());
         assertEquals("deal with {?=path?}", fileWriter.files.get("z/file1").toString());
-        assertEquals("deal with z/test.dig, Bits: 1 (A)", fileWriter.files.get("z/file2").toString());
+        assertEquals("deal with z/test.dig, Bits: 1 (A)", fileWriter.files.get("z/file2").toString().replace('\\', '/'));
         assertEquals("test", fileWriter.files.get("z/test.z").toString());
     }
 
@@ -112,7 +112,7 @@ static class TestIOInterface implements Configuration.IOInterface {
         @Override
         public OutputStream getOutputStream(File filename) {
             final ByteArrayOutputStream baos = new ByteArrayOutputStream();
-            files.put(filename.getPath(), baos);
+            files.put(filename.getPath().replace('\\', '/'), baos);
             return baos;
         }
 

File: src/test/java/de/neemann/digital/hdl/model2/HDLModelTest.java
Patch:
@@ -342,7 +342,7 @@ public void testSplitter4() throws IOException, PinException, HDLException, Node
                 "    in(in:4 reads (A->2))\n" +
                 "    out(2,3:2 defines (s1->1))\n" +
                 "    s1->1 := A(3-2)\n" +
-                "  node s-inc.dig\n" +
+                "  node s_inc.dig\n" +
                 "    in(A:2 reads (s0->1), B:2 reads (s1->1))\n" +
                 "    out(C:2 defines (S->1))\n" +
                 "\n" +

File: src/test/java/de/neemann/digital/hdl/vhdl2/VHDLSimulatorTest.java
Patch:
@@ -14,7 +14,6 @@
 import de.neemann.digital.gui.Settings;
 import de.neemann.digital.hdl.model2.HDLException;
 import de.neemann.digital.hdl.printer.CodePrinter;
-import de.neemann.digital.hdl.printer.CodePrinterStr;
 import de.neemann.digital.integration.FileScanner;
 import de.neemann.digital.integration.Resources;
 import de.neemann.digital.integration.TestExamples;

File: src/test/java/de/neemann/digital/integration/TestExamples.java
Patch:
@@ -32,7 +32,7 @@ public class TestExamples extends TestCase {
      */
     public void testDistExamples() throws Exception {
         File examples = new File(Resources.getRoot().getParentFile().getParentFile(), "/main/dig");
-        assertEquals(266, new FileScanner(this::check).scan(examples));
+        assertEquals(265, new FileScanner(this::check).scan(examples));
         assertEquals(181, testCasesInFiles);
     }
 
@@ -43,8 +43,8 @@ public void testDistExamples() throws Exception {
      */
     public void testTestExamples() throws Exception {
         File examples = new File(Resources.getRoot(), "/dig/test");
-        assertEquals(172, new FileScanner(this::check).scan(examples));
-        assertEquals(164, testCasesInFiles);
+        assertEquals(181, new FileScanner(this::check).scan(examples));
+        assertEquals(168, testCasesInFiles);
     }
 
     /**

File: src/main/java/de/neemann/digital/gui/SaveAsHelper.java
Patch:
@@ -22,11 +22,12 @@ public final class SaveAsHelper {
 
     static {
         KNOWN.add("dig");
+        KNOWN.add("fsm");
+        KNOWN.add("hex");
+        KNOWN.add("tru");
         KNOWN.add("svg");
         KNOWN.add("vhdl");
         KNOWN.add("v");
-        KNOWN.add("hex");
-        KNOWN.add("tru");
         KNOWN.add("csv");
         KNOWN.add("gif");
         KNOWN.add("png");

File: src/main/java/de/neemann/digital/gui/SaveAsHelper.java
Patch:
@@ -5,7 +5,6 @@
  */
 package de.neemann.digital.gui;
 
-import de.neemann.digital.analyse.quinemc.TableRows;
 import de.neemann.digital.lang.Lang;
 import de.neemann.gui.ErrorMessage;
 
@@ -17,7 +16,6 @@
 
 /**
  * Helper to handle the overwrite conformation
- * <p>
  */
 public final class SaveAsHelper {
     private static final HashSet<String> KNOWN = new HashSet<>();

File: src/main/java/de/neemann/digital/testing/FolderTestRunner.java
Patch:
@@ -196,10 +196,10 @@ public void run() {
                     if (testCases.isEmpty())
                         setMessage(f, i, Lang.get("err_noTestData"), FileToTest.Status.unknown);
                     else {
-                        Model model = new ModelCreator(circuit, library).createModel(false);
                         StringBuilder sb = new StringBuilder();
                         int rowCount = 0;
                         for (TestCase tc : testCases) {
+                            Model model = new ModelCreator(circuit, library).createModel(false);
                             try {
                                 TestExecutor te = new TestExecutor(tc.testData).create(model);
                                 if (te.allPassed()) {

File: src/main/java/de/neemann/digital/analyse/SubstituteLibrary.java
Patch:
@@ -139,7 +139,7 @@ public ElementTypeDescription getElementType(ElementAttributes attr, ElementLibr
 
                 Circuit circuit = Circuit.loadCircuit(in, library.getShapeFactory());
 
-                typeDescriptionCustom = ElementLibrary.createCustomDescription(new File(filename), circuit, library);
+                typeDescriptionCustom = ElementLibrary.createCustomDescription(new File(filename), circuit, library).isSubstitutedBuiltIn();
             }
             return typeDescriptionCustom;
         }
@@ -170,7 +170,7 @@ public ElementTypeDescription getElementType(ElementAttributes attr, ElementLibr
             c.getAttributes().set(Keys.IS_GENERIC, false);
             generify(attr, c);
 
-            return ElementLibrary.createCustomDescription(new File(filename), c, library);
+            return ElementLibrary.createCustomDescription(new File(filename), c, library).isSubstitutedBuiltIn();
         }
 
         private void generify(ElementAttributes attr, Circuit circuit) throws IOException {

File: src/main/java/de/neemann/digital/hdl/model2/HDLCircuit.java
Patch:
@@ -80,6 +80,9 @@ public class HDLCircuit implements Iterable<HDLNode>, HDLModel.BitProvider, Prin
      * @throws NodeException NodeException
      */
     public HDLCircuit(Circuit circuit, String elementName, HDLModel c, HDLClockIntegrator clockIntegrator) throws PinException, HDLException, NodeException {
+        if (circuit.getAttributes().get(Keys.IS_GENERIC))
+            throw new HDLException(Lang.get("err_genericCircuitsAreNotYetSupported"));
+
         this.elementName = elementName;
 
         if (elementName.toLowerCase().endsWith(".dig"))

File: src/main/java/de/neemann/digital/draw/library/LibraryInterface.java
Patch:
@@ -18,6 +18,7 @@ public interface LibraryInterface {
      * @param elementName the name of the element
      * @param attr        the elements attributes
      * @return the ElementTypeDescription
+     * @throws ElementNotFoundException ElementNotFoundException
      */
     ElementTypeDescription getElementType(String elementName, ElementAttributes attr) throws ElementNotFoundException;
 }

File: src/main/java/de/neemann/digital/gui/components/table/AllSolutionsDialog.java
Patch:
@@ -12,7 +12,6 @@
 import java.awt.*;
 import java.awt.event.WindowAdapter;
 import java.awt.event.WindowEvent;
-import java.awt.event.WindowListener;
 
 /**
  * Simple Dialog to show all possible functions of a truth table.

File: src/main/java/de/neemann/digital/gui/components/CircuitComponent.java
Patch:
@@ -1558,6 +1558,8 @@ private void insertWirePin(Pin p, int rotate, Modifications.Builder<Circuit> wir
      */
     public void setCircuitScrollPanel(CircuitScrollPanel circuitScrollPanel) {
         this.circuitScrollPanel = circuitScrollPanel;
+        if (circuitScrollPanel!=null)
+            circuitScrollPanel.transformChanged(transform);
     }
 
     private final class MouseControllerMoveElement extends MouseController {

File: src/main/java/de/neemann/digital/gui/components/CircuitScrollPanel.java
Patch:
@@ -44,11 +44,11 @@ public CircuitScrollPanel(CircuitComponent circuitComponent) {
         add(vertical, BorderLayout.EAST);
 
         horizontal.addAdjustmentListener(adjustmentEvent -> {
-            if (adjustmentEvent.getValueIsAdjusting())
+            if (adjustmentEvent.getValueIsAdjusting() && transform != null)
                 circuitComponent.translateCircuitToX(-adjustmentEvent.getValue() * transform.getScaleX());
         });
         vertical.addAdjustmentListener(adjustmentEvent -> {
-            if (adjustmentEvent.getValueIsAdjusting())
+            if (adjustmentEvent.getValueIsAdjusting() && transform != null)
                 circuitComponent.translateCircuitToY(-adjustmentEvent.getValue() * transform.getScaleY());
         });
 

File: src/main/java/de/neemann/digital/undo/UndoManager.java
Patch:
@@ -43,6 +43,8 @@ public void setInitial(A initial) {
         this.initial = initial;
         actual = null;
         modifications = new ArrayList<>();
+        modificationCounter = 0;
+        savedCounter = 0;
     }
 
 

File: src/main/java/de/neemann/digital/gui/SaveAsHelper.java
Patch:
@@ -102,7 +102,7 @@ public static File checkSuffix(File filename, String suffix) {
 
         String name = filename.getName();
         int p = name.lastIndexOf('.');
-        if (p >= 0)
+        if (p >= 0 && p == name.length() - 4)
             name = name.substring(0, p);
         return new File(filename.getParentFile(), name + "." + suffix);
     }

File: src/main/java/de/neemann/digital/draw/elements/Circuit.java
Patch:
@@ -215,7 +215,8 @@ public Circuit createDeepCopy() {
      */
     public Circuit createShallowCopy() {
         Circuit circuit = new Circuit();
-        circuit.attributes = new ElementAttributes(attributes);
+        if (attributes != null)
+            circuit.attributes = new ElementAttributes(attributes);
         circuit.wires.addAll(wires);
         circuit.visualElements.addAll(visualElements);
         return circuit;

File: src/main/java/de/neemann/digital/gui/components/CircuitComponent.java
Patch:
@@ -125,7 +125,7 @@ public static ArrayList<Key> getAttrList() {
     private AffineTransform transform = new AffineTransform();
     private Observer manualChangeObserver;
     private Vector lastMousePos;
-    private SyncAccess modelSync;
+    private SyncAccess modelSync = SyncAccess.NOSYNC;
     private boolean isManualScale;
     private boolean graphicsHasChanged = true;
     private boolean focusWasLost = false;
@@ -264,6 +264,8 @@ public void focusLost(FocusEvent focusEvent) {
         addMouseMotionListener(dispatcher);
         addMouseListener(dispatcher);
 
+        mouseNormal.activate();
+
         setToolTipText("");
     }
 

File: src/test/java/de/neemann/digital/toolchain/ConfigurationTest.java
Patch:
@@ -123,7 +123,7 @@ public void startProcess(Command command, File dir, String[] args) {
 
         @Override
         public void showError(Command command, Exception e) {
-            throw new RuntimeException(command.getName(), e);
+            fail(e.getMessage());
         }
 
         void clear() {

File: src/main/java/de/neemann/digital/core/io/Probe.java
Patch:
@@ -54,7 +54,7 @@ public ObservableValues getOutputs() {
     @Override
     public void registerNodes(Model model) {
         model.addSignal(new Signal(label, value).setFormat(format));
-        GlobalValues.getInstance().register(label, value, model);
+        model.registerGlobalValue(label, value);
     }
 
 }

File: src/main/java/de/neemann/digital/draw/model/ModelCreator.java
Patch:
@@ -269,7 +269,7 @@ private Net getNetOfIOAndRemove(Pin p) throws PinException {
      * @throws NodeException NodeException
      */
     public Model createModel(boolean attachWires) throws PinException, NodeException {
-        Model m = new Model();
+        Model m = new Model().setAllowGlobalValues(attachWires);
 
         for (Net n : netList)
             n.interconnect(m, attachWires);

File: src/main/java/de/neemann/digital/hdl/hgs/Context.java
Patch:
@@ -404,7 +404,7 @@ private FunctionAbs() {
         @Override
         protected Object f(Object... args) throws HGSEvalException {
             if (args[0] instanceof Double)
-                return Math.abs((Double)args[0]);
+                return Math.abs((Double) args[0]);
 
             return Math.abs(Value.toLong(args[0]));
         }

File: src/main/java/de/neemann/digital/hdl/hgs/Value.java
Patch:
@@ -259,6 +259,7 @@ public static Object not(Object value) throws HGSEvalException {
      *
      * @param value the value
      * @return value with changed sign
+     * @throws HGSEvalException HGSEvalException
      */
     public static Object neg(Object value) throws HGSEvalException {
         if (value instanceof Double)

File: src/main/java/de/neemann/digital/toolchain/Configuration.java
Patch:
@@ -262,7 +262,7 @@ Thread executeCommand(Command command, Action action) {
                             getIoInterface().startProcess(command, digFile.getParentFile(), args);
                         }
                     } catch (Exception e) {
-                        getIoInterface().showError(command, e);
+                        SwingUtilities.invokeLater(() -> getIoInterface().showError(command, e));
                     } finally {
                         if (action != null)
                             SwingUtilities.invokeLater(() -> action.setEnabled(true));
@@ -426,7 +426,7 @@ public void startProcess(Command command, File dir, String[] args) throws IOExce
 
         @Override
         public void showError(Command command, Exception e) {
-            SwingUtilities.invokeLater(new ErrorMessage(Lang.get("msg_errorStartCommand_N", command.getName())).addCause(e));
+            new ErrorMessage(Lang.get("msg_errorStartCommand_N", command.getName())).addCause(e).show();
         }
     }
 

File: src/main/java/de/neemann/digital/gui/components/modification/ModifyDeleteWire.java
Patch:
@@ -27,6 +27,5 @@ public ModifyDeleteWire(Wire wire) {
     @Override
     public void modify(Circuit circuit) throws ModifyException {
         circuit.delete(getWire(circuit));
-        throw new ModifyException("test");
     }
 }

File: src/main/java/de/neemann/digital/gui/components/CopiedElementLabelRenamer.java
Patch:
@@ -172,7 +172,7 @@ public int hashCode() {
         }
     }
 
-    private final class MinIndex {
+    private static final class MinIndex {
         private int min;
 
         private MinIndex(int number) {
@@ -189,7 +189,7 @@ public int getMin() {
         }
     }
 
-    private final class PresentIndex {
+    private static final class PresentIndex {
         private HashSet<Integer> numbers;
         private int max = Integer.MIN_VALUE;
 

File: src/main/java/de/neemann/digital/gui/components/modification/ModifyAttribute.java
Patch:
@@ -9,6 +9,7 @@
 import de.neemann.digital.draw.elements.Circuit;
 import de.neemann.digital.draw.elements.VisualElement;
 import de.neemann.digital.lang.Lang;
+import de.neemann.digital.undo.ModifyException;
 
 /**
  * Modifies an attribute.
@@ -34,7 +35,7 @@ public ModifyAttribute(VisualElement ve, Key<VALUE> key, VALUE value) {
     }
 
     @Override
-    public void modify(Circuit circuit) {
+    public void modify(Circuit circuit) throws ModifyException {
         VisualElement ve = getVisualElement(circuit);
         ve.getElementAttributes().set(key, value);
     }

File: src/main/java/de/neemann/digital/gui/components/modification/ModifyAttributes.java
Patch:
@@ -9,6 +9,7 @@
 import de.neemann.digital.draw.elements.Circuit;
 import de.neemann.digital.draw.elements.VisualElement;
 import de.neemann.digital.lang.Lang;
+import de.neemann.digital.undo.ModifyException;
 
 /**
  * Sets all attributes of an element
@@ -29,7 +30,7 @@ public ModifyAttributes(VisualElement ve, ElementAttributes modified) {
     }
 
     @Override
-    public void modify(Circuit circuit) {
+    public void modify(Circuit circuit) throws ModifyException {
         VisualElement ve = getVisualElement(circuit);
         ve.getElementAttributes().getValuesFrom(attributes);
     }

File: src/main/java/de/neemann/digital/gui/components/modification/ModifyDeleteElement.java
Patch:
@@ -8,6 +8,7 @@
 import de.neemann.digital.draw.elements.Circuit;
 import de.neemann.digital.draw.elements.VisualElement;
 import de.neemann.digital.lang.Lang;
+import de.neemann.digital.undo.ModifyException;
 
 /**
  * Modifier which deletes an element
@@ -24,7 +25,7 @@ public ModifyDeleteElement(VisualElement ve) {
     }
 
     @Override
-    public void modify(Circuit circuit) {
+    public void modify(Circuit circuit) throws ModifyException {
         circuit.delete(getVisualElement(circuit));
     }
 }

File: src/main/java/de/neemann/digital/gui/components/modification/ModifyDeleteWire.java
Patch:
@@ -8,6 +8,7 @@
 import de.neemann.digital.draw.elements.Circuit;
 import de.neemann.digital.draw.elements.Wire;
 import de.neemann.digital.lang.Lang;
+import de.neemann.digital.undo.ModifyException;
 
 /**
  * Modifier to delete a wire
@@ -24,7 +25,8 @@ public ModifyDeleteWire(Wire wire) {
     }
 
     @Override
-    public void modify(Circuit circuit) {
+    public void modify(Circuit circuit) throws ModifyException {
         circuit.delete(getWire(circuit));
+        throw new ModifyException("test");
     }
 }

File: src/main/java/de/neemann/digital/gui/components/modification/ModifyMoveAndRotElement.java
Patch:
@@ -9,6 +9,7 @@
 import de.neemann.digital.draw.elements.VisualElement;
 import de.neemann.digital.draw.graphics.Vector;
 import de.neemann.digital.lang.Lang;
+import de.neemann.digital.undo.ModifyException;
 
 /**
  * Modifier to move and rotate a single visual element
@@ -31,7 +32,7 @@ public ModifyMoveAndRotElement(VisualElement ve, Vector pos, int rotation) {
     }
 
     @Override
-    public void modify(Circuit circuit) {
+    public void modify(Circuit circuit) throws ModifyException {
         VisualElement ve = getVisualElement(circuit);
         ve.setPos(pos);
         ve.setRotation(rotation);

File: src/main/java/de/neemann/digital/gui/components/modification/ModifyMoveWire.java
Patch:
@@ -9,6 +9,7 @@
 import de.neemann.digital.draw.elements.Wire;
 import de.neemann.digital.draw.graphics.Vector;
 import de.neemann.digital.lang.Lang;
+import de.neemann.digital.undo.ModifyException;
 
 /**
  * Modifier to move a wire
@@ -28,7 +29,7 @@ public ModifyMoveWire(Wire wire, Wire newWire) {
     }
 
     @Override
-    public void modify(Circuit circuit) {
+    public void modify(Circuit circuit) throws ModifyException {
         getWire(circuit).move(delta);
         circuit.elementsMoved();
     }

File: src/test/java/de/neemann/gui/LineBreakerTest.java
Patch:
@@ -35,8 +35,8 @@ public void testBreakLinesPreserve() throws Exception {
     }
 
     public void testBreakLinesHTML() throws Exception {
-        assertEquals("this is a test string", new LineBreaker(60).toHTML().breakLines("this is a\n   test  string"));
-        assertEquals("<html>this is a<br>test string</html>", new LineBreaker(60).toHTML().preserveContainedLineBreaks().breakLines("this is a\n   test  string"));
+        assertEquals("<html>this is a test string</html>", new LineBreaker(60).toHTML().breakLines("this is a\n   test  string"));
+        assertEquals("<html>this is a<br>test string</html>", new LineBreaker(60).toHTML().preserveContainedLineBreaks().toHTML().breakLines("this is a\n   test  string"));
     }
 
 

File: src/main/java/de/neemann/digital/core/element/Keys.java
Patch:
@@ -763,6 +763,9 @@ private static File getATMISPPath() {
     public static final Key<Boolean> MIDI_PROG_CHANGE =
             new Key<>("midiProgChange", false);
 
+    /**
+     * Number of transistors used in a circuit.
+     */
     public static final Key<Integer> TRANSISTORS =
             new Key.KeyInteger("transistors", 0)
                     .setMin(0)

File: src/main/java/de/neemann/digital/analyse/MinimizerQuineMcCluskeyExam.java
Patch:
@@ -20,7 +20,7 @@
 
 /**
  * The QMC-Minimizer used for exam correction.
- * Should only be used if there are not more then 4 variables.
+ * Should only be used if there are not more than 4 variables.
  */
 public class MinimizerQuineMcCluskeyExam extends MinimizerQuineMcCluskey {
 

File: src/main/java/de/neemann/digital/analyse/quinemc/QuineMcCluskeyExam.java
Patch:
@@ -20,7 +20,7 @@
  * Needed for exam correction.
  * It does not throw away all primes which are not necessary but tries to find the primes
  * which are necessary. So is is possible to find all possible solutions.
- * Works only if there are not more then 4 variables.
+ * Works only if there are not more than 4 variables.
  * <p>
  */
 public class QuineMcCluskeyExam extends QuineMcCluskey {

File: src/main/java/de/neemann/digital/core/BurnException.java
Patch:
@@ -10,7 +10,7 @@
 import java.util.Set;
 
 /**
- * Is thrown if more then one output of a set of connected outputs becomes active
+ * Is thrown if more than one output of a set of connected outputs becomes active
  */
 public class BurnException extends RuntimeException implements ExceptionWithOriginInterface {
     private final ObservableValues values;

File: src/main/java/de/neemann/digital/core/SpeedTest.java
Patch:
@@ -39,7 +39,7 @@ public double calculate() throws NodeException {
         if (clocks.isEmpty())
             throw new NodeException(Lang.get("err_noClockFound"));
         else if (clocks.size() > 1)
-            throw new NodeException(Lang.get("err_moreThenOneClocksFound"));
+            throw new NodeException(Lang.get("err_moreThanOneClockFound"));
 
 
         Clock clock = clocks.get(0);

File: src/main/java/de/neemann/digital/core/wiring/bus/DataBus.java
Patch:
@@ -19,7 +19,7 @@
  * Handles the creation of a data bus.
  * Is needed to connect multiple outputs which can become high Z.
  * If one of the output becomes low Z, this value is returned by the {@link ObservableValue}
- * created by this bus. If more then one output becomes low Z and the values are not equal then
+ * created by this bus. If more than one output becomes low Z and the values are not equal then
  * a {@link de.neemann.digital.core.BurnException} is thrown after the models step is completed.
  * During the calculation of of a single step a temporary burn condition is allowed.
  */

File: src/main/java/de/neemann/digital/draw/model/Net.java
Patch:
@@ -141,7 +141,7 @@ public void addNet(Net otherNet) {
      * All inputs and outputs in the net are connected together.
      * If there is no output an exception is thrown.
      * If there is one single output, all input {@link ObservableValue}s are set to this output
-     * If there are more then one output a {@link DataBus} is created.
+     * If there is more than one output, a {@link DataBus} is created.
      * <p>
      * At the end all wires get a reference to the {@link ObservableValue} the represent
      *

File: src/test/java/de/neemann/digital/analyse/quinemc/MinimizerRegressionTest.java
Patch:
@@ -56,7 +56,7 @@ public void handleTable(int n, byte[] tab) throws ExpressionException, Formatter
 
 
     /**
-     * for more then 3 variables we only test some random tables
+     * for more than 3 variables we only test some random tables
      *
      * @throws ExpressionException
      */

File: src/test/java/de/neemann/digital/integration/ToBreakRunner.java
Patch:
@@ -110,7 +110,7 @@ public ToBreakRunner runToBreak(int steps) throws NodeException {
 
     /**
      * Returns single node of the given class.
-     * If there more then one maching node, an exception is thrown.
+     * If there is more than one maching node, an exception is thrown.
      *
      * @param clazz the class
      * @param <T>   the type of the node

File: src/main/java/de/neemann/digital/core/switching/PlainSwitch.java
Patch:
@@ -94,7 +94,7 @@ static SwitchModel createSwitchModel(
                 else {
                     constant = in2.searchConstant();
                     if (constant != null)
-                        return new UniDirectionalSwitch(constant, output1, setOpenContactToHighZ);
+                        return new UniDirectionalSwitch(constant, output1, true);
                     else
                         return new RealSwitch(in1, in2);
                 }

File: src/test/java/de/neemann/digital/integration/TestExamples.java
Patch:
@@ -43,8 +43,8 @@ public void testDistExamples() throws Exception {
      */
     public void testTestExamples() throws Exception {
         File examples = new File(Resources.getRoot(), "/dig/test");
-        assertEquals(150, new FileScanner(this::check).scan(examples));
-        assertEquals(142, testCasesInFiles);
+        assertEquals(151, new FileScanner(this::check).scan(examples));
+        assertEquals(143, testCasesInFiles);
     }
 
     /**

File: src/test/java/de/neemann/digital/integration/TestExamples.java
Patch:
@@ -33,7 +33,7 @@ public class TestExamples extends TestCase {
     public void testDistExamples() throws Exception {
         File examples = new File(Resources.getRoot().getParentFile().getParentFile(), "/main/dig");
         assertEquals(250, new FileScanner(this::check).scan(examples));
-        assertEquals(170, testCasesInFiles);
+        assertEquals(171, testCasesInFiles);
     }
 
     /**

File: src/main/java/de/neemann/digital/testing/FolderTestRunner.java
Patch:
@@ -15,6 +15,7 @@
 import de.neemann.digital.draw.model.ModelCreator;
 import de.neemann.digital.draw.shapes.ShapeFactory;
 import de.neemann.digital.lang.Lang;
+import de.neemann.digital.testing.parser.ParserException;
 
 import java.io.File;
 import java.io.IOException;
@@ -221,7 +222,7 @@ public void run() {
                             setMessage(f, i, sb.toString(), FileToTest.Status.failed);
                     }
 
-                } catch (IOException | NodeException | ElementNotFoundException | PinException e) {
+                } catch (IOException | NodeException | ElementNotFoundException | PinException | ParserException | RuntimeException e) {
                     setMessage(f, i, e.getMessage(), FileToTest.Status.error);
                 }
             }

File: src/test/java/de/neemann/digital/draw/library/JarComponentManagerTest.java
Patch:
@@ -14,6 +14,7 @@
 import de.neemann.digital.testing.TestCaseElement;
 import de.neemann.digital.testing.TestExecutor;
 import de.neemann.digital.testing.TestingDataException;
+import de.neemann.digital.testing.parser.ParserException;
 import junit.framework.TestCase;
 
 import java.io.File;
@@ -30,7 +31,7 @@ public void testMissingJar() throws PinException, NodeException, IOException {
         }
     }
 
-    public void testJarAvailable() throws PinException, NodeException, IOException, ElementNotFoundException, TestingDataException {
+    public void testJarAvailable() throws PinException, NodeException, IOException, ElementNotFoundException, TestingDataException, ParserException {
         ToBreakRunner br = new ToBreakRunner("dig/jarLib/jarLibTest.dig") {
             @Override
             public void initLibrary(ElementLibrary library) {

File: src/test/java/de/neemann/digital/integration/TestExamples.java
Patch:
@@ -72,6 +72,7 @@ public void check(File dig) throws Exception {
             try {
                 for (VisualElement el : br.getCircuit().getElements())
                     if (el.equalsDescription(TestCaseElement.TESTCASEDESCRIPTION)) {
+                        testCasesInFiles++;
 
                         String label = el.getElementAttributes().getCleanLabel();
                         TestCaseDescription td = el.getElementAttributes().get(TestCaseElement.TESTDATA);
@@ -85,7 +86,6 @@ public void check(File dig) throws Exception {
                             else
                                 assertTrue(dig.getName() + ":" + label, tr.allPassed());
 
-                            testCasesInFiles++;
                         } finally {
                             model.close();
                         }

File: src/main/java/de/neemann/digital/core/io/MIDIHelper.java
Patch:
@@ -168,10 +168,10 @@ public void open() throws MidiUnavailableException {
 
             Soundbank soundbank = synthesizer.getDefaultSoundbank();
             if (soundbank == null)
-                throw new MidiUnavailableException();
+                throw new MidiUnavailableException(Lang.get("err_midiInstrumentsNotAvailable"));
 
             if (!synthesizer.loadAllInstruments(soundbank))
-                throw new MidiUnavailableException();
+                throw new MidiUnavailableException(Lang.get("err_midiInstrumentsNotAvailable"));
         }
 
         @Override

File: src/main/java/de/neemann/digital/core/io/MIDIHelper.java
Patch:
@@ -70,9 +70,9 @@ public void open(Model model) throws NodeException {
     }
 
     private void close() {
-        if (!isOpen) {
+        if (isOpen) {
             synthesizer.close();
-            synthesizer = null;
+            isOpen = false;
         }
     }
 

File: src/main/java/de/neemann/digital/draw/shapes/custom/svg/Context.java
Patch:
@@ -84,10 +84,11 @@ static Context readStyle(Context context, String style) throws SvgException {
         SVGTokenizer t = new SVGTokenizer(style);
         try {
             while (!t.isEOF()) {
-                String command = t.readTo(':');
+                final String command = t.readTo(':');
+                final String value = t.readTo(';');
                 AttrParser p = PARSER.get(command);
                 if (p != null)
-                    p.parse(context, t.readTo(';'));
+                    p.parse(context, value);
             }
             return context;
         } catch (SVGTokenizer.TokenizerException e) {

File: src/test/java/de/neemann/digital/lang/TestLang.java
Patch:
@@ -16,7 +16,7 @@
 import java.util.*;
 
 /**
- * Checks the language files to make sure they a consistent.
+ * Checks the language files to make sure they are consistent.
  */
 public class TestLang extends TestCase {
     private static final String SOURCEPATH = "/home/hneemann/Dokumente/Java/digital/src/main/java";

File: src/main/java/de/neemann/digital/draw/shapes/SevenShape.java
Patch:
@@ -68,7 +68,7 @@ static Transform createTransform(int size) {
             final TransformTranslate tr2 = new TransformTranslate(70, 139);
             float s = (2 + size) / 4f;
             final TransformMatrix trm = new TransformMatrix(s, 0, 0, s, 0, 0);
-            return Transform.mul(Transform.mul(tr2, trm), tr1);
+            return Transform.mul(tr1, Transform.mul(trm, tr2));
         }
     }
 

File: src/test/java/de/neemann/digital/integration/TestInGUI.java
Patch:
@@ -402,7 +402,7 @@ public void testHardware() {
                 .delay(500)
                 .press("F10")
                 .press("RIGHT", 4)
-                .press("DOWN", 6)
+                .press("DOWN", 7)
                 .press("RIGHT")
                 .press("DOWN", 2)
                 .press("RIGHT")

File: src/main/java/de/neemann/digital/fsm/Transition.java
Patch:
@@ -50,7 +50,7 @@ public Transition(State fromState, State toState, String condition) {
      */
     void calcForce(List<State> states, List<Transition> transitions) {
         float preferredDist = Math.max(fromState.getVisualRadius(), toState.getVisualRadius());
-        calcForce(preferredDist, states, transitions);
+        calcForce(preferredDist * 5, states, transitions);
     }
 
     /**

File: src/test/java/de/neemann/digital/hdl/verilog2/VerilogSimulatorTest.java
Patch:
@@ -45,7 +45,7 @@ public void testInSimulator() throws Exception {
         File examples = new File(Resources.getRoot(), "/dig/test/vhdl");
         try {
             int tested = new FileScanner(this::checkVerilogExport).noOutput().scan(examples);
-            assertEquals(35, tested);
+            assertEquals(37, tested);
             assertEquals(tested+2, testBenches);
         } catch (FileScanner.SkipAllException e) {
             // if iverilog is not installed its also ok

File: src/test/java/de/neemann/digital/hdl/vhdl2/VHDLSimulatorTest.java
Patch:
@@ -47,7 +47,7 @@ public void testInSimulator() throws Exception {
         File examples = new File(Resources.getRoot(), "/dig/test/vhdl");
         try {
             int tested = new FileScanner(this::checkVHDLExport).noOutput().scan(examples);
-            assertEquals(35, tested);
+            assertEquals(37, tested);
             assertEquals(tested+2, testBenches);
         } catch (FileScanner.SkipAllException e) {
             // if ghdl is not installed its also ok

File: src/test/java/de/neemann/digital/integration/TestExamples.java
Patch:
@@ -43,8 +43,8 @@ public void testDistExamples() throws Exception {
      */
     public void testTestExamples() throws Exception {
         File examples = new File(Resources.getRoot(), "/dig/test");
-        assertEquals(148, new FileScanner(this::check).scan(examples));
-        assertEquals(140, testCasesInFiles);
+        assertEquals(150, new FileScanner(this::check).scan(examples));
+        assertEquals(142, testCasesInFiles);
     }
 
     /**

File: src/main/java/de/neemann/digital/core/memory/BlockRAMDualPort.java
Patch:
@@ -17,7 +17,7 @@
 import static de.neemann.digital.core.element.PinInfo.input;
 
 /**
- * A memory which allows to overwrite single bytes.
+ * A synchronized read memory which can be synthesised by using block ram.
  */
 public class BlockRAMDualPort extends Node implements Element, RAMInterface {
 

File: src/main/java/de/neemann/digital/core/basic/And.java
Patch:
@@ -33,8 +33,8 @@ public And(ElementAttributes attributes) {
     }
 
     @Override
-    protected int calculate(ArrayList<ObservableValue> inputs) throws NodeException {
-        int f = -1;
+    protected long calculate(ArrayList<ObservableValue> inputs) throws NodeException {
+        long f = -1;
         for (ObservableValue i : inputs) {
             f &= i.getValue();
         }

File: src/main/java/de/neemann/digital/core/basic/Function.java
Patch:
@@ -30,6 +30,6 @@ public void writeOutputs() throws NodeException {
         getOutput().setValue(value);
     }
 
-    protected abstract int calculate(ArrayList<ObservableValue> inputs) throws NodeException;
+    protected abstract long calculate(ArrayList<ObservableValue> inputs) throws NodeException;
 
 }

File: src/main/java/de/neemann/digital/core/basic/NAnd.java
Patch:
@@ -33,7 +33,7 @@ public NAnd(ElementAttributes attributes) {
     }
 
     @Override
-    protected int calculate(ArrayList<ObservableValue> inputs) throws NodeException {
+    protected long calculate(ArrayList<ObservableValue> inputs) throws NodeException {
         return ~super.calculate(inputs);
     }
 }

File: src/main/java/de/neemann/digital/core/basic/NOr.java
Patch:
@@ -33,7 +33,7 @@ public NOr(ElementAttributes attributes) {
     }
 
     @Override
-    protected int calculate(ArrayList<ObservableValue> inputs) throws NodeException {
+    protected long calculate(ArrayList<ObservableValue> inputs) throws NodeException {
         return ~super.calculate(inputs);
     }
 }

File: src/main/java/de/neemann/digital/core/basic/Or.java
Patch:
@@ -33,8 +33,8 @@ public Or(ElementAttributes attributes) {
     }
 
     @Override
-    protected int calculate(ArrayList<ObservableValue> inputs) throws NodeException {
-        int f = 0;
+    protected long calculate(ArrayList<ObservableValue> inputs) throws NodeException {
+        long f = 0;
         for (ObservableValue i : inputs) {
             f |= i.getValue();
         }

File: src/main/java/de/neemann/digital/core/basic/XNOr.java
Patch:
@@ -33,7 +33,7 @@ public XNOr(ElementAttributes attributes) {
     }
 
     @Override
-    protected int calculate(ArrayList<ObservableValue> inputs) throws NodeException {
+    protected long calculate(ArrayList<ObservableValue> inputs) throws NodeException {
         return ~super.calculate(inputs);
     }
 }

File: src/main/java/de/neemann/digital/core/basic/XOr.java
Patch:
@@ -33,8 +33,8 @@ public XOr(ElementAttributes attributes) {
     }
 
     @Override
-    protected int calculate(ArrayList<ObservableValue> inputs) throws NodeException {
-        int f = 0;
+    protected long calculate(ArrayList<ObservableValue> inputs) throws NodeException {
+        long f = 0;
         for (ObservableValue i : inputs) {
             f ^= i.getValue();
         }

File: src/main/java/de/neemann/digital/draw/graphics/Polygon.java
Patch:
@@ -518,7 +518,7 @@ public void traverse(PointVisitor v) {
         }
     }
 
-    private class ClosePath implements PathElement {
+    private static final class ClosePath implements PathElement {
         @Override
         public VectorInterface getPoint() {
             return null;

File: src/main/java/de/neemann/digital/draw/graphics/SVGTokenizer.java
Patch:
@@ -242,7 +242,7 @@ public String readTo(char c) {
     /**
      * Exception thrown by the tokenizer
      */
-    public final class TokenizerException extends Exception {
+    public static final class TokenizerException extends Exception {
         private TokenizerException(String message) {
             super(message);
         }

File: src/main/java/de/neemann/digital/gui/components/EditorFactory.java
Patch:
@@ -395,7 +395,7 @@ public JComponent getComponent(ElementAttributes attr) {
         }
 
         @Override
-        public Long getValue() {
+        public Long getValue() throws EditorParseException {
             Object item = comboBox.getSelectedItem();
             long value = 0;
             if (item instanceof Number)
@@ -404,7 +404,7 @@ public Long getValue() {
                 try {
                     value = Bits.decode(item.toString());
                 } catch (Bits.NumberFormatException e) {
-                    throw new RuntimeException(e);
+                    throw new EditorParseException(e);
                 }
             }
             return value;

File: src/main/java/de/neemann/digital/draw/graphics/TransformMatrix.java
Patch:
@@ -23,7 +23,7 @@ public static TransformMatrix rotate(double w) {
         final double phi = w / 180 * Math.PI;
         float cos = (float) Math.cos(phi);
         float sin = (float) Math.sin(phi);
-        return new TransformMatrix(cos, sin, -sin, cos, 0, 0);
+        return new TransformMatrix(cos, -sin, sin, cos, 0, 0);
     }
 
     /**

File: src/main/java/de/neemann/digital/draw/graphics/PolygonParser.java
Patch:
@@ -350,7 +350,7 @@ private void addArc(Polygon p, VectorInterface current, float rx, float ry, floa
 
             double lastStart = start;
             start += delta;
-            while (delta < 0 ^ start < end) {
+            while ((delta > 0 && start < end) || (delta < 0 && start > end)) {
                 addArcPoint(p, lastStart, start, x0, y0, r, invert);
                 lastStart = start;
                 start += delta;

File: src/main/java/de/neemann/digital/draw/shapes/custom/svg/Context.java
Patch:
@@ -42,7 +42,6 @@ class Context {
         tr = Transform.IDENTITY;
         thickness = 1;
         color = Color.BLACK;
-        fill = Color.BLACK;
     }
 
     private Context(Context parent) {

File: src/test/java/de/neemann/digital/draw/shapes/custom/SvgImporterTest.java
Patch:
@@ -441,7 +441,7 @@ public void check(Drawable d) {
             ArrayList<VectorInterface> isPoints = new ArrayList<>();
             polygon.traverse(isPoints::add);
 
-            System.out.println(polygon);
+            //System.out.println(polygon);
 
             assertEquals("not the correct polygon size", shouldPoints.size(), isPoints.size());
             for (int i = 0; i < shouldPoints.size(); i++) {

File: src/main/java/de/neemann/digital/draw/shapes/custom/svg/Context.java
Patch:
@@ -42,6 +42,7 @@ class Context {
         tr = Transform.IDENTITY;
         thickness = 1;
         color = Color.BLACK;
+        fill = Color.BLACK;
     }
 
     private Context(Context parent) {
@@ -50,6 +51,7 @@ private Context(Context parent) {
         color = parent.color;
         thickness = parent.thickness;
         fontSize = parent.fontSize;
+        textAnchor = parent.textAnchor;
         fillRuleEvenOdd = parent.fillRuleEvenOdd;
     }
 
@@ -128,7 +130,6 @@ public float getFontSize() {
         return fontSize;
     }
 
-
     private interface AttrParser {
         void parse(Context c, String value) throws SvgException;
     }

File: src/main/java/de/neemann/digital/builder/circuit/CircuitBuilder.java
Patch:
@@ -454,6 +454,7 @@ private int checkForOutputBus(int splitterXPos, Circuit circuit) {
 
     private int createStateVar(int splitterXPos, int y, Circuit circuit, String name) {
         ArrayList<Variable> outputs = sequentialVars;
+        outputs.sort(Comparator.comparing(Variable::getIdentifier));
 
         circuit.add(new VisualElement(Splitter.DESCRIPTION.getName())
                 .setAttribute(Keys.OUTPUT_SPLIT, "" + outputs.size())
@@ -472,7 +473,7 @@ private int createStateVar(int splitterXPos, int y, Circuit circuit, String name
 
         for (int i = 0; i < outputs.size(); i++) {
             circuit.add(new VisualElement(Tunnel.DESCRIPTION.getName())
-                    .setAttribute(Keys.NETNAME, outputs.get(outputs.size()-i-1).getIdentifier())
+                    .setAttribute(Keys.NETNAME, outputs.get(i).getIdentifier())
                     .setRotation(2)
                     .setPos(new Vector(splitterXPos - SIZE, y + i * SIZE))
                     .setShapeFactory(shapeFactory));

File: src/main/java/de/neemann/digital/fsm/Transition.java
Patch:
@@ -77,7 +77,8 @@ void calcForce(float preferredDist, List<State> states, List<Transition> transit
 
         if (!isInitialTransition()) {
             for (State s : states)
-                addRepulsive(s.getPos(), 2000);
+                if (s != fromState && s != toState)
+                    addRepulsive(s.getPos(), 2000);
 
             for (Transition t : transitions)
                 if (t != this)

File: src/main/java/de/neemann/digital/gui/components/table/ReorderInputs.java
Patch:
@@ -60,8 +60,7 @@ public ElementOrderer.OrderInterface<String> getItems() {
      */
     public TruthTable reorder() throws ExpressionException {
         ArrayList<Variable> newVars = new ArrayList<>();
-        ArrayList<Variable> deletedVars = new ArrayList<>();
-        deletedVars.addAll(table.getVars());
+        ArrayList<Variable> deletedVars = new ArrayList<>(table.getVars());
 
         for (String name : names) {
             Variable found = null;
@@ -81,6 +80,7 @@ public TruthTable reorder() throws ExpressionException {
             throw new ExpressionException(Lang.get("err_tableBecomesToSmall"));
 
         TruthTable newTable = new TruthTable(newVars);
+        newTable.setModelAnalyzerInfo(table.getModelAnalyzerInfo());
         for (int j = 0; j < table.getResultCount(); j++)
             newTable.addResult(table.getResultName(j));
 

File: src/main/java/de/neemann/digital/gui/components/table/ReorderOutputs.java
Patch:
@@ -58,6 +58,7 @@ public ElementOrderer.OrderInterface<String> getItems() {
      */
     public TruthTable reorder() throws ExpressionException {
         TruthTable newTable = new TruthTable(table.getVars());
+        newTable.setModelAnalyzerInfo(table.getModelAnalyzerInfo());
         for (String name : names) {
             for (int i = 0; i < table.getResultCount(); i++)
                 if (table.getResultName(i).equals(name)) {

File: src/main/java/de/neemann/digital/draw/graphics/PolygonParser.java
Patch:
@@ -175,10 +175,10 @@ else if (command == 'M')
                     addQuadratic(p, getCurrent(), setLastC2(nextVector()), nextVector());
                     break;
                 case 's':
-                    addCubicWithReflect(p, getCurrent(), setLastC3(nextVectorRel()), nextVectorInc());
+                    addCubicWithReflect(p, getCurrent(), nextVectorRel(), nextVectorInc());
                     break;
                 case 'S':
-                    addCubicWithReflect(p, getCurrent(), setLastC3(nextVector()), nextVector());
+                    addCubicWithReflect(p, getCurrent(), nextVector(), nextVector());
                     break;
                 case 't':
                     addQuadraticWithReflect(p, getCurrent(), nextVectorInc());
@@ -255,7 +255,7 @@ private void addQuadraticWithReflect(Polygon poly, VectorInterface start, Vector
 
     private void addCubicWithReflect(Polygon poly, VectorInterface start, VectorInterface c2, VectorInterface p) {
         VectorInterface c1 = start.add(start.sub(getLastC3()));
-        poly.add(c1, c2, p);
+        poly.add(c1, setLastC3(c2), p);
     }
 
     /**

File: src/test/java/de/neemann/digital/draw/graphics/PolygonTest.java
Patch:
@@ -36,6 +36,6 @@ private void checkBezier(Polygon p) {
 
     public void testBezierPath() {
         checkBezier(Polygon.createFromPath("m 10,10 C 20 10 20 20 10 20 z"));
-        checkBezier(Polygon.createFromPath("m 10,10 c 10 0 0 10 -10 0 z"));
+        checkBezier(Polygon.createFromPath("m 10,10 c 10 0 10 10 0 10 z"));
     }
 }
\ No newline at end of file

File: src/main/java/de/neemann/digital/fsm/State.java
Patch:
@@ -20,7 +20,7 @@ public class State extends Movable {
     private static final float REACH = 2000;
 
     private int number = -1;
-    private String name = "";
+    private String name;
     private int radius;
     private String values = "";
 

File: src/main/java/de/neemann/digital/fsm/TransitionTableCreator.java
Patch:
@@ -31,7 +31,7 @@ public class TransitionTableCreator {
      *
      * @param fsm the fsm
      */
-    public TransitionTableCreator(FSM fsm) {
+    TransitionTableCreator(FSM fsm) {
         this.states = fsm.getStates();
         this.transitions = fsm.getTransitions();
     }

File: src/main/java/de/neemann/digital/gui/components/EditorFactory.java
Patch:
@@ -294,6 +294,9 @@ private final static class IntegerEditor extends LabelEditor<Integer> {
         private static final IntegerValue[] DEFAULTS = createIntegerValues(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16);
 
         private static IntegerValue[] createIntegerValues(int... values) {
+            if (values == null)
+                return null;
+
             IntegerValue[] v = new IntegerValue[values.length];
             for (int i = 0; i < v.length; i++)
                 v[i] = new IntegerValue(values[i]);

File: src/main/java/de/neemann/digital/gui/Settings.java
Patch:
@@ -45,6 +45,7 @@ public static Settings getInstance() {
     private Settings() {
         List<Key> intList = new ArrayList<>();
         intList.add(Keys.SETTINGS_IEEE_SHAPES);
+        intList.add(Keys.SETTINGS_USE_WIDE_SHAPES);
         intList.add(Keys.SETTINGS_LANGUAGE);
         intList.add(Keys.SETTINGS_EXPRESSION_FORMAT);
         intList.add(Keys.SETTINGS_DEFAULT_TREESELECT);

File: src/main/java/de/neemann/digital/draw/shapes/ieee/IEEEOrShape.java
Patch:
@@ -42,7 +42,8 @@ private static Polygon createPoly() {
 
     /**
      * Creates a new instance
-     *  @param inputs  inputs
+     *
+     * @param inputs  inputs
      * @param outputs outputs
      * @param invert  true if NOr
      * @param attr    the elements attributes

File: src/main/java/de/neemann/digital/core/Model.java
Patch:
@@ -182,6 +182,8 @@ public void init(boolean noise) throws NodeException {
                 reset.clearReset();
             if (!asyncMode)
                 doStep(false);
+            else
+                doMicroStep(false);
         }
         LOGGER.debug("stabilizing took " + version + " micro steps");
         state = State.RUNNING;

File: src/main/java/de/neemann/digital/gui/components/CircuitComponent.java
Patch:
@@ -2072,6 +2072,7 @@ public void rotate() {
             ModifyMoveSelected.rotateElements(elements, center);
             repaintNeeded();
             accumulatedRotate++;
+            wasMoved = true;
         }
     }
 

File: src/main/java/de/neemann/digital/core/extern/ApplicationGHDL.java
Patch:
@@ -30,7 +30,7 @@ public ProcessInterface start(String label, String code, PortDefinition inputs,
             file = createVHDLFile(label, code, inputs, outputs);
             ProcessStarter.start(file.getParentFile(), ghdl, "-a", "--ieee=synopsys", file.getName());
             ProcessStarter.start(file.getParentFile(), ghdl, "-e", "--ieee=synopsys", "stdIOInterface");
-            ProcessBuilder pb = new ProcessBuilder(ghdl, "-r", "--ieee=synopsys", "stdIOInterface").redirectErrorStream(true).directory(file.getParentFile());
+            ProcessBuilder pb = new ProcessBuilder(ghdl, "-r", "--ieee=synopsys", "stdIOInterface", "--unbuffered").redirectErrorStream(true).directory(file.getParentFile());
             return new GHDLProcessInterface(pb.start(), file.getParentFile());
         } catch (IOException e) {
             if (file != null)

File: src/main/java/de/neemann/digital/draw/elements/Circuit.java
Patch:
@@ -24,6 +24,7 @@
 import de.neemann.digital.draw.graphics.*;
 import de.neemann.digital.draw.graphics.Vector;
 import de.neemann.digital.draw.model.InverterConfig;
+import de.neemann.digital.draw.shapes.CustomCircuitShapeType;
 import de.neemann.digital.draw.shapes.Drawable;
 import de.neemann.digital.draw.shapes.ShapeFactory;
 import de.neemann.digital.draw.shapes.custom.CustomShapeDescription;
@@ -97,6 +98,7 @@ public static XStream getxStream() {
         xStream.alias("poly", CustomShapeDescription.PolygonHolder.class);
         xStream.alias("text", CustomShapeDescription.TextHolder.class);
         xStream.alias("polygon", Polygon.class);
+        xStream.alias("shapeType", CustomCircuitShapeType.class);
         xStream.registerConverter(new PolygonConverter());
         return xStream;
     }

File: src/test/java/de/neemann/digital/integration/TestLib.java
Patch:
@@ -16,6 +16,7 @@
 import de.neemann.digital.draw.elements.PinException;
 import de.neemann.digital.draw.elements.VisualElement;
 import de.neemann.digital.draw.library.ElementNotFoundException;
+import de.neemann.digital.draw.shapes.CustomCircuitShapeType;
 import junit.framework.TestCase;
 
 import java.io.File;
@@ -42,11 +43,11 @@ private void check(File dig) throws PinException, NodeException, ElementNotFound
         boolean is74xx = !dig.getName().endsWith("-inc.dig");
 
         if (is74xx) {
-            assertTrue("is not DIL", circuit.getAttributes().get(Keys.IS_DIL));
+            assertEquals("is not DIL", CustomCircuitShapeType.DIL, circuit.getAttributes().get(Keys.SHAPE_TYPE));
             count74xx++;
 
             final int w = circuit.getAttributes().get(Keys.WIDTH);
-            assertTrue ("chip to small", w>=5);
+            assertTrue("chip to small", w >= 5);
         }
 
         assertTrue("is not locked", circuit.getAttributes().get(Keys.LOCKED_MODE));

File: src/main/java/de/neemann/digital/gui/RomLoader.java
Patch:
@@ -42,14 +42,14 @@ public void preInit(Model model) throws NodeException {
                     roms.add(pr);
             }
         if (roms.isEmpty())
-            throw new NodeException(Lang.get("msg_noRomFound"));
+            throw new NodeException(Lang.get("err_noRomFound"));
         if (roms.size() > 1)
-            throw new NodeException(Lang.get("msg_moreThenOneRomFound"));
+            throw new NodeException(Lang.get("err_moreThenOneRomFound"));
 
         try {
             roms.get(0).setProgramMemory(new DataField(romHex));
         } catch (IOException e) {
-            throw new NodeException(e.getMessage());
+            throw new NodeException(Lang.get("err_errorLoadingRomData"), e);
         }
     }
 }

File: src/main/java/de/neemann/digital/gui/Main.java
Patch:
@@ -1657,7 +1657,8 @@ public void debug(File romHex) {
         SwingUtilities.invokeLater(() -> {
             runModelState.enter(false, new RomLoader(romHex));
             circuitComponent.repaintNeeded();
-            showMeasurementDialog(ModelEvent.STEP);
+            if (model != null)
+                showMeasurementDialog(ModelEvent.STEP);
         });
     }
 

File: src/main/java/de/neemann/digital/draw/shapes/RelayDTShape.java
Patch:
@@ -111,6 +111,6 @@ public void drawTo(Graphic graphic, Style highLight) {
         graphic.drawLine(new Vector(SIZE + SIZE2, -SIZE * 2), new Vector(SIZE * 2, -SIZE * 2), Style.NORMAL);
 
         if (label != null && label.length() > 0)
-            graphic.drawText(new Vector(SIZE, 4), new Vector(SIZE * 2, 4), label, Orientation.CENTERTOP, Style.SHAPE_PIN);
+            Graphic.drawText(graphic, new Vector(SIZE, -SIZE * 3 - 4), label, Orientation.CENTERBOTTOM, Style.SHAPE_PIN);
     }
 }

File: src/main/java/de/neemann/digital/draw/shapes/RelayShape.java
Patch:
@@ -114,7 +114,7 @@ public void drawTo(Graphic graphic, Style highLight) {
         graphic.drawLine(new Vector(SIZE + SIZE2, -SIZE * 2), new Vector(SIZE * 2, -SIZE * 2), Style.NORMAL);
 
         if (label != null && label.length() > 0)
-            graphic.drawText(new Vector(SIZE, 4), new Vector(SIZE * 2, 4), label, Orientation.CENTERTOP, Style.SHAPE_PIN);
+            Graphic.drawText(graphic, new Vector(SIZE, -SIZE * 3 - 4), label, Orientation.CENTERBOTTOM, Style.SHAPE_PIN);
     }
 
 }

File: src/main/java/de/neemann/digital/draw/shapes/RelayShape.java
Patch:
@@ -41,8 +41,7 @@ public class RelayShape implements Shape {
     public RelayShape(ElementAttributes attributes, PinDescriptions inputs, PinDescriptions outputs) {
         this.inputs = inputs;
         this.outputs = outputs;
-        invers = attributes.get(Keys.RELAY_NORMALLY_CLOSED);
-        relayIsClosed = invers;
+        relayIsClosed = attributes.get(Keys.RELAY_NORMALLY_CLOSED);
         label = attributes.getCleanLabel();
         poles = attributes.get(Keys.POLES);
     }

File: src/main/java/de/neemann/digital/data/ValueTable.java
Patch:
@@ -115,7 +115,7 @@ public ValueTable omitInTable() {
 
     private void checkMax(Value[] row) {
         for (int i = 0; i < row.length; i++)
-            if (max[i] < row[i].getValue()) max[i] = row[i].getValue();
+            if (Long.compareUnsigned(max[i], row[i].getValue()) < 0) max[i] = row[i].getValue();
     }
 
     /**

File: src/test/java/de/neemann/digital/hdl/verilog2/VerilogSimulatorTest.java
Patch:
@@ -100,7 +100,7 @@ public void testMultiplierInSimulator() throws Exception {
 
     public void testIVERILOGInSimulator() throws Exception {
         if (foundIVerilog) {
-            Settings.getInstance().getAttributes().set(Keys.SETTINGS_GHDL_PATH, new File(IVERILOG));
+            Settings.getInstance().getAttributes().set(Keys.SETTINGS_IVERILOG_PATH, new File(IVERILOG));
 
             File source = new File(Resources.getRoot(), "dig/external/verilog");
 

File: src/main/java/de/neemann/digital/hdl/verilog2/lib/VerilogTemplate.java
Patch:
@@ -32,7 +32,6 @@ public class VerilogTemplate implements VerilogElement {
     private final static String MODULE_PREFIX = "DIG_";
 
     private final String moduleBaseName;
-    private String moduleName;
     private final Statement statements;
     private HashMap<String, Module> modules;
 

File: src/main/java/de/neemann/digital/draw/shapes/DILShape.java
Patch:
@@ -50,7 +50,7 @@ public class DILShape implements Shape {
     public DILShape(String shortName, PinDescriptions inputs, PinDescriptions outputs, String label, ElementAttributes attr) {
         this.shortName = shortName;
         this.label = label;
-        this.width = attr.get(Keys.WIDTH) * SPACING;
+        this.width = attr.get(Keys.WIDTH)+1;
         map = new ShapePinMap(this.width, attr.get(Keys.PINCOUNT));
         map.addAll(inputs);
         map.addAll(outputs);
@@ -72,7 +72,7 @@ public InteractorInterface applyStateMonitor(IOState ioState, Observer guiObserv
 
     @Override
     public void drawTo(Graphic graphic, Style highLight) {
-        int dp = SPACING * SIZE;
+        int dp = 2 * SIZE;
         int pin = dp / 4;
         int x = width * SIZE;
         int h = (pinCount / 2) * dp - SIZE;

File: src/test/java/de/neemann/digital/integration/TestExamples.java
Patch:
@@ -34,7 +34,7 @@ public void testDistExamples() throws Exception {
         File examples = new File(Resources.getRoot().getParentFile().getParentFile(), "/main/dig");
         testCasesInFiles = 0;
         assertEquals(241, new FileScanner(TestExamples::check).scan(examples));
-        assertEquals(161, testCasesInFiles);
+        assertEquals(164, testCasesInFiles);
     }
 
     /**

File: src/main/java/de/neemann/digital/analyse/expression/Constant.java
Patch:
@@ -42,7 +42,7 @@ public String getOrderString() {
     }
 
     /**
-     * Retorns the constants value
+     * Returns the constant value
      *
      * @return the value
      */
@@ -57,6 +57,6 @@ public String toString() {
 
     @Override
     public Expression copy() {
-        return new Constant(value);
+        return this;
     }
 }

File: src/main/java/de/neemann/digital/analyse/expression/format/FormatToExpression.java
Patch:
@@ -30,7 +30,7 @@ public class FormatToExpression implements Formatter {
     /**
      * Creates a string compatible to WinCUPL
      */
-    public static final FormatToExpression FORMATTER_CUPL = new FormatToExpression("#", "&", "$", "!", "0", "1");
+    public static final FormatToExpression FORMATTER_CUPL = new FormatToExpression("#", "&", "$", "!", "'b'0", "'b'1");
     /**
      * Creates a string compatible to Logisim
      */

File: src/main/java/de/neemann/digital/draw/library/LibraryNode.java
Patch:
@@ -362,7 +362,7 @@ public String getToolTipText() {
                 } else
                     return new LineBreaker().toHTML().breakLines(description.getDescription(new ElementAttributes()));
             } else
-                return Lang.get("msg_fileIsNotUnique");
+                return new LineBreaker().toHTML().breakLines(Lang.get("msg_fileIsNotUnique"));
         } else
             return new LineBreaker().toHTML().breakLines(Lang.getNull("elem_" + getName() + "_tt"));
     }

File: src/main/java/de/neemann/digital/core/element/Keys.java
Patch:
@@ -467,7 +467,7 @@ private Keys() {
      * Flash software for the atf15xx
      */
     public static final Key<File> SETTINGS_ATMISP
-            = new Key.KeyFile("ATMISP", new File("c:/ATMISP7/atmisp.exe"));
+            = new Key.KeyFile("ATMISP", new File("c:/ATMISP7/ATMISP.exe"));
 
     /**
      * row bits in led matrix

File: src/main/java/de/neemann/gui/Mouse.java
Patch:
@@ -25,7 +25,7 @@ static Mouse getMouse() {
             return new Mouse() {
                 @Override
                 public boolean isPrimaryClick(MouseEvent e) {
-                    return e.getButton() == MouseEvent.BUTTON1;
+                    return e.getButton() == MouseEvent.BUTTON1 && !e.isControlDown();
                 }
 
                 @Override

File: src/main/java/de/neemann/digital/hdl/model2/HDLCircuit.java
Patch:
@@ -524,7 +524,7 @@ public HDLCircuit apply(Optimization optimization) throws HDLException {
      */
     public HDLCircuit applyDefaultOptimizations() throws HDLException {
         apply(new ReplaceOneToMany());
-        apply(new MergeAssignements());
+        apply(new MergeAssignments());
         apply(new InlineManyToOne());
         apply(new RemoveConstantSignals());
         apply(new MergeConstants());  // under certain circumstances there are still constants

File: src/main/java/de/neemann/digital/hdl/model2/expression/Expression.java
Patch:
@@ -14,7 +14,7 @@
 public interface Expression extends Printable {
 
     /**
-     * Replaces a net with and expression
+     * Replaces a net with an expression
      *
      * @param net        the net to replace
      * @param expression the expression to use instead ot the net
@@ -31,7 +31,7 @@ default void traverse(Visitor visitor) {
     }
 
     /**
-     * Help er to check if a expression is a net reference
+     * Helper to check if an expression is a net reference
      *
      * @param expr the expression to check
      * @param net  the net

File: src/test/java/de/neemann/digital/hdl/vhdl2/ClockTest.java
Patch:
@@ -14,7 +14,6 @@
 import de.neemann.digital.hdl.model2.HDLModel;
 import de.neemann.digital.hdl.model2.clock.ClockIntegratorGeneric;
 import de.neemann.digital.hdl.model2.clock.HDLClockIntegrator;
-import de.neemann.digital.hdl.model2.optimizations.MergeAssignements;
 import de.neemann.digital.hdl.printer.CodePrinter;
 import de.neemann.digital.hdl.printer.CodePrinterStr;
 import de.neemann.digital.hdl.vhdl2.boards.ClockIntegratorARTIX7;

File: src/test/java/de/neemann/digital/hdl/vhdl2/DescriptionTest.java
Patch:
@@ -12,8 +12,6 @@
 import de.neemann.digital.hdl.model2.HDLCircuit;
 import de.neemann.digital.hdl.model2.HDLException;
 import de.neemann.digital.hdl.model2.HDLModel;
-import de.neemann.digital.hdl.model2.optimizations.MergeConstants;
-import de.neemann.digital.hdl.model2.optimizations.MergeAssignements;
 import de.neemann.digital.hdl.printer.CodePrinterStr;
 import de.neemann.digital.integration.ToBreakRunner;
 import junit.framework.TestCase;

File: src/test/java/de/neemann/digital/hdl/vhdl2/VHDLSimulatorTest.java
Patch:
@@ -59,7 +59,7 @@ public void testInSimulator2() throws Exception {
         File examples = new File(Resources.getRoot(), "/dig/hdl");
         try {
             int tested = new FileScanner(this::checkVHDLExport).noOutput().scan(examples);
-            assertEquals(45, tested);
+            assertEquals(46, tested);
         } catch (FileScanner.SkipAllException e) {
             // if ghdl is not installed its also ok
         }

File: src/test/java/de/neemann/digital/hdl/vhdl2/VHDLSimulatorTest.java
Patch:
@@ -36,7 +36,7 @@ public class VHDLSimulatorTest extends TestCase {
 
     /*
     public void testDebug() throws Exception {
-        File file = new File(Resources.getRoot(), "/dig/hdl/adder4b.dig");
+        File file = new File(Resources.getRoot(), "dig/hdl/model2/naming2.dig");
 
         ToBreakRunner br = new ToBreakRunner(file);
         System.out.println(new VHDLGenerator(br.getLibrary(), new CodePrinterStr(true)).export(br.getCircuit()));
@@ -59,7 +59,7 @@ public void testInSimulator2() throws Exception {
         File examples = new File(Resources.getRoot(), "/dig/hdl");
         try {
             int tested = new FileScanner(this::checkVHDLExport).noOutput().scan(examples);
-            assertEquals(44, tested);
+            assertEquals(45, tested);
         } catch (FileScanner.SkipAllException e) {
             // if ghdl is not installed its also ok
         }

File: src/main/java/de/neemann/digital/hdl/model2/HDLException.java
Patch:
@@ -5,10 +5,12 @@
  */
 package de.neemann.digital.hdl.model2;
 
+import de.neemann.digital.core.ExceptionWithOrigin;
+
 /**
  * Exception thrown during model building
  */
-public class HDLException extends Exception {
+public class HDLException extends ExceptionWithOrigin {
     /**
      * Creates a new instance
      *

File: src/main/java/de/neemann/digital/hdl/vhdl2/VHDLRenaming.java
Patch:
@@ -56,6 +56,8 @@ private String cleanName(String name) {
                 sb.append(c);
             else {
                 switch (c) {
+                    case '/':
+                    case '!':
                     case '~':
                     case '\u00AC':
                         sb.append("not");

File: src/test/java/de/neemann/digital/hdl/vhdl2/VHDLRenamingTest.java
Patch:
@@ -19,6 +19,8 @@ public void testCheckName() {
         assertEquals("a_o_o", r.checkName("a\"o\"o"));
         assertEquals("o", r.checkName("\"o\""));
         assertEquals("o", r.checkName("_o_"));
+        assertEquals("notQ", r.checkName("/Q"));
+        assertEquals("notQ", r.checkName("!Q"));
         assertEquals("notQ", r.checkName("~Q"));
         assertEquals("aleb", r.checkName("a<b"));
         assertEquals("agrb", r.checkName("a>b"));

File: src/main/java/de/neemann/digital/hdl/model2/optimizations/MergeConstants.java
Patch:
@@ -7,6 +7,7 @@
 
 import de.neemann.digital.hdl.model2.*;
 import de.neemann.digital.hdl.model2.expression.ExprConstant;
+import de.neemann.digital.hdl.model2.expression.ExprVar;
 
 import java.util.ArrayList;
 
@@ -54,6 +55,8 @@ private void merge(HDLNode node1, HDLNode node2) throws HDLException {
         for (HDLPort p : ins.toArray(new HDLPort[ins.size()]))
             p.setNet(usedNet);
 
+        circuit.replaceNetByExpression(obsoleteNet, new ExprVar(usedNet));
+
         circuit.removeNet(obsoleteNet);
     }
 

File: src/main/java/de/neemann/digital/hdl/printer/CodePrinter.java
Patch:
@@ -102,6 +102,9 @@ public void eol() throws IOException {
      * @throws IOException IOException
      */
     public CodePrinter print(String str) throws IOException {
+        if (str == null)
+            str = "null";
+
         for (int i = 0; i < str.length(); i++)
             print(str.charAt(i));
         return this;

File: src/main/java/de/neemann/digital/hdl/model2/HDLCircuit.java
Patch:
@@ -29,6 +29,7 @@
 import de.neemann.digital.hdl.model2.expression.ExprNot;
 import de.neemann.digital.hdl.model2.expression.ExprVar;
 import de.neemann.digital.hdl.printer.CodePrinter;
+import de.neemann.digital.lang.Lang;
 import de.neemann.digital.testing.TestCaseElement;
 
 import java.io.IOException;
@@ -116,7 +117,7 @@ else if (isRealElement(v))
                     nodes.add(c.createNode(v, this));
             }
         } catch (HDLException e) {
-            throw new HDLException("error parsing " + circuit.getOrigin(), e);
+            throw new HDLException(Lang.get("err_errorAnalysingCircuit_N", circuit.getOrigin()), e);
         }
 
         netList = null;

File: src/main/java/de/neemann/digital/hdl/vhdl/lib/ExternalVHDL.java
Patch:
@@ -47,7 +47,7 @@ private boolean needsOutput(HDLNode node) throws HDLException {
         if (oldCode.equals(code))
             return false;
 
-        throw new HDLException(Lang.get("err_ifExternalComponentIsUsedTwiceCodeMustBeIdentical"));
+        throw new HDLException(Lang.get("err_ifExternalComponentIsUsedTwiceCodeMustBeIdentical_N", label));
     }
 
     @Override

File: src/main/java/de/neemann/digital/hdl/vhdl2/entities/VHDLTemplate.java
Patch:
@@ -10,6 +10,7 @@
 import de.neemann.digital.hdl.model2.HDLNode;
 import de.neemann.digital.hdl.printer.CodePrinter;
 import de.neemann.digital.hdl.vhdl2.Separator;
+import de.neemann.digital.lang.Lang;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -95,7 +96,7 @@ private Entity getEntity(HDLNode node) throws HGSEvalException {
             return newGenerated;
         } else {
             if (!(newGenerated.code.equals(e.code)))
-                throw new HGSEvalException("Multiple entities with same name '" + newGenerated.name + "'!");
+                throw new HGSEvalException(Lang.get("err_ifExternalComponentIsUsedTwiceCodeMustBeIdentical_N", newGenerated.name));
             else
                 return e;
         }

File: src/test/java/de/neemann/digital/hdl/vhdl/lib/ExternalVHDLTest.java
Patch:
@@ -31,7 +31,7 @@ public void testNotUniqueCode() {
             fail();
         } catch (IOException e) {
             String message = e.getCause().getMessage();
-            assertEquals(Lang.get("err_ifExternalComponentIsUsedTwiceCodeMustBeIdentical"), message);
+            assertEquals(Lang.get("err_ifExternalComponentIsUsedTwiceCodeMustBeIdentical_N","add"), message);
         }
     }
 }
\ No newline at end of file

File: src/test/java/de/neemann/digital/hdl/vhdl/TestInSimulator.java
Patch:
@@ -57,7 +57,7 @@ public void testInSimulator2() throws Exception {
         File examples = new File(Resources.getRoot(), "/dig/hdl");
         try {
             int tested = new FileScanner(this::checkVHDLExport).noOutput().scan(examples);
-            assertEquals(36, tested);
+            assertEquals(37, tested);
         } catch (FileScanner.SkipAllException e) {
             // if ghdl is not installed its also ok
         }

File: src/test/java/de/neemann/digital/hdl/vhdl2/VHDLGeneratorTest.java
Patch:
@@ -59,7 +59,7 @@ public void testInSimulator2() throws Exception {
         File examples = new File(Resources.getRoot(), "/dig/hdl");
         try {
             int tested = new FileScanner(this::checkVHDLExport).noOutput().scan(examples);
-            assertEquals(36, tested);
+            assertEquals(37, tested);
         } catch (FileScanner.SkipAllException e) {
             // if ghdl is not installed its also ok
         }

File: src/main/java/de/neemann/digital/hdl/model2/HDLModel.java
Patch:
@@ -180,7 +180,7 @@ public HDLModel create(Circuit circuit, HDLClockIntegrator clockIntegrator) thro
      * @param renaming the renaming algorithm
      */
     public void rename(Renaming renaming) {
-        this.renaming = new RenameContext(renaming);
+        this.renaming = new RenameSingleCheck(renaming);
         for (HDLCircuit c : circuitMap.values())
             c.rename(this.renaming);
     }
@@ -206,11 +206,11 @@ public interface Renaming {
         String checkName(String name);
     }
 
-    static final class RenameContext implements Renaming {
+    static final class RenameSingleCheck implements Renaming {
         private final Renaming parent;
         private final HashMap<String, String> map;
 
-        private RenameContext(Renaming parent) {
+        private RenameSingleCheck(Renaming parent) {
             this.parent = parent;
             map = new HashMap<>();
         }

File: src/main/java/de/neemann/digital/hdl/vhdl2/VHDLGenerator.java
Patch:
@@ -74,7 +74,7 @@ public VHDLGenerator export(Circuit circuit) throws IOException {
         try {
             HDLModel model = new HDLModel(library).create(circuit, clockIntegrator);
             for (HDLCircuit c : model)
-                c.mergeOperations().nameNets(new HDLCircuit.SimpleNetNaming());
+                c.mergeOperations().nameNets();
 
             model.rename(name -> {
                 if (VHDLKeywords.isKeyword(name))

File: src/test/java/de/neemann/digital/hdl/vhdl2/ClockTest.java
Patch:
@@ -290,7 +290,7 @@ String create(HDLClockIntegrator ci) throws IOException, PinException, NodeExcep
                 new HDLModel(br.getLibrary()),
                 ci);
 
-        c.mergeOperations().nameNets(new HDLCircuit.SimpleNetNaming());
+        c.mergeOperations().nameNets();
 
         CodePrinter out = new CodePrinterStr();
         new VHDLCreator(out).printHDLCircuit(c);

File: src/main/java/de/neemann/digital/hdl/model2/OperationMerger.java
Patch:
@@ -66,6 +66,8 @@ private HDLNodeExpression merge(HDLNodeExpression host, HDLNodeExpression includ
         for (HDLPort i : include.getInputs())
             if (!node.hasInput(i))
                 node.addPort(i);
+            else
+                i.getNet().remove(i);
 
         return node;
     }

File: src/main/java/de/neemann/digital/hdl/vhdl2/boards/package-info.java
Patch:
@@ -5,8 +5,8 @@
  */
 
 /**
- * Support fpr different boards.
- * The classes in this package are able to create the files neede
+ * Support for different boards.
+ * The classes in this package are able to create the files needed
  * to run a vhdl file on a board.
  */
 package de.neemann.digital.hdl.vhdl2.boards;

File: src/test/java/de/neemann/digital/hdl/vhdl/TestInSimulator.java
Patch:
@@ -57,7 +57,7 @@ public void testInSimulator2() throws Exception {
         File examples = new File(Resources.getRoot(), "/dig/hdl");
         try {
             int tested = new FileScanner(this::checkVHDLExport).noOutput().scan(examples);
-            assertEquals(35, tested);
+            assertEquals(36, tested);
         } catch (FileScanner.SkipAllException e) {
             // if ghdl is not installed its also ok
         }

File: src/main/java/de/neemann/digital/hdl/model2/HDLPort.java
Patch:
@@ -78,6 +78,8 @@ public HDLNet getNet() {
      * @throws HDLException HDLException
      */
     public void setNet(HDLNet net) throws HDLException {
+        if (this.net != null)
+            this.net.remove(this);
         this.net = net;
         net.addPort(this);
     }

File: src/test/java/de/neemann/digital/hdl/vhdl/TestInSimulator.java
Patch:
@@ -46,7 +46,7 @@ public void testInSimulator() throws Exception {
         File examples = new File(Resources.getRoot(), "/dig/test/vhdl");
         try {
             int tested = new FileScanner(this::checkVHDLExport).noOutput().scan(examples);
-            assertEquals(31, tested);
+            assertEquals(32, tested);
             assertEquals(tested+2, testBenches);
         } catch (FileScanner.SkipAllException e) {
             // if ghdl is not installed its also ok

File: src/test/java/de/neemann/digital/integration/TestExamples.java
Patch:
@@ -45,8 +45,8 @@ public void testDistExamples() throws Exception {
     public void testTestExamples() throws Exception {
         File examples = new File(Resources.getRoot(), "/dig/test");
         testCasesInFiles = 0;
-        assertEquals(131, new FileScanner(TestExamples::check).scan(examples));
-        assertEquals(123, testCasesInFiles);
+        assertEquals(132, new FileScanner(TestExamples::check).scan(examples));
+        assertEquals(124, testCasesInFiles);
     }
 
     /**

File: src/main/java/de/neemann/digital/draw/graphics/Polygon.java
Patch:
@@ -217,7 +217,7 @@ public static Polygon createFromPath(String path) {
         float y = 0;
         boolean closed = false;
         ArrayList<VectorInterface> list = new ArrayList<>();
-        String lastTok = null;
+        String lastTok = "";
         while (tok.hasMoreTokens()) {
             final String t = tok.nextToken();
             switch (t) {

File: src/main/java/de/neemann/digital/draw/graphics/VectorInterface.java
Patch:
@@ -6,7 +6,7 @@
 package de.neemann.digital.draw.graphics;
 
 /**
- * The bas class of all vectors
+ * The base interface of all vectors
  */
 public interface VectorInterface {
 
@@ -31,7 +31,7 @@ public interface VectorInterface {
     float getYFloat();
 
     /**
-     * @return this vactor as a {@link VectorFloat} instance
+     * @return this vector as a {@link VectorFloat} instance
      */
     VectorFloat getVectorFloat();
 }

File: src/main/java/de/neemann/digital/hdl/verilog/VerilogCodeBuilder.java
Patch:
@@ -91,6 +91,7 @@ public void registerModelInputs() {
             VExpr expr = new VIdExpr(p.getName());
             expr.setSignal(s);
             setCodeIrForSignal(p.getName(), expr);
+            declaredSignals.add(p.getName());
         }
     }
 
@@ -229,7 +230,7 @@ public void setCodeIrForSignal(Signal signal, VIRNode codeIr) {
      * Register a statement with the builder
      *
      * @param statement the statement
-     * @param signal the signal associated with the statement
+     * @param signal the signal associated with the statement. This can be null.
      */
     public void registerStatement(VStatement statement, Signal signal) {
         if (!statements.contains(statement)) {

File: src/main/java/de/neemann/digital/hdl/verilog/ir/expr/VBinaryExpr.java
Patch:
@@ -68,7 +68,7 @@ public String getSourceCode(VerilogCodeBuilder vcBuilder) {
             rightCode = "(" + rightCode + ")";
         }
 
-        String resultCode = leftCode + oper.getSymbol() + rightCode;
+        String resultCode = leftCode + " " + oper.getSymbol() + " " + rightCode;
 
         if (oper.isInverted()) {
             if (oper.getPrecedence() < VOperator.NOT.getPrecedence()) {

File: src/main/java/de/neemann/digital/hdl/verilog/lib/CustomElemVerilog.java
Patch:
@@ -34,8 +34,9 @@ public CustomElemVerilog() {
     @Override
     public void buildCodeIr(VerilogCodeBuilder vcBuilder, HDLNode node) throws HDLException {
         ArrayList<VInstanceMapping> signalMappings = new ArrayList<>();
+        String instName = vcBuilder.getNextName(node.getHDLName());
 
-        VInstanceBlock stmt = new VInstanceBlock(node.getHDLName(), node.getHDLName(), signalMappings);
+        VInstanceBlock stmt = new VInstanceBlock(node.getHDLName(), instName, signalMappings);
 
         for (Port p : node.getPorts().getInputs()) {
             VIRNode irnode = vcBuilder.getSignalCodeIr(p.getSignal());
@@ -50,11 +51,10 @@ public void buildCodeIr(VerilogCodeBuilder vcBuilder, HDLNode node) throws HDLEx
             }
             Signal s = p.getSignal();
             String signalName = s.getName();
-            VExpr expr = new VIdExpr(signalName);
+            VExpr expr = new VIdExpr(signalName).setSignal(s);
 
             signalMappings.add(new VInstanceMapping(p.getName(), expr));
             vcBuilder.registerAndAddSignalDecl(s, VSignalDecl.Type.WIRE);
-            expr.setSignal(s);
             vcBuilder.setCodeIrForSignal(signalName, expr);
         }
 

File: src/test/java/de/neemann/digital/hdl/verilog/TestInSimulator.java
Patch:
@@ -87,7 +87,7 @@ public void testProcessorInSimulator() throws Exception {
 
     private void checkVerilogExport(File file) throws PinException, NodeException, ElementNotFoundException, IOException, FileScanner.SkipAllException, HDLException {
         ToBreakRunner br = new ToBreakRunner(file);
-        File dir = Files.createTempDirectory("digital_vhdl_" + getTime() + "_").toFile();
+        File dir = Files.createTempDirectory("digital_verilog_" + getTime() + "_").toFile();
         try {
             File sourceFile = new File(dir, file.getName().replace('.', '_') + ".v");
             CodePrinter out = new CodePrinter(sourceFile);

File: src/main/java/de/neemann/digital/hdl/verilog/VerilogLibrary.java
Patch:
@@ -24,6 +24,7 @@
 import de.neemann.digital.core.memory.Register;
 import de.neemann.digital.core.wiring.BitSelector;
 import de.neemann.digital.core.wiring.Decoder;
+import de.neemann.digital.core.wiring.Demultiplexer;
 import de.neemann.digital.core.wiring.Driver;
 import de.neemann.digital.core.wiring.DriverInvSel;
 import de.neemann.digital.core.wiring.Multiplexer;
@@ -42,6 +43,7 @@
 import de.neemann.digital.hdl.verilog.lib.ConstVerilog;
 import de.neemann.digital.hdl.verilog.lib.CustomElemVerilog;
 import de.neemann.digital.hdl.verilog.lib.DecoderVerilog;
+import de.neemann.digital.hdl.verilog.lib.DemultiplexerVerilog;
 import de.neemann.digital.hdl.verilog.lib.DriverVerilog;
 import de.neemann.digital.hdl.verilog.lib.MulVerilog;
 import de.neemann.digital.hdl.verilog.lib.MultiplexerVerilog;
@@ -93,6 +95,7 @@ public VerilogLibrary(ElementLibrary elementLibrary) {
         put(Ground.DESCRIPTION, new ConstVerilog(Ground.DESCRIPTION));
         put(PriorityEncoder.DESCRIPTION, new PriorityEncoderVerilog());
         put(Multiplexer.DESCRIPTION, new MultiplexerVerilog());
+        put(Demultiplexer.DESCRIPTION, new DemultiplexerVerilog());
         put(BitExtender.DESCRIPTION, new BitExtenderVerilog());
         put(BitSelector.DESCRIPTION, new BitSelectorVerilog());
         put(Add.DESCRIPTION, new AddVerilog(Add.DESCRIPTION, VOperator.ADD));

File: src/main/java/de/neemann/digital/hdl/verilog/VerilogTestBenchCreator.java
Patch:
@@ -220,7 +220,7 @@ private void writeValues(Value[] values, boolean isClock, int clock) throws IOEx
                         out.inc();
                         out.print("$display(\"")
                            .print(line).print(": ")
-                           .print(p.getName()).print(": Assert failed. Expected %h, found %h\", ")
+                           .print(p.getName()).print(": (assertion error). Expected %h, found %h\", ")
                            .print(valStr).print(", ").print(p.getName()).print(");").println();
                         out.println("$finish;");
                         out.dec().println("end");

File: src/main/java/de/neemann/digital/hdl/verilog/lib/CustomElemVerilog.java
Patch:
@@ -41,9 +41,6 @@ public void buildCodeIr(VerilogCodeBuilder vcBuilder, HDLNode node) throws HDLEx
             VIRNode irnode = vcBuilder.getSignalCodeIr(p.getSignal());
             VExpr inExpr = irnode.resolveToExpr(vcBuilder);
 
-            if (p.getSignal().getName().equals("S25")) {
-                System.out.println("buildCodeIr");
-            }
             signalMappings.add(new VInstanceMapping(p.getName(), inExpr));
         }
 

File: src/main/java/de/neemann/digital/core/extern/External.java
Patch:
@@ -100,6 +100,9 @@ public ObservableValues getOutputs() {
     public void init(Model model) throws NodeException {
         try {
             Application app = Application.create(type);
+            if (app == null)
+                throw new NodeException(Lang.get("err_errorCreatingProcess"), this, -1, null);
+
             processInterface = app.start(label, code, ins, outs);
         } catch (IOException e) {
             throw new NodeException(Lang.get("err_errorCreatingProcess"), this, -1, null, e);

File: src/test/java/de/neemann/digital/hdl/vhdl/TestInSimulator.java
Patch:
@@ -44,7 +44,7 @@ public void testInSimulator() throws Exception {
         File examples = new File(Resources.getRoot(), "/dig/test/vhdl");
         try {
             int tested = new FileScanner(this::check).noOutput().scan(examples);
-            assertEquals(28, tested);
+            assertEquals(27, tested);
             assertEquals(tested, testBenches);
         } catch (FileScanner.SkipAllException e) {
             // if ghdl is not installed its also ok

File: src/test/java/de/neemann/digital/integration/TestExamples.java
Patch:
@@ -45,8 +45,8 @@ public void testDistExamples() throws Exception {
     public void testTestExamples() throws Exception {
         File examples = new File(Resources.getRoot(), "/dig/test");
         testCasesInFiles = 0;
-        assertEquals(128, new FileScanner(TestExamples::check).scan(examples));
-        assertEquals(118, testCasesInFiles);
+        assertEquals(127, new FileScanner(TestExamples::check).scan(examples));
+        assertEquals(117, testCasesInFiles);
     }
 
     /**

File: src/main/java/de/neemann/digital/core/extern/ProcessStarter.java
Patch:
@@ -41,7 +41,7 @@ public static String start(File dir, String... args) throws IOException {
         try {
             p = pb.start();
         } catch (IOException e) {
-            throw new CouldNotStartProcessException(Lang.get("err_couldNotStartProcess_N", Arrays.toString(args)));
+            throw new CouldNotStartProcessException(Lang.get("err_couldNotStartProcess_N", Arrays.toString(args)), e);
         }
         ReaderThread rt = new ReaderThread(p.getInputStream());
         rt.start();
@@ -137,8 +137,8 @@ public static String joinStrings(String... strings) {
      * Thrown if process could not be started
      */
     public static final class CouldNotStartProcessException extends IOException {
-        private CouldNotStartProcessException(String message) {
-            super(message);
+        private CouldNotStartProcessException(String message, IOException cause) {
+            super(message, cause);
         }
     }
 }

File: src/test/java/de/neemann/digital/integration/TestExamples.java
Patch:
@@ -44,7 +44,7 @@ public void testDistExamples() throws Exception {
     public void testTestExamples() throws Exception {
         File examples = new File(Resources.getRoot(), "/dig/test");
         assertEquals(126, new FileScanner(this::check).scan(examples));
-        assertEquals(114, testCasesInFiles);
+        assertEquals(115, testCasesInFiles);
     }
 
     /**

File: src/test/java/de/neemann/digital/docu/DocuTest.java
Patch:
@@ -271,11 +271,12 @@ public void testDocu() throws IOException, NodeException, PinException, Transfor
         File maven = Resources.getRoot().getParentFile().getParentFile().getParentFile();
         File target = new File(maven, "target/docu");
 
+        File images = new File(target, "img");
+        images.mkdirs();
+
         final File library = new File(target, "library.xml");
         write74xx(library);
 
-        File images = new File(target, "img");
-        images.mkdirs();
         for (Language l : Lang.getBundle().getSupportedLanguages()) {
             // set language
             Lang.setActualRuntimeLanguage(l);

File: src/main/java/de/neemann/digital/draw/graphics/text/text/Index.java
Patch:
@@ -20,8 +20,6 @@ public class Index implements Text {
      */
     public Index(Text var) {
         this.var = var;
-        this.superScript = superScript;
-        this.subScript = subScript;
     }
 
     /**

File: src/main/java/de/neemann/digital/core/memory/EEPROM.java
Patch:
@@ -3,6 +3,7 @@
 import de.neemann.digital.core.element.ElementAttributes;
 import de.neemann.digital.core.element.ElementTypeDescription;
 import de.neemann.digital.core.element.Keys;
+import de.neemann.digital.core.memory.rom.ROMInterface;
 
 import static de.neemann.digital.core.element.PinInfo.input;
 
@@ -11,7 +12,7 @@
  *
  * @author hneemann
  */
-public class EEPROM extends RAMSinglePortSel {
+public class EEPROM extends RAMSinglePortSel implements ROMInterface {
 
     /**
      * The EEPROMs {@link ElementTypeDescription}

File: src/main/java/de/neemann/digital/draw/elements/Circuit.java
Patch:
@@ -13,6 +13,7 @@
 import de.neemann.digital.core.io.Out;
 import de.neemann.digital.core.memory.DataField;
 import de.neemann.digital.core.memory.DataFieldConverter;
+import de.neemann.digital.core.memory.rom.ROMManger;
 import de.neemann.digital.core.wiring.Clock;
 import de.neemann.digital.draw.graphics.Graphic;
 import de.neemann.digital.draw.graphics.Polygon;
@@ -84,6 +85,8 @@ public static XStream getxStream() {
         xStream.alias("testData", TestCaseDescription.class);
         xStream.alias("inverterConfig", InverterConfig.class);
         xStream.addImplicitCollection(InverterConfig.class, "inputs");
+        xStream.alias("storedRoms", ROMManger.class);
+        xStream.addImplicitCollection(ROMManger.class, "roms");
         xStream.ignoreUnknownElements();
         return xStream;
     }

File: src/main/java/de/neemann/digital/gui/ModelModifier.java
Patch:
@@ -8,7 +8,7 @@
  * <p>
  * Its used by the {@link de.neemann.digital.gui.remote.RemoteSever}. The remote server passes an instance to
  * the start method ({@link Main#createAndStartModel(boolean, ModelEvent, ModelModifier)}) to modify the model
- * after its generation. It modifies the ROM node by copying the program to execute to the programm memory.
+ * after its generation. It modifies the ROM node by copying the program to execute to the program memory.
  * <p>
  * Created by hneemann on 17.12.16.
  */

File: src/main/java/de/neemann/digital/gui/components/CircuitComponent.java
Patch:
@@ -67,6 +67,7 @@ public class CircuitComponent extends JComponent implements Circuit.ChangedListe
         ATTR_LIST.add(Keys.BACKGROUND_COLOR);
         ATTR_LIST.add(Keys.DESCRIPTION);
         ATTR_LIST.add(Keys.LOCKED_MODE);
+        ATTR_LIST.add(Keys.ROMMANAGER);
         ATTR_LIST.add(Keys.SHOW_DATA_TABLE);
         ATTR_LIST.add(Keys.SHOW_DATA_GRAPH);
         ATTR_LIST.add(Keys.SHOW_DATA_GRAPH_MICRO);

File: src/main/java/de/neemann/digital/core/element/ElementTypeDescription.java
Patch:
@@ -46,7 +46,7 @@ public ElementTypeDescription(String name, Class<? extends Element> clazz, PinDe
                 Constructor<?> constructor = clazz.getConstructor(ElementAttributes.class);
                 return (Element) constructor.newInstance(attributes);
             } catch (Exception e) {
-                throw new RuntimeException(e);
+                throw new RuntimeException(Lang.get("err_couldNotCreateElement_N", name), e);
             }
         }, inputPins);
     }

File: src/main/java/de/neemann/digital/draw/shapes/MissingShape.java
Patch:
@@ -50,7 +50,7 @@ public void drawTo(Graphic graphic, Style highLight) {
         while (c != null) {
             y += style.getFontSize();
             String message = c.getMessage();
-            if (message.length() > 100)
+            if (message != null && message.length() > 100)
                 message = message.substring(0, 100) + "...";
             graphic.drawText(new Vector(4, y), new Vector(5, y), message, Orientation.LEFTTOP, style);
             c = c.getCause();

File: src/test/java/de/neemann/digital/integration/TestExamples.java
Patch:
@@ -29,8 +29,8 @@ public class TestExamples extends TestCase {
      */
     public void testDistExamples() throws Exception {
         File examples = new File(Resources.getRoot().getParentFile().getParentFile(), "/main/dig");
-        assertEquals(211, new FileScanner(this::check).scan(examples));
-        assertEquals(127, testCasesInFiles);
+        assertEquals(212, new FileScanner(this::check).scan(examples));
+        assertEquals(159, testCasesInFiles);
     }
 
     /**

File: src/main/java/de/neemann/digital/core/basic/FanIn.java
Patch:
@@ -84,7 +84,7 @@ public PinDescriptions getInputDescription(ElementAttributes elementAttributes)
             int count = elementAttributes.get(Keys.INPUT_COUNT);
             PinDescription[] names = new PinDescription[count];
             for (int i = 0; i < count; i++)
-                names[i] = input(PREFIX + (i+1), Lang.get("elem_Basic_In", i));
+                names[i] = input(PREFIX + (i + 1), Lang.get("elem_Basic_In", i + 1));
             return new PinDescriptions(names);
         }
     }

File: src/main/java/de/neemann/digital/core/flipflops/FlipflopBit.java
Patch:
@@ -28,7 +28,7 @@ abstract class FlipflopBit extends Node implements Element {
     FlipflopBit(ElementAttributes attributes, ElementTypeDescription description) {
         super(true);
         this.q = new ObservableValue("Q", 1).setPinDescription(description);
-        this.qn = new ObservableValue("\u00ACQ", 1).setPinDescription(description);
+        this.qn = new ObservableValue("~Q", 1).setPinDescription(description);
         isProbe = attributes.get(Keys.VALUE_IS_PROBE);
         label = attributes.getCleanLabel();
 

File: src/main/java/de/neemann/digital/core/flipflops/FlipflopD.java
Patch:
@@ -46,7 +46,7 @@ public class FlipflopD extends Node implements Element {
     public FlipflopD(ElementAttributes attributes) {
         this(attributes,
                 new ObservableValue("Q", attributes.getBits()).setPinDescription(DESCRIPTION),
-                new ObservableValue("\u00ACQ", attributes.getBits()).setPinDescription(DESCRIPTION));
+                new ObservableValue("~Q", attributes.getBits()).setPinDescription(DESCRIPTION));
     }
 
     /**

File: src/main/java/de/neemann/digital/draw/graphics/GraphicSVG.java
Patch:
@@ -198,7 +198,7 @@ public void drawText(Vector p1, Vector p2, String text, Orientation orientation,
      *
      * @param text     the text
      * @param fontSize the fontsize
-     * @return the formated text
+     * @return the formatted text
      */
     public String formatText(String text, int fontSize) {
         return escapeXML(text);

File: src/main/java/de/neemann/digital/draw/graphics/GraphicSVGIndex.java
Patch:
@@ -38,6 +38,7 @@ public GraphicSVGIndex(OutputStream out, File source, int svgScale) throws IOExc
 
     @Override
     public String formatText(String text, int fontSize) {
+        text = text.replace('~', '\u00ac');
         return formatSVGIndex(escapeXML(formatIndex(cleanLabel(text))));
     }
 

File: src/main/java/de/neemann/digital/draw/graphics/GraphicSwing.java
Patch:
@@ -112,6 +112,7 @@ public void drawText(Vector p1, Vector p2, String text, Orientation orientation,
         int height = gr.getFontMetrics().getHeight();
         if (height > minFontSize) {
             if (text == null || text.length() == 0) return;
+            text = text.replace('~', '¬');
 
             //GraphicMinMax.approxTextSize(this, p1, p2, text, orientation, style);
 

File: src/test/java/de/neemann/digital/draw/graphics/GraphicSVGIndexTest.java
Patch:
@@ -12,6 +12,7 @@ public void testFormatText() throws Exception {
 
         assertEquals("Z<tspan style=\"font-size:80%;baseline-shift:sub\">0</tspan>", gs.formatText("Z_0", 0));
         assertEquals("&lt;a&gt;", gs.formatText("<a>", 0));
+        assertEquals("¬Z", gs.formatText("~Z", 0));
     }
 
 }
\ No newline at end of file

File: src/test/java/de/neemann/digital/docu/ScreenShots.java
Patch:
@@ -33,7 +33,7 @@ public class ScreenShots {
     public static void main(String[] args) {
 //        mainScreenShot();
 //        firstSteps();
-        hierarchicalDesign();
+//        hierarchicalDesign();
     }
 
     private static void mainScreenShot() {
@@ -156,6 +156,7 @@ private static void hierarchicalDesign() {
         ScreenShot.n = 20;
         new GuiTester("dig/test/docu/halfAdder.dig", "halfAdder.dig")
                 .add(new GuiTester.WindowCheck<>(Main.class, (gt, w) -> w.setSize(WIN_DX, WIN_DY)))
+                .press("control typed -", 4)
                 .delay(500)
                 .add(new ScreenShot<>(Main.class))
                 .execute();

File: src/main/java/de/neemann/digital/draw/elements/VisualElement.java
Patch:
@@ -436,9 +436,11 @@ public void rotate() {
      * Set the orientation of the element.
      *
      * @param rotation rotation
+     * @return this for chained calls
      */
-    public void setRotation(int rotation) {
+    public VisualElement setRotation(int rotation) {
         getElementAttributes().set(Keys.ROTATE, new Rotation(rotation));
+        return this;
     }
 
     /**

File: src/test/java/de/neemann/digital/integration/TestExamples.java
Patch:
@@ -40,7 +40,7 @@ public void testDistExamples() throws Exception {
      */
     public void testTestExamples() throws Exception {
         File examples = new File(Resources.getRoot(), "/dig/test");
-        assertEquals(116, new FileScanner(this::check).scan(examples));
+        assertEquals(117, new FileScanner(this::check).scan(examples));
         assertEquals(106, testCasesInFiles);
     }
 

File: src/main/java/de/neemann/digital/gui/components/table/TableDialog.java
Patch:
@@ -800,7 +800,7 @@ public void actionPerformed(ActionEvent e) {
                 generator.generate(TableDialog.this, filename, model.getTable(), lastGeneratedExpressions);
                 setLastUsedGenerator(generator);
             } catch (Exception e1) {
-                new ErrorMessage(Lang.get("msg_errorDuringCalculation")).addCause(e1).show(TableDialog.this);
+                new ErrorMessage(Lang.get("msg_errorDuringHardwareExport")).addCause(e1).show(TableDialog.this);
             }
         }
     }

File: src/test/java/de/neemann/digital/integration/TestExamples.java
Patch:
@@ -30,7 +30,7 @@ public class TestExamples extends TestCase {
     public void testDistExamples() throws Exception {
         File examples = new File(Resources.getRoot().getParentFile().getParentFile(), "/main/dig");
         assertEquals(208, new FileScanner(this::check).scan(examples));
-        assertEquals(112, testCasesInFiles);
+        assertEquals(116, testCasesInFiles);
     }
 
     /**

File: src/main/java/de/neemann/digital/core/Model.java
Patch:
@@ -106,7 +106,7 @@ public void setWindowPosManager(WindowPosManager windowPosManager) {
      */
     public WindowPosManager getWindowPosManager() {
         if (windowPosManager == null)
-            windowPosManager = new WindowPosManager();
+            windowPosManager = new WindowPosManager(null);
         return windowPosManager;
     }
 

File: src/main/java/de/neemann/digital/draw/shapes/InputShape.java
Patch:
@@ -82,7 +82,7 @@ public boolean clicked(CircuitComponent cc, Point pos, IOState ioState, Element
                 } else {
                     if (dialog == null || !dialog.isVisible()) {
                         Model model = ((In) element).getModel();
-                        dialog = new SingleValueDialog(pos, label, value, cc, model, modelSync);
+                        dialog = new SingleValueDialog(model.getWindowPosManager().getMain(), pos, label, value, cc, model, modelSync);
                     }
                     dialog.setVisible(true);
                     return false;

File: src/main/java/de/neemann/digital/gui/Main.java
Patch:
@@ -114,7 +114,7 @@ public static boolean enableExperimental() {
     private final JLabel statusLabel;
     private final StateManager stateManager = new StateManager();
     private final ScheduledThreadPoolExecutor timerExecutor = new ScheduledThreadPoolExecutor(1);
-    private final WindowPosManager windowPosManager = new WindowPosManager();
+    private final WindowPosManager windowPosManager;
     private final InsertHistory insertHistory;
     private final boolean keepPrefMainFile;
 
@@ -150,6 +150,8 @@ private Main(MainBuilder builder) {
         setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
         setIconImages(IconCreator.createImages("icon32.png", "icon64.png", "icon128.png"));
 
+        windowPosManager=new WindowPosManager(this);
+
         keepPrefMainFile = builder.keepPrefMainFile;
 
         if (builder.library != null) library = builder.library;

File: src/main/java/de/neemann/digital/gui/NumberingWizard.java
Patch:
@@ -51,7 +51,6 @@ public void windowClosed(WindowEvent windowEvent) {
 
         pinNumber = 1;
         setPinNumber(pinNumber);
-        setAlwaysOnTop(true);
         setLocation(parent.getLocation());
     }
 

File: src/main/java/de/neemann/digital/gui/components/AttributeDialog.java
Patch:
@@ -146,7 +146,6 @@ public void actionPerformed(ActionEvent e) {
         getRootPane().registerKeyboardAction(cancel,
                 KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0),
                 JComponent.WHEN_IN_FOCUSED_WINDOW);
-        setAlwaysOnTop(true);
     }
 
     /**

File: src/main/java/de/neemann/digital/gui/components/ElementOrderer.java
Patch:
@@ -34,11 +34,10 @@ public class ElementOrderer<T> extends JDialog {
      * @param title the dialogs title
      * @param data  the data to order
      */
-    public ElementOrderer(Frame owner, String title, OrderInterface<T> data) {
-        super(owner, title, true);
+    public ElementOrderer(Window owner, String title, OrderInterface<T> data) {
+        super(owner, title, ModalityType.APPLICATION_MODAL);
         this.data = data;
         setDefaultCloseOperation(DISPOSE_ON_CLOSE);
-        setAlwaysOnTop(true);
 
         listModel = new MyListModel<T>(data);
         list = new JList<T>(listModel);

File: src/main/java/de/neemann/digital/gui/components/ProbeDialog.java
Patch:
@@ -54,7 +54,6 @@ public boolean equals(Signal a, String b) {
         JTable list = new JTable(tableModel);
         list.setRowHeight(list.getFont().getSize() * 6 / 5);
         getContentPane().add(new JScrollPane(list), BorderLayout.CENTER);
-        setAlwaysOnTop(true);
 
         addWindowListener(new WindowAdapter() {
             @Override

File: src/main/java/de/neemann/digital/gui/components/SingleValueDialog.java
Patch:
@@ -68,15 +68,16 @@ public static InMode[] values(boolean supportsHighZ) {
     /**
      * Edits a single value
      *
+     * @param parent           the parent frame
      * @param pos              the position to pop up the dialog
      * @param label            the name of the value
      * @param value            the value to edit
      * @param circuitComponent the component which contains the circuit
      * @param model            the model
      * @param modelSync        used to access the running model
      */
-    public SingleValueDialog(Point pos, String label, ObservableValue value, CircuitComponent circuitComponent, Model model, Sync modelSync) {
-        super((Frame) null, Lang.get("win_valueInputTitle_N", label), false);
+    public SingleValueDialog(JFrame parent, Point pos, String label, ObservableValue value, CircuitComponent circuitComponent, Model model, Sync modelSync) {
+        super(parent, Lang.get("win_valueInputTitle_N", label), false);
         setDefaultCloseOperation(DISPOSE_ON_CLOSE);
         this.value = value;
         this.circuitComponent = circuitComponent;
@@ -152,7 +153,6 @@ public void actionPerformed(ActionEvent actionEvent) {
         Screen.setLocation(this, pos);
         textField.requestFocus();
         textField.select(0, Integer.MAX_VALUE);
-        setAlwaysOnTop(true);
     }
 
     private void apply() {

File: src/main/java/de/neemann/digital/gui/components/graphics/GraphicCard.java
Patch:
@@ -155,7 +155,7 @@ private void updateGraphic(boolean bank) {
         if (paintPending.compareAndSet(false, true)) {
             SwingUtilities.invokeLater(() -> {
                 if (graphicDialog == null || !graphicDialog.isVisible()) {
-                    graphicDialog = new GraphicDialog(width, height);
+                    graphicDialog = new GraphicDialog(getModel().getWindowPosManager().getMain(), width, height);
                     getModel().getWindowPosManager().register("GraphicCard_" + label, graphicDialog);
                 }
                 paintPending.set(false);

File: src/main/java/de/neemann/digital/gui/components/graphics/LedMatrix.java
Patch:
@@ -91,7 +91,7 @@ private void dataChanged(int colAddr, long rowData) {
         if (paintPending.compareAndSet(false, true)) {
             SwingUtilities.invokeLater(() -> {
                 if (ledMatrixDialog == null || !ledMatrixDialog.isVisible()) {
-                    ledMatrixDialog = new LedMatrixDialog(dy, data, color, ledPersist);
+                    ledMatrixDialog = new LedMatrixDialog(getModel().getWindowPosManager().getMain(), dy, data, color, ledPersist);
                     getModel().getWindowPosManager().register("ledMatrix_" + label, ledMatrixDialog);
                 }
                 paintPending.set(false);

File: src/main/java/de/neemann/digital/gui/components/graphics/LedMatrixDialog.java
Patch:
@@ -16,20 +16,20 @@ public class LedMatrixDialog extends JDialog {
     /**
      * Create a new instance
      *
+     * @param parent     the parent frame
      * @param dy         height of matrix
      * @param data       data
      * @param color      the LEDs color
      * @param ledPersist if true the LEDs light up indefinite
      */
-    public LedMatrixDialog(int dy, long[] data, Color color, boolean ledPersist) {
-        super((JFrame) null, Lang.get("elem_LedMatrix"), false);
+    public LedMatrixDialog(JFrame parent, int dy, long[] data, Color color, boolean ledPersist) {
+        super(parent, Lang.get("elem_LedMatrix"), false);
         setDefaultCloseOperation(DISPOSE_ON_CLOSE);
 
         ledMatrixComponent = new LedMatrixComponent(dy, data, color, ledPersist);
         getContentPane().add(ledMatrixComponent);
         pack();
 
-        setAlwaysOnTop(true);
         setLocationRelativeTo(null);
         setVisible(true);
     }

File: src/main/java/de/neemann/digital/gui/components/table/ShowStringDialog.java
Patch:
@@ -49,7 +49,7 @@ public ShowStringDialog(JDialog parent, String title, String str, boolean html)
         init(parent, str, html);
     }
 
-    private void init(Component parent, String str, boolean html) {
+    private void init(Window parent, String str, boolean html) {
         setDefaultCloseOperation(DISPOSE_ON_CLOSE);
 
         JTextComponent textComp;
@@ -68,6 +68,5 @@ private void init(Component parent, String str, boolean html) {
 
         pack();
         setLocationRelativeTo(parent);
-        setAlwaysOnTop(true);
     }
 }

File: src/main/java/de/neemann/digital/gui/components/table/TableDialog.java
Patch:
@@ -166,7 +166,7 @@ public void mouseClicked(MouseEvent event) {
             @Override
             public void actionPerformed(ActionEvent e) {
                 ReorderInputs ri = new ReorderInputs(model.getTable());
-                if (new ElementOrderer<>(parent, Lang.get("menu_table_reorder_inputs"), ri.getItems())
+                if (new ElementOrderer<>(TableDialog.this, Lang.get("menu_table_reorder_inputs"), ri.getItems())
                         .addDeleteButton()
                         .addOkButton()
                         .showDialog()) {
@@ -192,7 +192,7 @@ public void actionPerformed(ActionEvent actionEvent) {
             @Override
             public void actionPerformed(ActionEvent e) {
                 ReorderOutputs ro = new ReorderOutputs(model.getTable());
-                if (new ElementOrderer<>(parent, Lang.get("menu_table_reorder_outputs"), ro.getItems())
+                if (new ElementOrderer<>(TableDialog.this, Lang.get("menu_table_reorder_outputs"), ro.getItems())
                         .addDeleteButton()
                         .addOkButton()
                         .showDialog()) {

File: src/main/java/de/neemann/digital/gui/components/terminal/Keyboard.java
Patch:
@@ -77,7 +77,7 @@ private KeyboardDialog getKeyboard() {
         if (keyboardDialog == null || !keyboardDialog.isVisible()) {
             SwingUtilities.invokeLater(() -> {
                 if (keyboardDialog == null || !keyboardDialog.isVisible()) {
-                    keyboardDialog = new KeyboardDialog(null);
+                    keyboardDialog = new KeyboardDialog(getModel().getWindowPosManager().getMain());
                     getModel().getWindowPosManager().register("keyboard_" + label, keyboardDialog);
                 }
             });

File: src/main/java/de/neemann/digital/gui/components/terminal/KeyboardDialog.java
Patch:
@@ -44,7 +44,6 @@ public void keyTyped(KeyEvent e) {
             }
         });
 
-        setAlwaysOnTop(true);
         pack();
         setLocationRelativeTo(owner);
         setVisible(true);

File: src/main/java/de/neemann/digital/gui/components/terminal/Terminal.java
Patch:
@@ -66,7 +66,7 @@ public void readInputs() throws NodeException {
             if (value != 0)
                 SwingUtilities.invokeLater(() -> {
                     if (terminalDialog == null || !terminalDialog.isVisible()) {
-                        terminalDialog = new TerminalDialog(attr);
+                        terminalDialog = new TerminalDialog(getModel().getWindowPosManager().getMain(), attr);
                         getModel().getWindowPosManager().register("terminal_" + label, terminalDialog);
                     }
                     terminalDialog.addChar((char) value);

File: src/main/java/de/neemann/digital/draw/library/ElementLibrary.java
Patch:
@@ -183,14 +183,14 @@ public ElementLibrary(File jarFile) {
 
         addExternalJarComponents(jarFile);
 
-        populateNodeMap();
-
         custom = new ElementLibraryFolder(root, Lang.get("menu_custom"));
 
         File libPath = Settings.getInstance().get(Keys.SETTINGS_LIBRARY_PATH);
         if (libPath != null && libPath.exists())
             new ElementLibraryFolder(root, Lang.get("menu_library")).scanFolder(libPath);
 
+        populateNodeMap();
+
         isProgrammable.clear();
         root.traverse(libraryNode -> {
             ElementTypeDescription d = libraryNode.getDescriptionOrNull();

File: src/test/java/de/neemann/digital/integration/TestInGUI.java
Patch:
@@ -223,6 +223,7 @@ public void run() throws Exception {
                 Thread.sleep(500);
                 activeWindow = FocusManager.getCurrentManager().getActiveWindow();
             }
+            assertNotNull("no java window on top!", activeWindow);
 
             assertTrue(getClass().getSimpleName()
                             + ": wrong dialog on top! expected: <"
@@ -258,6 +259,7 @@ public static class CloseTopMost implements Runnable {
         @Override
         public void run() {
             Window activeWindow = FocusManager.getCurrentManager().getActiveWindow();
+            assertNotNull("no java window on top!", activeWindow);
             activeWindow.dispose();
         }
     }

File: src/main/java/de/neemann/digital/draw/graphics/GraphicSVGLaTeX.java
Patch:
@@ -137,7 +137,7 @@ private String checkMath(boolean inMath, String s) {
     }
 
     private String formatIndex(String text) {
-        if (text.length() > 0 && text.charAt(0) != '$') {
+        if (text.indexOf('$') < 0) {
             int p = text.lastIndexOf("_");
             if (p > 0) {
                 text = text.substring(0, p) + "$_{" + text.substring(p + 1) + "}$";

File: src/main/java/de/neemann/digital/gui/GuiModelObserver.java
Patch:
@@ -50,8 +50,8 @@ public void handleEvent(ModelEvent event) {
             if (paintPending.compareAndSet(false, true)) {
                 lastUpdateTime = time;
                 SwingUtilities.invokeLater(() -> {
-                    paintPending.set(false);
                     component.paintImmediately();
+                    paintPending.set(false);
                 });
             }
             changed = false;

File: src/main/java/de/neemann/digital/analyse/quinemc/TableReducer.java
Patch:
@@ -24,8 +24,7 @@ public class TableReducer {
      * @param table the bool table
      */
     public TableReducer(List<Variable> vars, BoolTable table) {
-        this.vars = new ArrayList<>();
-        this.vars.addAll(vars);
+        this.vars = new ArrayList<>(vars);
         this.table = table;
     }
 
@@ -37,7 +36,7 @@ public TableReducer(List<Variable> vars, BoolTable table) {
     public boolean canReduce() {
         if (table instanceof BoolTableExpanded) {
             BoolTableExpanded t = (BoolTableExpanded) table;
-            vars = t.getVars();
+            vars = new ArrayList<>(t.getVars());
             table = t.getBoolTable();
             canReduceOnlyCheckTable();
             return true;

File: src/main/java/de/neemann/digital/gui/components/table/TableDialog.java
Patch:
@@ -672,7 +672,7 @@ private HTMLExpressionListener() {
         }
 
         @Override
-        public void resultFound(String name, Expression expression) throws FormatterException, ExpressionException {
+        public void resultFound(String name, Expression expression) throws FormatterException {
             if (count == 0)
                 firstExp = "<html>" + htmlFormatter.identifier(name) + "=" + htmlFormatter.format(expression) + "</html>";
             html.append("<tr>");
@@ -762,7 +762,7 @@ private LaTeXExpressionListener(TruthTableTableModel model) throws ExpressionExc
         }
 
         @Override
-        public void resultFound(String name, Expression expression) throws FormatterException, ExpressionException {
+        public void resultFound(String name, Expression expression) throws FormatterException {
             sb.append(FormatToTableLatex.formatIdentifier(name))
                     .append("&=&")
                     .append(FormatToExpression.FORMATTER_LATEX.format(expression))

File: src/main/java/de/neemann/digital/core/Signal.java
Patch:
@@ -117,10 +117,10 @@ public String toString() {
     }
 
     /**
-     * @return the value in the spscified format
+     * @return the value in the specified format
      */
     public String getValueString() {
-        return format.editableFormat(value.getCopy());
+        return format.formatToEdit(value.getCopy());
     }
 
     /**

File: src/main/java/de/neemann/digital/draw/elements/Wire.java
Patch:
@@ -99,7 +99,7 @@ public void drawTo(Graphic graphic, Style highLight) {
                 pos = pos.add(0, -3);
                 ori = de.neemann.digital.draw.graphics.Orientation.CENTERBOTTOM;
             }
-            graphic.drawText(pos, pos.add(1, 0), value.getValueString(), ori, Style.WIRE_VALUE);
+            graphic.drawText(pos, pos.add(1, 0), value.toString(), ori, Style.WIRE_VALUE);
         }
 
         int minCrossLen = isConnectedToSplitter ? MIN_CROSS_WIRE_LEN_SPLITTER : MIN_CROSS_WIRE_LEN;

File: src/main/java/de/neemann/digital/draw/shapes/ConstShape.java
Patch:
@@ -35,7 +35,7 @@ public ConstShape(ElementAttributes attr, PinDescriptions inputs, PinDescription
         this.outputs = outputs;
         int bits = attr.getBits();
         IntFormat format = attr.get(Keys.INT_FORMAT);
-        this.value = format.format(new Value(attr.get(Keys.VALUE), bits));
+        this.value = format.formatToView(new Value(attr.get(Keys.VALUE), bits));
     }
 
     @Override

File: src/main/java/de/neemann/digital/draw/shapes/InputShape.java
Patch:
@@ -120,7 +120,7 @@ public void drawTo(Graphic graphic, Style heighLight) {
                 style = Style.getWireStyle(value);
                 if (value.getBits() > 1) {
                     Vector textPos = new Vector(-1 - SIZE, -4 - SIZE);
-                    graphic.drawText(textPos, textPos.add(1, 0), format.format(value), Orientation.CENTERBOTTOM, Style.NORMAL);
+                    graphic.drawText(textPos, textPos.add(1, 0), format.formatToView(value), Orientation.CENTERBOTTOM, Style.NORMAL);
                 }
             }
 

File: src/main/java/de/neemann/digital/draw/shapes/OutputShape.java
Patch:
@@ -92,7 +92,7 @@ public void drawTo(Graphic graphic, Style highLight) {
                 style = Style.getWireStyle(value);
                 if (value.getBits() > 1) {
                     Vector textPos = new Vector(1 + SIZE, -4 - SIZE);
-                    graphic.drawText(textPos, textPos.add(1, 0), format.format(value), Orientation.CENTERBOTTOM, Style.NORMAL);
+                    graphic.drawText(textPos, textPos.add(1, 0), format.formatToView(value), Orientation.CENTERBOTTOM, Style.NORMAL);
                 }
             }
 

File: src/main/java/de/neemann/digital/draw/shapes/ProbeShape.java
Patch:
@@ -69,7 +69,7 @@ public void readObservableValues() {
     public void drawTo(Graphic graphic, Style highLight) {
         graphic.drawText(new Vector(2, -1), new Vector(3, -1), label, Orientation.LEFTBOTTOM, Style.NORMAL);
         if (bits > 1) {
-            String v = format.format(inValueCopy);
+            String v = format.formatToView(inValueCopy);
             graphic.drawText(new Vector(2, 1), new Vector(3, 1), v, Orientation.LEFTTOP, Style.NORMAL);
         }
     }

File: src/main/java/de/neemann/digital/core/flipflops/FlipflopBit.java
Patch:
@@ -77,7 +77,7 @@ public String getLabel() {
     public void registerNodes(Model model) {
         super.registerNodes(model);
         if (isProbe)
-            model.addSignal(new Signal(label, q, v -> {
+            model.addSignal(new Signal(label, q, (v, z) -> {
                 out = v != 0;
                 q.setBool(out);
                 qn.setBool(!out);

File: src/main/java/de/neemann/digital/core/flipflops/FlipflopD.java
Patch:
@@ -104,7 +104,7 @@ public ObservableValues getOutputs() {
     public void registerNodes(Model model) {
         super.registerNodes(model);
         if (isProbe)
-            model.addSignal(new Signal(label, q, v -> {
+            model.addSignal(new Signal(label, q, (v, z) -> {
                 value = v;
                 q.setValue(value);
                 qn.setValue(~value);

File: src/main/java/de/neemann/digital/core/io/Probe.java
Patch:
@@ -25,6 +25,7 @@ public class Probe implements Element {
             .addAttribute(Keys.INT_FORMAT);
 
     private final String label;
+    private final IntFormat format;
     private ObservableValue value;
 
     /**
@@ -34,6 +35,7 @@ public class Probe implements Element {
      */
     public Probe(ElementAttributes attributes) {
         label = attributes.get(Keys.LABEL);
+        format = attributes.get(Keys.INT_FORMAT);
     }
 
     @Override
@@ -48,7 +50,7 @@ public ObservableValues getOutputs() {
 
     @Override
     public void registerNodes(Model model) {
-        model.addSignal(new Signal(label, value));
+        model.addSignal(new Signal(label, value).setFormat(format));
     }
 
 }

File: src/main/java/de/neemann/digital/core/memory/Counter.java
Patch:
@@ -94,7 +94,7 @@ public ObservableValues getOutputs() {
     public void registerNodes(Model model) {
         super.registerNodes(model);
         if (probe)
-            model.addSignal(new Signal(label, out, v -> {
+            model.addSignal(new Signal(label, out, (v, z) -> {
                 counter = v;
                 boolean o = (counter == maxValue) && enable.getBool();
                 out.setValue(counter);

File: src/main/java/de/neemann/digital/core/memory/Register.java
Patch:
@@ -78,7 +78,7 @@ public ObservableValues getOutputs() {
     public void registerNodes(Model model) {
         super.registerNodes(model);
         if (isProbe)
-            model.addSignal(new Signal(label, q, v -> {
+            model.addSignal(new Signal(label, q, (v, z) -> {
                 value = v;
                 q.setValue(value);
             }));

File: src/test/java/de/neemann/digital/core/BitsTest.java
Patch:
@@ -77,6 +77,8 @@ public void testDecode() throws Bits.NumberFormatException {
         assertEquals(0xFFFFFFFFFFFFFFFFL, Bits.decode("0xFFFFFFFFFFFFFFFF"));
 
         assertEquals(0xFFFFFFFFFFFFFFFFL, Bits.decode("FFFFFFFFFFFFFFFF", 0, 16));
+
+        assertEquals(42, Bits.decode("'*'"));
     }
 
     public void testDecodeInvalid() {

File: src/test/java/de/neemann/digital/integration/TestExamples.java
Patch:
@@ -29,7 +29,7 @@ public class TestExamples extends TestCase {
      */
     public void testDistExamples() throws Exception {
         File examples = new File(Resources.getRoot().getParentFile().getParentFile(), "/main/dig");
-        assertEquals(204, new FileScanner(this::check).scan(examples));
+        assertEquals(205, new FileScanner(this::check).scan(examples));
         assertEquals(109, testCasesInFiles);
     }
 

File: src/main/java/de/neemann/digital/draw/library/ElementLibrary.java
Patch:
@@ -152,6 +152,7 @@ public ElementLibrary(File jarFile) {
                         .add(EEPROM.DESCRIPTION)
                         .add(GraphicCard.DESCRIPTION)
                         .add(RAMDualAccess.DESCRIPTION)
+                        .add(RegisterFile.DESCRIPTION)
                         .add(Counter.DESCRIPTION))
                 .add(new LibraryNode(Lang.get("lib_arithmetic"))
                         .add(Add.DESCRIPTION)

File: src/main/java/de/neemann/digital/draw/shapes/ShapeFactory.java
Patch:
@@ -77,6 +77,7 @@ public ShapeFactory(ElementLibrary library, boolean ieee) {
         map.put(RAMSinglePortSel.DESCRIPTION.getName(), (attr, inputs, outputs) -> new RAMShape(attr, RAMSinglePortSel.DESCRIPTION));
         map.put(EEPROM.DESCRIPTION.getName(), (attr, inputs, outputs) -> new RAMShape(attr, EEPROM.DESCRIPTION));
         map.put(RAMDualAccess.DESCRIPTION.getName(), (attr, inputs, outputs) -> new RAMShape(attr, RAMDualAccess.DESCRIPTION));
+        map.put(RegisterFile.DESCRIPTION.getName(), (attr, inputs, outputs) -> new RAMShape(attr, RegisterFile.DESCRIPTION, 4));
 
         map.put(In.DESCRIPTION.getName(), InputShape::new);
         map.put(Reset.DESCRIPTION.getName(), ResetShape::new);

File: src/test/java/de/neemann/digital/hdl/vhdl/TestInSimulator.java
Patch:
@@ -37,7 +37,7 @@ public void testInSimulator() throws Exception {
         File examples = new File(Resources.getRoot(), "/dig/test/vhdl");
         try {
             int tested = new FileScanner(this::check).scan(examples);
-            assertEquals(25, tested);
+            assertEquals(26, tested);
             assertEquals(tested, testBenches);
         } catch (FileScanner.SkipAllException e) {
             // if ghdl is not installed its also ok
@@ -79,7 +79,7 @@ public void testProcessorInSimulator() throws Exception {
 
     /*
     public void testInSimulatorDebug() throws Exception {
-        File file = new File(Resources.getRoot(),"dig/test/vhdl/priorityEncoder.dig");
+        File file = new File(Resources.getRoot(),"dig/test/vhdl/registerFile.dig");
 
         ToBreakRunner br = new ToBreakRunner(file);
         System.out.println(new VHDLGenerator(br.getLibrary(), new CodePrinterStr(true)).export(br.getCircuit()));

File: src/test/java/de/neemann/digital/integration/TestExamples.java
Patch:
@@ -40,8 +40,8 @@ public void testDistExamples() throws Exception {
      */
     public void testTestExamples() throws Exception {
         File examples = new File(Resources.getRoot(), "/dig/test");
-        assertEquals(115, new FileScanner(this::check).scan(examples));
-        assertEquals(105, testCasesInFiles);
+        assertEquals(116, new FileScanner(this::check).scan(examples));
+        assertEquals(106, testCasesInFiles);
     }
 
 

File: src/main/java/de/neemann/digital/testing/parser/LineEmitterRepeat.java
Patch:
@@ -7,7 +7,7 @@
  * Created by hneemann on 19.04.17.
  */
 public class LineEmitterRepeat implements LineEmitter {
-    private static final int MAX_LOOPS = 1 << 24;
+    private static final long MAX_LOOPS = 1L << 24;
 
     private final String name;
     private final int size;
@@ -21,9 +21,9 @@ public class LineEmitterRepeat implements LineEmitter {
      * @param inner the lines to repeat
      * @throws ParserException if there are to many iterations
      */
-    public LineEmitterRepeat(String name, int size, LineEmitter inner) throws ParserException {
+    public LineEmitterRepeat(String name, long size, LineEmitter inner) throws ParserException {
         this.name = name;
-        this.size = size;
+        this.size = (int) size;
         this.inner = inner;
 
         if (size > MAX_LOOPS)

File: src/main/java/de/neemann/digital/testing/parser/Parser.java
Patch:
@@ -102,7 +102,7 @@ private LineEmitter parseRows(Tokenizer.Token endToken) throws IOException, Pars
                 case REPEAT:
                     tok.consume();
                     expect(Tokenizer.Token.OPEN);
-                    int count = (int) parseInt();
+                    long count = parseInt();
                     expect(Tokenizer.Token.CLOSE);
                     list.add(new LineEmitterRepeat("n", count, parseSingleRow()));
                     break;
@@ -112,7 +112,7 @@ private LineEmitter parseRows(Tokenizer.Token endToken) throws IOException, Pars
                     expect(Tokenizer.Token.IDENT);
                     String var = tok.getIdent();
                     expect(Tokenizer.Token.COMMA);
-                    count = (int) parseInt();
+                    count = parseInt();
                     expect(Tokenizer.Token.CLOSE);
                     list.add(new LineEmitterRepeat(var, count, parseRows(Tokenizer.Token.LOOP)));
                     break;

File: src/main/java/de/neemann/digital/gui/components/table/TableDialog.java
Patch:
@@ -433,14 +433,14 @@ public void actionPerformed(ActionEvent actionEvent) {
         }
 
         JMenu hardware = new JMenu(Lang.get("menu_table_create_hardware"));
-        register(hardware, new GenerateCUPL(new CuplExporter(), "GAL16v8/CUPL"));
+        register(hardware, new GenerateCUPL(CuplExporter::new, "GAL16v8/CUPL"));
         register(hardware, new GenerateFile("jed", () -> new ExpressionToFileExporter(new Gal16v8JEDECExporter()),
                 "GAL16v8/JEDEC", Lang.get("menu_table_create_jedec_tt")));
-        register(hardware, new GenerateCUPL(new Gal22v10CuplExporter(), "GAL22v10/CUPL"));
+        register(hardware, new GenerateCUPL(Gal22v10CuplExporter::new, "GAL22v10/CUPL"));
         register(hardware, new GenerateFile("jed", () -> new ExpressionToFileExporter(new Gal22v10JEDECExporter()),
                 "GAL22v10/JEDEC", Lang.get("menu_table_create_jedec_tt")));
         for (ATFDevice atfDev : ATFDevice.values()) {
-            register(hardware, new GenerateCUPL(atfDev.getCuplExporter(), "ATF150x/" + atfDev.getMenuName() + "/CUPL"));
+            register(hardware, new GenerateCUPL(atfDev::getCuplExporter, "ATF150x/" + atfDev.getMenuName() + "/CUPL"));
             register(hardware, new GenerateFile("tt2",
                     () -> atfDev.createExpressionToFileExporter(TableDialog.this, getProjectName()),
                     "ATF150x/" + atfDev.getMenuName() + "/TT2",

File: src/main/java/de/neemann/digital/core/element/ElementAttributes.java
Patch:
@@ -54,7 +54,7 @@ public <VALUE> VALUE get(Key<VALUE> key) {
 
             // needed to fix files with int constants!
             if ((key == Keys.VALUE) && value instanceof Integer) {
-                value = (VALUE) new Long(((Integer) value).longValue());
+                value = (VALUE) Long.valueOf(((Integer) value).longValue());
                 attributes.put(key.getKey(), value);
             }
 

File: src/main/java/de/neemann/digital/core/memory/DataField.java
Patch:
@@ -1,5 +1,6 @@
 package de.neemann.digital.core.memory;
 
+import de.neemann.digital.core.Bits;
 import de.neemann.digital.lang.Lang;
 
 import java.io.*;
@@ -78,13 +79,13 @@ public DataField(Reader reader) throws IOException {
                     else
                         line = line.trim();
                     if (line.length() > 0) {
-                        long v = Long.parseLong(line, 16);
+                        long v = Bits.decode(line, 0, 16);
                         if (pos == data.length)
                             data = Arrays.copyOf(data, data.length * 2);
                         data[pos] = v;
                         pos++;
                     }
-                } catch (NumberFormatException e) {
+                } catch (Bits.NumberFormatException e) {
                     throw new IOException(e);
                 }
             }

File: src/main/java/de/neemann/digital/gui/Main.java
Patch:
@@ -1281,7 +1281,7 @@ private void saveFile(File filename, boolean toPrefs) {
             if (library.getRootFilePath() == null)
                 library.setRootFilePath(filename.getParentFile());
         } catch (IOException e) {
-            new ErrorMessage(Lang.get("msg_errorWritingFile")).addCause(e).show();
+            new ErrorMessage(Lang.get("msg_errorWritingFile")).addCause(e).show(this);
         }
     }
 

File: src/main/java/de/neemann/digital/gui/components/ProbeDialog.java
Patch:
@@ -184,10 +184,10 @@ public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
                 Signal.Setter s = signals.get(rowIndex).getSetter();
                 if (s != null)
                     try {
-                        long value = Long.decode(aValue.toString());
+                        long value = Bits.decode(aValue.toString());
                         modelSync.access(() -> s.set(value));
                         circuitComponent.modelHasChanged();
-                    } catch (NumberFormatException e) {
+                    } catch (Bits.NumberFormatException e) {
                         // do nothing in this case!
                     }
             }

File: src/main/java/de/neemann/digital/gui/components/SingleValueDialog.java
Patch:
@@ -257,8 +257,8 @@ else if (text.startsWith("0") && text.length() > 1)
                 else
                     setSelectedFormat(InMode.DECIMAL);
                 try {
-                    editValue = Long.decode(text);
-                } catch (NumberFormatException e) {
+                    editValue = Bits.decode(text);
+                } catch (Bits.NumberFormatException e) {
                     // do nothing on error
                 }
             }

File: src/main/java/de/neemann/digital/gui/components/table/TableDialog.java
Patch:
@@ -557,7 +557,7 @@ private void createCircuit(boolean useJKff, ExpressionModifier... modifier) {
                     .setBaseFileName(filename)
                     .openLater();
         } catch (ExpressionException | FormatterException | RuntimeException e) {
-            new ErrorMessage(Lang.get("msg_errorDuringCalculation")).addCause(e).show();
+            new ErrorMessage(Lang.get("msg_errorDuringCalculation")).addCause(e).show(this);
         }
     }
 
@@ -597,7 +597,7 @@ private void createCUPL(CuplExporter cupl) {
                 cupl.writeTo(out);
             }
         } catch (ExpressionException | FormatterException | RuntimeException | IOException | FuseMapFillerException | PinMapException e) {
-            new ErrorMessage(Lang.get("msg_errorDuringCalculation")).addCause(e).show();
+            new ErrorMessage(Lang.get("msg_errorDuringCalculation")).addCause(e).show(this);
         }
     }
 
@@ -636,7 +636,7 @@ private void calculateExpressions() {
 
         } catch (ExpressionException | FormatterException | AnalyseException e1) {
             lastGeneratedExpressions = null;
-            new ErrorMessage(Lang.get("msg_errorDuringCalculation")).addCause(e1).show();
+            new ErrorMessage(Lang.get("msg_errorDuringCalculation")).addCause(e1).show(this);
         }
     }
 

File: src/test/java/de/neemann/digital/core/pld/DiodeTest.java
Patch:
@@ -20,11 +20,11 @@ public class DiodeTest extends TestCase {
      * is not suited to handle bidirectional passive diodes.
      * The solution implemented for switches - form a common net if switch is closed - is also
      * not able to handle diodes.
-     *
+     * <p>
      * To make this possible the simulation core needs a significant improvement.
      */
 
-    private static final Value[] values = new Value[]{new Value("0"),new Value("1"), new Value("Z")};
+    private static final Value[] values = new Value[]{new Value(0), new Value(1), Value.getHighZ()};
 
     public void testAntiParallelDiodes() throws IOException, ElementNotFoundException, PinException, NodeException {
         /*

File: src/test/java/de/neemann/digital/data/ValueTableTest.java
Patch:
@@ -12,7 +12,7 @@
 public class ValueTableTest extends TestCase {
     private ValueTable t = new ValueTable("A", "B", "C")
             .add(new Value[]{new Value(0), new Value(0), new Value(0)})
-            .add(new Value[]{new Value(0), new Value(1), new Value("z")});
+            .add(new Value[]{new Value(0), new Value(1), Value.getHighZ()});
 
 
     public void testGeneral() throws Exception {

File: src/test/java/de/neemann/digital/FlipFlopsTest.java
Patch:
@@ -94,8 +94,8 @@ public void testFlipFlopJKMS() throws Exception {
         nor4.setInputs(ovs(a4.getOutput(), nor3.getOutput()));
 
         TestExecuter sc = new TestExecuter(model, true).setInputs(c, j, k).setOutputs(nor3.getOutput(), nor4.getOutput());
-        sc.check(0, 1, 0, IGNORE, IGNORE); // undefined
-        sc.check(1, 1, 0, IGNORE, IGNORE); // undefined
+        sc.checkZ(0, 1, 0, IGNORE, IGNORE); // undefined
+        sc.checkZ(1, 1, 0, IGNORE, IGNORE); // undefined
         sc.check(0, 1, 0, 1, 0);
         sc.check(0, 0, 0, 1, 0);
         sc.check(1, 0, 0, 1, 0);

File: src/test/java/de/neemann/digital/core/wiring/DriverTest.java
Patch:
@@ -25,7 +25,7 @@ public void testDriver() throws Exception {
         TestExecuter sc = new TestExecuter(model).setInputs(a, sel).setOutputs(out.getOutputs());
         sc.check(0, 1, 0);
         sc.check(2, 1, 2);
-        sc.check(2, 0, HIGHZ);
+        sc.checkZ(2, 0, HIGHZ);
         sc.check(2, 1, 2);
     }
 

File: src/test/java/de/neemann/digital/core/wiring/SplitterHighZTest.java
Patch:
@@ -66,7 +66,7 @@ public void testHighZEnabled() throws NodeException, PinException {
         sc.check(1, 1, 0);
         sc.check(2, 0, 1);
         sc.check(3, 1, 1);
-        sc.check(HIGHZ, HIGHZ, HIGHZ);
+        sc.checkZ(HIGHZ, HIGHZ, HIGHZ);
     }
 
 }

File: src/test/java/de/neemann/digital/integration/TestNesting.java
Patch:
@@ -76,8 +76,8 @@ private TestExecuter createTestExecuterForNesting(String file) throws IOExceptio
     public void testMSFF() throws Exception {
         TestExecuter te = createTestExecuterForNesting("dig/nestedMSFF.dig");
         //       C  J  K  Q
-        te.check(0, 0, 0, IGNORE);  // initial state is undefined
-        te.check(1, 0, 1, IGNORE);
+        te.checkZ(0, 0, 0, IGNORE);  // initial state is undefined
+        te.checkZ(1, 0, 1, IGNORE);
         te.check(0, 0, 0, 0);
         te.check(1, 1, 0, 0);
         te.check(0, 0, 0, 1);

File: src/main/java/de/neemann/digital/core/element/Key.java
Patch:
@@ -269,7 +269,7 @@ public static final class KeyBits extends KeyInteger {
         public KeyBits(String key, Integer def) {
             super(key, def);
             setMin(1);
-            super.setMax(64);
+            setMax(64);
             setComboBoxValues(VALUES);
             allowGroupEdit();
         }

File: src/main/java/de/neemann/digital/gui/Main.java
Patch:
@@ -257,7 +257,7 @@ public void actionPerformed(ActionEvent actionEvent) {
             @Override
             public void actionPerformed(ActionEvent actionEvent) {
                 InsertAction lastInsertAction = insertHistory.getLastInsertAction();
-                if (lastInsertAction != null)
+                if (lastInsertAction != null && model == null)
                     lastInsertAction.actionPerformed(actionEvent);
             }
         }.setAccelerator("L").enableAcceleratorIn(circuitComponent);
@@ -816,7 +816,7 @@ public void actionPerformed(ActionEvent actionEvent) {
                     list.add(new Wire(new Vector(0, SIZE * 2), new Vector(SIZE, SIZE * 2)));
                     list.add(new Wire(new Vector(SIZE, SIZE * 2), new Vector(SIZE, SIZE)));
                     list.add(new Wire(new Vector(SIZE, SIZE), new Vector(SIZE * 2, SIZE)));
-                    circuitComponent.setPartsToInsert(list);
+                    circuitComponent.setPartsToInsert(list, null);
                 }
             }
         }.setToolTip(Lang.get("menu_addPowerSupply_tt")).createJMenuItem());

File: src/main/java/de/neemann/digital/core/element/Keys.java
Patch:
@@ -418,7 +418,7 @@ private Keys() {
      * Background Color of nested circuits
      */
     public static final Key<java.awt.Color> BACKGROUND_COLOR
-            = new Key<>("backgroundColor", new Color(255, 255, 0, 64))
+            = new Key<>("backgroundColor", new Color(255, 255, 180, 200))
             .setDependsOn(IS_DIL, true);
 
     /**

File: src/main/java/de/neemann/digital/builder/circuit/CircuitBuilder.java
Patch:
@@ -369,6 +369,7 @@ private void addClockToFlipFlops(Circuit circuit) {
         clock.getElementAttributes()
                 .set(Keys.LABEL, "C")
                 .set(Keys.ROTATE, new Rotation(3))
+                .set(Keys.FREQUENCY, 2)
                 .set(Keys.RUN_AT_REAL_TIME, true);
         circuit.add(clock);
     }

File: src/main/java/de/neemann/digital/analyse/DetermineJKStateMachine.java
Patch:
@@ -61,8 +61,10 @@ public DetermineJKStateMachine(String name, Expression e) throws ExpressionExcep
                 throw new ExpressionException(Lang.get("err_containsVarAndNotVar"));
             } else {
                 if (belongsToJ) {
+                    if (term == null) term = Constant.ONE;
                     j = or(term, j);
                 } else if (belongsToK) {
+                    if (term == null) term = Constant.ONE;
                     nk = or(term, nk);
                 } else {
                     j = or(term, j);

File: src/main/java/de/neemann/digital/core/Model.java
Patch:
@@ -172,7 +172,7 @@ public void init(boolean noise) throws NodeException {
      * A STOPPED event is fired.
      */
     public void close() {
-        if (state != State.RUNNING) {
+        if (state == State.RUNNING) {
             state = State.CLOSED;
             int obs = observers.size();
             if (observersStep != null) obs += observersStep.size();

File: src/main/java/de/neemann/digital/gui/Main.java
Patch:
@@ -1093,6 +1093,7 @@ private boolean createAndStartModel(boolean globalRunClock, ModelEvent updateEve
             if (model != null) {
                 modelSync.access(() -> model.close());
                 circuitComponent.getCircuit().clearState();
+                model = null;
             }
 
             model = modelCreator.createModel(true);

File: src/main/java/de/neemann/digital/builder/ATF1502/CreateCHN.java
Patch:
@@ -27,7 +27,7 @@ public CreateCHN(String device) {
     public File execute(File file) throws IOException {
         File chnFile = SaveAsHelper.checkSuffix(file, "chn");
 
-        try (Writer chn = new OutputStreamWriter(new FileOutputStream(chnFile), "UTF-8")) {
+        try (Writer chn = new OutputStreamWriter(new FileOutputStream(chnFile), "ISO-8859-1")) {
             chn.write("1 4 1 0 \r\n"
                     + "\r\n"
                     + device + "\r\n"

File: src/main/java/de/neemann/digital/core/wiring/bus/DataBus.java
Patch:
@@ -83,7 +83,7 @@ public DataBus(Net net, Model model, ObservableValue... outputs) throws PinExcep
             model.addObserver(obs);
         }
 
-        commonBusValue = new CommonBusValue(bits, obs, resistor, outputs);
+        commonBusValue = new CommonBusValue(bits, obs, resistor, outputs, net == null ? null : net.getOrigin());
         for (ObservableValue p : outputs)
             p.addObserverToValue(commonBusValue);
         commonBusValue.hasChanged();

File: src/main/java/de/neemann/digital/gui/Main.java
Patch:
@@ -1531,7 +1531,7 @@ public static void main(String[] args) {
         MainBuilder builder = new MainBuilder();
         for (String s : args) {
             if (s.equals("experimental")) experimental = true;
-            if (s.toLowerCase().endsWith(".dig")) builder.setFileToOpen(new File(s));
+            else builder.setFileToOpen(new File(s));
         }
         SwingUtilities.invokeLater(() -> {
             Main main = builder.build();

File: src/main/java/de/neemann/digital/gui/components/table/TableDialog.java
Patch:
@@ -523,7 +523,7 @@ private boolean createHardware(ExpressionToFileExporter expressionExporter, File
                 expressionExporter.export(SaveAsHelper.checkSuffix(fileChooser.getSelectedFile(), suffix));
                 result = true;
             } catch (ExpressionException | FormatterException | IOException | FuseMapFillerException | PinMapException e) {
-                new ErrorMessage(Lang.get("msg_errorDuringCalculation")).addCause(e).show(this);
+                new ErrorMessage(Lang.get("msg_errorDuringHardwareExport")).addCause(e).show(this);
             }
         }
 

File: src/main/java/de/neemann/digital/hdl/model/Port.java
Patch:
@@ -83,6 +83,9 @@ public static String getHDLName(String name) throws HDLException {
                 .replace("<", "le")
                 .replace(">", "gr");
 
+        if (name.length() == 0)
+            throw new HDLException(Lang.get("err_vhdlANameIsMissing", name));
+
         if (!isNameValid(name))
             throw new HDLException(Lang.get("err_vhdlNotAValidName", name));
 

File: src/main/java/de/neemann/digital/draw/shapes/InputShape.java
Patch:
@@ -1,5 +1,6 @@
 package de.neemann.digital.draw.shapes;
 
+import de.neemann.digital.core.Model;
 import de.neemann.digital.core.ObservableValue;
 import de.neemann.digital.core.Observer;
 import de.neemann.digital.core.element.Element;
@@ -74,8 +75,8 @@ public boolean clicked(CircuitComponent cc, Point pos, IOState ioState, Element
                     return true;
                 } else {
                     if (dialog == null) {
-                        dialog = new SingleValueDialog(pos, label, value, cc, modelSync);
-                        ((In) element).getModel().addObserver(dialog);
+                        Model model = ((In) element).getModel();
+                        dialog = new SingleValueDialog(pos, label, value, cc, model, modelSync);
                     }
                     dialog.setVisible(true);
                     return false;

File: src/test/java/de/neemann/digital/hdl/vhdl/TestInSimulator.java
Patch:
@@ -77,7 +77,7 @@ public void testProcessorInSimulator() throws Exception {
         }
     }
 
-    //*
+    /*
     public void testInSimulatorDebug() throws Exception {
         File file = new File(Resources.getRoot(),"dig/hdl/readOutput.dig");
 

File: src/test/java/de/neemann/digital/hdl/vhdl/TestInSimulator.java
Patch:
@@ -37,7 +37,7 @@ public void testInSimulator() throws Exception {
         File examples = new File(Resources.getRoot(), "/dig/test/vhdl");
         try {
             int tested = new FileScanner(this::check).scan(examples);
-            assertEquals(21, tested);
+            assertEquals(22, tested);
             assertEquals(tested, testBenches);
         } catch (FileScanner.SkipAllException e) {
             // if ghdl is not installed its also ok
@@ -77,9 +77,9 @@ public void testProcessorInSimulator() throws Exception {
         }
     }
 
-    /*
+    //*
     public void testInSimulatorDebug() throws Exception {
-        File file = new File(Resources.getRoot(), "dig/test/vhdl/counter.dig");
+        File file = new File(Resources.getRoot(),"dig/hdl/readOutput.dig");
 
         ToBreakRunner br = new ToBreakRunner(file);
         System.out.println(new VHDLGenerator(br.getLibrary(), new CodePrinterStr(true)).export(br.getCircuit()));

File: src/test/java/de/neemann/digital/integration/TestExamples.java
Patch:
@@ -40,8 +40,8 @@ public void testDistExamples() throws Exception {
      */
     public void testTestExamples() throws Exception {
         File examples = new File(Resources.getRoot(), "/dig/test");
-        assertEquals(110, new FileScanner(this::check).scan(examples));
-        assertEquals(100, testCasesInFiles);
+        assertEquals(111, new FileScanner(this::check).scan(examples));
+        assertEquals(101, testCasesInFiles);
     }
 
 

File: src/main/java/de/neemann/digital/gui/components/ProbeDialog.java
Patch:
@@ -170,7 +170,7 @@ public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
                 Signal.Setter s = signals.get(rowIndex).getSetter();
                 if (s != null)
                     try {
-                        int value = Integer.decode(aValue.toString());
+                        long value = Long.decode(aValue.toString());
                         modelSync.access(() -> s.set(value));
                         circuitComponent.modelHasChanged();
                     } catch (NumberFormatException e) {

File: src/main/java/de/neemann/digital/gui/components/SingleValueDialog.java
Patch:
@@ -82,7 +82,7 @@ public SingleValueDialog(Point pos, String label, ObservableValue value, Circuit
 
         editValue = value.getValue();
         supportsHighZ = value.supportsHighZ();
-        mask = (1 << value.getBits()) - 1;
+        mask = (1L << value.getBits()) - 1;
 
         textField = new JTextField(10);
         textField.setHorizontalAlignment(JTextField.RIGHT);

File: src/main/java/de/neemann/digital/builder/circuit/CircuitBuilder.java
Patch:
@@ -195,7 +195,7 @@ else if (op instanceof Operation.XOr)
             fragmentVariables.add(fragmentVariable);
             return fragmentVariable;
         } else if (expression instanceof Constant) {
-            int val = 0;
+            long val = 0;
             if (((Constant) expression).getValue())
                 val = 1;
             return new FragmentVisualElement(Const.DESCRIPTION, shapeFactory).setAttr(Keys.VALUE, val);

File: src/main/java/de/neemann/digital/core/element/Keys.java
Patch:
@@ -63,8 +63,8 @@ private Keys() {
     /**
      * The value of constants
      */
-    public static final Key<Integer> VALUE
-            = new Key<>("Value", 1).allowGroupEdit();
+    public static final Key<Long> VALUE
+            = new Key<>("Value", 1L).allowGroupEdit();
 
     /**
      * The default value of elements

File: src/main/java/de/neemann/digital/core/flipflops/FlipflopBit.java
Patch:
@@ -32,7 +32,7 @@ abstract class FlipflopBit extends Node implements Element {
         isProbe = attributes.get(Keys.VALUE_IS_PROBE);
         label = attributes.getCleanLabel();
 
-        int def = attributes.get(Keys.DEFAULT);
+        long def = attributes.get(Keys.DEFAULT);
         out = def > 0;
         q.setBool(out);
         qn.setBool(!out);

File: src/main/java/de/neemann/digital/core/ObservableValue.java
Patch:
@@ -46,7 +46,7 @@ public ObservableValue(String name, int bits, boolean highZ) {
             mask = -1;
         else
             mask = (1L << bits) - 1;
-        signedFlag = 1 << (bits - 1);
+        signedFlag = 1L << (bits - 1);
         this.name = name;
         supportsHighZ = highZ;
     }

File: src/main/java/de/neemann/digital/core/arithmetic/Add.java
Patch:
@@ -42,7 +42,7 @@ public class Add extends Node implements Element {
      */
     public Add(ElementAttributes attributes) {
         bits = attributes.get(Keys.BITS);
-        this.mask = 1 << bits;
+        this.mask = 1L << bits;
 
         this.sum = new ObservableValue("s", bits).setPinDescription(DESCRIPTION);
         this.cOut = new ObservableValue("c_o", 1).setPinDescription(DESCRIPTION);

File: src/main/java/de/neemann/digital/core/arithmetic/BarrelShifter.java
Patch:
@@ -86,8 +86,8 @@ public void readInputs() throws NodeException {
                 value |= inVal << (bits - shiftVal);
             }
             value |= inVal >> shiftVal;
-            if ((mode == BarrelShifterMode.arithmetic) && ((inVal & (1 << (bits - 1))) != 0)) {
-                int mask = (1 << (bits)) - 1;
+            if ((mode == BarrelShifterMode.arithmetic) && ((inVal & (1L << (bits - 1))) != 0)) {
+                long mask = (1L << (bits)) - 1;
                 mask = mask >> shiftVal;
                 value |= ~mask;
             }

File: src/main/java/de/neemann/digital/core/arithmetic/BitExtender.java
Patch:
@@ -44,8 +44,8 @@ public void setInputs(ObservableValues inputs) throws NodeException {
         if (inBits >= outBits)
             throw new NodeException(Lang.get("err_notMoreOutBitsThanInBits"));
 
-        final int signMask = 1 << (inBits - 1);
-        final int extendMask = ~((1 << inBits) - 1);
+        final long signMask = 1L << (inBits - 1);
+        final long extendMask = ~((1L << inBits) - 1);
 
         in.addObserver(() -> {
             long inValue = in.getValue();

File: src/main/java/de/neemann/digital/core/memory/Counter.java
Patch:
@@ -28,12 +28,12 @@ public class Counter extends Node implements Element {
 
     private final ObservableValue out;
     private final ObservableValue ovf;
-    private final int maxValue;
+    private final long maxValue;
     private ObservableValue clockIn;
     private ObservableValue clrIn;
     private ObservableValue enable;
     private boolean lastClock;
-    private int counter;
+    private long counter;
     private boolean ovfOut = false;
 
     /**
@@ -46,7 +46,7 @@ public Counter(ElementAttributes attributes) {
         int bits = attributes.getBits();
         this.out = new ObservableValue("out", bits).setPinDescription(DESCRIPTION);
         this.ovf = new ObservableValue("ovf", 1).setPinDescription(DESCRIPTION);
-        maxValue = (1 << bits) - 1;
+        maxValue = (1L << bits) - 1;
     }
 
     @Override

File: src/test/java/de/neemann/digital/integration/TestExamples.java
Patch:
@@ -40,8 +40,8 @@ public void testDistExamples() throws Exception {
      */
     public void testTestExamples() throws Exception {
         File examples = new File(Resources.getRoot(), "/dig/test");
-        assertEquals(104, new FileScanner(this::check).scan(examples));
-        assertEquals(96, testCasesInFiles);
+        assertEquals(108, new FileScanner(this::check).scan(examples));
+        assertEquals(98, testCasesInFiles);
     }
 
 

File: src/main/java/de/neemann/digital/core/element/Keys.java
Patch:
@@ -151,7 +151,7 @@ private Keys() {
      * the rotation of the elements
      */
     public static final Key<Rotation> ROTATE
-            = new Key<>("rotation", new Rotation(0));
+            = new Key<>("rotation", new Rotation(0)).allowGroupEdit();
 
     /**
      * the width of an element if it is included as nested element

File: src/main/java/de/neemann/digital/draw/shapes/RAMShape.java
Patch:
@@ -48,6 +48,7 @@ public RAMShape(ElementAttributes attr, ElementTypeDescription description) thro
         dataBits = attr.get(Keys.BITS);
         addrBits = attr.get(Keys.ADDR_BITS);
         size = 1 << addrBits;
+        setInverterConfig(attr.get(Keys.INVERTER_CONFIG));
     }
 
     @Override

File: src/main/java/de/neemann/digital/gui/Settings.java
Patch:
@@ -44,6 +44,7 @@ private Settings() {
         intList.add(Keys.SETTINGS_EXPRESSION_FORMAT);
         intList.add(Keys.SETTINGS_DEFAULT_TREESELECT);
         intList.add(Keys.SETTINGS_GRID);
+        intList.add(Keys.SETTINGS_SHOW_WIRE_BITS);
         intList.add(Keys.SETTINGS_JAR_PATH);
         intList.add(Keys.SETTINGS_ATF1502_FITTER);
         intList.add(Keys.SETTINGS_LIBRARY_PATH);

File: src/main/java/de/neemann/digital/gui/components/CircuitComponent.java
Patch:
@@ -262,6 +262,7 @@ public void actionPerformed(ActionEvent actionEvent) {
             public void actionPerformed(ActionEvent actionEvent) {
                 ArrayList<Movable> elements = getSelectedElements(shapeFactory);
                 if (elements != null) {
+                    elements= Circuit.createCopy(elements, shapeFactory);
                     Vector posVector = getPosVector(lastMousePos.x, lastMousePos.y);
                     removeHighLighted();
                     mouseInsertList.activate(elements, posVector);

File: src/main/java/de/neemann/digital/gui/components/CircuitComponent.java
Patch:
@@ -682,6 +682,7 @@ else if (point.y > getHeight() - MOUSE_BORDER_SMALL)
         }
         mouseInsertElement.updateMousePos(getPosVector(point.x, point.y));
         repaintNeeded();
+        requestFocus();
     }
 
     /**

File: src/main/java/de/neemann/digital/gui/Main.java
Patch:
@@ -1632,7 +1632,7 @@ private void checkKey(int keyCode, boolean pressed) {
                 Button b = model.getButtonToMap(keyCode);
                 if (b != null) {
                     modelSync.access(() -> b.setPressed(pressed));
-                    circuitComponent.repaintNeeded();
+                    circuitComponent.modelHasChanged();
                 }
             }
         }

File: src/main/java/de/neemann/digital/analyse/TruthTable.java
Patch:
@@ -158,9 +158,11 @@ public int getRows() {
      *
      * @param name   name of the result column
      * @param values the values
+     * @return this for call chaining
      */
-    public void addResult(String name, BoolTable values) {
+    public TruthTable addResult(String name, BoolTable values) {
         results.add(new Result(name, values));
+        return this;
     }
 
     /**

File: src/main/java/de/neemann/digital/gui/Main.java
Patch:
@@ -157,7 +157,7 @@ private Main(MainBuilder builder) {
 
         if (builder.library != null) library = builder.library;
         else {
-            library = new ElementLibrary();
+            library = new ElementLibrary(Settings.getInstance().get(Keys.SETTINGS_JAR_PATH));
             Exception e = library.checkForException();
             if (e != null)
                 SwingUtilities.invokeLater(new ErrorMessage(Lang.get("err_loadingLibrary")).addCause(e).setComponent(this));

File: src/main/java/de/neemann/digital/hdl/vhdl/VHDLLibrary.java
Patch:
@@ -1,5 +1,6 @@
 package de.neemann.digital.hdl.vhdl;
 
+import de.neemann.digital.core.arithmetic.Comparator;
 import de.neemann.digital.core.basic.*;
 import de.neemann.digital.core.element.ElementTypeDescription;
 import de.neemann.digital.core.memory.ROM;
@@ -52,6 +53,8 @@ public VHDLLibrary(ElementLibrary elementLibrary) throws IOException {
         put(Driver.DESCRIPTION, new DriverVHDL(false));
         put(DriverInvSel.DESCRIPTION, new DriverVHDL(true));
 
+        put(Comparator.DESCRIPTION, new ComparatorVHDL());
+
         put(ROM.DESCRIPTION, new ROMVHDL());
     }
 

File: src/test/java/de/neemann/digital/hdl/vhdl/TestInSimulator.java
Patch:
@@ -36,7 +36,7 @@ public void testInSimulator() throws Exception {
         File examples = new File(Resources.getRoot(), "/dig/test/vhdl");
         try {
             int tested = new FileScanner(this::check).scan(examples);
-            assertEquals(17, tested);
+            assertEquals(19, tested);
             assertEquals(tested, testBenches);
         } catch (FileScanner.SkipAllException e) {
             // if ghdl is not installed its also ok

File: src/test/java/de/neemann/digital/integration/TestExamples.java
Patch:
@@ -40,8 +40,8 @@ public void testDistExamples() throws Exception {
      */
     public void testTestExamples() throws Exception {
         File examples = new File(Resources.getRoot(), "/dig/test");
-        assertEquals(102, new FileScanner(this::check).scan(examples));
-        assertEquals(94, testCasesInFiles);
+        assertEquals(104, new FileScanner(this::check).scan(examples));
+        assertEquals(96, testCasesInFiles);
     }
 
 

File: src/main/java/de/neemann/digital/gui/Main.java
Patch:
@@ -1454,9 +1454,10 @@ public String runToBreak() throws RemoteException {
         try {
             AddressPicker addressPicker = new AddressPicker();
             SwingUtilities.invokeAndWait(() -> {
-                if (model != null && model.isFastRunModel() && !realTimeClockRunning)
+                if (model != null && model.isFastRunModel() && !realTimeClockRunning) {
                     runToBreakAction.actionPerformed(null);
-                addressPicker.getProgramROMAddress(model);
+                    addressPicker.getProgramROMAddress(model);
+                }
             });
             return addressPicker.getAddressString();
         } catch (InterruptedException | InvocationTargetException e) {

File: src/test/java/de/neemann/digital/integration/TestExamples.java
Patch:
@@ -40,8 +40,8 @@ public void testDistExamples() throws Exception {
      */
     public void testTestExamples() throws Exception {
         File examples = new File(Resources.getRoot(), "/dig/test");
-        assertEquals(101, new FileScanner(this::check).scan(examples));
-        assertEquals(93, testCasesInFiles);
+        assertEquals(102, new FileScanner(this::check).scan(examples));
+        assertEquals(94, testCasesInFiles);
     }
 
 

File: src/main/java/de/neemann/digital/gui/Main.java
Patch:
@@ -1042,6 +1042,7 @@ public void enter() {
                     circuitComponent.setManualChangeObserver(new MicroStepObserver(model));
             }
         });
+        stateManager.setActualState(stoppedState);
     }
 
     private void clearModelDescription() {

File: src/main/java/de/neemann/digital/gui/components/table/TableDialog.java
Patch:
@@ -66,7 +66,7 @@ public class TableDialog extends JDialog {
 
     static {
         LIST.add(Keys.LABEL);
-        LIST.add(Keys.PIN);
+        LIST.add(Keys.PINNUMBER);
     }
 
     private final JTextPane statusBar;
@@ -242,12 +242,12 @@ private void editColumnName(int columnIndex, Point pos) {
         attr.set(Keys.LABEL, name);
         final TreeMap<String, String> pins = model.getTable().getPins();
         if (pins.containsKey(name))
-            attr.set(Keys.PIN, pins.get(name));
+            attr.set(Keys.PINNUMBER, pins.get(name));
         ElementAttributes modified = new AttributeDialog(this, pos, LIST, attr).showDialog();
         if (modified != null) {
             pins.remove(name);
             final String newName = modified.get(Keys.LABEL).trim().replace(' ', '_');
-            final String pinStr = modified.get(Keys.PIN).trim();
+            final String pinStr = modified.get(Keys.PINNUMBER).trim();
             if (pinStr.length() > 0)
                 pins.put(newName, pinStr);
 

File: src/main/java/de/neemann/digital/core/memory/Counter.java
Patch:
@@ -59,11 +59,12 @@ public void readInputs() throws NodeException {
             else
                 counter++;
         }
-        ovfOut = (counter == maxValue) && enable;
 
         lastClock = clock;
         if (clrIn.getBool())
             counter = 0;
+
+        ovfOut = (counter == maxValue) && enable;
     }
 
     @Override

File: src/test/java/de/neemann/digital/integration/TestExamples.java
Patch:
@@ -30,7 +30,7 @@ public class TestExamples extends TestCase {
     public void testDistExamples() throws Exception {
         File examples = new File(Resources.getRoot().getParentFile().getParentFile(), "/main/dig");
         assertEquals(201, new FileScanner(this::check).scan(examples));
-        assertEquals(105, testCasesInFiles);
+        assertEquals(107, testCasesInFiles);
     }
 
     /**

File: src/main/java/de/neemann/digital/draw/model/ModelCreator.java
Patch:
@@ -94,7 +94,9 @@ public ModelCreator(Circuit circuit, ElementLibrary library, boolean isNestedCir
                 Pins pins = ve.getPins();
                 ElementTypeDescription elementType = library.getElementType(ve.getElementName());
                 ElementAttributes attr = ve.getElementAttributes();
-                if (attr.getCleanLabel().contains("*")) {
+                if (attr.getCleanLabel().contains("*")
+                        && !ve.equalsDescription(In.DESCRIPTION)
+                        && !ve.equalsDescription(Out.DESCRIPTION)) {
                     attr = new ElementAttributes(attr);
                     attr.set(Keys.LABEL, attr.getCleanLabel().replace("*", subName));
                 }

File: src/test/java/de/neemann/digital/integration/TestExamples.java
Patch:
@@ -29,8 +29,8 @@ public class TestExamples extends TestCase {
      */
     public void testDistExamples() throws Exception {
         File examples = new File(Resources.getRoot().getParentFile().getParentFile(), "/main/dig");
-        assertEquals(200, new FileScanner(this::check).scan(examples));
-        assertEquals(102, testCasesInFiles);
+        assertEquals(201, new FileScanner(this::check).scan(examples));
+        assertEquals(105, testCasesInFiles);
     }
 
     /**

File: src/main/java/de/neemann/digital/gui/Main.java
Patch:
@@ -1214,7 +1214,7 @@ private void saveFile(File filename, boolean toPrefs) {
 
     private void setFilename(File filename, boolean toPrefs) {
         modifiedPrefixVisible = circuitComponent.getCircuit().isModified();
-        if (experimental && save != null)
+        if (save != null)
             save.setActive(modifiedPrefixVisible);
         String prefix = "";
         if (modifiedPrefixVisible)

File: src/test/java/de/neemann/digital/hdl/vhdl/boards/ClockIntegratorARTIX7Test.java
Patch:
@@ -9,8 +9,6 @@
 
 import java.io.IOException;
 
-import static org.junit.Assert.*;
-
 public class ClockIntegratorARTIX7Test extends TestCase {
 
     public void testArtix7() throws PinException, NodeException, ElementNotFoundException, IOException {
@@ -111,6 +109,8 @@ public void testArtix7() throws PinException, NodeException, ElementNotFoundExce
                 "\n" +
                 "DEV_NULL <= '0';\n" +
                 "\n" +
+                "-- code taken from the \"Vivado Design Suite 7 Series FPGA Libraries Guide\" (UG953)\n" +
+                "\n" +
                 "MMCME2_BASE_inst : MMCME2_BASE\n" +
                 "generic map (\n" +
                 "BANDWIDTH => \"OPTIMIZED\", -- Jitter programming (OPTIMIZED, HIGH, LOW)\n" +

File: src/main/java/de/neemann/digital/testing/parser/Tokenizer.java
Patch:
@@ -210,7 +210,7 @@ private int readChar() throws IOException {
         if (c == '#') {
             do {
                 c = readIntChar();
-            } while (c != '\n');
+            } while (!((c == '\n') || (c == -1)));
         }
         return c;
     }

File: src/main/java/de/neemann/digital/gui/components/karnaugh/KarnaughMapComponent.java
Patch:
@@ -150,7 +150,7 @@ protected void paintComponent(Graphics graphics) {
                 gr.setColor(COVER_COLORS[color++]);
                 KarnaughMap.Pos p = c.getPos();
                 int frame = (c.getInset() + 1) * STROKE_WIDTH;
-                int edgesRadius=cellSize-frame*2;
+                int edgesRadius = cellSize - frame * 2;
                 if (c.isDisconnected()) {
                     Rectangle clip = gr.getClipBounds();
                     gr.setClip(cellSize, cellSize, kvWidth * cellSize, kvHeight * cellSize);
@@ -162,7 +162,7 @@ protected void paintComponent(Graphics graphics) {
                     } else { // draw the two parts of the cover
                         int xofs = 0;
                         int yOfs = 0;
-                        if (p.getWidth() > p.getHeight())
+                        if (c.isVerticalDivided())
                             xofs = cellSize * 3;
                         else
                             yOfs = cellSize * 3;

File: src/main/java/de/neemann/digital/gui/components/DataEditor.java
Patch:
@@ -54,14 +54,14 @@ public DataEditor(Component parent, DataField dataField, int size, int dataBits,
 
         if (dataBits > 20 && cols == 16) cols = 8;
 
-        int tableWidth=0;
+        int tableWidth = 0;
         MyTableModel dm = new MyTableModel(this.localDataField, cols, modelSync);
         JTable table = new JTable(dm);
         int widthOfZero = table.getFontMetrics(table.getFont()).stringWidth("00000000") / 8;
         table.setDefaultRenderer(MyLong.class, new MyLongRenderer(dataBits));
         for (int c = 1; c < table.getColumnModel().getColumnCount(); c++) {
             int width = widthOfZero * ((dataBits - 1) / 4 + 2);
-            tableWidth+=width;
+            tableWidth += width;
             TableColumn col = table.getColumnModel().getColumn(c);
             col.setPreferredWidth(width);
         }
@@ -72,7 +72,7 @@ public DataEditor(Component parent, DataField dataField, int size, int dataBits,
         addrColumn.setCellRenderer(addrRenderer);
         int width = widthOfZero * ((addrBits - 1) / 4 + 2);
         addrColumn.setPreferredWidth(width);
-        tableWidth+=width;
+        tableWidth += width;
 
 
         JScrollPane scrollPane = new JScrollPane(table);

File: src/main/java/de/neemann/digital/hdl/vhdl/VHDLExporter.java
Patch:
@@ -185,12 +185,12 @@ else if (!isConstant(node)) {
                     for (Port p : ports) {
                         if (p.getDirection() == Port.Direction.in) {
                             if (inPort != null)
-                                throw new HDLException("wrong interconnect");
+                                throw new HDLException(Lang.get("err_vhdlMultipleInputsConnectedToAnOutput"));
                             inPort = p;
                         }
                     }
                     if (inPort == null)
-                        throw new HDLException("wrong interconnect");
+                        throw new HDLException("no input found for not written output!");
 
                     out.print(o.getName()).print(" <= ").print(inPort.getName()).println(";");
                 }

File: src/main/java/de/neemann/digital/hdl/model/HDLConstant.java
Patch:
@@ -1,5 +1,7 @@
 package de.neemann.digital.hdl.model;
 
+import de.neemann.digital.lang.Lang;
+
 /**
  * Represets a hdl constant value
  */
@@ -102,7 +104,7 @@ private char getVHDLChar() throws HDLException {
             case highz:
                 return 'Z';
             default:
-                throw new HDLException("unknown constant type " + type);
+                throw new HDLException(Lang.get("err_vhdlUnknownConstantType_N", type));
         }
     }
 }

File: src/main/java/de/neemann/digital/hdl/model/HDLNode.java
Patch:
@@ -218,7 +218,7 @@ public HDLConstant getConstant() throws HDLException {
                     case pullDown:
                         return new HDLConstant(HDLConstant.Type.weakLow, bits);
                     default:
-                        throw new HDLException("undefined pull resistor");
+                        throw new HDLException("undefined pull resistor type");
                 }
             } else
                 return new HDLConstant(observableValues.get(i).getValue(), bits);

File: src/main/java/de/neemann/digital/hdl/model/Port.java
Patch:
@@ -70,7 +70,7 @@ public static String getHDLName(String name) throws HDLException {
                 .replace(">", "gr");
 
         if (!isNameValid(name))
-            throw new HDLException(Lang.get("err_notAValidName", name));
+            throw new HDLException(Lang.get("err_vhdlNotAValidName", name));
 
         return name;
     }

File: src/main/java/de/neemann/digital/hdl/vhdl/VHDLExporter.java
Patch:
@@ -89,7 +89,7 @@ public VHDLExporter export(Circuit circuit) throws IOException {
                 out.println("-- " + m.getName());
                 out.println();
                 if (m.getClocks() != null)
-                    throw new HDLException(Lang.get("err_clockOnlyAllowedInRoot"));
+                    throw new HDLException(Lang.get("err_vhdlClockOnlyAllowedInRoot"));
 
                 export(m);
                 nodesWritten++;
@@ -108,9 +108,9 @@ public VHDLExporter export(Circuit circuit) throws IOException {
                 LOGGER.info("exported " + f + " (" + nodesWritten + " nodes)");
         } catch (HDLException | PinException | NodeException e) {
             e.setOrigin(circuit.getOrigin());
-            throw new IOException(Lang.get("err_exporting_vhdl"), e);
+            throw new IOException(Lang.get("err_vhdlExporting"), e);
         } catch (ElementNotFoundException e) {
-            throw new IOException(Lang.get("err_exporting_vhdl"), e);
+            throw new IOException(Lang.get("err_vhdlExporting"), e);
         }
         return this;
     }

File: src/main/java/de/neemann/digital/hdl/vhdl/VHDLLibrary.java
Patch:
@@ -67,7 +67,7 @@ private VHDLEntity getEntity(HDLNode node) throws HDLException {
         }
 
         if (e == null)
-            throw new HDLException(Lang.get("err_noVhdlEntity_N", elementName));
+            throw new HDLException(Lang.get("err_vhdlNoEntity_N", elementName));
         return e;
     }
 

File: src/main/java/de/neemann/digital/hdl/vhdl/VHDLTestBenchCreator.java
Patch:
@@ -76,7 +76,7 @@ public void write(File file) throws IOException, HDLException {
                 try {
                     writeTestBench(out, testName, tc);
                 } catch (TestingDataException | ParserException | RuntimeException e) {
-                    throw new HDLException("error in testdata", e);
+                    throw new HDLException(Lang.get("err_vhdlErrorWritingTestBench"), e);
                 }
             }
         }
@@ -239,7 +239,7 @@ private void writeValues(Value[] values, boolean isClock, int clock) throws IOEx
                         out.print("'").print(clock).print("'");
                         break;
                     default:
-                        throw new RuntimeException("values of type " + val.getType() + " are not allowed");
+                        throw new RuntimeException(Lang.get("err_vhdlValuesOfType_N_notAllowed", val.getType()));
                 }
             }
             out.print(")");

File: src/main/java/de/neemann/digital/hdl/vhdl/boards/Vivado.java
Patch:
@@ -3,6 +3,7 @@
 import de.neemann.digital.hdl.model.HDLModel;
 import de.neemann.digital.hdl.model.Port;
 import de.neemann.digital.hdl.printer.CodePrinter;
+import de.neemann.digital.lang.Lang;
 
 import java.io.File;
 import java.io.FileOutputStream;
@@ -38,7 +39,7 @@ public void writeFiles(File path, HDLModel model) throws IOException {
             for (Port p : model.getPorts()) {
                 String pinNumber = p.getPinNumber();
                 if (pinNumber == null || pinNumber.length() == 0)
-                    throw new IOException("pin without a number: " + p.getName());
+                    throw new IOException(Lang.get("err_vhdlPin_N_hasNoNumber", p.getName()));
                 out.print("set_property PACKAGE_PIN ").print(pinNumber).print(" [get_ports ").print(p.getName()).println("]");
                 out.print("set_property IOSTANDARD ").print(pinIoType).print(" [get_ports ").print(p.getName()).println("]");
 

File: src/main/java/de/neemann/digital/hdl/vhdl/lib/ROMVHDL.java
Patch:
@@ -7,6 +7,7 @@
 import de.neemann.digital.hdl.model.Port;
 import de.neemann.digital.hdl.printer.CodePrinter;
 import de.neemann.digital.hdl.vhdl.Separator;
+import de.neemann.digital.lang.Lang;
 
 import java.io.IOException;
 import java.util.HashSet;
@@ -23,10 +24,10 @@ public String getName(HDLNode node) throws HDLException {
         try {
             name = "DIG_ROM_" + Port.getHDLName(node.get(Keys.LABEL));
         } catch (HDLException e) {
-            throw new HDLException("Rom has no valid label");
+            throw new HDLException(Lang.get("err_vhdlRomHasNoValidLabel"));
         }
         if (nameSet.contains(name))
-            throw new HDLException("Rom name " + node.get(Keys.LABEL) + " is used twice!");
+            throw new HDLException(Lang.get("err_vhdlRomLabel_N_notUnique", node.get(Keys.LABEL)));
         nameSet.add(name);
         return name;
     }

File: src/main/java/de/neemann/digital/hdl/vhdl/lib/VHDLEntitySimple.java
Patch:
@@ -116,7 +116,7 @@ public static String getDirection(Port p) throws HDLException {
      */
     public static String getType(int bits) throws HDLException {
         if (bits == 0)
-            throw new HDLException("bit number not available");
+            throw new HDLException(Lang.get("err_vhdlBitNumberNotAvailable"));
         if (bits == 1)
             return "std_logic";
         else

File: src/test/java/de/neemann/digital/hdl/vhdl/TestInSimulator.java
Patch:
@@ -70,6 +70,8 @@ public void testInSimulatorProcessor() throws Exception {
 //            System.out.println(new VHDLExporter(br.getLibrary(), out).export(br.getCircuit()));
 
             check(file);
+        } catch (FileScanner.SkipAllException e) {
+            // ok if ghdl is not installed!
         } catch (Exception e) {
             System.out.println(ExceptionWithOrigin.getOriginOf(e));
             throw e;

File: src/main/java/de/neemann/digital/hdl/model/Signal.java
Patch:
@@ -167,6 +167,8 @@ public Signal setBits(int bits) {
      * @throws HDLException HDLException
      */
     public void setIsWritten() throws HDLException {
+        if (written)
+            throw new HDLException(name + " is written twice! Tristate outputs not available inside an fpga!");
         written = true;
     }
 

File: src/test/java/de/neemann/digital/integration/TestExamples.java
Patch:
@@ -40,8 +40,8 @@ public void testDistExamples() throws Exception {
      */
     public void testTestExamples() throws Exception {
         File examples = new File(Resources.getRoot(), "/dig/test");
-        assertEquals(95, new FileScanner(this::check).scan(examples));
-        assertEquals(86, testCasesInFiles);
+        assertEquals(96, new FileScanner(this::check).scan(examples));
+        assertEquals(87, testCasesInFiles);
     }
 
 

File: src/main/java/de/neemann/digital/draw/graphics/GraphicSVG.java
Patch:
@@ -12,7 +12,7 @@
  *
  * @author hneemann
  */
-public class GraphicSVG implements Graphic, Closeable {
+public class GraphicSVG implements Graphic {
     private static final int DEF_SCALE = 15;
     private final OutputStream out;
     private final File source;

File: src/main/java/de/neemann/digital/builder/tt2/OSExecute.java
Patch:
@@ -50,7 +50,7 @@ public void setWorkingDir(File workingDir) {
     /**
      * Starts the execution and waits for its completion.
      *
-     * @return the console output of the of the started process
+     * @return the console output of the started process
      * @throws IOException IOException
      */
     public String start() throws IOException {

File: src/main/java/de/neemann/digital/hdl/model/Port.java
Patch:
@@ -81,7 +81,6 @@ public static String getHDLName(String name) throws HDLException {
      * @return the cleand up name
      */
     public static boolean isNameValid(String name) {
-        StringBuilder sb = new StringBuilder();
         for (int i = 0; i < name.length(); i++) {
             char c = name.charAt(i);
             if (!((c >= '0' && c <= '9')

File: src/main/java/de/neemann/digital/hdl/vhdl/lib/VHDLFile.java
Patch:
@@ -83,7 +83,7 @@ private ArrayList<String> readFile(String name) throws IOException {
         InputStream inputStream = getClass().getClassLoader().getResourceAsStream(createFileName(name));
         if (inputStream == null)
             throw new IOException("file not present: " + createFileName(name));
-        try (BufferedReader in = new BufferedReader(new InputStreamReader(inputStream))) {
+        try (BufferedReader in = new BufferedReader(new InputStreamReader(inputStream, "utf-8"))) {
             String line;
             while ((line = in.readLine()) != null)
                 vhdl.add(line);
@@ -147,10 +147,10 @@ private String transform(String s, HDLNode node) throws HDLException {
         String zero;
         if (hasData && node.get(Keys.BITS) > 1) {
             type = "std_logic_vector((bitCount-1) downto 0)";
-            zero="(others => '0')";
+            zero = "(others => '0')";
         } else {
             type = "std_logic";
-            zero="'0'";
+            zero = "'0'";
         }
         return s.replace("{{data}}", type)
                 .replace("{{zero}}", zero);

File: src/main/java/de/neemann/digital/hdl/model/HDLClockNode.java
Patch:
@@ -16,8 +16,9 @@ public class HDLClockNode extends HDLNode {
      *
      * @param maxCounter the max counter value
      * @param ports      the ports of the node
+     * @throws HDLException if name is not valid
      */
-    public HDLClockNode(int maxCounter, Ports ports) {
+    public HDLClockNode(int maxCounter, Ports ports) throws HDLException {
         super(ports, "simpleClockDivider",
                 new ElementAttributes()
                         .set(COUNTER_KEY, maxCounter));

File: src/main/java/de/neemann/digital/hdl/model/HDLModel.java
Patch:
@@ -210,9 +210,10 @@ public int getOutputBits(int i) {
      *
      * @param name the name of the model
      * @return this for chained calls
+     * @throws HDLException if name is not valid
      */
-    public HDLModel setName(String name) {
-        this.name = name.replace('.', '_').replace('/', '_').replace('\\', '_');
+    public HDLModel setName(String name) throws HDLException {
+        this.name = Port.getHDLName(name.replace('.', '_').replace('/', '_').replace('\\', '_'));
         return this;
     }
 

File: src/main/java/de/neemann/digital/hdl/vhdl/VHDLExporter.java
Patch:
@@ -216,7 +216,7 @@ private void writePortMap(HDLNode node) throws HDLException, IOException {
 
     private String getVhdlEntityName(HDLNode node) throws HDLException {
         if (node.isCustom())
-            return node.getVisualElement().getElementName().replace('.', '_');
+            return node.getHDLName();
         else
             return vhdlLibrary.getName(node);
     }

File: src/main/java/de/neemann/digital/hdl/vhdl/VHDLLibrary.java
Patch:
@@ -47,7 +47,7 @@ public VHDLLibrary() throws IOException {
     }
 
     private VHDLEntity getEntity(HDLNode node) throws HDLException {
-        String elementName = node.getName();
+        String elementName = node.getOrigName();
         VHDLEntity e = map.get(elementName);
         if (e == null) {
             try {

File: src/main/java/de/neemann/digital/hdl/vhdl/VHDLTestBenchCreator.java
Patch:
@@ -67,6 +67,8 @@ public void write(File file) throws IOException, HDLException {
             else
                 testName = filename + "_tb";
 
+            testName=Port.getHDLName(testName);
+
             File f = new File(file.getParentFile(), testName + ".vhdl");
             testFileWritten.add(f);
             try (CodePrinter out = new CodePrinter(f)) {

File: src/main/java/de/neemann/digital/hdl/vhdl/lib/VHDLFile.java
Patch:
@@ -222,7 +222,7 @@ public static String getVHDLTemplate(HDLNode node) throws IOException, HDLExcept
         CodePrinterStr out = new CodePrinterStr();
         d.writeHeader(out, node);
         out.println();
-        String name = ENTITY_PREFIX + node.getName();
+        String name = ENTITY_PREFIX + node.getHDLName();
         out.println("entity " + name + " is").inc();
         d.writeDeclaration(out, node);
         out.dec().println("end " + name + ";");

File: src/test/java/de/neemann/digital/hdl/vhdl/lib/VHDLFileTest.java
Patch:
@@ -92,7 +92,7 @@ public void testSimple() throws IOException, ElementNotFoundException, PinExcept
                 "      if rising_edge(PORT_C) then\n" +
                 "        state  <= PORT_D;\n" +
                 "      end if;\n" +
-                "   end process ff;\n" +
+                "   end process;\n" +
                 "end DIG_D_FF_arch;\n" +
                 "\n" +
                 "-- DIG_D_FF_BUS\n" +
@@ -121,7 +121,7 @@ public void testSimple() throws IOException, ElementNotFoundException, PinExcept
                 "      if rising_edge(PORT_C) then\n" +
                 "        state  <= PORT_D;\n" +
                 "      end if;\n" +
-                "   end process ff;\n" +
+                "   end process;\n" +
                 "end DIG_D_FF_BUS_arch;\n", vhdl);
     }
 }
\ No newline at end of file

File: src/main/java/de/neemann/digital/gui/components/CircuitComponent.java
Patch:
@@ -477,8 +477,9 @@ private String createPinToolTip(Pin p) {
         if (des != null && des.length() > 0) {
             text += ": " + des;
         }
-        if (p.getPinNumber().length() > 0)
-            text += " (" + Lang.get("msg_pin_N", p.getPinNumber()) + ")";
+        String pinNumber = p.getPinNumber();
+        if (pinNumber != null && pinNumber.length() > 0)
+            text += " (" + Lang.get("msg_pin_N", pinNumber) + ")";
         return checkToolTip(text);
     }
 

File: src/main/java/de/neemann/digital/hdl/vhdl/boards/BoardProvider.java
Patch:
@@ -47,7 +47,7 @@ public BoardInterface getBoard(Circuit circuit, HDLModel model) {
             return null;
 
         if (board.equals("basys3"))
-            return new Vivado(model, "stdttl");
+            return new Vivado(model, "LVCMOS33", "W5", 10);
 
         return null;
     }

File: src/main/java/de/neemann/digital/hdl/model/HDLModel.java
Patch:
@@ -50,7 +50,7 @@ public HDLModel(Circuit circuit, ElementLibrary library, ModelList modelList) th
             for (VisualElement v : circuit.getElements()) {
                 if (v.equalsDescription(Clock.DESCRIPTION))
                     addPort(v, nets, Port.Direction.in, 1, signalMap);
-                if (v.equalsDescription(In.DESCRIPTION))
+                else if (v.equalsDescription(In.DESCRIPTION))
                     addPort(v, nets, Port.Direction.in, v.getElementAttributes().getBits(), signalMap);
                 else if (v.equalsDescription(Out.DESCRIPTION))
                     addPort(v, nets, Port.Direction.out, v.getElementAttributes().getBits(), signalMap);

File: src/main/java/de/neemann/digital/core/element/Keys.java
Patch:
@@ -34,7 +34,7 @@ private Keys() {
     /**
      * number of inputs in simple gates like And and Or
      */
-    public static final Key.KeyInteger INPUT_COUNT  //  // needs to have the same default value as ADDR_BITS!!!  see de.neemann.digital.gui.components.EditorFactory#DataFieldEditor
+    public static final Key.KeyInteger INPUT_COUNT  // needs to have the same default value as ADDR_BITS!!!  see de.neemann.digital.gui.components.EditorFactory#DataFieldEditor
             = new Key.KeyInteger("Inputs", 2)
             .setComboBoxValues(new Integer[]{2, 3, 4, 5})
             .setMin(2);

File: src/main/java/de/neemann/digital/draw/model/ModelEntry.java
Patch:
@@ -100,6 +100,7 @@ public void applyInputs() throws PinException, NodeException {
             ioState = new IOState(values, element.getOutputs(), element);
         } catch (PinException | NodeException e) {
             e.setOrigin(origin);
+            e.setVisualElement(containingVisualElement);
             throw e;
         }
     }

File: src/main/java/de/neemann/digital/gui/Main.java
Patch:
@@ -1081,6 +1081,7 @@ public void showErrorAndStopModel(String message, Exception cause) {
             if (cause instanceof NodeException) {
                 NodeException e = (NodeException) cause;
                 circuitComponent.addHighLightedWires(e.getValues());
+                circuitComponent.addHighLighted(e.getVisualElement());
                 if (modelCreator != null)
                     modelCreator.addNodeElementsTo(e.getNodes(), circuitComponent.getHighLighted());
             } else if (cause instanceof PinException) {

File: src/main/java/de/neemann/digital/core/io/PowerSupply.java
Patch:
@@ -49,9 +49,9 @@ public ObservableValues getOutputs() throws PinException {
     @Override
     public void readInputs() throws NodeException {
         if (vcc.getValue() != 1 || vcc.isHighZ())
-            throw new NodeException(Lang.get("err_errorInPowerSupply", "VCC"), vcc);
+            throw new NodeException(Lang.get("err_errorInPowerSupply", "VCC"), this, 0, vcc.asList());
         if (gnd.getValue() != 0 || gnd.isHighZ())
-            throw new NodeException(Lang.get("err_errorInPowerSupply", "GND"), gnd);
+            throw new NodeException(Lang.get("err_errorInPowerSupply", "GND"), this, 1, gnd.asList());
     }
 
     @Override

File: src/test/java/de/neemann/digital/integration/TestExamples.java
Patch:
@@ -39,7 +39,7 @@ public void testDistExamples() throws Exception {
      */
     public void testTestExamples() throws Exception {
         File examples = new File(Resources.getRoot(), "/dig/test");
-        assertEquals(85, new FileScanner(this::check).scan(examples));
+        assertEquals(83, new FileScanner(this::check).scan(examples));
         assertEquals(74, testCasesInFiles);
     }
 

File: src/main/java/de/neemann/digital/gui/Main.java
Patch:
@@ -9,6 +9,7 @@
 import de.neemann.digital.core.element.Key;
 import de.neemann.digital.core.element.Keys;
 import de.neemann.digital.core.io.In;
+import de.neemann.digital.core.io.InValue;
 import de.neemann.digital.core.io.Out;
 import de.neemann.digital.core.io.PowerSupply;
 import de.neemann.digital.core.memory.ROM;
@@ -732,6 +733,7 @@ public void actionPerformed(ActionEvent actionEvent) {
                             .setShapeFactory(shapeFactory)
                             .setAttribute(Keys.LABEL, "VCC")
                             .setAttribute(Keys.PINNUMBER, maxNum)
+                            .setAttribute(Keys.INPUT_DEFAULT, new InValue(1))
                             .setPos(new Vector(0, 0)));
                     list.add(new VisualElement(In.DESCRIPTION.getName())
                             .setShapeFactory(shapeFactory)

File: src/test/java/de/neemann/digital/integration/TestExamples.java
Patch:
@@ -29,7 +29,7 @@ public class TestExamples extends TestCase {
     public void testDistExamples() throws Exception {
         File examples = new File(Resources.getRoot().getParentFile().getParentFile(), "/main/dig");
         assertEquals(192, new FileScanner(this::check).scan(examples));
-        assertEquals(94, testCasesInFiles);
+        assertEquals(96, testCasesInFiles);
     }
 
     /**

File: src/test/java/de/neemann/digital/integration/TestExamples.java
Patch:
@@ -29,7 +29,7 @@ public class TestExamples extends TestCase {
     public void testDistExamples() throws Exception {
         File examples = new File(Resources.getRoot().getParentFile().getParentFile(), "/main/dig");
         assertEquals(191, new FileScanner(this::check).scan(examples));
-        assertEquals(90, testCasesInFiles);
+        assertEquals(92, testCasesInFiles);
     }
 
     /**

File: src/main/java/de/neemann/gui/ErrorMessage.java
Patch:
@@ -98,6 +98,7 @@ public ErrorMessage show(Component parent) {
         JDialog dialog = optionPane.createDialog(parent, Lang.get("error"));
         dialog.setAlwaysOnTop(true);
         dialog.setVisible(true);
+        dialog.dispose();
         return this;
     }
 

File: src/main/java/de/neemann/digital/core/Model.java
Patch:
@@ -443,8 +443,7 @@ public void addOutput(Signal signal) {
         if (signal.isValid()) {
             signals.add(signal);
             outputs.add(signal);
-        } else
-            isInvalidSignal = true;
+        }
     }
 
     /**

File: src/main/java/de/neemann/digital/data/ValueTableModel.java
Patch:
@@ -32,7 +32,7 @@ public ValueTableModel(ValueTable values) {
 
     @Override
     public int getRowCount() {
-        return values.getRows();
+        return values.getTableRows();
     }
 
     @Override
@@ -66,7 +66,7 @@ public Object getValueAt(int rowIndex, int columnIndex) {
         if (columnIndex == 0)
             return rowIndex;
         else
-            return values.getValue(rowIndex, columnIndex - 1);
+            return values.getTableValue(rowIndex, columnIndex - 1);
     }
 
 

File: src/main/java/de/neemann/digital/gui/components/ElementOrderer.java
Patch:
@@ -38,6 +38,7 @@ public ElementOrderer(Frame owner, String title, OrderInterface<T> data) {
         super(owner, title, true);
         this.data = data;
         setDefaultCloseOperation(DISPOSE_ON_CLOSE);
+        setAlwaysOnTop(true);
 
         listModel = new MyListModel<T>(data);
         list = new JList<T>(listModel);

File: src/main/java/de/neemann/digital/analyse/ModelAnalyser.java
Patch:
@@ -158,11 +158,11 @@ private List<FlipflopD> replaceMultiBitFlipflops(List<FlipflopD> flipflops) thro
                     String label = ff.getLabel();
                     if (label.length() == 0)
                         label = createUniqueName(ff);
-                    for (int i = 0; i < ff.getBits(); i++) {
+                    for (int i = ff.getBits() - 1; i >= 0; i--) {
                         ObservableValue qn = new ObservableValue("", 1);
                         ObservableValue nqn = new ObservableValue("", 1);
                         FlipflopD newff = new FlipflopD(label + i, qn, nqn);
-                        spinput.add(qn);
+                        spinput.addAtTop(qn);
                         model.add(newff);
                         newff.setInputs(new ObservableValues(insp.getOutputs().get(i), getClock()));
                         out.add(newff);
@@ -182,6 +182,7 @@ public void hasChanged() {
                             nqout.setValue(~value);
                         }
                     });
+                    spq.fireHasChanged();
 
                 } catch (NodeException e) {
                     throw new AnalyseException(e);

File: src/main/java/de/neemann/digital/core/element/Keys.java
Patch:
@@ -316,7 +316,7 @@ private Keys() {
      * Fitter for the atf1502
      */
     public static final Key<File> SETTINGS_ATF1502_FITTER
-            = new Key<>("atf1502Fitter", new File("fit1502.exe"));
+            = new Key<>("atf1502Fitter", new File("c:/Wincupl/WinCupl/Fitters/fit1502.exe"));
 
     /**
      * A pin number, empty means no pin assigned

File: src/main/java/de/neemann/digital/core/ObservableValue.java
Patch:
@@ -261,7 +261,7 @@ public boolean supportsHighZ() {
      *
      * @return the actual value.
      */
-    public long getValueIgnoreBurn() {
+    public long getValueIgnoreHighZ() {
         return value;
     }
 

File: src/main/java/de/neemann/digital/draw/graphics/Style.java
Patch:
@@ -186,10 +186,10 @@ public float[] getDash() {
      */
     public static Style getWireStyle(ObservableValue value) {
         if (value == null) return WIRE;
-        if (value.getBits() > 1) return WIRE_BUS;
         if (value.isHighZ()) return WIRE_HIGHZ;
+        if (value.getBits() > 1) return WIRE_BUS;
 
-        if (value.getValueIgnoreBurn() == 1) return WIRE_HIGH;
+        if (value.getValueIgnoreHighZ() == 1) return WIRE_HIGH;
         else return WIRE_LOW;
     }
 

File: src/main/java/de/neemann/digital/draw/shapes/SevenSegHexShape.java
Patch:
@@ -43,7 +43,7 @@ protected boolean getStyle(int i) {
         if (i == 7) {
             return dp.getBool();
         } else {
-            int v = (int) input.getValueIgnoreBurn() & 0xf;
+            int v = (int) input.getValueIgnoreHighZ() & 0xf;
             v = TABLE[v];
             return (v & (1 << i)) != 0;
         }

File: src/main/java/de/neemann/digital/draw/shapes/SevenSegShape.java
Patch:
@@ -89,13 +89,13 @@ protected boolean getStyle(int i) {
 
         if (persistence && commonCatode) {
             if (!ccin.isHighZ() && !ccin.getBool())
-                data[i] = inputs.get(i).getValueIgnoreBurn() > 0;
+                data[i] = inputs.get(i).getValueIgnoreHighZ() > 0;
             return data[i];
         } else {
             if (commonCatode && (ccin.isHighZ() || ccin.getBool()))
                 return false;
 
-            return inputs.get(i).getValueIgnoreBurn() > 0;
+            return inputs.get(i).getValueIgnoreHighZ() > 0;
         }
     }
 

File: src/main/java/de/neemann/digital/gui/components/data/DataSample.java
Patch:
@@ -73,7 +73,7 @@ public DataSample setValue(int i, long value) {
      */
     public DataSample fillWith(ArrayList<Signal> signals) {
         for (int i = 0; i < signals.size(); i++)
-            values[i] = signals.get(i).getValue().getValueIgnoreBurn();
+            values[i] = signals.get(i).getValue().getValueIgnoreHighZ();
         return this;
     }
 

File: src/test/java/de/neemann/digital/integration/FileScanner.java
Patch:
@@ -23,7 +23,7 @@ public int scan(File path) throws Exception {
         if (errors.isEmpty())
             return count;
 
-        System.out.println("errors:");
+        System.err.println("errors:");
         for (Error e : errors) {
             System.err.println("----> error in: " + e.f);
             e.e.printStackTrace();

File: src/main/java/de/neemann/digital/core/NodeException.java
Patch:
@@ -83,7 +83,7 @@ public String getMessage() {
         ItemConcatenation items = new ItemConcatenation(super.getMessage());
         if (values != null && values.size() > 0) {
             for (ObservableValue ov : values)
-                items.addItem(ov.getName());
+                items.addItem(Lang.get("msg_signal_N", ov.getName()));
         }
 
         if (nodes != null && nodes.size() > 0) {

File: src/main/java/de/neemann/digital/draw/model/ModelCreator.java
Patch:
@@ -124,7 +124,7 @@ public ModelCreator(Circuit circuit, ElementLibrary library, boolean isNestedCir
                 }
 
                 if (isNotAIO)
-                    entries.add(new ModelEntry(element, pins, ve, elementType.getInputDescription(ve.getElementAttributes()), isNestedCircuit));
+                    entries.add(new ModelEntry(element, pins, ve, elementType.getInputDescription(ve.getElementAttributes()), isNestedCircuit, origin));
 
                 for (Pin p : pins)
                     netList.add(p);

File: src/main/java/de/neemann/digital/draw/elements/PinException.java
Patch:
@@ -1,13 +1,14 @@
 package de.neemann.digital.draw.elements;
 
+import de.neemann.digital.core.ExceptionWithOrigin;
 import de.neemann.digital.draw.model.Net;
 
 /**
  * Exception thrown dealing with pins
  *
  * @author hneemann
  */
-public class PinException extends Exception {
+public class PinException extends ExceptionWithOrigin {
     private VisualElement element;
     private Net net;
 

File: src/main/java/de/neemann/digital/builder/tt2/StartATF1502Fitter.java
Patch:
@@ -11,7 +11,7 @@
 import java.io.IOException;
 import java.util.ArrayList;
 
-import static de.neemann.digital.gui.Settings.isLinux;
+import static de.neemann.gui.Screen.isLinux;
 
 /**
  * Starts a fitter to create a JEDEC file.

File: src/main/java/de/neemann/digital/gui/Main.java
Patch:
@@ -1096,7 +1096,8 @@ private void saveFile(File filename, boolean toPrefs) {
 
     private void setFilename(File filename, boolean toPrefs) {
         modifiedPrefixVisible = circuitComponent.getCircuit().isModified();
-        save.setActive(modifiedPrefixVisible);
+        if (save != null)
+            save.setActive(modifiedPrefixVisible);
         String prefix = "";
         if (modifiedPrefixVisible)
             prefix = "*";

File: src/main/java/de/neemann/digital/builder/circuit/CircuitBuilder.java
Patch:
@@ -318,7 +318,7 @@ public Circuit createCircuit() {
         if (!sequentialVars.isEmpty())
             addNetConnections(circuit, maxWidth + SIZE * 7);
 
-        circuit.setNotModified();
+        circuit.setModified(false);
         return circuit;
     }
 

File: src/main/java/de/neemann/digital/draw/elements/Circuit.java
Patch:
@@ -467,9 +467,10 @@ public void modified() {
 
     /**
      * Sets this circuits state to not modified
+     * @param modified the modified state
      */
-    public void setNotModified() {
-        modified = false;
+    public void setModified(boolean modified) {
+        this.modified = modified;
     }
 
     /**

File: src/main/java/de/neemann/digital/gui/Main.java
Patch:
@@ -463,7 +463,7 @@ public void actionPerformed(ActionEvent e) {
                 else
                     saveFile(filename, false);
             }
-        }.setAcceleratorCTRLplus('S');
+        }.setAcceleratorCTRLplus('S').setActive(false);
 
         JMenu export = new JMenu(Lang.get("menu_export"));
         export.add(new ExportAction(Lang.get("menu_exportSVG"), "svg", GraphicSVGIndex::new));
@@ -1096,6 +1096,7 @@ private void saveFile(File filename, boolean toPrefs) {
 
     private void setFilename(File filename, boolean toPrefs) {
         modifiedPrefixVisible = circuitComponent.getCircuit().isModified();
+        save.setActive(modifiedPrefixVisible);
         String prefix = "";
         if (modifiedPrefixVisible)
             prefix = "*";

File: src/main/java/de/neemann/digital/draw/library/LibraryNode.java
Patch:
@@ -150,7 +150,7 @@ public ElementTypeDescription getDescriptionOrNull() {
     public ElementTypeDescription getDescription() throws IOException {
         if (description == null) {
             if (!unique)
-                throw new IOException(Lang.get("err_file_N0_ExistsTwiceBelow_N1", file, library.getRootFilePath()));
+                throw new IOException(Lang.get("err_file_N0_ExistsTwiceBelow_N1", file.getName(), library.getRootFilePath()));
             try {
                 description = library.importElement(file);
             } catch (IOException e) {

File: src/main/java/de/neemann/digital/gui/Main.java
Patch:
@@ -1081,7 +1081,7 @@ private void loadFile(File filename, boolean setLibraryRoot, boolean toPref) {
 
     private void saveFile(File filename, boolean toPrefs) {
         try {
-            circuitComponent.getCircuit().save(filename);
+            circuitComponent.save(filename);
             ensureModelIsStopped();
             setFilename(filename, toPrefs);
 

File: src/main/java/de/neemann/digital/gui/Main.java
Patch:
@@ -1114,7 +1114,7 @@ private void setFilename(File filename, boolean toPrefs) {
     @Override
     public void circuitHasChanged() {
         ensureModelIsStopped();
-        if (!modifiedPrefixVisible)
+        if (modifiedPrefixVisible != circuitComponent.getCircuit().isModified())
             setFilename(filename, false);
     }
 

File: src/main/java/de/neemann/digital/gui/components/CircuitComponent.java
Patch:
@@ -381,7 +381,7 @@ private void undo() {
             redoAction.setEnabled(true);
             if (undoPosition == 0)
                 undoAction.setEnabled(false);
-            circuit.modified();
+            circuit.fireChangedEvent();
             repaintNeeded();
         }
     }

File: src/main/java/de/neemann/digital/gui/Main.java
Patch:
@@ -774,7 +774,9 @@ public void actionPerformed(ActionEvent e) {
         ToolTipAction editRunAttributes = new ToolTipAction(Lang.get("menu_editRunAttributes")) {
             @Override
             public void actionPerformed(ActionEvent e) {
-                new AttributeDialog(Main.this, ATTR_LIST, settings).showDialog();
+                ElementAttributes modified = new AttributeDialog(Main.this, ATTR_LIST, settings).showDialog();
+                if (modified!=null)
+                    settings.getValuesFrom(modified);
             }
         }.setToolTip(Lang.get("menu_editRunAttributes_tt"));
 

File: src/main/java/de/neemann/digital/draw/elements/Wire.java
Patch:
@@ -55,9 +55,9 @@ public Wire(Wire proto) {
     }
 
     @Override
-    public void drawTo(Graphic graphic, boolean highLight) {
-        Style style = Style.HIGHLIGHT;
-        if (!highLight)
+    public void drawTo(Graphic graphic, Style highLight) {
+        Style style = highLight;
+        if (style == null)
             style = Style.getWireStyle(value);
 
         graphic.drawLine(p1, p2, style);

File: src/main/java/de/neemann/digital/draw/shapes/BreakShape.java
Patch:
@@ -48,7 +48,7 @@ public Interactor applyStateMonitor(IOState ioState, Observer guiObserver) {
     }
 
     @Override
-    public void drawTo(Graphic graphic, boolean highLight) {
+    public void drawTo(Graphic graphic, Style highLight) {
         Vector center = new Vector(2 + SIZE, 0);
         graphic.drawCircle(center.sub(RAD), center.add(RAD), Style.NORMAL);
         graphic.drawLine(center.sub(D1), center.add(D1), Style.NORMAL);

File: src/main/java/de/neemann/digital/draw/shapes/ButtonShape.java
Patch:
@@ -83,7 +83,7 @@ public boolean dragged(CircuitComponent cc, Vector pos, Transform trans, IOState
     }
 
     @Override
-    public void drawTo(Graphic graphic, boolean heighLight) {
+    public void drawTo(Graphic graphic, Style heighLight) {
         boolean down = false;
         if (ioState != null) down = ioState.getOutput(0).getBool();
 

File: src/main/java/de/neemann/digital/draw/shapes/ClockShape.java
Patch:
@@ -70,7 +70,7 @@ public boolean clicked(CircuitComponent cc, Point pos, IOState ioState, Element
     }
 
     @Override
-    public void drawTo(Graphic graphic, boolean heighLight) {
+    public void drawTo(Graphic graphic, Style heighLight) {
         graphic.drawPolygon(new Polygon(true)
                 .add(-SIZE * 2 - 1, -SIZE)
                 .add(-1, -SIZE)

File: src/main/java/de/neemann/digital/draw/shapes/ConstShape.java
Patch:
@@ -45,7 +45,7 @@ public Interactor applyStateMonitor(IOState ioState, Observer guiObserver) {
     }
 
     @Override
-    public void drawTo(Graphic graphic, boolean heighLight) {
+    public void drawTo(Graphic graphic, Style heighLight) {
         Vector textPos = new Vector(-3, 0);
         graphic.drawText(textPos, textPos.add(1, 0), value, Orientation.RIGHTCENTER, Style.NORMAL);
     }

File: src/main/java/de/neemann/digital/draw/shapes/DILShape.java
Patch:
@@ -67,7 +67,7 @@ public InteractorInterface applyStateMonitor(IOState ioState, Observer guiObserv
     }
 
     @Override
-    public void drawTo(Graphic graphic, boolean highLight) {
+    public void drawTo(Graphic graphic, Style highLight) {
         int dp = SPACING * SIZE;
         int pin = dp / 4;
         int x = width * SIZE;

File: src/main/java/de/neemann/digital/draw/shapes/DataShape.java
Patch:
@@ -10,6 +10,7 @@
 import de.neemann.digital.draw.elements.IOState;
 import de.neemann.digital.draw.elements.Pins;
 import de.neemann.digital.draw.graphics.Graphic;
+import de.neemann.digital.draw.graphics.Style;
 import de.neemann.digital.draw.model.ModelCreator;
 import de.neemann.digital.draw.model.ModelEntry;
 import de.neemann.digital.gui.components.CircuitComponent;
@@ -61,11 +62,11 @@ public boolean clicked(CircuitComponent cc, Point pos, IOState ioState, Element
     }
 
     @Override
-    public void drawTo(Graphic graphic, boolean heighLight) {
+    public void drawTo(Graphic graphic, Style heighLight) {
         if (dataSet == null) {
             dataSet = new DataSet();
         }
-        dataSet.drawTo(graphic, false);
+        dataSet.drawTo(graphic, null);
     }
 
     @Override

File: src/main/java/de/neemann/digital/draw/shapes/DelayShape.java
Patch:
@@ -41,7 +41,7 @@ public Interactor applyStateMonitor(IOState ioState, Observer guiObserver) {
     }
 
     @Override
-    public void drawTo(Graphic graphic, boolean heighLight) {
+    public void drawTo(Graphic graphic, Style heighLight) {
         graphic.drawPolygon(
                 new Polygon(true)
                         .add(1, -SIZE2)

File: src/main/java/de/neemann/digital/draw/shapes/DemuxerShape.java
Patch:
@@ -65,7 +65,7 @@ public Interactor applyStateMonitor(IOState ioState, Observer guiObserver) {
     }
 
     @Override
-    public void drawTo(Graphic graphic, boolean highLight) {
+    public void drawTo(Graphic graphic, Style highLight) {
         graphic.drawPolygon(new Polygon(true)
                 .add(1, 5)
                 .add(SIZE * 2 - 1, -4)

File: src/main/java/de/neemann/digital/draw/shapes/DiodeBackwardShape.java
Patch:
@@ -50,7 +50,7 @@ public InteractorInterface applyStateMonitor(IOState ioState, Observer guiObserv
     }
 
     @Override
-    public void drawTo(Graphic graphic, boolean highLight) {
+    public void drawTo(Graphic graphic, Style highLight) {
         Style style = blown ? Style.DASH : Style.NORMAL;
 
         graphic.drawPolygon(

File: src/main/java/de/neemann/digital/draw/shapes/DiodeForewardShape.java
Patch:
@@ -50,7 +50,7 @@ public InteractorInterface applyStateMonitor(IOState ioState, Observer guiObserv
     }
 
     @Override
-    public void drawTo(Graphic graphic, boolean highLight) {
+    public void drawTo(Graphic graphic, Style highLight) {
         Style style = blown ? Style.DASH : Style.NORMAL;
 
         graphic.drawPolygon(

File: src/main/java/de/neemann/digital/draw/shapes/DiodeShape.java
Patch:
@@ -48,7 +48,7 @@ public InteractorInterface applyStateMonitor(IOState ioState, Observer guiObserv
     }
 
     @Override
-    public void drawTo(Graphic graphic, boolean highLight) {
+    public void drawTo(Graphic graphic, Style highLight) {
         Style style = blown ? Style.DASH : Style.NORMAL;
 
         graphic.drawPolygon(

File: src/main/java/de/neemann/digital/draw/shapes/Drawable.java
Patch:
@@ -1,6 +1,7 @@
 package de.neemann.digital.draw.shapes;
 
 import de.neemann.digital.draw.graphics.Graphic;
+import de.neemann.digital.draw.graphics.Style;
 
 /**
  * Interface implemented by the elements which can draw itself to a {@link Graphic} instance.
@@ -10,9 +11,8 @@
 public interface Drawable {
     /**
      * Draws an element depending on its state.
-     *
-     * @param graphic   interface to draw to
+     *  @param graphic   interface to draw to
      * @param highLight true if a highlighted drawing is required
      */
-    void drawTo(Graphic graphic, boolean highLight);
+    void drawTo(Graphic graphic, Style highLight);
 }

File: src/main/java/de/neemann/digital/draw/shapes/DriverShape.java
Patch:
@@ -70,7 +70,7 @@ public Interactor applyStateMonitor(IOState ioState, Observer guiObserver) {
     }
 
     @Override
-    public void drawTo(Graphic graphic, boolean highLight) {
+    public void drawTo(Graphic graphic, Style highLight) {
         graphic.drawPolygon(
                 new Polygon(true)
                         .add(-SIZE + 1, -SIZE2 - 2)

File: src/main/java/de/neemann/digital/draw/shapes/FETShape.java
Patch:
@@ -51,7 +51,7 @@ public InteractorInterface applyStateMonitor(IOState ioState, Observer guiObserv
     }
 
     @Override
-    public void drawTo(Graphic graphic, boolean highLight) {
+    public void drawTo(Graphic graphic, Style highLight) {
         final int g = SIZE2 / 2;
         graphic.drawPolygon(new Polygon(false)
                 .add(SIZE, 0)

File: src/main/java/de/neemann/digital/draw/shapes/FETShapeN.java
Patch:
@@ -37,7 +37,7 @@ public Pins getPins() {
     }
 
     @Override
-    public void drawTo(Graphic graphic, boolean highLight) {
+    public void drawTo(Graphic graphic, Style highLight) {
         super.drawTo(graphic, highLight);
 
         // the arrow

File: src/main/java/de/neemann/digital/draw/shapes/FETShapeP.java
Patch:
@@ -38,7 +38,7 @@ public Pins getPins() {
 
 
     @Override
-    public void drawTo(Graphic graphic, boolean highLight) {
+    public void drawTo(Graphic graphic, Style highLight) {
         super.drawTo(graphic, highLight);
 
         // the arrow

File: src/main/java/de/neemann/digital/draw/shapes/FGFETShapeN.java
Patch:
@@ -45,7 +45,7 @@ public Pins getPins() {
     }
 
     @Override
-    public void drawTo(Graphic graphic, boolean highLight) {
+    public void drawTo(Graphic graphic, Style highLight) {
         super.drawTo(graphic, highLight);
 
         if (programmed)

File: src/main/java/de/neemann/digital/draw/shapes/FGFETShapeP.java
Patch:
@@ -44,7 +44,7 @@ public Pins getPins() {
 
 
     @Override
-    public void drawTo(Graphic graphic, boolean highLight) {
+    public void drawTo(Graphic graphic, Style highLight) {
         super.drawTo(graphic, highLight);
 
         if (programmed)

File: src/main/java/de/neemann/digital/draw/shapes/GenericShape.java
Patch:
@@ -171,7 +171,7 @@ public Interactor applyStateMonitor(IOState ioState, Observer guiObserver) {
     }
 
     @Override
-    public void drawTo(Graphic graphic, boolean highLight) {
+    public void drawTo(Graphic graphic, Style highLight) {
         int max = Math.max(inputs.size(), outputs.size());
         int height = (max - 1) * SIZE + SIZE2;
 

File: src/main/java/de/neemann/digital/draw/shapes/GroundShape.java
Patch:
@@ -43,7 +43,7 @@ public Interactor applyStateMonitor(IOState ioState, Observer guiObserver) {
     }
 
     @Override
-    public void drawTo(Graphic graphic, boolean heighLight) {
+    public void drawTo(Graphic graphic, Style heighLight) {
         graphic.drawLine(new Vector(-SIZE2, 0), new Vector(SIZE2, 0), Style.THICK);
     }
 }

File: src/main/java/de/neemann/digital/draw/shapes/InputShape.java
Patch:
@@ -88,7 +88,7 @@ public ObservableValue getObservableValue() {
     }
 
     @Override
-    public void drawTo(Graphic graphic, boolean heighLight) {
+    public void drawTo(Graphic graphic, Style heighLight) {
         Style style = Style.NORMAL;
         if (ioState != null) {
             ObservableValue value = ioState.getOutput(0);

File: src/main/java/de/neemann/digital/draw/shapes/LEDShape.java
Patch:
@@ -54,7 +54,7 @@ public Interactor applyStateMonitor(IOState ioState, Observer guiObserver) {
     }
 
     @Override
-    public void drawTo(Graphic graphic, boolean heighLight) {
+    public void drawTo(Graphic graphic, Style heighLight) {
         boolean fill = true;
         if (ioState != null) {
             fill = false;

File: src/main/java/de/neemann/digital/draw/shapes/LightBulbShape.java
Patch:
@@ -12,8 +12,6 @@
 import de.neemann.digital.draw.graphics.Style;
 import de.neemann.digital.draw.graphics.Vector;
 
-import java.awt.*;
-
 import static de.neemann.digital.draw.shapes.GenericShape.SIZE;
 
 /**
@@ -56,7 +54,7 @@ public InteractorInterface applyStateMonitor(IOState ioState, Observer guiObserv
     }
 
     @Override
-    public void drawTo(Graphic graphic, boolean highLight) {
+    public void drawTo(Graphic graphic, Style highLight) {
         if (a != null && b != null) {
             boolean on = !a.isHighZ() && !b.isHighZ() && (a.getBool() != b.getBool());
             if (on)

File: src/main/java/de/neemann/digital/draw/shapes/MissingShape.java
Patch:
@@ -42,7 +42,7 @@ public Interactor applyStateMonitor(IOState ioState, Observer guiObserver) {
     }
 
     @Override
-    public void drawTo(Graphic graphic, boolean highLight) {
+    public void drawTo(Graphic graphic, Style highLight) {
         Style style = Style.NORMAL_TEXT;
         graphic.drawText(new Vector(4, 4), new Vector(5, 4), message, Orientation.LEFTTOP, style);
         if (cause != null && cause.length() > 0)

File: src/main/java/de/neemann/digital/draw/shapes/MuxerShape.java
Patch:
@@ -60,7 +60,7 @@ public Interactor applyStateMonitor(IOState ioState, Observer guiObserver) {
     }
 
     @Override
-    public void drawTo(Graphic graphic, boolean heighLight) {
+    public void drawTo(Graphic graphic, Style heighLight) {
         graphic.drawPolygon(new Polygon(true)
                 .add(1, -4)
                 .add(SIZE * 2 - 1, 5)

File: src/main/java/de/neemann/digital/draw/shapes/OutputShape.java
Patch:
@@ -63,7 +63,7 @@ public Interactor applyStateMonitor(IOState ioState, Observer guiObserver) {
     }
 
     @Override
-    public void drawTo(Graphic graphic, boolean highLight) {
+    public void drawTo(Graphic graphic, Style highLight) {
         Style style = Style.NORMAL;
         if (ioState != null) {
             ObservableValue value = ioState.getInput(0);

File: src/main/java/de/neemann/digital/draw/shapes/ProbeShape.java
Patch:
@@ -58,7 +58,7 @@ public Interactor applyStateMonitor(IOState ioState, Observer guiObserver) {
     }
 
     @Override
-    public void drawTo(Graphic graphic, boolean highLight) {
+    public void drawTo(Graphic graphic, Style highLight) {
         graphic.drawText(new Vector(2, -1), new Vector(3, -1), label, Orientation.LEFTBOTTOM, Style.NORMAL);
         if (bits > 1) {
             String v = format.format(inValue);

File: src/main/java/de/neemann/digital/draw/shapes/PullDownShape.java
Patch:
@@ -53,7 +53,7 @@ public InteractorInterface applyStateMonitor(IOState ioState, Observer guiObserv
     }
 
     @Override
-    public void drawTo(Graphic graphic, boolean highLight) {
+    public void drawTo(Graphic graphic, Style highLight) {
         graphic.drawPolygon(
                 new Polygon(true)
                         .add(-WIDTH2, 1)

File: src/main/java/de/neemann/digital/draw/shapes/PullUpShape.java
Patch:
@@ -47,7 +47,7 @@ public InteractorInterface applyStateMonitor(IOState ioState, Observer guiObserv
     }
 
     @Override
-    public void drawTo(Graphic graphic, boolean highLight) {
+    public void drawTo(Graphic graphic, Style highLight) {
         graphic.drawPolygon(
                 new Polygon(true)
                         .add(-WIDTH2, -1)

File: src/main/java/de/neemann/digital/draw/shapes/RelayShape.java
Patch:
@@ -56,7 +56,7 @@ public InteractorInterface applyStateMonitor(IOState ioState, Observer guiObserv
     }
 
     @Override
-    public void drawTo(Graphic graphic, boolean highLight) {
+    public void drawTo(Graphic graphic, Style highLight) {
         int yOffs = 0;
 
         boolean closed = invers;

File: src/main/java/de/neemann/digital/draw/shapes/ResetShape.java
Patch:
@@ -44,7 +44,7 @@ public Interactor applyStateMonitor(IOState ioState, Observer guiObserver) {
     }
 
     @Override
-    public void drawTo(Graphic graphic, boolean highLight) {
+    public void drawTo(Graphic graphic, Style highLight) {
         graphic.drawPolygon(new Polygon(true).add(-SIZE * 2 - 2, -SIZE).add(-2, -SIZE).add(-2, SIZE).add(-SIZE * 2 - 2, SIZE), Style.NORMAL);
 
         Vector textPos = new Vector(-SIZE * 2 + 2, -SIZE + 2);

File: src/main/java/de/neemann/digital/draw/shapes/RotEncoderShape.java
Patch:
@@ -106,7 +106,7 @@ public boolean dragged(CircuitComponent cc, Vector pos, Transform trans, IOState
     }
 
     @Override
-    public void drawTo(Graphic graphic, boolean heighLight) {
+    public void drawTo(Graphic graphic, Style heighLight) {
         graphic.drawPolygon(new Polygon(true)
                 .add(0, -SIZE)
                 .add(0, SIZE * 2)

File: src/main/java/de/neemann/digital/draw/shapes/SevenSegShape.java
Patch:
@@ -74,7 +74,7 @@ public Interactor applyStateMonitor(IOState ioState, Observer guiObserver) {
     }
 
     @Override
-    public void drawTo(Graphic graphic, boolean highLight) {
+    public void drawTo(Graphic graphic, Style highLight) {
         super.drawTo(graphic, highLight);
         if (commonCatode)
             graphic.drawLine(

File: src/main/java/de/neemann/digital/draw/shapes/SevenShape.java
Patch:
@@ -67,7 +67,7 @@ public SevenShape(ElementAttributes attr) {
     }
 
     @Override
-    public void drawTo(Graphic graphic, boolean highLight) {
+    public void drawTo(Graphic graphic, Style highLight) {
         graphic.drawPolygon(new Polygon(true)
                 .add(-SIZE2, 1)
                 .add(SIZE * 3 + SIZE2, 1)

File: src/main/java/de/neemann/digital/draw/shapes/SplitterShape.java
Patch:
@@ -55,7 +55,7 @@ public Interactor applyStateMonitor(IOState ioState, Observer guiObserver) {
     }
 
     @Override
-    public void drawTo(Graphic graphic, boolean heighLight) {
+    public void drawTo(Graphic graphic, Style heighLight) {
         for (int i = 0; i < inputs.size(); i++) {
             Vector pos = new Vector(-2, i * SIZE - 3);
             graphic.drawText(pos, pos.add(2, 0), inputs.get(i).getName(), Orientation.RIGHTBOTTOM, Style.SHAPE_PIN);

File: src/main/java/de/neemann/digital/draw/shapes/SwitchShape.java
Patch:
@@ -65,7 +65,7 @@ public boolean clicked(CircuitComponent cc, Point pos, IOState ioState, Element
     }
 
     @Override
-    public void drawTo(Graphic graphic, boolean highLight) {
+    public void drawTo(Graphic graphic, Style highLight) {
         int yOffs = 0;
         if (closed) {
             graphic.drawLine(new Vector(0, 0), new Vector(SIZE * 2, 0), Style.NORMAL);

File: src/main/java/de/neemann/digital/draw/shapes/TestCaseShape.java
Patch:
@@ -45,7 +45,7 @@ public InteractorInterface applyStateMonitor(IOState ioState, Observer guiObserv
     }
 
     @Override
-    public void drawTo(Graphic graphic, boolean highLight) {
+    public void drawTo(Graphic graphic, Style highLight) {
         Polygon pol = new Polygon(true)
                 .add(SIZE2, SIZE2)
                 .add(SIZE2 + SIZE * 4, SIZE2)

File: src/main/java/de/neemann/digital/draw/shapes/TextShape.java
Patch:
@@ -45,7 +45,7 @@ public Interactor applyStateMonitor(IOState ioState, Observer guiObserver) {
     }
 
     @Override
-    public void drawTo(Graphic graphic, boolean highLight) {
+    public void drawTo(Graphic graphic, Style highLight) {
         graphic.drawText(new Vector(0, 0), new Vector(1, 0), label, Orientation.LEFTTOP, Style.NORMAL_TEXT);
     }
 }

File: src/main/java/de/neemann/digital/draw/shapes/TransGateShape.java
Patch:
@@ -64,7 +64,7 @@ public InteractorInterface applyStateMonitor(IOState ioState, Observer guiObserv
     }
 
     @Override
-    public void drawTo(Graphic graphic, boolean highLight) {
+    public void drawTo(Graphic graphic, Style highLight) {
         graphic.drawPolygon(TOP, Style.NORMAL);
         graphic.drawPolygon(BOTTOM, Style.NORMAL);
         graphic.drawLine(new Vector(SIZE, -SIZE), new Vector(SIZE, -SIZE2), Style.NORMAL);

File: src/main/java/de/neemann/digital/draw/shapes/TunnelShape.java
Patch:
@@ -48,7 +48,7 @@ public InteractorInterface applyStateMonitor(IOState ioState, Observer guiObserv
     }
 
     @Override
-    public void drawTo(Graphic gr, boolean highLight) {
+    public void drawTo(Graphic gr, Style highLight) {
         gr.drawPolygon(new Polygon(true)
                 .add(0, 0)
                 .add(WIDTH, HEIGHT)

File: src/main/java/de/neemann/digital/draw/shapes/VDDShape.java
Patch:
@@ -45,7 +45,7 @@ public Interactor applyStateMonitor(IOState ioState, Observer guiObserver) {
     }
 
     @Override
-    public void drawTo(Graphic graphic, boolean heighLight) {
+    public void drawTo(Graphic graphic, Style heighLight) {
         graphic.drawPolygon(
                 new Polygon(false)
                         .add(-SIZE2, DOWNSHIFT)

File: src/main/java/de/neemann/digital/draw/shapes/ieee/IEEEGenericShape.java
Patch:
@@ -54,7 +54,7 @@ public InteractorInterface applyStateMonitor(IOState ioState, Observer guiObserv
     }
 
     @Override
-    public void drawTo(Graphic graphic, boolean highLight) {
+    public void drawTo(Graphic graphic, Style highLight) {
         int offs = (inputs.size() / 2 - 1) * SIZE;
         drawIEEE(new GraphicTransform(graphic, v -> v.add(0, offs)));
 

File: src/main/java/de/neemann/digital/draw/shapes/ieee/IEEENotShape.java
Patch:
@@ -52,7 +52,7 @@ public Interactor applyStateMonitor(IOState ioState, Observer guiObserver) {
     }
 
     @Override
-    public void drawTo(Graphic graphic, boolean highLight) {
+    public void drawTo(Graphic graphic, Style highLight) {
         graphic.drawPolygon(
                 new Polygon(true)
                         .add(1, -SIZE2 - 2)

File: src/main/java/de/neemann/digital/gui/components/data/DataSet.java
Patch:
@@ -140,7 +140,7 @@ public Signal getSignal(int i) {
 
 
     @Override
-    synchronized public void drawTo(Graphic g, boolean highLight) {
+    synchronized public void drawTo(Graphic g, Style highLight) {
         int x = getTextBorder();
 
         int yOffs = SIZE / 2;

File: src/main/java/de/neemann/digital/gui/components/data/DataSetComponent.java
Patch:
@@ -29,7 +29,7 @@ protected void paintComponent(Graphics g) {
         g.setColor(Color.WHITE);
         g.fillRect(0, 0, getWidth(), getHeight());
 
-        dataSet.drawTo(new GraphicSwing(g2), false);
+        dataSet.drawTo(new GraphicSwing(g2), null);
     }
 
     @Override

File: src/test/java/de/neemann/digital/docu/DocuTest.java
Patch:
@@ -117,10 +117,10 @@ private void writeXML(Writer w, File images, String language) throws IOException
 
     private void writeSVG(File imageFile, VisualElement ve) throws IOException {
         GraphicMinMax minMax = new GraphicMinMax(true);
-        ve.drawTo(minMax, false);
+        ve.drawTo(minMax, null);
         try (FileOutputStream out = new FileOutputStream(imageFile)) {
             try (GraphicSVG svg = new GraphicSVG(out, minMax.getMin(), minMax.getMax(), null, 20)) {
-                ve.drawTo(svg, false);
+                ve.drawTo(svg, null);
             }
         }
     }

File: src/main/java/de/neemann/digital/gui/Main.java
Patch:
@@ -557,15 +557,15 @@ public void actionPerformed(ActionEvent e) {
         ToolTipAction actualToDefault = new ToolTipAction(Lang.get("menu_actualToDefault")) {
             @Override
             public void actionPerformed(ActionEvent e) {
-                circuitComponent.getCircuit().actualToDefault();
+                circuitComponent.actualToDefault();
                 stoppedState.enter();
             }
         }.setToolTip(Lang.get("menu_actualToDefault_tt"));
 
         ToolTipAction restoreAllFuses = new ToolTipAction(Lang.get("menu_restoreAllFuses")) {
             @Override
             public void actionPerformed(ActionEvent e) {
-                circuitComponent.getCircuit().restoreAllFuses(library);
+                circuitComponent.restoreAllFuses();
                 stoppedState.enter();
             }
         }.setToolTip(Lang.get("menu_restoreAllFuses_tt"));

File: src/main/java/de/neemann/digital/testing/TestData.java
Patch:
@@ -1,5 +1,6 @@
 package de.neemann.digital.testing;
 
+import de.neemann.digital.lang.Lang;
 import de.neemann.digital.testing.parser.LineEmitter;
 import de.neemann.digital.testing.parser.Parser;
 import de.neemann.digital.testing.parser.ParserException;
@@ -66,7 +67,7 @@ private void check() throws TestingDataException {
                 lines = tdp.getLines();
                 names = tdp.getNames();
             } catch (ParserException | IOException e) {
-                throw new TestingDataException(e);
+                throw new TestingDataException(Lang.get("err_errorParsingTestdata"), e);
             }
         }
     }

File: src/main/java/de/neemann/digital/testing/TestResult.java
Patch:
@@ -96,7 +96,7 @@ public TestResult create(Model model) throws TestingDataException, NodeException
         try {
             lines.emitLines(new LineListenerResolveDontCare(values -> checkRow(model, values), inputs), new Context());
         } catch (ParserException e) {
-            throw new TestingDataException(e);
+            throw new TestingDataException(Lang.get("err_errorParsingTestdata"), e);
         } catch (RuntimeException e) {
             if (allPassed) {
                 allPassed = false;

File: src/main/java/de/neemann/gui/ErrorMessage.java
Patch:
@@ -61,7 +61,7 @@ private void addExceptionMessage(Throwable e) {
                 message.append(e.getClass().getSimpleName());
             e = e.getCause();
             if (e != null)
-                message.append("\ncaused by: ");
+                message.append("\n").append(Lang.get("msg_errCausedBy")).append(": ");
         }
     }
 

File: src/main/java/de/neemann/digital/draw/elements/ElementOrder.java
Patch:
@@ -3,7 +3,6 @@
 import de.neemann.digital.core.element.ElementTypeDescription;
 import de.neemann.digital.gui.components.CircuitComponent;
 import de.neemann.digital.gui.components.ElementOrderer;
-import de.neemann.digital.gui.components.modification.Modification;
 
 import java.util.ArrayList;
 

File: src/main/java/de/neemann/digital/analyse/ModelAnalyser.java
Patch:
@@ -197,6 +197,7 @@ private ArrayList<Signal> checkBinaryOutputs(ArrayList<Signal> list) throws Anal
                         outputs.add(new Signal(s.getName() + i, out));
                         i++;
                     }
+                    s.getValue().fireHasChanged();
                 } catch (NodeException e) {
                     throw new AnalyseException(e);
                 }
@@ -216,6 +217,7 @@ private ArrayList<Signal> checkBinaryInputs(ArrayList<Signal> list) throws Analy
                     Splitter sp = Splitter.createNToOne(bits);
                     final ObservableValue out = sp.getOutputs().get(0);
                     out.addObserver(() -> s.getValue().setValue(out.getValue()));
+                    out.fireHasChanged();
 
                     ObservableValues.Builder builder = new ObservableValues.Builder();
                     for (int i = 0; i < bits; i++) {

File: src/main/java/de/neemann/gui/Screen.java
Patch:
@@ -51,7 +51,7 @@ private Screen() {
                             javax.swing.UIManager.put(key, new ScaleIcon(icon, scaling));
                     }
                 }
-                UIManager.put("ScrollBar.width", (int) (size * 17 / 12));
+                UIManager.put("ScrollBar.width", size * 17 / 12);
             }
         } catch (HeadlessException e) {
             // run with defaults if headless

File: src/main/java/de/neemann/digital/core/NodeException.java
Patch:
@@ -105,7 +105,7 @@ public String getMessage() {
                             }
 
                         }
-                    } catch (Exception e) {
+                    } catch (IllegalAccessException | NoSuchFieldException e) {
                         // ignore an error accessing the ElementTypeDescription
                     }
             }

File: src/main/java/de/neemann/digital/gui/components/ElementOrderer.java
Patch:
@@ -1,6 +1,7 @@
 package de.neemann.digital.gui.components;
 
 import de.neemann.digital.lang.Lang;
+import de.neemann.gui.Screen;
 import de.neemann.gui.ToolTipAction;
 
 import javax.swing.*;
@@ -42,7 +43,7 @@ public ElementOrderer(Frame owner, String title, OrderInterface<T> data) {
         list = new JList<T>(listModel);
         JScrollPane scrollPane = new JScrollPane(list);
         getContentPane().add(scrollPane);
-        scrollPane.setPreferredSize(new Dimension(100, 150));
+        scrollPane.setPreferredSize(Screen.getInstance().scale(new Dimension(100, 150)));
 
         buttons = new JPanel();
         buttons.setLayout(new BoxLayout(buttons, BoxLayout.Y_AXIS));

File: src/main/java/de/neemann/digital/gui/components/ElementHelpDialog.java
Patch:
@@ -8,6 +8,7 @@
 import de.neemann.digital.draw.shapes.ShapeFactory;
 import de.neemann.digital.lang.Lang;
 import de.neemann.gui.ErrorMessage;
+import de.neemann.gui.Screen;
 import de.neemann.gui.ToolTipAction;
 
 import javax.imageio.ImageIO;
@@ -99,6 +100,7 @@ private void init(Component parent, String description) {
         JEditorPane editorPane = new JEditorPane("text/html", description);
         editorPane.setEditable(false);
         editorPane.setCaretPosition(0);
+        editorPane.putClientProperty(JEditorPane.HONOR_DISPLAY_PROPERTIES, true);
 
         editorPane.addHyperlinkListener(hyperlinkEvent -> {
             if (HyperlinkEvent.EventType.ACTIVATED == hyperlinkEvent.getEventType()) {
@@ -124,7 +126,7 @@ public void actionPerformed(ActionEvent actionEvent) {
         Dimension r = getSize();
         if (r.width > MAX_WIDTH) r.width = MAX_WIDTH;
         if (r.height > MAX_HEIGHT) r.height = MAX_HEIGHT;
-        setSize(r);
+        setSize(Screen.getInstance().scale(r));
         setLocationRelativeTo(parent);
     }
 

File: src/main/java/de/neemann/digital/gui/components/CircuitComponent.java
Patch:
@@ -612,6 +612,7 @@ public void actionPerformed(ActionEvent e) {
                                     .setFileToOpen(((ElementLibrary.ElementTypeDescriptionCustom) elementType).getFile())
                                     .setLibrary(library)
                                     .denyMostFileActions()
+                                    .keepPrefMainFile()
                                     .openLater();
                         }
                     }.setToolTip(Lang.get("attr_openCircuit_tt")));

File: src/main/java/de/neemann/digital/gui/components/testing/TestDataEditor.java
Patch:
@@ -50,7 +50,7 @@ public void actionPerformed(ActionEvent e) {
         panel.add(new ToolTipAction(Lang.get("btn_editDetached")) {
             @Override
             public void actionPerformed(ActionEvent e) {
-                getAttributeDialog().dispose();
+                getAttributeDialog().fireOk();
                 TestDataDialog dialog = new TestDataDialog(getAttributeDialog().getDialogParent(), data, key, elementAttributes);
                 Main main = getAttributeDialog().getMain();
                 if (main!=null)

File: src/main/java/de/neemann/gui/ErrorMessage.java
Patch:
@@ -63,7 +63,9 @@ public ErrorMessage show() {
      * @return this for call chaining
      */
     public ErrorMessage show(Component parent) {
-        JOptionPane.showMessageDialog(parent, message.toString(), Lang.get("error"), JOptionPane.ERROR_MESSAGE);
+        JOptionPane.showMessageDialog(parent,
+                new LineBreaker(120).toHTML().preserveContainedLineBreaks().breakLines(message.toString()),
+                Lang.get("error"), JOptionPane.ERROR_MESSAGE);
         return this;
     }
 

File: src/main/java/de/neemann/digital/gui/Main.java
Patch:
@@ -807,8 +807,10 @@ private boolean createAndStartModel(boolean globalRunClock, ModelEvent updateEve
 
             modelCreator = new ModelCreator(circuitComponent.getCircuit(), library);
 
-            if (model != null)
+            if (model != null) {
                 model.close();
+                circuitComponent.getCircuit().clearState();
+            }
 
             model = modelCreator.createModel(true);
             model.setWindowPosManager(windowPosManager);

File: src/main/java/de/neemann/digital/core/arithmetic/BitCount.java
Patch:
@@ -55,7 +55,7 @@ public void writeOutputs() throws NodeException {
 
     @Override
     public void setInputs(ObservableValues inputs) throws NodeException {
-        input = inputs.get(0).addObserverToValue(this).checkBits(inBits, this);
+        input = inputs.get(0).addObserverToValue(this).checkBits(inBits, this, 0);
     }
 
     @Override

File: src/main/java/de/neemann/digital/core/arithmetic/Comparator.java
Patch:
@@ -89,8 +89,8 @@ private long signeExtend(long v) {
 
     @Override
     public void setInputs(ObservableValues inputs) throws BitsException {
-        a = inputs.get(0).addObserverToValue(this).checkBits(bits, this);
-        b = inputs.get(1).addObserverToValue(this).checkBits(bits, this);
+        a = inputs.get(0).addObserverToValue(this).checkBits(bits, this, 0);
+        b = inputs.get(1).addObserverToValue(this).checkBits(bits, this, 1);
     }
 
     @Override

File: src/main/java/de/neemann/digital/core/arithmetic/Mul.java
Patch:
@@ -55,8 +55,8 @@ public void writeOutputs() throws NodeException {
 
     @Override
     public void setInputs(ObservableValues inputs) throws NodeException {
-        a = inputs.get(0).addObserverToValue(this).checkBits(bits, this);
-        b = inputs.get(1).addObserverToValue(this).checkBits(bits, this);
+        a = inputs.get(0).addObserverToValue(this).checkBits(bits, this, 0);
+        b = inputs.get(1).addObserverToValue(this).checkBits(bits, this, 1);
     }
 
     @Override

File: src/main/java/de/neemann/digital/core/arithmetic/Neg.java
Patch:
@@ -52,7 +52,7 @@ public void writeOutputs() throws NodeException {
 
     @Override
     public void setInputs(ObservableValues inputs) throws NodeException {
-        input = inputs.get(0).addObserverToValue(this).checkBits(bits, this);
+        input = inputs.get(0).addObserverToValue(this).checkBits(bits, this, 0);
     }
 
     @Override

File: src/main/java/de/neemann/digital/core/flipflops/FlipflopD.java
Patch:
@@ -90,8 +90,8 @@ public void writeOutputs() throws NodeException {
 
     @Override
     public void setInputs(ObservableValues inputs) throws BitsException {
-        dVal = inputs.get(0).addObserverToValue(this).checkBits(bits, this);
-        clockVal = inputs.get(1).addObserverToValue(this).checkBits(1, this);
+        dVal = inputs.get(0).addObserverToValue(this).checkBits(bits, this, 0);
+        clockVal = inputs.get(1).addObserverToValue(this).checkBits(1, this, 1);
     }
 
     @Override

File: src/main/java/de/neemann/digital/core/flipflops/FlipflopJK.java
Patch:
@@ -76,9 +76,9 @@ public void writeOutputs() throws NodeException {
 
     @Override
     public void setInputs(ObservableValues inputs) throws BitsException {
-        jVal = inputs.get(0).addObserverToValue(this).checkBits(1, this);
-        clockVal = inputs.get(1).addObserverToValue(this).checkBits(1, this);
-        kVal = inputs.get(2).addObserverToValue(this).checkBits(1, this);
+        jVal = inputs.get(0).addObserverToValue(this).checkBits(1, this, 0);
+        clockVal = inputs.get(1).addObserverToValue(this).checkBits(1, this, 1);
+        kVal = inputs.get(2).addObserverToValue(this).checkBits(1, this, 2);
     }
 
     /**

File: src/main/java/de/neemann/digital/core/flipflops/FlipflopRS.java
Patch:
@@ -70,9 +70,9 @@ public void writeOutputs() throws NodeException {
 
     @Override
     public void setInputs(ObservableValues inputs) throws BitsException {
-        sVal = inputs.get(0).addObserverToValue(this).checkBits(1, this);
-        clockVal = inputs.get(1).addObserverToValue(this).checkBits(1, this);
-        rVal = inputs.get(2).addObserverToValue(this).checkBits(1, this);
+        sVal = inputs.get(0).addObserverToValue(this).checkBits(1, this, 0);
+        clockVal = inputs.get(1).addObserverToValue(this).checkBits(1, this, 1);
+        rVal = inputs.get(2).addObserverToValue(this).checkBits(1, this, 2);
     }
 
     @Override

File: src/main/java/de/neemann/digital/core/flipflops/FlipflopT.java
Patch:
@@ -64,7 +64,7 @@ public void writeOutputs() throws NodeException {
 
     @Override
     public void setInputs(ObservableValues inputs) throws BitsException {
-        clockVal = inputs.get(0).addObserverToValue(this).checkBits(1, this);
+        clockVal = inputs.get(0).addObserverToValue(this).checkBits(1, this, 0);
     }
 
     @Override

File: src/main/java/de/neemann/digital/core/io/LedMatrix.java
Patch:
@@ -63,8 +63,8 @@ public LedMatrix(ElementAttributes attr) {
 
     @Override
     public void setInputs(ObservableValues inputs) throws NodeException {
-        rowDataVal = inputs.get(0).checkBits(rowDataBits, this).addObserverToValue(this);
-        colAddrVal = inputs.get(1).checkBits(colAddrBits, this).addObserverToValue(this);
+        rowDataVal = inputs.get(0).checkBits(rowDataBits, this, 0).addObserverToValue(this);
+        colAddrVal = inputs.get(1).checkBits(colAddrBits, this, 1).addObserverToValue(this);
     }
 
     @Override

File: src/main/java/de/neemann/digital/core/memory/Counter.java
Patch:
@@ -71,8 +71,8 @@ public void writeOutputs() throws NodeException {
 
     @Override
     public void setInputs(ObservableValues inputs) throws BitsException {
-        clockIn = inputs.get(0).addObserverToValue(this).checkBits(1, this);
-        clrIn = inputs.get(1).addObserverToValue(this).checkBits(1, this);
+        clockIn = inputs.get(0).addObserverToValue(this).checkBits(1, this, 0);
+        clrIn = inputs.get(1).addObserverToValue(this).checkBits(1, this, 1);
     }
 
     @Override

File: src/main/java/de/neemann/digital/core/memory/ROM.java
Patch:
@@ -68,8 +68,8 @@ public ROM(ElementAttributes attr) {
 
     @Override
     public void setInputs(ObservableValues inputs) throws NodeException {
-        addrIn = inputs.get(0).checkBits(addrBits, this).addObserverToValue(this);
-        selIn = inputs.get(1).checkBits(1, this).addObserverToValue(this);
+        addrIn = inputs.get(0).checkBits(addrBits, this, 0).addObserverToValue(this);
+        selIn = inputs.get(1).checkBits(1, this, 1).addObserverToValue(this);
     }
 
     @Override
@@ -101,7 +101,7 @@ public void init(Model model) throws NodeException {
             try {
                 data = new DataField(hexFile);
             } catch (IOException e) {
-                throw new NodeException(e.getMessage(), this, null);
+                throw new NodeException(e.getMessage(), this, -1, null);
             }
         }
         if (isProgramMemory)

File: src/main/java/de/neemann/digital/core/switching/NFET.java
Patch:
@@ -46,7 +46,7 @@ public NFET(ElementAttributes attr) {
 
     @Override
     public void setInputs(ObservableValues inputs) throws NodeException {
-        input = inputs.get(0).checkBits(1, this).addObserverToValue(this);
+        input = inputs.get(0).checkBits(1, this, 0).addObserverToValue(this);
         s.setInputs(new ObservableValues(inputs.get(1), inputs.get(2)));
 
     }

File: src/main/java/de/neemann/digital/core/wiring/Multiplexer.java
Patch:
@@ -69,6 +69,6 @@ public void setInputs(ObservableValues inputs) throws NodeException {
         super.setInputs(in);
 
         if (in.size() != (1 << selectorBits))
-            throw new BitsException(Lang.get("err_selectorInputCountMismatch"), this, selector);
+            throw new BitsException(Lang.get("err_selectorInputCountMismatch"), this, -1, selector);
     }
 }

File: src/test/java/de/neemann/digital/integration/TestExamples.java
Patch:
@@ -39,8 +39,8 @@ public void testDistExamples() throws Exception {
      */
     public void testTestExamples() throws Exception {
         File examples = new File(Resources.getRoot(), "/dig/test");
-        assertEquals(55, new FileScanner(this::check).scan(examples));
-        assertEquals(51, testCasesInFiles);
+        assertEquals(60, new FileScanner(this::check).scan(examples));
+        assertEquals(56, testCasesInFiles);
     }
 
 

File: src/main/java/de/neemann/digital/core/pld/DiodeBackward.java
Patch:
@@ -4,6 +4,7 @@
 import de.neemann.digital.core.element.ElementAttributes;
 import de.neemann.digital.core.element.ElementTypeDescription;
 import de.neemann.digital.core.element.Keys;
+import de.neemann.digital.core.element.PinDescription;
 
 import static de.neemann.digital.core.element.PinInfo.input;
 
@@ -27,7 +28,7 @@ public class DiodeBackward extends DiodeForeward {
      * @param attr the elements attributes
      */
     public DiodeBackward(ElementAttributes attr) {
-        super(attr, DESCRIPTION);
+        super(attr, DESCRIPTION, PinDescription.PullResistor.pullUp);
     }
 
     @Override

File: src/test/java/de/neemann/digital/integration/TestExamples.java
Patch:
@@ -29,7 +29,7 @@ public class TestExamples extends TestCase {
     public void testDistExamples() throws Exception {
         File examples = new File(Resources.getRoot().getParentFile().getParentFile(), "/main/dig");
         assertEquals(111, new FileScanner(this::check).scan(examples));
-        assertEquals(71, testCasesInFiles);
+        assertEquals(72, testCasesInFiles);
     }
 
     /**
@@ -39,8 +39,8 @@ public void testDistExamples() throws Exception {
      */
     public void testTestExamples() throws Exception {
         File examples = new File(Resources.getRoot(), "/dig/test");
-        assertEquals(56, new FileScanner(this::check).scan(examples));
-        assertEquals(52, testCasesInFiles);
+        assertEquals(55, new FileScanner(this::check).scan(examples));
+        assertEquals(51, testCasesInFiles);
     }
 
 

File: src/main/java/de/neemann/digital/testing/parser/Parser.java
Patch:
@@ -87,6 +87,8 @@ private void parseValues() throws IOException, ParserException {
                         tok.consume();
                         expect(Tokenizer.Token.OPEN);
                         int count = (int) parseInt();
+                        if (count > 1 << 16)
+                            throw new ParserException(Lang.get("err_toManyTestEntries"));
                         expect(Tokenizer.Token.CLOSE);
                         parseForLine(count);
                     } else {

File: src/main/java/de/neemann/digital/draw/model/Net.java
Patch:
@@ -121,7 +121,8 @@ public void addAll(Collection<Pin> p) {
      */
     public void addNet(Net otherNet) {
         pins.addAll(otherNet.getPins());
-        wires.addAll(otherNet.getWires());
+        if (wires != null && otherNet.getWires() != null)
+            wires.addAll(otherNet.getWires());
         labelSet.addAll(otherNet.labelSet);
     }
 

File: src/main/java/de/neemann/digital/analyse/TruthTable.java
Patch:
@@ -412,7 +412,7 @@ public String getResultName(int result) {
     /**
      * Removes the given result column
      *
-     * @param i
+     * @param i the index of the result to remove
      */
     public void removeResult(int i) {
         results.remove(i);

File: src/main/java/de/neemann/digital/builder/ATF1502/ATF1502CuplExporter.java
Patch:
@@ -25,10 +25,11 @@ public ATF1502CuplExporter() {
      * Creates a new project name
      *
      * @param username user name
+     * @param devName  the type of the device
      * @param date     date
      */
-    public ATF1502CuplExporter(String username, Date date, String type) {
-        super(username, date, type, new PinMap()
+    public ATF1502CuplExporter(String username, Date date, String devName) {
+        super(username, date, devName, new PinMap()
                 .setAvailBidirectional(4, 5, 6, 8, 9, 11, 12, 14, 16, 17,
                         18, 19, 20, 21, 24, 25, 26, 27, 28,
                         29, 31, 33, 34, 36, 37, 38, 39, 40));

File: src/main/java/de/neemann/digital/builder/ATF1502/ATF1502TT2Exporter.java
Patch:
@@ -12,7 +12,7 @@ public class ATF1502TT2Exporter extends TT2Exporter {
     /**
      * Creates a new project name
      *
-     * @param projectName user name
+     * @param projectName project name
      */
     public ATF1502TT2Exporter(String projectName) {
         super(projectName);

File: src/main/java/de/neemann/digital/builder/ATF1502/ATF1504TT2Exporter.java
Patch:
@@ -9,6 +9,8 @@ public class ATF1504TT2Exporter extends ATF1502TT2Exporter {
 
     /**
      * Creates a new project name
+     *
+     * @param projectName project name
      */
     public ATF1504TT2Exporter(String projectName) {
         super(projectName);

File: src/main/java/de/neemann/digital/builder/tt2/TT2Exporter.java
Patch:
@@ -31,6 +31,8 @@ public class TT2Exporter implements ExpressionExporter<TT2Exporter> {
 
     /**
      * Creates a new instance
+     *
+     * @param projectName project name
      */
     public TT2Exporter(String projectName) {
         builder = new BuilderCollector() {

File: src/main/java/de/neemann/digital/core/Model.java
Patch:
@@ -307,6 +307,7 @@ public void removeObserver(ModelStateObserver observer) {
      * Returns the first observer of the given class.
      *
      * @param observerClass the observer class
+     * @param <T>           the type of the observer
      * @return the found observer or null if not present
      */
     public <T extends ModelStateObserver> T getObserver(Class<T> observerClass) {

File: src/main/java/de/neemann/digital/core/ObservableValues.java
Patch:
@@ -93,6 +93,8 @@ public ObservableValues(Collection<ObservableValue> items) {
      * Creates a new Instance
      *
      * @param items the items to store
+     * @param from  from index
+     * @param to    to index, exclusive
      */
     public ObservableValues(ObservableValues items, int from, int to) {
         super(items, from, to);

File: src/main/java/de/neemann/digital/core/element/Element.java
Patch:
@@ -41,6 +41,8 @@ public interface Element {
 
     /**
      * Is called after registerNodes is called on all Elements.
+     *
+     * @param model the model this element belongs to
      * @throws NodeException NodeException
      */
     default void init(Model model) throws NodeException {

File: src/main/java/de/neemann/digital/core/element/ImmutableList.java
Patch:
@@ -38,6 +38,7 @@ public ImmutableList(T... items) {
      * Creates a new instance
      *
      * @param items items
+     * @param <U>   the item type
      */
     public <U extends T> ImmutableList(ImmutableList<U> items) {
         this.items = items.items;

File: src/main/java/de/neemann/digital/core/switching/Switch.java
Patch:
@@ -41,7 +41,8 @@ public Switch(ElementAttributes attr) {
     /**
      * Creates a new instance
      *
-     * @param attr the elements attributes
+     * @param attr   the elements attributes
+     * @param closed true if switch is closed
      */
     public Switch(ElementAttributes attr, boolean closed) {
         bits = attr.getBits();

File: src/main/java/de/neemann/digital/draw/graphics/GraphicsImage.java
Patch:
@@ -21,10 +21,11 @@ public final class GraphicsImage extends GraphicSwing implements Closeable {
      * @param min    upper left corner
      * @param max    lower right corner
      * @param format the format to write
+     * @param scale  the scaling of the created image
      * @return the {@link Graphic} instance
      */
     public static GraphicsImage create(OutputStream out, Vector min, Vector max, String format, float scale) {
-        int thickness = Style.NORMAL.getThickness();
+        int thickness = Style.MAXLINETHICK;
         BufferedImage bi
                 = new BufferedImage(
                 Math.round((max.x - min.x + thickness * 2) * scale),

File: src/main/java/de/neemann/digital/draw/graphics/Vector.java
Patch:
@@ -42,7 +42,7 @@ public Vector(Vector pos) {
     /**
      * returns the minimum vector from the given vectors.
      *
-     * @param p
+     * @param p the vectors to evaluate
      * @return the minimum
      */
     public static Vector min(Vector... p) {
@@ -58,7 +58,7 @@ public static Vector min(Vector... p) {
     /**
      * returns the maximim vector from the given vectors.
      *
-     * @param p
+     * @param p the vectors to evaluate
      * @return the maximum
      */
     public static Vector max(Vector... p) {

File: src/main/java/de/neemann/digital/draw/library/CustomElement.java
Patch:
@@ -45,6 +45,7 @@ public CustomElement(Circuit circuit, ElementLibrary library, File name) {
      * Every time this method is called a new {@link ModelCreator} is created.
      *
      * @param subName name of the circuit, used to name unique elements
+     * @param depth   recursion depth, used to detect a circuit which contains itself
      * @return the {@link ModelCreator}
      * @throws PinException             PinException
      * @throws NodeException            NodeException

File: src/main/java/de/neemann/digital/draw/model/ModelCreator.java
Patch:
@@ -72,6 +72,7 @@ public ModelCreator(Circuit circuit, ElementLibrary library, boolean readAsCusto
      * @param fileName        only used for better messages in exceptions
      * @param netList         the NetList of the model. If known it is not necessary to create it.
      * @param subName         name of the circuit, used to name unique elements
+     * @param depth           recursion depth, used to detect a circuit which contains itself
      * @throws PinException             PinException
      * @throws NodeException            NodeException
      * @throws ElementNotFoundException ElementNotFoundException

File: src/main/java/de/neemann/digital/draw/shapes/TextShape.java
Patch:
@@ -23,6 +23,8 @@ public class TextShape implements Shape {
      * Create a new instance
      *
      * @param attr attributes
+     * @param inputs  the inputs
+     * @param outputs the outputs
      */
     public TextShape(ElementAttributes attr, PinDescriptions inputs, PinDescriptions outputs) {
         String text = attr.getLabel();

File: src/main/java/de/neemann/digital/gui/InsertHistory.java
Patch:
@@ -25,7 +25,8 @@ public class InsertHistory implements LibraryListener {
     /**
      * Creates a new instance
      *
-     * @param bar the toolbar to put the elements to
+     * @param bar     the toolbar to put the elements to
+     * @param library the library to use
      */
     public InsertHistory(JToolBar bar, ElementLibrary library) {
         this.bar = bar;

File: src/main/java/de/neemann/digital/gui/Main.java
Patch:
@@ -150,8 +150,9 @@ public Main(Component parent, File fileToOpen, ElementLibrary library) {
      * Creates a new instance.
      * Used to show a generated circuit.
      *
-     * @param parent  the parent component
-     * @param circuit circuit to show
+     * @param parent         the parent component
+     * @param parentsLibrary the library used by the parent window
+     * @param circuit        circuit to show
      */
     public Main(Component parent, ElementLibrary parentsLibrary, Circuit circuit) {
         this(parent, null, parentsLibrary, circuit);

File: src/main/java/de/neemann/digital/gui/components/CircuitComponent.java
Patch:
@@ -94,6 +94,7 @@ public class CircuitComponent extends JComponent implements Circuit.ChangedListe
     /**
      * Creates a new instance
      *
+     * @param parent       the parent window
      * @param library      the library used to edit the attributes of the elements
      * @param shapeFactory the shapeFactory used for copied elements
      */
@@ -331,7 +332,8 @@ public void setManualChangeObserver(Observer callOnManualChange) {
     /**
      * Sets the edit mode and resets the circuit
      *
-     * @param runMode true if running, false if editing
+     * @param runMode   true if running, false if editing
+     * @param modelSync used to access the running model
      */
     public void setModeAndReset(boolean runMode, Sync modelSync) {
         this.modelSync = modelSync;

File: src/main/java/de/neemann/digital/gui/components/ElementHelpDialog.java
Patch:
@@ -59,8 +59,9 @@ public ElementHelpDialog(Component parent, ElementTypeDescription elementType, E
     /**
      * Creates a new instance
      *
-     * @param parent  the parents dialog
-     * @param library the elements library
+     * @param parent       the parents dialog
+     * @param library      the elements library
+     * @param shapeFactory the shape factory used to create the PNGs
      * @throws PinException  PinException
      * @throws NodeException NodeException
      */

File: src/main/java/de/neemann/digital/gui/components/ProbeDialog.java
Patch:
@@ -33,7 +33,7 @@ public class ProbeDialog extends JDialog implements ModelStateObserver {
      * @param model     the model to run
      * @param type      the event type which fires a dialog repaint
      * @param ordering  the names list used to order the measurement values
-     * @param modelSync
+     * @param modelSync used to access the running model
      */
     public ProbeDialog(Frame owner, Model model, ModelEvent type, List<String> ordering, Sync modelSync) {
         super(owner, Lang.get("win_measures"), false);

File: src/main/java/de/neemann/digital/gui/components/SingleValueDialog.java
Patch:
@@ -210,8 +210,9 @@ private boolean showDialog() {
     /**
      * Edits a single value
      *
-     * @param pos   the position to pop up the dialog
-     * @param value the value to edit
+     * @param pos       the position to pop up the dialog
+     * @param value     the value to edit
+     * @param modelSync used to access the running model
      */
     public static void editValue(Point pos, ObservableValue value, Sync modelSync) {
         SingleValueDialog svd = new SingleValueDialog(pos, value);

File: src/main/java/de/neemann/digital/gui/components/WindowPosManager.java
Patch:
@@ -27,6 +27,7 @@ public WindowPosManager() {
      *
      * @param id     the id of the window
      * @param window the window itself
+     * @param <T>    the type of the window
      * @return the window for chained calls
      */
     public <T extends Window> T register(String id, T window) {

File: src/main/java/de/neemann/digital/gui/components/data/DataSetDialog.java
Patch:
@@ -39,6 +39,7 @@ public class DataSetDialog extends JDialog implements ModelStateObserver {
      * @param model     the model used to collect the data
      * @param microStep true     the event type which triggers a new DataSample
      * @param ordering  the ordering of the measurement values
+     * @param modelSync used to access the running model
      */
     public DataSetDialog(Frame owner, Model model, boolean microStep, List<String> ordering, Sync modelSync) {
         super(owner, createTitle(microStep), false);

File: src/main/java/de/neemann/digital/gui/components/expression/ExpressionDialog.java
Patch:
@@ -30,6 +30,7 @@ public class ExpressionDialog extends JDialog {
      * Creates a new instance
      *
      * @param parent       the parent
+     * @param library      the library to use
      * @param shapeFactory the shapeFactory used for new circuits
      */
     public ExpressionDialog(Main parent, ElementLibrary library, ShapeFactory shapeFactory) {

File: src/main/java/de/neemann/digital/gui/components/table/ExpressionCreator.java
Patch:
@@ -32,7 +32,7 @@ public class ExpressionCreator {
     /**
      * Creates a new instance
      *
-     * @param theTable  the table to use
+     * @param theTable the table to use
      */
     public ExpressionCreator(TruthTable theTable) {
         this.theTable = theTable;
@@ -41,6 +41,7 @@ public ExpressionCreator(TruthTable theTable) {
     /**
      * Creates the expressions
      *
+     * @param listener the listener to report the found expressions to
      * @throws ExpressionException ExpressionException
      * @throws FormatterException  FormatterException
      * @throws AnalyseException    AnalyseException

File: src/main/java/de/neemann/digital/gui/components/table/ShowStringDialog.java
Patch:
@@ -15,6 +15,7 @@ public class ShowStringDialog extends JDialog {
      * Creates a new instance
      *
      * @param parent the parent
+     * @param title  the dialog title
      * @param str    the text to show
      */
     public ShowStringDialog(JFrame parent, String title, String str) {
@@ -26,6 +27,7 @@ public ShowStringDialog(JFrame parent, String title, String str) {
      * Creates a new instance
      *
      * @param parent the parent
+     * @param title  the dialog title
      * @param str    the text to show
      */
     public ShowStringDialog(JDialog parent, String title, String str) {
@@ -36,6 +38,7 @@ public ShowStringDialog(JDialog parent, String title, String str) {
      * Creates a new instance
      *
      * @param parent the parent
+     * @param title  the dialog title
      * @param str    the text to show
      * @param html   is the string a html string?
      */

File: src/main/java/de/neemann/digital/gui/components/testing/TextLineNumber.java
Patch:
@@ -178,6 +178,8 @@ public float getDigitAlignment() {
      * <li>TextLineNumber.CENTER
      * <li>TextLineNumber.RIGHT (default)
      * </ul>
+     *
+     * @param digitAlignment alignment of the digits
      */
     public void setDigitAlignment(float digitAlignment) {
         this.digitAlignment =
@@ -288,6 +290,7 @@ private boolean isCurrentLine(int rowStartOffset) {
      * Get the line number to be drawn. The empty string will be returned
      * when a line of text has wrapped.
      *
+     * @param rowStartOffset offset of the line
      * @return line number or empty string
      */
     protected String getTextLineNumber(int rowStartOffset) {

File: src/main/java/de/neemann/gui/ClosingWindowListener.java
Patch:
@@ -38,6 +38,7 @@ public ClosingWindowListener(final JFrame parent, final ConfirmSave confirmSave)
      *
      * @param parent      the parent component of the confirm dialog
      * @param confirmSave the ConfirmSave interface
+     * @param doExit      if true the parent JFrame is disposed by this listener
      */
     public ClosingWindowListener(final JFrame parent, final ConfirmSave confirmSave, final boolean doExit) {
         this((Component) parent, new GUICloser() {

File: src/main/java/de/neemann/digital/gui/components/table/CheckResultListener.java
Patch:
@@ -56,11 +56,11 @@ private void check(ThreeStateValue threeStateValue, boolean calculate) throws Ex
                 return;
             case one:
                 if (!calculate)
-                    throw new ExpressionException("internal minimization error: found false, expected true");
+                    throw new ExpressionException(Lang.get("err_minimizationFailed"));
                 break;
             case zero:
                 if (calculate)
-                    throw new ExpressionException("internal minimization error: found true, expected false");
+                    throw new ExpressionException(Lang.get("err_minimizationFailed"));
                 break;
         }
     }

File: src/main/java/de/neemann/digital/gui/components/table/TableDialog.java
Patch:
@@ -507,7 +507,7 @@ private void createCircuit(ExpressionModifier... modifier) {
 
     private void createCircuit(boolean useJKff, ExpressionModifier... modifier) {
         try {
-            CircuitBuilder circuitBuilder = new CircuitBuilder(shapeFactory, useJKff);
+            CircuitBuilder circuitBuilder = new CircuitBuilder(shapeFactory, useJKff, model.getTable().getVars());
             new BuilderExpressionCreator(circuitBuilder, modifier).setUseJKOptimizer(useJKff).create(lastGeneratedExpressions);
             Circuit circuit = circuitBuilder.createCircuit();
             SwingUtilities.invokeLater(() -> new Main(null, library, circuit).setVisible(true));

File: src/main/java/de/neemann/digital/draw/library/ElementLibrary.java
Patch:
@@ -263,7 +263,7 @@ public ElementTypeDescription getElementType(String elementName) throws ElementN
             if (node != null)
                 return node.getDescription();
         } catch (IOException e) {
-            throw new ElementNotFoundException(Lang.get("msg_errorImportingModel"), e);
+            throw new ElementNotFoundException(Lang.get("msg_errorImportingModel_N0", elementName), e);
         }
 
         throw new ElementNotFoundException(Lang.get("err_element_N_notFound", elementName));
@@ -436,7 +436,7 @@ ElementTypeDescription importElement(File file) throws IOException {
             }
             return description;
         } catch (PinException e) {
-            throw new IOException(Lang.get("msg_errorImportingModel"), e);
+            throw new IOException(Lang.get("msg_errorImportingModel_N0", file), e);
         }
     }
 

File: src/main/java/de/neemann/digital/gui/InsertAction.java
Patch:
@@ -49,7 +49,7 @@ public void actionPerformed(ActionEvent e) {
                 node.getDescription();
                 setIcon(node.getIcon(shapeFactory));
             } catch (IOException ex) {
-                SwingUtilities.invokeLater(new ErrorMessage(Lang.get("msg_errorImportingModel")).addCause(ex));
+                SwingUtilities.invokeLater(new ErrorMessage(Lang.get("msg_errorImportingModel_N0", node.getName())).addCause(ex));
             }
         }
         insertHistory.add(this);
@@ -80,7 +80,7 @@ public void update(LibraryNode node) {
             final Icon icon = node.getIcon(shapeFactory);
             setIcon(icon);
         } catch (IOException ex) {
-            SwingUtilities.invokeLater(new ErrorMessage(Lang.get("msg_errorImportingModel")).addCause(ex));
+            SwingUtilities.invokeLater(new ErrorMessage(Lang.get("msg_errorImportingModel_N0", node.getName())).addCause(ex));
         }
     }
 

File: src/main/java/de/neemann/digital/gui/LibrarySelector.java
Patch:
@@ -73,7 +73,7 @@ public void actionPerformed(ActionEvent e) {
                         try {
                             library.updateEntries();
                         } catch (IOException ex) {
-                            SwingUtilities.invokeLater(new ErrorMessage(Lang.get("msg_errorImportingModel")).addCause(ex));
+                            SwingUtilities.invokeLater(new ErrorMessage(Lang.get("msg_errorUpdatingLibrary")).addCause(ex));
                         }
                     }
                 }.setToolTip(Lang.get("menu_update_tt")).createJMenuItem());

File: src/main/java/de/neemann/digital/gui/components/tree/SelectTree.java
Patch:
@@ -50,7 +50,7 @@ public void mouseClicked(MouseEvent mouseEvent) {
                             component.setPartToInsert(new VisualElement(d.getName()).setShapeFactory(shapeFactory));
                             insertHistory.add(new InsertAction(node, insertHistory, component, shapeFactory));
                         } catch (IOException e) {
-                            SwingUtilities.invokeLater(new ErrorMessage(Lang.get("msg_errorImportingModel")).addCause(e));
+                            SwingUtilities.invokeLater(new ErrorMessage(Lang.get("msg_errorImportingModel_N0", node.getName())).addCause(e));
                         }
                     }
                 }

File: src/main/java/de/neemann/digital/gui/components/table/ExpressionListenerStore.java
Patch:
@@ -54,15 +54,15 @@ public void replayTo(ExpressionListener listener) throws FormatterException, Exp
             throw new ExpressionException("ExpressionListenerStore not closed");
 
         for (Result r : results)
-            listener.resultFound(r.name, r.expression);
+            listener.resultFound(r.name, r.expression.copy());
         listener.close();
     }
 
     /**
      * @return the first found expression
      */
     public Expression getFirst() {
-        return results.get(0).expression;
+        return results.get(0).expression.copy();
     }
 
     private static final class Result {

File: src/main/java/de/neemann/digital/gui/components/CircuitComponent.java
Patch:
@@ -136,6 +136,7 @@ public void actionPerformed(ActionEvent e) {
                         Vector posVector = getPosVector(lastMousePos.x, lastMousePos.y);
                         ArrayList<Moveable> elements = CircuitTransferable.createList(data, shapeFactory, posVector);
                         if (elements != null) {
+                            removeHighLighted();
                             mouseInsertList.activate(elements, posVector);
                         }
                     }
@@ -1261,7 +1262,7 @@ public void delete() {
 
         @Override
         void clicked(MouseEvent e) {
-            if (elements != null) {
+            if (elements != null && e.getButton() == 1) {
                 for (Moveable m : elements) {
                     if (m instanceof Wire)
                         circuit.add((Wire) m);

File: src/main/java/de/neemann/digital/draw/library/ElementLibrary.java
Patch:
@@ -386,6 +386,7 @@ private String concat(String path, String name) {
      * Removes an element from the library to enforce a reload
      *
      * @param name the elements name
+     * @throws IOException IOException
      */
     public void invalidateElement(File name) throws IOException {
         LibraryNode n = map.get(name.getName());

File: src/main/java/de/neemann/digital/gui/Main.java
Patch:
@@ -324,7 +324,7 @@ public void actionPerformed(ActionEvent e) {
                 getContentPane().add(circuitComponent);
                 componentOnPane = circuitComponent;
             }
-            pack();
+            revalidate();
         });
 
         toolBar.add(viewHelp.createJButtonNoText());

File: src/main/java/de/neemann/digital/gui/Main.java
Patch:
@@ -222,7 +222,7 @@ private Main(Component parent, File fileToOpen, SavedListener savedListener, Ele
 
         toolBar.addSeparator();
 
-        insertHistory = new InsertHistory(toolBar);
+        insertHistory = new InsertHistory(toolBar, library);
         library.addListener(insertHistory);
         final LibrarySelector librarySelector = new LibrarySelector(library, shapeFactory);
         library.addListener(librarySelector);

File: src/main/java/de/neemann/digital/draw/library/LibraryListener.java
Patch:
@@ -8,6 +8,8 @@ public interface LibraryListener {
 
     /**
      * called if library changes
+     *
+     * @param node the node that has changed. If null the tree structure has changed
      */
-    void libraryChanged();
+    void libraryChanged(LibraryNode node);
 }

File: src/main/java/de/neemann/digital/gui/components/tree/SelectTreeDialog.java
Patch:
@@ -1,7 +1,6 @@
 package de.neemann.digital.gui.components.tree;
 
 import de.neemann.digital.draw.library.ElementLibrary;
-import de.neemann.digital.draw.library.LibraryListener;
 import de.neemann.digital.draw.shapes.ShapeFactory;
 import de.neemann.digital.gui.InsertHistory;
 import de.neemann.digital.gui.Main;
@@ -31,13 +30,14 @@ public SelectTreeDialog(Main main, ElementLibrary library, CircuitComponent comp
         super(main, Lang.get("menu_elements"), false);
         setDefaultCloseOperation(DISPOSE_ON_CLOSE);
 
-        JTree tree = new SelectTree(library, component, shapeFactory, insertHistory);
+        LibraryTreeModel model = new LibraryTreeModel(library);
+        JTree tree = new SelectTree(model, component, shapeFactory, insertHistory);
         getContentPane().add(new JScrollPane(tree));
 
         addWindowListener(new WindowAdapter() {
             @Override
             public void windowClosed(WindowEvent windowEvent) {
-                library.removeListener((LibraryListener) tree.getModel());
+                library.removeListener(model);
             }
         });
 

File: src/main/java/de/neemann/digital/gui/components/tree/SelectTree.java
Patch:
@@ -8,6 +8,8 @@
 import de.neemann.digital.gui.InsertAction;
 import de.neemann.digital.gui.InsertHistory;
 import de.neemann.digital.gui.components.CircuitComponent;
+import de.neemann.digital.lang.Lang;
+import de.neemann.gui.ErrorMessage;
 
 import javax.swing.*;
 import javax.swing.tree.DefaultTreeCellRenderer;
@@ -49,7 +51,7 @@ public void mouseClicked(MouseEvent mouseEvent) {
                             component.setPartToInsert(new VisualElement(d.getName()).setShapeFactory(shapeFactory));
                             insertHistory.add(new InsertAction(node, insertHistory, component, shapeFactory));
                         } catch (IOException e) {
-                            e.printStackTrace();
+                            SwingUtilities.invokeLater(new ErrorMessage(Lang.get("msg_errorImportingModel")).addCause(e));
                         }
                     }
                 }

File: src/main/java/de/neemann/digital/draw/library/ElementLibrary.java
Patch:
@@ -248,6 +248,9 @@ private void rescanFolder() throws IOException {
             } else customNode.removeAll();
 
             scanFolder(rootLibraryPath, customNode);
+        } else if (customNode != null) {
+            root.remove(customNode);
+            customNode = null;
         }
 
         populateNodeMap();

File: src/main/java/de/neemann/digital/core/element/ElementAttributes.java
Patch:
@@ -162,7 +162,7 @@ public String getCleanLabel() {
     public static String cleanLabel(String name) {
         if (name.length() > 2 && name.charAt(0) == '$' && name.charAt(name.length() - 1) == '$')
             name = name.substring(1, name.length() - 1);
-        return name.replace(' ', '_');
+        return name;
     }
 
 

File: src/main/java/de/neemann/digital/gui/Main.java
Patch:
@@ -245,7 +245,6 @@ public void actionPerformed(ActionEvent actionEvent) {
         setPreferredSize(new Dimension(1024, 768));
         pack();
         setLocationRelativeTo(parent);
-        ToolTipManager.sharedInstance().setDismissDelay(10000);
     }
 
     private void createViewMenu(JMenuBar menuBar, JToolBar toolBar) {
@@ -1090,6 +1089,7 @@ public void stop() {
      * @param args the arguments
      */
     public static void main(String[] args) {
+        ToolTipManager.sharedInstance().setDismissDelay(10000);
         URL.setURLStreamHandlerFactory(ElementHelpDialog.createURLStreamHandlerFactory());
         experimental = args.length == 1 && args[0].equals("experimental");
         FormatToExpression.setDefaultFormat(Settings.getInstance().get(Keys.SETTINGS_EXPRESSION_FORMAT));

File: src/main/java/de/neemann/digital/core/Signal.java
Patch:
@@ -17,7 +17,8 @@ public final class Signal implements Comparable<Signal> {
      * @param value the signals value
      */
     public Signal(String name, ObservableValue value) {
-        this.name = name.trim().replace(' ', '_');
+        if (name == null) this.name = null;
+        else this.name = name.trim().replace(' ', '_');
         this.value = value;
     }
 

File: src/main/java/de/neemann/digital/draw/graphics/GraphicSVG.java
Patch:
@@ -94,13 +94,16 @@ public void drawLine(Vector p1, Vector p2, Style style) {
     @Override
     public void drawPolygon(Polygon p, Style style) {
         try {
+            //modification of loop variable i is intended!
+            //CHECKSTYLE.OFF: ModifiedControlVariable
             w.write("<path d=\"M " + str(p.get(0)));
             for (int i = 1; i < p.size(); i++)
                 if (p.isBezierStart(i)) {
                     w.write(" C " + str(p.get(i)) + " " + str(p.get(i + 1)) + " " + str(p.get(i + 2)));
                     i += 2;
                 } else
                     w.write(" L " + str(p.get(i)));
+            //CHECKSTYLE.ON: ModifiedControlVariable
 
             if (p.isClosed())
                 w.write(" Z");

File: src/main/java/de/neemann/digital/draw/graphics/GraphicSwing.java
Patch:
@@ -51,6 +51,8 @@ public void drawLine(Vector p1, Vector p2, Style style) {
     public void drawPolygon(Polygon p, Style style) {
         applyStyle(style);
         Path2D path = new GeneralPath();
+        //modification of loop variable i is intended!
+        //CHECKSTYLE.OFF: ModifiedControlVariable
         for (int i = 0; i < p.size(); i++) {
             if (i == 0) {
                 path.moveTo(p.get(i).x, p.get(i).y);
@@ -62,6 +64,7 @@ public void drawPolygon(Polygon p, Style style) {
                     path.lineTo(p.get(i).x, p.get(i).y);
             }
         }
+        //CHECKSTYLE.ON: ModifiedControlVariable
 
         if (p.isClosed())
             path.closePath();

File: src/main/java/de/neemann/digital/draw/model/NetList.java
Patch:
@@ -46,6 +46,8 @@ public NetList(Circuit circuit) throws PinException {
         mergeLabels();
     }
 
+    //modification of loop variable j is intended!
+    //CHECKSTYLE.OFF: ModifiedControlVariable
     private void mergeLabels() {
         for (int i = 0; i < netList.size() - 1; i++)
             for (int j = i + 1; j < netList.size(); j++)
@@ -55,6 +57,7 @@ private void mergeLabels() {
                     j--;
                 }
     }
+    //CHECKSTYLE.ON: ModifiedControlVariable
 
     /**
      * Creates a copy of the given net list

File: src/main/java/de/neemann/digital/builder/tt2/TT2Exporter.java
Patch:
@@ -271,6 +271,8 @@ private void assignPinsAndNodes() throws IOException, PinMapException {
             line("#$ NODES " + nodeNum + node.toString());
     }
 
+    //StateSet can not be final because its overridden. Maybe checkstyle has a bug?
+    //CHECKSTYLE.OFF: FinalClass
     private static class StateSet implements Comparable<StateSet> {
         private final int[] state;
 
@@ -332,6 +334,7 @@ public String toString() {
             return sb.toString();
         }
     }
+    //CHECKSTYLE.ON: FinalClass
 
     private final class ProdInput extends StateSet {
         private ProdInput(int inputCount) {

File: src/main/java/de/neemann/digital/gui/components/CircuitComponent.java
Patch:
@@ -662,6 +662,8 @@ public void mouseDragged(MouseEvent e) {
 
     }
 
+    //MouseController can not be final because its overridden. Maybe checkstyle has a bug?
+    //CHECKSTYLE.OFF: FinalClass
     private class MouseController {
         private final Cursor mouseCursor;
 
@@ -706,6 +708,7 @@ public void rotate() {
         public void escapePressed() {
         }
     }
+    //CHECKSTYLE.ON: FinalClass
 
     private final class MouseControllerNormal extends MouseController {
         private Vector pos;

File: src/main/java/de/neemann/digital/gui/components/EditorFactory.java
Patch:
@@ -127,6 +127,7 @@ void setLabelAtTop(boolean labelAtTop) {
         }
     }
 
+    //Checkstyle flags redundant modifiers, which are not redundant. Maybe a bug in checkstyle?
     //CHECKSTYLE.OFF: RedundantModifier
     private final static class StringEditor extends LabelEditor<String> {
 

File: src/main/java/de/neemann/digital/core/Signal.java
Patch:
@@ -17,7 +17,7 @@ public final class Signal implements Comparable<Signal> {
      * @param value the signals value
      */
     public Signal(String name, ObservableValue value) {
-        this.name = name;
+        this.name = name.trim().replace(' ', '_');
         this.value = value;
     }
 

File: src/main/java/de/neemann/digital/core/element/ElementAttributes.java
Patch:
@@ -162,7 +162,7 @@ public String getCleanLabel() {
     public static String cleanLabel(String name) {
         if (name.length() > 2 && name.charAt(0) == '$' && name.charAt(name.length() - 1) == '$')
             name = name.substring(1, name.length() - 1);
-        return name;
+        return name.replace(' ', '_');
     }
 
 

File: src/main/java/de/neemann/digital/gui/components/EditorFactory.java
Patch:
@@ -122,7 +122,7 @@ public AttributeDialog getAttributeDialog() {
          *
          * @param labelAtTop if true the label is placed at the top of the editing component.
          */
-        public void setLabelAtTop(boolean labelAtTop) {
+        void setLabelAtTop(boolean labelAtTop) {
             this.labelAtTop = labelAtTop;
         }
     }
@@ -151,7 +151,7 @@ public JComponent getComponent(ElementAttributes attr) {
 
         @Override
         public String getValue() {
-            return text.getText();
+            return text.getText().trim();
         }
 
     }

File: src/main/java/de/neemann/digital/gui/components/table/TableDialog.java
Patch:
@@ -219,7 +219,7 @@ private void editColumnName(int columnIndex, Point pos) {
             attr.set(Keys.PIN, pins.get(name).toString());
         if (new AttributeDialog(this, pos, LIST, attr).showDialog()) {
             pins.remove(name);
-            final String newName = attr.get(Keys.LABEL);
+            final String newName = attr.get(Keys.LABEL).trim().replace(' ', '_');
             final String pinStr = attr.get(Keys.PIN).trim();
             if (pinStr.length() > 0) {
                 try {

File: src/main/java/de/neemann/digital/builder/BuilderInterface.java
Patch:
@@ -5,7 +5,7 @@
 /**
  * Interface used to create a circuit
  * There are two implementations: the {@link de.neemann.digital.builder.circuit.CircuitBuilder} creates a circuit and the
- * {@link CuplExporter} creates a CUPL file
+ * {@link de.neemann.digital.builder.Gal16v8.CuplExporter} creates a CUPL file
  * which contains the circuit.
  *
  * @param <T> concrete Builder Type

File: src/main/java/de/neemann/digital/builder/BuilderInterface.java
Patch:
@@ -1,7 +1,6 @@
 package de.neemann.digital.builder;
 
 import de.neemann.digital.analyse.expression.Expression;
-import de.neemann.digital.builder.Gal16v8.CuplExporter;
 
 /**
  * Interface used to create a circuit

File: src/main/java/de/neemann/digital/builder/ATF1502/ATF1502CuplExporter.java
Patch:
@@ -1,6 +1,6 @@
 package de.neemann.digital.builder.ATF1502;
 
-import de.neemann.digital.builder.Gal16v8.Gal16v8CuplExporter;
+import de.neemann.digital.builder.Gal16v8.CuplExporter;
 import de.neemann.digital.builder.PinMap;
 
 import java.io.IOException;
@@ -12,7 +12,7 @@
  *
  * @author hneemann
  */
-public class ATF1502CuplExporter extends Gal16v8CuplExporter {
+public class ATF1502CuplExporter extends CuplExporter {
 
     /**
      * Creates a new project name
@@ -33,6 +33,7 @@ public ATF1502CuplExporter(String username, Date date, String type) {
                         18, 19, 20, 21, 24, 25, 26, 27, 28,
                         29, 31, 33, 34, 36, 37, 38, 39, 40));
         setClockPin(43);
+        setCreateNodes(true);
     }
 
     @Override

File: src/main/java/de/neemann/digital/builder/BuilderInterface.java
Patch:
@@ -1,11 +1,12 @@
 package de.neemann.digital.builder;
 
 import de.neemann.digital.analyse.expression.Expression;
+import de.neemann.digital.builder.Gal16v8.CuplExporter;
 
 /**
  * Interface used to create a circuit
  * There are two implementations: the {@link de.neemann.digital.builder.circuit.CircuitBuilder} creates a circuit and the
- * {@link de.neemann.digital.builder.Gal16v8.Gal16v8CuplExporter} creates a CUPL file
+ * {@link CuplExporter} creates a CUPL file
  * which contains the circuit.
  *
  * @param <T> concrete Builder Type

File: src/main/java/de/neemann/digital/builder/Gal22v10/Gal22v10CuplExporter.java
Patch:
@@ -1,6 +1,6 @@
 package de.neemann.digital.builder.Gal22v10;
 
-import de.neemann.digital.builder.Gal16v8.Gal16v8CuplExporter;
+import de.neemann.digital.builder.Gal16v8.CuplExporter;
 import de.neemann.digital.builder.PinMap;
 
 import java.io.IOException;
@@ -12,7 +12,7 @@
  *
  * @author hneemann
  */
-public class Gal22v10CuplExporter extends Gal16v8CuplExporter {
+public class Gal22v10CuplExporter extends CuplExporter {
 
     /**
      * Creates a new project name

File: src/main/java/de/neemann/digital/gui/components/CircuitTransferable.java
Patch:
@@ -77,6 +77,9 @@ static ArrayList<Moveable> createList(Object data, ShapeFactory shapeFactory, Ve
         Vector max = null;
         try (Reader in = new StringReader(data.toString())) {
             ArrayList<Moveable> elements = (ArrayList<Moveable>) xStream.fromXML(in);
+            if (elements == null)
+                return null;
+
             for (Moveable m : elements)
                 if (m instanceof VisualElement) {
                     ((VisualElement) m).setShapeFactory(shapeFactory);

File: src/main/java/de/neemann/digital/builder/ATF1502/ATF1504TT2Exporter.java
Patch:
@@ -12,7 +12,7 @@ public class ATF1504TT2Exporter extends ATF1502TT2Exporter {
      */
     public ATF1504TT2Exporter() {
         super();
-        setDevice("f1502ispplcc44");
+        setDevice("f1504ispplcc44");
     }
 
 

File: src/main/java/de/neemann/digital/gui/ModelModifier.java
Patch:
@@ -1,7 +1,6 @@
 package de.neemann.digital.gui;
 
 import de.neemann.digital.core.Model;
-import de.neemann.digital.core.ModelEvent;
 import de.neemann.digital.core.NodeException;
 
 /**

File: src/test/java/de/neemann/digital/builder/ATF1502/ATF1502CuplExporterTest.java
Patch:
@@ -42,7 +42,7 @@ public void testCUPLExporter() throws Exception {
                 "Company  unknown ;\r\n" +
                 "Assembly None ;\r\n" +
                 "Location unknown ;\r\n" +
-                "Device   f1502plcc44 ;\r\n" +
+                "Device   f1502ispplcc44 ;\r\n" +
                 "\r\n" +
                 "ar = 'b'0 ;\r\n" +
                 "\r\n" +

File: src/test/java/de/neemann/digital/builder/tt2/TT2ExporterTest.java
Patch:
@@ -27,7 +27,7 @@ public void testCombinatorial() throws Exception {
                 "#$ TITLE  unknown\r\n" +
                 "#$ MODULE  unknown\r\n" +
                 "#$ JEDECFILE  unknown\r\n" +
-                "#$ DEVICE  f1502plcc44\r\n" +
+                "#$ DEVICE  f1502ispplcc44\r\n" +
                 "#$ PINS 6 A+:4 A1+:5 B+:6 B1+:8 Y+:20 X+:21\r\n" +
                 ".i 4\r\n" +
                 ".o 2\r\n" +
@@ -54,7 +54,7 @@ public void testSequential() throws Exception {
                 "#$ TITLE  unknown\r\n" +
                 "#$ MODULE  unknown\r\n" +
                 "#$ JEDECFILE  unknown\r\n" +
-                "#$ DEVICE  f1502plcc44\r\n" +
+                "#$ DEVICE  f1502ispplcc44\r\n" +
                 "#$ PINS 3 A+:4 CLK+:43 Yn+:5\r\n" +
                 ".i 3\r\n" +
                 ".o 3\r\n" +
@@ -82,7 +82,7 @@ public void testSequential2() throws Exception {
                 "#$ TITLE  unknown\r\n" +
                 "#$ MODULE  unknown\r\n" +
                 "#$ JEDECFILE  unknown\r\n" +
-                "#$ DEVICE  f1502plcc44\r\n" +
+                "#$ DEVICE  f1502ispplcc44\r\n" +
                 "#$ PINS 5 A+:4 B+:5 CLK+:43 Yn+:6 Xn+:8\r\n" +
                 ".i 5\r\n" +
                 ".o 6\r\n" +

File: src/main/java/de/neemann/digital/builder/ATF1502/CreateCHN.java
Patch:
@@ -14,7 +14,6 @@ public class CreateCHN implements ExpressionToFileExporter.PostProcess {
     @Override
     public File execute(File file) throws IOException {
         File chnFile = Main.checkSuffix(file, "chn");
-        System.out.println("create chn from " + file);
 
         try (Writer chn = new OutputStreamWriter(new FileOutputStream(chnFile), "UTF-8")) {
             chn.write("1 4 1 0 \r\n"

File: src/main/java/de/neemann/digital/core/element/Key.java
Patch:
@@ -132,8 +132,8 @@ public int getMax() {
     static final class KeyBits extends KeyInteger {
         private static final Integer[] VALUES = new Integer[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 32};
 
-        KeyBits(String key) {
-            super(key, 1);
+        KeyBits(String key, Integer def) {
+            super(key, def);
             setMin(1);
             setMax(64);
             setComboBoxValues(VALUES);

File: src/main/java/de/neemann/digital/analyse/ModelAnalyser.java
Patch:
@@ -23,7 +23,7 @@
  * @author hneemann
  */
 public class ModelAnalyser {
-    private static final int MAX_INPUTS_ALLOWED = 18;
+    private static final int MAX_INPUTS_ALLOWED = 12;
 
     private final Model model;
     private final ArrayList<Signal> inputs;

File: src/main/java/de/neemann/digital/analyse/ModelAnalyser.java
Patch:
@@ -23,6 +23,7 @@
  * @author hneemann
  */
 public class ModelAnalyser {
+    private static final int MAX_INPUTS_ALLOWED = 18;
 
     private final Model model;
     private final ArrayList<Signal> inputs;
@@ -75,8 +76,8 @@ public ModelAnalyser(Model model) throws AnalyseException {
 
         if (inputs.size() == 0)
             throw new AnalyseException(Lang.get("err_analyseNoInputs"));
-        if (inputs.size() > 12)
-            throw new AnalyseException(Lang.get("err_toManyInputs_N", 12));
+        if (inputs.size() > MAX_INPUTS_ALLOWED)
+            throw new AnalyseException(Lang.get("err_toManyInputs_max_N0_is_N1", MAX_INPUTS_ALLOWED, inputs.size()));
         if (outputs.size() == 0)
             throw new AnalyseException(Lang.get("err_analyseNoOutputs"));
         rows = 1 << inputs.size();

File: src/test/java/de/neemann/digital/integration/TestExamples.java
Patch:
@@ -29,7 +29,7 @@ public class TestExamples extends TestCase {
     public void testDistExamples() throws Exception {
         File examples = new File(Resources.getRoot().getParentFile().getParentFile(), "/main/dig");
         assertEquals(100, new FileScanner(this::check).scan(examples));
-        assertEquals(51, testCasesInFiles);
+        assertEquals(52, testCasesInFiles);
     }
 
     /**

File: src/main/java/de/neemann/digital/core/element/PinDescription.java
Patch:
@@ -9,9 +9,10 @@ public interface PinDescription {
 
     /**
      * The possible pull resistor configurations
+     * "both" is an error condition which can happen if nets are merged
      */
     enum PullResistor {
-        none, pullUp, pullDown
+        none, pullUp, pullDown, both
     }
 
     /**

File: src/main/java/de/neemann/digital/core/wiring/bus/BusModelStateObserver.java
Patch:
@@ -97,6 +97,7 @@ private void reconfigureNets() {
                         h1.addNet(h2);
                         for (CommonBusValue v : h2.getValues())
                             netMap.put(v, h1);
+                        createdHandlers.remove(h2);
                     }
                 }
             }

File: src/main/java/de/neemann/digital/core/wiring/bus/ConnectedBusHandler.java
Patch:
@@ -1,6 +1,5 @@
 package de.neemann.digital.core.wiring.bus;
 
-import de.neemann.digital.core.BurnException;
 import de.neemann.digital.core.ObservableValue;
 import de.neemann.digital.core.element.PinDescription;
 
@@ -43,8 +42,8 @@ public void addNet(CommonBusValue net) {
                 resistor = net.getResistor();
             } else {
                 if (!resistor.equals(net.getResistor())) {
-                    // ToDo different resistors!
-                    throw new BurnException(inputs);
+                    // set error condition
+                    resistor = PinDescription.PullResistor.both;
                 }
             }
         }

File: src/test/java/de/neemann/digital/integration/TestExamples.java
Patch:
@@ -28,7 +28,7 @@ public class TestExamples extends TestCase {
      */
     public void testDistExamples() throws Exception {
         File examples = new File(Resources.getRoot().getParentFile().getParentFile(), "/main/dig");
-        assertEquals(99, new FileScanner(this::check).scan(examples));
+        assertEquals(100, new FileScanner(this::check).scan(examples));
         assertEquals(51, testCasesInFiles);
     }
 

File: src/main/java/de/neemann/digital/gui/components/testing/TestResultModel.java
Patch:
@@ -1,5 +1,6 @@
 package de.neemann.digital.gui.components.testing;
 
+import de.neemann.digital.lang.Lang;
 import de.neemann.digital.testing.MatchedValue;
 import de.neemann.digital.testing.TestResult;
 
@@ -37,7 +38,7 @@ public int getColumnCount() {
     @Override
     public String getColumnName(int columnIndex) {
         if (columnIndex == 0)
-            return "No";
+            return Lang.get("number");
         else
             return testResult.getSignalName(columnIndex - 1);
     }

File: src/test/java/de/neemann/digital/integration/TestExamples.java
Patch:
@@ -40,7 +40,7 @@ public void testDistExamples() throws Exception {
     public void testTestExamples() throws Exception {
         File examples = new File(Resources.getRoot(), "/dig/test");
         assertEquals(42, new FileScanner(this::check).scan(examples));
-        assertEquals(33, testCasesInFiles);
+        assertEquals(35, testCasesInFiles);
     }
 
 

File: src/main/java/de/neemann/digital/core/wiring/bus/CommonBusValue.java
Patch:
@@ -31,6 +31,8 @@ public void hasChanged() {
      * @param handler the handler
      */
     public void setHandler(AbstractBusHandler handler) {
+        if (this.handler!=null)
+            this.handler.invalidate();
         this.handler = handler;
     }
 

File: src/main/java/de/neemann/digital/core/wiring/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Contains the wiering elements like clock, break, splitter and so on
+ * Contains the wiring elements like clock, break, splitter and so on
  *
  * @author hneemann
  */

File: src/test/java/de/neemann/digital/integration/TestExamples.java
Patch:
@@ -39,8 +39,8 @@ public void testDistExamples() throws Exception {
      */
     public void testTestExamples() throws Exception {
         File examples = new File(Resources.getRoot(), "/dig/test");
-        assertEquals(36, new FileScanner(this::check).scan(examples));
-        assertEquals(25, testCasesInFiles);
+        assertEquals(39, new FileScanner(this::check).scan(examples));
+        assertEquals(28, testCasesInFiles);
     }
 
 

File: src/main/java/de/neemann/digital/gui/components/CircuitComponent.java
Patch:
@@ -883,7 +883,6 @@ private void activate(Wire wire, Vector pos) {
             this.pos = raster(pos);
             deleteAction.setActive(true);
             removeHighLighted();
-            addHighLighted(wire);
             hasChanged();
         }
 

File: src/main/java/de/neemann/digital/gui/components/table/TableDialog.java
Patch:
@@ -694,7 +694,7 @@ BuilderExpressionCreator setUseJKOptimizer(boolean useJKOptimizer) {
         }
     }
 
-    private final class HTMLExpressionListener implements ExpressionListener {
+    private static final class HTMLExpressionListener implements ExpressionListener {
         private FormatToExpression htmlFormatter = new HTMLFormatter(FormatToExpression.getDefaultFormat());
         private final StringBuilder html;
         private int count;

File: src/main/java/de/neemann/digital/core/element/ElementTypeDescription.java
Patch:
@@ -60,8 +60,8 @@ public ElementTypeDescription(String name, Class<? extends Element> clazz, PinDe
      */
     public ElementTypeDescription(String name, ElementFactory elementFactory, PinDescription... inputPins) {
         this.name = name;
-        this.shortName = null;
         langKey = "elem_" + name;
+        this.shortName = Lang.getNull(langKey + "_short");
         this.elementFactory = elementFactory;
         this.inputPins = new PinDescriptions(inputPins).setLangKey(getPinLangKey());
         for (PinDescription p : inputPins)

File: src/main/java/de/neemann/digital/core/flipflops/FlipflopD.java
Patch:
@@ -25,8 +25,7 @@ public class FlipflopD extends Node implements Element {
             .addAttribute(Keys.BITS)
             .addAttribute(Keys.LABEL)
             .addAttribute(Keys.DEFAULT)
-            .addAttribute(Keys.VALUE_IS_PROBE)
-            .setShortName("D");
+            .addAttribute(Keys.VALUE_IS_PROBE);
 
     private final int bits;
     private final boolean isProbe;

File: src/main/java/de/neemann/digital/core/flipflops/FlipflopJK.java
Patch:
@@ -24,8 +24,7 @@ public class FlipflopJK extends Node implements Element {
             .addAttribute(Keys.ROTATE)
             .addAttribute(Keys.LABEL)
             .addAttribute(Keys.DEFAULT)
-            .addAttribute(Keys.VALUE_IS_PROBE)
-            .setShortName("JK");
+            .addAttribute(Keys.VALUE_IS_PROBE);
 
     private final Boolean isProbe;
     private final String label;

File: src/main/java/de/neemann/digital/core/flipflops/FlipflopRS.java
Patch:
@@ -23,8 +23,7 @@ public class FlipflopRS extends Node implements Element {
             = new ElementTypeDescription("RS_FF", FlipflopRS.class, input("S"), input("C"), input("R"))
             .addAttribute(Keys.ROTATE)
             .addAttribute(Keys.LABEL)
-            .addAttribute(Keys.VALUE_IS_PROBE)
-            .setShortName("RS");
+            .addAttribute(Keys.VALUE_IS_PROBE);
 
     private final boolean isProbe;
     private final String label;

File: src/main/java/de/neemann/digital/core/flipflops/FlipflopT.java
Patch:
@@ -23,8 +23,7 @@ public class FlipflopT extends Node implements Element {
             = new ElementTypeDescription("T_FF", FlipflopT.class, input("C"))
             .addAttribute(Keys.ROTATE)
             .addAttribute(Keys.LABEL)
-            .addAttribute(Keys.VALUE_IS_PROBE)
-            .setShortName("T");
+            .addAttribute(Keys.VALUE_IS_PROBE);
 
     private final boolean isProbe;
     private final String label;

File: src/main/java/de/neemann/digital/core/memory/LookUpTable.java
Patch:
@@ -32,8 +32,7 @@ public PinDescriptions getInputDescription(ElementAttributes elementAttributes)
             .addAttribute(Keys.ROTATE)
             .addAttribute(Keys.BITS)
             .addAttribute(Keys.INPUT_COUNT)
-            .addAttribute(Keys.DATA)
-            .setShortName("LUT");
+            .addAttribute(Keys.DATA);
 
     private final DataField data;
     private final ObservableValue output;

File: src/main/java/de/neemann/digital/core/memory/RAMDualPort.java
Patch:
@@ -27,8 +27,7 @@ public class RAMDualPort extends Node implements Element, RAMInterface {
             .addAttribute(Keys.ROTATE)
             .addAttribute(Keys.BITS)
             .addAttribute(Keys.ADDR_BITS)
-            .addAttribute(Keys.LABEL)
-            .setShortName("RAM");
+            .addAttribute(Keys.LABEL);
 
     private final DataField memory;
     private final ObservableValue output;

File: src/main/java/de/neemann/digital/core/memory/RAMSinglePort.java
Patch:
@@ -28,8 +28,7 @@ public class RAMSinglePort extends RAMDualPort {
             .addAttribute(Keys.ROTATE)
             .addAttribute(Keys.BITS)
             .addAttribute(Keys.ADDR_BITS)
-            .addAttribute(Keys.LABEL)
-            .setShortName("RAM");
+            .addAttribute(Keys.LABEL);
 
     /**
      * Creates a new instance

File: src/main/java/de/neemann/digital/core/memory/Register.java
Patch:
@@ -23,8 +23,7 @@ public class Register extends Node implements Element {
             .addAttribute(Keys.ROTATE)
             .addAttribute(Keys.BITS)
             .addAttribute(Keys.LABEL)
-            .addAttribute(Keys.VALUE_IS_PROBE)
-            .setShortName("Reg");
+            .addAttribute(Keys.VALUE_IS_PROBE);
 
     private final int bits;
     private final boolean isProbe;

File: src/main/java/de/neemann/digital/gui/components/terminal/Keyboard.java
Patch:
@@ -8,7 +8,6 @@
 import de.neemann.digital.core.element.ElementAttributes;
 import de.neemann.digital.core.element.ElementTypeDescription;
 import de.neemann.digital.core.element.Keys;
-import de.neemann.digital.lang.Lang;
 
 import javax.swing.*;
 
@@ -26,8 +25,7 @@ public class Keyboard extends Node implements Element {
             = new ElementTypeDescription(Keyboard.class,
             input("sel"))
             .addAttribute(Keys.ROTATE)
-            .addAttribute(Keys.LABEL)
-            .setShortName(Lang.get("elem_Keyboard"));
+            .addAttribute(Keys.LABEL);
 
     private static KeyboardDialog keyboardDialog;
 

File: src/test/java/de/neemann/digital/integration/TestExamples.java
Patch:
@@ -28,7 +28,7 @@ public class TestExamples extends TestCase {
      */
     public void testDistExamples() throws Exception {
         File examples = new File(Resources.getRoot().getParentFile().getParentFile(), "/main/dig");
-        assertEquals(91, new FileScanner(this::check).scan(examples));
+        assertEquals(92, new FileScanner(this::check).scan(examples));
         assertEquals(43, testCasesInFiles);
     }
 

File: src/test/java/de/neemann/digital/core/memory/CounterTest.java
Patch:
@@ -40,7 +40,7 @@ public void testCounter() throws Exception {
         }
         sc.check(0, 0, 255, 0);
         sc.check(1, 0, 0, 1);
-        sc.check(0, 0, 0, 0);
+        sc.check(0, 0, 0, 1);
         sc.check(1, 0, 1, 0);
     }
 

File: src/main/java/de/neemann/digital/core/memory/DataFieldConverter.java
Patch:
@@ -51,7 +51,7 @@ public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext un
         if (reader.getAttribute("size") == null) {
             // old type
             reader.moveDown();
-            DataField df = new DataField(Integer.valueOf(reader.getValue()));
+            DataField df = new DataField(Integer.parseInt(reader.getValue()));
             reader.moveUp();
             int i = 0;
             while (reader.hasMoreChildren()) {
@@ -68,7 +68,7 @@ public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext un
             StringTokenizer st = new StringTokenizer(reader.getValue(), ",");
             int i = 0;
             while (st.hasMoreTokens()) {
-                df.setData(i, Long.parseLong(st.nextToken().trim(),16));
+                df.setData(i, Long.parseLong(st.nextToken().trim(), 16));
                 i++;
             }
             return df;

File: src/main/java/de/neemann/digital/gui/Main.java
Patch:
@@ -1068,6 +1068,7 @@ public void debug() throws RemoteException {
     public void start() throws RemoteException {
         setDebug(false);
         SwingUtilities.invokeLater(() -> {
+            windowPosManager.closeAll();
             runModelState.enter(true);
             circuitComponent.hasChanged();
         });

File: src/main/java/de/neemann/digital/gui/components/CircuitComponent.java
Patch:
@@ -31,14 +31,12 @@
 import java.awt.*;
 import java.awt.datatransfer.Clipboard;
 import java.awt.datatransfer.DataFlavor;
-import java.awt.datatransfer.UnsupportedFlavorException;
 import java.awt.event.*;
 import java.awt.geom.AffineTransform;
 import java.awt.geom.NoninvertibleTransformException;
 import java.awt.geom.Point2D;
 import java.awt.image.BufferedImage;
 import java.io.File;
-import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.HashSet;
@@ -140,8 +138,9 @@ public void actionPerformed(ActionEvent e) {
                             mouseInsertList.activate(elements, posVector);
                         }
                     }
-                } catch (UnsupportedFlavorException | IOException e1) {
+                } catch (Exception e1) {
                     e1.printStackTrace();
+                    SwingUtilities.invokeLater(new ErrorMessage(Lang.get("msg_clipboardContainsNoImportableData")).setComponent(CircuitComponent.this));
                 }
             }
         };

File: src/main/java/de/neemann/digital/testing/TestData.java
Patch:
@@ -1,6 +1,5 @@
 package de.neemann.digital.testing;
 
-import de.neemann.digital.testing.parser.Context;
 import de.neemann.digital.testing.parser.Parser;
 import de.neemann.digital.testing.parser.ParserException;
 

File: src/main/java/de/neemann/digital/gui/components/testing/TestDataDialog.java
Patch:
@@ -5,7 +5,6 @@
 import de.neemann.digital.gui.components.CircuitComponent;
 import de.neemann.digital.gui.components.table.ShowStringDialog;
 import de.neemann.digital.lang.Lang;
-import de.neemann.digital.testing.TestingDataException;
 import de.neemann.digital.testing.TestData;
 import de.neemann.digital.testing.parser.ParserException;
 import de.neemann.gui.ErrorMessage;

File: src/main/java/de/neemann/digital/gui/components/table/ExpressionCreator.java
Patch:
@@ -53,6 +53,7 @@ public void create(ExpressionListener listener) throws ExpressionException, Form
                 listener.resultFound(theTable.getResultName(table), e);
             }
         }
+        listener.close();
     }
 
 }

File: src/test/java/de/neemann/digital/integration/TestExamples.java
Patch:
@@ -37,8 +37,8 @@ public void testDistExamples() throws Exception {
      */
     public void testTestExamples() throws Exception {
         File examples = new File(Resources.getRoot(), "/dig/test");
-        assertEquals(26, new FileScanner(this::check).scan(examples));
-        assertEquals(18,testCasesInFiles);
+        assertEquals(27, new FileScanner(this::check).scan(examples));
+        assertEquals(19,testCasesInFiles);
     }
 
 

File: src/main/java/de/neemann/digital/core/ObservableValue.java
Patch:
@@ -296,9 +296,10 @@ public ObservableValues asList() {
      * given descriptions language key.
      *
      * @param description the {@link ElementTypeDescription}
+     * @return this for chained calls
      */
     public ObservableValue setPinDescription(ElementTypeDescription description) {
-        setDescription(Lang.get(description.getPinLangKey()+name));
+        setDescription(Lang.get(description.getPinLangKey() + name));
         return this;
     }
 }

File: src/main/java/de/neemann/digital/core/element/ElementTypeDescription.java
Patch:
@@ -15,7 +15,7 @@
  * @author hneemann
  */
 public class ElementTypeDescription {
-    public static final String PINSEPARATOR = "_pin_";
+    private static final String PINSEPARATOR = "_pin_";
     private final String name;
     private final String langKey;
     private String shortName;

File: src/main/java/de/neemann/digital/core/NodeException.java
Patch:
@@ -2,6 +2,7 @@
 
 import de.neemann.digital.core.element.ImmutableList;
 
+import java.io.File;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.HashSet;
@@ -86,7 +87,7 @@ public String getMessage() {
         }
 
         if (nodes != null && nodes.size()>0) {
-            HashSet<String> origins = new HashSet<>();
+            HashSet<File> origins = new HashSet<>();
             for (Node node : nodes) {
                 if (node!=null && node.getOrigin()!=null && node.getOrigin().length()>0)
                     origins.add(node.getOrigin());

File: src/main/java/de/neemann/digital/draw/model/ModelCreator.java
Patch:
@@ -18,6 +18,7 @@
 import de.neemann.digital.draw.shapes.Drawable;
 import de.neemann.digital.lang.Lang;
 
+import java.io.File;
 import java.util.*;
 
 /**
@@ -59,7 +60,7 @@ public ModelCreator(Circuit circuit, ElementLibrary library) throws PinException
      * @throws ElementNotFoundException ElementNotFoundException
      */
     public ModelCreator(Circuit circuit, ElementLibrary library, boolean readAsCustom) throws PinException, NodeException, ElementNotFoundException {
-        this(circuit, library, readAsCustom, "", new NetList(circuit), "");
+        this(circuit, library, readAsCustom, null, new NetList(circuit), "");
     }
 
     /**
@@ -75,7 +76,7 @@ public ModelCreator(Circuit circuit, ElementLibrary library, boolean readAsCusto
      * @throws NodeException            NodeException
      * @throws ElementNotFoundException ElementNotFoundException
      */
-    public ModelCreator(Circuit circuit, ElementLibrary library, boolean isNestedCircuit, String fileName, NetList netList, String subName) throws PinException, NodeException, ElementNotFoundException {
+    public ModelCreator(Circuit circuit, ElementLibrary library, boolean isNestedCircuit, File fileName, NetList netList, String subName) throws PinException, NodeException, ElementNotFoundException {
         this.circuit = circuit;
         this.netList = netList;
         entries = new ArrayList<>();

File: src/main/java/de/neemann/digital/gui/LibrarySelector.java
Patch:
@@ -188,7 +188,7 @@ private Imported importElement(File file) throws IOException {
             Circuit circuit = Circuit.loadCircuit(file, shapeFactory);
             ElementTypeDescriptionCustom description =
                     new ElementTypeDescriptionCustom(file,
-                            attributes -> new CustomElement(circuit, library, file.getName()),
+                            attributes -> new CustomElement(circuit, library, file),
                             circuit.getAttributes(), circuit.getInputNames());
             description.setShortName(createShortName(file));
             library.addDescription(description, file);

File: src/main/java/de/neemann/digital/gui/Main.java
Patch:
@@ -281,7 +281,7 @@ public void actionPerformed(ActionEvent e) {
                 try {
                     LibrarySelector.ElementTypeDescriptionCustom description =
                             new LibrarySelector.ElementTypeDescriptionCustom(file,
-                                    attributes -> new CustomElement(circuit, library, name),
+                                    attributes -> new CustomElement(circuit, library, filename),
                                     circuit.getAttributes(), circuit.getInputNames());
                     description.setShortName(name);
                     description.setDescription(circuit.getAttributes().get(Keys.DESCRIPTION));

File: src/test/java/de/neemann/digital/integration/TestExamples.java
Patch:
@@ -37,8 +37,8 @@ public void testDistExamples() throws Exception {
      */
     public void testTestExamples() throws Exception {
         File examples = new File(Resources.getRoot(), "/dig/test");
-        assertEquals(15, new FileScanner(this::check).scan(examples));
-        assertEquals(13,testCasesInFiles);
+        assertEquals(22, new FileScanner(this::check).scan(examples));
+        assertEquals(17,testCasesInFiles);
     }
 
 

File: src/test/java/de/neemann/digital/core/wiring/SplitterHighZ.java
Patch:
@@ -29,7 +29,7 @@ public void testHighZError() throws NodeException {
         try {
             splitter.setInputs(ovs(a, b));
             fail("splitter high z input not detected!");
-        } catch (BitsException e) {
+        } catch (NodeException e) {
             assertTrue(true);
         }
     }
@@ -44,7 +44,7 @@ public void testHighZNotEnabled() throws NodeException {
         try {
             splitter.setInputs(ovs(a));
             fail("splitter high z input not detected!");
-        } catch (BitsException e) {
+        } catch (NodeException e) {
             assertTrue(true);
         }
     }

File: src/main/java/de/neemann/digital/core/wiring/Splitter.java
Patch:
@@ -75,11 +75,11 @@ public void setInputs(ObservableValues inputs) throws NodeException {
 
         if (highZIn) {
             if (inputs.size() != 1)
-                throw new BitsException(Lang.get("err_splitterAllowsOnlyOneHighZInput"), null, inputs);
+                throw new NodeException(Lang.get("err_splitterAllowsOnlyOneHighZInput"), null, inputs);
         } else {
             for (int i = 0; i < inputs.size(); i++) {
                 if (inputs.get(i).supportsHighZ())
-                    throw new BitsException(Lang.get("err_splitterDoesNotSupportHighZInputs"), null, inputs);
+                    throw new NodeException(Lang.get("err_splitterDoesNotSupportHighZInputs"), null, inputs);
             }
         }
 

File: src/main/java/de/neemann/digital/draw/model/Net.java
Patch:
@@ -2,6 +2,7 @@
 
 import de.neemann.digital.core.Model;
 import de.neemann.digital.core.ObservableValue;
+import de.neemann.digital.core.element.PinDescription;
 import de.neemann.digital.core.wiring.DataBus;
 import de.neemann.digital.draw.elements.Pin;
 import de.neemann.digital.draw.elements.PinException;
@@ -122,7 +123,7 @@ public void addAll(Collection<Pin> p) {
      * <p>
      * At the end all wires get a reference to the {@link ObservableValue} the represent
      *
-     * @param m the model is needed to create the {@link DataBus}
+     * @param m           the model is needed to create the {@link DataBus}
      * @param attachWires if true, the values are attached to the wires
      * @throws PinException PinException
      */
@@ -140,7 +141,7 @@ public void interconnect(Model m, boolean attachWires) throws PinException {
             throw new PinException(Lang.get("err_onOutConnectedToWire", this.toString()), this);
 
         ObservableValue value = null;
-        if (outputs.size() == 1) {
+        if (outputs.size() == 1 && outputs.get(0).getPullResistor() == PinDescription.PullResistor.none) {
             value = outputs.get(0).getValue();
         } else {
             value = new DataBus(this, m, outputs).getReadableOutput();

File: src/main/java/de/neemann/digital/core/wiring/Splitter.java
Patch:
@@ -68,6 +68,8 @@ public void setInputs(ObservableValues inputs) throws NodeException {
             Port inPort = inPorts.getPort(i);
             if (inPort.getBits() != inputs.get(i).getBits())
                 throw new BitsException(Lang.get("err_splitterBitsMismatch"), null, inputs);
+            if (inputs.get(i).supportsHighZ())
+                throw new BitsException(Lang.get("err_splitterDoesNotSupportHighZInputs"), null, inputs);
         }
 
         for (Port out : outPorts)

File: src/test/java/de/neemann/digital/integration/TestExamples.java
Patch:
@@ -37,7 +37,7 @@ public void testDistExamples() throws Exception {
      */
     public void testTestExamples() throws Exception {
         File examples = new File(Resources.getRoot(), "/dig/test");
-        assertEquals(12, new FileScanner(this::check).scan(examples));
+        assertEquals(13, new FileScanner(this::check).scan(examples));
         assertEquals(12,testCasesInFiles);
     }
 

File: src/main/java/de/neemann/digital/builder/PinMap.java
Patch:
@@ -6,9 +6,6 @@
 import de.neemann.digital.core.Signal;
 import de.neemann.digital.lang.Lang;
 
-import java.io.BufferedReader;
-import java.io.IOException;
-import java.io.StringReader;
 import java.util.*;
 
 /**

File: src/main/java/de/neemann/digital/core/element/ElementTypeDescription.java
Patch:
@@ -1,7 +1,6 @@
 package de.neemann.digital.core.element;
 
 import de.neemann.digital.core.NodeException;
-import de.neemann.digital.draw.elements.Pin;
 import de.neemann.digital.draw.elements.PinException;
 import de.neemann.digital.lang.Lang;
 

File: src/main/java/de/neemann/digital/core/io/Out.java
Patch:
@@ -5,7 +5,6 @@
 import de.neemann.digital.core.element.ElementAttributes;
 import de.neemann.digital.core.element.ElementTypeDescription;
 import de.neemann.digital.core.element.Keys;
-import de.neemann.digital.lang.Lang;
 
 import static de.neemann.digital.core.element.PinInfo.input;
 

File: src/main/java/de/neemann/digital/core/wiring/Demultiplexer.java
Patch:
@@ -8,7 +8,6 @@
 import de.neemann.digital.core.element.ElementAttributes;
 import de.neemann.digital.core.element.ElementTypeDescription;
 import de.neemann.digital.core.element.Keys;
-import de.neemann.digital.lang.Lang;
 
 import java.util.ArrayList;
 

File: src/test/java/de/neemann/digital/integration/TestExport.java
Patch:
@@ -8,7 +8,6 @@
 import junit.framework.TestCase;
 
 import java.io.ByteArrayOutputStream;
-import java.io.File;
 import java.io.IOException;
 
 /**

File: src/test/java/de/neemann/digital/integration/TestRunToBreak.java
Patch:
@@ -1,7 +1,6 @@
 package de.neemann.digital.integration;
 
 import de.neemann.digital.core.NodeException;
-import de.neemann.digital.core.memory.RAMSinglePort;
 import de.neemann.digital.core.memory.Register;
 import de.neemann.digital.draw.elements.PinException;
 import de.neemann.digital.draw.library.ElementNotFoundException;

File: src/test/java/de/neemann/gui/StringUtilsTest.java
Patch:
@@ -1,9 +1,6 @@
 package de.neemann.gui;
 
 import junit.framework.TestCase;
-import org.junit.Test;
-
-import static org.junit.Assert.*;
 
 /**
  * Created by hneemann on 29.10.16.

File: src/main/java/de/neemann/digital/core/wiring/Demultiplexer.java
Patch:
@@ -36,9 +36,7 @@ public class Demultiplexer extends Node implements Element {
     /**
      * The Demultiplexer description
      */
-    public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Demultiplexer.class,
-            input("sel", Lang.get("elem_Demultiplexer_pin_sel")),
-            input("in"))
+    public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Demultiplexer.class, input("sel"), input("in"))
             .addAttribute(Keys.ROTATE)
             .addAttribute(Keys.BITS)
             .addAttribute(Keys.SELECTOR_BITS)

File: src/main/java/de/neemann/digital/core/io/In.java
Patch:
@@ -24,7 +24,7 @@ public String getDescription(ElementAttributes elementAttributes) {
             if (d.length()>0)
                 return d;
             else
-                return Lang.get("elem_In");
+                return super.getDescription(elementAttributes);
         }
     }
             .addAttribute(Keys.ROTATE)

File: src/main/java/de/neemann/digital/core/io/Out.java
Patch:
@@ -27,7 +27,7 @@ public String getDescription(ElementAttributes elementAttributes) {
             if (d.length() > 0)
                 return d;
             else
-                return Lang.get("elem_Out");
+                return super.getDescription(elementAttributes);
         }
     }
             .addAttribute(Keys.ROTATE)

File: src/main/java/de/neemann/digital/gui/Main.java
Patch:
@@ -279,11 +279,11 @@ public void actionPerformed(ActionEvent e) {
                 if (file == null)
                     file = new File(name);
                 try {
-                    ElementTypeDescription description =
+                    LibrarySelector.ElementTypeDescriptionCustom description =
                             new LibrarySelector.ElementTypeDescriptionCustom(file,
                                     attributes -> new CustomElement(circuit, library, name),
-                                    circuit.getAttributes(), circuit.getInputNames())
-                                    .setShortName(name);
+                                    circuit.getAttributes(), circuit.getInputNames());
+                    description.setShortName(name);
                     description.setDescription(circuit.getAttributes().get(Keys.DESCRIPTION));
                     new ElementHelpDialog(Main.this, description, circuit.getAttributes()).setVisible(true);
                 } catch (PinException | NodeException e1) {

File: src/main/java/de/neemann/digital/core/memory/LookUpTable.java
Patch:
@@ -24,7 +24,7 @@ public PinDescriptions getInputDescription(ElementAttributes elementAttributes)
             int size = elementAttributes.get(Keys.INPUT_COUNT);
             PinDescription[] names = new PinDescription[size];
             for (int i = 0; i < size; i++)
-                names[i] = input("in_" + i);
+                names[i] = input(Integer.toString(i));
             return new PinDescriptions(names);
         }
     }

File: src/main/java/de/neemann/digital/core/element/Element.java
Patch:
@@ -3,6 +3,7 @@
 import de.neemann.digital.core.Model;
 import de.neemann.digital.core.NodeException;
 import de.neemann.digital.core.ObservableValues;
+import de.neemann.digital.draw.elements.PinException;
 
 /**
  * A concrete element used for the simulation
@@ -26,8 +27,9 @@ public interface Element {
      * by calling <code>setInputs()</code>
      *
      * @return the list of outputs which are set by this element
+     * @throws PinException PinException
      */
-    ObservableValues getOutputs();
+    ObservableValues getOutputs() throws PinException;
 
     /**
      * The element has to register its nodes to the model.

File: src/main/java/de/neemann/digital/core/element/ElementTypeDescription.java
Patch:
@@ -1,6 +1,7 @@
 package de.neemann.digital.core.element;
 
 import de.neemann.digital.core.NodeException;
+import de.neemann.digital.draw.elements.PinException;
 import de.neemann.digital.lang.Lang;
 
 import java.lang.reflect.Constructor;
@@ -184,8 +185,9 @@ public PinDescriptions getInputDescription(ElementAttributes elementAttributes)
      *
      * @param elementAttributes the elements attributs
      * @return the list of input descriptions
+     * @throws PinException PinException
      */
-    public PinDescriptions getOutputDescriptions(ElementAttributes elementAttributes) {
+    public PinDescriptions getOutputDescriptions(ElementAttributes elementAttributes) throws PinException {
         return new PinDescriptions(elementFactory.create(elementAttributes).getOutputs());
     }
 

File: src/main/java/de/neemann/digital/draw/shapes/ShapeFactory.java
Patch:
@@ -11,6 +11,7 @@
 import de.neemann.digital.core.memory.RAMSinglePort;
 import de.neemann.digital.core.pld.*;
 import de.neemann.digital.core.wiring.*;
+import de.neemann.digital.draw.elements.PinException;
 import de.neemann.digital.draw.elements.Tunnel;
 import de.neemann.digital.draw.library.ElementLibrary;
 import de.neemann.digital.draw.shapes.ieee.IEEEAndShape;
@@ -157,7 +158,7 @@ public Shape getShape(String elementName, ElementAttributes elementAttributes) {
     }
 
     private interface Creator {
-        Shape create(ElementAttributes attributes, PinDescriptions inputs, PinDescriptions outputs) throws NodeException;
+        Shape create(ElementAttributes attributes, PinDescriptions inputs, PinDescriptions outputs) throws NodeException, PinException;
     }
 
 

File: src/test/java/de/neemann/digital/TestExecuter.java
Patch:
@@ -118,7 +118,7 @@ public TestExecuter setUp(ModelCreator modelCreator) {
         return this;
     }
 
-    public TestExecuter setOutputsOf(Element element) {
+    public TestExecuter setOutputsOf(Element element) throws PinException {
         setOutputs(element.getOutputs());
         return this;
     }

File: src/main/java/de/neemann/digital/core/pld/Diode.java
Patch:
@@ -6,8 +6,6 @@
 import de.neemann.digital.core.element.ElementTypeDescription;
 import de.neemann.digital.core.element.Keys;
 
-import static de.neemann.digital.core.element.PinInfo.input;
-
 /**
  * A diode needed to create wired elements
  * Used to build a wired OR or AND.

File: src/main/java/de/neemann/digital/core/element/Keys.java
Patch:
@@ -70,13 +70,13 @@ private Keys() {
      * The input splitting of a splitter
      */
     public static final Key<String> INPUT_SPLIT
-            = new Key<>("Input Splitting", "8,8");
+            = new Key<>("Input Splitting", "4,4");
 
     /**
      * The output splitting of a splitter
      */
     public static final Key<String> OUTPUT_SPLIT
-            = new Key<>("Output Splitting", "16");
+            = new Key<>("Output Splitting", "8");
 
     /**
      * The real time frequency of the clock

File: src/main/java/de/neemann/digital/core/element/Keys.java
Patch:
@@ -70,13 +70,13 @@ private Keys() {
      * The input splitting of a splitter
      */
     public static final Key<String> INPUT_SPLIT
-            = new Key<>("Input Splitting", "");
+            = new Key<>("Input Splitting", "8,8");
 
     /**
      * The output splitting of a splitter
      */
     public static final Key<String> OUTPUT_SPLIT
-            = new Key<>("Output Splitting", "");
+            = new Key<>("Output Splitting", "16");
 
     /**
      * The real time frequency of the clock

File: src/main/java/de/neemann/digital/draw/library/ElementLibrary.java
Patch:
@@ -154,7 +154,7 @@ public ElementTypeDescription getElementType(String elementName) throws ElementN
             try {
                 description = elementNotFoundNotification.elementNotFound(file);
             } catch (IOException e) {
-                throw new ElementNotFoundException(Lang.get("err_element_N_notFound", elementName));
+                throw new ElementNotFoundException(Lang.get("msg_errorImportingModel", elementName));
             }
 
         if (description != null)

File: src/main/java/de/neemann/digital/gui/LibrarySelector.java
Patch:
@@ -87,7 +87,7 @@ public void actionPerformed(ActionEvent e) {
                             insertHistory.add(imp.insertAction);
                         }
                     } catch (IOException e1) {
-                        new ErrorMessage().addCause(e1).show();
+                        new ErrorMessage(Lang.get("msg_errorImportingModel")).addCause(e1).show();
                     }
                 }
             }

File: src/main/java/de/neemann/digital/draw/library/ElementNotFoundNotification.java
Patch:
@@ -3,6 +3,7 @@
 import de.neemann.digital.core.element.ElementTypeDescription;
 
 import java.io.File;
+import java.io.IOException;
 
 /**
  * Interface to request unknown {@link ElementTypeDescription}s
@@ -15,6 +16,7 @@ public interface ElementNotFoundNotification {
      *
      * @param file the elements file name
      * @return the element or null if not loadable
+     * @throws IOException IOException
      */
-    ElementTypeDescription elementNotFound(File file);
+    ElementTypeDescription elementNotFound(File file) throws IOException;
 }

File: src/main/java/de/neemann/digital/gui/Main.java
Patch:
@@ -20,6 +20,7 @@
 import de.neemann.digital.draw.elements.VisualElement;
 import de.neemann.digital.draw.graphics.*;
 import de.neemann.digital.draw.library.ElementLibrary;
+import de.neemann.digital.draw.library.ElementNotFoundException;
 import de.neemann.digital.draw.model.ModelCreator;
 import de.neemann.digital.draw.model.RealTimeClock;
 import de.neemann.digital.draw.shapes.ShapeFactory;
@@ -591,7 +592,7 @@ public void actionPerformed(ActionEvent e) {
                             .setPinMap(new PinMap().addModel(model))
                             .setVisible(true);
                     elementState.enter();
-                } catch (PinException | PinMapException | NodeException | AnalyseException e1) {
+                } catch (PinException | PinMapException | NodeException | AnalyseException | ElementNotFoundException e1) {
                     showErrorAndStopModel(Lang.get("msg_annalyseErr"), e1);
                 }
             }
@@ -751,7 +752,7 @@ private boolean createAndStartModel(boolean globalRunClock, ModelEvent updateEve
             model.init();
 
             return true;
-        } catch (NodeException | PinException | RuntimeException e) {
+        } catch (NodeException | PinException | RuntimeException| ElementNotFoundException e) {
             showErrorAndStopModel(Lang.get("msg_errorCreatingModel"), e);
         }
         return false;

File: src/test/java/de/neemann/digital/TestExecuter.java
Patch:
@@ -8,6 +8,7 @@
 import de.neemann.digital.draw.elements.Circuit;
 import de.neemann.digital.draw.elements.PinException;
 import de.neemann.digital.draw.library.ElementLibrary;
+import de.neemann.digital.draw.library.ElementNotFoundException;
 import de.neemann.digital.draw.model.ModelCreator;
 import de.neemann.digital.draw.model.ModelEntry;
 import de.neemann.digital.draw.shapes.ShapeFactory;
@@ -33,7 +34,7 @@ public class TestExecuter {
     private ArrayList<ObservableValue> inputs;
     private ArrayList<ObservableValue> outputs;
 
-    public static TestExecuter createFromFile(String name, ElementLibrary library) throws IOException, NodeException, PinException {
+    public static TestExecuter createFromFile(String name, ElementLibrary library) throws IOException, NodeException, PinException, ElementNotFoundException {
         File filename = new File(Resources.getRoot(), name);
         Circuit circuit = Circuit.loadCircuit(filename, new ShapeFactory(library));
 

File: src/main/java/de/neemann/digital/gui/components/CircuitComponent.java
Patch:
@@ -762,6 +762,7 @@ void clicked(MouseEvent e) {
                 hasChanged();
             }
             mouseNormal.activate();
+            focusWasLost = false;
         }
 
         @Override
@@ -1101,6 +1102,7 @@ void clicked(MouseEvent e) {
                 }
             }
             mouseNormal.activate();
+            focusWasLost = false;
         }
 
         @Override

File: src/main/java/de/neemann/digital/gui/components/ElementHelpDialog.java
Patch:
@@ -2,13 +2,11 @@
 
 import de.neemann.digital.core.element.ElementAttributes;
 import de.neemann.digital.core.element.ElementTypeDescription;
-import de.neemann.digital.core.element.Key;
 import de.neemann.digital.lang.Lang;
 
 import javax.swing.*;
 import java.awt.*;
 import java.awt.event.ActionEvent;
-import java.util.ArrayList;
 
 /**
  * Simple Dialog to show an elements help text.

File: src/main/java/de/neemann/digital/gui/Main.java
Patch:
@@ -556,7 +556,7 @@ public void startTests() {
 
             windowPosManager.register("testresult", new TestResultDialog(Main.this, tsl, circuitComponent.getCircuit(), library)).setVisible(true);
 
-            circuitComponent.getCircuit().clearState();
+            elementState.enter();
         } catch (Exception e1) {
             showErrorAndStopModel(Lang.get("msg_runningTestError"), e1);
         }

File: src/main/java/de/neemann/digital/gui/Main.java
Patch:
@@ -1008,6 +1008,7 @@ public void runToBreak() {
     private void setDebug(boolean debug) throws RemoteException {
         VisualElement rom = getProgramRomFromCircuit();
         rom.getElementAttributes().set(Keys.SHOW_LISTING, debug);
+        settings.set(Keys.SHOW_DATA_TABLE, debug);
     }
 
     @Override

File: src/main/java/de/neemann/digital/core/Model.java
Patch:
@@ -231,6 +231,7 @@ public int runToBreak() throws NodeException {
 
         int count = aBreak.getCycles() * 2;
         boolean lastIn = brVal.getBool();
+        fireEvent(ModelEvent.FASTRUN);
         for (int i = 0; i < count; i++) {
             clkVal.setBool(!clkVal.getBool());
             doStep();

File: src/main/java/de/neemann/digital/core/memory/ROM.java
Patch:
@@ -34,6 +34,7 @@ public class ROM extends Node implements Element {
             .addAttribute(Keys.ADDR_BITS)
             .addAttribute(Keys.LABEL)
             .addAttribute(Keys.DATA)
+            .addAttribute(Keys.IS_PROGRAM_MEMORY)
             .addAttribute(Keys.AUTO_RELOAD_ROM)
             .addAttribute(Keys.SHOW_LISTING);
 

File: src/main/java/de/neemann/digital/draw/elements/VisualElement.java
Patch:
@@ -359,6 +359,7 @@ public void rotate() {
         if (rotate > 3) rotate -= 4;
         elementAttributes.set(Keys.ROTATE, new Rotation(rotate));
         minMax = null;
+        transform = null;
     }
 
     /**

File: src/main/java/de/neemann/digital/builder/circuit/CircuitBuilder.java
Patch:
@@ -3,6 +3,7 @@
 import de.neemann.digital.analyse.DetermineJKStateMachine;
 import de.neemann.digital.analyse.expression.*;
 import de.neemann.digital.analyse.expression.Not;
+import de.neemann.digital.analyse.expression.format.FormatterException;
 import de.neemann.digital.builder.BuilderException;
 import de.neemann.digital.builder.BuilderInterface;
 import de.neemann.digital.core.basic.*;
@@ -124,7 +125,7 @@ public CircuitBuilder addSequential(String name, Expression expression) throws B
                         fragments.add(new FragmentExpression(Arrays.asList(frJ, frK), fe));
                     }
                 }
-            } catch (Exception e) {
+            } catch (ExpressionException | FormatterException e) {
                 throw new BuilderException(e.getMessage());
             }
         }

File: src/main/java/de/neemann/digital/core/element/Keys.java
Patch:
@@ -40,7 +40,7 @@ private Keys() {
      */
     public static final Key.KeyInteger SIZE
             = new Key.KeyInteger("Size", 1)
-            .setComboBoxValues(new Integer[]{1,2, 3, 4, 5})
+            .setComboBoxValues(new Integer[]{1, 2, 3, 4, 5})
             .setMin(1);
     /**
      * The value of constants

File: src/main/java/de/neemann/digital/builder/circuit/CircuitBuilder.java
Patch:
@@ -243,7 +243,7 @@ private boolean isNotNeeded(String identifier) {
 
     private void addFragmentToCircuit(Fragment fr, Circuit circuit) {
         fr.setPos(new Vector(0, 0));
-        de.neemann.digital.builder.circuit.Box b = fr.doLayout();
+        Box b = fr.doLayout();
 
         fr.addToCircuit(new Vector(0, pos), circuit);
         pos += b.getHeight() + SIZE * 2;

File: src/main/java/de/neemann/digital/builder/circuit/FragmentSameInValue.java
Patch:
@@ -30,8 +30,8 @@ public FragmentSameInValue(Fragment fragment) {
 
     @Override
     public Box doLayout() {
-        Box b = fragment.doLayout();
         fragment.setPos(new Vector(SIZE * 2, 0));
+        Box b = fragment.doLayout();
         return new Box(2 * SIZE + b.getWidth(), b.getHeight());
     }
 

File: src/main/java/de/neemann/digital/gui/Main.java
Patch:
@@ -546,7 +546,7 @@ public void startTests() {
 
             circuitComponent.getCircuit().clearState();
         } catch (Exception e1) {
-            new ErrorMessage(Lang.get("msg_runningTestError")).addCause(e1).show();
+            showErrorAndStopModel(Lang.get("msg_runningTestError"), e1);
         }
     }
 

File: src/main/java/de/neemann/digital/gui/components/AttributeDialog.java
Patch:
@@ -138,7 +138,7 @@ public Main getMain() {  // ToDo: is a hack! find a better solution for getting
         if (parent instanceof Main)
             return (Main) parent;
         if (parent instanceof CircuitComponent)
-            return ((CircuitComponent)parent).getMain();
+            return ((CircuitComponent) parent).getMain();
         return null;
     }
 

File: src/main/java/de/neemann/digital/gui/components/test/TestResult.java
Patch:
@@ -100,7 +100,7 @@ private int getIndexOf(String name) throws DataException {
         throw new DataException(Lang.get("err_signal_N_notInTextVector", name));
     }
 
-    private class TestSignal {
+    private static class TestSignal {
         private final int index;
         private final ObservableValue value;
 

File: src/main/java/de/neemann/digital/core/SpeedTest.java
Patch:
@@ -49,6 +49,7 @@ else if (clocks.size() > 1)
             for (int i = 0; i < LOOPCOUNTER; i++) {
                 state = 1 - state;
                 clockValue.setValue(state);
+                model.doStep();
             }
             loops++;
             aktTime = System.currentTimeMillis();

File: src/main/java/de/neemann/digital/gui/components/CircuitComponent.java
Patch:
@@ -255,10 +255,11 @@ public void setModeAndReset(boolean runMode, Sync modelSync) {
         this.modelSync = modelSync;
         if (runMode)
             mouseRun.activate();
-        else
+        else {
             mouseNormal.activate();
+            circuit.clearState();
+        }
         requestFocusInWindow();
-        circuit.clearState();
     }
 
     /**

File: src/main/java/de/neemann/digital/gui/Main.java
Patch:
@@ -481,8 +481,7 @@ public void actionPerformed(ActionEvent e) {
                     if (tsl.isEmpty())
                         throw new DataException(Lang.get("err_noTestData"));
 
-                    Model model = new ModelCreator(circuitComponent.getCircuit(), library).createModel(false);
-                    new TestResultDialog(Main.this, tsl, model).setVisible(true);
+                    new TestResultDialog(Main.this, tsl, circuitComponent.getCircuit(), library).setVisible(true);
 
                     circuitComponent.getCircuit().clearState();
                 } catch (Exception e1) {

File: src/test/java/de/neemann/digital/analyse/expression/ToStringTest.java
Patch:
@@ -21,7 +21,6 @@ public void testToString() throws Exception {
         //Q1.d = !D & !Q1 & Q0 # !D & Q1 & !Q0 # D & !Q1 & !Q0 # D & Q1 & Q0;
         Expression Q1d = or(and(not(D), not(Q1), Q0), and(not(D), Q1, not(Q0)), and(D, not(Q1), not(Q0)), and(D, Q1, Q0));
 
-
-        assertEquals("or(and(not(D), Q0, not(Q1)), and(not(D), not(Q0), Q1), and(D, not(Q0), not(Q1)), and(D, Q0, Q1))", Q1d.toString());
+        assertEquals("or(and(not(D),Q0,not(Q1)),and(not(D),not(Q0),Q1),and(D,not(Q0),not(Q1)),and(D,Q0,Q1))", Q1d.toString());
     }
 }

File: src/main/java/de/neemann/digital/core/element/Element.java
Patch:
@@ -39,6 +39,7 @@ public interface Element {
 
     /**
      * Is called after registerNodes is called on all Elements.
+     * @throws NodeException NodeException
      */
     default void init(Model model) throws NodeException {
     }

File: src/main/java/de/neemann/digital/gui/DigitalRemoteInterface.java
Patch:
@@ -19,8 +19,9 @@ public interface DigitalRemoteInterface {
 
     /**
      * Starts the model
+     * @return true if start was successful
      */
-    void start();
+    boolean start();
 
     /**
      * performs a single step

File: src/main/java/de/neemann/digital/gui/Main.java
Patch:
@@ -696,8 +696,6 @@ public boolean loadRom(File file) {
                 }
             }
         }
-        if (!found)
-            new ErrorMessage(Lang.get("msg_noRomFound")).show(this);
         return found;
     }
 
@@ -729,9 +727,10 @@ public void runToBreak() {
     }
 
     @Override
-    public void start() {
+    public boolean start() {
         runModelState.activate();
         circuitComponent.repaint();
+        return true;
     }
 
     @Override

File: src/main/java/de/neemann/digital/draw/elements/Circuit.java
Patch:
@@ -37,6 +37,7 @@ public class Circuit {
     static {
         ATTR_LIST.add(Keys.WIDTH);
         ATTR_LIST.add(Keys.BACKGROUND_COLOR);
+        ATTR_LIST.add(Keys.DESCRIPTION);
     }
 
     private int version = 1;

File: src/main/java/de/neemann/digital/gui/LibrarySelector.java
Patch:
@@ -191,8 +191,10 @@ private Imported importElement(File file) {
 
             InsertAction insertAction = new InsertAction(description, insertHistory, circuitComponent);
             String descriptionText = circuit.getAttributes().get(Keys.DESCRIPTION);
-            if (descriptionText != null && descriptionText.length() > 0)
+            if (descriptionText != null && descriptionText.length() > 0) {
                 insertAction.setToolTip(descriptionText);
+                description.setDescription(descriptionText);
+            }
 
             JMenuItem menuEntry = insertAction.createJMenuItem();
             ImportedItem item = findImportedItem(file);

File: src/main/java/de/neemann/digital/draw/model/Net.java
Patch:
@@ -137,7 +137,7 @@ public void interconnect(Model m, boolean attachWires) throws PinException {
         }
 
         if (outputs.size() == 0)
-            throw new PinException(Lang.get("err_onOutConnectedToWire"), this);
+            throw new PinException(Lang.get("err_onOutConnectedToWire", this.toString()), this);
 
         ObservableValue value = null;
         if (outputs.size() == 1) {
@@ -218,6 +218,6 @@ public boolean matchesLabel(Net net) {
 
     @Override
     public String toString() {
-        return "Net{" + labelSet + '}';
+        return labelSet + "/" + pins;
     }
 }

File: src/main/java/de/neemann/gui/language/Bundle.java
Patch:
@@ -41,10 +41,10 @@ public Bundle(String name) {
     }
 
     /**
-     * returnce the resources for the given language
+     * returns the resources for the given language
      *
      * @param lang the language
-     * @return the resources
+     * @return the resources or null if not available
      */
     public Resources getResources(String lang) {
         if (!languages.containsKey(lang))

File: src/main/java/de/neemann/digital/analyse/quinemc/TableRows.java
Patch:
@@ -94,7 +94,7 @@ public TableRow get(int i) {
         throw new IndexOutOfBoundsException();
     }
 
-    private class RowIterator implements Iterator<TableRow> {
+    private static class RowIterator implements Iterator<TableRow> {
         private final Iterator<ArrayList<TableRow>> listIter;
         private Iterator<TableRow> itemIter;
 

File: src/main/java/de/neemann/digital/builder/jedec/FuseMapFiller.java
Patch:
@@ -133,16 +133,16 @@ else if (v instanceof Not) {
 
     }
 
-    private class MapEntry {
+    private static class MapEntry {
         private final int index;
         private final boolean swap;
 
-        public MapEntry(int index, boolean swap) {
+        MapEntry(int index, boolean swap) {
             this.index = index;
             this.swap = swap;
         }
 
-        public int getFuse(boolean invert) {
+        int getFuse(boolean invert) {
             int fuse=index*2;
             if (swap) {
                 if (!invert) fuse++;

File: src/main/java/de/neemann/digital/gui/LibrarySelector.java
Patch:
@@ -135,7 +135,7 @@ public void setFilePath(File filePath) {
 
     @Override
     public ElementTypeDescription elementNotFound(String elementName) {
-        File file = new File(elementName);
+        File file = new File(elementName.replace('\\', '/'));
         // check if there is a file with the given name in the current directory
         // if so, load this file!
         File primary = new File(filePath, file.getName());

File: src/main/java/de/neemann/digital/analyse/ModelAnalyser.java
Patch:
@@ -54,8 +54,7 @@ public ModelAnalyser(Model model) throws AnalyseException {
             inputs.add(new Signal(label, q));
 
             ObservableValue notQ = ff.getOutputs().get(1);
-            if (notQ.observerCount() > 0)
-                q.addObserver(() -> notQ.setValue(~q.getValue()));
+            q.addObserver(() -> notQ.setValue(~q.getValue()));
         }
 
         if (inputs.size() == 0)

File: src/main/java/de/neemann/digital/gui/components/table/ShowStringDialog.java
Patch:
@@ -1,11 +1,9 @@
 package de.neemann.digital.gui.components.table;
 
-import de.neemann.digital.builder.PinMap;
-
 import javax.swing.*;
 
 /**
- * Shows a pin mapping instance {@link PinMap}
+ * Shows a simple string
  *
  * @author hneemann
  */

File: src/main/java/de/neemann/digital/builder/PinMap.java
Patch:
@@ -170,8 +170,9 @@ public boolean isSimpleAlias(String name, Expression expression) {
      * @throws PinMapException PinMapException
      */
     public PinMap addAll(PinMap pinMap) throws PinMapException {
-        for (Map.Entry<String, Integer> e : pinMap.pinMap.entrySet())
-            assignPin(e.getKey(), e.getValue());
+        if (pinMap != null)
+            for (Map.Entry<String, Integer> e : pinMap.pinMap.entrySet())
+                assignPin(e.getKey(), e.getValue());
         return this;
     }
 

File: src/main/java/de/neemann/digital/analyse/format/TruthTableFormatter.java
Patch:
@@ -15,6 +15,7 @@ public interface TruthTableFormatter {
      *
      * @param truthTable the table
      * @return the string representation
+     * @throws ExpressionException ExpressionException
      */
     String format(TruthTable truthTable) throws ExpressionException;
 }

File: src/main/java/de/neemann/digital/analyse/format/TruthTableFormatterLaTeX.java
Patch:
@@ -66,7 +66,7 @@ private String format(ThreeStateValue r) {
         return null;
     }
 
-    public static String formatVar(String var) {
+    private static String formatVar(String var) {
         return FormatToTableLatex.formatIdentifier(var);
     }
 }

File: src/main/java/de/neemann/digital/analyse/TruthTable.java
Patch:
@@ -332,7 +332,7 @@ private static final class Result {
          * @param name   the name of the result
          * @param values the result values
          */
-        public Result(String name, BoolTable values) {
+        Result(String name, BoolTable values) {
             this.name = name;
             this.values = values;
         }

File: src/main/java/de/neemann/digital/draw/builder/JedecCreator.java
Patch:
@@ -10,6 +10,7 @@
  * Interface used to create Jedec files.
  * Every supported device implements this interface.
  *
+ * @param <T> concrete type of {@link JedecCreator}
  * @author hneemann
  */
 public interface JedecCreator<T extends JedecCreator> {

File: src/main/java/de/neemann/digital/draw/builder/jedec/JedecWriter.java
Patch:
@@ -35,7 +35,7 @@ public JedecWriter(OutputStream out) throws IOException {
      * @throws IOException IOException
      */
     public JedecWriter print(String s) throws IOException {
-        write(s.getBytes());
+        write(s.getBytes("ISO-8859-1"));
         return this;
     }
 
@@ -100,7 +100,7 @@ public void write(int b) throws IOException {
     @Override
     public void close() throws IOException {
         write(ETX);
-        out.write(toHex(checksum & 0xffff, 4).getBytes());
+        out.write(toHex(checksum & 0xffff, 4).getBytes("ISO-8859-1"));
         super.close();
     }
 

File: src/test/java/de/neemann/digital/draw/builder/jedec/JedecWriterTest.java
Patch:
@@ -38,10 +38,11 @@ public void testFuseMap() throws Exception {
 
         assertEquals("\u0002Test*\r\n" +
                 "QF500*\r\n" +
+                "G0*\r\n" +
                 "F0*\r\n" +
                 "L0 01001110000010001111000011111111*\r\n" +
                 "L32 01010001000000000000000000000000*\r\n" +
                 "C021A*\r\n" +
-                "\u00031365", baos.toString());
+                "\u0003141D", baos.toString());
     }
 }
\ No newline at end of file

File: src/main/java/de/neemann/digital/core/flipflops/FlipflopRS.java
Patch:
@@ -20,7 +20,7 @@ public class FlipflopRS extends Node implements Element {
      * The RS-FF description
      */
     public static final ElementTypeDescription DESCRIPTION
-            = new ElementTypeDescription("RS_FF", FlipflopRS.class, input("R"), input("C"), input("S"))
+            = new ElementTypeDescription("RS_FF", FlipflopRS.class, input("S"), input("C"), input("R"))
             .addAttribute(Keys.ROTATE)
             .addAttribute(Keys.LABEL)
             .addAttribute(Keys.VALUE_IS_PROBE)

File: src/test/java/de/neemann/digital/gui/components/table/TestReorderInputs.java
Patch:
@@ -43,7 +43,7 @@ public void testDeleteVar() throws Exception {
         assertEquals(1, newTable.getResultCount());
 
         ContextFiller cf = new ContextFiller(newTable.getVars());
-        cf.set(t.getVars().get(1), false);
+        cf.set(t.getVars().get(2), false);
         for (int i = 0; i < newTable.getRows(); i++) {
             cf.setContextTo(i);
             assertEquals(newTable.getByContext(0, cf), t.getByContext(0, cf));

File: src/main/java/de/neemann/digital/gui/components/table/TableDialog.java
Patch:
@@ -60,7 +60,6 @@ public class TableDialog extends JDialog {
     private TableColumn column;
     private int columnIndex;
     private AllSolutionsDialog allSolutionsDialog;
-    private int variables;
 
     /**
      * Creates a new instance
@@ -384,7 +383,7 @@ public Component getTableCellRendererComponent(JTable table, Object value, boole
             JLabel label = (JLabel) super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
             label.setHorizontalAlignment(SwingConstants.CENTER);
             label.setFont(font);
-            if (column < variables)
+            if (column < model.getTable().getVars().size())
                 label.setBackground(MYGRAY);
             else
                 label.setBackground(Color.WHITE);

File: src/main/java/de/neemann/digital/core/element/Keys.java
Patch:
@@ -199,7 +199,7 @@ private Keys() {
      * shape setting
      */
     public static final Key<Boolean> SETTINGS_IEEE_SHAPES
-            = new Key<>("IEEEShapes", !Locale.getDefault().getCountry().equals("DE"));
+            = new Key<>("IEEEShapes", Locale.getDefault().getLanguage().equals(Locale.US.getLanguage()));
 
     /**
      * output format for numbers

File: src/main/java/de/neemann/digital/gui/components/CircuitComponent.java
Patch:
@@ -632,8 +632,10 @@ void released(MouseEvent e) {
             Vector dif = corner1.sub(corner2);
             if (Math.abs(dif.x) > MIN_SIZE && Math.abs(dif.y) > MIN_SIZE)
                 setCursor(moveCursor);
-            else
+            else {
+                removeHighLighted();
                 mouseNormal.activate();
+            }
         }
 
         @Override

File: src/main/java/de/neemann/digital/gui/Main.java
Patch:
@@ -20,7 +20,7 @@
 import de.neemann.digital.gui.components.*;
 import de.neemann.digital.gui.components.data.DataSetDialog;
 import de.neemann.digital.gui.components.listing.ROMListingDialog;
-import de.neemann.digital.gui.components.table.TableFrame;
+import de.neemann.digital.gui.components.table.TableDialog;
 import de.neemann.digital.gui.state.State;
 import de.neemann.digital.gui.state.StateManager;
 import de.neemann.digital.lang.Lang;
@@ -445,7 +445,7 @@ private void createAnalyseMenu(JMenuBar menuBar) {
             public void actionPerformed(ActionEvent e) {
                 try {
                     Model model = new ModelDescription(circuitComponent.getCircuit(), library).createModel(false);
-                    new TableFrame(Main.this, new ModelAnalyser(model).analyse(), shapeFactory).setVisible(true);
+                    new TableDialog(Main.this, new ModelAnalyser(model).analyse(), shapeFactory).setVisible(true);
                     elementState.activate();
                 } catch (PinException | NodeException | AnalyseException e1) {
                     showErrorAndStopModel(Lang.get("msg_annalyseErr"), e1);
@@ -459,7 +459,7 @@ public void actionPerformed(ActionEvent e) {
             @Override
             public void actionPerformed(ActionEvent e) {
                 TruthTable tt = new TruthTable(3).addResult();
-                new TableFrame(Main.this, tt, shapeFactory).setVisible(true);
+                new TableDialog(Main.this, tt, shapeFactory).setVisible(true);
                 elementState.activate();
             }
         }

File: src/main/java/de/neemann/digital/gui/components/table/AllSolutionsDialog.java
Patch:
@@ -10,7 +10,7 @@
  *
  * @author hneemann
  */
-public class AllSolutionsFrame extends JDialog {
+public class AllSolutionsDialog extends JDialog {
     private final JTextArea textArea;
 
     /**
@@ -19,7 +19,7 @@ public class AllSolutionsFrame extends JDialog {
      * @param owner the owner frame
      * @param font  the font to use
      */
-    public AllSolutionsFrame(Frame owner, Font font) {
+    public AllSolutionsDialog(JFrame owner, Font font) {
         super(owner, Lang.get("win_allSolutions"), false);
         setDefaultCloseOperation(HIDE_ON_CLOSE);
 
@@ -39,7 +39,7 @@ public AllSolutionsFrame(Frame owner, Font font) {
      * @param text the text
      * @return this for call chaining
      */
-    public AllSolutionsFrame setText(String text) {
+    public AllSolutionsDialog setText(String text) {
         textArea.setText(text);
         return this;
     }

File: src/main/java/de/neemann/digital/analyse/ModelAnalyser.java
Patch:
@@ -32,6 +32,8 @@ public ModelAnalyser(Model model) throws AnalyseException {
         inputs = checkBinary(model.getInputs());
         if (inputs.size() == 0)
             throw new AnalyseException(Lang.get("err_analyseNoInputs"));
+        if (inputs.size() > 9)
+            throw new AnalyseException(Lang.get("err_toManyInputs_N", 9));
         outputs = checkBinary(model.getOutputs());
         if (outputs.size() == 0)
             throw new AnalyseException(Lang.get("err_analyseNoOutputs"));

File: src/main/java/de/neemann/digital/analyse/DetermineJKStateMachine.java
Patch:
@@ -9,6 +9,7 @@
 import de.neemann.digital.lang.Lang;
 
 import java.util.Iterator;
+import java.util.NoSuchElementException;
 
 import static de.neemann.digital.analyse.expression.Not.not;
 import static de.neemann.digital.analyse.expression.Operation.and;
@@ -139,6 +140,8 @@ public boolean hasNext() {
 
             @Override
             public T next() {
+                if (item == null)
+                    throw new NoSuchElementException();
                 T ee = item;
                 item = null;
                 return ee;

File: src/main/java/de/neemann/digital/analyse/quinemc/QuineMcCluskey.java
Patch:
@@ -3,6 +3,7 @@
 
 import de.neemann.digital.analyse.expression.*;
 import de.neemann.digital.analyse.quinemc.primeselector.PrimeSelector;
+import de.neemann.digital.analyse.quinemc.primeselector.PrimeSelectorDefault;
 import de.neemann.digital.lang.Lang;
 
 import java.util.ArrayList;
@@ -110,7 +111,7 @@ public static Expression simplify(Expression expression) throws ExpressionExcept
      * @return the simplified QMC instance
      */
     public QuineMcCluskey simplify() {
-        return simplify(PrimeSelector.DEFAULT);
+        return simplify(new PrimeSelectorDefault());
     }
 
     /**

File: src/main/java/de/neemann/digital/gui/components/table/ExpressionCreator.java
Patch:
@@ -8,7 +8,8 @@
 import de.neemann.digital.analyse.expression.format.FormatterException;
 import de.neemann.digital.analyse.quinemc.QuineMcCluskey;
 import de.neemann.digital.analyse.quinemc.TableRow;
-import de.neemann.digital.analyse.quinemc.primeselector.BruteForceGetAll;
+import de.neemann.digital.analyse.quinemc.primeselector.PrimeSelector;
+import de.neemann.digital.analyse.quinemc.primeselector.PrimeSelectorDefault;
 
 import java.util.ArrayList;
 
@@ -39,7 +40,7 @@ public ExpressionCreator(TruthTable theTable) {
     public void create() throws ExpressionException, FormatterException {
         ArrayList<Variable> vars = theTable.getVars();
         for (int table = 0; table < theTable.getResultCount(); table++) {
-            BruteForceGetAll ps = new BruteForceGetAll();
+            PrimeSelector ps = new PrimeSelectorDefault();
             Expression e = new QuineMcCluskey(vars)
                     .fillTableWith(theTable.getResult(table))
                     .simplify(ps)

File: src/test/java/de/neemann/digital/analyse/quinemc/QuineMcCluskeyRegressionTest.java
Patch:
@@ -5,7 +5,7 @@
 import de.neemann.digital.analyse.expression.Variable;
 import de.neemann.digital.analyse.expression.format.FormatToExpression;
 import de.neemann.digital.analyse.expression.format.FormatterException;
-import de.neemann.digital.analyse.quinemc.primeselector.PrimeSelector;
+import de.neemann.digital.analyse.quinemc.primeselector.PrimeSelectorDefault;
 import junit.framework.TestCase;
 
 import java.util.ArrayList;
@@ -53,7 +53,7 @@ public void testRegression3() throws Exception, FormatterException {
             System.out.println(FormatToExpression.FORMATTER_JAVA.format(t.getExpression()));
             t = t.simplifyStep().removeDuplicates();
         }
-        t.simplifyPrimes(PrimeSelector.DEFAULT);
+        t.simplifyPrimes(new PrimeSelectorDefault());
         assertEquals("A || C", FormatToExpression.FORMATTER_JAVA.format(t.getExpression()));
         System.out.println("--");
     }

File: src/test/java/de/neemann/digital/analyse/quinemc/QuineMcCluskeyTest.java
Patch:
@@ -7,7 +7,7 @@
 import de.neemann.digital.analyse.expression.Variable;
 import de.neemann.digital.analyse.expression.format.FormatToExpression;
 import de.neemann.digital.analyse.expression.format.FormatterException;
-import de.neemann.digital.analyse.quinemc.primeselector.PrimeSelector;
+import de.neemann.digital.analyse.quinemc.primeselector.PrimeSelectorDefault;
 import junit.framework.TestCase;
 
 import java.util.ArrayList;
@@ -101,7 +101,7 @@ public void testSimplify() throws ExpressionException, FormatterException {
         Expression exp = t.getExpression();
         assertEquals("(A && C && D) || (!B && !D) || (!B && C) || (!C && !D)", FormatToExpression.FORMATTER_JAVA.format(exp));
 
-        t.simplifyPrimes(PrimeSelector.DEFAULT);
+        t.simplifyPrimes(new PrimeSelectorDefault());
 
         exp = t.getExpression();
         assertEquals("(A && C && D) || (!B && C) || (!C && !D)", FormatToExpression.FORMATTER_JAVA.format(exp));

File: src/main/java/de/neemann/digital/gui/components/CircuitComponent.java
Patch:
@@ -619,16 +619,15 @@ boolean dragged(MouseEvent e) {
                 if (downButton == MouseEvent.BUTTON1) {
                     removeHighLighted();
                     mouseMoveSelected.activate(corner1, corner2, getPosVector(e));
-                }
-                else if (downButton == MouseEvent.BUTTON3) {
+                } else if (downButton == MouseEvent.BUTTON3) {
                     removeHighLighted();
                     mouseCopySelected.activate(corner1, corner2, getPosVector(e));
                 }
             } else {
                 corner2 = getPosVector(e);
                 ArrayList<Drawable> elements = circuit.getElementsToHighlight(Vector.min(corner1, corner2), Vector.max(corner1, corner2));
                 removeHighLighted();
-                if (elements!=null)
+                if (elements != null)
                     addHighLighted(elements);
 
                 repaint();

File: src/main/java/de/neemann/digital/draw/builder/Builder.java
Patch:
@@ -152,14 +152,14 @@ private void createInputBus() {
         for (FragmentVariable f : fragmentVariables) {
             Vector p = f.getCircuitPos();
             int in = varPos.get(f.getVariable().getIdentifier());
-            if (f.isNeg()) in += SIZE;
+            if (f.isInvert()) in += SIZE;
             circuit.add(new Wire(p, new Vector(in, p.y)));
         }
     }
 
     private boolean isNotNeeded(String identifier) {
         for (FragmentVariable fv : fragmentVariables)
-            if (fv.isNeg() && fv.getVariable().getIdentifier().equals(identifier))
+            if (fv.isInvert() && fv.getVariable().getIdentifier().equals(identifier))
                 return true;
 
         return false;

File: src/main/java/de/neemann/digital/draw/graphics/GraphicSwing.java
Patch:
@@ -76,6 +76,9 @@ private void applyStyle(Style style) {
     @Override
     public void drawText(Vector p1, Vector p2, String text, Orientation orientation, Style style) {
         if (text == null || text.length() == 0) return;
+
+        //GraphicMinMax.approxTextSize(this, p1, p2, text, orientation, style);
+
         text = cleanLabel(text);
 
         boolean rotateText = false;
@@ -117,7 +120,6 @@ public void drawText(Vector p1, Vector p2, String text, Orientation orientation,
         if (rotateText)
             gr.setTransform(old);
 
-        //GraphicMinMax.approxTextSize(this, p1, p2, text, orientation, style);
     }
 
 }

File: src/main/java/de/neemann/digital/analyse/DetermineJKStateMachine.java
Patch:
@@ -6,6 +6,7 @@
 import de.neemann.digital.analyse.expression.Operation;
 import de.neemann.digital.analyse.expression.format.FormatToExpression;
 import de.neemann.digital.analyse.expression.format.FormatterException;
+import de.neemann.digital.lang.Lang;
 
 import java.util.Iterator;
 
@@ -55,7 +56,7 @@ public DetermineJKStateMachine(String name, Expression e) throws ExpressionExcep
             }
 
             if (belongsToJ && belongsToK) {
-                throw new ExpressionException("contains var and not var");
+                throw new ExpressionException(Lang.get("err_containsVarAndNotVar"));
             } else {
                 if (belongsToJ) {
                     j = or(term, j);

File: src/main/java/de/neemann/digital/analyse/expression/ContextMap.java
Patch:
@@ -1,5 +1,7 @@
 package de.neemann.digital.analyse.expression;
 
+import de.neemann.digital.lang.Lang;
+
 import java.util.HashMap;
 
 /**
@@ -21,7 +23,7 @@ public ContextMap() {
     public boolean get(Variable variable) throws ExpressionException {
         Boolean aBoolean = map.get(variable);
         if (aBoolean == null)
-            throw new ExpressionException(variable + " not defined");
+            throw new ExpressionException(Lang.get("err_varNotDefined_N", variable));
         return aBoolean;
     }
 

File: src/main/java/de/neemann/digital/analyse/quinemc/QuineMcCluskey.java
Patch:
@@ -3,6 +3,7 @@
 
 import de.neemann.digital.analyse.expression.*;
 import de.neemann.digital.analyse.quinemc.primeselector.PrimeSelector;
+import de.neemann.digital.lang.Lang;
 
 import java.util.ArrayList;
 import java.util.Collections;
@@ -64,7 +65,7 @@ public QuineMcCluskey(Expression expression) throws ExpressionException {
     public QuineMcCluskey fillTableWith(BoolTable values) throws ExpressionException {
         int n = 1 << variables.size();
         if (n != values.size())
-            throw new ExpressionException("exact " + n + " values necessary, not " + values.size());
+            throw new ExpressionException(Lang.get("err_exact_N0_valuesNecessaryNot_N1", n, values.size()));
         for (int i = 0; i < n; i++) {
             ThreeStateValue value = values.get(i);
             if (!value.equals(ThreeStateValue.zero)) {

File: src/main/java/de/neemann/digital/gui/components/table/AllSolutionsFrame.java
Patch:
@@ -1,5 +1,7 @@
 package de.neemann.digital.gui.components.table;
 
+import de.neemann.digital.lang.Lang;
+
 import javax.swing.*;
 import java.awt.*;
 
@@ -18,7 +20,7 @@ public class AllSolutionsFrame extends JDialog {
      * @param font  the font to use
      */
     public AllSolutionsFrame(Frame owner, Font font) {
-        super(owner, "Alle möglichen Lösungen", false);
+        super(owner, Lang.get("win_allSolutions"), false);
         setDefaultCloseOperation(HIDE_ON_CLOSE);
 
         textArea = new JTextArea(6, 30);

File: src/main/java/de/neemann/digital/draw/shapes/TunnelShape.java
Patch:
@@ -59,7 +59,7 @@ public void drawTo(Graphic gr, boolean highLight) {
 //        }
 
         gr.drawPolygon(new Polygon(true)
-                .add(1, 0)
+                .add(0, 0)
                 .add(WIDTH, HEIGHT)
                 .add(WIDTH, -HEIGHT), Style.NORMAL);
         Vector pos = new Vector(WIDTH + SIZE2 / 2, 0);

File: src/main/java/de/neemann/digital/draw/graphics/GraphicMinMax.java
Patch:
@@ -61,7 +61,7 @@ private void check(Vector p) {
 
     @Override
     public void drawText(Vector p1, Vector p2, String text, Orientation orientation, Style style) {
-        if (includeText)
+        if (includeText || style == Style.NORMAL_TEXT)
             approxTextSize(this, p1, p2, text, orientation, style);
     }
 

File: src/main/java/de/neemann/digital/draw/shapes/MissingShape.java
Patch:
@@ -43,9 +43,7 @@ public Interactor applyStateMonitor(IOState ioState, Observer guiObserver) {
 
     @Override
     public void drawTo(Graphic graphic, boolean highLight) {
-        Style style = Style.SHAPE_PIN;
-        //graphic.drawLine(new Vector(0, 0), new Vector(style.getFontSize() * 10, 0), style);
-        //graphic.drawLine(new Vector(0, 0), new Vector(0, style.getFontSize() * 2), style);
+        Style style = Style.NORMAL_TEXT;
         graphic.drawText(new Vector(4, 4), new Vector(5, 4), message, Orientation.LEFTTOP, style);
         if (cause != null && cause.length() > 0)
             graphic.drawText(new Vector(4, 4 + style.getFontSize()), new Vector(5, 4 + style.getFontSize()), cause, Orientation.LEFTTOP, style);

File: src/main/java/de/neemann/digital/draw/shapes/TextShape.java
Patch:
@@ -44,6 +44,6 @@ public Interactor applyStateMonitor(IOState ioState, Observer guiObserver) {
 
     @Override
     public void drawTo(Graphic graphic, boolean highLight) {
-        graphic.drawText(new Vector(0, 0), new Vector(1, 0), label, Orientation.LEFTTOP, Style.NORMAL);
+        graphic.drawText(new Vector(0, 0), new Vector(1, 0), label, Orientation.LEFTTOP, Style.NORMAL_TEXT);
     }
 }

File: src/main/java/de/neemann/digital/gui/LibrarySelector.java
Patch:
@@ -107,7 +107,7 @@ public void actionPerformed(ActionEvent e) {
                 lastPath = path;
             }
             subMenu.add(new InsertAction(elementContainer.getDescription(), insertHistory, circuitComponent)
-                    .setToolTip(createToolTipText(elementContainer.getDescription().getTranslatedName()))
+                    .setToolTip(createToolTipText(elementContainer.getDescription().getName()))
                     .createJMenuItem());
         }
 

File: src/test/java/de/neemann/digital/integration/TestExamples.java
Patch:
@@ -18,7 +18,7 @@ public class TestExamples extends TestCase {
     private static final File examples=new File(Resources.getRoot().getParentFile().getParentFile(), "/main/dig");
 
     public void testCombinatorial() throws Exception {
-        assertEquals(17, scan(new File(examples, "combinatorial")));
+        assertEquals(19, scan(new File(examples, "combinatorial")));
     }
 
     public void testSequential() throws Exception {

File: src/main/java/de/neemann/digital/gui/Main.java
Patch:
@@ -446,6 +446,7 @@ private boolean createAndStartModel(boolean globalRunClock, ModelEvent updateEve
                 // all repainting is initiated by user actions!
                 modelDescription.connectToGui(null);
 
+            doStep.setEnabled(false);
             runToBreak.setEnabled(!runClock && model.isFastRunModel());
 
             List<String> ordering = circuitComponent.getCircuit().getMeasurementOrdering();

File: src/main/java/de/neemann/digital/gui/components/data/DataSet.java
Patch:
@@ -238,10 +238,10 @@ public void saveCSV(BufferedWriter w) throws IOException {
             w.write("\"step\"");
             for (Model.Signal s : signals)
                 w.write(",\"" + s.getName() + '"');
-            w.newLine();
+            w.write("\n");
             for (DataSample s : samples) {
                 s.writeTo(w);
-                w.newLine();
+                w.write("\n");
             }
         } finally {
             w.close();

File: src/main/java/de/neemann/digital/gui/Main.java
Patch:
@@ -32,6 +32,7 @@
 import java.io.File;
 import java.io.FileOutputStream;
 import java.io.IOException;
+import java.io.OutputStream;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.concurrent.ScheduledThreadPoolExecutor;
@@ -618,9 +619,8 @@ public void actionPerformed(ActionEvent e) {
             }
             fc.addChoosableFileFilter(new FileNameExtensionFilter(name, suffix));
             if (fc.showSaveDialog(Main.this) == JFileChooser.APPROVE_OPTION) {
-                try {
-                    new Export(circuitComponent.getCircuit(), exportFactory)
-                            .export(new FileOutputStream(fc.getSelectedFile()));
+                try (OutputStream out = new FileOutputStream(fc.getSelectedFile())) {
+                    new Export(circuitComponent.getCircuit(), exportFactory).export(out);
                 } catch (IOException e1) {
                     new ErrorMessage(Lang.get("msg_errorWritingFile")).addCause(e1).show(Main.this);
                 }

File: src/main/java/de/neemann/digital/gui/components/data/DummyElement.java
Patch:
@@ -19,7 +19,7 @@ public class DummyElement implements Element {
     /**
      * The DataElement description
      */
-    public static final ElementTypeDescription DATADESCRIPTION = new ElementTypeDescription("DATA", DummyElement.class)
+    public static final ElementTypeDescription DATADESCRIPTION = new ElementTypeDescription("Data", DummyElement.class)
             .addAttribute(Keys.MICRO_STEP)
             .addAttribute(Keys.MAX_STEP_COUNT);
 

File: src/main/java/de/neemann/digital/draw/graphics/Polygon.java
Patch:
@@ -137,7 +137,8 @@ public Vector getLast() {
      * @return this for chained calls
      */
     public Polygon append(Polygon p2) {
-        points.addAll(p2.points);
+        for (int i = 1; i < p2.points.size(); i++)
+            points.add(p2.points.get(i));
         return this;
     }
 

File: src/main/java/de/neemann/digital/draw/graphics/linemerger/GraphicLineCollector.java
Patch:
@@ -104,6 +104,5 @@ public void drawTo(Graphic gr) {
     public void drawTo(Graphic gr) {
         for (PolygonSet p : polys.values())
             p.drawTo(gr);
-
     }
 }

File: src/main/java/de/neemann/digital/gui/Main.java
Patch:
@@ -474,7 +474,7 @@ public void showErrorAndStopModel(String message, Exception cause) {
             if (modelDescription != null) {
                 if (cause instanceof NodeException) {
                     NodeException e = (NodeException) cause;
-                    if (e.getNodes() != null)
+                    if (!e.getNodes().isEmpty())
                         modelDescription.addNodeElementsTo(e.getNodes(), circuitComponent.getHighLighted());
                     else
                         circuitComponent.addHighLightedWires(e.getValues());

File: src/main/java/de/neemann/digital/gui/Main.java
Patch:
@@ -480,6 +480,9 @@ public void showErrorAndStopModel(String message, Exception cause) {
                     circuitComponent.addHighLighted(e.getVisualElement());
                     if (e.getNet() != null)
                         circuitComponent.addHighLighted(e.getNet().getWires());
+                } else if (cause instanceof BurnException) {
+                    BurnException e = (BurnException) cause;
+                    circuitComponent.addHighLightedWires(new ObservableValue[]{e.getValue()});
                 }
                 circuitComponent.repaint();
             }

File: src/main/java/de/neemann/gui/StringUtils.java
Patch:
@@ -19,7 +19,8 @@ public static String getExceptionMessage(Throwable e) {
         StringBuilder sb = new StringBuilder();
 
         while (e != null) {
-            sb.append(e.getClass().getSimpleName()).append(": ").append(e.getMessage());
+//            sb.append(e.getClass().getSimpleName()).append(": ").append(e.getMessage());
+            sb.append(e.getMessage());
             e = e.getCause();
             if (e != null)
                 sb.append("\ncaused by: ");

File: src/main/java/de/neemann/digital/gui/components/listing/ROMListingDialog.java
Patch:
@@ -58,7 +58,7 @@ public ROMListingDialog(JFrame parent, ROM rom) throws IOException {
 
     @Override
     public void hasChanged() {
-        int addr = (int) rom.getAddrIn().getValueIgnoreBurn();
+        int addr = (int) rom.getRomAddress();
         if (addr != lastAddr) {
             Integer line = listing.getLine(addr);
             if (line != null) {

File: src/main/java/de/neemann/digital/gui/components/CircuitComponent.java
Patch:
@@ -169,7 +169,8 @@ public <T extends Drawable> void addHighLighted(T drawable) {
      * @param drawables the list of drawables
      */
     public void addHighLighted(Collection<? extends Drawable> drawables) {
-        highLighted.addAll(drawables);
+        if (drawables != null)
+            highLighted.addAll(drawables);
     }
 
     /**

File: src/main/java/de/neemann/digital/core/Model.java
Patch:
@@ -232,7 +232,7 @@ public int runToBreak() throws NodeException {
             boolean brIn = brVal.getBool();
             if (!lastIn && brIn) {
                 fireEvent(ModelEvent.BREAK);
-                return i;
+                return i + 1;
             }
             lastIn = brIn;
         }

File: src/main/java/de/neemann/digital/draw/graphics/GraphicSVG.java
Patch:
@@ -93,7 +93,7 @@ private static double getStrokeWidth(Style style) {
     public void drawCircle(Vector p1, Vector p2, Style style) {
         try {
             Vector c = p1.add(p2).div(2);
-            double r = Math.abs(p2.sub(p1).x) / 2;
+            double r = Math.abs(p2.sub(p1).x) / 2.0;
             if (style.isFilled())
                 w.write("<circle cx=\"" + c.x + "\" cy=\"" + c.y + "\" r=\"" + r + "\" stroke=\"" + getColor(style) + "\" stroke-width=\"" + getStrokeWidth(style) + "\" fill=\"" + getColor(style) + "\" />\n");
             else {

File: src/main/java/de/neemann/digital/core/memory/DataField.java
Patch:
@@ -34,7 +34,7 @@ public DataField(DataField dataField, int newSize, int bits) {
     }
 
     public DataField(File file) throws IOException {
-        this(new FileReader(file));
+        this(new InputStreamReader(new FileInputStream(file), "UTF-8"));
     }
 
     public DataField(Reader reader) throws IOException {

File: src/main/java/de/neemann/digital/draw/graphics/GraphicSVG.java
Patch:
@@ -35,8 +35,8 @@ public GraphicSVG(OutputStream out, Vector min, Vector max, File source, int svg
                 "   xmlns:svg=\"http://www.w3.org/2000/svg\"\n" +
                 "   xmlns=\"http://www.w3.org/2000/svg\"\n");
 
-        double width = (max.x - min.x) * svgScale / 100;
-        double height = (max.y - min.y) * svgScale / 100;
+        double width = (max.x - min.x) * svgScale / 100.0;
+        double height = (max.y - min.y) * svgScale / 100.0;
 
         w.write("   width=\"" + width + "mm\"\n" +
                 "   height=\"" + height + "mm\"\n" +

File: src/main/java/de/neemann/digital/gui/Main.java
Patch:
@@ -456,7 +456,7 @@ private boolean createAndStartModel(boolean runClock, ModelEvent.Event updateEve
             model.init();
 
             return true;
-        } catch (Exception e) {
+        } catch (NodeException | PinException | RuntimeException e) {
             showErrorAndStopModel(Lang.get("msg_errorCreatingModel"), e);
         }
         return false;

File: src/main/java/de/neemann/digital/gui/components/AttributeDialog.java
Patch:
@@ -72,11 +72,11 @@ public boolean showDialog() {
         return changed;
     }
 
-    private class EditorHolder<T> {
+    private static class EditorHolder<T> {
         private final Editor<T> e;
         private final AttributeKey<T> key;
 
-        public EditorHolder(Editor<T> e, AttributeKey<T> key) {
+        private EditorHolder(Editor<T> e, AttributeKey<T> key) {
             this.e = e;
             this.key = key;
         }

File: src/main/java/de/neemann/digital/gui/components/ProbeDialog.java
Patch:
@@ -66,7 +66,7 @@ public void handleEvent(ModelEvent event) {
         }
     }
 
-    private class SignalTableModel implements TableModel {
+    private static class SignalTableModel implements TableModel {
         private final ArrayList<Model.Signal> signals;
         private ArrayList<TableModelListener> listeners = new ArrayList<>();
 

File: src/main/java/de/neemann/gui/InfoDialog.java
Patch:
@@ -101,7 +101,7 @@ private static class Manifest {
         public Manifest(URL url) throws IOException {
             this.url = url;
             manifest = new HashMap<String, String>();
-            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
+            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream(), "UTF-8"));
             try {
                 String line;
                 while ((line = reader.readLine()) != null) {

File: src/test/java/de/neemann/digital/draw/graphics/GraphicSVGLaTeXTest.java
Patch:
@@ -11,11 +11,11 @@ public void testFormatText() throws Exception {
 
         assertEquals("$Z_{0}$", gs.formatText("Z_0", Style.NORMAL.getFontSize()));
         assertEquals("\\&amp;", gs.formatText("&", Style.NORMAL.getFontSize()));
-        assertEquals("$\\geq{}$1", gs.formatText("\u22651", Style.NORMAL.getFontSize()));
-        assertEquals("$\\geq{}1$", gs.formatText("$\u22651$", Style.NORMAL.getFontSize()));
+        assertEquals("$\\geq\\!\\!{}$1", gs.formatText("\u22651", Style.NORMAL.getFontSize()));
+        assertEquals("$\\geq\\!\\!{}1$", gs.formatText("$\u22651$", Style.NORMAL.getFontSize()));
         assertEquals("$\\neg{}$Q", gs.formatText("~Q", Style.NORMAL.getFontSize()));
         assertEquals("$\\neg{}Q$", gs.formatText("$~Q$", Style.NORMAL.getFontSize()));
-        assertEquals("&lt;a&gt;", gs.formatText("<a>", Style.NORMAL.getFontSize()));
+        assertEquals("\\textless{}a\\textgreater{}", gs.formatText("<a>", Style.NORMAL.getFontSize()));
         assertEquals("Grün", gs.formatText("Grün", Style.NORMAL.getFontSize()));
 
 

File: src/main/java/de/neemann/digital/draw/shapes/BreakShape.java
Patch:
@@ -14,7 +14,7 @@
  * @author hneemann
  */
 public class BreakShape implements Shape {
-    public static final int SIZE = GenericShape.SIZE * 3 / 4;
+    private static final int SIZE = GenericShape.SIZE * 3 / 4;
     private static final int SIZEQ = SIZE / 2;
     private static final Vector RAD = new Vector(SIZE, SIZE);
     private static final Vector D1 = new Vector(SIZEQ, -SIZEQ);

File: src/main/java/de/neemann/digital/draw/shapes/Drawable.java
Patch:
@@ -3,13 +3,15 @@
 import de.neemann.digital.draw.graphics.Graphic;
 
 /**
+ * Interface implemented by the elements which can draw itself at a {@link Graphic} instance.
+ *
  * @author hneemann
  */
 public interface Drawable {
     /**
      * Draws a element depending on its state
-     *  @param graphic interface to draw to
      *
+     * @param graphic interface to draw to
      */
     void drawTo(Graphic graphic, boolean highLight);
 }

File: src/main/java/de/neemann/digital/draw/shapes/LEDShape.java
Patch:
@@ -18,8 +18,8 @@
  * @author hneemann
  */
 public class LEDShape implements Shape {
-    public static final Vector RAD = new Vector(SIZE - 2, SIZE - 2);
-    public static final Vector RADL = new Vector(SIZE, SIZE);
+    private static final Vector RAD = new Vector(SIZE - 2, SIZE - 2);
+    private static final Vector RADL = new Vector(SIZE, SIZE);
     private final String label;
     private Style onStyle;
     private IOState ioState;

File: src/main/java/de/neemann/digital/draw/shapes/GenericShape.java
Patch:
@@ -112,7 +112,7 @@ public void drawTo(Graphic graphic, boolean highLight) {
         }
 
         if (label != null) {
-            Vector pos = new Vector(SIZE2 * width, -SIZE2 - 4);
+            Vector pos = new Vector(SIZE2 * width, -SIZE2 - 8);
             graphic.drawText(pos, pos.add(1, 0), label, Orientation.CENTERBOTTOM, Style.NORMAL);
         }
 

File: src/main/java/de/neemann/digital/gui/Main.java
Patch:
@@ -522,6 +522,7 @@ private void saveFile(File filename, boolean toPrefs) {
             circuitComponent.getCircuit().save(filename);
             if (savedListener != null)
                 savedListener.saved(filename);
+            elementState.activate();
             setFilename(filename, toPrefs);
         } catch (IOException e) {
             new ErrorMessage(Lang.get("msg_errorWritingFile")).addCause(e).show();

File: src/main/java/de/neemann/digital/gui/components/CircuitComponent.java
Patch:
@@ -250,7 +250,7 @@ public void setCircuit(Circuit circuit) {
         if (gr.getMin() != null) {
 
             Vector delta = gr.getMax().sub(gr.getMin());
-            double sx = ((double) getWidth()) / delta.x * 0.8;
+            double sx = ((double) getWidth()) / delta.x * 0.75;
             double sy = ((double) getHeight()) / delta.y * 0.95;
             double s = Math.min(sx, sy);
 

File: src/main/java/de/neemann/digital/draw/shapes/SevenSegHexShape.java
Patch:
@@ -48,7 +48,7 @@ public Pins getPins() {
 
     @Override
     public Interactor applyStateMonitor(IOState ioState, Observer guiObserver) {
-        input = ioState.getInput(0);
+        input = ioState.getInput(0).addObserver(guiObserver);
         return null;
     }
 }

File: src/main/java/de/neemann/digital/gui/components/CircuitComponent.java
Patch:
@@ -400,7 +400,7 @@ void pressed(MouseEvent e) {
 
         @Override
         boolean dragged(MouseEvent e) {
-            if (downButton == MouseEvent.BUTTON3) {
+            if (downButton == MouseEvent.BUTTON1) {
                 mouseSelect.activate(pos, getPosVector(e));
                 return true;
             }

File: src/main/java/de/neemann/digital/core/Model.java
Patch:
@@ -165,7 +165,7 @@ public void doStep(boolean noise) throws NodeException {
         int counter = 0;
         while (needsUpdate()) {
             if (counter++ > MAX_COUNTER) {
-                throw new NodeException(Lang.get("err_seemsToOscillate"), nodesToUpdateNext.get(0));
+                throw new NodeException(Lang.get("err_seemsToOscillate")).addNodes(nodesToUpdateNext);
             }
             doMicroStep(noise);
         }
@@ -236,7 +236,7 @@ public int runToBreak() throws NodeException {
             }
             lastIn = brIn;
         }
-        throw new NodeException(Lang.get("err_breakTimeOut", aBreak.getCycles()), null, brVal);
+        throw new NodeException(Lang.get("err_breakTimeOut", aBreak.getCycles()), brVal);
     }
 
     /**

File: src/main/java/de/neemann/digital/core/Model.java
Patch:
@@ -114,7 +114,7 @@ public void doStep(boolean noise) throws NodeException {
 
     /**
      * Performs a micro step in the model
-     * <p/>
+     *
      * Typical usage is a loop like:
      * <pre>
      * while (needsUpdate())
@@ -155,7 +155,7 @@ public void doMicroStep(boolean noise) throws NodeException {
 
     /**
      * Asks if an update is necessary.
-     * <p/>
+     *
      * Typical usage is a loop like:
      * <pre>
      * while (needsUpdate())

File: src/main/java/de/neemann/gui/ClosingWindowListener.java
Patch:
@@ -8,7 +8,7 @@
 import java.awt.event.WindowEvent;
 
 /**
- * Frame needs to be set to {@link WindowConstants.DO_NOTHING_ON_CLOSE} to work.
+ * Frame needs to be set to DO_NOTHING_ON_CLOSE to work.
  * Closing should by done by the {@link GUICloser#closeGUI()}.
  *
  * @author hneemann

File: src/main/java/de/neemann/digital/core/element/AttributeKey.java
Patch:
@@ -30,7 +30,6 @@ public class AttributeKey<VALUE> {
     public static final AttributeKey<Boolean> ValueIsProbe = new AttributeKey<>("valueIsProbe", Lang.get("key_valueIsProbe"), false);
     public static final AttributeKey<Boolean> ShowList = new AttributeKey<>("showList", Lang.get("key_showList"), false);
 
-
     private final String key;
     private final VALUE def;
     private final String name;
@@ -71,7 +70,7 @@ private AttributeKeyInteger(String key, String name, Integer def) {
             super(key, name, def);
         }
 
-        public AttributeKeyInteger setComboBoxValues(Integer[] values) {
+        private AttributeKeyInteger setComboBoxValues(Integer[] values) {
             this.values = values;
             return this;
         }

File: src/main/java/de/neemann/digital/gui/Main.java
Patch:
@@ -176,12 +176,10 @@ public void actionPerformed(ActionEvent e) {
             }
         };
 
-
         JMenu export = new JMenu(Lang.get("menu_export"));
         export.add(new ExportAction(Lang.get("menu_exportSVG"), "svg", GraphicSVGIndex::new));
         export.add(new ExportAction(Lang.get("menu_exportSVGLaTex"), "svg", GraphicSVGLaTeX::new));
 
-
         JMenu file = new JMenu(Lang.get("menu_file"));
         bar.add(file);
         file.add(newFile);
@@ -322,7 +320,7 @@ public void actionPerformed(ActionEvent e) {
 
         toolBar.addSeparator();
 
-        librarySelector = new LibrarySelector(library, shapeFactory);
+        librarySelector = new LibrarySelector(library, shapeFactory, elementState);
         bar.add(librarySelector.buildMenu(new InsertHistory(toolBar), circuitComponent));
 
         getContentPane().add(toolBar, BorderLayout.NORTH);

File: src/main/java/de/neemann/digital/gui/components/CircuitComponent.java
Patch:
@@ -140,8 +140,8 @@ public void removeHighLighted() {
     }
 
     public void setPartToDrag(VisualElement part) {
-        setModeAndReset(Mode.part);
-        ((PartMouseListener) listener).setPartToInsert(part);
+        if (listener instanceof PartMouseListener)
+            ((PartMouseListener) listener).setPartToInsert(part);
     }
 
     @Override

File: src/test/java/de/neemann/digital/integration/TestNesting.java
Patch:
@@ -63,7 +63,7 @@ private void runTheAndTest(String file) throws IOException, NodeException, PinEx
 
     private TestExecuter createTestExecuterForNesting(String file) throws IOException, NodeException, PinException {
         ElementLibrary library = new ElementLibrary();
-        LibrarySelector librarySelector = new LibrarySelector(library, new ShapeFactory(library));
+        LibrarySelector librarySelector = new LibrarySelector(library, new ShapeFactory(library), null);
         librarySelector.setFilePath(new File(Resources.getRoot(), "dig"));
         return TestExecuter.createFromFile(file, library);
     }

File: src/main/java/de/neemann/digital/core/Model.java
Patch:
@@ -205,10 +205,8 @@ public void addReset(Reset reset) {
     }
 
     public void addSignal(String name, ObservableValue value) {
-        if (name != null && name.length() > 0) {
+        if (name != null && name.length() > 0 && value != null)
             signals.add(new Signal(name, value));
-            System.out.println(name + ": " + value);
-        }
     }
 
     public int runToBreak() throws NodeException {

File: src/main/java/de/neemann/digital/gui/Main.java
Patch:
@@ -446,7 +446,7 @@ private void loadFile(File filename, boolean toPrefs) {
         try {
             librarySelector.setFilePath(filename.getParentFile());
             Circuit circ = Circuit.loadCircuit(filename, shapeFactory);
-            clearModelDescription();
+            elementState.activate();
             circuitComponent.setCircuit(circ);
             setFilename(filename, toPrefs);
         } catch (Exception e) {

File: src/main/java/de/neemann/digital/draw/elements/Circuit.java
Patch:
@@ -8,6 +8,7 @@
 import de.neemann.digital.core.element.AttributeKey;
 import de.neemann.digital.core.element.ElementAttributes;
 import de.neemann.digital.core.element.ElementTypeDescription;
+import de.neemann.digital.core.element.Rotation;
 import de.neemann.digital.core.io.In;
 import de.neemann.digital.core.io.Out;
 import de.neemann.digital.core.memory.DataField;
@@ -45,6 +46,8 @@ private static XStream getxStream() {
         xStream.alias("visualElement", VisualElement.class);
         xStream.alias("wire", Wire.class);
         xStream.alias("circuit", Circuit.class);
+        xStream.alias("rotation", Rotation.class);
+        xStream.aliasAttribute(Rotation.class, "rotation", "rotation");
         xStream.alias("vector", Vector.class);
         xStream.aliasAttribute(Vector.class, "x", "x");
         xStream.aliasAttribute(Vector.class, "y", "y");

File: src/test/java/de/neemann/digital/draw/graphics/GraphicSVGIndexTest.java
Patch:
@@ -9,7 +9,7 @@ public class GraphicSVGIndexTest extends TestCase {
     public void testFormatText() throws Exception {
         GraphicSVGIndex gs = new GraphicSVGIndex(System.out, new Vector(0, 0), new Vector(30, 30), null, 30);
 
-        assertEquals("Z<tspan style=\"font-size:80%;baseline-shift:sub\">0</tspan>", gs.formatText("Z0", 0));
+        assertEquals("Z<tspan style=\"font-size:80%;baseline-shift:sub\">0</tspan>", gs.formatText("Z_0", 0));
         assertEquals("&lt;a&gt;", gs.formatText("<a>", 0));
     }
 

File: src/main/java/de/neemann/digital/gui/LibrarySelector.java
Patch:
@@ -108,7 +108,7 @@ public InsertAction(String name, InsertHistory insertHistory, CircuitComponent c
 
         @Override
         public void actionPerformed(ActionEvent e) {
-            VisualElement visualElement = new VisualElement(name).setPos(new Vector(10, 10));
+            VisualElement visualElement = new VisualElement(name).setPos(new Vector(10, 10)).setShapeFactory(shapeFactory);
             circuitComponent.setPartToDrag(visualElement);
             insertHistory.add(this);
         }

File: src/main/java/de/neemann/digital/draw/shapes/MissingShape.java
Patch:
@@ -36,6 +36,7 @@ public Interactor applyStateMonitor(IOState ioState, Observer guiObserver) {
     @Override
     public void drawTo(Graphic graphic) {
         Style style = Style.SHAPE_PIN;
+        graphic.drawLine(new Vector(0, 0), new Vector(0, style.getFontSize()), style);
         graphic.drawText(new Vector(0, 0), new Vector(1, 0), message, Orientation.LEFTBOTTOM, style);
         if (cause != null && cause.length() > 0)
             graphic.drawText(new Vector(0, style.getFontSize()), new Vector(1, style.getFontSize()), cause, Orientation.LEFTBOTTOM, style);

File: src/main/java/de/neemann/digital/gui/Main.java
Patch:
@@ -53,15 +53,15 @@ public class Main extends JFrame implements ClosingWindowListener.ConfirmSave {
     private Model model;
     private ModelDescription modelDescription;
 
-    public Main(File filename) {
+    public Main(File fileToOpen) {
         super(Lang.get("digital"));
         setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
 
         Circuit cr = new Circuit();
         circuitComponent = new CircuitComponent(cr, library);
 
-        if (filename != null) {
-            SwingUtilities.invokeLater(() -> loadFile(filename));
+        if (fileToOpen != null) {
+            SwingUtilities.invokeLater(() -> loadFile(fileToOpen));
         } else {
             String name = prefs.get("name", null);
             if (name != null) {

File: src/main/java/de/neemann/digital/core/HighZException.java
Patch:
@@ -1,11 +1,13 @@
 package de.neemann.digital.core;
 
+import de.neemann.digital.lang.Lang;
+
 /**
  * @author hneemann
  */
 public class HighZException extends RuntimeException {
 
     public HighZException(ObservableValue... causedObservable) {
-        super("readOfHighZ");
+        super(Lang.get("err_readOfHighZ"));
     }
 }

File: src/main/java/de/neemann/digital/core/element/AttributeKey.java
Patch:
@@ -18,7 +18,7 @@ public class AttributeKey<VALUE> {
     public static final AttributeKey<String> OutputSplit = new AttributeKey<>("Output Splitting", Lang.get("key_outputSplitting"), "");
     public static final AttributeKey<Integer> Frequency = new AttributeKey<>("Frequency", Lang.get("key_frequency"), 1);
     public static final AttributeKey<Integer> SelectorBits = new AttributeKey<>("Selector Bits", Lang.get("key_selectorBits"), 1);
-    public static final AttributeKey<Integer> AddrBits = new AttributeKey<>("Addr Bits", Lang.get("key_addrBits"), 1);
+    public static final AttributeKey<Integer> AddrBits = new AttributeKey<>("Addr Bits", Lang.get("key_addrBits"), InputCount.getDefault());
     public static final AttributeKey<Boolean> Signed = new AttributeKey<>("Signed", Lang.get("key_signed"), false);
     public static final AttributeKey<DataField> Data = new AttributeKey<>("Data", Lang.get("key_data"), DataField.DEFAULT);
 

File: src/main/java/de/neemann/digital/core/memory/LookUpTable.java
Patch:
@@ -30,13 +30,12 @@ public String[] getInputNames(ElementAttributes elementAttributes) {
             .setShortName("LUT");
 
     private final DataField data;
-    private final int bits;
     private final ObservableValue output;
     private ObservableValue[] inputs;
     private int addr;
 
     public LookUpTable(ElementAttributes attr) {
-        bits = attr.get(AttributeKey.Bits);
+        int bits = attr.get(AttributeKey.Bits);
         output = new ObservableValue("out", bits);
         data = attr.get(AttributeKey.Data);
     }

File: src/main/java/de/neemann/digital/gui/draw/shapes/GenericShape.java
Patch:
@@ -120,7 +120,7 @@ public void drawTo(Graphic graphic) {
                     graphic.drawText(p.getPos().add(-2, 0), p.getPos().add(5, 0), p.getName(), Orientation.RIGHTCENTER, Style.SHAPE_PIN);
             }
         }
-        if (name.length() <= 3) {
+        if (name.length() <= 3 && !showPinLabels) {
             Vector pos = new Vector(SIZE2 * width, -SIZE2 + 2);
             graphic.drawText(pos, pos.add(1, 0), name, Orientation.CENTERTOP, Style.NORMAL);
         } else {

File: src/main/java/de/neemann/digital/gui/draw/shapes/ClockShape.java
Patch:
@@ -31,6 +31,7 @@ public Pins getPins() {
 
     @Override
     public Interactor applyStateMonitor(IOState ioState, Observer guiObserver) {
+        ioState.getOutput(0).addObserver(guiObserver); // necessary to replot wires also if component itself does not depend on state
         return new Interactor() {
             @Override
             public void clicked(CircuitComponent cc, Point pos, IOState ioState) {

File: src/main/java/de/neemann/digital/gui/draw/elements/Circuit.java
Patch:
@@ -36,10 +36,10 @@ private static XStream getxStream() {
         xStream.alias("wire", Wire.class);
         xStream.alias("circuit", Circuit.class);
         xStream.alias("vector", Vector.class);
-        xStream.alias("key", AttributeKey.class);
-        xStream.addImplicitCollection(ElementAttributes.class, "attributes");
         xStream.aliasAttribute(Vector.class, "x", "x");
         xStream.aliasAttribute(Vector.class, "y", "y");
+        //xStream.alias("key", AttributeKey.class);
+        xStream.addImplicitCollection(ElementAttributes.class, "attributes");
         return xStream;
     }
 

File: src/main/java/de/neemann/digital/gui/components/EditorFactory.java
Patch:
@@ -15,7 +15,7 @@ private EditorFactory() {
         add(Integer.class, new EditorString<Integer>() {
             @Override
             public Integer toValue(String text) {
-                return Integer.parseInt(text);
+                return Integer.decode(text);
             }
         });
         add(Double.class, new EditorString<Double>() {

File: src/main/java/de/neemann/digital/core/element/ElementTypeDescription.java
Patch:
@@ -99,7 +99,7 @@ public String getName() {
 
     /**
      * Returns the names of the inputs which are needed by this element.
-     * If you need a list of outputs names you can create a element using <code>createPart()</code>
+     * If you need a list of outputs names you can create a element using <code>createElement()</code>
      * and request the outputs by calling the elements <code>getOutputs()</code> method.
      * The you get an array of <code>ObservableName</code>s, and <code>ObservableName</code> has a
      * field <code>name</code>.
@@ -117,7 +117,7 @@ public String[] getInputNames(ElementAttributes elementAttributes) {
      * @param elementAttributes the elements attributes
      * @return the Part instance
      */
-    public Element createPart(ElementAttributes elementAttributes) {
+    public Element createElement(ElementAttributes elementAttributes) {
         return partFactory.create(elementAttributes);
     }
 }

File: src/main/java/de/neemann/digital/gui/components/CircuitComponent.java
Patch:
@@ -273,7 +273,7 @@ public void mouseClicked(MouseEvent e) {
                 for (VisualElement vp : circuit.getParts())
                     if (vp.matches(pos)) {
                         String name = vp.getElementName();
-                        ArrayList<AttributeKey> list = library.getPartType(name).getAttributeList();
+                        ArrayList<AttributeKey> list = library.getElementType(name).getAttributeList();
                         if (list.size() > 0) {
                             Point p = new Point(e.getX(), e.getY());
                             SwingUtilities.convertPointToScreen(p, CircuitComponent.this);

File: src/main/java/de/neemann/digital/gui/draw/library/PartLibrary.java
Patch:
@@ -67,7 +67,7 @@ private void add(ElementTypeDescription description, String treePath) {
         list.add(new PartContainer(name, treePath));
     }
 
-    public ElementTypeDescription getPartType(String partName) {
+    public ElementTypeDescription getElementType(String partName) {
         ElementTypeDescription pd = map.get(partName);
         if (pd == null)
             throw new RuntimeException("element " + partName + " not found");

File: src/main/java/de/neemann/digital/gui/draw/shapes/ShapeFactory.java
Patch:
@@ -67,7 +67,7 @@ public PartLibrary setLibrary(PartLibrary library) {
     }
 
     private String[] outputNames(ElementTypeDescription description, ElementAttributes attributes) {
-        ObservableValue[] o = description.createPart(attributes).getOutputs();
+        ObservableValue[] o = description.createElement(attributes).getOutputs();
         String[] names = new String[o.length];
         for (int i = 0; i < names.length; i++)
             names[i] = o[i].getName();
@@ -80,7 +80,7 @@ public Shape getShape(String partName, ElementAttributes elementAttributes) {
             if (library == null)
                 throw new RuntimeException("no shape for " + partName);
             else {
-                ElementTypeDescription pt = library.getPartType(partName);
+                ElementTypeDescription pt = library.getElementType(partName);
                 return new GenericShape(pt.getShortName(), pt.getInputNames(elementAttributes), outputNames(pt, elementAttributes), true);
             }
         } else

File: src/main/java/de/neemann/digital/core/BitsException.java
Patch:
@@ -4,7 +4,7 @@
  * @author hneemann
  */
 public class BitsException extends NodeException {
-    public BitsException(String message, ObservableValue... values) {
-        super(message, values);
+    public BitsException(String message, Node node, ObservableValue... values) {
+        super(message, node, values);
     }
 }

File: src/main/java/de/neemann/digital/core/BurnException.java
Patch:
@@ -4,7 +4,7 @@
  * @author hneemann
  */
 public class BurnException extends NodeException {
-    public BurnException(ObservableValue... values) {
-        super("burnException", values);
+    public BurnException(Node node, ObservableValue... values) {
+        super("burnException", node, values);
     }
 }

File: src/main/java/de/neemann/digital/core/Model.java
Patch:
@@ -80,10 +80,10 @@ public void doStep() throws NodeException {
     public void doStep(boolean noise) throws NodeException {
         int counter = 0;
         while (needsUpdate()) {
-            doMicroStep(noise);
             if (counter++ > maxCounter) {
-                throw new NodeException("seemsToOscillate");
+                throw new NodeException("seemsToOscillate", nodesToUpdateNext.get(0));
             }
+            doMicroStep(noise);
         }
     }
 

File: src/main/java/de/neemann/digital/core/SpeedTest.java
Patch:
@@ -18,9 +18,9 @@ public SpeedTest(Model model) {
     public double calculate() throws NodeException {
         ArrayList<Clock> clocks = model.getClocks();
         if (clocks.isEmpty())
-            throw new NodeException("NoClockFound");
+            throw new NodeException("NoClockFound", null);
         else if (clocks.size() > 1)
-            throw new NodeException("MoreThenOneClocksFound");
+            throw new NodeException("MoreThenOneClocksFound", null);
 
 
         Clock clock = clocks.get(0);

File: src/main/java/de/neemann/digital/core/arithmetic/Add.java
Patch:
@@ -58,13 +58,13 @@ public void setInputs(ObservableValue... inputs) throws BitsException {
         c_in = inputs[2].addObserver(this);
 
         if (a.getBits() != bits)
-            throw new BitsException("wrongBitCount", a);
+            throw new BitsException("wrongBitCount", this, a);
 
         if (b.getBits() != bits)
-            throw new BitsException("wrongBitCount", b);
+            throw new BitsException("wrongBitCount", this, b);
 
         if (c_in.getBits() != 1)
-            throw new BitsException("carryIsABit", c_in);
+            throw new BitsException("carryIsABit", this, c_in);
     }
 
     @Override

File: src/main/java/de/neemann/digital/core/basic/XOr.java
Patch:
@@ -42,10 +42,10 @@ public void setInputs(ObservableValue... inputs) throws BitsException {
         b = inputs[1].addObserver(this);
 
         if (a.getBits() != bits)
-            throw new BitsException("wrongBitCount", a);
+            throw new BitsException("wrongBitCount", this, a);
 
         if (b.getBits() != bits)
-            throw new BitsException("wrongBitCount", b);
+            throw new BitsException("wrongBitCount", this, b);
     }
 
     @Override

File: src/main/java/de/neemann/digital/core/flipflops/D_FF.java
Patch:
@@ -53,10 +53,10 @@ public void setInputs(ObservableValue... inputs) throws BitsException {
         clockVal = inputs[1].addObserver(this);
 
         if (dVal.getBits() != bits)
-            throw new BitsException("wrongBitCount", dVal);
+            throw new BitsException("wrongBitCount", this, dVal);
 
         if (clockVal.getBits() != 1)
-            throw new BitsException("clockIsABit", clockVal);
+            throw new BitsException("clockIsABit", this, clockVal);
     }
 
     @Override

File: src/main/java/de/neemann/digital/core/flipflops/JK_FF.java
Patch:
@@ -57,13 +57,13 @@ public void setInputs(ObservableValue... inputs) throws BitsException {
         kVal = inputs[2].addObserver(this);
 
         if (jVal.getBits() != 1)
-            throw new BitsException("wrongBitCount", jVal);
+            throw new BitsException("wrongBitCount", this, jVal);
 
         if (kVal.getBits() != 1)
-            throw new BitsException("wrongBitCount", kVal);
+            throw new BitsException("wrongBitCount", this, kVal);
 
         if (clockVal.getBits() != 1)
-            throw new BitsException("carryIsABit", clockVal);
+            throw new BitsException("carryIsABit", this, clockVal);
     }
 
     @Override

File: src/main/java/de/neemann/digital/core/flipflops/RS_FF.java
Patch:
@@ -56,13 +56,13 @@ public void setInputs(ObservableValue... inputs) throws BitsException {
         kVal = inputs[2].addObserver(this);
 
         if (jVal.getBits() != 1)
-            throw new BitsException("wrongBitCount", jVal);
+            throw new BitsException("wrongBitCount", this, jVal);
 
         if (kVal.getBits() != 1)
-            throw new BitsException("wrongBitCount", kVal);
+            throw new BitsException("wrongBitCount", this, kVal);
 
         if (clockVal.getBits() != 1)
-            throw new BitsException("carryIsABit", clockVal);
+            throw new BitsException("carryIsABit", this, clockVal);
     }
 
     @Override

File: src/main/java/de/neemann/digital/core/flipflops/T_FF.java
Patch:
@@ -48,7 +48,7 @@ public void setInputs(ObservableValue... inputs) throws BitsException {
         clockVal = inputs[0].addObserver(this);
 
         if (clockVal.getBits() != 1)
-            throw new BitsException("carryIsABit", clockVal);
+            throw new BitsException("carryIsABit", this, clockVal);
     }
 
     @Override

File: src/main/java/de/neemann/digital/core/io/Const.java
Patch:
@@ -26,7 +26,7 @@ public Const(ElementAttributes attributes) {
 
     @Override
     public void setInputs(ObservableValue... inputs) throws NodeException {
-        throw new NodeException("no inputs available!");
+        throw new NodeException("no inputs available!", null);
     }
 
     @Override

File: src/main/java/de/neemann/digital/core/io/In.java
Patch:
@@ -27,7 +27,7 @@ public In(ElementAttributes attributes) {
 
     @Override
     public void setInputs(ObservableValue... inputs) throws NodeException {
-        throw new NodeException("no inputs available!");
+        throw new NodeException("no inputs available!", null);
     }
 
     @Override

File: src/main/java/de/neemann/digital/core/wiring/Clock.java
Patch:
@@ -29,7 +29,7 @@ public Clock(ElementAttributes attributes) {
 
     @Override
     public void setInputs(ObservableValue... inputs) throws NodeException {
-        throw new NodeException("no inputs available!");
+        throw new NodeException("no inputs available!", null);
     }
 
     @Override

File: src/main/java/de/neemann/digital/core/wiring/Delay.java
Patch:
@@ -45,7 +45,7 @@ public void setInputs(ObservableValue... inputs) throws NodeException {
         input = inputs[0].addObserver(this);
 
         if (input.getBits() != bits)
-            throw new BitsException("wrongBitCountInDelay", input, output);
+            throw new BitsException("wrongBitCountInDelay", this, input, output);
     }
 
     @Override

File: src/main/java/de/neemann/digital/core/wiring/Multiplexer.java
Patch:
@@ -25,7 +25,7 @@ public Multiplexer(int dataBits, int selectorBits) {
     public void readInputs() throws NodeException {
         int n = (int) selector.getValue();
         if (n >= inputs.size())
-            throw new NodeException("multiplexerSelectsNotPresentInput");
+            throw new NodeException("multiplexerSelectsNotPresentInput", this);
 
         value = inputs.get(n).getValue();
     }
@@ -42,6 +42,6 @@ public void setInputs(ObservableValue... inputs) throws NodeException {
         super.setInputs(Arrays.copyOfRange(inputs, 0, inputs.length - 1));
 
         if (selector.getBits() != selectorBits)
-            throw new BitsException("selectorMismatch", selector);
+            throw new BitsException("selectorMismatch", this, selector);
     }
 }

File: src/main/java/de/neemann/digital/gui/components/CircuitComponent.java
Patch:
@@ -307,7 +307,7 @@ public void setPartToInsert(VisualElement partToInsert) {
 
         @Override
         public void drawTo(Graphic gr) {
-            if (partToInsert != null)
+            if (partToInsert != null && !autoPick)
                 partToInsert.drawTo(gr);
         }
     }

File: src/main/java/de/neemann/digital/core/io/In.java
Patch:
@@ -15,11 +15,13 @@ public class In implements Part {
 
     public static final PartTypeDescription DESCRIPTION = new PartTypeDescription(In.class)
             .addAttribute(AttributeKey.Bits)
-            .addAttribute(AttributeKey.Label);
+            .addAttribute(AttributeKey.Label)
+            .addAttribute(AttributeKey.Default);
     private final ObservableValue output;
 
     public In(PartAttributes attributes) {
         output = new ObservableValue("out", attributes.get(AttributeKey.Bits));
+        output.setValue(attributes.get(AttributeKey.Default));
     }
 
     @Override

File: src/main/java/de/neemann/digital/core/part/AttributeKey.java
Patch:
@@ -9,6 +9,7 @@ public class AttributeKey<VALUE> {
     public static final AttributeKey<Integer> InputCount = new AttributeKey<>("Inputs", 2);
     public static final AttributeKey<String> Label = new AttributeKey<>("Label", "");
     public static final AttributeKey<Integer> Value = new AttributeKey<>("Value", 1);
+    public static final AttributeKey<Integer> Default = new AttributeKey<>("Default", 0);
     public static final AttributeKey<java.awt.Color> Color = new AttributeKey<>("Color", java.awt.Color.RED);
 
     private final String name;

File: src/test/java/de/neemann/digital/core/wiring/MultiplexerTest.java
Patch:
@@ -20,7 +20,7 @@ public void testMux() throws Exception {
         ObservableValue d = new ObservableValue("d", 4);
         ObservableValue sel = new ObservableValue("sel", 2);
         FanIn out = model.add(new Multiplexer(4, 2));
-        out.setInputs(sel, a, b, c, d);
+        out.setInputs(a, b, c, d, sel);
 
 
         TestExecuter te = new TestExecuter(model).setInputs(a, b, c, d, sel).setOutputs(out.getOutputs());

File: src/main/java/de/neemann/digital/gui/draw/parts/Circuit.java
Patch:
@@ -94,6 +94,7 @@ public void delete(Vector min, Vector max) {
                     it.remove();
             }
         }
+        dots = null;
     }
 
     public ArrayList<Wire> getWires() {

File: src/main/java/de/neemann/digital/gui/draw/parts/Wire.java
Patch:
@@ -10,10 +10,9 @@
  * @author hneemann
  */
 public class Wire implements Drawable, Moveable {
-
     public Vector p1;
     public Vector p2;
-    private ObservableValue value;
+    private transient ObservableValue value;
 
     public Wire(Vector p1, Vector p2) {
         this.p1 = p1;

File: src/main/java/de/neemann/digital/gui/Main.java
Patch:
@@ -82,11 +82,11 @@ private interface DescriptionFactory {
         PartDescription create(int inputs);
     }
 
-    private class InsertAction extends AbstractAction {
+    private class InsertAction extends ToolTipAction {
         private final PartDescription partDescription;
 
         public InsertAction(String name, PartDescription partDescription) {
-            super(name);
+            super(name, new VisualPart(partDescription).createIcon(60));
             this.partDescription = partDescription;
         }
 

