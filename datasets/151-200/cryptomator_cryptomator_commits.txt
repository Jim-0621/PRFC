File: src/main/java/org/cryptomator/common/vaults/Vault.java
Patch:
@@ -115,11 +115,10 @@ private CryptoFileSystem createCryptoFileSystem(MasterkeyLoader keyLoader) throw
 			flags.add(FileSystemFlags.READONLY);
 		} else if (vaultSettings.maxCleartextFilenameLength.get() == -1) {
 			LOG.debug("Determining cleartext filename length limitations...");
-			var checker = new FileSystemCapabilityChecker();
 			int shorteningThreshold = configCache.get().allegedShorteningThreshold();
-			int ciphertextLimit = checker.determineSupportedCiphertextFileNameLength(getPath());
+			int ciphertextLimit = FileSystemCapabilityChecker.determineSupportedCiphertextFileNameLength(getPath());
 			if (ciphertextLimit < shorteningThreshold) {
-				int cleartextLimit = checker.determineSupportedCleartextFileNameLength(getPath());
+				int cleartextLimit = FileSystemCapabilityChecker.determineSupportedCleartextFileNameLength(getPath());
 				vaultSettings.maxCleartextFilenameLength.set(cleartextLimit);
 			} else {
 				vaultSettings.maxCleartextFilenameLength.setValue(UNLIMITED_FILENAME_LENGTH);

File: src/main/java/org/cryptomator/ui/error/ErrorComponent.java
Patch:
@@ -20,6 +20,8 @@ public interface ErrorComponent {
 	default Stage show() {
 		Stage stage = window();
 		stage.setScene(scene());
+		stage.setMinWidth(420);
+		stage.setMinHeight(300);
 		stage.show();
 		return stage;
 	}

File: src/main/java/org/cryptomator/ui/health/HealthCheckComponent.java
Patch:
@@ -25,6 +25,8 @@ public interface HealthCheckComponent {
 	default Stage showHealthCheckWindow() {
 		Stage stage = window();
 		stage.setScene(startScene().get());
+		stage.setMinWidth(420);
+		stage.setMinHeight(300);
 		stage.show();
 		return stage;
 	}

File: src/main/java/org/cryptomator/ui/controls/CustomDialog.java
Patch:
@@ -5,7 +5,6 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import javax.inject.Inject;
 import javafx.fxml.FXMLLoader;
 import javafx.scene.Parent;
 import javafx.scene.Scene;
@@ -59,7 +58,8 @@ public void showAndWait() {
 
 	private String resolveText(String key, String[] args) {
 		if (key == null || key.isEmpty() || !resourceBundle.containsKey(key)) {
-			throw new IllegalArgumentException(String.format("Invalid key: '%s'. Key not found in ResourceBundle.", key));		}
+			throw new IllegalArgumentException(String.format("Invalid key: '%s'. Key not found in ResourceBundle.", key));
+		}
 		String text = resourceBundle.getString(key);
 		try {
 			return args != null && args.length > 0 ? String.format(text, (Object[]) args) : text;

File: src/main/java/module-info.java
Patch:
@@ -49,6 +49,7 @@
 
 	/* dagger bs */
 	requires jakarta.inject;
+	requires static javax.inject;
 	requires java.compiler;
 
 	uses org.cryptomator.common.locationpresets.LocationPresetsProvider;

File: src/main/java/org/cryptomator/ui/mainwindow/MainWindowSceneFactory.java
Patch:
@@ -30,9 +30,7 @@ public MainWindowSceneFactory(Settings settings, @MainWindow Stage window, Lazy<
 
 	@Override
 	protected void setupDefaultAccelerators(Scene scene, Stage stage) {
-		if (SystemUtils.IS_OS_WINDOWS) {
-			scene.getAccelerators().put(ALT_F4, window::close);
-		} else {
+		if (!SystemUtils.IS_OS_WINDOWS) {
 			scene.getAccelerators().put(SHORTCUT_W, window::close);
 		}
 		scene.getAccelerators().put(SHORTCUT_N, vaultListController.get()::didClickAddNewVault);

File: src/main/java/org/cryptomator/ui/preferences/SupporterCertificateController.java
Patch:
@@ -13,6 +13,7 @@
 import javafx.fxml.FXML;
 import javafx.scene.control.TextArea;
 import javafx.scene.control.TextFormatter;
+import javafx.stage.Stage;
 
 @PreferencesScoped
 public class SupporterCertificateController implements FxController {

File: src/main/java/module-info.java
Patch:
@@ -42,6 +42,7 @@
 	requires com.nulabinc.zxcvbn;
 	requires com.tobiasdiez.easybind;
 	requires dagger;
+	requires java.compiler;
 	requires io.github.coffeelibs.tinyoauth2client;
 	requires org.slf4j;
 	requires org.apache.commons.lang3;

File: src/main/java/org/cryptomator/common/settings/SettingsJson.java
Patch:
@@ -90,5 +90,5 @@ class SettingsJson {
 	boolean useQuickAccess = Settings.DEFAULT_USE_QUICKACCESS;
 
 	@JsonProperty("quickAccessService")
-	String quickAccessService;
+	String quickAccessService = Settings.DEFAULT_QUICKACCESS_SERVICE;
 }

File: src/main/java/org/cryptomator/ui/preferences/PreferencesController.java
Patch:
@@ -37,7 +37,7 @@ public PreferencesController(Environment env, @PreferencesWindow Stage window, O
 		this.env = env;
 		this.window = window;
 		this.selectedTabProperty = selectedTabProperty;
-		this.updateAvailable = updateChecker.latestVersionProperty().isNotNull();
+		this.updateAvailable = updateChecker.updateAvailableProperty();
 	}
 
 	@FXML

File: src/main/java/org/cryptomator/ui/mainwindow/MainWindowModule.java
Patch:
@@ -15,7 +15,6 @@
 import org.cryptomator.ui.common.StageFactory;
 import org.cryptomator.ui.common.StageInitializer;
 import org.cryptomator.ui.fxapp.PrimaryStage;
-import org.cryptomator.ui.health.HealthCheckComponent;
 import org.cryptomator.ui.migration.MigrationComponent;
 import org.cryptomator.ui.removevault.RemoveVaultComponent;
 import org.cryptomator.ui.stats.VaultStatisticsComponent;
@@ -28,7 +27,6 @@
 import javafx.scene.Scene;
 import javafx.stage.Modality;
 import javafx.stage.Stage;
-import javafx.stage.StageStyle;
 import java.util.Map;
 import java.util.ResourceBundle;
 

File: src/main/java/org/cryptomator/ui/mainwindow/VaultListController.java
Patch:
@@ -124,9 +124,7 @@ public void initialize() {
 			}
 		});
 
-		vaults.addListener((ListChangeListener<Vault>) c -> {
-			vaultList.prefHeightProperty().bind(vaultList.fixedCellSizeProperty().multiply(vaultList.getItems().size()));
-			});
+		vaults.addListener((ListChangeListener<Vault>) _ -> vaultList.prefHeightProperty().bind(vaultList.fixedCellSizeProperty().multiply(vaultList.getItems().size())));
 
 		selectedVault.bind(vaultList.getSelectionModel().selectedItemProperty());
 		vaults.addListener((ListChangeListener.Change<? extends Vault> c) -> {

File: src/main/java/org/cryptomator/ui/common/FxmlFile.java
Patch:
@@ -12,6 +12,7 @@ public enum FxmlFile {
 	CONVERTVAULT_HUBTOPASSWORD_START("/fxml/convertvault_hubtopassword_start.fxml"), //
 	CONVERTVAULT_HUBTOPASSWORD_CONVERT("/fxml/convertvault_hubtopassword_convert.fxml"), //
 	CONVERTVAULT_HUBTOPASSWORD_SUCCESS("/fxml/convertvault_hubtopassword_success.fxml"), //
+	DOKANY_SUPPORT_END("/fxml/dokany_support_end.fxml"), //
 	ERROR("/fxml/error.fxml"), //
 	FORGET_PASSWORD("/fxml/forget_password.fxml"), //
 	HEALTH_START("/fxml/health_start.fxml"), //

File: src/main/java/org/cryptomator/ui/fxapp/FxApplicationModule.java
Patch:
@@ -7,6 +7,7 @@
 
 import dagger.Module;
 import dagger.Provides;
+import org.cryptomator.ui.dokanysupportend.DokanySupportEndComponent;
 import org.cryptomator.ui.error.ErrorComponent;
 import org.cryptomator.ui.health.HealthCheckComponent;
 import org.cryptomator.ui.lock.LockComponent;
@@ -33,6 +34,7 @@
 		ErrorComponent.class, //
 		HealthCheckComponent.class, //
 		UpdateReminderComponent.class, //
+		DokanySupportEndComponent.class, //
 		ShareVaultComponent.class})
 abstract class FxApplicationModule {
 

File: src/main/java/org/cryptomator/ui/common/FxmlFile.java
Patch:
@@ -12,7 +12,7 @@ public enum FxmlFile {
 	CONVERTVAULT_HUBTOPASSWORD_START("/fxml/convertvault_hubtopassword_start.fxml"), //
 	CONVERTVAULT_HUBTOPASSWORD_CONVERT("/fxml/convertvault_hubtopassword_convert.fxml"), //
 	CONVERTVAULT_HUBTOPASSWORD_SUCCESS("/fxml/convertvault_hubtopassword_success.fxml"), //
-	DOKANY_INFO_DIALOG("/fxml/dokany_info.fxml"), //
+	DOKANY_SUPPORT_END_DIALOG("/fxml/dokany_support_end.fxml"), //
 	ERROR("/fxml/error.fxml"), //
 	FORGET_PASSWORD("/fxml/forget_password.fxml"), //
 	HEALTH_START("/fxml/health_start.fxml"), //

File: src/main/java/org/cryptomator/ui/dokanysupportenddialog/DokanySupportEndDialogScoped.java
Patch:
@@ -1,4 +1,4 @@
-package org.cryptomator.ui.dokanyinfodialog;
+package org.cryptomator.ui.dokanysupportenddialog;
 
 import javax.inject.Scope;
 import java.lang.annotation.Documented;
@@ -8,6 +8,6 @@
 @Scope
 @Documented
 @Retention(RetentionPolicy.RUNTIME)
-@interface DokanyInfoDialogScoped {
+@interface DokanySupportEndDialogScoped {
 
 }

File: src/main/java/org/cryptomator/ui/dokanysupportenddialog/DokanySupportEndDialogWindow.java
Patch:
@@ -1,4 +1,4 @@
-package org.cryptomator.ui.dokanyinfodialog;
+package org.cryptomator.ui.dokanysupportenddialog;
 
 import javax.inject.Qualifier;
 import java.lang.annotation.Documented;
@@ -9,6 +9,6 @@
 @Qualifier
 @Documented
 @Retention(RUNTIME)
-@interface DokanyInfoDialogWindow {
+@interface DokanySupportEndDialogWindow {
 
 }

File: src/main/java/org/cryptomator/ui/fxapp/FxApplicationModule.java
Patch:
@@ -7,7 +7,7 @@
 
 import dagger.Module;
 import dagger.Provides;
-import org.cryptomator.ui.dokanyinfodialog.DokanyInfoDialogComponent;
+import org.cryptomator.ui.dokanysupportenddialog.DokanySupportEndDialogComponent;
 import org.cryptomator.ui.error.ErrorComponent;
 import org.cryptomator.ui.health.HealthCheckComponent;
 import org.cryptomator.ui.lock.LockComponent;
@@ -34,7 +34,7 @@
 		ErrorComponent.class, //
 		HealthCheckComponent.class, //
 		UpdateReminderComponent.class, //
-		DokanyInfoDialogComponent.class, //
+		DokanySupportEndDialogComponent.class, //
 		ShareVaultComponent.class})
 abstract class FxApplicationModule {
 

File: src/main/java/org/cryptomator/common/SubstitutingProperties.java
Patch:
@@ -5,6 +5,7 @@
 
 import java.util.Map;
 import java.util.Properties;
+import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
 public class SubstitutingProperties extends PropertiesDecorator {
@@ -58,7 +59,7 @@ private String resolveFrom(String key, Source src) {
 			LoggerFactory.getLogger(SubstitutingProperties.class).warn("Variable {} used for substitution not found in {}. Replaced with empty string.", key, src);
 			return "";
 		} else {
-			return val.replace("\\", "\\\\");
+			return Matcher.quoteReplacement(val);
 		}
 	}
 

File: src/main/java/org/cryptomator/ui/updatereminder/UpdateReminderComponent.java
Patch:
@@ -38,7 +38,7 @@ default void checkAndShowUpdateReminderWindow() {
 				stage.show();
 			}
 		} catch (DateTimeParseException e) {
-			LOG.error("The date/time format is invalid:" + settings().lastUpdateCheck.get(), e);
+			LOG.error("Failed to parse last update check time '{}':", settings().lastUpdateCheck.get(), e);
 		}
 	}
 

File: src/main/java/org/cryptomator/ui/fxapp/UpdateChecker.java
Patch:
@@ -68,9 +68,9 @@ private void checkStarted(WorkerStateEvent event) {
 	private void checkSucceeded(WorkerStateEvent event) {
 		String latestVersion = updateCheckerService.getValue();
 		LOG.info("Current version: {}, latest version: {}", getCurrentVersion(), latestVersion);
-		state.set(UpdateCheckState.CHECK_SUCCESSFUL);
 		updateCheckTimeProperty.set(LocalDateTime.now());
 		latestVersionProperty.set(latestVersion);
+		state.set(UpdateCheckState.CHECK_SUCCESSFUL);
 	}
 
 	private void checkFailed(WorkerStateEvent event) {

File: src/main/java/org/cryptomator/ui/mainwindow/MainWindowTitleController.java
Patch:
@@ -46,7 +46,7 @@ public class MainWindowTitleController implements FxController {
 		this.appWindows = appWindows;
 		this.trayMenuInitialized = trayMenu.isInitialized();
 		this.updateChecker = updateChecker;
-		this.updateAvailable = updateChecker.latestVersionProperty().isNotNull();
+		this.updateAvailable = updateChecker.updateCheckStateProperty().isEqualTo(UpdateChecker.UpdateCheckState.CHECK_SUCCESSFUL).and(updateChecker.latestVersionProperty().isNotEqualTo(updateChecker.getCurrentVersion()));
 		this.licenseHolder = licenseHolder;
 		this.settings = settings;
 		this.showMinimizeButton = Bindings.createBooleanBinding(this::isShowMinimizeButton, settings.showMinimizeButton, settings.showTrayIcon);

File: src/main/java/org/cryptomator/ui/error/ErrorController.java
Patch:
@@ -75,6 +75,7 @@ public class ErrorController implements FxController {
 	private final BooleanExpression errorSolutionFound = matchingErrorDiscussion.isNotNull();
 	private final BooleanProperty isLoadingHttpResponse = new SimpleBooleanProperty();
 	private final BooleanProperty askedForLookupDatabasePermission = new SimpleBooleanProperty();
+	private final boolean formerSceneWasResizable;
 
 	@Inject
 	ErrorController(Application application, @Named("stackTrace") String stackTrace, ErrorCode errorCode, @Nullable Scene previousScene, Stage window, Environment environment, ExecutorService executorService) {
@@ -85,12 +86,14 @@ public class ErrorController implements FxController {
 		this.window = window;
 		this.environment = environment;
 		this.executorService = executorService;
+		this.formerSceneWasResizable = window.isResizable();
 	}
 
 	@FXML
 	public void back() {
 		if (previousScene != null) {
 			window.setScene(previousScene);
+			window.setResizable(formerSceneWasResizable);
 		}
 	}
 

File: src/main/java/org/cryptomator/ui/traymenu/TrayMenuModule.java
Patch:
@@ -11,7 +11,7 @@ public class TrayMenuModule {
 
 	@Provides
 	@TrayMenuScoped
-	static Optional<TrayMenuController> provideSupportedKeychainAccessProviders() {
+	static Optional<TrayMenuController> provideFirstSupportedTrayMenuController() {
 		return TrayMenuController.get();
 	}
 

File: src/main/java/org/cryptomator/ui/addvaultwizard/CreateNewVaultLocationController.java
Patch:
@@ -235,7 +235,7 @@ public ObservableValue<Boolean> validVaultPathProperty() {
 	}
 
 	public boolean isValidVaultPath() {
-		return validVaultPath.getValue();
+		return Boolean.TRUE.equals(validVaultPath.getValue());
 	}
 
 	public boolean isLoadingPresetLocations() {

File: src/main/java/org/cryptomator/ui/common/FxmlFile.java
Patch:
@@ -45,6 +45,7 @@ public enum FxmlFile {
 	REMOVE_VAULT("/fxml/remove_vault.fxml"), //
 	UPDATE_REMINDER("/fxml/update_reminder.fxml"), //
 	UNLOCK_ENTER_PASSWORD("/fxml/unlock_enter_password.fxml"),
+	UNLOCK_FUSE_RESTART_REQUIRED("/fxml/unlock_fuse_restart_required.fxml"), //
 	UNLOCK_INVALID_MOUNT_POINT("/fxml/unlock_invalid_mount_point.fxml"), //
 	UNLOCK_SELECT_MASTERKEYFILE("/fxml/unlock_select_masterkeyfile.fxml"), //
 	UNLOCK_SUCCESS("/fxml/unlock_success.fxml"), //

File: src/main/java/org/cryptomator/ui/preferences/VolumePreferencesController.java
Patch:
@@ -10,7 +10,6 @@
 import javax.inject.Inject;
 import javafx.application.Application;
 import javafx.beans.binding.Bindings;
-import javafx.beans.binding.BooleanExpression;
 import javafx.beans.value.ObservableValue;
 import javafx.scene.control.Button;
 import javafx.scene.control.ChoiceBox;

File: src/main/java/org/cryptomator/ui/unlock/UnlockWorkflow.java
Patch:
@@ -87,7 +87,7 @@ private void handleIllegalMountPointError(IllegalMountPointException impe) {
 		});
 	}
 
-	private void handleFuseRestartRequiredError(FuseRestartRequiredException fRRE) {
+	private void handleFuseRestartRequiredError() {
 		Platform.runLater(() -> {
 			window.setScene(fuseRestartRequiredScene.get());
 			window.show();
@@ -124,8 +124,8 @@ protected void failed() {
 		Throwable throwable = super.getException();
 		if(throwable instanceof IllegalMountPointException impe) {
 			handleIllegalMountPointError(impe);
-		} else if (throwable instanceof FuseRestartRequiredException e) {
-			handleFuseRestartRequiredError(e);
+		} else if (throwable instanceof FuseRestartRequiredException _) {
+			handleFuseRestartRequiredError();
 		} else {
 			handleGenericError(throwable);
 		}

File: src/main/java/org/cryptomator/common/mount/Mounter.java
Patch:
@@ -148,7 +148,7 @@ public MountHandle mount(VaultSettings vaultSettings, Path cryptoFsRoot) throws
 			firstUsedProblematicFuseMountService.set(selMntServ);
 		}
 		else if (targetIsProblematicFuse && !firstUsedProblematicFuseMountService.get().equals(selMntServ)) {
-			throw new FuseRestartRequiredException("fuseRestartRequired");
+			throw new FuseRestartRequiredException("Failed to mount the specified mount service.");
 		}
 
 		var builder = selMntServ.forFileSystem(cryptoFsRoot);

File: src/main/java/org/cryptomator/ui/common/FxmlFile.java
Patch:
@@ -25,6 +25,7 @@ public enum FxmlFile {
 	HUB_REGISTER_FAILED("/fxml/hub_register_failed.fxml"), //
 	HUB_SETUP_DEVICE("/fxml/hub_setup_device.fxml"), //
 	HUB_UNAUTHORIZED_DEVICE("/fxml/hub_unauthorized_device.fxml"), //
+	HUB_REQUIRE_ACCOUNT_INIT("/fxml/hub_require_account_init.fxml"), //
 	LOCK_FORCED("/fxml/lock_forced.fxml"), //
 	LOCK_FAILED("/fxml/lock_failed.fxml"), //
 	MAIN_WINDOW("/fxml/main_window.fxml"), //

File: src/main/java/org/cryptomator/ui/controls/FontAwesome5Icon.java
Patch:
@@ -53,6 +53,7 @@ public enum FontAwesome5Icon {
 	TIMES("\uF00D"), //
 	TRASH("\uF1F8"), //
 	UNLINK("\uf127"), //
+	USER_COG("\uf4fe"), //
 	WRENCH("\uF0AD"), //
 	WINDOW_MINIMIZE("\uF2D1"), //
 	;

File: src/main/java/org/cryptomator/ui/common/FxmlFile.java
Patch:
@@ -25,6 +25,7 @@ public enum FxmlFile {
 	HUB_REGISTER_FAILED("/fxml/hub_register_failed.fxml"), //
 	HUB_SETUP_DEVICE("/fxml/hub_setup_device.fxml"), //
 	HUB_UNAUTHORIZED_DEVICE("/fxml/hub_unauthorized_device.fxml"), //
+	HUB_REQUIRE_ACCOUNT_INIT("/fxml/hub_require_account_init.fxml"), //
 	LOCK_FORCED("/fxml/lock_forced.fxml"), //
 	LOCK_FAILED("/fxml/lock_failed.fxml"), //
 	MAIN_WINDOW("/fxml/main_window.fxml"), //

File: src/main/java/org/cryptomator/ui/controls/FontAwesome5Icon.java
Patch:
@@ -53,6 +53,7 @@ public enum FontAwesome5Icon {
 	TIMES("\uF00D"), //
 	TRASH("\uF1F8"), //
 	UNLINK("\uf127"), //
+	USER_COG("\uf4fe"), //
 	WRENCH("\uF0AD"), //
 	WINDOW_MINIMIZE("\uF2D1"), //
 	;

File: src/main/java/org/cryptomator/ui/common/FxmlFile.java
Patch:
@@ -25,6 +25,7 @@ public enum FxmlFile {
 	HUB_REGISTER_FAILED("/fxml/hub_register_failed.fxml"), //
 	HUB_SETUP_DEVICE("/fxml/hub_setup_device.fxml"), //
 	HUB_UNAUTHORIZED_DEVICE("/fxml/hub_unauthorized_device.fxml"), //
+	HUB_REQUIRE_ACCOUNT_INIT("/fxml/hub_require_account_init.fxml"), //
 	LOCK_FORCED("/fxml/lock_forced.fxml"), //
 	LOCK_FAILED("/fxml/lock_failed.fxml"), //
 	MAIN_WINDOW("/fxml/main_window.fxml"), //

File: src/main/java/org/cryptomator/ui/controls/FontAwesome5Icon.java
Patch:
@@ -53,6 +53,7 @@ public enum FontAwesome5Icon {
 	TIMES("\uF00D"), //
 	TRASH("\uF1F8"), //
 	UNLINK("\uf127"), //
+	USER_COG("\uf4fe"), //
 	WRENCH("\uF0AD"), //
 	WINDOW_MINIMIZE("\uF2D1"), //
 	;

File: src/main/java/org/cryptomator/ui/unlock/UnlockFuseRestartRequiredController.java
Patch:
@@ -16,9 +16,9 @@ public class UnlockFuseRestartRequiredController implements FxController {
 	private final FxApplicationWindows appWindows;
 	private final Vault vault;
 	@Inject
-	UnlockFuseRestartRequiredController(@UnlockWindow Stage window, //
-										FxApplicationWindows appWindows, //
-										@UnlockWindow Vault vault) {
+	UnlockFuseRestartRequiredController(@UnlockWindow Stage window,
+			FxApplicationWindows appWindows,
+			@UnlockWindow Vault vault) {
 		this.window = window;
 		this.appWindows = appWindows;
 		this.vault = vault;

File: src/main/java/org/cryptomator/ui/unlock/UnlockWorkflow.java
Patch:
@@ -96,7 +96,7 @@ private void handleIllegalMountPointError(IllegalMountPointException impe) {
 		});
 	}
 
-	private void handleFuseRestartRequiredError(FuseRestartRequiredException frre) {
+	private void handleFuseRestartRequiredError(FuseRestartRequiredException fRRE) {
 		Platform.runLater(() -> {
 			window.setScene(fuseRestartRequiredScene.get());
 			window.show();
@@ -133,8 +133,7 @@ protected void failed() {
 		Throwable throwable = super.getException();
 		if(throwable instanceof IllegalMountPointException impe) {
 			handleIllegalMountPointError(impe);
-		}
-		else if (throwable instanceof FuseRestartRequiredException fRRE) {
+		} else if (throwable instanceof FuseRestartRequiredException fRRE) {
 			handleFuseRestartRequiredError(fRRE);
 		} else {
 			handleGenericError(throwable);

File: src/main/java/org/cryptomator/common/vaults/VaultModule.java
Patch:
@@ -40,8 +40,6 @@ public AtomicReference<CryptoFileSystem> provideCryptoFileSystemReference() {
 	static ObservableValue<ActualMountService> provideMountService(VaultSettings vaultSettings, List<MountService> serviceImpls, @Named("FUPFMS") AtomicReference<MountService> fupfms) {
 		var fallbackProvider = serviceImpls.stream().findFirst().orElse(null);
 
-		LOG.debug("fallbackProvider.displayName:" + fallbackProvider.displayName());
-
 		var observableMountService = ObservableUtil.mapWithDefault(vaultSettings.mountService, //
 				desiredServiceImpl -> { //
 					var serviceFromSettings = serviceImpls.stream().filter(serviceImpl -> serviceImpl.getClass().getName().equals(desiredServiceImpl)).findAny(); //

File: src/main/java/org/cryptomator/common/ErrorCode.java
Patch:
@@ -3,6 +3,7 @@
 import com.google.common.base.Preconditions;
 import com.google.common.base.Strings;
 import com.google.common.base.Throwables;
+import org.jetbrains.annotations.VisibleForTesting;
 
 import java.util.Locale;
 import java.util.Objects;
@@ -114,7 +115,7 @@ private int traceCode(Throwable e, int frameCount) {
 	 * @param bottomFrames Other stack frames, potentially forming the bottom of the stack of <code>allFrames</code>
 	 * @return The number of additional frames in <code>allFrames</code>. In most cases this should be equal to the difference in size.
 	 */
-	// visible for testing
+	@VisibleForTesting
 	static int countTopmostFrames(StackTraceElement[] allFrames, StackTraceElement[] bottomFrames) {
 		if (allFrames.length < bottomFrames.length) {
 			// if frames had been stacked on top of bottomFrames, allFrames would be larger
@@ -124,7 +125,7 @@ static int countTopmostFrames(StackTraceElement[] allFrames, StackTraceElement[]
 		}
 	}
 
-	// visible for testing
+	@VisibleForTesting
 	static <T> int commonSuffixLength(T[] set, T[] subset) {
 		Preconditions.checkArgument(set.length >= subset.length);
 		// iterate items backwards as long as they are identical

File: src/main/java/org/cryptomator/common/locationpresets/OneDriveWindowsLocationPresetsProvider.java
Patch:
@@ -62,7 +62,7 @@ private Stream<String> queryRegistry(String keyname, List<String> moreArgs, Pred
 		ProcessBuilder command = new ProcessBuilder(args);
 		Process p = command.start();
 		waitForSuccess(p, 3, "`reg query`");
-		return p.inputReader(StandardCharsets.UTF_8).lines().filter(outputFilter);
+		return p.inputReader(StandardCharsets.ISO_8859_1).lines().filter(outputFilter);
 	}
 
 

File: src/main/java/org/cryptomator/common/settings/VaultSettings.java
Patch:
@@ -8,7 +8,7 @@
 import com.google.common.base.CharMatcher;
 import com.google.common.base.Strings;
 import com.google.common.io.BaseEncoding;
-
+import org.jetbrains.annotations.VisibleForTesting;
 import javafx.beans.Observable;
 import javafx.beans.binding.Bindings;
 import javafx.beans.binding.StringExpression;
@@ -131,7 +131,7 @@ VaultSettingsJson serialized() {
 		return json;
 	}
 
-	//visible for testing
+	@VisibleForTesting
 	static String normalizeDisplayName(String original) {
 		if (original.isBlank() || ".".equals(original) || "..".equals(original)) {
 			return "_";

File: src/main/java/org/cryptomator/launcher/FileOpenRequestHandler.java
Patch:
@@ -6,6 +6,7 @@
  *******************************************************************************/
 package org.cryptomator.launcher;
 
+import org.jetbrains.annotations.VisibleForTesting;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -48,7 +49,7 @@ public void handleLaunchArgs(List<String> args) {
 		handleLaunchArgs(FileSystems.getDefault(), args);
 	}
 
-	// visible for testing
+	@VisibleForTesting
 	void handleLaunchArgs(FileSystem fs, List<String> args) {
 		Collection<Path> pathsToOpen = args.stream().map(str -> {
 			try {

File: src/main/java/org/cryptomator/logging/LogbackConfigurator.java
Patch:
@@ -5,6 +5,7 @@
 import ch.qos.logback.classic.LoggerContext;
 import ch.qos.logback.classic.encoder.PatternLayoutEncoder;
 import ch.qos.logback.classic.spi.Configurator;
+import ch.qos.logback.classic.spi.ConfiguratorRank;
 import ch.qos.logback.classic.spi.ILoggingEvent;
 import ch.qos.logback.core.Appender;
 import ch.qos.logback.core.ConsoleAppender;
@@ -19,6 +20,7 @@
 import java.nio.file.Path;
 import java.util.Map;
 
+@ConfiguratorRank(ConfiguratorRank.CUSTOM_NORMAL_PRIORITY)
 public class LogbackConfigurator extends ContextAwareBase implements Configurator {
 
 	private static final String LOG_PATTERN = "%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n";

File: src/main/java/org/cryptomator/ui/common/FxmlFile.java
Patch:
@@ -20,9 +20,10 @@ public enum FxmlFile {
 	HUB_AUTH_FLOW("/fxml/hub_auth_flow.fxml"), //
 	HUB_INVALID_LICENSE("/fxml/hub_invalid_license.fxml"), //
 	HUB_RECEIVE_KEY("/fxml/hub_receive_key.fxml"), //
-	HUB_REGISTER_DEVICE("/fxml/hub_register_device.fxml"), //
+	HUB_LEGACY_REGISTER_DEVICE("/fxml/hub_legacy_register_device.fxml"), //
 	HUB_REGISTER_SUCCESS("/fxml/hub_register_success.fxml"), //
-	HUB_REGISTER_FAILED("/fxml/hub_register_failed.fxml"),
+	HUB_REGISTER_FAILED("/fxml/hub_register_failed.fxml"), //
+	HUB_SETUP_DEVICE("/fxml/hub_setup_device.fxml"), //
 	HUB_UNAUTHORIZED_DEVICE("/fxml/hub_unauthorized_device.fxml"), //
 	LOCK_FORCED("/fxml/lock_forced.fxml"), //
 	LOCK_FAILED("/fxml/lock_failed.fxml"), //

File: src/main/java/org/cryptomator/ui/fxapp/UpdateCheckerModule.java
Patch:
@@ -63,6 +63,7 @@ static HttpRequest provideCheckForUpdatesRequest(Environment env) {
 		return HttpRequest.newBuilder() //
 				.uri(LATEST_VERSION_URI) //
 				.header("User-Agent", userAgent) //
+				.timeout(java.time.Duration.ofSeconds(10))
 				.build();
 	}
 

File: src/main/java/org/cryptomator/ui/keyloading/hub/AuthFlowController.java
Patch:
@@ -35,13 +35,13 @@ public class AuthFlowController implements FxController {
 	private final String deviceId;
 	private final HubConfig hubConfig;
 	private final AtomicReference<String> tokenRef;
-	private final CompletableFuture<JWEObject> result;
+	private final CompletableFuture<ReceivedKey> result;
 	private final Lazy<Scene> receiveKeyScene;
 	private final ObjectProperty<URI> authUri;
 	private AuthFlowTask task;
 
 	@Inject
-	public AuthFlowController(Application application, @KeyLoading Stage window, ExecutorService executor, @Named("deviceId") String deviceId, HubConfig hubConfig, @Named("bearerToken") AtomicReference<String> tokenRef, CompletableFuture<JWEObject> result, @FxmlScene(FxmlFile.HUB_RECEIVE_KEY) Lazy<Scene> receiveKeyScene) {
+	public AuthFlowController(Application application, @KeyLoading Stage window, ExecutorService executor, @Named("deviceId") String deviceId, HubConfig hubConfig, @Named("bearerToken") AtomicReference<String> tokenRef, CompletableFuture<ReceivedKey> result, @FxmlScene(FxmlFile.HUB_RECEIVE_KEY) Lazy<Scene> receiveKeyScene) {
 		this.application = application;
 		this.window = window;
 		this.executor = executor;

File: src/main/java/org/cryptomator/ui/keyloading/hub/AuthFlowTask.java
Patch:
@@ -8,6 +8,8 @@
 import javafx.concurrent.Task;
 import java.io.IOException;
 import java.net.URI;
+import java.net.http.HttpClient;
+import java.time.Duration;
 import java.util.function.Consumer;
 
 class AuthFlowTask extends Task<String> {
@@ -34,6 +36,7 @@ public AuthFlowTask(HubConfig hubConfig, AuthFlowContext authFlowContext, Consum
 	protected String call() throws IOException, InterruptedException {
 		var response = TinyOAuth2.client(hubConfig.clientId) //
 				.withTokenEndpoint(URI.create(hubConfig.tokenEndpoint)) //
+				.withRequestTimeout(Duration.ofSeconds(10)) //
 				.authFlow(URI.create(hubConfig.authEndpoint)) //
 				.setSuccessResponse(Response.redirect(URI.create(hubConfig.authSuccessUrl + "&device=" + authFlowContext.deviceId()))) //
 				.setErrorResponse(Response.redirect(URI.create(hubConfig.authErrorUrl + "&device=" + authFlowContext.deviceId()))) //

File: src/main/java/org/cryptomator/ui/keyloading/hub/HubKeyLoadingStrategy.java
Patch:
@@ -36,11 +36,11 @@ public class HubKeyLoadingStrategy implements KeyLoadingStrategy {
 	private final KeychainManager keychainManager;
 	private final Lazy<Scene> authFlowScene;
 	private final Lazy<Scene> noKeychainScene;
-	private final CompletableFuture<JWEObject> result;
+	private final CompletableFuture<ReceivedKey> result;
 	private final DeviceKey deviceKey;
 
 	@Inject
-	public HubKeyLoadingStrategy(@KeyLoading Stage window, @FxmlScene(FxmlFile.HUB_AUTH_FLOW) Lazy<Scene> authFlowScene, @FxmlScene(FxmlFile.HUB_NO_KEYCHAIN) Lazy<Scene> noKeychainScene, CompletableFuture<JWEObject> result, DeviceKey deviceKey, KeychainManager keychainManager, @Named("windowTitle") String windowTitle) {
+	public HubKeyLoadingStrategy(@KeyLoading Stage window, @FxmlScene(FxmlFile.HUB_AUTH_FLOW) Lazy<Scene> authFlowScene, @FxmlScene(FxmlFile.HUB_NO_KEYCHAIN) Lazy<Scene> noKeychainScene, CompletableFuture<ReceivedKey> result, DeviceKey deviceKey, KeychainManager keychainManager, @Named("windowTitle") String windowTitle) {
 		this.window = window;
 		this.keychainManager = keychainManager;
 		window.setTitle(windowTitle);
@@ -60,7 +60,7 @@ public Masterkey loadKey(URI keyId) throws MasterkeyLoadingFailedException {
 			var keypair = deviceKey.get();
 			showWindow(authFlowScene);
 			var jwe = result.get();
-			return JWEHelper.decrypt(jwe, keypair.getPrivate());
+			return jwe.decryptMasterkey(keypair.getPrivate());
 		} catch (NoKeychainAccessProviderException e) {
 			showWindow(noKeychainScene);
 			throw new UnlockCancelledException("Unlock canceled due to missing prerequisites", e);

File: src/main/java/org/cryptomator/ui/keyloading/hub/RegisterFailedController.java
Patch:
@@ -12,10 +12,10 @@
 public class RegisterFailedController implements FxController {
 
 	private final Stage window;
-	private final CompletableFuture<JWEObject> result;
+	private final CompletableFuture<ReceivedKey> result;
 
 	@Inject
-	public RegisterFailedController(@KeyLoading Stage window, CompletableFuture<JWEObject> result) {
+	public RegisterFailedController(@KeyLoading Stage window, CompletableFuture<ReceivedKey> result) {
 		this.window = window;
 		this.result = result;
 	}

File: src/main/java/org/cryptomator/ui/keyloading/hub/UnauthorizedDeviceController.java
Patch:
@@ -15,10 +15,10 @@
 public class UnauthorizedDeviceController implements FxController {
 
 	private final Stage window;
-	private final CompletableFuture<JWEObject> result;
+	private final CompletableFuture<ReceivedKey> result;
 
 	@Inject
-	public UnauthorizedDeviceController(@KeyLoading Stage window, CompletableFuture<JWEObject> result) {
+	public UnauthorizedDeviceController(@KeyLoading Stage window, CompletableFuture<ReceivedKey> result) {
 		this.window = window;
 		this.result = result;
 		this.window.addEventHandler(WindowEvent.WINDOW_HIDING, this::windowClosed);

File: src/main/java/org/cryptomator/ui/recoverykey/RecoveryKeyFactory.java
Patch:
@@ -8,6 +8,7 @@
 import org.cryptomator.cryptolib.api.Masterkey;
 import org.cryptomator.cryptolib.common.MasterkeyFileAccess;
 import org.jetbrains.annotations.Nullable;
+import org.jetbrains.annotations.VisibleForTesting;
 
 import javax.inject.Inject;
 import javax.inject.Singleton;
@@ -58,7 +59,7 @@ public String createRecoveryKey(Path vaultPath, CharSequence password) throws IO
 		}
 	}
 
-	// visible for testing
+	@VisibleForTesting
 	String createRecoveryKey(byte[] rawKey) {
 		Preconditions.checkArgument(rawKey.length == 64, "key should be 64 bytes");
 		byte[] paddedKey = Arrays.copyOf(rawKey, 66);

File: src/main/java/org/cryptomator/ui/keyloading/hub/SetupDeviceController.java
Patch:
@@ -85,9 +85,9 @@ public SetupDeviceController(@KeyLoading Stage window, ExecutorService executor,
 
 	public void initialize() {
 		deviceNameField.setText(determineHostname());
-		deviceNameField.textProperty().addListener(_ -> deviceNameAlreadyExists.set(false));
+		deviceNameField.textProperty().addListener(observable -> deviceNameAlreadyExists.set(false));
 		deviceNameField.disableProperty().bind(workInProgress);
-		setupCodeField.textProperty().addListener(_ -> invalidSetupCode.set(false));
+		setupCodeField.textProperty().addListener(observable -> invalidSetupCode.set(false));
 		setupCodeField.disableProperty().bind(workInProgress);
 		var missingSetupCode = setupCodeField.textProperty().isEmpty();
 		var missingDeviceName = deviceNameField.textProperty().isEmpty();

File: src/main/java/org/cryptomator/common/locationpresets/OneDriveWindowsLocationPresetsProvider.java
Patch:
@@ -62,7 +62,7 @@ private Stream<String> queryRegistry(String keyname, List<String> moreArgs, Pred
 		ProcessBuilder command = new ProcessBuilder(args);
 		Process p = command.start();
 		waitForSuccess(p, 3, "`reg query`");
-		return p.inputReader(StandardCharsets.UTF_8).lines().filter(outputFilter);
+		return p.inputReader(StandardCharsets.ISO_8859_1).lines().filter(outputFilter);
 	}
 
 

File: src/main/java/org/cryptomator/ipc/IpcMessageListener.java
Patch:
@@ -6,7 +6,7 @@ public interface IpcMessageListener {
 
 	default void handleMessage(IpcMessage message) {
 		switch (message) {
-			case RevealRunningAppMessage _ -> revealRunningApp();
+			case RevealRunningAppMessage m -> revealRunningApp(); // TODO: rename to _ with JEP 443
 			case HandleLaunchArgsMessage m -> handleLaunchArgs(m.args());
 		}
 	}

File: src/main/java/org/cryptomator/ui/traymenu/AwtTrayMenuController.java
Patch:
@@ -109,7 +109,7 @@ private void addChildren(Menu menu, List<TrayMenuItem> items) {
 					menuItem.setEnabled(a.enabled());
 					menu.add(menuItem);
 				}
-				case SeparatorItem _ -> menu.addSeparator();
+				case SeparatorItem s -> menu.addSeparator(); // TODO: rename to _ with JEP 443
 				case SubMenuItem s -> {
 					var submenu = new Menu(s.title());
 					addChildren(submenu, s.items());

File: src/main/java/org/cryptomator/common/ErrorCode.java
Patch:
@@ -3,6 +3,7 @@
 import com.google.common.base.Preconditions;
 import com.google.common.base.Strings;
 import com.google.common.base.Throwables;
+import org.jetbrains.annotations.VisibleForTesting;
 
 import java.util.Locale;
 import java.util.Objects;
@@ -114,7 +115,7 @@ private int traceCode(Throwable e, int frameCount) {
 	 * @param bottomFrames Other stack frames, potentially forming the bottom of the stack of <code>allFrames</code>
 	 * @return The number of additional frames in <code>allFrames</code>. In most cases this should be equal to the difference in size.
 	 */
-	// visible for testing
+	@VisibleForTesting
 	static int countTopmostFrames(StackTraceElement[] allFrames, StackTraceElement[] bottomFrames) {
 		if (allFrames.length < bottomFrames.length) {
 			// if frames had been stacked on top of bottomFrames, allFrames would be larger
@@ -124,7 +125,7 @@ static int countTopmostFrames(StackTraceElement[] allFrames, StackTraceElement[]
 		}
 	}
 
-	// visible for testing
+	@VisibleForTesting
 	static <T> int commonSuffixLength(T[] set, T[] subset) {
 		Preconditions.checkArgument(set.length >= subset.length);
 		// iterate items backwards as long as they are identical

File: src/main/java/org/cryptomator/common/settings/VaultSettings.java
Patch:
@@ -9,6 +9,7 @@
 import com.google.common.base.Strings;
 import com.google.common.io.BaseEncoding;
 import org.apache.commons.lang3.SystemUtils;
+import org.jetbrains.annotations.VisibleForTesting;
 
 import javafx.beans.Observable;
 import javafx.beans.binding.Bindings;
@@ -126,7 +127,7 @@ VaultSettingsJson serialized() {
 		return json;
 	}
 
-	//visible for testing
+	@VisibleForTesting
 	static String normalizeDisplayName(String original) {
 		if (original.isBlank() || ".".equals(original) || "..".equals(original)) {
 			return "_";

File: src/main/java/org/cryptomator/launcher/FileOpenRequestHandler.java
Patch:
@@ -6,6 +6,7 @@
  *******************************************************************************/
 package org.cryptomator.launcher;
 
+import org.jetbrains.annotations.VisibleForTesting;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -48,7 +49,7 @@ public void handleLaunchArgs(List<String> args) {
 		handleLaunchArgs(FileSystems.getDefault(), args);
 	}
 
-	// visible for testing
+	@VisibleForTesting
 	void handleLaunchArgs(FileSystem fs, List<String> args) {
 		Collection<Path> pathsToOpen = args.stream().map(str -> {
 			try {

File: src/main/java/org/cryptomator/ui/recoverykey/RecoveryKeyFactory.java
Patch:
@@ -8,6 +8,7 @@
 import org.cryptomator.cryptolib.api.Masterkey;
 import org.cryptomator.cryptolib.common.MasterkeyFileAccess;
 import org.jetbrains.annotations.Nullable;
+import org.jetbrains.annotations.VisibleForTesting;
 
 import javax.inject.Inject;
 import javax.inject.Singleton;
@@ -58,7 +59,7 @@ public String createRecoveryKey(Path vaultPath, CharSequence password) throws IO
 		}
 	}
 
-	// visible for testing
+	@VisibleForTesting
 	String createRecoveryKey(byte[] rawKey) {
 		Preconditions.checkArgument(rawKey.length == 64, "key should be 64 bytes");
 		byte[] paddedKey = Arrays.copyOf(rawKey, 66);

File: src/main/java/org/cryptomator/ui/error/ErrorController.java
Patch:
@@ -146,7 +146,7 @@ public void lookUpSolution() {
 		askedForLookupDatabasePermission.set(true);
 		HttpClient httpClient = HttpClient.newBuilder().version(HttpClient.Version.HTTP_1_1).build();
 		HttpRequest httpRequest = HttpRequest.newBuilder()//
-				.uri(URI.create(ERROR_CODES_URL.formatted(errorCode.toString())))//
+				.uri(URI.create(ERROR_CODES_URL.formatted(URLEncoder.encode(errorCode.toString(),StandardCharsets.UTF_8))))//
 				.build();
 		httpClient.sendAsync(httpRequest, HttpResponse.BodyHandlers.ofInputStream())//
 				.thenAcceptAsync(this::loadHttpResponse, executorService)//

File: src/main/java/org/cryptomator/ui/error/ErrorController.java
Patch:
@@ -42,7 +42,7 @@ public class ErrorController implements FxController {
 
 	private static final ObjectMapper JSON = new ObjectMapper();
 	private static final Logger LOG = LoggerFactory.getLogger(ErrorController.class);
-	private static final String ERROR_CODES_URL = "https://api.cryptomator.org/desktop/error-codes.json";
+	private static final String ERROR_CODES_URL = "https://api.cryptomator.org/desktop/error-codes.json?error-code=%s";
 	private static final String SEARCH_URL_FORMAT = "https://github.com/cryptomator/cryptomator/discussions/categories/errors?discussions_q=category:Errors+%s";
 	private static final String REPORT_URL_FORMAT = "https://github.com/cryptomator/cryptomator/discussions/new?category=Errors&title=Error+%s&body=%s";
 	private static final String SEARCH_ERRORCODE_DELIM = " OR ";
@@ -146,7 +146,7 @@ public void lookUpSolution() {
 		askedForLookupDatabasePermission.set(true);
 		HttpClient httpClient = HttpClient.newBuilder().version(HttpClient.Version.HTTP_1_1).build();
 		HttpRequest httpRequest = HttpRequest.newBuilder()//
-				.uri(URI.create(ERROR_CODES_URL))//
+				.uri(URI.create(ERROR_CODES_URL.formatted(errorCode.toString())))//
 				.build();
 		httpClient.sendAsync(httpRequest, HttpResponse.BodyHandlers.ofInputStream())//
 				.thenAcceptAsync(this::loadHttpResponse, executorService)//

File: src/main/java/org/cryptomator/ui/mainwindow/MainWindowComponent.java
Patch:
@@ -26,6 +26,7 @@ public interface MainWindowComponent {
 	default Stage showMainWindow() {
 		Stage stage = window();
 		stage.setScene(scene().get());
+		stage.setIconified(false);
 		stage.show();
 		stage.toFront();
 		stage.requestFocus();

File: src/main/java/org/cryptomator/common/settings/SettingsJson.java
Patch:
@@ -31,9 +31,6 @@ class SettingsJson {
 	@JsonProperty("theme")
 	UiTheme theme = Settings.DEFAULT_THEME;
 
-	@JsonProperty("displayConfiguration")
-	String displayConfiguration;
-
 	@JsonProperty("keychainProvider")
 	String keychainProvider = Settings.DEFAULT_KEYCHAIN_PROVIDER;
 

File: src/main/java/org/cryptomator/ui/mainwindow/MainWindowComponent.java
Patch:
@@ -26,6 +26,7 @@ public interface MainWindowComponent {
 	default Stage showMainWindow() {
 		Stage stage = window();
 		stage.setScene(scene().get());
+		stage.setIconified(false);
 		stage.show();
 		stage.toFront();
 		stage.requestFocus();

File: src/main/java/org/cryptomator/ui/keyloading/hub/ReceiveKeyController.java
Patch:
@@ -76,7 +76,7 @@ private void loadedExistingKey(HttpResponse<InputStream> response) {
 			switch (response.statusCode()) {
 				case 200 -> retrievalSucceeded(response);
 				case 402 -> licenseExceeded();
-				case 403 -> accessNotGranted();
+				case 403, 410 -> accessNotGranted(); // or vault has been archived, effectively disallowing access
 				case 404 -> needsDeviceRegistration();
 				default -> throw new IOException("Unexpected response " + response.statusCode());
 			}

File: src/main/java/org/cryptomator/common/locationpresets/OneDriveWindowsLocationPresetsProvider.java
Patch:
@@ -83,8 +83,8 @@ private static void waitForSuccess(Process process, int timeoutSeconds, String c
 			throw new TimeoutException(cmdDescription + " timed out after " + timeoutSeconds + "s");
 		}
 		if (process.exitValue() != 0) {
-			@SuppressWarnings("resource") var stdout = process.inputReader(StandardCharsets.UTF_8).lines().collect(Collectors.joining("\n"));
-			@SuppressWarnings("resource") var stderr = process.errorReader(StandardCharsets.UTF_8).lines().collect(Collectors.joining("\n"));
+			@SuppressWarnings("resource") var stdout = process.inputReader(StandardCharsets.ISO_8859_1).lines().collect(Collectors.joining("\n"));
+			@SuppressWarnings("resource") var stderr = process.errorReader(StandardCharsets.ISO_8859_1).lines().collect(Collectors.joining("\n"));
 			throw new CommandFailedException(cmdDescription, process.exitValue(), stdout, stderr);
 		}
 	}

File: src/main/java/org/cryptomator/ui/error/ErrorController.java
Patch:
@@ -42,7 +42,7 @@ public class ErrorController implements FxController {
 
 	private static final ObjectMapper JSON = new ObjectMapper();
 	private static final Logger LOG = LoggerFactory.getLogger(ErrorController.class);
-	private static final String ERROR_CODES_URL = "https://gist.githubusercontent.com/cryptobot/accba9fb9555e7192271b85606f97230/raw/errorcodes.json";
+	private static final String ERROR_CODES_URL = "https://api.cryptomator.org/desktop/error-codes.json";
 	private static final String SEARCH_URL_FORMAT = "https://github.com/cryptomator/cryptomator/discussions/categories/errors?discussions_q=category:Errors+%s";
 	private static final String REPORT_URL_FORMAT = "https://github.com/cryptomator/cryptomator/discussions/new?category=Errors&title=Error+%s&body=%s";
 	private static final String SEARCH_ERRORCODE_DELIM = " OR ";

File: src/main/java/org/cryptomator/ui/error/ErrorController.java
Patch:
@@ -42,7 +42,7 @@ public class ErrorController implements FxController {
 
 	private static final ObjectMapper JSON = new ObjectMapper();
 	private static final Logger LOG = LoggerFactory.getLogger(ErrorController.class);
-	private static final String ERROR_CODES_URL = "https://gist.githubusercontent.com/cryptobot/accba9fb9555e7192271b85606f97230/raw/errorcodes.json";
+	private static final String ERROR_CODES_URL = "https://api.cryptomator.org/desktop/error-codes.json";
 	private static final String SEARCH_URL_FORMAT = "https://github.com/cryptomator/cryptomator/discussions/categories/errors?discussions_q=category:Errors+%s";
 	private static final String REPORT_URL_FORMAT = "https://github.com/cryptomator/cryptomator/discussions/new?category=Errors&title=Error+%s&body=%s";
 	private static final String SEARCH_ERRORCODE_DELIM = " OR ";

File: src/test/java/org/cryptomator/common/mount/MountWithinParentUtilTest.java
Patch:
@@ -121,7 +121,7 @@ void testPrepareBothExist(@TempDir Path parentDir) throws IOException {
 
 		prepareParentNoMountPoint(mount);
 		assertTrue(Files.notExists(mount, NOFOLLOW_LINKS));
-		assertTrue(isHidden(hideaway));
+		assertTrue(!SystemUtils.IS_OS_WINDOWS || isHidden(hideaway));
 	}
 
 	@Test

File: src/main/java/org/cryptomator/ui/unlock/UnlockWorkflow.java
Patch:
@@ -17,11 +17,11 @@
 
 import javax.inject.Inject;
 import javafx.application.Platform;
+import javafx.beans.property.ObjectProperty;
 import javafx.concurrent.Task;
 import javafx.scene.Scene;
 import javafx.stage.Stage;
 import java.io.IOException;
-import java.util.concurrent.atomic.AtomicReference;
 
 /**
  * A multi-step task that consists of background activities as well as user interaction.
@@ -40,10 +40,10 @@ public class UnlockWorkflow extends Task<Boolean> {
 	private final Lazy<Scene> invalidMountPointScene;
 	private final FxApplicationWindows appWindows;
 	private final KeyLoadingStrategy keyLoadingStrategy;
-	private final AtomicReference<IllegalMountPointException> illegalMountPointException;
+	private final ObjectProperty<IllegalMountPointException> illegalMountPointException;
 
 	@Inject
-	UnlockWorkflow(@UnlockWindow Stage window, @UnlockWindow Vault vault, VaultService vaultService, @FxmlScene(FxmlFile.UNLOCK_SUCCESS) Lazy<Scene> successScene, @FxmlScene(FxmlFile.UNLOCK_INVALID_MOUNT_POINT) Lazy<Scene> invalidMountPointScene, FxApplicationWindows appWindows, @UnlockWindow KeyLoadingStrategy keyLoadingStrategy, @UnlockWindow AtomicReference<IllegalMountPointException> illegalMountPointException) {
+	UnlockWorkflow(@UnlockWindow Stage window, @UnlockWindow Vault vault, VaultService vaultService, @FxmlScene(FxmlFile.UNLOCK_SUCCESS) Lazy<Scene> successScene, @FxmlScene(FxmlFile.UNLOCK_INVALID_MOUNT_POINT) Lazy<Scene> invalidMountPointScene, FxApplicationWindows appWindows, @UnlockWindow KeyLoadingStrategy keyLoadingStrategy, @UnlockWindow ObjectProperty<IllegalMountPointException> illegalMountPointException) {
 		this.window = window;
 		this.vault = vault;
 		this.vaultService = vaultService;

File: src/main/java/org/cryptomator/ui/unlock/UnlockWorkflow.java
Patch:
@@ -17,11 +17,11 @@
 
 import javax.inject.Inject;
 import javafx.application.Platform;
+import javafx.beans.property.ObjectProperty;
 import javafx.concurrent.Task;
 import javafx.scene.Scene;
 import javafx.stage.Stage;
 import java.io.IOException;
-import java.util.concurrent.atomic.AtomicReference;
 
 /**
  * A multi-step task that consists of background activities as well as user interaction.
@@ -40,10 +40,10 @@ public class UnlockWorkflow extends Task<Boolean> {
 	private final Lazy<Scene> invalidMountPointScene;
 	private final FxApplicationWindows appWindows;
 	private final KeyLoadingStrategy keyLoadingStrategy;
-	private final AtomicReference<IllegalMountPointException> illegalMountPointException;
+	private final ObjectProperty<IllegalMountPointException> illegalMountPointException;
 
 	@Inject
-	UnlockWorkflow(@UnlockWindow Stage window, @UnlockWindow Vault vault, VaultService vaultService, @FxmlScene(FxmlFile.UNLOCK_SUCCESS) Lazy<Scene> successScene, @FxmlScene(FxmlFile.UNLOCK_INVALID_MOUNT_POINT) Lazy<Scene> invalidMountPointScene, FxApplicationWindows appWindows, @UnlockWindow KeyLoadingStrategy keyLoadingStrategy, @UnlockWindow AtomicReference<IllegalMountPointException> illegalMountPointException) {
+	UnlockWorkflow(@UnlockWindow Stage window, @UnlockWindow Vault vault, VaultService vaultService, @FxmlScene(FxmlFile.UNLOCK_SUCCESS) Lazy<Scene> successScene, @FxmlScene(FxmlFile.UNLOCK_INVALID_MOUNT_POINT) Lazy<Scene> invalidMountPointScene, FxApplicationWindows appWindows, @UnlockWindow KeyLoadingStrategy keyLoadingStrategy, @UnlockWindow ObjectProperty<IllegalMountPointException> illegalMountPointException) {
 		this.window = window;
 		this.vault = vault;
 		this.vaultService = vaultService;

File: src/main/java/org/cryptomator/ui/unlock/UnlockModule.java
Patch:
@@ -4,6 +4,7 @@
 import dagger.Module;
 import dagger.Provides;
 import dagger.multibindings.IntoMap;
+import org.cryptomator.common.mount.IllegalMountPointException;
 import org.cryptomator.common.vaults.Vault;
 import org.cryptomator.ui.common.DefaultSceneFactory;
 import org.cryptomator.ui.common.FxController;
@@ -61,7 +62,7 @@ static KeyLoadingStrategy provideKeyLoadingStrategy(KeyLoadingComponent.Builder
 	@Provides
 	@UnlockWindow
 	@UnlockScoped
-	static AtomicReference<Throwable> unlockException() {
+	static AtomicReference<IllegalMountPointException> illegalMountPointException() {
 		return new AtomicReference<>();
 	}
 

File: src/main/java/org/cryptomator/ui/addvaultwizard/AddVaultModule.java
Patch:
@@ -71,7 +71,7 @@ static StringProperty provideVaultName() {
 	@Named("shorteningThreshold")
 	@AddVaultWizardScoped
 	static IntegerProperty provideShorteningThreshold() {
-		return new SimpleIntegerProperty(CreateNewVaultExpertSettingsController.DEFAULT_SHORTENING_THRESHOLD);
+		return new SimpleIntegerProperty(CreateNewVaultExpertSettingsController.MAX_SHORTENING_THRESHOLD);
 	}
 
 	@Provides

File: src/main/java/org/cryptomator/ui/fxapp/FxApplicationModule.java
Patch:
@@ -8,19 +8,20 @@
 import dagger.Module;
 import dagger.Provides;
 import org.cryptomator.ui.error.ErrorComponent;
+import org.cryptomator.ui.health.HealthCheckComponent;
 import org.cryptomator.ui.lock.LockComponent;
 import org.cryptomator.ui.mainwindow.MainWindowComponent;
 import org.cryptomator.ui.preferences.PreferencesComponent;
 import org.cryptomator.ui.quit.QuitComponent;
-
 import org.cryptomator.ui.traymenu.TrayMenuComponent;
 import org.cryptomator.ui.unlock.UnlockComponent;
+import org.cryptomator.ui.vaultoptions.VaultOptionsComponent;
 
 import javafx.scene.image.Image;
 import java.io.IOException;
 import java.io.InputStream;
 
-@Module(includes = {UpdateCheckerModule.class}, subcomponents = {TrayMenuComponent.class, MainWindowComponent.class, PreferencesComponent.class, UnlockComponent.class, LockComponent.class, QuitComponent.class, ErrorComponent.class})
+@Module(includes = {UpdateCheckerModule.class}, subcomponents = {TrayMenuComponent.class, MainWindowComponent.class, PreferencesComponent.class, VaultOptionsComponent.class, UnlockComponent.class, LockComponent.class, QuitComponent.class, ErrorComponent.class, HealthCheckComponent.class})
 abstract class FxApplicationModule {
 
 	private static Image createImageFromResource(String resourceName) throws IOException {

File: src/main/java/org/cryptomator/ui/mainwindow/MainWindowModule.java
Patch:
@@ -19,7 +19,6 @@
 import org.cryptomator.ui.migration.MigrationComponent;
 import org.cryptomator.ui.removevault.RemoveVaultComponent;
 import org.cryptomator.ui.stats.VaultStatisticsComponent;
-import org.cryptomator.ui.vaultoptions.VaultOptionsComponent;
 import org.cryptomator.ui.wrongfilealert.WrongFileAlertComponent;
 
 import javax.inject.Named;
@@ -33,7 +32,7 @@
 import java.util.Map;
 import java.util.ResourceBundle;
 
-@Module(subcomponents = {AddVaultWizardComponent.class, HealthCheckComponent.class, MigrationComponent.class, RemoveVaultComponent.class, VaultOptionsComponent.class, VaultStatisticsComponent.class, WrongFileAlertComponent.class, ErrorComponent.class})
+@Module(subcomponents = {AddVaultWizardComponent.class, MigrationComponent.class, RemoveVaultComponent.class, VaultStatisticsComponent.class, WrongFileAlertComponent.class, ErrorComponent.class})
 abstract class MainWindowModule {
 
 	@Provides

File: src/main/java/org/cryptomator/ui/vaultoptions/VaultOptionsComponent.java
Patch:
@@ -28,12 +28,13 @@ public interface VaultOptionsComponent {
 
 	ObjectProperty<SelectedVaultOptionsTab> selectedTabProperty();
 
-	default void showVaultOptionsWindow(SelectedVaultOptionsTab selectedTab) {
+	default Stage showVaultOptionsWindow(SelectedVaultOptionsTab selectedTab) {
 		selectedTabProperty().set(selectedTab);
 		Stage stage = window();
 		stage.setScene(scene().get());
 		stage.show();
 		stage.requestFocus();
+		return stage;
 	}
 
 	@Subcomponent.Factory

File: src/main/java/org/cryptomator/common/Environment.java
Patch:
@@ -5,7 +5,6 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import java.io.File;
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.nio.file.Paths;
@@ -131,7 +130,7 @@ private Optional<Path> getPath(String propertyName) {
 
 	// visible for testing
 	Stream<Path> getPaths(String propertyName) {
-		Stream<String> rawSettingsPaths = getRawList(propertyName, File.pathSeparatorChar);
+		Stream<String> rawSettingsPaths = getRawList(propertyName, System.getProperty("path.separator").charAt(0));
 		return rawSettingsPaths.filter(Predicate.not(Strings::isNullOrEmpty)).map(Path::of);
 	}
 

File: src/main/java/org/cryptomator/ui/common/FxmlFile.java
Patch:
@@ -20,7 +20,7 @@ public enum FxmlFile {
 	HUB_AUTH_FLOW("/fxml/hub_auth_flow.fxml"), //
 	HUB_INVALID_LICENSE("/fxml/hub_invalid_license.fxml"), //
 	HUB_RECEIVE_KEY("/fxml/hub_receive_key.fxml"), //
-	HUB_REGISTER_DEVICE("/fxml/hub_register_device.fxml"), //
+	HUB_LEGACY_REGISTER_DEVICE("/fxml/hub_legacy_register_device.fxml"), //
 	HUB_REGISTER_SUCCESS("/fxml/hub_register_success.fxml"), //
 	HUB_REGISTER_FAILED("/fxml/hub_register_failed.fxml"), //
 	HUB_SETUP_DEVICE("/fxml/hub_setup_device.fxml"), //

File: src/main/java/org/cryptomator/ui/keyloading/hub/ReceiveKeyController.java
Patch:
@@ -51,7 +51,7 @@ public class ReceiveKeyController implements FxController {
 	private final HttpClient httpClient;
 
 	@Inject
-	public ReceiveKeyController(@KeyLoading Vault vault, ExecutorService executor, @KeyLoading Stage window, HubConfig hubConfig, @Named("deviceId") String deviceId, @Named("bearerToken") AtomicReference<String> tokenRef, CompletableFuture<ReceivedKey> result, @FxmlScene(FxmlFile.HUB_SETUP_DEVICE) Lazy<Scene> setupDeviceScene, @FxmlScene(FxmlFile.HUB_REGISTER_DEVICE) Lazy<Scene> registerDeviceScene, @FxmlScene(FxmlFile.HUB_UNAUTHORIZED_DEVICE) Lazy<Scene> unauthorizedScene, @FxmlScene(FxmlFile.HUB_INVALID_LICENSE) Lazy<Scene> invalidLicenseScene) {
+	public ReceiveKeyController(@KeyLoading Vault vault, ExecutorService executor, @KeyLoading Stage window, HubConfig hubConfig, @Named("deviceId") String deviceId, @Named("bearerToken") AtomicReference<String> tokenRef, CompletableFuture<ReceivedKey> result, @FxmlScene(FxmlFile.HUB_SETUP_DEVICE) Lazy<Scene> setupDeviceScene, @FxmlScene(FxmlFile.HUB_LEGACY_REGISTER_DEVICE) Lazy<Scene> registerDeviceScene, @FxmlScene(FxmlFile.HUB_UNAUTHORIZED_DEVICE) Lazy<Scene> unauthorizedScene, @FxmlScene(FxmlFile.HUB_INVALID_LICENSE) Lazy<Scene> invalidLicenseScene) {
 		this.window = window;
 		this.hubConfig = hubConfig;
 		this.deviceId = deviceId;

File: src/main/java/org/cryptomator/common/Environment.java
Patch:
@@ -5,6 +5,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import java.io.File;
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.nio.file.Paths;
@@ -18,7 +19,6 @@
 public class Environment {
 
 	private static final Logger LOG = LoggerFactory.getLogger(Environment.class);
-	private static final char PATH_LIST_SEP = ':';
 	private static final int DEFAULT_MIN_PW_LENGTH = 8;
 	private static final String SETTINGS_PATH_PROP_NAME = "cryptomator.settingsPath";
 	private static final String IPC_SOCKET_PATH_PROP_NAME = "cryptomator.ipcSocketPath";
@@ -131,7 +131,7 @@ private Optional<Path> getPath(String propertyName) {
 
 	// visible for testing
 	Stream<Path> getPaths(String propertyName) {
-		Stream<String> rawSettingsPaths = getRawList(propertyName, PATH_LIST_SEP);
+		Stream<String> rawSettingsPaths = getRawList(propertyName, File.pathSeparatorChar);
 		return rawSettingsPaths.filter(Predicate.not(Strings::isNullOrEmpty)).map(Path::of);
 	}
 

File: src/main/java/org/cryptomator/common/PropertiesPreprocessor.java
Patch:
@@ -33,9 +33,9 @@ static String process(String value) {
 		return TEMPLATE.matcher(value).replaceAll(match -> //
 				switch (match.group(1)) {
 					case "appdir" -> ENV.get("APPDIR");
-					case "appdata" -> ENV.get("APPDATA").replace("\\","\\\\");
-					case "localappdata" -> ENV.get("LOCALAPPDATA").replace("\\","\\\\");
-					case "userhome" -> System.getProperty("user.home").replace("\\","\\\\");
+					case "appdata" -> ENV.get("APPDATA");
+					case "localappdata" -> ENV.get("LOCALAPPDATA");
+					case "userhome" -> System.getProperty("user.home");
 					default -> {
 						LOG.warn("Found unknown variable @{{}} in property value {}.", match.group(), value);
 						yield match.group();

File: src/main/java/org/cryptomator/ui/unlock/UnlockInvalidMountPointController.java
Patch:
@@ -1,5 +1,6 @@
 package org.cryptomator.ui.unlock;
 
+import org.cryptomator.common.mount.MountPointInUseException;
 import org.cryptomator.common.mount.MountPointNotExistsException;
 import org.cryptomator.common.mount.MountPointNotSupportedException;
 import org.cryptomator.common.vaults.Vault;
@@ -41,6 +42,7 @@ public void initialize() {
 		var translationKey = switch (e) {
 			case MountPointNotSupportedException x -> "unlock.error.customPath.description.notSupported";
 			case MountPointNotExistsException x -> "unlock.error.customPath.description.notExists";
+			case MountPointInUseException x -> "unlock.error.customPath.description.inUse";
 			default -> "unlock.error.customPath.description.generic";
 		};
 		dialogDescription.setFormat(resourceBundle.getString(translationKey));

File: src/main/java/org/cryptomator/common/PropertiesPreprocessor.java
Patch:
@@ -33,9 +33,9 @@ static String process(String value) {
 		return TEMPLATE.matcher(value).replaceAll(match -> //
 				switch (match.group(1)) {
 					case "appdir" -> ENV.get("APPDIR");
-					case "appdata" -> ENV.get("APPDATA");
-					case "localappdata" -> ENV.get("LOCALAPPDATA");
-					case "userhome" -> System.getProperty("user.home");
+					case "appdata" -> ENV.get("APPDATA").replace("\\","\\\\");
+					case "localappdata" -> ENV.get("LOCALAPPDATA").replace("\\","\\\\");
+					case "userhome" -> System.getProperty("user.home").replace("\\","\\\\");
 					default -> {
 						LOG.warn("Found unknown variable @{{}} in property value {}.", match.group(), value);
 						yield match.group();

File: src/main/java/org/cryptomator/ui/unlock/UnlockInvalidMountPointController.java
Patch:
@@ -1,5 +1,6 @@
 package org.cryptomator.ui.unlock;
 
+import org.cryptomator.common.mount.MountPointInUseException;
 import org.cryptomator.common.mount.MountPointNotExistsException;
 import org.cryptomator.common.mount.MountPointNotSupportedException;
 import org.cryptomator.common.vaults.Vault;
@@ -41,6 +42,7 @@ public void initialize() {
 		var translationKey = switch (e) {
 			case MountPointNotSupportedException x -> "unlock.error.customPath.description.notSupported";
 			case MountPointNotExistsException x -> "unlock.error.customPath.description.notExists";
+			case MountPointInUseException x -> "unlock.error.customPath.description.inUse";
 			default -> "unlock.error.customPath.description.generic";
 		};
 		dialogDescription.setFormat(resourceBundle.getString(translationKey));

File: src/main/java/org/cryptomator/ui/common/HttpHelper.java
Patch:
@@ -10,6 +10,9 @@
 
 public class HttpHelper {
 
+	private HttpHelper(){
+		throw new IllegalStateException("Utility class");
+	}
 	public static String readBody(HttpResponse<InputStream> response) throws IOException {
 		try (var in = response.body(); var reader = new InputStreamReader(in, StandardCharsets.UTF_8)) {
 			return CharStreams.toString(reader);

File: src/main/java/org/cryptomator/ui/error/ErrorDiscussion.java
Patch:
@@ -8,8 +8,5 @@ public class ErrorDiscussion {
 	Answer answer;
 
 	static class Answer{
-		private String url;
-		private int upvoteCount;
 	}
-
 }

File: src/test/java/org/cryptomator/ui/error/ErrorControllerTest.java
Patch:
@@ -97,7 +97,7 @@ void testCompareIsAnswered2() {
 		ErrorDiscussion ed1 = createErrorDiscussion("",0, null);
 		ErrorDiscussion ed2 = createErrorDiscussion("",0, null);
 		int result = errorController.compareIsAnswered(ed1,ed2);
-		Assertions.assertEquals(result, 0);
+		Assertions.assertEquals(0, result);
 	}
 
 	@Test

File: src/main/java/org/cryptomator/common/ErrorCode.java
Patch:
@@ -40,7 +40,7 @@ public String rootCauseCode() {
 		return format(traceCode(rootCause, rootCauseSpecificFrames));
 	}
 
-	String throwableCode() {
+	public String throwableCode() {
 		return format(traceCode(throwable, ALL_FRAMES));
 	}
 

File: src/main/java/org/cryptomator/ui/error/ErrorController.java
Patch:
@@ -151,8 +151,8 @@ private void loadHttpResponse(HttpResponse<InputStream> response){
 		}
 	}
 
-	private boolean isPartialMatchFilter(ErrorDiscussion errorDiscussion) {
-		return errorDiscussion.title.contains(" " +errorCode.methodCode());
+	public boolean isPartialMatchFilter(ErrorDiscussion errorDiscussion) {
+		return errorDiscussion.title.contains(" " + errorCode.methodCode());
 	}
 
 	public int compareUpvoteCount(ErrorDiscussion ed1, ErrorDiscussion ed2) {

File: src/main/java/org/cryptomator/ui/error/ErrorDiscussion.java
Patch:
@@ -7,7 +7,8 @@ public class ErrorDiscussion {
 	String url;
 	Answer answer;
 
-	class Answer{
+
+	static class Answer{
 		private String url;
 		private int upvoteCount;
 	}

File: src/main/java/org/cryptomator/ui/keyloading/hub/CreateDeviceDto.java
Patch:
@@ -4,6 +4,7 @@ class CreateDeviceDto {
 
 	public String id;
 	public String name;
+	public final String type = "DESKTOP";
 	public String publicKey;
 
 }

File: src/main/java/org/cryptomator/ui/keyloading/hub/RegisterDeviceController.java
Patch:
@@ -100,14 +100,14 @@ public void register() {
 		registerBtn.setContentDisplay(ContentDisplay.LEFT);
 		registerBtn.setDisable(true);
 
-		var keyUri = URI.create(hubConfig.devicesResourceUrl + deviceId);
+		var deviceUri = URI.create(hubConfig.devicesResourceUrl + deviceId);
 		var deviceKey = keyPair.getPublic().getEncoded();
 		var dto = new CreateDeviceDto();
 		dto.id = deviceId;
 		dto.name = deviceNameField.getText();
 		dto.publicKey = Base64.getUrlEncoder().withoutPadding().encodeToString(deviceKey);
 		var json = GSON.toJson(dto); // TODO: do we want to keep GSON? doesn't support records -.-
-		var request = HttpRequest.newBuilder(keyUri) //
+		var request = HttpRequest.newBuilder(deviceUri) //
 				.PUT(HttpRequest.BodyPublishers.ofString(json, StandardCharsets.UTF_8)) //
 				.header("Authorization", "Bearer " + bearerToken) //
 				.header("Content-Type", "application/json") //

File: src/main/java/org/cryptomator/ipc/IpcMessage.java
Patch:
@@ -9,8 +9,8 @@
 import java.nio.channels.WritableByteChannel;
 import java.util.function.Function;
 
-// TODO make sealed, remove enum
-interface IpcMessage {
+//TODO can the enum be removed?
+sealed interface IpcMessage permits HandleLaunchArgsMessage, RevealRunningAppMessage {
 
 	enum MessageType {
 		REVEAL_RUNNING_APP(RevealRunningAppMessage::decode),

File: src/main/java/org/cryptomator/ui/fxapp/FxApplication.java
Patch:
@@ -9,6 +9,7 @@
 import javax.inject.Inject;
 import javax.inject.Named;
 import javafx.application.Platform;
+import java.util.concurrent.TimeUnit;
 
 @FxApplicationScoped
 public class FxApplication {
@@ -68,7 +69,6 @@ public void start() {
 		});
 
 		launchEventHandler.startHandlingLaunchEvents();
-		autoUnlocker.unlock();
+		autoUnlocker.tryUnlockForTimespan(2, TimeUnit.MINUTES);
 	}
-
 }

File: src/main/java/org/cryptomator/ui/fxapp/FxApplicationWindows.java
Patch:
@@ -12,6 +12,7 @@
 import org.cryptomator.ui.preferences.SelectedPreferencesTab;
 import org.cryptomator.ui.quit.QuitComponent;
 import org.cryptomator.ui.unlock.UnlockComponent;
+import org.cryptomator.ui.unlock.UnlockWorkflow;
 import org.jetbrains.annotations.Nullable;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -114,7 +115,7 @@ public CompletionStage<Void> startUnlockWorkflow(Vault vault, @Nullable Stage ow
 					LOG.debug("Start unlock workflow for {}", vault.getDisplayName());
 					return unlockWorkflowFactory.create(vault, owner).unlockWorkflow();
 				}, Platform::runLater) //
-				.thenCompose(unlockWorkflow -> CompletableFuture.runAsync(unlockWorkflow, executor)) //
+				.thenAcceptAsync(UnlockWorkflow::run, executor)
 				.exceptionally(e -> {
 					showErrorWindow(e, owner == null ? primaryStage : owner, null);
 					return null;

File: src/main/java/module-info.java
Patch:
@@ -1,7 +1,6 @@
 import ch.qos.logback.classic.spi.Configurator;
 import org.cryptomator.common.locationpresets.DropboxMacLocationPresetsProvider;
 import org.cryptomator.common.locationpresets.DropboxWindowsLocationPresetsProvider;
-import org.cryptomator.common.locationpresets.GoogleDriveMacLocationPresetsProvider;
 import org.cryptomator.common.locationpresets.GoogleDriveLocationPresetsProvider;
 import org.cryptomator.common.locationpresets.ICloudMacLocationPresetsProvider;
 import org.cryptomator.common.locationpresets.ICloudWindowsLocationPresetsProvider;
@@ -55,6 +54,6 @@
 	provides LocationPresetsProvider with DropboxMacLocationPresetsProvider, //
 			DropboxWindowsLocationPresetsProvider, ICloudMacLocationPresetsProvider, //
 			ICloudWindowsLocationPresetsProvider, GoogleDriveLocationPresetsProvider, //
-			GoogleDriveMacLocationPresetsProvider, PCloudLocationPresetsProvider, //
-			MegaLocationPresetsProvider, OneDriveLocationPresetsProvider, OneDriveWindowsLocationPresetsProvider;
+			PCloudLocationPresetsProvider, MegaLocationPresetsProvider, //
+			OneDriveLocationPresetsProvider, OneDriveWindowsLocationPresetsProvider;
 }
\ No newline at end of file

File: src/main/java/org/cryptomator/ipc/IpcMessage.java
Patch:
@@ -9,8 +9,8 @@
 import java.nio.channels.WritableByteChannel;
 import java.util.function.Function;
 
-// TODO make sealed, remove enum
-interface IpcMessage {
+//TODO can the enum be removed?
+sealed interface IpcMessage permits HandleLaunchArgsMessage, RevealRunningAppMessage {
 
 	enum MessageType {
 		REVEAL_RUNNING_APP(RevealRunningAppMessage::decode),

File: src/main/java/org/cryptomator/ui/traymenu/AwtTrayMenuController.java
Patch:
@@ -51,7 +51,7 @@ public static boolean isAvailable() {
 
 	@Override
 	public void showTrayIcon(Consumer<TrayIconLoader> iconLoader, Runnable defaultAction, String tooltip) throws TrayMenuException {
-		TrayIconLoader.PngData callback = this::updateTrayIconWithPngData;
+		TrayIconLoader.PngData callback = this::showTrayIconWithPngData;
 		iconLoader.accept(callback);
 		trayIcon = new TrayIcon(image, tooltip, menu);
 

File: src/test/java/org/cryptomator/launcher/SupportedLanguagesTest.java
Patch:
@@ -25,7 +25,7 @@ public void testResourceBundleExists(String tag) {
 	}
 
 	public static Stream<String> languageTags() {
-		return SupportedLanguages.LANGUAGAE_TAGS.stream() //
+		return SupportedLanguages.LANGUAGE_TAGS.stream() //
 				.filter(tag -> !"en".equals(tag)); // english uses the default bundle
 	}
 }
\ No newline at end of file

File: src/main/java/org/cryptomator/ui/convertvault/HubToPasswordConvertController.java
Patch:
@@ -159,7 +159,7 @@ Path createPasswordConfig(Path passwordConfigPath, Path masterkeyFile, Passphras
 					.shorteningThreshold(hubConfig.getShorteningThreshold()) //
 					.build();
 			if (passwordConfig.getVaultVersion() != hubConfig.getVaultVersion()) {
-				throw new VaultVersionMismatchException("Only vaults of version " + passwordConfig.getVaultVersion() + "can be converted.");
+				throw new VaultVersionMismatchException("Only vaults of version " + passwordConfig.getVaultVersion() + " can be converted.");
 			}
 			var token = passwordConfig.toToken(Constants.DEFAULT_KEY_ID.toString(), masterkey.getEncoded());
 			Files.writeString(passwordConfigPath, token, StandardCharsets.US_ASCII, WRITE, CREATE_NEW);

File: src/main/java/org/cryptomator/common/mount/MountModule.java
Patch:
@@ -16,8 +16,8 @@
 public class MountModule {
 
 	private static final AtomicReference<MountService> formerSelectedMountService = new AtomicReference<>(null);
-	private static final AtomicBoolean<MountService> MAC_FUSE_SELECTED_ONCE = new AtomicBoolean(false);
-	private static final AtomicBoolean<MountService> FUSET_SELECTED_ONCE = new AtomicBoolean(false);
+	private static final AtomicBoolean MAC_FUSE_SELECTED_ONCE = new AtomicBoolean(false);
+	private static final AtomicBoolean FUSET_SELECTED_ONCE = new AtomicBoolean(false);
 
 	@Provides
 	@Singleton

File: src/main/java/org/cryptomator/ui/preferences/VolumePreferencesController.java
Patch:
@@ -23,7 +23,7 @@
 @PreferencesScoped
 public class VolumePreferencesController implements FxController {
 
-	private static final String DOCS_MOUNTING_URL = "https://docs.cryptomator.org/en/1.7/desktop/vault-mounting/";
+	private static final String DOCS_MOUNTING_URL = "https://docs.cryptomator.org/en/1.7/desktop/volume-type/";
 
 	private final Settings settings;
 	private final ObservableValue<MountService> selectedMountService;

File: src/main/java/org/cryptomator/common/vaults/AutoLocker.java
Patch:
@@ -6,6 +6,7 @@
 
 import javax.inject.Inject;
 import javax.inject.Singleton;
+import javafx.application.Platform;
 import javafx.collections.ObservableList;
 import java.io.IOException;
 import java.time.Instant;
@@ -40,6 +41,7 @@ private void tick() {
 	private void autolock(Vault vault) {
 		try {
 			vault.lock(false);
+			Platform.runLater(() -> vault.stateProperty().set(VaultState.Value.LOCKED));
 			LOG.info("Autolocked {} after idle timeout", vault.getDisplayName());
 		} catch (UnmountFailedException | IOException e) {
 			LOG.error("Autolocking failed.", e);

File: src/main/java/org/cryptomator/ui/error/ErrorComponent.java
Patch:
@@ -1,8 +1,10 @@
-package org.cryptomator.ui.common;
+package org.cryptomator.ui.error;
 
 import dagger.BindsInstance;
 import dagger.Subcomponent;
 import org.cryptomator.common.Nullable;
+import org.cryptomator.ui.common.FxmlFile;
+import org.cryptomator.ui.common.FxmlScene;
 
 import javafx.scene.Scene;
 import javafx.stage.Stage;

File: src/main/java/org/cryptomator/ui/error/ErrorController.java
Patch:
@@ -1,8 +1,9 @@
-package org.cryptomator.ui.common;
+package org.cryptomator.ui.error;
 
 import org.cryptomator.common.Environment;
 import org.cryptomator.common.ErrorCode;
 import org.cryptomator.common.Nullable;
+import org.cryptomator.ui.common.FxController;
 
 import javax.inject.Inject;
 import javax.inject.Named;

File: src/main/java/org/cryptomator/ui/fxapp/FxApplicationWindows.java
Patch:
@@ -5,7 +5,7 @@
 import org.cryptomator.common.vaults.Vault;
 import org.cryptomator.common.vaults.VaultState;
 import org.cryptomator.integrations.tray.TrayIntegrationProvider;
-import org.cryptomator.ui.common.ErrorComponent;
+import org.cryptomator.ui.error.ErrorComponent;
 import org.cryptomator.ui.lock.LockComponent;
 import org.cryptomator.ui.mainwindow.MainWindowComponent;
 import org.cryptomator.ui.preferences.PreferencesComponent;

File: src/main/java/org/cryptomator/ui/mainwindow/MainWindowModule.java
Patch:
@@ -6,7 +6,7 @@
 import dagger.multibindings.IntoMap;
 import org.cryptomator.common.vaults.Vault;
 import org.cryptomator.ui.addvaultwizard.AddVaultWizardComponent;
-import org.cryptomator.ui.common.ErrorComponent;
+import org.cryptomator.ui.error.ErrorComponent;
 import org.cryptomator.ui.common.FxController;
 import org.cryptomator.ui.common.FxControllerKey;
 import org.cryptomator.ui.common.FxmlFile;

File: src/main/java/org/cryptomator/ui/common/ErrorController.java
Patch:
@@ -31,7 +31,9 @@ public class ErrorController implements FxController {
 			
 			<!-- ✏ Please describe what happened as accurately as possible. -->
 			
-			<!-- 📋 Please also copy and paste the detail text from the error window to the next line. -->
+			<!-- 📋 Please also copy and paste the detail text from the error window. -->
+			
+			<!-- ℹ Text enclosed like this (chevrons, exclamation mark, two dashes) is not visible to others! -->
 			
 			<!-- ❗ If the description or the detail text is missing, the discussion will be deleted. -->
 			""";

File: src/main/java/org/cryptomator/ui/controls/FontAwesome5Icon.java
Patch:
@@ -42,6 +42,7 @@ public enum FontAwesome5Icon {
 	PLUS("\uF067"), //
 	PRINT("\uF02F"), //
 	QUESTION("\uF128"), //
+	QUESTION_CIRCLE("\uf059"), //
 	REDO("\uF01E"), //
 	SEARCH("\uF002"), //
 	SPINNER("\uF110"), //

File: src/main/java/org/cryptomator/common/mount/Mounter.java
Patch:
@@ -81,7 +81,6 @@ private Runnable prepareMountPoint() throws IOException {
 			var canMountToDriveLetter = service.hasCapability(MOUNT_AS_DRIVE_LETTER);
 			var canMountToParent = service.hasCapability(MOUNT_WITHIN_EXISTING_PARENT);
 			var canMountToDir = service.hasCapability(MOUNT_TO_EXISTING_DIR);
-			var mpIsDriveLetter = userChosenMountPoint.toString().matches("[A-Z]:\\\\");
 
 			if (userChosenMountPoint == null) {
 				if (service.hasCapability(MOUNT_TO_SYSTEM_CHOSEN_PATH)) {
@@ -97,6 +96,7 @@ private Runnable prepareMountPoint() throws IOException {
 					builder.setMountpoint(mountPoint);
 				}
 			} else {
+				var mpIsDriveLetter = userChosenMountPoint.toString().matches("[A-Z]:\\\\");
 				if (!mpIsDriveLetter && canMountToParent && !canMountToDir) {
 					MountWithinParentUtil.prepareParentNoMountPoint(userChosenMountPoint);
 					cleanup = () -> {

File: src/main/java/org/cryptomator/ui/traymenu/AwtTrayMenuController.java
Patch:
@@ -77,7 +77,7 @@ public void onBeforeOpenMenu(Runnable listener) {
 		Preconditions.checkNotNull(this.trayIcon);
 		this.trayIcon.addMouseListener(new MouseAdapter() {
 			@Override
-			public void mouseClicked(MouseEvent e) {
+			public void mousePressed(MouseEvent e) {
 				listener.run();
 			}
 		});

File: src/main/java/org/cryptomator/common/mount/Mounter.java
Patch:
@@ -99,7 +99,6 @@ private Runnable prepareMountPoint() throws IOException {
 				if (canMountToParent && !canMountToDir) {
 					MountWithinParentUtil.prepareParentNoMountPoint(userChosenMountPoint);
 					cleanup = () -> {
-						System.out.println("CLEANUP");
 						MountWithinParentUtil.cleanup(userChosenMountPoint);
 					};
 				}

File: src/main/java/org/cryptomator/ui/traymenu/AwtTrayMenuController.java
Patch:
@@ -77,7 +77,7 @@ public void onBeforeOpenMenu(Runnable listener) {
 		Preconditions.checkNotNull(this.trayIcon);
 		this.trayIcon.addMouseListener(new MouseAdapter() {
 			@Override
-			public void mouseClicked(MouseEvent e) {
+			public void mousePressed(MouseEvent e) {
 				listener.run();
 			}
 		});

File: src/main/java/org/cryptomator/ui/controls/FontAwesome5Icon.java
Patch:
@@ -25,6 +25,7 @@ public enum FontAwesome5Icon {
 	EYE_SLASH("\uF070"), //
 	FAST_FORWARD("\uF050"), //
 	FILE("\uF15B"), //
+	FILE_DOWNLOAD("\uF56D"), //
 	FILE_IMPORT("\uF56F"), //
 	FOLDER_OPEN("\uF07C"), //
 	FUNNEL("\uF0B0"), //

File: src/main/java/org/cryptomator/common/settings/VaultSettings.java
Patch:
@@ -45,7 +45,7 @@ public class VaultSettings {
 	private final BooleanProperty unlockAfterStartup = new SimpleBooleanProperty(DEFAULT_UNLOCK_AFTER_STARTUP);
 	private final BooleanProperty revealAfterMount = new SimpleBooleanProperty(DEFAULT_REVEAL_AFTER_MOUNT);
 	private final BooleanProperty usesReadOnlyMode = new SimpleBooleanProperty(DEFAULT_USES_READONLY_MODE);
-	private final StringProperty mountFlags = new SimpleStringProperty(DEFAULT_MOUNT_FLAGS);
+	private final StringProperty mountFlags = new SimpleStringProperty(DEFAULT_MOUNT_FLAGS); //TODO: remove empty default mount flags and let this property be null if not used
 	private final IntegerProperty maxCleartextFilenameLength = new SimpleIntegerProperty(DEFAULT_MAX_CLEARTEXT_FILENAME_LENGTH);
 	private final ObjectProperty<WhenUnlocked> actionAfterUnlock = new SimpleObjectProperty<>(DEFAULT_ACTION_AFTER_UNLOCK);
 	private final BooleanProperty autoLockWhenIdle = new SimpleBooleanProperty(DEFAULT_AUTOLOCK_WHEN_IDLE);

File: src/main/java/org/cryptomator/ui/vaultoptions/MountOptionsController.java
Patch:
@@ -83,6 +83,7 @@ public void initialize() {
 		// custom mount flags:
 		mountFlagsField.disableProperty().bind(customMountFlagsCheckbox.selectedProperty().not());
 		customMountFlagsCheckbox.setSelected(vault.isHavingCustomMountFlags());
+		toggleUseCustomMountFlags();
 
 		//driveLetter choice box
 		driveLetterSelection.getItems().addAll(windowsDriveLetters.getAll());

File: src/main/java/org/cryptomator/ui/vaultoptions/MountOptionsController.java
Patch:
@@ -237,7 +237,7 @@ public boolean isMountpointDriveLetterSupported() {
 	}
 
 	public ObservableValue<Boolean> readOnlySupportedProperty() {
-		return mountpointDriveLetterSupported;
+		return readOnlySupported;
 	}
 
 	public boolean isReadOnlySupported() {

File: src/main/java/org/cryptomator/ui/controls/FontAwesome5Icon.java
Patch:
@@ -27,6 +27,7 @@ public enum FontAwesome5Icon {
 	FILE("\uF15B"), //
 	FILE_IMPORT("\uF56F"), //
 	FOLDER_OPEN("\uF07C"), //
+	FUNNEL("\uF0B0"), //
 	HAND_HOLDING_HEART("\uF4BE"), //
 	HEART("\uF004"), //
 	HDD("\uF0A0"), //

File: src/main/java/org/cryptomator/ui/health/CheckExecutor.java
Patch:
@@ -70,7 +70,7 @@ protected Void call() throws Exception {
 			try (var masterkeyClone = masterkey.copy(); //
 				 var cryptor = CryptorProvider.forScheme(vaultConfig.getCipherCombo()).provide(masterkeyClone, csprng)) {
 				c.getHealthCheck().check(vaultPath, vaultConfig, masterkeyClone, cryptor, diagnosis -> {
-					Platform.runLater(() -> c.getResults().add(Result.create(diagnosis)));
+					Platform.runLater(() -> c.getResults().add(Result.create(diagnosis, vaultPath, vaultConfig, masterkeyClone, cryptor)));
 					highestResultSeverity = Comparators.max(highestResultSeverity, diagnosis.getSeverity());
 				});
 			}

File: src/main/java/org/cryptomator/ui/health/CheckStateIconView.java
Patch:
@@ -31,7 +31,7 @@ public CheckStateIconView() {
 		this.severity = EasyBind.wrapNullable(check).mapObservable(Check::highestResultSeverityProperty).asOrdinary();
 		this.glyph.bind(Bindings.createObjectBinding(this::glyphForState, state, severity));
 		this.subscriptions = List.of( //
-				EasyBind.includeWhen(getStyleClass(), "glyph-icon-muted", Bindings.equal(state, Check.CheckState.SKIPPED).or(Bindings.equal(state, Check.CheckState.CANCELLED))), //
+				EasyBind.includeWhen(getStyleClass(), "glyph-icon-muted", Bindings.equal(state, Check.CheckState.SKIPPED).or(Bindings.equal(state, Check.CheckState.CANCELLED)).or(Bindings.equal(severity, DiagnosticResult.Severity.INFO))), //
 				EasyBind.includeWhen(getStyleClass(), "glyph-icon-primary", Bindings.equal(severity, DiagnosticResult.Severity.GOOD)), //
 				EasyBind.includeWhen(getStyleClass(), "glyph-icon-orange", Bindings.equal(severity, DiagnosticResult.Severity.WARN).or(Bindings.equal(severity, DiagnosticResult.Severity.CRITICAL))), //
 				EasyBind.includeWhen(getStyleClass(), "glyph-icon-red", Bindings.equal(state, Check.CheckState.ERROR)) //

File: src/main/java/org/cryptomator/ui/addvaultwizard/CreateNewVaultPasswordController.java
Patch:
@@ -102,7 +102,7 @@ public class CreateNewVaultPasswordController implements FxController {
 		this.masterkeyFileAccess = masterkeyFileAccess;
 		this.processing = new SimpleBooleanProperty();
 		this.readyToCreateVault = new SimpleBooleanProperty();
-		this.createVaultButtonState = Bindings.createObjectBinding(this::getCreateVaultButtonState, processing);
+		this.createVaultButtonState = Bindings.when(processing).then(ContentDisplay.LEFT).otherwise(ContentDisplay.TEXT_ONLY);
 	}
 
 	@FXML
@@ -231,6 +231,6 @@ public ObjectBinding<ContentDisplay> createVaultButtonStateProperty() {
 	}
 
 	public ContentDisplay getCreateVaultButtonState() {
-		return processing.get() ? ContentDisplay.LEFT : ContentDisplay.TEXT_ONLY;
+		return createVaultButtonState.get();
 	}
 }

File: src/main/java/org/cryptomator/ui/common/NewPasswordController.java
Patch:
@@ -1,6 +1,5 @@
 package org.cryptomator.ui.common;
 
-import com.tobiasdiez.easybind.EasyBind;
 import org.cryptomator.ui.controls.FontAwesome5IconView;
 import org.cryptomator.ui.controls.NiceSecurePasswordField;
 
@@ -42,7 +41,7 @@ public void initialize() {
 		passwordStrength.bind(Bindings.createIntegerBinding(() -> strengthRater.computeRate(passwordField.getCharacters()), passwordField.textProperty()));
 
 		passwordStrengthLabel.graphicProperty().bind(Bindings.createObjectBinding(this::getIconViewForPasswordStrengthLabel, passwordField.textProperty(), passwordStrength));
-		passwordStrengthLabel.textProperty().bind(EasyBind.map(passwordStrength, strengthRater::getStrengthDescription));
+		passwordStrengthLabel.textProperty().bind(passwordStrength.map(strengthRater::getStrengthDescription));
 
 		BooleanBinding passwordsMatch = Bindings.createBooleanBinding(this::passwordFieldsMatch, passwordField.textProperty(), reenterField.textProperty());
 		BooleanBinding reenterFieldNotEmpty = reenterField.textProperty().isNotEmpty();

File: src/main/java/org/cryptomator/ui/keyloading/masterkeyfile/PassphraseEntryController.java
Patch:
@@ -50,7 +50,7 @@ public class PassphraseEntryController implements FxController {
 	private final KeychainManager keychain;
 	private final StringBinding vaultName;
 	private final BooleanProperty unlockInProgress = new SimpleBooleanProperty();
-	private final ObjectBinding<ContentDisplay> unlockButtonContentDisplay = Bindings.createObjectBinding(this::getUnlockButtonContentDisplay, unlockInProgress);
+	private final ObjectBinding<ContentDisplay> unlockButtonContentDisplay = Bindings.when(unlockInProgress).then(ContentDisplay.LEFT).otherwise(ContentDisplay.TEXT_ONLY);
 	private final BooleanProperty unlockButtonDisabled = new SimpleBooleanProperty();
 
 	/* FXML */
@@ -186,7 +186,7 @@ public ObjectBinding<ContentDisplay> unlockButtonContentDisplayProperty() {
 	}
 
 	public ContentDisplay getUnlockButtonContentDisplay() {
-		return unlockInProgress.get() ? ContentDisplay.LEFT : ContentDisplay.TEXT_ONLY;
+		return unlockButtonContentDisplay.get();
 	}
 
 	public ReadOnlyBooleanProperty userInteractionDisabledProperty() {

File: src/main/java/org/cryptomator/ui/mainwindow/ResizeController.java
Patch:
@@ -46,7 +46,7 @@ public class ResizeController implements FxController {
 	ResizeController(@MainWindow Stage window, Settings settings) {
 		this.window = window;
 		this.settings = settings;
-		this.showResizingArrows = Bindings.createBooleanBinding(this::isShowResizingArrows, window.fullScreenProperty());
+		this.showResizingArrows = window.fullScreenProperty().not();
 	}
 
 	@FXML
@@ -181,8 +181,7 @@ public BooleanBinding showResizingArrowsProperty() {
 	}
 
 	public boolean isShowResizingArrows() {
-		//If in fullscreen resizing is not be possible;
-		return !window.isFullScreen();
+		return showResizingArrows.get();
 	}
 
 }
\ No newline at end of file

File: src/test/java/org/cryptomator/launcher/SupportedLanguagesTest.java
Patch:
@@ -18,7 +18,7 @@ public void testResourceBundleExists(String tag) {
 		var locale = Locale.forLanguageTag(tag);
 		Assertions.assertNotEquals("und", locale.toLanguageTag(), "Undefined language tag");
 
-		var bundle = Assertions.assertDoesNotThrow(() -> ResourceBundle.getBundle("/i18n/strings", locale));
+		var bundle = Assertions.assertDoesNotThrow(() -> ResourceBundle.getBundle("i18n.strings", locale));
 
 		Assertions.assertEquals(locale, bundle.getLocale());
 		Assertions.assertFalse(bundle.keySet().isEmpty());

File: src/main/java/org/cryptomator/ui/health/CheckExecutor.java
Patch:
@@ -70,7 +70,7 @@ protected Void call() throws Exception {
 			try (var masterkeyClone = masterkey.copy(); //
 				 var cryptor = CryptorProvider.forScheme(vaultConfig.getCipherCombo()).provide(masterkeyClone, csprng)) {
 				c.getHealthCheck().check(vaultPath, vaultConfig, masterkeyClone, cryptor, diagnosis -> {
-					Platform.runLater(() -> c.getResults().add(Result.create(diagnosis)));
+					Platform.runLater(() -> c.getResults().add(Result.create(diagnosis, vaultPath, vaultConfig, masterkeyClone, cryptor)));
 					highestResultSeverity = Comparators.max(highestResultSeverity, diagnosis.getSeverity());
 				});
 			}

File: src/main/java/org/cryptomator/ui/health/ResultFixApplier.java
Patch:
@@ -49,10 +49,11 @@ public CompletionStage<Void> fix(Result result) {
 	}
 
 	public void fix(DiagnosticResult diagnosis) {
-		Preconditions.checkArgument(diagnosis.getSeverity() == DiagnosticResult.Severity.WARN, "Unfixable result");
 		try (var masterkeyClone = masterkey.copy(); //
 			 var cryptor = CryptorProvider.forScheme(vaultConfig.getCipherCombo()).provide(masterkeyClone, csprng)) {
-			diagnosis.fix(vaultPath, vaultConfig, masterkeyClone, cryptor);
+			diagnosis.getFix(vaultPath, vaultConfig, masterkeyClone, cryptor)
+					.orElseThrow(() -> new IllegalStateException("No fix for diagnosis "+diagnosis.getClass().getName() +" implemented."))
+					.apply();
 		} catch (Exception e) {
 			throw new FixFailedException(e);
 		}

File: src/main/java/org/cryptomator/ui/traymenu/AwtTrayMenuController.java
Patch:
@@ -1,6 +1,6 @@
 package org.cryptomator.ui.traymenu;
 
-import dagger.internal.Preconditions;
+import com.google.common.base.Preconditions;
 import org.apache.commons.lang3.SystemUtils;
 import org.cryptomator.integrations.common.CheckAvailability;
 import org.cryptomator.integrations.common.Priority;

File: src/test/java/org/cryptomator/common/settings/SettingsJsonAdapterTest.java
Patch:
@@ -31,7 +31,7 @@ public void testDeserialize() throws IOException {
 					"checkForUpdatesEnabled": true,
 					"port": 8080,
 					"language": "de-DE",
-					"numTrayNotifications": 42,
+					"numTrayNotifications": 42
 				}
 				""";
 

File: src/main/java/org/cryptomator/ui/keyloading/hub/ReceiveKeyController.java
Patch:
@@ -56,7 +56,7 @@ public ReceiveKeyController(@KeyLoading Vault vault, ExecutorService executor, @
 		this.vaultBaseUri = getVaultBaseUri(vault);
 		this.licenseExceededScene = licenseExceededScene;
 		this.window.addEventHandler(WindowEvent.WINDOW_HIDING, this::windowClosed);
-		this.httpClient = HttpClient.newBuilder().executor(executor).build();
+		this.httpClient = HttpClient.newBuilder().version(HttpClient.Version.HTTP_1_1).executor(executor).build();
 	}
 
 	@FXML

File: src/main/java/org/cryptomator/ui/keyloading/hub/RegisterDeviceController.java
Patch:
@@ -76,7 +76,7 @@ public RegisterDeviceController(@KeyLoading Stage window, ExecutorService execut
 		this.registerFailedScene = registerFailedScene;
 		this.jwt = JWT.decode(this.bearerToken);
 		this.window.addEventHandler(WindowEvent.WINDOW_HIDING, this::windowClosed);
-		this.httpClient = HttpClient.newBuilder().executor(executor).build();
+		this.httpClient = HttpClient.newBuilder().version(HttpClient.Version.HTTP_1_1).executor(executor).build();
 	}
 
 	public void initialize() {

File: src/main/java/org/cryptomator/ui/addvaultwizard/CreateNewVaultNameController.java
Patch:
@@ -45,7 +45,7 @@ public class CreateNewVaultNameController implements FxController {
 
 	@FXML
 	public void initialize() {
-		vaultName.bind(textField.textProperty());
+		vaultName.bindBidirectional(textField.textProperty());
 		vaultName.addListener(this::vaultNameChanged);
 	}
 
@@ -66,7 +66,7 @@ public void back() {
 	@FXML
 	public void next() {
 		window.setScene(chooseLocationScene.get());
-		vaultName.get().trim();
+		vaultName.set(vaultName.get().trim());
 	}
 
 	/* Getter/Setter */

File: src/test/java/org/cryptomator/launcher/SupportedLanguagesTest.java
Patch:
@@ -18,7 +18,7 @@ public void testResourceBundleExists(String tag) {
 		var locale = Locale.forLanguageTag(tag);
 		Assertions.assertNotEquals("und", locale.toLanguageTag(), "Undefined language tag");
 
-		var bundle = Assertions.assertDoesNotThrow(() -> ResourceBundle.getBundle("/i18n/strings", locale));
+		var bundle = Assertions.assertDoesNotThrow(() -> ResourceBundle.getBundle("i18n.strings", locale));
 
 		Assertions.assertEquals(locale, bundle.getLocale());
 		Assertions.assertFalse(bundle.keySet().isEmpty());

File: src/main/java/org/cryptomator/common/settings/SettingsJsonAdapter.java
Patch:
@@ -50,6 +50,7 @@ public void write(JsonWriter out, Settings value) throws IOException {
 		out.name("theme").value(value.theme().get().name());
 		out.name("uiOrientation").value(value.userInterfaceOrientation().get().name());
 		out.name("keychainProvider").value(value.keychainProvider().get());
+		out.name("useKeychain").value(value.useKeychain().get());
 		out.name("licenseKey").value(value.licenseKey().get());
 		out.name("showMinimizeButton").value(value.showMinimizeButton().get());
 		out.name("showTrayIcon").value(value.showTrayIcon().get());
@@ -92,6 +93,7 @@ public Settings read(JsonReader in) throws IOException {
 				case "theme" -> settings.theme().set(parseUiTheme(in.nextString()));
 				case "uiOrientation" -> settings.userInterfaceOrientation().set(parseUiOrientation(in.nextString()));
 				case "keychainProvider" -> settings.keychainProvider().set(in.nextString());
+				case "useKeychain" -> settings.useKeychain().set(in.nextBoolean());
 				case "licenseKey" -> settings.licenseKey().set(in.nextString());
 				case "showMinimizeButton" -> settings.showMinimizeButton().set(in.nextBoolean());
 				case "showTrayIcon" -> settings.showTrayIcon().set(in.nextBoolean());

File: src/main/java/org/cryptomator/ui/preferences/GeneralPreferencesController.java
Patch:
@@ -34,6 +34,7 @@ public class GeneralPreferencesController implements FxController {
 	private final Environment environment;
 	private final List<KeychainAccessProvider> keychainAccessProviders;
 	private final FxApplicationWindows appWindows;
+	public CheckBox useKeychainCheckbox;
 	public ChoiceBox<KeychainAccessProvider> keychainBackendChoiceBox;
 	public CheckBox startHiddenCheckbox;
 	public CheckBox autoCloseVaultsCheckbox;
@@ -64,6 +65,8 @@ public void initialize() {
 		keychainBackendChoiceBox.setValue(keychainSettingsConverter.fromString(settings.keychainProvider().get()));
 		keychainBackendChoiceBox.setConverter(new KeychainProviderDisplayNameConverter());
 		Bindings.bindBidirectional(settings.keychainProvider(), keychainBackendChoiceBox.valueProperty(), keychainSettingsConverter);
+		useKeychainCheckbox.selectedProperty().bindBidirectional(settings.useKeychain());
+		keychainBackendChoiceBox.disableProperty().bind(useKeychainCheckbox.selectedProperty().not());
 	}
 
 	public boolean isAutoStartSupported() {

File: src/main/java/org/cryptomator/ui/traymenu/TrayMenuBuilder.java
Patch:
@@ -31,8 +31,8 @@
 public class TrayMenuBuilder {
 
 	private static final Logger LOG = LoggerFactory.getLogger(TrayMenuBuilder.class);
-	private static final String TRAY_ICON_MAC = "/img/tray_icon_mac.png";
-	private static final String TRAY_ICON = "/img/tray_icon.png";
+	private static final String TRAY_ICON_MAC = "/img/tray_icon_mac@2x.png";
+	private static final String TRAY_ICON = "/img/window_icon_32.png";
 
 	private final ResourceBundle resourceBundle;
 	private final VaultService vaultService;

File: src/main/java/org/cryptomator/common/vaults/AutoLocker.java
Patch:
@@ -46,7 +46,6 @@ private void autolock(Vault vault) {
 
 	private boolean exceedsIdleTime(Vault vault) {
 		assert vault.isUnlocked();
-		// TODO: shouldn't we read these properties from within FX Application Thread?
 		if (vault.getVaultSettings().autoLockWhenIdle().get()) {
 			int maxIdleSeconds = vault.getVaultSettings().autoLockIdleSeconds().get();
 			var deadline = vault.getStats().getLastActivity().plusSeconds(maxIdleSeconds);

File: src/test/java/org/cryptomator/common/EnvironmentTest.java
Patch:
@@ -21,7 +21,7 @@ public class EnvironmentTest {
 
 	@BeforeEach
 	public void init() {
-		env = Mockito.spy(new Environment());
+		env = Mockito.spy(Environment.getInstance());
 		Mockito.when(env.getHomeDir()).thenReturn(Path.of("/home/testuser"));
 	}
 

File: src/main/java/org/cryptomator/ui/common/FxmlFile.java
Patch:
@@ -14,6 +14,7 @@ public enum FxmlFile {
 	HEALTH_START("/fxml/health_start.fxml"), //
 	HEALTH_CHECK_LIST("/fxml/health_check_list.fxml"), //
 	HUB_AUTH_FLOW("/fxml/hub_auth_flow.fxml"), //
+	HUB_LICENSE_EXCEEDED("/fxml/hub_license_exceeded.fxml"), //
 	HUB_RECEIVE_KEY("/fxml/hub_receive_key.fxml"), //
 	HUB_REGISTER_DEVICE("/fxml/hub_register_device.fxml"), //
 	HUB_REGISTER_SUCCESS("/fxml/hub_register_success.fxml"), //

File: src/main/java/org/cryptomator/common/settings/SettingsProvider.java
Patch:
@@ -118,7 +118,7 @@ private void save(Settings settings, Path settingsPath) {
 		try {
 			Files.createDirectories(settingsPath.getParent());
 			Path tmpPath = settingsPath.resolveSibling(settingsPath.getFileName().toString() + ".tmp");
-			try (OutputStream out = Files.newOutputStream(tmpPath, StandardOpenOption.CREATE_NEW); //
+			try (OutputStream out = Files.newOutputStream(tmpPath, StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING, StandardOpenOption.WRITE); //
 				 Writer writer = new OutputStreamWriter(out, StandardCharsets.UTF_8)) {
 				gson.toJson(settings, writer);
 			}

File: src/test/java/org/cryptomator/common/EnvironmentTest.java
Patch:
@@ -48,9 +48,9 @@ public void testIpcSocketPath() {
 	}
 
 	@Test
-	@DisplayName("cryptomator.keychainPath=~/AppData/Roaming/Cryptomator/keychain.json")
+	@DisplayName("cryptomator.integrationsWin.keychainPaths=~/AppData/Roaming/Cryptomator/keychain.json")
 	public void testKeychainPath() {
-		System.setProperty("cryptomator.keychainPath", "~/AppData/Roaming/Cryptomator/keychain.json");
+		System.setProperty("cryptomator.integrationsWin.keychainPaths", "~/AppData/Roaming/Cryptomator/keychain.json");
 
 		List<Path> result = env.getKeychainPath().toList();
 		MatcherAssert.assertThat(result, Matchers.hasSize(1));

File: src/main/java/org/cryptomator/common/settings/SettingsJsonAdapter.java
Patch:
@@ -41,6 +41,7 @@ public void write(JsonWriter out, Settings value) throws IOException {
 		out.name("askedForUpdateCheck").value(value.askedForUpdateCheck().get());
 		out.name("checkForUpdatesEnabled").value(value.checkForUpdates().get());
 		out.name("startHidden").value(value.startHidden().get());
+		out.name("autoCloseVaults").value(value.autoCloseVaults().get());
 		out.name("port").value(value.port().get());
 		out.name("numTrayNotifications").value(value.numTrayNotifications().get());
 		out.name("preferredGvfsScheme").value(value.preferredGvfsScheme().get().name());
@@ -82,6 +83,7 @@ public Settings read(JsonReader in) throws IOException {
 				case "askedForUpdateCheck" -> settings.askedForUpdateCheck().set(in.nextBoolean());
 				case "checkForUpdatesEnabled" -> settings.checkForUpdates().set(in.nextBoolean());
 				case "startHidden" -> settings.startHidden().set(in.nextBoolean());
+				case "autoCloseVaults" -> settings.autoCloseVaults().set(in.nextBoolean());
 				case "port" -> settings.port().set(in.nextInt());
 				case "numTrayNotifications" -> settings.numTrayNotifications().set(in.nextInt());
 				case "preferredGvfsScheme" -> settings.preferredGvfsScheme().set(parseWebDavUrlSchemePrefix(in.nextString()));

File: src/main/java/org/cryptomator/ui/common/FxmlFile.java
Patch:
@@ -23,6 +23,7 @@ public enum FxmlFile {
 	MIGRATION_SUCCESS("/fxml/migration_success.fxml"), //
 	PREFERENCES("/fxml/preferences.fxml"), //
 	QUIT("/fxml/quit.fxml"), //
+	QUIT_FORCED("/fxml/quit_forced.fxml"), //
 	RECOVERYKEY_CREATE("/fxml/recoverykey_create.fxml"), //
 	RECOVERYKEY_RECOVER("/fxml/recoverykey_recover.fxml"), //
 	RECOVERYKEY_RESET_PASSWORD("/fxml/recoverykey_reset_password.fxml"), //

File: src/main/java/org/cryptomator/ui/common/VaultService.java
Patch:
@@ -86,7 +86,8 @@ public void lockAll(Collection<Vault> vaults, boolean forced) {
 	}
 
 	/**
-	 * Creates but doesn't start a lock-all task.
+	 * Creates a lock-all task.
+	 * This task itself is _not started_, but its subtasks locking each vault will be already executed.
 	 *
 	 * @param vaults The list of vaults to be locked
 	 * @param forced Whether to attempt a forced lock

File: src/main/java/org/cryptomator/ui/fxapp/FxApplicationModule.java
Patch:
@@ -14,6 +14,7 @@
 import org.cryptomator.ui.mainwindow.MainWindowComponent;
 import org.cryptomator.ui.preferences.PreferencesComponent;
 import org.cryptomator.ui.quit.QuitComponent;
+
 import org.cryptomator.ui.traymenu.TrayMenuComponent;
 import org.cryptomator.ui.unlock.UnlockComponent;
 
@@ -57,4 +58,4 @@ static PreferencesComponent providePreferencesComponent(PreferencesComponent.Bui
 	static QuitComponent provideQuitComponent(QuitComponent.Builder builder) {
 		return builder.build();
 	}
-}
+}
\ No newline at end of file

File: src/main/java/org/cryptomator/ui/preferences/GeneralPreferencesController.java
Patch:
@@ -36,6 +36,7 @@ public class GeneralPreferencesController implements FxController {
 	private final FxApplicationWindows appWindows;
 	public ChoiceBox<KeychainAccessProvider> keychainBackendChoiceBox;
 	public CheckBox startHiddenCheckbox;
+	public CheckBox autoCloseVaultsCheckbox;
 	public CheckBox debugModeCheckbox;
 	public CheckBox autoStartCheckbox;
 	public ToggleGroup nodeOrientation;
@@ -54,9 +55,8 @@ public class GeneralPreferencesController implements FxController {
 	@FXML
 	public void initialize() {
 		startHiddenCheckbox.selectedProperty().bindBidirectional(settings.startHidden());
-
+		autoCloseVaultsCheckbox.selectedProperty().bindBidirectional(settings.autoCloseVaults());
 		debugModeCheckbox.selectedProperty().bindBidirectional(settings.debugMode());
-
 		autoStartProvider.ifPresent(autoStart -> autoStartCheckbox.setSelected(autoStart.isEnabled()));
 
 		var keychainSettingsConverter = new KeychainProviderClassNameConverter(keychainAccessProviders);

File: src/test/java/org/cryptomator/common/settings/SettingsJsonAdapterTest.java
Patch:
@@ -27,6 +27,7 @@ public void testDeserialize() throws IOException {
 						{"id": "1", "path": "/vault1", "mountName": "vault1", "winDriveLetter": "X"},
 						{"id": "2", "path": "/vault2", "mountName": "vault2", "winDriveLetter": "Y"}
 					],
+					"autoCloseVaults" : true,
 					"checkForUpdatesEnabled": true,
 					"port": 8080,
 					"language": "de-DE",
@@ -40,6 +41,7 @@ public void testDeserialize() throws IOException {
 		Assertions.assertTrue(settings.checkForUpdates().get());
 		Assertions.assertEquals(2, settings.getDirectories().size());
 		Assertions.assertEquals(8080, settings.port().get());
+		Assertions.assertEquals(true, settings.autoCloseVaults().get());
 		Assertions.assertEquals("de-DE", settings.languageProperty().get());
 		Assertions.assertEquals(42, settings.numTrayNotifications().get());
 		Assertions.assertEquals(WebDavUrlScheme.DAV, settings.preferredGvfsScheme().get());

File: src/main/java/org/cryptomator/common/settings/Settings.java
Patch:
@@ -36,7 +36,7 @@ public class Settings {
 	public static final int DEFAULT_NUM_TRAY_NOTIFICATIONS = 3;
 	public static final WebDavUrlScheme DEFAULT_GVFS_SCHEME = WebDavUrlScheme.DAV;
 	public static final boolean DEFAULT_DEBUG_MODE = false;
-	public static final VolumeImpl DEFAULT_PREFERRED_VOLUME_IMPL = SystemUtils.IS_OS_WINDOWS ? VolumeImpl.DOKANY : VolumeImpl.FUSE;
+	public static final VolumeImpl DEFAULT_PREFERRED_VOLUME_IMPL = VolumeImpl.FUSE;
 	public static final UiTheme DEFAULT_THEME = UiTheme.LIGHT;
 	@Deprecated // to be changed to "whatever is available" eventually
 	public static final String DEFAULT_KEYCHAIN_PROVIDER = SystemUtils.IS_OS_WINDOWS ? "org.cryptomator.windows.keychain.WindowsProtectedKeychainAccess" : SystemUtils.IS_OS_MAC ? "org.cryptomator.macos.keychain.MacSystemKeychainAccess" : "org.cryptomator.linux.keychain.SecretServiceKeychainAccess";

File: src/main/java/org/cryptomator/common/settings/SettingsJsonAdapter.java
Patch:
@@ -41,6 +41,7 @@ public void write(JsonWriter out, Settings value) throws IOException {
 		out.name("askedForUpdateCheck").value(value.askedForUpdateCheck().get());
 		out.name("checkForUpdatesEnabled").value(value.checkForUpdates().get());
 		out.name("startHidden").value(value.startHidden().get());
+		out.name("autoCloseVaults").value(value.autoCloseVaults().get());
 		out.name("port").value(value.port().get());
 		out.name("numTrayNotifications").value(value.numTrayNotifications().get());
 		out.name("preferredGvfsScheme").value(value.preferredGvfsScheme().get().name());
@@ -82,6 +83,7 @@ public Settings read(JsonReader in) throws IOException {
 				case "askedForUpdateCheck" -> settings.askedForUpdateCheck().set(in.nextBoolean());
 				case "checkForUpdatesEnabled" -> settings.checkForUpdates().set(in.nextBoolean());
 				case "startHidden" -> settings.startHidden().set(in.nextBoolean());
+				case "autoCloseVaults" -> settings.autoCloseVaults().set(in.nextBoolean());
 				case "port" -> settings.port().set(in.nextInt());
 				case "numTrayNotifications" -> settings.numTrayNotifications().set(in.nextInt());
 				case "preferredGvfsScheme" -> settings.preferredGvfsScheme().set(parseWebDavUrlSchemePrefix(in.nextString()));

File: src/main/java/org/cryptomator/ui/preferences/GeneralPreferencesController.java
Patch:
@@ -36,6 +36,7 @@ public class GeneralPreferencesController implements FxController {
 	private final FxApplicationWindows appWindows;
 	public ChoiceBox<KeychainAccessProvider> keychainBackendChoiceBox;
 	public CheckBox startHiddenCheckbox;
+	public CheckBox autoCloseVaultsCheckbox;
 	public CheckBox debugModeCheckbox;
 	public CheckBox autoStartCheckbox;
 	public ToggleGroup nodeOrientation;
@@ -55,6 +56,8 @@ public class GeneralPreferencesController implements FxController {
 	public void initialize() {
 		startHiddenCheckbox.selectedProperty().bindBidirectional(settings.startHidden());
 
+		autoCloseVaultsCheckbox.selectedProperty().bindBidirectional(settings.autoCloseVaults());
+
 		debugModeCheckbox.selectedProperty().bindBidirectional(settings.debugMode());
 
 		autoStartProvider.ifPresent(autoStart -> autoStartCheckbox.setSelected(autoStart.isEnabled()));

File: src/test/java/org/cryptomator/common/settings/SettingsJsonAdapterTest.java
Patch:
@@ -27,6 +27,7 @@ public void testDeserialize() throws IOException {
 						{"id": "1", "path": "/vault1", "mountName": "vault1", "winDriveLetter": "X"},
 						{"id": "2", "path": "/vault2", "mountName": "vault2", "winDriveLetter": "Y"}
 					],
+					"autoCloseVaults" : true,
 					"checkForUpdatesEnabled": true,
 					"port": 8080,
 					"language": "de-DE",
@@ -40,6 +41,7 @@ public void testDeserialize() throws IOException {
 		Assertions.assertTrue(settings.checkForUpdates().get());
 		Assertions.assertEquals(2, settings.getDirectories().size());
 		Assertions.assertEquals(8080, settings.port().get());
+		Assertions.assertEquals(true, settings.autoCloseVaults().get());
 		Assertions.assertEquals("de-DE", settings.languageProperty().get());
 		Assertions.assertEquals(42, settings.numTrayNotifications().get());
 		Assertions.assertEquals(WebDavUrlScheme.DAV, settings.preferredGvfsScheme().get());

File: src/main/java/org/cryptomator/common/vaults/VaultListManager.java
Patch:
@@ -94,10 +94,10 @@ private Optional<Vault> get(Path vaultPath) {
 
 	private Vault create(VaultSettings vaultSettings) {
 		VaultComponent.Builder compBuilder = vaultComponentBuilder.vaultSettings(vaultSettings);
+		VaultConfigCache wrapper = new VaultConfigCache(vaultSettings);
+		compBuilder.vaultConfigCache(wrapper); //first set the wrapper in the builder, THEN try to load config
 		try {
 			VaultState.Value vaultState = determineVaultState(vaultSettings.path().get());
-			VaultConfigCache wrapper = new VaultConfigCache(vaultSettings);
-			compBuilder.vaultConfigCache(wrapper); //first set the wrapper in the builder, THEN try to load config
 			if (vaultState == LOCKED) { //for legacy reasons: pre v8 vault do not have a config, but they are in the NEEDS_MIGRATION state
 				wrapper.reloadConfig();
 			}

File: src/main/java/org/cryptomator/common/vaults/VaultState.java
Patch:
@@ -83,7 +83,7 @@ public boolean transition(Value fromState, Value toState) {
 		if (success) {
 			fireValueChangedEvent();
 		} else {
-			LOG.debug("Failed transiting into state {}: Expected state was not{}.", fromState, toState);
+			LOG.debug("Failed transiting into state {}: Expected state was not {}.", fromState, toState);
 		}
 		return success;
 	}

File: src/main/java/org/cryptomator/ui/keyloading/hub/AuthFlowTask.java
Patch:
@@ -28,8 +28,9 @@ public AuthFlowTask(HubConfig hubConfig, AuthFlowContext authFlowContext, Consum
 
 	@Override
 	protected String call() throws IOException, InterruptedException {
-		// TODO configure redirectURIs with deviceId from authFlowContext
 		var response = AuthFlow.asClient(hubConfig.clientId) //
+				.withSuccessRedirect(URI.create(hubConfig.authSuccessUrl + "&device=" + authFlowContext.deviceId())) //
+				.withErrorRedirect(URI.create(hubConfig.authErrorUrl + "&device=" + authFlowContext.deviceId())) //
 				.authorize(URI.create(hubConfig.authEndpoint), redirectUriConsumer) //
 				.getAccessToken(URI.create(hubConfig.tokenEndpoint));
 		var json = JsonParser.parseString(response);

File: src/main/java/org/cryptomator/ui/preferences/AboutController.java
Patch:
@@ -29,10 +29,10 @@ public class AboutController implements FxController {
 	}
 
 	private static String loadThirdPartyLicenseFile() {
-		try (InputStream in = AboutController.class.getResourceAsStream("/license/THIRD-PARTY.txt")) {
+		try (InputStream in = AboutController.class.getResourceAsStream("/THIRD-PARTY.txt")) {
 			return CharStreams.toString(new InputStreamReader(in));
 		} catch (IOException | NullPointerException e) {
-			LOG.error("Failed to load /license/THIRD-PARTY.txt", e);
+			LOG.error("Failed to load /THIRD-PARTY.txt", e);
 			return "";
 		}
 	}

File: src/main/java/org/cryptomator/ui/fxapp/FxApplicationStyle.java
Patch:
@@ -99,7 +99,7 @@ private void applyDarkTheme() {
 				.ofNullable(getClass().getResource("/css/dark_theme.bss")) //
 				.orElse(getClass().getResource("/css/dark_theme.css"));
 		if (stylesheet == null) {
-			LOG.warn("Failed to load light_theme stylesheet");
+			LOG.warn("Failed to load dark_theme stylesheet");
 		} else {
 			Application.setUserAgentStylesheet(stylesheet.toString());
 			appearanceProvider.ifPresent(provider -> provider.adjustToTheme(Theme.DARK));

File: src/main/java/org/cryptomator/ui/fxapp/FxApplication.java
Patch:
@@ -61,6 +61,9 @@ public void start() {
 					stage.setIconified(true);
 				}
 			}
+		}).exceptionally(error -> {
+			LOG.error("Failed to show main window", error);
+			return null;
 		});
 
 		launchEventHandler.startHandlingLaunchEvents();

File: src/test/java/org/cryptomator/ui/common/PasswordStrengthUtilTest.java
Patch:
@@ -22,7 +22,6 @@ public void testLongPasswords() {
 	}
 
 	@Test
-	@Disabled("waiting on upstream fix") // https://github.com/nulab/zxcvbn4j/issues/54
 	public void testIssue979() {
 		PasswordStrengthUtil util = new PasswordStrengthUtil(Mockito.mock(ResourceBundle.class), Mockito.mock(Environment.class));
 		int result1 = util.computeRate("backed derrick buckling mountains glove client procedures desire destination sword hidden ram");

File: src/main/java/org/cryptomator/ui/fxapp/FxApplicationWindows.java
Patch:
@@ -123,7 +123,7 @@ public CompletionStage<Void> startUnlockWorkflow(Vault vault, @Nullable Stage ow
 
 	public CompletionStage<Void> startLockWorkflow(Vault vault, @Nullable Stage owner) {
 		return CompletableFuture.supplyAsync(() -> {
-					Preconditions.checkState(vault.stateProperty().transition(VaultState.Value.LOCKED, VaultState.Value.PROCESSING), "Vault not unlocked.");
+					Preconditions.checkState(vault.stateProperty().transition(VaultState.Value.UNLOCKED, VaultState.Value.PROCESSING), "Vault not unlocked.");
 					LOG.debug("Start lock workflow for {}", vault.getDisplayName());
 					return lockWorkflowFactory.create(vault, owner).lockWorkflow();
 				}, Platform::runLater) //

File: src/main/java/org/cryptomator/launcher/Cryptomator.java
Patch:
@@ -99,7 +99,7 @@ private int runGuiApplication() {
 			Application.launch(MainApp.class);
 			LOG.info("UI shut down");
 			return 0;
-		} catch (Throwable e) {
+		} catch (Exception e) {
 			LOG.error("Terminating due to error", e);
 			return 1;
 		}

File: src/main/java/org/cryptomator/launcher/CryptomatorModule.java
Patch:
@@ -7,7 +7,6 @@
 import org.cryptomator.integrations.tray.TrayIntegrationProvider;
 import org.cryptomator.integrations.uiappearance.UiAppearanceProvider;
 import org.cryptomator.ui.fxapp.FxApplicationComponent;
-import org.cryptomator.ui.traymenu.TrayMenuComponent;
 
 import javax.inject.Named;
 import javax.inject.Singleton;
@@ -16,7 +15,6 @@
 import java.util.ServiceLoader;
 import java.util.concurrent.ArrayBlockingQueue;
 import java.util.concurrent.BlockingQueue;
-import java.util.concurrent.CountDownLatch;
 
 @Module(subcomponents = {FxApplicationComponent.class})
 class CryptomatorModule {

File: src/main/java/org/cryptomator/ui/common/ErrorComponent.java
Patch:
@@ -4,7 +4,6 @@
 import dagger.Subcomponent;
 import org.cryptomator.common.Nullable;
 
-import javafx.application.Platform;
 import javafx.scene.Scene;
 import javafx.stage.Stage;
 

File: src/main/java/org/cryptomator/ui/fxapp/FxApplicationTerminator.java
Patch:
@@ -26,8 +26,7 @@
 @FxApplicationScoped
 public class FxApplicationTerminator {
 
-	public static final Set<VaultState.Value> STATES_ALLOWING_TERMINATION = EnumSet.of(LOCKED, NEEDS_MIGRATION, MISSING, ERROR);
-
+	private static final Set<VaultState.Value> STATES_ALLOWING_TERMINATION = EnumSet.of(LOCKED, NEEDS_MIGRATION, MISSING, ERROR);
 	private static final Logger LOG = LoggerFactory.getLogger(FxApplicationTerminator.class);
 
 	private final ObservableList<Vault> vaults;

File: src/main/java/org/cryptomator/ui/lock/LockModule.java
Patch:
@@ -20,7 +20,6 @@
 import javafx.stage.Modality;
 import javafx.stage.Stage;
 import java.util.Map;
-import java.util.Optional;
 import java.util.ResourceBundle;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.atomic.AtomicReference;

File: src/main/java/org/cryptomator/ui/mainwindow/MainWindowTitleController.java
Patch:
@@ -3,7 +3,6 @@
 import org.cryptomator.common.LicenseHolder;
 import org.cryptomator.common.settings.Settings;
 import org.cryptomator.ui.common.FxController;
-import org.cryptomator.ui.fxapp.FxApplication;
 import org.cryptomator.ui.fxapp.FxApplicationTerminator;
 import org.cryptomator.ui.fxapp.FxApplicationWindows;
 import org.cryptomator.ui.fxapp.UpdateChecker;

File: src/main/java/org/cryptomator/ui/mainwindow/VaultDetailController.java
Patch:
@@ -1,15 +1,13 @@
 package org.cryptomator.ui.mainwindow;
 
 import com.tobiasdiez.easybind.EasyBind;
-import com.tobiasdiez.easybind.Subscription;
 import org.cryptomator.common.vaults.Vault;
 import org.cryptomator.common.vaults.VaultState;
 import org.cryptomator.ui.common.Animations;
 import org.cryptomator.ui.common.AutoAnimator;
 import org.cryptomator.ui.common.FxController;
 import org.cryptomator.ui.controls.FontAwesome5Icon;
 import org.cryptomator.ui.controls.FontAwesome5IconView;
-import org.cryptomator.ui.fxapp.FxApplication;
 
 import javax.inject.Inject;
 import javafx.application.Application;

File: src/main/java/org/cryptomator/ui/migration/MigrationImpossibleController.java
Patch:
@@ -2,7 +2,6 @@
 
 import org.cryptomator.common.vaults.Vault;
 import org.cryptomator.ui.common.FxController;
-import org.cryptomator.ui.fxapp.FxApplication;
 
 import javax.inject.Inject;
 import javafx.application.Application;

File: src/main/java/org/cryptomator/ui/unlock/UnlockModule.java
Patch:
@@ -22,7 +22,6 @@
 import javafx.stage.Modality;
 import javafx.stage.Stage;
 import java.util.Map;
-import java.util.Optional;
 import java.util.ResourceBundle;
 
 @Module(subcomponents = {KeyLoadingComponent.class})

File: src/main/java/org/cryptomator/launcher/Cryptomator.java
Patch:
@@ -79,7 +79,7 @@ private int run(String[] args) {
 				communicator.sendHandleLaunchargs(List.of(args));
 				communicator.sendRevealRunningApp();
 				LOG.info("Found running application instance. Shutting down...");
-				return 2;
+				return 0;
 			} else {
 				shutdownHook.runOnShutdown(communicator::closeUnchecked);
 				var executor = Executors.newSingleThreadExecutor(new ThreadFactoryBuilder().setNameFormat("IPC-%d").build());

File: src/test/java/org/cryptomator/common/mountpoint/CustomMountPointChooserTest.java
Patch:
@@ -33,7 +33,7 @@ public void init() {
 		this.volume = Mockito.mock(Volume.class);
 		this.vaultSettings = Mockito.mock(VaultSettings.class);
 		this.environment = Mockito.mock(Environment.class);
-		this.customMpc = new CustomMountPointChooser(vaultSettings, environment);
+		this.customMpc = new CustomMountPointChooser(vaultSettings);
 	}
 
 	@Nested

File: src/main/java/org/cryptomator/ui/traymenu/TrayMenuController.java
Patch:
@@ -91,7 +91,7 @@ private Menu buildSubmenu(Vault vault) {
 			unlockItem.addActionListener(createActionListenerForVault(vault, this::unlockVault));
 			submenu.add(unlockItem);
 		} else if (vault.isUnlocked()) {
-			submenu.setLabel("*".concat(submenu.getLabel()));
+			submenu.setLabel("* ".concat(submenu.getLabel()));
 
 			MenuItem lockItem = new MenuItem(resourceBundle.getString("traymenu.vault.lock"));
 			lockItem.addActionListener(createActionListenerForVault(vault, this::lockVault));

File: src/main/java/org/cryptomator/ui/vaultoptions/MountOptionsController.java
Patch:
@@ -183,15 +183,15 @@ public boolean isCustomMountPointSupported() {
 	}
 
 	public boolean isReadOnlySupported() {
-		return !(usedVolumeImpl == VolumeImpl.FUSE && isOsWindows()) ;
+		return !(usedVolumeImpl == VolumeImpl.FUSE && isOsWindows());
 	}
 
 	public StringProperty customMountPathProperty() {
 		return vault.getVaultSettings().customMountPath();
 	}
 
 	public boolean isCustomMountOptionsSupported() {
-		return !(usedVolumeImpl == VolumeImpl.WEBDAV);
+		return usedVolumeImpl != VolumeImpl.WEBDAV;
 	}
 
 	public String getCustomMountPath() {

File: src/test/java/org/cryptomator/common/mountpoint/CustomMountPointChooserTest.java
Patch:
@@ -39,7 +39,7 @@ public void init() {
 	}
 
 	@Nested
-	class WinfspPreperations {
+	public class WinfspPreperations {
 
 		@Test
 		@DisplayName("PARENT_NO_MOUNTPOINT preparations succeeds, if only mountpoint is present")

File: src/main/java/org/cryptomator/common/mountpoint/CustomMountPointChooser.java
Patch:
@@ -56,7 +56,7 @@ public boolean prepare(Volume caller, Path mountPoint) throws InvalidMountPointE
 				throw new InvalidMountPointException(new IllegalStateException("Illegal MountPointRequirement"));
 			}
 			default -> {
-				//Currently the case for "PARENT_OPT_MOUNT_POINT"
+				//Currently the case for "UNUSED_ROOT_DIR, PARENT_OPT_MOUNT_POINT"
 				throw new InvalidMountPointException(new IllegalStateException("Not implemented"));
 			}
 		}

File: src/main/java/org/cryptomator/common/mountpoint/TemporaryMountPointChooser.java
Patch:
@@ -65,7 +65,7 @@ public boolean prepare(Volume caller, Path mountPoint) throws InvalidMountPointE
 					throw new InvalidMountPointException(new IllegalStateException("Illegal MountPointRequirement"));
 				}
 				default -> {
-					//Currently the case for "PARENT_OPT_MOUNT_POINT"
+					//Currently the case for "UNUSED_ROOT_DIR, PARENT_OPT_MOUNT_POINT"
 					throw new InvalidMountPointException(new IllegalStateException("Not implemented"));
 				}
 			}

File: src/main/java/org/cryptomator/common/vaults/DokanyVolume.java
Patch:
@@ -86,7 +86,7 @@ public boolean isSupported() {
 
 	@Override
 	public MountPointRequirement getMountPointRequirement() {
-		return MountPointRequirement.EMPTY_MOUNT_POINT;
+		return this.vaultSettings.getWinDriveLetter().isPresent() ? MountPointRequirement.UNUSED_ROOT_DIR : MountPointRequirement.EMPTY_MOUNT_POINT;
 	}
 
 	public static boolean isSupportedStatic() {

File: src/main/java/org/cryptomator/common/mountpoint/CustomMountPointChooser.java
Patch:
@@ -56,7 +56,7 @@ public boolean prepare(Volume caller, Path mountPoint) throws InvalidMountPointE
 				throw new InvalidMountPointException(new IllegalStateException("Illegal MountPointRequirement"));
 			}
 			default -> {
-				//Currently the case for "PARENT_OPT_MOUNT_POINT"
+				//Currently the case for "NO_PARENT_NO_MOUNT_POINT, PARENT_OPT_MOUNT_POINT"
 				throw new InvalidMountPointException(new IllegalStateException("Not implemented"));
 			}
 		}

File: src/main/java/org/cryptomator/common/mountpoint/TemporaryMountPointChooser.java
Patch:
@@ -65,7 +65,7 @@ public boolean prepare(Volume caller, Path mountPoint) throws InvalidMountPointE
 					throw new InvalidMountPointException(new IllegalStateException("Illegal MountPointRequirement"));
 				}
 				default -> {
-					//Currently the case for "PARENT_OPT_MOUNT_POINT"
+					//Currently the case for "NO_PARENT_NO_MOUNT_POINT, PARENT_OPT_MOUNT_POINT"
 					throw new InvalidMountPointException(new IllegalStateException("Not implemented"));
 				}
 			}

File: src/main/java/org/cryptomator/common/vaults/DokanyVolume.java
Patch:
@@ -86,7 +86,7 @@ public boolean isSupported() {
 
 	@Override
 	public MountPointRequirement getMountPointRequirement() {
-		return MountPointRequirement.EMPTY_MOUNT_POINT;
+		return this.vaultSettings.getWinDriveLetter().isPresent() ? MountPointRequirement.NO_PARENT_NO_MOUNT_POINT : MountPointRequirement.EMPTY_MOUNT_POINT;
 	}
 
 	public static boolean isSupportedStatic() {

File: src/main/java/org/cryptomator/ui/fxapp/UpdateCheckerTask.java
Patch:
@@ -23,7 +23,7 @@ public class UpdateCheckerTask extends Task<String> {
 
 	private static final Logger LOG = LoggerFactory.getLogger(UpdateCheckerTask.class);
 
-	private static final long MAX_RESPONSE_SIZE = 10 * 1024; // 10kb should be sufficient. protect against flooding
+	private static final long MAX_RESPONSE_SIZE = 10L * 1024; // 10kb should be sufficient. protect against flooding
 	private static final Gson GSON = new GsonBuilder().setLenient().create();
 
 	private final HttpClient httpClient;

File: src/main/java/org/cryptomator/ui/stats/VaultStatisticsController.java
Patch:
@@ -127,10 +127,10 @@ public void handle(ActionEvent event) {
 			encryptedBytesWrite.getData().add(new Data<>(currentStep, encBytes));
 
 			// adjust ranges:
-			readChartXAxis.setLowerBound(currentStep - IO_SAMPLING_STEPS);
+			readChartXAxis.setLowerBound(currentStep - IO_SAMPLING_STEPS * 1.0);
 			readChartXAxis.setUpperBound(currentStep);
 			readChartYAxis.setUpperBound(allTimeMax);
-			writeChartXAxis.setLowerBound(currentStep - IO_SAMPLING_STEPS);
+			writeChartXAxis.setLowerBound(currentStep - IO_SAMPLING_STEPS * 1.0);
 			writeChartXAxis.setUpperBound(currentStep);
 			writeChartYAxis.setUpperBound(allTimeMax);
 		}

File: src/test/java/org/cryptomator/common/ErrorCodeTest.java
Patch:
@@ -106,7 +106,7 @@ public class DifferentExceptionWithSameRootCause {
 		private ErrorCode code2;
 
 		@BeforeEach
-		private void setup() {
+		public void setup() {
 			Mockito.doReturn(new StackTraceElement[]{baz, bar, foo}).when(fooException).getStackTrace();
 			Mockito.doReturn(new StackTraceElement[]{foo}).when(fooBarException).getStackTrace();
 			Mockito.doReturn(new StackTraceElement[]{foo}).when(fooBazException).getStackTrace();
@@ -152,7 +152,7 @@ public class SameExceptionDifferentCallStack {
 		private ErrorCode code2;
 
 		@BeforeEach
-		private void setup() {
+		public void setup() {
 			Mockito.doReturn(new StackTraceElement[]{foo, bar, baz}).when(fooException).getStackTrace();
 			Mockito.doReturn(new StackTraceElement[]{foo, baz, bar}).when(barException).getStackTrace();
 			this.code1 = ErrorCode.of(fooException);

File: src/main/java/org/cryptomator/common/Constants.java
Patch:
@@ -5,6 +5,7 @@ public interface Constants {
 	String MASTERKEY_FILENAME = "masterkey.cryptomator";
 	String MASTERKEY_BACKUP_SUFFIX = ".bkup";
 	String VAULTCONFIG_FILENAME = "vault.cryptomator";
+	String CRYPTOMATOR_FILENAME_EXT = ".cryptomator";
 	byte[] PEPPER = new byte[0];
 
 }

File: src/main/java/org/cryptomator/common/vaults/VaultComponent.java
Patch:
@@ -25,6 +25,9 @@ interface Builder {
 		@BindsInstance
 		Builder vaultSettings(VaultSettings vaultSettings);
 
+		@BindsInstance
+		Builder vaultConfigCache(VaultConfigCache configCache);
+
 		@BindsInstance
 		Builder initialVaultState(VaultState.Value vaultState);
 

File: src/main/java/org/cryptomator/ui/addvaultwizard/CreateNewVaultPasswordController.java
Patch:
@@ -182,7 +182,7 @@ private void initializeVault(Path path) throws IOException {
 
 			// 2. initialize vault:
 			try {
-				MasterkeyLoader loader = ignored -> masterkey.clone();
+				MasterkeyLoader loader = ignored -> masterkey.copy();
 				CryptoFileSystemProperties fsProps = CryptoFileSystemProperties.cryptoFileSystemProperties().withCipherCombo(CryptorProvider.Scheme.SIV_CTRMAC).withKeyLoader(loader).build();
 				CryptoFileSystemProvider.initialize(path, fsProps, DEFAULT_KEY_ID);
 

File: src/main/java/org/cryptomator/ui/addvaultwizard/LocationPresets.java
Patch:
@@ -14,7 +14,7 @@ public class LocationPresets {
 	private static final String USER_HOME = System.getProperty("user.home");
 	private static final String[] ICLOUDDRIVE_LOCATIONS = {"~/Library/Mobile Documents/iCloud~com~setolabs~Cryptomator/Documents", "~/iCloudDrive/iCloud~com~setolabs~Cryptomator"};
 	private static final String[] DROPBOX_LOCATIONS = {"~/Dropbox"};
-	private static final String[] GDRIVE_LOCATIONS = {"~/Google Drive"};
+	private static final String[] GDRIVE_LOCATIONS = {"~/Google Drive/My Drive", "~/Google Drive"};
 	private static final String[] ONEDRIVE_LOCATIONS = {"~/OneDrive"};
 	private static final String[] MEGA_LOCATIONS = {"~/MEGA"};
 	private static final String[] PCLOUD_LOCATIONS = {"~/pCloudDrive"};

File: src/main/java/org/cryptomator/ui/common/FxmlFile.java
Patch:
@@ -12,7 +12,6 @@ public enum FxmlFile {
 	ERROR("/fxml/error.fxml"), //
 	FORGET_PASSWORD("/fxml/forget_password.fxml"), //
 	HEALTH_START("/fxml/health_start.fxml"), //
-	HEALTH_START_FAIL("/fxml/health_start_fail.fxml"), //
 	HEALTH_CHECK_LIST("/fxml/health_check_list.fxml"), //
 	LOCK_FORCED("/fxml/lock_forced.fxml"), //
 	LOCK_FAILED("/fxml/lock_failed.fxml"), //

File: src/main/java/org/cryptomator/ui/controls/FontAwesome5Icon.java
Patch:
@@ -12,6 +12,7 @@ public enum FontAwesome5Icon {
 	CARET_RIGHT("\uF0Da"), //
 	CHECK("\uF00C"), //
 	CLOCK("\uF017"), //
+	CLIPBOARD("\uF328"), //
 	COG("\uF013"), //
 	COGS("\uF085"), //
 	COPY("\uF0C5"), //

File: src/main/java/org/cryptomator/ui/controls/SecurePasswordField.java
Patch:
@@ -10,6 +10,7 @@
 
 import com.google.common.base.Strings;
 
+import javafx.application.Platform;
 import javafx.beans.NamedArg;
 import javafx.beans.Observable;
 import javafx.beans.property.BooleanProperty;
@@ -27,7 +28,6 @@
 import javafx.scene.input.KeyCombination;
 import javafx.scene.input.KeyEvent;
 import javafx.scene.input.TransferMode;
-import java.awt.Toolkit;
 import java.nio.CharBuffer;
 import java.text.Normalizer;
 import java.text.Normalizer.Form;
@@ -123,8 +123,7 @@ private void focusedChanged(@SuppressWarnings("unused") Observable observable) {
 	}
 
 	private void updateCapsLocked() {
-		//TODO: fixed in JavaFX 17. AWT code needed until update (see https://bugs.openjdk.java.net/browse/JDK-8259680)
-		capsLocked.set(isFocused() && Toolkit.getDefaultToolkit().getLockingKeyState(java.awt.event.KeyEvent.VK_CAPS_LOCK));
+		capsLocked.set(Platform.isKeyLocked(KeyCode.CAPS).orElse(false));
 	}
 
 	private void updateContainingNonPrintableChars() {

File: src/main/java/org/cryptomator/ui/health/CheckExecutor.java
Patch:
@@ -67,7 +67,7 @@ private class CheckTask extends Task<Void> {
 
 		@Override
 		protected Void call() throws Exception {
-			try (var masterkeyClone = masterkey.clone(); //
+			try (var masterkeyClone = masterkey.copy(); //
 				 var cryptor = CryptorProvider.forScheme(vaultConfig.getCipherCombo()).provide(masterkeyClone, csprng)) {
 				c.getHealthCheck().check(vaultPath, vaultConfig, masterkeyClone, cryptor, diagnosis -> {
 					Platform.runLater(() -> c.getResults().add(Result.create(diagnosis)));

File: src/main/java/org/cryptomator/ui/health/ResultFixApplier.java
Patch:
@@ -50,7 +50,7 @@ public CompletionStage<Void> fix(Result result) {
 
 	public void fix(DiagnosticResult diagnosis) {
 		Preconditions.checkArgument(diagnosis.getSeverity() == DiagnosticResult.Severity.WARN, "Unfixable result");
-		try (var masterkeyClone = masterkey.clone(); //
+		try (var masterkeyClone = masterkey.copy(); //
 			 var cryptor = CryptorProvider.forScheme(vaultConfig.getCipherCombo()).provide(masterkeyClone, csprng)) {
 			diagnosis.fix(vaultPath, vaultConfig, masterkeyClone, cryptor);
 		} catch (Exception e) {

File: src/main/java/org/cryptomator/ui/launcher/AppLaunchEventHandler.java
Patch:
@@ -11,12 +11,11 @@
 import javax.inject.Singleton;
 import javafx.application.Platform;
 import java.io.IOException;
-import java.nio.file.NoSuchFileException;
 import java.nio.file.Path;
 import java.util.concurrent.BlockingQueue;
 import java.util.concurrent.ExecutorService;
 
-import static org.cryptomator.common.Constants.MASTERKEY_FILENAME;
+import static org.cryptomator.common.Constants.CRYPTOMATOR_FILENAME_EXT;
 
 @Singleton
 class AppLaunchEventHandler {
@@ -69,7 +68,7 @@ private void addOrRevealVault(Path potentialVaultPath) {
 		assert Platform.isFxApplicationThread();
 		try {
 			final Vault v;
-			if (potentialVaultPath.getFileName().toString().equals(MASTERKEY_FILENAME)) {
+			if (potentialVaultPath.getFileName().toString().endsWith(CRYPTOMATOR_FILENAME_EXT)) {
 				v = vaultListManager.add(potentialVaultPath.getParent());
 			} else {
 				v = vaultListManager.add(potentialVaultPath);

File: src/main/java/module-info.java
Patch:
@@ -46,6 +46,7 @@
 	opens org.cryptomator.ui.fxapp to javafx.fxml;
 	opens org.cryptomator.ui.health to javafx.fxml;
 	opens org.cryptomator.ui.keyloading.masterkeyfile to javafx.fxml;
+	opens org.cryptomator.ui.lock to javafx.fxml;
 	opens org.cryptomator.ui.mainwindow to javafx.fxml;
 	opens org.cryptomator.ui.migration to javafx.fxml;
 	opens org.cryptomator.ui.preferences to javafx.fxml;

File: src/main/java/org/cryptomator/ui/addvaultwizard/LocationPresets.java
Patch:
@@ -14,7 +14,7 @@ public class LocationPresets {
 	private static final String USER_HOME = System.getProperty("user.home");
 	private static final String[] ICLOUDDRIVE_LOCATIONS = {"~/Library/Mobile Documents/iCloud~com~setolabs~Cryptomator/Documents", "~/iCloudDrive/iCloud~com~setolabs~Cryptomator"};
 	private static final String[] DROPBOX_LOCATIONS = {"~/Dropbox"};
-	private static final String[] GDRIVE_LOCATIONS = {"~/Google Drive"};
+	private static final String[] GDRIVE_LOCATIONS = {"~/Google Drive/My Drive", "~/Google Drive"};
 	private static final String[] ONEDRIVE_LOCATIONS = {"~/OneDrive"};
 	private static final String[] MEGA_LOCATIONS = {"~/MEGA"};
 	private static final String[] PCLOUD_LOCATIONS = {"~/pCloudDrive"};

File: src/main/java/org/cryptomator/ui/controls/FontAwesome5Icon.java
Patch:
@@ -12,6 +12,7 @@ public enum FontAwesome5Icon {
 	CARET_RIGHT("\uF0Da"), //
 	CHECK("\uF00C"), //
 	CLOCK("\uF017"), //
+	CLIPBOARD("\uF328"), //
 	COG("\uF013"), //
 	COGS("\uF085"), //
 	COPY("\uF0C5"), //

File: src/main/java/org/cryptomator/common/vaults/Vault.java
Patch:
@@ -58,7 +58,7 @@ public class Vault {
 	private final AtomicReference<CryptoFileSystem> cryptoFileSystem;
 	private final VaultState state;
 	private final ObjectProperty<Exception> lastKnownException;
-	private final VaultConfigWrapper configWrapper;
+	private final VaultConfigCache configWrapper;
 	private final VaultStats stats;
 	private final StringBinding displayName;
 	private final StringBinding displayablePath;
@@ -75,7 +75,7 @@ public class Vault {
 	private volatile Volume volume;
 
 	@Inject
-	Vault(VaultSettings vaultSettings, VaultConfigWrapper configWrapper, Provider<Volume> volumeProvider, @DefaultMountFlags StringBinding defaultMountFlags, AtomicReference<CryptoFileSystem> cryptoFileSystem, VaultState state, @Named("lastKnownException") ObjectProperty<Exception> lastKnownException, VaultStats stats) {
+	Vault(VaultSettings vaultSettings, VaultConfigCache configWrapper, Provider<Volume> volumeProvider, @DefaultMountFlags StringBinding defaultMountFlags, AtomicReference<CryptoFileSystem> cryptoFileSystem, VaultState state, @Named("lastKnownException") ObjectProperty<Exception> lastKnownException, VaultStats stats) {
 		this.vaultSettings = vaultSettings;
 		this.configWrapper = configWrapper;
 		this.volumeProvider = volumeProvider;
@@ -368,7 +368,7 @@ public UnverifiedVaultConfig getUnverifiedVaultConfig() {
 		try {
 			return configWrapper.getConfig();
 		} catch (IOException e) {
-			throw new IllegalStateException("One should not accquire the config if thee is not present.");
+			throw new IllegalStateException("Vault Config not present.");
 		}
 
 	}

File: src/main/java/org/cryptomator/common/vaults/VaultComponent.java
Patch:
@@ -10,7 +10,6 @@
 import org.cryptomator.common.Nullable;
 import org.cryptomator.common.mountpoint.MountPointChooserModule;
 import org.cryptomator.common.settings.VaultSettings;
-import org.cryptomator.cryptofs.VaultConfig;
 
 import javax.inject.Named;
 
@@ -27,7 +26,7 @@ interface Builder {
 		Builder vaultSettings(VaultSettings vaultSettings);
 
 		@BindsInstance
-		Builder vaultConfigWrapper(VaultConfigWrapper rapper);
+		Builder vaultConfigCache(VaultConfigCache configCache);
 
 		@BindsInstance
 		Builder initialVaultState(VaultState.Value vaultState);

File: src/main/java/org/cryptomator/ipc/Server.java
Patch:
@@ -27,6 +27,7 @@ private Server(ServerSocketChannel serverSocketChannel, Path socketPath) {
 	}
 
 	public static Server create(Path socketPath) throws IOException {
+		Files.createDirectories(socketPath.getParent());
 		var address = UnixDomainSocketAddress.of(socketPath);
 		var serverSocketChannel = ServerSocketChannel.open(StandardProtocolFamily.UNIX);
 		serverSocketChannel.bind(address);

File: src/main/java/org/cryptomator/ui/mainwindow/MainWindowModule.java
Patch:
@@ -49,7 +49,7 @@ static FxmlLoaderFactory provideFxmlLoaderFactory(Map<Class<? extends FxControll
 	@MainWindowScoped
 	static Stage provideStage(StageFactory factory) {
 		Stage stage = factory.create(StageStyle.UNDECORATED);
-		stage.setMinWidth(550);
+		stage.setMinWidth(650);
 		stage.setMinHeight(440);
 		stage.setTitle("Cryptomator");
 		return stage;

File: src/main/java/org/cryptomator/ui/keyloading/KeyLoadingStrategy.java
Patch:
@@ -77,6 +77,7 @@ default <E extends Exception> void use(KeyLoadingStrategyUser<E> user) throws Ma
 		boolean success = false;
 		try {
 			user.use(this);
+			success = true;
 		} catch (MasterkeyLoadingFailedException e) {
 			if (recoverFromException(e)) {
 				LOG.info("Unlock attempt threw {}. Reattempting...", e.getClass().getSimpleName());

File: src/main/java/org/cryptomator/ui/mainwindow/MainWindowTitleController.java
Patch:
@@ -54,7 +54,7 @@ public class MainWindowTitleController implements FxController {
 
 	@FXML
 	public void initialize() {
-		LOG.debug("init MainWindowTitleController");
+		LOG.trace("init MainWindowTitleController");
 		updateChecker.automaticallyCheckForUpdatesIfEnabled();
 		titleBar.setOnMousePressed(event -> {
 			xOffset = event.getSceneX();

File: src/main/java/org/cryptomator/ui/mainwindow/ResizeController.java
Patch:
@@ -45,7 +45,7 @@ public class ResizeController implements FxController {
 
 	@FXML
 	public void initialize() {
-		LOG.debug("init ResizeController");
+		LOG.trace("init ResizeController");
 		tlResizer.setOnMousePressed(this::startResize);
 		trResizer.setOnMousePressed(this::startResize);
 		blResizer.setOnMousePressed(this::startResize);

File: src/main/java/org/cryptomator/ui/mainwindow/MainWindowTitleController.java
Patch:
@@ -73,7 +73,6 @@ public void initialize() {
 			}
 		});
 		titleBar.setOnMouseDragged(event -> {
-			//TODO should it be possible to move the window, when in fullscreen?
 			if (window.isFullScreen()) return;
 			window.setX(event.getScreenX() - xOffset);
 			window.setY(event.getScreenY() - yOffset);
@@ -86,6 +85,7 @@ public void initialize() {
 			event.consume();
 		});
 	}
+
 	//TODO: almost duplicate from ResizeController.class
 	private void saveSettings() {
 		settings.windowYPositionProperty().setValue(window.getY());

File: src/main/java/org/cryptomator/ui/fxapp/UpdateChecker.java
Patch:
@@ -1,5 +1,6 @@
 package org.cryptomator.ui.fxapp;
 
+import org.cryptomator.common.Environment;
 import org.cryptomator.common.settings.Settings;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -31,9 +32,9 @@ public class UpdateChecker {
 	private final ScheduledService<String> updateCheckerService;
 
 	@Inject
-	UpdateChecker(Settings settings, @Named("applicationVersion") Optional<String> applicationVersion, @Named("latestVersion") StringProperty latestVersionProperty, @Named("SemVer") Comparator<String> semVerComparator, ScheduledService<String> updateCheckerService) {
+	UpdateChecker(Settings settings, Environment env, @Named("latestVersion") StringProperty latestVersionProperty, @Named("SemVer") Comparator<String> semVerComparator, ScheduledService<String> updateCheckerService) {
 		this.settings = settings;
-		this.applicationVersion = applicationVersion;
+		this.applicationVersion = env.getAppVersion();
 		this.latestVersionProperty = latestVersionProperty;
 		this.semVerComparator = semVerComparator;
 		this.updateCheckerService = updateCheckerService;

File: src/main/java/org/cryptomator/ui/fxapp/UpdateCheckerModule.java
Patch:
@@ -3,6 +3,7 @@
 import dagger.Module;
 import dagger.Provides;
 import org.apache.commons.lang3.SystemUtils;
+import org.cryptomator.common.Environment;
 import org.cryptomator.common.settings.Settings;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -51,9 +52,9 @@ static Optional<HttpClient> provideHttpClient() {
 
 	@Provides
 	@FxApplicationScoped
-	static HttpRequest provideCheckForUpdatesRequest(@Named("applicationVersion") Optional<String> applicationVersion) {
+	static HttpRequest provideCheckForUpdatesRequest(Environment env) {
 		String userAgent = String.format("Cryptomator VersionChecker/%s %s %s (%s)", //
-				applicationVersion.orElse("SNAPSHOT"), //
+				env.getAppVersion().orElse("SNAPSHOT"), //
 				SystemUtils.OS_NAME, //
 				SystemUtils.OS_VERSION, //
 				SystemUtils.OS_ARCH); //

File: src/main/java/org/cryptomator/ui/addvaultwizard/CreateNewVaultPasswordController.java
Patch:
@@ -107,7 +107,7 @@ public class CreateNewVaultPasswordController implements FxController {
 
 	@FXML
 	public void initialize() {
-		readyToCreateVault.bind(newPasswordSceneController.passwordsMatchAndSufficientProperty().and(recoveryKeyChoice.selectedToggleProperty().isNotNull()).and(processing.not()));
+		readyToCreateVault.bind(newPasswordSceneController.goodPasswordProperty().and(recoveryKeyChoice.selectedToggleProperty().isNotNull()).and(processing.not()));
 		window.setOnHiding(event -> {
 			newPasswordSceneController.passwordField.wipe();
 			newPasswordSceneController.reenterField.wipe();

File: src/main/java/org/cryptomator/ui/changepassword/ChangePasswordController.java
Patch:
@@ -62,7 +62,7 @@ public ChangePasswordController(@ChangePasswordWindow Stage window, @ChangePassw
 	public void initialize() {
 		BooleanBinding checkboxNotConfirmed = finalConfirmationCheckbox.selectedProperty().not();
 		BooleanBinding oldPasswordFieldEmpty = oldPasswordField.textProperty().isEmpty();
-		finishButton.disableProperty().bind(checkboxNotConfirmed.or(oldPasswordFieldEmpty).or(newPasswordController.passwordsMatchAndSufficientProperty().not()));
+		finishButton.disableProperty().bind(checkboxNotConfirmed.or(oldPasswordFieldEmpty).or(newPasswordController.goodPasswordProperty().not()));
 		window.setOnHiding(event -> {
 			oldPasswordField.wipe();
 			newPasswordController.passwordField.wipe();

File: src/main/java/org/cryptomator/ui/recoverykey/RecoveryKeyResetPasswordController.java
Patch:
@@ -86,11 +86,11 @@ protected Void call() throws IOException, IllegalArgumentException {
 	/* Getter/Setter */
 
 	public ReadOnlyBooleanProperty validPasswordProperty() {
-		return newPasswordController.passwordsMatchAndSufficientProperty();
+		return newPasswordController.goodPasswordProperty();
 	}
 
 	public boolean isValidPassword() {
-		return newPasswordController.passwordsMatchAndSufficientProperty().get();
+		return newPasswordController.isGoodPassword();
 	}
 
 }

File: src/main/java/org/cryptomator/ui/preferences/GeneralPreferencesController.java
Patch:
@@ -224,7 +224,7 @@ public KeychainAccessProvider fromString(String string) {
 			if (string == null) {
 				return null;
 			} else {
-				return keychainAccessProviders.stream().filter(provider -> provider.getClass().getName().equals(string)).findAny().orElseThrow();
+				return keychainAccessProviders.stream().filter(provider -> provider.getClass().getName().equals(string)).findAny().orElse(null);
 			}
 		}
 	}

File: src/main/java/org/cryptomator/ui/health/CheckStateIconView.java
Patch:
@@ -23,7 +23,6 @@ public class CheckStateIconView extends FontAwesome5IconView {
 
 	public CheckStateIconView() {
 		super();
-		this.getStyleClass().remove("glyph-icon");
 		this.state = EasyBind.wrapNullable(check).mapObservable(Check::stateProperty);
 		this.severity = EasyBind.wrapNullable(check).mapObservable(Check::highestResultSeverityProperty);
 		glyphProperty().bind(EasyBind.combine(state, severity, this::glyphForState)); //TODO: does the binding need to be stored?

File: src/main/java/org/cryptomator/ui/health/ResultListCellController.java
Patch:
@@ -76,8 +76,6 @@ public ResultListCellController(ResultFixApplier fixApplier, ResourceBundle reso
 	@FXML
 	public void initialize() {
 		// see getGlyph() for relevant glyphs:
-		severityView.getStyleClass().remove("glyph-icon");
-		fixView.getStyleClass().remove("glyph-icon");
 		subscriptions.addAll(List.of(EasyBind.includeWhen(severityView.getStyleClass(), "glyph-icon-muted", severityView.glyphProperty().isEqualTo(INFO_ICON)), //
 				EasyBind.includeWhen(severityView.getStyleClass(), "glyph-icon-primary", severityView.glyphProperty().isEqualTo(GOOD_ICON)), //
 				EasyBind.includeWhen(severityView.getStyleClass(), "glyph-icon-orange", severityView.glyphProperty().isEqualTo(WARN_ICON)), //

File: src/main/java/org/cryptomator/ui/health/HealthCheckModule.java
Patch:
@@ -92,7 +92,7 @@ static Stage provideUnlockWindow (@HealthCheckWindow Stage window, @HealthCheckW
 		Stage stage = factory.create();
 		stage.initModality(Modality.WINDOW_MODAL);
 		stage.initOwner(window);
-		stage.setTitle(String.format("TODO: Unlock \"%s\"", vault.getDisplayName()));
+		stage.setTitle(String.format(resourceBundle.getString("unlock.title"), vault.getDisplayName()));
 		stage.setResizable(false);
 		return stage;
 	}

File: src/main/java/org/cryptomator/common/Environment.java
Patch:
@@ -33,7 +33,7 @@ public Environment() {
 		LOG.debug("user.region: {}", System.getProperty("user.region"));
 		LOG.debug("logback.configurationFile: {}", System.getProperty("logback.configurationFile"));
 		LOG.debug("cryptomator.settingsPath: {}", System.getProperty("cryptomator.settingsPath"));
-		LOG.debug("cryptomator.ipcPortPath: {}", System.getProperty("cryptomator.ipcPortPath"));
+		LOG.debug("cryptomator.ipcSocketPath: {}", System.getProperty("cryptomator.ipcSocketPath"));
 		LOG.debug("cryptomator.keychainPath: {}", System.getProperty("cryptomator.keychainPath"));
 		LOG.debug("cryptomator.logDir: {}", System.getProperty("cryptomator.logDir"));
 		LOG.debug("cryptomator.mountPointsDir: {}", System.getProperty("cryptomator.mountPointsDir"));
@@ -51,8 +51,8 @@ public Stream<Path> getSettingsPath() {
 		return getPaths("cryptomator.settingsPath");
 	}
 
-	public Stream<Path> getIpcPortPath() {
-		return getPaths("cryptomator.ipcPortPath");
+	public Stream<Path> ipcSocketPath() {
+		return getPaths("cryptomator.ipcSocketPath");
 	}
 
 	public Stream<Path> getKeychainPath() {

File: src/test/java/org/cryptomator/ipc/IpcCommunicatorTest.java
Patch:
@@ -1,11 +1,9 @@
 package org.cryptomator.ipc;
 
-import com.google.common.util.concurrent.MoreExecutors;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.function.Executable;
 import org.junit.jupiter.api.io.TempDir;
-import org.mockito.Mockito;
 
 import java.io.IOException;
 import java.nio.file.Path;

File: src/main/java/org/cryptomator/launcher/Cryptomator.java
Patch:
@@ -46,6 +46,7 @@ public class Cryptomator {
 
 	public static void main(String[] args) {
 		int exitCode = CRYPTOMATOR_COMPONENT.application().run(args);
+		LOG.info("Exit {}", exitCode);
 		System.exit(exitCode); // end remaining non-daemon threads.
 	}
 

File: src/main/java/org/cryptomator/ui/health/StartFailController.java
Patch:
@@ -14,6 +14,7 @@
 import javafx.fxml.FXML;
 import javafx.stage.Stage;
 
+@HealthCheckScoped
 public class StartFailController implements FxController {
 
 	@Inject

File: src/main/java/org/cryptomator/ui/health/ReportWriter.java
Patch:
@@ -72,7 +72,7 @@ protected void writeReport(Collection<HealthCheckTask> tasks) throws IOException
 					case SUCCEEDED -> {
 						writer.write("STATUS: SUCCESS\nRESULTS:\n");
 						for (var result : task.results()) {
-							writer.write(REPORT_CHECK_RESULT.formatted(result.getSeverity(), result.toString()));
+							writer.write(REPORT_CHECK_RESULT.formatted(result.diagnosis().getSeverity(), result.getDescription()));
 						}
 					}
 					case CANCELLED -> writer.write("STATUS: CANCELED\n");

File: src/main/java/org/cryptomator/common/CommonsModule.java
Patch:
@@ -46,6 +46,7 @@ public abstract class CommonsModule {
 	private static final int NUM_CORE_BG_THREADS = 6;
 	private static final long BG_THREAD_KEEPALIVE_SECONDS = 60l;
 
+	@SuppressWarnings("SpellCheckingInspection")
 	@Provides
 	@Singleton
 	@Named("licensePublicKey")

File: src/main/java/org/cryptomator/common/Environment.java
Patch:
@@ -123,8 +123,8 @@ private Stream<String> getRawList(String propertyName, char separator) {
 			return Stream.empty();
 		} else {
 			Iterable<String> iter = Splitter.on(separator).split(value);
-			Spliterator<String> spliter = Spliterators.spliteratorUnknownSize(iter.iterator(), Spliterator.ORDERED | Spliterator.IMMUTABLE);
-			return StreamSupport.stream(spliter, false);
+			Spliterator<String> spliterator = Spliterators.spliteratorUnknownSize(iter.iterator(), Spliterator.ORDERED | Spliterator.IMMUTABLE);
+			return StreamSupport.stream(spliterator, false);
 		}
 	}
 }

File: src/main/java/org/cryptomator/common/settings/Settings.java
Patch:
@@ -30,7 +30,7 @@ public class Settings {
 	public static final int MIN_PORT = 1024;
 	public static final int MAX_PORT = 65535;
 	public static final boolean DEFAULT_ASKED_FOR_UPDATE_CHECK = false;
-	public static final boolean DEFAULT_CHECK_FOR_UDPATES = false;
+	public static final boolean DEFAULT_CHECK_FOR_UPDATES = false;
 	public static final boolean DEFAULT_START_HIDDEN = false;
 	public static final int DEFAULT_PORT = 42427;
 	public static final int DEFAULT_NUM_TRAY_NOTIFICATIONS = 3;
@@ -46,7 +46,7 @@ public class Settings {
 
 	private final ObservableList<VaultSettings> directories = FXCollections.observableArrayList(VaultSettings::observables);
 	private final BooleanProperty askedForUpdateCheck = new SimpleBooleanProperty(DEFAULT_ASKED_FOR_UPDATE_CHECK);
-	private final BooleanProperty checkForUpdates = new SimpleBooleanProperty(DEFAULT_CHECK_FOR_UDPATES);
+	private final BooleanProperty checkForUpdates = new SimpleBooleanProperty(DEFAULT_CHECK_FOR_UPDATES);
 	private final BooleanProperty startHidden = new SimpleBooleanProperty(DEFAULT_START_HIDDEN);
 	private final IntegerProperty port = new SimpleIntegerProperty(DEFAULT_PORT);
 	private final IntegerProperty numTrayNotifications = new SimpleIntegerProperty(DEFAULT_NUM_TRAY_NOTIFICATIONS);

File: src/main/java/org/cryptomator/common/settings/SettingsProvider.java
Patch:
@@ -101,7 +101,7 @@ private void scheduleSave(Settings settings) {
 		if (settings == null) {
 			return;
 		}
-		final Optional<Path> settingsPath = env.getSettingsPath().findFirst(); // alway save to preferred (first) path
+		final Optional<Path> settingsPath = env.getSettingsPath().findFirst(); // always save to preferred (first) path
 		settingsPath.ifPresent(path -> {
 			Runnable saveCommand = () -> this.save(settings, path);
 			ScheduledFuture<?> scheduledTask = scheduler.schedule(saveCommand, SAVE_DELAY_MS, TimeUnit.MILLISECONDS);

File: src/main/java/org/cryptomator/common/settings/VaultSettings.java
Patch:
@@ -31,7 +31,7 @@
 public class VaultSettings {
 
 	public static final boolean DEFAULT_UNLOCK_AFTER_STARTUP = false;
-	public static final boolean DEFAULT_REAVEAL_AFTER_MOUNT = true;
+	public static final boolean DEFAULT_REVEAL_AFTER_MOUNT = true;
 	public static final boolean DEFAULT_USES_INDIVIDUAL_MOUNTPATH = false;
 	public static final boolean DEFAULT_USES_READONLY_MODE = false;
 	public static final String DEFAULT_MOUNT_FLAGS = "";
@@ -47,7 +47,7 @@ public class VaultSettings {
 	private final StringProperty displayName = new SimpleStringProperty();
 	private final StringProperty winDriveLetter = new SimpleStringProperty();
 	private final BooleanProperty unlockAfterStartup = new SimpleBooleanProperty(DEFAULT_UNLOCK_AFTER_STARTUP);
-	private final BooleanProperty revealAfterMount = new SimpleBooleanProperty(DEFAULT_REAVEAL_AFTER_MOUNT);
+	private final BooleanProperty revealAfterMount = new SimpleBooleanProperty(DEFAULT_REVEAL_AFTER_MOUNT);
 	private final BooleanProperty useCustomMountPath = new SimpleBooleanProperty(DEFAULT_USES_INDIVIDUAL_MOUNTPATH);
 	private final StringProperty customMountPath = new SimpleStringProperty();
 	private final BooleanProperty usesReadOnlyMode = new SimpleBooleanProperty(DEFAULT_USES_READONLY_MODE);

File: src/main/java/org/cryptomator/common/settings/VaultSettingsJsonAdapter.java
Patch:
@@ -44,7 +44,7 @@ public VaultSettings read(JsonReader in) throws IOException {
 		String customMountPath = null;
 		String winDriveLetter = null;
 		boolean unlockAfterStartup = VaultSettings.DEFAULT_UNLOCK_AFTER_STARTUP;
-		boolean revealAfterMount = VaultSettings.DEFAULT_REAVEAL_AFTER_MOUNT;
+		boolean revealAfterMount = VaultSettings.DEFAULT_REVEAL_AFTER_MOUNT;
 		boolean useCustomMountPath = VaultSettings.DEFAULT_USES_INDIVIDUAL_MOUNTPATH;
 		boolean usesReadOnlyMode = VaultSettings.DEFAULT_USES_READONLY_MODE;
 		String mountFlags = VaultSettings.DEFAULT_MOUNT_FLAGS;

File: src/main/java/org/cryptomator/common/vaults/VaultModule.java
Patch:
@@ -138,7 +138,7 @@ private String getLinuxFuseDefaultMountFlags(ReadOnlyBooleanProperty readOnly) {
 
 	// see https://github.com/billziss-gh/winfsp/blob/5d0b10d0b643652c00ebb4704dc2bb28e7244973/src/dll/fuse/fuse_main.c#L53-L62 for syntax guide
 	// see https://github.com/billziss-gh/winfsp/blob/5d0b10d0b643652c00ebb4704dc2bb28e7244973/src/dll/fuse/fuse.c#L295-L319 for options (-o <...>)
-	// see https://github.com/billziss-gh/winfsp/wiki/Frequently-Asked-Questions/5ba00e4be4f5e938eaae6ef1500b331de12dee77 (FUSE 4.) on why the given defaults were choosen
+	// see https://github.com/billziss-gh/winfsp/wiki/Frequently-Asked-Questions/5ba00e4be4f5e938eaae6ef1500b331de12dee77 (FUSE 4.) on why the given defaults were chosen
 	private String getWindowsFuseDefaultMountFlags(StringBinding mountName, ReadOnlyBooleanProperty readOnly) {
 		assert SystemUtils.IS_OS_WINDOWS;
 		StringBuilder flags = new StringBuilder();

File: src/main/java/org/cryptomator/common/vaults/VaultState.java
Patch:
@@ -46,7 +46,7 @@ public enum Value {
 		UNLOCKED,
 
 		/**
-		 * Unknown state due to preceeding unrecoverable exceptions.
+		 * Unknown state due to preceding unrecoverable exceptions.
 		 */
 		ERROR;
 	}

File: src/main/java/org/cryptomator/common/vaults/Volume.java
Patch:
@@ -12,7 +12,7 @@
 import java.util.stream.Stream;
 
 /**
- * Takes a Volume and usess it to mount an unlocked vault
+ * Takes a Volume and uses it to mount an unlocked vault
  */
 public interface Volume {
 
@@ -24,7 +24,7 @@ public interface Volume {
 	boolean isSupported();
 
 	/**
-	 * Gets the coresponding enum type of the {@link VolumeImpl volume implementation ("VolumeImpl")} that is implemented by this Volume.
+	 * Gets the corresponding enum type of the {@link VolumeImpl volume implementation ("VolumeImpl")} that is implemented by this Volume.
 	 *
 	 * @return the type of implementation as defined by the {@link VolumeImpl VolumeImpl enum}
 	 */

File: src/main/java/org/cryptomator/common/vaults/WebDavVolume.java
Patch:
@@ -67,7 +67,7 @@ private void mountServlet() throws VolumeException {
 			throw new IllegalStateException("Mounting requires unlocked WebDAV servlet.");
 		}
 
-		//on windows, prevent an automatic drive letter selection in the upstream library. Either we choose already a specifc one or there is no free.
+		//on windows, prevent an automatic drive letter selection in the upstream library. Either we choose already a specific one or there is no free.
 		Supplier<String> driveLetterSupplier;
 		if (System.getProperty("os.name").toLowerCase().contains("windows") && vaultSettings.winDriveLetter().isEmpty().get()) {
 			driveLetterSupplier = () -> windowsDriveLetters.getAvailableDriveLetter().orElse(null);

File: src/main/java/org/cryptomator/logging/LaunchAndSizeBasedTriggeringPolicy.java
Patch:
@@ -11,12 +11,12 @@
  *
  * @param <E> Event type the policy possibly reacts to
  */
-public class LaunchAndSizeBasedTriggerinPolicy<E> extends TriggeringPolicyBase<E> {
+public class LaunchAndSizeBasedTriggeringPolicy<E> extends TriggeringPolicyBase<E> {
 
 	LaunchBasedTriggeringPolicy<E> launchBasedTriggeringPolicy;
 	SizeBasedTriggeringPolicy<E> sizeBasedTriggeringPolicy;
 
-	public LaunchAndSizeBasedTriggerinPolicy(FileSize threshold) {
+	public LaunchAndSizeBasedTriggeringPolicy(FileSize threshold) {
 		this.launchBasedTriggeringPolicy = new LaunchBasedTriggeringPolicy<>();
 		this.sizeBasedTriggeringPolicy = new SizeBasedTriggeringPolicy<>();
 		sizeBasedTriggeringPolicy.setMaxFileSize(threshold);

File: src/main/java/org/cryptomator/logging/LoggerModule.java
Patch:
@@ -85,7 +85,7 @@ static Appender<ILoggingEvent> provideFileAppender(LoggerContext context, Patter
 			appender.setContext(context);
 			appender.setFile(logDir.resolve(LOGFILE_NAME).toString());
 			appender.setEncoder(encoder);
-			LaunchAndSizeBasedTriggerinPolicy triggeringPolicy = new LaunchAndSizeBasedTriggerinPolicy(FileSize.valueOf(LOG_MAX_SIZE));
+			LaunchAndSizeBasedTriggeringPolicy triggeringPolicy = new LaunchAndSizeBasedTriggeringPolicy(FileSize.valueOf(LOG_MAX_SIZE));
 			triggeringPolicy.setContext(context);
 			triggeringPolicy.start();
 			appender.setTriggeringPolicy(triggeringPolicy);

File: src/main/java/org/cryptomator/ui/common/FxmlLoaderFactory.java
Patch:
@@ -67,8 +67,8 @@ private Scene createScene(String fxmlResourceName) {
 		}
 		Parent root = loader.getRoot();
 		// TODO: discuss if we can remove language-specific stylesheets
-		// List<String> addtionalStyleSheets = Splitter.on(',').omitEmptyStrings().splitToList(resourceBundle.getString("additionalStyleSheets"));
-		// addtionalStyleSheets.forEach(styleSheet -> root.getStylesheets().add("/css/" + styleSheet));
+		// List<String> additionalStyleSheets = Splitter.on(',').omitEmptyStrings().splitToList(resourceBundle.getString("additionalStyleSheets"));
+		// additionalStyleSheets.forEach(styleSheet -> root.getStylesheets().add("/css/" + styleSheet));
 		return sceneFactory.apply(root);
 	}
 

File: src/main/java/org/cryptomator/ui/common/WeakBindings.java
Patch:
@@ -77,7 +77,7 @@ protected double computeValue() {
 	 * @param observable The observable
 	 * @return a IntegerBinding weakly referenced from the given observable
 	 */
-	public static IntegerBinding bindInterger(ObservableValue<Number> observable) {
+	public static IntegerBinding bindInteger(ObservableValue<Number> observable) {
 		return new IntegerBinding() {
 			{
 				bind(observable);

File: src/main/java/org/cryptomator/ui/controls/ThroughputLabel.java
Patch:
@@ -8,7 +8,7 @@
 import javafx.beans.property.StringProperty;
 import javafx.scene.control.Label;
 
-public class ThrougputLabel extends Label {
+public class ThroughputLabel extends Label {
 
 	private static final long KIBS_THRESHOLD = 1l << 7; // 0.128 kiB/s
 	private static final long MIBS_THRESHOLD = 1l << 19; // 0.512 MiB/s
@@ -18,7 +18,7 @@ public class ThrougputLabel extends Label {
 	private final StringProperty mibsFormat = new SimpleStringProperty("%.3f");
 	private final LongProperty bytesPerSecond = new SimpleLongProperty();
 
-	public ThrougputLabel() {
+	public ThroughputLabel() {
 		textProperty().bind(createStringBinding());
 	}
 

File: src/main/java/org/cryptomator/ui/keyloading/KeyLoadingStrategy.java
Patch:
@@ -35,7 +35,7 @@ default boolean recoverFromException(MasterkeyLoadingFailedException exception)
 	}
 
 	/**
-	 * Release any ressources or do follow-up tasks after loading a key.
+	 * Release any resources or do follow-up tasks after loading a key.
 	 *
 	 * @param unlockedSuccessfully <code>true</code> if successfully unlocked a vault with the loaded key
 	 * @implNote This method might be invoked multiple times, depending on whether multiple attempts to load a key are started.
@@ -47,7 +47,7 @@ default void cleanup(boolean unlockedSuccessfully) {
 	/**
 	 * A key loading strategy that will always fail by throwing a {@link MasterkeyLoadingFailedException}.
 	 *
-	 * @param exception The cause of the failure. If not alreay an {@link MasterkeyLoadingFailedException}, it will get wrapped.
+	 * @param exception The cause of the failure. If not already an {@link MasterkeyLoadingFailedException}, it will get wrapped.
 	 * @return A new KeyLoadingStrategy that will always fail with an {@link MasterkeyLoadingFailedException}.
 	 */
 	static KeyLoadingStrategy failed(Exception exception) {

File: src/main/java/org/cryptomator/ui/launcher/AppLaunchEventHandler.java
Patch:
@@ -64,7 +64,7 @@ private void handleLaunchEvent(AppLaunchEvent event) {
 		}
 	}
 
-	// TODO dedup MainWindowController...
+	// TODO deduplicate MainWindowController...
 	private void addOrRevealVault(Path potentialVaultPath) {
 		assert Platform.isFxApplicationThread();
 		try {

File: src/main/java/org/cryptomator/ui/lock/LockWorkflow.java
Patch:
@@ -22,7 +22,7 @@
 /**
  * The sequence of actions performed and checked during lock of a vault.
  * <p>
- * This class implements the Task interface, sucht that it can run in the background with some possible forground operations/requests to the ui, without blocking the main app.
+ * This class implements the Task interface, sucht that it can run in the background with some possible foreground operations/requests to the ui, without blocking the main app.
  * If the task state is
  * <li>succeeded, the vault was successfully locked;</li>
  * <li>canceled, the lock was canceled;</li>

File: src/main/java/org/cryptomator/ui/mainwindow/MainWindowTitleController.java
Patch:
@@ -129,7 +129,7 @@ public BooleanBinding showMinimizeButtonProperty() {
 	}
 
 	public boolean isShowMinimizeButton() {
-		// always show the minimize button if no tray icon is present OR it is explicitily enabled
+		// always show the minimize button if no tray icon is present OR it is explicitly enabled
 		return !trayMenuInitialized || settings.showMinimizeButton().get();
 	}
 }

File: src/main/java/org/cryptomator/ui/stats/VaultStatisticsController.java
Patch:
@@ -65,8 +65,8 @@ public VaultStatisticsController(VaultStatisticsComponent component, @VaultStati
 		this.cacheHitRate = WeakBindings.bindDouble(stats.cacheHitRateProperty());
 		this.cacheHitDegrees = cacheHitRate.multiply(-270);
 		this.cacheHitPercentage = cacheHitRate.multiply(100);
-		this.totalBytesRead = WeakBindings.bindLong(stats.toalBytesReadProperty());
-		this.totalBytesWritten = WeakBindings.bindLong(stats.toalBytesWrittenProperty());
+		this.totalBytesRead = WeakBindings.bindLong(stats.totalBytesReadProperty());
+		this.totalBytesWritten = WeakBindings.bindLong(stats.totalBytesWrittenProperty());
 		this.totalBytesDecrypted = WeakBindings.bindLong(stats.totalBytesDecryptedProperty());
 		this.totalBytesEncrypted = WeakBindings.bindLong(stats.totalBytesEncryptedProperty());
 		this.filesRead = WeakBindings.bindLong(stats.filesRead());
@@ -102,7 +102,7 @@ public IoSamplingAnimationHandler(Series<Number, Number> readData, Series<Number
 			this.decryptedBytesRead = readData;
 			this.encryptedBytesWrite = writeData;
 
-			// initialize data once and change value of datapoints later:
+			// initialize data once and change value of data points later:
 			for (int i = 0; i < IO_SAMPLING_STEPS; i++) {
 				decryptedBytesRead.getData().add(new Data<>(i, 0));
 				encryptedBytesWrite.getData().add(new Data<>(i, 0));

File: src/test/java/org/cryptomator/common/settings/SettingsJsonAdapterTest.java
Patch:
@@ -44,6 +44,7 @@ public void testDeserialize() throws IOException {
 		Assertions.assertEquals(VolumeImpl.FUSE, settings.preferredVolumeImpl().get());
 	}
 
+	@SuppressWarnings("SpellCheckingInspection")
 	@ParameterizedTest(name = "fromJson() should throw IOException for input: {0}")
 	@ValueSource(strings = { //
 			"", //

File: src/test/java/org/cryptomator/common/settings/VaultSettingsJsonAdapterTest.java
Patch:
@@ -40,6 +40,7 @@ public void testDeserialize() throws IOException {
 		);
 	}
 
+	@SuppressWarnings("SpellCheckingInspection")
 	@Test
 	public void testSerialize() throws IOException {
 		VaultSettings vaultSettings = new VaultSettings("test");

File: src/test/java/org/cryptomator/launcher/IpcFactoryTest.java
Patch:
@@ -24,7 +24,7 @@ public class IpcFactoryTest {
 	private IpcProtocolImpl protocolHandler = Mockito.mock(IpcProtocolImpl.class);
 
 	@Test
-	@DisplayName("Wihout IPC port files")
+	@DisplayName("Without IPC port files")
 	public void testNoIpcWithoutPortFile() throws IOException {
 		IpcFactory inTest = new IpcFactory(environment, protocolHandler);
 

File: src/test/java/org/cryptomator/ui/addvaultwizard/ReadMeGeneratorTest.java
Patch:
@@ -11,6 +11,7 @@
 
 public class ReadMeGeneratorTest {
 
+	@SuppressWarnings("SpellCheckingInspection")
 	@ParameterizedTest
 	@CsvSource({ //
 			"test,test", //

File: src/test/java/org/cryptomator/ui/recoverykey/AutoCompleterTest.java
Patch:
@@ -43,6 +43,7 @@ public void testFindTame(String prefix) {
 			Assertions.assertEquals("tame", result.get());
 		}
 
+		@SuppressWarnings("SpellCheckingInspection")
 		@ParameterizedTest
 		@DisplayName("find 'teach'")
 		@ValueSource(strings = {"te", "tea", "teac", "teach"})
@@ -52,6 +53,7 @@ public void testFindTeach(String prefix) {
 			Assertions.assertEquals("teach", result.get());
 		}
 
+		@SuppressWarnings("SpellCheckingInspection")
 		@ParameterizedTest
 		@DisplayName("find 'teacher'")
 		@ValueSource(strings = {"teache", "teacher"})

File: src/main/java/org/cryptomator/logging/LaunchAndSizeBasedTriggeringPolicy.java
Patch:
@@ -11,12 +11,12 @@
  *
  * @param <E> Event type the policy possibly reacts to
  */
-public class LaunchAndSizeBasedTriggerinPolicy<E> extends TriggeringPolicyBase<E> {
+public class LaunchAndSizeBasedTriggeringPolicy<E> extends TriggeringPolicyBase<E> {
 
 	LaunchBasedTriggeringPolicy<E> launchBasedTriggeringPolicy;
 	SizeBasedTriggeringPolicy<E> sizeBasedTriggeringPolicy;
 
-	public LaunchAndSizeBasedTriggerinPolicy(FileSize threshold) {
+	public LaunchAndSizeBasedTriggeringPolicy(FileSize threshold) {
 		this.launchBasedTriggeringPolicy = new LaunchBasedTriggeringPolicy<>();
 		this.sizeBasedTriggeringPolicy = new SizeBasedTriggeringPolicy<>();
 		sizeBasedTriggeringPolicy.setMaxFileSize(threshold);

File: src/main/java/org/cryptomator/logging/LoggerModule.java
Patch:
@@ -85,7 +85,7 @@ static Appender<ILoggingEvent> provideFileAppender(LoggerContext context, Patter
 			appender.setContext(context);
 			appender.setFile(logDir.resolve(LOGFILE_NAME).toString());
 			appender.setEncoder(encoder);
-			LaunchAndSizeBasedTriggerinPolicy triggeringPolicy = new LaunchAndSizeBasedTriggerinPolicy(FileSize.valueOf(LOG_MAX_SIZE));
+			LaunchAndSizeBasedTriggeringPolicy triggeringPolicy = new LaunchAndSizeBasedTriggeringPolicy(FileSize.valueOf(LOG_MAX_SIZE));
 			triggeringPolicy.setContext(context);
 			triggeringPolicy.start();
 			appender.setTriggeringPolicy(triggeringPolicy);

File: src/main/java/org/cryptomator/ui/common/WeakBindings.java
Patch:
@@ -77,7 +77,7 @@ protected double computeValue() {
 	 * @param observable The observable
 	 * @return a IntegerBinding weakly referenced from the given observable
 	 */
-	public static IntegerBinding bindInterger(ObservableValue<Number> observable) {
+	public static IntegerBinding bindInteger(ObservableValue<Number> observable) {
 		return new IntegerBinding() {
 			{
 				bind(observable);

File: src/main/java/org/cryptomator/ui/controls/ThroughputLabel.java
Patch:
@@ -8,7 +8,7 @@
 import javafx.beans.property.StringProperty;
 import javafx.scene.control.Label;
 
-public class ThrougputLabel extends Label {
+public class ThroughputLabel extends Label {
 
 	private static final long KIBS_THRESHOLD = 1l << 7; // 0.128 kiB/s
 	private static final long MIBS_THRESHOLD = 1l << 19; // 0.512 MiB/s
@@ -18,7 +18,7 @@ public class ThrougputLabel extends Label {
 	private final StringProperty mibsFormat = new SimpleStringProperty("%.3f");
 	private final LongProperty bytesPerSecond = new SimpleLongProperty();
 
-	public ThrougputLabel() {
+	public ThroughputLabel() {
 		textProperty().bind(createStringBinding());
 	}
 

File: src/main/java/org/cryptomator/ui/stats/VaultStatisticsController.java
Patch:
@@ -65,8 +65,8 @@ public VaultStatisticsController(VaultStatisticsComponent component, @VaultStati
 		this.cacheHitRate = WeakBindings.bindDouble(stats.cacheHitRateProperty());
 		this.cacheHitDegrees = cacheHitRate.multiply(-270);
 		this.cacheHitPercentage = cacheHitRate.multiply(100);
-		this.totalBytesRead = WeakBindings.bindLong(stats.toalBytesReadProperty());
-		this.totalBytesWritten = WeakBindings.bindLong(stats.toalBytesWrittenProperty());
+		this.totalBytesRead = WeakBindings.bindLong(stats.totalBytesReadProperty());
+		this.totalBytesWritten = WeakBindings.bindLong(stats.totalBytesWrittenProperty());
 		this.totalBytesDecrypted = WeakBindings.bindLong(stats.totalBytesDecryptedProperty());
 		this.totalBytesEncrypted = WeakBindings.bindLong(stats.totalBytesEncryptedProperty());
 		this.filesRead = WeakBindings.bindLong(stats.filesRead());

File: src/main/java/org/cryptomator/common/CommonsModule.java
Patch:
@@ -46,6 +46,7 @@ public abstract class CommonsModule {
 	private static final int NUM_CORE_BG_THREADS = 6;
 	private static final long BG_THREAD_KEEPALIVE_SECONDS = 60l;
 
+	@SuppressWarnings("SpellCheckingInspection")
 	@Provides
 	@Singleton
 	@Named("licensePublicKey")

File: src/main/java/org/cryptomator/common/Environment.java
Patch:
@@ -123,8 +123,8 @@ private Stream<String> getRawList(String propertyName, char separator) {
 			return Stream.empty();
 		} else {
 			Iterable<String> iter = Splitter.on(separator).split(value);
-			Spliterator<String> spliter = Spliterators.spliteratorUnknownSize(iter.iterator(), Spliterator.ORDERED | Spliterator.IMMUTABLE);
-			return StreamSupport.stream(spliter, false);
+			Spliterator<String> spliterator = Spliterators.spliteratorUnknownSize(iter.iterator(), Spliterator.ORDERED | Spliterator.IMMUTABLE);
+			return StreamSupport.stream(spliterator, false);
 		}
 	}
 }

File: src/main/java/org/cryptomator/common/settings/Settings.java
Patch:
@@ -30,7 +30,7 @@ public class Settings {
 	public static final int MIN_PORT = 1024;
 	public static final int MAX_PORT = 65535;
 	public static final boolean DEFAULT_ASKED_FOR_UPDATE_CHECK = false;
-	public static final boolean DEFAULT_CHECK_FOR_UDPATES = false;
+	public static final boolean DEFAULT_CHECK_FOR_UPDATES = false;
 	public static final boolean DEFAULT_START_HIDDEN = false;
 	public static final int DEFAULT_PORT = 42427;
 	public static final int DEFAULT_NUM_TRAY_NOTIFICATIONS = 3;
@@ -46,7 +46,7 @@ public class Settings {
 
 	private final ObservableList<VaultSettings> directories = FXCollections.observableArrayList(VaultSettings::observables);
 	private final BooleanProperty askedForUpdateCheck = new SimpleBooleanProperty(DEFAULT_ASKED_FOR_UPDATE_CHECK);
-	private final BooleanProperty checkForUpdates = new SimpleBooleanProperty(DEFAULT_CHECK_FOR_UDPATES);
+	private final BooleanProperty checkForUpdates = new SimpleBooleanProperty(DEFAULT_CHECK_FOR_UPDATES);
 	private final BooleanProperty startHidden = new SimpleBooleanProperty(DEFAULT_START_HIDDEN);
 	private final IntegerProperty port = new SimpleIntegerProperty(DEFAULT_PORT);
 	private final IntegerProperty numTrayNotifications = new SimpleIntegerProperty(DEFAULT_NUM_TRAY_NOTIFICATIONS);

File: src/main/java/org/cryptomator/common/settings/SettingsProvider.java
Patch:
@@ -101,7 +101,7 @@ private void scheduleSave(Settings settings) {
 		if (settings == null) {
 			return;
 		}
-		final Optional<Path> settingsPath = env.getSettingsPath().findFirst(); // alway save to preferred (first) path
+		final Optional<Path> settingsPath = env.getSettingsPath().findFirst(); // always save to preferred (first) path
 		settingsPath.ifPresent(path -> {
 			Runnable saveCommand = () -> this.save(settings, path);
 			ScheduledFuture<?> scheduledTask = scheduler.schedule(saveCommand, SAVE_DELAY_MS, TimeUnit.MILLISECONDS);

File: src/main/java/org/cryptomator/common/settings/VaultSettings.java
Patch:
@@ -31,7 +31,7 @@
 public class VaultSettings {
 
 	public static final boolean DEFAULT_UNLOCK_AFTER_STARTUP = false;
-	public static final boolean DEFAULT_REAVEAL_AFTER_MOUNT = true;
+	public static final boolean DEFAULT_REVEAL_AFTER_MOUNT = true;
 	public static final boolean DEFAULT_USES_INDIVIDUAL_MOUNTPATH = false;
 	public static final boolean DEFAULT_USES_READONLY_MODE = false;
 	public static final String DEFAULT_MOUNT_FLAGS = "";
@@ -47,7 +47,7 @@ public class VaultSettings {
 	private final StringProperty displayName = new SimpleStringProperty();
 	private final StringProperty winDriveLetter = new SimpleStringProperty();
 	private final BooleanProperty unlockAfterStartup = new SimpleBooleanProperty(DEFAULT_UNLOCK_AFTER_STARTUP);
-	private final BooleanProperty revealAfterMount = new SimpleBooleanProperty(DEFAULT_REAVEAL_AFTER_MOUNT);
+	private final BooleanProperty revealAfterMount = new SimpleBooleanProperty(DEFAULT_REVEAL_AFTER_MOUNT);
 	private final BooleanProperty useCustomMountPath = new SimpleBooleanProperty(DEFAULT_USES_INDIVIDUAL_MOUNTPATH);
 	private final StringProperty customMountPath = new SimpleStringProperty();
 	private final BooleanProperty usesReadOnlyMode = new SimpleBooleanProperty(DEFAULT_USES_READONLY_MODE);

File: src/main/java/org/cryptomator/common/settings/VaultSettingsJsonAdapter.java
Patch:
@@ -44,7 +44,7 @@ public VaultSettings read(JsonReader in) throws IOException {
 		String customMountPath = null;
 		String winDriveLetter = null;
 		boolean unlockAfterStartup = VaultSettings.DEFAULT_UNLOCK_AFTER_STARTUP;
-		boolean revealAfterMount = VaultSettings.DEFAULT_REAVEAL_AFTER_MOUNT;
+		boolean revealAfterMount = VaultSettings.DEFAULT_REVEAL_AFTER_MOUNT;
 		boolean useCustomMountPath = VaultSettings.DEFAULT_USES_INDIVIDUAL_MOUNTPATH;
 		boolean usesReadOnlyMode = VaultSettings.DEFAULT_USES_READONLY_MODE;
 		String mountFlags = VaultSettings.DEFAULT_MOUNT_FLAGS;

File: src/main/java/org/cryptomator/common/vaults/VaultModule.java
Patch:
@@ -138,7 +138,7 @@ private String getLinuxFuseDefaultMountFlags(ReadOnlyBooleanProperty readOnly) {
 
 	// see https://github.com/billziss-gh/winfsp/blob/5d0b10d0b643652c00ebb4704dc2bb28e7244973/src/dll/fuse/fuse_main.c#L53-L62 for syntax guide
 	// see https://github.com/billziss-gh/winfsp/blob/5d0b10d0b643652c00ebb4704dc2bb28e7244973/src/dll/fuse/fuse.c#L295-L319 for options (-o <...>)
-	// see https://github.com/billziss-gh/winfsp/wiki/Frequently-Asked-Questions/5ba00e4be4f5e938eaae6ef1500b331de12dee77 (FUSE 4.) on why the given defaults were choosen
+	// see https://github.com/billziss-gh/winfsp/wiki/Frequently-Asked-Questions/5ba00e4be4f5e938eaae6ef1500b331de12dee77 (FUSE 4.) on why the given defaults were chosen
 	private String getWindowsFuseDefaultMountFlags(StringBinding mountName, ReadOnlyBooleanProperty readOnly) {
 		assert SystemUtils.IS_OS_WINDOWS;
 		StringBuilder flags = new StringBuilder();

File: src/main/java/org/cryptomator/common/vaults/VaultState.java
Patch:
@@ -46,7 +46,7 @@ public enum Value {
 		UNLOCKED,
 
 		/**
-		 * Unknown state due to preceeding unrecoverable exceptions.
+		 * Unknown state due to preceding unrecoverable exceptions.
 		 */
 		ERROR;
 	}

File: src/main/java/org/cryptomator/common/vaults/Volume.java
Patch:
@@ -12,7 +12,7 @@
 import java.util.stream.Stream;
 
 /**
- * Takes a Volume and usess it to mount an unlocked vault
+ * Takes a Volume and uses it to mount an unlocked vault
  */
 public interface Volume {
 
@@ -24,7 +24,7 @@ public interface Volume {
 	boolean isSupported();
 
 	/**
-	 * Gets the coresponding enum type of the {@link VolumeImpl volume implementation ("VolumeImpl")} that is implemented by this Volume.
+	 * Gets the corresponding enum type of the {@link VolumeImpl volume implementation ("VolumeImpl")} that is implemented by this Volume.
 	 *
 	 * @return the type of implementation as defined by the {@link VolumeImpl VolumeImpl enum}
 	 */

File: src/main/java/org/cryptomator/common/vaults/WebDavVolume.java
Patch:
@@ -67,7 +67,7 @@ private void mountServlet() throws VolumeException {
 			throw new IllegalStateException("Mounting requires unlocked WebDAV servlet.");
 		}
 
-		//on windows, prevent an automatic drive letter selection in the upstream library. Either we choose already a specifc one or there is no free.
+		//on windows, prevent an automatic drive letter selection in the upstream library. Either we choose already a specific one or there is no free.
 		Supplier<String> driveLetterSupplier;
 		if (System.getProperty("os.name").toLowerCase().contains("windows") && vaultSettings.winDriveLetter().isEmpty().get()) {
 			driveLetterSupplier = () -> windowsDriveLetters.getAvailableDriveLetter().orElse(null);

File: src/main/java/org/cryptomator/ui/common/FxmlLoaderFactory.java
Patch:
@@ -67,8 +67,8 @@ private Scene createScene(String fxmlResourceName) {
 		}
 		Parent root = loader.getRoot();
 		// TODO: discuss if we can remove language-specific stylesheets
-		// List<String> addtionalStyleSheets = Splitter.on(',').omitEmptyStrings().splitToList(resourceBundle.getString("additionalStyleSheets"));
-		// addtionalStyleSheets.forEach(styleSheet -> root.getStylesheets().add("/css/" + styleSheet));
+		// List<String> additionalStyleSheets = Splitter.on(',').omitEmptyStrings().splitToList(resourceBundle.getString("additionalStyleSheets"));
+		// additionalStyleSheets.forEach(styleSheet -> root.getStylesheets().add("/css/" + styleSheet));
 		return sceneFactory.apply(root);
 	}
 

File: src/main/java/org/cryptomator/ui/keyloading/KeyLoadingStrategy.java
Patch:
@@ -35,7 +35,7 @@ default boolean recoverFromException(MasterkeyLoadingFailedException exception)
 	}
 
 	/**
-	 * Release any ressources or do follow-up tasks after loading a key.
+	 * Release any resources or do follow-up tasks after loading a key.
 	 *
 	 * @param unlockedSuccessfully <code>true</code> if successfully unlocked a vault with the loaded key
 	 * @implNote This method might be invoked multiple times, depending on whether multiple attempts to load a key are started.
@@ -47,7 +47,7 @@ default void cleanup(boolean unlockedSuccessfully) {
 	/**
 	 * A key loading strategy that will always fail by throwing a {@link MasterkeyLoadingFailedException}.
 	 *
-	 * @param exception The cause of the failure. If not alreay an {@link MasterkeyLoadingFailedException}, it will get wrapped.
+	 * @param exception The cause of the failure. If not already an {@link MasterkeyLoadingFailedException}, it will get wrapped.
 	 * @return A new KeyLoadingStrategy that will always fail with an {@link MasterkeyLoadingFailedException}.
 	 */
 	static KeyLoadingStrategy failed(Exception exception) {

File: src/main/java/org/cryptomator/ui/launcher/AppLaunchEventHandler.java
Patch:
@@ -64,7 +64,7 @@ private void handleLaunchEvent(AppLaunchEvent event) {
 		}
 	}
 
-	// TODO dedup MainWindowController...
+	// TODO deduplicate MainWindowController...
 	private void addOrRevealVault(Path potentialVaultPath) {
 		assert Platform.isFxApplicationThread();
 		try {

File: src/main/java/org/cryptomator/ui/lock/LockWorkflow.java
Patch:
@@ -22,7 +22,7 @@
 /**
  * The sequence of actions performed and checked during lock of a vault.
  * <p>
- * This class implements the Task interface, sucht that it can run in the background with some possible forground operations/requests to the ui, without blocking the main app.
+ * This class implements the Task interface, sucht that it can run in the background with some possible foreground operations/requests to the ui, without blocking the main app.
  * If the task state is
  * <li>succeeded, the vault was successfully locked;</li>
  * <li>canceled, the lock was canceled;</li>

File: src/main/java/org/cryptomator/ui/mainwindow/MainWindowTitleController.java
Patch:
@@ -129,7 +129,7 @@ public BooleanBinding showMinimizeButtonProperty() {
 	}
 
 	public boolean isShowMinimizeButton() {
-		// always show the minimize button if no tray icon is present OR it is explicitily enabled
+		// always show the minimize button if no tray icon is present OR it is explicitly enabled
 		return !trayMenuInitialized || settings.showMinimizeButton().get();
 	}
 }

File: src/main/java/org/cryptomator/ui/stats/VaultStatisticsController.java
Patch:
@@ -102,7 +102,7 @@ public IoSamplingAnimationHandler(Series<Number, Number> readData, Series<Number
 			this.decryptedBytesRead = readData;
 			this.encryptedBytesWrite = writeData;
 
-			// initialize data once and change value of datapoints later:
+			// initialize data once and change value of data points later:
 			for (int i = 0; i < IO_SAMPLING_STEPS; i++) {
 				decryptedBytesRead.getData().add(new Data<>(i, 0));
 				encryptedBytesWrite.getData().add(new Data<>(i, 0));

File: src/test/java/org/cryptomator/common/settings/SettingsJsonAdapterTest.java
Patch:
@@ -44,6 +44,7 @@ public void testDeserialize() throws IOException {
 		Assertions.assertEquals(VolumeImpl.FUSE, settings.preferredVolumeImpl().get());
 	}
 
+	@SuppressWarnings("SpellCheckingInspection")
 	@ParameterizedTest(name = "fromJson() should throw IOException for input: {0}")
 	@ValueSource(strings = { //
 			"", //

File: src/test/java/org/cryptomator/common/settings/VaultSettingsJsonAdapterTest.java
Patch:
@@ -40,6 +40,7 @@ public void testDeserialize() throws IOException {
 		);
 	}
 
+	@SuppressWarnings("SpellCheckingInspection")
 	@Test
 	public void testSerialize() throws IOException {
 		VaultSettings vaultSettings = new VaultSettings("test");

File: src/test/java/org/cryptomator/launcher/IpcFactoryTest.java
Patch:
@@ -24,7 +24,7 @@ public class IpcFactoryTest {
 	private IpcProtocolImpl protocolHandler = Mockito.mock(IpcProtocolImpl.class);
 
 	@Test
-	@DisplayName("Wihout IPC port files")
+	@DisplayName("Without IPC port files")
 	public void testNoIpcWithoutPortFile() throws IOException {
 		IpcFactory inTest = new IpcFactory(environment, protocolHandler);
 

File: src/test/java/org/cryptomator/ui/addvaultwizard/ReadMeGeneratorTest.java
Patch:
@@ -11,6 +11,7 @@
 
 public class ReadMeGeneratorTest {
 
+	@SuppressWarnings("SpellCheckingInspection")
 	@ParameterizedTest
 	@CsvSource({ //
 			"test,test", //

File: src/test/java/org/cryptomator/ui/recoverykey/AutoCompleterTest.java
Patch:
@@ -43,6 +43,7 @@ public void testFindTame(String prefix) {
 			Assertions.assertEquals("tame", result.get());
 		}
 
+		@SuppressWarnings("SpellCheckingInspection")
 		@ParameterizedTest
 		@DisplayName("find 'teach'")
 		@ValueSource(strings = {"te", "tea", "teac", "teach"})
@@ -52,6 +53,7 @@ public void testFindTeach(String prefix) {
 			Assertions.assertEquals("teach", result.get());
 		}
 
+		@SuppressWarnings("SpellCheckingInspection")
 		@ParameterizedTest
 		@DisplayName("find 'teacher'")
 		@ValueSource(strings = {"teache", "teacher"})

File: src/main/java/org/cryptomator/common/Environment.java
Patch:
@@ -99,12 +99,12 @@ private Optional<Path> getPath(String propertyName) {
 	}
 
 	// visible for testing
-	Path getHomeDir() {
+	public Path getHomeDir() {
 		return getPath("user.home").orElseThrow();
 	}
 
 	// visible for testing
-	Stream<Path> getPaths(String propertyName) {
+	public Stream<Path> getPaths(String propertyName) {
 		Stream<String> rawSettingsPaths = getRawList(propertyName, PATH_LIST_SEP);
 		return rawSettingsPaths.filter(Predicate.not(Strings::isNullOrEmpty)).map(Paths::get).map(this::replaceHomeDir);
 	}

File: src/test/java/org/cryptomator/common/EnvironmentTest.java
Patch:
@@ -17,12 +17,12 @@
 import java.util.stream.Collectors;
 
 @DisplayName("Environment Variables Test")
-class EnvironmentTest {
+public class EnvironmentTest {
 
 	private Environment env;
 
 	@BeforeEach
-	void init() {
+	public void init() {
 		env = Mockito.spy(new Environment());
 		Mockito.when(env.getHomeDir()).thenReturn(Path.of("/home/testuser"));
 	}
@@ -82,7 +82,7 @@ public void testRelativeLogDir() {
 
 	@Nested
 	@DisplayName("Path Lists")
-	class SettingsPath {
+	public class SettingsPath {
 
 		@Test
 		@DisplayName("test.path.property=")

File: src/test/java/org/cryptomator/common/LicenseCheckerTest.java
Patch:
@@ -7,7 +7,7 @@
 
 import java.util.Optional;
 
-class LicenseCheckerTest {
+public class LicenseCheckerTest {
 
 	private static final String PUBLIC_KEY = """
 			MIGbMBAGByqGSM49AgEGBSuBBAAjA4GGAAQBgc4HZz+/fBbC7lmEww0AO3NK9wVZ\

File: src/test/java/org/cryptomator/ui/controls/SecurePasswordFieldTest.java
Patch:
@@ -12,12 +12,12 @@
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
 
-class SecurePasswordFieldTest {
+public class SecurePasswordFieldTest {
 
 	private SecurePasswordField pwField = new SecurePasswordField();
 
 	@BeforeAll
-	static void initJavaFx() throws InterruptedException {
+	public static void initJavaFx() throws InterruptedException {
 		Assumptions.assumeFalse(GraphicsEnvironment.isHeadless());
 		final CountDownLatch latch = new CountDownLatch(1);
 		Platform.startup(latch::countDown);
@@ -29,7 +29,7 @@ static void initJavaFx() throws InterruptedException {
 
 	@Nested
 	@DisplayName("Content Update Events")
-	class TextChange {
+	public class TextChange {
 
 		@Test
 		@DisplayName("\"ant\".append(\"eater\")")

File: src/test/java/org/cryptomator/ui/recoverykey/AutoCompleterTest.java
Patch:
@@ -10,7 +10,7 @@
 import java.util.Optional;
 import java.util.Set;
 
-class AutoCompleterTest {
+public class AutoCompleterTest {
 
 	@Test
 	@DisplayName("no match in []")
@@ -30,7 +30,7 @@ public void testNoMatchForEmptyString() {
 
 	@Nested
 	@DisplayName("search in dict: ['tame', 'teach', 'teacher']")
-	class NarrowedDownDict {
+	public class NarrowedDownDict {
 
 		AutoCompleter autoCompleter = new AutoCompleter(Set.of("tame", "teach", "teacher"));
 

File: src/test/java/org/cryptomator/ui/recoverykey/RecoveryKeyFactoryTest.java
Patch:
@@ -13,7 +13,7 @@
 import java.nio.file.Path;
 import java.security.SecureRandom;
 
-class RecoveryKeyFactoryTest {
+public class RecoveryKeyFactoryTest {
 
 	private WordEncoder wordEncoder = new WordEncoder();
 	private MasterkeyFileAccess masterkeyFileAccess = Mockito.mock(MasterkeyFileAccess.class);

File: src/test/java/org/cryptomator/ui/recoverykey/WordEncoderTest.java
Patch:
@@ -12,7 +12,7 @@
 import java.util.stream.Stream;
 
 @TestInstance(TestInstance.Lifecycle.PER_CLASS)
-class WordEncoderTest {
+public class WordEncoderTest {
 
 	private static final Random PRNG = new Random(42l);
 	private WordEncoder encoder;
@@ -25,13 +25,13 @@ public void setup() {
 	@DisplayName("decode(encode(input)) == input")
 	@ParameterizedTest(name = "test {index}")
 	@MethodSource("createRandomByteSequences")
-	void encodeAndDecode(byte[] input) {
+	public void encodeAndDecode(byte[] input) {
 		String encoded = encoder.encodePadded(input);
 		byte[] decoded = encoder.decode(encoded);
 		Assertions.assertArrayEquals(input, decoded);
 	}
 
-	static Stream<byte[]> createRandomByteSequences() {
+	public static Stream<byte[]> createRandomByteSequences() {
 		return IntStream.range(0, 30).mapToObj(i -> {
 			byte[] randomBytes = new byte[i * 3];
 			PRNG.nextBytes(randomBytes);

File: main/ui/src/main/java/org/cryptomator/ui/controls/FontAwesome5Icon.java
Patch:
@@ -39,6 +39,7 @@ public enum FontAwesome5Icon {
 	REDO("\uF01E"), //
 	SEARCH("\uF002"), //
 	SPINNER("\uF110"), //
+	STOPWATCH("\uF2F2"), //
 	SYNC("\uF021"), //
 	TIMES("\uF00D"), //
 	TRASH("\uF1F8"), //

File: main/ui/src/main/java/org/cryptomator/ui/vaultoptions/VaultOptionsController.java
Patch:
@@ -23,6 +23,7 @@ public class VaultOptionsController implements FxController {
 	public Tab generalTab;
 	public Tab mountTab;
 	public Tab keyTab;
+	public Tab autoLockTab;
 
 	@Inject
 	VaultOptionsController(@VaultOptionsWindow Stage window, ObjectProperty<SelectedVaultOptionsTab> selectedTabProperty) {
@@ -47,6 +48,7 @@ private Tab getTabToSelect(SelectedVaultOptionsTab selectedTab) {
 			case ANY, GENERAL -> generalTab;
 			case MOUNT -> mountTab;
 			case KEY -> keyTab;
+			case AUTOLOCK ->  autoLockTab;
 		};
 	}
 

File: main/commons/src/main/java/org/cryptomator/common/vaults/VaultStats.java
Patch:
@@ -83,7 +83,6 @@ private void updateStats(Optional<CryptoFileSystemStats> stats) {
 
 		// check for any I/O activity
 		if (newAccessCount > oldAccessCount) {
-			LOG.info("ACTIVITY!");
 			lastActivity.set(Instant.now());
 		}
 	}

File: main/ui/src/main/java/org/cryptomator/ui/changepassword/ChangePasswordController.java
Patch:
@@ -100,7 +100,7 @@ public void finish() {
 	}
 
 	private void updatePasswordInSystemkeychain() {
-		if (keychain.isSupported()) {
+		if (keychain.isSupported() && !keychain.isLocked()) {
 			try {
 				keychain.changePassphrase(vault.getId(), newPasswordController.passwordField.getCharacters());
 				LOG.info("Successfully updated password in system keychain for {}", vault.getDisplayName());

File: main/ui/src/main/java/org/cryptomator/ui/keyloading/masterkeyfile/MasterkeyFileLoadingModule.java
Patch:
@@ -59,7 +59,7 @@ static UserInteractionLock<MasterkeyFileProvision> provideMasterkeyFileProvision
 	@Named("savedPassword")
 	@KeyLoadingScoped
 	static Optional<char[]> provideStoredPassword(KeychainManager keychain, @KeyLoading Vault vault) {
-		if (!keychain.isSupported()) {
+		if (!keychain.isSupported() || keychain.isLocked()) {
 			return Optional.empty();
 		} else {
 			try {

File: main/ui/src/main/java/org/cryptomator/ui/mainwindow/VaultDetailLockedController.java
Patch:
@@ -36,7 +36,7 @@ public class VaultDetailLockedController implements FxController {
 		this.vaultOptionsWindow = vaultOptionsWindow;
 		this.keychain = keychain;
 		this.mainWindow = mainWindow;
-		if (keychain.isSupported()) {
+		if (keychain.isSupported() && !keychain.isLocked()) {
 			this.passwordSaved = BooleanExpression.booleanExpression(EasyBind.select(vault).selectObject(v -> keychain.getPassphraseStoredProperty(v.getId())));
 		} else {
 			this.passwordSaved = new SimpleBooleanProperty(false);

File: main/ui/src/main/java/org/cryptomator/ui/vaultoptions/MasterkeyOptionsController.java
Patch:
@@ -36,7 +36,7 @@ public class MasterkeyOptionsController implements FxController {
 		this.changePasswordWindow = changePasswordWindow;
 		this.recoveryKeyWindow = recoveryKeyWindow;
 		this.keychain = keychain;
-		if (keychain.isSupported()) {
+		if (keychain.isSupported() && !keychain.isLocked()) {
 			this.passwordSaved = Bindings.createBooleanBinding(this::isPasswordSaved, keychain.getPassphraseStoredProperty(vault.getId()));
 		} else {
 			this.passwordSaved = new SimpleBooleanProperty(false);
@@ -74,7 +74,7 @@ public BooleanExpression passwordSavedProperty() {
 	}
 
 	public boolean isPasswordSaved() {
-		if (keychain.isSupported() && vault != null) {
+		if (keychain.isSupported() && !keychain.isLocked() && vault != null) {
 			return keychain.getPassphraseStoredProperty(vault.getId()).get();
 		} else return false;
 	}

File: main/ui/src/main/java/org/cryptomator/ui/common/FxmlFile.java
Patch:
@@ -11,6 +11,8 @@ public enum FxmlFile {
 	CHANGEPASSWORD("/fxml/changepassword.fxml"), //
 	ERROR("/fxml/error.fxml"), //
 	FORGET_PASSWORD("/fxml/forget_password.fxml"), //
+	HEALTH_START("/fxml/health_start.fxml"), //
+	HEALTH_CHECK_LIST("/fxml/health_check_list.fxml"), //
 	LOCK_FORCED("/fxml/lock_forced.fxml"), //
 	LOCK_FAILED("/fxml/lock_failed.fxml"), //
 	MAIN_WINDOW("/fxml/main_window.fxml"), //

File: main/ui/src/main/java/org/cryptomator/ui/controls/FontAwesome5Icon.java
Patch:
@@ -6,8 +6,10 @@
 public enum FontAwesome5Icon {
 	ANCHOR("\uF13D"), //
 	ARROW_UP("\uF062"), //
+	BAN("\uF05E"), //
 	BUG("\uF188"), //
 	CHECK("\uF00C"), //
+	CLOCK("\uF017"), //
 	COG("\uF013"), //
 	COGS("\uF085"), //
 	COPY("\uF0C5"), //

File: main/ui/src/main/java/org/cryptomator/ui/mainwindow/MainWindowModule.java
Patch:
@@ -12,6 +12,7 @@
 import org.cryptomator.ui.common.FxmlFile;
 import org.cryptomator.ui.common.FxmlScene;
 import org.cryptomator.ui.common.StageFactory;
+import org.cryptomator.ui.health.HealthCheckComponent;
 import org.cryptomator.ui.migration.MigrationComponent;
 import org.cryptomator.ui.removevault.RemoveVaultComponent;
 import org.cryptomator.ui.vaultoptions.VaultOptionsComponent;
@@ -27,7 +28,7 @@
 import java.util.Map;
 import java.util.ResourceBundle;
 
-@Module(subcomponents = {AddVaultWizardComponent.class, MigrationComponent.class, RemoveVaultComponent.class, VaultOptionsComponent.class, VaultStatisticsComponent.class, WrongFileAlertComponent.class})
+@Module(subcomponents = {AddVaultWizardComponent.class, HealthCheckComponent.class, MigrationComponent.class, RemoveVaultComponent.class, VaultOptionsComponent.class, VaultStatisticsComponent.class, WrongFileAlertComponent.class})
 abstract class MainWindowModule {
 
 	@Provides

File: main/ui/src/main/java/org/cryptomator/ui/mainwindow/VaultDetailLockedController.java
Patch:
@@ -5,6 +5,7 @@
 import org.cryptomator.common.vaults.Vault;
 import org.cryptomator.ui.common.FxController;
 import org.cryptomator.ui.fxapp.FxApplication;
+import org.cryptomator.ui.health.HealthCheckComponent;
 import org.cryptomator.ui.vaultoptions.SelectedVaultOptionsTab;
 import org.cryptomator.ui.vaultoptions.VaultOptionsComponent;
 
@@ -13,6 +14,7 @@
 import javafx.beans.property.ObjectProperty;
 import javafx.beans.property.ReadOnlyObjectProperty;
 import javafx.beans.property.SimpleBooleanProperty;
+import javafx.event.ActionEvent;
 import javafx.fxml.FXML;
 import javafx.stage.Stage;
 import java.util.Optional;
@@ -28,7 +30,7 @@ public class VaultDetailLockedController implements FxController {
 	private final BooleanExpression passwordSaved;
 
 	@Inject
-	VaultDetailLockedController(ObjectProperty<Vault> vault, FxApplication application, VaultOptionsComponent.Builder vaultOptionsWindow, KeychainManager keychain, @MainWindow Stage mainWindow) {
+	VaultDetailLockedController(ObjectProperty<Vault> vault, FxApplication application,  VaultOptionsComponent.Builder vaultOptionsWindow, KeychainManager keychain, @MainWindow Stage mainWindow) {
 		this.vault = vault;
 		this.application = application;
 		this.vaultOptionsWindow = vaultOptionsWindow;

File: main/ui/src/main/java/org/cryptomator/ui/health/ReportWriter.java
Patch:
@@ -41,7 +41,7 @@ public class ReportWriter {
 			Check %s
 			------------------------------
 			""";
-	private static final String REPORT_CHECK_RESULT = "%8s - %s";
+	private static final String REPORT_CHECK_RESULT = "%8s - %s\n";
 	private static final DateTimeFormatter TIME_STAMP = DateTimeFormatter.ofPattern("yyyyMMdd-HHmmss").withZone(ZoneId.systemDefault());
 
 	private final Vault vault;
@@ -67,7 +67,7 @@ protected void writeReport(Collection<HealthCheckTask> tasks) throws IOException
 					case SUCCEEDED -> {
 						writer.write("STATUS: SUCCESS\nRESULTS:\n");
 						for (var result : task.results()) {
-							writer.write(REPORT_CHECK_RESULT.formatted(result.getSeverity(), result));
+							writer.write(REPORT_CHECK_RESULT.formatted(result.getSeverity(), result.getDescription()));
 						}
 					}
 					case CANCELLED -> writer.write("STATUS: CANCELED\n");

File: main/ui/src/main/java/org/cryptomator/ui/health/HealthCheckTask.java
Patch:
@@ -25,7 +25,7 @@ class HealthCheckTask extends Task<Void> {
 	private final Masterkey masterkey;
 	private final SecureRandom csprng;
 	private final HealthCheck check;
-	private final ObservableList<DiagnosticResult> results;
+	private final ObservableList<DiagnosticResultAction> results;
 
 	public HealthCheckTask(Path vaultPath, VaultConfig vaultConfig, Masterkey masterkey, SecureRandom csprng, HealthCheck check) {
 		this.vaultPath = Objects.requireNonNull(vaultPath);
@@ -58,7 +58,7 @@ protected Void call() {
 						throw new RuntimeException(e);
 					}
 				}
-				Platform.runLater(() -> results.add(result));
+				Platform.runLater(() -> results.add(new DiagnosticResultAction(result,vaultPath,vaultConfig, masterkey,csprng))); //FIXME: there can be a lotta results, each with a reference to the master key -> differentiate with severity!
 			});
 		}
 		return null;
@@ -76,7 +76,7 @@ protected void done() {
 
 	/* Getter */
 
-	public ObservableList<DiagnosticResult> results() {
+	public ObservableList<DiagnosticResultAction> results() {
 		return results;
 	}
 

File: main/ui/src/main/java/org/cryptomator/ui/health/ReportWriter.java
Patch:
@@ -67,7 +67,7 @@ protected void writeReport(Collection<HealthCheckTask> tasks) throws IOException
 					case SUCCEEDED -> {
 						writer.write("STATUS: SUCCESS\nRESULTS:\n");
 						for (var result : task.results()) {
-							writer.write(REPORT_CHECK_RESULT.formatted(result.getServerity(), result));
+							writer.write(REPORT_CHECK_RESULT.formatted(result.getSeverity(), result));
 						}
 					}
 					case CANCELLED -> writer.write("STATUS: CANCELED\n");

File: main/ui/src/main/java/org/cryptomator/ui/addvaultwizard/CreateNewVaultPasswordController.java
Patch:
@@ -180,7 +180,7 @@ private void initializeVault(Path path, CharSequence passphrase) throws IOExcept
 
 			// 2. initialize vault:
 			try {
-				MasterkeyLoader loader = ignored -> masterkey;
+				MasterkeyLoader loader = ignored -> masterkey.clone();
 				CryptoFileSystemProperties fsProps = CryptoFileSystemProperties.cryptoFileSystemProperties().withCipherCombo(VaultCipherCombo.SIV_CTRMAC).withKeyLoader(loader).build();
 				CryptoFileSystemProvider.initialize(path, fsProps, DEFAULT_KEY_ID);
 

File: main/ui/src/test/java/org/cryptomator/ui/recoverykey/RecoveryKeyFactoryTest.java
Patch:
@@ -16,9 +16,8 @@
 class RecoveryKeyFactoryTest {
 
 	private WordEncoder wordEncoder = new WordEncoder();
-	private SecureRandom csprng = Mockito.mock(SecureRandom.class);
 	private MasterkeyFileAccess masterkeyFileAccess = Mockito.mock(MasterkeyFileAccess.class);
-	private RecoveryKeyFactory inTest = new RecoveryKeyFactory(wordEncoder, csprng, masterkeyFileAccess);
+	private RecoveryKeyFactory inTest = new RecoveryKeyFactory(wordEncoder, masterkeyFileAccess);
 
 	@Test
 	@DisplayName("createRecoveryKey() creates 44 words")

File: main/commons/src/main/java/org/cryptomator/common/Constants.java
Patch:
@@ -3,6 +3,7 @@
 public interface Constants {
 
 	String MASTERKEY_FILENAME = "masterkey.cryptomator";
+	String MASTERKEY_BACKUP_SUFFIX = ".bkup";
 	String VAULTCONFIG_FILENAME = "vault.cryptomator";
 	byte[] PEPPER = new byte[0];
 

File: main/commons/src/main/java/org/cryptomator/common/vaults/Vault.java
Patch:
@@ -53,6 +53,7 @@ public class Vault {
 
 	private static final Logger LOG = LoggerFactory.getLogger(Vault.class);
 	private static final Path HOME_DIR = Paths.get(SystemUtils.USER_HOME);
+	private static final int UNLIMITED_FILENAME_LENGTH = Integer.MAX_VALUE;
 
 	private final VaultSettings vaultSettings;
 	private final Provider<Volume> volumeProvider;
@@ -114,11 +115,11 @@ private CryptoFileSystem createCryptoFileSystem(MasterkeyLoader keyLoader) throw
 				int cleartextLimit = checker.determineSupportedCleartextFileNameLength(getPath());
 				vaultSettings.maxCleartextFilenameLength().set(cleartextLimit);
 			} else {
-				vaultSettings.maxCleartextFilenameLength().setValue(Integer.MAX_VALUE);
+				vaultSettings.maxCleartextFilenameLength().setValue(UNLIMITED_FILENAME_LENGTH);
 			}
 		}
 
-		if (vaultSettings.maxCleartextFilenameLength().get() < Integer.MAX_VALUE) {
+		if (vaultSettings.maxCleartextFilenameLength().get() < UNLIMITED_FILENAME_LENGTH) {
 			LOG.warn("Limiting cleartext filename length on this device to {}.", vaultSettings.maxCleartextFilenameLength().get());
 		}
 

File: main/ui/src/main/java/org/cryptomator/ui/changepassword/ChangePasswordController.java
Patch:
@@ -31,13 +31,13 @@
 import java.nio.file.StandardOpenOption;
 import java.security.SecureRandom;
 
+import static org.cryptomator.common.Constants.MASTERKEY_BACKUP_SUFFIX;
 import static org.cryptomator.common.Constants.MASTERKEY_FILENAME;
 
 @ChangePasswordScoped
 public class ChangePasswordController implements FxController {
 
 	private static final Logger LOG = LoggerFactory.getLogger(ChangePasswordController.class);
-	private static final String MASTERKEY_BACKUP_SUFFIX = ".bkup";
 
 	private final Stage window;
 	private final Vault vault;

File: main/ui/src/main/java/org/cryptomator/ui/keyloading/masterkeyfile/MasterkeyFileLoadingFinisher.java
Patch:
@@ -24,20 +24,20 @@ class MasterkeyFileLoadingFinisher {
 	private final Vault vault;
 	private final Optional<char[]> storedPassword;
 	private final AtomicReference<char[]> enteredPassword;
-	private final boolean shouldSavePassword;
+	private final AtomicBoolean shouldSavePassword;
 	private final KeychainManager keychain;
 
 	@Inject
 	MasterkeyFileLoadingFinisher(@KeyLoading Vault vault, @Named("savedPassword") Optional<char[]> storedPassword, AtomicReference<char[]> enteredPassword, @Named("savePassword") AtomicBoolean shouldSavePassword, KeychainManager keychain) {
 		this.vault = vault;
 		this.storedPassword = storedPassword;
 		this.enteredPassword = enteredPassword;
-		this.shouldSavePassword = shouldSavePassword.get();
+		this.shouldSavePassword = shouldSavePassword;
 		this.keychain = keychain;
 	}
 
 	public void cleanup(boolean successfullyUnlocked) {
-		if (successfullyUnlocked && shouldSavePassword) {
+		if (successfullyUnlocked && shouldSavePassword.get()) {
 			savePasswordToSystemkeychain();
 		}
 		wipePassword(storedPassword.orElse(null));

File: main/ui/src/main/java/org/cryptomator/ui/lock/LockWorkflow.java
Patch:
@@ -83,7 +83,7 @@ private LockModule.ForceLockDecision askUserForAction() throws InterruptedExcept
 	@Override
 	protected void succeeded() {
 		LOG.info("Lock of {} succeeded.", vault.getDisplayName());
-		//DO NOT SET VAULT STATE HERE, this is done by the vault internally
+		vault.stateProperty().transition(VaultState.Value.PROCESSING, VaultState.Value.LOCKED);
 	}
 
 	@Override

File: main/ui/src/main/java/org/cryptomator/ui/mainwindow/VaultListController.java
Patch:
@@ -23,6 +23,7 @@
 import javafx.fxml.FXML;
 import javafx.scene.control.ListView;
 import javafx.stage.Stage;
+import java.util.Arrays;
 import java.util.Optional;
 
 import static org.cryptomator.common.vaults.VaultState.*;

File: main/ui/src/main/java/org/cryptomator/ui/fxapp/FxApplication.java
Patch:
@@ -86,7 +86,7 @@ public void start(Stage stage) {
 	}
 
 	private void hasVisibleStagesChanged(@SuppressWarnings("unused") ObservableValue<? extends Boolean> observableValue, @SuppressWarnings("unused") boolean oldValue, boolean newValue) {
-		LOG.warn("has visible stages: {}", newValue);
+		LOG.debug("has visible stages: {}", newValue);
 		if (newValue) {
 			trayIntegration.ifPresent(TrayIntegrationProvider::restoredFromTray);
 		} else {

File: main/commons/src/main/java/org/cryptomator/common/settings/UiTheme.java
Patch:
@@ -8,7 +8,7 @@ public enum UiTheme {
 	AUTOMATIC("preferences.general.theme.automatic");
 
 	public static UiTheme[] applicableValues() {
-		if (SystemUtils.IS_OS_MAC) {
+		if (SystemUtils.IS_OS_MAC || SystemUtils.IS_OS_WINDOWS) {
 			return values();
 		} else {
 			return new UiTheme[]{LIGHT, DARK};

File: main/ui/src/main/java/org/cryptomator/ui/unlock/UnlockWorkflow.java
Patch:
@@ -190,6 +190,7 @@ private void handleInvalidMountPoint(InvalidMountPointException impExc) {
 	private void showInvalidMountPointScene() {
 		Platform.runLater(() -> {
 			window.setScene(invalidMountPointScene.get());
+			window.show();
 		});
 	}
 

File: main/ui/src/main/java/org/cryptomator/ui/unlock/UnlockWorkflow.java
Patch:
@@ -204,6 +204,7 @@ private void handleInvalidMountPoint(InvalidMountPointException impExc) {
 	private void showInvalidMountPointScene() {
 		Platform.runLater(() -> {
 			window.setScene(invalidMountPointScene.get());
+			window.show();
 		});
 	}
 

File: main/ui/src/main/java/org/cryptomator/ui/launcher/UiLauncher.java
Patch:
@@ -43,7 +43,7 @@ public UiLauncher(Settings settings, ObservableList<Vault> vaults, Lazy<TrayMenu
 	public void launch() {
 		boolean hidden = settings.startHidden().get();
 		if (SystemTray.isSupported() && settings.showTrayIcon().get()) {
-			trayMenu.get().addIconToSystemTray();
+			trayMenu.get().initializeTrayIcon();
 			launch(true, hidden);
 		} else {
 			launch(false, hidden);

File: main/commons/src/main/java/org/cryptomator/common/settings/SettingsProvider.java
Patch:
@@ -91,7 +91,7 @@ private Stream<Settings> tryLoad(Path path) {
 			}
 		} catch (NoSuchFileException e) {
 			return Stream.empty();
-		} catch (IOException e) {
+		} catch (IOException | JsonParseException e) {
 			LOG.warn("Exception while loading settings from " + path, e);
 			return Stream.empty();
 		}

File: main/commons/src/main/java/org/cryptomator/common/settings/SettingsJsonAdapter.java
Patch:
@@ -50,6 +50,7 @@ public void write(JsonWriter out, Settings value) throws IOException {
 		out.name("uiOrientation").value(value.userInterfaceOrientation().get().name());
 		out.name("keychainBackend").value(value.keychainBackend().get().name());
 		out.name("licenseKey").value(value.licenseKey().get());
+		out.name("showMinimizeButton").value(value.showMinimizeButton().get());
 		out.name("showTrayIcon").value(value.showTrayIcon().get());
 		out.endObject();
 	}
@@ -83,6 +84,7 @@ public Settings read(JsonReader in) throws IOException {
 				case "uiOrientation" -> settings.userInterfaceOrientation().set(parseUiOrientation(in.nextString()));
 				case "keychainBackend" -> settings.keychainBackend().set(parseKeychainBackend(in.nextString()));
 				case "licenseKey" -> settings.licenseKey().set(in.nextString());
+				case "showMinimizeButton" -> settings.showMinimizeButton().set(in.nextBoolean());
 				case "showTrayIcon" -> settings.showTrayIcon().set(in.nextBoolean());
 				default -> {
 					LOG.warn("Unsupported vault setting found in JSON: " + name);

File: main/ui/src/main/java/org/cryptomator/ui/preferences/GeneralPreferencesController.java
Patch:
@@ -52,6 +52,7 @@ public class GeneralPreferencesController implements FxController {
 	private final ErrorComponent.Builder errorComponent;
 	public ChoiceBox<UiTheme> themeChoiceBox;
 	public ChoiceBox<KeychainBackend> keychainBackendChoiceBox;
+	public CheckBox showMinimizeButtonCheckbox;
 	public CheckBox showTrayIconCheckbox;
 	public CheckBox startHiddenCheckbox;
 	public CheckBox debugModeCheckbox;
@@ -86,6 +87,8 @@ public void initialize() {
 		themeChoiceBox.valueProperty().bindBidirectional(settings.theme());
 		themeChoiceBox.setConverter(new UiThemeConverter(resourceBundle));
 
+		showMinimizeButtonCheckbox.selectedProperty().bindBidirectional(settings.showMinimizeButton());
+
 		showTrayIconCheckbox.selectedProperty().bindBidirectional(settings.showTrayIcon());
 
 		startHiddenCheckbox.selectedProperty().bindBidirectional(settings.startHidden());

File: main/commons/src/test/java/org/cryptomator/common/vaults/VaultModuleTest.java
Patch:
@@ -43,7 +43,7 @@ public void testMacFuseDefaultMountFlags() {
 
 		StringBinding result = module.provideDefaultMountFlags(settings, vaultSettings);
 
-		MatcherAssert.assertThat(result.get(), CoreMatchers.containsString("-ovolname=TEST"));
+		MatcherAssert.assertThat(result.get(), CoreMatchers.containsString("-ovolname=\"TEST\""));
 		MatcherAssert.assertThat(result.get(), CoreMatchers.containsString("-ordonly"));
 	}
 

File: main/ui/src/main/java/org/cryptomator/ui/fxapp/FxApplication.java
Patch:
@@ -1,6 +1,5 @@
 package org.cryptomator.ui.fxapp;
 
-import com.tobiasdiez.easybind.EasyBind;
 import dagger.Lazy;
 import org.cryptomator.common.LicenseHolder;
 import org.cryptomator.common.settings.Settings;
@@ -67,7 +66,7 @@ public void start() {
 		LOG.trace("FxApplication.start()");
 		Platform.setImplicitExit(false);
 
-		EasyBind.subscribe(hasVisibleStages, this::hasVisibleStagesChanged);
+		hasVisibleStages.addListener(this::hasVisibleStagesChanged);
 
 		settings.theme().addListener(this::appThemeChanged);
 		loadSelectedStyleSheet(settings.theme().get());
@@ -78,7 +77,7 @@ public void start(Stage stage) {
 		throw new UnsupportedOperationException("Use start() instead.");
 	}
 
-	private void hasVisibleStagesChanged(boolean newValue) {
+	private void hasVisibleStagesChanged(@SuppressWarnings("unused") ObservableValue<? extends Boolean> observableValue, @SuppressWarnings("unused") boolean oldValue, boolean newValue) {
 		if (newValue) {
 			trayIntegration.ifPresent(TrayIntegrationProvider::restoredFromTray);
 		} else {

File: main/ui/src/main/java/org/cryptomator/ui/quit/QuitModule.java
Patch:
@@ -43,7 +43,7 @@ static Stage provideStage(StageFactory factory) {
 	@Provides
 	@FxmlScene(FxmlFile.QUIT)
 	@QuitScoped
-	static Scene provideUnlockScene(@QuitWindow FXMLLoaderFactory fxmlLoaders) {
+	static Scene provideQuitScene(@QuitWindow FXMLLoaderFactory fxmlLoaders) {
 		return fxmlLoaders.createScene("/fxml/quit.fxml");
 	}
 

File: main/ui/src/main/java/org/cryptomator/ui/lock/LockWorkflow.java
Patch:
@@ -55,7 +55,6 @@ protected Void call() throws Volume.VolumeException, InterruptedException {
 			switch (decision) {
 				case FORCE -> vault.lock(true);
 				case CANCEL -> cancel(false);
-				default -> throw new IllegalArgumentException("Unknown decision " + decision);
 			}
 		}
 

File: main/ui/src/main/java/org/cryptomator/ui/fxapp/FxApplication.java
Patch:
@@ -113,7 +113,7 @@ public void startUnlockWorkflow(Vault vault, Optional<Stage> owner) {
 	public void startLockWorkflow(Vault vault, Optional<Stage> owner) {
 		Platform.runLater(() -> {
 			lockWindowBuilderProvider.get().vault(vault).owner(owner).build().startLockWorkflow();
-			LOG.debug("Locking vault {}", vault.getDisplayName());
+			LOG.debug("Start lock workflow for {}", vault.getDisplayName());
 		});
 	}
 

File: main/ui/src/main/java/org/cryptomator/ui/lock/LockComponent.java
Patch:
@@ -19,7 +19,7 @@ public interface LockComponent {
 
 	LockWorkflow lockWorkflow();
 
-	default Future<Boolean> startLockWorkflow() {
+	default Future<Void> startLockWorkflow() {
 		LockWorkflow workflow = lockWorkflow();
 		defaultExecutorService().submit(workflow);
 		return workflow;

File: main/ui/src/main/java/org/cryptomator/ui/common/VaultService.java
Patch:
@@ -65,6 +65,7 @@ public void lock(Vault vault, boolean forced) {
 	public Task<Vault> createLockTask(Vault vault, boolean forced) {
 		Task<Vault> task = new LockVaultTask(vault, forced);
 		task.setOnSucceeded(evt -> LOG.info("Locked {}", vault.getDisplayName()));
+		task.setOnFailed(evt -> LOG.info("Failed to lock {}.", vault.getDisplayName(), evt.getSource().getException()));
 		return task;
 	}
 

File: main/commons/src/main/java/org/cryptomator/common/vaults/DokanyVolume.java
Patch:
@@ -28,7 +28,7 @@ public class DokanyVolume extends AbstractVolume {
 	private Mount mount;
 
 	@Inject
-	public DokanyVolume(VaultSettings vaultSettings, ExecutorService executorService, @Named("orderedMountPointChoosers") SortedSet<MountPointChooser> choosers) {
+	public DokanyVolume(VaultSettings vaultSettings, ExecutorService executorService, @Named("orderedMountPointChoosers") Iterable<MountPointChooser> choosers) {
 		super(choosers);
 		this.vaultSettings = vaultSettings;
 		this.mountFactory = new MountFactory(executorService);

File: main/commons/src/main/java/org/cryptomator/common/vaults/VaultModule.java
Patch:
@@ -101,7 +101,7 @@ private String getMacFuseDefaultMountFlags(StringBinding mountName, ReadOnlyBool
 		if (readOnly.get()) {
 			flags.append(" -ordonly");
 		}
-		flags.append(" -ovolname=").append(mountName.get());
+		flags.append(" -ovolname=").append('"').append(mountName.get()).append('"');
 		flags.append(" -oatomic_o_trunc");
 		flags.append(" -oauto_xattr");
 		flags.append(" -oauto_cache");
@@ -158,7 +158,7 @@ private String getWindowsFuseDefaultMountFlags(StringBinding mountName, ReadOnly
 			flags.append(" -ouid=-1");
 			flags.append(" -ogid=-1");
 		}
-		flags.append(" -ovolname=").append(mountName.get());
+		flags.append(" -ovolname=").append('"').append(mountName.get()).append('"');
 		//Dokany requires this option to be set, WinFSP doesn't seem to share this peculiarity,
 		//but the option exists. Let's keep this here in case we need it.
 //		flags.append(" -oThreadCount=").append(5);

File: main/commons/src/main/java/org/cryptomator/common/mountpoint/IrregularUnmountCleaner.java
Patch:
@@ -10,7 +10,7 @@
 import java.nio.file.Path;
 import java.nio.file.attribute.BasicFileAttributes;
 
-public class IrregularUnmountCleaner {
+class IrregularUnmountCleaner {
 
 	public static Logger LOG = LoggerFactory.getLogger(IrregularUnmountCleaner.class);
 

File: main/commons/src/main/java/org/cryptomator/common/vaults/DokanyVolume.java
Patch:
@@ -28,7 +28,7 @@ public class DokanyVolume extends AbstractVolume {
 	private Mount mount;
 
 	@Inject
-	public DokanyVolume(VaultSettings vaultSettings, ExecutorService executorService, @Named("orderedMountPointChoosers") SortedSet<MountPointChooser> choosers) {
+	public DokanyVolume(VaultSettings vaultSettings, ExecutorService executorService, @Named("orderedMountPointChoosers") Iterable<MountPointChooser> choosers) {
 		super(choosers);
 		this.vaultSettings = vaultSettings;
 		this.mountFactory = new MountFactory(executorService);

File: main/commons/src/main/java/org/cryptomator/common/vaults/FuseVolume.java
Patch:
@@ -31,7 +31,7 @@ public class FuseVolume extends AbstractVolume {
 	private Mount mount;
 
 	@Inject
-	public FuseVolume(@Named("orderedMountPointChoosers") SortedSet<MountPointChooser> choosers) {
+	public FuseVolume(@Named("orderedMountPointChoosers") Iterable<MountPointChooser> choosers) {
 		super(choosers);
 	}
 

File: main/commons/src/main/java/org/cryptomator/common/vaults/VaultModule.java
Patch:
@@ -101,7 +101,7 @@ private String getMacFuseDefaultMountFlags(StringBinding mountName, ReadOnlyBool
 		if (readOnly.get()) {
 			flags.append(" -ordonly");
 		}
-		flags.append(" -ovolname=").append(mountName.get());
+		flags.append(" -ovolname=").append('"').append(mountName.get()).append('"');
 		flags.append(" -oatomic_o_trunc");
 		flags.append(" -oauto_xattr");
 		flags.append(" -oauto_cache");
@@ -158,7 +158,7 @@ private String getWindowsFuseDefaultMountFlags(StringBinding mountName, ReadOnly
 			flags.append(" -ouid=-1");
 			flags.append(" -ogid=-1");
 		}
-		flags.append(" -ovolname=").append(mountName.get());
+		flags.append(" -ovolname=").append('"').append(mountName.get()).append('"');
 		//Dokany requires this option to be set, WinFSP doesn't seem to share this peculiarity,
 		//but the option exists. Let's keep this here in case we need it.
 //		flags.append(" -oThreadCount=").append(5);

File: main/commons/src/main/java/org/cryptomator/common/vaults/FuseVolume.java
Patch:
@@ -62,13 +62,13 @@ private String[] splitFlags(String str) {
 		for (int i = 0; i < results.size(); i++) {
 			MatchResult current = results.get(i);
 			MatchResult next = i + 1 < results.size() ? results.get(i + 1) : null;
-			if (getSpecialString(next) != null) {
-				//"next" is a quoted argument
+			if (getSpecialString(next) != null && current.group().endsWith("=")) {
+				//"next" is a quoted elements and "current" is missing it's argument
 				//--> "next" must be joined with "current" and is skipped in the regular iteration
 				strings.add(current.group() + getSpecialString(next));
 				i++;
 			} else {
-				//"next" is a normal unquoted string
+				//"next" is a normal unquoted string/is not missing from "current"
 				//--> Add "current" and advance
 				strings.add(current.group());
 			}

File: main/commons/src/main/java/org/cryptomator/common/vaults/VaultModule.java
Patch:
@@ -101,7 +101,7 @@ private String getMacFuseDefaultMountFlags(StringBinding mountName, ReadOnlyBool
 		if (readOnly.get()) {
 			flags.append(" -ordonly");
 		}
-		flags.append(" -ovolname=").append(mountName.get());
+		flags.append(" -ovolname=").append('"').append(mountName.get()).append('"');
 		flags.append(" -oatomic_o_trunc");
 		flags.append(" -oauto_xattr");
 		flags.append(" -oauto_cache");
@@ -158,7 +158,7 @@ private String getWindowsFuseDefaultMountFlags(StringBinding mountName, ReadOnly
 			flags.append(" -ouid=-1");
 			flags.append(" -ogid=-1");
 		}
-		flags.append(" -ovolname=").append(mountName.get());
+		flags.append(" -ovolname=").append('"').append(mountName.get()).append('"');
 		//Dokany requires this option to be set, WinFSP doesn't seem to share this peculiarity,
 		//but the option exists. Let's keep this here in case we need it.
 //		flags.append(" -oThreadCount=").append(5);

File: main/ui/src/main/java/org/cryptomator/ui/vaultoptions/MountOptionsController.java
Patch:
@@ -162,7 +162,9 @@ private static class WinDriveLetterLabelConverter extends StringConverter<String
 
 		@Override
 		public String toString(String driveLetter) {
-			if (occupiedDriveLetters.contains(driveLetter)) {
+			if (Strings.isNullOrEmpty(driveLetter)) {
+				return "";
+			} else if (occupiedDriveLetters.contains(driveLetter)) {
 				return driveLetter + ": (" + resourceBundle.getString("vaultOptions.mount.winDriveLetterOccupied") + ")";
 			} else {
 				return driveLetter + ":";

File: main/ui/src/main/java/org/cryptomator/ui/stats/VaultStatisticsModule.java
Patch:
@@ -38,7 +38,7 @@ static FXMLLoaderFactory provideFxmlLoaderFactory(Map<Class<? extends FxControll
 	@VaultStatisticsScoped
 	static Stage provideStage(StageFactory factory, ResourceBundle resourceBundle, @VaultStatisticsWindow Vault vault) {
 		Stage stage = factory.create();
-		stage.setTitle(String.format(resourceBundle.getString("stats.title"), vault.getDisplayableName()));
+		stage.setTitle(String.format(resourceBundle.getString("stats.title"), vault.getDisplayName()));
 		stage.setResizable(false);
 		var weakStage = new WeakReference<>(stage);
 		vault.stateProperty().addListener(new ChangeListener<>() {

File: main/ui/src/main/java/org/cryptomator/ui/launcher/UiLauncher.java
Patch:
@@ -16,6 +16,8 @@
 import java.awt.Desktop;
 import java.awt.SystemTray;
 import java.awt.desktop.AppReopenedListener;
+import java.nio.file.Files;
+import java.nio.file.LinkOption;
 import java.util.Collection;
 import java.util.Optional;
 
@@ -65,7 +67,7 @@ public void launch() {
 
 		//clean leftovers of not-regularly unmounted vaults
 		//see https://github.com/cryptomator/cryptomator/issues/1013 and https://github.com/cryptomator/cryptomator/issues/1061
-		env.getMountPointsDir().ifPresent(IrregularUnmountCleaner::removeUnregularUnmountDebris);
+		env.getMountPointsDir().filter(path -> Files.exists(path, LinkOption.NOFOLLOW_LINKS)).ifPresent(IrregularUnmountCleaner::removeUnregularUnmountDebris);
 
 		// auto unlock
 		Collection<Vault> vaultsToAutoUnlock = vaults.filtered(this::shouldAttemptAutoUnlock);

File: main/ui/src/main/java/org/cryptomator/ui/unlock/UnlockWorkflow.java
Patch:
@@ -209,9 +209,7 @@ private void showInvalidMountPointScene() {
 
 	private void handleGenericError(Throwable e) {
 		LOG.error("Unlock failed for technical reasons.", e);
-		Platform.runLater(() -> {
-			errorComponent.cause(e).window(window).returnToScene(window.getScene()).build().showErrorScene();
-		});
+		errorComponent.cause(e).window(window).returnToScene(window.getScene()).build().showErrorScene();
 	}
 
 	private void wipePassword(char[] pw) {

File: main/ui/src/main/java/org/cryptomator/ui/unlock/UnlockWorkflow.java
Patch:
@@ -209,9 +209,7 @@ private void showInvalidMountPointScene() {
 
 	private void handleGenericError(Throwable e) {
 		LOG.error("Unlock failed for technical reasons.", e);
-		Platform.runLater(() -> {
-			errorComponent.cause(e).window(window).returnToScene(window.getScene()).build().showErrorScene();
-		});
+		errorComponent.cause(e).window(window).returnToScene(window.getScene()).build().showErrorScene();
 	}
 
 	private void wipePassword(char[] pw) {

File: main/commons/src/test/java/org/cryptomator/common/vaults/VaultModuleTest.java
Patch:
@@ -17,6 +17,7 @@
 import javafx.beans.binding.StringBinding;
 import javafx.beans.property.SimpleBooleanProperty;
 import javafx.beans.property.SimpleObjectProperty;
+import javafx.beans.property.SimpleStringProperty;
 import java.nio.file.Path;
 
 public class VaultModuleTest {
@@ -30,6 +31,7 @@ public class VaultModuleTest {
 	public void setup(@TempDir Path tmpDir) {
 		Mockito.when(vaultSettings.normalizedDisplayName()).thenReturn(Bindings.createStringBinding(() -> "TEST"));
 		Mockito.when(vaultSettings.usesReadOnlyMode()).thenReturn(new SimpleBooleanProperty(true));
+		Mockito.when(vaultSettings.displayName()).thenReturn(new SimpleStringProperty("Vault"));
 		System.setProperty("user.home", tmpDir.toString());
 	}
 

File: main/ui/src/main/java/org/cryptomator/ui/controls/FontAwesome5Icon.java
Patch:
@@ -39,6 +39,7 @@ public enum FontAwesome5Icon {
 	SPINNER("\uF110"), //
 	SYNC("\uF021"), //
 	TIMES("\uF00D"), //
+	TIMES_CIRCLE("\uF057"), //
 	TRASH("\uF1F8"), //
 	UNLINK("\uf127"), //
 	WRENCH("\uF0AD"), //

File: main/ui/src/main/java/org/cryptomator/ui/unlock/UnlockModule.java
Patch:
@@ -50,7 +50,7 @@ static UserInteractionLock<PasswordEntry> providePasswordEntryLock() {
 	@Named("savedPassword")
 	@UnlockScoped
 	static Optional<char[]> provideStoredPassword(KeychainManager keychain, @UnlockWindow Vault vault) {
-		if (keychain.isSupported()) {
+		if (!keychain.isSupported()) {
 			return Optional.empty();
 		} else {
 			try {

File: main/ui/src/main/java/org/cryptomator/ui/common/Tasks.java
Patch:
@@ -174,6 +174,8 @@ private static class RestartingService<T> extends ScheduledService<T> {
 
 		RestartingService(Supplier<Task<T>> taskFactory) {
 			this.taskFactory = taskFactory;
+
+			setOnFailed(event -> LOG.error("Failed to execute service", getException()));
 		}
 
 		@Override

File: main/ui/src/main/java/org/cryptomator/ui/common/Tasks.java
Patch:
@@ -174,6 +174,8 @@ private static class RestartingService<T> extends ScheduledService<T> {
 
 		RestartingService(Supplier<Task<T>> taskFactory) {
 			this.taskFactory = taskFactory;
+
+			setOnFailed(event -> LOG.error("Failed to execute service", getException()));
 		}
 
 		@Override

File: main/ui/src/main/java/org/cryptomator/ui/preferences/GeneralPreferencesController.java
Patch:
@@ -161,6 +161,8 @@ private static class ToggleAutoStartTask extends Task<Void> {
 		public ToggleAutoStartTask(AutoStartStrategy autoStart, boolean enable) {
 			this.autoStart = autoStart;
 			this.enable = enable;
+
+			setOnFailed(event -> LOG.error("Failed to toggle Autostart", getException()));
 		}
 
 		@Override

File: main/commons/src/main/java/org/cryptomator/common/vaults/VaultStats.java
Patch:
@@ -36,6 +36,7 @@ public class VaultStats {
 		this.updateService = new UpdateStatsService();
 		updateService.setExecutor(executor);
 		updateService.setPeriod(Duration.seconds(1));
+		updateService.setOnFailed(event -> LOG.error("Error in UpdateStateService.", event.getSource().getException()));
 
 		state.addListener(this::vaultStateChanged);
 	}

File: main/ui/src/main/java/org/cryptomator/ui/common/VaultService.java
Patch:
@@ -69,7 +69,6 @@ public void lock(Vault vault, boolean forced) {
 	public Task<Vault> createLockTask(Vault vault, boolean forced) {
 		Task<Vault> task = new LockVaultTask(vault, forced);
 		task.setOnSucceeded(evt -> LOG.info("Locked {}", vault.getDisplayName()));
-		task.setOnFailed(evt -> LOG.error("Failed to lock " + vault.getDisplayName(), evt.getSource().getException()));
 		return task;
 	}
 
@@ -165,6 +164,8 @@ private static class LockVaultTask extends Task<Vault> {
 		public LockVaultTask(Vault vault, boolean forced) {
 			this.vault = vault;
 			this.forced = forced;
+
+			setOnFailed(event -> LOG.error("Failed to lock " + vault.getDisplayName(), event.getSource().getException()));
 		}
 
 		@Override

File: main/commons/src/main/java/org/cryptomator/common/vaults/DokanyVolume.java
Patch:
@@ -24,7 +24,7 @@ public class DokanyVolume implements Volume {
 
 	private static final Logger LOG = LoggerFactory.getLogger(DokanyVolume.class);
 
-	private static final String FS_TYPE_NAME = "Cryptomator File System";
+	private static final String FS_TYPE_NAME = "CryptomatorFS";
 
 	private final VaultSettings vaultSettings;
 	private final MountFactory mountFactory;

File: main/commons/src/main/java/org/cryptomator/common/vaults/AbstractVolume.java
Patch:
@@ -44,7 +44,7 @@ protected Path determineMountPoint() throws InvalidMountPointException {
 		//SortedSet#stream() should return a sorted stream (that's what it's docs and the docs of #spliterator() say, even if they are not 100% clear for me.)
 		//We want to keep that order, that's why we use ImmutableSet#toImmutableSet() to collect (even if it doesn't implement SortedSet, it's docs promise use encounter ordering.)
 		String checked = Joiner.on(", ").join(checkedChoosers.stream().map((mpc) -> mpc.getClass().getTypeName()).collect(ImmutableSet.toImmutableSet()));
-		throw new InvalidMountPointException(String.format("No feasible MountPoint found! Checked %s", checked));
+		throw new InvalidMountPointException(String.format("No feasible MountPoint found! Checked %s", checked.isBlank() ? "<No applicable MPC>" : checked));
 	}
 
 	protected void cleanupMountPoint() {

File: main/commons/src/main/java/org/cryptomator/common/mountpoint/AvailableDriveLetterChooser.java
Patch:
@@ -1,6 +1,7 @@
 package org.cryptomator.common.mountpoint;
 
 import org.apache.commons.lang3.SystemUtils;
+import org.cryptomator.common.vaults.Volume;
 import org.cryptomator.common.vaults.WindowsDriveLetters;
 
 import javax.inject.Inject;
@@ -19,12 +20,12 @@ public AvailableDriveLetterChooser(WindowsDriveLetters windowsDriveLetters) {
 	}
 
 	@Override
-	public boolean isApplicable() {
+	public boolean isApplicable(Volume caller) {
 		return SystemUtils.IS_OS_WINDOWS;
 	}
 
 	@Override
-	public Optional<Path> chooseMountPoint() {
+	public Optional<Path> chooseMountPoint(Volume caller) {
 		return this.windowsDriveLetters.getAvailableDriveLetterPath();
 	}
 

File: main/commons/src/main/java/org/cryptomator/common/mountpoint/CustomDriveLetterChooser.java
Patch:
@@ -2,6 +2,7 @@
 
 import org.apache.commons.lang3.SystemUtils;
 import org.cryptomator.common.settings.VaultSettings;
+import org.cryptomator.common.vaults.Volume;
 
 import javax.inject.Inject;
 import java.nio.file.Path;
@@ -20,12 +21,12 @@ public CustomDriveLetterChooser(VaultSettings vaultSettings) {
 	}
 
 	@Override
-	public boolean isApplicable() {
+	public boolean isApplicable(Volume caller) {
 		return SystemUtils.IS_OS_WINDOWS;
 	}
 
 	@Override
-	public Optional<Path> chooseMountPoint() {
+	public Optional<Path> chooseMountPoint(Volume caller) {
 		return this.vaultSettings.getWinDriveLetter().map(letter -> letter.charAt(0) + ":\\").map(Paths::get);
 	}
 

File: main/commons/src/main/java/org/cryptomator/common/vaults/DokanyVolume.java
Patch:
@@ -27,7 +27,7 @@ public class DokanyVolume extends AbstractVolume {
 	private Mount mount;
 
 	@Inject
-	public DokanyVolume(VaultSettings vaultSettings, ExecutorService executorService, @Named("orderedValidMountPointChoosers") SortedSet<MountPointChooser> choosers) {
+	public DokanyVolume(VaultSettings vaultSettings, ExecutorService executorService, @Named("orderedMountPointChoosers") SortedSet<MountPointChooser> choosers) {
 		super(choosers);
 		this.vaultSettings = vaultSettings;
 		this.mountFactory = new MountFactory(executorService);

File: main/commons/src/main/java/org/cryptomator/common/vaults/FuseVolume.java
Patch:
@@ -26,7 +26,7 @@ public class FuseVolume extends AbstractVolume {
 	private Mount mount;
 
 	@Inject
-	public FuseVolume(@Named("orderedValidMountPointChoosers") SortedSet<MountPointChooser> choosers) {
+	public FuseVolume(@Named("orderedMountPointChoosers") SortedSet<MountPointChooser> choosers) {
 		super(choosers);
 	}
 

File: main/keychain/src/main/java/org/cryptomator/keychain/LinuxKDEWalletKeychainAccessImpl.java
Patch:
@@ -22,7 +22,7 @@ public LinuxKDEWalletKeychainAccessImpl() {
         try {
             connection = DBusConnection.getConnection(DBusConnection.DBusBusType.SESSION);
         } catch (DBusException e) {
-            e.printStackTrace();
+            log.error(e.toString(), e.getCause());
         }
     }
 
@@ -32,7 +32,7 @@ public boolean isSupported() {
             wallet = new KDEWallet(connection);
             return wallet.isEnabled();
         } catch (Exception e) {
-            e.printStackTrace();
+            log.error(e.toString(), e.getCause());
             return false;
         }
     }

File: main/commons/src/main/java/org/cryptomator/common/vaults/VaultModule.java
Patch:
@@ -147,7 +147,7 @@ private String getLinuxFuseDefaultMountFlags(ReadOnlyBooleanProperty readOnly) {
 	// see https://github.com/billziss-gh/winfsp/blob/5d0b10d0b643652c00ebb4704dc2bb28e7244973/src/dll/fuse/fuse_main.c#L53-L62 for syntax guide
 	// see https://github.com/billziss-gh/winfsp/blob/5d0b10d0b643652c00ebb4704dc2bb28e7244973/src/dll/fuse/fuse.c#L295-L319 for options (-o <...>)
 	// see https://github.com/billziss-gh/winfsp/wiki/Frequently-Asked-Questions/5ba00e4be4f5e938eaae6ef1500b331de12dee77 (FUSE 4.) on why the given defaults were choosen
-	private String getWindowsFuseDefaultMountFlags(ReadOnlyStringProperty mountName, ReadOnlyBooleanProperty readOnly) {
+	private String getWindowsFuseDefaultMountFlags(StringBinding mountName, ReadOnlyBooleanProperty readOnly) {
 		assert SystemUtils.IS_OS_WINDOWS;
 		StringBuilder flags = new StringBuilder();
 

File: main/commons/src/main/java/org/cryptomator/common/CommonsModule.java
Patch:
@@ -5,6 +5,7 @@
  *******************************************************************************/
 package org.cryptomator.common;
 
+import com.tobiasdiez.easybind.EasyBind;
 import dagger.Module;
 import dagger.Provides;
 import javafx.beans.binding.Binding;
@@ -17,7 +18,6 @@
 import org.cryptomator.common.vaults.VaultComponent;
 import org.cryptomator.common.vaults.VaultListManager;
 import org.cryptomator.frontend.webdav.WebDavServer;
-import org.fxmisc.easybind.EasyBind;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: main/commons/src/main/java/org/cryptomator/common/vaults/DokanyVolume.java
Patch:
@@ -36,9 +36,9 @@ public DokanyVolume(VaultSettings vaultSettings, ExecutorService executorService
 	@Override
 	public void mount(CryptoFileSystem fs, String mountFlags) throws InvalidMountPointException, VolumeException {
 		this.mountPoint = determineMountPoint();
-		String mountName = vaultSettings.mountName().get();
+		String mountName = vaultSettings.displayName().get();
 		try {
-			this.mount = mountFactory.mount(fs.getPath("/"), mountPoint, mountName, FS_TYPE_NAME, mountFlags.strip());
+			this.mount = mountFactory.mount(fs.getPath("/"), mountPoint, vaultSettings.mountName().get(), FS_TYPE_NAME, mountFlags.strip());
 		} catch (MountFailedException e) {
 			if (vaultSettings.getCustomMountPath().isPresent()) {
 				LOG.warn("Failed to mount vault into {}. Is this directory currently accessed by another process (e.g. Windows Explorer)?", mountPoint);

File: main/commons/src/main/java/org/cryptomator/common/vaults/WebDavVolume.java
Patch:
@@ -97,7 +97,7 @@ public synchronized void unmountForced() throws VolumeException {
 
 	@Override
 	public Optional<Path> getMountPoint() {
-		return Optional.empty();
+		return Optional.empty(); //TODO
 	}
 
 	@Override

File: main/commons/src/test/java/org/cryptomator/common/settings/SettingsTest.java
Patch:
@@ -29,7 +29,7 @@ public void testAutoSave() {
 		Mockito.verify(changeListener, Mockito.times(2)).accept(settings);
 
 		// third change (to property of list item):
-		vaultSettings.mountName().set("asd");
+		vaultSettings.displayName().set("asd");
 		Mockito.verify(changeListener, Mockito.times(3)).accept(settings);
 	}
 

File: main/commons/src/test/java/org/cryptomator/common/vaults/VaultModuleTest.java
Patch:
@@ -1,9 +1,9 @@
 package org.cryptomator.common.vaults;
 
+import javafx.beans.binding.Bindings;
 import javafx.beans.binding.StringBinding;
 import javafx.beans.property.SimpleBooleanProperty;
 import javafx.beans.property.SimpleObjectProperty;
-import javafx.beans.property.SimpleStringProperty;
 import org.cryptomator.common.settings.Settings;
 import org.cryptomator.common.settings.VaultSettings;
 import org.cryptomator.common.settings.VolumeImpl;
@@ -28,7 +28,7 @@ public class VaultModuleTest {
 
 	@BeforeEach
 	public void setup(@TempDir Path tmpDir) {
-		Mockito.when(vaultSettings.mountName()).thenReturn(new SimpleStringProperty("TEST"));
+		Mockito.when(vaultSettings.mountName()).thenReturn(Bindings.createStringBinding(() -> "TEST"));
 		Mockito.when(vaultSettings.usesReadOnlyMode()).thenReturn(new SimpleBooleanProperty(true));
 		System.setProperty("user.home", tmpDir.toString());
 	}

File: main/keychain/src/main/java/org/cryptomator/keychain/KeychainModule.java
Patch:
@@ -28,7 +28,7 @@ public abstract class KeychainModule {
 	
 	@Binds
 	@IntoSet
-	abstract KeychainAccessStrategy bindLinuxSecretServiceKeychainAccess(LinuxSecretServiceKeychainAccess keychainAccessStrategy);
+	abstract KeychainAccessStrategy bindLinuxSystemKeychainAccess(LinuxSystemKeychainAccess keychainAccessStrategy);
 
 	@Provides
 	@Singleton

File: main/ui/src/main/java/org/cryptomator/ui/addvaultwizard/CreateNewVaultPasswordController.java
Patch:
@@ -32,7 +32,6 @@
 import java.io.IOException;
 import java.io.UncheckedIOException;
 import java.nio.channels.WritableByteChannel;
-import java.nio.file.FileAlreadyExistsException;
 import java.nio.file.FileSystem;
 import java.nio.file.Files;
 import java.nio.file.NoSuchFileException;

File: main/ui/src/main/java/org/cryptomator/ui/changepassword/ChangePasswordController.java
Patch:
@@ -68,7 +68,7 @@ public void cancel() {
 	public void finish() {
 		try {
 			CryptoFileSystemProvider.changePassphrase(vault.getPath(), MASTERKEY_FILENAME, oldPasswordField.getCharacters(), newPassword.get());
-			LOG.info("Successfully changed password for {}", vault.getDisplayableName());
+			LOG.info("Successfully changed password for {}", vault.getDisplayName());
 			window.close();
 			updatePasswordInSystemkeychain();
 		} catch (IOException e) {
@@ -85,7 +85,7 @@ private void updatePasswordInSystemkeychain() {
 		if (keychain.isPresent()) {
 			try {
 				keychain.get().changePassphrase(vault.getId(), CharBuffer.wrap(newPassword.get()));
-				LOG.info("Successfully updated password in system keychain for {}", vault.getDisplayableName());
+				LOG.info("Successfully updated password in system keychain for {}", vault.getDisplayName());
 			} catch (KeychainAccessException e) {
 				LOG.error("Failed to update password in system keychain.", e);
 			}

File: main/ui/src/main/java/org/cryptomator/ui/controls/DraggableListCell.java
Patch:
@@ -8,6 +8,7 @@
  *******************************************************************************/
 package org.cryptomator.ui.controls;
 
+import com.tobiasdiez.easybind.EasyBind;
 import javafx.beans.property.BooleanProperty;
 import javafx.beans.property.SimpleBooleanProperty;
 import javafx.scene.SnapshotParameters;
@@ -18,7 +19,6 @@
 import javafx.scene.input.Dragboard;
 import javafx.scene.input.MouseEvent;
 import javafx.scene.input.TransferMode;
-import org.fxmisc.easybind.EasyBind;
 
 import java.util.List;
 

File: main/ui/src/main/java/org/cryptomator/ui/controls/PasswordStrengthIndicator.java
Patch:
@@ -1,12 +1,12 @@
 package org.cryptomator.ui.controls;
 
+import com.tobiasdiez.easybind.EasyBind;
 import javafx.beans.binding.BooleanBinding;
 import javafx.beans.property.IntegerProperty;
 import javafx.beans.property.SimpleIntegerProperty;
 import javafx.scene.layout.HBox;
 import javafx.scene.layout.Priority;
 import javafx.scene.layout.Region;
-import org.fxmisc.easybind.EasyBind;
 
 public class PasswordStrengthIndicator extends HBox {
 

File: main/ui/src/main/java/org/cryptomator/ui/forgetPassword/ForgetPasswordController.java
Patch:
@@ -41,7 +41,7 @@ public void finish() {
 		if (keychain.isPresent()) {
 			try {
 				keychain.get().deletePassphrase(vault.getId());
-				LOG.debug("Forgot password for vault {}.", vault.getDisplayableName());
+				LOG.debug("Forgot password for vault {}.", vault.getDisplayName());
 				confirmedResult.setValue(true);
 			} catch (KeychainAccessException e) {
 				LOG.error("Failed to remove entry from system keychain.", e);

File: main/ui/src/main/java/org/cryptomator/ui/mainwindow/VaultDetailLockedController.java
Patch:
@@ -1,5 +1,6 @@
 package org.cryptomator.ui.mainwindow;
 
+import com.tobiasdiez.easybind.EasyBind;
 import javafx.beans.binding.BooleanExpression;
 import javafx.beans.property.ObjectProperty;
 import javafx.beans.property.ReadOnlyObjectProperty;
@@ -11,7 +12,6 @@
 import org.cryptomator.ui.common.FxController;
 import org.cryptomator.ui.fxapp.FxApplication;
 import org.cryptomator.ui.vaultoptions.VaultOptionsComponent;
-import org.fxmisc.easybind.EasyBind;
 
 import javax.inject.Inject;
 import java.util.Optional;

File: main/ui/src/main/java/org/cryptomator/ui/migration/MigrationRunController.java
Patch:
@@ -116,10 +116,10 @@ public void migrate() {
 			return migrators.needsMigration(vault.getPath(), MASTERKEY_FILENAME);
 		}).onSuccess(needsAnotherMigration -> {
 			if (needsAnotherMigration) {
-				LOG.info("Migration of '{}' succeeded, but another migration is required.", vault.getDisplayableName());
+				LOG.info("Migration of '{}' succeeded, but another migration is required.", vault.getDisplayName());
 				vault.setState(VaultState.NEEDS_MIGRATION);
 			} else {
-				LOG.info("Migration of '{}' succeeded.", vault.getDisplayableName());
+				LOG.info("Migration of '{}' succeeded.", vault.getDisplayName());
 				vault.setState(VaultState.LOCKED);
 				passwordField.wipe();
 				window.setScene(successScene.get());

File: main/ui/src/main/java/org/cryptomator/ui/preferences/AutoStartModule.java
Patch:
@@ -3,6 +3,7 @@
 import dagger.Module;
 import dagger.Provides;
 import org.apache.commons.lang3.SystemUtils;
+import org.cryptomator.common.Environment;
 import org.cryptomator.jni.MacFunctions;
 
 import java.util.Optional;
@@ -12,7 +13,7 @@ abstract class AutoStartModule {
 
 	@Provides
 	@PreferencesScoped
-	public static Optional<AutoStartStrategy> provideAutoStartStrategy(Optional<MacFunctions> macFunctions) {
+	public static Optional<AutoStartStrategy> provideAutoStartStrategy(Optional<MacFunctions> macFunctions, Environment env) {
 		if (SystemUtils.IS_OS_MAC_OSX && macFunctions.isPresent()) {
 			return Optional.of(new AutoStartMacStrategy(macFunctions.get()));
 		} else if (SystemUtils.IS_OS_WINDOWS) {

File: main/ui/src/main/java/org/cryptomator/ui/quit/QuitController.java
Patch:
@@ -53,7 +53,7 @@ public void lockAndQuit() {
 
 		Task<Collection<Vault>> lockAllTask = vaultService.createLockAllTask(unlockedVaults, false);
 		lockAllTask.setOnSucceeded(evt -> {
-			LOG.info("Locked {}", lockAllTask.getValue().stream().map(Vault::getDisplayableName).collect(Collectors.joining(", ")));
+			LOG.info("Locked {}", lockAllTask.getValue().stream().map(Vault::getDisplayName).collect(Collectors.joining(", ")));
 			if (unlockedVaults.isEmpty()) {
 				window.close();
 				response.performQuit();

File: main/ui/src/main/java/org/cryptomator/ui/recoverykey/RecoveryKeyModule.java
Patch:
@@ -9,7 +9,6 @@
 import javafx.beans.property.SimpleStringProperty;
 import javafx.beans.property.StringProperty;
 import javafx.scene.Scene;
-import javafx.scene.image.Image;
 import javafx.stage.Modality;
 import javafx.stage.Stage;
 import org.cryptomator.common.vaults.Vault;
@@ -25,7 +24,6 @@
 
 import javax.inject.Named;
 import javax.inject.Provider;
-import java.util.List;
 import java.util.Map;
 import java.util.ResourceBundle;
 
@@ -107,7 +105,7 @@ static Scene provideRecoveryKeyResetPasswordScene(@RecoveryKeyWindow FXMLLoaderF
 	@IntoMap
 	@FxControllerKey(RecoveryKeyDisplayController.class)
 	static FxController provideRecoveryKeyDisplayController(@RecoveryKeyWindow Stage window, @RecoveryKeyWindow Vault vault, @RecoveryKeyWindow StringProperty recoveryKey, ResourceBundle localization) {
-		return new RecoveryKeyDisplayController(window, vault.getDisplayableName(), recoveryKey.get(), localization);
+		return new RecoveryKeyDisplayController(window, vault.getDisplayName(), recoveryKey.get(), localization);
 	}
 
 	@Binds

File: main/ui/src/main/java/org/cryptomator/ui/removevault/RemoveVaultController.java
Patch:
@@ -34,7 +34,7 @@ public void close() {
 	@FXML
 	public void finish() {
 		vaults.remove(vault);
-		LOG.debug("Removing vault {}.", vault.getDisplayableName());
+		LOG.debug("Removing vault {}.", vault.getDisplayName());
 		window.close();
 	}
 }

File: main/ui/src/main/java/org/cryptomator/ui/traymenu/TrayMenuController.java
Patch:
@@ -80,7 +80,7 @@ private void rebuildMenu() {
 	}
 
 	private Menu buildSubmenu(Vault vault) {
-		Menu submenu = new Menu(vault.getDisplayableName());
+		Menu submenu = new Menu(vault.getDisplayName());
 
 		if (vault.isLocked()) {
 			MenuItem unlockItem = new MenuItem(resourceBundle.getString("traymenu.vault.unlock"));

File: main/ui/src/main/java/org/cryptomator/ui/unlock/UnlockController.java
Patch:
@@ -77,7 +77,7 @@ public UnlockController(@UnlockWindow Stage window, @UnlockWindow Vault vault, A
 		this.unlockButtonContentDisplay = Bindings.createObjectBinding(this::getUnlockButtonContentDisplay, passwordEntryLock.awaitingInteraction());
 		this.userInteractionDisabled = passwordEntryLock.awaitingInteraction().not();
 		this.unlockButtonDisabled = new SimpleBooleanProperty();
-		this.vaultName = WeakBindings.bindString(vault.displayableNameProperty());
+		this.vaultName = WeakBindings.bindString(vault.displayNameProperty());
 		this.window.setOnCloseRequest(windowEvent -> cancel());
 	}
 

File: main/ui/src/main/java/org/cryptomator/ui/unlock/UnlockModule.java
Patch:
@@ -82,7 +82,7 @@ static FXMLLoaderFactory provideFxmlLoaderFactory(Map<Class<? extends FxControll
 	@UnlockScoped
 	static Stage provideStage(StageFactory factory, @UnlockWindow Vault vault, @Named("unlockWindowOwner") Optional<Stage> owner) {
 		Stage stage = factory.create();
-		stage.setTitle(vault.getDisplayableName());
+		stage.setTitle(vault.getDisplayName());
 		stage.setResizable(false);
 		if (owner.isPresent()) {
 			stage.initOwner(owner.get());

File: main/ui/src/main/java/org/cryptomator/ui/unlock/UnlockWorkflow.java
Patch:
@@ -129,7 +129,7 @@ private PasswordEntry askForPassword(boolean animateShake) throws InterruptedExc
 	}
 
 	private void handleSuccess() {
-		LOG.info("Unlock of '{}' succeeded.", vault.getDisplayableName());
+		LOG.info("Unlock of '{}' succeeded.", vault.getDisplayName());
 		if (savePassword.get()) {
 			savePasswordToSystemkeychain();
 		}

File: main/ui/src/main/java/org/cryptomator/ui/vaultoptions/GeneralVaultOptionsController.java
Patch:
@@ -3,6 +3,7 @@
 import javafx.fxml.FXML;
 import javafx.scene.control.CheckBox;
 import javafx.scene.control.ChoiceBox;
+import javafx.scene.control.TextField;
 import javafx.util.StringConverter;
 import org.cryptomator.common.settings.UiTheme;
 import org.cryptomator.common.settings.WhenUnlocked;
@@ -18,6 +19,7 @@ public class GeneralVaultOptionsController implements FxController {
 	private final Vault vault;
 	private final ResourceBundle resourceBundle;
 
+	public TextField vaultName;
 	public CheckBox unlockOnStartupCheckbox;
 	public ChoiceBox<WhenUnlocked> actionAfterUnlockChoiceBox;
 
@@ -29,6 +31,7 @@ public class GeneralVaultOptionsController implements FxController {
 
 	@FXML
 	public void initialize() {
+		vaultName.textProperty().bindBidirectional(vault.getVaultSettings().displayName());
 		unlockOnStartupCheckbox.selectedProperty().bindBidirectional(vault.getVaultSettings().unlockAfterStartup());
 		actionAfterUnlockChoiceBox.getItems().addAll(WhenUnlocked.values());
 		actionAfterUnlockChoiceBox.valueProperty().bindBidirectional(vault.getVaultSettings().actionAfterUnlock());

File: main/ui/src/main/java/org/cryptomator/ui/vaultoptions/MountOptionsController.java
Patch:
@@ -43,7 +43,6 @@ public class MountOptionsController implements FxController {
 	private final BooleanBinding webDavAndWindows;
 	private final WindowsDriveLetters windowsDriveLetters;
 	private final ResourceBundle resourceBundle;
-	public TextField driveName;
 	public CheckBox readOnlyCheckbox;
 	public CheckBox customMountFlagsCheckbox;
 	public TextField mountFlags;
@@ -70,7 +69,6 @@ public class MountOptionsController implements FxController {
 
 	@FXML
 	public void initialize() {
-		driveName.textProperty().bindBidirectional(vault.getVaultSettings().mountName());
 
 		// readonly:
 		readOnlyCheckbox.selectedProperty().bindBidirectional(vault.getVaultSettings().usesReadOnlyMode());

File: main/commons/src/main/java/org/cryptomator/common/vaults/DokanyVolume.java
Patch:
@@ -47,9 +47,9 @@ public boolean isSupported() {
 	@Override
 	public void mount(CryptoFileSystem fs, String mountFlags) throws VolumeException, IOException {
 		this.mountPoint = determineMountPoint();
-		String mountName = vaultSettings.mountName().get();
+		String mountName = vaultSettings.displayName().get();
 		try {
-			this.mount = mountFactory.mount(fs.getPath("/"), mountPoint, mountName, FS_TYPE_NAME, mountFlags.strip());
+			this.mount = mountFactory.mount(fs.getPath("/"), mountPoint, vaultSettings.mountName().get(), FS_TYPE_NAME, mountFlags.strip());
 		} catch (MountFailedException e) {
 			if (vaultSettings.getCustomMountPath().isPresent()) {
 				LOG.warn("Failed to mount vault into {}. Is this directory currently accessed by another process (e.g. Windows Explorer)?", mountPoint);

File: main/commons/src/main/java/org/cryptomator/common/vaults/WebDavVolume.java
Patch:
@@ -98,7 +98,7 @@ public synchronized void unmountForced() throws VolumeException {
 
 	@Override
 	public Optional<Path> getMountPoint() {
-		return Optional.ofNullable(mountPoint);
+		return Optional.ofNullable(mountPoint); //TODO
 	}
 
 	private String getLocalhostAliasOrNull() {

File: main/commons/src/test/java/org/cryptomator/common/settings/SettingsTest.java
Patch:
@@ -29,7 +29,7 @@ public void testAutoSave() {
 		Mockito.verify(changeListener, Mockito.times(2)).accept(settings);
 
 		// third change (to property of list item):
-		vaultSettings.mountName().set("asd");
+		vaultSettings.displayName().set("asd");
 		Mockito.verify(changeListener, Mockito.times(3)).accept(settings);
 	}
 

File: main/commons/src/test/java/org/cryptomator/common/vaults/VaultModuleTest.java
Patch:
@@ -1,9 +1,9 @@
 package org.cryptomator.common.vaults;
 
+import javafx.beans.binding.Bindings;
 import javafx.beans.binding.StringBinding;
 import javafx.beans.property.SimpleBooleanProperty;
 import javafx.beans.property.SimpleObjectProperty;
-import javafx.beans.property.SimpleStringProperty;
 import org.cryptomator.common.settings.Settings;
 import org.cryptomator.common.settings.VaultSettings;
 import org.cryptomator.common.settings.VolumeImpl;
@@ -28,7 +28,7 @@ public class VaultModuleTest {
 
 	@BeforeEach
 	public void setup(@TempDir Path tmpDir) {
-		Mockito.when(vaultSettings.mountName()).thenReturn(new SimpleStringProperty("TEST"));
+		Mockito.when(vaultSettings.mountName()).thenReturn(Bindings.createStringBinding(() -> "TEST"));
 		Mockito.when(vaultSettings.usesReadOnlyMode()).thenReturn(new SimpleBooleanProperty(true));
 		System.setProperty("user.home", tmpDir.toString());
 	}

File: main/ui/src/main/java/org/cryptomator/ui/changepassword/ChangePasswordController.java
Patch:
@@ -68,7 +68,7 @@ public void cancel() {
 	public void finish() {
 		try {
 			CryptoFileSystemProvider.changePassphrase(vault.getPath(), MASTERKEY_FILENAME, oldPasswordField.getCharacters(), newPassword.get());
-			LOG.info("Successfully changed password for {}", vault.getDisplayableName());
+			LOG.info("Successfully changed password for {}", vault.getDisplayName());
 			window.close();
 			updatePasswordInSystemkeychain();
 		} catch (IOException e) {
@@ -85,7 +85,7 @@ private void updatePasswordInSystemkeychain() {
 		if (keychain.isPresent()) {
 			try {
 				keychain.get().changePassphrase(vault.getId(), CharBuffer.wrap(newPassword.get()));
-				LOG.info("Successfully updated password in system keychain for {}", vault.getDisplayableName());
+				LOG.info("Successfully updated password in system keychain for {}", vault.getDisplayName());
 			} catch (KeychainAccessException e) {
 				LOG.error("Failed to update password in system keychain.", e);
 			}

File: main/ui/src/main/java/org/cryptomator/ui/forgetPassword/ForgetPasswordController.java
Patch:
@@ -41,7 +41,7 @@ public void finish() {
 		if (keychain.isPresent()) {
 			try {
 				keychain.get().deletePassphrase(vault.getId());
-				LOG.debug("Forgot password for vault {}.", vault.getDisplayableName());
+				LOG.debug("Forgot password for vault {}.", vault.getDisplayName());
 				confirmedResult.setValue(true);
 			} catch (KeychainAccessException e) {
 				LOG.error("Failed to remove entry from system keychain.", e);

File: main/ui/src/main/java/org/cryptomator/ui/fxapp/FxApplication.java
Patch:
@@ -101,7 +101,7 @@ public void showMainWindow() {
 	public void startUnlockWorkflow(Vault vault, Optional<Stage> owner) {
 		Platform.runLater(() -> {
 			unlockWindowBuilderProvider.get().vault(vault).owner(owner).build().startUnlockWorkflow();
-			LOG.debug("Showing UnlockWindow for {}", vault.getDisplayableName());
+			LOG.debug("Showing UnlockWindow for {}", vault.getDisplayName());
 		});
 	}
 

File: main/ui/src/main/java/org/cryptomator/ui/migration/MigrationRunController.java
Patch:
@@ -116,10 +116,10 @@ public void migrate() {
 			return migrators.needsMigration(vault.getPath(), MASTERKEY_FILENAME);
 		}).onSuccess(needsAnotherMigration -> {
 			if (needsAnotherMigration) {
-				LOG.info("Migration of '{}' succeeded, but another migration is required.", vault.getDisplayableName());
+				LOG.info("Migration of '{}' succeeded, but another migration is required.", vault.getDisplayName());
 				vault.setState(VaultState.NEEDS_MIGRATION);
 			} else {
-				LOG.info("Migration of '{}' succeeded.", vault.getDisplayableName());
+				LOG.info("Migration of '{}' succeeded.", vault.getDisplayName());
 				vault.setState(VaultState.LOCKED);
 				passwordField.wipe();
 				window.setScene(successScene.get());

File: main/ui/src/main/java/org/cryptomator/ui/quit/QuitController.java
Patch:
@@ -53,7 +53,7 @@ public void lockAndQuit() {
 
 		Task<Collection<Vault>> lockAllTask = vaultService.createLockAllTask(unlockedVaults, false);
 		lockAllTask.setOnSucceeded(evt -> {
-			LOG.info("Locked {}", lockAllTask.getValue().stream().map(Vault::getDisplayableName).collect(Collectors.joining(", ")));
+			LOG.info("Locked {}", lockAllTask.getValue().stream().map(Vault::getDisplayName).collect(Collectors.joining(", ")));
 			if (unlockedVaults.isEmpty()) {
 				window.close();
 				response.performQuit();

File: main/ui/src/main/java/org/cryptomator/ui/recoverykey/RecoveryKeyModule.java
Patch:
@@ -9,7 +9,6 @@
 import javafx.beans.property.SimpleStringProperty;
 import javafx.beans.property.StringProperty;
 import javafx.scene.Scene;
-import javafx.scene.image.Image;
 import javafx.stage.Modality;
 import javafx.stage.Stage;
 import org.cryptomator.common.vaults.Vault;
@@ -25,7 +24,6 @@
 
 import javax.inject.Named;
 import javax.inject.Provider;
-import java.util.List;
 import java.util.Map;
 import java.util.ResourceBundle;
 
@@ -107,7 +105,7 @@ static Scene provideRecoveryKeyResetPasswordScene(@RecoveryKeyWindow FXMLLoaderF
 	@IntoMap
 	@FxControllerKey(RecoveryKeyDisplayController.class)
 	static FxController provideRecoveryKeyDisplayController(@RecoveryKeyWindow Stage window, @RecoveryKeyWindow Vault vault, @RecoveryKeyWindow StringProperty recoveryKey, ResourceBundle localization) {
-		return new RecoveryKeyDisplayController(window, vault.getDisplayableName(), recoveryKey.get(), localization);
+		return new RecoveryKeyDisplayController(window, vault.getDisplayName(), recoveryKey.get(), localization);
 	}
 
 	@Binds

File: main/ui/src/main/java/org/cryptomator/ui/removevault/RemoveVaultController.java
Patch:
@@ -34,7 +34,7 @@ public void close() {
 	@FXML
 	public void finish() {
 		vaults.remove(vault);
-		LOG.debug("Removing vault {}.", vault.getDisplayableName());
+		LOG.debug("Removing vault {}.", vault.getDisplayName());
 		window.close();
 	}
 }

File: main/ui/src/main/java/org/cryptomator/ui/traymenu/TrayMenuController.java
Patch:
@@ -80,7 +80,7 @@ private void rebuildMenu() {
 	}
 
 	private Menu buildSubmenu(Vault vault) {
-		Menu submenu = new Menu(vault.getDisplayableName());
+		Menu submenu = new Menu(vault.getDisplayName());
 
 		if (vault.isLocked()) {
 			MenuItem unlockItem = new MenuItem(resourceBundle.getString("traymenu.vault.unlock"));

File: main/ui/src/main/java/org/cryptomator/ui/unlock/UnlockController.java
Patch:
@@ -77,7 +77,7 @@ public UnlockController(@UnlockWindow Stage window, @UnlockWindow Vault vault, A
 		this.unlockButtonContentDisplay = Bindings.createObjectBinding(this::getUnlockButtonContentDisplay, passwordEntryLock.awaitingInteraction());
 		this.userInteractionDisabled = passwordEntryLock.awaitingInteraction().not();
 		this.unlockButtonDisabled = new SimpleBooleanProperty();
-		this.vaultName = WeakBindings.bindString(vault.displayableNameProperty());
+		this.vaultName = WeakBindings.bindString(vault.displayNameProperty());
 		this.window.setOnCloseRequest(windowEvent -> cancel());
 	}
 

File: main/ui/src/main/java/org/cryptomator/ui/unlock/UnlockModule.java
Patch:
@@ -82,7 +82,7 @@ static FXMLLoaderFactory provideFxmlLoaderFactory(Map<Class<? extends FxControll
 	@UnlockScoped
 	static Stage provideStage(StageFactory factory, @UnlockWindow Vault vault, @Named("unlockWindowOwner") Optional<Stage> owner) {
 		Stage stage = factory.create();
-		stage.setTitle(vault.getDisplayableName());
+		stage.setTitle(vault.getDisplayName());
 		stage.setResizable(false);
 		if (owner.isPresent()) {
 			stage.initOwner(owner.get());

File: main/ui/src/main/java/org/cryptomator/ui/unlock/UnlockWorkflow.java
Patch:
@@ -128,7 +128,7 @@ private PasswordEntry askForPassword(boolean animateShake) throws InterruptedExc
 	}
 
 	private void handleSuccess() {
-		LOG.info("Unlock of '{}' succeeded.", vault.getDisplayableName());
+		LOG.info("Unlock of '{}' succeeded.", vault.getDisplayName());
 		if (savePassword.get()) {
 			savePasswordToSystemkeychain();
 		}

File: main/ui/src/main/java/org/cryptomator/ui/vaultoptions/GeneralVaultOptionsController.java
Patch:
@@ -3,6 +3,7 @@
 import javafx.fxml.FXML;
 import javafx.scene.control.CheckBox;
 import javafx.scene.control.ChoiceBox;
+import javafx.scene.control.TextField;
 import javafx.util.StringConverter;
 import org.cryptomator.common.settings.UiTheme;
 import org.cryptomator.common.settings.WhenUnlocked;
@@ -18,6 +19,7 @@ public class GeneralVaultOptionsController implements FxController {
 	private final Vault vault;
 	private final ResourceBundle resourceBundle;
 
+	public TextField vaultName;
 	public CheckBox unlockOnStartupCheckbox;
 	public ChoiceBox<WhenUnlocked> actionAfterUnlockChoiceBox;
 
@@ -29,6 +31,7 @@ public class GeneralVaultOptionsController implements FxController {
 
 	@FXML
 	public void initialize() {
+		vaultName.textProperty().bindBidirectional(vault.getVaultSettings().displayName());
 		unlockOnStartupCheckbox.selectedProperty().bindBidirectional(vault.getVaultSettings().unlockAfterStartup());
 		actionAfterUnlockChoiceBox.getItems().addAll(WhenUnlocked.values());
 		actionAfterUnlockChoiceBox.valueProperty().bindBidirectional(vault.getVaultSettings().actionAfterUnlock());

File: main/ui/src/main/java/org/cryptomator/ui/vaultoptions/MountOptionsController.java
Patch:
@@ -42,7 +42,6 @@ public class MountOptionsController implements FxController {
 	private final BooleanBinding webDavAndWindows;
 	private final WindowsDriveLetters windowsDriveLetters;
 	private final ResourceBundle resourceBundle;
-	public TextField driveName;
 	public CheckBox readOnlyCheckbox;
 	public CheckBox customMountFlagsCheckbox;
 	public TextField mountFlags;
@@ -63,7 +62,6 @@ public class MountOptionsController implements FxController {
 
 	@FXML
 	public void initialize() {
-		driveName.textProperty().bindBidirectional(vault.getVaultSettings().mountName());
 
 		// readonly:
 		readOnlyCheckbox.selectedProperty().bindBidirectional(vault.getVaultSettings().usesReadOnlyMode());

File: main/commons/src/main/java/org/cryptomator/common/vaults/DokanyVolume.java
Patch:
@@ -47,9 +47,9 @@ public boolean isSupported() {
 	@Override
 	public void mount(CryptoFileSystem fs, String mountFlags) throws VolumeException, IOException {
 		this.mountPoint = determineMountPoint();
-		String mountName = vaultSettings.mountName().get();
+		String mountName = vaultSettings.displayName().get();
 		try {
-			this.mount = mountFactory.mount(fs.getPath("/"), mountPoint, mountName, FS_TYPE_NAME, mountFlags.strip());
+			this.mount = mountFactory.mount(fs.getPath("/"), mountPoint, vaultSettings.mountName().get(), FS_TYPE_NAME, mountFlags.strip());
 		} catch (MountFailedException e) {
 			if (vaultSettings.getCustomMountPath().isPresent()) {
 				LOG.warn("Failed to mount vault into {}. Is this directory currently accessed by another process (e.g. Windows Explorer)?", mountPoint);

File: main/commons/src/main/java/org/cryptomator/common/vaults/WebDavVolume.java
Patch:
@@ -98,7 +98,7 @@ public synchronized void unmountForced() throws VolumeException {
 
 	@Override
 	public Optional<Path> getMountPoint() {
-		return Optional.ofNullable(mountPoint);
+		return Optional.ofNullable(mountPoint); //TODO
 	}
 
 	private String getLocalhostAliasOrNull() {

File: main/commons/src/test/java/org/cryptomator/common/settings/SettingsTest.java
Patch:
@@ -29,7 +29,7 @@ public void testAutoSave() {
 		Mockito.verify(changeListener, Mockito.times(2)).accept(settings);
 
 		// third change (to property of list item):
-		vaultSettings.mountName().set("asd");
+		vaultSettings.displayName().set("asd");
 		Mockito.verify(changeListener, Mockito.times(3)).accept(settings);
 	}
 

File: main/commons/src/test/java/org/cryptomator/common/vaults/VaultModuleTest.java
Patch:
@@ -1,9 +1,9 @@
 package org.cryptomator.common.vaults;
 
+import javafx.beans.binding.Bindings;
 import javafx.beans.binding.StringBinding;
 import javafx.beans.property.SimpleBooleanProperty;
 import javafx.beans.property.SimpleObjectProperty;
-import javafx.beans.property.SimpleStringProperty;
 import org.cryptomator.common.settings.Settings;
 import org.cryptomator.common.settings.VaultSettings;
 import org.cryptomator.common.settings.VolumeImpl;
@@ -28,7 +28,7 @@ public class VaultModuleTest {
 
 	@BeforeEach
 	public void setup(@TempDir Path tmpDir) {
-		Mockito.when(vaultSettings.mountName()).thenReturn(new SimpleStringProperty("TEST"));
+		Mockito.when(vaultSettings.mountName()).thenReturn(Bindings.createStringBinding(() -> "TEST"));
 		Mockito.when(vaultSettings.usesReadOnlyMode()).thenReturn(new SimpleBooleanProperty(true));
 		System.setProperty("user.home", tmpDir.toString());
 	}

File: main/ui/src/main/java/org/cryptomator/ui/changepassword/ChangePasswordController.java
Patch:
@@ -68,7 +68,7 @@ public void cancel() {
 	public void finish() {
 		try {
 			CryptoFileSystemProvider.changePassphrase(vault.getPath(), MASTERKEY_FILENAME, oldPasswordField.getCharacters(), newPassword.get());
-			LOG.info("Successfully changed password for {}", vault.getDisplayableName());
+			LOG.info("Successfully changed password for {}", vault.getDisplayName());
 			window.close();
 			updatePasswordInSystemkeychain();
 		} catch (IOException e) {
@@ -85,7 +85,7 @@ private void updatePasswordInSystemkeychain() {
 		if (keychain.isPresent()) {
 			try {
 				keychain.get().changePassphrase(vault.getId(), CharBuffer.wrap(newPassword.get()));
-				LOG.info("Successfully updated password in system keychain for {}", vault.getDisplayableName());
+				LOG.info("Successfully updated password in system keychain for {}", vault.getDisplayName());
 			} catch (KeychainAccessException e) {
 				LOG.error("Failed to update password in system keychain.", e);
 			}

File: main/ui/src/main/java/org/cryptomator/ui/forgetPassword/ForgetPasswordController.java
Patch:
@@ -41,7 +41,7 @@ public void finish() {
 		if (keychain.isPresent()) {
 			try {
 				keychain.get().deletePassphrase(vault.getId());
-				LOG.debug("Forgot password for vault {}.", vault.getDisplayableName());
+				LOG.debug("Forgot password for vault {}.", vault.getDisplayName());
 				confirmedResult.setValue(true);
 			} catch (KeychainAccessException e) {
 				LOG.error("Failed to remove entry from system keychain.", e);

File: main/ui/src/main/java/org/cryptomator/ui/fxapp/FxApplication.java
Patch:
@@ -100,7 +100,7 @@ public void showMainWindow() {
 	public void startUnlockWorkflow(Vault vault, Optional<Stage> owner) {
 		Platform.runLater(() -> {
 			unlockWindowBuilderProvider.get().vault(vault).owner(owner).build().startUnlockWorkflow();
-			LOG.debug("Showing UnlockWindow for {}", vault.getDisplayableName());
+			LOG.debug("Showing UnlockWindow for {}", vault.getDisplayName());
 		});
 	}
 

File: main/ui/src/main/java/org/cryptomator/ui/migration/MigrationRunController.java
Patch:
@@ -116,10 +116,10 @@ public void migrate() {
 			return migrators.needsMigration(vault.getPath(), MASTERKEY_FILENAME);
 		}).onSuccess(needsAnotherMigration -> {
 			if (needsAnotherMigration) {
-				LOG.info("Migration of '{}' succeeded, but another migration is required.", vault.getDisplayableName());
+				LOG.info("Migration of '{}' succeeded, but another migration is required.", vault.getDisplayName());
 				vault.setState(VaultState.NEEDS_MIGRATION);
 			} else {
-				LOG.info("Migration of '{}' succeeded.", vault.getDisplayableName());
+				LOG.info("Migration of '{}' succeeded.", vault.getDisplayName());
 				vault.setState(VaultState.LOCKED);
 				passwordField.wipe();
 				window.setScene(successScene.get());

File: main/ui/src/main/java/org/cryptomator/ui/quit/QuitController.java
Patch:
@@ -53,7 +53,7 @@ public void lockAndQuit() {
 
 		Task<Collection<Vault>> lockAllTask = vaultService.createLockAllTask(unlockedVaults, false);
 		lockAllTask.setOnSucceeded(evt -> {
-			LOG.info("Locked {}", lockAllTask.getValue().stream().map(Vault::getDisplayableName).collect(Collectors.joining(", ")));
+			LOG.info("Locked {}", lockAllTask.getValue().stream().map(Vault::getDisplayName).collect(Collectors.joining(", ")));
 			if (unlockedVaults.isEmpty()) {
 				window.close();
 				response.performQuit();

File: main/ui/src/main/java/org/cryptomator/ui/recoverykey/RecoveryKeyModule.java
Patch:
@@ -9,7 +9,6 @@
 import javafx.beans.property.SimpleStringProperty;
 import javafx.beans.property.StringProperty;
 import javafx.scene.Scene;
-import javafx.scene.image.Image;
 import javafx.stage.Modality;
 import javafx.stage.Stage;
 import org.cryptomator.common.vaults.Vault;
@@ -25,7 +24,6 @@
 
 import javax.inject.Named;
 import javax.inject.Provider;
-import java.util.List;
 import java.util.Map;
 import java.util.ResourceBundle;
 
@@ -107,7 +105,7 @@ static Scene provideRecoveryKeyResetPasswordScene(@RecoveryKeyWindow FXMLLoaderF
 	@IntoMap
 	@FxControllerKey(RecoveryKeyDisplayController.class)
 	static FxController provideRecoveryKeyDisplayController(@RecoveryKeyWindow Stage window, @RecoveryKeyWindow Vault vault, @RecoveryKeyWindow StringProperty recoveryKey, ResourceBundle localization) {
-		return new RecoveryKeyDisplayController(window, vault.getDisplayableName(), recoveryKey.get(), localization);
+		return new RecoveryKeyDisplayController(window, vault.getDisplayName(), recoveryKey.get(), localization);
 	}
 
 	@Binds

File: main/ui/src/main/java/org/cryptomator/ui/removevault/RemoveVaultController.java
Patch:
@@ -34,7 +34,7 @@ public void close() {
 	@FXML
 	public void finish() {
 		vaults.remove(vault);
-		LOG.debug("Removing vault {}.", vault.getDisplayableName());
+		LOG.debug("Removing vault {}.", vault.getDisplayName());
 		window.close();
 	}
 }

File: main/ui/src/main/java/org/cryptomator/ui/traymenu/TrayMenuController.java
Patch:
@@ -80,7 +80,7 @@ private void rebuildMenu() {
 	}
 
 	private Menu buildSubmenu(Vault vault) {
-		Menu submenu = new Menu(vault.getDisplayableName());
+		Menu submenu = new Menu(vault.getDisplayName());
 
 		if (vault.isLocked()) {
 			MenuItem unlockItem = new MenuItem(resourceBundle.getString("traymenu.vault.unlock"));

File: main/ui/src/main/java/org/cryptomator/ui/unlock/UnlockController.java
Patch:
@@ -77,7 +77,7 @@ public UnlockController(@UnlockWindow Stage window, @UnlockWindow Vault vault, A
 		this.unlockButtonContentDisplay = Bindings.createObjectBinding(this::getUnlockButtonContentDisplay, passwordEntryLock.awaitingInteraction());
 		this.userInteractionDisabled = passwordEntryLock.awaitingInteraction().not();
 		this.unlockButtonDisabled = new SimpleBooleanProperty();
-		this.vaultName = WeakBindings.bindString(vault.displayableNameProperty());
+		this.vaultName = WeakBindings.bindString(vault.displayNameProperty());
 		this.window.setOnCloseRequest(windowEvent -> cancel());
 	}
 

File: main/ui/src/main/java/org/cryptomator/ui/unlock/UnlockModule.java
Patch:
@@ -82,7 +82,7 @@ static FXMLLoaderFactory provideFxmlLoaderFactory(Map<Class<? extends FxControll
 	@UnlockScoped
 	static Stage provideStage(StageFactory factory, @UnlockWindow Vault vault, @Named("unlockWindowOwner") Optional<Stage> owner) {
 		Stage stage = factory.create();
-		stage.setTitle(vault.getDisplayableName());
+		stage.setTitle(vault.getDisplayName());
 		stage.setResizable(false);
 		if (owner.isPresent()) {
 			stage.initOwner(owner.get());

File: main/ui/src/main/java/org/cryptomator/ui/unlock/UnlockWorkflow.java
Patch:
@@ -128,7 +128,7 @@ private PasswordEntry askForPassword(boolean animateShake) throws InterruptedExc
 	}
 
 	private void handleSuccess() {
-		LOG.info("Unlock of '{}' succeeded.", vault.getDisplayableName());
+		LOG.info("Unlock of '{}' succeeded.", vault.getDisplayName());
 		if (savePassword.get()) {
 			savePasswordToSystemkeychain();
 		}

File: main/ui/src/main/java/org/cryptomator/ui/vaultoptions/GeneralVaultOptionsController.java
Patch:
@@ -3,6 +3,7 @@
 import javafx.fxml.FXML;
 import javafx.scene.control.CheckBox;
 import javafx.scene.control.ChoiceBox;
+import javafx.scene.control.TextField;
 import javafx.util.StringConverter;
 import org.cryptomator.common.settings.UiTheme;
 import org.cryptomator.common.settings.WhenUnlocked;
@@ -18,6 +19,7 @@ public class GeneralVaultOptionsController implements FxController {
 	private final Vault vault;
 	private final ResourceBundle resourceBundle;
 
+	public TextField vaultName;
 	public CheckBox unlockOnStartupCheckbox;
 	public ChoiceBox<WhenUnlocked> actionAfterUnlockChoiceBox;
 
@@ -29,6 +31,7 @@ public class GeneralVaultOptionsController implements FxController {
 
 	@FXML
 	public void initialize() {
+		vaultName.textProperty().bindBidirectional(vault.getVaultSettings().displayName());
 		unlockOnStartupCheckbox.selectedProperty().bindBidirectional(vault.getVaultSettings().unlockAfterStartup());
 		actionAfterUnlockChoiceBox.getItems().addAll(WhenUnlocked.values());
 		actionAfterUnlockChoiceBox.valueProperty().bindBidirectional(vault.getVaultSettings().actionAfterUnlock());

File: main/ui/src/main/java/org/cryptomator/ui/vaultoptions/MountOptionsController.java
Patch:
@@ -42,7 +42,6 @@ public class MountOptionsController implements FxController {
 	private final BooleanBinding webDavAndWindows;
 	private final WindowsDriveLetters windowsDriveLetters;
 	private final ResourceBundle resourceBundle;
-	public TextField driveName;
 	public CheckBox readOnlyCheckbox;
 	public CheckBox customMountFlagsCheckbox;
 	public TextField mountFlags;
@@ -63,7 +62,6 @@ public class MountOptionsController implements FxController {
 
 	@FXML
 	public void initialize() {
-		driveName.textProperty().bindBidirectional(vault.getVaultSettings().mountName());
 
 		// readonly:
 		readOnlyCheckbox.selectedProperty().bindBidirectional(vault.getVaultSettings().usesReadOnlyMode());

File: main/commons/src/main/java/org/cryptomator/common/vaults/DokanyVolume.java
Patch:
@@ -47,9 +47,9 @@ public boolean isSupported() {
 	@Override
 	public void mount(CryptoFileSystem fs, String mountFlags) throws VolumeException, IOException {
 		this.mountPoint = determineMountPoint();
-		String mountName = vaultSettings.mountName().get();
+		String mountName = vaultSettings.displayName().get();
 		try {
-			this.mount = mountFactory.mount(fs.getPath("/"), mountPoint, mountName, FS_TYPE_NAME, mountFlags.strip());
+			this.mount = mountFactory.mount(fs.getPath("/"), mountPoint, vaultSettings.mountName().get(), FS_TYPE_NAME, mountFlags.strip());
 		} catch (MountFailedException e) {
 			if (vaultSettings.getCustomMountPath().isPresent()) {
 				LOG.warn("Failed to mount vault into {}. Is this directory currently accessed by another process (e.g. Windows Explorer)?", mountPoint);

File: main/commons/src/main/java/org/cryptomator/common/vaults/VaultModule.java
Patch:
@@ -77,7 +77,7 @@ public Volume provideVolume(Settings settings, WebDavVolume webDavVolume, FuseVo
 	@DefaultMountFlags
 	public StringBinding provideDefaultMountFlags(Settings settings, VaultSettings vaultSettings) {
 		ObjectProperty<VolumeImpl> preferredVolumeImpl = settings.preferredVolumeImpl();
-		StringProperty mountName = vaultSettings.mountName();
+		StringProperty mountName = vaultSettings.displayName();
 		BooleanProperty readOnly = vaultSettings.usesReadOnlyMode();
 
 		return Bindings.createStringBinding(() -> {

File: main/commons/src/main/java/org/cryptomator/common/vaults/WebDavVolume.java
Patch:
@@ -98,7 +98,7 @@ public synchronized void unmountForced() throws VolumeException {
 
 	@Override
 	public Optional<Path> getMountPoint() {
-		return Optional.ofNullable(mountPoint);
+		return Optional.ofNullable(mountPoint); //TODO
 	}
 
 	private String getLocalhostAliasOrNull() {

File: main/commons/src/test/java/org/cryptomator/common/settings/SettingsTest.java
Patch:
@@ -29,7 +29,7 @@ public void testAutoSave() {
 		Mockito.verify(changeListener, Mockito.times(2)).accept(settings);
 
 		// third change (to property of list item):
-		vaultSettings.mountName().set("asd");
+		vaultSettings.displayName().set("asd");
 		Mockito.verify(changeListener, Mockito.times(3)).accept(settings);
 	}
 

File: main/commons/src/test/java/org/cryptomator/common/vaults/VaultModuleTest.java
Patch:
@@ -28,7 +28,7 @@ public class VaultModuleTest {
 
 	@BeforeEach
 	public void setup(@TempDir Path tmpDir) {
-		Mockito.when(vaultSettings.mountName()).thenReturn(new SimpleStringProperty("TEST"));
+		Mockito.when(vaultSettings.displayName()).thenReturn(new SimpleStringProperty("TEST"));
 		Mockito.when(vaultSettings.usesReadOnlyMode()).thenReturn(new SimpleBooleanProperty(true));
 		System.setProperty("user.home", tmpDir.toString());
 	}

File: main/ui/src/main/java/org/cryptomator/ui/changepassword/ChangePasswordController.java
Patch:
@@ -68,7 +68,7 @@ public void cancel() {
 	public void finish() {
 		try {
 			CryptoFileSystemProvider.changePassphrase(vault.getPath(), MASTERKEY_FILENAME, oldPasswordField.getCharacters(), newPassword.get());
-			LOG.info("Successfully changed password for {}", vault.getDisplayableName());
+			LOG.info("Successfully changed password for {}", vault.getDisplayName());
 			window.close();
 			updatePasswordInSystemkeychain();
 		} catch (IOException e) {
@@ -85,7 +85,7 @@ private void updatePasswordInSystemkeychain() {
 		if (keychain.isPresent()) {
 			try {
 				keychain.get().changePassphrase(vault.getId(), CharBuffer.wrap(newPassword.get()));
-				LOG.info("Successfully updated password in system keychain for {}", vault.getDisplayableName());
+				LOG.info("Successfully updated password in system keychain for {}", vault.getDisplayName());
 			} catch (KeychainAccessException e) {
 				LOG.error("Failed to update password in system keychain.", e);
 			}

File: main/ui/src/main/java/org/cryptomator/ui/forgetPassword/ForgetPasswordController.java
Patch:
@@ -41,7 +41,7 @@ public void finish() {
 		if (keychain.isPresent()) {
 			try {
 				keychain.get().deletePassphrase(vault.getId());
-				LOG.debug("Forgot password for vault {}.", vault.getDisplayableName());
+				LOG.debug("Forgot password for vault {}.", vault.getDisplayName());
 				confirmedResult.setValue(true);
 			} catch (KeychainAccessException e) {
 				LOG.error("Failed to remove entry from system keychain.", e);

File: main/ui/src/main/java/org/cryptomator/ui/fxapp/FxApplication.java
Patch:
@@ -100,7 +100,7 @@ public void showMainWindow() {
 	public void startUnlockWorkflow(Vault vault, Optional<Stage> owner) {
 		Platform.runLater(() -> {
 			unlockWindowBuilderProvider.get().vault(vault).owner(owner).build().startUnlockWorkflow();
-			LOG.debug("Showing UnlockWindow for {}", vault.getDisplayableName());
+			LOG.debug("Showing UnlockWindow for {}", vault.getDisplayName());
 		});
 	}
 

File: main/ui/src/main/java/org/cryptomator/ui/migration/MigrationRunController.java
Patch:
@@ -116,10 +116,10 @@ public void migrate() {
 			return migrators.needsMigration(vault.getPath(), MASTERKEY_FILENAME);
 		}).onSuccess(needsAnotherMigration -> {
 			if (needsAnotherMigration) {
-				LOG.info("Migration of '{}' succeeded, but another migration is required.", vault.getDisplayableName());
+				LOG.info("Migration of '{}' succeeded, but another migration is required.", vault.getDisplayName());
 				vault.setState(VaultState.NEEDS_MIGRATION);
 			} else {
-				LOG.info("Migration of '{}' succeeded.", vault.getDisplayableName());
+				LOG.info("Migration of '{}' succeeded.", vault.getDisplayName());
 				vault.setState(VaultState.LOCKED);
 				passwordField.wipe();
 				window.setScene(successScene.get());

File: main/ui/src/main/java/org/cryptomator/ui/quit/QuitController.java
Patch:
@@ -53,7 +53,7 @@ public void lockAndQuit() {
 
 		Task<Collection<Vault>> lockAllTask = vaultService.createLockAllTask(unlockedVaults, false);
 		lockAllTask.setOnSucceeded(evt -> {
-			LOG.info("Locked {}", lockAllTask.getValue().stream().map(Vault::getDisplayableName).collect(Collectors.joining(", ")));
+			LOG.info("Locked {}", lockAllTask.getValue().stream().map(Vault::getDisplayName).collect(Collectors.joining(", ")));
 			if (unlockedVaults.isEmpty()) {
 				window.close();
 				response.performQuit();

File: main/ui/src/main/java/org/cryptomator/ui/recoverykey/RecoveryKeyModule.java
Patch:
@@ -9,7 +9,6 @@
 import javafx.beans.property.SimpleStringProperty;
 import javafx.beans.property.StringProperty;
 import javafx.scene.Scene;
-import javafx.scene.image.Image;
 import javafx.stage.Modality;
 import javafx.stage.Stage;
 import org.cryptomator.common.vaults.Vault;
@@ -25,7 +24,6 @@
 
 import javax.inject.Named;
 import javax.inject.Provider;
-import java.util.List;
 import java.util.Map;
 import java.util.ResourceBundle;
 
@@ -107,7 +105,7 @@ static Scene provideRecoveryKeyResetPasswordScene(@RecoveryKeyWindow FXMLLoaderF
 	@IntoMap
 	@FxControllerKey(RecoveryKeyDisplayController.class)
 	static FxController provideRecoveryKeyDisplayController(@RecoveryKeyWindow Stage window, @RecoveryKeyWindow Vault vault, @RecoveryKeyWindow StringProperty recoveryKey, ResourceBundle localization) {
-		return new RecoveryKeyDisplayController(window, vault.getDisplayableName(), recoveryKey.get(), localization);
+		return new RecoveryKeyDisplayController(window, vault.getDisplayName(), recoveryKey.get(), localization);
 	}
 
 	@Binds

File: main/ui/src/main/java/org/cryptomator/ui/removevault/RemoveVaultController.java
Patch:
@@ -34,7 +34,7 @@ public void close() {
 	@FXML
 	public void finish() {
 		vaults.remove(vault);
-		LOG.debug("Removing vault {}.", vault.getDisplayableName());
+		LOG.debug("Removing vault {}.", vault.getDisplayName());
 		window.close();
 	}
 }

File: main/ui/src/main/java/org/cryptomator/ui/traymenu/TrayMenuController.java
Patch:
@@ -80,7 +80,7 @@ private void rebuildMenu() {
 	}
 
 	private Menu buildSubmenu(Vault vault) {
-		Menu submenu = new Menu(vault.getDisplayableName());
+		Menu submenu = new Menu(vault.getDisplayName());
 
 		if (vault.isLocked()) {
 			MenuItem unlockItem = new MenuItem(resourceBundle.getString("traymenu.vault.unlock"));

File: main/ui/src/main/java/org/cryptomator/ui/unlock/UnlockController.java
Patch:
@@ -77,7 +77,7 @@ public UnlockController(@UnlockWindow Stage window, @UnlockWindow Vault vault, A
 		this.unlockButtonContentDisplay = Bindings.createObjectBinding(this::getUnlockButtonContentDisplay, passwordEntryLock.awaitingInteraction());
 		this.userInteractionDisabled = passwordEntryLock.awaitingInteraction().not();
 		this.unlockButtonDisabled = new SimpleBooleanProperty();
-		this.vaultName = WeakBindings.bindString(vault.displayableNameProperty());
+		this.vaultName = WeakBindings.bindString(vault.displayNameProperty());
 		this.window.setOnCloseRequest(windowEvent -> cancel());
 	}
 

File: main/ui/src/main/java/org/cryptomator/ui/unlock/UnlockModule.java
Patch:
@@ -82,7 +82,7 @@ static FXMLLoaderFactory provideFxmlLoaderFactory(Map<Class<? extends FxControll
 	@UnlockScoped
 	static Stage provideStage(StageFactory factory, @UnlockWindow Vault vault, @Named("unlockWindowOwner") Optional<Stage> owner) {
 		Stage stage = factory.create();
-		stage.setTitle(vault.getDisplayableName());
+		stage.setTitle(vault.getDisplayName());
 		stage.setResizable(false);
 		if (owner.isPresent()) {
 			stage.initOwner(owner.get());

File: main/ui/src/main/java/org/cryptomator/ui/unlock/UnlockWorkflow.java
Patch:
@@ -128,7 +128,7 @@ private PasswordEntry askForPassword(boolean animateShake) throws InterruptedExc
 	}
 
 	private void handleSuccess() {
-		LOG.info("Unlock of '{}' succeeded.", vault.getDisplayableName());
+		LOG.info("Unlock of '{}' succeeded.", vault.getDisplayName());
 		if (savePassword.get()) {
 			savePasswordToSystemkeychain();
 		}

File: main/ui/src/main/java/org/cryptomator/ui/vaultoptions/GeneralVaultOptionsController.java
Patch:
@@ -3,6 +3,7 @@
 import javafx.fxml.FXML;
 import javafx.scene.control.CheckBox;
 import javafx.scene.control.ChoiceBox;
+import javafx.scene.control.TextField;
 import javafx.util.StringConverter;
 import org.cryptomator.common.settings.UiTheme;
 import org.cryptomator.common.settings.WhenUnlocked;
@@ -18,6 +19,7 @@ public class GeneralVaultOptionsController implements FxController {
 	private final Vault vault;
 	private final ResourceBundle resourceBundle;
 
+	public TextField vaultName;
 	public CheckBox unlockOnStartupCheckbox;
 	public ChoiceBox<WhenUnlocked> actionAfterUnlockChoiceBox;
 
@@ -29,6 +31,7 @@ public class GeneralVaultOptionsController implements FxController {
 
 	@FXML
 	public void initialize() {
+		vaultName.textProperty().bindBidirectional(vault.getVaultSettings().displayName());
 		unlockOnStartupCheckbox.selectedProperty().bindBidirectional(vault.getVaultSettings().unlockAfterStartup());
 		actionAfterUnlockChoiceBox.getItems().addAll(WhenUnlocked.values());
 		actionAfterUnlockChoiceBox.valueProperty().bindBidirectional(vault.getVaultSettings().actionAfterUnlock());

File: main/ui/src/main/java/org/cryptomator/ui/vaultoptions/MountOptionsController.java
Patch:
@@ -42,7 +42,6 @@ public class MountOptionsController implements FxController {
 	private final BooleanBinding webDavAndWindows;
 	private final WindowsDriveLetters windowsDriveLetters;
 	private final ResourceBundle resourceBundle;
-	public TextField driveName;
 	public CheckBox readOnlyCheckbox;
 	public CheckBox customMountFlagsCheckbox;
 	public TextField mountFlags;
@@ -63,7 +62,6 @@ public class MountOptionsController implements FxController {
 
 	@FXML
 	public void initialize() {
-		driveName.textProperty().bindBidirectional(vault.getVaultSettings().mountName());
 
 		// readonly:
 		readOnlyCheckbox.selectedProperty().bindBidirectional(vault.getVaultSettings().usesReadOnlyMode());

File: main/commons/src/test/java/org/cryptomator/common/settings/VaultSettingsJsonAdapterTest.java
Patch:
@@ -23,7 +23,7 @@ public class VaultSettingsJsonAdapterTest {
 
 	@Test
 	public void testDeserialize() throws IOException {
-		String json = "{\"id\": \"foo\", \"path\": \"/foo/bar\", \"mountName\": \"test\", \"winDriveLetter\": \"X\", \"shouldBeIgnored\": true, \"individualMountPath\": \"/home/test/crypto\", \"mountFlags\":\"--foo --bar\"}";
+		String json = "{\"id\": \"foo\", \"path\": \"/foo/bar\", \"displayName\": \"test\", \"winDriveLetter\": \"X\", \"shouldBeIgnored\": true, \"individualMountPath\": \"/home/test/crypto\", \"mountFlags\":\"--foo --bar\"}";
 		JsonReader jsonReader = new JsonReader(new StringReader(json));
 
 		VaultSettings vaultSettings = adapter.read(jsonReader);
@@ -55,7 +55,7 @@ public void testSerialize() throws IOException {
 		} else {
 			MatcherAssert.assertThat(result, CoreMatchers.containsString("\"path\":\"/foo/bar\""));
 		}
-		MatcherAssert.assertThat(result, CoreMatchers.containsString("\"mountName\":\"mountyMcMountFace\""));
+		MatcherAssert.assertThat(result, CoreMatchers.containsString("\"displayName\":\"mountyMcMountFace\""));
 		MatcherAssert.assertThat(result, CoreMatchers.containsString("\"mountFlags\":\"--foo --bar\""));
 	}
 

File: main/commons/src/main/java/org/cryptomator/common/settings/VaultSettingsJsonAdapter.java
Patch:
@@ -37,7 +37,7 @@ public void write(JsonWriter out, VaultSettings value) throws IOException {
 	public VaultSettings read(JsonReader in) throws IOException {
 		String id = null;
 		String path = null;
-		String mountName = null;
+		String displayName = null;
 		String customMountPath = null;
 		String winDriveLetter = null;
 		boolean unlockAfterStartup = VaultSettings.DEFAULT_UNLOCK_AFTER_STARTUP;
@@ -54,7 +54,7 @@ public VaultSettings read(JsonReader in) throws IOException {
 			switch (name) {
 				case "id" -> id = in.nextString();
 				case "path" -> path = in.nextString();
-				case "mountName" -> mountName = in.nextString();
+				case "mountName" -> displayName = in.nextString(); //YES, this is correct (legacy reasons)
 				case "winDriveLetter" -> winDriveLetter = in.nextString();
 				case "unlockAfterStartup" -> unlockAfterStartup = in.nextBoolean();
 				case "revealAfterMount" -> revealAfterMount = in.nextBoolean();
@@ -73,7 +73,7 @@ public VaultSettings read(JsonReader in) throws IOException {
 		in.endObject();
 
 		VaultSettings vaultSettings = (id == null) ? VaultSettings.withRandomId() : new VaultSettings(id);
-		vaultSettings.displayName().set(mountName);
+		vaultSettings.displayName().set(displayName);
 		vaultSettings.path().set(Paths.get(path));
 		vaultSettings.winDriveLetter().set(winDriveLetter);
 		vaultSettings.unlockAfterStartup().set(unlockAfterStartup);

File: main/keychain/src/main/java/org/cryptomator/keychain/LinuxSecretServiceKeychainAccessImpl.java
Patch:
@@ -28,6 +28,9 @@ public void storePassphrase(String key, CharSequence passphrase) throws Keychain
 			if (list == null) {
 				keyring.createItem(LABEL_FOR_SECRET_IN_KEYRING, passphrase, createAttributes(key));
 			}
+			else {
+				changePassphrase(key, passphrase);
+			}
 		} catch (IOException e) {
 			throw new KeychainAccessException(e);
 		}

File: main/ui/src/main/java/org/cryptomator/ui/vaultoptions/MountOptionsController.java
Patch:
@@ -18,6 +18,7 @@
 import javafx.stage.Stage;
 import javafx.util.StringConverter;
 import org.apache.commons.lang3.SystemUtils;
+import org.cryptomator.common.Environment;
 import org.cryptomator.common.settings.Settings;
 import org.cryptomator.common.settings.VolumeImpl;
 import org.cryptomator.common.vaults.Vault;
@@ -57,15 +58,14 @@ public class MountOptionsController implements FxController {
 	private final BooleanBinding fuseAndWindows;
 
 	@Inject
-	MountOptionsController(@VaultOptionsWindow Stage window, @VaultOptionsWindow Vault vault, Settings settings, WindowsDriveLetters windowsDriveLetters, ResourceBundle resourceBundle) {
+	MountOptionsController(@VaultOptionsWindow Stage window, @VaultOptionsWindow Vault vault, Settings settings, WindowsDriveLetters windowsDriveLetters, ResourceBundle resourceBundle, Environment environment) {
 		this.window = window;
 		this.vault = vault;
 		this.webDavAndWindows = settings.preferredVolumeImpl().isEqualTo(VolumeImpl.WEBDAV).and(osIsWindows);
 		this.windowsDriveLetters = windowsDriveLetters;
 		this.resourceBundle = resourceBundle;
 
-		System.out.println(Boolean.getBoolean("fuse.experimental"));
-		this.fuseAndWindows = settings.preferredVolumeImpl().isEqualTo(VolumeImpl.FUSE).and(osIsWindows).and(new SimpleBooleanProperty(!Boolean.getBoolean("fuse.experimental")));
+		this.fuseAndWindows = settings.preferredVolumeImpl().isEqualTo(VolumeImpl.FUSE).and(osIsWindows).and(new SimpleBooleanProperty(!environment.useExperimentalFuse()));
 	}
 
 	@FXML

File: main/ui/src/main/java/org/cryptomator/ui/controls/FontAwesome5Icon.java
Patch:
@@ -6,6 +6,7 @@
 public enum FontAwesome5Icon {
 	ANCHOR("\uF13D"), //
 	ARROW_UP("\uF062"), //
+	BUG("\uF188"), //
 	CHECK("\uF00C"), //
 	COG("\uF013"), //
 	COGS("\uF085"), //

File: main/commons/src/main/java/org/cryptomator/common/vaults/DokanyVolume.java
Patch:
@@ -22,7 +22,6 @@
 public class DokanyVolume implements Volume {
 
 	private static final Logger LOG = LoggerFactory.getLogger(DokanyVolume.class);
-	private static final int MAX_TMPMOUNTPOINT_CREATION_RETRIES = 10;
 
 	private static final String FS_TYPE_NAME = "Cryptomator File System";
 

File: main/ui/src/main/java/org/cryptomator/ui/unlock/UnlockInvalidMountPointController.java
Patch:
@@ -40,6 +40,7 @@ public String getMountPoint() {
 	public boolean getMustExist() {
 		MountPointRequirement requirement = vault.getMountPointRequirement();
 		assert requirement != MountPointRequirement.NONE; //An invalid MountPoint with no required MountPoint doesn't seem sensible
+		assert requirement != MountPointRequirement.PARENT_OPT_MOUNT_POINT; //Not implemented anywhere (yet)
 
 		return requirement == MountPointRequirement.EMPTY_MOUNT_POINT;
 	}

File: main/ui/src/main/java/org/cryptomator/ui/unlock/UnlockWorkflow.java
Patch:
@@ -162,6 +162,7 @@ private void savePasswordToSystemkeychain() {
 	private void handleInvalidMountPoint(InvalidMountPointException e) {
 		MountPointRequirement requirement = vault.getMountPointRequirement();
 		assert requirement != MountPointRequirement.NONE; //An invalid MountPoint with no required MountPoint doesn't seem sensible
+		assert requirement != MountPointRequirement.PARENT_OPT_MOUNT_POINT; //Not implemented anywhere (yet)
 
 		if (requirement == MountPointRequirement.EMPTY_MOUNT_POINT) {
 			LOG.error("Unlock failed. Mount point not an empty directory or doesn't exist: {}", e.getMessage());
@@ -174,7 +175,7 @@ private void handleInvalidMountPoint(InvalidMountPointException e) {
 		});
 	}
 
-	private void handleGenericError(Exception e) {
+	private void handleGenericError(Throwable e) {
 		LOG.error("Unlock failed for technical reasons.", e);
 		Platform.runLater(() -> {
 			errorComponent.cause(e).window(window).returnToScene(window.getScene()).build().showErrorScene();

File: main/commons/src/main/java/org/cryptomator/common/vaults/DokanyVolume.java
Patch:
@@ -49,7 +49,7 @@ public void mount(CryptoFileSystem fs, String mountFlags) throws VolumeException
 		this.mountPoint = determineMountPoint();
 		String mountName = vaultSettings.displayName().get();
 		try {
-			this.mount = mountFactory.mount(fs.getPath("/"), mountPoint, mountName, FS_TYPE_NAME, mountFlags.strip());
+			this.mount = mountFactory.mount(fs.getPath("/"), mountPoint, vaultSettings.mountName().get(), FS_TYPE_NAME, mountFlags.strip());
 		} catch (MountFailedException e) {
 			if (vaultSettings.getCustomMountPath().isPresent()) {
 				LOG.warn("Failed to mount vault into {}. Is this directory currently accessed by another process (e.g. Windows Explorer)?", mountPoint);

File: main/commons/src/main/java/org/cryptomator/common/vaults/WebDavVolume.java
Patch:
@@ -44,7 +44,7 @@ public void mount(CryptoFileSystem fs, String mountFlags) throws VolumeException
 		if (!server.isRunning()) {
 			server.start();
 		}
-		servlet = server.createWebDavServlet(fs.getPath("/"), vaultSettings.getId() + "/" + vaultSettings.displayName().get());
+		servlet = server.createWebDavServlet(fs.getPath("/"), vaultSettings.getId() + "/" + vaultSettings.mountName().get());
 		servlet.start();
 		mount();
 	}
@@ -98,7 +98,7 @@ public synchronized void unmountForced() throws VolumeException {
 
 	@Override
 	public Optional<Path> getMountPoint() {
-		return Optional.ofNullable(mountPoint);
+		return Optional.ofNullable(mountPoint); //TODO
 	}
 
 	private String getLocalhostAliasOrNull() {

File: main/commons/src/main/java/org/cryptomator/common/vaults/WindowsDriveLetters.java
Patch:
@@ -5,6 +5,7 @@
  *******************************************************************************/
 package org.cryptomator.common.vaults;
 
+import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Sets;
 import org.apache.commons.lang3.SystemUtils;
 
@@ -25,7 +26,7 @@ public final class WindowsDriveLetters {
 
 	static {
 		try (IntStream stream = IntStream.rangeClosed('C', 'Z')) {
-			C_TO_Z = stream.mapToObj(i -> String.valueOf((char) i)).collect(Collectors.toUnmodifiableSet());
+			C_TO_Z = stream.mapToObj(i -> String.valueOf((char) i)).collect(ImmutableSet.toImmutableSet());
 		}
 	}
 
@@ -51,7 +52,7 @@ public Set<String> getAvailableDriveLetters() {
 	}
 
 	public Optional<String> getAvailableDriveLetter() {
-		return getAvailableDriveLetters().stream().findAny();
+		return getAvailableDriveLetters().stream().findFirst();
 	}
 
 	public Optional<Path> getAvailableDriveLetterPath() {

File: main/ui/src/main/java/org/cryptomator/ui/preferences/VolumePreferencesController.java
Patch:
@@ -3,7 +3,6 @@
 import javafx.beans.binding.Bindings;
 import javafx.beans.binding.BooleanBinding;
 import javafx.beans.property.SimpleBooleanProperty;
-import javafx.beans.property.SimpleObjectProperty;
 import javafx.scene.control.Button;
 import javafx.scene.control.ChoiceBox;
 import javafx.scene.control.TextField;
@@ -40,9 +39,8 @@ public class VolumePreferencesController implements FxController {
 
 	public void initialize() {
 		volumeTypeChoiceBox.getItems().addAll(Volume.getCurrentSupportedAdapters());
-		//If the in the settings specified preferredVolumeImplementation isn't available, overwrite the settings to use the default VolumeImpl.WEBDAV
 		if (!volumeTypeChoiceBox.getItems().contains(settings.preferredVolumeImpl().get())) {
-			settings.preferredVolumeImpl().bind(new SimpleObjectProperty<>(VolumeImpl.WEBDAV));
+			settings.preferredVolumeImpl().set(VolumeImpl.WEBDAV);
 		}
 		volumeTypeChoiceBox.valueProperty().bindBidirectional(settings.preferredVolumeImpl());
 		volumeTypeChoiceBox.setConverter(new VolumeImplConverter());

File: main/commons/src/main/java/org/cryptomator/common/settings/VaultSettings.java
Patch:
@@ -70,7 +70,7 @@ private void deriveMountNameFromPathOrUseDefault(Path newPath) {
 		if (!mountNameSet && dirnameExists) {
 			mountName.set(normalizeMountName(newPath.getFileName().toString()));
 		} else if (!mountNameSet && !dirnameExists) {
-			mountName.set(DEFAULT_MOUNT_NAME + id);
+			mountName.set(DEFAULT_MOUNT_NAME + " " +  id);
 		} else if (mountNameSet && dirnameExists) {
 			if (mountName.get().equals(DEFAULT_MOUNT_NAME + id)) {
 				//this is okay, since this function is only executed if the path changes (aka, the vault is created or added)

File: main/commons/src/main/java/org/cryptomator/common/vaults/Vault.java
Patch:
@@ -78,7 +78,7 @@ public class Vault {
 		this.state = state;
 		this.lastKnownException = lastKnownException;
 		this.stats = stats;
-		this.displayableName = Bindings.createStringBinding(this::getDisplayableName, vaultSettings.path());
+		this.displayableName = Bindings.createStringBinding(this::getDisplayableName, vaultSettings.mountName());
 		this.displayablePath = Bindings.createStringBinding(this::getDisplayablePath, vaultSettings.path());
 		this.locked = Bindings.createBooleanBinding(this::isLocked, state);
 		this.processing = Bindings.createBooleanBinding(this::isProcessing, state);
@@ -230,8 +230,7 @@ public StringBinding displayableNameProperty() {
 	}
 
 	public String getDisplayableName() {
-		Path p = vaultSettings.path().get();
-		return p.getFileName().toString();
+		return vaultSettings.mountName().get();
 	}
 
 	public StringBinding accessPointProperty() {

File: main/ui/src/main/java/org/cryptomator/ui/controls/FontAwesome5Icon.java
Patch:
@@ -11,6 +11,7 @@ public enum FontAwesome5Icon {
 	COGS("\uF085"), //
 	COPY("\uF0C5"), //
 	CROWN("\uF521"), //
+	EDIT("\uF044"), //
 	EXCLAMATION("\uF12A"), //
 	EXCLAMATION_CIRCLE("\uF06A"), //
 	EXCLAMATION_TRIANGLE("\uF071"), //
@@ -37,6 +38,7 @@ public enum FontAwesome5Icon {
 	SPINNER("\uF110"), //
 	SYNC("\uF021"), //
 	TIMES("\uF00D"), //
+	TRASH("\uF1F8"), //
 	UNLINK("\uf127"), //
 	WRENCH("\uF0AD"), //
 	WINDOW_MINIMIZE("\uF2D1"), //

File: main/ui/src/main/java/org/cryptomator/ui/unlock/UnlockWorkflow.java
Patch:
@@ -9,7 +9,6 @@
 import org.cryptomator.common.vaults.Vault;
 import org.cryptomator.common.vaults.VaultState;
 import org.cryptomator.common.vaults.Volume;
-import org.cryptomator.cryptolib.api.CryptoException;
 import org.cryptomator.cryptolib.api.InvalidPassphraseException;
 import org.cryptomator.keychain.KeychainAccessException;
 import org.cryptomator.keychain.KeychainManager;
@@ -87,7 +86,7 @@ protected Boolean call() throws InterruptedException, IOException, Volume.Volume
 		} catch (NotDirectoryException | DirectoryNotEmptyException e) {
 			handleInvalidMountPoint(e);
 			throw e; // rethrow to trigger correct exception handling in Task
-		} catch (CryptoException | Volume.VolumeException | IOException e) {
+		} catch (Exception e) {
 			handleGenericError(e);
 			throw e; // rethrow to trigger correct exception handling in Task
 		} finally {

File: main/ui/src/main/java/org/cryptomator/ui/vaultstatistics/VaultStatisticsController.java
Patch:
@@ -51,6 +51,7 @@ public VaultStatisticsController(@VaultStatisticsWindow Stage window, ObjectProp
 	@FXML
 	public void initialize() {
 		window.setTitle(window.getTitle() + " - " + vault.get().getDisplayableName());
+		lineGraph.getData().addAll(writeData, readData);
 	}
 
 	public Vault getVault() {
@@ -64,8 +65,5 @@ private void updateReadWriteData() {
 		}
 		readData.getData().add(new XYChart.Data<Double, Double>((System.currentTimeMillis() - timeAtStartOfTracking) / 1000.0, ((getVault().getStats().bytesPerSecondReadProperty().get()) / 1024.0)));
 		writeData.getData().add(new XYChart.Data<Double, Double>((System.currentTimeMillis() - timeAtStartOfTracking) / 1000.0, ((getVault().getStats().bytesPerSecondWrittenProperty().get()) / 1024.0)));
-		lineGraph.getData().addAll(writeData, readData);
-		//TODO
-		//Exception in thread "JavaFX Application Thread" java.lang.IllegalArgumentException: Duplicate series added
 	}
 }

File: main/keychain/src/main/java/org/cryptomator/keychain/KeychainAccessStrategy.java
Patch:
@@ -29,7 +29,7 @@ interface KeychainAccessStrategy {
 	void deletePassphrase(String key) throws KeychainAccessException;
 
 	/**
-	 * Updates a passphrase with a given key.
+	 * Updates a passphrase with a given key. Noop, if there is no item for the given key.
 	 *
 	 * @param key Unique key previously used while {@link #storePassphrase(String, CharSequence) storing a passphrase}.
 	 * @param passphrase The secret to be updated in this keychain.

File: main/ui/src/main/java/org/cryptomator/ui/addvaultwizard/AddVaultSuccessController.java
Patch:
@@ -27,7 +27,7 @@ public class AddVaultSuccessController implements FxController {
 	@FXML
 	public void unlockAndClose() {
 		close();
-		fxApplication.showUnlockWindow(vault.get());
+		fxApplication.startUnlockWorkflow(vault.get());
 	}
 
 	@FXML

File: main/ui/src/main/java/org/cryptomator/ui/controls/NiceSecurePasswordField.java
Patch:
@@ -94,8 +94,8 @@ public void setPassword(char[] password) {
 		passwordField.setPassword(password);
 	}
 
-	public void swipe() {
-		passwordField.swipe();
+	public void wipe() {
+		passwordField.wipe();
 	}
 
 	public void selectAll() {

File: main/ui/src/main/java/org/cryptomator/ui/mainwindow/VaultDetailLockedController.java
Patch:
@@ -26,7 +26,7 @@ public class VaultDetailLockedController implements FxController {
 
 	@FXML
 	public void unlock() {
-		application.showUnlockWindow(vault.get());
+		application.startUnlockWorkflow(vault.get());
 	}
 
 	@FXML

File: main/ui/src/main/java/org/cryptomator/ui/migration/MigrationRunController.java
Patch:
@@ -121,7 +121,7 @@ public void migrate() {
 			} else {
 				LOG.info("Migration of '{}' succeeded.", vault.getDisplayableName());
 				vault.setState(VaultState.LOCKED);
-				passwordField.swipe();
+				passwordField.wipe();
 				window.setScene(successScene.get());
 			}
 		}).onError(InvalidPassphraseException.class, e -> {

File: main/ui/src/main/java/org/cryptomator/ui/traymenu/TrayMenuController.java
Patch:
@@ -103,7 +103,7 @@ private ActionListener createActionListenerForVault(Vault vault, Consumer<Vault>
 	}
 
 	private void unlockVault(Vault vault) {
-		fxApplicationStarter.get(true).thenAccept(app -> app.showUnlockWindow(vault));
+		fxApplicationStarter.get(true).thenAccept(app -> app.startUnlockWorkflow(vault));
 	}
 
 	private void lockVault(Vault vault) {

File: main/ui/src/test/java/org/cryptomator/ui/controls/SecurePasswordFieldTest.java
Patch:
@@ -152,7 +152,7 @@ public void testSwipe() {
 
 		CharSequence result1 = pwField.getCharacters();
 		Assertions.assertEquals("topSecret", result1.toString());
-		pwField.swipe();
+		pwField.wipe();
 		CharSequence result2 = pwField.getCharacters();
 		Assertions.assertEquals("         ", result1.toString());
 		Assertions.assertEquals("", result2.toString());

File: main/ui/src/main/java/org/cryptomator/ui/unlock/UnlockController.java
Patch:
@@ -91,8 +91,10 @@ public void unlock() {
 
 		Task<Vault> task = vaultService.createUnlockTask(vault, password);
 		passwordField.setDisable(true);
+		savePassword.setDisable(true);
 		task.setOnSucceeded(event -> {
 			passwordField.setDisable(false);
+			savePassword.setDisable(!keychainAccess.isPresent());
 			if (keychainAccess.isPresent() && savePassword.isSelected()) {
 				try {
 					keychainAccess.get().storePassphrase(vault.getId(), password);
@@ -106,6 +108,7 @@ public void unlock() {
 		});
 		task.setOnFailed(event -> {
 			passwordField.setDisable(false);
+			savePassword.setDisable(!keychainAccess.isPresent());
 			if (task.getException() instanceof InvalidPassphraseException) {
 				Animations.createShakeWindowAnimation(window).play();
 				passwordField.selectAll();

File: main/ui/src/main/java/org/cryptomator/ui/migration/MigrationRunController.java
Patch:
@@ -135,8 +135,8 @@ public void migrate() {
 			vault.setState(VaultState.NEEDS_MIGRATION);
 			missingCapability.set(e.getMissingCapability());
 			window.setScene(capabilityErrorScene.get());
-		}).onError(FileNameTooLongException.class, e -> { // including RuntimeExceptions
-			LOG.error("Migration failed for because the storage device does not support long filenames.", e);
+		}).onError(FileNameTooLongException.class, e -> {
+			LOG.error("Migration failed because the underlying file system does not support long filenames.", e);
 			vault.setState(VaultState.NEEDS_MIGRATION);
 			errorComponent.cause(e).window(window).returnToScene(startScene.get()).build().showErrorScene();
 			window.setScene(impossibleScene.get());

File: main/ui/src/main/java/org/cryptomator/ui/common/ErrorModule.java
Patch:
@@ -21,10 +21,11 @@ abstract class ErrorModule {
 	static FXMLLoaderFactory provideFxmlLoaderFactory(Map<Class<? extends FxController>, Provider<FxController>> factories, DefaultSceneFactory sceneFactory, ResourceBundle resourceBundle) {
 		return new FXMLLoaderFactory(factories, sceneFactory, resourceBundle);
 	}
-	
+
 	@Provides
 	@Named("stackTrace")
 	static String provideStackTrace(Throwable cause) {
+		// TODO deduplicate VaultDetailUnknownErrorController.java
 		ByteArrayOutputStream baos = new ByteArrayOutputStream();
 		cause.printStackTrace(new PrintStream(baos));
 		return baos.toString(StandardCharsets.UTF_8);

File: main/ui/src/main/java/org/cryptomator/ui/addvaultwizard/LocationPresets.java
Patch:
@@ -13,7 +13,7 @@
 public class LocationPresets {
 
 	private static final String USER_HOME = System.getProperty("user.home");
-	private static final String[] ICLOUDDRIVE_LOCATIONS = {"~/Library/Mobile Documents/iCloud~com~setolabs~Cryptomator/Documents"};
+	private static final String[] ICLOUDDRIVE_LOCATIONS = {"~/Library/Mobile Documents/iCloud~com~setolabs~Cryptomator/Documents", "~/iCloudDrive"};
 	private static final String[] DROPBOX_LOCATIONS = {"~/Dropbox"};
 	private static final String[] GDRIVE_LOCATIONS = {"~/Google Drive"};
 	private static final String[] ONEDRIVE_LOCATIONS = {"~/OneDrive"};

File: main/ui/src/main/java/org/cryptomator/ui/common/FxmlFile.java
Patch:
@@ -2,18 +2,17 @@
 
 public enum FxmlFile {
 	ADDVAULT_EXISTING("/fxml/addvault_existing.fxml"), //
-	ADDVAULT_GENERIC_ERROR("/fxml/addvault_generic_error.fxml"),
 	ADDVAULT_NEW_NAME("/fxml/addvault_new_name.fxml"), //
 	ADDVAULT_NEW_LOCATION("/fxml/addvault_new_location.fxml"), //
 	ADDVAULT_NEW_PASSWORD("/fxml/addvault_new_password.fxml"), //
 	ADDVAULT_NEW_RECOVERYKEY("/fxml/addvault_new_recoverykey.fxml"), //
 	ADDVAULT_SUCCESS("/fxml/addvault_success.fxml"), //
 	ADDVAULT_WELCOME("/fxml/addvault_welcome.fxml"), //
 	CHANGEPASSWORD("/fxml/changepassword.fxml"), //
+	ERROR("/fxml/error.fxml"), //
 	FORGET_PASSWORD("/fxml/forget_password.fxml"), //
 	MAIN_WINDOW("/fxml/main_window.fxml"), //
 	MIGRATION_CAPABILITY_ERROR("/fxml/migration_capability_error.fxml"), //
-	MIGRATION_GENERIC_ERROR("/fxml/migration_generic_error.fxml"), //
 	MIGRATION_RUN("/fxml/migration_run.fxml"), //
 	MIGRATION_START("/fxml/migration_start.fxml"), //
 	MIGRATION_SUCCESS("/fxml/migration_success.fxml"), //
@@ -25,7 +24,6 @@ public enum FxmlFile {
 	RECOVERYKEY_SUCCESS("/fxml/recoverykey_success.fxml"), //
 	REMOVE_VAULT("/fxml/remove_vault.fxml"), //
 	UNLOCK("/fxml/unlock.fxml"),
-	UNLOCK_GENERIC_ERROR("/fxml/unlock_generic_error.fxml"), //
 	UNLOCK_INVALID_MOUNT_POINT("/fxml/unlock_invalid_mount_point.fxml"), //
 	UNLOCK_SUCCESS("/fxml/unlock_success.fxml"), //
 	VAULT_OPTIONS("/fxml/vault_options.fxml"), //

File: main/ui/src/main/java/org/cryptomator/ui/fxapp/FxApplicationModule.java
Patch:
@@ -14,6 +14,7 @@
 import javafx.scene.image.Image;
 import org.apache.commons.lang3.SystemUtils;
 import org.cryptomator.common.vaults.Vault;
+import org.cryptomator.ui.common.ErrorComponent;
 import org.cryptomator.ui.mainwindow.MainWindowComponent;
 import org.cryptomator.ui.preferences.PreferencesComponent;
 import org.cryptomator.ui.quit.QuitComponent;
@@ -26,7 +27,7 @@
 import java.util.Collections;
 import java.util.List;
 
-@Module(includes = {UpdateCheckerModule.class}, subcomponents = {MainWindowComponent.class, PreferencesComponent.class, UnlockComponent.class, QuitComponent.class})
+@Module(includes = {UpdateCheckerModule.class}, subcomponents = {MainWindowComponent.class, PreferencesComponent.class, UnlockComponent.class, QuitComponent.class, ErrorComponent.class})
 abstract class FxApplicationModule {
 
 	@Provides

File: main/ui/src/main/java/org/cryptomator/ui/changepassword/ChangePasswordController.java
Patch:
@@ -71,7 +71,6 @@ public void finish() {
 		} catch (IOException e) {
 			// TODO show generic error screen
 			LOG.error("IO error occured during password change. Unable to perform operation.", e);
-			e.printStackTrace();
 		} catch (InvalidPassphraseException e) {
 			Animations.createShakeWindowAnimation(window).play();
 			oldPasswordField.selectAll();

File: main/ui/src/main/java/org/cryptomator/ui/common/FxmlFile.java
Patch:
@@ -1,14 +1,14 @@
 package org.cryptomator.ui.common;
 
 public enum FxmlFile {
-	ADDVAULT_WELCOME("/fxml/addvault_welcome.fxml"), //
 	ADDVAULT_EXISTING("/fxml/addvault_existing.fxml"), //
-	ADDVAULT_EXISTING_ERROR("/fxml/addvault_existing_error.fxml"),
+	ADDVAULT_GENERIC_ERROR("/fxml/addvault_generic_error.fxml"),
 	ADDVAULT_NEW_NAME("/fxml/addvault_new_name.fxml"), //
 	ADDVAULT_NEW_LOCATION("/fxml/addvault_new_location.fxml"), //
 	ADDVAULT_NEW_PASSWORD("/fxml/addvault_new_password.fxml"), //
 	ADDVAULT_NEW_RECOVERYKEY("/fxml/addvault_new_recoverykey.fxml"), //
 	ADDVAULT_SUCCESS("/fxml/addvault_success.fxml"), //
+	ADDVAULT_WELCOME("/fxml/addvault_welcome.fxml"), //
 	CHANGEPASSWORD("/fxml/changepassword.fxml"), //
 	FORGET_PASSWORD("/fxml/forget_password.fxml"), //
 	MAIN_WINDOW("/fxml/main_window.fxml"), //

File: main/ui/src/main/java/org/cryptomator/ui/mainwindow/VaultListController.java
Patch:
@@ -1,6 +1,5 @@
 package org.cryptomator.ui.mainwindow;
 
-import javafx.beans.Observable;
 import javafx.beans.binding.Bindings;
 import javafx.beans.binding.BooleanBinding;
 import javafx.beans.property.ObjectProperty;
@@ -9,7 +8,6 @@
 import javafx.collections.ObservableList;
 import javafx.fxml.FXML;
 import javafx.scene.control.ListView;
-import javafx.stage.Stage;
 import org.cryptomator.common.vaults.Vault;
 import org.cryptomator.common.vaults.VaultListManager;
 import org.cryptomator.common.vaults.VaultState;
@@ -21,7 +19,6 @@
 
 import javax.inject.Inject;
 
-//TODO: Add check if a vault in the list is invalid and add notification & controller
 @MainWindowScoped
 public class VaultListController implements FxController {
 
@@ -63,6 +60,9 @@ public void initialize() {
 	}
 
 	private void selectedVaultDidChange(@SuppressWarnings("unused") ObservableValue<? extends Vault> observableValue, @SuppressWarnings("unused") Vault oldValue, Vault newValue) {
+		if (newValue == null) {
+			return;
+		}
 		VaultState reportedState = newValue.getState();
 		switch (reportedState) {
 			case LOCKED:

File: main/ui/src/test/java/org/cryptomator/ui/addvaultwizard/ReadMeGeneratorTest.java
Patch:
@@ -37,9 +37,9 @@ public void testCreateDocument() {
 		String result = readmeGenerator.createDocument(paragraphs);
 
 		MatcherAssert.assertThat(result, CoreMatchers.startsWith("{\\rtf1\\fbidis\\ansi\\uc0\\fs32"));
-		MatcherAssert.assertThat(result, CoreMatchers.containsString("\\par {\\sa80 Dear User,}"));
-		MatcherAssert.assertThat(result, CoreMatchers.containsString("\\par {\\sa80 \\b please don't touch the \"d\" directory.}"));
-		MatcherAssert.assertThat(result, CoreMatchers.containsString("\\par {\\sa80 Thank you for your cooperation \\u55357\\u56841}"));
+		MatcherAssert.assertThat(result, CoreMatchers.containsString("{\\sa80 Dear User,}\\par"));
+		MatcherAssert.assertThat(result, CoreMatchers.containsString("{\\sa80 \\b please don't touch the \"d\" directory.}\\par "));
+		MatcherAssert.assertThat(result, CoreMatchers.containsString("{\\sa80 Thank you for your cooperation \\u55357\\u56841}\\par"));
 		MatcherAssert.assertThat(result, CoreMatchers.endsWith("}"));
 	}
 

File: main/ui/src/main/java/org/cryptomator/ui/recoverykey/WordEncoder.java
Patch:
@@ -79,8 +79,7 @@ public String encodePadded(byte[] input) {
 	 * @throws IllegalArgumentException If the encoded string doesn't consist of a multiple of two words or one of the words is unknown to this encoder.
 	 */
 	public byte[] decode(String encoded) {
-		Preconditions.checkArgument(!Strings.isNullOrEmpty(encoded));
-		List<String> splitted = Splitter.on(DELIMITER).omitEmptyStrings().splitToList(encoded);
+		List<String> splitted = Splitter.on(DELIMITER).omitEmptyStrings().splitToList(Strings.nullToEmpty(encoded));
 		Preconditions.checkArgument(splitted.size() % 2 == 0, "%s needs to be a multiple of two words", encoded);
 		byte[] result = new byte[splitted.size() / 2 * 3];
 		for (int i = 0; i < splitted.size(); i+=2) {

File: main/ui/src/main/java/org/cryptomator/ui/common/FxmlFile.java
Patch:
@@ -12,6 +12,7 @@ public enum FxmlFile {
 	CHANGEPASSWORD("/fxml/changepassword.fxml"), //
 	FORGET_PASSWORD("/fxml/forget_password.fxml"), //
 	MAIN_WINDOW("/fxml/main_window.fxml"), //
+	MIGRATION_CAPABILITY_ERROR("/fxml/migration_capability_error.fxml"), //
 	MIGRATION_GENERIC_ERROR("/fxml/migration_generic_error.fxml"), //
 	MIGRATION_RUN("/fxml/migration_run.fxml"), //
 	MIGRATION_START("/fxml/migration_start.fxml"), //

File: main/ui/src/main/java/org/cryptomator/ui/common/FxmlFile.java
Patch:
@@ -12,6 +12,7 @@ public enum FxmlFile {
 	CHANGEPASSWORD("/fxml/changepassword.fxml"), //
 	FORGET_PASSWORD("/fxml/forget_password.fxml"), //
 	MAIN_WINDOW("/fxml/main_window.fxml"), //
+	MIGRATION_GENERIC_ERROR("/fxml/migration_generic_error.fxml"), //
 	MIGRATION_RUN("/fxml/migration_run.fxml"), //
 	MIGRATION_START("/fxml/migration_start.fxml"), //
 	MIGRATION_SUCCESS("/fxml/migration_success.fxml"), //

File: main/ui/src/main/java/org/cryptomator/ui/common/StackTraceController.java
Patch:
@@ -12,7 +12,7 @@ public StackTraceController(Throwable cause) {
 		this.stackTrace = provideStackTrace(cause);
 	}
 
-	static String provideStackTrace(Throwable cause) {
+	private static String provideStackTrace(Throwable cause) {
 		ByteArrayOutputStream baos = new ByteArrayOutputStream();
 		cause.printStackTrace(new PrintStream(baos));
 		return baos.toString(StandardCharsets.UTF_8);

File: main/ui/src/main/java/org/cryptomator/ui/common/StackTraceController.java
Patch:
@@ -8,11 +8,11 @@ public class StackTraceController implements FxController {
 
 	private final String stackTrace;
 
-	public StackTraceController(Exception cause) {
+	public StackTraceController(Throwable cause) {
 		this.stackTrace = provideStackTrace(cause);
 	}
 
-	static String provideStackTrace(Exception cause) {
+	static String provideStackTrace(Throwable cause) {
 		ByteArrayOutputStream baos = new ByteArrayOutputStream();
 		cause.printStackTrace(new PrintStream(baos));
 		return baos.toString(StandardCharsets.UTF_8);

File: main/ui/src/main/java/org/cryptomator/ui/unlock/UnlockModule.java
Patch:
@@ -50,7 +50,7 @@ static Stage provideStage(ResourceBundle resourceBundle, @Named("windowIcons") L
 	@Provides
 	@Named("genericErrorCause")
 	@UnlockScoped
-	static ObjectProperty<Exception> provideGenericErrorCause() {
+	static ObjectProperty<Throwable> provideGenericErrorCause() {
 		return new SimpleObjectProperty<>();
 	}
 
@@ -109,7 +109,7 @@ static Scene provideGenericErrorScene(@UnlockWindow FXMLLoaderFactory fxmlLoader
 	@Provides
 	@IntoMap
 	@FxControllerKey(StackTraceController.class)
-	static FxController provideStackTraceController(@Named("genericErrorCause") ObjectProperty<Exception> errorCause) {
+	static FxController provideStackTraceController(@Named("genericErrorCause") ObjectProperty<Throwable> errorCause) {
 		return new StackTraceController(errorCause.get());
 	}
 

File: main/launcher/src/main/java/org/cryptomator/launcher/Cryptomator.java
Patch:
@@ -5,7 +5,6 @@
  *******************************************************************************/
 package org.cryptomator.launcher;
 
-import javafx.application.Platform;
 import org.apache.commons.lang3.SystemUtils;
 import org.cryptomator.logging.DebugMode;
 import org.cryptomator.logging.LoggerConfiguration;
@@ -91,7 +90,6 @@ private int runGuiApplication() {
 		try {
 			uiLauncher.launch();
 			shutdownLatch.await();
-			Platform.exit();
 			LOG.info("UI shut down");
 			return 0;
 		} catch (InterruptedException e) {

File: main/launcher/src/main/java/org/cryptomator/launcher/IpcProtocolImpl.java
Patch:
@@ -8,6 +8,7 @@
 import javax.inject.Named;
 import javax.inject.Singleton;
 import java.util.Arrays;
+import java.util.Collections;
 import java.util.concurrent.BlockingQueue;
 import java.util.stream.Stream;
 
@@ -27,7 +28,7 @@ public IpcProtocolImpl(FileOpenRequestHandler fileOpenRequestHandler, @Named("la
 
 	@Override
 	public void revealRunningApp() {
-		launchEventQueue.add(new AppLaunchEvent(AppLaunchEvent.EventType.REVEAL_APP, Stream.empty()));
+		launchEventQueue.add(new AppLaunchEvent(AppLaunchEvent.EventType.REVEAL_APP, Collections.emptyList()));
 	}
 
 	@Override

File: main/ui/src/main/java/org/cryptomator/ui/controls/FontAwesome5Icon.java
Patch:
@@ -33,6 +33,7 @@ public enum FontAwesome5Icon {
 	SYNC("\uF021"), //
 	TIMES("\uF00D"), //
 	WRENCH("\uF0AD"), //
+	WINDOW_MINIMIZE("\uF2D1"), //
 	;
 
 	private final String unicode;

File: main/ui/src/main/java/org/cryptomator/ui/preferences/AutoStartModule.java
Patch:
@@ -16,8 +16,8 @@ public static Optional<AutoStartStrategy> provideAutoStartStrategy(Optional<MacF
 		if (SystemUtils.IS_OS_MAC_OSX && macFunctions.isPresent()) {
 			return Optional.of(new AutoStartMacStrategy(macFunctions.get()));
 		} else if (SystemUtils.IS_OS_WINDOWS) {
-			// TODO: add windows support
-			return Optional.empty();
+			Optional<String> exeName = ProcessHandle.current().info().command();
+			return exeName.map(AutoStartWinStrategy::new);
 		} else {
 			return Optional.empty();
 		}

File: main/ui/src/main/java/org/cryptomator/ui/common/FxmlFile.java
Patch:
@@ -22,6 +22,7 @@ public enum FxmlFile {
 	REMOVE_VAULT("/fxml/remove_vault.fxml"), //
 	UNLOCK("/fxml/unlock.fxml"),
 	UNLOCK_GENERIC_ERROR("/fxml/unlock_generic_error.fxml"), //
+	UNLOCK_INVALID_MOUNT_POINT("/fxml/unlock_invalid_mount_point.fxml"), //
 	UNLOCK_SUCCESS("/fxml/unlock_success.fxml"), //
 	VAULT_OPTIONS("/fxml/vault_options.fxml"), //
 	WRONGFILEALERT("/fxml/wrongfilealert.fxml");

File: main/commons/src/main/java/org/cryptomator/common/vaults/WindowsDriveLetters.java
Patch:
@@ -45,7 +45,7 @@ public Set<String> getOccupiedDriveLetters() {
 			return Set.of();
 		} else {
 			Iterable<Path> rootDirs = FileSystems.getDefault().getRootDirectories();
-			return StreamSupport.stream(rootDirs.spliterator(), false).map(Path::toString).collect(Collectors.toSet());
+			return StreamSupport.stream(rootDirs.spliterator(), false).map(p -> p.toString().substring(0,1)).collect(Collectors.toSet());
 		}
 	}
 

File: main/ui/src/main/java/org/cryptomator/ui/common/FxmlFile.java
Patch:
@@ -3,6 +3,7 @@
 public enum FxmlFile {
 	ADDVAULT_WELCOME("/fxml/addvault_welcome.fxml"), //
 	ADDVAULT_EXISTING("/fxml/addvault_existing.fxml"), //
+	ADDVAULT_EXISTING_ERROR("/fxml/addvault_existing_error.fxml"),
 	ADDVAULT_NEW_NAME("/fxml/addvault_new_name.fxml"), //
 	ADDVAULT_NEW_LOCATION("/fxml/addvault_new_location.fxml"), //
 	ADDVAULT_NEW_PASSWORD("/fxml/addvault_new_password.fxml"), //

File: main/ui/src/main/java/org/cryptomator/ui/controls/FontAwesome5Icon.java
Patch:
@@ -9,6 +9,7 @@ public enum FontAwesome5Icon {
 	CHECK("\uF00C"), //
 	COG("\uF013"), //
 	COGS("\uF085"), //
+	EXCLAMATION("\uF12A"),
 	EXCLAMATION_TRIANGLE("\uF071"), //
 	EYE("\uF06E"), //
 	EYE_SLASH("\uF070"), //

File: main/ui/src/main/java/org/cryptomator/ui/common/PasswordStrengthUtil.java
Patch:
@@ -31,8 +31,7 @@ public class PasswordStrengthUtil {
 	public PasswordStrengthUtil(ResourceBundle resourceBundle) {
 		this.resourceBundle = resourceBundle;
 		this.zxcvbn = new Zxcvbn();
-		this.sanitizedInputs = new ArrayList<>();
-		this.sanitizedInputs.add("cryptomator");
+		this.sanitizedInputs = List.of("cryptomator");
 	}
 
 	public int computeRate(String password) {

File: main/commons/src/main/java/org/cryptomator/common/Environment.java
Patch:
@@ -28,6 +28,7 @@ public class Environment {
 
 	@Inject
 	public Environment() {
+		LOG.debug("java.library.path: {}", System.getProperty("java.library.path"));
 		LOG.debug("user.language: {}", System.getProperty("user.language"));
 		LOG.debug("user.region: {}", System.getProperty("user.region"));
 		LOG.debug("logback.configurationFile: {}", System.getProperty("logback.configurationFile"));

File: main/commons/src/main/java/org/cryptomator/common/settings/SettingsProvider.java
Patch:
@@ -17,7 +17,6 @@
 import org.slf4j.LoggerFactory;
 
 import javax.inject.Inject;
-import javax.inject.Provider;
 import javax.inject.Singleton;
 import java.io.IOException;
 import java.io.InputStream;
@@ -38,10 +37,11 @@
 import java.util.concurrent.ScheduledFuture;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicReference;
+import java.util.function.Supplier;
 import java.util.stream.Stream;
 
 @Singleton
-public class SettingsProvider implements Provider<Settings> {
+public class SettingsProvider implements Supplier<Settings> {
 
 	private static final Logger LOG = LoggerFactory.getLogger(SettingsProvider.class);
 	private static final long SAVE_DELAY_MS = 1000;

File: main/commons/src/main/java/org/cryptomator/common/vaults/DefaultMountFlags.java
Patch:
@@ -1,4 +1,4 @@
-package org.cryptomator.ui.model;
+package org.cryptomator.common.vaults;
 
 import javax.inject.Qualifier;
 import java.lang.annotation.Documented;

File: main/commons/src/main/java/org/cryptomator/common/vaults/PerVault.java
Patch:
@@ -1,4 +1,4 @@
-package org.cryptomator.ui.model;
+package org.cryptomator.common.vaults;
 
 import javax.inject.Scope;
 import java.lang.annotation.Documented;

File: main/commons/src/main/java/org/cryptomator/common/vaults/WindowsDriveLetters.java
Patch:
@@ -3,14 +3,14 @@
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the accompanying LICENSE file.
  *******************************************************************************/
-package org.cryptomator.ui.model;
+package org.cryptomator.common.vaults;
 
 import org.apache.commons.lang3.SystemUtils;
-import org.cryptomator.common.FxApplicationScoped;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import javax.inject.Inject;
+import javax.inject.Singleton;
 import java.nio.file.FileSystems;
 import java.nio.file.Path;
 import java.util.Set;
@@ -19,7 +19,7 @@
 import java.util.stream.IntStream;
 import java.util.stream.StreamSupport;
 
-@FxApplicationScoped
+@Singleton
 public final class WindowsDriveLetters {
 
 	private static final Logger LOG = LoggerFactory.getLogger(WindowsDriveLetters.class);

File: main/commons/src/test/java/org/cryptomator/common/settings/SettingsJsonAdapterTest.java
Patch:
@@ -30,7 +30,7 @@ public void testDeserialize() throws IOException {
 		Assertions.assertEquals(2, settings.getDirectories().size());
 		Assertions.assertEquals(8080, settings.port().get());
 		Assertions.assertEquals(42, settings.numTrayNotifications().get());
-		Assertions.assertEquals("dav", settings.preferredGvfsScheme().get());
+		Assertions.assertEquals(WebDavUrlScheme.DAV, settings.preferredGvfsScheme().get());
 		Assertions.assertEquals(VolumeImpl.FUSE, settings.preferredVolumeImpl().get());
 	}
 

File: main/launcher/src/main/java/org/cryptomator/launcher/CryptomatorComponent.java
Patch:
@@ -3,15 +3,14 @@
 import dagger.Component;
 import org.cryptomator.common.CommonsModule;
 import org.cryptomator.logging.LoggerModule;
+import org.cryptomator.ui.launcher.UiLauncherModule;
 
 import javax.inject.Singleton;
 
 @Singleton
-@Component(modules = {CryptomatorModule.class, CommonsModule.class, LoggerModule.class})
+@Component(modules = {CryptomatorModule.class, CommonsModule.class, LoggerModule.class, UiLauncherModule.class})
 public interface CryptomatorComponent {
 
 	Cryptomator application();
 
-	FxApplicationComponent.Builder fxApplicationComponent();
-
 }

File: main/launcher/src/main/java/org/cryptomator/launcher/IpcProtocol.java
Patch:
@@ -10,6 +10,8 @@
 
 interface IpcProtocol extends Remote {
 
-	void handleLaunchArgs(String[] args) throws RemoteException;
+	void revealRunningApp() throws RemoteException;
+
+	void handleLaunchArgs(String... args) throws RemoteException;
 
 }
\ No newline at end of file

File: main/launcher/src/test/java/org/cryptomator/launcher/FileOpenRequestHandlerTest.java
Patch:
@@ -5,7 +5,7 @@
  *******************************************************************************/
 package org.cryptomator.launcher;
 
-import org.cryptomator.ui.model.AppLaunchEvent;
+import org.cryptomator.ui.launcher.AppLaunchEvent;
 import org.hamcrest.CoreMatchers;
 import org.hamcrest.MatcherAssert;
 import org.junit.jupiter.api.Assertions;
@@ -64,7 +64,7 @@ public void testOpenArgsWithIncorrectPaths() throws IOException {
 	@Test
 	@DisplayName("./cryptomator.exe foo (with full event queue)")
 	public void testOpenArgsWithFullQueue() throws IOException {
-		queue.add(new AppLaunchEvent(Stream.empty()));
+		queue.add(new AppLaunchEvent(AppLaunchEvent.EventType.OPEN_FILE, Stream.empty()));
 		Assumptions.assumeTrue(queue.remainingCapacity() == 0);
 
 		inTest.handleLaunchArgs(new String[]{"foo"});

File: main/ui/src/main/java/org/cryptomator/ui/common/Tasks.java
Patch:
@@ -3,7 +3,7 @@
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the accompanying LICENSE file.
  *******************************************************************************/
-package org.cryptomator.ui.util;
+package org.cryptomator.ui.common;
 
 import java.util.ArrayList;
 import java.util.List;

File: main/ui/src/main/java/org/cryptomator/ui/fxapp/FxApplicationScoped.java
Patch:
@@ -1,4 +1,4 @@
-package org.cryptomator.common;
+package org.cryptomator.ui.fxapp;
 
 import javax.inject.Scope;
 import java.lang.annotation.Documented;

File: main/ui/src/main/java/org/cryptomator/ui/l10n/Localization.java
Patch:
@@ -7,7 +7,7 @@
 
 import com.google.common.collect.Sets;
 import org.apache.commons.lang3.StringUtils;
-import org.cryptomator.common.FxApplicationScoped;
+import org.cryptomator.ui.fxapp.FxApplicationScoped;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: main/ui/src/main/java/org/cryptomator/ui/fxapp/UpdateChecker.java
Patch:
@@ -51,11 +51,13 @@ public void checkForUpdatesNow() {
 	}
 
 	private void startCheckingForUpdates(Duration initialDelay) {
+		updateCheckerService.cancel();
+		updateCheckerService.reset();
 		updateCheckerService.setDelay(initialDelay);
 		updateCheckerService.setOnRunning(this::checkStarted);
 		updateCheckerService.setOnSucceeded(this::checkSucceeded);
 		updateCheckerService.setOnFailed(this::checkFailed);
-		updateCheckerService.restart();
+		updateCheckerService.start();
 	}
 
 	private void checkStarted(WorkerStateEvent event) {

File: main/launcher/src/main/java/org/cryptomator/launcher/FileOpenRequestHandler.java
Patch:
@@ -34,7 +34,7 @@ class FileOpenRequestHandler {
 	@Inject
 	public FileOpenRequestHandler(@Named("launchEventQueue") BlockingQueue<AppLaunchEvent> launchEventQueue) {
 		this.launchEventQueue = launchEventQueue;
-		if (Desktop.getDesktop().isSupported(Desktop.Action.APP_OPEN_FILE)) {
+		if (Desktop.isDesktopSupported() && Desktop.getDesktop().isSupported(Desktop.Action.APP_OPEN_FILE)) {
 			Desktop.getDesktop().setOpenFileHandler(this::openFiles);
 		}
 	}

File: main/ui/src/main/java/org/cryptomator/ui/controls/SecurePasswordField.java
Patch:
@@ -134,7 +134,7 @@ private void updateContainingNonPrintableChars() {
 	 */
 	boolean containsNonPrintableCharacters() {
 		for (int i = 0; i < length; i++) {
-			if (Character.isDigit(content[i])) {
+			if (Character.isISOControl(content[i])) {
 				return true;
 			}
 		}

File: main/commons/src/main/java/org/cryptomator/common/Environment.java
Patch:
@@ -28,6 +28,7 @@ public class Environment {
 
 	@Inject
 	public Environment() {
+		LOG.debug("java.library.path: {}", System.getProperty("java.library.path"));
 		LOG.debug("user.language: {}", System.getProperty("user.language"));
 		LOG.debug("user.region: {}", System.getProperty("user.region"));
 		LOG.debug("logback.configurationFile: {}", System.getProperty("logback.configurationFile"));

File: main/ui/src/main/java/org/cryptomator/ui/addvaultwizard/CreateNewVaultPasswordController.java
Patch:
@@ -28,7 +28,7 @@
 import org.cryptomator.ui.common.FxmlScene;
 import org.cryptomator.ui.common.Tasks;
 import org.cryptomator.ui.controls.FontAwesome5IconView;
-import org.cryptomator.ui.controls.SecPasswordField;
+import org.cryptomator.ui.controls.NiceSecurePasswordField;
 import org.cryptomator.ui.util.PasswordStrengthUtil;
 import org.fxmisc.easybind.EasyBind;
 import org.slf4j.Logger;
@@ -71,8 +71,8 @@ public class CreateNewVaultPasswordController implements FxController {
 	private final BooleanProperty readyToCreateVault;
 	private final ObjectBinding<ContentDisplay> createVaultButtonState;
 
-	public SecPasswordField passwordField;
-	public SecPasswordField reenterField;
+	public NiceSecurePasswordField passwordField;
+	public NiceSecurePasswordField reenterField;
 	public Label passwordStrengthLabel;
 	public HBox passwordMatchBox;
 	public FontAwesome5IconView checkmark;

File: main/ui/src/main/java/org/cryptomator/ui/controllers/InitializeController.java
Patch:
@@ -20,7 +20,7 @@
 import javafx.scene.control.Label;
 import javafx.scene.layout.GridPane;
 import javafx.scene.layout.Region;
-import org.cryptomator.ui.controls.SecPasswordField;
+import org.cryptomator.ui.controls.SecurePasswordField;
 import org.cryptomator.ui.l10n.Localization;
 import org.cryptomator.common.vaults.Vault;
 import org.cryptomator.ui.util.PasswordStrengthUtil;
@@ -51,10 +51,10 @@ public InitializeController(Localization localization, PasswordStrengthUtil stre
 	}
 
 	@FXML
-	private SecPasswordField passwordField;
+	private SecurePasswordField passwordField;
 
 	@FXML
-	private SecPasswordField retypePasswordField;
+	private SecurePasswordField retypePasswordField;
 
 	@FXML
 	private Button okButton;

File: main/ui/src/main/java/org/cryptomator/ui/controllers/UnlockController.java
Patch:
@@ -41,7 +41,7 @@
 import org.cryptomator.cryptolib.api.UnsupportedVaultFormatException;
 import org.cryptomator.keychain.KeychainAccess;
 import org.cryptomator.keychain.KeychainAccessException;
-import org.cryptomator.ui.controls.SecPasswordField;
+import org.cryptomator.ui.controls.SecurePasswordField;
 import org.cryptomator.ui.l10n.Localization;
 import org.cryptomator.common.vaults.Vault;
 import org.cryptomator.common.vaults.WindowsDriveLetters;
@@ -99,7 +99,7 @@ public UnlockController(Application app, @Named("mainWindow") Stage mainWindow,
 	}
 
 	@FXML
-	private SecPasswordField passwordField;
+	private SecurePasswordField passwordField;
 
 	@FXML
 	private Button advancedOptionsButton;

File: main/ui/src/main/java/org/cryptomator/ui/controllers/UpgradeController.java
Patch:
@@ -21,7 +21,7 @@
 import javafx.scene.control.Label;
 import javafx.scene.control.ProgressIndicator;
 import javafx.scene.layout.GridPane;
-import org.cryptomator.ui.controls.SecPasswordField;
+import org.cryptomator.ui.controls.SecurePasswordField;
 import org.cryptomator.ui.model.upgrade.UpgradeStrategies;
 import org.cryptomator.ui.model.upgrade.UpgradeStrategy;
 import org.cryptomator.ui.model.upgrade.UpgradeStrategy.UpgradeFailedException;
@@ -50,7 +50,7 @@ public UpgradeController(UpgradeStrategies strategies, ExecutorService executor)
 	private Label upgradeMsgLabel;
 
 	@FXML
-	private SecPasswordField passwordField;
+	private SecurePasswordField passwordField;
 
 	@FXML
 	private CheckBox confirmationCheckbox;

File: main/ui/src/main/java/org/cryptomator/ui/controls/FontAwesome5Icon.java
Patch:
@@ -5,11 +5,13 @@
  */
 public enum FontAwesome5Icon {
 	ANCHOR("\uF13D"), //
+	ARROW_ALT_UP("\uF357"), //
 	CHECK("\uF00C"), //
 	COG("\uF013"), //
 	COGS("\uF085"), //
 	EXCLAMATION_TRIANGLE("\uF071"), //
 	EYE("\uF06E"), //
+	EYE_SLASH("\uF070"), //
 	FOLDER_OPEN("\uF07C"), //
 	HDD("\uF0A0"), //
 	KEY("\uF084"), //

File: main/ui/src/main/java/org/cryptomator/ui/unlock/UnlockController.java
Patch:
@@ -29,7 +29,8 @@
 import org.cryptomator.ui.common.FxmlFile;
 import org.cryptomator.ui.common.FxmlScene;
 import org.cryptomator.ui.common.Tasks;
-import org.cryptomator.ui.controls.SecPasswordField;
+import org.cryptomator.ui.controls.NiceSecurePasswordField;
+import org.cryptomator.ui.controls.SecurePasswordField;
 import org.cryptomator.ui.util.DialogBuilderUtil;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -55,7 +56,7 @@ public class UnlockController implements FxController {
 	private final ResourceBundle resourceBundle;
 	private final Lazy<Scene> successScene;
 	private final BooleanProperty unlockButtonDisabled;
-	public SecPasswordField passwordField;
+	public NiceSecurePasswordField passwordField;
 	public CheckBox savePassword;
 
 	@Inject

File: main/ui/src/test/java/org/cryptomator/ui/controls/SecurePasswordFieldTest.java
Patch:
@@ -12,9 +12,9 @@
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
 
-class SecPasswordFieldTest {
+class SecurePasswordFieldTest {
 
-	private SecPasswordField pwField = new SecPasswordField();
+	private SecurePasswordField pwField = new SecurePasswordField();
 
 	@BeforeAll
 	static void initJavaFx() throws InterruptedException {

File: main/keychain/src/main/java/org/cryptomator/keychain/KeychainAccessStrategy.java
Patch:
@@ -9,6 +9,8 @@ interface KeychainAccessStrategy extends KeychainAccess {
 
 	/**
 	 * @return <code>true</code> if this KeychainAccessStrategy works on the current machine.
+	 * @implNote This method must not throw any exceptions and should fail fast
+	 * returning <code>false</code> if it can't determine availability of the checked strategy
 	 */
 	boolean isSupported();
 

File: main/keychain/src/main/java/org/cryptomator/keychain/LinuxSecretServiceKeychainAccessImpl.java
Patch:
@@ -14,7 +14,7 @@ public boolean isSupported() {
 		try (@SuppressWarnings("unused") SimpleCollection keyring = new SimpleCollection()) {
 			// seems like we're able to access the keyring.
 			return true;
-		} catch (IOException e) {
+		} catch (IOException | RuntimeException e) {
 			return false;
 		}
 	}

File: main/ui/src/main/java/org/cryptomator/ui/addvaultwizard/CreateNewVaultNameController.java
Patch:
@@ -59,7 +59,7 @@ public void next() {
 	}
 
 	/**
-	 * Checks if {@link CreateNewVaultNameController#vaultName}is a valid directory name in the OS by creating and deleting a directory with the giving name in the temporary section of the OS
+	 * Checks if {@link CreateNewVaultNameController#vaultName}is a valid directory name in the OS by creating and deleting a directory with the given name in the temporary section of the OS
 	 * TODO: Logging
 	 *
 	 * @return true, if a directory with the name already exists or can be created

File: main/ui/src/main/java/org/cryptomator/ui/traymenu/TrayMenuController.java
Patch:
@@ -57,7 +57,7 @@ public void initTrayMenu() {
 			Desktop.getDesktop().setPreferencesHandler(this::showPreferencesWindow);
 		}
 
-		// register preferences shortcut
+		// register quit handler
 		if (Desktop.getDesktop().isSupported(Desktop.Action.APP_QUIT_HANDLER)) {
 			Desktop.getDesktop().setQuitHandler(this::handleQuitRequest);
 		}

File: main/ui/src/main/java/org/cryptomator/ui/common/FxmlFile.java
Patch:
@@ -8,6 +8,7 @@ public enum FxmlFile {
 	ADDVAULT_NEW_LOCATION("/fxml/addvault_new_location.fxml"), //
 	ADDVAULT_NEW_PASSWORD("/fxml/addvault_new_password.fxml"), //
 	PREFERENCES("/fxml/preferences.fxml"), //
+	QUIT("/fxml/quit.fxml"),
 	UNLOCK("/fxml/unlock2.fxml"), // TODO rename
 	UNLOCK_SUCCESS("/fxml/unlock_success.fxml"),
 	VAULT_OPTIONS("/fxml/vault_options.fxml");

File: main/ui/src/main/java/org/cryptomator/ui/fxapp/FxApplicationModule.java
Patch:
@@ -15,11 +15,12 @@
 import org.cryptomator.keychain.KeychainModule;
 import org.cryptomator.ui.mainwindow.MainWindowComponent;
 import org.cryptomator.ui.preferences.PreferencesComponent;
+import org.cryptomator.ui.quit.QuitComponent;
 import org.cryptomator.ui.unlock.UnlockComponent;
 
 import java.util.ResourceBundle;
 
-@Module(includes = {KeychainModule.class, UpdateCheckerModule.class}, subcomponents = {MainWindowComponent.class, PreferencesComponent.class, UnlockComponent.class})
+@Module(includes = {KeychainModule.class, UpdateCheckerModule.class}, subcomponents = {MainWindowComponent.class, PreferencesComponent.class, UnlockComponent.class, QuitComponent.class})
 abstract class FxApplicationModule {
 
 	@Binds

File: main/ui/src/main/java/org/cryptomator/ui/fxapp/UpdateCheckerModule.java
Patch:
@@ -24,6 +24,7 @@ public abstract class UpdateCheckerModule {
 
 	private static final URI LATEST_VERSION_URI = URI.create("https://api.cryptomator.org/updates/latestVersion.json");
 	private static final Duration UPDATE_CHECK_INTERVAL = Duration.hours(3);
+	private static final Duration DISABLED_UPDATE_CHECK_INTERVAL = Duration.hours(100000); // Duration.INDEFINITE leads to overflows...
 
 	@Provides
 	@Named("latestVersion")
@@ -56,7 +57,7 @@ static HttpRequest provideCheckForUpdatesRequest(@Named("applicationVersion") Op
 	@Named("checkForUpdatesInterval")
 	@FxApplicationScoped
 	static ObjectBinding<Duration> provideCheckForUpdateInterval(Settings settings) {
-		return Bindings.when(settings.checkForUpdates()).then(UPDATE_CHECK_INTERVAL).otherwise(Duration.INDEFINITE);
+		return Bindings.when(settings.checkForUpdates()).then(UPDATE_CHECK_INTERVAL).otherwise(DISABLED_UPDATE_CHECK_INTERVAL);
 	}
 
 	@Provides

File: main/ui/src/main/java/org/cryptomator/ui/preferences/PreferencesModule.java
Patch:
@@ -35,7 +35,6 @@ static Stage provideStage(ResourceBundle resourceBundle) {
 		stage.setTitle(resourceBundle.getString("preferences.title"));
 		stage.setMinWidth(400);
 		stage.setMinHeight(300);
-		stage.initModality(Modality.APPLICATION_MODAL);
 		return stage;
 	}
 

File: main/ui/src/main/java/org/cryptomator/ui/fxapp/FxApplicationModule.java
Patch:
@@ -19,7 +19,7 @@
 
 import java.util.ResourceBundle;
 
-@Module(includes = {KeychainModule.class}, subcomponents = {MainWindowComponent.class, PreferencesComponent.class, UnlockComponent.class})
+@Module(includes = {KeychainModule.class, UpdateCheckerModule.class}, subcomponents = {MainWindowComponent.class, PreferencesComponent.class, UnlockComponent.class})
 abstract class FxApplicationModule {
 
 	@Binds
@@ -31,13 +31,13 @@ abstract class FxApplicationModule {
 	static ObjectProperty<Vault> provideSelectedVault() {
 		return new SimpleObjectProperty<>();
 	}
-	
+
 	@Provides
 	@FxApplicationScoped
 	static ResourceBundle provideLocalization() {
 		return ResourceBundle.getBundle("i18n.strings");
 	}
-	
+
 	@Provides
 	static MainWindowComponent provideMainWindowComponent(MainWindowComponent.Builder builder) {
 		return builder.build();

File: main/ui/src/main/java/org/cryptomator/ui/traymenu/TrayMenuController.java
Patch:
@@ -48,6 +48,7 @@ public void initTrayMenu() {
 		
 		// show window on start?
 		if (!settings.startHidden().get()) {
+			// TODO: schedule async to not delay tray menu initialization
 			showMainWindow(null);
 		}
 	}

File: main/ui/src/main/java/org/cryptomator/ui/addvaultwizard/AddVaultWelcomeController.java
Patch:
@@ -20,7 +20,7 @@ public class AddVaultWelcomeController implements FxController {
 	private final Lazy<Scene> createNewVaultScene;
 
 	@Inject
-	AddVaultWelcomeController(@AddVaultWizard Stage window, @FxmlScene(FxmlFile.ADDVAULT_EXISTING) Lazy<Scene> chooseExistingVaultScene, @FxmlScene(FxmlFile.ADDVAULT_NEW) Lazy<Scene> createNewVaultScene) {
+	AddVaultWelcomeController(@AddVaultWizard Stage window, @FxmlScene(FxmlFile.ADDVAULT_EXISTING) Lazy<Scene> chooseExistingVaultScene, @FxmlScene(FxmlFile.ADDVAULT_NEW_NAME) Lazy<Scene> createNewVaultScene) {
 		this.window = window;
 		this.chooseExistingVaultScene = chooseExistingVaultScene;
 		this.createNewVaultScene = createNewVaultScene;

File: main/ui/src/main/java/org/cryptomator/ui/addvaultwizard/CreateNewVaultNameController.java
Patch:
@@ -21,7 +21,7 @@
  * TODO: Add trim() filter to vaultName
  */
 @AddVaultWizardScoped
-public class CreateNewVaultController implements FxController {
+public class CreateNewVaultNameController implements FxController {
 
 	public TextField textField;
 	private final Stage window;
@@ -30,7 +30,7 @@ public class CreateNewVaultController implements FxController {
 	private final ResourceBundle resourceBundle;
 
 	@Inject
-	CreateNewVaultController(@AddVaultWizard Stage window, @FxmlScene(FxmlFile.ADDVAULT_WELCOME) Lazy<Scene> welcomeScene, StringProperty vaultName, ResourceBundle resourceBundle) {
+	CreateNewVaultNameController(@AddVaultWizard Stage window, @FxmlScene(FxmlFile.ADDVAULT_WELCOME) Lazy<Scene> welcomeScene, StringProperty vaultName, ResourceBundle resourceBundle) {
 		this.window = window;
 		this.welcomeScene = welcomeScene;
 		this.vaultName = vaultName;
@@ -57,7 +57,7 @@ public void next() {
 	}
 
 	/**
-	 * Checks if {@link CreateNewVaultController#vaultName}is a valid directory name in the OS by creating and deleting a directory with the giving name in the temporary section of the OS
+	 * Checks if {@link CreateNewVaultNameController#vaultName}is a valid directory name in the OS by creating and deleting a directory with the giving name in the temporary section of the OS
 	 * TODO: Logging
 	 *
 	 * @return true, if a directory with the name already exists or can be created

File: main/ui/src/main/java/org/cryptomator/ui/common/FxmlFile.java
Patch:
@@ -4,7 +4,7 @@ public enum FxmlFile {
 	MAIN_WINDOW("/fxml/main_window.fxml"), //
 	ADDVAULT_WELCOME("/fxml/addvault_welcome.fxml"), //
 	ADDVAULT_EXISTING("/fxml/addvault_existing.fxml"), //
-	ADDVAULT_NEW("/fxml/addvault_new.fxml"), //
+	ADDVAULT_NEW_NAME("/fxml/addvault_new_name.fxml"), //
 	PREFERENCES("/fxml/preferences.fxml"), //
 	UNLOCK("/fxml/unlock2.fxml"), // TODO rename
 	UNLOCK_SUCCESS("/fxml/unlock_success.fxml"),

File: main/commons/src/test/java/org/cryptomator/common/settings/SettingsJsonAdapterTest.java
Patch:
@@ -30,7 +30,7 @@ public void testDeserialize() throws IOException {
 		Assertions.assertEquals(2, settings.getDirectories().size());
 		Assertions.assertEquals(8080, settings.port().get());
 		Assertions.assertEquals(42, settings.numTrayNotifications().get());
-		Assertions.assertEquals("dav", settings.preferredGvfsScheme().get());
+		Assertions.assertEquals(WebDavUrlScheme.DAV, settings.preferredGvfsScheme().get());
 		Assertions.assertEquals(VolumeImpl.FUSE, settings.preferredVolumeImpl().get());
 	}
 

File: main/ui/src/main/java/org/cryptomator/ui/mainwindow/MainWindowModule.java
Patch:
@@ -10,12 +10,13 @@
 import org.cryptomator.ui.common.FXMLLoaderFactory;
 import org.cryptomator.ui.common.FxController;
 import org.cryptomator.ui.common.FxControllerKey;
+import org.cryptomator.ui.unlock.UnlockComponent;
 
 import javax.inject.Provider;
 import java.util.Map;
 
-@Module(subcomponents = {AddVaultWizardComponent.class})
-public abstract class MainWindowModule {
+@Module(subcomponents = {AddVaultWizardComponent.class, UnlockComponent.class})
+abstract class MainWindowModule {
 
 	@Provides
 	@MainWindow

File: main/ui/src/main/java/org/cryptomator/ui/preferences/PreferencesModule.java
Patch:
@@ -14,7 +14,7 @@
 import java.util.Map;
 
 @Module
-public abstract class PreferencesModule {
+abstract class PreferencesModule {
 
 	@Provides
 	@PreferencesWindow

File: main/ui/src/main/java/org/cryptomator/ui/FxApplicationComponent.java
Patch:
@@ -6,7 +6,6 @@
 package org.cryptomator.ui;
 
 import dagger.Subcomponent;
-import javafx.application.Application;
 import javafx.application.Platform;
 
 @FxApplicationScoped
@@ -18,7 +17,6 @@ public interface FxApplicationComponent {
 	default void start() {
 		Platform.startup(() -> {
 			assert Platform.isFxApplicationThread();
-			Application.setUserAgentStylesheet(getClass().getResource("/css/theme.css").toString());
 			application().start();
 		});
 	}

File: main/launcher/src/main/java/org/cryptomator/launcher/CryptomatorComponent.java
Patch:
@@ -3,6 +3,7 @@
 import dagger.Component;
 import org.cryptomator.common.CommonsModule;
 import org.cryptomator.logging.LoggerModule;
+import org.cryptomator.ui.FxApplicationComponent;
 
 import javax.inject.Singleton;
 
@@ -12,6 +13,6 @@ public interface CryptomatorComponent {
 
 	Cryptomator application();
 
-	FxApplicationComponent.Builder fxApplicationComponent();
+	FxApplicationComponent fxApplicationComponent();
 
 }

File: main/ui/src/main/java/org/cryptomator/ui/ExitUtil.java
Patch:
@@ -12,7 +12,6 @@
 import javafx.application.Platform;
 import javafx.stage.Stage;
 import org.apache.commons.lang3.SystemUtils;
-import org.cryptomator.common.FxApplicationScoped;
 import org.cryptomator.common.settings.Settings;
 import org.cryptomator.jni.JniException;
 import org.cryptomator.jni.MacApplicationUiState;

File: main/ui/src/main/java/org/cryptomator/ui/FxApplicationScoped.java
Patch:
@@ -1,4 +1,4 @@
-package org.cryptomator.common;
+package org.cryptomator.ui;
 
 import javax.inject.Scope;
 import java.lang.annotation.Documented;

File: main/ui/src/main/java/org/cryptomator/ui/UiModule.java
Patch:
@@ -12,7 +12,6 @@
 import dagger.Provides;
 import javafx.beans.binding.Binding;
 import org.apache.commons.lang3.SystemUtils;
-import org.cryptomator.common.FxApplicationScoped;
 import org.cryptomator.common.settings.Settings;
 import org.cryptomator.frontend.webdav.WebDavServer;
 import org.cryptomator.keychain.KeychainModule;

File: main/ui/src/main/java/org/cryptomator/ui/controllers/MainController.java
Patch:
@@ -44,7 +44,7 @@
 import javafx.stage.Stage;
 import javafx.util.Duration;
 import org.apache.commons.lang3.SystemUtils;
-import org.cryptomator.common.FxApplicationScoped;
+import org.cryptomator.ui.FxApplicationScoped;
 import org.cryptomator.common.settings.VaultSettings;
 import org.cryptomator.ui.ExitUtil;
 import org.cryptomator.ui.controls.DirectoryListCell;

File: main/ui/src/main/java/org/cryptomator/ui/controllers/NotFoundController.java
Patch:
@@ -8,7 +8,7 @@
 import javafx.fxml.FXML;
 import javafx.scene.Parent;
 import javafx.scene.layout.VBox;
-import org.cryptomator.common.FxApplicationScoped;
+import org.cryptomator.ui.FxApplicationScoped;
 
 import javax.inject.Inject;
 

File: main/ui/src/main/java/org/cryptomator/ui/controllers/SettingsController.java
Patch:
@@ -12,7 +12,6 @@
 import com.google.common.base.Strings;
 import javafx.beans.Observable;
 import javafx.beans.binding.Bindings;
-import javafx.event.ActionEvent;
 import javafx.fxml.FXML;
 import javafx.scene.Group;
 import javafx.scene.Parent;
@@ -25,7 +24,7 @@
 import javafx.scene.layout.VBox;
 import javafx.util.StringConverter;
 import org.apache.commons.lang3.SystemUtils;
-import org.cryptomator.common.FxApplicationScoped;
+import org.cryptomator.ui.FxApplicationScoped;
 import org.cryptomator.common.settings.Settings;
 import org.cryptomator.common.settings.VolumeImpl;
 import org.cryptomator.ui.l10n.Localization;

File: main/ui/src/main/java/org/cryptomator/ui/controllers/ViewControllerLoader.java
Patch:
@@ -6,7 +6,7 @@
 package org.cryptomator.ui.controllers;
 
 import javafx.fxml.FXMLLoader;
-import org.cryptomator.common.FxApplicationScoped;
+import org.cryptomator.ui.FxApplicationScoped;
 import org.cryptomator.ui.l10n.Localization;
 
 import javax.inject.Inject;

File: main/ui/src/main/java/org/cryptomator/ui/controllers/WelcomeController.java
Patch:
@@ -23,7 +23,7 @@
 import javafx.scene.control.ProgressIndicator;
 import javafx.scene.layout.VBox;
 import org.apache.commons.lang3.SystemUtils;
-import org.cryptomator.common.FxApplicationScoped;
+import org.cryptomator.ui.FxApplicationScoped;
 import org.cryptomator.common.settings.Settings;
 import org.cryptomator.ui.l10n.Localization;
 import org.cryptomator.ui.util.Tasks;

File: main/ui/src/main/java/org/cryptomator/ui/l10n/Localization.java
Patch:
@@ -7,7 +7,7 @@
 
 import com.google.common.collect.Sets;
 import org.apache.commons.lang3.StringUtils;
-import org.cryptomator.common.FxApplicationScoped;
+import org.cryptomator.ui.FxApplicationScoped;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: main/ui/src/main/java/org/cryptomator/ui/model/AutoUnlocker.java
Patch:
@@ -5,7 +5,7 @@
  *******************************************************************************/
 package org.cryptomator.ui.model;
 
-import org.cryptomator.common.FxApplicationScoped;
+import org.cryptomator.ui.FxApplicationScoped;
 import org.cryptomator.cryptolib.api.CryptoException;
 import org.cryptomator.keychain.KeychainAccess;
 import org.slf4j.Logger;

File: main/ui/src/main/java/org/cryptomator/ui/model/VaultFactory.java
Patch:
@@ -8,7 +8,7 @@
  *******************************************************************************/
 package org.cryptomator.ui.model;
 
-import org.cryptomator.common.FxApplicationScoped;
+import org.cryptomator.ui.FxApplicationScoped;
 import org.cryptomator.common.settings.VaultSettings;
 
 import javax.inject.Inject;

File: main/ui/src/main/java/org/cryptomator/ui/model/VaultList.java
Patch:
@@ -9,7 +9,7 @@
 import javafx.collections.ListChangeListener;
 import javafx.collections.ObservableList;
 import javafx.collections.transformation.TransformationList;
-import org.cryptomator.common.FxApplicationScoped;
+import org.cryptomator.ui.FxApplicationScoped;
 import org.cryptomator.common.settings.Settings;
 import org.cryptomator.common.settings.VaultSettings;
 

File: main/ui/src/main/java/org/cryptomator/ui/model/WindowsDriveLetters.java
Patch:
@@ -6,7 +6,7 @@
 package org.cryptomator.ui.model;
 
 import org.apache.commons.lang3.SystemUtils;
-import org.cryptomator.common.FxApplicationScoped;
+import org.cryptomator.ui.FxApplicationScoped;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: main/ui/src/main/java/org/cryptomator/ui/model/upgrade/UpgradeStrategies.java
Patch:
@@ -5,7 +5,7 @@
  *******************************************************************************/
 package org.cryptomator.ui.model.upgrade;
 
-import org.cryptomator.common.FxApplicationScoped;
+import org.cryptomator.ui.FxApplicationScoped;
 import org.cryptomator.ui.model.Vault;
 
 import javax.inject.Inject;

File: main/ui/src/main/java/org/cryptomator/ui/model/upgrade/UpgradeVersion3DropBundleExtension.java
Patch:
@@ -7,7 +7,7 @@
 
 import javafx.application.Platform;
 import org.apache.commons.lang3.StringUtils;
-import org.cryptomator.common.FxApplicationScoped;
+import org.cryptomator.ui.FxApplicationScoped;
 import org.cryptomator.cryptolib.Cryptors;
 import org.cryptomator.cryptolib.api.Cryptor;
 import org.cryptomator.ui.l10n.Localization;

File: main/ui/src/main/java/org/cryptomator/ui/model/upgrade/UpgradeVersion3to4.java
Patch:
@@ -7,7 +7,7 @@
 
 import com.google.common.io.BaseEncoding;
 import org.apache.commons.lang3.StringUtils;
-import org.cryptomator.common.FxApplicationScoped;
+import org.cryptomator.ui.FxApplicationScoped;
 import org.cryptomator.cryptolib.Cryptors;
 import org.cryptomator.cryptolib.api.Cryptor;
 import org.cryptomator.cryptolib.common.MessageDigestSupplier;

File: main/ui/src/main/java/org/cryptomator/ui/model/upgrade/UpgradeVersion4to5.java
Patch:
@@ -5,7 +5,7 @@
  *******************************************************************************/
 package org.cryptomator.ui.model.upgrade;
 
-import org.cryptomator.common.FxApplicationScoped;
+import org.cryptomator.ui.FxApplicationScoped;
 import org.cryptomator.cryptolib.Cryptors;
 import org.cryptomator.cryptolib.api.Cryptor;
 import org.cryptomator.cryptolib.api.FileHeader;

File: main/ui/src/main/java/org/cryptomator/ui/model/upgrade/UpgradeVersion5toX.java
Patch:
@@ -5,7 +5,7 @@
  *******************************************************************************/
 package org.cryptomator.ui.model.upgrade;
 
-import org.cryptomator.common.FxApplicationScoped;
+import org.cryptomator.ui.FxApplicationScoped;
 import org.cryptomator.cryptofs.migration.Migrators;
 import org.cryptomator.cryptofs.migration.api.NoApplicableMigratorException;
 import org.cryptomator.cryptolib.Cryptors;

File: main/ui/src/main/java/org/cryptomator/ui/util/PasswordStrengthUtil.java
Patch:
@@ -15,7 +15,7 @@
 import javafx.scene.layout.BackgroundFill;
 import javafx.scene.layout.CornerRadii;
 import javafx.scene.paint.Color;
-import org.cryptomator.common.FxApplicationScoped;
+import org.cryptomator.ui.FxApplicationScoped;
 import org.cryptomator.ui.l10n.Localization;
 
 import javax.inject.Inject;

File: main/ui/src/main/java/org/cryptomator/ui/model/VaultModule.java
Patch:
@@ -88,7 +88,7 @@ private String getMacFuseDefaultMountFlags(Settings settings, VaultSettings vaul
 			LOG.error("Could not read uid/gid from USER_HOME", e);
 		}
 
-		return flags.toString();
+		return flags.toString().strip();
 	}
 
 	// see https://manpages.debian.org/testing/fuse/mount.fuse.8.en.html
@@ -111,7 +111,7 @@ private String getLinuxFuseDefaultMountFlags(Settings settings, VaultSettings va
 			LOG.error("Could not read uid/gid from USER_HOME", e);
 		}
 
-		return flags.toString();
+		return flags.toString().strip();
 	}
 
 	// see https://github.com/cryptomator/dokany-nio-adapter/blob/develop/src/main/java/org/cryptomator/frontend/dokany/MountUtil.java#L30-L34
@@ -127,7 +127,7 @@ private String getDokanyDefaultMountFlags(Settings settings, VaultSettings vault
 		flags.append(" --timeout 10000");
 		flags.append(" --allocation-unit-size 4096");
 		flags.append(" --sector-size 4096");
-		return flags.toString();
+		return flags.toString().strip();
 	}
 
 }

File: main/ui/src/main/java/org/cryptomator/ui/model/DokanyVolume.java
Patch:
@@ -64,11 +64,11 @@ private Path getMountPoint() throws VolumeException, IOException {
 			checkProvidedMountPoint(customMountPoint);
 			return customMountPoint;
 		} else if (!Strings.isNullOrEmpty(vaultSettings.winDriveLetter().get())) {
-			return Paths.get(vaultSettings.winDriveLetter().get().charAt(0) + ":\\");
+			return Path.of(vaultSettings.winDriveLetter().get().charAt(0) + ":\\");
 		} else {
 			//auto assign drive letter
 			if (!windowsDriveLetters.getAvailableDriveLetters().isEmpty()) {
-				return Paths.get(windowsDriveLetters.getAvailableDriveLetters().iterator().next() + ":\\");
+				return windowsDriveLetters.getAvailableDriveLetters().iterator().next();
 			} else {
 				throw new VolumeException("No free drive letter available.");
 			}

File: main/ui/src/main/java/org/cryptomator/ui/model/Vault.java
Patch:
@@ -288,10 +288,11 @@ public Character getWinDriveLetter() {
 		}
 	}
 
-	public void setWinDriveLetter(Character winDriveLetter) {
-		if (winDriveLetter == null) {
+	public void setWinDriveLetter(Path root) {
+		if (root == null) {
 			vaultSettings.winDriveLetter().set(null);
 		} else {
+			char winDriveLetter = root.toString().charAt(0);
 			vaultSettings.winDriveLetter().set(String.valueOf(winDriveLetter));
 		}
 	}

File: main/ui/src/main/java/org/cryptomator/ui/model/Vault.java
Patch:
@@ -288,10 +288,11 @@ public Character getWinDriveLetter() {
 		}
 	}
 
-	public void setWinDriveLetter(Character winDriveLetter) {
-		if (winDriveLetter == null) {
+	public void setWinDriveLetter(Path root) {
+		if (root == null) {
 			vaultSettings.winDriveLetter().set(null);
 		} else {
+			char winDriveLetter = root.toString().charAt(0);
 			vaultSettings.winDriveLetter().set(String.valueOf(winDriveLetter));
 		}
 	}

File: main/ui/src/main/java/org/cryptomator/ui/model/DokanyVolume.java
Patch:
@@ -44,11 +44,11 @@ public boolean isSupported() {
 	}
 
 	@Override
-	public void mount(CryptoFileSystem fs) throws VolumeException, IOException {
+	public void mount(CryptoFileSystem fs, String mountFlags) throws VolumeException, IOException {
 		Path mountPath = getMountPoint();
 		String mountName = vaultSettings.mountName().get();
 		try {
-			this.mount = mountFactory.mount(fs.getPath("/"), mountPath, mountName, FS_TYPE_NAME);
+			this.mount = mountFactory.mount(fs.getPath("/"), mountPath, mountName, FS_TYPE_NAME, mountFlags);
 		} catch (MountFailedException e) {
 			if (vaultSettings.getIndividualMountPath().isPresent()) {
 				LOG.warn("Failed to mount vault into {}. Is this directory currently accessed by another process (e.g. Windows Explorer)?", mountPath);

File: main/ui/src/main/java/org/cryptomator/ui/model/VaultComponent.java
Patch:
@@ -7,7 +7,6 @@
 
 import dagger.BindsInstance;
 import org.cryptomator.common.settings.VaultSettings;
-import org.cryptomator.ui.model.VaultModule.PerVault;
 
 import dagger.Subcomponent;
 

File: main/ui/src/main/java/org/cryptomator/ui/model/Volume.java
Patch:
@@ -22,7 +22,7 @@ public interface Volume {
 	 * @param fs
 	 * @throws IOException
 	 */
-	void mount(CryptoFileSystem fs) throws IOException, VolumeException;
+	void mount(CryptoFileSystem fs, String mountFlags) throws IOException, VolumeException;
 
 	void reveal() throws VolumeException;
 

File: main/ui/src/main/java/org/cryptomator/ui/model/WebDavVolume.java
Patch:
@@ -11,7 +11,6 @@
 
 import javax.inject.Inject;
 import javax.inject.Provider;
-
 import java.net.InetAddress;
 import java.net.UnknownHostException;
 
@@ -35,7 +34,7 @@ public WebDavVolume(Provider<WebDavServer> serverProvider, VaultSettings vaultSe
 	}
 
 	@Override
-	public void mount(CryptoFileSystem fs) throws VolumeException {
+	public void mount(CryptoFileSystem fs, String mountFlags) throws VolumeException {
 		if (server == null) {
 			server = serverProvider.get();
 		}

File: main/keychain/src/main/java/org/cryptomator/keychain/KeychainModule.java
Patch:
@@ -31,8 +31,8 @@ Optional<WinFunctions> provideOptionalWinFunctions() {
 
 	@Provides
 	@ElementsIntoSet
-	Set<KeychainAccessStrategy> provideKeychainAccessStrategies(MacSystemKeychainAccess macKeychain, WindowsProtectedKeychainAccess winKeychain) {
-		return Sets.newHashSet(macKeychain, winKeychain);
+	Set<KeychainAccessStrategy> provideKeychainAccessStrategies(MacSystemKeychainAccess macKeychain, WindowsProtectedKeychainAccess winKeychain, LinuxSecretServiceAccess linKeychain) {
+		return Sets.newHashSet(macKeychain, winKeychain, linKeychain);
 	}
 
 	@Provides

File: main/keychain/src/main/java/org/cryptomator/keychain/KeychainModule.java
Patch:
@@ -31,8 +31,8 @@ Optional<WinFunctions> provideOptionalWinFunctions() {
 
 	@Provides
 	@ElementsIntoSet
-	Set<KeychainAccessStrategy> provideKeychainAccessStrategies(MacSystemKeychainAccess macKeychain, WindowsProtectedKeychainAccess winKeychain) {
-		return Sets.newHashSet(macKeychain, winKeychain);
+	Set<KeychainAccessStrategy> provideKeychainAccessStrategies(MacSystemKeychainAccess macKeychain, WindowsProtectedKeychainAccess winKeychain, LinuxSecretServiceAccess linKeychain) {
+		return Sets.newHashSet(macKeychain, winKeychain, linKeychain);
 	}
 
 	@Provides

File: main/keychain/src/test/java/org/cryptomator/keychain/TestKeychainModule.java
Patch:
@@ -12,7 +12,7 @@
 public class TestKeychainModule extends KeychainModule {
 
 	@Override
-	Set<KeychainAccessStrategy> provideKeychainAccessStrategies(MacSystemKeychainAccess macKeychain, WindowsProtectedKeychainAccess winKeychain) {
+	Set<KeychainAccessStrategy> provideKeychainAccessStrategies(MacSystemKeychainAccess macKeychain, WindowsProtectedKeychainAccess winKeychain, LinuxSecretServiceAccess linKeychain) {
 		return Sets.newHashSet(new MapKeychainAccess());
 	}
 

File: main/commons/src/main/java/org/cryptomator/common/settings/VaultSettings.java
Patch:
@@ -35,17 +35,18 @@ public class VaultSettings {
 	public static final boolean DEFAULT_REAVEAL_AFTER_MOUNT = true;
 	public static final boolean DEFAULT_USES_INDIVIDUAL_MOUNTPATH = false;
 	public static final boolean DEFAULT_USES_READONLY_MODE = false;
+	public static final List<String> DEFAULT_MOUNT_FLAGS = List.of();
 
 	private final String id;
-	private final ObjectProperty<Path> path = new SimpleObjectProperty<>();
+	private final ObjectProperty<Path> path = new SimpleObjectProperty();
 	private final StringProperty mountName = new SimpleStringProperty();
 	private final StringProperty winDriveLetter = new SimpleStringProperty();
 	private final BooleanProperty unlockAfterStartup = new SimpleBooleanProperty(DEFAULT_UNLOCK_AFTER_STARTUP);
 	private final BooleanProperty revealAfterMount = new SimpleBooleanProperty(DEFAULT_REAVEAL_AFTER_MOUNT);
 	private final BooleanProperty usesIndividualMountPath = new SimpleBooleanProperty(DEFAULT_USES_INDIVIDUAL_MOUNTPATH);
 	private final StringProperty individualMountPath = new SimpleStringProperty();
 	private final BooleanProperty usesReadOnlyMode = new SimpleBooleanProperty(DEFAULT_USES_READONLY_MODE);
-	private final ObjectProperty<List<String>> mountFlags = new SimpleObjectProperty<>(List.of());
+	private final ObjectProperty<List<String>> mountFlags = new SimpleObjectProperty(DEFAULT_MOUNT_FLAGS);
 
 	public VaultSettings(String id) {
 		this.id = Objects.requireNonNull(id);

File: main/commons/src/main/java/org/cryptomator/common/settings/VaultSettingsJsonAdapter.java
Patch:
@@ -46,7 +46,7 @@ public VaultSettings read(JsonReader in) throws IOException {
 		boolean revealAfterMount = VaultSettings.DEFAULT_REAVEAL_AFTER_MOUNT;
 		boolean usesIndividualMountPath = VaultSettings.DEFAULT_USES_INDIVIDUAL_MOUNTPATH;
 		boolean usesReadOnlyMode = VaultSettings.DEFAULT_USES_READONLY_MODE;
-		List<String> mountFlags = null;
+		List<String> mountFlags = VaultSettings.DEFAULT_MOUNT_FLAGS;
 
 		in.beginObject();
 		while (in.hasNext()) {

File: main/commons/src/main/java/org/cryptomator/common/settings/SettingsProvider.java
Patch:
@@ -10,6 +10,7 @@
 
 import com.google.gson.Gson;
 import com.google.gson.GsonBuilder;
+import com.google.gson.JsonParseException;
 import org.cryptomator.common.Environment;
 import org.cryptomator.common.LazyInitializer;
 import org.slf4j.Logger;
@@ -117,7 +118,7 @@ private void save(Settings settings, Path settingsPath) {
 			}
 			Files.move(tmpPath, settingsPath, StandardCopyOption.REPLACE_EXISTING);
 			LOG.info("Settings saved to {}", settingsPath);
-		} catch (IOException e) {
+		} catch (IOException | JsonParseException e) {
 			LOG.error("Failed to save settings.", e);
 		}
 	}

File: main/ui/src/main/java/org/cryptomator/ui/controls/SecPasswordField.java
Patch:
@@ -249,6 +249,7 @@ public void setPassword(char[] password) {
 	public void swipe() {
 		swipe(content);
 		length = 0;
+		setText(null);
 	}
 
 	private void swipe(char[] buffer) {

File: main/ui/src/main/java/org/cryptomator/ui/controls/SecPasswordField.java
Patch:
@@ -249,6 +249,7 @@ public void setPassword(char[] password) {
 	public void swipe() {
 		swipe(content);
 		length = 0;
+		setText(null);
 	}
 
 	private void swipe(char[] buffer) {

File: main/launcher/src/main/java/org/cryptomator/launcher/FileOpenRequestHandler.java
Patch:
@@ -8,6 +8,7 @@
 
 import java.awt.Desktop;
 import java.awt.desktop.OpenFilesEvent;
+import java.awt.desktop.QuitStrategy;
 import java.io.File;
 import java.nio.file.FileSystem;
 import java.nio.file.FileSystems;

File: main/ui/src/main/java/org/cryptomator/ui/controllers/MainController.java
Patch:
@@ -213,7 +213,7 @@ public void initStage(Stage stage) {
 			stage.getIcons().add(new Image(getClass().getResourceAsStream("/window_icon_32.png")));
 			Application.setUserAgentStylesheet(getClass().getResource("/css/win_theme.css").toString());
 		}
-		exitUtil.initExitHandler(this::gracefulShutdown);
+		exitUtil.initExitHandler(() -> Platform.runLater(this::gracefulShutdown));
 		listenToFileOpenRequests(stage);
 	}
 

File: main/commons/src/test/java/org/cryptomator/common/EnvironmentTest.java
Patch:
@@ -69,13 +69,13 @@ public void testAbsoluteLogDir() {
 
 		Optional<Path> logDir = env.getLogDir();
 
-		Assertions.assertFalse(logDir.isPresent());
+		Assertions.assertTrue(logDir.isPresent());
 	}
 
 	@Test
-	@DisplayName("cryptomator.logDir=foo/bar")
+	@DisplayName("cryptomator.logDir=~/foo/bar")
 	public void testRelativeLogDir() {
-		System.setProperty("cryptomator.logDir", "foo/bar");
+		System.setProperty("cryptomator.logDir", "~/foo/bar");
 
 		Optional<Path> logDir = env.getLogDir();
 

File: main/commons/src/test/java/org/cryptomator/common/EnvironmentTest.java
Patch:
@@ -73,7 +73,7 @@ public void testAbsoluteLogDir() {
 	}
 
 	@Test
-	@DisplayName("cryptomator.logDir=foo/bar")
+	@DisplayName("cryptomator.logDir=~/foo/bar")
 	public void testRelativeLogDir() {
 		System.setProperty("cryptomator.logDir", "~/foo/bar");
 

File: main/commons/src/test/java/org/cryptomator/common/EnvironmentTest.java
Patch:
@@ -69,13 +69,13 @@ public void testAbsoluteLogDir() {
 
 		Optional<Path> logDir = env.getLogDir();
 
-		Assertions.assertFalse(logDir.isPresent());
+		Assertions.assertTrue(logDir.isPresent());
 	}
 
 	@Test
 	@DisplayName("cryptomator.logDir=foo/bar")
 	public void testRelativeLogDir() {
-		System.setProperty("cryptomator.logDir", "foo/bar");
+		System.setProperty("cryptomator.logDir", "~/foo/bar");
 
 		Optional<Path> logDir = env.getLogDir();
 

File: main/launcher/src/main/java/org/cryptomator/launcher/CryptomatorModule.java
Patch:
@@ -4,10 +4,10 @@
 import dagger.Provides;
 import org.cryptomator.common.settings.Settings;
 import org.cryptomator.common.settings.SettingsProvider;
+import org.cryptomator.ui.model.AppLaunchEvent;
 
 import javax.inject.Named;
 import javax.inject.Singleton;
-import java.nio.file.Path;
 import java.util.Optional;
 import java.util.concurrent.ArrayBlockingQueue;
 import java.util.concurrent.BlockingQueue;
@@ -23,8 +23,8 @@ Settings provideSettings(SettingsProvider settingsProvider) {
 
 	@Provides
 	@Singleton
-	@Named("fileOpenRequests")
-	BlockingQueue<Path> provideFileOpenRequests() {
+	@Named("launchEventQueue")
+	BlockingQueue<AppLaunchEvent> provideFileOpenRequests() {
 		return new ArrayBlockingQueue<>(10);
 	}
 

File: main/launcher/src/main/java/org/cryptomator/launcher/CryptomatorComponent.java
Patch:
@@ -3,6 +3,7 @@
 import dagger.Component;
 import org.cryptomator.common.CommonsModule;
 import org.cryptomator.common.Environment;
+import org.cryptomator.logging.DebugMode;
 
 import javax.inject.Named;
 import javax.inject.Singleton;
@@ -12,6 +13,8 @@
 @Component(modules = {CryptomatorModule.class, CommonsModule.class})
 public interface CryptomatorComponent {
 
+	DebugMode debugMode();
+
 	IpcFactory ipcFactory();
 
 	@Named("applicationVersion")

File: main/launcher/src/main/java/org/cryptomator/launcher/FxApplicationComponent.java
Patch:
@@ -21,8 +21,6 @@ interface FxApplicationComponent {
 
 	ViewControllerLoader fxmlLoader();
 
-	DebugMode debugMode();
-
 	@Subcomponent.Builder
 	interface Builder {
 

File: main/launcher/src/main/java/org/cryptomator/logging/DebugMode.java
Patch:
@@ -14,11 +14,12 @@
 import org.slf4j.LoggerFactory;
 
 import javax.inject.Inject;
+import javax.inject.Singleton;
 import java.util.Collection;
 
 import static java.util.Arrays.asList;
 
-@FxApplicationScoped
+@Singleton
 public class DebugMode {
 
 	private static final org.slf4j.Logger LOG = LoggerFactory.getLogger(DebugMode.class);

File: main/commons/src/main/java/org/cryptomator/common/Environment.java
Patch:
@@ -28,7 +28,7 @@ public class Environment {
 	public Environment() {
 		LOG.debug("cryptomator.settingsPath: {}", System.getProperty("cryptomator.settingsPath"));
 		LOG.debug("cryptomator.ipcPortPath: {}", System.getProperty("cryptomator.ipcPortPath"));
-		LOG.debug("cryptomator.keychainPath: {}", System.getProperty("cryptomator.ipcPortPath"));
+		LOG.debug("cryptomator.keychainPath: {}", System.getProperty("cryptomator.keychainPath"));
 	}
 
 	public Stream<Path> getSettingsPath() {

File: main/ui/src/main/java/org/cryptomator/ui/controls/SecPasswordField.java
Patch:
@@ -66,8 +66,8 @@ public void replaceText(int start, int end, String text) {
 	}
 
 	private void growContentIfNeeded() {
-		if (this.length > content.length) {
-			char[] newContent = new char[content.length + GROW_BUFFER_SIZE];
+		if (length > content.length) {
+			char[] newContent = new char[length + GROW_BUFFER_SIZE];
 			System.arraycopy(content, 0, newContent, 0, content.length);
 			swipe();
 			this.content = newContent;

File: main/ui/src/main/java/org/cryptomator/ui/controls/SecPasswordField.java
Patch:
@@ -66,8 +66,8 @@ public void replaceText(int start, int end, String text) {
 	}
 
 	private void growContentIfNeeded() {
-		if (this.length > content.length) {
-			char[] newContent = new char[content.length + GROW_BUFFER_SIZE];
+		if (length > content.length) {
+			char[] newContent = new char[length + GROW_BUFFER_SIZE];
 			System.arraycopy(content, 0, newContent, 0, content.length);
 			swipe();
 			this.content = newContent;

File: main/ui/src/main/java/org/cryptomator/ui/controllers/MainController.java
Patch:
@@ -222,14 +222,16 @@ private void gracefulShutdown() {
 			ButtonType forceShutdownButtonType = new ButtonType(localization.getString("main.gracefulShutdown.button.forceShutdown"));
 			Alert gracefulShutdownDialog = DialogBuilderUtil.buildGracefulShutdownDialog(
 					localization.getString("main.gracefulShutdown.dialog.title"), localization.getString("main.gracefulShutdown.dialog.header"), localization.getString("main.gracefulShutdown.dialog.content"),
-					forceShutdownButtonType, forceShutdownButtonType, tryAgainButtonType);
+					forceShutdownButtonType, ButtonType.CANCEL, forceShutdownButtonType, tryAgainButtonType);
 
 			Optional<ButtonType> choice = gracefulShutdownDialog.showAndWait();
 			choice.ifPresent(btnType -> {
 				if (tryAgainButtonType.equals(btnType)) {
 					gracefulShutdown();
 				} else if (forceShutdownButtonType.equals(btnType)) {
 					Platform.runLater(Platform::exit);
+				} else {
+					return;
 				}
 			});
 		} else {

File: main/ui/src/main/java/org/cryptomator/ui/controllers/MainController.java
Patch:
@@ -222,14 +222,16 @@ private void gracefulShutdown() {
 			ButtonType forceShutdownButtonType = new ButtonType(localization.getString("main.gracefulShutdown.button.forceShutdown"));
 			Alert gracefulShutdownDialog = DialogBuilderUtil.buildGracefulShutdownDialog(
 					localization.getString("main.gracefulShutdown.dialog.title"), localization.getString("main.gracefulShutdown.dialog.header"), localization.getString("main.gracefulShutdown.dialog.content"),
-					forceShutdownButtonType, forceShutdownButtonType, tryAgainButtonType);
+					forceShutdownButtonType, ButtonType.CANCEL, forceShutdownButtonType, tryAgainButtonType);
 
 			Optional<ButtonType> choice = gracefulShutdownDialog.showAndWait();
 			choice.ifPresent(btnType -> {
 				if (tryAgainButtonType.equals(btnType)) {
 					gracefulShutdown();
 				} else if (forceShutdownButtonType.equals(btnType)) {
 					Platform.runLater(Platform::exit);
+				} else {
+					return;
 				}
 			});
 		} else {

File: main/ui/src/main/java/org/cryptomator/ui/controllers/MainController.java
Patch:
@@ -232,6 +232,8 @@ private void gracefulShutdown() {
 					Platform.runLater(Platform::exit);
 				}
 			});
+		} else {
+			Platform.runLater(Platform::exit);
 		}
 	}
 

File: main/ui/src/main/java/org/cryptomator/ui/util/DialogBuilderUtil.java
Patch:
@@ -38,8 +38,8 @@ public static Alert buildYesNoDialog(String title, String header, String content
 		return buildDialog(title, header, content, Alert.AlertType.CONFIRMATION, defaultButton, ButtonType.YES, ButtonType.NO);
 	}
 
-	public static Alert buildGracefulShutdownDialog(String title, String header, String content, ButtonType tryAgainButton, ButtonType forceShutdownButton) {
-		return buildDialog(title, header, content, Alert.AlertType.WARNING, tryAgainButton, tryAgainButton, forceShutdownButton);
+	public static Alert buildGracefulShutdownDialog(String title, String header, String content, ButtonType defaultButton, ButtonType... buttons) {
+		return buildDialog(title, header, content, Alert.AlertType.WARNING, defaultButton, buttons);
 	}
 
 	private static Alert buildDialog(String title, String header, String content, Alert.AlertType type, ButtonType defaultButton, ButtonType... buttons) {

File: main/ui/src/main/java/org/cryptomator/ui/controllers/MainController.java
Patch:
@@ -495,7 +495,7 @@ private void showUnlockView(UnlockController.State state) {
 
 	public void didUnlock(Vault vault) {
 		if (vault.equals(selectedVault.getValue())) {
-			this.showUnlockedView(vault, true);
+			this.showUnlockedView(vault, vault.getVaultSettings().revealAfterMount().getValue());
 		}
 	}
 

File: main/ui/src/main/java/org/cryptomator/ui/controllers/MainController.java
Patch:
@@ -511,7 +511,9 @@ private void showUnlockedView(Vault vault, boolean reveal) {
 
 	public void didLock(UnlockedController ctrl) {
 		unlockedVaults.remove(ctrl.getVault());
-		showUnlockView(UnlockController.State.UNLOCKING);
+		if (ctrl.getVault().getId() == selectedVault.get().getId()) {
+			showUnlockView(UnlockController.State.UNLOCKING);
+		}
 		activeController.get().focus();
 	}
 

File: main/ui/src/main/java/org/cryptomator/ui/controllers/MainController.java
Patch:
@@ -125,6 +125,7 @@ public MainController(@Named("mainWindow") Stage mainWindow, ExecutorService exe
 		this.upgradeStrategyForSelectedVault = EasyBind.monadic(selectedVault).map(upgradeStrategies::getUpgradeStrategy);
 		this.areAllVaultsLocked = Bindings.isEmpty(FXCollections.observableList(vaults, Vault::observables).filtered(Vault.NOT_LOCKED));
 
+		EasyBind.subscribe(areAllVaultsLocked, exitUtil::updateTrayIcon);
 		EasyBind.subscribe(areAllVaultsLocked, Platform::setImplicitExit);
 		autoUnlocker.unlockAllSilently();
 

File: main/ui/src/main/java/org/cryptomator/ui/model/DokanyVolume.java
Patch:
@@ -8,7 +8,6 @@
 import org.cryptomator.frontend.dokany.Mount;
 import org.cryptomator.frontend.dokany.MountFactory;
 
-@VaultModule.PerVault
 public class DokanyVolume implements Volume {
 
 	private static final String FS_TYPE_NAME = "Cryptomator File System";

File: main/ui/src/main/java/org/cryptomator/ui/model/WebDavVolume.java
Patch:
@@ -15,7 +15,6 @@
 import java.net.InetAddress;
 import java.net.UnknownHostException;
 
-@VaultModule.PerVault
 public class WebDavVolume implements Volume {
 
 	private static final String LOCALHOST_ALIAS = "cryptomator-vault";

File: main/commons/src/main/java/org/cryptomator/common/settings/VolumeImpl.java
Patch:
@@ -4,7 +4,8 @@
 
 public enum VolumeImpl {
 	WEBDAV("WebDAV"),
-	FUSE("FUSE");
+	FUSE("FUSE"),
+	DOKANY("DOKANY");
 
 	private String displayName;
 

File: main/commons/src/test/java/org/cryptomator/common/settings/SettingsJsonAdapterTest.java
Patch:
@@ -22,7 +22,7 @@ public void testDeserialize() throws IOException {
 				+ "\"checkForUpdatesEnabled\": true,"//
 				+ "\"port\": 8080,"//
 				+ "\"numTrayNotifications\": 42,"//
-				+ "\"volumeImpl\": \"FUSE\"}";
+				+ "\"preferredVolumeImpl\": \"FUSE\"}";
 
 		Settings settings = adapter.fromJson(json);
 
@@ -31,7 +31,7 @@ public void testDeserialize() throws IOException {
 		Assert.assertEquals(8080, settings.port().get());
 		Assert.assertEquals(42, settings.numTrayNotifications().get());
 		Assert.assertEquals("dav", settings.preferredGvfsScheme().get());
-		Assert.assertEquals(VolumeImpl.FUSE, settings.volumeImpl().get());
+		Assert.assertEquals(VolumeImpl.FUSE, settings.preferredVolumeImpl().get());
 	}
 
 }

File: main/ui/src/main/java/org/cryptomator/ui/controllers/SettingsController.java
Patch:
@@ -97,7 +97,7 @@ public void initialize() {
 
 		//NIOADAPTER
 		volume.getItems().addAll(getSupportedAdapters());
-		volume.setValue(settings.volumeImpl().get());
+		volume.setValue(settings.preferredVolumeImpl().get());
 		volume.setVisible(true);
 		volume.setConverter(new NioAdapterImplStringConverter());
 
@@ -127,7 +127,7 @@ public void initialize() {
 
 		settings.checkForUpdates().bind(checkForUpdatesCheckbox.selectedProperty());
 		settings.preferredGvfsScheme().bind(prefGvfsScheme.valueProperty());
-		settings.volumeImpl().bind(volume.valueProperty());
+		settings.preferredVolumeImpl().bind(volume.valueProperty());
 		settings.debugMode().bind(debugModeCheckbox.selectedProperty());
 	}
 

File: main/ui/src/main/java/org/cryptomator/ui/controllers/UnlockController.java
Patch:
@@ -181,7 +181,7 @@ public void initialize() {
 			winDriveLetterLabel.setManaged(false);
 			winDriveLetter.setVisible(false);
 			winDriveLetter.setManaged(false);
-			if (VolumeImpl.WEBDAV.equals(settings.volumeImpl().get())) {
+			if (VolumeImpl.WEBDAV.equals(settings.preferredVolumeImpl().get())) {
 				useOwnMountPath.setVisible(false);
 				useOwnMountPath.setManaged(false);
 				mountPathLabel.setManaged(false);

File: main/commons/src/main/java/org/cryptomator/common/settings/Settings.java
Patch:
@@ -32,7 +32,7 @@ public class Settings {
 	public static final int DEFAULT_NUM_TRAY_NOTIFICATIONS = 3;
 	public static final String DEFAULT_GVFS_SCHEME = "dav";
 	public static final boolean DEFAULT_DEBUG_MODE = false;
-	public static final VolumeImpl DEFAULT_VOLUME_IMPL = VolumeImpl.WEBDAV;
+	public static final VolumeImpl DEFAULT_VOLUME_IMPL = VolumeImpl.FUSE;
 
 	private final ObservableList<VaultSettings> directories = FXCollections.observableArrayList(VaultSettings::observables);
 	private final BooleanProperty checkForUpdates = new SimpleBooleanProperty(DEFAULT_CHECK_FOR_UDPATES);

File: main/ui/src/main/java/org/cryptomator/ui/controllers/MainController.java
Patch:
@@ -194,6 +194,7 @@ public Parent getRoot() {
 	public void initStage(Stage stage) {
 		stage.setScene(new Scene(getRoot()));
 		stage.sizeToScene();
+		stage.setTitle(localization.getString("app.name")); // set once before bind to avoid display bugs with Linux window managers
 		stage.titleProperty().bind(windowTitle());
 		stage.setResizable(false);
 		loadFont("/css/ionicons.ttf");
@@ -203,9 +204,10 @@ public void initStage(Stage stage) {
 			subs = subs.and(EasyBind.includeWhen(mainWindow.getScene().getRoot().getStyleClass(), INACTIVE_WINDOW_STYLE_CLASS, mainWindow.focusedProperty().not()));
 			Application.setUserAgentStylesheet(getClass().getResource("/css/mac_theme.css").toString());
 		} else if (SystemUtils.IS_OS_LINUX) {
+			stage.getIcons().add(new Image(getClass().getResourceAsStream("/window_icon_512.png")));
 			Application.setUserAgentStylesheet(getClass().getResource("/css/linux_theme.css").toString());
 		} else if (SystemUtils.IS_OS_WINDOWS) {
-			stage.getIcons().add(new Image(getClass().getResourceAsStream("/window_icon.png")));
+			stage.getIcons().add(new Image(getClass().getResourceAsStream("/window_icon_32.png")));
 			Application.setUserAgentStylesheet(getClass().getResource("/css/win_theme.css").toString());
 		}
 		exitUtil.initExitHandler(this::gracefulShutdown);

File: main/ui/src/main/java/org/cryptomator/ui/model/WebDavVolume.java
Patch:
@@ -111,7 +111,7 @@ public void stop() {
 	}
 
 	public synchronized String getMountUri() {
-		return servlet.getServletRootUri().toString();
+		return servlet.getServletRootUri().toString() + "/";
 	}
 
 	/**

File: main/commons/src/test/java/org/cryptomator/common/settings/VaultSettingsJsonAdapterTest.java
Patch:
@@ -20,7 +20,7 @@ public class VaultSettingsJsonAdapterTest {
 
 	@Test
 	public void testDeserialize() throws IOException {
-		String json = "{\"id\": \"foo\", \"path\": \"/foo/bar\", \"mountName\": \"test\", \"winDriveLetter\": \"X\", \"shouldBeIgnored\": true, \"mountPath\": \"/home/test/crypto\"}";
+		String json = "{\"id\": \"foo\", \"path\": \"/foo/bar\", \"mountName\": \"test\", \"winDriveLetter\": \"X\", \"shouldBeIgnored\": true, \"individualMountPath\": \"/home/test/crypto\"}";
 		JsonReader jsonReader = new JsonReader(new StringReader(json));
 
 		VaultSettings vaultSettings = adapter.read(jsonReader);

File: main/commons/src/test/java/org/cryptomator/common/settings/VaultSettingsJsonAdapterTest.java
Patch:
@@ -28,7 +28,7 @@ public void testDeserialize() throws IOException {
 		Assert.assertEquals(Paths.get("/foo/bar"), vaultSettings.path().get());
 		Assert.assertEquals("test", vaultSettings.mountName().get());
 		Assert.assertEquals("X", vaultSettings.winDriveLetter().get());
-		Assert.assertEquals("/home/test/crypto", vaultSettings.mountPath().get());
+		Assert.assertEquals("/home/test/crypto", vaultSettings.individualMountPath().get());
 	}
 
 }

File: main/ui/src/main/java/org/cryptomator/ui/model/Vault.java
Patch:
@@ -258,11 +258,11 @@ public String getMountName() {
 	}
 
 	public StringProperty getMountPathProperty() {
-		return vaultSettings.mountPath();
+		return vaultSettings.individualMountPath();
 	}
 
 	public void setMountPath(String mountPath) {
-		vaultSettings.mountPath().set(mountPath);
+		vaultSettings.individualMountPath().set(mountPath);
 	}
 
 	public void setMountName(String mountName) throws IllegalArgumentException {

File: main/ui/src/main/java/org/cryptomator/ui/model/FuseVolume.java
Patch:
@@ -45,7 +45,7 @@ public void prepare(CryptoFileSystem fs) {
 	public void mount() throws CommandFailedException {
 		try {
 			EnvironmentVariables envVars = EnvironmentVariables.create()
-					.withMountName(vaultSettings.mountName().getValue() + vaultSettings.getId())
+					.withMountName(vaultSettings.mountName().getValue() + "_ID-" + vaultSettings.getId())
 					.withMountPath(chooseMountRootPath())
 					.build();
 			fuseMnt.mount(cfs.getPath("/"), envVars);

File: main/ui/src/main/java/org/cryptomator/ui/model/FuseVolume.java
Patch:
@@ -17,8 +17,8 @@
 public class FuseVolume implements Volume {
 
 	private static final Logger LOG = LoggerFactory.getLogger(FuseVolume.class);
-	private static final String DEFAULT_MOUNTROOTPATH_MAC = System.getProperty("user.home") + "Library/Application Support/Cryptomator";
-	private static final String DEFAULT_MOUNTROOTPATH_LINUX = System.getProperty("user.home") + ".Cryptomator";
+	private static final String DEFAULT_MOUNTROOTPATH_MAC = System.getProperty("user.home") + "/Library/Application Support/Cryptomator";
+	private static final String DEFAULT_MOUNTROOTPATH_LINUX = System.getProperty("user.home") + "/.Cryptomator";
 
 	private final FuseMount fuseMnt;
 	private final VaultSettings vaultSettings;

File: main/ui/src/main/java/org/cryptomator/ui/controllers/SettingsController.java
Patch:
@@ -105,6 +105,7 @@ public void initialize() {
 
 
 		//WEBDAV
+		webdavVolume.setVisible(settings.usedNioAdapterImpl().getValue().equals(NioAdapterImpl.WEBDAV.name()));
 		webdavVolume.managedProperty().bind(webdavVolume.visibleProperty());
 		prefGvfsScheme.managedProperty().bind(webdavVolume.visibleProperty());
 		prefGvfsSchemeLabel.managedProperty().bind(webdavVolume.visibleProperty());
@@ -122,6 +123,7 @@ public void initialize() {
 		prefGvfsScheme.setVisible(SystemUtils.IS_OS_LINUX);
 
 		//FUSE
+		fuseVolume.setVisible(settings.usedNioAdapterImpl().getValue().equals(NioAdapterImpl.FUSE.name()));
 		fuseVolume.managedProperty().bind(fuseVolume.visibleProperty());
 
 		debugModeCheckbox.setSelected(settings.debugMode().get());

File: main/commons/src/main/java/org/cryptomator/common/settings/VaultSettings.java
Patch:
@@ -36,7 +36,7 @@ public class VaultSettings {
 	private final BooleanProperty unlockAfterStartup = new SimpleBooleanProperty(DEFAULT_UNLOCK_AFTER_STARTUP);
 	private final BooleanProperty mountAfterUnlock = new SimpleBooleanProperty(DEFAULT_MOUNT_AFTER_UNLOCK);
 	private final BooleanProperty revealAfterMount = new SimpleBooleanProperty(DEFAULT_REAVEAL_AFTER_MOUNT);
-	private final StringProperty mountPath = new SimpleStringProperty(Settings.DEFAULT_DEFAULT_MOUNT_DIR);
+	private final StringProperty mountPath = new SimpleStringProperty();
 
 	public VaultSettings(String id) {
 		this.id = Objects.requireNonNull(id);
@@ -45,7 +45,7 @@ public VaultSettings(String id) {
 	}
 
 	Observable[] observables() {
-		return new Observable[] {path, mountName, winDriveLetter, unlockAfterStartup, mountAfterUnlock, revealAfterMount};
+		return new Observable[]{path, mountName, winDriveLetter, unlockAfterStartup, mountAfterUnlock, revealAfterMount};
 	}
 
 	private void deriveMountNameFromPath(Path path) {

File: main/commons/src/test/java/org/cryptomator/common/settings/SettingsJsonAdapterTest.java
Patch:
@@ -35,7 +35,6 @@ public void testDeserialize() throws IOException {
 		Assert.assertEquals(42, settings.numTrayNotifications().get());
 		Assert.assertEquals("dav", settings.preferredGvfsScheme().get());
 		Assert.assertEquals("webdav", settings.usedNioAdapterImpl().get());
-		Assert.assertEquals("/home/test/crypto", settings.defaultMountDir().get());
 	}
 
 }

File: main/ui/src/main/java/org/cryptomator/ui/model/NioAdapter.java
Patch:
@@ -4,7 +4,7 @@
 
 public interface NioAdapter {
 
-	void unlock(CryptoFileSystem fs);
+	void prepare(CryptoFileSystem fs);
 
 	void mount() throws CommandFailedException;
 
@@ -20,7 +20,7 @@ default void unmountForced() throws CommandFailedException {
 
 	void stop();
 
-	String getFsRootUrlString();
+	String getMountUrl();
 
 	default boolean isSupported() {
 		return false;

File: main/ui/src/main/java/org/cryptomator/ui/model/WebDavNioAdapter.java
Patch:
@@ -33,7 +33,7 @@ public WebDavNioAdapter(WebDavServer server, VaultSettings vaultSettings, Settin
 	}
 
 	@Override
-	public void unlock(CryptoFileSystem fs) {
+	public void prepare(CryptoFileSystem fs) {
 		if (!server.isRunning()) {
 			server.start();
 		}
@@ -104,7 +104,7 @@ public void stop() {
 
 	}
 
-	public synchronized String getFsRootUrlString() {
+	public synchronized String getMountUrl() {
 		return servlet.getServletRootUri().toString();
 	}
 

File: main/ui/src/main/java/org/cryptomator/ui/controllers/SettingsController.java
Patch:
@@ -138,8 +138,8 @@ public void initialize() {
 		fuseNioAdapter.managedProperty().bind(fuseNioAdapter.visibleProperty());
 		defaultMountDirLabel.managedProperty().bind(fuseNioAdapter.visibleProperty());
 		defaultMountDir.managedProperty().bind(fuseNioAdapter.visibleProperty());
-		defaultMountDirLabel.setVisible(SystemUtils.IS_OS_LINUX);
-		defaultMountDir.setVisible(SystemUtils.IS_OS_LINUX);
+		defaultMountDirLabel.setVisible(!SystemUtils.IS_OS_WINDOWS);
+		defaultMountDir.setVisible(!SystemUtils.IS_OS_WINDOWS);
 		defaultMountDir.setText(String.valueOf(settings.defaultMountDir().get()));
 		changeDefaultMountDirButton.setVisible(false);
 		changeDefaultMountDirButton.visibleProperty().bind(

File: main/launcher/src/test/java/org/cryptomator/launcher/FileOpenRequestHandlerTest.java
Patch:
@@ -32,7 +32,6 @@ public void testOpenArgsWithCorrectPaths() throws IOException {
 		Mockito.when(fs.provider()).thenReturn(provider);
 		Mockito.when(fs.getPath(Mockito.anyString())).thenReturn(p1, p2);
 		Mockito.when(provider.readAttributes(Mockito.any(), Mockito.eq(BasicFileAttributes.class))).thenReturn(attrs);
-		Mockito.when(attrs.isRegularFile()).thenReturn(true);
 
 		BlockingQueue<Path> queue = new ArrayBlockingQueue<>(10);
 		FileOpenRequestHandler handler = new FileOpenRequestHandler(queue);

File: main/ui/src/main/java/org/cryptomator/ui/controllers/MainController.java
Patch:
@@ -315,7 +315,7 @@ public void addVault(final Path path, boolean select) {
 		final Path vaultPath;
 		if (path != null && Files.isDirectory(path)) {
 			vaultPath = path;
-		} else if (path != null && Files.isRegularFile(path)) {
+		} else if (path != null && Files.isReadable(path)) {
 			vaultPath = path.getParent();
 		} else {
 			LOG.warn("Ignoring attempt to add vault with invalid path: {}", path);

File: main/ui/src/main/java/org/cryptomator/ui/controllers/MainController.java
Patch:
@@ -459,6 +459,7 @@ private void showUpgradeView() {
 
 	public void didUpgrade() {
 		showUnlockView();
+		activeController.get().focus();
 	}
 
 	private void showUnlockView() {
@@ -486,6 +487,7 @@ private void showUnlockedView(Vault vault) {
 	public void didLock(UnlockedController ctrl) {
 		unlockedVaults.remove(ctrl.getVault());
 		showUnlockView();
+		activeController.get().focus();
 	}
 
 	private void showChangePasswordView() {
@@ -498,6 +500,7 @@ private void showChangePasswordView() {
 
 	public void didChangePassword() {
 		showUnlockView();
+		activeController.get().focus();
 	}
 
 }

File: main/ui/src/main/java/org/cryptomator/ui/controllers/MainController.java
Patch:
@@ -169,7 +169,7 @@ public MainController(@Named("mainWindow") Stage mainWindow, ExecutorService exe
 	@Override
 	public void initialize() {
 		vaultList.setItems(vaults);
-		vaultList.setOnKeyPressed(this::didPressKeyOnList);
+		vaultList.setOnKeyReleased(this::didPressKeyOnList);
 		vaultList.setCellFactory(this::createDirecoryListCell);
 		activeController.set(viewControllerLoader.load("/fxml/welcome.fxml"));
 		selectedVault.bind(vaultList.getSelectionModel().selectedItemProperty());
@@ -447,6 +447,7 @@ private void showInitializeView() {
 
 	public void didInitialize() {
 		showUnlockView();
+		activeController.get().focus();
 	}
 
 	private void showUpgradeView() {

File: main/ui/src/main/java/org/cryptomator/ui/controllers/MainController.java
Patch:
@@ -16,6 +16,7 @@
 import java.io.InputStream;
 import java.nio.file.Files;
 import java.nio.file.Path;
+import java.nio.file.Paths;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
@@ -41,6 +42,7 @@
 import org.cryptomator.ui.model.VaultList;
 import org.cryptomator.ui.util.DialogBuilderUtil;
 import org.cryptomator.ui.util.EawtApplicationWrapper;
+import org.cryptomator.ui.util.ProcessFilePath;
 import org.fxmisc.easybind.EasyBind;
 import org.fxmisc.easybind.Subscription;
 import org.fxmisc.easybind.monadic.MonadicBinding;
@@ -263,7 +265,7 @@ private void didClickCreateNewVault(ActionEvent event) {
 			return;
 		}
 		try {
-			final Path vaultDir = file.toPath();
+			final Path vaultDir = Paths.get(ProcessFilePath.processFilePath(file.getPath()));
 			if (Files.exists(vaultDir)) {
 				try (Stream<Path> stream = Files.list(vaultDir)) {
 					if (stream.filter(this::isNotHidden).findAny().isPresent()) {

File: main/launcher/src/main/java/org/cryptomator/launcher/InterProcessCommunicator.java
Patch:
@@ -102,7 +102,7 @@ private ClientCommunicator(Path portFilePath) throws ConnectException, NotBoundE
 			}
 			try {
 				int port = ClientCommunicator.readPort(portFilePath);
-				LOG.debug("Connecting to port {}...");
+				LOG.debug("Connecting to port {}...", port);
 				Registry registry = LocateRegistry.getRegistry("localhost", port, new ClientSocketFactory());
 				this.remote = (IpcProtocolRemote) registry.lookup(RMI_NAME);
 			} catch (IOException e) {

File: main/ui/src/main/java/org/cryptomator/ui/controllers/InitializeController.java
Patch:
@@ -10,7 +10,6 @@
 package org.cryptomator.ui.controllers;
 
 import java.io.IOException;
-import java.nio.file.DirectoryNotEmptyException;
 import java.nio.file.FileAlreadyExistsException;
 import java.util.Objects;
 import java.util.Optional;
@@ -125,8 +124,6 @@ protected void initializeVault(ActionEvent event) {
 			listener.ifPresent(this::invokeListenerLater);
 		} catch (FileAlreadyExistsException ex) {
 			messageLabel.setText(localization.getString("initialize.messageLabel.alreadyInitialized"));
-		} catch (DirectoryNotEmptyException ex) {
-			messageLabel.setText(localization.getString("initialize.messageLabel.notEmpty"));
 		} catch (IOException ex) {
 			LOG.error("I/O Exception", ex);
 			messageLabel.setText(localization.getString("initialize.messageLabel.initializationFailed"));

File: main/launcher/src/main/java/org/cryptomator/launcher/InterProcessCommunicator.java
Patch:
@@ -17,6 +17,7 @@
 import java.nio.file.Paths;
 import java.nio.file.StandardOpenOption;
 import java.rmi.ConnectException;
+import java.rmi.ConnectIOException;
 import java.rmi.NotBoundException;
 import java.rmi.Remote;
 import java.rmi.RemoteException;
@@ -62,8 +63,8 @@ static InterProcessCommunicator start(Path portFilePath, InterProcessCommunicati
 			ClientCommunicator client = new ClientCommunicator(port);
 			LOG.trace("Connected to running process.");
 			return client;
-		} catch (ConnectException | NotBoundException e) {
-			LOG.debug("Did not find running process.");
+		} catch (ConnectException | ConnectIOException | NotBoundException e) {
+			LOG.debug("Could not connect to running process.");
 			// continue
 		}
 

File: main/ui/src/main/java/org/cryptomator/ui/controllers/UnlockController.java
Patch:
@@ -167,7 +167,6 @@ void setVault(Vault vault) {
 		}
 		assert vault != null;
 		this.vault = vault;
-		passwordField.swipe();
 		advancedOptions.setVisible(false);
 		advancedOptionsButton.setText(localization.getString("unlock.button.advancedOptions.show"));
 		progressIndicator.setVisible(false);

File: main/commons/src/main/java/org/cryptomator/common/LazyInitializer.java
Patch:
@@ -48,7 +48,7 @@ public static <T, E extends Exception> T initializeLazily(AtomicReference<T> ref
 			try {
 				return reference.updateAndGet(invokeFactoryIfNull(factory));
 			} catch (InitializationException e) {
-				Throwables.throwIfUnchecked(e);
+				Throwables.throwIfUnchecked(e.getCause());
 				Throwables.throwIfInstanceOf(e.getCause(), exceptionType);
 				throw e;
 			}
@@ -61,7 +61,6 @@ private static <T, E extends Exception> UnaryOperator<T> invokeFactoryIfNull(Sup
 				try {
 					return factory.get();
 				} catch (Exception e) {
-					Throwables.throwIfUnchecked(e); // don't catch unchecked exceptions
 					throw new InitializationException(e);
 				}
 			} else {

File: main/ui/src/main/java/org/cryptomator/ui/model/AutoUnlocker.java
Patch:
@@ -5,6 +5,7 @@
  *******************************************************************************/
 package org.cryptomator.ui.model;
 
+import java.io.IOException;
 import java.nio.CharBuffer;
 import java.util.Arrays;
 import java.util.Collection;
@@ -74,7 +75,7 @@ private void unlockSilently(Vault vault) {
 		try {
 			vault.unlock(CharBuffer.wrap(storedPw));
 			mountSilently(vault);
-		} catch (CryptoException e) {
+		} catch (IOException | CryptoException e) {
 			LOG.error("Auto unlock failed.", e);
 		} finally {
 			Arrays.fill(storedPw, ' ');

File: main/ui/src/main/java/org/cryptomator/ui/controls/DirectoryListCell.java
Patch:
@@ -31,12 +31,11 @@ public class DirectoryListCell extends DraggableListCell<Vault> {
 	private final Label pathText = new Label();
 	private final VBox vbox = new VBox(4.0, nameText, pathText);
 	private final HBox hbox = new HBox(6.0, statusText, vbox);
-	private final ObjectExpression<Vault.State> vaultState;
 
 	private ContextMenu vaultContextMenu;
 
 	public DirectoryListCell() {
-		vaultState = ObjectExpression.objectExpression(EasyBind.select(itemProperty()).selectObject(Vault::stateProperty));
+		ObjectExpression<Vault.State> vaultState = ObjectExpression.objectExpression(EasyBind.select(itemProperty()).selectObject(Vault::stateProperty));
 
 		hbox.setAlignment(Pos.CENTER_LEFT);
 		hbox.setPrefWidth(1);

File: main/ui/src/main/java/org/cryptomator/ui/model/Vault.java
Patch:
@@ -167,6 +167,7 @@ private synchronized void unmount(Function<Mount, ? extends UnmountOperation> un
 		});
 		if (mount != null) {
 			unmountOperationChooser.apply(mount).unmount();
+			mount = null;
 		}
 		Platform.runLater(() -> {
 			state.set(State.UNLOCKED);

File: main/launcher/src/main/java/org/cryptomator/logging/DebugMode.java
Patch:
@@ -71,7 +71,7 @@ public LoggerUpgrade(String loggerName, Level minLevel) {
 
 		public void execute(LoggerContext context) {
 			Logger logger = context.getLogger(loggerName);
-			if (logger.getLevel().isGreaterOrEqual(level)) {
+			if (logger != null && logger.getEffectiveLevel().isGreaterOrEqual(level)) {
 				logger.setLevel(level);
 			}
 		}

File: main/launcher/src/main/java/org/cryptomator/launcher/InterProcessCommunicator.java
Patch:
@@ -49,6 +49,7 @@ public static InterProcessCommunicator start(InterProcessCommunicationProtocol e
 
 	// visible for testing
 	static InterProcessCommunicator start(Path portFilePath, InterProcessCommunicationProtocol endpoint) throws IOException {
+		System.setProperty("java.rmi.server.hostname", "localhost");
 		// try to connect to existing server:
 		int port = readPort(portFilePath);
 		LOG.debug("Connecting to running process on TCP port {}...", port);
@@ -95,7 +96,7 @@ private ClientCommunicator(int port) throws ConnectException, NotBoundException,
 			if (port == 0) {
 				throw new ConnectException("Can not connect to port 0.");
 			}
-			Registry registry = LocateRegistry.getRegistry(port);
+			Registry registry = LocateRegistry.getRegistry("localhost", port);
 			this.remote = (IpcProtocolRemote) registry.lookup(RMI_NAME);
 		}
 
@@ -127,7 +128,7 @@ public static class ServerCommunicator extends InterProcessCommunicator {
 		private final IpcProtocolRemoteImpl remote;
 
 		private ServerCommunicator(InterProcessCommunicationProtocol delegate) throws IOException {
-			this.socket = new ServerSocket(0, Byte.MAX_VALUE, InetAddress.getLocalHost());
+			this.socket = new ServerSocket(0, Byte.MAX_VALUE, InetAddress.getByName("localhost"));
 			RMIClientSocketFactory csf = RMISocketFactory.getDefaultSocketFactory();
 			SingletonServerSocketFactory ssf = new SingletonServerSocketFactory(socket);
 			this.registry = LocateRegistry.createRegistry(0, csf, ssf);

File: main/ui/src/main/java/org/cryptomator/ui/model/Vault.java
Patch:
@@ -216,7 +216,7 @@ public VaultSettings getVaultSettings() {
 		return vaultSettings;
 	}
 
-	public String getWebDavUrl() {
+	public synchronized String getWebDavUrl() {
 		return servlet.getServletRootUri().toString();
 	}
 

File: main/commons/src/main/java/org/cryptomator/common/settings/SettingsProvider.java
Patch:
@@ -97,6 +97,9 @@ private Settings load() {
 		try (InputStream in = Files.newInputStream(settingsPath, StandardOpenOption.READ); //
 				Reader reader = new InputStreamReader(in, StandardCharsets.UTF_8)) {
 			settings = gson.fromJson(reader, Settings.class);
+			if (settings == null) {
+				throw new IOException("Unexpected EOF");
+			}
 			LOG.info("Settings loaded from " + settingsPath);
 		} catch (IOException e) {
 			LOG.info("Failed to load settings, creating new one.");

File: main/ui/src/main/java/org/cryptomator/ui/model/AutoUnlocker.java
Patch:
@@ -69,6 +69,7 @@ private void unlockSilently(Vault vault) {
 		char[] storedPw = keychainAccess.get().loadPassphrase(vault.getId());
 		if (storedPw == null) {
 			LOG.warn("No passphrase stored in keychain for vault registered for auto unlocking: {}", vault.getPath());
+			return;
 		}
 		try {
 			vault.unlock(CharBuffer.wrap(storedPw));

File: main/ui/src/main/java/org/cryptomator/ui/controllers/MainController.java
Patch:
@@ -264,7 +264,7 @@ private void didClickAddExistingVaults(ActionEvent event) {
 		final List<File> files = fileChooser.showOpenMultipleDialog(mainWindow);
 		if (files != null) {
 			for (final File file : files) {
-				addVault(file.toPath(), false);
+				addVault(file.toPath(), true);
 			}
 		}
 	}

File: main/commons/src/test/java/org/cryptomator/common/settings/SettingsJsonAdapterTest.java
Patch:
@@ -32,7 +32,7 @@ public void testDeserialize() throws IOException {
 		Assert.assertTrue(settings.checkForUpdates().get());
 		Assert.assertEquals(2, settings.getDirectories().size());
 		Assert.assertEquals(8080, settings.port().get());
-		Assert.assertTrue(settings.useIpv6().get());
+		// Assert.assertTrue(settings.useIpv6().get()); temporarily ignored
 		Assert.assertEquals(42, settings.numTrayNotifications().get());
 		Assert.assertEquals("dav", settings.preferredGvfsScheme().get());
 	}

File: main/commons/src/main/java/org/cryptomator/common/settings/Settings.java
Patch:
@@ -10,6 +10,8 @@
 
 import java.util.function.Consumer;
 
+import org.apache.commons.lang3.SystemUtils;
+
 import javafx.beans.property.BooleanProperty;
 import javafx.beans.property.IntegerProperty;
 import javafx.beans.property.SimpleBooleanProperty;
@@ -27,7 +29,7 @@ public class Settings {
 	public static final int MAX_PORT = 65535;
 	public static final boolean DEFAULT_CHECK_FOR_UDPATES = true;
 	public static final int DEFAULT_PORT = 42427;
-	public static final boolean DEFAULT_USE_IPV6 = false;
+	public static final boolean DEFAULT_USE_IPV6 = SystemUtils.IS_OS_WINDOWS;
 	public static final int DEFAULT_NUM_TRAY_NOTIFICATIONS = 3;
 	public static final String DEFAULT_GVFS_SCHEME = "dav";
 	public static final boolean DEFAULT_DEBUG_MODE = false;

File: main/ui/src/main/java/org/cryptomator/ui/controllers/UnlockedController.java
Patch:
@@ -92,7 +92,7 @@ private void vaultChanged(Vault newVault) {
 			return;
 		}
 
-		if (!vault.get().isMounted()) {
+		if (newVault.getVaultSettings().mountAfterUnlock().get() && !newVault.isMounted()) {
 			// TODO Markus Kreusch #393: hyperlink auf FAQ oder sowas?
 			messageLabel.setText(localization.getString("unlocked.label.mountFailed"));
 		}

File: main/filesystem-crypto/src/main/java/org/cryptomator/crypto/engine/impl/Scrypt.java
Patch:
@@ -27,7 +27,7 @@ private Scrypt() {
 	 * 
 	 * @param passphrase The passphrase
 	 * @param salt Salt, ideally randomly generated
-	 * @param costParam Cost parameter <code>N</code>, larger than 1, a power of 2 and less than <code>2^(128 * costParam / 8)</code>
+	 * @param costParam Cost parameter <code>N</code>, larger than 1, a power of 2 and less than <code>2^(128 * blockSize / 8)</code>
 	 * @param blockSize Block size <code>r</code>
 	 * @param keyLengthInBytes Key output length <code>dkLen</code>
 	 * @return Derived key

File: main/filesystem-crypto/src/main/java/org/cryptomator/crypto/engine/impl/Scrypt.java
Patch:
@@ -27,7 +27,7 @@ private Scrypt() {
 	 * 
 	 * @param passphrase The passphrase
 	 * @param salt Salt, ideally randomly generated
-	 * @param costParam Cost parameter <code>N</code>, larger than 1, a power of 2 and less than <code>2^(128 * costParam / 8)</code>
+	 * @param costParam Cost parameter <code>N</code>, larger than 1, a power of 2 and less than <code>2^(128 * blockSize / 8)</code>
 	 * @param blockSize Block size <code>r</code>
 	 * @param keyLengthInBytes Key output length <code>dkLen</code>
 	 * @return Derived key

File: main/ui/src/main/java/org/cryptomator/ui/controllers/MainController.java
Patch:
@@ -69,6 +69,7 @@ public class MainController extends LocalizedFXMLViewController {
 	private static final Logger LOG = LoggerFactory.getLogger(MainController.class);
 
 	private final Stage mainWindow;
+	private final Settings settings;
 	private final VaultFactory vaultFactoy;
 	private final Lazy<WelcomeController> welcomeController;
 	private final Lazy<InitializeController> initializeController;
@@ -95,6 +96,7 @@ public MainController(@Named("mainWindow") Stage mainWindow, Localization locali
 			VaultList vaults) {
 		super(localization);
 		this.mainWindow = mainWindow;
+		this.settings = settings;
 		this.vaultFactoy = vaultFactoy;
 		this.welcomeController = welcomeController;
 		this.initializeController = initializeController;
@@ -231,7 +233,7 @@ public void addVault(final Path path, boolean select) {
 			return;
 		}
 
-		final VaultSettings vaultSettings = VaultSettings.withRandomId();
+		final VaultSettings vaultSettings = VaultSettings.withRandomId(settings);
 		vaultSettings.path().set(vaultPath);
 		final Vault vault = vaultFactoy.get(vaultSettings);
 		if (!vaults.contains(vault)) {

File: main/ui/src/main/java/org/cryptomator/ui/settings/Settings.java
Patch:
@@ -59,7 +59,7 @@ private void somethingChanged(ObservableValue<?> observable, Object oldValue, Ob
 		this.save();
 	}
 
-	public void save() {
+	void save() {
 		if (saveCmd != null) {
 			saveCmd.accept(this);
 		}

File: main/ui/src/main/java/org/cryptomator/ui/settings/SettingsJsonAdapter.java
Patch:
@@ -60,7 +60,7 @@ public Settings read(JsonReader in) throws IOException {
 			String name = in.nextName();
 			switch (name) {
 			case "directories":
-				settings.getDirectories().addAll(readVaultSettingsArray(in));
+				settings.getDirectories().addAll(readVaultSettingsArray(in, settings));
 				break;
 			case "checkForUpdatesEnabled":
 				settings.checkForUpdates().set(in.nextBoolean());
@@ -90,11 +90,11 @@ public Settings read(JsonReader in) throws IOException {
 		return settings;
 	}
 
-	private List<VaultSettings> readVaultSettingsArray(JsonReader in) throws IOException {
+	private List<VaultSettings> readVaultSettingsArray(JsonReader in, Settings settings) throws IOException {
 		List<VaultSettings> result = new ArrayList<>();
 		in.beginArray();
 		while (!JsonToken.END_ARRAY.equals(in.peek())) {
-			result.add(vaultSettingsJsonAdapter.read(in));
+			result.add(vaultSettingsJsonAdapter.read(in, settings));
 		}
 		in.endArray();
 		return result;

File: main/frontend-webdav/src/test/java/org/cryptomator/frontend/webdav/WebDavServerTest.java
Patch:
@@ -376,7 +376,7 @@ public void testGetWithUnsatisfiableRange() throws IOException {
 		final HttpMethod getMethod = new GetMethod(servletRoot + "/foo.txt");
 		getMethod.addRequestHeader("Range", "chunks=1-2");
 		final int statusCode = client.executeMethod(getMethod);
-		Assert.assertEquals(416, statusCode);
+		Assert.assertEquals(200, statusCode);
 		Assert.assertArrayEquals(testContent, getMethod.getResponseBody());
 		getMethod.releaseConnection();
 	}

File: main/filesystem-crypto/src/main/java/org/cryptomator/filesystem/crypto/ConflictResolver.java
Patch:
@@ -68,7 +68,7 @@ private File resolveConflict(File conflictingFile, MatchResult matchResult) {
 					String alternativeCiphertext = nameEncryptor.apply(alternativeCleartext).get();
 					alternativeFile = folder.file(isDirectory ? DIR_PREFIX + alternativeCiphertext : alternativeCiphertext);
 				} while (alternativeFile.exists());
-				LOG.info("Detected conflict {}:\n{}\n{}", conflictId, canonicalFile, conflictingFile);
+				LOG.debug("Detected conflict {}:\n{}\n{}", conflictId, canonicalFile, conflictingFile);
 				conflictingFile.moveTo(alternativeFile);
 				return alternativeFile;
 			}

File: main/ui/src/main/java/org/cryptomator/ui/CryptomatorComponent.java
Patch:
@@ -37,6 +37,8 @@ interface CryptomatorComponent {
 
 	ExitUtil exitUtil();
 
+	DebugMode debugMode();
+
 	Optional<MacFunctions> nativeMacFunctions();
 
 }

File: main/filesystem-crypto/src/main/java/org/cryptomator/crypto/engine/impl/FilenameCryptorImpl.java
Patch:
@@ -14,7 +14,6 @@
 import java.security.NoSuchAlgorithmException;
 import java.util.regex.Pattern;
 
-import javax.crypto.AEADBadTagException;
 import javax.crypto.IllegalBlockSizeException;
 import javax.crypto.SecretKey;
 
@@ -23,6 +22,7 @@
 import org.cryptomator.crypto.engine.AuthenticationFailedException;
 import org.cryptomator.crypto.engine.FilenameCryptor;
 import org.cryptomator.siv.SivMode;
+import org.cryptomator.siv.UnauthenticCiphertextException;
 
 class FilenameCryptorImpl implements FilenameCryptor {
 
@@ -71,7 +71,7 @@ public String decryptFilename(String ciphertextName, byte[]... associatedData) t
 		try {
 			final byte[] cleartextBytes = AES_SIV.get().decrypt(encryptionKey, macKey, encryptedBytes, associatedData);
 			return new String(cleartextBytes, UTF_8);
-		} catch (AEADBadTagException | IllegalBlockSizeException e) {
+		} catch (UnauthenticCiphertextException | IllegalBlockSizeException e) {
 			throw new AuthenticationFailedException("Invalid ciphertext.", e);
 		}
 	}

File: main/frontend-webdav/src/main/java/org/cryptomator/frontend/webdav/mount/WindowsWebDavMounter.java
Patch:
@@ -95,7 +95,7 @@ private CommandResult mount(URI uri, String driveLetter) throws CommandFailedExc
 		}
 
 		final String driveLetterStr = AUTO_ASSIGN_DRIVE_LETTER.equals(driveLetter) ? AUTO_ASSIGN_DRIVE_LETTER : driveLetter + ":";
-		final Script mountScript = fromLines("net use %DRIVE_LETTER%a \\\\%DAV_HOST%@%DAV_PORT%\\DavWWWRoot%DAV_UNC_PATH% /persistent:no");
+		final Script mountScript = fromLines("net use %DRIVE_LETTER% \\\\%DAV_HOST%@%DAV_PORT%\\DavWWWRoot%DAV_UNC_PATH% /persistent:no");
 		mountScript.addEnv("DRIVE_LETTER", driveLetterStr);
 		mountScript.addEnv("DAV_HOST", uri.getHost());
 		mountScript.addEnv("DAV_PORT", String.valueOf(uri.getPort()));

File: main/ui/src/main/java/org/cryptomator/ui/model/Vault.java
Patch:
@@ -168,7 +168,7 @@ private Map<MountParam, Optional<String>> getMountParams(Settings settings) {
 		);
 	}
 
-	public void reveal() throws CommandFailedException {
+	public synchronized void reveal() throws CommandFailedException {
 		Optionals.ifPresent(filesystemFrontend.get(), Frontend::reveal);
 	}
 
@@ -190,7 +190,7 @@ public boolean shouldSkipAuthentication(String cleartextPath) {
 	// Getter/Setter
 	// *******************************************************************************/
 
-	public String getWebDavUrl() {
+	public synchronized String getWebDavUrl() {
 		return filesystemFrontend.get().map(Frontend::getWebDavUrl).orElseThrow(IllegalStateException::new);
 	}
 

File: main/filesystem-crypto/src/main/java/org/cryptomator/crypto/engine/impl/CryptorImpl.java
Patch:
@@ -109,7 +109,7 @@ public void readKeysFromMasterkeyFile(byte[] masterkeyFileContents, CharSequence
 		assert keyFile != null;
 
 		// check version
-		if (CURRENT_VAULT_VERSION != keyFile.getVersion()) {
+		if (!CURRENT_VAULT_VERSION.equals(keyFile.getVersion())) {
 			throw new UnsupportedVaultFormatException(keyFile.getVersion(), CURRENT_VAULT_VERSION);
 		}
 

File: main/filesystem-crypto/src/main/java/org/cryptomator/filesystem/crypto/Masterkeys.java
Patch:
@@ -103,6 +103,7 @@ private static void readMasterKey(File file, Cryptor cryptor, CharSequence passp
 
 	private static void writeMasterKey(File file, Cryptor cryptor, CharSequence passphrase) throws UncheckedIOException {
 		try (WritableFile writable = file.openWritable()) {
+			writable.truncate();
 			final byte[] fileContents = cryptor.writeKeysToMasterkeyFile(passphrase);
 			writable.write(ByteBuffer.wrap(fileContents));
 		}

File: main/filesystem-crypto/src/main/java/org/cryptomator/crypto/engine/impl/FilenameCryptorImpl.java
Patch:
@@ -15,6 +15,7 @@
 import java.util.regex.Pattern;
 
 import javax.crypto.AEADBadTagException;
+import javax.crypto.IllegalBlockSizeException;
 import javax.crypto.SecretKey;
 
 import org.apache.commons.codec.binary.Base32;
@@ -70,8 +71,8 @@ public String decryptFilename(String ciphertextName, byte[]... associatedData) t
 		try {
 			final byte[] cleartextBytes = AES_SIV.get().decrypt(encryptionKey, macKey, encryptedBytes, associatedData);
 			return new String(cleartextBytes, UTF_8);
-		} catch (AEADBadTagException e) {
-			throw new AuthenticationFailedException("Authentication failed.", e);
+		} catch (AEADBadTagException | IllegalBlockSizeException e) {
+			throw new AuthenticationFailedException("Invalid ciphertext.", e);
 		}
 	}
 

File: main/commons/src/main/java/org/cryptomator/common/ConsumerThrowingException.java
Patch:
@@ -1,7 +1,7 @@
 package org.cryptomator.common;
 
 @FunctionalInterface
-public interface ConsumerThrowingException<T, E extends Exception> {
+public interface ConsumerThrowingException<T, E extends Throwable> {
 
 	void accept(T t) throws E;
 

File: main/commons/src/main/java/org/cryptomator/common/RunnableThrowingException.java
Patch:
@@ -1,7 +1,7 @@
 package org.cryptomator.common;
 
 @FunctionalInterface
-public interface RunnableThrowingException<T extends Exception> {
+public interface RunnableThrowingException<T extends Throwable> {
 
 	void run() throws T;
 

File: main/filesystem-crypto/src/main/java/org/cryptomator/crypto/engine/impl/FilenameCryptorImpl.java
Patch:
@@ -27,7 +27,7 @@ class FilenameCryptorImpl implements FilenameCryptor {
 
 	private static final BaseNCodec BASE32 = new Base32();
 	// https://tools.ietf.org/html/rfc4648#section-6
-	private static final Pattern BASE32_PATTERN = Pattern.compile("([A-Z2-7]{8})*[A-Z2-7=]{8}");
+	private static final Pattern BASE32_PATTERN = Pattern.compile("^([A-Z2-7]{8})*[A-Z2-7=]{8}");
 	private static final ThreadLocal<MessageDigest> SHA1 = new ThreadLocalSha1();
 	private static final ThreadLocal<SivMode> AES_SIV = new ThreadLocal<SivMode>() {
 		@Override

File: main/filesystem-nameshortening/src/main/java/org/cryptomator/filesystem/shortening/ConflictResolver.java
Patch:
@@ -14,7 +14,7 @@ final class ConflictResolver {
 
 	private static final Logger LOG = LoggerFactory.getLogger(ConflictResolver.class);
 	private static final String LONG_NAME_FILE_EXT = ".lng";
-	private static final Pattern BASE32_PATTERN = Pattern.compile("([A-Z0-9]{8})*[A-Z0-9=]{8}");
+	private static final Pattern BASE32_PATTERN = Pattern.compile("^0?([A-Z2-7]{8})*[A-Z2-7=]{8}");
 	private static final int UUID_FIRST_GROUP_STRLEN = 8;
 
 	private ConflictResolver() {

File: main/frontend-api/src/main/java/org/cryptomator/frontend/FrontendFactory.java
Patch:
@@ -16,10 +16,11 @@ public interface FrontendFactory {
 	 * Provides a new frontend to access the given folder.
 	 * 
 	 * @param root Root resource accessible through this frontend.
-	 * @param uniqueName Name of the frontend, i.e. used to create subresources for the different frontends inside of a common virtual drive.
+	 * @param id unique id of the frontend, i.e. used to generate a unique uri
+	 * @param name Name of the frontend, i.e. used to generate a readable/recognizable name of a common virtual drive
 	 * @return A new frontend
 	 * @throws FrontendCreationFailedException If creation was not possible.
 	 */
-	Frontend create(Folder root, String uniqueName) throws FrontendCreationFailedException;
+	Frontend create(Folder root, FrontendId id, String name) throws FrontendCreationFailedException;
 
 }

File: main/frontend-webdav/src/main/java/org/cryptomator/frontend/webdav/jackrabbitservlet/DavFileWithRange.java
Patch:
@@ -57,6 +57,9 @@ public void spool(OutputContext outputContext) throws IOException {
 			final Long rangeLength = range.getRight() - range.getLeft() + 1;
 			outputContext.setContentLength(rangeLength);
 			outputContext.setProperty(HttpHeader.CONTENT_RANGE.asString(), contentRangeResponseHeader(range.getLeft(), range.getRight(), contentLength));
+			outputContext.setContentType(CONTENT_TYPE_VALUE);
+			outputContext.setProperty(CONTENT_DISPOSITION_HEADER, CONTENT_DISPOSITION_VALUE);
+			outputContext.setProperty(X_CONTENT_TYPE_OPTIONS_HEADER, X_CONTENT_TYPE_OPTIONS_VALUE);
 			src.position(range.getLeft());
 			InputStream limitedIn = ByteStreams.limit(Channels.newInputStream(src), rangeLength);
 			ByteStreams.copy(limitedIn, out);

File: main/frontend-webdav/src/main/java/org/cryptomator/frontend/webdav/jackrabbitservlet/ExclusiveSharedLockManager.java
Patch:
@@ -69,7 +69,8 @@ private synchronized ActiveLock createLockInternal(LockInfo lockInfo, DavNode<?>
 		}
 
 		String token = DavConstants.OPAQUE_LOCK_TOKEN_PREFIX + UUID.randomUUID();
-		return lockedResources.computeIfAbsent(locator, loc -> new HashMap<>()).computeIfAbsent(token, t -> new ExclusiveSharedLock(t, lockInfo));
+		Map<String, ActiveLock> lockMap = Objects.requireNonNull(lockedResources.computeIfAbsent(locator, loc -> new HashMap<>()));
+		return lockMap.computeIfAbsent(token, t -> new ExclusiveSharedLock(t, lockInfo));
 	}
 
 	private void removedExpiredLocksInLocatorHierarchy(FileSystemResourceLocator locator) {

File: main/frontend-webdav/src/main/java/org/cryptomator/frontend/webdav/mount/FallbackWebDavMounter.java
Patch:
@@ -23,7 +23,7 @@
 final class FallbackWebDavMounter implements WebDavMounterStrategy {
 
 	@Override
-	public boolean shouldWork() {
+	public boolean shouldWork(Map<MountParam, Optional<String>> mountParams) {
 		return true;
 	}
 

File: main/frontend-webdav/src/main/java/org/cryptomator/frontend/webdav/mount/MacOsXAppleScriptWebDavMounter.java
Patch:
@@ -38,7 +38,7 @@ final class MacOsXAppleScriptWebDavMounter implements WebDavMounterStrategy {
 	}
 
 	@Override
-	public boolean shouldWork() {
+	public boolean shouldWork(Map<MountParam, Optional<String>> mountParams) {
 		return SystemUtils.IS_OS_MAC_OSX && semVerComparator.compare(SystemUtils.OS_VERSION, "10.10") >= 0;
 	}
 

File: main/frontend-webdav/src/main/java/org/cryptomator/frontend/webdav/mount/MacOsXShellScriptWebDavMounter.java
Patch:
@@ -37,7 +37,7 @@ final class MacOsXShellScriptWebDavMounter implements WebDavMounterStrategy {
 	}
 
 	@Override
-	public boolean shouldWork() {
+	public boolean shouldWork(Map<MountParam, Optional<String>> mountParams) {
 		return SystemUtils.IS_OS_MAC_OSX && semVerComparator.compare(SystemUtils.OS_VERSION, "10.10") < 0;
 	}
 

File: main/frontend-webdav/src/test/java/org/cryptomator/frontend/webdav/WebDavComponent.java
Patch:
@@ -10,12 +10,10 @@
 
 import javax.inject.Singleton;
 
-import org.cryptomator.common.CommonsModule;
-
 import dagger.Component;
 
 @Singleton
-@Component(modules = {CommonsModule.class})
+@Component(modules = {WebDavModule.class})
 public interface WebDavComponent {
 
 	WebDavServer server();

File: main/filesystem-crypto/src/main/java/org/cryptomator/filesystem/crypto/ConflictResolver.java
Patch:
@@ -87,7 +87,7 @@ private boolean isSameFileBasedOnSample(File file1, File file2, int sampleSize)
 				ByteBuffer beginOfFile2 = ByteBuffer.allocate(sampleSize);
 				int bytesRead1 = r1.read(beginOfFile1);
 				int bytesRead2 = r2.read(beginOfFile2);
-				if (bytesRead1 == sampleSize && bytesRead2 == sampleSize) {
+				if (bytesRead1 == bytesRead2) {
 					beginOfFile1.flip();
 					beginOfFile2.flip();
 					return beginOfFile1.equals(beginOfFile2);

File: main/frontend-webdav/src/main/java/org/cryptomator/frontend/webdav/jackrabbitservlet/ExclusiveSharedLockManager.java
Patch:
@@ -69,7 +69,8 @@ private synchronized ActiveLock createLockInternal(LockInfo lockInfo, DavNode<?>
 		}
 
 		String token = DavConstants.OPAQUE_LOCK_TOKEN_PREFIX + UUID.randomUUID();
-		return lockedResources.computeIfAbsent(locator, loc -> new HashMap<>()).computeIfAbsent(token, t -> new ExclusiveSharedLock(t, lockInfo));
+		Map<String, ActiveLock> lockMap = Objects.requireNonNull(lockedResources.computeIfAbsent(locator, loc -> new HashMap<>()));
+		return lockMap.computeIfAbsent(token, t -> new ExclusiveSharedLock(t, lockInfo));
 	}
 
 	private void removedExpiredLocksInLocatorHierarchy(FileSystemResourceLocator locator) {

File: main/frontend-api/src/main/java/org/cryptomator/frontend/FrontendId.java
Patch:
@@ -2,12 +2,13 @@
 
 import static java.util.UUID.randomUUID;
 
+import java.io.Serializable;
 import java.nio.ByteBuffer;
 import java.nio.charset.StandardCharsets;
 import java.util.Base64;
 import java.util.UUID;
 
-public class FrontendId {
+public class FrontendId implements Serializable {
 
 	public static final String FRONTEND_ID_PATTERN = "[a-zA-Z0-9_-]{12}";
 

File: main/frontend-webdav/src/main/java/org/cryptomator/frontend/webdav/Tarpit.java
Patch:
@@ -8,6 +8,7 @@
 import static java.lang.Math.max;
 import static java.lang.System.currentTimeMillis;
 
+import java.io.Serializable;
 import java.util.HashSet;
 import java.util.Optional;
 import java.util.Set;
@@ -21,7 +22,7 @@
 import org.slf4j.LoggerFactory;
 
 @Singleton
-class Tarpit {
+class Tarpit implements Serializable {
 
 	private static final Logger LOG = LoggerFactory.getLogger(Tarpit.class);
 	private static final long DELAY_MS = 10000;

File: main/frontend-api/src/main/java/org/cryptomator/frontend/FrontendId.java
Patch:
@@ -3,6 +3,7 @@
 import static java.util.UUID.randomUUID;
 
 import java.nio.ByteBuffer;
+import java.nio.charset.StandardCharsets;
 import java.util.Base64;
 import java.util.UUID;
 
@@ -37,7 +38,7 @@ private static String generateId() {
 
 	private static String asBase64String(ByteBuffer bytes) {
 		ByteBuffer base64Buffer = Base64.getUrlEncoder().encode(bytes);
-		return new String(asByteArray(base64Buffer));
+		return new String(asByteArray(base64Buffer), StandardCharsets.US_ASCII);
 	}
 
 	private static ByteBuffer nineBytesFrom(UUID uuid) {

File: main/frontend-webdav/src/main/java/org/cryptomator/frontend/webdav/WebDavFrontend.java
Patch:
@@ -55,10 +55,10 @@ public void mount(Map<MountParam, Optional<String>> mountParams) throws CommandF
 		mount = webdavMounterProvider.chooseMounter(mountParams).mount(uri, mountParams);
 	}
 
-	@Override
-	public void unmount() throws CommandFailedException {
+	private void unmount() throws CommandFailedException {
 		if (mount != null) {
 			mount.unmount();
+			mount = null;
 		}
 	}
 

File: main/frontend-webdav/src/main/java/org/cryptomator/frontend/webdav/mount/WindowsWebDavMounter.java
Patch:
@@ -160,7 +160,7 @@ private class WindowsWebDavMount extends AbstractWebDavMount {
 		private WindowsWebDavMount(String driveLetter) {
 			this.driveLetter = CharUtils.toCharacterObject(driveLetter);
 			this.openExplorerScript = fromLines("start explorer.exe " + driveLetter + ":");
-			this.unmountScript = fromLines("net use " + driveLetter + ": /delete");
+			this.unmountScript = fromLines("net use " + driveLetter + ": /delete /no");
 		}
 
 		@Override

File: main/filesystem-crypto/src/main/java/org/cryptomator/crypto/engine/impl/FilenameCryptorImpl.java
Patch:
@@ -27,7 +27,7 @@ class FilenameCryptorImpl implements FilenameCryptor {
 
 	private static final BaseNCodec BASE32 = new Base32();
 	// https://tools.ietf.org/html/rfc4648#section-6
-	private static final Pattern BASE32_PATTERN = Pattern.compile("([A-Z2-7]{8})*[A-Z2-7=]{8}");
+	private static final Pattern BASE32_PATTERN = Pattern.compile("^([A-Z2-7]{8})*[A-Z2-7=]{8}");
 	private static final ThreadLocal<MessageDigest> SHA1 = new ThreadLocalSha1();
 	private static final ThreadLocal<SivMode> AES_SIV = new ThreadLocal<SivMode>() {
 		@Override

File: main/filesystem-nameshortening/src/main/java/org/cryptomator/filesystem/shortening/ConflictResolver.java
Patch:
@@ -14,7 +14,7 @@ final class ConflictResolver {
 
 	private static final Logger LOG = LoggerFactory.getLogger(ConflictResolver.class);
 	private static final String LONG_NAME_FILE_EXT = ".lng";
-	private static final Pattern BASE32_PATTERN = Pattern.compile("([A-Z0-9]{8})*[A-Z0-9=]{8}");
+	private static final Pattern BASE32_PATTERN = Pattern.compile("^0?([A-Z2-7]{8})*[A-Z2-7=]{8}");
 	private static final int UUID_FIRST_GROUP_STRLEN = 8;
 
 	private ConflictResolver() {

File: main/frontend-webdav/src/main/java/org/cryptomator/frontend/webdav/mount/WindowsWebDavMounter.java
Patch:
@@ -133,7 +133,7 @@ private void addProxyOverrides(URI uri) throws IOException, CommandFailedExcepti
 				String addStdErr = IOUtils.toString(addCmd.getErrorStream(), StandardCharsets.UTF_8);
 				throw new CommandFailedException(addStdErr);
 			}
-		} catch (IOException e) {
+		} catch (IOException | CommandFailedException e) {
 			LOG.info("Failed to add proxy overrides", e);
 		} catch (InterruptedException e) {
 			Thread.currentThread().interrupt();

File: main/frontend-webdav/src/main/java/org/cryptomator/frontend/webdav/mount/WindowsWebDavMounter.java
Patch:
@@ -133,6 +133,8 @@ private void addProxyOverrides(URI uri) throws IOException, CommandFailedExcepti
 				String addStdErr = IOUtils.toString(addCmd.getErrorStream(), StandardCharsets.UTF_8);
 				throw new CommandFailedException(addStdErr);
 			}
+		} catch (IOException e) {
+			LOG.info("Failed to add proxy overrides", e);
 		} catch (InterruptedException e) {
 			Thread.currentThread().interrupt();
 			InterruptedIOException ioException = new InterruptedIOException();

File: main/frontend-webdav/src/main/java/org/cryptomator/frontend/webdav/WebDavServer.java
Patch:
@@ -47,7 +47,7 @@ public class WebDavServer implements FrontendFactory {
 	private final WebDavMounterProvider webdavMounterProvider;
 
 	@Inject
-	WebDavServer(WebDavServletContextFactory servletContextFactory, WebDavMounterProvider webdavMounterProvider) {
+	WebDavServer(WebDavServletContextFactory servletContextFactory, WebDavMounterProvider webdavMounterProvider, DefaultServlet defaultServlet) {
 		final BlockingQueue<Runnable> queue = new LinkedBlockingQueue<>(MAX_PENDING_REQUESTS);
 		final ThreadPool tp = new QueuedThreadPool(MAX_THREADS, MIN_THREADS, THREAD_IDLE_SECONDS, queue);
 		this.server = new Server(tp);
@@ -56,7 +56,7 @@ public class WebDavServer implements FrontendFactory {
 		this.servletContextFactory = servletContextFactory;
 		this.webdavMounterProvider = webdavMounterProvider;
 		
-		servletCollection.addHandler(WindowsCompatibilityServlet.createServletContextHandler());
+		servletCollection.addHandler(defaultServlet.createServletContextHandler());
 		server.setConnectors(new Connector[] {localConnector});
 		server.setHandler(servletCollection);
 	}

File: main/frontend-webdav/src/main/java/org/cryptomator/frontend/webdav/WebDavServletContextFactory.java
Patch:
@@ -35,10 +35,9 @@
 class WebDavServletContextFactory {
 
 	private static final String WILDCARD = "/*";
-
+	
 	@Inject
-	public WebDavServletContextFactory() {
-	}
+	public WebDavServletContextFactory() {}
 
 	/**
 	 * Creates a new Jetty ServletContextHandler, that can be be added to a servletCollection as follows:

File: main/frontend-webdav/src/main/java/org/cryptomator/frontend/webdav/WebDavServletContextFactory.java
Patch:
@@ -22,6 +22,7 @@
 import org.cryptomator.frontend.webdav.filters.LoopbackFilter;
 import org.cryptomator.frontend.webdav.filters.MacChunkedPutCompatibilityFilter;
 import org.cryptomator.frontend.webdav.filters.MkcolComplianceFilter;
+import org.cryptomator.frontend.webdav.filters.PostRequestBlockingFilter;
 import org.cryptomator.frontend.webdav.filters.UriNormalizationFilter;
 import org.cryptomator.frontend.webdav.filters.UriNormalizationFilter.ResourceTypeChecker;
 import org.cryptomator.frontend.webdav.filters.UriNormalizationFilter.ResourceTypeChecker.ResourceType;
@@ -67,6 +68,7 @@ public ServletContextHandler create(URI contextRoot, Folder root) {
 		final ServletHolder servletHolder = new ServletHolder(contextPath, new WebDavServlet(contextRoot, root));
 		servletContext.addServlet(servletHolder, WILDCARD);
 		servletContext.addFilter(LoopbackFilter.class, WILDCARD, EnumSet.of(DispatcherType.REQUEST));
+		servletContext.addFilter(PostRequestBlockingFilter.class, WILDCARD, EnumSet.of(DispatcherType.REQUEST));
 		servletContext.addFilter(MkcolComplianceFilter.class, WILDCARD, EnumSet.of(DispatcherType.REQUEST));
 		servletContext.addFilter(AcceptRangeFilter.class, WILDCARD, EnumSet.of(DispatcherType.REQUEST));
 		servletContext.addFilter(new FilterHolder(new UriNormalizationFilter(resourceTypeChecker)), WILDCARD, EnumSet.of(DispatcherType.REQUEST));

File: main/frontend-webdav/src/main/java/org/cryptomator/frontend/webdav/jackrabbitservlet/DavFile.java
Patch:
@@ -43,6 +43,8 @@ class DavFile extends DavNode<FileLocator> {
 	protected static final String CONTENT_TYPE_VALUE = "application/octet-stream";
 	protected static final String CONTENT_DISPOSITION_HEADER = "Content-Disposition";
 	protected static final String CONTENT_DISPOSITION_VALUE = "attachment";
+	protected static final String X_CONTENT_TYPE_OPTIONS_HEADER = "X-Content-Type-Options";
+	protected static final String X_CONTENT_TYPE_OPTIONS_VALUE = "nosniff";
 
 	public DavFile(FilesystemResourceFactory factory, LockManager lockManager, DavSession session, FileLocator node) {
 		super(factory, lockManager, session, node);
@@ -61,6 +63,7 @@ public void spool(OutputContext outputContext) throws IOException {
 		}
 		outputContext.setContentType(CONTENT_TYPE_VALUE);
 		outputContext.setProperty(CONTENT_DISPOSITION_HEADER, CONTENT_DISPOSITION_VALUE);
+		outputContext.setProperty(X_CONTENT_TYPE_OPTIONS_HEADER, X_CONTENT_TYPE_OPTIONS_VALUE);
 		try (ReadableFile src = node.openReadable(); WritableByteChannel dst = Channels.newChannel(outputContext.getOutputStream())) {
 			outputContext.setContentLength(src.size());
 			ByteStreams.copy(src, dst);

File: main/frontend-webdav/src/main/java/org/cryptomator/frontend/webdav/jackrabbitservlet/DavFileWithRange.java
Patch:
@@ -59,6 +59,7 @@ public void spool(OutputContext outputContext) throws IOException {
 			outputContext.setProperty(HttpHeader.CONTENT_RANGE.asString(), contentRangeResponseHeader(range.getLeft(), range.getRight(), contentLength));
 			outputContext.setContentType(CONTENT_TYPE_VALUE);
 			outputContext.setProperty(CONTENT_DISPOSITION_HEADER, CONTENT_DISPOSITION_VALUE);
+			outputContext.setProperty(X_CONTENT_TYPE_OPTIONS_HEADER, X_CONTENT_TYPE_OPTIONS_VALUE);
 			src.position(range.getLeft());
 			InputStream limitedIn = ByteStreams.limit(Channels.newInputStream(src), rangeLength);
 			ByteStreams.copy(limitedIn, out);

File: main/frontend-webdav/src/main/java/org/cryptomator/frontend/webdav/jackrabbitservlet/DavFileWithRange.java
Patch:
@@ -57,6 +57,8 @@ public void spool(OutputContext outputContext) throws IOException {
 			final Long rangeLength = range.getRight() - range.getLeft() + 1;
 			outputContext.setContentLength(rangeLength);
 			outputContext.setProperty(HttpHeader.CONTENT_RANGE.asString(), contentRangeResponseHeader(range.getLeft(), range.getRight(), contentLength));
+			outputContext.setContentType(CONTENT_TYPE_VALUE);
+			outputContext.setProperty(CONTENT_DISPOSITION_HEADER, CONTENT_DISPOSITION_VALUE);
 			src.position(range.getLeft());
 			InputStream limitedIn = ByteStreams.limit(Channels.newInputStream(src), rangeLength);
 			ByteStreams.copy(limitedIn, out);

File: main/frontend-webdav/src/main/java/org/cryptomator/frontend/webdav/WebDavFrontend.java
Patch:
@@ -45,7 +45,7 @@ public void close() throws Exception {
 
 	@Override
 	public void mount(Map<MountParam, Optional<String>> mountParams) throws CommandFailedException {
-		mount = webdavMounterProvider.get().mount(uri, mountParams);
+		mount = webdavMounterProvider.chooseMounter(mountParams).mount(uri, mountParams);
 	}
 
 	@Override

File: main/frontend-webdav/src/main/java/org/cryptomator/frontend/webdav/mount/FallbackWebDavMounter.java
Patch:
@@ -23,7 +23,7 @@
 final class FallbackWebDavMounter implements WebDavMounterStrategy {
 
 	@Override
-	public boolean shouldWork() {
+	public boolean shouldWork(Map<MountParam, Optional<String>> mountParams) {
 		return true;
 	}
 

File: main/frontend-webdav/src/main/java/org/cryptomator/frontend/webdav/mount/MacOsXAppleScriptWebDavMounter.java
Patch:
@@ -38,7 +38,7 @@ final class MacOsXAppleScriptWebDavMounter implements WebDavMounterStrategy {
 	}
 
 	@Override
-	public boolean shouldWork() {
+	public boolean shouldWork(Map<MountParam, Optional<String>> mountParams) {
 		return SystemUtils.IS_OS_MAC_OSX && semVerComparator.compare(SystemUtils.OS_VERSION, "10.10") >= 0;
 	}
 

File: main/frontend-webdav/src/main/java/org/cryptomator/frontend/webdav/mount/MacOsXShellScriptWebDavMounter.java
Patch:
@@ -37,7 +37,7 @@ final class MacOsXShellScriptWebDavMounter implements WebDavMounterStrategy {
 	}
 
 	@Override
-	public boolean shouldWork() {
+	public boolean shouldWork(Map<MountParam, Optional<String>> mountParams) {
 		return SystemUtils.IS_OS_MAC_OSX && semVerComparator.compare(SystemUtils.OS_VERSION, "10.10") < 0;
 	}
 

File: main/frontend-webdav/src/test/java/org/cryptomator/frontend/webdav/WebDavComponent.java
Patch:
@@ -10,12 +10,10 @@
 
 import javax.inject.Singleton;
 
-import org.cryptomator.common.CommonsModule;
-
 import dagger.Component;
 
 @Singleton
-@Component(modules = {CommonsModule.class})
+@Component(modules = {WebDavModule.class})
 public interface WebDavComponent {
 
 	WebDavServer server();

File: main/ui/src/main/java/org/cryptomator/ui/model/Vault.java
Patch:
@@ -154,7 +154,8 @@ private Map<MountParam, Optional<String>> getMountParams(Settings settings) {
 		return ImmutableMap.of( //
 				MountParam.MOUNT_NAME, Optional.ofNullable(mountName), //
 				MountParam.WIN_DRIVE_LETTER, Optional.ofNullable(CharUtils.toString(winDriveLetter)), //
-				MountParam.HOSTNAME, Optional.of(hostname) //
+				MountParam.HOSTNAME, Optional.of(hostname), //
+				MountParam.PREFERRED_GVFS_SCHEME, Optional.ofNullable(settings.getPreferredGvfsScheme()) //
 		);
 	}
 

File: main/commons/src/main/java/org/cryptomator/common/ConsumerThrowingException.java
Patch:
@@ -1,7 +1,7 @@
 package org.cryptomator.common;
 
 @FunctionalInterface
-public interface ConsumerThrowingException<T, E extends Exception> {
+public interface ConsumerThrowingException<T, E extends Throwable> {
 
 	void accept(T t) throws E;
 

File: main/commons/src/main/java/org/cryptomator/common/RunnableThrowingException.java
Patch:
@@ -1,7 +1,7 @@
 package org.cryptomator.common;
 
 @FunctionalInterface
-public interface RunnableThrowingException<T extends Exception> {
+public interface RunnableThrowingException<T extends Throwable> {
 
 	void run() throws T;
 

File: main/ui/src/main/java/org/cryptomator/ui/controllers/UnlockController.java
Patch:
@@ -246,6 +246,7 @@ private void winDriveLetterDidChange(ObservableValue<? extends Character> proper
 			return;
 		}
 		vault.get().setWinDriveLetter(newValue);
+		settings.save();
 	}
 
 	private void chooseSelectedDriveLetter() {

File: main/ui/src/main/java/org/cryptomator/ui/model/UpgradeStrategies.java
Patch:
@@ -19,6 +19,9 @@ public UpgradeStrategies(UpgradeVersion3DropBundleExtension upgrader1, UpgradeVe
 	}
 
 	public Optional<UpgradeStrategy> getUpgradeStrategy(Vault vault) {
+		if (vault == null) {
+			return Optional.empty();
+		}
 		return strategies.stream().filter(strategy -> {
 			return strategy.isApplicable(vault);
 		}).findFirst();

File: main/ui/src/main/java/org/cryptomator/ui/model/UpgradeStrategy.java
Patch:
@@ -73,7 +73,7 @@ public void upgrade(Vault vault, CharSequence passphrase) throws UpgradeFailedEx
 	/**
 	 * Thrown when data migration failed.
 	 */
-	public class UpgradeFailedException extends Exception {
+	public static class UpgradeFailedException extends Exception {
 
 		UpgradeFailedException() {
 		}

File: main/filesystem-crypto/src/main/java/org/cryptomator/crypto/engine/impl/Constants.java
Patch:
@@ -5,7 +5,7 @@ public final class Constants {
 	private Constants() {
 	}
 
-	static final Integer CURRENT_VAULT_VERSION = 3;
+	static final Integer CURRENT_VAULT_VERSION = 4;
 
 	public static final int PAYLOAD_SIZE = 32 * 1024;
 	public static final int NONCE_SIZE = 16;

File: main/filesystem-crypto/src/main/java/org/cryptomator/crypto/engine/impl/FilenameCryptorImpl.java
Patch:
@@ -26,7 +26,8 @@
 class FilenameCryptorImpl implements FilenameCryptor {
 
 	private static final BaseNCodec BASE32 = new Base32();
-	private static final Pattern BASE32_PATTERN = Pattern.compile("([A-Z0-9]{8})*[A-Z0-9=]{8}");
+	// https://tools.ietf.org/html/rfc4648#section-6
+	private static final Pattern BASE32_PATTERN = Pattern.compile("([A-Z2-7]{8})*[A-Z2-7=]{8}");
 	private static final ThreadLocal<MessageDigest> SHA1 = new ThreadLocalSha1();
 	private static final ThreadLocal<SivMode> AES_SIV = new ThreadLocal<SivMode>() {
 		@Override

File: main/filesystem-crypto/src/main/java/org/cryptomator/filesystem/crypto/Constants.java
Patch:
@@ -11,6 +11,6 @@ private Constants() {
 	static final String MASTERKEY_FILENAME = "masterkey.cryptomator";
 	static final String MASTERKEY_BACKUP_FILENAME = "masterkey.cryptomator.bkup";
 
-	static final String DIR_SUFFIX = "_";
+	static final String DIR_PREFIX = "0";
 
 }

File: main/filesystem-crypto/src/test/java/org/cryptomator/filesystem/crypto/ConflictResolverTest.java
Patch:
@@ -46,7 +46,7 @@ public void setup() {
 		unrelatedFile = Mockito.mock(File.class);
 
 		String canonicalFileName = encode.apply("test name").get();
-		String canonicalFolderName = canonicalFileName + Constants.DIR_SUFFIX;
+		String canonicalFolderName = Constants.DIR_PREFIX + canonicalFileName;
 		String conflictingFileName = canonicalFileName + " (version 2)";
 		String conflictingFolderName = canonicalFolderName + " (version 2)";
 		String unrelatedName = "notBa$e32!";
@@ -70,6 +70,7 @@ public void setup() {
 		Mockito.doReturn(Optional.of(folder)).when(unrelatedFile).parent();
 
 		Mockito.when(folder.file(Mockito.startsWith(canonicalFileName.substring(0, 8)))).thenReturn(resolved);
+		Mockito.when(folder.file(Mockito.startsWith(canonicalFolderName.substring(0, 8)))).thenReturn(resolved);
 		Mockito.when(folder.file(canonicalFileName)).thenReturn(canonicalFile);
 		Mockito.when(folder.file(canonicalFolderName)).thenReturn(canonicalFolder);
 		Mockito.when(folder.file(conflictingFileName)).thenReturn(conflictingFile);

File: main/ui/src/main/java/org/cryptomator/ui/controllers/ChangePasswordController.java
Patch:
@@ -122,6 +122,9 @@ private void vaultDidChange(Vault newVault) {
 		oldPasswordField.clear();
 		newPasswordField.clear();
 		retypePasswordField.clear();
+		// trigger "default" change to refresh key bindings:
+		changePasswordButton.setDefaultButton(false);
+		changePasswordButton.setDefaultButton(true);
 	}
 
 	// ****************************************

File: main/ui/src/main/java/org/cryptomator/ui/controllers/InitializeController.java
Patch:
@@ -108,6 +108,9 @@ protected URL getFxmlResourceUrl() {
 	private void vaultDidChange(Vault newVault) {
 		passwordField.clear();
 		retypePasswordField.clear();
+		// trigger "default" change to refresh key bindings:
+		okButton.setDefaultButton(false);
+		okButton.setDefaultButton(true);
 	}
 
 	// ****************************************

File: main/ui/src/main/java/org/cryptomator/ui/controllers/UnlockController.java
Patch:
@@ -149,6 +149,9 @@ private void vaultDidChange(Vault newVault) {
 		if (SystemUtils.IS_OS_WINDOWS) {
 			chooseSelectedDriveLetter();
 		}
+		// trigger "default" change to refresh key bindings:
+		unlockButton.setDefaultButton(false);
+		unlockButton.setDefaultButton(true);
 	}
 
 	// ****************************************

File: main/ui/src/main/java/org/cryptomator/ui/controllers/UpgradeController.java
Patch:
@@ -58,15 +58,15 @@ protected void initialize() {
 			return instruction.map(this::upgradeNotification).orElse("");
 		}).orElse(""));
 
-		EasyBind.subscribe(vault, this::vaultChanged);
+		EasyBind.subscribe(vault, this::vaultDidChange);
 	}
 
 	@Override
 	protected URL getFxmlResourceUrl() {
 		return getClass().getResource("/fxml/upgrade.fxml");
 	}
 
-	private void vaultChanged(Vault newVault) {
+	private void vaultDidChange(Vault newVault) {
 		errorLabel.setText(null);
 	}
 

File: main/ui/src/main/java/org/cryptomator/ui/controllers/UnlockController.java
Patch:
@@ -119,15 +119,15 @@ public void initialize() {
 		}
 		unlockButton.disableProperty().bind(passwordField.textProperty().isEmpty());
 
-		EasyBind.subscribe(vault, this::vaultChanged);
+		EasyBind.subscribe(vault, this::vaultDidChange);
 	}
 
 	@Override
 	protected URL getFxmlResourceUrl() {
 		return getClass().getResource("/fxml/unlock.fxml");
 	}
 
-	private void vaultChanged(Vault newVault) {
+	private void vaultDidChange(Vault newVault) {
 		if (newVault == null) {
 			return;
 		}

File: main/filesystem-crypto/src/main/java/org/cryptomator/crypto/engine/impl/CryptorImpl.java
Patch:
@@ -86,7 +86,7 @@ public void randomizeMasterkey() {
 			randomSource.nextBytes(randomBytes);
 			encryptionKey = new SecretKeySpec(randomBytes, ENCRYPTION_ALG);
 			randomSource.nextBytes(randomBytes);
-			macKey = new SecretKeySpec(randomBytes, ENCRYPTION_ALG);
+			macKey = new SecretKeySpec(randomBytes, MAC_ALG);
 		} finally {
 			Arrays.fill(randomBytes, (byte) 0x00);
 		}

File: main/filesystem-crypto/src/main/java/org/cryptomator/crypto/engine/impl/ThreadLocalAesCtrCipher.java
Patch:
@@ -25,7 +25,7 @@ private static Cipher newCipherInstance() {
 		try {
 			return Cipher.getInstance(AES_CTR);
 		} catch (NoSuchAlgorithmException | NoSuchPaddingException e) {
-			throw new IllegalStateException("Could not create MAC.", e);
+			throw new IllegalStateException("Could not create Cipher.", e);
 		}
 	}
 

File: main/commons/src/main/java/org/cryptomator/common/SemVerComparator.java
Patch:
@@ -6,7 +6,7 @@
  * Contributors:
  *     Sebastian Stenzel - initial API and implementation
  *******************************************************************************/
-package org.cryptomator.ui.util;
+package org.cryptomator.common;
 
 import java.util.Comparator;
 

File: main/commons/src/test/java/org/cryptomator/common/SemVerComparatorTest.java
Patch:
@@ -6,10 +6,11 @@
  * Contributors:
  *     Sebastian Stenzel - initial API and implementation
  *******************************************************************************/
-package org.cryptomator.ui.util;
+package org.cryptomator.common;
 
 import java.util.Comparator;
 
+import org.cryptomator.common.SemVerComparator;
 import org.junit.Assert;
 import org.junit.Test;
 

File: main/frontend-webdav/src/main/java/org/cryptomator/frontend/webdav/WebDavComponent.java
Patch:
@@ -10,10 +10,12 @@
 
 import javax.inject.Singleton;
 
+import org.cryptomator.common.CommonsModule;
+
 import dagger.Component;
 
 @Singleton
-@Component
+@Component(modules = {CommonsModule.class})
 public interface WebDavComponent {
 
 	WebDavServer server();

File: main/ui/src/main/java/org/cryptomator/ui/Cryptomator.java
Patch:
@@ -36,6 +36,8 @@ public class Cryptomator {
 	private static final CleanShutdownPerformer CLEAN_SHUTDOWN_PERFORMER = new CleanShutdownPerformer();
 
 	public static void main(String[] args) {
+		String cryptomatorVersion = Optional.ofNullable(Cryptomator.class.getPackage().getImplementationVersion()).orElse("SNAPSHOT");
+		LOG.info("Starting Cryptomator {} on {} {} ({})", cryptomatorVersion, SystemUtils.OS_NAME, SystemUtils.OS_VERSION, SystemUtils.OS_ARCH);
 		if (SystemUtils.IS_OS_MAC_OSX) {
 			/*
 			 * On OSX we're in an awkward position. We need to register a handler in the main thread of this application. However, we can't

File: main/ui/src/main/java/org/cryptomator/ui/ExitUtil.java
Patch:
@@ -136,6 +136,7 @@ private void showTrayNotification(TrayIcon trayIcon) {
 			return;
 		} else {
 			settings.setNumTrayNotifications(settings.getNumTrayNotifications() - 1);
+			settings.save();
 		}
 		final Runnable notificationCmd;
 		if (SystemUtils.IS_OS_MAC_OSX) {

File: main/ui/src/main/java/org/cryptomator/ui/MainApplication.java
Patch:
@@ -38,6 +38,7 @@ public class MainApplication extends Application {
 
 	@Override
 	public void start(Stage primaryStage) throws IOException {
+		LOG.info("JavaFX application started");
 		final CryptomatorComponent comp = DaggerCryptomatorComponent.builder().cryptomatorModule(new CryptomatorModule(this, primaryStage)).build();
 		final MainController mainCtrl = comp.mainController();
 		closer = comp.deferredCloser();

File: main/ui/src/main/java/org/cryptomator/ui/controllers/WelcomeController.java
Patch:
@@ -154,6 +154,7 @@ private void compareVersions(final Map<String, String> latestVersions) {
 			Platform.runLater(() -> {
 				this.updateLink.setText(msg);
 				this.updateLink.setVisible(true);
+				this.updateLink.setDisable(false);
 			});
 		}
 	}

File: main/filesystem-crypto/src/main/java/org/cryptomator/crypto/engine/CryptoException.java
Patch:
@@ -8,7 +8,7 @@
  *******************************************************************************/
 package org.cryptomator.crypto.engine;
 
-abstract class CryptoException extends RuntimeException {
+public abstract class CryptoException extends RuntimeException {
 
 	public CryptoException() {
 		super();

File: main/ui/src/main/java/org/cryptomator/ui/model/Vault.java
Patch:
@@ -30,6 +30,7 @@
 import org.cryptomator.common.Optionals;
 import org.cryptomator.crypto.engine.InvalidPassphraseException;
 import org.cryptomator.filesystem.FileSystem;
+import org.cryptomator.filesystem.charsets.NormalizedNameFileSystem;
 import org.cryptomator.filesystem.crypto.CryptoFileSystemDelegate;
 import org.cryptomator.filesystem.crypto.CryptoFileSystemFactory;
 import org.cryptomator.filesystem.nio.NioFileSystem;
@@ -126,7 +127,8 @@ public synchronized void activateFrontend(FrontendFactory frontendFactory, Setti
 			FileSystem fs = getNioFileSystem();
 			FileSystem shorteningFs = shorteningFileSystemFactory.get(fs);
 			FileSystem cryptoFs = cryptoFileSystemFactory.unlockExisting(shorteningFs, passphrase, this);
-			StatsFileSystem statsFs = new StatsFileSystem(cryptoFs);
+			FileSystem normalizingFs = new NormalizedNameFileSystem(cryptoFs, SystemUtils.IS_OS_MAC_OSX ? Form.NFD : Form.NFC);
+			StatsFileSystem statsFs = new StatsFileSystem(normalizingFs);
 			statsFileSystem = Optional.of(statsFs);
 			String contextPath = StringUtils.prependIfMissing(mountName, "/");
 			Frontend frontend = frontendFactory.create(statsFs, contextPath);

File: main/ui/src/main/java/org/cryptomator/ui/settings/Settings.java
Patch:
@@ -93,8 +93,8 @@ public int getPort() {
 		}
 	}
 
-	private boolean isPortValid(int port) {
-		return port == DEFAULT_PORT || port >= MIN_PORT && port <= MAX_PORT;
+	public boolean isPortValid(int port) {
+		return port == DEFAULT_PORT || port >= MIN_PORT && port <= MAX_PORT || port == 0;
 	}
 
 	public boolean shouldUseIpv6() {

File: main/ui/src/main/java/org/cryptomator/ui/model/Vault.java
Patch:
@@ -30,6 +30,7 @@
 import org.cryptomator.common.Optionals;
 import org.cryptomator.crypto.engine.InvalidPassphraseException;
 import org.cryptomator.filesystem.FileSystem;
+import org.cryptomator.filesystem.charsets.NormalizedNameFileSystem;
 import org.cryptomator.filesystem.crypto.CryptoFileSystemDelegate;
 import org.cryptomator.filesystem.crypto.CryptoFileSystemFactory;
 import org.cryptomator.filesystem.nio.NioFileSystem;
@@ -126,7 +127,8 @@ public synchronized void activateFrontend(FrontendFactory frontendFactory, Setti
 			FileSystem fs = getNioFileSystem();
 			FileSystem shorteningFs = shorteningFileSystemFactory.get(fs);
 			FileSystem cryptoFs = cryptoFileSystemFactory.unlockExisting(shorteningFs, passphrase, this);
-			StatsFileSystem statsFs = new StatsFileSystem(cryptoFs);
+			FileSystem normalizingFs = new NormalizedNameFileSystem(cryptoFs, SystemUtils.IS_OS_MAC_OSX ? Form.NFD : Form.NFC);
+			StatsFileSystem statsFs = new StatsFileSystem(normalizingFs);
 			statsFileSystem = Optional.of(statsFs);
 			String contextPath = StringUtils.prependIfMissing(mountName, "/");
 			Frontend frontend = frontendFactory.create(statsFs, contextPath);

File: main/ui/src/main/java/org/cryptomator/ui/controllers/WelcomeController.java
Patch:
@@ -154,6 +154,7 @@ private void compareVersions(final Map<String, String> latestVersions) {
 			Platform.runLater(() -> {
 				this.updateLink.setText(msg);
 				this.updateLink.setVisible(true);
+				this.updateLink.setDisable(false);
 			});
 		}
 	}

File: main/ui/src/main/java/org/cryptomator/ui/controllers/WelcomeController.java
Patch:
@@ -154,6 +154,7 @@ private void compareVersions(final Map<String, String> latestVersions) {
 			Platform.runLater(() -> {
 				this.updateLink.setText(msg);
 				this.updateLink.setVisible(true);
+				this.updateLink.setDisable(false);
 			});
 		}
 	}

File: main/commons/src/main/java/org/cryptomator/common/SemVerComparator.java
Patch:
@@ -6,7 +6,7 @@
  * Contributors:
  *     Sebastian Stenzel - initial API and implementation
  *******************************************************************************/
-package org.cryptomator.ui.util;
+package org.cryptomator.common;
 
 import java.util.Comparator;
 

File: main/commons/src/test/java/org/cryptomator/common/SemVerComparatorTest.java
Patch:
@@ -6,10 +6,11 @@
  * Contributors:
  *     Sebastian Stenzel - initial API and implementation
  *******************************************************************************/
-package org.cryptomator.ui.util;
+package org.cryptomator.common;
 
 import java.util.Comparator;
 
+import org.cryptomator.common.SemVerComparator;
 import org.junit.Assert;
 import org.junit.Test;
 

File: main/frontend-webdav/src/main/java/org/cryptomator/frontend/webdav/WebDavComponent.java
Patch:
@@ -10,10 +10,12 @@
 
 import javax.inject.Singleton;
 
+import org.cryptomator.common.CommonsModule;
+
 import dagger.Component;
 
 @Singleton
-@Component
+@Component(modules = {CommonsModule.class})
 public interface WebDavComponent {
 
 	WebDavServer server();

File: main/ui/src/main/java/org/cryptomator/ui/Cryptomator.java
Patch:
@@ -36,6 +36,8 @@ public class Cryptomator {
 	private static final CleanShutdownPerformer CLEAN_SHUTDOWN_PERFORMER = new CleanShutdownPerformer();
 
 	public static void main(String[] args) {
+		String cryptomatorVersion = Optional.ofNullable(Cryptomator.class.getPackage().getImplementationVersion()).orElse("SNAPSHOT");
+		LOG.info("Starting Cryptomator {} on {} {} ({})", cryptomatorVersion, SystemUtils.OS_NAME, SystemUtils.OS_VERSION, SystemUtils.OS_ARCH);
 		if (SystemUtils.IS_OS_MAC_OSX) {
 			/*
 			 * On OSX we're in an awkward position. We need to register a handler in the main thread of this application. However, we can't

File: main/ui/src/main/java/org/cryptomator/ui/ExitUtil.java
Patch:
@@ -136,6 +136,7 @@ private void showTrayNotification(TrayIcon trayIcon) {
 			return;
 		} else {
 			settings.setNumTrayNotifications(settings.getNumTrayNotifications() - 1);
+			settings.save();
 		}
 		final Runnable notificationCmd;
 		if (SystemUtils.IS_OS_MAC_OSX) {

File: main/ui/src/main/java/org/cryptomator/ui/MainApplication.java
Patch:
@@ -38,6 +38,7 @@ public class MainApplication extends Application {
 
 	@Override
 	public void start(Stage primaryStage) throws IOException {
+		LOG.info("JavaFX application started");
 		final CryptomatorComponent comp = DaggerCryptomatorComponent.builder().cryptomatorModule(new CryptomatorModule(this, primaryStage)).build();
 		final MainController mainCtrl = comp.mainController();
 		closer = comp.deferredCloser();

File: main/ui/src/main/java/org/cryptomator/ui/settings/Settings.java
Patch:
@@ -24,7 +24,7 @@ public class Settings implements Serializable {
 	private static final long serialVersionUID = 7609959894417878744L;
 	public static final int MIN_PORT = 1024;
 	public static final int MAX_PORT = 65535;
-	public static final int DEFAULT_PORT = 0;
+	public static final int DEFAULT_PORT = 42427;
 	public static final boolean DEFAULT_USE_IPV6 = false;
 	public static final Integer DEFAULT_NUM_TRAY_NOTIFICATIONS = 3;
 

File: main/ui/src/main/java/org/cryptomator/ui/Cryptomator.java
Patch:
@@ -36,6 +36,8 @@ public class Cryptomator {
 	private static final CleanShutdownPerformer CLEAN_SHUTDOWN_PERFORMER = new CleanShutdownPerformer();
 
 	public static void main(String[] args) {
+		String cryptomatorVersion = Optional.ofNullable(Cryptomator.class.getPackage().getImplementationVersion()).orElse("SNAPSHOT");
+		LOG.info("Starting Cryptomator {} on {} {} ({})", cryptomatorVersion, SystemUtils.OS_NAME, SystemUtils.OS_VERSION, SystemUtils.OS_ARCH);
 		if (SystemUtils.IS_OS_MAC_OSX) {
 			/*
 			 * On OSX we're in an awkward position. We need to register a handler in the main thread of this application. However, we can't

File: main/ui/src/main/java/org/cryptomator/ui/MainApplication.java
Patch:
@@ -38,6 +38,7 @@ public class MainApplication extends Application {
 
 	@Override
 	public void start(Stage primaryStage) throws IOException {
+		LOG.info("JavaFX application started");
 		final CryptomatorComponent comp = DaggerCryptomatorComponent.builder().cryptomatorModule(new CryptomatorModule(this, primaryStage)).build();
 		final MainController mainCtrl = comp.mainController();
 		closer = comp.deferredCloser();

File: main/commons/src/main/java/org/cryptomator/common/SemVerComparator.java
Patch:
@@ -6,7 +6,7 @@
  * Contributors:
  *     Sebastian Stenzel - initial API and implementation
  *******************************************************************************/
-package org.cryptomator.ui.util;
+package org.cryptomator.common;
 
 import java.util.Comparator;
 

File: main/commons/src/test/java/org/cryptomator/common/SemVerComparatorTest.java
Patch:
@@ -6,10 +6,11 @@
  * Contributors:
  *     Sebastian Stenzel - initial API and implementation
  *******************************************************************************/
-package org.cryptomator.ui.util;
+package org.cryptomator.common;
 
 import java.util.Comparator;
 
+import org.cryptomator.common.SemVerComparator;
 import org.junit.Assert;
 import org.junit.Test;
 

File: main/frontend-webdav/src/main/java/org/cryptomator/frontend/webdav/WebDavComponent.java
Patch:
@@ -10,10 +10,12 @@
 
 import javax.inject.Singleton;
 
+import org.cryptomator.common.CommonsModule;
+
 import dagger.Component;
 
 @Singleton
-@Component
+@Component(modules = {CommonsModule.class})
 public interface WebDavComponent {
 
 	WebDavServer server();

File: main/ui/src/main/java/org/cryptomator/ui/controllers/WelcomeController.java
Patch:
@@ -154,6 +154,7 @@ private void compareVersions(final Map<String, String> latestVersions) {
 			Platform.runLater(() -> {
 				this.updateLink.setText(msg);
 				this.updateLink.setVisible(true);
+				this.updateLink.setDisable(false);
 			});
 		}
 	}

File: main/ui/src/main/java/org/cryptomator/ui/model/Vault.java
Patch:
@@ -214,7 +214,7 @@ public Binding<String> displayablePath() {
 				String homePrefix = SystemUtils.IS_OS_WINDOWS ? "~\\" : "~/";
 				return homePrefix + relativePath.toString();
 			} else {
-				return path.toString();
+				return path.getValue().toString();
 			}
 		});
 	}

File: main/ui/src/main/java/org/cryptomator/ui/model/Vault.java
Patch:
@@ -214,7 +214,7 @@ public Binding<String> displayablePath() {
 				String homePrefix = SystemUtils.IS_OS_WINDOWS ? "~\\" : "~/";
 				return homePrefix + relativePath.toString();
 			} else {
-				return path.toString();
+				return path.getValue().toString();
 			}
 		});
 	}

File: main/ui/src/main/java/org/cryptomator/ui/CryptomatorComponent.java
Patch:
@@ -29,5 +29,5 @@ interface CryptomatorComponent {
 
 	Localization localization();
 
-	TrayIconUtil trayIconUtil();
+	ExitUtil exitUtil();
 }
\ No newline at end of file

File: main/ui/src/main/java/org/cryptomator/ui/MainApplication.java
Patch:
@@ -67,7 +67,7 @@ public void start(Stage primaryStage) throws IOException {
 		// show window and start observing its focus:
 		primaryStage.show();
 		ActiveWindowStyleSupport.startObservingFocus(primaryStage);
-		comp.trayIconUtil().initTrayIcon(this::quit);
+		comp.exitUtil().initExitHandler(this::quit);
 
 		// open files, if requested during startup:
 		for (String arg : getParameters().getUnnamed()) {

File: main/filesystem-api/src/main/java/org/cryptomator/filesystem/delegating/DelegatingFolder.java
Patch:
@@ -13,6 +13,7 @@
 import java.util.stream.Stream;
 
 import org.cryptomator.common.WeakValuedCache;
+import org.cryptomator.common.streams.AutoClosingStream;
 import org.cryptomator.filesystem.File;
 import org.cryptomator.filesystem.Folder;
 import org.cryptomator.filesystem.Node;
@@ -35,7 +36,7 @@ public Optional<D> parent() throws UncheckedIOException {
 
 	@Override
 	public Stream<? extends Node> children() throws UncheckedIOException {
-		return Stream.concat(folders(), files());
+		return AutoClosingStream.from(Stream.concat(folders(), files()));
 	}
 
 	@Override

File: main/filesystem-crypto/src/main/java/org/cryptomator/filesystem/crypto/CryptoFolder.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.commons.lang3.StringUtils;
 import org.cryptomator.common.LazyInitializer;
 import org.cryptomator.common.WeakValuedCache;
+import org.cryptomator.common.streams.AutoClosingStream;
 import org.cryptomator.crypto.engine.Cryptor;
 import org.cryptomator.filesystem.Deleter;
 import org.cryptomator.filesystem.File;
@@ -74,7 +75,7 @@ protected Optional<String> getDirectoryId() {
 
 	@Override
 	public Stream<? extends Node> children() {
-		return Stream.concat(files(), folders());
+		return AutoClosingStream.from(Stream.concat(files(), folders()));
 	}
 
 	@Override

File: main/ui/src/main/java/org/cryptomator/ui/controllers/MainController.java
Patch:
@@ -231,6 +231,9 @@ public void addVault(final Path path, boolean select) {
 	@FXML
 	private void didClickRemoveSelectedEntry(ActionEvent e) {
 		vaults.remove(selectedVault.get());
+		if (vaults.isEmpty()) {
+			activeController.set(welcomeController.get());
+		}
 	}
 
 	@FXML

File: main/ui/src/main/java/org/cryptomator/ui/controllers/MainController.java
Patch:
@@ -260,8 +260,9 @@ private void activeControllerDidChange(AbstractFXMLViewController newValue) {
 
 	private void selectedVaultDidChange(Vault newValue) {
 		if (newValue == null) {
-			activeController.set(welcomeController.get());
-		} else if (newValue.isUnlocked()) {
+			return;
+		}
+		if (newValue.isUnlocked()) {
 			this.showUnlockedView(newValue);
 		} else if (newValue.isValidVaultDirectory()) {
 			this.showUnlockView();

File: main/ui/src/main/java/org/cryptomator/ui/controllers/MainController.java
Patch:
@@ -260,9 +260,8 @@ private void activeControllerDidChange(AbstractFXMLViewController newValue) {
 
 	private void selectedVaultDidChange(Vault newValue) {
 		if (newValue == null) {
-			return;
-		}
-		if (newValue.isUnlocked()) {
+			activeController.set(welcomeController.get());
+		} else if (newValue.isUnlocked()) {
 			this.showUnlockedView(newValue);
 		} else if (newValue.isValidVaultDirectory()) {
 			this.showUnlockView();

File: main/filesystem-crypto/src/main/java/org/cryptomator/filesystem/crypto/BlockAlignedWritableFile.java
Patch:
@@ -111,7 +111,8 @@ private void readCurrentBlock() {
 		currentBlockBuffer.clear();
 		try (ReadableFile r = openReadable.get()) {
 			r.position(physicalPosition);
-			r.read(currentBlockBuffer);
+			int numRead = r.read(currentBlockBuffer);
+			assert numRead == currentBlockBuffer.position();
 		}
 		int advance = (int) (logicalPosition - physicalPosition);
 		currentBlockBuffer.position(advance);

File: main/ui/src/main/java/org/cryptomator/ui/controllers/UnlockedController.java
Patch:
@@ -164,6 +164,7 @@ private void didClickRevealVault(ActionEvent event) {
 	private void didClickCopyUrl(ActionEvent event) {
 		ClipboardContent clipboardContent = new ClipboardContent();
 		clipboardContent.putUrl(vault.get().getWebDavUrl());
+		clipboardContent.putString(vault.get().getWebDavUrl());
 		Clipboard.getSystemClipboard().setContent(clipboardContent);
 	}
 

File: main/ui/src/main/java/org/cryptomator/ui/model/Vault.java
Patch:
@@ -166,7 +166,7 @@ public void authenticationFailed(String cleartextPath) {
 
 	@Override
 	public boolean shouldSkipAuthentication(String cleartextPath) {
-		return namesOfResourcesWithInvalidMac.contains(cleartextPath);
+		return whitelistedResourcesWithInvalidMac.contains(cleartextPath);
 	}
 
 	// ******************************************************************************

File: main/filesystem-crypto/src/main/java/org/cryptomator/filesystem/crypto/CiphertextReader.java
Patch:
@@ -47,10 +47,10 @@ private void callInterruptibly() throws InterruptedException {
 			int bytesRead = -1;
 			do {
 				ByteBuffer ciphertext = ByteBuffer.allocate(READ_BUFFER_SIZE);
-				file.read(ciphertext);
-				ciphertext.flip();
-				bytesRead = ciphertext.remaining();
+				bytesRead = file.read(ciphertext);
 				if (bytesRead > 0) {
+					ciphertext.flip();
+					assert bytesRead == ciphertext.remaining();
 					decryptor.append(ciphertext);
 				}
 			} while (bytesRead > 0);

File: main/filesystem-crypto/src/main/java/org/cryptomator/filesystem/crypto/CryptoNode.java
Patch:
@@ -104,8 +104,8 @@ public boolean equals(Object obj) {
 		if (obj instanceof CryptoNode) {
 			CryptoNode other = (CryptoNode) obj;
 			return this.getClass() == other.getClass() //
-					&& (this.parent == null && other.parent == null || this.parent.equals(other.parent)) //
-					&& (this.name == null && other.name == null || this.name.equals(other.name));
+					&& (this.parent == null && other.parent == null || this.parent != null && this.parent.equals(other.parent)) //
+					&& (this.name == null && other.name == null || this.name != null && this.name.equals(other.name));
 		} else {
 			return false;
 		}

File: main/filesystem-inmemory/src/main/java/org/cryptomator/filesystem/inmem/InMemoryNode.java
Patch:
@@ -86,8 +86,8 @@ public boolean equals(Object obj) {
 		if (obj instanceof InMemoryNode) {
 			InMemoryNode other = (InMemoryNode) obj;
 			return this.getClass() == other.getClass() //
-					&& (this.parent == null && other.parent == null || this.parent.equals(other.parent)) //
-					&& (this.name == null && other.name == null || this.name.equals(other.name));
+					&& (this.parent == null && other.parent == null || this.parent != null && this.parent.equals(other.parent)) //
+					&& (this.name == null && other.name == null || this.name != null && this.name.equals(other.name));
 		} else {
 			return false;
 		}

File: main/frontend-webdav/src/main/java/org/cryptomator/frontend/webdav/jackrabbitservlet/DavFileWithRange.java
Patch:
@@ -71,7 +71,9 @@ private Pair<Long, Long> getEffectiveRange(long contentLength) {
 		try {
 			final Long lower = requestRange.getLeft().isEmpty() ? null : Long.valueOf(requestRange.getLeft());
 			final Long upper = requestRange.getRight().isEmpty() ? null : Long.valueOf(requestRange.getRight());
-			if (lower == null) {
+			if (lower == null && upper == null) {
+				return new ImmutablePair<Long, Long>(0l, contentLength - 1);
+			} else if (lower == null) {
 				return new ImmutablePair<Long, Long>(contentLength - upper, contentLength - 1);
 			} else if (upper == null) {
 				return new ImmutablePair<Long, Long>(lower, contentLength - 1);

File: main/frontend-webdav/src/main/java/org/cryptomator/frontend/webdav/jackrabbitservlet/DavFile.java
Patch:
@@ -167,7 +167,9 @@ protected void setCreationTime(Instant creationTime) {
 	public ActiveLock lock(LockInfo reqLockInfo) throws DavException {
 		ActiveLock lock = super.lock(reqLockInfo);
 		if (!exists()) {
-			getCollection().addMember(this, new NullInputContext());
+			DavFolder parentFolder = getCollection();
+			assert parentFolder != null : "File always has a folder.";
+			parentFolder.addMember(this, new NullInputContext());
 		}
 		return lock;
 	}

File: main/frontend-webdav/src/main/java/org/cryptomator/frontend/webdav/jackrabbitservlet/FilesystemResourceFactory.java
Patch:
@@ -50,7 +50,7 @@ public DavResource createResource(DavResourceLocator locator, DavServletRequest
 	}
 
 	@Override
-	public DavResource createResource(DavResourceLocator locator, DavSession session) throws DavException {
+	public DavResource createResource(DavResourceLocator locator, DavSession session) {
 		if (locator instanceof FolderLocator) {
 			FolderLocator folder = (FolderLocator) locator;
 			return createFolder(folder, session);

File: main/ui/src/main/java/org/cryptomator/ui/controllers/WelcomeController.java
Patch:
@@ -124,7 +124,9 @@ private void checkForUpdates() {
 				final ObjectMapper mapper = new ObjectMapper();
 				final Map<String, String> map = mapper.readValue(responseData, new TypeReference<HashMap<String, String>>() {
 				});
-				this.compareVersions(map);
+				if (map != null) {
+					this.compareVersions(map);
+				}
 			}
 		} catch (IOException e) {
 			// no error handling required. Maybe next time the version check is successful.

File: main/ui/src/main/java/org/cryptomator/ui/TrayIconUtil.java
Patch:
@@ -86,7 +86,9 @@ private TrayIcon createTrayIcon(Runnable exitCommand) {
 
 		final Image image;
 		if (SystemUtils.IS_OS_MAC_OSX && isMacMenuBarDarkMode()) {
-			image = Toolkit.getDefaultToolkit().getImage(getClass().getResource("/tray_icon_white.png"));
+			image = Toolkit.getDefaultToolkit().getImage(getClass().getResource("/tray_icon_mac_white.png"));
+		} else if (SystemUtils.IS_OS_MAC_OSX) {
+			image = Toolkit.getDefaultToolkit().getImage(getClass().getResource("/tray_icon_mac_black.png"));
 		} else {
 			image = Toolkit.getDefaultToolkit().getImage(getClass().getResource("/tray_icon.png"));
 		}

File: main/ui/src/main/java/org/cryptomator/ui/CryptomatorComponent.java
Patch:
@@ -15,7 +15,6 @@
 import org.cryptomator.ui.controllers.MainController;
 import org.cryptomator.ui.settings.Localization;
 import org.cryptomator.ui.util.DeferredCloser;
-import org.cryptomator.ui.util.TrayIconUtil;
 
 import dagger.Component;
 

File: main/frontend-api/src/main/java/org/cryptomator/frontend/Frontend.java
Patch:
@@ -23,4 +23,7 @@ public enum MountParam {
 
 	void reveal() throws CommandFailedException;
 
+	// For now let's assume every single frontend knows what a WebDAV url is ;-)
+	String getWebDavUrl();
+
 }

File: main/ui/src/main/java/org/cryptomator/ui/CryptomatorModule.java
Patch:
@@ -90,7 +90,8 @@ WebDavMounter provideWebDavMounter(WebDavMounterProvider webDavMounterProvider)
 
 	@Provides
 	@Singleton
-	FrontendFactory provideFrontendFactory(WebDavServer webDavServer) {
+	FrontendFactory provideFrontendFactory(WebDavServer webDavServer, Settings settings) {
+		webDavServer.setPort(settings.getPort());
 		webDavServer.start();
 		return closeLater(webDavServer, WebDavServer::stop);
 	}

File: main/ui/src/main/java/org/cryptomator/ui/settings/SettingsProvider.java
Patch:
@@ -62,7 +62,7 @@ public SettingsProvider(DeferredCloser deferredCloser, @Named("VaultJsonMapper")
 	}
 
 	private Path getSettingsPath() throws IOException {
-		String settingsPathProperty = System.getProperty("settingsPath");
+		String settingsPathProperty = System.getProperty("cryptomator.settingsPath");
 		if (settingsPathProperty == null) {
 			return SETTINGS_DIR.resolve(SETTINGS_FILE);
 		} else {

File: main/frontend-webdav/src/main/java/org/cryptomator/frontend/webdav/WebDavServletContextFactory.java
Patch:
@@ -19,6 +19,7 @@
 import org.apache.commons.lang3.SystemUtils;
 import org.cryptomator.filesystem.Folder;
 import org.cryptomator.frontend.webdav.filters.AcceptRangeFilter;
+import org.cryptomator.frontend.webdav.filters.LoopbackFilter;
 import org.cryptomator.frontend.webdav.filters.MacChunkedPutCompatibilityFilter;
 import org.cryptomator.frontend.webdav.filters.MkcolComplianceFilter;
 import org.cryptomator.frontend.webdav.filters.UriNormalizationFilter;
@@ -65,6 +66,7 @@ public ServletContextHandler create(URI contextRoot, Folder root) {
 		final ServletContextHandler servletContext = new ServletContextHandler(null, contextPath, ServletContextHandler.SESSIONS);
 		final ServletHolder servletHolder = new ServletHolder(contextPath, new WebDavServlet(contextRoot, root));
 		servletContext.addServlet(servletHolder, WILDCARD);
+		servletContext.addFilter(LoopbackFilter.class, WILDCARD, EnumSet.of(DispatcherType.REQUEST));
 		servletContext.addFilter(MkcolComplianceFilter.class, WILDCARD, EnumSet.of(DispatcherType.REQUEST));
 		servletContext.addFilter(AcceptRangeFilter.class, WILDCARD, EnumSet.of(DispatcherType.REQUEST));
 		servletContext.addFilter(new FilterHolder(new UriNormalizationFilter(resourceTypeChecker)), WILDCARD, EnumSet.of(DispatcherType.REQUEST));

File: main/ui/src/main/java/org/cryptomator/ui/MainApplication.java
Patch:
@@ -28,6 +28,7 @@
 import javafx.application.Application;
 import javafx.application.Platform;
 import javafx.fxml.FXMLLoader;
+import javafx.scene.image.Image;
 import javafx.stage.Stage;
 
 public class MainApplication extends Application {
@@ -69,6 +70,7 @@ public void start(final Stage primaryStage) throws IOException {
 		final ResourceBundle rb = ResourceBundle.getBundle("localization");
 		primaryStage.setTitle(rb.getString("app.name"));
 		primaryStage.setResizable(false);
+		primaryStage.getIcons().add(new Image(MainApplication.class.getResourceAsStream("/window_icon.png"))); 
 		primaryStage.show();
 
 		ActiveWindowStyleSupport.startObservingFocus(primaryStage);

File: main/filesystem-stats/src/main/java/org/cryptomator/filesystem/stats/StatsFile.java
Patch:
@@ -19,7 +19,7 @@
 import org.cryptomator.filesystem.delegating.DelegatingReadableFile;
 import org.cryptomator.filesystem.delegating.DelegatingWritableFile;
 
-public class StatsFile extends DelegatingFile<StatsFolder> {
+class StatsFile extends DelegatingFile<StatsFolder> {
 
 	private final Consumer<Long> readCounter;
 	private final Consumer<Long> writeCounter;

File: main/filesystem-stats/src/main/java/org/cryptomator/filesystem/stats/StatsFolder.java
Patch:
@@ -14,7 +14,7 @@
 import org.cryptomator.filesystem.Folder;
 import org.cryptomator.filesystem.delegating.DelegatingFolder;
 
-public class StatsFolder extends DelegatingFolder<StatsFolder, StatsFile> {
+class StatsFolder extends DelegatingFolder<StatsFolder, StatsFile> {
 
 	private final Consumer<Long> readCounter;
 	private final Consumer<Long> writeCounter;

File: main/frontend-webdav/src/main/java/org/cryptomator/frontend/webdav/jackrabbitservlet/DavFolder.java
Patch:
@@ -73,6 +73,7 @@ private void addMemberFolder(DavFolder memberFolder) {
 
 	private void addMemberFile(DavFile memberFile, InputStream inputStream) {
 		try (ReadableByteChannel src = Channels.newChannel(inputStream); WritableFile dst = node.file(memberFile.getDisplayName()).openWritable()) {
+			dst.truncate();
 			ByteStreams.copy(src, dst);
 		} catch (IOException e) {
 			throw new UncheckedIOException(e);

File: main/filesystem-crypto/src/test/java/org/cryptomator/crypto/engine/impl/FileHeaderTest.java
Patch:
@@ -16,6 +16,7 @@
 import javax.crypto.spec.SecretKeySpec;
 
 import org.bouncycastle.util.encoders.Base64;
+import org.cryptomator.crypto.engine.AuthenticationFailedException;
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -63,7 +64,7 @@ public void testDecryption() {
 		Assert.assertArrayEquals(new byte[32], header.getPayload().getContentKey().getEncoded());
 	}
 
-	@Test(expected = IllegalArgumentException.class)
+	@Test(expected = AuthenticationFailedException.class)
 	public void testDecryptionWithInvalidMac1() {
 		final byte[] keyBytes = new byte[32];
 		final SecretKey headerKey = new SecretKeySpec(keyBytes, "AES");
@@ -72,7 +73,7 @@ public void testDecryptionWithInvalidMac1() {
 		FileHeader.decrypt(headerKey, new ThreadLocalMac(macKey, "HmacSHA256"), headerBuf);
 	}
 
-	@Test(expected = IllegalArgumentException.class)
+	@Test(expected = AuthenticationFailedException.class)
 	public void testDecryptionWithInvalidMac2() {
 		final byte[] keyBytes = new byte[32];
 		final SecretKey headerKey = new SecretKeySpec(keyBytes, "AES");

File: main/filesystem-crypto/src/main/java/org/cryptomator/crypto/engine/FileContentCryptor.java
Patch:
@@ -35,7 +35,7 @@ public interface FileContentCryptor {
 	 * @param authenticate Skip authentication by setting this flag to <code>false</code>. Should be <code>true</code> by default.
 	 * @return A possibly new FileContentDecryptor instance which is capable of decrypting ciphertexts associated with the given file header.
 	 */
-	FileContentDecryptor createFileContentDecryptor(ByteBuffer header, long firstCiphertextByte, boolean authenticate) throws IllegalArgumentException;
+	FileContentDecryptor createFileContentDecryptor(ByteBuffer header, long firstCiphertextByte, boolean authenticate) throws IllegalArgumentException, AuthenticationFailedException;
 
 	/**
 	 * @param header The full fixed-length header of an encrypted file or {@link Optional#empty()}. The caller is required to pass the exact amount of bytes returned by {@link #getHeaderSize()}.

File: main/filesystem-crypto/src/main/java/org/cryptomator/crypto/engine/impl/FileContentCryptorImpl.java
Patch:
@@ -14,6 +14,7 @@
 
 import javax.crypto.SecretKey;
 
+import org.cryptomator.crypto.engine.AuthenticationFailedException;
 import org.cryptomator.crypto.engine.FileContentCryptor;
 import org.cryptomator.crypto.engine.FileContentDecryptor;
 import org.cryptomator.crypto.engine.FileContentEncryptor;
@@ -52,7 +53,7 @@ public long toCiphertextPos(long cleartextPos) {
 	}
 
 	@Override
-	public FileContentDecryptor createFileContentDecryptor(ByteBuffer header, long firstCiphertextByte, boolean authenticate) {
+	public FileContentDecryptor createFileContentDecryptor(ByteBuffer header, long firstCiphertextByte, boolean authenticate) throws IllegalArgumentException, AuthenticationFailedException {
 		if (header.remaining() != getHeaderSize()) {
 			throw new IllegalArgumentException("Invalid header.");
 		}

File: main/frontend-webdav/src/main/java/org/cryptomator/frontend/webdav/jackrabbitservlet/NullInputContext.java
Patch:
@@ -5,7 +5,7 @@
 
 import org.apache.jackrabbit.webdav.io.InputContext;
 
-public class NullInputContext implements InputContext {
+class NullInputContext implements InputContext {
 
 	@Override
 	public boolean hasStream() {

File: main/frontend-webdav/src/main/java/org/cryptomator/frontend/webdav/filters/UriNormalizationFilter.java
Patch:
@@ -128,7 +128,7 @@ public SuffixPreservingRequest(HttpServletRequest request) {
 		@Override
 		public String getHeader(String name) {
 			if ((METHOD_MOVE.equalsIgnoreCase(getMethod()) || METHOD_COPY.equalsIgnoreCase(getMethod())) && HEADER_DESTINATION.equalsIgnoreCase(name)) {
-				final String uri = URI.create(super.getHeader(name)).getPath();
+				final String uri = URI.create(super.getHeader(name)).getRawPath();
 				return bestGuess(uri);
 			} else {
 				return super.getHeader(name);

File: main/filesystem-crypto/src/main/java/org/cryptomator/crypto/engine/impl/FileContentDecryptorImpl.java
Patch:
@@ -23,6 +23,7 @@
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
 import java.util.concurrent.atomic.LongAdder;
+import java.util.function.Supplier;
 
 import javax.crypto.Cipher;
 import javax.crypto.Mac;
@@ -43,7 +44,7 @@ class FileContentDecryptorImpl implements FileContentDecryptor {
 	private static final ExecutorService SHARED_DECRYPTION_EXECUTOR = Executors.newFixedThreadPool(NUM_THREADS);
 
 	private final FifoParallelDataProcessor<ByteBuffer> dataProcessor = new FifoParallelDataProcessor<>(NUM_THREADS + READ_AHEAD, SHARED_DECRYPTION_EXECUTOR);
-	private final ThreadLocal<Mac> hmacSha256;
+	private final Supplier<Mac> hmacSha256;
 	private final FileHeader header;
 	private final boolean authenticate;
 	private final LongAdder cleartextBytesScheduledForDecryption = new LongAdder();
@@ -52,8 +53,7 @@ class FileContentDecryptorImpl implements FileContentDecryptor {
 	private long chunkNumber = 0;
 
 	public FileContentDecryptorImpl(SecretKey headerKey, SecretKey macKey, ByteBuffer header, long firstCiphertextByte, boolean authenticate) {
-		final ThreadLocalMac hmacSha256 = new ThreadLocalMac(macKey, HMAC_SHA256);
-		this.hmacSha256 = hmacSha256;
+		this.hmacSha256 = new ThreadLocalMac(macKey, HMAC_SHA256);
 		this.header = FileHeader.decrypt(headerKey, hmacSha256, header);
 		this.authenticate = authenticate;
 		this.chunkNumber = firstCiphertextByte / CHUNK_SIZE; // floor() by int-truncation

File: main/filesystem-crypto/src/main/java/org/cryptomator/filesystem/crypto/CryptoWritableFile.java
Patch:
@@ -41,7 +41,7 @@ public CryptoWritableFile(FileContentCryptor cryptor, WritableFile file) {
 
 	private void initialize(long firstCleartextByte) {
 		encryptor = cryptor.createFileContentEncryptor(Optional.empty(), firstCleartextByte);
-		writeHeader();
+		file.position(cryptor.getHeaderSize()); // skip header size, header is written on close
 		writeTask = executorService.submit(new CiphertextWriter(file, encryptor));
 	}
 

File: main/frontend-webdav/src/test/java/org/cryptomator/frontend/webdav/FileSystemWebDavServer.java
Patch:
@@ -17,13 +17,13 @@
 import org.cryptomator.frontend.webdav.filters.LoggingHttpFilter;
 import org.eclipse.jetty.servlet.ServletContextHandler;
 
-class FileSystemWebDabServer {
+class FileSystemWebDavServer {
 
 	private static final WebDavComponent WEVDAV_COMP = DaggerWebDavComponent.create();
 
 	private final FileSystem fileSystem;
 
-	public FileSystemWebDabServer(FileSystem fileSystem) {
+	public FileSystemWebDavServer(FileSystem fileSystem) {
 		this.fileSystem = fileSystem;
 	}
 

File: main/frontend-webdav/src/test/java/org/cryptomator/frontend/webdav/InMemoryWebDavServer.java
Patch:
@@ -21,7 +21,7 @@ public class InMemoryWebDavServer {
 	private static final CryptoFileSystemTestComponent CRYPTO_FS_COMP = DaggerCryptoFileSystemTestComponent.builder().cryptoEngineModule(new CryptoEngineTestModule()).build();
 
 	public static void main(String[] args) throws Exception {
-		new FileSystemWebDabServer(cryptoFileSystem()).run();
+		new FileSystemWebDavServer(cryptoFileSystem()).run();
 	}
 
 	private static FileSystem cryptoFileSystem() {

File: main/frontend-webdav/src/test/java/org/cryptomator/frontend/webdav/NioWebDavServer.java
Patch:
@@ -26,7 +26,7 @@ public class NioWebDavServer {
 	private static final String PATH_TO_SERVE_PROPERTY = "pathToServe";
 
 	public static void main(String[] args) throws Exception {
-		new FileSystemWebDabServer(nioFileSystem()).run();
+		new FileSystemWebDavServer(nioFileSystem()).run();
 	}
 
 	private static FileSystem nioFileSystem() {

File: main/filesystem-crypto/src/main/java/org/cryptomator/crypto/engine/impl/FileContentCryptorImpl.java
Patch:
@@ -23,6 +23,7 @@ public class FileContentCryptorImpl implements FileContentCryptor {
 	public static final int PAYLOAD_SIZE = 32 * 1024;
 	public static final int NONCE_SIZE = 16;
 	public static final int MAC_SIZE = 32;
+	public static final int CHUNK_SIZE = NONCE_SIZE + PAYLOAD_SIZE + MAC_SIZE;
 
 	private final SecretKey encryptionKey;
 	private final SecretKey macKey;
@@ -46,7 +47,7 @@ public long toCiphertextPos(long cleartextPos) {
 		assert cleartextChunkStart <= cleartextPos;
 		long chunkInternalDiff = cleartextPos - cleartextChunkStart;
 		assert chunkInternalDiff >= 0 && chunkInternalDiff < PAYLOAD_SIZE;
-		long ciphertextChunkStart = chunkNum * (NONCE_SIZE + PAYLOAD_SIZE + MAC_SIZE);
+		long ciphertextChunkStart = chunkNum * CHUNK_SIZE;
 		return ciphertextChunkStart + chunkInternalDiff;
 	}
 
@@ -55,7 +56,7 @@ public FileContentDecryptor createFileContentDecryptor(ByteBuffer header, long f
 		if (header.remaining() != getHeaderSize()) {
 			throw new IllegalArgumentException("Invalid header.");
 		}
-		if (firstCiphertextByte % (NONCE_SIZE + PAYLOAD_SIZE + MAC_SIZE) != 0) {
+		if (firstCiphertextByte % CHUNK_SIZE != 0) {
 			throw new IllegalArgumentException("Invalid starting point for decryption.");
 		}
 		return new FileContentDecryptorImpl(encryptionKey, macKey, header, firstCiphertextByte, authenticate);

File: main/filesystem-crypto/src/main/java/org/cryptomator/filesystem/blockaligned/BlockAlignedWritableFile.java
Patch:
@@ -54,7 +54,7 @@ public void position(long logicalPosition) throws UncheckedIOException {
 
 	// visible for testing
 	void switchToBlockAlignedMode() {
-		LOG.debug("switching to blockaligend write...");
+		LOG.trace("switching to blockaligend write...");
 		mode = Mode.BLOCK_ALIGNED;
 	}
 

File: main/filesystem-crypto/src/main/java/org/cryptomator/crypto/engine/impl/FileContentEncryptorImpl.java
Patch:
@@ -28,7 +28,6 @@
 import javax.crypto.ShortBufferException;
 import javax.crypto.spec.IvParameterSpec;
 
-import org.apache.commons.codec.binary.Hex;
 import org.cryptomator.crypto.engine.FileContentCryptor;
 import org.cryptomator.crypto.engine.FileContentEncryptor;
 import org.cryptomator.io.ByteBuffers;
@@ -165,7 +164,6 @@ public ByteBuffer call() {
 				mac.update(nonce);
 				mac.update(ciphertextBuf);
 				byte[] authenticationCode = mac.doFinal();
-				Hex.encodeHexString(authenticationCode);
 				outBuf.put(authenticationCode);
 
 				// flip and return:

File: main/frontend-webdav/src/main/java/org/cryptomator/frontend/webdav/jackrabbitservlet/DavFileWithRange.java
Patch:
@@ -23,7 +23,7 @@
  * 
  * @see {@link https://tools.ietf.org/html/rfc7233#section-4}
  */
-public class DavFileWithRange extends DavFile {
+class DavFileWithRange extends DavFile {
 
 	private final Pair<String, String> requestRange;
 

File: main/frontend-webdav/src/main/java/org/cryptomator/frontend/webdav/jackrabbitservlet/DavFileWithUnsatisfiableRange.java
Patch:
@@ -19,7 +19,7 @@
  * 
  * @see {@link https://tools.ietf.org/html/rfc7233#section-4.2}
  */
-public class DavFileWithUnsatisfiableRange extends DavFile {
+class DavFileWithUnsatisfiableRange extends DavFile {
 
 	public DavFileWithUnsatisfiableRange(FilesystemResourceFactory factory, LockManager lockManager, DavSession session, FileLocator node) throws DavException {
 		super(factory, lockManager, session, node);

File: main/frontend-webdav/src/main/java/org/cryptomator/frontend/webdav/jackrabbitservlet/ExclusiveSharedLock.java
Patch:
@@ -14,7 +14,7 @@
 import org.apache.jackrabbit.webdav.lock.Scope;
 import org.apache.jackrabbit.webdav.lock.Type;
 
-public class ExclusiveSharedLock extends AbstractActiveLock {
+class ExclusiveSharedLock extends AbstractActiveLock {
 
 	private final String token;
 	private final Type type;

File: main/frontend-webdav/src/main/java/org/cryptomator/frontend/webdav/jackrabbitservlet/ExclusiveSharedLockManager.java
Patch:
@@ -30,7 +30,7 @@
 import org.cryptomator.filesystem.jackrabbit.FileSystemResourceLocator;
 import org.cryptomator.filesystem.jackrabbit.FolderLocator;
 
-public class ExclusiveSharedLockManager implements LockManager {
+class ExclusiveSharedLockManager implements LockManager {
 
 	private final ConcurrentMap<FileSystemResourceLocator, Map<String, ActiveLock>> lockedResources = new ConcurrentHashMap<>();
 

File: main/frontend-webdav/src/test/java/org/cryptomator/frontend/webdav/InMemoryWebDavServer.java
Patch:
@@ -33,7 +33,7 @@ public static void main(String[] args) throws Exception {
 		server.setPort(8080);
 		server.start();
 
-		FileSystem fileSystem = inMemoryFileSystem();
+		FileSystem fileSystem = cryptoFileSystem();
 		ServletContextHandler servlet = server.addServlet(fileSystem, URI.create("http://localhost:8080/foo"));
 		servlet.addFilter(LoggingHttpFilter.class, "/*", EnumSet.of(DispatcherType.REQUEST));
 		servlet.start();

File: main/filesystem-crypto/src/main/java/org/cryptomator/filesystem/crypto/CryptoFile.java
Patch:
@@ -10,10 +10,9 @@
 
 import static java.nio.charset.StandardCharsets.UTF_8;
 
-import java.util.Optional;
 import java.io.UncheckedIOException;
 import java.nio.file.FileAlreadyExistsException;
-import java.time.Instant;
+import java.util.Optional;
 
 import org.cryptomator.crypto.engine.Cryptor;
 import org.cryptomator.filesystem.File;

File: main/filesystem-inmemory/src/main/java/org/cryptomator/filesystem/inmem/InMemoryFile.java
Patch:
@@ -69,6 +69,7 @@ public WritableFile openWritable() {
 					throw new UncheckedIOException(new FileAlreadyExistsException(k));
 				} else {
 					if (v == null) {
+						assert!content.hasRemaining();
 						this.creationTime = Instant.now();
 					}
 					this.lastModified = Instant.now();

File: main/filesystem-crypto/src/main/java/org/cryptomator/filesystem/crypto/CryptoFolder.java
Patch:
@@ -23,14 +23,15 @@
 import java.util.function.Predicate;
 import java.util.stream.Stream;
 
-import org.apache.commons.io.IOUtils;
 import org.apache.commons.lang3.StringUtils;
+import org.cryptomator.common.LazyInitializer;
 import org.cryptomator.common.WeakValuedCache;
 import org.cryptomator.crypto.engine.Cryptor;
 import org.cryptomator.filesystem.Deleter;
 import org.cryptomator.filesystem.File;
 import org.cryptomator.filesystem.Folder;
 import org.cryptomator.filesystem.Node;
+import org.cryptomator.io.FileContents;
 
 class CryptoFolder extends CryptoNode implements Folder {
 

File: main/filesystem-api/src/main/java/org/cryptomator/filesystem/delegating/DelegatingFolder.java
Patch:
@@ -83,7 +83,7 @@ public void copyTo(Folder destination) throws UncheckedIOException {
 			final Folder delegateDest = ((DelegatingFolder<?, ?>) destination).delegate;
 			delegate.copyTo(delegateDest);
 		} else {
-			Folder.super.copyTo(destination);
+			throw new IllegalArgumentException("Can only copy DelegatingFolder to other DelegatingFolder.");
 		}
 	}
 

File: main/filesystem-api/src/test/java/org/cryptomator/filesystem/delegating/DelegatingFolderTest.java
Patch:
@@ -133,14 +133,13 @@ public void testCopyTo() {
 		Mockito.verify(mockFolder1).copyTo(mockFolder2);
 	}
 
-	@Test
+	@Test(expected = IllegalArgumentException.class)
 	public void testCopyToDestinationFromDifferentLayer() {
 		Folder mockFolder1 = Mockito.mock(Folder.class);
 		Folder mockFolder2 = Mockito.mock(Folder.class);
 		DelegatingFolder<?, ?> delegatingFolder1 = new TestDelegatingFolder(null, mockFolder1);
 
 		delegatingFolder1.copyTo(mockFolder2);
-		Mockito.verify(mockFolder1).copyTo(mockFolder2);
 	}
 
 	@Test

File: main/frontend-webdav/src/main/java/org/cryptomator/frontend/webdav/WebDavServletContextFactory.java
Patch:
@@ -20,6 +20,7 @@
 import org.cryptomator.filesystem.Folder;
 import org.cryptomator.webdav.filters.AcceptRangeFilter;
 import org.cryptomator.webdav.filters.MacChunkedPutCompatibilityFilter;
+import org.cryptomator.webdav.filters.MkcolComplianceFilter;
 import org.cryptomator.webdav.filters.UriNormalizationFilter;
 import org.cryptomator.webdav.filters.UriNormalizationFilter.ResourceTypeChecker;
 import org.cryptomator.webdav.filters.UriNormalizationFilter.ResourceTypeChecker.ResourceType;
@@ -64,6 +65,7 @@ public ServletContextHandler create(URI contextRoot, Folder root) {
 		final ServletContextHandler servletContext = new ServletContextHandler(null, contextPath, ServletContextHandler.SESSIONS);
 		final ServletHolder servletHolder = new ServletHolder(contextPath, new WebDavServlet(contextRoot, root));
 		servletContext.addServlet(servletHolder, WILDCARD);
+		servletContext.addFilter(MkcolComplianceFilter.class, WILDCARD, EnumSet.of(DispatcherType.REQUEST));
 		servletContext.addFilter(AcceptRangeFilter.class, WILDCARD, EnumSet.of(DispatcherType.REQUEST));
 		servletContext.addFilter(new FilterHolder(new UriNormalizationFilter(resourceTypeChecker)), WILDCARD, EnumSet.of(DispatcherType.REQUEST));
 		if (SystemUtils.IS_OS_MAC_OSX) {

File: main/filesystem-crypto/src/main/java/org/cryptomator/filesystem/crypto/CryptoFile.java
Patch:
@@ -21,16 +21,14 @@
 
 public class CryptoFile extends CryptoNode implements File {
 
-	static final String FILE_EXT = ".file";
-
 	public CryptoFile(CryptoFolder parent, String name, Cryptor cryptor) {
 		super(parent, name, cryptor);
 	}
 
 	@Override
 	protected String encryptedName() {
 		final byte[] parentDirId = parent.getDirectoryId().getBytes(UTF_8);
-		return cryptor.getFilenameCryptor().encryptFilename(name(), parentDirId) + FILE_EXT;
+		return cryptor.getFilenameCryptor().encryptFilename(name(), parentDirId);
 	}
 
 	@Override

File: main/filesystem-nameshortening/src/main/java/org/cryptomator/filesystem/shortening/ShorteningFileSystemFactory.java
Patch:
@@ -19,7 +19,7 @@
 @Singleton
 public class ShorteningFileSystemFactory {
 
-	private static final int SHORTENING_THRESHOLD = 140;
+	private static final int SHORTENING_THRESHOLD = 129; // 128 + "_"
 	private static final String METADATA_FOLDER_NAME = "m";
 
 	private final BlacklistingFileSystemFactory blacklistingFileSystemFactory;

File: main/filesystem-nameshortening/src/main/java/org/cryptomator/filesystem/shortening/ShorteningFileSystem.java
Patch:
@@ -3,10 +3,11 @@
 import org.cryptomator.filesystem.FileSystem;
 import org.cryptomator.filesystem.Folder;
 
-class ShorteningFileSystem extends ShorteningFolder implements FileSystem {
+public class ShorteningFileSystem extends ShorteningFolder implements FileSystem {
 
 	public ShorteningFileSystem(Folder root, Folder metadataRoot, int threshold) {
 		super(null, root, "", new FilenameShortener(metadataRoot, threshold));
+		create();
 	}
 
 }

File: main/filesystem-nameshortening/src/main/java/org/cryptomator/filesystem/shortening/ShorteningFolder.java
Patch:
@@ -55,7 +55,7 @@ public void create() throws UncheckedIOException {
 		if (exists()) {
 			return;
 		}
-		parent().get().create();
+		parent().ifPresent(Folder::create);
 		if (shortener.isShortened(shortenedName())) {
 			shortener.saveMapping(name(), shortenedName());
 		}

File: main/frontend-webdav/src/test/java/org/cryptomator/webdav/filters/LoggingHttpFilter.java
Patch:
@@ -109,8 +109,7 @@ private void logError(HttpServletRequest request, Throwable throwable) {
 		LOG.error(
 				format("## Request ##\n" + //
 						"%s %s %s\n" //
-						+ "%s\n" //
-						+ "%s\n\n", //
+						+ "%s\n", //
 				request.getMethod(), request.getRequestURI(), request.getProtocol(), //
 				headers(request)), //
 				throwable);

File: main/filesystem-inmemory/src/main/java/org/cryptomator/filesystem/inmem/InMemoryReadableFile.java
Patch:
@@ -37,7 +37,8 @@ public boolean isOpen() {
 	@Override
 	public void copyTo(WritableFile other) throws UncheckedIOException {
 		ByteBuffer source = contentGetter.get().asReadOnlyBuffer();
-		source.position(position);
+		source.position(0);
+		other.truncate();
 		this.position += other.write(source);
 	}
 

File: main/filesystem-crypto/src/main/java/org/cryptomator/filesystem/crypto/CiphertextWriter.java
Patch:
@@ -1,5 +1,7 @@
 package org.cryptomator.filesystem.crypto;
 
+import java.io.InterruptedIOException;
+import java.io.UncheckedIOException;
 import java.nio.ByteBuffer;
 import java.util.concurrent.Callable;
 
@@ -25,7 +27,7 @@ public Void call() {
 				file.write(ciphertext);
 			}
 		} catch (InterruptedException e) {
-			Thread.currentThread().interrupt();
+			throw new UncheckedIOException(new InterruptedIOException("Task interrupted while waiting for ciphertext"));
 		}
 		return null;
 	}

File: main/filesystem-inmemory/src/main/java/org/cryptomator/filesystem/inmem/InMemoryWritableFile.java
Patch:
@@ -27,7 +27,7 @@ public class InMemoryWritableFile implements WritableFile {
 	private final Consumer<Void> deleter;
 	private final WriteLock writeLock;
 
-	private boolean open;
+	private boolean open = true;
 	private int position = 0;
 
 	public InMemoryWritableFile(Consumer<Instant> lastModifiedSetter, Consumer<Instant> creationTimeSetter, Supplier<ByteBuffer> contentGetter, Consumer<ByteBuffer> contentSetter, Consumer<Void> deleter,

File: main/commons-test/src/main/java/org/cryptomator/common/test/matcher/OptionalMatcher.java
Patch:
@@ -13,7 +13,7 @@ public static <T> Matcher<Optional<T>> presentOptionalWithValueThat(Matcher<? su
 			@Override
 			public void describeTo(Description description) {
 				description //
-						.appendText("a present Optional with a value that") //
+						.appendText("a present Optional with a value that ") //
 						.appendDescriptionOf(valueMatcher);
 			}
 
@@ -23,7 +23,7 @@ protected boolean matchesSafely(Optional<T> item, Description mismatchDescriptio
 					if (valueMatcher.matches(item.get())) {
 						return true;
 					} else {
-						mismatchDescription.appendText("a present Optional with value that");
+						mismatchDescription.appendText("a present Optional with value that ");
 						valueMatcher.describeMismatch(item, mismatchDescription);
 						return false;
 					}

File: main/filesystem-api/src/main/java/org/cryptomator/filesystem/Folder.java
Patch:
@@ -31,7 +31,7 @@ public interface Folder extends Node {
 	 * @return the created {@code Stream}
 	 * @throws UncheckedIOException
 	 *             if an {@link IOException} occurs while initializing the
-	 *             stream
+	 *             stream or the {@code Folder} does not exist
 	 */
 	Stream<? extends Node> children() throws UncheckedIOException;
 

File: main/filesystem-crypto/src/main/java/org/cryptomator/filesystem/crypto/CryptoFileSystem.java
Patch:
@@ -44,6 +44,7 @@ public CryptoFileSystem(Folder physicalRoot, Cryptor cryptor, CharSequence passp
 		assert masterkeyFile.exists() : "A CryptoFileSystem can not exist without a masterkey file.";
 		final File backupFile = physicalRoot.file(MASTERKEY_BACKUP_FILENAME);
 		masterkeyFile.copyTo(backupFile);
+		create();
 	}
 
 	private static boolean decryptMasterKeyFile(Cryptor cryptor, File masterkeyFile, CharSequence passphrase) {

File: main/filesystem-inmemory/src/main/java/org/cryptomator/filesystem/inmem/InMemoryNode.java
Patch:
@@ -41,7 +41,7 @@ public Optional<InMemoryFolder> parent() {
 
 	@Override
 	public boolean exists() {
-		return parent.children().anyMatch(node -> node.equals(this));
+		return parent.exists() && parent.children().anyMatch(node -> node.equals(this));
 	}
 
 	@Override

File: main/filesystem-nameshortening/src/test/java/org/cryptomator/filesystem/shortening/ShorteningFileSystemTest.java
Patch:
@@ -41,6 +41,7 @@ public void testDeflate() {
 	public void testMoveLongFolders() {
 		final FileSystem underlyingFs = new InMemoryFileSystem();
 		final Folder metadataRoot = underlyingFs.folder("m");
+		metadataRoot.create();
 		final FileSystem fs = new ShorteningFileSystem(underlyingFs, metadataRoot, 10);
 
 		final Folder shortNamedFolder = fs.folder("test");
@@ -56,6 +57,7 @@ public void testMoveLongFolders() {
 	public void testMoveLongFiles() throws UncheckedIOException, TimeoutException {
 		final FileSystem underlyingFs = new InMemoryFileSystem();
 		final Folder metadataRoot = underlyingFs.folder("m");
+		metadataRoot.create();
 		final FileSystem fs = new ShorteningFileSystem(underlyingFs, metadataRoot, 10);
 
 		final File shortNamedFolder = fs.file("test");

File: main/filesystem-nio/src/main/java/org/cryptomator/filesystem/nio/NioFolder.java
Patch:
@@ -9,6 +9,7 @@
 import java.util.Optional;
 import java.util.stream.Stream;
 
+import org.cryptomator.common.AutoClosingStream;
 import org.cryptomator.common.WeakValuedCache;
 import org.cryptomator.filesystem.File;
 import org.cryptomator.filesystem.Folder;
@@ -27,7 +28,7 @@ public NioFolder(Optional<NioFolder> parent, Path path, NioAccess nioAccess, Ins
 	@Override
 	public Stream<? extends Node> children() throws UncheckedIOException {
 		try {
-			return nioAccess.list(path).map(this::childPathToNode);
+			return AutoClosingStream.from(nioAccess.list(path).map(this::childPathToNode));
 		} catch (IOException e) {
 			throw new UncheckedIOException(e);
 		}
@@ -130,6 +131,7 @@ public void delete() {
 		if (!exists()) {
 			return;
 		}
+
 		folders().forEach(Folder::delete);
 		files().forEach(NioFolder::deleteFile);
 		try {

File: main/filesystem-api/src/test/java/org/cryptomator/filesystem/delegating/TestDelegatingFolder.java
Patch:
@@ -10,12 +10,12 @@ public TestDelegatingFolder(TestDelegatingFolder parent, Folder delegate) {
 	}
 
 	@Override
-	protected TestDelegatingFile file(File delegate) {
+	protected TestDelegatingFile newFile(File delegate) {
 		return new TestDelegatingFile(this, delegate);
 	}
 
 	@Override
-	protected TestDelegatingFolder folder(Folder delegate) {
+	protected TestDelegatingFolder newFolder(Folder delegate) {
 		return new TestDelegatingFolder(this, delegate);
 	}
 

File: main/filesystem-crypto/src/main/java/org/cryptomator/filesystem/blockaligned/BlockAlignedFolder.java
Patch:
@@ -22,12 +22,12 @@ public BlockAlignedFolder(BlockAlignedFolder parent, Folder delegate, int blockS
 	}
 
 	@Override
-	protected BlockAlignedFile file(File delegate) {
+	protected BlockAlignedFile newFile(File delegate) {
 		return new BlockAlignedFile(this, delegate, blockSize);
 	}
 
 	@Override
-	protected BlockAlignedFolder folder(Folder delegate) {
+	protected BlockAlignedFolder newFolder(Folder delegate) {
 		return new BlockAlignedFolder(this, delegate, blockSize);
 	}
 

File: main/filesystem-crypto/src/main/java/org/cryptomator/filesystem/crypto/CryptoNode.java
Patch:
@@ -49,7 +49,8 @@ public String name() {
 
 	@Override
 	public boolean exists() {
-		return parent.children().anyMatch(node -> node.equals(this));
+		return physicalFile().exists();
+		// return parent.children().anyMatch(node -> node.equals(this));
 	}
 
 	@Override

File: main/filesystem-nameshortening/src/main/java/org/cryptomator/filesystem/shortening/ShorteningFolder.java
Patch:
@@ -43,12 +43,12 @@ public ShorteningFolder folder(String name) throws UncheckedIOException {
 	}
 
 	@Override
-	protected ShorteningFile file(File delegate) {
+	protected ShorteningFile newFile(File delegate) {
 		return new ShorteningFile(this, delegate, null, shortener);
 	}
 
 	@Override
-	protected ShorteningFolder folder(Folder delegate) {
+	protected ShorteningFolder newFolder(Folder delegate) {
 		return new ShorteningFolder(this, delegate, null, shortener);
 	}
 

File: main/jackrabbit-filesystem-adapter/src/main/java/org/cryptomator/filesystem/jackrabbit/FolderLocator.java
Patch:
@@ -23,7 +23,7 @@ public FolderLocator(DavLocatorFactory factory, String prefix, FolderLocator par
 	}
 
 	@Override
-	protected FileLocator file(File delegate) {
+	protected FileLocator newFile(File delegate) {
 		return new FileLocator(factory, prefix, this, delegate);
 	}
 
@@ -33,7 +33,7 @@ public FileLocator resolveFile(String relativePath) throws UncheckedIOException
 	}
 
 	@Override
-	protected FolderLocator folder(Folder delegate) {
+	protected FolderLocator newFolder(Folder delegate) {
 		return new FolderLocator(factory, prefix, this, delegate);
 	}
 

File: main/jackrabbit-filesystem-adapter/src/test/java/org/cryptomator/webdav/jackrabbitservlet/FileSystemBasedWebDavServer.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.cryptomator.filesystem.FileSystem;
 import org.cryptomator.webdav.filters.AcceptRangeFilter;
+import org.cryptomator.webdav.filters.LoggingHttpFilter;
 import org.cryptomator.webdav.filters.UriNormalizationFilter;
 import org.eclipse.jetty.server.Connector;
 import org.eclipse.jetty.server.Server;
@@ -54,6 +55,7 @@ public FileSystemBasedWebDavServer(FileSystem fileSystem) {
 		servletContext.addServlet(servletHolder, "/*");
 		servletContext.addFilter(AcceptRangeFilter.class, "/*", EnumSet.of(DispatcherType.REQUEST));
 		servletContext.addFilter(UriNormalizationFilter.class, "/*", EnumSet.of(DispatcherType.REQUEST));
+		servletContext.addFilter(LoggingHttpFilter.class, "/*", EnumSet.of(DispatcherType.REQUEST));
 		servletCollection.mapContexts();
 
 		server.setConnectors(new Connector[] { localConnector });

File: main/jackrabbit-filesystem-adapter/src/main/java/org/cryptomator/webdav/jackrabbitservlet/DavNode.java
Patch:
@@ -125,8 +125,8 @@ public void setProperty(DavProperty<?> property) throws DavException {
 			this.setCreationTime(createTime);
 		} else if (Arrays.asList(DAV_MODIFIEDDATE_PROPNAMES).contains(namespacelessPropertyName) && property.getValue() instanceof String) {
 			final String lastModifiedTimeStr = (String) property.getValue();
-			final Instant createTime = Instant.from(DateTimeFormatter.RFC_1123_DATE_TIME.parse(lastModifiedTimeStr));
-			this.setCreationTime(createTime);
+			final Instant modificationTime = Instant.from(DateTimeFormatter.RFC_1123_DATE_TIME.parse(lastModifiedTimeStr));
+			this.setModificationTime(modificationTime);
 		}
 	}
 

File: main/filesystem-crypto/src/test/java/org/cryptomator/crypto/engine/impl/FileContentDecryptorImplTest.java
Patch:
@@ -60,7 +60,7 @@ public void testDecryption() throws InterruptedException {
 		}
 	}
 
-	@Test
+	@Test(timeout = 2000)
 	public void testPartialDecryption() throws InterruptedException {
 		final byte[] keyBytes = new byte[32];
 		final SecretKey encryptionKey = new SecretKeySpec(keyBytes, "AES");
@@ -90,10 +90,9 @@ public void testPartialDecryption() throws InterruptedException {
 		for (int i = 3; i >= 0; i--) {
 			int ciphertextPos = (int) cryptor.toCiphertextPos(i * 32768);
 			try (FileContentDecryptor decryptor = cryptor.createFileContentDecryptor(header, ciphertextPos)) {
-				ByteBuffer intBuf = ByteBuffer.allocate(32768);
-				intBuf.clear();
 				ciphertext.position(ciphertextPos);
 				decryptor.append(ciphertext);
+				decryptor.append(FileContentCryptor.EOF);
 				ByteBuffer decrypted = decryptor.cleartext();
 				Assert.assertEquals(i, decrypted.getInt());
 			}

File: main/filesystem-inmemory/src/main/java/org/cryptomator/filesystem/inmem/InMemoryFile.java
Patch:
@@ -53,6 +53,7 @@ public WritableFile openWritable() {
 				throw new UncheckedIOException(new FileExistsException(k));
 			}
 		});
+		parent.volatileFiles.remove(name);
 		return new InMemoryWritableFile(this::setLastModified, this::getContent, this::setContent, this::delete, writeLock);
 	}
 

File: main/filesystem-nameshortening/src/test/java/org/cryptomator/filesystem/shortening/ShorteningFileSystemTest.java
Patch:
@@ -30,9 +30,7 @@ public void testDeflate() {
 		final FileSystem underlyingFs = new InMemoryFileSystem();
 		final Folder metadataRoot = underlyingFs.folder("m");
 		final FileSystem fs = new ShorteningFileSystem(underlyingFs, metadataRoot, 10);
-		final Folder longNamedFolder = fs.folder("morethantenchars"); // base32(sha1(morethantenchars))
-																		// =
-																		// QMJL5GQUETRX2YRV6XDTJQ6NNM7IEUHP
+		final Folder longNamedFolder = fs.folder("morethantenchars"); // base32(sha1(morethantenchars)) = QMJL5GQUETRX2YRV6XDTJQ6NNM7IEUHP
 		final File correspondingMetadataFile = metadataRoot.folder("QM").folder("JL").file("QMJL5GQUETRX2YRV6XDTJQ6NNM7IEUHP.lng");
 		longNamedFolder.create();
 		Assert.assertTrue(longNamedFolder.exists());

File: main/commons-test/src/main/java/org/cryptomator/commons/test/matcher/ContainsMatcher.java
Patch:
@@ -4,8 +4,8 @@
 import org.hamcrest.Matchers;
 
 /**
- * Wraps hamcrest contains and containsInAny order matcher factory methods to
- * avoid problems due to incorrect / inconsistent handling of generics by the
+ * Wraps hamcrest contains and containsInAnyOrder matcher factory methods to
+ * avoid problems due to incorrect / inconsistent handling of generics by
  * several java compilers.
  * 
  * @author Markus Kreusch

File: main/crypto-aes/src/main/java/org/cryptomator/crypto/aes256/Aes256Cryptor.java
Patch:
@@ -497,7 +497,7 @@ protected void decrypt(Cipher cipher, ByteBuffer ciphertextBuf, ByteBuffer plain
 
 		// wait for decryption workers to finish:
 		try {
-			executor.waitUntilDone();
+			executor.waitUntilDone(1, TimeUnit.SECONDS);
 		} catch (ExecutionException e) {
 			final Throwable cause = e.getCause();
 			if (cause instanceof IOException) {
@@ -721,7 +721,7 @@ protected void encrypt(Cipher cipher, ByteBuffer plaintextBuf, ByteBuffer cipher
 
 		// wait for encryption workers to finish:
 		try {
-			executor.waitUntilDone();
+			executor.waitUntilDone(1, TimeUnit.SECONDS);
 		} catch (ExecutionException e) {
 			final Throwable cause = e.getCause();
 			if (cause instanceof IOException) {

File: main/crypto-aes/src/main/java/org/cryptomator/crypto/aes256/CryptoWorker.java
Patch:
@@ -32,7 +32,6 @@ public final Void call() throws IOException {
 			while (!Thread.currentThread().isInterrupted()) {
 				final BlocksData blocksData = queue.take();
 				if (blocksData == POISON) {
-					// put poison back in for other threads:
 					break;
 				}
 				final ByteBuffer processedBytes = this.process(blocksData);
@@ -52,6 +51,7 @@ public final Void call() throws IOException {
 				}
 			}
 		} catch (InterruptedException e) {
+			// will happen for executorService.shutdownNow()
 			Thread.currentThread().interrupt();
 		}
 		return null;

File: main/crypto-aes/src/main/java/org/cryptomator/crypto/aes256/Aes256Cryptor.java
Patch:
@@ -98,8 +98,9 @@ public class Aes256Cryptor implements Cryptor, AesCryptographicConfiguration {
 	public Aes256Cryptor() {
 		byte[] bytes = new byte[AES_KEY_LENGTH_IN_BITS / Byte.SIZE];
 		try {
-			securePrng = SecureRandom.getInstance(PRNG_ALGORITHM);
-			securePrng.setSeed(securePrng.generateSeed(PRNG_SEED_LENGTH));
+			securePrng = SecureRandom.getInstanceStrong();
+			// No setSeed needed. See SecureRandom.getInstance(String):
+			// The first call to nextBytes will force the SecureRandom object to seed itself
 			securePrng.nextBytes(bytes);
 			this.primaryMasterKey = new SecretKeySpec(bytes, AES_KEY_ALGORITHM);
 			securePrng.nextBytes(bytes);

File: main/ui/src/main/java/org/cryptomator/ui/CryptomatorModule.java
Patch:
@@ -77,7 +77,7 @@ ExecutorService provideExecutorService() {
 
 	@Provides
 	@Singleton
-	WebDavMounter provideWebDavMounterProvider(WebDavMounterProvider webDavMounterProvider) {
+	WebDavMounter provideWebDavMounter(WebDavMounterProvider webDavMounterProvider) {
 		return webDavMounterProvider.get();
 	}
 

File: main/ui/src/main/java/org/cryptomator/ui/util/mount/FallbackWebDavMounter.java
Patch:
@@ -9,6 +9,8 @@
 package org.cryptomator.ui.util.mount;
 
 import java.net.URI;
+import java.util.Map;
+import java.util.Optional;
 
 /**
  * A WebDavMounter acting as fallback if no other mounter works.
@@ -28,7 +30,7 @@ public void warmUp(int serverPort) {
 	}
 
 	@Override
-	public WebDavMount mount(URI uri, String name) {
+	public WebDavMount mount(URI uri, Map<MountParam, Optional<String>> mountParams) {
 		displayMountInstructions();
 		return new AbstractWebDavMount() {
 			@Override

File: main/core/src/main/java/org/cryptomator/webdav/WebDavServer.java
Patch:
@@ -40,7 +40,6 @@ public final class WebDavServer {
 	private static final int MAX_THREADS = 200;
 	private static final int MIN_THREADS = 4;
 	private static final int THREAD_IDLE_SECONDS = 20;
-	private static final int CONNECTION_IDLE_MILLIS = 100; // idle connection slow down random access on WebDAVFS for some reason. reconnect overhead can be tolerated
 	private final Server server;
 	private final ServerConnector localConnector;
 	private final ContextHandlerCollection servletCollection;
@@ -51,7 +50,6 @@ public WebDavServer() {
 		server = new Server(tp);
 		localConnector = new ServerConnector(server);
 		localConnector.setHost(LOCALHOST);
-		localConnector.setIdleTimeout(CONNECTION_IDLE_MILLIS);
 		servletCollection = new ContextHandlerCollection();
 
 		if (SystemUtils.IS_OS_WINDOWS) {

File: main/core/src/main/java/org/cryptomator/webdav/jackrabbit/EncryptedFile.java
Patch:
@@ -108,8 +108,9 @@ public void spool(OutputContext outputContext) throws IOException {
 				if (outputContext.hasStream()) {
 					final boolean authenticate = !cryptoWarningHandler.ignoreMac(getLocator().getResourcePath());
 					cryptor.decryptFile(c, outputContext.getOutputStream(), authenticate);
+					outputContext.getOutputStream().flush();
 				}
-				outputContext.getOutputStream().flush();
+
 			} catch (EOFException e) {
 				LOG.warn("Unexpected end of stream (possibly client hung up).");
 			}

File: main/core/src/main/java/org/cryptomator/webdav/jackrabbit/SilentlyFailingFileLock.java
Patch:
@@ -39,7 +39,7 @@ class SilentlyFailingFileLock implements AutoCloseable {
 			lock = channel.tryLock(position, size, shared);
 		} catch (IOException | OverlappingFileLockException e) {
 			if (LOG.isDebugEnabled()) {
-				LOG.warn("Unable to lock file.");
+				LOG.trace("Unable to lock file.");
 			}
 		} finally {
 			this.lock = lock;

File: main/core/src/main/java/org/cryptomator/webdav/jackrabbit/WebDavServlet.java
Patch:
@@ -95,7 +95,7 @@ protected void doPut(WebdavRequest request, WebdavResponse response, DavResource
 		super.doPut(request, response, resource);
 		if (LOG.isDebugEnabled()) {
 			long t1 = System.nanoTime();
-			LOG.debug("PUT TIME: " + (t1 - t0) / 1000 / 1000.0 + " ms");
+			LOG.trace("PUT TIME: " + (t1 - t0) / 1000 / 1000.0 + " ms");
 		}
 	}
 
@@ -111,7 +111,7 @@ protected void doGet(WebdavRequest request, WebdavResponse response, DavResource
 		}
 		if (LOG.isDebugEnabled()) {
 			long t1 = System.nanoTime();
-			LOG.debug("GET TIME: " + (t1 - t0) / 1000 / 1000.0 + " ms");
+			LOG.trace("GET TIME: " + (t1 - t0) / 1000 / 1000.0 + " ms");
 		}
 	}
 

File: main/crypto-aes/src/test/java/org/cryptomator/crypto/aes256/Aes256CryptorTest.java
Patch:
@@ -112,7 +112,7 @@ public void testEncryptionAndDecryption() throws IOException, DecryptFailedExcep
 		final Aes256Cryptor cryptor = new Aes256Cryptor();
 
 		// encrypt:
-		final ByteBuffer encryptedData = ByteBuffer.allocate(104 + plaintextData.length + 4096);
+		final ByteBuffer encryptedData = ByteBuffer.allocate(104 + plaintextData.length + 4096 + 32); // header + content + maximum possible size obfuscation padding + 32 bytes mac (per each 32k)
 		final SeekableByteChannel encryptedOut = new ByteBufferBackedSeekableChannel(encryptedData);
 		cryptor.encryptFile(plaintextIn, encryptedOut);
 		IOUtils.closeQuietly(plaintextIn);

File: main/core/src/main/java/org/cryptomator/webdav/jackrabbit/EncryptedDir.java
Patch:
@@ -260,7 +260,7 @@ public void move(AbstractEncryptedNode dest) throws DavException, IOException {
 		final Path srcPath = filePath;
 		final Path dstPath;
 		if (dest instanceof NonExistingNode) {
-			dstPath = ((NonExistingNode) dest).getDirFilePath();
+			dstPath = ((NonExistingNode) dest).materializeDirFilePath();
 		} else {
 			dstPath = dest.filePath;
 		}
@@ -278,7 +278,7 @@ public void move(AbstractEncryptedNode dest) throws DavException, IOException {
 	public void copy(AbstractEncryptedNode dest, boolean shallow) throws DavException, IOException {
 		final Path dstDirFilePath;
 		if (dest instanceof NonExistingNode) {
-			dstDirFilePath = ((NonExistingNode) dest).getDirFilePath();
+			dstDirFilePath = ((NonExistingNode) dest).materializeDirFilePath();
 		} else {
 			dstDirFilePath = dest.filePath;
 		}

File: main/core/src/main/java/org/cryptomator/webdav/jackrabbit/EncryptedFile.java
Patch:
@@ -120,7 +120,7 @@ public void move(AbstractEncryptedNode dest) throws DavException, IOException {
 		final Path srcPath = filePath;
 		final Path dstPath;
 		if (dest instanceof NonExistingNode) {
-			dstPath = ((NonExistingNode) dest).getFilePath();
+			dstPath = ((NonExistingNode) dest).materializeFilePath();
 		} else {
 			dstPath = dest.filePath;
 		}
@@ -137,7 +137,7 @@ public void copy(AbstractEncryptedNode dest, boolean shallow) throws DavExceptio
 		final Path srcPath = filePath;
 		final Path dstPath;
 		if (dest instanceof NonExistingNode) {
-			dstPath = ((NonExistingNode) dest).getFilePath();
+			dstPath = ((NonExistingNode) dest).materializeFilePath();
 		} else {
 			dstPath = dest.filePath;
 		}

File: main/core/src/main/java/org/cryptomator/webdav/jackrabbit/CleartextLocatorFactory.java
Patch:
@@ -79,7 +79,7 @@ public String getHref(boolean isCollection) {
 			final String encodedResourcePath = EncodeUtil.escapePath(getResourcePath());
 			final String fullPrefix = pathPrefix.endsWith("/") ? pathPrefix : pathPrefix + "/";
 			final String href = fullPrefix.concat(encodedResourcePath);
-			assert !href.endsWith("/");
+			assert href.equals(fullPrefix) || !href.endsWith("/");
 			if (isCollection) {
 				return href.concat("/");
 			} else {

File: main/crypto-aes/src/test/java/org/cryptomator/crypto/aes256/Aes256CryptorTest.java
Patch:
@@ -80,7 +80,7 @@ public void testIntegrityViolationDuringDecryption() throws IOException, Decrypt
 		final Aes256Cryptor cryptor = new Aes256Cryptor();
 
 		// encrypt:
-		final ByteBuffer encryptedData = ByteBuffer.allocate(96 + plaintextData.length + 4096);
+		final ByteBuffer encryptedData = ByteBuffer.allocate(104 + plaintextData.length + 4096);
 		final SeekableByteChannel encryptedOut = new ByteBufferBackedSeekableChannel(encryptedData);
 		cryptor.encryptFile(plaintextIn, encryptedOut);
 		IOUtils.closeQuietly(plaintextIn);
@@ -112,7 +112,7 @@ public void testEncryptionAndDecryption() throws IOException, DecryptFailedExcep
 		final Aes256Cryptor cryptor = new Aes256Cryptor();
 
 		// encrypt:
-		final ByteBuffer encryptedData = ByteBuffer.allocate(96 + plaintextData.length + 4096);
+		final ByteBuffer encryptedData = ByteBuffer.allocate(104 + plaintextData.length + 4096);
 		final SeekableByteChannel encryptedOut = new ByteBufferBackedSeekableChannel(encryptedData);
 		cryptor.encryptFile(plaintextIn, encryptedOut);
 		IOUtils.closeQuietly(plaintextIn);
@@ -151,7 +151,7 @@ public void testPartialDecryption() throws IOException, DecryptFailedException,
 		final Aes256Cryptor cryptor = new Aes256Cryptor();
 
 		// encrypt:
-		final ByteBuffer encryptedData = ByteBuffer.allocate((int) (96 + plaintextData.length * 1.2));
+		final ByteBuffer encryptedData = ByteBuffer.allocate((int) (104 + plaintextData.length * 1.2));
 		final SeekableByteChannel encryptedOut = new ByteBufferBackedSeekableChannel(encryptedData);
 		cryptor.encryptFile(plaintextIn, encryptedOut);
 		IOUtils.closeQuietly(plaintextIn);

File: main/crypto-aes/src/main/java/org/cryptomator/crypto/aes256/Aes256Cryptor.java
Patch:
@@ -636,7 +636,7 @@ public Long encryptFile(InputStream plaintextFile, SeekableByteChannel encrypted
 	}
 
 	private byte[] longToByteArray(long lng) {
-		return ByteBuffer.allocate(Long.SIZE).putLong(lng).array();
+		return ByteBuffer.allocate(Long.SIZE / Byte.SIZE).putLong(lng).array();
 	}
 
 }

File: main/core/src/main/java/org/cryptomator/webdav/jackrabbit/CryptoResourceFactory.java
Patch:
@@ -6,7 +6,6 @@
 import java.nio.file.Files;
 import java.nio.file.Path;
 
-import org.apache.commons.httpclient.HttpStatus;
 import org.apache.commons.io.FilenameUtils;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.commons.lang3.tuple.ImmutablePair;
@@ -60,11 +59,11 @@ public final DavResource createResource(DavResourceLocator locator, DavServletRe
 		} else if (Files.exists(filePath) && DavMethods.METHOD_GET.equals(request.getMethod()) && rangeHeader != null && isRangeSatisfiable(rangeHeader)) {
 			// FILE RANGE
 			final Pair<String, String> requestRange = getRequestRange(rangeHeader);
-			response.setStatus(HttpStatus.SC_PARTIAL_CONTENT);
+			response.setStatus(DavServletResponse.SC_PARTIAL_CONTENT);
 			return createFilePart(locator, request.getDavSession(), requestRange, filePath);
 		} else if (Files.exists(filePath) && DavMethods.METHOD_GET.equals(request.getMethod()) && rangeHeader != null && !isRangeSatisfiable(rangeHeader)) {
 			// FULL FILE (unsatisfiable range)
-			response.setStatus(HttpStatus.SC_REQUESTED_RANGE_NOT_SATISFIABLE);
+			response.setStatus(DavServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE);
 			final EncryptedFile file = createFile(locator, request.getDavSession(), filePath);
 			response.addHeader(HttpHeader.CONTENT_RANGE.asString(), "bytes */" + file.getContentLength());
 			return file;

File: main/core/src/main/java/org/cryptomator/webdav/jackrabbit/FilenameTranslator.java
Patch:
@@ -5,7 +5,6 @@
 import java.io.Serializable;
 import java.nio.ByteBuffer;
 import java.nio.channels.FileChannel;
-import java.nio.channels.FileLock;
 import java.nio.charset.StandardCharsets;
 import java.nio.file.FileSystems;
 import java.nio.file.Files;
@@ -130,13 +129,14 @@ public String getCleartextFilename(String encryptedFilename) throws DecryptFaile
 	/* Locked I/O */
 
 	private void writeAllBytesAtomically(Path path, byte[] bytes) throws IOException {
-		try (final FileChannel c = FileChannel.open(path, StandardOpenOption.WRITE, StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING, StandardOpenOption.DSYNC); final FileLock lock = c.lock()) {
+		try (final FileChannel c = FileChannel.open(path, StandardOpenOption.WRITE, StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING, StandardOpenOption.DSYNC);
+				final SilentlyFailingFileLock lock = new SilentlyFailingFileLock(c, false)) {
 			c.write(ByteBuffer.wrap(bytes));
 		}
 	}
 
 	private byte[] readAllBytesAtomically(Path path) throws IOException {
-		try (final FileChannel c = FileChannel.open(path, StandardOpenOption.READ, StandardOpenOption.DSYNC); final FileLock lock = c.lock(0L, Long.MAX_VALUE, true)) {
+		try (final FileChannel c = FileChannel.open(path, StandardOpenOption.READ, StandardOpenOption.DSYNC); final SilentlyFailingFileLock lock = new SilentlyFailingFileLock(c, true)) {
 			final ByteBuffer buffer = ByteBuffer.allocate((int) c.size());
 			c.read(buffer);
 			return buffer.array();

File: main/crypto-aes/src/main/java/org/cryptomator/crypto/aes256/AesCryptographicConfiguration.java
Patch:
@@ -84,7 +84,7 @@ interface AesCryptographicConfiguration {
 	/**
 	 * Number of bytes, a content block over which a MAC is calculated consists of.
 	 */
-	int CONTENT_MAC_BLOCK = 5 * 1024 * 1024;
+	int CONTENT_MAC_BLOCK = 128 * 1024;
 
 	/**
 	 * How to encode the encrypted file names safely. Base32 uses only alphanumeric characters and is case-insensitive.

File: main/crypto-aes/src/test/java/org/cryptomator/crypto/aes256/Aes256CryptorTest.java
Patch:
@@ -139,10 +139,10 @@ public void testEncryptionAndDecryption() throws IOException, DecryptFailedExcep
 
 	@Test
 	public void testPartialDecryption() throws IOException, DecryptFailedException, WrongPasswordException, UnsupportedKeyLengthException, EncryptFailedException {
-		// our test plaintext data:
-		final byte[] plaintextData = new byte[524288 * Integer.BYTES];
+		// 8MiB test plaintext data:
+		final byte[] plaintextData = new byte[2097152 * Integer.BYTES];
 		final ByteBuffer bbIn = ByteBuffer.wrap(plaintextData);
-		for (int i = 0; i < 524288; i++) {
+		for (int i = 0; i < 2097152; i++) {
 			bbIn.putInt(i);
 		}
 		final InputStream plaintextIn = new ByteArrayInputStream(plaintextData);

File: main/crypto-aes/src/test/java/org/cryptomator/crypto/aes256/Aes256CryptorTest.java
Patch:
@@ -80,7 +80,7 @@ public void testIntegrityViolationDuringDecryption() throws IOException, Decrypt
 		final Aes256Cryptor cryptor = new Aes256Cryptor();
 
 		// encrypt:
-		final ByteBuffer encryptedData = ByteBuffer.allocate(256);
+		final ByteBuffer encryptedData = ByteBuffer.allocate(96 + plaintextData.length + 4096);
 		final SeekableByteChannel encryptedOut = new ByteBufferBackedSeekableChannel(encryptedData);
 		cryptor.encryptFile(plaintextIn, encryptedOut);
 		IOUtils.closeQuietly(plaintextIn);
@@ -112,7 +112,7 @@ public void testEncryptionAndDecryption() throws IOException, DecryptFailedExcep
 		final Aes256Cryptor cryptor = new Aes256Cryptor();
 
 		// encrypt:
-		final ByteBuffer encryptedData = ByteBuffer.allocate(256);
+		final ByteBuffer encryptedData = ByteBuffer.allocate(96 + plaintextData.length + 4096);
 		final SeekableByteChannel encryptedOut = new ByteBufferBackedSeekableChannel(encryptedData);
 		cryptor.encryptFile(plaintextIn, encryptedOut);
 		IOUtils.closeQuietly(plaintextIn);

File: main/core/src/main/java/org/cryptomator/webdav/jackrabbit/EncryptedFile.java
Patch:
@@ -107,7 +107,9 @@ public void spool(OutputContext outputContext) throws IOException {
 			} catch (EOFException e) {
 				LOG.warn("Unexpected end of stream (possibly client hung up).");
 			} catch (MacAuthenticationFailedException e) {
-				cryptoWarningHandler.macAuthFailed(getLocator().getResourcePath());
+				LOG.warn("File integrity violation for " + getLocator().getResourcePath());
+				throw new IOException("Error decrypting file " + filePath.toString(), e);
+				// cryptoWarningHandler.macAuthFailed(getLocator().getResourcePath());
 			} catch (DecryptFailedException e) {
 				throw new IOException("Error decrypting file " + filePath.toString(), e);
 			}

File: main/crypto-aes/src/main/java/org/cryptomator/crypto/aes256/AesCryptographicConfiguration.java
Patch:
@@ -74,7 +74,7 @@ interface AesCryptographicConfiguration {
 	 * 
 	 * @see http://docs.oracle.com/javase/7/docs/technotes/guides/security/StandardNames.html#impl
 	 */
-	String AES_CBC_CIPHER = "AES/CBC/PKCS5Padding";
+	String AES_CBC_CIPHER = "AES/CBC/NoPadding";
 
 	/**
 	 * AES block size is 128 bit or 16 bytes.

File: main/crypto-aes/src/main/java/org/cryptomator/crypto/aes256/MacInputStream.java
Patch:
@@ -9,6 +9,7 @@
 /**
  * Updates a {@link Mac} with the bytes read from this stream.
  */
+@Deprecated
 class MacInputStream extends FilterInputStream {
 
 	private final Mac mac;

File: main/core/src/main/java/org/cryptomator/webdav/jackrabbit/AbstractEncryptedNode.java
Patch:
@@ -111,8 +111,6 @@ public long getModificationTime() {
 		}
 	}
 
-	protected abstract void determineProperties();
-
 	@Override
 	public DavPropertyName[] getPropertyNames() {
 		return getProperties().getPropertyNames();
@@ -182,7 +180,7 @@ public DavResource getCollection() {
 			return null;
 		}
 
-		final String parentResource = FilenameUtils.getPath(locator.getResourcePath());
+		final String parentResource = FilenameUtils.getPathNoEndSeparator(locator.getResourcePath());
 		final DavResourceLocator parentLocator = locator.getFactory().createResourceLocator(locator.getPrefix(), locator.getWorkspacePath(), parentResource);
 		try {
 			return getFactory().createResource(parentLocator, session);

File: main/core/src/main/java/org/cryptomator/webdav/jackrabbit/EncryptedFile.java
Patch:
@@ -100,7 +100,7 @@ public void spool(OutputContext outputContext) throws IOException {
 		}
 	}
 
-	@Override
+	@Deprecated
 	protected void determineProperties() {
 		if (Files.isRegularFile(filePath)) {
 			try (final SeekableByteChannel channel = Files.newByteChannel(filePath, StandardOpenOption.READ)) {

File: main/core/src/main/java/org/cryptomator/webdav/jackrabbit/LongFilenameMetadata.java
Patch:
@@ -6,7 +6,7 @@
  * Contributors:
  *     Sebastian Stenzel - initial API and implementation
  ******************************************************************************/
-package org.cryptomator.crypto.aes256;
+package org.cryptomator.webdav.jackrabbit;
 
 import java.io.Serializable;
 import java.util.UUID;

File: main/crypto-aes/src/main/java/org/cryptomator/crypto/aes256/Aes256Cryptor.java
Patch:
@@ -621,7 +621,7 @@ public Filter<Path> getPayloadFilesFilter() {
 		return new Filter<Path>() {
 			@Override
 			public boolean accept(Path entry) throws IOException {
-				return ENCRYPTED_FILE_GLOB_MATCHER.matches(entry);
+				return ENCRYPTED_FILE_MATCHER.matches(entry);
 			}
 		};
 	}

File: main/crypto-aes/src/main/java/org/cryptomator/crypto/aes256/FileNamingConventions.java
Patch:
@@ -22,7 +22,7 @@ interface FileNamingConventions {
 	BaseNCodec ENCRYPTED_FILENAME_CODEC = new Base32();
 
 	/**
-	 * Maximum length possible on file systems with a filename limit of 255 chars.<br/>
+	 * Maximum length possible on file systems with a filename or even path length limit of 255 chars.<br/>
 	 * Also we would need a few chars for our file extension, so lets use {@value #ENCRYPTED_FILENAME_LENGTH_LIMIT}.
 	 */
 	int ENCRYPTED_FILENAME_LENGTH_LIMIT = 128;

File: main/crypto-aes/src/test/java/org/cryptomator/crypto/aes256/Aes256CryptorTest.java
Patch:
@@ -25,14 +25,15 @@
 import org.cryptomator.crypto.exceptions.DecryptFailedException;
 import org.cryptomator.crypto.exceptions.EncryptFailedException;
 import org.cryptomator.crypto.exceptions.UnsupportedKeyLengthException;
+import org.cryptomator.crypto.exceptions.UnsupportedVaultException;
 import org.cryptomator.crypto.exceptions.WrongPasswordException;
 import org.junit.Assert;
 import org.junit.Test;
 
 public class Aes256CryptorTest {
 
 	@Test
-	public void testCorrectPassword() throws IOException, WrongPasswordException, DecryptFailedException, UnsupportedKeyLengthException, DestroyFailedException {
+	public void testCorrectPassword() throws IOException, WrongPasswordException, DecryptFailedException, UnsupportedKeyLengthException, DestroyFailedException, UnsupportedVaultException {
 		final String pw = "asd";
 		final Aes256Cryptor cryptor = new Aes256Cryptor();
 		final ByteArrayOutputStream out = new ByteArrayOutputStream();
@@ -48,7 +49,7 @@ public void testCorrectPassword() throws IOException, WrongPasswordException, De
 	}
 
 	@Test
-	public void testWrongPassword() throws IOException, DecryptFailedException, WrongPasswordException, UnsupportedKeyLengthException, DestroyFailedException {
+	public void testWrongPassword() throws IOException, DecryptFailedException, WrongPasswordException, UnsupportedKeyLengthException, DestroyFailedException, UnsupportedVaultException {
 		final String pw = "asd";
 		final Aes256Cryptor cryptor = new Aes256Cryptor();
 		final ByteArrayOutputStream out = new ByteArrayOutputStream();

File: main/crypto-api/src/main/java/org/cryptomator/crypto/AbstractCryptorDecorator.java
Patch:
@@ -13,6 +13,7 @@
 import org.cryptomator.crypto.exceptions.EncryptFailedException;
 import org.cryptomator.crypto.exceptions.MacAuthenticationFailedException;
 import org.cryptomator.crypto.exceptions.UnsupportedKeyLengthException;
+import org.cryptomator.crypto.exceptions.UnsupportedVaultException;
 import org.cryptomator.crypto.exceptions.WrongPasswordException;
 
 public class AbstractCryptorDecorator implements Cryptor {
@@ -29,7 +30,7 @@ public void encryptMasterKey(OutputStream out, CharSequence password) throws IOE
 	}
 
 	@Override
-	public void decryptMasterKey(InputStream in, CharSequence password) throws DecryptFailedException, WrongPasswordException, UnsupportedKeyLengthException, IOException {
+	public void decryptMasterKey(InputStream in, CharSequence password) throws DecryptFailedException, WrongPasswordException, UnsupportedKeyLengthException, IOException, UnsupportedVaultException {
 		cryptor.decryptMasterKey(in, password);
 	}
 

File: main/crypto-api/src/main/java/org/cryptomator/crypto/Cryptor.java
Patch:
@@ -21,6 +21,7 @@
 import org.cryptomator.crypto.exceptions.EncryptFailedException;
 import org.cryptomator.crypto.exceptions.MacAuthenticationFailedException;
 import org.cryptomator.crypto.exceptions.UnsupportedKeyLengthException;
+import org.cryptomator.crypto.exceptions.UnsupportedVaultException;
 import org.cryptomator.crypto.exceptions.WrongPasswordException;
 
 /**
@@ -39,8 +40,9 @@ public interface Cryptor extends Destroyable {
 	 * @throws DecryptFailedException If the decryption failed for various reasons (including wrong password).
 	 * @throws WrongPasswordException If the provided password was wrong. Note: Sometimes the algorithm itself fails due to a wrong password. In this case a DecryptFailedException will be thrown.
 	 * @throws UnsupportedKeyLengthException If the masterkey has been encrypted with a higher key length than supported by the system. In this case Java JCE needs to be installed.
+	 * @throws UnsupportedVaultException If the masterkey file is too old or too modern.
 	 */
-	void decryptMasterKey(InputStream in, CharSequence password) throws DecryptFailedException, WrongPasswordException, UnsupportedKeyLengthException, IOException;
+	void decryptMasterKey(InputStream in, CharSequence password) throws DecryptFailedException, WrongPasswordException, UnsupportedKeyLengthException, IOException, UnsupportedVaultException;
 
 	/**
 	 * Encrypts a given plaintext path representing a directory structure. See {@link #encryptFilename(String, CryptorMetadataSupport)} for contents inside directories.

File: main/crypto-aes/src/main/java/org/cryptomator/crypto/aes256/Aes256Cryptor.java
Patch:
@@ -559,7 +559,7 @@ public Long encryptFile(InputStream plaintextFile, SeekableByteChannel encrypted
 		// append a few blocks of fake data:
 		final int numberOfPlaintextBlocks = (int) Math.ceil(plaintextSize / AES_BLOCK_LENGTH);
 		final int upToTenPercentFakeBlocks = (int) Math.ceil(Math.random() * 0.1 * numberOfPlaintextBlocks);
-		final byte[] emptyBytes = new byte[AES_BLOCK_LENGTH];
+		final byte[] emptyBytes = this.randomData(AES_BLOCK_LENGTH);
 		for (int i = 0; i < upToTenPercentFakeBlocks; i += AES_BLOCK_LENGTH) {
 			blockSizeBufferedOut.write(emptyBytes);
 		}

File: main/ui/src/main/java/org/cryptomator/ui/controllers/MainController.java
Patch:
@@ -51,6 +51,7 @@
 import org.cryptomator.ui.model.Vault;
 import org.cryptomator.ui.model.VaultFactory;
 import org.cryptomator.ui.settings.Settings;
+import org.cryptomator.ui.util.ActiveWindowStyleSupport;
 import org.cryptomator.ui.util.ObservableSetAggregator;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -336,6 +337,7 @@ private void showMacWarningsWindow() {
 				stage.sizeToScene();
 				stage.setResizable(false);
 				stage.setOnHidden(this::onHideMacWarningsWindow);
+				ActiveWindowStyleSupport.startObservingFocus(stage);
 
 				final MacWarningsController ctrl = loader.getController();
 				ctrl.setMacWarnings(this.aggregatedMacWarnings);

File: main/ui/src/main/java/org/cryptomator/ui/controllers/WelcomeController.java
Patch:
@@ -31,6 +31,7 @@
 import org.apache.commons.httpclient.HttpClient;
 import org.apache.commons.httpclient.HttpMethod;
 import org.apache.commons.httpclient.HttpStatus;
+import org.apache.commons.httpclient.cookie.CookiePolicy;
 import org.apache.commons.httpclient.methods.GetMethod;
 import org.apache.commons.lang3.SystemUtils;
 
@@ -67,6 +68,7 @@ public void initialize(URL url, ResourceBundle rb) {
 	private void checkForUpdates() {
 		final HttpClient client = new HttpClient();
 		final HttpMethod method = new GetMethod("https://cryptomator.org/downloads/latestVersion.json");
+		client.getParams().setCookiePolicy(CookiePolicy.IGNORE_COOKIES);
 		client.getParams().setConnectionManagerTimeout(5000);
 		try {
 			client.executeMethod(method);

File: main/ui/src/main/java/org/cryptomator/ui/util/mount/MacOsXWebDavMounter.java
Patch:
@@ -38,7 +38,7 @@ public WebDavMount mount(URI uri, String name) throws CommandFailedException {
 				.addEnv("MOUNT_PATH", path)
 				.addEnv("MOUNT_NAME", name);
 		final Script unmountScript = Script.fromLines(
-				"umount $MOUNT_PATH")
+				"diskutil umount $MOUNT_PATH")
 				.addEnv("MOUNT_PATH", path);
 		mountScript.execute();
 		return new AbstractWebDavMount() {

File: main/ui/src/main/java/org/cryptomator/ui/controllers/UnlockController.java
Patch:
@@ -164,6 +164,8 @@ private void mountNameDidChange(ObservableValue<? extends String> property, Stri
 		// newValue is guaranteed to be a-z0-9, see #filterAlphanumericKeyEvents
 		if (newValue.isEmpty()) {
 			mountName.setText(vault.getMountName());
+		} else {
+			vault.setMountName(newValue);
 		}
 	}
 

File: main/ui/src/main/java/org/cryptomator/ui/controllers/MainController.java
Patch:
@@ -197,7 +197,7 @@ public void addVault(final Path path, boolean select) {
 
 	private ListCell<Vault> createDirecoryListCell(ListView<Vault> param) {
 		final DirectoryListCell cell = new DirectoryListCell();
-		cell.setContextMenu(vaultListCellContextMenu);
+		cell.setVaultContextMenu(vaultListCellContextMenu);
 		return cell;
 	}
 

File: main/core/src/main/java/org/cryptomator/webdav/jackrabbit/EncryptedFile.java
Patch:
@@ -40,7 +40,7 @@ class EncryptedFile extends AbstractEncryptedNode {
 
 	private static final Logger LOG = LoggerFactory.getLogger(EncryptedFile.class);
 
-	private final CryptoWarningHandler cryptoWarningHandler;
+	protected final CryptoWarningHandler cryptoWarningHandler;
 
 	public EncryptedFile(DavResourceFactory factory, DavResourceLocator locator, DavSession session, LockManager lockManager, Cryptor cryptor, CryptoWarningHandler cryptoWarningHandler) {
 		super(factory, locator, session, lockManager, cryptor);
@@ -70,7 +70,7 @@ public void removeMember(DavResource member) throws DavException {
 	@Override
 	public void spool(OutputContext outputContext) throws IOException {
 		final Path path = ResourcePathUtils.getPhysicalPath(this);
-		if (Files.exists(path)) {
+		if (Files.isRegularFile(path)) {
 			outputContext.setModificationTime(Files.getLastModifiedTime(path).toMillis());
 			outputContext.setProperty(HttpHeader.ACCEPT_RANGES.asString(), HttpHeaderValue.BYTES.asString());
 			try (final SeekableByteChannel channel = Files.newByteChannel(path, StandardOpenOption.READ)) {

File: main/crypto-aes/src/test/java/org/cryptomator/crypto/aes256/Aes256CryptorTest.java
Patch:
@@ -98,7 +98,7 @@ public void testIntegrityAuthentication() throws IOException, DecryptFailedExcep
 		// decrypt modified content (should fail with DecryptFailedException):
 		final SeekableByteChannel encryptedIn = new ByteBufferBackedSeekableChannel(encryptedData);
 		final ByteArrayOutputStream plaintextOut = new ByteArrayOutputStream();
-		cryptor.decryptedFile(encryptedIn, plaintextOut);
+		cryptor.decryptFile(encryptedIn, plaintextOut);
 	}
 
 	@Test
@@ -126,7 +126,7 @@ public void testEncryptionAndDecryption() throws IOException, DecryptFailedExcep
 
 		// decrypt:
 		final ByteArrayOutputStream plaintextOut = new ByteArrayOutputStream();
-		final Long numDecryptedBytes = cryptor.decryptedFile(encryptedIn, plaintextOut);
+		final Long numDecryptedBytes = cryptor.decryptFile(encryptedIn, plaintextOut);
 		IOUtils.closeQuietly(encryptedIn);
 		IOUtils.closeQuietly(plaintextOut);
 		Assert.assertEquals(filesize.longValue(), numDecryptedBytes.longValue());

File: main/crypto-api/src/main/java/org/cryptomator/crypto/Cryptor.java
Patch:
@@ -79,7 +79,7 @@ public interface Cryptor extends SensitiveDataSwipeListener {
 	 * @return Number of decrypted bytes. This might not be equal to the encrypted file size due to optional metadata written to it.
 	 * @throws DecryptFailedException If decryption failed
 	 */
-	Long decryptedFile(SeekableByteChannel encryptedFile, OutputStream plaintextFile) throws IOException, DecryptFailedException;
+	Long decryptFile(SeekableByteChannel encryptedFile, OutputStream plaintextFile) throws IOException, DecryptFailedException;
 
 	/**
 	 * @param pos First byte (inclusive)

File: main/crypto-api/src/main/java/org/cryptomator/crypto/SamplingDecorator.java
Patch:
@@ -82,9 +82,9 @@ public Long decryptedContentLength(SeekableByteChannel encryptedFile) throws IOE
 	}
 
 	@Override
-	public Long decryptedFile(SeekableByteChannel encryptedFile, OutputStream plaintextFile) throws IOException, DecryptFailedException {
+	public Long decryptFile(SeekableByteChannel encryptedFile, OutputStream plaintextFile) throws IOException, DecryptFailedException {
 		final OutputStream countingInputStream = new CountingOutputStream(decryptedBytes, plaintextFile);
-		return cryptor.decryptedFile(encryptedFile, countingInputStream);
+		return cryptor.decryptFile(encryptedFile, countingInputStream);
 	}
 
 	@Override

File: main/crypto-aes/src/main/java/org/cryptomator/crypto/aes256/AesCryptographicConfiguration.java
Patch:
@@ -33,7 +33,7 @@ interface AesCryptographicConfiguration {
 	/**
 	 * Number of bytes used as seed for the PRNG.
 	 */
-	int PRNG_SEED_LENGTH = 16;
+	int PRNG_SEED_LENGTH = 32;
 
 	/**
 	 * Algorithm used for random number generation.

File: main/core/src/main/java/org/cryptomator/webdav/WebDavServer.java
Patch:
@@ -16,6 +16,7 @@
 import java.util.concurrent.LinkedBlockingQueue;
 
 import org.apache.commons.lang3.StringUtils;
+import org.apache.commons.lang3.SystemUtils;
 import org.cryptomator.crypto.Cryptor;
 import org.cryptomator.webdav.jackrabbit.WebDavServlet;
 import org.eclipse.jetty.server.Connector;
@@ -33,7 +34,7 @@
 public final class WebDavServer {
 
 	private static final Logger LOG = LoggerFactory.getLogger(WebDavServer.class);
-	private static final String LOCALHOST = "::1";
+	private static final String LOCALHOST = SystemUtils.IS_OS_WINDOWS ? "::1" : "localhost";
 	private static final int MAX_PENDING_REQUESTS = 200;
 	private static final int MAX_THREADS = 200;
 	private static final int MIN_THREADS = 4;

File: main/core/src/main/java/org/cryptomator/webdav/jackrabbit/DavLocatorFactoryImpl.java
Patch:
@@ -15,6 +15,7 @@
 import java.nio.file.StandardOpenOption;
 
 import org.apache.commons.collections4.BidiMap;
+import org.apache.commons.io.FilenameUtils;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.commons.lang3.builder.EqualsBuilder;
 import org.apache.commons.lang3.builder.HashCodeBuilder;
@@ -154,7 +155,7 @@ private class DavResourceLocatorImpl implements DavResourceLocator {
 
 		private DavResourceLocatorImpl(String prefix, String resourcePath) {
 			this.prefix = prefix;
-			this.resourcePath = resourcePath;
+			this.resourcePath = FilenameUtils.normalizeNoEndSeparator(resourcePath, true);
 		}
 
 		@Override

File: main/ui/src/main/java/org/cryptomator/ui/util/mount/MacOsXWebDavMounter.java
Patch:
@@ -31,9 +31,9 @@ public WebDavMount mount(URI uri, String name) throws CommandFailedException {
 		final String path = "/Volumes/Cryptomator" + uri.getRawPath().replace('/', '_');
 		final Script mountScript = Script.fromLines(
 				"mkdir \"$MOUNT_PATH\"",
-				"mount_webdav -S -v $MOUNT_NAME \"[::1]:$PORT$DAV_PATH\" \"$MOUNT_PATH\"",
+				"mount_webdav -S -v $MOUNT_NAME \"$DAV_AUTHORITY$DAV_PATH\" \"$MOUNT_PATH\"",
 				"open \"$MOUNT_PATH\"")
-				.addEnv("PORT", String.valueOf(uri.getPort()))
+				.addEnv("DAV_AUTHORITY", uri.getRawAuthority())
 				.addEnv("DAV_PATH", uri.getRawPath())
 				.addEnv("MOUNT_PATH", path)
 				.addEnv("MOUNT_NAME", name);

File: main/ui/src/main/java/org/cryptomator/ui/settings/SettingsProvider.java
Patch:
@@ -59,6 +59,7 @@ public Settings get() {
 			final Path settingsFile = SETTINGS_DIR.resolve(SETTINGS_FILE);
 			final InputStream in = Files.newInputStream(settingsFile, StandardOpenOption.READ);
 			settings = objectMapper.readValue(in, Settings.class);
+			settings.getDirectories().removeIf(v -> !v.isValidVaultDirectory());
 		} catch (IOException e) {
 			LOG.warn("Failed to load settings, creating new one.");
 			settings = new Settings();

File: main/ui/src/main/java/org/cryptomator/ui/MainApplication.java
Patch:
@@ -24,6 +24,7 @@
 
 import org.apache.commons.lang3.SystemUtils;
 import org.cryptomator.ui.MainModule.ControllerFactory;
+import org.cryptomator.ui.controllers.MainController;
 import org.cryptomator.ui.model.Vault;
 import org.cryptomator.ui.util.ActiveWindowStyleSupport;
 import org.cryptomator.ui.util.DeferredCloser;

File: main/ui/src/main/java/org/cryptomator/ui/controllers/UnlockedController.java
Patch:
@@ -6,7 +6,7 @@
  * Contributors:
  *     Sebastian Stenzel - initial API and implementation
  ******************************************************************************/
-package org.cryptomator.ui;
+package org.cryptomator.ui.controllers;
 
 import java.net.URL;
 import java.util.ResourceBundle;

File: main/ui/src/main/java/org/cryptomator/ui/util/DeferredCloser.java
Patch:
@@ -15,7 +15,7 @@
 import java.util.concurrent.atomic.AtomicLong;
 import java.util.concurrent.atomic.AtomicReference;
 
-import org.cryptomator.ui.MainController;
+import org.cryptomator.ui.controllers.MainController;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: main/ui/src/main/java/org/cryptomator/ui/MainApplication.java
Patch:
@@ -18,7 +18,6 @@
 import javafx.application.Application;
 import javafx.application.Platform;
 import javafx.fxml.FXMLLoader;
-import javafx.fxml.JavaFXBuilderFactory;
 import javafx.scene.Parent;
 import javafx.scene.Scene;
 import javafx.stage.Stage;
@@ -74,6 +73,7 @@ public MainApplication(ExecutorService executorService, ControllerFactory contro
 	@Override
 	public void start(final Stage primaryStage) throws IOException {
 		ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();
+		FXMLLoader.setDefaultClassLoader(contextClassLoader);
 		Platform.runLater(() -> {
 			/*
 			 * This fixes a bug on OSX where the magic file open handler leads to no context class loader being set in the AppKit (event)
@@ -88,7 +88,7 @@ public void start(final Stage primaryStage) throws IOException {
 
 		chooseNativeStylesheet();
 		final ResourceBundle rb = ResourceBundle.getBundle("localization");
-		final FXMLLoader loader = new FXMLLoader(getClass().getResource("/fxml/main.fxml"), rb, new JavaFXBuilderFactory(MainApplication.class.getClassLoader()));
+		final FXMLLoader loader = new FXMLLoader(getClass().getResource("/fxml/main.fxml"), rb);
 		loader.setControllerFactory(controllerFactory);
 		final Parent root = loader.load();
 		final MainController ctrl = loader.getController();

File: main/core/src/main/java/org/cryptomator/webdav/jackrabbit/DavLocatorFactoryImpl.java
Patch:
@@ -189,7 +189,8 @@ public boolean isSameWorkspace(String workspaceName) {
 
 		@Override
 		public String getHref(boolean isCollection) {
-			final String href = getPrefix().concat(getResourcePath());
+			final String encodedResourcePath = EncodeUtil.escapePath(getResourcePath());
+			final String href = getPrefix().concat(encodedResourcePath);
 			if (isCollection && !href.endsWith("/")) {
 				return href.concat("/");
 			} else if (!isCollection && href.endsWith("/")) {

File: main/crypto-aes/src/main/java/org/cryptomator/crypto/aes256/AesSivCipherUtil.java
Patch:
@@ -192,7 +192,7 @@ private static byte[] xorend(byte[] in1, byte[] in2) {
 
 		final byte[] result = new byte[in2.length];
 		final int diff = in1.length - in2.length;
-		for (int i = in2.length - 1; i >= diff; i--) {
+		for (int i = 0; i < in2.length; i++) {
 			result[i] = (byte) (in1[i + diff] ^ in2[i]);
 		}
 		return result;

File: main/ui/src/main/java/org/cryptomator/ui/model/Vault.java
Patch:
@@ -15,9 +15,9 @@
 import org.cryptomator.crypto.Cryptor;
 import org.cryptomator.crypto.SamplingDecorator;
 import org.cryptomator.crypto.aes256.Aes256Cryptor;
-import org.cryptomator.ui.util.MasterKeyFilter;
 import org.cryptomator.ui.util.DeferredClosable;
 import org.cryptomator.ui.util.DeferredCloser;
+import org.cryptomator.ui.util.MasterKeyFilter;
 import org.cryptomator.ui.util.mount.CommandFailedException;
 import org.cryptomator.ui.util.mount.WebDavMount;
 import org.cryptomator.ui.util.mount.WebDavMounter;

File: main/ui/src/main/java/org/cryptomator/ui/model/VaultDeserializer.java
Patch:
@@ -10,14 +10,14 @@
 import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.fasterxml.jackson.databind.JsonNode;
 
-public class DirectoryDeserializer extends JsonDeserializer<Directory> {
+public class VaultDeserializer extends JsonDeserializer<Vault> {
 
 	@Override
-	public Directory deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {
+	public Vault deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {
 		final JsonNode node = jp.readValueAsTree();
 		final String pathStr = node.get("path").asText();
 		final Path path = FileSystems.getDefault().getPath(pathStr);
-		final Directory dir = new Directory(path);
+		final Vault dir = new Vault(path);
 		final boolean verifyFileIntegrity = node.has("checkIntegrity") ? node.get("checkIntegrity").asBoolean() : false;
 		dir.setVerifyFileIntegrity(verifyFileIntegrity);
 		if (node.has("mountName")) {

File: main/ui/src/main/java/org/cryptomator/ui/model/VaultSerializer.java
Patch:
@@ -7,10 +7,10 @@
 import com.fasterxml.jackson.databind.JsonSerializer;
 import com.fasterxml.jackson.databind.SerializerProvider;
 
-public class DirectorySerializer extends JsonSerializer<Directory> {
+public class VaultSerializer extends JsonSerializer<Vault> {
 
 	@Override
-	public void serialize(Directory value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException {
+	public void serialize(Vault value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException {
 		jgen.writeStartObject();
 		jgen.writeStringField("path", value.getPath().toString());
 		jgen.writeBooleanField("checkIntegrity", value.shouldVerifyFileIntegrity());

File: main/ui/src/main/java/org/cryptomator/ui/model/Directory.java
Patch:
@@ -86,7 +86,7 @@ public boolean mount() {
 			return false;
 		}
 		try {
-			webDavMount = WebDavMounter.mount(webDavServlet.getServletUri());
+			webDavMount = WebDavMounter.mount(webDavServlet.getServletUri(), getMountName());
 			return true;
 		} catch (CommandFailedException e) {
 			LOG.warn("mount failed", e);

File: main/ui/src/main/java/org/cryptomator/ui/util/mount/FallbackWebDavMounter.java
Patch:
@@ -23,7 +23,7 @@ public boolean shouldWork() {
 	}
 
 	@Override
-	public WebDavMount mount(URI uri) {
+	public WebDavMount mount(URI uri, String name) {
 		displayMountInstructions();
 		return new WebDavMount() {
 			@Override

File: main/ui/src/main/java/org/cryptomator/ui/util/mount/LinuxGvfsWebDavMounter.java
Patch:
@@ -32,7 +32,7 @@ public boolean shouldWork() {
 	}
 
 	@Override
-	public WebDavMount mount(URI uri) throws CommandFailedException {
+	public WebDavMount mount(URI uri, String name) throws CommandFailedException {
 		final Script mountScript = Script.fromLines(
 				"set -x",
 				"gvfs-mount \"dav:$DAV_SSP\"",

File: main/ui/src/main/java/org/cryptomator/ui/util/mount/WebDavMounter.java
Patch:
@@ -26,11 +26,12 @@ public final class WebDavMounter {
 	 * Tries to mount a given webdav share.
 	 * 
 	 * @param uri URI of the webdav share
+	 * @param name the name under which the folder is to be mounted. This might be ignored.
 	 * @return a {@link WebDavMount} representing the mounted share
 	 * @throws CommandFailedException if the mount operation fails
 	 */
-	public static WebDavMount mount(URI uri) throws CommandFailedException {
-		return chooseStrategy().mount(uri);
+	public static WebDavMount mount(URI uri, String name) throws CommandFailedException {
+		return chooseStrategy().mount(uri, name);
 	}
 
 	private static WebDavMounterStrategy chooseStrategy() {

File: main/ui/src/main/java/org/cryptomator/ui/util/mount/WebDavMounterStrategy.java
Patch:
@@ -27,9 +27,10 @@ interface WebDavMounterStrategy {
 	 * Tries to mount a given webdav share.
 	 * 
 	 * @param uri URI of the webdav share
+	 * @param name the name under which the folder is to be mounted. This might be ignored.
 	 * @return a {@link WebDavMount} representing the mounted share
 	 * @throws CommandFailedException if the mount operation fails
 	 */
-	WebDavMount mount(URI uri) throws CommandFailedException;
+	WebDavMount mount(URI uri, String name) throws CommandFailedException;
 
 }

File: main/ui/src/main/java/org/cryptomator/ui/util/mount/WindowsWebDavMounter.java
Patch:
@@ -37,7 +37,7 @@ public boolean shouldWork() {
 	}
 
 	@Override
-	public WebDavMount mount(URI uri) throws CommandFailedException {
+	public WebDavMount mount(URI uri, String name) throws CommandFailedException {
 		final Script mountScript = fromLines("net use * http://0--1.ipv6-literal.net:%PORT%%DAV_PATH% /persistent:no")
 				.addEnv("PORT", String.valueOf(uri.getPort()))
 				.addEnv("DAV_PATH", uri.getRawPath());

File: main/ui/src/main/java/org/cryptomator/ui/model/DirectoryDeserializer.java
Patch:
@@ -20,6 +20,9 @@ public Directory deserialize(JsonParser jp, DeserializationContext ctxt) throws
 		final Directory dir = new Directory(path);
 		final boolean verifyFileIntegrity = node.has("checkIntegrity") ? node.get("checkIntegrity").asBoolean() : false;
 		dir.setVerifyFileIntegrity(verifyFileIntegrity);
+		if (node.has("mountName")) {
+			dir.setMountName(node.get("mountName").asText());
+		}
 		return dir;
 	}
 

File: main/ui/src/main/java/org/cryptomator/ui/model/DirectorySerializer.java
Patch:
@@ -14,6 +14,7 @@ public void serialize(Directory value, JsonGenerator jgen, SerializerProvider pr
 		jgen.writeStartObject();
 		jgen.writeStringField("path", value.getPath().toString());
 		jgen.writeBooleanField("checkIntegrity", value.shouldVerifyFileIntegrity());
+		jgen.writeStringField("mountName", value.getMountName().toString());
 		jgen.writeEndObject();
 	}
 

File: main/core/src/main/java/org/cryptomator/webdav/jackrabbit/WebDavServlet.java
Patch:
@@ -23,7 +23,6 @@ public class WebDavServlet extends AbstractWebdavServlet {
 
 	private static final long serialVersionUID = 7965170007048673022L;
 	public static final String CFG_FS_ROOT = "cfg.fs.root";
-	public static final String CFG_HTTP_ROOT = "cfg.http.root";
 	public static final String CFG_CHECK_FILE_INTEGRITY = "cfg.checkFileIntegrity";
 	private DavSessionProvider davSessionProvider;
 	private DavLocatorFactory davLocatorFactory;
@@ -42,9 +41,8 @@ public void init(ServletConfig config) throws ServletException {
 		davSessionProvider = new DavSessionProviderImpl();
 
 		final String fsRoot = config.getInitParameter(CFG_FS_ROOT);
-		final String httpRoot = config.getInitParameter(CFG_HTTP_ROOT);
 		final boolean checkFileIntegrity = Boolean.parseBoolean(config.getInitParameter(CFG_CHECK_FILE_INTEGRITY));
-		this.davLocatorFactory = new DavLocatorFactoryImpl(fsRoot, httpRoot, cryptor);
+		this.davLocatorFactory = new DavLocatorFactoryImpl(fsRoot, cryptor);
 
 		this.davResourceFactory = new DavResourceFactoryImpl(cryptor, checkFileIntegrity);
 	}

File: main/crypto-aes/src/main/java/org/cryptomator/crypto/aes256/Aes256Cryptor.java
Patch:
@@ -13,6 +13,7 @@
 import java.io.OutputStream;
 import java.nio.ByteBuffer;
 import java.nio.channels.SeekableByteChannel;
+import java.nio.charset.StandardCharsets;
 import java.nio.file.DirectoryStream.Filter;
 import java.nio.file.Path;
 import java.security.InvalidAlgorithmParameterException;
@@ -40,7 +41,6 @@
 import javax.security.auth.DestroyFailedException;
 import javax.security.auth.Destroyable;
 
-import org.apache.commons.io.Charsets;
 import org.apache.commons.io.IOUtils;
 import org.apache.commons.io.output.NullOutputStream;
 import org.apache.commons.lang3.ArrayUtils;
@@ -330,7 +330,7 @@ private String encryptPathComponent(final String cleartext, final SecretKey key,
 		final ByteBuffer iv = ByteBuffer.allocate(AES_BLOCK_LENGTH);
 		iv.put(partialIv);
 		final Cipher cipher = this.aesCtrCipher(key, iv.array(), Cipher.ENCRYPT_MODE);
-		final byte[] cleartextBytes = cleartext.getBytes(Charsets.UTF_8);
+		final byte[] cleartextBytes = cleartext.getBytes(StandardCharsets.UTF_8);
 		final byte[] encryptedBytes = cipher.doFinal(cleartextBytes);
 		final String ivAndCiphertext = ENCRYPTED_FILENAME_CODEC.encodeAsString(partialIv) + IV_PREFIX_SEPARATOR + ENCRYPTED_FILENAME_CODEC.encodeAsString(encryptedBytes);
 
@@ -387,7 +387,7 @@ private String decryptPathComponent(final String encrypted, final SecretKey key,
 		final Cipher cipher = this.aesCtrCipher(key, iv.array(), Cipher.DECRYPT_MODE);
 		final byte[] encryptedBytes = ENCRYPTED_FILENAME_CODEC.decode(ciphertext);
 		final byte[] cleartextBytes = cipher.doFinal(encryptedBytes);
-		return new String(cleartextBytes, Charsets.UTF_8);
+		return new String(cleartextBytes, StandardCharsets.UTF_8);
 	}
 
 	private LongFilenameMetadata getMetadata(CryptorIOSupport ioSupport, String metadataFile) throws IOException {

File: main/ui/src/main/java/org/cryptomator/ui/MainApplication.java
Patch:
@@ -23,6 +23,7 @@
 import org.cryptomator.ui.settings.Settings;
 import org.cryptomator.ui.util.ActiveWindowStyleSupport;
 import org.cryptomator.ui.util.TrayIconUtil;
+import org.cryptomator.webdav.WebDavServer;
 import org.eclipse.jetty.util.ConcurrentHashSet;
 
 public class MainApplication extends Application {
@@ -37,6 +38,7 @@ public static void main(String[] args) {
 
 	@Override
 	public void start(final Stage primaryStage) throws IOException {
+		WebDavServer.getInstance().start();
 		chooseNativeStylesheet();
 		final ResourceBundle rb = ResourceBundle.getBundle("localization");
 		final FXMLLoader loader = new FXMLLoader(getClass().getResource("/fxml/main.fxml"), rb);
@@ -67,6 +69,7 @@ private void chooseNativeStylesheet() {
 
 	private void quit() {
 		Platform.runLater(() -> {
+			WebDavServer.getInstance().stop();
 			CLEAN_SHUTDOWN_PERFORMER.run();
 			Settings.save();
 			Platform.exit();

File: main/ui/src/main/java/org/cryptomator/ui/UnlockedController.java
Patch:
@@ -27,6 +27,7 @@
 
 import org.cryptomator.crypto.CryptorIOSampling;
 import org.cryptomator.ui.model.Directory;
+import org.cryptomator.webdav.WebDavServer;
 
 public class UnlockedController implements Initializable {
 
@@ -123,7 +124,7 @@ public Directory getDirectory() {
 
 	public void setDirectory(Directory directory) {
 		this.directory = directory;
-		final String msg = String.format(rb.getString("unlocked.messageLabel.runningOnPort"), directory.getServer().getPort());
+		final String msg = String.format(rb.getString("unlocked.messageLabel.runningOnPort"), WebDavServer.getInstance().getPort());
 		messageLabel.setText(msg);
 
 		if (directory.getCryptor() instanceof CryptorIOSampling) {

File: main/ui/src/main/java/org/cryptomator/ui/util/mount/FallbackWebDavMounter.java
Patch:
@@ -8,6 +8,8 @@
  ******************************************************************************/
 package org.cryptomator.ui.util.mount;
 
+import java.net.URI;
+
 /**
  * A WebDavMounter acting as fallback if no other mounter works.
  *
@@ -21,7 +23,7 @@ public boolean shouldWork() {
 	}
 
 	@Override
-	public WebDavMount mount(int localPort) {
+	public WebDavMount mount(URI uri) {
 		displayMountInstructions();
 		return new WebDavMount() {
 			@Override

File: main/ui/src/main/java/org/cryptomator/ui/util/mount/WebDavMounterStrategy.java
Patch:
@@ -9,6 +9,7 @@
  ******************************************************************************/
 package org.cryptomator.ui.util.mount;
 
+import java.net.URI;
 
 /**
  * A strategy able to mount a webdav share and display it to the user.
@@ -25,10 +26,10 @@ interface WebDavMounterStrategy {
 	/**
 	 * Tries to mount a given webdav share.
 	 * 
-	 * @param localPort local TCP port of the webdav share
+	 * @param uri URI of the webdav share
 	 * @return a {@link WebDavMount} representing the mounted share
 	 * @throws CommandFailedException if the mount operation fails
 	 */
-	WebDavMount mount(int localPort) throws CommandFailedException;
+	WebDavMount mount(URI uri) throws CommandFailedException;
 
 }

File: main/crypto-aes/src/main/java/org/cryptomator/crypto/aes256/Aes256Cryptor.java
Patch:
@@ -17,6 +17,7 @@
 import java.nio.file.Path;
 import java.security.InvalidAlgorithmParameterException;
 import java.security.InvalidKeyException;
+import java.security.MessageDigest;
 import java.security.NoSuchAlgorithmException;
 import java.security.SecureRandom;
 import java.util.ArrayList;
@@ -426,8 +427,8 @@ public boolean authenticateContent(SeekableByteChannel encryptedFile) throws IOE
 		final InputStream macIn = new MacInputStream(in, mac);
 		IOUtils.copyLarge(macIn, new NullOutputStream(), 0, fileSize);
 
-		// compare:
-		return Arrays.equals(macBuffer.array(), mac.doFinal());
+		// compare (in constant time):
+		return MessageDigest.isEqual(macBuffer.array(), mac.doFinal());
 	}
 
 	@Override

File: main/crypto-api/src/main/java/org/cryptomator/crypto/exceptions/UnsupportedKeyLengthException.java
Patch:
@@ -7,7 +7,7 @@ public class UnsupportedKeyLengthException extends StorageCryptingException {
 	private final int supportedLength;
 
 	public UnsupportedKeyLengthException(int length, int maxLength) {
-		super(String.format("Key length (%i) exceeds policy maximum (%i).", length, maxLength));
+		super(String.format("Key length (%d) exceeds policy maximum (%d).", length, maxLength));
 		this.requestedLength = length;
 		this.supportedLength = maxLength;
 	}

File: main/ui/src/main/java/org/cryptomator/ui/UnlockController.java
Patch:
@@ -137,6 +137,7 @@ private void didClickUnlockButton(ActionEvent event) {
 	private void setControlsDisabled(boolean disable) {
 		usernameBox.setDisable(disable);
 		passwordField.setDisable(disable);
+		checkIntegrity.setDisable(disable);
 		unlockButton.setDisable(disable);
 	}
 

File: main/crypto-api/src/main/java/org/cryptomator/crypto/exceptions/DecryptFailedException.java
Patch:
@@ -7,7 +7,7 @@ public DecryptFailedException(Throwable t) {
 		super("Decryption failed.", t);
 	}
 
-	protected DecryptFailedException(String msg) {
+	public DecryptFailedException(String msg) {
 		super(msg);
 	}
 }
\ No newline at end of file

File: main/ui/src/main/java/org/cryptomator/ui/model/DirectorySerializer.java
Patch:
@@ -13,6 +13,7 @@ public class DirectorySerializer extends JsonSerializer<Directory> {
 	public void serialize(Directory value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException {
 		jgen.writeStartObject();
 		jgen.writeStringField("path", value.getPath().toString());
+		jgen.writeBooleanField("checkIntegrity", value.shouldVerifyFileIntegrity());
 		jgen.writeEndObject();
 	}
 

File: main/ui/src/main/java/org/cryptomator/ui/settings/Settings.java
Patch:
@@ -82,7 +82,7 @@ public static synchronized void save() {
 			try {
 				Files.createDirectories(SETTINGS_DIR);
 				final Path settingsFile = SETTINGS_DIR.resolve(SETTINGS_FILE);
-				final OutputStream out = Files.newOutputStream(settingsFile, StandardOpenOption.WRITE, StandardOpenOption.CREATE);
+				final OutputStream out = Files.newOutputStream(settingsFile, StandardOpenOption.WRITE, StandardOpenOption.TRUNCATE_EXISTING, StandardOpenOption.CREATE);
 				JSON_OM.writeValue(out, INSTANCE);
 			} catch (IOException e) {
 				LOG.error("Failed to save settings.", e);

File: main/core/src/main/java/org/cryptomator/webdav/jackrabbit/resources/EncryptedFile.java
Patch:
@@ -29,6 +29,7 @@
 import org.apache.jackrabbit.webdav.property.DavPropertyName;
 import org.apache.jackrabbit.webdav.property.DefaultDavProperty;
 import org.cryptomator.crypto.Cryptor;
+import org.cryptomator.crypto.exceptions.DecryptFailedException;
 import org.cryptomator.webdav.exceptions.IORuntimeException;
 import org.eclipse.jetty.http.HttpHeader;
 import org.eclipse.jetty.http.HttpHeaderValue;
@@ -78,9 +79,8 @@ public void spool(OutputContext outputContext) throws IOException {
 				}
 			} catch (EOFException e) {
 				LOG.warn("Unexpected end of stream (possibly client hung up).");
-			} catch (IOException e) {
-				LOG.error("Error reading file " + path.toString(), e);
-				throw new IORuntimeException(e);
+			} catch (DecryptFailedException e) {
+				throw new IOException("Error decrypting file " + path.toString(), e);
 			} finally {
 				IOUtils.closeQuietly(channel);
 			}

File: main/crypto-aes/src/main/java/org/cryptomator/crypto/aes256/Aes256Cryptor.java
Patch:
@@ -190,7 +190,7 @@ public void decryptMasterKey(InputStream in, CharSequence password) throws Decry
 			// decrypt and check password by catching AEAD exception
 			final Cipher decCipher = aesKeyWrapCipher(kek, Cipher.UNWRAP_MODE);
 			SecretKey primary = (SecretKey) decCipher.unwrap(keyfile.getPrimaryMasterKey(), AES_KEY_ALGORITHM, Cipher.SECRET_KEY);
-			SecretKey secondary = (SecretKey) decCipher.unwrap(keyfile.getPrimaryMasterKey(), HMAC_KEY_ALGORITHM, Cipher.SECRET_KEY);
+			SecretKey secondary = (SecretKey) decCipher.unwrap(keyfile.getHMacMasterKey(), HMAC_KEY_ALGORITHM, Cipher.SECRET_KEY);
 
 			// everything ok, assign decrypted keys:
 			this.primaryMasterKey = primary;

File: main/ui/src/main/java/org/cryptomator/ui/UnlockController.java
Patch:
@@ -117,7 +117,7 @@ private void didClickUnlockButton(ActionEvent event) {
 			setControlsDisabled(false);
 			progressIndicator.setVisible(false);
 			messageLabel.setText(rb.getString("unlock.errorMessage.wrongPassword"));
-			passwordField.requestFocus();
+			Platform.runLater(passwordField::requestFocus);
 		} catch (UnsupportedKeyLengthException ex) {
 			setControlsDisabled(false);
 			progressIndicator.setVisible(false);

File: main/ui/src/main/java/org/cryptomator/ui/util/mount/LinuxGvfsWebDavMounter.java
Patch:
@@ -19,7 +19,7 @@ public boolean shouldWork() {
 		if (SystemUtils.IS_OS_LINUX) {
 			final Script checkScripts = Script.fromLines("which gvfs-mount xdg-open");
 			try {
-				checkScripts.execute().assertOk();
+				checkScripts.execute();
 				return true;
 			} catch (CommandFailedException e) {
 				return false;
@@ -40,11 +40,11 @@ public WebDavMount mount(int localPort) throws CommandFailedException {
 				"set -x",
 				"gvfs-mount -u \"dav://[::1]:$PORT\"")
 				.addEnv("URI", String.valueOf(localPort));
-		mountScript.execute().assertOk();
+		mountScript.execute();
 		return new WebDavMount() {
 			@Override
 			public void unmount() throws CommandFailedException {
-				unmountScript.execute().assertOk();
+				unmountScript.execute();
 			}
 		};
 	}

File: main/core/src/main/java/org/cryptomator/webdav/WebDAVServer.java
Patch:
@@ -26,7 +26,7 @@
 public final class WebDAVServer {
 
 	private static final Logger LOG = LoggerFactory.getLogger(WebDAVServer.class);
-	private static final String LOCALHOST = "127.0.0.1";
+	private static final String LOCALHOST = "::1";
 	private static final int MAX_PENDING_REQUESTS = 200;
 	private static final int MAX_THREADS = 200;
 	private static final int MIN_THREADS = 4;

File: main/ui/src/main/java/org/cryptomator/ui/util/command/CommandResult.java
Patch:
@@ -14,7 +14,7 @@
 import java.io.IOException;
 import java.util.concurrent.TimeUnit;
 
-import org.cryptomator.ui.util.webdav.CommandFailedException;
+import org.cryptomator.ui.util.mount.CommandFailedException;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: main/ui/src/main/java/org/cryptomator/ui/util/command/CommandRunner.java
Patch:
@@ -15,7 +15,7 @@
 import java.io.IOException;
 
 import org.apache.commons.lang3.SystemUtils;
-import org.cryptomator.ui.util.webdav.CommandFailedException;
+import org.cryptomator.ui.util.mount.CommandFailedException;
 
 /**
  * <p>

File: main/ui/src/main/java/org/cryptomator/ui/util/command/Script.java
Patch:
@@ -11,7 +11,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import org.cryptomator.ui.util.webdav.CommandFailedException;
+import org.cryptomator.ui.util.mount.CommandFailedException;
 
 public final class Script {
 	

File: main/ui/src/main/java/org/cryptomator/ui/util/mount/CommandFailedException.java
Patch:
@@ -7,7 +7,7 @@
  *     Sebastian Stenzel - initial API and implementation
  *     Markus Kreusch - Refactored WebDavMounter to use strategy pattern
  ******************************************************************************/
-package org.cryptomator.ui.util.webdav;
+package org.cryptomator.ui.util.mount;
 
 public class CommandFailedException extends Exception {
 

File: main/ui/src/main/java/org/cryptomator/ui/util/mount/WebDavMount.java
Patch:
@@ -6,7 +6,7 @@
  * Contributors:
  *     Markus Kreusch - Refactored WebDavMounter to use strategy pattern
  ******************************************************************************/
-package org.cryptomator.ui.util.webdav;
+package org.cryptomator.ui.util.mount;
 
 
 /**

File: main/core/src/main/java/org/cryptomator/webdav/jackrabbit/resources/EncryptedDir.java
Patch:
@@ -139,8 +139,8 @@ protected void determineProperties() {
 		if (Files.exists(path)) {
 			try {
 				final BasicFileAttributes attrs = Files.readAttributes(path, BasicFileAttributes.class);
-				properties.add(new DefaultDavProperty<Long>(DavPropertyName.CREATIONDATE, attrs.creationTime().toMillis()));
-				properties.add(new DefaultDavProperty<Long>(DavPropertyName.GETLASTMODIFIED, attrs.lastModifiedTime().toMillis()));
+				properties.add(new DefaultDavProperty<String>(DavPropertyName.CREATIONDATE, FileTimeUtils.toRfc1123String(attrs.creationTime())));
+				properties.add(new DefaultDavProperty<String>(DavPropertyName.GETLASTMODIFIED, FileTimeUtils.toRfc1123String(attrs.lastModifiedTime())));
 			} catch (IOException e) {
 				LOG.error("Error determining metadata " + path.toString(), e);
 				// don't add any further properties

File: main/core/src/main/java/org/cryptomator/webdav/jackrabbit/resources/EncryptedFile.java
Patch:
@@ -96,8 +96,8 @@ protected void determineProperties() {
 				properties.add(new DefaultDavProperty<Long>(DavPropertyName.GETCONTENTLENGTH, contentLength));
 
 				final BasicFileAttributes attrs = Files.readAttributes(path, BasicFileAttributes.class);
-				properties.add(new DefaultDavProperty<Long>(DavPropertyName.CREATIONDATE, attrs.creationTime().toMillis()));
-				properties.add(new DefaultDavProperty<Long>(DavPropertyName.GETLASTMODIFIED, attrs.lastModifiedTime().toMillis()));
+				properties.add(new DefaultDavProperty<String>(DavPropertyName.CREATIONDATE, FileTimeUtils.toRfc1123String(attrs.creationTime())));
+				properties.add(new DefaultDavProperty<String>(DavPropertyName.GETLASTMODIFIED, FileTimeUtils.toRfc1123String(attrs.lastModifiedTime())));
 			} catch (IOException e) {
 				LOG.error("Error determining metadata " + path.toString(), e);
 				throw new IORuntimeException(e);

File: main/core/src/main/java/org/cryptomator/files/EncryptingFileVisitor.java
Patch:
@@ -1,4 +1,4 @@
-package org.cryptomator.ui.util;
+package org.cryptomator.files;
 
 import java.io.IOException;
 import java.nio.file.FileVisitResult;

File: main/ui/src/main/java/org/cryptomator/ui/InitializeController.java
Patch:
@@ -37,10 +37,10 @@
 import org.apache.commons.lang3.CharUtils;
 import org.apache.commons.lang3.StringUtils;
 import org.cryptomator.crypto.aes256.Aes256Cryptor;
+import org.cryptomator.files.EncryptingFileVisitor;
 import org.cryptomator.ui.controls.ClearOnDisableListener;
 import org.cryptomator.ui.controls.SecPasswordField;
 import org.cryptomator.ui.model.Directory;
-import org.cryptomator.ui.util.EncryptingFileVisitor;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: main/ui/src/main/java/org/cryptomator/ui/UnlockController.java
Patch:
@@ -87,8 +87,10 @@ protected void didClickUnlockButton(ActionEvent event) {
 			directory.getCryptor().decryptMasterKey(masterKeyInputStream, password);
 			if (!directory.startServer()) {
 				messageLabel.setText(rb.getString("unlock.messageLabel.startServerFailed"));
+				directory.getCryptor().swipeSensitiveData();
 				return;
 			}
+			directory.setUnlocked(true);
 			directory.mount();
 			if (listener != null) {
 				listener.didUnlock(this);

File: main/ui/src/main/java/org/cryptomator/ui/UnlockedController.java
Patch:
@@ -37,6 +37,7 @@ public void initialize(URL url, ResourceBundle rb) {
 	protected void closeVault(ActionEvent event) {
 		directory.unmount();
 		directory.stopServer();
+		directory.setUnlocked(false);
 		if (listener != null) {
 			listener.didLock(this);
 		}

File: main/core/src/main/java/org/cryptomator/webdav/jackrabbit/WebDavLocatorFactory.java
Patch:
@@ -118,6 +118,9 @@ public void writePathSpecificMetadata(String encryptedPath, byte[] encryptedMeta
 	@Override
 	public byte[] readPathSpecificMetadata(String encryptedPath) throws IOException {
 		final Path metaDataFile = fsRoot.resolve(encryptedPath);
+		if (!Files.isReadable(metaDataFile)) {
+			return null;
+		}
 		final long metaDataFileSize = Files.size(metaDataFile);
 		final SeekableByteChannel channel = Files.newByteChannel(metaDataFile, StandardOpenOption.READ);
 		try {

File: main/crypto-api/src/main/java/org/cryptomator/crypto/CryptorIOSupport.java
Patch:
@@ -16,7 +16,7 @@ public interface CryptorIOSupport {
 	void writePathSpecificMetadata(String encryptedPath, byte[] encryptedMetadata) throws IOException;
 
 	/**
-	 * @return Previously written encryptedMetadata stored at the given encryptedPath.
+	 * @return Previously written encryptedMetadata stored at the given encryptedPath or <code>null</code> if no such file exists.
 	 */
 	byte[] readPathSpecificMetadata(String encryptedPath) throws IOException;
 

File: main/core/src/main/java/org/cryptomator/webdav/WebDAVServer.java
Patch:
@@ -28,11 +28,11 @@ public final class WebDAVServer {
 	private static final Logger LOG = LoggerFactory.getLogger(WebDAVServer.class);
 	private static final String LOCALHOST = "127.0.0.1";
 	private static final int MAX_PENDING_REQUESTS = 200;
-	private static final int MAX_THREADS = 4;
-	private static final int MIN_THREADS = 2;
+	private static final int MAX_THREADS = 200;
+	private static final int MIN_THREADS = 4;
 	private static final int THREAD_IDLE_SECONDS = 20;
 	private final Server server;
-	
+
 	public WebDAVServer() {
 		final BlockingQueue<Runnable> queue = new LinkedBlockingQueue<>(MAX_PENDING_REQUESTS);
 		final ThreadPool tp = new QueuedThreadPool(MAX_THREADS, MIN_THREADS, THREAD_IDLE_SECONDS, queue);

File: main/crypto-aes/src/main/java/org/cryptomator/crypto/aes256/AesCryptographicConfiguration.java
Patch:
@@ -16,10 +16,9 @@ interface AesCryptographicConfiguration {
 	int PRNG_SEED_LENGTH = 16;
 
 	/**
-	 * Number of bytes of the master key. Should be significantly higher than the {@link #AES_KEY_LENGTH}, as a corrupted masterkey can't be
-	 * changed without decrypting and re-encrypting all files first.
+	 * Number of bytes of the master key. Should be the maximum possible AES key length to provide best security.
 	 */
-	int MASTER_KEY_LENGTH = 512;
+	int MASTER_KEY_LENGTH = 256;
 
 	/**
 	 * Number of bytes used as salt, where needed.

File: main/crypto-api/src/main/java/org/cryptomator/crypto/Cryptor.java
Patch:
@@ -32,7 +32,7 @@ public interface Cryptor extends SensitiveDataSwipeListener {
 	 * @return Encrypted path components concatenated by the given encryptedPathSep. Must not start with encryptedPathSep, unless the
 	 *         encrypted path is explicitly absolute.
 	 */
-	String encryptPath(String cleartextPath, char encryptedPathSep, char cleartextPathSep);
+	String encryptPath(String cleartextPath, char encryptedPathSep, char cleartextPathSep, CryptorIOSupport ioSupport);
 
 	/**
 	 * Decrypts each encrypted path component for its own.
@@ -46,7 +46,7 @@ public interface Cryptor extends SensitiveDataSwipeListener {
 	 * @return Decrypted path components concatenated by the given cleartextPathSep. Must not start with cleartextPathSep, unless the
 	 *         cleartext path is explicitly absolute.
 	 */
-	String decryptPath(String encryptedPath, char encryptedPathSep, char cleartextPathSep);
+	String decryptPath(String encryptedPath, char encryptedPathSep, char cleartextPathSep, CryptorIOSupport ioSupport);
 
 	/**
 	 * @param metadataSupport Support object allowing the Cryptor to read and write its own metadata to the location of the encrypted file.

File: main/ui/src/main/java/org/cryptomator/ui/InitializeController.java
Patch:
@@ -67,6 +67,7 @@ protected void initWorkDir(ActionEvent event) {
 		OutputStream masterKeyOutputStream = null;
 		try {
 			masterKeyOutputStream = Files.newOutputStream(masterKeyPath, StandardOpenOption.WRITE, StandardOpenOption.CREATE_NEW);
+			cryptor.randomizeMasterKey();
 			cryptor.encryptMasterKey(masterKeyOutputStream, password);
 			cryptor.swipeSensitiveData();
 			if (callback != null) {

File: oce-main/oce-core/src/main/java/de/sebastianstenzel/oce/webdav/jackrabbit/WebDavServlet.java
Patch:
@@ -50,8 +50,7 @@ public void init(ServletConfig config) throws ServletException {
 
 	@Override
 	protected boolean isPreconditionValid(WebdavRequest request, DavResource resource) {
-		// TODO Auto-generated method stub
-		return true;
+		return !resource.exists() || request.matchesIfHeader(resource);
 	}
 
 	@Override

File: oce-main/oce-core/src/main/java/de/sebastianstenzel/oce/webdav/jackrabbit/resources/EncryptedDir.java
Patch:
@@ -144,7 +144,7 @@ protected void determineProperties() {
 				properties.add(new DefaultDavProperty<Long>(DavPropertyName.GETLASTMODIFIED, attrs.lastModifiedTime().toMillis()));
 			} catch (IOException e) {
 				LOG.error("Error determining metadata " + path.toString(), e);
-				throw new IORuntimeException(e);
+				// don't add any further properties
 			}
 		}
 	}

File: oce-main/oce-core/src/main/java/de/sebastianstenzel/oce/webdav/jackrabbit/resources/EncryptedFile.java
Patch:
@@ -7,6 +7,7 @@
  *     Sebastian Stenzel - initial API and implementation
  ******************************************************************************/
 package de.sebastianstenzel.oce.webdav.jackrabbit.resources;
+
 import java.io.EOFException;
 import java.io.IOException;
 import java.nio.channels.SeekableByteChannel;
@@ -33,7 +34,6 @@
 import de.sebastianstenzel.oce.crypto.Cryptor;
 import de.sebastianstenzel.oce.webdav.exceptions.IORuntimeException;
 
-
 public class EncryptedFile extends AbstractEncryptedNode {
 
 	private static final Logger LOG = LoggerFactory.getLogger(EncryptedFile.class);
@@ -70,7 +70,7 @@ public void spool(OutputContext outputContext) throws IOException {
 			SeekableByteChannel channel = null;
 			try {
 				channel = Files.newByteChannel(path, StandardOpenOption.READ);
-				outputContext.setContentLength(cryptor.decryptedContentLength(channel, null));
+				outputContext.setContentLength(cryptor.decryptedContentLength(channel));
 				if (outputContext.hasStream()) {
 					cryptor.decryptedFile(channel, outputContext.getOutputStream());
 				}
@@ -93,7 +93,7 @@ protected void determineProperties() {
 			SeekableByteChannel channel = null;
 			try {
 				channel = Files.newByteChannel(path, StandardOpenOption.READ);
-				final Long contentLength = cryptor.decryptedContentLength(channel, null);
+				final Long contentLength = cryptor.decryptedContentLength(channel);
 				properties.add(new DefaultDavProperty<Long>(DavPropertyName.GETCONTENTLENGTH, contentLength));
 
 				final BasicFileAttributes attrs = Files.readAttributes(path, BasicFileAttributes.class);

