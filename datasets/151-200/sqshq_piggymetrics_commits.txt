File: statistics-service/src/test/java/com/piggymetrics/statistics/client/ExchangeRatesClientTest.java
Patch:
@@ -12,7 +12,6 @@
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertNull;
 
 @RunWith(SpringRunner.class)
 @SpringBootTest
@@ -30,7 +29,7 @@ public void shouldRetrieveExchangeRates() {
 		assertEquals(container.getBase(), Currency.getBase());
 
 		assertNotNull(container.getRates());
-		assertNull(container.getRates().get(Currency.USD.name()));
+		assertNotNull(container.getRates().get(Currency.USD.name()));
 		assertNotNull(container.getRates().get(Currency.EUR.name()));
 		assertNotNull(container.getRates().get(Currency.RUB.name()));
 	}

File: account-service/src/test/java/com/piggymetrics/account/AccountServiceApplicationTests.java
Patch:
@@ -3,9 +3,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.boot.test.context.SpringBootTest;
-import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
+import org.springframework.test.context.junit4.SpringRunner;
 
-@RunWith(SpringJUnit4ClassRunner.class)
+@RunWith(SpringRunner.class)
 @SpringBootTest
 public class AccountServiceApplicationTests {
 

File: account-service/src/test/java/com/piggymetrics/account/controller/AccountControllerTest.java
Patch:
@@ -12,7 +12,7 @@
 import org.mockito.Mock;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.http.MediaType;
-import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
+import org.springframework.test.context.junit4.SpringRunner;
 import org.springframework.test.web.servlet.MockMvc;
 import org.springframework.test.web.servlet.setup.MockMvcBuilders;
 
@@ -25,7 +25,7 @@
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
 
-@RunWith(SpringJUnit4ClassRunner.class)
+@RunWith(SpringRunner.class)
 @SpringBootTest
 public class AccountControllerTest {
 

File: account-service/src/test/java/com/piggymetrics/account/repository/AccountRepositoryTest.java
Patch:
@@ -9,15 +9,15 @@
 import org.junit.runner.RunWith;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.autoconfigure.data.mongo.DataMongoTest;
-import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
+import org.springframework.test.context.junit4.SpringRunner;
 
 import java.math.BigDecimal;
 import java.util.Arrays;
 import java.util.Date;
 
 import static org.junit.Assert.assertEquals;
 
-@RunWith(SpringJUnit4ClassRunner.class)
+@RunWith(SpringRunner.class)
 @DataMongoTest
 public class AccountRepositoryTest {
 

File: auth-service/src/test/java/com/piggymetrics/auth/AuthServiceApplicationTests.java
Patch:
@@ -3,9 +3,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.boot.test.context.SpringBootTest;
-import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
+import org.springframework.test.context.junit4.SpringRunner;
 
-@RunWith(SpringJUnit4ClassRunner.class)
+@RunWith(SpringRunner.class)
 @SpringBootTest
 public class AuthServiceApplicationTests {
 

File: auth-service/src/test/java/com/piggymetrics/auth/controller/UserControllerTest.java
Patch:
@@ -11,7 +11,7 @@
 import org.mockito.Mock;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.http.MediaType;
-import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
+import org.springframework.test.context.junit4.SpringRunner;
 import org.springframework.test.web.servlet.MockMvc;
 import org.springframework.test.web.servlet.setup.MockMvcBuilders;
 
@@ -21,7 +21,7 @@
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
 
-@RunWith(SpringJUnit4ClassRunner.class)
+@RunWith(SpringRunner.class)
 @SpringBootTest
 public class UserControllerTest {
 

File: auth-service/src/test/java/com/piggymetrics/auth/repository/UserRepositoryTest.java
Patch:
@@ -8,14 +8,14 @@
 import org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration;
 import org.springframework.boot.test.autoconfigure.data.mongo.DataMongoTest;
 import org.springframework.boot.test.mock.mockito.MockBean;
-import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
+import org.springframework.test.context.junit4.SpringRunner;
 
 import java.util.Optional;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 
-@RunWith(SpringJUnit4ClassRunner.class)
+@RunWith(SpringRunner.class)
 @DataMongoTest
 public class UserRepositoryTest {
 

File: gateway/src/test/java/com/piggymetrics/gateway/GatewayApplicationTests.java
Patch:
@@ -3,9 +3,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.boot.test.context.SpringBootTest;
-import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
+import org.springframework.test.context.junit4.SpringRunner;
 
-@RunWith(SpringJUnit4ClassRunner.class)
+@RunWith(SpringRunner.class)
 @SpringBootTest
 public class GatewayApplicationTests {
 

File: monitoring/src/test/java/com/piggymetrics/monitoring/MonitoringApplicationTests.java
Patch:
@@ -3,9 +3,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.boot.test.context.SpringBootTest;
-import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
+import org.springframework.test.context.junit4.SpringRunner;
 
-@RunWith(SpringJUnit4ClassRunner.class)
+@RunWith(SpringRunner.class)
 @SpringBootTest
 public class MonitoringApplicationTests {
 

File: notification-service/src/test/java/com/piggymetrics/notification/NotificationServiceApplicationTests.java
Patch:
@@ -3,9 +3,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.boot.test.context.SpringBootTest;
-import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
+import org.springframework.test.context.junit4.SpringRunner;
 
-@RunWith(SpringJUnit4ClassRunner.class)
+@RunWith(SpringRunner.class)
 @SpringBootTest
 public class NotificationServiceApplicationTests {
 

File: notification-service/src/test/java/com/piggymetrics/notification/controller/RecipientControllerTest.java
Patch:
@@ -15,7 +15,7 @@
 import org.mockito.Mock;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.http.MediaType;
-import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
+import org.springframework.test.context.junit4.SpringRunner;
 import org.springframework.test.web.servlet.MockMvc;
 import org.springframework.test.web.servlet.setup.MockMvcBuilders;
 
@@ -26,7 +26,7 @@
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
 
-@RunWith(SpringJUnit4ClassRunner.class)
+@RunWith(SpringRunner.class)
 @SpringBootTest
 public class RecipientControllerTest {
 

File: notification-service/src/test/java/com/piggymetrics/notification/repository/RecipientRepositoryTest.java
Patch:
@@ -10,7 +10,7 @@
 import org.junit.runner.RunWith;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.autoconfigure.data.mongo.DataMongoTest;
-import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
+import org.springframework.test.context.junit4.SpringRunner;
 
 import java.util.Date;
 import java.util.List;
@@ -19,7 +19,7 @@
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 
-@RunWith(SpringJUnit4ClassRunner.class)
+@RunWith(SpringRunner.class)
 @DataMongoTest
 public class RecipientRepositoryTest {
 

File: statistics-service/src/main/java/com/piggymetrics/statistics/client/ExchangeRatesClientFallback.java
Patch:
@@ -4,14 +4,13 @@
 import com.piggymetrics.statistics.domain.ExchangeRatesContainer;
 import org.springframework.stereotype.Component;
 
-import java.util.Collection;
 import java.util.Collections;
 
 @Component
 public class ExchangeRatesClientFallback implements ExchangeRatesClient {
 
     @Override
-    public ExchangeRatesContainer getRates(Currency base, Collection<Currency> currencies) {
+    public ExchangeRatesContainer getRates(Currency base) {
         ExchangeRatesContainer container = new ExchangeRatesContainer();
         container.setBase(Currency.getBase());
         container.setRates(Collections.emptyMap());

File: statistics-service/src/test/java/com/piggymetrics/statistics/StatisticsServiceApplicationTests.java
Patch:
@@ -3,9 +3,9 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.boot.test.context.SpringBootTest;
-import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
+import org.springframework.test.context.junit4.SpringRunner;
 
-@RunWith(SpringJUnit4ClassRunner.class)
+@RunWith(SpringRunner.class)
 @SpringBootTest
 public class StatisticsServiceApplicationTests {
 

File: statistics-service/src/test/java/com/piggymetrics/statistics/controller/StatisticsControllerTest.java
Patch:
@@ -18,7 +18,7 @@
 import org.mockito.Mock;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.http.MediaType;
-import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
+import org.springframework.test.context.junit4.SpringRunner;
 import org.springframework.test.web.servlet.MockMvc;
 import org.springframework.test.web.servlet.setup.MockMvcBuilders;
 
@@ -36,7 +36,7 @@
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
 
-@RunWith(SpringJUnit4ClassRunner.class)
+@RunWith(SpringRunner.class)
 @SpringBootTest
 public class StatisticsControllerTest {
 

File: statistics-service/src/test/java/com/piggymetrics/statistics/repository/DataPointRepositoryTest.java
Patch:
@@ -10,15 +10,15 @@
 import org.junit.runner.RunWith;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.autoconfigure.data.mongo.DataMongoTest;
-import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
+import org.springframework.test.context.junit4.SpringRunner;
 
 import java.math.BigDecimal;
 import java.util.Date;
 import java.util.List;
 
 import static org.junit.Assert.assertEquals;
 
-@RunWith(SpringJUnit4ClassRunner.class)
+@RunWith(SpringRunner.class)
 @DataMongoTest
 public class DataPointRepositoryTest {
 

File: notification-service/src/main/java/com/piggymetrics/notification/client/AccountServiceClient.java
Patch:
@@ -1,6 +1,6 @@
 package com.piggymetrics.notification.client;
 
-import org.springframework.cloud.netflix.feign.FeignClient;
+import org.springframework.cloud.openfeign.FeignClient;
 import org.springframework.http.MediaType;
 import org.springframework.web.bind.annotation.PathVariable;
 import org.springframework.web.bind.annotation.RequestMapping;

File: statistics-service/src/test/java/com/piggymetrics/statistics/client/ExchangeRatesClientTest.java
Patch:
@@ -1,12 +1,11 @@
 package com.piggymetrics.statistics.client;
 
-import com.piggymetrics.statistics.StatisticsApplication;
 import com.piggymetrics.statistics.domain.Currency;
 import com.piggymetrics.statistics.domain.ExchangeRatesContainer;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.boot.test.SpringApplicationConfiguration;
+import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
 
 import java.time.LocalDate;
@@ -16,7 +15,7 @@
 import static org.junit.Assert.assertNotNull;
 
 @RunWith(SpringJUnit4ClassRunner.class)
-@SpringApplicationConfiguration(classes = StatisticsApplication.class)
+@SpringBootTest
 public class ExchangeRatesClientTest {
 
 	@Autowired

File: statistics-service/src/test/java/com/piggymetrics/statistics/repository/DataPointRepositoryTest.java
Patch:
@@ -2,15 +2,14 @@
 
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.Sets;
-import com.piggymetrics.statistics.StatisticsApplication;
 import com.piggymetrics.statistics.domain.timeseries.DataPoint;
 import com.piggymetrics.statistics.domain.timeseries.DataPointId;
 import com.piggymetrics.statistics.domain.timeseries.ItemMetric;
 import com.piggymetrics.statistics.domain.timeseries.StatisticMetric;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.boot.test.SpringApplicationConfiguration;
+import org.springframework.boot.test.autoconfigure.data.mongo.DataMongoTest;
 import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
 
 import java.math.BigDecimal;
@@ -20,7 +19,7 @@
 import static org.junit.Assert.assertEquals;
 
 @RunWith(SpringJUnit4ClassRunner.class)
-@SpringApplicationConfiguration(classes = StatisticsApplication.class)
+@DataMongoTest
 public class DataPointRepositoryTest {
 
 	@Autowired

File: statistics-service/src/main/java/com/piggymetrics/statistics/client/ExchangeRatesClient.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.piggymetrics.statistics.domain.Currency;
 import com.piggymetrics.statistics.domain.ExchangeRatesContainer;
-import org.springframework.cloud.netflix.feign.FeignClient;
+import org.springframework.cloud.openfeign.FeignClient;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RequestMethod;
 import org.springframework.web.bind.annotation.RequestParam;

File: account-service/src/main/java/com/piggymetrics/account/client/AuthServiceClient.java
Patch:
@@ -1,7 +1,7 @@
 package com.piggymetrics.account.client;
 
 import com.piggymetrics.account.domain.User;
-import org.springframework.cloud.netflix.feign.FeignClient;
+import org.springframework.cloud.openfeign.FeignClient;
 import org.springframework.http.MediaType;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RequestMethod;

File: account-service/src/main/java/com/piggymetrics/account/client/StatisticsServiceClient.java
Patch:
@@ -1,7 +1,7 @@
 package com.piggymetrics.account.client;
 
 import com.piggymetrics.account.domain.Account;
-import org.springframework.cloud.netflix.feign.FeignClient;
+import org.springframework.cloud.openfeign.FeignClient;
 import org.springframework.http.MediaType;
 import org.springframework.web.bind.annotation.PathVariable;
 import org.springframework.web.bind.annotation.RequestMapping;

File: auth-service/src/test/java/com/piggymetrics/auth/AuthServiceApplicationTests.java
Patch:
@@ -2,11 +2,11 @@
 
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.springframework.boot.test.SpringApplicationConfiguration;
+import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
 
 @RunWith(SpringJUnit4ClassRunner.class)
-@SpringApplicationConfiguration(classes = AuthApplication.class)
+@SpringBootTest
 public class AuthServiceApplicationTests {
 
 	@Test

File: auth-service/src/test/java/com/piggymetrics/auth/service/UserServiceTest.java
Patch:
@@ -7,6 +7,8 @@
 import org.mockito.InjectMocks;
 import org.mockito.Mock;
 
+import java.util.Optional;
+
 import static org.mockito.Mockito.*;
 import static org.mockito.MockitoAnnotations.initMocks;
 
@@ -41,7 +43,7 @@ public void shouldFailWhenUserAlreadyExists() {
 		user.setUsername("name");
 		user.setPassword("password");
 
-		when(repository.findOne(user.getUsername())).thenReturn(new User());
+		when(repository.findById(user.getUsername())).thenReturn(Optional.of(new User()));
 		userService.create(user);
 	}
 }

File: auth-service/src/test/java/com/piggymetrics/auth/service/security/MongoUserDetailsServiceTest.java
Patch:
@@ -9,6 +9,8 @@
 import org.springframework.security.core.userdetails.UserDetails;
 import org.springframework.security.core.userdetails.UsernameNotFoundException;
 
+import java.util.Optional;
+
 import static org.junit.Assert.assertEquals;
 import static org.mockito.Matchers.any;
 import static org.mockito.Mockito.when;
@@ -32,7 +34,7 @@ public void shouldLoadByUsernameWhenUserExists() {
 
 		final User user = new User();
 
-		when(repository.findOne(any())).thenReturn(user);
+		when(repository.findById(any())).thenReturn(Optional.of(user));
 		UserDetails loaded = service.loadUserByUsername("name");
 
 		assertEquals(user, loaded);

File: statistics-service/src/main/java/com/piggymetrics/statistics/client/ExchangeRatesClientFallback.java
Patch:
@@ -4,13 +4,14 @@
 import com.piggymetrics.statistics.domain.ExchangeRatesContainer;
 import org.springframework.stereotype.Component;
 
+import java.util.Collection;
 import java.util.Collections;
 
 @Component
 public class ExchangeRatesClientFallback implements ExchangeRatesClient {
 
     @Override
-    public ExchangeRatesContainer getRates(Currency base) {
+    public ExchangeRatesContainer getRates(Currency base, Collection<Currency> currencies) {
         ExchangeRatesContainer container = new ExchangeRatesContainer();
         container.setBase(Currency.getBase());
         container.setRates(Collections.emptyMap());

File: statistics-service/src/test/java/com/piggymetrics/statistics/client/ExchangeRatesClientTest.java
Patch:
@@ -30,6 +30,8 @@ public void shouldRetrieveExchangeRates() {
 		assertEquals(container.getBase(), Currency.getBase());
 
 		assertNotNull(container.getRates());
+		assertNotNull(container.getRates().get(Currency.EUR.name()));
+		assertNotNull(container.getRates().get(Currency.RUB.name()));
 	}
 
 }
\ No newline at end of file

File: notification-service/src/main/java/com/piggymetrics/notification/service/RecipientServiceImpl.java
Patch:
@@ -36,7 +36,7 @@ public Recipient save(String accountName, Recipient recipient) {
 		recipient.getScheduledNotifications().values()
 				.forEach(settings -> {
 					if (settings.getLastNotified() == null) {
-						settings.setLastNotified(new Date(0));
+						settings.setLastNotified(new Date());
 					}
 				});
 
@@ -67,7 +67,7 @@ public List<Recipient> findReadyToNotify(NotificationType type) {
 	 */
 	@Override
 	public void markNotified(NotificationType type, Recipient recipient) {
-		recipient.getScheduledNotifications().get(type).setLastNotified(new Date(0));
+		recipient.getScheduledNotifications().get(type).setLastNotified(new Date());
 		repository.save(recipient);
 	}
 }

File: notification-service/src/main/java/com/piggymetrics/notification/service/EmailServiceImpl.java
Patch:
@@ -5,6 +5,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.cloud.context.config.annotation.RefreshScope;
 import org.springframework.core.env.Environment;
 import org.springframework.core.io.ByteArrayResource;
 import org.springframework.mail.javamail.JavaMailSender;
@@ -18,6 +19,7 @@
 import java.text.MessageFormat;
 
 @Service
+@RefreshScope
 public class EmailServiceImpl implements EmailService {
 
 	private static final Logger log = LoggerFactory.getLogger(NotificationServiceImpl.class);
@@ -47,6 +49,6 @@ public void send(NotificationType type, Recipient recipient, String attachment)
 
 		mailSender.send(message);
 
-		log.info("An email {} notification has been send to {}", type, recipient.getEmail());
+		log.info("{} email notification has been send to {}", type, recipient.getEmail());
 	}
 }

File: statistics-service/src/main/java/com/piggymetrics/statistics/domain/TimePeriod.java
Patch:
@@ -4,7 +4,7 @@
 
 public enum TimePeriod {
 
-	YEAR(365.2425), QUATER(91.3106), MONTH(30.4368), DAY(1), HOUR(0.0416);
+	YEAR(365.2425), QUARTER(91.3106), MONTH(30.4368), DAY(1), HOUR(0.0416);
 
 	private double baseRatio;
 

File: account-service/src/main/java/com/piggymetrics/account/controller/AccountController.java
Patch:
@@ -4,7 +4,6 @@
 import com.piggymetrics.account.domain.User;
 import com.piggymetrics.account.service.AccountService;
 import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.security.access.prepost.PreAuthorize;
 import org.springframework.web.bind.annotation.*;
 
 import javax.validation.Valid;
@@ -16,7 +15,7 @@ public class AccountController {
 	@Autowired
 	private AccountService accountService;
 
-	@PreAuthorize("#oauth2.hasScope('server') or #name.equals('demo')")
+	//@PreAuthorize("#oauth2.hasScope('server') or #name.equals('demo')")
 	@RequestMapping(path = "/{name}", method = RequestMethod.GET)
 	public Account getAccountByName(@PathVariable String name) {
 		return accountService.findByName(name);

File: account-service/src/main/java/com/piggymetrics/account/domain/TimePeriod.java
Patch:
@@ -2,6 +2,6 @@
 
 public enum TimePeriod {
 
-	YEAR, QUATER, MONTH, DAY, HOUR
+	YEAR, QUARTER, MONTH, DAY, HOUR
 
 }

File: notification-service/src/main/java/com/piggymetrics/notification/service/EmailServiceImpl.java
Patch:
@@ -1,6 +1,5 @@
 package com.piggymetrics.notification.service;
 
-import com.google.common.base.Strings;
 import com.piggymetrics.notification.domain.NotificationType;
 import com.piggymetrics.notification.domain.Recipient;
 import org.slf4j.Logger;
@@ -11,6 +10,7 @@
 import org.springframework.mail.javamail.JavaMailSender;
 import org.springframework.mail.javamail.MimeMessageHelper;
 import org.springframework.stereotype.Service;
+import org.springframework.util.StringUtils;
 
 import javax.mail.MessagingException;
 import javax.mail.internet.MimeMessage;
@@ -41,7 +41,7 @@ public void send(NotificationType type, Recipient recipient, String attachment)
 		helper.setSubject(subject);
 		helper.setText(text);
 
-		if (!Strings.isNullOrEmpty(attachment)) {
+		if (StringUtils.hasLength(attachment)) {
 			helper.addAttachment(env.getProperty(type.getAttachment()), new ByteArrayResource(attachment.getBytes()));
 		}
 

File: notification-service/src/main/java/com/piggymetrics/notification/controller/NotificationController.java
Patch:
@@ -25,6 +25,6 @@ public Object getCurrentNotificationsSettings(Principal principal) {
 
 	@RequestMapping(path = "/current", method = RequestMethod.PUT)
 	public Object saveCurrentNotificationsSettings(Principal principal, @Valid @RequestBody Recipient recipient) {
-		return recipientService.saveChanges(principal.getName(), recipient);
+		return recipientService.save(principal.getName(), recipient);
 	}
 }

File: account-service/src/test/java/com/piggymetrics/account/controller/AccountControllerTest.java
Patch:
@@ -133,7 +133,7 @@ public void shouldRegisterNewAccount() throws Exception {
 
 		String json = mapper.writeValueAsString(user);
 		System.out.println(json);
-		mockMvc.perform(post("/registration").principal(new UserPrincipal("test")).contentType(MediaType.APPLICATION_JSON).content(json))
+		mockMvc.perform(post("/").principal(new UserPrincipal("test")).contentType(MediaType.APPLICATION_JSON).content(json))
 				.andExpect(status().isOk());
 	}
 
@@ -145,7 +145,7 @@ public void shouldFailOnValidationTryingToRegisterNewAccount() throws Exception
 
 		String json = mapper.writeValueAsString(user);
 
-		mockMvc.perform(post("/registration").principal(new UserPrincipal("test")).contentType(MediaType.APPLICATION_JSON).content(json))
+		mockMvc.perform(post("/").principal(new UserPrincipal("test")).contentType(MediaType.APPLICATION_JSON).content(json))
 				.andExpect(status().isBadRequest());
 	}
 }

File: account-service/src/main/java/com/piggymetrics/account/AccountApplication.java
Patch:
@@ -24,8 +24,8 @@
 @EnableDiscoveryClient
 @EnableOAuth2Client
 @EnableFeignClients
-@EnableConfigurationProperties
 @EnableGlobalMethodSecurity(prePostEnabled = true)
+@EnableConfigurationProperties
 @Configuration
 public class AccountApplication extends ResourceServerConfigurerAdapter {
 

File: account-service/src/main/java/com/piggymetrics/account/client/StatisticsServiceClient.java
Patch:
@@ -2,14 +2,15 @@
 
 import com.piggymetrics.account.domain.Account;
 import org.springframework.cloud.netflix.feign.FeignClient;
+import org.springframework.http.MediaType;
 import org.springframework.web.bind.annotation.PathVariable;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RequestMethod;
 
 @FeignClient(name = "statistics-service")
 public interface StatisticsServiceClient {
 
-	@RequestMapping(method = RequestMethod.PUT, value = "/statistics/{accountName}")
+	@RequestMapping(method = RequestMethod.PUT, value = "/statistics/{accountName}", consumes = MediaType.APPLICATION_JSON_UTF8_VALUE)
 	void updateStatistics(@PathVariable("accountName") String accountName, Account account);
 
 }

File: statistics-service/src/main/java/com/piggymetrics/statistics/StatisticsApplication.java
Patch:
@@ -10,15 +10,15 @@
 import org.springframework.context.annotation.Configuration;
 import org.springframework.data.mongodb.core.convert.CustomConversions;
 import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
-import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
+import org.springframework.security.oauth2.config.annotation.web.configuration.EnableOAuth2Client;
 import org.springframework.security.oauth2.config.annotation.web.configuration.EnableResourceServer;
 
 import java.util.Arrays;
 
 @SpringBootApplication
 @EnableResourceServer
-@EnableWebSecurity
 @EnableDiscoveryClient
+@EnableOAuth2Client
 @EnableFeignClients
 @EnableGlobalMethodSecurity(prePostEnabled = true)
 public class StatisticsApplication {

File: account-service/src/main/java/com/piggymetrics/account/controller/ErrorHandler.java
Patch:
@@ -17,6 +17,6 @@ public class ErrorHandler {
 	@ExceptionHandler(IllegalArgumentException.class)
 	@ResponseStatus(HttpStatus.BAD_REQUEST)
 	public void processValidationError(IllegalArgumentException e) {
-		log.debug("Returning HTTP 400 Bad Request", e);
+		log.info("Returning HTTP 400 Bad Request", e);
 	}
 }

File: auth-service/src/main/java/com/piggymetrics/auth/AuthApplication.java
Patch:
@@ -1,6 +1,6 @@
 package com.piggymetrics.auth;
 
-import com.piggymetrics.auth.service.MongoUserDetailsService;
+import com.piggymetrics.auth.service.security.MongoUserDetailsService;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.beans.factory.annotation.Qualifier;
 import org.springframework.boot.SpringApplication;

File: auth-service/src/main/java/com/piggymetrics/auth/service/UserServiceImpl.java
Patch:
@@ -10,11 +10,10 @@
 @Service
 public class UserServiceImpl implements UserService {
 
-	@Autowired
-	private UserRepository repository;
+	private static final BCryptPasswordEncoder encoder = new BCryptPasswordEncoder();
 
 	@Autowired
-	private BCryptPasswordEncoder encoder;
+	private UserRepository repository;
 
 	@Override
 	public void create(User user) {

File: auth-service/src/main/java/com/piggymetrics/auth/service/security/MongoUserDetailsService.java
Patch:
@@ -1,4 +1,4 @@
-package com.piggymetrics.auth.service;
+package com.piggymetrics.auth.service.security;
 
 import com.piggymetrics.auth.domain.User;
 import com.piggymetrics.auth.repository.UserRepository;

File: auth-service/src/main/java/com/piggymetrics/auth/AuthApplication.java
Patch:
@@ -83,6 +83,7 @@ protected static class OAuth2AuthorizationConfig extends AuthorizationServerConf
 
 		@Override
 		public void configure(ClientDetailsServiceConfigurer clients) throws Exception {
+			// TODO
 			// @formatter:off
 			clients.inMemory()
 					.withClient("browser")

File: src/main/java/com/piggymetrics/domain/User.java
Patch:
@@ -70,5 +70,4 @@ public String getLastVisit() {
 
         return output.print(visit);
     }
-
-}
+}
\ No newline at end of file

File: src/main/java/com/piggymetrics/service/BackupService.java
Patch:
@@ -40,7 +40,6 @@ public class BackupService implements BackupServiceInterface {
 
     @Scheduled(cron="${backup.schedule}")
     public void backupUsersData() {
-        System.out.println("backup try");
         try {
             List<User> users = userDao.selectForBackup();
             for (User user : users) {

File: src/main/java/com/piggymetrics/controllers/AppController.java
Patch:
@@ -2,11 +2,11 @@
 
 import com.piggymetrics.model.User;
 import com.piggymetrics.service.UserService;
-import org.springframework.beans.factory.annotation.Autowired;
 import com.fasterxml.jackson.databind.ObjectMapper;
-import org.springframework.stereotype.Controller;
 import org.springframework.ui.ModelMap;
 import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Controller;
 
 import javax.servlet.http.HttpServletRequest;
 import java.security.Principal;

