File: src/test/java/redis/clients/jedis/ACLJedisTest.java
Patch:
@@ -1,15 +1,16 @@
 package redis.clients.jedis;
 
 import static org.junit.Assert.assertEquals;
+import static redis.clients.jedis.util.RedisVersionUtil.getRedisVersion;
 
+import io.redis.test.utils.RedisVersion;
 import java.net.URISyntaxException;
 import org.junit.BeforeClass;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.Parameterized;
 
 import redis.clients.jedis.commands.jedis.JedisCommandsTestBase;
-import redis.clients.jedis.util.RedisVersionUtil;
 
 /**
  * This test class is a copy of {@link JedisTest}.
@@ -28,7 +29,7 @@ public class ACLJedisTest extends JedisCommandsTestBase {
   @BeforeClass
   public static void prepare() throws Exception {
     org.junit.Assume.assumeTrue("Not running ACL test on this version of Redis",
-        RedisVersionUtil.checkRedisMajorVersionNumber(6, endpoint));
+        getRedisVersion(endpoint).isGreaterThanOrEqualTo(RedisVersion.of("6.0.0")));
   }
 
   public ACLJedisTest(RedisProtocol redisProtocol) {

File: src/test/java/redis/clients/jedis/JedisClusterTest.java
Patch:
@@ -26,6 +26,7 @@
 import java.util.concurrent.ThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
 
+import io.redis.test.annotations.SinceRedisVersion;
 import org.apache.commons.pool2.impl.GenericObjectPoolConfig;
 import org.junit.Test;
 
@@ -667,7 +668,8 @@ public void testInvalidStartNodeNotAdded() {
   }
 
   @Test
-  public void clusterLinks2() throws InterruptedException {
+  @SinceRedisVersion("7.0.0")
+  public void clusterLinks2() {
     Set<String> mapKeys = new HashSet<>(Arrays.asList("direction", "node", "create-time", "events",
         "send-buffer-allocated", "send-buffer-used"));
 

File: src/test/java/redis/clients/jedis/JedisTest.java
Patch:
@@ -16,6 +16,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
+import io.redis.test.annotations.SinceRedisVersion;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.Parameterized;
@@ -308,6 +309,7 @@ public void checkDisconnectOnQuit() {
   }
 
   @Test
+  @SinceRedisVersion(value = "7.2.0", message = "see https://redis.io/docs/latest/commands/client-setinfo/")
   public void clientSetInfoDefault() {
     try (Jedis jedis = new Jedis(endpoint.getHostAndPort(), endpoint.getClientConfigBuilder()
         .clientSetInfoConfig(ClientSetInfoConfig.DEFAULT).build())) {
@@ -330,6 +332,7 @@ public void clientSetInfoDisabled() {
   }
 
   @Test
+  @SinceRedisVersion(value = "7.2.0", message = "@see https://redis.io/docs/latest/commands/client-setinfo/")
   public void clientSetInfoLibNameSuffix() {
     final String libNameSuffix = "for-redis";
     ClientSetInfoConfig setInfoConfig = ClientSetInfoConfig.withLibNameSuffix(libNameSuffix);

File: src/test/java/redis/clients/jedis/authentication/TokenBasedAuthenticationUnitTests.java
Patch:
@@ -39,7 +39,7 @@
 public class TokenBasedAuthenticationUnitTests {
 
   private HostAndPort hnp = new HostAndPort("localhost", 6379);
-  private EndpointConfig endpoint = new EndpointConfig(hnp, null, null, false);
+  private EndpointConfig endpoint = new EndpointConfig(hnp, null, null, false, null);
 
   @Test
   public void testJedisAuthXManagerInstance() {

File: src/test/java/redis/clients/jedis/commands/commandobjects/CommandObjectsBitmapCommandsTest.java
Patch:
@@ -6,6 +6,7 @@
 
 import java.util.List;
 
+import io.redis.test.annotations.SinceRedisVersion;
 import org.junit.Test;
 import redis.clients.jedis.RedisProtocol;
 import redis.clients.jedis.args.BitCountOption;
@@ -52,6 +53,7 @@ public void testSetbitAndGetbitBinary() {
   }
 
   @Test
+  @SinceRedisVersion(value = "7.0.0", message = "Starting with Redis version 7.0.0: Added the BYTE|BIT option.")
   public void testBitcount() {
     String key = "bitcountKey";
     byte[] keyBytes = key.getBytes();
@@ -82,6 +84,7 @@ public void testBitcount() {
   }
 
   @Test
+  @SinceRedisVersion(value = "7.0.0", message="Starting with Redis version 7.0.0: Added the BYTE|BIT option.")
   public void testBitpos() {
     String key = "bitposKey";
     byte[] keyBytes = key.getBytes();

File: src/test/java/redis/clients/jedis/commands/commandobjects/CommandObjectsListCommandsTest.java
Patch:
@@ -9,6 +9,7 @@
 
 import java.util.List;
 
+import io.redis.test.annotations.SinceRedisVersion;
 import org.junit.Test;
 import redis.clients.jedis.RedisProtocol;
 import redis.clients.jedis.args.ListDirection;
@@ -608,6 +609,7 @@ public void testLmoveAndBlmoveBinary() {
   }
 
   @Test
+  @SinceRedisVersion(value = "7.0.0")
   public void testLmpopAndBlmpop() {
     String key1 = "list1";
     String key2 = "list2";
@@ -635,6 +637,7 @@ public void testLmpopAndBlmpop() {
   }
 
   @Test
+  @SinceRedisVersion(value = "7.0.0")
   public void testLmpopAndBlmpopBinary() {
     byte[] key1 = "list1".getBytes();
     byte[] key2 = "list2".getBytes();

File: src/test/java/redis/clients/jedis/commands/commandobjects/CommandObjectsSetCommandsTest.java
Patch:
@@ -13,6 +13,7 @@
 import java.util.List;
 import java.util.Set;
 
+import io.redis.test.annotations.SinceRedisVersion;
 import org.junit.Test;
 import redis.clients.jedis.RedisProtocol;
 import redis.clients.jedis.params.ScanParams;
@@ -228,6 +229,7 @@ public void testSdiffstoreBinary() {
   }
 
   @Test
+  @SinceRedisVersion(value = "7.0.0")
   public void testSinterAndSinterCard() {
     String key1 = "testSetInter1";
     String key2 = "testSetInter2";

File: src/test/java/redis/clients/jedis/commands/commandobjects/CommandObjectsStringCommandsTest.java
Patch:
@@ -10,6 +10,7 @@
 
 import java.util.List;
 
+import io.redis.test.annotations.SinceRedisVersion;
 import org.junit.Test;
 import redis.clients.jedis.RedisProtocol;
 import redis.clients.jedis.params.GetExParams;
@@ -298,6 +299,7 @@ public void testIncrementOperationsBinary() {
   }
 
   @Test
+  @SinceRedisVersion(value = "7.0.0")
   public void testLcs() {
     String keyA = "keyA";
     String keyB = "keyB";
@@ -338,6 +340,7 @@ public void testLcs() {
   }
 
   @Test
+  @SinceRedisVersion(value = "7.0.0")
   public void testLcsBinary() {
     byte[] keyA = "keyA".getBytes();
     byte[] keyB = "keyB".getBytes();

File: src/test/java/redis/clients/jedis/commands/jedis/ClusterScriptingCommandsTest.java
Patch:
@@ -10,6 +10,8 @@
 import java.util.Collections;
 import java.util.List;
 import java.util.Map;
+
+import io.redis.test.annotations.SinceRedisVersion;
 import org.junit.Test;
 
 import redis.clients.jedis.HostAndPort;
@@ -115,6 +117,7 @@ public void broadcast() {
   }
 
   @Test
+  @SinceRedisVersion("7.0.0")
   public void broadcastWithError() {
 
     JedisBroadcastException error = assertThrows(JedisBroadcastException.class, () -> cluster.functionDelete("xyz"));

File: src/test/java/redis/clients/jedis/commands/jedis/ClusterShardedPublishSubscribeCommandsTest.java
Patch:
@@ -7,6 +7,8 @@
 
 import java.util.HashMap;
 import java.util.Map;
+
+import io.redis.test.annotations.SinceRedisVersion;
 import org.junit.Test;
 
 import redis.clients.jedis.BinaryJedisShardedPubSub;
@@ -16,6 +18,7 @@
 import redis.clients.jedis.util.JedisClusterCRC16;
 import redis.clients.jedis.util.SafeEncoder;
 
+@SinceRedisVersion(value = "7.0.0", message = "Sharded Pub/Sub")
 public class ClusterShardedPublishSubscribeCommandsTest extends ClusterJedisCommandsTestBase {
 
   private void publishOne(final String channel, final String message) {

File: src/test/java/redis/clients/jedis/commands/jedis/GeoCommandsTest.java
Patch:
@@ -19,6 +19,7 @@
 import redis.clients.jedis.params.GeoAddParams;
 import redis.clients.jedis.params.GeoRadiusParam;
 import redis.clients.jedis.params.GeoRadiusStoreParam;
+import redis.clients.jedis.util.GeoCoordinateMatcher;
 import redis.clients.jedis.util.SafeEncoder;
 
 @RunWith(Parameterized.class)
@@ -532,7 +533,8 @@ public void geosearch() {
     assertEquals(1, members.size());
     assertEquals("place1", members.get(0).getMemberByString());
     assertEquals(0.0881, members.get(0).getDistance(), 10);
-    assertEquals(new GeoCoordinate(2.19093829393386841, 41.43379028184083523), members.get(0).getCoordinate());
+    assertThat(members.get(0).getCoordinate(),
+        GeoCoordinateMatcher.atCoordinates(2.19093829393386841, 41.43379028184083523));
   }
 
   @Test

File: src/test/java/redis/clients/jedis/commands/jedis/ListCommandsTest.java
Patch:
@@ -12,6 +12,7 @@
 import java.util.Collections;
 import java.util.List;
 
+import io.redis.test.annotations.SinceRedisVersion;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.Parameterized;
@@ -864,6 +865,7 @@ public void blmove() {
   }
 
   @Test
+  @SinceRedisVersion("7.0.0")
   public void lmpop() {
     String mylist1 = "mylist1";
     String mylist2 = "mylist2";
@@ -889,6 +891,7 @@ public void lmpop() {
   }
 
   @Test
+  @SinceRedisVersion("7.0.0")
   public void blmpopSimple() {
     String mylist1 = "mylist1";
     String mylist2 = "mylist2";

File: src/test/java/redis/clients/jedis/commands/jedis/SetCommandsTest.java
Patch:
@@ -19,6 +19,7 @@
 import java.util.List;
 import java.util.Set;
 
+import io.redis.test.annotations.SinceRedisVersion;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.Parameterized;
@@ -364,6 +365,7 @@ public void sinterstore() {
   }
 
   @Test
+  @SinceRedisVersion("7.0.0")
   public void sintercard() {
     jedis.sadd("foo", "a");
     jedis.sadd("foo", "b");

File: src/test/java/redis/clients/jedis/commands/jedis/SortingCommandsTest.java
Patch:
@@ -6,6 +6,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
+import io.redis.test.annotations.EnabledOnCommand;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.Parameterized;
@@ -324,6 +325,7 @@ public void sortStore() {
   }
 
   @Test
+  @EnabledOnCommand("SORT_RO")
   public void sort_ro() {
     jedis.rpush("foo", "1", "3", "2");
 

File: src/test/java/redis/clients/jedis/commands/jedis/StringValuesCommandsTest.java
Patch:
@@ -6,6 +6,8 @@
 
 import java.util.ArrayList;
 import java.util.List;
+
+import io.redis.test.annotations.SinceRedisVersion;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.Parameterized;
@@ -247,6 +249,7 @@ public void psetex() {
   }
 
   @Test
+  @SinceRedisVersion("7.0.0")
   public void lcs() {
     jedis.mset("key1", "ohmytext", "key2", "mynewtext");
 

File: src/test/java/redis/clients/jedis/commands/unified/ListCommandsTestBase.java
Patch:
@@ -12,6 +12,7 @@
 import java.util.Collections;
 import java.util.List;
 
+import io.redis.test.annotations.SinceRedisVersion;
 import org.junit.Test;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -848,6 +849,7 @@ public void blmove() {
   }
 
   @Test
+  @SinceRedisVersion(value="7.0.0")
   public void lmpop() {
     String mylist1 = "mylist1";
     String mylist2 = "mylist2";
@@ -873,6 +875,7 @@ public void lmpop() {
   }
 
   @Test
+  @SinceRedisVersion(value="7.0.0")
   public void blmpopSimple() {
     String mylist1 = "mylist1";
     String mylist2 = "mylist2";

File: src/test/java/redis/clients/jedis/commands/unified/SetCommandsTestBase.java
Patch:
@@ -19,6 +19,7 @@
 import java.util.List;
 import java.util.Set;
 
+import io.redis.test.annotations.SinceRedisVersion;
 import org.junit.Test;
 
 import redis.clients.jedis.RedisProtocol;
@@ -361,6 +362,7 @@ public void sinterstore() {
   }
 
   @Test
+  @SinceRedisVersion(value="7.0.0")
   public void sintercard() {
     jedis.sadd("foo", "a");
     jedis.sadd("foo", "b");

File: src/test/java/redis/clients/jedis/commands/unified/StringValuesCommandsTestBase.java
Patch:
@@ -6,6 +6,8 @@
 
 import java.util.ArrayList;
 import java.util.List;
+
+import io.redis.test.annotations.SinceRedisVersion;
 import org.junit.Test;
 
 import redis.clients.jedis.RedisProtocol;
@@ -244,6 +246,7 @@ public void psetex() {
   }
 
   @Test
+  @SinceRedisVersion(value="7.0.0")
   public void lcs() {
     jedis.mset("key1", "ohmytext", "key2", "mynewtext");
 

File: src/test/java/redis/clients/jedis/commands/unified/pipeline/ListPipelineCommandsTest.java
Patch:
@@ -9,6 +9,7 @@
 
 import java.util.List;
 
+import io.redis.test.annotations.SinceRedisVersion;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.Parameterized;
@@ -954,6 +955,7 @@ public void blmove() {
   }
 
   @Test
+  @SinceRedisVersion(value="7.0.0")
   public void lmpop() {
     String mylist1 = "mylist1";
     String mylist2 = "mylist2";
@@ -982,6 +984,7 @@ public void lmpop() {
   }
 
   @Test
+  @SinceRedisVersion(value="7.0.0")
   public void blmpopSimple() {
     String mylist1 = "mylist1";
     String mylist2 = "mylist2";

File: src/test/java/redis/clients/jedis/commands/unified/pipeline/SetPipelineCommandsTest.java
Patch:
@@ -20,6 +20,7 @@
 import java.util.List;
 import java.util.Set;
 
+import io.redis.test.annotations.SinceRedisVersion;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.Parameterized;
@@ -378,6 +379,7 @@ public void sinterstore() {
   }
 
   @Test
+  @SinceRedisVersion(value="7.0.0")
   public void sintercard() {
     pipe.sadd("foo", "a");
     pipe.sadd("foo", "b");

File: src/test/java/redis/clients/jedis/commands/unified/pooled/PooledCommandsTestHelper.java
Patch:
@@ -4,7 +4,7 @@
 
 public class PooledCommandsTestHelper {
 
-  private static final EndpointConfig nodeInfo = HostAndPorts.getRedisEndpoint("standalone0");
+  public static final EndpointConfig nodeInfo = HostAndPorts.getRedisEndpoint("standalone0");
 
   public static JedisPooled getPooled(RedisProtocol redisProtocol) {
     return new JedisPooled(nodeInfo.getHostAndPort(), nodeInfo.getClientConfigBuilder()

File: src/test/java/redis/clients/jedis/modules/search/AggregationTest.java
Patch:
@@ -6,6 +6,7 @@
 import static org.junit.Assert.assertThat;
 import static org.junit.Assert.fail;
 
+import io.redis.test.annotations.SinceRedisVersion;
 import org.hamcrest.Matchers;
 import org.junit.BeforeClass;
 import org.junit.Test;
@@ -201,6 +202,7 @@ public void testAggregationBuilderVerbatim() {
   }
 
   @Test
+  @SinceRedisVersion(value="7.4.0", message="ADDSCORES")
   public void testAggregationBuilderAddScores() {
     Schema sc = new Schema();
     sc.addSortableTextField("name", 1.0);

File: src/test/java/redis/clients/jedis/authentication/RedisEntraIDIntegrationTests.java
Patch:
@@ -323,7 +323,7 @@ public void connectionAuthWithExpiredTokenTest() {
 
   // T.3.4
   // Verify handling of reconnection and re-authentication after a network partition. (use cached token)
-  // @Test
+  @Test
   public void networkPartitionEvictionTest() {
     TokenAuthConfig tokenAuthConfig = EntraIDTokenAuthConfigBuilder.builder()
         .clientId(testCtx.getClientId()).secret(testCtx.getClientSecret())

File: src/main/java/redis/clients/jedis/JedisClusterInfoCache.java
Patch:
@@ -103,6 +103,9 @@ public JedisClusterInfoCache(final JedisClientConfig clientConfig, Cache clientS
     this.clientConfig = clientConfig;
     this.clientSideCache = clientSideCache;
     this.startNodes = startNodes;
+    if (clientConfig.getAuthXManager() != null) {
+      clientConfig.getAuthXManager().start();
+    }
     if (topologyRefreshPeriod != null) {
       logger.info("Cluster topology refresh start, period: {}, startNodes: {}", topologyRefreshPeriod, startNodes);
       topologyRefreshExecutor = Executors.newSingleThreadScheduledExecutor();

File: src/main/java/redis/clients/jedis/JedisPooled.java
Patch:
@@ -295,7 +295,7 @@ public JedisPooled(final GenericObjectPoolConfig<Connection> poolConfig, final S
       final int connectionTimeout, final int soTimeout, final int infiniteSoTimeout,
       final String user, final String password, final int database, final String clientName) {
     this(new HostAndPort(host, port), DefaultJedisClientConfig.create(connectionTimeout, soTimeout,
-        infiniteSoTimeout, user, password, database, clientName, false, null, null, null, null),
+        infiniteSoTimeout, user, password, database, clientName, false, null, null, null, null, null),
         poolConfig);
   }
 
@@ -306,7 +306,7 @@ public JedisPooled(final GenericObjectPoolConfig<Connection> poolConfig, final S
       final HostnameVerifier hostnameVerifier) {
     this(new HostAndPort(host, port), DefaultJedisClientConfig.create(connectionTimeout, soTimeout,
         infiniteSoTimeout, user, password, database, clientName, ssl, sslSocketFactory, sslParameters,
-        hostnameVerifier, null), poolConfig);
+        hostnameVerifier, null, null), poolConfig);
   }
 
   public JedisPooled(final URI uri) {

File: src/main/java/redis/clients/jedis/Jedis.java
Patch:
@@ -8250,7 +8250,7 @@ public List<KeyValue<String, List<String>>> commandGetKeysAndFlags(String... com
   public Map<String, CommandInfo> commandInfo(String... commands) {
     checkIsInMultiOrPipeline();
     connection.sendCommand(COMMAND, joinParameters(Keyword.INFO.name(), commands));
-    return BuilderFactory.COMMAND_INFO_RESPONSE.build(connection.getOne());
+    return CommandInfo.COMMAND_INFO_RESPONSE.build(connection.getOne());
   }
 
   public List<String> commandList() {

File: src/test/java/redis/clients/jedis/util/AssertUtil.java
Patch:
@@ -7,10 +7,8 @@
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.List;
-import java.util.Map;
 import java.util.Objects;
 import java.util.Set;
-
 import org.junit.ComparisonFailure;
 import redis.clients.jedis.RedisProtocol;
 

File: src/main/java/redis/clients/jedis/CommandObjects.java
Patch:
@@ -2006,7 +2006,7 @@ public final CommandObject<List<Tuple>> zdiffWithScores(byte[]... keys) {
   }
 
   /**
-   * @deprecated Use {@link #zdiffstore(byte..., byte[]...)}.
+   * @deprecated Use {@link #zdiffstore(byte[], byte[][])}.
    */
   @Deprecated
   public final CommandObject<Long> zdiffStore(byte[] dstkey, byte[]... keys) {

File: src/main/java/redis/clients/jedis/DefaultJedisClientConfig.java
Patch:
@@ -175,7 +175,8 @@ public DefaultJedisClientConfig build() {
     }
 
     /**
-     * Shortcut to {@link Builder#protocol(redis.clients.jedis.RedisProtocol)} with {@link RedisProtocol#RESP3}.
+     * Shortcut to {@link redis.clients.jedis.DefaultJedisClientConfig.Builder#protocol(RedisProtocol)} with
+     * {@link RedisProtocol#RESP3}.
      */
     public Builder resp3() {
       return protocol(RedisProtocol.RESP3);

File: src/main/java/redis/clients/jedis/commands/FunctionBinaryCommands.java
Patch:
@@ -14,7 +14,7 @@ public interface FunctionBinaryCommands {
    * @param name
    * @param keys
    * @param args
-   * @return 
+   * @return value depends on the function that was executed
    */
   Object fcall(byte[] name, List<byte[]> keys, List<byte[]> args);
 

File: src/main/java/redis/clients/jedis/commands/SortedSetPipelineBinaryCommands.java
Patch:
@@ -2,7 +2,6 @@
 
 import java.util.List;
 import java.util.Map;
-import java.util.Set;
 
 import redis.clients.jedis.Response;
 import redis.clients.jedis.args.SortedSetOption;
@@ -140,7 +139,7 @@ default Response<ScanResult<Tuple>> zscan(byte[] key, byte[] cursor) {
   Response<List<Tuple>> zdiffWithScores(byte[]... keys);
 
   /**
-   * @deprecated Use {@link #zdiffstore(byte..., byte[]...)}.
+   * @deprecated Use {@link #zdiffstore(byte[], byte[][])}.
    */
   @Deprecated
   Response<Long> zdiffStore(byte[] dstkey, byte[]... keys);

File: src/main/java/redis/clients/jedis/DefaultJedisSocketFactory.java
Patch:
@@ -94,11 +94,13 @@ public Socket createSocket() throws JedisConnectionException {
         if (null == _sslSocketFactory) {
           _sslSocketFactory = (SSLSocketFactory) SSLSocketFactory.getDefault();
         }
+        Socket plainSocket = socket;
         socket = _sslSocketFactory.createSocket(socket, _hostAndPort.getHost(), _hostAndPort.getPort(), true);
 
         if (null != sslParameters) {
           ((SSLSocket) socket).setSSLParameters(sslParameters);
         }
+        socket = new SSLSocketWrapper((SSLSocket) socket, plainSocket);
 
         if (null != hostnameVerifier
             && !hostnameVerifier.verify(_hostAndPort.getHost(), ((SSLSocket) socket).getSession())) {

File: src/main/java/redis/clients/jedis/JedisFactory.java
Patch:
@@ -66,7 +66,7 @@ protected JedisFactory(final String host, final int port, final int connectionTi
   }
 
   protected JedisFactory(final HostAndPort hostAndPort, final JedisClientConfig clientConfig) {
-    this.clientConfig = DefaultJedisClientConfig.copyConfig(clientConfig);
+    this.clientConfig = clientConfig;
     this.jedisSocketFactory = new DefaultJedisSocketFactory(hostAndPort, this.clientConfig);
   }
 
@@ -83,7 +83,7 @@ protected JedisFactory(final String host, final int port, final int connectionTi
   }
 
   protected JedisFactory(final JedisSocketFactory jedisSocketFactory, final JedisClientConfig clientConfig) {
-    this.clientConfig = DefaultJedisClientConfig.copyConfig(clientConfig);
+    this.clientConfig = clientConfig;
     this.jedisSocketFactory = jedisSocketFactory;
   }
 

File: src/main/java/redis/clients/jedis/annots/Experimental.java
Patch:
@@ -13,5 +13,5 @@
  * If a type is marked with this annotation, all its members are considered experimental.
  */
 @Documented
-@Target({ElementType.TYPE, ElementType.METHOD, ElementType.FIELD, ElementType.CONSTRUCTOR})
+@Target({ElementType.PACKAGE, ElementType.TYPE, ElementType.METHOD, ElementType.FIELD, ElementType.CONSTRUCTOR})
 public @interface Experimental { }

File: src/main/java/redis/clients/jedis/mcf/package-info.java
Patch:
@@ -1,4 +1,7 @@
 /**
  * This package contains the classes that are related to Active-Active cluster(s) and Multi-Cluster failover.
  */
+@Experimental
 package redis.clients.jedis.mcf;
+
+import redis.clients.jedis.annots.Experimental;
\ No newline at end of file

File: src/test/java/redis/clients/jedis/SSLJedisTest.java
Patch:
@@ -32,7 +32,7 @@ public static void prepare() {
     setupTrustStore();
   }
 
-  static void setupTrustStore() {
+  public static void setupTrustStore() {
     setJvmTrustStore("src/test/resources/truststore.jceks", "jceks");
   }
 

File: src/test/java/redis/clients/jedis/commands/jedis/TransactionCommandsTest.java
Patch:
@@ -1,8 +1,8 @@
 package redis.clients.jedis.commands.jedis;
 
 import static org.junit.Assert.*;
-
 import static org.mockito.ArgumentMatchers.any;
+
 import static redis.clients.jedis.Protocol.Command.INCR;
 import static redis.clients.jedis.Protocol.Command.GET;
 import static redis.clients.jedis.Protocol.Command.SET;

File: src/test/java/redis/clients/jedis/modules/search/SearchWithParamsTest.java
Patch:
@@ -1223,7 +1223,7 @@ public void vectorFieldParams() {
   public void float16StorageType() {
     assertOK(client.ftCreate(index,
         VectorField.builder().fieldName("v")
-            .algorithm(VectorField.VectorAlgorithm.HNSW)
+            .algorithm(VectorAlgorithm.HNSW)
             .addAttribute("TYPE", "FLOAT16")
             .addAttribute("DIM", 4)
             .addAttribute("DISTANCE_METRIC", "L2")
@@ -1234,7 +1234,7 @@ public void float16StorageType() {
   public void bfloat16StorageType() {
     assertOK(client.ftCreate(index,
         VectorField.builder().fieldName("v")
-            .algorithm(VectorField.VectorAlgorithm.HNSW)
+            .algorithm(VectorAlgorithm.HNSW)
             .addAttribute("TYPE", "BFLOAT16")
             .addAttribute("DIM", 4)
             .addAttribute("DISTANCE_METRIC", "L2")

File: src/main/java/redis/clients/jedis/AbstractTransaction.java
Patch:
@@ -5,6 +5,7 @@
 
 public abstract class AbstractTransaction extends PipeliningBase implements Closeable {
 
+  @Deprecated
   protected AbstractTransaction() {
     super(new CommandObjects());
   }

File: src/main/java/redis/clients/jedis/ClusterCommandObjects.java
Patch:
@@ -16,7 +16,9 @@ public class ClusterCommandObjects extends CommandObjects {
 
   @Override
   protected ClusterCommandArguments commandArguments(ProtocolCommand command) {
-    return new ClusterCommandArguments(command);
+    ClusterCommandArguments comArgs = new ClusterCommandArguments(command);
+    if (keyPreProcessor != null) comArgs.setKeyArgumentPreProcessor(keyPreProcessor);
+    return comArgs;
   }
 
   private static final String CLUSTER_UNSUPPORTED_MESSAGE = "Not supported in cluster mode.";

File: src/main/java/redis/clients/jedis/ShardedCommandObjects.java
Patch:
@@ -34,7 +34,9 @@ public ShardedCommandObjects(Hashing algo, Pattern tagPattern) {
 
   @Override
   protected ShardedCommandArguments commandArguments(ProtocolCommand command) {
-    return new ShardedCommandArguments(algo, tagPattern, command);
+    ShardedCommandArguments comArgs = new ShardedCommandArguments(algo, tagPattern, command);
+    if (keyPreProcessor != null) comArgs.setKeyArgumentPreProcessor(keyPreProcessor);
+    return comArgs;
   }
 
   @Override

File: src/main/java/redis/clients/jedis/TransactionBase.java
Patch:
@@ -6,6 +6,7 @@
 @Deprecated
 public abstract class TransactionBase extends AbstractTransaction {
 
+  @Deprecated
   protected TransactionBase() {
     super();
   }

File: src/main/java/redis/clients/jedis/mcf/MultiClusterTransaction.java
Patch:
@@ -94,7 +94,7 @@ public final void multi() {
    */
   @Override
   public final String watch(String... keys) {
-    appendCommand(new CommandObject<>(new CommandArguments(WATCH).addObjects((Object[]) keys), NO_OP_BUILDER));
+    appendCommand(commandObjects.watch(keys));
     extraCommandCount.incrementAndGet();
     inWatch = true;
     return null;
@@ -106,7 +106,7 @@ public final String watch(String... keys) {
    */
   @Override
   public final String watch(byte[]... keys) {
-    appendCommand(new CommandObject<>(new CommandArguments(WATCH).addObjects((Object[]) keys), NO_OP_BUILDER));
+    appendCommand(commandObjects.watch(keys));
     extraCommandCount.incrementAndGet();
     inWatch = true;
     return null;

File: src/main/java/redis/clients/jedis/Jedis.java
Patch:
@@ -3431,7 +3431,7 @@ public String shutdownAbort() {
    * All the fields are in the form field:value
    *
    * <pre>
-   * edis_version:0.07
+   * redis_version:0.07
    * connected_clients:1
    * connected_slaves:0
    * used_memory:3187

File: src/main/java/redis/clients/jedis/Connection.java
Patch:
@@ -343,7 +343,7 @@ protected void flush() {
 
   protected Object readProtocolWithCheckingBroken() {
     if (broken) {
-      throw new JedisConnectionException("Attempting to read from a broken connection");
+      throw new JedisConnectionException("Attempting to read from a broken connection.");
     }
 
     try {

File: src/main/java/redis/clients/jedis/DefaultJedisSocketFactory.java
Patch:
@@ -60,7 +60,7 @@ private Socket connectToFirstSuccessfulHost(HostAndPort hostAndPort) throws Exce
       Collections.shuffle(hosts);
     }
 
-    JedisConnectionException jce = new JedisConnectionException("Failed to connect to any host resolved for DNS name.");
+    JedisConnectionException jce = new JedisConnectionException("Failed to connect to " + hostAndPort + ".");
     for (InetAddress host : hosts) {
       try {
         Socket socket = new Socket();

File: src/main/java/redis/clients/jedis/providers/MultiClusterPooledConnectionProvider.java
Patch:
@@ -178,7 +178,7 @@ public int incrementActiveMultiClusterIndex() {
 
                 throw new JedisConnectionException("Cluster/database endpoint could not failover since the MultiClusterClientConfig was not " +
                                                    "provided with an additional cluster/database endpoint according to its prioritized sequence. " +
-                                                   "If applicable, consider failing back OR restarting with an available cluster/database endpoint");
+                                                   "If applicable, consider failing back OR restarting with an available cluster/database endpoint.");
             }
             else activeMultiClusterIndex++;
 

File: src/main/java/redis/clients/jedis/Protocol.java
Patch:
@@ -254,6 +254,7 @@ public static enum Command implements ProtocolCommand {
     STRLEN, APPEND, SUBSTR, // <-- string
     SETBIT, GETBIT, BITPOS, SETRANGE, GETRANGE, BITCOUNT, BITOP, BITFIELD, BITFIELD_RO, // <-- bit (string)
     HSET, HGET, HSETNX, HMSET, HMGET, HINCRBY, HEXISTS, HDEL, HLEN, HKEYS, HVALS, HGETALL, HSTRLEN,
+    HEXPIRE, HPEXPIRE, HEXPIREAT, HPEXPIREAT, HTTL, HPTTL, HEXPIRETIME, HPEXPIRETIME, HPERSIST,
     HRANDFIELD, HINCRBYFLOAT, // <-- hash
     RPUSH, LPUSH, LLEN, LRANGE, LTRIM, LINDEX, LSET, LREM, LPOP, RPOP, BLPOP, BRPOP, LINSERT, LPOS,
     RPOPLPUSH, BRPOPLPUSH, BLMOVE, LMOVE, LMPOP, BLMPOP, LPUSHX, RPUSHX, // <-- list
@@ -299,8 +300,8 @@ public static enum Keyword implements Rawable {
     REV, WITHCOORD, WITHDIST, WITHHASH, ANY, FROMMEMBER, FROMLONLAT, BYRADIUS, BYBOX, BYLEX, BYSCORE,
     STOREDIST, TO, FORCE, TIMEOUT, DB, UNLOAD, ABORT, IDX, MINMATCHLEN, WITHMATCHLEN, FULL,
     DELETE, LIBRARYNAME, WITHCODE, DESCRIPTION, GETKEYS, GETKEYSANDFLAGS, DOCS, FILTERBY, DUMP,
-    MODULE, ACLCAT, PATTERN, DOCTOR, LATEST, HISTORY, USAGE, SAMPLES, PURGE, STATS, LOADEX, CONFIG, ARGS, RANK,
-    NOW, VERSION, ADDR, SKIPME, USER, LADDR,
+    MODULE, ACLCAT, PATTERN, DOCTOR, LATEST, HISTORY, USAGE, SAMPLES, PURGE, STATS, LOADEX, CONFIG,
+    ARGS, RANK, NOW, VERSION, ADDR, SKIPME, USER, LADDR, FIELDS,
     CHANNELS, NUMPAT, NUMSUB, SHARDCHANNELS, SHARDNUMSUB, NOVALUES, MAXAGE;
 
     private final byte[] raw;

File: src/test/java/redis/clients/jedis/ACLJedisSentinelPoolTest.java
Patch:
@@ -24,15 +24,15 @@ public class ACLJedisSentinelPoolTest {
 
   private static final String MASTER_NAME = "aclmaster";
 
-  //protected static HostAndPort master = HostAndPortUtil.getRedisServers().get(8);
   protected static HostAndPort sentinel1 = HostAndPorts.getSentinelServers().get(4);
 
   protected Set<HostAndPort> sentinels = new HashSet<>();
 
   @BeforeClass
   public static void prepare() throws Exception {
+    EndpointConfig endpoint = HostAndPorts.getRedisEndpoint("standalone2-primary");
     org.junit.Assume.assumeTrue("Not running ACL test on this version of Redis",
-        RedisVersionUtil.checkRedisMajorVersionNumber(6));
+        RedisVersionUtil.checkRedisMajorVersionNumber(6, endpoint));
   }
 
   @Before

File: src/test/java/redis/clients/jedis/JedisSentinelPoolTest.java
Patch:
@@ -18,9 +18,6 @@ public class JedisSentinelPoolTest {
 
   private static final String MASTER_NAME = "mymaster";
 
-  //protected static HostAndPort master = HostAndPorts.getRedisServers().get(2);
-  //protected static HostAndPort slave1 = HostAndPorts.getRedisServers().get(3);
-
   protected static final HostAndPort sentinel1 = HostAndPorts.getSentinelServers().get(1);
   protected static final HostAndPort sentinel2 = HostAndPorts.getSentinelServers().get(3);
 

File: src/test/java/redis/clients/jedis/JedisSentinelTest.java
Patch:
@@ -24,12 +24,10 @@ public class JedisSentinelTest {
   private static final String FAILOVER_MASTER_NAME = "mymasterfailover";
   private static final String MASTER_IP = "127.0.0.1";
 
-  protected static HostAndPort master = HostAndPorts.getRedisServers().get(0);
-  protected static HostAndPort slave = HostAndPorts.getRedisServers().get(4);
+  protected static EndpointConfig master = HostAndPorts.getRedisEndpoint("standalone0");
   protected static HostAndPort sentinel = HostAndPorts.getSentinelServers().get(0);
 
   protected static HostAndPort sentinelForFailover = HostAndPorts.getSentinelServers().get(2);
-  protected static HostAndPort masterForFailover = HostAndPorts.getRedisServers().get(5);
 
   @Before
   public void setup() throws InterruptedException {

File: src/test/java/redis/clients/jedis/ManagedConnectionProviderTest.java
Patch:
@@ -14,8 +14,8 @@ public class ManagedConnectionProviderTest {
 
   @Before
   public void setUp() {
-    connection = new Connection(HostAndPorts.getRedisServers().get(0),
-        DefaultJedisClientConfig.builder().user("acljedis").password("fizzbuzz").build());
+    EndpointConfig endpoint = HostAndPorts.getRedisEndpoint("standalone0");
+    connection = new Connection(endpoint.getHostAndPort(), endpoint.getClientConfigBuilder().build());
   }
 
   @After

File: src/test/java/redis/clients/jedis/SentineledConnectionProviderTest.java
Patch:
@@ -22,9 +22,6 @@ public class SentineledConnectionProviderTest {
 
   private static final String MASTER_NAME = "mymaster";
 
-  //protected static HostAndPort master = HostAndPorts.getRedisServers().get(2);
-  //protected static HostAndPort slave1 = HostAndPorts.getRedisServers().get(3);
-
   protected static final HostAndPort sentinel1 = HostAndPorts.getSentinelServers().get(1);
   protected static final HostAndPort sentinel2 = HostAndPorts.getSentinelServers().get(3);
 

File: src/test/java/redis/clients/jedis/commands/commandobjects/CommandObjectsGenericCommandsTest.java
Patch:
@@ -1082,8 +1082,8 @@ public void testCopyToDbBinary() {
 
   private void assertKeyExists(int dstDb, String key, Object expectedValue) {
     // Cheat and use Jedis, it gives us access to any db.
-    try (Jedis jedis = new Jedis(nodeInfo)) {
-      jedis.auth("foobared");
+    try (Jedis jedis = new Jedis(endpoint.getHostAndPort())) {
+      jedis.auth(endpoint.getPassword());
       jedis.select(dstDb);
       assertThat(jedis.get(key), equalTo(expectedValue));
     }

File: src/test/java/redis/clients/jedis/commands/commandobjects/CommandObjectsStandaloneTestBase.java
Patch:
@@ -9,7 +9,7 @@
 public abstract class CommandObjectsStandaloneTestBase extends CommandObjectsTestBase {
 
   public CommandObjectsStandaloneTestBase(RedisProtocol protocol) {
-    super(protocol, HostAndPorts.getRedisServers().get(0), "foobared");
+    super(protocol, HostAndPorts.getRedisEndpoint("standalone0"));
   }
 
 }

File: src/test/java/redis/clients/jedis/commands/jedis/SentinelCommandsTest.java
Patch:
@@ -22,7 +22,9 @@ public class SentinelCommandsTest {
   protected static final String MASTER_NAME = "mymaster";
 
   protected static final List<HostAndPort> nodes =
-      Arrays.asList(HostAndPorts.getRedisServers().get(2), HostAndPorts.getRedisServers().get(3));
+      Arrays.asList(
+          HostAndPorts.getRedisEndpoint("standalone2-primary").getHostAndPort(),
+          HostAndPorts.getRedisEndpoint("standalone3-replica-of-standalone2").getHostAndPort());
   protected static final Set<String> nodesPorts = nodes.stream()
       .map(HostAndPort::getPort).map(String::valueOf).collect(Collectors.toSet());
 

File: src/main/java/redis/clients/jedis/JedisCluster.java
Patch:
@@ -258,11 +258,12 @@ public ClusterPipeline pipelined() {
   }
 
   /**
+   * @param doMulti param
    * @return nothing
    * @throws UnsupportedOperationException
    */
   @Override
-  public Transaction multi() {
+  public AbstractTransaction transaction(boolean doMulti) {
     throw new UnsupportedOperationException();
   }
 }

File: src/main/java/redis/clients/jedis/JedisSharding.java
Patch:
@@ -59,11 +59,12 @@ public ShardedPipeline pipelined() {
   }
 
   /**
+   * @param doMulti param
    * @return nothing
    * @throws UnsupportedOperationException
    */
   @Override
-  public Transaction multi() {
+  public AbstractTransaction transaction(boolean doMulti) {
     throw new UnsupportedOperationException();
   }
 }

File: src/main/java/redis/clients/jedis/UnifiedJedis.java
Patch:
@@ -10,6 +10,7 @@
 import org.json.JSONArray;
 
 import redis.clients.jedis.annots.Experimental;
+import redis.clients.jedis.annots.VisibleForTesting;
 import redis.clients.jedis.args.*;
 import redis.clients.jedis.bloom.*;
 import redis.clients.jedis.commands.JedisCommands;
@@ -213,7 +214,8 @@ private UnifiedJedis(CommandExecutor executor, ConnectionProvider provider) {
   }
 
   // Uses a fetched connection to process protocol. Should be avoided if possible.
-  private UnifiedJedis(CommandExecutor executor, ConnectionProvider provider, CommandObjects commandObjects) {
+  @VisibleForTesting
+  public UnifiedJedis(CommandExecutor executor, ConnectionProvider provider, CommandObjects commandObjects) {
     this(executor, provider, commandObjects, null);
     if (this.provider != null) {
       try (Connection conn = this.provider.getConnection()) {

File: src/main/java/redis/clients/jedis/UnifiedJedis.java
Patch:
@@ -457,7 +457,7 @@ public long pexpireAt(byte[] key, long millisecondsTimestamp) {
 
   @Override
   public long pexpireAt(byte[] key, long millisecondsTimestamp, ExpiryOption expiryOption) {
-    return executeCommand(commandObjects.expireAt(key, millisecondsTimestamp, expiryOption));
+    return executeCommand(commandObjects.pexpireAt(key, millisecondsTimestamp, expiryOption));
   }
 
   @Override

File: src/test/java/redis/clients/jedis/commands/jedis/SlowlogCommandsTest.java
Patch:
@@ -116,7 +116,7 @@ public void slowlogBinaryObjectDetails() {
     List<Object> log = (List<Object>) logs.get(0);
     assertThat((Long) log.get(0), Matchers.greaterThan(0L));
     assertThat((Long) log.get(1), Matchers.greaterThan(0L));
-    assertThat((Long) log.get(2), Matchers.greaterThan(0L));
+    assertThat((Long) log.get(2), Matchers.greaterThanOrEqualTo(0L));
     List<Object> args = (List<Object>) log.get(3);
     assertEquals(4, args.size());
     assertArrayEquals(Protocol.Command.CONFIG.getRaw(), (byte[]) args.get(0));

File: src/main/java/redis/clients/jedis/PipeliningBase.java
Patch:
@@ -2088,7 +2088,7 @@ public Response<Long> expireAt(byte[] key, long unixTime) {
 
   @Override
   public Response<Long> expireAt(byte[] key, long unixTime, ExpiryOption expiryOption) {
-    return appendCommand(commandObjects.expireAt(key, unixTime));
+    return appendCommand(commandObjects.expireAt(key, unixTime, expiryOption));
   }
 
   @Override

File: src/main/java/redis/clients/jedis/PipeliningBase.java
Patch:
@@ -786,7 +786,7 @@ public Response<Set<String>> sdiff(String... keys) {
   }
 
   @Override
-  public Response<Long> sdiffStore(String dstKey, String... keys) {
+  public Response<Long> sdiffstore(String dstKey, String... keys) {
     return appendCommand(commandObjects.sdiffstore(dstKey, keys));
   }
 

File: src/test/java/redis/clients/jedis/ClusterPipeliningTest.java
Patch:
@@ -527,7 +527,8 @@ public void clusterPipelineSet() {
     Response<Long> r1 = p.sadd("my{set}", "hello", "hello", "world", "foo", "bar");
     p.sadd("mynew{set}", "hello", "hello", "world");
     Response<Set<String>> r2 = p.sdiff("my{set}", "mynew{set}");
-    Response<Long> r3 = p.sdiffStore("diffset{set}", "my{set}", "mynew{set}");
+    Response<Long> r3deprecated = p.sdiffStore("diffset{set}deprecated", "my{set}", "mynew{set}");
+    Response<Long> r3 = p.sdiffstore("diffset{set}", "my{set}", "mynew{set}");
     Response<Set<String>> r4 = p.smembers("diffset{set}");
     Response<Set<String>> r5 = p.sinter("my{set}", "mynew{set}");
     Response<Long> r6 = p.sinterstore("interset{set}", "my{set}", "mynew{set}");
@@ -547,6 +548,7 @@ public void clusterPipelineSet() {
     p.sync();
     assertEquals(Long.valueOf(4), r1.get());
     assertEquals(diff, r2.get());
+    assertEquals(Long.valueOf(diff.size()), r3deprecated.get());
     assertEquals(Long.valueOf(diff.size()), r3.get());
     assertEquals(diff, r4.get());
     assertEquals(inter, r5.get());

File: src/test/java/redis/clients/jedis/JedisShardedPubSubBaseTest.java
Patch:
@@ -50,7 +50,7 @@ protected String encode(byte[] raw) {
         });
         thread.start();
 
-        assertTrue(countDownLatch.await(10, TimeUnit.MILLISECONDS));
+        assertTrue(countDownLatch.await(20, TimeUnit.MILLISECONDS));
 
     }
 }
\ No newline at end of file

File: src/test/java/redis/clients/jedis/commands/unified/cluster/ClusterCommandsTestHelper.java
Patch:
@@ -6,15 +6,15 @@
 import redis.clients.jedis.HostAndPorts;
 import redis.clients.jedis.Jedis;
 import redis.clients.jedis.JedisCluster;
-import redis.clients.jedis.util.RedisProtocolUtil;
+import redis.clients.jedis.RedisProtocol;
 
 public class ClusterCommandsTestHelper {
 
-  static JedisCluster getCleanCluster() {
+  static JedisCluster getCleanCluster(RedisProtocol protocol) {
     clearClusterData();
     return new JedisCluster(
         Collections.singleton(HostAndPorts.getStableClusterServers().get(0)),
-        DefaultJedisClientConfig.builder().password("cluster").protocol(RedisProtocolUtil.getRedisProtocol()).build());
+        DefaultJedisClientConfig.builder().password("cluster").protocol(protocol).build());
   }
 
   static void clearClusterData() {

File: src/main/java/redis/clients/jedis/Protocol.java
Patch:
@@ -301,7 +301,7 @@ public static enum Keyword implements Rawable {
     DELETE, LIBRARYNAME, WITHCODE, DESCRIPTION, GETKEYS, GETKEYSANDFLAGS, DOCS, FILTERBY, DUMP,
     MODULE, ACLCAT, PATTERN, DOCTOR, LATEST, HISTORY, USAGE, SAMPLES, PURGE, STATS, LOADEX, CONFIG, ARGS, RANK,
     NOW, VERSION, ADDR, SKIPME, USER, LADDR,
-    CHANNELS, NUMPAT, NUMSUB, SHARDCHANNELS, SHARDNUMSUB;
+    CHANNELS, NUMPAT, NUMSUB, SHARDCHANNELS, SHARDNUMSUB, NOVALUES;
 
     private final byte[] raw;
 

File: src/main/java/redis/clients/jedis/JedisPubSubBase.java
Patch:
@@ -172,7 +172,7 @@ private void process() {
       } else {
         throw new JedisException("Unknown message type: " + reply);
       }
-    } while (isSubscribed());
+    } while (!Thread.currentThread().isInterrupted() && isSubscribed());
 
 //    /* Invalidate instance since this thread is no longer listening */
 //    this.client = null;

File: src/main/java/redis/clients/jedis/JedisShardedPubSubBase.java
Patch:
@@ -99,7 +99,7 @@ private void process() {
       } else {
         throw new JedisException("Unknown message type: " + reply);
       }
-    } while (isSubscribed());
+    } while (!Thread.currentThread().isInterrupted() && isSubscribed());
 
 //    /* Invalidate instance since this thread is no longer listening */
 //    this.client = null;

File: src/main/java/redis/clients/jedis/mcf/CircuitBreakerCommandExecutor.java
Patch:
@@ -32,8 +32,8 @@ public <T> T executeCommand(CommandObject<T> commandObject) {
 
         supplier.withRetry(cluster.getRetry());
         supplier.withCircuitBreaker(cluster.getCircuitBreaker());
-        supplier.withFallback(defaultCircuitBreakerFallbackException,
-                              e -> this.handleClusterFailover(commandObject, cluster.getCircuitBreaker()));
+        supplier.withFallback(provider.getFallbackExceptionList(),
+                e -> this.handleClusterFailover(commandObject, cluster.getCircuitBreaker()));
 
         return supplier.decorate().get();
     }

File: src/main/java/redis/clients/jedis/mcf/CircuitBreakerFailoverConnectionProvider.java
Patch:
@@ -26,8 +26,8 @@ public Connection getConnection() {
 
         supplier.withRetry(cluster.getRetry());
         supplier.withCircuitBreaker(cluster.getCircuitBreaker());
-        supplier.withFallback(defaultCircuitBreakerFallbackException,
-                              e -> this.handleClusterFailover(cluster.getCircuitBreaker()));
+        supplier.withFallback(provider.getFallbackExceptionList(),
+                e -> this.handleClusterFailover(cluster.getCircuitBreaker()));
 
         return supplier.decorate().get();
     }

File: src/main/java/redis/clients/jedis/Protocol.java
Patch:
@@ -357,7 +357,7 @@ public static enum ClusterKeyword implements Rawable {
     MEET, RESET, INFO, FAILOVER, SLOTS, NODES, REPLICAS, SLAVES, MYID, ADDSLOTS, DELSLOTS,
     GETKEYSINSLOT, SETSLOT, NODE, MIGRATING, IMPORTING, STABLE, FORGET, FLUSHSLOTS, KEYSLOT,
     COUNTKEYSINSLOT, SAVECONFIG, REPLICATE, LINKS, ADDSLOTSRANGE, DELSLOTSRANGE, BUMPEPOCH,
-    MYSHARDID;
+    MYSHARDID, SHARDS;
 
     private final byte[] raw;
 

File: src/main/java/redis/clients/jedis/DefaultJedisSocketFactory.java
Patch:
@@ -70,7 +70,9 @@ private Socket connectToFirstSuccessfulHost(HostAndPort hostAndPort) throws Exce
         socket.setTcpNoDelay(true); // Socket buffer Whetherclosed, to ensure timely delivery of data
         socket.setSoLinger(true, 0); // Control calls close () method, the underlying socket is closed immediately
 
-        socket.connect(new InetSocketAddress(host.getHostAddress(), hostAndPort.getPort()), connectionTimeout);
+        // Passing 'host' directly will avoid another call to InetAddress.getByName() inside the InetSocketAddress constructor.
+        // For machines with ipv4 and ipv6, but the startNode uses ipv4 to connect, the ipv6 connection may fail.
+        socket.connect(new InetSocketAddress(host, hostAndPort.getPort()), connectionTimeout);
         return socket;
       } catch (Exception e) {
         jce.addSuppressed(e);

File: src/main/java/redis/clients/jedis/CommandObjects.java
Patch:
@@ -2845,7 +2845,8 @@ public final CommandObject<String> scriptKill(byte[] sampleKey) {
     return new CommandObject<>(commandArguments(SCRIPT).add(KILL).processKey(sampleKey), BuilderFactory.STRING);
   }
 
-  private final CommandObject<String> SLOWLOG_RESET_COMMAND_OBJECT = new CommandObject<>(commandArguments(SLOWLOG).add(RESET), BuilderFactory.STRING);
+  private final CommandObject<String> SLOWLOG_RESET_COMMAND_OBJECT
+      = new CommandObject<>(commandArguments(SLOWLOG).add(Keyword.RESET), BuilderFactory.STRING);
 
   public final CommandObject<String> slowlogReset() {
     return SLOWLOG_RESET_COMMAND_OBJECT;

File: src/main/java/redis/clients/jedis/Protocol.java
Patch:
@@ -272,7 +272,7 @@ public static enum Command implements ProtocolCommand {
     SSUBSCRIBE, SUNSUBSCRIBE, SPUBLISH, // <-- pub sub
     SAVE, BGSAVE, BGREWRITEAOF, LASTSAVE, PERSIST, ROLE, FAILOVER, SLOWLOG, OBJECT, CLIENT, TIME,
     SCAN, HSCAN, SSCAN, ZSCAN, WAIT, CLUSTER, ASKING, READONLY, READWRITE, SLAVEOF, REPLICAOF, COPY,
-    SENTINEL, MODULE, ACL, TOUCH, MEMORY, LOLWUT, COMMAND, LATENCY, WAITAOF;
+    SENTINEL, MODULE, ACL, TOUCH, MEMORY, LOLWUT, COMMAND, RESET, LATENCY, WAITAOF;
 
     private final byte[] raw;
 

File: src/main/java/redis/clients/jedis/commands/ServerCommands.java
Patch:
@@ -229,6 +229,8 @@ default void shutdown(SaveMode saveMode) throws JedisException {
 
   String lolwut(LolwutParams lolwutParams);
 
+  String reset();
+
   /**
    * The LATENCY DOCTOR command reports about different latency-related issues and advises about
    * possible remedies.

File: src/test/java/redis/clients/jedis/modules/search/UtilTest.java
Patch:
@@ -9,7 +9,7 @@ public class UtilTest {
   @Test
   public void floatArrayToByteArray() {
     float[] floats = new float[]{0.2f};
-    byte[] bytes = RediSearchUtil.ToByteArray(floats);
+    byte[] bytes = RediSearchUtil.toByteArray(floats);
     byte[] expected = new byte[]{-51, -52, 76, 62};
     Assert.assertArrayEquals(expected, bytes);
   }

File: src/main/java/redis/clients/jedis/Connection.java
Patch:
@@ -416,13 +416,13 @@ private void initializeFromClientConfig(final JedisClientConfig config) {
       }
 
       ClientSetInfoConfig setInfoConfig = config.getClientSetInfoConfig();
-      if (setInfoConfig == null) setInfoConfig = new ClientSetInfoConfig() { };
+      if (setInfoConfig == null) setInfoConfig = ClientSetInfoConfig.DEFAULT;
 
       if (!setInfoConfig.isDisabled()) {
         String libName = JedisMetaInfo.getArtifactId();
         if (libName != null && validateClientInfo(libName)) {
           String libNameSuffix = setInfoConfig.getLibNameSuffix();
-          if (libNameSuffix != null && validateClientInfo(libNameSuffix)) {
+          if (libNameSuffix != null) { // validation is moved into ClientSetInfoConfig constructor
             libName = libName + '(' + libNameSuffix + ')';
           }
           fireAndForgetMsg.add(new CommandArguments(Command.CLIENT).add(Keyword.SETINFO)

File: src/main/java/redis/clients/jedis/DefaultJedisClientConfig.java
Patch:
@@ -147,7 +147,7 @@ public static class Builder {
 
     private HostAndPortMapper hostAndPortMapper = null;
 
-    private ClientSetInfoConfig clientSetInfoConfig = null;
+    private ClientSetInfoConfig clientSetInfoConfig = ClientSetInfoConfig.DEFAULT;
 
     private Builder() {
     }

File: src/main/java/redis/clients/jedis/JedisClientConfig.java
Patch:
@@ -85,6 +85,6 @@ default HostAndPortMapper getHostAndPortMapper() {
    * @return CLIENT SETINFO config
    */
   default ClientSetInfoConfig getClientSetInfoConfig() {
-    return null;
+    return ClientSetInfoConfig.DEFAULT;
   }
 }

File: src/main/java/redis/clients/jedis/PipelineBase.java
Patch:
@@ -3607,7 +3607,7 @@ public Response<Long> jsonStrLen(String key, Path path) {
   }
 
   @Override
-  public Response<JSONArray> jsonNumIncrBy(String key, Path2 path, double value) {
+  public Response<Object> jsonNumIncrBy(String key, Path2 path, double value) {
     return appendCommand(commandObjects.jsonNumIncrBy(key, path, value));
   }
 

File: src/main/java/redis/clients/jedis/TransactionBase.java
Patch:
@@ -3775,7 +3775,7 @@ public Response<Long> jsonStrLen(String key, Path path) {
   }
 
   @Override
-  public Response<JSONArray> jsonNumIncrBy(String key, Path2 path, double value) {
+  public Response<Object> jsonNumIncrBy(String key, Path2 path, double value) {
     return appendCommand(commandObjects.jsonNumIncrBy(key, path, value));
   }
 

File: src/main/java/redis/clients/jedis/UnifiedJedis.java
Patch:
@@ -4056,7 +4056,7 @@ public Long jsonStrLen(String key, Path path) {
   }
 
   @Override
-  public JSONArray jsonNumIncrBy(String key, Path2 path, double value) {
+  public Object jsonNumIncrBy(String key, Path2 path, double value) {
     return executeCommand(commandObjects.jsonNumIncrBy(key, path, value));
   }
 

File: src/main/java/redis/clients/jedis/json/commands/RedisJsonV2Commands.java
Patch:
@@ -59,7 +59,7 @@ default List<JSONArray> jsonMGet(String... keys) {
 
   List<Long> jsonStrLen(String key, Path2 path);
 
-  JSONArray jsonNumIncrBy(String key, Path2 path, double value);
+  Object jsonNumIncrBy(String key, Path2 path, double value);
 
   List<Long> jsonArrAppend(String key, Path2 path, Object... objects);
 

File: src/main/java/redis/clients/jedis/json/commands/RedisJsonV2PipelineCommands.java
Patch:
@@ -60,7 +60,7 @@ default Response<List<JSONArray>> jsonMGet(String... keys) {
 
   Response<List<Long>> jsonStrLen(String key, Path2 path);
 
-  Response<JSONArray> jsonNumIncrBy(String key, Path2 path, double value);
+  Response<Object> jsonNumIncrBy(String key, Path2 path, double value);
 
   Response<List<Long>> jsonArrAppend(String key, Path2 path, Object... objects);
 

File: src/main/java/redis/clients/jedis/PipelineBase.java
Patch:
@@ -3299,6 +3299,7 @@ public Response<SearchResult> ftSearch(String indexName, Query query) {
   }
 
   @Override
+  @Deprecated
   public Response<SearchResult> ftSearch(byte[] indexName, Query query) {
     return appendCommand(commandObjects.ftSearch(indexName, query));
   }
@@ -3379,12 +3380,12 @@ public Response<Set<String>> ftTagVals(String indexName, String fieldName) {
   }
 
   @Override
-  public Response<Map<String, String>> ftConfigGet(String option) {
+  public Response<Map<String, Object>> ftConfigGet(String option) {
     return appendCommand(commandObjects.ftConfigGet(option));
   }
 
   @Override
-  public Response<Map<String, String>> ftConfigGet(String indexName, String option) {
+  public Response<Map<String, Object>> ftConfigGet(String indexName, String option) {
     return appendCommand(commandObjects.ftConfigGet(indexName, option));
   }
 

File: src/main/java/redis/clients/jedis/TransactionBase.java
Patch:
@@ -3466,6 +3466,7 @@ public Response<SearchResult> ftSearch(String indexName, Query query) {
   }
 
   @Override
+  @Deprecated
   public Response<SearchResult> ftSearch(byte[] indexName, Query query) {
     return appendCommand(commandObjects.ftSearch(indexName, query));
   }
@@ -3546,12 +3547,12 @@ public Response<Set<String>> ftTagVals(String indexName, String fieldName) {
   }
 
   @Override
-  public Response<Map<String, String>> ftConfigGet(String option) {
+  public Response<Map<String, Object>> ftConfigGet(String option) {
     return appendCommand(commandObjects.ftConfigGet(option));
   }
 
   @Override
-  public Response<Map<String, String>> ftConfigGet(String indexName, String option) {
+  public Response<Map<String, Object>> ftConfigGet(String indexName, String option) {
     return appendCommand(commandObjects.ftConfigGet(indexName, option));
   }
 

File: src/main/java/redis/clients/jedis/search/RediSearchPipelineCommands.java
Patch:
@@ -51,6 +51,7 @@ default Response<SearchResult> ftSearch(String indexName) {
 
   Response<SearchResult> ftSearch(String indexName, Query query);
 
+  @Deprecated
   Response<SearchResult> ftSearch(byte[] indexName, Query query);
 
   Response<String> ftExplain(String indexName, Query query);
@@ -84,9 +85,9 @@ Response<Map<String, Map<String, Double>>> ftSpellCheck(String index, String que
 
   Response<Set<String>> ftTagVals(String indexName, String fieldName);
 
-  Response<Map<String, String>> ftConfigGet(String option);
+  Response<Map<String, Object>> ftConfigGet(String option);
 
-  Response<Map<String, String>> ftConfigGet(String indexName, String option);
+  Response<Map<String, Object>> ftConfigGet(String indexName, String option);
 
   Response<String> ftConfigSet(String option, String value);
 

File: src/main/java/redis/clients/jedis/search/aggr/FtAggregateIteration.java
Patch:
@@ -4,7 +4,6 @@
 
 import redis.clients.jedis.CommandArguments;
 import redis.clients.jedis.providers.ConnectionProvider;
-import redis.clients.jedis.search.SearchBuilderFactory;
 import redis.clients.jedis.search.SearchProtocol;
 import redis.clients.jedis.util.JedisCommandIterationBase;
 
@@ -20,7 +19,7 @@ public class FtAggregateIteration extends JedisCommandIterationBase<AggregationR
    * @param aggr cursor must be set
    */
   public FtAggregateIteration(ConnectionProvider connectionProvider, String indexName, AggregationBuilder aggr) {
-    super(connectionProvider, SearchBuilderFactory.SEARCH_AGGREGATION_RESULT_WITH_CURSOR);
+    super(connectionProvider, AggregationResult.SEARCH_AGGREGATION_RESULT_WITH_CURSOR);
     if (!aggr.isWithCursor()) throw new IllegalArgumentException("cursor must be set");
     this.indexName = indexName;
     this.args = new CommandArguments(SearchProtocol.SearchCommand.AGGREGATE).add(this.indexName).addParams(aggr);

File: src/test/java/redis/clients/jedis/modules/json/JsonObjects.java
Patch:
@@ -2,7 +2,6 @@
 
 import java.time.Instant;
 import java.util.List;
-import java.util.Map;
 import java.util.Objects;
 
 public class JsonObjects {

File: src/main/java/redis/clients/jedis/commands/ClusterCommands.java
Patch:
@@ -108,15 +108,15 @@ public interface ClusterCommands {
    * Takes a list of slot ranges (specified by start and end slots) to assign to the node
    *
    * @param ranges slots range
-   * @return OK if the command was successful. Otherwise an error is returned.
+   * @return OK if the command was successful. Otherwise, an error is returned.
    */
   String clusterAddSlotsRange(int... ranges);
 
   /**
    * Takes a list of slot ranges (specified by start and end slots) to remove to the node.
    *
    * @param ranges slots range
-   * @return OK if the command was successful. Otherwise an error is returned.
+   * @return OK if the command was successful. Otherwise, an error is returned.
    */
   String clusterDelSlotsRange(int... ranges);
 }

File: src/main/java/redis/clients/jedis/commands/StreamCommands.java
Patch:
@@ -226,7 +226,7 @@ Map.Entry<StreamEntryID, List<StreamEntryID>> xautoclaimJustId(String key, Strin
    * @param key Stream name
    * @param group Group name
    * @return List of {@link StreamConsumersInfo} containing information about consumers that belong
-   * to the the group
+   * to the group
    * @deprecated Use {@link #xinfoConsumers2(java.lang.String, java.lang.String)}.
    */
   @Deprecated // keep it till at least Jedis 6/7
@@ -237,7 +237,7 @@ Map.Entry<StreamEntryID, List<StreamEntryID>> xautoclaimJustId(String key, Strin
    * @param key Stream name
    * @param group Group name
    * @return List of {@link StreamConsumerInfo} containing information about consumers that belong
-   * to the the group
+   * to the group
    */
   List<StreamConsumerInfo> xinfoConsumers2(String key, String group);
 

File: src/main/java/redis/clients/jedis/commands/StreamPipelineCommands.java
Patch:
@@ -219,7 +219,7 @@ Response<Map.Entry<StreamEntryID, List<StreamEntryID>>> xautoclaimJustId(String
    * @param key Stream name
    * @param group Group name
    * @return List of {@link StreamConsumersInfo} containing information about consumers that belong
-   * to the the group
+   * to the group
    * @deprecated Use {@link #xinfoConsumers2(java.lang.String, java.lang.String)}.
    */
   @Deprecated // keep it till at least Jedis 6/7
@@ -230,7 +230,7 @@ Response<Map.Entry<StreamEntryID, List<StreamEntryID>>> xautoclaimJustId(String
    * @param key Stream name
    * @param group Group name
    * @return List of {@link StreamConsumerInfo} containing information about consumers that belong
-   * to the the group
+   * to the group
    */
   Response<List<StreamConsumerInfo>> xinfoConsumers2(String key, String group);
 

File: src/main/java/redis/clients/jedis/graph/Record.java
Patch:
@@ -63,7 +63,7 @@ public interface Record {
    *
    * @param key header key
    *
-   * @return <code>true</code> if the the key exists
+   * @return <code>true</code> if the key exists
    */
   boolean containsKey(String key);
 

File: src/main/java/redis/clients/jedis/graph/ResultSetBuilder.java
Patch:
@@ -334,7 +334,7 @@ private static enum ScalarType {
     UNKNOWN,
     NULL,
     STRING,
-    INTEGER, // 64 bit long.
+    INTEGER, // 64-bit long.
     BOOLEAN,
     DOUBLE,
     ARRAY,

File: src/main/java/redis/clients/jedis/search/querybuilder/Node.java
Patch:
@@ -18,7 +18,7 @@ enum Parenthesize {
 
     /**
      * Never encapsulate. Note that this may be ignored if parentheses are semantically required
-     * (e.g. {@code @foo:(val1|val2)}. However something like {@code @foo:v1 @bar:v2} need not be
+     * (e.g. {@code @foo:(val1|val2)}. However, something like {@code @foo:v1 @bar:v2} need not be
      * parenthesized.
      */
 

File: src/test/java/redis/clients/jedis/ACLJedisPoolTest.java
Patch:
@@ -60,7 +60,7 @@ public void checkResourceIsClosableAndReusable() {
     config.setBlockWhenExhausted(false);
     try (JedisPool pool = new JedisPool(config, hnp.getHost(), hnp.getPort(),
         Protocol.DEFAULT_TIMEOUT, Protocol.DEFAULT_TIMEOUT, 0 /* infinite */, "acljedis",
-        "fizzbuzz", Protocol.DEFAULT_DATABASE, "closable-resuable-pool", false, null, null, null)) {
+        "fizzbuzz", Protocol.DEFAULT_DATABASE, "closable-reusable-pool", false, null, null, null)) {
 
       Jedis jedis = pool.getResource();
       jedis.set("hello", "jedis");
@@ -79,7 +79,7 @@ public void checkResourceWithConfigIsClosableAndReusable() {
     config.setMaxTotal(1);
     config.setBlockWhenExhausted(false);
     try (JedisPool pool = new JedisPool(config, hnp, DefaultJedisClientConfig.builder()
-        .user("acljedis").password("fizzbuzz").clientName("closable-resuable-pool")
+        .user("acljedis").password("fizzbuzz").clientName("closable-reusable-pool")
         .build())) {
 
       Jedis jedis = pool.getResource();
@@ -89,7 +89,7 @@ public void checkResourceWithConfigIsClosableAndReusable() {
       Jedis jedis2 = pool.getResource();
       assertEquals(jedis, jedis2);
       assertEquals("jedis", jedis2.get("hello"));
-      assertEquals("closable-resuable-pool", jedis2.clientGetname());
+      assertEquals("closable-reusable-pool", jedis2.clientGetname());
       jedis2.close();
     }
   }

File: src/test/java/redis/clients/jedis/JedisPoolTest.java
Patch:
@@ -79,7 +79,7 @@ public void checkResourceIsClosableAndReusable() {
     config.setMaxTotal(1);
     config.setBlockWhenExhausted(false);
     try (JedisPool pool = new JedisPool(config, hnp.getHost(), hnp.getPort(), 2000, "foobared", 0,
-        "closable-resuable-pool", false, null, null, null)) {
+        "closable-reusable-pool", false, null, null, null)) {
 
       Jedis jedis = pool.getResource();
       jedis.set("hello", "jedis");

File: src/main/java/redis/clients/jedis/StreamEntryID.java
Patch:
@@ -55,8 +55,8 @@ public int hashCode() {
 
   @Override
   public int compareTo(StreamEntryID other) {
-    int timeComapre = Long.compare(this.time, other.time);
-    return timeComapre != 0 ? timeComapre : Long.compare(this.sequence, other.sequence);
+    int timeCompare = Long.compare(this.time, other.time);
+    return timeCompare != 0 ? timeCompare : Long.compare(this.sequence, other.sequence);
   }
 
   public long getTime() {

File: src/main/java/redis/clients/jedis/commands/ServerCommands.java
Patch:
@@ -70,7 +70,7 @@ public interface ServerCommands {
    * The SAVE commands performs a synchronous save of the dataset producing a point in time snapshot
    * of all the data inside the Redis instance, in the form of an RDB file. You almost never want to
    * call SAVE in production environments where it will block all the other clients. Instead usually
-   * BGSAVE is used. However in case of issues preventing Redis to create the background saving
+   * BGSAVE is used. However, in case of issues preventing Redis to create the background saving
    * child (for instance errors in the fork(2) system call), the SAVE command can be a good last
    * resort to perform the dump of the latest dataset.
    * @return result of the save

File: src/main/java/redis/clients/jedis/resps/AccessControlLogEntry.java
Patch:
@@ -6,7 +6,7 @@
 
 /**
  * This class holds information about an Access Control Log entry (returned by ACL LOG command) They
- * can be access via getters. For future purpose there is also {@link #getlogEntry} method that
+ * can be accessed via getters. For future purpose there is also {@link #getlogEntry} method that
  * returns a generic {@code Map} - in case where more info is returned from a server
  */
 // TODO: remove

File: src/main/java/redis/clients/jedis/resps/StreamConsumerFullInfo.java
Patch:
@@ -7,7 +7,7 @@
 
 /**
  * This class holds information about a stream consumer with command
- * {@code xinfo stream mystream full}. They can be access via getters. There is also
+ * {@code xinfo stream mystream full}. They can be accessed via getters. There is also
  * {@link StreamConsumerFullInfo#getConsumerInfo()} method that returns a generic {@link Map} in
  * case more info are returned from the server.
  */

File: src/main/java/redis/clients/jedis/resps/StreamConsumerInfo.java
Patch:
@@ -3,7 +3,7 @@
 import java.util.Map;
 
 /**
- * This class holds information about a consumer. They can be access via getters. There is also
+ * This class holds information about a consumer. They can be accessed via getters. There is also
  * {@link StreamConsumersInfo#getConsumerInfo()}} method that returns a generic {@code Map} in case
  * more info are returned from the server.
  */

File: src/main/java/redis/clients/jedis/resps/StreamConsumersInfo.java
Patch:
@@ -3,7 +3,7 @@
 import java.util.Map;
 
 /**
- * This class holds information about a consumer. They can be access via getters. There is also
+ * This class holds information about a consumer. They can be accessed via getters. There is also
  * {@link StreamConsumersInfo#getConsumerInfo()}} method that returns a generic {@code Map} in case
  * more info are returned from the server.
  * @deprecated Use {@link StreamConsumerInfo}.

File: src/main/java/redis/clients/jedis/resps/StreamFullInfo.java
Patch:
@@ -8,7 +8,7 @@
 
 /**
  * This class holds information about a stream info with command {@code xinfo stream mystream full}.
- * They can be access via getters. There is also {@link StreamFullInfo#getStreamFullInfo()} method
+ * They can be accessed via getters. There is also {@link StreamFullInfo#getStreamFullInfo()} method
  * that returns a generic {@link Map} in case where more info are returned from the server.
  */
 public class StreamFullInfo implements Serializable {

File: src/main/java/redis/clients/jedis/resps/StreamGroupFullInfo.java
Patch:
@@ -8,7 +8,7 @@
 
 /**
  * This class holds information about a stream group with command {@code xinfo stream mystream full}.
- * They can be access via getters. There is also {@link StreamGroupFullInfo#getGroupFullInfo()}
+ * They can be accessed via getters. There is also {@link StreamGroupFullInfo#getGroupFullInfo()}
  * method that returns a generic {@link Map} in case more info are returned from the server.
  */
 public class StreamGroupFullInfo implements Serializable {

File: src/main/java/redis/clients/jedis/resps/StreamGroupInfo.java
Patch:
@@ -5,7 +5,7 @@
 import redis.clients.jedis.StreamEntryID;
 
 /**
- * This class holds information about a stream group. They can be access via getters. There is also
+ * This class holds information about a stream group. They can be accessed via getters. There is also
  * {@link StreamGroupInfo#getGroupInfo()} method that returns a generic {@code Map} in case more
  * info are returned from the server.
  */

File: src/main/java/redis/clients/jedis/resps/StreamInfo.java
Patch:
@@ -5,7 +5,7 @@
 import redis.clients.jedis.StreamEntryID;
 
 /**
- * This class holds information about stream. They can be access via getters. There is also
+ * This class holds information about stream. They can be accessed via getters. There is also
  * {@link StreamInfo#getStreamInfo} method that returns a generic {@code Map} in case more info are
  * returned from the server.
  */

File: src/main/java/redis/clients/jedis/util/RedisInputStream.java
Patch:
@@ -128,7 +128,7 @@ public byte[] readLineBytes() {
 
   /**
    * Slow path in case a line of bytes cannot be read in one #fill() operation. This is still faster
-   * than creating the StrinbBuilder, String, then encoding as byte[] in Protocol, then decoding
+   * than creating the StringBuilder, String, then encoding as byte[] in Protocol, then decoding
    * back into a String.
    */
   private byte[] readLineBytesSlowly() {
@@ -236,7 +236,7 @@ public int read(byte[] b, int off, int len) throws JedisConnectionException {
   }
 
   /**
-   * This methods assumes there are required bytes to be read. If we cannot read anymore bytes an
+   * This method assumes there are required bytes to be read. If we cannot read anymore bytes an
    * exception is thrown to quickly ascertain that the stream was smaller than expected.
    */
   private void ensureFill() throws JedisConnectionException {

File: src/test/java/redis/clients/jedis/ConnectionTest.java
Patch:
@@ -17,7 +17,7 @@ public void tearDown() throws Exception {
   }
 
   @Test(expected = JedisConnectionException.class)
-  public void checkUnkownHost() {
+  public void checkUnknownHost() {
     client = new Connection("someunknownhost", Protocol.DEFAULT_PORT);
     client.connect();
   }

File: src/test/java/redis/clients/jedis/ClusterPipeliningTest.java
Patch:
@@ -1095,6 +1095,6 @@ private static void assertThreadsCount() {
         .filter(thread -> thread != null && thread.getName() != null
             && thread.getName().startsWith("pool-"))
         .count();
-    assertTrue(count < 9);
+    MatcherAssert.assertThat(count, Matchers.lessThan(9));
   }
 }

File: src/main/java/redis/clients/jedis/Module.java
Patch:
@@ -1,5 +1,7 @@
 package redis.clients.jedis;
 
+// TODO: 'resps' package
+// TODO: remove
 public class Module {
 
   private final String name;

File: src/main/java/redis/clients/jedis/resps/AccessControlLogEntry.java
Patch:
@@ -9,6 +9,7 @@
  * can be access via getters. For future purpose there is also {@link #getlogEntry} method that
  * returns a generic {@code Map} - in case where more info is returned from a server
  */
+// TODO: remove
 public class AccessControlLogEntry implements Serializable {
 
   private static final long serialVersionUID = 1L;

File: src/test/java/redis/clients/jedis/commands/jedis/StreamsCommandsTest.java
Patch:
@@ -500,7 +500,7 @@ public void xreadGroupWithParamsWhenPendingMessageIsDiscarded() {
 
   @Test
   public void xack() {
-    Map<String, String> map = new HashMap<String, String>();
+    Map<String, String> map = new HashMap<>();
     map.put("f1", "v1");
     jedis.xadd("xack-stream", (StreamEntryID) null, map);
 

File: src/main/java/redis/clients/jedis/timeseries/TSInfo.java
Patch:
@@ -163,7 +163,7 @@ public TSInfo build(Object data) {
               List<Map<String, Object>> chunksValueList = new ArrayList<>(chunksDataList.size());
               chunks = new ArrayList<>(chunksDataList.size());
               for (Object chunkData : chunksDataList) {
-                Map<String, Object> chunk = BuilderFactory.ENCODED_OBJECT_MAP_FROM_PAIRS.build(chunkData);
+                Map<String, Object> chunk = BuilderFactory.ENCODED_OBJECT_MAP.build(chunkData);
                 chunksValueList.add(new HashMap<>(chunk));
                 chunks.add(chunk);
               }

File: src/main/java/redis/clients/jedis/search/aggr/FtAggregateIteration.java
Patch:
@@ -23,7 +23,7 @@ public FtAggregateIteration(ConnectionProvider connectionProvider, String indexN
     super(connectionProvider, SearchBuilderFactory.SEARCH_AGGREGATION_RESULT_WITH_CURSOR);
     if (!aggr.isWithCursor()) throw new IllegalArgumentException("cursor must be set");
     this.indexName = indexName;
-    this.args = new CommandArguments(SearchProtocol.SearchCommand.AGGREGATE).add(this.indexName).addObjects(aggr.getArgs());
+    this.args = new CommandArguments(SearchProtocol.SearchCommand.AGGREGATE).add(this.indexName).addParams(aggr);
   }
 
   @Override

File: src/main/java/redis/clients/jedis/commands/RedisModuleCommands.java
Patch:
@@ -2,7 +2,7 @@
 
 import redis.clients.jedis.bloom.commands.RedisBloomCommands;
 import redis.clients.jedis.graph.RedisGraphCommands;
-import redis.clients.jedis.json.RedisJsonCommands;
+import redis.clients.jedis.json.commands.RedisJsonCommands;
 import redis.clients.jedis.search.RediSearchCommands;
 import redis.clients.jedis.timeseries.RedisTimeSeriesCommands;
 

File: src/main/java/redis/clients/jedis/commands/RedisModulePipelineCommands.java
Patch:
@@ -2,7 +2,7 @@
 
 import redis.clients.jedis.bloom.commands.RedisBloomPipelineCommands;
 import redis.clients.jedis.graph.RedisGraphPipelineCommands;
-import redis.clients.jedis.json.RedisJsonPipelineCommands;
+import redis.clients.jedis.json.commands.RedisJsonPipelineCommands;
 import redis.clients.jedis.search.RediSearchPipelineCommands;
 import redis.clients.jedis.timeseries.RedisTimeSeriesPipelineCommands;
 

File: src/test/java/redis/clients/jedis/util/RedisProtocolUtil.java
Patch:
@@ -5,6 +5,8 @@
 public class RedisProtocolUtil {
   
   public static RedisProtocol getRedisProtocol() {
+//    return RedisProtocol.RESP2;
+//    return RedisProtocol.RESP3;
     String ver = System.getProperty("jedisProtocol");
     if (ver != null && !ver.isEmpty()) {
       for (RedisProtocol proto : RedisProtocol.values()) {

File: src/main/java/redis/clients/jedis/timeseries/AggregationType.java
Patch:
@@ -1,5 +1,6 @@
 package redis.clients.jedis.timeseries;
 
+import java.util.Locale;
 import redis.clients.jedis.args.Rawable;
 import redis.clients.jedis.util.SafeEncoder;
 
@@ -28,7 +29,7 @@ public byte[] getRaw() {
 
   public static AggregationType safeValueOf(String str) {
     try {
-      return AggregationType.valueOf(str.replace('.', '_'));
+      return AggregationType.valueOf(str.replace('.', '_').toUpperCase(Locale.ENGLISH));
     } catch (IllegalArgumentException iae) {
       return null;
     }

File: src/main/java/redis/clients/jedis/commands/SetPipelineCommands.java
Patch:
@@ -37,7 +37,7 @@ default Response<ScanResult<String>> sscan(String key, String cursor) {
 
   Response<Set<String>> sdiff(String... keys);
 
-  Response<Long> sdiffstore(String dstKey, String... keys);
+  Response<Long> sdiffStore(String dstKey, String... keys);
 
   Response<Set<String>> sinter(String... keys);
 

File: src/test/java/redis/clients/jedis/ClusterPipeliningTest.java
Patch:
@@ -519,7 +519,7 @@ public void clusterPipelineSet() {
     Response<Long> r1 = p.sadd("my{set}", "hello", "hello", "world", "foo", "bar");
     p.sadd("mynew{set}", "hello", "hello", "world");
     Response<Set<String>> r2 = p.sdiff("my{set}", "mynew{set}");
-    Response<Long> r3 = p.sdiffstore("diffset{set}", "my{set}", "mynew{set}");
+    Response<Long> r3 = p.sdiffStore("diffset{set}", "my{set}", "mynew{set}");
     Response<Set<String>> r4 = p.smembers("diffset{set}");
     Response<Set<String>> r5 = p.sinter("my{set}", "mynew{set}");
     Response<Long> r6 = p.sinterstore("interset{set}", "my{set}", "mynew{set}");

File: src/main/java/redis/clients/jedis/commands/ListBinaryCommands.java
Patch:
@@ -47,11 +47,11 @@ public interface ListBinaryCommands {
 
   List<byte[]> blpop(int timeout, byte[]... keys);
 
-  List<byte[]> blpop(double timeout, byte[]... keys);
+  KeyValue<byte[], byte[]> blpop(double timeout, byte[]... keys);
 
   List<byte[]> brpop(int timeout, byte[]... keys);
 
-  List<byte[]> brpop(double timeout, byte[]... keys);
+  KeyValue<byte[], byte[]> brpop(double timeout, byte[]... keys);
 
   byte[] rpoplpush(byte[] srckey, byte[] dstkey);
 

File: src/main/java/redis/clients/jedis/commands/ListPipelineBinaryCommands.java
Patch:
@@ -48,11 +48,11 @@ public interface ListPipelineBinaryCommands {
 
   Response<List<byte[]>> blpop(int timeout, byte[]... keys);
 
-  Response<List<byte[]>> blpop(double timeout, byte[]... keys);
+  Response<KeyValue<byte[], byte[]>> blpop(double timeout, byte[]... keys);
 
   Response<List<byte[]>> brpop(int timeout, byte[]... keys);
 
-  Response<List<byte[]>> brpop(double timeout, byte[]... keys);
+  Response<KeyValue<byte[], byte[]>> brpop(double timeout, byte[]... keys);
 
   Response<byte[]> rpoplpush(byte[] srckey, byte[] dstkey);
 

File: src/main/java/redis/clients/jedis/commands/SortedSetBinaryCommands.java
Patch:
@@ -130,9 +130,9 @@ default ScanResult<Tuple> zscan(byte[] key, byte[] cursor) {
 
   ScanResult<Tuple> zscan(byte[] key, byte[] cursor, ScanParams params);
 
-  List<Object> bzpopmax(double timeout, byte[]... keys);
+  KeyValue<byte[], Tuple> bzpopmax(double timeout, byte[]... keys);
 
-  List<Object> bzpopmin(double timeout, byte[]... keys);
+  KeyValue<byte[], Tuple> bzpopmin(double timeout, byte[]... keys);
 
   Set<byte[]> zdiff(byte[]... keys);
 

File: src/main/java/redis/clients/jedis/commands/SortedSetCommands.java
Patch:
@@ -6,7 +6,6 @@
 
 import redis.clients.jedis.args.SortedSetOption;
 import redis.clients.jedis.params.*;
-import redis.clients.jedis.resps.KeyedZSetElement;
 import redis.clients.jedis.resps.ScanResult;
 import redis.clients.jedis.resps.Tuple;
 import redis.clients.jedis.util.KeyValue;
@@ -668,15 +667,15 @@ default ScanResult<Tuple> zscan(String key, String cursor) {
    *               be used to block indefinitely.
    * @param keys
    */
-  KeyedZSetElement bzpopmax(double timeout, String... keys);
+  KeyValue<String, Tuple> bzpopmax(double timeout, String... keys);
 
   /**
    * The blocking version of {@link SortedSetCommands#zpopmin(String) ZPOPMIN}
    * @param timeout specifying the maximum number of seconds to block. A timeout of zero can
    *               be used to block indefinitely.
    * @param keys
    */
-  KeyedZSetElement bzpopmin(double timeout, String... keys);
+  KeyValue<String, Tuple> bzpopmin(double timeout, String... keys);
 
   /**
    * Compute the difference between all the sets in the given keys.

File: src/main/java/redis/clients/jedis/commands/SortedSetPipelineBinaryCommands.java
Patch:
@@ -131,9 +131,9 @@ default Response<ScanResult<Tuple>> zscan(byte[] key, byte[] cursor) {
 
   Response<ScanResult<Tuple>> zscan(byte[] key, byte[] cursor, ScanParams params);
 
-  Response<List<Object>> bzpopmax(double timeout, byte[]... keys);
+  Response<KeyValue<byte[], Tuple>> bzpopmax(double timeout, byte[]... keys);
 
-  Response<List<Object>> bzpopmin(double timeout, byte[]... keys);
+  Response<KeyValue<byte[], Tuple>> bzpopmin(double timeout, byte[]... keys);
 
   Response<Set<byte[]>> zdiff(byte[]... keys);
 

File: src/main/java/redis/clients/jedis/commands/SortedSetPipelineCommands.java
Patch:
@@ -7,7 +7,6 @@
 import redis.clients.jedis.Response;
 import redis.clients.jedis.args.SortedSetOption;
 import redis.clients.jedis.params.*;
-import redis.clients.jedis.resps.KeyedZSetElement;
 import redis.clients.jedis.resps.ScanResult;
 import redis.clients.jedis.resps.Tuple;
 import redis.clients.jedis.util.KeyValue;
@@ -132,9 +131,9 @@ default Response<ScanResult<Tuple>> zscan(String key, String cursor) {
 
   Response<ScanResult<Tuple>> zscan(String key, String cursor, ScanParams params);
 
-  Response<KeyedZSetElement> bzpopmax(double timeout, String... keys);
+  Response<KeyValue<String, Tuple>> bzpopmax(double timeout, String... keys);
 
-  Response<KeyedZSetElement> bzpopmin(double timeout, String... keys);
+  Response<KeyValue<String, Tuple>> bzpopmin(double timeout, String... keys);
 
   Response<Set<String>> zdiff(String... keys);
 

File: src/main/java/redis/clients/jedis/CommandObjects.java
Patch:
@@ -4107,6 +4107,7 @@ public final CommandObject<String> graphConfigSet(String configName, Object valu
   public final CommandObject<Map<String, Object>> graphConfigGet(String configName) {
     return new CommandObject<>(commandArguments(GraphCommand.CONFIG).add(GraphKeyword.GET).add(configName), BuilderFactory.ENCODED_OBJECT_MAP);
   }
+  // RedisGraph commands
 
   /**
    * Get the instance for JsonObjectMapper if not null, otherwise a new instance reference with
@@ -4131,10 +4132,10 @@ private JsonObjectMapper getJsonObjectMapper() {
     }
     return localRef;
   }
+
   public void setJsonObjectMapper(JsonObjectMapper jsonObjectMapper) {
     this.jsonObjectMapper = jsonObjectMapper;
   }
-  // RedisGraph commands
 
   private class SearchProfileResponseBuilder<T> extends Builder<Map.Entry<T, Map<String, Object>>> {
 

File: src/main/java/redis/clients/jedis/ReliableTransaction.java
Patch:
@@ -65,7 +65,7 @@ protected final void processAppendStatus() {
   }
 
   @Override
-  protected final void processPipelinedResponses() {
+  protected final void processPipelinedResponses(int pipelineLength) {
     // do nothing
   }
 

File: src/main/java/redis/clients/jedis/Transaction.java
Patch:
@@ -68,9 +68,9 @@ protected final void processAppendStatus() {
   }
 
   @Override
-  protected final void processPipelinedResponses() {
+  protected final void processPipelinedResponses(int pipelineLength) {
     // ignore QUEUED or ERROR
-    connection.getMany(1 + getPipelinedResponseLength());
+    connection.getMany(1 + pipelineLength);
   }
 
   @Override

File: src/test/java/redis/clients/jedis/ClusterPipeliningTest.java
Patch:
@@ -821,8 +821,8 @@ public void clusterPipelineStream() {
     Response<Long> r3 = p.xlen("mystream");
     Response<List<StreamEntry>> r4 = p.xrange("mystream", streamId1, streamId2);
     Response<List<StreamEntry>> r5 = p.xrange("mystream", streamId1, streamId2, 1);
-    Response<List<StreamEntry>> r6 = p.xrevrange("mystream", streamId1, streamId2);
-    Response<List<StreamEntry>> r7 = p.xrevrange("mystream", streamId1, streamId2, 1);
+    Response<List<StreamEntry>> r6 = p.xrevrange("mystream", streamId2, streamId1);
+    Response<List<StreamEntry>> r7 = p.xrevrange("mystream", streamId2, streamId1, 1);
     Response<String> r8 = p.xgroupCreate("mystream", "group", streamId1, false);
     Response<String> r9 = p.xgroupSetID("mystream", "group", streamId2);
     // More stream commands are missing

File: src/main/java/redis/clients/jedis/Jedis.java
Patch:
@@ -1372,7 +1372,7 @@ public List<byte[]> hrandfield(final byte[] key, final long count) {
    * @return One or multiple random fields with values from a hash.
    */
   @Override
-  public Map<byte[], byte[]> hrandfieldWithValues(final byte[] key, final long count) {
+  public List<Map.Entry<byte[], byte[]>> hrandfieldWithValues(final byte[] key, final long count) {
     checkIsInMultiOrPipeline();
     return connection.executeCommand(commandObjects.hrandfieldWithValues(key, count));
   }
@@ -5799,7 +5799,7 @@ public List<String> hrandfield(final String key, final long count) {
    * @return one or multiple random fields with values from a hash.
    */
   @Override
-  public Map<String, String> hrandfieldWithValues(final String key, final long count) {
+  public List<Map.Entry<String, String>> hrandfieldWithValues(final String key, final long count) {
     checkIsInMultiOrPipeline();
     return connection.executeCommand(commandObjects.hrandfieldWithValues(key, count));
   }

File: src/main/java/redis/clients/jedis/MultiNodePipelineBase.java
Patch:
@@ -807,7 +807,7 @@ public Response<List<String>> hrandfield(String key, long count) {
   }
 
   @Override
-  public Response<Map<String, String>> hrandfieldWithValues(String key, long count) {
+  public Response<List<Map.Entry<String, String>>> hrandfieldWithValues(String key, long count) {
     return appendCommand(commandObjects.hrandfieldWithValues(key, count));
   }
 
@@ -2067,7 +2067,7 @@ public Response<List<byte[]>> hrandfield(byte[] key, long count) {
   }
 
   @Override
-  public Response<Map<byte[], byte[]>> hrandfieldWithValues(byte[] key, long count) {
+  public Response<List<Map.Entry<byte[], byte[]>>> hrandfieldWithValues(byte[] key, long count) {
     return appendCommand(commandObjects.hrandfieldWithValues(key, count));
   }
 

File: src/main/java/redis/clients/jedis/Pipeline.java
Patch:
@@ -761,7 +761,7 @@ public Response<List<String>> hrandfield(String key, long count) {
   }
 
   @Override
-  public Response<Map<String, String>> hrandfieldWithValues(String key, long count) {
+  public Response<List<Map.Entry<String, String>>> hrandfieldWithValues(String key, long count) {
     return appendCommand(commandObjects.hrandfieldWithValues(key, count));
   }
 
@@ -2020,7 +2020,7 @@ public Response<List<byte[]>> hrandfield(byte[] key, long count) {
   }
 
   @Override
-  public Response<Map<byte[], byte[]>> hrandfieldWithValues(byte[] key, long count) {
+  public Response<List<Map.Entry<byte[], byte[]>>> hrandfieldWithValues(byte[] key, long count) {
     return appendCommand(commandObjects.hrandfieldWithValues(key, count));
   }
 

File: src/main/java/redis/clients/jedis/TransactionBase.java
Patch:
@@ -856,7 +856,7 @@ public Response<List<String>> hrandfield(String key, long count) {
   }
 
   @Override
-  public Response<Map<String, String>> hrandfieldWithValues(String key, long count) {
+  public Response<List<Map.Entry<String, String>>> hrandfieldWithValues(String key, long count) {
     return appendCommand(commandObjects.hrandfieldWithValues(key, count));
   }
 
@@ -2117,7 +2117,7 @@ public Response<List<byte[]>> hrandfield(byte[] key, long count) {
   }
 
   @Override
-  public Response<Map<byte[], byte[]>> hrandfieldWithValues(byte[] key, long count) {
+  public Response<List<Map.Entry<byte[], byte[]>>> hrandfieldWithValues(byte[] key, long count) {
     return appendCommand(commandObjects.hrandfieldWithValues(key, count));
   }
 

File: src/main/java/redis/clients/jedis/UnifiedJedis.java
Patch:
@@ -1517,7 +1517,7 @@ public List<String> hrandfield(String key, long count) {
   }
 
   @Override
-  public Map<String, String> hrandfieldWithValues(String key, long count) {
+  public List<Map.Entry<String, String>> hrandfieldWithValues(String key, long count) {
     return executeCommand(commandObjects.hrandfieldWithValues(key, count));
   }
 
@@ -1542,7 +1542,7 @@ public List<byte[]> hrandfield(byte[] key, long count) {
   }
 
   @Override
-  public Map<byte[], byte[]> hrandfieldWithValues(byte[] key, long count) {
+  public List<Map.Entry<byte[], byte[]>> hrandfieldWithValues(byte[] key, long count) {
     return executeCommand(commandObjects.hrandfieldWithValues(key, count));
   }
 

File: src/main/java/redis/clients/jedis/commands/HashBinaryCommands.java
Patch:
@@ -41,7 +41,7 @@ public interface HashBinaryCommands {
 
   List<byte[]> hrandfield(byte[] key, long count);
 
-  Map<byte[], byte[]> hrandfieldWithValues(byte[] key, long count);
+  List<Map.Entry<byte[], byte[]>> hrandfieldWithValues(byte[] key, long count);
 
   default ScanResult<Map.Entry<byte[], byte[]>> hscan(byte[] key, byte[] cursor) {
     return hscan(key, cursor, new ScanParams());

File: src/main/java/redis/clients/jedis/commands/HashCommands.java
Patch:
@@ -41,7 +41,7 @@ public interface HashCommands {
 
   List<String> hrandfield(String key, long count);
 
-  Map<String, String> hrandfieldWithValues(String key, long count);
+  List<Map.Entry<String, String>> hrandfieldWithValues(String key, long count);
 
   default ScanResult<Map.Entry<String, String>> hscan(String key, String cursor) {
     return hscan(key, cursor, new ScanParams());

File: src/main/java/redis/clients/jedis/commands/HashPipelineBinaryCommands.java
Patch:
@@ -42,7 +42,7 @@ public interface HashPipelineBinaryCommands {
 
   Response<List<byte[]>> hrandfield(byte[] key, long count);
 
-  Response<Map<byte[], byte[]>> hrandfieldWithValues(byte[] key, long count);
+  Response<List<Map.Entry<byte[], byte[]>>> hrandfieldWithValues(byte[] key, long count);
 
   default Response<ScanResult<Map.Entry<byte[], byte[]>>> hscan(byte[] key, byte[] cursor) {
     return hscan(key, cursor, new ScanParams());

File: src/main/java/redis/clients/jedis/commands/HashPipelineCommands.java
Patch:
@@ -42,7 +42,7 @@ public interface HashPipelineCommands {
 
   Response<List<String>> hrandfield(String key, long count);
 
-  Response<Map<String, String>> hrandfieldWithValues(String key, long count);
+  Response<List<Map.Entry<String, String>>> hrandfieldWithValues(String key, long count);
 
   default Response<ScanResult<Map.Entry<String, String>>> hscan(String key, String cursor) {
     return hscan(key, cursor, new ScanParams());

File: src/test/java/redis/clients/jedis/examples/RedisCredentialsProviderUsage.java
Patch:
@@ -6,7 +6,7 @@
 import redis.clients.jedis.HostAndPort;
 import redis.clients.jedis.JedisPooled;
 
-public class RedisCredentialsProviderExample {
+public class RedisCredentialsProviderUsage {
 
   public static void main(String[] args) {
 

File: src/test/java/redis/clients/jedis/commands/unified/pooled/PooledCommandsTestHelper.java
Patch:
@@ -5,6 +5,7 @@
 import redis.clients.jedis.Jedis;
 import redis.clients.jedis.JedisPooled;
 import redis.clients.jedis.HostAndPorts;
+import redis.clients.jedis.util.RedisProtocolUtil;
 
 public class PooledCommandsTestHelper {
 
@@ -19,7 +20,8 @@ static JedisPooled getPooled() throws InterruptedException {
     node.flushAll();
 
     //return new JedisPooled(nodeInfo.getHost(), nodeInfo.getPort(), null, "foobared");
-    return new JedisPooled(nodeInfo, DefaultJedisClientConfig.builder().resp3().password("foobared").build());
+    return new JedisPooled(nodeInfo, DefaultJedisClientConfig.builder()
+        .protocol(RedisProtocolUtil.getRedisProtocol()).password("foobared").build());
   }
 
   static void clearData() {

File: src/main/java/redis/clients/jedis/CommandObjects.java
Patch:
@@ -3836,7 +3836,7 @@ public final CommandObject<Boolean> bfAdd(String key, String item) {
 
   public final CommandObject<List<Boolean>> bfMAdd(String key, String... items) {
     return new CommandObject<>(commandArguments(BloomFilterCommand.MADD).key(key).
-        addObjects((Object[]) items), BuilderFactory.BOOLEAN_LIST);
+        addObjects((Object[]) items), BuilderFactory.BOOLEAN_WITH_ERROR_LIST);
   }
 
   public final CommandObject<List<Boolean>> bfInsert(String key, String... items) {

File: src/main/java/redis/clients/jedis/Jedis.java
Patch:
@@ -151,6 +151,7 @@ public Jedis(URI uri) {
     connection = new Connection(new HostAndPort(uri.getHost(), uri.getPort()),
         DefaultJedisClientConfig.builder().user(JedisURIHelper.getUser(uri))
             .password(JedisURIHelper.getPassword(uri)).database(JedisURIHelper.getDBIndex(uri))
+            .protocol(JedisURIHelper.getRedisProtocol(uri))
             .ssl(JedisURIHelper.isRedisSSLScheme(uri)).build());
   }
 
@@ -203,6 +204,7 @@ public Jedis(final URI uri, JedisClientConfig config) {
             .blockingSocketTimeoutMillis(config.getBlockingSocketTimeoutMillis())
             .user(JedisURIHelper.getUser(uri)).password(JedisURIHelper.getPassword(uri))
             .database(JedisURIHelper.getDBIndex(uri)).clientName(config.getClientName())
+            .protocol(JedisURIHelper.getRedisProtocol(uri))
             .ssl(JedisURIHelper.isRedisSSLScheme(uri)).sslSocketFactory(config.getSslSocketFactory())
             .sslParameters(config.getSslParameters()).hostnameVerifier(config.getHostnameVerifier())
             .build());

File: src/main/java/redis/clients/jedis/JedisFactory.java
Patch:
@@ -130,6 +130,7 @@ protected JedisFactory(final URI uri, final int connectionTimeout, final int soT
         .socketTimeoutMillis(soTimeout).blockingSocketTimeoutMillis(infiniteSoTimeout)
         .user(JedisURIHelper.getUser(uri)).password(JedisURIHelper.getPassword(uri))
         .database(JedisURIHelper.getDBIndex(uri)).clientName(clientName)
+        .protocol(JedisURIHelper.getRedisProtocol(uri))
         .ssl(JedisURIHelper.isRedisSSLScheme(uri)).sslSocketFactory(sslSocketFactory)
         .sslParameters(sslParameters).hostnameVerifier(hostnameVerifier).build();
     this.jedisSocketFactory = new DefaultJedisSocketFactory(new HostAndPort(uri.getHost(), uri.getPort()), this.clientConfig);

File: src/main/java/redis/clients/jedis/UnifiedJedis.java
Patch:
@@ -65,7 +65,8 @@ public UnifiedJedis(final String url) {
   public UnifiedJedis(final URI uri) {
     this(JedisURIHelper.getHostAndPort(uri), DefaultJedisClientConfig.builder()
         .user(JedisURIHelper.getUser(uri)).password(JedisURIHelper.getPassword(uri))
-        .database(JedisURIHelper.getDBIndex(uri)).ssl(JedisURIHelper.isRedisSSLScheme(uri)).build());
+        .database(JedisURIHelper.getDBIndex(uri)).protocol(JedisURIHelper.getRedisProtocol(uri))
+        .ssl(JedisURIHelper.isRedisSSLScheme(uri)).build());
   }
 
   public UnifiedJedis(final URI uri, JedisClientConfig config) {
@@ -75,6 +76,7 @@ public UnifiedJedis(final URI uri, JedisClientConfig config) {
         .blockingSocketTimeoutMillis(config.getBlockingSocketTimeoutMillis())
         .user(JedisURIHelper.getUser(uri)).password(JedisURIHelper.getPassword(uri))
         .database(JedisURIHelper.getDBIndex(uri)).clientName(config.getClientName())
+        .protocol(JedisURIHelper.getRedisProtocol(uri))
         .ssl(JedisURIHelper.isRedisSSLScheme(uri)).sslSocketFactory(config.getSslSocketFactory())
         .sslParameters(config.getSslParameters()).hostnameVerifier(config.getHostnameVerifier())
         .build());

File: src/main/java/redis/clients/jedis/Protocol.java
Patch:
@@ -30,7 +30,7 @@ public final class Protocol {
   public static final byte COMMA_BYTE = ',';
   public static final byte DOLLAR_BYTE = '$';
   public static final byte EQUAL_BYTE = '=';
-  public static final byte GRATER_THAN_BYTE = '>';
+  public static final byte GREATER_THAN_BYTE = '>';
   public static final byte HASH_BYTE = '#';
   public static final byte LEFT_BRACE_BYTE = '(';
   public static final byte MINUS_BYTE = '-';
@@ -160,7 +160,7 @@ private static Object process(final RedisInputStream is) {
         num = is.readIntCrLf();
         if (num == -1) return null;
         return processMultiBulkReply(num, is);
-      case GRATER_THAN_BYTE:
+      case GREATER_THAN_BYTE:
         num = is.readIntCrLf();
         if (num == -1) return null;
         return processMultiBulkReply(num, is);

File: src/main/java/redis/clients/jedis/Protocol.java
Patch:
@@ -237,7 +237,7 @@ public static enum Command implements ProtocolCommand {
     XADD, XLEN, XDEL, XTRIM, XRANGE, XREVRANGE, XREAD, XACK, XGROUP, XREADGROUP, XPENDING, XCLAIM,
     XAUTOCLAIM, XINFO, BITFIELD_RO, ROLE, FAILOVER, GEOSEARCH, GEOSEARCHSTORE, EVAL_RO, EVALSHA_RO,
     LOLWUT, EXPIRETIME, PEXPIRETIME, FUNCTION, FCALL, FCALL_RO, LMPOP, BLMPOP, ZMPOP, BZMPOP,
-    COMMAND, LATENCY, @Deprecated STRALGO;
+    COMMAND, LATENCY, WAITAOF, @Deprecated STRALGO;
 
     private final byte[] raw;
 

File: src/main/java/redis/clients/jedis/commands/SampleBinaryKeyedCommands.java
Patch:
@@ -2,11 +2,14 @@
 
 import java.util.List;
 import redis.clients.jedis.args.FlushMode;
+import redis.clients.jedis.util.KeyValue;
 
 public interface SampleBinaryKeyedCommands {
 
   long waitReplicas(byte[] sampleKey, int replicas, long timeout);
 
+  KeyValue<Long, Long> waitAOF(byte[] sampleKey, long numLocal, long numReplicas, long timeout);
+
   Object eval(byte[] script, byte[] sampleKey);
 
   Object evalsha(byte[] sha1, byte[] sampleKey);

File: src/main/java/redis/clients/jedis/commands/SampleBinaryKeyedPipelineCommands.java
Patch:
@@ -3,11 +3,14 @@
 import java.util.List;
 import redis.clients.jedis.Response;
 import redis.clients.jedis.args.FlushMode;
+import redis.clients.jedis.util.KeyValue;
 
 public interface SampleBinaryKeyedPipelineCommands {
 
   Response<Long> waitReplicas(byte[] sampleKey, int replicas, long timeout);
 
+  Response<KeyValue<Long, Long>> waitAOF(byte[] sampleKey, long numLocal, long numReplicas, long timeout);
+
   Response<Object> eval(byte[] script, byte[] sampleKey);
 
   Response<Object> evalsha(byte[] sha1, byte[] sampleKey);

File: src/main/java/redis/clients/jedis/commands/SampleKeyedCommands.java
Patch:
@@ -2,11 +2,14 @@
 
 import java.util.List;
 import redis.clients.jedis.args.FlushMode;
+import redis.clients.jedis.util.KeyValue;
 
 public interface SampleKeyedCommands {
 
   long waitReplicas(String sampleKey, int replicas, long timeout);
 
+  KeyValue<Long, Long> waitAOF(String sampleKey, long numLocal, long numReplicas, long timeout);
+
   Object eval(String script, String sampleKey);
 
   Object evalsha(String sha1, String sampleKey);

File: src/main/java/redis/clients/jedis/commands/SampleKeyedPipelineCommands.java
Patch:
@@ -3,11 +3,14 @@
 import java.util.List;
 import redis.clients.jedis.Response;
 import redis.clients.jedis.args.FlushMode;
+import redis.clients.jedis.util.KeyValue;
 
 public interface SampleKeyedPipelineCommands {
 
   Response<Long> waitReplicas(String sampleKey, int replicas, long timeout);
 
+  Response<KeyValue<Long, Long>> waitAOF(String sampleKey, long numLocal, long numReplicas, long timeout);
+
   Response<Object> eval(String script, String sampleKey);
 
   Response<Object> evalsha(String sha1, String sampleKey);

File: src/main/java/redis/clients/jedis/CommandObjects.java
Patch:
@@ -4178,8 +4178,8 @@ public final CommandObject<List<String>> graphExplain(String graphName, String q
     return new CommandObject<>(commandArguments(GraphCommand.EXPLAIN).key(graphName).add(query), BuilderFactory.STRING_LIST);
   }
 
-  public final CommandObject<List<List<String>>> graphSlowlog(String graphName) {
-    return new CommandObject<>(commandArguments(GraphCommand.SLOWLOG).key(graphName), BuilderFactory.STRING_LIST_LIST);
+  public final CommandObject<List<List<Object>>> graphSlowlog(String graphName) {
+    return new CommandObject<>(commandArguments(GraphCommand.SLOWLOG).key(graphName), BuilderFactory.ENCODED_OBJECT_LIST_LIST);
   }
 
   public final CommandObject<String> graphConfigSet(String configName, Object value) {

File: src/main/java/redis/clients/jedis/JedisCluster.java
Patch:
@@ -207,7 +207,7 @@ public Connection getConnectionFromSlot(int slot) {
 
   @Override
   public ClusterPipeline pipelined() {
-    return new ClusterPipeline((ClusterConnectionProvider) provider);
+    return new ClusterPipeline((ClusterConnectionProvider) provider, (ClusterCommandObjects) commandObjects);
   }
 
   /**

File: src/main/java/redis/clients/jedis/MultiNodePipelineBase.java
Patch:
@@ -39,7 +39,6 @@
 import redis.clients.jedis.util.IOUtils;
 import redis.clients.jedis.util.KeyValue;
 
-// TODO: RESP3
 public abstract class MultiNodePipelineBase implements PipelineCommands, PipelineBinaryCommands,
     RedisModulePipelineCommands, Closeable {
 

File: src/main/java/redis/clients/jedis/graph/RedisGraphCommands.java
Patch:
@@ -113,8 +113,7 @@ public interface RedisGraphCommands {
   /**
    * Returns a list containing up to 10 of the slowest queries issued against the given graph ID.
    */
-  // TODO: RESP3 --> List<List<Object>> ?
-  List<List<String>> graphSlowlog(String graphName);
+  List<List<Object>> graphSlowlog(String graphName);
 
   String graphConfigSet(String configName, Object value);
 

File: src/test/java/redis/clients/jedis/modules/graph/GraphAPITest.java
Patch:
@@ -766,12 +766,11 @@ public void explain() {
   }
 
   @Test
-  // TODO: RESP3
   public void slowlog() {
     assertNotNull(client.graphProfile("social", "CREATE (:person{name:'roi',age:32})"));
     assertNotNull(client.graphProfile("social", "CREATE (:person{name:'amit',age:30})"));
 
-    List<List<String>> slowlogs = client.graphSlowlog("social");
+    List<List<Object>> slowlogs = client.graphSlowlog("social");
     assertEquals(2, slowlogs.size());
     slowlogs.forEach(sl -> assertFalse(sl.isEmpty()));
     slowlogs.forEach(sl -> sl.forEach(Assert::assertNotNull));

File: src/main/java/redis/clients/jedis/Connection.java
Patch:
@@ -234,10 +234,10 @@ public void disconnect() {
         outputStream.flush();
         socket.close();
       } catch (IOException ex) {
-        broken = true;
         throw new JedisConnectionException(ex);
       } finally {
         IOUtils.closeQuietly(socket);
+        setBroken();
       }
     }
   }

File: src/main/java/redis/clients/jedis/Jedis.java
Patch:
@@ -3370,9 +3370,7 @@ public long lastsave() {
    * Synchronously save the DB on disk, then shutdown the server.
    * <p>
    * Stop all the clients, save the DB, then quit the server. This commands makes sure that the DB
-   * is switched off without the lost of any data. This is not guaranteed if the connection uses
-   * simply {@link Jedis#save() SAVE} and then {@link Jedis#quit() QUIT} because other clients may
-   * alter the DB data between the two commands.
+   * is switched off without the lost of any data.
    * @throws JedisException with the status code reply on error. On success nothing is thrown since
    *         the server quits and the connection is closed.
    */

File: src/main/java/redis/clients/jedis/Protocol.java
Patch:
@@ -253,7 +253,7 @@ public byte[] getRaw() {
 
   public static enum Keyword implements Rawable {
 
-    AGGREGATE, ALPHA, BY, GET, LIMIT, NO, NOSORT, ONE, SET, STORE, WEIGHTS, WITHSCORES, RESETSTAT,
+    AGGREGATE, ALPHA, BY, GET, LIMIT, NO, NOSORT, ONE, SET, STORE, WEIGHTS, WITHSCORE, WITHSCORES, RESETSTAT,
     REWRITE, RESET, FLUSH, EXISTS, LOAD, LEN, HELP, SCHEDULE, MATCH, COUNT, TYPE, KEYS, REFCOUNT,
     ENCODING, IDLETIME, FREQ, REPLACE, GETNAME, SETNAME, SETINFO, LIST, ID, KILL, PAUSE, UNPAUSE, UNBLOCK,
     STREAMS, CREATE, MKSTREAM, SETID, DESTROY, DELCONSUMER, MAXLEN, GROUP, IDLE, TIME, BLOCK, NOACK,

File: src/main/java/redis/clients/jedis/UnifiedJedis.java
Patch:
@@ -201,6 +201,7 @@ private <T> T checkAndBroadcastCommand(CommandObject<T> commandObject) {
 
   public void setBroadcastAndRoundRobinConfig(JedisBroadcastAndRoundRobinConfig config) {
     this.broadcastAndRoundRobinConfig = config;
+    this.commandObjects.setBroadcastAndRoundRobinConfig(this.broadcastAndRoundRobinConfig);
   }
 
   public String ping() {

File: src/main/java/redis/clients/jedis/BuilderFactory.java
Patch:
@@ -925,6 +925,9 @@ private Map<String, Builder> createDecoderMap() {
       tempMappingFunctions.put(AccessControlLogEntry.USERNAME, STRING);
       tempMappingFunctions.put(AccessControlLogEntry.AGE_SECONDS, STRING);
       tempMappingFunctions.put(AccessControlLogEntry.CLIENT_INFO, STRING);
+      tempMappingFunctions.put(AccessControlLogEntry.ENTRY_ID, LONG);
+      tempMappingFunctions.put(AccessControlLogEntry.TIMESTAMP_CREATED, LONG);
+      tempMappingFunctions.put(AccessControlLogEntry.TIMESTAMP_LAST_UPDATED, LONG);
 
       return tempMappingFunctions;
     }

File: src/main/java/redis/clients/jedis/MultiNodePipelineBase.java
Patch:
@@ -72,6 +72,7 @@ public MultiNodePipelineBase(CommandObjects commandObjects) {
    */
   protected final void prepareGraphCommands(ConnectionProvider connectionProvider) {
     this.graphCommandObjects = new GraphCommandObjects(connectionProvider);
+    this.graphCommandObjects.setBaseCommandArgumentsCreator((comm) -> this.commandObjects.commandArguments(comm));
   }
 
   protected abstract HostAndPort getNodeKey(CommandArguments args);

File: src/main/java/redis/clients/jedis/Protocol.java
Patch:
@@ -255,7 +255,7 @@ public static enum Keyword implements Rawable {
 
     AGGREGATE, ALPHA, BY, GET, LIMIT, NO, NOSORT, ONE, SET, STORE, WEIGHTS, WITHSCORES, RESETSTAT,
     REWRITE, RESET, FLUSH, EXISTS, LOAD, LEN, HELP, SCHEDULE, MATCH, COUNT, TYPE, KEYS, REFCOUNT,
-    ENCODING, IDLETIME, FREQ, REPLACE, GETNAME, SETNAME, LIST, ID, KILL, PAUSE, UNPAUSE, UNBLOCK,
+    ENCODING, IDLETIME, FREQ, REPLACE, GETNAME, SETNAME, SETINFO, LIST, ID, KILL, PAUSE, UNPAUSE, UNBLOCK,
     STREAMS, CREATE, MKSTREAM, SETID, DESTROY, DELCONSUMER, MAXLEN, GROUP, IDLE, TIME, BLOCK, NOACK,
     RETRYCOUNT, STREAM, GROUPS, CONSUMERS, JUSTID, WITHVALUES, NOMKSTREAM, MINID, CREATECONSUMER,
     SETUSER, GETUSER, DELUSER, WHOAMI, USERS, CAT, GENPASS, LOG, SAVE, DRYRUN, COPY, AUTH, AUTH2,

File: src/main/java/redis/clients/jedis/Protocol.java
Patch:
@@ -216,7 +216,7 @@ public static final byte[] toByteArray(final double value) {
 
   public static enum Command implements ProtocolCommand {
 
-    PING, SET, GET, GETDEL, GETEX, QUIT, EXISTS, DEL, UNLINK, TYPE, FLUSHDB, KEYS, RANDOMKEY, MOVE,
+    PING, SET, GET, GETDEL, GETEX, @Deprecated QUIT, EXISTS, DEL, UNLINK, TYPE, FLUSHDB, KEYS, RANDOMKEY, MOVE,
     RENAME, RENAMENX, DBSIZE, EXPIRE, EXPIREAT, TTL, SELECT, FLUSHALL, GETSET, MGET, SETNX, SETEX,
     MSET, MSETNX, DECRBY, DECR, INCRBY, INCR, APPEND, SUBSTR, HSET, HGET, HSETNX, HMSET, HMGET,
     HINCRBY, HEXISTS, HDEL, HLEN, HKEYS, HVALS, HGETALL, HRANDFIELD, HINCRBYFLOAT, HSTRLEN, MIGRATE,

File: src/main/java/redis/clients/jedis/commands/ServerCommands.java
Patch:
@@ -24,7 +24,10 @@ public interface ServerCommands {
    * Ask the server to close the connection. The connection is closed as soon as all pending replies
    * have been written to the client.
    * @return OK
+   * @deprecated The QUIT command is deprecated, see <a href="https://github.com/redis/redis/issues/11420">#11420</a>.
+   * If available, {@code disconnect()} method in the concerned class can be used instead.
    */
+  @Deprecated
   String quit();
 
   /**

File: src/main/java/redis/clients/jedis/util/DoublePrecision.java
Patch:
@@ -26,6 +26,7 @@ public static Double parseFloatingPointNumber(String str) {
           return Double.NEGATIVE_INFINITY;
 
         case "nan":
+        case "-nan": // for some module commands // TODO: remove
           return Double.NaN;
 
         default:

File: src/main/java/redis/clients/jedis/Pipeline.java
Patch:
@@ -4290,7 +4290,7 @@ public Response<List<String>> time() {
 
   @Override
   public Response<String> select(final int index) {
-    return appendCommand(new CommandObject<>(commandObjects.commandArguments(Protocol.Command.SELECT), BuilderFactory.STRING));
+    return appendCommand(new CommandObject<>(commandObjects.commandArguments(Protocol.Command.SELECT).add(index), BuilderFactory.STRING));
   }
 
   @Override

File: src/main/java/redis/clients/jedis/Protocol.java
Patch:
@@ -49,7 +49,7 @@ public final class Protocol {
   private static final String NOPERM_PREFIX = "NOPERM";
 
   private Protocol() {
-    // this prevent the class from instantiation
+    throw new InstantiationError("Must not instantiate this class");
   }
 
   public static void sendCommand(final RedisOutputStream os, CommandArguments args) {

File: src/test/java/redis/clients/jedis/ClusterCommandExecutorTest.java
Patch:
@@ -272,11 +272,11 @@ public void runMasterFailingReplicaRecovering() {
       public <T> T execute(Connection connection, CommandObject<T> commandObject) {
         assertNotNull(connection);
 
-        if (connection == master) {
+        if (connection.toString().equals("master")) {
           throw new JedisConnectionException("Master is down");
         }
 
-        assert connection == replica;
+        assert connection.toString().equals("replica");
 
         return (T) "Success!";
       }

File: src/main/java/redis/clients/jedis/providers/ClusterConnectionProvider.java
Patch:
@@ -41,7 +41,7 @@ private void initializeSlotsCache(Set<HostAndPort> startNodes, JedisClientConfig
       try (Connection jedis = new Connection(hostAndPort, clientConfig)) {
         cache.discoverClusterNodesAndSlots(jedis);
         return;
-      } catch (JedisConnectionException e) {
+      } catch (JedisException e) {
         // try next nodes
       }
     }

File: src/main/java/redis/clients/jedis/search/RediSearchPipelineCommands.java
Patch:
@@ -85,7 +85,8 @@ default Response<SearchResult> ftSearch(String indexName) {
 
   Response<Map<String, Map<String, Double>>> ftSpellCheck(String index, String query);
 
-  Response<Map<String, Map<String, Double>>> ftSpellCheck(String index, String query, FTSpellCheckParams spellCheckParams);
+  Response<Map<String, Map<String, Double>>> ftSpellCheck(String index, String query,
+      FTSpellCheckParams spellCheckParams);
 
   Response<Map<String, Object>> ftInfo(String indexName);
 

File: src/main/java/redis/clients/jedis/search/SearchProtocol.java
Patch:
@@ -31,7 +31,8 @@ public enum SearchCommand implements ProtocolCommand {
     DICTDEL("FT.DICTDEL"),
     DICTDUMP("FT.DICTDUMP"),
     SPELLCHECK("FT.SPELLCHECK"),
-    TAGVALS("FT.TAGVALS");
+    TAGVALS("FT.TAGVALS"),
+    PROFILE("FT.PROFILE");
 
     private final byte[] raw;
 
@@ -54,6 +55,7 @@ public enum SearchKeyword implements Rawable {
     SCORE_FIELD, SCORER, PARAMS, AS, DIALECT, SLOP, TIMEOUT, INORDER, EXPANDER, MAXTEXTFIELDS,
     SKIPINITIALSCAN, WITHSUFFIXTRIE, NOSTEM, NOINDEX, PHONETIC, WEIGHT, CASESENSITIVE, /*EXPLAINSCORE,*/
     LOAD, APPLY, GROUPBY, MAXIDLE, WITHCURSOR, DISTANCE, TERMS, INCLUDE, EXCLUDE,
+    SEARCH, AGGREGATE, QUERY, LIMITED,
     @Deprecated ASYNC, @Deprecated PAYLOAD_FIELD, @Deprecated WITHPAYLOADS, @Deprecated PAYLOAD,
     @Deprecated COUNT;
 

File: src/main/java/redis/clients/jedis/JedisPooled.java
Patch:
@@ -280,7 +280,7 @@ public JedisPooled(final GenericObjectPoolConfig<Connection> poolConfig, final S
       final HostnameVerifier hostnameVerifier) {
     this(new HostAndPort(host, port), DefaultJedisClientConfig.create(connectionTimeout, soTimeout,
         infiniteSoTimeout, user, password, database, clientName, ssl, sslSocketFactory, sslParameters,
-        hostnameVerifier, null));
+        hostnameVerifier, null), poolConfig);
   }
 
   public JedisPooled(final URI uri) {
@@ -343,7 +343,8 @@ public JedisPooled(final GenericObjectPoolConfig<Connection> poolConfig, final U
     this(new HostAndPort(uri.getHost(), uri.getPort()), DefaultJedisClientConfig.create(
         connectionTimeout, soTimeout, infiniteSoTimeout, JedisURIHelper.getUser(uri),
         JedisURIHelper.getPassword(uri), JedisURIHelper.getDBIndex(uri), null,
-        JedisURIHelper.isRedisSSLScheme(uri), sslSocketFactory, sslParameters, hostnameVerifier, null));
+        JedisURIHelper.isRedisSSLScheme(uri), sslSocketFactory, sslParameters, hostnameVerifier,
+        null), poolConfig);
   }
 
   public JedisPooled(final HostAndPort hostAndPort) {

File: src/main/java/redis/clients/jedis/search/SearchResult.java
Patch:
@@ -70,10 +70,10 @@ public SearchResult build(Object data) {
 
       for (int i = 1; i < resp.size(); i += step) {
 
+        String id = BuilderFactory.STRING.build(resp.get(i));
         double score = hasScores ? BuilderFactory.DOUBLE.build(resp.get(i + scoreOffset)) : 1.0;
         byte[] payload = hasPayloads ? (byte[]) resp.get(i + payloadOffset) : null;
         List<byte[]> fields = hasContent ? (List<byte[]>) resp.get(i + contentOffset) : null;
-        String id = new String((byte[]) resp.get(i));
 
         documents.add(Document.load(id, score, payload, fields, decode));
       }

File: src/test/java/redis/clients/jedis/modules/search/AggregationBuilderTest.java
Patch:
@@ -217,7 +217,6 @@ public void loadAll() {
     sc.addSortableNumericField("subj1");
     sc.addSortableNumericField("subj2");
     client.ftCreate(index, IndexOptions.defaultOptions(), sc);
-
     addDocument(new Document("data1").set("name", "abc").set("subj1", 20).set("subj2", 70));
     addDocument(new Document("data2").set("name", "def").set("subj1", 60).set("subj2", 40));
 

File: src/main/java/redis/clients/jedis/search/Document.java
Patch:
@@ -128,7 +128,7 @@ public boolean hasProperty(String key) {
   @Override
   public String toString() {
     return "id:" + this.getId() + ", score: " + this.getScore() +
-            ", payload:" + SafeEncoder.encode(this.getPayload()) +
+            ", payload:" + (this.getPayload() == null ? "null" : SafeEncoder.encode(this.getPayload())) +
             ", properties:" + this.getProperties();
   }
 }

File: src/main/java/redis/clients/jedis/timeseries/AggregationType.java
Patch:
@@ -8,7 +8,8 @@ public enum AggregationType implements Rawable {
   AVG, SUM, MIN, MAX,
   RANGE, COUNT, FIRST, LAST,
   STD_P("STD.P"), STD_S("STD.S"),
-  VAR_P("VAR.P"), VAR_S("VAR.S");
+  VAR_P("VAR.P"), VAR_S("VAR.S"),
+  TWA;
 
   private final byte[] raw;
 

File: src/main/java/redis/clients/jedis/timeseries/TSAlterParams.java
Patch:
@@ -10,6 +10,9 @@
 import redis.clients.jedis.exceptions.JedisException;
 import redis.clients.jedis.params.IParams;
 
+/**
+ * Represents optional arguments of TS.ALTER command.
+ */
 public class TSAlterParams implements IParams {
 
   private Long retentionTime;

File: src/main/java/redis/clients/jedis/search/SearchProtocol.java
Patch:
@@ -50,7 +50,8 @@ public enum SearchKeyword implements Rawable {
     ASC, DESC, PAYLOAD, LIMIT, HIGHLIGHT, FIELDS, TAGS, SUMMARIZE, FRAGS, LEN, SEPARATOR, INKEYS,
     RETURN, /*NOSAVE, PARTIAL, REPLACE,*/ FILTER, GEOFILTER, INCR, MAX, FUZZY, DD, /*DELETE,*/ DEL,
     READ, COUNT, ADD, TEMPORARY, STOPWORDS, NOFREQS, NOFIELDS, NOOFFSETS, /*IF,*/ SET, GET, ON,
-    ASYNC, PREFIX, LANGUAGE_FIELD, SCORE_FIELD, SCORE, PAYLOAD_FIELD, SCORER, PARAMS, DIALECT;
+    ASYNC, PREFIX, LANGUAGE_FIELD, SCORE_FIELD, SCORE, PAYLOAD_FIELD, SCORER, PARAMS, DIALECT,
+    SLOP, TIMEOUT, INORDER, EXPANDER;
 
     private final byte[] raw;
 

File: src/main/java/redis/clients/jedis/json/JsonProtocol.java
Patch:
@@ -20,7 +20,8 @@ public enum JsonCommand implements ProtocolCommand {
     ARRPOP("JSON.ARRPOP"),
     ARRTRIM("JSON.ARRTRIM"),
     CLEAR("JSON.CLEAR"),
-    TOGGLE("JSON.TOGGLE");
+    TOGGLE("JSON.TOGGLE"),
+    DEBUG("JSON.DEBUG");
 
     private final byte[] raw;
 

File: src/main/java/redis/clients/jedis/commands/ClusterCommands.java
Patch:
@@ -16,8 +16,6 @@ public interface ClusterCommands {
 
   String clusterNodes();
 
-  String clusterReplicas(String nodeId);
-
   String clusterMeet(String ip, int port);
 
   String clusterAddSlots(int... slots);
@@ -75,6 +73,8 @@ public interface ClusterCommands {
   @Deprecated
   List<String> clusterSlaves(String nodeId);
 
+  List<String> clusterReplicas(String nodeId);
+
   String clusterFailover();
 
   String clusterFailover(ClusterFailoverOption failoverOption);

File: src/main/java/redis/clients/jedis/BuilderFactory.java
Patch:
@@ -1315,7 +1315,7 @@ private Map<String, Builder> createDecoderMap() {
       tempMappingFunctions.put(StreamConsumerFullInfo.NAME, STRING);
       tempMappingFunctions.put(StreamConsumerFullInfo.SEEN_TIME, LONG);
       tempMappingFunctions.put(StreamConsumerFullInfo.PEL_COUNT, LONG);
-      tempMappingFunctions.put(StreamConsumerFullInfo.PENDING, LONG_LIST);
+      tempMappingFunctions.put(StreamConsumerFullInfo.PENDING, ENCODED_OBJECT_LIST);
 
       return tempMappingFunctions;
     }
@@ -1354,7 +1354,7 @@ private Map<String, Builder> createDecoderMap() {
       Map<String, Builder> tempMappingFunctions = new HashMap<>();
       tempMappingFunctions.put(StreamGroupFullInfo.NAME, STRING);
       tempMappingFunctions.put(StreamGroupFullInfo.CONSUMERS, STREAM_CONSUMER_FULL_INFO_LIST);
-      tempMappingFunctions.put(StreamGroupFullInfo.PENDING, STRING_LIST);
+      tempMappingFunctions.put(StreamGroupFullInfo.PENDING, ENCODED_OBJECT_LIST);
       tempMappingFunctions.put(StreamGroupFullInfo.LAST_DELIVERED, STREAM_ENTRY_ID);
       tempMappingFunctions.put(StreamGroupFullInfo.PEL_COUNT, LONG);
 

File: src/main/java/redis/clients/jedis/commands/FunctionPipelineBinaryCommands.java
Patch:
@@ -3,7 +3,6 @@
 import redis.clients.jedis.Response;
 import redis.clients.jedis.args.FlushMode;
 import redis.clients.jedis.args.FunctionRestorePolicy;
-import redis.clients.jedis.params.FunctionLoadParams;
 
 import java.util.List;
 
@@ -31,9 +30,9 @@ public interface FunctionPipelineBinaryCommands {
 
   Response<List<Object>> functionListWithCode(byte[] libraryNamePattern);
 
-  Response<String> functionLoad(byte[] engineName, byte[] libraryName, byte[] functionCode);
+  Response<String> functionLoad(byte[] functionCode);
 
-  Response<String> functionLoad(byte[] engineName, byte[] libraryName, FunctionLoadParams params, byte[] functionCode);
+  Response<String> functionLoadReplace(byte[] functionCode);
 
   Response<String> functionRestore(byte[] serializedValue);
 

File: src/main/java/redis/clients/jedis/commands/FunctionPipelineCommands.java
Patch:
@@ -3,7 +3,6 @@
 import redis.clients.jedis.Response;
 import redis.clients.jedis.args.FlushMode;
 import redis.clients.jedis.args.FunctionRestorePolicy;
-import redis.clients.jedis.params.FunctionLoadParams;
 import redis.clients.jedis.resps.FunctionStats;
 import redis.clients.jedis.resps.LibraryInfo;
 
@@ -33,9 +32,9 @@ public interface FunctionPipelineCommands {
 
   Response<List<LibraryInfo>> functionListWithCode(String libraryNamePattern);
 
-  Response<String> functionLoad(String engineName, String libraryName, String functionCode);
+  Response<String> functionLoad(String functionCode);
 
-  Response<String> functionLoad(String engineName, String libraryName, FunctionLoadParams params, String functionCode);
+  Response<String> functionLoadReplace(String functionCode);
 
   Response<String> functionRestore(byte[] serializedValue);
 

File: src/main/java/redis/clients/jedis/search/SearchProtocol.java
Patch:
@@ -46,7 +46,7 @@ public enum SearchKeyword implements Rawable {
     ASC, DESC, PAYLOAD, LIMIT, HIGHLIGHT, FIELDS, TAGS, SUMMARIZE, FRAGS, LEN, SEPARATOR, INKEYS,
     RETURN, /*NOSAVE, PARTIAL, REPLACE,*/ FILTER, GEOFILTER, INCR, MAX, FUZZY, DD, /*DELETE,*/ DEL,
     READ, COUNT, ADD, TEMPORARY, STOPWORDS, NOFREQS, NOFIELDS, NOOFFSETS, /*IF,*/ SET, GET, ON,
-    ASYNC, PREFIX, LANGUAGE_FIELD, SCORE_FIELD, SCORE, PAYLOAD_FIELD, SCORER, PARAMS;
+    ASYNC, PREFIX, LANGUAGE_FIELD, SCORE_FIELD, SCORE, PAYLOAD_FIELD, SCORER, PARAMS, DIALECT;
 
     private final byte[] raw;
 

File: src/main/java/redis/clients/jedis/commands/RedisModuleCommands.java
Patch:
@@ -1,6 +1,7 @@
 package redis.clients.jedis.commands;
 
 import redis.clients.jedis.bloom.RedisBloomCommands;
+import redis.clients.jedis.graph.RedisGraphCommands;
 import redis.clients.jedis.json.RedisJsonCommands;
 import redis.clients.jedis.search.RediSearchCommands;
 import redis.clients.jedis.timeseries.RedisTimeSeriesCommands;
@@ -9,6 +10,7 @@ public interface RedisModuleCommands extends
     RediSearchCommands,
     RedisJsonCommands,
     RedisTimeSeriesCommands,
-    RedisBloomCommands {
+    RedisBloomCommands,
+    RedisGraphCommands {
 
 }

File: src/main/java/redis/clients/jedis/commands/RedisModulePipelineCommands.java
Patch:
@@ -1,6 +1,7 @@
 package redis.clients.jedis.commands;
 
 import redis.clients.jedis.bloom.RedisBloomPipelineCommands;
+import redis.clients.jedis.graph.RedisGraphPipelineCommands;
 import redis.clients.jedis.json.RedisJsonPipelineCommands;
 import redis.clients.jedis.search.RediSearchPipelineCommands;
 import redis.clients.jedis.timeseries.RedisTimeSeriesPipelineCommands;
@@ -9,6 +10,7 @@ public interface RedisModulePipelineCommands extends
     RediSearchPipelineCommands,
     RedisJsonPipelineCommands,
     RedisTimeSeriesPipelineCommands,
-    RedisBloomPipelineCommands {
+    RedisBloomPipelineCommands,
+    RedisGraphPipelineCommands {
 
 }

File: src/test/java/redis/clients/jedis/modules/RedisModulesPipelineTest.java
Patch:
@@ -71,6 +71,7 @@ public void search() {
     Response<String> dropIndexDD = p.ftDropIndexDD(index);
 
     p.sync();
+    c.close();
 
     assertEquals("OK", create.get());
     assertEquals("OK", alter.get());
@@ -94,8 +95,6 @@ public void search() {
     Map<String, List<String>> expected = new HashMap<>();
     expected.put("bar", Collections.singletonList("foo"));
     assertEquals(expected, synDump.get());
-
-    c.close();
   }
 
   @Test

File: src/main/java/redis/clients/jedis/Protocol.java
Patch:
@@ -236,7 +236,8 @@ public static enum Command implements ProtocolCommand {
     GEORADIUSBYMEMBER, GEORADIUSBYMEMBER_RO, BITFIELD, TOUCH, SWAPDB, MEMORY, BZPOPMIN, BZPOPMAX,
     XADD, XLEN, XDEL, XTRIM, XRANGE, XREVRANGE, XREAD, XACK, XGROUP, XREADGROUP, XPENDING, XCLAIM,
     XAUTOCLAIM, XINFO, BITFIELD_RO, ROLE, FAILOVER, GEOSEARCH, GEOSEARCHSTORE, EVAL_RO, EVALSHA_RO,
-    LOLWUT, EXPIRETIME, PEXPIRETIME, FUNCTION, FCALL, FCALL_RO, @Deprecated STRALGO;
+    LOLWUT, EXPIRETIME, PEXPIRETIME, FUNCTION, FCALL, FCALL_RO, LMPOP, BLMPOP, ZMPOP, BZMPOP,
+    @Deprecated STRALGO;
 
     private final byte[] raw;
 

File: src/test/java/redis/clients/jedis/resps/ResponsesToStringTest.java
Patch:
@@ -38,7 +38,7 @@ public void KeyedZSetElementTest() {
 
         // test toString
         String toStringResult = elem.toString();
-        assertThat(toStringResult, CoreMatchers.containsString("key-name"));
+        assertThat(toStringResult, CoreMatchers.containsString("key=key-name"));
         assertThat(toStringResult, CoreMatchers.containsString("elem"));
         assertThat(toStringResult, CoreMatchers.containsString("1"));
 

File: src/main/java/redis/clients/jedis/Protocol.java
Patch:
@@ -236,7 +236,7 @@ public static enum Command implements ProtocolCommand {
     GEORADIUSBYMEMBER, GEORADIUSBYMEMBER_RO, BITFIELD, TOUCH, SWAPDB, MEMORY, BZPOPMIN, BZPOPMAX,
     XADD, XLEN, XDEL, XTRIM, XRANGE, XREVRANGE, XREAD, XACK, XGROUP, XREADGROUP, XPENDING, XCLAIM,
     XAUTOCLAIM, XINFO, BITFIELD_RO, ROLE, FAILOVER, GEOSEARCH, GEOSEARCHSTORE, EVAL_RO, EVALSHA_RO,
-    LOLWUT, EXPIRETIME, PEXPIRETIME, @Deprecated STRALGO;
+    LOLWUT, EXPIRETIME, PEXPIRETIME, FUNCTION, FCALL, FCALL_RO, @Deprecated STRALGO;
 
     private final byte[] raw;
 
@@ -261,7 +261,8 @@ public static enum Keyword implements Rawable {
     TIMEOUT, ABORT, NX, XX, EX, PX, EXAT, PXAT, CH, WITHCOORD, WITHDIST, WITHHASH, STOREDIST, COPY,
     KEEPTTL, AUTH, AUTH2, INFO, CHANNELS, NUMPAT, NUMSUB, FULL, NOW, VERSION, KEYS, IDX, SCHEDULE,
     ANY, FROMMEMBER, FROMLONLAT, BYRADIUS, BYBOX, BYLEX, BYSCORE, REV, MINMATCHLEN, WITHMATCHLEN,
-    PURGE, STATS, CREATECONSUMER, @Deprecated LCS, @Deprecated STRINGS;
+    PURGE, STATS, CREATECONSUMER, DELETE, LIBRARYNAME, WITHCODE, DESCRIPTION,
+    @Deprecated LCS, @Deprecated STRINGS;
 
     private final byte[] raw;
 

File: src/main/java/redis/clients/jedis/commands/JedisBinaryCommands.java
Patch:
@@ -2,5 +2,6 @@
 
 public interface JedisBinaryCommands extends KeyBinaryCommands, StringBinaryCommands,
     ListBinaryCommands, HashBinaryCommands, SetBinaryCommands, SortedSetBinaryCommands,
-    GeoBinaryCommands, HyperLogLogBinaryCommands, StreamBinaryCommands, ScriptingKeyBinaryCommands {
+    GeoBinaryCommands, HyperLogLogBinaryCommands, StreamBinaryCommands, ScriptingKeyBinaryCommands,
+    FunctionBinaryCommands {
 }

File: src/main/java/redis/clients/jedis/commands/JedisCommands.java
Patch:
@@ -2,5 +2,5 @@
 
 public interface JedisCommands extends KeyCommands, StringCommands, ListCommands, HashCommands,
     SetCommands, SortedSetCommands, GeoCommands, HyperLogLogCommands, StreamCommands,
-    ScriptingKeyCommands {
+    ScriptingKeyCommands, FunctionCommands {
 }

File: src/main/java/redis/clients/jedis/commands/PipelineBinaryCommands.java
Patch:
@@ -4,5 +4,5 @@ public interface PipelineBinaryCommands extends KeyPipelineBinaryCommands,
     StringPipelineBinaryCommands, ListPipelineBinaryCommands, HashPipelineBinaryCommands,
     SetPipelineBinaryCommands, SortedSetPipelineBinaryCommands, GeoPipelineBinaryCommands,
     HyperLogLogPipelineBinaryCommands, StreamPipelineBinaryCommands,
-    ScriptingKeyPipelineBinaryCommands, SampleBinaryKeyedPipelineCommands {
+    ScriptingKeyPipelineBinaryCommands, SampleBinaryKeyedPipelineCommands, FunctionPipelineBinaryCommands {
 }

File: src/main/java/redis/clients/jedis/commands/PipelineCommands.java
Patch:
@@ -3,5 +3,5 @@
 public interface PipelineCommands extends KeyPipelineCommands, StringPipelineCommands,
     ListPipelineCommands, HashPipelineCommands, SetPipelineCommands, SortedSetPipelineCommands,
     GeoPipelineCommands, HyperLogLogPipelineCommands, StreamPipelineCommands,
-    ScriptingKeyPipelineCommands, SampleKeyedPipelineCommands {
+    ScriptingKeyPipelineCommands, SampleKeyedPipelineCommands, FunctionPipelineCommands {
 }

File: src/test/java/redis/clients/jedis/commands/jedis/AllKindOfValuesCommandsTest.java
Patch:
@@ -351,13 +351,15 @@ public void expireAt() {
     jedis.set("foo", "bar");
     unixTime = (System.currentTimeMillis() / 1000L) + 20;
     assertEquals(1, jedis.expireAt("foo", unixTime));
+    assertEquals(1, jedis.expireAt("foo", unixTime, ExpiryOption.XX));
 
     // Binary
     assertEquals(0, jedis.expireAt(bfoo, unixTime));
 
     jedis.set(bfoo, bbar);
     unixTime = (System.currentTimeMillis() / 1000L) + 20;
     assertEquals(1, jedis.expireAt(bfoo, unixTime));
+    assertEquals(1, jedis.expireAt(bfoo, unixTime, ExpiryOption.XX));
   }
 
   @Test

File: src/test/java/redis/clients/jedis/commands/unified/AllKindOfValuesCommandsTestBase.java
Patch:
@@ -308,13 +308,15 @@ public void expireAt() {
     jedis.set("foo", "bar");
     unixTime = (System.currentTimeMillis() / 1000L) + 20;
     assertEquals(1, jedis.expireAt("foo", unixTime));
+    assertEquals(1, jedis.expireAt("foo", unixTime, ExpiryOption.XX));
 
     // Binary
     assertEquals(0, jedis.expireAt(bfoo, unixTime));
 
     jedis.set(bfoo, bbar);
     unixTime = (System.currentTimeMillis() / 1000L) + 20;
     assertEquals(1, jedis.expireAt(bfoo, unixTime));
+    assertEquals(1, jedis.expireAt(bfoo, unixTime, ExpiryOption.XX));
   }
 
   @Test

File: src/main/java/redis/clients/jedis/Protocol.java
Patch:
@@ -236,7 +236,7 @@ public static enum Command implements ProtocolCommand {
     XDEL, XTRIM, XRANGE, XREVRANGE, XREAD, XACK, XGROUP, XREADGROUP, XPENDING, XCLAIM, XAUTOCLAIM,
     XINFO, BITFIELD_RO, LPOS, ZMSCORE, BZPOPMIN, BZPOPMAX, BLMOVE, LMOVE, COPY, ROLE, FAILOVER,
     @Deprecated STRALGO, GEOSEARCH, GEOSEARCHSTORE, LOLWUT, REPLICAOF, ZRANGESTORE, SINTERCARD,
-    ZINTERCARD, SORT_RO, EVAL_RO, EVALSHA_RO, LCS;
+    ZINTERCARD, SORT_RO, EVAL_RO, EVALSHA_RO, LCS, EXPIRETIME, PEXPIRETIME;
 
     private final byte[] raw;
 

File: src/main/java/redis/clients/jedis/MultiNodePipelineBase.java
Patch:
@@ -2998,7 +2998,7 @@ public Response<Long> bitop(BitOP op, byte[] destKey, byte[]... srcKeys) {
 
   @Override
   public Response<LCSMatchResult> strAlgoLCSKeys(byte[] keyA, byte[] keyB, StrAlgoLCSParams params) {
-    return appendCommand(commandObjects.strAlgoLCSStrings(keyA, keyB, params));
+    return appendCommand(commandObjects.strAlgoLCSKeys(keyA, keyB, params));
   }
 
   @Override

File: src/main/java/redis/clients/jedis/Pipeline.java
Patch:
@@ -3008,7 +3008,7 @@ public Response<Long> bitop(BitOP op, byte[] destKey, byte[]... srcKeys) {
 
   @Override
   public Response<LCSMatchResult> strAlgoLCSKeys(byte[] keyA, byte[] keyB, StrAlgoLCSParams params) {
-    return appendCommand(commandObjects.strAlgoLCSStrings(keyA, keyB, params));
+    return appendCommand(commandObjects.strAlgoLCSKeys(keyA, keyB, params));
   }
 
   @Override

File: src/main/java/redis/clients/jedis/TransactionBase.java
Patch:
@@ -3073,7 +3073,7 @@ public Response<Long> bitop(BitOP op, byte[] destKey, byte[]... srcKeys) {
 
   @Override
   public Response<LCSMatchResult> strAlgoLCSKeys(byte[] keyA, byte[] keyB, StrAlgoLCSParams params) {
-    return appendCommand(commandObjects.strAlgoLCSStrings(keyA, keyB, params));
+    return appendCommand(commandObjects.strAlgoLCSKeys(keyA, keyB, params));
   }
 
   @Override

File: src/main/java/redis/clients/jedis/commands/StringBinaryCommands.java
Patch:
@@ -76,5 +76,6 @@ public interface StringBinaryCommands {
 
   long bitop(BitOP op, byte[] destKey, byte[]... srcKeys);
 
-  LCSMatchResult strAlgoLCSKeys(final byte[] keyA, final byte[] keyB, final StrAlgoLCSParams params);
+  LCSMatchResult strAlgoLCSKeys(byte[] keyA, byte[] keyB, StrAlgoLCSParams params);
+
 }

File: src/main/java/redis/clients/jedis/commands/StringCommands.java
Patch:
@@ -436,9 +436,9 @@ public interface StringCommands {
 
   /**
    * Calculate the longest common subsequence of keyA and keyB.
-   * @param keyA keyA
-   * @param keyB keyB
-   * @param params the params
+   * @param keyA
+   * @param keyB
+   * @param params
    * @return According to StrAlgoLCSParams to decide to return content to fill LCSMatchResult.
    */
   LCSMatchResult strAlgoLCSKeys(String keyA, String keyB, StrAlgoLCSParams params);

File: src/main/java/redis/clients/jedis/commands/StringPipelineBinaryCommands.java
Patch:
@@ -77,5 +77,6 @@ public interface StringPipelineBinaryCommands {
 
   Response<Long> bitop(BitOP op, byte[] destKey, byte[]... srcKeys);
 
-  Response<LCSMatchResult> strAlgoLCSKeys(final byte[] keyA, final byte[] keyB, final StrAlgoLCSParams params);
+  Response<LCSMatchResult> strAlgoLCSKeys(byte[] keyA, byte[] keyB, StrAlgoLCSParams params);
+
 }

File: src/main/java/redis/clients/jedis/DefaultJedisSocketFactory.java
Patch:
@@ -54,7 +54,7 @@ public DefaultJedisSocketFactory(HostAndPort hostAndPort, JedisClientConfig conf
     }
   }
 
-  private Socket connectToFirstSuccsefulHost(HostAndPort hostAndPort) throws Exception {
+  private Socket connectToFirstSuccessfulHost(HostAndPort hostAndPort) throws Exception {
     List<InetAddress> hosts = Arrays.asList(InetAddress.getAllByName(hostAndPort.getHost()));
     if (hosts.size() > 1) {
       Collections.shuffle(hosts);
@@ -84,7 +84,7 @@ public Socket createSocket() throws JedisConnectionException {
     Socket socket = null;
     try {
       HostAndPort _hostAndPort = getSocketHostAndPort();
-      socket = connectToFirstSuccsefulHost(_hostAndPort);
+      socket = connectToFirstSuccessfulHost(_hostAndPort);
       socket.setSoTimeout(socketTimeout);
 
       if (ssl) {

File: src/main/java/redis/clients/jedis/commands/ListBinaryCommands.java
Patch:
@@ -40,9 +40,9 @@ public interface ListBinaryCommands {
 
   long linsert(byte[] key, ListPosition where, byte[] pivot, byte[] value);
 
-  long lpushx(byte[] key, byte[]... arg);
+  long lpushx(byte[] key, byte[]... args);
 
-  long rpushx(byte[] key, byte[]... arg);
+  long rpushx(byte[] key, byte[]... args);
 
   List<byte[]> blpop(int timeout, byte[]... keys);
 

File: src/main/java/redis/clients/jedis/commands/ListPipelineBinaryCommands.java
Patch:
@@ -41,9 +41,9 @@ public interface ListPipelineBinaryCommands {
 
   Response<Long> linsert(byte[] key, ListPosition where, byte[] pivot, byte[] value);
 
-  Response<Long> lpushx(byte[] key, byte[]... arg);
+  Response<Long> lpushx(byte[] key, byte[]... args);
 
-  Response<Long> rpushx(byte[] key, byte[]... arg);
+  Response<Long> rpushx(byte[] key, byte[]... args);
 
   Response<List<byte[]>> blpop(int timeout, byte[]... keys);
 

File: src/main/java/redis/clients/jedis/commands/ListPipelineCommands.java
Patch:
@@ -42,9 +42,9 @@ public interface ListPipelineCommands {
 
   Response<Long> linsert(String key, ListPosition where, String pivot, String value);
 
-  Response<Long> lpushx(String key, String... string);
+  Response<Long> lpushx(String key, String... strings);
 
-  Response<Long> rpushx(String key, String... string);
+  Response<Long> rpushx(String key, String... strings);
 
   Response<List<String>> blpop(int timeout, String key);
 

File: src/main/java/redis/clients/jedis/commands/SetBinaryCommands.java
Patch:
@@ -8,11 +8,11 @@
 
 public interface SetBinaryCommands {
 
-  long sadd(byte[] key, byte[]... member);
+  long sadd(byte[] key, byte[]... members);
 
   Set<byte[]> smembers(byte[] key);
 
-  long srem(byte[] key, byte[]... member);
+  long srem(byte[] key, byte[]... members);
 
   byte[] spop(byte[] key);
 

File: src/main/java/redis/clients/jedis/commands/SetPipelineBinaryCommands.java
Patch:
@@ -9,11 +9,11 @@
 
 public interface SetPipelineBinaryCommands {
 
-  Response<Long> sadd(byte[] key, byte[]... member);
+  Response<Long> sadd(byte[] key, byte[]... members);
 
   Response<Set<byte[]>> smembers(byte[] key);
 
-  Response<Long> srem(byte[] key, byte[]... member);
+  Response<Long> srem(byte[] key, byte[]... members);
 
   Response<byte[]> spop(byte[] key);
 

File: src/main/java/redis/clients/jedis/commands/SetPipelineCommands.java
Patch:
@@ -9,11 +9,11 @@
 
 public interface SetPipelineCommands {
 
-  Response<Long> sadd(String key, String... member);
+  Response<Long> sadd(String key, String... members);
 
   Response<Set<String>> smembers(String key);
 
-  Response<Long> srem(String key, String... member);
+  Response<Long> srem(String key, String... members);
 
   Response<String> spop(String key);
 

File: src/main/java/redis/clients/jedis/params/SortingParams.java
Patch:
@@ -60,7 +60,7 @@ public SortingParams by(final byte[] pattern) {
   /**
    * No sorting.
    * <p>
-   * This is useful if you want to retrieve a external key (using {@link #get(String...) GET}) but
+   * This is useful if you want to retrieve an external key (using {@link #get(String...) GET}) but
    * you don't want the sorting overhead.
    * @return the SortingParams Object
    */

File: src/main/java/redis/clients/jedis/resps/ScanResult.java
Patch:
@@ -28,7 +28,7 @@ public String getCursor() {
 
   /**
    * Is the iteration complete. I.e. was the complete dataset scanned.
-   * @return true if the iteration is complete
+   * @return {@code true} if the iteration is complete
    */
   public boolean isCompleteIteration() {
     return ScanParams.SCAN_POINTER_START.equals(getCursor());

File: src/main/java/redis/clients/jedis/Protocol.java
Patch:
@@ -235,7 +235,7 @@ public static enum Command implements ProtocolCommand {
     GEORADIUSBYMEMBER, GEORADIUSBYMEMBER_RO, BITFIELD, HSTRLEN, TOUCH, SWAPDB, MEMORY, XADD, XLEN,
     XDEL, XTRIM, XRANGE, XREVRANGE, XREAD, XACK, XGROUP, XREADGROUP, XPENDING, XCLAIM, XAUTOCLAIM,
     XINFO, BITFIELD_RO, LPOS, ZMSCORE, BZPOPMIN, BZPOPMAX, BLMOVE, LMOVE, COPY, ROLE, FAILOVER,
-    STRALGO, GEOSEARCH, GEOSEARCHSTORE, LOLWUT, REPLICAOF;
+    STRALGO, GEOSEARCH, GEOSEARCHSTORE, LOLWUT, REPLICAOF, ZRANGESTORE;
 
     private final byte[] raw;
 
@@ -259,7 +259,7 @@ public static enum Keyword implements Rawable {
     CAT, GENPASS, LOG, INCR, SAVE, JUSTID, WITHVALUES, UNBLOCK, NOMKSTREAM, MINID, DB, ABSTTL, TO,
     TIMEOUT, ABORT, NX, XX, EX, PX, EXAT, PXAT, CH, WITHCOORD, WITHDIST, WITHHASH, STOREDIST, COPY,
     KEEPTTL, AUTH, AUTH2, INFO, CHANNELS, NUMPAT, NUMSUB, LCS, KEYS, STRINGS, FULL, NOW, VERSION,
-    ANY, FROMMEMBER, FROMLONLAT, BYRADIUS, BYBOX;
+    ANY, FROMMEMBER, FROMLONLAT, BYRADIUS, BYBOX, BYLEX, BYSCORE, REV;
 
     private final byte[] raw;
 

File: src/test/java/redis/clients/jedis/commands/jedis/AccessControlListCommandsTest.java
Patch:
@@ -206,7 +206,7 @@ public void aclExcudeSingleCommand() {
     } catch (JedisAccessControlException e) {
       assertNull(result);
       assertEquals(
-        "NOPERM this user has no permissions to run the 'ping' command or its subcommand",
+        "NOPERM this user has no permissions to run the 'ping' command",
         e.getMessage());
     }
 
@@ -247,7 +247,7 @@ public void basicPermissionsTest() {
     } catch (JedisAccessControlException e) {
       assertNull(result);
       assertEquals(
-        "NOPERM this user has no permissions to run the 'set' command or its subcommand",
+        "NOPERM this user has no permissions to run the 'set' command",
         e.getMessage());
     }
 

File: src/main/java/redis/clients/jedis/Protocol.java
Patch:
@@ -235,7 +235,7 @@ public static enum Command implements ProtocolCommand {
     GEORADIUSBYMEMBER, GEORADIUSBYMEMBER_RO, BITFIELD, HSTRLEN, TOUCH, SWAPDB, MEMORY, XADD, XLEN,
     XDEL, XTRIM, XRANGE, XREVRANGE, XREAD, XACK, XGROUP, XREADGROUP, XPENDING, XCLAIM, XAUTOCLAIM,
     XINFO, BITFIELD_RO, LPOS, ZMSCORE, BZPOPMIN, BZPOPMAX, BLMOVE, LMOVE, COPY, ROLE, FAILOVER,
-    STRALGO;
+    STRALGO, GEOSEARCH, GEOSEARCHSTORE;
 
     private final byte[] raw;
 
@@ -258,7 +258,8 @@ public static enum Keyword implements Rawable {
     RETRYCOUNT, USAGE, SAMPLES, STREAM, GROUPS, CONSUMERS, SETUSER, GETUSER, DELUSER, WHOAMI, USERS,
     CAT, GENPASS, LOG, INCR, SAVE, JUSTID, WITHVALUES, UNBLOCK, NOMKSTREAM, MINID, DB, ABSTTL, TO,
     TIMEOUT, ABORT, NX, XX, EX, PX, EXAT, PXAT, CH, WITHCOORD, WITHDIST, WITHHASH, STOREDIST, COPY,
-    KEEPTTL, AUTH, AUTH2, INFO, CHANNELS, NUMPAT, NUMSUB, LCS, KEYS, STRINGS, ANY;
+    KEEPTTL, AUTH, AUTH2, INFO, CHANNELS, NUMPAT, NUMSUB, LCS, KEYS, STRINGS,
+    ANY, FROMMEMBER, FROMLONLAT, BYRADIUS, BYBOX;
 
     private final byte[] raw;
 

File: src/main/java/redis/clients/jedis/commands/StringBinaryCommands.java
Patch:
@@ -2,6 +2,7 @@
 
 import java.util.List;
 
+import redis.clients.jedis.args.BitCountOption;
 import redis.clients.jedis.args.BitOP;
 import redis.clients.jedis.params.BitPosParams;
 import redis.clients.jedis.params.GetExParams;
@@ -63,6 +64,8 @@ public interface StringBinaryCommands {
 
   long bitcount(byte[] key, long start, long end);
 
+  long bitcount(byte[] key, long start, long end, BitCountOption option);
+
   long bitpos(byte[] key, boolean value);
 
   long bitpos(byte[] key, boolean value, BitPosParams params);

File: src/main/java/redis/clients/jedis/commands/StringPipelineCommands.java
Patch:
@@ -1,6 +1,7 @@
 package redis.clients.jedis.commands;
 
 import redis.clients.jedis.Response;
+import redis.clients.jedis.args.BitCountOption;
 import redis.clients.jedis.args.BitOP;
 import redis.clients.jedis.params.BitPosParams;
 import redis.clients.jedis.params.GetExParams;
@@ -64,6 +65,8 @@ public interface StringPipelineCommands {
 
   Response<Long> bitcount(String key, long start, long end);
 
+  Response<Long> bitcount(byte[] key, long start, long end, BitCountOption option);
+
   Response<Long> bitpos(String key, boolean value);
 
   Response<Long> bitpos(String key, boolean value, BitPosParams params);

File: src/test/java/redis/clients/jedis/commands/jedis/BitCommandsTest.java
Patch:
@@ -10,6 +10,7 @@
 import org.junit.Test;
 
 import redis.clients.jedis.Protocol;
+import redis.clients.jedis.args.BitCountOption;
 import redis.clients.jedis.args.BitOP;
 import redis.clients.jedis.exceptions.JedisDataException;
 import redis.clients.jedis.params.BitPosParams;
@@ -153,6 +154,8 @@ public void bitCount() {
 
     assertEquals(3, (long) jedis.bitcount("foo", 2L, 5L));
     assertEquals(3, (long) jedis.bitcount("foo".getBytes(), 2L, 5L));
+    assertEquals(3, (long) jedis.bitcount("foo".getBytes(), 2L, 5L, BitCountOption.BYTE));
+    assertEquals(0, (long) jedis.bitcount("foo".getBytes(), 2L, 5L, BitCountOption.BIT));
   }
 
   @Test

File: src/main/java/redis/clients/jedis/Protocol.java
Patch:
@@ -258,7 +258,7 @@ public static enum Keyword implements Rawable {
     RETRYCOUNT, USAGE, SAMPLES, STREAM, GROUPS, CONSUMERS, SETUSER, GETUSER, DELUSER, WHOAMI, USERS,
     CAT, GENPASS, LOG, INCR, SAVE, JUSTID, WITHVALUES, UNBLOCK, NOMKSTREAM, MINID, DB, ABSTTL, TO,
     TIMEOUT, ABORT, NX, XX, EX, PX, EXAT, PXAT, CH, WITHCOORD, WITHDIST, WITHHASH, STOREDIST, COPY,
-    KEEPTTL, AUTH, AUTH2, INFO, CHANNELS, NUMPAT, NUMSUB, LCS, KEYS, STRINGS;
+    KEEPTTL, AUTH, AUTH2, INFO, CHANNELS, NUMPAT, NUMSUB, LCS, KEYS, STRINGS, ANY;
 
     private final byte[] raw;
 

File: src/main/java/redis/clients/jedis/resps/KeyedListElement.java
Patch:
@@ -30,7 +30,7 @@ public String getElement() {
   @Override
   public boolean equals(Object o) {
     if (this == o) return true;
-    if (!(o instanceof KeyedZSetElement)) return false;
+    if (!(o instanceof KeyedListElement)) return false;
 
     KeyedListElement other = (KeyedListElement) o;
     return key.equals(other.key) && element.equals(other.element);

File: src/test/java/redis/clients/jedis/commands/jedis/SlowlogCommandsTest.java
Patch:
@@ -60,6 +60,7 @@ public void slowlog() {
 
 //    assertEquals(7, jedis.slowlogLen());
     assertTrue(jedis.slowlogLen() > 5 && jedis.slowlogLen() < 12);
+    assertTrue(jedis.slowlogGet().toString().contains("SLOWLOG"));
   }
 
   @Test

File: src/test/java/redis/clients/jedis/commands/jedis/StreamsCommandsTest.java
Patch:
@@ -189,6 +189,7 @@ public void xrange() {
     List<StreamEntry> range2 = jedis.xrange("xrange-stream", (StreamEntryID) null,
       (StreamEntryID) null, 3);
     assertEquals(2, range2.size());
+    assertEquals(range2.get(0).toString(), id1 + " " + map);
 
     List<StreamEntry> range3 = jedis.xrange("xrange-stream", id1, null, 2);
     assertEquals(2, range3.size());
@@ -466,6 +467,7 @@ public void xpendingWithParams() {
     assertEquals(id1, pendingRange.get(0).getID());
     assertEquals(1, pendingRange.get(0).getDeliveredTimes());
     assertEquals("xpendeing-consumer", pendingRange.get(0).getConsumerName());
+    assertTrue(pendingRange.get(0).toString().contains("xpendeing-consumer"));
 
     // Without consumer
     pendingRange = jedis.xpending("xpendeing-stream", "xpendeing-group", new XPendingParams().count(3));

File: src/main/java/redis/clients/jedis/executors/ClusterCommandExecutor.java
Patch:
@@ -12,6 +12,7 @@
 import redis.clients.jedis.Protocol;
 import redis.clients.jedis.exceptions.*;
 import redis.clients.jedis.providers.ClusterConnectionProvider;
+import redis.clients.jedis.util.IOUtils;
 
 public class ClusterCommandExecutor implements CommandExecutor {
 
@@ -81,9 +82,7 @@ public final <T> T executeCommand(CommandObject<T> commandObject) {
           provider.renewSlotCache(connection);
         }
       } finally {
-        if (connection != null) {
-          connection.close();
-        }
+        IOUtils.closeQuietly(connection);
       }
       if (Instant.now().isAfter(deadline)) {
         throw new JedisClusterOperationException("Cluster retry deadline exceeded.");

File: src/main/java/redis/clients/jedis/JedisSentinelPool.java
Patch:
@@ -226,7 +226,7 @@ private HostAndPort initSentinels(Set<HostAndPort> sentinels, final String maste
 
       LOG.debug("Connecting to Sentinel {}", sentinel);
 
-      try (Sentinel jedis = new Sentinel(sentinel, sentinelClientConfig)) {
+      try (Jedis jedis = new Jedis(sentinel, sentinelClientConfig)) {
 
         List<String> masterAddr = jedis.sentinelGetMasterAddrByName(masterName);
 
@@ -319,7 +319,7 @@ protected class MasterListener extends Thread {
     protected String host;
     protected int port;
     protected long subscribeRetryWaitTimeMillis = 5000;
-    protected volatile Sentinel j;
+    protected volatile Jedis j;
     protected AtomicBoolean running = new AtomicBoolean(false);
 
     protected MasterListener() {
@@ -352,7 +352,7 @@ public void run() {
           }
           
           final HostAndPort hostPort = new HostAndPort(host, port);
-          j = new Sentinel(hostPort, sentinelClientConfig);
+          j = new Jedis(hostPort, sentinelClientConfig);
 
           // code for active refresh
           List<String> masterAddr = j.sentinelGetMasterAddrByName(masterName);

File: src/test/java/redis/clients/jedis/util/JedisSentinelTestUtil.java
Patch:
@@ -4,13 +4,13 @@
 
 import redis.clients.jedis.HostAndPort;
 import redis.clients.jedis.JedisPubSub;
-import redis.clients.jedis.Sentinel;
+import redis.clients.jedis.Jedis;
 import redis.clients.jedis.exceptions.FailoverAbortedException;
 
 public class JedisSentinelTestUtil {
 
   public static HostAndPort waitForNewPromotedMaster(final String masterName,
-      final Sentinel sentinelJedis, final Sentinel commandJedis) throws InterruptedException {
+      final Jedis sentinelJedis, final Jedis commandJedis) throws InterruptedException {
 
     final AtomicReference<String> newmaster = new AtomicReference<String>("");
 

File: src/main/java/redis/clients/jedis/commands/ClusterCommands.java
Patch:
@@ -26,6 +26,8 @@ public interface ClusterCommands {
 
   List<String> clusterGetKeysInSlot(int slot, int count);
 
+  List<byte[]> clusterGetKeysInSlotBinary(int slot, int count);
+
   String clusterSetSlotNode(int slot, String nodeId);
 
   String clusterSetSlotMigrating(int slot, String nodeId);

File: src/main/java/redis/clients/jedis/JedisClusterInfoCache.java
Patch:
@@ -104,12 +104,10 @@ public JedisClusterInfoCache(final GenericObjectPoolConfig<Jedis> poolConfig,
   }
 
   public void discoverClusterNodesAndSlots(Jedis jedis) {
+    List<Object> slots = jedis.clusterSlots();
     w.lock();
-
     try {
       reset();
-      List<Object> slots = jedis.clusterSlots();
-
       for (Object slotInfoObj : slots) {
         List<Object> slotInfo = (List<Object>) slotInfoObj;
 

File: src/main/java/redis/clients/jedis/commands/BasicCommands.java
Patch:
@@ -134,9 +134,10 @@ public interface BasicCommands {
   /**
    * Stop all the client. Perform a SAVE (if one save point is configured). Flush the append only
    * file if AOF is enabled quit the server
-   * @return only in case of error.
+   * @return {@code null}
+   * @throws JedisException only in case of error.
    */
-  String shutdown();
+  String shutdown() throws JedisException;
 
   /**
    * @see SaveMode

File: src/main/java/redis/clients/jedis/Protocol.java
Patch:
@@ -21,6 +21,7 @@ public final class Protocol {
   private static final String NOSCRIPT_PREFIX = "NOSCRIPT ";
   private static final String WRONGPASS_PREFIX = "WRONGPASS";
   private static final String NOPERM_PREFIX = "NOPERM";
+  private static final String EXECABORT_PREFIX = "EXECABORT ";
 
   public static final String DEFAULT_HOST = "localhost";
   public static final int DEFAULT_PORT = 6379;
@@ -131,6 +132,8 @@ private static void processError(final RedisInputStream is) {
       throw new JedisAccessControlException(message);
     } else if (message.startsWith(NOPERM_PREFIX)) {
       throw new JedisAccessControlException(message);
+    } else if (message.startsWith(EXECABORT_PREFIX)) {
+      throw new AbortedTransactionException(message);
     }
     throw new JedisDataException(message);
   }

File: src/main/java/redis/clients/jedis/commands/AdvancedBinaryJedisCommands.java
Patch:
@@ -3,6 +3,7 @@
 import java.util.List;
 
 import redis.clients.jedis.AccessControlUser;
+import redis.clients.jedis.args.ClientType;
 import redis.clients.jedis.args.UnblockType;
 import redis.clients.jedis.params.MigrateParams;
 import redis.clients.jedis.params.ClientKillParams;
@@ -56,6 +57,8 @@ String migrate(String host, int port, int destinationDB, int timeout, MigratePar
 
   byte[] clientListBinary();
 
+  byte[] clientListBinary(ClientType type);
+
   byte[] clientListBinary(long... clientIds);
 
   byte[] clientInfoBinary();

File: src/main/java/redis/clients/jedis/commands/AdvancedJedisCommands.java
Patch:
@@ -4,6 +4,7 @@
 
 import redis.clients.jedis.AccessControlLogEntry;
 import redis.clients.jedis.AccessControlUser;
+import redis.clients.jedis.args.ClientType;
 import redis.clients.jedis.args.UnblockType;
 import redis.clients.jedis.params.MigrateParams;
 import redis.clients.jedis.params.ClientKillParams;
@@ -50,6 +51,8 @@ String migrate(String host, int port, int destinationDB, int timeout, MigratePar
 
   String clientList();
 
+  String clientList(ClientType type);
+
   String clientList(long... clientIds);
 
   String clientInfo();

File: src/main/java/redis/clients/jedis/commands/Commands.java
Patch:
@@ -11,6 +11,7 @@
 import redis.clients.jedis.args.ListDirection;
 import redis.clients.jedis.args.UnblockType;
 import redis.clients.jedis.ZParams;
+import redis.clients.jedis.args.ClientType;
 import redis.clients.jedis.params.GetExParams;
 import redis.clients.jedis.params.MigrateParams;
 import redis.clients.jedis.params.ClientKillParams;
@@ -483,6 +484,8 @@ default void restoreReplace(String key, int ttl, byte[] serializedValue) {
 
   void clientList();
 
+  void clientList(ClientType type);
+
   void clientList(long... clientIds);
 
   void clientInfo();

File: src/main/java/redis/clients/jedis/params/Params.java
Patch:
@@ -6,6 +6,7 @@
 import java.util.Map.Entry;
 
 import redis.clients.jedis.Protocol;
+import redis.clients.jedis.args.Rawable;
 import redis.clients.jedis.util.SafeEncoder;
 
 public abstract class Params {
@@ -30,6 +31,8 @@ public byte[][] getByteParams() {
       if (value != null) {
         if (value instanceof byte[]) {
           byteParams.add((byte[]) value);
+        } else if (value instanceof Rawable) {
+          byteParams.add(((Rawable) value).getRaw());
         } else if (value instanceof Boolean) {
           byteParams.add(Protocol.toByteArray((boolean) value));
         } else if (value instanceof Integer) {

File: src/main/java/redis/clients/jedis/util/JedisClusterHashTagUtil.java
Patch:
@@ -1,7 +1,7 @@
 package redis.clients.jedis.util;
 
 /**
- * Holds various methods/utilities to manipualte and parse redis hash-tags. See <a
+ * Holds various methods/utilities to manipulate and parse redis hash-tags. See <a
  * href="http://redis.io/topics/cluster-spec">Cluster-Spec : Keys hash tags</a>
  */
 public final class JedisClusterHashTagUtil {

File: src/main/java/redis/clients/jedis/Protocol.java
Patch:
@@ -282,9 +282,9 @@ public static enum Keyword implements Rawable {
     AGGREGATE, ALPHA, ASC, BY, DESC, GET, LIMIT, MESSAGE, NO, NOSORT, PMESSAGE, PSUBSCRIBE,
     PUNSUBSCRIBE, OK, ONE, QUEUED, SET, STORE, SUBSCRIBE, UNSUBSCRIBE, WEIGHTS, WITHSCORES,
     RESETSTAT, REWRITE, RESET, FLUSH, EXISTS, LOAD, KILL, LEN, REFCOUNT, ENCODING, IDLETIME,
-    GETNAME, SETNAME, LIST, MATCH, COUNT, PING, PONG, UNLOAD, REPLACE, KEYS, PAUSE, DOCTOR, BLOCK,
-    NOACK, STREAMS, KEY, CREATE, MKSTREAM, SETID, DESTROY, DELCONSUMER, MAXLEN, GROUP, ID, IDLE,
-    TIME, RETRYCOUNT, FORCE, USAGE, SAMPLES, STREAM, GROUPS, CONSUMERS, HELP, FREQ, SETUSER,
+    GETNAME, SETNAME, LIST, MATCH, COUNT, TYPE, PING, PONG, UNLOAD, REPLACE, KEYS, PAUSE, DOCTOR,
+    BLOCK, NOACK, STREAMS, KEY, CREATE, MKSTREAM, SETID, DESTROY, DELCONSUMER, MAXLEN, GROUP, ID,
+    IDLE, TIME, RETRYCOUNT, FORCE, USAGE, SAMPLES, STREAM, GROUPS, CONSUMERS, HELP, FREQ, SETUSER,
     GETUSER, DELUSER, WHOAMI, CAT, GENPASS, USERS, LOG, INCR, SAVE, JUSTID, WITHVALUES, UNBLOCK,
     NOMKSTREAM, MINID, DB, ABSTTL;
 

File: src/main/java/redis/clients/jedis/commands/Commands.java
Patch:
@@ -443,6 +443,8 @@ default void restoreReplace(String key, int ttl, byte[] serializedValue) {
 
   void scan(String cursor, ScanParams params);
 
+  void scan(String cursor, ScanParams params, String type);
+
   void hscan(String key, String cursor, ScanParams params);
 
   void sscan(String key, String cursor, ScanParams params);

File: src/main/java/redis/clients/jedis/commands/MultiKeyBinaryCommands.java
Patch:
@@ -131,6 +131,8 @@ public interface MultiKeyBinaryCommands {
 
   ScanResult<byte[]> scan(byte[] cursor, ScanParams params);
 
+  ScanResult<byte[]> scan(byte[] cursor, ScanParams params, byte[] type);
+
   /**
    * @deprecated This method will be removed due to bug regarding {@code block} param. Use
    * {@link #xread(redis.clients.jedis.params.XReadParams, java.util.Map.Entry...)}.

File: src/main/java/redis/clients/jedis/commands/MultiKeyCommands.java
Patch:
@@ -207,6 +207,8 @@ public interface MultiKeyCommands {
    */
   ScanResult<String> scan(String cursor, ScanParams params);
 
+  ScanResult<String> scan(String cursor, ScanParams params, String type);
+
   String pfmerge(String destkey, String... sourcekeys);
 
   long pfcount(String... keys);

File: src/main/java/redis/clients/jedis/BinaryJedisCluster.java
Patch:
@@ -33,9 +33,9 @@ public class BinaryJedisCluster implements BinaryJedisClusterCommands,
   protected int maxAttempts;
 
   /**
-   * After this amount of time we will do no more retries and report the operation as failed.
+   * After this amount of time there will be no more retries and the operation will be failed.
    *
-   * Defaults to {@link #DEFAULT_TIMEOUT} if unset, or {@code soTimeout} if available.
+   * Defaults to {@code soTimeout * maxAttempts}.
    */
   protected Duration maxTotalRetriesDuration;
 

File: src/main/java/redis/clients/jedis/BinaryJedisCluster.java
Patch:
@@ -77,7 +77,7 @@ public BinaryJedisCluster(Set<HostAndPort> jedisClusterNode, int connectionTimeo
     this.connectionHandler = new JedisSlotBasedConnectionHandler(jedisClusterNode, poolConfig,
         connectionTimeout, soTimeout, user, password, clientName);
     this.maxAttempts = maxAttempts;
-    this.maxTotalRetriesDuration = Duration.ofMillis(soTimeout);
+    this.maxTotalRetriesDuration = Duration.ofMillis((long) soTimeout * maxAttempts);
   }
 
   public BinaryJedisCluster(Set<HostAndPort> jedisClusterNode, int connectionTimeout,
@@ -86,7 +86,7 @@ public BinaryJedisCluster(Set<HostAndPort> jedisClusterNode, int connectionTimeo
     this.connectionHandler = new JedisSlotBasedConnectionHandler(jedisClusterNode, poolConfig,
         connectionTimeout, soTimeout, infiniteSoTimeout, user, password, clientName);
     this.maxAttempts = maxAttempts;
-    this.maxTotalRetriesDuration = Duration.ofMillis(soTimeout);
+    this.maxTotalRetriesDuration = Duration.ofMillis((long) soTimeout * maxAttempts);
   }
 
   public BinaryJedisCluster(Set<HostAndPort> jedisClusterNode, int connectionTimeout,
@@ -109,7 +109,7 @@ public BinaryJedisCluster(Set<HostAndPort> jedisClusterNode, int connectionTimeo
   public BinaryJedisCluster(Set<HostAndPort> jedisClusterNode, JedisClientConfig clientConfig,
       int maxAttempts, GenericObjectPoolConfig<Jedis> poolConfig) {
     this(jedisClusterNode, clientConfig, maxAttempts,
-        Duration.ofMillis((long) DEFAULT_TIMEOUT * maxAttempts), poolConfig);
+        Duration.ofMillis((long) clientConfig.getSocketTimeoutMillis() * maxAttempts), poolConfig);
   }
 
   public BinaryJedisCluster(Set<HostAndPort> jedisClusterNode, JedisClientConfig clientConfig,

File: src/main/java/redis/clients/jedis/commands/ClusterCommands.java
Patch:
@@ -29,9 +29,9 @@ public interface ClusterCommands {
 
   String clusterFlushSlots();
 
-  Long clusterKeySlot(String key);
+  long clusterKeySlot(String key);
 
-  Long clusterCountKeysInSlot(int slot);
+  long clusterCountKeysInSlot(int slot);
 
   String clusterSaveConfig();
 

File: src/main/java/redis/clients/jedis/commands/MultiKeyBinaryJedisClusterCommands.java
Patch:
@@ -14,7 +14,7 @@ public interface MultiKeyBinaryJedisClusterCommands extends MultiKeyBinaryComman
    * @throws UnsupportedOperationException Use {@link #copy(byte[], byte[], boolean)}.
    */
   @Override
-  default Boolean copy(byte[] srcKey, byte[] dstKey, int db, boolean replace) {
+  default boolean copy(byte[] srcKey, byte[] dstKey, int db, boolean replace) {
     throw new UnsupportedOperationException("Cluster mode does not support databse operations.");
   }
 

File: src/main/java/redis/clients/jedis/commands/MultiKeyJedisClusterCommands.java
Patch:
@@ -14,7 +14,7 @@ public interface MultiKeyJedisClusterCommands extends MultiKeyCommands {
    * @throws UnsupportedOperationException Use {@link #copy(java.lang.String, java.lang.String, boolean)}.
    */
   @Override
-  default Boolean copy(String srcKey, String dstKey, int db, boolean replace) {
+  default boolean copy(String srcKey, String dstKey, int db, boolean replace) {
     throw new UnsupportedOperationException("Cluster mode does not support databse operations.");
   }
 

File: src/test/java/redis/clients/jedis/tests/commands/AccessControlListCommandsTest.java
Patch:
@@ -222,8 +222,7 @@ public void aclDelUser() {
     String statusSetUser = jedis.aclSetUser(USER_YYY);
     assertEquals("OK", statusSetUser);
     int before = jedis.aclList().size();
-    Long statusDelUser = jedis.aclDelUser(USER_YYY);
-    assertEquals(1, statusDelUser.longValue());
+    assertEquals(1L, jedis.aclDelUser(USER_YYY));
     int after = jedis.aclList().size();
     assertEquals(before - 1, after);
   }
@@ -445,7 +444,7 @@ public void aclBinaryCommandsTest() {
     jedis.aclSetUser(USER_ZZZ.getBytes());
     assertNotNull(jedis.aclGetUser(USER_ZZZ));
 
-    assertEquals(Long.valueOf(1L), jedis.aclDelUser(USER_ZZZ.getBytes()));
+    assertEquals(1L, jedis.aclDelUser(USER_ZZZ.getBytes()));
 
     jedis.aclSetUser(USER_ZZZ.getBytes(), "reset".getBytes(), "+@all".getBytes(), "~*".getBytes(),
       "-@string".getBytes(), "+incr".getBytes(), "-debug".getBytes(), "+debug|digest".getBytes());

File: src/test/java/redis/clients/jedis/tests/commands/ControlCommandsTest.java
Patch:
@@ -156,8 +156,7 @@ public void debug() {
 
   @Test
   public void waitReplicas() {
-    Long replicas = jedis.waitReplicas(1, 100);
-    assertEquals(1, replicas.longValue());
+    assertEquals(1, jedis.waitReplicas(1, 100));
   }
 
   @Test

File: src/test/java/redis/clients/jedis/tests/commands/SlowlogCommandsTest.java
Patch:
@@ -58,7 +58,7 @@ public void slowlog() {
     assertNotNull(log1);
     assertNotNull(blog1);
 
-    assertEquals(7, jedis.slowlogLen().longValue());
+    assertEquals(7, jedis.slowlogLen());
   }
 
   @Test

File: src/test/java/redis/clients/jedis/tests/commands/TransactionCommandsTest.java
Patch:
@@ -11,7 +11,6 @@
 import java.io.IOException;
 import java.net.UnknownHostException;
 import java.util.ArrayList;
-import java.util.Arrays;
 import java.util.List;
 import java.util.Set;
 import org.junit.After;
@@ -115,7 +114,7 @@ public void watch() throws UnknownHostException, IOException {
     t.set(bmykey, bfoo);
     resp = t.exec();
     assertNull(resp);
-    assertTrue(Arrays.equals(bbar, jedis.get(bmykey)));
+    assertArrayEquals(bbar, jedis.get(bmykey));
   }
 
   @Test

File: src/main/java/redis/clients/jedis/Protocol.java
Patch:
@@ -263,7 +263,7 @@ public static enum Command implements ProtocolCommand {
     HINCRBYFLOAT, SCAN, HSCAN, SSCAN, ZSCAN, WAIT, CLUSTER, ASKING, PFADD, PFCOUNT, PFMERGE,
     READONLY, GEOADD, GEODIST, GEOHASH, GEOPOS, GEORADIUS, GEORADIUS_RO, GEORADIUSBYMEMBER,
     GEORADIUSBYMEMBER_RO, MODULE, BITFIELD, HSTRLEN, TOUCH, SWAPDB, MEMORY, XADD, XLEN, XDEL,
-    XTRIM, XRANGE, XREVRANGE, XREAD, XACK, XGROUP, XREADGROUP, XPENDING, XCLAIM, ACL, XINFO,
+    XTRIM, XRANGE, XREVRANGE, XREAD, XACK, XGROUP, XREADGROUP, XPENDING, XCLAIM, XAUTOCLAIM, ACL, XINFO,
     BITFIELD_RO, LPOS, SMISMEMBER, ZMSCORE, BZPOPMIN, BZPOPMAX, BLMOVE, LMOVE, COPY;
 
     private final byte[] raw;

File: src/main/java/redis/clients/jedis/Response.java
Patch:
@@ -24,13 +24,12 @@ public void set(Object data) {
   }
 
   public T get() {
-    // if response has dependency response and dependency is not built,
-    // build it first and no more!!
+    // if response has dependency response and dependency is not built, build it first and no more!!
     if (dependency != null && dependency.set && !dependency.built) {
       dependency.build();
     }
     if (!set) {
-      throw new JedisDataException(
+      throw new IllegalStateException(
           "Please close pipeline or multi block before calling this method.");
     }
     if (!built) {

File: src/main/java/redis/clients/jedis/util/SafeEncoder.java
Patch:
@@ -5,7 +5,6 @@
 import java.util.List;
 
 import redis.clients.jedis.Protocol;
-import redis.clients.jedis.exceptions.JedisDataException;
 import redis.clients.jedis.exceptions.JedisException;
 
 /**
@@ -28,7 +27,7 @@ public static byte[][] encodeMany(final String... strs) {
   public static byte[] encode(final String str) {
     try {
       if (str == null) {
-        throw new JedisDataException("value sent to redis cannot be null");
+        throw new IllegalArgumentException("null value cannot be sent to redis");
       }
       return str.getBytes(Protocol.CHARSET);
     } catch (UnsupportedEncodingException e) {

File: src/test/java/redis/clients/jedis/tests/JedisTest.java
Patch:
@@ -25,7 +25,6 @@
 import redis.clients.jedis.Protocol;
 import redis.clients.jedis.exceptions.InvalidURIException;
 import redis.clients.jedis.exceptions.JedisConnectionException;
-import redis.clients.jedis.exceptions.JedisDataException;
 import redis.clients.jedis.exceptions.JedisException;
 import redis.clients.jedis.tests.commands.JedisCommandTestBase;
 import redis.clients.jedis.util.SafeEncoder;
@@ -128,7 +127,7 @@ public void infiniteTimeout() throws Exception {
     }
   }
 
-  @Test(expected = JedisDataException.class)
+  @Test(expected = IllegalArgumentException.class)
   public void failWhenSendingNullValues() {
     jedis.set("foo", null);
   }
@@ -248,4 +247,4 @@ public void checkDisconnectOnQuit() {
     assertFalse(jedis.isConnected());
   }
 
-}
\ No newline at end of file
+}

File: src/test/java/redis/clients/jedis/tests/JedisWithCompleteCredentialsTest.java
Patch:
@@ -142,4 +142,4 @@ public void allowUrlWithNoDBAndNoPassword() {
     }
   }
 
-}
\ No newline at end of file
+}

File: src/test/java/redis/clients/jedis/tests/ShardedJedisPipelineTest.java
Patch:
@@ -23,7 +23,6 @@
 import redis.clients.jedis.ShardedJedis;
 import redis.clients.jedis.ShardedJedisPipeline;
 import redis.clients.jedis.Tuple;
-import redis.clients.jedis.exceptions.JedisDataException;
 
 public class ShardedJedisPipelineTest {
 
@@ -109,7 +108,7 @@ public void pipelineResponse() {
     assertEquals(1, zrangeWithScores.get().size());
   }
 
-  @Test(expected = JedisDataException.class)
+  @Test(expected = IllegalStateException.class)
   public void pipelineResponseWithinPipeline() {
     jedis.set("string", "foo");
 

File: src/test/java/redis/clients/jedis/tests/commands/TransactionCommandsTest.java
Patch:
@@ -156,7 +156,7 @@ public void unwatch() {
     assertEquals("OK", resp.get(0));
   }
 
-  @Test(expected = JedisDataException.class)
+  @Test(expected = IllegalStateException.class)
   public void validateWhenInMulti() {
     jedis.multi();
     jedis.ping();
@@ -215,7 +215,7 @@ public void transactionResponseBinary() {
     assertArrayEquals("foo".getBytes(), set.get());
   }
 
-  @Test(expected = JedisDataException.class)
+  @Test(expected = IllegalStateException.class)
   public void transactionResponseWithinPipeline() {
     jedis.set("string", "foo");
 

File: src/main/java/redis/clients/jedis/JedisSocketFactory.java
Patch:
@@ -24,6 +24,8 @@ public interface JedisSocketFactory {
    */
   Socket createSocket() throws IOException, JedisConnectionException;
 
+  void updateHostAndPort(HostAndPort hostAndPort);
+
   @Deprecated
   String getDescription();
 

File: src/main/java/redis/clients/jedis/BinaryJedis.java
Patch:
@@ -187,7 +187,7 @@ public BinaryJedis(final JedisShardInfo shardInfo) {
     this(shardInfo.getHost(), shardInfo.getPort(), DefaultJedisClientConfig.builder()
         .connectionTimeoutMillis(shardInfo.getConnectionTimeout())
         .socketTimeoutMillis(shardInfo.getSoTimeout()).user(shardInfo.getUser())
-        .password(shardInfo.getPassword()).databse(shardInfo.getDb())
+        .password(shardInfo.getPassword()).database(shardInfo.getDb())
         .ssl(shardInfo.getSsl()).sslSocketFactory(shardInfo.getSslSocketFactory())
         .sslParameters(shardInfo.getSslParameters())
         .hostnameVerifier(shardInfo.getHostnameVerifier()).build());
@@ -245,7 +245,7 @@ public BinaryJedis(final URI uri, JedisClientConfig config) {
         .socketTimeoutMillis(config.getSocketTimeoutMillis())
         .blockingSocketTimeoutMillis(config.getBlockingSocketTimeoutMillis())
         .user(JedisURIHelper.getUser(uri)).password(JedisURIHelper.getPassword(uri))
-        .databse(JedisURIHelper.getDBIndex(uri)).clientName(config.getClientName())
+        .database(JedisURIHelper.getDBIndex(uri)).clientName(config.getClientName())
         .ssl(JedisURIHelper.isRedisSSLScheme(uri))
         .sslSocketFactory(config.getSslSocketFactory())
         .sslParameters(config.getSslParameters())

File: src/main/java/redis/clients/jedis/JedisFactory.java
Patch:
@@ -77,7 +77,7 @@ protected JedisFactory(final String host, final int port, final int connectionTi
     this.hostAndPort.set(new HostAndPort(host, port));
     this.clientConfig = DefaultJedisClientConfig.builder().connectionTimeoutMillis(connectionTimeout)
         .socketTimeoutMillis(soTimeout).blockingSocketTimeoutMillis(infiniteSoTimeout).user(user)
-        .password(password).databse(database).clientName(clientName)
+        .password(password).database(database).clientName(clientName)
         .ssl(ssl).sslSocketFactory(sslSocketFactory)
         .sslParameters(sslParameters).hostnameVerifier(hostnameVerifier).build();
   }
@@ -90,7 +90,7 @@ protected JedisFactory(final int connectionTimeout, final int soTimeout, final i
       final SSLSocketFactory sslSocketFactory, final SSLParameters sslParameters, final HostnameVerifier hostnameVerifier) {
     this(DefaultJedisClientConfig.builder().connectionTimeoutMillis(connectionTimeout)
         .socketTimeoutMillis(soTimeout).blockingSocketTimeoutMillis(infiniteSoTimeout).user(user)
-        .password(password).databse(database).clientName(clientName)
+        .password(password).database(database).clientName(clientName)
         .ssl(ssl).sslSocketFactory(sslSocketFactory)
         .sslParameters(sslParameters).hostnameVerifier(hostnameVerifier).build());
   }
@@ -124,7 +124,7 @@ protected JedisFactory(final URI uri, final int connectionTimeout, final int soT
     this.clientConfig = DefaultJedisClientConfig.builder().connectionTimeoutMillis(connectionTimeout)
         .socketTimeoutMillis(soTimeout).blockingSocketTimeoutMillis(infiniteSoTimeout)
         .user(JedisURIHelper.getUser(uri)).password(JedisURIHelper.getPassword(uri))
-        .databse(JedisURIHelper.getDBIndex(uri)).clientName(clientName)
+        .database(JedisURIHelper.getDBIndex(uri)).clientName(clientName)
         .ssl(JedisURIHelper.isRedisSSLScheme(uri)).sslSocketFactory(sslSocketFactory)
         .sslParameters(sslParameters).hostnameVerifier(hostnameVerifier).build();
   }

File: src/main/java/redis/clients/jedis/Protocol.java
Patch:
@@ -74,6 +74,7 @@ public final class Protocol {
   public static final byte[] BYTES_FALSE = toByteArray(0);
   public static final byte[] BYTES_TILDE = SafeEncoder.encode("~");
   public static final byte[] BYTES_EQUAL = SafeEncoder.encode("=");
+  public static final byte[] BYTES_ASTERISK = SafeEncoder.encode("*");
 
   public static final byte[] POSITIVE_INFINITY_BYTES = "+inf".getBytes();
   public static final byte[] NEGATIVE_INFINITY_BYTES = "-inf".getBytes();
@@ -284,7 +285,8 @@ public static enum Keyword implements Rawable {
     GETNAME, SETNAME, LIST, MATCH, COUNT, PING, PONG, UNLOAD, REPLACE, KEYS, PAUSE, DOCTOR, BLOCK,
     NOACK, STREAMS, KEY, CREATE, MKSTREAM, SETID, DESTROY, DELCONSUMER, MAXLEN, GROUP, ID, IDLE,
     TIME, RETRYCOUNT, FORCE, USAGE, SAMPLES, STREAM, GROUPS, CONSUMERS, HELP, FREQ, SETUSER,
-    GETUSER, DELUSER, WHOAMI, CAT, GENPASS, USERS, LOG, INCR, SAVE, JUSTID, WITHVALUES, UNBLOCK, MINID;
+    GETUSER, DELUSER, WHOAMI, CAT, GENPASS, USERS, LOG, INCR, SAVE, JUSTID, WITHVALUES, UNBLOCK,
+    NOMKSTREAM, MINID;
 
     /**
      * @deprecated This will be private in future. Use {@link #getRaw()}.

File: src/main/java/redis/clients/jedis/commands/BinaryJedisClusterCommands.java
Patch:
@@ -12,6 +12,7 @@
 import redis.clients.jedis.params.GeoRadiusParam;
 import redis.clients.jedis.params.GetExParams;
 import redis.clients.jedis.params.SetParams;
+import redis.clients.jedis.params.XAddParams;
 import redis.clients.jedis.params.XClaimParams;
 import redis.clients.jedis.params.XTrimParams;
 import redis.clients.jedis.params.ZAddParams;
@@ -386,6 +387,8 @@ List<GeoRadiusResponse> georadiusByMemberReadonly(byte[] key, byte[] member, dou
 
   byte[] xadd(byte[] key, byte[] id, Map<byte[], byte[]> hash, long maxLen, boolean approximateLength);
 
+  byte[] xadd(byte[] key, Map<byte[], byte[]> hash, XAddParams params);
+
   Long xlen(byte[] key);
 
   List<byte[]> xrange(byte[] key, byte[] start, byte[] end);

File: src/main/java/redis/clients/jedis/commands/Commands.java
Patch:
@@ -14,6 +14,7 @@
 import redis.clients.jedis.params.MigrateParams;
 import redis.clients.jedis.params.ClientKillParams;
 import redis.clients.jedis.params.SetParams;
+import redis.clients.jedis.params.XAddParams;
 import redis.clients.jedis.params.XClaimParams;
 import redis.clients.jedis.params.XTrimParams;
 import redis.clients.jedis.params.ZAddParams;
@@ -456,6 +457,8 @@ default void restoreReplace(String key, int ttl, byte[] serializedValue) {
 
   void xadd(String key, StreamEntryID id, Map<String, String> hash, long maxLen, boolean approximateLength);
 
+  void xadd(String key, Map<String, String> hash, XAddParams params);
+
   void xlen(String key);
 
   void xrange(String key, StreamEntryID start, StreamEntryID end);

File: src/main/java/redis/clients/jedis/commands/RedisPipeline.java
Patch:
@@ -16,6 +16,7 @@
 import redis.clients.jedis.params.GeoRadiusParam;
 import redis.clients.jedis.params.GetExParams;
 import redis.clients.jedis.params.SetParams;
+import redis.clients.jedis.params.XAddParams;
 import redis.clients.jedis.params.XClaimParams;
 import redis.clients.jedis.params.XTrimParams;
 import redis.clients.jedis.params.ZAddParams;
@@ -381,6 +382,8 @@ Response<List<GeoRadiusResponse>> georadiusByMemberReadonly(String key, String m
 
   Response<StreamEntryID> xadd(String key, StreamEntryID id, Map<String, String> hash, long maxLen, boolean approximateLength);
 
+  Response<StreamEntryID> xadd(String key, Map<String, String> hash, XAddParams params);
+
   Response<Long> xlen(String key);
 
   Response<List<StreamEntry>> xrange(String key, StreamEntryID start, StreamEntryID end);

File: src/main/java/redis/clients/jedis/Protocol.java
Patch:
@@ -73,6 +73,7 @@ public final class Protocol {
   public static final byte[] BYTES_TRUE = toByteArray(1);
   public static final byte[] BYTES_FALSE = toByteArray(0);
   public static final byte[] BYTES_TILDE = SafeEncoder.encode("~");
+  public static final byte[] BYTES_EQUAL = SafeEncoder.encode("=");
 
   public static final byte[] POSITIVE_INFINITY_BYTES = "+inf".getBytes();
   public static final byte[] NEGATIVE_INFINITY_BYTES = "-inf".getBytes();
@@ -283,7 +284,7 @@ public static enum Keyword implements Rawable {
     GETNAME, SETNAME, LIST, MATCH, COUNT, PING, PONG, UNLOAD, REPLACE, KEYS, PAUSE, DOCTOR, BLOCK,
     NOACK, STREAMS, KEY, CREATE, MKSTREAM, SETID, DESTROY, DELCONSUMER, MAXLEN, GROUP, ID, IDLE,
     TIME, RETRYCOUNT, FORCE, USAGE, SAMPLES, STREAM, GROUPS, CONSUMERS, HELP, FREQ, SETUSER,
-    GETUSER, DELUSER, WHOAMI, CAT, GENPASS, USERS, LOG, INCR, SAVE, JUSTID, WITHVALUES, UNBLOCK;
+    GETUSER, DELUSER, WHOAMI, CAT, GENPASS, USERS, LOG, INCR, SAVE, JUSTID, WITHVALUES, UNBLOCK, MINID;
 
     /**
      * @deprecated This will be private in future. Use {@link #getRaw()}.

File: src/main/java/redis/clients/jedis/commands/BinaryJedisClusterCommands.java
Patch:
@@ -13,6 +13,7 @@
 import redis.clients.jedis.params.GetExParams;
 import redis.clients.jedis.params.SetParams;
 import redis.clients.jedis.params.XClaimParams;
+import redis.clients.jedis.params.XTrimParams;
 import redis.clients.jedis.params.ZAddParams;
 import redis.clients.jedis.params.ZIncrByParams;
 import redis.clients.jedis.params.LPosParams;
@@ -415,6 +416,8 @@ List<GeoRadiusResponse> georadiusByMemberReadonly(byte[] key, byte[] member, dou
 
   Long xtrim(byte[] key, long maxLen, boolean approximateLength);
 
+  Long xtrim(byte[] key, XTrimParams params);
+
   Object xpending(final byte[] key, final byte[] groupname);
 
   List<Object> xpending(byte[] key, byte[] groupname, byte[] start, byte[] end, int count, byte[] consumername);

File: src/main/java/redis/clients/jedis/commands/BinaryJedisCommands.java
Patch:
@@ -20,6 +20,7 @@
 import redis.clients.jedis.params.GetExParams;
 import redis.clients.jedis.params.SetParams;
 import redis.clients.jedis.params.XClaimParams;
+import redis.clients.jedis.params.XTrimParams;
 import redis.clients.jedis.params.ZAddParams;
 import redis.clients.jedis.params.ZIncrByParams;
 import redis.clients.jedis.params.LPosParams;
@@ -445,6 +446,8 @@ default List<byte[]> xrange(byte[] key, byte[] start, byte[] end, long count) {
 
   Long xtrim(byte[] key, long maxLen, boolean approximateLength);
 
+  Long xtrim(byte[] key, XTrimParams params);
+
   Object xpending(byte[] key, byte[] groupname);
 
   List<Object> xpending(byte[] key, byte[] groupname, byte[] start, byte[] end, int count, byte[] consumername);

File: src/main/java/redis/clients/jedis/commands/BinaryRedisPipeline.java
Patch:
@@ -14,6 +14,7 @@
 import redis.clients.jedis.params.GetExParams;
 import redis.clients.jedis.params.SetParams;
 import redis.clients.jedis.params.XClaimParams;
+import redis.clients.jedis.params.XTrimParams;
 import redis.clients.jedis.params.ZAddParams;
 import redis.clients.jedis.params.ZIncrByParams;
 import redis.clients.jedis.params.LPosParams;
@@ -417,6 +418,8 @@ Response<List<GeoRadiusResponse>> georadiusByMemberReadonly(byte[] key, byte[] m
 
   Response<Long> xtrim(byte[] key, long maxLen, boolean approximateLength);
 
+  Response<Long> xtrim(byte[] key, XTrimParams params);
+
   Response<List<byte[]>> xclaim(byte[] key, byte[] group, byte[] consumername, long minIdleTime,
       long newIdleTime, int retries, boolean force, byte[]... ids);
 

File: src/main/java/redis/clients/jedis/commands/Commands.java
Patch:
@@ -15,6 +15,7 @@
 import redis.clients.jedis.params.ClientKillParams;
 import redis.clients.jedis.params.SetParams;
 import redis.clients.jedis.params.XClaimParams;
+import redis.clients.jedis.params.XTrimParams;
 import redis.clients.jedis.params.ZAddParams;
 import redis.clients.jedis.params.ZIncrByParams;
 import redis.clients.jedis.params.LPosParams;
@@ -494,6 +495,8 @@ default void restoreReplace(String key, int ttl, byte[] serializedValue) {
 
   void xtrim(String key, long maxLen, boolean approximateLength);
 
+  void xtrim(String key, XTrimParams params);
+
   /**
    * @deprecated This method will be removed due to bug regarding {@code block} param. Use
    * {@link #xreadGroup(java.lang.String, java.lang.String, redis.clients.jedis.params.XReadGroupParams, java.util.Map)}.

File: src/main/java/redis/clients/jedis/commands/RedisPipeline.java
Patch:
@@ -17,6 +17,7 @@
 import redis.clients.jedis.params.GetExParams;
 import redis.clients.jedis.params.SetParams;
 import redis.clients.jedis.params.XClaimParams;
+import redis.clients.jedis.params.XTrimParams;
 import redis.clients.jedis.params.ZAddParams;
 import redis.clients.jedis.params.ZIncrByParams;
 import redis.clients.jedis.params.LPosParams;
@@ -409,6 +410,8 @@ Response<List<StreamPendingEntry>> xpending(String key, String groupname,
 
   Response<Long> xtrim( String key, long maxLen, boolean approximateLength);
 
+  Response<Long> xtrim(String key, XTrimParams params);
+
   Response<List<StreamEntry>> xclaim( String key, String group, String consumername, long minIdleTime,
       long newIdleTime, int retries, boolean force, StreamEntryID... ids);
 

File: src/main/java/redis/clients/jedis/Protocol.java
Patch:
@@ -249,7 +249,7 @@ public static enum Command implements ProtocolCommand {
     SETEX, MSET, MSETNX, DECRBY, DECR, INCRBY, INCR, APPEND, SUBSTR, HSET, HGET, HSETNX, HMSET,
     HMGET, HINCRBY, HEXISTS, HDEL, HLEN, HKEYS, HVALS, HGETALL, HRANDFIELD, RPUSH, LPUSH, LLEN, LRANGE, LTRIM,
     LINDEX, LSET, LREM, LPOP, RPOP, RPOPLPUSH, SADD, SMEMBERS, SREM, SPOP, SMOVE, SCARD, SISMEMBER,
-    SINTER, SINTERSTORE, SUNION, SUNIONSTORE, SDIFF, SDIFFSTORE, SRANDMEMBER, ZADD, ZDIFF, ZRANGE, ZREM,
+    SINTER, SINTERSTORE, SUNION, SUNIONSTORE, SDIFF, SDIFFSTORE, SRANDMEMBER, ZADD, ZDIFF, ZDIFFSTORE, ZRANGE, ZREM,
     ZINCRBY, ZRANK, ZREVRANK, ZREVRANGE, ZRANDMEMBER, ZCARD, ZSCORE, ZPOPMAX, ZPOPMIN, MULTI, DISCARD, EXEC,
     WATCH, UNWATCH, SORT, BLPOP, BRPOP, AUTH, SUBSCRIBE, PUBLISH, UNSUBSCRIBE, PSUBSCRIBE,
     PUNSUBSCRIBE, PUBSUB, ZCOUNT, ZRANGEBYSCORE, ZREVRANGEBYSCORE, ZREMRANGEBYRANK,

File: src/main/java/redis/clients/jedis/commands/Commands.java
Patch:
@@ -225,6 +225,8 @@ default void setex(String key, int seconds, String value) {
 
   void zaddIncr(String key, double score, String member, ZAddParams params);
 
+  void zdiffStore(String dstkey, String... keys);
+
   void zrange(String key, long start, long stop);
 
   void zrem(String key, String... members);

File: src/main/java/redis/clients/jedis/commands/MultiKeyBinaryCommands.java
Patch:
@@ -76,6 +76,8 @@ public interface MultiKeyBinaryCommands {
 
   Set<Tuple> zdiffWithScores(byte[]... keys);
 
+  Long zdiffStore(byte[] dstkey, byte[]... keys);
+
   Long zinterstore(byte[] dstkey, byte[]... sets);
 
   Long zinterstore(byte[] dstkey, ZParams params, byte[]... sets);

File: src/main/java/redis/clients/jedis/commands/MultiKeyBinaryJedisClusterCommands.java
Patch:
@@ -68,6 +68,8 @@ public interface MultiKeyBinaryJedisClusterCommands {
 
   Set<Tuple> zdiffWithScores(byte[]... keys);
 
+  Long zdiffStore(byte[] dstkey, byte[]... keys);
+
   Long zinterstore(byte[] dstkey, byte[]... sets);
 
   Long zinterstore(byte[] dstkey, ZParams params, byte[]... sets);

File: src/main/java/redis/clients/jedis/commands/MultiKeyBinaryRedisPipeline.java
Patch:
@@ -72,6 +72,8 @@ public interface MultiKeyBinaryRedisPipeline {
 
   Response<Set<Tuple>> zdiffWithScores(byte[]... keys);
 
+  Response<Long> zdiffStore(byte[] dstkey, byte[]... keys);
+
   Response<Long> zinterstore(byte[] dstkey, byte[]... sets);
 
   Response<Long> zinterstore(byte[] dstkey, ZParams params, byte[]... sets);

File: src/main/java/redis/clients/jedis/commands/MultiKeyCommands.java
Patch:
@@ -108,6 +108,8 @@ public interface MultiKeyCommands {
 
   Set<Tuple> zdiffWithScores(String... keys);
 
+  Long zdiffStore(String dstkey, String... keys);
+
   Long zinterstore(String dstkey, String... sets);
 
   Long zinterstore(String dstkey, ZParams params, String... sets);

File: src/main/java/redis/clients/jedis/commands/MultiKeyCommandsPipeline.java
Patch:
@@ -73,6 +73,8 @@ public interface MultiKeyCommandsPipeline {
 
   Response<Set<Tuple>> zdiffWithScores(String... keys);
 
+  Response<Long> zdiffStore(String dstkey, String... keys);
+
   Response<Long> zinterstore(String dstkey, String... sets);
 
   Response<Long> zinterstore(String dstkey, ZParams params, String... sets);

File: src/main/java/redis/clients/jedis/commands/MultiKeyJedisClusterCommands.java
Patch:
@@ -70,6 +70,8 @@ public interface MultiKeyJedisClusterCommands {
 
   Set<Tuple> zdiffWithScores(String... keys);
 
+  Long zdiffStore(String dstkey, String... keys);
+
   Long zinterstore(String dstkey, String... sets);
 
   Long zinterstore(String dstkey, ZParams params, String... sets);

File: src/test/java/redis/clients/jedis/tests/commands/ClusterScriptingCommandsTest.java
Patch:
@@ -7,6 +7,7 @@
 import java.util.List;
 import org.junit.Test;
 
+import redis.clients.jedis.args.FlushMode;
 import redis.clients.jedis.exceptions.JedisClusterOperationException;
 import redis.clients.jedis.exceptions.JedisDataException;
 
@@ -73,6 +74,7 @@ public void testBinaryScriptFlush() {
     byte[] byteKey = "key1".getBytes();
     jedisCluster.scriptLoad("return redis.call('get','foo')".getBytes(), byteKey);
     assertEquals("OK", jedisCluster.scriptFlush(byteKey));
+    assertEquals("OK", jedisCluster.scriptFlush(byteKey, FlushMode.SYNC));
   }
 
   @Test(expected = JedisDataException.class)

File: src/main/java/redis/clients/jedis/Protocol.java
Patch:
@@ -249,7 +249,7 @@ public static enum Command implements ProtocolCommand {
     SETEX, MSET, MSETNX, DECRBY, DECR, INCRBY, INCR, APPEND, SUBSTR, HSET, HGET, HSETNX, HMSET,
     HMGET, HINCRBY, HEXISTS, HDEL, HLEN, HKEYS, HVALS, HGETALL, HRANDFIELD, RPUSH, LPUSH, LLEN, LRANGE, LTRIM,
     LINDEX, LSET, LREM, LPOP, RPOP, RPOPLPUSH, SADD, SMEMBERS, SREM, SPOP, SMOVE, SCARD, SISMEMBER,
-    SINTER, SINTERSTORE, SUNION, SUNIONSTORE, SDIFF, SDIFFSTORE, SRANDMEMBER, ZADD, ZRANGE, ZREM,
+    SINTER, SINTERSTORE, SUNION, SUNIONSTORE, SDIFF, SDIFFSTORE, SRANDMEMBER, ZADD, ZDIFF, ZRANGE, ZREM,
     ZINCRBY, ZRANK, ZREVRANK, ZREVRANGE, ZRANDMEMBER, ZCARD, ZSCORE, ZPOPMAX, ZPOPMIN, MULTI, DISCARD, EXEC,
     WATCH, UNWATCH, SORT, BLPOP, BRPOP, AUTH, SUBSCRIBE, PUBLISH, UNSUBSCRIBE, PSUBSCRIBE,
     PUNSUBSCRIBE, PUBSUB, ZCOUNT, ZRANGEBYSCORE, ZREVRANGEBYSCORE, ZREMRANGEBYRANK,

File: src/main/java/redis/clients/jedis/Protocol.java
Patch:
@@ -250,7 +250,7 @@ public static enum Command implements ProtocolCommand {
     HMGET, HINCRBY, HEXISTS, HDEL, HLEN, HKEYS, HVALS, HGETALL, HRANDFIELD, RPUSH, LPUSH, LLEN, LRANGE, LTRIM,
     LINDEX, LSET, LREM, LPOP, RPOP, RPOPLPUSH, SADD, SMEMBERS, SREM, SPOP, SMOVE, SCARD, SISMEMBER,
     SINTER, SINTERSTORE, SUNION, SUNIONSTORE, SDIFF, SDIFFSTORE, SRANDMEMBER, ZADD, ZRANGE, ZREM,
-    ZINCRBY, ZRANK, ZREVRANK, ZREVRANGE, ZCARD, ZSCORE, ZPOPMAX, ZPOPMIN, MULTI, DISCARD, EXEC,
+    ZINCRBY, ZRANK, ZREVRANK, ZREVRANGE, ZRANDMEMBER, ZCARD, ZSCORE, ZPOPMAX, ZPOPMIN, MULTI, DISCARD, EXEC,
     WATCH, UNWATCH, SORT, BLPOP, BRPOP, AUTH, SUBSCRIBE, PUBLISH, UNSUBSCRIBE, PSUBSCRIBE,
     PUNSUBSCRIBE, PUBSUB, ZCOUNT, ZRANGEBYSCORE, ZREVRANGEBYSCORE, ZREMRANGEBYRANK,
     ZREMRANGEBYSCORE, ZUNIONSTORE, ZINTERSTORE, ZLEXCOUNT, ZRANGEBYLEX, ZREVRANGEBYLEX,

File: src/main/java/redis/clients/jedis/JedisClientConfig.java
Patch:
@@ -16,15 +16,15 @@ default int getConnectionTimeoutMillis() {
   /**
    * @return Socket timeout in milliseconds
    */
-  default int getSoTimeoutMillis() {
+  default int getSocketTimeoutMillis() {
     return Protocol.DEFAULT_TIMEOUT;
   }
 
   /**
    * @return Socket timeout (in milliseconds) to use during blocking operation. Default is '0',
    * which means to block forever.
    */
-  default int getInfiniteSoTimeoutMillis() {
+  default int getBlockingSocketTimeoutMillis() {
     return 0;
   }
 

File: src/test/java/redis/clients/jedis/tests/JedisClusterTest.java
Patch:
@@ -61,7 +61,7 @@ public class JedisClusterTest {
   private static final int DEFAULT_REDIRECTIONS = 5;
   private static final JedisPoolConfig DEFAULT_POOL_CONFIG = new JedisPoolConfig();
   private static final DefaultJedisClientConfig DEFAULT_CLIENT_CONFIG
-      = DefaultJedisClientConfig.builder().withPassword("cluster").build();
+      = DefaultJedisClientConfig.builder().password("cluster").build();
 
   private HostAndPort nodeInfo1 = HostAndPortUtil.getClusterServers().get(0);
   private HostAndPort nodeInfo2 = HostAndPortUtil.getClusterServers().get(1);
@@ -218,7 +218,7 @@ public void testSetClientNameWithConfig() {
     HostAndPort hp = new HostAndPort("127.0.0.1", 7379);
     String clientName = "config-pattern-app";
     try (JedisCluster jc = new JedisCluster(Collections.singleton(hp),
-        DefaultJedisClientConfig.builder().withPassword("cluster").withClientName(clientName).build(),
+        DefaultJedisClientConfig.builder().password("cluster").clientName(clientName).build(),
         DEFAULT_REDIRECTIONS, DEFAULT_POOL_CONFIG)) {
       jc.getClusterNodes().values().forEach(jedisPool -> {
         try (Jedis jedis = jedisPool.getResource()) {
@@ -632,7 +632,7 @@ public void testJedisClusterTimeout() {
   public void testJedisClusterTimeoutWithConfig() {
     HostAndPort hp = nodeInfo1;
     try (JedisCluster jc = new JedisCluster(hp, DefaultJedisClientConfig.builder()
-        .withConnectionTimeoutMillis(4000).withSoTimeoutMillis(4000).withPassword("cluster").build(),
+        .connectionTimeoutMillis(4000).socketTimeoutMillis(4000).password("cluster").build(),
         DEFAULT_REDIRECTIONS, DEFAULT_POOL_CONFIG)) {
 
       jc.getClusterNodes().values().forEach(pool -> {

File: src/test/java/redis/clients/jedis/tests/JedisPoolWithCompleteCredentialsTest.java
Patch:
@@ -88,7 +88,7 @@ public void checkResourceWithConfigIsClosableAndReusable() {
     config.setMaxTotal(1);
     config.setBlockWhenExhausted(false);
     try (JedisPool pool = new JedisPool(config, hnp, DefaultJedisClientConfig.builder()
-        .withUser("acljedis").withPassword("fizzbuzz").withClientName("closable-resuable-pool")
+        .user("acljedis").password("fizzbuzz").clientName("closable-resuable-pool")
         .build())) {
 
       Jedis jedis = pool.getResource();

File: src/test/java/redis/clients/jedis/tests/JedisTest.java
Patch:
@@ -68,7 +68,7 @@ public void connectWithConfig() {
       jedis.auth("foobared");
       assertEquals("PONG", jedis.ping());
     }
-    try (Jedis jedis = new Jedis(hnp, DefaultJedisClientConfig.builder().withPassword("foobared")
+    try (Jedis jedis = new Jedis(hnp, DefaultJedisClientConfig.builder().password("foobared")
         .build())) {
       assertEquals("PONG", jedis.ping());
     }

File: src/test/java/redis/clients/jedis/tests/JedisWithCompleteCredentialsTest.java
Patch:
@@ -56,8 +56,8 @@ public void connectWithConfig() {
       jedis.auth("acljedis", "fizzbuzz");
       assertEquals("PONG", jedis.ping());
     }
-    try (Jedis jedis = new Jedis(hnp, DefaultJedisClientConfig.builder().withUser("acljedis")
-        .withPassword("fizzbuzz").build())) {
+    try (Jedis jedis = new Jedis(hnp, DefaultJedisClientConfig.builder().user("acljedis")
+        .password("fizzbuzz").build())) {
       assertEquals("PONG", jedis.ping());
     }
   }

File: src/test/java/redis/clients/jedis/tests/SSLJedisTest.java
Patch:
@@ -65,7 +65,7 @@ public void connectWithSsl() {
   @Test
   public void connectWithConfig() {
     try (Jedis jedis = new Jedis(new HostAndPort("localhost", 6390), DefaultJedisClientConfig
-        .builder().withSsl(true).build())) {
+        .builder().ssl(true).build())) {
       jedis.auth("foobared");
       assertEquals("PONG", jedis.ping());
     }

File: src/test/java/redis/clients/jedis/tests/SSLJedisWithCompleteCredentialsTest.java
Patch:
@@ -49,7 +49,7 @@ public void connectWithSsl() {
   @Test
   public void connectWithConfig() {
     try (Jedis jedis = new Jedis(new HostAndPort("localhost", 6390), DefaultJedisClientConfig
-        .builder().withSsl(true).build())) {
+        .builder().ssl(true).build())) {
       jedis.auth("acljedis", "fizzbuzz");
       assertEquals("PONG", jedis.ping());
     }

File: src/main/java/redis/clients/jedis/Protocol.java
Patch:
@@ -283,7 +283,7 @@ public static enum Keyword implements Rawable {
     GETNAME, SETNAME, LIST, MATCH, COUNT, PING, PONG, UNLOAD, REPLACE, KEYS, PAUSE, DOCTOR, BLOCK,
     NOACK, STREAMS, KEY, CREATE, MKSTREAM, SETID, DESTROY, DELCONSUMER, MAXLEN, GROUP, ID, IDLE,
     TIME, RETRYCOUNT, FORCE, USAGE, SAMPLES, STREAM, GROUPS, CONSUMERS, HELP, FREQ, SETUSER,
-    GETUSER, DELUSER, WHOAMI, CAT, GENPASS, USERS, LOG, INCR, SAVE, JUSTID, WITHVALUES;
+    GETUSER, DELUSER, WHOAMI, CAT, GENPASS, USERS, LOG, INCR, SAVE, JUSTID, WITHVALUES, UNBLOCK;
 
     /**
      * @deprecated This will be private in future. Use {@link #getRaw()}.

File: src/main/java/redis/clients/jedis/commands/AdvancedBinaryJedisCommands.java
Patch:
@@ -3,6 +3,7 @@
 import java.util.List;
 
 import redis.clients.jedis.AccessControlUser;
+import redis.clients.jedis.args.UnblockType;
 import redis.clients.jedis.params.MigrateParams;
 import redis.clients.jedis.params.ClientKillParams;
 
@@ -41,6 +42,8 @@ String migrate(String host, int port, int destinationDB, int timeout, MigratePar
 
   Long clientKill(ClientKillParams params);
 
+  Long clientUnblock(long clientId, UnblockType unblockType);
+
   byte[] clientGetnameBinary();
 
   byte[] clientListBinary();

File: src/main/java/redis/clients/jedis/commands/AdvancedJedisCommands.java
Patch:
@@ -4,6 +4,7 @@
 
 import redis.clients.jedis.AccessControlLogEntry;
 import redis.clients.jedis.AccessControlUser;
+import redis.clients.jedis.args.UnblockType;
 import redis.clients.jedis.params.MigrateParams;
 import redis.clients.jedis.params.ClientKillParams;
 import redis.clients.jedis.util.Slowlog;
@@ -50,6 +51,8 @@ String migrate(String host, int port, int destinationDB, int timeout, MigratePar
 
   Long clientId();
 
+  Long clientUnblock(long clientId, UnblockType unblockType);
+
   String memoryDoctor();
 
   Long memoryUsage(String key);

File: src/main/java/redis/clients/jedis/commands/Commands.java
Patch:
@@ -8,6 +8,7 @@
 import redis.clients.jedis.ListPosition;
 import redis.clients.jedis.ScanParams;
 import redis.clients.jedis.SortingParams;
+import redis.clients.jedis.args.UnblockType;
 import redis.clients.jedis.ZParams;
 import redis.clients.jedis.params.GetExParams;
 import redis.clients.jedis.params.MigrateParams;
@@ -430,6 +431,8 @@ default void restoreReplace(String key, int ttl, byte[] serializedValue) {
 
   void clientId();
 
+  void clientUnblock(long clientId, UnblockType unblockType);
+
   void memoryDoctor();
 
   void xadd(String key, StreamEntryID id, Map<String, String> hash, long maxLen, boolean approximateLength);

File: src/main/java/redis/clients/jedis/JedisClientConfig.java
Patch:
@@ -39,6 +39,9 @@ default String getPassword() {
     return null;
   }
 
+  default void updatePassword(String password) {
+  }
+
   default int getDatabase() {
     return Protocol.DEFAULT_DATABASE;
   }

File: src/main/java/redis/clients/jedis/Protocol.java
Patch:
@@ -247,7 +247,7 @@ public static enum Command implements ProtocolCommand {
     PING, SET, GET, GETDEL, GETEX, QUIT, EXISTS, DEL, UNLINK, TYPE, FLUSHDB, KEYS, RANDOMKEY, RENAME,
     RENAMENX, RENAMEX, DBSIZE, EXPIRE, EXPIREAT, TTL, SELECT, MOVE, FLUSHALL, GETSET, MGET, SETNX,
     SETEX, MSET, MSETNX, DECRBY, DECR, INCRBY, INCR, APPEND, SUBSTR, HSET, HGET, HSETNX, HMSET,
-    HMGET, HINCRBY, HEXISTS, HDEL, HLEN, HKEYS, HVALS, HGETALL, RPUSH, LPUSH, LLEN, LRANGE, LTRIM,
+    HMGET, HINCRBY, HEXISTS, HDEL, HLEN, HKEYS, HVALS, HGETALL, HRANDFIELD, RPUSH, LPUSH, LLEN, LRANGE, LTRIM,
     LINDEX, LSET, LREM, LPOP, RPOP, RPOPLPUSH, SADD, SMEMBERS, SREM, SPOP, SMOVE, SCARD, SISMEMBER,
     SINTER, SINTERSTORE, SUNION, SUNIONSTORE, SDIFF, SDIFFSTORE, SRANDMEMBER, ZADD, ZRANGE, ZREM,
     ZINCRBY, ZRANK, ZREVRANK, ZREVRANGE, ZCARD, ZSCORE, ZPOPMAX, ZPOPMIN, MULTI, DISCARD, EXEC,
@@ -283,7 +283,7 @@ public static enum Keyword implements Rawable {
     GETNAME, SETNAME, LIST, MATCH, COUNT, PING, PONG, UNLOAD, REPLACE, KEYS, PAUSE, DOCTOR, BLOCK,
     NOACK, STREAMS, KEY, CREATE, MKSTREAM, SETID, DESTROY, DELCONSUMER, MAXLEN, GROUP, ID, IDLE,
     TIME, RETRYCOUNT, FORCE, USAGE, SAMPLES, STREAM, GROUPS, CONSUMERS, HELP, FREQ, SETUSER,
-    GETUSER, DELUSER, WHOAMI, CAT, GENPASS, USERS, LOG, INCR, SAVE, JUSTID;
+    GETUSER, DELUSER, WHOAMI, CAT, GENPASS, USERS, LOG, INCR, SAVE, JUSTID, WITHVALUES;
 
     /**
      * @deprecated This will be private in future. Use {@link #getRaw()}.

File: src/main/java/redis/clients/jedis/Protocol.java
Patch:
@@ -5,6 +5,7 @@
 import java.util.List;
 import java.util.Locale;
 
+import redis.clients.jedis.args.Rawable;
 import redis.clients.jedis.commands.ProtocolCommand;
 import redis.clients.jedis.exceptions.*;
 import redis.clients.jedis.util.RedisInputStream;
@@ -275,7 +276,7 @@ public byte[] getRaw() {
     }
   }
 
-  public static enum Keyword {
+  public static enum Keyword implements Rawable {
     AGGREGATE, ALPHA, ASC, BY, DESC, GET, LIMIT, MESSAGE, NO, NOSORT, PMESSAGE, PSUBSCRIBE,
     PUNSUBSCRIBE, OK, ONE, QUEUED, SET, STORE, SUBSCRIBE, UNSUBSCRIBE, WEIGHTS, WITHSCORES,
     RESETSTAT, REWRITE, RESET, FLUSH, EXISTS, LOAD, KILL, LEN, REFCOUNT, ENCODING, IDLETIME,
@@ -294,6 +295,7 @@ public static enum Keyword {
       raw = SafeEncoder.encode(this.name().toLowerCase(Locale.ENGLISH));
     }
 
+    @Override
     public byte[] getRaw() {
       return raw;
     }

File: src/main/java/redis/clients/jedis/commands/ProtocolCommand.java
Patch:
@@ -1,7 +1,6 @@
 package redis.clients.jedis.commands;
 
-public interface ProtocolCommand {
-
-  byte[] getRaw();
+import redis.clients.jedis.args.Rawable;
 
+public interface ProtocolCommand extends Rawable {
 }

File: src/main/java/redis/clients/jedis/PipelineBase.java
Patch:
@@ -2079,13 +2079,13 @@ public Response<List<byte[]>> xrange(byte[] key, byte[] start, byte[] end, int c
   @Override
   public Response<List<StreamEntry>> xrevrange(String key, StreamEntryID end, StreamEntryID start,
       int count) {
-    getClient(key).xrevrange(key, start, end, count);
+    getClient(key).xrevrange(key, end, start, count);
     return getResponse(BuilderFactory.STREAM_ENTRY_LIST);
   }
 
   @Override
   public Response<List<byte[]>> xrevrange(byte[] key, byte[] end, byte[] start, int count) {
-    getClient(key).xrevrange(key, start, end, count);
+    getClient(key).xrevrange(key, end, start, count);
     return getResponse(BuilderFactory.BYTE_ARRAY_LIST);
   }
 

File: src/main/java/redis/clients/jedis/Protocol.java
Patch:
@@ -261,7 +261,7 @@ public static enum Command implements ProtocolCommand {
     READONLY, GEOADD, GEODIST, GEOHASH, GEOPOS, GEORADIUS, GEORADIUS_RO, GEORADIUSBYMEMBER,
     GEORADIUSBYMEMBER_RO, MODULE, BITFIELD, HSTRLEN, TOUCH, SWAPDB, MEMORY, XADD, XLEN, XDEL,
     XTRIM, XRANGE, XREVRANGE, XREAD, XACK, XGROUP, XREADGROUP, XPENDING, XCLAIM, ACL, XINFO,
-    BITFIELD_RO, LPOS, SMISMEMBER, ZMSCORE;
+    BITFIELD_RO, LPOS, SMISMEMBER, ZMSCORE, BZPOPMIN, BZPOPMAX;
 
     private final byte[] raw;
 

File: src/main/java/redis/clients/jedis/commands/BinaryJedisCommands.java
Patch:
@@ -407,7 +407,7 @@ List<GeoRadiusResponse> georadiusByMemberReadonly(byte[] key, byte[] member, dou
    */
   @Deprecated
   default List<byte[]> xrange(byte[] key, byte[] start, byte[] end, long count) {
-    return xrange(key, start, end, (int) Math.max(count, (long) Integer.MAX_VALUE));
+    return xrange(key, start, end, (int) Math.min(count, (long) Integer.MAX_VALUE));
   }
 
   List<byte[]> xrange(byte[] key, byte[] start, byte[] end, int count);

File: src/main/java/redis/clients/jedis/Protocol.java
Patch:
@@ -282,7 +282,7 @@ public static enum Keyword {
     GETNAME, SETNAME, LIST, MATCH, COUNT, PING, PONG, UNLOAD, REPLACE, KEYS, PAUSE, DOCTOR, BLOCK,
     NOACK, STREAMS, KEY, CREATE, MKSTREAM, SETID, DESTROY, DELCONSUMER, MAXLEN, GROUP, ID, IDLE,
     TIME, RETRYCOUNT, FORCE, USAGE, SAMPLES, STREAM, GROUPS, CONSUMERS, HELP, FREQ, SETUSER,
-    GETUSER, DELUSER, WHOAMI, CAT, GENPASS, USERS, LOG;
+    GETUSER, DELUSER, WHOAMI, CAT, GENPASS, USERS, LOG, INCR;
 
     /**
      * @deprecated This will be private in future. Use {@link #getRaw()}.

File: src/main/java/redis/clients/jedis/BinaryJedisCluster.java
Patch:
@@ -119,7 +119,7 @@ public BinaryJedisCluster(Set<HostAndPort> jedisClusterNode, int connectionTimeo
   }
 
   public BinaryJedisCluster(Set<HostAndPort> jedisClusterNode, JedisClientConfig clientConfig,
-      int maxAttempts, GenericObjectPoolConfig poolConfig) {
+      int maxAttempts, GenericObjectPoolConfig<Jedis> poolConfig) {
     this.connectionHandler = new JedisSlotBasedConnectionHandler(jedisClusterNode, poolConfig, clientConfig);
     this.maxAttempts = maxAttempts;
   }

File: src/main/java/redis/clients/jedis/JedisCluster.java
Patch:
@@ -107,7 +107,8 @@ public JedisCluster(HostAndPort node, int connectionTimeout, int soTimeout,
             ssl, sslSocketFactory, sslParameters, hostnameVerifier, hostAndPortMap);
   }
 
-  public JedisCluster(HostAndPort node, final JedisClientConfig clientConfig, int maxAttempts, final GenericObjectPoolConfig poolConfig) {
+  public JedisCluster(HostAndPort node, final JedisClientConfig clientConfig, int maxAttempts,
+      final GenericObjectPoolConfig<Jedis> poolConfig) {
     this(Collections.singleton(node), clientConfig, maxAttempts, poolConfig);
   }
 
@@ -222,7 +223,7 @@ public JedisCluster(Set<HostAndPort> jedisClusterNode, int connectionTimeout, in
   }
 
   public JedisCluster(Set<HostAndPort> nodes, final JedisClientConfig clientConfig, int maxAttempts,
-      final GenericObjectPoolConfig poolConfig) {
+      final GenericObjectPoolConfig<Jedis> poolConfig) {
     super(nodes, clientConfig, maxAttempts, poolConfig);
   }
 

File: src/main/java/redis/clients/jedis/JedisClusterConnectionHandler.java
Patch:
@@ -83,13 +83,13 @@ public JedisClusterConnectionHandler(Set<HostAndPort> nodes, final GenericObject
    */
   @Deprecated
   public JedisClusterConnectionHandler(Set<HostAndPort> nodes, final JedisClientConfig seedNodesClientConfig,
-      final GenericObjectPoolConfig poolConfig, final JedisClientConfig clusterNodesClientConfig) {
+      final GenericObjectPoolConfig<Jedis> poolConfig, final JedisClientConfig clusterNodesClientConfig) {
     this.cache = new JedisClusterInfoCache(poolConfig, clusterNodesClientConfig);
     initializeSlotsCache(nodes, seedNodesClientConfig);
   }
 
   public JedisClusterConnectionHandler(Set<HostAndPort> nodes,
-      final GenericObjectPoolConfig poolConfig, final JedisClientConfig clientConfig) {
+      final GenericObjectPoolConfig<Jedis> poolConfig, final JedisClientConfig clientConfig) {
     this.cache = new JedisClusterInfoCache(poolConfig, clientConfig);
     initializeSlotsCache(nodes, clientConfig);
   }

File: src/main/java/redis/clients/jedis/JedisSlotBasedConnectionHandler.java
Patch:
@@ -64,7 +64,7 @@ public JedisSlotBasedConnectionHandler(Set<HostAndPort> nodes, GenericObjectPool
     super(nodes, poolConfig, connectionTimeout, soTimeout, infiniteSoTimeout, user, password, clientName, ssl, sslSocketFactory, sslParameters, hostnameVerifier, portMap);
   }
 
-  public JedisSlotBasedConnectionHandler(Set<HostAndPort> nodes, GenericObjectPoolConfig poolConfig,
+  public JedisSlotBasedConnectionHandler(Set<HostAndPort> nodes, GenericObjectPoolConfig<Jedis> poolConfig,
       JedisClientConfig clientConfig) {
     super(nodes, poolConfig, clientConfig);
   }

File: src/test/java/redis/clients/jedis/tests/JedisPoolWithCompleteCredentialsTest.java
Patch:
@@ -79,7 +79,7 @@ public void checkResourceIsClosableAndReusable() {
 
   @Test
   public void checkResourceWithConfigIsClosableAndReusable() {
-    GenericObjectPoolConfig config = new GenericObjectPoolConfig();
+    GenericObjectPoolConfig<Jedis> config = new GenericObjectPoolConfig<>();
     config.setMaxTotal(1);
     config.setBlockWhenExhausted(false);
     try (JedisPool pool = new JedisPool(config, hnp, DefaultJedisClientConfig.builder()

File: src/main/java/redis/clients/jedis/Connection.java
Patch:
@@ -24,7 +24,7 @@ public class Connection implements Closeable {
   private static final byte[][] EMPTY_ARGS = new byte[0][];
 
   private boolean socketParamModified = false; // for backward compatibility
-  private JedisSocketFactory socketFactory; // TODO: sould be final
+  private JedisSocketFactory socketFactory; // TODO: should be final
   private Socket socket;
   private RedisOutputStream outputStream;
   private RedisInputStream inputStream;
@@ -72,8 +72,8 @@ public Connection(final String host, final int port, final boolean ssl,
 
   public Connection(final HostAndPort hostAndPort, final JedisClientConfig clientConfig) {
     this(new DefaultJedisSocketFactory(hostAndPort, clientConfig));
-    this.soTimeout = clientConfig.getSoTimeout();
-    this.infiniteSoTimeout = clientConfig.getInfiniteSoTimeout();
+    this.soTimeout = clientConfig.getSoTimeoutMillis();
+    this.infiniteSoTimeout = clientConfig.getInfiniteSoTimeoutMillis();
   }
 
   public Connection(final JedisSocketFactory jedisSocketFactory) {

File: src/main/java/redis/clients/jedis/DefaultJedisSocketFactory.java
Patch:
@@ -47,8 +47,8 @@ public DefaultJedisSocketFactory(String host, int port, int connectionTimeout, i
   public DefaultJedisSocketFactory(HostAndPort hostAndPort, JedisClientConfig config) {
     this.hostAndPort = hostAndPort;
     if (config != null) {
-      this.connectionTimeout = config.getConnectionTimeout();
-      this.soTimeout = config.getSoTimeout();
+      this.connectionTimeout = config.getConnectionTimeoutMillis();
+      this.soTimeout = config.getSoTimeoutMillis();
       this.ssl = config.isSsl();
       this.sslSocketFactory = config.getSslSocketFactory();
       this.sslParameters = config.getSslParameters();

File: src/main/java/redis/clients/jedis/JedisClusterInfoCache.java
Patch:
@@ -111,8 +111,8 @@ public JedisClusterInfoCache(final GenericObjectPoolConfig<Jedis> poolConfig,
       SSLSocketFactory sslSocketFactory, SSLParameters sslParameters,
       HostnameVerifier hostnameVerifier, HostAndPortMapper hostAndPortMap) {
     this(poolConfig,
-        DefaultJedisClientConfig.builder().withConnectionTimeout(connectionTimeout)
-            .withSoTimeout(soTimeout).withInfiniteSoTimeout(infiniteSoTimeout)
+        DefaultJedisClientConfig.builder().withConnectionTimeoutMillis(connectionTimeout)
+            .withSoTimeoutMillis(soTimeout).withInfiniteSoTimeoutMillis(infiniteSoTimeout)
             .withUser(user).withPassword(password).withClientName(clientName)
             .withSsl(ssl).withSslSocketFactory(sslSocketFactory)
             .withSslParameters(sslParameters) .withHostnameVerifier(hostnameVerifier)

File: src/test/java/redis/clients/jedis/tests/JedisClusterTest.java
Patch:
@@ -629,7 +629,7 @@ public void testJedisClusterTimeout() {
   public void testJedisClusterTimeoutWithConfig() {
     HostAndPort hp = nodeInfo1;
     try (JedisCluster jc = new JedisCluster(hp, DefaultJedisClientConfig.builder()
-        .withConnectionTimeout(4000).withSoTimeout(4000).withPassword("cluster").build(),
+        .withConnectionTimeoutMillis(4000).withSoTimeoutMillis(4000).withPassword("cluster").build(),
         DEFAULT_REDIRECTIONS, DEFAULT_POOL_CONFIG)) {
 
       jc.getClusterNodes().values().forEach(pool -> {

File: src/main/java/redis/clients/jedis/JedisPoolAbstract.java
Patch:
@@ -16,7 +16,7 @@ public JedisPoolAbstract() {
     super();
   }
 
-  public JedisPoolAbstract(GenericObjectPoolConfig poolConfig, PooledObjectFactory<Jedis> factory) {
+  public JedisPoolAbstract(GenericObjectPoolConfig<Jedis> poolConfig, PooledObjectFactory<Jedis> factory) {
     super(poolConfig, factory);
   }
 }

File: src/main/java/redis/clients/jedis/JedisPoolConfig.java
Patch:
@@ -2,7 +2,7 @@
 
 import org.apache.commons.pool2.impl.GenericObjectPoolConfig;
 
-public class JedisPoolConfig extends GenericObjectPoolConfig {
+public class JedisPoolConfig extends GenericObjectPoolConfig<Jedis> {
   public JedisPoolConfig() {
     // defaults to make your life with connection pool easier :)
     setTestWhileIdle(true);

File: src/main/java/redis/clients/jedis/util/Pool.java
Patch:
@@ -25,7 +25,7 @@ public abstract class Pool<T> implements Closeable {
   public Pool() {
   }
 
-  public Pool(final GenericObjectPoolConfig poolConfig, PooledObjectFactory<T> factory) {
+  public Pool(final GenericObjectPoolConfig<T> poolConfig, PooledObjectFactory<T> factory) {
     initPool(poolConfig, factory);
   }
 
@@ -38,7 +38,7 @@ public boolean isClosed() {
     return this.internalPool.isClosed();
   }
 
-  public void initPool(final GenericObjectPoolConfig poolConfig, PooledObjectFactory<T> factory) {
+  public void initPool(final GenericObjectPoolConfig<T> poolConfig, PooledObjectFactory<T> factory) {
 
     if (this.internalPool != null) {
       try {

File: src/test/java/redis/clients/jedis/tests/JedisPoolWithCompleteCredentialsTest.java
Patch:
@@ -59,7 +59,7 @@ public void checkCloseableConnections() throws Exception {
 
   @Test
   public void checkResourceIsClosableAndReusable() {
-    GenericObjectPoolConfig config = new GenericObjectPoolConfig();
+    GenericObjectPoolConfig<Jedis> config = new GenericObjectPoolConfig<>();
     config.setMaxTotal(1);
     config.setBlockWhenExhausted(false);
     try (JedisPool pool = new JedisPool(config, hnp.getHost(), hnp.getPort(),
@@ -116,7 +116,7 @@ public void checkPoolRepairedWhenJedisIsBroken() {
 
   @Test(expected = JedisExhaustedPoolException.class)
   public void checkPoolOverflow() {
-    GenericObjectPoolConfig config = new GenericObjectPoolConfig();
+    GenericObjectPoolConfig<Jedis> config = new GenericObjectPoolConfig<>();
     config.setMaxTotal(1);
     config.setBlockWhenExhausted(false);
     try (JedisPool pool = new JedisPool(config, hnp.getHost(), hnp.getPort());

File: src/test/java/redis/clients/jedis/tests/benchmark/PoolBenchmark.java
Patch:
@@ -30,7 +30,7 @@ public static void main(String[] args) throws Exception {
   }
 
   private static void withPool() throws Exception {
-    final JedisPool pool = new JedisPool(new GenericObjectPoolConfig(), hnp.getHost(),
+    final JedisPool pool = new JedisPool(new GenericObjectPoolConfig<Jedis>(), hnp.getHost(),
         hnp.getPort(), 2000, "foobared");
     List<Thread> tds = new ArrayList<Thread>();
 

File: src/test/java/redis/clients/jedis/tests/JedisPoolTest.java
Patch:
@@ -20,6 +20,7 @@
 import redis.clients.jedis.JedisPoolConfig;
 import redis.clients.jedis.Transaction;
 import redis.clients.jedis.exceptions.InvalidURIException;
+import redis.clients.jedis.exceptions.JedisConnectionException;
 import redis.clients.jedis.exceptions.JedisExhaustedPoolException;
 
 public class JedisPoolTest {
@@ -355,6 +356,7 @@ public void closeBrokenResourceTwice() {
         j.getClient().getOne();
         fail();
       } catch (Exception e) {
+        assertTrue(e instanceof JedisConnectionException);
       }
       assertTrue(j.isBroken());
       j.close();

File: src/test/java/redis/clients/jedis/tests/commands/ControlCommandsTest.java
Patch:
@@ -84,7 +84,7 @@ public void run() {
           Thread.sleep(100);
         } catch (InterruptedException e) {
         }
-        Jedis j = new Jedis("localhost");
+        Jedis j = new Jedis();
         j.auth("foobared");
         for (int i = 0; i < 5; i++) {
           j.incr("foobared");

File: src/main/java/redis/clients/jedis/JedisCluster.java
Patch:
@@ -284,7 +284,7 @@ public byte[] execute(Jedis connection) {
   }
 
   @Override
-  public String restore(final String key, final int ttl, final byte[] serializedValue) {
+  public String restore(final String key, final long ttl, final byte[] serializedValue) {
     return new JedisClusterCommand<String>(connectionHandler, maxAttempts) {
       @Override
       public String execute(Jedis connection) {
@@ -294,7 +294,7 @@ public String execute(Jedis connection) {
   }
 
   @Override
-  public Long expire(final String key, final int seconds) {
+  public Long expire(final String key, final long seconds) {
     return new JedisClusterCommand<Long>(connectionHandler, maxAttempts) {
       @Override
       public Long execute(Jedis connection) {
@@ -444,7 +444,7 @@ public Long execute(Jedis connection) {
   }
 
   @Override
-  public String setex(final String key, final int seconds, final String value) {
+  public String setex(final String key, final long seconds, final String value) {
     return new JedisClusterCommand<String>(connectionHandler, maxAttempts) {
       @Override
       public String execute(Jedis connection) {

File: src/main/java/redis/clients/jedis/Protocol.java
Patch:
@@ -243,7 +243,7 @@ public static final byte[] toByteArray(final double value) {
   }
 
   public static enum Command implements ProtocolCommand {
-    PING, SET, GET, QUIT, EXISTS, DEL, UNLINK, TYPE, FLUSHDB, KEYS, RANDOMKEY, RENAME, RENAMENX,
+    PING, SET, GET, GETDEL, QUIT, EXISTS, DEL, UNLINK, TYPE, FLUSHDB, KEYS, RANDOMKEY, RENAME, RENAMENX,
     RENAMEX, DBSIZE, EXPIRE, EXPIREAT, TTL, SELECT, MOVE, FLUSHALL, GETSET, MGET, SETNX, SETEX,
     MSET, MSETNX, DECRBY, DECR, INCRBY, INCR, APPEND, SUBSTR, HSET, HGET, HSETNX, HMSET, HMGET,
     HINCRBY, HEXISTS, HDEL, HLEN, HKEYS, HVALS, HGETALL, RPUSH, LPUSH, LLEN, LRANGE, LTRIM, LINDEX,

File: src/main/java/redis/clients/jedis/commands/BinaryJedisClusterCommands.java
Patch:
@@ -25,6 +25,8 @@ public interface BinaryJedisClusterCommands {
 
   byte[] get(byte[] key);
 
+  byte[] getDel(byte[] key);
+
   Boolean exists(byte[] key);
 
   Long persist(byte[] key);

File: src/main/java/redis/clients/jedis/commands/BinaryJedisCommands.java
Patch:
@@ -30,6 +30,8 @@ public interface BinaryJedisCommands {
   String set(byte[] key, byte[] value, SetParams params);
 
   byte[] get(byte[] key);
+  
+  byte[] getDel(byte[] key);
 
   Boolean exists(byte[] key);
 

File: src/main/java/redis/clients/jedis/commands/BinaryRedisPipeline.java
Patch:
@@ -47,6 +47,8 @@ public interface BinaryRedisPipeline {
   Response<Long> pexpireAt(byte[] key, long millisecondsTimestamp);
 
   Response<byte[]> get(byte[] key);
+  
+  Response<byte[]> getDel(byte[] key);
 
   Response<Boolean> getbit(byte[] key, long offset);
 

File: src/main/java/redis/clients/jedis/commands/Commands.java
Patch:
@@ -25,6 +25,8 @@ public interface Commands {
   void set(String key, String value, SetParams params);
 
   void get(String key);
+  
+  void getDel(String key);
 
   void exists(String... keys);
 

File: src/main/java/redis/clients/jedis/commands/JedisClusterCommands.java
Patch:
@@ -26,6 +26,8 @@ public interface JedisClusterCommands {
   String set(String key, String value, SetParams params);
 
   String get(String key);
+  
+  String getDel(String key);
 
   Boolean exists(String key);
 

File: src/main/java/redis/clients/jedis/commands/JedisCommands.java
Patch:
@@ -34,6 +34,8 @@ public interface JedisCommands {
   String set(String key, String value, SetParams params);
 
   String get(String key);
+  
+  String getDel(String key);
 
   Boolean exists(String key);
 

File: src/main/java/redis/clients/jedis/commands/RedisPipeline.java
Patch:
@@ -49,6 +49,8 @@ public interface RedisPipeline {
   Response<Long> pexpireAt(String key, long millisecondsTimestamp);
 
   Response<String> get(String key);
+  
+  Response<String> getDel(String key);
 
   Response<Boolean> getbit(String key, long offset);
 

File: src/main/java/redis/clients/jedis/JedisClusterConnectionHandler.java
Patch:
@@ -55,7 +55,7 @@ public JedisClusterConnectionHandler(Set<HostAndPort> nodes, final GenericObject
     this.cache = new JedisClusterInfoCache(poolConfig, connectionTimeout, soTimeout, infiniteSoTimeout,
         user, password, clientName, ssl, sslSocketFactory, sslParameters, hostnameVerifier, portMap);
     initializeSlotsCache(nodes, connectionTimeout, soTimeout, infiniteSoTimeout,
-        null, password, clientName, ssl, sslSocketFactory, sslParameters, hostnameVerifier);
+        user, password, clientName, ssl, sslSocketFactory, sslParameters, hostnameVerifier);
   }
 
   abstract Jedis getConnection();

File: src/main/java/redis/clients/jedis/JedisSentinelPool.java
Patch:
@@ -125,10 +125,9 @@ public JedisSentinelPool(String masterName, Set<String> sentinels,
   }
 
   public JedisSentinelPool(String masterName, Set<String> sentinels,
-      final GenericObjectPoolConfig poolConfig,
-      final int connectionTimeout, final int soTimeout, final int infiniteSoTimeout,
+      final GenericObjectPoolConfig poolConfig, final int connectionTimeout, final int soTimeout, final int infiniteSoTimeout,
       final String user, final String password, final int database, final String clientName) {
-    this(masterName, sentinels, poolConfig, connectionTimeout, soTimeout, 0, user, password, database, clientName,
+    this(masterName, sentinels, poolConfig, connectionTimeout, soTimeout, infiniteSoTimeout, user, password, database, clientName,
         Protocol.DEFAULT_TIMEOUT, Protocol.DEFAULT_TIMEOUT, null, null, null);
   }
 

File: src/main/java/redis/clients/jedis/Protocol.java
Patch:
@@ -281,7 +281,7 @@ public static enum Keyword {
     GETNAME, SETNAME, LIST, MATCH, COUNT, PING, PONG, UNLOAD, REPLACE, KEYS, PAUSE, DOCTOR,
     BLOCK, NOACK, STREAMS, KEY, CREATE, MKSTREAM, SETID, DESTROY, DELCONSUMER, MAXLEN, GROUP,
     ID, IDLE, TIME, RETRYCOUNT, FORCE, USAGE, SAMPLES, STREAM, GROUPS, CONSUMERS, HELP, FREQ,
-    SETUSER, GETUSER, DELUSER, WHOAMI, CAT, GENPASS, USERS;
+    SETUSER, GETUSER, DELUSER, WHOAMI, CAT, GENPASS, USERS, LOG;
 
     /**
      * @deprecated This will be private in future. Use {@link #getRaw()}.

File: src/main/java/redis/clients/jedis/Protocol.java
Patch:
@@ -280,7 +280,7 @@ public static enum Keyword {
     RESETSTAT, REWRITE, RESET, FLUSH, EXISTS, LOAD, KILL, LEN, REFCOUNT, ENCODING, IDLETIME,
     GETNAME, SETNAME, LIST, MATCH, COUNT, PING, PONG, UNLOAD, REPLACE, KEYS, PAUSE, DOCTOR,
     BLOCK, NOACK, STREAMS, KEY, CREATE, MKSTREAM, SETID, DESTROY, DELCONSUMER, MAXLEN, GROUP,
-    ID, IDLE, TIME, RETRYCOUNT, FORCE, STREAM, GROUPS, CONSUMERS, HELP, FREQ,
+    ID, IDLE, TIME, RETRYCOUNT, FORCE, USAGE, SAMPLES, STREAM, GROUPS, CONSUMERS, HELP, FREQ,
     SETUSER, GETUSER, DELUSER, WHOAMI, CAT, GENPASS, USERS;
 
     public final byte[] raw;

File: src/main/java/redis/clients/jedis/BinaryClient.java
Patch:
@@ -385,7 +385,7 @@ public void lpos(final byte[] key, final byte[] element, LPosParams params) {
   }
 
   public void lpos(final byte[] key, final byte[] element, final LPosParams params, final long count){
-    sendCommand(LPOS, joinParameters(key, element, params.getByteParams(toByteArray(count))));
+    sendCommand(LPOS, joinParameters(key, element, params.getByteParams(Keyword.COUNT.raw, toByteArray(count))));
   }
 
   public void rpop(final byte[] key) {

File: src/test/java/redis/clients/jedis/tests/JedisSentinelPoolTest.java
Patch:
@@ -180,7 +180,7 @@ public void ensureSafeTwiceFailover() throws InterruptedException {
 
     forceFailover(pool);
     // after failover sentinel needs a bit of time to stabilize before a new failover
-    Thread.sleep(100);
+    Thread.sleep(1000);
     forceFailover(pool);
 
     // you can test failover as much as possible

File: src/test/java/redis/clients/jedis/tests/commands/SlowlogCommandsTest.java
Patch:
@@ -27,7 +27,7 @@ public void slowlog() {
     Slowlog log = reducedLog.get(0);
     assertTrue(log.getId() > 0);
     assertTrue(log.getTimeStamp() > 0);
-    assertTrue(log.getExecutionTime() > 0);
+    assertTrue(log.getExecutionTime() >= 0);
     assertNotNull(log.getArgs());
 
     List<byte[]> breducedLog = jedis.slowlogGetBinary(1);

File: src/main/java/redis/clients/jedis/params/SetParams.java
Patch:
@@ -65,6 +65,7 @@ public SetParams xx() {
    */
   public SetParams keepttl() {
     addParam(KEEPTTL);
+    return this;
   }
   
   /**

File: src/main/java/redis/clients/jedis/Protocol.java
Patch:
@@ -280,7 +280,7 @@ public static enum Keyword {
     RESETSTAT, REWRITE, RESET, FLUSH, EXISTS, LOAD, KILL, LEN, REFCOUNT, ENCODING, IDLETIME,
     GETNAME, SETNAME, LIST, MATCH, COUNT, PING, PONG, UNLOAD, REPLACE, KEYS, PAUSE, DOCTOR,
     BLOCK, NOACK, STREAMS, KEY, CREATE, MKSTREAM, SETID, DESTROY, DELCONSUMER, MAXLEN, GROUP,
-    IDLE, TIME, RETRYCOUNT, FORCE, STREAM, GROUPS, CONSUMERS, HELP, FREQ,
+    ID, IDLE, TIME, RETRYCOUNT, FORCE, STREAM, GROUPS, CONSUMERS, HELP, FREQ,
     SETUSER, GETUSER, DELUSER, WHOAMI, CAT, GENPASS, USERS;
 
     public final byte[] raw;

File: src/main/java/redis/clients/jedis/commands/AdvancedBinaryJedisCommands.java
Patch:
@@ -46,6 +46,8 @@ public interface AdvancedBinaryJedisCommands {
 
   String clientSetname(byte[] name);
 
+  Long clientId();
+
   byte[] memoryDoctorBinary();
 
   byte[] aclWhoAmIBinary();

File: src/main/java/redis/clients/jedis/commands/AdvancedJedisCommands.java
Patch:
@@ -46,6 +46,8 @@ public interface AdvancedJedisCommands {
 
   String clientSetname(String name);
 
+  Long clientId();
+
   String memoryDoctor();
 
   String aclWhoAmI();

File: src/main/java/redis/clients/jedis/commands/Commands.java
Patch:
@@ -376,6 +376,8 @@ void zrevrangeByScoreWithScores(String key, String max, String min,
 
   void clientSetname(String name);
 
+  void clientId();
+
   void memoryDoctor();
 
   void xadd(String key, StreamEntryID id, Map<String, String> hash, long maxLen, boolean approximateLength);

File: src/main/java/redis/clients/jedis/JedisSentinelPool.java
Patch:
@@ -55,7 +55,7 @@ public JedisSentinelPool(String masterName, Set<String> sentinels, String passwo
 
   public JedisSentinelPool(String masterName, Set<String> sentinels, String password, String sentinelPassword) {
     this(masterName, sentinels,  new GenericObjectPoolConfig(),  Protocol.DEFAULT_TIMEOUT,  Protocol.DEFAULT_TIMEOUT,
-        password,Protocol.DEFAULT_DATABASE, null, Protocol.DEFAULT_TIMEOUT, Protocol.DEFAULT_TIMEOUT, sentinelPassword, null);
+        null, password, Protocol.DEFAULT_DATABASE, null, Protocol.DEFAULT_TIMEOUT, Protocol.DEFAULT_TIMEOUT, sentinelPassword, null);
   }
 
   public JedisSentinelPool(String masterName, Set<String> sentinels,

File: src/main/java/redis/clients/jedis/BinaryJedis.java
Patch:
@@ -4148,10 +4148,10 @@ public Long xgroupDestroy(byte[] key, byte[] consumer) {
   }
 
   @Override
-  public String xgroupDelConsumer(byte[] key, byte[] consumer, byte[] consumerName) {
+  public Long xgroupDelConsumer(byte[] key, byte[] consumer, byte[] consumerName) {
     checkIsInMultiOrPipeline();
     client.xgroupDelConsumer(key, consumer, consumerName);
-    return client.getStatusCodeReply();  
+    return client.getIntegerReply();
   }
 
   @Override

File: src/main/java/redis/clients/jedis/BinaryJedisCluster.java
Patch:
@@ -2187,10 +2187,10 @@ public Long execute(Jedis connection) {
   }
 
   @Override
-  public String xgroupDelConsumer(final byte[] key, final byte[] consumer, final byte[] consumerName) {
-    return new JedisClusterCommand<String>(connectionHandler, maxAttempts) {
+  public Long xgroupDelConsumer(final byte[] key, final byte[] consumer, final byte[] consumerName) {
+    return new JedisClusterCommand<Long>(connectionHandler, maxAttempts) {
       @Override
-      public String execute(Jedis connection) {
+      public Long execute(Jedis connection) {
         return connection.xgroupDelConsumer(key, consumer, consumerName);
       }
     }.runBinary(key);

File: src/main/java/redis/clients/jedis/BinaryShardedJedis.java
Patch:
@@ -1032,7 +1032,7 @@ public Long xgroupDestroy(byte[] key, byte[] consumer) {
   }
 
   @Override
-  public String xgroupDelConsumer(byte[] key, byte[] consumer, byte[] consumerName) {
+  public Long xgroupDelConsumer(byte[] key, byte[] consumer, byte[] consumerName) {
     Jedis j = getShard(key);
     return j.xgroupDelConsumer(key, consumer, consumerName);
   }

File: src/main/java/redis/clients/jedis/Jedis.java
Patch:
@@ -3862,10 +3862,10 @@ public long xgroupDestroy(final String key, final String groupname) {
   }
 
   @Override
-  public String xgroupDelConsumer(final String key, final String groupname, final String consumerName) {
+  public Long xgroupDelConsumer(final String key, final String groupname, final String consumerName) {
     checkIsInMultiOrPipeline();
     client.xgroupDelConsumer(key, groupname, consumerName);
-    return client.getStatusCodeReply();
+    return client.getIntegerReply();
   }
 
   @Override

File: src/main/java/redis/clients/jedis/JedisCluster.java
Patch:
@@ -2235,10 +2235,10 @@ public Long execute(Jedis connection) {
   }
 
   @Override
-  public String xgroupDelConsumer(final String key, final String groupname, final String consumername) {
-    return new JedisClusterCommand<String>(connectionHandler, maxAttempts) {
+  public Long xgroupDelConsumer(final String key, final String groupname, final String consumername) {
+    return new JedisClusterCommand<Long>(connectionHandler, maxAttempts) {
       @Override
-      public String execute(Jedis connection) {
+      public Long execute(Jedis connection) {
         return connection.xgroupDelConsumer(key, groupname, consumername);
       }
     }.run(key);

File: src/main/java/redis/clients/jedis/ShardedJedis.java
Patch:
@@ -1041,7 +1041,7 @@ public long xgroupDestroy(String key, String groupname) {
   }
 
   @Override
-  public String xgroupDelConsumer(String key, String groupname, String consumername) {
+  public Long xgroupDelConsumer(String key, String groupname, String consumername) {
     Jedis j = getShard(key);
     return j.xgroupDelConsumer(key, groupname, consumername);
   }

File: src/main/java/redis/clients/jedis/commands/BinaryJedisClusterCommands.java
Patch:
@@ -346,7 +346,7 @@ List<GeoRadiusResponse> georadiusByMemberReadonly(byte[] key, byte[] member, dou
 
   Long xgroupDestroy(final byte[] key, final byte[] consumer);
 
-  String xgroupDelConsumer(final byte[] key, final byte[] consumer, final byte[] consumerName);
+  Long xgroupDelConsumer(final byte[] key, final byte[] consumer, final byte[] consumerName);
  
   Long xdel(final byte[] key, final byte[]... ids);
 

File: src/main/java/redis/clients/jedis/commands/BinaryJedisCommands.java
Patch:
@@ -357,7 +357,7 @@ List<GeoRadiusResponse> georadiusByMemberReadonly(byte[] key, byte[] member, dou
 
   Long xgroupDestroy(final byte[] key, final byte[] consumer);
 
-  String xgroupDelConsumer(final byte[] key, final byte[] consumer, final byte[] consumerName);
+  Long xgroupDelConsumer(final byte[] key, final byte[] consumer, final byte[] consumerName);
  
   Long xdel(final byte[] key, final byte[]... ids);
 

File: src/main/java/redis/clients/jedis/commands/BinaryRedisPipeline.java
Patch:
@@ -331,7 +331,7 @@ Response<List<GeoRadiusResponse>> georadiusByMemberReadonly(byte[] key, byte[] m
   
   Response<Long> xgroupDestroy(byte[] key, byte[] groupname);
   
-  Response<String> xgroupDelConsumer(byte[] key, byte[] groupname, byte[] consumername);
+  Response<Long> xgroupDelConsumer(byte[] key, byte[] groupname, byte[] consumername);
 
   Response<List<StreamPendingEntry>> xpending(byte[] key, byte[] groupname, byte[] start, byte[] end, int count, byte[] consumername);
   

File: src/main/java/redis/clients/jedis/commands/JedisClusterCommands.java
Patch:
@@ -434,7 +434,7 @@ List<GeoRadiusResponse> georadiusByMemberReadonly(String key, String member, dou
    * @param consumername
    * @return
    */
-  String xgroupDelConsumer( String key, String groupname, String consumername);
+  Long xgroupDelConsumer( String key, String groupname, String consumername);
 
   /**
    * XREAD [COUNT count] [BLOCK milliseconds] STREAMS key [key ...] ID [ID ...]

File: src/main/java/redis/clients/jedis/commands/JedisCommands.java
Patch:
@@ -452,7 +452,7 @@ List<GeoRadiusResponse> georadiusByMemberReadonly(String key, String member, dou
    * @param consumername
    * @return
    */
-  String xgroupDelConsumer( String key, String groupname, String consumername);
+  Long xgroupDelConsumer( String key, String groupname, String consumername);
 
   /**
    * XPENDING key group [start end count] [consumer]

File: src/main/java/redis/clients/jedis/commands/RedisPipeline.java
Patch:
@@ -326,7 +326,7 @@ Response<List<GeoRadiusResponse>> georadiusByMemberReadonly(String key, String m
   
   Response<Long> xgroupDestroy( String key, String groupname);
   
-  Response<String> xgroupDelConsumer( String key, String groupname, String consumername);
+  Response<Long> xgroupDelConsumer( String key, String groupname, String consumername);
 
   Response<List<StreamPendingEntry>> xpending(String key, String groupname, StreamEntryID start, StreamEntryID end, int count, String consumername);
   

File: src/test/java/redis/clients/jedis/tests/JedisSentinelPoolTest.java
Patch:
@@ -282,4 +282,4 @@ private void waitForJedisSentinelPoolRecognizeNewMaster(JedisSentinelPool pool,
     }
   }
 
-}
\ No newline at end of file
+}

File: src/main/java/redis/clients/jedis/BuilderFactory.java
Patch:
@@ -422,6 +422,9 @@ public List<GeoRadiusResponse> build(Object data) {
 
               resp.setCoordinate(new GeoCoordinate(DOUBLE.build(coord.get(0)),
                   DOUBLE.build(coord.get(1))));
+            } else if (info instanceof Long) {
+              // score
+              resp.setRawScore(LONG.build(info));
             } else {
               // distance
               resp.setDistance(DOUBLE.build(info));

File: src/test/java/redis/clients/jedis/tests/commands/SetCommandsTest.java
Patch:
@@ -162,7 +162,7 @@ public void spopWithCount() {
     assertEquals(1, members.size());
     assertEquals(superSet, members);
 
-    assertNull(jedis.spop("foo", 2));
+    assertTrue(jedis.spop("foo", 2).isEmpty());
 
     // Binary
     jedis.sadd(bfoo, ba);
@@ -184,7 +184,7 @@ public void spopWithCount() {
     assertEquals(1, bmembers.size());
     assertByteArraySetEquals(bsuperSet, bmembers);
 
-    assertNull(jedis.spop(bfoo, 2));
+    assertTrue(jedis.spop(bfoo, 2).isEmpty());
   }
 
   @Test

File: src/test/java/redis/clients/jedis/tests/commands/SetCommandsTest.java
Patch:
@@ -162,7 +162,7 @@ public void spopWithCount() {
     assertEquals(1, members.size());
     assertEquals(superSet, members);
 
-    assertNull(jedis.spop("foo", 2));
+    assertTrue(jedis.spop("foo", 2).isEmpty());
 
     // Binary
     jedis.sadd(bfoo, ba);
@@ -184,7 +184,7 @@ public void spopWithCount() {
     assertEquals(1, bmembers.size());
     assertByteArraySetEquals(bsuperSet, bmembers);
 
-    assertNull(jedis.spop(bfoo, 2));
+    assertTrue(jedis.spop(bfoo, 2).isEmpty());
   }
 
   @Test

File: src/main/java/redis/clients/jedis/BinaryJedis.java
Patch:
@@ -3673,7 +3673,7 @@ public ScanResult<byte[]> scan(final byte[] cursor, final ScanParams params) {
     List<Object> result = client.getObjectMultiBulkReply();
     byte[] newcursor = (byte[]) result.get(0);
     List<byte[]> rawResults = (List<byte[]>) result.get(1);
-    return new ScanResult<byte[]>(newcursor, rawResults);
+    return new ScanResult<>(newcursor, rawResults);
   }
 
   @Override
@@ -3688,7 +3688,7 @@ public ScanResult<Map.Entry<byte[], byte[]>> hscan(final byte[] key, final byte[
     client.hscan(key, cursor, params);
     List<Object> result = client.getObjectMultiBulkReply();
     byte[] newcursor = (byte[]) result.get(0);
-    List<Map.Entry<byte[], byte[]>> results = new ArrayList<Map.Entry<byte[], byte[]>>();
+    List<Map.Entry<byte[], byte[]>> results = new ArrayList<>();
     List<byte[]> rawResults = (List<byte[]>) result.get(1);
     Iterator<byte[]> iterator = rawResults.iterator();
     while (iterator.hasNext()) {

File: src/main/java/redis/clients/jedis/BitPosParams.java
Patch:
@@ -6,7 +6,7 @@
 import java.util.List;
 
 public class BitPosParams {
-  private List<byte[]> params = new ArrayList<byte[]>();
+  private List<byte[]> params = new ArrayList<>();
 
   protected BitPosParams() {
   }

File: src/main/java/redis/clients/jedis/Jedis.java
Patch:
@@ -2870,7 +2870,7 @@ private Object evalResult(Object result) {
 
     if (result instanceof List<?>) {
       List<?> list = (List<?>) result;
-      List<Object> listResult = new ArrayList<Object>(list.size());
+      List<Object> listResult = new ArrayList<>(list.size());
       for (Object bin : list) {
         listResult.add(evalResult(bin));
       }
@@ -3240,7 +3240,7 @@ public ScanResult<String> scan(final String cursor, final ScanParams params) {
     client.scan(cursor, params);
     List<Object> result = client.getObjectMultiBulkReply();
     String newcursor = new String((byte[]) result.get(0));
-    List<String> results = new ArrayList<String>();
+    List<String> results = new ArrayList<>();
     List<byte[]> rawResults = (List<byte[]>) result.get(1);
     for (byte[] bs : rawResults) {
       results.add(SafeEncoder.encode(bs));
@@ -3281,7 +3281,7 @@ public ScanResult<String> sscan(final String key, final String cursor, final Sca
     client.sscan(key, cursor, params);
     List<Object> result = client.getObjectMultiBulkReply();
     String newcursor = new String((byte[]) result.get(0));
-    List<String> results = new ArrayList<String>();
+    List<String> results = new ArrayList<>();
     List<byte[]> rawResults = (List<byte[]>) result.get(1);
     for (byte[] bs : rawResults) {
       results.add(SafeEncoder.encode(bs));

File: src/main/java/redis/clients/jedis/JedisClusterConnectionHandler.java
Patch:
@@ -30,7 +30,7 @@ public JedisClusterConnectionHandler(Set<HostAndPort> nodes,
       HostnameVerifier hostnameVerifier, JedisClusterHostAndPortMap portMap) {
     this.cache = new JedisClusterInfoCache(poolConfig, connectionTimeout, soTimeout, password, clientName,
         ssl, sslSocketFactory, sslParameters, hostnameVerifier, portMap);
-    initializeSlotsCache(nodes, poolConfig, connectionTimeout, soTimeout, password, clientName, ssl, sslSocketFactory, sslParameters, hostnameVerifier);
+    initializeSlotsCache(nodes, connectionTimeout, soTimeout, password, clientName, ssl, sslSocketFactory, sslParameters, hostnameVerifier);
   }
 
   abstract Jedis getConnection();
@@ -45,7 +45,7 @@ public Map<String, JedisPool> getNodes() {
     return cache.getNodes();
   }
 
-  private void initializeSlotsCache(Set<HostAndPort> startNodes, GenericObjectPoolConfig poolConfig,
+  private void initializeSlotsCache(Set<HostAndPort> startNodes,
       int connectionTimeout, int soTimeout, String password, String clientName,
       boolean ssl, SSLSocketFactory sslSocketFactory, SSLParameters sslParameters, HostnameVerifier hostnameVerifier) {
     for (HostAndPort hostAndPort : startNodes) {

File: src/main/java/redis/clients/jedis/ScanParams.java
Patch:
@@ -19,8 +19,8 @@ public class ScanParams {
 
   private final Map<Keyword, ByteBuffer> params = new EnumMap<Keyword, ByteBuffer>(Keyword.class);
 
-  public final static String SCAN_POINTER_START = String.valueOf(0);
-  public final static byte[] SCAN_POINTER_START_BINARY = SafeEncoder.encode(SCAN_POINTER_START);
+  public static final String SCAN_POINTER_START = String.valueOf(0);
+  public static final byte[] SCAN_POINTER_START_BINARY = SafeEncoder.encode(SCAN_POINTER_START);
 
   public ScanParams match(final byte[] pattern) {
     params.put(MATCH, ByteBuffer.wrap(pattern));

File: src/main/java/redis/clients/jedis/ShardedJedisPipeline.java
Patch:
@@ -7,8 +7,8 @@
 
 public class ShardedJedisPipeline extends PipelineBase {
   private BinaryShardedJedis jedis;
-  private List<FutureResult> results = new ArrayList<FutureResult>();
-  private Queue<Client> clients = new LinkedList<Client>();
+  private List<FutureResult> results = new ArrayList<>();
+  private Queue<Client> clients = new LinkedList<>();
 
   private static class FutureResult {
     private Client client;

File: src/test/java/redis/clients/jedis/tests/commands/AllKindOfValuesCommandsTest.java
Patch:
@@ -216,12 +216,12 @@ public void keys() {
     jedis.set("foobar", "bar");
 
     Set<String> keys = jedis.keys("foo*");
-    Set<String> expected = new HashSet<String>();
+    Set<String> expected = new HashSet<>();
     expected.add("foo");
     expected.add("foobar");
     assertEquals(expected, keys);
 
-    expected = new HashSet<String>();
+    expected = new HashSet<>();
     keys = jedis.keys("bar*");
 
     assertEquals(expected, keys);
@@ -636,7 +636,7 @@ public void restoreReplace() {
 
     jedis2.set("foo", "bar");
 
-    Map<String, String> map = new HashMap<String, String>();
+    Map<String, String> map = new HashMap<>();
     map.put("a", "A");
     map.put("b", "B");
 

File: src/test/java/redis/clients/jedis/tests/commands/BinaryValuesCommandsTest.java
Patch:
@@ -127,15 +127,15 @@ public void getSet() {
   @Test
   public void mget() {
     List<byte[]> values = jedis.mget(bfoo, bbar);
-    List<byte[]> expected = new ArrayList<byte[]>();
+    List<byte[]> expected = new ArrayList<>();
     expected.add(null);
     expected.add(null);
 
     assertByteArrayListEquals(expected, values);
 
     jedis.set(bfoo, binaryValue);
 
-    expected = new ArrayList<byte[]>();
+    expected = new ArrayList<>();
     expected.add(binaryValue);
     expected.add(null);
     values = jedis.mget(bfoo, bbar);
@@ -144,7 +144,7 @@ public void mget() {
 
     jedis.set(bbar, bfoo);
 
-    expected = new ArrayList<byte[]>();
+    expected = new ArrayList<>();
     expected.add(binaryValue);
     expected.add(bfoo);
     values = jedis.mget(bfoo, bbar);

File: src/test/java/redis/clients/jedis/tests/commands/ClusterBinaryJedisCommandsTest.java
Patch:
@@ -32,7 +32,7 @@ public class ClusterBinaryJedisCommandsTest {
   private HostAndPort nodeInfo1 = HostAndPortUtil.getClusterServers().get(0);
   private HostAndPort nodeInfo2 = HostAndPortUtil.getClusterServers().get(1);
   private HostAndPort nodeInfo3 = HostAndPortUtil.getClusterServers().get(2);
-  private final Set<HostAndPort> jedisClusterNode = new HashSet<HostAndPort>();
+  private final Set<HostAndPort> jedisClusterNode = new HashSet<>();
   JedisCluster jedisCluster;
 
   @Before
@@ -131,7 +131,7 @@ public void testSadd() {
     byte[][] listLanguages = { firstLanguage, secondLanguage };
     jedisCluster.sadd(byteKey, listLanguages);
     Set<byte[]> setLanguages = jedisCluster.smembers(byteKey);
-    List<String> languages = new ArrayList<String>();
+    List<String> languages = new ArrayList<>();
     for (byte[] language : setLanguages) {
       languages.add(new String(language));
     }
@@ -163,7 +163,6 @@ public void testRpush() {
     jedisCluster.del(key);
     jedisCluster.rpush(key, value1);
     jedisCluster.rpush(key, value2);
-    long num = 2L;
     assertEquals(2, (long) jedisCluster.llen(key));
   }
 

File: src/test/java/redis/clients/jedis/tests/commands/JedisCommandTestBase.java
Patch:
@@ -38,7 +38,6 @@ protected Jedis createJedis() {
     Jedis j = new Jedis(hnp);
     j.connect();
     j.auth("foobared");
-    j.flushAll();
     return j;
   }
 

File: src/main/java/redis/clients/jedis/commands/BasicCommands.java
Patch:
@@ -114,8 +114,8 @@ You almost never want to call SAVE in production environments where it will bloc
   /**
    * The SLAVEOF command can change the replication settings of a slave on the fly. In the proper form SLAVEOF hostname port will make the server a slave of another server listening at the specified hostname and port.
    * If a server is already a slave of some master, SLAVEOF hostname port will stop the replication against the old server and start the synchronization against the new one, discarding the old dataset.
-   * @param host, listening at the specified hostname
-   * @param port, server listening at the specified port
+   * @param host listening at the specified hostname
+   * @param port server listening at the specified port
    * @return result of the command.
    */
   String slaveof(String host, int port);

File: src/main/java/redis/clients/jedis/commands/JedisClusterCommands.java
Patch:
@@ -374,7 +374,6 @@ List<GeoRadiusResponse> georadiusByMemberReadonly(String key, String member, dou
   /**
    * XREAD [COUNT count] [BLOCK milliseconds] STREAMS key [key ...] ID [ID ...]
    * 
-   * @param key
    * @param count
    * @param block
    * @param streams
@@ -432,9 +431,8 @@ List<GeoRadiusResponse> georadiusByMemberReadonly(String key, String member, dou
   /**
    * XREAD [COUNT count] [BLOCK milliseconds] STREAMS key [key ...] ID [ID ...]
    * 
-   * @param key
    * @param groupname
-   * @param cosumer
+   * @param consumer
    * @param count
    * @param block
    * @param streams

File: src/main/java/redis/clients/jedis/commands/MultiKeyCommands.java
Patch:
@@ -172,7 +172,6 @@ public interface MultiKeyCommands {
   /**
    * XREAD [COUNT count] [BLOCK milliseconds] STREAMS key [key ...] ID [ID ...]
    * 
-   * @param key
    * @param count
    * @param block
    * @param streams
@@ -183,9 +182,8 @@ public interface MultiKeyCommands {
   /**
    * XREAD [COUNT count] [BLOCK milliseconds] STREAMS key [key ...] ID [ID ...]
    * 
-   * @param key
    * @param groupname
-   * @param cosumer
+   * @param consumer
    * @param count
    * @param block
    * @param streams

File: src/main/java/redis/clients/jedis/BinaryShardedJedis.java
Patch:
@@ -1040,7 +1040,7 @@ public List<byte[]> xclaim(byte[] key, byte[] groupname, byte[] consumername, lo
   public Object sendCommand(ProtocolCommand cmd, byte[]... args) {
     // default since no sample key provided in JedisCommands interface
     byte[] sampleKey = args.length > 0 ? args[0] : cmd.getRaw();
-    Jedis j = getShard(args[0]);
+    Jedis j = getShard(sampleKey);
     return j.sendCommand(cmd, args);
   }
 

File: src/test/java/redis/clients/jedis/tests/commands/BinaryValuesCommandsTest.java
Patch:
@@ -288,6 +288,7 @@ public void strlen() {
     assertEquals(binaryValue.length, jedis.strlen(bfoo).intValue());
   }
 
+  @Test
   public void sendCommandTest(){
     Object obj = jedis.sendCommand(SET, "x".getBytes(), "1".getBytes());
     String returnValue = SafeEncoder.encode((byte[]) obj);

File: src/main/java/redis/clients/jedis/util/JedisByteHashMap.java
Patch:
@@ -11,7 +11,7 @@
 
 public class JedisByteHashMap implements Map<byte[], byte[]>, Cloneable, Serializable {
   private static final long serialVersionUID = -6971431362627219416L;
-  private transient Map<ByteArrayWrapper, byte[]> internalMap = new HashMap<ByteArrayWrapper, byte[]>();
+  private final Map<ByteArrayWrapper, byte[]> internalMap = new HashMap<ByteArrayWrapper, byte[]>();
 
   @Override
   public void clear() {
@@ -94,7 +94,7 @@ public Collection<byte[]> values() {
     return internalMap.values();
   }
 
-  private static final class ByteArrayWrapper {
+  private static final class ByteArrayWrapper implements Serializable {
     private final byte[] data;
 
     public ByteArrayWrapper(byte[] data) {

File: src/main/java/redis/clients/jedis/BinaryJedis.java
Patch:
@@ -3828,7 +3828,7 @@ public List<GeoRadiusResponse> georadiusByMemberReadonly(final byte[] key, final
    */
   protected static class SetFromList<E> extends AbstractSet<E> implements Serializable {
     private static final long serialVersionUID = -2850347066962734052L;
-    private final transient List<E> list;
+    private final List<E> list;
 
     private SetFromList(List<E> list) {
       if (list == null) {

File: src/main/java/redis/clients/jedis/BinaryJedis.java
Patch:
@@ -3825,7 +3825,7 @@ public List<GeoRadiusResponse> georadiusByMemberReadonly(final byte[] key, final
    */
   protected static class SetFromList<E> extends AbstractSet<E> implements Serializable {
     private static final long serialVersionUID = -2850347066962734052L;
-    private final transient List<E> list;
+    private final List<E> list;
 
     private SetFromList(List<E> list) {
       if (list == null) {

File: src/main/java/redis/clients/jedis/BuilderFactory.java
Patch:
@@ -481,7 +481,8 @@ public  StreamEntryID build(Object data) {
       if (null == data) {
         return null;
       }
-      return new StreamEntryID((String)data);
+      String id = SafeEncoder.encode((byte[])data);
+      return new StreamEntryID(id);
     }
 
     @Override

File: src/main/java/redis/clients/jedis/ZParams.java
Patch:
@@ -26,6 +26,7 @@ public enum Aggregate {
   /**
    * Set weights.
    * @param weights weights.
+   * @return 
    */
   public ZParams weights(final double... weights) {
     params.add(WEIGHTS.raw);

File: src/main/java/redis/clients/jedis/commands/BinaryJedisClusterCommands.java
Patch:
@@ -311,13 +311,15 @@ List<GeoRadiusResponse> georadiusByMemberReadonly(byte[] key, byte[] member, dou
    * Executes BITFIELD Redis command
    * @param key
    * @param arguments
+   * @return 
    */
   List<Long> bitfield(byte[] key, byte[]... arguments);
   
   /**
    * Used for HSTRLEN Redis command
    * @param key 
    * @param field
+   * @return 
    */
   Long hstrlen(byte[] key, byte[] field);
 

File: src/main/java/redis/clients/jedis/commands/BinaryJedisCommands.java
Patch:
@@ -318,6 +318,7 @@ List<GeoRadiusResponse> georadiusByMemberReadonly(byte[] key, byte[] member, dou
    * Executes BITFIELD Redis command
    * @param key
    * @param arguments
+   * @return 
    */
   List<Long> bitfield(byte[] key, byte[]... arguments);
   

File: src/main/java/redis/clients/jedis/commands/JedisClusterCommands.java
Patch:
@@ -305,6 +305,7 @@ List<GeoRadiusResponse> georadiusByMemberReadonly(String key, String member, dou
    * Executes BITFIELD Redis command
    * @param key
    * @param arguments
+   * @return 
    */
   List<Long> bitfield(String key, String...arguments);
   

File: src/main/java/redis/clients/jedis/commands/JedisCommands.java
Patch:
@@ -327,6 +327,7 @@ List<GeoRadiusResponse> georadiusByMemberReadonly(String key, String member, dou
    * Executes BITFIELD Redis command
    * @param key
    * @param arguments
+   * @return 
    */
   List<Long> bitfield(String key, String...arguments);
   

File: src/main/java/redis/clients/jedis/commands/MultiKeyCommands.java
Patch:
@@ -111,6 +111,9 @@ public interface MultiKeyCommands {
 
   /**
    * @see #scan(String, ScanParams)
+   * 
+   * @param cursor
+   * @return 
    */
   ScanResult<String> scan(String cursor);
 

File: src/main/java/redis/clients/jedis/util/JedisClusterCRC16.java
Patch:
@@ -75,6 +75,8 @@ public static int getSlot(byte[] key) {
    * Create a CRC16 checksum from the bytes. implementation is from mp911de/lettuce, modified with
    * some more optimizations
    * @param bytes
+   * @param s
+   * @param e
    * @return CRC16 as integer value See <a
    *         href="https://github.com/xetorthio/jedis/pull/733#issuecomment-55840331">Issue 733</a>
    */

File: src/main/java/redis/clients/jedis/GeoCoordinate.java
Patch:
@@ -19,7 +19,8 @@ public double getLatitude() {
 
   @Override
   public boolean equals(Object o) {
-    if (this == o) return true;
+    if (o == null) return false;
+    if (o == this) return true;
     if (!(o instanceof GeoCoordinate)) return false;
 
     GeoCoordinate that = (GeoCoordinate) o;

File: src/main/java/redis/clients/jedis/Tuple.java
Patch:
@@ -37,9 +37,10 @@ public int hashCode() {
 
   @Override
   public boolean equals(Object obj) {
-    if (this == obj) return true;
     if (obj == null) return false;
-    if (getClass() != obj.getClass()) return false;
+    if (obj == this) return true;
+    if (!(obj instanceof Tuple)) return false;
+
     Tuple other = (Tuple) obj;
     if (!Arrays.equals(element, other.element)) return false;
     return Objects.equals(score, other.score);

File: src/main/java/redis/clients/jedis/JedisSentinelPool.java
Patch:
@@ -108,7 +108,7 @@ public HostAndPort getCurrentHostMaster() {
     return currentHostMaster;
   }
 
-  private void initPool(HostAndPort master) {
+  private synchronized void initPool(HostAndPort master) {
     if (!master.equals(currentHostMaster)) {
       currentHostMaster = master;
       if (factory == null) {

File: src/main/java/redis/clients/jedis/JedisCluster.java
Patch:
@@ -1334,7 +1334,7 @@ public ScanResult<String> scan(final String cursor, final ScanParams params) {
           + " only supports SCAN commands with non-empty MATCH patterns");
     }
 
-    if (JedisClusterHashTagUtil.isClusterCompliantMatchPattern(matchPattern)) {
+    if (!JedisClusterHashTagUtil.isClusterCompliantMatchPattern(matchPattern)) {
       throw new IllegalArgumentException(JedisCluster.class.getSimpleName()
           + " only supports SCAN commands with MATCH patterns containing hash-tags ( curly-brackets enclosed strings )");
     }

File: src/main/java/redis/clients/jedis/BinaryShardedJedis.java
Patch:
@@ -439,7 +439,7 @@ public byte[] srandmember(final byte[] key) {
   }
 
   @Override
-  public List srandmember(final byte[] key, final int count) {
+  public List<byte[]> srandmember(final byte[] key, final int count) {
     Jedis j = getShard(key);
     return j.srandmember(key, count);
   }

File: src/main/java/redis/clients/jedis/ShardedJedisPipeline.java
Patch:
@@ -35,7 +35,7 @@ public List<Object> getResults() {
   }
 
   /**
-   * Syncronize pipeline by reading all responses. This operation closes the pipeline. In order to
+   * Synchronize pipeline by reading all responses. This operation closes the pipeline. In order to
    * get return values from pipelined commands, capture the different Response&lt;?&gt; of the
    * commands you execute.
    */
@@ -46,7 +46,7 @@ public void sync() {
   }
 
   /**
-   * Syncronize pipeline by reading all responses. This operation closes the pipeline. Whenever
+   * Synchronize pipeline by reading all responses. This operation closes the pipeline. Whenever
    * possible try to avoid using this version and use ShardedJedisPipeline.sync() as it won't go
    * through all the responses and generate the right response type (usually it is a waste of time).
    * @return A list of all the responses in the order you executed them.

File: src/main/java/redis/clients/jedis/Protocol.java
Patch:
@@ -256,8 +256,8 @@ public static enum Command implements ProtocolCommand {
     DEBUG, BRPOPLPUSH, SETBIT, GETBIT, BITPOS, SETRANGE, GETRANGE, EVAL, EVALSHA, SCRIPT, SLOWLOG,
     OBJECT, BITCOUNT, BITOP, SENTINEL, DUMP, RESTORE, PEXPIRE, PEXPIREAT, PTTL, INCRBYFLOAT,
     PSETEX, CLIENT, TIME, MIGRATE, HINCRBYFLOAT, SCAN, HSCAN, SSCAN, ZSCAN, WAIT, CLUSTER, ASKING,
-    PFADD, PFCOUNT, PFMERGE, READONLY, GEOADD, GEODIST, GEOHASH, GEOPOS, GEORADIUS,
-    GEORADIUSBYMEMBER, MODULE, BITFIELD, HSTRLEN, TOUCH, SWAPDB;
+    PFADD, PFCOUNT, PFMERGE, READONLY, GEOADD, GEODIST, GEOHASH, GEOPOS, GEORADIUS, GEORADIUS_RO,
+    GEORADIUSBYMEMBER, GEORADIUSBYMEMBER_RO, MODULE, BITFIELD, HSTRLEN, TOUCH, SWAPDB;
 
     private final byte[] raw;
 

File: src/test/java/redis/clients/jedis/tests/commands/ListCommandsTest.java
Patch:
@@ -194,7 +194,7 @@ public void ltrim() {
   }
 
   @Test
-  public void lindex() {
+  public void lset() {
     jedis.lpush("foo", "1");
     jedis.lpush("foo", "2");
     jedis.lpush("foo", "3");
@@ -226,7 +226,7 @@ public void lindex() {
   }
 
   @Test
-  public void lset() {
+  public void lindex() {
     jedis.lpush("foo", "1");
     jedis.lpush("foo", "2");
     jedis.lpush("foo", "3");

File: src/test/java/redis/clients/jedis/tests/ConnectionTest.java
Patch:
@@ -22,7 +22,7 @@ public void setUp() throws Exception {
 
   @After
   public void tearDown() throws Exception {
-    client.disconnect();
+    client.close();
   }
 
   @Test(expected = JedisConnectionException.class)
@@ -54,7 +54,7 @@ public void checkCloseable() {
   }
 
   @Test
-  public void getErrorAfterConnectionReset() throws Exception {
+  public void getErrorMultibulkLength() throws Exception {
     class TestConnection extends Connection {
       public TestConnection() {
         super("localhost", 6379);

File: src/test/java/redis/clients/jedis/tests/commands/AllKindOfValuesCommandsTest.java
Patch:
@@ -403,7 +403,7 @@ public void touch() throws Exception {
 
     jedis.set("foo1", "bar1");
 
-    Thread.sleep(2000);
+    Thread.sleep(1100); // little over 1 sec
     assertTrue(jedis.objectIdletime("foo1") > 0);
 
     reply = jedis.touch("foo1");
@@ -426,7 +426,7 @@ public void touch() throws Exception {
 
     jedis.set(bfoo1, bbar1);
 
-    Thread.sleep(2000);
+    Thread.sleep(1100); // little over 1 sec
     assertTrue(jedis.objectIdletime(bfoo1) > 0);
 
     reply = jedis.touch(bfoo1);

File: src/test/java/redis/clients/jedis/tests/ConnectionTest.java
Patch:
@@ -61,8 +61,8 @@ public TestConnection() {
       }
 
       @Override
-      public Connection sendCommand(ProtocolCommand cmd, byte[]... args) {
-        return super.sendCommand(cmd, args);
+      public void sendCommand(ProtocolCommand cmd, byte[]... args) {
+        super.sendCommand(cmd, args);
       }
     }
 

File: src/main/java/redis/clients/jedis/Jedis.java
Patch:
@@ -1575,7 +1575,7 @@ public Double zincrby(final String key, final double increment, final String mem
   }
 
   /**
-   * Return the rank (or index) or member in the sorted set at key, with scores being ordered from
+   * Return the rank (or index) of member in the sorted set at key, with scores being ordered from
    * low to high.
    * <p>
    * When the given member does not exist in the sorted set, the special value 'nil' is returned.
@@ -1598,7 +1598,7 @@ public Long zrank(final String key, final String member) {
   }
 
   /**
-   * Return the rank (or index) or member in the sorted set at key, with scores being ordered from
+   * Return the rank (or index) of member in the sorted set at key, with scores being ordered from
    * high to low.
    * <p>
    * When the given member does not exist in the sorted set, the special value 'nil' is returned.

File: src/main/java/redis/clients/jedis/BinaryJedis.java
Patch:
@@ -3430,12 +3430,14 @@ public Long bitop(final BitOP op, final byte[] destKey, final byte[]... srcKeys)
     return client.getIntegerReply();
   }
 
+  @Override
   public byte[] dump(final byte[] key) {
     checkIsInMultiOrPipeline();
     client.dump(key);
     return client.getBinaryBulkReply();
   }
 
+  @Override
   public String restore(final byte[] key, final int ttl, final byte[] serializedValue) {
     checkIsInMultiOrPipeline();
     client.restore(key, ttl, serializedValue);

File: src/main/java/redis/clients/jedis/Jedis.java
Patch:
@@ -3098,12 +3098,14 @@ public String sentinelSet(final String masterName, final Map<String, String> par
     return client.getStatusCodeReply();
   }
 
+  @Override
   public byte[] dump(final String key) {
     checkIsInMultiOrPipeline();
     client.dump(key);
     return client.getBinaryBulkReply();
   }
 
+  @Override
   public String restore(final String key, final int ttl, final byte[] serializedValue) {
     checkIsInMultiOrPipeline();
     client.restore(key, ttl, serializedValue);

File: src/main/java/redis/clients/jedis/BinaryJedis.java
Patch:
@@ -3294,7 +3294,7 @@ public Object eval(final byte[] script) {
 
   @Override
   public Object evalsha(final byte[] sha1) {
-    return evalsha(sha1, 1);
+    return evalsha(sha1, 0);
   }
 
   @Override

File: src/main/java/redis/clients/jedis/BinaryJedisCluster.java
Patch:
@@ -24,14 +24,14 @@ public class BinaryJedisCluster implements BinaryJedisClusterCommands,
 
   public static final short HASHSLOTS = 16384;
   protected static final int DEFAULT_TIMEOUT = 2000;
-  protected static final int DEFAULT_MAX_REDIRECTIONS = 5;
+  protected static final int DEFAULT_MAX_ATTEMPTS = 5;
 
   protected int maxAttempts;
 
   protected JedisClusterConnectionHandler connectionHandler;
 
   public BinaryJedisCluster(Set<HostAndPort> nodes, int timeout) {
-    this(nodes, timeout, DEFAULT_MAX_REDIRECTIONS, new GenericObjectPoolConfig());
+    this(nodes, timeout, DEFAULT_MAX_ATTEMPTS, new GenericObjectPoolConfig());
   }
 
   public BinaryJedisCluster(Set<HostAndPort> nodes) {

File: src/main/java/redis/clients/jedis/BinaryJedisCluster.java
Patch:
@@ -180,7 +180,7 @@ public Long pexpireAt(final byte[] key, final long millisecondsTimestamp) {
     return new JedisClusterCommand<Long>(connectionHandler, maxAttempts) {
       @Override
       public Long execute(Jedis connection) {
-        return connection.pexpire(key, millisecondsTimestamp);
+        return connection.pexpireAt(key, millisecondsTimestamp);
       }
     }.runBinary(key);
   }

File: src/test/java/redis/clients/jedis/tests/ShardedJedisPoolTest.java
Patch:
@@ -20,6 +20,7 @@
 import redis.clients.jedis.ShardedJedisPipeline;
 import redis.clients.jedis.ShardedJedisPool;
 import redis.clients.jedis.exceptions.JedisException;
+import redis.clients.jedis.exceptions.JedisExhaustedPoolException;
 
 public class ShardedJedisPoolTest {
   private static HostAndPort redis1 = HostAndPortUtil.getRedisServers().get(0);
@@ -102,7 +103,7 @@ public void checkPoolRepairedWhenJedisIsBroken() {
     pool.destroy();
   }
 
-  @Test(expected = JedisException.class)
+  @Test(expected = JedisExhaustedPoolException.class)
   public void checkPoolOverflow() {
     GenericObjectPoolConfig config = new GenericObjectPoolConfig();
     config.setMaxTotal(1);

File: src/main/java/redis/clients/jedis/JedisSentinelPool.java
Patch:
@@ -298,7 +298,7 @@ public void onMessage(String channel, String message) {
             }
           }, "+switch-master");
 
-        } catch (JedisConnectionException e) {
+        } catch (JedisException e) {
 
           if (running.get()) {
             log.log(Level.SEVERE, "Lost connection to Sentinel at " + host + ":" + port

File: src/main/java/redis/clients/jedis/BinaryJedis.java
Patch:
@@ -3726,10 +3726,10 @@ protected static <E> SetFromList<E> of(List<E> list) {
   }
 
   @Override
-  public List<byte[]> bitfield(byte[] key, byte[]... arguments) {
+  public List<Long> bitfield(byte[] key, byte[]... arguments) {
     checkIsInMultiOrPipeline();
     client.bitfield(key, arguments);
-    return client.getBinaryMultiBulkReply();
+    return client.getIntegerMultiBulkReply();
   }
 
   @Override

File: src/main/java/redis/clients/jedis/BinaryJedisCluster.java
Patch:
@@ -1844,10 +1844,10 @@ public ScanResult<Tuple> execute(Jedis connection) {
   }
 
   @Override
-  public List<byte[]> bitfield(final byte[] key, final byte[]... arguments) {
-    return new JedisClusterCommand<List<byte[]>>(connectionHandler, maxAttempts) {
+  public List<Long> bitfield(final byte[] key, final byte[]... arguments) {
+    return new JedisClusterCommand<List<Long>>(connectionHandler, maxAttempts) {
       @Override
-      public List<byte[]> execute(Jedis connection) {
+      public List<Long> execute(Jedis connection) {
         return connection.bitfield(key, arguments);
       }
     }.runBinary(key);

File: src/main/java/redis/clients/jedis/BinaryShardedJedis.java
Patch:
@@ -868,7 +868,7 @@ public ScanResult<Tuple> zscan(byte[] key, byte[] cursor, ScanParams params) {
   }
 
   @Override
-  public List<byte[]> bitfield(byte[] key, byte[]... arguments) {
+  public List<Long> bitfield(byte[] key, byte[]... arguments) {
     Jedis j = getShard(key);
     return j.bitfield(key, arguments);
  }

File: src/main/java/redis/clients/jedis/commands/BinaryJedisClusterCommands.java
Patch:
@@ -282,7 +282,7 @@ List<GeoRadiusResponse> georadiusByMember(byte[] key, byte[] member, double radi
    * @param key
    * @param arguments
    */
-  List<byte[]> bitfield(final byte[] key, final byte[]... arguments);
+  List<Long> bitfield(final byte[] key, final byte[]... arguments);
   
   /**
    * Used for HSTRLEN Redis command

File: src/main/java/redis/clients/jedis/commands/BinaryJedisCommands.java
Patch:
@@ -285,7 +285,7 @@ List<GeoRadiusResponse> georadiusByMember(byte[] key, byte[] member, double radi
    * @param key
    * @param arguments
    */
-  List<byte[]> bitfield(final byte[] key, final byte[]... arguments);
+  List<Long> bitfield(final byte[] key, final byte[]... arguments);
   
   /**
    * Used for HSTRLEN Redis command

File: src/test/java/redis/clients/jedis/tests/commands/ScriptingCommandsTest.java
Patch:
@@ -18,6 +18,7 @@
 import redis.clients.jedis.Jedis;
 import redis.clients.jedis.exceptions.JedisConnectionException;
 import redis.clients.jedis.exceptions.JedisDataException;
+import redis.clients.jedis.exceptions.JedisNoScriptException;
 import redis.clients.jedis.tests.utils.ClientKillerUtil;
 import redis.clients.util.SafeEncoder;
 
@@ -127,7 +128,7 @@ public void evalsha() {
     assertEquals("bar", result);
   }
 
-  @Test(expected = JedisDataException.class)
+  @Test(expected = JedisNoScriptException.class)
   public void evalshaShaNotFound() {
     jedis.evalsha("ffffffffffffffffffffffffffffffffffffffff");
   }

File: src/main/java/redis/clients/jedis/JedisSlotBasedConnectionHandler.java
Patch:
@@ -5,8 +5,8 @@
 
 import java.util.Set;
 
-import redis.clients.jedis.exceptions.JedisConnectionException;
 import redis.clients.jedis.exceptions.JedisException;
+import redis.clients.jedis.exceptions.JedisNoReachableClusterNodeException;
 
 public class JedisSlotBasedConnectionHandler extends JedisClusterConnectionHandler {
 
@@ -54,7 +54,7 @@ public Jedis getConnection() {
       }
     }
 
-    throw new JedisConnectionException("no reachable node in cluster");
+    throw new JedisNoReachableClusterNodeException("No reachable node in cluster");
   }
 
   @Override

File: src/main/java/redis/clients/jedis/JedisSentinelPool.java
Patch:
@@ -135,7 +135,7 @@ private HostAndPort initSentinels(Set<String> sentinels, final String masterName
     log.info("Trying to find master from available Sentinels...");
 
     for (String sentinel : sentinels) {
-      final HostAndPort hap = toHostAndPort(Arrays.asList(sentinel.split(":")));
+      final HostAndPort hap = HostAndPort.parseString(sentinel);
 
       log.fine("Connecting to Sentinel " + hap);
 
@@ -184,7 +184,7 @@ private HostAndPort initSentinels(Set<String> sentinels, final String masterName
     log.info("Redis master running at " + master + ", starting Sentinel listeners...");
 
     for (String sentinel : sentinels) {
-      final HostAndPort hap = toHostAndPort(Arrays.asList(sentinel.split(":")));
+      final HostAndPort hap = HostAndPort.parseString(sentinel);
       MasterListener masterListener = new MasterListener(masterName, hap.getHost(), hap.getPort());
       // whether MasterListener threads are alive or not, process can be stopped
       masterListener.setDaemon(true);

File: src/main/java/redis/clients/jedis/Protocol.java
Patch:
@@ -136,7 +136,7 @@ public static String readErrorLineIfPossible(RedisInputStream is) {
   private static String[] parseTargetHostAndSlot(String clusterRedirectResponse) {
     String[] response = new String[3];
     String[] messageInfo = clusterRedirectResponse.split(" ");
-    String[] targetHostAndPort = messageInfo[2].split(":");
+    String[] targetHostAndPort = HostAndPort.extractParts(messageInfo[2]);
     response[0] = messageInfo[1];
     response[1] = targetHostAndPort[0];
     response[2] = targetHostAndPort[1];

File: src/main/java/redis/clients/jedis/commands/BinaryJedisClusterCommands.java
Patch:
@@ -263,6 +263,8 @@ List<GeoRadiusResponse> georadius(byte[] key, double longitude, double latitude,
   List<GeoRadiusResponse> georadiusByMember(byte[] key, byte[] member, double radius, GeoUnit unit,
       GeoRadiusParam param);
 
+  ScanResult<byte[]> scan(final byte[] cursor, final ScanParams params);
+  
   ScanResult<Map.Entry<byte[], byte[]>> hscan(byte[] key, byte[] cursor);
 
   ScanResult<Map.Entry<byte[], byte[]>> hscan(byte[] key, byte[] cursor, ScanParams params);

File: src/main/java/redis/clients/jedis/commands/JedisClusterCommands.java
Patch:
@@ -235,6 +235,8 @@ Set<String> zrevrangeByLex(final String key, final String max, final String min,
 
   Long bitcount(final String key, long start, long end);
 
+  ScanResult<String> scan(final String cursor, final ScanParams params);
+  
   ScanResult<Map.Entry<String, String>> hscan(final String key, final String cursor);
 
   ScanResult<String> sscan(final String key, final String cursor);

File: src/main/java/redis/clients/jedis/Protocol.java
Patch:
@@ -3,6 +3,7 @@
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.List;
+import java.util.Locale;
 
 import redis.clients.jedis.commands.ProtocolCommand;
 import redis.clients.jedis.exceptions.JedisAskDataException;
@@ -250,7 +251,7 @@ public static enum Keyword {
     public final byte[] raw;
 
     Keyword() {
-      raw = SafeEncoder.encode(this.name().toLowerCase());
+      raw = SafeEncoder.encode(this.name().toLowerCase(Locale.ENGLISH));
     }
   }
 }

File: src/main/java/redis/clients/jedis/BinaryJedis.java
Patch:
@@ -3623,7 +3623,7 @@ public List<GeoRadiusResponse> georadiusByMember(byte[] key, byte[] member, doub
    */
   protected static class SetFromList<E> extends AbstractSet<E> implements Serializable {
     private static final long serialVersionUID = -2850347066962734052L;
-    private final List<E> list;
+    private final transient List<E> list;
 
     private SetFromList(List<E> list) {
       if (list == null) {

File: src/main/java/redis/clients/util/JedisByteHashMap.java
Patch:
@@ -11,7 +11,7 @@
 
 public class JedisByteHashMap implements Map<byte[], byte[]>, Cloneable, Serializable {
   private static final long serialVersionUID = -6971431362627219416L;
-  private Map<ByteArrayWrapper, byte[]> internalMap = new HashMap<ByteArrayWrapper, byte[]>();
+  private transient Map<ByteArrayWrapper, byte[]> internalMap = new HashMap<ByteArrayWrapper, byte[]>();
 
   @Override
   public void clear() {

File: src/main/java/redis/clients/jedis/BinaryJedis.java
Patch:
@@ -3677,14 +3677,17 @@ public <T> T[] toArray(T[] a) {
       return list.toArray(a);
     }
 
+    @Override
     public String toString() {
       return list.toString();
     }
 
+    @Override
     public int hashCode() {
       return list.hashCode();
     }
 
+    @Override
     public boolean equals(Object o) {
       if (o == this) {
         return true;

File: src/main/java/redis/clients/jedis/JedisSentinelPool.java
Patch:
@@ -260,6 +260,7 @@ public MasterListener(String masterName, String host, int port,
       this.subscribeRetryWaitTimeMillis = subscribeRetryWaitTimeMillis;
     }
 
+    @Override
     public void run() {
 
       running.set(true);

File: src/main/java/redis/clients/jedis/Response.java
Patch:
@@ -69,6 +69,7 @@ private void build() {
     }
   }
 
+  @Override
   public String toString() {
     return "Response " + builder.toString();
   }

File: src/main/java/redis/clients/util/Hashing.java
Patch:
@@ -8,10 +8,12 @@ public interface Hashing {
   ThreadLocal<MessageDigest> md5Holder = new ThreadLocal<MessageDigest>();
 
   Hashing MD5 = new Hashing() {
+    @Override
     public long hash(String key) {
       return hash(SafeEncoder.encode(key));
     }
 
+    @Override
     public long hash(byte[] key) {
       try {
         if (md5Holder.get() == null) {

File: src/main/java/redis/clients/util/JedisByteHashMap.java
Patch:
@@ -104,13 +104,15 @@ public ByteArrayWrapper(byte[] data) {
       this.data = data;
     }
 
+    @Override
     public boolean equals(Object other) {
       if (!(other instanceof ByteArrayWrapper)) {
         return false;
       }
       return Arrays.equals(data, ((ByteArrayWrapper) other).data);
     }
 
+    @Override
     public int hashCode() {
       return Arrays.hashCode(data);
     }

File: src/main/java/redis/clients/util/RedisInputStream.java
Patch:
@@ -176,6 +176,7 @@ public long readLongCrLf() {
     return (isNeg ? -value : value);
   }
 
+  @Override
   public int read(byte[] b, int off, int len) throws JedisConnectionException {
     ensureFill();
 

File: src/main/java/redis/clients/util/RedisOutputStream.java
Patch:
@@ -61,10 +61,12 @@ public void write(final byte b) throws IOException {
     buf[count++] = b;
   }
 
+  @Override
   public void write(final byte[] b) throws IOException {
     write(b, 0, b.length);
   }
 
+  @Override
   public void write(final byte[] b, final int off, final int len) throws IOException {
     if (len >= buf.length) {
       flushBuffer();
@@ -209,6 +211,7 @@ public void writeIntCrLf(int value) throws IOException {
     writeCrLf();
   }
 
+  @Override
   public void flush() throws IOException {
     flushBuffer();
     out.flush();

File: src/main/java/redis/clients/jedis/Jedis.java
Patch:
@@ -1180,7 +1180,7 @@ public Set<String> smembers(final String key) {
     client.smembers(key);
     final List<String> members = client.getMultiBulkReply();
     if (members == null) {
-      return null;
+      return Collections.emptySet();
     }
     return SetFromList.of(members);
   }
@@ -1226,7 +1226,7 @@ public Set<String> spop(final String key, final long count) {
     client.spop(key, count);
     final List<String> members = client.getMultiBulkReply();
     if (members == null) {
-      return null;
+      return Collections.emptySet();
     }
     return SetFromList.of(members);
   }

File: src/main/java/redis/clients/jedis/Jedis.java
Patch:
@@ -1308,7 +1308,7 @@ public Set<String> sinter(final String... keys) {
     client.sinter(keys);
     final List<String> members = client.getMultiBulkReply();
     if (members == null) {
-      return null;
+      return Collections.emptySet();
     }
     return SetFromList.of(members);
   }
@@ -1348,7 +1348,7 @@ public Set<String> sunion(final String... keys) {
     client.sunion(keys);
     final List<String> members = client.getMultiBulkReply();
     if (members == null) {
-      return null;
+      return Collections.emptySet();
     }
     return SetFromList.of(members);
   }

File: src/main/java/redis/clients/jedis/Transaction.java
Patch:
@@ -2,6 +2,7 @@
 
 import java.io.Closeable;
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.List;
 
 import redis.clients.jedis.exceptions.JedisDataException;
@@ -45,7 +46,7 @@ public List<Object> exec() {
 
     List<Object> unformatted = client.getObjectMultiBulkReply();
     if (unformatted == null) {
-      return null;
+      return Collections.emptyList();
     }
     List<Object> formatted = new ArrayList<Object>();
     for (Object o : unformatted) {
@@ -66,7 +67,7 @@ public List<Response<?>> execGetResponse() {
 
     List<Object> unformatted = client.getObjectMultiBulkReply();
     if (unformatted == null) {
-      return null;
+      return Collections.emptyList();
     }
     List<Response<?>> response = new ArrayList<Response<?>>();
     for (Object o : unformatted) {

File: src/test/java/redis/clients/jedis/tests/commands/ClusterCommandsTest.java
Patch:
@@ -25,11 +25,11 @@ public class ClusterCommandsTest extends JedisTestBase {
   public void setUp() throws Exception {
 
     node1 = new Jedis(nodeInfo1.getHost(), nodeInfo1.getPort());
-    node1.connect();
+    node1.auth("cluster");
     node1.flushAll();
 
     node2 = new Jedis(nodeInfo2.getHost(), nodeInfo2.getPort());
-    node2.connect();
+    node2.auth("cluster");
     node2.flushAll();
   }
 

File: src/main/java/redis/clients/jedis/Connection.java
Patch:
@@ -108,19 +108,19 @@ public void rollbackTimeout() {
     }
   }
 
-  protected Connection sendCommand(final ProtocolCommand cmd, final String... args) {
+  public Connection sendCommand(final ProtocolCommand cmd, final String... args) {
     final byte[][] bargs = new byte[args.length][];
     for (int i = 0; i < args.length; i++) {
       bargs[i] = SafeEncoder.encode(args[i]);
     }
     return sendCommand(cmd, bargs);
   }
 
-  protected Connection sendCommand(final ProtocolCommand cmd) {
+  public Connection sendCommand(final ProtocolCommand cmd) {
     return sendCommand(cmd, EMPTY_ARGS);
   }
 
-  protected Connection sendCommand(final ProtocolCommand cmd, final byte[]... args) {
+  public Connection sendCommand(final ProtocolCommand cmd, final byte[]... args) {
     try {
       connect();
       Protocol.sendCommand(outputStream, cmd, args);

File: src/main/java/redis/clients/jedis/Protocol.java
Patch:
@@ -231,7 +231,7 @@ public static final byte[] toByteArray(final double value) {
   }
 
   public static enum Command implements ProtocolCommand {
-    PING, SET, GET, QUIT, EXISTS, DEL, TYPE, FLUSHDB, KEYS, RANDOMKEY, RENAME, RENAMENX, RENAMEX, DBSIZE, EXPIRE, EXPIREAT, TTL, SELECT, MOVE, FLUSHALL, GETSET, MGET, SETNX, SETEX, MSET, MSETNX, DECRBY, DECR, INCRBY, INCR, APPEND, SUBSTR, HSET, HGET, HSETNX, HMSET, HMGET, HINCRBY, HEXISTS, HDEL, HLEN, HKEYS, HVALS, HGETALL, RPUSH, LPUSH, LLEN, LRANGE, LTRIM, LINDEX, LSET, LREM, LPOP, RPOP, RPOPLPUSH, SADD, SMEMBERS, SREM, SPOP, SMOVE, SCARD, SISMEMBER, SINTER, SINTERSTORE, SUNION, SUNIONSTORE, SDIFF, SDIFFSTORE, SRANDMEMBER, ZADD, ZRANGE, ZREM, ZINCRBY, ZRANK, ZREVRANK, ZREVRANGE, ZCARD, ZSCORE, MULTI, DISCARD, EXEC, WATCH, UNWATCH, SORT, BLPOP, BRPOP, AUTH, SUBSCRIBE, PUBLISH, UNSUBSCRIBE, PSUBSCRIBE, PUNSUBSCRIBE, PUBSUB, ZCOUNT, ZRANGEBYSCORE, ZREVRANGEBYSCORE, ZREMRANGEBYRANK, ZREMRANGEBYSCORE, ZUNIONSTORE, ZINTERSTORE, ZLEXCOUNT, ZRANGEBYLEX, ZREVRANGEBYLEX, ZREMRANGEBYLEX, SAVE, BGSAVE, BGREWRITEAOF, LASTSAVE, SHUTDOWN, INFO, MONITOR, SLAVEOF, CONFIG, STRLEN, SYNC, LPUSHX, PERSIST, RPUSHX, ECHO, LINSERT, DEBUG, BRPOPLPUSH, SETBIT, GETBIT, BITPOS, SETRANGE, GETRANGE, EVAL, EVALSHA, SCRIPT, SLOWLOG, OBJECT, BITCOUNT, BITOP, SENTINEL, DUMP, RESTORE, PEXPIRE, PEXPIREAT, PTTL, INCRBYFLOAT, PSETEX, CLIENT, TIME, MIGRATE, HINCRBYFLOAT, SCAN, HSCAN, SSCAN, ZSCAN, WAIT, CLUSTER, ASKING, PFADD, PFCOUNT, PFMERGE, READONLY, GEOADD, GEODIST, GEOHASH, GEOPOS, GEORADIUS, GEORADIUSBYMEMBER;
+    PING, SET, GET, QUIT, EXISTS, DEL, TYPE, FLUSHDB, KEYS, RANDOMKEY, RENAME, RENAMENX, RENAMEX, DBSIZE, EXPIRE, EXPIREAT, TTL, SELECT, MOVE, FLUSHALL, GETSET, MGET, SETNX, SETEX, MSET, MSETNX, DECRBY, DECR, INCRBY, INCR, APPEND, SUBSTR, HSET, HGET, HSETNX, HMSET, HMGET, HINCRBY, HEXISTS, HDEL, HLEN, HKEYS, HVALS, HGETALL, RPUSH, LPUSH, LLEN, LRANGE, LTRIM, LINDEX, LSET, LREM, LPOP, RPOP, RPOPLPUSH, SADD, SMEMBERS, SREM, SPOP, SMOVE, SCARD, SISMEMBER, SINTER, SINTERSTORE, SUNION, SUNIONSTORE, SDIFF, SDIFFSTORE, SRANDMEMBER, ZADD, ZRANGE, ZREM, ZINCRBY, ZRANK, ZREVRANK, ZREVRANGE, ZCARD, ZSCORE, MULTI, DISCARD, EXEC, WATCH, UNWATCH, SORT, BLPOP, BRPOP, AUTH, SUBSCRIBE, PUBLISH, UNSUBSCRIBE, PSUBSCRIBE, PUNSUBSCRIBE, PUBSUB, ZCOUNT, ZRANGEBYSCORE, ZREVRANGEBYSCORE, ZREMRANGEBYRANK, ZREMRANGEBYSCORE, ZUNIONSTORE, ZINTERSTORE, ZLEXCOUNT, ZRANGEBYLEX, ZREVRANGEBYLEX, ZREMRANGEBYLEX, SAVE, BGSAVE, BGREWRITEAOF, LASTSAVE, SHUTDOWN, INFO, MONITOR, SLAVEOF, CONFIG, STRLEN, SYNC, LPUSHX, PERSIST, RPUSHX, ECHO, LINSERT, DEBUG, BRPOPLPUSH, SETBIT, GETBIT, BITPOS, SETRANGE, GETRANGE, EVAL, EVALSHA, SCRIPT, SLOWLOG, OBJECT, BITCOUNT, BITOP, SENTINEL, DUMP, RESTORE, PEXPIRE, PEXPIREAT, PTTL, INCRBYFLOAT, PSETEX, CLIENT, TIME, MIGRATE, HINCRBYFLOAT, SCAN, HSCAN, SSCAN, ZSCAN, WAIT, CLUSTER, ASKING, PFADD, PFCOUNT, PFMERGE, READONLY, GEOADD, GEODIST, GEOHASH, GEOPOS, GEORADIUS, GEORADIUSBYMEMBER, MODULE;
 
     private final byte[] raw;
 
@@ -246,7 +246,7 @@ public byte[] getRaw() {
   }
 
   public static enum Keyword {
-    AGGREGATE, ALPHA, ASC, BY, DESC, GET, LIMIT, MESSAGE, NO, NOSORT, PMESSAGE, PSUBSCRIBE, PUNSUBSCRIBE, OK, ONE, QUEUED, SET, STORE, SUBSCRIBE, UNSUBSCRIBE, WEIGHTS, WITHSCORES, RESETSTAT, RESET, FLUSH, EXISTS, LOAD, KILL, LEN, REFCOUNT, ENCODING, IDLETIME, AND, OR, XOR, NOT, GETNAME, SETNAME, LIST, MATCH, COUNT, PING, PONG;
+    AGGREGATE, ALPHA, ASC, BY, DESC, GET, LIMIT, MESSAGE, NO, NOSORT, PMESSAGE, PSUBSCRIBE, PUNSUBSCRIBE, OK, ONE, QUEUED, SET, STORE, SUBSCRIBE, UNSUBSCRIBE, WEIGHTS, WITHSCORES, RESETSTAT, RESET, FLUSH, EXISTS, LOAD, KILL, LEN, REFCOUNT, ENCODING, IDLETIME, AND, OR, XOR, NOT, GETNAME, SETNAME, LIST, MATCH, COUNT, PING, PONG, UNLOAD;
     public final byte[] raw;
 
     Keyword() {

File: src/test/java/redis/clients/jedis/tests/ConnectionTest.java
Patch:
@@ -59,7 +59,7 @@ public TestConnection() {
       }
 
       @Override
-      protected Connection sendCommand(ProtocolCommand cmd, byte[]... args) {
+      public Connection sendCommand(ProtocolCommand cmd, byte[]... args) {
         return super.sendCommand(cmd, args);
       }
     }

File: src/main/java/redis/clients/jedis/Protocol.java
Patch:
@@ -224,6 +224,9 @@ public static final byte[] toByteArray(final long value) {
   }
 
   public static final byte[] toByteArray(final double value) {
+    if (Double.isInfinite(value)) {
+      return value == Double.POSITIVE_INFINITY ? "+inf".getBytes() : "-inf".getBytes();
+    }
     return SafeEncoder.encode(String.valueOf(value));
   }
 

File: src/main/java/redis/clients/jedis/Protocol.java
Patch:
@@ -243,7 +243,7 @@ public byte[] getRaw() {
   }
 
   public static enum Keyword {
-    AGGREGATE, ALPHA, ASC, BY, DESC, GET, LIMIT, MESSAGE, NO, NOSORT, PMESSAGE, PSUBSCRIBE, PUNSUBSCRIBE, OK, ONE, QUEUED, SET, STORE, SUBSCRIBE, UNSUBSCRIBE, WEIGHTS, WITHSCORES, RESETSTAT, RESET, FLUSH, EXISTS, LOAD, KILL, LEN, REFCOUNT, ENCODING, IDLETIME, AND, OR, XOR, NOT, GETNAME, SETNAME, LIST, MATCH, COUNT;
+    AGGREGATE, ALPHA, ASC, BY, DESC, GET, LIMIT, MESSAGE, NO, NOSORT, PMESSAGE, PSUBSCRIBE, PUNSUBSCRIBE, OK, ONE, QUEUED, SET, STORE, SUBSCRIBE, UNSUBSCRIBE, WEIGHTS, WITHSCORES, RESETSTAT, RESET, FLUSH, EXISTS, LOAD, KILL, LEN, REFCOUNT, ENCODING, IDLETIME, AND, OR, XOR, NOT, GETNAME, SETNAME, LIST, MATCH, COUNT, PING, PONG;
     public final byte[] raw;
 
     Keyword() {

File: src/main/java/redis/clients/jedis/BinaryJedisCluster.java
Patch:
@@ -1598,7 +1598,7 @@ public void psubscribe(final BinaryJedisPubSub jedisPubSub, final byte[]... patt
     new JedisClusterCommand<Integer>(connectionHandler, maxRedirections) {
       @Override
       public Integer execute(Jedis connection) {
-        connection.subscribe(jedisPubSub, patterns);
+        connection.psubscribe(jedisPubSub, patterns);
         return 0;
       }
     }.runWithAnyNode();

File: src/main/java/redis/clients/util/Pool.java
Patch:
@@ -1,6 +1,7 @@
 package redis.clients.util;
 
 import java.io.Closeable;
+import java.util.NoSuchElementException;
 
 import org.apache.commons.pool2.PooledObjectFactory;
 import org.apache.commons.pool2.impl.GenericObjectPool;
@@ -46,6 +47,8 @@ public void initPool(final GenericObjectPoolConfig poolConfig, PooledObjectFacto
   public T getResource() {
     try {
       return internalPool.borrowObject();
+    } catch (NoSuchElementException nse) {
+      throw new JedisException("Could not get a resource from the pool", nse);
     } catch (Exception e) {
       throw new JedisConnectionException("Could not get a resource from the pool", e);
     }

File: src/test/java/redis/clients/jedis/tests/JedisClusterTest.java
Patch:
@@ -425,7 +425,7 @@ public void testStableSlotWhenMigratingNodeOrImportingNodeIsNotSpecified()
     assertEquals("foo", jc.get("51"));
   }
 
-  @Test(expected = JedisConnectionException.class)
+  @Test(expected = JedisException.class)
   public void testIfPoolConfigAppliesToClusterPools() {
     GenericObjectPoolConfig config = new GenericObjectPoolConfig();
     config.setMaxTotal(0);

File: src/test/java/redis/clients/jedis/tests/JedisPoolTest.java
Patch:
@@ -92,7 +92,7 @@ public void checkPoolRepairedWhenJedisIsBroken() {
     assertTrue(pool.isClosed());
   }
 
-  @Test(expected = JedisConnectionException.class)
+  @Test(expected = JedisException.class)
   public void checkPoolOverflow() {
     GenericObjectPoolConfig config = new GenericObjectPoolConfig();
     config.setMaxTotal(1);

File: src/test/java/redis/clients/jedis/tests/ShardedJedisPoolTest.java
Patch:
@@ -17,6 +17,7 @@
 import redis.clients.jedis.ShardedJedisPipeline;
 import redis.clients.jedis.ShardedJedisPool;
 import redis.clients.jedis.exceptions.JedisConnectionException;
+import redis.clients.jedis.exceptions.JedisException;
 
 public class ShardedJedisPoolTest extends Assert {
   private static HostAndPort redis1 = HostAndPortUtil.getRedisServers().get(0);
@@ -99,7 +100,7 @@ public void checkPoolRepairedWhenJedisIsBroken() {
     pool.destroy();
   }
 
-  @Test(expected = JedisConnectionException.class)
+  @Test(expected = JedisException.class)
   public void checkPoolOverflow() {
     GenericObjectPoolConfig config = new GenericObjectPoolConfig();
     config.setMaxTotal(1);

File: src/main/java/redis/clients/jedis/JedisCluster.java
Patch:
@@ -1553,7 +1553,7 @@ public void psubscribe(final JedisPubSub jedisPubSub, final String... patterns)
     new JedisClusterCommand<Integer>(connectionHandler, maxRedirections) {
       @Override
       public Integer execute(Jedis connection) {
-        connection.subscribe(jedisPubSub, patterns);
+        connection.psubscribe(jedisPubSub, patterns);
         return 0;
       }
     }.runWithAnyNode();

File: src/main/java/redis/clients/jedis/JedisCluster.java
Patch:
@@ -1553,7 +1553,7 @@ public void psubscribe(final JedisPubSub jedisPubSub, final String... patterns)
     new JedisClusterCommand<Integer>(connectionHandler, maxRedirections) {
       @Override
       public Integer execute(Jedis connection) {
-        connection.subscribe(jedisPubSub, patterns);
+        connection.psubscribe(jedisPubSub, patterns);
         return 0;
       }
     }.runWithAnyNode();

File: src/main/java/redis/clients/util/RedisInputStream.java
Patch:
@@ -20,7 +20,7 @@
  */
 public class RedisInputStream extends FilterInputStream {
 
-  protected final byte buf[];
+  protected final byte[] buf;
 
   protected int count, limit;
 

File: src/main/java/redis/clients/util/RedisOutputStream.java
Patch:
@@ -10,7 +10,7 @@
  * used outside Jedis
  */
 public final class RedisOutputStream extends FilterOutputStream {
-  protected final byte buf[];
+  protected final byte[] buf;
 
   protected int count;
 
@@ -44,7 +44,7 @@ public void write(final byte[] b) throws IOException {
     write(b, 0, b.length);
   }
 
-  public void write(final byte b[], final int off, final int len) throws IOException {
+  public void write(final byte[] b, final int off, final int len) throws IOException {
     if (len >= buf.length) {
       flushBuffer();
       out.write(b, off, len);

File: src/test/java/redis/clients/jedis/tests/SSLJedisTest.java
Patch:
@@ -247,7 +247,7 @@ private static SSLSocketFactory createTrustStoreSslSocketFactory() throws Except
 
     TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance("PKIX");
     trustManagerFactory.init(trustStore);
-    TrustManager trustManagers[] = trustManagerFactory.getTrustManagers();
+    TrustManager[] trustManagers = trustManagerFactory.getTrustManagers();
 
     SSLContext sslContext = SSLContext.getInstance("TLS");
     sslContext.init(null, trustManagers, new SecureRandom());

File: src/main/java/redis/clients/jedis/BinaryJedis.java
Patch:
@@ -2442,7 +2442,7 @@ public Set<Tuple> zrangeByScoreWithScores(final byte[] key, final byte[] min, fi
   private Set<Tuple> getBinaryTupledSet() {
     checkIsInMultiOrPipeline();
     List<byte[]> membersWithScores = client.getBinaryMultiBulkReply();
-    if (membersWithScores.size() == 0) {
+    if (membersWithScores.isEmpty()) {
       return Collections.emptySet();
     }
     Set<Tuple> set = new LinkedHashSet<Tuple>(membersWithScores.size() / 2, 1.0f);

File: src/main/java/redis/clients/jedis/BuilderFactory.java
Patch:
@@ -382,7 +382,7 @@ public List<GeoRadiusResponse> build(Object data) {
       } else {
         List<Object> objectList = (List<Object>) data;
 
-        if (objectList.size() == 0) {
+        if (objectList.isEmpty()) {
           return new ArrayList<GeoRadiusResponse>();
         }
 

File: src/main/java/redis/clients/jedis/Jedis.java
Patch:
@@ -2249,7 +2249,7 @@ private Set<Tuple> getTupledSet() {
     if (membersWithScores == null) {
       return null;
     }
-    if (membersWithScores.size() == 0) {
+    if (membersWithScores.isEmpty()) {
       return Collections.emptySet();
     }
     Set<Tuple> set = new LinkedHashSet<Tuple>(membersWithScores.size() / 2, 1.0f);

File: src/main/java/redis/clients/jedis/JedisClusterInfoCache.java
Patch:
@@ -82,7 +82,7 @@ public void discoverClusterSlots(Jedis jedis) {
 
         // hostInfos
         List<Object> hostInfos = (List<Object>) slotInfo.get(2);
-        if (hostInfos.size() <= 0) {
+        if (hostInfos.isEmpty()) {
           continue;
         }
 

File: src/main/java/redis/clients/jedis/Queable.java
Patch:
@@ -25,7 +25,7 @@ protected <T> Response<T> getResponse(Builder<T> builder) {
   }
 
   protected boolean hasPipelinedResponse() {
-    return pipelinedResponses.size() > 0;
+    return !pipelinedResponses.isEmpty();
   }
 
   protected int getPipelinedResponseLength() {

File: src/test/java/redis/clients/jedis/tests/JedisSentinelTest.java
Patch:
@@ -61,7 +61,7 @@ public void sentinel() {
       assertEquals(master, masterFromSentinel);
 
       List<Map<String, String>> slaves = j.sentinelSlaves(MASTER_NAME);
-      assertTrue(slaves.size() > 0);
+      assertTrue(!slaves.isEmpty());
       assertEquals(master.getPort(), Integer.parseInt(slaves.get(0).get("master-port")));
 
       // DO NOT RE-RUN TEST TOO FAST, RESET TAKES SOME TIME TO... RESET

File: src/test/java/redis/clients/jedis/tests/commands/ClusterCommandsTest.java
Patch:
@@ -137,7 +137,7 @@ public void clusterSlots() {
 
     List<Object> slots = node1.clusterSlots();
     assertNotNull(slots);
-    assertTrue(slots.size() > 0);
+    assertTrue(!slots.isEmpty());
 
     for (Object slotInfoObj : slots) {
       List<Object> slotInfo = (List<Object>) slotInfoObj;

File: src/main/java/redis/clients/util/RedisInputStream.java
Patch:
@@ -20,7 +20,7 @@
  */
 public class RedisInputStream extends FilterInputStream {
 
-  protected final byte buf[];
+  protected final byte[] buf;
 
   protected int count, limit;
 

File: src/main/java/redis/clients/util/RedisOutputStream.java
Patch:
@@ -10,7 +10,7 @@
  * used outside Jedis
  */
 public final class RedisOutputStream extends FilterOutputStream {
-  protected final byte buf[];
+  protected final byte[] buf;
 
   protected int count;
 
@@ -44,7 +44,7 @@ public void write(final byte[] b) throws IOException {
     write(b, 0, b.length);
   }
 
-  public void write(final byte b[], final int off, final int len) throws IOException {
+  public void write(final byte[] b, final int off, final int len) throws IOException {
     if (len >= buf.length) {
       flushBuffer();
       out.write(b, off, len);

File: src/test/java/redis/clients/jedis/tests/SSLJedisTest.java
Patch:
@@ -250,7 +250,7 @@ private static SSLSocketFactory createTrustStoreSslSocketFactory() throws Except
 
     TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance("PKIX");
     trustManagerFactory.init(trustStore);
-    TrustManager trustManagers[] = trustManagerFactory.getTrustManagers();
+    TrustManager[] trustManagers = trustManagerFactory.getTrustManagers();
 
     SSLContext sslContext = SSLContext.getInstance("TLS");
     sslContext.init(null, trustManagers, new SecureRandom());

File: src/main/java/redis/clients/jedis/BinaryJedisCluster.java
Patch:
@@ -1188,7 +1188,7 @@ public Set<byte[]> zrevrangeByLex(final byte[] key, final byte[] max, final byte
     return new JedisClusterCommand<Set<byte[]>>(connectionHandler, maxRedirections) {
       @Override
       public Set<byte[]> execute(Jedis connection) {
-        return connection.zrangeByLex(key, max, min);
+        return connection.zrevrangeByLex(key, max, min);
       }
     }.runBinary(key);
   }

File: src/main/java/redis/clients/jedis/BinaryJedisCluster.java
Patch:
@@ -1188,7 +1188,7 @@ public Set<byte[]> zrevrangeByLex(final byte[] key, final byte[] max, final byte
     return new JedisClusterCommand<Set<byte[]>>(connectionHandler, maxRedirections) {
       @Override
       public Set<byte[]> execute(Jedis connection) {
-        return connection.zrangeByLex(key, max, min);
+        return connection.zrevrangeByLex(key, max, min);
       }
     }.runBinary(key);
   }

File: src/main/java/redis/clients/jedis/JedisSentinelPool.java
Patch:
@@ -112,7 +112,7 @@ private void initPool(HostAndPort master) {
       currentHostMaster = master;
       if (factory == null) {
         factory = new JedisFactory(master.getHost(), master.getPort(), connectionTimeout,
-            soTimeout, password, database, clientName);
+            soTimeout, password, database, clientName, false, null, null, null);
         initPool(poolConfig, factory);
       } else {
         factory.setHostAndPort(currentHostMaster);

File: src/main/java/redis/clients/jedis/JedisSentinelPool.java
Patch:
@@ -160,8 +160,8 @@ private HostAndPort initSentinels(Set<String> sentinels, final String masterName
       } catch (JedisException e) {
         // resolves #1036, it should handle JedisException there's another chance
         // of raising JedisDataException
-        log.warning("Cannot get master address from sentinel running @ " + hap
-            + ". Reason: " + e + ". Trying next one.");
+        log.warning("Cannot get master address from sentinel running @ " + hap + ". Reason: " + e
+            + ". Trying next one.");
       } finally {
         if (jedis != null) {
           jedis.close();

File: src/main/java/redis/clients/jedis/MultiKeyPipelineBase.java
Patch:
@@ -7,8 +7,8 @@
 import java.util.Set;
 
 public abstract class MultiKeyPipelineBase extends PipelineBase implements
-        MultiKeyBinaryRedisPipeline, MultiKeyCommandsPipeline, ClusterPipeline,
-        BinaryScriptingCommandsPipeline, ScriptingCommandsPipeline {
+    MultiKeyBinaryRedisPipeline, MultiKeyCommandsPipeline, ClusterPipeline,
+    BinaryScriptingCommandsPipeline, ScriptingCommandsPipeline {
 
   protected Client client = null;
 

File: src/main/java/redis/clients/jedis/BinaryClient.java
Patch:
@@ -118,7 +118,6 @@ public void exists(final byte[]... keys) {
     sendCommand(EXISTS, keys);
   }
 
-  @Deprecated
   public void exists(final byte[] key) {
     sendCommand(EXISTS, key);
   }

File: src/main/java/redis/clients/jedis/BinaryJedis.java
Patch:
@@ -195,7 +195,6 @@ public Long exists(final byte[]... keys) {
    * @return Boolean reply, true if the key exists, otherwise false
    */
   @Override
-  @Deprecated
   public Boolean exists(final byte[] key) {
     checkIsInMultiOrPipeline();
     client.exists(key);

File: src/main/java/redis/clients/jedis/Client.java
Patch:
@@ -45,7 +45,6 @@ public void get(final String key) {
   }
 
   @Override
-  @Deprecated
   public void exists(final String key) {
     exists(SafeEncoder.encode(key));
   }

File: src/main/java/redis/clients/jedis/Jedis.java
Patch:
@@ -128,7 +128,6 @@ public Long exists(final String... keys) {
    * @return Boolean reply, true if the key exists, otherwise false
    */
   @Override
-  @Deprecated
   public Boolean exists(final String key) {
     checkIsInMultiOrPipeline();
     client.exists(key);

File: src/main/java/redis/clients/jedis/JedisCluster.java
Patch:
@@ -83,7 +83,6 @@ public String execute(Jedis connection) {
     }.run(key);
   }
 
-  @Deprecated
   @Override
   public Boolean exists(final String key) {
     return new JedisClusterCommand<Boolean>(connectionHandler, maxRedirections) {

File: src/main/java/redis/clients/jedis/commands/Commands.java
Patch:
@@ -19,7 +19,6 @@ public interface Commands {
 
   public void get(final String key);
 
-  @Deprecated
   public void exists(final String key);
 
   public void exists(final String... keys);

File: src/main/java/redis/clients/jedis/BinaryClient.java
Patch:
@@ -937,6 +937,7 @@ public int getDB() {
     return db;
   }
 
+  @Override
   public void disconnect() {
     db = 0;
     super.disconnect();

File: src/main/java/redis/clients/jedis/JedisPool.java
Patch:
@@ -100,12 +100,14 @@ public Jedis getResource() {
     return jedis;
   }
 
+  @Override
   protected void returnBrokenResource(final Jedis resource) {
     if (resource != null) {
       returnBrokenResourceObject(resource);
     }
   }
 
+  @Override
   protected void returnResource(final Jedis resource) {
     if (resource != null) {
       try {

File: src/main/java/redis/clients/jedis/JedisShardInfo.java
Patch:
@@ -119,6 +119,7 @@ public void setSoTimeout(int soTimeout) {
     this.soTimeout = soTimeout;
   }
 
+  @Override
   public String getName() {
     return name;
   }

File: src/main/java/redis/clients/jedis/MultiKeyCommands.java
Patch:
@@ -72,6 +72,8 @@ public interface MultiKeyCommands {
 
   ScanResult<String> scan(final String cursor);
 
+  ScanResult<String> scan(final String cursor, final ScanParams params);
+
   String pfmerge(final String destkey, final String... sourcekeys);
 
   long pfcount(final String... keys);

File: src/test/java/redis/clients/jedis/tests/commands/ControlCommandsTest.java
Patch:
@@ -67,6 +67,7 @@ public void readonly() {
   @Test
   public void monitor() {
     new Thread(new Runnable() {
+      @Override
       public void run() {
         try {
           // sleep 100ms to make sure that monitor thread runs first
@@ -85,6 +86,7 @@ public void run() {
     jedis.monitor(new JedisMonitor() {
       private int count = 0;
 
+      @Override
       public void onCommand(String command) {
         if (command.contains("INCR")) {
           count++;

File: src/main/java/redis/clients/jedis/JedisCommands.java
Patch:
@@ -72,6 +72,8 @@ public interface JedisCommands {
 
   Long hincrBy(String key, String field, long value);
 
+  Double hincrByFloat(final String key, final String field, final double value);
+
   Boolean hexists(String key, String field);
 
   Long hdel(String key, String... field);

File: src/main/java/redis/clients/jedis/BinaryJedisCluster.java
Patch:
@@ -1314,7 +1314,7 @@ public List<byte[]> mget(final byte[]... keys) {
       public List<byte[]> execute(Jedis connection) {
         return connection.mget(keys);
       }
-    }.runBinary(keys.length - 1, keys);
+    }.runBinary(keys.length, keys);
   }
 
   @Override

File: src/main/java/redis/clients/jedis/JedisCluster.java
Patch:
@@ -1228,7 +1228,7 @@ public List<String> mget(final String... keys) {
       public List<String> execute(Jedis connection) {
         return connection.mget(keys);
       }
-    }.run(keys.length - 1, keys);
+    }.run(keys.length, keys);
   }
 
   @Override

File: src/main/java/redis/clients/jedis/BinaryJedisCluster.java
Patch:
@@ -1314,7 +1314,7 @@ public List<byte[]> mget(final byte[]... keys) {
       public List<byte[]> execute(Jedis connection) {
         return connection.mget(keys);
       }
-    }.runBinary(keys.length - 1, keys);
+    }.runBinary(keys.length, keys);
   }
 
   @Override

File: src/main/java/redis/clients/jedis/JedisCluster.java
Patch:
@@ -1228,7 +1228,7 @@ public List<String> mget(final String... keys) {
       public List<String> execute(Jedis connection) {
         return connection.mget(keys);
       }
-    }.run(keys.length - 1, keys);
+    }.run(keys.length, keys);
   }
 
   @Override

File: src/main/java/redis/clients/jedis/Tuple.java
Patch:
@@ -35,7 +35,7 @@ public boolean equals(Object obj) {
   }
 
   public int compareTo(Tuple other) {
-    if (Arrays.equals(this.element, other.element)) return 0;
+    if (Arrays.equals(this.element, other.element) || this.score == other.getScore()) return 0;
     else return this.score < other.getScore() ? -1 : 1;
   }
 
@@ -70,4 +70,4 @@ public double getScore() {
   public String toString() {
     return '[' + Arrays.toString(element) + ',' + score + ']';
   }
-}
\ No newline at end of file
+}

File: src/main/java/redis/clients/util/Pool.java
Patch:
@@ -20,7 +20,7 @@ public Pool() {
 
   @Override
   public void close() {
-    closeInternalPool();
+    destroy();
   }
 
   public boolean isClosed() {

File: src/main/java/redis/clients/util/Hashing.java
Patch:
@@ -18,7 +18,7 @@ public long hash(byte[] key) {
           md5Holder.set(MessageDigest.getInstance("MD5"));
         }
       } catch (NoSuchAlgorithmException e) {
-        throw new IllegalStateException("++++ no md5 algorythm found");
+        throw new IllegalStateException("++++ no md5 algorithm found");
       }
       MessageDigest md5 = md5Holder.get();
 

File: src/main/java/redis/clients/util/Hashing.java
Patch:
@@ -18,7 +18,7 @@ public long hash(byte[] key) {
           md5Holder.set(MessageDigest.getInstance("MD5"));
         }
       } catch (NoSuchAlgorithmException e) {
-        throw new IllegalStateException("++++ no md5 algorythm found");
+        throw new IllegalStateException("++++ no md5 algorithm found");
       }
       MessageDigest md5 = md5Holder.get();
 

File: src/main/java/redis/clients/jedis/BinaryJedisPubSub.java
Patch:
@@ -78,7 +78,7 @@ public void proceedWithPatterns(Client client, byte[]... patterns) {
   public void proceed(Client client, byte[]... channels) {
     this.client = client;
     client.subscribe(channels);
-	client.flush();
+    client.flush();
     process(client);
   }
 

File: src/main/java/redis/clients/jedis/BinaryJedis.java
Patch:
@@ -980,8 +980,8 @@ public Long llen(final byte[] key) {
    * <b>Out-of-range indexes</b>
    * <p>
    * Indexes out of range will not produce an error: if start is over the end of the list, or start
-   * &gt; end, an empty list is returned. If end is over the end of the list Redis will threat it just
-   * like the last element of the list.
+   * &gt; end, an empty list is returned. If end is over the end of the list Redis will threat it
+   * just like the last element of the list.
    * <p>
    * Time complexity: O(start+n) (with n being the length of the range and start being the start
    * offset)

File: src/main/java/redis/clients/jedis/BinaryJedisCluster.java
Patch:
@@ -38,8 +38,8 @@ public BinaryJedisCluster(Set<HostAndPort> jedisClusterNode, int timeout, int ma
     this.maxRedirections = maxRedirections;
   }
 
-  public BinaryJedisCluster(Set<HostAndPort> jedisClusterNode, int connectionTimeout, int soTimeout,
-      int maxRedirections, final GenericObjectPoolConfig poolConfig) {
+  public BinaryJedisCluster(Set<HostAndPort> jedisClusterNode, int connectionTimeout,
+      int soTimeout, int maxRedirections, final GenericObjectPoolConfig poolConfig) {
     this.connectionHandler = new JedisSlotBasedConnectionHandler(jedisClusterNode, poolConfig,
         connectionTimeout, soTimeout);
     this.maxRedirections = maxRedirections;

File: src/main/java/redis/clients/jedis/Jedis.java
Patch:
@@ -857,8 +857,8 @@ public Long llen(final String key) {
    * <b>Out-of-range indexes</b>
    * <p>
    * Indexes out of range will not produce an error: if start is over the end of the list, or start
-   * &gt; end, an empty list is returned. If end is over the end of the list Redis will threat it just
-   * like the last element of the list.
+   * &gt; end, an empty list is returned. If end is over the end of the list Redis will threat it
+   * just like the last element of the list.
    * <p>
    * Time complexity: O(start+n) (with n being the length of the range and start being the start
    * offset)

File: src/main/java/redis/clients/jedis/Pipeline.java
Patch:
@@ -89,8 +89,8 @@ public boolean isInMulti() {
 
   /**
    * Synchronize pipeline by reading all responses. This operation close the pipeline. In order to
-   * get return values from pipelined commands, capture the different Response&lt;?&gt; of the commands
-   * you execute.
+   * get return values from pipelined commands, capture the different Response&lt;?&gt; of the
+   * commands you execute.
    */
   public void sync() {
     if (getPipelinedResponseLength() > 0) {

File: src/main/java/redis/clients/util/MurmurHash.java
Patch:
@@ -16,8 +16,7 @@
 
 /**
  * This is a very fast, non-cryptographic hash suitable for general hash-based lookup. See
- * http://murmurhash.googlepages.com/ for more details.
- * <br>
+ * http://murmurhash.googlepages.com/ for more details. <br>
  * <p>
  * The C version of MurmurHash 2.0 found at that site was ported to Java by Andrzej Bialecki (ab at
  * getopt org).

File: src/main/java/redis/clients/jedis/Connection.java
Patch:
@@ -80,7 +80,7 @@ public void rollbackTimeout() {
     }
   }
 
-  protected Connection sendCommand(final Command cmd, final String... args) {
+  protected Connection sendCommand(final ProtocolCommand cmd, final String... args) {
     final byte[][] bargs = new byte[args.length][];
     for (int i = 0; i < args.length; i++) {
       bargs[i] = SafeEncoder.encode(args[i]);
@@ -100,7 +100,7 @@ protected Connection sendCommand(final ProtocolCommand cmd, final byte[]... args
     }
   }
 
-  protected Connection sendCommand(final Command cmd) {
+  protected Connection sendCommand(final ProtocolCommand cmd) {
     try {
       connect();
       Protocol.sendCommand(outputStream, cmd, new byte[0][]);

File: src/main/java/redis/clients/jedis/Connection.java
Patch:
@@ -88,7 +88,7 @@ protected Connection sendCommand(final Command cmd, final String... args) {
     return sendCommand(cmd, bargs);
   }
 
-  protected Connection sendCommand(final Command cmd, final byte[]... args) {
+  protected Connection sendCommand(final ProtocolCommand cmd, final byte[]... args) {
     try {
       connect();
       Protocol.sendCommand(outputStream, cmd, args);

File: src/main/java/redis/clients/jedis/BinaryJedisCluster.java
Patch:
@@ -16,7 +16,7 @@ public class BinaryJedisCluster implements BinaryJedisClusterCommands, MultiKeyB
     JedisClusterBinaryScriptingCommands, Closeable {
 
   public static final short HASHSLOTS = 16384;
-  protected static final int DEFAULT_TIMEOUT = 1;
+  protected static final int DEFAULT_TIMEOUT = 2000;
   protected static final int DEFAULT_MAX_REDIRECTIONS = 5;
 
   protected int maxRedirections;

File: src/main/java/redis/clients/jedis/JedisClusterConnectionHandler.java
Patch:
@@ -72,6 +72,8 @@ public void renewSlotCache() {
         jedis = jp.getResource();
         cache.discoverClusterSlots(jedis);
         break;
+      } catch (JedisConnectionException e) {
+        // try next nodes
       } finally {
         if (jedis != null) {
           jedis.close();

File: src/main/java/redis/clients/jedis/BinaryClient.java
Patch:
@@ -102,7 +102,7 @@ public void set(final byte[] key, final byte[] value) {
   }
 
   public void set(final byte[] key, final byte[] value, final SetParams params) {
-    sendCommand(Command.SET, params.getByteParams());
+    sendCommand(Command.SET, params.getByteParams(key, value));
   }
 
   public void get(final byte[] key) {

File: src/test/java/redis/clients/jedis/tests/commands/BinaryValuesCommandsTest.java
Patch:
@@ -74,7 +74,7 @@ public void setIfExistAndGet() {
     String status = jedis.set(bfoo, binaryValue);
     assertTrue(Keyword.OK.name().equalsIgnoreCase(status));
     // nx should fail if value exists
-    String statusSuccess = jedis.set(bfoo, binaryValue, setParams().nx().ex(expireSeconds));
+    String statusSuccess = jedis.set(bfoo, binaryValue, setParams().xx().ex(expireSeconds));
     assertTrue(Keyword.OK.name().equalsIgnoreCase(statusSuccess));
 
     byte[] value = jedis.get(bfoo);

File: src/main/java/redis/clients/jedis/JedisCluster.java
Patch:
@@ -108,7 +108,7 @@ public Boolean execute(Jedis connection) {
 
   @Override
   public Long persist(final String key) {
-    return new JedisClusterCommand<Long>(connectionHandler, timeout, maxRedirections) {
+    return new JedisClusterCommand<Long>(connectionHandler, maxRedirections) {
       @Override
       public Long execute(Jedis connection) {
         return connection.persist(key);

File: src/main/java/redis/clients/jedis/JedisCluster.java
Patch:
@@ -588,7 +588,7 @@ public String execute(Jedis connection) {
 
   @Override
   public Set<String> spop(final String key, final long count) {
-    return new JedisClusterCommand<Set<String>>(connectionHandler, timeout, maxRedirections) {
+    return new JedisClusterCommand<Set<String>>(connectionHandler, maxRedirections) {
       @Override
       public Set<String> execute(Jedis connection) {
         return connection.spop(key, count);

File: src/main/java/redis/clients/jedis/JedisSlotBasedConnectionHandler.java
Patch:
@@ -12,8 +12,8 @@
 public class JedisSlotBasedConnectionHandler extends JedisClusterConnectionHandler {
 
   public JedisSlotBasedConnectionHandler(Set<HostAndPort> nodes,
-      final GenericObjectPoolConfig poolConfig) {
-    super(nodes, poolConfig);
+      final GenericObjectPoolConfig poolConfig, int timeout) {
+    super(nodes, poolConfig, timeout);
   }
 
   public Jedis getConnection() {

File: src/test/java/redis/clients/jedis/tests/JedisSentinelPoolTest.java
Patch:
@@ -110,7 +110,7 @@ public void returnResourceShouldResetState() {
         jedis2 = null;
       }
     } finally {
-    	jedis2.close();
+      jedis2.close();
 
       pool.destroy();
     }

File: src/test/java/redis/clients/jedis/tests/JedisTest.java
Patch:
@@ -143,12 +143,11 @@ public void checkCloseable() {
     bj.connect();
     bj.close();
   }
-  
+
   @Test
   public void checkDisconnectOnQuit() {
     jedis.quit();
     assertFalse(jedis.getClient().isConnected());
   }
-  
-  
+
 }
\ No newline at end of file

File: src/main/java/redis/clients/jedis/JedisSlotBasedConnectionHandler.java
Patch:
@@ -12,8 +12,8 @@
 public class JedisSlotBasedConnectionHandler extends JedisClusterConnectionHandler {
 
   public JedisSlotBasedConnectionHandler(Set<HostAndPort> nodes,
-      final GenericObjectPoolConfig poolConfig) {
-    super(nodes, poolConfig);
+      final GenericObjectPoolConfig poolConfig, int timeout) {
+    super(nodes, poolConfig, timeout);
   }
 
   public Jedis getConnection() {

File: src/test/java/redis/clients/jedis/tests/JedisSentinelPoolTest.java
Patch:
@@ -110,7 +110,7 @@ public void returnResourceShouldResetState() {
         jedis2 = null;
       }
     } finally {
-    	jedis2.close();
+      jedis2.close();
 
       pool.destroy();
     }

File: src/test/java/redis/clients/jedis/tests/JedisTest.java
Patch:
@@ -143,12 +143,11 @@ public void checkCloseable() {
     bj.connect();
     bj.close();
   }
-  
+
   @Test
   public void checkDisconnectOnQuit() {
     jedis.quit();
     assertFalse(jedis.getClient().isConnected());
   }
-  
-  
+
 }
\ No newline at end of file

File: src/main/java/redis/clients/jedis/BinaryShardedJedis.java
Patch:
@@ -82,6 +82,7 @@ public Long pexpire(byte[] key, final long milliseconds) {
     Jedis j = getShard(key);
     return j.pexpire(key, milliseconds);
   }
+
   @Deprecated
   public Long pexpire(String key, final long milliseconds) {
     Jedis j = getShard(key);

File: src/main/java/redis/clients/jedis/JedisPool.java
Patch:
@@ -93,7 +93,7 @@ protected void returnBrokenResource(final Jedis resource) {
     }
   }
 
-   protected void returnResource(final Jedis resource) {
+  protected void returnResource(final Jedis resource) {
     if (resource != null) {
       try {
         resource.resetState();

File: src/main/java/redis/clients/jedis/BinaryJedis.java
Patch:
@@ -163,7 +163,9 @@ public byte[] get(final byte[] key) {
   public String quit() {
     checkIsInMulti();
     client.quit();
-    return client.getStatusCodeReply();
+    String quitReturn = client.getStatusCodeReply();
+    client.disconnect();
+    return quitReturn;
   }
 
   /**

File: src/main/java/redis/clients/jedis/Connection.java
Patch:
@@ -230,7 +230,7 @@ public List<Object> getObjectMultiBulkReply() {
   @SuppressWarnings("unchecked")
   public List<Long> getIntegerMultiBulkReply() {
     flush();
-    return (List<Long>) Protocol.read(inputStream);
+    return (List<Long>) readProtocolWithCheckingBroken();
   }
 
   public Object getOne() {

File: src/main/java/redis/clients/jedis/Connection.java
Patch:
@@ -230,7 +230,7 @@ public List<Object> getObjectMultiBulkReply() {
   @SuppressWarnings("unchecked")
   public List<Long> getIntegerMultiBulkReply() {
     flush();
-    return (List<Long>) Protocol.read(inputStream);
+    return (List<Long>) readProtocolWithCheckingBroken();
   }
 
   public Object getOne() {

File: src/main/java/redis/clients/jedis/BinaryJedisCluster.java
Patch:
@@ -1015,7 +1015,7 @@ public Long move(final byte[] key, final int dbIndex) {
       public Long execute(Jedis connection) {
         return connection.move(key, dbIndex);
       }
-    }.runBinary(null);
+    }.runBinary(key);
   }
 
   @Override

File: src/main/java/redis/clients/jedis/JedisCluster.java
Patch:
@@ -1446,7 +1446,7 @@ public ScanResult<Entry<String, String>> hscan(final String key, final String cu
       public ScanResult<Entry<String, String>> execute(Jedis connection) {
         return connection.hscan(key, cursor);
       }
-    }.run(null);
+    }.run(key);
   }
 
   @Override
@@ -1456,7 +1456,7 @@ public ScanResult<String> sscan(final String key, final String cursor) {
       public ScanResult<String> execute(Jedis connection) {
         return connection.sscan(key, cursor);
       }
-    }.run(null);
+    }.run(key);
   }
 
   @Override
@@ -1466,7 +1466,7 @@ public ScanResult<Tuple> zscan(final String key, final String cursor) {
       public ScanResult<Tuple> execute(Jedis connection) {
         return connection.zscan(key, cursor);
       }
-    }.run(null);
+    }.run(key);
   }
 
   @Override

File: src/main/java/redis/clients/jedis/JedisCluster.java
Patch:
@@ -1366,7 +1366,7 @@ public ScanResult<Entry<String, String>> hscan(final String key, final String cu
       public ScanResult<Entry<String, String>> execute(Jedis connection) {
         return connection.hscan(key, cursor);
       }
-    }.run(null);
+    }.run(key);
   }
 
   @Override
@@ -1376,7 +1376,7 @@ public ScanResult<String> sscan(final String key, final String cursor) {
       public ScanResult<String> execute(Jedis connection) {
         return connection.sscan(key, cursor);
       }
-    }.run(null);
+    }.run(key);
   }
 
   @Override
@@ -1386,7 +1386,7 @@ public ScanResult<Tuple> zscan(final String key, final String cursor) {
       public ScanResult<Tuple> execute(Jedis connection) {
         return connection.zscan(key, cursor);
       }
-    }.run(null);
+    }.run(key);
   }
 
   @Override

File: src/main/java/redis/clients/jedis/BinaryJedis.java
Patch:
@@ -337,6 +337,7 @@ public Long expire(final byte[] key, final int seconds) {
   }
 
   /**
+   * @deprecated use BinaryJedis.pexpire(byte[], long) or Jedis.pexpire(String,long)
    * Set a timeout on the specified key. After the timeout the key will be automatically deleted by
    * the server. A key with an associated timeout is said to be volatile in Redis terminology.
    * <p>
@@ -357,6 +358,7 @@ public Long expire(final byte[] key, final int seconds) {
    *         the key already has an associated timeout (this may happen only in Redis versions <
    *         2.1.3, Redis >= 2.1.3 will happily update the timeout), or the key does not exist.
    */
+  @Deprecated
   public Long pexpire(String key, final long milliseconds) {
     checkIsInMulti();
     client.pexpire(key, milliseconds);

File: src/main/java/redis/clients/jedis/BinaryClient.java
Patch:
@@ -1189,7 +1189,7 @@ public void pfmerge(final byte[] destkey, final byte[]... sourcekeys) {
   }
   
   private byte[][] removeNulls(List<byte[]> list) {
-    ArrayList<byte[]> noNullsList = new ArrayList<>(list);
+    ArrayList<byte[]> noNullsList = new ArrayList<byte[]>(list);
     noNullsList.removeAll(Collections.singleton(null));
 
     return noNullsList.toArray(new byte[noNullsList.size()][]);

File: src/main/java/redis/clients/jedis/params/Params.java
Patch:
@@ -22,14 +22,14 @@ public boolean contains(String name) {
   
   protected void addParam(String name, Object value) {
     if(params == null) {
-      params = new HashMap<>();
+      params = new HashMap<String, Object>();
     }
     params.put(name, value);
   }
   
   protected void addParam(String name) {
     if(params == null) {
-      params = new HashMap<>();
+      params = new HashMap<String, Object>();
     }
     params.put(name, true);
   }

File: src/main/java/redis/clients/jedis/BinaryJedisCommands.java
Patch:
@@ -11,6 +11,8 @@
 public interface BinaryJedisCommands {
   String set(byte[] key, byte[] value);
 
+  String set(byte[] key, byte[] value, byte[] nxxx, byte[] expx, long time);
+
   byte[] get(byte[] key);
 
   Boolean exists(byte[] key);

File: src/main/java/redis/clients/jedis/BinaryJedisCommands.java
Patch:
@@ -11,6 +11,8 @@
 public interface BinaryJedisCommands {
   String set(byte[] key, byte[] value);
 
+  String set(byte[] key, byte[] value, byte[] nxxx, byte[] expx, long time);
+
   byte[] get(byte[] key);
 
   Boolean exists(byte[] key);

File: src/main/java/redis/clients/jedis/JedisShardInfo.java
Patch:
@@ -77,7 +77,8 @@ public JedisShardInfo(String host, String name, int port, int timeout, int weigh
     this.host = host;
     this.name = name;
     this.port = port;
-    this.timeout = timeout;
+    this.connectionTimeout = timeout;
+    this.soTimeout = timeout;
   }
 
   public JedisShardInfo(URI uri) {

File: src/test/java/redis/clients/jedis/tests/commands/ObjectCommandsTest.java
Patch:
@@ -25,11 +25,11 @@ public void objectRefcount() {
   public void objectEncoding() {
     jedis.lpush(key, "hello world");
     String encoding = jedis.objectEncoding(key);
-    assertEquals("ziplist", encoding);
+    assertEquals("quicklist", encoding);
 
     // Binary
     encoding = SafeEncoder.encode(jedis.objectEncoding(binaryKey));
-    assertEquals("ziplist", encoding);
+    assertEquals("quicklist", encoding);
   }
 
   @Test

File: src/main/java/redis/clients/jedis/BinaryClient.java
Patch:
@@ -73,7 +73,7 @@ public void setPassword(final String password) {
     this.password = password;
   }
   
-  public void setDb(long db) {
+  public void setDb(int db) {
     this.db = db;
   }
 

File: src/main/java/redis/clients/jedis/BasicCommands.java
Patch:
@@ -34,7 +34,7 @@ public interface BasicCommands {
 
   String slaveofNoOne();
 
-  Long getDB();
+  int getDB();
 
   String debug(DebugParams params);
 

File: src/main/java/redis/clients/jedis/BinaryClient.java
Patch:
@@ -36,7 +36,7 @@ private LIST_POSITION() {
 
   private String password;
 
-  private long db;
+  private int db;
 
   private boolean isInWatch;
 
@@ -931,7 +931,7 @@ public void getrange(byte[] key, long startOffset, long endOffset) {
     sendCommand(GETRANGE, key, toByteArray(startOffset), toByteArray(endOffset));
   }
 
-  public Long getDB() {
+  public int getDB() {
     return db;
   }
 

File: src/main/java/redis/clients/jedis/BinaryJedis.java
Patch:
@@ -2866,7 +2866,7 @@ public void psubscribe(BinaryJedisPubSub jedisPubSub, byte[]... patterns) {
     }
   }
 
-  public Long getDB() {
+  public int getDB() {
     return client.getDB();
   }
 

File: src/main/java/redis/clients/jedis/JedisCluster.java
Patch:
@@ -1299,10 +1299,10 @@ public String execute(Jedis connection) {
   }
 
   @Override
-  public Long getDB() {
-    return new JedisClusterCommand<Long>(connectionHandler, timeout, maxRedirections) {
+  public int getDB() {
+    return new JedisClusterCommand<Integer>(connectionHandler, timeout, maxRedirections) {
       @Override
-      public Long execute(Jedis connection) {
+      public Integer execute(Jedis connection) {
         return connection.getDB();
       }
     }.run(null);

File: src/test/java/redis/clients/jedis/tests/JedisPoolTest.java
Patch:
@@ -173,16 +173,16 @@ public void selectDatabaseOnActivation() {
         "foobared");
 
     Jedis jedis0 = pool.getResource();
-    assertEquals(0L, jedis0.getDB().longValue());
+    assertEquals(0, jedis0.getDB());
 
     jedis0.select(1);
-    assertEquals(1L, jedis0.getDB().longValue());
+    assertEquals(1, jedis0.getDB());
 
     pool.returnResource(jedis0);
 
     Jedis jedis1 = pool.getResource();
     assertTrue("Jedis instance was not reused", jedis1 == jedis0);
-    assertEquals(0L, jedis1.getDB().longValue());
+    assertEquals(0, jedis1.getDB());
 
     pool.returnResource(jedis1);
     pool.destroy();

File: src/test/java/redis/clients/jedis/tests/JedisSentinelPoolTest.java
Patch:
@@ -178,7 +178,7 @@ private void forceFailover(JedisSentinelPool pool) throws InterruptedException {
     Jedis afterFailoverJedis = pool.getResource();
     assertEquals("PONG", afterFailoverJedis.ping());
     assertEquals("foobared", afterFailoverJedis.configGet("requirepass").get(1));
-    assertEquals(2, afterFailoverJedis.getDB().intValue());
+    assertEquals(2, afterFailoverJedis.getDB());
 
     // returning both connections to the pool should not throw
     beforeFailoverJedis.close();

File: src/test/java/redis/clients/jedis/tests/JedisTest.java
Patch:
@@ -106,13 +106,13 @@ public void allowUrlWithNoDBAndNoPassword() {
     jedis.auth("foobared");
     assertEquals(jedis.getClient().getHost(), "localhost");
     assertEquals(jedis.getClient().getPort(), 6380);
-    assertEquals(jedis.getDB(), (Long) 0L);
+    assertEquals(jedis.getDB(), 0);
 
     jedis = new Jedis("redis://localhost:6380/");
     jedis.auth("foobared");
     assertEquals(jedis.getClient().getHost(), "localhost");
     assertEquals(jedis.getClient().getPort(), 6380);
-    assertEquals(jedis.getDB(), (Long) 0L);
+    assertEquals(jedis.getDB(), 0);
   }
 
   @Test

File: src/test/java/redis/clients/jedis/tests/commands/AllKindOfValuesCommandsTest.java
Patch:
@@ -349,9 +349,9 @@ public void select() {
 
   @Test
   public void getDB() {
-    assertEquals(0, jedis.getDB().longValue());
+    assertEquals(0, jedis.getDB());
     jedis.select(1);
-    assertEquals(1, jedis.getDB().longValue());
+    assertEquals(1, jedis.getDB());
   }
 
   @Test

File: src/main/java/redis/clients/jedis/BasicCommands.java
Patch:
@@ -34,7 +34,7 @@ public interface BasicCommands {
 
   String slaveofNoOne();
 
-  Long getDB();
+  int getDB();
 
   String debug(DebugParams params);
 

File: src/main/java/redis/clients/jedis/BinaryClient.java
Patch:
@@ -36,7 +36,7 @@ private LIST_POSITION() {
 
   private String password;
 
-  private long db;
+  private int db;
 
   private boolean isInWatch;
 
@@ -927,7 +927,7 @@ public void getrange(byte[] key, long startOffset, long endOffset) {
     sendCommand(GETRANGE, key, toByteArray(startOffset), toByteArray(endOffset));
   }
 
-  public Long getDB() {
+  public int getDB() {
     return db;
   }
 

File: src/main/java/redis/clients/jedis/BinaryJedis.java
Patch:
@@ -2865,7 +2865,7 @@ public void psubscribe(BinaryJedisPubSub jedisPubSub, byte[]... patterns) {
     }
   }
 
-  public Long getDB() {
+  public int getDB() {
     return client.getDB();
   }
 

File: src/main/java/redis/clients/jedis/JedisCluster.java
Patch:
@@ -1299,10 +1299,10 @@ public String execute(Jedis connection) {
   }
 
   @Override
-  public Long getDB() {
-    return new JedisClusterCommand<Long>(connectionHandler, timeout, maxRedirections) {
+  public int getDB() {
+    return new JedisClusterCommand<Integer>(connectionHandler, timeout, maxRedirections) {
       @Override
-      public Long execute(Jedis connection) {
+      public Integer execute(Jedis connection) {
         return connection.getDB();
       }
     }.run(null);

File: src/test/java/redis/clients/jedis/tests/JedisSentinelPoolTest.java
Patch:
@@ -178,7 +178,7 @@ private void forceFailover(JedisSentinelPool pool) throws InterruptedException {
     Jedis afterFailoverJedis = pool.getResource();
     assertEquals("PONG", afterFailoverJedis.ping());
     assertEquals("foobared", afterFailoverJedis.configGet("requirepass").get(1));
-    assertEquals(2, afterFailoverJedis.getDB().intValue());
+    assertEquals(2, afterFailoverJedis.getDB());
 
     // returning both connections to the pool should not throw
     beforeFailoverJedis.close();

File: src/test/java/redis/clients/jedis/tests/JedisTest.java
Patch:
@@ -106,13 +106,13 @@ public void allowUrlWithNoDBAndNoPassword() {
     jedis.auth("foobared");
     assertEquals(jedis.getClient().getHost(), "localhost");
     assertEquals(jedis.getClient().getPort(), 6380);
-    assertEquals(jedis.getDB(), (Long) 0L);
+    assertEquals(jedis.getDB(), 0);
 
     jedis = new Jedis("redis://localhost:6380/");
     jedis.auth("foobared");
     assertEquals(jedis.getClient().getHost(), "localhost");
     assertEquals(jedis.getClient().getPort(), 6380);
-    assertEquals(jedis.getDB(), (Long) 0L);
+    assertEquals(jedis.getDB(), 0);
   }
 
   @Test

File: src/test/java/redis/clients/jedis/tests/commands/AllKindOfValuesCommandsTest.java
Patch:
@@ -349,9 +349,9 @@ public void select() {
 
   @Test
   public void getDB() {
-    assertEquals(0, jedis.getDB().longValue());
+    assertEquals(0, jedis.getDB());
     jedis.select(1);
-    assertEquals(1, jedis.getDB().longValue());
+    assertEquals(1, jedis.getDB());
   }
 
   @Test

File: src/main/java/redis/clients/jedis/BasicCommands.java
Patch:
@@ -34,7 +34,7 @@ public interface BasicCommands {
 
   String slaveofNoOne();
 
-  int getDB();
+  Long getDB();
 
   String debug(DebugParams params);
 

File: src/main/java/redis/clients/jedis/BinaryClient.java
Patch:
@@ -36,7 +36,7 @@ private LIST_POSITION() {
 
   private String password;
 
-  private int db;
+  private long db;
 
   private boolean isInWatch;
 
@@ -73,7 +73,7 @@ public void setPassword(final String password) {
     this.password = password;
   }
   
-  public void setDb(int db) {
+  public void setDb(long db) {
     this.db = db;
   }
 
@@ -931,7 +931,7 @@ public void getrange(byte[] key, long startOffset, long endOffset) {
     sendCommand(GETRANGE, key, toByteArray(startOffset), toByteArray(endOffset));
   }
 
-  public int getDB() {
+  public Long getDB() {
     return db;
   }
 

File: src/main/java/redis/clients/jedis/BinaryJedis.java
Patch:
@@ -2866,7 +2866,7 @@ public void psubscribe(BinaryJedisPubSub jedisPubSub, byte[]... patterns) {
     }
   }
 
-  public int getDB() {
+  public Long getDB() {
     return client.getDB();
   }
 

File: src/main/java/redis/clients/jedis/JedisCluster.java
Patch:
@@ -1299,10 +1299,10 @@ public String execute(Jedis connection) {
   }
 
   @Override
-  public int getDB() {
-    return new JedisClusterCommand<Integer>(connectionHandler, timeout, maxRedirections) {
+  public Long getDB() {
+    return new JedisClusterCommand<Long>(connectionHandler, timeout, maxRedirections) {
       @Override
-      public Integer execute(Jedis connection) {
+      public Long execute(Jedis connection) {
         return connection.getDB();
       }
     }.run(null);

File: src/main/java/redis/clients/jedis/JedisShardInfo.java
Patch:
@@ -1,6 +1,7 @@
 package redis.clients.jedis;
 
 import java.net.URI;
+import java.util.logging.Logger;
 
 import redis.clients.util.JedisURIHelper;
 import redis.clients.util.ShardInfo;

File: src/test/java/redis/clients/jedis/tests/JedisPoolTest.java
Patch:
@@ -173,16 +173,16 @@ public void selectDatabaseOnActivation() {
         "foobared");
 
     Jedis jedis0 = pool.getResource();
-    assertEquals(0, jedis0.getDB());
+    assertEquals(0L, jedis0.getDB().longValue());
 
     jedis0.select(1);
-    assertEquals(1, jedis0.getDB());
+    assertEquals(1L, jedis0.getDB().longValue());
 
     pool.returnResource(jedis0);
 
     Jedis jedis1 = pool.getResource();
     assertTrue("Jedis instance was not reused", jedis1 == jedis0);
-    assertEquals(0, jedis1.getDB());
+    assertEquals(0L, jedis1.getDB().longValue());
 
     pool.returnResource(jedis1);
     pool.destroy();

File: src/test/java/redis/clients/jedis/tests/JedisSentinelPoolTest.java
Patch:
@@ -178,7 +178,7 @@ private void forceFailover(JedisSentinelPool pool) throws InterruptedException {
     Jedis afterFailoverJedis = pool.getResource();
     assertEquals("PONG", afterFailoverJedis.ping());
     assertEquals("foobared", afterFailoverJedis.configGet("requirepass").get(1));
-    assertEquals(2, afterFailoverJedis.getDB());
+    assertEquals(2, afterFailoverJedis.getDB().intValue());
 
     // returning both connections to the pool should not throw
     beforeFailoverJedis.close();

File: src/test/java/redis/clients/jedis/tests/JedisTest.java
Patch:
@@ -106,13 +106,13 @@ public void allowUrlWithNoDBAndNoPassword() {
     jedis.auth("foobared");
     assertEquals(jedis.getClient().getHost(), "localhost");
     assertEquals(jedis.getClient().getPort(), 6380);
-    assertEquals(jedis.getDB(), 0);
+    assertEquals(jedis.getDB(), (Long) 0L);
 
     jedis = new Jedis("redis://localhost:6380/");
     jedis.auth("foobared");
     assertEquals(jedis.getClient().getHost(), "localhost");
     assertEquals(jedis.getClient().getPort(), 6380);
-    assertEquals(jedis.getDB(), 0);
+    assertEquals(jedis.getDB(), (Long) 0L);
   }
 
   @Test

File: src/test/java/redis/clients/jedis/tests/commands/AllKindOfValuesCommandsTest.java
Patch:
@@ -349,9 +349,9 @@ public void select() {
 
   @Test
   public void getDB() {
-    assertEquals(0, jedis.getDB());
+    assertEquals(0, jedis.getDB().longValue());
     jedis.select(1);
-    assertEquals(1, jedis.getDB());
+    assertEquals(1, jedis.getDB().longValue());
   }
 
   @Test

File: src/main/java/redis/clients/jedis/BasicRedisPipeline.java
Patch:
@@ -11,7 +11,7 @@ public interface BasicRedisPipeline {
 
   Response<String> bgsave();
 
-  Response<String> configGet(String pattern);
+  Response<List<String>> configGet(String pattern);
 
   Response<String> configSet(String parameter, String value);
 

File: src/main/java/redis/clients/jedis/MultiKeyPipelineBase.java
Patch:
@@ -296,9 +296,9 @@ public Response<String> bgsave() {
 		return getResponse(BuilderFactory.STRING);
 	}
 
-	public Response<String> configGet(String pattern) {
+	public Response<List<String>> configGet(String pattern) {
 		client.configGet(pattern);
-		return getResponse(BuilderFactory.STRING);
+		return getResponse(BuilderFactory.STRING_LIST);
 	}
 
 	public Response<String> configSet(String parameter, String value) {

File: src/main/java/redis/clients/jedis/BasicRedisPipeline.java
Patch:
@@ -11,7 +11,7 @@ public interface BasicRedisPipeline {
 
   Response<String> bgsave();
 
-  Response<String> configGet(String pattern);
+  Response<List<String>> configGet(String pattern);
 
   Response<String> configSet(String parameter, String value);
 

File: src/main/java/redis/clients/jedis/MultiKeyPipelineBase.java
Patch:
@@ -296,9 +296,9 @@ public Response<String> bgsave() {
 		return getResponse(BuilderFactory.STRING);
 	}
 
-	public Response<String> configGet(String pattern) {
+	public Response<List<String>> configGet(String pattern) {
 		client.configGet(pattern);
-		return getResponse(BuilderFactory.STRING);
+		return getResponse(BuilderFactory.STRING_LIST);
 	}
 
 	public Response<String> configSet(String parameter, String value) {

File: src/main/java/redis/clients/jedis/ShardedJedis.java
Patch:
@@ -606,13 +606,13 @@ public void close() {
       for (Jedis jedis : getAllShards()) {
         if (jedis.getClient().isBroken()) {
           broken = true;
+          break;
         }
       }
 
       if (broken) {
         dataSource.returnBrokenResource(this);
       } else {
-        this.resetState();
         dataSource.returnResource(this);
       }
 

File: src/main/java/redis/clients/jedis/ShardedJedis.java
Patch:
@@ -612,7 +612,6 @@ public void close() {
       if (broken) {
         dataSource.returnBrokenResource(this);
       } else {
-        this.resetState();
         dataSource.returnResource(this);
       }
 

File: src/main/java/redis/clients/jedis/Transaction.java
Patch:
@@ -41,6 +41,7 @@ public List<Object> exec() {
 	// Discard QUEUED or ERROR
 	client.getMany(getPipelinedResponseLength());
 	client.exec();
+	inTransaction = false;
 
 	List<Object> unformatted = client.getObjectMultiBulkReply();
 	if (unformatted == null) {
@@ -61,6 +62,7 @@ public List<Response<?>> execGetResponse() {
 	// Discard QUEUED or ERROR
 	client.getMany(getPipelinedResponseLength());
 	client.exec();
+	inTransaction = false;
 
 	List<Object> unformatted = client.getObjectMultiBulkReply();
 	if (unformatted == null) {

File: src/main/java/redis/clients/jedis/Transaction.java
Patch:
@@ -41,6 +41,7 @@ public List<Object> exec() {
 	// Discard QUEUED or ERROR
 	client.getMany(getPipelinedResponseLength());
 	client.exec();
+	inTransaction = false;
 
 	List<Object> unformatted = client.getObjectMultiBulkReply();
 	if (unformatted == null) {
@@ -61,6 +62,7 @@ public List<Response<?>> execGetResponse() {
 	// Discard QUEUED or ERROR
 	client.getMany(getPipelinedResponseLength());
 	client.exec();
+	inTransaction = false;
 
 	List<Object> unformatted = client.getObjectMultiBulkReply();
 	if (unformatted == null) {

File: src/main/java/redis/clients/jedis/Jedis.java
Patch:
@@ -19,7 +19,7 @@
 
 public class Jedis extends BinaryJedis implements JedisCommands,
 	MultiKeyCommands, AdvancedJedisCommands, ScriptingCommands,
-	BasicCommands, ClusterCommands {
+	BasicCommands, ClusterCommands, SentinelCommands {
 
     protected Pool<Jedis> dataSource = null;
 

File: src/main/java/redis/clients/jedis/Connection.java
Patch:
@@ -155,8 +155,8 @@ public void disconnect() {
 	if (isConnected()) {
 	    try {
 		inputStream.close();
-		outputStream.close();
 		if (!socket.isClosed()) {
+		    outputStream.close();
 		    socket.close();
 		}
 	    } catch (IOException ex) {

File: src/main/java/redis/clients/jedis/Connection.java
Patch:
@@ -155,8 +155,8 @@ public void disconnect() {
 	if (isConnected()) {
 	    try {
 		inputStream.close();
-		outputStream.close();
 		if (!socket.isClosed()) {
+		    outputStream.close();
 		    socket.close();
 		}
 	    } catch (IOException ex) {

File: src/main/java/redis/clients/jedis/JedisClusterCommand.java
Patch:
@@ -72,7 +72,7 @@ private T runWithRetries(String key, int redirections,
 	    connection = null;
 
 	    // retry with random connection
-	    return runWithRetries(key, redirections--, true, asking);
+	    return runWithRetries(key, redirections - 1, true, asking);
 	} catch (JedisRedirectionException jre) {
 	    if (jre instanceof JedisAskDataException) {
 		asking = true;

File: src/main/java/redis/clients/jedis/BinaryJedisCommands.java
Patch:
@@ -220,13 +220,14 @@ Long linsert(byte[] key, Client.LIST_POSITION where, byte[] pivot,
 
 
     /**
-     * @deprecated This command has no meaning.
+     * @deprecated unusable command, this command will be removed in 3.0.0.
      */
     @Deprecated
     List<byte[]> blpop(byte[] arg);
 
+
     /**
-     * @deprecated This command has no meaning.
+     * @deprecated unusable command, this command will be removed in 3.0.0.
      */
     @Deprecated
     List<byte[]> brpop(byte[] arg);

File: src/main/java/redis/clients/jedis/Jedis.java
Patch:
@@ -1882,15 +1882,15 @@ public List<String> brpop(String... args) {
     }
 
     /**
-     * @deprecated unusable command
+     * @deprecated unusable command, this command will be removed in 3.0.0.
      */
     @Deprecated
     public List<String> blpop(String arg) {
 	return blpop(new String[]{arg});
     }
 
     /**
-     * @deprecated unusable command
+     * @deprecated unusable command, this command will be removed in 3.0.0.
      */
     @Deprecated
     public List<String> brpop(String arg) {

File: src/main/java/redis/clients/jedis/JedisCommands.java
Patch:
@@ -217,15 +217,15 @@ Long linsert(String key, Client.LIST_POSITION where, String pivot,
     Long rpushx(String key, String... string);
 
     /**
-     * @deprecated unusable command
+     * @deprecated unusable command, this will be removed in 3.0.0.
      */
     @Deprecated
     List<String> blpop(String arg);
     
     List<String> blpop(int timeout, String key);
 
     /**
-     * @deprecated unusable command
+     * @deprecated unusable command, this will be removed in 3.0.0.
      */
     @Deprecated
     List<String> brpop(String arg);

File: src/main/java/redis/clients/jedis/Connection.java
Patch:
@@ -42,7 +42,6 @@ public void setTimeoutInfinite() {
 	    if (!isConnected()) {
 		connect();
 	    }
-	    socket.setKeepAlive(true);
 	    socket.setSoTimeout(0);
 	} catch (SocketException ex) {
 	    broken = true;
@@ -53,7 +52,6 @@ public void setTimeoutInfinite() {
     public void rollbackTimeout() {
 	try {
 	    socket.setSoTimeout(timeout);
-	    socket.setKeepAlive(false);
 	} catch (SocketException ex) {
 	    broken = true;
 	    throw new JedisConnectionException(ex);

File: src/main/java/redis/clients/jedis/BinaryClient.java
Patch:
@@ -49,7 +49,7 @@ public boolean isInWatch() {
     }
 
     public BinaryClient() {
-	super(Protocol.DEFAULT_HOST, Protocol.DEFAULT_PORT);
+	super();
     }
     
     public BinaryClient(final String host) {

File: src/main/java/redis/clients/jedis/BinaryJedis.java
Patch:
@@ -28,7 +28,7 @@ public class BinaryJedis implements BasicCommands, BinaryJedisCommands,
     protected Pipeline pipeline = null;
     
     public BinaryJedis() {
-	this(Protocol.DEFAULT_HOST, Protocol.DEFAULT_PORT);
+	client = new Client();
     }
     
     public BinaryJedis(final String host) {

File: src/main/java/redis/clients/jedis/Client.java
Patch:
@@ -14,7 +14,7 @@
 public class Client extends BinaryClient implements Commands {
     
     public Client() {
-	super(Protocol.DEFAULT_HOST, Protocol.DEFAULT_PORT);
+	super();
     }
     
     public Client(final String host) {

File: src/main/java/redis/clients/jedis/Jedis.java
Patch:
@@ -23,7 +23,9 @@ public class Jedis extends BinaryJedis implements JedisCommands,
 
     protected Pool<Jedis> dataSource = null;
 
-    public Jedis() {}
+    public Jedis() {
+	super();
+    }
     
     public Jedis(final String host) {
 	super(host);

File: src/main/java/redis/clients/util/JedisClusterCRC16.java
Patch:
@@ -59,7 +59,7 @@ public static int getCRC16(byte[] bytes) {
     }
 
     public static int getCRC16(String key) {
-	return getCRC16(key.getBytes());
+	return getCRC16(SafeEncoder.encode(key));
     }
 
 }
\ No newline at end of file

File: src/test/java/redis/clients/jedis/tests/utils/JedisClusterCRC16Test.java
Patch:
@@ -9,6 +9,7 @@
 import org.junit.Test;
 
 import redis.clients.util.JedisClusterCRC16;
+import redis.clients.util.SafeEncoder;
 
 public class JedisClusterCRC16Test {
 
@@ -21,7 +22,7 @@ public void testGetCRC16() throws Exception {
 	    assertEquals(entry.getValue().intValue(), JedisClusterCRC16.getCRC16(entry.getKey()));
 	    
 	    // byte array version
-	    assertEquals(entry.getValue().intValue(), JedisClusterCRC16.getCRC16(entry.getKey().getBytes()));
+	    assertEquals(entry.getValue().intValue(), JedisClusterCRC16.getCRC16(SafeEncoder.encode(entry.getKey())));
 	}
     }
     

File: src/main/java/redis/clients/jedis/BinaryRedisPipeline.java
Patch:
@@ -209,9 +209,9 @@ Response<Set<Tuple>> zrevrangeByScoreWithScores(byte[] key, byte[] max,
     
     Response<Long> zlexcount(final byte[] key, final byte[] min, final byte[] max);
     
-    Response<Set<byte[]>> zrangeByLex(final byte[] key, final byte[] max, final byte[] min);
+    Response<Set<byte[]>> zrangeByLex(final byte[] key, final byte[] min, final byte[] max);
 
-    Response<Set<byte[]>> zrangeByLex(final byte[] key, final byte[] max, final byte[] min,
+    Response<Set<byte[]>> zrangeByLex(final byte[] key, final byte[] min, final byte[] max,
 	    int offset, int count);
     
     Response<Set<byte[]>> zrevrangeByLex(final byte[] key, final byte[] max, final byte[] min);

File: src/main/java/redis/clients/jedis/RedisPipeline.java
Patch:
@@ -187,9 +187,9 @@ Response<Set<Tuple>> zrevrangeByScoreWithScores(String key, double max,
     
     Response<Long> zlexcount(final String key, final String min, final String max);
     
-    Response<Set<String>> zrangeByLex(final String key, final String max, final String min);
+    Response<Set<String>> zrangeByLex(final String key, final String min, final String max);
 
-    Response<Set<String>> zrangeByLex(final String key, final String max, final String min,
+    Response<Set<String>> zrangeByLex(final String key, final String min, final String max,
 	    final int offset, final int count);
     
     Response<Set<String>> zrevrangeByLex(final String key, final String max, final String min);

File: src/main/java/redis/clients/jedis/Protocol.java
Patch:
@@ -18,6 +18,7 @@ public final class Protocol {
     private static final String ASK_RESPONSE = "ASK";
     private static final String MOVED_RESPONSE = "MOVED";
     private static final String CLUSTERDOWN_RESPONSE = "CLUSTERDOWN";
+    public static final String DEFAULT_HOST = "localhost";
     public static final int DEFAULT_PORT = 6379;
     public static final int DEFAULT_SENTINEL_PORT = 26379;
     public static final int DEFAULT_TIMEOUT = 2000;

File: src/main/java/redis/clients/util/JedisClusterCRC16.java
Patch:
@@ -59,7 +59,7 @@ public static int getCRC16(byte[] bytes) {
     }
 
     public static int getCRC16(String key) {
-	return getCRC16(key.getBytes());
+	return getCRC16(SafeEncoder.encode(key));
     }
 
 }
\ No newline at end of file

File: src/test/java/redis/clients/jedis/tests/utils/JedisClusterCRC16Test.java
Patch:
@@ -9,6 +9,7 @@
 import org.junit.Test;
 
 import redis.clients.util.JedisClusterCRC16;
+import redis.clients.util.SafeEncoder;
 
 public class JedisClusterCRC16Test {
 
@@ -21,7 +22,7 @@ public void testGetCRC16() throws Exception {
 	    assertEquals(entry.getValue().intValue(), JedisClusterCRC16.getCRC16(entry.getKey()));
 	    
 	    // byte array version
-	    assertEquals(entry.getValue().intValue(), JedisClusterCRC16.getCRC16(entry.getKey().getBytes()));
+	    assertEquals(entry.getValue().intValue(), JedisClusterCRC16.getCRC16(SafeEncoder.encode(entry.getKey())));
 	}
     }
     

File: src/main/java/redis/clients/jedis/BinaryRedisPipeline.java
Patch:
@@ -209,9 +209,9 @@ Response<Set<Tuple>> zrevrangeByScoreWithScores(byte[] key, byte[] max,
     
     Response<Long> zlexcount(final byte[] key, final byte[] min, final byte[] max);
     
-    Response<Set<byte[]>> zrangeByLex(final byte[] key, final byte[] max, final byte[] min);
+    Response<Set<byte[]>> zrangeByLex(final byte[] key, final byte[] min, final byte[] max);
 
-    Response<Set<byte[]>> zrangeByLex(final byte[] key, final byte[] max, final byte[] min,
+    Response<Set<byte[]>> zrangeByLex(final byte[] key, final byte[] min, final byte[] max,
 	    int offset, int count);
     
     Response<Long> zremrangeByLex(final byte[] key, final byte[] min, final byte[] max);

File: src/main/java/redis/clients/jedis/RedisPipeline.java
Patch:
@@ -187,9 +187,9 @@ Response<Set<Tuple>> zrevrangeByScoreWithScores(String key, double max,
     
     Response<Long> zlexcount(final String key, final String min, final String max);
     
-    Response<Set<String>> zrangeByLex(final String key, final String max, final String min);
+    Response<Set<String>> zrangeByLex(final String key, final String min, final String max);
 
-    Response<Set<String>> zrangeByLex(final String key, final String max, final String min,
+    Response<Set<String>> zrangeByLex(final String key, final String min, final String max,
 	    final int offset, final int count);
     
     Response<Long> zremrangeByLex(final String key, final String start, final String end);

File: src/test/java/redis/clients/jedis/tests/commands/TransactionCommandsTest.java
Patch:
@@ -4,7 +4,6 @@
 import java.net.UnknownHostException;
 import java.util.ArrayList;
 import java.util.Arrays;
-import java.util.HashMap;
 import java.util.List;
 import java.util.Set;
 

File: src/main/java/redis/clients/jedis/Jedis.java
Patch:
@@ -3388,7 +3388,7 @@ public Long pubsubNumPat() {
     public Map<String, String> pubsubNumSub(String... channels) {
 	checkIsInMulti();
 	client.pubsubNumSub(channels);
-	return BuilderFactory.STRING_MAP
+	return BuilderFactory.PUBSUB_NUMSUB_MAP
 		.build(client.getBinaryMultiBulkReply());
     }
 

File: src/main/java/redis/clients/jedis/Jedis.java
Patch:
@@ -3388,7 +3388,7 @@ public Long pubsubNumPat() {
     public Map<String, String> pubsubNumSub(String... channels) {
 	checkIsInMulti();
 	client.pubsubNumSub(channels);
-	return BuilderFactory.STRING_MAP
+	return BuilderFactory.PUBSUB_NUMSUB_MAP
 		.build(client.getBinaryMultiBulkReply());
     }
 

File: src/main/java/redis/clients/jedis/BuilderFactory.java
Patch:
@@ -9,6 +9,7 @@
 import java.util.Map;
 import java.util.Set;
 
+import redis.clients.util.JedisByteHashMap;
 import redis.clients.util.SafeEncoder;
 
 public class BuilderFactory {
@@ -170,7 +171,7 @@ public String toString() {
 	@SuppressWarnings("unchecked")
 	public Map<byte[], byte[]> build(Object data) {
 	    final List<byte[]> flatHash = (List<byte[]>) data;
-	    final Map<byte[], byte[]> hash = new HashMap<byte[], byte[]>();
+	    final Map<byte[], byte[]> hash = new JedisByteHashMap();
 	    final Iterator<byte[]> iterator = flatHash.iterator();
 	    while (iterator.hasNext()) {
 		hash.put(iterator.next(), iterator.next());

File: src/main/java/redis/clients/jedis/BuilderFactory.java
Patch:
@@ -9,6 +9,7 @@
 import java.util.Map;
 import java.util.Set;
 
+import redis.clients.util.JedisByteHashMap;
 import redis.clients.util.SafeEncoder;
 
 public class BuilderFactory {
@@ -170,7 +171,7 @@ public String toString() {
 	@SuppressWarnings("unchecked")
 	public Map<byte[], byte[]> build(Object data) {
 	    final List<byte[]> flatHash = (List<byte[]>) data;
-	    final Map<byte[], byte[]> hash = new HashMap<byte[], byte[]>();
+	    final Map<byte[], byte[]> hash = new JedisByteHashMap();
 	    final Iterator<byte[]> iterator = flatHash.iterator();
 	    while (iterator.hasNext()) {
 		hash.put(iterator.next(), iterator.next());

File: src/main/java/redis/clients/jedis/BinaryRedisPipeline.java
Patch:
@@ -34,7 +34,7 @@ public interface BinaryRedisPipeline {
 
     Response<byte[]> getSet(byte[] key, byte[] value);
 
-    Response<Long> getrange(byte[] key, long startOffset, long endOffset);
+    Response<byte[]> getrange(byte[] key, long startOffset, long endOffset);
 
     Response<Long> hdel(byte[] key, byte[]... field);
 

File: src/main/java/redis/clients/jedis/PipelineBase.java
Patch:
@@ -177,9 +177,9 @@ public Response<byte[]> getSet(byte[] key, byte[] value) {
 	return getResponse(BuilderFactory.BYTE_ARRAY);
     }
 
-    public Response<Long> getrange(byte[] key, long startOffset, long endOffset) {
+    public Response<byte[]> getrange(byte[] key, long startOffset, long endOffset) {
 	getClient(key).getrange(key, startOffset, endOffset);
-	return getResponse(BuilderFactory.LONG);
+	return getResponse(BuilderFactory.BYTE_ARRAY);
     }
 
     public Response<Long> hdel(String key, String... field) {

File: src/main/java/redis/clients/jedis/BinaryJedisCommands.java
Patch:
@@ -115,6 +115,8 @@ public interface BinaryJedisCommands {
 
     byte[] srandmember(byte[] key);
 
+    List<byte[]> srandmember(final byte[] key, final int count);
+
     Long strlen(byte[] key);
 
     Long zadd(byte[] key, double score, byte[] member);

File: src/main/java/redis/clients/jedis/JedisCommands.java
Patch:
@@ -113,6 +113,8 @@ String set(String key, String value, String nxxx,
 
     String srandmember(String key);
 
+    List<String> srandmember(String key, int count);
+
     Long strlen(String key);
 
     Long zadd(String key, double score, String member);

File: src/main/java/redis/clients/jedis/Queable.java
Patch:
@@ -25,10 +25,10 @@ protected <T> Response<T> getResponse(Builder<T> builder) {
     }
 
     protected boolean hasPipelinedResponse() {
-    	return pipelinedResponses.size() > 0;
+	return pipelinedResponses.size() > 0;
     }
-    
+
     protected int getPipelinedResponseLength() {
-    	return pipelinedResponses.size();
+	return pipelinedResponses.size();
     }
 }

File: src/main/java/redis/clients/jedis/AdvancedBinaryJedisCommands.java
Patch:
@@ -1,6 +1,5 @@
 package redis.clients.jedis;
 
-
 import java.util.List;
 
 public interface AdvancedBinaryJedisCommands {

File: src/main/java/redis/clients/jedis/AdvancedJedisCommands.java
Patch:
@@ -1,9 +1,8 @@
 package redis.clients.jedis;
 
-import redis.clients.util.Slowlog;
-
 import java.util.List;
 
+import redis.clients.util.Slowlog;
 
 public interface AdvancedJedisCommands {
     List<String> configGet(String pattern);

File: src/main/java/redis/clients/jedis/BasicCommands.java
Patch:
@@ -27,7 +27,7 @@ public interface BasicCommands {
     String shutdown();
 
     String info();
-    
+
     String info(String section);
 
     String slaveof(String host, int port);
@@ -39,6 +39,6 @@ public interface BasicCommands {
     String debug(DebugParams params);
 
     String configResetStat();
-    
+
     Long waitReplicas(int replicas, long timeout);
 }

File: src/main/java/redis/clients/jedis/BasicRedisPipeline.java
Patch:
@@ -1,5 +1,6 @@
 package redis.clients.jedis;
 
+import java.util.List;
 
 /**
  * Pipelined responses for all of the low level, non key related commands
@@ -25,6 +26,8 @@ public interface BasicRedisPipeline {
     Response<String> flushAll();
 
     Response<String> info();
+    
+    Response<List<String>> time();
 
     Response<Long> dbSize();
 

File: src/main/java/redis/clients/jedis/BinaryScriptingCommands.java
Patch:
@@ -1,14 +1,13 @@
 package redis.clients.jedis;
 
-
 import java.util.List;
 
 public interface BinaryScriptingCommands {
 
     Object eval(byte[] script, byte[] keyCount, byte[]... params);
 
     Object eval(byte[] script, int keyCount, byte[]... params);
-    
+
     Object eval(byte[] script, List<byte[]> keys, List<byte[]> args);
 
     Object eval(byte[] script);

File: src/main/java/redis/clients/jedis/exceptions/JedisConnectionException.java
Patch:
@@ -4,14 +4,14 @@ public class JedisConnectionException extends JedisException {
     private static final long serialVersionUID = 3878126572474819403L;
 
     public JedisConnectionException(String message) {
-        super(message);
+	super(message);
     }
 
     public JedisConnectionException(Throwable cause) {
-        super(cause);
+	super(cause);
     }
 
     public JedisConnectionException(String message, Throwable cause) {
-        super(message, cause);
+	super(message, cause);
     }
 }

File: src/main/java/redis/clients/jedis/exceptions/JedisDataException.java
Patch:
@@ -4,14 +4,14 @@ public class JedisDataException extends JedisException {
     private static final long serialVersionUID = 3878126572474819403L;
 
     public JedisDataException(String message) {
-        super(message);
+	super(message);
     }
 
     public JedisDataException(Throwable cause) {
-        super(cause);
+	super(cause);
     }
 
     public JedisDataException(String message, Throwable cause) {
-        super(message, cause);
+	super(message, cause);
     }
 }

File: src/main/java/redis/clients/util/ShardInfo.java
Patch:
@@ -7,14 +7,14 @@ public ShardInfo() {
     }
 
     public ShardInfo(int weight) {
-        this.weight = weight;
+	this.weight = weight;
     }
 
     public int getWeight() {
-        return this.weight;
+	return this.weight;
     }
 
     protected abstract T createResource();
-    
+
     public abstract String getName();
 }

File: src/test/java/redis/clients/jedis/tests/BuilderFactoryTest.java
Patch:
@@ -8,7 +8,7 @@
 public class BuilderFactoryTest extends Assert {
     @Test
     public void buildDouble() {
-        Double build = BuilderFactory.DOUBLE.build("1.0".getBytes());
-        assertEquals(new Double(1.0), build);
+	Double build = BuilderFactory.DOUBLE.build("1.0".getBytes());
+	assertEquals(new Double(1.0), build);
     }
 }
\ No newline at end of file

File: src/test/java/redis/clients/jedis/tests/benchmark/GetSetBenchmark.java
Patch:
@@ -9,7 +9,7 @@
 import redis.clients.jedis.tests.HostAndPortUtil;
 
 public class GetSetBenchmark {
-	private static HostAndPort hnp = HostAndPortUtil.getRedisServers().get(0);
+    private static HostAndPort hnp = HostAndPortUtil.getRedisServers().get(0);
     private static final int TOTAL_OPERATIONS = 100000;
 
     public static void main(String[] args) throws UnknownHostException,

File: src/test/java/redis/clients/jedis/tests/commands/ConnectionHandlingCommandsTest.java
Patch:
@@ -11,12 +11,12 @@ public class ConnectionHandlingCommandsTest extends JedisCommandTestBase {
 
     @Test
     public void quit() {
-        assertEquals("OK", jedis.quit());
+	assertEquals("OK", jedis.quit());
     }
 
     @Test
     public void binary_quit() {
-        BinaryJedis bj = new BinaryJedis(hnp.getHost());
-        assertEquals("OK", bj.quit());
+	BinaryJedis bj = new BinaryJedis(hnp.getHost());
+	assertEquals("OK", bj.quit());
     }
 }
\ No newline at end of file

File: src/main/java/redis/clients/jedis/JedisCluster.java
Patch:
@@ -394,7 +394,7 @@ public Long hlen(final String key) {
 		maxRedirections) {
 	    @Override
 	    public Long execute(Jedis connection) {
-		return connection.hdel(key);
+		return connection.hlen(key);
 	    }
 	}.run(key);
     }

File: src/main/java/redis/clients/jedis/JedisCluster.java
Patch:
@@ -394,7 +394,7 @@ public Long hlen(final String key) {
 		maxRedirections) {
 	    @Override
 	    public Long execute(Jedis connection) {
-		return connection.hdel(key);
+		return connection.hlen(key);
 	    }
 	}.run(key);
     }

File: src/test/java/redis/clients/jedis/tests/HostAndPortUtil.java
Patch:
@@ -23,6 +23,7 @@ public class HostAndPortUtil {
 	sentinelHostAndPortList.add(new HostAndPort("localhost", Protocol.DEFAULT_SENTINEL_PORT));
 	sentinelHostAndPortList.add(new HostAndPort("localhost", Protocol.DEFAULT_SENTINEL_PORT + 1));
 	sentinelHostAndPortList.add(new HostAndPort("localhost", Protocol.DEFAULT_SENTINEL_PORT + 2));
+	sentinelHostAndPortList.add(new HostAndPort("localhost", Protocol.DEFAULT_SENTINEL_PORT + 3));
 
 	clusterHostAndPortList.add(new HostAndPort("localhost", 7379));
 	clusterHostAndPortList.add(new HostAndPort("localhost", 7380));

File: src/test/java/redis/clients/jedis/tests/utils/JedisSentinelTestUtil.java
Patch:
@@ -8,7 +8,8 @@
 import redis.clients.jedis.tests.utils.FailoverAbortedException;
 
 public class JedisSentinelTestUtil {
-    public static HostAndPort waitForNewPromotedMaster(Jedis sentinelJedis) 
+    public static HostAndPort waitForNewPromotedMaster(final String masterName, 
+        final Jedis sentinelJedis, final Jedis commandJedis) 
 	    throws InterruptedException {
 	
 	final AtomicReference<String> newmaster = new AtomicReference<String>(
@@ -47,6 +48,7 @@ public void onPUnsubscribe(String pattern, int subscribedChannels) {
 
 	    @Override
 	    public void onPSubscribe(String pattern, int subscribedChannels) {
+        commandJedis.sentinelFailover(masterName);
 	    }
 	}, "*");
 

File: src/main/java/redis/clients/jedis/Jedis.java
Patch:
@@ -1116,8 +1116,8 @@ public String lpop(final String key) {
 
     /**
      * Atomically return and remove the first (LPOP) or last (RPOP) element of
-     * the list. For example if the list contains the elements "a","b","c" LPOP
-     * will return "a" and the list will become "b","c".
+     * the list. For example if the list contains the elements "a","b","c" RPOP
+     * will return "c" and the list will become "a","b".
      * <p>
      * If the key does not exist or the list is already empty the special value
      * 'nil' is returned.

File: src/test/java/redis/clients/jedis/tests/JedisClusterNodeInformationParserTest.java
Patch:
@@ -17,7 +17,7 @@ public void setUp() {
 
     @Test
     public void testParseNodeMyself() {
-	String nodeInfo = "9b0d2ab38ee31482c95fdb2c7847a0d40e88d518 :0 myself,master - 0 0 1 connected 0-5460";
+	String nodeInfo = "9b0d2ab38ee31482c95fdb2c7847a0d40e88d518 :7379 myself,master - 0 0 1 connected 0-5460";
 	HostAndPort current = new HostAndPort("localhost", 7379);
 	ClusterNodeInformation clusterNodeInfo = parser
 		.parse(nodeInfo, current);
@@ -44,7 +44,7 @@ public void testParseNormalState() {
 
     @Test
     public void testParseSlotBeingMigrated() {
-	String nodeInfo = "5f4a2236d00008fba7ac0dd24b95762b446767bd :0 myself,master - 0 0 1 connected 0-5459 [5460->-5f4a2236d00008fba7ac0dd24b95762b446767bd] [5461-<-5f4a2236d00008fba7ac0dd24b95762b446767bd]";
+	String nodeInfo = "5f4a2236d00008fba7ac0dd24b95762b446767bd :7379 myself,master - 0 0 1 connected 0-5459 [5460->-5f4a2236d00008fba7ac0dd24b95762b446767bd] [5461-<-5f4a2236d00008fba7ac0dd24b95762b446767bd]";
 	HostAndPort current = new HostAndPort("localhost", 7379);
 	ClusterNodeInformation clusterNodeInfo = parser
 		.parse(nodeInfo, current);

File: src/test/java/redis/clients/jedis/tests/JedisClusterNodeInformationParserTest.java
Patch:
@@ -17,7 +17,7 @@ public void setUp() {
 
     @Test
     public void testParseNodeMyself() {
-	String nodeInfo = "9b0d2ab38ee31482c95fdb2c7847a0d40e88d518 :0 myself,master - 0 0 1 connected 0-5460";
+	String nodeInfo = "9b0d2ab38ee31482c95fdb2c7847a0d40e88d518 :7379 myself,master - 0 0 1 connected 0-5460";
 	HostAndPort current = new HostAndPort("localhost", 7379);
 	ClusterNodeInformation clusterNodeInfo = parser
 		.parse(nodeInfo, current);
@@ -44,7 +44,7 @@ public void testParseNormalState() {
 
     @Test
     public void testParseSlotBeingMigrated() {
-	String nodeInfo = "5f4a2236d00008fba7ac0dd24b95762b446767bd :0 myself,master - 0 0 1 connected 0-5459 [5460->-5f4a2236d00008fba7ac0dd24b95762b446767bd] [5461-<-5f4a2236d00008fba7ac0dd24b95762b446767bd]";
+	String nodeInfo = "5f4a2236d00008fba7ac0dd24b95762b446767bd :7379 myself,master - 0 0 1 connected 0-5459 [5460->-5f4a2236d00008fba7ac0dd24b95762b446767bd] [5461-<-5f4a2236d00008fba7ac0dd24b95762b446767bd]";
 	HostAndPort current = new HostAndPort("localhost", 7379);
 	ClusterNodeInformation clusterNodeInfo = parser
 		.parse(nodeInfo, current);

File: src/main/java/redis/clients/util/JedisClusterCRC16.java
Patch:
@@ -30,7 +30,7 @@ public static int getSlot(byte[] key) {
             }
         }
         if (s > -1 && e > -1 && e != s + 1) {
-            return getCRC16(key, s, e) % 16384;
+            return getCRC16(key, s+1, e) % 16384;
         }
         return getCRC16(key, 0, key.length) % 16384;
     }

File: src/main/java/redis/clients/jedis/BinaryJedis.java
Patch:
@@ -3166,11 +3166,11 @@ public Long getDB() {
      */
     public Object eval(byte[] script, List<byte[]> keys, List<byte[]> args) {
 	client.setTimeoutInfinite();
-	client.eval(script, toByteArray(keys.size()), getParams(keys, args));
+	client.eval(script, toByteArray(keys.size()), getParamsWithBinary(keys, args));
 	return client.getOne();
     }
 
-    protected static byte[][] getParams(List<byte[]> keys, List<byte[]> args) {
+    protected static byte[][] getParamsWithBinary(List<byte[]> keys, List<byte[]> args) {
 	int keyCount = keys.size();
 	int argCount = args.size();
 	byte[][] params = new byte[keyCount + args.size()][];

File: src/main/java/redis/clients/jedis/MultiKeyPipelineBase.java
Patch:
@@ -486,7 +486,7 @@ public Response<Object> eval(byte[] script, byte[] keyCount, byte[]... params) {
     }
     
     public Response<Object> eval(byte[] script, List<byte[]> keys, List<byte[]> args) {
-	byte[][] argv = BinaryJedis.getParams(keys, args);
+	byte[][] argv = BinaryJedis.getParamsWithBinary(keys, args);
 	return this.eval(script, keys.size(), argv);
     }
     
@@ -500,7 +500,7 @@ public Response<Object> evalsha(byte[] sha1) {
     }
     
     public Response<Object> evalsha(byte[] sha1, List<byte[]> keys, List<byte[]> args) {
-	byte[][] argv = BinaryJedis.getParams(keys, args);
+	byte[][] argv = BinaryJedis.getParamsWithBinary(keys, args);
 	return this.evalsha(sha1, keys.size(), argv);
     }
     

File: src/main/java/redis/clients/jedis/BinaryRedisPipeline.java
Patch:
@@ -34,7 +34,7 @@ public interface BinaryRedisPipeline {
 
     Response<byte[]> getSet(byte[] key, byte[] value);
 
-    Response<Long> getrange(byte[] key, long startOffset, long endOffset);
+    Response<byte[]> getrange(byte[] key, long startOffset, long endOffset);
 
     Response<Long> hdel(byte[] key, byte[]... field);
 

File: src/main/java/redis/clients/jedis/PipelineBase.java
Patch:
@@ -159,9 +159,9 @@ public Response<byte[]> getSet(byte[] key, byte[] value) {
 	return getResponse(BuilderFactory.BYTE_ARRAY);
     }
 
-    public Response<Long> getrange(byte[] key, long startOffset, long endOffset) {
+    public Response<byte[]> getrange(byte[] key, long startOffset, long endOffset) {
 	getClient(key).getrange(key, startOffset, endOffset);
-	return getResponse(BuilderFactory.LONG);
+	return getResponse(BuilderFactory.BYTE_ARRAY);
     }
 
     public Response<Long> hdel(String key, String... field) {

File: src/main/java/redis/clients/jedis/JedisCluster.java
Patch:
@@ -27,7 +27,7 @@ public JedisCluster(Set<HostAndPort> nodes) {
 
     public JedisCluster(Set<HostAndPort> jedisClusterNode, int timeout,
 	    int maxRedirections) {
-	this.connectionHandler = new JedisSlotBasedConnectionHandler(
+	this.connectionHandler = new JedisSlotBasedConnectionGuaranteedConnectionHandler(
 		jedisClusterNode);
 	this.timeout = timeout;
 	this.maxRedirections = maxRedirections;

File: src/main/java/redis/clients/jedis/JedisCluster.java
Patch:
@@ -1129,7 +1129,7 @@ public Long del(final String key) {
 	    public Long execute(Jedis connection) {
 		return connection.del(key);
 	    }
-	}.run(null);
+	}.run(key);
     }
 
     @Override

File: src/main/java/redis/clients/jedis/JedisCluster.java
Patch:
@@ -27,7 +27,7 @@ public JedisCluster(Set<HostAndPort> nodes) {
 
     public JedisCluster(Set<HostAndPort> jedisClusterNode, int timeout,
 	    int maxRedirections) {
-	this.connectionHandler = new JedisSlotBasedConnectionHandler(
+	this.connectionHandler = new JedisSlotBasedConnectionGuaranteedConnectionHandler(
 		jedisClusterNode);
 	this.timeout = timeout;
 	this.maxRedirections = maxRedirections;

File: src/main/java/redis/clients/jedis/JedisSlotBasedConnectionHandler.java
Patch:
@@ -40,7 +40,7 @@ public Jedis getConnectionFromSlot(int slot) {
 	    connectionPool = getRandomConnection();
 	}
 	currentConnection = connectionPool.getResource();
-	return connectionPool.getResource();
+	return currentConnection;
     }
 
 }

File: src/main/java/redis/clients/jedis/JedisSlotBasedConnectionHandler.java
Patch:
@@ -40,7 +40,7 @@ public Jedis getConnectionFromSlot(int slot) {
 	    connectionPool = getRandomConnection();
 	}
 	currentConnection = connectionPool.getResource();
-	return connectionPool.getResource();
+	return currentConnection;
     }
 
 }

File: src/test/java/redis/clients/jedis/tests/JedisClusterTest.java
Patch:
@@ -44,7 +44,6 @@ public void setUp() throws InterruptedException {
 	// ---- configure cluster
 
 	// add nodes to cluster
-	node1.clusterMeet("127.0.0.1", nodeInfo1.getPort());
 	node1.clusterMeet("127.0.0.1", nodeInfo2.getPort());
 	node1.clusterMeet("127.0.0.1", nodeInfo3.getPort());
 

File: src/test/java/redis/clients/jedis/tests/JedisClusterTest.java
Patch:
@@ -44,7 +44,6 @@ public void setUp() throws InterruptedException {
 	// ---- configure cluster
 
 	// add nodes to cluster
-	node1.clusterMeet("127.0.0.1", nodeInfo1.getPort());
 	node1.clusterMeet("127.0.0.1", nodeInfo2.getPort());
 	node1.clusterMeet("127.0.0.1", nodeInfo3.getPort());
 

File: src/main/java/redis/clients/jedis/Jedis.java
Patch:
@@ -3245,10 +3245,10 @@ public Long pubSubNumPat() {
 	return client.getIntegerReply();
     }
 
-    public Map<String, Long> pubSubNumSub(String... channels) {
+    public Map<String, String> pubSubNumSub(String... channels) {
 	checkIsInMulti();
   	client.pubSubNumSub(channels);
-  	return BuilderFactory.STRING_LONG_MAP
+  	return BuilderFactory.STRING_MAP
   		.build(client.getBinaryMultiBulkReply());
     }
 }

File: src/main/java/redis/clients/jedis/Protocol.java
Patch:
@@ -200,7 +200,7 @@ public static final byte[] toByteArray(final double value) {
     }
 
     public static enum Command {
-	PING, SET, GET, QUIT, EXISTS, DEL, TYPE, FLUSHDB, KEYS, RANDOMKEY, RENAME, RENAMENX, RENAMEX, DBSIZE, EXPIRE, EXPIREAT, TTL, SELECT, MOVE, FLUSHALL, GETSET, MGET, SETNX, SETEX, MSET, MSETNX, DECRBY, DECR, INCRBY, INCR, APPEND, SUBSTR, HSET, HGET, HSETNX, HMSET, HMGET, HINCRBY, HEXISTS, HDEL, HLEN, HKEYS, HVALS, HGETALL, RPUSH, LPUSH, LLEN, LRANGE, LTRIM, LINDEX, LSET, LREM, LPOP, RPOP, RPOPLPUSH, SADD, SMEMBERS, SREM, SPOP, SMOVE, SCARD, SISMEMBER, SINTER, SINTERSTORE, SUNION, SUNIONSTORE, SDIFF, SDIFFSTORE, SRANDMEMBER, ZADD, ZRANGE, ZREM, ZINCRBY, ZRANK, ZREVRANK, ZREVRANGE, ZCARD, ZSCORE, MULTI, DISCARD, EXEC, WATCH, UNWATCH, SORT, BLPOP, BRPOP, AUTH, SUBSCRIBE, PUBLISH, UNSUBSCRIBE, PSUBSCRIBE, PUNSUBSCRIBE, ZCOUNT, ZRANGEBYSCORE, ZREVRANGEBYSCORE, ZREMRANGEBYRANK, ZREMRANGEBYSCORE, ZUNIONSTORE, ZINTERSTORE, SAVE, BGSAVE, BGREWRITEAOF, LASTSAVE, SHUTDOWN, INFO, MONITOR, SLAVEOF, CONFIG, STRLEN, SYNC, LPUSHX, PERSIST, RPUSHX, ECHO, LINSERT, DEBUG, BRPOPLPUSH, SETBIT, GETBIT, SETRANGE, GETRANGE, EVAL, EVALSHA, SCRIPT, SLOWLOG, OBJECT, BITCOUNT, BITOP, SENTINEL, DUMP, RESTORE, PEXPIRE, PEXPIREAT, PTTL, INCRBYFLOAT, PSETEX, CLIENT, TIME, MIGRATE, HINCRBYFLOAT, SCAN, HSCAN, SSCAN, ZSCAN, WAIT, CLUSTER, ASKING;
+	PING, SET, GET, QUIT, EXISTS, DEL, TYPE, FLUSHDB, KEYS, RANDOMKEY, RENAME, RENAMENX, RENAMEX, DBSIZE, EXPIRE, EXPIREAT, TTL, SELECT, MOVE, FLUSHALL, GETSET, MGET, SETNX, SETEX, MSET, MSETNX, DECRBY, DECR, INCRBY, INCR, APPEND, SUBSTR, HSET, HGET, HSETNX, HMSET, HMGET, HINCRBY, HEXISTS, HDEL, HLEN, HKEYS, HVALS, HGETALL, RPUSH, LPUSH, LLEN, LRANGE, LTRIM, LINDEX, LSET, LREM, LPOP, RPOP, RPOPLPUSH, SADD, SMEMBERS, SREM, SPOP, SMOVE, SCARD, SISMEMBER, SINTER, SINTERSTORE, SUNION, SUNIONSTORE, SDIFF, SDIFFSTORE, SRANDMEMBER, ZADD, ZRANGE, ZREM, ZINCRBY, ZRANK, ZREVRANK, ZREVRANGE, ZCARD, ZSCORE, MULTI, DISCARD, EXEC, WATCH, UNWATCH, SORT, BLPOP, BRPOP, AUTH, SUBSCRIBE, PUBLISH, UNSUBSCRIBE, PSUBSCRIBE, PUNSUBSCRIBE, PUBSUB, ZCOUNT, ZRANGEBYSCORE, ZREVRANGEBYSCORE, ZREMRANGEBYRANK, ZREMRANGEBYSCORE, ZUNIONSTORE, ZINTERSTORE, SAVE, BGSAVE, BGREWRITEAOF, LASTSAVE, SHUTDOWN, INFO, MONITOR, SLAVEOF, CONFIG, STRLEN, SYNC, LPUSHX, PERSIST, RPUSHX, ECHO, LINSERT, DEBUG, BRPOPLPUSH, SETBIT, GETBIT, SETRANGE, GETRANGE, EVAL, EVALSHA, SCRIPT, SLOWLOG, OBJECT, BITCOUNT, BITOP, SENTINEL, DUMP, RESTORE, PEXPIRE, PEXPIREAT, PTTL, INCRBYFLOAT, PSETEX, CLIENT, TIME, MIGRATE, HINCRBYFLOAT, SCAN, HSCAN, SSCAN, ZSCAN, WAIT, CLUSTER, ASKING;
 
 	public final byte[] raw;
 

File: src/main/java/redis/clients/jedis/BinaryJedis.java
Patch:
@@ -3140,12 +3140,13 @@ public Object eval(byte[] script, List<byte[]> keys, List<byte[]> args) {
 
     private byte[][] getParams(List<byte[]> keys, List<byte[]> args) {
 	int keyCount = keys.size();
+	int argCount = args.size();
 	byte[][] params = new byte[keyCount + args.size()][];
 
 	for (int i = 0; i < keyCount; i++)
 	    params[i] = keys.get(i);
 
-	for (int i = 0; i < keys.size(); i++)
+	for (int i = 0; i < argCount; i++)
 	    params[keyCount + i] = args.get(i);
 
 	return params;

File: src/test/java/redis/clients/jedis/tests/JedisSentinelPoolTest.java
Patch:
@@ -69,6 +69,7 @@ private void doSegFaultMaster(JedisSentinelPool pool)
 	}
 
 	waitForFailover(pool, oldMaster);
+	Thread.sleep(100);
 
 	jedis = pool.getResource();
 	assertEquals("PONG", jedis.ping());

File: src/main/java/redis/clients/jedis/BinaryJedis.java
Patch:
@@ -3140,12 +3140,13 @@ public Object eval(byte[] script, List<byte[]> keys, List<byte[]> args) {
 
     private byte[][] getParams(List<byte[]> keys, List<byte[]> args) {
 	int keyCount = keys.size();
+	int argCount = args.size();
 	byte[][] params = new byte[keyCount + args.size()][];
 
 	for (int i = 0; i < keyCount; i++)
 	    params[i] = keys.get(i);
 
-	for (int i = 0; i < keys.size(); i++)
+	for (int i = 0; i < argCount; i++)
 	    params[keyCount + i] = args.get(i);
 
 	return params;

File: src/test/java/redis/clients/jedis/tests/commands/PublishSubscribeCommandsTest.java
Patch:
@@ -529,8 +529,7 @@ public void onPSubscribe(String pattern, int subscribedChannels) {
         pubsub.unsubscribe();
     }
     
-    //@Test(expected = JedisConnectionException.class)
-    @Test
+    @Test(expected = JedisConnectionException.class)
     public void handleClientOutputBufferLimitForSubscribeTooSlow() throws InterruptedException {
         final Thread t = new Thread(new Runnable() {
             public void run() {
@@ -561,7 +560,7 @@ public void run() {
             public void onMessage(String channel, String message) {
             	try {
             		// wait 0.5 secs to slow down subscribe and client-output-buffer exceed
-            		System.out.println("channel - " + channel + " / message - " + message);
+            		//System.out.println("channel - " + channel + " / message - " + message);
 					Thread.sleep(500);
 				} catch (Exception e) {
 					try {

File: src/test/java/redis/clients/jedis/tests/ShardedJedisPoolTest.java
Patch:
@@ -11,12 +11,12 @@
 import org.junit.Before;
 import org.junit.Test;
 
+import redis.clients.jedis.HostAndPort;
 import redis.clients.jedis.Jedis;
 import redis.clients.jedis.JedisShardInfo;
 import redis.clients.jedis.ShardedJedis;
 import redis.clients.jedis.ShardedJedisPool;
 import redis.clients.jedis.exceptions.JedisConnectionException;
-import redis.clients.jedis.tests.HostAndPortUtil.HostAndPort;
 
 public class ShardedJedisPoolTest extends Assert {
     private static HostAndPort redis1 = HostAndPortUtil.getRedisServers()
@@ -29,8 +29,8 @@ public class ShardedJedisPoolTest extends Assert {
     @Before
     public void startUp() {
         shards = new ArrayList<JedisShardInfo>();
-        shards.add(new JedisShardInfo(redis1.host, redis1.port));
-        shards.add(new JedisShardInfo(redis2.host, redis2.port));
+        shards.add(new JedisShardInfo(redis1.getHost(), redis1.getPort()));
+        shards.add(new JedisShardInfo(redis2.getHost(), redis2.getPort()));
         shards.get(0).setPassword("foobared");
         shards.get(1).setPassword("foobared");
         Jedis j = new Jedis(shards.get(0));

File: src/test/java/redis/clients/jedis/tests/benchmark/GetSetBenchmark.java
Patch:
@@ -4,17 +4,17 @@
 import java.net.UnknownHostException;
 import java.util.Calendar;
 
+import redis.clients.jedis.HostAndPort;
 import redis.clients.jedis.Jedis;
 import redis.clients.jedis.tests.HostAndPortUtil;
-import redis.clients.jedis.tests.HostAndPortUtil.HostAndPort;
 
 public class GetSetBenchmark {
 	private static HostAndPort hnp = HostAndPortUtil.getRedisServers().get(0);
     private static final int TOTAL_OPERATIONS = 100000;
 
     public static void main(String[] args) throws UnknownHostException,
 	    IOException {
-	Jedis jedis = new Jedis(hnp.host, hnp.port);
+	Jedis jedis = new Jedis(hnp.getHost(), hnp.getPort());
 	jedis.connect();
 	jedis.auth("foobared");
 	jedis.flushAll();

File: src/test/java/redis/clients/jedis/tests/benchmark/HashingBenchmark.java
Patch:
@@ -7,11 +7,11 @@
 import java.util.Collection;
 import java.util.List;
 
+import redis.clients.jedis.HostAndPort;
 import redis.clients.jedis.Jedis;
 import redis.clients.jedis.JedisShardInfo;
 import redis.clients.jedis.ShardedJedis;
 import redis.clients.jedis.tests.HostAndPortUtil;
-import redis.clients.jedis.tests.HostAndPortUtil.HostAndPort;
 
 public class HashingBenchmark {
     private static HostAndPort hnp1 = HostAndPortUtil.getRedisServers().get(0);
@@ -21,10 +21,10 @@ public class HashingBenchmark {
     public static void main(String[] args) throws UnknownHostException,
             IOException {
         List<JedisShardInfo> shards = new ArrayList<JedisShardInfo>();
-        JedisShardInfo shard = new JedisShardInfo(hnp1.host, hnp1.port);
+        JedisShardInfo shard = new JedisShardInfo(hnp1.getHost(), hnp1.getPort());
         shard.setPassword("foobared");
         shards.add(shard);
-        shard = new JedisShardInfo(hnp2.host, hnp2.port);
+        shard = new JedisShardInfo(hnp2.getHost(), hnp2.getPort());
         shard.setPassword("foobared");
         shards.add(shard);
         ShardedJedis jedis = new ShardedJedis(shards);

File: src/test/java/redis/clients/jedis/tests/benchmark/PipelinedGetSetBenchmark.java
Patch:
@@ -4,18 +4,18 @@
 import java.net.UnknownHostException;
 import java.util.Calendar;
 
+import redis.clients.jedis.HostAndPort;
 import redis.clients.jedis.Jedis;
 import redis.clients.jedis.Pipeline;
 import redis.clients.jedis.tests.HostAndPortUtil;
-import redis.clients.jedis.tests.HostAndPortUtil.HostAndPort;
 
 public class PipelinedGetSetBenchmark {
     private static HostAndPort hnp = HostAndPortUtil.getRedisServers().get(0);
     private static final int TOTAL_OPERATIONS = 200000;
 
     public static void main(String[] args) throws UnknownHostException,
             IOException {
-        Jedis jedis = new Jedis(hnp.host, hnp.port);
+        Jedis jedis = new Jedis(hnp.getHost(), hnp.getPort());
         jedis.connect();
         jedis.auth("foobared");
         jedis.flushAll();

File: src/test/java/redis/clients/jedis/tests/benchmark/PoolBenchmark.java
Patch:
@@ -6,17 +6,17 @@
 
 import org.apache.commons.pool.impl.GenericObjectPool.Config;
 
+import redis.clients.jedis.HostAndPort;
 import redis.clients.jedis.Jedis;
 import redis.clients.jedis.JedisPool;
 import redis.clients.jedis.tests.HostAndPortUtil;
-import redis.clients.jedis.tests.HostAndPortUtil.HostAndPort;
 
 public class PoolBenchmark {
     private static HostAndPort hnp = HostAndPortUtil.getRedisServers().get(0);
     private static final int TOTAL_OPERATIONS = 100000;
 
     public static void main(String[] args) throws Exception {
-        Jedis j = new Jedis(hnp.host, hnp.port);
+        Jedis j = new Jedis(hnp.getHost(), hnp.getPort());
         j.connect();
         j.auth("foobared");
         j.flushAll();
@@ -30,7 +30,7 @@ public static void main(String[] args) throws Exception {
     }
 
     private static void withPool() throws Exception {
-        final JedisPool pool = new JedisPool(new Config(), hnp.host, hnp.port,
+        final JedisPool pool = new JedisPool(new Config(), hnp.getHost(), hnp.getPort(),
                 2000, "foobared");
         List<Thread> tds = new ArrayList<Thread>();
 

File: src/test/java/redis/clients/jedis/tests/commands/ConnectionHandlingCommandsTest.java
Patch:
@@ -3,8 +3,8 @@
 import org.junit.Test;
 
 import redis.clients.jedis.BinaryJedis;
+import redis.clients.jedis.HostAndPort;
 import redis.clients.jedis.tests.HostAndPortUtil;
-import redis.clients.jedis.tests.HostAndPortUtil.HostAndPort;
 
 public class ConnectionHandlingCommandsTest extends JedisCommandTestBase {
     protected static HostAndPort hnp = HostAndPortUtil.getRedisServers().get(0);
@@ -16,7 +16,7 @@ public void quit() {
 
     @Test
     public void binary_quit() {
-        BinaryJedis bj = new BinaryJedis(hnp.host);
+        BinaryJedis bj = new BinaryJedis(hnp.getHost());
         assertEquals("OK", bj.quit());
     }
 }
\ No newline at end of file

File: src/test/java/redis/clients/jedis/tests/commands/PublishSubscribeCommandsTest.java
Patch:
@@ -475,7 +475,7 @@ public void run() {
     @Test @Ignore
     public void subscribeWithoutConnecting() {
         try {
-            Jedis jedis = new Jedis(hnp.host, hnp.port);
+            Jedis jedis = new Jedis(hnp.getHost(), hnp.getPort());
             jedis.subscribe(new JedisPubSub() {
                 public void onMessage(String channel, String message) {
                 }

File: src/test/java/redis/clients/jedis/tests/commands/TransactionCommandsTest.java
Patch:
@@ -32,7 +32,7 @@ public class TransactionCommandsTest extends JedisCommandTestBase {
     public void setUp() throws Exception {
         super.setUp();
 
-        nj = new Jedis(hnp.host, hnp.port, 500);
+        nj = new Jedis(hnp.getHost(), hnp.getPort(), 500);
         nj.connect();
         nj.auth("foobared");
         nj.flushAll();

File: src/main/java/redis/clients/jedis/JedisSentinelPool.java
Patch:
@@ -53,6 +53,9 @@ public JedisSentinelPool(String masterName, Set<String> sentinels, final Config
     public JedisSentinelPool(String masterName, Set<String> sentinels, final Config poolConfig, int timeout, final String password,
                      final int database) {
     	this.poolConfig = poolConfig;
+    	this.timeout = timeout;
+    	this.password = password;
+    	this.database = database;
     	HostAndPort master = initSentinels(sentinels, masterName);
         initPool(master);    	        
     }

File: src/main/java/redis/clients/jedis/Protocol.java
Patch:
@@ -13,6 +13,7 @@
 public final class Protocol {
 
     public static final int DEFAULT_PORT = 6379;
+    public static final int DEFAULT_SENTINEL_PORT = 26379;
     public static final int DEFAULT_TIMEOUT = 2000;
     public static final int DEFAULT_DATABASE = 0;
 

File: src/test/java/redis/clients/jedis/tests/JedisSentinelTest.java
Patch:
@@ -49,7 +49,7 @@ public void sentinel() {
 	assertEquals("6379", masterHostAndPort.get(1));
 
 	List<Map<String, String>> slaves = j.sentinelSlaves(masterName);
-	assertEquals(1, slaves.size());
+	assertTrue(slaves.size() > 0);
 	assertEquals("6379", slaves.get(0).get("master-port"));
 
 	List<? extends Object> isMasterDownByAddr = j

File: src/main/java/redis/clients/jedis/Pipeline.java
Patch:
@@ -99,6 +99,7 @@ public List<Object> syncAndReturnAll() {
 
     public Response<String> discard() {
         client.discard();
+        currentMulti = null;
         return getResponse(BuilderFactory.STRING);
     }
 

File: src/main/java/redis/clients/jedis/Pipeline.java
Patch:
@@ -99,6 +99,7 @@ public List<Object> syncAndReturnAll() {
 
     public Response<String> discard() {
         client.discard();
+        currentMulti = null;
         return getResponse(BuilderFactory.STRING);
     }
 

File: src/main/java/redis/clients/jedis/PipelineBase.java
Patch:
@@ -649,8 +649,8 @@ public Response<String> type(byte[] key) {
         return getResponse(BuilderFactory.STRING);
     }
 
-    public Response<Long> zadd(String key, double score, String member) {
-        getClient(key).zadd(key, score, member);
+    public Response<Long> zadd(String key, Map<Double, String> scoreMembers) {
+        getClient(key).zadd(key, scoreMembers);
         return getResponse(BuilderFactory.LONG);
     }
 

File: src/main/java/redis/clients/jedis/MultiKeyBinaryRedisPipeline.java
Patch:
@@ -39,9 +39,9 @@ public interface MultiKeyBinaryRedisPipeline {
 
     Response<Long> smove(byte[] srckey, byte[] dstkey, byte[] member);
 
-    Response<List<byte[]>> sort(byte[] key, SortingParams sortingParameters, byte[] dstkey);
+    Response<Long> sort(byte[] key, SortingParams sortingParameters, byte[] dstkey);
 
-    Response<List<byte[]>> sort(byte[] key, byte[] dstkey);
+    Response<Long> sort(byte[] key, byte[] dstkey);
 
     Response<Set<byte[]>> sunion(byte[]... keys);
 

File: src/main/java/redis/clients/jedis/MultiKeyCommandsPipeline.java
Patch:
@@ -39,9 +39,9 @@ public interface MultiKeyCommandsPipeline {
 
     Response<Long> smove(String srckey, String dstkey, String member);
 
-    Response<List<String>> sort(String key, SortingParams sortingParameters, String dstkey);
+    Response<Long> sort(String key, SortingParams sortingParameters, String dstkey);
 
-    Response<List<String>> sort(String key, String dstkey);
+    Response<Long> sort(String key, String dstkey);
 
     Response<Set<String>> sunion(String... keys);
 

File: src/main/java/redis/clients/jedis/Jedis.java
Patch:
@@ -3072,7 +3072,7 @@ public String clientKill(final String client) {
     public String clientSetname(final String name) {
     	checkIsInMulti();
     	client.clientSetname(name);
-    	return client.getBulkReply();
+    	return client.getStatusCodeReply();
     }
     
     public String migrate(final String host, final int port, final String key, final int destinationDb, final int timeout) {

File: src/main/java/redis/clients/jedis/Protocol.java
Patch:
@@ -155,7 +155,7 @@ public static final byte[] toByteArray(final double value) {
 
     public static enum Command {
 	PING, SET, GET, QUIT, EXISTS, DEL, TYPE, FLUSHDB, KEYS, RANDOMKEY, RENAME, RENAMENX, RENAMEX, DBSIZE, EXPIRE, EXPIREAT, TTL, SELECT, MOVE, FLUSHALL, GETSET, MGET, SETNX, SETEX, MSET, MSETNX, DECRBY, DECR, INCRBY, INCR, APPEND, SUBSTR, HSET, HGET, HSETNX, HMSET, HMGET, HINCRBY, HEXISTS, HDEL, HLEN, HKEYS, HVALS, HGETALL, RPUSH, LPUSH, LLEN, LRANGE, LTRIM, LINDEX, LSET, LREM, LPOP, RPOP, RPOPLPUSH, SADD, SMEMBERS, SREM, SPOP, SMOVE, SCARD, SISMEMBER, SINTER, SINTERSTORE, SUNION, SUNIONSTORE, SDIFF, SDIFFSTORE, SRANDMEMBER, ZADD, ZRANGE, ZREM, ZINCRBY, ZRANK, ZREVRANK, ZREVRANGE, ZCARD, ZSCORE, MULTI, DISCARD, EXEC, WATCH, UNWATCH, SORT, BLPOP, BRPOP, AUTH, SUBSCRIBE, PUBLISH, UNSUBSCRIBE, PSUBSCRIBE, PUNSUBSCRIBE, ZCOUNT, ZRANGEBYSCORE, ZREVRANGEBYSCORE, ZREMRANGEBYRANK, ZREMRANGEBYSCORE, ZUNIONSTORE, ZINTERSTORE, SAVE, BGSAVE, BGREWRITEAOF, LASTSAVE, SHUTDOWN, INFO, MONITOR, SLAVEOF, CONFIG, STRLEN, SYNC, LPUSHX, PERSIST, RPUSHX, ECHO, LINSERT, DEBUG, BRPOPLPUSH, SETBIT, GETBIT, SETRANGE, GETRANGE, EVAL, EVALSHA, SCRIPT, SLOWLOG, OBJECT, BITCOUNT, BITOP, SENTINEL, 
-	DUMP, RESTORE, PEXPIRE, PEXPIREAT, PTTL, INCRBYFLOAT, PSETEX, CLIENT_KILL, CLIENT_GETNAME, CLIENT_SETNAME, CLIENT_LIST, TIME, MIGRATE, HINCRBYFLOAT;
+	DUMP, RESTORE, PEXPIRE, PEXPIREAT, PTTL, INCRBYFLOAT, PSETEX, CLIENT, TIME, MIGRATE, HINCRBYFLOAT;
 
 	public final byte[] raw;
 
@@ -165,7 +165,8 @@ public static enum Command {
     }
 
     public static enum Keyword {
-	AGGREGATE, ALPHA, ASC, BY, DESC, GET, LIMIT, MESSAGE, NO, NOSORT, PMESSAGE, PSUBSCRIBE, PUNSUBSCRIBE, OK, ONE, QUEUED, SET, STORE, SUBSCRIBE, UNSUBSCRIBE, WEIGHTS, WITHSCORES, RESETSTAT, RESET, FLUSH, EXISTS, LOAD, KILL, LEN, REFCOUNT, ENCODING, IDLETIME, AND, OR, XOR, NOT;
+	AGGREGATE, ALPHA, ASC, BY, DESC, GET, LIMIT, MESSAGE, NO, NOSORT, PMESSAGE, PSUBSCRIBE, PUNSUBSCRIBE, OK, ONE, QUEUED, SET, STORE, SUBSCRIBE, UNSUBSCRIBE, WEIGHTS, WITHSCORES, RESETSTAT, RESET, FLUSH, EXISTS, LOAD, KILL, LEN, REFCOUNT, ENCODING, IDLETIME, AND, OR, XOR, NOT,
+	GETNAME, SETNAME,LIST;
 	public final byte[] raw;
 
 	Keyword() {

File: src/main/java/redis/clients/jedis/Jedis.java
Patch:
@@ -1365,7 +1365,7 @@ public String srandmember(final String key) {
     
     public List<String> srandmember(final String key, final int count) {
 	checkIsInMulti();
-	client.srandmember(key);
+	client.srandmember(key, count);
 	return client.getMultiBulkReply();
     }
 

File: src/main/java/redis/clients/jedis/Protocol.java
Patch:
@@ -155,7 +155,7 @@ public static final byte[] toByteArray(final double value) {
 
     public static enum Command {
 	PING, SET, GET, QUIT, EXISTS, DEL, TYPE, FLUSHDB, KEYS, RANDOMKEY, RENAME, RENAMENX, RENAMEX, DBSIZE, EXPIRE, EXPIREAT, TTL, SELECT, MOVE, FLUSHALL, GETSET, MGET, SETNX, SETEX, MSET, MSETNX, DECRBY, DECR, INCRBY, INCR, APPEND, SUBSTR, HSET, HGET, HSETNX, HMSET, HMGET, HINCRBY, HEXISTS, HDEL, HLEN, HKEYS, HVALS, HGETALL, RPUSH, LPUSH, LLEN, LRANGE, LTRIM, LINDEX, LSET, LREM, LPOP, RPOP, RPOPLPUSH, SADD, SMEMBERS, SREM, SPOP, SMOVE, SCARD, SISMEMBER, SINTER, SINTERSTORE, SUNION, SUNIONSTORE, SDIFF, SDIFFSTORE, SRANDMEMBER, ZADD, ZRANGE, ZREM, ZINCRBY, ZRANK, ZREVRANK, ZREVRANGE, ZCARD, ZSCORE, MULTI, DISCARD, EXEC, WATCH, UNWATCH, SORT, BLPOP, BRPOP, AUTH, SUBSCRIBE, PUBLISH, UNSUBSCRIBE, PSUBSCRIBE, PUNSUBSCRIBE, ZCOUNT, ZRANGEBYSCORE, ZREVRANGEBYSCORE, ZREMRANGEBYRANK, ZREMRANGEBYSCORE, ZUNIONSTORE, ZINTERSTORE, SAVE, BGSAVE, BGREWRITEAOF, LASTSAVE, SHUTDOWN, INFO, MONITOR, SLAVEOF, CONFIG, STRLEN, SYNC, LPUSHX, PERSIST, RPUSHX, ECHO, LINSERT, DEBUG, BRPOPLPUSH, SETBIT, GETBIT, SETRANGE, GETRANGE, EVAL, EVALSHA, SCRIPT, SLOWLOG, OBJECT, BITCOUNT, BITOP, SENTINEL, 
-	DUMP, RESTORE, PEXPIRE, PEXPIREAT, PTTL, INCRBYFLOAT, PSETEX, CLIENT_KILL, CLIENT_GETNAME, CLIENT_SETNAME, CLIENT_LIST, TIME;
+	DUMP, RESTORE, PEXPIRE, PEXPIREAT, PTTL, INCRBYFLOAT, PSETEX, CLIENT_KILL, CLIENT_GETNAME, CLIENT_SETNAME, CLIENT_LIST, TIME, MIGRATE, HINCRBYFLOAT;
 
 	public final byte[] raw;
 

File: src/main/java/redis/clients/jedis/Transaction.java
Patch:
@@ -1,10 +1,10 @@
 package redis.clients.jedis;
 
-import redis.clients.jedis.exceptions.JedisDataException;
-
 import java.util.ArrayList;
 import java.util.List;
 
+import redis.clients.jedis.exceptions.JedisDataException;
+
 /**
  * Transaction is nearly identical to Pipeline, only differences are the multi/discard behaviors
  */

File: src/test/java/redis/clients/jedis/tests/commands/AllKindOfValuesCommandsTest.java
Patch:
@@ -300,7 +300,7 @@ public void expireAt() {
     @Test
     public void ttl() {
         long ttl = jedis.ttl("foo");
-        assertEquals(-1, ttl);
+        assertEquals(-2, ttl);
 
         jedis.set("foo", "bar");
         ttl = jedis.ttl("foo");
@@ -312,7 +312,7 @@ public void ttl() {
 
         // Binary
         long bttl = jedis.ttl(bfoo);
-        assertEquals(-1, bttl);
+        assertEquals(-2, bttl);
 
         jedis.set(bfoo, bbar);
         bttl = jedis.ttl(bfoo);

File: src/main/java/redis/clients/jedis/MultiKeyBinaryRedisPipeline.java
Patch:
@@ -23,7 +23,7 @@ public interface MultiKeyBinaryRedisPipeline {
 
     Response<Long> msetnx(byte[]... keysvalues);
 
-    Response<byte[]> rename(byte[] oldkey, byte[] newkey);
+    Response<String> rename(byte[] oldkey, byte[] newkey);
 
     Response<Long> renamenx(byte[] oldkey, byte[] newkey);
 
@@ -43,7 +43,7 @@ public interface MultiKeyBinaryRedisPipeline {
 
     Response<List<byte[]>> sort(byte[] key, byte[] dstkey);
 
-    Response<Set<String>> sunion(byte[]... keys);
+    Response<Set<byte[]>> sunion(byte[]... keys);
 
     Response<Long> sunionstore(byte[] dstkey, byte[]... keys);
 

File: src/main/java/redis/clients/jedis/RedisPipeline.java
Patch:
@@ -116,7 +116,7 @@ Response<Long> linsert(String key, BinaryClient.LIST_POSITION where,
 
     Response<Set<String>> smembers(String key);
 
-    Response<Long> sort(String key);
+    Response<List<String>> sort(String key);
 
     Response<List<String>> sort(String key,
                                 SortingParams sortingParameters);

File: src/test/java/redis/clients/jedis/tests/commands/ScriptingCommandsTest.java
Patch:
@@ -132,7 +132,7 @@ public void scriptKill() {
 			jedis.scriptKill();
 		}
 		catch(JedisDataException e) {
-			assertEquals("ERR No scripts in execution right now.", e.getMessage());
+            assertTrue(e.getMessage().contains("No scripts in execution right now."));
 		}
 	}
 }
\ No newline at end of file

File: src/main/java/redis/clients/jedis/BinaryRedisPipeline.java
Patch:
@@ -85,6 +85,8 @@ Response<Long> linsert(byte[] key, BinaryClient.LIST_POSITION where,
 
     Response<String> ltrim(byte[] key, long start, long end);
 
+    Response<Long> move(byte[] key, int dbIndex);
+
     Response<Long> persist(byte[] key);
 
     Response<byte[]> rpop(byte[] key);

File: src/main/java/redis/clients/jedis/MultiKeyBinaryRedisPipeline.java
Patch:
@@ -60,4 +60,6 @@ public interface MultiKeyBinaryRedisPipeline {
     Response<byte[]> brpoplpush(byte[] source, byte[] destination, int timeout);
 
     Response<Long> publish(byte[] channel, byte[] message);
+
+    Response<byte[]> randomKeyBinary();
 }

File: src/main/java/redis/clients/jedis/RedisPipeline.java
Patch:
@@ -88,6 +88,8 @@ Response<Long> linsert(String key, BinaryClient.LIST_POSITION where,
 
     Response<String> ltrim(String key, long start, long end);
 
+    Response<Long> move(String key, int dbIndex);
+
     Response<Long> persist(String key);
 
     Response<String> rpop(String key);

File: src/main/java/redis/clients/jedis/Connection.java
Patch:
@@ -112,6 +112,7 @@ public void setPort(final int port) {
     }
 
     public Connection() {
+    	
     }
 
     public void connect() {

File: src/main/java/redis/clients/jedis/Connection.java
Patch:
@@ -209,7 +209,7 @@ public List<Object> getObjectMultiBulkReply() {
     public List<Long> getIntegerMultiBulkReply() {
         flush();
         pipelinedCommands--;
-        return (List<Long>) protocol.read(inputStream);
+        return (List<Long>) Protocol.read(inputStream);
     }
 
     public List<Object> getAll() {
@@ -235,4 +235,4 @@ public Object getOne() {
         pipelinedCommands--;
         return Protocol.read(inputStream);
     }
-}
\ No newline at end of file
+}

File: src/main/java/redis/clients/jedis/BuilderFactory.java
Patch:
@@ -7,7 +7,8 @@
 public class BuilderFactory {
     public static final Builder<Double> DOUBLE = new Builder<Double>() {
         public Double build(Object data) {
-            return Double.valueOf(STRING.build(data));
+            String asString = STRING.build(data);
+            return asString == null ? null : Double.valueOf(asString);
         }
 
         public String toString() {

File: src/main/java/redis/clients/jedis/BuilderFactory.java
Patch:
@@ -7,7 +7,8 @@
 public class BuilderFactory {
     public static final Builder<Double> DOUBLE = new Builder<Double>() {
         public Double build(Object data) {
-            return Double.valueOf(STRING.build(data));
+            String asString = STRING.build(data);
+            return asString == null ? null : Double.valueOf(asString);
         }
 
         public String toString() {

File: src/main/java/redis/clients/jedis/BinaryJedis.java
Patch:
@@ -3007,8 +3007,9 @@ public Long getDB() {
         return client.getDB();
     }
     
-	public void slowlogReset() {
+	public byte[] slowlogReset() {
 		client.slowlogReset();
+		return client.getBinaryBulkReply();
 	}
 	
 	public long slowlogLen() {

File: src/main/java/redis/clients/jedis/BinaryJedis.java
Patch:
@@ -3047,7 +3047,8 @@ public byte[] scriptLoad(byte[] script){
     	return client.getBinaryBulkReply();
     }
     
-    public void scriptKill(){
+    public byte[] scriptKill(){
     	client.scriptKill();
+    	return client.getBinaryBulkReply();
     }
 }

File: src/main/java/redis/clients/jedis/ShardedJedisPipeline.java
Patch:
@@ -351,7 +351,7 @@ public Response<Set<String>> zrange(String key, int start, int end) {
         Client c = getClient(key);
         c.zrange(key, start, end);
         results.add(new FutureResult(c));
-        return getResponse(BuilderFactory.STRING_SET);
+        return getResponse(BuilderFactory.STRING_ZSET);
     }
 
     public Response<Long> zrem(String key, String member) {

File: src/test/java/redis/clients/jedis/tests/PipeliningTest.java
Patch:
@@ -82,8 +82,8 @@ public void pipelineResponse() {
         assertEquals("foo", zset.get().iterator().next());
         assertEquals("foo", set.get());
         assertEquals(false, blist.get());
-        assertEquals(new Double(2), zincrby.get());
-        assertEquals(new Long(1), zcard.get());
+        assertEquals(Double.valueOf(2), zincrby.get());
+        assertEquals(Long.valueOf(1), zcard.get());
         assertEquals(1, lrange.get().size());
         assertNotNull(hgetAll.get().get("foo"));
         assertEquals(1, smembers.get().size());
@@ -134,4 +134,4 @@ public void piplineWithError(){
         }
         assertEquals(r.get(), "bar");
     }
-}
\ No newline at end of file
+}

File: src/test/java/redis/clients/jedis/tests/ShardedJedisPoolTest.java
Patch:
@@ -152,8 +152,8 @@ public void shouldReturnActiveShardsWhenOneGoesOffline() {
         shards.set(1, new JedisShardInfo("nohost", 1234));
         pool = new ShardedJedisPool(redisConfig, shards);
         jedis = pool.getResource();
-        Long actual = new Long(0);
-        Long fails = new Long(0);
+        Long actual = Long.valueOf(0);
+        Long fails = Long.valueOf(0);
         for (int i = 0; i < 1000; i++) {
             try {
                 jedis.get("a-test-" + i);
@@ -167,4 +167,4 @@ public void shouldReturnActiveShardsWhenOneGoesOffline() {
         assertEquals(actual, c1);
         assertEquals(fails, c2);
     }
-}
\ No newline at end of file
+}

File: src/test/java/redis/clients/jedis/tests/commands/JedisCommandTestBase.java
Patch:
@@ -64,8 +64,8 @@ protected void assertEquals(Set<byte[]> expected, Set<byte[]> actual) {
                 }
             }
             if (!contained) {
-                throw new ComparisonFailure("element is missing", next
-                        .toString(), actual.toString());
+                throw new ComparisonFailure("element is missing",
+                        Arrays.toString(next), actual.toString());
             }
         }
     }
@@ -93,4 +93,4 @@ protected boolean setContains(Set<byte[]> set, byte[] expected) {
         }
         return false;
     }
-}
\ No newline at end of file
+}

File: src/test/java/redis/clients/jedis/tests/PipeliningTest.java
Patch:
@@ -82,8 +82,8 @@ public void pipelineResponse() {
         assertEquals("foo", zset.get().iterator().next());
         assertEquals("foo", set.get());
         assertEquals(false, blist.get());
-        assertEquals(new Double(2), zincrby.get());
-        assertEquals(new Long(1), zcard.get());
+        assertEquals(Double.valueOf(2), zincrby.get());
+        assertEquals(Long.valueOf(1), zcard.get());
         assertEquals(1, lrange.get().size());
         assertNotNull(hgetAll.get().get("foo"));
         assertEquals(1, smembers.get().size());
@@ -134,4 +134,4 @@ public void piplineWithError(){
         }
         assertEquals(r.get(), "bar");
     }
-}
\ No newline at end of file
+}

File: src/test/java/redis/clients/jedis/tests/ShardedJedisPoolTest.java
Patch:
@@ -152,8 +152,8 @@ public void shouldReturnActiveShardsWhenOneGoesOffline() {
         shards.set(1, new JedisShardInfo("nohost", 1234));
         pool = new ShardedJedisPool(redisConfig, shards);
         jedis = pool.getResource();
-        Long actual = new Long(0);
-        Long fails = new Long(0);
+        Long actual = Long.valueOf(0);
+        Long fails = Long.valueOf(0);
         for (int i = 0; i < 1000; i++) {
             try {
                 jedis.get("a-test-" + i);
@@ -167,4 +167,4 @@ public void shouldReturnActiveShardsWhenOneGoesOffline() {
         assertEquals(actual, c1);
         assertEquals(fails, c2);
     }
-}
\ No newline at end of file
+}

File: src/test/java/redis/clients/jedis/tests/commands/JedisCommandTestBase.java
Patch:
@@ -64,8 +64,8 @@ protected void assertEquals(Set<byte[]> expected, Set<byte[]> actual) {
                 }
             }
             if (!contained) {
-                throw new ComparisonFailure("element is missing", next
-                        .toString(), actual.toString());
+                throw new ComparisonFailure("element is missing",
+                        Arrays.toString(next), actual.toString());
             }
         }
     }
@@ -93,4 +93,4 @@ protected boolean setContains(Set<byte[]> set, byte[] expected) {
         }
         return false;
     }
-}
\ No newline at end of file
+}

File: src/main/java/redis/clients/util/RedisInputStream.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.InputStream;
 
 import redis.clients.jedis.exceptions.JedisConnectionException;
-import redis.clients.jedis.exceptions.JedisException;
 
 public class RedisInputStream extends FilterInputStream {
 
@@ -84,7 +83,7 @@ public String readLine() {
                 }
             }
         } catch (IOException e) {
-            throw new JedisException(e);
+            throw new JedisConnectionException(e);
         }
         String reply = sb.toString();
         if (reply.length() == 0) {

File: src/main/java/redis/clients/jedis/ShardedJedisPipeline.java
Patch:
@@ -10,7 +10,7 @@ public abstract class ShardedJedisPipeline {
     private BinaryShardedJedis jedis;
     private List<FutureResult> results = new ArrayList<FutureResult>();
 
-    private class FutureResult {
+    private static class FutureResult {
         private Client client;
 
         public FutureResult(Client client) {

File: src/main/java/redis/clients/util/JedisByteHashMap.java
Patch:
@@ -88,7 +88,7 @@ public Collection<byte[]> values() {
         return internalMap.values();
     }
 
-    private final class ByteArrayWrapper {
+    private static final class ByteArrayWrapper {
         private final byte[] data;
 
         public ByteArrayWrapper(byte[] data) {
@@ -110,7 +110,7 @@ public int hashCode() {
         }
     }
 
-    private final class JedisByteEntry implements Entry<byte[], byte[]> {
+    private static final class JedisByteEntry implements Entry<byte[], byte[]> {
         private byte[] value;
         private byte[] key;
 

File: src/test/java/redis/clients/jedis/tests/commands/PublishSubscribeCommandsTest.java
Patch:
@@ -472,7 +472,7 @@ public void run() {
         t.join();
     }
 
-    @Test
+    @Test @Ignore
     public void subscribeWithoutConnecting() {
         try {
             Jedis jedis = new Jedis(hnp.host, hnp.port);
@@ -504,7 +504,7 @@ public void onPSubscribe(String pattern, int subscribedChannels) {
         }
     }
 
-    @Test(expected = JedisConnectionException.class) @Ignore
+    @Test(expected = JedisConnectionException.class)
     public void unsubscribeWhenNotSusbscribed() throws InterruptedException {
         JedisPubSub pubsub = new JedisPubSub() {
             public void onMessage(String channel, String message) {

File: src/main/java/redis/clients/jedis/BinaryJedis.java
Patch:
@@ -84,8 +84,8 @@ public String quit() {
     }
 
     /**
-     * Test if the specified key exists. The command returns "0" if the key
-     * exists, otherwise "1" is returned. Note that even keys set with an empty
+     * Test if the specified key exists. The command returns "1" if the key
+     * exists, otherwise "0" is returned. Note that even keys set with an empty
      * string as value will return "1".
      * 
      * Time complexity: O(1)
@@ -3007,4 +3007,4 @@ public void psubscribe(BinaryJedisPubSub jedisPubSub, byte[]... patterns) {
     public Long getDB() {
         return client.getDB();
     }
-}
\ No newline at end of file
+}

File: src/main/java/redis/clients/jedis/Jedis.java
Patch:
@@ -77,8 +77,8 @@ public String quit() {
 
     /**
      * Test if the specified key exists. The command returns "1" if the key
-     * exists, otherwise "1" is returned. Note that even keys set with an empty
-     * string as value will return "0".
+     * exists, otherwise "0" is returned. Note that even keys set with an empty
+     * string as value will return "1".
      * 
      * Time complexity: O(1)
      * 

File: src/main/java/redis/clients/jedis/BinaryJedis.java
Patch:
@@ -84,8 +84,8 @@ public String quit() {
     }
 
     /**
-     * Test if the specified key exists. The command returns "0" if the key
-     * exists, otherwise "1" is returned. Note that even keys set with an empty
+     * Test if the specified key exists. The command returns "1" if the key
+     * exists, otherwise "0" is returned. Note that even keys set with an empty
      * string as value will return "1".
      * 
      * Time complexity: O(1)
@@ -3007,4 +3007,4 @@ public void psubscribe(BinaryJedisPubSub jedisPubSub, byte[]... patterns) {
     public Long getDB() {
         return client.getDB();
     }
-}
\ No newline at end of file
+}

File: src/main/java/redis/clients/jedis/Jedis.java
Patch:
@@ -77,8 +77,8 @@ public String quit() {
 
     /**
      * Test if the specified key exists. The command returns "1" if the key
-     * exists, otherwise "1" is returned. Note that even keys set with an empty
-     * string as value will return "0".
+     * exists, otherwise "0" is returned. Note that even keys set with an empty
+     * string as value will return "1".
      * 
      * Time complexity: O(1)
      * 

File: src/main/java/redis/clients/jedis/Response.java
Patch:
@@ -24,6 +24,9 @@ public T get() {
                     "Please close pipeline or multi block before calling this method.");
         }
         if (!built) {
+        	if (data instanceof JedisDataException){
+        		throw new JedisDataException((JedisDataException)data);
+        	}
             response = builder.build(data);
             this.data = null;
             built = true;

File: src/main/java/redis/clients/util/RedisInputStream.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.InputStream;
 
 import redis.clients.jedis.exceptions.JedisConnectionException;
-import redis.clients.jedis.exceptions.JedisException;
 
 public class RedisInputStream extends FilterInputStream {
 
@@ -84,7 +83,7 @@ public String readLine() {
                 }
             }
         } catch (IOException e) {
-            throw new JedisException(e);
+            throw new JedisConnectionException(e);
         }
         String reply = sb.toString();
         if (reply.length() == 0) {

File: src/main/java/redis/clients/jedis/JedisCommands.java
Patch:
@@ -1,6 +1,5 @@
 package redis.clients.jedis;
 
-import java.util.Collection;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
@@ -69,7 +68,7 @@ public interface JedisCommands {
 
     Set<String> hkeys(String key);
 
-    Collection<String> hvals(String key);
+    List<String> hvals(String key);
 
     Map<String, String> hgetAll(String key);
 

File: src/main/java/redis/clients/jedis/ShardedJedis.java
Patch:
@@ -1,6 +1,5 @@
 package redis.clients.jedis;
 
-import java.util.Collection;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
@@ -189,7 +188,7 @@ public Set<String> hkeys(String key) {
         return j.hkeys(key);
     }
 
-    public Collection<String> hvals(String key) {
+    public List<String> hvals(String key) {
         Jedis j = getShard(key);
         return j.hvals(key);
     }

File: src/main/java/redis/clients/jedis/Client.java
Patch:
@@ -1,12 +1,12 @@
 package redis.clients.jedis;
 
-import static redis.clients.jedis.Protocol.toByteArray;
+import redis.clients.util.SafeEncoder;
 
 import java.util.HashMap;
 import java.util.Map;
 import java.util.Map.Entry;
 
-import redis.clients.util.SafeEncoder;
+import static redis.clients.jedis.Protocol.toByteArray;
 
 public class Client extends BinaryClient implements Commands {
     public Client(final String host) {
@@ -537,7 +537,7 @@ public void brpoplpush(String source, String destination, int timeout) {
     }
 
     public void setbit(final String key, final long offset, final boolean value) {
-        setbit(SafeEncoder.encode(key), offset, toByteArray(value ? 0 : 1));
+        setbit(SafeEncoder.encode(key), offset, toByteArray(value ? 1 : 0));
     }
 
     public void getbit(String key, long offset) {

File: src/test/java/redis/clients/jedis/tests/commands/BitCommandsTest.java
Patch:
@@ -9,7 +9,7 @@ public void setAndgetbit() {
         assertEquals(false, bit);
 
         bit = jedis.getbit("foo", 0);
-        assertEquals(false, bit);
+        assertEquals(true, bit);
 
         long bbit = jedis.setbit("bfoo".getBytes(), 0, "1".getBytes());
         assertEquals(0, bbit);

File: src/main/java/redis/clients/jedis/Jedis.java
Patch:
@@ -82,7 +82,7 @@ public void quit() {
      * Time complexity: O(1)
      * 
      * @param key
-     * @return Integer reply, "0" if the key exists, otherwise "1"
+     * @return Boolean reply, true if the key exists, otherwise false
      */
     public Boolean exists(final String key) {
         checkIsInMulti();

File: src/main/java/redis/clients/jedis/Client.java
Patch:
@@ -1,12 +1,12 @@
 package redis.clients.jedis;
 
-import static redis.clients.jedis.Protocol.toByteArray;
+import redis.clients.util.SafeEncoder;
 
 import java.util.HashMap;
 import java.util.Map;
 import java.util.Map.Entry;
 
-import redis.clients.util.SafeEncoder;
+import static redis.clients.jedis.Protocol.toByteArray;
 
 public class Client extends BinaryClient implements Commands {
     public Client(final String host) {
@@ -537,7 +537,7 @@ public void brpoplpush(String source, String destination, int timeout) {
     }
 
     public void setbit(final String key, final long offset, final boolean value) {
-        setbit(SafeEncoder.encode(key), offset, toByteArray(value ? 0 : 1));
+        setbit(SafeEncoder.encode(key), offset, toByteArray(value ? 1 : 0));
     }
 
     public void getbit(String key, long offset) {

File: src/test/java/redis/clients/jedis/tests/commands/BitCommandsTest.java
Patch:
@@ -9,7 +9,7 @@ public void setAndgetbit() {
         assertEquals(false, bit);
 
         bit = jedis.getbit("foo", 0);
-        assertEquals(false, bit);
+        assertEquals(true, bit);
 
         long bbit = jedis.setbit("bfoo".getBytes(), 0, "1".getBytes());
         assertEquals(0, bbit);

File: src/test/java/redis/clients/jedis/tests/commands/ListCommandsTest.java
Patch:
@@ -585,7 +585,7 @@ public void brpoplpush() {
         (new Thread(new Runnable() {
             public void run() {
                 try {
-                    Thread.sleep(100);
+                    Thread.sleep(2000);
                     Jedis j = createJedis();
                     j.lpush("foo", "a");
                 } catch (InterruptedException e) {

File: src/main/java/redis/clients/jedis/ShardedJedisPool.java
Patch:
@@ -12,7 +12,7 @@
 public class ShardedJedisPool extends Pool<ShardedJedis> {
     public ShardedJedisPool(final GenericObjectPool.Config poolConfig,
             List<JedisShardInfo> shards) {
-        this(poolConfig, shards, Hashing.MD5);
+        this(poolConfig, shards, Hashing.MURMUR_HASH);
     }
 
     public ShardedJedisPool(final GenericObjectPool.Config poolConfig,
@@ -22,7 +22,7 @@ public ShardedJedisPool(final GenericObjectPool.Config poolConfig,
 
     public ShardedJedisPool(final GenericObjectPool.Config poolConfig,
             List<JedisShardInfo> shards, Pattern keyTagPattern) {
-        this(poolConfig, shards, Hashing.MD5, keyTagPattern);
+        this(poolConfig, shards, Hashing.MURMUR_HASH, keyTagPattern);
     }
 
     public ShardedJedisPool(final GenericObjectPool.Config poolConfig,

File: src/test/java/redis/clients/jedis/tests/ShardedJedisTest.java
Patch:
@@ -135,8 +135,8 @@ public void checkKeyTags() {
         assertEquals(jedis2.getKeyTag("foo"), "foo");
         assertNotSame(jedis2.getKeyTag("foo{bar}"), "bar");
 
-        JedisShardInfo s5 = jedis2.getShardInfo("foo{bar}");
-        JedisShardInfo s6 = jedis2.getShardInfo("abc{bar}");
+        JedisShardInfo s5 = jedis2.getShardInfo(keys.get(0)+"{bar}");
+        JedisShardInfo s6 = jedis2.getShardInfo(keys.get(1)+"{bar}");
         assertNotSame(s5, s6);
     }
 

File: src/main/java/redis/clients/jedis/Transaction.java
Patch:
@@ -403,14 +403,14 @@ public String sort(final String key, final SortingParams sortingParameters,
         return client.getStatusCodeReply();
     }
 
-    public String setbit(String key, long offset, String value) {
+    public String setbit(String key, long offset, boolean value) {
         client.setbit(key, offset, value);
         return client.getStatusCodeReply();
     }
 
-    public String getbit(String key, long offset) {
+    public boolean getbit(String key, long offset) {
         client.getbit(key, offset);
-        return client.getStatusCodeReply();
+        return client.getStatusCodeReply() == "1";
     }
 
     public String linsert(final String key, final LIST_POSITION where,

File: src/test/java/redis/clients/jedis/tests/commands/BitCommandsTest.java
Patch:
@@ -5,11 +5,11 @@
 public class BitCommandsTest extends JedisCommandTestBase {
     @Test
     public void setAndgetbit() {
-        long bit = jedis.setbit("foo", 0, "1");
-        assertEquals(0, bit);
+        boolean bit = jedis.setbit("foo", 0, true);
+        assertEquals(false, bit);
 
         bit = jedis.getbit("foo", 0);
-        assertEquals(1, bit);
+        assertEquals(false, bit);
 
         long bbit = jedis.setbit("bfoo".getBytes(), 0, "1".getBytes());
         assertEquals(0, bbit);

File: src/test/java/redis/clients/jedis/tests/commands/ControlCommandsTest.java
Patch:
@@ -88,11 +88,9 @@ public void sync() {
 
     @Test
     public void debug() {
-	jedis.set("foo", "bar");
+        jedis.set("foo", "bar");
 	String resp = jedis.debug(DebugParams.OBJECT("foo"));
 	assertNotNull(resp);
-	resp = jedis.debug(DebugParams.SWAPIN("foo"));
-	assertNotNull(resp);
 	resp = jedis.debug(DebugParams.RELOAD());
 	assertNotNull(resp);
     }

File: src/main/java/redis/clients/jedis/JedisShardInfo.java
Patch:
@@ -19,10 +19,8 @@
 import redis.clients.util.Sharded;
 
 public class JedisShardInfo extends ShardInfo<Jedis> {
-    @Override
     public String toString() {
-        return "JedisShardInfo [host=" + host + ", port=" + port + ", weight="
-                + getWeight() + "]";
+        return host + ":" + port + "*" + getWeight();
     }
 
     private int timeout;

File: src/main/java/redis/clients/util/RedisInputStream.java
Patch:
@@ -86,7 +86,7 @@ public String readLine() {
             throw new JedisException(e);
         }
         String reply = sb.toString();
-        if (reply.isEmpty()) {
+        if (reply.length() == 0) {
             throw new JedisException(
                     "It seems like server has closed the connection.");
         }

File: src/test/java/redis/clients/jedis/tests/ProtocolTest.java
Patch:
@@ -70,8 +70,8 @@ public void nullBulkReply() {
     public void singleLineReply() {
 	InputStream is = new ByteArrayInputStream("+OK\r\n".getBytes());
 	Protocol protocol = new Protocol();
-	String response = (String) protocol.read(new RedisInputStream(is));
-	assertEquals("OK", response);
+	byte[] response = (byte[]) protocol.read(new RedisInputStream(is));
+	assertArrayEquals("OK".getBytes(Protocol.UTF8), response);
     }
 
     @Test
@@ -112,7 +112,7 @@ public void multiBulkReply() {
 	List<Object> response2 = (List<Object>) protocol.read(new RedisInputStream(is));
 	List<Object> expected2 = new ArrayList<Object>();
 	expected2.add("foo".getBytes(Protocol.UTF8));
-	expected2.add("OK");
+	expected2.add("OK".getBytes(Protocol.UTF8));
 	expected2.add(1000);
 	List<Object> sub = new ArrayList<Object>();
 	sub.add("foo".getBytes(Protocol.UTF8));

File: src/test/java/redis/clients/jedis/tests/commands/SortedSetCommandsTest.java
Patch:
@@ -91,7 +91,7 @@ public void zincrby() {
         expected.add("a");
         expected.add("b");
 
-        assertEquals(3d, score);
+        assertEquals(3d, score, 0);
         assertEquals(expected, jedis.zrange("foo", 0, 100));
     }
 

File: src/main/java/redis/clients/jedis/Protocol.java
Patch:
@@ -97,8 +97,8 @@ private Object process(final RedisInputStream is) {
         return null;
     }
 
-    private String processStatusCodeReply(final RedisInputStream is) {
-        return is.readLine();
+    private byte[] processStatusCodeReply(final RedisInputStream is) {
+        return is.readLine().getBytes(UTF8);
     }
 
     private byte[] processBulkReply(final RedisInputStream is) {

File: src/test/java/redis/clients/jedis/tests/commands/ControlCommandsTest.java
Patch:
@@ -21,8 +21,9 @@ public void bgsave() {
 	    String status = jedis.bgsave();
 	    assertEquals("Background saving started", status);
 	} catch (JedisException e) {
-	    assertEquals("ERR Background save already in progress", e
-		    .getMessage());
+		assertTrue(
+				"ERR Background save already in progress"
+					.equalsIgnoreCase(e.getMessage()));
 	}
     }
 

File: src/main/java/redis/clients/jedis/Connection.java
Patch:
@@ -164,6 +164,9 @@ public Integer getIntegerReply() {
 
     public List<String> getMultiBulkReply() {
     	final List<byte[]> bresult = getBinaryMultiBulkReply();
+    	if(null == bresult) {
+    		return null;
+    	}
     	final ArrayList<String> result = new ArrayList<String>(bresult.size());
     	for(final byte[] barray : bresult) {
     		result.add(new String(barray, Protocol.UTF8));

File: src/test/java/redis/clients/jedis/tests/ShardedJedisTest.java
Patch:
@@ -146,7 +146,7 @@ public void execute() {
         expected.add("a".getBytes(Protocol.UTF8));
         expected.add("b".getBytes(Protocol.UTF8));
         
-        JedisTest.compareList(expected, results);
+        assertTrue(JedisTest.isListAreEquals(expected, results));
 //        assertArrayEquals("a".getBytes(Protocol.UTF8), results.get(0));
 //        assertArrayEquals("b".getBytes(Protocol.UTF8), results.get(1));
     }

File: src/test/java/redis/clients/jedis/tests/commands/AllKindOfValuesCommandsTest.java
Patch:
@@ -140,7 +140,7 @@ public void keys() {
 	List<byte[]> bexpected = new ArrayList<byte[]>();
 	bexpected.add(bfoo);
 	bexpected.add(bfoobar);
-	JedisTest.compareList(bexpected, bkeys);
+	assertTrue(JedisTest.isListAreEquals(bexpected, bkeys));
 //	assertEquals(expected, keys);
 
 	expected = new ArrayList<String>();

File: src/main/java/redis/clients/jedis/Client.java
Patch:
@@ -34,7 +34,7 @@ public void del(final String... keys) {
 	}
 
 	public void type(final String key) {
-		del(key.getBytes(Protocol.UTF8));
+		type(key.getBytes(Protocol.UTF8));
 	}
 
 	public void keys(final String pattern) {

File: src/test/java/redis/clients/jedis/tests/JedisTest.java
Patch:
@@ -46,6 +46,8 @@ public void connectWithShardInfo() {
     
     @SuppressWarnings("rawtypes")
 	public static void compareList(List expected, List result) {
+    	assertEquals(expected.size(), result.size());
+    	
     	final Iterator expectedit = expected.iterator();
     	final Iterator responseit = result.iterator();
     	while(expectedit.hasNext()) {

File: src/test/java/redis/clients/jedis/tests/commands/JedisCommandTestBase.java
Patch:
@@ -3,7 +3,7 @@
 import java.io.IOException;
 import java.net.UnknownHostException;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import org.junit.After;
 import org.junit.Before;

File: src/test/java/redis/clients/jedis/tests/commands/SortedSetCommandsTest.java
Patch:
@@ -179,10 +179,10 @@ public void zscore() {
         jedis.zadd("foo", 2d, "a");
 
         Double score = jedis.zscore("foo", "b");
-        assertEquals(10d, score);
+        assertEquals((Double)10d, score);
 
         score = jedis.zscore("foo", "c");
-        assertEquals(0.1d, score);
+        assertEquals((Double)0.1d, score);
 
         score = jedis.zscore("foo", "s");
         assertNull(score);

File: src/main/java/redis/clients/util/RedisOutputStream.java
Patch:
@@ -119,13 +119,13 @@ public void writeUtf8CrLf(String str) throws IOException {
                     flushBuffer();
                 }
             } else if (c < 0x800) {
-                if(2 < buf.length - count) {
+                if(2 >= buf.length - count) {
                     flushBuffer();
                 }
                 buf[count++] = (byte)(0xc0 | (c >> 6));
                 buf[count++] = (byte)(0x80 | (c & 0x3f));
             } else if (isSurrogate(c)) {
-                if(4 < buf.length - count) {
+                if(4 >= buf.length - count) {
                     flushBuffer();
                 }
                 int uc = Character.toCodePoint(c, str.charAt(i++));
@@ -134,7 +134,7 @@ public void writeUtf8CrLf(String str) throws IOException {
                 buf[count++] = ((byte)(0x80 | ((uc >> 6) & 0x3f)));
                 buf[count++] = ((byte)(0x80 | (uc & 0x3f)));
             } else {
-                if(3 < buf.length - count) {
+                if(3 >= buf.length - count) {
                     flushBuffer();
                 }
                 buf[count++] =((byte)(0xe0 | ((c >> 12))));

File: src/test/java/redis/clients/jedis/tests/commands/ControlCommandsTest.java
Patch:
@@ -21,7 +21,7 @@ public void bgsave() {
 	    String status = jedis.bgsave();
 	    assertEquals("Background saving started", status);
 	} catch (JedisException e) {
-	    assertEquals("ERR background save already in progress", e
+	    assertEquals("ERR Background save already in progress", e
 		    .getMessage());
 	}
     }

File: src/main/java/redis/clients/jedis/Tuple.java
Patch:
@@ -2,7 +2,7 @@
 
 public class Tuple {
     private String element;
-    private double score;
+    private Double score;
 
     @Override
     public int hashCode() {
@@ -35,7 +35,7 @@ public boolean equals(Object obj) {
 	return true;
     }
 
-    public Tuple(String element, double score) {
+    public Tuple(String element, Double score) {
 	super();
 	this.element = element;
 	this.score = score;

File: src/test/java/redis/clients/jedis/tests/commands/StringValuesCommandsTest.java
Patch:
@@ -173,6 +173,6 @@ public void substr() {
     @Test
     public void strlen() {
 	jedis.set("s", "This is a string");
-	assertEquals("This is a string".length(), jedis.strlen("s"));
+	assertEquals("This is a string".length(), jedis.strlen("s").intValue());
     }
 }
\ No newline at end of file

File: src/test/java/redis/clients/jedis/tests/commands/TransactionCommandsTest.java
Patch:
@@ -19,7 +19,7 @@ public class TransactionCommandsTest extends JedisCommandTestBase {
 	public void setUp() throws Exception {
 		super.setUp();
 
-		nj = new Jedis(host, port, 500);
+		nj = new Jedis(hnp.host, hnp.port, 500);
 		nj.connect();
 		nj.auth("foobared");
 		nj.flushAll();

File: src/main/java/redis/clients/jedis/Connection.java
Patch:
@@ -125,7 +125,7 @@ public String getBulkReply() {
 
     public int getIntegerReply() {
 	pipelinedCommands--;
-	return (Integer) protocol.read(inputStream);
+	return ((Integer) protocol.read(inputStream)).intValue();
     }
 
     @SuppressWarnings("unchecked")

File: src/main/java/redis/clients/jedis/Protocol.java
Patch:
@@ -155,10 +155,8 @@ private Object processBulkReply(DataInputStream is) {
     }
 
     private Object processInteger(DataInputStream is) {
-	int ret = 0;
 	String num = readLine(is);
-	ret = Integer.parseInt(num);
-	return ret;
+	return Integer.valueOf(num);
     }
 
     private Object processMultiBulkReply(DataInputStream is) {

File: src/main/java/redis/clients/util/FixedResourcePool.java
Patch:
@@ -287,7 +287,7 @@ public T getResource(long maxTime) throws TimeoutException {
 	    } catch (InterruptedException e1) {
 		e1.printStackTrace();
 	    } // If the wait gets interrupted, doesn't matter but print it (just
-	      // in case).
+	    // in case).
 	} while (true);
     }
 

File: src/main/java/redis/clients/jedis/JedisPool.java
Patch:
@@ -51,6 +51,6 @@ protected void destroyResource(Jedis jedis) {
 
     @Override
     protected boolean isResourceValid(Jedis jedis) {
-	return jedis.ping().equals("OK");
+	return jedis.ping().equals("PONG");
     }
 }
\ No newline at end of file

File: src/main/java/redis/clients/jedis/JedisPool.java
Patch:
@@ -12,6 +12,7 @@ public class JedisPool extends FixedResourcePool<Jedis> {
 
     public JedisPool(String host) {
 	this.host = host;
+	this.port = Protocol.DEFAULT_PORT;
     }
 
     public JedisPool(String host, int port) {

File: src/test/java/redis/clients/jedis/tests/commands/HashesCommandsTest.java
Patch:
@@ -8,8 +8,6 @@
 
 import org.junit.Test;
 
-import redis.clients.jedis.Protocol;
-
 public class HashesCommandsTest extends JedisCommandTestBase {
     @Test
     public void hset() {

File: src/test/java/redis/clients/jedis/tests/commands/HashesCommandsTest.java
Patch:
@@ -8,6 +8,8 @@
 
 import org.junit.Test;
 
+import redis.clients.jedis.Protocol;
+
 public class HashesCommandsTest extends JedisCommandTestBase {
     @Test
     public void hset() {
@@ -154,5 +156,4 @@ public void hgetAll() {
 	expected.put("car", "bar");
 	assertEquals(expected, hash);
     }
-
 }

File: src/test/java/redis/clients/jedis/tests/JedisTest.java
Patch:
@@ -11,4 +11,4 @@ public void useWithoutConnecting() {
 	Jedis jedis = new Jedis("localhost");
 	jedis.dbSize();
     }
-}
+}
\ No newline at end of file

File: src/main/java/redis/clients/jedis/Protocol.java
Patch:
@@ -91,8 +91,10 @@ private Object process(InputStream is) {
 		return processInteger(is);
 	    } else if (b == DOLLAR_BYTE) {
 		return processBulkReply(is);
-	    } else {
+	    } else if (b == PLUS_BYTE) {
 		return processStatusCodeReply(is);
+	    } else {
+		throw new JedisException("Unknown reply");
 	    }
 	} catch (IOException e) {
 	    throw new JedisException(e);

