File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/cluster/BaseServerMetadata.java
Patch:
@@ -28,6 +28,8 @@
 @SuperBuilder
 public abstract class BaseServerMetadata implements IClusters.IServerMetadata {
 
+    private final int processId;
+
     // The server startup time in milliseconds.
     private final long serverStartupTime;
 

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/cluster/MasterServerMetadata.java
Patch:
@@ -33,6 +33,7 @@ public class MasterServerMetadata extends BaseServerMetadata implements Comparab
 
     public static MasterServerMetadata parseFromHeartBeat(final MasterHeartBeat masterHeartBeat) {
         return MasterServerMetadata.builder()
+                .processId(masterHeartBeat.getProcessId())
                 .serverStartupTime(masterHeartBeat.getStartupTime())
                 .address(masterHeartBeat.getHost() + Constants.COLON + masterHeartBeat.getPort())
                 .cpuUsage(masterHeartBeat.getCpuUsage())

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/cluster/WorkerServerMetadata.java
Patch:
@@ -41,6 +41,7 @@ public class WorkerServerMetadata extends BaseServerMetadata {
 
     public static WorkerServerMetadata parseFromHeartBeat(final WorkerHeartBeat workerHeartBeat) {
         return WorkerServerMetadata.builder()
+                .processId(workerHeartBeat.getProcessId())
                 .serverStartupTime(workerHeartBeat.getStartupTime())
                 .address(workerHeartBeat.getHost() + Constants.COLON + workerHeartBeat.getPort())
                 .workerGroup(workerHeartBeat.getWorkerGroup())

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/engine/system/event/MasterFailoverEvent.java
Patch:
@@ -29,6 +29,7 @@
 public class MasterFailoverEvent extends AbstractSystemEvent {
 
     private final MasterServerMetadata masterServerMetadata;
+    // The time when the event occurred. This might be different at different nodes.
     private final Date eventTime;
 
     private MasterFailoverEvent(final MasterServerMetadata masterServerMetadata,

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/registry/MasterHeartBeatTask.java
Patch:
@@ -86,7 +86,7 @@ public MasterHeartBeat getHeartBeat() {
 
     @Override
     public void writeHeartBeat(final MasterHeartBeat masterHeartBeat) {
-        final String failoverNodePath = RegistryUtils.getFailoverFinishedNodePath(masterHeartBeat);
+        final String failoverNodePath = RegistryUtils.getFailoveredNodePath(masterHeartBeat);
         if (registryClient.exists(failoverNodePath)) {
             log.warn("The master: {} is under {}, means it has been failover will close myself",
                     masterHeartBeat,

File: dolphinscheduler-registry/dolphinscheduler-registry-api/src/main/java/org/apache/dolphinscheduler/registry/api/enums/RegistryNodeType.java
Patch:
@@ -26,6 +26,7 @@ public enum RegistryNodeType {
 
     FAILOVER_FINISH_NODES("FailoverFinishNodes", "/nodes/failover-finish-nodes"),
 
+    GLOBAL_MASTER_FAILOVER_LOCK("GlobalMasterFailoverLock", "/lock/global-master-failover"),
     MASTER("Master", "/nodes/master"),
     MASTER_FAILOVER_LOCK("MasterFailoverLock", "/lock/master-failover"),
     MASTER_COORDINATOR("MasterCoordinator", "/nodes/master-coordinator"),

File: dolphinscheduler-worker/src/main/java/org/apache/dolphinscheduler/server/worker/task/WorkerHeartBeatTask.java
Patch:
@@ -85,7 +85,7 @@ public WorkerHeartBeat getHeartBeat() {
 
     @Override
     public void writeHeartBeat(final WorkerHeartBeat workerHeartBeat) {
-        final String failoverNodePath = RegistryUtils.getFailoverFinishedNodePath(workerHeartBeat);
+        final String failoverNodePath = RegistryUtils.getFailoveredNodePath(workerHeartBeat);
         if (registryClient.exists(failoverNodePath)) {
             log.warn("The worker: {} is under {}, means it has been failover will close myself",
                     workerHeartBeat,

File: dolphinscheduler-common/src/test/java/org/apache/dolphinscheduler/common/utils/FileUtilsTest.java
Patch:
@@ -60,18 +60,18 @@ public void testGetProcessExecDir() {
     }
 
     @Test
-    public void createDirectoryWith755() throws IOException {
+    public void testCreateDirectoryWithPermission() throws IOException {
         Path path = Paths.get("/tmp/createWorkDirAndUserIfAbsent");
         try {
-            FileUtils.createDirectoryWith755(path);
+            FileUtils.createDirectoryWithPermission(path, FileUtils.PERMISSION_755);
             File file = path.toFile();
             Assertions.assertTrue(file.exists());
             Assertions.assertTrue(file.isDirectory());
             Assertions.assertTrue(file.canExecute());
             Assertions.assertTrue(file.canRead());
             Assertions.assertTrue(file.canWrite());
 
-            FileUtils.createDirectoryWith755(Paths.get("/"));
+            FileUtils.createDirectoryWithPermission(Paths.get("/"), FileUtils.PERMISSION_755);
         } catch (Exception e) {
             e.printStackTrace();
             Assertions.fail(e.getMessage());

File: dolphinscheduler-storage-plugin/dolphinscheduler-storage-abs/src/main/java/org/apache/dolphinscheduler/plugin/storage/abs/AbsStorageOperator.java
Patch:
@@ -99,7 +99,7 @@ public void download(String srcFilePath, String dstFilePath, boolean overwrite)
         if (dstFile.isDirectory()) {
             Files.delete(dstFile.toPath());
         } else {
-            FileUtils.createDirectoryWith755(dstFile.getParentFile().toPath());
+            FileUtils.createDirectoryWithPermission(dstFile.getParentFile().toPath(), FileUtils.PERMISSION_755);
         }
 
         BlobClient blobClient = blobContainerClient.getBlobClient(srcFilePath);

File: dolphinscheduler-storage-plugin/dolphinscheduler-storage-cos/src/main/java/org/apache/dolphinscheduler/plugin/storage/cos/CosStorageOperator.java
Patch:
@@ -148,7 +148,7 @@ public void download(String srcFilePath, String dstFilePath, boolean overwrite)
         if (dstFile.isDirectory()) {
             Files.delete(dstFile.toPath());
         } else {
-            FileUtils.createDirectoryWith755(dstFile.getParentFile().toPath());
+            FileUtils.createDirectoryWithPermission(dstFile.getParentFile().toPath(), FileUtils.PERMISSION_755);
         }
 
         GetObjectRequest getObjectRequest = new GetObjectRequest(bucketName, cosKey);

File: dolphinscheduler-storage-plugin/dolphinscheduler-storage-gcs/src/main/java/org/apache/dolphinscheduler/plugin/storage/gcs/GcsStorageOperator.java
Patch:
@@ -112,7 +112,7 @@ public void download(String srcFilePath, String dstFilePath, boolean overwrite)
         if (dstFile.isDirectory()) {
             Files.delete(dstFile.toPath());
         } else {
-            FileUtils.createDirectoryWith755(dstFile.getParentFile().toPath());
+            FileUtils.createDirectoryWithPermission(dstFile.getParentFile().toPath(), FileUtils.PERMISSION_755);
         }
 
         Blob blob = gcsStorage.get(BlobId.of(bucketName, srcFilePath));

File: dolphinscheduler-storage-plugin/dolphinscheduler-storage-obs/src/main/java/org/apache/dolphinscheduler/plugin/storage/obs/ObsStorageOperator.java
Patch:
@@ -111,7 +111,7 @@ public void download(String srcFilePath, String dstFilePath, boolean overwrite)
         if (dstFile.isDirectory()) {
             Files.delete(dstFile.toPath());
         } else {
-            FileUtils.createDirectoryWith755(dstFile.getParentFile().toPath());
+            FileUtils.createDirectoryWithPermission(dstFile.getParentFile().toPath(), FileUtils.PERMISSION_755);
         }
         ObsObject obsObject = obsClient.getObject(bucketName, srcFilePath);
         try (

File: dolphinscheduler-storage-plugin/dolphinscheduler-storage-oss/src/main/java/org/apache/dolphinscheduler/plugin/storage/oss/OssStorageOperator.java
Patch:
@@ -169,7 +169,7 @@ public void download(String srcFilePath,
         if (dstFile.isDirectory()) {
             Files.delete(dstFile.toPath());
         } else {
-            FileUtils.createDirectoryWith755(dstFile.getParentFile().toPath());
+            FileUtils.createDirectoryWithPermission(dstFile.getParentFile().toPath(), FileUtils.PERMISSION_755);
         }
         OSSObject ossObject = ossClient.getObject(bucketName, srcFilePath);
         try (

File: dolphinscheduler-storage-plugin/dolphinscheduler-storage-s3/src/main/java/org/apache/dolphinscheduler/plugin/storage/s3/S3StorageOperator.java
Patch:
@@ -113,7 +113,7 @@ public void download(String srcFilePath,
         if (dstFile.isDirectory()) {
             Files.delete(dstFile.toPath());
         } else {
-            FileUtils.createDirectoryWith755(dstFile.getParentFile().toPath());
+            FileUtils.createDirectoryWithPermission(dstFile.getParentFile().toPath(), FileUtils.PERMISSION_755);
         }
         S3Object o = s3Client.getObject(bucketName, srcFilePath);
         try (

File: dolphinscheduler-worker/src/main/java/org/apache/dolphinscheduler/server/worker/utils/TaskExecutionContextUtils.java
Patch:
@@ -50,7 +50,8 @@ public static void createTaskInstanceWorkingDirectory(TaskExecutionContext taskE
                 log.warn("The TaskInstance WorkingDirectory: {} is exist, will recreate again",
                         taskInstanceWorkingDirectory);
             }
-            FileUtils.createDirectoryWith755(Paths.get(taskInstanceWorkingDirectory));
+
+            FileUtils.createDirectoryWithPermission(Paths.get(taskInstanceWorkingDirectory), FileUtils.PERMISSION_775);
 
             taskExecutionContext.setExecutePath(taskInstanceWorkingDirectory);
             taskExecutionContext.setAppInfoPath(FileUtils.getAppInfoPath(taskInstanceWorkingDirectory));

File: dolphinscheduler-worker/src/test/java/org/apache/dolphinscheduler/server/worker/utils/TaskExecutionContextUtilsTest.java
Patch:
@@ -44,7 +44,7 @@ void createTaskInstanceWorkingDirectory() throws IOException {
         try {
             // Test if the working directory is exist
             // will delete it and recreate
-            FileUtils.createDirectoryWith755(Paths.get(taskWorkingDirectory));
+            FileUtils.createDirectoryWithPermission(Paths.get(taskWorkingDirectory), FileUtils.PERMISSION_775);
             Files.createFile(Paths.get(taskWorkingDirectory, "text.txt"));
             Assertions.assertTrue(Files.exists(Paths.get(taskWorkingDirectory, "text.txt")));
 

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/parser/PropertyPlaceholderHelper.java
Patch:
@@ -119,7 +119,7 @@ public String resolvePlaceholder(String placeholderName) {
      */
     public String replacePlaceholders(String value, PlaceholderResolver placeholderResolver) {
         notNull(value, "'value' must not be null");
-        return parseStringValue(value, placeholderResolver, new HashSet<String>());
+        return parseStringValue(value, placeholderResolver, new HashSet<>());
     }
 
     protected String parseStringValue(

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/am/ApplicationManager.java
Patch:
@@ -19,15 +19,15 @@
 
 import org.apache.dolphinscheduler.plugin.task.api.enums.ResourceManagerType;
 
-public interface ApplicationManager {
+public interface ApplicationManager<T extends ApplicationManagerContext> {
 
     /**
      * kill application by application manager context
      *
      * @param applicationManagerContext
      * @return
      */
-    boolean killApplication(ApplicationManagerContext applicationManagerContext);
+    boolean killApplication(T applicationManagerContext);
 
     /**
      * get resource manager type

File: dolphinscheduler-alert/dolphinscheduler-alert-server/src/main/java/org/apache/dolphinscheduler/alert/registry/AlertHeartbeatTask.java
Patch:
@@ -87,7 +87,7 @@ public void writeHeartBeat(AlertServerHeartBeat heartBeat) {
         String heartBeatJson = JSONUtils.toJsonString(heartBeat);
         registryClient.persistEphemeral(heartBeatPath, heartBeatJson);
         AlertServerMetrics.incAlertHeartbeatCount();
-        log.debug("Success write master heartBeatInfo into registry, masterRegistryPath: {}, heartBeatInfo: {}",
+        log.debug("Success write alert heartBeatInfo into registry, alertRegistryPath: {}, heartBeatInfo: {}",
                 heartBeatPath, heartBeatJson);
     }
 }

File: dolphinscheduler-registry/dolphinscheduler-registry-plugins/dolphinscheduler-registry-it/src/test/java/org/apache/dolphinscheduler/plugin/registry/RegistryTestCase.java
Patch:
@@ -28,6 +28,7 @@
 import org.apache.dolphinscheduler.registry.api.SubscribeListener;
 
 import java.time.Duration;
+import java.util.Arrays;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.TimeoutException;
@@ -172,8 +173,8 @@ public void testChildren() {
         registry.put(master1, value, true);
         registry.put(master2, value, true);
         assertThat(registry.children("/nodes/children")).containsExactly("childGroup1");
-        assertThat(registry.children("/nodes/children/childGroup1")).containsExactly("127.0.0.1:8080",
-                "127.0.0.2:8080");
+        assertThat(registry.children("/nodes/children/childGroup1")).containsExactlyElementsIn(
+                Arrays.asList("127.0.0.1:8080", "127.0.0.2:8080"));
     }
 
     @Test

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java
Patch:
@@ -274,8 +274,6 @@ public enum Status {
     NOT_SUPPORT_SSO(10211, "Not support SSO login.", "不支持SSO登录"),
     STATE_CODE_ERROR(10212, "state inconsistency or state and code not pair", "状态码前后不一致或状态码和code不匹配"),
 
-    TASK_INSTANCE_NOT_DYNAMIC_TASK(10213, "task instance {0} is not dynamic", "任务实例[{0}]不是Dynamic类型"),
-
     CREATE_PROJECT_PARAMETER_ERROR(10214, "create project parameter error", "创建项目参数错误"),
 
     UPDATE_PROJECT_PARAMETER_ERROR(10215, "update project parameter error", "更新项目参数错误"),

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/placeholder/BusinessTimeUtils.java
Patch:
@@ -59,7 +59,6 @@ public static Map<String, String> getBusinessTime(CommandType commandType, Date
             case RECOVER_SUSPENDED_PROCESS:
             case START_FAILURE_TASK_PROCESS:
             case REPEAT_RUNNING:
-            case DYNAMIC_GENERATION:
             case SCHEDULER:
             default:
                 businessDate = addDays(new Date(), -1);

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/repository/impl/WorkflowInstanceDaoImplTest.java
Patch:
@@ -64,9 +64,7 @@ void queryByWorkflowCodeVersionStatus_EXIST_NOT_FINISH_INSTANCE() {
                 WorkflowExecutionStatus.READY_STOP));
         workflowInstanceDao.insert(createWorkflowInstance(workflowDefinitionCode, workflowDefinitionVersion,
                 WorkflowExecutionStatus.SERIAL_WAIT));
-        workflowInstanceDao.insert(createWorkflowInstance(workflowDefinitionCode, workflowDefinitionVersion,
-                WorkflowExecutionStatus.WAIT_TO_RUN));
-        assertEquals(5, workflowInstanceDao
+        assertEquals(4, workflowInstanceDao
                 .queryByWorkflowCodeVersionStatus(workflowDefinitionCode, workflowDefinitionVersion, status).size());
     }
 

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/engine/workflow/statemachine/IWorkflowStateAction.java
Patch:
@@ -43,7 +43,6 @@
  * @see WorkflowFailedStateAction
  * @see WorkflowSuccessStateAction
  * @see WorkflowFailoverStateAction
- * @see WorkflowWaitToRunStateAction
  */
 public interface IWorkflowStateAction {
 

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/subworkflow/SubWorkflowService.java
Patch:
@@ -38,8 +38,6 @@ public interface SubWorkflowService {
 
     List<WorkflowInstance> filterRunningProcessInstances(List<WorkflowInstance> workflowInstanceList);
 
-    List<WorkflowInstance> filterWaitToRunProcessInstances(List<WorkflowInstance> workflowInstanceList);
-
     List<WorkflowInstance> filterFailedProcessInstances(List<WorkflowInstance> workflowInstanceList);
 
     List<Property> getWorkflowOutputParameters(WorkflowInstance workflowInstance);

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/test/java/org/apache/dolphinscheduler/plugin/task/api/TaskPluginManagerTest.java
Patch:
@@ -21,7 +21,6 @@
 
 import org.apache.dolphinscheduler.plugin.task.api.task.ConditionsLogicTaskChannelFactory;
 import org.apache.dolphinscheduler.plugin.task.api.task.DependentLogicTaskChannelFactory;
-import org.apache.dolphinscheduler.plugin.task.api.task.DynamicLogicTaskChannelFactory;
 import org.apache.dolphinscheduler.plugin.task.api.task.SubWorkflowLogicTaskChannelFactory;
 import org.apache.dolphinscheduler.plugin.task.api.task.SwitchLogicTaskChannelFactory;
 
@@ -34,7 +33,6 @@ class TaskPluginManagerTest {
     @ValueSource(strings = {
             ConditionsLogicTaskChannelFactory.NAME,
             DependentLogicTaskChannelFactory.NAME,
-            DynamicLogicTaskChannelFactory.NAME,
             SubWorkflowLogicTaskChannelFactory.NAME,
             SwitchLogicTaskChannelFactory.NAME})
     void testGetTaskChannel_logicTaskChannel(String type) {

File: dolphinscheduler-registry/dolphinscheduler-registry-plugins/dolphinscheduler-registry-jdbc/src/main/java/org/apache/dolphinscheduler/plugin/registry/jdbc/JdbcRegistry.java
Patch:
@@ -262,6 +262,7 @@ public void close() {
         log.info("Closing Jdbc Registry...");
         // remove the current Ephemeral node, if can connect to jdbc
         try (JdbcRegistryClient closed1 = jdbcRegistryClient) {
+            JdbcRegistryThreadFactory.getDefaultSchedulerThreadExecutor().shutdownNow();
         } catch (Exception e) {
             log.error("Close Jdbc Registry error", e);
         }

File: dolphinscheduler-registry/dolphinscheduler-registry-plugins/dolphinscheduler-registry-jdbc/src/main/java/org/apache/dolphinscheduler/plugin/registry/jdbc/model/DTO/JdbcRegistryClientHeartbeatDTO.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.dolphinscheduler.plugin.registry.jdbc.model.DO.JdbcRegistryClientHeartbeat;
 
 import java.util.Date;
+import java.util.concurrent.TimeUnit;
 
 import lombok.AllArgsConstructor;
 import lombok.Builder;
@@ -36,7 +37,6 @@ public class JdbcRegistryClientHeartbeatDTO {
 
     private Long id;
 
-    // clientName
     private String clientName;
 
     private Long lastHeartbeatTime;
@@ -90,7 +90,7 @@ public JdbcRegistryClientHeartbeatDTO clone() {
     public static class ClientConfig {
 
         @Builder.Default
-        private long sessionTimeout = 60 * 1000L;
+        private long sessionTimeout = TimeUnit.SECONDS.toMillis(60);
 
     }
 

File: dolphinscheduler-api-test/dolphinscheduler-api-test-case/src/test/java/org/apache/dolphinscheduler/api/test/cases/ExecutorAPITest.java
Patch:
@@ -47,10 +47,12 @@
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Order;
 import org.junit.jupiter.api.Test;
+import org.junitpioneer.jupiter.DisableIfTestFails;
 
 //TODO: Some test cases rely on WorkflowInstance APIs. Should complete remaining cases after WorkflowInstance related API tests done.
 @DolphinScheduler(composeFiles = "docker/basic/docker-compose.yaml")
 @Slf4j
+@DisableIfTestFails
 public class ExecutorAPITest {
 
     private static final String username = "admin";

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/security/impl/pwd/PasswordAuthenticator.java
Patch:
@@ -23,7 +23,7 @@
 public class PasswordAuthenticator extends AbstractAuthenticator {
 
     @Override
-    public User login(String userId, String password) {
-        return userService.queryUser(userId, password);
+    public User login(String userName, String password) {
+        return userService.queryUser(userName, password);
     }
 }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/security/impl/sso/CasdoorAuthenticator.java
Patch:
@@ -48,7 +48,7 @@ public class CasdoorAuthenticator extends AbstractSsoAuthenticator {
     private String adminUserName;
 
     @Override
-    public User login(@NonNull String state, String code) {
+    public User login(@NonNull String userName, String code) {
         ServletRequestAttributes servletRequestAttributes =
                 (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
         if (servletRequestAttributes == null) {
@@ -59,11 +59,11 @@ public User login(@NonNull String state, String code) {
         // Invalid state
         request.getSession().setAttribute(Constants.SSO_LOGIN_USER_STATE, null);
         // Check state to protect from CSRF attack
-        if (originalState == null || !MessageDigest.isEqual(originalState.getBytes(), state.getBytes())) {
+        if (originalState == null || !MessageDigest.isEqual(originalState.getBytes(), userName.getBytes())) {
             return null;
         }
 
-        String token = casdoorAuthService.getOAuthToken(code, state);
+        String token = casdoorAuthService.getOAuthToken(code, userName);
         CasdoorUser casdoorUser = casdoorAuthService.parseJwtToken(token);
         User user = null;
         if (casdoorUser.getName() != null) {

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/security/SecurityConfigLDAPTest.java
Patch:
@@ -27,6 +27,7 @@
 
 @TestPropertySource(properties = {
         "security.authentication.type=LDAP",
+        "security.authentication.ldap.user.not-exist-action=CREATE"
 })
 public class SecurityConfigLDAPTest extends AbstractControllerTest {
 

File: dolphinscheduler-alert/dolphinscheduler-alert-server/src/main/java/org/apache/dolphinscheduler/alert/service/AbstractEventSender.java
Patch:
@@ -83,10 +83,10 @@ public void sendEvent(T event) {
             alertSendStatuses.add(alertSendStatus);
         }
         long failureCount = alertSendStatuses.stream()
-                .map(alertSendStatus -> alertSendStatus.getSendStatus() == AlertStatus.EXECUTION_FAILURE)
+                .filter(alertSendStatus -> alertSendStatus.getSendStatus() == AlertStatus.EXECUTION_FAILURE)
                 .count();
         long successCount = alertSendStatuses.stream()
-                .map(alertSendStatus -> alertSendStatus.getSendStatus() == AlertStatus.EXECUTION_SUCCESS)
+                .filter(alertSendStatus -> alertSendStatus.getSendStatus() == AlertStatus.EXECUTION_SUCCESS)
                 .count();
         if (successCount == 0) {
             onError(event, JSONUtils.toJsonString(alertSendStatuses));

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/engine/graph/WorkflowExecutionGraph.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.dolphinscheduler.server.master.engine.graph;
 
+import org.apache.dolphinscheduler.common.enums.Flag;
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
 import org.apache.dolphinscheduler.plugin.task.api.enums.TaskExecutionStatus;
 import org.apache.dolphinscheduler.plugin.task.api.utils.TaskTypeUtils;
@@ -252,7 +253,7 @@ public boolean isTaskExecutionRunnableSkipped(final ITaskExecutionRunnable taskE
 
     @Override
     public boolean isTaskExecutionRunnableForbidden(final ITaskExecutionRunnable taskExecutionRunnable) {
-        return false;
+        return (taskExecutionRunnable.getTaskDefinition().getFlag() == Flag.NO);
     }
 
     /**

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/cluster/ClusterManager.java
Patch:
@@ -51,6 +51,7 @@ public void start() {
         this.registryClient.subscribe(RegistryNodeType.MASTER.getRegistryPath(), masterClusters);
         this.registryClient.subscribe(RegistryNodeType.WORKER.getRegistryPath(), workerClusters);
         this.workerGroupChangeNotifier.subscribeWorkerGroupsChange(workerClusters);
+        this.workerGroupChangeNotifier.start();
         log.info("ClusterManager started...");
     }
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProjectParameterServiceImpl.java
Patch:
@@ -101,6 +101,7 @@ public Result createProjectParameter(User loginUser, long projectCode, String pr
                     .code(CodeGenerateUtils.genCode())
                     .projectCode(projectCode)
                     .userId(loginUser.getId())
+                    .operator(loginUser.getId())
                     .createTime(now)
                     .updateTime(now)
                     .build();

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProjectParameterServiceTest.java
Patch:
@@ -114,6 +114,9 @@ public void testCreateProjectParameter() {
         result = projectParameterService.createProjectParameter(loginUser, projectCode, "key1", "value",
                 DataType.VARCHAR.name());
         assertEquals(Status.SUCCESS.getCode(), result.getCode());
+
+        ProjectParameter projectParameter = (ProjectParameter) result.getData();
+        assertEquals(loginUser.getId(), projectParameter.getOperator());
     }
 
     @Test

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/GlobalTaskDispatchWaitingQueueLooper.java
Patch:
@@ -80,7 +80,7 @@ void doDispatch() {
             // If dispatch failed, will put the task back to the queue
             // The task will be dispatched after waiting time.
             // the waiting time will increase multiple of times, but will not exceed 60 seconds
-            long waitingTimeMills = Math.max(
+            long waitingTimeMills = Math.min(
                     taskExecutionRunnable.getTaskExecutionContext().increaseDispatchFailTimes() * 1_000L, 60_000L);
             globalTaskDispatchWaitingQueue.dispatchTaskExecuteRunnableWithDelay(taskExecutionRunnable,
                     waitingTimeMills);

File: dolphinscheduler-alert/dolphinscheduler-alert-plugins/dolphinscheduler-alert-dingtalk/src/main/java/org/apache/dolphinscheduler/plugin/alert/dingtalk/DingTalkAlertChannelFactory.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.dolphinscheduler.alert.api.AlertChannel;
 import org.apache.dolphinscheduler.alert.api.AlertChannelFactory;
 import org.apache.dolphinscheduler.alert.api.AlertInputTips;
+import org.apache.dolphinscheduler.common.utils.JSONUtils;
 import org.apache.dolphinscheduler.spi.params.base.DataType;
 import org.apache.dolphinscheduler.spi.params.base.ParamsOptions;
 import org.apache.dolphinscheduler.spi.params.base.PluginParams;
@@ -137,7 +138,7 @@ public List<PluginParams> params() {
                 .build();
         InputParam passwordParam = InputParam
                 .newBuilder(DingTalkParamsConstants.NAME_DING_TALK_PASSWORD, DingTalkParamsConstants.DING_TALK_PASSWORD)
-                .setPlaceholder(AlertInputTips.PASSWORD.getMsg())
+                .setPlaceholder(JSONUtils.toJsonString(AlertInputTips.getAllMsg(AlertInputTips.PASSWORD)))
                 .setType("password")
                 .build();
 

File: dolphinscheduler-alert/dolphinscheduler-alert-plugins/dolphinscheduler-alert-feishu/src/main/java/org/apache/dolphinscheduler/plugin/alert/feishu/FeiShuAlertChannelFactory.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.dolphinscheduler.alert.api.AlertChannel;
 import org.apache.dolphinscheduler.alert.api.AlertChannelFactory;
 import org.apache.dolphinscheduler.alert.api.AlertInputTips;
+import org.apache.dolphinscheduler.common.utils.JSONUtils;
 import org.apache.dolphinscheduler.spi.params.base.DataType;
 import org.apache.dolphinscheduler.spi.params.base.ParamsOptions;
 import org.apache.dolphinscheduler.spi.params.base.PluginParams;
@@ -86,7 +87,7 @@ public List<PluginParams> params() {
                         .build();
         InputParam passwordParam = InputParam
                 .newBuilder(FeiShuParamsConstants.NAME_FEI_SHU_PASSWORD, FeiShuParamsConstants.FEI_SHU_PASSWORD)
-                .setPlaceholder(AlertInputTips.PASSWORD.getMsg())
+                .setPlaceholder(JSONUtils.toJsonString(AlertInputTips.getAllMsg(AlertInputTips.PASSWORD)))
                 .setType("password")
                 .build();
 

File: dolphinscheduler-alert/dolphinscheduler-alert-plugins/dolphinscheduler-alert-script/src/main/java/org/apache/dolphinscheduler/plugin/alert/script/ScriptAlertChannelFactory.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.dolphinscheduler.alert.api.AlertChannel;
 import org.apache.dolphinscheduler.alert.api.AlertChannelFactory;
 import org.apache.dolphinscheduler.alert.api.AlertInputTips;
+import org.apache.dolphinscheduler.common.utils.JSONUtils;
 import org.apache.dolphinscheduler.spi.params.base.ParamsOptions;
 import org.apache.dolphinscheduler.spi.params.base.PluginParams;
 import org.apache.dolphinscheduler.spi.params.base.Validate;
@@ -47,15 +48,15 @@ public List<PluginParams> params() {
                 .addValidate(Validate.newBuilder()
                         .setRequired(false)
                         .build())
-                .setPlaceholder(AlertInputTips.CUSTOMIZED_PARAMS.getMsg())
+                .setPlaceholder(JSONUtils.toJsonString(AlertInputTips.getAllMsg(AlertInputTips.CUSTOMIZED_PARAMS)))
                 .build();
         // need check file type and file exist
         InputParam scriptPathParam =
                 InputParam.newBuilder(ScriptParamsConstants.NAME_SCRIPT_PATH, ScriptParamsConstants.SCRIPT_PATH)
                         .addValidate(Validate.newBuilder()
                                 .setRequired(true)
                                 .build())
-                        .setPlaceholder(AlertInputTips.SCRIPT_PATH.getMsg())
+                        .setPlaceholder(JSONUtils.toJsonString(AlertInputTips.getAllMsg(AlertInputTips.SCRIPT_PATH)))
                         .build();
 
         RadioParam scriptTypeParams = RadioParam

File: dolphinscheduler-alert/dolphinscheduler-alert-plugins/dolphinscheduler-alert-slack/src/main/java/org/apache/dolphinscheduler/plugin/alert/slack/SlackAlertChannelFactory.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.dolphinscheduler.alert.api.AlertChannel;
 import org.apache.dolphinscheduler.alert.api.AlertChannelFactory;
 import org.apache.dolphinscheduler.alert.api.AlertInputTips;
+import org.apache.dolphinscheduler.common.utils.JSONUtils;
 import org.apache.dolphinscheduler.spi.params.base.PluginParams;
 import org.apache.dolphinscheduler.spi.params.base.Validate;
 import org.apache.dolphinscheduler.spi.params.input.InputParam;
@@ -46,14 +47,14 @@ public List<PluginParams> params() {
                 .addValidate(Validate.newBuilder()
                         .setRequired(true)
                         .build())
-                .setPlaceholder(AlertInputTips.WEBHOOK.getMsg())
+                .setPlaceholder(JSONUtils.toJsonString(AlertInputTips.getAllMsg(AlertInputTips.WEBHOOK)))
                 .build();
 
         InputParam botName = InputParam.newBuilder(SlackParamsConstants.SLACK_BOT_NAME, SlackParamsConstants.SLACK_BOT)
                 .addValidate(Validate.newBuilder()
                         .setRequired(true)
                         .build())
-                .setPlaceholder(AlertInputTips.BOT_NAME.getMsg())
+                .setPlaceholder(JSONUtils.toJsonString(AlertInputTips.getAllMsg(AlertInputTips.BOT_NAME)))
                 .build();
 
         paramsList.add(webHookParam);

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/engine/command/handler/RecoverFailureTaskCommandHandler.java
Patch:
@@ -123,6 +123,7 @@ protected void assembleWorkflowExecutionGraph(final WorkflowExecuteContextBuilde
                             .builder()
                             .workflowExecutionGraph(workflowExecutionGraph)
                             .workflowDefinition(workflowExecuteContextBuilder.getWorkflowDefinition())
+                            .project(workflowExecuteContextBuilder.getProject())
                             .workflowInstance(workflowExecuteContextBuilder.getWorkflowInstance())
                             .taskDefinition(workflowGraph.getTaskNodeByName(task))
                             .taskInstance(taskInstanceMap.get(task))

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/engine/command/handler/RunWorkflowCommandHandler.java
Patch:
@@ -98,6 +98,7 @@ protected void assembleWorkflowExecutionGraph(final WorkflowExecuteContextBuilde
                             .builder()
                             .workflowExecutionGraph(workflowExecutionGraph)
                             .workflowDefinition(workflowExecuteContextBuilder.getWorkflowDefinition())
+                            .project(workflowExecuteContextBuilder.getProject())
                             .workflowInstance(workflowExecuteContextBuilder.getWorkflowInstance())
                             .taskDefinition(workflowGraph.getTaskNodeByName(task))
                             .workflowEventBus(workflowExecuteContextBuilder.getWorkflowEventBus())

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/engine/command/handler/WorkflowFailoverCommandHandler.java
Patch:
@@ -119,6 +119,7 @@ protected void assembleWorkflowExecutionGraph(final WorkflowExecuteContextBuilde
                             .builder()
                             .workflowExecutionGraph(workflowExecutionGraph)
                             .workflowDefinition(workflowExecuteContextBuilder.getWorkflowDefinition())
+                            .project(workflowExecuteContextBuilder.getProject())
                             .workflowInstance(workflowExecuteContextBuilder.getWorkflowInstance())
                             .taskDefinition(workflowGraph.getTaskNodeByName(task))
                             .taskInstance(taskInstanceMap.get(task))

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/engine/task/runnable/TaskExecutionContextCreateRequest.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.dolphinscheduler.server.master.engine.task.runnable;
 
+import org.apache.dolphinscheduler.dao.entity.Project;
 import org.apache.dolphinscheduler.dao.entity.TaskDefinition;
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
 import org.apache.dolphinscheduler.dao.entity.WorkflowDefinition;
@@ -35,5 +36,6 @@ public class TaskExecutionContextCreateRequest {
     private WorkflowInstance workflowInstance;
     private TaskDefinition taskDefinition;
     private TaskInstance taskInstance;
+    private Project project;
 
 }

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/engine/task/runnable/TaskExecutionRunnableBuilder.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.dolphinscheduler.server.master.engine.task.runnable;
 
+import org.apache.dolphinscheduler.dao.entity.Project;
 import org.apache.dolphinscheduler.dao.entity.TaskDefinition;
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
 import org.apache.dolphinscheduler.dao.entity.WorkflowDefinition;
@@ -37,6 +38,7 @@ public class TaskExecutionRunnableBuilder {
 
     private final IWorkflowExecutionGraph workflowExecutionGraph;
     private final WorkflowDefinition workflowDefinition;
+    private final Project project;
     private final WorkflowInstance workflowInstance;
     private final TaskDefinition taskDefinition;
     private final TaskInstance taskInstance;

File: dolphinscheduler-master/src/test/java/org/apache/dolphinscheduler/server/master/runner/GlobalTaskDispatchWaitingQueueLooperTest.java
Patch:
@@ -28,6 +28,7 @@
 import static org.mockito.Mockito.when;
 
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
+import org.apache.dolphinscheduler.dao.entity.Project;
 import org.apache.dolphinscheduler.dao.entity.TaskDefinition;
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
 import org.apache.dolphinscheduler.dao.entity.WorkflowDefinition;
@@ -118,6 +119,7 @@ private ITaskExecutionRunnable createTaskExecuteRunnable(final TaskInstance task
                 .taskInstance(taskInstance)
                 .workflowExecutionGraph(new WorkflowExecutionGraph())
                 .workflowDefinition(new WorkflowDefinition())
+                .project(new Project())
                 .taskDefinition(new TaskDefinition())
                 .workflowEventBus(new WorkflowEventBus())
                 .build();

File: dolphinscheduler-master/src/test/java/org/apache/dolphinscheduler/server/master/runner/GlobalTaskDispatchWaitingQueueTest.java
Patch:
@@ -24,6 +24,7 @@
 import static org.mockito.Mockito.when;
 
 import org.apache.dolphinscheduler.common.enums.Priority;
+import org.apache.dolphinscheduler.dao.entity.Project;
 import org.apache.dolphinscheduler.dao.entity.TaskDefinition;
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
 import org.apache.dolphinscheduler.dao.entity.WorkflowDefinition;
@@ -194,6 +195,7 @@ private ITaskExecutionRunnable createTaskExecuteRunnable() {
                 .taskInstance(taskInstance)
                 .workflowExecutionGraph(new WorkflowExecutionGraph())
                 .workflowDefinition(new WorkflowDefinition())
+                .project(new Project())
                 .taskDefinition(new TaskDefinition())
                 .workflowEventBus(new WorkflowEventBus())
                 .build();

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/k8s/impl/K8sTaskExecutor.java
Patch:
@@ -319,6 +319,8 @@ public TaskResponse run(String k8sParameterStr) throws Exception {
             Thread.currentThread().interrupt();
             result.setExitStatusCode(EXIT_CODE_FAILURE);
             throw e;
+        } finally {
+            ProcessUtils.removeK8sClientCache(taskRequest.getTaskAppId());
         }
         return result;
     }

File: dolphinscheduler-alert/dolphinscheduler-alert-server/src/main/java/org/apache/dolphinscheduler/alert/AlertServer.java
Patch:
@@ -56,6 +56,7 @@ public static void main(String[] args) {
 
     @PostConstruct
     public void run() {
+        ServerLifeCycleManager.toRunning();
         log.info("AlertServer is staring ...");
         alertBootstrapService.start();
         log.info("AlertServer is started ...");

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/ApiApplicationServer.java
Patch:
@@ -19,6 +19,7 @@
 
 import org.apache.dolphinscheduler.api.metrics.ApiServerMetrics;
 import org.apache.dolphinscheduler.common.CommonConfiguration;
+import org.apache.dolphinscheduler.common.lifecycle.ServerLifeCycleManager;
 import org.apache.dolphinscheduler.common.thread.DefaultUncaughtExceptionHandler;
 import org.apache.dolphinscheduler.dao.DaoConfiguration;
 import org.apache.dolphinscheduler.dao.PluginDao;
@@ -59,6 +60,7 @@ public static void main(String[] args) {
 
     @EventListener
     public void run(ApplicationReadyEvent readyEvent) {
+        ServerLifeCycleManager.toRunning();
         log.info("Received spring application context ready event will load taskPlugin and write to DB");
         DataSourceProcessorProvider.initialize();
         TaskPluginManager.loadTaskPlugin();

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/engine/WorkflowEngine.java
Patch:
@@ -59,7 +59,8 @@ public void close() throws Exception {
         try (
                 final CommandEngine commandEngine1 = commandEngine;
                 final WorkflowEventBusCoordinator workflowEventBusCoordinator1 = workflowEventBusCoordinator;
-                final MasterTaskExecutorBootstrap masterTaskExecutorBootstrap1 = masterTaskExecutorBootstrap;) {
+                final MasterTaskExecutorBootstrap masterTaskExecutorBootstrap1 = masterTaskExecutorBootstrap;
+                final TaskGroupCoordinator taskGroupCoordinator1 = taskGroupCoordinator) {
             // closed the resource
         }
     }

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/engine/command/handler/AbstractCommandHandler.java
Patch:
@@ -91,8 +91,7 @@ protected void assembleWorkflowEventBus(
 
     protected void assembleWorkflowInstanceLifecycleListeners(
                                                               final WorkflowExecuteContextBuilder workflowExecuteContextBuilder) {
-        workflowExecuteContextBuilder.setWorkflowInstanceLifecycleListeners(
-                workflowExecuteContextBuilder.getWorkflowInstanceLifecycleListeners());
+        workflowExecuteContextBuilder.setWorkflowInstanceLifecycleListeners(workflowLifecycleListeners);
     }
 
     protected void assembleWorkflowDefinition(

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/engine/task/runnable/TaskExecutionRunnable.java
Patch:
@@ -126,6 +126,7 @@ public void failover() {
                 .withTaskInstance(taskInstance)
                 .build();
         initializeTaskExecutionContext();
+
         getWorkflowEventBus().publish(TaskStartLifecycleEvent.of(this));
     }
 

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/engine/workflow/listener/WorkflowSuccessLifecycleListener.java
Patch:
@@ -63,7 +63,7 @@ public void notifyWorkflowLifecycleEvent(final IWorkflowExecutionRunnable workfl
         final ICommandParam commandParam =
                 JSONUtils.parseObject(workflowInstance.getCommandParam(), ICommandParam.class);
         if (commandParam == null) {
-            log.warn("Command param: {} is invalid for workflow{}", workflowInstance.getCommandParam(),
+            log.warn("Command param: {} is invalid for workflow: {}", workflowInstance.getCommandParam(),
                     workflowInstance.getName());
             return;
         }

File: dolphinscheduler-master/src/test/java/org/apache/dolphinscheduler/server/master/integration/Repository.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.server.master.it;
+package org.apache.dolphinscheduler.server.master.integration;
 
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
 import org.apache.dolphinscheduler.dao.entity.WorkflowDefinition;

File: dolphinscheduler-master/src/test/java/org/apache/dolphinscheduler/server/master/integration/WorkflowOperator.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.server.master.it;
+package org.apache.dolphinscheduler.server.master.integration;
 
 import org.apache.dolphinscheduler.dao.entity.Project;
 import org.apache.dolphinscheduler.dao.entity.Schedule;
@@ -81,8 +81,8 @@ public void backfillWorkflow(final WorkflowBackfillDTO workflowBackfillDTO) {
                 .startParamList(workflowBackfillDTO.getBackfillWorkflowCommandParam().getCommandParams())
                 .backfillTimeList(workflowBackfillDTO.getBackfillWorkflowCommandParam().getBackfillTimeList())
                 .build();
-        final WorkflowBackfillTriggerResponse backfillTriggerResponse =
-                workflowInstanceController.backfillTriggerWorkflow(backfillTriggerRequest);
+        final WorkflowBackfillTriggerResponse backfillTriggerResponse = workflowInstanceController
+                .backfillTriggerWorkflow(backfillTriggerRequest);
 
         Assertions.assertThat(backfillTriggerResponse.isSuccess()).isTrue();
     }

File: dolphinscheduler-master/src/test/java/org/apache/dolphinscheduler/server/master/integration/WorkflowTestCaseContext.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.server.master.it;
+package org.apache.dolphinscheduler.server.master.integration;
 
 import org.apache.dolphinscheduler.dao.entity.Project;
 import org.apache.dolphinscheduler.dao.entity.TaskDefinition;
@@ -33,7 +33,7 @@
 @Data
 @NoArgsConstructor
 @AllArgsConstructor
-public class WorkflowITContext {
+public class WorkflowTestCaseContext {
 
     private Project project;
 

File: dolphinscheduler-master/src/test/java/org/apache/dolphinscheduler/server/master/integration/YamlFactory.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.server.master.it;
+package org.apache.dolphinscheduler.server.master.integration;
 
 import java.io.InputStream;
 
@@ -26,13 +26,13 @@
 public class YamlFactory {
 
     @SneakyThrows
-    public static WorkflowITContext load(final String yamlRelativePath) {
+    public static WorkflowTestCaseContext load(final String yamlRelativePath) {
         final Yaml yaml = new Yaml();
         try (InputStream fis = YamlFactory.class.getResourceAsStream(yamlRelativePath)) {
             if (fis == null) {
                 throw new IllegalArgumentException("Cannot find the file: " + yamlRelativePath + " under classpath");
             }
-            return yaml.loadAs(fis, WorkflowITContext.class);
+            return yaml.loadAs(fis, WorkflowTestCaseContext.class);
         }
     }
 

File: dolphinscheduler-registry/dolphinscheduler-registry-plugins/dolphinscheduler-registry-zookeeper/src/main/java/org/apache/dolphinscheduler/plugin/registry/zookeeper/ZookeeperRegistryAutoConfiguration.java
Patch:
@@ -39,7 +39,7 @@ public ZookeeperRegistryAutoConfiguration() {
 
     @Bean
     @ConditionalOnMissingBean(value = Registry.class)
-    public ZookeeperRegistry zookeeperRegistry(ZookeeperRegistryProperties zookeeperRegistryProperties) {
+    public Registry zookeeperRegistry(ZookeeperRegistryProperties zookeeperRegistryProperties) {
         ZookeeperRegistry zookeeperRegistry = new ZookeeperRegistry(zookeeperRegistryProperties);
         zookeeperRegistry.start();
         return zookeeperRegistry;

File: dolphinscheduler-registry/dolphinscheduler-registry-plugins/dolphinscheduler-registry-zookeeper/src/main/java/org/apache/dolphinscheduler/plugin/registry/zookeeper/ZookeeperRegistryProperties.java
Patch:
@@ -39,7 +39,7 @@
 @Configuration
 @ConditionalOnProperty(prefix = "registry", name = "type", havingValue = "zookeeper")
 @ConfigurationProperties(prefix = "registry")
-class ZookeeperRegistryProperties implements Validator {
+public class ZookeeperRegistryProperties implements Validator {
 
     private ZookeeperProperties zookeeper = new ZookeeperProperties();
 

File: dolphinscheduler-worker/src/main/java/org/apache/dolphinscheduler/server/worker/WorkerServer.java
Patch:
@@ -85,6 +85,7 @@ public static void main(String[] args) {
 
     @PostConstruct
     public void run() {
+        ServerLifeCycleManager.toRunning();
         this.workerRpcServer.start();
         TaskPluginManager.loadTaskPlugin();
         DataSourceProcessorProvider.initialize();

File: dolphinscheduler-worker/src/main/java/org/apache/dolphinscheduler/server/worker/registry/WorkerRegistryClient.java
Patch:
@@ -134,7 +134,7 @@ public void close() throws IOException {
             workerHeartBeatTask.shutdown();
         }
         registryClient.close();
-        log.info("Worker registry client closed");
+        log.info("Closed WorkerRegistryClient");
     }
 
     public boolean isAvailable() {

File: dolphinscheduler-alert/dolphinscheduler-alert-plugins/dolphinscheduler-alert-feishu/src/main/java/org/apache/dolphinscheduler/plugin/alert/feishu/FeiShuAlertChannel.java
Patch:
@@ -31,7 +31,7 @@ public AlertResult process(AlertInfo alertInfo) {
         AlertData alertData = alertInfo.getAlertData();
         Map<String, String> paramsMap = alertInfo.getAlertParams();
         if (null == paramsMap) {
-            return new AlertResult(false, "fei shu params is null");
+            return new AlertResult(false, "feishu params is null");
         }
         return new FeiShuSender(paramsMap).sendFeiShuMsg(alertData);
     }

File: dolphinscheduler-alert/dolphinscheduler-alert-plugins/dolphinscheduler-alert-feishu/src/test/java/org/apache/dolphinscheduler/plugin/alert/feishu/FeiShuSenderTest.java
Patch:
@@ -89,9 +89,10 @@ public void testCheckSendFeiShuSendMsgResult() {
         AlertResult alertResult = feiShuSender.checkSendFeiShuSendMsgResult("");
         Assertions.assertFalse(alertResult.isSuccess());
         AlertResult alertResult2 = feiShuSender.checkSendFeiShuSendMsgResult("123");
-        Assertions.assertEquals("send fei shu msg fail", alertResult2.getMessage());
+        Assertions.assertEquals("send feishu msg error: feishu server resp parse error is null.",
+                alertResult2.getMessage());
 
-        String response = "{\"StatusCode\":\"0\",\"extra\":\"extra\",\"StatusMessage\":\"StatusMessage\"}";
+        String response = "{\"code\":\"0\",\"data\":{},\"msg\":\"success\"}";
         AlertResult alertResult3 = feiShuSender.checkSendFeiShuSendMsgResult(response);
         Assertions.assertTrue(alertResult3.isSuccess());
     }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/executor/workflow/BackfillWorkflowExecutorDelegate.java
Patch:
@@ -65,7 +65,7 @@ public List<Integer> execute(final BackfillWorkflowDTO backfillWorkflowDTO) {
         if (backfillWorkflowDTO.getBackfillParams().getRunMode() == RunMode.RUN_MODE_SERIAL) {
             return doSerialBackfillWorkflow(backfillWorkflowDTO);
         } else {
-            return doParallemBackfillWorkflow(backfillWorkflowDTO);
+            return doParallelBackfillWorkflow(backfillWorkflowDTO);
         }
     }
 
@@ -84,7 +84,7 @@ private List<Integer> doSerialBackfillWorkflow(final BackfillWorkflowDTO backfil
         return Lists.newArrayList(workflowInstanceId);
     }
 
-    private List<Integer> doParallemBackfillWorkflow(final BackfillWorkflowDTO backfillWorkflowDTO) {
+    private List<Integer> doParallelBackfillWorkflow(final BackfillWorkflowDTO backfillWorkflowDTO) {
         final BackfillWorkflowDTO.BackfillParamsDTO backfillParams = backfillWorkflowDTO.getBackfillParams();
         Integer expectedParallelismNumber = backfillParams.getExpectedParallelismNumber();
 

File: dolphinscheduler-alert/dolphinscheduler-alert-plugins/dolphinscheduler-alert-feishu/src/main/java/org/apache/dolphinscheduler/plugin/alert/feishu/FeiShuSender.java
Patch:
@@ -134,7 +134,7 @@ public AlertResult sendFeiShuMsg(AlertData alertData) {
             String resp = sendMsg(alertData);
             return checkSendFeiShuSendMsgResult(resp);
         } catch (Exception e) {
-            log.info("send fei shu alert msg  exception : {}", e.getMessage());
+            log.error("send fei shu alert failed:", e);
             alertResult = new AlertResult();
             alertResult.setSuccess(false);
             alertResult.setMessage("send fei shu alert fail.");

File: dolphinscheduler-alert/dolphinscheduler-alert-server/src/main/java/org/apache/dolphinscheduler/alert/plugin/AlertPluginManager.java
Patch:
@@ -54,10 +54,10 @@ public AlertPluginManager(PluginDao pluginDao) {
     private final Map<Integer, AlertChannel> alertPluginMap = new HashMap<>();
 
     public void start() {
-        log.info("AlertPluginManager start ...");
+        log.info("AlertPluginManager start...");
         checkAlertPluginExist();
         installAlertPlugin();
-        log.info("AlertPluginManager started ...");
+        log.info("AlertPluginManager started...");
     }
 
     public Optional<AlertChannel> getAlertChannel(int id) {
@@ -70,7 +70,7 @@ public int size() {
 
     private void checkAlertPluginExist() {
         if (!pluginDao.checkPluginDefineTableExist()) {
-            log.error("Plugin Define Table t_ds_plugin_define Not Exist . Please Create it First !");
+            log.error("Plugin Define Table t_ds_plugin_define Not Exist. Please Create it First!");
             System.exit(1);
         }
     }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/interceptor/LocaleChangeInterceptor.java
Patch:
@@ -28,10 +28,10 @@
 import org.springframework.context.i18n.LocaleContextHolder;
 import org.springframework.lang.Nullable;
 import org.springframework.util.StringUtils;
-import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;
+import org.springframework.web.servlet.HandlerInterceptor;
 import org.springframework.web.util.WebUtils;
 
-public class LocaleChangeInterceptor extends HandlerInterceptorAdapter {
+public class LocaleChangeInterceptor implements HandlerInterceptor {
 
     @Override
     public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) {

File: dolphinscheduler-alert/dolphinscheduler-alert-plugins/dolphinscheduler-alert-dingtalk/src/main/java/org/apache/dolphinscheduler/plugin/alert/dingtalk/DingTalkAlertChannelFactory.java
Patch:
@@ -87,7 +87,7 @@ public List<PluginParams> params() {
                         .setRequired(false)
                         .build())
                 .build();
-        InputParam atUserIdsParam = InputParam
+        InputParam atDingtalkIdsParam = InputParam
                 .newBuilder(DingTalkParamsConstants.NAME_DING_TALK_AT_USERIDS,
                         DingTalkParamsConstants.DING_TALK_AT_USERIDS)
                 .addValidate(Validate.newBuilder()
@@ -141,7 +141,7 @@ public List<PluginParams> params() {
                 .setType("password")
                 .build();
 
-        return Arrays.asList(webHookParam, keywordParam, secretParam, msgTypeParam, atMobilesParam, atUserIdsParam,
+        return Arrays.asList(webHookParam, keywordParam, secretParam, msgTypeParam, atMobilesParam, atDingtalkIdsParam,
                 isAtAll, isEnableProxy, proxyParam, portParam, userParam, passwordParam);
     }
 

File: dolphinscheduler-alert/dolphinscheduler-alert-plugins/dolphinscheduler-alert-dingtalk/src/main/java/org/apache/dolphinscheduler/plugin/alert/dingtalk/DingTalkParamsConstants.java
Patch:
@@ -40,8 +40,8 @@ public final class DingTalkParamsConstants {
     static final String DING_TALK_AT_MOBILES = "$t('atMobiles')";
     static final String NAME_DING_TALK_AT_MOBILES = "AtMobiles";
 
-    static final String DING_TALK_AT_USERIDS = "$t('atUserIds')";
-    static final String NAME_DING_TALK_AT_USERIDS = "AtUserIds";
+    static final String DING_TALK_AT_USERIDS = "$t('atDingtalkIds')";
+    static final String NAME_DING_TALK_AT_USERIDS = "AtDingtalkIds";
 
     static final String DING_TALK_AT_ALL = "$t('isAtAll')";
     static final String NAME_DING_TALK_AT_ALL = "IsAtAll";

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/UsersServiceTest.java
Patch:
@@ -572,7 +572,7 @@ public void testGrantDataSource() {
         loginUser.setUserType(UserType.GENERAL_USER);
         result = usersService.grantDataSource(loginUser, userId, datasourceIds);
         logger.info(result.toString());
-        Assertions.assertEquals(Status.SUCCESS, result.get(Constants.STATUS));
+        Assertions.assertEquals(Status.USER_NO_OPERATION_PERM, result.get(Constants.STATUS));
 
     }
 

File: dolphinscheduler-e2e/dolphinscheduler-e2e-case/src/test/java/org/apache/dolphinscheduler/e2e/pages/project/ProjectDetailPage.java
Patch:
@@ -42,7 +42,7 @@ public final class ProjectDetailPage extends NavBarPage {
     @FindBy(css = ".tab-vertical .n-submenu:nth-of-type(2) .n-menu-item:nth-of-type(3) > .n-menu-item-content")
     private WebElement menuProcessInstances;
 
-    @FindBy(css = ".tab-vertical .n-submenu:nth-of-type(3) .n-menu-item:nth-of-type(2) > .n-menu-item-content")
+    @FindBy(xpath = "//div[contains(@class, 'n-menu-item-content')]//div[contains(., 'Task Instance')]")
     private WebElement menuTaskInstances;
 
     public ProjectDetailPage(RemoteWebDriver driver) {

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/validator/resource/UpdateFileDtoValidator.java
Patch:
@@ -43,7 +43,9 @@ public void validate(UpdateFileDto updateFileDto) {
         User loginUser = updateFileDto.getLoginUser();
         MultipartFile file = updateFileDto.getFile();
 
-        if (!Objects.equals(Files.getFileExtension(file.getName()),
+        if (!Objects.equals(
+                Files.getFileExtension(
+                        file.getOriginalFilename() == null ? file.getName() : file.getOriginalFilename()),
                 Files.getFileExtension(updateFileDto.getFileAbsolutePath()))) {
             throw new ServiceException("file extension cannot not change");
         }

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/ProcessTaskLineageMapper.java
Patch:
@@ -30,7 +30,7 @@ public interface ProcessTaskLineageMapper extends BaseMapper<ProcessTaskLineage>
 
     int batchDeleteByProcessDefinitionCode(@Param("processDefinitionCodes") List<Long> processDefinitionCodes);
 
-    int batchInsert(@Param("processLineages") List<ProcessTaskLineage> processTaskLineages);
+    int batchInsert(@Param("processTaskLineages") List<ProcessTaskLineage> processTaskLineages);
 
     List<ProcessTaskLineage> queryByProjectCode(@Param("projectCode") long projectCode);
 

File: dolphinscheduler-task-plugin/dolphinscheduler-task-procedure/src/main/java/org/apache/dolphinscheduler/plugin/task/procedure/ProcedureTask.java
Patch:
@@ -26,6 +26,7 @@
 import org.apache.dolphinscheduler.plugin.datasource.api.plugin.DataSourceProcessorProvider;
 import org.apache.dolphinscheduler.plugin.task.api.AbstractTask;
 import org.apache.dolphinscheduler.plugin.task.api.TaskCallBack;
+import org.apache.dolphinscheduler.plugin.task.api.TaskConstants;
 import org.apache.dolphinscheduler.plugin.task.api.TaskException;
 import org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContext;
 import org.apache.dolphinscheduler.plugin.task.api.enums.DataType;
@@ -131,9 +132,9 @@ public void cancel() throws TaskException {
     }
 
     private String formatSql(Map<Integer, Property> sqlParamsMap, Map<String, Property> paramsMap) {
-        setSqlParamsMap(procedureParameters.getMethod(), rgex, sqlParamsMap, paramsMap,
+        setSqlParamsMap(procedureParameters.getMethod(), sqlParamsMap, paramsMap,
                 taskExecutionContext.getTaskInstanceId());
-        return procedureParameters.getMethod().replaceAll(rgex, "?");
+        return procedureParameters.getMethod().replaceAll(TaskConstants.SQL_PARAMS_REGEX, "?");
     }
 
     /**

File: dolphinscheduler-registry/dolphinscheduler-registry-plugins/dolphinscheduler-registry-jdbc/src/main/java/org/apache/dolphinscheduler/plugin/registry/jdbc/JdbcRegistry.java
Patch:
@@ -212,6 +212,7 @@ public Collection<String> children(String key) {
                     .map(JdbcRegistryDataDTO::getDataKey)
                     .filter(fullPath -> fullPath.length() > key.length())
                     .map(fullPath -> StringUtils.substringBefore(fullPath.substring(key.length() + 1), "/"))
+                    .distinct()
                     .collect(Collectors.toList());
         } catch (Exception e) {
             throw new RegistryException(String.format("Get key: %s children error", key), e);

File: dolphinscheduler-spi/src/main/java/org/apache/dolphinscheduler/spi/datasource/BaseConnectionParam.java
Patch:
@@ -44,6 +44,8 @@ public abstract class BaseConnectionParam implements ConnectionParam {
 
     protected String validationQuery;
 
+    protected String compatibleMode;
+
     protected Map<String, String> other;
 
 }

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/JSONUtils.java
Patch:
@@ -60,6 +60,7 @@
 import com.fasterxml.jackson.databind.node.ObjectNode;
 import com.fasterxml.jackson.databind.node.TextNode;
 import com.fasterxml.jackson.databind.type.CollectionType;
+import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
 import com.google.common.base.Strings;
 
 /**
@@ -78,6 +79,7 @@ public final class JSONUtils {
             .configure(READ_UNKNOWN_ENUM_VALUES_AS_NULL, true)
             .configure(REQUIRE_SETTERS_FOR_GETTERS, true)
             .configure(FAIL_ON_EMPTY_BEANS, false)
+            .addModule(new JavaTimeModule())
             .addModule(new SimpleModule()
                     .addSerializer(LocalDateTime.class, new LocalDateTimeSerializer())
                     .addDeserializer(LocalDateTime.class, new LocalDateTimeDeserializer()))

File: dolphinscheduler-task-plugin/dolphinscheduler-task-remoteshell/src/main/java/org/apache/dolphinscheduler/plugin/task/remoteshell/RemoteExecutor.java
Patch:
@@ -131,7 +131,7 @@ public Integer getTaskExitCode(String taskId) throws IOException {
         int exitCode = -1;
         log.info("Remote shell task run status: {}", logLine);
         if (logLine.contains(STATUS_TAG_MESSAGE)) {
-            String status = StringUtils.substringAfter(logLine, STATUS_TAG_MESSAGE);
+            String status = StringUtils.substringAfter(logLine, STATUS_TAG_MESSAGE).trim();
             if (status.equals("0")) {
                 log.info("Remote shell task success");
                 exitCode = 0;

File: dolphinscheduler-alert/dolphinscheduler-alert-server/src/main/java/org/apache/dolphinscheduler/alert/service/AbstractEventSender.java
Patch:
@@ -122,7 +122,7 @@ public AlertResult doSendEvent(AlertPluginInstance instance, AlertData alertData
 
         AlertInfo alertInfo = AlertInfo.builder()
                 .alertData(alertData)
-                .alertParams(PluginParamsTransfer.getPluginParamsMap(instance.getPluginInstanceParams()))
+                .alertParams(JSONUtils.toMap(instance.getPluginInstanceParams()))
                 .alertPluginInstanceId(instance.getId())
                 .build();
         try {

File: dolphinscheduler-registry/dolphinscheduler-registry-plugins/dolphinscheduler-registry-jdbc/src/main/java/org/apache/dolphinscheduler/plugin/registry/jdbc/mapper/JdbcRegistryLockMapper.java
Patch:
@@ -38,7 +38,7 @@ public interface JdbcRegistryLockMapper extends BaseMapper<JdbcRegistryLock> {
 
     @Update({"<script>",
             "update t_ds_jdbc_registry_lock",
-            "set last_term = #{term}, last_update_time = #{lastUpdateTime}",
+            "set last_term = #{term}",
             "where id IN ",
             "<foreach item='id' index='index' collection='ids' open='(' separator=',' close=')'>",
             "   #{id}",

File: dolphinscheduler-task-plugin/dolphinscheduler-task-java/src/main/java/org/apache/dolphinscheduler/plugin/task/java/JavaTask.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.dolphinscheduler.plugin.task.java;
 
-import static org.apache.dolphinscheduler.common.constants.Constants.FOLDER_SEPARATOR;
 import static org.apache.dolphinscheduler.plugin.task.java.JavaConstants.JAVA_HOME_VAR;
 import static org.apache.dolphinscheduler.plugin.task.java.JavaConstants.PUBLIC_CLASS_NAME_REGEX;
 
@@ -187,7 +186,6 @@ protected String buildJarCommand() {
                 .append("java").append(" ")
                 .append(buildResourcePath()).append(" ")
                 .append("-jar").append(" ")
-                .append(taskRequest.getExecutePath()).append(FOLDER_SEPARATOR)
                 .append(mainJarAbsolutePathInLocal).append(" ")
                 .append(javaParameters.getMainArgs().trim()).append(" ")
                 .append(javaParameters.getJvmArgs().trim());

File: dolphinscheduler-e2e/dolphinscheduler-e2e-case/src/test/java/org/apache/dolphinscheduler/e2e/cases/ClickhouseDataSourceE2ETest.java
Patch:
@@ -23,6 +23,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 
 import org.apache.dolphinscheduler.e2e.core.DolphinScheduler;
+import org.apache.dolphinscheduler.e2e.core.WebDriverWaitFactory;
 import org.apache.dolphinscheduler.e2e.pages.LoginPage;
 import org.apache.dolphinscheduler.e2e.pages.datasource.DataSourcePage;
 
@@ -82,7 +83,7 @@ void testCreateClickhouseDataSource() {
 
         page.createDataSource(dataSourceType, dataSourceName, dataSourceDescription, ip, port, userName, pgPassword, database, jdbcParams);
 
-        new WebDriverWait(page.driver(), Duration.ofSeconds(20)).until(ExpectedConditions.invisibilityOfElementLocated(
+        WebDriverWaitFactory.createWebDriverWait(page.driver()).until(ExpectedConditions.invisibilityOfElementLocated(
                 new By.ByClassName("dialog-create-data-source")));
 
         Awaitility.await().untilAsserted(() -> assertThat(page.dataSourceItemsList())

File: dolphinscheduler-e2e/dolphinscheduler-e2e-case/src/test/java/org/apache/dolphinscheduler/e2e/cases/FileManageE2ETest.java
Patch:
@@ -24,6 +24,7 @@
 
 import org.apache.dolphinscheduler.e2e.core.Constants;
 import org.apache.dolphinscheduler.e2e.core.DolphinScheduler;
+import org.apache.dolphinscheduler.e2e.core.WebDriverWaitFactory;
 import org.apache.dolphinscheduler.e2e.pages.LoginPage;
 import org.apache.dolphinscheduler.e2e.pages.resource.FileManagePage;
 import org.apache.dolphinscheduler.e2e.pages.resource.ResourcePage;
@@ -98,7 +99,7 @@ public static void setup() {
         UserPage userPage = tenantPage.goToNav(SecurityPage.class)
             .goToTab(UserPage.class);
 
-        new WebDriverWait(userPage.driver(), Duration.ofSeconds(20)).until(ExpectedConditions.visibilityOfElementLocated(
+        WebDriverWaitFactory.createWebDriverWait(userPage.driver()).until(ExpectedConditions.visibilityOfElementLocated(
                 new By.ByClassName("name")));
 
         userPage.update(user, user, email, phone, tenant)
@@ -285,7 +286,7 @@ void testUploadUnder1GBFile() throws IOException {
 
         page.uploadFile(testUnder1GBFilePath.toFile().getAbsolutePath());
 
-        new WebDriverWait(browser, Duration.ofSeconds(20)).until(ExpectedConditions.invisibilityOfElementLocated(By.id("fileUpdateDialog")));
+        WebDriverWaitFactory.createWebDriverWait(browser).until(ExpectedConditions.invisibilityOfElementLocated(By.id("fileUpdateDialog")));
 
         Awaitility.await().untilAsserted(() -> {
             assertThat(page.fileList())

File: dolphinscheduler-e2e/dolphinscheduler-e2e-case/src/test/java/org/apache/dolphinscheduler/e2e/cases/HiveDataSourceE2ETest.java
Patch:
@@ -23,6 +23,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 
 import org.apache.dolphinscheduler.e2e.core.DolphinScheduler;
+import org.apache.dolphinscheduler.e2e.core.WebDriverWaitFactory;
 import org.apache.dolphinscheduler.e2e.pages.LoginPage;
 import org.apache.dolphinscheduler.e2e.pages.datasource.DataSourcePage;
 
@@ -82,7 +83,7 @@ void testCreateHiveDataSource() {
 
         page.createDataSource(dataSourceType, dataSourceName, dataSourceDescription, ip, port, userName, hivePassword, database, jdbcParams);
 
-        new WebDriverWait(page.driver(), Duration.ofSeconds(20)).until(ExpectedConditions.invisibilityOfElementLocated(
+        WebDriverWaitFactory.createWebDriverWait(page.driver()).until(ExpectedConditions.invisibilityOfElementLocated(
                 new By.ByClassName("dialog-create-data-source")));
 
         Awaitility.await().untilAsserted(() -> assertThat(page.dataSourceItemsList())

File: dolphinscheduler-e2e/dolphinscheduler-e2e-case/src/test/java/org/apache/dolphinscheduler/e2e/cases/MysqlDataSourceE2ETest.java
Patch:
@@ -23,6 +23,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 
 import org.apache.dolphinscheduler.e2e.core.DolphinScheduler;
+import org.apache.dolphinscheduler.e2e.core.WebDriverWaitFactory;
 import org.apache.dolphinscheduler.e2e.pages.LoginPage;
 import org.apache.dolphinscheduler.e2e.pages.datasource.DataSourcePage;
 
@@ -82,7 +83,7 @@ void testCreateMysqlDataSource() {
 
         page.createDataSource(dataSourceType, dataSourceName, dataSourceDescription, ip, port, userName, mysqlPassword, database, jdbcParams);
 
-        new WebDriverWait(page.driver(), Duration.ofSeconds(20)).until(ExpectedConditions.invisibilityOfElementLocated(
+        WebDriverWaitFactory.createWebDriverWait(page.driver()).until(ExpectedConditions.invisibilityOfElementLocated(
                 new By.ByClassName("dialog-create-data-source")));
 
         Awaitility.await().untilAsserted(() -> assertThat(page.dataSourceItemsList())

File: dolphinscheduler-e2e/dolphinscheduler-e2e-case/src/test/java/org/apache/dolphinscheduler/e2e/cases/PostgresDataSourceE2ETest.java
Patch:
@@ -23,6 +23,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 
 import org.apache.dolphinscheduler.e2e.core.DolphinScheduler;
+import org.apache.dolphinscheduler.e2e.core.WebDriverWaitFactory;
 import org.apache.dolphinscheduler.e2e.pages.LoginPage;
 import org.apache.dolphinscheduler.e2e.pages.datasource.DataSourcePage;
 
@@ -82,7 +83,7 @@ void testCreatePostgresDataSource() {
 
         page.createDataSource(dataSourceType, dataSourceName, dataSourceDescription, ip, port, userName, pgPassword, database, jdbcParams);
 
-        new WebDriverWait(page.driver(), Duration.ofSeconds(20)).until(ExpectedConditions.invisibilityOfElementLocated(
+        WebDriverWaitFactory.createWebDriverWait(page.driver()).until(ExpectedConditions.invisibilityOfElementLocated(
                 new By.ByClassName("dialog-create-data-source")));
 
         Awaitility.await().untilAsserted(() -> assertThat(page.dataSourceItemsList())

File: dolphinscheduler-e2e/dolphinscheduler-e2e-case/src/test/java/org/apache/dolphinscheduler/e2e/cases/SqlServerDataSourceE2ETest.java
Patch:
@@ -23,6 +23,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 
 import org.apache.dolphinscheduler.e2e.core.DolphinScheduler;
+import org.apache.dolphinscheduler.e2e.core.WebDriverWaitFactory;
 import org.apache.dolphinscheduler.e2e.pages.LoginPage;
 import org.apache.dolphinscheduler.e2e.pages.datasource.DataSourcePage;
 
@@ -82,7 +83,7 @@ void testCreateSqlServerDataSource() {
 
         page.createDataSource(dataSourceType, dataSourceName, dataSourceDescription, ip, port, userName, pgPassword, database, jdbcParams);
 
-        new WebDriverWait(page.driver(), Duration.ofSeconds(20)).until(ExpectedConditions.invisibilityOfElementLocated(
+        WebDriverWaitFactory.createWebDriverWait(page.driver()).until(ExpectedConditions.invisibilityOfElementLocated(
                 new By.ByClassName("dialog-create-data-source")));
 
         Awaitility.await().untilAsserted(() -> assertThat(page.dataSourceItemsList())

File: dolphinscheduler-e2e/dolphinscheduler-e2e-case/src/test/java/org/apache/dolphinscheduler/e2e/cases/UserE2ETest.java
Patch:
@@ -23,6 +23,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 
 import org.apache.dolphinscheduler.e2e.core.DolphinScheduler;
+import org.apache.dolphinscheduler.e2e.core.WebDriverWaitFactory;
 import org.apache.dolphinscheduler.e2e.pages.LoginPage;
 import org.apache.dolphinscheduler.e2e.pages.common.NavBarPage;
 import org.apache.dolphinscheduler.e2e.pages.security.SecurityPage;
@@ -119,7 +120,7 @@ void testCreateDuplicateUser() {
     void testEditUser() {
         UserPage page = new UserPage(browser);
 
-        new WebDriverWait(browser, Duration.ofSeconds(20)).until(ExpectedConditions.visibilityOfElementLocated(
+        WebDriverWaitFactory.createWebDriverWait(browser).until(ExpectedConditions.visibilityOfElementLocated(
                 new By.ByClassName("name")));
 
         browser.navigate().refresh();

File: dolphinscheduler-e2e/dolphinscheduler-e2e-case/src/test/java/org/apache/dolphinscheduler/e2e/cases/WorkerGroupE2ETest.java
Patch:
@@ -23,6 +23,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 
 import org.apache.dolphinscheduler.e2e.core.DolphinScheduler;
+import org.apache.dolphinscheduler.e2e.core.WebDriverWaitFactory;
 import org.apache.dolphinscheduler.e2e.pages.LoginPage;
 import org.apache.dolphinscheduler.e2e.pages.security.SecurityPage;
 import org.apache.dolphinscheduler.e2e.pages.security.WorkerGroupPage;
@@ -59,7 +60,7 @@ public static void setup() {
     void testCreateWorkerGroup() {
         final WorkerGroupPage page = new WorkerGroupPage(browser);
 
-        new WebDriverWait(page.driver(), Duration.ofSeconds(20))
+        WebDriverWaitFactory.createWebDriverWait(page.driver())
             .until(ExpectedConditions.urlContains("/security/worker-group-manage"));
 
         page.create(workerGroupName);

File: dolphinscheduler-e2e/dolphinscheduler-e2e-case/src/test/java/org/apache/dolphinscheduler/e2e/cases/WorkflowE2ETest.java
Patch:
@@ -20,6 +20,7 @@
 package org.apache.dolphinscheduler.e2e.cases;
 
 import org.apache.dolphinscheduler.e2e.core.DolphinScheduler;
+import org.apache.dolphinscheduler.e2e.core.WebDriverWaitFactory;
 import org.apache.dolphinscheduler.e2e.pages.LoginPage;
 import org.apache.dolphinscheduler.e2e.pages.common.NavBarPage;
 import org.apache.dolphinscheduler.e2e.pages.project.ProjectDetailPage;
@@ -76,7 +77,7 @@ public static void setup() {
                 .goToNav(SecurityPage.class)
                 .goToTab(UserPage.class);
 
-        new WebDriverWait(userPage.driver(), Duration.ofSeconds(20)).until(ExpectedConditions.visibilityOfElementLocated(
+        WebDriverWaitFactory.createWebDriverWait(userPage.driver()).until(ExpectedConditions.visibilityOfElementLocated(
                 new By.ByClassName("name")));
 
         userPage.update(user, user, email, phone, tenant)

File: dolphinscheduler-e2e/dolphinscheduler-e2e-case/src/test/java/org/apache/dolphinscheduler/e2e/cases/WorkflowHttpTaskE2ETest.java
Patch:
@@ -20,6 +20,7 @@
 package org.apache.dolphinscheduler.e2e.cases;
 
 import org.apache.dolphinscheduler.e2e.core.DolphinScheduler;
+import org.apache.dolphinscheduler.e2e.core.WebDriverWaitFactory;
 import org.apache.dolphinscheduler.e2e.pages.LoginPage;
 import org.apache.dolphinscheduler.e2e.pages.common.NavBarPage;
 import org.apache.dolphinscheduler.e2e.pages.project.ProjectDetailPage;
@@ -76,7 +77,7 @@ public static void setup() {
                 .goToNav(SecurityPage.class)
                 .goToTab(UserPage.class);
 
-        new WebDriverWait(userPage.driver(), Duration.ofSeconds(20)).until(ExpectedConditions.visibilityOfElementLocated(
+        WebDriverWaitFactory.createWebDriverWait(userPage.driver()).until(ExpectedConditions.visibilityOfElementLocated(
                 new By.ByClassName("name")));
 
         userPage.update(user, user, email, phone, tenant)

File: dolphinscheduler-e2e/dolphinscheduler-e2e-case/src/test/java/org/apache/dolphinscheduler/e2e/cases/WorkflowJavaTaskE2ETest.java
Patch:
@@ -20,6 +20,7 @@
 package org.apache.dolphinscheduler.e2e.cases;
 
 import org.apache.dolphinscheduler.e2e.core.DolphinScheduler;
+import org.apache.dolphinscheduler.e2e.core.WebDriverWaitFactory;
 import org.apache.dolphinscheduler.e2e.pages.LoginPage;
 import org.apache.dolphinscheduler.e2e.pages.common.NavBarPage;
 import org.apache.dolphinscheduler.e2e.pages.project.ProjectDetailPage;
@@ -92,7 +93,7 @@ public static void setup() {
                 .goToNav(SecurityPage.class)
                 .goToTab(UserPage.class);
 
-        new WebDriverWait(userPage.driver(), Duration.ofSeconds(20))
+        WebDriverWaitFactory.createWebDriverWait(userPage.driver())
                 .until(ExpectedConditions.visibilityOfElementLocated(new By.ByClassName("name")));
 
         userPage.update(user, user, email, phone, tenant)

File: dolphinscheduler-e2e/dolphinscheduler-e2e-case/src/test/java/org/apache/dolphinscheduler/e2e/cases/WorkflowSwitchE2ETest.java
Patch:
@@ -178,8 +178,8 @@ void testRunWorkflow() {
 
         Awaitility.await().untilAsserted(() -> {
             assertThat(taskInstances.size()).isEqualTo(3);
-            assertThat(taskInstances.stream().filter(row -> row.name().contains(ifBranchName)).count()).isEqualTo(1);
-            assertThat(taskInstances.stream().noneMatch(row -> row.name().contains(elseBranchName))).isTrue();
+            assertThat(taskInstances.stream().filter(row -> row.taskInstanceName().contains(ifBranchName)).count()).isEqualTo(1);
+            assertThat(taskInstances.stream().noneMatch(row -> row.taskInstanceName().contains(elseBranchName))).isTrue();
         });
     }
 }

File: dolphinscheduler-e2e/dolphinscheduler-e2e-case/src/test/java/org/apache/dolphinscheduler/e2e/pages/common/CodeEditor.java
Patch:
@@ -19,11 +19,10 @@
  */
 package org.apache.dolphinscheduler.e2e.pages.common;
 
-import org.openqa.selenium.By;
+import org.apache.dolphinscheduler.e2e.core.WebDriverWaitFactory;
 import org.openqa.selenium.WebDriver;
 import org.openqa.selenium.WebElement;
 import org.openqa.selenium.interactions.Actions;
-import org.openqa.selenium.remote.RemoteWebDriver;
 import org.openqa.selenium.support.FindBy;
 import org.openqa.selenium.support.FindBys;
 import org.openqa.selenium.support.PageFactory;
@@ -51,7 +50,7 @@ public CodeEditor(WebDriver driver) {
     }
 
     public CodeEditor content(String content) {
-        new WebDriverWait(this.driver, Duration.ofSeconds(20)).until(ExpectedConditions.elementToBeClickable(editor));
+        WebDriverWaitFactory.createWebDriverWait(driver).until(ExpectedConditions.elementToBeClickable(editor));
 
         editor.click();
 

File: dolphinscheduler-e2e/dolphinscheduler-e2e-case/src/test/java/org/apache/dolphinscheduler/e2e/pages/common/HttpInput.java
Patch:
@@ -22,6 +22,7 @@
 package org.apache.dolphinscheduler.e2e.pages.common;
 
 import lombok.Getter;
+import org.apache.dolphinscheduler.e2e.core.WebDriverWaitFactory;
 import org.openqa.selenium.WebDriver;
 import org.openqa.selenium.WebElement;
 import org.openqa.selenium.support.FindBy;
@@ -50,7 +51,7 @@ public HttpInput(WebDriver driver) {
     }
 
     public HttpInput content(String content) {
-        new WebDriverWait(this.driver, Duration.ofSeconds(20)).until(ExpectedConditions.elementToBeClickable(urlInput));
+        WebDriverWaitFactory.createWebDriverWait(driver).until(ExpectedConditions.elementToBeClickable(urlInput));
         urlInput().sendKeys(content);
         return this;
     }

File: dolphinscheduler-e2e/dolphinscheduler-e2e-case/src/test/java/org/apache/dolphinscheduler/e2e/pages/datasource/DataSourcePage.java
Patch:
@@ -22,6 +22,7 @@
 
 import lombok.Getter;
 
+import org.apache.dolphinscheduler.e2e.core.WebDriverWaitFactory;
 import org.apache.dolphinscheduler.e2e.pages.common.NavBarPage;
 
 import java.security.Key;
@@ -74,12 +75,12 @@ public DataSourcePage createDataSource(String dataSourceType, String dataSourceN
                                            String jdbcParams) {
         buttonCreateDataSource().click();
 
-        new WebDriverWait(driver, Duration.ofSeconds(10)).until(ExpectedConditions.visibilityOfElementLocated(
+        WebDriverWaitFactory.createWebDriverWait(driver).until(ExpectedConditions.visibilityOfElementLocated(
             new By.ByClassName("dialog-source-modal")));
 
         dataSourceModal().findElement(By.className(dataSourceType.toUpperCase()+"-box")).click();
 
-        new WebDriverWait(driver, Duration.ofSeconds(10)).until(ExpectedConditions.textToBePresentInElement(driver.findElement(By.className("dialog-create-data-source")), dataSourceType.toUpperCase()));
+        WebDriverWaitFactory.createWebDriverWait(driver).until(ExpectedConditions.textToBePresentInElement(driver.findElement(By.className("dialog-create-data-source")), dataSourceType.toUpperCase()));
 
         createDataSourceForm().inputDataSourceName().sendKeys(dataSourceName);
         createDataSourceForm().inputDataSourceDescription().sendKeys(dataSourceDescription);

File: dolphinscheduler-e2e/dolphinscheduler-e2e-case/src/test/java/org/apache/dolphinscheduler/e2e/pages/project/workflow/WorkflowForm.java
Patch:
@@ -19,6 +19,7 @@
  */
 package org.apache.dolphinscheduler.e2e.pages.project.workflow;
 
+import org.apache.dolphinscheduler.e2e.core.WebDriverWaitFactory;
 import org.apache.dolphinscheduler.e2e.pages.project.workflow.task.HttpTaskForm;
 import org.apache.dolphinscheduler.e2e.pages.project.workflow.task.ShellTaskForm;
 import org.apache.dolphinscheduler.e2e.pages.project.workflow.task.SubWorkflowTaskForm;
@@ -93,7 +94,7 @@ public <T> T addTask(TaskType type) {
     }
 
     public WebElement getTask(String taskName) {
-        List<WebElement> tasks = new WebDriverWait(driver, Duration.ofSeconds(20))
+        List<WebElement> tasks = WebDriverWaitFactory.createWebDriverWait(driver)
                 .until(ExpectedConditions.visibilityOfAllElementsLocatedBy(By.cssSelector("svg > g > g[class^='x6-graph-svg-stage'] > g[data-shape^='dag-task']")));
 
         WebElement task = tasks.stream()

File: dolphinscheduler-e2e/dolphinscheduler-e2e-case/src/test/java/org/apache/dolphinscheduler/e2e/pages/project/workflow/WorkflowRunDialog.java
Patch:
@@ -19,6 +19,7 @@
  */
 package org.apache.dolphinscheduler.e2e.pages.project.workflow;
 
+import org.apache.dolphinscheduler.e2e.core.WebDriverWaitFactory;
 import org.openqa.selenium.WebElement;
 import org.openqa.selenium.support.FindBy;
 import org.openqa.selenium.support.PageFactory;
@@ -44,7 +45,7 @@ public WorkflowRunDialog(WorkflowDefinitionTab parent) {
     }
 
     public WorkflowDefinitionTab submit() {
-        new WebDriverWait(parent().driver(), Duration.ofSeconds(20)).until(ExpectedConditions.elementToBeClickable(buttonSubmit()));
+        WebDriverWaitFactory.createWebDriverWait(parent.driver()).until(ExpectedConditions.elementToBeClickable(buttonSubmit()));
 
         buttonSubmit().click();
 

File: dolphinscheduler-e2e/dolphinscheduler-e2e-case/src/test/java/org/apache/dolphinscheduler/e2e/pages/project/workflow/task/SubWorkflowTaskForm.java
Patch:
@@ -19,6 +19,7 @@
  */
 package org.apache.dolphinscheduler.e2e.pages.project.workflow.task;
 
+import org.apache.dolphinscheduler.e2e.core.WebDriverWaitFactory;
 import org.apache.dolphinscheduler.e2e.pages.project.workflow.WorkflowForm;
 
 import lombok.Getter;
@@ -54,11 +55,11 @@ public SubWorkflowTaskForm(WorkflowForm parent) {
     }
 
     public SubWorkflowTaskForm childNode(String node) {
-        new WebDriverWait(driver, Duration.ofSeconds(5)).until(ExpectedConditions.elementToBeClickable(btnSelectChildNodeDropdown));
+        WebDriverWaitFactory.createWebDriverWait(driver).until(ExpectedConditions.elementToBeClickable(btnSelectChildNodeDropdown));
         
         btnSelectChildNodeDropdown().click();
 
-        new WebDriverWait(driver, Duration.ofSeconds(5)).until(ExpectedConditions.visibilityOfElementLocated(By.className(
+        WebDriverWaitFactory.createWebDriverWait(driver).until(ExpectedConditions.visibilityOfElementLocated(By.className(
                 "n-base-select-option__content")));
 
         selectChildNode()

File: dolphinscheduler-e2e/dolphinscheduler-e2e-case/src/test/java/org/apache/dolphinscheduler/e2e/pages/project/workflow/task/SwitchTaskForm.java
Patch:
@@ -20,6 +20,7 @@
 package org.apache.dolphinscheduler.e2e.pages.project.workflow.task;
 
 import lombok.Getter;
+import org.apache.dolphinscheduler.e2e.core.WebDriverWaitFactory;
 import org.apache.dolphinscheduler.e2e.pages.project.workflow.WorkflowForm;
 import org.openqa.selenium.By;
 import org.openqa.selenium.JavascriptExecutor;
@@ -54,7 +55,7 @@ public SwitchTaskForm elseBranch(String elseBranchName) {
 
         final By optionsLocator = By.className("option-else-branches");
 
-        new WebDriverWait(parent().driver(), Duration.ofSeconds(10))
+        WebDriverWaitFactory.createWebDriverWait(parent().driver())
                 .until(ExpectedConditions.visibilityOfElementLocated(optionsLocator));
 
         List<WebElement> webElements =  parent().driver().findElements(optionsLocator);
@@ -79,7 +80,7 @@ public SwitchTaskForm addIfBranch(String switchScript, String ifBranchName) {
 
         final By optionsLocator = By.className("option-if-branches");
 
-        new WebDriverWait(parent().driver(), Duration.ofSeconds(10))
+        WebDriverWaitFactory.createWebDriverWait(parent().driver())
                 .until(ExpectedConditions.visibilityOfElementLocated(optionsLocator));
 
         List<WebElement> webElements =  parent().driver().findElements(optionsLocator);

File: dolphinscheduler-e2e/dolphinscheduler-e2e-case/src/test/java/org/apache/dolphinscheduler/e2e/pages/security/EnvironmentPage.java
Patch:
@@ -19,6 +19,7 @@
 
 package org.apache.dolphinscheduler.e2e.pages.security;
 
+import org.apache.dolphinscheduler.e2e.core.WebDriverWaitFactory;
 import org.apache.dolphinscheduler.e2e.pages.common.NavBarPage;
 
 import java.time.Duration;
@@ -67,7 +68,7 @@ public EnvironmentPage create(String name, String config, String desc, String wo
         createEnvironmentForm().inputEnvironmentDesc().sendKeys(desc);
 
         editEnvironmentForm().btnSelectWorkerGroupDropdown().click();
-        new WebDriverWait(driver, Duration.ofSeconds(20)).until(ExpectedConditions.visibilityOfElementLocated(new By.ByClassName(
+        WebDriverWaitFactory.createWebDriverWait(driver).until(ExpectedConditions.visibilityOfElementLocated(new By.ByClassName(
                 "n-base-select-option__content")));
         editEnvironmentForm().selectWorkerGroupList()
                 .stream()
@@ -106,7 +107,7 @@ public EnvironmentPage update(String oldName, String name, String config, String
 
         if (editEnvironmentForm().selectedWorkerGroup().getAttribute("innerHTML").equals(workerGroup)) {
             editEnvironmentForm().btnSelectWorkerGroupDropdown().click();
-            new WebDriverWait(driver, Duration.ofSeconds(20)).until(ExpectedConditions.visibilityOfElementLocated(new By.ByClassName(
+            WebDriverWaitFactory.createWebDriverWait(driver).until(ExpectedConditions.visibilityOfElementLocated(new By.ByClassName(
                     "n-base-select-option__content")));
             editEnvironmentForm().selectWorkerGroupList()
                     .stream()

File: dolphinscheduler-e2e/dolphinscheduler-e2e-core/src/main/java/org/apache/dolphinscheduler/e2e/core/DolphinSchedulerExtension.java
Patch:
@@ -80,7 +80,7 @@ final class DolphinSchedulerExtension implements BeforeAllCallback, AfterAllCall
     @SuppressWarnings("UnstableApiUsage")
     public void beforeAll(ExtensionContext context) throws IOException {
         Awaitility.setDefaultTimeout(Duration.ofSeconds(60));
-        Awaitility.setDefaultPollInterval(Duration.ofSeconds(2));
+        Awaitility.setDefaultPollInterval(Duration.ofMillis(500));
 
         setRecordPath();
 
@@ -115,6 +115,7 @@ public void beforeAll(ExtensionContext context) throws IOException {
               .filter(it -> Modifier.isStatic(it.getModifiers()))
               .filter(f -> WebDriver.class.isAssignableFrom(f.getType()))
               .forEach(it -> setDriver(clazz, it));
+        WebDriverHolder.setWebDriver(driver);
     }
 
     private void runInLocal() {

File: dolphinscheduler-spi/src/main/java/org/apache/dolphinscheduler/spi/enums/ResourceType.java
Patch:
@@ -28,7 +28,7 @@
 public enum ResourceType {
 
     /**
-     * 0 file, 1 udf
+     * 0 file
      */
     FILE(0, "file"),
     ALL(2, "all");

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/dto/task/TaskCreateRequest.java
Patch:
@@ -19,11 +19,11 @@
 
 import static org.apache.dolphinscheduler.common.constants.Constants.VERSION_FIRST;
 
-import org.apache.dolphinscheduler.common.constants.Constants;
 import org.apache.dolphinscheduler.common.enums.Flag;
 import org.apache.dolphinscheduler.common.enums.Priority;
 import org.apache.dolphinscheduler.common.enums.TimeoutFlag;
 import org.apache.dolphinscheduler.dao.entity.TaskDefinition;
+import org.apache.dolphinscheduler.dao.utils.WorkerGroupUtils;
 import org.apache.dolphinscheduler.plugin.task.api.enums.TaskTimeoutStrategy;
 
 import java.util.Date;
@@ -107,7 +107,7 @@ public TaskDefinition convert2TaskDefinition() {
         taskDefinition.setProjectCode(this.projectCode);
         taskDefinition.setTaskType(this.taskType);
         taskDefinition.setTaskParams(this.taskParams);
-        taskDefinition.setWorkerGroup(this.workerGroup == null ? Constants.DEFAULT_WORKER_GROUP : this.workerGroup);
+        taskDefinition.setWorkerGroup(WorkerGroupUtils.getWorkerGroupOrDefault(workerGroup));
         taskDefinition.setEnvironmentCode(this.environmentCode);
         taskDefinition.setFailRetryTimes(this.failRetryTimes);
         taskDefinition.setFailRetryInterval(this.failRetryInterval);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProcessDefinitionServiceImpl.java
Patch:
@@ -34,7 +34,6 @@
 import static org.apache.dolphinscheduler.common.constants.CommandKeyConstants.CMD_PARAM_SUB_PROCESS_DEFINE_CODE;
 import static org.apache.dolphinscheduler.common.constants.Constants.COPY_SUFFIX;
 import static org.apache.dolphinscheduler.common.constants.Constants.DATA_LIST;
-import static org.apache.dolphinscheduler.common.constants.Constants.DEFAULT_WORKER_GROUP;
 import static org.apache.dolphinscheduler.common.constants.Constants.GLOBAL_PARAMS;
 import static org.apache.dolphinscheduler.common.constants.Constants.IMPORT_SUFFIX;
 import static org.apache.dolphinscheduler.common.constants.Constants.LOCAL_PARAMS;
@@ -109,6 +108,7 @@
 import org.apache.dolphinscheduler.dao.repository.ProcessDefinitionDao;
 import org.apache.dolphinscheduler.dao.repository.ProcessDefinitionLogDao;
 import org.apache.dolphinscheduler.dao.repository.TaskDefinitionLogDao;
+import org.apache.dolphinscheduler.dao.utils.WorkerGroupUtils;
 import org.apache.dolphinscheduler.plugin.task.api.TaskPluginManager;
 import org.apache.dolphinscheduler.plugin.task.api.enums.SqlType;
 import org.apache.dolphinscheduler.plugin.task.api.enums.TaskTimeoutStrategy;
@@ -1390,7 +1390,7 @@ private TaskDefinitionLog buildNormalSqlTaskDefinition(String taskName, DataSour
         taskDefinition.setFailRetryTimes(0);
         taskDefinition.setFailRetryInterval(0);
         taskDefinition.setTimeoutFlag(TimeoutFlag.CLOSE);
-        taskDefinition.setWorkerGroup(DEFAULT_WORKER_GROUP);
+        taskDefinition.setWorkerGroup(WorkerGroupUtils.getDefaultWorkerGroup());
         taskDefinition.setTaskPriority(Priority.MEDIUM);
         taskDefinition.setEnvironmentCode(-1);
         taskDefinition.setTimeout(0);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProjectWorkerGroupRelationServiceImpl.java
Patch:
@@ -32,6 +32,7 @@
 import org.apache.dolphinscheduler.dao.mapper.ScheduleMapper;
 import org.apache.dolphinscheduler.dao.mapper.TaskDefinitionMapper;
 import org.apache.dolphinscheduler.dao.mapper.WorkerGroupMapper;
+import org.apache.dolphinscheduler.dao.utils.WorkerGroupUtils;
 
 import org.apache.commons.collections.CollectionUtils;
 import org.apache.commons.collections4.SetUtils;
@@ -118,7 +119,7 @@ public Result assignWorkerGroupsToProject(User loginUser, Long projectCode, List
                 workerGroupMapper.queryAllWorkerGroup().stream().map(WorkerGroup::getName).collect(
                         Collectors.toSet());
 
-        workerGroupNames.add(Constants.DEFAULT_WORKER_GROUP);
+        workerGroupNames.add(WorkerGroupUtils.getDefaultWorkerGroup());
 
         Set<String> assignedWorkerGroupNames = new HashSet<>(workerGroups);
 

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProcessDefinitionServiceTest.java
Patch:
@@ -72,6 +72,7 @@
 import org.apache.dolphinscheduler.dao.repository.ProcessDefinitionDao;
 import org.apache.dolphinscheduler.dao.repository.ProcessDefinitionLogDao;
 import org.apache.dolphinscheduler.dao.repository.TaskDefinitionLogDao;
+import org.apache.dolphinscheduler.dao.utils.WorkerGroupUtils;
 import org.apache.dolphinscheduler.service.alert.ListenerEventAlertManager;
 import org.apache.dolphinscheduler.service.process.ProcessService;
 import org.apache.dolphinscheduler.spi.enums.DbType;
@@ -1143,7 +1144,7 @@ private Schedule getSchedule() {
         schedule.setProcessInstancePriority(Priority.MEDIUM);
         schedule.setWarningType(WarningType.NONE);
         schedule.setWarningGroupId(1);
-        schedule.setWorkerGroup(Constants.DEFAULT_WORKER_GROUP);
+        schedule.setWorkerGroup(WorkerGroupUtils.getDefaultWorkerGroup());
         return schedule;
     }
 

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/CommandMapperTest.java
Patch:
@@ -19,7 +19,6 @@
 
 import static com.google.common.truth.Truth.assertThat;
 
-import org.apache.dolphinscheduler.common.constants.Constants;
 import org.apache.dolphinscheduler.common.enums.CommandType;
 import org.apache.dolphinscheduler.common.enums.FailureStrategy;
 import org.apache.dolphinscheduler.common.enums.Flag;
@@ -32,6 +31,7 @@
 import org.apache.dolphinscheduler.dao.entity.Command;
 import org.apache.dolphinscheduler.dao.entity.CommandCount;
 import org.apache.dolphinscheduler.dao.entity.ProcessDefinition;
+import org.apache.dolphinscheduler.dao.utils.WorkerGroupUtils;
 
 import java.util.Date;
 import java.util.HashMap;
@@ -303,7 +303,7 @@ private Command createCommand(CommandType commandType, long processDefinitionCod
         command.setProcessInstancePriority(Priority.MEDIUM);
         command.setStartTime(DateUtils.stringToDate("2019-12-29 10:10:00"));
         command.setUpdateTime(DateUtils.stringToDate("2019-12-29 10:10:00"));
-        command.setWorkerGroup(Constants.DEFAULT_WORKER_GROUP);
+        command.setWorkerGroup(WorkerGroupUtils.getDefaultWorkerGroup());
         command.setProcessInstanceId(0);
         command.setProcessDefinitionVersion(0);
         commandMapper.insert(command);

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/repository/impl/CommandDaoImplTest.java
Patch:
@@ -20,7 +20,6 @@
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.jupiter.api.Assertions.assertFalse;
 
-import org.apache.dolphinscheduler.common.constants.Constants;
 import org.apache.dolphinscheduler.common.enums.CommandType;
 import org.apache.dolphinscheduler.common.enums.FailureStrategy;
 import org.apache.dolphinscheduler.common.enums.Priority;
@@ -30,6 +29,7 @@
 import org.apache.dolphinscheduler.dao.BaseDaoTest;
 import org.apache.dolphinscheduler.dao.entity.Command;
 import org.apache.dolphinscheduler.dao.repository.CommandDao;
+import org.apache.dolphinscheduler.dao.utils.WorkerGroupUtils;
 
 import org.apache.commons.lang3.RandomUtils;
 
@@ -94,7 +94,7 @@ private Command generateCommand(CommandType commandType, int processDefinitionCo
         command.setProcessInstancePriority(Priority.MEDIUM);
         command.setStartTime(DateUtils.stringToDate("2019-12-29 10:10:00"));
         command.setUpdateTime(DateUtils.stringToDate("2019-12-29 10:10:00"));
-        command.setWorkerGroup(Constants.DEFAULT_WORKER_GROUP);
+        command.setWorkerGroup(WorkerGroupUtils.getDefaultWorkerGroup());
         command.setProcessInstanceId(0);
         command.setProcessDefinitionVersion(0);
         return command;

File: dolphinscheduler-e2e/dolphinscheduler-e2e-case/src/test/java/org/apache/dolphinscheduler/e2e/cases/WorkflowJavaTaskE2ETest.java
Patch:
@@ -92,8 +92,8 @@ public static void setup() {
                 .goToNav(SecurityPage.class)
                 .goToTab(UserPage.class);
 
-        new WebDriverWait(userPage.driver(), Duration.ofSeconds(20)).until(ExpectedConditions.visibilityOfElementLocated(
-                new By.ByClassName("name")));
+        new WebDriverWait(userPage.driver(), Duration.ofSeconds(20))
+                .until(ExpectedConditions.visibilityOfElementLocated(new By.ByClassName("name")));
 
         userPage.update(user, user, email, phone, tenant)
                 .goToNav(ProjectPage.class)

File: dolphinscheduler-master/src/test/java/org/apache/dolphinscheduler/server/master/utils/WorkflowInstanceUtilsTest.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.dolphinscheduler.dao.entity.ProcessDefinition;
 import org.apache.dolphinscheduler.dao.entity.ProcessInstance;
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
+import org.apache.dolphinscheduler.dao.utils.WorkerGroupUtils;
 import org.apache.dolphinscheduler.plugin.task.api.enums.TaskExecutionStatus;
 
 import java.sql.Date;
@@ -52,7 +53,7 @@ public void testLogWorkflowInstanceInDetails() {
         workflowInstance.setDryRun(0);
         workflowInstance.setTenantCode("default");
         workflowInstance.setRestartTime(Date.valueOf("2023-08-01"));
-        workflowInstance.setWorkerGroup("default");
+        workflowInstance.setWorkerGroup(WorkerGroupUtils.getDefaultWorkerGroup());
         workflowInstance.setStartTime(Date.valueOf("2023-08-01"));
         workflowInstance.setEndTime(Date.valueOf("2023-08-01"));
         Assertions.assertEquals("\n"

File: dolphinscheduler-extract/dolphinscheduler-extract-base/src/main/java/org/apache/dolphinscheduler/extract/base/config/NettyServerConfig.java
Patch:
@@ -39,7 +39,7 @@ public class NettyServerConfig {
     private int soBacklog = 1024;
 
     /**
-     * whether tpc delay
+     * whether tcp delay
      */
     @Builder.Default
     private boolean tcpNoDelay = true;

File: dolphinscheduler-registry/dolphinscheduler-registry-plugins/dolphinscheduler-registry-jdbc/src/test/java/org/apache/dolphinscheduler/plugin/registry/jdbc/MysqlJdbcRegistryTestCase.java
Patch:
@@ -22,6 +22,7 @@
 import java.sql.Connection;
 import java.sql.DriverManager;
 import java.sql.Statement;
+import java.time.Duration;
 import java.util.stream.Stream;
 
 import lombok.SneakyThrows;
@@ -52,7 +53,7 @@ public static void setUpTestingServer() {
                 .withDatabaseName("dolphinscheduler")
                 .withNetwork(Network.newNetwork())
                 .withExposedPorts(3306)
-                .waitingFor(Wait.forHealthcheck());
+                .waitingFor(Wait.forHealthcheck().withStartupTimeout(Duration.ofSeconds(300)));
 
         int exposedPort = RandomUtils.nextInt(10000, 65535);
         mysqlContainer.setPortBindings(Lists.newArrayList(exposedPort + ":3306"));

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/exceptions/ApiExceptionHandler.java
Patch:
@@ -44,7 +44,7 @@ public Result<Object> exceptionHandler(ServiceException e, HandlerMethod hm) {
     @ExceptionHandler(Throwable.class)
     public Result<Object> exceptionHandler(Throwable e, HandlerMethod hm) {
         ApiException ce = hm.getMethodAnnotation(ApiException.class);
-        log.error("Meet en unknown exception: ", e);
+        log.error("Meet an unknown exception: ", e);
         if (ce == null) {
             return Result.errorWithArgs(Status.INTERNAL_SERVER_ERROR_ARGS, e.getMessage());
         }

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/WorkflowExecuteRunnable.java
Patch:
@@ -639,6 +639,7 @@ private int createComplementDataCommand(Date scheduleDate) {
         command.setProcessInstanceId(0);
         command.setProcessDefinitionVersion(workflowInstance.getProcessDefinitionVersion());
         command.setTestFlag(workflowInstance.getTestFlag());
+        command.setTenantCode(workflowInstance.getTenantCode());
         int create = commandService.createCommand(command);
         processService.saveCommandTrigger(command.getId(), workflowInstance.getId());
         return create;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/audit/OperatorUtils.java
Patch:
@@ -126,7 +126,7 @@ public static AuditOperationType modifyReleaseOperationType(AuditType auditType,
         return auditType.getAuditOperationType();
     }
 
-    public static long getObjectIdentityByParma(String[] paramNameArr, Map<String, Object> paramsMap) {
+    public static long getObjectIdentityByParam(String[] paramNameArr, Map<String, Object> paramsMap) {
         for (String name : paramNameArr) {
             if (paramsMap.get(name) instanceof String) {
                 String param = (String) paramsMap.get(name);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/audit/operator/impl/AlertGroupAuditOperatorImpl.java
Patch:
@@ -31,7 +31,7 @@ public class AlertGroupAuditOperatorImpl extends BaseAuditOperator {
     private AlertGroupMapper alertGroupMapper;
 
     @Override
-    public String getObjectNameFromReturnIdentity(Object identity) {
+    public String getObjectNameFromIdentity(Object identity) {
         Long objId = toLong(identity);
         if (objId == -1) {
             return "";

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/audit/operator/impl/AlertInstanceAuditOperatorImpl.java
Patch:
@@ -31,7 +31,7 @@ public class AlertInstanceAuditOperatorImpl extends BaseAuditOperator {
     private AlertPluginInstanceMapper alertPluginInstanceMapper;
 
     @Override
-    public String getObjectNameFromReturnIdentity(Object identity) {
+    public String getObjectNameFromIdentity(Object identity) {
         Long objId = toLong(identity);
         if (objId == -1) {
             return "";

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/audit/operator/impl/ClusterAuditOperatorImpl.java
Patch:
@@ -31,7 +31,7 @@ public class ClusterAuditOperatorImpl extends BaseAuditOperator {
     private ClusterMapper clusterMapper;
 
     @Override
-    public String getObjectNameFromReturnIdentity(Object identity) {
+    public String getObjectNameFromIdentity(Object identity) {
         Long objId = toLong(identity);
         if (objId == -1) {
             return "";

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/audit/operator/impl/DatasourceAuditOperatorImpl.java
Patch:
@@ -31,7 +31,7 @@ public class DatasourceAuditOperatorImpl extends BaseAuditOperator {
     private DataSourceMapper dataSourceMapper;
 
     @Override
-    public String getObjectNameFromReturnIdentity(Object identity) {
+    public String getObjectNameFromIdentity(Object identity) {
         Long objId = toLong(identity);
         if (objId == -1) {
             return "";

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/audit/operator/impl/EnvironmentAuditOperatorImpl.java
Patch:
@@ -31,7 +31,7 @@ public class EnvironmentAuditOperatorImpl extends BaseAuditOperator {
     private EnvironmentMapper environmentMapper;
 
     @Override
-    public String getObjectNameFromReturnIdentity(Object identity) {
+    public String getObjectNameFromIdentity(Object identity) {
         Long objId = toLong(identity);
         if (objId == -1) {
             return "";

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/audit/operator/impl/K8SNamespaceAuditOperatorImpl.java
Patch:
@@ -31,7 +31,7 @@ public class K8SNamespaceAuditOperatorImpl extends BaseAuditOperator {
     private K8sNamespaceMapper k8sNamespaceMapper;
 
     @Override
-    public String getObjectNameFromReturnIdentity(Object identity) {
+    public String getObjectNameFromIdentity(Object identity) {
         Long objId = toLong(identity);
         if (objId == -1) {
             return "";

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/audit/operator/impl/ProjectAuditOperatorImpl.java
Patch:
@@ -34,7 +34,7 @@ public class ProjectAuditOperatorImpl extends BaseAuditOperator {
     private ProjectMapper projectMapper;
 
     @Override
-    protected String getObjectNameFromReturnIdentity(Object identity) {
+    protected String getObjectNameFromIdentity(Object identity) {
         Long objId = toLong(identity);
         if (objId == -1) {
             return "";

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/audit/operator/impl/ResourceAuditOperatorImpl.java
Patch:
@@ -37,7 +37,7 @@ public void modifyAuditObjectType(AuditType auditType, Map<String, Object> param
     }
 
     @Override
-    protected void setObjectByParma(String[] paramNameArr, Map<String, Object> paramsMap,
+    protected void setObjectByParam(String[] paramNameArr, Map<String, Object> paramsMap,
                                     List<AuditLog> auditLogList) {
 
         Object objName = getFileNameFromParam(paramNameArr, paramsMap);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/audit/operator/impl/ScheduleAuditOperatorImpl.java
Patch:
@@ -72,7 +72,7 @@ protected void setObjectIdentityFromReturnObject(AuditType auditType, Result<?>
     }
 
     @Override
-    protected String getObjectNameFromReturnIdentity(Object identity) {
+    protected String getObjectNameFromIdentity(Object identity) {
         Long objId = toLong(identity);
         if (objId == -1) {
             return "";

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/audit/operator/impl/TaskAuditOperatorImpl.java
Patch:
@@ -46,17 +46,17 @@ public void modifyAuditOperationType(AuditType auditType, Map<String, Object> pa
     }
 
     @Override
-    protected void setObjectByParma(String[] paramNameArr, Map<String, Object> paramsMap,
+    protected void setObjectByParam(String[] paramNameArr, Map<String, Object> paramsMap,
                                     List<AuditLog> auditLogList) {
 
-        super.setObjectByParma(paramNameArr, paramsMap, auditLogList);
+        super.setObjectByParam(paramNameArr, paramsMap, auditLogList);
         if (paramsMap.containsKey(AuditLogConstants.VERSION)) {
             auditLogList.get(0).setDetail(paramsMap.get(AuditLogConstants.VERSION).toString());
         }
     }
 
     @Override
-    protected String getObjectNameFromReturnIdentity(Object identity) {
+    protected String getObjectNameFromIdentity(Object identity) {
         Long objId = toLong(identity);
         if (objId == -1) {
             return "";

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/audit/operator/impl/TaskGroupAuditOperatorImpl.java
Patch:
@@ -31,7 +31,7 @@ public class TaskGroupAuditOperatorImpl extends BaseAuditOperator {
     private TaskGroupMapper taskGroupMapper;
 
     @Override
-    public String getObjectNameFromReturnIdentity(Object identity) {
+    public String getObjectNameFromIdentity(Object identity) {
         Long objId = toLong(identity);
         if (objId == -1) {
             return "";

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/audit/operator/impl/TaskInstancesAuditOperatorImpl.java
Patch:
@@ -31,7 +31,7 @@ public class TaskInstancesAuditOperatorImpl extends BaseAuditOperator {
     private TaskInstanceMapper taskInstanceMapper;
 
     @Override
-    protected String getObjectNameFromReturnIdentity(Object identity) {
+    protected String getObjectNameFromIdentity(Object identity) {
         Long objId = toLong(identity);
         if (objId == -1) {
             return "";

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/audit/operator/impl/TenantAuditOperatorImpl.java
Patch:
@@ -31,7 +31,7 @@ public class TenantAuditOperatorImpl extends BaseAuditOperator {
     private TenantMapper tenantMapper;
 
     @Override
-    public String getObjectNameFromReturnIdentity(Object identity) {
+    public String getObjectNameFromIdentity(Object identity) {
         Long objId = toLong(identity);
         if (objId == -1) {
             return "";

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/audit/operator/impl/TokenAuditOperatorImpl.java
Patch:
@@ -54,7 +54,7 @@ public void modifyAuditOperationType(AuditType auditType, Map<String, Object> pa
     }
 
     @Override
-    public String getObjectNameFromReturnIdentity(Object identity) {
+    public String getObjectNameFromIdentity(Object identity) {
         Long objId = toLong(identity);
         if (objId == -1) {
             return "";

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/audit/operator/impl/UdfFunctionAuditOperatorImpl.java
Patch:
@@ -33,7 +33,7 @@ public class UdfFunctionAuditOperatorImpl extends BaseAuditOperator {
     private UdfFuncMapper udfFuncMapper;
 
     @Override
-    protected String getObjectNameFromReturnIdentity(Object identity) {
+    protected String getObjectNameFromIdentity(Object identity) {
         int objId = NumberUtils.toInt(identity.toString(), -1);
         if (objId == -1) {
             return "";

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/audit/operator/impl/UserAuditOperatorImpl.java
Patch:
@@ -31,7 +31,7 @@ public class UserAuditOperatorImpl extends BaseAuditOperator {
     private UserMapper userMapper;
 
     @Override
-    public String getObjectNameFromReturnIdentity(Object identity) {
+    public String getObjectNameFromIdentity(Object identity) {
         Long objId = toLong(identity);
         if (objId == -1) {
             return "";

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/audit/operator/impl/WorkerGroupAuditOperatorImpl.java
Patch:
@@ -48,7 +48,7 @@ public void modifyAuditOperationType(AuditType auditType, Map<String, Object> pa
     }
 
     @Override
-    public String getObjectNameFromReturnIdentity(Object identity) {
+    public String getObjectNameFromIdentity(Object identity) {
         Long objId = toLong(identity);
         if (objId == -1) {
             return "";

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/audit/operator/impl/YarnQueueAuditOperatorImpl.java
Patch:
@@ -31,7 +31,7 @@ public class YarnQueueAuditOperatorImpl extends BaseAuditOperator {
     private QueueMapper queueMapper;
 
     @Override
-    public String getObjectNameFromReturnIdentity(Object identity) {
+    public String getObjectNameFromIdentity(Object identity) {
         Long objId = toLong(identity);
         if (objId == -1) {
             return "";

File: dolphinscheduler-task-plugin/dolphinscheduler-task-sqoop/src/main/java/org/apache/dolphinscheduler/plugin/task/sqoop/generator/sources/HdfsSourceGenerator.java
Patch:
@@ -57,7 +57,7 @@ public String generate(
                 }
             }
         } catch (Exception e) {
-            log.error(String.format("Sqoop hdfs source parmas build failed: [%s]", e.getMessage()));
+            log.error(String.format("Sqoop hdfs source params build failed: [%s]", e.getMessage()));
         }
 
         return hdfsSourceSb.toString();

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/constants/TenantConstants.java
Patch:
@@ -21,5 +21,5 @@ public class TenantConstants {
 
     public static final String DEFAULT_TENANT_CODE = "default";
 
-    public static final String BOOTSTRAPT_SYSTEM_USER = System.getProperty("user.name");
+    public static final String BOOTSTRAP_SYSTEM_USER = System.getProperty("user.name");
 }

File: dolphinscheduler-worker/src/main/java/org/apache/dolphinscheduler/server/worker/config/TenantConfig.java
Patch:
@@ -23,6 +23,5 @@
 public class TenantConfig {
 
     private boolean autoCreateTenantEnabled = true;
-    private boolean distributedTenantEnabled = false;
     private boolean defaultTenantEnabled = false;
 }

File: dolphinscheduler-worker/src/main/java/org/apache/dolphinscheduler/server/worker/runner/WorkerTaskExecutor.java
Patch:
@@ -53,6 +53,7 @@
 import org.apache.dolphinscheduler.server.worker.rpc.WorkerMessageSender;
 import org.apache.dolphinscheduler.server.worker.utils.TaskExecutionContextUtils;
 import org.apache.dolphinscheduler.server.worker.utils.TaskFilesTransferUtils;
+import org.apache.dolphinscheduler.server.worker.utils.TenantUtils;
 
 import java.io.File;
 import java.io.IOException;
@@ -209,8 +210,7 @@ protected void beforeExecute() {
         // In most of case the origin tenant is the same as the current tenant
         // Except `default` tenant. The originTenant is used to download the resources
         String originTenant = taskExecutionContext.getTenantCode();
-        String tenant = TaskExecutionContextUtils.getOrCreateTenant(workerConfig, taskExecutionContext);
-        taskExecutionContext.setTenantCode(tenant);
+        taskExecutionContext.setTenantCode(TenantUtils.getOrCreateActualTenant(workerConfig, taskExecutionContext));
         log.info("TenantCode: {} check successfully", taskExecutionContext.getTenantCode());
 
         TaskExecutionContextUtils.createTaskInstanceWorkingDirectory(taskExecutionContext);

File: dolphinscheduler-worker/src/main/java/org/apache/dolphinscheduler/server/worker/runner/operator/TaskInstanceDispatchOperationFunction.java
Patch:
@@ -79,7 +79,6 @@ public TaskInstanceDispatchResponse operate(TaskInstanceDispatchRequest taskInst
 
             WorkerTaskExecutor workerTaskExecutor = workerTaskExecutorFactoryBuilder
                     .createWorkerTaskExecutorFactory(taskExecutionContext).createWorkerTaskExecutor();
-            // todo: hold the workerTaskExecutor
             if (!workerTaskExecutorThreadPool.submitWorkerTaskExecutor(workerTaskExecutor)) {
                 log.info("Submit task: {} to wait queue failed", taskExecutionContext.getTaskName());
                 return TaskInstanceDispatchResponse.failed(taskExecutionContext.getTaskInstanceId(),

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/ParameterUtils.java
Patch:
@@ -145,7 +145,7 @@ public static void setInParameter(int index, PreparedStatement stmt, DataType da
         } else if (dataType.equals(DataType.DATE)) {
             stmt.setDate(index, java.sql.Date.valueOf(value));
         } else if (dataType.equals(DataType.TIME)) {
-            stmt.setString(index, value);
+            stmt.setTime(index, java.sql.Time.valueOf(value));
         } else if (dataType.equals(DataType.TIMESTAMP)) {
             stmt.setTimestamp(index, java.sql.Timestamp.valueOf(value));
         } else if (dataType.equals(DataType.BOOLEAN)) {

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProjectParameterService.java
Patch:
@@ -23,17 +23,17 @@
 public interface ProjectParameterService {
 
     Result createProjectParameter(User loginUser, long projectCode, String projectParameterName,
-                                  String projectParameterValue);
+                                  String projectParameterValue, String projectParameterDataType);
 
     Result updateProjectParameter(User loginUser, long projectCode, long code, String projectParameterName,
-                                  String projectParameterValue);
+                                  String projectParameterValue, String projectParameterDataType);
 
     Result deleteProjectParametersByCode(User loginUser, long projectCode, long code);
 
     Result batchDeleteProjectParametersByCodes(User loginUser, long projectCode, String codes);
 
     Result queryProjectParameterListPaging(User loginUser, long projectCode, Integer pageSize, Integer pageNo,
-                                           String searchVal);
+                                           String searchVal, String projectParameterDataType);
 
     Result queryProjectParameterByCode(User loginUser, long projectCode, long code);
 }

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/ProjectParameter.java
Patch:
@@ -55,6 +55,9 @@ public class ProjectParameter {
     @TableField("param_value")
     private String paramValue;
 
+    @TableField("param_data_type")
+    private String paramDataType;
+
     private Date createTime;
 
     private Date updateTime;

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/ProjectParameterMapper.java
Patch:
@@ -38,7 +38,8 @@ public interface ProjectParameterMapper extends BaseMapper<ProjectParameter> {
     IPage<ProjectParameter> queryProjectParameterListPaging(IPage<ProjectParameter> page,
                                                             @Param("projectCode") long projectCode,
                                                             @Param("projectParameterIds") List<Integer> projectParameterIds,
-                                                            @Param("searchName") String searchName);
+                                                            @Param("searchName") String searchName,
+                                                            @Param("projectParameterDataType") String projectParameterDataType);
 
     List<ProjectParameter> queryByProjectCode(@Param("projectCode") long projectCode);
 }

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/ProjectParameterMapperTest.java
Patch:
@@ -89,7 +89,7 @@ public void testQueryProjectParameterListPaging() {
         insertOne(2, "name2", 2);
 
         Page<ProjectParameter> page = new Page(1, 3);
-        IPage<ProjectParameter> res = projectParameterMapper.queryProjectParameterListPaging(page, 1, null, null);
+        IPage<ProjectParameter> res = projectParameterMapper.queryProjectParameterListPaging(page, 1, null, null, null);
         Assertions.assertEquals(1, res.getRecords().size());
     }
 }

File: dolphinscheduler-worker/src/main/java/org/apache/dolphinscheduler/server/worker/runner/operator/TaskInstanceKillOperationFunction.java
Patch:
@@ -89,8 +89,8 @@ public TaskInstanceKillResponse operate(TaskInstanceKillRequest taskInstanceKill
             taskExecutionContext
                     .setCurrentExecutionStatus(result ? TaskExecutionStatus.SUCCESS : TaskExecutionStatus.FAILURE);
 
-            WorkerTaskExecutorHolder.remove(taskExecutionContext.getTaskInstanceId());
-            messageRetryRunner.removeRetryMessages(taskExecutionContext.getTaskInstanceId());
+            WorkerTaskExecutorHolder.remove(taskInstanceId);
+            messageRetryRunner.removeRetryMessages(taskInstanceId);
             return TaskInstanceKillResponse.success(taskExecutionContext);
         } finally {
             LogUtils.removeTaskInstanceIdMDC();

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/ApiApplicationServer.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.dolphinscheduler.dao.DaoConfiguration;
 import org.apache.dolphinscheduler.dao.PluginDao;
 import org.apache.dolphinscheduler.dao.entity.PluginDefine;
+import org.apache.dolphinscheduler.plugin.datasource.api.plugin.DataSourceProcessorProvider;
 import org.apache.dolphinscheduler.plugin.storage.api.StorageConfiguration;
 import org.apache.dolphinscheduler.plugin.task.api.TaskChannelFactory;
 import org.apache.dolphinscheduler.plugin.task.api.TaskPluginManager;
@@ -69,6 +70,7 @@ public void run(ApplicationReadyEvent readyEvent) {
         log.info("Received spring application context ready event will load taskPlugin and write to DB");
         // install task plugin
         TaskPluginManager.loadPlugin();
+        DataSourceProcessorProvider.initialize();
         for (Map.Entry<String, TaskChannelFactory> entry : TaskPluginManager.getTaskChannelFactoryMap().entrySet()) {
             String taskPluginName = entry.getKey();
             TaskChannelFactory taskChannelFactory = entry.getValue();

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/MasterServer.java
Patch:
@@ -26,6 +26,7 @@
 import org.apache.dolphinscheduler.dao.DaoConfiguration;
 import org.apache.dolphinscheduler.meter.metrics.MetricsProvider;
 import org.apache.dolphinscheduler.meter.metrics.SystemMetrics;
+import org.apache.dolphinscheduler.plugin.datasource.api.plugin.DataSourceProcessorProvider;
 import org.apache.dolphinscheduler.plugin.storage.api.StorageConfiguration;
 import org.apache.dolphinscheduler.plugin.task.api.TaskPluginManager;
 import org.apache.dolphinscheduler.registry.api.RegistryConfiguration;
@@ -108,6 +109,7 @@ public void run() throws SchedulerException {
 
         // install task plugin
         TaskPluginManager.loadPlugin();
+        DataSourceProcessorProvider.initialize();
 
         this.masterSlotManager.start();
 

File: dolphinscheduler-worker/src/main/java/org/apache/dolphinscheduler/server/worker/WorkerServer.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.dolphinscheduler.common.thread.ThreadUtils;
 import org.apache.dolphinscheduler.meter.metrics.MetricsProvider;
 import org.apache.dolphinscheduler.meter.metrics.SystemMetrics;
+import org.apache.dolphinscheduler.plugin.datasource.api.plugin.DataSourceProcessorProvider;
 import org.apache.dolphinscheduler.plugin.storage.api.StorageConfiguration;
 import org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContext;
 import org.apache.dolphinscheduler.plugin.task.api.TaskPluginManager;
@@ -86,6 +87,7 @@ public static void main(String[] args) {
     public void run() {
         this.workerRpcServer.start();
         TaskPluginManager.loadPlugin();
+        DataSourceProcessorProvider.initialize();
 
         this.workerRegistryClient.setRegistryStoppable(this);
         this.workerRegistryClient.start();

File: dolphinscheduler-worker/src/main/java/org/apache/dolphinscheduler/server/worker/runner/WorkerTaskExecutor.java
Patch:
@@ -283,6 +283,7 @@ protected void sendTaskResult() {
 
         // upload out files and modify the "OUT FILE" property in VarPool
         TaskFilesTransferUtils.uploadOutputFiles(taskExecutionContext, storageOperate);
+
         log.info("Upload output files: {} successfully",
                 TaskFilesTransferUtils.getFileLocalParams(taskExecutionContext, Direct.OUT));
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ExecutorServiceImpl.java
Patch:
@@ -90,6 +90,7 @@
 import org.apache.dolphinscheduler.extract.master.transportor.StreamingTaskTriggerResponse;
 import org.apache.dolphinscheduler.extract.master.transportor.WorkflowInstanceStateChangeEvent;
 import org.apache.dolphinscheduler.plugin.task.api.TaskConstants;
+import org.apache.dolphinscheduler.registry.api.enums.RegistryNodeType;
 import org.apache.dolphinscheduler.service.command.CommandService;
 import org.apache.dolphinscheduler.service.cron.CronUtils;
 import org.apache.dolphinscheduler.service.exceptions.CronParseException;
@@ -289,7 +290,7 @@ public Map<String, Object> execProcessInstance(User loginUser, long projectCode,
 
     private void checkMasterExists() {
         // check master server exists
-        List<Server> masterServers = monitorService.getServerListFromRegistry(true);
+        List<Server> masterServers = monitorService.listServer(RegistryNodeType.MASTER);
 
         // no master
         if (masterServers.isEmpty()) {
@@ -1142,7 +1143,7 @@ public void execStreamTaskInstance(User loginUser, long projectCode, long taskDe
         checkValidTenant(tenantCode);
         checkMasterExists();
         // todo dispatch improvement
-        List<Server> masterServerList = monitorService.getServerListFromRegistry(true);
+        List<Server> masterServerList = monitorService.listServer(RegistryNodeType.MASTER);
         Server server = masterServerList.get(0);
 
         StreamingTaskTriggerRequest taskExecuteStartMessage = new StreamingTaskTriggerRequest();

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ExecuteFunctionServiceTest.java
Patch:
@@ -67,6 +67,7 @@
 import org.apache.dolphinscheduler.dao.mapper.TaskGroupQueueMapper;
 import org.apache.dolphinscheduler.dao.mapper.TenantMapper;
 import org.apache.dolphinscheduler.dao.repository.ProcessInstanceDao;
+import org.apache.dolphinscheduler.registry.api.enums.RegistryNodeType;
 import org.apache.dolphinscheduler.service.command.CommandService;
 import org.apache.dolphinscheduler.service.process.ProcessService;
 import org.apache.dolphinscheduler.service.process.TriggerRelationService;
@@ -242,7 +243,7 @@ public void init() {
         Mockito.when(processService.getTenantForProcess(tenantCode, userId)).thenReturn(tenantCode);
         doReturn(1).when(commandService).createCommand(argThat(c -> c.getId() == null));
         doReturn(0).when(commandService).createCommand(argThat(c -> c.getId() != null));
-        Mockito.when(monitorService.getServerListFromRegistry(true)).thenReturn(getMasterServersList());
+        Mockito.when(monitorService.listServer(RegistryNodeType.MASTER)).thenReturn(getMasterServersList());
         Mockito.when(processService.findProcessInstanceDetailById(processInstanceId))
                 .thenReturn(Optional.ofNullable(processInstance));
         Mockito.when(processService.findProcessDefinition(1L, 1)).thenReturn(this.processDefinition);
@@ -498,7 +499,7 @@ public void testParallelWithSchedule() {
 
     @Test
     public void testNoMasterServers() {
-        Mockito.when(monitorService.getServerListFromRegistry(true)).thenReturn(new ArrayList<>());
+        Mockito.when(monitorService.listServer(RegistryNodeType.MASTER)).thenReturn(new ArrayList<>());
 
         Assertions.assertThrows(ServiceException.class, () -> executorService.execProcessInstance(
                 loginUser,

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/MonitorServiceTest.java
Patch:
@@ -98,13 +98,13 @@ public void testQueryDatabaseState() {
     public void testQueryMaster() {
         mockPermissionCheck(ApiFuncIdentificationConstant.MONITOR_MASTER_VIEW, true);
         Mockito.when(registryClient.getServerList(RegistryNodeType.MASTER)).thenReturn(getServerList());
-        assertDoesNotThrow(() -> monitorService.queryMaster(user));
+        assertDoesNotThrow(() -> monitorService.listServer(RegistryNodeType.MASTER));
     }
 
     @Test
     public void testQueryWorker() {
         Mockito.when(registryClient.getServerList(RegistryNodeType.WORKER)).thenReturn(getServerList());
-        AssertionsHelper.assertDoesNotThrow(() -> monitorService.queryWorker(user));
+        AssertionsHelper.assertDoesNotThrow(() -> monitorService.listServer(RegistryNodeType.WORKER));
     }
 
     @Test

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/ProcessDefinitionMapper.java
Patch:
@@ -188,4 +188,5 @@ List<WorkflowDefinitionCountDto> countDefinitionByProjectCodesV2(@Param("project
      * @return project ids list
      */
     List<Integer> listProjectIds();
+    List<Long> queryDefinitionCodeListByProjectCodes(@Param("projectCodes") List<Long> projectCodes);
 }

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/CommandMapperTest.java
Patch:
@@ -42,6 +42,7 @@
 import org.junit.jupiter.api.Test;
 import org.springframework.beans.factory.annotation.Autowired;
 
+import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
 import com.google.common.collect.Lists;
 
 /**
@@ -135,7 +136,7 @@ public void testGetOneToRun() {
 
         createCommand(CommandType.START_PROCESS, processDefinition.getCode());
 
-        List<Command> actualCommand = commandMapper.queryCommandPage(1, 0);
+        List<Command> actualCommand = commandMapper.selectList(new QueryWrapper<>());
 
         Assertions.assertNotNull(actualCommand);
     }

File: dolphinscheduler-registry/dolphinscheduler-registry-api/src/main/java/org/apache/dolphinscheduler/registry/api/enums/RegistryNodeType.java
Patch:
@@ -37,5 +37,4 @@ public enum RegistryNodeType {
     private final String name;
 
     private final String registryPath;
-
 }

File: dolphinscheduler-task-plugin/dolphinscheduler-task-pytorch/src/main/java/org/apache/dolphinscheduler/plugin/task/pytorch/GitProjectManager.java
Patch:
@@ -33,12 +33,12 @@
 public class GitProjectManager {
 
     public static final String GIT_PATH_LOCAL = "GIT_PROJECT";
-    private static final Pattern GIT_CHECK_PATTERN = Pattern.compile("^(git@|https?://)");
+    private static final Pattern GIT_CHECK_PATTERN = Pattern.compile("^(git@|https?://)(?![&|])[^&|]+$");
     private String path;
     private String baseDir = ".";
 
     public static boolean isGitPath(String path) {
-        return GIT_CHECK_PATTERN.matcher(path).find();
+        return GIT_CHECK_PATTERN.matcher(path).matches();
     }
 
     public void prepareProject() throws Exception {

File: dolphinscheduler-task-plugin/dolphinscheduler-task-remoteshell/src/main/java/org/apache/dolphinscheduler/plugin/task/remoteshell/RemoteExecutor.java
Patch:
@@ -131,7 +131,7 @@ public Integer getTaskExitCode(String taskId) throws IOException {
         int exitCode = -1;
         log.info("Remote shell task run status: {}", logLine);
         if (logLine.contains(STATUS_TAG_MESSAGE)) {
-            String status = logLine.replace(STATUS_TAG_MESSAGE, "").trim();
+            String status = StringUtils.substringAfter(logLine, STATUS_TAG_MESSAGE);
             if (status.equals("0")) {
                 log.info("Remote shell task success");
                 exitCode = 0;

File: dolphinscheduler-extract/dolphinscheduler-extract-base/src/main/java/org/apache/dolphinscheduler/extract/base/client/AbstractClientMethodInvoker.java
Patch:
@@ -17,12 +17,11 @@
 
 package org.apache.dolphinscheduler.extract.base.client;
 
-import org.apache.dolphinscheduler.extract.base.NettyRemotingClient;
 import org.apache.dolphinscheduler.extract.base.utils.Host;
 
 import java.lang.reflect.Method;
 
-public abstract class BaseRemoteMethodInvoker implements ClientMethodInvoker {
+abstract class AbstractClientMethodInvoker implements ClientMethodInvoker {
 
     protected final String methodIdentifier;
 
@@ -32,7 +31,7 @@ public abstract class BaseRemoteMethodInvoker implements ClientMethodInvoker {
 
     protected final Host serverHost;
 
-    public BaseRemoteMethodInvoker(Host serverHost, Method localMethod, NettyRemotingClient nettyRemotingClient) {
+    AbstractClientMethodInvoker(Host serverHost, Method localMethod, NettyRemotingClient nettyRemotingClient) {
         this.serverHost = serverHost;
         this.localMethod = localMethod;
         this.nettyRemotingClient = nettyRemotingClient;

File: dolphinscheduler-extract/dolphinscheduler-extract-base/src/main/java/org/apache/dolphinscheduler/extract/base/client/ClientInvocationHandler.java
Patch:
@@ -19,7 +19,6 @@
 
 import static com.google.common.base.Preconditions.checkNotNull;
 
-import org.apache.dolphinscheduler.extract.base.NettyRemotingClient;
 import org.apache.dolphinscheduler.extract.base.RpcMethod;
 import org.apache.dolphinscheduler.extract.base.utils.Host;
 
@@ -31,15 +30,15 @@
 import lombok.extern.slf4j.Slf4j;
 
 @Slf4j
-public class ClientInvocationHandler implements InvocationHandler {
+class ClientInvocationHandler implements InvocationHandler {
 
     private final NettyRemotingClient nettyRemotingClient;
 
     private final Map<String, ClientMethodInvoker> methodInvokerMap;
 
     private final Host serverHost;
 
-    public ClientInvocationHandler(Host serverHost, NettyRemotingClient nettyRemotingClient) {
+    ClientInvocationHandler(Host serverHost, NettyRemotingClient nettyRemotingClient) {
         this.serverHost = checkNotNull(serverHost);
         this.nettyRemotingClient = checkNotNull(nettyRemotingClient);
         this.methodInvokerMap = new ConcurrentHashMap<>();

File: dolphinscheduler-extract/dolphinscheduler-extract-base/src/main/java/org/apache/dolphinscheduler/extract/base/client/ClientMethodInvoker.java
Patch:
@@ -19,7 +19,7 @@
 
 import java.lang.reflect.Method;
 
-public interface ClientMethodInvoker {
+interface ClientMethodInvoker {
 
     Object invoke(Object proxy, Method method, Object[] args) throws Throwable;
 

File: dolphinscheduler-extract/dolphinscheduler-extract-base/src/main/java/org/apache/dolphinscheduler/extract/base/client/IRpcClientProxyFactory.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.dolphinscheduler.extract.base.client;
 
-public interface IRpcClientProxyFactory {
+interface IRpcClientProxyFactory {
 
     /**
      * Create the client proxy.

File: dolphinscheduler-extract/dolphinscheduler-extract-base/src/main/java/org/apache/dolphinscheduler/extract/base/client/JdkDynamicRpcClientProxyFactory.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.dolphinscheduler.extract.base.client;
 
-import org.apache.dolphinscheduler.extract.base.NettyRemotingClient;
 import org.apache.dolphinscheduler.extract.base.utils.Host;
 
 import java.lang.reflect.Proxy;
@@ -34,7 +33,7 @@
 /**
  * This class is used to create a proxy client which will transform local method invocation to remove invocation.
  */
-public class JdkDynamicRpcClientProxyFactory implements IRpcClientProxyFactory {
+class JdkDynamicRpcClientProxyFactory implements IRpcClientProxyFactory {
 
     private final NettyRemotingClient nettyRemotingClient;
 
@@ -49,7 +48,7 @@ public Map<String, Object> load(String key) {
                 }
             });
 
-    public JdkDynamicRpcClientProxyFactory(NettyRemotingClient nettyRemotingClient) {
+    JdkDynamicRpcClientProxyFactory(NettyRemotingClient nettyRemotingClient) {
         this.nettyRemotingClient = nettyRemotingClient;
     }
 

File: dolphinscheduler-extract/dolphinscheduler-extract-base/src/main/java/org/apache/dolphinscheduler/extract/base/client/NettyRemotingClientFactory.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.extract.base;
+package org.apache.dolphinscheduler.extract.base.client;
 
 import org.apache.dolphinscheduler.extract.base.config.NettyClientConfig;
 

File: dolphinscheduler-extract/dolphinscheduler-extract-base/src/main/java/org/apache/dolphinscheduler/extract/base/client/SingletonJdkDynamicRpcClientProxyFactory.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.dolphinscheduler.extract.base.client;
 
-import org.apache.dolphinscheduler.extract.base.NettyRemotingClientFactory;
 import org.apache.dolphinscheduler.extract.base.config.NettyClientConfig;
 
 public class SingletonJdkDynamicRpcClientProxyFactory {

File: dolphinscheduler-extract/dolphinscheduler-extract-base/src/main/java/org/apache/dolphinscheduler/extract/base/client/SyncClientMethodInvoker.java
Patch:
@@ -18,7 +18,6 @@
 package org.apache.dolphinscheduler.extract.base.client;
 
 import org.apache.dolphinscheduler.extract.base.IRpcResponse;
-import org.apache.dolphinscheduler.extract.base.NettyRemotingClient;
 import org.apache.dolphinscheduler.extract.base.RpcMethod;
 import org.apache.dolphinscheduler.extract.base.StandardRpcRequest;
 import org.apache.dolphinscheduler.extract.base.exception.MethodInvocationException;
@@ -29,9 +28,9 @@
 
 import java.lang.reflect.Method;
 
-public class SyncClientMethodInvoker extends BaseRemoteMethodInvoker {
+class SyncClientMethodInvoker extends AbstractClientMethodInvoker {
 
-    public SyncClientMethodInvoker(Host serverHost, Method localMethod, NettyRemotingClient nettyRemotingClient) {
+    SyncClientMethodInvoker(Host serverHost, Method localMethod, NettyRemotingClient nettyRemotingClient) {
         super(serverHost, localMethod, nettyRemotingClient);
     }
 

File: dolphinscheduler-extract/dolphinscheduler-extract-base/src/main/java/org/apache/dolphinscheduler/extract/base/server/NettyRemotingServerFactory.java
Patch:
@@ -15,16 +15,16 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.extract.base;
+package org.apache.dolphinscheduler.extract.base.server;
 
 import org.apache.dolphinscheduler.extract.base.config.NettyServerConfig;
 
 import lombok.experimental.UtilityClass;
 
 @UtilityClass
-public class NettyRemotingServerFactory {
+class NettyRemotingServerFactory {
 
-    public NettyRemotingServer buildNettyRemotingServer(NettyServerConfig nettyServerConfig) {
+    NettyRemotingServer buildNettyRemotingServer(NettyServerConfig nettyServerConfig) {
         return new NettyRemotingServer(nettyServerConfig);
     }
 }

File: dolphinscheduler-extract/dolphinscheduler-extract-base/src/main/java/org/apache/dolphinscheduler/extract/base/server/ServerMethodInvoker.java
Patch:
@@ -17,10 +17,12 @@
 
 package org.apache.dolphinscheduler.extract.base.server;
 
-public interface ServerMethodInvoker {
+interface ServerMethodInvoker {
 
     String getMethodIdentify();
 
+    String getMethodProviderIdentify();
+
     Object invoke(final Object... arg) throws Throwable;
 
 }

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/resource/ResourceContext.java
Patch:
@@ -60,7 +60,6 @@ public ResourceItem getResourceItem(String resourceAbsolutePathInStorage) {
     public static class ResourceItem {
 
         private String resourceAbsolutePathInStorage;
-        private String resourceRelativePath;
         private String resourceAbsolutePathInLocal;
     }
 

File: dolphinscheduler-task-plugin/dolphinscheduler-task-hivecli/src/test/java/org/apache/dolphinscheduler/plugin/task/hivecli/HiveCliTaskTest.java
Patch:
@@ -65,7 +65,7 @@ public void after() {
     }
 
     @Test
-    public void hiveCliTaskExecuteSqlFromScript() throws Exception {
+    public void hiveCliTaskExecuteSqlFromScript() {
         String hiveCliTaskParameters = buildHiveCliTaskExecuteSqlFromScriptParameters();
         HiveCliTask hiveCliTask = prepareHiveCliTaskForTest(hiveCliTaskParameters);
         hiveCliTask.init();
@@ -78,7 +78,7 @@ public void hiveCliTaskExecuteSqlFromFile() {
         TaskExecutionContext taskExecutionContext = new TaskExecutionContext();
         taskExecutionContext.setTaskParams(hiveCliTaskParameters);
         ResourceContext resourceContext = new ResourceContext();
-        resourceContext.addResourceItem(new ResourceContext.ResourceItem("/sql_tasks/hive_task.sql", "123_node.sql",
+        resourceContext.addResourceItem(new ResourceContext.ResourceItem("/sql_tasks/hive_task.sql",
                 "/sql_tasks/hive_task.sql"));
         taskExecutionContext.setResourceContext(resourceContext);
 

File: dolphinscheduler-worker/src/main/java/org/apache/dolphinscheduler/server/worker/utils/TaskExecutionContextUtils.java
Patch:
@@ -151,7 +151,6 @@ public static ResourceContext downloadResourcesIfNeeded(String tenant,
             }
             ResourceContext.ResourceItem resourceItem = ResourceContext.ResourceItem.builder()
                     .resourceAbsolutePathInStorage(resourceAbsolutePathInStorage)
-                    .resourceRelativePath(resourceRelativePath)
                     .resourceAbsolutePathInLocal(resourceAbsolutePathInLocal)
                     .build();
             resourceContext.addResourceItem(resourceItem);

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/registry/ServerNodeManager.java
Patch:
@@ -245,7 +245,7 @@ private void updateMasterNodes() {
     }
 
     private void updateWorkerNodes() {
-        workerGroupWriteLock.lock();
+        workerNodeInfoWriteLock.lock();
         try {
             Map<String, String> workerNodeMaps = registryClient.getServerMaps(RegistryNodeType.WORKER);
             for (Map.Entry<String, String> entry : workerNodeMaps.entrySet()) {
@@ -254,7 +254,7 @@ private void updateWorkerNodes() {
                 workerNodeInfo.put(nodeAddress, workerHeartBeat);
             }
         } finally {
-            workerGroupWriteLock.unlock();
+            workerNodeInfoWriteLock.unlock();
         }
     }
 

File: dolphinscheduler-worker/src/main/java/org/apache/dolphinscheduler/server/worker/utils/TaskExecutionContextUtils.java
Patch:
@@ -78,7 +78,7 @@ public static String getOrCreateTenant(WorkerConfig workerConfig, TaskExecutionC
             throw ex;
         } catch (Exception ex) {
             throw new TaskException(
-                    String.format("TenantCode: %s doesn't exist", taskExecutionContext.getTenantCode()));
+                    String.format("TenantCode: %s doesn't exist", taskExecutionContext.getTenantCode()), ex);
         }
     }
 

File: dolphinscheduler-alert/dolphinscheduler-alert-plugins/dolphinscheduler-alert-dingtalk/src/test/java/org/apache/dolphinscheduler/plugin/alert/dingtalk/DingTalkSenderTest.java
Patch:
@@ -19,6 +19,7 @@
 
 import org.apache.dolphinscheduler.alert.api.AlertResult;
 
+import java.nio.charset.StandardCharsets;
 import java.util.HashMap;
 import java.util.Map;
 
@@ -47,7 +48,7 @@ public void initDingTalkConfig() {
     @Test
     public void testSend() {
         DingTalkSender dingTalkSender = new DingTalkSender(dingTalkConfig);
-        dingTalkSender.sendDingTalkMsg("keyWord+Welcome", "UTF-8");
+        dingTalkSender.sendDingTalkMsg("keyWord+Welcome", StandardCharsets.UTF_8.name());
         dingTalkConfig.put(DingTalkParamsConstants.NAME_DING_TALK_PROXY_ENABLE, "true");
         dingTalkSender = new DingTalkSender(dingTalkConfig);
         AlertResult alertResult = dingTalkSender.sendDingTalkMsg("title", "content test");

File: dolphinscheduler-alert/dolphinscheduler-alert-plugins/dolphinscheduler-alert-email/src/main/java/org/apache/dolphinscheduler/plugin/alert/email/EmailConstants.java
Patch:
@@ -56,8 +56,6 @@ public final class EmailConstants {
 
     public static final String TABLE_BODY_HTML_TAIL = "</table></body></html>";
 
-    public static final String UTF_8 = "UTF-8";
-
     public static final String EXCEL_SUFFIX_XLSX = ".xlsx";
 
     public static final String SINGLE_SLASH = "/";

File: dolphinscheduler-alert/dolphinscheduler-alert-plugins/dolphinscheduler-alert-feishu/src/main/java/org/apache/dolphinscheduler/plugin/alert/feishu/FeiShuSender.java
Patch:
@@ -31,6 +31,7 @@
 import org.apache.http.util.EntityUtils;
 
 import java.io.IOException;
+import java.nio.charset.StandardCharsets;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
@@ -161,7 +162,7 @@ private String sendMsg(AlertData alertData) throws IOException {
             String resp;
             try {
                 HttpEntity entity = response.getEntity();
-                resp = EntityUtils.toString(entity, "utf-8");
+                resp = EntityUtils.toString(entity, StandardCharsets.UTF_8);
                 EntityUtils.consume(entity);
             } finally {
                 response.close();

File: dolphinscheduler-alert/dolphinscheduler-alert-plugins/dolphinscheduler-alert-prometheus/src/main/java/org/apache/dolphinscheduler/plugin/alert/prometheus/PrometheusAlertSender.java
Patch:
@@ -34,6 +34,7 @@
 import org.apache.http.util.EntityUtils;
 
 import java.io.IOException;
+import java.nio.charset.StandardCharsets;
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
 import java.util.Date;
@@ -90,7 +91,7 @@ private String sendMsg(AlertData alertData) throws IOException {
                 }
 
                 HttpEntity entity = response.getEntity();
-                resp = EntityUtils.toString(entity, "utf-8");
+                resp = EntityUtils.toString(entity, StandardCharsets.UTF_8);
                 EntityUtils.consume(entity);
                 log.error(
                         "Prometheus alert manager send alert failed, http status code: {}, title: {} ,content: {}, resp: {}",

File: dolphinscheduler-alert/dolphinscheduler-alert-plugins/dolphinscheduler-alert-script/src/test/java/org/apache/dolphinscheduler/plugin/alert/script/ProcessUtilsTest.java
Patch:
@@ -33,6 +33,7 @@ public class ProcessUtilsTest {
 
     @Test
     public void testExecuteScript() {
-        ProcessUtils.executeScript(cmd);
+        int code = ProcessUtils.executeScript(cmd);
+        assert code != -1;
     }
 }

File: dolphinscheduler-alert/dolphinscheduler-alert-plugins/dolphinscheduler-alert-slack/src/main/java/org/apache/dolphinscheduler/plugin/alert/slack/SlackSender.java
Patch:
@@ -29,6 +29,7 @@
 import org.apache.http.impl.client.HttpClients;
 import org.apache.http.util.EntityUtils;
 
+import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.LinkedHashMap;
@@ -81,11 +82,11 @@ public String sendMessage(String title, String content) {
             }
 
             HttpPost httpPost = new HttpPost(webHookUrl);
-            httpPost.setEntity(new StringEntity(JSONUtils.toJsonString(paramMap), "UTF-8"));
+            httpPost.setEntity(new StringEntity(JSONUtils.toJsonString(paramMap), StandardCharsets.UTF_8));
             CloseableHttpResponse response = httpClient.execute(httpPost);
 
             HttpEntity entity = response.getEntity();
-            return EntityUtils.toString(entity, "UTF-8");
+            return EntityUtils.toString(entity, StandardCharsets.UTF_8);
         } catch (Exception e) {
             log.error("Send message to slack error.", e);
             return "System Exception";

File: dolphinscheduler-alert/dolphinscheduler-alert-plugins/dolphinscheduler-alert-telegram/src/main/java/org/apache/dolphinscheduler/plugin/alert/telegram/TelegramSender.java
Patch:
@@ -153,7 +153,7 @@ private String sendInvoke(String title, String content) throws IOException {
             String resp;
             try {
                 HttpEntity entity = response.getEntity();
-                resp = EntityUtils.toString(entity, "UTF-8");
+                resp = EntityUtils.toString(entity, StandardCharsets.UTF_8);
                 EntityUtils.consume(entity);
             } finally {
                 response.close();

File: dolphinscheduler-alert/dolphinscheduler-alert-plugins/dolphinscheduler-alert-wechat/src/main/java/org/apache/dolphinscheduler/plugin/alert/wechat/WeChatAlertConstants.java
Patch:
@@ -23,8 +23,6 @@ public final class WeChatAlertConstants {
 
     static final String MARKDOWN_ENTER = "\n";
 
-    static final String CHARSET = "UTF-8";
-
     static final String WE_CHAT_PUSH_URL = "https://qyapi.weixin.qq.com/cgi-bin/message/send?access_token={token}";
 
     static final String WE_CHAT_APP_CHAT_PUSH_URL = "https://qyapi.weixin.qq.com/cgi-bin/appchat/send?access_token" +

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/FileUtils.java
Patch:
@@ -22,7 +22,6 @@
 import static org.apache.dolphinscheduler.common.constants.Constants.FORMAT_S_S;
 import static org.apache.dolphinscheduler.common.constants.Constants.RESOURCE_VIEW_SUFFIXES;
 import static org.apache.dolphinscheduler.common.constants.Constants.RESOURCE_VIEW_SUFFIXES_DEFAULT_VALUE;
-import static org.apache.dolphinscheduler.common.constants.Constants.UTF_8;
 import static org.apache.dolphinscheduler.common.constants.DateConstants.YYYYMMDDHHMMSS;
 
 import org.apache.commons.io.IOUtils;
@@ -207,7 +206,7 @@ public static String readFile2Str(InputStream inputStream) {
             while ((length = inputStream.read(buffer)) != -1) {
                 output.write(buffer, 0, length);
             }
-            return output.toString(UTF_8);
+            return output.toString(StandardCharsets.UTF_8.name());
         } catch (Exception e) {
             log.error(e.getMessage(), e);
             throw new RuntimeException(e);

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/HttpUtils.java
Patch:
@@ -36,6 +36,7 @@
 import org.apache.http.util.EntityUtils;
 
 import java.io.IOException;
+import java.nio.charset.StandardCharsets;
 import java.security.NoSuchAlgorithmException;
 import java.util.Arrays;
 
@@ -143,7 +144,7 @@ public static String getResponseContentString(HttpGet httpGet, CloseableHttpClie
             }
 
             HttpEntity entity = response.getEntity();
-            return entity != null ? EntityUtils.toString(entity, Constants.UTF_8) : null;
+            return entity != null ? EntityUtils.toString(entity, StandardCharsets.UTF_8) : null;
         } catch (IOException e) {
             log.error("Error executing HTTP GET request", e);
             return null;

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/TriggerRelationMapper.java
Patch:
@@ -36,7 +36,7 @@ public interface TriggerRelationMapper extends BaseMapper<TriggerRelation> {
      * @param jobId
      * @return
      */
-    TriggerRelation queryByTypeAndJobId(@Param("triggerType") Integer triggerType, @Param("jobId") int jobId);
+    List<TriggerRelation> queryByTypeAndJobId(@Param("triggerType") Integer triggerType, @Param("jobId") int jobId);
 
     /**
      * query triggerRelation by code

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/TriggerRelationService.java
Patch:
@@ -20,6 +20,8 @@
 import org.apache.dolphinscheduler.common.enums.ApiTriggerType;
 import org.apache.dolphinscheduler.dao.entity.TriggerRelation;
 
+import java.util.List;
+
 import org.springframework.stereotype.Component;
 
 /**
@@ -30,7 +32,7 @@ public interface TriggerRelationService {
 
     void saveTriggerToDb(ApiTriggerType type, Long triggerCode, Integer jobId);
 
-    TriggerRelation queryByTypeAndJobId(ApiTriggerType apiTriggerType, int jobId);
+    List<TriggerRelation> queryByTypeAndJobId(ApiTriggerType apiTriggerType, int jobId);
 
     int saveCommandTrigger(Integer commandId, Integer processInstanceId);
 

File: dolphinscheduler-task-plugin/dolphinscheduler-task-spark/src/test/java/org/apache/dolphinscheduler/plugin/task/spark/SparkParametersTest.java
Patch:
@@ -54,6 +54,5 @@ public void getResourceFilesList() {
         resourceFilesList = sparkParameters.getResourceFilesList();
         Assertions.assertNotNull(resourceFilesList);
         Assertions.assertEquals(3, resourceFilesList.size());
-
     }
 }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/executor/workflow/instance/pause/recover/RecoverExecuteFunction.java
Patch:
@@ -43,7 +43,7 @@ public RecoverExecuteFunction(CommandService commandService) {
     @Override
     public RecoverExecuteResult execute(RecoverExecuteRequest request) throws ExecuteRuntimeException {
         ProcessInstance workflowInstance = request.getWorkflowInstance();
-        if (!workflowInstance.getState().isPause()) {
+        if (!(workflowInstance.getState().isPause() || workflowInstance.getState().isStop())) {
             throw new ExecuteRuntimeException(
                     String.format("The workflow instance: %s state is %s, cannot recovery", workflowInstance.getName(),
                             workflowInstance.getState()));

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/PluginDao.java
Patch:
@@ -29,10 +29,10 @@
 import lombok.extern.slf4j.Slf4j;
 
 import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.stereotype.Component;
+import org.springframework.stereotype.Repository;
 
 @Slf4j
-@Component
+@Repository
 public class PluginDao {
 
     @Autowired

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/repository/impl/AlertDaoTest.java
Patch:
@@ -15,10 +15,12 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.dao;
+package org.apache.dolphinscheduler.dao.repository.impl;
 
 import org.apache.dolphinscheduler.common.enums.AlertStatus;
 import org.apache.dolphinscheduler.common.enums.ProfileType;
+import org.apache.dolphinscheduler.dao.AlertDao;
+import org.apache.dolphinscheduler.dao.DaoConfiguration;
 import org.apache.dolphinscheduler.dao.entity.Alert;
 
 import java.util.List;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/audit/OperatorUtils.java
Patch:
@@ -66,7 +66,6 @@ public static List<AuditLog> buildAuditLogList(String apiDescription, AuditType
         auditLog.setOperationType(auditType.getAuditOperationType().getName());
         auditLog.setDescription(apiDescription);
         auditLog.setCreateTime(new Date());
-        auditLogList.add(auditLog);
 
         return auditLogList;
     }

File: dolphinscheduler-task-plugin/dolphinscheduler-task-seatunnel/src/main/java/org/apache/dolphinscheduler/plugin/task/seatunnel/Constants.java
Patch:
@@ -29,5 +29,7 @@ private Constants() {
     public static final String STARTUP_SCRIPT_SPARK = "spark";
     public static final String STARTUP_SCRIPT_FLINK = "flink";
     public static final String STARTUP_SCRIPT_SEATUNNEL = "seatunnel";
+    public static final String JSON_SUFFIX = "json";
+    public static final String CONF_SUFFIX = "conf";
 
 }

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-ssh/src/main/java/org/apache/dolphinscheduler/plugin/datasource/ssh/SSHUtils.java
Patch:
@@ -59,7 +59,7 @@ public static ClientSession getSession(SshClient client, SSHConnectionParam conn
                 throw new Exception("Failed to add public key identity", e);
             }
         }
-        session.setSessionHeartbeat(SessionHeartbeatController.HeartbeatType.RESERVED, Duration.ofSeconds(3));
+        session.setSessionHeartbeat(SessionHeartbeatController.HeartbeatType.IGNORE, Duration.ofSeconds(3));
         return session;
     }
 }

File: dolphinscheduler-extract/dolphinscheduler-extract-master/src/main/java/org/apache/dolphinscheduler/extract/master/transportor/StreamingTaskTriggerResponse.java
Patch:
@@ -19,9 +19,11 @@
 
 import lombok.AllArgsConstructor;
 import lombok.Data;
+import lombok.NoArgsConstructor;
 
 @Data
 @AllArgsConstructor
+@NoArgsConstructor
 public class StreamingTaskTriggerResponse {
 
     private boolean success;

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessServiceImpl.java
Patch:
@@ -798,7 +798,7 @@ private Boolean checkCmdParam(Command command, Map<String, String> cmdParam) {
                 // recover tolerance fault process
                 // If the workflow instance is in ready state, we will change to running, this can avoid the workflow
                 // instance
-                // status is not correct with taskInsatnce status
+                // status is not correct with taskInstance status
                 if (processInstance.getState() == WorkflowExecutionStatus.READY_PAUSE
                         || processInstance.getState() == WorkflowExecutionStatus.READY_STOP) {
                     // todo: If we handle the ready state in WorkflowExecuteRunnable then we can remove below code

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/DataSourceController.java
Patch:
@@ -162,7 +162,7 @@ public Result<Object> queryDataSource(@Parameter(hidden = true) @RequestAttribut
     @ApiException(QUERY_DATASOURCE_ERROR)
     public Result<Object> queryDataSourceList(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,
                                               @RequestParam("type") DbType type) {
-        List<DataSource> datasourceList = dataSourceService.queryDataSourceList(loginUser, type.ordinal());
+        List<DataSource> datasourceList = dataSourceService.queryDataSourceList(loginUser, type.getCode());
         return Result.success(datasourceList);
     }
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ResourcesController.java
Patch:
@@ -554,7 +554,7 @@ public Result<Object> queryUdfFuncListPaging(@Parameter(hidden = true) @RequestA
     @ApiException(QUERY_DATASOURCE_BY_TYPE_ERROR)
     public Result<Object> queryUdfFuncList(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,
                                            @RequestParam("type") UdfType type) {
-        return udfFuncService.queryUdfFuncList(loginUser, type.ordinal());
+        return udfFuncService.queryUdfFuncList(loginUser, type.getCode());
     }
 
     /**

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-api/src/main/java/org/apache/dolphinscheduler/plugin/datasource/api/datasource/AbstractDataSourceProcessor.java
Patch:
@@ -134,6 +134,7 @@ public boolean checkDataSourceConnectivity(ConnectionParam connectionParam) {
 
     @Override
     public List<String> splitAndRemoveComment(String sql) {
-        return SQLParserUtils.splitAndRemoveComment(sql, com.alibaba.druid.DbType.other);
+        String cleanSQL = SQLParserUtils.removeComment(sql, com.alibaba.druid.DbType.other);
+        return SQLParserUtils.split(cleanSQL, com.alibaba.druid.DbType.other);
     }
 }

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-clickhouse/src/main/java/org/apache/dolphinscheduler/plugin/datasource/clickhouse/param/ClickHouseDataSourceProcessor.java
Patch:
@@ -129,7 +129,8 @@ public DataSourceProcessor create() {
 
     @Override
     public List<String> splitAndRemoveComment(String sql) {
-        return SQLParserUtils.splitAndRemoveComment(sql, com.alibaba.druid.DbType.clickhouse);
+        String cleanSQL = SQLParserUtils.removeComment(sql, com.alibaba.druid.DbType.clickhouse);
+        return SQLParserUtils.split(cleanSQL, com.alibaba.druid.DbType.clickhouse);
     }
 
     private String transformOther(Map<String, String> otherMap) {

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-dameng/src/main/java/org/apache/dolphinscheduler/plugin/datasource/dameng/param/DamengDataSourceProcessor.java
Patch:
@@ -135,7 +135,8 @@ public DataSourceProcessor create() {
 
     @Override
     public List<String> splitAndRemoveComment(String sql) {
-        return SQLParserUtils.splitAndRemoveComment(sql, com.alibaba.druid.DbType.dm);
+        String cleanSQL = SQLParserUtils.removeComment(sql, com.alibaba.druid.DbType.dm);
+        return SQLParserUtils.split(cleanSQL, com.alibaba.druid.DbType.dm);
     }
 
     private String transformOther(Map<String, String> paramMap) {

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-db2/src/main/java/org/apache/dolphinscheduler/plugin/datasource/db2/param/Db2DataSourceProcessor.java
Patch:
@@ -129,7 +129,8 @@ public String getValidationQuery() {
 
     @Override
     public List<String> splitAndRemoveComment(String sql) {
-        return SQLParserUtils.splitAndRemoveComment(sql, com.alibaba.druid.DbType.db2);
+        String cleanSQL = SQLParserUtils.removeComment(sql, com.alibaba.druid.DbType.db2);
+        return SQLParserUtils.split(cleanSQL, com.alibaba.druid.DbType.db2);
     }
 
     private String transformOther(Map<String, String> otherMap) {

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-hive/src/main/java/org/apache/dolphinscheduler/plugin/datasource/hive/param/HiveDataSourceProcessor.java
Patch:
@@ -152,7 +152,8 @@ public DataSourceProcessor create() {
 
     @Override
     public List<String> splitAndRemoveComment(String sql) {
-        return SQLParserUtils.splitAndRemoveComment(sql, com.alibaba.druid.DbType.hive);
+        String cleanSQL = SQLParserUtils.removeComment(sql, com.alibaba.druid.DbType.hive);
+        return SQLParserUtils.split(cleanSQL, com.alibaba.druid.DbType.hive);
     }
 
     private String transformOther(Map<String, String> otherMap) {

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-mysql/src/main/java/org/apache/dolphinscheduler/plugin/datasource/mysql/param/MySQLDataSourceProcessor.java
Patch:
@@ -177,7 +177,8 @@ public DataSourceProcessor create() {
 
     @Override
     public List<String> splitAndRemoveComment(String sql) {
-        return SQLParserUtils.splitAndRemoveComment(sql, com.alibaba.druid.DbType.mysql);
+        String cleanSQL = SQLParserUtils.removeComment(sql, com.alibaba.druid.DbType.mysql);
+        return SQLParserUtils.split(cleanSQL, com.alibaba.druid.DbType.mysql);
     }
 
     private static boolean checkKeyIsLegitimate(String key) {

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-oceanbase/src/main/java/org/apache/dolphinscheduler/plugin/datasource/oceanbase/param/OceanBaseDataSourceProcessor.java
Patch:
@@ -192,6 +192,7 @@ public DataSourceProcessor create() {
 
     @Override
     public List<String> splitAndRemoveComment(String sql) {
-        return SQLParserUtils.splitAndRemoveComment(sql, com.alibaba.druid.DbType.oceanbase);
+        String cleanSQL = SQLParserUtils.removeComment(sql, com.alibaba.druid.DbType.oceanbase);
+        return SQLParserUtils.split(cleanSQL, com.alibaba.druid.DbType.oceanbase);
     }
 }

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-postgresql/src/main/java/org/apache/dolphinscheduler/plugin/datasource/postgresql/param/PostgreSQLDataSourceProcessor.java
Patch:
@@ -131,7 +131,8 @@ public DataSourceProcessor create() {
 
     @Override
     public List<String> splitAndRemoveComment(String sql) {
-        return SQLParserUtils.splitAndRemoveComment(sql, com.alibaba.druid.DbType.postgresql);
+        String cleanSQL = SQLParserUtils.removeComment(sql, com.alibaba.druid.DbType.postgresql);
+        return SQLParserUtils.split(cleanSQL, com.alibaba.druid.DbType.postgresql);
     }
 
     private String transformOther(Map<String, String> otherMap) {

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-sqlserver/src/main/java/org/apache/dolphinscheduler/plugin/datasource/sqlserver/param/SQLServerDataSourceProcessor.java
Patch:
@@ -128,7 +128,8 @@ public DataSourceProcessor create() {
 
     @Override
     public List<String> splitAndRemoveComment(String sql) {
-        return SQLParserUtils.splitAndRemoveComment(sql, com.alibaba.druid.DbType.sqlserver);
+        String cleanSQL = SQLParserUtils.removeComment(sql, com.alibaba.druid.DbType.sqlserver);
+        return SQLParserUtils.split(cleanSQL, com.alibaba.druid.DbType.sqlserver);
     }
 
     private String transformOther(Map<String, String> otherMap) {

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-trino/src/main/java/org/apache/dolphinscheduler/plugin/datasource/trino/param/TrinoDataSourceProcessor.java
Patch:
@@ -131,7 +131,8 @@ public DataSourceProcessor create() {
 
     @Override
     public List<String> splitAndRemoveComment(String sql) {
-        return SQLParserUtils.splitAndRemoveComment(sql, com.alibaba.druid.DbType.trino);
+        String cleanSQL = SQLParserUtils.removeComment(sql, com.alibaba.druid.DbType.trino);
+        return SQLParserUtils.split(cleanSQL, com.alibaba.druid.DbType.trino);
     }
 
     private String transformOther(Map<String, String> otherMap) {

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/ProcessInstanceMapperTest.java
Patch:
@@ -263,7 +263,8 @@ public void testQueryLastSchedulerProcess() {
         processInstanceMapper.updateById(processInstance);
 
         ProcessInstance processInstance1 =
-                processInstanceMapper.queryLastSchedulerProcess(processInstance.getProcessDefinitionCode(), null, null,
+                processInstanceMapper.queryLastSchedulerProcess(processInstance.getProcessDefinitionCode(), 0L, null,
+                        null,
                         processInstance.getTestFlag());
         Assertions.assertNotEquals(null, processInstance1);
         processInstanceMapper.deleteById(processInstance.getId());

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/utils/DependentExecute.java
Patch:
@@ -320,7 +320,7 @@ private ProcessInstance findLastProcessInterval(Long definitionCode, Long taskCo
                                                     int testFlag) {
 
         ProcessInstance lastSchedulerProcess =
-                processInstanceDao.queryLastSchedulerProcessInterval(definitionCode, dateInterval, testFlag);
+                processInstanceDao.queryLastSchedulerProcessInterval(definitionCode, taskCode, dateInterval, testFlag);
 
         ProcessInstance lastManualProcess =
                 processInstanceDao.queryLastManualProcessInterval(definitionCode, taskCode, dateInterval, testFlag);

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/GlobalTaskDispatchWaitingQueueLooper.java
Patch:
@@ -69,7 +69,7 @@ public void run() {
             defaultTaskExecuteRunnable = globalTaskDispatchWaitingQueue.takeTaskExecuteRunnable();
             try {
                 TaskExecutionStatus status = defaultTaskExecuteRunnable.getTaskInstance().getState();
-                if (status != TaskExecutionStatus.SUBMITTED_SUCCESS) {
+                if (status != TaskExecutionStatus.SUBMITTED_SUCCESS && status != TaskExecutionStatus.DELAY_EXECUTION) {
                     log.warn("The TaskInstance {} state is : {}, will not dispatch",
                             defaultTaskExecuteRunnable.getTaskInstance().getName(), status);
                     continue;

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/operator/BaseTaskExecuteRunnableDispatchOperator.java
Patch:
@@ -48,9 +48,10 @@ public void operate(DefaultTaskExecuteRunnable taskExecuteRunnable) {
         if (remainTime > 0) {
             taskInstance.setState(TaskExecutionStatus.DELAY_EXECUTION);
             taskInstanceDao.updateById(taskInstance);
-            log.info("Current taskInstance: {} is choose delay execution, delay time: {}/s, remainTime: {}/s",
+            log.info("Current taskInstance: {} is choose delay execution, delay time: {}/min, remainTime: {}/s",
                     taskInstance.getName(),
-                    taskInstance.getDelayTime(), remainTime);
+                    taskInstance.getDelayTime(),
+                    remainTime);
         }
         globalTaskDispatchWaitingQueue.submitTaskExecuteRunnable(taskExecuteRunnable);
     }

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/ProcessInstanceMapper.java
Patch:
@@ -219,12 +219,14 @@ ProcessInstance queryLastRunningProcess(@Param("processDefinitionCode") Long def
      * query last manual process instance
      *
      * @param definitionCode definitionCode
+     * @param taskCode taskCode
      * @param startTime      startTime
      * @param endTime        endTime
      * @param testFlag       testFlag
      * @return process instance
      */
     ProcessInstance queryLastManualProcess(@Param("processDefinitionCode") Long definitionCode,
+                                           @Param("taskCode") Long taskCode,
                                            @Param("startTime") Date startTime,
                                            @Param("endTime") Date endTime,
                                            @Param("testFlag") int testFlag);

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/repository/ProcessInstanceDao.java
Patch:
@@ -51,10 +51,12 @@ public interface ProcessInstanceDao extends IDao<ProcessInstance> {
      * find last manual process instance interval
      *
      * @param definitionCode process definition code
+     * @param taskCode taskCode
      * @param dateInterval   dateInterval
      * @return process instance
      */
-    ProcessInstance queryLastManualProcessInterval(Long definitionCode, DateInterval dateInterval, int testFlag);
+    ProcessInstance queryLastManualProcessInterval(Long definitionCode, Long taskCode, DateInterval dateInterval,
+                                                   int testFlag);
 
     /**
      * query first schedule process instance

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/repository/impl/ProcessInstanceDaoImpl.java
Patch:
@@ -82,13 +82,15 @@ public ProcessInstance queryLastSchedulerProcessInterval(Long definitionCode, Da
      * find last manual process instance interval
      *
      * @param definitionCode process definition code
+     * @param taskCode taskCode
      * @param dateInterval   dateInterval
      * @return process instance
      */
     @Override
-    public ProcessInstance queryLastManualProcessInterval(Long definitionCode, DateInterval dateInterval,
+    public ProcessInstance queryLastManualProcessInterval(Long definitionCode, Long taskCode, DateInterval dateInterval,
                                                           int testFlag) {
         return mybatisMapper.queryLastManualProcess(definitionCode,
+                taskCode,
                 dateInterval.getStartTime(),
                 dateInterval.getEndTime(),
                 testFlag);

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/DependentItem.java
Patch:
@@ -35,7 +35,7 @@ public class DependentItem {
     private String dateValue;
     private DependResult dependResult;
     private TaskExecutionStatus status;
-    private Boolean parameterPassing;
+    private Boolean parameterPassing = false;
 
     public String getKey() {
         return String.format("%d-%d-%s-%s",

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ResourcesServiceTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.dolphinscheduler.api.service;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertTrue;
 import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.when;
 
@@ -494,9 +495,8 @@ public void testUpdateResourceContent() throws Exception {
         ServiceException serviceException =
                 Assertions.assertThrows(ServiceException.class, () -> resourcesService.updateResourceContent(getUser(),
                         "/dolphinscheduler/123/resources/ResourcesServiceTest.jar", "123", "content"));
-        assertEquals(
-                "Internal Server Error: Resource file: /dolphinscheduler/123/resources/ResourcesServiceTest.jar is illegal",
-                serviceException.getMessage());
+        assertTrue(serviceException.getMessage()
+                .contains("Resource file: /dolphinscheduler/123/resources/ResourcesServiceTest.jar is illegal"));
 
         // RESOURCE_NOT_EXIST
         when(storageOperate.getResDir(Mockito.anyString())).thenReturn("/dolphinscheduler/123/resources");

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/OSUtils.java
Patch:
@@ -229,7 +229,7 @@ public static boolean createUser(String userName) {
      */
     private static void createLinuxUser(String userName, String userGroup) throws IOException {
         log.info("create linux os user: {}", userName);
-        String cmd = String.format("sudo useradd -g %s %s", userGroup, userName);
+        String cmd = String.format("sudo useradd -m -g %s %s", userGroup, userName);
         log.info("execute cmd: {}", cmd);
         exeCmd(cmd);
     }

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/GlobalTaskDispatchWaitingQueue.java
Patch:
@@ -19,6 +19,7 @@
 
 import java.util.concurrent.DelayQueue;
 
+import lombok.SneakyThrows;
 import lombok.extern.slf4j.Slf4j;
 
 import org.springframework.stereotype.Component;
@@ -37,7 +38,8 @@ public void submitTaskExecuteRunnable(DefaultTaskExecuteRunnable priorityTaskExe
         queue.put(priorityTaskExecuteRunnable);
     }
 
-    public DefaultTaskExecuteRunnable takeTaskExecuteRunnable() throws InterruptedException {
+    @SneakyThrows
+    public DefaultTaskExecuteRunnable takeTaskExecuteRunnable() {
         return queue.take();
     }
 

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-hive/src/main/java/org/apache/dolphinscheduler/plugin/datasource/hive/param/HiveDataSourceProcessor.java
Patch:
@@ -125,7 +125,7 @@ public String getJdbcUrl(ConnectionParam connectionParam) {
         HiveConnectionParam hiveConnectionParam = (HiveConnectionParam) connectionParam;
         String jdbcUrl = hiveConnectionParam.getJdbcUrl();
         if (MapUtils.isNotEmpty(hiveConnectionParam.getOther())) {
-            return jdbcUrl + "?" + transformOther(hiveConnectionParam.getOther());
+            return jdbcUrl + ";" + transformOther(hiveConnectionParam.getOther());
         }
         return jdbcUrl;
     }

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/utils/SwitchTaskUtils.java
Patch:
@@ -66,7 +66,7 @@ public static String generateContentWithTaskParams(String condition, Map<String,
                                                        Map<String, Property> varParams) {
         String content = condition.replaceAll("'", "\"");
         if (MapUtils.isEmpty(globalParams) && MapUtils.isEmpty(varParams)) {
-            throw new IllegalArgumentException("globalParams and varParams are both empty, please check it.");
+            return content;
         }
         Map<String, Property> params = Maps.newHashMap();
         if (MapUtils.isNotEmpty(globalParams)) {

File: dolphinscheduler-master/src/test/java/org/apache/dolphinscheduler/server/master/utils/SwitchTaskUtilsTest.java
Patch:
@@ -34,9 +34,8 @@ public void testGenerateContentWithTaskParams() {
         String content = "${test}==1";
         Map<String, Property> globalParams = new HashMap<>();
         Map<String, Property> varParams = new HashMap<>();
-        Assertions.assertThrowsExactly(IllegalArgumentException.class, () -> {
-            SwitchTaskUtils.generateContentWithTaskParams(content, globalParams, varParams);
-        });
+        Assertions.assertDoesNotThrow(
+                () -> SwitchTaskUtils.generateContentWithTaskParams(content, globalParams, varParams));
 
         globalParams.put("test", new Property("test", Direct.IN, DataType.INTEGER, "1"));
         String result = SwitchTaskUtils.generateContentWithTaskParams(content, globalParams, varParams);

File: dolphinscheduler-storage-plugin/dolphinscheduler-storage-hdfs/src/main/java/org/apache/dolphinscheduler/plugin/storage/hdfs/HdfsStorageOperator.java
Patch:
@@ -71,7 +71,7 @@
 @Slf4j
 public class HdfsStorageOperator implements Closeable, StorageOperate {
 
-    private static HdfsStorageProperties hdfsProperties = new HdfsStorageProperties();
+    protected static HdfsStorageProperties hdfsProperties = new HdfsStorageProperties();
     private static final String HADOOP_UTILS_KEY = "HADOOP_UTILS_KEY";
 
     private volatile boolean yarnEnabled = false;

File: dolphinscheduler-storage-plugin/dolphinscheduler-storage-hdfs/src/main/java/org/apache/dolphinscheduler/plugin/storage/hdfs/LocalStorageOperatorFactory.java
Patch:
@@ -32,7 +32,7 @@ public class LocalStorageOperatorFactory implements StorageOperateFactory {
     public StorageOperate createStorageOperate() {
         HdfsStorageProperties hdfsStorageProperties = new HdfsStorageProperties();
         hdfsStorageProperties.setDefaultFS(LOCAL_DEFAULT_FS);
-        return new HdfsStorageOperator(hdfsStorageProperties);
+        return new LocalStorageOperator(hdfsStorageProperties);
     }
 
     @Override

File: dolphinscheduler-worker/src/main/java/org/apache/dolphinscheduler/server/worker/task/WorkerHeartBeatTask.java
Patch:
@@ -68,6 +68,7 @@ public WorkerHeartBeat getHeartBeat() {
                 .cpuUsage(systemMetrics.getTotalCpuUsedPercentage())
                 .jvmMemoryUsage(systemMetrics.getJvmMemoryUsedPercentage())
                 .memoryUsage(systemMetrics.getSystemMemoryUsedPercentage())
+                .diskUsage(systemMetrics.getDiskUsedPercentage())
                 .processId(processId)
                 .workerHostWeight(workerConfig.getHostWeight())
                 .threadPoolUsage(workerTaskExecutorThreadPool.getRunningTaskExecutorSize()

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProcessInstanceServiceTest.java
Patch:
@@ -769,7 +769,6 @@ public void testViewGantt() throws Exception {
                 processInstance.getProcessDefinitionCode(),
                 processInstance.getProcessDefinitionVersion())).thenReturn(new ProcessDefinitionLog());
         when(processInstanceMapper.queryDetailById(1)).thenReturn(processInstance);
-        when(taskInstanceMapper.queryByInstanceIdAndName(Mockito.anyInt(), Mockito.any())).thenReturn(taskInstance);
         DAG<Long, TaskNode, TaskNodeRelation> graph = new DAG<>();
         for (long i = 1; i <= 7; ++i) {
             graph.addNode(i, new TaskNode());

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/repository/TaskInstanceDao.java
Patch:
@@ -100,9 +100,10 @@ List<TaskInstance> queryLastTaskInstanceListIntervalInProcessInstance(Integer pr
 
     /**
      * find last task instance corresponding to taskCode in the date interval
+     *
      * @param processInstanceId Task's parent process instance id
-     * @param depTaskCode taskCode
-     * @param testFlag test flag
+     * @param depTaskCode       taskCode
+     * @param testFlag          test flag
      * @return task instance
      */
     TaskInstance queryLastTaskInstanceIntervalInProcessInstance(Integer processInstanceId,

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessService.java
Patch:
@@ -45,7 +45,6 @@
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
 import org.apache.dolphinscheduler.dao.entity.UdfFunc;
 import org.apache.dolphinscheduler.dao.entity.User;
-import org.apache.dolphinscheduler.plugin.task.api.enums.TaskExecutionStatus;
 import org.apache.dolphinscheduler.service.exceptions.CronParseException;
 import org.apache.dolphinscheduler.service.model.TaskNode;
 
@@ -98,8 +97,6 @@ ProcessInstance constructProcessInstance(Command command,
 
     void updateTaskDefinitionResources(TaskDefinition taskDefinition);
 
-    List<Integer> findTaskIdByInstanceState(int instanceId, TaskExecutionStatus state);
-
     int deleteWorkProcessMapByParentId(int parentWorkProcessId);
 
     ProcessInstance findSubProcessInstance(Integer parentProcessId, Integer parentTaskId);

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/TaskConstants.java
Patch:
@@ -358,9 +358,9 @@ private TaskConstants() {
     public static final String RESOURCE_UPLOAD_PATH = "resource.storage.upload.base.path";
 
     /**
-     * data.quality.jar.name
+     * data.quality.jar.dir
      */
-    public static final String DATA_QUALITY_JAR_NAME = "data-quality.jar.name";
+    public static final String DATA_QUALITY_JAR_DIR = "data-quality.jar.dir";
 
     public static final String TASK_TYPE_CONDITIONS = "CONDITIONS";
 

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessService.java
Patch:
@@ -50,6 +50,7 @@
 import org.apache.dolphinscheduler.service.model.TaskNode;
 
 import java.util.List;
+import java.util.Map;
 import java.util.Optional;
 
 import javax.annotation.Nullable;
@@ -194,4 +195,6 @@ TaskGroupQueue insertIntoTaskGroupQueue(Integer taskId,
     void forceProcessInstanceSuccessByTaskInstanceId(Integer taskInstanceId);
 
     void saveCommandTrigger(Integer commandId, Integer processInstanceId);
+
+    void setGlobalParamIfCommanded(ProcessDefinition processDefinition, Map<String, String> cmdParam);
 }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/TaskInstanceServiceImpl.java
Patch:
@@ -255,6 +255,7 @@ public Result forceTaskSuccess(User loginUser, long projectCode, Integer taskIns
 
         // change the state of the task instance
         task.setState(TaskExecutionStatus.FORCED_SUCCESS);
+        task.setEndTime(new Date());
         int changedNum = taskInstanceMapper.updateById(task);
         if (changedNum > 0) {
             processService.forceProcessInstanceSuccessByTaskInstanceId(taskInstanceId);

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/ProcessUtils.java
Patch:
@@ -71,7 +71,7 @@ private ProcessUtils() {
      * Initialization regularization, solve the problem of pre-compilation performance,
      * avoid the thread safety problem of multi-thread operation
      */
-    private static final Pattern MACPATTERN = Pattern.compile("-[+|-]-\\s(\\d+)");
+    private static final Pattern MACPATTERN = Pattern.compile("-[+|-][-|=]\\s(\\d+)");
 
     /**
      * Expression of PID recognition in Windows scene

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/test/java/org/apache/dolphinscheduler/plugin/task/api/utils/ProcessUtilsTest.java
Patch:
@@ -38,6 +38,7 @@ public void testGetPidsStr() throws Exception {
         String command;
         MockedStatic<OSUtils> osUtilsMockedStatic = Mockito.mockStatic(OSUtils.class);
         if (SystemUtils.IS_OS_MAC) {
+            pids = "-+= 6279 sudo -+- 6282 558_1497.sh --- 6354 sleep";
             command = String.format("%s -sp %d", TaskConstants.PSTREE, processId);
         } else if (SystemUtils.IS_OS_LINUX) {
             command = String.format("%s -p %d", TaskConstants.PSTREE, processId);
@@ -54,6 +55,7 @@ public void testGetPidsStr() throws Exception {
         String exceptPidsStr2 = "2000 2100 2101";
         String command2;
         if (SystemUtils.IS_OS_MAC) {
+            pids2 = "-+= 2000 apache2 -+- 2100 222332-apache2-submit_task.py --- 2101 apache2";
             command2 = String.format("%s -sp %d", TaskConstants.PSTREE, processId2);
         } else if (SystemUtils.IS_OS_LINUX) {
             command2 = String.format("%s -p %d", TaskConstants.PSTREE, processId2);
@@ -70,6 +72,7 @@ public void testGetPidsStr() throws Exception {
         String exceptPidsStr3 = "5000 6000 7000 7100";
         String command3;
         if (SystemUtils.IS_OS_MAC) {
+            pids3 = "-+= 5000 sshd -+- 6000 sshd --= 7000 bash --- 7100 python";
             command3 = String.format("%s -sp %d", TaskConstants.PSTREE, processId3);
         } else if (SystemUtils.IS_OS_LINUX) {
             command3 = String.format("%s -p %d", TaskConstants.PSTREE, processId3);

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/constants/DataSourceConstants.java
Patch:
@@ -102,7 +102,7 @@ public class DataSourceConstants {
      * dataSource sensitive param
      */
     public static final String DATASOURCE_PASSWORD_REGEX =
-            "(?<=((?i)password((\":\")|(\\\\\":\\\\\")|(=')))).*?(?=((\")|(\\\\\")|(')))";
+            "(?<=((?i)password((\" : \")|(\":\")|(\\\\\":\\\\\")|(=')))).*?(?=((\")|(\\\\\")|(')))";
 
     /**
      * datasource encryption salt

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/utils/ProcessUtils.java
Patch:
@@ -30,6 +30,7 @@
 
 import java.io.File;
 import java.nio.charset.StandardCharsets;
+import java.nio.file.Paths;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
@@ -176,7 +177,7 @@ public static String getPidsStr(int processId) throws Exception {
                                     taskExecutionContext.getProcessInstanceId(),
                                     taskExecutionContext.getTaskInstanceId()));
                 }
-                FileUtils.createWorkDirIfAbsent(taskExecutionContext.getExecutePath());
+                FileUtils.createDirectoryWith755(Paths.get(taskExecutionContext.getExecutePath()));
                 org.apache.dolphinscheduler.plugin.task.api.utils.ProcessUtils.cancelApplication(taskExecutionContext);
                 return appIds;
             } else {

File: dolphinscheduler-storage-plugin/dolphinscheduler-storage-abs/src/main/java/org/apache/dolphinscheduler/plugin/storage/abs/AbsStorageOperator.java
Patch:
@@ -25,6 +25,7 @@
 
 import org.apache.dolphinscheduler.common.constants.Constants;
 import org.apache.dolphinscheduler.common.enums.ResUploadType;
+import org.apache.dolphinscheduler.common.utils.FileUtils;
 import org.apache.dolphinscheduler.common.utils.PropertyUtils;
 import org.apache.dolphinscheduler.plugin.storage.api.StorageEntity;
 import org.apache.dolphinscheduler.plugin.storage.api.StorageOperate;
@@ -170,7 +171,7 @@ public void download(String srcFilePath, String dstFilePath, boolean overwrite)
         if (dstFile.isDirectory()) {
             Files.delete(dstFile.toPath());
         } else {
-            Files.createDirectories(dstFile.getParentFile().toPath());
+            FileUtils.createDirectoryWith755(dstFile.getParentFile().toPath());
         }
 
         BlobClient blobClient = blobContainerClient.getBlobClient(srcFilePath);

File: dolphinscheduler-storage-plugin/dolphinscheduler-storage-gcs/src/main/java/org/apache/dolphinscheduler/plugin/storage/gcs/GcsStorageOperator.java
Patch:
@@ -25,6 +25,7 @@
 
 import org.apache.dolphinscheduler.common.constants.Constants;
 import org.apache.dolphinscheduler.common.enums.ResUploadType;
+import org.apache.dolphinscheduler.common.utils.FileUtils;
 import org.apache.dolphinscheduler.common.utils.PropertyUtils;
 import org.apache.dolphinscheduler.plugin.storage.api.StorageEntity;
 import org.apache.dolphinscheduler.plugin.storage.api.StorageOperate;
@@ -143,7 +144,7 @@ public void download(String srcFilePath, String dstFilePath, boolean overwrite)
         if (dstFile.isDirectory()) {
             Files.delete(dstFile.toPath());
         } else {
-            Files.createDirectories(dstFile.getParentFile().toPath());
+            FileUtils.createDirectoryWith755(dstFile.getParentFile().toPath());
         }
 
         Blob blob = gcsStorage.get(BlobId.of(bucketName, srcFilePath));

File: dolphinscheduler-storage-plugin/dolphinscheduler-storage-obs/src/main/java/org/apache/dolphinscheduler/plugin/storage/obs/ObsStorageOperator.java
Patch:
@@ -24,6 +24,7 @@
 
 import org.apache.dolphinscheduler.common.constants.Constants;
 import org.apache.dolphinscheduler.common.enums.ResUploadType;
+import org.apache.dolphinscheduler.common.utils.FileUtils;
 import org.apache.dolphinscheduler.common.utils.PropertyUtils;
 import org.apache.dolphinscheduler.plugin.storage.api.StorageEntity;
 import org.apache.dolphinscheduler.plugin.storage.api.StorageOperate;
@@ -187,7 +188,7 @@ public void download(String srcFilePath, String dstFilePath, boolean overwrite)
         if (dstFile.isDirectory()) {
             Files.delete(dstFile.toPath());
         } else {
-            Files.createDirectories(dstFile.getParentFile().toPath());
+            FileUtils.createDirectoryWith755(dstFile.getParentFile().toPath());
         }
         ObsObject obsObject = obsClient.getObject(bucketName, srcFilePath);
         try (

File: dolphinscheduler-storage-plugin/dolphinscheduler-storage-oss/src/main/java/org/apache/dolphinscheduler/plugin/storage/oss/OssStorageOperator.java
Patch:
@@ -26,6 +26,7 @@
 import org.apache.dolphinscheduler.common.enums.ResUploadType;
 import org.apache.dolphinscheduler.common.factory.OssClientFactory;
 import org.apache.dolphinscheduler.common.model.OssConnection;
+import org.apache.dolphinscheduler.common.utils.FileUtils;
 import org.apache.dolphinscheduler.common.utils.PropertyUtils;
 import org.apache.dolphinscheduler.plugin.storage.api.StorageEntity;
 import org.apache.dolphinscheduler.plugin.storage.api.StorageOperate;
@@ -213,7 +214,7 @@ public void download(String srcFilePath, String dstFilePath,
         if (dstFile.isDirectory()) {
             Files.delete(dstFile.toPath());
         } else {
-            Files.createDirectories(dstFile.getParentFile().toPath());
+            FileUtils.createDirectoryWith755(dstFile.getParentFile().toPath());
         }
         OSSObject ossObject = ossClient.getObject(bucketName, srcFilePath);
         try (

File: dolphinscheduler-storage-plugin/dolphinscheduler-storage-s3/src/main/java/org/apache/dolphinscheduler/plugin/storage/s3/S3StorageOperator.java
Patch:
@@ -25,6 +25,7 @@
 
 import org.apache.dolphinscheduler.common.constants.Constants;
 import org.apache.dolphinscheduler.common.enums.ResUploadType;
+import org.apache.dolphinscheduler.common.utils.FileUtils;
 import org.apache.dolphinscheduler.common.utils.PropertyUtils;
 import org.apache.dolphinscheduler.plugin.storage.api.StorageEntity;
 import org.apache.dolphinscheduler.plugin.storage.api.StorageOperate;
@@ -200,7 +201,7 @@ public void download(String srcFilePath, String dstFilePath,
         if (dstFile.isDirectory()) {
             Files.delete(dstFile.toPath());
         } else {
-            Files.createDirectories(dstFile.getParentFile().toPath());
+            FileUtils.createDirectoryWith755(dstFile.getParentFile().toPath());
         }
         S3Object o = s3Client.getObject(bucketName, srcFilePath);
         try (

File: dolphinscheduler-task-plugin/dolphinscheduler-task-java/src/test/java/org/apache/dolphinscheduler/plugin/task/java/JavaTaskTest.java
Patch:
@@ -22,6 +22,7 @@
 import static org.apache.dolphinscheduler.plugin.task.java.JavaConstants.RUN_TYPE_JAR;
 import static org.apache.dolphinscheduler.plugin.task.java.JavaConstants.RUN_TYPE_JAVA;
 
+import org.apache.dolphinscheduler.common.utils.FileUtils;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
 import org.apache.dolphinscheduler.plugin.task.api.TaskCallBack;
 import org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContext;
@@ -155,7 +156,7 @@ public void coverJavaSourceFileExistException() throws IOException {
             try {
                 Path path = Paths.get(fileName);
                 if (!Files.exists(path)) {
-                    Files.createDirectories(path);
+                    FileUtils.createDirectoryWith755(path);
                 }
                 javaTask.createJavaSourceFileIfNotExists(sourceCode, fileName);
             } finally {

File: dolphinscheduler-worker/src/main/java/org/apache/dolphinscheduler/server/worker/utils/TaskExecutionContextUtils.java
Patch:
@@ -97,7 +97,7 @@ public static void createTaskInstanceWorkingDirectory(TaskExecutionContext taskE
                 log.warn("The TaskInstance WorkingDirectory: {} is exist, will recreate again",
                         taskInstanceWorkingDirectory);
             }
-            Files.createDirectories(Paths.get(taskInstanceWorkingDirectory));
+            FileUtils.createDirectoryWith755(Paths.get(taskInstanceWorkingDirectory));
 
             taskExecutionContext.setExecutePath(taskInstanceWorkingDirectory);
             taskExecutionContext.setAppInfoPath(FileUtils.getAppInfoPath(taskInstanceWorkingDirectory));
@@ -137,6 +137,7 @@ public static ResourceContext downloadResourcesIfNeeded(String tenant,
                     storageOperate.download(resourceAbsolutePathInStorage, resourceAbsolutePathInLocal, true);
                     log.debug("Download resource file {} under: {} successfully", resourceAbsolutePathInStorage,
                             resourceAbsolutePathInLocal);
+                    FileUtils.setFileTo755(file);
                     WorkerServerMetrics
                             .recordWorkerResourceDownloadTime(System.currentTimeMillis() - resourceDownloadStartTime);
                     WorkerServerMetrics

File: dolphinscheduler-worker/src/test/java/org/apache/dolphinscheduler/server/worker/utils/TaskExecutionContextUtilsTest.java
Patch:
@@ -49,7 +49,7 @@ void createTaskInstanceWorkingDirectory() throws IOException {
         try {
             // Test if the working directory is exist
             // will delete it and recreate
-            Files.createDirectories(Paths.get(taskWorkingDirectory));
+            FileUtils.createDirectoryWith755(Paths.get(taskWorkingDirectory));
             Files.createFile(Paths.get(taskWorkingDirectory, "text.txt"));
             Assertions.assertTrue(Files.exists(Paths.get(taskWorkingDirectory, "text.txt")));
 

File: dolphinscheduler-registry/dolphinscheduler-registry-api/src/main/java/org/apache/dolphinscheduler/registry/api/enums/RegistryNodeType.java
Patch:
@@ -28,6 +28,7 @@ public enum RegistryNodeType {
     MASTER("Master", "/nodes/master"),
     MASTER_NODE_LOCK("MasterNodeLock", "/lock/master-node"),
     MASTER_FAILOVER_LOCK("MasterFailoverLock", "/lock/master-failover"),
+    MASTER_TASK_GROUP_COORDINATOR_LOCK("TaskGroupCoordinatorLock", "/lock/master-task-group-coordinator"),
     WORKER("Worker", "/nodes/worker"),
     ALERT_SERVER("AlertServer", "/nodes/alert-server"),
     ALERT_LOCK("AlertNodeLock", "/lock/alert"),

File: dolphinscheduler-extract/dolphinscheduler-extract-base/src/main/java/org/apache/dolphinscheduler/extract/base/StandardRpcRequest.java
Patch:
@@ -40,7 +40,7 @@ public static StandardRpcRequest of(Object[] args) {
         final Class<?>[] argsTypes = new Class[args.length];
         for (int i = 0; i < args.length; i++) {
             argsBytes[i] = JsonSerializer.serialize(args[i]);
-            argsTypes[i] = args[i].getClass();
+            argsTypes[i] = args[i] == null ? null : args[i].getClass();
         }
         return new StandardRpcRequest(argsBytes, argsTypes);
     }

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/RetryUtils.java
Patch:
@@ -41,7 +41,7 @@ public static <T> T retryFunction(@NonNull Supplier<T> supplier) {
      */
     public static <T> T retryFunction(@NonNull Supplier<T> supplier, @NonNull RetryPolicy retryPolicy) {
         int retryCount = 0;
-        long retryInterval = 0L;
+        long retryInterval = retryPolicy.getRetryInterval();
         while (true) {
             try {
                 return supplier.get();

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/BaseController.java
Patch:
@@ -151,7 +151,7 @@ public Result success(Object list) {
 
     /**
      * return the data use Map format, for example, passing the value of key, value, passing a value
-     * eg. "/user/add"  then return user name: zhangsan
+     * e.g. "/user/add"  then return username: zhangsan
      *
      * @param msg message
      * @param object success object data

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/CloudController.java
Patch:
@@ -56,10 +56,10 @@ public class CloudController extends BaseController {
     private CloudService cloudService;
 
     /**
-     * get datafactory list
+     * get data factory list
      *
      * @param loginUser login user
-     * @return datafactory name list
+     * @return data factory name list
      */
     @Operation(summary = "listDataFactory", description = "LIST_DATA_FACTORY")
     @GetMapping(value = "/azure/datafactory/factories")

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ClusterController.java
Patch:
@@ -81,7 +81,7 @@ public class ClusterController extends BaseController {
     @PostMapping(value = "/create")
     @ResponseStatus(HttpStatus.CREATED)
     @ApiException(CREATE_CLUSTER_ERROR)
-    public Result<Long> createProject(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,
+    public Result<Long> createCluster(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,
                                       @RequestParam("name") String name,
                                       @RequestParam("config") String config,
                                       @RequestParam(value = "description", required = false) String description) {

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/DataSourceController.java
Patch:
@@ -261,7 +261,7 @@ public Result<Boolean> deleteDataSource(@Parameter(hidden = true) @RequestAttrib
      *
      * @param loginUser login user
      * @param name data source name
-     * @return true if data source name not exists.otherwise return false
+     * @return true if data source name not exists, otherwise return false
      */
     @Operation(summary = "verifyDataSourceName", description = "VERIFY_DATA_SOURCE_NOTES")
     @Parameters({
@@ -281,9 +281,9 @@ public Result<Boolean> verifyDataSourceName(@Parameter(hidden = true) @RequestAt
      *
      * @param loginUser login user
      * @param userId user id
-     * @return unauthed data source result code
+     * @return unauthorized data source result code
      */
-    @Operation(summary = "unauthDatasource", description = "UNAUTHORIZED_DATA_SOURCE_NOTES")
+    @Operation(summary = "unauthorizedDatasource", description = "UNAUTHORIZED_DATA_SOURCE_NOTES")
     @Parameters({
             @Parameter(name = "userId", description = "USER_ID", required = true, schema = @Schema(implementation = int.class, example = "100"))
     })

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/DynamicTaskTypeController.java
Patch:
@@ -62,7 +62,7 @@ public class DynamicTaskTypeController extends BaseController {
      * @param loginUser login user
      * @return dynamic task category list
      */
-    @Operation(summary = "listTaskCates", description = "LIST_TASK_TYPE_CATES")
+    @Operation(summary = "listTaskCategories", description = "LIST_TASK_TYPE_CATEGORIES")
     @GetMapping(value = "/taskCategories")
     @ResponseStatus(HttpStatus.OK)
     @ApiException(LIST_TASK_TYPE_ERROR)

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/K8sNamespaceController.java
Patch:
@@ -163,7 +163,7 @@ public Result delNamespaceById(@Parameter(hidden = true) @RequestAttribute(value
      *
      * @param loginUser login user
      * @param userId    user id
-     * @return the namespaces which user have not permission to see
+     * @return the namespaces which user have no permission to see
      */
     @Operation(summary = "queryUnauthorizedNamespace", description = "QUERY_UNAUTHORIZED_NAMESPACE_NOTES")
     @Parameters({

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/LoginController.java
Patch:
@@ -161,7 +161,7 @@ public Result ssoLogin(HttpServletRequest request) {
         return Result.success();
     }
 
-    @Operation(summary = "signOut", description = "SIGNOUT_NOTES")
+    @Operation(summary = "signOut", description = "SIGN_OUT_NOTES")
     @PostMapping(value = "/signOut")
     @ApiException(SIGN_OUT_ERROR)
     public Result signOut(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/MonitorController.java
Patch:
@@ -89,7 +89,7 @@ public Result<List<WorkerServerModel>> listWorker(@Parameter(hidden = true) @Req
      * query database state
      *
      * @param loginUser login user
-     * @return data base state
+     * @return database state
      */
     @Operation(summary = "queryDatabaseState", description = "QUERY_DATABASE_STATE_NOTES")
     @GetMapping(value = "/databases")

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProjectController.java
Patch:
@@ -217,7 +217,7 @@ public Result deleteProject(@Parameter(hidden = true) @RequestAttribute(value =
      *
      * @param loginUser login user
      * @param userId    user id
-     * @return the projects which user have not permission to see
+     * @return the projects which user have no permission to see
      */
     @Operation(summary = "queryUnauthorizedProject", description = "QUERY_UNAUTHORIZED_PROJECT_NOTES")
     @Parameters({

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ResourcesController.java
Patch:
@@ -316,7 +316,7 @@ public Result<Object> queryResourceJarList(@Parameter(hidden = true) @RequestAtt
      *
      * @param loginUser login user
      * @param fileName resource full name
-     * @param tenantCode tenantcode of the owner of the resource
+     * @param tenantCode tenantCode of the owner of the resource
      * @param type resource type
      * @return true if the resource name not exists, otherwise return false
      */

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/SchedulerController.java
Patch:
@@ -243,7 +243,7 @@ public Result queryScheduleListPaging(@Parameter(hidden = true) @RequestAttribut
      *
      * @param loginUser login user
      * @param projectCode project code
-     * @param id scheule id
+     * @param id schedule id
      * @return delete result code
      */
     @Operation(summary = "deleteScheduleById", description = "DELETE_SCHEDULE_NOTES")

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/TaskGroupController.java
Patch:
@@ -83,11 +83,11 @@ public class TaskGroupController extends BaseController {
     @ApiException(CREATE_TASK_GROUP_ERROR)
     public Result createTaskGroup(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,
                                   @RequestParam("name") String name,
-                                  @RequestParam(value = "projectCode", required = false, defaultValue = "0") Long projectcode,
+                                  @RequestParam(value = "projectCode", required = false, defaultValue = "0") Long projectCode,
                                   @RequestParam("description") String description,
                                   @RequestParam("groupSize") Integer groupSize) {
         Map<String, Object> result =
-                taskGroupService.createTaskGroup(loginUser, projectcode, name, description, groupSize);
+                taskGroupService.createTaskGroup(loginUser, projectCode, name, description, groupSize);
         return returnDataList(result);
     }
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/WorkFlowLineageController.java
Patch:
@@ -111,7 +111,7 @@ public Result<Map<String, Object>> queryWorkFlowLineage(@Parameter(hidden = true
      * @param projectCode project codes which taskCode belong
      * @param processDefinitionCode project code which taskCode belong
      * @param taskCode task definition code
-     * @return Result of task can be delete or not
+     * @return Result of task can be deleted or not
      */
     @Operation(summary = "verifyTaskCanDelete", description = "VERIFY_TASK_CAN_DELETE")
     @Parameters({

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/WorkerGroupController.java
Patch:
@@ -75,7 +75,7 @@ public class WorkerGroupController extends BaseController {
             @Parameter(name = "name", description = "WORKER_GROUP_NAME", required = true, schema = @Schema(implementation = String.class)),
             @Parameter(name = "addrList", description = "WORKER_ADDR_LIST", required = true, schema = @Schema(implementation = String.class)),
             @Parameter(name = "description", description = "WORKER_DESC", required = false, schema = @Schema(implementation = String.class)),
-            @Parameter(name = "otherParamsJson", description = "WORKER_PARMS_JSON", required = false, schema = @Schema(implementation = String.class)),
+            @Parameter(name = "otherParamsJson", description = "WORKER_PARAMS_JSON", required = false, schema = @Schema(implementation = String.class)),
     })
     @PostMapping()
     @ResponseStatus(HttpStatus.OK)

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/v2/ProcessTaskRelationV2Controller.java
Patch:
@@ -113,7 +113,7 @@ public Result deleteTaskRelation(@Parameter(hidden = true) @RequestAttribute(val
      */
     @Operation(summary = "update", description = "UPDATE_PROCESS_TASK_RELATION_NOTES")
     @Parameters({
-            @Parameter(name = "code", description = "DOWMSTREAM_TASK_DEFINITION_CODE", schema = @Schema(implementation = long.class, example = "123456", required = true))
+            @Parameter(name = "code", description = "DOWNSTREAM_TASK_DEFINITION_CODE", schema = @Schema(implementation = long.class, example = "123456", required = true))
     })
     @PutMapping(value = "/{code}")
     @ResponseStatus(HttpStatus.OK)

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/v2/ProjectV2Controller.java
Patch:
@@ -184,7 +184,7 @@ public ProjectDeleteResponse deleteProject(@Parameter(hidden = true) @RequestAtt
      *
      * @param loginUser login user
      * @param userId    user id
-     * @return the projects which user have not permission to see
+     * @return the projects which user have no permission to see
      */
     @Operation(summary = "queryUnauthorizedProject", description = "QUERY_UNAUTHORIZED_PROJECT_NOTES")
     @Parameters({

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/TenantControllerTest.java
Patch:
@@ -69,7 +69,7 @@ public void testCreateTenant() throws Exception {
     }
 
     @Test
-    public void testQueryTenantlistPaging() throws Exception {
+    public void testQueryTenantListPaging() throws Exception {
         MultiValueMap<String, String> paramsMap = new LinkedMultiValueMap<>();
         paramsMap.add("pageNo", "1");
         paramsMap.add("searchVal", "tenant");
@@ -145,7 +145,7 @@ public void testVerifyTenantCodeExists() throws Exception {
     }
 
     @Test
-    public void testQueryTenantlist() throws Exception {
+    public void testQueryTenantList() throws Exception {
 
         MvcResult mvcResult = mockMvc.perform(get("/tenants/list")
                 .header(SESSION_ID, sessionId))

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/ParameterUtils.java
Patch:
@@ -301,7 +301,6 @@ private static String dateTemplateParse(String templateStr, Date date) {
                 continue;
             }
             String value = TimePlaceholderUtils.getPlaceHolderTime(key, date);
-            assert value != null;
             matcher.appendReplacement(newValue, value);
         }
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/TaskDefinitionServiceImpl.java
Patch:
@@ -39,7 +39,7 @@
 import org.apache.dolphinscheduler.api.service.TaskDefinitionService;
 import org.apache.dolphinscheduler.api.utils.PageInfo;
 import org.apache.dolphinscheduler.api.utils.Result;
-import org.apache.dolphinscheduler.api.vo.TaskDefinitionVo;
+import org.apache.dolphinscheduler.api.vo.TaskDefinitionVO;
 import org.apache.dolphinscheduler.common.constants.Constants;
 import org.apache.dolphinscheduler.common.enums.AuthorizationType;
 import org.apache.dolphinscheduler.common.enums.ConditionType;
@@ -1167,7 +1167,7 @@ public Map<String, Object> queryTaskDefinitionDetail(User loginUser, long projec
                 taskRelationList = taskRelationList.stream()
                         .filter(v -> v.getPreTaskCode() != 0).collect(Collectors.toList());
             }
-            TaskDefinitionVo taskDefinitionVo = TaskDefinitionVo.fromTaskDefinition(taskDefinition);
+            TaskDefinitionVO taskDefinitionVo = TaskDefinitionVO.fromTaskDefinition(taskDefinition);
             taskDefinitionVo.setProcessTaskRelationList(taskRelationList);
             result.put(Constants.DATA_LIST, taskDefinitionVo);
             putMsg(result, Status.SUCCESS);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/vo/ScheduleVO.java
Patch:
@@ -30,7 +30,7 @@
 import lombok.Data;
 
 @Data
-public class ScheduleVo {
+public class ScheduleVO {
 
     private int id;
 
@@ -140,7 +140,7 @@ public class ScheduleVo {
      */
     private String environmentName;
 
-    public ScheduleVo(Schedule schedule) {
+    public ScheduleVO(Schedule schedule) {
         this.setId(schedule.getId());
         this.setCrontab(schedule.getCrontab());
         this.setProjectName(schedule.getProjectName());

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/DataAnalysisServiceTest.java
Patch:
@@ -32,7 +32,7 @@
 import org.apache.dolphinscheduler.api.exceptions.ServiceException;
 import org.apache.dolphinscheduler.api.permission.ResourcePermissionCheckService;
 import org.apache.dolphinscheduler.api.service.impl.DataAnalysisServiceImpl;
-import org.apache.dolphinscheduler.api.vo.TaskInstanceCountVo;
+import org.apache.dolphinscheduler.api.vo.TaskInstanceCountVO;
 import org.apache.dolphinscheduler.common.constants.Constants;
 import org.apache.dolphinscheduler.common.enums.AuthorizationType;
 import org.apache.dolphinscheduler.common.enums.CommandType;
@@ -201,7 +201,7 @@ public void testCountTaskStateByProject_noData() {
         user.setUserType(UserType.GENERAL_USER);
         when(taskInstanceMapper.countTaskInstanceStateByProjectCodes(any(), any(), any()))
                 .thenReturn(Collections.emptyList());
-        TaskInstanceCountVo taskInstanceStateCountByProject =
+        TaskInstanceCountVO taskInstanceStateCountByProject =
                 dataAnalysisServiceImpl.getTaskInstanceStateCountByProject(user, 1L, null, null);
         assertThat(taskInstanceStateCountByProject).isNotNull();
     }

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/thread/BaseDaemonThread.java
Patch:
@@ -25,12 +25,14 @@ public abstract class BaseDaemonThread extends Thread {
     protected BaseDaemonThread(Runnable runnable) {
         super(runnable);
         this.setDaemon(true);
+        this.setUncaughtExceptionHandler(DefaultUncaughtExceptionHandler.getInstance());
     }
 
     protected BaseDaemonThread(String threadName) {
         super();
         this.setName(threadName);
         this.setDaemon(true);
+        this.setUncaughtExceptionHandler(DefaultUncaughtExceptionHandler.getInstance());
     }
 
 }

File: dolphinscheduler-extract/dolphinscheduler-extract-base/src/main/java/org/apache/dolphinscheduler/extract/base/NettyClientHandler.java
Patch:
@@ -67,7 +67,7 @@ private void processReceived(final Transporter transporter) {
         future.release();
         if (future.getInvokeCallback() != null) {
             future.removeFuture();
-            this.callbackExecutor.submit(future::executeInvokeCallback);
+            this.callbackExecutor.execute(future::executeInvokeCallback);
         } else {
             future.putResponse(deserialize);
         }

File: dolphinscheduler-extract/dolphinscheduler-extract-base/src/main/java/org/apache/dolphinscheduler/extract/base/server/JdkDynamicServerHandler.java
Patch:
@@ -90,7 +90,7 @@ private void processReceived(final Channel channel, final Transporter transporte
                 channel.writeAndFlush(response);
                 return;
             }
-            nettyRemotingServer.getDefaultExecutor().submit(() -> {
+            nettyRemotingServer.getDefaultExecutor().execute(() -> {
                 StandardRpcResponse iRpcResponse;
                 try {
                     StandardRpcRequest standardRpcRequest =

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/registry/ServerNodeManager.java
Patch:
@@ -20,11 +20,11 @@
 import org.apache.dolphinscheduler.common.constants.Constants;
 import org.apache.dolphinscheduler.common.model.MasterHeartBeat;
 import org.apache.dolphinscheduler.common.model.WorkerHeartBeat;
+import org.apache.dolphinscheduler.common.thread.ThreadUtils;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
 import org.apache.dolphinscheduler.dao.AlertDao;
 import org.apache.dolphinscheduler.dao.entity.WorkerGroup;
 import org.apache.dolphinscheduler.dao.mapper.WorkerGroupMapper;
-import org.apache.dolphinscheduler.extract.base.utils.NamedThreadFactory;
 import org.apache.dolphinscheduler.registry.api.Event;
 import org.apache.dolphinscheduler.registry.api.Event.Type;
 import org.apache.dolphinscheduler.registry.api.RegistryClient;
@@ -116,8 +116,8 @@ public void afterPropertiesSet() {
         refreshNodesAndGroupMappings();
 
         // init executor service
-        executorService =
-                Executors.newSingleThreadScheduledExecutor(new NamedThreadFactory("ServerNodeManagerExecutor"));
+        executorService = Executors
+                .newSingleThreadScheduledExecutor(ThreadUtils.newDaemonThreadFactory("ServerNodeManagerExecutor"));
         executorService.scheduleWithFixedDelay(
                 new WorkerNodeInfoAndGroupDbSyncTask(),
                 0,

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/execute/AsyncMasterTaskDelayQueueLooper.java
Patch:
@@ -78,7 +78,7 @@ public void run() {
                             "Cannot find the taskInstance from TaskExecutionContextCacheManager, the task may already been killed, will stop the async master task");
                     continue;
                 }
-                masterAsyncTaskExecutorThreadPool.getThreadPool().submit(() -> {
+                masterAsyncTaskExecutorThreadPool.getThreadPool().execute(() -> {
                     final AsyncTaskExecuteFunction asyncTaskExecuteFunction =
                             asyncTaskExecutionContext.getAsyncTaskExecuteFunction();
                     final AsyncTaskCallbackFunction asyncTaskCallbackFunction =

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/execute/MasterAsyncTaskExecutorThreadPool.java
Patch:
@@ -41,7 +41,7 @@ public MasterAsyncTaskExecutorThreadPool(MasterConfig masterConfig) {
     public boolean submitMasterTaskExecutor(AsyncMasterTaskExecutor asyncMasterTaskExecutor) {
         synchronized (MasterAsyncTaskExecutorThreadPool.class) {
             // todo: check if the thread pool is overload
-            threadPoolExecutor.submit(asyncMasterTaskExecutor);
+            threadPoolExecutor.execute(asyncMasterTaskExecutor);
             return true;
         }
     }

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/execute/MasterSyncTaskExecutorThreadPool.java
Patch:
@@ -41,7 +41,7 @@ public MasterSyncTaskExecutorThreadPool(MasterConfig masterConfig) {
     public boolean submitMasterTaskExecutor(SyncMasterTaskExecutor syncMasterTaskExecutor) {
         synchronized (MasterSyncTaskExecutorThreadPool.class) {
             // todo: check if the thread pool is overload
-            threadPoolExecutor.submit(syncMasterTaskExecutor);
+            threadPoolExecutor.execute(syncMasterTaskExecutor);
             return true;
         }
     }

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/AbstractCommandExecutor.java
Patch:
@@ -265,7 +265,7 @@ private void parseProcessOutput(Process process) {
         // todo: remove this this thread pool.
         ExecutorService getOutputLogService = ThreadUtils
                 .newSingleDaemonScheduledExecutorService("ResolveOutputLog-thread-" + taskRequest.getTaskName());
-        getOutputLogService.submit(() -> {
+        getOutputLogService.execute(() -> {
             TaskOutputParameterParser taskOutputParameterParser = new TaskOutputParameterParser();
             try (BufferedReader inReader = new BufferedReader(new InputStreamReader(process.getInputStream()))) {
                 LogUtils.setTaskInstanceLogFullPathMDC(taskRequest.getLogPath());

File: dolphinscheduler-worker/src/main/java/org/apache/dolphinscheduler/server/worker/WorkerServer.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.dolphinscheduler.common.IStoppable;
 import org.apache.dolphinscheduler.common.constants.Constants;
 import org.apache.dolphinscheduler.common.lifecycle.ServerLifeCycleManager;
+import org.apache.dolphinscheduler.common.thread.DefaultUncaughtExceptionHandler;
 import org.apache.dolphinscheduler.common.thread.ThreadUtils;
 import org.apache.dolphinscheduler.meter.metrics.MetricsProvider;
 import org.apache.dolphinscheduler.meter.metrics.SystemMetrics;
@@ -75,6 +76,8 @@ public class WorkerServer implements IStoppable {
      * @param args arguments
      */
     public static void main(String[] args) {
+        WorkerServerMetrics.registerUncachedException(DefaultUncaughtExceptionHandler::getUncaughtExceptionCount);
+        Thread.setDefaultUncaughtExceptionHandler(DefaultUncaughtExceptionHandler.getInstance());
         Thread.currentThread().setName(Constants.THREAD_NAME_WORKER_SERVER);
         SpringApplication.run(WorkerServer.class);
     }

File: dolphinscheduler-worker/src/main/java/org/apache/dolphinscheduler/server/worker/runner/WorkerTaskExecutorThreadPool.java
Patch:
@@ -49,7 +49,7 @@ public boolean submitWorkerTaskExecutor(WorkerTaskExecutor workerTaskExecutor) {
         synchronized (WorkerTaskExecutorThreadPool.class) {
             if (TaskExecuteThreadsFullPolicy.CONTINUE.equals(workerConfig.getTaskExecuteThreadsFullPolicy())) {
                 WorkerTaskExecutorHolder.put(workerTaskExecutor);
-                threadPoolExecutor.submit(workerTaskExecutor);
+                threadPoolExecutor.execute(workerTaskExecutor);
                 return true;
             }
             if (isOverload()) {
@@ -58,7 +58,7 @@ public boolean submitWorkerTaskExecutor(WorkerTaskExecutor workerTaskExecutor) {
                 return false;
             }
             WorkerTaskExecutorHolder.put(workerTaskExecutor);
-            threadPoolExecutor.submit(workerTaskExecutor);
+            threadPoolExecutor.execute(workerTaskExecutor);
             return true;
         }
     }

File: dolphinscheduler-common/src/test/java/org/apache/dolphinscheduler/common/utils/FileUtilsTest.java
Patch:
@@ -50,7 +50,7 @@ public void testGetUploadFilename() {
 
     @Test
     public void testGetProcessExecDir() {
-        String dir = FileUtils.getProcessExecDir("test", 1L, 2L, 1, 3, 4);
+        String dir = FileUtils.getTaskInstanceWorkingDirectory("test", 1L, 2L, 1, 3, 4);
         Assertions.assertEquals("/tmp/dolphinscheduler/exec/process/test/1/2_1/3/4", dir);
     }
 

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/utils/ProcessUtils.java
Patch:
@@ -168,7 +168,7 @@ public static String getPidsStr(int processId) throws Exception {
                 taskExecutionContext.setAppIds(String.join(TaskConstants.COMMA, appIds));
                 if (StringUtils.isEmpty(taskExecutionContext.getExecutePath())) {
                     taskExecutionContext
-                            .setExecutePath(FileUtils.getProcessExecDir(
+                            .setExecutePath(FileUtils.getTaskInstanceWorkingDirectory(
                                     taskExecutionContext.getTenantCode(),
                                     taskExecutionContext.getProjectCode(),
                                     taskExecutionContext.getProcessDefineCode(),

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/DataSourceServiceImpl.java
Patch:
@@ -213,6 +213,7 @@ public BaseDataSourceParamDTO queryDataSource(int id, User loginUser) {
         baseDataSourceParamDTO.setId(dataSource.getId());
         baseDataSourceParamDTO.setName(dataSource.getName());
         baseDataSourceParamDTO.setNote(dataSource.getNote());
+        baseDataSourceParamDTO.setPassword(getHiddenPassword());
 
         return baseDataSourceParamDTO;
     }

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-api/src/main/java/org/apache/dolphinscheduler/plugin/datasource/api/datasource/AbstractDataSourceProcessor.java
Patch:
@@ -69,7 +69,8 @@ public void checkDatasourceParam(BaseDataSourceParamDTO baseDataSourceParamDTO)
      * @param host datasource host
      */
     protected void checkHost(String host) {
-        if (!IPV4_PATTERN.matcher(host).matches() || !IPV6_PATTERN.matcher(host).matches()) {
+        if (com.google.common.net.InetAddresses.isInetAddress(host)) {
+        } else if (!IPV4_PATTERN.matcher(host).matches() || !IPV6_PATTERN.matcher(host).matches()) {
             throw new IllegalArgumentException("datasource host illegal");
         }
     }

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/WorkflowExecuteRunnable.java
Patch:
@@ -1842,7 +1842,7 @@ private void updateWorkflowInstanceStatesToDB(WorkflowExecutionStatus newStates)
                 workflowInstance.setEndTime(new Date());
             }
             try {
-                processInstanceDao.updateById(workflowInstance);
+                processInstanceDao.performTransactionalUpsert(workflowInstance);
             } catch (Exception ex) {
                 // recover the status
                 workflowInstance.setStateWithDesc(originStates, "recover state by DB error");

File: dolphinscheduler-task-plugin/dolphinscheduler-task-java/src/main/java/org/apache/dolphinscheduler/plugin/task/java/JavaTask.java
Patch:
@@ -280,7 +280,7 @@ protected String buildResourcePath() {
         if (javaParameters.isModulePath()) {
             builder.append("--module-path");
         } else {
-            builder.append("--class-path");
+            builder.append("-classpath");
         }
         builder.append(" ")
                 .append(JavaConstants.CLASSPATH_CURRENT_DIR)

File: dolphinscheduler-task-plugin/dolphinscheduler-task-java/src/test/java/org/apache/dolphinscheduler/plugin/task/java/JavaTaskTest.java
Patch:
@@ -84,7 +84,7 @@ public void buildJarCommand() {
         String homeBinPath = JavaConstants.JAVA_HOME_VAR + File.separator + "bin" + File.separator;
         JavaTask javaTask = runJarType();
         Assertions.assertEquals(javaTask.buildJarCommand(), homeBinPath
-                + "java --class-path .:/tmp/dolphinscheduler/test/executepath:/tmp/dolphinscheduler/test/executepath/opt/share/jar/resource2.jar -jar /tmp/dolphinscheduler/test/executepath/opt/share/jar/main.jar -host 127.0.0.1 -port 8080 -xms:50m");
+                + "java -classpath .:/tmp/dolphinscheduler/test/executepath:/tmp/dolphinscheduler/test/executepath/opt/share/jar/resource2.jar -jar /tmp/dolphinscheduler/test/executepath/opt/share/jar/main.jar -host 127.0.0.1 -port 8080 -xms:50m");
     }
 
     /**
@@ -106,7 +106,7 @@ public void buildJavaCompileCommand() throws IOException {
                 Files.delete(path);
             }
             Assertions.assertEquals(homeBinPath
-                    + "javac --class-path .:/tmp/dolphinscheduler/test/executepath:/tmp/dolphinscheduler/test/executepath/opt/share/jar/resource2.jar /tmp/dolphinscheduler/test/executepath/JavaTaskTest.java",
+                    + "javac -classpath .:/tmp/dolphinscheduler/test/executepath:/tmp/dolphinscheduler/test/executepath/opt/share/jar/resource2.jar /tmp/dolphinscheduler/test/executepath/JavaTaskTest.java",
                     javaTask.buildJavaCompileCommand(sourceCode));
         } finally {
             Path path = Paths.get(fileName);
@@ -125,7 +125,7 @@ public void buildJavaCompileCommand() throws IOException {
     @Test
     public void buildJavaCommand() throws Exception {
         String wantJavaCommand =
-                "${JAVA_HOME}/bin/javac --class-path .:/tmp/dolphinscheduler/test/executepath:/tmp/dolphinscheduler/test/executepath/opt/share/jar/resource2.jar /tmp/dolphinscheduler/test/executepath/JavaTaskTest.java;${JAVA_HOME}/bin/java --class-path .:/tmp/dolphinscheduler/test/executepath:/tmp/dolphinscheduler/test/executepath/opt/share/jar/resource2.jar JavaTaskTest -host 127.0.0.1 -port 8080 -xms:50m";
+                "${JAVA_HOME}/bin/javac -classpath .:/tmp/dolphinscheduler/test/executepath:/tmp/dolphinscheduler/test/executepath/opt/share/jar/resource2.jar /tmp/dolphinscheduler/test/executepath/JavaTaskTest.java;${JAVA_HOME}/bin/java -classpath .:/tmp/dolphinscheduler/test/executepath:/tmp/dolphinscheduler/test/executepath/opt/share/jar/resource2.jar JavaTaskTest -host 127.0.0.1 -port 8080 -xms:50m";
         JavaTask javaTask = runJavaType();
         String sourceCode = javaTask.buildJavaSourceContent();
         String publicClassName = javaTask.getPublicClassName(sourceCode);

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/OSUtils.java
Patch:
@@ -18,7 +18,6 @@
 package org.apache.dolphinscheduler.common.utils;
 
 import org.apache.dolphinscheduler.common.constants.Constants;
-import org.apache.dolphinscheduler.common.constants.TenantConstants;
 import org.apache.dolphinscheduler.common.shell.ShellExecutor;
 
 import oshi.SystemInfo;
@@ -400,8 +399,6 @@ public static String getSudoCmd(String tenantCode, String command) {
         if (!isSudoEnable() || StringUtils.isEmpty(tenantCode)) {
             return command;
         }
-        tenantCode = TenantConstants.DEFAULT_TENANT_CODE.equals(tenantCode) ? TenantConstants.BOOTSTRAPT_SYSTEM_USER
-                : tenantCode;
         return String.format("sudo -u %s %s", tenantCode, command);
     }
 

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-ssh/src/main/java/org/apache/dolphinscheduler/plugin/datasource/ssh/SSHUtils.java
Patch:
@@ -23,9 +23,11 @@
 import org.apache.sshd.client.SshClient;
 import org.apache.sshd.client.session.ClientSession;
 import org.apache.sshd.common.config.keys.loader.KeyPairResourceLoader;
+import org.apache.sshd.common.session.SessionHeartbeatController;
 import org.apache.sshd.common.util.security.SecurityUtils;
 
 import java.security.KeyPair;
+import java.time.Duration;
 import java.util.Collection;
 
 public class SSHUtils {
@@ -57,6 +59,7 @@ public static ClientSession getSession(SshClient client, SSHConnectionParam conn
                 throw new Exception("Failed to add public key identity", e);
             }
         }
+        session.setSessionHeartbeat(SessionHeartbeatController.HeartbeatType.RESERVED, Duration.ofSeconds(3));
         return session;
     }
 }

File: dolphinscheduler-task-plugin/dolphinscheduler-task-remoteshell/src/main/java/org/apache/dolphinscheduler/plugin/task/remoteshell/RemoteShellTask.java
Patch:
@@ -97,7 +97,8 @@ public void init() {
 
     @Override
     public void handle(TaskCallBack taskCallBack) throws TaskException {
-        try {
+        // add task close method to release resource
+        try (RemoteExecutor executor = remoteExecutor) {
             // construct process
             String localFile = buildCommand();
             int exitCode = remoteExecutor.run(taskId, localFile);

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/ProjectControllerTest.java
Patch:
@@ -23,7 +23,6 @@
 import org.apache.dolphinscheduler.api.utils.Result;
 import org.apache.dolphinscheduler.common.enums.UserType;
 import org.apache.dolphinscheduler.dao.entity.Project;
-import org.apache.dolphinscheduler.dao.entity.Resource;
 import org.apache.dolphinscheduler.dao.entity.User;
 import org.apache.dolphinscheduler.dao.mapper.ProjectMapper;
 
@@ -97,7 +96,7 @@ public void testQueryProjectListPaging() {
         int pageSize = 10;
         String searchVal = "";
 
-        Result result = Result.success(new PageInfo<Resource>(1, 10));
+        Result result = Result.success(new PageInfo<Project>(1, 10));
 
         Mockito.when(projectService.queryProjectListPaging(user, pageSize, pageNo, searchVal)).thenReturn(result);
         Result response = projectController.queryProjectListPaging(user, searchVal, pageSize, pageNo);

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/SchedulerControllerTest.java
Patch:
@@ -34,7 +34,7 @@
 import org.apache.dolphinscheduler.common.enums.Priority;
 import org.apache.dolphinscheduler.common.enums.WarningType;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
-import org.apache.dolphinscheduler.dao.entity.Resource;
+import org.apache.dolphinscheduler.dao.entity.Schedule;
 import org.apache.dolphinscheduler.dao.entity.User;
 
 import org.junit.jupiter.api.Assertions;
@@ -163,7 +163,7 @@ public void testQueryScheduleListPaging() throws Exception {
         paramsMap.add("pageNo", "1");
         paramsMap.add("pageSize", "30");
 
-        PageInfo<Resource> pageInfo = new PageInfo<>(1, 10);
+        PageInfo<Schedule> pageInfo = new PageInfo<>(1, 10);
         Result mockResult = Result.success(pageInfo);
 
         Mockito.when(schedulerService.querySchedule(isA(User.class), isA(Long.class), isA(Long.class),

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/v2/ProjectV2ControllerTest.java
Patch:
@@ -27,7 +27,6 @@
 import org.apache.dolphinscheduler.api.utils.Result;
 import org.apache.dolphinscheduler.common.enums.UserType;
 import org.apache.dolphinscheduler.dao.entity.Project;
-import org.apache.dolphinscheduler.dao.entity.Resource;
 import org.apache.dolphinscheduler.dao.entity.User;
 import org.apache.dolphinscheduler.dao.mapper.ProjectMapper;
 
@@ -101,7 +100,7 @@ public void testQueryProjectListPaging() {
         projectQueryReq.setPageNo(1);
         projectQueryReq.setPageSize(10);
 
-        Result result = Result.success(new PageInfo<Resource>(1, 10));
+        Result result = Result.success(new PageInfo<Project>(1, 10));
         Mockito.when(projectService.queryProjectListPaging(user, projectQueryReq.getPageSize(),
                 projectQueryReq.getPageNo(), projectQueryReq.getSearchVal())).thenReturn(result);
         Result response = projectV2Controller.queryProjectListPaging(user, projectQueryReq);

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/AuthorizationType.java
Patch:
@@ -44,8 +44,11 @@ public enum AuthorizationType {
      * 16 USER;
      * 17 Data_Quality;
      */
+    @Deprecated
     RESOURCE_FILE_ID(0, "resource file id"),
+    @Deprecated
     RESOURCE_FILE_NAME(1, "resource file name"),
+    @Deprecated
     UDF_FILE(2, "udf file"),
     DATASOURCE(3, "data source"),
     UDF(4, "udf function"),

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/JSONUtils.java
Patch:
@@ -21,6 +21,7 @@
 import static com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;
 import static com.fasterxml.jackson.databind.DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL;
 import static com.fasterxml.jackson.databind.MapperFeature.REQUIRE_SETTERS_FOR_GETTERS;
+import static com.fasterxml.jackson.databind.SerializationFeature.FAIL_ON_EMPTY_BEANS;
 import static java.nio.charset.StandardCharsets.UTF_8;
 import static org.apache.dolphinscheduler.common.constants.DateConstants.YYYY_MM_DD_HH_MM_SS;
 
@@ -65,7 +66,7 @@
  * json utils
  */
 @Slf4j
-public class JSONUtils {
+public final class JSONUtils {
 
     static {
         log.info("init timezone: {}", TimeZone.getDefault());
@@ -76,6 +77,7 @@ public class JSONUtils {
             .configure(ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT, true)
             .configure(READ_UNKNOWN_ENUM_VALUES_AS_NULL, true)
             .configure(REQUIRE_SETTERS_FOR_GETTERS, true)
+            .configure(FAIL_ON_EMPTY_BEANS, false)
             .addModule(new SimpleModule()
                     .addSerializer(LocalDateTime.class, new LocalDateTimeSerializer())
                     .addDeserializer(LocalDateTime.class, new LocalDateTimeDeserializer()))

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinition.java
Patch:
@@ -179,8 +179,9 @@ public class TaskDefinition {
     private int delayTime;
 
     /**
-     * resource ids
+     * resource ids we do
      */
+    @Deprecated
     private String resourceIds;
 
     /**

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskInstance.java
Patch:
@@ -258,9 +258,6 @@ public class TaskInstance implements Serializable {
 
     private String executorName;
 
-    @TableField(exist = false)
-    private Map<String, String> resources;
-
     /**
      * delay execution time.
      */

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/utils/TaskCacheUtils.java
Patch:
@@ -183,7 +183,7 @@ public static String getValCheckSum(Property fileProperty, TaskExecutionContext
         log.info("{} --- Remote:{} to Local:{}", "CRC file", resourceCRCWholePath, targetPath);
         String crcString = "";
         try {
-            storageOperate.download(context.getTenantCode(), resourceCRCWholePath, targetPath, true);
+            storageOperate.download(resourceCRCWholePath, targetPath, true);
             crcString = FileUtils.readFile2Str(new FileInputStream(targetPath));
             fileProperty.setValue(crcString);
         } catch (IOException e) {

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/utils/TaskInstanceUtils.java
Patch:
@@ -71,7 +71,6 @@ public static void copyTaskInstance(TaskInstance source, TaskInstance target) {
         target.setExecutorId(source.getExecutorId());
         target.setVarPool(source.getVarPool());
         target.setExecutorName(source.getExecutorName());
-        target.setResources(source.getResources());
         target.setDelayTime(source.getDelayTime());
         target.setDryRun(source.getDryRun());
         target.setTaskGroupId(source.getTaskGroupId());

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/ResourceInfo.java
Patch:
@@ -25,12 +25,14 @@ public class ResourceInfo {
     /**
      * res the name of the resource that was uploaded
      */
+    @Deprecated
     private Integer id;
 
     /**
-     * full name of the resource that was uploaded
+     * ResourceAbsolutePathInStorage
      */
     private String resourceName;
 
+    @Deprecated
     private String res;
 }

File: dolphinscheduler-task-plugin/dolphinscheduler-task-datax/src/test/java/org/apache/dolphinscheduler/plugin/task/datax/DataxParametersTest.java
Patch:
@@ -58,7 +58,6 @@ public void testToString() {
         DataxParameters dataxParameters = new DataxParameters();
         List<ResourceInfo> resourceInfoList = new ArrayList<>();
         ResourceInfo resourceInfo = new ResourceInfo();
-        resourceInfo.setId(2);
         resourceInfo.setResourceName("/hdfs.keytab");
         resourceInfoList.add(resourceInfo);
 
@@ -90,7 +89,7 @@ public void testToString() {
                 + "jobSpeedRecord=1, "
                 + "xms=0, "
                 + "xmx=-100, "
-                + "resourceList=[{\"id\":2,\"resourceName\":\"/hdfs.keytab\",\"res\":null}]"
+                + "resourceList=[{\"id\":null,\"resourceName\":\"/hdfs.keytab\",\"res\":null}]"
                 + "}";
 
         Assertions.assertEquals(expected, dataxParameters.toString());

File: dolphinscheduler-task-plugin/dolphinscheduler-task-flink/src/main/java/org/apache/dolphinscheduler/plugin/task/flink/FlinkArgsUtils.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContext;
 import org.apache.dolphinscheduler.plugin.task.api.model.Property;
 import org.apache.dolphinscheduler.plugin.task.api.model.ResourceInfo;
+import org.apache.dolphinscheduler.plugin.task.api.resource.ResourceContext;
 import org.apache.dolphinscheduler.plugin.task.api.utils.ArgsUtils;
 import org.apache.dolphinscheduler.plugin.task.api.utils.ParameterUtils;
 
@@ -288,7 +289,8 @@ private static List<String> buildRunCommandLineForOthers(TaskExecutionContext ta
             if (ProgramType.PYTHON == programType) {
                 args.add(FlinkConstants.FLINK_PYTHON);
             }
-            args.add(taskExecutionContext.getResources().get(mainJar.getResourceName()));
+            ResourceContext resourceContext = taskExecutionContext.getResourceContext();
+            args.add(resourceContext.getResourceItem(mainJar.getResourceName()).getResourceAbsolutePathInLocal());
         }
 
         String mainArgs = flinkParameters.getMainArgs();

File: dolphinscheduler-task-plugin/dolphinscheduler-task-hivecli/src/main/java/org/apache/dolphinscheduler/plugin/task/hivecli/HiveCliTask.java
Patch:
@@ -31,6 +31,7 @@
 import org.apache.dolphinscheduler.plugin.task.api.model.ResourceInfo;
 import org.apache.dolphinscheduler.plugin.task.api.model.TaskResponse;
 import org.apache.dolphinscheduler.plugin.task.api.parameters.AbstractParameters;
+import org.apache.dolphinscheduler.plugin.task.api.resource.ResourceContext;
 import org.apache.dolphinscheduler.plugin.task.api.shell.IShellInterceptorBuilder;
 import org.apache.dolphinscheduler.plugin.task.api.shell.ShellInterceptorBuilderFactory;
 import org.apache.dolphinscheduler.plugin.task.api.utils.ParameterUtils;
@@ -137,8 +138,9 @@ protected String buildCommand() {
 
             try {
                 resourceFileName = resourceInfos.get(0).getResourceName();
+                ResourceContext resourceContext = taskExecutionContext.getResourceContext();
                 sqlContent = FileUtils.readFileToString(
-                        new File(String.format("%s/%s", taskExecutionContext.getExecutePath(), resourceFileName)),
+                        new File(resourceContext.getResourceItem(resourceFileName).getResourceAbsolutePathInLocal()),
                         StandardCharsets.UTF_8);
             } catch (IOException e) {
                 log.error("read hive sql content from file {} error ", resourceFileName, e);

File: dolphinscheduler-task-plugin/dolphinscheduler-task-mr/src/main/java/org/apache/dolphinscheduler/plugin/task/mr/MapReduceArgsUtils.java
Patch:
@@ -24,6 +24,7 @@
 
 import org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContext;
 import org.apache.dolphinscheduler.plugin.task.api.model.ResourceInfo;
+import org.apache.dolphinscheduler.plugin.task.api.resource.ResourceContext;
 import org.apache.dolphinscheduler.plugin.task.api.utils.ArgsUtils;
 
 import org.apache.commons.lang3.StringUtils;
@@ -52,7 +53,8 @@ public static List<String> buildArgs(MapReduceParameters param, TaskExecutionCon
         ResourceInfo mainJar = param.getMainJar();
         if (mainJar != null) {
             args.add(JAR);
-            args.add(taskExecutionContext.getResources().get(mainJar.getResourceName()));
+            ResourceContext resourceContext = taskExecutionContext.getResourceContext();
+            args.add(resourceContext.getResourceItem(mainJar.getResourceName()).getResourceAbsolutePathInLocal());
         }
 
         ProgramType programType = param.getProgramType();

File: dolphinscheduler-tools/src/main/java/org/apache/dolphinscheduler/tools/resource/MigrateResource.java
Patch:
@@ -17,6 +17,8 @@
 
 package org.apache.dolphinscheduler.tools.resource;
 
+import java.sql.SQLException;
+
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -45,7 +47,7 @@ static class MigrateResourceRunner implements CommandLineRunner {
         private MigrateResourceService migrateResourceService;
 
         @Override
-        public void run(String... args) {
+        public void run(String... args) throws SQLException {
             String targetTenantCode = args[0];
             logger.info("Moving all unmanaged resources to tenant: {}", targetTenantCode);
             migrateResourceService.migrateResourceOnce(targetTenantCode);

File: dolphinscheduler-worker/src/main/java/org/apache/dolphinscheduler/server/worker/utils/TaskFilesTransferUtils.java
Patch:
@@ -178,7 +178,7 @@ public static void downloadUpstreamFiles(TaskExecutionContext taskExecutionConte
                 String resourceWholePath =
                         storageOperate.getResourceFullName(taskExecutionContext.getTenantCode(), resourcePath);
                 log.info("{} --- Remote:{} to Local:{}", property, resourceWholePath, downloadPath);
-                storageOperate.download(taskExecutionContext.getTenantCode(), resourceWholePath, downloadPath, true);
+                storageOperate.download(resourceWholePath, downloadPath, true);
             } catch (IOException ex) {
                 throw new TaskException("Download file from storage error", ex);
             }

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/am/KubernetesApplicationManager.java
Patch:
@@ -22,7 +22,6 @@
 
 import org.apache.dolphinscheduler.common.enums.ResourceManagerType;
 import org.apache.dolphinscheduler.common.thread.ThreadUtils;
-import org.apache.dolphinscheduler.common.utils.JSONUtils;
 import org.apache.dolphinscheduler.plugin.task.api.K8sTaskExecutionContext;
 import org.apache.dolphinscheduler.plugin.task.api.TaskException;
 import org.apache.dolphinscheduler.plugin.task.api.enums.TaskExecutionStatus;
@@ -132,8 +131,6 @@ private FilterWatchListDeletable<Pod, PodList, PodResource> getListenPod(Kuberne
     private KubernetesClient getClient(KubernetesApplicationManagerContext kubernetesApplicationManagerContext) {
         K8sTaskExecutionContext k8sTaskExecutionContext =
                 kubernetesApplicationManagerContext.getK8sTaskExecutionContext();
-        k8sTaskExecutionContext
-                .setConfigYaml(JSONUtils.getNodeString(k8sTaskExecutionContext.getConnectionParams(), "kubeConfig"));
         return cacheClientMap.computeIfAbsent(kubernetesApplicationManagerContext.getLabelValue(),
                 key -> new KubernetesClientBuilder()
                         .withConfig(Config.fromKubeconfig(k8sTaskExecutionContext.getConfigYaml())).build());

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/k8s/impl/K8sTaskExecutor.java
Patch:
@@ -293,9 +293,7 @@ public TaskResponse run(String k8sParameterStr) throws Exception {
                 return result;
             }
             K8sTaskExecutionContext k8sTaskExecutionContext = taskRequest.getK8sTaskExecutionContext();
-            String connectionParams = k8sTaskExecutionContext.getConnectionParams();
-            String kubeConfig = JSONUtils.getNodeString(connectionParams, "kubeConfig");
-            String configYaml = kubeConfig;
+            String configYaml = k8sTaskExecutionContext.getConfigYaml();
             k8sUtils.buildClient(configYaml);
             submitJob2k8s(k8sParameterStr);
             parsePodLogOutput();

File: dolphinscheduler-task-plugin/dolphinscheduler-task-sqoop/src/main/java/org/apache/dolphinscheduler/plugin/task/sqoop/SqoopTaskChannel.java
Patch:
@@ -30,7 +30,6 @@ public class SqoopTaskChannel implements TaskChannel {
 
     @Override
     public void cancelApplication(boolean status) {
-
     }
 
     @Override

File: dolphinscheduler-task-plugin/dolphinscheduler-task-sqoop/src/main/java/org/apache/dolphinscheduler/plugin/task/sqoop/parameter/sources/SourceHdfsParameter.java
Patch:
@@ -17,10 +17,12 @@
 
 package org.apache.dolphinscheduler.plugin.task.sqoop.parameter.sources;
 
+import org.apache.dolphinscheduler.plugin.task.sqoop.parameter.SourceCommonParameter;
+
 /**
  * source hdfs parameter
  */
-public class SourceHdfsParameter {
+public class SourceHdfsParameter extends SourceCommonParameter {
 
     /**
      * export dir

File: dolphinscheduler-task-plugin/dolphinscheduler-task-sqoop/src/main/java/org/apache/dolphinscheduler/plugin/task/sqoop/parameter/sources/SourceHiveParameter.java
Patch:
@@ -17,10 +17,12 @@
 
 package org.apache.dolphinscheduler.plugin.task.sqoop.parameter.sources;
 
+import org.apache.dolphinscheduler.plugin.task.sqoop.parameter.SourceCommonParameter;
+
 /**
  * source hive parameter
  */
-public class SourceHiveParameter {
+public class SourceHiveParameter extends SourceCommonParameter {
 
     /**
      * hive database

File: dolphinscheduler-task-plugin/dolphinscheduler-task-sqoop/src/main/java/org/apache/dolphinscheduler/plugin/task/sqoop/parameter/targets/TargetHdfsParameter.java
Patch:
@@ -17,10 +17,12 @@
 
 package org.apache.dolphinscheduler.plugin.task.sqoop.parameter.targets;
 
+import org.apache.dolphinscheduler.plugin.task.sqoop.parameter.TargetCommonParameter;
+
 /**
  * target hdfs parameter
  */
-public class TargetHdfsParameter {
+public class TargetHdfsParameter extends TargetCommonParameter {
 
     /**
      * target dir

File: dolphinscheduler-task-plugin/dolphinscheduler-task-sqoop/src/main/java/org/apache/dolphinscheduler/plugin/task/sqoop/parameter/targets/TargetHiveParameter.java
Patch:
@@ -17,10 +17,12 @@
 
 package org.apache.dolphinscheduler.plugin.task.sqoop.parameter.targets;
 
+import org.apache.dolphinscheduler.plugin.task.sqoop.parameter.TargetCommonParameter;
+
 /**
  * target hive parameter
  */
-public class TargetHiveParameter {
+public class TargetHiveParameter extends TargetCommonParameter {
 
     /**
      * hive database

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/constants/DataSourceConstants.java
Patch:
@@ -65,7 +65,7 @@ public class DataSourceConstants {
     public static final String KYUUBI_VALIDATION_QUERY = "select 1";
     public static final String VERTICA_VALIDATION_QUERY = "select 1";
 
-    public static final String HANA_VALIDATION_QUERY = "select 1";
+    public static final String HANA_VALIDATION_QUERY = "select 1 from DUMMY";
 
     /**
      * jdbc url

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-hana/src/test/java/org/apache/dolphinscheduler/plugin/datasource/hana/HanaDataSourceChannelFactoryTest.java
Patch:
@@ -18,13 +18,14 @@
 package org.apache.dolphinscheduler.plugin.datasource.hana;
 
 import org.apache.dolphinscheduler.spi.datasource.DataSourceChannel;
+
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
-public class HanaDataSourceChannelFactoryTest {
+class HanaDataSourceChannelFactoryTest {
 
     @Test
-    public void testCreate() {
+    void testCreate() {
         HanaDataSourceChannelFactory sourceChannelFactory = new HanaDataSourceChannelFactory();
         DataSourceChannel dataSourceChannel = sourceChannelFactory.create();
         Assertions.assertNotNull(dataSourceChannel);

File: dolphinscheduler-alert/dolphinscheduler-alert-plugins/dolphinscheduler-alert-http/src/main/java/org/apache/dolphinscheduler/plugin/alert/http/HttpAlertChannelFactory.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.dolphinscheduler.alert.api.AlertChannel;
 import org.apache.dolphinscheduler.alert.api.AlertChannelFactory;
 import org.apache.dolphinscheduler.alert.api.AlertInputTips;
+import org.apache.dolphinscheduler.spi.params.base.DataType;
 import org.apache.dolphinscheduler.spi.params.base.PluginParams;
 import org.apache.dolphinscheduler.spi.params.base.Validate;
 import org.apache.dolphinscheduler.spi.params.input.InputParam;
@@ -84,6 +85,7 @@ public List<PluginParams> params() {
                 InputNumberParam.newBuilder(HttpAlertConstants.NAME_TIMEOUT, HttpAlertConstants.TIMEOUT)
                         .setValue(HttpAlertConstants.DEFAULT_TIMEOUT)
                         .addValidate(Validate.newBuilder()
+                                .setType(DataType.NUMBER.getDataType())
                                 .setRequired(false)
                                 .build())
                         .build();

File: dolphinscheduler-alert/dolphinscheduler-alert-server/src/main/java/org/apache/dolphinscheduler/alert/plugin/AlertPluginManager.java
Patch:
@@ -77,11 +77,11 @@ private void installAlertPlugin() {
             String name = entry.getKey();
             AlertChannelFactory factory = entry.getValue();
 
-            log.info("Registering alert plugin: {} - {}", name, factory.getClass());
+            log.info("Registering alert plugin: {} - {}", name, factory.getClass().getSimpleName());
 
             final AlertChannel alertChannel = factory.create();
 
-            log.info("Registered alert plugin: {} - {}", name, factory.getClass());
+            log.info("Registered alert plugin: {} - {}", name, factory.getClass().getSimpleName());
 
             final List<PluginParams> params = new ArrayList<>(factory.params());
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProcessDefinitionServiceImpl.java
Patch:
@@ -573,10 +573,9 @@ public PageInfo<ProcessDefinition> queryProcessDefinitionListPaging(@NonNull Use
                                                                         Integer userId,
                                                                         Integer pageNo,
                                                                         Integer pageSize) {
-        Project project = projectMapper.queryByCode(projectCode);
 
         // check user access for project
-        projectService.checkProjectAndAuthThrowException(loginUser, project, WORKFLOW_DEFINITION);
+        projectService.checkProjectAndAuthThrowException(loginUser, projectCode, WORKFLOW_DEFINITION);
 
         PageListingResult<ProcessDefinition> processDefinitionsPageListingResult =
                 processDefinitionDao.listingProcessDefinition(

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/CommandMapper.java
Patch:
@@ -36,13 +36,13 @@ public interface CommandMapper extends BaseMapper<Command> {
      * count command state
      * @param startTime startTime
      * @param endTime endTime
-     * @param projectCodeArray projectCodeArray
+     * @param projectCodes projectCodes
      * @return CommandCount list
      */
     List<CommandCount> countCommandState(
                                          @Param("startTime") Date startTime,
                                          @Param("endTime") Date endTime,
-                                         @Param("projectCodeArray") Long[] projectCodeArray);
+                                         @Param("projectCodes") List<Long> projectCodes);
 
     /**
      * query command page

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/ErrorCommandMapper.java
Patch:
@@ -36,11 +36,11 @@ public interface ErrorCommandMapper extends BaseMapper<ErrorCommand> {
      * count command state
      * @param startTime startTime
      * @param endTime endTime
-     * @param projectCodeArray projectCodeArray
+     * @param projectCodes projectCodes
      * @return CommandCount list
      */
     List<CommandCount> countCommandState(
                                          @Param("startTime") Date startTime,
                                          @Param("endTime") Date endTime,
-                                         @Param("projectCodeArray") Long[] projectCodeArray);
+                                         @Param("projectCodes") List<Long> projectCodes);
 }

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/TaskDefinitionMapper.java
Patch:
@@ -18,10 +18,10 @@
 package org.apache.dolphinscheduler.dao.mapper;
 
 import org.apache.dolphinscheduler.common.enums.TaskExecuteType;
-import org.apache.dolphinscheduler.dao.entity.DefinitionGroupByUser;
 import org.apache.dolphinscheduler.dao.entity.TaskDefinition;
 import org.apache.dolphinscheduler.dao.entity.TaskDefinitionLog;
 import org.apache.dolphinscheduler.dao.entity.TaskMainInfo;
+import org.apache.dolphinscheduler.dao.model.WorkflowDefinitionCountDto;
 
 import org.apache.ibatis.annotations.MapKey;
 import org.apache.ibatis.annotations.Param;
@@ -72,7 +72,7 @@ TaskDefinition queryByName(@Param("projectCode") long projectCode,
      * @param projectCodes projectCodes
      * @return task definition list
      */
-    List<DefinitionGroupByUser> countDefinitionGroupByUser(@Param("projectCodes") Long[] projectCodes);
+    List<WorkflowDefinitionCountDto> countDefinitionGroupByUser(@Param("projectCodes") Long[] projectCodes);
 
     /**
      * list all resource ids and task_params containing resourceList

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/TaskDefinitionMapperTest.java
Patch:
@@ -19,10 +19,10 @@
 
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
 import org.apache.dolphinscheduler.dao.BaseDaoTest;
-import org.apache.dolphinscheduler.dao.entity.DefinitionGroupByUser;
 import org.apache.dolphinscheduler.dao.entity.ProcessTaskRelation;
 import org.apache.dolphinscheduler.dao.entity.TaskDefinition;
 import org.apache.dolphinscheduler.dao.entity.User;
+import org.apache.dolphinscheduler.dao.model.WorkflowDefinitionCountDto;
 
 import java.util.Date;
 import java.util.List;
@@ -123,7 +123,7 @@ public void testCountDefinitionGroupByUser() {
         User un = userMapper.queryByUserNameAccurately("un");
         TaskDefinition taskDefinition = insertOne(un.getId());
 
-        List<DefinitionGroupByUser> users =
+        List<WorkflowDefinitionCountDto> users =
                 taskDefinitionMapper.countDefinitionGroupByUser(new Long[]{taskDefinition.getProjectCode()});
         Assertions.assertNotEquals(0, users.size());
 

File: dolphinscheduler-extract/dolphinscheduler-extract-base/src/main/java/org/apache/dolphinscheduler/extract/base/server/SpringServerMethodInvokerDiscovery.java
Patch:
@@ -60,7 +60,7 @@ private void registerRpcMethodInvoker(Class<?> anInterface, Object bean, String
             }
             ServerMethodInvoker methodInvoker = new ServerMethodInvokerImpl(bean, method);
             nettyRemotingServer.registerMethodInvoker(methodInvoker);
-            log.info("Register ServerMethodInvoker: {} to bean: {}", methodInvoker.getMethodIdentify(), beanName);
+            log.debug("Register ServerMethodInvoker: {} to bean: {}", methodInvoker.getMethodIdentify(), beanName);
         }
     }
 }

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/TaskPluginManager.java
Patch:
@@ -60,12 +60,12 @@ public void loadPlugin() {
             String factoryName = entry.getKey();
             TaskChannelFactory factory = entry.getValue();
 
-            log.info("Registering task plugin: {} - {}", factoryName, factory.getClass());
+            log.info("Registering task plugin: {} - {}", factoryName, factory.getClass().getSimpleName());
 
             taskChannelFactoryMap.put(factoryName, factory);
             taskChannelMap.put(factoryName, factory.create());
 
-            log.info("Registered task plugin: {} - {}", factoryName, factory.getClass());
+            log.info("Registered task plugin: {} - {}", factoryName, factory.getClass().getSimpleName());
         }
 
     }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/security/impl/AbstractAuthenticator.java
Patch:
@@ -95,7 +95,7 @@ public Result<Map<String, String>> authenticate(String userId, String password,
             return result;
         }
 
-        log.info("Session is created and sessionId is :{}.", sessionId);
+        log.info("Session is created, userName:{}.", user.getUserName());
 
         Map<String, String> data = new HashMap<>();
         data.put(Constants.SESSION_ID, sessionId);

File: dolphinscheduler-alert/dolphinscheduler-alert-plugins/dolphinscheduler-alert-api/src/main/java/org/apache/dolphinscheduler/alert/api/AlertConstants.java
Patch:
@@ -31,6 +31,8 @@ public final class AlertConstants {
     public static final String WARNING_TYPE = "warningType";
 
     public static final String NAME_WARNING_TYPE = "WarningType";
+    public static final String TEST_TITLE = "DolphinScheduler test alert";
+    public static final String TEST_CONTENT = "[{\"message\":\" This is a test alert message form DolphinScheduler\"}]";
 
     private AlertConstants() {
         throw new UnsupportedOperationException("This is a utility class and cannot be instantiated");

File: dolphinscheduler-alert/dolphinscheduler-alert-server/src/main/java/org/apache/dolphinscheduler/alert/service/ListenerEventPostService.java
Patch:
@@ -259,5 +259,4 @@ private AbstractListenerEvent generateEventFromContent(ListenerEvent listenerEve
     public void close() {
         log.info("Closed ListenerEventPostService...");
     }
-
 }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/AlertPluginInstanceService.java
Patch:
@@ -94,4 +94,6 @@ Map<String, Object> update(User loginUser, int alertPluginInstanceId, String ins
      * @return plugins
      */
     Result listPaging(User loginUser, String searchVal, int pageNo, int pageSize);
+
+    Result<Void> testSend(int pluginDefineId, String pluginInstanceParams);
 }

File: dolphinscheduler-registry/dolphinscheduler-registry-api/src/main/java/org/apache/dolphinscheduler/registry/api/RegistryClient.java
Patch:
@@ -238,5 +238,4 @@ private void initNodes() {
     private Collection<String> getServerNodes(RegistryNodeType nodeType) {
         return getChildrenKeys(nodeType.getRegistryPath());
     }
-
 }

File: dolphinscheduler-alert/dolphinscheduler-alert-plugins/dolphinscheduler-alert-api/src/main/java/org/apache/dolphinscheduler/alert/api/AlertInputTips.java
Patch:
@@ -50,7 +50,8 @@ public enum AlertInputTips {
     SECRET("please input secret", "请输入secret"),
     WECHAT_MENTION_USERS("use `|` to separate userIds and `@all` to everyone", "使用`|`来分割userId或使用`@all`来提到所有人"),
     WECHAT_AGENT_ID("please input agent id or chat id", "请输入agent id或chat id"),
-    ;
+    ANNOTATION("please input annotation in json form", "请输入json格式的annotation"),
+    GENERATOR_URL("please input Generator URL", "请输入生成地址");
 
     private final String enMsg;
     private final String zhMsg;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/DqRuleServiceImpl.java
Patch:
@@ -260,7 +260,7 @@ private InputParam getTextareaParam(DqRuleInputEntry inputEntry) {
                         .setRequired(inputEntry.getIsValidate())
                         .build())
                 .setProps(paramProps)
-                .setValue(inputEntry.getValue())
+                .setValue(inputEntry.getData())
                 .setPlaceholder(inputEntry.getPlaceholder())
                 .setEmit(Boolean.TRUE.equals(inputEntry.getIsEmit()) ? Collections.singletonList(CHANGE) : null)
                 .build();
@@ -302,7 +302,7 @@ private SelectParam getSelectParam(DqRuleInputEntry inputEntry) {
         return SelectParam
                 .newBuilder(inputEntry.getField(), inputEntry.getTitle())
                 .setOptions(options)
-                .setValue(inputEntry.getValue())
+                .setValue(inputEntry.getData())
                 .setSize(SMALL)
                 .setPlaceHolder(inputEntry.getPlaceholder())
                 .setEmit(Boolean.TRUE.equals(inputEntry.getIsEmit()) ? Collections.singletonList(CHANGE) : null)
@@ -322,7 +322,7 @@ private InputParam getInputParam(DqRuleInputEntry inputEntry) {
                         .setRequired(inputEntry.getIsValidate())
                         .build())
                 .setProps(paramProps)
-                .setValue(inputEntry.getValue())
+                .setValue(inputEntry.getData())
                 .setPlaceholder(inputEntry.getPlaceholder())
                 .setEmit(Boolean.TRUE.equals(inputEntry.getIsEmit()) ? Collections.singletonList(CHANGE) : null)
                 .build();

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/utils/DqRuleUtils.java
Patch:
@@ -40,7 +40,7 @@ public static List<DqRuleInputEntry> transformInputEntry(List<DqRuleInputEntry>
 
                 if (valuesMap.get(dqRuleInputEntry.getField()) != null) {
                     String value = String.valueOf(valuesMap.get(dqRuleInputEntry.getField()));
-                    dqRuleInputEntry.setValue(value);
+                    dqRuleInputEntry.setData(value);
                 }
 
                 if (valuesMap.get("is_show") != null) {

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/execute/TaskExecutionContextFactory.java
Patch:
@@ -345,12 +345,12 @@ private void setComparisonParams(DataQualityTaskExecutionContext dataQualityTask
                 if (type != null) {
                     DqRuleInputEntry comparisonName = new DqRuleInputEntry();
                     comparisonName.setField(COMPARISON_NAME);
-                    comparisonName.setValue(type.getName());
+                    comparisonName.setData(type.getName());
                     ruleInputEntryList.add(comparisonName);
 
                     DqRuleInputEntry comparisonTable = new DqRuleInputEntry();
                     comparisonTable.setField(COMPARISON_TABLE);
-                    comparisonTable.setValue(type.getOutputTable());
+                    comparisonTable.setData(type.getOutputTable());
                     ruleInputEntryList.add(comparisonTable);
 
                     if (executeSqlList == null) {

File: dolphinscheduler-task-plugin/dolphinscheduler-task-dataquality/src/main/java/org/apache/dolphinscheduler/plugin/task/dq/utils/RuleParserUtils.java
Patch:
@@ -258,7 +258,7 @@ public static Map<String, String> getInputParameterMapFromEntryList(List<DqRuleI
 
         Map<String, String> defaultInputParameterValue = new HashMap<>();
         for (DqRuleInputEntry inputEntry : defaultInputEntryList) {
-            defaultInputParameterValue.put(inputEntry.getField(), inputEntry.getValue());
+            defaultInputParameterValue.put(inputEntry.getField(), inputEntry.getData());
         }
 
         return defaultInputParameterValue;

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/event/WorkflowStartEventHandler.java
Patch:
@@ -69,7 +69,7 @@ public void handleWorkflowEvent(final WorkflowEvent workflowEvent) throws Workfl
                         }
                     } else if (WorkflowStartStatus.FAILED == workflowStartStatus) {
                         log.error(
-                                "Failed to submit the workflow instance, will resend the workflow start event: {}",
+                                "Failed to submit the workflow instance, will send fail state event: {}",
                                 workflowEvent);
                         WorkflowStateEvent stateEvent = WorkflowStateEvent.builder()
                                 .processInstanceId(processInstance.getId())

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/constants/Constants.java
Patch:
@@ -306,9 +306,9 @@ private Constants() {
     public static final int DEFAULT_WORKER_HOST_WEIGHT = 100;
 
     /**
-     * time unit second to minutes
+     * unit convertor for minute to second
      */
-    public static final int SEC_2_MINUTES_TIME_UNIT = 60;
+    public static final int MINUTE_2_SECOND_TIME_UNIT = 60;
 
     /***
      *

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskInstance.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.dolphinscheduler.dao.entity;
 
-import static org.apache.dolphinscheduler.common.constants.Constants.SEC_2_MINUTES_TIME_UNIT;
+import static org.apache.dolphinscheduler.common.constants.Constants.MINUTE_2_SECOND_TIME_UNIT;
 import static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.TASK_TYPE_BLOCKING;
 import static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.TASK_TYPE_CONDITIONS;
 import static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.TASK_TYPE_DEPENDENT;
@@ -410,7 +410,7 @@ public boolean retryTaskIntervalOverTime() {
         Date now = new Date();
         long failedTimeInterval = DateUtils.differSec(now, getEndTime());
         // task retry does not over time, return false
-        return getRetryInterval() * SEC_2_MINUTES_TIME_UNIT < failedTimeInterval;
+        return getRetryInterval() * MINUTE_2_SECOND_TIME_UNIT < failedTimeInterval;
     }
 
 }

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/builder/TaskExecutionContextBuilder.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.dolphinscheduler.server.master.builder;
 
 import static com.google.common.base.Preconditions.checkNotNull;
-import static org.apache.dolphinscheduler.common.constants.Constants.SEC_2_MINUTES_TIME_UNIT;
+import static org.apache.dolphinscheduler.common.constants.Constants.MINUTE_2_SECOND_TIME_UNIT;
 
 import org.apache.dolphinscheduler.common.enums.TimeoutFlag;
 import org.apache.dolphinscheduler.common.utils.DateUtils;
@@ -86,7 +86,7 @@ public TaskExecutionContextBuilder buildTaskDefinitionRelatedInfo(TaskDefinition
             if (taskDefinition.getTimeoutNotifyStrategy() == TaskTimeoutStrategy.FAILED
                     || taskDefinition.getTimeoutNotifyStrategy() == TaskTimeoutStrategy.WARNFAILED) {
                 taskExecutionContext.setTaskTimeout(
-                        Math.min(taskDefinition.getTimeout() * SEC_2_MINUTES_TIME_UNIT, Integer.MAX_VALUE));
+                        Math.min(taskDefinition.getTimeout() * MINUTE_2_SECOND_TIME_UNIT, Integer.MAX_VALUE));
             }
         }
         taskExecutionContext.setTaskParams(taskDefinition.getTaskParams());

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/StateWheelExecuteThread.java
Patch:
@@ -148,7 +148,7 @@ private void checkProcess4Timeout() {
                 }
                 long timeRemain = DateUtils.getRemainTime(processInstance.getStartTime(),
                         (long) processInstance.getTimeout()
-                                * Constants.SEC_2_MINUTES_TIME_UNIT);
+                                * Constants.MINUTE_2_SECOND_TIME_UNIT);
                 if (timeRemain < 0) {
                     log.info("Workflow instance {} timeout, adding timeout event", processInstance.getId());
                     addProcessTimeoutEvent(processInstance);
@@ -248,7 +248,7 @@ private void checkTask4Timeout() {
                 if (TimeoutFlag.OPEN == taskInstance.getTaskDefine().getTimeoutFlag()) {
                     long timeRemain = DateUtils.getRemainTime(taskInstance.getStartTime(),
                             (long) taskInstance.getTaskDefine().getTimeout()
-                                    * Constants.SEC_2_MINUTES_TIME_UNIT);
+                                    * Constants.MINUTE_2_SECOND_TIME_UNIT);
                     if (timeRemain < 0) {
                         log.info("Task instance is timeout, adding task timeout event and remove the check");
                         addTaskTimeoutEvent(taskInstance);

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/constants/Constants.java
Patch:
@@ -689,8 +689,6 @@ private Constants() {
      */
     public static final String NAMESPACE = "namespace";
     public static final String CLUSTER = "cluster";
-    public static final String LIMITS_CPU = "limitsCpu";
-    public static final String LIMITS_MEMORY = "limitsMemory";
     public static final Long K8S_LOCAL_TEST_CLUSTER_CODE = 0L;
 
     /**

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/K8sNamespaceMapperTest.java
Patch:
@@ -49,8 +49,6 @@ private K8sNamespace insertOne() {
         k8sNamespace.setNamespace("testNamespace");
         k8sNamespace.setClusterCode(100L);
         k8sNamespace.setClusterName("ds_null_k8s");
-        k8sNamespace.setLimitsCpu(100.0);
-        k8sNamespace.setLimitsMemory(100);
         k8sNamespace.setCreateTime(new Date());
         k8sNamespace.setUpdateTime(new Date());
         k8sNamespaceMapper.insert(k8sNamespace);
@@ -80,7 +78,6 @@ public void clearTestData() {
     public void testUpdate() {
         // insertOne
         K8sNamespace k8sNamespace = insertOne();
-        k8sNamespace.setLimitsMemory(200);
         // update
         int update = k8sNamespaceMapper.updateById(k8sNamespace);
         Assertions.assertEquals(update, 1);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java
Patch:
@@ -539,6 +539,7 @@ public enum Status {
     NOT_ALLOW_TO_DISABLE_OWN_ACCOUNT(130020, "Not allow to disable your own account", "不能停用自己的账号"),
     NOT_ALLOW_TO_DELETE_DEFAULT_ALARM_GROUP(130030, "Not allow to delete the default alarm group ", "不能删除默认告警组"),
     TIME_ZONE_ILLEGAL(130031, "time zone [{0}] is illegal", "时区参数 [{0}] 不合法"),
+    NOT_ALLOW_TO_UPDATE_GLOBAL_ALARM_GROUP(130032, "Not allow to update the global alert group ", "不能更新全局告警组"),
 
     QUERY_K8S_NAMESPACE_LIST_PAGING_ERROR(1300001, "login user query k8s namespace list paging error",
             "分页查询k8s名称空间列表错误"),

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/WarningType.java
Patch:
@@ -35,11 +35,13 @@ public enum WarningType {
      * 1 send if process success;
      * 2 send if process failed;
      * 3 send if process ends, whatever the result;
+     * 4 send global events;
      */
     NONE(0, "none"),
     SUCCESS(1, "success"),
     FAILURE(2, "failure"),
-    ALL(3, "all");
+    ALL(3, "all"),
+    GLOBAL(4, "global");
 
     WarningType(int code, String descp) {
         this.code = code;

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/AlertDao.java
Patch:
@@ -63,7 +63,8 @@
 @Slf4j
 public class AlertDao {
 
-    private static final int QUERY_ALERT_THRESHOLD = 100;
+    @Value("${alert.query_alert_threshold:100}")
+    private Integer QUERY_ALERT_THRESHOLD;
 
     @Value("${alert.alarm-suppression.crash:60}")
     private Integer crashAlarmSuppression;

File: dolphinscheduler-alert/dolphinscheduler-alert-plugins/dolphinscheduler-alert-email/src/main/java/org/apache/dolphinscheduler/plugin/alert/email/MailSender.java
Patch:
@@ -405,7 +405,9 @@ public void deleteFile(File file) {
      */
     private void handleException(AlertResult alertResult, Exception e) {
         log.error("Send email to {} failed", receivers, e);
-        alertResult.setMessage("Send email to {" + String.join(",", receivers) + "} failed，" + e.toString());
+        alertResult.setMessage(
+                String.format("Send email to: %s, failed: %s",
+                        String.join(",", receivers), e.getMessage()));
     }
 
 }

File: dolphinscheduler-alert/dolphinscheduler-alert-plugins/dolphinscheduler-alert-http/src/main/java/org/apache/dolphinscheduler/plugin/alert/http/HttpSender.java
Patch:
@@ -100,7 +100,8 @@ public AlertResult send(String msg) {
         } catch (Exception e) {
             log.error("send http alert msg  exception : {}", e.getMessage());
             alertResult.setStatus("false");
-            alertResult.setMessage("send http request  alert fail.");
+            alertResult.setMessage(
+                    String.format("Send http request alert failed: %s", e.getMessage()));
         }
 
         return alertResult;

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/constants/Constants.java
Patch:
@@ -697,7 +697,7 @@ private Constants() {
      * schedule timezone
      */
     public static final String SCHEDULE_TIMEZONE = "schedule_timezone";
-    public static final int RESOURCE_FULL_NAME_MAX_LENGTH = 255;
+    public static final int RESOURCE_FULL_NAME_MAX_LENGTH = 128;
 
     /**
      * tenant

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/constants/Constants.java
Patch:
@@ -697,7 +697,7 @@ private Constants() {
      * schedule timezone
      */
     public static final String SCHEDULE_TIMEZONE = "schedule_timezone";
-    public static final int RESOURCE_FULL_NAME_MAX_LENGTH = 128;
+    public static final int RESOURCE_FULL_NAME_MAX_LENGTH = 255;
 
     /**
      * tenant

File: dolphinscheduler-alert/dolphinscheduler-alert-plugins/dolphinscheduler-alert-pagerduty/src/main/java/org/apache/dolphinscheduler/plugin/alert/pagerduty/PagerDutySender.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.dolphinscheduler.plugin.alert.pagerduty;
 
 import org.apache.dolphinscheduler.alert.api.AlertResult;
+import org.apache.dolphinscheduler.alert.api.HttpServiceRetryStrategy;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
 
 import org.apache.http.HttpStatus;
@@ -69,7 +70,8 @@ private AlertResult sendPagerDutyAlterV2(AlertResult alertResult, String title,
 
     private AlertResult send(AlertResult alertResult, String url, String requestBody) throws IOException {
         HttpPost httpPost = constructHttpPost(url, requestBody);
-        CloseableHttpClient httpClient = HttpClients.createDefault();
+        CloseableHttpClient httpClient =
+                HttpClients.custom().setRetryHandler(HttpServiceRetryStrategy.retryStrategy).build();
 
         try {
             CloseableHttpResponse response = httpClient.execute(httpPost);

File: dolphinscheduler-alert/dolphinscheduler-alert-plugins/dolphinscheduler-alert-webexteams/src/main/java/org/apache/dolphinscheduler/plugin/alert/webexteams/WebexTeamsSender.java
Patch:
@@ -19,6 +19,7 @@
 
 import org.apache.dolphinscheduler.alert.api.AlertData;
 import org.apache.dolphinscheduler.alert.api.AlertResult;
+import org.apache.dolphinscheduler.alert.api.HttpServiceRetryStrategy;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
 
 import org.apache.http.HttpStatus;
@@ -77,7 +78,8 @@ public AlertResult sendWebexTeamsAlter(AlertData alertData) {
     }
 
     private void send(AlertResult alertResult, AlertData alertData) throws IOException {
-        CloseableHttpClient httpClient = HttpClients.createDefault();
+        CloseableHttpClient httpClient =
+                HttpClients.custom().setRetryHandler(HttpServiceRetryStrategy.retryStrategy).build();
 
         try {
             HttpPost httpPost = constructHttpPost(getMessage(alertData), botAccessToken);

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/execute/MasterTaskExecuteRunnable.java
Patch:
@@ -55,9 +55,10 @@ public MasterTaskExecuteRunnable(TaskExecutionContext taskExecutionContext,
     protected abstract void afterExecute() throws MasterTaskExecuteException;
 
     protected void afterThrowing(Throwable throwable) {
+        TaskInstanceLogHeader.printFinalizeTaskHeader();
         try {
+            log.error("Get a exception when execute the task, will try to cancel the task", throwable);
             cancelTask();
-            log.error("Get a exception when execute the task, canceled the task", throwable);
         } catch (Exception e) {
             log.error("Cancel task failed,", e);
         }
@@ -69,6 +70,7 @@ protected void afterThrowing(Throwable throwable) {
         MasterTaskExecutionContextHolder.removeTaskExecutionContext(taskExecutionContext.getTaskInstanceId());
         MasterTaskExecuteRunnableHolder.removeMasterTaskExecuteRunnable(taskExecutionContext.getTaskInstanceId());
         log.info("Get a exception when execute the task, removed the TaskExecutionContext");
+        closeLogAppender();
     }
 
     public void cancelTask() throws MasterTaskExecuteException {
@@ -111,7 +113,6 @@ public void run() {
         } catch (Throwable ex) {
             log.error("Task execute failed, due to meet an exception", ex);
             afterThrowing(ex);
-            closeLogAppender();
         } finally {
             LogUtils.removeWorkflowAndTaskInstanceIdMDC();
             LogUtils.removeTaskInstanceLogFullPathMDC();

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/k8s/K8sTaskMainParameters.java
Patch:
@@ -32,6 +32,7 @@ public class K8sTaskMainParameters {
     private String image;
     private String command;
     private String args;
+    private String pullSecret;
     private String namespaceName;
     private String clusterName;
     private String imagePullPolicy;

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/parameters/K8sTaskParameters.java
Patch:
@@ -38,6 +38,7 @@ public class K8sTaskParameters extends AbstractParameters {
     private String namespace;
     private String command;
     private String args;
+    private String pullSecret;
     private String imagePullPolicy;
     private double minCpuCores;
     private double minMemorySpace;

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/test/java/org/apache/dolphinscheduler/plugin/task/api/k8s/K8sTaskExecutorTest.java
Patch:
@@ -81,7 +81,8 @@ public void before() {
         k8sTaskMainParameters.setCommand("[\"perl\" ,\"-Mbignum=bpi\", \"-wle\", \"print bpi(2000)\"]");
         k8sTaskMainParameters.setLabelMap(labelMap);
         k8sTaskMainParameters.setNodeSelectorRequirements(Arrays.asList(requirement));
-        job = k8sTaskExecutor.buildK8sJob(k8sTaskMainParameters);
+        k8sTaskExecutor.buildK8sJob(k8sTaskMainParameters);
+        job = k8sTaskExecutor.getJob();
     }
     @Test
     public void testGetK8sJobStatusNormal() {

File: dolphinscheduler-task-plugin/dolphinscheduler-task-k8s/src/main/java/org/apache/dolphinscheduler/plugin/task/k8s/K8sTask.java
Patch:
@@ -87,6 +87,7 @@ protected String buildCommand() {
         String namespaceName = namespace.get(NAMESPACE_NAME);
         String clusterName = namespace.get(CLUSTER);
         k8sTaskMainParameters.setImage(k8sTaskParameters.getImage());
+        k8sTaskMainParameters.setPullSecret(k8sTaskParameters.getPullSecret());
         k8sTaskMainParameters.setNamespaceName(namespaceName);
         k8sTaskMainParameters.setClusterName(clusterName);
         k8sTaskMainParameters.setMinCpuCores(k8sTaskParameters.getMinCpuCores());

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/shell/BaseLinuxShellInterceptorBuilder.java
Patch:
@@ -129,7 +129,7 @@ private List<String> bootstrapCommandInSudoMode() {
             bootstrapCommand.add("-u");
             bootstrapCommand.add(runUser);
         }
-        bootstrapCommand.add("-E");
+        bootstrapCommand.add("-i");
         bootstrapCommand.add(shellAbsolutePath().toString());
         return bootstrapCommand;
     }

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/ProcessAlertContent.java
Patch:
@@ -61,6 +61,8 @@ public class ProcessAlertContent implements Serializable {
     private CommandType processType;
     @JsonProperty("processState")
     private WorkflowExecutionStatus processState;
+    @JsonProperty("modifyBy")
+    private String modifyBy;
     @JsonProperty("recovery")
     private Flag recovery;
     @JsonProperty("runTimes")

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/LoggerServiceImpl.java
Patch:
@@ -261,7 +261,9 @@ private String queryLog(TaskInstance taskInstance, int skipLineNum, int limit) {
                 log.error("Error while getting log from remote target", e);
             }
         }
-        sb.append(logContent);
+        if (logContent != null) {
+            sb.append(logContent);
+        }
         return sb.toString();
     }
 

File: dolphinscheduler-task-plugin/dolphinscheduler-task-seatunnel/src/main/java/org/apache/dolphinscheduler/plugin/task/seatunnel/spark/SeatunnelSparkTask.java
Patch:
@@ -58,9 +58,10 @@ public List<String> buildOptions() throws Exception {
                 : seatunnelParameters.getMaster();
 
         args.add(MASTER_OPTIONS);
-        args.add(master.getCommand());
         if (MasterTypeEnum.SPARK.equals(master) || MasterTypeEnum.MESOS.equals(master)) {
-            args.add(seatunnelParameters.getMasterUrl());
+            args.add(master.getCommand() + seatunnelParameters.getMasterUrl());
+        } else {
+            args.add(master.getCommand());
         }
 
         return args;

File: dolphinscheduler-registry/dolphinscheduler-registry-plugins/dolphinscheduler-registry-jdbc/src/main/java/org/apache/dolphinscheduler/plugin/registry/jdbc/task/EphemeralDateManager.java
Patch:
@@ -83,12 +83,12 @@ public ConnectionState getConnectionState() {
 
     @Override
     public void close() throws SQLException {
-        ephemeralDateIds.clear();
-        connectionListeners.clear();
-        scheduledExecutorService.shutdownNow();
         for (Long ephemeralDateId : ephemeralDateIds) {
             jdbcOperator.deleteDataById(ephemeralDateId);
         }
+        ephemeralDateIds.clear();
+        connectionListeners.clear();
+        scheduledExecutorService.shutdownNow();
     }
 
     // Use this task to refresh ephemeral term and check the connect state.

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/v2/TaskInstanceV2Controller.java
Patch:
@@ -77,6 +77,7 @@ public class TaskInstanceV2Controller extends BaseController {
             @Parameter(name = "processInstanceName", description = "PROCESS_INSTANCE_NAME", schema = @Schema(implementation = String.class)),
             @Parameter(name = "searchVal", description = "SEARCH_VAL", schema = @Schema(implementation = String.class)),
             @Parameter(name = "taskName", description = "TASK_NAME", schema = @Schema(implementation = String.class)),
+            @Parameter(name = "taskCode", description = "TASK_CODE", schema = @Schema(implementation = Long.class)),
             @Parameter(name = "executorName", description = "EXECUTOR_NAME", schema = @Schema(implementation = String.class)),
             @Parameter(name = "stateType", description = "EXECUTION_STATUS", schema = @Schema(implementation = TaskExecutionStatus.class)),
             @Parameter(name = "host", description = "HOST", schema = @Schema(implementation = String.class)),
@@ -100,7 +101,8 @@ public TaskInstanceListPagingResponse queryTaskListPaging(@Parameter(hidden = tr
         result = taskInstanceService.queryTaskListPaging(loginUser, projectCode,
                 taskInstanceQueryReq.getProcessInstanceId(), taskInstanceQueryReq.getProcessInstanceName(),
                 taskInstanceQueryReq.getProcessDefinitionName(),
-                taskInstanceQueryReq.getTaskName(), taskInstanceQueryReq.getExecutorName(),
+                taskInstanceQueryReq.getTaskName(), taskInstanceQueryReq.getTaskCode(),
+                taskInstanceQueryReq.getExecutorName(),
                 taskInstanceQueryReq.getStartTime(), taskInstanceQueryReq.getEndTime(), searchVal,
                 taskInstanceQueryReq.getStateType(), taskInstanceQueryReq.getHost(),
                 taskInstanceQueryReq.getTaskExecuteType(), taskInstanceQueryReq.getPageNo(),

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/dto/taskInstance/TaskInstanceQueryRequest.java
Patch:
@@ -50,6 +50,9 @@ public class TaskInstanceQueryRequest extends PageQueryDto {
     @Schema(name = "taskName", example = "TASK-NAME")
     String taskName;
 
+    @Schema(name = "taskCode", example = "TASK-CODE")
+    Long taskCode;
+
     @Schema(name = "executorName", example = "EXECUTOR-NAME")
     String executorName;
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/TaskInstanceService.java
Patch:
@@ -37,6 +37,7 @@ public interface TaskInstanceService {
      * @param processInstanceId process instance id
      * @param searchVal search value
      * @param taskName task name
+     * @param taskCode task code
      * @param stateType state type
      * @param host host
      * @param startDate start time
@@ -52,6 +53,7 @@ Result queryTaskListPaging(User loginUser,
                                String processInstanceName,
                                String processDefinitionName,
                                String taskName,
+                               Long taskCode,
                                String executorName,
                                String startDate,
                                String endDate,

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/TaskInstanceControllerTest.java
Patch:
@@ -66,11 +66,12 @@ public void testQueryTaskListPaging() {
         result.setCode(Status.SUCCESS.getCode());
         result.setMsg(Status.SUCCESS.getMsg());
 
-        when(taskInstanceService.queryTaskListPaging(any(), eq(1L), eq(1), eq(""), eq(""), eq(""), eq(""), any(), any(),
+        when(taskInstanceService.queryTaskListPaging(any(), eq(1L), eq(1), eq(""), eq(""), eq(""), any(), eq(""), any(),
+                any(),
                 eq(""), Mockito.any(), eq("192.168.xx.xx"), eq(TaskExecuteType.BATCH), any(), any()))
                         .thenReturn(result);
         Result taskResult = taskInstanceController.queryTaskListPaging(null, 1L, 1, "", "", "",
-                "", "", TaskExecutionStatus.SUCCESS, "192.168.xx.xx", "2020-01-01 00:00:00", "2020-01-02 00:00:00",
+                "", 1L, "", TaskExecutionStatus.SUCCESS, "192.168.xx.xx", "2020-01-01 00:00:00", "2020-01-02 00:00:00",
                 TaskExecuteType.BATCH, pageNo, pageSize);
         Assertions.assertEquals(Integer.valueOf(Status.SUCCESS.getCode()), taskResult.getCode());
     }

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/v2/TaskInstanceV2ControllerTest.java
Patch:
@@ -74,7 +74,8 @@ public void testQueryTaskListPaging() {
 
         when(taskInstanceService.queryTaskListPaging(any(), eq(1L), eq(taskInstanceQueryReq.getProcessInstanceId()),
                 eq(taskInstanceQueryReq.getProcessInstanceName()), eq(taskInstanceQueryReq.getProcessInstanceName()),
-                eq(taskInstanceQueryReq.getTaskName()), eq(taskInstanceQueryReq.getExecutorName()), any(), any(),
+                eq(taskInstanceQueryReq.getTaskName()), Mockito.any(), eq(taskInstanceQueryReq.getExecutorName()),
+                any(), any(),
                 eq(taskInstanceQueryReq.getSearchVal()), Mockito.any(), eq(taskInstanceQueryReq.getHost()),
                 eq(taskInstanceQueryReq.getTaskExecuteType()), any(), any())).thenReturn(result);
         Result taskResult = taskInstanceV2Controller.queryTaskListPaging(null, 1L, taskInstanceQueryReq);

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/TaskInstanceMapper.java
Patch:
@@ -136,6 +136,7 @@ IPage<TaskInstance> queryTaskInstanceListPaging(IPage<TaskInstance> page,
                                                     @Param("processInstanceName") String processInstanceName,
                                                     @Param("searchVal") String searchVal,
                                                     @Param("taskName") String taskName,
+                                                    @Param("taskCode") Long taskCode,
                                                     @Param("executorName") String executorName,
                                                     @Param("states") int[] statusArray,
                                                     @Param("host") String host,
@@ -148,6 +149,7 @@ IPage<TaskInstance> queryStreamTaskInstanceListPaging(IPage<TaskInstance> page,
                                                           @Param("processDefinitionName") String processDefinitionName,
                                                           @Param("searchVal") String searchVal,
                                                           @Param("taskName") String taskName,
+                                                          @Param("taskCode") Long taskCode,
                                                           @Param("executorName") String executorName,
                                                           @Param("states") int[] statusArray,
                                                           @Param("host") String host,

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/TaskInstanceMapperTest.java
Patch:
@@ -375,6 +375,7 @@ public void testQueryTaskInstanceListPaging() {
                 "",
                 "",
                 "",
+                null,
                 "",
                 new int[0],
                 "",

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/DateUtils.java
Patch:
@@ -75,7 +75,7 @@ private static LocalDateTime date2LocalDateTime(Date date) {
      * @return local datetime
      */
     private static LocalDateTime date2LocalDateTime(Date date, ZoneId zoneId) {
-        return LocalDateTime.ofInstant(date.toInstant(), zoneId);
+        return LocalDateTime.ofInstant(Instant.ofEpochMilli(date.getTime()), zoneId);
     }
 
     /**

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/expand/CuringParamsService.java
Patch:
@@ -53,7 +53,7 @@ public interface CuringParamsService {
      * @param allParamMap
      * @return
      */
-    String convertParameterPlaceholders(String val, Map<String, String> allParamMap);
+    String convertParameterPlaceholders(String val, Map<String, Property> allParamMap);
 
     /**
      * curing global params

File: dolphinscheduler-task-plugin/dolphinscheduler-task-shell/src/main/java/org/apache/dolphinscheduler/plugin/task/shell/ShellTask.java
Patch:
@@ -81,7 +81,7 @@ public void init() {
     public void handle(TaskCallBack taskCallBack) throws TaskException {
         try {
             IShellInterceptorBuilder<?, ?> shellActuatorBuilder = ShellInterceptorBuilderFactory.newBuilder()
-                    .properties(ParameterUtils.convert(shellParameters.getLocalParametersMap()))
+                    .properties(ParameterUtils.convert(taskExecutionContext.getPrepareParamsMap()))
                     .appendScript(shellParameters.getRawScript());
 
             TaskResponse commandExecuteResult = shellCommandExecutor.run(shellActuatorBuilder, taskCallBack);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/LoginController.java
Patch:
@@ -31,6 +31,7 @@
 import org.apache.dolphinscheduler.api.service.UsersService;
 import org.apache.dolphinscheduler.api.utils.Result;
 import org.apache.dolphinscheduler.common.constants.Constants;
+import org.apache.dolphinscheduler.common.enums.UserType;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
 import org.apache.dolphinscheduler.common.utils.OkHttpUtils;
 import org.apache.dolphinscheduler.dao.entity.User;
@@ -241,7 +242,7 @@ public void loginByAuth2(@RequestParam String code, @RequestParam String provide
             String username = JSONUtils.getNodeString(userInfoJsonStr, "login");
             User user = usersService.getUserByUserName(username);
             if (user == null) {
-                user = usersService.createUser(username, null, null, 0, null, null, 1);
+                user = usersService.createUser(UserType.GENERAL_USER, username, null);
             }
             String sessionId = sessionService.createSession(user, null);
             if (sessionId == null) {

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/UsersServiceImpl.java
Patch:
@@ -224,7 +224,7 @@ public User createUser(String userName,
     }
 
     /***
-     * create User for ldap and sso login
+     * create User for ldap、Casdoor SSO and OAuth2.0 login
      */
     @Override
     @Transactional
@@ -238,6 +238,7 @@ public User createUser(UserType userType, String userId, String email) {
         user.setUserType(userType);
         user.setCreateTime(now);
         user.setUpdateTime(now);
+        user.setTenantId(-1);
         user.setQueue("");
         user.setState(Flag.YES.getCode());
 

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/TenantControllerTest.java
Patch:
@@ -54,7 +54,6 @@ public void testCreateTenant() throws Exception {
         paramsMap.add("tenantCode", "hayden");
         paramsMap.add("queueId", "1");
         paramsMap.add("description", "tenant description");
-        Mockito.when(PropertyUtils.isResourceStorageStartup()).thenReturn(false);
 
         MvcResult mvcResult = mockMvc.perform(post("/tenants")
                 .header(SESSION_ID, sessionId)

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/ResUploadType.java
Patch:
@@ -21,5 +21,5 @@
  * data base types
  */
 public enum ResUploadType {
-    LOCAL, HDFS, S3, OSS, GCS, ABS, OBS, NONE
+    LOCAL, HDFS, S3, OSS, GCS, ABS, OBS
 }

File: dolphinscheduler-storage-plugin/dolphinscheduler-storage-hdfs/src/main/java/org/apache/dolphinscheduler/plugin/storage/hdfs/HdfsStorageOperatorFactory.java
Patch:
@@ -28,7 +28,9 @@ public class HdfsStorageOperatorFactory implements StorageOperateFactory {
 
     @Override
     public StorageOperate createStorageOperate() {
-        return HdfsStorageOperator.getInstance();
+        HdfsStorageOperator hdfsOperator = new HdfsStorageOperator();
+        hdfsOperator.init();
+        return hdfsOperator;
     }
 
     @Override

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/UdfFuncServiceImpl.java
Patch:
@@ -264,7 +264,7 @@ public Result<Object> updateUdfFunc(User loginUser,
         try {
             doesResExist = storageOperate.exists(fullName);
         } catch (Exception e) {
-            log.error("udf resource checking error", fullName);
+            log.error("udf resource :{} checking error", fullName, e);
             result.setCode(Status.RESOURCE_NOT_EXIST.getCode());
             result.setMsg(Status.RESOURCE_NOT_EXIST.getMsg());
             return result;

File: dolphinscheduler-registry/dolphinscheduler-registry-api/src/main/java/org/apache/dolphinscheduler/registry/api/RegistryClient.java
Patch:
@@ -210,11 +210,11 @@ public IStoppable getStoppable() {
     }
 
     public boolean isMasterPath(String path) {
-        return path != null && path.startsWith(RegistryNodeType.MASTER.getRegistryPath());
+        return path != null && path.startsWith(RegistryNodeType.MASTER.getRegistryPath() + Constants.SINGLE_SLASH);
     }
 
     public boolean isWorkerPath(String path) {
-        return path != null && path.startsWith(RegistryNodeType.WORKER.getRegistryPath());
+        return path != null && path.startsWith(RegistryNodeType.WORKER.getRegistryPath() + Constants.SINGLE_SLASH);
     }
 
     public Collection<String> getChildrenKeys(final String key) {

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/WorkflowExecuteRunnable.java
Patch:
@@ -1897,7 +1897,7 @@ public void submitStandByTask() throws StateEventHandleException {
         TaskInstance task;
         while ((task = readyToSubmitTaskQueue.peek()) != null) {
             // stop tasks which is retrying if forced success happens
-            if (task.taskCanRetry()) {
+            if (task.getId() != null && task.taskCanRetry()) {
                 TaskInstance retryTask = taskInstanceDao.queryById(task.getId());
                 if (retryTask != null && retryTask.getState().isForceSuccess()) {
                     task.setState(retryTask.getState());

File: dolphinscheduler-tools/src/main/java/org/apache/dolphinscheduler/tools/datasource/dao/MySQLUpgradeDao.java
Patch:
@@ -27,10 +27,12 @@
 
 import lombok.extern.slf4j.Slf4j;
 
+import org.springframework.context.annotation.Profile;
 import org.springframework.stereotype.Service;
 
 @Service
 @Slf4j
+@Profile("mysql")
 public class MySQLUpgradeDao extends UpgradeDao {
 
     private MySQLUpgradeDao(DataSource dataSource) {

File: dolphinscheduler-tools/src/main/java/org/apache/dolphinscheduler/tools/datasource/dao/PostgreSQLUpgradeDao.java
Patch:
@@ -28,10 +28,12 @@
 
 import lombok.extern.slf4j.Slf4j;
 
+import org.springframework.context.annotation.Profile;
 import org.springframework.stereotype.Service;
 
 @Service
 @Slf4j
+@Profile("postgresql")
 public class PostgreSQLUpgradeDao extends UpgradeDao {
 
     private PostgreSQLUpgradeDao(DataSource dataSource) {

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/message/LogicTaskInstanceExecutionFinishEventSender.java
Patch:
@@ -34,7 +34,7 @@ public void sendMessage(TaskInstanceExecutionFinishEvent message) {
         ITaskInstanceExecutionEventListener iTaskInstanceExecutionEventListener =
                 SingletonJdkDynamicRpcClientProxyFactory.getInstance()
                         .getProxyClient(message.getHost(), ITaskInstanceExecutionEventListener.class);
-        iTaskInstanceExecutionEventListener.onTaskInstanceExecutionFinish(new TaskInstanceExecutionFinishEvent());
+        iTaskInstanceExecutionEventListener.onTaskInstanceExecutionFinish(message);
     }
 
     @Override

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/rpc/LogicITaskInstanceDispatchOperationFunction.java
Patch:
@@ -56,6 +56,8 @@ public LogicTaskDispatchResponse operate(LogicTaskDispatchRequest taskDispatchRe
             final int workflowInstanceId = taskExecutionContext.getProcessInstanceId();
             final String taskInstanceName = taskExecutionContext.getTaskName();
 
+            taskExecutionContext.setLogPath(LogUtils.getTaskInstanceLogFullPath(taskExecutionContext));
+
             LogUtils.setWorkflowAndTaskInstanceIDMDC(workflowInstanceId, taskInstanceId);
             LogUtils.setTaskInstanceLogFullPathMDC(taskExecutionContext.getLogPath());
 

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/log/GetAppIdRequest.java
Patch:
@@ -29,9 +29,9 @@
 @NoArgsConstructor
 public class GetAppIdRequest implements RequestMessageBuilder {
 
-    private String logPath;
+    private int taskInstanceId;
 
-    private String appInfoPath;
+    private String logPath;
 
     @Override
     public MessageType getCommandType() {

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/utils/ProcessUtils.java
Patch:
@@ -171,7 +171,7 @@ public static String getPidsStr(int processId) throws Exception {
             Thread.sleep(Constants.SLEEP_TIME_MILLIS);
             Host host = Host.of(taskExecutionContext.getHost());
             List<String> appIds = logClient.getAppIds(host.getIp(), host.getPort(), taskExecutionContext.getLogPath(),
-                    taskExecutionContext.getAppInfoPath());
+                    taskExecutionContext.getAppInfoPath(), taskExecutionContext.getTaskInstanceId());
             if (CollectionUtils.isNotEmpty(appIds)) {
                 taskExecutionContext.setAppIds(String.join(TaskConstants.COMMA, appIds));
                 if (StringUtils.isEmpty(taskExecutionContext.getExecutePath())) {

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/constants/Constants.java
Patch:
@@ -147,6 +147,9 @@ private Constants() {
 
     public static final String AZURE_BLOB_STORAGE_ACCOUNT_NAME = "resource.azure.blob.storage.account.name";
 
+    public static final String HUAWEI_CLOUD_OBS_BUCKET_NAME = "resource.huawei.cloud.obs.bucket.name";
+    public static final String HUAWEI_CLOUD_OBS_END_POINT = "resource.huawei.cloud.obs.endpoint";
+
     /**
      * fetch applicationId way
      */

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/ResUploadType.java
Patch:
@@ -21,5 +21,5 @@
  * data base types
  */
 public enum ResUploadType {
-    LOCAL, HDFS, S3, OSS, GCS, ABS, NONE
+    LOCAL, HDFS, S3, OSS, GCS, ABS, OBS, NONE
 }

File: dolphinscheduler-storage-plugin/dolphinscheduler-storage-api/src/main/java/org/apache/dolphinscheduler/plugin/storage/api/StorageType.java
Patch:
@@ -27,7 +27,9 @@ public enum StorageType {
     S3(3, "S3"),
     GCS(4, "GCS"),
 
-    ABS(5, "ABS");
+    ABS(5, "ABS"),
+
+    OBS(6, "OBS");
 
     private final int code;
     private final String name;

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/Command.java
Patch:
@@ -61,9 +61,11 @@ public class Command {
     private String commandParam;
 
     @TableField("task_depend_type")
+    @Builder.Default
     private TaskDependType taskDependType = TaskDependType.TASK_POST;
 
     @TableField("failure_strategy")
+    @Builder.Default
     private FailureStrategy failureStrategy = FailureStrategy.CONTINUE;
 
     @TableField("warning_type")
@@ -82,6 +84,7 @@ public class Command {
     private Priority processInstancePriority;
 
     @TableField("update_time")
+    @Builder.Default
     private Date updateTime = new Date();
 
     @TableField("worker_group")

File: dolphinscheduler-storage-plugin/dolphinscheduler-storage-hdfs/src/main/java/org/apache/dolphinscheduler/plugin/storage/hdfs/LocalStorageOperatorFactory.java
Patch:
@@ -26,7 +26,7 @@
 @AutoService(StorageOperateFactory.class)
 public class LocalStorageOperatorFactory implements StorageOperateFactory {
 
-    private static final String LOCAL_DEFAULT_FS = "file:///";
+    private static final String LOCAL_DEFAULT_FS = "file:/";
 
     @Override
     public StorageOperate createStorageOperate() {

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/WorkflowExecuteRunnable.java
Patch:
@@ -849,6 +849,7 @@ private void initTaskQueue() throws StateEventHandleException, CronParseExceptio
                         }
                     }
 
+                    processService.packageTaskInstance(task, workflowInstance);
                     validTaskMap.put(task.getTaskCode(), task.getId());
                     taskInstanceMap.put(task.getId(), task);
                     taskCodeInstanceMap.put(task.getTaskCode(), task);

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessService.java
Patch:
@@ -56,11 +56,14 @@
 import java.util.Map;
 import java.util.Optional;
 
+import javax.annotation.Nullable;
+
 import org.springframework.transaction.annotation.Transactional;
 
 public interface ProcessService {
 
     @Transactional
+    @Nullable
     ProcessInstance handleCommand(String host,
                                   Command command) throws CronParseException, CodeGenerateUtils.CodeGenerateException;
 

File: dolphinscheduler-tools/src/main/java/org/apache/dolphinscheduler/tools/resource/MigrateResourceService.java
Patch:
@@ -27,7 +27,7 @@
 import org.apache.dolphinscheduler.plugin.storage.api.StorageOperate;
 import org.apache.dolphinscheduler.spi.enums.ResourceType;
 
-import org.apache.zookeeper.common.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 import java.io.IOException;
 import java.util.List;

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/AlertSendStatusMapper.java
Patch:
@@ -27,7 +27,7 @@
 
 public interface AlertSendStatusMapper extends BaseMapper<AlertSendStatus> {
 
-    int batchInsert(List<AlertSendStatus> alertSendStatuses);
+    int batchInsert(@Param("alertSendStatuses") List<AlertSendStatus> alertSendStatuses);
 
     void deleteByAlertIds(@Param("alertIds") List<Integer> alertIds);
 }

File: dolphinscheduler-task-plugin/dolphinscheduler-task-sqoop/src/main/java/org/apache/dolphinscheduler/plugin/task/sqoop/generator/sources/MySQLSourceGenerator.java
Patch:
@@ -37,6 +37,7 @@
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
 import org.apache.dolphinscheduler.plugin.datasource.api.utils.DataSourceUtils;
 import org.apache.dolphinscheduler.plugin.task.api.model.Property;
+import org.apache.dolphinscheduler.plugin.task.sqoop.SqoopColumnType;
 import org.apache.dolphinscheduler.plugin.task.sqoop.SqoopQueryType;
 import org.apache.dolphinscheduler.plugin.task.sqoop.SqoopTaskExecutionContext;
 import org.apache.dolphinscheduler.plugin.task.sqoop.generator.ISourceGenerator;
@@ -89,7 +90,8 @@ public String generate(SqoopParameters sqoopParameters, SqoopTaskExecutionContex
                                     .append(SPACE).append(sourceMysqlParameter.getSrcTable());
                         }
 
-                        if (StringUtils.isNotEmpty(sourceMysqlParameter.getSrcColumns())) {
+                        if (sourceMysqlParameter.getSrcColumnType() == SqoopColumnType.CUSTOMIZE_COLUMNS.getCode()
+                                && StringUtils.isNotEmpty(sourceMysqlParameter.getSrcColumns())) {
                             mysqlSourceSb.append(SPACE).append(COLUMNS)
                                     .append(SPACE).append(sourceMysqlParameter.getSrcColumns());
                         }

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessServiceImpl.java
Patch:
@@ -744,6 +744,7 @@ private Boolean checkCmdParam(Command command, Map<String, String> cmdParam) {
      * @param host    host
      * @return process instance
      */
+    @Override
     public @Nullable ProcessInstance constructProcessInstance(Command command,
                                                               String host) throws CronParseException, CodeGenerateException {
         ProcessInstance processInstance;
@@ -774,7 +775,8 @@ private Boolean checkCmdParam(Command command, Map<String, String> cmdParam) {
         CommandType commandTypeIfComplement = getCommandTypeIfComplement(processInstance, command);
         // reset global params while repeat running and recover tolerance fault process is needed by cmdParam
         if (commandTypeIfComplement == CommandType.REPEAT_RUNNING ||
-                commandTypeIfComplement == CommandType.RECOVER_TOLERANCE_FAULT_PROCESS) {
+                commandTypeIfComplement == CommandType.RECOVER_TOLERANCE_FAULT_PROCESS ||
+                commandTypeIfComplement == CommandType.RECOVER_SERIAL_WAIT) {
             setGlobalParamIfCommanded(processDefinition, cmdParam);
         }
 

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/ProcessUtils.java
Patch:
@@ -135,7 +135,7 @@ public static String getPidsStr(int processId) throws Exception {
     }
 
     /**
-     * cacel k8s / yarn application
+     * cancel k8s / yarn application
      *
      * @param taskExecutionContext
      * @return

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskInstance.java
Patch:
@@ -347,7 +347,8 @@ public boolean isTaskComplete() {
 
         return this.getState().isSuccess()
                 || this.getState().isKill()
-                || (this.getState().isFailure() && !taskCanRetry());
+                || (this.getState().isFailure() && !taskCanRetry())
+                || this.getState().isForceSuccess();
     }
 
     public boolean isSubProcess() {

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/AbstractCommandExecutor.java
Patch:
@@ -201,7 +201,7 @@ public TaskResponse run(IShellInterceptorBuilder iShellInterceptorBuilder,
                 // Wait the task log process finished.
                 taskOutputFuture.get();
             } catch (ExecutionException e) {
-                logger.info("Handle task log error", e);
+                logger.error("Handle task log error", e);
             }
         }
 
@@ -272,7 +272,7 @@ private void collectPodLogIfNeeded() {
             ThreadUtils.sleep(SLEEP_TIME_MILLIS * 5L);
             try (
                     LogWatch watcher = ProcessUtils.getPodLogWatcher(taskRequest.getK8sTaskExecutionContext(),
-                            taskRequest.getTaskAppId())) {
+                            taskRequest.getTaskAppId(), "")) {
                 if (watcher == null) {
                     throw new RuntimeException("The driver pod does not exist.");
                 } else {

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/k8s/AbstractK8sTask.java
Patch:
@@ -48,7 +48,7 @@ public void handle(TaskCallBack taskCallBack) throws TaskException {
             setExitStatusCode(response.getExitStatusCode());
             setAppIds(response.getAppIds());
         } catch (Exception e) {
-            log.error("k8s task submit failed with error", e);
+            log.error("k8s task submit failed with error");
             exitStatusCode = -1;
             throw new TaskException("Execute k8s task error", e);
         }

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/constants/DataSourceConstants.java
Patch:
@@ -71,6 +71,7 @@ public class DataSourceConstants {
      * jdbc url
      */
     public static final String JDBC_MYSQL = "jdbc:mysql://";
+    public static final String JDBC_MYSQL_LOADBALANCE = "jdbc:mysql:loadbalance://";
     public static final String JDBC_POSTGRESQL = "jdbc:postgresql://";
     public static final String JDBC_HIVE_2 = "jdbc:hive2://";
     public static final String JDBC_KYUUBI = "jdbc:kyuubi://";

File: dolphinscheduler-spi/src/main/java/org/apache/dolphinscheduler/spi/enums/DbType.java
Patch:
@@ -50,7 +50,8 @@ public enum DbType {
     DATABEND(19, "databend"),
     SNOWFLAKE(20, "snowflake"),
     VERTICA(21, "vertica"),
-    HANA(22, "hana");
+    HANA(22, "hana"),
+    DORIS(23, "doris");
 
     private static final Map<Integer, DbType> DB_TYPE_MAP =
             Arrays.stream(DbType.values()).collect(toMap(DbType::getCode, Functions.identity()));

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/EnvironmentServiceTest.java
Patch:
@@ -296,14 +296,14 @@ private String getConfig() {
         return "export HADOOP_HOME=/opt/hadoop-2.6.5\n"
                 + "export HADOOP_CONF_DIR=/etc/hadoop/conf\n"
                 + "export SPARK_HOME=/opt/soft/spark\n"
-                + "export PYTHON_HOME=/opt/soft/python\n"
+                + "export PYTHON_LAUNCHER=/opt/soft/python/bin/python3\n"
                 + "export JAVA_HOME=/opt/java/jdk1.8.0_181-amd64\n"
                 + "export HIVE_HOME=/opt/soft/hive\n"
                 + "export FLINK_HOME=/opt/soft/flink\n"
-                + "export DATAX_HOME=/opt/soft/datax\n"
+                + "export DATAX_LAUNCHER=/opt/soft/datax/bin/python3\n"
                 + "export YARN_CONF_DIR=\"/etc/hadoop/conf\"\n"
                 + "\n"
-                + "export PATH=$HADOOP_HOME/bin:$SPARK_HOME/bin:$PYTHON_HOME/bin:$JAVA_HOME/bin:$HIVE_HOME/bin:$FLINK_HOME/bin:$DATAX_HOME/bin:$PATH\n"
+                + "export PATH=$HADOOP_HOME/bin:$SPARK_HOME/bin:$PYTHON_LAUNCHER:$JAVA_HOME/bin:$HIVE_HOME/bin:$FLINK_HOME/bin:$DATAX_LAUNCHER:$PATH\n"
                 + "\n"
                 + "export HADOOP_CLASSPATH=`hadoop classpath`\n"
                 + "\n"

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/ClusterMapperTest.java
Patch:
@@ -174,14 +174,14 @@ private String getConfig() {
         return "export HADOOP_HOME=/opt/hadoop-2.6.5\n"
                 + "export HADOOP_CONF_DIR=/etc/hadoop/conf\n"
                 + "export SPARK_HOME=/opt/soft/spark\n"
-                + "export PYTHON_HOME=/opt/soft/python\n"
+                + "export PYTHON_LAUNCHER=/opt/soft/python/bin/python3\n"
                 + "export JAVA_HOME=/opt/java/jdk1.8.0_181-amd64\n"
                 + "export HIVE_HOME=/opt/soft/hive\n"
                 + "export FLINK_HOME=/opt/soft/flink\n"
-                + "export DATAX_HOME=/opt/soft/datax\n"
+                + "export DATAX_LAUNCHER=/opt/soft/datax/bin/python3\n"
                 + "export YARN_CONF_DIR=\"/etc/hadoop/conf\"\n"
                 + "\n"
-                + "export PATH=$HADOOP_HOME/bin:$SPARK_HOME/bin:$PYTHON_HOME/bin:$JAVA_HOME/bin:$HIVE_HOME/bin:$FLINK_HOME/bin:$DATAX_HOME/bin:$PATH\n"
+                + "export PATH=$HADOOP_HOME/bin:$SPARK_HOME/bin:$PYTHON_LAUNCHER:$JAVA_HOME/bin:$HIVE_HOME/bin:$FLINK_HOME/bin:$DATAX_LAUNCHER:$PATH\n"
                 + "\n"
                 + "export HADOOP_CLASSPATH=`hadoop classpath`\n"
                 + "\n"

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/EnvironmentMapperTest.java
Patch:
@@ -174,14 +174,14 @@ private String getConfig() {
         return "export HADOOP_HOME=/opt/hadoop-2.6.5\n"
                 + "export HADOOP_CONF_DIR=/etc/hadoop/conf\n"
                 + "export SPARK_HOME=/opt/soft/spark\n"
-                + "export PYTHON_HOME=/opt/soft/python\n"
+                + "export PYTHON_LAUNCHER=/opt/soft/python/bin/python3\n"
                 + "export JAVA_HOME=/opt/java/jdk1.8.0_181-amd64\n"
                 + "export HIVE_HOME=/opt/soft/hive\n"
                 + "export FLINK_HOME=/opt/soft/flink\n"
-                + "export DATAX_HOME=/opt/soft/datax\n"
+                + "export DATAX_LAUNCHER=/opt/soft/datax/bin/python3\n"
                 + "export YARN_CONF_DIR=\"/etc/hadoop/conf\"\n"
                 + "\n"
-                + "export PATH=$HADOOP_HOME/bin:$SPARK_HOME/bin:$PYTHON_HOME/bin:$JAVA_HOME/bin:$HIVE_HOME/bin:$FLINK_HOME/bin:$DATAX_HOME/bin:$PATH\n"
+                + "export PATH=$HADOOP_HOME/bin:$SPARK_HOME/bin:$PYTHON_LAUNCHER:$JAVA_HOME/bin:$HIVE_HOME/bin:$FLINK_HOME/bin:$DATAX_LAUNCHER:$PATH\n"
                 + "\n"
                 + "export HADOOP_CLASSPATH=`hadoop classpath`\n"
                 + "\n"

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/utils/TaskCacheUtilsTest.java
Patch:
@@ -167,7 +167,7 @@ void TestGenerateCacheKey() {
         // task definition version is changed, so cache key changed
         Assertions.assertNotEquals(cacheKeyD, cacheKeyE);
 
-        taskInstance.setEnvironmentConfig("export PYTHON_HOME=/bin/python3");
+        taskInstance.setEnvironmentConfig("export PYTHON_LAUNCHER=/bin/python3");
         String cacheKeyF = TaskCacheUtils.generateCacheKey(taskInstance, taskExecutionContext, storageOperate);
         // EnvironmentConfig is changed, so cache key changed
         Assertions.assertNotEquals(cacheKeyE, cacheKeyF);

File: dolphinscheduler-task-plugin/dolphinscheduler-task-datax/src/test/java/org/apache/dolphinscheduler/plugin/task/datax/DataxTaskTest.java
Patch:
@@ -122,7 +122,7 @@ public void testHandleNullParamsMap() throws Exception {
         Assertions.assertTrue(delete);
 
         Assertions.assertEquals(dataxTask.buildCommand("/tmp/execution/app-id_job.json", null),
-                "python2.7 ${DATAX_HOME}/bin/datax.py  --jvm=\"-Xms1G -Xmx1G\"  /tmp/execution/app-id_job.json");
+                "${PYTHON_LAUNCHER} ${DATAX_LAUNCHER} --jvm=\"-Xms1G -Xmx1G\"  /tmp/execution/app-id_job.json");
     }
 
     @Test
@@ -157,7 +157,7 @@ public void testHandleParamsMap() throws Exception {
         Assertions.assertTrue(delete);
 
         Assertions.assertEquals(dataxTask.buildCommand("/tmp/execution/app-id_job.json", createPrepareParamsMap()),
-                "python2.7 ${DATAX_HOME}/bin/datax.py  --jvm=\"-Xms1G -Xmx1G\" -p \"-DDT='DT' -DDS='DS'\" /tmp/execution/app-id_job.json");
+                "${PYTHON_LAUNCHER} ${DATAX_LAUNCHER} --jvm=\"-Xms1G -Xmx1G\" -p \"-DDT='DT' -DDS='DS'\" /tmp/execution/app-id_job.json");
     }
 
     @Test
@@ -237,7 +237,7 @@ public void testLoadJvmEnv() {
         DataxParameters dataXParameters = createDataxParameters();
         dataXParameters.setXms(3);
         dataXParameters.setXmx(4);
-        Assertions.assertEquals(dataxTask.loadJvmEnv(dataXParameters), " --jvm=\"-Xms3G -Xmx4G\" ");
+        Assertions.assertEquals(dataxTask.loadJvmEnv(dataXParameters), "--jvm=\"-Xms3G -Xmx4G\" ");
     }
 
     private DataxParameters createDataxParameters() {

File: dolphinscheduler-task-plugin/dolphinscheduler-task-openmldb/src/main/java/org/apache/dolphinscheduler/plugin/task/openmldb/OpenmldbTask.java
Patch:
@@ -132,7 +132,7 @@ private String buildPythonScriptsFromSql(String rawSqlScript) {
 
     /**
      * Build the python task command.
-     * If user have set the 'PYTHON_HOME' environment, we will use the 'PYTHON_HOME',
+     * If user have set the 'PYTHON_LAUNCHER' environment, we will use the 'PYTHON_LAUNCHER',
      * if not, we will default use python.
      *
      * @param pythonFile Python file, cannot be empty.
@@ -145,7 +145,7 @@ protected String buildPythonExecuteCommand(String pythonFile) {
     }
 
     private String getPythonCommand() {
-        String pythonHome = System.getenv(PYTHON_HOME);
+        String pythonHome = System.getenv(PYTHON_LAUNCHER);
         return getPythonCommand(pythonHome);
     }
 

File: dolphinscheduler-task-plugin/dolphinscheduler-task-python/src/test/java/org/apache/dolphinscheduler/plugin/task/python/PythonTaskTest.java
Patch:
@@ -25,7 +25,7 @@ public class PythonTaskTest {
     @Test
     public void buildPythonExecuteCommand() throws Exception {
         PythonTask pythonTask = createPythonTask();
-        Assertions.assertEquals("${PYTHON_HOME} test.py", pythonTask.buildPythonExecuteCommand("test.py"));
+        Assertions.assertEquals("${PYTHON_LAUNCHER} test.py", pythonTask.buildPythonExecuteCommand("test.py"));
     }
 
     private PythonTask createPythonTask() {

File: dolphinscheduler-task-plugin/dolphinscheduler-task-pytorch/src/main/java/org/apache/dolphinscheduler/plugin/task/pytorch/PythonEnvManager.java
Patch:
@@ -38,7 +38,7 @@ public class PythonEnvManager {
 
     private static final String VIRTUALENV_SOURCE = "source %s/bin/activate";
 
-    private static final String VIRTUALENV_BUILD = "virtualenv -p ${PYTHON_HOME} %s";
+    private static final String VIRTUALENV_BUILD = "virtualenv -p ${PYTHON_LAUNCHER} %s";
 
     private static final String INSTALL_COMMAND = "%s -m pip install -r %s";
 

File: dolphinscheduler-task-plugin/dolphinscheduler-task-pytorch/src/main/java/org/apache/dolphinscheduler/plugin/task/pytorch/PytorchTask.java
Patch:
@@ -129,7 +129,7 @@ private String getPythonCommand() {
         if (pytorchParameters.getIsCreateEnvironment()) {
             pythonCommand = pythonEnvManager.getPythonCommand();
         } else {
-            pythonCommand = pytorchParameters.getPythonCommand();
+            pythonCommand = pytorchParameters.getPythonLauncher();
         }
         return pythonCommand;
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/UsersServiceImpl.java
Patch:
@@ -1336,7 +1336,7 @@ public Map<String, Object> registerUser(String userName, String userPassword, St
             putMsg(result, Status.REQUEST_PARAMS_NOT_VALID_ERROR, "two passwords are not same");
             return result;
         }
-        User user = createUser(userName, userPassword, email, 1, "", "", Flag.NO.ordinal());
+        User user = createUser(userName, userPassword, email, -1, "", "", Flag.NO.ordinal());
         putMsg(result, Status.SUCCESS);
         result.put(Constants.DATA_LIST, user);
         return result;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/DataSourceServiceImpl.java
Patch:
@@ -666,8 +666,9 @@ public Map<String, Object> getDatabases(Integer datasourceId) {
             }
             if (dataSource.getType() == DbType.POSTGRESQL) {
                 rs = connection.createStatement().executeQuery(Constants.DATABASES_QUERY_PG);
+            } else {
+                rs = connection.createStatement().executeQuery(Constants.DATABASES_QUERY);
             }
-            rs = connection.createStatement().executeQuery(Constants.DATABASES_QUERY);
             tableList = new ArrayList<>();
             while (rs.next()) {
                 String name = rs.getString(1);

File: dolphinscheduler-worker/src/main/java/org/apache/dolphinscheduler/server/worker/processor/WorkerTaskKillProcessor.java
Patch:
@@ -85,6 +85,7 @@ public void process(Channel channel, Message message) {
                 return;
             }
 
+            boolean result = doKill(taskExecutionContext);
             this.cancelApplication(taskInstanceId);
 
             int processId = taskExecutionContext.getProcessId();
@@ -97,8 +98,6 @@ public void process(Channel channel, Message message) {
                 return;
             }
 
-            boolean result = doKill(taskExecutionContext);
-
             taskExecutionContext.setCurrentExecutionStatus(
                     result ? TaskExecutionStatus.SUCCESS : TaskExecutionStatus.FAILURE);
             sendTaskKillResponseCommand(channel, message.getOpaque(), taskExecutionContext);

File: dolphinscheduler-e2e/dolphinscheduler-e2e-case/src/test/java/org/apache/dolphinscheduler/e2e/cases/WorkflowE2ETest.java
Patch:
@@ -45,6 +45,8 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.awaitility.Awaitility.await;
 
+import java.time.Duration;
+
 @DolphinScheduler(composeFiles = "docker/basic/docker-compose.yaml")
 class WorkflowE2ETest {
     private static final String project = "test-workflow-1";
@@ -201,7 +203,7 @@ void testRunWorkflow() {
                 .next()
                 .rerun();
 
-        await().untilAsserted(() -> {
+        await().timeout(Duration.ofSeconds(20)).untilAsserted(() -> {
             browser.navigate().refresh();
 
             final Row row = projectPage

File: dolphinscheduler-task-plugin/dolphinscheduler-task-seatunnel/src/main/java/org/apache/dolphinscheduler/plugin/task/seatunnel/flink/SeatunnelFlinkParameters.java
Patch:
@@ -35,6 +35,7 @@ public class SeatunnelFlinkParameters extends SeatunnelParameters {
     @Getter
     public enum RunModeEnum {
 
+        NONE("none"),
         RUN("--run-mode run"),
         RUN_APPLICATION("--run-mode run-application");
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java
Patch:
@@ -482,6 +482,7 @@ public enum Status {
     GET_DATASOURCE_OPTIONS_ERROR(1200017, "get datasource options error", "获取数据源Options错误"),
     GET_DATASOURCE_TABLES_ERROR(1200018, "get datasource tables error", "获取数据源表列表错误"),
     GET_DATASOURCE_TABLE_COLUMNS_ERROR(1200019, "get datasource table columns error", "获取数据源表列名错误"),
+    GET_DATASOURCE_DATABASES_ERROR(1200035, "get datasource databases error", "获取数据库列表错误"),
 
     CREATE_CLUSTER_ERROR(120020, "create cluster error", "创建集群失败"),
     CLUSTER_NAME_EXISTS(120021, "this cluster name [{0}] already exists", "集群名称[{0}]已经存在"),

File: dolphinscheduler-data-quality/src/main/java/org/apache/dolphinscheduler/data/quality/flow/batch/reader/JdbcReader.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.dolphinscheduler.data.quality.flow.batch.reader;
 
+import static org.apache.dolphinscheduler.data.quality.Constants.DATABASE;
 import static org.apache.dolphinscheduler.data.quality.Constants.DB_TABLE;
 import static org.apache.dolphinscheduler.data.quality.Constants.DOTS;
 import static org.apache.dolphinscheduler.data.quality.Constants.DRIVER;
@@ -78,7 +79,7 @@ private DataFrameReader jdbcReader(SparkSession sparkSession) {
         DataFrameReader reader = sparkSession.read()
                 .format(JDBC)
                 .option(URL, config.getString(URL))
-                .option(DB_TABLE, config.getString(TABLE))
+                .option(DB_TABLE, config.getString(DATABASE) + "." + config.getString(TABLE))
                 .option(USER, config.getString(USER))
                 .option(PASSWORD, ParserUtils.decode(config.getString(PASSWORD)))
                 .option(DRIVER, config.getString(DRIVER));

File: dolphinscheduler-data-quality/src/main/java/org/apache/dolphinscheduler/data/quality/flow/batch/writer/JdbcWriter.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.dolphinscheduler.data.quality.flow.batch.writer;
 
 import static org.apache.dolphinscheduler.data.quality.Constants.APPEND;
+import static org.apache.dolphinscheduler.data.quality.Constants.DATABASE;
 import static org.apache.dolphinscheduler.data.quality.Constants.DB_TABLE;
 import static org.apache.dolphinscheduler.data.quality.Constants.DRIVER;
 import static org.apache.dolphinscheduler.data.quality.Constants.JDBC;
@@ -79,7 +80,7 @@ public void write(Dataset<Row> data, SparkRuntimeEnvironment env) {
                 .format(JDBC)
                 .option(DRIVER, config.getString(DRIVER))
                 .option(URL, config.getString(URL))
-                .option(DB_TABLE, config.getString(TABLE))
+                .option(DB_TABLE, config.getString(DATABASE) + "." + config.getString(TABLE))
                 .option(USER, config.getString(USER))
                 .option(PASSWORD, ParserUtils.decode(config.getString(PASSWORD)))
                 .mode(config.getString(SAVE_MODE))

File: dolphinscheduler-data-quality/src/test/java/org/apache/dolphinscheduler/data/quality/flow/reader/JdbcReaderTest.java
Patch:
@@ -56,7 +56,7 @@ public void testJdbcConnectorExecute() {
     private Config buildReaderConfig() {
         Map<String, Object> config = new HashMap<>();
         config.put(DATABASE, "test");
-        config.put(TABLE, "test.test1");
+        config.put(TABLE, "test1");
         config.put(URL, url);
         config.put(USER, "test");
         config.put(PASSWORD, "123456");

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/DataQualityConstants.java
Patch:
@@ -31,11 +31,13 @@ private DataQualityConstants() {
      */
     public static final String SRC_CONNECTOR_TYPE = "src_connector_type";
     public static final String SRC_DATASOURCE_ID = "src_datasource_id";
+    public static final String SRC_DATABASE = "src_database";
     public static final String SRC_TABLE = "src_table";
     public static final String SRC_FILTER = "src_filter";
     public static final String SRC_FIELD = "src_field";
     public static final String TARGET_CONNECTOR_TYPE = "target_connector_type";
     public static final String TARGET_DATASOURCE_ID = "target_datasource_id";
+    public static final String TARGET_DATABASE = "target_database";
     public static final String TARGET_TABLE = "target_table";
     public static final String TARGET_FILTER = "target_filter";
     public static final String TARGET_FIELD = "target_field";

File: dolphinscheduler-task-plugin/dolphinscheduler-task-dataquality/src/test/java/org/apache/dolphinscheduler/plugin/task/dq/DataQualityParameterTest.java
Patch:
@@ -61,6 +61,7 @@ public void testCheckParameterNormal() {
         Map<String, String> inputParameterValue = new HashMap<>();
         inputParameterValue.put("src_connector_type", "JDBC");
         inputParameterValue.put("src_datasource_id", "1");
+        inputParameterValue.put("src_database", "test");
         inputParameterValue.put("src_table", "test1");
         inputParameterValue.put("src_filter", "date=2012-10-05");
         inputParameterValue.put("src_field", "id");

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/service/WorkerFailoverService.java
Patch:
@@ -208,13 +208,11 @@ private boolean checkTaskInstanceNeedFailover(Optional<Date> needFailoverWorkerS
                                                   @Nullable ProcessInstance processInstance,
                                                   TaskInstance taskInstance) {
         if (processInstance == null) {
-            // This case should be happened.
             log.error(
                     "Failover task instance error, cannot find the related processInstance form memory, this case shouldn't happened");
             return false;
         }
         if (taskInstance == null) {
-            // This case should be happened.
             log.error("Master failover task instance error, taskInstance is null, this case shouldn't happened");
             return false;
         }

File: dolphinscheduler-api-test/dolphinscheduler-api-test-case/src/test/java/org/apache/dolphinscheduler/api/test/cases/SchedulerAPITest.java
Patch:
@@ -143,7 +143,7 @@ public void testOfflineSchedule() {
     @Test
     @Order(5)
     public void testUpdateSchedule() {
-        final String schedule = "{\"startTime\":\"1996-08-08 00:00:00\",\"endTime\":\"2200-08-08 00:00:00\",\"timezoneId\":\"America/Phoenix\",\"crontab\":\"0 0 3/6 * * ? *\"}" ;
+        final String schedule = "{\"startTime\":\"1996-08-08 00:00:00\",\"endTime\":\"2200-08-08 00:00:00\",\"timezoneId\":\"America/Phoenix\",\"crontab\":\"0 0 3/6 * * ? *\"}";
         HttpResponse updateScheduleResponse = schedulerPage.updateSchedule(loginUser, projectCode, scheduleId, schedule);
         Assertions.assertTrue(updateScheduleResponse.getBody().getSuccess());
 

File: dolphinscheduler-api-test/dolphinscheduler-api-test-case/src/test/java/org/apache/dolphinscheduler/api/test/pages/workflow/ProcessDefinitionPage.java
Patch:
@@ -73,7 +73,7 @@ public HttpResponse queryProcessDefinitionByCode(User loginUser, long projectCod
         return requestClient.get(url, headers, params);
     }
 
-    public HttpResponse getProcessListByProjectCodes(User loginUser, long projectCode) {
+    public HttpResponse getProcessListByProjectCode(User loginUser, long projectCode) {
         Map<String, Object> params = new HashMap<>();
         params.put("loginUser", loginUser);
         Map<String, String> headers = new HashMap<>();

File: dolphinscheduler-api-test/dolphinscheduler-api-test-case/src/test/java/org/apache/dolphinscheduler/api/test/pages/workflow/SchedulerPage.java
Patch:
@@ -90,7 +90,6 @@ public HttpResponse updateSchedule(User loginUser, long projectCode, int schedul
         Map<String, Object> params = new HashMap<>();
         params.put("loginUser", loginUser);
         params.put("schedule", schedule);
-        params.put("warningGroupId", 1);
         Map<String, String> headers = new HashMap<>();
         headers.put(Constants.SESSION_ID_KEY, sessionId);
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProcessDefinitionController.java
Patch:
@@ -600,8 +600,8 @@ public Result getNodeListMapByDefinitionCodes(@Parameter(hidden = true) @Request
     @GetMapping(value = "/query-process-definition-list")
     @ResponseStatus(HttpStatus.OK)
     @ApiException(GET_TASKS_LIST_BY_PROCESS_DEFINITION_ID_ERROR)
-    public Result getProcessListByProjectCodes(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,
-                                               @Parameter(name = "projectCode", description = "PROJECT_CODE", required = true) @PathVariable long projectCode) {
+    public Result getProcessListByProjectCode(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,
+                                              @Parameter(name = "projectCode", description = "PROJECT_CODE", required = true) @PathVariable long projectCode) {
         Map<String, Object> result = processDefinitionService.queryProcessDefinitionListByProjectCode(projectCode);
         return returnDataList(result);
     }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/SchedulerController.java
Patch:
@@ -152,7 +152,7 @@ public Result createSchedule(@Parameter(hidden = true) @RequestAttribute(value =
     @Operation(summary = "updateSchedule", description = "UPDATE_SCHEDULE_NOTES")
     @Parameters({
             @Parameter(name = "id", description = "SCHEDULE_ID", required = true, schema = @Schema(implementation = int.class, example = "100")),
-            @Parameter(name = "schedule", description = "SCHEDULE", schema = @Schema(implementation = String.class, example = "{'startTime':'2019-06-10 00:00:00','endTime':'2019-06-13 00:00:00','crontab':'0 0 3/6 * * ? *'}")),
+            @Parameter(name = "schedule", description = "SCHEDULE", schema = @Schema(implementation = String.class, example = "{\"startTime\":\"1996-08-08 00:00:00\",\"endTime\":\"2200-08-08 00:00:00\",\"timezoneId\":\"America/Phoenix\",\"crontab\":\"0 0 3/6 * * ? *\"}")),
             @Parameter(name = "warningType", description = "WARNING_TYPE", schema = @Schema(implementation = WarningType.class)),
             @Parameter(name = "warningGroupId", description = "WARNING_GROUP_ID", schema = @Schema(implementation = int.class, example = "100")),
             @Parameter(name = "failureStrategy", description = "FAILURE_STRATEGY", schema = @Schema(implementation = FailureStrategy.class)),
@@ -170,7 +170,7 @@ public Result updateSchedule(@Parameter(hidden = true) @RequestAttribute(value =
                                  @PathVariable(value = "id") Integer id,
                                  @RequestParam(value = "schedule") String schedule,
                                  @RequestParam(value = "warningType", required = false, defaultValue = DEFAULT_WARNING_TYPE) WarningType warningType,
-                                 @RequestParam(value = "warningGroupId", required = false) int warningGroupId,
+                                 @RequestParam(value = "warningGroupId", required = false, defaultValue = DEFAULT_NOTIFY_GROUP_ID) int warningGroupId,
                                  @RequestParam(value = "failureStrategy", required = false, defaultValue = "END") FailureStrategy failureStrategy,
                                  @RequestParam(value = "workerGroup", required = false, defaultValue = "default") String workerGroup,
                                  @RequestParam(value = "tenantCode", required = false, defaultValue = "default") String tenantCode,

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/K8sUtils.java
Patch:
@@ -96,7 +96,7 @@ public String getPodLog(String jobName, String namespace) {
             String podName = null;
             for (Pod pod : podList) {
                 podName = pod.getMetadata().getName();
-                if (jobName.equals(podName.substring(0, pod.getMetadata().getName().lastIndexOf("-")))) {
+                if (podName.contains("-") && jobName.equals(podName.substring(0, podName.lastIndexOf("-")))) {
                     break;
                 }
             }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/AlertPluginInstanceServiceImpl.java
Patch:
@@ -243,16 +243,16 @@ public Result listPaging(User loginUser, String searchVal, int pageNo, int pageS
     }
 
     private List<AlertPluginInstanceVO> buildPluginInstanceVOList(List<AlertPluginInstance> alertPluginInstances) {
+        List<AlertPluginInstanceVO> alertPluginInstanceVOS = new ArrayList<>();
         if (CollectionUtils.isEmpty(alertPluginInstances)) {
-            return null;
+            return alertPluginInstanceVOS;
         }
         List<PluginDefine> pluginDefineList = pluginDefineMapper.queryAllPluginDefineList();
         if (CollectionUtils.isEmpty(pluginDefineList)) {
-            return null;
+            return alertPluginInstanceVOS;
         }
         Map<Integer, PluginDefine> pluginDefineMap =
                 pluginDefineList.stream().collect(Collectors.toMap(PluginDefine::getId, Function.identity()));
-        List<AlertPluginInstanceVO> alertPluginInstanceVOS = new ArrayList<>();
         alertPluginInstances.forEach(alertPluginInstance -> {
             AlertPluginInstanceVO alertPluginInstanceVO = new AlertPluginInstanceVO();
 

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java
Patch:
@@ -73,6 +73,7 @@ public TaskDefinitionLog(TaskDefinition taskDefinition) {
         this.setModifyBy(taskDefinition.getModifyBy());
         this.setCpuQuota(taskDefinition.getCpuQuota());
         this.setMemoryMax(taskDefinition.getMemoryMax());
+        this.setTaskExecuteType(taskDefinition.getTaskExecuteType());
     }
 
     public int getOperator() {

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/WorkflowExecuteRunnable.java
Patch:
@@ -732,8 +732,9 @@ private int createComplementDataCommand(Date scheduleDate) {
         command.setProcessInstanceId(0);
         command.setProcessDefinitionVersion(processInstance.getProcessDefinitionVersion());
         command.setTestFlag(processInstance.getTestFlag());
+        int create = commandService.createCommand(command);
         processService.saveCommandTrigger(command.getId(), processInstance.getId());
-        return commandService.createCommand(command);
+        return create;
     }
 
     private boolean needComplementProcess() {

File: dolphinscheduler-task-plugin/dolphinscheduler-task-flink/src/main/java/org/apache/dolphinscheduler/plugin/task/flink/FlinkConstants.java
Patch:
@@ -48,7 +48,8 @@ private FlinkConstants() {
     public static final String FLINK_EXECUTION_TARGET = "-t";
     public static final String FLINK_YARN_SLOT = "-ys";
     public static final String FLINK_APP_NAME = "-ynm";
-    public static final String FLINK_QUEUE = "-yqu";
+    public static final String FLINK_QUEUE_FOR_MODE = "-yqu";
+    public static final String FLINK_QUEUE_FOR_TARGETS = "-Dyarn.application.queue";
     public static final String FLINK_TASK_MANAGE = "-yn";
     public static final String FLINK_JOB_MANAGE_MEM = "-yjm";
     public static final String FLINK_TASK_MANAGE_MEM = "-ytm";

File: dolphinscheduler-task-plugin/dolphinscheduler-task-k8s/src/main/java/org/apache/dolphinscheduler/plugin/task/k8s/K8sTask.java
Patch:
@@ -18,7 +18,6 @@
 package org.apache.dolphinscheduler.plugin.task.k8s;
 
 import static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.CLUSTER;
-import static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.COMMA;
 import static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.NAMESPACE_NAME;
 
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
@@ -110,7 +109,7 @@ public List<NodeSelectorRequirement> convertToNodeSelectorRequirements(List<Node
                 expression.getKey(),
                 expression.getOperator(),
                 StringUtils.isEmpty(expression.getValues()) ? Collections.emptyList()
-                        : Arrays.asList(expression.getValues().trim().split(COMMA))))
+                        : Arrays.asList(expression.getValues().trim().split("\\s*,\\s*"))))
                 .collect(Collectors.toList());
     }
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java
Patch:
@@ -271,6 +271,8 @@ public enum Status {
     NOT_SUPPORT_SSO(10211, "Not support SSO login.", "不支持SSO登录"),
     STATE_CODE_ERROR(10212, "state inconsistency or state and code not pair", "状态码前后不一致或状态码和code不匹配"),
 
+    TASK_INSTANCE_NOT_DYNAMIC_TASK(10213, "task instance {0} is not dynamic", "任务实例[{0}]不是Dynamic类型"),
+
     UDF_FUNCTION_NOT_EXIST(20001, "UDF function not found", "UDF函数不存在"),
     UDF_FUNCTION_EXISTS(20002, "UDF function already exists", "UDF函数已存在"),
     RESOURCE_NOT_EXIST(20004, "resource not exist", "资源不存在"),

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/constants/CommandKeyConstants.java
Patch:
@@ -45,6 +45,8 @@ public class CommandKeyConstants {
 
     public static final String CMD_PARAM_FATHER_PARAMS = "fatherParams";
 
+    public static final String CMD_DYNAMIC_START_PARAMS = "dynamicParams";
+
     /**
      * complement data start date
      */

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/CommandType.java
Patch:
@@ -56,6 +56,7 @@ public enum CommandType {
     RECOVER_WAITING_THREAD(10, "recover waiting thread"),
     RECOVER_SERIAL_WAIT(11, "recover serial wait"),
     EXECUTE_TASK(12, "start a task node in a process instance"),
+    DYNAMIC_GENERATION(13, "dynamic generation"),
     ;
 
     CommandType(int code, String descp) {

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/WorkflowExecutionStatus.java
Patch:
@@ -40,6 +40,7 @@ public enum WorkflowExecutionStatus {
     SERIAL_WAIT(14, "serial wait"),
     READY_BLOCK(15, "ready block"),
     BLOCK(16, "block"),
+    WAIT_TO_RUN(17, "wait to run"),
     ;
 
     private static final Map<Integer, WorkflowExecutionStatus> CODE_MAP = new HashMap<>();

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/placeholder/BusinessTimeUtils.java
Patch:
@@ -59,6 +59,7 @@ public static Map<String, String> getBusinessTime(CommandType commandType, Date
             case RECOVER_SUSPENDED_PROCESS:
             case START_FAILURE_TASK_PROCESS:
             case REPEAT_RUNNING:
+            case DYNAMIC_GENERATION:
             case SCHEDULER:
             default:
                 businessDate = addDays(new Date(), -1);

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/repository/ProcessInstanceDao.java
Patch:
@@ -38,6 +38,8 @@ public interface ProcessInstanceDao {
      */
     public int upsertProcessInstance(ProcessInstance processInstance);
 
+    List<ProcessInstance> queryBatchIds(List<Long> processInstanceIds);
+
     void deleteByIds(List<Integer> needToDeleteWorkflowInstanceIds);
 
     void deleteById(Integer workflowInstanceId);

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/event/TaskTimeoutStateEventHandler.java
Patch:
@@ -37,7 +37,7 @@ public class TaskTimeoutStateEventHandler implements StateEventHandler {
 
     @Override
     public boolean handleStateEvent(WorkflowExecuteRunnable workflowExecuteRunnable,
-                                    StateEvent stateEvent) throws StateEventHandleError {
+                                    StateEvent stateEvent) throws StateEventHandleError, StateEventHandleException {
         TaskStateEvent taskStateEvent = (TaskStateEvent) stateEvent;
 
         TaskMetrics.incTaskInstanceByState("timeout");
@@ -62,6 +62,7 @@ public boolean handleStateEvent(WorkflowExecuteRunnable workflowExecuteRunnable,
                 || TaskTimeoutStrategy.WARNFAILED == taskTimeoutStrategy)) {
             if (taskExecuteRunnableMap.containsKey(taskInstance.getTaskCode())) {
                 taskExecuteRunnableMap.get(taskInstance.getTaskCode()).timeout();
+                workflowExecuteRunnable.taskFinished(taskInstance);
             } else {
                 log.warn(
                         "cannot find the task processor for task {}, so skip task processor action.",

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/execute/MasterTaskExecuteRunnableFactoryBuilder.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.dolphinscheduler.server.master.runner.execute;
 
 import org.apache.dolphinscheduler.server.master.runner.task.dependent.DependentLogicTask;
+import org.apache.dolphinscheduler.server.master.runner.task.dynamic.DynamicLogicTask;
 import org.apache.dolphinscheduler.server.master.runner.task.subworkflow.SubWorkflowLogicTask;
 
 import java.util.Set;
@@ -38,7 +39,8 @@ public class MasterTaskExecuteRunnableFactoryBuilder {
 
     private static final Set<String> ASYNC_TASK_TYPE = Sets.newHashSet(
             DependentLogicTask.TASK_TYPE,
-            SubWorkflowLogicTask.TASK_TYPE);
+            SubWorkflowLogicTask.TASK_TYPE,
+            DynamicLogicTask.TASK_TYPE);
 
     public MasterDelayTaskExecuteRunnableFactory<? extends MasterDelayTaskExecuteRunnable> createWorkerDelayTaskExecuteRunnableFactory(String taskType) {
         if (ASYNC_TASK_TYPE.contains(taskType)) {

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/task/subworkflow/SubWorkflowLogicTask.java
Patch:
@@ -123,8 +123,8 @@ public void kill() {
             log.info("TaskInstance is null");
             return;
         }
-        if (taskInstance.getState().isFinished()) {
-            log.info("The task instance is finished, no need to pause");
+        if (subProcessInstance.getState().isFinished()) {
+            log.info("The subProcessInstance is finished, no need to pause");
             return;
         }
         subProcessInstance.setStateWithDesc(WorkflowExecutionStatus.READY_STOP, "ready stop by kill task");

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/utils/TaskUtils.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.dolphinscheduler.server.master.runner.task.blocking.BlockingLogicTask;
 import org.apache.dolphinscheduler.server.master.runner.task.condition.ConditionLogicTask;
 import org.apache.dolphinscheduler.server.master.runner.task.dependent.DependentLogicTask;
+import org.apache.dolphinscheduler.server.master.runner.task.dynamic.DynamicLogicTask;
 import org.apache.dolphinscheduler.server.master.runner.task.subworkflow.SubWorkflowLogicTask;
 import org.apache.dolphinscheduler.server.master.runner.task.switchtask.SwitchLogicTask;
 
@@ -38,7 +39,8 @@ public class TaskUtils {
             ConditionLogicTask.TASK_TYPE,
             DependentLogicTask.TASK_TYPE,
             SubWorkflowLogicTask.TASK_TYPE,
-            SwitchLogicTask.TASK_TYPE);
+            SwitchLogicTask.TASK_TYPE,
+            DynamicLogicTask.TASK_TYPE);
 
     public boolean isMasterTask(String taskType) {
         return MASTER_TASK_TYPES.contains(taskType);

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessService.java
Patch:
@@ -64,6 +64,9 @@ public interface ProcessService {
     ProcessInstance handleCommand(String host,
                                   Command command) throws CronParseException, CodeGenerateUtils.CodeGenerateException;
 
+    ProcessInstance constructProcessInstance(Command command,
+                                             String host) throws CronParseException, CodeGenerateUtils.CodeGenerateException;
+
     Optional<ProcessInstance> findProcessInstanceDetailById(int processId);
 
     ProcessInstance findProcessInstanceById(int processId);

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/TaskConstants.java
Patch:
@@ -436,6 +436,8 @@ private TaskConstants() {
 
     public static final String TASK_TYPE_SUB_PROCESS = "SUB_PROCESS";
 
+    public static final String TASK_TYPE_DYNAMIC = "DYNAMIC";
+
     public static final String TASK_TYPE_DEPENDENT = "DEPENDENT";
 
     public static final String TASK_TYPE_SQL = "SQL";

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/TaskPluginManager.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.dolphinscheduler.plugin.task.api.parameters.BlockingParameters;
 import org.apache.dolphinscheduler.plugin.task.api.parameters.ConditionsParameters;
 import org.apache.dolphinscheduler.plugin.task.api.parameters.DependentParameters;
+import org.apache.dolphinscheduler.plugin.task.api.parameters.DynamicParameters;
 import org.apache.dolphinscheduler.plugin.task.api.parameters.ParametersNode;
 import org.apache.dolphinscheduler.plugin.task.api.parameters.SubProcessParameters;
 import org.apache.dolphinscheduler.plugin.task.api.parameters.SwitchParameters;
@@ -102,6 +103,8 @@ public AbstractParameters getParameters(ParametersNode parametersNode) {
                 return JSONUtils.parseObject(parametersNode.getTaskParams(), DependentParameters.class);
             case TaskConstants.TASK_TYPE_BLOCKING:
                 return JSONUtils.parseObject(parametersNode.getTaskParams(), BlockingParameters.class);
+            case TaskConstants.TASK_TYPE_DYNAMIC:
+                return JSONUtils.parseObject(parametersNode.getTaskParams(), DynamicParameters.class);
             default:
                 TaskChannel taskChannel = this.getTaskChannelMap().get(taskType);
                 if (Objects.isNull(taskChannel)) {

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/AccessToken.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.dolphinscheduler.dao.entity;
 
 import java.util.Date;
+import java.util.Objects;
 
 import lombok.Data;
 
@@ -73,7 +74,7 @@ public boolean equals(Object o) {
         }
         AccessToken that = (AccessToken) o;
 
-        if (id != that.id) {
+        if (!Objects.equals(id, that.id)) {
             return false;
         }
         if (userId != that.userId) {

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/AlertGroup.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.dolphinscheduler.dao.entity;
 
 import java.util.Date;
+import java.util.Objects;
 
 import lombok.Data;
 
@@ -77,7 +78,7 @@ public boolean equals(Object o) {
 
         AlertGroup that = (AlertGroup) o;
 
-        if (id != that.id) {
+        if (!Objects.equals(id, that.id)) {
             return false;
         }
         if (createUserId != that.createUserId) {

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/DataSource.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.dolphinscheduler.spi.enums.DbType;
 
 import java.util.Date;
+import java.util.Objects;
 
 import lombok.Data;
 
@@ -102,7 +103,7 @@ public boolean equals(Object o) {
 
         DataSource that = (DataSource) o;
 
-        if (id != that.id) {
+        if (!Objects.equals(id, that.id)) {
             return false;
         }
         return name.equals(that.name);

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/ProcessInstanceMap.java
Patch:
@@ -17,6 +17,8 @@
 
 package org.apache.dolphinscheduler.dao.entity;
 
+import java.util.Objects;
+
 import lombok.Data;
 
 import com.baomidou.mybatisplus.annotation.IdType;
@@ -59,7 +61,7 @@ public boolean equals(Object o) {
 
         ProcessInstanceMap that = (ProcessInstanceMap) o;
 
-        if (id != that.id) {
+        if (!Objects.equals(id, that.id)) {
             return false;
         }
         if (parentProcessInstanceId != that.parentProcessInstanceId) {

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/Queue.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.dolphinscheduler.dao.entity;
 
 import java.util.Date;
+import java.util.Objects;
 
 import lombok.Data;
 
@@ -82,7 +83,7 @@ public boolean equals(Object o) {
 
         Queue queue1 = (Queue) o;
 
-        if (id != queue1.id) {
+        if (!Objects.equals(id, queue1.id)) {
             return false;
         }
         if (!queueName.equals(queue1.queueName)) {

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/Resource.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.dolphinscheduler.spi.enums.ResourceType;
 
 import java.util.Date;
+import java.util.Objects;
 
 import lombok.Data;
 import lombok.NoArgsConstructor;
@@ -149,7 +150,7 @@ public boolean equals(Object o) {
 
         Resource resource = (Resource) o;
 
-        if (id != resource.id) {
+        if (!Objects.equals(id, resource.id)) {
             return false;
         }
         return alias.equals(resource.alias);

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/Tenant.java
Patch:
@@ -105,7 +105,7 @@ public boolean equals(Object o) {
 
         Tenant tenant = (Tenant) o;
 
-        return id == tenant.id;
+        return Objects.equals(id, tenant.id);
     }
 
     @Override

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/UdfFunc.java
Patch:
@@ -22,6 +22,7 @@
 
 import java.io.IOException;
 import java.util.Date;
+import java.util.Objects;
 
 import lombok.Data;
 
@@ -124,7 +125,7 @@ public boolean equals(Object o) {
 
         UdfFunc udfFunc = (UdfFunc) o;
 
-        if (id != udfFunc.id) {
+        if (!Objects.equals(id, udfFunc.id)) {
             return false;
         }
         return !(funcName != null ? !funcName.equals(udfFunc.funcName) : udfFunc.funcName != null);

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/WorkflowExecuteRunnable.java
Patch:
@@ -1688,8 +1688,10 @@ private WorkflowExecutionStatus getProcessInstanceState(ProcessInstance instance
         if (state == WorkflowExecutionStatus.READY_STOP) {
             List<TaskInstance> killList = getCompleteTaskByState(TaskExecutionStatus.KILL);
             List<TaskInstance> failList = getCompleteTaskByState(TaskExecutionStatus.FAILURE);
+            List<TaskInstance> stopList = getCompleteTaskByState(TaskExecutionStatus.STOP);
             WorkflowExecutionStatus executionStatus;
-            if (CollectionUtils.isNotEmpty(killList) || CollectionUtils.isNotEmpty(failList) || !isComplementEnd()) {
+            if (CollectionUtils.isNotEmpty(stopList) || CollectionUtils.isNotEmpty(killList)
+                    || CollectionUtils.isNotEmpty(failList) || !isComplementEnd()) {
                 executionStatus = WorkflowExecutionStatus.STOP;
             } else {
                 executionStatus = WorkflowExecutionStatus.SUCCESS;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProcessDefinitionServiceImpl.java
Patch:
@@ -26,7 +26,6 @@
 import static org.apache.dolphinscheduler.api.constants.ApiFuncIdentificationConstant.WORKFLOW_DEFINITION;
 import static org.apache.dolphinscheduler.api.constants.ApiFuncIdentificationConstant.WORKFLOW_DEFINITION_DELETE;
 import static org.apache.dolphinscheduler.api.constants.ApiFuncIdentificationConstant.WORKFLOW_DEFINITION_EXPORT;
-import static org.apache.dolphinscheduler.api.constants.ApiFuncIdentificationConstant.WORKFLOW_EXPORT;
 import static org.apache.dolphinscheduler.api.constants.ApiFuncIdentificationConstant.WORKFLOW_IMPORT;
 import static org.apache.dolphinscheduler.api.constants.ApiFuncIdentificationConstant.WORKFLOW_ONLINE_OFFLINE;
 import static org.apache.dolphinscheduler.api.constants.ApiFuncIdentificationConstant.WORKFLOW_SWITCH_TO_THIS_VERSION;
@@ -1259,7 +1258,7 @@ public Map<String, Object> importProcessDefinition(User loginUser, long projectC
         String dagDataScheduleJson = FileUtils.file2String(file);
         List<DagDataSchedule> dagDataScheduleList = JSONUtils.toList(dagDataScheduleJson, DagDataSchedule.class);
         Project project = projectMapper.queryByCode(projectCode);
-        result = projectService.checkProjectAndAuth(loginUser, project, projectCode, WORKFLOW_EXPORT);
+        result = projectService.checkProjectAndAuth(loginUser, project, projectCode, WORKFLOW_IMPORT);
         if (result.get(Constants.STATUS) != Status.SUCCESS) {
             return result;
         }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProcessDefinitionServiceImpl.java
Patch:
@@ -1939,7 +1939,7 @@ public Map<String, Object> viewTree(User loginUser, long projectCode, long code,
             parentTreeViewDto.getInstances()
                     .add(new Instance(processInstance.getId(), processInstance.getName(),
                             processInstance.getProcessDefinitionCode(),
-                            "", processInstance.getState().toString(), processInstance.getStartTime(), endTime,
+                            "", processInstance.getState().name(), processInstance.getStartTime(), endTime,
                             processInstance.getHost(),
                             DateUtils.format2Readable(endTime.getTime() - processInstance.getStartTime().getTime())));
         }
@@ -1984,7 +1984,7 @@ public Map<String, Object> viewTree(User loginUser, long projectCode, long code,
                         }
                         treeViewDto.getInstances().add(new Instance(taskInstance.getId(), taskInstance.getName(),
                                 taskInstance.getTaskCode(),
-                                taskInstance.getTaskType(), taskInstance.getState().toString(),
+                                taskInstance.getTaskType(), taskInstance.getState().name(),
                                 taskInstance.getStartTime(), taskInstance.getEndTime(),
                                 taskInstance.getHost(),
                                 DateUtils.format2Readable(endTime.getTime() - startTime.getTime()), subProcessCode));

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/k8s/AbstractK8sTask.java
Patch:
@@ -48,8 +48,9 @@ public void handle(TaskCallBack taskCallBack) throws TaskException {
             setExitStatusCode(response.getExitStatusCode());
             setAppIds(response.getAppIds());
         } catch (Exception e) {
+            log.error("k8s task submit failed with error", e);
             exitStatusCode = -1;
-            throw new TaskException("k8s process failure", e);
+            throw new TaskException("Execute k8s task error", e);
         }
     }
 

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/k8s/K8sTaskMainParameters.java
Patch:
@@ -17,9 +17,11 @@
 
 package org.apache.dolphinscheduler.plugin.task.api.k8s;
 
+import java.util.List;
 import java.util.Map;
 
 import lombok.Data;
+import io.fabric8.kubernetes.api.model.NodeSelectorRequirement;
 
 /**
  * k8s task parameters
@@ -36,4 +38,5 @@ public class K8sTaskMainParameters {
     private double minMemorySpace;
     private Map<String, String> paramsMap;
     private Map<String, String> labelMap;
+    private List<NodeSelectorRequirement> nodeSelectorRequirements;
 }

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/parameters/K8sTaskParameters.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.dolphinscheduler.plugin.task.api.parameters;
 
 import org.apache.dolphinscheduler.plugin.task.api.model.Label;
+import org.apache.dolphinscheduler.plugin.task.api.model.NodeSelectorExpression;
 import org.apache.dolphinscheduler.plugin.task.api.model.ResourceInfo;
 
 import org.apache.commons.lang3.StringUtils;
@@ -37,6 +38,7 @@ public class K8sTaskParameters extends AbstractParameters {
     private String namespace;
     private String command;
     private List<Label> customizedLabels;
+    private List<NodeSelectorExpression> nodeSelectors;
     private String args;
     private double minCpuCores;
     private double minMemorySpace;

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/processor/MasterTaskDispatchProcessor.java
Patch:
@@ -99,6 +99,7 @@ public void process(Channel channel, Message message) {
             }
         } catch (Exception ex) {
             log.error("Handle task dispatch request error, command: {}", taskDispatchRequest, ex);
+            MasterTaskExecutionContextHolder.removeTaskExecutionContext(taskExecutionContext.getTaskInstanceId());
             sendDispatchFailedResult(channel, message, taskExecutionContext, ex);
         } finally {
             LogUtils.removeWorkflowAndTaskInstanceIdMDC();

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterDelayTaskExecuteRunnableDelayQueueLooper.java
Patch:
@@ -19,6 +19,8 @@
 
 import org.apache.dolphinscheduler.common.thread.BaseDaemonThread;
 import org.apache.dolphinscheduler.server.master.runner.execute.MasterDelayTaskExecuteRunnable;
+import org.apache.dolphinscheduler.server.master.runner.execute.MasterTaskExecuteRunnableHolder;
+import org.apache.dolphinscheduler.server.master.runner.execute.MasterTaskExecuteRunnableThreadPool;
 
 import java.util.concurrent.atomic.AtomicBoolean;
 
@@ -62,6 +64,7 @@ public void run() {
                 final MasterDelayTaskExecuteRunnable masterDelayTaskExecuteRunnable =
                         masterDelayTaskExecuteRunnableDelayQueue.takeMasterDelayTaskExecuteRunnable();
                 masterTaskExecuteRunnableThreadPool.submitMasterTaskExecuteRunnable(masterDelayTaskExecuteRunnable);
+                MasterTaskExecuteRunnableHolder.putMasterTaskExecuteRunnable(masterDelayTaskExecuteRunnable);
             } catch (InterruptedException ex) {
                 Thread.currentThread().interrupt();
                 log.warn("MasterDelayTaskExecuteRunnableDelayQueueLooper has been interrupted, will stop loop");

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/execute/AsyncTaskCallbackFunctionImpl.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.dolphinscheduler.server.master.runner.execute;
 
-import org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContextCacheManager;
 import org.apache.dolphinscheduler.plugin.task.api.enums.TaskExecutionStatus;
 import org.apache.dolphinscheduler.plugin.task.api.log.TaskInstanceLogHeader;
 
@@ -54,8 +53,9 @@ public void executeThrowing(Throwable throwable) {
 
     private void executeFinished() {
         TaskInstanceLogHeader.printFinalizeTaskHeader();
-        TaskExecutionContextCacheManager.removeByTaskInstanceId(
-                asyncMasterDelayTaskExecuteRunnable.getTaskExecutionContext().getTaskInstanceId());
+        int taskInstanceId = asyncMasterDelayTaskExecuteRunnable.getTaskExecutionContext().getTaskInstanceId();
+        MasterTaskExecutionContextHolder.removeTaskExecutionContext(taskInstanceId);
+        MasterTaskExecuteRunnableHolder.removeMasterTaskExecuteRunnable(taskInstanceId);
         log.info("Task execute finished, removed the TaskExecutionContext");
         asyncMasterDelayTaskExecuteRunnable.sendTaskResult();
         log.info(

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/execute/MasterTaskExecuteRunnable.java
Patch:
@@ -22,7 +22,6 @@
 import org.apache.dolphinscheduler.common.log.remote.RemoteLogUtils;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
 import org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContext;
-import org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContextCacheManager;
 import org.apache.dolphinscheduler.plugin.task.api.enums.TaskExecutionStatus;
 import org.apache.dolphinscheduler.plugin.task.api.log.TaskInstanceLogHeader;
 import org.apache.dolphinscheduler.plugin.task.api.utils.LogUtils;
@@ -59,7 +58,7 @@ public MasterTaskExecuteRunnable(TaskExecutionContext taskExecutionContext,
     protected void afterThrowing(Throwable throwable) {
         try {
             cancelTask();
-            log.info("Get a exception when execute the task, canceled the task");
+            log.error("Get a exception when execute the task, canceled the task", throwable);
         } catch (Exception e) {
             log.error("Cancel task failed,", e);
         }
@@ -68,7 +67,8 @@ protected void afterThrowing(Throwable throwable) {
         log.info(
                 "Get a exception when execute the task, sent the task execute result to master, the current task execute result is {}",
                 taskExecutionContext.getCurrentExecutionStatus());
-        TaskExecutionContextCacheManager.removeByTaskInstanceId(taskExecutionContext.getTaskInstanceId());
+        MasterTaskExecutionContextHolder.removeTaskExecutionContext(taskExecutionContext.getTaskInstanceId());
+        MasterTaskExecuteRunnableHolder.removeMasterTaskExecuteRunnable(taskExecutionContext.getTaskInstanceId());
         log.info("Get a exception when execute the task, removed the TaskExecutionContext");
     }
 

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/execute/SyncMasterDelayTaskExecuteRunnable.java
Patch:
@@ -55,6 +55,8 @@ protected void afterExecute() throws MasterTaskExecuteException {
                 "Execute task finished, will send the task execute result to master, the current task execute result is {}",
                 taskExecutionContext.getCurrentExecutionStatus().name());
         closeLogAppender();
+        MasterTaskExecutionContextHolder.removeTaskExecutionContext(taskExecutionContext.getTaskInstanceId());
+        MasterTaskExecuteRunnableHolder.removeMasterTaskExecuteRunnable(taskExecutionContext.getTaskInstanceId());
     }
 
 }

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/OSUtils.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.dolphinscheduler.common.utils;
 
 import org.apache.dolphinscheduler.common.constants.Constants;
+import org.apache.dolphinscheduler.common.constants.TenantConstants;
 import org.apache.dolphinscheduler.common.shell.ShellExecutor;
 
 import oshi.SystemInfo;
@@ -386,6 +387,8 @@ public static String getSudoCmd(String tenantCode, String command) {
         if (!isSudoEnable() || StringUtils.isEmpty(tenantCode)) {
             return command;
         }
+        tenantCode = TenantConstants.DEFAULT_TENANT_CODE.equals(tenantCode) ? TenantConstants.BOOTSTRAPT_SYSTEM_USER
+                : tenantCode;
         return String.format("sudo -u %s %s", tenantCode, command);
     }
 

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/AbstractTask.java
Patch:
@@ -38,7 +38,7 @@ public abstract class AbstractTask {
 
     protected final Logger log = LoggerFactory.getLogger(AbstractTask.class);
 
-    public String rgex = "['\"]*\\$\\{(.*?)\\}['\"]*";
+    public String rgex = "['\"]\\$\\{(.*?)}['\"]|\\$\\{(.*?)}";
 
     /**
      * varPool string

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/processor/MasterTaskPauseProcessor.java
Patch:
@@ -52,9 +52,9 @@ public void process(Channel channel, Message message) {
             return;
         }
         TaskExecutionContext taskExecutionContext = masterTaskExecuteRunnable.getTaskExecutionContext();
-        try (
-                LogUtils.MDCAutoClosableContext mdcAutoClosableContext = LogUtils.setWorkflowAndTaskInstanceIDMDC(
-                        taskExecutionContext.getProcessInstanceId(), taskExecutionContext.getTaskInstanceId())) {
+        try {
+            LogUtils.setWorkflowAndTaskInstanceIDMDC(taskExecutionContext.getProcessInstanceId(),
+                    taskExecutionContext.getTaskInstanceId());
             masterTaskExecuteRunnable.pauseTask();
         } catch (MasterTaskExecuteException e) {
             log.error("Pause MasterTaskExecuteRunnable failed", e);

File: dolphinscheduler-task-plugin/dolphinscheduler-task-seatunnel/src/main/java/org/apache/dolphinscheduler/plugin/task/seatunnel/Constants.java
Patch:
@@ -26,6 +26,8 @@ private Constants() {
     public static final String CONFIG_OPTIONS = "--config";
     public static final String DEPLOY_MODE_OPTIONS = "--deploy-mode";
     public static final String MASTER_OPTIONS = "--master";
-    public static final String QUEUE_OPTIONS = "--queue";
+    public static final String STARTUP_SCRIPT_SPARK = "spark";
+    public static final String STARTUP_SCRIPT_FLINK = "flink";
+    public static final String STARTUP_SCRIPT_SEATUNNEL = "seatunnel";
 
 }

File: dolphinscheduler-task-plugin/dolphinscheduler-task-seatunnel/src/main/java/org/apache/dolphinscheduler/plugin/task/seatunnel/SeatunnelTask.java
Patch:
@@ -51,6 +51,8 @@
  */
 public class SeatunnelTask extends AbstractRemoteTask {
 
+    private static final String SEATUNNEL_BIN_DIR = "${SEATUNNEL_HOME}/bin/";
+
     /**
      * seatunnel parameters
      */
@@ -139,7 +141,7 @@ public void cancelApplication() throws TaskException {
     private String buildCommand() throws Exception {
 
         List<String> args = new ArrayList<>();
-        args.add(seatunnelParameters.getEngine().getCommand());
+        args.add(SEATUNNEL_BIN_DIR + seatunnelParameters.getStartupScript());
         args.addAll(buildOptions());
 
         String command = String.join(" ", args);

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/WorkflowExecuteRunnable.java
Patch:
@@ -1913,8 +1913,6 @@ public void submitStandByTask() throws StateEventHandleException {
             if (DependResult.SUCCESS == dependResult) {
                 log.info("The dependResult of task {} is success, so ready to submit to execute", task.getName());
                 if (!executeTask(task)) {
-                    // todo: don't ste 0 here
-                    task.setId(0);
                     this.taskFailedSubmit = true;
                     // Remove and add to complete map and error map
                     if (!removeTaskFromStandbyList(task)) {

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProcessInstanceServiceImpl.java
Patch:
@@ -496,6 +496,7 @@ private void addDependResultForTaskList(User loginUser, List<TaskInstance> taskI
             if (TASK_TYPE_DEPENDENT.equalsIgnoreCase(taskInstance.getTaskType())) {
                 log.info("DEPENDENT type task instance need to set dependent result, taskCode:{}, taskInstanceId:{}",
                         taskInstance.getTaskCode(), taskInstance.getId());
+                // TODO The result of dependent item should not be obtained from the log, waiting for optimization.
                 Result<ResponseTaskLog> logResult = loggerService.queryLog(loginUser,
                         taskInstance.getId(), Constants.LOG_QUERY_SKIP_LINE_NUMBER, Constants.LOG_QUERY_LIMIT);
                 if (logResult.getCode() == Status.SUCCESS.ordinal()) {

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/enums/TaskExecutionStatus.java
Patch:
@@ -27,6 +27,7 @@ public enum TaskExecutionStatus {
     SUBMITTED_SUCCESS(0, "submit success"),
     RUNNING_EXECUTION(1, "running"),
     PAUSE(3, "pause"),
+    STOP(5, "stop"),
     FAILURE(6, "failure"),
     SUCCESS(7, "success"),
     NEED_FAULT_TOLERANCE(8, "need fault tolerance"),

File: dolphinscheduler-storage-plugin/dolphinscheduler-storage-hdfs/src/main/java/org/apache/dolphinscheduler/plugin/storage/hdfs/HdfsStorageOperator.java
Patch:
@@ -312,7 +312,7 @@ public String getFileName(ResourceType resourceType, String tenantCode, String f
     }
 
     @Override
-    public void download(String bucketName, String srcHdfsFilePath, String dstFile, boolean deleteSource,
+    public void download(String tenantCode, String srcHdfsFilePath, String dstFile, boolean deleteSource,
                          boolean overwrite) throws IOException {
         copyHdfsToLocal(srcHdfsFilePath, dstFile, deleteSource, overwrite);
     }

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/k8s/K8sTaskMainParameters.java
Patch:
@@ -35,4 +35,5 @@ public class K8sTaskMainParameters {
     private double minCpuCores;
     private double minMemorySpace;
     private Map<String, String> paramsMap;
+    private Map<String, String> labelMap;
 }

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/k8s/impl/K8sTaskExecutor.java
Patch:
@@ -94,7 +94,7 @@ public Job buildK8sJob(K8sTaskMainParameters k8STaskMainParameters) {
         Map<String, Quantity> limitRes = new HashMap<>();
         limitRes.put(MEMORY, new Quantity(String.format("%s%s", limitPodMem, MI)));
         limitRes.put(CPU, new Quantity(String.valueOf(limitPodCpu)));
-        Map<String, String> labelMap = new HashMap<>();
+        Map<String, String> labelMap = k8STaskMainParameters.getLabelMap();
         labelMap.put(LAYER_LABEL, LAYER_LABEL_VALUE);
         labelMap.put(NAME_LABEL, k8sJobName);
         EnvVar taskInstanceIdVar = new EnvVar(TASK_INSTANCE_ID, taskInstanceId, null);

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/parameters/K8sTaskParameters.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.dolphinscheduler.plugin.task.api.parameters;
 
+import org.apache.dolphinscheduler.plugin.task.api.model.Label;
 import org.apache.dolphinscheduler.plugin.task.api.model.ResourceInfo;
 
 import org.apache.commons.lang3.StringUtils;
@@ -35,6 +36,7 @@ public class K8sTaskParameters extends AbstractParameters {
     private String image;
     private String namespace;
     private String command;
+    private List<Label> customizedLabels;
     private String args;
     private double minCpuCores;
     private double minMemorySpace;

File: dolphinscheduler-api-test/dolphinscheduler-api-test-case/src/test/java/org/apache/dolphinscheduler/api.test/utils/JSONUtils.java
Patch:
@@ -26,6 +26,8 @@
 
 import org.apache.dolphinscheduler.api.test.core.Constants;
 
+import org.apache.commons.lang3.StringUtils;
+
 import java.io.IOException;
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
@@ -37,7 +39,6 @@
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-import org.testcontainers.shaded.org.apache.commons.lang.StringUtils;
 
 import com.fasterxml.jackson.core.JsonGenerator;
 import com.fasterxml.jackson.core.JsonParser;

File: dolphinscheduler-api-test/dolphinscheduler-api-test-core/src/main/java/org/apache/dolphinscheduler/api/test/core/DolphinSchedulerExtension.java
Patch:
@@ -30,6 +30,7 @@
 import org.junit.jupiter.api.extension.AfterAllCallback;
 import org.junit.jupiter.api.extension.BeforeAllCallback;
 import org.junit.jupiter.api.extension.ExtensionContext;
+import org.slf4j.Logger;
 import org.testcontainers.containers.DockerComposeContainer;
 import org.testcontainers.containers.wait.strategy.Wait;
 

File: dolphinscheduler-task-plugin/dolphinscheduler-task-remoteshell/src/test/java/org/apache/dolphinscheduler/plugin/task/remoteshell/RemoteExecutorTest.java
Patch:
@@ -39,12 +39,14 @@
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
 import org.mockito.MockedStatic;
 import org.mockito.Mockito;
 import org.mockito.junit.jupiter.MockitoExtension;
 
+@Disabled
 @ExtendWith(MockitoExtension.class)
 public class RemoteExecutorTest {
 

File: dolphinscheduler-task-plugin/dolphinscheduler-task-remoteshell/src/test/java/org/apache/dolphinscheduler/plugin/task/remoteshell/RemoteShellTaskTest.java
Patch:
@@ -36,12 +36,14 @@
 
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
 import org.mockito.MockedStatic;
 import org.mockito.Mockito;
 import org.mockito.junit.jupiter.MockitoExtension;
 
+@Disabled
 @ExtendWith(MockitoExtension.class)
 public class RemoteShellTaskTest {
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/python/PythonGateway.java
Patch:
@@ -404,7 +404,8 @@ public void execWorkflowInstance(String userName,
                 DEFAULT_DRY_RUN,
                 DEFAULT_TEST_FLAG,
                 COMPLEMENT_DEPENDENT_MODE,
-                processDefinition.getVersion());
+                processDefinition.getVersion(),
+                false);
     }
 
     // side object

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ExecutorService.java
Patch:
@@ -71,7 +71,8 @@ Map<String, Object> execProcessInstance(User loginUser, long projectCode,
                                             Integer timeout,
                                             Map<String, String> startParams, Integer expectedParallelismNumber,
                                             int dryRun, int testFlag,
-                                            ComplementDependentMode complementDependentMode, Integer version);
+                                            ComplementDependentMode complementDependentMode, Integer version,
+                                            boolean allLevelDependent);
 
     /**
      * check whether the process definition can be executed

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/k8s/AbstractK8sTaskExecutor.java
Patch:
@@ -25,19 +25,22 @@
 import org.apache.dolphinscheduler.plugin.task.api.utils.K8sUtils;
 
 import org.slf4j.Logger;
+import org.yaml.snakeyaml.Yaml;
 
 public abstract class AbstractK8sTaskExecutor {
 
     protected Logger log;
     protected TaskExecutionContext taskRequest;
     protected K8sUtils k8sUtils;
     protected StringBuilder logStringBuffer;
+    protected Yaml yaml;
 
     protected AbstractK8sTaskExecutor(Logger log, TaskExecutionContext taskRequest) {
         this.log = log;
         this.taskRequest = taskRequest;
         this.k8sUtils = new K8sUtils();
         this.logStringBuffer = new StringBuilder();
+        this.yaml = new Yaml();
     }
 
     public abstract TaskResponse run(String k8sParameterStr) throws Exception;

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/k8s/K8sTaskMainParameters.java
Patch:
@@ -29,6 +29,7 @@ public class K8sTaskMainParameters {
 
     private String image;
     private String command;
+    private String args;
     private String namespaceName;
     private String clusterName;
     private double minCpuCores;

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/parameters/K8sTaskParameters.java
Patch:
@@ -35,6 +35,7 @@ public class K8sTaskParameters extends AbstractParameters {
     private String image;
     private String namespace;
     private String command;
+    private String args;
     private double minCpuCores;
     private double minMemorySpace;
 

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/test/java/org/apache/dolphinscheduler/plugin/task/api/k8s/K8sTaskExecutorTest.java
Patch:
@@ -62,7 +62,7 @@ public void before() {
         k8sTaskMainParameters.setClusterName(clusterName);
         k8sTaskMainParameters.setMinCpuCores(minCpuCores);
         k8sTaskMainParameters.setMinMemorySpace(minMemorySpace);
-        k8sTaskMainParameters.setCommand("echo 'hello world'");
+        k8sTaskMainParameters.setCommand("[\"perl\" ,\"-Mbignum=bpi\", \"-wle\", \"print bpi(2000)\"]");
         job = k8sTaskExecutor.buildK8sJob(k8sTaskMainParameters);
     }
     @Test

File: dolphinscheduler-task-plugin/dolphinscheduler-task-k8s/src/main/java/org/apache/dolphinscheduler/plugin/task/k8s/K8sTask.java
Patch:
@@ -83,6 +83,7 @@ protected String buildCommand() {
         k8sTaskMainParameters.setMinMemorySpace(k8sTaskParameters.getMinMemorySpace());
         k8sTaskMainParameters.setParamsMap(ParamUtils.convert(paramsMap));
         k8sTaskMainParameters.setCommand(k8sTaskParameters.getCommand());
+        k8sTaskMainParameters.setArgs(k8sTaskParameters.getArgs());
         return JSONUtils.toJsonString(k8sTaskMainParameters);
     }
 

File: dolphinscheduler-api-test/dolphinscheduler-api-test-core/src/main/java/org/apache/dolphinscheduler/api/test/core/DolphinSchedulerExtension.java
Patch:
@@ -71,7 +71,7 @@ private DockerComposeContainer<?> createDockerCompose(ExtensionContext context)
         compose = new DockerComposeContainer<>(files)
             .withPull(true)
             .withTailChildContainers(true)
-            .withLogConsumer(serviceName, outputFrame -> LOGGER.info(outputFrame.getUtf8String()))
+            .withLogConsumer(serviceName, outputFrame -> log.info(outputFrame.getUtf8String()))
             .waitingFor(serviceName, Wait.forHealthcheck().withStartupTimeout(Duration.ofSeconds(Constants.DOCKER_COMPOSE_DEFAULT_TIMEOUT)));
 
         return compose;

File: dolphinscheduler-worker/src/main/java/org/apache/dolphinscheduler/server/worker/config/WorkerConfig.java
Patch:
@@ -91,7 +91,7 @@ private void printConfig() {
         log.info("Worker config: maxCpuLoadAvg -> {}", maxCpuLoadAvg);
         log.info("Worker config: reservedMemory -> {}", reservedMemory);
         log.info("Worker config: registryDisconnectStrategy -> {}", registryDisconnectStrategy);
-        log.info("Worker config: workerAddress -> {}", registryDisconnectStrategy);
+        log.info("Worker config: workerAddress -> {}", workerAddress);
         log.info("Worker config: workerRegistryPath: {}", workerRegistryPath);
         log.info("Worker config: taskExecuteThreadsFullPolicy: {}", taskExecuteThreadsFullPolicy);
     }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProcessInstanceService.java
Patch:
@@ -148,7 +148,6 @@ Map<String, Object> querySubProcessInstanceByTaskId(User loginUser,
      * @param globalParams global params
      * @param locations locations for nodes
      * @param timeout timeout
-     * @param tenantCode tenantCode
      * @return update result code
      */
     Map<String, Object> updateProcessInstance(User loginUser,
@@ -160,8 +159,7 @@ Map<String, Object> updateProcessInstance(User loginUser,
                                               Boolean syncDefine,
                                               String globalParams,
                                               String locations,
-                                              int timeout,
-                                              String tenantCode);
+                                              int timeout);
 
     /**
      * query parent process instance detail info by sub process instance id

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/ProcessInstanceControllerTest.java
Patch:
@@ -108,7 +108,7 @@ public void testUpdateProcessInstance() throws Exception {
         Mockito.when(processInstanceService
                 .updateProcessInstance(Mockito.any(), Mockito.anyLong(), Mockito.anyInt(), Mockito.anyString(),
                         Mockito.anyString(), Mockito.anyString(), Mockito.anyBoolean(), Mockito.anyString(),
-                        Mockito.anyString(), Mockito.anyInt(), Mockito.anyString()))
+                        Mockito.anyString(), Mockito.anyInt()))
                 .thenReturn(mockResult);
 
         String json =

File: dolphinscheduler-worker/src/main/java/org/apache/dolphinscheduler/server/worker/task/WorkerHeartBeatTask.java
Patch:
@@ -94,10 +94,10 @@ public int getServerStatus(double cpuUsagePercentage,
                                double reservedMemory,
                                int workerExecThreadCount,
                                int workerWaitingTaskCount) {
-        if (cpuUsagePercentage > maxCpuUsePercentage || memoryUsagePercentage < reservedMemory) {
+        if (cpuUsagePercentage > maxCpuUsePercentage || (1 - memoryUsagePercentage) < reservedMemory) {
             log.warn(
-                    "current cpu load average {} is higher than {} max.cpuload.avg or available memory {} is lower than {} reserved.memory={}",
-                    cpuUsagePercentage, maxCpuUsePercentage, memoryUsagePercentage, reservedMemory);
+                    "current cpu load average {} is higher than {} or available memory {} is lower than {}",
+                    cpuUsagePercentage, maxCpuUsePercentage, 1 - memoryUsagePercentage, reservedMemory);
             return Constants.ABNORMAL_NODE_STATUS;
         } else if (workerWaitingTaskCount > workerExecThreadCount) {
             log.warn("current waiting task count {} is large than worker thread count {}, worker is busy",

File: dolphinscheduler-e2e/dolphinscheduler-e2e-case/src/test/java/org/apache/dolphinscheduler/e2e/pages/resource/ResourcePage.java
Patch:
@@ -50,20 +50,23 @@ public <T extends ResourcePage.Tab> T goToTab(Class<T> tab) {
             new WebDriverWait(driver, 10).until(ExpectedConditions.urlContains("/resource"));
             new WebDriverWait(driver, 10).until(ExpectedConditions.elementToBeClickable(fileManageTab));
             ((JavascriptExecutor) driver).executeScript("arguments[0].click();", fileManageTab());
+            new WebDriverWait(driver, 10).until(ExpectedConditions.urlContains("/file-manage"));
             return tab.cast(new FileManagePage(driver));
         }
 
         if (tab == UdfManagePage.class) {
             new WebDriverWait(driver, 10).until(ExpectedConditions.urlContains("/resource"));
             new WebDriverWait(driver, 10).until(ExpectedConditions.elementToBeClickable(udfManageTab));
             ((JavascriptExecutor) driver).executeScript("arguments[0].click();", udfManageTab());
+            new WebDriverWait(driver, 10).until(ExpectedConditions.urlContains("/resource-manage"));
             return tab.cast(new UdfManagePage(driver));
         }
 
         if (tab == FunctionManagePage.class) {
             new WebDriverWait(driver, 10).until(ExpectedConditions.urlContains("/resource"));
             new WebDriverWait(driver, 10).until(ExpectedConditions.elementToBeClickable(functionManageTab));
             ((JavascriptExecutor) driver).executeScript("arguments[0].click();", functionManageTab());
+            new WebDriverWait(driver, 10).until(ExpectedConditions.urlContains("/function-manage"));
             return tab.cast(new FunctionManagePage(driver));
         }
 

File: dolphinscheduler-storage-plugin/dolphinscheduler-storage-hdfs/src/main/java/org/apache/dolphinscheduler/plugin/storage/hdfs/HdfsStorageOperator.java
Patch:
@@ -183,9 +183,9 @@ public Configuration getConfiguration() {
      * @return DefaultFS
      */
     public String getDefaultFS() {
-        String defaultFS = getConfiguration().get(Constants.FS_DEFAULT_FS);
+        String defaultFS = hdfsProperties.getDefaultFS();
         if (StringUtils.isBlank(defaultFS)) {
-            defaultFS = hdfsProperties.getDefaultFS();
+            defaultFS = getConfiguration().get(Constants.HDFS_DEFAULT_FS);
         }
         return defaultFS;
     }

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/service/MasterFailoverService.java
Patch:
@@ -91,7 +91,7 @@ public void checkMasterFailover() {
     }
 
     public void failoverMaster(String masterHost) {
-        String failoverPath = RegistryNodeType.MASTER_FAILOVER_LOCK + "/" + masterHost;
+        String failoverPath = RegistryNodeType.MASTER_FAILOVER_LOCK.getRegistryPath() + "/" + masterHost;
         try {
             registryClient.getLock(failoverPath);
             doFailoverMaster(masterHost);

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-oracle/src/main/java/org/apache/dolphinscheduler/plugin/datasource/oracle/param/OracleDataSourceProcessor.java
Patch:
@@ -56,6 +56,7 @@ public BaseDataSourceParamDTO createDatasourceParamDTO(String connectionJson) {
         oracleDatasourceParamDTO.setDatabase(connectionParams.getDatabase());
         oracleDatasourceParamDTO.setUserName(connectionParams.getUser());
         oracleDatasourceParamDTO.setOther(connectionParams.getOther());
+        oracleDatasourceParamDTO.setConnectType(connectionParams.getConnectType());
 
         String hostSeperator = Constants.DOUBLE_SLASH;
         if (DbConnectType.ORACLE_SID.equals(connectionParams.connectType)) {

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProcessInstanceServiceTest.java
Patch:
@@ -465,7 +465,7 @@ public void testQueryTaskListByProcessId() throws IOException {
     public void testParseLogForDependentResult() throws IOException {
         String logString =
                 "[INFO] 2019-03-19 17:11:08.475 org.apache.dolphinscheduler.server.worker.log.TaskLogger:[172]"
-                        + " - [taskAppId=TASK_223_10739_452334] dependent item complete :|| 223-ALL-day-last1Day,SUCCESS\n"
+                        + " - [taskAppId=TASK_223_10739_452334] dependent item complete, :|| dependentKey: 223-ALL-day-last1Day, result: SUCCESS, dependentDate: Wed Mar 19 17:10:36 CST 2019\n"
                         + "[INFO] 2019-03-19 17:11:08.476 org.apache.dolphinscheduler.server.worker.runner.TaskScheduleThread:[172]"
                         + " - task : 223_10739_452334 exit status code : 0\n"
                         + "[root@node2 current]# ";

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/task/DependentTaskProcessor.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.dolphinscheduler.server.master.runner.task;
 
+import static org.apache.dolphinscheduler.common.constants.Constants.DEPENDENT_SPLIT;
 import static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.TASK_TYPE_DEPENDENT;
 
 import org.apache.dolphinscheduler.common.constants.Constants;
@@ -255,8 +256,8 @@ private boolean allDependentTaskFinish() {
                 if (!dependResultMap.containsKey(entry.getKey())) {
                     dependResultMap.put(entry.getKey(), entry.getValue());
                     // save depend result to log
-                    log.info("dependent item complete, dependentKey: {}, result: {}, dependentDate: {}",
-                            entry.getKey(), entry.getValue(), dependentDate);
+                    log.info("dependent item complete, {} dependentKey: {}, result: {}, dependentDate: {}",
+                            DEPENDENT_SPLIT, entry.getKey(), entry.getValue(), dependentDate);
                 }
             }
             if (!dependentExecute.finish(dependentDate, testFlag)) {

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/dto/resources/filter/IFilter.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.dolphinscheduler.api.dto.resources.filter;
 
-import org.apache.dolphinscheduler.dao.entity.Resource;
+import org.apache.dolphinscheduler.plugin.storage.api.StorageEntity;
 
 import java.util.List;
 
@@ -25,5 +25,5 @@
  */
 public interface IFilter {
 
-    List<Resource> filter();
+    List<StorageEntity> filter();
 }

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/task/BaseTaskProcessor.java
Patch:
@@ -606,9 +606,8 @@ public Map<String, String> getResourceFullNames(TaskInstance taskInstance) {
         if (baseParam != null) {
             List<ResourceInfo> projectResourceFiles = baseParam.getResourceFilesList();
             if (CollectionUtils.isNotEmpty(projectResourceFiles)) {
-                // TODO: Modify this part to accomodate(migrate) oldversionresources in the future.
                 projectResourceFiles.forEach(file -> resourcesMap.put(file.getResourceName(),
-                        processService.queryTenantCodeByResName(file.getResourceName(), ResourceType.FILE)));
+                        storageOperate.getResourceFileName(file.getResourceName())));
             }
         }
 

File: dolphinscheduler-service/src/test/java/org/apache/dolphinscheduler/service/process/ProcessServiceTest.java
Patch:
@@ -714,13 +714,11 @@ public void testUpdateResourceInfo() throws Exception {
         // test normal situation
         ResourceInfo resourceInfoNormal = new ResourceInfo();
         resourceInfoNormal.setId(1);
-        resourceInfoNormal.setRes("test.txt");
         resourceInfoNormal.setResourceName("/test.txt");
 
         ResourceInfo updatedResourceInfo3 = processService.updateResourceInfo(0, resourceInfoNormal);
 
         Assertions.assertEquals(-1, updatedResourceInfo3.getId().intValue());
-        Assertions.assertEquals("test.txt", updatedResourceInfo3.getRes());
         Assertions.assertEquals("/test.txt", updatedResourceInfo3.getResourceName());
 
     }

File: dolphinscheduler-task-plugin/dolphinscheduler-task-dataquality/src/main/java/org/apache/dolphinscheduler/plugin/task/dq/DataQualityTask.java
Patch:
@@ -180,11 +180,11 @@ protected String buildCommand() {
         return command;
     }
 
-    @Override
     protected void setMainJarName() {
         ResourceInfo mainJar = new ResourceInfo();
         String basePath = System.getProperty("user.dir").replace(File.separator + "bin", "");
-        mainJar.setRes(basePath + File.separator + "libs" + File.separator + CommonUtils.getDataQualityJarName());
+        mainJar.setResourceName(
+                basePath + File.separator + "libs" + File.separator + CommonUtils.getDataQualityJarName());
         dataQualityParameters.getSparkParameters().setMainJar(mainJar);
     }
 

File: dolphinscheduler-task-plugin/dolphinscheduler-task-dataquality/src/main/java/org/apache/dolphinscheduler/plugin/task/dq/utils/SparkArgsUtils.java
Patch:
@@ -120,7 +120,7 @@ public static List<String> buildArgs(SparkParameters param) {
 
         ResourceInfo mainJar = param.getMainJar();
         if (mainJar != null) {
-            args.add(mainJar.getRes());
+            args.add(mainJar.getResourceName());
         }
 
         String mainArgs = param.getMainArgs();

File: dolphinscheduler-task-plugin/dolphinscheduler-task-flink-stream/src/test/java/org/apache/dolphinscheduler/plugin/task/flink/FlinkParametersTest.java
Patch:
@@ -33,12 +33,12 @@ public void getResourceFilesList() {
         Assertions.assertTrue(flinkParameters.getResourceFilesList().isEmpty());
 
         ResourceInfo mainResource = new ResourceInfo();
-        mainResource.setRes("testFlinkMain-1.0.0-SNAPSHOT.jar");
+        mainResource.setResourceName("/testFlinkMain-1.0.0-SNAPSHOT.jar");
         flinkParameters.setMainJar(mainResource);
 
         List<ResourceInfo> resourceInfos = new LinkedList<>();
         ResourceInfo resourceInfo1 = new ResourceInfo();
-        resourceInfo1.setRes("testFlinkParameters1.jar");
+        resourceInfo1.setResourceName("/testFlinkParameters1.jar");
         resourceInfos.add(resourceInfo1);
 
         flinkParameters.setResourceList(resourceInfos);
@@ -47,7 +47,7 @@ public void getResourceFilesList() {
         Assertions.assertEquals(2, resourceFilesList.size());
 
         ResourceInfo resourceInfo2 = new ResourceInfo();
-        resourceInfo2.setRes("testFlinkParameters2.jar");
+        resourceInfo2.setResourceName("/testFlinkParameters2.jar");
         resourceInfos.add(resourceInfo2);
 
         flinkParameters.setResourceList(resourceInfos);

File: dolphinscheduler-task-plugin/dolphinscheduler-task-flink/src/main/java/org/apache/dolphinscheduler/plugin/task/flink/FlinkArgsUtils.java
Patch:
@@ -297,7 +297,7 @@ private static List<String> buildRunCommandLineForOthers(TaskExecutionContext ta
             if (ProgramType.PYTHON == programType) {
                 args.add(FlinkConstants.FLINK_PYTHON);
             }
-            args.add(mainJar.getRes());
+            args.add(taskExecutionContext.getResources().get(mainJar.getResourceName()));
         }
 
         String mainArgs = flinkParameters.getMainArgs();

File: dolphinscheduler-task-plugin/dolphinscheduler-task-flink/src/test/java/org/apache/dolphinscheduler/plugin/task/flink/FlinkParametersTest.java
Patch:
@@ -33,12 +33,12 @@ public void getResourceFilesList() {
         Assertions.assertTrue(flinkParameters.getResourceFilesList().isEmpty());
 
         ResourceInfo mainResource = new ResourceInfo();
-        mainResource.setRes("testFlinkMain-1.0.0-SNAPSHOT.jar");
+        mainResource.setResourceName("/testFlinkMain-1.0.0-SNAPSHOT.jar");
         flinkParameters.setMainJar(mainResource);
 
         List<ResourceInfo> resourceInfos = new LinkedList<>();
         ResourceInfo resourceInfo1 = new ResourceInfo();
-        resourceInfo1.setRes("testFlinkParameters1.jar");
+        resourceInfo1.setResourceName("/testFlinkParameters1.jar");
         resourceInfos.add(resourceInfo1);
 
         flinkParameters.setResourceList(resourceInfos);
@@ -47,7 +47,7 @@ public void getResourceFilesList() {
         Assertions.assertEquals(2, resourceFilesList.size());
 
         ResourceInfo resourceInfo2 = new ResourceInfo();
-        resourceInfo2.setRes("testFlinkParameters2.jar");
+        resourceInfo2.setResourceName("/testFlinkParameters2.jar");
         resourceInfos.add(resourceInfo2);
 
         flinkParameters.setResourceList(resourceInfos);

File: dolphinscheduler-task-plugin/dolphinscheduler-task-mr/src/main/java/org/apache/dolphinscheduler/plugin/task/mr/MapReduceArgsUtils.java
Patch:
@@ -22,6 +22,7 @@
 import static org.apache.dolphinscheduler.plugin.task.mr.MapReduceTaskConstants.MR_NAME;
 import static org.apache.dolphinscheduler.plugin.task.mr.MapReduceTaskConstants.MR_QUEUE;
 
+import org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContext;
 import org.apache.dolphinscheduler.plugin.task.api.model.ResourceInfo;
 import org.apache.dolphinscheduler.plugin.task.api.utils.ArgsUtils;
 
@@ -45,13 +46,13 @@ private MapReduceArgsUtils() {
      * @param param param
      * @return argument list
      */
-    public static List<String> buildArgs(MapReduceParameters param) {
+    public static List<String> buildArgs(MapReduceParameters param, TaskExecutionContext taskExecutionContext) {
         List<String> args = new ArrayList<>();
 
         ResourceInfo mainJar = param.getMainJar();
         if (mainJar != null) {
             args.add(JAR);
-            args.add(mainJar.getRes());
+            args.add(taskExecutionContext.getResources().get(mainJar.getResourceName()));
         }
 
         ProgramType programType = param.getProgramType();

File: dolphinscheduler-task-plugin/dolphinscheduler-task-seatunnel/src/main/java/org/apache/dolphinscheduler/plugin/task/seatunnel/SeatunnelTask.java
Patch:
@@ -156,6 +156,7 @@ protected List<String> buildOptions() throws Exception {
         } else {
             seatunnelParameters.getResourceList().forEach(resourceInfo -> {
                 args.add(CONFIG_OPTIONS);
+                // TODO: Need further check for refactored resource center
                 // TODO Currently resourceName is `/xxx.sh`, it has more `/` and needs to be optimized
                 args.add(resourceInfo.getResourceName().substring(1));
             });

File: dolphinscheduler-task-plugin/dolphinscheduler-task-spark/src/test/java/org/apache/dolphinscheduler/plugin/task/spark/SparkParametersTest.java
Patch:
@@ -33,12 +33,12 @@ public void getResourceFilesList() {
         Assertions.assertTrue(sparkParameters.getResourceFilesList().isEmpty());
 
         ResourceInfo mainResource = new ResourceInfo();
-        mainResource.setRes("testSparkMain-1.0.0-SNAPSHOT.jar\"");
+        mainResource.setResourceName("testSparkMain-1.0.0-SNAPSHOT.jar\"");
         sparkParameters.setMainJar(mainResource);
 
         LinkedList<ResourceInfo> resourceInfos = new LinkedList<>();
         ResourceInfo resourceInfo1 = new ResourceInfo();
-        resourceInfo1.setRes("testSparkParameters1.jar");
+        resourceInfo1.setResourceName("testSparkParameters1.jar");
         resourceInfos.add(resourceInfo1);
 
         sparkParameters.setResourceList(resourceInfos);
@@ -47,7 +47,7 @@ public void getResourceFilesList() {
         Assertions.assertEquals(2, resourceFilesList.size());
 
         ResourceInfo resourceInfo2 = new ResourceInfo();
-        resourceInfo2.setRes("testSparkParameters2.jar");
+        resourceInfo2.setResourceName("testSparkParameters2.jar");
         resourceInfos.add(resourceInfo2);
 
         sparkParameters.setResourceList(resourceInfos);

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/K8sUtils.java
Patch:
@@ -29,8 +29,8 @@
 import io.fabric8.kubernetes.api.model.batch.v1.Job;
 import io.fabric8.kubernetes.api.model.batch.v1.JobList;
 import io.fabric8.kubernetes.client.Config;
-import io.fabric8.kubernetes.client.DefaultKubernetesClient;
 import io.fabric8.kubernetes.client.KubernetesClient;
+import io.fabric8.kubernetes.client.KubernetesClientBuilder;
 import io.fabric8.kubernetes.client.Watch;
 import io.fabric8.kubernetes.client.Watcher;
 
@@ -114,7 +114,7 @@ public String getPodLog(String jobName, String namespace) {
     public void buildClient(String configYaml) {
         try {
             Config config = Config.fromKubeconfig(configYaml);
-            client = new DefaultKubernetesClient(config);
+            client = new KubernetesClientBuilder().withConfig(config).build();
         } catch (Exception e) {
             throw new TaskException("fail to build k8s ApiClient", e);
         }

File: dolphinscheduler-spi/src/main/java/org/apache/dolphinscheduler/spi/enums/ResourceType.java
Patch:
@@ -28,7 +28,8 @@ public enum ResourceType {
      * 0 file, 1 udf
      */
     FILE(0, "file"),
-    UDF(1, "udf");
+    UDF(1, "udf"),
+    ALL(2, "all");
 
     ResourceType(int code, String descp) {
         this.code = code;

File: dolphinscheduler-storage-plugin/dolphinscheduler-storage-api/src/main/java/org/apache/dolphinscheduler/plugin/storage/api/StorageOperate.java
Patch:
@@ -48,7 +48,6 @@ public interface StorageOperate {
      * @param tenantCode
      * @return
      */
-
     String getUdfDir(String tenantCode);
 
     /**

File: dolphinscheduler-storage-plugin/dolphinscheduler-storage-gcs/src/main/java/org/apache/dolphinscheduler/plugin/storage/gcs/GcsStorageOperator.java
Patch:
@@ -252,6 +252,8 @@ public String getDir(ResourceType resourceType, String tenantCode) {
                 return getUdfDir(tenantCode);
             case FILE:
                 return getResDir(tenantCode);
+            case ALL:
+                return getGcsDataBasePath();
             default:
                 return EMPTY_STRING;
         }

File: dolphinscheduler-storage-plugin/dolphinscheduler-storage-oss/src/main/java/org/apache/dolphinscheduler/plugin/storage/oss/OssStorageOperator.java
Patch:
@@ -268,6 +268,8 @@ public String getDir(ResourceType resourceType, String tenantCode) {
                 return getUdfDir(tenantCode);
             case FILE:
                 return getResDir(tenantCode);
+            case ALL:
+                return getOssDataBasePath();
             default:
                 return "";
         }

File: dolphinscheduler-storage-plugin/dolphinscheduler-storage-s3/src/main/java/org/apache/dolphinscheduler/plugin/storage/s3/S3StorageOperator.java
Patch:
@@ -290,6 +290,8 @@ public String getDir(ResourceType resourceType, String tenantCode) {
                 return getUdfDir(tenantCode);
             case FILE:
                 return getResDir(tenantCode);
+            case ALL:
+                return getS3DataBasePath();
             default:
                 return "";
         }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProcessDefinitionServiceImpl.java
Patch:
@@ -1651,6 +1651,7 @@ protected boolean checkAndImport(User loginUser, long projectCode, Map<String, O
         if (null != schedule) {
             ProcessDefinition newProcessDefinition = processDefinitionMapper.queryByCode(processDefinition.getCode());
             schedule.setProcessDefinitionCode(newProcessDefinition.getCode());
+            schedule.setId(null);
             schedule.setUserId(loginUser.getId());
             schedule.setCreateTime(now);
             schedule.setUpdateTime(now);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProcessDefinitionServiceImpl.java
Patch:
@@ -122,6 +122,7 @@
 import org.apache.dolphinscheduler.plugin.task.api.model.Property;
 import org.apache.dolphinscheduler.plugin.task.api.parameters.ParametersNode;
 import org.apache.dolphinscheduler.plugin.task.api.parameters.SqlParameters;
+import org.apache.dolphinscheduler.service.cron.CronUtils;
 import org.apache.dolphinscheduler.service.model.TaskNode;
 import org.apache.dolphinscheduler.service.process.ProcessService;
 
@@ -2607,7 +2608,7 @@ protected Map<String, Object> createDagSchedule(User loginUser, ProcessDefinitio
             putMsg(result, Status.SCHEDULE_START_TIME_END_TIME_SAME);
             return result;
         }
-        if (!org.quartz.CronExpression.isValidExpression(scheduleObj.getCrontab())) {
+        if (!CronUtils.isValidExpression(scheduleObj.getCrontab())) {
             log.error("CronExpression verify failure, cron:{}.", scheduleObj.getCrontab());
             putMsg(result, Status.REQUEST_PARAMS_NOT_VALID_ERROR, scheduleObj.getCrontab());
             return result;

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/OSUtils.java
Patch:
@@ -39,7 +39,7 @@ private OSUtils() {
      * @return result of sudo execute command
      */
     public static String getSudoCmd(String tenantCode, String command) {
-        return StringUtils.isEmpty(tenantCode) ? command : "sudo -u " + tenantCode + " " + command;
+        return StringUtils.isEmpty(tenantCode) || !isSudoEnable() ? command : "sudo -u " + tenantCode + " " + command;
     }
 
     /**

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/utils/ProcessUtils.java
Patch:
@@ -49,6 +49,7 @@
 
 import lombok.NonNull;
 import lombok.extern.slf4j.Slf4j;
+import io.fabric8.kubernetes.client.dsl.LogWatch;
 
 @Slf4j
 public final class ProcessUtils {
@@ -204,12 +205,12 @@ public static TaskExecutionStatus getApplicationStatus(K8sTaskExecutionContext k
      * @param taskAppId
      * @return
      */
-    public static String getPodLog(K8sTaskExecutionContext k8sTaskExecutionContext, String taskAppId) {
+    public static LogWatch getPodLogWatcher(K8sTaskExecutionContext k8sTaskExecutionContext, String taskAppId) {
         KubernetesApplicationManager applicationManager =
                 (KubernetesApplicationManager) applicationManagerMap.get(ResourceManagerType.KUBERNETES);
 
         return applicationManager
-                .collectPodLog(new KubernetesApplicationManagerContext(k8sTaskExecutionContext, taskAppId));
+                .getPodLogWatcher(new KubernetesApplicationManagerContext(k8sTaskExecutionContext, taskAppId));
     }
 
 }

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/PropertyUtils.java
Patch:
@@ -88,6 +88,9 @@ public static boolean getResUploadStartupState() {
      * @return property value
      */
     public static String getString(String key) {
+        if (key == null) {
+            return null;
+        }
         return properties.getProperty(key.trim());
     }
 

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/WorkflowSubmitStatus.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.dolphinscheduler.server.master.runner;
 
-public enum WorkflowSubmitStatue {
+public enum WorkflowSubmitStatus {
     /**
      * Submit success
      */

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/WorkerGroupServiceImpl.java
Patch:
@@ -292,9 +292,9 @@ private List<WorkerGroup> getWorkerGroups(List<Integer> ids) {
         } else {
             workerGroups = workerGroupMapper.queryAllWorkerGroup();
         }
-        Optional<Boolean> containDefaultWorkerGroups = workerGroups.stream()
-                .map(workerGroup -> Constants.DEFAULT_WORKER_GROUP.equals(workerGroup.getName())).findAny();
-        if (!containDefaultWorkerGroups.isPresent() || !containDefaultWorkerGroups.get()) {
+        boolean containDefaultWorkerGroups = workerGroups.stream()
+                .anyMatch(workerGroup -> Constants.DEFAULT_WORKER_GROUP.equals(workerGroup.getName()));
+        if (!containDefaultWorkerGroups) {
             // there doesn't exist a default WorkerGroup, we will add all worker to the default worker group.
             Set<String> activeWorkerNodes = registryClient.getServerNodeSet(NodeType.WORKER);
             WorkerGroup defaultWorkerGroup = new WorkerGroup();

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-db2/src/main/java/org/apache/dolphinscheduler/plugin/datasource/db2/param/Db2DataSourceProcessor.java
Patch:
@@ -54,7 +54,7 @@ public BaseDataSourceParamDTO createDatasourceParamDTO(String connectionJson) {
         Db2DataSourceParamDTO db2DatasourceParamDTO = new Db2DataSourceParamDTO();
         db2DatasourceParamDTO.setDatabase(connectionParams.getDatabase());
         db2DatasourceParamDTO.setOther(connectionParams.getOther());
-        db2DatasourceParamDTO.setUserName(db2DatasourceParamDTO.getUserName());
+        db2DatasourceParamDTO.setUserName(connectionParams.getUser());
 
         String[] hostSeperator = connectionParams.getAddress().split(Constants.DOUBLE_SLASH);
         String[] hostPortArray = hostSeperator[hostSeperator.length - 1].split(Constants.COMMA);
@@ -97,7 +97,7 @@ public String getDatasourceDriver() {
     public String getJdbcUrl(ConnectionParam connectionParam) {
         Db2ConnectionParam db2ConnectionParam = (Db2ConnectionParam) connectionParam;
         if (MapUtils.isNotEmpty(db2ConnectionParam.getOther())) {
-            return String.format("%s;%s", db2ConnectionParam.getJdbcUrl(),
+            return String.format("%s:%s", db2ConnectionParam.getJdbcUrl(),
                     transformOther(db2ConnectionParam.getOther()));
         }
         return db2ConnectionParam.getJdbcUrl();

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-db2/src/test/java/org/apache/dolphinscheduler/plugin/datasource/db2/param/Db2DataSourceProcessorTest.java
Patch:
@@ -85,7 +85,7 @@ public void testGetJdbcUrl() {
                 .build();
         db2ConnectionParam.setOther(map);
         String jdbcUrl = db2DatasourceProcessor.getJdbcUrl(db2ConnectionParam);
-        Assertions.assertEquals("jdbc:db2://localhost:5142/default;other=other", jdbcUrl);
+        Assertions.assertEquals("jdbc:db2://localhost:5142/default:other=other", jdbcUrl);
     }
 
     @Test

File: dolphinscheduler-spi/src/main/java/org/apache/dolphinscheduler/spi/params/base/FormType.java
Patch:
@@ -28,7 +28,7 @@
 public enum FormType {
 
     INPUT("input"),
-    INPUTNUMBER("inputNumber"),
+    INPUTNUMBER("input-number"),
     RADIO("radio"),
     SELECT("select"),
     SWITCH("switch"),

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-api/src/main/java/org/apache/dolphinscheduler/plugin/datasource/api/datasource/AbstractDataSourceProcessor.java
Patch:
@@ -43,7 +43,7 @@ public abstract class AbstractDataSourceProcessor implements DataSourceProcessor
 
     private static final Pattern DATABASE_PATTER = Pattern.compile("^[a-zA-Z0-9\\_\\-\\.]+$");
 
-    private static final Pattern PARAMS_PATTER = Pattern.compile("^[a-zA-Z0-9\\-\\_\\/\\@\\.]+$");
+    private static final Pattern PARAMS_PATTER = Pattern.compile("^[a-zA-Z0-9\\-\\_\\/\\@\\.\\:]+$");
 
     private static final Set<String> POSSIBLE_MALICIOUS_KEYS = Sets.newHashSet("allowLoadLocalInfile");
 

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-api/src/test/java/org/apache/dolphinscheduler/plugin/datasource/api/datasource/AbstractDataSourceProcessorTest.java
Patch:
@@ -54,6 +54,7 @@ public void shouldNotIncludeMaliciousParams() {
         AbstractDataSourceProcessor mockDataSourceProcessor = mock(AbstractDataSourceProcessor.class);
         Map<String, String> other = new HashMap<>();
         other.put("allowLoadLocalInfile", "whatever");
+        other.put("OutputLocation", "s3://test-data-xini/athena-query");
         doThrow(new IllegalArgumentException()).when(mockDataSourceProcessor).checkOther(other);
     }
 

File: dolphinscheduler-master/src/test/java/org/apache/dolphinscheduler/server/master/BlockingTaskTest.java
Patch:
@@ -216,6 +216,7 @@ private TaskInstance testBasicInit(String blockingCondition, TaskExecutionStatus
         Mockito.when(
                 taskInstanceDao.findValidTaskListByProcessId(processInstance.getId(), processInstance.getTestFlag()))
                 .thenReturn(conditions);
+        taskInstance.setProcessInstance(processInstance);
         return taskInstance;
     }
 

File: dolphinscheduler-master/src/test/java/org/apache/dolphinscheduler/server/master/SubProcessTaskTest.java
Patch:
@@ -106,7 +106,7 @@ private TaskInstance testBasicInit(WorkflowExecutionStatus expectResult) {
         Mockito.when(processService
                 .findSubProcessInstance(processInstance.getId(), taskInstance.getId()))
                 .thenReturn(subProcessInstance);
-
+        taskInstance.setProcessInstance(processInstance);
         return taskInstance;
     }
 

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/AbstractCommandExecutor.java
Patch:
@@ -20,6 +20,7 @@
 import static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.EXIT_CODE_FAILURE;
 import static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.EXIT_CODE_KILL;
 
+import org.apache.dolphinscheduler.common.constants.TenantConstants;
 import org.apache.dolphinscheduler.common.thread.ThreadUtils;
 import org.apache.dolphinscheduler.common.utils.PropertyUtils;
 import org.apache.dolphinscheduler.plugin.task.api.enums.TaskExecutionStatus;
@@ -135,7 +136,8 @@ private void buildProcess(String commandFile) throws IOException {
         processBuilder.redirectErrorStream(true);
 
         // if sudo.enable=true,setting up user to run commands
-        if (OSUtils.isSudoEnable()) {
+        // todo: Create a ShellExecuteClass to generate the shell and execute shell commands
+        if (OSUtils.isSudoEnable() && !TenantConstants.DEFAULT_TENANT_CODE.equals(taskRequest.getTenantCode())) {
             if (SystemUtils.IS_OS_LINUX
                     && PropertyUtils.getBoolean(AbstractCommandExecutorConstants.TASK_RESOURCE_LIMIT_STATE)) {
                 generateCgroupCommand(command);

File: dolphinscheduler-worker/src/main/java/org/apache/dolphinscheduler/server/worker/processor/TaskDispatchProcessor.java
Patch:
@@ -81,7 +81,6 @@ public void process(Channel channel, Message message) {
             log.error("task execute request command content is null");
             return;
         }
-        final String workflowMasterAddress = taskDispatchMessage.getMessageSenderAddress();
         log.info("Receive task dispatch request, command: {}", taskDispatchMessage);
 
         TaskExecutionContext taskExecutionContext = taskDispatchMessage.getTaskExecutionContext();

File: dolphinscheduler-worker/src/main/java/org/apache/dolphinscheduler/server/worker/runner/WorkerTaskExecuteRunnable.java
Patch:
@@ -193,7 +193,7 @@ protected void beforeExecute() {
         log.info("Set task status to {}", TaskExecutionStatus.RUNNING_EXECUTION);
 
         TaskExecutionCheckerUtils.checkTenantExist(workerConfig, taskExecutionContext);
-        log.info("TenantCode:{} check success", taskExecutionContext.getTenantCode());
+        log.info("TenantCode: {} check success", taskExecutionContext.getTenantCode());
 
         TaskExecutionCheckerUtils.createProcessLocalPathIfAbsent(taskExecutionContext);
         log.info("ProcessExecDir:{} check success", taskExecutionContext.getExecutePath());

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProcessInstanceServiceImpl.java
Patch:
@@ -993,7 +993,7 @@ public Map<String, Object> viewGantt(long projectCode, Integer processInstanceId
                 task.getEndDate().add(endTime.getTime());
                 task.setIsoStart(startTime);
                 task.setIsoEnd(endTime);
-                task.setStatus(taskInstance.getState().getDesc().toUpperCase());
+                task.setStatus(taskInstance.getState().name());
                 task.setExecutionDate(taskInstance.getStartTime());
                 task.setDuration(DateUtils.format2Readable(endTime.getTime() - startTime.getTime()));
                 taskList.add(task);

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java
Patch:
@@ -58,6 +58,7 @@ public TaskDefinitionLog(TaskDefinition taskDefinition) {
         this.setTaskParamList(taskDefinition.getTaskParamList());
         this.setTaskParamMap(taskDefinition.getTaskParamMap());
         this.setTaskPriority(taskDefinition.getTaskPriority());
+        this.setTaskExecuteType(taskDefinition.getTaskExecuteType());
         this.setTimeoutNotifyStrategy(taskDefinition.getTimeoutNotifyStrategy());
         this.setTaskType(taskDefinition.getTaskType());
         this.setTimeout(taskDefinition.getTimeout());

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/WorkflowExecuteRunnable.java
Patch:
@@ -1135,6 +1135,7 @@ public TaskInstance cloneRetryTaskInstance(TaskInstance taskInstance) {
         // todo relative function: TaskInstance.retryTaskIntervalOverTime
         newTaskInstance.setState(taskInstance.getState());
         newTaskInstance.setEndTime(taskInstance.getEndTime());
+        newTaskInstance.setVarPool(taskInstance.getVarPool());
 
         if (taskInstance.getState() == TaskExecutionStatus.NEED_FAULT_TOLERANCE) {
             newTaskInstance.setAppLink(taskInstance.getAppLink());
@@ -1162,6 +1163,7 @@ public TaskInstance cloneTolerantTaskInstance(TaskInstance taskInstance) {
         newTaskInstance.setRetryTimes(taskInstance.getRetryTimes());
         newTaskInstance.setState(taskInstance.getState());
         newTaskInstance.setAppLink(taskInstance.getAppLink());
+        newTaskInstance.setVarPool(taskInstance.getVarPool());
         return newTaskInstance;
     }
 

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/TaskConstants.java
Patch:
@@ -33,7 +33,7 @@ private TaskConstants() {
 
     public static final String FLINK_APPLICATION_REGEX = "JobID \\w+";
 
-    public static final String SETVALUE_REGEX = "[\\$#]\\{setValue\\(([^)]*)\\)}";
+    public static final String SETVALUE_REGEX = "[\\$#]\\{setValue\\((.*?)\\)}";
 
     /**
      * string false

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ResourcesServiceImpl.java
Patch:
@@ -769,7 +769,7 @@ public Result<PageInfo<StorageEntity>> queryResourceListPaging(User loginUser, S
         List<StorageEntity> slicedResourcesList = filteredResourceList.stream().skip((long) (pageNo - 1) * pageSize)
                 .limit(pageSize).collect(Collectors.toList());
 
-        pageInfo.setTotal(resourcesList.size());
+        pageInfo.setTotal(filteredResourceList.size());
         pageInfo.setTotalList(slicedResourcesList);
         result.setData(pageInfo);
         putMsg(result, Status.SUCCESS);

File: dolphinscheduler-worker/src/main/java/org/apache/dolphinscheduler/server/worker/runner/TaskCallbackImpl.java
Patch:
@@ -69,7 +69,6 @@ public void updateTaskInstanceInfo(int taskInstanceId) {
             return;
         }
 
-        log.info("send remote taskExecutionContext info {}", taskExecutionContext);
         workerMessageSender.sendMessageWithRetry(taskExecutionContext, masterAddress, CommandType.TASK_UPDATE_PID);
     }
 

File: dolphinscheduler-data-quality/src/main/java/org/apache/dolphinscheduler/data/quality/flow/batch/reader/JdbcReader.java
Patch:
@@ -31,6 +31,7 @@
 import org.apache.dolphinscheduler.data.quality.execution.SparkRuntimeEnvironment;
 import org.apache.dolphinscheduler.data.quality.flow.batch.BatchReader;
 import org.apache.dolphinscheduler.data.quality.utils.ConfigUtils;
+import org.apache.dolphinscheduler.data.quality.utils.ParserUtils;
 
 import org.apache.spark.sql.DataFrameReader;
 import org.apache.spark.sql.Dataset;
@@ -79,7 +80,7 @@ private DataFrameReader jdbcReader(SparkSession sparkSession) {
                 .option(URL, config.getString(URL))
                 .option(DB_TABLE, config.getString(TABLE))
                 .option(USER, config.getString(USER))
-                .option(PASSWORD, config.getString(PASSWORD))
+                .option(PASSWORD, ParserUtils.decode(config.getString(PASSWORD)))
                 .option(DRIVER, config.getString(DRIVER));
 
         Config jdbcConfig = ConfigUtils.extractSubConfig(config, JDBC + DOTS, false);

File: dolphinscheduler-data-quality/src/main/java/org/apache/dolphinscheduler/data/quality/flow/batch/writer/JdbcWriter.java
Patch:
@@ -32,6 +32,7 @@
 import org.apache.dolphinscheduler.data.quality.config.ValidateResult;
 import org.apache.dolphinscheduler.data.quality.execution.SparkRuntimeEnvironment;
 import org.apache.dolphinscheduler.data.quality.flow.batch.BatchWriter;
+import org.apache.dolphinscheduler.data.quality.utils.ParserUtils;
 
 import org.apache.spark.sql.Dataset;
 import org.apache.spark.sql.Row;
@@ -80,7 +81,7 @@ public void write(Dataset<Row> data, SparkRuntimeEnvironment env) {
                 .option(URL, config.getString(URL))
                 .option(DB_TABLE, config.getString(TABLE))
                 .option(USER, config.getString(USER))
-                .option(PASSWORD, config.getString(PASSWORD))
+                .option(PASSWORD, ParserUtils.decode(config.getString(PASSWORD)))
                 .mode(config.getString(SAVE_MODE))
                 .save();
     }

File: dolphinscheduler-alert/dolphinscheduler-alert-plugins/dolphinscheduler-alert-webexteams/src/main/java/org/apache/dolphinscheduler/plugin/alert/webexteams/WebexTeamsSender.java
Patch:
@@ -158,7 +158,7 @@ public static String formatContent(AlertData alertData) {
             for (Map map : list) {
                 for (Map.Entry<String, Object> entry : (Iterable<Map.Entry<String, Object>>) map.entrySet()) {
                     String key = entry.getKey();
-                    String value = entry.getValue().toString();
+                    String value = entry.getValue() == null ? "" : entry.getValue().toString();
                     contents.append(key).append(":").append(value);
                     contents.append("\n");
                 }

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/StateEventType.java
Patch:
@@ -27,7 +27,8 @@ public enum StateEventType {
     TASK_TIMEOUT(3, "task timeout"),
     WAKE_UP_TASK_GROUP(4, "wait task group"),
     TASK_RETRY(5, "task retry"),
-    PROCESS_BLOCKED(6, "process blocked");
+    PROCESS_BLOCKED(6, "process blocked"),
+    PROCESS_SUBMIT_FAILED(7, "process submit failed");
 
     StateEventType(int code, String descp) {
         this.code = code;

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/event/WorkflowStateEventHandler.java
Patch:
@@ -57,6 +57,9 @@ public boolean handleStateEvent(WorkflowExecuteRunnable workflowExecuteRunnable,
             return true;
         }
         if (workflowStateEvent.getStatus().isFinished()) {
+            if (workflowStateEvent.getType().equals(StateEventType.PROCESS_SUBMIT_FAILED)) {
+                workflowExecuteRunnable.updateProcessInstanceState(workflowStateEvent);
+            }
             workflowExecuteRunnable.endProcess();
         }
         if (processInstance.getState().isReadyStop()) {

File: dolphinscheduler-storage-plugin/dolphinscheduler-storage-hdfs/src/main/java/org/apache/dolphinscheduler/plugin/storage/hdfs/HdfsStorageOperator.java
Patch:
@@ -76,7 +76,7 @@
 @Slf4j
 public class HdfsStorageOperator implements Closeable, StorageOperate {
 
-    private static HdfsStorageProperties hdfsProperties;
+    private static HdfsStorageProperties hdfsProperties = new HdfsStorageProperties();
     private static final String HADOOP_UTILS_KEY = "HADOOP_UTILS_KEY";
 
     private static final LoadingCache<String, HdfsStorageOperator> cache = CacheBuilder
@@ -85,7 +85,7 @@ public class HdfsStorageOperator implements Closeable, StorageOperate {
             .build(new CacheLoader<String, HdfsStorageOperator>() {
 
                 @Override
-                public HdfsStorageOperator load(String key) throws Exception {
+                public HdfsStorageOperator load(String key) {
                     return new HdfsStorageOperator(hdfsProperties);
                 }
             });

File: dolphinscheduler-task-plugin/dolphinscheduler-task-datax/src/main/java/org/apache/dolphinscheduler/plugin/task/datax/DataxTask.java
Patch:
@@ -84,7 +84,7 @@ public class DataxTask extends AbstractTask {
      */
     public static final String JVM_PARAM = " --jvm=\"-Xms%sG -Xmx%sG\" ";
 
-    public static final String CUSTOM_PARAM = " -D%s=%s";
+    public static final String CUSTOM_PARAM = " -D%s='%s'";
     /**
      * python process(datax only supports version 2.7 by default)
      */

File: dolphinscheduler-task-plugin/dolphinscheduler-task-datax/src/test/java/org/apache/dolphinscheduler/plugin/task/datax/DataxTaskTest.java
Patch:
@@ -157,7 +157,7 @@ public void testHandleParamsMap() throws Exception {
         InputStream shellCommandInputStream = Files.newInputStream(shellCommandFile.toPath());
         String shellCommandStr = FileUtils.readFile2Str(shellCommandInputStream);
         Assertions.assertEquals(shellCommandStr, "python2.7 ${DATAX_HOME}/bin/datax.py  --jvm=\"-Xms1G -Xmx1G\" " +
-                "-p \"-DDT=DT -DDS=DS\" /tmp/execution/app-id_job.json");
+                "-p \"-DDT='DT' -DDS='DS'\" /tmp/execution/app-id_job.json");
         delete = shellCommandFile.delete();
         Assertions.assertTrue(delete);
     }

File: dolphinscheduler-tools/src/main/java/org/apache/dolphinscheduler/tools/demo/DemoConstants.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.dolphinscheduler.tools.demo;
 
-public class DemoContants {
+public class DemoConstants {
 
     public static final String PARAMETER_CONTEXT_PARAMS =
             "[{\"prop\":\"output\",\"value\":\"100\",\"direct\":\"IN\",\"type\":\"VARCHAR\"},{\"prop\":\"value\",\"value\":\"99\",\"direct\":\"IN\",\"type\":\"VARCHAR\"}]";

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/parameters/AbstractParameters.java
Patch:
@@ -199,7 +199,7 @@ public ResourceParametersHelper getResources() {
         return new ResourceParametersHelper();
     }
 
-    private void addPropertyToValPool(Property property) {
+    public void addPropertyToValPool(Property property) {
         varPool.removeIf(p -> p.getProp().equals(property.getProp()));
         varPool.add(property);
     }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ExecutorServiceImpl.java
Patch:
@@ -1274,9 +1274,8 @@ private boolean isValidateScheduleTime(String schedule) {
      */
     private String removeDuplicates(String scheduleTimeList) {
         if (StringUtils.isNotEmpty(scheduleTimeList)) {
-            Set<String> dateSet =
-                    Arrays.stream(scheduleTimeList.split(COMMA)).map(String::trim).collect(Collectors.toSet());
-            return String.join(COMMA, dateSet);
+            return Arrays.stream(scheduleTimeList.split(COMMA)).map(String::trim).distinct()
+                    .collect(Collectors.joining(COMMA));
         }
         return null;
     }

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/StateEventType.java
Patch:
@@ -25,7 +25,7 @@ public enum StateEventType {
     TASK_STATE_CHANGE(1, "task state change"),
     PROCESS_TIMEOUT(2, "process timeout"),
     TASK_TIMEOUT(3, "task timeout"),
-    WAIT_TASK_GROUP(4, "wait task group"),
+    WAKE_UP_TASK_GROUP(4, "wait task group"),
     TASK_RETRY(5, "task retry"),
     PROCESS_BLOCKED(6, "process blocked");
 

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/processor/TaskEventProcessor.java
Patch:
@@ -58,7 +58,7 @@ public void process(Channel channel, Command command) {
                 .processInstanceId(taskEventChangeCommand.getProcessInstanceId())
                 .taskInstanceId(taskEventChangeCommand.getTaskInstanceId())
                 .key(taskEventChangeCommand.getKey())
-                .type(StateEventType.WAIT_TASK_GROUP)
+                .type(StateEventType.WAKE_UP_TASK_GROUP)
                 .build();
         try {
             LoggerUtils.setWorkflowAndTaskInstanceIDMDC(stateEvent.getProcessInstanceId(),

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/WorkflowExecuteRunnable.java
Patch:
@@ -482,7 +482,7 @@ public void releaseTaskGroup(TaskInstance taskInstance) {
                     TaskStateEvent nextEvent = TaskStateEvent.builder()
                             .processInstanceId(processInstance.getId())
                             .taskInstanceId(nextTaskInstance.getId())
-                            .type(StateEventType.WAIT_TASK_GROUP)
+                            .type(StateEventType.WAKE_UP_TASK_GROUP)
                             .build();
                     this.stateEvents.add(nextEvent);
                 } else {

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/WorkflowExecuteThreadPool.java
Patch:
@@ -109,7 +109,7 @@ public void executeEvent(final WorkflowExecuteRunnable workflowExecuteThread) {
             return;
         }
         if (multiThreadFilterMap.containsKey(workflowExecuteThread.getKey())) {
-            logger.warn("The workflow has been executed by another thread");
+            logger.debug("The workflow has been executed by another thread");
             return;
         }
         multiThreadFilterMap.put(workflowExecuteThread.getKey(), workflowExecuteThread);

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessServiceImpl.java
Patch:
@@ -2637,6 +2637,7 @@ public void sendStartTask2Master(ProcessInstance processInstance, int taskId,
                 processInstance.getId(), taskId);
         Host host = new Host(processInstance.getHost());
         stateEventCallbackService.sendResult(host, taskEventChangeCommand.convert2Command(taskType));
+        logger.info("Success send command to master: {}, command: {}", host, taskEventChangeCommand);
     }
 
     @Override

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/DataSourceController.java
Patch:
@@ -141,7 +141,7 @@ public Result updateDataSource(@Parameter(hidden = true) @RequestAttribute(value
     public Result queryDataSource(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,
                                   @PathVariable("id") int id) {
 
-        Map<String, Object> result = dataSourceService.queryDataSource(id);
+        Map<String, Object> result = dataSourceService.queryDataSource(id, loginUser);
         return returnDataList(result);
     }
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/DataSourceService.java
Patch:
@@ -55,7 +55,7 @@ public interface DataSourceService {
      * @param id datasource id
      * @return data source detail
      */
-    Map<String, Object> queryDataSource(int id);
+    Map<String, Object> queryDataSource(int id, User loginUser);
 
     /**
      * query datasource list by keyword

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/ResUploadType.java
Patch:
@@ -21,5 +21,5 @@
  * data base types
  */
 public enum ResUploadType {
-    HDFS, S3, OSS, NONE
+    LOCAL, HDFS, S3, OSS, NONE
 }

File: dolphinscheduler-common/src/test/java/org/apache/dolphinscheduler/common/utils/PropertyUtilsTest.java
Patch:
@@ -31,6 +31,6 @@ public void getString() {
 
     @Test
     public void getResUploadStartupState() {
-        Assertions.assertFalse(PropertyUtils.getResUploadStartupState());
+        Assertions.assertTrue(PropertyUtils.getResUploadStartupState());
     }
 }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java
Patch:
@@ -265,6 +265,9 @@ public enum Status {
             "请先保存后再执行"),
     START_NODE_NOT_EXIST_IN_LAST_PROCESS(10207, "this node {0} does not exist in the latest process definition",
             "该节点 {0} 不存在于最新的流程定义中"),
+    LIST_AZURE_DATA_FACTORY_ERROR(10208, "list azure data factory error", "查询AZURE数据工厂列表错误"),
+    LIST_AZURE_RESOURCE_GROUP_ERROR(10209, "list azure resource group error", "查询AZURE资源组列表错误"),
+    LIST_AZURE_DATA_FACTORY_PIPELINE_ERROR(10210, "list azure data factory pipeline error", "查询AZURE数据工厂pipeline列表错误"),
 
     UDF_FUNCTION_NOT_EXIST(20001, "UDF function not found", "UDF函数不存在"),
     UDF_FUNCTION_EXISTS(20002, "UDF function already exists", "UDF函数已存在"),

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/service/FailoverService.java
Patch:
@@ -56,7 +56,7 @@ public void failoverServerWhenDown(String serverHost, NodeType nodeType) {
                 LOGGER.info("Master failover finished, masterServer: {}", serverHost);
                 break;
             case WORKER:
-                LOGGER.info("Worker failover staring, workerServer: {}", serverHost);
+                LOGGER.info("Worker failover starting, workerServer: {}", serverHost);
                 workerFailoverService.failoverWorker(serverHost);
                 LOGGER.info("Worker failover finished, workerServer: {}", serverHost);
                 break;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ResourcesServiceImpl.java
Patch:
@@ -763,7 +763,7 @@ public Result<PageInfo<StorageEntity>> queryResourceListPaging(User loginUser, S
         String trimmedSearchVal = searchVal != null ? searchVal.trim() : "";
         // filter based on trimmed searchVal
         List<StorageEntity> filteredResourceList = resourcesList.stream()
-                .filter(x -> x.getFileName().matches("(.*)" + trimmedSearchVal + "(.*)")).collect(Collectors.toList());
+                .filter(x -> x.getFileName().contains(trimmedSearchVal)).collect(Collectors.toList());
         // inefficient pagination
         List<StorageEntity> slicedResourcesList = filteredResourceList.stream().skip((long) (pageNo - 1) * pageSize)
                 .limit(pageSize).collect(Collectors.toList());

File: dolphinscheduler-tools/src/main/java/org/apache/dolphinscheduler/tools/datasource/upgrader/DolphinSchedulerUpgrader.java
Patch:
@@ -21,5 +21,5 @@ public interface DolphinSchedulerUpgrader {
 
     void doUpgrade();
 
-    String getCurrentVersion();
+    DolphinSchedulerVersion getCurrentVersion();
 }

File: dolphinscheduler-tools/src/main/java/org/apache/dolphinscheduler/tools/datasource/upgrader/v320/V320DolphinSchedulerUpgrader.java
Patch:
@@ -28,6 +28,7 @@
 import org.apache.dolphinscheduler.dao.mapper.TenantMapper;
 import org.apache.dolphinscheduler.dao.mapper.UserMapper;
 import org.apache.dolphinscheduler.tools.datasource.upgrader.DolphinSchedulerUpgrader;
+import org.apache.dolphinscheduler.tools.datasource.upgrader.DolphinSchedulerVersion;
 
 import org.apache.commons.collections4.CollectionUtils;
 
@@ -139,7 +140,7 @@ private void upgradeTaskInstance() {
     }
 
     @Override
-    public String getCurrentVersion() {
-        return "3.2.0";
+    public DolphinSchedulerVersion getCurrentVersion() {
+        return DolphinSchedulerVersion.V3_2_0;
     }
 }

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/constants/DataSourceConstants.java
Patch:
@@ -67,6 +67,7 @@ public class DataSourceConstants {
     public static final String JDBC_DB2 = "jdbc:db2://";
     public static final String JDBC_PRESTO = "jdbc:presto://";
     public static final String JDBC_REDSHIFT = "jdbc:redshift://";
+    public static final String JDBC_REDSHIFT_IAM = "jdbc:redshift:iam://";
     public static final String JDBC_ATHENA = "jdbc:awsathena://";
     public static final String JDBC_TRINO = "jdbc:trino://";
     public static final String JDBC_DAMENG = "jdbc:dm://";

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-redshift/src/test/java/org/apache/dolphinscheduler/plugin/datasource/redshift/param/RedshiftDataSourceProcessorTest.java
Patch:
@@ -49,7 +49,7 @@ public void testCreateConnectionParams() {
         redshiftDatasourceParamDTO.setUserName("awsuser");
         redshiftDatasourceParamDTO.setPassword("123456");
         redshiftDatasourceParamDTO.setOther(props);
-
+        redshiftDatasourceParamDTO.setMode(RedshiftAuthMode.PASSWORD);
         try (MockedStatic<PasswordUtils> mockedStaticPasswordUtils = Mockito.mockStatic(PasswordUtils.class)) {
             mockedStaticPasswordUtils.when(() -> PasswordUtils.encodePassword(Mockito.anyString())).thenReturn("test");
             RedshiftConnectionParam connectionParams = (RedshiftConnectionParam) redshiftDatasourceProcessor
@@ -63,7 +63,7 @@ public void testCreateConnectionParams() {
     public void testCreateConnectionParams2() {
         String connectionJson =
                 "{\"user\":\"awsuser\",\"password\":\"123456\",\"address\":\"jdbc:redshift://localhost:5439\""
-                        + ",\"database\":\"dev\",\"jdbcUrl\":\"jdbc:redshift://localhost:5439/dev\"}";
+                        + ",\"database\":\"dev\",\"jdbcUrl\":\"jdbc:redshift://localhost:5439/dev\",\"mode\":\"password\"}";
         RedshiftConnectionParam connectionParams = (RedshiftConnectionParam) redshiftDatasourceProcessor
                 .createConnectionParams(connectionJson);
         Assertions.assertNotNull(connectionParams);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java
Patch:
@@ -263,6 +263,9 @@ public enum Status {
     QUERY_TASK_INSTANCE_ERROR(10205, "query task instance error", "查询任务实例错误"),
     EXECUTE_NOT_DEFINE_TASK(10206, "please save and try again",
             "请先保存后再执行"),
+    START_NODE_NOT_EXIST_IN_LAST_PROCESS(10207, "this node {0} does not exist in the latest process definition",
+            "该节点 {0} 不存在于最新的流程定义中"),
+
     UDF_FUNCTION_NOT_EXIST(20001, "UDF function not found", "UDF函数不存在"),
     UDF_FUNCTION_EXISTS(20002, "UDF function already exists", "UDF函数已存在"),
     RESOURCE_NOT_EXIST(20004, "resource not exist", "资源不存在"),

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/python/PythonGateway.java
Patch:
@@ -389,7 +389,8 @@ public void execWorkflowInstance(String userName,
                 null,
                 DEFAULT_DRY_RUN,
                 DEFAULT_TEST_FLAG,
-                COMPLEMENT_DEPENDENT_MODE);
+                COMPLEMENT_DEPENDENT_MODE,
+                processDefinition.getVersion());
     }
 
     // side object

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ExecutorService.java
Patch:
@@ -69,7 +69,7 @@ Map<String, Object> execProcessInstance(User loginUser, long projectCode,
                                             Integer timeout,
                                             Map<String, String> startParams, Integer expectedParallelismNumber,
                                             int dryRun, int testFlag,
-                                            ComplementDependentMode complementDependentMode);
+                                            ComplementDependentMode complementDependentMode, Integer version);
 
     /**
      * check whether the process definition can be executed

File: dolphinscheduler-task-plugin/dolphinscheduler-task-zeppelin/src/main/java/org/apache/dolphinscheduler/plugin/task/zeppelin/ZeppelinTask.java
Patch:
@@ -107,7 +107,7 @@ public void handle(TaskCallBack taskCallBack) throws TaskException {
                 noteId = this.zClient.cloneNote(noteId, cloneNotePath);
             }
 
-            if (paragraphId == null) {
+            if (paragraphId == null || paragraphId.trim().length() == 0) {
                 final NoteResult noteResult = this.zClient.executeNote(noteId, zeppelinParamsMap);
                 final List<ParagraphResult> paragraphResultList = noteResult.getParagraphResultList();
                 StringBuilder resultContentBuilder = new StringBuilder();

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/constants/DataSourceConstants.java
Patch:
@@ -36,6 +36,7 @@ public class DataSourceConstants {
     public static final String COM_REDSHIFT_JDBC_DRIVER = "com.amazon.redshift.jdbc42.Driver";
     public static final String COM_ATHENA_JDBC_DRIVER = "com.simba.athena.jdbc.Driver";
     public static final String COM_TRINO_JDBC_DRIVER = "io.trino.jdbc.TrinoDriver";
+    public static final String COM_DAMENG_JDBC_DRIVER = "dm.jdbc.driver.DmDriver";
 
     /**
      * validation Query
@@ -51,6 +52,7 @@ public class DataSourceConstants {
     public static final String REDHIFT_VALIDATION_QUERY = "select 1";
     public static final String ATHENA_VALIDATION_QUERY = "select 1";
     public static final String TRINO_VALIDATION_QUERY = "select 1";
+    public static final String DAMENG_VALIDATION_QUERY = "select 1";
 
     /**
      * jdbc url
@@ -67,6 +69,7 @@ public class DataSourceConstants {
     public static final String JDBC_REDSHIFT = "jdbc:redshift://";
     public static final String JDBC_ATHENA = "jdbc:awsathena://";
     public static final String JDBC_TRINO = "jdbc:trino://";
+    public static final String JDBC_DAMENG = "jdbc:dm://";
 
     /**
      * database type

File: dolphinscheduler-spi/src/main/java/org/apache/dolphinscheduler/spi/enums/DbType.java
Patch:
@@ -42,7 +42,8 @@ public enum DbType {
     ATHENA(11, "athena"),
     TRINO(12, "trino"),
     STARROCKS(13, "starrocks"),
-    AZURESQL(14, "azuresql");
+    AZURESQL(14, "azuresql"),
+    DAMENG(15, "dameng");
 
     private static final Map<Integer, DbType> DB_TYPE_MAP =
             Arrays.stream(DbType.values()).collect(toMap(DbType::getCode, Functions.identity()));

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/constants/Constants.java
Patch:
@@ -329,6 +329,9 @@ private Constants() {
     public static final String THREAD_NAME_WORKER_SERVER = "Worker-Server";
     public static final String THREAD_NAME_ALERT_SERVER = "Alert-Server";
 
+    // suffix of crc file
+    public static final String CRC_SUFFIX = ".crc";
+
     /**
      * complement date default cron string
      */

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/python/PythonGateway.java
Patch:
@@ -348,6 +348,8 @@ private void createOrUpdateSchedule(User user,
             schedulerService.updateSchedule(user, projectCode, scheduleId, schedule, WarningType.valueOf(warningType),
                     warningGroupId, DEFAULT_FAILURE_STRATEGY, DEFAULT_PRIORITY, workerGroup, DEFAULT_ENVIRONMENT_CODE);
         }
+        // Always set workflow online to set schedule online
+        processDefinitionService.releaseProcessDefinition(user, projectCode, workflowCode, ReleaseState.ONLINE);
         schedulerService.setScheduleState(user, projectCode, scheduleId, ReleaseState.ONLINE);
     }
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java
Patch:
@@ -408,7 +408,6 @@ public enum Status {
     COMMAND_STATE_COUNT_ERROR(80001, "task instance state count error", "查询各状态任务实例数错误"),
     NEGTIVE_SIZE_NUMBER_ERROR(80002, "query size number error", "查询size错误"),
     START_TIME_BIGGER_THAN_END_TIME_ERROR(80003, "start time bigger than end time error", "开始时间在结束时间之后错误"),
-    START_TIME_BEFORE_CURRENT_TIME_ERROR(80004, "start time before current time error", "开始时间在当前时间之前错误"),
     QUEUE_COUNT_ERROR(90001, "queue count error", "查询队列数据错误"),
 
     KERBEROS_STARTUP_STATE(100001, "get kerberos startup state error", "获取kerberos启动状态错误"),

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java
Patch:
@@ -408,6 +408,7 @@ public enum Status {
     COMMAND_STATE_COUNT_ERROR(80001, "task instance state count error", "查询各状态任务实例数错误"),
     NEGTIVE_SIZE_NUMBER_ERROR(80002, "query size number error", "查询size错误"),
     START_TIME_BIGGER_THAN_END_TIME_ERROR(80003, "start time bigger than end time error", "开始时间在结束时间之后错误"),
+    START_TIME_BEFORE_CURRENT_TIME_ERROR(80004, "start time before current time error", "开始时间在当前时间之前错误"),
     QUEUE_COUNT_ERROR(90001, "queue count error", "查询队列数据错误"),
 
     KERBEROS_STARTUP_STATE(100001, "get kerberos startup state error", "获取kerberos启动状态错误"),

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/ProcessDefinition.java
Patch:
@@ -121,7 +121,7 @@ public class ProcessDefinition {
     private int userId;
 
     /**
-     * user name
+     * create user name
      */
     @TableField(exist = false)
     private String userName;

File: dolphinscheduler-task-plugin/dolphinscheduler-task-sagemaker/src/main/java/org/apache/dolphinscheduler/plugin/task/sagemaker/PipelineUtils.java
Patch:
@@ -72,7 +72,7 @@ public int checkPipelineExecutionStatus(AmazonSageMaker client, PipelineId pipel
             logger.info("check Pipeline Steps running");
             listPipelineExecutionSteps(client, pipelineId);
             ThreadUtils.sleep(SagemakerConstants.CHECK_PIPELINE_EXECUTION_STATUS_INTERVAL);
-            describePipelineExecution(client, pipelineId);
+            pipelineStatus = describePipelineExecution(client, pipelineId);
         }
 
         int exitStatusCode = TaskConstants.EXIT_CODE_FAILURE;

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/event/StateEventHandler.java
Patch:
@@ -23,7 +23,7 @@
 public interface StateEventHandler {
 
     /**
-     * Handle a event, if handle success will reture true, else return false
+     * Handle an event, if handle success will return true, else return false
      *
      * @param stateEvent given state event.
      * @throws StateEventHandleException this exception means it can be recovered.

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/event/TaskTimeoutStateEventHandler.java
Patch:
@@ -52,7 +52,7 @@ public boolean handleStateEvent(WorkflowExecuteRunnable workflowExecuteRunnable,
                                 "Cannot find the task instance from workflow execute runnable, taskInstanceId: %s",
                                 taskStateEvent.getTaskInstanceId())));
 
-        logger.info("Handle task instance state timout event, taskInstanceId: {}", taskStateEvent.getTaskInstanceId());
+        logger.info("Handle task instance state timeout event, taskInstanceId: {}", taskStateEvent.getTaskInstanceId());
 
         if (TimeoutFlag.CLOSE == taskInstance.getTaskDefine().getTimeoutFlag()) {
             return true;

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/StateWheelExecuteThread.java
Patch:
@@ -342,7 +342,7 @@ private void checkTask4Retry() {
                 if (taskInstance.getState() != TaskExecutionStatus.NEED_FAULT_TOLERANCE
                         && taskInstance.retryTaskIntervalOverTime()) {
                     // reset taskInstance endTime and state
-                    // todo relative funtion: TaskInstance.retryTaskIntervalOverTime,
+                    // todo relative function: TaskInstance.retryTaskIntervalOverTime,
                     // WorkflowExecuteThread.cloneRetryTaskInstance
                     logger.info("[TaskInstanceKey-{}:{}]The task instance can retry, will retry this task instance",
                             taskInstance.getTaskCode(), taskInstance.getTaskDefinitionVersion());

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/WorkflowExecuteRunnable.java
Patch:
@@ -1115,7 +1115,7 @@ public TaskInstance cloneRetryTaskInstance(TaskInstance taskInstance) {
         newTaskInstance.setProcessDefine(taskInstance.getProcessDefine());
         newTaskInstance.setProcessInstance(processInstance);
         newTaskInstance.setRetryTimes(taskInstance.getRetryTimes() + 1);
-        // todo relative funtion: TaskInstance.retryTaskIntervalOverTime
+        // todo relative function: TaskInstance.retryTaskIntervalOverTime
         newTaskInstance.setState(taskInstance.getState());
         newTaskInstance.setEndTime(taskInstance.getEndTime());
 

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/event/WorkflowStartEventHandler.java
Patch:
@@ -63,12 +63,12 @@ public void handleWorkflowEvent(final WorkflowEvent workflowEvent) throws Workfl
         CompletableFuture.supplyAsync(workflowExecuteRunnable::call, workflowExecuteThreadPool)
                 .thenAccept(workflowSubmitStatue -> {
                     if (WorkflowSubmitStatue.SUCCESS == workflowSubmitStatue) {
-                        // submit failed will resend the event to workflow event queue
                         logger.info("Success submit the workflow instance");
                         if (processInstance.getTimeout() > 0) {
                             stateWheelExecuteThread.addProcess4TimeoutCheck(processInstance);
                         }
                     } else {
+                        // submit failed will resend the event to workflow event queue
                         logger.error("Failed to submit the workflow instance, will resend the workflow start event: {}",
                                 workflowEvent);
                         workflowEventQueue.addEvent(workflowEvent);

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/WorkflowExecuteRunnable.java
Patch:
@@ -991,7 +991,7 @@ private Optional<TaskInstance> submitTaskExec(TaskInstance taskInstance) {
 
             // if we use task group, then need to acquire the task group resource
             // if there is no resource the current task instance will not be dispatched
-            // it will be weakup when other tasks release the resource.
+            // it will be wakeup when other tasks release the resource.
             int taskGroupId = taskInstance.getTaskGroupId();
             if (taskGroupId > 0) {
                 boolean acquireTaskGroup = processService.acquireTaskGroup(taskInstance.getId(),

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProcessTaskRelationV2Controller.java
Patch:
@@ -125,7 +125,8 @@ public Result<List<ProcessTaskRelation>> updateUpstreamTaskDefinition(@Parameter
                                                                           @PathVariable("code") Long code,
                                                                           @RequestBody TaskRelationUpdateUpstreamRequest taskRelationUpdateUpstreamRequest) {
         List<ProcessTaskRelation> processTaskRelations = processTaskRelationService
-                .updateUpstreamTaskDefinition(loginUser, code, taskRelationUpdateUpstreamRequest);
+                .updateUpstreamTaskDefinitionWithSyncDag(loginUser, code, Boolean.TRUE,
+                        taskRelationUpdateUpstreamRequest);
         return Result.success(processTaskRelations);
     }
 }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/dto/workflow/WorkflowUpdateRequest.java
Patch:
@@ -103,8 +103,6 @@ public ProcessDefinition mergeIntoProcessDefinition(ProcessDefinition processDef
             processDefinitionDeepCopy.setLocations(this.location);
         }
 
-        int version = processDefinitionDeepCopy.getVersion() + 1;
-        processDefinitionDeepCopy.setVersion(version);
         processDefinitionDeepCopy.setUpdateTime(new Date());
         return processDefinitionDeepCopy;
     }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java
Patch:
@@ -381,6 +381,7 @@ public enum Status {
             "批量创建工作流任务关系 {0} 错误"),
     PROCESS_TASK_RELATION_BATCH_UPDATE_ERROR(50070, "batch update process task relation error",
             "批量修改工作流任务关系错误"),
+    UPSTREAM_TASK_NOT_EXISTS(50071, "upstream task want to set dependence do not exists {0}", "指定的上游任务 {0} 不存在"),
 
     WORKFLOW_INSTANCE_IS_NOT_FINISHED(50071, "the workflow instance is not finished, can not do this operation",
             "工作流实例未结束，不能执行此操作"),

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-presto/src/test/java/org/apache/dolphinscheduler/plugin/datasource/presto/param/PrestoDataSourceProcessorTest.java
Patch:
@@ -77,8 +77,7 @@ public void testGetDatasourceDriver() {
     public void testGetJdbcUrl() {
         PrestoConnectionParam prestoConnectionParam = new PrestoConnectionParam();
         prestoConnectionParam.setJdbcUrl("jdbc:postgresql://localhost:1234/default");
-        prestoConnectionParam.setOther("other");
-        Assertions.assertEquals("jdbc:postgresql://localhost:1234/default?other",
+        Assertions.assertEquals("jdbc:postgresql://localhost:1234/default",
                 prestoDatasourceProcessor.getJdbcUrl(prestoConnectionParam));
 
     }

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-spark/src/test/java/org/apache/dolphinscheduler/plugin/datasource/spark/param/SparkDataSourceProcessorTest.java
Patch:
@@ -83,8 +83,7 @@ public void testGetDatasourceDriver() {
     public void testGetJdbcUrl() {
         SparkConnectionParam sparkConnectionParam = new SparkConnectionParam();
         sparkConnectionParam.setJdbcUrl("jdbc:hive2://localhost1:1234,localhost2:1234/default");
-        sparkConnectionParam.setOther("other");
-        Assertions.assertEquals("jdbc:hive2://localhost1:1234,localhost2:1234/default;other",
+        Assertions.assertEquals("jdbc:hive2://localhost1:1234,localhost2:1234/default",
                 sparkDatasourceProcessor.getJdbcUrl(sparkConnectionParam));
     }
 

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-sqlserver/src/test/java/org/apache/dolphinscheduler/plugin/datasource/sqlserver/param/SQLServerDataSourceProcessorTest.java
Patch:
@@ -81,8 +81,7 @@ public void testGetDatasourceDriver() {
     public void testGetJdbcUrl() {
         SQLServerConnectionParam sqlServerConnectionParam = new SQLServerConnectionParam();
         sqlServerConnectionParam.setJdbcUrl("jdbc:sqlserver://localhost:1234;databaseName=default");
-        sqlServerConnectionParam.setOther("other");
-        Assertions.assertEquals("jdbc:sqlserver://localhost:1234;databaseName=default;other",
+        Assertions.assertEquals("jdbc:sqlserver://localhost:1234;databaseName=default",
                 sqlServerDatasourceProcessor.getJdbcUrl(sqlServerConnectionParam));
     }
 

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-trino/src/test/java/org/apache/dolphinscheduler/plugin/datasource/trino/param/TrinoDataSourceProcessorTest.java
Patch:
@@ -77,8 +77,7 @@ public void testGetDatasourceDriver() {
     public void testGetJdbcUrl() {
         TrinoConnectionParam TrinoConnectionParam = new TrinoConnectionParam();
         TrinoConnectionParam.setJdbcUrl("jdbc:postgresql://localhost:8080/default");
-        TrinoConnectionParam.setOther("other");
-        Assertions.assertEquals("jdbc:postgresql://localhost:8080/default?other",
+        Assertions.assertEquals("jdbc:postgresql://localhost:8080/default",
                 TrinoDatasourceProcessor.getJdbcUrl(TrinoConnectionParam));
 
     }

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/parameters/AbstractParameters.java
Patch:
@@ -139,7 +139,7 @@ public void dealOutParam(String result) {
             return;
         }
         if (StringUtils.isEmpty(result)) {
-            varPool.addAll(outProperty);
+            outProperty.forEach(this::addPropertyToValPool);
             return;
         }
         Map<String, String> taskResult = getMapByString(result);

File: dolphinscheduler-e2e/dolphinscheduler-e2e-case/src/test/java/org/apache/dolphinscheduler/e2e/pages/security/TokenPage.java
Patch:
@@ -80,8 +80,8 @@ public TokenPage create(String userName) {
                         userName)))
                 .click();
 
-        createTokenForm().buttonGenerateToken().click();
         new WebDriverWait(driver, 10).until(ExpectedConditions.elementToBeClickable(createTokenForm().buttonGenerateToken()));
+        createTokenForm().buttonGenerateToken().click();
 
         createTokenForm().buttonSubmit().click();
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/TaskDefinitionController.java
Patch:
@@ -349,7 +349,6 @@ public Result queryTaskDefinitionDetail(@Parameter(hidden = true) @RequestAttrib
     @AccessLogAnnotation(ignoreRequestArgs = "loginUser")
     public Result queryTaskDefinitionListPaging(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,
                                                 @Parameter(name = "projectCode", description = "PROJECT_CODE", required = true) @PathVariable long projectCode,
-                                                @RequestParam(value = "searchWorkflowName", required = false) String searchWorkflowName,
                                                 @RequestParam(value = "searchTaskName", required = false) String searchTaskName,
                                                 @RequestParam(value = "taskType", required = false) String taskType,
                                                 @RequestParam(value = "taskExecuteType", required = false, defaultValue = "BATCH") TaskExecuteType taskExecuteType,
@@ -359,9 +358,8 @@ public Result queryTaskDefinitionListPaging(@Parameter(hidden = true) @RequestAt
         if (!result.checkResult()) {
             return result;
         }
-        searchWorkflowName = ParameterUtils.handleEscapes(searchWorkflowName);
         searchTaskName = ParameterUtils.handleEscapes(searchTaskName);
-        return taskDefinitionService.queryTaskDefinitionListPaging(loginUser, projectCode, searchWorkflowName,
+        return taskDefinitionService.queryTaskDefinitionListPaging(loginUser, projectCode,
                 searchTaskName, taskType, taskExecuteType, pageNo, pageSize);
     }
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/TaskDefinitionService.java
Patch:
@@ -217,7 +217,6 @@ Map<String, Object> queryTaskDefinitionDetail(User loginUser,
      *
      * @param loginUser login user
      * @param projectCode project code
-     * @param searchWorkflowName searchWorkflowName
      * @param searchTaskName searchTaskName
      * @param taskType taskType
      * @param taskExecuteType taskExecuteType
@@ -227,7 +226,6 @@ Map<String, Object> queryTaskDefinitionDetail(User loginUser,
      */
     Result queryTaskDefinitionListPaging(User loginUser,
                                          long projectCode,
-                                         String searchWorkflowName,
                                          String searchTaskName,
                                          String taskType,
                                          TaskExecuteType taskExecuteType,

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/TaskInstanceMapper.java
Patch:
@@ -155,4 +155,6 @@ List<TaskInstance> loadAllInfosNoRelease(@Param("processInstanceId") int process
                                              @Param("status") int status);
 
     void deleteByWorkflowInstanceId(@Param("workflowInstanceId") int workflowInstanceId);
+
+    List<TaskInstance> findByWorkflowInstanceId(@Param("workflowInstanceId") Integer workflowInstanceId);
 }

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/repository/TaskInstanceDao.java
Patch:
@@ -89,4 +89,5 @@ public interface TaskInstanceDao {
 
     void deleteByWorkflowInstanceId(int workflowInstanceId);
 
+    List<TaskInstance> findTaskInstanceByWorkflowInstanceId(Integer processInstanceId);
 }

File: dolphinscheduler-service/src/test/java/org/apache/dolphinscheduler/service/log/LogClientTest.java
Patch:
@@ -151,7 +151,7 @@ public void testRemoveTaskLog() throws Exception {
                     .thenReturn(command);
 
             LogClient logClient = new LogClient();
-            Boolean status = logClient.removeTaskLog("localhost", 1234, "/log/path");
+            Boolean status = logClient.removeTaskLog(Host.of("localhost:1234"), "/log/path");
             Assertions.assertTrue(status);
         }
     }

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/event/TaskRetryStateEventHandler.java
Patch:
@@ -39,7 +39,7 @@ public boolean handleStateEvent(WorkflowExecuteRunnable workflowExecuteRunnable,
                                     StateEvent stateEvent) throws StateEventHandleException {
         TaskStateEvent taskStateEvent = (TaskStateEvent) stateEvent;
 
-        logger.info("Handle task instance retry event, taskInstanceId: {}", taskStateEvent.getTaskInstanceId());
+        logger.info("Handle task instance retry event, taskCode: {}", taskStateEvent.getTaskCode());
 
         TaskMetrics.incTaskInstanceByState("retry");
         Map<Long, TaskInstance> waitToRetryTaskInstanceMap = workflowExecuteRunnable.getWaitToRetryTaskInstanceMap();

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/StateWheelExecuteThread.java
Patch:
@@ -422,7 +422,6 @@ private void addProcessStopEvent(ProcessInstance processInstance) {
     private void addTaskRetryEvent(TaskInstance taskInstance) {
         TaskStateEvent stateEvent = TaskStateEvent.builder()
                 .processInstanceId(taskInstance.getProcessInstanceId())
-                .taskInstanceId(taskInstance.getId())
                 .taskCode(taskInstance.getTaskCode())
                 .status(TaskExecutionStatus.RUNNING_EXECUTION)
                 .type(StateEventType.TASK_RETRY)

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/TaskInstanceMapper.java
Patch:
@@ -153,4 +153,6 @@ IPage<TaskInstance> queryStreamTaskInstanceListPaging(IPage<TaskInstance> page,
 
     List<TaskInstance> loadAllInfosNoRelease(@Param("processInstanceId") int processInstanceId,
                                              @Param("status") int status);
+
+    void deleteByWorkflowInstanceId(@Param("workflowInstanceId") int workflowInstanceId);
 }

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/repository/TaskInstanceDao.java
Patch:
@@ -87,4 +87,6 @@ public interface TaskInstanceDao {
      */
     List<TaskInstance> findTaskInstanceByIdList(List<Integer> idList);
 
+    void deleteByWorkflowInstanceId(int workflowInstanceId);
+
 }

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessService.java
Patch:
@@ -83,8 +83,6 @@ ProcessInstance handleCommand(String host,
 
     void removeTaskLogFile(Integer processInstanceId);
 
-    void deleteWorkTaskInstanceByProcessInstanceId(int processInstanceId);
-
     void recurseFindSubProcess(long parentCode, List<Long> ids);
 
     Tenant getTenantForProcess(int tenantId, int userId);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProjectServiceImpl.java
Patch:
@@ -17,7 +17,9 @@
 
 package org.apache.dolphinscheduler.api.service.impl;
 
-import static org.apache.dolphinscheduler.api.constants.ApiFuncIdentificationConstant.*;
+import static org.apache.dolphinscheduler.api.constants.ApiFuncIdentificationConstant.PROJECT;
+import static org.apache.dolphinscheduler.api.constants.ApiFuncIdentificationConstant.PROJECT_CREATE;
+import static org.apache.dolphinscheduler.api.constants.ApiFuncIdentificationConstant.PROJECT_DELETE;
 
 import org.apache.dolphinscheduler.api.enums.Status;
 import org.apache.dolphinscheduler.api.exceptions.ServiceException;

File: dolphinscheduler-aop/src/main/java/org/apache/dolphinscheduler/aop/YarnClientAspect.java
Patch:
@@ -83,11 +83,10 @@ public void registerApplicationInfo(ApplicationSubmissionContext appContext, App
      *
      * @param appReport current application report when invoking getApplicationReport within submitApplication
      * @param appId     current application id, which is the parameter of getApplicationReport
-     * @throws Throwable exceptions
      */
     @AfterReturning(pointcut = "cflow(execution(ApplicationId org.apache.hadoop.yarn.client.api.impl.YarnClientImpl.submitApplication(ApplicationSubmissionContext))) "
             +
-            "&& !within(CfowAspect) && execution(ApplicationReport org.apache.hadoop.yarn.client.api.impl.YarnClientImpl.getApplicationReport(ApplicationId)) && args(appId)", returning = "appReport", argNames = "appReport,appId")
+            "&& !within(YarnClientAspect) && execution(ApplicationReport org.apache.hadoop.yarn.client.api.impl.YarnClientImpl.getApplicationReport(ApplicationId)) && args(appId)", returning = "appReport", argNames = "appReport,appId")
     public void registerApplicationReport(ApplicationReport appReport, ApplicationId appId) {
         currentApplicationReport = appReport;
     }

File: dolphinscheduler-aop/src/test/java/org/apache/dolphinscheduler/poc/YarnClientAspectMoc.java
Patch:
@@ -40,7 +40,7 @@ public void submitApplication(ApplicationSubmissionContext appContext, Applicati
 
     @AfterReturning(pointcut = "cflow(execution(ApplicationId org.apache.dolphinscheduler.poc.YarnClientMoc.submitApplication(ApplicationSubmissionContext))) "
             +
-            "&& !within(CfowAspect) && execution(ApplicationId org.apache.dolphinscheduler.poc.YarnClientMoc.createAppId())", returning = "submittedAppId")
+            "&& !within(YarnClientAspect) && execution(ApplicationId org.apache.dolphinscheduler.poc.YarnClientMoc.createAppId())", returning = "submittedAppId")
     public void createAppId(ApplicationId submittedAppId) {
         privateId = submittedAppId;
         logger.info("YarnClientAspectMoc[createAppId]: created submittedAppId {}", submittedAppId);

File: dolphinscheduler-task-plugin/dolphinscheduler-task-flink/src/main/java/org/apache/dolphinscheduler/plugin/task/flink/FlinkArgsUtils.java
Patch:
@@ -126,9 +126,9 @@ public static List<String> buildInitOptionsForSql(FlinkParameters flinkParameter
         /**
          * Currently flink sql on yarn only supports yarn-per-job mode
          */
-        if (FlinkDeployMode.CLUSTER == deployMode) {
+        if (FlinkDeployMode.LOCAL == deployMode) {
             // execution.target
-            initOptions.add(String.format(FlinkConstants.FLINK_FORMAT_EXECUTION_TARGET, "local"));
+            initOptions.add(String.format(FlinkConstants.FLINK_FORMAT_EXECUTION_TARGET, FlinkConstants.FLINK_LOCAL));
         } else {
             // execution.target
             initOptions.add(

File: dolphinscheduler-task-plugin/dolphinscheduler-task-flink/src/main/java/org/apache/dolphinscheduler/plugin/task/flink/FlinkConstants.java
Patch:
@@ -43,6 +43,7 @@ private FlinkConstants() {
     public static final String FLINK_YARN_CLUSTER = "yarn-cluster";
     public static final String FLINK_YARN_APPLICATION = "yarn-application";
     public static final String FLINK_YARN_PER_JOB = "yarn-per-job";
+    public static final String FLINK_LOCAL = "local";
     public static final String FLINK_RUN_MODE = "-m";
     public static final String FLINK_EXECUTION_TARGET = "-t";
     public static final String FLINK_YARN_SLOT = "-ys";

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/ProcessInstance.java
Patch:
@@ -37,6 +37,7 @@
 import lombok.Data;
 import lombok.NoArgsConstructor;
 
+import com.baomidou.mybatisplus.annotation.FieldStrategy;
 import com.baomidou.mybatisplus.annotation.IdType;
 import com.baomidou.mybatisplus.annotation.TableField;
 import com.baomidou.mybatisplus.annotation.TableId;
@@ -95,6 +96,7 @@ public class ProcessInstance {
     /**
      * end time
      */
+    @TableField(updateStrategy = FieldStrategy.IGNORED)
     private Date endTime;
 
     /**

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/LoggerController.java
Patch:
@@ -81,7 +81,7 @@ public Result<ResponseTaskLog> queryLog(@Parameter(hidden = true) @RequestAttrib
                                             @RequestParam(value = "taskInstanceId") int taskInstanceId,
                                             @RequestParam(value = "skipLineNum") int skipNum,
                                             @RequestParam(value = "limit") int limit) {
-        return loggerService.queryLog(taskInstanceId, skipNum, limit);
+        return loggerService.queryLog(loginUser, taskInstanceId, skipNum, limit);
     }
 
     /**
@@ -101,7 +101,7 @@ public Result<ResponseTaskLog> queryLog(@Parameter(hidden = true) @RequestAttrib
     @AccessLogAnnotation(ignoreRequestArgs = "loginUser")
     public ResponseEntity downloadTaskLog(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,
                                           @RequestParam(value = "taskInstanceId") int taskInstanceId) {
-        byte[] logBytes = loggerService.getLogBytes(taskInstanceId);
+        byte[] logBytes = loggerService.getLogBytes(loginUser, taskInstanceId);
         return ResponseEntity
                 .ok()
                 .header(HttpHeaders.CONTENT_DISPOSITION,

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProcessInstanceServiceImpl.java
Patch:
@@ -375,7 +375,7 @@ public Map<String, Object> queryTaskListByProcessId(User loginUser, long project
         }
         List<TaskInstance> taskInstanceList =
                 taskInstanceDao.findValidTaskListByProcessId(processId, processInstance.getTestFlag());
-        addDependResultForTaskList(taskInstanceList);
+        addDependResultForTaskList(loginUser, taskInstanceList);
         Map<String, Object> resultMap = new HashMap<>();
         resultMap.put(PROCESS_INSTANCE_STATE, processInstance.getState().toString());
         resultMap.put(TASK_LIST, taskInstanceList);
@@ -388,12 +388,12 @@ public Map<String, Object> queryTaskListByProcessId(User loginUser, long project
     /**
      * add dependent result for dependent task
      */
-    private void addDependResultForTaskList(List<TaskInstance> taskInstanceList) throws IOException {
+    private void addDependResultForTaskList(User loginUser, List<TaskInstance> taskInstanceList) throws IOException {
         for (TaskInstance taskInstance : taskInstanceList) {
             if (TASK_TYPE_DEPENDENT.equalsIgnoreCase(taskInstance.getTaskType())) {
                 logger.info("DEPENDENT type task instance need to set dependent result, taskCode:{}, taskInstanceId:{}",
                         taskInstance.getTaskCode(), taskInstance.getId());
-                Result<ResponseTaskLog> logResult = loggerService.queryLog(
+                Result<ResponseTaskLog> logResult = loggerService.queryLog(loginUser,
                         taskInstance.getId(), Constants.LOG_QUERY_SKIP_LINE_NUMBER, Constants.LOG_QUERY_LIMIT);
                 if (logResult.getCode() == Status.SUCCESS.ordinal()) {
                     String log = logResult.getData().getMessage();

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProcessInstanceServiceTest.java
Patch:
@@ -414,7 +414,7 @@ public void testQueryTaskListByProcessId() throws IOException {
                 .thenReturn(Optional.of(processInstance));
         when(taskInstanceDao.findValidTaskListByProcessId(processInstance.getId(), processInstance.getTestFlag()))
                 .thenReturn(taskInstanceList);
-        when(loggerService.queryLog(taskInstance.getId(), 0, 4098)).thenReturn(res);
+        when(loggerService.queryLog(loginUser, taskInstance.getId(), 0, 4098)).thenReturn(res);
         Map<String, Object> successRes = processInstanceService.queryTaskListByProcessId(loginUser, projectCode, 1);
         Assertions.assertEquals(Status.SUCCESS, successRes.get(Constants.STATUS));
     }

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/task/MasterHeartBeatTask.java
Patch:
@@ -68,7 +68,7 @@ public MasterHeartBeat getHeartBeat() {
     public void writeHeartBeat(MasterHeartBeat masterHeartBeat) {
         String masterHeartBeatJson = JSONUtils.toJsonString(masterHeartBeat);
         registryClient.persistEphemeral(heartBeatPath, masterHeartBeatJson);
-        log.info("Success write master heartBeatInfo into registry, masterRegistryPath: {}, heartBeatInfo: {}",
+        log.debug("Success write master heartBeatInfo into registry, masterRegistryPath: {}, heartBeatInfo: {}",
                 heartBeatPath, masterHeartBeatJson);
     }
 }

File: dolphinscheduler-worker/src/main/java/org/apache/dolphinscheduler/server/worker/task/WorkerHeartBeatTask.java
Patch:
@@ -59,9 +59,8 @@ public WorkerHeartBeat getHeartBeat() {
         double reservedMemory = workerConfig.getReservedMemory();
         double availablePhysicalMemorySize = OSUtils.availablePhysicalMemorySize();
         int execThreads = workerConfig.getExecThreads();
-        int workerWaitingTaskCount = this.workerWaitingTaskCount.get();
         int serverStatus = getServerStatus(loadAverage, maxCpuLoadAvg, availablePhysicalMemorySize, reservedMemory,
-                execThreads, workerWaitingTaskCount);
+                execThreads, this.workerWaitingTaskCount.get());
 
         return WorkerHeartBeat.builder()
                 .startupTime(ServerLifeCycleManager.getServerStartupTime())
@@ -86,7 +85,7 @@ public void writeHeartBeat(WorkerHeartBeat workerHeartBeat) {
         String workerHeartBeatJson = JSONUtils.toJsonString(workerHeartBeat);
         String workerRegistryPath = workerConfig.getWorkerRegistryPath();
         registryClient.persistEphemeral(workerRegistryPath, workerHeartBeatJson);
-        log.info(
+        log.debug(
                 "Success write worker group heartBeatInfo into registry, workerRegistryPath: {} workerHeartBeatInfo: {}",
                 workerRegistryPath, workerHeartBeatJson);
     }

File: dolphinscheduler-task-plugin/dolphinscheduler-task-sql/src/main/java/org/apache/dolphinscheduler/plugin/task/sql/SqlTask.java
Patch:
@@ -319,7 +319,7 @@ private String resultProcess(ResultSet resultSet) throws Exception {
         String result = resultJSONArray.isEmpty() ? JSONUtils.toJsonString(generateEmptyRow(resultSet))
                 : JSONUtils.toJsonString(resultJSONArray);
 
-        if (sqlParameters.getSendEmail() == null || sqlParameters.getSendEmail()) {
+        if (Boolean.TRUE.equals(sqlParameters.getSendEmail())) {
             sendAttachment(sqlParameters.getGroupId(), StringUtils.isNotEmpty(sqlParameters.getTitle())
                     ? sqlParameters.getTitle()
                     : taskExecutionContext.getTaskName() + " query result sets", result);

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/utils/DependentExecute.java
Patch:
@@ -205,8 +205,8 @@ private ProcessInstance findLastProcessInterval(Long definitionCode, DateInterva
             return lastManualProcess;
         }
 
-        return (lastManualProcess.getEndTime().after(lastSchedulerProcess.getEndTime())) ? lastManualProcess
-                : lastSchedulerProcess;
+        // In the time range, there are both manual and scheduled workflow instances, return the last workflow instance
+        return lastManualProcess.getId() > lastSchedulerProcess.getId() ? lastManualProcess : lastSchedulerProcess;
     }
 
     /**

File: dolphinscheduler-task-plugin/dolphinscheduler-task-python/src/main/java/org/apache/dolphinscheduler/plugin/task/python/PythonTask.java
Patch:
@@ -114,6 +114,7 @@ public void handle(TaskCallBack taskCallBack) throws TaskException {
             setExitStatusCode(taskResponse.getExitStatusCode());
             setProcessId(taskResponse.getProcessId());
             setVarPool(shellCommandExecutor.getVarPool());
+            pythonParameters.dealOutParam(shellCommandExecutor.getVarPool());
         } catch (Exception e) {
             logger.error("python task failure", e);
             setExitStatusCode(TaskConstants.EXIT_CODE_FAILURE);

File: dolphinscheduler-scheduler-plugin/dolphinscheduler-scheduler-quartz/src/main/java/org/apache/dolphinscheduler/scheduler/quartz/ProcessScheduleTask.java
Patch:
@@ -100,6 +100,7 @@ protected void executeInternal(JobExecutionContext context) {
         String workerGroup = StringUtils.isEmpty(schedule.getWorkerGroup()) ? Constants.DEFAULT_WORKER_GROUP
                 : schedule.getWorkerGroup();
         command.setWorkerGroup(workerGroup);
+        command.setEnvironmentCode(schedule.getEnvironmentCode());
         command.setWarningType(schedule.getWarningType());
         command.setProcessInstancePriority(schedule.getProcessInstancePriority());
         command.setProcessDefinitionVersion(processDefinition.getVersion());

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/WorkflowExecuteThreadPool.java
Patch:
@@ -122,6 +122,7 @@ public void onFailure(Throwable ex) {
                 LoggerUtils.setWorkflowInstanceIdMDC(processInstanceId);
                 try {
                     logger.error("Workflow instance events handle failed", ex);
+                    notifyProcessChanged(workflowExecuteThread.getProcessInstance());
                     multiThreadFilterMap.remove(workflowExecuteThread.getKey());
                 } finally {
                     LoggerUtils.removeWorkflowInstanceIdMDC();

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/event/StateEvent.java
Patch:
@@ -31,7 +31,7 @@ public interface StateEvent {
 
     int getProcessInstanceId();
 
-    int getTaskInstanceId();
+    Integer getTaskInstanceId();
 
     @NonNull
     StateEventType getType();

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/event/TaskStateEvent.java
Patch:
@@ -36,7 +36,7 @@ public class TaskStateEvent implements StateEvent {
     // todo: use wrapper type
     private int processInstanceId;
 
-    private int taskInstanceId;
+    private Integer taskInstanceId;
 
     private long taskCode;
 

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/event/WorkflowStateEvent.java
Patch:
@@ -39,7 +39,7 @@ public class WorkflowStateEvent implements StateEvent {
     /**
      * Some event may contains taskInstanceId
      */
-    private int taskInstanceId;
+    private Integer taskInstanceId;
 
     private WorkflowExecutionStatus status;
 

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/utils/LoggerUtils.java
Patch:
@@ -79,16 +79,16 @@ public static String readWholeFileContent(String filePath) {
         return "";
     }
 
-    public static void setWorkflowAndTaskInstanceIDMDC(int workflowInstanceId, int taskInstanceId) {
+    public static void setWorkflowAndTaskInstanceIDMDC(Integer workflowInstanceId, Integer taskInstanceId) {
         setWorkflowInstanceIdMDC(workflowInstanceId);
         setTaskInstanceIdMDC(taskInstanceId);
     }
 
-    public static void setWorkflowInstanceIdMDC(int workflowInstanceId) {
+    public static void setWorkflowInstanceIdMDC(Integer workflowInstanceId) {
         MDC.put(Constants.WORKFLOW_INSTANCE_ID_MDC_KEY, String.valueOf(workflowInstanceId));
     }
 
-    public static void setTaskInstanceIdMDC(int taskInstanceId) {
+    public static void setTaskInstanceIdMDC(Integer taskInstanceId) {
         MDC.put(Constants.TASK_INSTANCE_ID_MDC_KEY, String.valueOf(taskInstanceId));
     }
 

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/CommandMapper.java
Patch:
@@ -54,7 +54,7 @@ List<CommandCount> countCommandState(
      * query command page by slot
      * @return command list
      */
-    List<Command> queryCommandPageBySlot(@Param("limit") int limit, @Param("offset") int offset,
+    List<Command> queryCommandPageBySlot(@Param("limit") int limit,
                                          @Param("masterCount") int masterCount,
                                          @Param("thisMasterSlot") int thisMasterSlot);
 }

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/CommandMapperTest.java
Patch:
@@ -176,7 +176,7 @@ private boolean toTestQueryCommandPageBySlot(int masterCount, int thisMasterSlot
         Command command = createCommand();
         Integer id = command.getId();
         boolean hit = id % masterCount == thisMasterSlot;
-        List<Command> commandList = commandMapper.queryCommandPageBySlot(1, 0, masterCount, thisMasterSlot);
+        List<Command> commandList = commandMapper.queryCommandPageBySlot(1, masterCount, thisMasterSlot);
         if (hit) {
             Assertions.assertEquals(id, commandList.get(0).getId());
         } else {

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/command/CommandService.java
Patch:
@@ -47,12 +47,11 @@ public interface CommandService {
     /**
      * Get command page
      * @param pageSize page size
-     * @param pageNumber page number
      * @param masterCount master count
      * @param thisMasterSlot master slot
      * @return command page
      */
-    List<Command> findCommandPageBySlot(int pageSize, int pageNumber, int masterCount, int thisMasterSlot);
+    List<Command> findCommandPageBySlot(int pageSize, int masterCount, int thisMasterSlot);
 
     /**
      * check the input command exists in queue list

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/command/CommandServiceImpl.java
Patch:
@@ -109,11 +109,11 @@ public int createCommand(Command command) {
     }
 
     @Override
-    public List<Command> findCommandPageBySlot(int pageSize, int pageNumber, int masterCount, int thisMasterSlot) {
+    public List<Command> findCommandPageBySlot(int pageSize, int masterCount, int thisMasterSlot) {
         if (masterCount <= 0) {
             return Lists.newArrayList();
         }
-        return commandMapper.queryCommandPageBySlot(pageSize, pageNumber * pageSize, masterCount, thisMasterSlot);
+        return commandMapper.queryCommandPageBySlot(pageSize, masterCount, thisMasterSlot);
     }
 
     @Override

File: dolphinscheduler-service/src/test/java/org/apache/dolphinscheduler/service/command/CommandServiceImplTest.java
Patch:
@@ -217,11 +217,10 @@ public void testCreateCommand() {
     @Test
     public void testFindCommandPageBySlot() {
         int pageSize = 1;
-        int pageNumber = 0;
         int masterCount = 0;
         int thisMasterSlot = 2;
         List<Command> commandList =
-                commandService.findCommandPageBySlot(pageSize, pageNumber, masterCount, thisMasterSlot);
+                commandService.findCommandPageBySlot(pageSize, masterCount, thisMasterSlot);
         Assertions.assertEquals(0, commandList.size());
     }
 

File: dolphinscheduler-alert/dolphinscheduler-alert-plugins/dolphinscheduler-alert-dingtalk/src/main/java/org/apache/dolphinscheduler/plugin/alert/dingtalk/DingTalkAlertChannelFactory.java
Patch:
@@ -24,6 +24,7 @@
 
 import org.apache.dolphinscheduler.alert.api.AlertChannel;
 import org.apache.dolphinscheduler.alert.api.AlertChannelFactory;
+import org.apache.dolphinscheduler.alert.api.AlertInputTips;
 import org.apache.dolphinscheduler.spi.params.PasswordParam;
 import org.apache.dolphinscheduler.spi.params.base.ParamsOptions;
 import org.apache.dolphinscheduler.spi.params.base.PluginParams;
@@ -134,7 +135,7 @@ public List<PluginParams> params() {
                 .build();
         PasswordParam passwordParam = PasswordParam
                 .newBuilder(DingTalkParamsConstants.NAME_DING_TALK_PASSWORD, DingTalkParamsConstants.DING_TALK_PASSWORD)
-                .setPlaceholder("if enable use authentication, you need input password")
+                .setPlaceholder(AlertInputTips.PASSWORD.getMsg())
                 .build();
 
         return Arrays.asList(webHookParam, keywordParam, secretParam, msgTypeParam, atMobilesParam, atUserIdsParam,

File: dolphinscheduler-alert/dolphinscheduler-alert-plugins/dolphinscheduler-alert-feishu/src/main/java/org/apache/dolphinscheduler/plugin/alert/feishu/FeiShuAlertChannelFactory.java
Patch:
@@ -24,6 +24,7 @@
 
 import org.apache.dolphinscheduler.alert.api.AlertChannel;
 import org.apache.dolphinscheduler.alert.api.AlertChannelFactory;
+import org.apache.dolphinscheduler.alert.api.AlertInputTips;
 import org.apache.dolphinscheduler.spi.params.PasswordParam;
 import org.apache.dolphinscheduler.spi.params.base.ParamsOptions;
 import org.apache.dolphinscheduler.spi.params.base.PluginParams;
@@ -82,7 +83,7 @@ public List<PluginParams> params() {
                         .build();
         PasswordParam passwordParam = PasswordParam
                 .newBuilder(FeiShuParamsConstants.NAME_FEI_SHU_PASSWORD, FeiShuParamsConstants.FEI_SHU_PASSWORD)
-                .setPlaceholder("if enable use authentication, you need input password")
+                .setPlaceholder(AlertInputTips.PASSWORD.getMsg())
                 .build();
 
         return Arrays.asList(webHookParam, isEnableProxy, proxyParam, portParam, userParam, passwordParam);

File: dolphinscheduler-alert/dolphinscheduler-alert-plugins/dolphinscheduler-alert-slack/src/main/java/org/apache/dolphinscheduler/plugin/alert/slack/SlackAlertChannelFactory.java
Patch:
@@ -19,6 +19,7 @@
 
 import org.apache.dolphinscheduler.alert.api.AlertChannel;
 import org.apache.dolphinscheduler.alert.api.AlertChannelFactory;
+import org.apache.dolphinscheduler.alert.api.AlertInputTips;
 import org.apache.dolphinscheduler.spi.params.base.PluginParams;
 import org.apache.dolphinscheduler.spi.params.base.Validate;
 import org.apache.dolphinscheduler.spi.params.input.InputParam;
@@ -45,14 +46,14 @@ public List<PluginParams> params() {
                 .addValidate(Validate.newBuilder()
                         .setRequired(true)
                         .build())
-                .setPlaceholder("Input WebHook Url")
+                .setPlaceholder(AlertInputTips.WEBHOOK.getMsg())
                 .build();
 
         InputParam botName = InputParam.newBuilder(SlackParamsConstants.SLACK_BOT_NAME, SlackParamsConstants.SLACK_BOT)
                 .addValidate(Validate.newBuilder()
                         .setRequired(true)
                         .build())
-                .setPlaceholder("Input the bot username")
+                .setPlaceholder(AlertInputTips.BOT_NAME.getMsg())
                 .build();
 
         paramsList.add(webHookParam);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java
Patch:
@@ -355,6 +355,7 @@ public enum Status {
     PROJECT_PROCESS_NOT_MATCH(50054, "the project and the process is not match", "项目和工作流不匹配"),
     DELETE_EDGE_ERROR(50055, "delete edge error", "删除工作流任务连接线错误"),
     NOT_SUPPORT_UPDATE_TASK_DEFINITION(50056, "task state does not support modification", "当前任务不支持修改"),
+    TASK_DEFINITION_NOT_MODIFY_ERROR(50057, "task [{0}] definition not modify error", "任务[{0}]定义未修改错误"),
     BATCH_EXECUTE_PROCESS_INSTANCE_ERROR(50058, "change process instance status error: {0}", "修改工作实例状态错误: {0}"),
     START_TASK_INSTANCE_ERROR(50059, "start task instance error", "运行任务流实例错误"),
     DELETE_PROCESS_DEFINE_ERROR(50060, "delete process definition [{0}] error: {1}", "删除工作流定义[{0}]错误: {1}"),

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ResourcesServiceImpl.java
Patch:
@@ -808,6 +808,8 @@ private void createDirectory(User loginUser, String fullName, ResourceType type,
      * @param loginUser login user
      * @param fullName  full name
      * @param file      file
+     * @param type      resource type
+     * @return upload success return true, otherwise false
      */
     private boolean upload(User loginUser, String fullName, MultipartFile file, ResourceType type) {
         // save to local

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java
Patch:
@@ -371,6 +371,8 @@ public enum Status {
             "批量删除工作流任务关系 {0} 错误"),
     PROCESS_TASK_RELATION_BATCH_CREATE_ERROR(50069, "batch create process task relation {0} error",
             "批量创建工作流任务关系 {0} 错误"),
+    PROCESS_TASK_RELATION_BATCH_UPDATE_ERROR(50070, "batch update process task relation error",
+            "批量修改工作流任务关系错误"),
 
     HDFS_NOT_STARTUP(60001, "hdfs not startup", "hdfs未启用"),
     STORAGE_NOT_STARTUP(60002, "storage not startup", "存储未启用"),

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/enums/DataType.java
Patch:
@@ -33,5 +33,5 @@ public enum DataType {
      * 8 Boolean
      * 9 list <String>
      */
-    VARCHAR, INTEGER, LONG, FLOAT, DOUBLE, DATE, TIME, TIMESTAMP, BOOLEAN, LIST
+    VARCHAR, INTEGER, LONG, FLOAT, DOUBLE, DATE, TIME, TIMESTAMP, BOOLEAN, LIST, FILE
 }

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/registry/MasterWaitingStrategy.java
Patch:
@@ -64,7 +64,6 @@ public class MasterWaitingStrategy implements MasterConnectStrategy {
     public void disconnect() {
         try {
             ServerLifeCycleManager.toWaiting();
-            // todo: clear the current resource
             clearMasterResource();
             Duration maxWaitingTime = masterConfig.getRegistryDisconnectStrategy().getMaxWaitingTime();
             try {

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/loop/template/http/method/HttpLoopTaskCancelTaskMethodDefinition.java
Patch:
@@ -17,10 +17,10 @@
 
 package org.apache.dolphinscheduler.plugin.task.api.loop.template.http.method;
 
+import org.apache.dolphinscheduler.common.utils.OkHttpUtils;
 import org.apache.dolphinscheduler.plugin.task.api.loop.LoopTaskCancelMethodDefinition;
 import org.apache.dolphinscheduler.plugin.task.api.loop.LoopTaskInstanceInfo;
 import org.apache.dolphinscheduler.plugin.task.api.loop.template.http.HttpLoopTaskMethodDefinition;
-import org.apache.dolphinscheduler.plugin.task.api.utils.OkHttpUtils;
 
 import org.apache.commons.lang3.StringUtils;
 

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/loop/template/http/method/HttpLoopTaskQueryStatusMethodDefinition.java
Patch:
@@ -17,13 +17,13 @@
 
 package org.apache.dolphinscheduler.plugin.task.api.loop.template.http.method;
 
+import org.apache.dolphinscheduler.common.utils.OkHttpUtils;
 import org.apache.dolphinscheduler.plugin.task.api.loop.LoopTaskInstanceInfo;
 import org.apache.dolphinscheduler.plugin.task.api.loop.LoopTaskInstanceStatus;
 import org.apache.dolphinscheduler.plugin.task.api.loop.LoopTaskQueryStatusMethodDefinition;
 import org.apache.dolphinscheduler.plugin.task.api.loop.template.http.HttpLoopTaskInstanceStatus;
 import org.apache.dolphinscheduler.plugin.task.api.loop.template.http.HttpLoopTaskMethodDefinition;
 import org.apache.dolphinscheduler.plugin.task.api.utils.JsonPathUtils;
-import org.apache.dolphinscheduler.plugin.task.api.utils.OkHttpUtils;
 
 import org.apache.commons.lang3.StringUtils;
 

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/loop/template/http/method/HttpLoopTaskSubmitTaskMethodDefinition.java
Patch:
@@ -17,12 +17,12 @@
 
 package org.apache.dolphinscheduler.plugin.task.api.loop.template.http.method;
 
+import org.apache.dolphinscheduler.common.utils.OkHttpUtils;
 import org.apache.dolphinscheduler.plugin.task.api.loop.LoopTaskInstanceInfo;
 import org.apache.dolphinscheduler.plugin.task.api.loop.LoopTaskSubmitTaskMethodDefinition;
 import org.apache.dolphinscheduler.plugin.task.api.loop.template.http.HttpLoopTaskInstanceInfo;
 import org.apache.dolphinscheduler.plugin.task.api.loop.template.http.HttpLoopTaskMethodDefinition;
 import org.apache.dolphinscheduler.plugin.task.api.utils.JsonPathUtils;
-import org.apache.dolphinscheduler.plugin.task.api.utils.OkHttpUtils;
 
 import org.apache.commons.lang3.StringUtils;
 

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/builder/TaskExecutionContextBuilder.java
Patch:
@@ -135,6 +135,7 @@ public TaskExecutionContextBuilder buildResourceParametersInfo(ResourceParameter
         taskExecutionContext.setResourceParametersHelper(parametersHelper);
         return this;
     }
+
     /**
      * build k8sTask related info
      *
@@ -149,6 +150,7 @@ public TaskExecutionContextBuilder buildK8sTaskRelatedInfo(K8sTaskExecutionConte
 
     /**
      * build global and local params
+     *
      * @param propertyMap
      * @return
      */
@@ -159,6 +161,7 @@ public TaskExecutionContextBuilder buildParamInfo(Map<String, Property> property
 
     /**
      * build business params
+     *
      * @param businessParamsMap
      * @return
      */

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/log/GetAppIdRequestCommand.java
Patch:
@@ -34,6 +34,8 @@ public class GetAppIdRequestCommand implements Serializable {
 
     private String logPath;
 
+    private String appInfoPath;
+
     public Command convert2Command() {
         Command command = new Command();
         command.setType(CommandType.GET_APP_ID_REQUEST);

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/utils/ProcessUtils.java
Patch:
@@ -200,7 +200,8 @@ public static String getPidsStr(int processId) throws Exception {
         try {
             Thread.sleep(Constants.SLEEP_TIME_MILLIS);
             Host host = Host.of(taskExecutionContext.getHost());
-            List<String> appIds = logClient.getAppIds(host.getIp(), host.getPort(), taskExecutionContext.getLogPath());
+            List<String> appIds = logClient.getAppIds(host.getIp(), host.getPort(), taskExecutionContext.getLogPath(),
+                    taskExecutionContext.getAppInfoPath());
             if (CollectionUtils.isNotEmpty(appIds)) {
                 if (StringUtils.isEmpty(taskExecutionContext.getExecutePath())) {
                     taskExecutionContext

File: dolphinscheduler-worker/src/main/java/org/apache/dolphinscheduler/server/worker/utils/TaskExecutionCheckerUtils.java
Patch:
@@ -88,7 +88,9 @@ public static void createProcessLocalPathIfAbsent(TaskExecutionContext taskExecu
                     taskExecutionContext.getProcessInstanceId(),
                     taskExecutionContext.getTaskInstanceId());
             taskExecutionContext.setExecutePath(execLocalPath);
-            createDirectoryWithOwner(Paths.get(execLocalPath), taskExecutionContext.getTenantCode());
+            taskExecutionContext.setAppInfoPath(FileUtils.getAppInfoPath(execLocalPath));
+            createDirectoryWithOwner(Paths.get(taskExecutionContext.getExecutePath()),
+                    taskExecutionContext.getTenantCode());
         } catch (Throwable ex) {
             throw new TaskException("Cannot create process execute dir", ex);
         }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/AlertPluginInstanceController.java
Patch:
@@ -201,7 +201,7 @@ public Result verifyGroupName(@Parameter(hidden = true) @RequestAttribute(value
         boolean exist = alertPluginInstanceService.checkExistPluginInstanceName(alertInstanceName);
         if (exist) {
             logger.error("alert plugin instance {} has exist, can't create again.", alertInstanceName);
-            return Result.error(Status.PLUGIN_INSTANCE_ALREADY_EXIT);
+            return Result.error(Status.PLUGIN_INSTANCE_ALREADY_EXISTS);
         } else {
             return Result.success();
         }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java
Patch:
@@ -411,7 +411,7 @@ public enum Status {
     GET_ALERT_PLUGIN_INSTANCE_ERROR(110007, "get alert plugin instance error", "获取告警组和告警组插件实例错误"),
     CREATE_ALERT_PLUGIN_INSTANCE_ERROR(110008, "create alert plugin instance error", "创建告警组和告警组插件实例错误"),
     QUERY_ALL_ALERT_PLUGIN_INSTANCE_ERROR(110009, "query all alert plugin instance error", "查询所有告警实例失败"),
-    PLUGIN_INSTANCE_ALREADY_EXIT(110010, "plugin instance already exit", "该告警插件实例已存在"),
+    PLUGIN_INSTANCE_ALREADY_EXISTS(110010, "plugin instance already exists", "该告警插件实例已存在"),
     LIST_PAGING_ALERT_PLUGIN_INSTANCE_ERROR(110011, "query plugin instance page error", "分页查询告警实例失败"),
     DELETE_ALERT_PLUGIN_INSTANCE_ERROR_HAS_ALERT_GROUP_ASSOCIATED(110012,
             "failed to delete the alert instance, there is an alarm group associated with this alert instance",

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/AlertPluginInstanceServiceImpl.java
Patch:
@@ -102,7 +102,7 @@ public Map<String, Object> create(User loginUser, int pluginDefineId, String ins
         if (alertPluginInstanceMapper.existInstanceName(alertPluginInstance.getInstanceName()) == Boolean.TRUE) {
             logger.error("Plugin instance with the same name already exists, name:{}.",
                     alertPluginInstance.getInstanceName());
-            putMsg(result, Status.PLUGIN_INSTANCE_ALREADY_EXIT);
+            putMsg(result, Status.PLUGIN_INSTANCE_ALREADY_EXISTS);
             return result;
         }
 

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/AlertPluginInstanceControllerTest.java
Patch:
@@ -217,7 +217,7 @@ public void testVerifyGroupNamePluginInstanceNameExist() throws Exception {
                 .thenReturn(true);
 
         Result expectResponseContent = JSONUtils.parseObject(
-                "{\"code\":110010,\"msg\":\"plugin instance already exit\",\"data\":null,\"failed\":true,\"success\":false}",
+                "{\"code\":110010,\"msg\":\"plugin instance already exists\",\"data\":null,\"failed\":true,\"success\":false}",
                 Result.class);
 
         // When

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/AlertPluginInstanceServiceTest.java
Patch:
@@ -177,7 +177,7 @@ public void testCreate() {
         Mockito.when(resourcePermissionCheckService.resourcePermissionCheck(AuthorizationType.ALERT_PLUGIN_INSTANCE,
                 null, 0, baseServiceLogger)).thenReturn(true);
         Map<String, Object> result = alertPluginInstanceService.create(user, 1, "test", uiParams);
-        Assertions.assertEquals(Status.PLUGIN_INSTANCE_ALREADY_EXIT, result.get(Constants.STATUS));
+        Assertions.assertEquals(Status.PLUGIN_INSTANCE_ALREADY_EXISTS, result.get(Constants.STATUS));
         Mockito.when(alertPluginInstanceMapper.insert(Mockito.any())).thenReturn(1);
         result = alertPluginInstanceService.create(user, 1, "test1", uiParams);
         Assertions.assertEquals(Status.SUCCESS, result.get(Constants.STATUS));

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java
Patch:
@@ -506,8 +506,8 @@ public enum Status {
     FUNCTION_DISABLED(1400002, "The current feature is disabled.", "当前功能已被禁用"),
     SCHEDULE_TIME_NUMBER(1400003, "The number of complement dates exceed 100.", "补数日期个数超过100"),
     DESCRIPTION_TOO_LONG_ERROR(1400004, "description is too long error", "描述过长"),
-    ;
-
+    DELETE_WORKER_GROUP_BY_ID_FAIL_ENV(1400005,
+            "delete worker group fail, for there are [{0}] enviroments using:{1}", "删除工作组失败，有 [{0}] 个环境正在使用：{1}");
     private final int code;
     private final String enMsg;
     private final String zhMsg;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/FavTaskService.java
Patch:
@@ -26,7 +26,7 @@ public interface FavTaskService {
 
     List<FavTaskDto> getFavTaskList(User loginUser);
 
-    boolean deleteFavTask(User loginUser, String taskName);
+    boolean deleteFavTask(User loginUser, String taskType);
 
-    int addFavTask(User loginUser, String taskName);
+    int addFavTask(User loginUser, String taskType);
 }

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/FavTask.java
Patch:
@@ -35,7 +35,7 @@ public class FavTask {
 
     @TableId(value = "id", type = IdType.AUTO)
     private Long id;
-    private String taskName;
+    private String taskType;
     private int userId;
 
 }

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/FavTaskMapper.java
Patch:
@@ -32,5 +32,5 @@ public interface FavTaskMapper extends BaseMapper<FavTask> {
 
     Set<String> getUserFavTaskTypes(@Param("userId") int userId);
 
-    boolean deleteUserFavTask(@Param("userId") int userId, @Param("taskName") String taskName);
+    boolean deleteUserFavTask(@Param("userId") int userId, @Param("taskType") String taskType);
 }

File: dolphinscheduler-alert/dolphinscheduler-alert-plugins/dolphinscheduler-alert-script/src/main/java/org/apache/dolphinscheduler/plugin/alert/script/ScriptSender.java
Patch:
@@ -18,7 +18,8 @@
 package org.apache.dolphinscheduler.plugin.alert.script;
 
 import org.apache.dolphinscheduler.alert.api.AlertResult;
-import org.apache.dolphinscheduler.spi.utils.StringUtils;
+
+import org.apache.commons.lang3.StringUtils;
 
 import java.io.File;
 import java.util.Map;

File: dolphinscheduler-alert/dolphinscheduler-alert-server/src/main/java/org/apache/dolphinscheduler/alert/AlertSenderService.java
Patch:
@@ -37,6 +37,7 @@
 import org.apache.dolphinscheduler.remote.command.alert.AlertSendResponseResult;
 
 import org.apache.commons.collections.CollectionUtils;
+import org.apache.commons.collections.MapUtils;
 
 import java.util.ArrayList;
 import java.util.Date;
@@ -223,7 +224,7 @@ public AlertSendResponseCommand syncHandler(int alertGroupId, String title, Stri
         Map<String, String> paramsMap = JSONUtils.toMap(instance.getPluginInstanceParams());
         String instanceWarnType = WarningType.ALL.getDescp();
 
-        if (paramsMap != null) {
+        if (MapUtils.isNotEmpty(paramsMap)) {
             instanceWarnType = paramsMap.getOrDefault(AlertConstants.NAME_WARNING_TYPE, WarningType.ALL.getDescp());
         }
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/k8s/K8sManager.java
Patch:
@@ -17,10 +17,10 @@
 
 package org.apache.dolphinscheduler.api.k8s;
 
-import org.apache.dolphinscheduler.api.utils.ClusterConfUtils;
 import org.apache.dolphinscheduler.dao.entity.Cluster;
 import org.apache.dolphinscheduler.dao.mapper.ClusterMapper;
 import org.apache.dolphinscheduler.remote.exceptions.RemotingException;
+import org.apache.dolphinscheduler.service.utils.ClusterConfUtils;
 
 import java.util.Hashtable;
 import java.util.Map;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ClusterServiceImpl.java
Patch:
@@ -21,7 +21,6 @@
 import org.apache.dolphinscheduler.api.enums.Status;
 import org.apache.dolphinscheduler.api.k8s.K8sManager;
 import org.apache.dolphinscheduler.api.service.ClusterService;
-import org.apache.dolphinscheduler.api.utils.ClusterConfUtils;
 import org.apache.dolphinscheduler.api.utils.PageInfo;
 import org.apache.dolphinscheduler.api.utils.Result;
 import org.apache.dolphinscheduler.common.constants.Constants;
@@ -33,6 +32,7 @@
 import org.apache.dolphinscheduler.dao.mapper.ClusterMapper;
 import org.apache.dolphinscheduler.dao.mapper.K8sNamespaceMapper;
 import org.apache.dolphinscheduler.remote.exceptions.RemotingException;
+import org.apache.dolphinscheduler.service.utils.ClusterConfUtils;
 
 import org.apache.commons.collections.CollectionUtils;
 import org.apache.commons.lang3.StringUtils;

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessServiceImpl.java
Patch:
@@ -133,6 +133,7 @@
 import org.apache.dolphinscheduler.service.log.LogClient;
 import org.apache.dolphinscheduler.service.model.TaskNode;
 import org.apache.dolphinscheduler.service.task.TaskPluginManager;
+import org.apache.dolphinscheduler.service.utils.ClusterConfUtils;
 import org.apache.dolphinscheduler.service.utils.DagHelper;
 import org.apache.dolphinscheduler.spi.enums.ResourceType;
 
@@ -2922,7 +2923,7 @@ public String findConfigYamlByName(String clusterName) {
         QueryWrapper<Cluster> nodeWrapper = new QueryWrapper<>();
         nodeWrapper.eq("name", clusterName);
         Cluster cluster = clusterMapper.selectOne(nodeWrapper);
-        return cluster == null ? null : cluster.getConfig();
+        return cluster == null ? null : ClusterConfUtils.getK8sConfig(cluster.getConfig());
     }
 
     @Override

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/utils/ClusterConfUtils.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.api.utils;
+package org.apache.dolphinscheduler.service.utils;
 
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/K8SNamespaceServiceImpl.java
Patch:
@@ -445,7 +445,7 @@ public List<K8sNamespace> queryNamespaceAvailable(User loginUser) {
         if (isAdmin(loginUser)) {
             k8sNamespaces = k8sNamespaceMapper.selectList(null);
         } else {
-            k8sNamespaces = k8sNamespaceMapper.queryNamespaceAvailable(loginUser.getId());
+            k8sNamespaces = k8sNamespaceMapper.queryAuthedNamespaceListByUserId(loginUser.getId());
         }
         setClusterName(k8sNamespaces);
         return k8sNamespaces;

File: dolphinscheduler-scheduler-plugin/dolphinscheduler-scheduler-quartz/src/main/java/org/apache/dolphinscheduler/scheduler/quartz/ProcessScheduleTask.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.dolphinscheduler.scheduler.quartz;
 
-import org.apache.commons.lang3.StringUtils;
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.CommandType;
 import org.apache.dolphinscheduler.common.enums.ReleaseState;
@@ -27,6 +26,8 @@
 import org.apache.dolphinscheduler.scheduler.quartz.utils.QuartzTaskUtils;
 import org.apache.dolphinscheduler.service.process.ProcessService;
 
+import org.apache.commons.lang3.StringUtils;
+
 import java.util.Date;
 
 import org.quartz.JobDataMap;

File: dolphinscheduler-e2e/dolphinscheduler-e2e-case/src/test/java/org/apache/dolphinscheduler/e2e/cases/HiveDataSourceE2ETest.java
Patch:
@@ -46,7 +46,7 @@ public class HiveDataSourceE2ETest {
 
     private static final String password = "dolphinscheduler123";
 
-    private static final String dataSourceType = "HIVE";
+    private static final String dataSourceType = "HIVE/IMPALA";
 
     private static final String dataSourceName = "hive_test";
 

File: dolphinscheduler-alert/dolphinscheduler-alert-api/src/main/java/org/apache/dolphinscheduler/alert/api/AlertChannel.java
Patch:
@@ -25,6 +25,7 @@
  * alert channel for sending alerts
  */
 public interface AlertChannel {
+
     /**
      * process and send alert
      *

File: dolphinscheduler-alert/dolphinscheduler-alert-api/src/main/java/org/apache/dolphinscheduler/alert/api/AlertChannelFactory.java
Patch:
@@ -20,15 +20,16 @@
 package org.apache.dolphinscheduler.alert.api;
 
 import org.apache.dolphinscheduler.spi.params.base.PluginParams;
-import org.apache.dolphinscheduler.spi.plugin.SPIIdentify;
 import org.apache.dolphinscheduler.spi.plugin.PrioritySPI;
+import org.apache.dolphinscheduler.spi.plugin.SPIIdentify;
 
 import java.util.List;
 
 /**
  * alert channel factory
  */
 public interface AlertChannelFactory extends PrioritySPI {
+
     /**
      * Returns the name of the alert channel
      *

File: dolphinscheduler-alert/dolphinscheduler-alert-api/src/main/java/org/apache/dolphinscheduler/alert/api/AlertConstants.java
Patch:
@@ -20,6 +20,7 @@
 package org.apache.dolphinscheduler.alert.api;
 
 public final class AlertConstants {
+
     /**
      * the field name of alert show type
      **/

File: dolphinscheduler-alert/dolphinscheduler-alert-api/src/main/java/org/apache/dolphinscheduler/alert/api/ShowType.java
Patch:
@@ -25,6 +25,7 @@
 @AllArgsConstructor
 @Getter
 public enum ShowType {
+
     /**
      * 0 TABLE;
      * 1 TEXT;

File: dolphinscheduler-alert/dolphinscheduler-alert-plugins/dolphinscheduler-alert-dingtalk/src/main/java/org/apache/dolphinscheduler/plugin/alert/dingtalk/DingTalkParamsConstants.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.dolphinscheduler.plugin.alert.dingtalk;
 
 public final class DingTalkParamsConstants {
+
     static final String DING_TALK_PROXY_ENABLE = "$t('isEnableProxy')";
     static final String NAME_DING_TALK_PROXY_ENABLE = "IsEnableProxy";
 

File: dolphinscheduler-alert/dolphinscheduler-alert-plugins/dolphinscheduler-alert-email/src/main/java/org/apache/dolphinscheduler/plugin/alert/email/EmailAlertChannel.java
Patch:
@@ -28,6 +28,7 @@
 import org.slf4j.LoggerFactory;
 
 public final class EmailAlertChannel implements AlertChannel {
+
     private static final Logger logger = LoggerFactory.getLogger(EmailAlertChannel.class);
 
     @Override

File: dolphinscheduler-alert/dolphinscheduler-alert-plugins/dolphinscheduler-alert-email/src/main/java/org/apache/dolphinscheduler/plugin/alert/email/MailParamsConstants.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.dolphinscheduler.plugin.alert.email;
 
 public final class MailParamsConstants {
+
     public static final String PLUGIN_DEFAULT_EMAIL_RECEIVERS = "$t('receivers')";
     public static final String NAME_PLUGIN_DEFAULT_EMAIL_RECEIVERS = "receivers";
 

File: dolphinscheduler-alert/dolphinscheduler-alert-plugins/dolphinscheduler-alert-email/src/main/java/org/apache/dolphinscheduler/plugin/alert/email/exception/AlertEmailException.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.dolphinscheduler.plugin.alert.email.exception;
 
 public class AlertEmailException extends RuntimeException {
+
     public AlertEmailException(String errMsg) {
         super(errMsg);
     }

File: dolphinscheduler-alert/dolphinscheduler-alert-plugins/dolphinscheduler-alert-feishu/src/main/java/org/apache/dolphinscheduler/plugin/alert/feishu/FeiShuAlertChannel.java
Patch:
@@ -25,6 +25,7 @@
 import java.util.Map;
 
 public final class FeiShuAlertChannel implements AlertChannel {
+
     @Override
     public AlertResult process(AlertInfo alertInfo) {
         AlertData alertData = alertInfo.getAlertData();

File: dolphinscheduler-alert/dolphinscheduler-alert-plugins/dolphinscheduler-alert-feishu/src/main/java/org/apache/dolphinscheduler/plugin/alert/feishu/FeiShuParamsConstants.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.dolphinscheduler.plugin.alert.feishu;
 
 public final class FeiShuParamsConstants {
+
     public static final String FEI_SHU_PROXY_ENABLE = "$t('isEnableProxy')";
     static final String WEB_HOOK = "$t('webhook')";
     static final String NAME_WEB_HOOK = "WebHook";

File: dolphinscheduler-alert/dolphinscheduler-alert-plugins/dolphinscheduler-alert-feishu/src/main/java/org/apache/dolphinscheduler/plugin/alert/feishu/HttpRequestUtil.java
Patch:
@@ -29,11 +29,13 @@
 import org.apache.http.impl.client.HttpClients;
 
 public final class HttpRequestUtil {
+
     private HttpRequestUtil() {
         throw new UnsupportedOperationException("This is a utility class and cannot be instantiated");
     }
 
-    public static CloseableHttpClient getHttpClient(boolean enableProxy, String proxy, Integer port, String user, String password) {
+    public static CloseableHttpClient getHttpClient(boolean enableProxy, String proxy, Integer port, String user,
+                                                    String password) {
         if (enableProxy) {
             HttpHost httpProxy = new HttpHost(proxy, port);
             CredentialsProvider provider = new BasicCredentialsProvider();

File: dolphinscheduler-alert/dolphinscheduler-alert-plugins/dolphinscheduler-alert-http/src/main/java/org/apache/dolphinscheduler/plugin/alert/http/HttpAlertChannel.java
Patch:
@@ -25,6 +25,7 @@
 import java.util.Map;
 
 public final class HttpAlertChannel implements AlertChannel {
+
     @Override
     public AlertResult process(AlertInfo alertInfo) {
         AlertData alertData = alertInfo.getAlertData();

File: dolphinscheduler-alert/dolphinscheduler-alert-plugins/dolphinscheduler-alert-http/src/main/java/org/apache/dolphinscheduler/plugin/alert/http/HttpAlertConstants.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.dolphinscheduler.plugin.alert.http;
 
 public final class HttpAlertConstants {
+
     public static final String URL = "$t('url')";
 
     public static final String NAME_URL = "url";

File: dolphinscheduler-alert/dolphinscheduler-alert-plugins/dolphinscheduler-alert-pagerduty/src/main/java/org/apache/dolphinscheduler/plugin/alert/pagerduty/PagerDutyAlertChannel.java
Patch:
@@ -25,6 +25,7 @@
 import java.util.Map;
 
 public final class PagerDutyAlertChannel implements AlertChannel {
+
     @Override
     public AlertResult process(AlertInfo alertInfo) {
         AlertData alertData = alertInfo.getAlertData();

File: dolphinscheduler-alert/dolphinscheduler-alert-plugins/dolphinscheduler-alert-pagerduty/src/main/java/org/apache/dolphinscheduler/plugin/alert/pagerduty/PagerDutyParamsConstants.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.dolphinscheduler.plugin.alert.pagerduty;
 
 public final class PagerDutyParamsConstants {
+
     public static final String NAME_PAGER_DUTY_INTEGRATION_KEY_NAME = "IntegrationKey";
     public static final String PAGER_DUTY_INTEGRATION_KEY = "integrationKey";
     public static final String PAGER_DUTY_EVENT_ACTION_TRIGGER = "trigger";

File: dolphinscheduler-alert/dolphinscheduler-alert-plugins/dolphinscheduler-alert-script/src/main/java/org/apache/dolphinscheduler/plugin/alert/script/OSUtils.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.dolphinscheduler.plugin.alert.script;
 
 public final class OSUtils {
+
     private OSUtils() {
         throw new UnsupportedOperationException("This is a utility class and cannot be instantiated");
     }

File: dolphinscheduler-alert/dolphinscheduler-alert-plugins/dolphinscheduler-alert-script/src/main/java/org/apache/dolphinscheduler/plugin/alert/script/ProcessUtils.java
Patch:
@@ -23,6 +23,7 @@
 import org.slf4j.LoggerFactory;
 
 public final class ProcessUtils {
+
     private static final Logger logger = LoggerFactory.getLogger(ProcessUtils.class);
 
     private ProcessUtils() {

File: dolphinscheduler-alert/dolphinscheduler-alert-plugins/dolphinscheduler-alert-script/src/main/java/org/apache/dolphinscheduler/plugin/alert/script/ScriptAlertChannel.java
Patch:
@@ -25,6 +25,7 @@
 import java.util.Map;
 
 public final class ScriptAlertChannel implements AlertChannel {
+
     @Override
     public AlertResult process(AlertInfo alertinfo) {
         AlertData alertData = alertinfo.getAlertData();

File: dolphinscheduler-alert/dolphinscheduler-alert-plugins/dolphinscheduler-alert-script/src/main/java/org/apache/dolphinscheduler/plugin/alert/script/ScriptParamsConstants.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.dolphinscheduler.plugin.alert.script;
 
 public final class ScriptParamsConstants {
+
     static final String SCRIPT_TYPE = "$t('scriptType')";
 
     static final String NAME_SCRIPT_TYPE = "type";

File: dolphinscheduler-alert/dolphinscheduler-alert-plugins/dolphinscheduler-alert-script/src/main/java/org/apache/dolphinscheduler/plugin/alert/script/ScriptType.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.dolphinscheduler.plugin.alert.script;
 
 public enum ScriptType {
+
     SHELL(0, "SHELL"),
     ;
 

File: dolphinscheduler-alert/dolphinscheduler-alert-plugins/dolphinscheduler-alert-script/src/main/java/org/apache/dolphinscheduler/plugin/alert/script/StreamGobbler.java
Patch:
@@ -26,6 +26,7 @@
 import org.slf4j.LoggerFactory;
 
 public final class StreamGobbler extends Thread {
+
     private static final Logger logger = LoggerFactory.getLogger(StreamGobbler.class);
 
     private final InputStream inputStream;

File: dolphinscheduler-alert/dolphinscheduler-alert-plugins/dolphinscheduler-alert-slack/src/main/java/org/apache/dolphinscheduler/plugin/alert/slack/SlackAlertChannel.java
Patch:
@@ -25,6 +25,7 @@
 import java.util.Map;
 
 public final class SlackAlertChannel implements AlertChannel {
+
     @Override
     public AlertResult process(AlertInfo alertInfo) {
         AlertData alertData = alertInfo.getAlertData();

File: dolphinscheduler-alert/dolphinscheduler-alert-plugins/dolphinscheduler-alert-slack/src/main/java/org/apache/dolphinscheduler/plugin/alert/slack/SlackParamsConstants.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.dolphinscheduler.plugin.alert.slack;
 
 public final class SlackParamsConstants {
+
     public static final String SLACK_WEB_HOOK_URL = "$t('webhook')";
     public static final String SLACK_WEB_HOOK_URL_NAME = "webHook";
     public static final String SLACK_BOT = "$t('Username')";

File: dolphinscheduler-alert/dolphinscheduler-alert-plugins/dolphinscheduler-alert-telegram/src/main/java/org/apache/dolphinscheduler/plugin/alert/telegram/TelegramAlertChannel.java
Patch:
@@ -25,6 +25,7 @@
 import java.util.Map;
 
 public final class TelegramAlertChannel implements AlertChannel {
+
     @Override
     public AlertResult process(AlertInfo info) {
         Map<String, String> alertParams = info.getAlertParams();

File: dolphinscheduler-alert/dolphinscheduler-alert-plugins/dolphinscheduler-alert-telegram/src/main/java/org/apache/dolphinscheduler/plugin/alert/telegram/TelegramParamsConstants.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.dolphinscheduler.plugin.alert.telegram;
 
-
 public final class TelegramParamsConstants {
 
     static final String TELEGRAM_WEB_HOOK = "$t('webHook')";

File: dolphinscheduler-alert/dolphinscheduler-alert-plugins/dolphinscheduler-alert-webexteams/src/main/java/org/apache/dolphinscheduler/plugin/alert/webexteams/WebexMessage.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.dolphinscheduler.plugin.alert.webexteams;
 
 public class WebexMessage {
+
     private String roomId;
     private String toPersonId;
     private String toPersonEmail;

File: dolphinscheduler-alert/dolphinscheduler-alert-plugins/dolphinscheduler-alert-webexteams/src/main/java/org/apache/dolphinscheduler/plugin/alert/webexteams/WebexTeamsAlertChannel.java
Patch:
@@ -25,6 +25,7 @@
 import java.util.Map;
 
 public final class WebexTeamsAlertChannel implements AlertChannel {
+
     @Override
     public AlertResult process(AlertInfo alertInfo) {
         AlertData alertData = alertInfo.getAlertData();

File: dolphinscheduler-alert/dolphinscheduler-alert-plugins/dolphinscheduler-alert-webexteams/src/main/java/org/apache/dolphinscheduler/plugin/alert/webexteams/WebexTeamsDestination.java
Patch:
@@ -25,6 +25,7 @@
 import com.google.common.base.Functions;
 
 public enum WebexTeamsDestination {
+
     /**
      * 0 ROOM_ID;
      * 1 PERSON_EMAIL;
@@ -51,7 +52,8 @@ public String getDescp() {
     }
 
     private static final Map<String, WebexTeamsDestination> WEBEX_TEAMS_DESTINATION_MAP =
-        Arrays.stream(WebexTeamsDestination.values()).collect(toMap(WebexTeamsDestination::getDescp, Functions.identity()));
+            Arrays.stream(WebexTeamsDestination.values())
+                    .collect(toMap(WebexTeamsDestination::getDescp, Functions.identity()));
 
     public static WebexTeamsDestination of(String descp) {
         if (WEBEX_TEAMS_DESTINATION_MAP.containsKey(descp)) {

File: dolphinscheduler-alert/dolphinscheduler-alert-plugins/dolphinscheduler-alert-wechat/src/main/java/org/apache/dolphinscheduler/plugin/alert/wechat/WeChatAlertChannel.java
Patch:
@@ -25,6 +25,7 @@
 import java.util.Map;
 
 public final class WeChatAlertChannel implements AlertChannel {
+
     @Override
     public AlertResult process(AlertInfo info) {
         AlertData alertData = info.getAlertData();

File: dolphinscheduler-alert/dolphinscheduler-alert-plugins/dolphinscheduler-alert-wechat/src/main/java/org/apache/dolphinscheduler/plugin/alert/wechat/WeChatAlertConstants.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.dolphinscheduler.plugin.alert.wechat;
 
 public final class WeChatAlertConstants {
+
     static final String MARKDOWN_QUOTE = ">";
 
     static final String MARKDOWN_ENTER = "\n";
@@ -29,7 +30,8 @@ public final class WeChatAlertConstants {
     static final String WE_CHAT_APP_CHAT_PUSH_URL = "https://qyapi.weixin.qq.com/cgi-bin/appchat/send?access_token" +
             "={token}";
 
-    static final String WE_CHAT_TOKEN_URL = "https://qyapi.weixin.qq.com/cgi-bin/gettoken?corpid={corpId}&corpsecret={secret}";
+    static final String WE_CHAT_TOKEN_URL =
+            "https://qyapi.weixin.qq.com/cgi-bin/gettoken?corpid={corpId}&corpsecret={secret}";
 
     static final String WE_CHAT_CONTENT_KEY = "content";
 

File: dolphinscheduler-alert/dolphinscheduler-alert-plugins/dolphinscheduler-alert-wechat/src/main/java/org/apache/dolphinscheduler/plugin/alert/wechat/WeChatAlertParamsConstants.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.dolphinscheduler.plugin.alert.wechat;
 
 public final class WeChatAlertParamsConstants {
+
     static final String ENTERPRISE_WE_CHAT_CORP_ID = "$t('corpId')";
     static final String NAME_ENTERPRISE_WE_CHAT_CORP_ID = "corpId";
     static final String ENTERPRISE_WE_CHAT_SECRET = "$t('secret')";

File: dolphinscheduler-alert/dolphinscheduler-alert-plugins/dolphinscheduler-alert-wechat/src/main/java/org/apache/dolphinscheduler/plugin/alert/wechat/WeChatType.java
Patch:
@@ -15,10 +15,10 @@
  * limitations under the License.
  */
 
-
 package org.apache.dolphinscheduler.plugin.alert.wechat;
 
 public enum WeChatType {
+
     APP(1, "APP/应用"),
     APPCHAT(2, "GROUP CHAT/群聊"),
     ;

File: dolphinscheduler-alert/dolphinscheduler-alert-plugins/dolphinscheduler-alert-wechat/src/main/java/org/apache/dolphinscheduler/plugin/alert/wechat/WechatAppChatMessage.java
Patch:
@@ -25,8 +25,8 @@ public class WechatAppChatMessage {
 
     private String chatid;
     private String msgtype;
-    private Map<String,String> text;
-    private Map<String,String> markdown;
+    private Map<String, String> text;
+    private Map<String, String> markdown;
     private Integer safe;
 
     public String getChatid() {

File: dolphinscheduler-alert/dolphinscheduler-alert-plugins/dolphinscheduler-alert-wechat/src/main/java/org/apache/dolphinscheduler/plugin/alert/wechat/WechatAppMessage.java
Patch:
@@ -99,7 +99,8 @@ public void setMarkdown(Map<String, String> markdown) {
     public WechatAppMessage() {
     }
 
-    public WechatAppMessage(String touser, String msgtype, Integer agentid, Map<String, String> contentMap, Integer safe, Integer enableIdTrans, Integer enableDuplicateCheck) {
+    public WechatAppMessage(String touser, String msgtype, Integer agentid, Map<String, String> contentMap,
+                            Integer safe, Integer enableIdTrans, Integer enableDuplicateCheck) {
         this.touser = touser;
         this.msgtype = msgtype;
         this.agentid = agentid;

File: dolphinscheduler-alert/dolphinscheduler-alert-server/src/main/java/org/apache/dolphinscheduler/alert/AlertServerMetrics.java
Patch:
@@ -19,10 +19,10 @@
 
 import java.util.function.Supplier;
 
+import lombok.experimental.UtilityClass;
 import io.micrometer.core.instrument.Counter;
 import io.micrometer.core.instrument.Gauge;
 import io.micrometer.core.instrument.Metrics;
-import lombok.experimental.UtilityClass;
 
 @UtilityClass
 public class AlertServerMetrics {

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/ApiApplicationServer.java
Patch:
@@ -21,7 +21,6 @@
 import org.apache.dolphinscheduler.dao.PluginDao;
 import org.apache.dolphinscheduler.dao.entity.PluginDefine;
 import org.apache.dolphinscheduler.plugin.task.api.TaskChannelFactory;
-import org.apache.dolphinscheduler.plugin.task.api.TaskPluginException;
 import org.apache.dolphinscheduler.service.task.TaskPluginManager;
 import org.apache.dolphinscheduler.spi.params.PluginParamsTransfer;
 import org.apache.dolphinscheduler.spi.params.base.PluginParams;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/aspect/AccessLogAnnotation.java
Patch:
@@ -27,6 +27,7 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
 public @interface AccessLogAnnotation {
+
     // ignore request args
     String[] ignoreRequestArgs() default {"loginUser"};
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/audit/AuditMessage.java
Patch:
@@ -24,6 +24,7 @@
 import java.util.Date;
 
 public class AuditMessage {
+
     private User user;
 
     private Date auditDate;
@@ -34,7 +35,8 @@ public class AuditMessage {
 
     private Integer resourceId;
 
-    public AuditMessage(User user, Date auditDate, AuditResourceType resourceType, AuditOperationType operation, Integer resourceId) {
+    public AuditMessage(User user, Date auditDate, AuditResourceType resourceType, AuditOperationType operation,
+                        Integer resourceId) {
         this.user = user;
         this.auditDate = auditDate;
         this.resourceType = resourceType;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/configuration/AuditConfiguration.java
Patch:
@@ -25,6 +25,7 @@
 @EnableConfigurationProperties
 @ConfigurationProperties(value = "audit", ignoreUnknownFields = false)
 public class AuditConfiguration {
+
     private boolean enabled;
 
     public boolean getEnabled() {
@@ -34,4 +35,4 @@ public boolean getEnabled() {
     public void setEnabled(boolean enabled) {
         this.enabled = enabled;
     }
-}
\ No newline at end of file
+}

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/configuration/PythonGatewayConfiguration.java
Patch:
@@ -25,6 +25,7 @@
 @EnableConfigurationProperties
 @ConfigurationProperties(value = "python-gateway", ignoreUnknownFields = false)
 public class PythonGatewayConfiguration {
+
     private boolean enabled;
     private String gatewayServerAddress;
     private int gatewayServerPort;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/configuration/TrafficConfiguration.java
Patch:
@@ -17,11 +17,11 @@
 
 package org.apache.dolphinscheduler.api.configuration;
 
-import lombok.Data;
-
 import java.util.HashMap;
 import java.util.Map;
 
+import lombok.Data;
+
 import org.springframework.boot.context.properties.ConfigurationProperties;
 import org.springframework.context.annotation.Configuration;
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/AccessTokenController.java
Patch:
@@ -29,8 +29,8 @@
 import org.apache.dolphinscheduler.api.service.AccessTokenService;
 import org.apache.dolphinscheduler.api.utils.Result;
 import org.apache.dolphinscheduler.common.Constants;
-import org.apache.dolphinscheduler.plugin.task.api.utils.ParameterUtils;
 import org.apache.dolphinscheduler.dao.entity.User;
+import org.apache.dolphinscheduler.plugin.task.api.utils.ParameterUtils;
 
 import springfox.documentation.annotations.ApiIgnore;
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/AlertGroupController.java
Patch:
@@ -30,8 +30,8 @@
 import org.apache.dolphinscheduler.api.service.AlertGroupService;
 import org.apache.dolphinscheduler.api.utils.Result;
 import org.apache.dolphinscheduler.common.Constants;
-import org.apache.dolphinscheduler.plugin.task.api.utils.ParameterUtils;
 import org.apache.dolphinscheduler.dao.entity.User;
+import org.apache.dolphinscheduler.plugin.task.api.utils.ParameterUtils;
 
 import springfox.documentation.annotations.ApiIgnore;
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/AlertPluginInstanceController.java
Patch:
@@ -32,6 +32,7 @@
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.dao.entity.User;
 import org.apache.dolphinscheduler.plugin.task.api.utils.ParameterUtils;
+
 import springfox.documentation.annotations.ApiIgnore;
 
 import java.util.Map;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ClusterController.java
Patch:
@@ -29,8 +29,8 @@
 import org.apache.dolphinscheduler.api.service.ClusterService;
 import org.apache.dolphinscheduler.api.utils.Result;
 import org.apache.dolphinscheduler.common.Constants;
-import org.apache.dolphinscheduler.plugin.task.api.utils.ParameterUtils;
 import org.apache.dolphinscheduler.dao.entity.User;
+import org.apache.dolphinscheduler.plugin.task.api.utils.ParameterUtils;
 
 import springfox.documentation.annotations.ApiIgnore;
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/DataQualityController.java
Patch:
@@ -28,8 +28,8 @@
 import org.apache.dolphinscheduler.api.service.DqRuleService;
 import org.apache.dolphinscheduler.api.utils.Result;
 import org.apache.dolphinscheduler.common.Constants;
-import org.apache.dolphinscheduler.plugin.task.api.utils.ParameterUtils;
 import org.apache.dolphinscheduler.dao.entity.User;
+import org.apache.dolphinscheduler.plugin.task.api.utils.ParameterUtils;
 
 import springfox.documentation.annotations.ApiIgnore;
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/DataSourceController.java
Patch:
@@ -36,10 +36,10 @@
 import org.apache.dolphinscheduler.api.service.DataSourceService;
 import org.apache.dolphinscheduler.api.utils.Result;
 import org.apache.dolphinscheduler.common.Constants;
-import org.apache.dolphinscheduler.plugin.task.api.utils.ParameterUtils;
 import org.apache.dolphinscheduler.dao.entity.User;
 import org.apache.dolphinscheduler.plugin.datasource.api.datasource.BaseDataSourceParamDTO;
 import org.apache.dolphinscheduler.plugin.datasource.api.utils.DataSourceUtils;
+import org.apache.dolphinscheduler.plugin.task.api.utils.ParameterUtils;
 import org.apache.dolphinscheduler.service.utils.CommonUtils;
 import org.apache.dolphinscheduler.spi.datasource.ConnectionParam;
 import org.apache.dolphinscheduler.spi.enums.DbType;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/DsErrorController.java
Patch:
@@ -21,6 +21,7 @@
 
 import javax.servlet.RequestDispatcher;
 import javax.servlet.http.HttpServletRequest;
+
 import org.springframework.boot.web.servlet.error.ErrorController;
 import org.springframework.http.HttpStatus;
 import org.springframework.stereotype.Controller;
@@ -29,6 +30,7 @@
 
 @Controller
 public class DsErrorController implements ErrorController {
+
     @RequestMapping("/error")
     public ModelAndView handleError(HttpServletRequest request) {
         Object status = request.getAttribute(RequestDispatcher.ERROR_STATUS_CODE);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/EnvironmentController.java
Patch:
@@ -29,8 +29,8 @@
 import org.apache.dolphinscheduler.api.service.EnvironmentService;
 import org.apache.dolphinscheduler.api.utils.Result;
 import org.apache.dolphinscheduler.common.Constants;
-import org.apache.dolphinscheduler.plugin.task.api.utils.ParameterUtils;
 import org.apache.dolphinscheduler.dao.entity.User;
+import org.apache.dolphinscheduler.plugin.task.api.utils.ParameterUtils;
 
 import springfox.documentation.annotations.ApiIgnore;
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/K8sNamespaceController.java
Patch:
@@ -31,9 +31,9 @@
 import org.apache.dolphinscheduler.api.service.K8sNamespaceService;
 import org.apache.dolphinscheduler.api.utils.Result;
 import org.apache.dolphinscheduler.common.Constants;
-import org.apache.dolphinscheduler.plugin.task.api.utils.ParameterUtils;
 import org.apache.dolphinscheduler.dao.entity.K8sNamespace;
 import org.apache.dolphinscheduler.dao.entity.User;
+import org.apache.dolphinscheduler.plugin.task.api.utils.ParameterUtils;
 
 import springfox.documentation.annotations.ApiIgnore;
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/MonitorController.java
Patch:
@@ -28,6 +28,8 @@
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.dao.entity.User;
 
+import springfox.documentation.annotations.ApiIgnore;
+
 import java.util.Map;
 
 import org.springframework.beans.factory.annotation.Autowired;
@@ -40,7 +42,6 @@
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;
-import springfox.documentation.annotations.ApiIgnore;
 
 /**
  * monitor controller

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProjectController.java
Patch:
@@ -32,8 +32,8 @@
 import org.apache.dolphinscheduler.api.service.ProjectService;
 import org.apache.dolphinscheduler.api.utils.Result;
 import org.apache.dolphinscheduler.common.Constants;
-import org.apache.dolphinscheduler.plugin.task.api.utils.ParameterUtils;
 import org.apache.dolphinscheduler.dao.entity.User;
+import org.apache.dolphinscheduler.plugin.task.api.utils.ParameterUtils;
 
 import springfox.documentation.annotations.ApiIgnore;
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProjectV2Controller.java
Patch:
@@ -42,8 +42,8 @@
 import org.apache.dolphinscheduler.api.service.ProjectService;
 import org.apache.dolphinscheduler.api.utils.Result;
 import org.apache.dolphinscheduler.common.Constants;
-import org.apache.dolphinscheduler.plugin.task.api.utils.ParameterUtils;
 import org.apache.dolphinscheduler.dao.entity.User;
+import org.apache.dolphinscheduler.plugin.task.api.utils.ParameterUtils;
 
 import springfox.documentation.annotations.ApiIgnore;
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/QueueController.java
Patch:
@@ -27,8 +27,8 @@
 import org.apache.dolphinscheduler.api.service.QueueService;
 import org.apache.dolphinscheduler.api.utils.Result;
 import org.apache.dolphinscheduler.common.Constants;
-import org.apache.dolphinscheduler.plugin.task.api.utils.ParameterUtils;
 import org.apache.dolphinscheduler.dao.entity.User;
+import org.apache.dolphinscheduler.plugin.task.api.utils.ParameterUtils;
 
 import springfox.documentation.annotations.ApiIgnore;
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ResourcesController.java
Patch:
@@ -49,8 +49,8 @@
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.ProgramType;
 import org.apache.dolphinscheduler.common.enums.UdfType;
-import org.apache.dolphinscheduler.plugin.task.api.utils.ParameterUtils;
 import org.apache.dolphinscheduler.dao.entity.User;
+import org.apache.dolphinscheduler.plugin.task.api.utils.ParameterUtils;
 import org.apache.dolphinscheduler.spi.enums.ResourceType;
 
 import springfox.documentation.annotations.ApiIgnore;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/SchedulerController.java
Patch:
@@ -38,6 +38,7 @@
 import org.apache.dolphinscheduler.common.enums.WarningType;
 import org.apache.dolphinscheduler.dao.entity.User;
 import org.apache.dolphinscheduler.plugin.task.api.utils.ParameterUtils;
+
 import springfox.documentation.annotations.ApiIgnore;
 
 import java.util.Map;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/TaskDefinitionController.java
Patch:
@@ -36,8 +36,8 @@
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.ReleaseState;
 import org.apache.dolphinscheduler.common.enums.TaskExecuteType;
-import org.apache.dolphinscheduler.plugin.task.api.utils.ParameterUtils;
 import org.apache.dolphinscheduler.dao.entity.User;
+import org.apache.dolphinscheduler.plugin.task.api.utils.ParameterUtils;
 
 import springfox.documentation.annotations.ApiIgnore;
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/TaskInstanceController.java
Patch:
@@ -28,9 +28,9 @@
 import org.apache.dolphinscheduler.api.utils.Result;
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.TaskExecuteType;
-import org.apache.dolphinscheduler.plugin.task.api.utils.ParameterUtils;
 import org.apache.dolphinscheduler.dao.entity.User;
 import org.apache.dolphinscheduler.plugin.task.api.enums.TaskExecutionStatus;
+import org.apache.dolphinscheduler.plugin.task.api.utils.ParameterUtils;
 
 import springfox.documentation.annotations.ApiIgnore;
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/TenantController.java
Patch:
@@ -29,8 +29,8 @@
 import org.apache.dolphinscheduler.api.service.TenantService;
 import org.apache.dolphinscheduler.api.utils.Result;
 import org.apache.dolphinscheduler.common.Constants;
-import org.apache.dolphinscheduler.plugin.task.api.utils.ParameterUtils;
 import org.apache.dolphinscheduler.dao.entity.User;
+import org.apache.dolphinscheduler.plugin.task.api.utils.ParameterUtils;
 
 import springfox.documentation.annotations.ApiIgnore;
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/UsersController.java
Patch:
@@ -39,8 +39,8 @@
 import org.apache.dolphinscheduler.api.service.UsersService;
 import org.apache.dolphinscheduler.api.utils.Result;
 import org.apache.dolphinscheduler.common.Constants;
-import org.apache.dolphinscheduler.plugin.task.api.utils.ParameterUtils;
 import org.apache.dolphinscheduler.dao.entity.User;
+import org.apache.dolphinscheduler.plugin.task.api.utils.ParameterUtils;
 
 import springfox.documentation.annotations.ApiIgnore;
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/WorkFlowLineageController.java
Patch:
@@ -28,9 +28,9 @@
 import org.apache.dolphinscheduler.api.service.WorkFlowLineageService;
 import org.apache.dolphinscheduler.api.utils.Result;
 import org.apache.dolphinscheduler.common.Constants;
-import org.apache.dolphinscheduler.plugin.task.api.utils.ParameterUtils;
 import org.apache.dolphinscheduler.dao.entity.User;
 import org.apache.dolphinscheduler.dao.entity.WorkFlowLineage;
+import org.apache.dolphinscheduler.plugin.task.api.utils.ParameterUtils;
 
 import springfox.documentation.annotations.ApiIgnore;
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/dto/CommandStateCount.java
Patch:
@@ -28,7 +28,8 @@ public class CommandStateCount {
     private int normalCount;
     private CommandType commandState;
 
-    public CommandStateCount(){}
+    public CommandStateCount() {
+    }
 
     public CommandStateCount(int errorCount, int normalCount, CommandType commandState) {
         this.errorCount = errorCount;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/dto/CreateTokenRequest.java
Patch:
@@ -17,10 +17,10 @@
 
 package org.apache.dolphinscheduler.api.dto;
 
-
 import io.swagger.annotations.ApiModelProperty;
 
 public class CreateTokenRequest {
+
     @ApiModelProperty(example = "1", required = true)
     Integer userId;
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/dto/CreateTokenResponse.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.dolphinscheduler.dao.entity.AccessToken;
 
 public class CreateTokenResponse extends Result {
+
     private AccessToken data;
 
     public CreateTokenResponse(Result result) {

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/dto/RuleDefinition.java
Patch:
@@ -40,7 +40,7 @@ public class RuleDefinition {
     public RuleDefinition() {
     }
 
-    public RuleDefinition(List<DqRuleInputEntry> ruleInputEntryList,List<DqRuleExecuteSql> executeSqlList) {
+    public RuleDefinition(List<DqRuleInputEntry> ruleInputEntryList, List<DqRuleExecuteSql> executeSqlList) {
         this.ruleInputEntryList = ruleInputEntryList;
         this.executeSqlList = executeSqlList;
     }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/dto/TaskStateCount.java
Patch:
@@ -17,10 +17,11 @@
 
 package org.apache.dolphinscheduler.api.dto;
 
+import org.apache.dolphinscheduler.plugin.task.api.enums.TaskExecutionStatus;
+
 import lombok.AllArgsConstructor;
 import lombok.Data;
 import lombok.NoArgsConstructor;
-import org.apache.dolphinscheduler.plugin.task.api.enums.TaskExecutionStatus;
 
 @Data
 @NoArgsConstructor

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/dto/gantt/Task.java
Patch:
@@ -25,6 +25,7 @@
  * Task
  */
 public class Task {
+
     /**
      * task name
      */

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/dto/project/ProjectCreateRequest.java
Patch:
@@ -17,8 +17,8 @@
 
 package org.apache.dolphinscheduler.api.dto.project;
 
-import io.swagger.annotations.ApiModelProperty;
 import lombok.Data;
+import io.swagger.annotations.ApiModelProperty;
 
 /**
  * project create request

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/dto/project/ProjectDeleteResponse.java
Patch:
@@ -35,4 +35,4 @@ public ProjectDeleteResponse(Result result) {
         this.setMsg(result.getMsg());
         this.setData((Boolean) result.getData());
     }
-}
\ No newline at end of file
+}

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/dto/project/ProjectQueryRequest.java
Patch:
@@ -19,12 +19,13 @@
 
 import org.apache.dolphinscheduler.api.dto.PageQueryDto;
 
+import lombok.Data;
+
 import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
 import com.fasterxml.jackson.annotation.JsonInclude;
 
 import io.swagger.annotations.ApiModel;
 import io.swagger.annotations.ApiModelProperty;
-import lombok.Data;
 
 /**
  * project query request

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/dto/project/ProjectUpdateRequest.java
Patch:
@@ -17,11 +17,11 @@
 
 package org.apache.dolphinscheduler.api.dto.project;
 
+import lombok.Data;
+
 import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
 import com.fasterxml.jackson.annotation.JsonInclude;
-
 import io.swagger.annotations.ApiModelProperty;
-import lombok.Data;
 
 /**
  * project update request

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/dto/queue/QueueCreateRequest.java
Patch:
@@ -17,9 +17,9 @@
 
 package org.apache.dolphinscheduler.api.dto.queue;
 
+import lombok.Data;
 import io.swagger.annotations.ApiModel;
 import io.swagger.annotations.ApiModelProperty;
-import lombok.Data;
 
 /**
  * queue create request

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/dto/queue/QueueQueryRequest.java
Patch:
@@ -19,12 +19,13 @@
 
 import org.apache.dolphinscheduler.api.dto.PageQueryDto;
 
+import lombok.Data;
+
 import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
 import com.fasterxml.jackson.annotation.JsonInclude;
 
 import io.swagger.annotations.ApiModel;
 import io.swagger.annotations.ApiModelProperty;
-import lombok.Data;
 
 /**
  * queue query request

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/dto/queue/QueueUpdateRequest.java
Patch:
@@ -17,12 +17,13 @@
 
 package org.apache.dolphinscheduler.api.dto.queue;
 
+import lombok.Data;
+
 import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
 import com.fasterxml.jackson.annotation.JsonInclude;
 
 import io.swagger.annotations.ApiModel;
 import io.swagger.annotations.ApiModelProperty;
-import lombok.Data;
 
 /**
  * queue update request

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/dto/queue/QueueVerifyRequest.java
Patch:
@@ -17,9 +17,9 @@
 
 package org.apache.dolphinscheduler.api.dto.queue;
 
+import lombok.Data;
 import io.swagger.annotations.ApiModel;
 import io.swagger.annotations.ApiModelProperty;
-import lombok.Data;
 
 /**
  * queue verify request

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/dto/resources/FileLeaf.java
Patch:
@@ -19,6 +19,6 @@
 /**
  * file leaf
  */
-public class FileLeaf extends ResourceComponent{
+public class FileLeaf extends ResourceComponent {
 
 }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/dto/resources/filter/IFilter.java
Patch:
@@ -24,5 +24,6 @@
  * interface filter
  */
 public interface IFilter {
+
     List<Resource> filter();
 }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/dto/resources/visitor/Visitor.java
Patch:
@@ -23,6 +23,7 @@
  * Visitor
  */
 public interface Visitor {
+
     /**
      * visit
      * @return resource component

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/dto/schedule/ScheduleCreateRequest.java
Patch:
@@ -33,9 +33,6 @@
 import com.google.gson.GsonBuilder;
 import io.swagger.annotations.ApiModelProperty;
 
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-
 /**
  * schedule create request
  */

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/ExecuteType.java
Patch:
@@ -33,7 +33,7 @@ public enum ExecuteType {
     NONE, REPEAT_RUNNING, RECOVER_SUSPENDED_PROCESS, START_FAILURE_TASK_PROCESS, STOP, PAUSE;
 
     public static ExecuteType getEnum(int value) {
-        for (ExecuteType e: ExecuteType.values()) {
+        for (ExecuteType e : ExecuteType.values()) {
             if (e.ordinal() == value) {
                 return e;
             }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/exceptions/ApiException.java
Patch:
@@ -31,5 +31,6 @@
 @Retention(RUNTIME)
 @Target(METHOD)
 public @interface ApiException {
+
     Status value();
 }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/exceptions/ApiExceptionHandler.java
Patch:
@@ -55,4 +55,3 @@ public Result exceptionHandler(Exception e, HandlerMethod hm) {
     }
 
 }
-

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/k8s/K8sManager.java
Patch:
@@ -67,7 +67,8 @@ public synchronized KubernetesClient getK8sClient(Long clusterCode) throws Remot
      * @param clusterCode
      * @return new client if need updated
      */
-    public synchronized KubernetesClient getAndUpdateK8sClient(Long clusterCode, boolean update) throws RemotingException {
+    public synchronized KubernetesClient getAndUpdateK8sClient(Long clusterCode,
+                                                               boolean update) throws RemotingException {
         if (null == clusterCode) {
             return null;
         }
@@ -84,7 +85,6 @@ public synchronized KubernetesClient getAndUpdateK8sClient(Long clusterCode, boo
         return clientMap.get(clusterCode);
     }
 
-
     private void deleteK8sClientInner(Long clusterCode) {
         if (clusterCode == null) {
             return;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/security/Authenticator.java
Patch:
@@ -25,6 +25,7 @@
 import javax.servlet.http.HttpServletRequest;
 
 public interface Authenticator {
+
     /**
      * Verifying legality via username and password
      * @param username user name

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/security/SecurityConfig.java
Patch:
@@ -32,6 +32,7 @@
 
 @Configuration
 public class SecurityConfig {
+
     private static final Logger logger = LoggerFactory.getLogger(SecurityConfig.class);
 
     @Value("${security.authentication.type:PASSWORD}")

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/security/impl/AbstractAuthenticator.java
Patch:
@@ -38,6 +38,7 @@
 import org.springframework.beans.factory.annotation.Autowired;
 
 public abstract class AbstractAuthenticator implements Authenticator {
+
     private static final Logger logger = LoggerFactory.getLogger(AbstractAuthenticator.class);
 
     @Autowired
@@ -106,7 +107,7 @@ public User getAuthUser(HttpServletRequest request) {
             logger.info("session info is null ");
             return null;
         }
-        //get user object from session
+        // get user object from session
         return userService.queryUser(session.getUserId());
     }
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/security/impl/ldap/LdapAuthenticator.java
Patch:
@@ -32,7 +32,7 @@ public User login(String userId, String password, String extra) {
         User user = null;
         String ldapEmail = ldapService.ldapLogin(userId, password);
         if (ldapEmail != null) {
-            //check if user exist
+            // check if user exist
             user = userService.getUserByUserName(userId);
             if (user == null && ldapService.createIfUserNotExists()) {
                 user = userService.createUser(ldapService.getUserType(userId), userId, ldapEmail);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/AccessTokenService.java
Patch:
@@ -57,7 +57,6 @@ public interface AccessTokenService {
      */
     Result createToken(User loginUser, int userId, String expireTime, String token);
 
-
     /**
      * generate token
      *

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/AlertGroupService.java
Patch:
@@ -76,7 +76,8 @@ public interface AlertGroupService {
      * @param alertInstanceIds alertInstanceIds
      * @return update result code
      */
-    Map<String, Object> updateAlertgroup(User loginUser, int id, String groupName, String desc, String alertInstanceIds);
+    Map<String, Object> updateAlertgroup(User loginUser, int id, String groupName, String desc,
+                                         String alertInstanceIds);
 
     /**
      * delete alert group by id

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/AlertPluginInstanceService.java
Patch:
@@ -36,7 +36,7 @@ public interface AlertPluginInstanceService {
      * @param pluginInstanceParams plugin instance params
      * @return result
      */
-    Map<String, Object> create(User loginUser,int pluginDefineId,String instanceName,String pluginInstanceParams);
+    Map<String, Object> create(User loginUser, int pluginDefineId, String instanceName, String pluginInstanceParams);
 
     /**
      * update
@@ -46,7 +46,8 @@ public interface AlertPluginInstanceService {
      * @param pluginInstanceParams plugin instance params
      * @return result
      */
-    Map<String, Object> update(User loginUser, int alertPluginInstanceId,String instanceName,String pluginInstanceParams);
+    Map<String, Object> update(User loginUser, int alertPluginInstanceId, String instanceName,
+                               String pluginInstanceParams);
 
     /**
      * delete alert plugin instance

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ClusterService.java
Patch:
@@ -96,4 +96,3 @@ public interface ClusterService {
     Map<String, Object> verifyCluster(String clusterName);
 
 }
-

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/DataAnalysisService.java
Patch:
@@ -19,6 +19,7 @@
 
 import org.apache.dolphinscheduler.dao.entity.ExecuteStatusCount;
 import org.apache.dolphinscheduler.dao.entity.User;
+
 import org.apache.ibatis.annotations.Param;
 
 import java.util.Date;
@@ -50,7 +51,8 @@ public interface DataAnalysisService {
      * @param endDate     end date
      * @return process instance state count data
      */
-    Map<String, Object> countProcessInstanceStateByProject(User loginUser, long projectCode, String startDate, String endDate);
+    Map<String, Object> countProcessInstanceStateByProject(User loginUser, long projectCode, String startDate,
+                                                           String endDate);
 
     /**
      * statistics the process definition quantities of a certain person

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/DataSourceService.java
Patch:
@@ -142,5 +142,5 @@ public interface DataSourceService {
      * @param tableName
      * @return
      */
-    Map<String, Object> getTableColumns(Integer datasourceId,String tableName);
+    Map<String, Object> getTableColumns(Integer datasourceId, String tableName);
 }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/DqRuleService.java
Patch:
@@ -38,5 +38,5 @@ Result queryRuleListPaging(User loginUser,
                                String endTime,
                                Integer pageNo, Integer pageSize);
 
-    Map<String,Object> getDatasourceOptionsById(int datasourceId);
+    Map<String, Object> getDatasourceOptionsById(int datasourceId);
 }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/EnvironmentService.java
Patch:
@@ -52,7 +52,6 @@ public interface EnvironmentService {
      */
     Map<String, Object> queryEnvironmentByCode(Long code);
 
-
     /**
      * delete environment
      *
@@ -71,7 +70,8 @@ public interface EnvironmentService {
      * @param desc environment desc
      * @param workerGroups worker groups
      */
-    Map<String, Object> updateEnvironmentByCode(User loginUser, Long code, String name, String config, String desc, String workerGroups);
+    Map<String, Object> updateEnvironmentByCode(User loginUser, Long code, String name, String config, String desc,
+                                                String workerGroups);
 
     /**
      * query environment paging
@@ -100,4 +100,3 @@ public interface EnvironmentService {
     Map<String, Object> verifyEnvironment(String environmentName);
 
 }
-

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/EnvironmentWorkerGroupRelationService.java
Patch:
@@ -38,4 +38,3 @@ public interface EnvironmentWorkerGroupRelationService {
      */
     Map<String, Object> queryAllEnvironmentWorkerGroupRelationList();
 }
-

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ExecutorService.java
Patch:
@@ -61,7 +61,8 @@ public interface ExecutorService {
     Map<String, Object> execProcessInstance(User loginUser, long projectCode,
                                             long processDefinitionCode, String cronTime, CommandType commandType,
                                             FailureStrategy failureStrategy, String startNodeList,
-                                            TaskDependType taskDependType, WarningType warningType, Integer warningGroupId,
+                                            TaskDependType taskDependType, WarningType warningType,
+                                            Integer warningGroupId,
                                             RunMode runMode,
                                             Priority processInstancePriority, String workerGroup, Long environmentCode,
                                             Integer timeout,

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/LoggerService.java
Patch:
@@ -38,7 +38,6 @@ public interface LoggerService {
      */
     Result<ResponseTaskLog> queryLog(int taskInstId, int skipLineNum, int limit);
 
-
     /**
      * get log size
      *

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProcessDefinitionService.java
Patch:
@@ -245,8 +245,8 @@ Map<String, Object> verifyProcessDefinitionName(User loginUser,
      * @return delete result code
      */
     Map<String, Object> batchDeleteProcessDefinitionByCodes(User loginUser,
-                                                           long projectCode,
-                                                           String codes);
+                                                            long projectCode,
+                                                            String codes);
 
     /**
      * delete process definition by code

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/QueueService.java
Patch:
@@ -21,8 +21,6 @@
 import org.apache.dolphinscheduler.dao.entity.Queue;
 import org.apache.dolphinscheduler.dao.entity.User;
 
-import java.util.Map;
-
 /**
  * queue service
  */

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/TaskGroupService.java
Patch:
@@ -66,7 +66,7 @@ Map<String, Object> updateTaskGroup(User loginUser, int id, String name,
      * @param pageSize  page size
      * @return the result code and msg
      */
-    Map<String, Object> queryAllTaskGroup(User loginUser, String name,Integer status, int pageNo, int pageSize);
+    Map<String, Object> queryAllTaskGroup(User loginUser, String name, Integer status, int pageNo, int pageSize);
 
     /**
      * query all task group by status

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/TenantService.java
Patch:
@@ -66,7 +66,7 @@ Map<String, Object> createTenant(User loginUser,
      * @throws Exception exception
      */
     Map<String, Object> updateTenant(User loginUser, int id, String tenantCode, int queueId,
-            String desc) throws Exception;
+                                     String desc) throws Exception;
 
     /**
      * delete tenant

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/WorkerGroupService.java
Patch:
@@ -38,7 +38,8 @@ public interface WorkerGroupService {
      * @param otherParamsJson  otherParamsJson
      * @return create or update result code
      */
-    Map<String, Object> saveWorkerGroup(User loginUser, int id, String name, String addrList, String description, String otherParamsJson);
+    Map<String, Object> saveWorkerGroup(User loginUser, int id, String name, String addrList, String description,
+                                        String otherParamsJson);
 
     /**
      * query worker group paging

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/AuditServiceImpl.java
Patch:
@@ -88,7 +88,7 @@ public Result queryLogListPaging(User loginUser, AuditResourceType resourceType,
         Map<String, Object> checkAndParseDateResult = checkAndParseDateParameters(startDate, endDate);
         Status resultEnum = (Status) checkAndParseDateResult.get(Constants.STATUS);
         if (resultEnum != Status.SUCCESS) {
-            putMsg(result,resultEnum);
+            putMsg(result, resultEnum);
             return result;
         }
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ClusterServiceImpl.java
Patch:
@@ -258,7 +258,8 @@ public Map<String, Object> deleteClusterByCode(User loginUser, Long code) {
                 .selectCount(new QueryWrapper<K8sNamespace>().lambda().eq(K8sNamespace::getClusterCode, code));
 
         if (relatedNamespaceNumber > 0) {
-            logger.warn("Delete cluster failed because {} namespace(s) is(are) using it, clusterCode:{}.", relatedNamespaceNumber, code);
+            logger.warn("Delete cluster failed because {} namespace(s) is(are) using it, clusterCode:{}.",
+                    relatedNamespaceNumber, code);
             putMsg(result, Status.DELETE_CLUSTER_RELATED_NAMESPACE_EXISTS);
             return result;
         }
@@ -274,7 +275,6 @@ public Map<String, Object> deleteClusterByCode(User loginUser, Long code) {
         return result;
     }
 
-
     /**
      * update cluster
      *

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/DqExecuteResultServiceImpl.java
Patch:
@@ -21,7 +21,6 @@
 import org.apache.dolphinscheduler.api.service.DqExecuteResultService;
 import org.apache.dolphinscheduler.api.utils.PageInfo;
 import org.apache.dolphinscheduler.api.utils.Result;
-import org.apache.dolphinscheduler.common.enums.AuthorizationType;
 import org.apache.dolphinscheduler.common.utils.DateUtils;
 import org.apache.dolphinscheduler.dao.entity.DqExecuteResult;
 import org.apache.dolphinscheduler.dao.entity.User;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/K8SNamespaceServiceImpl.java
Patch:
@@ -31,8 +31,8 @@
 import org.apache.dolphinscheduler.dao.mapper.K8sNamespaceMapper;
 import org.apache.dolphinscheduler.remote.exceptions.RemotingException;
 
-import org.apache.commons.lang3.StringUtils;
 import org.apache.commons.collections.CollectionUtils;
+import org.apache.commons.lang3.StringUtils;
 
 import java.util.ArrayList;
 import java.util.Date;
@@ -445,7 +445,7 @@ public List<K8sNamespace> queryNamespaceAvailable(User loginUser) {
         if (isAdmin(loginUser)) {
             k8sNamespaces = k8sNamespaceMapper.selectList(null);
         } else {
-             k8sNamespaces = k8sNamespaceMapper.queryNamespaceAvailable(loginUser.getId());
+            k8sNamespaces = k8sNamespaceMapper.queryNamespaceAvailable(loginUser.getId());
         }
         setClusterName(k8sNamespaces);
         return k8sNamespaces;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProcessDefinitionServiceImpl.java
Patch:
@@ -973,8 +973,7 @@ public Map<String, Object> batchDeleteProcessDefinitionByCodes(User loginUser, l
                     diffCode.stream().map(String::valueOf).collect(Collectors.joining(Constants.COMMA)));
             throw new ServiceException(Status.BATCH_DELETE_PROCESS_DEFINE_BY_CODES_ERROR,
                     diffCode.stream().map(code -> code + "[process definition not exist]")
-                            .collect(Collectors.joining(Constants.COMMA))
-            );
+                            .collect(Collectors.joining(Constants.COMMA)));
         }
 
         for (ProcessDefinition process : processDefinitionList) {
@@ -1003,7 +1002,8 @@ private void processDefinitionUsedInOtherTaskValid(ProcessDefinition processDefi
 
         // check process instances is already running
         List<ProcessInstance> processInstances = processInstanceService
-                .queryByProcessDefineCodeAndStatus(processDefinition.getCode(), org.apache.dolphinscheduler.service.utils.Constants.NOT_TERMINATED_STATES);
+                .queryByProcessDefineCodeAndStatus(processDefinition.getCode(),
+                        org.apache.dolphinscheduler.service.utils.Constants.NOT_TERMINATED_STATES);
         if (CollectionUtils.isNotEmpty(processInstances)) {
             throw new ServiceException(Status.DELETE_PROCESS_DEFINITION_EXECUTING_FAIL, processInstances.size());
         }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/SessionServiceImpl.java
Patch:
@@ -153,7 +153,7 @@ public void signOut(String ip, User loginUser) {
              */
             Session session = sessionMapper.queryByUserIdAndIp(loginUser.getId(), ip);
 
-            //delete session
+            // delete session
             sessionMapper.deleteById(session.getId());
         } catch (Exception e) {
             logger.warn("userId : {} , ip : {} , find more one session", loginUser.getId(), ip, e);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/TaskGroupServiceImpl.java
Patch:
@@ -117,7 +117,8 @@ public Map<String, Object> createTaskGroup(User loginUser, Long projectCode, Str
         taskGroup.setCreateTime(new Date());
         taskGroup.setUpdateTime(new Date());
         if (taskGroupMapper.insert(taskGroup) > 0) {
-            permissionPostHandle(AuthorizationType.TASK_GROUP, loginUser.getId(), Collections.singletonList(taskGroup.getId()),logger);
+            permissionPostHandle(AuthorizationType.TASK_GROUP, loginUser.getId(),
+                    Collections.singletonList(taskGroup.getId()), logger);
             logger.info("Create task group complete, taskGroupName:{}.", taskGroup.getName());
             putMsg(result, Status.SUCCESS);
         } else {

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/WorkerGroupServiceImpl.java
Patch:
@@ -322,7 +322,8 @@ public Map<String, Object> deleteWorkerGroupById(User loginUser, Integer id) {
             return result;
         }
         List<ProcessInstance> processInstances = processInstanceMapper
-                .queryByWorkerGroupNameAndStatus(workerGroup.getName(), org.apache.dolphinscheduler.service.utils.Constants.NOT_TERMINATED_STATES);
+                .queryByWorkerGroupNameAndStatus(workerGroup.getName(),
+                        org.apache.dolphinscheduler.service.utils.Constants.NOT_TERMINATED_STATES);
         if (CollectionUtils.isNotEmpty(processInstances)) {
             List<Integer> processInstanceIds =
                     processInstances.stream().map(ProcessInstance::getId).collect(Collectors.toList());

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/utils/FileUtils.java
Patch:
@@ -36,6 +36,7 @@
  * file utils
  */
 public class FileUtils {
+
     private static final Logger logger = LoggerFactory.getLogger(FileUtils.class);
 
     /**

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/utils/PageInfo.java
Patch:
@@ -53,7 +53,7 @@ public class PageInfo<T> {
     private Integer pageNo;
 
     public PageInfo() {
-        
+
     }
 
     public PageInfo(Integer currentPage, Integer pageSize) {
@@ -128,4 +128,4 @@ public Integer getCurrentPage() {
     public void setCurrentPage(Integer currentPage) {
         this.currentPage = currentPage;
     }
-}
\ No newline at end of file
+}

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/WorkerGroupControllerTest.java
Patch:
@@ -24,7 +24,6 @@
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
 
 import org.apache.dolphinscheduler.api.utils.Result;
-import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.NodeType;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
 import org.apache.dolphinscheduler.dao.entity.WorkerGroup;
@@ -134,7 +133,8 @@ public void testDeleteById() throws Exception {
         workerGroup.setId(12);
         workerGroup.setName("测试");
         Mockito.when(workerGroupMapper.selectById(12)).thenReturn(workerGroup);
-        Mockito.when(processInstanceMapper.queryByWorkerGroupNameAndStatus("测试", org.apache.dolphinscheduler.service.utils.Constants.NOT_TERMINATED_STATES))
+        Mockito.when(processInstanceMapper.queryByWorkerGroupNameAndStatus("测试",
+                org.apache.dolphinscheduler.service.utils.Constants.NOT_TERMINATED_STATES))
                 .thenReturn(null);
         Mockito.when(workerGroupMapper.deleteById(12)).thenReturn(1);
         Mockito.when(processInstanceMapper.updateProcessInstanceByWorkerGroupName("测试", "")).thenReturn(1);

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/BaseServiceTest.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.dolphinscheduler.common.enums.UserType;
 import org.apache.dolphinscheduler.dao.entity.User;
 import org.apache.dolphinscheduler.service.storage.impl.HadoopUtils;
+
 import java.util.HashMap;
 import java.util.Map;
 

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProcessTaskRelationServiceTest.java
Patch:
@@ -52,6 +52,7 @@
 import java.util.Objects;
 import java.util.Set;
 import java.util.stream.Collectors;
+
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/TenantServiceTest.java
Patch:
@@ -205,7 +205,8 @@ public void testDeleteTenantById() throws Exception {
         Mockito.when(resourcePermissionCheckService.resourcePermissionCheck(AuthorizationType.TENANT, null, 0,
                 baseServiceLogger)).thenReturn(true);
         Mockito.when(tenantMapper.queryById(1)).thenReturn(getTenant());
-        Mockito.when(processInstanceMapper.queryByTenantIdAndStatus(1, org.apache.dolphinscheduler.service.utils.Constants.NOT_TERMINATED_STATES))
+        Mockito.when(processInstanceMapper.queryByTenantIdAndStatus(1,
+                org.apache.dolphinscheduler.service.utils.Constants.NOT_TERMINATED_STATES))
                 .thenReturn(getInstanceList());
         Mockito.when(processDefinitionMapper.queryDefinitionListByTenant(2)).thenReturn(getDefinitionsList());
         Mockito.when(userMapper.queryUserListByTenant(3)).thenReturn(getUserList());

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/config/YamlPropertySourceFactory.java
Patch:
@@ -17,15 +17,15 @@
 
 package org.apache.dolphinscheduler.common.config;
 
+import java.io.IOException;
+import java.util.Properties;
+
 import org.springframework.beans.factory.config.YamlPropertiesFactoryBean;
 import org.springframework.core.env.PropertiesPropertySource;
 import org.springframework.core.env.PropertySource;
 import org.springframework.core.io.support.EncodedResource;
 import org.springframework.core.io.support.PropertySourceFactory;
 
-import java.io.IOException;
-import java.util.Properties;
-
 public class YamlPropertySourceFactory implements PropertySourceFactory {
 
     @Override

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/AlertEvent.java
Patch:
@@ -19,5 +19,5 @@
 
 public enum AlertEvent {
 
-    SERVER_DOWN,TIME_OUT
+    SERVER_DOWN, TIME_OUT
 }

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/AlertStatus.java
Patch:
@@ -23,6 +23,7 @@
  * alert sending(execution) status
  */
 public enum AlertStatus {
+
     /**
      * 0 waiting executed; 1 execute successfully，2 execute failed
      */

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/AlertType.java
Patch:
@@ -23,6 +23,7 @@
  * describe the reason why alert generates
  */
 public enum AlertType {
+
     /**
      * 0 process instance failure, 1 process instance success, 2 process instance blocked, 3 process instance timeout, 4 fault tolerance warning,
      * 5 task failure, 6 task success, 7 task timeout, 8 close alert
@@ -36,8 +37,7 @@ public enum AlertType {
     TASK_SUCCESS(6, "task success"),
     TASK_TIMEOUT(7, "task timeout"),
 
-    CLOSE_ALERT(8, "the process instance success, can close the before alert")
-    ;
+    CLOSE_ALERT(8, "the process instance success, can close the before alert");
 
     AlertType(int code, String descp) {
         this.code = code;

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/AlertWarnLevel.java
Patch:
@@ -19,5 +19,5 @@
 
 public enum AlertWarnLevel {
 
-    MIDDLE,SERIOUS
+    MIDDLE, SERIOUS
 }

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/AuditResourceType.java
Patch:
@@ -23,6 +23,7 @@
  * Audit Module type
  */
 public enum AuditResourceType {
+
     // TODO: add other audit resource enums
     USER_MODULE(0, "USER"),
     PROJECT_MODULE(1, "PROJECT");

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/BlockingOpportunity.java
Patch:
@@ -24,7 +24,7 @@ public enum BlockingOpportunity {
 
     private final String desc;
 
-    BlockingOpportunity(String desc){
+    BlockingOpportunity(String desc) {
         this.desc = desc;
     }
 

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/CacheType.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.dolphinscheduler.common.enums;
 
 public enum CacheType {
+
     TENANT("tenant"),
     USER("user"),
     QUEUE("queue"),

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/CommandType.java
Patch:
@@ -76,7 +76,7 @@ public String getDescp() {
 
     static {
         for (CommandType commandType : CommandType.values()) {
-            COMMAND_TYPE_MAP.put(commandType.code,commandType);
+            COMMAND_TYPE_MAP.put(commandType.code, commandType);
         }
     }
 

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/ComplementDependentMode.java
Patch:
@@ -23,12 +23,13 @@
  * task node depend type
  */
 public enum ComplementDependentMode {
+
     /**
      * 0 off mode
      * 1 run complement data with all dependent process
      */
-    OFF_MODE(0,"off mode"),
-    ALL_DEPENDENT(1,"all dependent");
+    OFF_MODE(0, "off mode"),
+    ALL_DEPENDENT(1, "all dependent");
 
     ComplementDependentMode(int code, String desc) {
         this.code = code;

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/ConditionType.java
Patch:
@@ -26,6 +26,7 @@
  * condition type
  */
 public enum ConditionType {
+
     /**
      * 0 none
      * 1 judge

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/Flag.java
Patch:
@@ -28,6 +28,7 @@
  * have_alert
  */
 public enum Flag {
+
     /**
      * 0 no
      * 1 yes

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/HttpCheckCondition.java
Patch:
@@ -27,5 +27,5 @@ public enum HttpCheckCondition {
      * 2 body_contains
      * 3 body_not_contains
      */
-    STATUS_CODE_DEFAULT,STATUS_CODE_CUSTOM, BODY_CONTAINS, BODY_NOT_CONTAINS
-}
\ No newline at end of file
+    STATUS_CODE_DEFAULT, STATUS_CODE_CUSTOM, BODY_CONTAINS, BODY_NOT_CONTAINS
+}

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/HttpMethod.java
Patch:
@@ -29,4 +29,4 @@ public enum HttpMethod {
      * 4 delete
      */
     GET, POST, HEAD, PUT, DELETE
-}
\ No newline at end of file
+}

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/HttpParametersType.java
Patch:
@@ -26,5 +26,5 @@ public enum HttpParametersType {
      * 1 body;
      * 2 headers;
      */
-    PARAMETER,BODY,HEADERS
+    PARAMETER, BODY, HEADERS
 }

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/PluginType.java
Patch:
@@ -28,7 +28,7 @@ public enum PluginType {
 
     ALERT(1, "alert", true),
     REGISTER(2, "register", false),
-    TASK(3,"task",true);
+    TASK(3, "task", true);
 
     PluginType(int code, String desc, boolean hasUi) {
         this.code = code;
@@ -53,7 +53,6 @@ public boolean getHasUi() {
         return hasUi;
     }
 
-
     private static HashMap<Integer, PluginType> PLUGIN_TYPE_MAP = new HashMap<>();
 
     static {

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/Priority.java
Patch:
@@ -23,6 +23,7 @@
  *  define process and task priority
  */
 public enum Priority {
+
     /**
      * 0 highest priority
      * 1 higher priority

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/ReleaseState.java
Patch:
@@ -41,12 +41,12 @@ public enum ReleaseState {
     private final String descp;
 
     public static ReleaseState getEnum(int value) {
-        for (ReleaseState e:ReleaseState.values()) {
+        for (ReleaseState e : ReleaseState.values()) {
             if (e.ordinal() == value) {
                 return e;
             }
         }
-        //For values out of enum scope
+        // For values out of enum scope
         return null;
     }
 

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/RunMode.java
Patch:
@@ -22,7 +22,8 @@
 /**
  * complement data run mode
  */
-public enum  RunMode {
+public enum RunMode {
+
     /**
      * 0 serial run
      * 1 parallel run

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/SlotCheckState.java
Patch:
@@ -19,5 +19,5 @@
 
 public enum SlotCheckState {
 
-    PASS,INJECT,CHANGE
+    PASS, INJECT, CHANGE
 }

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/SqoopJobType.java
Patch:
@@ -19,7 +19,8 @@
 
 import com.baomidou.mybatisplus.annotation.EnumValue;
 
-public enum  SqoopJobType {
+public enum SqoopJobType {
+
     CUSTOM(0, "CUSTOM"),
     TEMPLATE(1, "TEMPLATE");
 

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/TaskDependType.java
Patch:
@@ -23,6 +23,7 @@
  * task node depend type
  */
 public enum TaskDependType {
+
     /**
      * 0 run current tasks only
      * 1 run current tasks and previous tasks

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/TaskExecuteType.java
Patch:
@@ -23,6 +23,7 @@
  * task execute type
  */
 public enum TaskExecuteType {
+
     /**
      * 0 batch
      * 1 stream

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/TaskRecordStatus.java
Patch:
@@ -29,7 +29,6 @@ public enum TaskRecordStatus {
      * 1 failure
      * 2 exception
      */
-    SUCCESS,FAILURE,EXCEPTION
-
+    SUCCESS, FAILURE, EXCEPTION
 
 }

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/TimeoutFlag.java
Patch:
@@ -23,6 +23,7 @@
  * timeout flag
  */
 public enum TimeoutFlag {
+
     /**
      * 0 close
      * 1 open

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/UserType.java
Patch:
@@ -23,6 +23,7 @@
  * user type
  */
 public enum UserType {
+
     /**
      * 0 admin user; 1 general user
      */
@@ -46,4 +47,3 @@ public String getDescp() {
         return descp;
     }
 }
-

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/WarningType.java
Patch:
@@ -29,6 +29,7 @@
  * types for whether to send warning when process ends;
  */
 public enum WarningType {
+
     /**
      * 0 do not send warning;
      * 1 send if process success;
@@ -58,7 +59,7 @@ public String getDescp() {
     }
 
     private static final Map<String, WarningType> WARNING_TYPE_MAP =
-        Arrays.stream(WarningType.values()).collect(toMap(WarningType::getDescp, Functions.identity()));
+            Arrays.stream(WarningType.values()).collect(toMap(WarningType::getDescp, Functions.identity()));
 
     public static WarningType of(String descp) {
         if (WARNING_TYPE_MAP.containsKey(descp)) {

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/exception/StorageOperateNoConfiguredException.java
Patch:
@@ -37,7 +37,8 @@ public StorageOperateNoConfiguredException(Throwable cause) {
         super(cause);
     }
 
-    public StorageOperateNoConfiguredException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {
+    public StorageOperateNoConfiguredException(String message, Throwable cause, boolean enableSuppression,
+                                               boolean writableStackTrace) {
         super(message, cause, enableSuppression, writableStackTrace);
     }
 }

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/model/MasterHeartBeat.java
Patch:
@@ -27,6 +27,7 @@
 @NoArgsConstructor
 @AllArgsConstructor
 public class MasterHeartBeat implements HeartBeat {
+
     private long startupTime;
     private long reportTime;
     private double cpuUsage;

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/model/PreviousTaskNode.java
Patch:
@@ -37,7 +37,7 @@ public class PreviousTaskNode {
     public PreviousTaskNode() {
 
     }
-    
+
     public PreviousTaskNode(long code, String name, int version) {
         this.code = code;
         this.name = name;

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/model/Server.java
Patch:
@@ -17,10 +17,10 @@
 
 package org.apache.dolphinscheduler.common.model;
 
-import lombok.Data;
-
 import java.util.Date;
 
+import lombok.Data;
+
 @Data
 public class Server {
 

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/model/TaskNodeRelation.java
Patch:
@@ -60,7 +60,7 @@ public boolean equals(Object o) {
         if (!(o instanceof TaskNodeRelation)) {
             return false;
         }
-        TaskNodeRelation relation = (TaskNodeRelation)o;
+        TaskNodeRelation relation = (TaskNodeRelation) o;
         return (relation.getStartNode().equals(this.startNode) && relation.getEndNode().equals(this.endNode));
     }
 

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/model/WorkerHeartBeat.java
Patch:
@@ -44,5 +44,4 @@ public class WorkerHeartBeat implements HeartBeat {
     private int workerWaitingTaskCount; // worker waiting task count
     private int workerExecThreadCount; // worker thread pool thread count
 
-
 }

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/thread/ThreadUtils.java
Patch:
@@ -21,13 +21,13 @@
 import java.util.concurrent.Executors;
 import java.util.concurrent.ThreadFactory;
 
+import lombok.experimental.UtilityClass;
+
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import com.google.common.util.concurrent.ThreadFactoryBuilder;
 
-import lombok.experimental.UtilityClass;
-
 @UtilityClass
 public class ThreadUtils {
 

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/CollectionUtils.java
Patch:
@@ -75,7 +75,8 @@ public static boolean equalLists(Collection<?> a, Collection<?> b) {
      * @param <T> T
      * @return removes certain attributes of each object in the list
      */
-    public static <T extends Object> List<Map<String, Object>> getListByExclusion(List<T> originList, Set<String> exclusionSet) {
+    public static <T extends Object> List<Map<String, Object>> getListByExclusion(List<T> originList,
+                                                                                  Set<String> exclusionSet) {
         List<Map<String, Object>> instanceList = new ArrayList<>();
         if (originList == null) {
             return instanceList;

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/RetryerUtils.java
Patch:
@@ -30,6 +30,7 @@
 import com.github.rholder.retry.WaitStrategies;
 
 public class RetryerUtils {
+
     private static Retryer<Boolean> defaultRetryerResultCheck;
     private static Retryer<Boolean> defaultRetryerResultNoCheck;
 
@@ -92,7 +93,8 @@ public static Retryer<Boolean> getDefaultRetryer() {
      * @throws ExecutionException the execution exception
      * @throws RetryException     the retry exception
      */
-    public static Boolean retryCall(final Callable<Boolean> callable, boolean checkResult) throws ExecutionException, RetryException {
+    public static Boolean retryCall(final Callable<Boolean> callable,
+                                    boolean checkResult) throws ExecutionException, RetryException {
         return getDefaultRetryer(checkResult).call(callable);
     }
 

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/placeholder/BusinessTimeUtils.java
Patch:
@@ -17,12 +17,11 @@
 
 package org.apache.dolphinscheduler.common.utils.placeholder;
 
+import static org.apache.commons.lang3.time.DateUtils.addDays;
 import static org.apache.dolphinscheduler.common.Constants.PARAMETER_FORMAT_DATE;
 import static org.apache.dolphinscheduler.common.Constants.PARAMETER_FORMAT_TIME;
 import static org.apache.dolphinscheduler.common.utils.DateUtils.format;
 
-import static org.apache.commons.lang3.time.DateUtils.addDays;
-
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.CommandType;
 
@@ -34,6 +33,7 @@
  * business time utils
  */
 public class BusinessTimeUtils {
+
     private BusinessTimeUtils() {
         throw new IllegalStateException("BusinessTimeUtils class");
     }

File: dolphinscheduler-common/src/test/java/org/apache/dolphinscheduler/common/ConstantsTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.dolphinscheduler.common;
 
 import org.apache.commons.lang3.SystemUtils;
+
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 

File: dolphinscheduler-common/src/test/java/org/apache/dolphinscheduler/common/exception/ExceptionTest.java
Patch:
@@ -17,14 +17,13 @@
 
 package org.apache.dolphinscheduler.common.exception;
 
-
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
 public class ExceptionTest {
 
     @Test
-    public void testException(){
+    public void testException() {
         final String message = "Test";
         RuntimeException time = new RuntimeException(message);
 

File: dolphinscheduler-common/src/test/java/org/apache/dolphinscheduler/common/utils/CodeGenerateUtilsTest.java
Patch:
@@ -17,12 +17,13 @@
 
 package org.apache.dolphinscheduler.common.utils;
 
+import java.util.HashSet;
+
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
-import java.util.HashSet;
-
 public class CodeGenerateUtilsTest {
+
     @Test
     public void testNoGenerateDuplicateCode() throws CodeGenerateUtils.CodeGenerateException {
         HashSet<Long> existsCode = new HashSet<>();

File: dolphinscheduler-common/src/test/java/org/apache/dolphinscheduler/common/utils/EncryptionUtilsTest.java
Patch:
@@ -24,7 +24,6 @@
  */
 public class EncryptionUtilsTest {
 
-
     @Test
     public void testGetMd5() {
         Assertions.assertEquals(EncryptionUtils.getMd5(null), EncryptionUtils.getMd5(""));

File: dolphinscheduler-common/src/test/java/org/apache/dolphinscheduler/common/utils/NetUtilsTest.java
Patch:
@@ -45,7 +45,8 @@ public void testGetHostInKubernetesMode() {
             when(address.getCanonicalHostName())
                     .thenReturn("dolphinscheduler-worker-0.dolphinscheduler-worker-headless.default.svc.cluster.local");
             when(address.getHostName()).thenReturn("dolphinscheduler-worker-0");
-            Assertions.assertEquals("dolphinscheduler-worker-0.dolphinscheduler-worker-headless", NetUtils.getHost(address));
+            Assertions.assertEquals("dolphinscheduler-worker-0.dolphinscheduler-worker-headless",
+                    NetUtils.getHost(address));
 
             address = mock(InetAddress.class);
             when(address.getCanonicalHostName())

File: dolphinscheduler-common/src/test/java/org/apache/dolphinscheduler/common/utils/PropertyUtilsTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.dolphinscheduler.common.utils;
 
 import org.apache.dolphinscheduler.common.Constants;
+
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/AlertDao.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.dolphinscheduler.dao;
 
-import org.apache.commons.lang3.math.NumberUtils;
 import org.apache.dolphinscheduler.common.enums.AlertEvent;
 import org.apache.dolphinscheduler.common.enums.AlertStatus;
 import org.apache.dolphinscheduler.common.enums.AlertType;
@@ -39,6 +38,7 @@
 
 import org.apache.commons.codec.digest.DigestUtils;
 import org.apache.commons.collections4.CollectionUtils;
+import org.apache.commons.lang3.math.NumberUtils;
 
 import java.time.LocalDateTime;
 import java.time.ZoneId;
@@ -67,7 +67,7 @@ public class AlertDao {
      * logger of AlertDao
      */
     private static final Logger logger = LoggerFactory.getLogger(AlertDao.class);
-  
+
     private static final int QUERY_ALERT_THRESHOLD = 100;
 
     @Value("${alert.alarm-suppression.crash:60}")

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/CycleDependency.java
Patch:
@@ -25,6 +25,7 @@
  * cycle dependency
  */
 public class CycleDependency {
+
     /**
      * process define id
      */

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/DagData.java
Patch:
@@ -39,7 +39,8 @@ public class DagData {
      */
     private List<TaskDefinition> taskDefinitionList;
 
-    public DagData(ProcessDefinition processDefinition, List<ProcessTaskRelation> processTaskRelationList, List<TaskDefinition> taskDefinitionList) {
+    public DagData(ProcessDefinition processDefinition, List<ProcessTaskRelation> processTaskRelationList,
+                   List<TaskDefinition> taskDefinitionList) {
         this.processDefinition = processDefinition;
         this.processTaskRelationList = processTaskRelationList;
         this.taskDefinitionList = taskDefinitionList;

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/DataSource.java
Patch:
@@ -17,13 +17,13 @@
 
 package org.apache.dolphinscheduler.dao.entity;
 
-import com.baomidou.mybatisplus.annotation.*;
 import org.apache.dolphinscheduler.spi.enums.DbType;
 
 import java.util.Date;
 
 import lombok.Data;
 
+import com.baomidou.mybatisplus.annotation.FieldFill;
 import com.baomidou.mybatisplus.annotation.IdType;
 import com.baomidou.mybatisplus.annotation.TableField;
 import com.baomidou.mybatisplus.annotation.TableId;

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/DependentProcessDefinition.java
Patch:
@@ -89,13 +89,13 @@ public CycleEnum cycle2CycleEnum(String cycle) {
                 cycleEnum = CycleEnum.DAY;
                 break;
             case "hour":
-                cycleEnum =  CycleEnum.HOUR;
+                cycleEnum = CycleEnum.HOUR;
                 break;
             case "week":
-                cycleEnum =  CycleEnum.WEEK;
+                cycleEnum = CycleEnum.WEEK;
                 break;
             case "month":
-                cycleEnum =  CycleEnum.MONTH;
+                cycleEnum = CycleEnum.MONTH;
                 break;
             default:
                 break;

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/DqExecuteResultAlertContent.java
Patch:
@@ -35,7 +35,7 @@ public class DqExecuteResultAlertContent implements Serializable {
      * process define name
      */
     @JsonProperty("processDefinitionName")
-    private String  processDefinitionName;
+    private String processDefinitionName;
     /**
      * process_instance_id
      */
@@ -141,8 +141,9 @@ public static Builder newBuilder() {
     }
 
     public static class Builder {
+
         private long processDefinitionId;
-        private String  processDefinitionName;
+        private String processDefinitionName;
         private long processInstanceId;
         private String processInstanceName;
         private long taskInstanceId;

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/ErrorCommand.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.dolphinscheduler.dao.entity;
 
-import com.baomidou.mybatisplus.annotation.TableField;
 import org.apache.dolphinscheduler.common.enums.CommandType;
 import org.apache.dolphinscheduler.common.enums.FailureStrategy;
 import org.apache.dolphinscheduler.common.enums.Priority;
@@ -29,6 +28,7 @@
 import lombok.Data;
 
 import com.baomidou.mybatisplus.annotation.IdType;
+import com.baomidou.mybatisplus.annotation.TableField;
 import com.baomidou.mybatisplus.annotation.TableId;
 import com.baomidou.mybatisplus.annotation.TableName;
 

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/ExecuteStatusCount.java
Patch:
@@ -17,10 +17,11 @@
 
 package org.apache.dolphinscheduler.dao.entity;
 
+import org.apache.dolphinscheduler.plugin.task.api.enums.TaskExecutionStatus;
+
 import lombok.AllArgsConstructor;
 import lombok.Data;
 import lombok.NoArgsConstructor;
-import org.apache.dolphinscheduler.plugin.task.api.enums.TaskExecutionStatus;
 
 @Data
 @NoArgsConstructor

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/ResponseTaskLog.java
Patch:
@@ -26,6 +26,7 @@
 @Data
 @AllArgsConstructor
 public class ResponseTaskLog {
+
     private int lineNum;
     private String message;
 }

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/ServerAlertContent.java
Patch:
@@ -49,6 +49,7 @@ public static Builder newBuilder() {
     }
 
     public static class Builder {
+
         private String type;
 
         private String host;

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/Session.java
Patch:
@@ -16,12 +16,12 @@
  */
 package org.apache.dolphinscheduler.dao.entity;
 
+import java.util.Date;
+
 import com.baomidou.mybatisplus.annotation.IdType;
 import com.baomidou.mybatisplus.annotation.TableId;
 import com.baomidou.mybatisplus.annotation.TableName;
 
-import java.util.Date;
-
 /**
  * session
  */
@@ -31,7 +31,7 @@ public class Session {
     /**
      * id
      */
-    @TableId(value="id", type=IdType.INPUT)
+    @TableId(value = "id", type = IdType.INPUT)
     private String id;
 
     /**

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkFlowLineage.java
Patch:
@@ -20,6 +20,7 @@
 import java.util.Date;
 
 public class WorkFlowLineage {
+
     private long workFlowCode;
     private String workFlowName;
     private String workFlowPublishStatus;

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkFlowRelation.java
Patch:
@@ -20,6 +20,7 @@
 import java.util.Objects;
 
 public class WorkFlowRelation {
+
     private long sourceWorkFlowCode;
     private long targetWorkFlowCode;
 
@@ -57,7 +58,7 @@ public boolean equals(Object o) {
         }
         WorkFlowRelation that = (WorkFlowRelation) o;
         return sourceWorkFlowCode == that.sourceWorkFlowCode
-            && targetWorkFlowCode == that.targetWorkFlowCode;
+                && targetWorkFlowCode == that.targetWorkFlowCode;
     }
 
     @Override

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/AuditLogMapper.java
Patch:
@@ -30,6 +30,7 @@
  * auditlog mapper interface
  */
 public interface AuditLogMapper extends BaseMapper<AuditLog> {
+
     IPage<AuditLog> queryAuditLog(IPage<AuditLog> page,
                                   @Param("resourceType") int[] resourceArray,
                                   @Param("operationType") int[] operationType,

File: dolphinscheduler-scheduler-plugin/dolphinscheduler-scheduler-quartz/src/main/java/org/apache/dolphinscheduler/scheduler/quartz/ProcessScheduleTask.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.dolphinscheduler.scheduler.quartz;
 
+import org.apache.commons.lang3.StringUtils;
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.CommandType;
 import org.apache.dolphinscheduler.common.enums.ReleaseState;
@@ -36,7 +37,6 @@
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.scheduling.quartz.QuartzJobBean;
-import org.springframework.util.StringUtils;
 
 import io.micrometer.core.annotation.Counted;
 import io.micrometer.core.annotation.Timed;

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/AbstractCommandExecutor.java
Patch:
@@ -131,6 +131,7 @@ private void buildProcess(String commandFile) throws IOException {
                 command.add("sudo");
                 command.add("-u");
                 command.add(taskRequest.getTenantCode());
+                command.add("-E");
             }
         }
         command.add(commandInterpreter());

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/ShellCommandExecutor.java
Patch:
@@ -38,9 +38,9 @@
 public class ShellCommandExecutor extends AbstractCommandExecutor {
 
     /**
-     * For Unix-like, using sh
+     * For Unix-like, using bash
      */
-    private static final String SH = "sh";
+    private static final String SH = "bash";
 
     /**
      * For Windows, using cmd.exe

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/expand/CuringGlobalParams.java
Patch:
@@ -157,7 +157,7 @@ public Map<String, Property> paramParsingPreparation(@NonNull TaskInstance taskI
         String timeZone = cmdParam.get(Constants.SCHEDULE_TIMEZONE);
         Map<String, String> params = BusinessTimeUtils.getBusinessTime(commandType, scheduleTime, timeZone);
 
-        if (globalParamsMap != null) {
+        if (MapUtils.isNotEmpty(globalParamsMap)) {
             params.putAll(globalParamsMap);
         }
 

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-api/src/test/java/org/apache/dolphinscheduler/plugin/datasource/api/datasource/AbstractDataSourceProcessorTest.java
Patch:
@@ -24,7 +24,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class AbstractDataSourceProcessorTest {
 

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-clickhouse/src/test/java/org/apache/dolphinscheduler/plugin/datasource/clickhouse/ClickHouseDataSourceChannelFactoryTest.java
Patch:
@@ -19,15 +19,15 @@
 
 import org.apache.dolphinscheduler.spi.datasource.DataSourceChannel;
 
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Assertions;
+import org.junit.jupiter.api.Test;
 
 public class ClickHouseDataSourceChannelFactoryTest {
 
     @Test
     public void testCreate() {
         ClickHouseDataSourceChannelFactory sourceChannelFactory = new ClickHouseDataSourceChannelFactory();
         DataSourceChannel dataSourceChannel = sourceChannelFactory.create();
-        Assert.assertNotNull(dataSourceChannel);
+        Assertions.assertNotNull(dataSourceChannel);
     }
 }

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-db2/src/test/java/org/apache/dolphinscheduler/plugin/datasource/db2/DB2DataSourceChannelFactoryTest.java
Patch:
@@ -19,15 +19,15 @@
 
 import org.apache.dolphinscheduler.spi.datasource.DataSourceChannel;
 
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Assertions;
+import org.junit.jupiter.api.Test;
 
 public class DB2DataSourceChannelFactoryTest {
 
     @Test
     public void testCreate() {
         DB2DataSourceChannelFactory sourceChannelFactory = new DB2DataSourceChannelFactory();
         DataSourceChannel dataSourceChannel = sourceChannelFactory.create();
-        Assert.assertNotNull(dataSourceChannel);
+        Assertions.assertNotNull(dataSourceChannel);
     }
 }

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-hive/src/test/java/org/apache/dolphinscheduler/plugin/datasource/hive/HiveDataSourceChannelFactoryTest.java
Patch:
@@ -19,15 +19,15 @@
 
 import org.apache.dolphinscheduler.spi.datasource.DataSourceChannel;
 
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Assertions;
+import org.junit.jupiter.api.Test;
 
 public class HiveDataSourceChannelFactoryTest {
 
     @Test
     public void testCreate() {
         HiveDataSourceChannelFactory sourceChannelFactory = new HiveDataSourceChannelFactory();
         DataSourceChannel dataSourceChannel = sourceChannelFactory.create();
-        Assert.assertNotNull(dataSourceChannel);
+        Assertions.assertNotNull(dataSourceChannel);
     }
 }

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-mysql/src/test/java/org/apache/dolphinscheduler/plugin/datasource/mysql/MySQLDataSourceChannelFactoryTest.java
Patch:
@@ -19,15 +19,15 @@
 
 import org.apache.dolphinscheduler.spi.datasource.DataSourceChannel;
 
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Assertions;
+import org.junit.jupiter.api.Test;
 
 public class MySQLDataSourceChannelFactoryTest {
 
     @Test
     public void testCreate() {
         MySQLDataSourceChannelFactory sourceChannelFactory = new MySQLDataSourceChannelFactory();
         DataSourceChannel dataSourceChannel = sourceChannelFactory.create();
-        Assert.assertNotNull(dataSourceChannel);
+        Assertions.assertNotNull(dataSourceChannel);
     }
 }

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-oracle/src/test/java/org/apache/dolphinscheduler/plugin/datasource/oracle/OracleDataSourceChannelFactoryTest.java
Patch:
@@ -19,15 +19,15 @@
 
 import org.apache.dolphinscheduler.spi.datasource.DataSourceChannel;
 
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Assertions;
+import org.junit.jupiter.api.Test;
 
 public class OracleDataSourceChannelFactoryTest {
 
     @Test
     public void testCreate() {
         OracleDataSourceChannelFactory sourceChannelFactory = new OracleDataSourceChannelFactory();
         DataSourceChannel dataSourceChannel = sourceChannelFactory.create();
-        Assert.assertNotNull(dataSourceChannel);
+        Assertions.assertNotNull(dataSourceChannel);
     }
 }

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-postgresql/src/test/java/org/apache/dolphinscheduler/plugin/datasource/postgresql/PostgreSQLDataSourceChannelFactoryTest.java
Patch:
@@ -19,15 +19,15 @@
 
 import org.apache.dolphinscheduler.spi.datasource.DataSourceChannel;
 
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Assertions;
+import org.junit.jupiter.api.Test;
 
 public class PostgreSQLDataSourceChannelFactoryTest {
 
     @Test
     public void testCreate() {
         PostgreSQLDataSourceChannelFactory sourceChannelFactory = new PostgreSQLDataSourceChannelFactory();
         DataSourceChannel dataSourceChannel = sourceChannelFactory.create();
-        Assert.assertNotNull(dataSourceChannel);
+        Assertions.assertNotNull(dataSourceChannel);
     }
 }

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-presto/src/test/java/org/apache/dolphinscheduler/plugin/datasource/presto/PrestoDataSourceChannelFactoryTest.java
Patch:
@@ -19,15 +19,15 @@
 
 import org.apache.dolphinscheduler.spi.datasource.DataSourceChannel;
 
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Assertions;
+import org.junit.jupiter.api.Test;
 
 public class PrestoDataSourceChannelFactoryTest {
 
     @Test
     public void testCreate() {
         PrestoDataSourceChannelFactory sourceChannelFactory = new PrestoDataSourceChannelFactory();
         DataSourceChannel dataSourceChannel = sourceChannelFactory.create();
-        Assert.assertNotNull(dataSourceChannel);
+        Assertions.assertNotNull(dataSourceChannel);
     }
 }

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-spark/src/test/java/org/apache/dolphinscheduler/plugin/datasource/spark/SparkDataSourceChannelFactoryTest.java
Patch:
@@ -19,15 +19,15 @@
 
 import org.apache.dolphinscheduler.spi.datasource.DataSourceChannel;
 
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Assertions;
+import org.junit.jupiter.api.Test;
 
 public class SparkDataSourceChannelFactoryTest {
 
     @Test
     public void testCreate() {
         SparkDataSourceChannelFactory sourceChannelFactory = new SparkDataSourceChannelFactory();
         DataSourceChannel dataSourceChannel = sourceChannelFactory.create();
-        Assert.assertNotNull(dataSourceChannel);
+        Assertions.assertNotNull(dataSourceChannel);
     }
 }

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-sqlserver/src/test/java/org/apache/dolphinscheduler/plugin/datasource/sqlserver/SQLServerDataSourceChannelFactoryTest.java
Patch:
@@ -19,15 +19,15 @@
 
 import org.apache.dolphinscheduler.spi.datasource.DataSourceChannel;
 
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Assertions;
+import org.junit.jupiter.api.Test;
 
 public class SQLServerDataSourceChannelFactoryTest {
 
     @Test
     public void testCreate() {
         SQLServerDataSourceChannelFactory sourceChannelFactory = new SQLServerDataSourceChannelFactory();
         DataSourceChannel dataSourceChannel = sourceChannelFactory.create();
-        Assert.assertNotNull(dataSourceChannel);
+        Assertions.assertNotNull(dataSourceChannel);
     }
 }

File: dolphinscheduler-alert/dolphinscheduler-alert-plugins/dolphinscheduler-alert-http/src/test/java/org/apache/dolphinscheduler/plugin/alert/http/HttpSenderTest.java
Patch:
@@ -27,8 +27,8 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Assertions;
+import org.junit.jupiter.api.Test;
 
 public class HttpSenderTest {
 
@@ -44,6 +44,6 @@ public void sendTest() throws IOException {
         HttpSender httpSender = spy(new HttpSender(paramsMap));
         doReturn("success").when(httpSender).getResponseString(any());
         AlertResult alertResult = httpSender.send("Fault tolerance warning");
-        Assert.assertEquals("true", alertResult.getStatus());
+        Assertions.assertEquals("true", alertResult.getStatus());
     }
 }

File: dolphinscheduler-alert/dolphinscheduler-alert-plugins/dolphinscheduler-alert-script/src/test/java/org/apache/dolphinscheduler/plugin/alert/script/ProcessUtilsTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.dolphinscheduler.plugin.alert.script;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 /**
  * ProcessUtilsTest
@@ -26,7 +26,8 @@ public class ProcessUtilsTest {
 
     private static final String rootPath = System.getProperty("user.dir");
 
-    private static final String shellFilPath = rootPath + "/dolphinscheduler-alert-plugins/dolphinscheduler-alert-script/src/test/script/shell/test.sh";
+    private static final String shellFilPath =
+            rootPath + "/dolphinscheduler-alert-plugins/dolphinscheduler-alert-script/src/test/script/shell/test.sh";
 
     private String[] cmd = {"/bin/sh", "-c", shellFilPath + " -t 1"};
 

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/DataAnalysisControllerTest.java
Patch:
@@ -30,7 +30,7 @@
 
 import java.util.Date;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/TaskGroupQueueControllerTest.java
Patch:
@@ -24,8 +24,8 @@
 import org.apache.dolphinscheduler.api.utils.Result;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
 
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Assertions;
+import org.junit.jupiter.api.Test;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.http.MediaType;
@@ -56,7 +56,7 @@ public void queryTasksByGroupId() throws Exception {
                 .andReturn();
 
         Result result = JSONUtils.parseObject(mvcResult.getResponse().getContentAsString(), Result.class);
-        Assert.assertTrue(result != null && result.isSuccess());
+        Assertions.assertTrue(result != null && result.isSuccess());
         logger.info("query list queue return result:{}", mvcResult.getResponse().getContentAsString());
     }
 }

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/interceptor/LocaleChangeInterceptorTest.java
Patch:
@@ -22,8 +22,8 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Assertions;
+import org.junit.jupiter.api.Test;
 import org.mockito.Mockito;
 import org.springframework.beans.factory.annotation.Autowired;
 
@@ -37,7 +37,7 @@ public void testPreHandle() {
         HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
         HttpServletResponse response = Mockito.mock(HttpServletResponse.class);
         // test no language
-        Assert.assertTrue(interceptor.preHandle(request, response, null));
+        Assertions.assertTrue(interceptor.preHandle(request, response, null));
     }
 
 }

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/security/SecurityConfigPasswordTest.java
Patch:
@@ -19,8 +19,8 @@
 
 import org.apache.dolphinscheduler.api.controller.AbstractControllerTest;
 
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Assertions;
+import org.junit.jupiter.api.Test;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.test.context.TestPropertySource;
 
@@ -35,6 +35,6 @@ public class SecurityConfigPasswordTest extends AbstractControllerTest {
     @Test
     public void testAuthenticator() {
         Authenticator authenticator = securityConfig.authenticator();
-        Assert.assertNotNull(authenticator);
+        Assertions.assertNotNull(authenticator);
     }
 }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProcessInstanceServiceImpl.java
Patch:
@@ -63,6 +63,7 @@
 import org.apache.dolphinscheduler.dao.mapper.TaskInstanceMapper;
 import org.apache.dolphinscheduler.dao.mapper.TenantMapper;
 import org.apache.dolphinscheduler.dao.repository.ProcessInstanceDao;
+import org.apache.dolphinscheduler.dao.utils.WorkflowUtils;
 import org.apache.dolphinscheduler.plugin.task.api.enums.DependResult;
 import org.apache.dolphinscheduler.plugin.task.api.model.Property;
 import org.apache.dolphinscheduler.plugin.task.api.parameters.ParametersNode;
@@ -320,8 +321,7 @@ public Result queryProcessInstanceList(User loginUser, long projectCode, long pr
         }
 
         for (ProcessInstance processInstance : processInstances) {
-            processInstance.setDuration(
-                    DateUtils.format2Duration(processInstance.getStartTime(), processInstance.getEndTime()));
+            processInstance.setDuration(WorkflowUtils.getWorkflowInstanceDuration(processInstance));
             User executor = idToUserMap.get(processInstance.getExecutorId());
             if (null != executor) {
                 processInstance.setExecutorName(executor.getUserName());

File: dolphinscheduler-common/src/test/java/org/apache/dolphinscheduler/common/utils/DateUtilsTest.java
Patch:
@@ -176,6 +176,9 @@ public void testFormat2Duration() {
         String duration = DateUtils.format2Duration(start, end);
         Assert.assertEquals("1d 1h 10m 10s", duration);
 
+        duration = DateUtils.format2Duration(end, start);
+        Assert.assertNull(duration);
+
         // hours minutes seconds
         start = DateUtils.stringToDate("2020-01-20 11:00:00");
         end = DateUtils.stringToDate("2020-01-20 12:10:10");

File: dolphinscheduler-scheduler-plugin/dolphinscheduler-scheduler-quartz/src/main/java/org/apache/dolphinscheduler/scheduler/quartz/QuartzScheduler.java
Patch:
@@ -111,7 +111,7 @@ public void insertOrUpdateScheduleTask(int projectId, Schedule schedule) throws
                     .endAt(endDate)
                     .withSchedule(
                             cronSchedule(cronExpression)
-                                    .withMisfireHandlingInstructionDoNothing()
+                                    .withMisfireHandlingInstructionFireAndProceed()
                                     .inTimeZone(DateUtils.getTimezone(timezoneId))
                     )
                     .forJob(jobDetail).build();

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/UsersServiceImpl.java
Patch:
@@ -144,7 +144,7 @@ public class UsersServiceImpl extends BaseServiceImpl implements UsersService {
      * @throws Exception exception
      */
     @Override
-    @Transactional
+    @Transactional(rollbackFor = Exception.class)
     public Map<String, Object> createUser(User loginUser,
                                           String userName,
                                           String userPassword,
@@ -190,7 +190,6 @@ public Map<String, Object> createUser(User loginUser,
         result.put(Constants.DATA_LIST, user);
         putMsg(result, Status.SUCCESS);
         return result;
-
     }
 
     @Override

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/config/StoreConfiguration.java
Patch:
@@ -42,7 +42,7 @@ public class StoreConfiguration {
 
     @Bean
     public StorageOperate storageOperate() {
-        switch (PropertyUtils.getString(RESOURCE_STORAGE_TYPE)) {
+        switch (PropertyUtils.getUpperCaseString(RESOURCE_STORAGE_TYPE)) {
             case STORAGE_OSS:
                 OssOperator ossOperator = new OssOperator();
                 // TODO: change to use ossOperator.init(ossConnection) after DS supports Configuration / Connection

File: dolphinscheduler-registry/dolphinscheduler-registry-plugins/dolphinscheduler-registry-mysql/src/main/java/org/apache/dolphinscheduler/plugin/registry/mysql/task/EphemeralDateManager.java
Patch:
@@ -148,6 +148,7 @@ private ConnectionState getConnectionState() {
                 mysqlOperator.clearExpireEphemeralDate();
                 return ConnectionState.CONNECTED;
             } catch (Exception ex) {
+                LOGGER.error("Get connection state error, meet an unknown exception", ex);
                 return ConnectionState.DISCONNECTED;
             }
         }

File: dolphinscheduler-master/src/test/java/org/apache/dolphinscheduler/server/master/processor/TaskAckProcessorTest.java
Patch:
@@ -69,7 +69,7 @@ public void before() {
         taskExecuteRunningMessage.setExecutePath("/dolphinscheduler/worker");
         taskExecuteRunningMessage.setHost("localhost");
         taskExecuteRunningMessage.setLogPath("/temp/worker.log");
-        taskExecuteRunningMessage.setStartTime(new Date());
+        taskExecuteRunningMessage.setStartTime(System.currentTimeMillis());
         taskExecuteRunningMessage.setTaskInstanceId(1);
         taskExecuteRunningMessage.setProcessInstanceId(1);
     }

File: dolphinscheduler-master/src/test/java/org/apache/dolphinscheduler/server/master/processor/queue/TaskResponseServiceTest.java
Patch:
@@ -82,7 +82,7 @@ public void before() {
         taskExecuteRunningMessage.setExecutePath("path");
         taskExecuteRunningMessage.setLogPath("logPath");
         taskExecuteRunningMessage.setHost("127.*.*.*");
-        taskExecuteRunningMessage.setStartTime(new Date());
+        taskExecuteRunningMessage.setStartTime(System.currentTimeMillis());
 
         ackEvent = TaskEvent.newRunningEvent(taskExecuteRunningMessage,
                 channel,
@@ -94,7 +94,7 @@ public void before() {
         taskExecuteResultMessage.setProcessInstanceId(1);
         taskExecuteResultMessage.setTaskInstanceId(22);
         taskExecuteResultMessage.setStatus(TaskExecutionStatus.SUCCESS.getCode());
-        taskExecuteResultMessage.setEndTime(new Date());
+        taskExecuteResultMessage.setEndTime(System.currentTimeMillis());
         taskExecuteResultMessage.setVarPool("varPol");
         taskExecuteResultMessage.setAppIds("ids");
         taskExecuteResultMessage.setProcessId(1);

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/TaskExecuteResultCommand.java
Patch:
@@ -57,7 +57,7 @@ public TaskExecuteResultCommand(String messageSenderAddress, String messageRecei
     /**
      * startTime
      */
-    private Date startTime;
+    private long startTime;
 
     /**
      * host
@@ -78,7 +78,7 @@ public TaskExecuteResultCommand(String messageSenderAddress, String messageRecei
     /**
      * end time
      */
-    private Date endTime;
+    private long endTime;
 
 
     /**

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/TaskExecuteRunningCommand.java
Patch:
@@ -19,8 +19,6 @@
 
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
 
-import java.util.Date;
-
 import lombok.Data;
 import lombok.EqualsAndHashCode;
 import lombok.NoArgsConstructor;
@@ -49,7 +47,7 @@ public class TaskExecuteRunningCommand extends BaseCommand {
     /**
      * startTime
      */
-    private Date startTime;
+    private long startTime;
 
     /**
      * host

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/utils/LogUtils.java
Patch:
@@ -74,7 +74,8 @@ public static String getTaskLogPath(Date firstSubmitTime, Long processDefineCode
      * get task log path by TaskExecutionContext
      */
     public static String getTaskLogPath(TaskExecutionContext taskExecutionContext) {
-        return getTaskLogPath(taskExecutionContext.getFirstSubmitTime(), taskExecutionContext.getProcessDefineCode(),
+        return getTaskLogPath(DateUtils.timeStampToDate(taskExecutionContext.getFirstSubmitTime()),
+                taskExecutionContext.getProcessDefineCode(),
                 taskExecutionContext.getProcessDefineVersion(),
                 taskExecutionContext.getProcessInstanceId(),
                 taskExecutionContext.getTaskInstanceId());

File: dolphinscheduler-service/src/test/java/org/apache/dolphinscheduler/service/utils/LogUtilsTest.java
Patch:
@@ -47,7 +47,7 @@ public void testGetTaskLogPath() {
         taskExecutionContext.setTaskInstanceId(1000);
         taskExecutionContext.setProcessDefineCode(1L);
         taskExecutionContext.setProcessDefineVersion(1);
-        taskExecutionContext.setFirstSubmitTime(firstSubmitTime);
+        taskExecutionContext.setFirstSubmitTime(firstSubmitTime.getTime());
 
         Logger rootLogger = (Logger) LoggerFactory.getILoggerFactory().getLogger("ROOT");
         Assert.assertNotNull(rootLogger);

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/AbstractCommandExecutor.java
Patch:
@@ -403,7 +403,7 @@ private String findVarPool(String line) {
      * @return remain time
      */
     private long getRemainTime() {
-        long usedTime = (System.currentTimeMillis() - taskRequest.getStartTime().getTime()) / 1000;
+        long usedTime = (System.currentTimeMillis() - taskRequest.getStartTime()) / 1000;
         long remainTime = taskRequest.getTaskTimeout() - usedTime;
 
         if (remainTime < 0) {

File: dolphinscheduler-task-plugin/dolphinscheduler-task-pigeon/src/test/java/org/apache/dolphinscheduler/plugin/task/pigeon/PigeonTaskTest.java
Patch:
@@ -61,7 +61,7 @@ public void before() throws Exception {
         Mockito.when(taskExecutionContext.getExecutePath()).thenReturn("/tmp");
         Mockito.when(taskExecutionContext.getTaskAppId()).thenReturn(UUID.randomUUID().toString());
         Mockito.when(taskExecutionContext.getTenantCode()).thenReturn("root");
-        Mockito.when(taskExecutionContext.getStartTime()).thenReturn(new Date());
+        Mockito.when(taskExecutionContext.getStartTime()).thenReturn(System.currentTimeMillis());
         Mockito.when(taskExecutionContext.getTaskTimeout()).thenReturn(10000);
         Mockito.when(taskExecutionContext.getLogPath()).thenReturn("/tmp/dx");
         // Mockito.when(taskExecutionContext.getVarPool())

File: dolphinscheduler-task-plugin/dolphinscheduler-task-sql/src/main/java/org/apache/dolphinscheduler/plugin/task/sql/SqlTask.java
Patch:
@@ -33,6 +33,7 @@
 import org.apache.dolphinscheduler.plugin.task.api.parser.ParameterUtils;
 import org.apache.dolphinscheduler.spi.datasource.BaseConnectionParam;
 import org.apache.dolphinscheduler.spi.enums.DbType;
+import org.apache.dolphinscheduler.spi.utils.DateUtils;
 import org.apache.dolphinscheduler.spi.utils.JSONUtils;
 import org.apache.dolphinscheduler.spi.utils.StringUtils;
 
@@ -483,7 +484,7 @@ private SqlBinds getSqlAndSqlParamsMap(String sql) {
 
         //new
         //replace variable TIME with $[YYYYmmddd...] in sql when history run job and batch complement job
-        sql = ParameterUtils.replaceScheduleTime(sql, taskExecutionContext.getScheduleTime());
+        sql = ParameterUtils.replaceScheduleTime(sql, DateUtils.timeStampToDate(taskExecutionContext.getScheduleTime()));
         // special characters need to be escaped, ${} needs to be escaped
         setSqlParamsMap(sql, rgex, sqlParamsMap, paramsMap,taskExecutionContext.getTaskInstanceId());
         //Replace the original value in sql ！{...} ，Does not participate in precompilation

File: dolphinscheduler-worker/src/main/java/org/apache/dolphinscheduler/server/worker/processor/TaskDispatchProcessor.java
Patch:
@@ -116,7 +116,7 @@ public void process(Channel channel, Command command) {
             taskExecutionContext.setLogPath(LogUtils.getTaskLogPath(taskExecutionContext));
 
             // delay task process
-            long remainTime = DateUtils.getRemainTime(taskExecutionContext.getFirstSubmitTime(),
+            long remainTime = DateUtils.getRemainTime(DateUtils.timeStampToDate(taskExecutionContext.getFirstSubmitTime()),
                     taskExecutionContext.getDelayTime() * 60L);
             if (remainTime > 0) {
                 logger.info("Current taskInstance is choose delay execution, delay time: {}s", remainTime);

File: dolphinscheduler-worker/src/main/java/org/apache/dolphinscheduler/server/worker/runner/WorkerDelayTaskExecuteRunnable.java
Patch:
@@ -47,7 +47,8 @@ public long getDelay(TimeUnit unit) {
         TaskExecutionContext taskExecutionContext = getTaskExecutionContext();
         return unit.convert(
                 DateUtils.getRemainTime(
-                        taskExecutionContext.getFirstSubmitTime(), taskExecutionContext.getDelayTime() * 60L), TimeUnit.SECONDS);
+                        DateUtils.timeStampToDate(taskExecutionContext.getFirstSubmitTime()),
+                    taskExecutionContext.getDelayTime() * 60L), TimeUnit.SECONDS);
     }
 
     @Override

File: dolphinscheduler-worker/src/test/java/org/apache/dolphinscheduler/server/worker/processor/TaskDispatchProcessorTest.java
Patch:
@@ -97,7 +97,7 @@ public TaskExecutionContext getTaskExecutionContext() {
         taskExecutionContext.setProcessDefineCode(1L);
         taskExecutionContext.setProcessDefineVersion(1);
         taskExecutionContext.setTaskType("SQL");
-        taskExecutionContext.setFirstSubmitTime(new Date());
+        taskExecutionContext.setFirstSubmitTime(System.currentTimeMillis());
         taskExecutionContext.setDelayTime(0);
         taskExecutionContext.setLogPath("/tmp/test.log");
         taskExecutionContext.setHost("localhost");

File: dolphinscheduler-worker/src/test/java/org/apache/dolphinscheduler/server/worker/runner/DefaultWorkerDelayTaskExecuteRunnableTest.java
Patch:
@@ -53,7 +53,7 @@ public void testDryRun() {
                 .dryRun(Constants.DRY_RUN_FLAG_YES)
                 .taskInstanceId(0)
                 .processDefineId(0)
-                .firstSubmitTime(new Date())
+                .firstSubmitTime(System.currentTimeMillis())
                 .taskLogName("TestLogName")
                 .build();
         WorkerTaskExecuteRunnable workerTaskExecuteRunnable = new DefaultWorkerDelayTaskExecuteRunnable(
@@ -77,7 +77,7 @@ public void testErrorboundTestDataSource() {
                 .testFlag(Constants.TEST_FLAG_YES)
                 .taskInstanceId(0)
                 .processDefineId(0)
-                .firstSubmitTime(new Date())
+                .firstSubmitTime(System.currentTimeMillis())
                 .taskLogName("TestLogName")
                 .taskType("SQL")
                 .taskParams("{\"localParams\":[],\"resourceList\":[],\"type\":\"POSTGRESQL\",\"datasource\":null,\"sql\":\"select * from t_ds_user\",\"sqlType\":\"0\",\"preStatements\":[],\"postStatements\":[],\"segmentSeparator\":\"\",\"displayRows\":10,\"conditionResult\":\"null\",\"dependence\":\"null\",\"switchResult\":\"null\",\"waitStartTimeout\":null}")

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ExecutorController.java
Patch:
@@ -139,7 +139,7 @@ public Result startProcessInstance(@ApiIgnore @RequestAttribute(value = Constant
                                        @RequestParam(value = "taskDependType", required = false) TaskDependType taskDependType,
                                        @RequestParam(value = "execType", required = false) CommandType execType,
                                        @RequestParam(value = "warningType") WarningType warningType,
-                                       @RequestParam(value = "warningGroupId", required = false, defaultValue = "0") Integer warningGroupId,
+                                       @RequestParam(value = "warningGroupId", required = false) Integer warningGroupId,
                                        @RequestParam(value = "runMode", required = false) RunMode runMode,
                                        @RequestParam(value = "processInstancePriority", required = false) Priority processInstancePriority,
                                        @RequestParam(value = "workerGroup", required = false, defaultValue = "default") String workerGroup,
@@ -226,7 +226,7 @@ public Result batchStartProcessInstance(@ApiIgnore @RequestAttribute(value = Con
                                             @RequestParam(value = "taskDependType", required = false) TaskDependType taskDependType,
                                             @RequestParam(value = "execType", required = false) CommandType execType,
                                             @RequestParam(value = "warningType") WarningType warningType,
-                                            @RequestParam(value = "warningGroupId", required = false) int warningGroupId,
+                                            @RequestParam(value = "warningGroupId", required = false) Integer warningGroupId,
                                             @RequestParam(value = "runMode", required = false) RunMode runMode,
                                             @RequestParam(value = "processInstancePriority", required = false) Priority processInstancePriority,
                                             @RequestParam(value = "workerGroup", required = false, defaultValue = "default") String workerGroup,

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/python/PythonGateway.java
Patch:
@@ -333,7 +333,7 @@ public void execProcessInstance(String userName,
                                     String cronTime,
                                     String workerGroup,
                                     String warningType,
-                                    int warningGroupId,
+                                    Integer warningGroupId,
                                     Integer timeout
     ) {
         User user = usersService.queryUser(userName);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ExecutorService.java
Patch:
@@ -61,7 +61,7 @@ public interface ExecutorService {
     Map<String, Object> execProcessInstance(User loginUser, long projectCode,
                                             long processDefinitionCode, String cronTime, CommandType commandType,
                                             FailureStrategy failureStrategy, String startNodeList,
-                                            TaskDependType taskDependType, WarningType warningType, int warningGroupId,
+                                            TaskDependType taskDependType, WarningType warningType, Integer warningGroupId,
                                             RunMode runMode,
                                             Priority processInstancePriority, String workerGroup, Long environmentCode,
                                             Integer timeout,

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ExecutorServiceImpl.java
Patch:
@@ -173,7 +173,7 @@ public Map<String, Object> execProcessInstance(User loginUser, long projectCode,
                                                    String cronTime, CommandType commandType,
                                                    FailureStrategy failureStrategy, String startNodeList,
                                                    TaskDependType taskDependType, WarningType warningType,
-                                                   int warningGroupId, RunMode runMode,
+                                                   Integer warningGroupId, RunMode runMode,
                                                    Priority processInstancePriority, String workerGroup,
                                                    Long environmentCode, Integer timeout,
                                                    Map<String, String> startParams, Integer expectedParallelismNumber,
@@ -714,7 +714,7 @@ public Map<String, Object> startCheckByProcessDefinedCode(long processDefinition
      */
     private int createCommand(CommandType commandType, long processDefineCode, TaskDependType nodeDep,
                               FailureStrategy failureStrategy, String startNodeList, String schedule,
-                              WarningType warningType, int executorId, int warningGroupId, RunMode runMode,
+                              WarningType warningType, int executorId, Integer warningGroupId, RunMode runMode,
                               Priority processInstancePriority, String workerGroup, Long environmentCode,
                               Map<String, String> startParams, Integer expectedParallelismNumber, int dryRun,
                               int testFlag, ComplementDependentMode complementDependentMode) {

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/ExecutorControllerTest.java
Patch:
@@ -209,9 +209,9 @@ public void testStartProcessInstanceWithRequiredParams() throws Exception {
 
         when(executorService.execProcessInstance(any(User.class), eq(projectCode), eq(processDefinitionCode),
 				eq(scheduleTime), eq(null), eq(failureStrategy), eq(null), eq(null), eq(warningType),
-                eq(0), eq(null), eq(null), eq("default"), eq(-1L),
-                eq(Constants.MAX_TASK_TIMEOUT), eq(null), eq(null), eq(0), eq(0),
-                eq(complementDependentMode))).thenReturn(executeServiceResult);
+        eq(null), eq(null), eq(null), eq("default"), eq(-1L),
+        eq(Constants.MAX_TASK_TIMEOUT), eq(null), eq(null), eq(0), eq(0),
+        eq(complementDependentMode))).thenReturn(executeServiceResult);
 
 		//When
         final MvcResult mvcResult = mockMvc.perform(post("/projects/{projectCode}/executors/start-process-instance", projectCode)

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/ProcessDefinition.java
Patch:
@@ -169,7 +169,7 @@ public class ProcessDefinition {
      * warningGroupId
      */
     @TableField(exist = false)
-    private int warningGroupId;
+    private Integer warningGroupId;
 
     /**
      * execution type
@@ -226,5 +226,4 @@ public Map<String, String> getGlobalParamMap() {
 
         return globalParamMap;
     }
-
 }

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/WorkflowExecuteRunnable.java
Patch:
@@ -716,9 +716,7 @@ public void endProcess() {
             checkSerialProcess(processDefinition);
         }
         ProjectUser projectUser = processService.queryProjectWithUserByProcessInstanceId(processInstance.getId());
-        if (processAlertManager.isNeedToSendWarning(processInstance)) {
-            processAlertManager.sendAlertProcessInstance(processInstance, getValidTaskList(), projectUser);
-        }
+        processAlertManager.sendAlertProcessInstance(processInstance, getValidTaskList(), projectUser);
         if (processInstance.getState().isSuccess()) {
             processAlertManager.closeAlert(processInstance);
         }

File: dolphinscheduler-task-plugin/dolphinscheduler-task-pytorch/src/main/java/org/apache/dolphinscheduler/plugin/task/pytorch/PythonEnvManager.java
Patch:
@@ -40,7 +40,7 @@ public class PythonEnvManager {
 
     private static final String VIRTUALENV_BUILD = "virtualenv -p ${PYTHON_HOME} %s";
 
-    private static final String INSTALL_COMMAND = "python -m pip install -r %s";
+    private static final String INSTALL_COMMAND = "%s -m pip install -r %s";
 
     private String pythonEnvTool = ENV_TOOL_VENV;
 
@@ -54,7 +54,7 @@ public String getBuildEnvCommand(String requirementPath) {
         } else if (pythonEnvTool.equals(ENV_TOOL_CONDA)) {
             buildCommand = String.format(CONDA_BUILD, condaPythonVersion, CREATE_ENV_NAME);
         }
-        String installCommand = String.format(INSTALL_COMMAND, requirementPath);
+        String installCommand = String.format(INSTALL_COMMAND, getPythonCommand(), requirementPath);
 
         return buildCommand + " && " + sourceCommand + " && " + installCommand;
     }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProcessDefinitionServiceImpl.java
Patch:
@@ -1346,7 +1346,7 @@ protected boolean checkAndImport(User loginUser, long projectCode, Map<String, O
             return false;
         }
         processDefinition.setName(importProcessDefinitionName);
-        processDefinition.setId(0);
+        processDefinition.setId(null);
         processDefinition.setProjectCode(projectCode);
         processDefinition.setUserId(loginUser.getId());
         try {

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessServiceImpl.java
Patch:
@@ -416,6 +416,7 @@ public int createCommand(Command command) {
                 commandParams.put(Constants.SCHEDULE_TIMEZONE, schedule.getTimezoneId());
                 command.setCommandParam(JSONUtils.toJsonString(commandParams));
             }
+            command.setId(null);
             result = commandMapper.insert(command);
         }
         return result;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/TaskDefinitionServiceImpl.java
Patch:
@@ -487,6 +487,7 @@ private TaskDefinitionLog updateTask(User loginUser, long projectCode, long task
         taskDefinitionToUpdate.setOperator(loginUser.getId());
         taskDefinitionToUpdate.setOperateTime(now);
         taskDefinitionToUpdate.setCreateTime(now);
+        taskDefinitionToUpdate.setId(null);
         int insert = taskDefinitionLogMapper.insert(taskDefinitionToUpdate);
         if ((update & insert) != 1) {
             logger.error("Update task definition or definitionLog error, projectCode:{}, taskDefinitionCode:{}.", projectCode, taskCode);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/audit/AuditPublishService.java
Patch:
@@ -63,7 +63,7 @@ private void init() {
      */
     public void publish(AuditMessage message) {
         if (auditConfiguration.getEnabled() && !auditMessageQueue.offer(message)) {
-            logger.error("add audit message failed {}", message);
+            logger.error("Publish audit message failed, message:{}", message);
         }
     }
 
@@ -79,11 +79,11 @@ private void doPublish() {
                     try {
                         subscriber.execute(message);
                     } catch (Exception e) {
-                        logger.error("consume audit message {} failed, error detail {}", message, e);
+                        logger.error("Consume audit message failed, message:{}", message, e);
                     }
                 }
             } catch (InterruptedException e) {
-                logger.error("consume audit message failed {}.", message, e);
+                logger.error("Consume audit message failed, message:{}", message, e);
                 Thread.currentThread().interrupt();
                 break;
             }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/TenantController.java
Patch:
@@ -199,7 +199,7 @@ public Result deleteTenantById(@ApiIgnore @RequestAttribute(value = Constants.SE
      *
      * @param loginUser login user
      * @param tenantCode tenant code
-     * @return true if tenant code can user, otherwise return false
+     * @return true if tenant code can use, otherwise return false
      */
     @ApiOperation(value = "verifyTenantCode", notes = "VERIFY_TENANT_CODE_NOTES")
     @ApiImplicitParams({

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/k8s/K8sManager.java
Patch:
@@ -123,7 +123,7 @@ private DefaultKubernetesClient getClient(String configYaml) throws RemotingExce
             Config config = Config.fromKubeconfig(configYaml);
             return new DefaultKubernetesClient(config);
         } catch (Exception e) {
-            logger.error("fail to get k8s ApiClient", e);
+            logger.error("Fail to get k8s ApiClient", e);
             throw new RemotingException("fail to get k8s ApiClient:" + e.getMessage());
         }
     }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/AccessTokenServiceImpl.java
Patch:
@@ -197,7 +197,7 @@ public Map<String, Object> delAccessTokenById(User loginUser, int id) {
 
         AccessToken accessToken = accessTokenMapper.selectById(id);
         if (accessToken == null) {
-            logger.error("access token not exist,  access token id {}", id);
+            logger.error("Access token does not exist, accessTokenId:{}.", id);
             putMsg(result, Status.ACCESS_TOKEN_NOT_EXIST);
             return result;
         }
@@ -234,7 +234,7 @@ public Map<String, Object> updateToken(User loginUser, int id, int userId, Strin
         // 2. check if token is existed
         AccessToken accessToken = accessTokenMapper.selectById(id);
         if (accessToken == null) {
-            logger.error("access token not exist,  access token id {}", id);
+            logger.error("Access token does not exist, accessTokenId:{}.", id);
             putMsg(result, Status.ACCESS_TOKEN_NOT_EXIST);
             return result;
         }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/DataAnalysisServiceImpl.java
Patch:
@@ -168,6 +168,7 @@ private Map<String, Object> countStateByProject(User loginUser, long projectCode
             start = DateUtils.stringToDate(startDate);
             end = DateUtils.stringToDate(endDate);
             if (Objects.isNull(start) || Objects.isNull(end)) {
+                logger.warn("Parameter startDate or endDate is invalid.");
                 putMsg(result, Status.REQUEST_PARAMS_NOT_VALID_ERROR, Constants.START_END_DATE);
                 return result;
             }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/DqRuleServiceImpl.java
Patch:
@@ -240,7 +240,7 @@ private String getRuleFormCreateJson(List<DqRuleInputEntry> ruleInputEntryList)
         try {
             result = mapper.writeValueAsString(params);
         } catch (JsonProcessingException e) {
-            logger.error("json parse error : {}", e.getMessage(), e);
+            logger.error("Json parse error.", e);
         }
 
         return result;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/SessionServiceImpl.java
Patch:
@@ -75,7 +75,7 @@ public Session getSession(HttpServletRequest request) {
         }
 
         String ip = BaseController.getClientIpAddress(request);
-        logger.debug("get session: {}, ip: {}", sessionId, ip);
+        logger.debug("Get session: {}, ip: {}.", sessionId, ip);
 
         return sessionMapper.selectById(sessionId);
     }
@@ -156,7 +156,7 @@ public void signOut(String ip, User loginUser) {
             //delete session
             sessionMapper.deleteById(session.getId());
         } catch (Exception e) {
-            logger.warn("userId : {} , ip : {} , find more one session", loginUser.getId(), ip);
+            logger.warn("userId : {} , ip : {} , find more one session", loginUser.getId(), ip, e);
         }
     }
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/utils/FileUtils.java
Patch:
@@ -65,8 +65,7 @@ public static Resource file2Resource(String filename) throws MalformedURLExcepti
         if (resource.exists() || resource.isReadable()) {
             return resource;
         } else {
-            logger.error("file can not read : {}", filename);
-
+            logger.error("File can not be read, fileName:{}", filename);
         }
         return null;
     }

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/TaskGroupServiceTest.java
Patch:
@@ -183,6 +183,7 @@ public void testUpdate() {
         Mockito.when(resourcePermissionCheckService.resourcePermissionCheck(AuthorizationType.TASK_GROUP, null,
                 0, serviceLogger)).thenReturn(true);
         Mockito.when(taskGroupMapper.selectById(1)).thenReturn(taskGroup);
+        Mockito.when(taskGroupMapper.updateById(taskGroup)).thenReturn(1);
         Map<String, Object> result = taskGroupService.updateTaskGroup(loginUser, 1, "newName", "desc", 100);
         logger.info(result.toString());
         Assert.assertEquals(Status.SUCCESS, result.get(Constants.STATUS));

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/TenantServiceTest.java
Patch:
@@ -171,6 +171,7 @@ public void testUpdateTenant() throws Exception {
         Mockito.when(tenantMapper.queryById(1)).thenReturn(getTenant());
         Mockito.when(resourcePermissionCheckService.operationPermissionCheck(AuthorizationType.TENANT, null, getLoginUser().getId(), TENANT_UPDATE, baseServiceLogger)).thenReturn(true);
         Mockito.when(resourcePermissionCheckService.resourcePermissionCheck(AuthorizationType.TENANT, null, 0, baseServiceLogger)).thenReturn(true);
+        Mockito.when(tenantMapper.updateById(getTenant())).thenReturn(1);
 
         // update not exists tenant
         Throwable exception = Assertions.assertThrows(ServiceException.class, () -> tenantService.updateTenant(getLoginUser(), 912222, tenantCode, 1, tenantDesc));
@@ -218,6 +219,7 @@ public void testDeleteTenantById() throws Exception {
 
         // success
         Mockito.when(tenantMapper.queryById(4)).thenReturn(getTenant(4));
+        Mockito.when(tenantMapper.deleteById(4)).thenReturn(1);
         Map<String, Object> result = tenantService.deleteTenantById(getLoginUser(), 4);
         Assert.assertEquals(Status.SUCCESS, result.get(Constants.STATUS));
     }

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/UsersServiceTest.java
Patch:
@@ -306,6 +306,7 @@ public void testUpdateUser() {
 
             // success
             when(userMapper.selectById(1)).thenReturn(getUser());
+            when(userMapper.updateById(getUser())).thenReturn(1);
             result = usersService.updateUser(getLoginUser(), 1, userName, userPassword, "32222s@qq.com", 1,
                     "13457864543", "queue", 1, "Asia/Shanghai");
             logger.info(result.toString());
@@ -322,8 +323,8 @@ public void testDeleteUserById() {
         try {
             when(userMapper.queryTenantCodeByUserId(1)).thenReturn(getUser());
             when(userMapper.selectById(1)).thenReturn(getUser());
-            when(accessTokenMapper.deleteAccessTokenByUserId(1)).thenReturn(0);
-            // no operate
+            when(userMapper.deleteById(1)).thenReturn(1);
+            //no operate
             Map<String, Object> result = usersService.deleteUserById(loginUser, 3);
             logger.info(result.toString());
             Assert.assertEquals(Status.USER_NO_OPERATION_PERM, result.get(Constants.STATUS));

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-api/src/main/java/org/apache/dolphinscheduler/plugin/datasource/api/utils/DataSourceUtils.java
Patch:
@@ -54,7 +54,7 @@ public static void checkDatasourceParam(BaseDataSourceParamDTO baseDataSourcePar
     public static ConnectionParam buildConnectionParams(BaseDataSourceParamDTO baseDataSourceParamDTO) {
         ConnectionParam connectionParams = getDatasourceProcessor(baseDataSourceParamDTO.getType())
                 .createConnectionParams(baseDataSourceParamDTO);
-        logger.info("parameters map:{}", connectionParams);
+        logger.info("Parameters map:{}", connectionParams);
         return connectionParams;
     }
 

File: dolphinscheduler-alert/dolphinscheduler-alert-server/src/test/java/org/apache/dolphinscheduler/alert/runner/AlertSenderServiceTest.java
Patch:
@@ -154,6 +154,7 @@ public void testRun() {
         String content = "alert mail test content";
         List<Alert> alertList = new ArrayList<>();
         Alert alert = new Alert();
+        alert.setId(1);
         alert.setAlertGroupId(alertGroupId);
         alert.setTitle(title);
         alert.setContent(content);

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/ShellCommandExecutor.java
Patch:
@@ -101,7 +101,7 @@ protected void createCommandFileIfNotExists(String execCommand, String commandFi
                     }
                 }
             } else {
-                sb.append("#!/bin/sh\n");
+                sb.append("#!/bin/bash\n");
                 sb.append("BASEDIR=$(cd `dirname $0`; pwd)\n");
                 sb.append("cd $BASEDIR\n");
                 if (!Strings.isNullOrEmpty(taskRequest.getEnvironmentConfig())) {

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/WorkflowExecuteRunnable.java
Patch:
@@ -305,7 +305,6 @@ public void handleEvents() {
             } finally {
                 LoggerUtils.removeWorkflowAndTaskInstanceIdMDC();
             }
-
         }
     }
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/BaseController.java
Patch:
@@ -46,6 +46,7 @@ public class BaseController {
      * @param pageSize page size
      * @return check result code
      */
+    // todo: directly throw exception
     public Result checkPageParams(int pageNo, int pageSize) {
         Result result = new Result();
         Status resultEnum = Status.SUCCESS;

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/ProcessDefinitionMapper.java
Patch:
@@ -108,14 +108,12 @@ ProcessDefinition queryByDefineName(@Param("projectCode") long projectCode,
      * @param searchVal searchVal
      * @param userId userId
      * @param projectCode projectCode
-     * @param isAdmin isAdmin
      * @return process definition IPage
      */
     IPage<ProcessDefinition> queryDefineListPaging(IPage<ProcessDefinition> page,
                                                    @Param("searchVal") String searchVal,
                                                    @Param("userId") int userId,
-                                                   @Param("projectCode") long projectCode,
-                                                   @Param("isAdmin") boolean isAdmin);
+                                                   @Param("projectCode") long projectCode);
 
     /**
      * query all process definition list

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/model/MasterHeartBeat.java
Patch:
@@ -35,5 +35,6 @@ public class MasterHeartBeat implements HeartBeat {
     private double availablePhysicalMemorySize;
     private double maxCpuloadAvg;
     private double reservedMemory;
+    private double diskAvailable;
     private int processId;
 }

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/model/WorkerHeartBeat.java
Patch:
@@ -36,6 +36,7 @@ public class WorkerHeartBeat implements HeartBeat {
     private double availablePhysicalMemorySize;
     private double maxCpuloadAvg;
     private double reservedMemory;
+    private double diskAvailable;
     private int serverStatus;
     private int processId;
 

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/task/MasterHeartBeatTask.java
Patch:
@@ -57,6 +57,8 @@ public MasterHeartBeat getHeartBeat() {
                 .availablePhysicalMemorySize(OSUtils.availablePhysicalMemorySize())
                 .maxCpuloadAvg(masterConfig.getMaxCpuLoadAvg())
                 .reservedMemory(masterConfig.getReservedMemory())
+                .memoryUsage(OSUtils.memoryUsage())
+                .diskAvailable(OSUtils.diskAvailable())
                 .processId(processId)
                 .build();
     }

File: dolphinscheduler-worker/src/main/java/org/apache/dolphinscheduler/server/worker/task/WorkerHeartBeatTask.java
Patch:
@@ -68,7 +68,9 @@ public WorkerHeartBeat getHeartBeat() {
                 .loadAverage(loadAverage)
                 .availablePhysicalMemorySize(availablePhysicalMemorySize)
                 .maxCpuloadAvg(maxCpuLoadAvg)
+                .memoryUsage(OSUtils.memoryUsage())
                 .reservedMemory(reservedMemory)
+                .diskAvailable(OSUtils.diskAvailable())
                 .processId(processId)
                 .workerHostWeight(workerConfig.getHostWeight())
                 .workerWaitingTaskCount(this.workerWaitingTaskCount.get())

File: dolphinscheduler-task-plugin/dolphinscheduler-task-datax/src/main/java/org/apache/dolphinscheduler/plugin/task/datax/DataxUtils.java
Patch:
@@ -142,6 +142,8 @@ public static String doConvertKeywordsColumn(DbType dbType, String column) {
                 return String.format("\"%s\"", column);
             case SQLSERVER:
                 return String.format("`%s`", column);
+            case CLICKHOUSE:
+                return String.format("`%s`", column);
             default:
                 return column;
         }

File: dolphinscheduler-alert/dolphinscheduler-alert-server/src/test/java/org/apache/dolphinscheduler/alert/runner/AlertSenderServiceTest.java
Patch:
@@ -92,6 +92,7 @@ public void testSyncHandler() {
         List<AlertPluginInstance> alertInstanceList = new ArrayList<>();
         AlertPluginInstance alertPluginInstance = new AlertPluginInstance(
                 pluginDefineId, pluginInstanceParams, pluginInstanceName);
+        alertPluginInstance.setId(1);
         alertInstanceList.add(alertPluginInstance);
         when(alertDao.listInstanceByAlertGroupId(1)).thenReturn(alertInstanceList);
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/LoginController.java
Patch:
@@ -32,8 +32,8 @@
 
 import springfox.documentation.annotations.ApiIgnore;
 
-import org.apache.commons.httpclient.HttpStatus;
 import org.apache.commons.lang3.StringUtils;
+import org.apache.http.HttpStatus;
 
 import java.util.Map;
 

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/AuditLog.java
Patch:
@@ -31,7 +31,7 @@ public class AuditLog {
      * id
      */
     @TableId(value = "id", type = IdType.AUTO)
-    private int id;
+    private Integer id;
 
     /**
      * user id

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkerGroup.java
Patch:
@@ -19,11 +19,12 @@
 
 import java.util.Date;
 
+import lombok.Data;
+
 import com.baomidou.mybatisplus.annotation.IdType;
 import com.baomidou.mybatisplus.annotation.TableField;
 import com.baomidou.mybatisplus.annotation.TableId;
 import com.baomidou.mybatisplus.annotation.TableName;
-import lombok.Data;
 
 /**
  * worker group
@@ -33,7 +34,7 @@
 public class WorkerGroup {
 
     @TableId(value = "id", type = IdType.AUTO)
-    private int id;
+    private Integer id;
 
     private String name;
 

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/ProcessInstanceMapper.java
Patch:
@@ -250,7 +250,7 @@ List<ProcessInstance> queryByProcessDefineCodeAndStatus(@Param("processDefinitio
     List<ProcessInstance> queryByProcessDefineCodeAndProcessDefinitionVersionAndStatusAndNextId(@Param("processDefinitionCode") Long processDefinitionCode,
                                                                                                 @Param("processDefinitionVersion") int processDefinitionVersion,
                                                                                                 @Param("states") int[] states,
-                                                                                                @Param("id") int id);
+                                                                                                @Param("id") Integer id);
 
     int updateGlobalParamsById(@Param("globalParams") String globalParams,
                                @Param("id") int id);

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/repository/ProcessInstanceDao.java
Patch:
@@ -19,7 +19,6 @@
 
 import org.apache.dolphinscheduler.dao.entity.ProcessInstance;
 
-
 public interface ProcessInstanceDao {
 
     public int insertProcessInstance(ProcessInstance processInstance);

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/utils/DqRuleUtils.java
Patch:
@@ -34,7 +34,8 @@ private DqRuleUtils() {
 
     public static List<DqRuleInputEntry> transformInputEntry(List<DqRuleInputEntry> ruleInputEntryList) {
         for (DqRuleInputEntry dqRuleInputEntry : ruleInputEntryList) {
-            Map<String,Object> valuesMap = JSONUtils.toMap(dqRuleInputEntry.getValuesMap(),String.class,Object.class);
+            Map<String, Object> valuesMap =
+                    JSONUtils.toMap(dqRuleInputEntry.getValuesMap(), String.class, Object.class);
             if (valuesMap != null) {
 
                 if (valuesMap.get(dqRuleInputEntry.getField()) != null) {
@@ -43,7 +44,7 @@ public static List<DqRuleInputEntry> transformInputEntry(List<DqRuleInputEntry>
                 }
 
                 if (valuesMap.get("is_show") != null) {
-                    dqRuleInputEntry.setShow(Boolean.parseBoolean(String.valueOf(valuesMap.get("is_show"))));
+                    dqRuleInputEntry.setIsShow(Boolean.parseBoolean(String.valueOf(valuesMap.get("is_show"))));
                 }
 
                 if (valuesMap.get("can_edit") != null) {

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/TaskDefinitionLogMapperTest.java
Patch:
@@ -57,7 +57,7 @@ public TaskDefinitionLog insertOne(int userId) {
     @Test
     public void testInsert() {
         TaskDefinitionLog taskDefinitionLog = insertOne();
-        Assert.assertNotEquals(taskDefinitionLog.getId(), 0);
+        Assert.assertNotEquals(taskDefinitionLog.getId().intValue(), 0);
     }
 
     @Test

File: dolphinscheduler-data-quality/src/test/java/org/apache/dolphinscheduler/data/quality/flow/FlowTestBase.java
Patch:
@@ -28,7 +28,7 @@
  */
 public class FlowTestBase extends SparkApplicationTestBase {
 
-    protected String url = "jdbc:h2:mem:test;DB_CLOSE_DELAY=-1";
+    protected String url = "jdbc:h2:mem:test;MODE=MySQL;DB_CLOSE_DELAY=-1;DATABASE_TO_LOWER=true";
 
     protected String driver = "org.h2.Driver";
 

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/StreamTaskExecuteRunnable.java
Patch:
@@ -366,7 +366,7 @@ protected Map<String, String> getResourceFullNames(TaskInstance taskInstance) {
             if (CollectionUtils.isNotEmpty(projectResourceFiles)) {
 
                 // filter the resources that the resource id equals 0
-                Set<ResourceInfo> oldVersionResources = projectResourceFiles.stream().filter(t -> t.getId() == 0).collect(Collectors.toSet());
+                Set<ResourceInfo> oldVersionResources = projectResourceFiles.stream().filter(t -> t.getId() == null).collect(Collectors.toSet());
                 if (CollectionUtils.isNotEmpty(oldVersionResources)) {
                     oldVersionResources.forEach(t -> resourcesMap.put(t.getRes(), processService.queryTenantCodeByResName(t.getRes(), ResourceType.FILE)));
                 }

File: dolphinscheduler-master/src/test/java/org/apache/dolphinscheduler/server/master/dispatch/ExecutionContextTestUtils.java
Patch:
@@ -39,7 +39,9 @@ public class ExecutionContextTestUtils {
     public static ExecutionContext getExecutionContext(int port) {
         TaskInstance taskInstance = Mockito.mock(TaskInstance.class);
         ProcessDefinition processDefinition = Mockito.mock(ProcessDefinition.class);
+        processDefinition.setId(0);
         ProcessInstance processInstance = new ProcessInstance();
+        processInstance.setId(0);
         processInstance.setCommandType(CommandType.COMPLEMENT_DATA);
         taskInstance.setProcessInstance(processInstance);
         TaskExecutionContext context = TaskExecutionContextBuilder.get()

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessService.java
Patch:
@@ -19,7 +19,6 @@
 
 import org.apache.dolphinscheduler.common.enums.AuthorizationType;
 import org.apache.dolphinscheduler.common.enums.TaskGroupQueueStatus;
-import org.apache.dolphinscheduler.common.enums.WorkflowExecutionStatus;
 import org.apache.dolphinscheduler.common.graph.DAG;
 import org.apache.dolphinscheduler.common.model.TaskNode;
 import org.apache.dolphinscheduler.common.model.TaskNodeRelation;

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/AbstractYarnTask.java
Patch:
@@ -105,7 +105,7 @@ protected String getResourceNameOfMainJar(ResourceInfo mainJar) {
             throw new RuntimeException("The jar for the task is required.");
         }
 
-        return mainJar.getId() == 0
+        return mainJar.getId() == null
             ? mainJar.getRes()
             // when update resource maybe has error
             : mainJar.getResourceName().replaceFirst("/", "");

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/test/java/org/apache/dolphinscheduler/plugin/task/api/parameters/SqlParametersTest.java
Patch:
@@ -19,11 +19,11 @@
 
 import static org.junit.Assert.assertNotNull;
 
+import org.apache.dolphinscheduler.plugin.task.api.enums.DataType;
 import org.apache.dolphinscheduler.plugin.task.api.enums.Direct;
 import org.apache.dolphinscheduler.plugin.task.api.model.Property;
-import org.apache.dolphinscheduler.plugin.task.api.enums.DataType;
 
-import org.apache.commons.collections.CollectionUtils;
+import org.apache.commons.collections4.CollectionUtils;
 
 import java.util.ArrayList;
 import java.util.List;

File: dolphinscheduler-tools/src/main/java/org/apache/dolphinscheduler/tools/datasource/dao/UpgradeDao.java
Patch:
@@ -251,7 +251,7 @@ protected void updateProcessDefinitionJsonResourceList() {
 
                         List<ResourceInfo> resourceList = JSONUtils.toList(param.get("resourceList").toString(), ResourceInfo.class);
                         ResourceInfo mainJar = JSONUtils.parseObject(param.get("mainJar").toString(), ResourceInfo.class);
-                        if (mainJar != null && mainJar.getId() == 0) {
+                        if (mainJar != null && mainJar.getId() == null) {
                             String fullName = mainJar.getRes().startsWith("/") ? mainJar.getRes() : String.format("/%s", mainJar.getRes());
                             if (resourcesMap.containsKey(fullName)) {
                                 mainJar.setId(resourcesMap.get(fullName));
@@ -262,7 +262,7 @@ protected void updateProcessDefinitionJsonResourceList() {
                         if (CollectionUtils.isNotEmpty(resourceList)) {
                             List<ResourceInfo> newResourceList = resourceList.stream().map(resInfo -> {
                                 String fullName = resInfo.getRes().startsWith("/") ? resInfo.getRes() : String.format("/%s", resInfo.getRes());
-                                if (resInfo.getId() == 0 && resourcesMap.containsKey(fullName)) {
+                                if (resInfo.getId() == null && resourcesMap.containsKey(fullName)) {
                                     resInfo.setId(resourcesMap.get(fullName));
                                 }
                                 return resInfo;

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/HadoopUtils.java
Patch:
@@ -70,7 +70,7 @@
 public class HadoopUtils implements Closeable, StorageOperate {
 
     private static final Logger logger = LoggerFactory.getLogger(HadoopUtils.class);
-    private String hdfsUser = PropertyUtils.getString(Constants.HDFS_ROOT_USER);
+    private String hdfsUser;
     public static final String RM_HA_IDS = PropertyUtils.getString(Constants.YARN_RESOURCEMANAGER_HA_RM_IDS);
     public static final String APP_ADDRESS = PropertyUtils.getString(Constants.YARN_APPLICATION_STATUS_ADDRESS);
     public static final String JOB_HISTORY_ADDRESS = PropertyUtils.getString(Constants.YARN_JOB_HISTORY_STATUS_ADDRESS);
@@ -140,7 +140,7 @@ private void init() throws NullPointerException {
             // the default is the local file system
             if (StringUtils.isNotBlank(defaultFS)) {
                 Map<String, String> fsRelatedProps = PropertyUtils.getPrefixedProperties("fs.");
-                configuration.set(Constants.FS_DEFAULT_FS, defaultFS);
+                configuration.set(Constants.HDFS_DEFAULT_FS, defaultFS);
                 fsRelatedProps.forEach((key, value) -> configuration.set(key, value));
             } else {
                 logger.error("property:{} can not to be empty, please set!", Constants.FS_DEFAULT_FS);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/python/PythonGateway.java
Patch:
@@ -90,6 +90,8 @@ public class PythonGateway {
     private static final RunMode DEFAULT_RUN_MODE = RunMode.RUN_MODE_SERIAL;
     private static final int DEFAULT_DRY_RUN = 0;
     private static final ComplementDependentMode COMPLEMENT_DEPENDENT_MODE = ComplementDependentMode.OFF_MODE;
+    // We use admin user's user_id to skip some permission issue from python gateway service
+    private static final int ADMIN_USER_ID = 1;
 
     @Autowired
     private ProcessDefinitionMapper processDefinitionMapper;
@@ -142,7 +144,7 @@ public class PythonGateway {
     // TODO replace this user to build in admin user if we make sure build in one could not be change
     private final User dummyAdminUser = new User() {
         {
-            setId(Integer.MAX_VALUE);
+            setId(ADMIN_USER_ID);
             setUserName("dummyUser");
             setUserType(UserType.ADMIN_USER);
         }

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/DaoConfiguration.java
Patch:
@@ -26,6 +26,6 @@
 
 @Configuration
 @EnableAutoConfiguration
-@MapperScan("org.apache.dolphinscheduler.dao")
+@MapperScan("org.apache.dolphinscheduler.dao.mapper")
 public class DaoConfiguration {
 }

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/task/BlockingTaskProcessor.java
Patch:
@@ -200,7 +200,7 @@ private void endTask() {
         logger.info("blocking opportunity: expected-->{}, actual-->{}", expected, this.conditionResult);
         processInstance.setBlocked(isBlocked);
         if (isBlocked) {
-            processInstance.setState(WorkflowExecutionStatus.READY_BLOCK);
+            processInstance.setStateWithDesc(WorkflowExecutionStatus.READY_BLOCK, "ready block");
         }
         taskInstance.setState(TaskExecutionStatus.SUCCESS);
         taskInstance.setEndTime(new Date());

File: dolphinscheduler-service/src/test/java/org/apache/dolphinscheduler/service/process/ProcessServiceTest.java
Patch:
@@ -71,6 +71,7 @@
 import org.apache.dolphinscheduler.dao.mapper.TaskGroupQueueMapper;
 import org.apache.dolphinscheduler.dao.mapper.TaskInstanceMapper;
 import org.apache.dolphinscheduler.dao.mapper.UserMapper;
+import org.apache.dolphinscheduler.dao.repository.ProcessInstanceDao;
 import org.apache.dolphinscheduler.plugin.task.api.enums.dp.DqTaskState;
 import org.apache.dolphinscheduler.plugin.task.api.enums.dp.ExecuteSqlType;
 import org.apache.dolphinscheduler.plugin.task.api.enums.dp.InputType;
@@ -130,6 +131,8 @@ public class ProcessServiceTest {
     @Mock
     private ProcessInstanceMapper processInstanceMapper;
     @Mock
+    private ProcessInstanceDao processInstanceDao;
+    @Mock
     private UserMapper userMapper;
     @Mock
     private TaskInstanceMapper taskInstanceMapper;

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/rpc/remote/NettyClient.java
Patch:
@@ -94,7 +94,7 @@ private static class NettyClientInner {
     /**
      * channels
      */
-    private final ConcurrentHashMap<Host, Channel> channels = new ConcurrentHashMap(128);
+    private final ConcurrentHashMap<Host, Channel> channels = new ConcurrentHashMap<>(128);
 
     /**
      * get channel

File: dolphinscheduler-worker/src/main/java/org/apache/dolphinscheduler/server/worker/config/WorkerConfig.java
Patch:
@@ -69,7 +69,7 @@ public void validate(Object target, Errors errors) {
         if (workerConfig.getExecThreads() <= 0) {
             errors.rejectValue("exec-threads", null, "should be a positive value");
         }
-        if (workerConfig.getHeartbeatInterval().toMillis() <= 0) {
+        if (workerConfig.getHeartbeatInterval().getSeconds() <= 0) {
             errors.rejectValue("heartbeat-interval", null, "shoule be a valid duration");
         }
         if (workerConfig.getMaxCpuLoadAvg() <= 0) {

File: dolphinscheduler-worker/src/main/java/org/apache/dolphinscheduler/server/worker/rpc/WorkerRpcServer.java
Patch:
@@ -84,6 +84,7 @@ public void start() {
         this.nettyRemotingServer.registerProcessor(CommandType.PROCESS_HOST_UPDATE_REQUEST, hostUpdateProcessor);
         this.nettyRemotingServer.registerProcessor(CommandType.TASK_SAVEPOINT_REQUEST, taskSavePointProcessor);
         // logger server
+        this.nettyRemotingServer.registerProcessor(CommandType.GET_APP_ID_REQUEST, loggerRequestProcessor);
         this.nettyRemotingServer.registerProcessor(CommandType.GET_LOG_BYTES_REQUEST, loggerRequestProcessor);
         this.nettyRemotingServer.registerProcessor(CommandType.ROLL_VIEW_LOG_REQUEST, loggerRequestProcessor);
         this.nettyRemotingServer.registerProcessor(CommandType.VIEW_WHOLE_LOG_REQUEST, loggerRequestProcessor);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/python/PythonGateway.java
Patch:
@@ -266,7 +266,7 @@ public Long createOrUpdateProcessDefinition(String userName,
      * @param processDefinitionName process definition name
      */
     private ProcessDefinition getProcessDefinition(User user, long projectCode, String processDefinitionName) {
-        Map<String, Object> verifyProcessDefinitionExists = processDefinitionService.verifyProcessDefinitionName(user, projectCode, processDefinitionName);
+        Map<String, Object> verifyProcessDefinitionExists = processDefinitionService.verifyProcessDefinitionName(user, projectCode, processDefinitionName, 0);
         Status verifyStatus = (Status) verifyProcessDefinitionExists.get(Constants.STATUS);
 
         ProcessDefinition processDefinition = null;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProcessDefinitionService.java
Patch:
@@ -194,11 +194,13 @@ Map<String, Object> updateProcessDefinition(User loginUser,
      * @param loginUser login user
      * @param projectCode project code
      * @param name name
+     * @param processDefinitionCode processDefinitionCode
      * @return true if process definition name not exists, otherwise false
      */
     Map<String, Object> verifyProcessDefinitionName(User loginUser,
                                                     long projectCode,
-                                                    String name);
+                                                    String name,
+                                                    long processDefinitionCode);
 
     /**
      * delete process definition by code

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/ProcessDefinitionControllerTest.java
Patch:
@@ -126,9 +126,9 @@ public void testVerifyProcessDefinitionName() {
         long projectCode = 1L;
         String name = "dag_test";
 
-        Mockito.when(processDefinitionService.verifyProcessDefinitionName(user, projectCode, name)).thenReturn(result);
+        Mockito.when(processDefinitionService.verifyProcessDefinitionName(user, projectCode, name, 0)).thenReturn(result);
 
-        Result response = processDefinitionController.verifyProcessDefinitionName(user, projectCode, name);
+        Result response = processDefinitionController.verifyProcessDefinitionName(user, projectCode, name, 0);
         Assert.assertTrue(response.isStatus(Status.PROCESS_DEFINITION_NAME_EXIST));
     }
 

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProcessDefinitionServiceTest.java
Patch:
@@ -508,20 +508,20 @@ public void testVerifyProcessDefinitionName() {
         putMsg(result, Status.PROJECT_NOT_FOUND, projectCode);
         Mockito.when(projectService.checkProjectAndAuth(loginUser, project, projectCode, WORKFLOW_CREATE)).thenReturn(result);
         Map<String, Object> map = processDefinitionService.verifyProcessDefinitionName(loginUser,
-                projectCode, "test_pdf");
+                projectCode, "test_pdf", 0);
         Assert.assertEquals(Status.PROJECT_NOT_FOUND, map.get(Constants.STATUS));
 
         //project check auth success, process not exist
         putMsg(result, Status.SUCCESS, projectCode);
         Mockito.when(processDefineMapper.verifyByDefineName(project.getCode(), "test_pdf")).thenReturn(null);
         Map<String, Object> processNotExistRes = processDefinitionService.verifyProcessDefinitionName(loginUser,
-                projectCode, "test_pdf");
+                projectCode, "test_pdf", 0);
         Assert.assertEquals(Status.SUCCESS, processNotExistRes.get(Constants.STATUS));
 
         //process exist
         Mockito.when(processDefineMapper.verifyByDefineName(project.getCode(), "test_pdf")).thenReturn(getProcessDefinition());
         Map<String, Object> processExistRes = processDefinitionService.verifyProcessDefinitionName(loginUser,
-                projectCode, "test_pdf");
+                projectCode, "test_pdf", 0);
         Assert.assertEquals(Status.PROCESS_DEFINITION_NAME_EXIST, processExistRes.get(Constants.STATUS));
     }
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/WorkerGroupService.java
Patch:
@@ -34,9 +34,11 @@ public interface WorkerGroupService {
      * @param id worker group id
      * @param name worker group name
      * @param addrList addr list
+     * @param description   description
+     * @param otherParamsJson  otherParamsJson
      * @return create or update result code
      */
-    Map<String, Object> saveWorkerGroup(User loginUser, int id, String name, String addrList);
+    Map<String, Object> saveWorkerGroup(User loginUser, int id, String name, String addrList, String description, String otherParamsJson);
 
     /**
      * query worker group paging

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/WorkerGroupControllerTest.java
Patch:
@@ -72,6 +72,8 @@ public void testSaveWorkerGroup() throws Exception {
         MultiValueMap<String, String> paramsMap = new LinkedMultiValueMap<>();
         paramsMap.add("name","cxc_work_group");
         paramsMap.add("addrList","192.168.0.1,192.168.0.2");
+        paramsMap.add("description","");
+        paramsMap.add("otherParamsJson","");
         MvcResult mvcResult = mockMvc.perform(post("/worker-groups")
                 .header("sessionId", sessionId)
                 .params(paramsMap))

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkerGroupMapper.java
Patch:
@@ -61,4 +61,5 @@ public interface WorkerGroupMapper extends BaseMapper<WorkerGroup> {
      * @return worker group list
      */
     List<WorkerGroup> queryWorkerGroupByName(@Param("name") String name);
+
 }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/utils/FileUtils.java
Patch:
@@ -20,6 +20,7 @@
 
 import java.io.File;
 import java.io.IOException;
+import java.io.InputStream;
 import java.net.MalformedURLException;
 import java.nio.charset.StandardCharsets;
 import java.nio.file.Path;
@@ -76,8 +77,8 @@ public static Resource file2Resource(String filename) throws MalformedURLExcepti
      * @return file content string
      */
     public static String file2String(MultipartFile file) {
-        try {
-            return IOUtils.toString(file.getInputStream(), StandardCharsets.UTF_8);
+        try (InputStream inputStream = file.getInputStream()) {
+            return IOUtils.toString(inputStream, StandardCharsets.UTF_8);
         } catch (IOException e) {
             logger.error("file convert to string failed: {}", file.getName());
         }

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/upgrade/SchemaUtils.java
Patch:
@@ -22,6 +22,7 @@
 import java.io.File;
 import java.io.FileNotFoundException;
 import java.io.IOException;
+import java.io.InputStream;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
@@ -106,8 +107,8 @@ public static boolean isAGreatVersion(String schemaVersion, String version) {
     public static String getSoftVersion() throws IOException {
         final ClassPathResource softVersionFile = new ClassPathResource("sql/soft_version");
         String softVersion;
-        try {
-            softVersion = FileUtils.readFile2Str(softVersionFile.getInputStream());
+        try (InputStream inputStream = softVersionFile.getInputStream()) {
+            softVersion = FileUtils.readFile2Str(inputStream);
             softVersion = Strings.nullToEmpty(softVersion).replaceAll("\\s+|\r|\n", "");
         } catch (FileNotFoundException e) {
             logger.error(e.getMessage(), e);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/SchedulerController.java
Patch:
@@ -160,7 +160,7 @@ public Result updateSchedule(@ApiIgnore @RequestAttribute(value = SESSION_USER)
                                  @RequestParam(value = "failureStrategy", required = false, defaultValue = "END") FailureStrategy failureStrategy,
                                  @RequestParam(value = "workerGroup", required = false, defaultValue = "default") String workerGroup,
                                  @RequestParam(value = "environmentCode", required = false, defaultValue = "-1") Long environmentCode,
-                                 @RequestParam(value = "processInstancePriority", required = false) Priority processInstancePriority) {
+                                 @RequestParam(value = "processInstancePriority", required = false, defaultValue = DEFAULT_PROCESS_INSTANCE_PRIORITY) Priority processInstancePriority) {
 
         Map<String, Object> result = schedulerService.updateSchedule(loginUser, projectCode, id, schedule,
             warningType, warningGroupId, failureStrategy, processInstancePriority, workerGroup, environmentCode);

File: dolphinscheduler-service/src/test/java/org/apache/dolphinscheduler/service/process/ProcessServiceTest.java
Patch:
@@ -471,7 +471,7 @@ public void testHandleCommand() throws CronParseException, CodeGenerateUtils.Cod
         Mockito.when(processInstanceMapper.updateById(processInstance)).thenReturn(1);
         Mockito.when(commandMapper.deleteById(9)).thenReturn(1);
         ProcessInstance processInstance10 = processService.handleCommand(host, command9);
-        Assert.assertTrue(processInstance10 == null);
+        Assert.assertTrue(processInstance10 != null);
     }
 
     @Test(expected = ServiceException.class)

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/event/TaskStateEventHandler.java
Patch:
@@ -82,7 +82,7 @@ public boolean handleStateEvent(WorkflowExecuteRunnable workflowExecuteRunnable,
             }
             return true;
         }
-        throw new StateEventHandleException(
+        throw new StateEventHandleError(
                 "Task state event handle error, due to the task is not in activeTaskProcessorMaps");
     }
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java
Patch:
@@ -436,6 +436,7 @@ public enum Status {
     NO_CURRENT_OPERATING_PERMISSION(1400001, "The current user does not have this permission.", "当前用户无此权限"),
     FUNCTION_DISABLED(1400002, "The current feature is disabled.", "当前功能已被禁用"),
     SCHEDULE_TIME_NUMBER(1400003, "The number of complement dates exceed 100.", "补数日期个数超过100"),
+    DESCRIPTION_TOO_LONG_ERROR(1400004, "description is too long error", "描述过长"),
     ;
 
     private final int code;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProjectServiceImpl.java
Patch:
@@ -146,7 +146,7 @@ public Result createProject(User loginUser, String name, String desc) {
      * @param desc   desc
      */
     public static void checkDesc(Result result, String desc) {
-        if (!StringUtils.isEmpty(desc) && desc.length() > 200) {
+        if (!StringUtils.isEmpty(desc) && desc.codePointCount(0, desc.length()) > 255) {
             result.setCode(Status.REQUEST_PARAMS_NOT_VALID_ERROR.getCode());
             result.setMsg(MessageFormat.format(Status.REQUEST_PARAMS_NOT_VALID_ERROR.getMsg(), "desc length"));
         } else {

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/AbstractCommandExecutor.java
Patch:
@@ -230,8 +230,7 @@ public TaskResponse run(String execCommand) throws IOException, InterruptedExcep
             result.setExitStatusCode(process.exitValue());
 
         } else {
-            logger.error("process has failure , exitStatusCode:{}, processExitValue:{}, ready to kill ...",
-                    result.getExitStatusCode(), process.exitValue());
+            logger.error("process has failure, the task timeout configuration value is:{}, ready to kill ...", taskRequest.getTaskTimeout());
             ProcessUtils.kill(taskRequest);
             result.setExitStatusCode(EXIT_CODE_FAILURE);
         }

File: dolphinscheduler-task-plugin/dolphinscheduler-task-sql/src/main/java/org/apache/dolphinscheduler/plugin/task/sql/SqlTask.java
Patch:
@@ -370,7 +370,6 @@ private PreparedStatement prepareStatementAndBind(Connection connection, SqlBind
         } catch (Exception exception) {
             throw new TaskException("SQL task prepareStatementAndBind error", exception);
         }
-
     }
 
     /**
@@ -430,9 +429,10 @@ private SqlBinds getSqlAndSqlParamsMap(String sql) {
         sql = replaceOriginalValue(sql, rgexo, paramsMap);
         // replace the ${} of the SQL statement with the Placeholder
         String formatSql = sql.replaceAll(rgex, "?");
+        // Convert the list parameter
+        formatSql = ParameterUtils.expandListParameter(sqlParamsMap, formatSql);
         sqlBuilder.append(formatSql);
-
-        // print repalce sql
+        // print replace sql
         printReplacedSql(sql, formatSql, rgex, sqlParamsMap);
         return new SqlBinds(sqlBuilder.toString(), sqlParamsMap);
     }

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/ReleaseState.java
Patch:
@@ -26,7 +26,7 @@ public enum ReleaseState {
 
     /**
      * 0 offline
-     * 1 on line
+     * 1 online
      */
     OFFLINE(0, "offline"),
     ONLINE(1, "online");

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/TaskDefinitionService.java
Patch:
@@ -19,6 +19,7 @@
 
 import org.apache.dolphinscheduler.api.utils.Result;
 import org.apache.dolphinscheduler.common.enums.ReleaseState;
+import org.apache.dolphinscheduler.common.enums.TaskExecuteType;
 import org.apache.dolphinscheduler.dao.entity.User;
 
 import java.util.Map;
@@ -171,6 +172,7 @@ Map<String, Object> queryTaskDefinitionDetail(User loginUser,
      * @param searchWorkflowName searchWorkflowName
      * @param searchTaskName searchTaskName
      * @param taskType taskType
+     * @param taskExecuteType taskExecuteType
      * @param pageNo page number
      * @param pageSize page size
      * @return task definition page
@@ -180,6 +182,7 @@ Result queryTaskDefinitionListPaging(User loginUser,
                                          String searchWorkflowName,
                                          String searchTaskName,
                                          String taskType,
+                                         TaskExecuteType taskExecuteType,
                                          Integer pageNo,
                                          Integer pageSize);
 

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/utils/TaskInstanceUtils.java
Patch:
@@ -74,6 +74,7 @@ public static void copyTaskInstance(TaskInstance source, TaskInstance target) {
         target.setTaskGroupId(source.getTaskGroupId());
         target.setCpuQuota(source.getCpuQuota());
         target.setMemoryMax(source.getMemoryMax());
+        target.setTaskExecuteType(source.getTaskExecuteType());
     }
 
 }

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/event/TaskStateEventHandler.java
Patch:
@@ -102,7 +102,7 @@ private void measureTaskState(TaskStateEvent taskStateEvent) {
         }
         switch (taskStateEvent.getStatus()) {
             case KILL:
-                TaskMetrics.incTaskInstanceByState("kill");
+                TaskMetrics.incTaskInstanceByState("stop");
                 break;
             case SUCCESS:
                 TaskMetrics.incTaskInstanceByState("success");

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/metrics/TaskMetrics.java
Patch:
@@ -84,6 +84,9 @@ public void incTaskDispatch() {
     }
 
     public void incTaskInstanceByState(final String state) {
+        if (taskInstanceCounters.get(state) == null) {
+            return;
+        }
         taskInstanceCounters.get(state).increment();
     }
 

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/task/BaseTaskProcessor.java
Patch:
@@ -325,7 +325,7 @@ protected TaskExecutionContext getTaskExecutionContext(TaskInstance taskInstance
                 .create();
     }
 
-    private void setTaskResourceInfo(ResourceParametersHelper resourceParametersHelper) {
+    public void setTaskResourceInfo(ResourceParametersHelper resourceParametersHelper) {
         if (Objects.isNull(resourceParametersHelper)) {
             return;
         }
@@ -592,7 +592,7 @@ protected boolean verifyTenantIsNull(Tenant tenant, TaskInstance taskInstance) {
     /**
      * get resource map key is full name and value is tenantCode
      */
-    protected Map<String, String> getResourceFullNames(TaskInstance taskInstance) {
+    public Map<String, String> getResourceFullNames(TaskInstance taskInstance) {
         Map<String, String> resourcesMap = new HashMap<>();
         AbstractParameters baseParam = taskPluginManager.getParameters(ParametersNode.builder()
                 .taskType(taskInstance.getTaskType()).taskParams(taskInstance.getTaskParams()).build());

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessServiceImpl.java
Patch:
@@ -2849,6 +2849,7 @@ public List<TaskNode> transformTask(List<ProcessTaskRelation> taskRelationList,
                 taskNode.setTaskGroupPriority(taskDefinitionLog.getTaskGroupPriority());
                 taskNode.setCpuQuota(taskDefinitionLog.getCpuQuota());
                 taskNode.setMemoryMax(taskDefinitionLog.getMemoryMax());
+                taskNode.setTaskExecuteType(taskDefinitionLog.getTaskExecuteType());
                 taskNodeList.add(taskNode);
             }
         }

File: dolphinscheduler-task-plugin/dolphinscheduler-task-chunjun/src/main/java/org/apache/dolphinscheduler/plugin/task/chunjun/ChunJunTask.java
Patch:
@@ -22,6 +22,7 @@
 
 import org.apache.dolphinscheduler.plugin.task.api.AbstractTaskExecutor;
 import org.apache.dolphinscheduler.plugin.task.api.ShellCommandExecutor;
+import org.apache.dolphinscheduler.plugin.task.api.TaskConstants;
 import org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContext;
 import org.apache.dolphinscheduler.plugin.task.api.model.Property;
 import org.apache.dolphinscheduler.plugin.task.api.model.TaskResponse;
@@ -112,7 +113,7 @@ public void handle() throws Exception {
             TaskResponse commandExecuteResult = shellCommandExecutor.run(shellCommandFilePath);
 
             setExitStatusCode(commandExecuteResult.getExitStatusCode());
-            setAppIds(commandExecuteResult.getAppIds());
+            setAppIds(String.join(TaskConstants.COMMA, getApplicationIds()));
             setProcessId(commandExecuteResult.getProcessId());
         } catch (Exception e) {
             logger.error("chunjun task failed.", e);

File: dolphinscheduler-task-plugin/dolphinscheduler-task-datax/src/main/java/org/apache/dolphinscheduler/plugin/task/datax/DataxTask.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.dolphinscheduler.plugin.datasource.api.utils.DataSourceUtils;
 import org.apache.dolphinscheduler.plugin.task.api.AbstractTaskExecutor;
 import org.apache.dolphinscheduler.plugin.task.api.ShellCommandExecutor;
+import org.apache.dolphinscheduler.plugin.task.api.TaskConstants;
 import org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContext;
 import org.apache.dolphinscheduler.plugin.task.api.model.Property;
 import org.apache.dolphinscheduler.plugin.task.api.model.TaskResponse;
@@ -160,7 +161,7 @@ public void handle() throws Exception {
             TaskResponse commandExecuteResult = shellCommandExecutor.run(shellCommandFilePath);
 
             setExitStatusCode(commandExecuteResult.getExitStatusCode());
-            setAppIds(commandExecuteResult.getAppIds());
+            setAppIds(String.join(TaskConstants.COMMA, getApplicationIds()));
             setProcessId(commandExecuteResult.getProcessId());
         } catch (Exception e) {
             logger.error("datax task error", e);

File: dolphinscheduler-task-plugin/dolphinscheduler-task-dvc/src/main/java/org/apache/dolphinscheduler/plugin/task/dvc/DvcTask.java
Patch:
@@ -21,6 +21,7 @@
 
 import org.apache.dolphinscheduler.plugin.task.api.AbstractTaskExecutor;
 import org.apache.dolphinscheduler.plugin.task.api.ShellCommandExecutor;
+import org.apache.dolphinscheduler.plugin.task.api.TaskConstants;
 import org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContext;
 import org.apache.dolphinscheduler.plugin.task.api.model.TaskResponse;
 import org.apache.dolphinscheduler.plugin.task.api.parameters.AbstractParameters;
@@ -79,7 +80,7 @@ public void handle() throws Exception {
             String command = buildCommand();
             TaskResponse commandExecuteResult = shellCommandExecutor.run(command);
             setExitStatusCode(commandExecuteResult.getExitStatusCode());
-            setAppIds(commandExecuteResult.getAppIds());
+            setAppIds(String.join(TaskConstants.COMMA, getApplicationIds()));
             setProcessId(commandExecuteResult.getProcessId());
             parameters.dealOutParam(shellCommandExecutor.getVarPool());
         } catch (Exception e) {

File: dolphinscheduler-task-plugin/dolphinscheduler-task-jupyter/src/main/java/org/apache/dolphinscheduler/plugin/task/jupyter/JupyterTask.java
Patch:
@@ -83,7 +83,7 @@ public void handle() throws Exception {
             // SHELL task exit code
             TaskResponse response = shellCommandExecutor.run(buildCommand());
             setExitStatusCode(response.getExitStatusCode());
-            setAppIds(response.getAppIds());
+            setAppIds(String.join(TaskConstants.COMMA, getApplicationIds()));
             setProcessId(response.getProcessId());
         } catch (Exception e) {
             logger.error("jupyter task execution failure", e);

File: dolphinscheduler-task-plugin/dolphinscheduler-task-mlflow/src/main/java/org/apache/dolphinscheduler/plugin/task/mlflow/MlflowTask.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.dolphinscheduler.common.thread.ThreadUtils;
 import org.apache.dolphinscheduler.plugin.task.api.AbstractTaskExecutor;
 import org.apache.dolphinscheduler.plugin.task.api.ShellCommandExecutor;
+import org.apache.dolphinscheduler.plugin.task.api.TaskConstants;
 import org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContext;
 import org.apache.dolphinscheduler.plugin.task.api.model.Property;
 import org.apache.dolphinscheduler.plugin.task.api.model.TaskResponse;
@@ -91,7 +92,7 @@ public void handle() throws Exception {
                 exitCode = commandExecuteResult.getExitStatusCode();
             }
             setExitStatusCode(exitCode);
-            setAppIds(commandExecuteResult.getAppIds());
+            setAppIds(String.join(TaskConstants.COMMA, getApplicationIds()));
             setProcessId(commandExecuteResult.getProcessId());
             mlflowParameters.dealOutParam(shellCommandExecutor.getVarPool());
         } catch (Exception e) {

File: dolphinscheduler-task-plugin/dolphinscheduler-task-python/src/main/java/org/apache/dolphinscheduler/plugin/task/python/PythonTask.java
Patch:
@@ -113,7 +113,7 @@ public void handle() throws Exception {
 
             TaskResponse taskResponse = shellCommandExecutor.run(command);
             setExitStatusCode(taskResponse.getExitStatusCode());
-            setAppIds(taskResponse.getAppIds());
+            setAppIds(String.join(TaskConstants.COMMA, getApplicationIds()));
             setProcessId(taskResponse.getProcessId());
             setVarPool(shellCommandExecutor.getVarPool());
         } catch (Exception e) {

File: dolphinscheduler-task-plugin/dolphinscheduler-task-seatunnel/src/main/java/org/apache/dolphinscheduler/plugin/task/seatunnel/SeatunnelTask.java
Patch:
@@ -22,6 +22,7 @@
 
 import org.apache.dolphinscheduler.plugin.task.api.AbstractTaskExecutor;
 import org.apache.dolphinscheduler.plugin.task.api.ShellCommandExecutor;
+import org.apache.dolphinscheduler.plugin.task.api.TaskConstants;
 import org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContext;
 import org.apache.dolphinscheduler.plugin.task.api.model.Property;
 import org.apache.dolphinscheduler.plugin.task.api.model.TaskResponse;
@@ -90,7 +91,7 @@ public void handle() throws Exception {
             String command = buildCommand();
             TaskResponse commandExecuteResult = shellCommandExecutor.run(command);
             setExitStatusCode(commandExecuteResult.getExitStatusCode());
-            setAppIds(commandExecuteResult.getAppIds());
+            setAppIds(String.join(TaskConstants.COMMA, getApplicationIds()));
             setProcessId(commandExecuteResult.getProcessId());
             seatunnelParameters.dealOutParam(shellCommandExecutor.getVarPool());
         } catch (Exception e) {

File: dolphinscheduler-task-plugin/dolphinscheduler-task-shell/src/main/java/org/apache/dolphinscheduler/plugin/task/shell/ShellTask.java
Patch:
@@ -22,6 +22,7 @@
 
 import org.apache.dolphinscheduler.plugin.task.api.AbstractTaskExecutor;
 import org.apache.dolphinscheduler.plugin.task.api.ShellCommandExecutor;
+import org.apache.dolphinscheduler.plugin.task.api.TaskConstants;
 import org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContext;
 import org.apache.dolphinscheduler.plugin.task.api.model.Property;
 import org.apache.dolphinscheduler.plugin.task.api.model.TaskResponse;
@@ -95,7 +96,7 @@ public void handle() throws Exception {
             String command = buildCommand();
             TaskResponse commandExecuteResult = shellCommandExecutor.run(command);
             setExitStatusCode(commandExecuteResult.getExitStatusCode());
-            setAppIds(commandExecuteResult.getAppIds());
+            setAppIds(String.join(TaskConstants.COMMA, getApplicationIds()));
             setProcessId(commandExecuteResult.getProcessId());
             shellParameters.dealOutParam(shellCommandExecutor.getVarPool());
         } catch (Exception e) {

File: dolphinscheduler-worker/src/main/java/org/apache/dolphinscheduler/server/worker/processor/TaskKillProcessor.java
Patch:
@@ -107,6 +107,8 @@ public void process(Channel channel, Command command) {
             return;
         }
 
+        // if processId > 0, it should call cancelApplication to cancel remote application too.
+        this.cancelApplication(taskInstanceId);
         Pair<Boolean, List<String>> result = doKill(taskExecutionContext);
 
         taskExecutionContext.setCurrentExecutionStatus(

File: dolphinscheduler-common/src/test/java/org/apache/dolphinscheduler/common/utils/ParameterUtilsTest.java
Patch:
@@ -17,10 +17,11 @@
 
 package org.apache.dolphinscheduler.common.utils;
 
-import static org.apache.dolphinscheduler.common.utils.placeholder.TimePlaceholderUtils.replacePlaceholders;
+
+import static org.apache.dolphinscheduler.plugin.task.api.parser.TimePlaceholderUtils.replacePlaceholders;
 
 import org.apache.dolphinscheduler.common.Constants;
-import org.apache.dolphinscheduler.common.utils.placeholder.PlaceholderUtils;
+import org.apache.dolphinscheduler.plugin.task.api.parser.PlaceholderUtils;
 
 import java.text.ParseException;
 import java.util.Date;

File: dolphinscheduler-common/src/test/java/org/apache/dolphinscheduler/common/utils/placeholder/TimePlaceholderUtilsTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.dolphinscheduler.common.utils.placeholder;
 
 import org.apache.dolphinscheduler.common.utils.DateUtils;
+import org.apache.dolphinscheduler.plugin.task.api.parser.TimePlaceholderUtils;
 
 import java.util.Date;
 import java.util.TimeZone;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/security/impl/AbstractAuthenticator.java
Patch:
@@ -41,7 +41,7 @@ public abstract class AbstractAuthenticator implements Authenticator {
     private static final Logger logger = LoggerFactory.getLogger(AbstractAuthenticator.class);
 
     @Autowired
-    private UsersService userService;
+    protected UsersService userService;
 
     @Autowired
     private SessionService sessionService;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/permission/ResourcePermissionCheckServiceImpl.java
Patch:
@@ -433,7 +433,8 @@ public boolean permissionCheck(int userId, String url, Logger logger) {
 
         @Override
         public Set<Integer> listAuthorizedResource(int userId, Logger logger) {
-            return alertGroupMapper.listAuthorizedAlertGroupList(userId, null).stream().map(AlertGroup::getId).collect(toSet());
+            List<AlertGroup> alertGroupList = alertGroupMapper.queryAllGroupList();
+            return alertGroupList.stream().map(AlertGroup::getId).collect(toSet());
         }
     }
 

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskGroupQueue.java
Patch:
@@ -38,7 +38,7 @@ public class TaskGroupQueue implements Serializable {
     @TableId(value = "id", type = IdType.AUTO)
     private int id;
     /**
-     * taskIntanceid
+     * taskInstanceId
      */
     private int taskId;
     /**
@@ -65,7 +65,7 @@ public class TaskGroupQueue implements Serializable {
      */
     private int groupId;
     /**
-     * processInstace id
+     * processInstance id
      */
     private int processId;
     /**

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/TaskGroupMapper.java
Patch:
@@ -74,6 +74,9 @@ IPage<TaskGroup> queryTaskGroupPaging(IPage<TaskGroup> page, @Param("ids") List<
      */
     TaskGroup queryByName(@Param("userId") int userId, @Param("name") String name);
 
+    /**
+     * Select the groupSize > useSize Count
+     */
     int selectAvailableCountById(@Param("groupId") int groupId);
 
     int selectCountByIdStatus(@Param("id") int id,@Param("status") int status);

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/TaskGroupQueueMapper.java
Patch:
@@ -74,6 +74,9 @@ IPage<TaskGroupQueue> queryTaskGroupQueuePaging(IPage<TaskGroupQueue> page,
      */
     int updateStatusByTaskId(@Param("taskId") int taskId, @Param("status") int status);
 
+    /**
+     * Query the {@link TaskGroupQueue}, who's priority > the given <code>priority</code>
+     */
     List<TaskGroupQueue> queryHighPriorityTasks(@Param("groupId") int groupId, @Param("priority") int priority, @Param("status") int status);
 
     TaskGroupQueue queryTheHighestPriorityTasks(@Param("groupId") int groupId, @Param("status") int status,

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/event/TaskStateEventHandler.java
Patch:
@@ -63,6 +63,7 @@ public boolean handleStateEvent(WorkflowExecuteRunnable workflowExecuteRunnable,
             }
             workflowExecuteRunnable.taskFinished(task);
             if (task.getTaskGroupId() > 0) {
+                logger.info("The task instance need to release task Group: {}", task.getTaskGroupId());
                 workflowExecuteRunnable.releaseTaskGroup(task);
             }
             return true;

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessService.java
Patch:
@@ -273,9 +273,7 @@ boolean acquireTaskGroup(int taskId,
                              String taskName, int groupId,
                              int processId, int priority);
 
-    boolean robTaskGroupResouce(TaskGroupQueue taskGroupQueue);
-
-    boolean acquireTaskGroupAgain(TaskGroupQueue taskGroupQueue);
+    boolean robTaskGroupResource(TaskGroupQueue taskGroupQueue);
 
     void releaseAllTaskGroup(int processInstanceId);
 

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessService.java
Patch:
@@ -299,4 +299,6 @@ void sendStartTask2Master(ProcessInstance processInstance, int taskId,
     ProcessInstance loadNextProcess4Serial(long code, int state, int id);
 
     public String findConfigYamlByName(String clusterName) ;
+
+    void forceProcessInstanceSuccessByTaskInstanceId(Integer taskInstanceId);
 }

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/TaskExecutionContext.java
Patch:
@@ -218,7 +218,8 @@ public class TaskExecutionContext implements Serializable {
     private ExecutionStatus currentExecutionStatus;
 
     /**
-     *  Task Logger name should be like: Task-{processDefinitionId}-{processInstanceId}-{taskInstanceId}
+     * Task Logger name should be like:
+     * TaskAppId=TASK-{firstSubmitTime}-{processDefineCode}_{processDefineVersion}-{processInstanceId}-{taskInstanceId}
      */
     private String taskLogName;
 

File: dolphinscheduler-worker/src/main/java/org/apache/dolphinscheduler/server/worker/runner/TaskExecuteThread.java
Patch:
@@ -298,10 +298,10 @@ public void downloadResource(String execLocalPath, Logger logger, List<Pair<Stri
                 // query the tenant code of the resource according to the name of the resource
                 String fullName = fileDownload.getLeft();
                 String tenantCode = fileDownload.getRight();
-                String resHdfsPath = storageOperate.getResourceFileName(tenantCode, fullName);
-                logger.info("get resource file from hdfs :{}", resHdfsPath);
+                String resPath = storageOperate.getResourceFileName(tenantCode, fullName);
+                logger.info("get resource file from path:{}", resPath);
                 long resourceDownloadStartTime = System.currentTimeMillis();
-                storageOperate.download(tenantCode, resHdfsPath, execLocalPath + File.separator + fullName, false, true);
+                storageOperate.download(tenantCode, resPath, execLocalPath + File.separator + fullName, false, true);
                 WorkerServerMetrics.recordWorkerResourceDownloadTime(System.currentTimeMillis() - resourceDownloadStartTime);
                 WorkerServerMetrics.recordWorkerResourceDownloadSize(
                         Files.size(Paths.get(execLocalPath, fullName)));

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/permission/ResourcePermissionCheckService.java
Patch:
@@ -51,7 +51,7 @@ public interface ResourcePermissionCheckService<T>{
      * @param logger
      * @return
      */
-    boolean operationPermissionCheck(Object authorizationType, Integer userId, String permissionKey, Logger logger);
+    boolean operationPermissionCheck(Object authorizationType, Object[] projectIds, Integer userId, String permissionKey, Logger logger);
 
     /**
      * functionDisabled

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/permission/ResourcePermissionCheckServiceImpl.java
Patch:
@@ -113,7 +113,7 @@ public boolean resourcePermissionCheck(Object authorizationType, Object[] needCh
     }
 
     @Override
-    public boolean operationPermissionCheck(Object authorizationType, Integer userId, String permissionKey, Logger logger) {
+    public boolean operationPermissionCheck(Object authorizationType, Object[] projectIds, Integer userId, String permissionKey, Logger logger) {
         User user = processService.getUserById(userId);
         if (user == null) {
             logger.error("user id {} doesn't exist", userId);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/BaseServiceImpl.java
Patch:
@@ -174,7 +174,7 @@ public boolean canOperator(User operateUser, int createUserId) {
      */
     @Override
     public boolean canOperatorPermissions(User user, Object[] ids,AuthorizationType type,String permissionKey) {
-        boolean operationPermissionCheck = resourcePermissionCheckService.operationPermissionCheck(type, user.getId(), permissionKey, logger);
+        boolean operationPermissionCheck = resourcePermissionCheckService.operationPermissionCheck(type, type.equals(AuthorizationType.PROJECTS) ? ids : null, user.getId(), permissionKey, logger);
         boolean resourcePermissionCheck = resourcePermissionCheckService.resourcePermissionCheck(type, ids, user.getUserType().equals(UserType.ADMIN_USER) ? 0 : user.getId(), logger);
         return operationPermissionCheck && resourcePermissionCheck;
     }

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/permission/ResourcePermissionCheckServiceTest.java
Patch:
@@ -80,9 +80,9 @@ public void testOperationPermissionCheck(){
         User user = new User();
         user.setId(1);
         resourcePermissionCheckServices.setApplicationContext(context);
-        Assert.assertFalse(resourcePermissionCheckService.operationPermissionCheck(AuthorizationType.PROJECTS, user.getId(), null, logger));
+        Assert.assertFalse(resourcePermissionCheckService.operationPermissionCheck(AuthorizationType.PROJECTS, null, user.getId(), null, logger));
         String sourceUrl = "/tmp/";
-        Assert.assertFalse(resourcePermissionCheckService.operationPermissionCheck(AuthorizationType.PROJECTS, user.getId(), sourceUrl, logger));
+        Assert.assertFalse(resourcePermissionCheckService.operationPermissionCheck(AuthorizationType.PROJECTS, null, user.getId(), sourceUrl, logger));
     }
 
     @Test

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/AccessTokenServiceTest.java
Patch:
@@ -141,7 +141,7 @@ public void testDelAccessTokenById() {
         User userLogin = new User();
         userLogin.setId(1);
         userLogin.setUserType(UserType.ADMIN_USER);
-        Mockito.when(resourcePermissionCheckService.operationPermissionCheck(AuthorizationType.ACCESS_TOKEN, 1, ACCESS_TOKEN_DELETE, baseServiceLogger)).thenReturn(true);
+        Mockito.when(resourcePermissionCheckService.operationPermissionCheck(AuthorizationType.ACCESS_TOKEN, null, 1, ACCESS_TOKEN_DELETE, baseServiceLogger)).thenReturn(true);
         Mockito.when(resourcePermissionCheckService.resourcePermissionCheck(AuthorizationType.ACCESS_TOKEN, null, 0, baseServiceLogger)).thenReturn(true);
         // not exist
         Map<String, Object> result = accessTokenService.delAccessTokenById(userLogin, 0);
@@ -166,7 +166,7 @@ public void testUpdateToken() {
         User user = new User();
         user.setId(1);
         user.setUserType(UserType.ADMIN_USER);
-        Mockito.when(resourcePermissionCheckService.operationPermissionCheck(AuthorizationType.ACCESS_TOKEN, 1, ACCESS_TOKEN_UPDATE, baseServiceLogger)).thenReturn(true);
+        Mockito.when(resourcePermissionCheckService.operationPermissionCheck(AuthorizationType.ACCESS_TOKEN, null, 1, ACCESS_TOKEN_UPDATE, baseServiceLogger)).thenReturn(true);
         Mockito.when(resourcePermissionCheckService.resourcePermissionCheck(AuthorizationType.ACCESS_TOKEN, null, 0, baseServiceLogger)).thenReturn(true);
         // Given Token
         when(accessTokenMapper.selectById(1)).thenReturn(getEntity());

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/AlertPluginInstanceServiceTest.java
Patch:
@@ -169,7 +169,7 @@ public void before() {
     @Test
     public void testCreate() {
         Mockito.when(alertPluginInstanceMapper.existInstanceName("test")).thenReturn(true);
-        Mockito.when(resourcePermissionCheckService.operationPermissionCheck(AuthorizationType.ALERT_PLUGIN_INSTANCE, 1, ALART_INSTANCE_CREATE, baseServiceLogger)).thenReturn(true);
+        Mockito.when(resourcePermissionCheckService.operationPermissionCheck(AuthorizationType.ALERT_PLUGIN_INSTANCE, null, 1, ALART_INSTANCE_CREATE, baseServiceLogger)).thenReturn(true);
         Mockito.when(resourcePermissionCheckService.resourcePermissionCheck(AuthorizationType.ALERT_PLUGIN_INSTANCE, null, 0, baseServiceLogger)).thenReturn(true);
         Map<String, Object> result = alertPluginInstanceService.create(user, 1, "test", uiParams);
         Assert.assertEquals(Status.PLUGIN_INSTANCE_ALREADY_EXIT, result.get(Constants.STATUS));
@@ -183,7 +183,7 @@ public void testCreate() {
     public void testDelete() {
         List<String> ids = Arrays.asList("11,2,3", null, "98,1");
         Mockito.when(alertGroupMapper.queryInstanceIdsList()).thenReturn(ids);
-        Mockito.when(resourcePermissionCheckService.operationPermissionCheck(AuthorizationType.ALERT_PLUGIN_INSTANCE, 1, ALERT_PLUGIN_DELETE, baseServiceLogger)).thenReturn(true);
+        Mockito.when(resourcePermissionCheckService.operationPermissionCheck(AuthorizationType.ALERT_PLUGIN_INSTANCE, null, 1, ALERT_PLUGIN_DELETE, baseServiceLogger)).thenReturn(true);
         Mockito.when(resourcePermissionCheckService.resourcePermissionCheck(AuthorizationType.ALERT_PLUGIN_INSTANCE, null, 0, baseServiceLogger)).thenReturn(true);
         Map<String, Object> result = alertPluginInstanceService.delete(user, 1);
         Assert.assertEquals(Status.DELETE_ALERT_PLUGIN_INSTANCE_ERROR_HAS_ALERT_GROUP_ASSOCIATED, result.get(Constants.STATUS));
@@ -196,7 +196,7 @@ public void testDelete() {
     @Test
     public void testUpdate() {
         Mockito.when(alertPluginInstanceMapper.updateById(Mockito.any())).thenReturn(0);
-        Mockito.when(resourcePermissionCheckService.operationPermissionCheck(AuthorizationType.ALERT_PLUGIN_INSTANCE, 1, ALERT_PLUGIN_UPDATE, baseServiceLogger)).thenReturn(true);
+        Mockito.when(resourcePermissionCheckService.operationPermissionCheck(AuthorizationType.ALERT_PLUGIN_INSTANCE, null, 1, ALERT_PLUGIN_UPDATE, baseServiceLogger)).thenReturn(true);
         Mockito.when(resourcePermissionCheckService.resourcePermissionCheck(AuthorizationType.ALERT_PLUGIN_INSTANCE, null, 0, baseServiceLogger)).thenReturn(true);
         Map<String, Object> result = alertPluginInstanceService.update(user, 1, "testUpdate", uiParams);
         Assert.assertEquals(Status.SAVE_ERROR, result.get(Constants.STATUS));

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/DqExecuteResultServiceTest.java
Patch:
@@ -79,7 +79,7 @@ public void testQueryResultListPaging() {
         User loginUser = new User();
         loginUser.setId(1);
         loginUser.setUserType(UserType.ADMIN_USER);
-        Mockito.when(resourcePermissionCheckService.operationPermissionCheck(AuthorizationType.DATA_QUALITY, loginUser.getId(), null, baseServiceLogger)).thenReturn(true);
+        Mockito.when(resourcePermissionCheckService.operationPermissionCheck(AuthorizationType.DATA_QUALITY, null, loginUser.getId(), null, baseServiceLogger)).thenReturn(true);
         Mockito.when(resourcePermissionCheckService.resourcePermissionCheck(AuthorizationType.DATA_QUALITY, null, 0, baseServiceLogger)).thenReturn(true);
         Page<DqExecuteResult> page = new Page<>(1, 10);
         page.setTotal(1);

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/DqRuleServiceTest.java
Patch:
@@ -134,7 +134,7 @@ public void testQueryRuleListPaging() {
         User loginUser = new User();
         loginUser.setId(1);
         loginUser.setUserType(UserType.ADMIN_USER);
-        Mockito.when(resourcePermissionCheckService.operationPermissionCheck(AuthorizationType.DATA_QUALITY, loginUser.getId(), null, baseServiceLogger)).thenReturn(true);
+        Mockito.when(resourcePermissionCheckService.operationPermissionCheck(AuthorizationType.DATA_QUALITY, null, loginUser.getId(), null, baseServiceLogger)).thenReturn(true);
         Mockito.when(resourcePermissionCheckService.resourcePermissionCheck(AuthorizationType.DATA_QUALITY, null, 0, baseServiceLogger)).thenReturn(true);
         Page<DqRule> page = new Page<>(1, 10);
         page.setTotal(1);

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/MonitorServiceTest.java
Patch:
@@ -129,7 +129,7 @@ public  void testGetServerListFromZK() {
     }
 
     private void mockPermissionCheck(String permissionKey, boolean result){
-        Mockito.when(resourcePermissionCheckService.operationPermissionCheck(AuthorizationType.MONITOR, 1, permissionKey, serviceLogger)).thenReturn(result);
+        Mockito.when(resourcePermissionCheckService.operationPermissionCheck(AuthorizationType.MONITOR, null, 1, permissionKey, serviceLogger)).thenReturn(result);
         Mockito.when(resourcePermissionCheckService.resourcePermissionCheck(AuthorizationType.MONITOR, null, 0, serviceLogger)).thenReturn(true);
     }
 

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/QueueServiceTest.java
Patch:
@@ -124,7 +124,7 @@ public void testQueryListPage() {
 
     @Test
     public void testCreateQueue() {
-        Mockito.when(resourcePermissionCheckService.operationPermissionCheck(AuthorizationType.QUEUE, getLoginUser().getId(), YARN_QUEUE_CREATE, baseServiceLogger)).thenReturn(true);
+        Mockito.when(resourcePermissionCheckService.operationPermissionCheck(AuthorizationType.QUEUE, null, getLoginUser().getId(), YARN_QUEUE_CREATE, baseServiceLogger)).thenReturn(true);
         Mockito.when(resourcePermissionCheckService.resourcePermissionCheck(AuthorizationType.QUEUE, null, 0, baseServiceLogger)).thenReturn(true);
 
         // queue is null
@@ -147,7 +147,7 @@ public void testUpdateQueue() {
         Mockito.when(queueMapper.selectById(1)).thenReturn(getQUEUE());
         Mockito.when(queueMapper.existQueue(EXISTS, null)).thenReturn(true);
         Mockito.when(queueMapper.existQueue(null, EXISTS)).thenReturn(true);
-        Mockito.when(resourcePermissionCheckService.operationPermissionCheck(AuthorizationType.QUEUE, getLoginUser().getId(), YARN_QUEUE_UPDATE, baseServiceLogger)).thenReturn(true);
+        Mockito.when(resourcePermissionCheckService.operationPermissionCheck(AuthorizationType.QUEUE, null, getLoginUser().getId(), YARN_QUEUE_UPDATE, baseServiceLogger)).thenReturn(true);
         Mockito.when(resourcePermissionCheckService.resourcePermissionCheck(AuthorizationType.QUEUE, new Object[]{0}, 0, baseServiceLogger)).thenReturn(true);
 
         // not exist

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/TenantServiceTest.java
Patch:
@@ -106,7 +106,7 @@ public void testCreateTenant() throws Exception {
 
         User loginUser = getLoginUser();
         Mockito.when(tenantMapper.existTenant(tenantCode)).thenReturn(true);
-        Mockito.when(resourcePermissionCheckService.operationPermissionCheck(AuthorizationType.TENANT, loginUser.getId(), TENANT_CREATE, baseServiceLogger)).thenReturn(true);
+        Mockito.when(resourcePermissionCheckService.operationPermissionCheck(AuthorizationType.TENANT, null, loginUser.getId(), TENANT_CREATE, baseServiceLogger)).thenReturn(true);
         Mockito.when(resourcePermissionCheckService.resourcePermissionCheck(AuthorizationType.TENANT, null, 0, baseServiceLogger)).thenReturn(true);
         Map<String, Object> result;
 
@@ -169,7 +169,7 @@ public void testQueryTenantListPage() {
     @Test
     public void testUpdateTenant() throws Exception {
         Mockito.when(tenantMapper.queryById(1)).thenReturn(getTenant());
-        Mockito.when(resourcePermissionCheckService.operationPermissionCheck(AuthorizationType.TENANT, getLoginUser().getId(), TENANT_UPDATE, baseServiceLogger)).thenReturn(true);
+        Mockito.when(resourcePermissionCheckService.operationPermissionCheck(AuthorizationType.TENANT, null, getLoginUser().getId(), TENANT_UPDATE, baseServiceLogger)).thenReturn(true);
         Mockito.when(resourcePermissionCheckService.resourcePermissionCheck(AuthorizationType.TENANT, null, 0, baseServiceLogger)).thenReturn(true);
 
         // update not exists tenant
@@ -187,7 +187,7 @@ public void testUpdateTenant() throws Exception {
 
     @Test
     public void testDeleteTenantById() throws Exception {
-        Mockito.when(resourcePermissionCheckService.operationPermissionCheck(AuthorizationType.TENANT, getLoginUser().getId(), TENANT_DELETE, baseServiceLogger)).thenReturn(true);
+        Mockito.when(resourcePermissionCheckService.operationPermissionCheck(AuthorizationType.TENANT, null, getLoginUser().getId(), TENANT_DELETE, baseServiceLogger)).thenReturn(true);
         Mockito.when(resourcePermissionCheckService.resourcePermissionCheck(AuthorizationType.TENANT, null, 0, baseServiceLogger)).thenReturn(true);
         Mockito.when(tenantMapper.queryById(1)).thenReturn(getTenant());
         Mockito.when(processInstanceMapper.queryByTenantIdAndStatus(1, Constants.NOT_TERMINATED_STATES))

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/UsersServiceTest.java
Patch:
@@ -253,14 +253,14 @@ public void testQueryUserList() {
         user.setId(1);
 
         //no operate
-        Mockito.when(resourcePermissionCheckService.operationPermissionCheck(AuthorizationType.ACCESS_TOKEN, 1, USER_MANAGER, serviceLogger)).thenReturn(true);
+        Mockito.when(resourcePermissionCheckService.operationPermissionCheck(AuthorizationType.ACCESS_TOKEN,null, 1, USER_MANAGER, serviceLogger)).thenReturn(true);
         Mockito.when(resourcePermissionCheckService.resourcePermissionCheck(AuthorizationType.ACCESS_TOKEN, null, 0, serviceLogger)).thenReturn(false);
         Map<String, Object> result = usersService.queryUserList(user);
         logger.info(result.toString());
         Assert.assertEquals(Status.USER_NO_OPERATION_PERM, result.get(Constants.STATUS));
 
         //success
-        Mockito.when(resourcePermissionCheckService.operationPermissionCheck(AuthorizationType.ACCESS_TOKEN, 1, USER_MANAGER, serviceLogger)).thenReturn(true);
+        Mockito.when(resourcePermissionCheckService.operationPermissionCheck(AuthorizationType.ACCESS_TOKEN,null, 1, USER_MANAGER, serviceLogger)).thenReturn(true);
         Mockito.when(resourcePermissionCheckService.resourcePermissionCheck(AuthorizationType.ACCESS_TOKEN, null, 0, serviceLogger)).thenReturn(true);
         user.setUserType(UserType.ADMIN_USER);
         when(userMapper.selectList(null)).thenReturn(getUserList());

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProcessDefinitionServiceImpl.java
Patch:
@@ -1232,7 +1232,7 @@ protected boolean checkAndImport(User loginUser, long projectCode, Map<String, O
         List<TaskDefinitionLog> taskDefinitionLogList = new ArrayList<>();
         for (TaskDefinition taskDefinition : taskDefinitionList) {
             TaskDefinitionLog taskDefinitionLog = new TaskDefinitionLog(taskDefinition);
-            taskDefinitionLog.setName(taskDefinitionLog.getName() + "_import_" + DateUtils.getCurrentTimeStamp());
+            taskDefinitionLog.setName(taskDefinitionLog.getName());
             taskDefinitionLog.setProjectCode(projectCode);
             taskDefinitionLog.setUserId(loginUser.getId());
             taskDefinitionLog.setVersion(Constants.VERSION_FIRST);
@@ -1824,7 +1824,7 @@ protected void doBatchOperateProcessDefinition(User loginUser,
                     }
                     taskDefinitionLog.setProjectCode(targetProjectCode);
                     taskDefinitionLog.setVersion(0);
-                    taskDefinitionLog.setName(taskDefinitionLog.getName() + "_copy_" + DateUtils.getCurrentTimeStamp());
+                    taskDefinitionLog.setName(taskDefinitionLog.getName());
                 }
                 for (ProcessTaskRelationLog processTaskRelationLog : taskRelationList) {
                     if (processTaskRelationLog.getPreTaskCode() > 0) {

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/LoggerService.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.dolphinscheduler.api.service;
 
 import org.apache.dolphinscheduler.api.utils.Result;
+import org.apache.dolphinscheduler.dao.entity.ResponseTaskLog;
 import org.apache.dolphinscheduler.dao.entity.User;
 
 import java.util.Map;
@@ -35,7 +36,7 @@ public interface LoggerService {
      * @param limit limit
      * @return log string data
      */
-    Result<String> queryLog(int taskInstId, int skipLineNum, int limit);
+    Result<ResponseTaskLog> queryLog(int taskInstId, int skipLineNum, int limit);
 
 
     /**

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProcessInstanceServiceImpl.java
Patch:
@@ -53,6 +53,7 @@
 import org.apache.dolphinscheduler.dao.entity.ProcessInstance;
 import org.apache.dolphinscheduler.dao.entity.ProcessTaskRelationLog;
 import org.apache.dolphinscheduler.dao.entity.Project;
+import org.apache.dolphinscheduler.dao.entity.ResponseTaskLog;
 import org.apache.dolphinscheduler.dao.entity.TaskDefinition;
 import org.apache.dolphinscheduler.dao.entity.TaskDefinitionLog;
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
@@ -352,10 +353,10 @@ public Map<String, Object> queryTaskListByProcessId(User loginUser, long project
     private void addDependResultForTaskList(List<TaskInstance> taskInstanceList) throws IOException {
         for (TaskInstance taskInstance : taskInstanceList) {
             if (TASK_TYPE_DEPENDENT.equalsIgnoreCase(taskInstance.getTaskType())) {
-                Result<String> logResult = loggerService.queryLog(
+                Result<ResponseTaskLog> logResult = loggerService.queryLog(
                     taskInstance.getId(), Constants.LOG_QUERY_SKIP_LINE_NUMBER, Constants.LOG_QUERY_LIMIT);
                 if (logResult.getCode() == Status.SUCCESS.ordinal()) {
-                    String log = logResult.getData();
+                    String log = logResult.getData().getMessage();
                     Map<String, DependResult> resultMap = parseLogForDependentResult(log);
                     taskInstance.setDependentResult(JSONUtils.toJsonString(resultMap));
                 }

File: dolphinscheduler-spi/src/main/java/org/apache/dolphinscheduler/spi/datasource/DataSourceClient.java
Patch:
@@ -19,10 +19,11 @@
 
 import java.sql.Connection;
 
-public interface DataSourceClient {
+public interface DataSourceClient extends AutoCloseable {
 
     void checkClient();
 
+    @Override
     void close();
 
     Connection getConnection();

File: dolphinscheduler-e2e/dolphinscheduler-e2e-case/src/test/java/org/apache/dolphinscheduler/e2e/pages/resource/FileManagePage.java
Patch:
@@ -186,7 +186,7 @@ public FileManagePage editFile(String fileName, String scripts) {
 
         new WebDriverWait(driver, 5).until(ExpectedConditions.urlContains("/edit"));
 
-        new WebDriverWait(driver, 5).until((ExpectedCondition<Object>) webDriver -> editor.getText().length() > 0);
+        new WebDriverWait(driver, 5).until(ExpectedConditions.textToBePresentInElement(driver.findElementByTagName("body"), fileName));
 
         editFileBox().codeEditor().content(scripts);
         editFileBox().buttonSubmit().click();

File: dolphinscheduler-e2e/dolphinscheduler-e2e-case/src/test/java/org/apache/dolphinscheduler/e2e/pages/common/NavBarPage.java
Patch:
@@ -17,6 +17,7 @@
  * under the License.
  *
  */
+
 package org.apache.dolphinscheduler.e2e.pages.common;
 
 import org.apache.dolphinscheduler.e2e.pages.datasource.DataSourcePage;
@@ -28,7 +29,6 @@
 import org.openqa.selenium.WebElement;
 import org.openqa.selenium.remote.RemoteWebDriver;
 import org.openqa.selenium.support.FindBy;
-import org.openqa.selenium.support.FindBys;
 import org.openqa.selenium.support.PageFactory;
 import org.openqa.selenium.support.ui.ExpectedConditions;
 import org.openqa.selenium.support.ui.WebDriverWait;
@@ -75,7 +75,7 @@ public <T extends NavBarItem> T goToNav(Class<T> nav) {
 
         if (nav == ResourcePage.class) {
             new WebDriverWait(driver, 60).until(ExpectedConditions.elementToBeClickable(resourceTab));
-            resourceTab.click();
+            ((JavascriptExecutor) driver).executeScript("arguments[0].click();", resourceTab());
             return nav.cast(new ResourcePage(driver));
         }
 

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/AccessTokenMapper.java
Patch:
@@ -37,13 +37,13 @@ public interface AccessTokenMapper extends BaseMapper<AccessToken> {
      * access token page
      *
      * @param page page
-     * @param tokenIds tokenIds
+     * @param userId userId
      * @param userName userName
      * @return access token Ipage
      */
     IPage<AccessToken> selectAccessTokenPage(Page page,
-                                             @Param("ids") List<Integer> tokenIds,
-                                             @Param("userName") String userName
+                                             @Param("userName") String userName,
+                                             @Param("userId") int userId
     );
 
     /**

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/Constants.java
Patch:
@@ -50,6 +50,7 @@ private Constants() {
     public static final String REGISTRY_DOLPHINSCHEDULER_LOCK_FAILOVER_MASTERS = "/lock/failover/masters";
     public static final String REGISTRY_DOLPHINSCHEDULER_LOCK_FAILOVER_WORKERS = "/lock/failover/workers";
     public static final String REGISTRY_DOLPHINSCHEDULER_LOCK_FAILOVER_STARTUP_MASTERS = "/lock/failover/startup-masters";
+
     public static final String FORMAT_SS = "%s%s";
     public static final String FORMAT_S_S = "%s/%s";
     public static final String FORMAT_S_S_COLON = "%s:%s";

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterSchedulerBootstrap.java
Patch:
@@ -58,7 +58,7 @@
  * Master scheduler thread, this thread will consume the commands from database and trigger processInstance executed.
  */
 @Service
-public class MasterSchedulerBootstrap extends BaseDaemonThread {
+public class MasterSchedulerBootstrap extends BaseDaemonThread implements AutoCloseable {
 
     private static final Logger logger = LoggerFactory.getLogger(MasterSchedulerBootstrap.class);
 
@@ -116,6 +116,7 @@ public synchronized void start() {
         logger.info("Master schedule bootstrap started...");
     }
 
+    @Override
     public void close() {
         logger.info("Master schedule bootstrap stopping...");
         logger.info("Master schedule bootstrap stopped...");

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/bean/SpringApplicationContext.java
Patch:
@@ -24,7 +24,7 @@
 import org.springframework.stereotype.Component;
 
 @Component
-public class SpringApplicationContext implements ApplicationContextAware {
+public class SpringApplicationContext implements ApplicationContextAware, AutoCloseable {
 
     private static ApplicationContext applicationContext;
 
@@ -36,6 +36,7 @@ public void setApplicationContext(ApplicationContext applicationContext) throws
     /**
      * Close this application context, destroying all beans in its bean factory.
      */
+    @Override
     public void close() {
         ((AbstractApplicationContext)applicationContext).close();
     }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ExecutorService.java
Patch:
@@ -44,7 +44,7 @@ public interface ExecutorService {
      * @param processDefinitionCode process definition code
      * @param cronTime cron time
      * @param commandType command type
-     * @param failureStrategy failuer strategy
+     * @param failureStrategy failure strategy
      * @param startNodeList start nodelist
      * @param taskDependType node dependency type
      * @param warningType warning type

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/TenantServiceImpl.java
Patch:
@@ -366,8 +366,8 @@ public Tenant createTenantIfNotExists(String tenantCode, String desc, String que
             return tenantMapper.queryByTenantCode(tenantCode);
         }
 
-        Queue newQueue = queueService.createQueueIfNotExists(queue, queueName);
-        Tenant tenant = new Tenant(tenantCode, desc, newQueue.getId());
+        Queue queueObj = queueService.createQueueIfNotExists(queue, queueName);
+        Tenant tenant = new Tenant(tenantCode, desc, queueObj.getId());
         createTenantValid(tenant);
         tenantMapper.insert(tenant);
         return tenant;

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinition.java
Patch:
@@ -103,7 +103,7 @@ public class TaskDefinition {
     private List<Property> taskParamList;
 
     /**
-     * user define parameter map
+     * user defined parameter map
      */
     @TableField(exist = false)
     private Map<String, String> taskParamMap;

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/processor/TaskExecuteResponseProcessor.java
Patch:
@@ -60,7 +60,9 @@ public void process(Channel channel, Command command) {
 
         TaskExecuteResultCommand taskExecuteResultMessage = JSONUtils.parseObject(command.getBody(),
                                                                                   TaskExecuteResultCommand.class);
-        TaskEvent taskResultEvent = TaskEvent.newResultEvent(taskExecuteResultMessage, channel);
+        TaskEvent taskResultEvent = TaskEvent.newResultEvent(taskExecuteResultMessage,
+                                                             channel,
+                                                             taskExecuteResultMessage.getMessageSenderAddress());
         try {
             LoggerUtils.setWorkflowAndTaskInstanceIDMDC(taskResultEvent.getProcessInstanceId(),
                                                         taskResultEvent.getTaskInstanceId());

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/processor/TaskExecuteRunningProcessor.java
Patch:
@@ -57,7 +57,9 @@ public void process(Channel channel, Command command) {
         TaskExecuteRunningCommand taskExecuteRunningMessage = JSONUtils.parseObject(command.getBody(), TaskExecuteRunningCommand.class);
         logger.info("taskExecuteRunningCommand: {}", taskExecuteRunningMessage);
 
-        TaskEvent taskEvent = TaskEvent.newRunningEvent(taskExecuteRunningMessage, channel);
+        TaskEvent taskEvent = TaskEvent.newRunningEvent(taskExecuteRunningMessage,
+                                                        channel,
+                                                        taskExecuteRunningMessage.getMessageSenderAddress());
         taskEventService.addEvent(taskEvent);
     }
 

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/AccessTokenMapper.java
Patch:
@@ -37,13 +37,13 @@ public interface AccessTokenMapper extends BaseMapper<AccessToken> {
      * access token page
      *
      * @param page page
+     * @param tokenIds tokenIds
      * @param userName userName
-     * @param userId userId
      * @return access token Ipage
      */
     IPage<AccessToken> selectAccessTokenPage(Page page,
-                                             @Param("userName") String userName,
-                                             @Param("userId") int userId
+                                             @Param("ids") List<Integer> tokenIds,
+                                             @Param("userName") String userName
     );
 
     /**

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/WorkflowExecuteRunnable.java
Patch:
@@ -1523,6 +1523,7 @@ private ExecutionStatus getProcessInstanceState(ProcessInstance instance) {
         if (state == ExecutionStatus.READY_BLOCK) {
             ExecutionStatus executionStatus = processReadyBlock();
             logger.info("The workflowInstance is ready to block, the workflowInstance status is {}", executionStatus);
+            return executionStatus;
         }
 
         // waiting thread
@@ -1551,6 +1552,7 @@ private ExecutionStatus getProcessInstanceState(ProcessInstance instance) {
                 executionStatus = ExecutionStatus.SUCCESS;
             }
             logger.info("The workflowInstance is ready to stop, the workflow status is {}", executionStatus);
+            return executionStatus;
         }
 
         // process failure

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/parameters/AbstractParameters.java
Patch:
@@ -30,6 +30,7 @@
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.Objects;
 
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.node.ArrayNode;
@@ -90,9 +91,8 @@ public Map<String, Property> getLocalParametersMap() {
     public Map<String, Property> getInputLocalParametersMap() {
         Map<String, Property> localParametersMaps = new LinkedHashMap<>();
         if (localParams != null) {
-
             for (Property property : localParams) {
-                if (property.getDirect().equals(Direct.IN)) {
+                if (Objects.equals(Direct.IN, property.getDirect())) {
                     localParametersMaps.put(property.getProp(), property);
                 }
             }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProcessDefinitionController.java
Patch:
@@ -208,7 +208,7 @@ public Result verifyProcessDefinitionName(@ApiIgnore @RequestAttribute(value = C
     }
 
     /**
-     * update process definition
+     * update process definition, with whole process definition object including task definition, task relation and location.
      *
      * @param loginUser login user
      * @param projectCode project code
@@ -791,7 +791,7 @@ public Result createEmptyProcessDefinition(@ApiIgnore @RequestAttribute(value =
     }
 
     /**
-     * update process definition basic info
+     * update process definition basic info, not including task definition, task relation and location.
      *
      * @param loginUser login user
      * @param projectCode project code

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProcessDefinitionService.java
Patch:
@@ -158,7 +158,7 @@ Map<String, Object> batchMoveProcessDefinition(User loginUser,
                                                    long targetProjectCode);
 
     /**
-     * update  process definition
+     * update process definition, with whole process definition object including task definition, task relation and location.
      *
      * @param loginUser login user
      * @param projectCode project code
@@ -398,7 +398,7 @@ Map<String, Object> createEmptyProcessDefinition(User loginUser,
                                                      ProcessExecutionTypeEnum executionType);
 
     /**
-     * update process definition basic info
+     * update process definition basic info, not including task definition, task relation and location.
      *
      * @param loginUser login user
      * @param projectCode project code

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/Constants.java
Patch:
@@ -52,6 +52,7 @@ private Constants() {
     public static final String REGISTRY_DOLPHINSCHEDULER_LOCK_FAILOVER_STARTUP_MASTERS = "/lock/failover/startup-masters";
     public static final String FORMAT_SS = "%s%s";
     public static final String FORMAT_S_S = "%s/%s";
+    public static final String FORMAT_S_S_COLON = "%s:%s";
     public static final String FOLDER_SEPARATOR = "/";
 
     public static final String RESOURCE_TYPE_FILE = "resources";

File: dolphinscheduler-task-plugin/dolphinscheduler-task-mlflow/src/main/java/org/apache/dolphinscheduler/plugin/task/mlflow/MlflowTask.java
Patch:
@@ -86,11 +86,11 @@ public void handle() throws Exception {
             // construct process
             String command = buildCommand();
             TaskResponse commandExecuteResult = shellCommandExecutor.run(command);
-            int exitCode = exitStatusCode;
+            int exitCode;
             if (mlflowParameters.getIsDeployDocker()){
                 exitCode = checkDockerHealth();
             }else {
-                exitCode = getExitStatusCode();
+                exitCode = commandExecuteResult.getExitStatusCode();
             }
             setExitStatusCode(exitCode);
             setAppIds(commandExecuteResult.getAppIds());

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/dispatch/executor/NettyExecutorManager.java
Patch:
@@ -88,10 +88,8 @@ public NettyExecutorManager() {
 
     @PostConstruct
     public void init() {
-        this.nettyRemotingClient.registerProcessor(CommandType.TASK_EXECUTE_RESPONSE, taskExecuteResponseProcessor);
-        this.nettyRemotingClient.registerProcessor(CommandType.TASK_EXECUTE_RUNNING, taskExecuteRunningProcessor);
         this.nettyRemotingClient.registerProcessor(CommandType.TASK_KILL_RESPONSE, taskKillResponseProcessor);
-        this.nettyRemotingClient.registerProcessor(CommandType.TASK_RECALL, taskRecallProcessor);
+        this.nettyRemotingClient.registerProcessor(CommandType.TASK_REJECT, taskRecallProcessor);
     }
 
     /**

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/processor/TaskExecuteRunningProcessor.java
Patch:
@@ -54,10 +54,10 @@ public class TaskExecuteRunningProcessor implements NettyRequestProcessor {
     @Override
     public void process(Channel channel, Command command) {
         Preconditions.checkArgument(CommandType.TASK_EXECUTE_RUNNING == command.getType(), String.format("invalid command type : %s", command.getType()));
-        TaskExecuteRunningCommand taskExecuteRunningCommand = JSONUtils.parseObject(command.getBody(), TaskExecuteRunningCommand.class);
-        logger.info("taskExecuteRunningCommand: {}", taskExecuteRunningCommand);
+        TaskExecuteRunningCommand taskExecuteRunningMessage = JSONUtils.parseObject(command.getBody(), TaskExecuteRunningCommand.class);
+        logger.info("taskExecuteRunningCommand: {}", taskExecuteRunningMessage);
 
-        TaskEvent taskEvent = TaskEvent.newRunningEvent(taskExecuteRunningCommand, channel);
+        TaskEvent taskEvent = TaskEvent.newRunningEvent(taskExecuteRunningMessage, channel);
         taskEventService.addEvent(taskEvent);
     }
 

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/processor/TaskRecallProcessor.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.dolphinscheduler.common.utils.LoggerUtils;
 import org.apache.dolphinscheduler.remote.command.Command;
 import org.apache.dolphinscheduler.remote.command.CommandType;
-import org.apache.dolphinscheduler.remote.command.TaskRecallCommand;
+import org.apache.dolphinscheduler.remote.command.TaskRejectCommand;
 import org.apache.dolphinscheduler.remote.processor.NettyRequestProcessor;
 import org.apache.dolphinscheduler.server.master.processor.queue.TaskEvent;
 import org.apache.dolphinscheduler.server.master.processor.queue.TaskEventService;
@@ -54,8 +54,8 @@ public class TaskRecallProcessor implements NettyRequestProcessor {
      */
     @Override
     public void process(Channel channel, Command command) {
-        Preconditions.checkArgument(CommandType.TASK_RECALL == command.getType(), String.format("invalid command type : %s", command.getType()));
-        TaskRecallCommand recallCommand = JSONUtils.parseObject(command.getBody(), TaskRecallCommand.class);
+        Preconditions.checkArgument(CommandType.TASK_REJECT == command.getType(), String.format("invalid command type : %s", command.getType()));
+        TaskRejectCommand recallCommand = JSONUtils.parseObject(command.getBody(), TaskRejectCommand.class);
         TaskEvent taskEvent = TaskEvent.newRecallEvent(recallCommand, channel);
         try {
             LoggerUtils.setWorkflowAndTaskInstanceIDMDC(recallCommand.getProcessInstanceId(), recallCommand.getTaskInstanceId());

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/rpc/MasterRPCServer.java
Patch:
@@ -84,14 +84,14 @@ private void init() {
         NettyServerConfig serverConfig = new NettyServerConfig();
         serverConfig.setListenPort(masterConfig.getListenPort());
         this.nettyRemotingServer = new NettyRemotingServer(serverConfig);
-        this.nettyRemotingServer.registerProcessor(CommandType.TASK_EXECUTE_RESPONSE, taskExecuteResponseProcessor);
         this.nettyRemotingServer.registerProcessor(CommandType.TASK_EXECUTE_RUNNING, taskExecuteRunningProcessor);
+        this.nettyRemotingServer.registerProcessor(CommandType.TASK_EXECUTE_RESULT, taskExecuteResponseProcessor);
         this.nettyRemotingServer.registerProcessor(CommandType.TASK_KILL_RESPONSE, taskKillResponseProcessor);
         this.nettyRemotingServer.registerProcessor(CommandType.STATE_EVENT_REQUEST, stateEventProcessor);
         this.nettyRemotingServer.registerProcessor(CommandType.TASK_FORCE_STATE_EVENT_REQUEST, taskEventProcessor);
         this.nettyRemotingServer.registerProcessor(CommandType.TASK_WAKEUP_EVENT_REQUEST, taskEventProcessor);
         this.nettyRemotingServer.registerProcessor(CommandType.CACHE_EXPIRE, cacheProcessor);
-        this.nettyRemotingServer.registerProcessor(CommandType.TASK_RECALL, taskRecallProcessor);
+        this.nettyRemotingServer.registerProcessor(CommandType.TASK_REJECT, taskRecallProcessor);
         this.nettyRemotingServer.registerProcessor(CommandType.WORKFLOW_EXECUTING_DATA_REQUEST, workflowExecutingDataRequestProcessor);
 
         // logger server

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/StateWheelExecuteThread.java
Patch:
@@ -126,8 +126,6 @@ public void removeProcess4TimeoutCheck(int processInstanceId) {
         boolean removeFlag = processInstanceTimeoutCheckList.remove(processInstanceId);
         if (removeFlag) {
             logger.info("Success remove workflow instance from timeout check list");
-        } else {
-            logger.warn("Failed to remove workflow instance from timeout check list");
         }
     }
 

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/HostUpdateCommand.java
Patch:
@@ -26,9 +26,6 @@
  */
 public class HostUpdateCommand implements Serializable {
 
-    /**
-     * task id
-     */
     private int taskInstanceId;
 
     private String processHost;

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/StateEventResponseCommand.java
Patch:
@@ -61,7 +61,7 @@ public void setKey(String key) {
      */
     public Command convert2Command() {
         Command command = new Command();
-        command.setType(CommandType.TASK_EXECUTE_RESPONSE_ACK);
+        command.setType(CommandType.TASK_EXECUTE_RESULT_ACK);
         byte[] body = JSONUtils.toJsonByteArray(this);
         command.setBody(body);
         return command;

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/TaskExecuteRunningAckMessage.java
Patch:
@@ -25,16 +25,16 @@
  * task execute running ack command
  * from master to worker
  */
-public class TaskExecuteRunningAckCommand implements Serializable {
+public class TaskExecuteRunningAckMessage implements Serializable {
 
     private int taskInstanceId;
     private int status;
 
-    public TaskExecuteRunningAckCommand() {
+    public TaskExecuteRunningAckMessage() {
         super();
     }
 
-    public TaskExecuteRunningAckCommand(int status, int taskInstanceId) {
+    public TaskExecuteRunningAckMessage(int status, int taskInstanceId) {
         this.status = status;
         this.taskInstanceId = taskInstanceId;
     }

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/utils/Host.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.dolphinscheduler.remote.utils;
 
+import lombok.NonNull;
 import static org.apache.dolphinscheduler.common.Constants.COLON;
 
 import java.io.Serializable;
@@ -95,7 +96,7 @@ public void setPort(int port) {
      * @param address address
      * @return host
      */
-    public static Host of(String address) {
+    public static Host of(@NonNull String address) {
         String[] parts = splitAddress(address);
         return new Host(parts[0], Integer.parseInt(parts[1]));
     }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java
Patch:
@@ -216,6 +216,7 @@ public enum Status {
     QUERY_AUTHORIZED_USER(10183, "query authorized user error", "查询拥有项目权限的用户错误"),
     PROJECT_NOT_EXIST(10190, "This project was not found. Please refresh page.", "该项目不存在,请刷新页面"),
     TASK_INSTANCE_HOST_IS_NULL(10191, "task instance host is null", "任务实例host为空"),
+    QUERY_EXECUTING_WORKFLOW_ERROR(10192, "query executing workflow error", "查询运行的工作流实例错误"),
 
     UDF_FUNCTION_NOT_EXIST(20001, "UDF function not found", "UDF函数不存在"),
     UDF_FUNCTION_EXISTS(20002, "UDF function already exists", "UDF函数已存在"),

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/StateEventType.java
Patch:
@@ -21,7 +21,7 @@
 
 public enum StateEventType {
 
-    PROCESS_STATE_CHANGE(0, "process statechange"),
+    PROCESS_STATE_CHANGE(0, "process state change"),
     TASK_STATE_CHANGE(1, "task state change"),
     PROCESS_TIMEOUT(2, "process timeout"),
     TASK_TIMEOUT(3, "task timeout"),

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/TaskEventType.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.dolphinscheduler.common.enums;
 
-public enum Event {
+public enum TaskEventType {
     DISPATCH,
     DELAY,
     RUNNING,

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/TaskRecallCommand.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.dolphinscheduler.remote.command;
 
-import org.apache.dolphinscheduler.common.enums.Event;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
 
 import java.io.Serializable;

File: dolphinscheduler-worker/src/main/java/org/apache/dolphinscheduler/server/worker/cache/ResponseCache.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.dolphinscheduler.server.worker.cache;
 
-import org.apache.dolphinscheduler.common.enums.Event;
+import org.apache.dolphinscheduler.common.enums.TaskEventType;
 import org.apache.dolphinscheduler.remote.command.Command;
 
 import java.util.Map;
@@ -48,7 +48,7 @@ public static ResponseCache get() {
      * @param command command
      * @param event event ACK/RESULT
      */
-    public void cache(Integer taskInstanceId, Command command, Event event) {
+    public void cache(Integer taskInstanceId, Command command, TaskEventType event) {
         switch (event) {
             case RUNNING:
                 runningCache.put(taskInstanceId, command);

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/aspect/AccessLogAspectTest.java
Patch:
@@ -36,7 +36,6 @@ public void testHandleSensitiveData() {
         String actual = accessLogAspect.handleSensitiveData(data);
 
         Assert.assertEquals(expected, actual);
-
     }
 
 }

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/CommandMapper.java
Patch:
@@ -34,14 +34,12 @@ public interface CommandMapper extends BaseMapper<Command> {
 
     /**
      * count command state
-     * @param userId userId
      * @param startTime startTime
      * @param endTime endTime
      * @param projectCodeArray projectCodeArray
      * @return CommandCount list
      */
     List<CommandCount> countCommandState(
-            @Param("userId") int userId,
             @Param("startTime") Date startTime,
             @Param("endTime") Date endTime,
             @Param("projectCodeArray") Long[] projectCodeArray);

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/ErrorCommandMapper.java
Patch:
@@ -34,14 +34,12 @@ public interface ErrorCommandMapper extends BaseMapper<ErrorCommand> {
 
     /**
      * count command state
-     * @param userId
      * @param startTime startTime
      * @param endTime endTime
      * @param projectCodeArray projectCodeArray
      * @return CommandCount list
      */
     List<CommandCount> countCommandState(
-            @Param("userId") int userId,
             @Param("startTime") Date startTime,
             @Param("endTime") Date endTime,
             @Param("projectCodeArray") Long[] projectCodeArray);

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/CommandMapperTest.java
Patch:
@@ -162,7 +162,7 @@ public void testCountCommandState() {
 
         Date endTime = DateUtils.stringToDate("2019-12-29 23:59:59");
 
-        List<CommandCount> actualCommandCounts = commandMapper.countCommandState(0, startTime, endTime, projectCodeArray);
+        List<CommandCount> actualCommandCounts = commandMapper.countCommandState(startTime, endTime, projectCodeArray);
 
         assertThat(actualCommandCounts.size(),greaterThanOrEqualTo(1));
     }

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/ErrorCommandMapperTest.java
Patch:
@@ -77,7 +77,6 @@ public void testQuery() {
         errorCommandMapper.updateById(errorCommand);
 
         List<CommandCount> commandCounts = errorCommandMapper.countCommandState(
-                0,
                 null,
                 null,
                 new Long[0]
@@ -87,7 +86,6 @@ public void testQuery() {
         projectCodeArray[0] = processDefinition.getProjectCode();
         projectCodeArray[1] = 200L;
         List<CommandCount> commandCounts2 = errorCommandMapper.countCommandState(
-                0,
                 null,
                 null,
                 projectCodeArray

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ExecutorServiceImpl.java
Patch:
@@ -986,7 +986,8 @@ private boolean isValidateScheduleTime(String schedule) {
      */
     private String removeDuplicates(String scheduleTimeList) {
         if (StringUtils.isNotEmpty(scheduleTimeList)) {
-            return Arrays.stream(scheduleTimeList.split(COMMA)).map(String::trim).collect(Collectors.joining(COMMA));
+            Set<String> dateSet  = Arrays.stream(scheduleTimeList.split(COMMA)).map(String::trim).collect(Collectors.toSet());
+            return String.join(COMMA, dateSet);
         }
         return null;
     }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/SchedulerServiceImpl.java
Patch:
@@ -72,6 +72,7 @@
 import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
 import com.cronutils.model.Cron;
 
+
 /**
  * scheduler service impl
  */
@@ -555,6 +556,7 @@ public Map<String, Object> previewSchedule(User loginUser, String schedule) {
         Cron cron;
         ScheduleParam scheduleParam = JSONUtils.parseObject(schedule, ScheduleParam.class);
 
+        assert scheduleParam != null;
         ZoneId zoneId = TimeZone.getTimeZone(scheduleParam.getTimezoneId()).toZoneId();
         ZonedDateTime now = ZonedDateTime.now(zoneId);
         ZonedDateTime startTime = ZonedDateTime.ofInstant(scheduleParam.getStartTime().toInstant(), zoneId);
@@ -571,7 +573,7 @@ public Map<String, Object> previewSchedule(User loginUser, String schedule) {
         List<ZonedDateTime> selfFireDateList =
             CronUtils.getSelfFireDateList(startTime, endTime, cron, Constants.PREVIEW_SCHEDULE_EXECUTE_COUNT);
         List<String> previewDateList =
-            selfFireDateList.stream().map(DateUtils::dateToString).collect(Collectors.toList());
+            selfFireDateList.stream().map(t -> DateUtils.dateToString(t, zoneId)).collect(Collectors.toList());
         result.put(Constants.DATA_LIST, previewDateList);
         putMsg(result, Status.SUCCESS);
         return result;

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/SchedulerControllerTest.java
Patch:
@@ -202,7 +202,7 @@ public void testPreviewSchedule() throws Exception {
 
         MvcResult mvcResult = mockMvc.perform(post("/projects/{projectCode}/schedules/preview",123)
                 .header(SESSION_ID, sessionId)
-                .param("schedule","{'startTime':'2019-06-10 00:00:00','endTime':'2019-06-13 00:00:00','crontab':'0 0 3/6 * * ? *'}"))
+                .param("schedule","{'startTime':'2019-06-10 00:00:00','endTime':'2019-06-13 00:00:00','crontab':'0 0 3/6 * * ? *','timezoneId':'Asia/Shanghai'}"))
                 .andExpect(status().isCreated())
                 .andExpect(content().contentType(MediaType.APPLICATION_JSON))
                 .andReturn();

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/WorkflowExecuteRunnable.java
Patch:
@@ -592,7 +592,9 @@ public boolean processComplementData() {
             return false;
         }
 
-        if (processInstance.getState() == ExecutionStatus.READY_STOP) {
+        // when the serial complement is executed, the next complement instance is created,
+        // and this method does not need to be executed when the parallel complement is used.
+        if (processInstance.getState() == ExecutionStatus.READY_STOP || !processInstance.getState().typeIsFinished()) {
             return false;
         }
 

File: dolphinscheduler-master/src/test/java/org/apache/dolphinscheduler/server/master/BlockingTaskTest.java
Patch:
@@ -266,5 +266,4 @@ public void testNoneBlocking() {
         ExecutionStatus status = processInstance.getState();
         Assert.assertEquals(ExecutionStatus.RUNNING_EXECUTION, status);
     }
-
 }

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/dispatch/executor/NettyExecutorManager.java
Patch:
@@ -117,6 +117,9 @@ public Boolean execute(ExecutionContext context) throws ExecuteException {
                 doExecute(host, command);
                 success = true;
                 context.setHost(host);
+                // We set the host to taskInstance to avoid when the worker down, this taskInstance may not be failovered, due to the taskInstance's host
+                // is not belongs to the down worker ISSUE-10842.
+                context.getTaskInstance().setHost(host.getAddress());
             } catch (ExecuteException ex) {
                 logger.error(String.format("execute command : %s error", command), ex);
                 try {

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/registry/MasterRegistryDataListener.java
Patch:
@@ -64,6 +64,7 @@ private void handleMasterEvent(Event event) {
                 break;
             case REMOVE:
                 masterRegistryClient.removeMasterNodePath(path, NodeType.MASTER, true);
+
                 break;
             default:
                 break;

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/FailoverExecuteThread.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.dolphinscheduler.common.thread.ThreadUtils;
 import org.apache.dolphinscheduler.server.master.config.MasterConfig;
 import org.apache.dolphinscheduler.server.master.service.FailoverService;
+import org.apache.dolphinscheduler.server.master.service.MasterFailoverService;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -41,7 +42,7 @@ public class FailoverExecuteThread extends BaseDaemonThread {
      * failover service
      */
     @Autowired
-    private FailoverService failoverService;
+    private MasterFailoverService masterFailoverService;
 
     protected FailoverExecuteThread() {
         super("FailoverExecuteThread");
@@ -63,7 +64,7 @@ public void run() {
             try {
                 // todo: DO we need to schedule a task to do this kind of check
                 // This kind of check may only need to be executed when a master server start
-                failoverService.checkMasterFailover();
+                masterFailoverService.checkMasterFailover();
             } catch (Exception e) {
                 logger.error("Master failover thread execute error", e);
             } finally {

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/task/CommonTaskProcessor.java
Patch:
@@ -67,7 +67,6 @@ protected boolean submitTask() {
                 return true;
             }
         }
-        dispatchTask();
         return true;
     }
 
@@ -119,7 +118,7 @@ public boolean dispatchTask() {
                 logger.info("submit task, but the status of the task {} is already running or delayed.", taskInstance.getName());
                 return true;
             }
-            logger.info("task ready to submit: taskInstanceId: {}", taskInstance.getId());
+            logger.info("task ready to dispatch to worker: taskInstanceId: {}", taskInstance.getId());
 
             TaskPriority taskPriority = new TaskPriority(processInstance.getProcessInstancePriority().getCode(),
                     processInstance.getId(), taskInstance.getProcessInstancePriority().getCode(),
@@ -167,7 +166,7 @@ public boolean killTask() {
             TaskKillRequestCommand killCommand = new TaskKillRequestCommand();
             killCommand.setTaskInstanceId(taskInstance.getId());
 
-            ExecutionContext executionContext = new ExecutionContext(killCommand.convert2Command(), ExecutorType.WORKER);
+            ExecutionContext executionContext = new ExecutionContext(killCommand.convert2Command(), ExecutorType.WORKER, taskInstance);
 
             Host host = Host.of(taskInstance.getHost());
             executionContext.setHost(host);

File: dolphinscheduler-master/src/test/java/org/apache/dolphinscheduler/server/master/dispatch/ExecutionContextTestUtils.java
Patch:
@@ -52,7 +52,7 @@ public static ExecutionContext getExecutionContext(int port) {
         TaskExecuteRequestCommand requestCommand = new TaskExecuteRequestCommand(context);
         Command command = requestCommand.convert2Command();
 
-        ExecutionContext executionContext = new ExecutionContext(command, ExecutorType.WORKER);
+        ExecutionContext executionContext = new ExecutionContext(command, ExecutorType.WORKER, taskInstance);
         executionContext.setHost(Host.of(NetUtils.getAddr(port)));
 
         return executionContext;

File: dolphinscheduler-master/src/test/java/org/apache/dolphinscheduler/server/master/dispatch/executor/NettyExecutorManagerTest.java
Patch:
@@ -70,7 +70,7 @@ public void testExecute() throws ExecuteException {
                 .buildProcessInstanceRelatedInfo(processInstance)
                 .buildProcessDefinitionRelatedInfo(processDefinition)
                 .create();
-        ExecutionContext executionContext = new ExecutionContext(toCommand(context), ExecutorType.WORKER);
+        ExecutionContext executionContext = new ExecutionContext(toCommand(context), ExecutorType.WORKER, taskInstance);
         executionContext.setHost(Host.of(NetUtils.getAddr(serverConfig.getListenPort())));
         Boolean execute = nettyExecutorManager.execute(executionContext);
         Assert.assertTrue(execute);
@@ -89,7 +89,7 @@ public void testExecuteWithException() throws ExecuteException {
                 .buildProcessInstanceRelatedInfo(processInstance)
                 .buildProcessDefinitionRelatedInfo(processDefinition)
                 .create();
-        ExecutionContext executionContext = new ExecutionContext(toCommand(context), ExecutorType.WORKER);
+        ExecutionContext executionContext = new ExecutionContext(toCommand(context), ExecutorType.WORKER, taskInstance);
         executionContext.setHost(Host.of(NetUtils.getAddr(4444)));
         nettyExecutorManager.execute(executionContext);
 

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessService.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.dolphinscheduler.common.graph.DAG;
 import org.apache.dolphinscheduler.common.model.TaskNode;
 import org.apache.dolphinscheduler.common.model.TaskNodeRelation;
+import org.apache.dolphinscheduler.common.utils.CodeGenerateUtils;
 import org.apache.dolphinscheduler.dao.entity.Command;
 import org.apache.dolphinscheduler.dao.entity.DagData;
 import org.apache.dolphinscheduler.dao.entity.DataSource;
@@ -62,7 +63,8 @@
 
 public interface ProcessService {
     @Transactional
-    ProcessInstance handleCommand(String host, Command command) throws CronParseException;
+    ProcessInstance handleCommand(String host, Command command)
+        throws CronParseException, CodeGenerateUtils.CodeGenerateException;
 
     void moveToErrorCommand(Command command, String message);
 

File: dolphinscheduler-service/src/test/java/org/apache/dolphinscheduler/service/process/ProcessServiceTest.java
Patch:
@@ -30,6 +30,7 @@
 import org.apache.dolphinscheduler.common.enums.TaskGroupQueueStatus;
 import org.apache.dolphinscheduler.common.enums.UserType;
 import org.apache.dolphinscheduler.common.enums.WarningType;
+import org.apache.dolphinscheduler.common.utils.CodeGenerateUtils;
 import org.apache.dolphinscheduler.service.exceptions.CronParseException;
 import org.apache.dolphinscheduler.service.expand.CuringParamsService;
 import org.apache.dolphinscheduler.common.graph.DAG;
@@ -285,7 +286,7 @@ public void testCreateRecoveryWaitingThreadCommand() {
     }
 
     @Test
-    public void testHandleCommand() throws CronParseException {
+    public void testHandleCommand() throws CronParseException, CodeGenerateUtils.CodeGenerateException {
 
         //cannot construct process instance, return null;
         String host = "127.0.0.1";
@@ -462,7 +463,7 @@ public void testHandleCommand() throws CronParseException {
     }
 
     @Test(expected = ServiceException.class)
-    public void testDeleteNotExistCommand() throws CronParseException {
+    public void testDeleteNotExistCommand() throws CronParseException, CodeGenerateUtils.CodeGenerateException {
         String host = "127.0.0.1";
         int definitionVersion = 1;
         long definitionCode = 123;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java
Patch:
@@ -194,7 +194,7 @@ public enum Status {
     QUERY_WORKFLOW_LINEAGE_ERROR(10161, "query workflow lineage error", "查询血缘失败"),
     QUERY_AUTHORIZED_AND_USER_CREATED_PROJECT_ERROR(10162, "query authorized and user created project error error", "查询授权的和用户创建的项目错误"),
     DELETE_PROCESS_DEFINITION_BY_CODE_FAIL(10163, "delete process definition by code fail, for there are {0} process instances in executing using it", "删除工作流定义失败，有[{0}]个运行中的工作流实例正在使用"),
-    CHECK_OS_TENANT_CODE_ERROR(10164, "Please enter the English os tenant code", "请输入英文操作系统租户"),
+    CHECK_OS_TENANT_CODE_ERROR(10164, "Tenant code invalid, should follow linux's users naming conventions", "非法的租户名，需要遵守 Linux 用户命名规范"),
     FORCE_TASK_SUCCESS_ERROR(10165, "force task success error", "强制成功任务实例错误"),
     TASK_INSTANCE_STATE_OPERATION_ERROR(10166, "the status of task instance {0} is {1},Cannot perform force success operation", "任务实例[{0}]的状态是[{1}]，无法执行强制成功操作"),
     DATASOURCE_TYPE_NOT_EXIST(10167, "data source type not exist", "数据源类型不存在"),

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/BaseServiceImpl.java
Patch:
@@ -34,8 +34,6 @@
 import org.apache.dolphinscheduler.common.enums.AuthorizationType;
 import org.apache.dolphinscheduler.common.enums.UserType;
 import org.apache.dolphinscheduler.common.utils.DateUtils;
-import org.apache.dolphinscheduler.dao.entity.ProcessDefinition;
-import org.apache.dolphinscheduler.dao.entity.Project;
 import org.apache.dolphinscheduler.dao.entity.User;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: dolphinscheduler-e2e/dolphinscheduler-e2e-case/src/test/java/org/apache/dolphinscheduler/e2e/pages/resource/ResourcePage.java
Patch:
@@ -35,10 +35,10 @@ public class ResourcePage extends NavBarPage implements NavBarPage.NavBarItem {
     @FindBy(css = ".tab-vertical > .n-menu-item:nth-child(1) > .n-menu-item-content")
     private WebElement fileManageTab;
 
-    @FindBy(css = ".tab-vertical .n-submenu:nth-of-type(2) .n-menu-item:nth-of-type(1) > .n-menu-item-content")
+    @FindBy(css = ".tab-vertical .n-submenu:nth-of-type(2) > .n-submenu-children > .n-menu-item:nth-of-type(1) > .n-menu-item-content")
     private WebElement udfManageTab;
 
-    @FindBy(css = ".tab-vertical .n-submenu:nth-of-type(2) .n-menu-item:nth-of-type(2) > .n-menu-item-content")
+    @FindBy(css = ".tab-vertical .n-submenu:nth-of-type(2) > .n-submenu-children > .n-menu-item:nth-of-type(2) > .n-menu-item-content")
     private WebElement functionManageTab;
 
     public ResourcePage(RemoteWebDriver driver) {

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java
Patch:
@@ -423,6 +423,7 @@ public enum Status {
     RESOURCE_FULL_NAME_TOO_LONG_ERROR(1300015, "resource's fullname is too long error", "资源文件名过长"),
     TENANT_FULL_NAME_TOO_LONG_ERROR(1300016, "tenant's fullname is too long error", "租户名过长"),
     USER_PASSWORD_LENGTH_ERROR(1300017, "user's password length error", "用户密码长度错误"),
+    QUERY_CAN_USE_K8S_NAMESPACE_ERROR(1300018, "login user query can used namespace list error", "查询可用命名空间错误"),
 
     NO_CURRENT_OPERATING_PERMISSION(1400001, "The current user does not have this permission.", "当前用户无此权限"),
     FUNCTION_DISABLED(1400002, "The current feature is disabled.", "当前功能已被禁用"),

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/ClusterControllerTest.java
Patch:
@@ -42,7 +42,7 @@
 
 public class ClusterControllerTest extends AbstractControllerTest {
     public static final String clusterName = "Cluster1";
-    public static final String config = "this is config content";
+    public static final String config = "{\"k8s\":\"apiVersion: v1\"}";
     public static final String desc = "this is cluster description";
     private static final Logger logger = LoggerFactory.getLogger(ClusterControllerTest.class);
     private String clusterCode;

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/Constants.java
Patch:
@@ -804,10 +804,10 @@ private Constants() {
      * use for k8s
      */
     public static final String NAMESPACE = "namespace";
-    public static final String K8S = "k8s";
+    public static final String CLUSTER = "cluster";
     public static final String LIMITS_CPU = "limitsCpu";
     public static final String LIMITS_MEMORY = "limitsMemory";
-    public static final String K8S_LOCAL_TEST_CLUSTER = "ds_null_k8s";
+    public static final Long K8S_LOCAL_TEST_CLUSTER_CODE = 0L;
 
     /**
      * schedule timezone

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/K8sNamespaceMapperTest.java
Patch:
@@ -23,7 +23,6 @@
 import java.util.Date;
 import java.util.List;
 
-import org.apache.dolphinscheduler.dao.entity.User;
 import org.junit.After;
 import org.junit.Assert;
 import org.junit.Before;
@@ -46,13 +45,14 @@ public class K8sNamespaceMapperTest extends BaseDaoTest {
     private K8sNamespace insertOne() {
         //insertOne
         K8sNamespace k8sNamespace = new K8sNamespace();
+        k8sNamespace.setCode(999L);
         k8sNamespace.setNamespace("testNamespace");
-        k8sNamespace.setK8s("ds_null_k8s");
+        k8sNamespace.setClusterCode(100L);
+        k8sNamespace.setClusterName("ds_null_k8s");
         k8sNamespace.setLimitsCpu(100.0);
         k8sNamespace.setLimitsMemory(100);
         k8sNamespace.setCreateTime(new Date());
         k8sNamespace.setUpdateTime(new Date());
-        k8sNamespace.setId(1);
         k8sNamespaceMapper.insert(k8sNamespace);
         return k8sNamespace;
     }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ExecutorServiceImpl.java
Patch:
@@ -121,7 +121,7 @@ public class ExecutorServiceImpl extends BaseServiceImpl implements ExecutorServ
     private ProcessService processService;
 
     @Autowired
-    StateEventCallbackService stateEventCallbackService;
+    private StateEventCallbackService stateEventCallbackService;
 
     @Autowired
     private TaskDefinitionMapper taskDefinitionMapper;
@@ -500,6 +500,7 @@ private Map<String, Object> updateProcessInstancePrepare(ProcessInstance process
 
         // determine whether the process is normal
         if (update > 0) {
+            // directly send the process instance state change event to target master, not guarantee the event send success
             StateEventChangeCommand stateEventChangeCommand = new StateEventChangeCommand(
                     processInstance.getId(), 0, processInstance.getState(), processInstance.getId(), 0
             );

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/consumer/TaskPriorityQueueConsumer.java
Patch:
@@ -116,7 +116,9 @@ protected TaskPriorityQueueConsumer() {
     @PostConstruct
     public void init() {
         this.consumerThreadPoolExecutor = (ThreadPoolExecutor) ThreadUtils.newDaemonFixedThreadExecutor("TaskUpdateQueueConsumerThread", masterConfig.getDispatchTaskNumber());
+        logger.info("Task priority queue consume thread staring");
         super.start();
+        logger.info("Task priority queue consume thread started");
     }
 
     @Override

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/dispatch/host/assign/Selector.java
Patch:
@@ -27,7 +27,7 @@ public interface Selector<T> {
 
     /**
      * select
-     * @param source source
+     * @param source source, the given source should not be empty.
      * @return T
      */
     T select(Collection<T> source);

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/event/StateEvent.java
Patch:
@@ -15,8 +15,9 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.common.enums;
+package org.apache.dolphinscheduler.server.master.event;
 
+import org.apache.dolphinscheduler.common.enums.StateEventType;
 import org.apache.dolphinscheduler.plugin.task.api.enums.ExecutionStatus;
 
 import io.netty.channel.Channel;

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/processor/StateEventProcessor.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.dolphinscheduler.server.master.processor;
 
-import org.apache.dolphinscheduler.common.enums.StateEvent;
+import org.apache.dolphinscheduler.server.master.event.StateEvent;
 import org.apache.dolphinscheduler.common.enums.StateEventType;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
 import org.apache.dolphinscheduler.common.utils.LoggerUtils;
@@ -62,7 +62,8 @@ public void process(Channel channel, Command command) {
         }
         stateEvent.setProcessInstanceId(stateEventChangeCommand.getDestProcessInstanceId());
         stateEvent.setTaskInstanceId(stateEventChangeCommand.getDestTaskInstanceId());
-        StateEventType type = stateEvent.getTaskInstanceId() == 0 ? StateEventType.PROCESS_STATE_CHANGE : StateEventType.TASK_STATE_CHANGE;
+        StateEventType
+            type = stateEvent.getTaskInstanceId() == 0 ? StateEventType.PROCESS_STATE_CHANGE : StateEventType.TASK_STATE_CHANGE;
         stateEvent.setType(type);
 
         try {

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/processor/TaskEventProcessor.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.dolphinscheduler.server.master.processor;
 
-import org.apache.dolphinscheduler.common.enums.StateEvent;
+import org.apache.dolphinscheduler.server.master.event.StateEvent;
 import org.apache.dolphinscheduler.common.enums.StateEventType;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
 import org.apache.dolphinscheduler.common.utils.LoggerUtils;

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/processor/queue/StateEventResponseService.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.dolphinscheduler.server.master.processor.queue;
 
-import org.apache.dolphinscheduler.common.enums.StateEvent;
+import org.apache.dolphinscheduler.server.master.event.StateEvent;
 import org.apache.dolphinscheduler.common.thread.BaseDaemonThread;
 import org.apache.dolphinscheduler.common.thread.Stopper;
 import org.apache.dolphinscheduler.common.utils.LoggerUtils;
@@ -98,6 +98,7 @@ public void stop() {
      */
     public void addResponse(StateEvent stateEvent) {
         try {
+            // check the event is validated
             eventQueue.put(stateEvent);
         } catch (InterruptedException e) {
             logger.error("Put state event : {} error", stateEvent, e);

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/processor/queue/TaskExecuteRunnable.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.dolphinscheduler.server.master.processor.queue;
 
 import org.apache.dolphinscheduler.common.enums.Event;
-import org.apache.dolphinscheduler.common.enums.StateEvent;
+import org.apache.dolphinscheduler.server.master.event.StateEvent;
 import org.apache.dolphinscheduler.common.enums.StateEventType;
 import org.apache.dolphinscheduler.common.utils.LoggerUtils;
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
@@ -193,6 +193,7 @@ private void handleRunningEvent(TaskEvent taskEvent, Optional<TaskInstance> task
                 }
             }
             // if taskInstance is null (maybe deleted) or finish. retry will be meaningless . so ack success
+            // send ack to worker
             TaskExecuteRunningAckCommand taskExecuteRunningAckCommand = new TaskExecuteRunningAckCommand(ExecutionStatus.SUCCESS.getCode(), taskEvent.getTaskInstanceId());
             channel.writeAndFlush(taskExecuteRunningAckCommand.convert2Command());
         } catch (Exception e) {

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterSchedulerService.java
Patch:
@@ -19,7 +19,6 @@
 
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.SlotCheckState;
-import org.apache.dolphinscheduler.service.expand.CuringParamsService;
 import org.apache.dolphinscheduler.common.thread.BaseDaemonThread;
 import org.apache.dolphinscheduler.common.thread.Stopper;
 import org.apache.dolphinscheduler.common.thread.ThreadUtils;
@@ -36,6 +35,7 @@
 import org.apache.dolphinscheduler.server.master.metrics.ProcessInstanceMetrics;
 import org.apache.dolphinscheduler.server.master.registry.ServerNodeManager;
 import org.apache.dolphinscheduler.service.alert.ProcessAlertManager;
+import org.apache.dolphinscheduler.service.expand.CuringParamsService;
 import org.apache.dolphinscheduler.service.process.ProcessService;
 
 import org.apache.commons.collections4.CollectionUtils;

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/StateWheelExecuteThread.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.dolphinscheduler.server.master.runner;
 
 import org.apache.dolphinscheduler.common.Constants;
-import org.apache.dolphinscheduler.common.enums.StateEvent;
+import org.apache.dolphinscheduler.server.master.event.StateEvent;
 import org.apache.dolphinscheduler.common.enums.StateEventType;
 import org.apache.dolphinscheduler.common.enums.TimeoutFlag;
 import org.apache.dolphinscheduler.common.thread.BaseDaemonThread;

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/WorkflowExecuteThreadPool.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.dolphinscheduler.server.master.runner;
 
 import org.apache.dolphinscheduler.common.enums.Flag;
-import org.apache.dolphinscheduler.common.enums.StateEvent;
+import org.apache.dolphinscheduler.server.master.event.StateEvent;
 import org.apache.dolphinscheduler.common.enums.StateEventType;
 import org.apache.dolphinscheduler.common.utils.LoggerUtils;
 import org.apache.dolphinscheduler.common.utils.NetUtils;
@@ -30,7 +30,6 @@
 import org.apache.dolphinscheduler.remote.utils.Host;
 import org.apache.dolphinscheduler.server.master.cache.ProcessInstanceExecCacheManager;
 import org.apache.dolphinscheduler.server.master.config.MasterConfig;
-import org.apache.dolphinscheduler.server.master.metrics.ProcessInstanceMetrics;
 import org.apache.dolphinscheduler.service.process.ProcessService;
 
 import java.util.Map;

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/service/FailoverService.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.NodeType;
-import org.apache.dolphinscheduler.common.enums.StateEvent;
+import org.apache.dolphinscheduler.server.master.event.StateEvent;
 import org.apache.dolphinscheduler.common.enums.StateEventType;
 import org.apache.dolphinscheduler.common.model.Server;
 import org.apache.dolphinscheduler.common.utils.LoggerUtils;

File: dolphinscheduler-master/src/test/java/org/apache/dolphinscheduler/server/master/service/FailoverServiceTest.java
Patch:
@@ -26,7 +26,7 @@
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.CommandType;
 import org.apache.dolphinscheduler.common.enums.NodeType;
-import org.apache.dolphinscheduler.common.enums.StateEvent;
+import org.apache.dolphinscheduler.server.master.event.StateEvent;
 import org.apache.dolphinscheduler.common.model.Server;
 import org.apache.dolphinscheduler.dao.entity.ProcessInstance;
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/queue/PeerTaskInstancePriorityQueue.java
Patch:
@@ -51,10 +51,9 @@ public class PeerTaskInstancePriorityQueue implements TaskPriorityQueue<TaskInst
      * put task instance to priority queue
      *
      * @param taskInstance taskInstance
-     * @throws TaskPriorityQueueException
      */
     @Override
-    public void put(TaskInstance taskInstance) throws TaskPriorityQueueException {
+    public void put(TaskInstance taskInstance) {
         Preconditions.checkNotNull(taskInstance);
         queue.add(taskInstance);
         taskInstanceIdentifySet.add(getTaskInstanceIdentify(taskInstance));

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/queue/TaskPriorityQueue.java
Patch:
@@ -33,7 +33,7 @@ public interface TaskPriorityQueue<T> {
      * @param taskInfo taskInfo
      * @throws TaskPriorityQueueException
      */
-    void put(T taskInfo) throws TaskPriorityQueueException;
+    void put(T taskInfo);
 
     /**
      * take taskInfo

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/queue/TaskPriorityQueueImpl.java
Patch:
@@ -40,10 +40,9 @@ public class TaskPriorityQueueImpl implements TaskPriorityQueue<TaskPriority> {
      * put task takePriorityInfo
      *
      * @param taskPriorityInfo takePriorityInfo
-     * @throws TaskPriorityQueueException
      */
     @Override
-    public void put(TaskPriority taskPriorityInfo) throws TaskPriorityQueueException {
+    public void put(TaskPriority taskPriorityInfo) {
         queue.put(taskPriorityInfo);
     }
 

File: dolphinscheduler-api-test/dolphinscheduler-api-test-case/src/test/java/org/apache/dolphinscheduler/api.test/cases/TenantAPITest.java
Patch:
@@ -19,7 +19,6 @@
 
 package org.apache.dolphinscheduler.api.test.cases;
 
-import lombok.extern.slf4j.Slf4j;
 import org.apache.dolphinscheduler.api.test.core.DolphinScheduler;
 import org.apache.dolphinscheduler.api.test.entity.HttpResponse;
 import org.apache.dolphinscheduler.api.test.entity.LoginResponseData;
@@ -28,12 +27,14 @@
 import org.apache.dolphinscheduler.api.test.pages.LoginPage;
 import org.apache.dolphinscheduler.api.test.pages.security.TenantPage;
 import org.apache.dolphinscheduler.api.test.utils.JSONUtils;
+
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Order;
 import org.junit.jupiter.api.Test;
 
+import lombok.extern.slf4j.Slf4j;
 
 @DolphinScheduler(composeFiles = "docker/basic/docker-compose.yaml")
 @Slf4j

File: dolphinscheduler-api-test/dolphinscheduler-api-test-case/src/test/java/org/apache/dolphinscheduler/api.test/entity/TenantListPagingResponseData.java
Patch:
@@ -19,12 +19,12 @@
 
 package org.apache.dolphinscheduler.api.test.entity;
 
+import java.util.List;
+
 import lombok.AllArgsConstructor;
 import lombok.Data;
 import lombok.NoArgsConstructor;
 
-import java.util.List;
-
 @AllArgsConstructor
 @NoArgsConstructor
 @Data

File: dolphinscheduler-api-test/dolphinscheduler-api-test-case/src/test/java/org/apache/dolphinscheduler/api.test/entity/TenantListPagingResponseTotalList.java
Patch:
@@ -19,12 +19,12 @@
 
 package org.apache.dolphinscheduler.api.test.entity;
 
+import java.util.Date;
+
 import lombok.AllArgsConstructor;
 import lombok.Data;
 import lombok.NoArgsConstructor;
 
-import java.util.Date;
-
 @AllArgsConstructor
 @NoArgsConstructor
 @Data

File: dolphinscheduler-api-test/dolphinscheduler-api-test-case/src/test/java/org/apache/dolphinscheduler/api.test/pages/LoginPage.java
Patch:
@@ -19,7 +19,6 @@
 
 package org.apache.dolphinscheduler.api.test.pages;
 
-
 import org.apache.dolphinscheduler.api.test.entity.HttpResponse;
 import org.apache.dolphinscheduler.api.test.utils.RequestClient;
 

File: dolphinscheduler-api-test/dolphinscheduler-api-test-case/src/test/java/org/apache/dolphinscheduler/api.test/pages/security/TenantPage.java
Patch:
@@ -19,7 +19,6 @@
 
 package org.apache.dolphinscheduler.api.test.pages.security;
 
-
 import org.apache.dolphinscheduler.api.test.core.Constants;
 import org.apache.dolphinscheduler.api.test.entity.HttpResponse;
 import org.apache.dolphinscheduler.api.test.utils.RequestClient;

File: dolphinscheduler-api-test/dolphinscheduler-api-test-core/src/main/java/org/apache/dolphinscheduler/api/test/core/Constants.java
Patch:
@@ -19,9 +19,6 @@
 
 import lombok.experimental.UtilityClass;
 
-import java.nio.file.Path;
-import java.nio.file.Paths;
-
 @UtilityClass
 public final class Constants {
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/AccessTokenServiceImpl.java
Patch:
@@ -109,6 +109,7 @@ public Map<String, Object> queryAccessTokenByUser(User loginUser, Integer userId
     /**
      * create token
      *
+     * @param loginUser
      * @param userId token for user
      * @param expireTime token expire time
      * @param token token string (if it is absent, it will be automatically generated)
@@ -161,6 +162,7 @@ public Result createToken(User loginUser, int userId, String expireTime, String
     /**
      * generate token
      *
+     * @param loginUser
      * @param userId token for user
      * @param expireTime token expire time
      * @return token string

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ClusterServiceImpl.java
Patch:
@@ -68,7 +68,7 @@ public class ClusterServiceImpl extends BaseServiceImpl implements ClusterServic
      * @param config    cluster config
      * @param desc      cluster desc
      */
-    @Transactional(rollbackFor = RuntimeException.class)
+    @Transactional
     @Override
     public Map<String, Object> createCluster(User loginUser, String name, String config, String desc) {
         Map<String, Object> result = new HashMap<>();
@@ -229,7 +229,7 @@ public Map<String, Object> queryClusterByName(String name) {
      * @param loginUser login user
      * @param code      cluster code
      */
-    @Transactional(rollbackFor = RuntimeException.class)
+    @Transactional
     @Override
     public Map<String, Object> deleteClusterByCode(User loginUser, Long code) {
         Map<String, Object> result = new HashMap<>();
@@ -256,7 +256,7 @@ public Map<String, Object> deleteClusterByCode(User loginUser, Long code) {
      * @param config    cluster config
      * @param desc      cluster desc
      */
-    @Transactional(rollbackFor = RuntimeException.class)
+    @Transactional
     @Override
     public Map<String, Object> updateClusterByCode(User loginUser, Long code, String name, String config, String desc) {
         Map<String, Object> result = new HashMap<>();

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/EnvironmentServiceImpl.java
Patch:
@@ -93,7 +93,7 @@ public class EnvironmentServiceImpl extends BaseServiceImpl implements Environme
      * @param workerGroups worker groups
      */
     @Override
-    @Transactional(rollbackFor = Exception.class)
+    @Transactional
     public Map<String, Object> createEnvironment(User loginUser, String name, String config, String desc, String workerGroups) {
         Map<String, Object> result = new HashMap<>();
         if (!canOperatorPermissions(loginUser, null, AuthorizationType.ENVIRONMENT, ENVIRONMENT_CREATE)) {
@@ -303,7 +303,7 @@ public Map<String, Object> queryEnvironmentByName(String name) {
      * @param loginUser login user
      * @param code environment code
      */
-    @Transactional(rollbackFor = RuntimeException.class)
+    @Transactional
     @Override
     public Map<String, Object> deleteEnvironmentByCode(User loginUser, Long code) {
         Map<String, Object> result = new HashMap<>();
@@ -342,7 +342,7 @@ public Map<String, Object> deleteEnvironmentByCode(User loginUser, Long code) {
      * @param desc environment desc
      * @param workerGroups worker groups
      */
-    @Transactional(rollbackFor = RuntimeException.class)
+    @Transactional
     @Override
     public Map<String, Object> updateEnvironmentByCode(User loginUser, Long code, String name, String config, String desc, String workerGroups) {
         Map<String, Object> result = new HashMap<>();

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProcessInstanceServiceImpl.java
Patch:
@@ -452,7 +452,7 @@ public Map<String, Object> querySubProcessInstanceByTaskId(User loginUser, long
      * @param tenantCode tenantCode
      * @return update result code
      */
-    @Transactional(rollbackFor = RuntimeException.class)
+    @Transactional
     @Override
     public Map<String, Object> updateProcessInstance(User loginUser, long projectCode, Integer processInstanceId, String taskRelationJson,
                                                      String taskDefinitionJson, String scheduleTime, Boolean syncDefine, String globalParams,
@@ -619,7 +619,7 @@ public Map<String, Object> queryParentInstanceBySubId(User loginUser, long proje
      * @return delete result code
      */
     @Override
-    @Transactional(rollbackFor = RuntimeException.class)
+    @Transactional
     public Map<String, Object> deleteProcessInstanceById(User loginUser, long projectCode, Integer processInstanceId) {
         Project project = projectMapper.queryByCode(projectCode);
         //check user access for project

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProjectServiceImpl.java
Patch:
@@ -87,7 +87,7 @@ public class ProjectServiceImpl extends BaseServiceImpl implements ProjectServic
      * @return returns an error if it exists
      */
     @Override
-    @Transactional(rollbackFor = Exception.class)
+    @Transactional
     public Map<String, Object> createProject(User loginUser, String name, String desc) {
 
         Map<String, Object> result = checkDesc(desc);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/QueueServiceImpl.java
Patch:
@@ -123,7 +123,7 @@ public Result queryList(User loginUser, String searchVal, Integer pageNo, Intege
      * @return create result
      */
     @Override
-    @Transactional(rollbackFor = Exception.class)
+    @Transactional
     public Map<String, Object> createQueue(User loginUser, String queue, String queueName) {
         Map<String, Object> result = new HashMap<>();
         if (!canOperatorPermissions(loginUser,null, AuthorizationType.QUEUE,YARN_QUEUE_CREATE)) {

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/SchedulerServiceImpl.java
Patch:
@@ -121,7 +121,7 @@ public class SchedulerServiceImpl extends BaseServiceImpl implements SchedulerSe
      * @return create result code
      */
     @Override
-    @Transactional(rollbackFor = RuntimeException.class)
+    @Transactional
     public Map<String, Object> insertSchedule(User loginUser,
                                               long projectCode,
                                               long processDefineCode,
@@ -222,7 +222,7 @@ public Map<String, Object> insertSchedule(User loginUser,
      * @return update result code
      */
     @Override
-    @Transactional(rollbackFor = RuntimeException.class)
+    @Transactional
     public Map<String, Object> updateSchedule(User loginUser,
                                               long projectCode,
                                               Integer id,
@@ -272,7 +272,7 @@ public Map<String, Object> updateSchedule(User loginUser,
      * @return publish result code
      */
     @Override
-    @Transactional(rollbackFor = RuntimeException.class)
+    @Transactional
     public Map<String, Object> setScheduleState(User loginUser,
                                                 long projectCode,
                                                 Integer id,

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/SessionServiceImpl.java
Patch:
@@ -88,7 +88,7 @@ public Session getSession(HttpServletRequest request) {
      * @return session string
      */
     @Override
-    @Transactional(rollbackFor = RuntimeException.class)
+    @Transactional
     public String createSession(User user, String ip) {
         Session session = null;
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/TaskGroupServiceImpl.java
Patch:
@@ -79,7 +79,7 @@ public class TaskGroupServiceImpl extends BaseServiceImpl implements TaskGroupSe
      * @return the result code and msg
      */
     @Override
-    @Transactional(rollbackFor = Exception.class)
+    @Transactional
     public Map<String, Object> createTaskGroup(User loginUser, Long projectCode, String name, String description, int groupSize) {
         Map<String, Object> result = new HashMap<>();
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/TenantServiceImpl.java
Patch:
@@ -91,7 +91,7 @@ public class TenantServiceImpl extends BaseServiceImpl implements TenantService
      * @throws Exception exception
      */
     @Override
-    @Transactional(rollbackFor = Exception.class)
+    @Transactional
     public Map<String, Object> createTenant(User loginUser,
                                             String tenantCode,
                                             int queueId,
@@ -242,7 +242,7 @@ public Map<String, Object> updateTenant(User loginUser, int id, String tenantCod
      * @throws Exception exception
      */
     @Override
-    @Transactional(rollbackFor = Exception.class)
+    @Transactional
     public Map<String, Object> deleteTenantById(User loginUser, int id) throws Exception {
         Map<String, Object> result = new HashMap<>();
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/UdfFuncServiceImpl.java
Patch:
@@ -77,7 +77,7 @@ public class UdfFuncServiceImpl extends BaseServiceImpl implements UdfFuncServic
      * @return create result code
      */
     @Override
-    @Transactional(rollbackFor = Exception.class)
+    @Transactional
     public Result<Object> createUdfFunction(User loginUser,
                                             String funcName,
                                             String className,
@@ -336,7 +336,7 @@ public Result<Object> queryUdfFuncList(User loginUser, Integer type) {
      * @return delete result code
      */
     @Override
-    @Transactional(rollbackFor = RuntimeException.class)
+    @Transactional
     public Result<Object> delete(User loginUser, int id) {
         Result<Object> result = new Result<>();
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/WorkerGroupServiceImpl.java
Patch:
@@ -84,7 +84,7 @@ public class WorkerGroupServiceImpl extends BaseServiceImpl implements WorkerGro
      * @return create or update result code
      */
     @Override
-    @Transactional(rollbackFor = Exception.class)
+    @Transactional
     public Map<String, Object> saveWorkerGroup(User loginUser, int id, String name, String addrList) {
         Map<String, Object> result = new HashMap<>();
         if (!canOperatorPermissions(loginUser,null, AuthorizationType.WORKER_GROUP, WORKER_GROUP_CREATE)) {
@@ -326,7 +326,7 @@ private List<WorkerGroup> getWorkerGroups(boolean isPaging, List<Integer> ids) {
      * @return delete result code
      */
     @Override
-    @Transactional(rollbackFor = Exception.class)
+    @Transactional
     public Map<String, Object> deleteWorkerGroupById(User loginUser, Integer id) {
         Map<String, Object> result = new HashMap<>();
         if (!canOperatorPermissions(loginUser,null, AuthorizationType.WORKER_GROUP,WORKER_GROUP_DELETE)) {

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessService.java
Patch:
@@ -105,7 +105,7 @@ public interface ProcessService {
 
     TaskInstance submitTaskWithRetry(ProcessInstance processInstance, TaskInstance taskInstance, int commitRetryTimes, long commitInterval);
 
-    @Transactional(rollbackFor = Exception.class)
+    @Transactional
     TaskInstance submitTask(ProcessInstance processInstance, TaskInstance taskInstance);
 
     void createSubWorkProcess(ProcessInstance parentProcessInstance, TaskInstance task);
@@ -173,7 +173,7 @@ Command createSubProcessCommand(ProcessInstance parentProcessInstance,
 
     List<String> queryNeedFailoverProcessInstanceHost();
 
-    @Transactional(rollbackFor = RuntimeException.class)
+    @Transactional
     void processNeedFailoverProcessInstances(ProcessInstance processInstance);
 
     List<TaskInstance> queryNeedFailoverTaskInstances(String host);

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessServiceImpl.java
Patch:
@@ -1296,7 +1296,7 @@ public TaskInstance submitTaskWithRetry(ProcessInstance processInstance, TaskIns
      * @return task instance
      */
     @Override
-    @Transactional(rollbackFor = Exception.class)
+    @Transactional
     public TaskInstance submitTask(ProcessInstance processInstance, TaskInstance taskInstance) {
         logger.info("start submit task : {}, processInstance id:{}, state: {}",
             taskInstance.getName(), taskInstance.getProcessInstanceId(), processInstance.getState());
@@ -2059,7 +2059,7 @@ public List<String> queryNeedFailoverProcessInstanceHost() {
      * @param processInstance processInstance
      */
     @Override
-    @Transactional(rollbackFor = RuntimeException.class)
+    @Transactional
     public void processNeedFailoverProcessInstances(ProcessInstance processInstance) {
         //1 update processInstance host is null
         processInstance.setHost(Constants.NULL);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/AlertGroupServiceImpl.java
Patch:
@@ -160,6 +160,7 @@ public Result listPaging(User loginUser, String searchVal, Integer pageNo, Integ
      * @return create result code
      */
     @Override
+    @Transactional(rollbackFor = Exception.class)
     public Map<String, Object> createAlertgroup(User loginUser, String groupName, String desc, String alertInstanceIds) {
         Map<String, Object> result = new HashMap<>();
         //only admin can operate
@@ -191,6 +192,8 @@ public Map<String, Object> createAlertgroup(User loginUser, String groupName, St
         } catch (DuplicateKeyException ex) {
             logger.error("Create alert group error.", ex);
             putMsg(result, Status.ALERT_GROUP_EXIST);
+        } catch (RuntimeException e) {
+            throw new RuntimeException(e.getMessage());
         }
 
         return result;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/DataSourceServiceImpl.java
Patch:
@@ -100,6 +100,7 @@ public class DataSourceServiceImpl extends BaseServiceImpl implements DataSource
      * @return create result code
      */
     @Override
+    @Transactional(rollbackFor = Exception.class)
     public Result<Object> createDataSource(User loginUser, BaseDataSourceParamDTO datasourceParam) {
         DataSourceUtils.checkDatasourceParam(datasourceParam);
         Result<Object> result = new Result<>();
@@ -139,6 +140,8 @@ public Result<Object> createDataSource(User loginUser, BaseDataSourceParamDTO da
         } catch (DuplicateKeyException ex) {
             logger.error("Create datasource error.", ex);
             putMsg(result, Status.DATASOURCE_EXIST);
+        } catch (RuntimeException e) {
+            throw new RuntimeException(e.getMessage());
         }
 
         return result;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/EnvironmentServiceImpl.java
Patch:
@@ -92,8 +92,8 @@ public class EnvironmentServiceImpl extends BaseServiceImpl implements Environme
      * @param desc environment desc
      * @param workerGroups worker groups
      */
-    @Transactional(rollbackFor = RuntimeException.class)
     @Override
+    @Transactional(rollbackFor = Exception.class)
     public Map<String, Object> createEnvironment(User loginUser, String name, String config, String desc, String workerGroups) {
         Map<String, Object> result = new HashMap<>();
         if (!canOperatorPermissions(loginUser, null, AuthorizationType.ENVIRONMENT, ENVIRONMENT_CREATE)) {

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProjectServiceImpl.java
Patch:
@@ -41,6 +41,7 @@
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Service;
+import org.springframework.transaction.annotation.Transactional;
 
 import java.util.ArrayList;
 import java.util.Collections;
@@ -86,6 +87,7 @@ public class ProjectServiceImpl extends BaseServiceImpl implements ProjectServic
      * @return returns an error if it exists
      */
     @Override
+    @Transactional(rollbackFor = Exception.class)
     public Map<String, Object> createProject(User loginUser, String name, String desc) {
 
         Map<String, Object> result = checkDesc(desc);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/TaskGroupServiceImpl.java
Patch:
@@ -39,6 +39,7 @@
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Service;
+import org.springframework.transaction.annotation.Transactional;
 
 import java.util.ArrayList;
 import java.util.Collections;
@@ -78,6 +79,7 @@ public class TaskGroupServiceImpl extends BaseServiceImpl implements TaskGroupSe
      * @return the result code and msg
      */
     @Override
+    @Transactional(rollbackFor = Exception.class)
     public Map<String, Object> createTaskGroup(User loginUser, Long projectCode, String name, String description, int groupSize) {
         Map<String, Object> result = new HashMap<>();
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/TenantServiceImpl.java
Patch:
@@ -46,6 +46,7 @@
 import org.springframework.transaction.annotation.Transactional;
 
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.Collections;
 import java.util.Date;
 import java.util.HashMap;
@@ -132,6 +133,7 @@ public Map<String, Object> createTenant(User loginUser,
         if (PropertyUtils.getResUploadStartupState()) {
             storageOperate.createTenantDirIfNotExists(tenantCode);
         }
+        permissionPostHandle(AuthorizationType.TENANT, loginUser.getId(), Collections.singletonList(tenant.getId()), logger);
         result.put(Constants.DATA_LIST, tenant);
         putMsg(result, Status.SUCCESS);
         return result;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/UdfFuncServiceImpl.java
Patch:
@@ -77,6 +77,7 @@ public class UdfFuncServiceImpl extends BaseServiceImpl implements UdfFuncServic
      * @return create result code
      */
     @Override
+    @Transactional(rollbackFor = Exception.class)
     public Result<Object> createUdfFunction(User loginUser,
                                             String funcName,
                                             String className,

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/QueueServiceTest.java
Patch:
@@ -110,7 +110,7 @@ public void testQueryListPage() {
         Set<Integer> ids = new HashSet<>();
         ids.add(1);
         Mockito.when(resourcePermissionCheckService.userOwnedResourceIdsAcquisition(AuthorizationType.QUEUE, getLoginUser().getId(), queueServiceImplLogger)).thenReturn(ids);
-        Mockito.when(queueMapper.queryQueuePaging(Mockito.any(Page.class), Mockito.eq(queueName))).thenReturn(page);
+        Mockito.when(queueMapper.queryQueuePaging(Mockito.any(Page.class), Mockito.anyList(), Mockito.eq(queueName))).thenReturn(page);
         Result result = queueService.queryList(getLoginUser(), queueName, 1, 10);
         logger.info(result.toString());
         PageInfo<Queue> pageInfo = (PageInfo<Queue>) result.getData();

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/Constants.java
Patch:
@@ -833,4 +833,6 @@ private Constants() {
     public static final int USER_PASSWORD_MIN_LENGTH = 2;
 
     public static final String FUNCTION_START_WITH = "$";
+
+    public static final Integer DEFAULT_QUEUE_ID = 1;
 }

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/QueueMapper.java
Patch:
@@ -34,7 +34,7 @@ public interface QueueMapper extends BaseMapper<Queue> {
      * @param searchVal searchVal
      * @return queue IPage
      */
-    IPage<Queue> queryQueuePaging(IPage<Queue> page,
+    IPage<Queue> queryQueuePaging(IPage<Queue> page, @Param("ids")List<Integer> ids,
                                   @Param("searchVal") String searchVal);
 
     /**

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessService.java
Patch:
@@ -81,7 +81,7 @@ public interface ProcessService {
 
     ProcessDefinition findProcessDefineById(int processDefinitionId);
 
-    ProcessDefinition findProcessDefinition(Long processDefinitionCode, int version);
+    ProcessDefinition findProcessDefinition(Long processDefinitionCode, int processDefinitionVersion);
 
     ProcessDefinition findProcessDefinitionByCode(Long processDefinitionCode);
 

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/corn/CronUtils.java
Patch:
@@ -297,7 +297,7 @@ public static List<Date> getSelfScheduleDateList(Map<String, String> param) {
         String scheduleDates = param.get(CMDPARAM_COMPLEMENT_DATA_SCHEDULE_DATE_LIST);
         if (StringUtils.isNotEmpty(scheduleDates)) {
             for (String stringDate : scheduleDates.split(COMMA)) {
-                result.add(DateUtils.stringToDate(stringDate));
+                result.add(DateUtils.stringToDate(stringDate.trim()));
             }
             return result;
         }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProcessDefinitionServiceImpl.java
Patch:
@@ -1791,6 +1791,7 @@ protected void doBatchOperateProcessDefinition(User loginUser,
                 final Date date = new Date();
                 processDefinition.setCreateTime(date);
                 processDefinition.setUpdateTime(date);
+                processDefinition.setReleaseState(ReleaseState.OFFLINE);
                 if (StringUtils.isNotBlank(processDefinition.getLocations())) {
                     ArrayNode jsonNodes = JSONUtils.parseArray(processDefinition.getLocations());
                     for (int i = 0; i < jsonNodes.size(); i++) {

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProcessInstanceServiceImpl.java
Patch:
@@ -51,7 +51,7 @@
 import org.apache.dolphinscheduler.api.utils.Result;
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.Flag;
-import org.apache.dolphinscheduler.common.expand.CuringGlobalParamsService;
+import org.apache.dolphinscheduler.service.expand.CuringParamsService;
 import org.apache.dolphinscheduler.common.graph.DAG;
 import org.apache.dolphinscheduler.common.model.TaskNode;
 import org.apache.dolphinscheduler.common.model.TaskNodeRelation;
@@ -155,7 +155,7 @@ public class ProcessInstanceServiceImpl extends BaseServiceImpl implements Proce
     private ScheduleMapper scheduleMapper;
 
     @Autowired
-    private CuringGlobalParamsService curingGlobalParamsService;
+    private CuringParamsService curingGlobalParamsService;
 
     /**
      * return top n SUCCESS process instance order by running time which started between startTime and endTime

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/Constants.java
Patch:
@@ -831,4 +831,6 @@ private Constants() {
     public static final int USER_PASSWORD_MAX_LENGTH = 20;
 
     public static final int USER_PASSWORD_MIN_LENGTH = 2;
+
+    public static final String FUNCTION_START_WITH = "$";
 }

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/placeholder/TimePlaceholderUtils.java
Patch:
@@ -512,7 +512,7 @@ public static Map.Entry<Date, String> calcMinutes(String expression, Date date)
 
             if (Character.isDigit(expression.charAt(index + 1))) {
                 String addMinuteExpr = expression.substring(index + 1);
-                Date targetDate = org.apache.commons.lang.time.DateUtils
+                Date targetDate = org.apache.commons.lang3.time.DateUtils
                     .addMinutes(date, calcMinutes(addMinuteExpr));
                 String dateFormat = expression.substring(0, index);
 

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterSchedulerService.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.SlotCheckState;
-import org.apache.dolphinscheduler.common.expand.CuringGlobalParamsService;
+import org.apache.dolphinscheduler.service.expand.CuringParamsService;
 import org.apache.dolphinscheduler.common.thread.BaseDaemonThread;
 import org.apache.dolphinscheduler.common.thread.Stopper;
 import org.apache.dolphinscheduler.common.thread.ThreadUtils;
@@ -95,7 +95,7 @@ public class MasterSchedulerService extends BaseDaemonThread {
     private StateWheelExecuteThread stateWheelExecuteThread;
 
     @Autowired
-    private CuringGlobalParamsService curingGlobalParamsService;
+    private CuringParamsService curingGlobalParamsService;
 
     private String masterAddress;
 

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/expand/TimePlaceholderResolverExpandService.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.common.expand;
+package org.apache.dolphinscheduler.service.expand;
 
 public interface TimePlaceholderResolverExpandService {
 

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/expand/TimePlaceholderResolverExpandServiceImpl.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.common.expand;
+package org.apache.dolphinscheduler.service.expand;
 
 import org.springframework.stereotype.Component;
 

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessServiceImpl.java
Patch:
@@ -42,7 +42,7 @@
 import org.apache.dolphinscheduler.common.enums.TaskGroupQueueStatus;
 import org.apache.dolphinscheduler.common.enums.TimeoutFlag;
 import org.apache.dolphinscheduler.common.enums.WarningType;
-import org.apache.dolphinscheduler.common.expand.CuringGlobalParamsService;
+import org.apache.dolphinscheduler.service.expand.CuringParamsService;
 import org.apache.dolphinscheduler.common.graph.DAG;
 import org.apache.dolphinscheduler.common.model.TaskNode;
 import org.apache.dolphinscheduler.common.model.TaskNodeRelation;
@@ -51,7 +51,6 @@
 import org.apache.dolphinscheduler.common.utils.CodeGenerateUtils.CodeGenerateException;
 import org.apache.dolphinscheduler.common.utils.DateUtils;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
-import org.apache.dolphinscheduler.common.utils.ParameterUtils;
 import org.apache.dolphinscheduler.dao.entity.Command;
 import org.apache.dolphinscheduler.dao.entity.DagData;
 import org.apache.dolphinscheduler.dao.entity.DataSource;
@@ -273,7 +272,7 @@ public class ProcessServiceImpl implements ProcessService {
     private K8sMapper k8sMapper;
 
     @Autowired
-    private CuringGlobalParamsService curingGlobalParamsService;
+    private CuringParamsService curingGlobalParamsService;
 
     /**
      * handle Command (construct ProcessInstance from Command) , wrapped in transaction

File: dolphinscheduler-service/src/test/java/org/apache/dolphinscheduler/service/expand/CuringGlobalParamsServiceTest.java
Patch:
@@ -16,7 +16,7 @@
  */
 
 
-package org.apache.dolphinscheduler.common.expand;
+package org.apache.dolphinscheduler.service.expand;
 
 import org.apache.dolphinscheduler.common.enums.CommandType;
 import org.apache.dolphinscheduler.common.utils.DateUtils;
@@ -45,10 +45,10 @@ public class CuringGlobalParamsServiceTest {
     private static final String placeHolderName = "$[yyyy-MM-dd-1]";
 
     @Mock
-    private CuringGlobalParamsService curingGlobalParamsService;
+    private CuringParamsService curingGlobalParamsService;
 
     @InjectMocks
-    private DolphinSchedulerCuringGlobalParams dolphinSchedulerCuringGlobalParams;
+    private CuringGlobalParams dolphinSchedulerCuringGlobalParams;
 
     @Mock
     private TimePlaceholderResolverExpandService timePlaceholderResolverExpandService;

File: dolphinscheduler-service/src/test/java/org/apache/dolphinscheduler/service/expand/TimePlaceholderResolverExpandServiceTest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.common.expand;
+package org.apache.dolphinscheduler.service.expand;
 
 import org.apache.commons.lang3.StringUtils;
 import org.junit.Assert;

File: dolphinscheduler-service/src/test/java/org/apache/dolphinscheduler/service/process/ProcessServiceTest.java
Patch:
@@ -30,7 +30,7 @@
 import org.apache.dolphinscheduler.common.enums.TaskGroupQueueStatus;
 import org.apache.dolphinscheduler.common.enums.UserType;
 import org.apache.dolphinscheduler.common.enums.WarningType;
-import org.apache.dolphinscheduler.common.expand.CuringGlobalParamsService;
+import org.apache.dolphinscheduler.service.expand.CuringParamsService;
 import org.apache.dolphinscheduler.common.graph.DAG;
 import org.apache.dolphinscheduler.common.model.TaskNode;
 import org.apache.dolphinscheduler.common.model.TaskNodeRelation;
@@ -164,7 +164,7 @@ public class ProcessServiceTest {
     private ScheduleMapper scheduleMapper;
 
     @Mock
-    CuringGlobalParamsService curingGlobalParamsService;
+    CuringParamsService curingGlobalParamsService;
 
     @Test
     public void testCreateSubCommand() {

File: dolphinscheduler-task-plugin/dolphinscheduler-task-procedure/src/main/java/org/apache/dolphinscheduler/plugin/task/procedure/ProcedureTask.java
Patch:
@@ -103,7 +103,7 @@ public void handle() throws Exception {
             // get jdbc connection
             connection = DataSourceClientProvider.getInstance().getConnection(dbType, connectionParam);
             Map<Integer, Property> sqlParamsMap = new HashMap<>();
-            Map<String, Property> paramsMap = ParamUtils.convert(taskExecutionContext, getParameters());
+            Map<String, Property> paramsMap = taskExecutionContext.getPrepareParamsMap();
             String proceduerSql = formatSql(sqlParamsMap, paramsMap);
             // call method
             stmt = connection.prepareCall(proceduerSql);

File: dolphinscheduler-task-plugin/dolphinscheduler-task-sql/src/main/java/org/apache/dolphinscheduler/plugin/task/sql/SqlTask.java
Patch:
@@ -405,7 +405,7 @@ private SqlBinds getSqlAndSqlParamsMap(String sql) {
         StringBuilder sqlBuilder = new StringBuilder();
 
         // combining local and global parameters
-        Map<String, Property> paramsMap = ParamUtils.convert(taskExecutionContext, getParameters());
+        Map<String, Property> paramsMap = taskExecutionContext.getPrepareParamsMap();
 
         // spell SQL according to the final user-defined variable
         if (paramsMap == null) {

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/AlertGroupController.java
Patch:
@@ -109,7 +109,7 @@ public Result createAlertgroup(@ApiIgnore @RequestAttribute(value = Constants.SE
     @AccessLogAnnotation(ignoreRequestArgs = "loginUser")
     public Result list(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser) {
 
-        Map<String, Object> result = alertGroupService.queryAlertgroup();
+        Map<String, Object> result = alertGroupService.queryAlertgroup(loginUser);
         return returnDataList(result);
     }
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/EnvironmentController.java
Patch:
@@ -212,7 +212,7 @@ public Result deleteEnvironment(@ApiIgnore @RequestAttribute(value = Constants.S
     @ApiException(QUERY_ENVIRONMENT_ERROR)
     @AccessLogAnnotation(ignoreRequestArgs = "loginUser")
     public Result queryAllEnvironmentList(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser) {
-        Map<String, Object> result = environmentService.queryAllEnvironmentList();
+        Map<String, Object> result = environmentService.queryAllEnvironmentList(loginUser);
         return returnDataList(result);
     }
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/WorkerGroupController.java
Patch:
@@ -135,7 +135,7 @@ public Result queryAllWorkerGroupsPaging(@ApiIgnore @RequestAttribute(value = Co
     @ApiException(QUERY_WORKER_GROUP_FAIL)
     @AccessLogAnnotation(ignoreRequestArgs = "loginUser")
     public Result queryAllWorkerGroups(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser) {
-        Map<String, Object> result = workerGroupService.queryAllGroup();
+        Map<String, Object> result = workerGroupService.queryAllGroup(loginUser);
         return returnDataList(result);
     }
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/AlertGroupService.java
Patch:
@@ -30,9 +30,10 @@ public interface AlertGroupService {
     /**
      * query alert group list
      *
+     * @param loginUser
      * @return alert group list
      */
-    Map<String, Object> queryAlertgroup();
+    Map<String, Object> queryAlertgroup(User loginUser);
 
     /**
      * query alert group by id

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/EnvironmentService.java
Patch:
@@ -86,9 +86,10 @@ public interface EnvironmentService {
     /**
      * query all environment
      *
+     * @param loginUser
      * @return all environment list
      */
-    Map<String, Object> queryAllEnvironmentList();
+    Map<String, Object> queryAllEnvironmentList(User loginUser);
 
     /**
      * verify environment name

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/WorkerGroupService.java
Patch:
@@ -52,9 +52,10 @@ public interface WorkerGroupService {
     /**
      * query all worker group
      *
+     * @param loginUser
      * @return all worker group list
      */
-    Map<String, Object> queryAllGroup();
+    Map<String, Object> queryAllGroup(User loginUser);
 
     /**
      * delete worker group by id

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/AlertGroupServiceTest.java
Patch:
@@ -21,6 +21,7 @@
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.ArgumentMatchers.eq;
 
+import org.apache.commons.compress.utils.Sets;
 import org.apache.dolphinscheduler.api.enums.Status;
 import org.apache.dolphinscheduler.api.service.impl.AlertGroupServiceImpl;
 import org.apache.dolphinscheduler.api.service.impl.BaseServiceImpl;
@@ -64,6 +65,7 @@
 public class AlertGroupServiceTest {
     private static final Logger baseServiceLogger = LoggerFactory.getLogger(BaseServiceImpl.class);
     private static final Logger logger = LoggerFactory.getLogger(AlertGroupServiceTest.class);
+    private static final Logger alertGroupServiceLogger = LoggerFactory.getLogger(AlertGroupServiceImpl.class);
 
     @InjectMocks
     private AlertGroupServiceImpl alertGroupService;
@@ -80,7 +82,7 @@ public class AlertGroupServiceTest {
     public void testQueryAlertGroup() {
 
         Mockito.when(alertGroupMapper.queryAllGroupList()).thenReturn(getList());
-        Map<String, Object> result = alertGroupService.queryAlertgroup();
+        Map<String, Object> result = alertGroupService.queryAlertgroup(getLoginUser());
         logger.info(result.toString());
         List<AlertGroup> alertGroups = (List<AlertGroup>) result.get(Constants.DATA_LIST);
         Assert.assertTrue(CollectionUtils.isNotEmpty(alertGroups));

File: dolphinscheduler-task-plugin/dolphinscheduler-task-datax/src/main/java/org/apache/dolphinscheduler/plugin/task/datax/DataxTask.java
Patch:
@@ -167,6 +167,7 @@ public void handle() throws Exception {
             setAppIds(commandExecuteResult.getAppIds());
             setProcessId(commandExecuteResult.getProcessId());
         } catch (Exception e) {
+            logger.error("datax task error", e);
             setExitStatusCode(EXIT_CODE_FAILURE);
             throw e;
         }

File: dolphinscheduler-task-plugin/dolphinscheduler-task-sql/src/main/java/org/apache/dolphinscheduler/plugin/task/sql/SqlTask.java
Patch:
@@ -162,7 +162,7 @@ public void handle() throws Exception {
 
         } catch (Exception e) {
             setExitStatusCode(TaskConstants.EXIT_CODE_FAILURE);
-            logger.error("sql task error: {}", e.toString());
+            logger.error("sql task error", e);
             throw e;
         }
     }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProcessDefinitionServiceImpl.java
Patch:
@@ -1788,6 +1788,9 @@ protected void doBatchOperateProcessDefinition(User loginUser,
                 processDefinition.setId(0);
                 processDefinition.setUserId(loginUser.getId());
                 processDefinition.setName(processDefinition.getName() + "_copy_" + DateUtils.getCurrentTimeStamp());
+                final Date date = new Date();
+                processDefinition.setCreateTime(date);
+                processDefinition.setUpdateTime(date);
                 if (StringUtils.isNotBlank(processDefinition.getLocations())) {
                     ArrayNode jsonNodes = JSONUtils.parseArray(processDefinition.getLocations());
                     for (int i = 0; i < jsonNodes.size(); i++) {

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/cache/ProcessInstanceExecCacheManager.java
Patch:
@@ -17,6 +17,8 @@
 
 package org.apache.dolphinscheduler.server.master.cache;
 
+import lombok.NonNull;
+
 import org.apache.dolphinscheduler.server.master.runner.WorkflowExecuteRunnable;
 
 import java.util.Collection;
@@ -55,7 +57,7 @@ public interface ProcessInstanceExecCacheManager {
      * @param processInstanceId     processInstanceId
      * @param workflowExecuteThread if it is null, will not be cached
      */
-    void cache(int processInstanceId, WorkflowExecuteRunnable workflowExecuteThread);
+    void cache(int processInstanceId, @NonNull WorkflowExecuteRunnable workflowExecuteThread);
 
     /**
      * get all WorkflowExecuteThread from cache

File: dolphinscheduler-master/src/test/java/org/apache/dolphinscheduler/server/master/cache/impl/ProcessInstanceExecCacheManagerImplTest.java
Patch:
@@ -56,7 +56,7 @@ public void testContains() {
         Assert.assertTrue(processInstanceExecCacheManager.contains(1));
     }
 
-    @Test
+    @Test(expected = NullPointerException.class)
     public void testCacheNull() {
         processInstanceExecCacheManager.cache(2, null);
         WorkflowExecuteRunnable workflowExecuteThread = processInstanceExecCacheManager.getByProcessInstanceId(2);

File: dolphinscheduler-master/src/test/java/org/apache/dolphinscheduler/server/master/dispatch/ExecutionContextTestUtils.java
Patch:
@@ -49,8 +49,7 @@ public static ExecutionContext getExecutionContext(int port) {
                 .buildProcessDefinitionRelatedInfo(processDefinition)
                 .create();
 
-        TaskExecuteRequestCommand requestCommand = new TaskExecuteRequestCommand();
-        requestCommand.setTaskExecutionContext(JSONUtils.toJsonString(context));
+        TaskExecuteRequestCommand requestCommand = new TaskExecuteRequestCommand(context);
         Command command = requestCommand.convert2Command();
 
         ExecutionContext executionContext = new ExecutionContext(command, ExecutorType.WORKER);

File: dolphinscheduler-master/src/test/java/org/apache/dolphinscheduler/server/master/dispatch/executor/NettyExecutorManagerTest.java
Patch:
@@ -97,7 +97,7 @@ public void testExecuteWithException() throws ExecuteException {
 
     private Command toCommand(TaskExecutionContext taskExecutionContext) {
         TaskExecuteRequestCommand requestCommand = new TaskExecuteRequestCommand();
-        requestCommand.setTaskExecutionContext(JSONUtils.toJsonString(taskExecutionContext));
+        requestCommand.setTaskExecutionContext(taskExecutionContext);
         return requestCommand.convert2Command();
     }
 }

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/Command.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.remote.command;
 
 import java.io.Serializable;
@@ -25,6 +26,8 @@
  */
 public class Command implements Serializable {
 
+    private static final long serialVersionUID = -1L;
+
     private static final AtomicLong REQUEST_ID = new AtomicLong(1);
 
     public static final byte MAGIC = (byte) 0xbabe;

File: dolphinscheduler-worker/src/main/java/org/apache/dolphinscheduler/server/worker/processor/TaskExecuteProcessor.java
Patch:
@@ -111,8 +111,7 @@ public void process(Channel channel, Command command) {
         }
         logger.info("task execute request command : {}", taskRequestCommand);
 
-        String contextJson = taskRequestCommand.getTaskExecutionContext();
-        TaskExecutionContext taskExecutionContext = JSONUtils.parseObject(contextJson, TaskExecutionContext.class);
+        TaskExecutionContext taskExecutionContext = taskRequestCommand.getTaskExecutionContext();
 
         if (taskExecutionContext == null) {
             logger.error("task execution context is null");

File: dolphinscheduler-worker/src/main/java/org/apache/dolphinscheduler/server/worker/runner/TaskExecuteThread.java
Patch:
@@ -132,9 +132,10 @@ public void run() {
             taskExecutionContext.setEndTime(new Date());
             TaskExecutionContextCacheManager.removeByTaskInstanceId(taskExecutionContext.getTaskInstanceId());
             taskCallbackService.sendTaskExecuteResponseCommand(taskExecutionContext);
+            logger.info("[WorkflowInstance-{}][TaskInstance-{}] Task dry run success",
+                taskExecutionContext.getProcessInstanceId(), taskExecutionContext.getTaskInstanceId());
             return;
         }
-
         try {
             LoggerUtils.setWorkflowAndTaskInstanceIDMDC(taskExecutionContext.getProcessInstanceId(), taskExecutionContext.getTaskInstanceId());
             logger.info("script path : {}", taskExecutionContext.getExecutePath());

File: dolphinscheduler-worker/src/test/java/org/apache/dolphinscheduler/server/worker/processor/TaskExecuteProcessorTest.java
Patch:
@@ -88,7 +88,7 @@ public void before() throws Exception {
         command = new Command();
         command.setType(CommandType.TASK_EXECUTE_REQUEST);
         ackCommand = new TaskExecuteRunningCommand().convert2Command();
-        taskRequestCommand = new TaskExecuteRequestCommand();
+        taskRequestCommand = new TaskExecuteRequestCommand(taskExecutionContext);
         alertClientService = PowerMockito.mock(AlertClientService.class);
         workerExecService = PowerMockito.mock(ExecutorService.class);
         PowerMockito.when(workerExecService.submit(Mockito.any(TaskExecuteThread.class)))
@@ -127,8 +127,6 @@ public void before() throws Exception {
         PowerMockito.mockStatic(JSONUtils.class);
         PowerMockito.when(JSONUtils.parseObject(command.getBody(), TaskExecuteRequestCommand.class))
                 .thenReturn(taskRequestCommand);
-        PowerMockito.when(JSONUtils.parseObject(taskRequestCommand.getTaskExecutionContext(), TaskExecutionContext.class))
-                .thenReturn(taskExecutionContext);
 
         PowerMockito.mockStatic(FileUtils.class);
         PowerMockito.when(FileUtils.getProcessExecDir(taskExecutionContext.getProjectCode(),

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProjectServiceImpl.java
Patch:
@@ -475,7 +475,7 @@ public Map<String, Object> queryProjectCreatedAndAuthorizedByUser(User loginUser
             putMsg(result, Status.SUCCESS);
             return result;
         }
-        List<Project> projects = projectMapper.listAuthorizedProjects(loginUser.getUserType().equals(UserType.ADMIN_USER) ? 0 : loginUser.getId(), new ArrayList<>(projectIds));
+        List<Project> projects = projectMapper.selectBatchIds(projectIds);
 
         result.put(Constants.DATA_LIST, projects);
         putMsg(result, Status.SUCCESS);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/TaskGroupServiceImpl.java
Patch:
@@ -41,6 +41,7 @@
 import org.springframework.stereotype.Service;
 
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.Date;
 import java.util.HashMap;
 import java.util.List;
@@ -104,6 +105,7 @@ public Map<String, Object> createTaskGroup(User loginUser, Long projectCode, Str
         taskGroup.setCreateTime(new Date());
         taskGroup.setUpdateTime(new Date());
         if (taskGroupMapper.insert(taskGroup) > 0) {
+            permissionPostHandle(AuthorizationType.TASK_GROUP, loginUser.getId(), Collections.singletonList(taskGroup.getId()),logger);
             putMsg(result, Status.SUCCESS);
         } else {
             putMsg(result, Status.CREATE_TASK_GROUP_ERROR);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/WorkerGroupServiceImpl.java
Patch:
@@ -122,11 +122,9 @@ public Map<String, Object> saveWorkerGroup(User loginUser, int id, String name,
             workerGroupMapper.updateById(workerGroup);
         } else {
             workerGroupMapper.insert(workerGroup);
-        }
-        putMsg(result, Status.SUCCESS);
-        if (id != 0) {
             permissionPostHandle(AuthorizationType.WORKER_GROUP, loginUser.getId(), Collections.singletonList(workerGroup.getId()),logger);
         }
+        putMsg(result, Status.SUCCESS);
         return result;
     }
 

File: dolphinscheduler-worker/src/main/java/org/apache/dolphinscheduler/server/worker/WorkerServer.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.dolphinscheduler.plugin.task.api.ProcessUtils;
 import org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContext;
 import org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContextCacheManager;
-import org.apache.dolphinscheduler.server.worker.prc.WorkerRpcServer;
+import org.apache.dolphinscheduler.server.worker.rpc.WorkerRpcServer;
 import org.apache.dolphinscheduler.server.worker.registry.WorkerRegistryClient;
 import org.apache.dolphinscheduler.server.worker.runner.RetryReportTaskStatusThread;
 import org.apache.dolphinscheduler.server.worker.runner.WorkerManagerThread;

File: dolphinscheduler-worker/src/main/java/org/apache/dolphinscheduler/server/worker/rpc/WorkerRpcServer.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.server.worker.prc;
+package org.apache.dolphinscheduler.server.worker.rpc;
 
 import org.apache.dolphinscheduler.remote.NettyRemotingServer;
 import org.apache.dolphinscheduler.remote.command.CommandType;

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-api/src/main/java/org/apache/dolphinscheduler/plugin/datasource/api/utils/DataSourceUtils.java
Patch:
@@ -54,9 +54,7 @@ public static void checkDatasourceParam(BaseDataSourceParamDTO baseDataSourcePar
     public static ConnectionParam buildConnectionParams(BaseDataSourceParamDTO baseDataSourceParamDTO) {
         ConnectionParam connectionParams = getDatasourceProcessor(baseDataSourceParamDTO.getType())
                 .createConnectionParams(baseDataSourceParamDTO);
-        if (logger.isDebugEnabled()) {
-            logger.info("parameters map:{}", connectionParams);
-        }
+        logger.info("parameters map:{}", connectionParams);
         return connectionParams;
     }
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/constants/ApiFuncIdentificationConstant.java
Patch:
@@ -155,8 +155,6 @@ public class ApiFuncIdentificationConstant {
     public static final String MONITOR_DATABASES_VIEW = "monitor:databases:view";
 
     public static final String MONITOR_STATISTICS_VIEW = "monitor:statistics:view";
-    public static final String MONITOR_EVENT_LIST_VIEW = "monitor:event:view";
-    public static final String MONITOR_ALERT_LIST_VIEW = "monitor:alert:view";
 
     public final static Map<ExecuteType,String> map = new HashMap<ExecuteType,String>();
 

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/DataAnalysisServiceTest.java
Patch:
@@ -281,8 +281,6 @@ public void testCountCommandState() {
         CommandCount commandCount = new CommandCount();
         commandCount.setCommandType(CommandType.START_PROCESS);
         commandCounts.add(commandCount);
-        Mockito.when(resourcePermissionCheckService.operationPermissionCheck(AuthorizationType.DATA_ANALYSIS, user.getId(), ApiFuncIdentificationConstant.MONITOR_STATISTICS_VIEW, baseServiceLogger)).thenReturn(true);
-        Mockito.when(resourcePermissionCheckService.resourcePermissionCheck(AuthorizationType.DATA_ANALYSIS, null, 0, baseServiceLogger)).thenReturn(true);
         Mockito.when(commandMapper.countCommandState(0, null, null, new Long[]{1L})).thenReturn(commandCounts);
         Mockito.when(errorCommandMapper.countCommandState(0, null, null, new Long[]{1L})).thenReturn(commandCounts);
 

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/K8SNamespaceServiceTest.java
Patch:
@@ -92,8 +92,6 @@ public void queryListPaging() {
         IPage<K8sNamespace> page = new Page<>(1, 10);
         page.setTotal(1L);
         page.setRecords(getNamespaceList());
-        Mockito.when(resourcePermissionCheckService.operationPermissionCheck(AuthorizationType.K8S_NAMESPACE, getLoginUser().getId(), null, baseServiceLogger)).thenReturn(true);
-        Mockito.when(resourcePermissionCheckService.resourcePermissionCheck(AuthorizationType.K8S_NAMESPACE, null, 0, baseServiceLogger)).thenReturn(true);
         Mockito.when(k8sNamespaceMapper.queryK8sNamespacePaging(Mockito.any(Page.class), Mockito.eq(namespace))).thenReturn(page);
         Result result = k8sNamespaceService.queryListPaging(getLoginUser(), namespace, 1, 10);
         logger.info(result.toString());

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/MonitorServiceTest.java
Patch:
@@ -94,7 +94,7 @@ public  void testQueryDatabaseState() {
 
         mockPermissionCheck(ApiFuncIdentificationConstant.MONITOR_DATABASES_VIEW, false);
         Map<String,Object> noPermission = monitorService.queryDatabaseState(user);
-        Assert.assertEquals(Status.NO_CURRENT_OPERATING_PERMISSION,noPermission.get(Constants.STATUS));
+        Assert.assertEquals(Status.SUCCESS,noPermission.get(Constants.STATUS));
     }
 
     @Test
@@ -106,7 +106,7 @@ public  void testQueryMaster() {
 
         mockPermissionCheck(ApiFuncIdentificationConstant.MONITOR_MASTER_VIEW, false);
         Map<String,Object> noPermission = monitorService.queryMaster(user);
-        Assert.assertEquals(Status.NO_CURRENT_OPERATING_PERMISSION,noPermission.get(Constants.STATUS));
+        Assert.assertEquals(Status.SUCCESS,noPermission.get(Constants.STATUS));
     }
 
     @Test
@@ -118,7 +118,7 @@ public  void testQueryWorker() {
 
         mockPermissionCheck(ApiFuncIdentificationConstant.MONITOR_WORKER_VIEW, false);
         Map<String,Object> noPermission = monitorService.queryWorker(user);
-        Assert.assertEquals(Status.NO_CURRENT_OPERATING_PERMISSION,noPermission.get(Constants.STATUS));
+        Assert.assertEquals(Status.SUCCESS,noPermission.get(Constants.STATUS));
     }
 
     @Test

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/TaskGroupServiceTest.java
Patch:
@@ -156,7 +156,7 @@ public void testQueryProjectListPaging() {
         User loginUser = getLoginUser();
         Mockito.when(resourcePermissionCheckService.operationPermissionCheck(AuthorizationType.TASK_GROUP, loginUser.getId(), ApiFuncIdentificationConstant.TASK_GROUP_VIEW, serviceLogger)).thenReturn(true);
         Mockito.when(resourcePermissionCheckService.resourcePermissionCheck(AuthorizationType.TASK_GROUP, null, 0, serviceLogger)).thenReturn(true);
-        Mockito.when(taskGroupMapper.queryTaskGroupPaging(Mockito.any(Page.class), Mockito.eq(10),
+        Mockito.when(taskGroupMapper.queryTaskGroupPaging(Mockito.any(Page.class), Mockito.anyList(),
             Mockito.eq(null), Mockito.eq(0))).thenReturn(page);
 
         // query all

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/WorkerGroupServiceTest.java
Patch:
@@ -76,6 +76,7 @@ public void testQueryAllGroup() {
     @Test
     public void testDeleteWorkerGroupById() {
         User user = new User();
+        user.setId(1);
         user.setUserType(UserType.ADMIN_USER);
         WorkerGroup wg2 = getWorkerGroup(2);
         Mockito.when(workerGroupMapper.selectById(2)).thenReturn(wg2);

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/TaskGroupMapperTest.java
Patch:
@@ -24,6 +24,7 @@
 
 import org.junit.Assert;
 import org.junit.Test;
+import org.mockito.Mockito;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -88,7 +89,7 @@ public void testQueryTaskGroupPaging() {
         Page<TaskGroup> page = new Page(1, 3);
         IPage<TaskGroup> taskGroupIPage = taskGroupMapper.queryTaskGroupPaging(
                 page,
-                taskGroup.getUserId(),
+                Mockito.anyList(),
                 taskGroup.getName(), taskGroup.getStatus());
 
         Assert.assertEquals(taskGroupIPage.getTotal(), 1);

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/TenantMapperTest.java
Patch:
@@ -20,6 +20,8 @@
 import org.apache.dolphinscheduler.dao.entity.Queue;
 import org.apache.dolphinscheduler.dao.entity.Tenant;
 
+import java.util.Arrays;
+import java.util.Collections;
 import java.util.Date;
 import java.util.List;
 
@@ -136,7 +138,7 @@ public void testQueryTenantPaging() {
         Page<Tenant> page = new Page(1, 3);
 
         //tenant.getTenantCode() used instead of tenant.getTenantName()
-        IPage<Tenant> tenantIPage = tenantMapper.queryTenantPaging(page, tenant.getTenantCode());
+        IPage<Tenant> tenantIPage = tenantMapper.queryTenantPaging(page, Collections.singletonList(tenant.getId()), tenant.getTenantCode());
 
         Assert.assertNotEquals(tenantIPage.getTotal(), 0);
     }

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/task/SubTaskProcessor.java
Patch:
@@ -29,6 +29,7 @@
 import org.apache.dolphinscheduler.plugin.task.api.model.Property;
 import org.apache.dolphinscheduler.remote.command.StateEventChangeCommand;
 import org.apache.dolphinscheduler.remote.processor.StateEventCallbackService;
+import org.apache.dolphinscheduler.remote.utils.Host;
 import org.apache.dolphinscheduler.server.utils.LogUtils;
 import org.apache.dolphinscheduler.service.bean.SpringApplicationContext;
 
@@ -215,9 +216,8 @@ private void sendToSubProcess() {
         StateEventChangeCommand stateEventChangeCommand = new StateEventChangeCommand(
                 processInstance.getId(), taskInstance.getId(), subProcessInstance.getState(), subProcessInstance.getId(), 0
         );
-        String address = subProcessInstance.getHost().split(":")[0];
-        int port = Integer.parseInt(subProcessInstance.getHost().split(":")[1]);
-        this.stateEventCallbackService.sendResult(address, port, stateEventChangeCommand.convert2Command());
+        Host host = new Host(subProcessInstance.getHost());
+        this.stateEventCallbackService.sendResult(host, stateEventChangeCommand.convert2Command());
     }
 
     @Override

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/metrics/MasterServerMetrics.java
Patch:
@@ -30,15 +30,15 @@ private MasterServerMetrics() {
      * Used to measure the master server is overload.
      */
     private static final Counter MASTER_OVERLOAD_COUNTER =
-            Counter.builder("dolphinscheduler_master_overload_count")
+            Counter.builder("ds.master.overload.count")
                     .description("Master server overload count")
                     .register(Metrics.globalRegistry);
 
     /**
      * Used to measure the number of process command consumed by master.
      */
     private static final Counter MASTER_CONSUME_COMMAND_COUNTER =
-            Counter.builder("dolphinscheduler_master_consume_command_count")
+            Counter.builder("ds.master.consume.command.count")
                     .description("Master server consume command count")
                     .register(Metrics.globalRegistry);
 

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/WorkflowExecuteRunnable.java
Patch:
@@ -254,7 +254,7 @@ public WorkflowExecuteRunnable(ProcessInstance processInstance
         this.nettyExecutorManager = nettyExecutorManager;
         this.processAlertManager = processAlertManager;
         this.stateWheelExecuteThread = stateWheelExecuteThread;
-        TaskMetrics.registerTaskRunning(readyToSubmitTaskQueue::size);
+        TaskMetrics.registerTaskPrepared(readyToSubmitTaskQueue::size);
     }
 
     /**

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/service/FailoverService.java
Patch:
@@ -77,8 +77,8 @@ public FailoverService(RegistryClient registryClient, MasterConfig masterConfig,
     /**
      * check master failover
      */
-    @Counted(value = "failover_scheduler_check_task_count")
-    @Timed(value = "failover_scheduler_check_task_time", percentiles = {0.5, 0.75, 0.95, 0.99}, histogram = true)
+    @Counted(value = "ds.master.scheduler.failover.check.count")
+    @Timed(value = "ds.master.scheduler.failover.check.time", percentiles = {0.5, 0.75, 0.95, 0.99}, histogram = true)
     public void checkMasterFailover() {
         List<String> hosts = getNeedFailoverMasterServers();
         if (CollectionUtils.isEmpty(hosts)) {

File: dolphinscheduler-scheduler-plugin/dolphinscheduler-scheduler-quartz/src/main/java/org/apache/dolphinscheduler/scheduler/quartz/ProcessScheduleTask.java
Patch:
@@ -48,8 +48,8 @@ public class ProcessScheduleTask extends QuartzJobBean {
     @Autowired
     private ProcessService processService;
 
-    @Counted(value = "quartz_job_executed")
-    @Timed(value = "quartz_job_execution", percentiles = {0.5, 0.75, 0.95, 0.99}, histogram = true)
+    @Counted(value = "ds.master.quartz.job.executed")
+    @Timed(value = "ds.master.quartz.job.execution.time", percentiles = {0.5, 0.75, 0.95, 0.99}, histogram = true)
     @Override
     protected void executeInternal(JobExecutionContext context) {
         JobDataMap dataMap = context.getJobDetail().getJobDataMap();

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessServiceImpl.java
Patch:
@@ -408,7 +408,7 @@ private ProcessInstance setWaitingThreadProcess(Command command, ProcessInstance
      * @return create result
      */
     @Override
-    @Counted("dolphinscheduler_create_command_count")
+    @Counted("ds.workflow.create.command.count")
     public int createCommand(Command command) {
         int result = 0;
         if (command != null) {

File: dolphinscheduler-worker/src/main/java/org/apache/dolphinscheduler/server/worker/processor/TaskExecuteProcessor.java
Patch:
@@ -90,8 +90,8 @@ public class TaskExecuteProcessor implements NettyRequestProcessor {
     @Autowired
     private WorkerManagerThread workerManager;
 
-    @Counted(value = "dolphinscheduler_task_execution_count", description = "task execute total count")
-    @Timed(value = "dolphinscheduler_task_execution_timer", percentiles = {0.5, 0.75, 0.95, 0.99}, histogram = true)
+    @Counted(value = "ds.task.execution.count", description = "task execute total count")
+    @Timed(value = "ds.task.execution.duration", percentiles = {0.5, 0.75, 0.95, 0.99}, histogram = true)
     @Override
     public void process(Channel channel, Command command) {
         Preconditions.checkArgument(CommandType.TASK_EXECUTE_REQUEST == command.getType(),

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/configuration/AppConfiguration.java
Patch:
@@ -95,7 +95,7 @@ public RateLimitInterceptor createRateLimitInterceptor() {
     public void addInterceptors(InterceptorRegistry registry) {
         // i18n
         registry.addInterceptor(localeChangeInterceptor());
-        if (trafficConfiguration.isTrafficGlobalControlSwitch() || trafficConfiguration.isTrafficTenantControlSwitch()) {
+        if (trafficConfiguration.isGlobalSwitch() || trafficConfiguration.isTenantSwitch()) {
             registry.addInterceptor(createRateLimitInterceptor());
         }
         registry.addInterceptor(loginInterceptor())

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/interceptor/RateLimitInterceptor.java
Patch:
@@ -72,7 +72,7 @@ public RateLimiter load(String token) {
     @Override
     public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws ExecutionException {
         // tenant-level rate limit
-        if (trafficConfiguration.isTrafficTenantControlSwitch()) {
+        if (trafficConfiguration.isTenantSwitch()) {
             String token = request.getHeader("token");
             if (!StringUtils.isEmpty(token)) {
                 RateLimiter tenantRateLimiter = tenantRateLimiterCache.get(token);
@@ -84,7 +84,7 @@ public boolean preHandle(HttpServletRequest request, HttpServletResponse respons
             }
         }
         // global rate limit
-        if (trafficConfiguration.isTrafficGlobalControlSwitch()) {
+        if (trafficConfiguration.isGlobalSwitch()) {
             if (!globalRateLimiter.tryAcquire()) {
                 response.setStatus(HttpStatus.TOO_MANY_REQUESTS.value());
                 logger.warn("Too many request, reach global rate limit, current qps is {}", globalRateLimiter.getRate());
@@ -96,7 +96,7 @@ public boolean preHandle(HttpServletRequest request, HttpServletResponse respons
 
     public RateLimitInterceptor(TrafficConfiguration trafficConfiguration) {
         this.trafficConfiguration = trafficConfiguration;
-        if (trafficConfiguration.isTrafficGlobalControlSwitch()) {
+        if (trafficConfiguration.isGlobalSwitch()) {
             this.globalRateLimiter = RateLimiter.create(trafficConfiguration.getMaxGlobalQpsRate(), 1, TimeUnit.SECONDS);
         }
     }

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/configuration/TrafficConfigurationTest.java
Patch:
@@ -32,7 +32,7 @@ public class TrafficConfigurationTest extends AbstractControllerTest {
 
     @Test
     public void isTrafficGlobalControlSwitch() {
-        Assert.assertFalse(trafficConfiguration.isTrafficGlobalControlSwitch());
+        Assert.assertFalse(trafficConfiguration.isGlobalSwitch());
     }
 
     @Test
@@ -42,7 +42,7 @@ public void getMaxGlobalQpsLimit() {
 
     @Test
     public void isTrafficTenantControlSwitch() {
-        Assert.assertFalse(trafficConfiguration.isTrafficTenantControlSwitch());
+        Assert.assertFalse(trafficConfiguration.isTenantSwitch());
     }
 
     @Test
@@ -54,4 +54,4 @@ public void getDefaultTenantQpsLimit() {
     public void getCustomizeTenantQpsRate() {
         Assert.assertTrue(MapUtils.isEmpty(trafficConfiguration.getCustomizeTenantQpsRate()));
     }
-}
\ No newline at end of file
+}

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/WorkflowExecuteRunnable.java
Patch:
@@ -1103,7 +1103,7 @@ private TaskInstance findTaskIfExists(Long taskCode, int taskVersion) {
     }
 
     /**
-     * encapsulation task
+     * encapsulation task, this method will only create a new task instance, the return task instance will not contain id.
      *
      * @param processInstance process instance
      * @param taskNode        taskNode

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/dispatch/ExecutorDispatcher.java
Patch:
@@ -17,8 +17,6 @@
 
 package org.apache.dolphinscheduler.server.master.dispatch;
 
-import org.apache.dolphinscheduler.common.Constants;
-import org.apache.dolphinscheduler.common.thread.ThreadUtils;
 import org.apache.dolphinscheduler.remote.utils.Host;
 import org.apache.dolphinscheduler.server.master.dispatch.context.ExecutionContext;
 import org.apache.dolphinscheduler.server.master.dispatch.enums.ExecutorType;

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/WorkflowExecuteThreadPool.java
Patch:
@@ -105,7 +105,7 @@ public void startWorkflow(WorkflowExecuteRunnable workflowExecuteThread) {
     /**
      * Handle the events belong to the given workflow.
      */
-    public void executeEvent(WorkflowExecuteRunnable workflowExecuteThread) {
+    public void executeEvent(final WorkflowExecuteRunnable workflowExecuteThread) {
         if (!workflowExecuteThread.isStart() || workflowExecuteThread.eventSize() == 0) {
             return;
         }

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/task/CommonTaskProcessor.java
Patch:
@@ -119,7 +119,7 @@ public boolean dispatchTask() {
                 logger.info("submit task, but the status of the task {} is already running or delayed.", taskInstance.getName());
                 return true;
             }
-            logger.debug("task ready to submit: {}", taskInstance.getName());
+            logger.info("task ready to submit: taskInstanceId: {}", taskInstance.getId());
 
             TaskPriority taskPriority = new TaskPriority(processInstance.getProcessInstancePriority().getCode(),
                     processInstance.getId(), taskInstance.getProcessInstancePriority().getCode(),
@@ -134,7 +134,7 @@ public boolean dispatchTask() {
             taskPriority.setTaskExecutionContext(taskExecutionContext);
 
             taskUpdateQueue.put(taskPriority);
-            logger.info("master submit success, task : {}", taskInstance.getName());
+            logger.info("Master submit task to priority queue success, taskInstanceId : {}", taskInstance.getId());
             return true;
         } catch (Exception e) {
             logger.error("submit task error", e);

File: dolphinscheduler-master/src/test/java/org/apache/dolphinscheduler/server/master/runner/task/TaskProcessorFactoryTest.java
Patch:
@@ -19,6 +19,8 @@
 
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
 
+import java.lang.reflect.InvocationTargetException;
+
 import org.junit.Assert;
 import org.junit.Ignore;
 import org.junit.Test;
@@ -27,7 +29,7 @@
 public class TaskProcessorFactoryTest {
 
     @Test
-    public void testFactory() throws InstantiationException, IllegalAccessException {
+    public void testFactory() throws InvocationTargetException, InstantiationException, IllegalAccessException {
 
         TaskInstance taskInstance = new TaskInstance();
         taskInstance.setTaskType("shell");

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/utils/Host.java
Patch:
@@ -27,6 +27,8 @@
  */
 public class Host implements Serializable {
 
+    public static final Host EMPTY = new Host();
+
     /**
      * address
      */

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessServiceImpl.java
Patch:
@@ -766,7 +766,8 @@ private ProcessInstance generateNewProcessInstance(ProcessDefinition processDefi
         processInstance.setState(ExecutionStatus.RUNNING_EXECUTION);
         processInstance.setRecovery(Flag.NO);
         processInstance.setStartTime(new Date());
-        processInstance.setRestartTime(processInstance.getStartTime());
+        // the new process instance restart time is null.
+        processInstance.setRestartTime(null);
         processInstance.setRunTimes(1);
         processInstance.setMaxTryTimes(0);
         processInstance.setCommandParam(command.getCommandParam());
@@ -1285,7 +1286,7 @@ public TaskInstance submitTaskWithRetry(ProcessInstance processInstance, TaskIns
     @Override
     @Transactional(rollbackFor = Exception.class)
     public TaskInstance submitTask(ProcessInstance processInstance, TaskInstance taskInstance) {
-        logger.info("start submit task : {}, instance id:{}, state: {}",
+        logger.info("start submit task : {}, processInstance id:{}, state: {}",
             taskInstance.getName(), taskInstance.getProcessInstanceId(), processInstance.getState());
         //submit to db
         TaskInstance task = submitTaskInstanceToDB(taskInstance, processInstance);

File: dolphinscheduler-worker/src/main/java/org/apache/dolphinscheduler/server/worker/config/WorkerConfig.java
Patch:
@@ -21,9 +21,9 @@
 
 import org.springframework.boot.context.properties.ConfigurationProperties;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
-import org.springframework.stereotype.Component;
+import org.springframework.context.annotation.Configuration;
 
-@Component
+@Configuration
 @EnableConfigurationProperties
 @ConfigurationProperties("worker")
 public class WorkerConfig {

File: dolphinscheduler-worker/src/main/java/org/apache/dolphinscheduler/server/worker/processor/TaskCallbackService.java
Patch:
@@ -163,6 +163,8 @@ public void operationComplete(ChannelFuture future) throws Exception {
                     }
                 }
             });
+        } else {
+            logger.warn("Remote channel of taskInstanceId is null: {}, cannot send command: {}", taskInstanceId, command);
         }
     }
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/BaseService.java
Patch:
@@ -17,15 +17,15 @@
 
 package org.apache.dolphinscheduler.api.service;
 
+import java.util.List;
+import java.util.Map;
+
 import org.apache.dolphinscheduler.api.enums.Status;
 import org.apache.dolphinscheduler.api.utils.Result;
 import org.apache.dolphinscheduler.common.enums.AuthorizationType;
 import org.apache.dolphinscheduler.dao.entity.User;
 import org.slf4j.Logger;
 
-import java.util.List;
-import java.util.Map;
-
 /**
  * base service
  */

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java
Patch:
@@ -422,6 +422,7 @@ public enum Status {
     QUERY_CAN_USE_K8S_CLUSTER_ERROR(1300014, "login user query can used k8s cluster list error", "查询可用k8s集群错误"),
     RESOURCE_FULL_NAME_TOO_LONG_ERROR(1300015, "resource's fullname is too long error", "资源文件名过长"),
     TENANT_FULL_NAME_TOO_LONG_ERROR(1300016, "tenant's fullname is too long error", "租户名过长"),
+    USER_PASSWORD_LENGTH_ERROR(1300017, "user's password length error", "用户密码长度错误"),
 
     NO_CURRENT_OPERATING_PERMISSION(1400001, "The current user does not have this permission.", "当前用户无此权限"),
     FUNCTION_DISABLED(1400002, "The current feature is disabled.", "当前功能已被禁用"),

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/UsersServiceImpl.java
Patch:
@@ -80,6 +80,7 @@
 import java.util.stream.Collectors;
 
 import static org.apache.dolphinscheduler.api.constants.ApiFuncIdentificationConstant.USER_MANAGER;
+import static org.apache.dolphinscheduler.common.Constants.USER_PASSWORD_MAX_LENGTH;
 
 /**
  * users service impl
@@ -414,8 +415,8 @@ public Map<String, Object> updateUser(User loginUser, int userId,
         }
 
         if (StringUtils.isNotEmpty(userPassword)) {
-            if (!CheckUtils.checkPassword(userPassword)) {
-                putMsg(result, Status.REQUEST_PARAMS_NOT_VALID_ERROR, userPassword);
+            if (!CheckUtils.checkPasswordLength(userPassword)) {
+                putMsg(result, Status.USER_PASSWORD_LENGTH_ERROR);
                 return result;
             }
             user.setUserPassword(EncryptionUtils.getMd5(userPassword));

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/utils/CheckUtilsTest.java
Patch:
@@ -79,6 +79,9 @@ public void testCheckPassword() {
         assertFalse(CheckUtils.checkPassword("a"));
         assertFalse(CheckUtils.checkPassword("1234567890abcderfasdf2"));
         assertTrue(CheckUtils.checkPassword("123456"));
+        assertFalse(CheckUtils.checkPasswordLength("1"));
+        assertTrue(CheckUtils.checkPasswordLength("dolphinscheduler123"));
+        assertFalse(CheckUtils.checkPasswordLength("dolphinscheduler123456"));
     }
 
     /**

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/UsersServiceImpl.java
Patch:
@@ -241,6 +241,7 @@ public User createUser(UserType userType, String userId, String email) {
         user.setCreateTime(now);
         user.setUpdateTime(now);
         user.setQueue("");
+        user.setState(Flag.YES.getCode());
 
         // save user
         userMapper.insert(user);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/TaskDefinitionService.java
Patch:
@@ -60,10 +60,12 @@ Map<String, Object> createTaskBindsWorkFlow(User loginUser,
      *
      * @param loginUser login user
      * @param projectCode project code
+     * @param processCode process code
      * @param taskName task name
      */
     Map<String, Object> queryTaskDefinitionByName(User loginUser,
                                                   long projectCode,
+                                                  long processCode,
                                                   String taskName);
 
     /**

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/TaskDefinitionServiceImpl.java
Patch:
@@ -272,18 +272,19 @@ public Map<String, Object> createTaskBindsWorkFlow(User loginUser,
      *
      * @param loginUser login user
      * @param projectCode project code
+     * @param processCode process code
      * @param taskName task name
      */
     @Override
-    public Map<String, Object> queryTaskDefinitionByName(User loginUser, long projectCode, String taskName) {
+    public Map<String, Object> queryTaskDefinitionByName(User loginUser, long projectCode, long processCode, String taskName) {
         Project project = projectMapper.queryByCode(projectCode);
         //check user access for project
         Map<String, Object> result = projectService.checkProjectAndAuth(loginUser, project, projectCode,TASK_DEFINITION);
         if (result.get(Constants.STATUS) != Status.SUCCESS) {
             return result;
         }
 
-        TaskDefinition taskDefinition = taskDefinitionMapper.queryByName(project.getCode(), taskName);
+        TaskDefinition taskDefinition = taskDefinitionMapper.queryByName(project.getCode(), processCode, taskName);
         if (taskDefinition == null) {
             putMsg(result, Status.TASK_DEFINE_NOT_EXIST, taskName);
         } else {

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/TaskDefinitionServiceImplTest.java
Patch:
@@ -146,7 +146,7 @@ public void updateTaskDefinition() {
     public void queryTaskDefinitionByName() {
         String taskName = "task";
         long projectCode = 1L;
-
+        long processCode = 1L;
         Project project = getProject(projectCode);
         Mockito.when(projectMapper.queryByCode(projectCode)).thenReturn(project);
 
@@ -158,11 +158,11 @@ public void queryTaskDefinitionByName() {
         putMsg(result, Status.SUCCESS, projectCode);
         Mockito.when(projectService.checkProjectAndAuth(loginUser, project, projectCode,TASK_DEFINITION )).thenReturn(result);
 
-        Mockito.when(taskDefinitionMapper.queryByName(project.getCode(), taskName))
+        Mockito.when(taskDefinitionMapper.queryByName(project.getCode(), processCode, taskName))
             .thenReturn(new TaskDefinition());
 
         Map<String, Object> relation = taskDefinitionService
-            .queryTaskDefinitionByName(loginUser, projectCode, taskName);
+            .queryTaskDefinitionByName(loginUser, projectCode, processCode, taskName);
 
         Assert.assertEquals(Status.SUCCESS, relation.get(Constants.STATUS));
     }

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/TaskDefinitionMapper.java
Patch:
@@ -41,10 +41,12 @@ public interface TaskDefinitionMapper extends BaseMapper<TaskDefinition> {
      * query task definition by name
      *
      * @param projectCode projectCode
+     * @param processCode processCode
      * @param name name
      * @return task definition
      */
     TaskDefinition queryByName(@Param("projectCode") long projectCode,
+                               @Param("processCode") long processCode,
                                @Param("name") String name);
 
     /**

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/UdfFuncServiceImpl.java
Patch:
@@ -197,7 +197,7 @@ public Result<Object> updateUdfFunc(User loginUser,
                                         int resourceId) {
         Result<Object> result = new Result<>();
 
-        boolean canOperatorPermissions = canOperatorPermissions(loginUser, new Object[]{resourceId}, AuthorizationType.UDF, ApiFuncIdentificationConstant.UDF_FUNCTION_UPDATE);
+        boolean canOperatorPermissions = canOperatorPermissions(loginUser, new Object[]{udfFuncId}, AuthorizationType.UDF, ApiFuncIdentificationConstant.UDF_FUNCTION_UPDATE);
         if (!canOperatorPermissions){
             putMsg(result, Status.NO_CURRENT_OPERATING_PERMISSION);
             return result;

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ResourcesServiceTest.java
Patch:
@@ -267,10 +267,10 @@ public void testUpdateResource() {
         user.setId(2);
         user.setUserType(UserType.GENERAL_USER);
         PowerMockito.when(resourcePermissionCheckService.operationPermissionCheck(AuthorizationType.RESOURCE_FILE_ID, 2, ApiFuncIdentificationConstant.FILE_UPDATE, serviceLogger)).thenReturn(true);
-        PowerMockito.when(resourcePermissionCheckService.resourcePermissionCheck(AuthorizationType.RESOURCE_FILE_ID, new Object[]{1}, 2, serviceLogger)).thenReturn(true);
+        PowerMockito.when(resourcePermissionCheckService.resourcePermissionCheck(AuthorizationType.RESOURCE_FILE_ID, new Object[]{1}, 2, serviceLogger)).thenReturn(false);
         result = resourcesService.updateResource(user, 1, "ResourcesServiceTest", "ResourcesServiceTest", ResourceType.FILE, null);
         logger.info(result.toString());
-        Assert.assertEquals(Status.USER_NO_OPERATION_PERM.getMsg(), result.getMsg());
+        Assert.assertEquals(Status.NO_CURRENT_OPERATING_PERMISSION.getMsg(), result.getMsg());
 
         //RESOURCE_NOT_EXIST
         user.setId(1);

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/UdfFuncServiceTest.java
Patch:
@@ -144,21 +144,22 @@ public  void testUpdateUdfFunc() {
 
         //UDF_FUNCTION_NOT_EXIST
         PowerMockito.when(resourcePermissionCheckService.operationPermissionCheck(AuthorizationType.UDF, 1, ApiFuncIdentificationConstant.UDF_FUNCTION_UPDATE, serviceLogger)).thenReturn(true);
-        PowerMockito.when(resourcePermissionCheckService.resourcePermissionCheck(AuthorizationType.UDF, new Object[]{1}, 0, serviceLogger)).thenReturn(true);
+        PowerMockito.when(resourcePermissionCheckService.resourcePermissionCheck(AuthorizationType.UDF, new Object[]{12}, 0, serviceLogger)).thenReturn(true);
         Result<Object> result = udfFuncService.updateUdfFunc(getLoginUser(), 12, "UdfFuncServiceTest", "org.apache.dolphinscheduler.api.service.UdfFuncServiceTest", "String",
                 "UdfFuncServiceTest", "UdfFuncServiceTest", UdfType.HIVE, 1);
         logger.info(result.toString());
         Assert.assertTrue(Status.UDF_FUNCTION_NOT_EXIST.getCode() == result.getCode());
 
         //HDFS_NOT_STARTUP
+        PowerMockito.when(resourcePermissionCheckService.resourcePermissionCheck(AuthorizationType.UDF, new Object[]{1}, 0, serviceLogger)).thenReturn(true);
         result = udfFuncService.updateUdfFunc(getLoginUser(), 1, "UdfFuncServiceTest", "org.apache.dolphinscheduler.api.service.UdfFuncServiceTest", "String",
                 "UdfFuncServiceTest", "UdfFuncServiceTest", UdfType.HIVE, 1);
         logger.info(result.toString());
         Assert.assertTrue(Status.HDFS_NOT_STARTUP.getCode() == result.getCode());
 
         //RESOURCE_NOT_EXIST
         PowerMockito.when(resourcePermissionCheckService.operationPermissionCheck(AuthorizationType.UDF, 1, ApiFuncIdentificationConstant.UDF_FUNCTION_UPDATE, serviceLogger)).thenReturn(true);
-        PowerMockito.when(resourcePermissionCheckService.resourcePermissionCheck(AuthorizationType.UDF, new Object[]{12}, 0, serviceLogger)).thenReturn(true);
+        PowerMockito.when(resourcePermissionCheckService.resourcePermissionCheck(AuthorizationType.UDF, new Object[]{11}, 0, serviceLogger)).thenReturn(true);
         PowerMockito.when(udfFuncMapper.selectUdfById(11)).thenReturn(getUdfFunc());
         PowerMockito.when(PropertyUtils.getResUploadStartupState()).thenReturn(true);
         result = udfFuncService.updateUdfFunc(getLoginUser(), 11, "UdfFuncServiceTest", "org.apache.dolphinscheduler.api.service.UdfFuncServiceTest", "String",

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/processor/TaskRecallProcessor.java
Patch:
@@ -56,7 +56,7 @@ public void process(Channel channel, Command command) {
         Preconditions.checkArgument(CommandType.TASK_RECALL == command.getType(), String.format("invalid command type : %s", command.getType()));
         TaskRecallCommand recallCommand = JSONUtils.parseObject(command.getBody(), TaskRecallCommand.class);
         logger.info("taskRecallCommand : {}", recallCommand);
-        TaskEvent taskEvent = TaskEvent.newRecall(recallCommand, channel);
+        TaskEvent taskEvent = TaskEvent.newRecallEvent(recallCommand, channel);
         taskEventService.addEvent(taskEvent);
     }
 }

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/processor/queue/TaskEvent.java
Patch:
@@ -136,7 +136,7 @@ public static TaskEvent newResultEvent(TaskExecuteResponseCommand command, Chann
         return event;
     }
 
-    public static TaskEvent newRecall(TaskRecallCommand command, Channel channel) {
+    public static TaskEvent newRecallEvent(TaskRecallCommand command, Channel channel) {
         TaskEvent event = new TaskEvent();
         event.setTaskInstanceId(command.getTaskInstanceId());
         event.setProcessInstanceId(command.getProcessInstanceId());

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/WorkflowExecuteRunnable.java
Patch:
@@ -805,11 +805,11 @@ private boolean needComplementProcess() {
      */
     @Override
     public void run() {
-        if (this.taskInstanceMap.size() > 0) {
+        if (this.taskInstanceMap.size() > 0 || isStart) {
+            logger.warn("The workflow has already been started");
             return;
         }
         try {
-            isStart = false;
             buildFlowDag();
             initTaskQueue();
             submitPostNode(null);

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/NettyRemotingClient.java
Patch:
@@ -304,6 +304,8 @@ public void send(final Host host, final Command command) throws RemotingExceptio
                 logger.error(msg, future.cause());
                 throw new RemotingException(msg);
             }
+        } catch (RemotingException remotingException) {
+            throw remotingException;
         } catch (Exception e) {
             logger.error("Send command {} to address {} encounter error.", command, host.getAddress());
             throw new RemotingException(String.format("Send command : %s , to :%s encounter error", command, host.getAddress()), e);
@@ -385,10 +387,10 @@ public void close() {
                 if (this.responseFutureExecutor != null) {
                     this.responseFutureExecutor.shutdownNow();
                 }
+                logger.info("netty client closed");
             } catch (Exception ex) {
                 logger.error("netty client close exception", ex);
             }
-            logger.info("netty client closed");
         }
     }
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/DataSourceController.java
Patch:
@@ -256,7 +256,7 @@ public Result connectionTest(@ApiIgnore @RequestAttribute(value = Constants.SESS
     @ResponseStatus(HttpStatus.OK)
     @ApiException(DELETE_DATA_SOURCE_FAILURE)
     @AccessLogAnnotation(ignoreRequestArgs = "loginUser")
-    public Result delete(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,
+    public Result deleteDataSource(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,
                          @PathVariable("id") int id) {
         return dataSourceService.delete(loginUser, id);
     }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/EnvironmentController.java
Patch:
@@ -81,7 +81,7 @@ public class EnvironmentController extends BaseController {
     @ResponseStatus(HttpStatus.CREATED)
     @ApiException(CREATE_ENVIRONMENT_ERROR)
     @AccessLogAnnotation(ignoreRequestArgs = "loginUser")
-    public Result createProject(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,
+    public Result createEnvironment(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,
                                 @RequestParam("name") String name,
                                 @RequestParam("config") String config,
                                 @RequestParam(value = "description", required = false) String description,

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/SchedulerController.java
Patch:
@@ -182,7 +182,7 @@ public Result updateSchedule(@ApiIgnore @RequestAttribute(value = SESSION_USER)
     @PostMapping("/{id}/online")
     @ApiException(PUBLISH_SCHEDULE_ONLINE_ERROR)
     @AccessLogAnnotation(ignoreRequestArgs = "loginUser")
-    public Result online(@ApiIgnore @RequestAttribute(value = SESSION_USER) User loginUser,
+    public Result publishScheduleOnline(@ApiIgnore @RequestAttribute(value = SESSION_USER) User loginUser,
                          @ApiParam(name = "projectCode", value = "PROJECT_CODE", required = true) @PathVariable long projectCode,
                          @PathVariable("id") Integer id) {
         Map<String, Object> result = schedulerService.setScheduleState(loginUser, projectCode, id, ReleaseState.ONLINE);
@@ -204,7 +204,7 @@ public Result online(@ApiIgnore @RequestAttribute(value = SESSION_USER) User log
     @PostMapping("/{id}/offline")
     @ApiException(OFFLINE_SCHEDULE_ERROR)
     @AccessLogAnnotation(ignoreRequestArgs = "loginUser")
-    public Result offline(@ApiIgnore @RequestAttribute(value = SESSION_USER) User loginUser,
+    public Result offlineSchedule(@ApiIgnore @RequestAttribute(value = SESSION_USER) User loginUser,
                           @ApiParam(name = "projectCode", value = "PROJECT_CODE", required = true) @PathVariable long projectCode,
                           @PathVariable("id") Integer id) {
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/WorkerGroupController.java
Patch:
@@ -146,15 +146,15 @@ public Result queryAllWorkerGroups(@ApiIgnore @RequestAttribute(value = Constant
      * @param id group id
      * @return delete result code
      */
-    @ApiOperation(value = "deleteById", notes = "DELETE_WORKER_GROUP_BY_ID_NOTES")
+    @ApiOperation(value = "deleteWorkerGroupById", notes = "DELETE_WORKER_GROUP_BY_ID_NOTES")
     @ApiImplicitParams({
         @ApiImplicitParam(name = "id", value = "WORKER_GROUP_ID", required = true, dataType = "Int", example = "10"),
     })
     @DeleteMapping(value = "/{id}")
     @ResponseStatus(HttpStatus.OK)
     @ApiException(DELETE_WORKER_GROUP_FAIL)
     @AccessLogAnnotation(ignoreRequestArgs = "loginUser")
-    public Result deleteById(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,
+    public Result deleteWorkerGroupById(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,
                              @PathVariable("id") Integer id
     ) {
         Map<String, Object> result = workerGroupService.deleteWorkerGroupById(loginUser, id);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/k8s/K8sClientService.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.service.k8s;
+package org.apache.dolphinscheduler.api.k8s;
 
 import org.apache.dolphinscheduler.dao.entity.K8sNamespace;
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/k8s/K8sManager.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.service.k8s;
+package org.apache.dolphinscheduler.api.k8s;
 
 import org.apache.dolphinscheduler.dao.entity.K8s;
 import org.apache.dolphinscheduler.dao.mapper.K8sMapper;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/permission/PermissionCheck.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.service.permission;
+package org.apache.dolphinscheduler.api.permission;
 
 import org.apache.dolphinscheduler.common.enums.AuthorizationType;
 import org.apache.dolphinscheduler.common.enums.UserType;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/permission/ResourcePermissionCheckService.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.service.permission;
+package org.apache.dolphinscheduler.api.permission;
 
 import org.apache.dolphinscheduler.common.enums.AuthorizationType;
 import org.slf4j.Logger;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/permission/ResourcePermissionCheckServiceImpl.java
Patch:
@@ -31,7 +31,7 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.service.permission;
+package org.apache.dolphinscheduler.api.permission;
 
 import static java.util.stream.Collectors.toSet;
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/AlertPluginInstanceServiceImpl.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.dolphinscheduler.api.service.impl;
 
+import org.apache.dolphinscheduler.api.constants.ApiFuncIdentificationConstant;
 import org.apache.dolphinscheduler.api.enums.Status;
 import org.apache.dolphinscheduler.api.service.AlertPluginInstanceService;
 import org.apache.dolphinscheduler.api.utils.PageInfo;
@@ -176,7 +177,7 @@ public Map<String, Object> delete(User loginUser, int id) {
     public Map<String, Object> get(User loginUser, int id) {
         Map<String, Object> result = new HashMap<>();
         AlertPluginInstance alertPluginInstance = alertPluginInstanceMapper.selectById(id);
-        if (!canOperatorPermissions(loginUser,null, AuthorizationType.ALERT_PLUGIN_INSTANCE,ALART_LIST)) {
+        if (!canOperatorPermissions(loginUser,null, AuthorizationType.ALERT_PLUGIN_INSTANCE,ApiFuncIdentificationConstant.ALARM_INSTANCE_MANAGE)) {
             putMsg(result, Status.USER_NO_OPERATION_PERM);
             return result;
         }
@@ -210,7 +211,7 @@ public boolean checkExistPluginInstanceName(String pluginInstanceName) {
     public Result listPaging(User loginUser, String searchVal, int pageNo, int pageSize) {
 
         Result result = new Result();
-        if (!canOperatorPermissions(loginUser,null,AuthorizationType.ALERT_PLUGIN_INSTANCE,ALART_LIST)) {
+        if (!canOperatorPermissions(loginUser,null,AuthorizationType.ALERT_PLUGIN_INSTANCE, ApiFuncIdentificationConstant.ALARM_INSTANCE_MANAGE)) {
             putMsg(result,Status.USER_NO_OPERATION_PERM);
             return result;
         }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/BaseServiceImpl.java
Patch:
@@ -26,7 +26,7 @@
 import org.apache.dolphinscheduler.common.enums.UserType;
 import org.apache.dolphinscheduler.common.utils.DateUtils;
 import org.apache.dolphinscheduler.dao.entity.User;
-import org.apache.dolphinscheduler.service.permission.ResourcePermissionCheckService;
+import org.apache.dolphinscheduler.api.permission.ResourcePermissionCheckService;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/DataSourceServiceImpl.java
Patch:
@@ -32,7 +32,7 @@
 import org.apache.dolphinscheduler.plugin.datasource.api.datasource.BaseDataSourceParamDTO;
 import org.apache.dolphinscheduler.plugin.datasource.api.plugin.DataSourceClientProvider;
 import org.apache.dolphinscheduler.plugin.datasource.api.utils.DataSourceUtils;
-import org.apache.dolphinscheduler.service.permission.ResourcePermissionCheckService;
+import org.apache.dolphinscheduler.api.permission.ResourcePermissionCheckService;
 import org.apache.dolphinscheduler.spi.datasource.BaseConnectionParam;
 import org.apache.dolphinscheduler.spi.datasource.ConnectionParam;
 import org.apache.dolphinscheduler.spi.enums.DbType;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/K8SNamespaceServiceImpl.java
Patch:
@@ -26,7 +26,7 @@
 import org.apache.dolphinscheduler.dao.entity.K8sNamespace;
 import org.apache.dolphinscheduler.dao.entity.User;
 import org.apache.dolphinscheduler.dao.mapper.K8sNamespaceMapper;
-import org.apache.dolphinscheduler.service.k8s.K8sClientService;
+import org.apache.dolphinscheduler.api.k8s.K8sClientService;
 
 import org.apache.commons.lang3.StringUtils;
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProjectServiceImpl.java
Patch:
@@ -36,7 +36,7 @@
 import org.apache.dolphinscheduler.dao.mapper.ProjectMapper;
 import org.apache.dolphinscheduler.dao.mapper.ProjectUserMapper;
 import org.apache.dolphinscheduler.dao.mapper.UserMapper;
-import org.apache.dolphinscheduler.service.permission.ResourcePermissionCheckService;
+import org.apache.dolphinscheduler.api.permission.ResourcePermissionCheckService;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/TaskDefinitionServiceImpl.java
Patch:
@@ -45,7 +45,7 @@
 import org.apache.dolphinscheduler.dao.mapper.TaskDefinitionLogMapper;
 import org.apache.dolphinscheduler.dao.mapper.TaskDefinitionMapper;
 import org.apache.dolphinscheduler.plugin.task.api.parameters.ParametersNode;
-import org.apache.dolphinscheduler.service.permission.PermissionCheck;
+import org.apache.dolphinscheduler.api.permission.PermissionCheck;
 import org.apache.dolphinscheduler.service.process.ProcessService;
 import org.apache.dolphinscheduler.service.task.TaskPluginManager;
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/UsersServiceImpl.java
Patch:
@@ -59,7 +59,7 @@
 import org.apache.dolphinscheduler.dao.mapper.UDFUserMapper;
 import org.apache.dolphinscheduler.dao.mapper.UserMapper;
 import org.apache.dolphinscheduler.dao.utils.ResourceProcessDefinitionUtils;
-import org.apache.dolphinscheduler.service.permission.ResourcePermissionCheckService;
+import org.apache.dolphinscheduler.api.permission.ResourcePermissionCheckService;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/k8s/K8sManagerTest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.service.k8s;
+package org.apache.dolphinscheduler.api.k8s;
 
 import org.apache.dolphinscheduler.dao.entity.K8s;
 import org.apache.dolphinscheduler.dao.mapper.K8sMapper;

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/permission/ResourcePermissionCheckServiceTest.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.service.permission;
+package org.apache.dolphinscheduler.api.permission;
 
 
 import com.google.common.collect.Lists;

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/AccessTokenServiceTest.java
Patch:
@@ -42,7 +42,7 @@
 import java.util.Map;
 import java.util.Optional;
 
-import org.apache.dolphinscheduler.service.permission.ResourcePermissionCheckService;
+import org.apache.dolphinscheduler.api.permission.ResourcePermissionCheckService;
 import org.assertj.core.util.Lists;
 import org.junit.Assert;
 import org.junit.Test;

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/AlertGroupServiceTest.java
Patch:
@@ -39,7 +39,7 @@
 import java.util.List;
 import java.util.Map;
 
-import org.apache.dolphinscheduler.service.permission.ResourcePermissionCheckService;
+import org.apache.dolphinscheduler.api.permission.ResourcePermissionCheckService;
 import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/AlertPluginInstanceServiceTest.java
Patch:
@@ -36,7 +36,7 @@
 import java.util.List;
 import java.util.Map;
 
-import org.apache.dolphinscheduler.service.permission.ResourcePermissionCheckService;
+import org.apache.dolphinscheduler.api.permission.ResourcePermissionCheckService;
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/DataSourceServiceTest.java
Patch:
@@ -40,7 +40,7 @@
 import org.apache.dolphinscheduler.plugin.datasource.mysql.param.MySQLDataSourceParamDTO;
 import org.apache.dolphinscheduler.plugin.datasource.oracle.param.OracleDataSourceParamDTO;
 import org.apache.dolphinscheduler.plugin.datasource.postgresql.param.PostgreSQLDataSourceParamDTO;
-import org.apache.dolphinscheduler.service.permission.ResourcePermissionCheckService;
+import org.apache.dolphinscheduler.api.permission.ResourcePermissionCheckService;
 import org.apache.dolphinscheduler.spi.datasource.ConnectionParam;
 import org.apache.dolphinscheduler.spi.enums.DbConnectType;
 import org.apache.dolphinscheduler.spi.enums.DbType;

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/DqExecuteResultServiceTest.java
Patch:
@@ -38,7 +38,7 @@
 import java.util.Date;
 import java.util.List;
 
-import org.apache.dolphinscheduler.service.permission.ResourcePermissionCheckService;
+import org.apache.dolphinscheduler.api.permission.ResourcePermissionCheckService;
 import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/DqRuleServiceTest.java
Patch:
@@ -44,7 +44,7 @@
 import org.apache.dolphinscheduler.plugin.task.api.enums.dp.OptionSourceType;
 import org.apache.dolphinscheduler.plugin.task.api.enums.dp.RuleType;
 import org.apache.dolphinscheduler.plugin.task.api.enums.dp.ValueType;
-import org.apache.dolphinscheduler.service.permission.ResourcePermissionCheckService;
+import org.apache.dolphinscheduler.api.permission.ResourcePermissionCheckService;
 import org.apache.dolphinscheduler.spi.enums.DbType;
 import org.apache.dolphinscheduler.spi.params.base.FormType;
 

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/EnvironmentServiceTest.java
Patch:
@@ -38,7 +38,7 @@
 import java.util.List;
 import java.util.Map;
 
-import org.apache.dolphinscheduler.service.permission.ResourcePermissionCheckService;
+import org.apache.dolphinscheduler.api.permission.ResourcePermissionCheckService;
 import org.assertj.core.util.Lists;
 import org.junit.After;
 import org.junit.Assert;

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ExecutorServiceTest.java
Patch:
@@ -46,7 +46,7 @@
 import org.apache.dolphinscheduler.dao.mapper.TaskDefinitionMapper;
 import org.apache.dolphinscheduler.dao.mapper.TaskGroupQueueMapper;
 import org.apache.dolphinscheduler.plugin.task.api.enums.ExecutionStatus;
-import org.apache.dolphinscheduler.service.permission.ResourcePermissionCheckService;
+import org.apache.dolphinscheduler.api.permission.ResourcePermissionCheckService;
 import org.apache.dolphinscheduler.service.process.ProcessService;
 
 import java.util.ArrayList;

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/K8SNamespaceServiceTest.java
Patch:
@@ -29,15 +29,15 @@
 import org.apache.dolphinscheduler.dao.entity.User;
 import org.apache.dolphinscheduler.dao.mapper.K8sNamespaceMapper;
 import org.apache.dolphinscheduler.dao.mapper.UserMapper;
-import org.apache.dolphinscheduler.service.k8s.K8sClientService;
+import org.apache.dolphinscheduler.api.k8s.K8sClientService;
 
 import org.apache.commons.collections.CollectionUtils;
 
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
 
-import org.apache.dolphinscheduler.service.permission.ResourcePermissionCheckService;
+import org.apache.dolphinscheduler.api.permission.ResourcePermissionCheckService;
 import org.junit.After;
 import org.junit.Assert;
 import org.junit.Before;

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/MonitorServiceTest.java
Patch:
@@ -29,7 +29,7 @@
 import org.apache.dolphinscheduler.dao.MonitorDBDao;
 import org.apache.dolphinscheduler.dao.entity.MonitorRecord;
 import org.apache.dolphinscheduler.dao.entity.User;
-import org.apache.dolphinscheduler.service.permission.ResourcePermissionCheckService;
+import org.apache.dolphinscheduler.api.permission.ResourcePermissionCheckService;
 import org.apache.dolphinscheduler.service.registry.RegistryClient;
 import org.apache.dolphinscheduler.spi.enums.DbType;
 

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProjectServiceTest.java
Patch:
@@ -35,7 +35,7 @@
 
 import org.apache.commons.collections.CollectionUtils;
 
-import org.apache.dolphinscheduler.service.permission.ResourcePermissionCheckService;
+import org.apache.dolphinscheduler.api.permission.ResourcePermissionCheckService;
 import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/QueueServiceTest.java
Patch:
@@ -36,7 +36,7 @@
 import java.util.List;
 import java.util.Map;
 
-import org.apache.dolphinscheduler.service.permission.ResourcePermissionCheckService;
+import org.apache.dolphinscheduler.api.permission.ResourcePermissionCheckService;
 import org.junit.After;
 import org.junit.Assert;
 import org.junit.Before;

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ResourcesServiceTest.java
Patch:
@@ -41,7 +41,7 @@
 import org.apache.dolphinscheduler.dao.mapper.TenantMapper;
 import org.apache.dolphinscheduler.dao.mapper.UdfFuncMapper;
 import org.apache.dolphinscheduler.dao.mapper.UserMapper;
-import org.apache.dolphinscheduler.service.permission.ResourcePermissionCheckService;
+import org.apache.dolphinscheduler.api.permission.ResourcePermissionCheckService;
 import org.apache.dolphinscheduler.spi.enums.ResourceType;
 
 import org.apache.commons.collections.CollectionUtils;
@@ -352,7 +352,7 @@ public void testQueryResourceListPaging() {
         PowerMockito.when(resourcePermissionCheckService.resourcePermissionCheck(AuthorizationType.RESOURCE_FILE_ID, null, 0, serviceLogger)).thenReturn(true);
         PowerMockito.when(resourcePermissionCheckService.userOwnedResourceIdsAcquisition(AuthorizationType.RESOURCE_FILE_ID, 1, resourceLogger)).thenReturn(getSetIds());
 
-        Mockito.when(resourcesMapper.queryResourcePaging(Mockito.any(Page.class), eq(-1), eq(0), eq(1), eq("test"), Mockito.any())).thenReturn(resourcePage);
+        Mockito.when(resourcesMapper.queryResourcePaging(Mockito.any(Page.class), eq(-1), eq(0), eq("test"), Mockito.any())).thenReturn(resourcePage);
         Result result = resourcesService.queryResourceListPaging(loginUser, -1, ResourceType.FILE, "test", 1, 10);
         logger.info(result.toString());
         Assert.assertEquals(Status.SUCCESS.getCode(), (int) result.getCode());

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/TaskGroupServiceTest.java
Patch:
@@ -31,7 +31,7 @@
 import org.apache.dolphinscheduler.dao.mapper.TaskGroupMapper;
 import org.apache.dolphinscheduler.dao.mapper.TaskGroupQueueMapper;
 import org.apache.dolphinscheduler.dao.mapper.UserMapper;
-import org.apache.dolphinscheduler.service.permission.ResourcePermissionCheckService;
+import org.apache.dolphinscheduler.api.permission.ResourcePermissionCheckService;
 import org.apache.dolphinscheduler.service.process.ProcessService;
 
 import java.util.ArrayList;

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/TenantServiceTest.java
Patch:
@@ -38,7 +38,7 @@
 import org.apache.dolphinscheduler.dao.mapper.ProcessInstanceMapper;
 import org.apache.dolphinscheduler.dao.mapper.TenantMapper;
 import org.apache.dolphinscheduler.dao.mapper.UserMapper;
-import org.apache.dolphinscheduler.service.permission.ResourcePermissionCheckService;
+import org.apache.dolphinscheduler.api.permission.ResourcePermissionCheckService;
 import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/UdfFuncServiceTest.java
Patch:
@@ -43,7 +43,7 @@
 import java.util.List;
 import java.util.Set;
 
-import org.apache.dolphinscheduler.service.permission.ResourcePermissionCheckService;
+import org.apache.dolphinscheduler.api.permission.ResourcePermissionCheckService;
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/UsersServiceTest.java
Patch:
@@ -33,7 +33,7 @@
 import org.apache.dolphinscheduler.common.utils.EncryptionUtils;
 import org.apache.dolphinscheduler.dao.entity.*;
 import org.apache.dolphinscheduler.dao.mapper.*;
-import org.apache.dolphinscheduler.service.permission.ResourcePermissionCheckService;
+import org.apache.dolphinscheduler.api.permission.ResourcePermissionCheckService;
 import org.apache.dolphinscheduler.spi.enums.ResourceType;
 import org.junit.After;
 import org.junit.Assert;

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/DataSourceMapper.java
Patch:
@@ -108,5 +108,5 @@ IPage<DataSource> selectPaging(IPage<DataSource> page,
      * @param searchVal
      * @return
      */
-    IPage<DataSource> selectPagingByIds(Page<DataSource> dataSourcePage, @Param("ids")List<Integer> ids, @Param("searchVal")String searchVal);
+    IPage<DataSource> selectPagingByIds(Page<DataSource> dataSourcePage, @Param("dataSourceIds")List<Integer> dataSourceIds, @Param("name")String name);
 }

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/ResourceMapper.java
Patch:
@@ -64,7 +64,6 @@ List<Resource> queryResourceListAuthored(@Param("userId") int userId,
     IPage<Resource> queryResourcePaging(IPage<Resource> page,
                                         @Param("id") int id,
                                         @Param("type") int type,
-                                        @Param("userId") int userId,
                                         @Param("searchVal") String searchVal,
                                         @Param("resIds") List<Integer> resIds);
 

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/ProcessUtils.java
Patch:
@@ -19,6 +19,8 @@
 
 import org.apache.dolphinscheduler.plugin.task.api.utils.OSUtils;
 
+import org.apache.commons.lang3.SystemUtils;
+
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
@@ -76,7 +78,7 @@ public static String getPidsStr(int processId) throws Exception {
         StringBuilder sb = new StringBuilder();
         Matcher mat = null;
         // pstree pid get sub pids
-        if (OSUtils.isMacOS()) {
+        if (SystemUtils.IS_OS_MAC) {
             String pids = OSUtils.exeCmd(String.format("%s -sp %d", TaskConstants.PSTREE, processId));
             if (null != pids) {
                 mat = MACPATTERN.matcher(pids);

File: dolphinscheduler-task-plugin/dolphinscheduler-task-datax/src/main/java/org/apache/dolphinscheduler/plugin/task/datax/DataxTask.java
Patch:
@@ -32,7 +32,6 @@
 import org.apache.dolphinscheduler.plugin.task.api.parser.ParamUtils;
 import org.apache.dolphinscheduler.plugin.task.api.parser.ParameterUtils;
 import org.apache.dolphinscheduler.plugin.task.api.utils.MapUtils;
-import org.apache.dolphinscheduler.plugin.task.api.utils.OSUtils;
 import org.apache.dolphinscheduler.spi.datasource.BaseConnectionParam;
 import org.apache.dolphinscheduler.spi.enums.DbType;
 import org.apache.dolphinscheduler.spi.enums.Flag;
@@ -41,6 +40,7 @@
 
 import org.apache.commons.collections4.CollectionUtils;
 import org.apache.commons.io.FileUtils;
+import org.apache.commons.lang3.SystemUtils;
 
 import java.io.File;
 import java.nio.charset.StandardCharsets;
@@ -382,7 +382,7 @@ private String buildShellCommandFile(String jobConfigFilePath, Map<String, Prope
         String fileName = String.format("%s/%s_node.%s",
                 taskExecutionContext.getExecutePath(),
                 taskExecutionContext.getTaskAppId(),
-                OSUtils.isWindows() ? "bat" : "sh");
+                SystemUtils.IS_OS_WINDOWS ? "bat" : "sh");
 
         Path path = new File(fileName).toPath();
 
@@ -408,7 +408,7 @@ private String buildShellCommandFile(String jobConfigFilePath, Map<String, Prope
         Set<PosixFilePermission> perms = PosixFilePermissions.fromString(RWXR_XR_X);
         FileAttribute<Set<PosixFilePermission>> attr = PosixFilePermissions.asFileAttribute(perms);
 
-        if (OSUtils.isWindows()) {
+        if (SystemUtils.IS_OS_WINDOWS) {
             Files.createFile(path);
         } else {
             Files.createFile(path, attr);

File: dolphinscheduler-task-plugin/dolphinscheduler-task-seatunnel/src/main/java/org/apache/dolphinscheduler/plugin/task/seatunnel/SeatunnelTask.java
Patch:
@@ -28,10 +28,10 @@
 import org.apache.dolphinscheduler.plugin.task.api.parameters.AbstractParameters;
 import org.apache.dolphinscheduler.plugin.task.api.parser.ParamUtils;
 import org.apache.dolphinscheduler.plugin.task.api.parser.ParameterUtils;
-import org.apache.dolphinscheduler.plugin.task.api.utils.OSUtils;
 import org.apache.dolphinscheduler.spi.utils.JSONUtils;
 
 import org.apache.commons.collections4.MapUtils;
+import org.apache.commons.lang3.SystemUtils;
 
 import java.io.File;
 import java.nio.file.Files;
@@ -122,7 +122,7 @@ private String buildCommand() throws Exception {
         // generate scripts
         String fileName = String.format("%s/%s_node.%s",
                 taskExecutionContext.getExecutePath(),
-                taskExecutionContext.getTaskAppId(), OSUtils.isWindows() ? "bat" : "sh");
+                taskExecutionContext.getTaskAppId(), SystemUtils.IS_OS_WINDOWS ? "bat" : "sh");
 
         Path path = new File(fileName).toPath();
 
@@ -140,7 +140,7 @@ private String buildCommand() throws Exception {
         Set<PosixFilePermission> perms = PosixFilePermissions.fromString(RWXR_XR_X);
         FileAttribute<Set<PosixFilePermission>> attr = PosixFilePermissions.asFileAttribute(perms);
 
-        if (OSUtils.isWindows()) {
+        if (SystemUtils.IS_OS_WINDOWS) {
             Files.createFile(path);
         } else {
             Files.createFile(path, attr);

File: dolphinscheduler-task-plugin/dolphinscheduler-task-shell/src/main/java/org/apache/dolphinscheduler/plugin/task/shell/ShellTask.java
Patch:
@@ -28,10 +28,10 @@
 import org.apache.dolphinscheduler.plugin.task.api.parameters.AbstractParameters;
 import org.apache.dolphinscheduler.plugin.task.api.parser.ParamUtils;
 import org.apache.dolphinscheduler.plugin.task.api.parser.ParameterUtils;
-import org.apache.dolphinscheduler.plugin.task.api.utils.OSUtils;
 import org.apache.dolphinscheduler.spi.utils.JSONUtils;
 
 import org.apache.commons.collections4.MapUtils;
+import org.apache.commons.lang3.SystemUtils;
 
 import java.io.File;
 import java.nio.file.Files;
@@ -122,7 +122,7 @@ private String buildCommand() throws Exception {
         // generate scripts
         String fileName = String.format("%s/%s_node.%s",
                 taskExecutionContext.getExecutePath(),
-                taskExecutionContext.getTaskAppId(), OSUtils.isWindows() ? "bat" : "sh");
+                taskExecutionContext.getTaskAppId(), SystemUtils.IS_OS_WINDOWS ? "bat" : "sh");
 
         File file = new File(fileName);
         Path path = file.toPath();
@@ -141,7 +141,7 @@ private String buildCommand() throws Exception {
         Set<PosixFilePermission> perms = PosixFilePermissions.fromString(RWXR_XR_X);
         FileAttribute<Set<PosixFilePermission>> attr = PosixFilePermissions.asFileAttribute(perms);
 
-        if (OSUtils.isWindows()) {
+        if (SystemUtils.IS_OS_WINDOWS) {
             Files.createFile(path);
         } else {
             if (!file.getParentFile().exists()) {

File: dolphinscheduler-task-plugin/dolphinscheduler-task-spark/src/main/java/org/apache/dolphinscheduler/plugin/task/spark/SparkTask.java
Patch:
@@ -28,10 +28,11 @@
 import org.apache.dolphinscheduler.plugin.task.api.parser.ParameterUtils;
 import org.apache.dolphinscheduler.plugin.task.api.utils.ArgsUtils;
 import org.apache.dolphinscheduler.plugin.task.api.utils.MapUtils;
-import org.apache.dolphinscheduler.plugin.task.api.utils.OSUtils;
 import org.apache.dolphinscheduler.spi.utils.JSONUtils;
 import org.apache.dolphinscheduler.spi.utils.StringUtils;
 
+import org.apache.commons.lang3.SystemUtils;
+
 import java.io.File;
 import java.io.IOException;
 import java.nio.file.Files;
@@ -243,7 +244,7 @@ private String generateScriptFile() {
             Set<PosixFilePermission> perms = PosixFilePermissions.fromString(RWXR_XR_X);
             FileAttribute<Set<PosixFilePermission>> attr = PosixFilePermissions.asFileAttribute(perms);
             try {
-                if (OSUtils.isWindows()) {
+                if (SystemUtils.IS_OS_WINDOWS) {
                     Files.createFile(path);
                 } else {
                     if (!file.getParentFile().exists()) {

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/model/TaskNode.java
Patch:
@@ -272,7 +272,7 @@ public void setRunFlag(String runFlag) {
         this.runFlag = runFlag;
     }
 
-    public Boolean isForbidden() {
+    public boolean isForbidden() {
         return (!StringUtils.isEmpty(this.runFlag)
                 && this.runFlag.equals(Constants.FLOWNODE_RUN_FLAG_FORBIDDEN));
     }

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/FailoverExecuteThread.java
Patch:
@@ -62,7 +62,7 @@ public void run() {
             } catch (Exception e) {
                 logger.error("failover execute error", e);
             } finally {
-                ThreadUtils.sleep((long) Constants.SLEEP_TIME_MILLIS * masterConfig.getFailoverInterval() * 60);
+                ThreadUtils.sleep(Constants.SLEEP_TIME_MILLIS * masterConfig.getFailoverInterval() * 60);
             }
         }
     }

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterSchedulerService.java
Patch:
@@ -21,7 +21,6 @@
 import org.apache.dolphinscheduler.common.enums.SlotCheckState;
 import org.apache.dolphinscheduler.common.thread.Stopper;
 import org.apache.dolphinscheduler.common.thread.ThreadUtils;
-import org.apache.dolphinscheduler.common.utils.JSONUtils;
 import org.apache.dolphinscheduler.common.utils.NetUtils;
 import org.apache.dolphinscheduler.common.utils.OSUtils;
 import org.apache.dolphinscheduler.dao.entity.Command;
@@ -31,6 +30,7 @@
 import org.apache.dolphinscheduler.server.master.cache.ProcessInstanceExecCacheManager;
 import org.apache.dolphinscheduler.server.master.config.MasterConfig;
 import org.apache.dolphinscheduler.server.master.dispatch.executor.NettyExecutorManager;
+import org.apache.dolphinscheduler.server.master.metrics.MasterServerMetrics;
 import org.apache.dolphinscheduler.server.master.registry.ServerNodeManager;
 import org.apache.dolphinscheduler.service.alert.ProcessAlertManager;
 import org.apache.dolphinscheduler.service.process.ProcessService;
@@ -133,6 +133,7 @@ public void run() {
             try {
                 boolean runCheckFlag = OSUtils.checkResource(masterConfig.getMaxCpuLoadAvg(), masterConfig.getReservedMemory());
                 if (!runCheckFlag) {
+                    MasterServerMetrics.incMasterOverload();
                     Thread.sleep(Constants.SLEEP_TIME_MILLIS);
                     continue;
                 }
@@ -159,6 +160,7 @@ private void scheduleProcess() throws Exception {
         if (CollectionUtils.isEmpty(processInstances)) {
             return;
         }
+        MasterServerMetrics.incMasterConsumeCommand(commands.size());
 
         for (ProcessInstance processInstance : processInstances) {
             if (processInstance == null) {

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/task/CommonTaskProcessor.java
Patch:
@@ -43,7 +43,7 @@
 @AutoService(ITaskProcessor.class)
 public class CommonTaskProcessor extends BaseTaskProcessor {
 
-    private TaskPriorityQueue taskUpdateQueue;
+    private TaskPriorityQueue<TaskPriority> taskUpdateQueue;
 
     private NettyExecutorManager nettyExecutorManager = SpringApplicationContext.getBean(NettyExecutorManager.class);
 
@@ -110,7 +110,7 @@ public boolean dispatchTask() {
                 this.initQueue();
             }
             if (taskInstance.getState().typeIsFinished()) {
-                logger.info(String.format("submit task , but task [%s] state [%s] is already  finished. ", taskInstance.getName(), taskInstance.getState().toString()));
+                logger.info("submit task , but task [{}] state [{}] is already  finished. ", taskInstance.getName(), taskInstance.getState());
                 return true;
             }
             // task cannot be submitted because its execution state is RUNNING or DELAY.
@@ -134,7 +134,7 @@ public boolean dispatchTask() {
             taskPriority.setTaskExecutionContext(taskExecutionContext);
 
             taskUpdateQueue.put(taskPriority);
-            logger.info(String.format("master submit success, task : %s", taskInstance.getName()));
+            logger.info("master submit success, task : {}", taskInstance.getName());
             return true;
         } catch (Exception e) {
             logger.error("submit task error", e);

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/processor/StateEventCallbackService.java
Patch:
@@ -86,7 +86,7 @@ private NettyRemoteChannel newRemoteChannel(Host host) {
         return null;
     }
 
-    public int pause(int ntries) {
+    public long pause(int ntries) {
         return SLEEP_TIME_MILLIS * RETRY_BACKOFF[ntries % RETRY_BACKOFF.length];
     }
 

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessServiceImpl.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.dolphinscheduler.service.process;
 
+import io.micrometer.core.annotation.Counted;
 import static java.util.stream.Collectors.toSet;
 import static org.apache.dolphinscheduler.common.Constants.CMDPARAM_COMPLEMENT_DATA_END_DATE;
 import static org.apache.dolphinscheduler.common.Constants.CMDPARAM_COMPLEMENT_DATA_START_DATE;
@@ -406,6 +407,7 @@ private ProcessInstance setWaitingThreadProcess(Command command, ProcessInstance
      * @return create result
      */
     @Override
+    @Counted("dolphinscheduler_create_command_count")
     public int createCommand(Command command) {
         int result = 0;
         if (command != null) {

File: dolphinscheduler-worker/src/main/java/org/apache/dolphinscheduler/server/worker/processor/TaskCallbackService.java
Patch:
@@ -119,7 +119,7 @@ private NettyRemoteChannel getRemoteChannel(int taskInstanceId) {
         return null;
     }
 
-    public int pause(int ntries) {
+    public long pause(int ntries) {
         return SLEEP_TIME_MILLIS * RETRY_BACKOFF[ntries % RETRY_BACKOFF.length];
     }
 

File: dolphinscheduler-worker/src/main/java/org/apache/dolphinscheduler/server/worker/runner/WorkerExecService.java
Patch:
@@ -17,6 +17,8 @@
 
 package org.apache.dolphinscheduler.server.worker.runner;
 
+import org.apache.dolphinscheduler.server.worker.metrics.WorkerServerMetrics;
+
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.ThreadPoolExecutor;
@@ -52,6 +54,7 @@ public WorkerExecService(ExecutorService execService, ConcurrentHashMap<Integer,
         this.execService = execService;
         this.listeningExecutorService = MoreExecutors.listeningDecorator(this.execService);
         this.taskExecuteThreadMap = taskExecuteThreadMap;
+        WorkerServerMetrics.registerWorkerRunningTaskGauge(taskExecuteThreadMap::size);
     }
 
     public void submit(TaskExecuteThread taskExecuteThread) {

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-hive/src/main/java/org/apache/dolphinscheduler/plugin/datasource/hive/HiveDataSourceClient.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.dolphinscheduler.plugin.datasource.hive;
 
+import com.google.common.util.concurrent.ThreadFactoryBuilder;
 import com.zaxxer.hikari.HikariDataSource;
 import org.apache.dolphinscheduler.plugin.datasource.api.client.CommonDataSourceClient;
 import org.apache.dolphinscheduler.plugin.datasource.api.provider.JDBCDataSourceProvider;
@@ -60,7 +61,8 @@ public HiveDataSourceClient(BaseConnectionParam baseConnectionParam, DbType dbTy
     @Override
     protected void preInit() {
         logger.info("PreInit in {}", getClass().getName());
-        this.kerberosRenewalService = Executors.newSingleThreadScheduledExecutor();
+        this.kerberosRenewalService = Executors.newSingleThreadScheduledExecutor(
+                new ThreadFactoryBuilder().setNameFormat("Hive-Kerberos-Renewal-Thread-").setDaemon(true).build());
     }
 
     @Override

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/NettyRemotingServer.java
Patch:
@@ -103,8 +103,8 @@ public class NettyRemotingServer {
      */
     public NettyRemotingServer(final NettyServerConfig serverConfig) {
         this.serverConfig = serverConfig;
-        ThreadFactory bossThreadFactory = new ThreadFactoryBuilder().setNameFormat("NettyServerBossThread_%s").build();
-        ThreadFactory workerThreadFactory = new ThreadFactoryBuilder().setNameFormat("NettyServerWorkerThread_%s").build();
+        ThreadFactory bossThreadFactory = new ThreadFactoryBuilder().setDaemon(true).setNameFormat("NettyServerBossThread_%s").build();
+        ThreadFactory workerThreadFactory = new ThreadFactoryBuilder().setDaemon(true).setNameFormat("NettyServerWorkerThread_%s").build();
         if (Epoll.isAvailable()) {
             this.bossGroup = new EpollEventLoopGroup(1, bossThreadFactory);
             this.workGroup = new EpollEventLoopGroup(serverConfig.getWorkerThread(), workerThreadFactory);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ResourcesServiceImpl.java
Patch:
@@ -223,7 +223,7 @@ public Result<Object> createResource(User loginUser,
                                          int pid,
                                          String currentDir) {
         Result<Object> result = new Result<>();
-        String funcPermissionKey = type.equals(ResourceType.FILE) ? ApiFuncIdentificationConstant.FILE_ONLINE_CREATE : ApiFuncIdentificationConstant.UDF_FOLDER_ONLINE_CREATE;
+        String funcPermissionKey = type.equals(ResourceType.FILE) ? ApiFuncIdentificationConstant.FILE_UPLOAD : ApiFuncIdentificationConstant.UDF_UPLOAD;
         boolean canOperatorPermissions = canOperatorPermissions(loginUser, null, AuthorizationType.RESOURCE_FILE_ID, funcPermissionKey);
         if (!canOperatorPermissions){
             putMsg(result, Status.NO_CURRENT_OPERATING_PERMISSION);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/TenantServiceImpl.java
Patch:
@@ -132,11 +132,8 @@ public Map<String, Object> createTenant(User loginUser,
         if (PropertyUtils.getResUploadStartupState()) {
             storageOperate.createTenantDirIfNotExists(tenantCode);
         }
-
         result.put(Constants.DATA_LIST, tenant);
         putMsg(result, Status.SUCCESS);
-        permissionPostHandle(AuthorizationType.TENANT, loginUser.getId(), Collections.singletonList(tenant.getId()),logger);
-
         return result;
     }
 

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ResourcesServiceTest.java
Patch:
@@ -138,7 +138,7 @@ public void setUp() {
     @Test
     public void testCreateResource() {
 
-        PowerMockito.when(resourcePermissionCheckService.operationPermissionCheck(AuthorizationType.RESOURCE_FILE_ID, 1, ApiFuncIdentificationConstant.FILE_ONLINE_CREATE, serviceLogger)).thenReturn(true);
+        PowerMockito.when(resourcePermissionCheckService.operationPermissionCheck(AuthorizationType.RESOURCE_FILE_ID, 1, ApiFuncIdentificationConstant.FILE_UPLOAD, serviceLogger)).thenReturn(true);
         PowerMockito.when(resourcePermissionCheckService.resourcePermissionCheck(AuthorizationType.RESOURCE_FILE_ID, null, 1, serviceLogger)).thenReturn(true);
 
         PowerMockito.when(PropertyUtils.getResUploadStartupState()).thenReturn(false);
@@ -180,7 +180,7 @@ public void testCreateResource() {
         Assert.assertEquals(Status.RESOURCE_SUFFIX_FORBID_CHANGE.getMsg(), result.getMsg());
 
         //UDF_RESOURCE_SUFFIX_NOT_JAR
-        PowerMockito.when(resourcePermissionCheckService.operationPermissionCheck(AuthorizationType.RESOURCE_FILE_ID, 1, ApiFuncIdentificationConstant.UDF_FOLDER_ONLINE_CREATE, serviceLogger)).thenReturn(true);
+        PowerMockito.when(resourcePermissionCheckService.operationPermissionCheck(AuthorizationType.RESOURCE_FILE_ID, 1, ApiFuncIdentificationConstant.UDF_UPLOAD, serviceLogger)).thenReturn(true);
         PowerMockito.when(resourcePermissionCheckService.resourcePermissionCheck(AuthorizationType.RESOURCE_FILE_ID, null, 1, serviceLogger)).thenReturn(true);
 
         mockMultipartFile = new MockMultipartFile("ResourcesServiceTest.pdf", "ResourcesServiceTest.pdf", "pdf", "test".getBytes());
@@ -190,7 +190,7 @@ public void testCreateResource() {
         Assert.assertEquals(Status.UDF_RESOURCE_SUFFIX_NOT_JAR.getMsg(), result.getMsg());
 
         //FULL_FILE_NAME_TOO_LONG
-        PowerMockito.when(resourcePermissionCheckService.operationPermissionCheck(AuthorizationType.RESOURCE_FILE_ID, 1, ApiFuncIdentificationConstant.FILE_ONLINE_CREATE, serviceLogger)).thenReturn(true);
+        PowerMockito.when(resourcePermissionCheckService.operationPermissionCheck(AuthorizationType.RESOURCE_FILE_ID, 1, ApiFuncIdentificationConstant.FILE_UPLOAD, serviceLogger)).thenReturn(true);
         PowerMockito.when(resourcePermissionCheckService.resourcePermissionCheck(AuthorizationType.RESOURCE_FILE_ID, null, 1, serviceLogger)).thenReturn(true);
 
         String tooLongFileName = getRandomStringWithLength(Constants.RESOURCE_FULL_NAME_MAX_LENGTH) + ".pdf";

File: dolphinscheduler-common/src/test/java/org/apache/dolphinscheduler/common/utils/JSONUtilsTest.java
Patch:
@@ -262,7 +262,7 @@ public void jsonDataDeserializerTest() {
 
     @Test
     public void dateToString() {
-        TimeZone.setDefault(TimeZone.getTimeZone("Asia/Shanghai"));
+        TimeZone.setDefault(TimeZone.getTimeZone("UTC"));
         String time = "2022-02-22 13:38:24";
         Date date = DateUtils.stringToDate(time);
         String json = JSONUtils.toJsonString(date);
@@ -274,7 +274,7 @@ public void dateToString() {
 
     @Test
     public void stringToDate() {
-        TimeZone.setDefault(TimeZone.getTimeZone("Asia/Shanghai"));
+        TimeZone.setDefault(TimeZone.getTimeZone("UTC"));
         String json = "\"2022-02-22 13:38:24\"";
         Date date = JSONUtils.parseObject(json, Date.class);
         Assert.assertEquals(date, DateUtils.stringToDate("2022-02-22 13:38:24"));

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/Constants.java
Patch:
@@ -51,9 +51,6 @@ private Constants() {
     public static final String REGISTRY_DOLPHINSCHEDULER_LOCK_FAILOVER_STARTUP_MASTERS = "/lock/failover/startup-masters";
     public static final String FORMAT_SS = "%s%s";
     public static final String FORMAT_S_S = "%s/%s";
-    public static final String AWS_ACCESS_KEY_ID = "aws.access.key.id";
-    public static final String AWS_SECRET_ACCESS_KEY = "aws.secret.access.key";
-    public static final String AWS_REGION = "aws.region";
     public static final String FOLDER_SEPARATOR = "/";
 
     public static final String RESOURCE_TYPE_FILE = "resources";

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProcessDefinitionServiceImpl.java
Patch:
@@ -660,7 +660,7 @@ private Map<String, Object> updateDagDefine(User loginUser,
     public Map<String, Object> verifyProcessDefinitionName(User loginUser, long projectCode, String name) {
         Project project = projectMapper.queryByCode(projectCode);
         //check user access for project
-        Map<String, Object> result = projectService.checkProjectAndAuth(loginUser, project, projectCode,null);
+        Map<String, Object> result = projectService.checkProjectAndAuth(loginUser, project, projectCode,WORKFLOW_CREATE);
         if (result.get(Constants.STATUS) != Status.SUCCESS) {
             return result;
         }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/utils/PageInfo.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.dolphinscheduler.api.utils;
 
+import java.util.Collections;
 import java.util.List;
 
 /**
@@ -29,7 +30,7 @@ public class PageInfo<T> {
     /**
      * totalList
      */
-    private List<T> totalList;
+    private List<T> totalList = Collections.emptyList();
     /**
      * total
      */

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProcessDefinitionServiceTest.java
Patch:
@@ -479,7 +479,7 @@ public void testVerifyProcessDefinitionName() {
         //project check auth fail
         Map<String, Object> result = new HashMap<>();
         putMsg(result, Status.PROJECT_NOT_FOUND, projectCode);
-        Mockito.when(projectService.checkProjectAndAuth(loginUser, project, projectCode,null)).thenReturn(result);
+        Mockito.when(projectService.checkProjectAndAuth(loginUser, project, projectCode, WORKFLOW_CREATE)).thenReturn(result);
         Map<String, Object> map = processDefinitionService.verifyProcessDefinitionName(loginUser,
                 projectCode, "test_pdf");
         Assert.assertEquals(Status.PROJECT_NOT_FOUND, map.get(Constants.STATUS));

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ResourcesServiceTest.java
Patch:
@@ -278,8 +278,8 @@ public void testUpdateResource() {
         Mockito.when(tenantMapper.queryById(1)).thenReturn(getTenant());
         PowerMockito.when(storageOperate.getFileName(Mockito.any(), Mockito.any(), Mockito.anyString())).thenReturn("test1");
 
-        PowerMockito.when(resourcePermissionCheckService.operationPermissionCheck(AuthorizationType.RESOURCE_FILE_ID, 1, ApiFuncIdentificationConstant.UDF_UPDATE, serviceLogger)).thenReturn(true);
-        PowerMockito.when(resourcePermissionCheckService.resourcePermissionCheck(AuthorizationType.RESOURCE_FILE_ID, new Object[]{1}, 1, serviceLogger)).thenReturn(true);
+        PowerMockito.when(resourcePermissionCheckService.operationPermissionCheck(AuthorizationType.UDF_FILE, 1, ApiFuncIdentificationConstant.UDF_UPDATE, serviceLogger)).thenReturn(true);
+        PowerMockito.when(resourcePermissionCheckService.resourcePermissionCheck(AuthorizationType.UDF_FILE, new Object[]{1}, 1, serviceLogger)).thenReturn(true);
         try {
             Mockito.when(storageOperate.exists(Mockito.any(), Mockito.any())).thenReturn(false);
         } catch (IOException e) {

File: dolphinscheduler-e2e/dolphinscheduler-e2e-case/src/test/java/org/apache/dolphinscheduler/e2e/cases/ProjectE2ETest.java
Patch:
@@ -55,7 +55,6 @@ void testCreateProject() {
     @Order(30)
     void testDeleteProject() {
         final ProjectPage page = new ProjectPage(browser);
-        browser.navigate().refresh();
         page.delete(project);
 
         await().untilAsserted(() -> {

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/EnvironmentController.java
Patch:
@@ -173,7 +173,7 @@ public Result queryEnvironmentListPaging(@ApiIgnore @RequestAttribute(value = Co
             return result;
         }
         searchVal = ParameterUtils.handleEscapes(searchVal);
-        result = environmentService.queryEnvironmentListPaging(pageNo, pageSize, searchVal);
+        result = environmentService.queryEnvironmentListPaging(loginUser, pageNo, pageSize, searchVal);
         return result;
     }
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/EnvironmentService.java
Patch:
@@ -81,7 +81,7 @@ public interface EnvironmentService {
      * @param pageSize page size
      * @return environment list page
      */
-    Result queryEnvironmentListPaging(Integer pageNo, Integer pageSize, String searchVal);
+    Result queryEnvironmentListPaging(User loginUser, Integer pageNo, Integer pageSize, String searchVal);
 
     /**
      * query all environment

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/UdfFuncServiceImpl.java
Patch:
@@ -137,6 +137,7 @@ public Result<Object> createUdfFunction(User loginUser,
 
         udfFuncMapper.insert(udf);
         putMsg(result, Status.SUCCESS);
+        permissionPostHandle(AuthorizationType.UDF, loginUser.getId(), Collections.singletonList(resource.getId()), logger);
         return result;
     }
 

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ResourcesServiceTest.java
Patch:
@@ -117,6 +117,7 @@ public class ResourcesServiceTest {
 
     private static final Logger serviceLogger = LoggerFactory.getLogger(BaseServiceImpl.class);
 
+    private static final Logger resourceLogger = LoggerFactory.getLogger(ResourcesServiceImpl.class);
 
     @Before
     public void setUp() {
@@ -349,7 +350,7 @@ public void testQueryResourceListPaging() {
 
         PowerMockito.when(resourcePermissionCheckService.operationPermissionCheck(AuthorizationType.RESOURCE_FILE_ID, 1, ApiFuncIdentificationConstant.FILE_VIEW, serviceLogger)).thenReturn(true);
         PowerMockito.when(resourcePermissionCheckService.resourcePermissionCheck(AuthorizationType.RESOURCE_FILE_ID, null, 0, serviceLogger)).thenReturn(true);
-        PowerMockito.when(resourcePermissionCheckService.userOwnedResourceIdsAcquisition(AuthorizationType.RESOURCE_FILE_ID, 1, serviceLogger)).thenReturn(getSetIds());
+        PowerMockito.when(resourcePermissionCheckService.userOwnedResourceIdsAcquisition(AuthorizationType.RESOURCE_FILE_ID, 1, resourceLogger)).thenReturn(getSetIds());
 
         Mockito.when(resourcesMapper.queryResourcePaging(Mockito.any(Page.class), eq(-1), eq(0), eq(1), eq("test"), Mockito.any())).thenReturn(resourcePage);
         Result result = resourcesService.queryResourceListPaging(loginUser, -1, ResourceType.FILE, "test", 1, 10);

File: dolphinscheduler-e2e/dolphinscheduler-e2e-case/src/test/java/org/apache/dolphinscheduler/e2e/cases/ProjectE2ETest.java
Patch:
@@ -55,6 +55,7 @@ void testCreateProject() {
     @Order(30)
     void testDeleteProject() {
         final ProjectPage page = new ProjectPage(browser);
+        browser.navigate().refresh();
         page.delete(project);
 
         await().untilAsserted(() -> {

File: dolphinscheduler-alert/dolphinscheduler-alert-plugins/dolphinscheduler-alert-email/src/test/java/org/apache/dolphinscheduler/plugin/alert/email/MailUtilsTest.java
Patch:
@@ -30,10 +30,12 @@
 import java.util.Map;
 
 import org.junit.BeforeClass;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+@Ignore("The test case makes no sense")
 public class MailUtilsTest {
     private static final Logger logger = LoggerFactory.getLogger(MailUtilsTest.class);
     static MailSender mailSender;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/configuration/ServiceModelToSwagger2MapperImpl.java
Patch:
@@ -18,7 +18,7 @@
 
 import static com.google.common.collect.Maps.newTreeMap;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 import java.util.ArrayList;
 import java.util.HashSet;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/BaseController.java
Patch:
@@ -26,7 +26,7 @@
 import org.apache.dolphinscheduler.api.utils.Result;
 import org.apache.dolphinscheduler.common.Constants;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 import java.text.MessageFormat;
 import java.util.HashMap;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ExecutorController.java
Patch:
@@ -58,7 +58,7 @@
 import io.swagger.annotations.ApiParam;
 import springfox.documentation.annotations.ApiIgnore;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 import java.text.MessageFormat;
 import java.util.ArrayList;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/LoginController.java
Patch:
@@ -31,7 +31,7 @@
 import org.apache.dolphinscheduler.dao.entity.User;
 
 import org.apache.commons.httpclient.HttpStatus;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 import java.util.Map;
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProcessDefinitionController.java
Patch:
@@ -29,7 +29,7 @@
 import org.apache.dolphinscheduler.dao.entity.ProcessDefinition;
 import org.apache.dolphinscheduler.dao.entity.User;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 import java.text.MessageFormat;
 import java.util.HashMap;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProcessInstanceController.java
Patch:
@@ -39,7 +39,7 @@
 import org.apache.dolphinscheduler.dao.entity.User;
 import org.apache.dolphinscheduler.plugin.task.api.enums.ExecutionStatus;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 import java.io.IOException;
 import java.text.MessageFormat;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ResourcesController.java
Patch:
@@ -53,7 +53,7 @@
 import org.apache.dolphinscheduler.dao.entity.User;
 import org.apache.dolphinscheduler.spi.enums.ResourceType;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 import java.util.Map;
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/interceptor/LoginHandlerInterceptor.java
Patch:
@@ -26,7 +26,7 @@
 import org.apache.dolphinscheduler.dao.mapper.UserMapper;
 
 import org.apache.commons.httpclient.HttpStatus;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/interceptor/RateLimitInterceptor.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.dolphinscheduler.api.configuration.TrafficConfiguration;
 
 import org.apache.commons.collections.MapUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 import java.util.Map;
 import java.util.concurrent.ExecutionException;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/security/SecurityConfig.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.dolphinscheduler.api.security.impl.ldap.LdapAuthenticator;
 import org.apache.dolphinscheduler.api.security.impl.pwd.PasswordAuthenticator;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/AlertGroupServiceImpl.java
Patch:
@@ -27,7 +27,7 @@
 import org.apache.dolphinscheduler.dao.entity.User;
 import org.apache.dolphinscheduler.dao.mapper.AlertGroupMapper;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 import java.util.Date;
 import java.util.HashMap;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/BaseServiceImpl.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.dolphinscheduler.api.service.impl;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.dolphinscheduler.api.enums.Status;
 import org.apache.dolphinscheduler.api.service.BaseService;
 import org.apache.dolphinscheduler.api.utils.Result;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/DataAnalysisServiceImpl.java
Patch:
@@ -43,7 +43,7 @@
 import org.apache.dolphinscheduler.plugin.task.api.enums.ExecutionStatus;
 import org.apache.dolphinscheduler.service.process.ProcessService;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 import java.util.ArrayList;
 import java.util.Arrays;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/DataSourceServiceImpl.java
Patch:
@@ -40,7 +40,7 @@
 import org.apache.dolphinscheduler.spi.utils.StringUtils;
 
 import org.apache.commons.collections4.CollectionUtils;
-
+import org.apache.commons.io.IOUtils;
 import java.sql.Connection;
 import java.sql.DatabaseMetaData;
 import java.sql.ResultSet;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/EnvironmentServiceImpl.java
Patch:
@@ -37,7 +37,7 @@
 
 import org.apache.commons.collections.CollectionUtils;
 import org.apache.commons.collections4.SetUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 import java.util.ArrayList;
 import java.util.Date;
@@ -468,4 +468,3 @@ public Map<String, Object> checkParams(String name, String config, String worker
     }
 
 }
-

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ExecutorServiceImpl.java
Patch:
@@ -73,7 +73,7 @@
 import org.apache.commons.beanutils.BeanUtils;
 import org.apache.commons.collections.CollectionUtils;
 import org.apache.commons.collections.MapUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 import java.util.ArrayList;
 import java.util.Date;
@@ -740,7 +740,7 @@ protected int createComplementCommandList(Date start, Date end, RunMode runMode,
                         }
                     }
                     logger.info("In parallel mode, current expectedParallelismNumber:{}", createCount);
-                    
+
                     // Distribute the number of tasks equally to each command.
                     // The last command with insufficient quantity will be assigned to the remaining tasks.
                     int itemsPerCommand = (listDateSize / createCount);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/K8SNamespaceServiceImpl.java
Patch:
@@ -28,7 +28,7 @@
 import org.apache.dolphinscheduler.dao.mapper.K8sNamespaceMapper;
 import org.apache.dolphinscheduler.service.k8s.K8sClientService;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 import java.util.ArrayList;
 import java.util.Date;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/LoggerServiceImpl.java
Patch:
@@ -33,7 +33,7 @@
 import org.apache.dolphinscheduler.service.log.LogClientService;
 import org.apache.dolphinscheduler.service.process.ProcessService;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 import java.nio.charset.StandardCharsets;
 import java.util.Map;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProcessInstanceServiceImpl.java
Patch:
@@ -68,7 +68,7 @@
 import org.apache.dolphinscheduler.service.task.TaskPluginManager;
 
 import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 import java.io.BufferedReader;
 import java.io.ByteArrayInputStream;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/QueueServiceImpl.java
Patch:
@@ -28,7 +28,7 @@
 import org.apache.dolphinscheduler.dao.mapper.QueueMapper;
 import org.apache.dolphinscheduler.dao.mapper.UserMapper;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 import java.util.Date;
 import java.util.HashMap;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ResourcesServiceImpl.java
Patch:
@@ -24,7 +24,7 @@
 import com.google.common.io.Files;
 import org.apache.commons.beanutils.BeanMap;
 import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.dolphinscheduler.api.constants.ApiFuncIdentificationConstant;
 import org.apache.dolphinscheduler.api.dto.resources.ResourceComponent;
 import org.apache.dolphinscheduler.api.dto.resources.filter.ResourceFilter;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/SchedulerServiceImpl.java
Patch:
@@ -50,7 +50,7 @@
 import org.apache.dolphinscheduler.service.quartz.QuartzExecutor;
 import org.apache.dolphinscheduler.service.quartz.cron.CronUtils;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 import java.text.ParseException;
 import java.util.ArrayList;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/SessionServiceImpl.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.dolphinscheduler.dao.mapper.SessionMapper;
 
 import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 import java.util.Date;
 import java.util.List;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/TenantServiceImpl.java
Patch:
@@ -20,7 +20,7 @@
 import com.baomidou.mybatisplus.core.metadata.IPage;
 import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
 import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.dolphinscheduler.api.enums.Status;
 import org.apache.dolphinscheduler.api.service.TenantService;
 import org.apache.dolphinscheduler.api.utils.PageInfo;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/UdfFuncServiceImpl.java
Patch:
@@ -32,7 +32,7 @@
 import org.apache.dolphinscheduler.dao.mapper.UDFUserMapper;
 import org.apache.dolphinscheduler.dao.mapper.UdfFuncMapper;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 import java.util.ArrayList;
 import java.util.Collections;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/UsersServiceImpl.java
Patch:
@@ -20,7 +20,7 @@
 import com.baomidou.mybatisplus.core.metadata.IPage;
 import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
 import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.dolphinscheduler.api.dto.resources.ResourceComponent;
 import org.apache.dolphinscheduler.api.enums.Status;
 import org.apache.dolphinscheduler.api.exceptions.ServiceException;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/WorkerGroupServiceImpl.java
Patch:
@@ -32,7 +32,7 @@
 import org.apache.dolphinscheduler.service.registry.RegistryClient;
 
 import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 import java.util.ArrayList;
 import java.util.Collection;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/utils/CheckUtils.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 import java.text.MessageFormat;
 import java.time.ZoneId;

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/AbstractControllerTest.java
Patch:
@@ -27,7 +27,7 @@
 import org.apache.dolphinscheduler.dao.DaoConfiguration;
 import org.apache.dolphinscheduler.dao.entity.User;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.curator.test.TestingServer;
 
 import java.text.MessageFormat;

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProcessDefinitionServiceTest.java
Patch:
@@ -52,7 +52,7 @@
 import org.apache.dolphinscheduler.service.process.ProcessService;
 import org.apache.dolphinscheduler.spi.enums.DbType;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 import java.io.ByteArrayOutputStream;
 import java.nio.charset.StandardCharsets;

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/SessionServiceTest.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.dolphinscheduler.dao.entity.User;
 import org.apache.dolphinscheduler.dao.mapper.SessionMapper;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 import java.util.ArrayList;
 import java.util.Calendar;

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/Constants.java
Patch:
@@ -19,8 +19,8 @@
 
 import org.apache.dolphinscheduler.plugin.task.api.enums.ExecutionStatus;
 
-import org.apache.commons.lang.StringUtils;
-import org.apache.commons.lang.SystemUtils;
+import org.apache.commons.lang3.StringUtils;
+import org.apache.commons.lang3.SystemUtils;
 
 import java.util.regex.Pattern;
 

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/model/TaskNode.java
Patch:
@@ -29,7 +29,7 @@
 import org.apache.dolphinscheduler.common.utils.CollectionUtils;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 import java.util.HashMap;
 import java.util.List;

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/CommonUtils.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.dolphinscheduler.spi.enums.ResUploadType;
 
 import org.apache.commons.codec.binary.Base64;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.security.UserGroupInformation;
 

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/DateUtils.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.thread.ThreadLocalContext;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 import java.time.Instant;
 import java.time.LocalDateTime;

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/EncryptionUtils.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.dolphinscheduler.common.utils;
 
 import org.apache.commons.codec.digest.DigestUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 /**
  * encryption utils

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/OSUtils.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.apache.dolphinscheduler.common.shell.ShellExecutor;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.commons.lang.SystemUtils;
 
 import java.io.BufferedReader;

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/ParameterUtils.java
Patch:
@@ -24,7 +24,7 @@
 import org.apache.dolphinscheduler.common.utils.placeholder.TimePlaceholderUtils;
 import org.apache.dolphinscheduler.plugin.task.api.model.Property;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 import java.util.Date;
 import java.util.HashMap;

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/placeholder/BusinessTimeUtils.java
Patch:
@@ -21,7 +21,7 @@
 import static org.apache.dolphinscheduler.common.Constants.PARAMETER_FORMAT_TIME;
 import static org.apache.dolphinscheduler.common.utils.DateUtils.format;
 
-import static org.apache.commons.lang.time.DateUtils.addDays;
+import static org.apache.commons.lang3.time.DateUtils.addDays;
 
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.CommandType;

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/placeholder/TimePlaceholderUtils.java
Patch:
@@ -34,7 +34,7 @@
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.utils.DateUtils;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 import java.util.AbstractMap;
 import java.util.ArrayList;

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/ProcessDefinition.java
Patch:
@@ -23,8 +23,6 @@
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
 import org.apache.dolphinscheduler.plugin.task.api.model.Property;
 
-import org.apache.commons.lang.StringUtils;
-
 import java.util.ArrayList;
 import java.util.Date;
 import java.util.List;
@@ -36,6 +34,7 @@
 import com.baomidou.mybatisplus.annotation.TableField;
 import com.baomidou.mybatisplus.annotation.TableId;
 import com.baomidou.mybatisplus.annotation.TableName;
+import com.google.common.base.Strings;
 
 /**
  * process definition
@@ -309,7 +308,7 @@ public void setGlobalParamList(List<Property> globalParamList) {
     }
 
     public Map<String, String> getGlobalParamMap() {
-        if (globalParamMap == null && StringUtils.isNotEmpty(globalParams)) {
+        if (globalParamMap == null && !Strings.isNullOrEmpty(globalParams)) {
             List<Property> propList = JSONUtils.toList(globalParams, Property.class);
             globalParamMap = propList.stream().collect(Collectors.toMap(Property::getProp, Property::getValue));
         }

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/UdfFunc.java
Patch:
@@ -23,7 +23,7 @@
 import com.baomidou.mybatisplus.annotation.TableName;
 import com.fasterxml.jackson.databind.DeserializationContext;
 import com.fasterxml.jackson.databind.KeyDeserializer;
-import org.apache.commons.lang.StringUtils;
+import com.google.common.base.Strings;
 import org.apache.dolphinscheduler.common.enums.UdfType;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
 
@@ -250,7 +250,7 @@ public static  class UdfFuncDeserializer extends KeyDeserializer {
 
         @Override
         public Object deserializeKey(String key, DeserializationContext ctxt) throws IOException {
-            if (StringUtils.isBlank(key)) {
+            if (Strings.isNullOrEmpty(key)) {
                 return null;
             }
             return JSONUtils.parseObject(key, UdfFunc.class);

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/upgrade/SchemaUtils.java
Patch:
@@ -19,8 +19,6 @@
 
 import org.apache.dolphinscheduler.common.utils.FileUtils;
 
-import org.apache.commons.lang.StringUtils;
-
 import java.io.File;
 import java.io.FileNotFoundException;
 import java.io.IOException;
@@ -81,7 +79,7 @@ public static List<String> getAllSchemaList() throws IOException {
      * @return Determine whether schemaVersion is higher than version
      */
     public static boolean isAGreatVersion(String schemaVersion, String version) {
-        if (StringUtils.isEmpty(schemaVersion) || StringUtils.isEmpty(version)) {
+        if (Strings.isNullOrEmpty(schemaVersion) || Strings.isNullOrEmpty(version)) {
             throw new RuntimeException("schemaVersion or version is empty");
         }
 

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-api/src/main/java/org/apache/dolphinscheduler/plugin/datasource/api/datasource/postgresql/PostgreSQLDataSourceProcessor.java
Patch:
@@ -35,6 +35,7 @@
 import java.sql.SQLException;
 import java.util.LinkedHashMap;
 import java.util.Map;
+import com.google.common.base.Strings;
 
 @AutoService(DataSourceProcessor.class)
 public class PostgreSQLDataSourceProcessor extends AbstractDataSourceProcessor {
@@ -99,7 +100,7 @@ public String getValidationQuery() {
     @Override
     public String getJdbcUrl(ConnectionParam connectionParam) {
         PostgreSQLConnectionParam postgreSqlConnectionParam = (PostgreSQLConnectionParam) connectionParam;
-        if (!StringUtils.isEmpty(postgreSqlConnectionParam.getOther())) {
+        if (!Strings.isNullOrEmpty(postgreSqlConnectionParam.getOther())) {
             return String.format("%s?%s", postgreSqlConnectionParam.getJdbcUrl(), postgreSqlConnectionParam.getOther());
         }
         return postgreSqlConnectionParam.getJdbcUrl();
@@ -133,7 +134,7 @@ private String transformOther(Map<String, String> otherMap) {
     }
 
     private Map<String, String> parseOther(String other) {
-        if (StringUtils.isEmpty(other)) {
+        if (Strings.isNullOrEmpty(other)) {
             return null;
         }
         Map<String, String> otherMap = new LinkedHashMap<>();

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/dispatch/ExecutorDispatcher.java
Patch:
@@ -27,7 +27,7 @@
 import org.apache.dolphinscheduler.server.master.dispatch.executor.NettyExecutorManager;
 import org.apache.dolphinscheduler.server.master.dispatch.host.HostManager;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 import java.util.concurrent.ConcurrentHashMap;
 

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/dispatch/host/CommonHostManager.java
Patch:
@@ -26,7 +26,7 @@
 import org.apache.dolphinscheduler.server.master.registry.ServerNodeManager;
 
 import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 import java.util.ArrayList;
 import java.util.Collection;

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/registry/ServerNodeManager.java
Patch:
@@ -36,7 +36,7 @@
 import org.apache.dolphinscheduler.service.registry.RegistryClient;
 
 import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 import java.util.Collection;
 import java.util.Collections;

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/WorkflowExecuteThread.java
Patch:
@@ -76,8 +76,8 @@
 import org.apache.dolphinscheduler.service.queue.PeerTaskInstancePriorityQueue;
 
 import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.lang.StringUtils;
-import org.apache.commons.lang.math.NumberUtils;
+import org.apache.commons.lang3.StringUtils;
+import org.apache.commons.lang3.math.NumberUtils;
 
 import java.util.ArrayList;
 import java.util.Arrays;

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/task/CommonTaskProcessor.java
Patch:
@@ -31,7 +31,7 @@
 import org.apache.dolphinscheduler.service.queue.TaskPriorityQueue;
 import org.apache.dolphinscheduler.service.queue.TaskPriorityQueueImpl;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 import java.util.Date;
 

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/task/SubTaskProcessor.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.fasterxml.jackson.core.type.TypeReference;
 import com.google.auto.service.AutoService;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
 import org.apache.dolphinscheduler.common.utils.NetUtils;
 import org.apache.dolphinscheduler.dao.entity.ProcessInstance;

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/task/SwitchTaskProcessor.java
Patch:
@@ -31,7 +31,7 @@
 import org.apache.dolphinscheduler.server.utils.SwitchTaskUtils;
 
 import org.apache.commons.collections4.CollectionUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 import java.util.Date;
 import java.util.HashMap;
@@ -212,7 +212,7 @@ public String setTaskParams(String content, String rgex) {
                 return "";
             }
             String value = property.getValue();
-            if (!org.apache.commons.lang.math.NumberUtils.isNumber(value)) {
+            if (!org.apache.commons.lang3.math.NumberUtils.isCreatable(value)) {
                 value = "\"" + value + "\"";
             }
             logger.info("paramName:{}，paramValue:{}", paramName, value);

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/service/FailoverService.java
Patch:
@@ -36,7 +36,7 @@
 import org.apache.dolphinscheduler.service.registry.RegistryClient;
 
 import org.apache.commons.collections4.CollectionUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 import java.util.Date;
 import java.util.HashMap;

File: dolphinscheduler-registry/dolphinscheduler-registry-api/src/main/java/org/apache/dolphinscheduler/registry/api/Registry.java
Patch:
@@ -22,7 +22,6 @@
 import java.io.Closeable;
 import java.time.Duration;
 import java.util.Collection;
-import java.util.Map;
 
 public interface Registry extends Closeable {
     boolean subscribe(String path, SubscribeListener listener);

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/NettyRemotingClient.java
Patch:
@@ -58,6 +58,7 @@
 import io.netty.channel.ChannelInitializer;
 import io.netty.channel.ChannelOption;
 import io.netty.channel.EventLoopGroup;
+import io.netty.channel.epoll.Epoll;
 import io.netty.channel.epoll.EpollEventLoopGroup;
 import io.netty.channel.nio.NioEventLoopGroup;
 import io.netty.channel.socket.SocketChannel;
@@ -127,7 +128,7 @@ public class NettyRemotingClient {
      */
     public NettyRemotingClient(final NettyClientConfig clientConfig) {
         this.clientConfig = clientConfig;
-        if (NettyUtils.useEpoll()) {
+        if (Epoll.isAvailable()) {
             this.workerGroup = new EpollEventLoopGroup(clientConfig.getWorkerThreads(), new ThreadFactory() {
                 private final AtomicInteger threadIndex = new AtomicInteger(0);
 

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/NettyRemotingServer.java
Patch:
@@ -43,6 +43,7 @@
 import io.netty.channel.ChannelInitializer;
 import io.netty.channel.ChannelOption;
 import io.netty.channel.EventLoopGroup;
+import io.netty.channel.epoll.Epoll;
 import io.netty.channel.epoll.EpollEventLoopGroup;
 import io.netty.channel.nio.NioEventLoopGroup;
 import io.netty.channel.socket.SocketChannel;
@@ -104,7 +105,7 @@ public NettyRemotingServer(final NettyServerConfig serverConfig) {
         this.serverConfig = serverConfig;
         ThreadFactory bossThreadFactory = new ThreadFactoryBuilder().setNameFormat("NettyServerBossThread_%s").build();
         ThreadFactory workerThreadFactory = new ThreadFactoryBuilder().setNameFormat("NettyServerWorkerThread_%s").build();
-        if (NettyUtils.useEpoll()) {
+        if (Epoll.isAvailable()) {
             this.bossGroup = new EpollEventLoopGroup(1, bossThreadFactory);
             this.workGroup = new EpollEventLoopGroup(serverConfig.getWorkerThread(), workerThreadFactory);
         } else {

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/rpc/remote/NettyClient.java
Patch:
@@ -46,6 +46,7 @@
 import io.netty.channel.ChannelInitializer;
 import io.netty.channel.ChannelOption;
 import io.netty.channel.EventLoopGroup;
+import io.netty.channel.epoll.Epoll;
 import io.netty.channel.epoll.EpollEventLoopGroup;
 import io.netty.channel.nio.NioEventLoopGroup;
 import io.netty.channel.socket.SocketChannel;
@@ -140,7 +141,7 @@ public Channel createChannel(Host host, boolean isSync) {
      */
     private NettyClient(final NettyClientConfig clientConfig) {
         this.clientConfig = clientConfig;
-        if (NettyUtils.useEpoll()) {
+        if (Epoll.isAvailable()) {
             this.workerGroup = new EpollEventLoopGroup(clientConfig.getWorkerThreads(), new ThreadFactory() {
                 private AtomicInteger threadIndex = new AtomicInteger(0);
 

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/rpc/remote/NettyServer.java
Patch:
@@ -37,6 +37,7 @@
 import io.netty.channel.ChannelInitializer;
 import io.netty.channel.ChannelOption;
 import io.netty.channel.EventLoopGroup;
+import io.netty.channel.epoll.Epoll;
 import io.netty.channel.epoll.EpollEventLoopGroup;
 import io.netty.channel.nio.NioEventLoopGroup;
 import io.netty.channel.socket.SocketChannel;
@@ -83,7 +84,7 @@ public class NettyServer {
      */
     public NettyServer(final NettyServerConfig serverConfig) {
         this.serverConfig = serverConfig;
-        if (NettyUtils.useEpoll()) {
+        if (Epoll.isAvailable()) {
             this.bossGroup = new EpollEventLoopGroup(1, new ThreadFactory() {
                 private AtomicInteger threadIndex = new AtomicInteger(0);
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/utils/ProcessUtils.java
Patch:
@@ -30,9 +30,8 @@
 import org.apache.dolphinscheduler.service.log.LogClientService;
 
 import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.lang.StringUtils;
-import org.apache.commons.lang.SystemUtils;
-
+import org.apache.commons.lang3.StringUtils;
+import org.apache.commons.lang3.SystemUtils;
 import java.io.File;
 import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/utils/ProcessUtilsTest.java
Patch:
@@ -18,15 +18,13 @@
 package org.apache.dolphinscheduler.server.utils;
 
 import static org.powermock.api.mockito.PowerMockito.when;
-
+import org.apache.commons.lang3.SystemUtils;
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.utils.HadoopUtils;
 import org.apache.dolphinscheduler.common.utils.OSUtils;
 import org.apache.dolphinscheduler.common.utils.PropertyUtils;
 import org.apache.dolphinscheduler.plugin.task.api.enums.ExecutionStatus;
 
-import org.apache.commons.lang.SystemUtils;
-
 import java.util.ArrayList;
 import java.util.List;
 

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/parameters/AbstractParameters.java
Patch:
@@ -17,15 +17,14 @@
 
 package org.apache.dolphinscheduler.plugin.task.api.parameters;
 
+import org.apache.commons.collections4.CollectionUtils;
 import org.apache.dolphinscheduler.plugin.task.api.enums.Direct;
 import org.apache.dolphinscheduler.plugin.task.api.model.Property;
 import org.apache.dolphinscheduler.plugin.task.api.model.ResourceInfo;
 import org.apache.dolphinscheduler.plugin.task.api.parameters.resource.ResourceParametersHelper;
 import org.apache.dolphinscheduler.spi.utils.JSONUtils;
 import org.apache.dolphinscheduler.spi.utils.StringUtils;
 
-import org.apache.commons.collections4.CollectionUtils;
-
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.LinkedHashMap;

File: dolphinscheduler-task-plugin/dolphinscheduler-task-datax/src/main/java/org/apache/dolphinscheduler/plugin/task/datax/DataxTask.java
Patch:
@@ -39,7 +39,7 @@
 import org.apache.dolphinscheduler.spi.utils.JSONUtils;
 import org.apache.dolphinscheduler.spi.utils.StringUtils;
 
-import org.apache.commons.collections.CollectionUtils;
+import org.apache.commons.collections4.CollectionUtils;
 import org.apache.commons.io.FileUtils;
 
 import java.io.File;

File: dolphinscheduler-task-plugin/dolphinscheduler-task-flink/src/test/java/org/apache/dolphinscheduler/plugin/task/flink/FlinkParametersTest.java
Patch:
@@ -19,8 +19,6 @@
 
 import org.apache.dolphinscheduler.plugin.task.api.model.ResourceInfo;
 
-import org.apache.commons.collections.CollectionUtils;
-
 import java.util.LinkedList;
 import java.util.List;
 
@@ -31,7 +29,7 @@ public class FlinkParametersTest {
     @Test
     public void getResourceFilesList() {
         FlinkParameters flinkParameters = new FlinkParameters();
-        Assert.assertTrue(CollectionUtils.isEmpty(flinkParameters.getResourceFilesList()));
+        Assert.assertTrue(flinkParameters.getResourceFilesList().isEmpty());
 
         ResourceInfo mainResource = new ResourceInfo();
         mainResource.setRes("testFlinkMain-1.0.0-SNAPSHOT.jar");

File: dolphinscheduler-task-plugin/dolphinscheduler-task-procedure/src/main/java/org/apache/dolphinscheduler/plugin/task/procedure/ProcedureParameters.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.dolphinscheduler.plugin.task.api.parameters.resource.ResourceParametersHelper;
 import org.apache.dolphinscheduler.spi.utils.StringUtils;
 
-import org.apache.commons.collections.CollectionUtils;
+import org.apache.commons.collections4.CollectionUtils;
 
 import java.util.ArrayList;
 import java.util.HashMap;

File: dolphinscheduler-task-plugin/dolphinscheduler-task-python/src/main/java/org/apache/dolphinscheduler/plugin/task/python/PythonTask.java
Patch:
@@ -31,7 +31,6 @@
 import org.apache.dolphinscheduler.spi.utils.JSONUtils;
 
 import org.apache.commons.io.FileUtils;
-import org.apache.commons.lang.StringUtils;
 
 import java.io.File;
 import java.io.IOException;

File: dolphinscheduler-task-plugin/dolphinscheduler-task-spark/src/test/java/org/apache/dolphinscheduler/plugin/task/spark/SparkParametersTest.java
Patch:
@@ -19,8 +19,6 @@
 
 import org.apache.dolphinscheduler.plugin.task.api.model.ResourceInfo;
 
-import org.apache.commons.collections.CollectionUtils;
-
 import java.util.LinkedList;
 import java.util.List;
 
@@ -32,7 +30,7 @@ public class SparkParametersTest {
     @Test
     public void getResourceFilesList() {
         SparkParameters sparkParameters = new SparkParameters();
-        Assert.assertTrue(CollectionUtils.isEmpty(sparkParameters.getResourceFilesList()));
+        Assert.assertTrue(sparkParameters.getResourceFilesList().isEmpty());
 
         ResourceInfo mainResource = new ResourceInfo();
         mainResource.setRes("testSparkMain-1.0.0-SNAPSHOT.jar\"");

File: dolphinscheduler-task-plugin/dolphinscheduler-task-sql/src/main/java/org/apache/dolphinscheduler/plugin/task/sql/SqlSplitter.java
Patch:
@@ -17,11 +17,10 @@
 
 package org.apache.dolphinscheduler.plugin.task.sql;
 
-import org.apache.commons.lang.StringUtils;
-
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
+import com.google.common.base.Strings;
 
 public class SqlSplitter {
 
@@ -40,7 +39,7 @@ private SqlSplitter() {
      * @return
      */
     public static List<String> split(String sql, String segmentSeparator) {
-        if (StringUtils.isBlank(segmentSeparator)) {
+        if (Strings.isNullOrEmpty(segmentSeparator)) {
             return Collections.singletonList(sql);
         }
 

File: dolphinscheduler-task-plugin/dolphinscheduler-task-sql/src/main/java/org/apache/dolphinscheduler/plugin/task/sql/SqlTask.java
Patch:
@@ -40,7 +40,7 @@
 import org.apache.dolphinscheduler.spi.utils.JSONUtils;
 import org.apache.dolphinscheduler.spi.utils.StringUtils;
 
-import org.apache.commons.collections.CollectionUtils;
+import org.apache.commons.collections4.CollectionUtils;
 
 import java.sql.Connection;
 import java.sql.PreparedStatement;

File: dolphinscheduler-tools/src/main/java/org/apache/dolphinscheduler/tools/datasource/dao/ResourceDao.java
Patch:
@@ -22,8 +22,6 @@
 import org.apache.dolphinscheduler.common.utils.ConnectionUtils;
 import org.apache.dolphinscheduler.spi.utils.StringUtils;
 
-import org.apache.directory.api.util.Strings;
-
 import java.sql.Connection;
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
@@ -35,6 +33,7 @@
 import org.slf4j.LoggerFactory;
 
 import com.google.common.base.Joiner;
+import com.google.common.base.Strings;
 
 /**
  * resource dao
@@ -99,7 +98,7 @@ private Map<String, Long> listAllResourcesByFileType(Connection conn, int type)
                     String[] splits = fullName.split("/");
                     for (int i = 1; i < splits.length; i++) {
                         String parentFullName = Joiner.on("/").join(Arrays.copyOfRange(splits,0, splits.length - i));
-                        if (Strings.isNotEmpty(parentFullName)) {
+                        if (!Strings.isNullOrEmpty(parentFullName)) {
                             long size = resourceSizeMap.getOrDefault(parentFullName, 0L);
                             resourceSizeMap.put(parentFullName, size + fileSize);
                         }

File: dolphinscheduler-worker/src/main/java/org/apache/dolphinscheduler/server/worker/runner/TaskExecuteThread.java
Patch:
@@ -39,15 +39,14 @@
 import org.apache.dolphinscheduler.service.task.TaskPluginManager;
 
 import org.apache.commons.collections.MapUtils;
-import org.apache.commons.lang.StringUtils;
 
 import java.io.File;
 import java.io.IOException;
 import java.util.*;
 import java.util.concurrent.Delayed;
 import java.util.concurrent.TimeUnit;
 import java.util.stream.Collectors;
-
+import com.google.common.base.Strings;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -219,7 +218,7 @@ private void clearTaskExecPath() {
             // get exec dir
             String execLocalPath = taskExecutionContext.getExecutePath();
 
-            if (StringUtils.isEmpty(execLocalPath)) {
+            if (Strings.isNullOrEmpty(execLocalPath)) {
                 logger.warn("task: {} exec local path is empty.", taskExecutionContext.getTaskName());
                 return;
             }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/configuration/AppConfiguration.java
Patch:
@@ -101,7 +101,7 @@ public void addInterceptors(InterceptorRegistry registry) {
         registry.addInterceptor(loginInterceptor())
                 .addPathPatterns(LOGIN_INTERCEPTOR_PATH_PATTERN)
                 .excludePathPatterns(LOGIN_PATH_PATTERN, REGISTER_PATH_PATTERN,
-                        "/swagger-resources/**", "/webjars/**", "/v2/**",
+                        "/swagger-resources/**", "/webjars/**", "/api-docs/**",
                         "/doc.html", "/swagger-ui.html", "*.html", "/ui/**", "/error");
     }
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/AccessTokenController.java
Patch:
@@ -89,8 +89,7 @@ public Result createToken(@ApiIgnore @RequestAttribute(value = Constants.SESSION
                               @RequestParam(value = "expireTime") String expireTime,
                               @RequestParam(value = "token", required = false) String token) {
 
-        Map<String, Object> result = accessTokenService.createToken(loginUser, userId, expireTime, token);
-        return returnDataList(result);
+        return accessTokenService.createToken(loginUser, userId, expireTime, token);
     }
 
     /**

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/AccessTokenService.java
Patch:
@@ -55,7 +55,7 @@ public interface AccessTokenService {
      * @param token token string (if it is absent, it will be automatically generated)
      * @return create result code
      */
-    Map<String, Object> createToken(User loginUser, int userId, String expireTime, String token);
+    Result createToken(User loginUser, int userId, String expireTime, String token);
 
 
     /**

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/AccessTokenControllerTest.java
Patch:
@@ -89,11 +89,11 @@ public void testExceptionHandler() throws Exception {
         MvcResult mvcResult = mockMvc.perform(post("/access-tokens")
                 .header("sessionId", sessionId)
                 .params(paramsMap))
-                .andExpect(status().isOk())
+                .andExpect(status().isCreated())
                 .andExpect(content().contentType(MediaType.APPLICATION_JSON))
                 .andReturn();
         Result result = JSONUtils.parseObject(mvcResult.getResponse().getContentAsString(), Result.class);
-        Assert.assertEquals(Status.CREATE_ACCESS_TOKEN_ERROR.getCode(), result.getCode().intValue());
+        Assert.assertEquals(Status.REQUEST_PARAMS_NOT_VALID_ERROR.getCode(), result.getCode().intValue());
         logger.info(mvcResult.getResponse().getContentAsString());
     }
 

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/Event.java
Patch:
@@ -22,5 +22,5 @@ public enum Event {
     DELAY,
     RUNNING,
     RESULT,
-    ;
+    WORKER_REJECT
 }

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/StateEvent.java
Patch:
@@ -97,7 +97,7 @@ public void setChannel(Channel channel) {
     public String toString() {
         return "State Event :"
                 + "key: " + key
-                + " type: " + type.toString()
+                + " type: " + type
                 + " executeStatus: " + executionStatus
                 + " task instance id: " + taskInstanceId
                 + " process instance id: " + processInstanceId

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/dispatch/host/LowerWeightHostManager.java
Patch:
@@ -178,7 +178,7 @@ public Optional<HostWeight> getHostWeight(String addr, String workerGroup, Strin
             return Optional.of(
                     new HostWeight(HostWorker.of(addr, heartBeat.getWorkerHostWeight(), workerGroup),
                             heartBeat.getCpuUsage(), heartBeat.getMemoryUsage(), heartBeat.getLoadAverage(),
-                            heartBeat.getStartupTime()));
+                            heartBeat.getWorkerWaitingTaskCount(), heartBeat.getStartupTime()));
         }
     }
 

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/task/TaskAction.java
Patch:
@@ -26,5 +26,6 @@ public enum TaskAction {
     TIMEOUT,
     SUBMIT,
     RUN,
-    DISPATCH
+    DISPATCH,
+    RESUBMIT
 }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/ApiApplicationServer.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.dolphinscheduler.api;
 
 import org.apache.dolphinscheduler.service.task.TaskPluginManager;
+
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/python/PythonGateway.java
Patch:
@@ -536,8 +536,8 @@ public Map<String, Object> getDependentInfo(String projectName, String processDe
     public Map<String, Object> getResourcesFileInfo(String programType, String fullName) {
         Map<String, Object> result = new HashMap<>();
 
-        Map<String, Object> resources = resourceService.queryResourceByProgramType(dummyAdminUser, ResourceType.FILE, ProgramType.valueOf(programType));
-        List<ResourceComponent> resourcesComponent = (List<ResourceComponent>) resources.get(Constants.DATA_LIST);
+        Result<Object> resources = resourceService.queryResourceByProgramType(dummyAdminUser, ResourceType.FILE, ProgramType.valueOf(programType));
+        List<ResourceComponent> resourcesComponent = (List<ResourceComponent>) resources.getData();
         List<ResourceComponent> namedResources = resourcesComponent.stream().filter(s -> fullName.equals(s.getFullName())).collect(Collectors.toList());
         if (CollectionUtils.isEmpty(namedResources)) {
             String msg = String.format("Can not find valid resource by program type %s and name %s", programType, fullName);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/BaseServiceImpl.java
Patch:
@@ -45,7 +45,7 @@ public class BaseServiceImpl implements BaseService {
     private static final Logger logger = LoggerFactory.getLogger(BaseServiceImpl.class);
 
     @Autowired
-    private ResourcePermissionCheckService resourcePermissionCheckService;
+    protected ResourcePermissionCheckService resourcePermissionCheckService;
 
     /**
      * check admin
@@ -162,8 +162,8 @@ public boolean canOperator(User operateUser, int createUserId) {
      * @return boolean
      */
     @Override
-    public boolean canOperatorPermissions(User user, Object[] ids,AuthorizationType type,String perm) {
-        boolean operationPermissionCheck = resourcePermissionCheckService.operationPermissionCheck(type, user.getId(), perm, logger);
+    public boolean canOperatorPermissions(User user, Object[] ids,AuthorizationType type,String permissionKey) {
+        boolean operationPermissionCheck = resourcePermissionCheckService.operationPermissionCheck(type, user.getId(), permissionKey, logger);
         boolean resourcePermissionCheck = resourcePermissionCheckService.resourcePermissionCheck(type, ids, user.getUserType().equals(UserType.ADMIN_USER) ? 0 : user.getId(), logger);
         return operationPermissionCheck && resourcePermissionCheck;
     }

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskGroup.java
Patch:
@@ -33,7 +33,7 @@ public class TaskGroup implements Serializable {
      * key
      */
     @TableId(value = "id", type = IdType.AUTO)
-    private int id;
+    private Integer id;
     /**
      * task_group name
      */

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/AlertGroupMapper.java
Patch:
@@ -90,6 +90,6 @@ IPage<AlertGroup> queryAlertGroupPage(Page page,
      * @param alertGroupsIds
      * @return
      */
-    <T> List<AlertGroup> listAuthorizedAlertGroupList (@Param("userId") int userId, @Param("alertGroupsIds")T[] alertGroupsIds);
+    <T> List<AlertGroup> listAuthorizedAlertGroupList (@Param("userId") int userId, @Param("alertGroupsIds")List<Integer> alertGroupsIds);
 
 }

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/ResourceMapper.java
Patch:
@@ -62,9 +62,9 @@ List<Resource> queryResourceListAuthored(@Param("userId") int userId,
      * @return resource page
      */
     IPage<Resource> queryResourcePaging(IPage<Resource> page,
-                                        @Param("userId") int userId,
                                         @Param("id") int id,
                                         @Param("type") int type,
+                                        @Param("userId") int userId,
                                         @Param("searchVal") String searchVal,
                                         @Param("resIds") List<Integer> resIds);
 

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/ResourceMapperTest.java
Patch:
@@ -231,17 +231,17 @@ public void testQueryResourcePaging() {
 
         IPage<Resource> resourceIPage = resourceMapper.queryResourcePaging(
                 page,
-                0,
                 -1,
                 resource.getType().ordinal(),
+                1110,
                 "",
-                new ArrayList<>()
+                new ArrayList<>(resource.getId())
         );
         IPage<Resource> resourceIPage1 = resourceMapper.queryResourcePaging(
                 page,
-                1110,
                 -1,
                 resource.getType().ordinal(),
+                1110,
                 "",
                 null
         );

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProcessDefinitionController.java
Patch:
@@ -503,7 +503,7 @@ public Result viewTree(@ApiIgnore @RequestAttribute(value = Constants.SESSION_US
                            @ApiParam(name = "projectCode", value = "PROJECT_CODE", required = true) @PathVariable long projectCode,
                            @PathVariable("code") long code,
                            @RequestParam("limit") Integer limit) {
-        Map<String, Object> result = processDefinitionService.viewTree(projectCode, code, limit);
+        Map<String, Object> result = processDefinitionService.viewTree(loginUser,projectCode, code, limit);
         return returnDataList(result);
     }
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java
Patch:
@@ -403,7 +403,8 @@ public enum Status {
     QUERY_AUTHORIZED_NAMESPACE_ERROR(1300013, "query authorized namespace error", "查询授权命名空间错误"),
     QUERY_CAN_USE_K8S_CLUSTER_ERROR(1300014, "login user query can used k8s cluster list error", "查询可用k8s集群错误"),
     RESOURCE_FULL_NAME_TOO_LONG_ERROR(1300015, "resource's fullname is too long error", "资源文件名过长"),
-    TENANT_FULL_NAME_TOO_LONG_ERROR(1300016, "tenant's fullname is too long error", "租户名过长");
+    TENANT_FULL_NAME_TOO_LONG_ERROR(1300016, "tenant's fullname is too long error", "租户名过长"),
+    FUNCTION_DISABLED(1400002, "The current feature is disabled.", "当前功能已被禁用");
 
     private final int code;
     private final String enMsg;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProcessDefinitionService.java
Patch:
@@ -321,7 +321,7 @@ Map<String, Object> getNodeListMapByDefinitionCodes(User loginUser,
      * @param limit limit
      * @return tree view json data
      */
-    Map<String, Object> viewTree(long projectCode, long code, Integer limit);
+    Map<String, Object> viewTree(User loginUser,long projectCode, long code, Integer limit);
 
     /**
      * switch the defined process definition version

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProjectService.java
Patch:
@@ -61,11 +61,12 @@ public interface ProjectService {
      * @param loginUser login user
      * @param project project
      * @param projectCode project code
+     * @param perm String
      * @return true if the login user have permission to see the project
      */
-    Map<String, Object> checkProjectAndAuth(User loginUser, Project project, long projectCode);
+    Map<String, Object> checkProjectAndAuth(User loginUser, Project project, long projectCode,String perm);
 
-    boolean hasProjectAndPerm(User loginUser, Project project, Map<String, Object> result);
+    boolean hasProjectAndPerm(User loginUser, Project project, Map<String, Object> result,String perm);
 
     boolean hasProjectAndPerm(User loginUser, Project project, Result result);
 

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/SchedulerServiceTest.java
Patch:
@@ -118,7 +118,7 @@ public void testSetScheduleState() {
         //hash no auth
         result = schedulerService.setScheduleState(loginUser, project.getCode(), 1, ReleaseState.ONLINE);
 
-        Mockito.when(projectService.hasProjectAndPerm(loginUser, project, result)).thenReturn(true);
+        Mockito.when(projectService.hasProjectAndPerm(loginUser, project, result,null)).thenReturn(true);
         //schedule not exists
         result = schedulerService.setScheduleState(loginUser, project.getCode(), 2, ReleaseState.ONLINE);
         Assert.assertEquals(Status.SCHEDULE_CRON_NOT_EXISTS, result.get(Constants.STATUS));

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/AlertPluginInstanceMapper.java
Patch:
@@ -58,5 +58,4 @@ public interface AlertPluginInstanceMapper extends BaseMapper<AlertPluginInstanc
      * @return if exist return true else return null
      */
     Boolean existInstanceName(@Param("instanceName") String instanceName);
-
 }

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/TenantMapper.java
Patch:
@@ -28,6 +28,8 @@
 import com.baomidou.mybatisplus.core.mapper.BaseMapper;
 import com.baomidou.mybatisplus.core.metadata.IPage;
 
+import java.util.List;
+
 /**
  * tenant mapper interface
  */

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkerGroupMapper.java
Patch:
@@ -61,5 +61,4 @@ public interface WorkerGroupMapper extends BaseMapper<WorkerGroup> {
      * @return worker group list
      */
     List<WorkerGroup> queryWorkerGroupByName(@Param("name") String name);
-
 }

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/K8sNamespaceMapperTest.java
Patch:
@@ -23,6 +23,7 @@
 import java.util.Date;
 import java.util.List;
 
+import org.apache.dolphinscheduler.dao.entity.User;
 import org.junit.After;
 import org.junit.Assert;
 import org.junit.Before;
@@ -51,6 +52,7 @@ private K8sNamespace insertOne() {
         k8sNamespace.setLimitsMemory(100);
         k8sNamespace.setCreateTime(new Date());
         k8sNamespace.setUpdateTime(new Date());
+        k8sNamespace.setId(1);
         k8sNamespaceMapper.insert(k8sNamespace);
         return k8sNamespace;
     }

File: dolphinscheduler-service/src/test/java/org/apache/dolphinscheduler/service/process/ProcessServiceTest.java
Patch:
@@ -421,7 +421,7 @@ public void testHandleCommand() {
         Mockito.when(commandMapper.deleteById(7)).thenReturn(1);
         Mockito.when(processInstanceMapper.queryByProcessDefineCodeAndProcessDefinitionVersionAndStatusAndNextId(11L, 1, Constants.RUNNING_PROCESS_STATE, 224)).thenReturn(null);
         ProcessInstance processInstance8 = processService.handleCommand(logger, host, command7);
-        Assert.assertTrue(processInstance8 == null);
+        Assert.assertTrue(processInstance8 != null);
 
         ProcessDefinition processDefinition2 = new ProcessDefinition();
         processDefinition2.setId(123);

File: dolphinscheduler-alert/dolphinscheduler-alert-plugins/dolphinscheduler-alert-email/src/test/java/org/apache/dolphinscheduler/plugin/alert/email/template/DefaultHTMLTemplateTest.java
Patch:
@@ -76,7 +76,7 @@ private String generateMockTableTypeResultByHand() {
         return EmailConstants.HTML_HEADER_PREFIX
             + "<thead>"
             + "<tr><th>mysql service name</th><th>mysql address</th><th>database client connections</th><th>port</th><th>no index of number</th></tr>"
-            + "</thead>\n"
+            + "</thead>"+System.getProperty("line.separator")
             + "<tr><td>mysql200</td><td>192.168.xx.xx</td><td>190</td><td>3306</td><td>80</td></tr>"
             + "<tr><td>mysql210</td><td>192.168.xx.xx</td><td>90</td><td>3306</td><td>10</td></tr>"
             + EmailConstants.TABLE_BODY_HTML_TAIL;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java
Patch:
@@ -330,7 +330,7 @@ public enum Status {
 
     //plugin
     PLUGIN_NOT_A_UI_COMPONENT(110001, "query plugin error, this plugin has no UI component", "查询插件错误，此插件无UI组件"),
-    QUERY_PLUGINS_RESULT_IS_NULL(110002, "query plugins result is null", "查询插件为空"),
+    QUERY_PLUGINS_RESULT_IS_NULL(110002, "query alarm plugins result is empty, please check the startup status of the alarm component and confirm that the relevant alarm plugin is successfully registered", "查询告警插件为空, 请检查告警组件启动状态并确认相关告警插件已注册成功"),
     QUERY_PLUGINS_ERROR(110003, "query plugins error", "查询插件错误"),
     QUERY_PLUGIN_DETAIL_RESULT_IS_NULL(110004, "query plugin detail result is null", "查询插件详情结果为空"),
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/python/PythonGateway.java
Patch:
@@ -221,6 +221,7 @@ public Long createOrUpdateProcessDefinition(String userName,
                                                 int timeout,
                                                 String workerGroup,
                                                 String tenantCode,
+                                                int releaseState,
                                                 String taskRelationJson,
                                                 String taskDefinitionJson,
                                                 ProcessExecutionTypeEnum executionType) {
@@ -248,7 +249,7 @@ public Long createOrUpdateProcessDefinition(String userName,
         if (schedule != null) {
             createOrUpdateSchedule(user, projectCode, processDefinitionCode, schedule, workerGroup, warningType, warningGroupId);
         }
-        processDefinitionService.releaseProcessDefinition(user, projectCode, processDefinitionCode, ReleaseState.ONLINE);
+        processDefinitionService.releaseProcessDefinition(user, projectCode, processDefinitionCode, ReleaseState.getEnum(releaseState));
         return processDefinitionCode;
     }
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProcessDefinitionServiceImpl.java
Patch:
@@ -711,7 +711,7 @@ public Map<String, Object> deleteProcessDefinitionByCode(User loginUser, long pr
 
         // check process definition is already online
         if (processDefinition.getReleaseState() == ReleaseState.ONLINE) {
-            putMsg(result, Status.PROCESS_DEFINE_STATE_ONLINE, String.valueOf(code));
+            putMsg(result, Status.PROCESS_DEFINE_STATE_ONLINE, processDefinition.getName());
             return result;
         }
         // check process instances is already running

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/interceptor/LoginHandlerInterceptor.java
Patch:
@@ -37,6 +37,8 @@
 import org.springframework.web.servlet.HandlerInterceptor;
 import org.springframework.web.servlet.ModelAndView;
 
+import java.util.Date;
+
 /**
  * login interceptor, must log in first
  */
@@ -71,7 +73,7 @@ public boolean preHandle(HttpServletRequest request, HttpServletResponse respons
                 return false;
             }
         } else {
-            user = userMapper.queryUserByToken(token);
+            user = userMapper.queryUserByToken(token, new Date());
             if (user == null) {
                 response.setStatus(HttpStatus.SC_UNAUTHORIZED);
                 logger.info("user token has expired");

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/UserMapperTest.java
Patch:
@@ -303,7 +303,7 @@ public void testQueryUserByToken() {
         //insertOneAccessToken
         AccessToken accessToken = insertOneAccessToken(user);
         //queryUserByToken
-        User userToken = userMapper.queryUserByToken(accessToken.getToken());
+        User userToken = userMapper.queryUserByToken(accessToken.getToken(), new Date());
         Assert.assertEquals(userToken, user);
 
     }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProcessInstanceController.java
Patch:
@@ -97,7 +97,7 @@ public class ProcessInstanceController extends BaseController {
      */
     @ApiOperation(value = "queryProcessInstanceListPaging", notes = "QUERY_PROCESS_INSTANCE_LIST_NOTES")
     @ApiImplicitParams({
-        @ApiImplicitParam(name = "processDefiniteCode", value = "PROCESS_DEFINITION_CODE", dataType = "Long", example = "100"),
+        @ApiImplicitParam(name = "processDefineCode", value = "PROCESS_DEFINITION_CODE", dataType = "Long", example = "100"),
         @ApiImplicitParam(name = "searchVal", value = "SEARCH_VAL", type = "String"),
         @ApiImplicitParam(name = "executorName", value = "EXECUTOR_NAME", type = "String"),
         @ApiImplicitParam(name = "stateType", value = "EXECUTION_STATUS", type = "ExecutionStatus"),

File: dolphinscheduler-alert/dolphinscheduler-alert-server/src/main/java/org/apache/dolphinscheduler/alert/AlertServer.java
Patch:
@@ -31,7 +31,6 @@
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-import org.springframework.boot.WebApplicationType;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.builder.SpringApplicationBuilder;
 import org.springframework.boot.context.event.ApplicationReadyEvent;

File: dolphinscheduler-alert/dolphinscheduler-alert-server/src/test/java/org/apache/dolphinscheduler/alert/AlertServerTest.java
Patch:
@@ -56,8 +56,8 @@ public class AlertServerTest extends TestCase {
     public void testStart() {
 
         Mockito.when(pluginDao.checkPluginDefineTableExist()).thenReturn(true);
-        
-        Mockito.when(alertConfig.getPort()).thenReturn(50053);
+
+        Mockito.when(alertConfig.getPort()).thenReturn(50052);
 
         Mockito.doNothing().when(alertSenderService).start();
 
@@ -67,7 +67,7 @@ public void testStart() {
     
         NettyServerConfig nettyServerConfig = Whitebox.getInternalState(nettyRemotingServer, "serverConfig");
         
-        Assert.assertEquals(50053, nettyServerConfig.getListenPort());
+        Assert.assertEquals(50052, nettyServerConfig.getListenPort());
 
     }
 }

File: dolphinscheduler-alert/dolphinscheduler-alert-server/src/main/java/org/apache/dolphinscheduler/alert/AlertServer.java
Patch:
@@ -63,7 +63,7 @@ public AlertServer(PluginDao pluginDao, AlertSenderService alertSenderService, A
      */
     public static void main(String[] args) {
         Thread.currentThread().setName(Constants.THREAD_NAME_ALERT_SERVER);
-        new SpringApplicationBuilder(AlertServer.class).web(WebApplicationType.NONE).run(args);
+        new SpringApplicationBuilder(AlertServer.class).run(args);
     }
 
     @EventListener

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskInstance.java
Patch:
@@ -713,6 +713,8 @@ public String toString() {
                 + ", executorName='" + executorName + '\''
                 + ", delayTime=" + delayTime
                 + ", dryRun=" + dryRun
+                + ", taskGroupId=" + taskGroupId
+                + ", taskGroupPriority=" + taskGroupPriority
                 + '}';
     }
 

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/task/CommonTaskProcessor.java
Patch:
@@ -114,7 +114,7 @@ public boolean dispatchTask() {
 
             TaskPriority taskPriority = new TaskPriority(processInstance.getProcessInstancePriority().getCode(),
                     processInstance.getId(), taskInstance.getProcessInstancePriority().getCode(),
-                    taskInstance.getId(), org.apache.dolphinscheduler.common.Constants.DEFAULT_WORKER_GROUP);
+                    taskInstance.getId(), taskInstance.getTaskGroupPriority(), org.apache.dolphinscheduler.common.Constants.DEFAULT_WORKER_GROUP);
 
             TaskExecutionContext taskExecutionContext = getTaskExecutionContext(taskInstance);
             if (taskExecutionContext == null) {

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java
Patch:
@@ -396,7 +396,7 @@ public enum Status {
     K8S_CLIENT_OPS_ERROR(1300006, "k8s error with exception {0}", "k8s操作报错[{0}]"),
     VERIFY_K8S_NAMESPACE_ERROR(1300007, "verify k8s and namespace error", "验证k8s命名空间信息错误"),
     DELETE_K8S_NAMESPACE_BY_ID_ERROR(1300008, "delete k8s namespace by id error", "删除命名空间错误"),
-    VERIFY_PARAMETER_NAME_FAILED(1300009, "The file name verify  failed", "文件命名校验失败"),
+    VERIFY_PARAMETER_NAME_FAILED(1300009, "The file name verify failed", "文件命名校验失败"),
     STORE_OPERATE_CREATE_ERROR(1300010, "create the resource failed", "存储操作失败"),
     GRANT_K8S_NAMESPACE_ERROR(1300011, "grant namespace error", "授权资源错误"),
     QUERY_UNAUTHORIZED_NAMESPACE_ERROR(1300012, "query unauthorized namespace error", "查询未授权命名空间错误"),

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessService.java
Patch:
@@ -296,4 +296,6 @@ void sendStartTask2Master(ProcessInstance processInstance, int taskId,
                               org.apache.dolphinscheduler.remote.command.CommandType taskType);
 
     ProcessInstance loadNextProcess4Serial(long code, int state, int id);
+
+    public String findConfigYamlByName(String clusterName) ;
 }

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/task/ConditionTaskProcessor.java
Patch:
@@ -68,7 +68,7 @@ public boolean submitTask() {
         }
         this.setTaskExecutionLogger();
         initTaskParameters();
-        logger.info("dependent task start");
+        logger.info("condition task start");
         return true;
     }
 
@@ -170,8 +170,7 @@ private DependResult getDependResultForItem(DependentItem item) {
             logger.info("depend item : {} expect status: {}, actual status: {}", item.getDepTaskCode(), item.getStatus(), executionStatus);
             dependResult = DependResult.FAILED;
         }
-        logger.info("dependent item complete {} {},{}",
-                Constants.DEPENDENT_SPLIT, item.getDepTaskCode(), dependResult);
+        logger.info("dependent item complete, dependentTaskCode: {}, dependResult: {}", item.getDepTaskCode(), dependResult);
         return dependResult;
     }
 

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/entity/UdfFuncTest.java
Patch:
@@ -37,7 +37,7 @@ public void testUdfFuncToString() {
     udfFunc.setClassName("org.apache.dolphinscheduler.test.mrUpdate");
 
     Assert.assertEquals("{\"id\":0,\"userId\":0,\"resourceType\":\"UDF\",\"funcName\":null,\"className\":\"org.apache.dolphinscheduler.test.mrUpdate\",\"argTypes\":null,\"database\":null,"
-                    + "\"description\":null,\"resourceId\":2,\"resourceName\":\"dolphin_resource_update\",\"type\":null,\"createTime\":null,\"updateTime\":null}"
+                    + "\"description\":null,\"resourceId\":2,\"resourceName\":\"dolphin_resource_update\",\"type\":null,\"createTime\":null,\"updateTime\":null,\"userName\":null}"
             , udfFunc.toString());
   }
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java
Patch:
@@ -402,7 +402,8 @@ public enum Status {
     QUERY_UNAUTHORIZED_NAMESPACE_ERROR(1300012, "query unauthorized namespace error", "查询未授权命名空间错误"),
     QUERY_AUTHORIZED_NAMESPACE_ERROR(1300013, "query authorized namespace error", "查询授权命名空间错误"),
     QUERY_CAN_USE_K8S_CLUSTER_ERROR(1300014, "login user query can used k8s cluster list error", "查询可用k8s集群错误"),
-    RESOURCE_FULL_NAME_TOO_LONG_ERROR(1300015, "resource's fullname is too long error", "资源文件名过长");
+    RESOURCE_FULL_NAME_TOO_LONG_ERROR(1300015, "resource's fullname is too long error", "资源文件名过长"),
+    TENANT_FULL_NAME_TOO_LONG_ERROR(1300016, "tenant's fullname is too long error", "租户名过长");
 
     private final int code;
     private final String enMsg;

File: dolphinscheduler-task-plugin/dolphinscheduler-task-flink/src/main/java/org/apache/dolphinscheduler/plugin/task/flink/FlinkConstants.java
Patch:
@@ -50,6 +50,7 @@ private FlinkConstants() {
     public static final String FLINK_MAIN_CLASS = "-c";
     public static final String FLINK_PARALLELISM = "-p";
     public static final String FLINK_SHUTDOWN_ON_ATTACHED_EXIT = "-sae";
+    public static final String FLINK_PYTHON = "-py";
 
     public static final String FLINK_FORMAT_EXECUTION_TARGET = "set execution.target=%s";
     public static final String FLINK_FORMAT_YARN_APPLICATION_NAME = "set yarn.application.name=%s";

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProcessInstanceController.java
Patch:
@@ -380,7 +380,7 @@ public Result viewTree(@ApiIgnore @RequestAttribute(value = Constants.SESSION_US
      */
     @ApiOperation(value = "batchDeleteProcessInstanceByIds", notes = "BATCH_DELETE_PROCESS_INSTANCE_BY_IDS_NOTES")
     @ApiImplicitParams({
-        @ApiImplicitParam(name = "projectName", value = "PROJECT_NAME", required = true, dataType = "String"),
+        @ApiImplicitParam(name = "projectCode", value = "PROJECT_CODE", required = true, dataType = "Int"),
         @ApiImplicitParam(name = "processInstanceIds", value = "PROCESS_INSTANCE_IDS", required = true, dataType = "String"),
     })
     @PostMapping(value = "/batch-delete")
@@ -394,7 +394,7 @@ public Result batchDeleteProcessInstanceByIds(@RequestAttribute(value = Constant
         Map<String, Object> result = new HashMap<>();
         List<String> deleteFailedIdList = new ArrayList<>();
         if (!StringUtils.isEmpty(processInstanceIds)) {
-            String[] processInstanceIdArray = processInstanceIds.split(",");
+            String[] processInstanceIdArray = processInstanceIds.split(Constants.COMMA);
 
             for (String strProcessInstanceId : processInstanceIdArray) {
                 int processInstanceId = Integer.parseInt(strProcessInstanceId);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java
Patch:
@@ -300,6 +300,7 @@ public enum Status {
     DELETE_EDGE_ERROR(50055, "delete edge error", "删除工作流任务连接线错误"),
     NOT_SUPPORT_UPDATE_TASK_DEFINITION(50056, "task state does not support modification", "当前任务不支持修改"),
     NOT_SUPPORT_COPY_TASK_TYPE(50057, "task type [{0}] does not support copy", "不支持复制的任务类型[{0}]"),
+    BATCH_EXECUTE_PROCESS_INSTANCE_ERROR(50058, "change process instance status error: {0}", "修改工作实例状态错误: {0}"),
     HDFS_NOT_STARTUP(60001, "hdfs not startup", "hdfs未启用"),
     STORAGE_NOT_STARTUP(60002, "storage not startup", "存储未启用"),
     S3_CANNOT_RENAME(60003, "directory cannot be renamed", "S3无法重命名文件夹"),

File: dolphinscheduler-tools/src/main/java/org/apache/dolphinscheduler/tools/datasource/InitDolphinScheduler.java
Patch:
@@ -22,6 +22,7 @@
 import org.springframework.boot.CommandLineRunner;
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.context.annotation.Profile;
 import org.springframework.stereotype.Component;
 
 @SpringBootApplication
@@ -31,6 +32,7 @@ public static void main(String[] args) {
     }
 
     @Component
+    @Profile("init")
     static class InitRunner implements CommandLineRunner {
         private static final Logger logger = LoggerFactory.getLogger(InitRunner.class);
 

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/WorkflowExecuteThread.java
Patch:
@@ -1960,6 +1960,9 @@ private boolean checkTaskQueue() {
     private boolean isNewProcessInstance() {
         if (ExecutionStatus.RUNNING_EXECUTION == processInstance.getState() && processInstance.getRunTimes() == 1) {
             return true;
+        } else if (processInstance.getRecovery().equals(Flag.YES)) {
+            // host is empty use old task instance
+            return false;
         } else {
             return false;
         }

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessServiceImpl.java
Patch:
@@ -818,14 +818,15 @@ private void setGlobalParamIfCommanded(ProcessDefinition processDefinition, Map<
         // set start param into global params
         Map<String, String> globalMap = processDefinition.getGlobalParamMap();
         List<Property> globalParamList = processDefinition.getGlobalParamList();
-        if (startParamMap.size() > 0
-            && globalMap != null) {
+        if (startParamMap.size() > 0 && globalMap != null) {
+            //start param to overwrite global param
             for (Map.Entry<String, String> param : globalMap.entrySet()) {
                 String val = startParamMap.get(param.getKey());
                 if (val != null) {
                     param.setValue(val);
                 }
             }
+            //start param to create new global param if global not exist
             for (Entry<String, String> startParam : startParamMap.entrySet()) {
                 if (!globalMap.containsKey(startParam.getKey())) {
                     globalMap.put(startParam.getKey(), startParam.getValue());

File: dolphinscheduler-master/src/test/java/org/apache/dolphinscheduler/server/master/WorkflowExecuteThreadTest.java
Patch:
@@ -164,7 +164,7 @@ public void testGetStartTaskInstanceList() {
             List<TaskInstance> taskInstances = (List<TaskInstance>) method.invoke(workflowExecuteThread, JSONUtils.toJsonString(cmdParam));
             Assert.assertEquals(4, taskInstances.size());
 
-            cmdParam.put(CMD_PARAM_RECOVERY_START_NODE_STRING, "");
+            cmdParam.put(CMD_PARAM_RECOVERY_START_NODE_STRING, "1");
             List<TaskInstance> taskInstanceEmpty = (List<TaskInstance>) method.invoke(workflowExecuteThread, JSONUtils.toJsonString(cmdParam));
             Assert.assertTrue(taskInstanceEmpty.isEmpty());
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java
Patch:
@@ -400,7 +400,8 @@ public enum Status {
     GRANT_K8S_NAMESPACE_ERROR(1300011, "grant namespace error", "授权资源错误"),
     QUERY_UNAUTHORIZED_NAMESPACE_ERROR(1300012, "query unauthorized namespace error", "查询未授权命名空间错误"),
     QUERY_AUTHORIZED_NAMESPACE_ERROR(1300013, "query authorized namespace error", "查询授权命名空间错误"),
-    QUERY_CAN_USE_K8S_CLUSTER_ERROR(1300014, "login user query can used k8s cluster list error", "查询可用k8s集群错误");
+    QUERY_CAN_USE_K8S_CLUSTER_ERROR(1300014, "login user query can used k8s cluster list error", "查询可用k8s集群错误"),
+    RESOURCE_FULL_NAME_TOO_LONG_ERROR(1300015, "resource's fullname is too long error", "资源文件名过长");
 
     private final int code;
     private final String enMsg;

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/Constants.java
Patch:
@@ -822,4 +822,5 @@ private Constants() {
      * schedule timezone
      */
     public static final String SCHEDULE_TIMEZONE = "schedule_timezone";
+    public static final int RESOURCE_FULL_NAME_MAX_LENGTH = 128;
 }

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/ProcessInstanceMapper.java
Patch:
@@ -247,7 +247,8 @@ List<ProcessInstance> queryTopNProcessInstance(@Param("size") int size,
     List<ProcessInstance> queryByProcessDefineCodeAndStatus(@Param("processDefinitionCode") Long processDefinitionCode,
                                                             @Param("states") int[] states);
 
-    List<ProcessInstance> queryByProcessDefineCodeAndStatusAndNextId(@Param("processDefinitionCode") Long processDefinitionCode,
+    List<ProcessInstance> queryByProcessDefineCodeAndProcessDefinitionVersionAndStatusAndNextId(@Param("processDefinitionCode") Long processDefinitionCode,
+                                                                               @Param("processDefinitionVersion") int processDefinitionVersion,
                                                                      @Param("states") int[] states, @Param("id") int id);
 
     int updateGlobalParamsById(@Param("globalParams") String globalParams,

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/WorkflowExecuteThread.java
Patch:
@@ -802,7 +802,7 @@ public void startProcess() {
     /**
      * process end handle
      */
-    private void endProcess() {
+    public void endProcess() {
         this.stateEvents.clear();
         if (processDefinition.getExecutionType().typeIsSerialWait()) {
             checkSerialProcess(processDefinition);

File: dolphinscheduler-service/src/test/java/org/apache/dolphinscheduler/service/process/ProcessServiceTest.java
Patch:
@@ -398,7 +398,7 @@ public void testHandleCommand() {
         command6.setCommandParam("{\"ProcessInstanceId\":223}");
         command6.setCommandType(CommandType.RECOVER_SERIAL_WAIT);
         command6.setProcessDefinitionVersion(1);
-        Mockito.when(processInstanceMapper.queryByProcessDefineCodeAndStatusAndNextId(11L, Constants.RUNNING_PROCESS_STATE, 223)).thenReturn(lists);
+        Mockito.when(processInstanceMapper.queryByProcessDefineCodeAndProcessDefinitionVersionAndStatusAndNextId(11L, 1, Constants.RUNNING_PROCESS_STATE, 223)).thenReturn(lists);
         Mockito.when(processInstanceMapper.updateNextProcessIdById(223, 222)).thenReturn(true);
         Mockito.when(commandMapper.deleteById(6)).thenReturn(1);
         ProcessInstance processInstance6 = processService.handleCommand(logger, host, command6);
@@ -419,7 +419,7 @@ public void testHandleCommand() {
         command7.setCommandType(CommandType.RECOVER_SERIAL_WAIT);
         command7.setProcessDefinitionVersion(1);
         Mockito.when(commandMapper.deleteById(7)).thenReturn(1);
-        Mockito.when(processInstanceMapper.queryByProcessDefineCodeAndStatusAndNextId(11L, Constants.RUNNING_PROCESS_STATE, 224)).thenReturn(null);
+        Mockito.when(processInstanceMapper.queryByProcessDefineCodeAndProcessDefinitionVersionAndStatusAndNextId(11L, 1, Constants.RUNNING_PROCESS_STATE, 224)).thenReturn(null);
         ProcessInstance processInstance8 = processService.handleCommand(logger, host, command7);
         Assert.assertTrue(processInstance8 == null);
 
@@ -441,7 +441,7 @@ public void testHandleCommand() {
         command9.setCommandType(CommandType.RECOVER_SERIAL_WAIT);
         command9.setProcessDefinitionVersion(1);
         Mockito.when(processInstanceMapper.queryDetailById(225)).thenReturn(processInstance9);
-        Mockito.when(processInstanceMapper.queryByProcessDefineCodeAndStatusAndNextId(12L, Constants.RUNNING_PROCESS_STATE, 0)).thenReturn(lists);
+        Mockito.when(processInstanceMapper.queryByProcessDefineCodeAndProcessDefinitionVersionAndStatusAndNextId(12L, 1, Constants.RUNNING_PROCESS_STATE, 0)).thenReturn(lists);
         Mockito.when(processInstanceMapper.updateById(processInstance)).thenReturn(1);
         Mockito.when(commandMapper.deleteById(9)).thenReturn(1);
         ProcessInstance processInstance10 = processService.handleCommand(logger, host, command9);

File: dolphinscheduler-worker/src/main/java/org/apache/dolphinscheduler/server/worker/processor/TaskCallbackService.java
Patch:
@@ -55,7 +55,7 @@ public class TaskCallbackService {
     private static final int[] RETRY_BACKOFF = {1, 2, 3, 5, 10, 20, 40, 100, 100, 100, 100, 200, 200, 200};
 
     @Autowired
-    private TaskExecuteResponseAckProcessor taskExecuteRunningProcessor;
+    private TaskExecuteRunningAckProcessor taskExecuteRunningProcessor;
 
     @Autowired
     private TaskExecuteResponseAckProcessor taskExecuteResponseAckProcessor;

File: dolphinscheduler-common/src/test/java/org/apache/dolphinscheduler/common/utils/JSONUtilsTest.java
Patch:
@@ -28,6 +28,7 @@
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.TimeZone;
 
 import org.junit.Assert;
 import org.junit.Test;
@@ -261,6 +262,7 @@ public void jsonDataDeserializerTest() {
 
     @Test
     public void dateToString() {
+        TimeZone.setDefault(TimeZone.getTimeZone("Asia/Shanghai"));
         String time = "2022-02-22 13:38:24";
         Date date = DateUtils.stringToDate(time);
         String json = JSONUtils.toJsonString(date);
@@ -272,6 +274,7 @@ public void dateToString() {
 
     @Test
     public void stringToDate() {
+        TimeZone.setDefault(TimeZone.getTimeZone("Asia/Shanghai"));
         String json = "\"2022-02-22 13:38:24\"";
         Date date = JSONUtils.parseObject(json, Date.class);
         Assert.assertEquals(date, DateUtils.stringToDate("2022-02-22 13:38:24"));

File: dolphinscheduler-alert/dolphinscheduler-alert-plugins/dolphinscheduler-alert-http/src/main/java/org/apache/dolphinscheduler/plugin/alert/http/HttpAlertChannelFactory.java
Patch:
@@ -55,7 +55,7 @@ public List<PluginParams> params() {
         InputParam bodyParams = InputParam.newBuilder(HttpAlertConstants.NAME_BODY_PARAMS, HttpAlertConstants.BODY_PARAMS)
                                           .setPlaceholder("input request body as JSON format ")
                                           .addValidate(Validate.newBuilder()
-                                                               .setRequired(true)
+                                                               .setRequired(false)
                                                                .build())
                                           .build();
 

File: dolphinscheduler-task-plugin/dolphinscheduler-task-datax/src/main/java/org/apache/dolphinscheduler/plugin/task/datax/DataxTask.java
Patch:
@@ -61,6 +61,7 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
+import java.util.concurrent.ExecutionException;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
@@ -557,8 +558,8 @@ public String[] tryExecuteSqlResolveColumnNames(DbType sourceType, BaseConnectio
             for (int i = 1; i <= num; i++) {
                 columnNames[i - 1] = md.getColumnName(i);
             }
-        } catch (SQLException e) {
-            logger.warn(e.getMessage(), e);
+        } catch (SQLException | ExecutionException e) {
+            logger.error(e.getMessage(), e);
             return null;
         }
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java
Patch:
@@ -241,7 +241,7 @@ public enum Status {
     PROCESS_INSTANCE_NOT_EXIST(50001, "process instance {0} does not exist", "工作流实例[{0}]不存在"),
     PROCESS_INSTANCE_EXIST(50002, "process instance {0} already exists", "工作流实例[{0}]已存在"),
     PROCESS_DEFINE_NOT_EXIST(50003, "process definition {0} does not exist", "工作流定义[{0}]不存在"),
-    PROCESS_DEFINE_NOT_RELEASE(50004, "process definition {0} not on line", "工作流定义[{0}]不是上线状态"),
+    PROCESS_DEFINE_NOT_RELEASE(50004, "process definition {0} process version {1} not on line", "工作流定义[{0}] 工作流版本[{1}]不是上线状态"),
     SUB_PROCESS_DEFINE_NOT_RELEASE(50004, "exist sub process definition not on line", "存在子工作流定义不是上线状态"),
     PROCESS_INSTANCE_ALREADY_CHANGED(50005, "the status of process instance {0} is already {1}", "工作流实例[{0}]的状态已经是[{1}]"),
     PROCESS_INSTANCE_STATE_OPERATION_ERROR(50006, "the status of process instance {0} is {1},Cannot perform {2} operation", "工作流实例[{0}]的状态是[{1}]，无法执行[{2}]操作"),

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ExecutorService.java
Patch:
@@ -73,9 +73,10 @@ Map<String, Object> execProcessInstance(User loginUser, long projectCode,
      * @param projectCode project code
      * @param processDefinition process definition
      * @param processDefineCode process definition code
+     * @param verison process definition version
      * @return check result code
      */
-    Map<String, Object> checkProcessDefinitionValid(long projectCode, ProcessDefinition processDefinition, long processDefineCode);
+    Map<String, Object> checkProcessDefinitionValid(long projectCode, ProcessDefinition processDefinition, long processDefineCode, Integer verison);
 
     /**
      * do action to process instance：pause, stop, repeat, recover from pause, recover from stop

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/SchedulerServiceImpl.java
Patch:
@@ -150,7 +150,7 @@ public Map<String, Object> insertSchedule(User loginUser,
 
         // check work flow define release state
         ProcessDefinition processDefinition = processDefinitionMapper.queryByCode(processDefineCode);
-        result = executorService.checkProcessDefinitionValid(projectCode,processDefinition, processDefineCode);
+        result = executorService.checkProcessDefinitionValid(projectCode,processDefinition, processDefineCode, processDefinition.getVersion());
         if (result.get(Constants.STATUS) != Status.SUCCESS) {
             return result;
         }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProcessDefinitionServiceImpl.java
Patch:
@@ -1555,7 +1555,7 @@ public Map<String, Object> viewTree(long projectCode, long code, Integer limit)
                         // if process is sub process, the return sub id, or sub id=0
                         if (taskInstance.isSubProcess()) {
                             TaskDefinition taskDefinition = taskDefinitionMap.get(taskInstance.getTaskCode());
-                            subProcessCode = Integer.parseInt(JSONUtils.parseObject(
+                            subProcessCode = Long.parseLong(JSONUtils.parseObject(
                                     taskDefinition.getTaskParams()).path(CMD_PARAM_SUB_PROCESS_DEFINE_CODE).asText());
                         }
                         treeViewDto.getInstances().add(new Instance(taskInstance.getId(), taskInstance.getName(), taskInstance.getTaskCode(),

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/WorkflowExecuteThread.java
Patch:
@@ -456,9 +456,9 @@ private void taskFinished(TaskInstance taskInstance) {
             retryTaskInstance(taskInstance);
         } else if (taskInstance.getState().typeIsFailure()) {
             completeTaskMap.put(taskInstance.getTaskCode(), taskInstance.getId());
-            if (taskInstance.isConditionsTask()
-                || DagHelper.haveConditionsAfterNode(Long.toString(taskInstance.getTaskCode()), dag)
-                || DagHelper.haveBlockingAfterNode(Long.toString(taskInstance.getTaskCode()), dag)) {
+            // There are child nodes and the failure policy is: CONTINUE
+            if (DagHelper.haveAllNodeAfterNode(Long.toString(taskInstance.getTaskCode()), dag)
+                    && processInstance.getFailureStrategy() == FailureStrategy.CONTINUE) {
                 submitPostNode(Long.toString(taskInstance.getTaskCode()));
             } else {
                 errorTaskMap.put(taskInstance.getTaskCode(), taskInstance.getId());

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/FailoverExecuteThread.java
Patch:
@@ -50,6 +50,9 @@ public synchronized void start() {
 
     @Override
     public void run() {
+        // when startup, wait 10s for ready
+        ThreadUtils.sleep((long) Constants.SLEEP_TIME_MILLIS * 10);
+
         logger.info("failover execute thread started");
         while (Stopper.isRunning()) {
             try {

File: dolphinscheduler-worker/src/main/java/org/apache/dolphinscheduler/server/worker/WorkerServer.java
Patch:
@@ -155,6 +155,9 @@ public void run() {
 
         this.nettyRemotingServer.start();
 
+        // install task plugin
+        this.taskPluginManager.installPlugin();
+
         // worker registry
         try {
             this.workerRegistryClient.registry();

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/ParameterUtils.java
Patch:
@@ -88,7 +88,7 @@ public static String convertParameterPlaceholders(String parameterString, Map<St
      * @return curing user define parameters
      */
     public static String curingGlobalParams(Map<String, String> globalParamMap, List<Property> globalParamList,
-                                            CommandType commandType, Date scheduleTime) {
+                                            CommandType commandType, Date scheduleTime, String timezone) {
 
         if (globalParamList == null || globalParamList.isEmpty()) {
             return null;
@@ -101,7 +101,7 @@ public static String curingGlobalParams(Map<String, String> globalParamMap, List
         Map<String, String> allParamMap = new HashMap<>();
         //If it is a complement, a complement time needs to be passed in, according to the task type
         Map<String, String> timeParams = BusinessTimeUtils.
-            getBusinessTime(commandType, scheduleTime);
+            getBusinessTime(commandType, scheduleTime, timezone);
 
         if (timeParams != null) {
             allParamMap.putAll(timeParams);

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/WorkflowExecuteThread.java
Patch:
@@ -948,7 +948,7 @@ private void initTaskQueue() {
                         processInstance.setGlobalParams(ParameterUtils.curingGlobalParams(
                             processDefinition.getGlobalParamMap(),
                             processDefinition.getGlobalParamList(),
-                            CommandType.COMPLEMENT_DATA, processInstance.getScheduleTime()));
+                            CommandType.COMPLEMENT_DATA, processInstance.getScheduleTime(), cmdParam.get(Constants.SCHEDULE_TIMEZONE)));
                         processService.updateProcessInstance(processInstance);
                     }
                 }

File: dolphinscheduler-master/src/test/java/org/apache/dolphinscheduler/server/master/ParamsTest.java
Patch:
@@ -43,7 +43,7 @@ public void systemParamsTest() throws Exception {
         // start process
         Map<String,String> timeParams = BusinessTimeUtils
                 .getBusinessTime(CommandType.START_PROCESS,
-                        new Date());
+                        new Date(), null);
 
         command = ParameterUtils.convertParameterPlaceholders(command, timeParams);
 
@@ -57,7 +57,7 @@ public void systemParamsTest() throws Exception {
         // complement data
         timeParams = BusinessTimeUtils
                 .getBusinessTime(CommandType.COMPLEMENT_DATA,
-                        calendar.getTime());
+                        calendar.getTime(), null);
         command = ParameterUtils.convertParameterPlaceholders(command, timeParams);
         logger.info("complement data : {}",command);
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ExecutorServiceImpl.java
Patch:
@@ -215,10 +215,10 @@ public Map<String, Object> checkProcessDefinitionValid(long projectCode, Process
         Map<String, Object> result = new HashMap<>();
         if (processDefinition == null || projectCode != processDefinition.getProjectCode()) {
             // check process definition exists
-            putMsg(result, Status.PROCESS_DEFINE_NOT_EXIST, processDefineCode);
+            putMsg(result, Status.PROCESS_DEFINE_NOT_EXIST, String.valueOf(processDefineCode));
         } else if (processDefinition.getReleaseState() != ReleaseState.ONLINE) {
             // check process definition online
-            putMsg(result, Status.PROCESS_DEFINE_NOT_RELEASE, processDefineCode);
+            putMsg(result, Status.PROCESS_DEFINE_NOT_RELEASE, String.valueOf(processDefineCode));
         } else if (!checkSubProcessDefinitionValid(processDefinition)){
             // check sub process definition online
             putMsg(result, Status.SUB_PROCESS_DEFINE_NOT_RELEASE);
@@ -488,7 +488,7 @@ private Map<String, Object> insertCommand(User loginUser, Integer instanceId, lo
         command.setProcessInstanceId(instanceId);
 
         if (!processService.verifyIsNeedCreateCommand(command)) {
-            putMsg(result, Status.PROCESS_INSTANCE_EXECUTING_COMMAND, processDefinitionCode);
+            putMsg(result, Status.PROCESS_INSTANCE_EXECUTING_COMMAND, String.valueOf(processDefinitionCode));
             return result;
         }
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/utils/RegexUtils.java
Patch:
@@ -26,7 +26,7 @@
  */
 public class RegexUtils {
 
-    private static final String LINUX_USERNAME_PATTERN = "[a-z_][a-z\\d_]{0,30}";
+    private static final String LINUX_USERNAME_PATTERN = "^[a-zA-Z0-9_].{0,30}";
 
     private RegexUtils() {
     }

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessServiceImpl.java
Patch:
@@ -1490,7 +1490,6 @@ public TaskInstance submitTaskInstanceToDB(TaskInstance taskInstance, ProcessIns
             taskInstance.setState(ExecutionStatus.PAUSE);
         }
         taskInstance.setExecutorId(processInstance.getExecutorId());
-        taskInstance.setProcessInstancePriority(processInstance.getProcessInstancePriority());
         taskInstance.setState(getSubmitTaskState(taskInstance, processInstance));
         if (taskInstance.getSubmitTime() == null) {
             taskInstance.setSubmitTime(new Date());
@@ -1670,6 +1669,7 @@ public List<TaskInstance> findTaskInstanceByIdList(List<Integer> idList) {
     public void packageTaskInstance(TaskInstance taskInstance, ProcessInstance processInstance) {
         taskInstance.setProcessInstance(processInstance);
         taskInstance.setProcessDefine(processInstance.getProcessDefinition());
+        taskInstance.setProcessInstancePriority(processInstance.getProcessInstancePriority());
         TaskDefinition taskDefinition = this.findTaskDefinition(
             taskInstance.getTaskCode(),
             taskInstance.getTaskDefinitionVersion());

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ResourcesServiceImpl.java
Patch:
@@ -525,7 +525,7 @@ private Result<Object> verifyFile(String name, ResourceType type, MultipartFile
             String nameSuffix = Files.getFileExtension(name);
 
             // determine file suffix
-            if (!(StringUtils.isNotEmpty(fileSuffix) && fileSuffix.equalsIgnoreCase(nameSuffix))) {
+            if (!fileSuffix.equalsIgnoreCase(nameSuffix)) {
                 // rename file suffix and original suffix must be consistent
                 logger.error("rename file suffix and original suffix must be consistent: {}", RegexUtils.escapeNRT(file.getOriginalFilename()));
                 putMsg(result, Status.RESOURCE_SUFFIX_FORBID_CHANGE);
@@ -629,7 +629,7 @@ private boolean upload(User loginUser, String fullName, MultipartFile file, Reso
         String nameSuffix = Files.getFileExtension(fullName);
 
         // determine file suffix
-        if (!(StringUtils.isNotEmpty(fileSuffix) && fileSuffix.equalsIgnoreCase(nameSuffix))) {
+        if (!fileSuffix.equalsIgnoreCase(nameSuffix)) {
             return false;
         }
         // query tenant

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/config/StoreConfiguration.java
Patch:
@@ -25,7 +25,9 @@
 import org.springframework.context.annotation.Configuration;
 import org.springframework.stereotype.Component;
 
-import static org.apache.dolphinscheduler.common.Constants.*;
+import static org.apache.dolphinscheduler.common.Constants.RESOURCE_STORAGE_TYPE;
+import static org.apache.dolphinscheduler.common.Constants.STORAGE_HDFS;
+import static org.apache.dolphinscheduler.common.Constants.STORAGE_S3;
 
 
 /**

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/PropertyUtils.java
Patch:
@@ -69,7 +69,7 @@ public static synchronized void loadPropertyFile(String... propertyFiles) {
      */
     public static boolean getResUploadStartupState() {
         String resUploadStartupType = PropertyUtils.getUpperCaseString(Constants.RESOURCE_STORAGE_TYPE);
-        ResUploadType resUploadType = ResUploadType.valueOf(resUploadStartupType);
+        ResUploadType resUploadType = ResUploadType.valueOf(StringUtils.isEmpty(resUploadStartupType) ? ResUploadType.NONE.name() : resUploadStartupType);
         return resUploadType != ResUploadType.NONE;
     }
 

File: dolphinscheduler-worker/src/main/java/org/apache/dolphinscheduler/server/worker/processor/TaskExecuteProcessor.java
Patch:
@@ -18,8 +18,6 @@
 package org.apache.dolphinscheduler.server.worker.processor;
 
 import org.apache.dolphinscheduler.common.Constants;
-import org.apache.dolphinscheduler.common.enums.ResUploadType;
-import org.apache.dolphinscheduler.common.storage.StorageOperateManager;
 import org.apache.dolphinscheduler.common.utils.CommonUtils;
 import org.apache.dolphinscheduler.common.utils.DateUtils;
 import org.apache.dolphinscheduler.common.utils.FileUtils;
@@ -163,7 +161,7 @@ public void process(Channel channel, Command command) {
         }
 
         // submit task to manager
-        boolean offer = workerManager.offer(new TaskExecuteThread(taskExecutionContext, taskCallbackService, alertClientService, taskPluginManager, StorageOperateManager.getStorageOperate(ResUploadType.HDFS)));
+        boolean offer = workerManager.offer(new TaskExecuteThread(taskExecutionContext, taskCallbackService, alertClientService, taskPluginManager));
         if (!offer) {
             logger.error("submit task to manager error, queue is full, queue size is {}, taskInstanceId: {}",
                     workerManager.getDelayQueueSize(), taskExecutionContext.getTaskInstanceId());

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProjectController.java
Patch:
@@ -287,7 +287,7 @@ public Result queryProjectCreatedAndAuthorizedByUser(@ApiIgnore @RequestAttribut
     @ApiException(LOGIN_USER_QUERY_PROJECT_LIST_PAGING_ERROR)
     @AccessLogAnnotation(ignoreRequestArgs = "loginUser")
     public Result queryAllProjectList(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser) {
-        Map<String, Object> result = projectService.queryAllProjectList();
+        Map<String, Object> result = projectService.queryAllProjectList(loginUser);
         return returnDataList(result);
     }
 }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProjectService.java
Patch:
@@ -138,10 +138,10 @@ public interface ProjectService {
 
     /**
      * query all project list that have one or more process definitions.
-     *
+     * @param loginUser
      * @return project list
      */
-    Map<String, Object> queryAllProjectList();
+    Map<String, Object> queryAllProjectList(User loginUser);
 
     /**
      * query authorized and user create project list by user id

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/ProjectControllerTest.java
Patch:
@@ -137,9 +137,11 @@ public void testQueryAuthorizedUser() {
 
     @Test
     public void testQueryAllProjectList() {
+        User user = new User();
+        user.setId(0);
         Map<String, Object> result = new HashMap<>();
         putMsg(result, Status.SUCCESS);
-        Mockito.when(projectService.queryAllProjectList()).thenReturn(result);
+        Mockito.when(projectService.queryAllProjectList(user)).thenReturn(result);
         Result response = projectController.queryAllProjectList(user);
         Assert.assertEquals(Status.SUCCESS.getCode(), response.getCode().intValue());
     }

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/ProjectMapper.java
Patch:
@@ -123,7 +123,8 @@ IPage<Project> queryProjectListPaging(IPage<Project> page,
 
     /**
      * query all project
+     * @param userId
      * @return projectList
      */
-    List<Project> queryAllProject();
+    List<Project> queryAllProject(@Param("userId") int userId);
 }

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/Constants.java
Patch:
@@ -816,4 +816,5 @@ private Constants() {
     public static final String K8S = "k8s";
     public static final String LIMITS_CPU = "limitsCpu";
     public static final String LIMITS_MEMORY = "limitsMemory";
+    public static final String K8S_LOCAL_TEST_CLUSTER = "ds_null_k8s";
 }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ExecutorServiceImpl.java
Patch:
@@ -248,6 +248,9 @@ public boolean checkSubProcessDefinitionValid(ProcessDefinition processDefinitio
         taskDefinitions.stream()
                 .filter(task -> TaskConstants.TASK_TYPE_SUB_PROCESS.equalsIgnoreCase(task.getTaskType()))
                 .forEach(taskDefinition -> processDefinitionCodeSet.add(Long.valueOf(JSONUtils.getNodeString(taskDefinition.getTaskParams(), Constants.CMD_PARAM_SUB_PROCESS_DEFINE_CODE))));
+        if (processDefinitionCodeSet.isEmpty()){
+            return true;
+        }
 
         // check sub releaseState
         List<ProcessDefinition> processDefinitions = processDefinitionMapper.queryByCodes(processDefinitionCodeSet);

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/DependentProcessDefinition.java
Patch:
@@ -110,7 +110,7 @@ public String getProcessDefinitionName() {
         return this.processDefinitionName;
     }
 
-    public void setprocessDefinitionName(String name) {
+    public void setProcessDefinitionName(String name) {
         this.processDefinitionName = name;
     }
 

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/HadoopUtils.java
Patch:
@@ -37,6 +37,7 @@
 import org.apache.hadoop.yarn.client.cli.RMAdminCLI;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
+import org.springframework.stereotype.Component;
 
 import java.io.*;
 import java.nio.charset.StandardCharsets;
@@ -55,6 +56,7 @@
  * hadoop utils
  * single instance
  */
+@Component
 public class HadoopUtils implements Closeable, StorageOperate {
 
     private static final Logger logger = LoggerFactory.getLogger(HadoopUtils.class);

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/S3Utils.java
Patch:
@@ -36,6 +36,7 @@
 import org.jets3t.service.ServiceException;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
+import org.springframework.stereotype.Component;
 
 import java.io.*;
 import java.util.Collections;
@@ -45,6 +46,7 @@
 
 import static org.apache.dolphinscheduler.common.Constants.*;
 
+@Component
 public class S3Utils implements Closeable, StorageOperate {
 
     private static final Logger logger = LoggerFactory.getLogger(S3Utils.class);

File: dolphinscheduler-worker/src/main/java/org/apache/dolphinscheduler/server/worker/processor/TaskExecuteProcessor.java
Patch:
@@ -18,6 +18,8 @@
 package org.apache.dolphinscheduler.server.worker.processor;
 
 import org.apache.dolphinscheduler.common.Constants;
+import org.apache.dolphinscheduler.common.enums.ResUploadType;
+import org.apache.dolphinscheduler.common.storage.StorageOperateManager;
 import org.apache.dolphinscheduler.common.utils.CommonUtils;
 import org.apache.dolphinscheduler.common.utils.DateUtils;
 import org.apache.dolphinscheduler.common.utils.FileUtils;
@@ -161,7 +163,7 @@ public void process(Channel channel, Command command) {
         }
 
         // submit task to manager
-        boolean offer = workerManager.offer(new TaskExecuteThread(taskExecutionContext, taskCallbackService, alertClientService, taskPluginManager));
+        boolean offer = workerManager.offer(new TaskExecuteThread(taskExecutionContext, taskCallbackService, alertClientService, taskPluginManager, StorageOperateManager.getStorageOperate(ResUploadType.HDFS)));
         if (!offer) {
             logger.error("submit task to manager error, queue is full, queue size is {}, taskInstanceId: {}",
                     workerManager.getDelayQueueSize(), taskExecutionContext.getTaskInstanceId());

File: dolphinscheduler-worker/src/main/java/org/apache/dolphinscheduler/server/worker/runner/TaskExecuteThread.java
Patch:
@@ -115,11 +115,13 @@ public TaskExecuteThread(TaskExecutionContext taskExecutionContext,
     public TaskExecuteThread(TaskExecutionContext taskExecutionContext,
                              TaskCallbackService taskCallbackService,
                              AlertClientService alertClientService,
-                             TaskPluginManager taskPluginManager) {
+                             TaskPluginManager taskPluginManager,
+                             StorageOperate storageOperate) {
         this.taskExecutionContext = taskExecutionContext;
         this.taskCallbackService = taskCallbackService;
         this.alertClientService = alertClientService;
         this.taskPluginManager = taskPluginManager;
+        this.storageOperate = storageOperate;
     }
 
     @Override

File: dolphinscheduler-worker/src/main/java/org/apache/dolphinscheduler/server/worker/processor/TaskCallbackService.java
Patch:
@@ -256,6 +256,5 @@ public void sendTaskExecuteResponseCommand(TaskExecutionContext taskExecutionCon
     public void sendTaskKillResponseCommand(TaskExecutionContext taskExecutionContext) {
         TaskKillResponseCommand taskKillResponseCommand = buildKillTaskResponseCommand(taskExecutionContext);
         send(taskExecutionContext.getTaskInstanceId(), taskKillResponseCommand.convert2Command());
-        TaskCallbackService.remove(taskExecutionContext.getTaskInstanceId());
     }
 }

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/enums/ExecutionStatus.java
Patch:
@@ -45,6 +45,7 @@ public enum ExecutionStatus {
      * 14 serial wait
      * 15 ready block
      * 16 block
+     * 17 dispatch
      */
     SUBMITTED_SUCCESS(0, "submit success"),
     RUNNING_EXECUTION(1, "running"),
@@ -108,7 +109,7 @@ public boolean typeIsFailure() {
      */
     public boolean typeIsFinished() {
         return typeIsSuccess() || typeIsFailure() || typeIsCancel() || typeIsPause()
-            || typeIsStop() || typeIsBlock();
+                || typeIsStop() || typeIsBlock();
     }
 
     /**

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-api/src/main/java/org/apache/dolphinscheduler/plugin/datasource/api/datasource/AbstractDataSourceProcessor.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.dolphinscheduler.plugin.datasource.api.datasource;
 
+import org.apache.dolphinscheduler.plugin.datasource.api.utils.PasswordUtils;
 import org.apache.dolphinscheduler.spi.datasource.BaseConnectionParam;
 import org.apache.dolphinscheduler.spi.datasource.ConnectionParam;
 import org.apache.dolphinscheduler.spi.enums.DbType;
@@ -84,6 +85,6 @@ protected void checkOther(Map<String, String> other) {
     @Override
     public String getDatasourceUniqueId(ConnectionParam connectionParam, DbType dbType) {
         BaseConnectionParam baseConnectionParam = (BaseConnectionParam) connectionParam;
-        return MessageFormat.format("{0}@{1}@{2}", dbType.getDescp(), baseConnectionParam.getUser(), baseConnectionParam.getJdbcUrl());
+        return MessageFormat.format("{0}@{1}@{2}@{3}", dbType.getDescp(), baseConnectionParam.getUser(), PasswordUtils.encodePassword(baseConnectionParam.getPassword()), baseConnectionParam.getJdbcUrl());
     }
 }

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/WorkflowExecuteThread.java
Patch:
@@ -382,10 +382,11 @@ private boolean taskTimeout(StateEvent stateEvent) {
             return true;
         }
         TaskTimeoutStrategy taskTimeoutStrategy = taskInstance.getTaskDefine().getTimeoutNotifyStrategy();
-        if (TaskTimeoutStrategy.FAILED == taskTimeoutStrategy) {
+        if (TaskTimeoutStrategy.FAILED == taskTimeoutStrategy || TaskTimeoutStrategy.WARNFAILED == taskTimeoutStrategy) {
             ITaskProcessor taskProcessor = activeTaskProcessorMaps.get(taskInstance.getTaskCode());
             taskProcessor.action(TaskAction.TIMEOUT);
-        } else {
+        }
+        if (TaskTimeoutStrategy.WARN == taskTimeoutStrategy || TaskTimeoutStrategy.WARNFAILED == taskTimeoutStrategy) {
             ProjectUser projectUser = processService.queryProjectWithUserByProcessInstanceId(processInstance.getId());
             processAlertManager.sendTaskTimeoutAlert(processInstance, taskInstance, projectUser);
         }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/TaskGroupQueueServiceImpl.java
Patch:
@@ -115,9 +115,7 @@ public Map<String, Object> queryAllTasks(User loginUser, int pageNo, int pageSiz
     public Map<String, Object> doQuery(User loginUser, int pageNo, int pageSize,
                                        int groupId) {
         Map<String, Object> result = new HashMap<>();
-        if (isNotAdmin(loginUser, result)) {
-            return result;
-        }
+
         Page<TaskGroupQueue> page = new Page<>(pageNo, pageSize);
         IPage<TaskGroupQueue> taskGroupQueue = taskGroupQueueMapper.queryTaskGroupQueuePaging(page, groupId);
 

File: dolphinscheduler-task-plugin/dolphinscheduler-task-python/src/test/java/org/apache/dolphinscheduler/plugin/task/python/PythonTaskTest.java
Patch:
@@ -29,7 +29,7 @@ public void buildPythonExecuteCommand() throws Exception {
         String methodName = "buildPythonExecuteCommand";
         String pythonFile = "test.py";
         String result1 = Whitebox.invokeMethod(pythonTask, methodName, pythonFile);
-        Assert.assertEquals("python test.py", result1);
+        Assert.assertEquals("${PYTHON_HOME} test.py", result1);
     }
 
     private PythonTask createPythonTask() {

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/DataAnalysisServiceTest.java
Patch:
@@ -260,14 +260,14 @@ public void testCountCommandState() {
         commandCounts.add(commandCount);
 
         Mockito.when(commandMapper.countCommandState(0, null, null, new Long[]{1L})).thenReturn(commandCounts);
-        Mockito.when(errorCommandMapper.countCommandState(null, null, new Long[]{1L})).thenReturn(commandCounts);
+        Mockito.when(errorCommandMapper.countCommandState(0, null, null, new Long[]{1L})).thenReturn(commandCounts);
 
         Map<String, Object> result = dataAnalysisServiceImpl.countCommandState(user);
         Assert.assertEquals(Status.SUCCESS, result.get(Constants.STATUS));
 
         // when no command found then return all count are 0
         Mockito.when(commandMapper.countCommandState(anyInt(), any(), any(), any())).thenReturn(Collections.emptyList());
-        Mockito.when(errorCommandMapper.countCommandState(any(), any(), any())).thenReturn(Collections.emptyList());
+        Mockito.when(errorCommandMapper.countCommandState(anyInt(), any(), any(), any())).thenReturn(Collections.emptyList());
         Map<String, Object> result5 = dataAnalysisServiceImpl.countCommandState(user);
         assertThat(result5).containsEntry(Constants.STATUS, Status.SUCCESS);
         assertThat(result5.get(Constants.DATA_LIST)).asList().extracting("errorCount").allMatch(count -> count.equals(0));
@@ -281,7 +281,7 @@ public void testCountCommandState() {
         errorCommandCount.setCommandType(CommandType.START_PROCESS);
         errorCommandCount.setCount(5);
         Mockito.when(commandMapper.countCommandState(anyInt(), any(), any(), any())).thenReturn(Collections.singletonList(normalCommandCount));
-        Mockito.when(errorCommandMapper.countCommandState(any(), any(), any())).thenReturn(Collections.singletonList(errorCommandCount));
+        Mockito.when(errorCommandMapper.countCommandState(anyInt(), any(), any(), any())).thenReturn(Collections.singletonList(errorCommandCount));
 
         Map<String, Object> result6 = dataAnalysisServiceImpl.countCommandState(user);
 

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/ErrorCommandMapper.java
Patch:
@@ -34,12 +34,14 @@ public interface ErrorCommandMapper extends BaseMapper<ErrorCommand> {
 
     /**
      * count command state
+     * @param userId
      * @param startTime startTime
      * @param endTime endTime
      * @param projectCodeArray projectCodeArray
      * @return CommandCount list
      */
     List<CommandCount> countCommandState(
+            @Param("userId") int userId,
             @Param("startTime") Date startTime,
             @Param("endTime") Date endTime,
             @Param("projectCodeArray") Long[] projectCodeArray);

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/ErrorCommandMapperTest.java
Patch:
@@ -77,6 +77,7 @@ public void testQuery() {
         errorCommandMapper.updateById(errorCommand);
 
         List<CommandCount> commandCounts = errorCommandMapper.countCommandState(
+                0,
                 null,
                 null,
                 new Long[0]
@@ -86,6 +87,7 @@ public void testQuery() {
         projectCodeArray[0] = processDefinition.getProjectCode();
         projectCodeArray[1] = 200L;
         List<CommandCount> commandCounts2 = errorCommandMapper.countCommandState(
+                0,
                 null,
                 null,
                 projectCodeArray

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/builder/TaskExecutionContextBuilder.java
Patch:
@@ -19,14 +19,15 @@
 
 import static org.apache.dolphinscheduler.common.Constants.SEC_2_MINUTES_TIME_UNIT;
 
-import org.apache.dolphinscheduler.plugin.task.api.enums.TaskTimeoutStrategy;
 import org.apache.dolphinscheduler.common.enums.TimeoutFlag;
 import org.apache.dolphinscheduler.dao.entity.ProcessDefinition;
 import org.apache.dolphinscheduler.dao.entity.ProcessInstance;
 import org.apache.dolphinscheduler.dao.entity.TaskDefinition;
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
 import org.apache.dolphinscheduler.plugin.task.api.DataQualityTaskExecutionContext;
 import org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContext;
+import org.apache.dolphinscheduler.plugin.task.api.enums.ExecutionStatus;
+import org.apache.dolphinscheduler.plugin.task.api.enums.TaskTimeoutStrategy;
 import org.apache.dolphinscheduler.plugin.task.api.parameters.resource.ResourceParametersHelper;
 
 /**
@@ -60,6 +61,7 @@ public TaskExecutionContextBuilder buildTaskInstanceRelatedInfo(TaskInstance tas
         taskExecutionContext.setDelayTime(taskInstance.getDelayTime());
         taskExecutionContext.setVarPool(taskInstance.getVarPool());
         taskExecutionContext.setDryRun(taskInstance.getDryRun());
+        taskExecutionContext.setCurrentExecutionStatus(ExecutionStatus.SUBMITTED_SUCCESS);
         return this;
     }
 

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/AlertDaoTest.java
Patch:
@@ -68,12 +68,12 @@ public void testAddAlertSendStatus() {
     }
 
     @Test
-    public void testSendServerStopedAlert() {
+    public void testSendServerStoppedAlert() {
         int alertGroupId = 1;
         String host = "127.0.0.998165432";
         String serverType = "Master";
-        alertDao.sendServerStopedAlert(alertGroupId, host, serverType);
-        alertDao.sendServerStopedAlert(alertGroupId, host, serverType);
+        alertDao.sendServerStoppedAlert(alertGroupId, host, serverType);
+        alertDao.sendServerStoppedAlert(alertGroupId, host, serverType);
         long count = alertDao.listPendingAlerts()
                              .stream()
                              .filter(alert -> alert.getContent().contains(host))

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/registry/ServerNodeManager.java
Patch:
@@ -246,7 +246,7 @@ public void notify(Event event) {
                         String group = parseGroup(path);
                         Collection<String> currentNodes = registryClient.getWorkerGroupNodesDirectly(group);
                         syncWorkerGroupNodes(group, currentNodes);
-                        alertDao.sendServerStopedAlert(1, path, "WORKER");
+                        alertDao.sendServerStoppedAlert(1, path, "WORKER");
                     } else if (type == Type.UPDATE) {
                         logger.debug("worker group node : {} update, data: {}", path, data);
                         String group = parseGroup(path);
@@ -296,7 +296,7 @@ public void notify(Event event) {
                     if (type.equals(Type.REMOVE)) {
                         logger.info("master node : {} down.", path);
                         updateMasterNodes();
-                        alertDao.sendServerStopedAlert(1, path, "MASTER");
+                        alertDao.sendServerStoppedAlert(1, path, "MASTER");
                     }
                 } catch (Exception ex) {
                     logger.error("MasterNodeListener capture data change and get data failed.", ex);

File: dolphinscheduler-alert/dolphinscheduler-alert-plugins/dolphinscheduler-alert-wechat/src/main/java/org/apache/dolphinscheduler/plugin/alert/wechat/WeChatType.java
Patch:
@@ -19,8 +19,8 @@
 package org.apache.dolphinscheduler.plugin.alert.wechat;
 
 public enum WeChatType {
-    APP(1, "应用"),
-    APPCHAT(2, "群聊"),
+    APP(1, "APP/应用"),
+    APPCHAT(2, "GROUP CHAT/群聊"),
     ;
 
     private final int code;

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/parser/ParamUtils.java
Patch:
@@ -61,7 +61,7 @@ public static Map<String, Property> convert(TaskExecutionContext taskExecutionCo
         Date scheduleTime = taskExecutionContext.getScheduleTime();
 
         // combining local and global parameters
-        Map<String, Property> localParams = parameters.getLocalParametersMap();
+        Map<String, Property> localParams = parameters.getInputLocalParametersMap();
 
         //stream pass params
         Map<String, Property> varParams = parameters.getVarPoolMap();

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/parameters/resource/AbstractResourceParameters.java
Patch:
@@ -21,11 +21,12 @@
 import com.fasterxml.jackson.annotation.JsonSubTypes.Type;
 import com.fasterxml.jackson.annotation.JsonTypeInfo;
 
-@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = "type")
+@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, visible = true, property = "resourceType")
 @JsonSubTypes({
         @Type(value = DataSourceParameters.class, name = "DATASOURCE"),
         @Type(value = UdfFuncParameters.class, name = "UDF")
 })
 public abstract class AbstractResourceParameters {
 
+
 }

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/AlertStatus.java
Patch:
@@ -20,7 +20,7 @@
 import com.baomidou.mybatisplus.annotation.EnumValue;
 
 /**
- * alert status
+ * alert sending(execution) status
  */
 public enum AlertStatus {
     /**

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/WarningType.java
Patch:
@@ -26,14 +26,14 @@
 import com.google.common.base.Functions;
 
 /**
- * types for whether to send warning when process ending;
+ * types for whether to send warning when process ends;
  */
 public enum WarningType {
     /**
      * 0 do not send warning;
      * 1 send if process success;
      * 2 send if process failed;
-     * 3 send if process ending;
+     * 3 send if process ends, whatever the result;
      */
     NONE(0, "none"),
     SUCCESS(1, "success"),

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/Constants.java
Patch:
@@ -327,6 +327,7 @@ private Constants() {
     public static final String NULL = "NULL";
     public static final String THREAD_NAME_MASTER_SERVER = "Master-Server";
     public static final String THREAD_NAME_WORKER_SERVER = "Worker-Server";
+    public static final String THREAD_NAME_ALERT_SERVER = "Alert-Server";
 
     /**
      * command parameter keys

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ExecutorServiceImpl.java
Patch:
@@ -619,7 +619,7 @@ private int createCommand(CommandType commandType, long processDefineCode,
      * @param runMode
      * @return
      */
-    private int createComplementCommandList(Date start, Date end, RunMode runMode, Command command,
+    protected int createComplementCommandList(Date start, Date end, RunMode runMode, Command command,
                                             Integer expectedParallelismNumber, ComplementDependentMode complementDependentMode) {
         int createCount = 0;
         int dependentProcessDefinitionCreateCount = 0;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProcessInstanceServiceImpl.java
Patch:
@@ -214,7 +214,6 @@ public Map<String, Object> queryProcessInstanceById(User loginUser, long project
         if (processDefinition == null || projectCode != processDefinition.getProjectCode()) {
             putMsg(result, Status.PROCESS_DEFINE_NOT_EXIST, processId);
         } else {
-            processInstance.setWarningGroupId(processDefinition.getWarningGroupId());
             processInstance.setLocations(processDefinition.getLocations());
             processInstance.setDagData(processService.genDagData(processDefinition));
             result.put(DATA_LIST, processInstance);

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/ExecutorControllerTest.java
Patch:
@@ -202,9 +202,10 @@ public void testStartProcessInstanceWithRequiredParams() throws Exception {
         paramsMap.add("processDefinitionCode", String.valueOf(processDefinitionCode));
         paramsMap.add("failureStrategy", String.valueOf(failureStrategy));
         paramsMap.add("warningType", String.valueOf(warningType));
+        paramsMap.add("scheduleTime", scheduleTime);
 
         when(executorService.execProcessInstance(any(User.class), eq(projectCode), eq(processDefinitionCode),
-				eq(null), eq(null), eq(failureStrategy), eq(null), eq(null), eq(warningType),
+				eq(scheduleTime), eq(null), eq(failureStrategy), eq(null), eq(null), eq(warningType),
                 eq(0), eq(null), eq(null), eq("default"), eq(-1L),
                 eq(Constants.MAX_TASK_TIMEOUT), eq(null), eq(null), eq(0),
                 eq(complementDependentMode))).thenReturn(executeServiceResult);

File: dolphinscheduler-alert/dolphinscheduler-alert-api/src/main/java/org/apache/dolphinscheduler/alert/api/ShowType.java
Patch:
@@ -25,11 +25,13 @@ public enum ShowType {
      * 1 TEXT;
      * 2 attachment;
      * 3 TABLE+attachment;
+     * 4 MARKDOWN;
      */
     TABLE(0, "table"),
     TEXT(1, "text"),
     ATTACHMENT(2, "attachment"),
-    TABLE_ATTACHMENT(3, "table attachment");
+    TABLE_ATTACHMENT(3, "table attachment"),
+    MARKDOWN(4, "markdown"),;
 
     private final int code;
     private final String descp;

File: dolphinscheduler-alert/dolphinscheduler-alert-plugins/dolphinscheduler-alert-wechat/src/main/java/org/apache/dolphinscheduler/plugin/alert/wechat/WeChatAlertParamsConstants.java
Patch:
@@ -24,9 +24,8 @@ public final class WeChatAlertParamsConstants {
     static final String NAME_ENTERPRISE_WE_CHAT_SECRET = "secret";
     static final String ENTERPRISE_WE_CHAT_TEAM_SEND_MSG = "$t('teamSendMsg')";
     static final String NAME_ENTERPRISE_WE_CHAT_TEAM_SEND_MSG = "teamSendMsg";
-    static final String ENTERPRISE_WE_CHAT_AGENT_ID = "$t('agentId')";
-    static final String NAME_ENTERPRISE_WE_CHAT_AGENT_ID = "agentId";
-    static final String NAME_ENTERPRISE_WE_CHAT_CHAT_ID = "chatId";
+    static final String ENTERPRISE_WE_CHAT_AGENT_ID = "$t('agentId/chatId')";
+    static final String NAME_ENTERPRISE_WE_CHAT_AGENT_ID = "agentId/chatId";
     static final String ENTERPRISE_WE_CHAT_USERS = "$t('users')";
     static final String NAME_ENTERPRISE_WE_CHAT_USERS = "users";
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/TaskDefinitionServiceImpl.java
Patch:
@@ -695,7 +695,6 @@ public Result queryTaskDefinitionListPaging(User loginUser,
                 });
             }
             taskMainInfoIPage.setRecords(Lists.newArrayList(taskMainInfoMap.values()));
-            taskMainInfoIPage.setTotal(taskMainInfoMap.values().size());
         }
         PageInfo<TaskMainInfo> pageInfo = new PageInfo<>(pageNo, pageSize);
         pageInfo.setTotal((int) taskMainInfoIPage.getTotal());

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/processor/queue/TaskExecuteThreadPool.java
Patch:
@@ -110,8 +110,8 @@ public void executeEvent(TaskExecuteThread taskExecuteThread) {
             return;
         }
         ListenableFuture future = this.submitListenable(() -> {
-            taskExecuteThread.run();
             multiThreadFilterMap.put(taskExecuteThread.getKey(), taskExecuteThread);
+            taskExecuteThread.run();
         });
         future.addCallback(new ListenableFutureCallback() {
             @Override

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/WorkflowExecuteThreadPool.java
Patch:
@@ -109,8 +109,8 @@ public void executeEvent(WorkflowExecuteThread workflowExecuteThread) {
         }
         int processInstanceId = workflowExecuteThread.getProcessInstance().getId();
         ListenableFuture future = this.submitListenable(() -> {
-            workflowExecuteThread.handleEvents();
             multiThreadFilterMap.put(workflowExecuteThread.getKey(), workflowExecuteThread);
+            workflowExecuteThread.handleEvents();
         });
         future.addCallback(new ListenableFutureCallback() {
             @Override

File: dolphinscheduler-master/src/test/java/org/apache/dolphinscheduler/server/master/processor/queue/TaskResponseServiceTest.java
Patch:
@@ -67,6 +67,9 @@ public class TaskResponseServiceTest {
     @Mock
     private WorkflowExecuteThreadPool workflowExecuteThreadPool;
 
+    @Mock
+    private TaskExecuteThreadPool taskExecuteThreadPool;
+
     @Before
     public void before() {
         taskEventService.start();
@@ -101,8 +104,6 @@ public void before() {
 
     @Test
     public void testAddResponse() {
-        Mockito.when(processService.findTaskInstanceById(Mockito.any())).thenReturn(taskInstance);
-        Mockito.when(channel.writeAndFlush(Mockito.any())).thenReturn(null);
         taskEventService.addEvent(ackEvent);
         taskEventService.addEvent(resultEvent);
     }

File: dolphinscheduler-alert/dolphinscheduler-alert-plugins/dolphinscheduler-alert-wechat/src/main/java/org/apache/dolphinscheduler/plugin/alert/wechat/WeChatAlertParamsConstants.java
Patch:
@@ -24,10 +24,9 @@ public final class WeChatAlertParamsConstants {
     static final String NAME_ENTERPRISE_WE_CHAT_SECRET = "secret";
     static final String ENTERPRISE_WE_CHAT_TEAM_SEND_MSG = "$t('teamSendMsg')";
     static final String NAME_ENTERPRISE_WE_CHAT_TEAM_SEND_MSG = "teamSendMsg";
-    static final String ENTERPRISE_WE_CHAT_USER_SEND_MSG = "$t('userSendMsg')";
-    static final String NAME_ENTERPRISE_WE_CHAT_USER_SEND_MSG = "userSendMsg";
     static final String ENTERPRISE_WE_CHAT_AGENT_ID = "$t('agentId')";
     static final String NAME_ENTERPRISE_WE_CHAT_AGENT_ID = "agentId";
+    static final String NAME_ENTERPRISE_WE_CHAT_CHAT_ID = "chatId";
     static final String ENTERPRISE_WE_CHAT_USERS = "$t('users')";
     static final String NAME_ENTERPRISE_WE_CHAT_USERS = "users";
 

File: dolphinscheduler-alert/dolphinscheduler-alert-plugins/dolphinscheduler-alert-wechat/src/test/java/org/apache/dolphinscheduler/plugin/alert/wechat/WeChatAlertChannelFactoryTest.java
Patch:
@@ -36,7 +36,7 @@ public void testGetParams() {
         WeChatAlertChannelFactory weChatAlertChannelFactory = new WeChatAlertChannelFactory();
         List<PluginParams> params = weChatAlertChannelFactory.params();
         JSONUtils.toJsonString(params);
-        Assert.assertEquals(7, params.size());
+        Assert.assertEquals(6, params.size());
     }
 
     @Test

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessService.java
Patch:
@@ -1307,7 +1307,7 @@ public void createSubWorkProcess(ProcessInstance parentProcessInstance, TaskInst
     /**
      * complement data needs transform parent parameter to child.
      */
-    private String getSubWorkFlowParam(ProcessInstanceMap instanceMap, ProcessInstance parentProcessInstance, Map<String, String> fatherParams) {
+    protected String getSubWorkFlowParam(ProcessInstanceMap instanceMap, ProcessInstance parentProcessInstance, Map<String, String> fatherParams) {
         // set sub work process command
         String processMapStr = JSONUtils.toJsonString(instanceMap);
         Map<String, String> cmdParam = JSONUtils.toMap(processMapStr);

File: dolphinscheduler-e2e/dolphinscheduler-e2e-case/src/test/java/org/apache/dolphinscheduler/e2e/cases/FileManageE2ETest.java
Patch:
@@ -101,7 +101,7 @@ public static void setup() {
         new WebDriverWait(userPage.driver(), 20).until(ExpectedConditions.visibilityOfElementLocated(
                 new By.ByClassName("name")));
 
-        userPage.update(user, user, password, email, phone, tenant)
+        userPage.update(user, user, email, phone, tenant)
             .goToNav(ResourcePage.class)
             .goToTab(FileManagePage.class);
     }

File: dolphinscheduler-e2e/dolphinscheduler-e2e-case/src/test/java/org/apache/dolphinscheduler/e2e/cases/FunctionManageE2ETest.java
Patch:
@@ -102,7 +102,7 @@ public static void setup() {
         new WebDriverWait(userPage.driver(), 20).until(ExpectedConditions.visibilityOfElementLocated(
                 new By.ByClassName("name")));
 
-        UdfManagePage udfManagePage = userPage.update(user, user, password, email, phone, tenant)
+        UdfManagePage udfManagePage = userPage.update(user, user, email, phone, tenant)
                 .goToNav(ResourcePage.class)
                 .goToTab(UdfManagePage.class)
                 .uploadFile(testUploadUdfFilePath.toFile().getAbsolutePath());

File: dolphinscheduler-e2e/dolphinscheduler-e2e-case/src/test/java/org/apache/dolphinscheduler/e2e/cases/UdfManageE2ETest.java
Patch:
@@ -97,7 +97,7 @@ public static void setup() {
         new WebDriverWait(userPage.driver(), 20).until(ExpectedConditions.visibilityOfElementLocated(
                 new By.ByClassName("name")));
 
-        userPage.update(user, user, password, email, phone, tenant)
+        userPage.update(user, user, email, phone, tenant)
             .goToNav(ResourcePage.class)
             .goToTab(UdfManagePage.class);
     }

File: dolphinscheduler-e2e/dolphinscheduler-e2e-case/src/test/java/org/apache/dolphinscheduler/e2e/cases/UserE2ETest.java
Patch:
@@ -122,7 +122,7 @@ void testEditUser() {
 
         browser.navigate().refresh();
 
-        page.update(user, editUser, editPassword, editEmail, editPhone, tenant);
+        page.update(user, editUser, editEmail, editPhone, tenant);
 
         await().untilAsserted(() -> {
             browser.navigate().refresh();

File: dolphinscheduler-e2e/dolphinscheduler-e2e-case/src/test/java/org/apache/dolphinscheduler/e2e/cases/WorkflowE2ETest.java
Patch:
@@ -74,7 +74,7 @@ public static void setup() {
         new WebDriverWait(userPage.driver(), 20).until(ExpectedConditions.visibilityOfElementLocated(
                 new By.ByClassName("name")));
 
-        userPage.update(user, user, password, email, phone, tenant)
+        userPage.update(user, user, email, phone, tenant)
                 .goToNav(ProjectPage.class)
                 .create(project)
         ;

File: dolphinscheduler-e2e/dolphinscheduler-e2e-case/src/test/java/org/apache/dolphinscheduler/e2e/pages/security/UserPage.java
Patch:
@@ -83,7 +83,7 @@ public UserPage create(String user, String password, String email, String phone,
         return this;
     }
 
-    public UserPage update(String user, String editUser, String editPassword, String editEmail, String editPhone,
+    public UserPage update(String user, String editUser, String editEmail, String editPhone,
                            String tenant) {
         userList().stream()
             .filter(it -> it.findElement(By.className("name")).getAttribute("innerHTML").contains(user))
@@ -97,8 +97,6 @@ public UserPage update(String user, String editUser, String editPassword, String
         editUserForm().inputUserName().sendKeys(Keys.BACK_SPACE);
         editUserForm().inputUserName().sendKeys(editUser);
 
-        editUserForm().inputUserPassword().sendKeys(editPassword);
-
         createUserForm().btnSelectTenantDropdown().click();
 
         new WebDriverWait(driver, 5).until(ExpectedConditions.visibilityOfElementLocated(new By.ByClassName(

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/LoggerServiceTest.java
Patch:
@@ -92,7 +92,7 @@ public void testQueryDataSourceList() {
             Assert.assertTrue(true);
             logger.error("testQueryDataSourceList error {}", e.getMessage());
         }
-        Assert.assertEquals(Status.TASK_INSTANCE_NOT_FOUND.getCode(), result.getCode().intValue());
+        Assert.assertEquals(Status.TASK_INSTANCE_HOST_IS_NULL.getCode(), result.getCode().intValue());
 
         //SUCCESS
         taskInstance.setHost("127.0.0.1:8080");

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/registry/ServerNodeManager.java
Patch:
@@ -300,6 +300,7 @@ public void notify(Event event) {
 
     private void updateMasterNodes() {
         MASTER_SLOT = 0;
+        MASTER_SIZE = 0;
         this.masterNodes.clear();
         String nodeLock = Constants.REGISTRY_DOLPHINSCHEDULER_LOCK_MASTERS;
         try {

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/task/BaseTaskProcessor.java
Patch:
@@ -317,6 +317,9 @@ private void setTaskDataSourceResourceInfo(Map<Integer, AbstractResourceParamete
 
         map.forEach((code, parameters) -> {
             DataSource datasource = processService.findDataSourceById(code);
+            if (Objects.isNull(datasource)) {
+                return;
+            }
             DataSourceParameters dataSourceParameters = new DataSourceParameters();
             dataSourceParameters.setType(datasource.getType());
             dataSourceParameters.setConnectionParams(datasource.getConnectionParams());

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/DataSourceServiceImpl.java
Patch:
@@ -147,7 +147,7 @@ public Result<Object> updateDataSource(int id, User loginUser, BaseDataSourcePar
             return result;
         }
 
-        if (!hasPerm(loginUser, dataSource.getUserId())) {
+        if (!canOperator(loginUser, dataSource.getUserId())) {
             putMsg(result, Status.USER_NO_OPERATION_PERM);
             return result;
         }
@@ -378,7 +378,7 @@ public Result<Object> delete(User loginUser, int datasourceId) {
                 putMsg(result, Status.RESOURCE_NOT_EXIST);
                 return result;
             }
-            if (!hasPerm(loginUser, dataSource.getUserId())) {
+            if (!canOperator(loginUser, dataSource.getUserId())) {
                 putMsg(result, Status.USER_NO_OPERATION_PERM);
                 return result;
             }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/utils/RegexUtils.java
Patch:
@@ -17,6 +17,8 @@
 
 package org.apache.dolphinscheduler.api.utils;
 
+import org.apache.commons.lang3.StringUtils;
+
 import java.util.regex.Pattern;
 
 /**
@@ -41,7 +43,7 @@ public static boolean isValidLinuxUserName(String str) {
 
     public static String escapeNRT(String str) {
         // Logging should not be vulnerable to injection attacks: Replace pattern-breaking characters
-        if (str != null && !str.isEmpty()) {
+        if (!StringUtils.isEmpty(str)) {
             return str.replaceAll("[\n|\r|\t]", "_");
         }
         return null;

File: dolphinscheduler-common/src/test/java/org/apache/dolphinscheduler/common/utils/PropertyUtilsTest.java
Patch:
@@ -26,6 +26,6 @@ public class PropertyUtilsTest {
 
     @Test
     public void getString() {
-        assertNotNull(PropertyUtils.getString(Constants.FS_DEFAULTFS));
+        assertNotNull(PropertyUtils.getString(Constants.FS_DEFAULT_FS));
     }
 }
\ No newline at end of file

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/TaskConstants.java
Patch:
@@ -311,7 +311,7 @@ private TaskConstants() {
     /**
      * resource storage type
      */
-    public static final String RESOURCE_STORAGE_TYPE = "resource.storage.type";
+   // public static final String RESOURCE_STORAGE_TYPE = "resource.storage.type";
 
     /**
      * kerberos

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-hive/src/main/java/org/apache/dolphinscheduler/plugin/datasource/hive/HiveDataSourceClient.java
Patch:
@@ -158,7 +158,7 @@ public Connection getConnection() {
     public void close() {
         super.close();
 
-        logger.info("close HiveDataSourceClient.");
+        logger.info("close {}.", this.getClass().getSimpleName());
         kerberosRenewalService.shutdown();
         this.ugi = null;
 

File: dolphinscheduler-e2e/dolphinscheduler-e2e-case/src/test/java/org/apache/dolphinscheduler/e2e/pages/project/workflow/WorkflowDefinitionTab.java
Patch:
@@ -47,7 +47,6 @@ public final class WorkflowDefinitionTab extends NavBarPage implements ProjectDe
     @FindBys({
             @FindBy(className = "btn-delete-all"),
             @FindBy(className = "n-button__content"),
-            @FindBy(tagName = "span")
     })
     private WebElement buttonDeleteAll;
 

File: dolphinscheduler-task-plugin/dolphinscheduler-task-datax/src/main/java/org/apache/dolphinscheduler/plugin/task/datax/DataxTaskChannel.java
Patch:
@@ -44,6 +44,6 @@ public AbstractParameters parseParameters(ParametersNode parametersNode) {
 
     @Override
     public ResourceParametersHelper getResources(String parameters) {
-        return null;
+        return JSONUtils.parseObject(parameters, DataxParameters.class).getResources();
     }
 }

File: dolphinscheduler-task-plugin/dolphinscheduler-task-procedure/src/main/java/org/apache/dolphinscheduler/plugin/task/procedure/ProcedureTaskChannel.java
Patch:
@@ -44,6 +44,6 @@ public AbstractParameters parseParameters(ParametersNode parametersNode) {
 
     @Override
     public ResourceParametersHelper getResources(String parameters) {
-        return null;
+        return JSONUtils.parseObject(parameters, ProcedureParameters.class).getResources();
     }
 }

File: dolphinscheduler-task-plugin/dolphinscheduler-task-sqoop/src/main/java/org/apache/dolphinscheduler/plugin/task/sqoop/SqoopTaskChannel.java
Patch:
@@ -45,6 +45,6 @@ public AbstractParameters parseParameters(ParametersNode parametersNode) {
 
     @Override
     public ResourceParametersHelper getResources(String parameters) {
-        return null;
+        return JSONUtils.parseObject(parameters, SqoopParameters.class).getResources();
     }
 }

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/consumer/TaskPriorityQueueConsumer.java
Patch:
@@ -168,7 +168,7 @@ protected boolean dispatchTask(TaskPriority taskPriority) {
             }
 
             result = dispatcher.dispatch(executionContext);
-        } catch (ExecuteException e) {
+        } catch (RuntimeException | ExecuteException e) {
             logger.error("dispatch error: {}", e.getMessage(), e);
         }
         return result;

File: dolphinscheduler-e2e/dolphinscheduler-e2e-case/src/test/java/org/apache/dolphinscheduler/e2e/pages/project/workflow/task/SubWorkflowTaskForm.java
Patch:
@@ -53,6 +53,8 @@ public SubWorkflowTaskForm(WorkflowForm parent) {
     }
 
     public SubWorkflowTaskForm childNode(String node) {
+        new WebDriverWait(driver, 5).until(ExpectedConditions.elementToBeClickable(btnSelectChildNodeDropdown));
+        
         btnSelectChildNodeDropdown().click();
 
         new WebDriverWait(driver, 5).until(ExpectedConditions.visibilityOfElementLocated(By.className(

File: dolphinscheduler-e2e/dolphinscheduler-e2e-case/src/test/java/org/apache/dolphinscheduler/e2e/pages/resource/ResourcePage.java
Patch:
@@ -47,19 +47,21 @@ public ResourcePage(RemoteWebDriver driver) {
 
     public <T extends ResourcePage.Tab> T goToTab(Class<T> tab) {
         if (tab == FileManagePage.class) {
-            new WebDriverWait(driver, 10).until(ExpectedConditions.urlContains("/file-manage"));
+            new WebDriverWait(driver, 10).until(ExpectedConditions.urlContains("/resource"));
             new WebDriverWait(driver, 10).until(ExpectedConditions.elementToBeClickable(fileManageTab));
             ((JavascriptExecutor) driver).executeScript("arguments[0].click();", fileManageTab());
             return tab.cast(new FileManagePage(driver));
         }
 
         if (tab == UdfManagePage.class) {
+            new WebDriverWait(driver, 10).until(ExpectedConditions.urlContains("/resource"));
             new WebDriverWait(driver, 10).until(ExpectedConditions.elementToBeClickable(udfManageTab));
             ((JavascriptExecutor) driver).executeScript("arguments[0].click();", udfManageTab());
             return tab.cast(new UdfManagePage(driver));
         }
 
         if (tab == FunctionManagePage.class) {
+            new WebDriverWait(driver, 10).until(ExpectedConditions.urlContains("/resource"));
             new WebDriverWait(driver, 10).until(ExpectedConditions.elementToBeClickable(functionManageTab));
             ((JavascriptExecutor) driver).executeScript("arguments[0].click();", functionManageTab());
             return tab.cast(new FunctionManagePage(driver));

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/AccessTokenController.java
Patch:
@@ -17,10 +17,10 @@
 
 package org.apache.dolphinscheduler.api.controller;
 
-import static org.apache.dolphinscheduler.api.enums.Status.QUERY_ACCESSTOKEN_BY_USER_ERROR;
 import static org.apache.dolphinscheduler.api.enums.Status.CREATE_ACCESS_TOKEN_ERROR;
 import static org.apache.dolphinscheduler.api.enums.Status.DELETE_ACCESS_TOKEN_ERROR;
 import static org.apache.dolphinscheduler.api.enums.Status.GENERATE_TOKEN_ERROR;
+import static org.apache.dolphinscheduler.api.enums.Status.QUERY_ACCESSTOKEN_BY_USER_ERROR;
 import static org.apache.dolphinscheduler.api.enums.Status.QUERY_ACCESSTOKEN_LIST_PAGING_ERROR;
 import static org.apache.dolphinscheduler.api.enums.Status.UPDATE_ACCESS_TOKEN_ERROR;
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProcessInstanceController.java
Patch:
@@ -34,11 +34,10 @@
 import org.apache.dolphinscheduler.api.service.ProcessInstanceService;
 import org.apache.dolphinscheduler.api.utils.Result;
 import org.apache.dolphinscheduler.common.Constants;
-import org.apache.dolphinscheduler.common.enums.ExecutionStatus;
-import org.apache.dolphinscheduler.common.enums.Flag;
 import org.apache.dolphinscheduler.common.utils.ParameterUtils;
 import org.apache.dolphinscheduler.dao.entity.ProcessInstance;
 import org.apache.dolphinscheduler.dao.entity.User;
+import org.apache.dolphinscheduler.plugin.task.api.enums.ExecutionStatus;
 
 import org.apache.commons.lang.StringUtils;
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProcessTaskRelationController.java
Patch:
@@ -21,7 +21,6 @@
 import static org.apache.dolphinscheduler.api.enums.Status.DATA_IS_NOT_VALID;
 import static org.apache.dolphinscheduler.api.enums.Status.DELETE_EDGE_ERROR;
 import static org.apache.dolphinscheduler.api.enums.Status.DELETE_TASK_PROCESS_RELATION_ERROR;
-import static org.apache.dolphinscheduler.api.enums.Status.MOVE_PROCESS_TASK_RELATION_ERROR;
 import static org.apache.dolphinscheduler.api.enums.Status.QUERY_TASK_PROCESS_RELATION_ERROR;
 
 import org.apache.dolphinscheduler.api.aspect.AccessLogAnnotation;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProjectController.java
Patch:
@@ -17,12 +17,12 @@
 
 package org.apache.dolphinscheduler.api.controller;
 
-import static org.apache.dolphinscheduler.api.enums.Status.QUERY_AUTHORIZED_USER;
 import static org.apache.dolphinscheduler.api.enums.Status.CREATE_PROJECT_ERROR;
 import static org.apache.dolphinscheduler.api.enums.Status.DELETE_PROJECT_ERROR;
 import static org.apache.dolphinscheduler.api.enums.Status.LOGIN_USER_QUERY_PROJECT_LIST_PAGING_ERROR;
 import static org.apache.dolphinscheduler.api.enums.Status.QUERY_AUTHORIZED_AND_USER_CREATED_PROJECT_ERROR;
 import static org.apache.dolphinscheduler.api.enums.Status.QUERY_AUTHORIZED_PROJECT;
+import static org.apache.dolphinscheduler.api.enums.Status.QUERY_AUTHORIZED_USER;
 import static org.apache.dolphinscheduler.api.enums.Status.QUERY_PROJECT_DETAILS_BY_CODE_ERROR;
 import static org.apache.dolphinscheduler.api.enums.Status.QUERY_UNAUTHORIZED_PROJECT_ERROR;
 import static org.apache.dolphinscheduler.api.enums.Status.UPDATE_PROJECT_ERROR;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/TaskInstanceController.java
Patch:
@@ -25,9 +25,9 @@
 import org.apache.dolphinscheduler.api.service.TaskInstanceService;
 import org.apache.dolphinscheduler.api.utils.Result;
 import org.apache.dolphinscheduler.common.Constants;
-import org.apache.dolphinscheduler.common.enums.ExecutionStatus;
 import org.apache.dolphinscheduler.common.utils.ParameterUtils;
 import org.apache.dolphinscheduler.dao.entity.User;
+import org.apache.dolphinscheduler.plugin.task.api.enums.ExecutionStatus;
 
 import java.util.Map;
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/UiPluginController.java
Patch:
@@ -33,7 +33,6 @@
 import org.springframework.http.HttpStatus;
 import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.PathVariable;
-import org.springframework.web.bind.annotation.PostMapping;
 import org.springframework.web.bind.annotation.RequestAttribute;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RequestParam;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/UsersController.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.dolphinscheduler.api.controller;
 
-import static org.apache.dolphinscheduler.api.enums.Status.REVOKE_PROJECT_ERROR;
 import static org.apache.dolphinscheduler.api.enums.Status.AUTHORIZED_USER_ERROR;
 import static org.apache.dolphinscheduler.api.enums.Status.CREATE_USER_ERROR;
 import static org.apache.dolphinscheduler.api.enums.Status.DELETE_USER_BY_ID_ERROR;
@@ -27,6 +26,7 @@
 import static org.apache.dolphinscheduler.api.enums.Status.GRANT_RESOURCE_ERROR;
 import static org.apache.dolphinscheduler.api.enums.Status.GRANT_UDF_FUNCTION_ERROR;
 import static org.apache.dolphinscheduler.api.enums.Status.QUERY_USER_LIST_PAGING_ERROR;
+import static org.apache.dolphinscheduler.api.enums.Status.REVOKE_PROJECT_ERROR;
 import static org.apache.dolphinscheduler.api.enums.Status.UNAUTHORIZED_USER_ERROR;
 import static org.apache.dolphinscheduler.api.enums.Status.UPDATE_USER_ERROR;
 import static org.apache.dolphinscheduler.api.enums.Status.USER_LIST_ERROR;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/dto/CommandStateCount.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.api.dto;
 
 import org.apache.dolphinscheduler.common.enums.CommandType;
@@ -28,6 +29,7 @@ public class CommandStateCount {
     private CommandType commandState;
 
     public CommandStateCount(){}
+
     public CommandStateCount(int errorCount, int normalCount, CommandType commandState) {
         this.errorCount = errorCount;
         this.normalCount = normalCount;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/dto/DefineUserDto.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.api.dto;
 
 import org.apache.dolphinscheduler.dao.entity.DefinitionGroupByUser;
@@ -31,7 +32,7 @@ public class DefineUserDto {
 
     public DefineUserDto(List<DefinitionGroupByUser> defineGroupByUsers) {
 
-        for(DefinitionGroupByUser define : defineGroupByUsers){
+        for (DefinitionGroupByUser define : defineGroupByUsers) {
             count += define.getCount();
         }
         this.userList = defineGroupByUsers;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/dto/ScheduleParam.java
Patch:
@@ -19,7 +19,6 @@
 
 import java.util.Date;
 
-
 /**
  * schedule parameters
  */

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/dto/TaskCountDto.java
Patch:
@@ -14,10 +14,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.api.dto;
 
-import org.apache.dolphinscheduler.common.enums.ExecutionStatus;
 import org.apache.dolphinscheduler.dao.entity.ExecuteStatusCount;
+import org.apache.dolphinscheduler.plugin.task.api.enums.ExecutionStatus;
 
 import java.util.Arrays;
 import java.util.List;
@@ -39,7 +40,6 @@ public class TaskCountDto {
      */
     private List<TaskStateCount> taskCountDtos;
 
-
     public TaskCountDto(List<ExecuteStatusCount> taskInstanceStateCounts) {
         countTaskDtos(taskInstanceStateCounts);
     }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/dto/TaskStateCount.java
Patch:
@@ -14,9 +14,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.api.dto;
 
-import org.apache.dolphinscheduler.common.enums.ExecutionStatus;
+import org.apache.dolphinscheduler.plugin.task.api.enums.ExecutionStatus;
 
 /**
  * task state count
@@ -31,7 +32,6 @@ public TaskStateCount(ExecutionStatus taskStateType, int count) {
         this.count = count;
     }
 
-
     public int getCount() {
         return count;
     }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/dto/gantt/Task.java
Patch:
@@ -14,8 +14,8 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.api.dto.gantt;
 
+package org.apache.dolphinscheduler.api.dto.gantt;
 
 import java.util.Date;
 import java.util.LinkedList;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/dto/resources/Directory.java
Patch:
@@ -14,12 +14,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.api.dto.resources;
 
 /**
  * directory
  */
-public class Directory extends ResourceComponent{
+public class Directory extends ResourceComponent {
 
     @Override
     public boolean isDirctory() {

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/dto/resources/visitor/Visitor.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.api.dto.resources.visitor;
 
 import org.apache.dolphinscheduler.api.dto.resources.ResourceComponent;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/dto/treeview/Instance.java
Patch:
@@ -19,7 +19,6 @@
 
 import java.util.Date;
 
-
 /**
  * Instance
  */
@@ -97,7 +96,6 @@ public Instance(int id, String name, long code, String type, String state, Date
         this(id, name, code, type, state, startTime, endTime, host, duration, 0);
     }
 
-
     public int getId() {
         return id;
     }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/exceptions/ApiExceptionHandler.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.api.exceptions;
 
 import org.apache.dolphinscheduler.api.enums.Status;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/AlertGroupService.java
Patch:
@@ -42,6 +42,7 @@ public interface AlertGroupService {
      * @return one alert group
      */
     Map<String, Object> queryAlertGroupById(User loginUser, Integer id);
+
     /**
      * paging query alarm group list
      *

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProcessInstanceService.java
Patch:
@@ -19,10 +19,10 @@
 package org.apache.dolphinscheduler.api.service;
 
 import org.apache.dolphinscheduler.api.utils.Result;
-import org.apache.dolphinscheduler.common.enums.DependResult;
-import org.apache.dolphinscheduler.common.enums.ExecutionStatus;
 import org.apache.dolphinscheduler.dao.entity.ProcessInstance;
 import org.apache.dolphinscheduler.dao.entity.User;
+import org.apache.dolphinscheduler.plugin.task.api.enums.DependResult;
+import org.apache.dolphinscheduler.plugin.task.api.enums.ExecutionStatus;
 
 import java.io.IOException;
 import java.util.List;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/TaskDefinitionService.java
Patch:
@@ -19,7 +19,6 @@
 
 import org.apache.dolphinscheduler.api.utils.Result;
 import org.apache.dolphinscheduler.common.enums.ReleaseState;
-import org.apache.dolphinscheduler.common.enums.TaskType;
 import org.apache.dolphinscheduler.dao.entity.User;
 
 import java.util.Map;
@@ -178,7 +177,7 @@ Result queryTaskDefinitionListPaging(User loginUser,
                                          long projectCode,
                                          String searchWorkflowName,
                                          String searchTaskName,
-                                         TaskType taskType,
+                                         String taskType,
                                          Integer pageNo,
                                          Integer pageSize);
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/TaskInstanceService.java
Patch:
@@ -18,8 +18,8 @@
 package org.apache.dolphinscheduler.api.service;
 
 import org.apache.dolphinscheduler.api.utils.Result;
-import org.apache.dolphinscheduler.common.enums.ExecutionStatus;
 import org.apache.dolphinscheduler.dao.entity.User;
+import org.apache.dolphinscheduler.plugin.task.api.enums.ExecutionStatus;
 
 import java.util.Map;
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/WorkFlowLineageService.java
Patch:
@@ -18,7 +18,6 @@
 package org.apache.dolphinscheduler.api.service;
 
 import java.util.Map;
-import java.util.Set;
 
 /**
  * work flow lineage service

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/AccessTokenServiceImpl.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.dolphinscheduler.api.service.impl;
 
-import org.apache.commons.lang3.StringUtils;
 import org.apache.dolphinscheduler.api.enums.Status;
 import org.apache.dolphinscheduler.api.service.AccessTokenService;
 import org.apache.dolphinscheduler.api.utils.PageInfo;
@@ -30,6 +29,8 @@
 import org.apache.dolphinscheduler.dao.entity.User;
 import org.apache.dolphinscheduler.dao.mapper.AccessTokenMapper;
 
+import org.apache.commons.lang3.StringUtils;
+
 import java.util.Date;
 import java.util.HashMap;
 import java.util.List;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/DataAnalysisServiceImpl.java
Patch:
@@ -25,7 +25,6 @@
 import org.apache.dolphinscheduler.api.service.ProjectService;
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.CommandType;
-import org.apache.dolphinscheduler.common.enums.ExecutionStatus;
 import org.apache.dolphinscheduler.common.enums.UserType;
 import org.apache.dolphinscheduler.common.utils.DateUtils;
 import org.apache.dolphinscheduler.common.utils.TriFunction;
@@ -40,6 +39,7 @@
 import org.apache.dolphinscheduler.dao.mapper.ProcessInstanceMapper;
 import org.apache.dolphinscheduler.dao.mapper.ProjectMapper;
 import org.apache.dolphinscheduler.dao.mapper.TaskInstanceMapper;
+import org.apache.dolphinscheduler.plugin.task.api.enums.ExecutionStatus;
 import org.apache.dolphinscheduler.service.process.ProcessService;
 
 import org.apache.commons.lang.StringUtils;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/DqRuleServiceImpl.java
Patch:
@@ -40,6 +40,7 @@
 import org.apache.dolphinscheduler.dao.mapper.DqRuleInputEntryMapper;
 import org.apache.dolphinscheduler.dao.mapper.DqRuleMapper;
 import org.apache.dolphinscheduler.dao.utils.DqRuleUtils;
+import org.apache.dolphinscheduler.plugin.task.api.enums.dp.OptionSourceType;
 import org.apache.dolphinscheduler.spi.enums.DbType;
 import org.apache.dolphinscheduler.spi.params.base.FormType;
 import org.apache.dolphinscheduler.spi.params.base.ParamsOptions;
@@ -51,7 +52,6 @@
 import org.apache.dolphinscheduler.spi.params.input.InputParam;
 import org.apache.dolphinscheduler.spi.params.input.InputParamProps;
 import org.apache.dolphinscheduler.spi.params.select.SelectParam;
-import org.apache.dolphinscheduler.spi.task.dq.enums.OptionSourceType;
 import org.apache.dolphinscheduler.spi.utils.StringUtils;
 
 import org.apache.commons.collections4.CollectionUtils;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ExecutorServiceImpl.java
Patch:
@@ -24,7 +24,6 @@
 import static org.apache.dolphinscheduler.common.Constants.CMD_PARAM_START_PARAMS;
 import static org.apache.dolphinscheduler.common.Constants.MAX_TASK_TIMEOUT;
 
-import org.apache.commons.beanutils.BeanUtils;
 import org.apache.dolphinscheduler.api.enums.ExecuteType;
 import org.apache.dolphinscheduler.api.enums.Status;
 import org.apache.dolphinscheduler.api.service.ExecutorService;
@@ -34,7 +33,6 @@
 import org.apache.dolphinscheduler.common.enums.CommandType;
 import org.apache.dolphinscheduler.common.enums.ComplementDependentMode;
 import org.apache.dolphinscheduler.common.enums.CycleEnum;
-import org.apache.dolphinscheduler.common.enums.ExecutionStatus;
 import org.apache.dolphinscheduler.common.enums.FailureStrategy;
 import org.apache.dolphinscheduler.common.enums.Flag;
 import org.apache.dolphinscheduler.common.enums.Priority;
@@ -58,11 +56,13 @@
 import org.apache.dolphinscheduler.dao.mapper.ProcessDefinitionMapper;
 import org.apache.dolphinscheduler.dao.mapper.ProcessInstanceMapper;
 import org.apache.dolphinscheduler.dao.mapper.ProjectMapper;
+import org.apache.dolphinscheduler.plugin.task.api.enums.ExecutionStatus;
 import org.apache.dolphinscheduler.remote.command.StateEventChangeCommand;
 import org.apache.dolphinscheduler.remote.processor.StateEventCallbackService;
 import org.apache.dolphinscheduler.service.process.ProcessService;
 import org.apache.dolphinscheduler.service.quartz.cron.CronUtils;
 
+import org.apache.commons.beanutils.BeanUtils;
 import org.apache.commons.collections.CollectionUtils;
 import org.apache.commons.collections.MapUtils;
 import org.apache.commons.lang.StringUtils;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/TaskInstanceServiceImpl.java
Patch:
@@ -25,7 +25,6 @@
 import org.apache.dolphinscheduler.api.utils.PageInfo;
 import org.apache.dolphinscheduler.api.utils.Result;
 import org.apache.dolphinscheduler.common.Constants;
-import org.apache.dolphinscheduler.common.enums.ExecutionStatus;
 import org.apache.dolphinscheduler.common.utils.CollectionUtils;
 import org.apache.dolphinscheduler.common.utils.DateUtils;
 import org.apache.dolphinscheduler.dao.entity.Project;
@@ -35,6 +34,7 @@
 import org.apache.dolphinscheduler.dao.mapper.ProjectMapper;
 import org.apache.dolphinscheduler.dao.mapper.TaskDefinitionMapper;
 import org.apache.dolphinscheduler.dao.mapper.TaskInstanceMapper;
+import org.apache.dolphinscheduler.plugin.task.api.enums.ExecutionStatus;
 import org.apache.dolphinscheduler.service.process.ProcessService;
 
 import java.util.Date;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/WorkerGroupServiceImpl.java
Patch:
@@ -23,7 +23,6 @@
 import org.apache.dolphinscheduler.api.utils.Result;
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.NodeType;
-import org.apache.dolphinscheduler.common.utils.DateUtils;
 import org.apache.dolphinscheduler.dao.entity.ProcessInstance;
 import org.apache.dolphinscheduler.dao.entity.User;
 import org.apache.dolphinscheduler.dao.entity.WorkerGroup;

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/AbstractControllerTest.java
Patch:
@@ -23,7 +23,6 @@
 import org.apache.dolphinscheduler.api.service.SessionService;
 import org.apache.dolphinscheduler.api.service.UsersService;
 import org.apache.dolphinscheduler.common.Constants;
-import org.apache.dolphinscheduler.common.enums.ProfileType;
 import org.apache.dolphinscheduler.dao.DaoConfiguration;
 import org.apache.dolphinscheduler.dao.entity.User;
 
@@ -44,9 +43,7 @@
 import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.context.annotation.Configuration;
-import org.springframework.context.annotation.Profile;
 import org.springframework.test.annotation.DirtiesContext;
-import org.springframework.test.context.ActiveProfiles;
 import org.springframework.test.context.junit4.SpringRunner;
 import org.springframework.test.web.servlet.MockMvc;
 

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/AlertGroupControllerTest.java
Patch:
@@ -35,7 +35,6 @@
 
 import org.junit.After;
 import org.junit.Assert;
-import org.junit.Before;
 import org.junit.Test;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/DataQualityControllerTest.java
Patch:
@@ -28,7 +28,7 @@
 import org.apache.dolphinscheduler.common.enums.UserType;
 import org.apache.dolphinscheduler.dao.entity.DqRule;
 import org.apache.dolphinscheduler.dao.entity.User;
-import org.apache.dolphinscheduler.spi.task.dq.enums.RuleType;
+import org.apache.dolphinscheduler.plugin.task.api.enums.dp.RuleType;
 
 import java.text.MessageFormat;
 import java.util.ArrayList;

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/ProcessInstanceControllerTest.java
Patch:
@@ -28,8 +28,8 @@
 import org.apache.dolphinscheduler.api.service.ProcessInstanceService;
 import org.apache.dolphinscheduler.api.utils.Result;
 import org.apache.dolphinscheduler.common.Constants;
-import org.apache.dolphinscheduler.common.enums.ExecutionStatus;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
+import org.apache.dolphinscheduler.plugin.task.api.enums.ExecutionStatus;
 
 import java.util.HashMap;
 import java.util.Map;

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/TaskInstanceControllerTest.java
Patch:
@@ -31,10 +31,10 @@
 import org.apache.dolphinscheduler.api.utils.PageInfo;
 import org.apache.dolphinscheduler.api.utils.Result;
 import org.apache.dolphinscheduler.common.Constants;
-import org.apache.dolphinscheduler.common.enums.ExecutionStatus;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
 import org.apache.dolphinscheduler.dao.entity.User;
+import org.apache.dolphinscheduler.plugin.task.api.enums.ExecutionStatus;
 
 import java.util.HashMap;
 import java.util.Map;

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/enums/ExecuteTypeTest.java
Patch:
@@ -14,10 +14,12 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.api.enums;
 
+import static org.junit.Assert.assertEquals;
+
 import org.junit.Test;
-import static org.junit.Assert.*;
 
 public class ExecuteTypeTest {
 

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/DataAnalysisServiceTest.java
Patch:
@@ -27,7 +27,6 @@
 import org.apache.dolphinscheduler.api.service.impl.DataAnalysisServiceImpl;
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.CommandType;
-import org.apache.dolphinscheduler.common.enums.ExecutionStatus;
 import org.apache.dolphinscheduler.common.enums.UserType;
 import org.apache.dolphinscheduler.common.utils.DateUtils;
 import org.apache.dolphinscheduler.dao.entity.CommandCount;
@@ -41,6 +40,7 @@
 import org.apache.dolphinscheduler.dao.mapper.ProcessInstanceMapper;
 import org.apache.dolphinscheduler.dao.mapper.ProjectMapper;
 import org.apache.dolphinscheduler.dao.mapper.TaskInstanceMapper;
+import org.apache.dolphinscheduler.plugin.task.api.enums.ExecutionStatus;
 import org.apache.dolphinscheduler.service.process.ProcessService;
 
 import java.text.MessageFormat;

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/DqExecuteResultServiceTest.java
Patch:
@@ -30,7 +30,7 @@
 import org.apache.dolphinscheduler.dao.entity.DqExecuteResult;
 import org.apache.dolphinscheduler.dao.entity.User;
 import org.apache.dolphinscheduler.dao.mapper.DqExecuteResultMapper;
-import org.apache.dolphinscheduler.spi.task.dq.enums.DqTaskState;
+import org.apache.dolphinscheduler.plugin.task.api.enums.dp.DqTaskState;
 
 import java.util.ArrayList;
 import java.util.Date;

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/LoggerServiceTest.java
Patch:
@@ -187,7 +187,6 @@ public void testGetLogBytesInSpecifiedProject() {
         loggerService.getLogBytes(loginUser, projectCode, 1);
     }
 
-
     @After
     public void close() {
         this.loggerService.close();

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProcessTaskRelationServiceTest.java
Patch:
@@ -21,7 +21,6 @@
 import org.apache.dolphinscheduler.api.service.impl.ProcessTaskRelationServiceImpl;
 import org.apache.dolphinscheduler.api.service.impl.ProjectServiceImpl;
 import org.apache.dolphinscheduler.common.Constants;
-import org.apache.dolphinscheduler.common.enums.TaskType;
 import org.apache.dolphinscheduler.common.enums.UserType;
 import org.apache.dolphinscheduler.dao.entity.ProcessDefinition;
 import org.apache.dolphinscheduler.dao.entity.ProcessTaskRelation;
@@ -251,7 +250,7 @@ private TaskDefinition getTaskDefinition() {
         taskDefinition.setProjectCode(1L);
         taskDefinition.setCode(1L);
         taskDefinition.setVersion(1);
-        taskDefinition.setTaskType(TaskType.SHELL.getDesc());
+        taskDefinition.setTaskType("SHELL");
         return taskDefinition;
     }
 
@@ -476,7 +475,7 @@ public void testDeleteTaskProcessRelation() {
         Mockito.when(processDefinitionMapper.queryByCode(processDefinitionCode)).thenReturn(getProcessDefinition());
         Mockito.when(taskDefinitionMapper.queryByCode(taskCode)).thenReturn(getTaskDefinition());
         TaskDefinition taskDefinition = new TaskDefinition();
-        taskDefinition.setTaskType(TaskType.CONDITIONS.getDesc());
+        taskDefinition.setTaskType("CONDITIONS");
         Mockito.when(taskDefinitionMapper.queryByCode(taskCode)).thenReturn(taskDefinition);
         List<ProcessTaskRelation> processTaskRelationList = Lists.newArrayList();
         ProcessTaskRelation processTaskRelation = new ProcessTaskRelation();

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/TaskInstanceServiceTest.java
Patch:
@@ -27,7 +27,6 @@
 import org.apache.dolphinscheduler.api.service.impl.TaskInstanceServiceImpl;
 import org.apache.dolphinscheduler.api.utils.Result;
 import org.apache.dolphinscheduler.common.Constants;
-import org.apache.dolphinscheduler.common.enums.ExecutionStatus;
 import org.apache.dolphinscheduler.common.enums.UserType;
 import org.apache.dolphinscheduler.common.utils.DateUtils;
 import org.apache.dolphinscheduler.dao.entity.ProcessInstance;
@@ -38,6 +37,7 @@
 import org.apache.dolphinscheduler.dao.mapper.ProjectMapper;
 import org.apache.dolphinscheduler.dao.mapper.TaskDefinitionMapper;
 import org.apache.dolphinscheduler.dao.mapper.TaskInstanceMapper;
+import org.apache.dolphinscheduler.plugin.task.api.enums.ExecutionStatus;
 import org.apache.dolphinscheduler.service.process.ProcessService;
 
 import java.text.MessageFormat;

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/Constants.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.dolphinscheduler.common;
 
-import org.apache.dolphinscheduler.common.enums.ExecutionStatus;
+import org.apache.dolphinscheduler.plugin.task.api.enums.ExecutionStatus;
 
 import org.apache.commons.lang.StringUtils;
 import org.apache.commons.lang.SystemUtils;

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/StateEvent.java
Patch:
@@ -17,6 +17,8 @@
 
 package org.apache.dolphinscheduler.common.enums;
 
+import org.apache.dolphinscheduler.plugin.task.api.enums.ExecutionStatus;
+
 import io.netty.channel.Channel;
 
 /**

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/TaskStateType.java
Patch:
@@ -17,6 +17,8 @@
 
 package org.apache.dolphinscheduler.common.enums;
 
+import org.apache.dolphinscheduler.plugin.task.api.enums.ExecutionStatus;
+
 /**
  * type of task state
  */

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/model/Server.java
Patch:
@@ -19,7 +19,6 @@
 
 import java.util.Date;
 
-
 /**
  * server
  */

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/model/WorkerServerModel.java
Patch:
@@ -20,7 +20,6 @@
 import java.util.Date;
 import java.util.Set;
 
-
 /**
  * server
  */

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/shell/AbstractShell.java
Patch:
@@ -17,9 +17,6 @@
 
 package org.apache.dolphinscheduler.common.shell;
 
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 import java.io.BufferedReader;
 import java.io.File;
 import java.io.IOException;
@@ -31,6 +28,9 @@
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.atomic.AtomicBoolean;
 
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 /**
  * A base class for running a Unix command.
  * 

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/CollectionUtils.java
Patch:
@@ -23,7 +23,6 @@
 
 import java.util.ArrayList;
 import java.util.Collection;
-import java.util.HashSet;
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/HadoopUtils.java
Patch:
@@ -20,9 +20,9 @@
 import static org.apache.dolphinscheduler.common.Constants.RESOURCE_UPLOAD_PATH;
 
 import org.apache.dolphinscheduler.common.Constants;
-import org.apache.dolphinscheduler.common.enums.ExecutionStatus;
 import org.apache.dolphinscheduler.common.enums.ResUploadType;
 import org.apache.dolphinscheduler.common.exception.BaseException;
+import org.apache.dolphinscheduler.plugin.task.api.enums.ExecutionStatus;
 import org.apache.dolphinscheduler.spi.enums.ResourceType;
 
 import org.apache.commons.io.IOUtils;

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/JSONUtils.java
Patch:
@@ -28,7 +28,6 @@
 import org.apache.dolphinscheduler.spi.utils.StringUtils;
 
 import java.io.IOException;
-import java.text.DateFormat;
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
 import java.util.Collections;

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/LoggerUtils.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.dolphinscheduler.common.utils;
 
 import org.apache.dolphinscheduler.common.Constants;
-import org.apache.dolphinscheduler.spi.task.TaskConstants;
+import org.apache.dolphinscheduler.plugin.task.api.TaskConstants;
 
 import java.io.BufferedReader;
 import java.io.FileInputStream;

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/ParameterUtils.java
Patch:
@@ -19,10 +19,10 @@
 
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.CommandType;
-import org.apache.dolphinscheduler.common.process.Property;
 import org.apache.dolphinscheduler.common.utils.placeholder.BusinessTimeUtils;
 import org.apache.dolphinscheduler.common.utils.placeholder.PlaceholderUtils;
 import org.apache.dolphinscheduler.common.utils.placeholder.TimePlaceholderUtils;
+import org.apache.dolphinscheduler.plugin.task.api.model.Property;
 
 import org.apache.commons.lang.StringUtils;
 
@@ -31,6 +31,7 @@
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
+import java.util.Map.Entry;
 import java.util.Set;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
@@ -152,7 +153,7 @@ public static String handleEscapes(String inputString) {
      */
     public static Map<String, String> convert(Map<String, Property> paramsMap) {
         Map<String, String> map = new HashMap<>();
-        Iterator<Map.Entry<String, Property>> iter = paramsMap.entrySet().iterator();
+        Iterator<Entry<String, Property>> iter = paramsMap.entrySet().iterator();
         while (iter.hasNext()) {
             Map.Entry<String, Property> en = iter.next();
             map.put(en.getKey(), en.getValue().getValue());

File: dolphinscheduler-common/src/test/java/org/apache/dolphinscheduler/common/ConstantsTest.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.common;
 
 import org.apache.commons.lang.SystemUtils;

File: dolphinscheduler-common/src/test/java/org/apache/dolphinscheduler/common/utils/JSONUtilsTest.java
Patch:
@@ -17,10 +17,10 @@
 
 package org.apache.dolphinscheduler.common.utils;
 
-import org.apache.dolphinscheduler.common.enums.DataType;
-import org.apache.dolphinscheduler.common.enums.Direct;
 import org.apache.dolphinscheduler.common.model.TaskNode;
-import org.apache.dolphinscheduler.common.process.Property;
+import org.apache.dolphinscheduler.plugin.task.api.enums.DataType;
+import org.apache.dolphinscheduler.plugin.task.api.enums.Direct;
+import org.apache.dolphinscheduler.plugin.task.api.model.Property;
 
 import java.util.ArrayList;
 import java.util.Date;

File: dolphinscheduler-common/src/test/java/org/apache/dolphinscheduler/common/utils/KerberosHttpClientTest.java
Patch:
@@ -14,9 +14,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.common.utils;
 
 import org.apache.dolphinscheduler.common.Constants;
+
 import org.junit.Assert;
 import org.junit.Test;
 import org.slf4j.Logger;

File: dolphinscheduler-common/src/test/java/org/apache/dolphinscheduler/common/utils/NetUtilsTest.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.common.utils;
 
 import static org.junit.Assert.assertEquals;

File: dolphinscheduler-common/src/test/java/org/apache/dolphinscheduler/common/utils/ParameterUtilsTest.java
Patch:
@@ -21,10 +21,10 @@
 
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.CommandType;
-import org.apache.dolphinscheduler.common.enums.DataType;
-import org.apache.dolphinscheduler.common.enums.Direct;
-import org.apache.dolphinscheduler.common.process.Property;
 import org.apache.dolphinscheduler.common.utils.placeholder.PlaceholderUtils;
+import org.apache.dolphinscheduler.plugin.task.api.enums.DataType;
+import org.apache.dolphinscheduler.plugin.task.api.enums.Direct;
+import org.apache.dolphinscheduler.plugin.task.api.model.Property;
 
 import java.text.ParseException;
 import java.util.ArrayList;

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/MonitorDBDao.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.dao;
 
 import org.apache.dolphinscheduler.dao.entity.MonitorRecord;

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/datasource/SpringConnectionFactory.java
Patch:
@@ -73,7 +73,7 @@ public SqlSessionFactory sqlSessionFactory(DataSource dataSource) throws Excepti
         sqlSessionFactoryBean.setTypeAliasesPackage("org.apache.dolphinscheduler.dao.entity");
         ResourcePatternResolver resolver = new PathMatchingResourcePatternResolver();
         sqlSessionFactoryBean.setMapperLocations(resolver.getResources("org/apache/dolphinscheduler/dao/mapper/*Mapper.xml"));
-        sqlSessionFactoryBean.setTypeEnumsPackage("org.apache.dolphinscheduler.*.enums");
+        sqlSessionFactoryBean.setTypeEnumsPackage("org.apache.dolphinscheduler.**.enums");
         sqlSessionFactoryBean.setDatabaseIdProvider(databaseIdProvider());
         return sqlSessionFactoryBean.getObject();
     }

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/DefinitionGroupByUser.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.dao.entity;
 
 /**

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/DependentProcessDefinition.java
Patch:
@@ -19,10 +19,10 @@
 
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.CycleEnum;
-import org.apache.dolphinscheduler.common.model.DependentItem;
-import org.apache.dolphinscheduler.common.model.DependentTaskModel;
-import org.apache.dolphinscheduler.common.task.dependent.DependentParameters;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
+import org.apache.dolphinscheduler.plugin.task.api.model.DependentItem;
+import org.apache.dolphinscheduler.plugin.task.api.model.DependentTaskModel;
+import org.apache.dolphinscheduler.plugin.task.api.parameters.DependentParameters;
 
 import java.util.List;
 

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/DqRuleExecuteSql.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.dolphinscheduler.dao.entity;
 
-import org.apache.dolphinscheduler.spi.task.dq.enums.ExecuteSqlType;
+import org.apache.dolphinscheduler.plugin.task.api.enums.dp.ExecuteSqlType;
 
 import java.io.Serializable;
 import java.util.Date;

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/DqRuleInputEntry.java
Patch:
@@ -17,9 +17,9 @@
 
 package org.apache.dolphinscheduler.dao.entity;
 
-import org.apache.dolphinscheduler.spi.task.dq.enums.InputType;
-import org.apache.dolphinscheduler.spi.task.dq.enums.OptionSourceType;
-import org.apache.dolphinscheduler.spi.task.dq.enums.ValueType;
+import org.apache.dolphinscheduler.plugin.task.api.enums.dp.InputType;
+import org.apache.dolphinscheduler.plugin.task.api.enums.dp.OptionSourceType;
+import org.apache.dolphinscheduler.plugin.task.api.enums.dp.ValueType;
 
 import java.io.Serializable;
 import java.util.Date;

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/EnvironmentWorkerGroupRelation.java
Patch:
@@ -17,12 +17,12 @@
 
 package org.apache.dolphinscheduler.dao.entity;
 
+import java.util.Date;
+
 import com.baomidou.mybatisplus.annotation.IdType;
 import com.baomidou.mybatisplus.annotation.TableId;
 import com.baomidou.mybatisplus.annotation.TableName;
 
-import java.util.Date;
-
 /**
  * EnvironmentWorkerGroupRelation
  */

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/K8s.java
Patch:
@@ -56,7 +56,6 @@ public class K8s {
     @TableField("update_time")
     private Date updateTime;
 
-
     public K8s() {
 
     }

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/ProcessAlertContent.java
Patch:
@@ -20,8 +20,8 @@
 import org.apache.dolphinscheduler.common.enums.AlertEvent;
 import org.apache.dolphinscheduler.common.enums.AlertWarnLevel;
 import org.apache.dolphinscheduler.common.enums.CommandType;
-import org.apache.dolphinscheduler.common.enums.ExecutionStatus;
 import org.apache.dolphinscheduler.common.enums.Flag;
+import org.apache.dolphinscheduler.plugin.task.api.enums.ExecutionStatus;
 
 import java.io.Serializable;
 import java.util.Date;
@@ -148,6 +148,7 @@ public Builder projectId(Integer projectId) {
             this.projectId = projectId;
             return this;
         }
+
         public Builder projectCode(Long projectCode) {
             this.projectCode = projectCode;
             return this;
@@ -167,6 +168,7 @@ public Builder processId(Integer processId) {
             this.processId = processId;
             return this;
         }
+
         public Builder processDefinitionCode(Long processDefinitionCode) {
             this.processDefinitionCode = processDefinitionCode;
             return this;

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/ProcessData.java
Patch:
@@ -17,8 +17,8 @@
 package org.apache.dolphinscheduler.dao.entity;
 
 import org.apache.dolphinscheduler.common.model.TaskNode;
-import org.apache.dolphinscheduler.common.process.Property;
 import org.apache.dolphinscheduler.common.utils.CollectionUtils;
+import org.apache.dolphinscheduler.plugin.task.api.model.Property;
 
 import java.util.List;
 

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/ProcessDefinition.java
Patch:
@@ -20,8 +20,8 @@
 import org.apache.dolphinscheduler.common.enums.Flag;
 import org.apache.dolphinscheduler.common.enums.ProcessExecutionTypeEnum;
 import org.apache.dolphinscheduler.common.enums.ReleaseState;
-import org.apache.dolphinscheduler.common.process.Property;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
+import org.apache.dolphinscheduler.plugin.task.api.model.Property;
 
 import org.apache.commons.lang.StringUtils;
 

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/ProcessInstance.java
Patch:
@@ -18,13 +18,13 @@
 package org.apache.dolphinscheduler.dao.entity;
 
 import org.apache.dolphinscheduler.common.enums.CommandType;
-import org.apache.dolphinscheduler.common.enums.ExecutionStatus;
 import org.apache.dolphinscheduler.common.enums.FailureStrategy;
 import org.apache.dolphinscheduler.common.enums.Flag;
 import org.apache.dolphinscheduler.common.enums.Priority;
 import org.apache.dolphinscheduler.common.enums.TaskDependType;
 import org.apache.dolphinscheduler.common.enums.WarningType;
 import org.apache.dolphinscheduler.common.utils.DateUtils;
+import org.apache.dolphinscheduler.plugin.task.api.enums.ExecutionStatus;
 
 import org.apache.commons.lang.StringUtils;
 

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/Project.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.dao.entity;
 
 import java.util.Date;

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskAlertContent.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.dolphinscheduler.dao.entity;
 
-import org.apache.dolphinscheduler.common.enums.ExecutionStatus;
+import org.apache.dolphinscheduler.plugin.task.api.enums.ExecutionStatus;
 
 import java.io.Serializable;
 import java.util.Date;

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinition.java
Patch:
@@ -20,10 +20,10 @@
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.Flag;
 import org.apache.dolphinscheduler.common.enums.Priority;
-import org.apache.dolphinscheduler.common.enums.TaskTimeoutStrategy;
+import org.apache.dolphinscheduler.plugin.task.api.enums.TaskTimeoutStrategy;
 import org.apache.dolphinscheduler.common.enums.TimeoutFlag;
-import org.apache.dolphinscheduler.common.process.Property;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
+import org.apache.dolphinscheduler.plugin.task.api.model.Property;
 
 import org.apache.commons.lang.StringUtils;
 
@@ -475,6 +475,7 @@ public boolean equals(Object o) {
             && taskGroupId == that.taskGroupId
             && taskGroupPriority == that.taskGroupPriority;
     }
+
     @Override
     public String toString() {
         return "TaskDefinition{"

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskMainInfo.java
Patch:
@@ -22,7 +22,6 @@
 import java.util.Date;
 import java.util.Map;
 
-
 /**
  * task main info
  */

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskRecord.java
Patch:
@@ -14,8 +14,8 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.dao.entity;
 
+package org.apache.dolphinscheduler.dao.entity;
 
 import java.util.Date;
 
@@ -234,9 +234,9 @@ public void setErrorCode(String errorCode) {
     }
 
     @Override
-    public String toString(){
+    public String toString() {
         return "task record, id:" + id
-                +" proc id:" + procId
+                + " proc id:" + procId
                 + " proc name:" + procName
                 + " proc date: " + procDate
                 + " start date:" + startTime

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/User.java
Patch:
@@ -14,8 +14,8 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.dao.entity;
 
+package org.apache.dolphinscheduler.dao.entity;
 
 import org.apache.dolphinscheduler.common.enums.UserType;
 import com.baomidou.mybatisplus.annotation.IdType;

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkFlowLineage.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.dao.entity;
 
 import java.util.Date;

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkerServer.java
Patch:
@@ -14,8 +14,8 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.dao.entity;
 
+package org.apache.dolphinscheduler.dao.entity;
 
 import java.util.Date;
 

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/AccessTokenMapper.java
Patch:
@@ -21,12 +21,12 @@
 
 import org.apache.ibatis.annotations.Param;
 
+import java.util.List;
+
 import com.baomidou.mybatisplus.core.mapper.BaseMapper;
 import com.baomidou.mybatisplus.core.metadata.IPage;
 import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
 
-import java.util.List;
-
 /**
  * accesstoken mapper interface
  */

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/ProcessInstanceMapper.java
Patch:
@@ -17,9 +17,9 @@
 
 package org.apache.dolphinscheduler.dao.mapper;
 
-import org.apache.dolphinscheduler.common.enums.ExecutionStatus;
 import org.apache.dolphinscheduler.dao.entity.ExecuteStatusCount;
 import org.apache.dolphinscheduler.dao.entity.ProcessInstance;
+import org.apache.dolphinscheduler.plugin.task.api.enums.ExecutionStatus;
 
 import org.apache.ibatis.annotations.Param;
 

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/ProjectUserMapper.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.dao.mapper;
 
 import org.apache.dolphinscheduler.dao.entity.ProjectUser;

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/TaskGroupMapper.java
Patch:
@@ -17,13 +17,13 @@
 
 package org.apache.dolphinscheduler.dao.mapper;
 
-import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
 import org.apache.dolphinscheduler.dao.entity.TaskGroup;
 
 import org.apache.ibatis.annotations.Param;
 
 import com.baomidou.mybatisplus.core.mapper.BaseMapper;
 import com.baomidou.mybatisplus.core.metadata.IPage;
+import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
 
 /**
  * the Dao interfaces of task group

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/TaskGroupQueueMapper.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.dolphinscheduler.dao.mapper;
 
-import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
 import org.apache.dolphinscheduler.dao.entity.Project;
 import org.apache.dolphinscheduler.dao.entity.TaskGroupQueue;
 
@@ -27,6 +26,7 @@
 
 import com.baomidou.mybatisplus.core.mapper.BaseMapper;
 import com.baomidou.mybatisplus.core.metadata.IPage;
+import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
 
 /**
  * the Dao interfaces of task group queue

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/TaskInstanceMapper.java
Patch:
@@ -17,10 +17,10 @@
 
 package org.apache.dolphinscheduler.dao.mapper;
 
-import org.apache.dolphinscheduler.common.enums.ExecutionStatus;
 import org.apache.dolphinscheduler.common.enums.Flag;
 import org.apache.dolphinscheduler.dao.entity.ExecuteStatusCount;
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
+import org.apache.dolphinscheduler.plugin.task.api.enums.ExecutionStatus;
 
 import org.apache.ibatis.annotations.Param;
 

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/UdfFuncMapper.java
Patch:
@@ -41,7 +41,7 @@ public interface UdfFuncMapper extends BaseMapper<UdfFunc> {
      * @param funcNames funcNames
      * @return udf function list
      */
-    List<UdfFunc> queryUdfByIdStr(@Param("ids") int[] ids,
+    List<UdfFunc> queryUdfByIdStr(@Param("ids") Integer[] ids,
                                   @Param("funcNames") String funcNames);
 
     /**

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/utils/BaseDBPerformance.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.dao.utils;
 
 import org.apache.dolphinscheduler.dao.entity.MonitorRecord;
@@ -25,7 +26,6 @@
  */
 public abstract class BaseDBPerformance {
 
-
     /**
      * return the current database performance
      * @param conn connection

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/utils/BeanContext.java
Patch:
@@ -14,8 +14,8 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.dao.utils;
 
+package org.apache.dolphinscheduler.dao.utils;
 
 import org.springframework.beans.BeansException;
 import org.springframework.context.ApplicationContext;
@@ -26,10 +26,10 @@
  *  bean context
  */
 @Component
- public class BeanContext implements ApplicationContextAware {
+public class BeanContext implements ApplicationContextAware {
     private static ApplicationContext applicationContext;
 
-    public static ApplicationContext getApplicationContext(){
+    public static ApplicationContext getApplicationContext() {
         return applicationContext;
     }
 

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/utils/DagHelper.java
Patch:
@@ -22,12 +22,12 @@
 import org.apache.dolphinscheduler.common.model.TaskNode;
 import org.apache.dolphinscheduler.common.model.TaskNodeRelation;
 import org.apache.dolphinscheduler.common.process.ProcessDag;
-import org.apache.dolphinscheduler.common.task.conditions.ConditionsParameters;
-import org.apache.dolphinscheduler.common.task.switchtask.SwitchParameters;
-import org.apache.dolphinscheduler.common.task.switchtask.SwitchResultVo;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
 import org.apache.dolphinscheduler.dao.entity.ProcessTaskRelation;
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
+import org.apache.dolphinscheduler.plugin.task.api.model.SwitchResultVo;
+import org.apache.dolphinscheduler.plugin.task.api.parameters.ConditionsParameters;
+import org.apache.dolphinscheduler.plugin.task.api.parameters.SwitchParameters;
 
 import org.apache.commons.collections.CollectionUtils;
 

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/entity/ProcessDefinitionTest.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.dao.entity;
 
 import org.junit.Assert;
@@ -34,7 +35,5 @@ public void getGlobalParamMapTest() {
         taskInstance.getGlobalParamMap();
         Assert.assertEquals("{selenium_global_parameters_1=selenium_global_parameters_value_1}",taskInstance.getGlobalParamMap().toString());
 
-
-
     }
 }

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/AccessTokenMapperTest.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.dao.mapper;
 
 import static org.hamcrest.MatcherAssert.assertThat;
@@ -186,7 +187,6 @@ public void testDelete() throws Exception {
         assertNull(resultAccessToken);
     }
 
-
     /**
      * create accessTokens
      *

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/DataSourceMapperTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.dolphinscheduler.dao.mapper;
 
 import static java.util.stream.Collectors.toList;
+
 import static org.hamcrest.Matchers.greaterThan;
 import static org.hamcrest.Matchers.greaterThanOrEqualTo;
 import static org.junit.Assert.assertEquals;

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/DataSourceUserMapperTest.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.dao.mapper;
 
 import org.apache.dolphinscheduler.dao.BaseDaoTest;
@@ -52,7 +53,7 @@ private DatasourceUser insertOne() {
      * test update
      */
     @Test
-    public void testUpdate(){
+    public void testUpdate() {
         //insertOne
         DatasourceUser dataSourceUser = insertOne();
         //update
@@ -65,7 +66,7 @@ public void testUpdate(){
      * test delete
      */
     @Test
-    public void testDelete(){
+    public void testDelete() {
 
         DatasourceUser dataSourceUser = insertOne();
         int delete = dataSourceUserMapper.deleteById(dataSourceUser.getId());

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/ErrorCommandMapperTest.java
Patch:
@@ -14,8 +14,8 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.dao.mapper;
 
+package org.apache.dolphinscheduler.dao.mapper;
 
 import org.apache.dolphinscheduler.common.enums.CommandType;
 import org.apache.dolphinscheduler.dao.BaseDaoTest;
@@ -42,7 +42,7 @@ public class ErrorCommandMapperTest extends BaseDaoTest {
      * insert
      * @return ErrorCommand
      */
-    private ErrorCommand insertOne(){
+    private ErrorCommand insertOne() {
         //insertOne
         ErrorCommand errorCommand = new ErrorCommand();
         errorCommand.setId(10101);
@@ -76,7 +76,6 @@ public void testQuery() {
         errorCommand.setProcessDefinitionCode(processDefinition.getCode());
         errorCommandMapper.updateById(errorCommand);
 
-
         List<CommandCount> commandCounts = errorCommandMapper.countCommandState(
                 null,
                 null,

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/ProjectMapperTest.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.dao.mapper;
 
 import org.apache.dolphinscheduler.dao.BaseDaoTest;

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/ProjectUserMapperTest.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.dao.mapper;
 
 import static org.hamcrest.MatcherAssert.assertThat;
@@ -52,7 +53,7 @@ private ProjectUser insertOne() {
      * test update
      */
     @Test
-    public void testUpdate(){
+    public void testUpdate() {
         //insertOne
         ProjectUser projectUser = insertOne();
         projectUser.setCreateTime(new Date());
@@ -65,7 +66,7 @@ public void testUpdate(){
      * test delete
      */
     @Test
-    public void testDelete(){
+    public void testDelete() {
         ProjectUser projectUserMap = insertOne();
         int delete = projectUserMapper.deleteById(projectUserMap.getId());
         Assert.assertEquals(delete, 1);

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/TaskDefinitionLogMapperTest.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.dolphinscheduler.dao.mapper;
 
-import org.apache.dolphinscheduler.common.enums.TaskType;
 import org.apache.dolphinscheduler.dao.BaseDaoTest;
 import org.apache.dolphinscheduler.dao.entity.TaskDefinition;
 import org.apache.dolphinscheduler.dao.entity.TaskDefinitionLog;
@@ -44,7 +43,7 @@ public TaskDefinitionLog insertOne(int userId) {
         taskDefinition.setCode(888888L);
         taskDefinition.setName("unit-test");
         taskDefinition.setProjectCode(1L);
-        taskDefinition.setTaskType(TaskType.SHELL.getDesc());
+        taskDefinition.setTaskType("SHELL");
         taskDefinition.setUserId(userId);
         taskDefinition.setEnvironmentCode(1L);
         taskDefinition.setWorkerGroup("default");
@@ -83,7 +82,7 @@ public void testQueryByTaskDefinitions() {
         taskDefinition.setCode(888888L);
         taskDefinition.setName("unit-test");
         taskDefinition.setProjectCode(1L);
-        taskDefinition.setTaskType(TaskType.SHELL.getDesc());
+        taskDefinition.setTaskType("SHELL");
         taskDefinition.setUserId(1);
         taskDefinition.setResourceIds("1");
         taskDefinition.setVersion(1);

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/TaskDefinitionMapperTest.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.dolphinscheduler.dao.mapper;
 
-import org.apache.dolphinscheduler.common.enums.TaskType;
 import org.apache.dolphinscheduler.dao.BaseDaoTest;
 import org.apache.dolphinscheduler.dao.entity.DefinitionGroupByUser;
 import org.apache.dolphinscheduler.dao.entity.TaskDefinition;
@@ -48,7 +47,7 @@ public TaskDefinition insertOne(int userId) {
         taskDefinition.setCode(888888L);
         taskDefinition.setName("unit-test");
         taskDefinition.setProjectCode(1L);
-        taskDefinition.setTaskType(TaskType.SHELL.getDesc());
+        taskDefinition.setTaskType("SHELL");
         taskDefinition.setUserId(userId);
         taskDefinition.setResourceIds("1");
         taskDefinition.setWorkerGroup("default");

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/TaskGroupMapperTest.java
Patch:
@@ -24,7 +24,6 @@
 
 import org.junit.Assert;
 import org.junit.Test;
-import org.mockito.Mock;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/TaskGroupQueueMapperTest.java
Patch:
@@ -26,7 +26,6 @@
 
 import org.junit.Assert;
 import org.junit.Test;
-import org.mockito.Mock;
 import org.springframework.beans.factory.annotation.Autowired;
 
 public class TaskGroupQueueMapperTest extends BaseDaoTest {

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/UdfFuncMapperTest.java
Patch:
@@ -195,7 +195,7 @@ public void testQueryUdfByIdStr() {
         UdfFunc udfFunc = insertOne();
         //insertOne
         UdfFunc udfFunc1 = insertOne();
-        int[] idArray = new int[]{udfFunc.getId(), udfFunc1.getId()};
+        Integer[] idArray = new Integer[]{udfFunc.getId(), udfFunc1.getId()};
         //queryUdfByIdStr
         List<UdfFunc> udfFuncList = udfFuncMapper.queryUdfByIdStr(idArray, "");
         Assert.assertNotEquals(udfFuncList.size(), 0);

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/WorkFlowLineageMapperTest.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.dao.mapper;
 
 import org.apache.dolphinscheduler.common.enums.FailureStrategy;

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-api/src/main/java/org/apache/dolphinscheduler/plugin/datasource/api/utils/PasswordUtils.java
Patch:
@@ -17,9 +17,9 @@
 
 package org.apache.dolphinscheduler.plugin.datasource.api.utils;
 
-import static org.apache.dolphinscheduler.spi.task.TaskConstants.DATASOURCE_ENCRYPTION_ENABLE;
-import static org.apache.dolphinscheduler.spi.task.TaskConstants.DATASOURCE_ENCRYPTION_SALT;
-import static org.apache.dolphinscheduler.spi.task.TaskConstants.DATASOURCE_ENCRYPTION_SALT_DEFAULT;
+import static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.DATASOURCE_ENCRYPTION_ENABLE;
+import static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.DATASOURCE_ENCRYPTION_SALT;
+import static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.DATASOURCE_ENCRYPTION_SALT_DEFAULT;
 
 import org.apache.dolphinscheduler.spi.utils.PropertyUtils;
 import org.apache.dolphinscheduler.spi.utils.StringUtils;

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-api/src/test/java/org/apache/dolphinscheduler/plugin/datasource/api/utils/CommonUtilsTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.dolphinscheduler.plugin.datasource.api.utils;
 
-import static org.apache.dolphinscheduler.spi.task.TaskConstants.DATASOURCE_ENCRYPTION_ENABLE;
+import static org.apache.dolphinscheduler.spi.utils.Constants.DATASOURCE_ENCRYPTION_ENABLE;
 
 import org.apache.dolphinscheduler.spi.utils.Constants;
 import org.apache.dolphinscheduler.spi.utils.PropertyUtils;
@@ -97,7 +97,7 @@ public void decodePassword() {
         PowerMockito.mockStatic(PropertyUtils.class);
         PowerMockito.when(PropertyUtils.getBoolean(DATASOURCE_ENCRYPTION_ENABLE, false)).thenReturn(Boolean.TRUE);
 
-        PropertyUtils.setValue(Constants.DATASOURCE_ENCRYPTION_ENABLE, "true");
+        PropertyUtils.setValue(DATASOURCE_ENCRYPTION_ENABLE, "true");
 
         PowerMockito.mockStatic(PasswordUtils.class);
         PowerMockito.when(PasswordUtils.decodePassword("bnVsbE1USXpORFUy")).thenReturn("123456");

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-hive/src/main/java/org/apache/dolphinscheduler/plugin/datasource/hive/HiveDataSourceClient.java
Patch:
@@ -17,9 +17,9 @@
 
 package org.apache.dolphinscheduler.plugin.datasource.hive;
 
-import static org.apache.dolphinscheduler.spi.task.TaskConstants.JAVA_SECURITY_KRB5_CONF;
-import static org.apache.dolphinscheduler.spi.task.TaskConstants.JAVA_SECURITY_KRB5_CONF_PATH;
-import static org.apache.dolphinscheduler.spi.task.TaskConstants.HADOOP_SECURITY_AUTHENTICATION_STARTUP_STATE;
+import static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.JAVA_SECURITY_KRB5_CONF;
+import static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.JAVA_SECURITY_KRB5_CONF_PATH;
+import static org.apache.dolphinscheduler.plugin.task.api.TaskConstants.HADOOP_SECURITY_AUTHENTICATION_STARTUP_STATE;
 
 import org.apache.dolphinscheduler.plugin.datasource.api.client.CommonDataSourceClient;
 import org.apache.dolphinscheduler.plugin.datasource.api.provider.JDBCDataSourceProvider;

File: dolphinscheduler-e2e/dolphinscheduler-e2e-case/src/test/java/org/apache/dolphinscheduler/e2e/pages/project/workflow/TaskInstanceTab.java
Patch:
@@ -17,6 +17,7 @@
  * under the License.
  *
  */
+
 package org.apache.dolphinscheduler.e2e.pages.project.workflow;
 
 import lombok.Getter;

File: dolphinscheduler-log-server/src/test/java/org/apache/dolphinscheduler/server/log/TaskLogFilterTest.java
Patch:
@@ -21,8 +21,8 @@
 import ch.qos.logback.classic.spi.IThrowableProxy;
 import ch.qos.logback.classic.spi.LoggerContextVO;
 import ch.qos.logback.core.spi.FilterReply;
-import org.apache.dolphinscheduler.common.utils.LoggerUtils;
-import org.apache.dolphinscheduler.spi.task.TaskConstants;
+
+import org.apache.dolphinscheduler.plugin.task.api.TaskConstants;
 
 import org.junit.Assert;
 import org.junit.Test;

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/dispatch/enums/ExecutorType.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.server.master.dispatch.enums;
 
 /**

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/dispatch/executor/AbstractExecutorManager.java
Patch:
@@ -23,7 +23,7 @@
 /**
  *  abstract executor manager
  */
-public abstract class AbstractExecutorManager<T> implements ExecutorManager<T>{
+public abstract class AbstractExecutorManager<T> implements ExecutorManager<T> {
 
     /**
      * before execute , add time monitor ， timeout

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/dispatch/host/HostManagerConfig.java
Patch:
@@ -19,6 +19,7 @@
 
 import org.apache.dolphinscheduler.server.master.config.MasterConfig;
 import org.apache.dolphinscheduler.server.master.dispatch.host.assign.HostSelector;
+
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.beans.factory.config.AutowireCapableBeanFactory;
 import org.springframework.context.annotation.Bean;

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/dispatch/host/assign/AbstractSelector.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.server.master.dispatch.host.assign;
 
 import org.apache.commons.collections.CollectionUtils;

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/dispatch/host/assign/RoundRobinSelector.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.server.master.dispatch.host.assign;
 
 import java.util.ArrayList;

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/dispatch/host/assign/Selector.java
Patch:
@@ -19,7 +19,6 @@
 
 import java.util.Collection;
 
-
 /**
  * selector
  * @param <T> T

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/processor/CacheProcessor.java
Patch:
@@ -23,7 +23,6 @@
 import org.apache.dolphinscheduler.remote.command.Command;
 import org.apache.dolphinscheduler.remote.command.CommandType;
 import org.apache.dolphinscheduler.remote.processor.NettyRequestProcessor;
-import org.apache.dolphinscheduler.service.bean.SpringApplicationContext;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/processor/StateEventProcessor.java
Patch:
@@ -17,16 +17,15 @@
 
 package org.apache.dolphinscheduler.server.master.processor;
 
-import org.apache.dolphinscheduler.common.enums.ExecutionStatus;
 import org.apache.dolphinscheduler.common.enums.StateEvent;
 import org.apache.dolphinscheduler.common.enums.StateEventType;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
+import org.apache.dolphinscheduler.plugin.task.api.enums.ExecutionStatus;
 import org.apache.dolphinscheduler.remote.command.Command;
 import org.apache.dolphinscheduler.remote.command.CommandType;
 import org.apache.dolphinscheduler.remote.command.StateEventChangeCommand;
 import org.apache.dolphinscheduler.remote.processor.NettyRequestProcessor;
 import org.apache.dolphinscheduler.server.master.processor.queue.StateEventResponseService;
-import org.apache.dolphinscheduler.service.bean.SpringApplicationContext;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/processor/TaskEventProcessor.java
Patch:
@@ -25,7 +25,6 @@
 import org.apache.dolphinscheduler.remote.command.TaskEventChangeCommand;
 import org.apache.dolphinscheduler.remote.processor.NettyRequestProcessor;
 import org.apache.dolphinscheduler.server.master.processor.queue.StateEventResponseService;
-import org.apache.dolphinscheduler.service.bean.SpringApplicationContext;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/processor/queue/StateEventResponseService.java
Patch:
@@ -17,9 +17,9 @@
 
 package org.apache.dolphinscheduler.server.master.processor.queue;
 
-import org.apache.dolphinscheduler.common.enums.ExecutionStatus;
 import org.apache.dolphinscheduler.common.enums.StateEvent;
 import org.apache.dolphinscheduler.common.thread.Stopper;
+import org.apache.dolphinscheduler.plugin.task.api.enums.ExecutionStatus;
 import org.apache.dolphinscheduler.remote.command.StateEventResponseCommand;
 import org.apache.dolphinscheduler.server.master.cache.ProcessInstanceExecCacheManager;
 import org.apache.dolphinscheduler.server.master.runner.WorkflowExecuteThread;

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/processor/queue/TaskResponseEvent.java
Patch:
@@ -17,9 +17,8 @@
 
 package org.apache.dolphinscheduler.server.master.processor.queue;
 
-
 import org.apache.dolphinscheduler.common.enums.Event;
-import org.apache.dolphinscheduler.common.enums.ExecutionStatus;
+import org.apache.dolphinscheduler.plugin.task.api.enums.ExecutionStatus;
 
 import java.util.Date;
 

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/processor/queue/TaskResponseService.java
Patch:
@@ -18,17 +18,17 @@
 package org.apache.dolphinscheduler.server.master.processor.queue;
 
 import org.apache.dolphinscheduler.common.enums.Event;
-import org.apache.dolphinscheduler.common.enums.ExecutionStatus;
 import org.apache.dolphinscheduler.common.enums.StateEvent;
 import org.apache.dolphinscheduler.common.enums.StateEventType;
 import org.apache.dolphinscheduler.common.thread.Stopper;
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
+import org.apache.dolphinscheduler.plugin.task.api.enums.ExecutionStatus;
 import org.apache.dolphinscheduler.remote.command.DBTaskAckCommand;
 import org.apache.dolphinscheduler.remote.command.DBTaskResponseCommand;
 import org.apache.dolphinscheduler.server.master.cache.ProcessInstanceExecCacheManager;
 import org.apache.dolphinscheduler.server.master.runner.WorkflowExecuteThread;
-import org.apache.dolphinscheduler.server.utils.DataQualityResultOperator;
 import org.apache.dolphinscheduler.server.master.runner.WorkflowExecuteThreadPool;
+import org.apache.dolphinscheduler.server.utils.DataQualityResultOperator;
 import org.apache.dolphinscheduler.service.process.ProcessService;
 
 import java.util.ArrayList;

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/registry/MasterRegistryClient.java
Patch:
@@ -23,7 +23,6 @@
 
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.IStoppable;
-import org.apache.dolphinscheduler.common.enums.ExecutionStatus;
 import org.apache.dolphinscheduler.common.enums.NodeType;
 import org.apache.dolphinscheduler.common.enums.StateEvent;
 import org.apache.dolphinscheduler.common.enums.StateEventType;
@@ -32,6 +31,8 @@
 import org.apache.dolphinscheduler.common.utils.NetUtils;
 import org.apache.dolphinscheduler.dao.entity.ProcessInstance;
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
+import org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContext;
+import org.apache.dolphinscheduler.plugin.task.api.enums.ExecutionStatus;
 import org.apache.dolphinscheduler.registry.api.ConnectionState;
 import org.apache.dolphinscheduler.remote.utils.NamedThreadFactory;
 import org.apache.dolphinscheduler.server.builder.TaskExecutionContextBuilder;
@@ -40,7 +41,6 @@
 import org.apache.dolphinscheduler.server.registry.HeartBeatTask;
 import org.apache.dolphinscheduler.server.utils.ProcessUtils;
 import org.apache.dolphinscheduler.service.process.ProcessService;
-import org.apache.dolphinscheduler.service.queue.entity.TaskExecutionContext;
 import org.apache.dolphinscheduler.service.registry.RegistryClient;
 
 import org.apache.commons.collections4.CollectionUtils;

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/StateWheelExecuteThread.java
Patch:
@@ -18,7 +18,6 @@
 package org.apache.dolphinscheduler.server.master.runner;
 
 import org.apache.dolphinscheduler.common.Constants;
-import org.apache.dolphinscheduler.common.enums.ExecutionStatus;
 import org.apache.dolphinscheduler.common.enums.StateEvent;
 import org.apache.dolphinscheduler.common.enums.StateEventType;
 import org.apache.dolphinscheduler.common.enums.TimeoutFlag;
@@ -27,10 +26,11 @@
 import org.apache.dolphinscheduler.dao.entity.ProcessInstance;
 import org.apache.dolphinscheduler.dao.entity.TaskDefinition;
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
+import org.apache.dolphinscheduler.plugin.task.api.enums.ExecutionStatus;
 import org.apache.dolphinscheduler.server.master.cache.ProcessInstanceExecCacheManager;
 import org.apache.dolphinscheduler.server.master.config.MasterConfig;
-
 import org.apache.dolphinscheduler.server.master.runner.task.TaskInstanceKey;
+
 import org.apache.hadoop.util.ThreadUtil;
 
 import java.util.concurrent.ConcurrentLinkedQueue;

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/WorkflowExecuteThreadPool.java
Patch:
@@ -17,13 +17,13 @@
 
 package org.apache.dolphinscheduler.server.master.runner;
 
-import org.apache.dolphinscheduler.common.enums.ExecutionStatus;
 import org.apache.dolphinscheduler.common.enums.Flag;
 import org.apache.dolphinscheduler.common.enums.StateEvent;
 import org.apache.dolphinscheduler.common.enums.StateEventType;
 import org.apache.dolphinscheduler.common.utils.NetUtils;
 import org.apache.dolphinscheduler.dao.entity.ProcessInstance;
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
+import org.apache.dolphinscheduler.plugin.task.api.enums.ExecutionStatus;
 import org.apache.dolphinscheduler.remote.command.StateEventChangeCommand;
 import org.apache.dolphinscheduler.remote.processor.StateEventCallbackService;
 import org.apache.dolphinscheduler.server.master.cache.ProcessInstanceExecCacheManager;

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/task/CommonTaskProcessor.java
Patch:
@@ -18,7 +18,8 @@
 package org.apache.dolphinscheduler.server.master.runner.task;
 
 import org.apache.dolphinscheduler.common.Constants;
-import org.apache.dolphinscheduler.common.enums.ExecutionStatus;
+import org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContext;
+import org.apache.dolphinscheduler.plugin.task.api.enums.ExecutionStatus;
 import org.apache.dolphinscheduler.remote.command.TaskKillRequestCommand;
 import org.apache.dolphinscheduler.remote.utils.Host;
 import org.apache.dolphinscheduler.server.master.dispatch.context.ExecutionContext;
@@ -29,7 +30,6 @@
 import org.apache.dolphinscheduler.service.queue.TaskPriority;
 import org.apache.dolphinscheduler.service.queue.TaskPriorityQueue;
 import org.apache.dolphinscheduler.service.queue.TaskPriorityQueueImpl;
-import org.apache.dolphinscheduler.service.queue.entity.TaskExecutionContext;
 
 import org.apache.commons.lang.StringUtils;
 

File: dolphinscheduler-master/src/test/java/org/apache/dolphinscheduler/server/master/WorkflowExecuteThreadTest.java
Patch:
@@ -25,7 +25,6 @@
 import static org.powermock.api.mockito.PowerMockito.mock;
 
 import org.apache.dolphinscheduler.common.enums.CommandType;
-import org.apache.dolphinscheduler.common.enums.ExecutionStatus;
 import org.apache.dolphinscheduler.common.enums.Flag;
 import org.apache.dolphinscheduler.common.enums.ProcessExecutionTypeEnum;
 import org.apache.dolphinscheduler.common.graph.DAG;
@@ -35,6 +34,7 @@
 import org.apache.dolphinscheduler.dao.entity.ProcessInstance;
 import org.apache.dolphinscheduler.dao.entity.Schedule;
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
+import org.apache.dolphinscheduler.plugin.task.api.enums.ExecutionStatus;
 import org.apache.dolphinscheduler.server.master.config.MasterConfig;
 import org.apache.dolphinscheduler.server.master.runner.StateWheelExecuteThread;
 import org.apache.dolphinscheduler.server.master.runner.WorkflowExecuteThread;

File: dolphinscheduler-master/src/test/java/org/apache/dolphinscheduler/server/master/processor/TaskResponseProcessorTestConfig.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.dolphinscheduler.server.master.processor;
 
 import org.apache.dolphinscheduler.server.utils.DataQualityResultOperator;
+
 import org.mockito.Mockito;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;

File: dolphinscheduler-master/src/test/java/org/apache/dolphinscheduler/server/master/processor/queue/TaskResponseServiceTest.java
Patch:
@@ -17,8 +17,8 @@
 
 package org.apache.dolphinscheduler.server.master.processor.queue;
 
-import org.apache.dolphinscheduler.common.enums.ExecutionStatus;
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
+import org.apache.dolphinscheduler.plugin.task.api.enums.ExecutionStatus;
 import org.apache.dolphinscheduler.server.master.cache.impl.ProcessInstanceExecCacheManagerImpl;
 import org.apache.dolphinscheduler.service.process.ProcessService;
 

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/StateEventChangeCommand.java
Patch:
@@ -17,8 +17,8 @@
 
 package org.apache.dolphinscheduler.remote.command;
 
-import org.apache.dolphinscheduler.common.enums.ExecutionStatus;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
+import org.apache.dolphinscheduler.plugin.task.api.enums.ExecutionStatus;
 
 import java.io.Serializable;
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/log/TaskLogDiscriminator.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.dolphinscheduler.server.log;
 
 import org.apache.dolphinscheduler.common.Constants;
-import org.apache.dolphinscheduler.spi.task.TaskConstants;
+import org.apache.dolphinscheduler.plugin.task.api.TaskConstants;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/log/TaskLogFilter.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.dolphinscheduler.server.log;
 
-import org.apache.dolphinscheduler.spi.task.TaskConstants;
+import org.apache.dolphinscheduler.plugin.task.api.TaskConstants;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/utils/LogUtils.java
Patch:
@@ -19,8 +19,8 @@
 
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.utils.DateUtils;
+import org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContext;
 import org.apache.dolphinscheduler.server.log.TaskLogDiscriminator;
-import org.apache.dolphinscheduler.service.queue.entity.TaskExecutionContext;
 
 import java.nio.file.Path;
 import java.nio.file.Paths;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/utils/ProcessUtils.java
Patch:
@@ -18,16 +18,16 @@
 package org.apache.dolphinscheduler.server.utils;
 
 import org.apache.dolphinscheduler.common.Constants;
-import org.apache.dolphinscheduler.common.enums.ExecutionStatus;
 import org.apache.dolphinscheduler.common.utils.CommonUtils;
 import org.apache.dolphinscheduler.common.utils.FileUtils;
 import org.apache.dolphinscheduler.common.utils.HadoopUtils;
 import org.apache.dolphinscheduler.common.utils.LoggerUtils;
 import org.apache.dolphinscheduler.common.utils.OSUtils;
 import org.apache.dolphinscheduler.common.utils.PropertyUtils;
+import org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContext;
+import org.apache.dolphinscheduler.plugin.task.api.enums.ExecutionStatus;
 import org.apache.dolphinscheduler.remote.utils.Host;
 import org.apache.dolphinscheduler.service.log.LogClientService;
-import org.apache.dolphinscheduler.service.queue.entity.TaskExecutionContext;
 
 import org.apache.commons.collections.CollectionUtils;
 import org.apache.commons.lang.StringUtils;

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/log/TaskLogDiscriminatorTest.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.dolphinscheduler.server.log;
 
-import org.apache.dolphinscheduler.spi.task.TaskConstants;
+import org.apache.dolphinscheduler.plugin.task.api.TaskConstants;
 
 import ch.qos.logback.classic.Level;
 import ch.qos.logback.classic.spi.ILoggingEvent;

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/utils/LogUtilsTest.java
Patch:
@@ -19,8 +19,8 @@
 
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.utils.DateUtils;
+import org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContext;
 import org.apache.dolphinscheduler.server.log.TaskLogDiscriminator;
-import org.apache.dolphinscheduler.service.queue.entity.TaskExecutionContext;
 
 import java.nio.file.Path;
 import java.nio.file.Paths;

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/utils/ProcessUtilsTest.java
Patch:
@@ -20,10 +20,10 @@
 import static org.powermock.api.mockito.PowerMockito.when;
 
 import org.apache.dolphinscheduler.common.Constants;
-import org.apache.dolphinscheduler.common.enums.ExecutionStatus;
 import org.apache.dolphinscheduler.common.utils.HadoopUtils;
 import org.apache.dolphinscheduler.common.utils.OSUtils;
 import org.apache.dolphinscheduler.common.utils.PropertyUtils;
+import org.apache.dolphinscheduler.plugin.task.api.enums.ExecutionStatus;
 
 import org.apache.commons.lang.SystemUtils;
 

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/alert/ProcessAlertManager.java
Patch:
@@ -32,7 +32,7 @@
 import org.apache.dolphinscheduler.dao.entity.TaskAlertContent;
 import org.apache.dolphinscheduler.dao.entity.TaskDefinition;
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
-import org.apache.dolphinscheduler.spi.task.dq.enums.DqTaskState;
+import org.apache.dolphinscheduler.plugin.task.api.enums.dp.DqTaskState;
 
 import java.util.ArrayList;
 import java.util.Date;

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/k8s/K8sClientService.java
Patch:
@@ -70,7 +70,6 @@ private ResourceQuota upsertNamespacedResourceToK8s(K8sNamespace k8sNamespace, S
                 .withName(k8sNamespace.getNamespace())
                 .get();
 
-
         ResourceQuota body = yaml.loadAs(yamlStr, ResourceQuota.class);
 
         if (queryExist != null) {

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/k8s/K8sManager.java
Patch:
@@ -60,7 +60,6 @@ public KubernetesClient getK8sClient(String k8sName) {
         return clientMap.get(k8sName);
     }
 
-
     @EventListener
     public void buildApiClientAll(ApplicationReadyEvent readyEvent) throws RemotingException {
         QueryWrapper<K8s> nodeWrapper = new QueryWrapper<>();

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/permission/PermissionCheck.java
Patch:
@@ -19,8 +19,8 @@
 
 import org.apache.dolphinscheduler.common.enums.AuthorizationType;
 import org.apache.dolphinscheduler.common.enums.UserType;
-import org.apache.dolphinscheduler.common.process.ResourceInfo;
 import org.apache.dolphinscheduler.dao.entity.User;
+import org.apache.dolphinscheduler.plugin.task.api.model.ResourceInfo;
 import org.apache.dolphinscheduler.service.exceptions.ServiceException;
 import org.apache.dolphinscheduler.service.process.ProcessService;
 

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/queue/TaskPriority.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.dolphinscheduler.service.queue;
 
-import org.apache.dolphinscheduler.service.queue.entity.TaskExecutionContext;
+import org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContext;
 
 import java.util.Map;
 import java.util.Objects;

File: dolphinscheduler-service/src/test/java/org/apache/dolphinscheduler/service/alert/ProcessAlertManagerTest.java
Patch:
@@ -18,12 +18,12 @@
 package org.apache.dolphinscheduler.service.alert;
 
 import org.apache.dolphinscheduler.common.enums.CommandType;
-import org.apache.dolphinscheduler.common.enums.ExecutionStatus;
 import org.apache.dolphinscheduler.common.enums.WarningType;
 import org.apache.dolphinscheduler.dao.AlertDao;
 import org.apache.dolphinscheduler.dao.entity.ProcessInstance;
 import org.apache.dolphinscheduler.dao.entity.ProjectUser;
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
+import org.apache.dolphinscheduler.plugin.task.api.enums.ExecutionStatus;
 
 import java.util.ArrayList;
 import java.util.Date;

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/AbstractYarnTask.java
Patch:
@@ -17,8 +17,8 @@
 
 package org.apache.dolphinscheduler.plugin.task.api;
 
-import org.apache.dolphinscheduler.spi.task.ResourceInfo;
-import org.apache.dolphinscheduler.spi.task.request.TaskRequest;
+import org.apache.dolphinscheduler.plugin.task.api.model.ResourceInfo;
+import org.apache.dolphinscheduler.plugin.task.api.model.TaskResponse;
 
 /**
  * abstract yarn task
@@ -34,7 +34,7 @@ public abstract class AbstractYarnTask extends AbstractTaskExecutor {
      *
      * @param taskRequest taskRequest
      */
-    public AbstractYarnTask(TaskRequest taskRequest) {
+    public AbstractYarnTask(TaskExecutionContext taskRequest) {
         super(taskRequest);
         this.shellCommandExecutor = new ShellCommandExecutor(this::logHandle,
                 taskRequest,

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/DataQualityTaskExecutionContext.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.spi.task.request;
+package org.apache.dolphinscheduler.plugin.task.api;
 
 import java.io.Serializable;
 

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/ShellCommandExecutor.java
Patch:
@@ -17,8 +17,7 @@
 
 package org.apache.dolphinscheduler.plugin.task.api;
 
-import org.apache.dolphinscheduler.plugin.task.util.OSUtils;
-import org.apache.dolphinscheduler.spi.task.request.TaskRequest;
+import org.apache.dolphinscheduler.plugin.task.api.utils.OSUtils;
 
 import org.apache.commons.io.FileUtils;
 import org.apache.commons.lang.StringUtils;
@@ -56,7 +55,7 @@ public class ShellCommandExecutor extends AbstractCommandExecutor {
      * @param logger logger
      */
     public ShellCommandExecutor(Consumer<LinkedBlockingQueue<String>> logHandler,
-                                TaskRequest taskRequest,
+                                TaskExecutionContext taskRequest,
                                 Logger logger) {
         super(logHandler, taskRequest, logger);
     }

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/TaskChannelFactory.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.spi.task;
+package org.apache.dolphinscheduler.plugin.task.api;
 
 import org.apache.dolphinscheduler.spi.common.UiChannelFactory;
 

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/enums/DataType.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.common.enums;
+package org.apache.dolphinscheduler.plugin.task.api.enums;
 
 /**
  * data types in user define parameter

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/enums/DependResult.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.common.enums;
+package org.apache.dolphinscheduler.plugin.task.api.enums;
 
 /**
  * depend result

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/enums/DependentRelation.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.common.enums;
+package org.apache.dolphinscheduler.plugin.task.api.enums;
 
 /**
  * dependent relation: and or

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/enums/Direct.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.spi.task;
+package org.apache.dolphinscheduler.plugin.task.api.enums;
 
 /**
  * parameter of stored procedure

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/enums/ExecutionStatus.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.common.enums;
+package org.apache.dolphinscheduler.plugin.task.api.enums;
 
 import java.util.HashMap;
 

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/enums/SqlType.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.common.task.sql;
+package org.apache.dolphinscheduler.plugin.task.api.enums;
 
 public enum SqlType {
     /**

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/enums/TaskRunStatus.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.plugin.task.api;
+package org.apache.dolphinscheduler.plugin.task.api.enums;
 
 public enum TaskRunStatus {
 

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/enums/TaskTimeoutStrategy.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.common.enums;
+package org.apache.dolphinscheduler.plugin.task.api.enums;
 
 import com.baomidou.mybatisplus.annotation.EnumValue;
 

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/enums/UdfType.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.spi.task.request;
+package org.apache.dolphinscheduler.plugin.task.api.enums;
 
 /**
  * UDF type

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/enums/dp/CheckType.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.spi.task.dq.enums;
+package org.apache.dolphinscheduler.plugin.task.api.enums.dp;
 
 import java.util.HashMap;
 import java.util.Map;

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/enums/dp/ConnectorType.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.spi.task.dq.enums;
+package org.apache.dolphinscheduler.plugin.task.api.enums.dp;
 
 import java.util.HashMap;
 import java.util.Map;

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/enums/dp/DqFailureStrategy.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.spi.task.dq.enums;
+package org.apache.dolphinscheduler.plugin.task.api.enums.dp;
 
 import java.util.HashMap;
 import java.util.Map;

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/enums/dp/DqTaskState.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.spi.task.dq.enums;
+package org.apache.dolphinscheduler.plugin.task.api.enums.dp;
 
 import java.util.HashMap;
 import java.util.Map;

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/enums/dp/ExecuteSqlType.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.spi.task.dq.enums;
+package org.apache.dolphinscheduler.plugin.task.api.enums.dp;
 
 import java.util.HashMap;
 import java.util.Map;

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/enums/dp/InputType.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.spi.task.dq.enums;
+package org.apache.dolphinscheduler.plugin.task.api.enums.dp;
 
 import java.util.HashMap;
 import java.util.Map;

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/enums/dp/OperatorType.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.spi.task.dq.enums;
+package org.apache.dolphinscheduler.plugin.task.api.enums.dp;
 
 import java.util.HashMap;
 import java.util.Map;

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/enums/dp/OptionSourceType.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.spi.task.dq.enums;
+package org.apache.dolphinscheduler.plugin.task.api.enums.dp;
 
 import java.util.HashMap;
 import java.util.Map;

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/enums/dp/RuleType.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.spi.task.dq.enums;
+package org.apache.dolphinscheduler.plugin.task.api.enums.dp;
 
 import java.util.HashMap;
 import java.util.Map;

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/enums/dp/ValueType.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.spi.task.dq.enums;
+package org.apache.dolphinscheduler.plugin.task.api.enums.dp;
 
 import java.util.HashMap;
 import java.util.Map;

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/DateInterval.java
Patch:
@@ -15,12 +15,11 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.common.model;
+package org.apache.dolphinscheduler.plugin.task.api.model;
 
 import java.util.Date;
 import java.util.Objects;
 
-
 /**
  * date interval class
  */

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/DependentItem.java
Patch:
@@ -15,10 +15,10 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.common.model;
+package org.apache.dolphinscheduler.plugin.task.api.model;
 
-import org.apache.dolphinscheduler.common.enums.DependResult;
-import org.apache.dolphinscheduler.common.enums.ExecutionStatus;
+import org.apache.dolphinscheduler.plugin.task.api.enums.DependResult;
+import org.apache.dolphinscheduler.plugin.task.api.enums.ExecutionStatus;
 
 /**
  * dependent item

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/DependentTaskModel.java
Patch:
@@ -15,9 +15,9 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.common.model;
+package org.apache.dolphinscheduler.plugin.task.api.model;
 
-import org.apache.dolphinscheduler.common.enums.DependentRelation;
+import org.apache.dolphinscheduler.plugin.task.api.enums.DependentRelation;
 
 import java.util.List;
 

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/JdbcInfo.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.spi.task.dq.model;
+package org.apache.dolphinscheduler.plugin.task.api.model;
 
 /**
  * JdbcInfo

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/Property.java
Patch:
@@ -15,9 +15,10 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.spi.task;
+package org.apache.dolphinscheduler.plugin.task.api.model;
 
-import org.apache.dolphinscheduler.spi.enums.DataType;
+import org.apache.dolphinscheduler.plugin.task.api.enums.Direct;
+import org.apache.dolphinscheduler.plugin.task.api.enums.DataType;
 
 import java.io.Serializable;
 import java.util.Objects;

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/SwitchResultVo.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.common.task.switchtask;
+package org.apache.dolphinscheduler.plugin.task.api.model;
 
 import java.util.ArrayList;
 import java.util.List;

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/model/TaskAlertInfo.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.spi.task;
+package org.apache.dolphinscheduler.plugin.task.api.model;
 
 public class TaskAlertInfo {
 

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/consumer/TaskPriorityQueueConsumer.java
Patch:
@@ -33,6 +33,7 @@
 import org.apache.dolphinscheduler.service.queue.entity.TaskExecutionContext;
 
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.List;
 import java.util.Objects;
 import java.util.concurrent.CountDownLatch;
@@ -120,7 +121,7 @@ public void run() {
      * batch dispatch with thread pool
      */
     private List<TaskPriority> batchDispatch(int fetchTaskNum) throws TaskPriorityQueueException, InterruptedException {
-        List<TaskPriority> failedDispatchTasks = new ArrayList<>();
+        List<TaskPriority> failedDispatchTasks = Collections.synchronizedList(new ArrayList<>());
         CountDownLatch latch = new CountDownLatch(fetchTaskNum);
 
         for (int i = 0; i < fetchTaskNum; i++) {

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterSchedulerService.java
Patch:
@@ -36,6 +36,7 @@
 import org.apache.commons.collections4.CollectionUtils;
 
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.List;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.ThreadPoolExecutor;
@@ -179,7 +180,8 @@ private void scheduleProcess() throws Exception {
     }
 
     private List<ProcessInstance> command2ProcessInstance(List<Command> commands) {
-        List<ProcessInstance> processInstances = new ArrayList<>(commands.size());
+
+        List<ProcessInstance> processInstances = Collections.synchronizedList(new ArrayList<>(commands.size()));
         CountDownLatch latch = new CountDownLatch(commands.size());
         for (final Command command : commands) {
             masterPrepareExecService.execute(() -> {

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/UsersServiceImpl.java
Patch:
@@ -566,9 +566,9 @@ public Map<String, Object> grantProject(User loginUser, int userId, String proje
             return result;
         }
 
-        //if the selected projectIds are empty, delete all items associated with the user
+        projectUserMapper.deleteProjectRelation(0, userId);
+
         if (check(result, StringUtils.isEmpty(projectIds), Status.SUCCESS)) {
-            projectUserMapper.deleteProjectRelation(0, userId);
             return result;
         }
 

File: dolphinscheduler-task-plugin/dolphinscheduler-task-dataquality/src/main/java/org/apache/dolphinscheduler/plugin/task/dq/DataQualityTask.java
Patch:
@@ -180,7 +180,8 @@ protected String buildCommand() {
     @Override
     protected void setMainJarName() {
         ResourceInfo mainJar = new ResourceInfo();
-        mainJar.setRes(CommonUtils.getDataQualityJarName());
+        String basePath = System.getProperty("user.dir").replace(File.separator + "bin", File.separator + "libs");
+        mainJar.setRes(basePath + File.separator + CommonUtils.getDataQualityJarName());
         dataQualityParameters.getSparkParameters().setMainJar(mainJar);
     }
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/configuration/AppConfiguration.java
Patch:
@@ -116,8 +116,8 @@ public void addResourceHandlers(ResourceHandlerRegistry registry) {
 
     @Override
     public void addViewControllers(ViewControllerRegistry registry) {
+        registry.addViewController("/").setViewName("redirect:/ui/");
         registry.addViewController("/ui/").setViewName("forward:/ui/index.html");
-        registry.addViewController("/").setViewName("forward:/ui/index.html");
     }
 
     /**

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/Constants.java
Patch:
@@ -567,6 +567,8 @@ private Constants() {
     public static final String QUEUE_NAME = "queueName";
     public static final int LOG_QUERY_SKIP_LINE_NUMBER = 0;
     public static final int LOG_QUERY_LIMIT = 4096;
+    public static final String BLOCKING_CONDITION = "blockingCondition";
+    public static final String ALERT_WHEN_BLOCKING = "alertWhenBlocking";
 
     /**
      * master/worker server use for zk

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/StateEventType.java
Patch:
@@ -26,8 +26,8 @@ public enum StateEventType {
     PROCESS_TIMEOUT(2, "process timeout"),
     TASK_TIMEOUT(3, "task timeout"),
     WAIT_TASK_GROUP(4, "wait task group"),
-    TASK_RETRY(5, "task retry")
-    ;
+    TASK_RETRY(5, "task retry"),
+    PROCESS_BLOCKED(6, "process blocked");
 
     StateEventType(int code, String descp) {
         this.code = code;

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/TaskType.java
Patch:
@@ -42,6 +42,7 @@ public enum TaskType {
      * 15 PIGEON
      * 16 DATA_QUALITY
      * 17 EMR
+     * 18 BLOCKING
      */
     SHELL(0, "SHELL"),
     SQL(1, "SQL"),
@@ -61,6 +62,7 @@ public enum TaskType {
     PIGEON(15, "PIGEON"),
     DATA_QUALITY(16, "DATA_QUALITY"),
     EMR(17, "EMR"),
+    BLOCKING(18, "BLOCKING");
     ;
 
     TaskType(int code, String desc) {

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/TaskParametersUtils.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.dolphinscheduler.common.utils;
 
 import org.apache.dolphinscheduler.common.task.AbstractParameters;
+import org.apache.dolphinscheduler.common.task.blocking.BlockingParameters;
 import org.apache.dolphinscheduler.common.task.conditions.ConditionsParameters;
 import org.apache.dolphinscheduler.common.task.datax.DataxParameters;
 import org.apache.dolphinscheduler.common.task.dependent.DependentParameters;
@@ -90,6 +91,8 @@ public static AbstractParameters getParameters(String taskType, String parameter
                 return JSONUtils.parseObject(parameter, DataQualityParameters.class);
             case "SWITCH":
                 return JSONUtils.parseObject(parameter, SwitchParameters.class);
+            case "BLOCKING":
+                return JSONUtils.parseObject(parameter, BlockingParameters.class);
             case "PIGEON":
                 return JSONUtils.parseObject(parameter, PigeonCommonParameters.class);
             case "EMR":

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/StateWheelExecuteThread.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.dolphinscheduler.server.master.runner;
 
-import org.apache.commons.lang3.StringUtils;
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.ExecutionStatus;
 import org.apache.dolphinscheduler.common.enums.StateEvent;
@@ -34,8 +33,6 @@
 import org.apache.dolphinscheduler.server.master.runner.task.TaskInstanceKey;
 import org.apache.hadoop.util.ThreadUtil;
 
-import java.util.Map.Entry;
-import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentLinkedQueue;
 
 import org.slf4j.Logger;

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/task/BaseTaskProcessor.java
Patch:
@@ -238,6 +238,7 @@ public String getType() {
         return null;
     }
 
+    @Override
     public TaskInstance taskInstance() {
         return this.taskInstance;
     }

File: dolphinscheduler-master/src/test/java/org/apache/dolphinscheduler/server/master/WorkflowExecuteThreadTest.java
Patch:
@@ -272,4 +272,4 @@ private List<Schedule> oneSchedulerList() {
         return schedulerList;
     }
 
-}
+}
\ No newline at end of file

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/TaskGroupServiceImpl.java
Patch:
@@ -216,7 +216,6 @@ private Map<String, Object> getStringObjectMap(int pageNo, int pageSize, Map<Str
         pageInfo.setTotalList(list);
 
         result.put(Constants.DATA_LIST, pageInfo);
-        logger.info("select result:{}", taskGroupPaging);
         putMsg(result, Status.SUCCESS);
         return result;
     }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ExecutorService.java
Patch:
@@ -19,6 +19,7 @@
 
 import org.apache.dolphinscheduler.api.enums.ExecuteType;
 import org.apache.dolphinscheduler.common.enums.CommandType;
+import org.apache.dolphinscheduler.common.enums.ComplementDependentMode;
 import org.apache.dolphinscheduler.common.enums.FailureStrategy;
 import org.apache.dolphinscheduler.common.enums.Priority;
 import org.apache.dolphinscheduler.common.enums.RunMode;
@@ -63,7 +64,8 @@ Map<String, Object> execProcessInstance(User loginUser, long projectCode,
                                             RunMode runMode,
                                             Priority processInstancePriority, String workerGroup, Long environmentCode, Integer timeout,
                                             Map<String, String> startParams, Integer expectedParallelismNumber,
-                                            int dryRun);
+                                            int dryRun,
+                                            ComplementDependentMode complementDependentMode);
 
     /**
      * check whether the process definition can be executed

File: dolphinscheduler-spi/src/main/java/org/apache/dolphinscheduler/spi/task/paramparser/BusinessTimeUtils.java
Patch:
@@ -50,7 +50,6 @@ public static Map<String, String> getBusinessTime(CommandType commandType, Date
         Date businessDate = runTime;
         switch (commandType) {
             case COMPLEMENT_DATA:
-                break;
             case START_PROCESS:
             case START_CURRENT_TASK_PROCESS:
             case RECOVER_TOLERANCE_FAULT_PROCESS:

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/dto/AuditDto.java
Patch:
@@ -19,8 +19,6 @@
 
 import java.util.Date;
 
-import com.fasterxml.jackson.annotation.JsonFormat;
-
 public class AuditDto {
 
     private String userName;
@@ -29,7 +27,6 @@ public class AuditDto {
 
     private String operation;
 
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss",timezone = "GMT+8")
     private Date time;
 
     private String resourceName;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/dto/ScheduleParam.java
Patch:
@@ -26,9 +26,7 @@
  */
 public class ScheduleParam {
 
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone = "GMT+8")
     private Date startTime;
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone = "GMT+8")
     private Date endTime;
     private String crontab;
     private String timezoneId;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/dto/gantt/Task.java
Patch:
@@ -43,19 +43,16 @@ public class Task {
     /**
      * task execution date
      */
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss",timezone="GMT+8")
     private Date executionDate;
 
     /**
      * task iso start
      */
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss",timezone="GMT+8")
     private Date isoStart;
 
     /**
      * task iso end
      */
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss",timezone="GMT+8")
     private Date isoEnd;
 
     /**

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/dto/treeview/Instance.java
Patch:
@@ -51,13 +51,11 @@ public class Instance {
     /**
      * node start time
      */
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone = "GMT+8")
     private Date startTime;
 
     /**
      * node end time
      */
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone = "GMT+8")
     private Date endTime;
 
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/SchedulerServiceImpl.java
Patch:
@@ -562,7 +562,9 @@ public Map<String, Object> previewSchedule(User loginUser, String schedule) {
             return result;
         }
         List<Date> selfFireDateList = CronUtils.getSelfFireDateList(startTime, endTime, cronExpression, Constants.PREVIEW_SCHEDULE_EXECUTE_COUNT);
-        result.put(Constants.DATA_LIST, selfFireDateList.stream().map(DateUtils::dateToString));
+        List<String> previewDateList = new ArrayList<>();
+        selfFireDateList.forEach(date -> previewDateList.add(DateUtils.dateToString(date, scheduleParam.getTimezoneId())));
+        result.put(Constants.DATA_LIST, previewDateList);
         putMsg(result, Status.SUCCESS);
         return result;
     }

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/model/DateInterval.java
Patch:
@@ -26,9 +26,7 @@
  * date interval class
  */
 public class DateInterval {
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss",timezone = "GMT+8")
     private Date startTime;
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss",timezone = "GMT+8")
     private Date endTime;
 
     public DateInterval(Date beginTime, Date endTime) {

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/model/Server.java
Patch:
@@ -54,13 +54,11 @@ public class Server {
     /**
      * create time
      */
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss",timezone = "GMT+8")
     private Date createTime;
 
     /**
      * laster heart beat time
      */
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss",timezone = "GMT+8")
     private Date lastHeartbeatTime;
 
     public int getId() {

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/model/WorkerServerModel.java
Patch:
@@ -55,13 +55,11 @@ public class WorkerServerModel {
     /**
      * create time
      */
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone = "GMT+8")
     private Date createTime;
 
     /**
      * last heart beat time
      */
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone = "GMT+8")
     private Date lastHeartbeatTime;
 
     public int getId() {

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/ParameterUtils.java
Patch:
@@ -66,7 +66,7 @@ public static String convertParameterPlaceholders(String parameterString, Map<St
         if (parameterMap != null && null != parameterMap.get(Constants.PARAMETER_DATETIME)) {
             //Get current time, schedule execute time
             String cronTimeStr = parameterMap.get(Constants.PARAMETER_DATETIME);
-            cronTime = DateUtils.parse(cronTimeStr, Constants.PARAMETER_FORMAT_TIME);
+            cronTime = DateUtils.parse(cronTimeStr, Constants.PARAMETER_FORMAT_TIME, null);
         } else {
             cronTime = new Date();
         }

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/placeholder/BusinessTimeUtils.java
Patch:
@@ -71,9 +71,9 @@ public static Map<String, String> getBusinessTime(CommandType commandType, Date
                 break;
         }
         Date businessCurrentDate = addDays(businessDate, 1);
-        result.put(Constants.PARAMETER_CURRENT_DATE, format(businessCurrentDate, PARAMETER_FORMAT_DATE));
-        result.put(Constants.PARAMETER_BUSINESS_DATE, format(businessDate, PARAMETER_FORMAT_DATE));
-        result.put(Constants.PARAMETER_DATETIME, format(businessCurrentDate, PARAMETER_FORMAT_TIME));
+        result.put(Constants.PARAMETER_CURRENT_DATE, format(businessCurrentDate, PARAMETER_FORMAT_DATE, null));
+        result.put(Constants.PARAMETER_BUSINESS_DATE, format(businessDate, PARAMETER_FORMAT_DATE, null));
+        result.put(Constants.PARAMETER_DATETIME, format(businessCurrentDate, PARAMETER_FORMAT_TIME, null));
         return result;
     }
 }

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/placeholder/TimePlaceholderUtils.java
Patch:
@@ -337,14 +337,14 @@ private static String calculateTime(String expression, Date date) {
 
                 Map.Entry<Date, String> entry = calcTimeExpression(timeExpression, date);
 
-                String dateStr = DateUtils.format(entry.getKey(), entry.getValue());
+                String dateStr = DateUtils.format(entry.getKey(), entry.getValue(), null);
 
-                Date timestamp = DateUtils.parse(dateStr, Constants.PARAMETER_FORMAT_TIME);
+                Date timestamp = DateUtils.parse(dateStr, Constants.PARAMETER_FORMAT_TIME, null);
 
                 value = String.valueOf(timestamp.getTime() / 1000);
             } else {
                 Map.Entry<Date, String> entry = calcTimeExpression(expression, date);
-                value = DateUtils.format(entry.getKey(), entry.getValue());
+                value = DateUtils.format(entry.getKey(), entry.getValue(), null);
             }
         } catch (Exception e) {
             logger.error(e.getMessage(), e);

File: dolphinscheduler-common/src/test/java/org/apache/dolphinscheduler/common/utils/placeholder/TimePlaceholderUtilsTest.java
Patch:
@@ -38,7 +38,7 @@ public static void setup() {
 
     @Before
     public void init() {
-        date = DateUtils.parse("20170101010101", "yyyyMMddHHmmss");
+        date = DateUtils.parse("20170101010101", "yyyyMMddHHmmss", null);
     }
 
     @Test

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/AuditLog.java
Patch:
@@ -23,7 +23,6 @@
 import com.baomidou.mybatisplus.annotation.TableField;
 import com.baomidou.mybatisplus.annotation.TableId;
 import com.baomidou.mybatisplus.annotation.TableName;
-import com.fasterxml.jackson.annotation.JsonFormat;
 
 @TableName("t_ds_audit_log")
 public class AuditLog {
@@ -63,7 +62,6 @@ public class AuditLog {
     /**
      * operation time
      */
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss",timezone = "GMT+8")
     private Date time;
 
     public Integer getUserId() {

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/CycleDependency.java
Patch:
@@ -32,12 +32,10 @@ public class CycleDependency {
     /**
      * last schedule time
      */
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss",timezone="GMT+8")
     private Date lastScheduleTime;
     /**
      * expiration time
      */
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss",timezone="GMT+8")
     private Date expirationTime;
     /**
      * cycle enum

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/DataSource.java
Patch:
@@ -68,13 +68,11 @@ public class DataSource {
   /**
    * create time
    */
-  @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss",timezone="GMT+8")
   private Date createTime;
 
   /**
    * update time
    */
-  @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss",timezone="GMT+8")
   private Date updateTime;
 
   public DataSource() {

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/DqComparisonType.java
Patch:
@@ -24,7 +24,6 @@
 import com.baomidou.mybatisplus.annotation.TableField;
 import com.baomidou.mybatisplus.annotation.TableId;
 import com.baomidou.mybatisplus.annotation.TableName;
-import com.fasterxml.jackson.annotation.JsonFormat;
 
 @TableName("t_ds_dq_comparison_type")
 public class DqComparisonType implements Serializable {
@@ -62,13 +61,11 @@ public class DqComparisonType implements Serializable {
      * create_time
      */
     @TableField(value = "create_time")
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone = "GMT+8")
     private Date createTime;
     /**
      * update_time
      */
     @TableField(value = "update_time")
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone = "GMT+8")
     private Date updateTime;
 
     public int getId() {

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/DqExecuteResult.java
Patch:
@@ -147,13 +147,11 @@ public class DqExecuteResult implements Serializable {
      * create_time
      */
     @TableField(value = "create_time")
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone = "GMT+8")
     private Date createTime;
     /**
      * update_time
      */
     @TableField(value = "update_time")
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone = "GMT+8")
     private Date updateTime;
 
     public int getId() {

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/DqRuleExecuteSql.java
Patch:
@@ -26,7 +26,6 @@
 import com.baomidou.mybatisplus.annotation.TableField;
 import com.baomidou.mybatisplus.annotation.TableId;
 import com.baomidou.mybatisplus.annotation.TableName;
-import com.fasterxml.jackson.annotation.JsonFormat;
 
 /**
  * RuleExecuteSql
@@ -67,13 +66,11 @@ public class DqRuleExecuteSql implements Serializable {
      * create_time
      */
     @TableField(value = "create_time")
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone = "GMT+8")
     private Date createTime;
     /**
      * update_time
      */
     @TableField(value = "update_time")
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone = "GMT+8")
     private Date updateTime;
 
     public int getId() {

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/DqRuleInputEntry.java
Patch:
@@ -28,7 +28,6 @@
 import com.baomidou.mybatisplus.annotation.TableField;
 import com.baomidou.mybatisplus.annotation.TableId;
 import com.baomidou.mybatisplus.annotation.TableName;
-import com.fasterxml.jackson.annotation.JsonFormat;
 
 /**
  * RuleInputEntry
@@ -121,13 +120,11 @@ public class DqRuleInputEntry implements Serializable {
      * create_time
      */
     @TableField(value = "create_time")
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone = "GMT+8")
     private Date createTime;
     /**
      * update_time
      */
     @TableField(value = "update_time")
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone = "GMT+8")
     private Date updateTime;
 
     public int getId() {

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/Environment.java
Patch:
@@ -55,10 +55,8 @@ public class Environment {
      */
     private Integer operator;
 
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone = "GMT+8")
     private Date createTime;
 
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone = "GMT+8")
     private Date updateTime;
 
     public int getId() {

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/EnvironmentWorkerGroupRelation.java
Patch:
@@ -48,10 +48,8 @@ public class EnvironmentWorkerGroupRelation {
      */
     private Integer operator;
 
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone = "GMT+8")
     private Date createTime;
 
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone = "GMT+8")
     private Date updateTime;
 
     public int getId() {

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/ErrorCommand.java
Patch:
@@ -85,13 +85,11 @@ public class ErrorCommand {
     /**
      * schedule time
      */
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss",timezone = "GMT+8")
     private Date scheduleTime;
 
     /**
      * start time
      */
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss",timezone = "GMT+8")
     private Date startTime;
 
     /**
@@ -102,7 +100,6 @@ public class ErrorCommand {
     /**
      * update time
      */
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss",timezone = "GMT+8")
     private Date updateTime;
 
     /**

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/MonitorRecord.java
Patch:
@@ -58,7 +58,6 @@ public class MonitorRecord {
     /**
      * start date
      */
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss",timezone="GMT+8")
     private Date date;
 
     public Flag getState() {

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/ProcessDefinition.java
Patch:
@@ -100,13 +100,11 @@ public class ProcessDefinition {
     /**
      * create time
      */
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone = "GMT+8")
     private Date createTime;
 
     /**
      * update time
      */
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone = "GMT+8")
     private Date updateTime;
 
     /**

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/ProcessDefinitionLog.java
Patch:
@@ -36,7 +36,6 @@ public class ProcessDefinitionLog extends ProcessDefinition {
     /**
      * operateTime
      */
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone = "GMT+8")
     private Date operateTime;
 
     public ProcessDefinitionLog() {

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/ProcessTaskRelation.java
Patch:
@@ -26,7 +26,6 @@
 import com.baomidou.mybatisplus.annotation.IdType;
 import com.baomidou.mybatisplus.annotation.TableId;
 import com.baomidou.mybatisplus.annotation.TableName;
-import com.fasterxml.jackson.annotation.JsonFormat;
 import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
 import com.fasterxml.jackson.databind.annotation.JsonSerialize;
 
@@ -97,13 +96,11 @@ public class ProcessTaskRelation {
     /**
      * create time
      */
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone = "GMT+8")
     private Date createTime;
 
     /**
      * update time
      */
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone = "GMT+8")
     private Date updateTime;
 
     public ProcessTaskRelation() {

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/ProcessTaskRelationLog.java
Patch:
@@ -36,7 +36,6 @@ public class ProcessTaskRelationLog extends ProcessTaskRelation {
     /**
      * operate time
      */
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone = "GMT+8")
     private Date operateTime;
 
     public ProcessTaskRelationLog() {

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/Queue.java
Patch:
@@ -46,12 +46,10 @@ public class Queue {
     /**
      * create time
      */
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss",timezone="GMT+8")
     private Date createTime;
     /**
      * update time
      */
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss",timezone="GMT+8")
     private Date updateTime;
 
     public int getId() {

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/Resource.java
Patch:
@@ -82,13 +82,11 @@ public class Resource {
     /**
      * create time
      */
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone = "GMT+8")
     private Date createTime;
 
     /**
      * update time
      */
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone = "GMT+8")
     private Date updateTime;
 
     public Resource() {

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/ResourcesUser.java
Patch:
@@ -53,13 +53,11 @@ public class ResourcesUser {
   /**
    * create time
    */
-  @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss",timezone="GMT+8")
   private Date createTime;
 
   /**
    * update time
    */
-  @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss",timezone="GMT+8")
   private Date updateTime;
 
   public int getId() {

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/Session.java
Patch:
@@ -43,7 +43,6 @@ public class Session {
     /**
      * last login time
      */
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss",timezone="GMT+8")
     private Date lastLoginTime;
 
     /**

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskAlertContent.java
Patch:
@@ -45,10 +45,8 @@ public class TaskAlertContent implements Serializable {
     private String processInstanceName;
     @JsonProperty("state")
     private ExecutionStatus state;
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone = "GMT+8")
     @JsonProperty("startTime")
     private Date startTime;
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone = "GMT+8")
     @JsonProperty("endTime")
     private Date endTime;
     @JsonProperty("host")

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinition.java
Patch:
@@ -38,7 +38,6 @@
 import com.baomidou.mybatisplus.annotation.TableField;
 import com.baomidou.mybatisplus.annotation.TableId;
 import com.baomidou.mybatisplus.annotation.TableName;
-import com.fasterxml.jackson.annotation.JsonFormat;
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
 import com.fasterxml.jackson.databind.annotation.JsonSerialize;
@@ -180,13 +179,11 @@ public class TaskDefinition {
     /**
      * create time
      */
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone = "GMT+8")
     private Date createTime;
 
     /**
      * update time
      */
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone = "GMT+8")
     private Date updateTime;
 
     /**

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java
Patch:
@@ -36,7 +36,6 @@ public class TaskDefinitionLog extends TaskDefinition {
     /**
      * operate time
      */
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone = "GMT+8")
     private Date operateTime;
 
     public TaskDefinitionLog() {

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskGroup.java
Patch:
@@ -23,7 +23,6 @@
 import com.baomidou.mybatisplus.annotation.IdType;
 import com.baomidou.mybatisplus.annotation.TableId;
 import com.baomidou.mybatisplus.annotation.TableName;
-import com.fasterxml.jackson.annotation.JsonFormat;
 
 /**
  * Task Group
@@ -60,12 +59,10 @@ public class TaskGroup implements Serializable {
     /**
      * create time
      */
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone = "GMT+8")
     private Date createTime;
     /**
      * update time
      */
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone = "GMT+8")
     private Date updateTime;
     /**
      * project Id

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskGroupQueue.java
Patch:
@@ -89,12 +89,10 @@ public class TaskGroupQueue implements Serializable {
     /**
      * create time
      */
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone = "GMT+8")
     private Date createTime;
     /**
      * update time
      */
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone = "GMT+8")
     private Date updateTime;
 
     public TaskGroupQueue() {

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskMainInfo.java
Patch:
@@ -52,13 +52,11 @@ public class TaskMainInfo {
     /**
      * create time
      */
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone = "GMT+8")
     private Date taskCreateTime;
 
     /**
      * update time
      */
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone = "GMT+8")
     private Date taskUpdateTime;
 
     /**

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskRecord.java
Patch:
@@ -48,13 +48,11 @@ public class TaskRecord {
     /**
      * start date
      */
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss",timezone="GMT+8")
     private Date startTime;
 
     /**
      * end date
      */
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss",timezone="GMT+8")
     private Date endTime;
 
     /**

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/Tenant.java
Patch:
@@ -67,12 +67,10 @@ public class Tenant {
     /**
      * create time
      */
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss",timezone="GMT+8")
     private Date createTime;
     /**
      * update time
      */
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss",timezone="GMT+8")
     private Date updateTime;
 
 

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/UDFUser.java
Patch:
@@ -53,13 +53,11 @@ public class UDFUser {
   /**
    * create time
    */
-  @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss",timezone="GMT+8")
   private Date createTime;
 
   /**
    * update time
    */
-  @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss",timezone="GMT+8")
   private Date updateTime;
 
   public int getId() {

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/UdfFunc.java
Patch:
@@ -90,13 +90,11 @@ public class UdfFunc {
     /**
      * create time
      */
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss",timezone="GMT+8")
     private Date createTime;
 
     /**
      * update time
      */
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss",timezone="GMT+8")
     private Date updateTime;
 
     public int getId() {

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/User.java
Patch:
@@ -104,13 +104,11 @@ public class  User {
     /**
      * create time
      */
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss",timezone="GMT+8")
     private Date createTime;
 
     /**
      * update time
      */
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss",timezone="GMT+8")
     private Date updateTime;
 
     public int getId() {

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkerGroup.java
Patch:
@@ -38,10 +38,8 @@ public class WorkerGroup {
 
     private String addrList;
 
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone = "GMT+8")
     private Date createTime;
 
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone = "GMT+8")
     private Date updateTime;
 
     @TableField(exist = false)

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkerServer.java
Patch:
@@ -51,13 +51,11 @@ public class WorkerServer {
     /**
      * create time
      */
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss",timezone="GMT+8")
     private Date createTime;
 
     /**
      * last heart beat time
      */
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss",timezone="GMT+8")
     private Date lastHeartbeatTime;
 
     public int getId() {

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/processor/queue/TaskResponseEvent.java
Patch:
@@ -49,13 +49,11 @@ public class TaskResponseEvent {
     /**
      * start time
      */
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss",timezone="GMT+8")
     private Date startTime;
 
     /**
      * end time
      */
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss",timezone="GMT+8")
     private Date endTime;
 
     /**

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/WorkflowExecuteThread.java
Patch:
@@ -706,7 +706,7 @@ private int createComplementDataCommand(Date scheduleDate) {
         if (cmdParam.containsKey(Constants.CMD_PARAM_RECOVERY_START_NODE_STRING)) {
             cmdParam.remove(Constants.CMD_PARAM_RECOVERY_START_NODE_STRING);
         }
-        cmdParam.replace(CMDPARAM_COMPLEMENT_DATA_START_DATE, DateUtils.format(scheduleDate, "yyyy-MM-dd HH:mm:ss"));
+        cmdParam.replace(CMDPARAM_COMPLEMENT_DATA_START_DATE, DateUtils.format(scheduleDate, "yyyy-MM-dd HH:mm:ss", null));
         command.setCommandParam(JSONUtils.toJsonString(cmdParam));
         command.setTaskDependType(processInstance.getTaskDependType());
         command.setFailureStrategy(processInstance.getFailureStrategy());

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/task/DependentTaskProcessor.java
Patch:
@@ -36,7 +36,6 @@
 import java.util.List;
 import java.util.Map;
 
-import com.fasterxml.jackson.annotation.JsonFormat;
 import com.google.auto.service.AutoService;
 
 /**
@@ -61,7 +60,6 @@ public class DependentTaskProcessor extends BaseTaskProcessor {
     /**
      * dependent date
      */
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone = "GMT+8")
     private Date dependentDate;
 
     DependResult result;

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/TaskExecuteAckCommand.java
Patch:
@@ -42,7 +42,6 @@ public class TaskExecuteAckCommand implements Serializable {
     /**
      * startTime
      */
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone = "GMT+8")
     private Date startTime;
 
     /**

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/TaskExecuteResponseCommand.java
Patch:
@@ -22,8 +22,6 @@
 import java.io.Serializable;
 import java.util.Date;
 
-import com.fasterxml.jackson.annotation.JsonFormat;
-
 /**
  *  execute task response command
  */
@@ -56,7 +54,6 @@ public TaskExecuteResponseCommand(int taskInstanceId, int processInstanceId) {
     /**
      *  end time
      */
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone = "GMT+8")
     private Date endTime;
 
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/utils/LogUtils.java
Patch:
@@ -63,7 +63,7 @@ public static String getTaskLogPath(Date firstSubmitTime, Long processDefineCode
             .map(TaskLogDiscriminator::getLogBase)
             .map(e -> Paths.get(e)
                 .toAbsolutePath()
-                .resolve(DateUtils.format(firstSubmitTime,Constants.YYYYMMDD))
+                .resolve(DateUtils.format(firstSubmitTime,Constants.YYYYMMDD, null))
                 .resolve(taskLogFileName))
             .map(Path::toString)
             .orElse("");

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/utils/LogUtilsTest.java
Patch:
@@ -65,7 +65,7 @@ public void testGetTaskLogPath() {
 
         Path logPath = Paths.get(".").toAbsolutePath().getParent()
                 .resolve(logBase)
-                .resolve(DateUtils.format(firstSubmitTime, Constants.YYYYMMDD))
+                .resolve(DateUtils.format(firstSubmitTime, Constants.YYYYMMDD, null))
                 .resolve("1_1-100-1000.log");
         Assert.assertEquals(logPath.toString(), LogUtils.getTaskLogPath(taskExecutionContext));
     }

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/queue/entity/TaskExecutionContext.java
Patch:
@@ -53,13 +53,11 @@ public class TaskExecutionContext implements Serializable {
     /**
      * task first submit time.
      */
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone = "GMT+8")
     private Date firstSubmitTime;
 
     /**
      * task start time
      */
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone = "GMT+8")
     private Date startTime;
 
     /**
@@ -116,7 +114,6 @@ public class TaskExecutionContext implements Serializable {
     /**
      * process instance schedule time
      */
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone = "GMT+8")
     private Date scheduleTime;
 
     /**

File: dolphinscheduler-spi/src/main/java/org/apache/dolphinscheduler/spi/task/request/UdfFuncRequest.java
Patch:
@@ -83,13 +83,11 @@ public class UdfFuncRequest {
     /**
      * create time
      */
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone = "GMT+8")
     private Date createTime;
 
     /**
      * update time
      */
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone = "GMT+8")
     private Date updateTime;
 
     public int getId() {

File: dolphinscheduler-spi/src/main/java/org/apache/dolphinscheduler/spi/utils/JSONUtils.java
Patch:
@@ -25,6 +25,7 @@
 import static com.fasterxml.jackson.databind.MapperFeature.REQUIRE_SETTERS_FOR_GETTERS;
 
 import java.io.IOException;
+import java.text.SimpleDateFormat;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
@@ -62,7 +63,8 @@ public class JSONUtils {
             .configure(ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT, true)
             .configure(READ_UNKNOWN_ENUM_VALUES_AS_NULL, true)
             .configure(REQUIRE_SETTERS_FOR_GETTERS, true)
-            .setTimeZone(TimeZone.getDefault());
+            .setTimeZone(TimeZone.getDefault())
+            .setDateFormat(new SimpleDateFormat(Constants.YYYY_MM_DD_HH_MM_SS));
 
     private JSONUtils() {
         throw new UnsupportedOperationException("Construct JSONUtils");

File: dolphinscheduler-task-plugin/dolphinscheduler-task-dataquality/src/main/java/org/apache/dolphinscheduler/plugin/task/dq/rule/entity/DqRuleExecuteSql.java
Patch:
@@ -55,12 +55,10 @@ public class DqRuleExecuteSql implements Serializable {
     /**
      * create_time
      */
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone = "GMT+8")
     private Date createTime;
     /**
      * update_time
      */
-    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone = "GMT+8")
     private Date updateTime;
 
     public int getId() {

File: dolphinscheduler-worker/src/main/java/org/apache/dolphinscheduler/server/worker/runner/TaskExecuteThread.java
Patch:
@@ -378,7 +378,7 @@ private void preBuildBusinessParams() {
         // replace variable TIME with $[YYYYmmddd...] in shell file when history run job and batch complement job
         if (taskExecutionContext.getScheduleTime() != null) {
             Date date = taskExecutionContext.getScheduleTime();
-            String dateTime = DateUtils.format(date, Constants.PARAMETER_FORMAT_TIME);
+            String dateTime = DateUtils.format(date, Constants.PARAMETER_FORMAT_TIME, null);
             Property p = new Property();
             p.setValue(dateTime);
             p.setProp(Constants.PARAMETER_DATETIME);

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/placeholder/BusinessTimeUtils.java
Patch:
@@ -53,7 +53,6 @@ public static Map<String, String> getBusinessTime(CommandType commandType, Date
                 if (runTime == null) {
                     return result;
                 }
-                break;
             case START_PROCESS:
             case START_CURRENT_TASK_PROCESS:
             case RECOVER_TOLERANCE_FAULT_PROCESS:

File: dolphinscheduler-spi/src/main/java/org/apache/dolphinscheduler/spi/task/TaskConstants.java
Patch:
@@ -24,6 +24,8 @@ private TaskConstants() {
     }
 
     public static final String APPLICATION_REGEX = "application_\\d+_\\d+";
+    
+    public static final String SETVALUE_REGEX = "\\$\\{setValue\\(([^)]*)\\)}";
 
     /**
      * string false
@@ -369,4 +371,5 @@ private TaskConstants() {
      * data.quality.error.output.path
      */
     public static final String DATA_QUALITY_ERROR_OUTPUT_PATH = "data-quality.error.output.path";
+
 }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/UsersController.java
Patch:
@@ -185,8 +185,9 @@ public Result updateUser(@ApiIgnore @RequestAttribute(value = Constants.SESSION_
                              @RequestParam(value = "email") String email,
                              @RequestParam(value = "tenantId") int tenantId,
                              @RequestParam(value = "phone", required = false) String phone,
-                             @RequestParam(value = "state", required = false) int state) throws Exception {
-        Map<String, Object> result = usersService.updateUser(loginUser, id, userName, userPassword, email, tenantId, phone, queue, state);
+                             @RequestParam(value = "state", required = false) int state,
+                             @RequestParam(value = "timeZone", required = false) String timeZone) throws Exception {
+        Map<String, Object> result = usersService.updateUser(loginUser, id, userName, userPassword, email, tenantId, phone, queue, state, timeZone);
         return returnDataList(result);
     }
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java
Patch:
@@ -380,6 +380,7 @@ public enum Status {
     TASK_GROUP_STATUS_OPENED(130019,"The task group has been opened.","任务组已经被开启"),
     NOT_ALLOW_TO_DISABLE_OWN_ACCOUNT(130020, "Not allow to disable your own account", "不能停用自己的账号"),
     NOT_ALLOW_TO_DELETE_DEFAULT_ALARM_GROUP(130030, "Not allow to delete the default alarm group ", "不能删除默认告警组"),
+    TIME_ZONE_ILLEGAL(130031, "time zone [{0}] is illegal", "时区参数 [{0}] 不合法"),
 
     QUERY_K8S_NAMESPACE_LIST_PAGING_ERROR(1300001, "login user query k8s namespace list paging error", "分页查询k8s名称空间列表错误"),
     K8S_NAMESPACE_EXIST(1300002, "k8s namespace {0} already exists", "k8s命名空间[{0}]已存在"),

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/UsersService.java
Patch:
@@ -130,7 +130,7 @@ User createUser(String userName, String userPassword, String email,
      * @throws Exception exception
      */
     Map<String, Object> updateUser(User loginUser, int userId, String userName, String userPassword, String email,
-                                   int tenantId, String phone, String queue, int state) throws IOException;
+                                   int tenantId, String phone, String queue, int state, String timeZone) throws IOException;
 
     /**
      * delete user

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/UsersServiceTest.java
Patch:
@@ -269,13 +269,13 @@ public void testUpdateUser() {
         String userPassword = "userTest0001";
         try {
             //user not exist
-            Map<String, Object> result = usersService.updateUser(getLoginUser(), 0, userName, userPassword, "3443@qq.com", 1, "13457864543", "queue", 1);
+            Map<String, Object> result = usersService.updateUser(getLoginUser(), 0, userName, userPassword, "3443@qq.com", 1, "13457864543", "queue", 1, "Asia/Shanghai");
             Assert.assertEquals(Status.USER_NOT_EXIST, result.get(Constants.STATUS));
             logger.info(result.toString());
 
             //success
             when(userMapper.selectById(1)).thenReturn(getUser());
-            result = usersService.updateUser(getLoginUser(), 1, userName, userPassword, "32222s@qq.com", 1, "13457864543", "queue", 1);
+            result = usersService.updateUser(getLoginUser(), 1, userName, userPassword, "32222s@qq.com", 1, "13457864543", "queue", 1, "Asia/Shanghai");
             logger.info(result.toString());
             Assert.assertEquals(Status.SUCCESS, result.get(Constants.STATUS));
         } catch (Exception e) {

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProcessDefinitionServiceImpl.java
Patch:
@@ -2133,8 +2133,7 @@ public Map<String, Object> releaseWorkflowAndSchedule(User loginUser, long proje
                 }
                 processDefinition.setReleaseState(releaseState);
                 processDefinitionMapper.updateById(processDefinition);
-                scheduleObj.setReleaseState(ReleaseState.ONLINE);
-                scheduleMapper.updateById(scheduleObj);
+                schedulerService.setScheduleState(loginUser, projectCode, scheduleObj.getId(), ReleaseState.ONLINE);
                 break;
             case OFFLINE:
                 processDefinition.setReleaseState(releaseState);

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessService.java
Patch:
@@ -2388,7 +2388,7 @@ public int saveProcessDefine(User operator, ProcessDefinition processDefinition,
         Integer version = processDefineLogMapper.queryMaxVersionForDefinition(processDefinition.getCode());
         int insertVersion = version == null || version == 0 ? Constants.VERSION_FIRST : version + 1;
         processDefinitionLog.setVersion(insertVersion);
-        processDefinitionLog.setReleaseState(isFromProcessDefine ? ReleaseState.OFFLINE : ReleaseState.ONLINE);
+        processDefinitionLog.setReleaseState(!isFromProcessDefine || processDefinitionLog.getReleaseState() == ReleaseState.ONLINE ? ReleaseState.ONLINE : ReleaseState.OFFLINE);
         processDefinitionLog.setOperator(operator.getId());
         processDefinitionLog.setOperateTime(processDefinition.getUpdateTime());
         int insertLog = processDefineLogMapper.insert(processDefinitionLog);

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-api/src/main/java/org/apache/dolphinscheduler/plugin/datasource/api/datasource/AbstractDataSourceProcessor.java
Patch:
@@ -35,7 +35,7 @@ public abstract class AbstractDataSourceProcessor implements DataSourceProcessor
 
     private static final Pattern DATABASE_PATTER = Pattern.compile("^[a-zA-Z0-9\\_\\-\\.]+$");
 
-    private static final Pattern PARAMS_PATTER = Pattern.compile("^[a-zA-Z0-9\\-\\_\\/]+$");
+    private static final Pattern PARAMS_PATTER = Pattern.compile("^[a-zA-Z0-9\\-\\_\\/\\@\\.]+$");
 
     @Override
     public void checkDatasourceParam(BaseDataSourceParamDTO baseDataSourceParamDTO) {

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProcessTaskRelationServiceImpl.java
Patch:
@@ -214,7 +214,7 @@ public Map<String, Object> deleteTaskProcessRelation(User loginUser, long projec
             return result;
         }
         List<Long> downstreamList = Lists.newArrayList();
-        for (ProcessTaskRelation processTaskRelation : processTaskRelationList) {
+        for (ProcessTaskRelation processTaskRelation : processTaskRelations) {
             if (processTaskRelation.getPreTaskCode() == taskCode) {
                 downstreamList.add(processTaskRelation.getPostTaskCode());
             }

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/WorkflowExecuteThread.java
Patch:
@@ -1463,10 +1463,10 @@ private ExecutionStatus getProcessInstanceState(ProcessInstance instance) {
         if (state == ExecutionStatus.READY_STOP) {
             List<TaskInstance> stopList = getCompleteTaskByState(ExecutionStatus.STOP);
             List<TaskInstance> killList = getCompleteTaskByState(ExecutionStatus.KILL);
-            List<TaskInstance> faillist = getCompleteTaskByState(ExecutionStatus.FAILURE);
+            List<TaskInstance> failList = getCompleteTaskByState(ExecutionStatus.FAILURE);
             if (CollectionUtils.isNotEmpty(stopList)
                 || CollectionUtils.isNotEmpty(killList)
-                || CollectionUtils.isNotEmpty(faillist)
+                || CollectionUtils.isNotEmpty(failList)
                 || !isComplementEnd()) {
                 return ExecutionStatus.STOP;
             } else {

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessService.java
Patch:
@@ -1162,7 +1162,7 @@ public TaskInstance submitTaskWithRetry(ProcessInstance processInstance, TaskIns
                 logger.error("task commit to db failed , taskId {} has already retry {} times, please check the database", taskInstance.getId(), retryTimes);
                 Thread.sleep(commitInterval);
             } catch (Exception e) {
-                logger.error("task commit to mysql failed", e);
+                logger.error("task commit to db failed", e);
             }
             retryTimes += 1;
         }

File: dolphinscheduler-alert/dolphinscheduler-alert-plugins/dolphinscheduler-alert-dingtalk/src/test/java/org/apache/dolphinscheduler/plugin/alert/dingtalk/DingTalkAlertChannelFactoryTest.java
Patch:
@@ -32,7 +32,7 @@ public void testGetParams() {
         DingTalkAlertChannelFactory dingTalkAlertChannelFactory = new DingTalkAlertChannelFactory();
         List<PluginParams> params = dingTalkAlertChannelFactory.params();
         JSONUtils.toJsonString(params);
-        Assert.assertEquals(11, params.size());
+        Assert.assertEquals(12, params.size());
     }
 
     @Test

File: dolphinscheduler-alert/dolphinscheduler-alert-plugins/dolphinscheduler-alert-dingtalk/src/test/java/org/apache/dolphinscheduler/plugin/alert/dingtalk/DingTalkSenderTest.java
Patch:
@@ -33,8 +33,10 @@ public class DingTalkSenderTest {
     @Before
     public void initDingTalkConfig() {
 
-        dingTalkConfig.put(DingTalkParamsConstants.NAME_DING_TALK_KEYWORD, "keyWord");
+        dingTalkConfig.put(DingTalkParamsConstants.NAME_DING_TALK_KEYWORD, "keyword");
         dingTalkConfig.put(DingTalkParamsConstants.NAME_DING_TALK_WEB_HOOK, "url");
+        dingTalkConfig.put(DingTalkParamsConstants.NAME_DING_TALK_MSG_TYPE, DingTalkParamsConstants.DING_TALK_MSG_TYPE_MARKDOWN);
+
         dingTalkConfig.put(DingTalkParamsConstants.NAME_DING_TALK_PROXY_ENABLE, "false");
         dingTalkConfig.put(DingTalkParamsConstants.NAME_DING_TALK_PASSWORD, "password");
         dingTalkConfig.put(DingTalkParamsConstants.NAME_DING_TALK_PORT, "9988");

File: dolphinscheduler-e2e/dolphinscheduler-e2e-case/src/test/java/org/apache/dolphinscheduler/e2e/cases/FunctionManageE2ETest.java
Patch:
@@ -142,7 +142,7 @@ void testCreateUdfFunction() {
         FunctionManagePage page = new FunctionManagePage(browser);
 
         new WebDriverWait(page.driver(), 10)
-            .until(ExpectedConditions.urlContains("/#/resource/func"));
+            .until(ExpectedConditions.elementToBeClickable(By.id("btnCreateUdfFunction")));
 
         page.createUdfFunction(testUdfFunctionName, testClassName, testUploadUdfFileName, testDescription);
 

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProcessDefinitionServiceTest.java
Patch:
@@ -727,6 +727,7 @@ private ProcessDefinition getProcessDefinition() {
         processDefinition.setTenantId(1);
         processDefinition.setDescription("");
         processDefinition.setCode(46L);
+        processDefinition.setVersion(1);
         return processDefinition;
     }
 

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/TaskParametersUtils.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.dolphinscheduler.common.task.conditions.ConditionsParameters;
 import org.apache.dolphinscheduler.common.task.datax.DataxParameters;
 import org.apache.dolphinscheduler.common.task.dependent.DependentParameters;
+import org.apache.dolphinscheduler.common.task.dq.DataQualityParameters;
 import org.apache.dolphinscheduler.common.task.flink.FlinkParameters;
 import org.apache.dolphinscheduler.common.task.http.HttpParameters;
 import org.apache.dolphinscheduler.common.task.mr.MapReduceParameters;
@@ -84,6 +85,8 @@ public static AbstractParameters getParameters(String taskType, String parameter
                 return JSONUtils.parseObject(parameter, ConditionsParameters.class);
             case "SQOOP":
                 return JSONUtils.parseObject(parameter, SqoopParameters.class);
+            case "DATA_QUALITY":
+                return JSONUtils.parseObject(parameter, DataQualityParameters.class);
             case "SWITCH":
                 return JSONUtils.parseObject(parameter, SwitchParameters.class);
             case "PIGEON":

File: dolphinscheduler-spi/src/main/java/org/apache/dolphinscheduler/spi/enums/DbType.java
Patch:
@@ -64,4 +64,7 @@ public static DbType of(int type) {
         return null;
     }
 
+    public boolean isHive() {
+        return this == DbType.HIVE;
+    }
 }

File: dolphinscheduler-spi/src/main/java/org/apache/dolphinscheduler/spi/params/base/ParamsOptions.java
Patch:
@@ -34,6 +34,8 @@ public class ParamsOptions {
      */
     private boolean disabled;
 
+    public ParamsOptions() {}
+
     public ParamsOptions(String label, Object value, boolean disabled) {
         this.label = label;
         this.value = value;

File: dolphinscheduler-spi/src/main/java/org/apache/dolphinscheduler/spi/utils/CollectionUtils.java
Patch:
@@ -164,5 +164,4 @@ public static <O> Map<O, Integer> getCardinalityMap(final Iterable<? extends O>
         }
         return count;
     }
-
 }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java
Patch:
@@ -319,6 +319,9 @@ public enum Status {
 
     KERBEROS_STARTUP_STATE(100001, "get kerberos startup state error", "获取kerberos启动状态错误"),
 
+    // audit log
+    QUERY_AUDIT_LOG_LIST_PAGING(10057, "query resources list paging", "分页查询资源列表错误"),
+
     //plugin
     PLUGIN_NOT_A_UI_COMPONENT(110001, "query plugin error, this plugin has no UI component", "查询插件错误，此插件无UI组件"),
     QUERY_PLUGINS_RESULT_IS_NULL(110002, "query plugins result is null", "查询插件为空"),

File: dolphinscheduler-alert/dolphinscheduler-alert-server/src/test/java/org/apache/dolphinscheduler/alert/AlertPluginManagerTest.java
Patch:
@@ -41,7 +41,7 @@ public class AlertPluginManagerTest extends TestCase {
     public void testAlertPluginManager() {
         Mockito.when(pluginDao.addOrUpdatePluginDefine(Mockito.any(PluginDefine.class))).thenReturn(0);
         
-        alertPluginManager.installPlugin();
+        alertPluginManager.installPlugin(null);
         
         Assert.assertEquals(1, alertPluginManager.size());
         

File: dolphinscheduler-alert/dolphinscheduler-alert-server/src/test/java/org/apache/dolphinscheduler/alert/AlertServerTest.java
Patch:
@@ -49,7 +49,7 @@ public void testStart() {
         
         Mockito.when(alertConfig.getPort()).thenReturn(50053);
         
-        alertServer.start();
+        alertServer.start(null);
     
         NettyRemotingServer nettyRemotingServer = Whitebox.getInternalState(alertServer, "server");
     

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/StateEventType.java
Patch:
@@ -26,6 +26,7 @@ public enum StateEventType {
     PROCESS_TIMEOUT(2, "process timeout"),
     TASK_TIMEOUT(3, "task timeout"),
     WAIT_TASK_GROUP(4, "wait task group"),
+    TASK_RETRY(5, "task retry")
     ;
 
     StateEventType(int code, String descp) {

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/task/BaseTaskProcessor.java
Patch:
@@ -204,8 +204,8 @@ public String getType() {
         return null;
     }
 
-    public ExecutionStatus taskState() {
-        return this.taskInstance.getState();
+    public TaskInstance taskInstance() {
+        return this.taskInstance;
     }
 
     /**

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/task/ITaskProcessor.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.dolphinscheduler.server.master.runner.task;
 
-import org.apache.dolphinscheduler.common.enums.ExecutionStatus;
 import org.apache.dolphinscheduler.dao.entity.ProcessInstance;
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
 
@@ -32,6 +31,6 @@ public interface ITaskProcessor {
 
     String getType();
 
-    ExecutionStatus taskState();
+    TaskInstance taskInstance();
 
 }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProcessDefinitionService.java
Patch:
@@ -20,8 +20,10 @@
 import org.apache.dolphinscheduler.api.utils.Result;
 import org.apache.dolphinscheduler.common.enums.ProcessExecutionTypeEnum;
 import org.apache.dolphinscheduler.common.enums.ReleaseState;
+import org.apache.dolphinscheduler.dao.entity.TaskDefinitionLog;
 import org.apache.dolphinscheduler.dao.entity.User;
 
+import java.util.List;
 import java.util.Map;
 
 import javax.servlet.http.HttpServletResponse;
@@ -260,7 +262,7 @@ Map<String, Object> importSqlProcessDefinition(User loginUser,
      * @param processTaskRelationJson process task relation json
      * @return check result code
      */
-    Map<String, Object> checkProcessNodeList(String processTaskRelationJson);
+    Map<String, Object> checkProcessNodeList(String processTaskRelationJson, List<TaskDefinitionLog> taskDefinitionLogs);
 
     /**
      * get task node details based on process definition

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProcessInstanceServiceImpl.java
Patch:
@@ -489,7 +489,7 @@ public Map<String, Object> updateProcessInstance(User loginUser, long projectCod
         ProcessDefinition processDefinition = processDefineMapper.queryByCode(processInstance.getProcessDefinitionCode());
         List<ProcessTaskRelationLog> taskRelationList = JSONUtils.toList(taskRelationJson, ProcessTaskRelationLog.class);
         //check workflow json is valid
-        result = processDefinitionService.checkProcessNodeList(taskRelationJson);
+        result = processDefinitionService.checkProcessNodeList(taskRelationJson, taskDefinitionLogs);
         if (result.get(Constants.STATUS) != Status.SUCCESS) {
             return result;
         }

File: dolphinscheduler-task-plugin/dolphinscheduler-task-datax/src/main/java/org/apache/dolphinscheduler/plugin/task/datax/DataxUtils.java
Patch:
@@ -19,6 +19,7 @@
 
 import org.apache.dolphinscheduler.spi.enums.DbType;
 
+import com.alibaba.druid.sql.dialect.clickhouse.parser.ClickhouseStatementParser;
 import com.alibaba.druid.sql.dialect.mysql.parser.MySqlStatementParser;
 import com.alibaba.druid.sql.dialect.oracle.parser.OracleStatementParser;
 import com.alibaba.druid.sql.dialect.postgresql.parser.PGSQLStatementParser;
@@ -91,6 +92,8 @@ public static SQLStatementParser getSqlStatementParser(DbType dbType, String sql
                 return new OracleStatementParser(sql);
             case SQLSERVER:
                 return new SQLServerStatementParser(sql);
+            case CLICKHOUSE:
+                return new ClickhouseStatementParser(sql);
             default:
                 return null;
         }

File: dolphinscheduler-python/src/main/java/org/apache/dolphinscheduler/server/PythonGatewayServer.java
Patch:
@@ -477,7 +477,7 @@ public Map<String, Object> getDependentInfo(String projectName, String processDe
 
     /**
      * Get resource by given program type and full name. It return map contain resource id, name.
-     * Useful in Python API create flink task which need processDefinition information.
+     * Useful in Python API create flink or spark task which need processDefinition information.
      *
      * @param programType program type one of SCALA, JAVA and PYTHON
      * @param fullName    full name of the resource

File: dolphinscheduler-worker/src/main/java/org/apache/dolphinscheduler/server/worker/processor/DBTaskAckProcessor.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
 import org.apache.dolphinscheduler.remote.command.*;
 import org.apache.dolphinscheduler.remote.processor.NettyRequestProcessor;
-import org.apache.dolphinscheduler.server.worker.cache.ResponceCache;
+import org.apache.dolphinscheduler.server.worker.cache.ResponseCache;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -49,7 +49,7 @@ public void process(Channel channel, Command command) {
         }
 
         if (taskAckCommand.getStatus() == ExecutionStatus.SUCCESS.getCode()){
-            ResponceCache.get().removeAckCache(taskAckCommand.getTaskInstanceId());
+            ResponseCache.get().removeAckCache(taskAckCommand.getTaskInstanceId());
         }
     }
 

File: dolphinscheduler-worker/src/main/java/org/apache/dolphinscheduler/server/worker/processor/DBTaskResponseProcessor.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.dolphinscheduler.remote.command.CommandType;
 import org.apache.dolphinscheduler.remote.command.DBTaskResponseCommand;
 import org.apache.dolphinscheduler.remote.processor.NettyRequestProcessor;
-import org.apache.dolphinscheduler.server.worker.cache.ResponceCache;
+import org.apache.dolphinscheduler.server.worker.cache.ResponseCache;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -52,7 +52,7 @@ public void process(Channel channel, Command command) {
         }
 
         if (taskResponseCommand.getStatus() == ExecutionStatus.SUCCESS.getCode()) {
-            ResponceCache.get().removeResponseCache(taskResponseCommand.getTaskInstanceId());
+            ResponseCache.get().removeResponseCache(taskResponseCommand.getTaskInstanceId());
             TaskCallbackService.remove(taskResponseCommand.getTaskInstanceId());
             logger.debug("remove REMOTE_CHANNELS, task instance id:{}", taskResponseCommand.getTaskInstanceId());
         }

File: dolphinscheduler-worker/src/main/java/org/apache/dolphinscheduler/server/worker/processor/TaskExecuteProcessor.java
Patch:
@@ -34,7 +34,7 @@
 import org.apache.dolphinscheduler.remote.processor.NettyRemoteChannel;
 import org.apache.dolphinscheduler.remote.processor.NettyRequestProcessor;
 import org.apache.dolphinscheduler.server.utils.LogUtils;
-import org.apache.dolphinscheduler.server.worker.cache.ResponceCache;
+import org.apache.dolphinscheduler.server.worker.cache.ResponseCache;
 import org.apache.dolphinscheduler.server.worker.config.WorkerConfig;
 import org.apache.dolphinscheduler.server.worker.plugin.TaskPluginManager;
 import org.apache.dolphinscheduler.server.worker.runner.TaskExecuteThread;
@@ -178,7 +178,7 @@ public void process(Channel channel, Command command) {
     private void doAck(TaskExecutionContext taskExecutionContext) {
         // tell master that task is in executing
         TaskExecuteAckCommand ackCommand = buildAckCommand(taskExecutionContext);
-        ResponceCache.get().cache(taskExecutionContext.getTaskInstanceId(), ackCommand.convert2Command(), Event.ACK);
+        ResponseCache.get().cache(taskExecutionContext.getTaskInstanceId(), ackCommand.convert2Command(), Event.ACK);
         taskCallbackService.sendAck(taskExecutionContext.getTaskInstanceId(), ackCommand.convert2Command());
     }
 

File: dolphinscheduler-worker/src/main/java/org/apache/dolphinscheduler/server/worker/runner/WorkerManagerThread.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.dolphinscheduler.common.thread.ThreadUtils;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
 import org.apache.dolphinscheduler.remote.command.TaskExecuteResponseCommand;
-import org.apache.dolphinscheduler.server.worker.cache.ResponceCache;
+import org.apache.dolphinscheduler.server.worker.cache.ResponseCache;
 import org.apache.dolphinscheduler.server.worker.config.WorkerConfig;
 import org.apache.dolphinscheduler.server.worker.processor.TaskCallbackService;
 import org.apache.dolphinscheduler.service.queue.entity.TaskExecutionContext;
@@ -107,7 +107,7 @@ private void sendTaskKillResponse(Integer taskInstanceId) {
         TaskExecutionContext taskExecutionContext = JSONUtils.parseObject(JSONUtils.toJsonString(taskRequest), TaskExecutionContext.class);
         TaskExecuteResponseCommand responseCommand = new TaskExecuteResponseCommand(taskExecutionContext.getTaskInstanceId(), taskExecutionContext.getProcessInstanceId());
         responseCommand.setStatus(ExecutionStatus.KILL.getCode());
-        ResponceCache.get().cache(taskExecutionContext.getTaskInstanceId(), responseCommand.convert2Command(), Event.RESULT);
+        ResponseCache.get().cache(taskExecutionContext.getTaskInstanceId(), responseCommand.convert2Command(), Event.RESULT);
         taskCallbackService.sendResult(taskExecutionContext.getTaskInstanceId(), responseCommand.convert2Command());
     }
 

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-api/src/main/java/org/apache/dolphinscheduler/plugin/datasource/api/provider/JDBCDataSourceProvider.java
Patch:
@@ -77,8 +77,9 @@ public static HikariDataSource createOneSessionJdbcDataSource(BaseConnectionPara
         dataSource.setUsername(properties.getUser());
         dataSource.setPassword(PasswordUtils.decodePassword(properties.getPassword()));
 
-        dataSource.setMinimumIdle(1);
-        dataSource.setMaximumPoolSize(1);
+        Boolean isOneSession = PropertyUtils.getBoolean(Constants.SUPPORT_HIVE_ONE_SESSION, false);
+        dataSource.setMinimumIdle(isOneSession ? 1 : PropertyUtils.getInt(Constants.SPRING_DATASOURCE_MIN_IDLE, 5));
+        dataSource.setMaximumPoolSize(isOneSession ? 1 : PropertyUtils.getInt(Constants.SPRING_DATASOURCE_MAX_ACTIVE, 50));
         dataSource.setConnectionTestQuery(properties.getValidationQuery());
 
         if (properties.getProps() != null) {

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProcessDefinitionServiceImpl.java
Patch:
@@ -1812,7 +1812,7 @@ public Map<String, Object> deleteProcessDefinitionVersion(User loginUser, long p
                 return result;
             }
             int deleteLog = processDefinitionLogMapper.deleteByProcessDefinitionCodeAndVersion(code, version);
-            int deleteRelationLog = processTaskRelationLogMapper.deleteByCode(processDefinition.getCode(), processDefinition.getVersion());
+            int deleteRelationLog = processTaskRelationLogMapper.deleteByCode(code, version);
             if (deleteLog == 0 || deleteRelationLog == 0) {
                 putMsg(result, Status.DELETE_PROCESS_DEFINE_BY_CODE_ERROR);
                 throw new ServiceException(Status.DELETE_PROCESS_DEFINE_BY_CODE_ERROR);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java
Patch:
@@ -366,6 +366,8 @@ public enum Status {
     UPDATE_ENVIRONMENT_WORKER_GROUP_RELATION_ERROR(130016,"You can't modify the worker group, because the worker group [{0}] and this environment [{1}] already be used in the task [{2}]",
             "您不能修改工作组选项，因为该工作组 [{0}] 和 该环境 [{1}] 已经被用在任务 [{2}] 中"),
     TASK_GROUP_QUEUE_ALREADY_START(130017, "task group queue already start", "节点已经获取任务组资源"),
+    TASK_GROUP_STATUS_CLOSED(130018,"The task group has been closed.","任务组已经被关闭"),
+    TASK_GROUP_STATUS_OPENED(130019,"The task group has been opened.","任务组已经被开启"),
     NOT_ALLOW_TO_DISABLE_OWN_ACCOUNT(130020, "Not allow to disable your own account", "不能停用自己的账号"),
     NOT_ALLOW_TO_DELETE_DEFAULT_ALARM_GROUP(130030, "Not allow to delete the default alarm group ", "不能删除默认告警组"),
     ;

File: dolphinscheduler-alert/dolphinscheduler-alert-plugins/dolphinscheduler-alert-dingtalk/src/main/java/org/apache/dolphinscheduler/plugin/alert/dingtalk/DingTalkParamsConstants.java
Patch:
@@ -27,6 +27,9 @@ public final class DingTalkParamsConstants {
     static final String DING_TALK_KEYWORD = "$t('keyword')";
     static final String NAME_DING_TALK_KEYWORD = "Keyword";
 
+    static final String DING_TALK_SECRET = "$t('secret')";
+    static final String NAME_DING_TALK_SECRET = "Secret";
+
     static final String DING_TALK_PROXY = "$t('proxy')";
     static final String NAME_DING_TALK_PROXY = "Proxy";
 

File: dolphinscheduler-alert/dolphinscheduler-alert-plugins/dolphinscheduler-alert-dingtalk/src/test/java/org/apache/dolphinscheduler/plugin/alert/dingtalk/DingTalkAlertChannelFactoryTest.java
Patch:
@@ -32,7 +32,7 @@ public void testGetParams() {
         DingTalkAlertChannelFactory dingTalkAlertChannelFactory = new DingTalkAlertChannelFactory();
         List<PluginParams> params = dingTalkAlertChannelFactory.params();
         JSONUtils.toJsonString(params);
-        Assert.assertEquals(7, params.size());
+        Assert.assertEquals(8, params.size());
     }
 
     @Test

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java
Patch:
@@ -367,6 +367,7 @@ public enum Status {
             "您不能修改工作组选项，因为该工作组 [{0}] 和 该环境 [{1}] 已经被用在任务 [{2}] 中"),
     TASK_GROUP_QUEUE_ALREADY_START(130017, "task group queue already start", "节点已经获取任务组资源"),
     NOT_ALLOW_TO_DISABLE_OWN_ACCOUNT(130020, "Not allow to disable your own account", "不能停用自己的账号"),
+    NOT_ALLOW_TO_DELETE_DEFAULT_ALARM_GROUP(130030, "Not allow to delete the default alarm group ", "不能删除默认告警组"),
     ;
 
     private final int code;

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/Pong.java
Patch:
@@ -38,7 +38,7 @@ public class Pong implements Serializable {
     private static final byte[] EMPTY_BODY_ARRAY = new byte[0];
 
     /**
-     *  ping byte buffer
+     *  pong byte buffer
      */
     private static final ByteBuf PONG_BUF;
 
@@ -53,10 +53,10 @@ public class Pong implements Serializable {
     }
 
     /**
-     *  ping content
+     *  pong content
      * @return result
      */
-    public static ByteBuf pingContent(){
+    public static ByteBuf pongContent(){
         return PONG_BUF.duplicate();
     }
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/TaskDefinitionServiceImpl.java
Patch:
@@ -137,7 +137,7 @@ public Map<String, Object> createTaskDefinition(User loginUser,
                 return result;
             }
         }
-        int saveTaskResult = processService.saveTaskDefine(loginUser, projectCode, taskDefinitionLogs);
+        int saveTaskResult = processService.saveTaskDefine(loginUser, projectCode, taskDefinitionLogs, Boolean.TRUE);
         if (saveTaskResult == Constants.DEFINITION_FAILURE) {
             putMsg(result, Status.CREATE_TASK_DEFINITION_ERROR);
             throw new ServiceException(Status.CREATE_TASK_DEFINITION_ERROR);
@@ -230,13 +230,13 @@ public Map<String, Object> createTaskBindsWorkFlow(User loginUser,
                 processTaskRelationLogList.addAll(processTaskRelationList.stream().map(ProcessTaskRelationLog::new).collect(Collectors.toList()));
             }
             int insertResult = processService.saveTaskRelation(loginUser, projectCode, processDefinition.getCode(), processDefinition.getVersion(),
-                processTaskRelationLogList, null);
+                processTaskRelationLogList, Lists.newArrayList(), Boolean.TRUE);
             if (insertResult != Constants.EXIT_CODE_SUCCESS) {
                 putMsg(result, Status.CREATE_PROCESS_TASK_RELATION_ERROR);
                 throw new ServiceException(Status.CREATE_PROCESS_TASK_RELATION_ERROR);
             }
         }
-        int saveTaskResult = processService.saveTaskDefine(loginUser, projectCode, Lists.newArrayList(taskDefinition));
+        int saveTaskResult = processService.saveTaskDefine(loginUser, projectCode, Lists.newArrayList(taskDefinition), Boolean.TRUE);
         if (saveTaskResult == Constants.DEFINITION_FAILURE) {
             putMsg(result, Status.CREATE_TASK_DEFINITION_ERROR);
             throw new ServiceException(Status.CREATE_TASK_DEFINITION_ERROR);

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProcessInstanceServiceTest.java
Patch:
@@ -424,7 +424,7 @@ public void testUpdateProcessInstance() {
         when(tenantMapper.queryByTenantCode("root")).thenReturn(tenant);
         when(processService.getTenantForProcess(Mockito.anyInt(), Mockito.anyInt())).thenReturn(tenant);
         when(processService.updateProcessInstance(processInstance)).thenReturn(1);
-        when(processService.saveProcessDefine(loginUser, processDefinition, false)).thenReturn(1);
+        when(processService.saveProcessDefine(loginUser, processDefinition, Boolean.TRUE, Boolean.FALSE)).thenReturn(1);
         when(processDefinitionService.checkProcessNodeList(shellJson)).thenReturn(result);
         putMsg(result, Status.SUCCESS, projectCode);
         Map<String, Object> processInstanceFinishRes = processInstanceService.updateProcessInstance(loginUser, projectCode, 1,
@@ -435,8 +435,9 @@ public void testUpdateProcessInstance() {
         when(processDefineMapper.queryByCode(46L)).thenReturn(processDefinition);
         putMsg(result, Status.SUCCESS, projectCode);
 
+        when(processService.saveProcessDefine(loginUser, processDefinition, Boolean.FALSE, Boolean.FALSE)).thenReturn(1);
         Map<String, Object> successRes = processInstanceService.updateProcessInstance(loginUser, projectCode, 1,
-            shellJson, taskJson,"2020-02-21 00:00:00", false, "", "", 0, "root");
+            shellJson, taskJson,"2020-02-21 00:00:00", Boolean.FALSE, "", "", 0, "root");
         Assert.assertEquals(Status.SUCCESS, successRes.get(Constants.STATUS));
     }
 

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/TaskDefinitionServiceImplTest.java
Patch:
@@ -97,7 +97,7 @@ public void createTaskDefinition() {
             + "\"workerGroup\":\"default\",\"failRetryTimes\":0,\"failRetryInterval\":0,\"timeoutFlag\":0,"
             + "\"timeoutNotifyStrategy\":0,\"timeout\":0,\"delayTime\":0,\"resourceIds\":\"\"}]";
         List<TaskDefinitionLog> taskDefinitions = JSONUtils.toList(createTaskDefinitionJson, TaskDefinitionLog.class);
-        Mockito.when(processService.saveTaskDefine(loginUser, projectCode, taskDefinitions)).thenReturn(1);
+        Mockito.when(processService.saveTaskDefine(loginUser, projectCode, taskDefinitions, Boolean.TRUE)).thenReturn(1);
         Map<String, Object> relation = taskDefinitionService
             .createTaskDefinition(loginUser, projectCode, createTaskDefinitionJson);
         Assert.assertEquals(Status.SUCCESS, relation.get(Constants.STATUS));

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/WorkflowExecuteThread.java
Patch:
@@ -716,7 +716,7 @@ private void buildFlowDag() throws Exception {
 
         List<TaskInstance> recoverNodeList = getStartTaskInstanceList(processInstance.getCommandParam());
 
-        List<ProcessTaskRelation> processTaskRelations = processService.findRelationByCode(processDefinition.getProjectCode(), processDefinition.getCode());
+        List<ProcessTaskRelation> processTaskRelations = processService.findRelationByCode(processDefinition.getCode(), processDefinition.getVersion());
         List<TaskDefinitionLog> taskDefinitionLogs = processService.getTaskDefineLogListByRelation(processTaskRelations);
         List<TaskNode> taskNodeList = processService.transformTask(processTaskRelations, taskDefinitionLogs);
         forbiddenTaskMap.clear();

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-api/src/main/java/org/apache/dolphinscheduler/plugin/datasource/api/datasource/oracle/OracleDataSourceProcessor.java
Patch:
@@ -65,14 +65,16 @@ public BaseDataSourceParamDTO createDatasourceParamDTO(String connectionJson) {
     public BaseConnectionParam createConnectionParams(BaseDataSourceParamDTO datasourceParam) {
         OracleDataSourceParamDTO oracleParam = (OracleDataSourceParamDTO) datasourceParam;
         String address;
+        String jdbcUrl;
         if (DbConnectType.ORACLE_SID.equals(oracleParam.getConnectType())) {
             address = String.format("%s%s:%s",
                     Constants.JDBC_ORACLE_SID, oracleParam.getHost(), oracleParam.getPort());
+            jdbcUrl = address + ":" + oracleParam.getDatabase();
         } else {
             address = String.format("%s%s:%s",
                     Constants.JDBC_ORACLE_SERVICE_NAME, oracleParam.getHost(), oracleParam.getPort());
+            jdbcUrl = address + "/" + oracleParam.getDatabase();
         }
-        String jdbcUrl = address + "/" + oracleParam.getDatabase();
 
         OracleConnectionParam oracleConnectionParam = new OracleConnectionParam();
         oracleConnectionParam.setUser(oracleParam.getUserName());

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java
Patch:
@@ -365,7 +365,8 @@ public enum Status {
     ENVIRONMENT_WORKER_GROUPS_IS_INVALID(130015, "environment worker groups is invalid format", "环境关联的工作组参数解析错误"),
     UPDATE_ENVIRONMENT_WORKER_GROUP_RELATION_ERROR(130016,"You can't modify the worker group, because the worker group [{0}] and this environment [{1}] already be used in the task [{2}]",
             "您不能修改工作组选项，因为该工作组 [{0}] 和 该环境 [{1}] 已经被用在任务 [{2}] 中"),
-    TASK_GROUP_QUEUE_ALREADY_START(130017, "task group queue already start", "节点已经获取任务组资源")
+    TASK_GROUP_QUEUE_ALREADY_START(130017, "task group queue already start", "节点已经获取任务组资源"),
+    NOT_ALLOW_TO_DISABLE_OWN_ACCOUNT(130020, "Not allow to disable your own account", "不能停用自己的账号"),
     ;
 
     private final int code;

File: dolphinscheduler-python/src/main/java/org/apache/dolphinscheduler/server/PythonGatewayServer.java
Patch:
@@ -503,7 +503,7 @@ public Map<String, Object> getResourcesFileInfo(String programType, String fullN
     public void run() {
         GatewayServer server = new GatewayServer(this);
         GatewayServer.turnLoggingOn();
-        // Start server to accept python client RPC
+        // Start server to accept python client socket
         server.start();
     }
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProcessDefinitionServiceImpl.java
Patch:
@@ -381,7 +381,7 @@ public Map<String, Object> queryProcessDefinitionSimpleList(User loginUser, long
             processDefinitionNode.put("id", processDefinition.getId());
             processDefinitionNode.put("code", processDefinition.getCode());
             processDefinitionNode.put("name", processDefinition.getName());
-            processDefinitionNode.put("projectCode", processDefinition.getCode());
+            processDefinitionNode.put("projectCode", processDefinition.getProjectCode());
             arrayNode.add(processDefinitionNode);
         }
         result.put(Constants.DATA_LIST, arrayNode);

File: dolphinscheduler-master/src/test/java/org/apache/dolphinscheduler/server/master/runner/task/TaskProcessorFactoryTest.java
Patch:
@@ -27,7 +27,7 @@
 public class TaskProcessorFactoryTest {
 
     @Test
-    public void testFactory() {
+    public void testFactory() throws InstantiationException, IllegalAccessException {
 
         TaskInstance taskInstance = new TaskInstance();
         taskInstance.setTaskType("shell");

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java
Patch:
@@ -166,7 +166,7 @@ public enum Status {
     NAME_EXIST(10135, "name {0} already exists", "名称[{0}]已存在"),
     SAVE_ERROR(10136, "save error", "保存错误"),
     DELETE_PROJECT_ERROR_DEFINES_NOT_NULL(10137, "please delete the process definitions in project first!", "请先删除全部工作流定义"),
-    BATCH_DELETE_PROCESS_INSTANCE_BY_IDS_ERROR(10117, "batch delete process instance by ids {0} error", "批量删除工作流实例错误"),
+    BATCH_DELETE_PROCESS_INSTANCE_BY_IDS_ERROR(10117, "batch delete process instance by ids {0} error", "批量删除工作流实例错误: {0}"),
     PREVIEW_SCHEDULE_ERROR(10139, "preview schedule error", "预览调度配置错误"),
     PARSE_TO_CRON_EXPRESSION_ERROR(10140, "parse cron to cron expression error", "解析调度表达式错误"),
     SCHEDULE_START_TIME_END_TIME_SAME(10141, "The start time must not be the same as the end", "开始时间不能和结束时间一样"),

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProcessInstanceServiceImpl.java
Patch:
@@ -612,13 +612,13 @@ public Map<String, Object> deleteProcessInstanceById(User loginUser, long projec
         }
         ProcessInstance processInstance = processService.findProcessInstanceDetailById(processInstanceId);
         if (null == processInstance) {
-            putMsg(result, Status.PROCESS_INSTANCE_NOT_EXIST, processInstanceId);
+            putMsg(result, Status.PROCESS_INSTANCE_NOT_EXIST, String.valueOf(processInstanceId));
             return result;
         }
 
         ProcessDefinition processDefinition = processDefineMapper.queryByCode(processInstance.getProcessDefinitionCode());
         if (processDefinition != null && projectCode != processDefinition.getProjectCode()) {
-            putMsg(result, Status.PROCESS_INSTANCE_NOT_EXIST, processInstanceId);
+            putMsg(result, Status.PROCESS_INSTANCE_NOT_EXIST, String.valueOf(processInstanceId));
             return result;
         }
 

File: dolphinscheduler-tools/src/main/java/org/apache/dolphinscheduler/tools/datasource/dao/ResourceDao.java
Patch:
@@ -18,7 +18,6 @@
 package org.apache.dolphinscheduler.tools.datasource.dao;
 
 import org.apache.dolphinscheduler.common.utils.ConnectionUtils;
-import org.apache.dolphinscheduler.dao.upgrade.ProcessDefinitionDao;
 
 import java.sql.Connection;
 import java.sql.PreparedStatement;
@@ -33,7 +32,7 @@
  * resource dao
  */
 public class ResourceDao {
-    public static final Logger logger = LoggerFactory.getLogger(ProcessDefinitionDao.class);
+    public static final Logger logger = LoggerFactory.getLogger(ResourceDao.class);
 
     /**
      * list all resources

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProcessInstanceServiceImpl.java
Patch:
@@ -632,6 +632,7 @@ public Map<String, Object> deleteProcessInstanceById(User loginUser, long projec
 
         processService.deleteAllSubWorkProcessByParentId(processInstanceId);
         processService.deleteWorkProcessMapByParentId(processInstanceId);
+        processService.deleteWorkTaskInstanceByProcessInstanceId(processInstanceId);
 
         if (delete > 0) {
             putMsg(result, Status.SUCCESS);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java
Patch:
@@ -294,7 +294,7 @@ public enum Status {
     PROJECT_PROCESS_NOT_MATCH(50054, "the project and the process is not match", "项目和工作流不匹配"),
     DELETE_EDGE_ERROR(50055, "delete edge error", "删除工作流任务连接线错误"),
     NOT_SUPPORT_UPDATE_TASK_DEFINITION(50056, "task state does not support modification", "当前任务不支持修改"),
-    NOT_SUPPORT_COPY_TASK_TYPE(50057, "task type [{}] does not support copy", "不支持复制的任务类型[{}]"),
+    NOT_SUPPORT_COPY_TASK_TYPE(50057, "task type [{0}] does not support copy", "不支持复制的任务类型[{0}]"),
     HDFS_NOT_STARTUP(60001, "hdfs not startup", "hdfs未启用"),
 
     /**

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessService.java
Patch:
@@ -1062,7 +1062,8 @@ private String joinGlobalParams(String parentGlobalParams, String subGlobalParam
 
         List<Property> parentPropertyList = JSONUtils.toList(parentGlobalParams, Property.class);
         List<Property> subPropertyList = JSONUtils.toList(subGlobalParams, Property.class);
-
+        subPropertyList = new ArrayList<>(subPropertyList);
+        
         Map<String, String> subMap = subPropertyList.stream().collect(Collectors.toMap(Property::getProp, Property::getValue));
 
         for (Property parent : parentPropertyList) {

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProcessDefinitionServiceImpl.java
Patch:
@@ -77,8 +77,6 @@
 
 import org.apache.commons.collections4.CollectionUtils;
 import org.apache.commons.lang3.StringUtils;
-import org.apache.hadoop.mapred.TaskLog.LogName;
-import org.apache.yetus.audience.InterfaceAudience.Public;
 
 import java.io.BufferedOutputStream;
 import java.io.IOException;
@@ -1398,6 +1396,7 @@ private void doBatchOperateProcessDefinition(User loginUser,
                         putMsg(result, Status.NOT_SUPPORT_COPY_TASK_TYPE, taskDefinitionLog.getTaskType());
                         throw new ServiceException(Status.NOT_SUPPORT_COPY_TASK_TYPE);
                     }
+                    taskDefinitionLog.setProjectCode(targetProjectCode);
                     taskDefinitionLog.setCode(0L);
                     taskDefinitionLog.setVersion(0);
                     taskDefinitionLog.setName(taskDefinitionLog.getName() + "_copy_" + DateUtils.getCurrentTimeStamp());

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/TaskGroupController.java
Patch:
@@ -180,11 +180,11 @@ public Result queryTaskGroupByStatus(@ApiIgnore @RequestAttribute(value = Consta
     }
 
     /**
-     * query task group list paging by project id
+     * query task group list paging by project code
      *
      * @param loginUser   login user
      * @param pageNo      page number
-     * @param projectCode project id
+     * @param projectCode project code
      * @param pageSize    page size
      * @return queue list
      */

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/TaskGroupService.java
Patch:
@@ -85,7 +85,7 @@ Map<String, Object> updateTaskGroup(User loginUser, int id, String name,
      * @param loginUser login user
      * @param pageNo    page no
      * @param pageSize  page size
-     * @param name      name
+     * @param projectCode  project code
      * @return the result code and msg
      */
     Map<String, Object> queryTaskGroupByProjectCode(User loginUser, int pageNo, int pageSize, Long projectCode);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/TaskGroupService.java
Patch:
@@ -35,7 +35,7 @@ public interface TaskGroupService {
      * @param groupSize   task group total size
      * @return the result code and msg
      */
-    Map<String, Object> createTaskGroup(User loginUser, long projectcode,String name,
+    Map<String, Object> createTaskGroup(User loginUser, Long projectCode, String name,
                                         String description, int groupSize);
 
     /**

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/TaskGroupServiceTest.java
Patch:
@@ -109,7 +109,7 @@ public void testCreate() {
         TaskGroup taskGroup = getTaskGroup();
         Mockito.when(taskGroupMapper.insert(taskGroup)).thenReturn(1);
         Mockito.when(taskGroupMapper.queryByName(loginUser.getId(), taskGroupName)).thenReturn(null);
-        Map<String, Object> result = taskGroupService.createTaskGroup(loginUser,0, taskGroupName, taskGroupDesc, 100);
+        Map<String, Object> result = taskGroupService.createTaskGroup(loginUser,0L, taskGroupName, taskGroupDesc, 100);
         Assert.assertNotNull(result);
 
     }

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskGroup.java
Patch:
@@ -56,7 +56,7 @@ public class TaskGroup implements Serializable {
     /**
      * 0 not available, 1 available
      */
-    private int status;
+    private Integer status;
     /**
      * create time
      */

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/task/ConditionTaskProcessor.java
Patch:
@@ -50,8 +50,6 @@ public class ConditionTaskProcessor extends BaseTaskProcessor {
      */
     private DependentParameters dependentParameters;
 
-    ProcessInstance processInstance;
-
     /**
      * condition result
      */

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/task/SubTaskProcessor.java
Patch:
@@ -36,8 +36,6 @@
  */
 public class SubTaskProcessor extends BaseTaskProcessor {
 
-    private ProcessInstance processInstance;
-
     private ProcessInstance subProcessInstance = null;
     private TaskDefinition taskDefinition;
 

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessService.java
Patch:
@@ -2691,6 +2691,8 @@ public TaskGroupQueue insertIntoTaskGroupQueue(Integer taskId,
                                                    String taskName, Integer groupId,
                                                    Integer processId, Integer priority, TaskGroupQueueStatus status) {
         TaskGroupQueue taskGroupQueue = new TaskGroupQueue(taskId, taskName, groupId, processId, priority, status);
+        taskGroupQueue.setCreateTime(new Date());
+        taskGroupQueue.setUpdateTime(new Date());
         taskGroupQueueMapper.insert(taskGroupQueue);
         return taskGroupQueue;
     }

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/registry/MasterRegistryDataListener.java
Patch:
@@ -63,7 +63,7 @@ public void handleMasterEvent(Event event) {
                 logger.info("master node added : {}", path);
                 break;
             case REMOVE:
-                masterRegistryClient.removeNodePath(path, NodeType.MASTER, true);
+                masterRegistryClient.removeMasterNodePath(path, NodeType.MASTER, true);
                 break;
             default:
                 break;
@@ -78,7 +78,7 @@ public void handleWorkerEvent(Event event) {
                 break;
             case REMOVE:
                 logger.info("worker node deleted : {}", path);
-                masterRegistryClient.removeNodePath(path, NodeType.WORKER, true);
+                masterRegistryClient.removeWorkerNodePath(path, NodeType.WORKER, true);
                 break;
             default:
                 break;

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/WorkflowExecuteThread.java
Patch:
@@ -623,6 +623,7 @@ private boolean processComplementData() throws Exception {
             processDefinition.getGlobalParamList(),
             CommandType.COMPLEMENT_DATA, processInstance.getScheduleTime()));
         processInstance.setStartTime(new Date());
+        processInstance.setRestartTime(processInstance.getStartTime());
         processInstance.setEndTime(null);
         processService.saveProcessInstance(processInstance);
         this.taskInstanceMap.clear();

File: dolphinscheduler-registry/dolphinscheduler-registry-api/src/main/java/org/apache/dolphinscheduler/registry/api/Registry.java
Patch:
@@ -20,6 +20,7 @@
 package org.apache.dolphinscheduler.registry.api;
 
 import java.io.Closeable;
+import java.time.Duration;
 import java.util.Collection;
 import java.util.Map;
 
@@ -43,4 +44,6 @@ public interface Registry extends Closeable {
     boolean acquireLock(String key);
 
     boolean releaseLock(String key);
+
+    Duration getSessionTimeout();
 }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/TaskDefinitionServiceImpl.java
Patch:
@@ -253,7 +253,7 @@ public Map<String, Object> updateTaskDefinition(User loginUser, long projectCode
             return result;
         }
         if (processService.isTaskOnline(taskCode) && taskDefinition.getFlag() == Flag.YES) {
-            putMsg(result, Status.NO_SUPPORT_UPDATE_TASK_DEFINITION);
+            putMsg(result, Status.NOT_SUPPORT_UPDATE_TASK_DEFINITION);
             return result;
         }
         TaskDefinitionLog taskDefinitionToUpdate = JSONUtils.parseObject(taskDefinitionJsonObj, TaskDefinitionLog.class);

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/task/DependentTaskProcessor.java
Patch:
@@ -69,7 +69,6 @@ public class DependentTaskProcessor extends BaseTaskProcessor {
 
     DependResult result;
 
-    ProcessInstance processInstance;
     TaskDefinition taskDefinition;
 
     private MasterConfig masterConfig = SpringApplicationContext.getBean(MasterConfig.class);;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java
Patch:
@@ -293,6 +293,7 @@ public enum Status {
     MAIN_TABLE_USING_VERSION(50053, "the version that the master table is using", "主表正在使用该版本"),
     PROJECT_PROCESS_NOT_MATCH(50054, "the project and the process is not match", "项目和工作流不匹配"),
     DELETE_EDGE_ERROR(50055, "delete edge error", "删除工作流任务连接线错误"),
+    NO_SUPPORT_UPDATE_TASK_DEFINITION(50056, "task state does not support modification", "当前任务不支持修改"),
     HDFS_NOT_STARTUP(60001, "hdfs not startup", "hdfs未启用"),
 
     /**

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/aspect/AccessLogAnnotation.java
Patch:
@@ -28,7 +28,7 @@
 @Documented
 public @interface AccessLogAnnotation {
     // ignore request args
-    String[] ignoreRequestArgs() default {};
+    String[] ignoreRequestArgs() default {"loginUser"};
 
     boolean ignoreRequest() default false;
 

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/TaskGroupMapper.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.dolphinscheduler.dao.mapper;
 
+import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
 import org.apache.dolphinscheduler.dao.entity.TaskGroup;
 
 import org.apache.ibatis.annotations.Param;
@@ -60,7 +61,7 @@ int releaseTaskGroupResource(@Param("id") int id, @Param("useSize") int useSize,
      * @return result page
      */
     IPage<TaskGroup> queryTaskGroupPaging(IPage<TaskGroup> page, @Param("userId") int userId,
-                                          @Param("name") String name, @Param("status") int status);
+                                          @Param("name") String name, @Param("status") Integer status);
 
     /**
      * query by task group name
@@ -75,4 +76,5 @@ IPage<TaskGroup> queryTaskGroupPaging(IPage<TaskGroup> page, @Param("userId") in
 
     int selectCountByIdStatus(@Param("id") int id,@Param("status") int status);
 
+    IPage<TaskGroup> queryTaskGroupPagingByProjectCode(Page<TaskGroup> page, @Param("projectCode") Long projectCode);
 }

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/TaskGroupMapperTest.java
Patch:
@@ -24,6 +24,7 @@
 
 import org.junit.Assert;
 import org.junit.Test;
+import org.mockito.Mock;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -44,6 +45,7 @@ public class TaskGroupMapperTest extends BaseDaoTest {
     public TaskGroup insertOne() {
         TaskGroup taskGroup = new TaskGroup();
         taskGroup.setName("task group");
+        taskGroup.setId(1);
         taskGroup.setUserId(1);
         taskGroup.setStatus(1);
         taskGroup.setGroupSize(10);
@@ -52,7 +54,7 @@ public TaskGroup insertOne() {
         taskGroup.setUpdateTime(date);
         taskGroup.setUpdateTime(date);
 
-        taskGroupMapper.insert(taskGroup);
+        int i = taskGroupMapper.insert(taskGroup);
         return taskGroup;
     }
 

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/TaskGroupQueueMapperTest.java
Patch:
@@ -26,6 +26,7 @@
 
 import org.junit.Assert;
 import org.junit.Test;
+import org.mockito.Mock;
 import org.springframework.beans.factory.annotation.Autowired;
 
 public class TaskGroupQueueMapperTest extends BaseDaoTest {

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessService.java
Patch:
@@ -2510,6 +2510,8 @@ public List<TaskNode> transformTask(List<ProcessTaskRelation> taskRelationList,
                         taskDefinitionLog.getTimeout())));
                 taskNode.setDelayTime(taskDefinitionLog.getDelayTime());
                 taskNode.setPreTasks(JSONUtils.toJsonString(code.getValue().stream().map(taskDefinitionLogMap::get).map(TaskDefinition::getCode).collect(Collectors.toList())));
+                taskNode.setTaskGroupId(taskDefinitionLog.getTaskGroupId());
+                taskNode.setTaskGroupPriority(taskDefinitionLog.getTaskGroupPriority());
                 taskNodeList.add(taskNode);
             }
         }

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/registry/MasterRegistryClient.java
Patch:
@@ -427,8 +427,7 @@ public void handleConnectionState(ConnectionState state) {
                 logger.debug("registry connection state is {}", state);
                 break;
             case SUSPENDED:
-                logger.warn("registry connection state is {}, ready to stop myself", state);
-                registryClient.getStoppable().stop("registry connection state is SUSPENDED, stop myself");
+                logger.warn("registry connection state is {}, ready to retry connection", state);
                 break;
             case RECONNECTED:
                 logger.debug("registry connection state is {}, clean the node info", state);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/aspect/AccessLogAnnotation.java
Patch:
@@ -28,7 +28,7 @@
 @Documented
 public @interface AccessLogAnnotation {
     // ignore request args
-    String[] ignoreRequestArgs() default {"loginUser"};
+    String[] ignoreRequestArgs() default {};
 
     boolean ignoreRequest() default false;
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/aspect/AccessLogAnnotation.java
Patch:
@@ -28,7 +28,7 @@
 @Documented
 public @interface AccessLogAnnotation {
     // ignore request args
-    String[] ignoreRequestArgs() default {};
+    String[] ignoreRequestArgs() default {"loginUser"};
 
     boolean ignoreRequest() default false;
 

File: dolphinscheduler-standalone-server/src/main/java/org/apache/dolphinscheduler/StandaloneServer.java
Patch:
@@ -17,6 +17,8 @@
 
 package org.apache.dolphinscheduler;
 
+import org.apache.dolphinscheduler.server.log.LoggerServer;
+
 import org.apache.curator.test.TestingServer;
 
 import org.springframework.boot.SpringApplication;
@@ -27,7 +29,7 @@ public class StandaloneServer {
     public static void main(String[] args) throws Exception {
         final TestingServer server = new TestingServer(true);
         System.setProperty("registry.zookeeper.connect-string", server.getConnectString());
-
+        new LoggerServer().start();
         SpringApplication.run(StandaloneServer.class, args);
     }
 }

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/WorkflowExecuteThread.java
Patch:
@@ -437,6 +437,8 @@ private void taskFinished(TaskInstance task) {
                 stateWheelExecuteThread.addTask4RetryCheck(task);
             } else {
                 submitStandByTask();
+                stateWheelExecuteThread.removeTask4TimeoutCheck(task);
+                stateWheelExecuteThread.removeTask4RetryCheck(task);
             }
             return;
         }

File: dolphinscheduler-e2e/dolphinscheduler-e2e-case/src/test/java/org/apache/dolphinscheduler/e2e/pages/LoginPage.java
Patch:
@@ -33,13 +33,13 @@
 
 @Getter
 public final class LoginPage extends NavBarPage {
-    @FindBy(id = "input-username")
+    @FindBy(id = "inputUsername")
     private WebElement inputUsername;
 
-    @FindBy(id = "input-password")
+    @FindBy(id = "inputPassword")
     private WebElement inputPassword;
 
-    @FindBy(id = "button-login")
+    @FindBy(id = "btnLogin")
     private WebElement buttonLogin;
 
     public LoginPage(RemoteWebDriver driver) {

File: dolphinscheduler-e2e/dolphinscheduler-e2e-case/src/test/java/org/apache/dolphinscheduler/e2e/pages/common/NavBarPage.java
Patch:
@@ -33,9 +33,9 @@
 public class NavBarPage {
     protected final RemoteWebDriver driver;
 
-    @FindBy(id = "project-tab")
+    @FindBy(id = "tabProject")
     private WebElement projectTab;
-    @FindBy(id = "security-tab")
+    @FindBy(id = "tabSecurity")
     private WebElement securityTab;
 
     public NavBarPage(RemoteWebDriver driver) {

File: dolphinscheduler-e2e/dolphinscheduler-e2e-case/src/test/java/org/apache/dolphinscheduler/e2e/pages/project/ProjectDetailPage.java
Patch:
@@ -31,9 +31,9 @@
 
 @Getter
 public final class ProjectDetailPage extends NavBarPage {
-    @FindBy(className = "process-definition")
+    @FindBy(className = "tab-process-definition")
     private WebElement menuProcessDefinition;
-    @FindBy(className = "process-instance")
+    @FindBy(className = "tab-process-instance")
     private WebElement menuProcessInstances;
 
     public ProjectDetailPage(RemoteWebDriver driver) {

File: dolphinscheduler-e2e/dolphinscheduler-e2e-case/src/test/java/org/apache/dolphinscheduler/e2e/pages/project/workflow/WorkflowForm.java
Patch:
@@ -42,7 +42,7 @@ public final class WorkflowForm {
     private final WebDriver driver;
     private final WorkflowSaveDialog saveForm;
 
-    @FindBy(id = "button-save")
+    @FindBy(id = "btnSave")
     private WebElement buttonSave;
 
     public WorkflowForm(WebDriver driver) {

File: dolphinscheduler-e2e/dolphinscheduler-e2e-case/src/test/java/org/apache/dolphinscheduler/e2e/pages/project/workflow/WorkflowRunDialog.java
Patch:
@@ -29,7 +29,7 @@
 public final class WorkflowRunDialog {
     private final WorkflowDefinitionTab parent;
 
-    @FindBy(id = "button-submit")
+    @FindBy(id = "btnSubmit")
     private WebElement buttonSubmit;
 
     public WorkflowRunDialog(WorkflowDefinitionTab parent) {

File: dolphinscheduler-e2e/dolphinscheduler-e2e-case/src/test/java/org/apache/dolphinscheduler/e2e/pages/project/workflow/WorkflowSaveDialog.java
Patch:
@@ -38,9 +38,9 @@ public final class WorkflowSaveDialog {
     private final WebDriver driver;
     private final WorkflowForm parent;
 
-    @FindBy(id = "input-name")
+    @FindBy(id = "inputName")
     private WebElement inputName;
-    @FindBy(id = "button-submit")
+    @FindBy(id = "btnSubmit")
     private WebElement buttonSubmit;
     @FindBys({
         @FindBy(className = "input-param-key"),
@@ -52,7 +52,7 @@ public final class WorkflowSaveDialog {
         @FindBy(tagName = "input"),
     })
     private List<WebElement> inputParamVal;
-    @FindBy(id = "select-tenant")
+    @FindBy(id = "selectTenant")
     private WebElement selectTenant;
 
     public WorkflowSaveDialog(WorkflowForm parent) {

File: dolphinscheduler-e2e/dolphinscheduler-e2e-case/src/test/java/org/apache/dolphinscheduler/e2e/pages/project/workflow/task/TaskNodeForm.java
Patch:
@@ -34,9 +34,9 @@
 
 @Getter
 public abstract class TaskNodeForm {
-    @FindBy(id = "input-node-name")
+    @FindBy(id = "inputNodeName")
     private WebElement inputNodeName;
-    @FindBy(id = "button-submit")
+    @FindBy(id = "btnSubmit")
     private WebElement buttonSubmit;
     @FindBys({
         @FindBy(className = "input-param-key"),

File: dolphinscheduler-e2e/dolphinscheduler-e2e-case/src/test/java/org/apache/dolphinscheduler/e2e/pages/security/SecurityPage.java
Patch:
@@ -30,7 +30,7 @@
 
 @Getter
 public class SecurityPage extends NavBarPage implements NavBarItem {
-    @FindBy(className = "tenant-manage")
+    @FindBy(className = "tab-tenant-manage")
     private WebElement menuTenantManage;
 
     public SecurityPage(RemoteWebDriver driver) {

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-api/src/main/java/org/apache/dolphinscheduler/plugin/datasource/api/provider/JDBCDataSourceProvider.java
Patch:
@@ -48,7 +48,7 @@ public static HikariDataSource createJdbcDataSource(BaseConnectionParam properti
         loaderJdbcDriver(classLoader, properties, dbType);
 
         dataSource.setDriverClassName(properties.getDriverClassName());
-        dataSource.setJdbcUrl(properties.getJdbcUrl());
+        dataSource.setJdbcUrl(DataSourceUtils.getJdbcUrl(dbType, properties));
         dataSource.setUsername(properties.getUser());
         dataSource.setPassword(PasswordUtils.decodePassword(properties.getPassword()));
 
@@ -67,13 +67,13 @@ public static HikariDataSource createJdbcDataSource(BaseConnectionParam properti
     /**
      * @return One Session Jdbc DataSource
      */
-    public static HikariDataSource createOneSessionJdbcDataSource(BaseConnectionParam properties) {
+    public static HikariDataSource createOneSessionJdbcDataSource(BaseConnectionParam properties, DbType dbType) {
         logger.info("Creating OneSession HikariDataSource pool for maxActive:{}", PropertyUtils.getInt(Constants.SPRING_DATASOURCE_MAX_ACTIVE, 50));
 
         HikariDataSource dataSource = new HikariDataSource();
 
         dataSource.setDriverClassName(properties.getDriverClassName());
-        dataSource.setJdbcUrl(properties.getJdbcUrl());
+        dataSource.setJdbcUrl(DataSourceUtils.getJdbcUrl(dbType, properties));
         dataSource.setUsername(properties.getUser());
         dataSource.setPassword(PasswordUtils.decodePassword(properties.getPassword()));
 

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-api/src/test/java/org/apache/dolphinscheduler/plugin/datasource/api/provider/JDBCDataSourceProviderTest.java
Patch:
@@ -46,8 +46,8 @@ public void testCreateJdbcDataSource() {
     public void testCreateOneSessionJdbcDataSource() {
         PowerMockito.mockStatic(JDBCDataSourceProvider.class);
         HikariDataSource dataSource = PowerMockito.mock(HikariDataSource.class);
-        PowerMockito.when(JDBCDataSourceProvider.createOneSessionJdbcDataSource(Mockito.any())).thenReturn(dataSource);
-        Assert.assertNotNull(JDBCDataSourceProvider.createOneSessionJdbcDataSource(new MySQLConnectionParam()));
+        PowerMockito.when(JDBCDataSourceProvider.createOneSessionJdbcDataSource(Mockito.any(), Mockito.any())).thenReturn(dataSource);
+        Assert.assertNotNull(JDBCDataSourceProvider.createOneSessionJdbcDataSource(new MySQLConnectionParam(), DbType.MYSQL));
     }
 
 }

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-hive/src/main/java/org/apache/dolphinscheduler/plugin/datasource/hive/HiveDataSourceClient.java
Patch:
@@ -79,7 +79,7 @@ protected void initClient(BaseConnectionParam baseConnectionParam, DbType dbType
         logger.info("Create ugi success.");
 
         super.initClient(baseConnectionParam, dbType);
-        this.oneSessionDataSource = JDBCDataSourceProvider.createOneSessionJdbcDataSource(baseConnectionParam);
+        this.oneSessionDataSource = JDBCDataSourceProvider.createOneSessionJdbcDataSource(baseConnectionParam, dbType);
         logger.info("Init {} success.", getClass().getName());
     }
 

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/runner/task/BaseTaskProcessor.java
Patch:
@@ -40,6 +40,7 @@
 import org.apache.dolphinscheduler.dao.entity.Tenant;
 import org.apache.dolphinscheduler.dao.entity.UdfFunc;
 import org.apache.dolphinscheduler.server.builder.TaskExecutionContextBuilder;
+import org.apache.dolphinscheduler.service.bean.SpringApplicationContext;
 import org.apache.dolphinscheduler.service.process.ProcessService;
 import org.apache.dolphinscheduler.service.queue.entity.TaskExecutionContext;
 import org.apache.dolphinscheduler.spi.enums.ResourceType;
@@ -61,7 +62,6 @@
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-import org.springframework.beans.factory.annotation.Autowired;
 
 import com.google.common.base.Enums;
 import com.google.common.base.Strings;
@@ -80,8 +80,7 @@ public abstract class BaseTaskProcessor implements ITaskProcessor {
 
     protected ProcessInstance processInstance;
 
-    @Autowired
-    protected ProcessService processService;
+    protected ProcessService processService = SpringApplicationContext.getBean(ProcessService.class);;
 
     /**
      * pause task, common tasks donot need this.

File: dolphinscheduler-master/src/test/java/org/apache/dolphinscheduler/server/master/WorkflowExecuteThreadTest.java
Patch:
@@ -111,7 +111,7 @@ public void init() throws Exception {
         Mockito.when(processInstance.getProcessDefinition()).thenReturn(processDefinition);
 
         stateWheelExecuteThread = mock(StateWheelExecuteThread.class);
-        workflowExecuteThread = PowerMockito.spy(new WorkflowExecuteThread(processInstance, processService, null, null, config, stateWheelExecuteThread, taskProcessorFactory));
+        workflowExecuteThread = PowerMockito.spy(new WorkflowExecuteThread(processInstance, processService, null, null, config, stateWheelExecuteThread));
         // prepareProcess init dag
         Field dag = WorkflowExecuteThread.class.getDeclaredField("dag");
         dag.setAccessible(true);

File: dolphinscheduler-master/src/test/java/org/apache/dolphinscheduler/server/master/runner/task/TaskProcessorFactoryTest.java
Patch:
@@ -26,14 +26,13 @@
 @Ignore
 public class TaskProcessorFactoryTest {
 
-    private TaskProcessorFactory taskProcessorFactory;
     @Test
     public void testFactory() {
 
         TaskInstance taskInstance = new TaskInstance();
         taskInstance.setTaskType("shell");
 
-        ITaskProcessor iTaskProcessor = taskProcessorFactory.getTaskProcessor(taskInstance.getTaskType());
+        ITaskProcessor iTaskProcessor = TaskProcessorFactory.getTaskProcessor(taskInstance.getTaskType());
 
         Assert.assertNotNull(iTaskProcessor);
     }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProcessDefinitionServiceImpl.java
Patch:
@@ -308,7 +308,7 @@ private Map<String, Object> checkTaskRelationList(List<ProcessTaskRelationLog> t
                 Set<Long> taskNodeCodes = taskNodeList.stream().map(TaskNode::getCode).collect(Collectors.toSet());
                 Collection<Long> codes = CollectionUtils.subtract(postTaskCodes, taskNodeCodes);
                 if (CollectionUtils.isNotEmpty(codes)) {
-                    logger.error("the task code is not exit");
+                    logger.error("the task code is not exist");
                     putMsg(result, Status.TASK_DEFINE_NOT_EXIST, org.apache.commons.lang.StringUtils.join(codes, Constants.COMMA));
                     return result;
                 }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java
Patch:
@@ -46,7 +46,7 @@ public enum Status {
     DATASOURCE_EXIST(10015, "data source name already exists", "数据源名称已存在"),
     DATASOURCE_CONNECT_FAILED(10016, "data source connection failed", "建立数据源连接失败"),
     TENANT_NOT_EXIST(10017, "tenant not exists", "租户不存在"),
-    PROJECT_NOT_FOUNT(10018, "project {0} not found ", "项目[{0}]不存在"),
+    PROJECT_NOT_FOUND(10018, "project {0} not found ", "项目[{0}]不存在"),
     PROJECT_ALREADY_EXISTS(10019, "project {0} already exists", "项目名称[{0}]已存在"),
     TASK_INSTANCE_NOT_EXISTS(10020, "task instance {0} does not exist", "任务实例[{0}]不存在"),
     TASK_INSTANCE_NOT_SUB_WORKFLOW_INSTANCE(10021, "task instance {0} is not sub process instance", "任务实例[{0}]不是子流程实例"),
@@ -214,6 +214,7 @@ public enum Status {
     CURRENT_LOGIN_USER_TENANT_NOT_EXIST(10181, "the tenant of the currently login user is not specified", "未指定当前登录用户的租户"),
     REVOKE_PROJECT_ERROR(10182, "revoke project error", "撤销项目授权错误"),
     QUERY_AUTHORIZED_USER(10183, "query authorized user error", "查询拥有项目权限的用户错误"),
+    PROJECT_NOT_EXIST(10190, "This project was not found. Please refresh page.", "该项目不存在,请刷新页面"),
 
     UDF_FUNCTION_NOT_EXIST(20001, "UDF function not found", "UDF函数不存在"),
     UDF_FUNCTION_EXISTS(20002, "UDF function already exists", "UDF函数已存在"),

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProjectServiceImpl.java
Patch:
@@ -166,7 +166,7 @@ public Map<String, Object> queryByName(User loginUser, String projectName) {
     public Map<String, Object> checkProjectAndAuth(User loginUser, Project project, long projectCode) {
         Map<String, Object> result = new HashMap<>();
         if (project == null) {
-            putMsg(result, Status.PROJECT_NOT_FOUNT, projectCode);
+            putMsg(result, Status.PROJECT_NOT_EXIST);
         } else if (!checkReadPermission(loginUser, project)) {
             // check read permission
             putMsg(result, Status.USER_NO_OPERATION_PROJECT_PERM, loginUser.getUserName(), projectCode);
@@ -180,7 +180,7 @@ public Map<String, Object> checkProjectAndAuth(User loginUser, Project project,
     public boolean hasProjectAndPerm(User loginUser, Project project, Map<String, Object> result) {
         boolean checkResult = false;
         if (project == null) {
-            putMsg(result, Status.PROJECT_NOT_FOUNT, "");
+            putMsg(result, Status.PROJECT_NOT_FOUND, "");
         } else if (!checkReadPermission(loginUser, project)) {
             putMsg(result, Status.USER_NO_OPERATION_PROJECT_PERM, loginUser.getUserName(), project.getCode());
         } else {
@@ -193,7 +193,7 @@ public boolean hasProjectAndPerm(User loginUser, Project project, Map<String, Ob
     public boolean hasProjectAndPerm(User loginUser, Project project, Result result) {
         boolean checkResult = false;
         if (project == null) {
-            putMsg(result, Status.PROJECT_NOT_FOUNT, "");
+            putMsg(result, Status.PROJECT_NOT_FOUND, "");
         } else if (!checkReadPermission(loginUser, project)) {
             putMsg(result, Status.USER_NO_OPERATION_PROJECT_PERM, loginUser.getUserName(), project.getName());
         } else {

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/UsersServiceImpl.java
Patch:
@@ -59,7 +59,6 @@
 
 import java.io.IOException;
 import java.text.MessageFormat;
-import java.util.Arrays;
 import java.util.ArrayList;
 import java.util.Date;
 import java.util.HashMap;
@@ -602,7 +601,7 @@ public Map<String, Object> grantProjectByCode(final User loginUser, final int us
         // 2. check if project is existed
         Project project = this.projectMapper.queryByCode(projectCode);
         if (project == null) {
-            this.putMsg(result, Status.PROJECT_NOT_FOUNT, projectCode);
+            this.putMsg(result, Status.PROJECT_NOT_FOUND, projectCode);
             return result;
         }
 
@@ -653,7 +652,7 @@ public Map<String, Object> revokeProject(User loginUser, int userId, long projec
         // 3. check if project is existed
         Project project = this.projectMapper.queryByCode(projectCode);
         if (project == null) {
-            this.putMsg(result, Status.PROJECT_NOT_FOUNT, projectCode);
+            this.putMsg(result, Status.PROJECT_NOT_FOUND, projectCode);
             return result;
         }
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/WorkFlowLineageServiceImpl.java
Patch:
@@ -70,7 +70,7 @@ public Map<String, Object> queryWorkFlowLineageByName(long projectCode, String w
         Map<String, Object> result = new HashMap<>();
         Project project = projectMapper.queryByCode(projectCode);
         if (project == null) {
-            putMsg(result, Status.PROJECT_NOT_FOUNT, projectCode);
+            putMsg(result, Status.PROJECT_NOT_FOUND, projectCode);
             return result;
         }
         List<WorkFlowLineage> workFlowLineageList = workFlowLineageMapper.queryWorkFlowLineageByName(projectCode, workFlowName);
@@ -84,7 +84,7 @@ public Map<String, Object> queryWorkFlowLineageByCode(long projectCode, long wor
         Map<String, Object> result = new HashMap<>();
         Project project = projectMapper.queryByCode(projectCode);
         if (project == null) {
-            putMsg(result, Status.PROJECT_NOT_FOUNT, projectCode);
+            putMsg(result, Status.PROJECT_NOT_FOUND, projectCode);
             return result;
         }
         Map<Long, WorkFlowLineage> workFlowLineagesMap = new HashMap<>();
@@ -133,7 +133,7 @@ public Map<String, Object> queryWorkFlowLineage(long projectCode) {
         Map<String, Object> result = new HashMap<>();
         Project project = projectMapper.queryByCode(projectCode);
         if (project == null) {
-            putMsg(result, Status.PROJECT_NOT_FOUNT, projectCode);
+            putMsg(result, Status.PROJECT_NOT_FOUND, projectCode);
             return result;
         }
         List<ProcessLineage> processLineages = workFlowLineageMapper.queryProcessLineage(projectCode);

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/ProcessInstanceControllerTest.java
Patch:
@@ -85,7 +85,7 @@ public void testQueryProcessInstanceList() throws Exception {
     @Test
     public void testQueryTaskListByProcessId() throws Exception {
         Map<String, Object> mockResult = new HashMap<>();
-        mockResult.put(Constants.STATUS, Status.PROJECT_NOT_FOUNT);
+        mockResult.put(Constants.STATUS, Status.PROJECT_NOT_FOUND);
         PowerMockito.when(processInstanceService.queryTaskListByProcessId(Mockito.any(), Mockito.anyLong(), Mockito.any()))
                 .thenReturn(mockResult);
 
@@ -97,7 +97,7 @@ public void testQueryTaskListByProcessId() throws Exception {
 
         Result result = JSONUtils.parseObject(mvcResult.getResponse().getContentAsString(), Result.class);
         Assert.assertNotNull(result);
-        Assert.assertEquals(Status.PROJECT_NOT_FOUNT.getCode(), result.getCode().intValue());
+        Assert.assertEquals(Status.PROJECT_NOT_FOUND.getCode(), result.getCode().intValue());
     }
 
     @Test

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/enums/StatusTest.java
Patch:
@@ -51,6 +51,6 @@ public void testGetStatusByCode() {
         // SUCCESS
         optional = Status.findStatusBy(10018);
         Assert.assertTrue(optional.isPresent());
-        Assert.assertEquals(Status.PROJECT_NOT_FOUNT, optional.get());
+        Assert.assertEquals(Status.PROJECT_NOT_FOUND, optional.get());
     }
 }

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/BaseServiceTest.java
Patch:
@@ -82,7 +82,7 @@ public void testPutMsg() {
         baseService.putMsg(result, Status.SUCCESS);
         Assert.assertEquals(Status.SUCCESS,result.get(Constants.STATUS));
         //has params
-        baseService.putMsg(result, Status.PROJECT_NOT_FOUNT,"test");
+        baseService.putMsg(result, Status.PROJECT_NOT_FOUND,"test");
 
     }
 
@@ -93,7 +93,7 @@ public void testPutMsgTwo() {
         baseService.putMsg(result, Status.SUCCESS);
         Assert.assertEquals(Status.SUCCESS.getMsg(),result.getMsg());
         //has params
-        baseService.putMsg(result,Status.PROJECT_NOT_FOUNT,"test");
+        baseService.putMsg(result,Status.PROJECT_NOT_FOUND,"test");
     }
 
     @Test

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/TaskInstanceServiceTest.java
Patch:
@@ -92,14 +92,14 @@ public void queryTaskListPaging() {
         User loginUser = getAdminUser();
         Project project = getProject(projectCode);
         Map<String, Object> result = new HashMap<>();
-        putMsg(result, Status.PROJECT_NOT_FOUNT, projectCode);
+        putMsg(result, Status.PROJECT_NOT_FOUND, projectCode);
 
         //project auth fail
         when(projectMapper.queryByCode(projectCode)).thenReturn(project);
         when(projectService.checkProjectAndAuth(loginUser, project, projectCode)).thenReturn(result);
         Result projectAuthFailRes = taskInstanceService.queryTaskListPaging(loginUser, projectCode, 0, "", "",
                 "test_user", "2019-02-26 19:48:00", "2019-02-26 19:48:22", "", null, "", 1, 20);
-        Assert.assertEquals(Status.PROJECT_NOT_FOUNT.getCode(), (int)projectAuthFailRes.getCode());
+        Assert.assertEquals(Status.PROJECT_NOT_FOUND.getCode(), (int)projectAuthFailRes.getCode());
 
         // data parameter check
         putMsg(result, Status.SUCCESS, projectCode);

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/UsersServiceTest.java
Patch:
@@ -357,7 +357,7 @@ public void testGrantProjectByCode() {
         // ERROR: PROJECT_NOT_FOUNT
         result = this.usersService.grantProjectByCode(loginUser, authorizer, 999);
         logger.info(result.toString());
-        Assert.assertEquals(Status.PROJECT_NOT_FOUNT, result.get(Constants.STATUS));
+        Assert.assertEquals(Status.PROJECT_NOT_FOUND, result.get(Constants.STATUS));
 
         // ERROR: USER_NO_OPERATION_PERM
         loginUser.setId(999);

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-hive/src/main/java/org/apache/dolphinscheduler/plugin/datasource/hive/HiveDataSourceClient.java
Patch:
@@ -19,6 +19,7 @@
 
 import static org.apache.dolphinscheduler.spi.task.TaskConstants.JAVA_SECURITY_KRB5_CONF;
 import static org.apache.dolphinscheduler.spi.task.TaskConstants.JAVA_SECURITY_KRB5_CONF_PATH;
+import static org.apache.dolphinscheduler.spi.task.TaskConstants.HADOOP_SECURITY_AUTHENTICATION_STARTUP_STATE;
 
 import org.apache.dolphinscheduler.plugin.datasource.api.client.CommonDataSourceClient;
 import org.apache.dolphinscheduler.plugin.datasource.api.provider.JDBCDataSourceProvider;
@@ -90,7 +91,8 @@ protected void checkEnv(BaseConnectionParam baseConnectionParam) {
 
     private void checkKerberosEnv() {
         String krb5File = PropertyUtils.getString(JAVA_SECURITY_KRB5_CONF_PATH);
-        if (StringUtils.isNotBlank(krb5File)) {
+        Boolean kerberosStartupState = PropertyUtils.getBoolean(HADOOP_SECURITY_AUTHENTICATION_STARTUP_STATE, false);
+        if (kerberosStartupState && StringUtils.isNotBlank(krb5File)) {
             System.setProperty(JAVA_SECURITY_KRB5_CONF, krb5File);
             try {
                 Config.refresh();

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-api/src/main/java/org/apache/dolphinscheduler/plugin/datasource/api/plugin/DataSourceClientProvider.java
Patch:
@@ -61,7 +61,7 @@ public Connection getConnection(DbType dbType, ConnectionParam connectionParam)
             if (null == dataSourceChannel) {
                 throw new RuntimeException(String.format("datasource plugin '%s' is not found", dbType.getDescp()));
             }
-            return dataSourceChannel.createDataSourceClient(baseConnectionParam);
+            return dataSourceChannel.createDataSourceClient(baseConnectionParam, dbType);
         });
         return dataSourceClient.getConnection();
     }

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-api/src/test/java/org/apache/dolphinscheduler/plugin/datasource/api/provider/JdbcDataSourceProviderTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.dolphinscheduler.plugin.datasource.api.provider;
 
 import org.apache.dolphinscheduler.plugin.datasource.api.datasource.mysql.MysqlConnectionParam;
+import org.apache.dolphinscheduler.spi.enums.DbType;
 
 import org.junit.Assert;
 import org.junit.Test;
@@ -37,8 +38,8 @@ public class JdbcDataSourceProviderTest {
     public void testCreateJdbcDataSource() {
         PowerMockito.mockStatic(JdbcDataSourceProvider.class);
         HikariDataSource dataSource = PowerMockito.mock(HikariDataSource.class);
-        PowerMockito.when(JdbcDataSourceProvider.createJdbcDataSource(Mockito.any())).thenReturn(dataSource);
-        Assert.assertNotNull(JdbcDataSourceProvider.createJdbcDataSource(new MysqlConnectionParam()));
+        PowerMockito.when(JdbcDataSourceProvider.createJdbcDataSource(Mockito.any(), Mockito.any())).thenReturn(dataSource);
+        Assert.assertNotNull(JdbcDataSourceProvider.createJdbcDataSource(new MysqlConnectionParam(), DbType.MYSQL));
     }
 
     @Test

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-clickhouse/src/main/java/org/apache/dolphinscheduler/plugin/datasource/clickhouse/ClickhouseDataSourceChannel.java
Patch:
@@ -20,11 +20,12 @@
 import org.apache.dolphinscheduler.spi.datasource.BaseConnectionParam;
 import org.apache.dolphinscheduler.spi.datasource.DataSourceChannel;
 import org.apache.dolphinscheduler.spi.datasource.DataSourceClient;
+import org.apache.dolphinscheduler.spi.enums.DbType;
 
 public class ClickhouseDataSourceChannel implements DataSourceChannel {
 
     @Override
-    public DataSourceClient createDataSourceClient(BaseConnectionParam baseConnectionParam) {
-        return new ClickhouseDataSourceClient(baseConnectionParam);
+    public DataSourceClient createDataSourceClient(BaseConnectionParam baseConnectionParam, DbType dbType) {
+        return new ClickhouseDataSourceClient(baseConnectionParam, dbType);
     }
 }

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-clickhouse/src/main/java/org/apache/dolphinscheduler/plugin/datasource/clickhouse/ClickhouseDataSourceClient.java
Patch:
@@ -19,11 +19,12 @@
 
 import org.apache.dolphinscheduler.plugin.datasource.api.client.CommonDataSourceClient;
 import org.apache.dolphinscheduler.spi.datasource.BaseConnectionParam;
+import org.apache.dolphinscheduler.spi.enums.DbType;
 
 public class ClickhouseDataSourceClient extends CommonDataSourceClient {
 
-    public ClickhouseDataSourceClient(BaseConnectionParam baseConnectionParam) {
-        super(baseConnectionParam);
+    public ClickhouseDataSourceClient(BaseConnectionParam baseConnectionParam, DbType dbType) {
+        super(baseConnectionParam, dbType);
     }
 
 }

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-clickhouse/src/test/java/org/apache/dolphinscheduler/plugin/datasource/clickhouse/ClickhouseDataSourceChannelTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.dolphinscheduler.plugin.datasource.clickhouse;
 
 import org.apache.dolphinscheduler.plugin.datasource.api.datasource.clickhouse.ClickhouseConnectionParam;
+import org.apache.dolphinscheduler.spi.enums.DbType;
 
 import org.junit.Assert;
 import org.junit.Test;
@@ -37,7 +38,7 @@ public class ClickhouseDataSourceChannelTest {
     public void testCreateDataSourceClient() {
         ClickhouseDataSourceChannel sourceChannel = PowerMockito.mock(ClickhouseDataSourceChannel.class);
         ClickhouseDataSourceClient dataSourceClient = PowerMockito.mock(ClickhouseDataSourceClient.class);
-        PowerMockito.when(sourceChannel.createDataSourceClient(Mockito.any())).thenReturn(dataSourceClient);
-        Assert.assertNotNull(sourceChannel.createDataSourceClient(new ClickhouseConnectionParam()));
+        PowerMockito.when(sourceChannel.createDataSourceClient(Mockito.any(), Mockito.any())).thenReturn(dataSourceClient);
+        Assert.assertNotNull(sourceChannel.createDataSourceClient(new ClickhouseConnectionParam(), DbType.CLICKHOUSE));
     }
 }

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-db2/src/main/java/org/apache/dolphinscheduler/plugin/datasource/db2/DB2DataSourceChannel.java
Patch:
@@ -20,11 +20,12 @@
 import org.apache.dolphinscheduler.spi.datasource.BaseConnectionParam;
 import org.apache.dolphinscheduler.spi.datasource.DataSourceChannel;
 import org.apache.dolphinscheduler.spi.datasource.DataSourceClient;
+import org.apache.dolphinscheduler.spi.enums.DbType;
 
 public class DB2DataSourceChannel implements DataSourceChannel {
 
     @Override
-    public DataSourceClient createDataSourceClient(BaseConnectionParam baseConnectionParam) {
-        return new DB2DataSourceClient(baseConnectionParam);
+    public DataSourceClient createDataSourceClient(BaseConnectionParam baseConnectionParam, DbType dbType) {
+        return new DB2DataSourceClient(baseConnectionParam, dbType);
     }
 }

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-db2/src/main/java/org/apache/dolphinscheduler/plugin/datasource/db2/DB2DataSourceClient.java
Patch:
@@ -19,11 +19,12 @@
 
 import org.apache.dolphinscheduler.plugin.datasource.api.client.CommonDataSourceClient;
 import org.apache.dolphinscheduler.spi.datasource.BaseConnectionParam;
+import org.apache.dolphinscheduler.spi.enums.DbType;
 
 public class DB2DataSourceClient extends CommonDataSourceClient {
 
-    public DB2DataSourceClient(BaseConnectionParam baseConnectionParam) {
-        super(baseConnectionParam);
+    public DB2DataSourceClient(BaseConnectionParam baseConnectionParam, DbType dbType) {
+        super(baseConnectionParam, dbType);
     }
 
 }

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-db2/src/test/java/org/apache/dolphinscheduler/plugin/datasource/db2/DB2DataSourceChannelTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.dolphinscheduler.plugin.datasource.db2;
 
 import org.apache.dolphinscheduler.plugin.datasource.api.datasource.db2.Db2ConnectionParam;
+import org.apache.dolphinscheduler.spi.enums.DbType;
 
 import org.junit.Assert;
 import org.junit.Test;
@@ -37,7 +38,7 @@ public class DB2DataSourceChannelTest {
     public void testCreateDataSourceClient() {
         DB2DataSourceChannel sourceChannel = PowerMockito.mock(DB2DataSourceChannel.class);
         DB2DataSourceClient dataSourceClient = PowerMockito.mock(DB2DataSourceClient.class);
-        PowerMockito.when(sourceChannel.createDataSourceClient(Mockito.any())).thenReturn(dataSourceClient);
-        Assert.assertNotNull(sourceChannel.createDataSourceClient(new Db2ConnectionParam()));
+        PowerMockito.when(sourceChannel.createDataSourceClient(Mockito.any(), Mockito.any())).thenReturn(dataSourceClient);
+        Assert.assertNotNull(sourceChannel.createDataSourceClient(new Db2ConnectionParam(), DbType.DB2));
     }
 }

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-hive/src/main/java/org/apache/dolphinscheduler/plugin/datasource/hive/HiveDataSourceChannel.java
Patch:
@@ -20,11 +20,12 @@
 import org.apache.dolphinscheduler.spi.datasource.BaseConnectionParam;
 import org.apache.dolphinscheduler.spi.datasource.DataSourceChannel;
 import org.apache.dolphinscheduler.spi.datasource.DataSourceClient;
+import org.apache.dolphinscheduler.spi.enums.DbType;
 
 public class HiveDataSourceChannel implements DataSourceChannel {
 
     @Override
-    public DataSourceClient createDataSourceClient(BaseConnectionParam baseConnectionParam) {
-        return new HiveDataSourceClient(baseConnectionParam);
+    public DataSourceClient createDataSourceClient(BaseConnectionParam baseConnectionParam, DbType dbType) {
+        return new HiveDataSourceClient(baseConnectionParam, dbType);
     }
 }

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-hive/src/test/java/org/apache/dolphinscheduler/plugin/datasource/hive/HiveDataSourceChannelTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.dolphinscheduler.plugin.datasource.hive;
 
 import org.apache.dolphinscheduler.plugin.datasource.api.datasource.hive.HiveConnectionParam;
+import org.apache.dolphinscheduler.spi.enums.DbType;
 
 import org.junit.Assert;
 import org.junit.Test;
@@ -37,7 +38,7 @@ public class HiveDataSourceChannelTest {
     public void testCreateDataSourceClient() {
         HiveDataSourceChannel sourceChannel = PowerMockito.mock(HiveDataSourceChannel.class);
         HiveDataSourceClient dataSourceClient = PowerMockito.mock(HiveDataSourceClient.class);
-        PowerMockito.when(sourceChannel.createDataSourceClient(Mockito.any())).thenReturn(dataSourceClient);
-        Assert.assertNotNull(sourceChannel.createDataSourceClient(new HiveConnectionParam()));
+        PowerMockito.when(sourceChannel.createDataSourceClient(Mockito.any(), Mockito.any())).thenReturn(dataSourceClient);
+        Assert.assertNotNull(sourceChannel.createDataSourceClient(new HiveConnectionParam(), DbType.HIVE));
     }
 }

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-mysql/src/main/java/org/apache/dolphinscheduler/plugin/datasource/mysql/MysqlDataSourceChannel.java
Patch:
@@ -20,11 +20,12 @@
 import org.apache.dolphinscheduler.spi.datasource.BaseConnectionParam;
 import org.apache.dolphinscheduler.spi.datasource.DataSourceChannel;
 import org.apache.dolphinscheduler.spi.datasource.DataSourceClient;
+import org.apache.dolphinscheduler.spi.enums.DbType;
 
 public class MysqlDataSourceChannel implements DataSourceChannel {
 
     @Override
-    public DataSourceClient createDataSourceClient(BaseConnectionParam baseConnectionParam) {
-        return new MysqlDataSourceClient(baseConnectionParam);
+    public DataSourceClient createDataSourceClient(BaseConnectionParam baseConnectionParam, DbType dbType) {
+        return new MysqlDataSourceClient(baseConnectionParam, dbType);
     }
 }

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-mysql/src/main/java/org/apache/dolphinscheduler/plugin/datasource/mysql/MysqlDataSourceClient.java
Patch:
@@ -19,11 +19,12 @@
 
 import org.apache.dolphinscheduler.plugin.datasource.api.client.CommonDataSourceClient;
 import org.apache.dolphinscheduler.spi.datasource.BaseConnectionParam;
+import org.apache.dolphinscheduler.spi.enums.DbType;
 
 public class MysqlDataSourceClient extends CommonDataSourceClient {
 
-    public MysqlDataSourceClient(BaseConnectionParam baseConnectionParam) {
-        super(baseConnectionParam);
+    public MysqlDataSourceClient(BaseConnectionParam baseConnectionParam, DbType dbType) {
+        super(baseConnectionParam, dbType);
     }
 
 }

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-mysql/src/test/java/org/apache/dolphinscheduler/plugin/datasource/mysql/MysqlDataSourceChannelTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.dolphinscheduler.plugin.datasource.mysql;
 
 import org.apache.dolphinscheduler.plugin.datasource.api.datasource.mysql.MysqlConnectionParam;
+import org.apache.dolphinscheduler.spi.enums.DbType;
 
 import org.junit.Assert;
 import org.junit.Test;
@@ -37,7 +38,7 @@ public class MysqlDataSourceChannelTest {
     public void testCreateDataSourceClient() {
         MysqlDataSourceChannel sourceChannel = PowerMockito.mock(MysqlDataSourceChannel.class);
         MysqlDataSourceClient dataSourceClient = PowerMockito.mock(MysqlDataSourceClient.class);
-        PowerMockito.when(sourceChannel.createDataSourceClient(Mockito.any())).thenReturn(dataSourceClient);
-        Assert.assertNotNull(sourceChannel.createDataSourceClient(new MysqlConnectionParam()));
+        PowerMockito.when(sourceChannel.createDataSourceClient(Mockito.any(), Mockito.any())).thenReturn(dataSourceClient);
+        Assert.assertNotNull(sourceChannel.createDataSourceClient(new MysqlConnectionParam(), DbType.MYSQL));
     }
 }

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-oracle/src/main/java/org/apache/dolphinscheduler/plugin/datasource/oracle/OracleDataSourceChannel.java
Patch:
@@ -20,11 +20,12 @@
 import org.apache.dolphinscheduler.spi.datasource.BaseConnectionParam;
 import org.apache.dolphinscheduler.spi.datasource.DataSourceChannel;
 import org.apache.dolphinscheduler.spi.datasource.DataSourceClient;
+import org.apache.dolphinscheduler.spi.enums.DbType;
 
 public class OracleDataSourceChannel implements DataSourceChannel {
 
     @Override
-    public DataSourceClient createDataSourceClient(BaseConnectionParam baseConnectionParam) {
-        return new OracleDataSourceClient(baseConnectionParam);
+    public DataSourceClient createDataSourceClient(BaseConnectionParam baseConnectionParam, DbType dbType) {
+        return new OracleDataSourceClient(baseConnectionParam, dbType);
     }
 }

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-oracle/src/main/java/org/apache/dolphinscheduler/plugin/datasource/oracle/OracleDataSourceClient.java
Patch:
@@ -19,11 +19,12 @@
 
 import org.apache.dolphinscheduler.plugin.datasource.api.client.CommonDataSourceClient;
 import org.apache.dolphinscheduler.spi.datasource.BaseConnectionParam;
+import org.apache.dolphinscheduler.spi.enums.DbType;
 
 public class OracleDataSourceClient extends CommonDataSourceClient {
 
-    public OracleDataSourceClient(BaseConnectionParam baseConnectionParam) {
-        super(baseConnectionParam);
+    public OracleDataSourceClient(BaseConnectionParam baseConnectionParam, DbType dbType) {
+        super(baseConnectionParam, dbType);
     }
 
 }

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-oracle/src/test/java/org/apache/dolphinscheduler/plugin/datasource/oracle/OracleDataSourceChannelTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.dolphinscheduler.plugin.datasource.oracle;
 
 import org.apache.dolphinscheduler.plugin.datasource.api.datasource.oracle.OracleConnectionParam;
+import org.apache.dolphinscheduler.spi.enums.DbType;
 
 import org.junit.Assert;
 import org.junit.Test;
@@ -37,7 +38,7 @@ public class OracleDataSourceChannelTest {
     public void testCreateDataSourceClient() {
         OracleDataSourceChannel sourceChannel = PowerMockito.mock(OracleDataSourceChannel.class);
         OracleDataSourceClient dataSourceClient = PowerMockito.mock(OracleDataSourceClient.class);
-        PowerMockito.when(sourceChannel.createDataSourceClient(Mockito.any())).thenReturn(dataSourceClient);
-        Assert.assertNotNull(sourceChannel.createDataSourceClient(new OracleConnectionParam()));
+        PowerMockito.when(sourceChannel.createDataSourceClient(Mockito.any(), Mockito.any())).thenReturn(dataSourceClient);
+        Assert.assertNotNull(sourceChannel.createDataSourceClient(new OracleConnectionParam(), DbType.ORACLE));
     }
 }

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-postgresql/src/main/java/org/apache/dolphinscheduler/plugin/datasource/postgresql/PostgresqlDataSourceChannel.java
Patch:
@@ -20,11 +20,12 @@
 import org.apache.dolphinscheduler.spi.datasource.BaseConnectionParam;
 import org.apache.dolphinscheduler.spi.datasource.DataSourceChannel;
 import org.apache.dolphinscheduler.spi.datasource.DataSourceClient;
+import org.apache.dolphinscheduler.spi.enums.DbType;
 
 public class PostgresqlDataSourceChannel implements DataSourceChannel {
 
     @Override
-    public DataSourceClient createDataSourceClient(BaseConnectionParam baseConnectionParam) {
-        return new PostgresqlDataSourceClient(baseConnectionParam);
+    public DataSourceClient createDataSourceClient(BaseConnectionParam baseConnectionParam, DbType dbType) {
+        return new PostgresqlDataSourceClient(baseConnectionParam, dbType);
     }
 }

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-postgresql/src/main/java/org/apache/dolphinscheduler/plugin/datasource/postgresql/PostgresqlDataSourceClient.java
Patch:
@@ -19,11 +19,12 @@
 
 import org.apache.dolphinscheduler.plugin.datasource.api.client.CommonDataSourceClient;
 import org.apache.dolphinscheduler.spi.datasource.BaseConnectionParam;
+import org.apache.dolphinscheduler.spi.enums.DbType;
 
 public class PostgresqlDataSourceClient extends CommonDataSourceClient {
 
-    public PostgresqlDataSourceClient(BaseConnectionParam baseConnectionParam) {
-        super(baseConnectionParam);
+    public PostgresqlDataSourceClient(BaseConnectionParam baseConnectionParam, DbType dbType) {
+        super(baseConnectionParam, dbType);
     }
 
 }

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-postgresql/src/test/java/org/apache/dolphinscheduler/plugin/datasource/postgresql/PostgresqlDataSourceChannelTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.dolphinscheduler.plugin.datasource.postgresql;
 
 import org.apache.dolphinscheduler.plugin.datasource.api.datasource.postgresql.PostgreSqlConnectionParam;
+import org.apache.dolphinscheduler.spi.enums.DbType;
 
 import org.junit.Assert;
 import org.junit.Test;
@@ -37,7 +38,7 @@ public class PostgresqlDataSourceChannelTest {
     public void testCreateDataSourceClient() {
         PostgresqlDataSourceChannel sourceChannel = PowerMockito.mock(PostgresqlDataSourceChannel.class);
         PostgresqlDataSourceClient dataSourceClient = PowerMockito.mock(PostgresqlDataSourceClient.class);
-        PowerMockito.when(sourceChannel.createDataSourceClient(Mockito.any())).thenReturn(dataSourceClient);
-        Assert.assertNotNull(sourceChannel.createDataSourceClient(new PostgreSqlConnectionParam()));
+        PowerMockito.when(sourceChannel.createDataSourceClient(Mockito.any(), Mockito.any())).thenReturn(dataSourceClient);
+        Assert.assertNotNull(sourceChannel.createDataSourceClient(new PostgreSqlConnectionParam(), DbType.POSTGRESQL));
     }
 }

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-sqlserver/src/main/java/org/apache/dolphinscheduler/plugin/datasource/sqlserver/SqlServerDataSourceChannel.java
Patch:
@@ -20,11 +20,12 @@
 import org.apache.dolphinscheduler.spi.datasource.BaseConnectionParam;
 import org.apache.dolphinscheduler.spi.datasource.DataSourceChannel;
 import org.apache.dolphinscheduler.spi.datasource.DataSourceClient;
+import org.apache.dolphinscheduler.spi.enums.DbType;
 
 public class SqlServerDataSourceChannel implements DataSourceChannel {
 
     @Override
-    public DataSourceClient createDataSourceClient(BaseConnectionParam baseConnectionParam) {
-        return new SqlserverDataSourceClient(baseConnectionParam);
+    public DataSourceClient createDataSourceClient(BaseConnectionParam baseConnectionParam, DbType dbType) {
+        return new SqlserverDataSourceClient(baseConnectionParam, dbType);
     }
 }

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-sqlserver/src/main/java/org/apache/dolphinscheduler/plugin/datasource/sqlserver/SqlserverDataSourceClient.java
Patch:
@@ -19,11 +19,12 @@
 
 import org.apache.dolphinscheduler.plugin.datasource.api.client.CommonDataSourceClient;
 import org.apache.dolphinscheduler.spi.datasource.BaseConnectionParam;
+import org.apache.dolphinscheduler.spi.enums.DbType;
 
 public class SqlserverDataSourceClient extends CommonDataSourceClient {
 
-    public SqlserverDataSourceClient(BaseConnectionParam baseConnectionParam) {
-        super(baseConnectionParam);
+    public SqlserverDataSourceClient(BaseConnectionParam baseConnectionParam, DbType dbType) {
+        super(baseConnectionParam, dbType);
     }
 
 }

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-sqlserver/src/test/java/org/apache/dolphinscheduler/plugin/datasource/sqlserver/SqlserverDataSourceChannelTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.dolphinscheduler.plugin.datasource.sqlserver;
 
 import org.apache.dolphinscheduler.plugin.datasource.api.datasource.sqlserver.SqlServerConnectionParam;
+import org.apache.dolphinscheduler.spi.enums.DbType;
 
 import org.junit.Assert;
 import org.junit.Test;
@@ -37,7 +38,7 @@ public class SqlserverDataSourceChannelTest {
     public void testCreateDataSourceClient() {
         SqlServerDataSourceChannel sourceChannel = PowerMockito.mock(SqlServerDataSourceChannel.class);
         SqlserverDataSourceClient dataSourceClient = PowerMockito.mock(SqlserverDataSourceClient.class);
-        PowerMockito.when(sourceChannel.createDataSourceClient(Mockito.any())).thenReturn(dataSourceClient);
-        Assert.assertNotNull(sourceChannel.createDataSourceClient(new SqlServerConnectionParam()));
+        PowerMockito.when(sourceChannel.createDataSourceClient(Mockito.any(), Mockito.any())).thenReturn(dataSourceClient);
+        Assert.assertNotNull(sourceChannel.createDataSourceClient(new SqlServerConnectionParam(), DbType.SQLSERVER));
     }
 }

File: dolphinscheduler-spi/src/main/java/org/apache/dolphinscheduler/spi/datasource/DataSourceChannel.java
Patch:
@@ -17,7 +17,9 @@
 
 package org.apache.dolphinscheduler.spi.datasource;
 
+import org.apache.dolphinscheduler.spi.enums.DbType;
+
 public interface DataSourceChannel {
 
-    DataSourceClient createDataSourceClient(BaseConnectionParam baseConnectionParam);
+    DataSourceClient createDataSourceClient(BaseConnectionParam baseConnectionParam, DbType dbType);
 }

File: dolphinscheduler-spi/src/main/java/org/apache/dolphinscheduler/spi/utils/Constants.java
Patch:
@@ -123,6 +123,7 @@ private Constants() {
      */
     public static final String ORG_POSTGRESQL_DRIVER = "org.postgresql.Driver";
     public static final String COM_MYSQL_CJ_JDBC_DRIVER = "com.mysql.cj.jdbc.Driver";
+    public static final String COM_MYSQL_JDBC_DRIVER = "com.mysql.jdbc.Driver";
     public static final String ORG_APACHE_HIVE_JDBC_HIVE_DRIVER = "org.apache.hive.jdbc.HiveDriver";
     public static final String COM_CLICKHOUSE_JDBC_DRIVER = "ru.yandex.clickhouse.ClickHouseDriver";
     public static final String COM_ORACLE_JDBC_DRIVER = "oracle.jdbc.OracleDriver";

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/DataSourceServiceTest.java
Patch:
@@ -328,9 +328,8 @@ public void buildParameter() {
         hiveDataSourceParamDTO.setLoginUserKeytabPath("/opt/hdfs.headless.keytab");
         hiveDataSourceParamDTO.setLoginUserKeytabUsername("test2/hdfs-mycluster@ESZ.COM");
         connectionParam = DataSourceUtils.buildConnectionParams(hiveDataSourceParamDTO);
-        expected = "{\"user\":\"test\",\"password\":\"test\",\"address\":\"jdbc:hive2://192.168.9.1:10000\",\"database\":\"im\",\"jdbcUrl\":\"jdbc:hive2://192.168.9.1:10000/im;"
-                + "principal=hive/hdfs-mycluster@ESZ.COM\",\"driverClassName\":\"org.apache.hive.jdbc.HiveDriver\",\"validationQuery\":\"select 1\",\"principal\":\"hive/hdfs-mycluster@ESZ.COM\","
-                + "\"javaSecurityKrb5Conf\":\"/opt/krb5.conf\",\"loginUserKeytabUsername\":\"test2/hdfs-mycluster@ESZ.COM\",\"loginUserKeytabPath\":\"/opt/hdfs.headless.keytab\"}";
+
+        expected = "{\"user\":\"test\",\"password\":\"test\",\"address\":\"jdbc:hive2://192.168.9.1:10000\",\"database\":\"im\",\"jdbcUrl\":\"jdbc:hive2://192.168.9.1:10000/im\",\"driverClassName\":\"org.apache.hive.jdbc.HiveDriver\",\"validationQuery\":\"select 1\",\"principal\":\"hive/hdfs-mycluster@ESZ.COM\",\"javaSecurityKrb5Conf\":\"/opt/krb5.conf\",\"loginUserKeytabUsername\":\"test2/hdfs-mycluster@ESZ.COM\",\"loginUserKeytabPath\":\"/opt/hdfs.headless.keytab\"}";
         Assert.assertEquals(expected, JSONUtils.toJsonString(connectionParam));
 
     }

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-api/src/main/java/org/apache/dolphinscheduler/plugin/datasource/api/datasource/hive/HiveDatasourceProcessor.java
Patch:
@@ -74,9 +74,6 @@ public BaseConnectionParam createConnectionParams(BaseDataSourceParamDTO datasou
         }
         address.deleteCharAt(address.length() - 1);
         String jdbcUrl = address.toString() + "/" + hiveParam.getDatabase();
-        if (CommonUtils.getKerberosStartupState()) {
-            jdbcUrl += ";principal=" + hiveParam.getPrincipal();
-        }
 
         HiveConnectionParam hiveConnectionParam = new HiveConnectionParam();
         hiveConnectionParam.setDatabase(hiveParam.getDatabase());

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-api/src/main/java/org/apache/dolphinscheduler/plugin/datasource/api/datasource/spark/SparkDatasourceProcessor.java
Patch:
@@ -77,9 +77,6 @@ public BaseConnectionParam createConnectionParams(BaseDataSourceParamDTO dataSou
         address.deleteCharAt(address.length() - 1);
 
         String jdbcUrl = address + "/" + sparkDatasourceParam.getDatabase();
-        if (CommonUtils.getKerberosStartupState()) {
-            jdbcUrl += ";principal=" + sparkDatasourceParam.getPrincipal();
-        }
 
         SparkConnectionParam sparkConnectionParam = new SparkConnectionParam();
         sparkConnectionParam.setPassword(PasswordUtils.encodePassword(sparkDatasourceParam.getPassword()));

File: dolphinscheduler-tools/src/main/java/org/apache/dolphinscheduler/tools/datasource/dao/UpgradeDao.java
Patch:
@@ -307,7 +307,7 @@ protected void updateProcessDefinitionJsonResourceList() {
     private void upgradeDolphinSchedulerDML(String schemaDir) {
         String schemaVersion = schemaDir.split("_")[0];
         Resource sqlFilePath = new ClassPathResource(String.format("sql/upgrade/%s/%s/dolphinscheduler_dml.sql", schemaDir, getDbType().name().toLowerCase()));
-        logger.info("sqlSQLFilePath" + sqlFilePath);
+        logger.info("sqlSQLFilePath: {}", sqlFilePath);
         Connection conn = null;
         PreparedStatement pstmt = null;
         try {

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/TenantMapper.java
Patch:
@@ -21,7 +21,6 @@
 
 import org.apache.ibatis.annotations.Param;
 
-import org.springframework.boot.context.properties.bind.Name;
 import org.springframework.cache.annotation.CacheConfig;
 import org.springframework.cache.annotation.CacheEvict;
 import org.springframework.cache.annotation.Cacheable;
@@ -53,8 +52,8 @@ public interface TenantMapper extends BaseMapper<Tenant> {
     /**
      * update
      */
-    @CacheEvict(key = "#tenant.id")
-    int updateById(@Name("tenant") @Param("et") Tenant tenant);
+    @CacheEvict(key = "#p0.id")
+    int updateById(@Param("et") Tenant tenant);
 
     /**
      * query tenant by code

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/UserMapper.java
Patch:
@@ -23,7 +23,6 @@
 
 import java.util.List;
 
-import org.springframework.boot.context.properties.bind.Name;
 import org.springframework.cache.annotation.CacheConfig;
 import org.springframework.cache.annotation.CacheEvict;
 import org.springframework.cache.annotation.Cacheable;
@@ -53,8 +52,8 @@ public interface UserMapper extends BaseMapper<User> {
     /**
      * update
      */
-    @CacheEvict(key = "#user.id")
-    int updateById(@Name("user") @Param("et") User user);
+    @CacheEvict(key = "#p0.id")
+    int updateById(@Param("et") User user);
 
     /**
      * query all general user
@@ -166,6 +165,7 @@ IPage<User> queryUserPaging(Page page,
 
     /**
      * query authed user list by projectId
+     *
      * @param projectId projectId
      * @return user list
      */

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/processor/TaskResponseProcessor.java
Patch:
@@ -34,10 +34,12 @@
 
 import io.netty.channel.Channel;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Component;
 
 /**
  * task response processor
  */
+@Component
 public class TaskResponseProcessor implements NettyRequestProcessor {
 
     private final Logger logger = LoggerFactory.getLogger(TaskResponseProcessor.class);

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/alert/ProcessAlertManager.java
Patch:
@@ -266,7 +266,6 @@ public void sendProcessTimeoutAlert(ProcessInstance processInstance, ProcessDefi
     }
 
     public void sendTaskTimeoutAlert(ProcessInstance processInstance, TaskInstance taskInstance, TaskDefinition taskDefinition) {
-        alertDao.sendTaskTimeoutAlert(processInstance.getWarningGroupId(), processInstance.getId(),processInstance.getName(),
-                taskInstance.getId(), taskInstance.getName());
+        alertDao.sendTaskTimeoutAlert(processInstance, taskInstance, taskDefinition);
     }
 }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/aspect/CacheEvictAspect.java
Patch:
@@ -127,7 +127,7 @@ private String parseKey(String key, List<String> paramNameList, List<Object> par
         SpelExpressionParser spelParser = new SpelExpressionParser();
         EvaluationContext ctx = new StandardEvaluationContext();
         for (int i = 0; i < paramNameList.size(); i++) {
-            ctx.setVariable(paramNameList.get(i), paramList.get(i));
+            ctx.setVariable("p" + i, paramList.get(i));
         }
         Object obj = spelParser.parseExpression(key).getValue(ctx);
         if (null == obj) {

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/AbstractControllerTest.java
Patch:
@@ -53,7 +53,6 @@
 /**
  * abstract controller test
  */
-@ActiveProfiles(value = {ProfileType.H2})
 @RunWith(SpringRunner.class)
 @SpringBootTest(classes = {ApiApplicationServer.class, DaoConfiguration.class, RegistryServer.class})
 @AutoConfigureMockMvc
@@ -112,12 +111,11 @@ public void putMsg(Map<String, Object> result, Status status, Object... statusPa
     }
 
     @Configuration
-    @Profile(ProfileType.H2)
     public static class RegistryServer {
         @PostConstruct
         public void startEmbedRegistryServer() throws Exception {
             final TestingServer server = new TestingServer(true);
-            System.setProperty("registry.servers", server.getConnectString());
+            System.setProperty("registry.zookeeper.connect-string", server.getConnectString());
         }
     }
 }

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/datasource/SpringConnectionFactory.java
Patch:
@@ -19,15 +19,13 @@
 
 import org.apache.ibatis.mapping.DatabaseIdProvider;
 import org.apache.ibatis.mapping.VendorDatabaseIdProvider;
-import org.apache.ibatis.session.SqlSession;
 import org.apache.ibatis.session.SqlSessionFactory;
 import org.apache.ibatis.type.JdbcType;
 
 import java.util.Properties;
 
 import javax.sql.DataSource;
 
-import org.mybatis.spring.SqlSessionTemplate;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.core.io.support.PathMatchingResourcePatternResolver;
@@ -69,7 +67,7 @@ public SqlSessionFactory sqlSessionFactory(DataSource dataSource) throws Excepti
 
         GlobalConfig.DbConfig dbConfig = new GlobalConfig.DbConfig();
         dbConfig.setIdType(IdType.AUTO);
-        GlobalConfig globalConfig = new GlobalConfig();
+        GlobalConfig globalConfig = new GlobalConfig().setBanner(false);
         globalConfig.setDbConfig(dbConfig);
         sqlSessionFactoryBean.setGlobalConfig(globalConfig);
         sqlSessionFactoryBean.setTypeAliasesPackage("org.apache.dolphinscheduler.dao.entity");

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/ProcessDefinitionMapper.java
Patch:
@@ -53,7 +53,7 @@ public interface ProcessDefinitionMapper extends BaseMapper<ProcessDefinition> {
     /**
      * update
      */
-    @CacheEvict(key = "#processDefinition.code")
+    @CacheEvict(key = "#p0.code")
     int updateById(@Name("processDefinition") @Param("et") ProcessDefinition processDefinition);
 
     /**

File: dolphinscheduler-e2e/dolphinscheduler-e2e-case/src/test/java/org/apache/dolphinscheduler/e2e/cases/ProjectE2ETest.java
Patch:
@@ -53,7 +53,7 @@ void testCreateProject() {
     @Test
     @Order(30)
     void testDeleteProject() {
-        final var page = new ProjectPage(browser);
+        final ProjectPage page = new ProjectPage(browser);
         page.delete(project);
 
         await().untilAsserted(() -> {

File: dolphinscheduler-e2e/dolphinscheduler-e2e-case/src/test/java/org/apache/dolphinscheduler/e2e/cases/TenantE2ETest.java
Patch:
@@ -58,7 +58,7 @@ void testCreateTenant() {
     @Test
     @Order(20)
     void testCreateDuplicateTenant() {
-        final var page = new TenantPage(browser);
+        final TenantPage page = new TenantPage(browser);
 
         page.create(tenant);
 
@@ -73,7 +73,7 @@ void testCreateDuplicateTenant() {
     @Test
     @Order(30)
     void testDeleteTenant() {
-        final var page = new TenantPage(browser);
+        final TenantPage page = new TenantPage(browser);
         page.delete(tenant);
 
         await().untilAsserted(() -> {

File: dolphinscheduler-log-server/src/test/java/org/apache/dolphinscheduler/server/log/LoggerRequestProcessorTest.java
Patch:
@@ -24,7 +24,6 @@
 import org.apache.dolphinscheduler.remote.command.log.ViewLogRequestCommand;
 
 import org.junit.Test;
-import org.junit.Test.None;
 import org.junit.runner.RunWith;
 import org.mockito.Mockito;
 import org.powermock.api.mockito.PowerMockito;
@@ -37,7 +36,7 @@
 @PrepareForTest({LoggerUtils.class})
 public class LoggerRequestProcessorTest {
 
-    @Test(expected = None.class)
+    @Test
     public void testProcessViewWholeLogRequest() {
         Channel channel = PowerMockito.mock(Channel.class);
         PowerMockito.when(channel.writeAndFlush(Mockito.any(Command.class))).thenReturn(null);
@@ -53,4 +52,4 @@ public void testProcessViewWholeLogRequest() {
         LoggerRequestProcessor loggerRequestProcessor = new LoggerRequestProcessor();
         loggerRequestProcessor.process(channel, command);
     }
-}
\ No newline at end of file
+}

File: dolphinscheduler-master/src/main/java/org/apache/dolphinscheduler/server/master/processor/queue/StateEventResponseService.java
Patch:
@@ -108,7 +108,6 @@ public void run() {
                     StateEvent stateEvent = eventQueue.take();
                     persist(stateEvent);
                 } catch (InterruptedException e) {
-                    logger.warn("persist task error", e);
                     Thread.currentThread().interrupt();
                     break;
                 }

File: dolphinscheduler-master/src/test/java/org/apache/dolphinscheduler/server/master/dispatch/ExecutionContextTestUtils.java
Patch:
@@ -14,8 +14,8 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.server.utils;
 
+package org.apache.dolphinscheduler.server.master.dispatch;
 
 import org.apache.dolphinscheduler.common.enums.CommandType;
 import org.apache.dolphinscheduler.common.utils.NetUtils;
@@ -34,8 +34,6 @@
  * for test use only
  */
 public class ExecutionContextTestUtils {
-
-
     public static ExecutionContext getExecutionContext(int port){
         TaskInstance taskInstance = Mockito.mock(TaskInstance.class);
         ProcessDefinition processDefinition = Mockito.mock(ProcessDefinition.class);

File: dolphinscheduler-master/src/test/java/org/apache/dolphinscheduler/server/master/dispatch/ExecutorDispatcherTest.java
Patch:
@@ -21,7 +21,6 @@
 import org.apache.dolphinscheduler.remote.config.NettyServerConfig;
 import org.apache.dolphinscheduler.server.master.dispatch.context.ExecutionContext;
 import org.apache.dolphinscheduler.server.master.dispatch.exceptions.ExecuteException;
-import org.apache.dolphinscheduler.server.utils.ExecutionContextTestUtils;
 import org.apache.dolphinscheduler.server.worker.config.WorkerConfig;
 import org.apache.dolphinscheduler.server.worker.processor.TaskExecuteProcessor;
 import org.apache.dolphinscheduler.server.worker.registry.WorkerRegistryClient;

File: dolphinscheduler-master/src/test/java/org/apache/dolphinscheduler/server/master/dispatch/host/RoundRobinHostManagerTest.java
Patch:
@@ -18,9 +18,9 @@
 package org.apache.dolphinscheduler.server.master.dispatch.host;
 
 import org.apache.dolphinscheduler.remote.utils.Host;
+import org.apache.dolphinscheduler.server.master.dispatch.ExecutionContextTestUtils;
 import org.apache.dolphinscheduler.server.master.dispatch.context.ExecutionContext;
 import org.apache.dolphinscheduler.server.master.registry.ServerNodeManager;
-import org.apache.dolphinscheduler.server.utils.ExecutionContextTestUtils;
 
 import org.apache.commons.lang.StringUtils;
 
@@ -34,7 +34,6 @@
 
 import com.google.common.collect.Sets;
 
-
 /**
  * round robin host manager test
  */

File: dolphinscheduler-master/src/test/java/org/apache/dolphinscheduler/server/master/runner/task/TaskProcessorFactoryTest.java
Patch:
@@ -38,4 +38,4 @@ public void testFactory() {
         Assert.assertNotNull(iTaskProcessor);
     }
 
-}
\ No newline at end of file
+}

File: dolphinscheduler-registry/dolphinscheduler-registry-api/src/main/java/org/apache/dolphinscheduler/registry/api/Registry.java
Patch:
@@ -24,8 +24,6 @@
 import java.util.Map;
 
 public interface Registry extends Closeable {
-    void start(Map<String, String> config);
-
     boolean subscribe(String path, SubscribeListener listener);
 
     void unsubscribe(String path);

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/log/SensitiveDataConverter.java
Patch:
@@ -17,8 +17,6 @@
 
 package org.apache.dolphinscheduler.server.log;
 
-import static org.apache.dolphinscheduler.common.Constants.STAR;
-
 import org.apache.dolphinscheduler.common.Constants;
 
 import org.apache.commons.lang.StringUtils;
@@ -80,7 +78,7 @@ static String passwordHandler(Pattern pwdPattern, String logMsg) {
 
             String password = matcher.group();
 
-            String maskPassword = StringUtils.repeat(STAR, StringUtils.length(password));
+            String maskPassword = StringUtils.repeat(Constants.STAR, StringUtils.length(password));
 
             matcher.appendReplacement(sb, maskPassword);
         }

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/log/TaskLogDiscriminatorTest.java
Patch:
@@ -150,4 +150,4 @@ public void getLogBase() {
     public void setLogBase() {
        taskLogDiscriminator.setLogBase("logs");
     }
-}
\ No newline at end of file
+}

File: dolphinscheduler-tools/src/main/java/org/apache/dolphinscheduler/tools/datasource/DolphinSchedulerManager.java
Patch:
@@ -15,9 +15,11 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.dao.upgrade;
+package org.apache.dolphinscheduler.tools.datasource;
 
+import org.apache.dolphinscheduler.dao.upgrade.SchemaUtils;
 import org.apache.dolphinscheduler.spi.enums.DbType;
+import org.apache.dolphinscheduler.tools.datasource.dao.UpgradeDao;
 
 import java.io.IOException;
 import java.sql.Connection;
@@ -27,11 +29,9 @@
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-import org.springframework.context.annotation.Profile;
 import org.springframework.stereotype.Service;
 
 @Service
-@Profile("shell-cli")
 public class DolphinSchedulerManager {
     private static final Logger logger = LoggerFactory.getLogger(DolphinSchedulerManager.class);
 

File: dolphinscheduler-worker/src/main/java/org/apache/dolphinscheduler/server/worker/registry/WorkerRegistryClient.java
Patch:
@@ -112,7 +112,7 @@ public void registry() {
                 Constants.WORKER_TYPE,
                 registryClient,
                 workerConfig.getExecThreads(),
-                workerManagerThread
+                workerManagerThread.getThreadPoolQueueSize()
         );
 
         this.heartBeatExecutor.scheduleAtFixedRate(heartBeatTask, workerHeartbeatInterval, workerHeartbeatInterval, TimeUnit.SECONDS);

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-api/src/main/java/org/apache/dolphinscheduler/plugin/datasource/api/datasource/AbstractDatasourceProcessor.java
Patch:
@@ -29,9 +29,9 @@
 
 public abstract class AbstractDatasourceProcessor implements DatasourceProcessor {
 
-    private static final Pattern IPV4_PATTERN = Pattern.compile("^[a-zA-Z0-9\\_\\-\\.]+$");
+    private static final Pattern IPV4_PATTERN = Pattern.compile("^[a-zA-Z0-9\\_\\-\\.\\,]+$");
 
-    private static final Pattern IPV6_PATTERN = Pattern.compile("^[a-zA-Z0-9\\_\\-\\.\\:\\[\\]]+$");
+    private static final Pattern IPV6_PATTERN = Pattern.compile("^[a-zA-Z0-9\\_\\-\\.\\:\\[\\]\\,]+$");
 
     private static final Pattern DATABASE_PATTER = Pattern.compile("^[a-zA-Z0-9\\_\\-\\.]+$");
 

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/Constants.java
Patch:
@@ -771,4 +771,7 @@ private Constants() {
      */
     public static final int DRY_RUN_FLAG_NO = 0;
     public static final int DRY_RUN_FLAG_YES = 1;
+
+    public static final String CACHE_KEY_VALUE_ALL = "'all'";
+
 }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java
Patch:
@@ -286,8 +286,8 @@ public enum Status {
     MOVE_PROCESS_TASK_RELATION_ERROR(50047, "move process task relation error", "移动任务到其他工作流错误"),
     DELETE_TASK_PROCESS_RELATION_ERROR(50048, "delete process task relation error", "删除工作流任务关系错误"),
     QUERY_TASK_PROCESS_RELATION_ERROR(50049, "query process task relation error", "查询工作流任务关系错误"),
-    TASK_DEFINE_STATE_ONLINE(50050, "task definition {0} is already on line", "任务定义[{0}]已上线"),
-    TASK_HAS_DOWNSTREAM(50051, "Task [{0}] exists downstream dependence", "任务[{0}]存在下游依赖"),
+    TASK_DEFINE_STATE_ONLINE(50050, "task definition [{0}] is already on line", "任务定义[{0}]已上线"),
+    TASK_HAS_DOWNSTREAM(50051, "Task exists downstream [{0}] dependence", "任务存在下游[{0}]依赖"),
     TASK_HAS_UPSTREAM(50052, "Task [{0}] exists upstream dependence", "任务[{0}]存在上游依赖"),
     MAIN_TABLE_USING_VERSION(50053, "the version that the master table is using", "主表正在使用该版本"),
     PROJECT_PROCESS_NOT_MATCH(50054, "the project and the process is not match", "项目和工作流不匹配"),

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/TaskDefinitionServiceImpl.java
Patch:
@@ -211,7 +211,7 @@ public Map<String, Object> deleteTaskDefinitionByCode(User loginUser, long proje
         int delete = taskDefinitionMapper.deleteByCode(taskCode);
         if (delete > 0) {
             List<ProcessTaskRelation> taskRelationList = processTaskRelationMapper.queryUpstreamByCode(projectCode, taskCode);
-            if (!processTaskRelationList.isEmpty()) {
+            if (!taskRelationList.isEmpty()) {
                 int deleteRelation = 0;
                 int deleteRelationLog = 0;
                 for (ProcessTaskRelation processTaskRelation : taskRelationList) {

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/DataAnalysisService.java
Patch:
@@ -49,7 +49,9 @@ public interface DataAnalysisService {
     Map<String, Object> countProcessInstanceStateByProject(User loginUser, long projectCode, String startDate, String endDate);
 
     /**
-     * statistics the process definition quantities of certain person
+     * statistics the process definition quantities of a certain person
+     *
+     * We only need projects which users have permission to see to determine whether the definition belongs to the user or not.
      *
      * @param loginUser login user
      * @param projectCode project code

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/ProcessInstanceMapperTest.java
Patch:
@@ -266,7 +266,7 @@ public void testCountInstanceStateByUser() {
 
         Long[] projectCodes = new Long[]{processDefinition.getProjectCode()};
 
-        List<ExecuteStatusCount> executeStatusCounts = processInstanceMapper.countInstanceStateByUser(null, null, projectCodes);
+        List<ExecuteStatusCount> executeStatusCounts = processInstanceMapper.countInstanceStateByProjectCodes(null, null, projectCodes);
 
 
         Assert.assertNotEquals(executeStatusCounts.size(), 0);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/WorkFlowLineageServiceImpl.java
Patch:
@@ -177,6 +177,9 @@ public Map<String, Object> queryWorkFlowLineage(long projectCode) {
 
     private Set<Long> querySourceWorkFlowCodes(long projectCode, long workFlowCode, List<TaskDefinition> taskDefinitionList) {
         Set<Long> sourceWorkFlowCodes = new HashSet<>();
+        if (taskDefinitionList == null || taskDefinitionList.isEmpty()) {
+            return sourceWorkFlowCodes;
+        }
         List<TaskDefinitionLog> taskDefinitionLogs = taskDefinitionLogMapper.queryByTaskDefinitions(taskDefinitionList);
         for (TaskDefinitionLog taskDefinitionLog : taskDefinitionLogs) {
             if (taskDefinitionLog.getProjectCode() == projectCode) {

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/master/WorkflowExecuteThreadTest.java
Patch:
@@ -108,7 +108,8 @@ public void init() throws Exception {
         Mockito.when(processInstance.getProcessDefinition()).thenReturn(processDefinition);
 
         ConcurrentHashMap<Integer, TaskInstance> taskTimeoutCheckList = new ConcurrentHashMap<>();
-        workflowExecuteThread = PowerMockito.spy(new WorkflowExecuteThread(processInstance, processService, null, null, config, taskTimeoutCheckList, taskProcessorFactory));
+        ConcurrentHashMap<Integer, TaskInstance> taskRetryCheckList = new ConcurrentHashMap<>();
+        workflowExecuteThread = PowerMockito.spy(new WorkflowExecuteThread(processInstance, processService, null, null, config, taskTimeoutCheckList, taskRetryCheckList, taskProcessorFactory));
         // prepareProcess init dag
         Field dag = WorkflowExecuteThread.class.getDeclaredField("dag");
         dag.setAccessible(true);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/SchedulerController.java
Patch:
@@ -143,7 +143,7 @@ public Result createSchedule(@ApiIgnore @RequestAttribute(value = SESSION_USER)
         @ApiImplicitParam(name = "warningType", value = "WARNING_TYPE", type = "WarningType"),
         @ApiImplicitParam(name = "warningGroupId", value = "WARNING_GROUP_ID", dataType = "Int", example = "100"),
         @ApiImplicitParam(name = "failureStrategy", value = "FAILURE_STRATEGY", type = "FailureStrategy"),
-        @ApiImplicitParam(name = "workerGroupId", value = "WORKER_GROUP_ID", dataType = "Int", example = "100"),
+        @ApiImplicitParam(name = "workerGroup", value = "WORKER_GROUP", dataType = "String", example = "default"),
         @ApiImplicitParam(name = "processInstancePriority", value = "PROCESS_INSTANCE_PRIORITY", type = "Priority"),
         @ApiImplicitParam(name = "environmentCode", value = "ENVIRONMENT_CODE", dataType = "Long"),
     })

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/WorkerGroupServiceImpl.java
Patch:
@@ -287,8 +287,9 @@ private List<WorkerGroup> getWorkerGroups(boolean isPaging) {
             if (isPaging) {
                 wg.setAddrList(String.join(Constants.COMMA, childrenNodes));
                 String registeredValue = registryClient.get(workerGroupPath + Constants.SINGLE_SLASH + childrenNodes.iterator().next());
-                wg.setCreateTime(DateUtils.stringToDate(registeredValue.split(Constants.COMMA)[6]));
-                wg.setUpdateTime(DateUtils.stringToDate(registeredValue.split(Constants.COMMA)[7]));
+                String[] rv = registeredValue.split(Constants.COMMA);
+                wg.setCreateTime(new Date(Long.parseLong(rv[6])));
+                wg.setUpdateTime(new Date(Long.parseLong(rv[7])));
                 wg.setSystemDefault(true);
             }
             workerGroups.add(wg);

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/master/runner/task/TaskProcessorFactoryTest.java
Patch:
@@ -26,13 +26,14 @@
 @Ignore
 public class TaskProcessorFactoryTest {
 
+    private TaskProcessorFactory taskProcessorFactory;
     @Test
     public void testFactory() {
 
         TaskInstance taskInstance = new TaskInstance();
         taskInstance.setTaskType("shell");
 
-        ITaskProcessor iTaskProcessor = TaskProcessorFactory.getTaskProcessor(taskInstance.getTaskType());
+        ITaskProcessor iTaskProcessor = taskProcessorFactory.getTaskProcessor(taskInstance.getTaskType());
 
         Assert.assertNotNull(iTaskProcessor);
     }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ResourcesServiceImpl.java
Patch:
@@ -596,7 +596,7 @@ private boolean upload(User loginUser, String fullName, MultipartFile file, Reso
             if (!HadoopUtils.getInstance().exists(resourcePath)) {
                 createTenantDirIfNotExists(tenantCode);
             }
-            org.apache.dolphinscheduler.api.utils.FileUtils.copyFile(file, localFilename);
+            org.apache.dolphinscheduler.api.utils.FileUtils.copyInputStreamToFile(file, localFilename);
             HadoopUtils.getInstance().copyLocalToHdfs(localFilename, hdfsFilename, true, true);
         } catch (Exception e) {
             FileUtils.deleteFile(localFilename);

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/utils/FileUtilsTest.java
Patch:
@@ -73,10 +73,10 @@ public void testCopyFile() throws IOException {
 
         //Use Mockito to mock MultipartFile
         MultipartFile file = Mockito.mock(MultipartFile.class, Mockito.RETURNS_DEEP_STUBS);
-        Mockito.when(file.getResource().getFile()).thenReturn(new File(src));
+        Mockito.when(file.getInputStream()).thenReturn(new FileInputStream(src));
 
         //Invoke copyFile
-        FileUtils.copyFile(file,destFilename);
+        FileUtils.copyInputStreamToFile(file,destFilename);
 
         //Test file exists
         File destFile = new File(destFilename);

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/HadoopUtils.java
Patch:
@@ -453,6 +453,7 @@ public ExecutionStatus getApplicationStatus(String applicationId) throws Excepti
             case Constants.ACCEPTED:
                 return ExecutionStatus.SUBMITTED_SUCCESS;
             case Constants.SUCCEEDED:
+            case Constants.ENDED:
                 return ExecutionStatus.SUCCESS;
             case Constants.NEW:
             case Constants.NEW_SAVING:

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/StateWheelExecuteThread.java
Patch:
@@ -92,9 +92,8 @@ private void checkTask() {
         for (TaskInstance taskInstance : this.taskInstanceCheckList.values()) {
             if (TimeoutFlag.OPEN == taskInstance.getTaskDefine().getTimeoutFlag()) {
                 long timeRemain = DateUtils.getRemainTime(taskInstance.getStartTime(), taskInstance.getTaskDefine().getTimeout() * Constants.SEC_2_MINUTES_TIME_UNIT);
-                if (0 <= timeRemain && processTimeout(taskInstance)) {
+                if (0 >= timeRemain && processTimeout(taskInstance)) {
                     taskInstanceCheckList.remove(taskInstance.getId());
-                    return;
                 }
             }
             if (taskInstance.taskCanRetry() && taskInstance.retryTaskIntervalOverTime()) {

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/CacheType.java
Patch:
@@ -23,7 +23,9 @@ public enum CacheType {
     QUEUE("queue"),
     PROCESS_DEFINITION("processDefinition"),
     PROCESS_TASK_RELATION("processTaskRelation"),
-    TASK_DEFINITION("taskDefinition");
+    TASK_DEFINITION("taskDefinition"),
+    WORKER_GROUP("workerGroup"),
+    SCHEDULE("schedule");
 
     CacheType(String cacheName) {
         this.cacheName = cacheName;

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ExecutorServiceTest.java
Patch:
@@ -122,6 +122,7 @@ public void init() {
         processDefinition.setUserId(userId);
         processDefinition.setVersion(1);
         processDefinition.setCode(1L);
+        processDefinition.setProjectCode(projectCode);
 
         // processInstance
         processInstance.setId(processInstanceId);

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/SchedulerServiceTest.java
Patch:
@@ -107,6 +107,7 @@ public void testSetScheduleState() {
         Project project = getProject(projectName, projectCode);
 
         ProcessDefinition processDefinition = new ProcessDefinition();
+        processDefinition.setProjectCode(projectCode);
 
         Schedule schedule = new Schedule();
         schedule.setId(1);

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/TaskDefinitionLogMapper.java
Patch:
@@ -78,8 +78,9 @@ TaskDefinitionLog queryByDefinitionCodeAndVersion(@Param("code") long code,
      * query the paging task definition version list by pagination info
      *
      * @param page pagination info
+     * @param projectCode project code
      * @param code process definition code
      * @return the paging task definition version list
      */
-    IPage<TaskDefinitionLog> queryTaskDefinitionVersionsPaging(Page<TaskDefinitionLog> page, @Param("code") long code);
+    IPage<TaskDefinitionLog> queryTaskDefinitionVersionsPaging(Page<TaskDefinitionLog> page, @Param("code") long code, @Param("projectCode") long projectCode);
 }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ExecutorService.java
Patch:
@@ -68,11 +68,12 @@ Map<String, Object> execProcessInstance(User loginUser, long projectCode,
     /**
      * check whether the process definition can be executed
      *
+     * @param projectCode project code
      * @param processDefinition process definition
      * @param processDefineCode process definition code
      * @return check result code
      */
-    Map<String, Object> checkProcessDefinitionValid(ProcessDefinition processDefinition, long processDefineCode);
+    Map<String, Object> checkProcessDefinitionValid(long projectCode, ProcessDefinition processDefinition, long processDefineCode);
 
     /**
      * do action to process instance：pause, stop, repeat, recover from pause, recover from stop

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/StateEventType.java
Patch:
@@ -24,7 +24,9 @@ public enum StateEventType {
     PROCESS_STATE_CHANGE(0, "process statechange"),
     TASK_STATE_CHANGE(1, "task state change"),
     PROCESS_TIMEOUT(2, "process timeout"),
-    TASK_TIMEOUT(3, "task timeout");
+    TASK_TIMEOUT(3, "task timeout"),
+    WAIT_TASK_GROUP(4, "wait task group"),
+    ;
 
     StateEventType(int code, String descp) {
         this.code = code;

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/TaskInstanceMapper.java
Patch:
@@ -73,4 +73,6 @@ IPage<TaskInstance> queryTaskInstanceListPaging(IPage<TaskInstance> page,
                                                     @Param("startTime") Date startTime,
                                                     @Param("endTime") Date endTime
     );
+
+    List<TaskInstance> loadAllInfosNoRelease(@Param("processInstanceId") int processInstanceId,@Param("status") int status);
 }

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/MasterServer.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.dolphinscheduler.server.master.processor.CacheProcessor;
 import org.apache.dolphinscheduler.server.master.processor.StateEventProcessor;
 import org.apache.dolphinscheduler.server.master.processor.TaskAckProcessor;
+import org.apache.dolphinscheduler.server.master.processor.TaskEventProcessor;
 import org.apache.dolphinscheduler.server.master.processor.TaskKillResponseProcessor;
 import org.apache.dolphinscheduler.server.master.processor.TaskResponseProcessor;
 import org.apache.dolphinscheduler.server.master.registry.MasterRegistryClient;
@@ -95,6 +96,8 @@ public void run() {
         this.nettyRemotingServer.registerProcessor(CommandType.TASK_EXECUTE_ACK, new TaskAckProcessor());
         this.nettyRemotingServer.registerProcessor(CommandType.TASK_KILL_RESPONSE, new TaskKillResponseProcessor());
         this.nettyRemotingServer.registerProcessor(CommandType.STATE_EVENT_REQUEST, new StateEventProcessor());
+        this.nettyRemotingServer.registerProcessor(CommandType.TASK_FORCE_STATE_EVENT_REQUEST, new TaskEventProcessor());
+        this.nettyRemotingServer.registerProcessor(CommandType.TASK_WAKEUP_EVENT_REQUEST, new TaskEventProcessor());
         this.nettyRemotingServer.registerProcessor(CommandType.CACHE_EXPIRE, new CacheProcessor());
         this.nettyRemotingServer.start();
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/task/ITaskProcessor.java
Patch:
@@ -36,4 +36,6 @@ public interface ITaskProcessor {
 
     ExecutionStatus taskState();
 
+    void dispatch(TaskInstance taskInstance, ProcessInstance processInstance);
+
 }

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/master/WorkflowExecuteThreadTest.java
Patch:
@@ -22,7 +22,6 @@
 import static org.apache.dolphinscheduler.common.Constants.CMD_PARAM_RECOVERY_START_NODE_STRING;
 import static org.apache.dolphinscheduler.common.Constants.CMD_PARAM_START_NODES;
 
-import static org.mockito.Mockito.verify;
 import static org.powermock.api.mockito.PowerMockito.mock;
 
 import org.apache.dolphinscheduler.common.enums.CommandType;
@@ -113,7 +112,6 @@ public void init() throws Exception {
         PowerMockito.doNothing().when(workflowExecuteThread, "endProcess");
     }
 
-
     @Test
     public void testParseStartNodeName() throws ParseException {
         try {

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProcessTaskRelationController.java
Patch:
@@ -142,7 +142,7 @@ public Result moveTaskProcessRelation(@ApiIgnore @RequestAttribute(value = Const
     }
 
     /**
-     * delete process task relation
+     * delete process task relation (delete task from workflow)
      *
      * @param loginUser login user
      * @param projectCode project code

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessService.java
Patch:
@@ -2310,6 +2310,9 @@ public int saveProcessDefine(User operator, ProcessDefinition processDefinition,
      */
     public int saveTaskRelation(User operator, long projectCode, long processDefinitionCode, int processDefinitionVersion,
                                 List<ProcessTaskRelationLog> taskRelationList, List<TaskDefinitionLog> taskDefinitionLogs) {
+        if (taskRelationList.isEmpty()) {
+            return Constants.EXIT_CODE_SUCCESS;
+        }
         Map<Long, TaskDefinitionLog> taskDefinitionLogMap = null;
         if (CollectionUtils.isNotEmpty(taskDefinitionLogs)) {
             taskDefinitionLogMap = taskDefinitionLogs.stream()

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinition.java
Patch:
@@ -33,6 +33,7 @@
 import java.util.Objects;
 import java.util.stream.Collectors;
 
+import com.baomidou.mybatisplus.annotation.FieldStrategy;
 import com.baomidou.mybatisplus.annotation.IdType;
 import com.baomidou.mybatisplus.annotation.TableField;
 import com.baomidou.mybatisplus.annotation.TableId;
@@ -158,6 +159,7 @@ public class TaskDefinition {
     /**
      * timeout notify strategy
      */
+    @TableField(updateStrategy = FieldStrategy.IGNORED)
     private TaskTimeoutStrategy timeoutNotifyStrategy;
 
     /**

File: dolphinscheduler-task-plugin/dolphinscheduler-task-sql/src/main/java/org/apache/dolphinscheduler/plugin/task/sql/SqlTask.java
Patch:
@@ -289,6 +289,7 @@ private void sendAttachment(int groupId, String title, String content) {
         taskAlertInfo.setAlertGroupId(groupId);
         taskAlertInfo.setContent(content);
         taskAlertInfo.setTitle(title);
+        setTaskAlertInfo(taskAlertInfo);
     }
 
     /**

File: dolphinscheduler-alert/dolphinscheduler-alert-server/src/main/java/org/apache/dolphinscheduler/alert/AlertServer.java
Patch:
@@ -20,6 +20,7 @@
 import static org.apache.dolphinscheduler.common.Constants.ALERT_RPC_PORT;
 
 import org.apache.dolphinscheduler.common.thread.Stopper;
+import org.apache.dolphinscheduler.common.utils.PropertyUtils;
 import org.apache.dolphinscheduler.dao.AlertDao;
 import org.apache.dolphinscheduler.dao.PluginDao;
 import org.apache.dolphinscheduler.dao.entity.Alert;
@@ -100,7 +101,7 @@ private void checkTable() {
 
     private void startServer() {
         NettyServerConfig serverConfig = new NettyServerConfig();
-        serverConfig.setListenPort(ALERT_RPC_PORT);
+        serverConfig.setListenPort(PropertyUtils.getInt(ALERT_RPC_PORT, 50052));
 
         server = new NettyRemotingServer(serverConfig);
         server.registerProcessor(CommandType.ALERT_SEND_REQUEST, alertRequestProcessor);

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/Constants.java
Patch:
@@ -39,9 +39,9 @@ private Constants() {
     public static final String COMMON_PROPERTIES_PATH = "/common.properties";
 
     /**
-     * alter properties
+     * alert properties
      */
-    public static final int ALERT_RPC_PORT = 50052;
+    public static final String ALERT_RPC_PORT = "alert.rpc.port";
 
     /**
      * registry properties
@@ -291,7 +291,7 @@ private Constants() {
      *
      * rpc port
      */
-    public static final int RPC_PORT = 50051;
+    public static final String RPC_PORT = "rpc.port";
 
     /**
      * forbid running task

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/log/LoggerServer.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.dolphinscheduler.server.log;
 
 import org.apache.dolphinscheduler.common.Constants;
+import org.apache.dolphinscheduler.common.utils.PropertyUtils;
 import org.apache.dolphinscheduler.remote.NettyRemotingServer;
 import org.apache.dolphinscheduler.remote.command.CommandType;
 import org.apache.dolphinscheduler.remote.config.NettyServerConfig;
@@ -49,7 +50,7 @@ public class LoggerServer {
 
     public LoggerServer() {
         this.serverConfig = new NettyServerConfig();
-        this.serverConfig.setListenPort(Constants.RPC_PORT);
+        this.serverConfig.setListenPort(PropertyUtils.getInt(Constants.RPC_PORT, 50051));
         this.server = new NettyRemotingServer(serverConfig);
         this.requestProcessor = new LoggerRequestProcessor();
         this.server.registerProcessor(CommandType.GET_LOG_BYTES_REQUEST, requestProcessor, requestProcessor.getExecutor());
@@ -72,7 +73,7 @@ public static void main(String[] args)  {
      */
     public void start()  {
         this.server.start();
-        logger.info("logger server started, listening on port : {}", Constants.RPC_PORT);
+        logger.info("logger server started, listening on port : {}", PropertyUtils.getInt(Constants.RPC_PORT, 50051));
         Runtime.getRuntime().addShutdownHook(new Thread(LoggerServer.this::stop));
     }
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/utils/ProcessUtils.java
Patch:
@@ -188,7 +188,7 @@ public static List<String> killYarnJob(TaskExecutionContext taskExecutionContext
             String log;
             try (LogClientService logClient = new LogClientService()) {
                 log = logClient.viewLog(Host.of(taskExecutionContext.getHost()).getIp(),
-                        Constants.RPC_PORT,
+                        PropertyUtils.getInt(Constants.RPC_PORT, 50051),
                         taskExecutionContext.getLogPath());
             }
             if (!StringUtils.isEmpty(log)) {

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/WorkerServer.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.dolphinscheduler.common.IStoppable;
 import org.apache.dolphinscheduler.common.enums.NodeType;
 import org.apache.dolphinscheduler.common.thread.Stopper;
+import org.apache.dolphinscheduler.common.utils.PropertyUtils;
 import org.apache.dolphinscheduler.remote.NettyRemotingServer;
 import org.apache.dolphinscheduler.remote.command.CommandType;
 import org.apache.dolphinscheduler.remote.config.NettyServerConfig;
@@ -124,7 +125,7 @@ public static void main(String[] args) {
     @PostConstruct
     public void run() {
         // alert-server client registry
-        alertClientService = new AlertClientService(workerConfig.getAlertListenHost(), Constants.ALERT_RPC_PORT);
+        alertClientService = new AlertClientService(workerConfig.getAlertListenHost(), PropertyUtils.getInt(Constants.ALERT_RPC_PORT, 50052));
 
         // init remoting server
         NettyServerConfig serverConfig = new NettyServerConfig();

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/processor/TaskKillProcessor.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
 import org.apache.dolphinscheduler.common.utils.LoggerUtils;
 import org.apache.dolphinscheduler.common.utils.OSUtils;
+import org.apache.dolphinscheduler.common.utils.PropertyUtils;
 import org.apache.dolphinscheduler.remote.command.Command;
 import org.apache.dolphinscheduler.remote.command.CommandType;
 import org.apache.dolphinscheduler.remote.command.TaskKillRequestCommand;
@@ -179,7 +180,7 @@ private TaskKillResponseCommand buildKillTaskResponseCommand(TaskKillRequestComm
     private Pair<Boolean, List<String>> killYarnJob(String host, String logPath, String executePath, String tenantCode) {
         try (LogClientService logClient = new LogClientService();) {
             logger.info("view log host : {},logPath : {}", host, logPath);
-            String log = logClient.viewLog(host, Constants.RPC_PORT, logPath);
+            String log = logClient.viewLog(host, PropertyUtils.getInt(Constants.RPC_PORT, 50051), logPath);
             List<String> appIds = Collections.emptyList();
             if (!StringUtils.isEmpty(log)) {
                 appIds = LoggerUtils.getAppIds(log, logger);

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessService.java
Patch:
@@ -55,6 +55,7 @@
 import org.apache.dolphinscheduler.common.utils.DateUtils;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
 import org.apache.dolphinscheduler.common.utils.ParameterUtils;
+import org.apache.dolphinscheduler.common.utils.PropertyUtils;
 import org.apache.dolphinscheduler.common.utils.TaskParametersUtils;
 import org.apache.dolphinscheduler.dao.entity.Command;
 import org.apache.dolphinscheduler.dao.entity.DagData;
@@ -507,7 +508,7 @@ public void removeTaskLogFile(Integer processInstanceId) {
                 if (StringUtils.isEmpty(taskInstance.getHost())) {
                     continue;
                 }
-                int port = Constants.RPC_PORT;
+                int port = PropertyUtils.getInt(Constants.RPC_PORT, 50051);
                 String ip = "";
                 try {
                     ip = Host.of(taskInstance.getHost()).getIp();

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/task/DependentTaskProcessor.java
Patch:
@@ -93,6 +93,7 @@ public boolean submit(TaskInstance task, ProcessInstance processInstance, int ma
                 processInstance.getProcessDefinitionVersion(),
                 taskInstance.getProcessInstanceId(),
                 taskInstance.getId()));
+        setTaskExecutionLogger();
         taskInstance.setHost(NetUtils.getAddr(masterConfig.getListenPort()));
         taskInstance.setState(ExecutionStatus.RUNNING_EXECUTION);
         taskInstance.setStartTime(new Date());

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/task/SubTaskProcessor.java
Patch:
@@ -59,7 +59,7 @@ public boolean submit(TaskInstance task, ProcessInstance processInstance, int ma
         if (this.taskInstance == null) {
             return false;
         }
-
+        setTaskExecutionLogger();
         return true;
     }
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/task/SwitchTaskProcessor.java
Patch:
@@ -75,6 +75,7 @@ public boolean submit(TaskInstance taskInstance, ProcessInstance processInstance
                 processInstance.getProcessDefinitionVersion(),
                 taskInstance.getProcessInstanceId(),
                 taskInstance.getId()));
+        setTaskExecutionLogger();
         taskInstance.setHost(NetUtils.getAddr(masterConfig.getListenPort()));
         taskInstance.setState(ExecutionStatus.RUNNING_EXECUTION);
         taskInstance.setStartTime(new Date());

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/ExecutionStatus.java
Patch:
@@ -42,6 +42,7 @@ public enum ExecutionStatus {
      * 11 waiting depend node complete
      * 12 delay execution
      * 13 forced success
+     * 14 serial wait
      */
     SUBMITTED_SUCCESS(0, "submit success"),
     RUNNING_EXECUTION(1, "running"),

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/utils/DagHelper.java
Patch:
@@ -406,7 +406,7 @@ private static List<String> skipTaskNode4Switch(TaskNode taskNode, Map<String, T
                                                     Map<String, TaskInstance> completeTaskList,
                                                     DAG<String, TaskNode, TaskNodeRelation> dag) {
 
-        SwitchParameters switchParameters = completeTaskList.get(taskNode.getName()).getSwitchDependency();
+        SwitchParameters switchParameters = completeTaskList.get(Long.toString(taskNode.getCode())).getSwitchDependency();
         int resultConditionLocation = switchParameters.getResultConditionLocation();
         List<SwitchResultVo> conditionResultVoList = switchParameters.getDependTaskList();
         List<String> switchTaskList = conditionResultVoList.get(resultConditionLocation).getNextNode();

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/task/SwitchTaskProcessor.java
Patch:
@@ -210,7 +210,7 @@ public String setTaskParams(String content, String rgex) {
             if (!org.apache.commons.lang.math.NumberUtils.isNumber(value)) {
                 value = "\"" + value + "\"";
             }
-            logger.info("paramName：{}，paramValue{}", paramName, value);
+            logger.info("paramName:{}，paramValue:{}", paramName, value);
             content = content.replace("${" + paramName + "}", value);
         }
         return content;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java
Patch:
@@ -288,6 +288,7 @@ public enum Status {
     TASK_HAS_DOWNSTREAM(50051, "Task [{0}] exists downstream dependence", "任务[{0}]存在下游依赖"),
     MAIN_TABLE_USING_VERSION(50052, "the version that the master table is using", "主表正在使用该版本"),
     PROJECT_PROCESS_NOT_MATCH(50053, "the project and the process is not match", "项目和工作流不匹配"),
+    DELETE_EDGE_ERROR(50054, "delete edge error", "删除工作流任务连接线错误"),
     HDFS_NOT_STARTUP(60001, "hdfs not startup", "hdfs未启用"),
 
     /**

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-api/src/main/java/org/apache/dolphinscheduler/plugin/datasource/api/utils/CommonUtils.java
Patch:
@@ -79,7 +79,9 @@ public static boolean loadKerberosConf(Configuration configuration) throws IOExc
      * @throws IOException errors
      */
     public static void loadKerberosConf(String javaSecurityKrb5Conf, String loginUserKeytabUsername, String loginUserKeytabPath) throws IOException {
-        loadKerberosConf(javaSecurityKrb5Conf, loginUserKeytabUsername, loginUserKeytabPath, new Configuration());
+        Configuration configuration = new Configuration();
+        configuration.setClassLoader(configuration.getClass().getClassLoader());
+        loadKerberosConf(javaSecurityKrb5Conf, loginUserKeytabUsername, loginUserKeytabPath, configuration);
     }
 
     /**

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/AlertStatus.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.common.enums;
 
 import com.baomidou.mybatisplus.annotation.EnumValue;
@@ -29,8 +30,7 @@ public enum AlertStatus {
     EXECUTION_SUCCESS(1, "execute successfully"),
     EXECUTION_FAILURE(2, "execute failed");
 
-
-    AlertStatus(int code, String descp){
+    AlertStatus(int code, String descp) {
         this.code = code;
         this.descp = descp;
     }

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/AlertType.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.common.enums;
 
 import com.baomidou.mybatisplus.annotation.EnumValue;
@@ -28,8 +29,7 @@ public enum AlertType {
     EMAIL(0, "email"),
     SMS(1, "SMS");
 
-
-    AlertType(int code, String descp){
+    AlertType(int code, String descp) {
         this.code = code;
         this.descp = descp;
     }

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/AuthorizationType.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.common.enums;
 
 import com.baomidou.mybatisplus.annotation.EnumValue;
@@ -35,7 +36,7 @@ public enum AuthorizationType {
     DATASOURCE(3, "data source"),
     UDF(4, "udf function");
 
-    AuthorizationType(int code, String descp){
+    AuthorizationType(int code, String descp) {
         this.code = code;
         this.descp = descp;
     }

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/CycleEnum.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.common.enums;
 
 /**

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/DataType.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.common.enums;
 
 /**

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/DependResult.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.common.enums;
 
 /**

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/DependentRelation.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.common.enums;
 
 /**

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/Direct.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.common.enums;
 
 /**

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/Flag.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.common.enums;
 
 import com.baomidou.mybatisplus.annotation.EnumValue;

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/HttpParametersType.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.common.enums;
 
 /**

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/NodeType.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.common.enums;
 
 public enum NodeType {

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/Priority.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.common.enums;
 
 import com.baomidou.mybatisplus.annotation.EnumValue;

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/ProgramType.java
Patch:
@@ -14,8 +14,8 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.common.enums;
 
+package org.apache.dolphinscheduler.common.enums;
 
 /**
  * support program types

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/ResUploadType.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.common.enums;
 
 /**

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/RunMode.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.common.enums;
 
 import com.baomidou.mybatisplus.annotation.EnumValue;
@@ -29,7 +30,7 @@ public enum  RunMode {
     RUN_MODE_SERIAL(0, "serial run"),
     RUN_MODE_PARALLEL(1, "parallel run");
 
-    RunMode(int code, String descp){
+    RunMode(int code, String descp) {
         this.code = code;
         this.descp = descp;
     }

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/SparkVersion.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.common.enums;
 
 import com.baomidou.mybatisplus.annotation.EnumValue;
@@ -27,7 +28,7 @@ public enum SparkVersion {
     SPARK1(0, "SPARK1"),
     SPARK2(1, "SPARK2");
 
-    SparkVersion(int code, String descp){
+    SparkVersion(int code, String descp) {
         this.code = code;
         this.descp = descp;
     }

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/SqoopJobType.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.common.enums;
 
 import com.baomidou.mybatisplus.annotation.EnumValue;
@@ -22,7 +23,7 @@ public enum  SqoopJobType {
     CUSTOM(0, "CUSTOM"),
     TEMPLATE(1, "TEMPLATE");
 
-    SqoopJobType(int code, String descp){
+    SqoopJobType(int code, String descp) {
         this.code = code;
         this.descp = descp;
     }

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/TaskRecordStatus.java
Patch:
@@ -14,8 +14,8 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.common.enums;
 
+package org.apache.dolphinscheduler.common.enums;
 
 /**
  * task record status

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/TaskStateType.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.common.enums;
 
 /**

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/TaskTimeoutStrategy.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.common.enums;
 
 import com.baomidou.mybatisplus.annotation.EnumValue;

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/TaskType.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.common.enums;
 
 import com.baomidou.mybatisplus.annotation.EnumValue;

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/UdfType.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.common.enums;
 
 import com.baomidou.mybatisplus.annotation.EnumValue;

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/UserType.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.common.enums;
 
 import com.baomidou.mybatisplus.annotation.EnumValue;
@@ -28,8 +29,7 @@ public enum UserType {
     ADMIN_USER(0, "admin user"),
     GENERAL_USER(1, "general user");
 
-
-    UserType(int code, String descp){
+    UserType(int code, String descp) {
         this.code = code;
         this.descp = descp;
     }

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/graph/DAG.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.common.graph;
 
 import org.apache.commons.collections4.CollectionUtils;

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/model/DependentTaskModel.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.common.model;
 
 import org.apache.dolphinscheduler.common.enums.DependentRelation;

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/model/WorkerServerModel.java
Patch:
@@ -14,8 +14,8 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.common.model;
 
+package org.apache.dolphinscheduler.common.model;
 
 import java.util.Date;
 import java.util.Set;

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/process/ResourceInfo.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.common.process;
 
 /**

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/task/AbstractParameters.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.common.task;
 
 import org.apache.dolphinscheduler.common.enums.Direct;

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/task/IParameters.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.common.task;
 
 import org.apache.dolphinscheduler.common.process.ResourceInfo;

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/task/TaskTimeoutParameter.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.common.task;
 
 import org.apache.dolphinscheduler.common.enums.TaskTimeoutStrategy;

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/task/dependent/DependentParameters.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.common.task.dependent;
 
 import org.apache.dolphinscheduler.common.enums.DependentRelation;
@@ -29,8 +30,6 @@ public class DependentParameters extends AbstractParameters {
     private List<DependentTaskModel> dependTaskList;
     private DependentRelation relation;
 
-
-
     @Override
     public boolean checkParameters() {
         return true;

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/task/http/HttpParameters.java
Patch:
@@ -62,13 +62,13 @@ public class HttpParameters extends AbstractParameters {
      * Connect Timeout
      * Unit: ms
      */
-    private int connectTimeout ;
+    private int connectTimeout;
 
     /**
      * Socket Timeout
      * Unit: ms
      */
-    private int socketTimeout ;
+    private int socketTimeout;
 
     @Override
     public boolean checkParameters() {

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/task/mr/MapReduceParameters.java
Patch:
@@ -70,7 +70,6 @@ public class MapReduceParameters extends AbstractParameters {
      */
     private ProgramType programType;
 
-
     public String getMainClass() {
         return mainClass;
     }

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/task/sql/SqlBinds.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.common.task.sql;
 
 import org.apache.dolphinscheduler.common.process.Property;

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/task/sql/SqlType.java
Patch:
@@ -14,8 +14,8 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.common.task.sql;
 
+package org.apache.dolphinscheduler.common.task.sql;
 
 public enum SqlType {
     /**

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/task/sqoop/SqoopParameters.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.common.task.sqoop;
 
 import org.apache.dolphinscheduler.common.enums.SqoopJobType;

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/task/sqoop/sources/SourceHdfsParameter.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.common.task.sqoop.sources;
 
 /**

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/task/sqoop/sources/SourceHiveParameter.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.common.task.sqoop.sources;
 
 /**

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/task/sqoop/sources/SourceMysqlParameter.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.common.task.sqoop.sources;
 
 import org.apache.dolphinscheduler.common.process.Property;

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/task/sqoop/targets/TargetHdfsParameter.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.common.task.sqoop.targets;
 
 /**

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/task/sqoop/targets/TargetHiveParameter.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.common.task.sqoop.targets;
 
 /**

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/task/sqoop/targets/TargetMysqlParameter.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.common.task.sqoop.targets;
 
 /**

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/task/subprocess/SubProcessParameters.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.common.task.subprocess;
 
 import org.apache.dolphinscheduler.common.process.ResourceInfo;
@@ -22,7 +23,6 @@
 import java.util.ArrayList;
 import java.util.List;
 
-
 public class SubProcessParameters extends AbstractParameters {
 
     /**

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/thread/ThreadUtils.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.common.thread;
 
 import java.util.concurrent.ExecutorService;
@@ -32,7 +33,7 @@ public class ThreadUtils {
      * @param threadsNum threadsNum
      * @return ExecutorService
      */
-    public static ExecutorService newDaemonFixedThreadExecutor(String threadName,int threadsNum){
+    public static ExecutorService newDaemonFixedThreadExecutor(String threadName,int threadsNum) {
         ThreadFactory threadFactory = new ThreadFactoryBuilder()
                 .setDaemon(true)
                 .setNameFormat(threadName)

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/DependentUtils.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.common.utils;
 
 import org.apache.dolphinscheduler.common.enums.DependResult;
@@ -60,7 +61,6 @@ public static DependResult getDependResultForRelation(DependentRelation relation
         return dependResult;
     }
 
-
     /**
      * get date interval list by business date and date value.
      *

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/HadoopUtils.java
Patch:
@@ -22,8 +22,8 @@
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.ExecutionStatus;
 import org.apache.dolphinscheduler.common.enums.ResUploadType;
-import org.apache.dolphinscheduler.spi.enums.ResourceType;
 import org.apache.dolphinscheduler.common.exception.BaseException;
+import org.apache.dolphinscheduler.spi.enums.ResourceType;
 
 import org.apache.commons.io.IOUtils;
 import org.apache.commons.lang.StringUtils;

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/OSUtils.java
Patch:
@@ -35,7 +35,6 @@
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
-import java.util.Optional;
 import java.util.StringTokenizer;
 import java.util.regex.Pattern;
 

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/ScriptRunner.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.common.utils;
 
 import java.io.IOException;

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/TriFunction.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.common.utils;
 
 /**

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/BaseDaoTest.java
Patch:
@@ -18,20 +18,17 @@
 package org.apache.dolphinscheduler.dao;
 
 import org.apache.dolphinscheduler.common.enums.ProfileType;
-import org.apache.dolphinscheduler.dao.datasource.SpringConnectionFactory;
 
 import org.junit.runner.RunWith;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.test.annotation.Rollback;
 import org.springframework.test.context.ActiveProfiles;
-import org.springframework.test.context.ContextConfiguration;
 import org.springframework.test.context.junit4.SpringRunner;
 import org.springframework.transaction.annotation.Transactional;
 
 @RunWith(SpringRunner.class)
 @SpringBootTest
 @ActiveProfiles(value = ProfileType.H2)
-@ContextConfiguration(classes = SpringConnectionFactory.class)
 @Transactional
 @Rollback
 public abstract class BaseDaoTest {

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/master/WorkflowExecuteThreadTest.java
Patch:
@@ -88,7 +88,6 @@ public void init() throws Exception {
 
         applicationContext = mock(ApplicationContext.class);
         config = new MasterConfig();
-        config.setExecTaskNum(1);
         Mockito.when(applicationContext.getBean(MasterConfig.class)).thenReturn(config);
 
         processInstance = mock(ProcessInstance.class);

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/master/consumer/TaskPriorityQueueConsumerTest.java
Patch:
@@ -307,7 +307,7 @@ public void testDispatch() {
 
         TaskPriority taskPriority = new TaskPriority();
         taskPriority.setTaskId(1);
-        boolean res = taskPriorityQueueConsumer.dispatch(taskPriority);
+        boolean res = taskPriorityQueueConsumer.dispatchTask(taskPriority);
 
         Assert.assertFalse(res);
     }

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/handler/NettyClientHandler.java
Patch:
@@ -136,6 +136,7 @@ private void processReceived(final Channel channel, final Command command) {
             future.setResponseCommand(command);
             future.release();
             if (future.getInvokeCallback() != null) {
+                future.removeFuture();
                 this.callbackExecutor.submit(future::executeInvokeCallback);
             } else {
                 future.putResponse(command);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ExecutorController.java
Patch:
@@ -99,7 +99,7 @@ public class ExecutorController extends BaseController {
         @ApiImplicitParam(name = "runMode", value = "RUN_MODE", dataType = "RunMode"),
         @ApiImplicitParam(name = "processInstancePriority", value = "PROCESS_INSTANCE_PRIORITY", required = true, dataType = "Priority"),
         @ApiImplicitParam(name = "workerGroup", value = "WORKER_GROUP", dataType = "String", example = "default"),
-        @ApiImplicitParam(name = "environmentCode", value = "ENVIRONMENT_CODE", dataType = "Long", example = "default"),
+        @ApiImplicitParam(name = "environmentCode", value = "ENVIRONMENT_CODE", dataType = "Long", example = "-1"),
         @ApiImplicitParam(name = "timeout", value = "TIMEOUT", dataType = "Int", example = "100"),
         @ApiImplicitParam(name = "expectedParallelismNumber", value = "EXPECTED_PARALLELISM_NUMBER", dataType = "Int", example = "8")
     })

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/task/CommonTaskProcessor.java
Patch:
@@ -65,7 +65,7 @@ public class CommonTaskProcessor extends BaseTaskProcessor {
     @Override
     public boolean submit(TaskInstance task, ProcessInstance processInstance, int maxRetryTimes, int commitInterval) {
         this.processInstance = processInstance;
-        this.taskInstance = processService.submitTask(task, maxRetryTimes, commitInterval);
+        this.taskInstance = processService.submitTaskWithRetry(processInstance, task, maxRetryTimes, commitInterval);
 
         if (this.taskInstance == null) {
             return false;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/task/ConditionTaskProcessor.java
Patch:
@@ -72,7 +72,7 @@ public class ConditionTaskProcessor extends BaseTaskProcessor {
     @Override
     public boolean submit(TaskInstance task, ProcessInstance processInstance, int masterTaskCommitRetryTimes, int masterTaskCommitInterval) {
         this.processInstance = processInstance;
-        this.taskInstance = processService.submitTask(task, masterTaskCommitRetryTimes, masterTaskCommitInterval);
+        this.taskInstance = processService.submitTaskWithRetry(processInstance, task, masterTaskCommitRetryTimes, masterTaskCommitInterval);
 
         if (this.taskInstance == null) {
             return false;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/task/DependentTaskProcessor.java
Patch:
@@ -34,7 +34,6 @@
 import org.apache.dolphinscheduler.server.utils.DependentExecute;
 import org.apache.dolphinscheduler.server.utils.LogUtils;
 import org.apache.dolphinscheduler.service.bean.SpringApplicationContext;
-import org.apache.dolphinscheduler.service.process.ProcessService;
 
 import java.util.ArrayList;
 import java.util.Date;
@@ -81,7 +80,7 @@ public class DependentTaskProcessor extends BaseTaskProcessor {
     public boolean submit(TaskInstance task, ProcessInstance processInstance, int masterTaskCommitRetryTimes, int masterTaskCommitInterval) {
         this.processInstance = processInstance;
         this.taskInstance = task;
-        this.taskInstance = processService.submitTask(task, masterTaskCommitRetryTimes, masterTaskCommitInterval);
+        this.taskInstance = processService.submitTaskWithRetry(processInstance, task, masterTaskCommitRetryTimes, masterTaskCommitInterval);
 
         if (this.taskInstance == null) {
             return false;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/task/SubTaskProcessor.java
Patch:
@@ -54,7 +54,7 @@ public boolean submit(TaskInstance task, ProcessInstance processInstance, int ma
         taskDefinition = processService.findTaskDefinition(
                 task.getTaskCode(), task.getTaskDefinitionVersion()
         );
-        this.taskInstance = processService.submitTask(task, masterTaskCommitRetryTimes, masterTaskCommitInterval);
+        this.taskInstance = processService.submitTaskWithRetry(processInstance, task, masterTaskCommitRetryTimes, masterTaskCommitInterval);
 
         if (this.taskInstance == null) {
             return false;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/task/SwitchTaskProcessor.java
Patch:
@@ -63,7 +63,7 @@ public class SwitchTaskProcessor extends BaseTaskProcessor {
     public boolean submit(TaskInstance taskInstance, ProcessInstance processInstance, int masterTaskCommitRetryTimes, int masterTaskCommitInterval) {
 
         this.processInstance = processInstance;
-        this.taskInstance = processService.submitTask(taskInstance, masterTaskCommitRetryTimes, masterTaskCommitInterval);
+        this.taskInstance = processService.submitTaskWithRetry(processInstance, taskInstance, masterTaskCommitRetryTimes, masterTaskCommitInterval);
 
         if (this.taskInstance == null) {
             return false;

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/master/ConditionsTaskTest.java
Patch:
@@ -89,7 +89,7 @@ private TaskInstance testBasicInit(ExecutionStatus expectResult) {
 
         // for MasterBaseTaskExecThread.submit
         Mockito.when(processService
-                .submitTask(taskInstance))
+                .submitTask(processInstance, taskInstance))
                 .thenReturn(taskInstance);
         // for MasterBaseTaskExecThread.call
         Mockito.when(processService

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/master/SwitchTaskTest.java
Patch:
@@ -81,7 +81,7 @@ private TaskInstance testBasicInit(ExecutionStatus expectResult) {
 
         // for MasterBaseTaskExecThread.submit
         Mockito.when(processService
-                .submitTask(taskInstance))
+                .submitTask(processInstance, taskInstance))
                 .thenReturn(taskInstance);
         // for MasterBaseTaskExecThread.call
         Mockito.when(processService

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/master/runner/task/CommonTaskProcessorTest.java
Patch:
@@ -86,7 +86,6 @@ public void testGetTaskExecutionContext() throws Exception {
         taskDefinition.setTimeoutFlag(TimeoutFlag.OPEN);
         taskInstance.setTaskDefine(taskDefinition);
 
-        Mockito.doReturn(taskInstance).when(processService).getTaskInstanceDetailByTaskId(1);
         Mockito.doReturn(taskInstance).when(processService).findTaskInstanceById(1);
 
         TaskExecutionContext taskExecutionContext = commonTaskProcessor.getTaskExecutionContext(taskInstance);

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/upgrade/ProcessDefinitionDao.java
Patch:
@@ -20,8 +20,8 @@
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.Flag;
 import org.apache.dolphinscheduler.common.enums.ReleaseState;
+import org.apache.dolphinscheduler.common.utils.CodeGenerateUtils;
 import org.apache.dolphinscheduler.common.utils.ConnectionUtils;
-import org.apache.dolphinscheduler.common.utils.SnowFlakeUtils;
 import org.apache.dolphinscheduler.dao.entity.ProcessDefinition;
 
 import java.sql.Connection;
@@ -110,7 +110,7 @@ public List<ProcessDefinition> queryProcessDefinition(Connection conn) {
                 processDefinition.setId(rs.getInt(1));
                 long code = rs.getLong(2);
                 if (code == 0L) {
-                    code = SnowFlakeUtils.getInstance().nextId();
+                    code = CodeGenerateUtils.getInstance().genCode();
                 }
                 processDefinition.setCode(code);
                 processDefinition.setVersion(Constants.VERSION_FIRST);

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/upgrade/ProjectDao.java
Patch:
@@ -17,8 +17,8 @@
 
 package org.apache.dolphinscheduler.dao.upgrade;
 
+import org.apache.dolphinscheduler.common.utils.CodeGenerateUtils;
 import org.apache.dolphinscheduler.common.utils.ConnectionUtils;
-import org.apache.dolphinscheduler.common.utils.SnowFlakeUtils;
 
 import java.sql.Connection;
 import java.sql.PreparedStatement;
@@ -51,7 +51,7 @@ public Map<Integer, Long> queryAllProject(Connection conn) {
                 Integer id = rs.getInt(1);
                 long code = rs.getLong(2);
                 if (code == 0L) {
-                    code = SnowFlakeUtils.getInstance().nextId();
+                    code = CodeGenerateUtils.getInstance().genCode();
                 }
                 projectMap.put(id, code);
             }

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/upgrade/UpgradeDao.java
Patch:
@@ -25,11 +25,11 @@
 import org.apache.dolphinscheduler.common.enums.TimeoutFlag;
 import org.apache.dolphinscheduler.common.process.ResourceInfo;
 import org.apache.dolphinscheduler.common.task.TaskTimeoutParameter;
+import org.apache.dolphinscheduler.common.utils.CodeGenerateUtils;
 import org.apache.dolphinscheduler.common.utils.ConnectionUtils;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
 import org.apache.dolphinscheduler.common.utils.SchemaUtils;
 import org.apache.dolphinscheduler.common.utils.ScriptRunner;
-import org.apache.dolphinscheduler.common.utils.SnowFlakeUtils;
 import org.apache.dolphinscheduler.dao.datasource.ConnectionFactory;
 import org.apache.dolphinscheduler.dao.entity.ProcessDefinition;
 import org.apache.dolphinscheduler.dao.entity.ProcessDefinitionLog;
@@ -673,7 +673,7 @@ private void splitProcessDefinitionJson(List<ProcessDefinition> processDefinitio
                 String name = task.get("name").asText();
                 taskDefinitionLog.setName(name);
                 taskDefinitionLog.setWorkerGroup(task.get("workerGroup").asText());
-                long taskCode = SnowFlakeUtils.getInstance().nextId();
+                long taskCode = CodeGenerateUtils.getInstance().genCode();
                 taskDefinitionLog.setCode(taskCode);
                 taskDefinitionLog.setVersion(Constants.VERSION_FIRST);
                 taskDefinitionLog.setProjectCode(processDefinition.getProjectCode());

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java
Patch:
@@ -284,6 +284,9 @@ public enum Status {
     MOVE_PROCESS_TASK_RELATION_ERROR(50047, "move process task relation error", "移动任务到其他工作流错误"),
     DELETE_TASK_PROCESS_RELATION_ERROR(50048, "delete process task relation error", "删除工作流任务关系错误"),
     QUERY_TASK_PROCESS_RELATION_ERROR(50049, "query process task relation error", "查询工作流任务关系错误"),
+    TASK_DEFINE_STATE_ONLINE(50050, "task definition {0} is already on line", "任务定义[{0}]已上线"),
+    TASK_HAS_DOWNSTREAM(50051, "Task [{0}] exists downstream dependence", "任务[{0}]存在下游依赖"),
+    MAIN_TABLE_USING_VERSION(50052, "the version that the master table is using", "主表正在使用该版本"),
     HDFS_NOT_STARTUP(60001, "hdfs not startup", "hdfs未启用"),
 
     /**

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/DataSourceServiceTest.java
Patch:
@@ -350,7 +350,7 @@ public void buildParameterWithDecodePassword() {
         mysqlDatasourceParamDTO.setOther(other);
         ConnectionParam connectionParam = DatasourceUtil.buildConnectionParams(mysqlDatasourceParamDTO);
         String expected = "{\"user\":\"test\",\"password\":\"IUAjJCVeJipNVEl6TkRVMg==\",\"address\":\"jdbc:mysql://192.168.9.1:1521\",\"database\":\"im\",\"jdbcUrl\":\"jdbc:mysql://192.168.9.1:1521/"
-                + "im\",\"driverClassName\":\"com.mysql.jdbc.Driver\",\"validationQuery\":\"select 1\",\"props\":{\"autoDeserialize\":\"yes\",\"allowUrlInLocalInfile\":\"true\"}}";
+                + "im\",\"driverClassName\":\"com.mysql.cj.jdbc.Driver\",\"validationQuery\":\"select 1\",\"props\":{\"autoDeserialize\":\"yes\",\"allowUrlInLocalInfile\":\"true\"}}";
         Assert.assertEquals(expected, JSONUtils.toJsonString(connectionParam));
 
         PropertyUtils.setValue(Constants.DATASOURCE_ENCRYPTION_ENABLE, "false");
@@ -362,7 +362,7 @@ public void buildParameterWithDecodePassword() {
         mysqlDatasourceParamDTO.setPassword("123456");
         connectionParam = DatasourceUtil.buildConnectionParams(mysqlDatasourceParamDTO);
         expected = "{\"user\":\"test\",\"password\":\"123456\",\"address\":\"jdbc:mysql://192.168.9.1:1521\",\"database\":\"im\","
-                + "\"jdbcUrl\":\"jdbc:mysql://192.168.9.1:1521/im\",\"driverClassName\":\"com.mysql.jdbc.Driver\",\"validationQuery\":\"select 1\"}";
+                + "\"jdbcUrl\":\"jdbc:mysql://192.168.9.1:1521/im\",\"driverClassName\":\"com.mysql.cj.jdbc.Driver\",\"validationQuery\":\"select 1\"}";
         Assert.assertEquals(expected, JSONUtils.toJsonString(connectionParam));
     }
 

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-api/src/main/java/org/apache/dolphinscheduler/plugin/datasource/api/datasource/mysql/MysqlDatasourceProcessor.java
Patch:
@@ -98,7 +98,7 @@ public ConnectionParam createConnectionParams(String connectionJson) {
 
     @Override
     public String getDatasourceDriver() {
-        return Constants.COM_MYSQL_JDBC_DRIVER;
+        return Constants.COM_MYSQL_CJ_JDBC_DRIVER;
     }
 
     @Override

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-api/src/test/java/org/apache/dolphinscheduler/plugin/datasource/api/datasource/mysql/MysqlDatasourceProcessorTest.java
Patch:
@@ -74,7 +74,7 @@ public void testCreateConnectionParams2() {
 
     @Test
     public void testGetDatasourceDriver() {
-        Assert.assertEquals(Constants.COM_MYSQL_JDBC_DRIVER, mysqlDatasourceProcessor.getDatasourceDriver());
+        Assert.assertEquals(Constants.COM_MYSQL_CJ_JDBC_DRIVER, mysqlDatasourceProcessor.getDatasourceDriver());
     }
 
     @Test

File: dolphinscheduler-spi/src/main/java/org/apache/dolphinscheduler/spi/task/TaskConstants.java
Patch:
@@ -259,7 +259,7 @@ private TaskConstants() {
      * driver
      */
     public static final String ORG_POSTGRESQL_DRIVER = "org.postgresql.Driver";
-    public static final String COM_MYSQL_JDBC_DRIVER = "com.mysql.jdbc.Driver";
+    public static final String COM_MYSQL_CJ_JDBC_DRIVER = "com.mysql.cj.jdbc.Driver";
     public static final String ORG_APACHE_HIVE_JDBC_HIVE_DRIVER = "org.apache.hive.jdbc.HiveDriver";
     public static final String COM_CLICKHOUSE_JDBC_DRIVER = "ru.yandex.clickhouse.ClickHouseDriver";
     public static final String COM_ORACLE_JDBC_DRIVER = "oracle.jdbc.driver.OracleDriver";

File: dolphinscheduler-spi/src/main/java/org/apache/dolphinscheduler/spi/utils/Constants.java
Patch:
@@ -122,7 +122,7 @@ private Constants() {
      * driver
      */
     public static final String ORG_POSTGRESQL_DRIVER = "org.postgresql.Driver";
-    public static final String COM_MYSQL_JDBC_DRIVER = "com.mysql.jdbc.Driver";
+    public static final String COM_MYSQL_CJ_JDBC_DRIVER = "com.mysql.cj.jdbc.Driver";
     public static final String ORG_APACHE_HIVE_JDBC_HIVE_DRIVER = "org.apache.hive.jdbc.HiveDriver";
     public static final String COM_CLICKHOUSE_JDBC_DRIVER = "ru.yandex.clickhouse.ClickHouseDriver";
     public static final String COM_ORACLE_JDBC_DRIVER = "oracle.jdbc.OracleDriver";

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/EventExecuteService.java
Patch:
@@ -118,6 +118,7 @@ private void eventHandler() {
         for (WorkflowExecuteThread workflowExecuteThread : this.processInstanceExecCacheManager.getAll()) {
             if (workflowExecuteThread.eventSize() == 0
                     || StringUtils.isEmpty(workflowExecuteThread.getKey())
+                    || !workflowExecuteThread.isStart()
                     || eventHandlerMap.containsKey(workflowExecuteThread.getKey())) {
                 continue;
             }
@@ -186,12 +187,13 @@ private void notifyProcess(ProcessInstance processInstance, TaskInstance taskIns
                     StateEventChangeCommand stateEventChangeCommand = new StateEventChangeCommand(
                             processInstanceId, 0, workflowExecuteThread.getProcessInstance().getState(), processInstance.getId(), taskInstance.getId()
                     );
-
                     stateEventCallbackService.sendResult(address, port, stateEventChangeCommand.convert2Command());
                 }
 
                 @Override
                 public void onFailure(Throwable throwable) {
+                    logger.info("handle events {} failed.", processInstanceId);
+                    logger.info("handle events failed.", throwable);
                 }
             };
             Futures.addCallback(future, futureCallback, this.listeningExecutorService);

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/WorkflowExecuteThread.java
Patch:
@@ -1007,7 +1007,7 @@ private boolean processFailed() {
                 return true;
             }
             if (processInstance.getFailureStrategy() == FailureStrategy.CONTINUE) {
-                return readyToSubmitTaskQueue.size() == 0 || activeTaskProcessorMaps.size() == 0;
+                return readyToSubmitTaskQueue.size() == 0 && activeTaskProcessorMaps.size() == 0;
             }
         }
         return false;

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ExecutorServiceTest.java
Patch:
@@ -279,9 +279,9 @@ public void testExecuteRepeatRunning() {
 
     @Test
     public void testStartCheckByProcessDefinedCode() {
-        List<Integer> ids = new ArrayList<>();
-        ids.add(1);
-        Mockito.doNothing().when(processService).recurseFindSubProcessId(1, ids);
+        List<Long> ids = new ArrayList<>();
+        ids.add(1L);
+        Mockito.doNothing().when(processService).recurseFindSubProcess(1, ids);
 
         List<ProcessDefinition> processDefinitionList = new ArrayList<>();
         ProcessDefinition processDefinition = new ProcessDefinition();

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/utils/CheckUtilsTest.java
Patch:
@@ -128,7 +128,7 @@ public void testCheckTaskNodeParameters() {
         taskNode.setType(TaskType.SUB_PROCESS.getDesc());
         assertFalse(CheckUtils.checkTaskNodeParameters(taskNode));
 
-        subProcessParameters.setProcessDefinitionId(1234);
+        subProcessParameters.setProcessDefinitionCode(1234L);
         taskNode.setParams(JSONUtils.toJsonString(subProcessParameters));
         taskNode.setType(TaskType.SUB_PROCESS.getDesc());
         assertTrue(CheckUtils.checkTaskNodeParameters(taskNode));

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/Constants.java
Patch:
@@ -323,7 +323,7 @@ private Constants() {
 
     public static final String CMD_PARAM_SUB_PROCESS_PARENT_INSTANCE_ID = "parentProcessInstanceId";
 
-    public static final String CMD_PARAM_SUB_PROCESS_DEFINE_ID = "processDefinitionId";
+    public static final String CMD_PARAM_SUB_PROCESS_DEFINE_CODE = "processDefinitionCode";
 
     public static final String CMD_PARAM_START_NODES = "StartNodeList";
 

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/TaskInstanceMapperTest.java
Patch:
@@ -304,7 +304,6 @@ public void testCountTask() {
         definition.setCreateTime(new Date());
         definition.setUpdateTime(new Date());
         processDefinitionMapper.insert(definition);
-        //task.setProcessDefinitionId(definition.getId());
         taskInstanceMapper.updateById(task);
 
         int countTask = taskInstanceMapper.countTask(
@@ -340,7 +339,6 @@ public void testCountTaskInstanceStateByUser() {
         definition.setCreateTime(new Date());
         definition.setUpdateTime(new Date());
         processDefinitionMapper.insert(definition);
-        //task.setProcessDefinitionId(definition.getId());
         taskInstanceMapper.updateById(task);
 
 

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/MonitorDBDao.java
Patch:
@@ -31,7 +31,7 @@
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Component;
 
-import com.alibaba.druid.pool.DruidDataSource;
+import com.zaxxer.hikari.HikariDataSource;
 
 
 /**
@@ -45,7 +45,7 @@ public class MonitorDBDao {
     public static final String VARIABLE_NAME = "variable_name";
 
     @Autowired
-    private DruidDataSource dataSource;
+    private HikariDataSource dataSource;
 
     /**
      * get current db performance

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/datasource/ConnectionFactory.java
Patch:
@@ -82,7 +82,7 @@ public DataSource getDataSource() {
     /**
      * get the data source
      *
-     * @return druid dataSource
+     * @return dataSource
      */
     private DataSource buildDataSource() throws SQLException {
 

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/upgrade/UpgradeDao.java
Patch:
@@ -81,7 +81,7 @@ public abstract class UpgradeDao {
 
     /**
      * get datasource
-     * @return DruidDataSource
+     * @return DataSource
      */
     public static DataSource getDataSource(){
         return ConnectionFactory.getInstance().getDataSource();

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-api/src/test/java/org/apache/dolphinscheduler/plugin/datasource/api/client/CommonDataSourceClientTest.java
Patch:
@@ -34,11 +34,11 @@
 import org.powermock.modules.junit4.PowerMockRunner;
 import org.springframework.jdbc.core.JdbcTemplate;
 
-import com.alibaba.druid.pool.DruidDataSource;
+import com.zaxxer.hikari.HikariDataSource;
 
 @RunWith(PowerMockRunner.class)
 @SuppressStaticInitializationFor("org.apache.dolphinscheduler.plugin.datasource.api.client.CommonDataSourceClient")
-@PrepareForTest(value = {DruidDataSource.class, CommonDataSourceClient.class, JdbcDataSourceProvider.class, JdbcTemplate.class, Connection.class})
+@PrepareForTest(value = {HikariDataSource.class, CommonDataSourceClient.class, JdbcDataSourceProvider.class, JdbcTemplate.class, Connection.class})
 public class CommonDataSourceClientTest {
 
     @Mock

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-hive/src/main/java/org/apache/dolphinscheduler/plugin/datasource/hive/HiveDataSourceClient.java
Patch:
@@ -39,13 +39,13 @@
 import org.slf4j.LoggerFactory;
 import org.springframework.jdbc.core.JdbcTemplate;
 
-import com.alibaba.druid.pool.DruidDataSource;
+import com.zaxxer.hikari.HikariDataSource;
 
 public class HiveDataSourceClient extends CommonDataSourceClient {
 
     private static final Logger logger = LoggerFactory.getLogger(HiveDataSourceClient.class);
 
-    protected DruidDataSource oneSessionDataSource;
+    protected HikariDataSource oneSessionDataSource;
     private JdbcTemplate oneSessionJdbcTemplate;
     private UserGroupInformation ugi;
 

File: dolphinscheduler-python/src/main/java/org/apache/dolphinscheduler/server/PythonGatewayServer.java
Patch:
@@ -71,7 +71,8 @@
         "org.apache.dolphinscheduler.server.master.*",
         "org.apache.dolphinscheduler.server.worker.*",
         "org.apache.dolphinscheduler.server.monitor.*",
-        "org.apache.dolphinscheduler.server.log.*"
+        "org.apache.dolphinscheduler.server.log.*",
+        "org.apache.dolphinscheduler.alert.*"
     })
 })
 public class PythonGatewayServer extends SpringBootServletInitializer {

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/quartz/QuartzExecutors.java
Patch:
@@ -173,7 +173,7 @@ private void init() {
             properties.setProperty(ORG_QUARTZ_JOBSTORE_CLUSTERCHECKININTERVAL, conf.getString(ORG_QUARTZ_JOBSTORE_CLUSTERCHECKININTERVAL, QUARTZ_CLUSTERCHECKININTERVAL));
             properties.setProperty(ORG_QUARTZ_JOBSTORE_ACQUIRETRIGGERSWITHINLOCK, conf.getString(ORG_QUARTZ_JOBSTORE_ACQUIRETRIGGERSWITHINLOCK, QUARTZ_ACQUIRETRIGGERSWITHINLOCK));
             properties.setProperty(ORG_QUARTZ_JOBSTORE_DATASOURCE, conf.getString(ORG_QUARTZ_JOBSTORE_DATASOURCE, QUARTZ_DATASOURCE));
-            properties.setProperty(ORG_QUARTZ_DATASOURCE_MYDS_CONNECTIONPROVIDER_CLASS, conf.getString(ORG_QUARTZ_DATASOURCE_MYDS_CONNECTIONPROVIDER_CLASS, DruidConnectionProvider.class.getName()));
+            properties.setProperty(ORG_QUARTZ_DATASOURCE_MYDS_CONNECTIONPROVIDER_CLASS, conf.getString(ORG_QUARTZ_DATASOURCE_MYDS_CONNECTIONPROVIDER_CLASS, HikariConnectionProvider.class.getName()));
 
             schedulerFactory.initialize(properties);
             scheduler = schedulerFactory.getScheduler();

File: dolphinscheduler-standalone-server/src/main/java/org/apache/dolphinscheduler/server/StandaloneServer.java
Patch:
@@ -41,6 +41,6 @@ public static void main(String[] args) throws Exception {
             WorkerServer.class,
             AlertServer.class,
             PythonGatewayServer.class
-        ).profiles("h2").run(args);
+        ).profiles("h2", "api").run(args);
     }
 }

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/ParameterUtils.java
Patch:
@@ -99,8 +99,8 @@ public static String curingGlobalParams(Map<String, String> globalParamMap, List
         }
         Map<String, String> allParamMap = new HashMap<>();
         //If it is a complement, a complement time needs to be passed in, according to the task type
-        Map<String, String> timeParams = BusinessTimeUtils
-            .getBusinessTime(commandType, scheduleTime);
+        Map<String, String> timeParams = BusinessTimeUtils.
+            getBusinessTime(commandType, scheduleTime);
 
         if (timeParams != null) {
             allParamMap.putAll(timeParams);

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/registry/MasterRegistryClient.java
Patch:
@@ -309,8 +309,9 @@ private void failoverWorker(String workerHost, boolean needCheckWorkerAlive, boo
 
                 taskInstance.setState(ExecutionStatus.NEED_FAULT_TOLERANCE);
                 processService.saveTaskInstance(taskInstance);
+
                 if (!processInstanceExecCacheManager.contains(processInstance.getId())) {
-                    return;
+                    continue;
                 }
                 WorkflowExecuteThread workflowExecuteThreadNotify = processInstanceExecCacheManager.getByProcessInstanceId(processInstance.getId());
                 StateEvent stateEvent = new StateEvent();

File: dolphinscheduler-alert/dolphinscheduler-alert-server/src/main/java/org/apache/dolphinscheduler/alert/AlertServer.java
Patch:
@@ -38,10 +38,10 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.boot.SpringApplication;
-import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
 import org.springframework.context.annotation.ComponentScan;
 
-@SpringBootApplication
+@EnableAutoConfiguration
 @ComponentScan(value = {
     "org.apache.dolphinscheduler.alert",
     "org.apache.dolphinscheduler.dao"

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/log/LoggerServer.java
Patch:
@@ -17,11 +17,11 @@
 
 package org.apache.dolphinscheduler.server.log;
 
-
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.remote.NettyRemotingServer;
 import org.apache.dolphinscheduler.remote.command.CommandType;
 import org.apache.dolphinscheduler.remote.config.NettyServerConfig;
+
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -47,7 +47,7 @@ public class LoggerServer {
      */
     private final LoggerRequestProcessor requestProcessor;
 
-    public LoggerServer(){
+    public LoggerServer() {
         this.serverConfig = new NettyServerConfig();
         this.serverConfig.setListenPort(Constants.RPC_PORT);
         this.server = new NettyRemotingServer(serverConfig);
@@ -72,7 +72,7 @@ public static void main(String[] args)  {
      */
     public void start()  {
         this.server.start();
-        logger.info("logger server started, listening on port : {}" , Constants.RPC_PORT);
+        logger.info("logger server started, listening on port : {}", Constants.RPC_PORT);
         Runtime.getRuntime().addShutdownHook(new Thread() {
             @Override
             public void run() {

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java
Patch:
@@ -286,7 +286,6 @@ public enum Status {
      * for monitor
      */
     QUERY_DATABASE_STATE_ERROR(70001, "query database state error", "查询数据库状态错误"),
-    QUERY_ZOOKEEPER_STATE_ERROR(70002, "query zookeeper state error", "查询zookeeper状态错误"),
 
     CREATE_ACCESS_TOKEN_ERROR(70010, "create access token error", "创建访问token错误"),
     GENERATE_TOKEN_ERROR(70011, "generate token error", "生成token错误"),

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java
Patch:
@@ -210,6 +210,8 @@ public enum Status {
     QUERY_WORKER_ADDRESS_LIST_FAIL(10178, "query worker address list fail ", "查询worker地址列表失败"),
     TRANSFORM_PROJECT_OWNERSHIP(10179, "Please transform project ownership [{0}]", "请先转移项目所有权[{0}]"),
     QUERY_ALERT_GROUP_ERROR(10180, "query alert group error", "查询告警组错误"),
+    CURRENT_LOGIN_USER_TENANT_NOT_EXIST(10181, "the tenant of the currently login user is not specified", "未指定当前登录用户的租户"),
+
 
     UDF_FUNCTION_NOT_EXIST(20001, "UDF function not found", "UDF函数不存在"),
     UDF_FUNCTION_EXISTS(20002, "UDF function already exists", "UDF函数已存在"),

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ResourcesServiceImpl.java
Patch:
@@ -768,7 +768,7 @@ public Result<Object> verifyResourceName(String fullName, ResourceType type, Use
                     putMsg(result,Status.HDFS_OPERATION_ERROR);
                 }
             } else {
-                putMsg(result,Status.TENANT_NOT_EXIST);
+                putMsg(result,Status.CURRENT_LOGIN_USER_TENANT_NOT_EXIST);
             }
         }
 
@@ -1285,7 +1285,7 @@ private String getTenantCode(int userId,Result<Object> result) {
         Tenant tenant = tenantMapper.queryById(user.getTenantId());
         if (tenant == null) {
             logger.error("tenant not exists");
-            putMsg(result, Status.TENANT_NOT_EXIST);
+            putMsg(result, Status.CURRENT_LOGIN_USER_TENANT_NOT_EXIST);
             return null;
         }
         return tenant.getTenantCode();

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/DataSourceService.java
Patch:
@@ -18,10 +18,10 @@
 package org.apache.dolphinscheduler.api.service;
 
 import org.apache.dolphinscheduler.api.utils.Result;
-import org.apache.dolphinscheduler.common.datasource.BaseDataSourceParamDTO;
-import org.apache.dolphinscheduler.common.datasource.ConnectionParam;
-import org.apache.dolphinscheduler.common.enums.DbType;
 import org.apache.dolphinscheduler.dao.entity.User;
+import org.apache.dolphinscheduler.plugin.datasource.api.datasource.BaseDataSourceParamDTO;
+import org.apache.dolphinscheduler.spi.datasource.ConnectionParam;
+import org.apache.dolphinscheduler.spi.enums.DbType;
 
 import java.util.Map;
 

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/DataSourceControllerTest.java
Patch:
@@ -24,8 +24,8 @@
 
 import org.apache.dolphinscheduler.api.enums.Status;
 import org.apache.dolphinscheduler.api.utils.Result;
-import org.apache.dolphinscheduler.common.datasource.mysql.MysqlDatasourceParamDTO;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
+import org.apache.dolphinscheduler.plugin.datasource.api.datasource.mysql.MysqlDatasourceParamDTO;
 
 import java.util.HashMap;
 

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/MonitorServiceTest.java
Patch:
@@ -20,10 +20,10 @@
 import org.apache.dolphinscheduler.api.enums.Status;
 import org.apache.dolphinscheduler.api.service.impl.MonitorServiceImpl;
 import org.apache.dolphinscheduler.common.Constants;
-import org.apache.dolphinscheduler.common.enums.DbType;
 import org.apache.dolphinscheduler.common.model.Server;
 import org.apache.dolphinscheduler.dao.MonitorDBDao;
 import org.apache.dolphinscheduler.dao.entity.MonitorRecord;
+import org.apache.dolphinscheduler.spi.enums.DbType;
 
 import org.apache.commons.collections.CollectionUtils;
 

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/CommonUtils.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.dolphinscheduler.common.utils;
 
 import org.apache.dolphinscheduler.common.Constants;
-import org.apache.dolphinscheduler.common.enums.ResUploadType;
+import org.apache.dolphinscheduler.spi.enums.ResUploadType;
 
 import org.apache.commons.codec.binary.Base64;
 import org.apache.commons.lang.StringUtils;

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/PropertyUtils.java
Patch:
@@ -20,7 +20,7 @@
 import static org.apache.dolphinscheduler.common.Constants.COMMON_PROPERTIES_PATH;
 
 import org.apache.dolphinscheduler.common.Constants;
-import org.apache.dolphinscheduler.common.enums.ResUploadType;
+import org.apache.dolphinscheduler.spi.enums.ResUploadType;
 
 import org.apache.directory.api.util.Strings;
 

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/MonitorRecord.java
Patch:
@@ -16,12 +16,13 @@
  */
 package org.apache.dolphinscheduler.dao.entity;
 
-import com.fasterxml.jackson.annotation.JsonFormat;
-import org.apache.dolphinscheduler.common.enums.DbType;
 import org.apache.dolphinscheduler.common.enums.Flag;
+import org.apache.dolphinscheduler.spi.enums.DbType;
 
 import java.util.Date;
 
+import com.fasterxml.jackson.annotation.JsonFormat;
+
 /**
  * monitor record for database
  */

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/upgrade/UpgradeDao.java
Patch:
@@ -14,11 +14,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.dao.upgrade;
 
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.ConditionType;
-import org.apache.dolphinscheduler.common.enums.DbType;
 import org.apache.dolphinscheduler.common.enums.Flag;
 import org.apache.dolphinscheduler.common.enums.Priority;
 import org.apache.dolphinscheduler.common.enums.TaskType;
@@ -36,6 +36,7 @@
 import org.apache.dolphinscheduler.dao.entity.ProcessDefinitionLog;
 import org.apache.dolphinscheduler.dao.entity.ProcessTaskRelationLog;
 import org.apache.dolphinscheduler.dao.entity.TaskDefinitionLog;
+import org.apache.dolphinscheduler.spi.enums.DbType;
 
 import org.apache.commons.collections.CollectionUtils;
 import org.apache.commons.lang.StringUtils;

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/DataSourceMapperTest.java
Patch:
@@ -24,13 +24,13 @@
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertThat;
 
-import org.apache.dolphinscheduler.common.enums.DbType;
 import org.apache.dolphinscheduler.common.enums.UserType;
 import org.apache.dolphinscheduler.common.utils.DateUtils;
 import org.apache.dolphinscheduler.dao.BaseDaoTest;
 import org.apache.dolphinscheduler.dao.entity.DataSource;
 import org.apache.dolphinscheduler.dao.entity.DatasourceUser;
 import org.apache.dolphinscheduler.dao.entity.User;
+import org.apache.dolphinscheduler.spi.enums.DbType;
 
 import java.util.Arrays;
 import java.util.Date;

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-api/src/main/java/org/apache/dolphinscheduler/plugin/datasource/api/datasource/BaseHdfsConnectionParam.java
Patch:
@@ -15,7 +15,9 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.plugin.task.datasource;
+package org.apache.dolphinscheduler.plugin.datasource.api.datasource;
+
+import org.apache.dolphinscheduler.spi.datasource.BaseConnectionParam;
 
 public class BaseHdfsConnectionParam extends BaseConnectionParam {
     protected String principal;

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-api/src/main/java/org/apache/dolphinscheduler/plugin/datasource/api/datasource/BaseHdfsDatasourceParamDTO.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.plugin.task.datasource;
+package org.apache.dolphinscheduler.plugin.datasource.api.datasource;
 
 public abstract class BaseHdfsDatasourceParamDTO extends BaseDataSourceParamDTO {
 

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-api/src/main/java/org/apache/dolphinscheduler/plugin/datasource/api/datasource/clickhouse/ClickHouseDatasourceParamDTO.java
Patch:
@@ -15,9 +15,9 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.plugin.task.datasource.clickhouse;
+package org.apache.dolphinscheduler.plugin.datasource.api.datasource.clickhouse;
 
-import org.apache.dolphinscheduler.plugin.task.datasource.BaseDataSourceParamDTO;
+import org.apache.dolphinscheduler.plugin.datasource.api.datasource.BaseDataSourceParamDTO;
 import org.apache.dolphinscheduler.spi.enums.DbType;
 
 public class ClickHouseDatasourceParamDTO extends BaseDataSourceParamDTO {

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-api/src/main/java/org/apache/dolphinscheduler/plugin/datasource/api/datasource/db2/Db2DatasourceParamDTO.java
Patch:
@@ -15,9 +15,9 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.plugin.task.datasource.db2;
+package org.apache.dolphinscheduler.plugin.datasource.api.datasource.db2;
 
-import org.apache.dolphinscheduler.plugin.task.datasource.BaseDataSourceParamDTO;
+import org.apache.dolphinscheduler.plugin.datasource.api.datasource.BaseDataSourceParamDTO;
 import org.apache.dolphinscheduler.spi.enums.DbType;
 
 public class Db2DatasourceParamDTO extends BaseDataSourceParamDTO {

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-api/src/main/java/org/apache/dolphinscheduler/plugin/datasource/api/datasource/hive/HiveDataSourceParamDTO.java
Patch:
@@ -15,9 +15,9 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.plugin.task.datasource.hive;
+package org.apache.dolphinscheduler.plugin.datasource.api.datasource.hive;
 
-import org.apache.dolphinscheduler.plugin.task.datasource.BaseHdfsDatasourceParamDTO;
+import org.apache.dolphinscheduler.plugin.datasource.api.datasource.BaseHdfsDatasourceParamDTO;
 import org.apache.dolphinscheduler.spi.enums.DbType;
 
 public class HiveDataSourceParamDTO extends BaseHdfsDatasourceParamDTO {

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-api/src/main/java/org/apache/dolphinscheduler/plugin/datasource/api/datasource/mysql/MysqlDatasourceParamDTO.java
Patch:
@@ -15,9 +15,9 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.plugin.task.datasource.mysql;
+package org.apache.dolphinscheduler.plugin.datasource.api.datasource.mysql;
 
-import org.apache.dolphinscheduler.plugin.task.datasource.BaseDataSourceParamDTO;
+import org.apache.dolphinscheduler.plugin.datasource.api.datasource.BaseDataSourceParamDTO;
 import org.apache.dolphinscheduler.spi.enums.DbType;
 
 public class MysqlDatasourceParamDTO extends BaseDataSourceParamDTO {

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-api/src/main/java/org/apache/dolphinscheduler/plugin/datasource/api/datasource/oracle/OracleDatasourceParamDTO.java
Patch:
@@ -15,9 +15,9 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.plugin.task.datasource.oracle;
+package org.apache.dolphinscheduler.plugin.datasource.api.datasource.oracle;
 
-import org.apache.dolphinscheduler.plugin.task.datasource.BaseDataSourceParamDTO;
+import org.apache.dolphinscheduler.plugin.datasource.api.datasource.BaseDataSourceParamDTO;
 import org.apache.dolphinscheduler.spi.enums.DbConnectType;
 import org.apache.dolphinscheduler.spi.enums.DbType;
 

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-api/src/main/java/org/apache/dolphinscheduler/plugin/datasource/api/datasource/postgresql/PostgreSqlDatasourceParamDTO.java
Patch:
@@ -15,9 +15,9 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.plugin.task.datasource.postgresql;
+package org.apache.dolphinscheduler.plugin.datasource.api.datasource.postgresql;
 
-import org.apache.dolphinscheduler.plugin.task.datasource.BaseDataSourceParamDTO;
+import org.apache.dolphinscheduler.plugin.datasource.api.datasource.BaseDataSourceParamDTO;
 import org.apache.dolphinscheduler.spi.enums.DbType;
 
 public class PostgreSqlDatasourceParamDTO extends BaseDataSourceParamDTO {

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-api/src/main/java/org/apache/dolphinscheduler/plugin/datasource/api/datasource/presto/PrestoDatasourceParamDTO.java
Patch:
@@ -15,9 +15,9 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.plugin.task.datasource.presto;
+package org.apache.dolphinscheduler.plugin.datasource.api.datasource.presto;
 
-import org.apache.dolphinscheduler.plugin.task.datasource.BaseDataSourceParamDTO;
+import org.apache.dolphinscheduler.plugin.datasource.api.datasource.BaseDataSourceParamDTO;
 import org.apache.dolphinscheduler.spi.enums.DbType;
 
 public class PrestoDatasourceParamDTO extends BaseDataSourceParamDTO {

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-api/src/main/java/org/apache/dolphinscheduler/plugin/datasource/api/datasource/spark/SparkDatasourceParamDTO.java
Patch:
@@ -15,9 +15,9 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.plugin.task.datasource.spark;
+package org.apache.dolphinscheduler.plugin.datasource.api.datasource.spark;
 
-import org.apache.dolphinscheduler.plugin.task.datasource.BaseHdfsDatasourceParamDTO;
+import org.apache.dolphinscheduler.plugin.datasource.api.datasource.BaseHdfsDatasourceParamDTO;
 import org.apache.dolphinscheduler.spi.enums.DbType;
 
 public class SparkDatasourceParamDTO extends BaseHdfsDatasourceParamDTO {

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-api/src/main/java/org/apache/dolphinscheduler/plugin/datasource/api/datasource/sqlserver/SqlServerDatasourceParamDTO.java
Patch:
@@ -15,9 +15,9 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.plugin.task.datasource.sqlserver;
+package org.apache.dolphinscheduler.plugin.datasource.api.datasource.sqlserver;
 
-import org.apache.dolphinscheduler.plugin.task.datasource.BaseDataSourceParamDTO;
+import org.apache.dolphinscheduler.plugin.datasource.api.datasource.BaseDataSourceParamDTO;
 import org.apache.dolphinscheduler.spi.enums.DbType;
 
 public class SqlServerDatasourceParamDTO extends BaseDataSourceParamDTO {

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-api/src/main/java/org/apache/dolphinscheduler/plugin/datasource/api/utils/CommonUtils.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.plugin.task.util;
+package org.apache.dolphinscheduler.plugin.datasource.api.utils;
 
 import static org.apache.dolphinscheduler.spi.task.TaskConstants.HADOOP_SECURITY_AUTHENTICATION;
 import static org.apache.dolphinscheduler.spi.task.TaskConstants.HADOOP_SECURITY_AUTHENTICATION_STARTUP_STATE;
@@ -41,8 +41,6 @@
  */
 public class CommonUtils {
 
-    public static final String resourceUploadPath = PropertyUtils.getString(TaskConstants.RESOURCE_UPLOAD_PATH, "/dolphinscheduler");
-
     private CommonUtils() {
         throw new UnsupportedOperationException("Construct CommonUtils");
     }
@@ -130,6 +128,7 @@ public static String getHdfsTenantDir(String tenantCode) {
      * @return data hdfs path
      */
     public static String getHdfsDataBasePath() {
+        String resourceUploadPath = PropertyUtils.getString(TaskConstants.RESOURCE_UPLOAD_PATH, "/dolphinscheduler");
         if ("/".equals(resourceUploadPath)) {
             // if basepath is configured to /,  the generated url may be  //default/resources (with extra leading /)
             return "";

File: dolphinscheduler-datasource-plugin/dolphinscheduler-datasource-api/src/main/java/org/apache/dolphinscheduler/plugin/datasource/api/utils/PasswordUtils.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.plugin.task.datasource;
+package org.apache.dolphinscheduler.plugin.datasource.api.utils;
 
 import static org.apache.dolphinscheduler.spi.task.TaskConstants.DATASOURCE_ENCRYPTION_ENABLE;
 import static org.apache.dolphinscheduler.spi.task.TaskConstants.DATASOURCE_ENCRYPTION_SALT;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/WorkerServer.java
Patch:
@@ -36,7 +36,7 @@
 import org.apache.dolphinscheduler.server.worker.runner.WorkerManagerThread;
 import org.apache.dolphinscheduler.service.alert.AlertClientService;
 import org.apache.dolphinscheduler.service.bean.SpringApplicationContext;
-import org.apache.dolphinscheduler.spi.exception.PluginNotFoundException;
+import org.apache.dolphinscheduler.spi.exception.PluginException;
 import org.apache.dolphinscheduler.spi.plugin.DolphinPluginLoader;
 import org.apache.dolphinscheduler.spi.plugin.DolphinPluginManagerConfig;
 import org.apache.dolphinscheduler.spi.utils.StringUtils;
@@ -192,7 +192,7 @@ private void initTaskPlugin() {
             throw new RuntimeException("Load Task Plugin Failed !", e);
         }
         if (MapUtils.isEmpty(taskPluginManager.getTaskChannelMap())) {
-            throw new PluginNotFoundException("Task Plugin Not Found,Please Check Config File");
+            throw new PluginException("Task Plugin Not Found,Please Check Config File");
         }
     }
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/runner/TaskExecuteThread.java
Patch:
@@ -41,7 +41,7 @@
 import org.apache.dolphinscheduler.server.worker.processor.TaskCallbackService;
 import org.apache.dolphinscheduler.service.alert.AlertClientService;
 import org.apache.dolphinscheduler.service.queue.entity.TaskExecutionContext;
-import org.apache.dolphinscheduler.spi.exception.PluginNotFoundException;
+import org.apache.dolphinscheduler.spi.exception.PluginException;
 import org.apache.dolphinscheduler.spi.task.AbstractTask;
 import org.apache.dolphinscheduler.spi.task.TaskAlertInfo;
 import org.apache.dolphinscheduler.spi.task.TaskChannel;
@@ -171,7 +171,7 @@ public void run() {
 
             TaskChannel taskChannel = taskPluginManager.getTaskChannelMap().get(taskExecutionContext.getTaskType());
             if (null == taskChannel) {
-                throw new PluginNotFoundException(String.format("%s Task Plugin Not Found,Please Check Config File.", taskExecutionContext.getTaskType()));
+                throw PluginException.getInstance(String.format("%s Task Plugin Not Found,Please Check Config File.", taskExecutionContext.getTaskType()));
             }
             TaskRequest taskRequest = JSONUtils.parseObject(JSONUtils.toJsonString(taskExecutionContext), TaskRequest.class);
             String taskLogName = LoggerUtils.buildTaskId(LoggerUtils.TASK_LOGGER_INFO_PREFIX,

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/master/consumer/TaskPriorityQueueConsumerTest.java
Patch:
@@ -18,7 +18,6 @@
 package org.apache.dolphinscheduler.server.master.consumer;
 
 import org.apache.dolphinscheduler.common.enums.CommandType;
-import org.apache.dolphinscheduler.common.enums.DbType;
 import org.apache.dolphinscheduler.common.enums.ExecutionStatus;
 import org.apache.dolphinscheduler.common.enums.Priority;
 import org.apache.dolphinscheduler.common.enums.TaskType;
@@ -34,6 +33,7 @@
 import org.apache.dolphinscheduler.service.process.ProcessService;
 import org.apache.dolphinscheduler.service.queue.TaskPriority;
 import org.apache.dolphinscheduler.service.queue.TaskPriorityQueue;
+import org.apache.dolphinscheduler.spi.enums.DbType;
 
 import java.util.Date;
 import java.util.concurrent.TimeUnit;

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/master/runner/task/CommonTaskProcessorTest.java
Patch:
@@ -18,7 +18,6 @@
 package org.apache.dolphinscheduler.server.master.runner.task;
 
 import org.apache.dolphinscheduler.common.enums.CommandType;
-import org.apache.dolphinscheduler.common.enums.DbType;
 import org.apache.dolphinscheduler.common.enums.ExecutionStatus;
 import org.apache.dolphinscheduler.common.enums.Priority;
 import org.apache.dolphinscheduler.spi.enums.ResourceType;
@@ -33,6 +32,7 @@
 import org.apache.dolphinscheduler.dao.entity.Tenant;
 import org.apache.dolphinscheduler.service.process.ProcessService;
 import org.apache.dolphinscheduler.service.queue.entity.TaskExecutionContext;
+import org.apache.dolphinscheduler.spi.enums.DbType;
 import org.apache.dolphinscheduler.spi.task.request.DataxTaskExecutionContext;
 
 import java.util.ArrayList;

File: dolphinscheduler-spi/src/main/java/org/apache/dolphinscheduler/spi/datasource/ConnectionParam.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.common.datasource;
+package org.apache.dolphinscheduler.spi.datasource;
 
 import java.io.Serializable;
 

File: dolphinscheduler-task-plugin/dolphinscheduler-task-sqoop/src/main/java/org/apache/dolphinscheduler/plugin/task/sqoop/generator/sources/MysqlSourceGenerator.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.dolphinscheduler.plugin.task.sqoop.generator.sources;
 
-import static org.apache.dolphinscheduler.plugin.task.datasource.PasswordUtils.decodePassword;
+import static org.apache.dolphinscheduler.plugin.datasource.api.utils.PasswordUtils.decodePassword;
 import static org.apache.dolphinscheduler.plugin.task.sqoop.SqoopConstants.COLUMNS;
 import static org.apache.dolphinscheduler.plugin.task.sqoop.SqoopConstants.DB_CONNECT;
 import static org.apache.dolphinscheduler.plugin.task.sqoop.SqoopConstants.DB_PWD;
@@ -34,12 +34,12 @@
 import static org.apache.dolphinscheduler.spi.task.TaskConstants.EQUAL_SIGN;
 import static org.apache.dolphinscheduler.spi.task.TaskConstants.SPACE;
 
-import org.apache.dolphinscheduler.plugin.task.datasource.BaseConnectionParam;
-import org.apache.dolphinscheduler.plugin.task.datasource.DatasourceUtil;
+import org.apache.dolphinscheduler.plugin.datasource.api.utils.DatasourceUtil;
 import org.apache.dolphinscheduler.plugin.task.sqoop.SqoopQueryType;
 import org.apache.dolphinscheduler.plugin.task.sqoop.generator.ISourceGenerator;
 import org.apache.dolphinscheduler.plugin.task.sqoop.parameter.SqoopParameters;
 import org.apache.dolphinscheduler.plugin.task.sqoop.parameter.sources.SourceMysqlParameter;
+import org.apache.dolphinscheduler.spi.datasource.BaseConnectionParam;
 import org.apache.dolphinscheduler.spi.enums.DbType;
 import org.apache.dolphinscheduler.spi.task.Property;
 import org.apache.dolphinscheduler.spi.task.request.TaskRequest;

File: dolphinscheduler-task-plugin/dolphinscheduler-task-sqoop/src/main/java/org/apache/dolphinscheduler/plugin/task/sqoop/generator/targets/MysqlTargetGenerator.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.dolphinscheduler.plugin.task.sqoop.generator.targets;
 
-import static org.apache.dolphinscheduler.plugin.task.datasource.PasswordUtils.decodePassword;
+import static org.apache.dolphinscheduler.plugin.datasource.api.utils.PasswordUtils.decodePassword;
 import static org.apache.dolphinscheduler.plugin.task.sqoop.SqoopConstants.COLUMNS;
 import static org.apache.dolphinscheduler.plugin.task.sqoop.SqoopConstants.DB_CONNECT;
 import static org.apache.dolphinscheduler.plugin.task.sqoop.SqoopConstants.DB_PWD;
@@ -31,11 +31,11 @@
 import static org.apache.dolphinscheduler.spi.task.TaskConstants.SINGLE_QUOTES;
 import static org.apache.dolphinscheduler.spi.task.TaskConstants.SPACE;
 
-import org.apache.dolphinscheduler.plugin.task.datasource.BaseConnectionParam;
-import org.apache.dolphinscheduler.plugin.task.datasource.DatasourceUtil;
+import org.apache.dolphinscheduler.plugin.datasource.api.utils.DatasourceUtil;
 import org.apache.dolphinscheduler.plugin.task.sqoop.generator.ITargetGenerator;
 import org.apache.dolphinscheduler.plugin.task.sqoop.parameter.SqoopParameters;
 import org.apache.dolphinscheduler.plugin.task.sqoop.parameter.targets.TargetMysqlParameter;
+import org.apache.dolphinscheduler.spi.datasource.BaseConnectionParam;
 import org.apache.dolphinscheduler.spi.enums.DbType;
 import org.apache.dolphinscheduler.spi.task.request.TaskRequest;
 import org.apache.dolphinscheduler.spi.utils.JSONUtils;

File: dolphinscheduler-alert/src/test/java/org/apache/dolphinscheduler/alert/plugin/AlertPluginManagerTest.java
Patch:
@@ -28,6 +28,7 @@
 
 import org.junit.Assert;
 import org.junit.Before;
+import org.junit.BeforeClass;
 import org.junit.Test;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -39,8 +40,8 @@ public class AlertPluginManagerTest {
 
     private static final Logger logger = LoggerFactory.getLogger(AlertPluginManagerTest.class);
 
-    @Before
-    public void setUp() {
+    @BeforeClass
+    public static void setUp() {
         System.setProperty("spring.profiles.active", "h2");
     }
 

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/security/impl/ldap/LdapAuthenticatorTest.java
Patch:
@@ -79,6 +79,7 @@ public class LdapAuthenticatorTest extends AbstractControllerTest {
     private String ip = "127.0.0.1";
     private UserType userType = UserType.GENERAL_USER;
 
+    @Override
     @Before
     public void setUp() {
         ldapAuthenticator = new LdapAuthenticator();

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/security/impl/pwd/PasswordAuthenticatorTest.java
Patch:
@@ -57,6 +57,7 @@ public class PasswordAuthenticatorTest extends AbstractControllerTest {
     private User mockUser;
     private Session mockSession;
 
+    @Override
     @Before
     public void setUp() {
         authenticator = new PasswordAuthenticator();

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/datasource/SpringConnectionFactory.java
Patch:
@@ -152,7 +152,7 @@ private void initializeH2Datasource() {
                     .setType(EmbeddedDatabaseType.H2)
                     .setScriptEncoding(Constants.UTF_8)
                     .setName("dolphinscheduler;MODE=MySQL;DATABASE_TO_LOWER=TRUE;DB_CLOSE_DELAY=-1")
-                    .addScript(PropertyUtils.getString("spring.datasource.sql.schema", "file:../sql/dolphinscheduler_h2.sql"))
+                    .addScript(PropertyUtils.getString("spring.datasource.sql.schema", "classpath:sql/dolphinscheduler_h2.sql"))
                     .build();
             logger.info("Initialize H2 DataSource success");
         }

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/upgrade/UpgradeDao.java
Patch:
@@ -214,7 +214,6 @@ private void runInitDDL(String initSqlPath) {
         if (StringUtils.isEmpty(rootDir)) {
             throw new RuntimeException("Environment variable user.dir not found");
         }
-        //String mysqlSQLFilePath = rootDir + "/sql/create/release-1.0.0_schema/mysql/dolphinscheduler_ddl.sql";
         String mysqlSQLFilePath = rootDir + initSqlPath + "dolphinscheduler_ddl.sql";
         try {
             conn = dataSource.getConnection();

File: dolphinscheduler-standalone-server/src/main/java/org/apache/dolphinscheduler/server/StandaloneServer.java
Patch:
@@ -38,7 +38,7 @@ public static void main(String[] args) throws Exception {
         Thread.currentThread().setName("Standalone-Server");
 
         System.setProperty("spring.profiles.active", "api,h2");
-        System.setProperty("spring.datasource.sql.schema", "file:./sql/dolphinscheduler_h2.sql");
+        System.setProperty("spring.datasource.sql.schema", "classpath:sql/dolphinscheduler_h2.sql");
 
         startRegistry();
 

File: dolphinscheduler-common/src/test/java/org/apache/dolphinscheduler/common/utils/SnowFlakeUtilsTest.java
Patch:
@@ -23,7 +23,8 @@ public class SnowFlakeUtilsTest {
     @Test
     public void testNextId() {
         try {
-            for (int i = 0; i < 5; i++) {
+            for (int i = 0; i < 100; i++) {
+                Thread.sleep(1);
                 System.out.println(SnowFlakeUtils.getInstance().nextId());
             }
         } catch (Exception e) {

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/upgrade/ProcessDefinitionDao.java
Patch:
@@ -148,7 +148,7 @@ public void updateProcessDefinitionCode(Connection conn, List<ProcessDefinition>
                     pstmt.setLong(1, processDefinition.getCode());
                     long projectCode = processDefinition.getProjectCode();
                     if (String.valueOf(projectCode).length() <= 10) {
-                        Integer projectId = Integer.getInteger(String.valueOf(projectCode));
+                        Integer projectId = Integer.parseInt(String.valueOf(projectCode));
                         if (projectIdCodeMap.containsKey(projectId)) {
                             projectCode = projectIdCodeMap.get(projectId);
                             processDefinition.setProjectCode(projectCode);

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/upgrade/ScheduleDao.java
Patch:
@@ -77,7 +77,7 @@ public void updateScheduleCode(Connection conn, Map<Integer, Long> scheduleMap,
                 try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
                     long projectDefinitionCode = entry.getValue();
                     if (String.valueOf(projectDefinitionCode).length() <= 10) {
-                        Integer projectDefinitionId = Integer.getInteger(String.valueOf(projectDefinitionCode));
+                        Integer projectDefinitionId = Integer.parseInt(String.valueOf(projectDefinitionCode));
                         if (processIdCodeMap.containsKey(projectDefinitionId)) {
                             projectDefinitionCode = processIdCodeMap.get(projectDefinitionId);
                         }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ExecutorServiceImpl.java
Patch:
@@ -20,7 +20,7 @@
 import static org.apache.dolphinscheduler.common.Constants.CMDPARAM_COMPLEMENT_DATA_END_DATE;
 import static org.apache.dolphinscheduler.common.Constants.CMDPARAM_COMPLEMENT_DATA_START_DATE;
 import static org.apache.dolphinscheduler.common.Constants.CMD_PARAM_RECOVER_PROCESS_ID_STRING;
-import static org.apache.dolphinscheduler.common.Constants.CMD_PARAM_START_NODE_NAMES;
+import static org.apache.dolphinscheduler.common.Constants.CMD_PARAM_START_NODES;
 import static org.apache.dolphinscheduler.common.Constants.CMD_PARAM_START_PARAMS;
 import static org.apache.dolphinscheduler.common.Constants.MAX_TASK_TIMEOUT;
 
@@ -409,7 +409,7 @@ private Map<String, Object> updateProcessInstancePrepare(ProcessInstance process
      * @param loginUser           login user
      * @param instanceId          instance id
      * @param processDefinitionCode process definition code
-     * @param version
+     * @param processVersion
      * @param commandType         command type
      * @return insert result code
      */
@@ -533,7 +533,7 @@ private int createCommand(CommandType commandType, long processDefineCode,
         }
 
         if (!StringUtils.isEmpty(startNodeList)) {
-            cmdParam.put(CMD_PARAM_START_NODE_NAMES, startNodeList);
+            cmdParam.put(CMD_PARAM_START_NODES, startNodeList);
         }
         if (warningType != null) {
             command.setWarningType(warningType);

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/utils/DagHelper.java
Patch:
@@ -106,7 +106,7 @@ public static List<TaskNode> generateFlowNodeListByStartNode(List<TaskNode> task
         } else {
             // specified start nodes or resume execution
             for (String startNodeCode : startNodeList) {
-                TaskNode startNode = findNodeByName(taskNodeList, startNodeCode);
+                TaskNode startNode = findNodeByCode(taskNodeList, startNodeCode);
                 List<TaskNode> childNodeList = new ArrayList<>();
                 if (startNode == null) {
                     logger.error("start node name [{}] is not in task node list [{}] ",

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/entity/TaskInstanceTest.java
Patch:
@@ -75,7 +75,7 @@ private DependentParameters getDependentParameters() {
         List<DependentTaskModel> dependTaskList = new ArrayList<>();
         List<DependentItem> dependentItems = new ArrayList<>();
         DependentItem dependentItem = new DependentItem();
-        dependentItem.setDepTasks("A");
+        dependentItem.setDepTaskCode(111L);
         dependentItem.setDefinitionCode(222L);
         dependentItem.setCycle("today");
         dependentItems.add(dependentItem);

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/master/ConditionsTaskTest.java
Patch:
@@ -140,7 +140,7 @@ private TaskNode getTaskNode() {
         taskNode.setRunFlag(FLOWNODE_RUN_FLAG_NORMAL);
 
         DependentItem dependentItem = new DependentItem();
-        dependentItem.setDepTasks("1");
+        dependentItem.setDepTaskCode(11L);
         dependentItem.setStatus(ExecutionStatus.SUCCESS);
 
         DependentTaskModel dependentTaskModel = new DependentTaskModel();

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/master/WorkflowExecuteThreadTest.java
Patch:
@@ -20,7 +20,7 @@
 import static org.apache.dolphinscheduler.common.Constants.CMDPARAM_COMPLEMENT_DATA_END_DATE;
 import static org.apache.dolphinscheduler.common.Constants.CMDPARAM_COMPLEMENT_DATA_START_DATE;
 import static org.apache.dolphinscheduler.common.Constants.CMD_PARAM_RECOVERY_START_NODE_STRING;
-import static org.apache.dolphinscheduler.common.Constants.CMD_PARAM_START_NODE_NAMES;
+import static org.apache.dolphinscheduler.common.Constants.CMD_PARAM_START_NODES;
 
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
@@ -155,7 +155,7 @@ public void testParallelWithSchedule() {
     public void testParseStartNodeName() throws ParseException {
         try {
             Map<String, String> cmdParam = new HashMap<>();
-            cmdParam.put(CMD_PARAM_START_NODE_NAMES, "t1,t2,t3");
+            cmdParam.put(CMD_PARAM_START_NODES, "1,2,3");
             Mockito.when(processInstance.getCommandParam()).thenReturn(JSONUtils.toJsonString(cmdParam));
             Class<WorkflowExecuteThread> masterExecThreadClass = WorkflowExecuteThread.class;
             Method method = masterExecThreadClass.getDeclaredMethod("parseStartNodeName", String.class);

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessService.java
Patch:
@@ -794,8 +794,8 @@ public Environment findEnvironmentByCode(Long environmentCode) {
     private Boolean checkCmdParam(Command command, Map<String, String> cmdParam) {
         if (command.getTaskDependType() == TaskDependType.TASK_ONLY || command.getTaskDependType() == TaskDependType.TASK_PRE) {
             if (cmdParam == null
-                || !cmdParam.containsKey(Constants.CMD_PARAM_START_NODE_NAMES)
-                || cmdParam.get(Constants.CMD_PARAM_START_NODE_NAMES).isEmpty()) {
+                || !cmdParam.containsKey(Constants.CMD_PARAM_START_NODES)
+                || cmdParam.get(Constants.CMD_PARAM_START_NODES).isEmpty()) {
                 logger.error("command node depend type is {}, but start nodes is null ", command.getTaskDependType());
                 return false;
             }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/AccessTokenController.java
Patch:
@@ -152,7 +152,7 @@ public Result queryAccessTokenList(@ApiIgnore @RequestAttribute(value = Constant
     @ResponseStatus(HttpStatus.OK)
     @ApiException(DELETE_ACCESS_TOKEN_ERROR)
     @AccessLogAnnotation(ignoreRequestArgs = "loginUser")
-    public Result delAccessTokenById(@RequestAttribute(value = Constants.SESSION_USER) User loginUser,
+    public Result delAccessTokenById(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,
                                      @PathVariable(value = "id") int id) {
         Map<String, Object> result = accessTokenService.delAccessTokenById(loginUser, id);
         return returnDataList(result);
@@ -174,7 +174,7 @@ public Result delAccessTokenById(@RequestAttribute(value = Constants.SESSION_USE
     @ResponseStatus(HttpStatus.OK)
     @ApiException(UPDATE_ACCESS_TOKEN_ERROR)
     @AccessLogAnnotation(ignoreRequestArgs = "loginUser")
-    public Result updateToken(@RequestAttribute(value = Constants.SESSION_USER) User loginUser,
+    public Result updateToken(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,
                               @PathVariable(value = "id") int id,
                               @RequestParam(value = "userId") int userId,
                               @RequestParam(value = "expireTime") String expireTime,

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProcessInstanceController.java
Patch:
@@ -75,7 +75,7 @@
  */
 @Api(tags = "PROCESS_INSTANCE_TAG")
 @RestController
-@RequestMapping("projects/{projectCode}/process-instances")
+@RequestMapping("/projects/{projectCode}/process-instances")
 public class ProcessInstanceController extends BaseController {
 
     private static final Logger logger = LoggerFactory.getLogger(ProcessInstanceController.class);

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/DataSourceControllerTest.java
Patch:
@@ -133,7 +133,7 @@ public void testQueryDataSourceListPaging() throws Exception {
         paramsMap.add("searchVal","mysql");
         paramsMap.add("pageNo","1");
         paramsMap.add("pageSize","1");
-        MvcResult mvcResult = mockMvc.perform(get("/datasources/list-paging")
+        MvcResult mvcResult = mockMvc.perform(get("/datasources")
                 .header("sessionId", sessionId)
                 .params(paramsMap))
                 .andExpect(status().isOk())

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/LoginControllerTest.java
Patch:
@@ -44,8 +44,8 @@ public class LoginControllerTest extends AbstractControllerTest {
     @Test
     public void testLogin() throws Exception {
         MultiValueMap<String, String> paramsMap = new LinkedMultiValueMap<>();
-        paramsMap.add("userName","cxc");
-        paramsMap.add("userPassword","123456");
+        paramsMap.add("userName", "admin");
+        paramsMap.add("userPassword", "dolphinscheduler123");
 
         MvcResult mvcResult = mockMvc.perform(post("/login")
                 .params(paramsMap))

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/WorkerGroupServiceTest.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.dolphinscheduler.api.enums.Status;
 import org.apache.dolphinscheduler.api.service.impl.WorkerGroupServiceImpl;
 import org.apache.dolphinscheduler.common.Constants;
+import org.apache.dolphinscheduler.common.enums.ProfileType;
 import org.apache.dolphinscheduler.common.enums.UserType;
 import org.apache.dolphinscheduler.dao.entity.ProcessInstance;
 import org.apache.dolphinscheduler.dao.entity.User;
@@ -40,8 +41,10 @@
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.boot.test.mock.mockito.MockBean;
+import org.springframework.test.context.ActiveProfiles;
 import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
 
+@ActiveProfiles(value = {ProfileType.H2})
 @RunWith(SpringJUnit4ClassRunner.class)
 @SpringBootTest(classes = ApiApplicationServer.class)
 public class WorkerGroupServiceTest {

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/Constants.java
Patch:
@@ -402,7 +402,7 @@ private Constants() {
     /**
      * datasource configuration path
      */
-    public static final String DATASOURCE_PROPERTIES = "/datasource.properties";
+    public static final String DATASOURCE_PROPERTIES = "/datasource-%s.properties";
 
     public static final String COMMON_TASK_TYPE = "common";
 

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/ConnectionFactoryTest.java
Patch:
@@ -31,6 +31,7 @@ public class ConnectionFactoryTest {
      */
     @Test
     public void testConnection()throws Exception{
+        System.setProperty("spring.profiles.active", "h2");
         Connection connection = ConnectionFactory.getInstance().getDataSource().getConnection();
         Assert.assertTrue(connection != null);
     }

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/quartz/QuartzExecutors.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.dolphinscheduler.service.quartz;
 
-import static org.apache.dolphinscheduler.common.Constants.DATASOURCE_PROPERTIES;
 import static org.apache.dolphinscheduler.common.Constants.ORG_POSTGRESQL_DRIVER;
 import static org.apache.dolphinscheduler.common.Constants.ORG_QUARTZ_DATASOURCE_MYDS_CONNECTIONPROVIDER_CLASS;
 import static org.apache.dolphinscheduler.common.Constants.ORG_QUARTZ_JOBSTORE_ACQUIRETRIGGERSWITHINLOCK;
@@ -150,7 +149,6 @@ public static QuartzExecutors getInstance() {
      */
     private void init() {
         try {
-            PropertyUtils.loadPropertyFile(DATASOURCE_PROPERTIES);
             StdSchedulerFactory schedulerFactory = new StdSchedulerFactory();
             Properties properties = new Properties();
 

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/utils/DagHelper.java
Patch:
@@ -106,7 +106,7 @@ public static List<TaskNode> generateFlowNodeListByStartNode(List<TaskNode> task
         } else {
             // specified start nodes or resume execution
             for (String startNodeCode : startNodeList) {
-                TaskNode startNode = findNodeByCode(taskNodeList, startNodeCode);
+                TaskNode startNode = findNodeByName(taskNodeList, startNodeCode);
                 List<TaskNode> childNodeList = new ArrayList<>();
                 if (startNode == null) {
                     logger.error("start node name [{}] is not in task node list [{}] ",

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/WorkerGroupServiceImpl.java
Patch:
@@ -185,6 +185,7 @@ public Result queryAllGroupPaging(User loginUser, Integer pageNo, Integer pageSi
 
         List<WorkerGroup> workerGroups = getWorkerGroups(true);
         List<WorkerGroup> resultDataList = new ArrayList<>();
+        int total = 0;
 
         if (CollectionUtils.isNotEmpty(workerGroups)) {
             List<WorkerGroup> searchValDataList = new ArrayList<>();
@@ -198,7 +199,7 @@ public Result queryAllGroupPaging(User loginUser, Integer pageNo, Integer pageSi
             } else {
                 searchValDataList = workerGroups;
             }
-
+            total = searchValDataList.size();
             if (fromIndex < searchValDataList.size()) {
                 if (toIndex > searchValDataList.size()) {
                     toIndex = searchValDataList.size();
@@ -208,7 +209,7 @@ public Result queryAllGroupPaging(User loginUser, Integer pageNo, Integer pageSi
         }
 
         PageInfo<WorkerGroup> pageInfo = new PageInfo<>(pageNo, pageSize);
-        pageInfo.setTotal(resultDataList.size());
+        pageInfo.setTotal(total);
         pageInfo.setTotalList(resultDataList);
 
         result.setData(pageInfo);

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProcessDefinitionServiceTest.java
Patch:
@@ -26,6 +26,7 @@
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.FailureStrategy;
 import org.apache.dolphinscheduler.common.enums.Priority;
+import org.apache.dolphinscheduler.common.enums.ProcessExecutionTypeEnum;
 import org.apache.dolphinscheduler.common.enums.ReleaseState;
 import org.apache.dolphinscheduler.common.enums.UserType;
 import org.apache.dolphinscheduler.common.enums.WarningType;
@@ -610,7 +611,7 @@ public void testUpdateProcessDefinition() {
         Mockito.when(projectService.checkProjectAndAuth(loginUser, project, projectCode)).thenReturn(result);
 
         Map<String, Object> updateResult = processDefinitionService.updateProcessDefinition(loginUser, projectCode, "test", 1,
-                "", "", "", 0, "root", null, null);
+                "", "", "", 0, "root", null, null, ProcessExecutionTypeEnum.PARALLEL);
         Assert.assertEquals(Status.DATA_IS_NOT_VALID, updateResult.get(Constants.STATUS));
     }
 

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/CommandType.java
Patch:
@@ -50,7 +50,9 @@ public enum CommandType {
     REPEAT_RUNNING(7, "repeat running a process"),
     PAUSE(8, "pause a process"),
     STOP(9, "stop a process"),
-    RECOVER_WAITING_THREAD(10, "recover waiting thread");
+    RECOVER_WAITING_THREAD(10, "recover waiting thread"),
+    RECOVER_SERIAL_WAIT(11, "recover serial wait"),
+    ;
 
     CommandType(int code, String descp){
         this.code = code;

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/ExecutionStatus.java
Patch:
@@ -56,7 +56,8 @@ public enum ExecutionStatus {
     WAITING_THREAD(10, "waiting thread"),
     WAITING_DEPEND(11, "waiting depend node complete"),
     DELAY_EXECUTION(12, "delay execution"),
-    FORCED_SUCCESS(13, "forced success");
+    FORCED_SUCCESS(13, "forced success"),
+    SERIAL_WAIT(14, "serial wait");
 
     ExecutionStatus(int code, String descp) {
         this.code = code;

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/ProcessDefinitionLog.java
Patch:
@@ -67,6 +67,7 @@ public ProcessDefinitionLog(ProcessDefinition processDefinition) {
         this.setModifyBy(processDefinition.getModifyBy());
         this.setResourceIds(processDefinition.getResourceIds());
         this.setWarningGroupId(processDefinition.getWarningGroupId());
+        this.setExecutionType(processDefinition.getExecutionType());
     }
 
     public int getOperator() {
@@ -89,4 +90,5 @@ public void setOperateTime(Date operateTime) {
     public boolean equals(Object o) {
         return super.equals(o);
     }
+
 }

File: dolphinscheduler-registry-plugin/dolphinscheduler-registry-zookeeper/src/main/java/org/apache/dolphinscheduler/plugin/registry/zookeeper/ZookeeperConfiguration.java
Patch:
@@ -34,9 +34,8 @@ public enum ZookeeperConfiguration {
     MAX_RETRIES("max.retries", 5, Integer::valueOf),
 
 
-    //todo
-    SESSION_TIMEOUT_MS("session.timeout.ms", 1000, Integer::valueOf),
-    CONNECTION_TIMEOUT_MS("connection.timeout.ms", 1000, Integer::valueOf),
+    SESSION_TIMEOUT_MS("session.timeout.ms", 30000, Integer::valueOf),
+    CONNECTION_TIMEOUT_MS("connection.timeout.ms", 7500, Integer::valueOf),
 
     BLOCK_UNTIL_CONNECTED_WAIT_MS("block.until.connected.wait", 600, Integer::valueOf),
     ;

File: dolphinscheduler-spi/src/main/java/org/apache/dolphinscheduler/spi/plugin/DolphinPluginManagerConfig.java
Patch:
@@ -138,12 +138,12 @@ private String getMavenLocalRepositoryOrDefault(String defaultRepository) {
         // get 'settings.xml' from user home
         Path settingsXmlPath = getMavenSettingsXmlFromUserHome();
         // if user home does not exist settings.xml, get from '$MAVEN_HOME/conf/settings.xml'
-        if (settingsXmlPath == null) {
+        if (settingsXmlPath == null || !Files.exists(settingsXmlPath)) {
             logger.info("User home does not exists maven settings.xml");
             settingsXmlPath = getMavenSettingsXmlFromEvn();
         }
         // still not exist, return default repository
-        if (settingsXmlPath == null) {
+        if (settingsXmlPath == null || !Files.exists(settingsXmlPath)) {
             logger.info("Maven home does not exists maven settings.xml, use default");
             return defaultRepository;
         }

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/upgrade/DolphinSchedulerManager.java
Patch:
@@ -119,7 +119,7 @@ public void upgradeDolphinScheduler() {
                     } else if ("1.3.2".equals(schemaVersion)) {
                         upgradeDao.upgradeDolphinSchedulerResourceList();
                     } else if ("2.0.0".equals(schemaVersion)) {
-                        upgradeDao.upgradeDolphinSchedulerJsonSplit();
+                        upgradeDao.upgradeDolphinSchedulerTo200(schemaDir);
                     }
                     version = schemaVersion;
                 }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/configuration/AppConfiguration.java
Patch:
@@ -45,7 +45,7 @@ public class AppConfiguration implements WebMvcConfigurer {
 
     public static final String LOGIN_INTERCEPTOR_PATH_PATTERN = "/**/*";
     public static final String LOGIN_PATH_PATTERN = "/login";
-    public static final String REGISTER_PATH_PATTERN = "/users/registry";
+    public static final String REGISTER_PATH_PATTERN = "/users/register";
     public static final String PATH_PATTERN = "/**";
     public static final String LOCALE_LANGUAGE_COOKIE = "language";
 

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/upgrade/MysqlUpgradeDao.java
Patch:
@@ -60,7 +60,7 @@ public boolean isExistsTable(String tableName) {
         Connection conn = null;
         try {
             conn = dataSource.getConnection();
-            rs = conn.getMetaData().getTables(null, null, tableName, null);
+            rs = conn.getMetaData().getTables(conn.getCatalog(), conn.getSchema(), tableName, null);
             return rs.next();
         } catch (SQLException e) {
             logger.error(e.getMessage(),e);
@@ -82,7 +82,7 @@ public boolean isExistsColumn(String tableName,String columnName) {
         Connection conn = null;
         try {
             conn = dataSource.getConnection();
-            ResultSet rs = conn.getMetaData().getColumns(null,null,tableName,columnName);
+            ResultSet rs = conn.getMetaData().getColumns(conn.getCatalog(), conn.getSchema(),tableName,columnName);
             return rs.next();
 
         } catch (SQLException e) {

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/upgrade/PostgresqlUpgradeDao.java
Patch:
@@ -89,7 +89,7 @@ public boolean isExistsTable(String tableName) {
         try {
             conn = dataSource.getConnection();
 
-            rs = conn.getMetaData().getTables(null, SCHEMA, tableName, null);
+            rs = conn.getMetaData().getTables(conn.getCatalog(), SCHEMA, tableName, null);
 
             return rs.next();
         } catch (SQLException e) {
@@ -113,7 +113,7 @@ public boolean isExistsColumn(String tableName,String columnName) {
         ResultSet rs = null;
         try {
             conn = dataSource.getConnection();
-            rs = conn.getMetaData().getColumns(null, SCHEMA,tableName,columnName);
+            rs = conn.getMetaData().getColumns(conn.getCatalog(), SCHEMA,tableName,columnName);
             return rs.next();
         } catch (SQLException e) {
             logger.error(e.getMessage(),e);

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/registry/MasterRegistryClient.java
Patch:
@@ -275,6 +275,7 @@ private boolean checkTaskAfterWorkerStart(TaskInstance taskInstance) {
      *
      * @param workerHost worker host
      * @param needCheckWorkerAlive need check worker alive
+     * @param checkOwner need check process instance owner
      */
     private void failoverWorker(String workerHost, boolean needCheckWorkerAlive, boolean checkOwner) {
         logger.info("start worker[{}] failover ...", workerHost);
@@ -289,9 +290,8 @@ private void failoverWorker(String workerHost, boolean needCheckWorkerAlive, boo
             ProcessInstance processInstance = processService.findProcessInstanceDetailById(taskInstance.getProcessInstanceId());
             if (workerHost == null
                     || !checkOwner
-                    || processInstance.getHost().equalsIgnoreCase(workerHost)) {
+                    || processInstance.getHost().equalsIgnoreCase(getLocalAddress())) {
                 // only failover the task owned myself if worker down.
-                // failover master need handle worker at the same time
                 if (processInstance == null) {
                     logger.error("failover error, the process {} of task {} do not exists.",
                             taskInstance.getProcessInstanceId(), taskInstance.getId());

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/CommandType.java
Patch:
@@ -126,7 +126,7 @@ public enum CommandType {
     /**
      * process host update
      */
-    PROCESS_HOST_UPDATE_REQUST,
+    PROCESS_HOST_UPDATE_REQUEST,
 
     /**
      * process host update response

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/HostUpdateCommand.java
Patch:
@@ -56,7 +56,7 @@ public void setProcessHost(String processHost) {
      */
     public Command convert2Command() {
         Command command = new Command();
-        command.setType(CommandType.PROCESS_HOST_UPDATE_REQUST);
+        command.setType(CommandType.PROCESS_HOST_UPDATE_REQUEST);
         byte[] body = JSONUtils.toJsonByteArray(this);
         command.setBody(body);
         return command;

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/HostUpdateResponseCommand.java
Patch:
@@ -66,7 +66,7 @@ public void setStatus(int status) {
      */
     public Command convert2Command() {
         Command command = new Command();
-        command.setType(CommandType.PROCESS_HOST_UPDATE_REQUST);
+        command.setType(CommandType.PROCESS_HOST_UPDATE_REQUEST);
         byte[] body = JSONUtils.toJsonByteArray(this);
         command.setBody(body);
         return command;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/WorkerServer.java
Patch:
@@ -28,6 +28,7 @@
 import org.apache.dolphinscheduler.server.worker.plugin.TaskPluginManager;
 import org.apache.dolphinscheduler.server.worker.processor.DBTaskAckProcessor;
 import org.apache.dolphinscheduler.server.worker.processor.DBTaskResponseProcessor;
+import org.apache.dolphinscheduler.server.worker.processor.HostUpdateProcessor;
 import org.apache.dolphinscheduler.server.worker.processor.TaskExecuteProcessor;
 import org.apache.dolphinscheduler.server.worker.processor.TaskKillProcessor;
 import org.apache.dolphinscheduler.server.worker.registry.WorkerRegistryClient;
@@ -140,6 +141,7 @@ public void run() {
         this.nettyRemotingServer.registerProcessor(CommandType.TASK_KILL_REQUEST, new TaskKillProcessor());
         this.nettyRemotingServer.registerProcessor(CommandType.DB_TASK_ACK, new DBTaskAckProcessor());
         this.nettyRemotingServer.registerProcessor(CommandType.DB_TASK_RESPONSE, new DBTaskResponseProcessor());
+        this.nettyRemotingServer.registerProcessor(CommandType.PROCESS_HOST_UPDATE_REQUEST, new HostUpdateProcessor());
         this.nettyRemotingServer.start();
 
         // worker registry

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/processor/HostUpdateProcessor.java
Patch:
@@ -51,7 +51,7 @@ public HostUpdateProcessor() {
 
     @Override
     public void process(Channel channel, Command command) {
-        Preconditions.checkArgument(CommandType.PROCESS_HOST_UPDATE_REQUST == command.getType(), String.format("invalid command type : %s", command.getType()));
+        Preconditions.checkArgument(CommandType.PROCESS_HOST_UPDATE_REQUEST == command.getType(), String.format("invalid command type : %s", command.getType()));
         HostUpdateCommand updateCommand = JSONUtils.parseObject(command.getBody(), HostUpdateCommand.class);
         logger.info("received host update command : {}", updateCommand);
         taskCallbackService.changeRemoteChannel(updateCommand.getTaskInstanceId(), new NettyRemoteChannel(channel, command.getOpaque()));

File: dolphinscheduler-common/src/test/java/org/apache/dolphinscheduler/common/utils/JSONUtilsTest.java
Patch:
@@ -151,7 +151,9 @@ public void testNodeString() {
         Assert.assertEquals("", JSONUtils.getNodeString("", "key"));
         Assert.assertEquals("", JSONUtils.getNodeString("abc", "key"));
         Assert.assertEquals("", JSONUtils.getNodeString("{\"bar\":\"foo\"}", "key"));
-        Assert.assertEquals("\"foo\"", JSONUtils.getNodeString("{\"bar\":\"foo\"}", "bar"));
+        Assert.assertEquals("foo", JSONUtils.getNodeString("{\"bar\":\"foo\"}", "bar"));
+        Assert.assertEquals("[1,2,3]", JSONUtils.getNodeString("{\"bar\": [1,2,3]}", "bar"));
+        Assert.assertEquals("{\"1\":\"2\",\"2\":3}", JSONUtils.getNodeString("{\"bar\": {\"1\":\"2\",\"2\":3}}", "bar"));
     }
     
     @Test

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/task/ConditionTaskProcessor.java
Patch:
@@ -90,7 +90,6 @@ public boolean submit(TaskInstance task, ProcessInstance processInstance, int ma
         Thread.currentThread().setName(threadLoggerInfoName);
         initTaskParameters();
         logger.info("dependent task start");
-        endTask();
         return true;
     }
 
@@ -103,6 +102,7 @@ public ExecutionStatus taskState() {
     public void run() {
         if (conditionResult.equals(DependResult.WAITING)) {
             setConditionResult();
+            endTask();
         } else {
             endTask();
         }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ResourcesController.java
Patch:
@@ -49,7 +49,7 @@
 import org.apache.dolphinscheduler.api.utils.Result;
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.ProgramType;
-import org.apache.dolphinscheduler.common.enums.ResourceType;
+import org.apache.dolphinscheduler.spi.enums.ResourceType;
 import org.apache.dolphinscheduler.common.enums.UdfType;
 import org.apache.dolphinscheduler.common.utils.ParameterUtils;
 import org.apache.dolphinscheduler.dao.entity.User;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ResourcesService.java
Patch:
@@ -19,8 +19,8 @@
 
 import org.apache.dolphinscheduler.api.utils.Result;
 import org.apache.dolphinscheduler.common.enums.ProgramType;
-import org.apache.dolphinscheduler.common.enums.ResourceType;
 import org.apache.dolphinscheduler.dao.entity.User;
+import org.apache.dolphinscheduler.spi.enums.ResourceType;
 
 import java.io.IOException;
 import java.util.Map;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ResourcesServiceImpl.java
Patch:
@@ -33,7 +33,7 @@
 import org.apache.dolphinscheduler.api.utils.Result;
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.ProgramType;
-import org.apache.dolphinscheduler.common.enums.ResourceType;
+import org.apache.dolphinscheduler.spi.enums.ResourceType;
 import org.apache.dolphinscheduler.common.utils.CollectionUtils;
 import org.apache.dolphinscheduler.common.utils.FileUtils;
 import org.apache.dolphinscheduler.common.utils.HadoopUtils;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/UsersServiceImpl.java
Patch:
@@ -27,7 +27,7 @@
 import org.apache.dolphinscheduler.api.utils.Result;
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.Flag;
-import org.apache.dolphinscheduler.common.enums.ResourceType;
+import org.apache.dolphinscheduler.spi.enums.ResourceType;
 import org.apache.dolphinscheduler.common.enums.UserType;
 import org.apache.dolphinscheduler.common.utils.CollectionUtils;
 import org.apache.dolphinscheduler.common.utils.EncryptionUtils;

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/ResourcesControllerTest.java
Patch:
@@ -25,7 +25,7 @@
 
 import org.apache.dolphinscheduler.api.enums.Status;
 import org.apache.dolphinscheduler.api.utils.Result;
-import org.apache.dolphinscheduler.common.enums.ResourceType;
+import org.apache.dolphinscheduler.spi.enums.ResourceType;
 import org.apache.dolphinscheduler.common.enums.UdfType;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
 

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ResourcesServiceTest.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.dolphinscheduler.api.utils.PageInfo;
 import org.apache.dolphinscheduler.api.utils.Result;
 import org.apache.dolphinscheduler.common.Constants;
-import org.apache.dolphinscheduler.common.enums.ResourceType;
+import org.apache.dolphinscheduler.spi.enums.ResourceType;
 import org.apache.dolphinscheduler.common.enums.UserType;
 import org.apache.dolphinscheduler.common.utils.CollectionUtils;
 import org.apache.dolphinscheduler.common.utils.FileUtils;

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/UsersServiceTest.java
Patch:
@@ -26,7 +26,7 @@
 import org.apache.dolphinscheduler.api.utils.PageInfo;
 import org.apache.dolphinscheduler.api.utils.Result;
 import org.apache.dolphinscheduler.common.Constants;
-import org.apache.dolphinscheduler.common.enums.ResourceType;
+import org.apache.dolphinscheduler.spi.enums.ResourceType;
 import org.apache.dolphinscheduler.common.enums.UserType;
 import org.apache.dolphinscheduler.common.utils.CollectionUtils;
 import org.apache.dolphinscheduler.common.utils.EncryptionUtils;

File: dolphinscheduler-common/src/test/java/org/apache/dolphinscheduler/common/utils/HadoopUtilsTest.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.dolphinscheduler.common.utils;
 
-import org.apache.dolphinscheduler.common.enums.ResourceType;
+import org.apache.dolphinscheduler.spi.enums.ResourceType;
 import org.apache.hadoop.conf.Configuration;
 import org.junit.Assert;
 import org.junit.Test;

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/ResourceMapperTest.java
Patch:
@@ -24,7 +24,7 @@
 import static org.junit.Assert.assertThat;
 
 import org.apache.dolphinscheduler.common.Constants;
-import org.apache.dolphinscheduler.common.enums.ResourceType;
+import org.apache.dolphinscheduler.spi.enums.ResourceType;
 import org.apache.dolphinscheduler.common.enums.UserType;
 import org.apache.dolphinscheduler.common.utils.CollectionUtils;
 import org.apache.dolphinscheduler.dao.entity.Resource;

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/master/runner/task/CommonTaskProcessorTest.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.dolphinscheduler.common.enums.DbType;
 import org.apache.dolphinscheduler.common.enums.ExecutionStatus;
 import org.apache.dolphinscheduler.common.enums.Priority;
-import org.apache.dolphinscheduler.common.enums.ResourceType;
+import org.apache.dolphinscheduler.spi.enums.ResourceType;
 import org.apache.dolphinscheduler.common.enums.TaskType;
 import org.apache.dolphinscheduler.common.enums.TimeoutFlag;
 import org.apache.dolphinscheduler.dao.entity.DataSource;

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessService.java
Patch:
@@ -37,7 +37,7 @@
 import org.apache.dolphinscheduler.common.enums.FailureStrategy;
 import org.apache.dolphinscheduler.common.enums.Flag;
 import org.apache.dolphinscheduler.common.enums.ReleaseState;
-import org.apache.dolphinscheduler.common.enums.ResourceType;
+import org.apache.dolphinscheduler.spi.enums.ResourceType;
 import org.apache.dolphinscheduler.common.enums.TaskDependType;
 import org.apache.dolphinscheduler.common.enums.TimeoutFlag;
 import org.apache.dolphinscheduler.common.enums.WarningType;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/dto/DagDataSchedule.java
Patch:
@@ -30,6 +30,9 @@ public class DagDataSchedule extends DagData {
      */
     private Schedule schedule;
 
+    public DagDataSchedule() {
+    }
+
     public DagDataSchedule(DagData dagData) {
         super();
         this.setProcessDefinition(dagData.getProcessDefinition());

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/EventExecuteService.java
Patch:
@@ -122,7 +122,7 @@ private void eventHandler() {
                 continue;
             }
             int processInstanceId = workflowExecuteThread.getProcessInstance().getId();
-            logger.info("handle process instance : {} events, count:{}",
+            logger.info("handle process instance : {} , events count:{}",
                     processInstanceId,
                     workflowExecuteThread.eventSize());
             logger.info("already exists handler process size:{}", this.eventHandlerMap.size());

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessService.java
Patch:
@@ -1334,6 +1334,8 @@ public TaskInstance submitTaskInstanceToDB(TaskInstance taskInstance, ProcessIns
                         taskInstance.setRetryTimes(taskInstance.getRetryTimes() + 1);
                     }
                     taskInstance.setSubmitTime(null);
+                    taskInstance.setLogPath(null);
+                    taskInstance.setExecutePath(null);
                     taskInstance.setStartTime(null);
                     taskInstance.setEndTime(null);
                     taskInstance.setFlag(Flag.YES);

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessService.java
Patch:
@@ -792,7 +792,7 @@ private ProcessInstance constructProcessInstance(Command command, String host, H
             }
         }
         // reset command parameter if sub process
-        if (cmdParam.containsKey(Constants.CMD_PARAM_SUB_PROCESS)) {
+        if (cmdParam != null && cmdParam.containsKey(Constants.CMD_PARAM_SUB_PROCESS)) {
             processInstance.setCommandParam(command.getCommandParam());
         }
         if (Boolean.FALSE.equals(checkCmdParam(command, cmdParam))) {

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ExecutorServiceImpl.java
Patch:
@@ -604,15 +604,15 @@ private int createComplementCommandList(Date start, Date end, RunMode runMode, C
                         createCount = Math.min(listDate.size(), expectedParallelismNumber);
                     }
                     logger.info("In parallel mode, current expectedParallelismNumber:{}", createCount);
+
+                    listDate.addLast(end);
                     int chunkSize = listDate.size() / createCount;
 
                     for (int i = 0; i < createCount; i++) {
                         int rangeStart = i == 0 ? i : (i * chunkSize);
                         int rangeEnd = i == createCount - 1 ? listDate.size() - 1
                                 : rangeStart + chunkSize;
-                        if (rangeEnd == listDate.size()) {
-                            rangeEnd = listDate.size() - 1;
-                        }
+
                         cmdParam.put(CMDPARAM_COMPLEMENT_DATA_START_DATE, DateUtils.dateToString(listDate.get(rangeStart)));
                         cmdParam.put(CMDPARAM_COMPLEMENT_DATA_END_DATE, DateUtils.dateToString(listDate.get(rangeEnd)));
                         command.setCommandParam(JSONUtils.toJsonString(cmdParam));

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/quartz/cron/CronUtils.java
Patch:
@@ -190,6 +190,7 @@ public static List<Date> getSelfFireDateList(final Date startTime, final Date en
             return result;
         }
 
+        // support left closed and right open time interval (startDate <= N < endDate)
         Date from = new Date(startTime.getTime() - Constants.SECOND_TIME_MILLIS);
         Date to = new Date(endTime.getTime() - Constants.SECOND_TIME_MILLIS);
 

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/FileUtils.java
Patch:
@@ -20,6 +20,7 @@
 import static org.apache.dolphinscheduler.common.Constants.DATA_BASEDIR_PATH;
 import static org.apache.dolphinscheduler.common.Constants.RESOURCE_VIEW_SUFFIXS;
 import static org.apache.dolphinscheduler.common.Constants.RESOURCE_VIEW_SUFFIXS_DEFAULT_VALUE;
+import static org.apache.dolphinscheduler.common.Constants.UTF_8;
 import static org.apache.dolphinscheduler.common.Constants.YYYYMMDDHHMMSS;
 
 import org.apache.commons.io.IOUtils;
@@ -246,7 +247,7 @@ public static String readFile2Str(InputStream inputStream) {
             while ((length = inputStream.read(buffer)) != -1) {
                 output.write(buffer, 0, length);
             }
-            return output.toString();
+            return output.toString(UTF_8);
         } catch (Exception e) {
             logger.error(e.getMessage(), e);
             throw new RuntimeException(e);

File: dolphinscheduler-common/src/test/java/org/apache/dolphinscheduler/common/utils/FileUtilsTest.java
Patch:
@@ -21,7 +21,6 @@
 
 import org.apache.dolphinscheduler.common.Constants;
 
-import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileNotFoundException;
 
@@ -90,10 +89,10 @@ public void testSetValue() {
     public void testWriteContent2File() throws FileNotFoundException {
         // file exists, fmt is invalid
         String filePath = "test/testFile.txt";
-        String content = "正正正faffdasfasdfas";
+        String content = "正正正faffdasfasdfas，한국어； 한글……にほんご\nfrançais";
         FileUtils.writeContent2File(content, filePath);
 
-        String  fileContent = FileUtils.readFile2Str(new FileInputStream(new File(filePath)));
+        String fileContent = FileUtils.readFile2Str(new FileInputStream(filePath));
         Assert.assertEquals(content, fileContent);
     }
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/WorkflowExecuteThread.java
Patch:
@@ -416,7 +416,7 @@ private boolean processStateChangeHandler(StateEvent stateEvent) {
             if (stateEvent.getExecutionStatus().typeIsFinished()) {
                 endProcess();
             }
-            if (stateEvent.getExecutionStatus() == ExecutionStatus.READY_STOP) {
+            if (processInstance.getState() == ExecutionStatus.READY_STOP) {
                 killAllTasks();
             }
             return true;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/task/CommonTaskProcessor.java
Patch:
@@ -55,7 +55,7 @@ public class CommonTaskProcessor extends BaseTaskProcessor {
     MasterConfig masterConfig;
 
     @Autowired
-    NettyExecutorManager nettyExecutorManager;
+    NettyExecutorManager nettyExecutorManager = SpringApplicationContext.getBean(NettyExecutorManager.class);
 
     /**
      * logger of MasterBaseTaskExecThread

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProcessInstanceServiceImpl.java
Patch:
@@ -707,7 +707,7 @@ public Map<String, Object> viewGantt(Integer processInstanceId) throws Exception
 
         List<Task> taskList = new ArrayList<>();
         for (String node : nodeList) {
-            TaskInstance taskInstance = taskInstanceMapper.queryByInstanceIdAndName(processInstanceId, node);
+            TaskInstance taskInstance = taskInstanceMapper.queryByInstanceIdAndCode(processInstanceId, Long.parseLong(node));
             if (taskInstance == null) {
                 continue;
             }

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/TaskInstanceMapper.java
Patch:
@@ -51,6 +51,9 @@ int setFailoverByHostAndStateArray(@Param("host") String host,
     TaskInstance queryByInstanceIdAndName(@Param("processInstanceId") int processInstanceId,
                                           @Param("name") String name);
 
+    TaskInstance queryByInstanceIdAndCode(@Param("processInstanceId") int processInstanceId,
+        @Param("taskCode") Long taskCode);
+
     Integer countTask(@Param("projectCodes") Long[] projectCodes,
                       @Param("taskIds") int[] taskIds);
 

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessService.java
Patch:
@@ -2498,7 +2498,7 @@ public List<TaskNode> transformTask(List<ProcessTaskRelation> taskRelationList,
                     taskDefinitionLog.getTimeoutNotifyStrategy(),
                     taskDefinitionLog.getTimeout())));
                 taskNode.setDelayTime(taskDefinitionLog.getDelayTime());
-                taskNode.setPreTasks(JSONUtils.toJsonString(code.getValue().stream().map(taskDefinitionLogMap::get).map(TaskDefinition::getName).collect(Collectors.toList())));
+                taskNode.setPreTasks(JSONUtils.toJsonString(code.getValue().stream().map(taskDefinitionLogMap::get).map(TaskDefinition::getCode).collect(Collectors.toList())));
                 taskNodeList.add(taskNode);
             }
         }

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/builder/TaskExecutionContextBuilder.java
Patch:
@@ -25,9 +25,9 @@
 import org.apache.dolphinscheduler.dao.entity.ProcessInstance;
 import org.apache.dolphinscheduler.dao.entity.TaskDefinition;
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
-import org.apache.dolphinscheduler.spi.task.request.ProcedureTaskExecutionContext;
-import org.apache.dolphinscheduler.server.entity.TaskExecutionContext;
+import org.apache.dolphinscheduler.service.queue.entity.TaskExecutionContext;
 import org.apache.dolphinscheduler.spi.task.request.DataxTaskExecutionContext;
+import org.apache.dolphinscheduler.spi.task.request.ProcedureTaskExecutionContext;
 import org.apache.dolphinscheduler.spi.task.request.SQLTaskExecutionContext;
 import org.apache.dolphinscheduler.spi.task.request.SqoopTaskExecutionContext;
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/cache/TaskInstanceCacheManager.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
 import org.apache.dolphinscheduler.remote.command.TaskExecuteAckCommand;
 import org.apache.dolphinscheduler.remote.command.TaskExecuteResponseCommand;
-import org.apache.dolphinscheduler.server.entity.TaskExecutionContext;
+import org.apache.dolphinscheduler.service.queue.entity.TaskExecutionContext;
 
 /**
  *  task instance state manager

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/cache/impl/TaskInstanceCacheManagerImpl.java
Patch:
@@ -23,9 +23,9 @@
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
 import org.apache.dolphinscheduler.remote.command.TaskExecuteAckCommand;
 import org.apache.dolphinscheduler.remote.command.TaskExecuteResponseCommand;
-import org.apache.dolphinscheduler.server.entity.TaskExecutionContext;
 import org.apache.dolphinscheduler.server.master.cache.TaskInstanceCacheManager;
 import org.apache.dolphinscheduler.service.process.ProcessService;
+import org.apache.dolphinscheduler.service.queue.entity.TaskExecutionContext;
 
 import java.util.Map;
 import java.util.Map.Entry;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/registry/MasterRegistryClient.java
Patch:
@@ -35,12 +35,12 @@
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
 import org.apache.dolphinscheduler.remote.utils.NamedThreadFactory;
 import org.apache.dolphinscheduler.server.builder.TaskExecutionContextBuilder;
-import org.apache.dolphinscheduler.server.entity.TaskExecutionContext;
 import org.apache.dolphinscheduler.server.master.config.MasterConfig;
 import org.apache.dolphinscheduler.server.master.runner.WorkflowExecuteThread;
 import org.apache.dolphinscheduler.server.registry.HeartBeatTask;
 import org.apache.dolphinscheduler.server.utils.ProcessUtils;
 import org.apache.dolphinscheduler.service.process.ProcessService;
+import org.apache.dolphinscheduler.service.queue.entity.TaskExecutionContext;
 import org.apache.dolphinscheduler.service.registry.RegistryClient;
 import org.apache.dolphinscheduler.spi.register.RegistryConnectListener;
 import org.apache.dolphinscheduler.spi.register.RegistryConnectState;
@@ -357,7 +357,6 @@ public void releaseLock() {
         registryClient.releaseLock(registryClient.getMasterLockPath());
     }
 
-
     /**
      * registry
      */

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/task/ConditionTaskProcessor.java
Patch:
@@ -34,7 +34,6 @@
 import org.apache.dolphinscheduler.server.master.config.MasterConfig;
 import org.apache.dolphinscheduler.server.utils.LogUtils;
 import org.apache.dolphinscheduler.service.bean.SpringApplicationContext;
-import org.apache.dolphinscheduler.service.process.ProcessService;
 
 import java.util.ArrayList;
 import java.util.Date;
@@ -66,7 +65,6 @@ public class ConditionTaskProcessor extends BaseTaskProcessor {
      */
     private Map<String, ExecutionStatus> completeTaskList = new ConcurrentHashMap<>();
 
-    protected ProcessService processService = SpringApplicationContext.getBean(ProcessService.class);
     MasterConfig masterConfig = SpringApplicationContext.getBean(MasterConfig.class);
 
     private TaskDefinition taskDefinition;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/task/DependentTaskProcessor.java
Patch:
@@ -73,7 +73,6 @@ public class DependentTaskProcessor extends BaseTaskProcessor {
     ProcessInstance processInstance;
     TaskDefinition taskDefinition;
 
-    protected ProcessService processService = SpringApplicationContext.getBean(ProcessService.class);
     MasterConfig masterConfig = SpringApplicationContext.getBean(MasterConfig.class);
 
     boolean allDependentItemFinished;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/task/SwitchTaskProcessor.java
Patch:
@@ -32,7 +32,6 @@
 import org.apache.dolphinscheduler.server.utils.LogUtils;
 import org.apache.dolphinscheduler.server.utils.SwitchTaskUtils;
 import org.apache.dolphinscheduler.service.bean.SpringApplicationContext;
-import org.apache.dolphinscheduler.service.process.ProcessService;
 
 import org.apache.commons.lang.StringUtils;
 
@@ -53,7 +52,6 @@ public class SwitchTaskProcessor extends BaseTaskProcessor {
     private ProcessInstance processInstance;
     TaskDefinition taskDefinition;
 
-    protected ProcessService processService = SpringApplicationContext.getBean(ProcessService.class);
     MasterConfig masterConfig = SpringApplicationContext.getBean(MasterConfig.class);
 
     /**

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/utils/LogUtils.java
Patch:
@@ -17,8 +17,8 @@
 
 package org.apache.dolphinscheduler.server.utils;
 
-import org.apache.dolphinscheduler.server.entity.TaskExecutionContext;
 import org.apache.dolphinscheduler.server.log.TaskLogDiscriminator;
+import org.apache.dolphinscheduler.service.queue.entity.TaskExecutionContext;
 
 import java.nio.file.Path;
 import java.nio.file.Paths;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/utils/ProcessUtils.java
Patch:
@@ -27,8 +27,8 @@
 import org.apache.dolphinscheduler.common.utils.OSUtils;
 import org.apache.dolphinscheduler.common.utils.PropertyUtils;
 import org.apache.dolphinscheduler.remote.utils.Host;
-import org.apache.dolphinscheduler.server.entity.TaskExecutionContext;
 import org.apache.dolphinscheduler.service.log.LogClientService;
+import org.apache.dolphinscheduler.service.queue.entity.TaskExecutionContext;
 
 import org.apache.commons.lang.StringUtils;
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/processor/TaskExecuteProcessor.java
Patch:
@@ -33,7 +33,6 @@
 import org.apache.dolphinscheduler.remote.command.TaskExecuteRequestCommand;
 import org.apache.dolphinscheduler.remote.processor.NettyRemoteChannel;
 import org.apache.dolphinscheduler.remote.processor.NettyRequestProcessor;
-import org.apache.dolphinscheduler.server.entity.TaskExecutionContext;
 import org.apache.dolphinscheduler.server.utils.LogUtils;
 import org.apache.dolphinscheduler.server.worker.cache.ResponceCache;
 import org.apache.dolphinscheduler.server.worker.config.WorkerConfig;
@@ -42,6 +41,7 @@
 import org.apache.dolphinscheduler.server.worker.runner.WorkerManagerThread;
 import org.apache.dolphinscheduler.service.alert.AlertClientService;
 import org.apache.dolphinscheduler.service.bean.SpringApplicationContext;
+import org.apache.dolphinscheduler.service.queue.entity.TaskExecutionContext;
 import org.apache.dolphinscheduler.spi.task.TaskExecutionContextCacheManager;
 import org.apache.dolphinscheduler.spi.task.request.TaskRequest;
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/processor/TaskKillProcessor.java
Patch:
@@ -30,12 +30,12 @@
 import org.apache.dolphinscheduler.remote.processor.NettyRequestProcessor;
 import org.apache.dolphinscheduler.remote.utils.Host;
 import org.apache.dolphinscheduler.remote.utils.Pair;
-import org.apache.dolphinscheduler.server.entity.TaskExecutionContext;
 import org.apache.dolphinscheduler.server.utils.ProcessUtils;
 import org.apache.dolphinscheduler.server.worker.config.WorkerConfig;
 import org.apache.dolphinscheduler.server.worker.runner.WorkerManagerThread;
 import org.apache.dolphinscheduler.service.bean.SpringApplicationContext;
 import org.apache.dolphinscheduler.service.log.LogClientService;
+import org.apache.dolphinscheduler.service.queue.entity.TaskExecutionContext;
 import org.apache.dolphinscheduler.spi.task.TaskExecutionContextCacheManager;
 import org.apache.dolphinscheduler.spi.task.request.TaskRequest;
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/runner/TaskExecuteThread.java
Patch:
@@ -36,14 +36,14 @@
 import org.apache.dolphinscheduler.remote.command.Command;
 import org.apache.dolphinscheduler.remote.command.TaskExecuteAckCommand;
 import org.apache.dolphinscheduler.remote.command.TaskExecuteResponseCommand;
-import org.apache.dolphinscheduler.server.entity.TaskExecutionContext;
 import org.apache.dolphinscheduler.server.utils.ProcessUtils;
 import org.apache.dolphinscheduler.server.worker.cache.ResponceCache;
 import org.apache.dolphinscheduler.server.worker.plugin.TaskPluginManager;
 import org.apache.dolphinscheduler.server.worker.processor.TaskCallbackService;
 import org.apache.dolphinscheduler.service.alert.AlertClientService;
 import org.apache.dolphinscheduler.service.bean.SpringApplicationContext;
 import org.apache.dolphinscheduler.service.process.ProcessService;
+import org.apache.dolphinscheduler.service.queue.entity.TaskExecutionContext;
 import org.apache.dolphinscheduler.spi.exception.PluginNotFoundException;
 import org.apache.dolphinscheduler.spi.task.AbstractTask;
 import org.apache.dolphinscheduler.spi.task.TaskAlertInfo;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/runner/WorkerManagerThread.java
Patch:
@@ -23,11 +23,11 @@
 import org.apache.dolphinscheduler.common.thread.ThreadUtils;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
 import org.apache.dolphinscheduler.remote.command.TaskExecuteResponseCommand;
-import org.apache.dolphinscheduler.server.entity.TaskExecutionContext;
 import org.apache.dolphinscheduler.server.worker.cache.ResponceCache;
 import org.apache.dolphinscheduler.server.worker.config.WorkerConfig;
 import org.apache.dolphinscheduler.server.worker.processor.TaskCallbackService;
 import org.apache.dolphinscheduler.service.bean.SpringApplicationContext;
+import org.apache.dolphinscheduler.service.queue.entity.TaskExecutionContext;
 import org.apache.dolphinscheduler.spi.task.TaskExecutionContextCacheManager;
 import org.apache.dolphinscheduler.spi.task.request.TaskRequest;
 

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/master/cache/impl/TaskInstanceCacheManagerImplTest.java
Patch:
@@ -24,8 +24,8 @@
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
 import org.apache.dolphinscheduler.remote.command.TaskExecuteAckCommand;
 import org.apache.dolphinscheduler.remote.command.TaskExecuteResponseCommand;
-import org.apache.dolphinscheduler.server.entity.TaskExecutionContext;
 import org.apache.dolphinscheduler.service.process.ProcessService;
+import org.apache.dolphinscheduler.service.queue.entity.TaskExecutionContext;
 
 import java.util.Calendar;
 import java.util.Date;

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/master/dispatch/executor/NettyExecutorManagerTest.java
Patch:
@@ -26,11 +26,11 @@
 import org.apache.dolphinscheduler.remote.config.NettyServerConfig;
 import org.apache.dolphinscheduler.remote.utils.Host;
 import org.apache.dolphinscheduler.server.builder.TaskExecutionContextBuilder;
-import org.apache.dolphinscheduler.server.entity.TaskExecutionContext;
 import org.apache.dolphinscheduler.server.master.dispatch.context.ExecutionContext;
 import org.apache.dolphinscheduler.server.master.dispatch.enums.ExecutorType;
 import org.apache.dolphinscheduler.server.master.dispatch.exceptions.ExecuteException;
 import org.apache.dolphinscheduler.server.worker.processor.TaskExecuteProcessor;
+import org.apache.dolphinscheduler.service.queue.entity.TaskExecutionContext;
 
 import org.junit.Assert;
 import org.junit.Ignore;

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/utils/ExecutionContextTestUtils.java
Patch:
@@ -24,9 +24,10 @@
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
 import org.apache.dolphinscheduler.remote.utils.Host;
 import org.apache.dolphinscheduler.server.builder.TaskExecutionContextBuilder;
-import org.apache.dolphinscheduler.server.entity.TaskExecutionContext;
 import org.apache.dolphinscheduler.server.master.dispatch.context.ExecutionContext;
 import org.apache.dolphinscheduler.server.master.dispatch.enums.ExecutorType;
+import org.apache.dolphinscheduler.service.queue.entity.TaskExecutionContext;
+
 import org.mockito.Mockito;
 
 /**

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/utils/LogUtilsTest.java
Patch:
@@ -17,8 +17,8 @@
 
 package org.apache.dolphinscheduler.server.utils;
 
-import org.apache.dolphinscheduler.server.entity.TaskExecutionContext;
 import org.apache.dolphinscheduler.server.log.TaskLogDiscriminator;
+import org.apache.dolphinscheduler.service.queue.entity.TaskExecutionContext;
 
 import java.nio.file.Path;
 import java.nio.file.Paths;

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/worker/processor/TaskExecuteProcessorTest.java
Patch:
@@ -29,12 +29,12 @@
 import org.apache.dolphinscheduler.remote.command.TaskExecuteRequestCommand;
 import org.apache.dolphinscheduler.remote.utils.ChannelUtils;
 import org.apache.dolphinscheduler.remote.utils.JsonSerializer;
-import org.apache.dolphinscheduler.server.entity.TaskExecutionContext;
 import org.apache.dolphinscheduler.server.worker.config.WorkerConfig;
 import org.apache.dolphinscheduler.server.worker.runner.TaskExecuteThread;
 import org.apache.dolphinscheduler.server.worker.runner.WorkerManagerThread;
 import org.apache.dolphinscheduler.service.alert.AlertClientService;
 import org.apache.dolphinscheduler.service.bean.SpringApplicationContext;
+import org.apache.dolphinscheduler.service.queue.entity.TaskExecutionContext;
 
 import java.util.Date;
 import java.util.concurrent.ExecutorService;

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/queue/entity/TaskExecutionContext.java
Patch:
@@ -15,18 +15,18 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.server.entity;
+package org.apache.dolphinscheduler.service.queue.entity;
 
 import org.apache.dolphinscheduler.common.enums.ExecutionStatus;
 import org.apache.dolphinscheduler.common.enums.TaskTimeoutStrategy;
 import org.apache.dolphinscheduler.common.process.Property;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
+import org.apache.dolphinscheduler.remote.command.Command;
+import org.apache.dolphinscheduler.remote.command.TaskExecuteRequestCommand;
 import org.apache.dolphinscheduler.spi.task.request.DataxTaskExecutionContext;
 import org.apache.dolphinscheduler.spi.task.request.ProcedureTaskExecutionContext;
 import org.apache.dolphinscheduler.spi.task.request.SQLTaskExecutionContext;
 import org.apache.dolphinscheduler.spi.task.request.SqoopTaskExecutionContext;
-import org.apache.dolphinscheduler.remote.command.Command;
-import org.apache.dolphinscheduler.remote.command.TaskExecuteRequestCommand;
 
 import java.io.Serializable;
 import java.util.Date;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/WorkflowExecuteThread.java
Patch:
@@ -263,7 +263,7 @@ public String getKey() {
             return key;
         }
 
-        key = String.format("{}_{}_{}",
+        key = String.format("%d_%d_%d",
                 this.processDefinition.getCode(),
                 this.processDefinition.getVersion(),
                 this.processInstance.getId());

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProcessDefinitionServiceImpl.java
Patch:
@@ -1395,7 +1395,7 @@ public Map<String, Object> switchProcessDefinitionVersion(User loginUser, long p
             return result;
         }
         int switchVersion = processService.switchVersion(processDefinition, processDefinitionLog);
-        if (switchVersion > 0) {
+        if (switchVersion <= 0) {
             putMsg(result, Status.SWITCH_PROCESS_DEFINITION_VERSION_ERROR);
             throw new ServiceException(Status.SWITCH_PROCESS_DEFINITION_VERSION_ERROR);
         }

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessService.java
Patch:
@@ -2212,7 +2212,7 @@ public int switchVersion(ProcessDefinition processDefinition, ProcessDefinitionL
 
         int result = processDefineMapper.updateById(processDefinitionLog);
         if (result > 0) {
-            result = switchProcessTaskRelationVersion(processDefinition);
+            result = switchProcessTaskRelationVersion(processDefinitionLog);
             if (result <= 0) {
                 return Constants.DEFINITION_FAILURE;
             }

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/ResourcesControllerTest.java
Patch:
@@ -19,6 +19,7 @@
 
 import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
 import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
 
@@ -152,7 +153,7 @@ public void testUpdateResourceContent() throws Exception {
         paramsMap.add("id", "1");
         paramsMap.add("content","echo test_1111");
 
-        MvcResult mvcResult = mockMvc.perform(post("/resources/update-content")
+        MvcResult mvcResult = mockMvc.perform(put("/resources/1/update-content")
                 .header(SESSION_ID, sessionId)
                 .params(paramsMap))
                 .andExpect(status().isOk())
@@ -171,7 +172,7 @@ public void testDownloadResource() throws Exception {
         MultiValueMap<String, String> paramsMap = new LinkedMultiValueMap<>();
         paramsMap.add("id", "5");
 
-        MvcResult mvcResult = mockMvc.perform(get("/resources/download")
+        MvcResult mvcResult = mockMvc.perform(get("/resources/{id}/download",5)
                 .header(SESSION_ID, sessionId)
                 .params(paramsMap))
                 .andExpect(status().isOk())

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/TaskType.java
Patch:
@@ -53,6 +53,7 @@ public enum TaskType {
     SQOOP(12, "SQOOP"),
     WATERDROP(13, "WATERDROP"),
     SWITCH(14, "SWITCH"),
+    TIS(15, "TIS"),
     ;
 
     TaskType(int code, String desc) {

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/TaskParametersUtils.java
Patch:
@@ -32,6 +32,7 @@
 import org.apache.dolphinscheduler.common.task.sqoop.SqoopParameters;
 import org.apache.dolphinscheduler.common.task.subprocess.SubProcessParameters;
 import org.apache.dolphinscheduler.common.task.switchtask.SwitchParameters;
+import org.apache.dolphinscheduler.common.task.tis.TISCommonParameters;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -85,6 +86,8 @@ public static AbstractParameters getParameters(String taskType, String parameter
                 return JSONUtils.parseObject(parameter, SqoopParameters.class);
             case "SWITCH":
                 return JSONUtils.parseObject(parameter, SwitchParameters.class);
+            case "TIS":
+                return JSONUtils.parseObject(parameter, TISCommonParameters.class);
             default:
                 logger.error("not support task type: {}", taskType);
                 return null;

File: dolphinscheduler-common/src/test/java/org/apache/dolphinscheduler/common/utils/TaskParametersUtilsTest.java
Patch:
@@ -41,5 +41,6 @@ public void testGetParameters() {
         Assert.assertNotNull(TaskParametersUtils.getParameters(TaskType.DEPENDENT.getDesc(), "{}"));
         Assert.assertNotNull(TaskParametersUtils.getParameters(TaskType.FLINK.getDesc(), "{}"));
         Assert.assertNotNull(TaskParametersUtils.getParameters(TaskType.HTTP.getDesc(), "{}"));
+        Assert.assertNotNull(TaskParametersUtils.getParameters(TaskType.TIS.getDesc(), "{}"));
     }
 }

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/processor/StateEventProcessor.java
Patch:
@@ -68,7 +68,7 @@ public void process(Channel channel, Command command) {
         StateEventType type = stateEvent.getTaskInstanceId() == 0 ? StateEventType.PROCESS_STATE_CHANGE : StateEventType.TASK_STATE_CHANGE;
         stateEvent.setType(type);
 
-        logger.info("received command : {}", stateEvent.toString());
+        logger.info("received command : {}", stateEvent);
         stateEventResponseService.addResponse(stateEvent);
     }
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/processor/queue/StateEventResponseService.java
Patch:
@@ -114,6 +114,7 @@ public void run() {
                 } catch (InterruptedException e) {
                     logger.warn("persist task error", e);
                     Thread.currentThread().interrupt();
+                    break;
                 }
             }
             logger.info("StateEventResponseWorker stopped");
@@ -139,7 +140,7 @@ private void persist(StateEvent stateEvent) {
             workflowExecuteThread.addStateEvent(stateEvent);
             writeResponse(stateEvent, ExecutionStatus.SUCCESS);
         } catch (Exception e) {
-            logger.error("persist event queue error:", stateEvent.toString(), e);
+            logger.error("persist event queue error, event: {}", stateEvent, e);
         }
     }
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterSchedulerService.java
Patch:
@@ -187,7 +187,7 @@ private void scheduleProcess() throws Exception {
                     if (processInstance.getTimeout() > 0) {
                         this.processTimeoutCheckList.put(processInstance.getId(), processInstance);
                     }
-                    logger.info("command {} process {} start...",
+                    logger.info("handle command end, command {} process {} start...",
                             command.getId(), processInstance.getId());
                     masterExecService.execute(workflowExecuteThread);
                 }

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/AbstractTaskExecutor.java
Patch:
@@ -41,7 +41,7 @@ public abstract class AbstractTaskExecutor extends AbstractTask {
      */
     protected AbstractTaskExecutor(TaskRequest taskRequest) {
         super(taskRequest);
-        logger = LoggerFactory.getLogger(taskRequest.getLogPath());
+        logger = LoggerFactory.getLogger(taskRequest.getTaskLogName());
     }
 
     /**

File: dolphinscheduler-task-plugin/dolphinscheduler-task-sql/src/main/java/org/apache/dolphinscheduler/plugin/task/sql/SqlTask.java
Patch:
@@ -372,7 +372,8 @@ private PreparedStatement prepareStatementAndBind(Connection connection, SqlBind
         // is the timeout set
         boolean timeoutFlag = taskExecutionContext.getTaskTimeoutStrategy() == TaskTimeoutStrategy.FAILED
                 || taskExecutionContext.getTaskTimeoutStrategy() == TaskTimeoutStrategy.WARNFAILED;
-        try (PreparedStatement stmt = connection.prepareStatement(sqlBinds.getSql())) {
+        try {
+            PreparedStatement stmt = connection.prepareStatement(sqlBinds.getSql());
             if (timeoutFlag) {
                 stmt.setQueryTimeout(taskExecutionContext.getTaskTimeout());
             }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ExecutorServiceImpl.java
Patch:
@@ -24,6 +24,7 @@
 import static org.apache.dolphinscheduler.common.Constants.CMD_PARAM_START_PARAMS;
 import static org.apache.dolphinscheduler.common.Constants.MAX_TASK_TIMEOUT;
 
+import com.fasterxml.jackson.core.type.TypeReference;
 import org.apache.dolphinscheduler.api.enums.ExecuteType;
 import org.apache.dolphinscheduler.api.enums.Status;
 import org.apache.dolphinscheduler.api.service.ExecutorService;
@@ -270,7 +271,7 @@ public Map<String, Object> execute(User loginUser, long projectCode, Integer pro
         }
 
         //get the startParams user specified at the first starting while repeat running is needed
-        Map<String, Object> commandMap = JSONUtils.toMap(processInstance.getCommandParam(), String.class, Object.class);
+        Map<String, Object> commandMap = JSONUtils.parseObject(processInstance.getCommandParam(), new TypeReference<Map<String, Object>>() {});
         String startParams = null;
         if (MapUtils.isNotEmpty(commandMap) && executeType == ExecuteType.REPEAT_RUNNING) {
             Object startParamsJson = commandMap.get(Constants.CMD_PARAM_START_PARAMS);

File: dolphinscheduler-common/src/test/java/org/apache/dolphinscheduler/common/utils/JSONUtilsTest.java
Patch:
@@ -199,8 +199,6 @@ public void testToMap() {
 
         Assert.assertNull(JSONUtils.toMap("3"));
         Assert.assertNull(JSONUtils.toMap(null));
-        Assert.assertNull(JSONUtils.toMap("3", null, null));
-        Assert.assertNull(JSONUtils.toMap(null, null, null));
 
         String str = "{\"resourceList\":[],\"localParams\":[],\"rawScript\":\"#!/bin/bash\\necho \\\"shell-1\\\"\"}";
         Map<String, String> m = JSONUtils.toMap(str);

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessService.java
Patch:
@@ -1779,7 +1779,7 @@ public void changeOutParam(TaskInstance taskInstance) {
             return;
         }
         //if the result more than one line,just get the first .
-        Map<String, Object> taskParams = JSONUtils.toMap(taskInstance.getTaskParams(), String.class, Object.class);
+        Map<String, Object> taskParams = JSONUtils.parseObject(taskInstance.getTaskParams(), new TypeReference<Map<String, Object>>() {});
         Object localParams = taskParams.get(LOCAL_PARAMS);
         if (localParams == null) {
             return;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProcessDefinitionServiceImpl.java
Patch:
@@ -650,7 +650,7 @@ public Map<String, Object> deleteProcessDefinitionByCode(User loginUser, long pr
 
         int delete = processDefinitionMapper.deleteById(processDefinition.getId());
         int deleteRelation = processTaskRelationMapper.deleteByCode(project.getCode(), processDefinition.getCode());
-        if ((delete & deleteRelation) == 0) {
+        if (delete == 0 || deleteRelation == 0) {
             putMsg(result, Status.DELETE_PROCESS_DEFINE_BY_CODE_ERROR);
             throw new ServiceException(Status.DELETE_PROCESS_DEFINE_BY_CODE_ERROR);
         }
@@ -1476,7 +1476,7 @@ public Map<String, Object> deleteProcessDefinitionVersion(User loginUser, long p
         } else {
             int deleteLog = processDefinitionLogMapper.deleteByProcessDefinitionCodeAndVersion(code, version);
             int deleteRelationLog = processTaskRelationLogMapper.deleteByCode(processDefinition.getCode(), processDefinition.getVersion());
-            if ((deleteLog & deleteRelationLog) == 0) {
+            if (deleteLog == 0 || deleteRelationLog == 0) {
                 putMsg(result, Status.DELETE_PROCESS_DEFINE_BY_CODE_ERROR);
                 throw new ServiceException(Status.DELETE_PROCESS_DEFINE_BY_CODE_ERROR);
             }

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/AbstractCommandExecutor.java
Patch:
@@ -20,7 +20,6 @@
 import static org.apache.dolphinscheduler.spi.task.TaskConstants.EXIT_CODE_FAILURE;
 import static org.apache.dolphinscheduler.spi.task.TaskConstants.EXIT_CODE_KILL;
 
-import org.apache.dolphinscheduler.plugin.task.util.LoggerUtils;
 import org.apache.dolphinscheduler.plugin.task.util.OSUtils;
 import org.apache.dolphinscheduler.spi.task.TaskConstants;
 import org.apache.dolphinscheduler.spi.task.TaskExecutionContextCacheManager;
@@ -308,7 +307,7 @@ private void clear() {
      * @param process process
      */
     private void parseProcessOutput(Process process) {
-        String threadLoggerInfoName = String.format(LoggerUtils.TASK_LOGGER_THREAD_NAME + "-%s", taskRequest.getTaskAppId());
+        String threadLoggerInfoName = String.format(TaskConstants.TASK_LOGGER_THREAD_NAME + "-%s", taskRequest.getTaskAppId());
         ExecutorService getOutputLogService = newDaemonSingleThreadExecutor(threadLoggerInfoName + "-" + "getOutputLogService");
         getOutputLogService.submit(() -> {
             try (BufferedReader inReader = new BufferedReader(new InputStreamReader(process.getInputStream()))) {

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/ShellCommandExecutor.java
Patch:
@@ -28,6 +28,7 @@
 import java.nio.file.Files;
 import java.nio.file.Paths;
 import java.util.List;
+import java.util.concurrent.LinkedBlockingQueue;
 import java.util.function.Consumer;
 
 import org.slf4j.Logger;
@@ -54,13 +55,13 @@ public class ShellCommandExecutor extends AbstractCommandExecutor {
      * @param taskRequest taskRequest
      * @param logger logger
      */
-    public ShellCommandExecutor(Consumer<List<String>> logHandler,
+    public ShellCommandExecutor(Consumer<LinkedBlockingQueue<String>> logHandler,
                                 TaskRequest taskRequest,
                                 Logger logger) {
         super(logHandler, taskRequest, logger);
     }
 
-    public ShellCommandExecutor(List<String> logBuffer) {
+    public ShellCommandExecutor(LinkedBlockingQueue<String> logBuffer) {
         super(logBuffer);
     }
 

File: dolphinscheduler-task-plugin/dolphinscheduler-task-python/src/main/java/org/apache/dolphinscheduler/plugin/task/python/PythonCommandExecutor.java
Patch:
@@ -31,7 +31,7 @@
 import java.nio.charset.StandardCharsets;
 import java.nio.file.Files;
 import java.nio.file.Paths;
-import java.util.List;
+import java.util.concurrent.LinkedBlockingQueue;
 import java.util.function.Consumer;
 import java.util.regex.Pattern;
 
@@ -62,7 +62,7 @@ public class PythonCommandExecutor extends AbstractCommandExecutor {
      * @param taskRequest TaskRequest
      * @param logger logger
      */
-    public PythonCommandExecutor(Consumer<List<String>> logHandler,
+    public PythonCommandExecutor(Consumer<LinkedBlockingQueue<String>> logHandler,
                                  TaskRequest taskRequest,
                                  Logger logger) {
         super(logHandler, taskRequest, logger);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProcessDefinitionController.java
Patch:
@@ -26,7 +26,7 @@
 import static org.apache.dolphinscheduler.api.enums.Status.ENCAPSULATION_TREEVIEW_STRUCTURE_ERROR;
 import static org.apache.dolphinscheduler.api.enums.Status.GET_TASKS_LIST_BY_PROCESS_DEFINITION_ID_ERROR;
 import static org.apache.dolphinscheduler.api.enums.Status.IMPORT_PROCESS_DEFINE_ERROR;
-import static org.apache.dolphinscheduler.api.enums.Status.QUERY_DATAIL_OF_PROCESS_DEFINITION_ERROR;
+import static org.apache.dolphinscheduler.api.enums.Status.QUERY_DETAIL_OF_PROCESS_DEFINITION_ERROR;
 import static org.apache.dolphinscheduler.api.enums.Status.QUERY_PROCESS_DEFINITION_LIST;
 import static org.apache.dolphinscheduler.api.enums.Status.QUERY_PROCESS_DEFINITION_LIST_PAGING_ERROR;
 import static org.apache.dolphinscheduler.api.enums.Status.QUERY_PROCESS_DEFINITION_VERSIONS_ERROR;
@@ -388,7 +388,7 @@ public Result releaseProcessDefinition(@ApiIgnore @RequestAttribute(value = Cons
     })
     @GetMapping(value = "/{code}")
     @ResponseStatus(HttpStatus.OK)
-    @ApiException(QUERY_DATAIL_OF_PROCESS_DEFINITION_ERROR)
+    @ApiException(QUERY_DETAIL_OF_PROCESS_DEFINITION_ERROR)
     @AccessLogAnnotation(ignoreRequestArgs = "loginUser")
     public Result queryProcessDefinitionByCode(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,
                                                @ApiParam(name = "projectCode", value = "PROJECT_CODE", required = true) @PathVariable long projectCode,
@@ -411,7 +411,7 @@ public Result queryProcessDefinitionByCode(@ApiIgnore @RequestAttribute(value =
     })
     @GetMapping(value = "/query-by-name")
     @ResponseStatus(HttpStatus.OK)
-    @ApiException(QUERY_DATAIL_OF_PROCESS_DEFINITION_ERROR)
+    @ApiException(QUERY_DETAIL_OF_PROCESS_DEFINITION_ERROR)
     @AccessLogAnnotation(ignoreRequestArgs = "loginUser")
     public Result<ProcessDefinition> queryProcessDefinitionByName(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,
                                                                   @ApiParam(name = "projectCode", value = "PROJECT_CODE", required = true) @PathVariable long projectCode,

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java
Patch:
@@ -136,7 +136,7 @@ public enum Status {
     VERIFY_PROCESS_DEFINITION_NAME_UNIQUE_ERROR(10106, "verify process definition name unique error", "工作流定义名称验证错误"),
     UPDATE_PROCESS_DEFINITION_ERROR(10107, "update process definition error", "更新工作流定义错误"),
     RELEASE_PROCESS_DEFINITION_ERROR(10108, "release process definition error", "上线工作流错误"),
-    QUERY_DATAIL_OF_PROCESS_DEFINITION_ERROR(10109, "query datail of process definition error", "查询工作流详细信息错误"),
+    QUERY_DETAIL_OF_PROCESS_DEFINITION_ERROR(10109, "query detail of process definition error", "查询工作流详细信息错误"),
     QUERY_PROCESS_DEFINITION_LIST(10110, "query process definition list", "查询工作流列表错误"),
     ENCAPSULATION_TREEVIEW_STRUCTURE_ERROR(10111, "encapsulation treeview structure error", "查询工作流树形图数据错误"),
     GET_TASKS_LIST_BY_PROCESS_DEFINITION_ID_ERROR(10112, "get tasks list by process definition id error", "查询工作流定义节点信息错误"),

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProcessDefinitionServiceTest.java
Patch:
@@ -400,6 +400,7 @@ public void deleteProcessDefinitionByCodeTest() {
         schedule.setReleaseState(ReleaseState.OFFLINE);
         schedules.add(schedule);
         Mockito.when(processDefineMapper.deleteById(46)).thenReturn(1);
+        Mockito.when(scheduleMapper.deleteById(schedule.getId())).thenReturn(1);
         Mockito.when(processTaskRelationMapper.deleteByCode(project.getCode(), processDefinition.getCode())).thenReturn(1);
         Mockito.when(scheduleMapper.queryByProcessDefinitionCode(46L)).thenReturn(schedules);
         putMsg(result, Status.SUCCESS, projectCode);

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProcessInstanceServiceTest.java
Patch:
@@ -415,11 +415,12 @@ public void testUpdateProcessInstance() {
         when(tenantMapper.queryByTenantCode("root")).thenReturn(tenant);
         when(processService.getTenantForProcess(Mockito.anyInt(), Mockito.anyInt())).thenReturn(tenant);
         when(processService.updateProcessInstance(processInstance)).thenReturn(1);
+        when(processService.saveProcessDefine(loginUser, processDefinition, false)).thenReturn(1);
         when(processDefinitionService.checkProcessNodeList(shellJson)).thenReturn(result);
         putMsg(result, Status.SUCCESS, projectCode);
         Map<String, Object> processInstanceFinishRes = processInstanceService.updateProcessInstance(loginUser, projectCode, 1,
             shellJson, taskJson,"2020-02-21 00:00:00", true, "", "", 0, "root");
-        Assert.assertEquals(Status.UPDATE_PROCESS_DEFINITION_ERROR, processInstanceFinishRes.get(Constants.STATUS));
+        Assert.assertEquals(Status.SUCCESS, processInstanceFinishRes.get(Constants.STATUS));
 
         //success
         when(processDefineMapper.queryByCode(46L)).thenReturn(processDefinition);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java
Patch:
@@ -264,7 +264,7 @@ public enum Status {
     BATCH_EXPORT_PROCESS_DEFINE_BY_IDS_ERROR(50028, "batch export process definition by ids error", "批量导出工作流定义错误"),
     IMPORT_PROCESS_DEFINE_ERROR(50029, "import process definition error", "导入工作流定义错误"),
     TASK_DEFINE_NOT_EXIST(50030, "task definition {0} does not exist", "任务定义[{0}]不存在"),
-    DELETE_PROCESS_TASK_RELATION_ERROR(50032, "delete process task relation error", "删除工作流任务关系错误"),
+    CREATE_PROCESS_TASK_RELATION_ERROR(50032, "create process task relation error", "创建工作流任务关系错误"),
     PROCESS_TASK_RELATION_NOT_EXIST(50033, "process task relation {0} does not exist", "工作流任务关系[{0}]不存在"),
     PROCESS_TASK_RELATION_EXIST(50034, "process task relation is already exist, processCode:[{0}]", "工作流任务关系已存在, processCode:[{0}]"),
     PROCESS_DAG_IS_EMPTY(50035, "process dag can not be empty", "工作流dag不能为空"),
@@ -286,7 +286,6 @@ public enum Status {
     QUERY_DATABASE_STATE_ERROR(70001, "query database state error", "查询数据库状态错误"),
     QUERY_ZOOKEEPER_STATE_ERROR(70002, "query zookeeper state error", "查询zookeeper状态错误"),
 
-
     CREATE_ACCESS_TOKEN_ERROR(70010, "create access token error", "创建访问token错误"),
     GENERATE_TOKEN_ERROR(70011, "generate token error", "生成token错误"),
     QUERY_ACCESSTOKEN_LIST_PAGING_ERROR(70012, "query access token list paging error", "分页查询访问token列表错误"),

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProcessInstanceServiceImpl.java
Patch:
@@ -449,7 +449,8 @@ public Map<String, Object> updateProcessInstance(User loginUser, long projectCod
                     return result;
                 }
             }
-            if (!processService.saveTaskDefine(loginUser, projectCode, taskDefinitionLogs)) {
+            int saveTaskResult = processService.saveTaskDefine(loginUser, projectCode, taskDefinitionLogs);
+            if (saveTaskResult == Constants.DEFINITION_FAILURE) {
                 putMsg(result, Status.CREATE_TASK_DEFINITION_ERROR);
                 return result;
             }

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProcessInstanceServiceTest.java
Patch:
@@ -419,7 +419,7 @@ public void testUpdateProcessInstance() {
         putMsg(result, Status.SUCCESS, projectCode);
         Map<String, Object> processInstanceFinishRes = processInstanceService.updateProcessInstance(loginUser, projectCode, 1,
             shellJson, taskJson,"2020-02-21 00:00:00", true, "", "", 0, "root");
-        Assert.assertEquals(Status.CREATE_TASK_DEFINITION_ERROR, processInstanceFinishRes.get(Constants.STATUS));
+        Assert.assertEquals(Status.UPDATE_PROCESS_DEFINITION_ERROR, processInstanceFinishRes.get(Constants.STATUS));
 
         //success
         when(processDefineMapper.queryByCode(46L)).thenReturn(processDefinition);

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/TaskDefinitionServiceImplTest.java
Patch:
@@ -96,7 +96,7 @@ public void createTaskDefinition() {
             + "\"workerGroup\":\"default\",\"failRetryTimes\":0,\"failRetryInterval\":0,\"timeoutFlag\":0,"
             + "\"timeoutNotifyStrategy\":0,\"timeout\":0,\"delayTime\":0,\"resourceIds\":\"\"}]";
         List<TaskDefinitionLog> taskDefinitions = JSONUtils.toList(createTaskDefinitionJson, TaskDefinitionLog.class);
-        Mockito.when(processService.saveTaskDefine(loginUser, projectCode, taskDefinitions)).thenReturn(true);
+        Mockito.when(processService.saveTaskDefine(loginUser, projectCode, taskDefinitions)).thenReturn(1);
         Map<String, Object> relation = taskDefinitionService
             .createTaskDefinition(loginUser, projectCode, createTaskDefinitionJson);
         Assert.assertEquals(Status.SUCCESS, relation.get(Constants.STATUS));

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessService.java
Patch:
@@ -1078,6 +1078,7 @@ public TaskInstance submitTask(TaskInstance taskInstance, int commitRetryTimes,
                     task = submitTask(taskInstance);
                     if (task != null && task.getId() != 0) {
                         submitDB = true;
+                        break;
                     }
                 }
                 if (!submitDB) {

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/builder/TaskExecutionContextBuilder.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.dolphinscheduler.dao.entity.ProcessInstance;
 import org.apache.dolphinscheduler.dao.entity.TaskDefinition;
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
-import org.apache.dolphinscheduler.server.entity.ProcedureTaskExecutionContext;
+import org.apache.dolphinscheduler.spi.task.request.ProcedureTaskExecutionContext;
 import org.apache.dolphinscheduler.server.entity.TaskExecutionContext;
 import org.apache.dolphinscheduler.spi.task.request.DataxTaskExecutionContext;
 import org.apache.dolphinscheduler.spi.task.request.SQLTaskExecutionContext;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/entity/TaskExecutionContext.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.dolphinscheduler.common.process.Property;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
 import org.apache.dolphinscheduler.spi.task.request.DataxTaskExecutionContext;
+import org.apache.dolphinscheduler.spi.task.request.ProcedureTaskExecutionContext;
 import org.apache.dolphinscheduler.spi.task.request.SQLTaskExecutionContext;
 import org.apache.dolphinscheduler.spi.task.request.SqoopTaskExecutionContext;
 import org.apache.dolphinscheduler.remote.command.Command;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/consumer/TaskPriorityQueueConsumer.java
Patch:
@@ -42,7 +42,7 @@
 import org.apache.dolphinscheduler.dao.entity.Tenant;
 import org.apache.dolphinscheduler.dao.entity.UdfFunc;
 import org.apache.dolphinscheduler.server.builder.TaskExecutionContextBuilder;
-import org.apache.dolphinscheduler.server.entity.ProcedureTaskExecutionContext;
+import org.apache.dolphinscheduler.spi.task.request.ProcedureTaskExecutionContext;
 import org.apache.dolphinscheduler.server.entity.TaskExecutionContext;
 import org.apache.dolphinscheduler.server.master.config.MasterConfig;
 import org.apache.dolphinscheduler.server.master.dispatch.ExecutorDispatcher;

File: dolphinscheduler-spi/src/main/java/org/apache/dolphinscheduler/spi/task/request/ProcedureTaskExecutionContext.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.server.entity;
+package org.apache.dolphinscheduler.spi.task.request;
 
 import java.io.Serializable;
 

File: dolphinscheduler-task-plugin/dolphinscheduler-task-datax/src/main/java/org/apache/dolphinscheduler/plugin/task/datax/DataxTaskChannel.java
Patch:
@@ -19,7 +19,6 @@
 
 import org.apache.dolphinscheduler.spi.task.AbstractTask;
 import org.apache.dolphinscheduler.spi.task.TaskChannel;
-import org.apache.dolphinscheduler.spi.task.request.DataxTaskRequest;
 import org.apache.dolphinscheduler.spi.task.request.TaskRequest;
 
 public class DataxTaskChannel implements TaskChannel {
@@ -31,6 +30,6 @@ public void cancelApplication(boolean status) {
 
     @Override
     public AbstractTask createTask(TaskRequest taskRequest) {
-        return new DataxTask((DataxTaskRequest) taskRequest);
+        return new DataxTask(taskRequest);
     }
 }

File: dolphinscheduler-task-plugin/dolphinscheduler-task-flink/src/main/java/org/apache/dolphinscheduler/plugin/task/flink/FlinkTask.java
Patch:
@@ -122,7 +122,6 @@ protected void setMainJarName() {
             if (resourceId == 0) {
                 resourceName = mainJar.getRes();
             } else {
-                //when update resource maybe has error ,也许也可以交给上层去做控制 需要看资源是否可以抽象为共性 目前来讲我认为是可以的
                 resourceName = mainJar.getResourceName().replaceFirst("/", "");
             }
             mainJar.setRes(resourceName);

File: dolphinscheduler-task-plugin/dolphinscheduler-task-mr/src/main/java/org/apache/dolphinscheduler/plugin/task/mr/MapReduceTask.java
Patch:
@@ -125,7 +125,6 @@ protected void setMainJarName() {
             if (resourceId == 0) {
                 resourceName = mainJar.getRes();
             } else {
-                //when update resource maybe has error ,也许也可以交给上层去做控制 需要看资源是否可以抽象为共性 目前来讲我认为是可以的
                 resourceName = mainJar.getResourceName().replaceFirst("/", "");
             }
             mainJar.setRes(resourceName);

File: dolphinscheduler-task-plugin/dolphinscheduler-task-procedure/src/main/java/org/apache/dolphinscheduler/plugin/task/procedure/ProcedureTaskChannel.java
Patch:
@@ -19,7 +19,6 @@
 
 import org.apache.dolphinscheduler.spi.task.AbstractTask;
 import org.apache.dolphinscheduler.spi.task.TaskChannel;
-import org.apache.dolphinscheduler.spi.task.request.ProcedureTaskRequest;
 import org.apache.dolphinscheduler.spi.task.request.TaskRequest;
 
 public class ProcedureTaskChannel implements TaskChannel {
@@ -31,6 +30,6 @@ public void cancelApplication(boolean status) {
 
     @Override
     public AbstractTask createTask(TaskRequest taskRequest) {
-        return new ProcedureTask((ProcedureTaskRequest) taskRequest);
+        return new ProcedureTask(taskRequest);
     }
 }

File: dolphinscheduler-task-plugin/dolphinscheduler-task-sqoop/src/main/java/org/apache/dolphinscheduler/plugin/task/sqoop/SqoopTaskChannel.java
Patch:
@@ -19,7 +19,6 @@
 
 import org.apache.dolphinscheduler.spi.task.AbstractTask;
 import org.apache.dolphinscheduler.spi.task.TaskChannel;
-import org.apache.dolphinscheduler.spi.task.request.SqoopTaskRequest;
 import org.apache.dolphinscheduler.spi.task.request.TaskRequest;
 
 public class SqoopTaskChannel implements TaskChannel {
@@ -31,6 +30,6 @@ public void cancelApplication(boolean status) {
 
     @Override
     public AbstractTask createTask(TaskRequest taskRequest) {
-        return new SqoopTask((SqoopTaskRequest) taskRequest);
+        return new SqoopTask(taskRequest);
     }
 }

File: dolphinscheduler-task-plugin/dolphinscheduler-task-sqoop/src/main/java/org/apache/dolphinscheduler/plugin/task/sqoop/generator/ISourceGenerator.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.dolphinscheduler.plugin.task.sqoop.generator;
 
 import org.apache.dolphinscheduler.plugin.task.sqoop.parameter.SqoopParameters;
-import org.apache.dolphinscheduler.spi.task.request.SqoopTaskRequest;
+import org.apache.dolphinscheduler.spi.task.request.TaskRequest;
 
 /**
  * Source Generator Interface
@@ -32,5 +32,5 @@ public interface ISourceGenerator {
      * @param taskExecutionContext taskExecutionContext
      * @return source script
      */
-    String generate(SqoopParameters sqoopParameters, SqoopTaskRequest taskExecutionContext);
+    String generate(SqoopParameters sqoopParameters, TaskRequest taskExecutionContext);
 }

File: dolphinscheduler-task-plugin/dolphinscheduler-task-sqoop/src/main/java/org/apache/dolphinscheduler/plugin/task/sqoop/generator/ITargetGenerator.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.dolphinscheduler.plugin.task.sqoop.generator;
 
 import org.apache.dolphinscheduler.plugin.task.sqoop.parameter.SqoopParameters;
-import org.apache.dolphinscheduler.spi.task.request.SqoopTaskRequest;
+import org.apache.dolphinscheduler.spi.task.request.TaskRequest;
 
 /**
  * Target Generator Interface
@@ -32,5 +32,5 @@ public interface ITargetGenerator {
      * @param taskExecutionContext taskExecutionContext
      * @return target script
      */
-    String generate(SqoopParameters sqoopParameters, SqoopTaskRequest taskExecutionContext);
+    String generate(SqoopParameters sqoopParameters, TaskRequest taskExecutionContext);
 }

File: dolphinscheduler-task-plugin/dolphinscheduler-task-sqoop/src/main/java/org/apache/dolphinscheduler/plugin/task/sqoop/generator/SqoopJobGenerator.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.dolphinscheduler.plugin.task.sqoop.generator.targets.HiveTargetGenerator;
 import org.apache.dolphinscheduler.plugin.task.sqoop.generator.targets.MysqlTargetGenerator;
 import org.apache.dolphinscheduler.plugin.task.sqoop.parameter.SqoopParameters;
-import org.apache.dolphinscheduler.spi.task.request.SqoopTaskRequest;
+import org.apache.dolphinscheduler.spi.task.request.TaskRequest;
 
 /**
  * Sqoop Job Scripts Generator
@@ -64,7 +64,7 @@ private void createSqoopJobGenerator(String sourceType, String targetType) {
      * @param sqoopParameters sqoop params
      * @return sqoop scripts
      */
-    public String generateSqoopJob(SqoopParameters sqoopParameters, SqoopTaskRequest taskExecutionContext) {
+    public String generateSqoopJob(SqoopParameters sqoopParameters, TaskRequest taskExecutionContext) {
 
         String sqoopScripts = "";
 

File: dolphinscheduler-task-plugin/dolphinscheduler-task-sqoop/src/main/java/org/apache/dolphinscheduler/plugin/task/sqoop/generator/sources/HdfsSourceGenerator.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.dolphinscheduler.plugin.task.sqoop.generator.ISourceGenerator;
 import org.apache.dolphinscheduler.plugin.task.sqoop.parameter.SqoopParameters;
 import org.apache.dolphinscheduler.plugin.task.sqoop.parameter.sources.SourceHdfsParameter;
-import org.apache.dolphinscheduler.spi.task.request.SqoopTaskRequest;
+import org.apache.dolphinscheduler.spi.task.request.TaskRequest;
 import org.apache.dolphinscheduler.spi.utils.JSONUtils;
 import org.apache.dolphinscheduler.spi.utils.StringUtils;
 
@@ -38,7 +38,7 @@ public class HdfsSourceGenerator implements ISourceGenerator {
     private static final Logger logger = LoggerFactory.getLogger(HdfsSourceGenerator.class);
 
     @Override
-    public String generate(SqoopParameters sqoopParameters, SqoopTaskRequest taskExecutionContext) {
+    public String generate(SqoopParameters sqoopParameters, TaskRequest taskExecutionContext) {
 
         StringBuilder hdfsSourceSb = new StringBuilder();
 

File: dolphinscheduler-task-plugin/dolphinscheduler-task-sqoop/src/main/java/org/apache/dolphinscheduler/plugin/task/sqoop/generator/sources/HiveSourceGenerator.java
Patch:
@@ -26,7 +26,7 @@
 import org.apache.dolphinscheduler.plugin.task.sqoop.generator.ISourceGenerator;
 import org.apache.dolphinscheduler.plugin.task.sqoop.parameter.SqoopParameters;
 import org.apache.dolphinscheduler.plugin.task.sqoop.parameter.sources.SourceHiveParameter;
-import org.apache.dolphinscheduler.spi.task.request.SqoopTaskRequest;
+import org.apache.dolphinscheduler.spi.task.request.TaskRequest;
 import org.apache.dolphinscheduler.spi.utils.JSONUtils;
 import org.apache.dolphinscheduler.spi.utils.StringUtils;
 
@@ -41,7 +41,7 @@ public class HiveSourceGenerator implements ISourceGenerator {
     private static final Logger logger = LoggerFactory.getLogger(HiveSourceGenerator.class);
 
     @Override
-    public String generate(SqoopParameters sqoopParameters, SqoopTaskRequest taskExecutionContext) {
+    public String generate(SqoopParameters sqoopParameters, TaskRequest taskExecutionContext) {
 
         StringBuilder hiveSourceSb = new StringBuilder();
 

File: dolphinscheduler-task-plugin/dolphinscheduler-task-sqoop/src/main/java/org/apache/dolphinscheduler/plugin/task/sqoop/generator/targets/HdfsTargetGenerator.java
Patch:
@@ -29,7 +29,7 @@
 import org.apache.dolphinscheduler.plugin.task.sqoop.generator.ITargetGenerator;
 import org.apache.dolphinscheduler.plugin.task.sqoop.parameter.SqoopParameters;
 import org.apache.dolphinscheduler.plugin.task.sqoop.parameter.targets.TargetHdfsParameter;
-import org.apache.dolphinscheduler.spi.task.request.SqoopTaskRequest;
+import org.apache.dolphinscheduler.spi.task.request.TaskRequest;
 import org.apache.dolphinscheduler.spi.utils.JSONUtils;
 import org.apache.dolphinscheduler.spi.utils.StringUtils;
 
@@ -44,7 +44,7 @@ public class HdfsTargetGenerator implements ITargetGenerator {
     private static final Logger logger = LoggerFactory.getLogger(HdfsTargetGenerator.class);
 
     @Override
-    public String generate(SqoopParameters sqoopParameters, SqoopTaskRequest taskExecutionContext) {
+    public String generate(SqoopParameters sqoopParameters, TaskRequest taskExecutionContext) {
 
         StringBuilder hdfsTargetSb = new StringBuilder();
 

File: dolphinscheduler-task-plugin/dolphinscheduler-task-sqoop/src/main/java/org/apache/dolphinscheduler/plugin/task/sqoop/generator/targets/HiveTargetGenerator.java
Patch:
@@ -32,7 +32,7 @@
 import org.apache.dolphinscheduler.plugin.task.sqoop.generator.ITargetGenerator;
 import org.apache.dolphinscheduler.plugin.task.sqoop.parameter.SqoopParameters;
 import org.apache.dolphinscheduler.plugin.task.sqoop.parameter.targets.TargetHiveParameter;
-import org.apache.dolphinscheduler.spi.task.request.SqoopTaskRequest;
+import org.apache.dolphinscheduler.spi.task.request.TaskRequest;
 import org.apache.dolphinscheduler.spi.utils.JSONUtils;
 import org.apache.dolphinscheduler.spi.utils.StringUtils;
 
@@ -47,7 +47,7 @@ public class HiveTargetGenerator implements ITargetGenerator {
     private static final Logger logger = LoggerFactory.getLogger(HiveTargetGenerator.class);
 
     @Override
-    public String generate(SqoopParameters sqoopParameters, SqoopTaskRequest taskExecutionContext) {
+    public String generate(SqoopParameters sqoopParameters, TaskRequest taskExecutionContext) {
 
         StringBuilder hiveTargetSb = new StringBuilder();
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/UdfFuncServiceImpl.java
Patch:
@@ -204,7 +204,7 @@ public Map<String, Object> updateUdfFunc(int udfFuncId,
         // verify udfFuncName is exist
         if (!funcName.equals(udf.getFuncName())) {
             if (checkUdfFuncNameExists(funcName)) {
-                logger.error("UdfFunc {} has exist, can't create again.", funcName);
+                logger.error("UdfFuncRequest {} has exist, can't create again.", funcName);
                 result.put(Constants.STATUS, Status.UDF_FUNCTION_EXISTS);
                 result.put(Constants.MSG, Status.UDF_FUNCTION_EXISTS.getMsg());
                 return result;

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/UdfFuncServiceTest.java
Patch:
@@ -230,7 +230,7 @@ private List<UdfFunc> getList() {
     }
 
     /**
-     *  get UdfFunc id
+     *  get UdfFuncRequest id
      */
     private UdfFunc getUdfFunc() {
         UdfFunc udfFunc = new UdfFunc();

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/builder/TaskExecutionContextBuilder.java
Patch:
@@ -25,11 +25,11 @@
 import org.apache.dolphinscheduler.dao.entity.ProcessInstance;
 import org.apache.dolphinscheduler.dao.entity.TaskDefinition;
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
-import org.apache.dolphinscheduler.server.entity.DataxTaskExecutionContext;
 import org.apache.dolphinscheduler.server.entity.ProcedureTaskExecutionContext;
-import org.apache.dolphinscheduler.server.entity.SQLTaskExecutionContext;
-import org.apache.dolphinscheduler.server.entity.SqoopTaskExecutionContext;
 import org.apache.dolphinscheduler.server.entity.TaskExecutionContext;
+import org.apache.dolphinscheduler.spi.task.request.DataxTaskExecutionContext;
+import org.apache.dolphinscheduler.spi.task.request.SQLTaskExecutionContext;
+import org.apache.dolphinscheduler.spi.task.request.SqoopTaskExecutionContext;
 
 /**
  *  TaskExecutionContext builder

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/entity/TaskExecutionContext.java
Patch:
@@ -21,6 +21,9 @@
 import org.apache.dolphinscheduler.common.enums.TaskTimeoutStrategy;
 import org.apache.dolphinscheduler.common.process.Property;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
+import org.apache.dolphinscheduler.spi.task.request.DataxTaskExecutionContext;
+import org.apache.dolphinscheduler.spi.task.request.SQLTaskExecutionContext;
+import org.apache.dolphinscheduler.spi.task.request.SqoopTaskExecutionContext;
 import org.apache.dolphinscheduler.remote.command.Command;
 import org.apache.dolphinscheduler.remote.command.TaskExecuteRequestCommand;
 

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/master/consumer/TaskPriorityQueueConsumerTest.java
Patch:
@@ -32,12 +32,12 @@
 import org.apache.dolphinscheduler.dao.entity.TaskDefinition;
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
 import org.apache.dolphinscheduler.dao.entity.Tenant;
-import org.apache.dolphinscheduler.server.entity.DataxTaskExecutionContext;
 import org.apache.dolphinscheduler.server.entity.TaskExecutionContext;
 import org.apache.dolphinscheduler.server.master.dispatch.ExecutorDispatcher;
 import org.apache.dolphinscheduler.service.process.ProcessService;
 import org.apache.dolphinscheduler.service.queue.TaskPriority;
 import org.apache.dolphinscheduler.service.queue.TaskPriorityQueue;
+import org.apache.dolphinscheduler.spi.task.request.DataxTaskExecutionContext;
 
 import java.util.ArrayList;
 import java.util.Date;

File: dolphinscheduler-spi/src/main/java/org/apache/dolphinscheduler/spi/common/UiChannelFactory.java
Patch:
@@ -1,4 +1,4 @@
-package org.apache.dolphinscheduler.spi.common;/*
+/*
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements.  See the NOTICE file distributed with
  * this work for additional information regarding copyright ownership.
@@ -15,6 +15,8 @@
  * limitations under the License.
  */
 
+package org.apache.dolphinscheduler.spi.common;
+
 import org.apache.dolphinscheduler.spi.params.base.PluginParams;
 
 import java.util.List;

File: dolphinscheduler-spi/src/main/java/org/apache/dolphinscheduler/spi/task/TaskChannel.java
Patch:
@@ -1,4 +1,4 @@
-package org.apache.dolphinscheduler.spi.task;/*
+/*
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements.  See the NOTICE file distributed with
  * this work for additional information regarding copyright ownership.
@@ -15,6 +15,8 @@
  * limitations under the License.
  */
 
+package org.apache.dolphinscheduler.spi.task;
+
 import org.apache.dolphinscheduler.spi.task.request.TaskRequest;
 
 public interface TaskChannel {

File: dolphinscheduler-spi/src/main/java/org/apache/dolphinscheduler/spi/task/request/DataxTaskExecutionContext.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.server.entity;
+package org.apache.dolphinscheduler.spi.task.request;
 
 import java.io.Serializable;
 

File: dolphinscheduler-spi/src/main/java/org/apache/dolphinscheduler/spi/task/request/SqoopTaskExecutionContext.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.server.entity;
+package org.apache.dolphinscheduler.spi.task.request;
 
 import java.io.Serializable;
 

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/AbstractYarnTask.java
Patch:
@@ -65,8 +65,6 @@ public void handle() throws Exception {
     public void cancelApplication(boolean status) throws Exception {
         cancel = true;
         // cancel process
-
-        //todo 交给上层处理
         shellCommandExecutor.cancelApplication();
         //  TaskInstance taskInstance = processService.findTaskInstanceById(taskExecutionContext.getTaskInstanceId());
         // if (status && taskInstance != null){

File: dolphinscheduler-task-plugin/dolphinscheduler-task-http/src/main/java/org/apache/dolphinscheduler/plugin/task/http/HttpTaskChannel.java
Patch:
@@ -32,5 +32,4 @@ public void cancelApplication(boolean status) {
     public AbstractTask createTask(TaskRequest taskRequest) {
         return new HttpTask(taskRequest);
     }
-
 }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProcessDefinitionServiceImpl.java
Patch:
@@ -1342,9 +1342,7 @@ public Map<String, Object> switchProcessDefinitionVersion(User loginUser, long p
             return result;
         }
 
-        ProcessDefinitionLog processDefinitionLog = processDefinitionLogMapper
-            .queryByDefinitionCodeAndVersion(code, version);
-
+        ProcessDefinitionLog processDefinitionLog = processDefinitionLogMapper.queryByDefinitionCodeAndVersion(code, version);
         if (Objects.isNull(processDefinitionLog)) {
             putMsg(result, Status.SWITCH_PROCESS_DEFINITION_VERSION_NOT_EXIST_PROCESS_DEFINITION_VERSION_ERROR, processDefinition.getCode(), version);
             return result;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/registry/WorkerRegistryClient.java
Patch:
@@ -131,11 +131,10 @@ public void unRegistry() {
     public Set<String> getWorkerZkPaths() {
         Set<String> workerPaths = Sets.newHashSet();
         String address = getLocalAddress();
-        String workerZkPathPrefix = REGISTRY_DOLPHINSCHEDULER_WORKERS;
 
         for (String workGroup : this.workerGroups) {
             StringJoiner workerPathJoiner = new StringJoiner(SINGLE_SLASH);
-            workerPathJoiner.add(workerZkPathPrefix);
+            workerPathJoiner.add(REGISTRY_DOLPHINSCHEDULER_WORKERS);
             if (StringUtils.isEmpty(workGroup)) {
                 workGroup = DEFAULT_WORKER_GROUP;
             }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProjectServiceImpl.java
Patch:
@@ -296,7 +296,7 @@ public Map<String, Object> update(User loginUser, Long projectCode, String proje
             return result;
         }
         Project tempProject = projectMapper.queryByName(projectName);
-        if (tempProject != null) {
+        if (tempProject != null && tempProject.getCode() != project.getCode()) {
             putMsg(result, Status.PROJECT_ALREADY_EXISTS, projectName);
             return result;
         }

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/WorkFlowLineageMapperTest.java
Patch:
@@ -125,8 +125,8 @@ public void testQueryWorkFlowLineageByName() {
     @Test
     public void testQueryCodeRelation() {
         ProcessTaskRelation processTaskRelation = insertOneProcessTaskRelation();
-        List<ProcessLineage> workFlowLineages = workFlowLineageMapper.queryCodeRelation(processTaskRelation.getProjectCode(),
-            processTaskRelation.getProcessDefinitionCode(), processTaskRelation.getPostTaskCode(), processTaskRelation.getPostTaskVersion());
+        List<ProcessLineage> workFlowLineages = workFlowLineageMapper.queryProcessLineageByCode(processTaskRelation.getProjectCode(),
+            processTaskRelation.getProcessDefinitionCode());
         Assert.assertNotEquals(workFlowLineages.size(), 0);
     }
 

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessService.java
Patch:
@@ -44,7 +44,6 @@
 import org.apache.dolphinscheduler.common.enums.WarningType;
 import org.apache.dolphinscheduler.common.graph.DAG;
 import org.apache.dolphinscheduler.common.model.DateInterval;
-import org.apache.dolphinscheduler.common.model.PreviousTaskNode;
 import org.apache.dolphinscheduler.common.model.TaskNode;
 import org.apache.dolphinscheduler.common.model.TaskNodeRelation;
 import org.apache.dolphinscheduler.common.process.ProcessDag;

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/Constants.java
Patch:
@@ -755,6 +755,7 @@ private Constants() {
     public static final String PARENT_WORKFLOW_INSTANCE = "parentWorkflowInstance";
     public static final String CONDITION_RESULT = "conditionResult";
     public static final String SWITCH_RESULT = "switchResult";
+    public static final String WAIT_START_TIMEOUT = "waitStartTimeout";
     public static final String DEPENDENCE = "dependence";
     public static final String TASK_TYPE = "taskType";
     public static final String TASK_LIST = "taskList";

File: dolphinscheduler-spi/src/main/java/org/apache/dolphinscheduler/spi/plugin/DolphinPluginLoader.java
Patch:
@@ -59,6 +59,7 @@ public class DolphinPluginLoader {
     private static final ImmutableList<String> DOLPHIN_SPI_PACKAGES = ImmutableList.<String>builder()
             .add("org.apache.dolphinscheduler.spi.")
             .add("com.fasterxml.jackson.")
+            .add("org.slf4j")
             .build();
 
     private final File installedPluginsDir;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/WorkflowExecuteThread.java
Patch:
@@ -495,7 +495,7 @@ private void buildFlowDag() throws Exception {
                 processInstance.getProcessDefinitionVersion());
         recoverNodeIdList = getStartTaskInstanceList(processInstance.getCommandParam());
         List<TaskNode> taskNodeList =
-                processService.genTaskNodeList(processInstance.getProcessDefinitionCode(), processInstance.getProcessDefinitionVersion(), new HashMap<>());
+            processService.transformTask(processService.findRelationByCode(processDefinition.getProjectCode(), processDefinition.getCode()), Lists.newArrayList());
         forbiddenTaskList.clear();
         taskNodeList.forEach(taskNode -> {
             if (taskNode.isForbidden()) {

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProcessDefinitionController.java
Patch:
@@ -533,7 +533,7 @@ public Result getNodeListByDefinitionCode(@ApiIgnore @RequestAttribute(value = C
      */
     @ApiOperation(value = "getTaskListByDefinitionCodes", notes = "GET_TASK_LIST_BY_DEFINITION_CODE_NOTES")
     @ApiImplicitParams({
-        @ApiImplicitParam(name = "processDefinitionCodes", value = "PROCESS_DEFINITION_CODES", required = true, type = "String", example = "100,200,300")
+        @ApiImplicitParam(name = "codes", value = "PROCESS_DEFINITION_CODES", required = true, type = "String", example = "100,200,300")
     })
     @GetMapping(value = "/batch-query-tasks")
     @ResponseStatus(HttpStatus.OK)

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/WorkFlowLineageController.java
Patch:
@@ -96,7 +96,7 @@ public Result<Map<String, Object>> queryWorkFlowLineageByCode(@ApiIgnore @Reques
     @GetMapping(value = "/list")
     @ResponseStatus(HttpStatus.OK)
     @AccessLogAnnotation(ignoreRequestArgs = "loginUser")
-    public Result<Map<String, Object>> queryWorkFlowLineageByIds(@ApiIgnore @RequestAttribute(value = SESSION_USER) User loginUser,
+    public Result<Map<String, Object>> queryWorkFlowLineage(@ApiIgnore @RequestAttribute(value = SESSION_USER) User loginUser,
                                                                  @ApiParam(name = "projectCode", value = "PROJECT_CODE", required = true) @PathVariable long projectCode) {
         try {
             Map<String, Object> result = workFlowLineageService.queryWorkFlowLineage(projectCode);

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/model/TaskNode.java
Patch:
@@ -45,7 +45,7 @@ public class TaskNode {
     /**
      * task node code
      */
-    private Long code;
+    private long code;
 
     /**
      * task node version
@@ -342,11 +342,11 @@ public void setDelayTime(int delayTime) {
         this.delayTime = delayTime;
     }
 
-    public Long getCode() {
+    public long getCode() {
         return code;
     }
 
-    public void setCode(Long code) {
+    public void setCode(long code) {
         this.code = code;
     }
 

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/AbstractCommandExecutor.java
Patch:
@@ -19,7 +19,6 @@
 
 import static org.apache.dolphinscheduler.spi.task.TaskConstants.EXIT_CODE_FAILURE;
 import static org.apache.dolphinscheduler.spi.task.TaskConstants.EXIT_CODE_KILL;
-import static org.apache.dolphinscheduler.spi.task.TaskConstants.SH;
 
 import org.apache.dolphinscheduler.plugin.task.util.LoggerUtils;
 import org.apache.dolphinscheduler.plugin.task.util.OSUtils;
@@ -485,4 +484,6 @@ ExecutorService newDaemonSingleThreadExecutor(String threadName) {
                 .build();
         return Executors.newSingleThreadExecutor(threadFactory);
     }
+
+    protected abstract String commandInterpreter();
 }

File: dolphinscheduler-spi/src/main/java/org/apache/dolphinscheduler/spi/task/AbstractTask.java
Patch:
@@ -79,9 +79,6 @@ public String getPreScript() {
         return null;
     }
 
-    public void setCommand(String command) throws Exception {
-
-    }
 
     /**
      * task handle

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/AbstractCommandExecutor.java
Patch:
@@ -127,7 +127,7 @@ private void buildProcess(String commandFile) throws IOException {
         command.add("sudo");
         command.add("-u");
         command.add(taskRequest.getTenantCode());
-        command.add(SH);
+        command.add(commandInterpreter());
         command.addAll(Collections.emptyList());
         command.add(commandFile);
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/MasterServer.java
Patch:
@@ -127,8 +127,8 @@ public void run() {
         taskResponseProcessor.init(processInstanceExecMaps);
         StateEventProcessor stateEventProcessor = new StateEventProcessor();
         stateEventProcessor.init(processInstanceExecMaps);
-        this.nettyRemotingServer.registerProcessor(CommandType.TASK_EXECUTE_RESPONSE, ackProcessor);
-        this.nettyRemotingServer.registerProcessor(CommandType.TASK_EXECUTE_ACK, taskResponseProcessor);
+        this.nettyRemotingServer.registerProcessor(CommandType.TASK_EXECUTE_RESPONSE, taskResponseProcessor);
+        this.nettyRemotingServer.registerProcessor(CommandType.TASK_EXECUTE_ACK, ackProcessor);
         this.nettyRemotingServer.registerProcessor(CommandType.TASK_KILL_RESPONSE, new TaskKillResponseProcessor());
         this.nettyRemotingServer.registerProcessor(CommandType.STATE_EVENT_REQUEST, stateEventProcessor);
         this.nettyRemotingServer.start();

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/WorkFlowLineageService.java
Patch:
@@ -25,8 +25,9 @@
  */
 public interface WorkFlowLineageService {
 
-    Map<String, Object> queryWorkFlowLineageByName(String workFlowName, long projectCode);
+    Map<String, Object> queryWorkFlowLineageByName(long projectCode, String workFlowName);
 
-    Map<String, Object> queryWorkFlowLineageByIds(Set<Integer> ids, long projectCode);
+    Map<String, Object> queryWorkFlowLineageByCode(long projectCode, long workFlowCode);
 
+    Map<String, Object> queryWorkFlowLineage(long projectCode);
 }

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/task/CommonTaskProcessor.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.ExecutionStatus;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
+import org.apache.dolphinscheduler.common.utils.StringUtils;
 import org.apache.dolphinscheduler.dao.entity.ProcessInstance;
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
 import org.apache.dolphinscheduler.remote.command.TaskKillRequestCommand;
@@ -147,7 +148,7 @@ public boolean killTask() {
             if (taskInstance.getState().typeIsFinished()) {
                 return true;
             }
-            if (null == taskInstance.getHost() || taskInstance.getHost().isEmpty()) {
+            if (StringUtils.isBlank(taskInstance.getHost())) {
                 taskInstance.setState(ExecutionStatus.KILL);
                 taskInstance.setEndTime(new Date());
                 processService.updateTaskInstance(taskInstance);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProjectController.java
Patch:
@@ -206,7 +206,7 @@ public Result deleteProject(@ApiIgnore @RequestAttribute(value = Constants.SESSI
     @ApiImplicitParams({
         @ApiImplicitParam(name = "userId", value = "USER_ID", dataType = "Int", example = "100")
     })
-    @GetMapping(value = "/unauth")
+    @GetMapping(value = "/unauth-project")
     @ResponseStatus(HttpStatus.OK)
     @ApiException(QUERY_UNAUTHORIZED_PROJECT_ERROR)
     @AccessLogAnnotation(ignoreRequestArgs = "loginUser")
@@ -227,7 +227,7 @@ public Result queryUnauthorizedProject(@ApiIgnore @RequestAttribute(value = Cons
     @ApiImplicitParams({
         @ApiImplicitParam(name = "userId", value = "USER_ID", dataType = "Int", example = "100")
     })
-    @GetMapping(value = "/authed")
+    @GetMapping(value = "/authed-project")
     @ResponseStatus(HttpStatus.OK)
     @ApiException(QUERY_AUTHORIZED_PROJECT)
     @AccessLogAnnotation(ignoreRequestArgs = "loginUser")

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/datasource/DatasourceUtil.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.dolphinscheduler.plugin.task.datasource;
 
-import org.apache.dolphinscheduler.spi.enums.DbType;
 import org.apache.dolphinscheduler.plugin.task.datasource.clickhouse.ClickHouseDatasourceProcessor;
 import org.apache.dolphinscheduler.plugin.task.datasource.db2.Db2DatasourceProcessor;
 import org.apache.dolphinscheduler.plugin.task.datasource.hive.HiveDatasourceProcessor;
@@ -27,6 +26,7 @@
 import org.apache.dolphinscheduler.plugin.task.datasource.presto.PrestoDatasourceProcessor;
 import org.apache.dolphinscheduler.plugin.task.datasource.spark.SparkDatasourceProcessor;
 import org.apache.dolphinscheduler.plugin.task.datasource.sqlserver.SqlServerDatasourceProcessor;
+import org.apache.dolphinscheduler.spi.enums.DbType;
 
 import java.sql.Connection;
 

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/datasource/clickhouse/ClickHouseDatasourceParamDTO.java
Patch:
@@ -17,8 +17,8 @@
 
 package org.apache.dolphinscheduler.plugin.task.datasource.clickhouse;
 
-import org.apache.dolphinscheduler.spi.enums.DbType;
 import org.apache.dolphinscheduler.plugin.task.datasource.BaseDataSourceParamDTO;
+import org.apache.dolphinscheduler.spi.enums.DbType;
 
 public class ClickHouseDatasourceParamDTO extends BaseDataSourceParamDTO {
 

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/datasource/mysql/MysqlDatasourceParamDTO.java
Patch:
@@ -17,8 +17,8 @@
 
 package org.apache.dolphinscheduler.plugin.task.datasource.mysql;
 
-import org.apache.dolphinscheduler.spi.enums.DbType;
 import org.apache.dolphinscheduler.plugin.task.datasource.BaseDataSourceParamDTO;
+import org.apache.dolphinscheduler.spi.enums.DbType;
 
 public class MysqlDatasourceParamDTO extends BaseDataSourceParamDTO {
 

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/datasource/mysql/MysqlDatasourceProcessor.java
Patch:
@@ -17,19 +17,19 @@
 
 package org.apache.dolphinscheduler.plugin.task.datasource.mysql;
 
+import static org.apache.dolphinscheduler.plugin.task.datasource.PasswordUtils.decodePassword;
+import static org.apache.dolphinscheduler.plugin.task.datasource.PasswordUtils.encodePassword;
 import static org.apache.dolphinscheduler.spi.task.TaskConstants.COLON;
 import static org.apache.dolphinscheduler.spi.task.TaskConstants.COMMA;
 import static org.apache.dolphinscheduler.spi.task.TaskConstants.COM_MYSQL_JDBC_DRIVER;
 import static org.apache.dolphinscheduler.spi.task.TaskConstants.DOUBLE_SLASH;
 import static org.apache.dolphinscheduler.spi.task.TaskConstants.JDBC_MYSQL;
-import static org.apache.dolphinscheduler.plugin.task.datasource.PasswordUtils.decodePassword;
-import static org.apache.dolphinscheduler.plugin.task.datasource.PasswordUtils.encodePassword;
 
-import org.apache.dolphinscheduler.spi.enums.DbType;
 import org.apache.dolphinscheduler.plugin.task.datasource.AbstractDatasourceProcessor;
 import org.apache.dolphinscheduler.plugin.task.datasource.BaseConnectionParam;
 import org.apache.dolphinscheduler.plugin.task.datasource.BaseDataSourceParamDTO;
 import org.apache.dolphinscheduler.plugin.task.datasource.ConnectionParam;
+import org.apache.dolphinscheduler.spi.enums.DbType;
 import org.apache.dolphinscheduler.spi.utils.JSONUtils;
 import org.apache.dolphinscheduler.spi.utils.StringUtils;
 

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/datasource/oracle/OracleConnectionParam.java
Patch:
@@ -17,8 +17,8 @@
 
 package org.apache.dolphinscheduler.plugin.task.datasource.oracle;
 
-import org.apache.dolphinscheduler.spi.enums.DbConnectType;
 import org.apache.dolphinscheduler.plugin.task.datasource.BaseConnectionParam;
+import org.apache.dolphinscheduler.spi.enums.DbConnectType;
 
 public class OracleConnectionParam extends BaseConnectionParam {
 

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/datasource/oracle/OracleDatasourceParamDTO.java
Patch:
@@ -17,9 +17,9 @@
 
 package org.apache.dolphinscheduler.plugin.task.datasource.oracle;
 
+import org.apache.dolphinscheduler.plugin.task.datasource.BaseDataSourceParamDTO;
 import org.apache.dolphinscheduler.spi.enums.DbConnectType;
 import org.apache.dolphinscheduler.spi.enums.DbType;
-import org.apache.dolphinscheduler.plugin.task.datasource.BaseDataSourceParamDTO;
 
 public class OracleDatasourceParamDTO extends BaseDataSourceParamDTO {
 

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/datasource/postgresql/PostgreSqlDatasourceParamDTO.java
Patch:
@@ -17,8 +17,8 @@
 
 package org.apache.dolphinscheduler.plugin.task.datasource.postgresql;
 
-import org.apache.dolphinscheduler.spi.enums.DbType;
 import org.apache.dolphinscheduler.plugin.task.datasource.BaseDataSourceParamDTO;
+import org.apache.dolphinscheduler.spi.enums.DbType;
 
 public class PostgreSqlDatasourceParamDTO extends BaseDataSourceParamDTO {
 

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/datasource/postgresql/PostgreSqlDatasourceProcessor.java
Patch:
@@ -17,19 +17,19 @@
 
 package org.apache.dolphinscheduler.plugin.task.datasource.postgresql;
 
+import static org.apache.dolphinscheduler.plugin.task.datasource.PasswordUtils.decodePassword;
+import static org.apache.dolphinscheduler.plugin.task.datasource.PasswordUtils.encodePassword;
 import static org.apache.dolphinscheduler.spi.task.TaskConstants.COLON;
 import static org.apache.dolphinscheduler.spi.task.TaskConstants.COMMA;
 import static org.apache.dolphinscheduler.spi.task.TaskConstants.DOUBLE_SLASH;
 import static org.apache.dolphinscheduler.spi.task.TaskConstants.JDBC_POSTGRESQL;
 import static org.apache.dolphinscheduler.spi.task.TaskConstants.ORG_POSTGRESQL_DRIVER;
-import static org.apache.dolphinscheduler.plugin.task.datasource.PasswordUtils.decodePassword;
-import static org.apache.dolphinscheduler.plugin.task.datasource.PasswordUtils.encodePassword;
 
-import org.apache.dolphinscheduler.spi.enums.DbType;
 import org.apache.dolphinscheduler.plugin.task.datasource.AbstractDatasourceProcessor;
 import org.apache.dolphinscheduler.plugin.task.datasource.BaseConnectionParam;
 import org.apache.dolphinscheduler.plugin.task.datasource.BaseDataSourceParamDTO;
 import org.apache.dolphinscheduler.plugin.task.datasource.ConnectionParam;
+import org.apache.dolphinscheduler.spi.enums.DbType;
 import org.apache.dolphinscheduler.spi.utils.JSONUtils;
 import org.apache.dolphinscheduler.spi.utils.StringUtils;
 

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/datasource/spark/SparkDatasourceParamDTO.java
Patch:
@@ -17,8 +17,8 @@
 
 package org.apache.dolphinscheduler.plugin.task.datasource.spark;
 
-import org.apache.dolphinscheduler.spi.enums.DbType;
 import org.apache.dolphinscheduler.plugin.task.datasource.BaseHdfsDatasourceParamDTO;
+import org.apache.dolphinscheduler.spi.enums.DbType;
 
 public class SparkDatasourceParamDTO extends BaseHdfsDatasourceParamDTO {
 

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/datasource/spark/SparkDatasourceProcessor.java
Patch:
@@ -17,20 +17,20 @@
 
 package org.apache.dolphinscheduler.plugin.task.datasource.spark;
 
+import static org.apache.dolphinscheduler.plugin.task.datasource.PasswordUtils.decodePassword;
+import static org.apache.dolphinscheduler.plugin.task.datasource.PasswordUtils.encodePassword;
 import static org.apache.dolphinscheduler.spi.task.TaskConstants.COLON;
 import static org.apache.dolphinscheduler.spi.task.TaskConstants.COMMA;
 import static org.apache.dolphinscheduler.spi.task.TaskConstants.DOUBLE_SLASH;
 import static org.apache.dolphinscheduler.spi.task.TaskConstants.JDBC_HIVE_2;
 import static org.apache.dolphinscheduler.spi.task.TaskConstants.ORG_APACHE_HIVE_JDBC_HIVE_DRIVER;
-import static org.apache.dolphinscheduler.plugin.task.datasource.PasswordUtils.decodePassword;
-import static org.apache.dolphinscheduler.plugin.task.datasource.PasswordUtils.encodePassword;
 
-import org.apache.dolphinscheduler.spi.enums.DbType;
 import org.apache.dolphinscheduler.plugin.task.datasource.AbstractDatasourceProcessor;
 import org.apache.dolphinscheduler.plugin.task.datasource.BaseConnectionParam;
 import org.apache.dolphinscheduler.plugin.task.datasource.BaseDataSourceParamDTO;
 import org.apache.dolphinscheduler.plugin.task.datasource.ConnectionParam;
 import org.apache.dolphinscheduler.plugin.task.util.CommonUtils;
+import org.apache.dolphinscheduler.spi.enums.DbType;
 import org.apache.dolphinscheduler.spi.utils.JSONUtils;
 import org.apache.dolphinscheduler.spi.utils.StringUtils;
 

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/datasource/sqlserver/SqlServerDatasourceParamDTO.java
Patch:
@@ -17,8 +17,8 @@
 
 package org.apache.dolphinscheduler.plugin.task.datasource.sqlserver;
 
-import org.apache.dolphinscheduler.spi.enums.DbType;
 import org.apache.dolphinscheduler.plugin.task.datasource.BaseDataSourceParamDTO;
+import org.apache.dolphinscheduler.spi.enums.DbType;
 
 public class SqlServerDatasourceParamDTO extends BaseDataSourceParamDTO {
 

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/datasource/sqlserver/SqlServerDatasourceProcessor.java
Patch:
@@ -17,19 +17,19 @@
 
 package org.apache.dolphinscheduler.plugin.task.datasource.sqlserver;
 
+import static org.apache.dolphinscheduler.plugin.task.datasource.PasswordUtils.decodePassword;
+import static org.apache.dolphinscheduler.plugin.task.datasource.PasswordUtils.encodePassword;
 import static org.apache.dolphinscheduler.spi.task.TaskConstants.COLON;
 import static org.apache.dolphinscheduler.spi.task.TaskConstants.COMMA;
 import static org.apache.dolphinscheduler.spi.task.TaskConstants.COM_SQLSERVER_JDBC_DRIVER;
 import static org.apache.dolphinscheduler.spi.task.TaskConstants.DOUBLE_SLASH;
 import static org.apache.dolphinscheduler.spi.task.TaskConstants.JDBC_SQLSERVER;
-import static org.apache.dolphinscheduler.plugin.task.datasource.PasswordUtils.decodePassword;
-import static org.apache.dolphinscheduler.plugin.task.datasource.PasswordUtils.encodePassword;
 
-import org.apache.dolphinscheduler.spi.enums.DbType;
 import org.apache.dolphinscheduler.plugin.task.datasource.AbstractDatasourceProcessor;
 import org.apache.dolphinscheduler.plugin.task.datasource.BaseConnectionParam;
 import org.apache.dolphinscheduler.plugin.task.datasource.BaseDataSourceParamDTO;
 import org.apache.dolphinscheduler.plugin.task.datasource.ConnectionParam;
+import org.apache.dolphinscheduler.spi.enums.DbType;
 import org.apache.dolphinscheduler.spi.utils.JSONUtils;
 import org.apache.dolphinscheduler.spi.utils.StringUtils;
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/processor/TaskKillProcessor.java
Patch:
@@ -109,7 +109,7 @@ private Pair<Boolean, List<String>> doKill(TaskKillRequestCommand killCommand) {
         List<String> appIds = Collections.emptyList();
         int taskInstanceId = killCommand.getTaskInstanceId();
         TaskRequest taskRequest = TaskExecutionContextCacheManager.getByTaskInstanceId(taskInstanceId);
-        TaskExecutionContext taskExecutionContext =JSONUtils.parseObject(JSONUtils.toJsonString(taskRequest), TaskExecutionContext.class);
+        TaskExecutionContext taskExecutionContext = JSONUtils.parseObject(JSONUtils.toJsonString(taskRequest), TaskExecutionContext.class);
 
         try {
             Integer processId = taskExecutionContext.getProcessId();
@@ -156,7 +156,7 @@ private TaskKillResponseCommand buildKillTaskResponseCommand(TaskKillRequestComm
         if (taskRequest == null) {
             return taskKillResponseCommand;
         }
-        TaskExecutionContext taskExecutionContext =JSONUtils.parseObject(JSONUtils.toJsonString(taskRequest), TaskExecutionContext.class);
+        TaskExecutionContext taskExecutionContext = JSONUtils.parseObject(JSONUtils.toJsonString(taskRequest), TaskExecutionContext.class);
         if (taskExecutionContext != null) {
             taskKillResponseCommand.setTaskInstanceId(taskExecutionContext.getTaskInstanceId());
             taskKillResponseCommand.setHost(taskExecutionContext.getHost());

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/runner/WorkerManagerThread.java
Patch:
@@ -100,8 +100,8 @@ private void sendTaskKillResponse(Integer taskInstanceId) {
         if (taskRequest == null) {
             return;
         }
-        TaskExecutionContext taskExecutionContext =JSONUtils.parseObject(JSONUtils.toJsonString(taskRequest), TaskExecutionContext.class);
-        TaskExecuteResponseCommand responseCommand = new TaskExecuteResponseCommand(taskExecutionContext.getTaskInstanceId(),taskExecutionContext.getProcessInstanceId());
+        TaskExecutionContext taskExecutionContext = JSONUtils.parseObject(JSONUtils.toJsonString(taskRequest), TaskExecutionContext.class);
+        TaskExecuteResponseCommand responseCommand = new TaskExecuteResponseCommand(taskExecutionContext.getTaskInstanceId(), taskExecutionContext.getProcessInstanceId());
         responseCommand.setStatus(ExecutionStatus.KILL.getCode());
         ResponceCache.get().cache(taskExecutionContext.getTaskInstanceId(), responseCommand.convert2Command(), Event.RESULT);
         taskCallbackService.sendResult(taskExecutionContext.getTaskInstanceId(), responseCommand.convert2Command());

File: dolphinscheduler-spi/src/main/java/org/apache/dolphinscheduler/spi/params/input/number/InputNumberParam.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.spi.params.inputNumber;
+package org.apache.dolphinscheduler.spi.params.input.number;
 
 import static org.apache.dolphinscheduler.spi.params.base.FormType.INPUTNUMBER;
 

File: dolphinscheduler-spi/src/main/java/org/apache/dolphinscheduler/spi/params/input/number/InputNumberParamProps.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.spi.params.inputNumber;
+package org.apache.dolphinscheduler.spi.params.input.number;
 
 import org.apache.dolphinscheduler.spi.params.base.ParamsProps;
 

File: dolphinscheduler-spi/src/main/java/org/apache/dolphinscheduler/spi/task/AbstractTask.java
Patch:
@@ -100,8 +100,6 @@ public void cancelApplication(boolean status) throws Exception {
         this.cancel = status;
     }
 
-
-
     public void setVarPool(String varPool) {
         this.varPool = varPool;
     }

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/datasource/BaseDataSourceParamDTO.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.dolphinscheduler.plugin.task.datasource;
 
-import org.apache.dolphinscheduler.spi.enums.DbType;
 import org.apache.dolphinscheduler.plugin.task.datasource.clickhouse.ClickHouseDatasourceParamDTO;
 import org.apache.dolphinscheduler.plugin.task.datasource.db2.Db2DatasourceParamDTO;
 import org.apache.dolphinscheduler.plugin.task.datasource.hive.HiveDataSourceParamDTO;
@@ -27,6 +26,7 @@
 import org.apache.dolphinscheduler.plugin.task.datasource.presto.PrestoDatasourceParamDTO;
 import org.apache.dolphinscheduler.plugin.task.datasource.spark.SparkDatasourceParamDTO;
 import org.apache.dolphinscheduler.plugin.task.datasource.sqlserver.SqlServerDatasourceParamDTO;
+import org.apache.dolphinscheduler.spi.enums.DbType;
 
 import java.io.Serializable;
 import java.util.Map;

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/datasource/clickhouse/ClickHouseDatasourceProcessor.java
Patch:
@@ -17,18 +17,18 @@
 
 package org.apache.dolphinscheduler.plugin.task.datasource.clickhouse;
 
+import static org.apache.dolphinscheduler.plugin.task.datasource.PasswordUtils.decodePassword;
+import static org.apache.dolphinscheduler.plugin.task.datasource.PasswordUtils.encodePassword;
 import static org.apache.dolphinscheduler.spi.task.TaskConstants.COLON;
 import static org.apache.dolphinscheduler.spi.task.TaskConstants.COMMA;
 import static org.apache.dolphinscheduler.spi.task.TaskConstants.COM_CLICKHOUSE_JDBC_DRIVER;
 import static org.apache.dolphinscheduler.spi.task.TaskConstants.DOUBLE_SLASH;
 import static org.apache.dolphinscheduler.spi.task.TaskConstants.JDBC_CLICKHOUSE;
-import static org.apache.dolphinscheduler.plugin.task.datasource.PasswordUtils.decodePassword;
-import static org.apache.dolphinscheduler.plugin.task.datasource.PasswordUtils.encodePassword;
 
-import org.apache.dolphinscheduler.spi.enums.DbType;
 import org.apache.dolphinscheduler.plugin.task.datasource.AbstractDatasourceProcessor;
 import org.apache.dolphinscheduler.plugin.task.datasource.BaseDataSourceParamDTO;
 import org.apache.dolphinscheduler.plugin.task.datasource.ConnectionParam;
+import org.apache.dolphinscheduler.spi.enums.DbType;
 import org.apache.dolphinscheduler.spi.utils.JSONUtils;
 import org.apache.dolphinscheduler.spi.utils.StringUtils;
 

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/datasource/db2/Db2DatasourceParamDTO.java
Patch:
@@ -17,8 +17,8 @@
 
 package org.apache.dolphinscheduler.plugin.task.datasource.db2;
 
-import org.apache.dolphinscheduler.spi.enums.DbType;
 import org.apache.dolphinscheduler.plugin.task.datasource.BaseDataSourceParamDTO;
+import org.apache.dolphinscheduler.spi.enums.DbType;
 
 public class Db2DatasourceParamDTO extends BaseDataSourceParamDTO {
 

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/datasource/db2/Db2DatasourceProcessor.java
Patch:
@@ -17,19 +17,19 @@
 
 package org.apache.dolphinscheduler.plugin.task.datasource.db2;
 
+import static org.apache.dolphinscheduler.plugin.task.datasource.PasswordUtils.decodePassword;
+import static org.apache.dolphinscheduler.plugin.task.datasource.PasswordUtils.encodePassword;
 import static org.apache.dolphinscheduler.spi.task.TaskConstants.COLON;
 import static org.apache.dolphinscheduler.spi.task.TaskConstants.COMMA;
 import static org.apache.dolphinscheduler.spi.task.TaskConstants.COM_DB2_JDBC_DRIVER;
 import static org.apache.dolphinscheduler.spi.task.TaskConstants.DOUBLE_SLASH;
 import static org.apache.dolphinscheduler.spi.task.TaskConstants.JDBC_DB2;
-import static org.apache.dolphinscheduler.plugin.task.datasource.PasswordUtils.decodePassword;
-import static org.apache.dolphinscheduler.plugin.task.datasource.PasswordUtils.encodePassword;
 
-import org.apache.dolphinscheduler.spi.enums.DbType;
 import org.apache.dolphinscheduler.plugin.task.datasource.AbstractDatasourceProcessor;
 import org.apache.dolphinscheduler.plugin.task.datasource.BaseConnectionParam;
 import org.apache.dolphinscheduler.plugin.task.datasource.BaseDataSourceParamDTO;
 import org.apache.dolphinscheduler.plugin.task.datasource.ConnectionParam;
+import org.apache.dolphinscheduler.spi.enums.DbType;
 import org.apache.dolphinscheduler.spi.utils.JSONUtils;
 import org.apache.dolphinscheduler.spi.utils.StringUtils;
 

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/datasource/hive/HiveDataSourceParamDTO.java
Patch:
@@ -17,8 +17,8 @@
 
 package org.apache.dolphinscheduler.plugin.task.datasource.hive;
 
-import org.apache.dolphinscheduler.spi.enums.DbType;
 import org.apache.dolphinscheduler.plugin.task.datasource.BaseHdfsDatasourceParamDTO;
+import org.apache.dolphinscheduler.spi.enums.DbType;
 
 public class HiveDataSourceParamDTO extends BaseHdfsDatasourceParamDTO {
 

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/datasource/hive/HiveDatasourceProcessor.java
Patch:
@@ -17,21 +17,21 @@
 
 package org.apache.dolphinscheduler.plugin.task.datasource.hive;
 
+import static org.apache.dolphinscheduler.plugin.task.datasource.PasswordUtils.decodePassword;
+import static org.apache.dolphinscheduler.plugin.task.datasource.PasswordUtils.encodePassword;
 import static org.apache.dolphinscheduler.spi.task.TaskConstants.COLON;
 import static org.apache.dolphinscheduler.spi.task.TaskConstants.COMMA;
 import static org.apache.dolphinscheduler.spi.task.TaskConstants.DOUBLE_SLASH;
 import static org.apache.dolphinscheduler.spi.task.TaskConstants.JDBC_HIVE_2;
 import static org.apache.dolphinscheduler.spi.task.TaskConstants.ORG_APACHE_HIVE_JDBC_HIVE_DRIVER;
-import static org.apache.dolphinscheduler.plugin.task.datasource.PasswordUtils.decodePassword;
-import static org.apache.dolphinscheduler.plugin.task.datasource.PasswordUtils.encodePassword;
 
-import org.apache.dolphinscheduler.spi.enums.DbType;
 import org.apache.dolphinscheduler.plugin.task.datasource.AbstractDatasourceProcessor;
 import org.apache.dolphinscheduler.plugin.task.datasource.BaseConnectionParam;
 import org.apache.dolphinscheduler.plugin.task.datasource.BaseDataSourceParamDTO;
 import org.apache.dolphinscheduler.plugin.task.datasource.ConnectionParam;
 import org.apache.dolphinscheduler.plugin.task.datasource.HiveConfUtils;
 import org.apache.dolphinscheduler.plugin.task.util.CommonUtils;
+import org.apache.dolphinscheduler.spi.enums.DbType;
 import org.apache.dolphinscheduler.spi.utils.JSONUtils;
 import org.apache.dolphinscheduler.spi.utils.StringUtils;
 

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/datasource/presto/PrestoDatasourceParamDTO.java
Patch:
@@ -17,8 +17,8 @@
 
 package org.apache.dolphinscheduler.plugin.task.datasource.presto;
 
-import org.apache.dolphinscheduler.spi.enums.DbType;
 import org.apache.dolphinscheduler.plugin.task.datasource.BaseDataSourceParamDTO;
+import org.apache.dolphinscheduler.spi.enums.DbType;
 
 public class PrestoDatasourceParamDTO extends BaseDataSourceParamDTO {
 

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/datasource/presto/PrestoDatasourceProcessor.java
Patch:
@@ -17,19 +17,19 @@
 
 package org.apache.dolphinscheduler.plugin.task.datasource.presto;
 
+import static org.apache.dolphinscheduler.plugin.task.datasource.PasswordUtils.decodePassword;
+import static org.apache.dolphinscheduler.plugin.task.datasource.PasswordUtils.encodePassword;
 import static org.apache.dolphinscheduler.spi.task.TaskConstants.COLON;
 import static org.apache.dolphinscheduler.spi.task.TaskConstants.COMMA;
 import static org.apache.dolphinscheduler.spi.task.TaskConstants.COM_PRESTO_JDBC_DRIVER;
 import static org.apache.dolphinscheduler.spi.task.TaskConstants.DOUBLE_SLASH;
 import static org.apache.dolphinscheduler.spi.task.TaskConstants.JDBC_PRESTO;
-import static org.apache.dolphinscheduler.plugin.task.datasource.PasswordUtils.decodePassword;
-import static org.apache.dolphinscheduler.plugin.task.datasource.PasswordUtils.encodePassword;
 
-import org.apache.dolphinscheduler.spi.enums.DbType;
 import org.apache.dolphinscheduler.plugin.task.datasource.AbstractDatasourceProcessor;
 import org.apache.dolphinscheduler.plugin.task.datasource.BaseConnectionParam;
 import org.apache.dolphinscheduler.plugin.task.datasource.BaseDataSourceParamDTO;
 import org.apache.dolphinscheduler.plugin.task.datasource.ConnectionParam;
+import org.apache.dolphinscheduler.spi.enums.DbType;
 import org.apache.dolphinscheduler.spi.utils.JSONUtils;
 import org.apache.dolphinscheduler.spi.utils.StringUtils;
 

File: dolphinscheduler-task-plugin/dolphinscheduler-task-procedure/src/main/java/org/apache/dolphinscheduler/plugin/task/procedure/ProcedureTask.java
Patch:
@@ -22,14 +22,14 @@
 import static org.apache.dolphinscheduler.spi.task.TaskConstants.TASK_LOG_INFO_FORMAT;
 
 import org.apache.dolphinscheduler.plugin.task.api.AbstractTaskExecutor;
+import org.apache.dolphinscheduler.plugin.task.datasource.ConnectionParam;
+import org.apache.dolphinscheduler.plugin.task.datasource.DatasourceUtil;
 import org.apache.dolphinscheduler.spi.enums.DataType;
 import org.apache.dolphinscheduler.spi.enums.DbType;
 import org.apache.dolphinscheduler.spi.enums.TaskTimeoutStrategy;
 import org.apache.dolphinscheduler.spi.task.AbstractParameters;
 import org.apache.dolphinscheduler.spi.task.Direct;
 import org.apache.dolphinscheduler.spi.task.Property;
-import org.apache.dolphinscheduler.plugin.task.datasource.ConnectionParam;
-import org.apache.dolphinscheduler.plugin.task.datasource.DatasourceUtil;
 import org.apache.dolphinscheduler.spi.task.paramparser.ParamUtils;
 import org.apache.dolphinscheduler.spi.task.paramparser.ParameterUtils;
 import org.apache.dolphinscheduler.spi.task.request.ProcedureTaskRequest;

File: dolphinscheduler-task-plugin/dolphinscheduler-task-sqoop/src/main/java/org/apache/dolphinscheduler/plugin/task/sqoop/generator/sources/MysqlSourceGenerator.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.dolphinscheduler.plugin.task.sqoop.generator.sources;
 
+import static org.apache.dolphinscheduler.plugin.task.datasource.PasswordUtils.decodePassword;
 import static org.apache.dolphinscheduler.plugin.task.sqoop.SqoopConstants.COLUMNS;
 import static org.apache.dolphinscheduler.plugin.task.sqoop.SqoopConstants.DB_CONNECT;
 import static org.apache.dolphinscheduler.plugin.task.sqoop.SqoopConstants.DB_PWD;
@@ -32,16 +33,15 @@
 import static org.apache.dolphinscheduler.spi.task.TaskConstants.DOUBLE_QUOTES;
 import static org.apache.dolphinscheduler.spi.task.TaskConstants.EQUAL_SIGN;
 import static org.apache.dolphinscheduler.spi.task.TaskConstants.SPACE;
-import static org.apache.dolphinscheduler.plugin.task.datasource.PasswordUtils.decodePassword;
 
+import org.apache.dolphinscheduler.plugin.task.datasource.BaseConnectionParam;
+import org.apache.dolphinscheduler.plugin.task.datasource.DatasourceUtil;
 import org.apache.dolphinscheduler.plugin.task.sqoop.SqoopQueryType;
 import org.apache.dolphinscheduler.plugin.task.sqoop.generator.ISourceGenerator;
 import org.apache.dolphinscheduler.plugin.task.sqoop.parameter.SqoopParameters;
 import org.apache.dolphinscheduler.plugin.task.sqoop.parameter.sources.SourceMysqlParameter;
 import org.apache.dolphinscheduler.spi.enums.DbType;
 import org.apache.dolphinscheduler.spi.task.Property;
-import org.apache.dolphinscheduler.plugin.task.datasource.BaseConnectionParam;
-import org.apache.dolphinscheduler.plugin.task.datasource.DatasourceUtil;
 import org.apache.dolphinscheduler.spi.task.request.SqoopTaskRequest;
 import org.apache.dolphinscheduler.spi.utils.JSONUtils;
 import org.apache.dolphinscheduler.spi.utils.StringUtils;

File: dolphinscheduler-task-plugin/dolphinscheduler-task-sqoop/src/main/java/org/apache/dolphinscheduler/plugin/task/sqoop/generator/targets/MysqlTargetGenerator.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.dolphinscheduler.plugin.task.sqoop.generator.targets;
 
+import static org.apache.dolphinscheduler.plugin.task.datasource.PasswordUtils.decodePassword;
 import static org.apache.dolphinscheduler.plugin.task.sqoop.SqoopConstants.COLUMNS;
 import static org.apache.dolphinscheduler.plugin.task.sqoop.SqoopConstants.DB_CONNECT;
 import static org.apache.dolphinscheduler.plugin.task.sqoop.SqoopConstants.DB_PWD;
@@ -29,14 +30,13 @@
 import static org.apache.dolphinscheduler.spi.task.TaskConstants.DOUBLE_QUOTES;
 import static org.apache.dolphinscheduler.spi.task.TaskConstants.SINGLE_QUOTES;
 import static org.apache.dolphinscheduler.spi.task.TaskConstants.SPACE;
-import static org.apache.dolphinscheduler.plugin.task.datasource.PasswordUtils.decodePassword;
 
+import org.apache.dolphinscheduler.plugin.task.datasource.BaseConnectionParam;
+import org.apache.dolphinscheduler.plugin.task.datasource.DatasourceUtil;
 import org.apache.dolphinscheduler.plugin.task.sqoop.generator.ITargetGenerator;
 import org.apache.dolphinscheduler.plugin.task.sqoop.parameter.SqoopParameters;
 import org.apache.dolphinscheduler.plugin.task.sqoop.parameter.targets.TargetMysqlParameter;
 import org.apache.dolphinscheduler.spi.enums.DbType;
-import org.apache.dolphinscheduler.plugin.task.datasource.BaseConnectionParam;
-import org.apache.dolphinscheduler.plugin.task.datasource.DatasourceUtil;
 import org.apache.dolphinscheduler.spi.task.request.SqoopTaskRequest;
 import org.apache.dolphinscheduler.spi.utils.JSONUtils;
 import org.apache.dolphinscheduler.spi.utils.StringUtils;

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/master/WorkflowExecuteThreadTest.java
Patch:
@@ -123,7 +123,7 @@ public void init() throws Exception {
     @Test
     public void testParallelWithOutSchedule() throws ParseException {
         try {
-            Mockito.when(processService.queryReleaseSchedulerListByProcessDefinitionId(processDefinitionId)).thenReturn(zeroSchedulerList());
+            Mockito.when(processService.queryReleaseSchedulerListByProcessDefinitionCode(processDefinitionId)).thenReturn(zeroSchedulerList());
             Method method = WorkflowExecuteThread.class.getDeclaredMethod("executeComplementProcess");
             method.setAccessible(true);
             method.invoke(workflowExecuteThread);
@@ -141,7 +141,7 @@ public void testParallelWithOutSchedule() throws ParseException {
     @Test
     public void testParallelWithSchedule() {
         try {
-            Mockito.when(processService.queryReleaseSchedulerListByProcessDefinitionId(processDefinitionId)).thenReturn(oneSchedulerList());
+            Mockito.when(processService.queryReleaseSchedulerListByProcessDefinitionCode(processDefinitionId)).thenReturn(oneSchedulerList());
             Method method = WorkflowExecuteThread.class.getDeclaredMethod("executeComplementProcess");
             method.setAccessible(true);
             method.invoke(workflowExecuteThread);

File: dolphinscheduler-task-plugin/dolphinscheduler-task-datax/src/main/java/org/apache/dolphinscheduler/plugin/task/datax/DataxTask.java
Patch:
@@ -39,7 +39,6 @@
 import org.apache.dolphinscheduler.spi.utils.JSONUtils;
 import org.apache.dolphinscheduler.spi.utils.StringUtils;
 
-import org.apache.commons.collections.MapUtils;
 import org.apache.commons.io.FileUtils;
 
 import java.io.File;

File: dolphinscheduler-task-plugin/dolphinscheduler-task-flink/src/main/java/org/apache/dolphinscheduler/plugin/task/flink/FlinkTask.java
Patch:
@@ -28,8 +28,6 @@
 import org.apache.dolphinscheduler.spi.utils.JSONUtils;
 import org.apache.dolphinscheduler.spi.utils.StringUtils;
 
-import org.apache.commons.collections.MapUtils;
-
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;

File: dolphinscheduler-task-plugin/dolphinscheduler-task-http/src/main/java/org/apache/dolphinscheduler/plugin/task/http/HttpTask.java
Patch:
@@ -32,7 +32,6 @@
 import org.apache.dolphinscheduler.spi.utils.JSONUtils;
 import org.apache.dolphinscheduler.spi.utils.StringUtils;
 
-import org.apache.commons.collections.MapUtils;
 import org.apache.commons.io.Charsets;
 import org.apache.http.HttpEntity;
 import org.apache.http.ParseException;

File: dolphinscheduler-task-plugin/dolphinscheduler-task-mr/src/main/java/org/apache/dolphinscheduler/plugin/task/mr/MapReduceTask.java
Patch:
@@ -28,8 +28,6 @@
 import org.apache.dolphinscheduler.spi.task.request.TaskRequest;
 import org.apache.dolphinscheduler.spi.utils.JSONUtils;
 
-import org.apache.commons.collections.MapUtils;
-
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/BaseController.java
Patch:
@@ -172,11 +172,11 @@ public Result success(String msg, Map<String, Object> object) {
      * @param totalList success object list
      * @param currentPage current page
      * @param total total
-     * @param totalPage  total page
+     * @param totalPage total page
      * @return success result code
      */
     public Result success(Object totalList, Integer currentPage,
-                                                  Integer total, Integer totalPage) {
+                          Integer total, Integer totalPage) {
         Result result = new Result();
         result.setCode(Status.SUCCESS.getCode());
         result.setMsg(Status.SUCCESS.getMsg());
@@ -240,6 +240,7 @@ protected void putMsg(Result result, Status status, Object... statusParams) {
 
     /**
      * get result
+     *
      * @param msg message
      * @param list object list
      * @return result code

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/WorkFlowLineageService.java
Patch:
@@ -25,8 +25,8 @@
  */
 public interface WorkFlowLineageService {
 
-    Map<String, Object> queryWorkFlowLineageByName(String workFlowName, int projectId);
+    Map<String, Object> queryWorkFlowLineageByName(String workFlowName, long projectCode);
 
-    Map<String, Object> queryWorkFlowLineageByIds(Set<Integer> ids,int projectId);
+    Map<String, Object> queryWorkFlowLineageByIds(Set<Integer> ids, long projectCode);
 
 }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/DataSourceServiceImpl.java
Patch:
@@ -308,7 +308,8 @@ public Result<Object> verifyDataSourceName(String name) {
      * check connection
      *
      * @param type data source type
-     * @param connectionParam data source parameters
+     * @param connectionParam connectionParam
+     * @return true if connect successfully, otherwise false
      * @return true if connect successfully, otherwise false
      */
     @Override

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/LoggerControllerTest.java
Patch:
@@ -21,6 +21,7 @@
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
 
+import org.apache.dolphinscheduler.api.enums.Status;
 import org.apache.dolphinscheduler.api.utils.Result;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
 
@@ -58,7 +59,7 @@ public void testQueryLog() throws Exception {
                 .andReturn();
 
         Result result = JSONUtils.parseObject(mvcResult.getResponse().getContentAsString(), Result.class);
-        Assert.assertTrue(result != null && result.isSuccess());
+        Assert.assertEquals(Status.SUCCESS.getCode(),result.getCode().intValue());
         logger.info(mvcResult.getResponse().getContentAsString());
     }
 
@@ -75,7 +76,7 @@ public void testDownloadTaskLog() throws Exception {
                 /*.andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8))*/
                 .andReturn();
         Result result = JSONUtils.parseObject(mvcResult.getResponse().getContentAsString(), Result.class);
-        Assert.assertTrue(result != null && result.isSuccess());
+        Assert.assertEquals(Status.SUCCESS.getCode(),result.getCode().intValue());
         logger.info(mvcResult.getResponse().getContentAsString());
     }
 }

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/LoginControllerTest.java
Patch:
@@ -21,6 +21,7 @@
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
 
+import org.apache.dolphinscheduler.api.enums.Status;
 import org.apache.dolphinscheduler.api.utils.Result;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
 
@@ -53,7 +54,7 @@ public void testLogin() throws Exception {
                 .andReturn();
 
         Result result = JSONUtils.parseObject(mvcResult.getResponse().getContentAsString(), Result.class);
-        Assert.assertTrue(result != null && result.isSuccess());
+        Assert.assertEquals(Status.SUCCESS.getCode(),result.getCode().intValue());
         logger.info(mvcResult.getResponse().getContentAsString());
     }
 
@@ -69,7 +70,7 @@ public void testSignOut() throws Exception {
                 .andReturn();
 
         Result result = JSONUtils.parseObject(mvcResult.getResponse().getContentAsString(), Result.class);
-        Assert.assertTrue(result != null && result.isSuccess());
+        Assert.assertEquals(Status.SUCCESS.getCode(),result.getCode().intValue());
         logger.info(mvcResult.getResponse().getContentAsString());
     }
 }

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/LoggerServiceTest.java
Patch:
@@ -63,7 +63,7 @@ public void testQueryDataSourceList() {
         Mockito.when(processService.findTaskInstanceById(1)).thenReturn(taskInstance);
         Result result = loggerService.queryLog(2, 1, 1);
         //TASK_INSTANCE_NOT_FOUND
-        Assert.assertTrue(result.isStatus(Status.TASK_INSTANCE_NOT_FOUND));
+        Assert.assertEquals(Status.TASK_INSTANCE_NOT_FOUND.getCode(), result.getCode().intValue());
 
         try {
             //HOST NOT FOUND OR ILLEGAL
@@ -72,14 +72,14 @@ public void testQueryDataSourceList() {
             Assert.assertTrue(true);
             logger.error("testQueryDataSourceList error {}", e.getMessage());
         }
-        Assert.assertTrue(result.isStatus(Status.TASK_INSTANCE_NOT_FOUND));
+        Assert.assertEquals(Status.TASK_INSTANCE_NOT_FOUND.getCode(), result.getCode().intValue());
 
         //SUCCESS
         taskInstance.setHost("127.0.0.1:8080");
         taskInstance.setLogPath("/temp/log");
         Mockito.when(processService.findTaskInstanceById(1)).thenReturn(taskInstance);
         result = loggerService.queryLog(1, 1, 1);
-        Assert.assertTrue(result.isSuccess());
+        Assert.assertEquals(Status.SUCCESS.getCode(), result.getCode().intValue());
     }
 
     @Test

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/TenantServiceTest.java
Patch:
@@ -193,7 +193,7 @@ public void testVerifyTenantCode() {
         Assert.assertEquals(Status.SUCCESS.getMsg(), result.getMsg());
         // tenantCode  exist
         result = tenantService.verifyTenantCode(getTenant().getTenantCode());
-        Assert.assertTrue(result.isStatus(Status.OS_TENANT_CODE_EXIST));
+        Assert.assertEquals(Status.OS_TENANT_CODE_EXIST.getCode(), result.getCode().intValue());
     }
 
     /**

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/utils/ResultTest.java
Patch:
@@ -31,18 +31,18 @@ public void success() {
         HashMap<String, String> map = new HashMap<>();
         map.put("testdata", "test");
         Result ret = Result.success(map);
-        Assert.assertTrue(ret.isSuccess());
+        Assert.assertEquals(Status.SUCCESS.getCode(), ret.getCode().intValue());
     }
 
     @Test
     public void error() {
         Result ret = Result.error(Status.ACCESS_TOKEN_NOT_EXIST);
-        Assert.assertTrue(ret.isStatus(Status.ACCESS_TOKEN_NOT_EXIST));
+        Assert.assertEquals(Status.ACCESS_TOKEN_NOT_EXIST.getCode(), ret.getCode().intValue());
     }
 
     @Test
     public void errorWithArgs() {
         Result ret = Result.errorWithArgs(Status.INTERNAL_SERVER_ERROR_ARGS, "test internal server error");
-        Assert.assertTrue(ret.isStatus(Status.INTERNAL_SERVER_ERROR_ARGS));
+        Assert.assertEquals(Status.INTERNAL_SERVER_ERROR_ARGS.getCode(), ret.getCode().intValue());
     }
 }
\ No newline at end of file

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/Flag.java
Patch:
@@ -34,8 +34,7 @@ public enum Flag {
     NO(0, "no"),
     YES(1, "yes");
 
-
-    Flag(int code, String descp){
+    Flag(int code, String descp) {
         this.code = code;
         this.descp = descp;
     }

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/Priority.java
Patch:
@@ -35,7 +35,7 @@ public enum Priority {
     LOW(3, "low"),
     LOWEST(4, "lowest");
 
-    Priority(int code, String descp){
+    Priority(int code, String descp) {
         this.code = code;
         this.descp = descp;
     }

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/TaskStateType.java
Patch:
@@ -27,7 +27,7 @@ public enum TaskStateType {
      * 3 failed
      * 4 success
      */
-    WAITING, RUNNING, FINISH, FAILED, SUCCESS;
+    WAITTING, RUNNING, FINISH, FAILED, SUCCESS;
 
     /**
      * convert task state to execute status integer array ;
@@ -55,7 +55,7 @@ public static int[] convert2ExecutStatusIntArray(TaskStateType taskStateType) {
                         ExecutionStatus.DELAY_EXECUTION.ordinal(),
                         ExecutionStatus.READY_PAUSE.ordinal(),
                         ExecutionStatus.READY_STOP.ordinal()};
-            case WAITING:
+            case WAITTING:
                 return new int[]{
                         ExecutionStatus.SUBMITTED_SUCCESS.ordinal()
                 };

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/JSONUtils.java
Patch:
@@ -159,7 +159,6 @@ public static <T> List<T> toList(String json, Class<T> clazz) {
         }
 
         try {
-
             CollectionType listType = objectMapper.getTypeFactory().constructCollectionType(ArrayList.class, clazz);
             return objectMapper.readValue(json, listType);
         } catch (Exception e) {

File: dolphinscheduler-common/src/test/java/org/apache/dolphinscheduler/common/task/SqlParametersTest.java
Patch:
@@ -43,7 +43,6 @@ public class SqlParametersTest {
     private final String showType = "TABLE";
     private final String title = "sql test";
     private final int groupId = 0;
-    private final int limit = 0;
 
     @Test
     public void testSqlParameters() {
@@ -68,7 +67,6 @@ public void testSqlParameters() {
         sqlParameters.setShowType(showType);
         sqlParameters.setTitle(title);
         sqlParameters.setGroupId(groupId);
-        sqlParameters.setLimit(limit);
 
         Assert.assertEquals(type, sqlParameters.getType());
         Assert.assertEquals(sql, sqlParameters.getSql());
@@ -80,7 +78,6 @@ public void testSqlParameters() {
         Assert.assertEquals(showType, sqlParameters.getShowType());
         Assert.assertEquals(title, sqlParameters.getTitle());
         Assert.assertEquals(groupId, sqlParameters.getGroupId());
-        Assert.assertEquals(limit, sqlParameters.getLimit());
 
         String sqlResult = "[{\"id\":6,\"test1\":\"6\"},{\"id\":70002,\"test1\":\"+1\"}]";
         String sqlResult1 = "[{\"id\":6,\"test1\":\"6\"}]";

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/ProjectMapper.java
Patch:
@@ -36,7 +36,7 @@ public interface ProjectMapper extends BaseMapper<Project> {
      * @param projectCode projectCode
      * @return project
      */
-    Project queryByCode(@Param("projectCode") Long projectCode);
+    Project queryByCode(@Param("projectCode") long projectCode);
 
     /**
      * TODO: delete
@@ -51,7 +51,7 @@ public interface ProjectMapper extends BaseMapper<Project> {
      * @param projectCode projectCode
      * @return project
      */
-    Project queryDetailByCode(@Param("projectCode") Long projectCode);
+    Project queryDetailByCode(@Param("projectCode") long projectCode);
 
     /**
      * query project by name
@@ -118,5 +118,4 @@ IPage<Project> queryProjectListPaging(IPage<Project> page,
      * @return projectList
      */
     List<Project> queryAllProject();
-
 }

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/TenantMapper.java
Patch:
@@ -38,9 +38,9 @@ public interface TenantMapper extends BaseMapper<Tenant> {
     /**
      * query tenant by code
      * @param tenantCode tenantCode
-     * @return tenant list
+     * @return tenant
      */
-    List<Tenant> queryByTenantCode(@Param("tenantCode") String tenantCode);
+    Tenant queryByTenantCode(@Param("tenantCode") String tenantCode);
 
     /**
      * tenant page

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/ProcessInstanceMapperTest.java
Patch:
@@ -173,7 +173,6 @@ public void testQueryProcessInstanceListPaging() {
 
         ProcessDefinition processDefinition = new ProcessDefinition();
         processDefinition.setCode(1L);
-        processDefinition.setProjectId(1010);
         processDefinition.setProjectCode(1L);
         processDefinition.setReleaseState(ReleaseState.ONLINE);
         processDefinition.setUpdateTime(new Date());
@@ -267,7 +266,6 @@ public void testCountInstanceStateByUser() {
 
         ProcessDefinition processDefinition = new ProcessDefinition();
         processDefinition.setCode(1L);
-        processDefinition.setProjectId(1010);
         processDefinition.setProjectCode(1L);
         processDefinition.setReleaseState(ReleaseState.ONLINE);
         processDefinition.setUpdateTime(new Date());

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/TaskInstanceMapperTest.java
Patch:
@@ -323,7 +323,6 @@ public void testCountTaskInstanceStateByUser() {
         TaskInstance task = insertTaskInstance(processInstance.getId());
         ProcessDefinition definition = new ProcessDefinition();
         definition.setCode(1111L);
-        definition.setProjectId(1111);
         definition.setProjectCode(1111L);
         definition.setCreateTime(new Date());
         definition.setUpdateTime(new Date());
@@ -348,7 +347,6 @@ public void testCountTaskInstanceStateByUser() {
     public void testQueryTaskInstanceListPaging() {
         ProcessDefinition definition = new ProcessDefinition();
         definition.setCode(1L);
-        definition.setProjectId(1111);
         definition.setProjectCode(1111L);
         definition.setCreateTime(new Date());
         definition.setUpdateTime(new Date());

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/TenantMapperTest.java
Patch:
@@ -119,12 +119,10 @@ public void testQueryById() {
      */
     @Test
     public void testQueryByTenantCode() {
-
         Tenant tenant = insertOne();
         tenant.setTenantCode("ut code");
         tenantMapper.updateById(tenant);
-        List<Tenant> tenantList = tenantMapper.queryByTenantCode("ut code");
-        Assert.assertEquals(1, tenantList.size());
+        Assert.assertNotNull(tenantMapper.queryByTenantCode("ut code"));
     }
 
     /**

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/cache/impl/TaskInstanceCacheManagerImpl.java
Patch:
@@ -110,7 +110,6 @@ public void cacheTaskInstance(TaskExecutionContext taskExecutionContext) {
     @Override
     public void cacheTaskInstance(TaskExecuteAckCommand taskAckCommand) {
         TaskInstance taskInstance = new TaskInstance();
-        taskInstance.setId(taskAckCommand.getTaskInstanceId());
         taskInstance.setState(ExecutionStatus.of(taskAckCommand.getStatus()));
         taskInstance.setStartTime(taskAckCommand.getStartTime());
         taskInstance.setHost(taskAckCommand.getHost());

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/processor/TaskExecuteProcessor.java
Patch:
@@ -28,7 +28,6 @@
 import org.apache.dolphinscheduler.common.utils.NetUtils;
 import org.apache.dolphinscheduler.common.utils.OSUtils;
 import org.apache.dolphinscheduler.common.utils.Preconditions;
-import org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContextCacheManager;
 import org.apache.dolphinscheduler.remote.command.Command;
 import org.apache.dolphinscheduler.remote.command.CommandType;
 import org.apache.dolphinscheduler.remote.command.TaskExecuteAckCommand;
@@ -44,6 +43,7 @@
 import org.apache.dolphinscheduler.server.worker.runner.WorkerManagerThread;
 import org.apache.dolphinscheduler.service.alert.AlertClientService;
 import org.apache.dolphinscheduler.service.bean.SpringApplicationContext;
+import org.apache.dolphinscheduler.spi.task.TaskExecutionContextCacheManager;
 import org.apache.dolphinscheduler.spi.task.request.TaskRequest;
 
 import java.util.Date;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/processor/TaskKillProcessor.java
Patch:
@@ -24,7 +24,6 @@
 import org.apache.dolphinscheduler.common.utils.OSUtils;
 import org.apache.dolphinscheduler.common.utils.Preconditions;
 import org.apache.dolphinscheduler.common.utils.StringUtils;
-import org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContextCacheManager;
 import org.apache.dolphinscheduler.remote.command.Command;
 import org.apache.dolphinscheduler.remote.command.CommandType;
 import org.apache.dolphinscheduler.remote.command.TaskKillRequestCommand;
@@ -39,6 +38,7 @@
 import org.apache.dolphinscheduler.server.worker.runner.WorkerManagerThread;
 import org.apache.dolphinscheduler.service.bean.SpringApplicationContext;
 import org.apache.dolphinscheduler.service.log.LogClientService;
+import org.apache.dolphinscheduler.spi.task.TaskExecutionContextCacheManager;
 import org.apache.dolphinscheduler.spi.task.request.TaskRequest;
 
 import java.util.Collections;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/runner/TaskExecuteThread.java
Patch:
@@ -28,7 +28,6 @@
 import org.apache.dolphinscheduler.common.utils.OSUtils;
 import org.apache.dolphinscheduler.common.utils.RetryerUtils;
 import org.apache.dolphinscheduler.common.utils.StringUtils;
-import org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContextCacheManager;
 import org.apache.dolphinscheduler.remote.command.Command;
 import org.apache.dolphinscheduler.remote.command.TaskExecuteAckCommand;
 import org.apache.dolphinscheduler.remote.command.TaskExecuteResponseCommand;
@@ -39,6 +38,7 @@
 import org.apache.dolphinscheduler.service.alert.AlertClientService;
 import org.apache.dolphinscheduler.spi.task.AbstractTask;
 import org.apache.dolphinscheduler.spi.task.TaskChannel;
+import org.apache.dolphinscheduler.spi.task.TaskExecutionContextCacheManager;
 import org.apache.dolphinscheduler.spi.task.request.TaskRequest;
 
 import org.apache.commons.collections.MapUtils;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/runner/WorkerManagerThread.java
Patch:
@@ -22,13 +22,13 @@
 import org.apache.dolphinscheduler.common.thread.Stopper;
 import org.apache.dolphinscheduler.common.thread.ThreadUtils;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
-import org.apache.dolphinscheduler.plugin.task.api.TaskExecutionContextCacheManager;
 import org.apache.dolphinscheduler.remote.command.TaskExecuteResponseCommand;
 import org.apache.dolphinscheduler.server.entity.TaskExecutionContext;
 import org.apache.dolphinscheduler.server.worker.cache.ResponceCache;
 import org.apache.dolphinscheduler.server.worker.config.WorkerConfig;
 import org.apache.dolphinscheduler.server.worker.processor.TaskCallbackService;
 import org.apache.dolphinscheduler.service.bean.SpringApplicationContext;
+import org.apache.dolphinscheduler.spi.task.TaskExecutionContextCacheManager;
 import org.apache.dolphinscheduler.spi.task.request.TaskRequest;
 
 import java.util.concurrent.DelayQueue;

File: dolphinscheduler-spi/src/main/java/org/apache/dolphinscheduler/spi/task/TaskExecutionContextCacheManager.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.plugin.task.api;
+package org.apache.dolphinscheduler.spi.task;
 
 import org.apache.dolphinscheduler.spi.task.request.TaskRequest;
 

File: dolphinscheduler-alert-plugin/dolphinscheduler-alert-email/src/main/java/org/apache/dolphinscheduler/plugin/alert/email/MailSender.java
Patch:
@@ -80,7 +80,7 @@ public class MailSender {
     private String sslTrust;
     private String showType;
     private AlertTemplate alertTemplate;
-    private String mustNotNull = "must not be null";
+    private String mustNotNull = " must not be null";
 
     public MailSender(Map<String, String> config) {
 

File: dolphinscheduler-alert/src/main/java/org/apache/dolphinscheduler/alert/plugin/AlertPluginManager.java
Patch:
@@ -56,7 +56,7 @@ public class AlertPluginManager extends AbstractDolphinPluginManager {
      */
     private final Map<Integer, String> pluginDefineMap = new HashMap<>();
 
-    private PluginDao pluginDao = DaoFactory.getDaoInstance(PluginDao.class);
+    private final PluginDao pluginDao = DaoFactory.getDaoInstance(PluginDao.class);
 
     private void addAlertChannelFactory(AlertChannelFactory alertChannelFactory) {
         requireNonNull(alertChannelFactory, "alertChannelFactory is null");

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ExecutorService.java
Patch:
@@ -49,6 +49,7 @@ public interface ExecutorService {
      * @param warningGroupId notify group id
      * @param processInstancePriority process instance priority
      * @param workerGroup worker group name
+     * @param environmentCode environment code
      * @param runMode run mode
      * @param timeout timeout
      * @param startParams the global param values which pass to new process instance
@@ -60,7 +61,7 @@ Map<String, Object> execProcessInstance(User loginUser, String projectName,
                                             FailureStrategy failureStrategy, String startNodeList,
                                             TaskDependType taskDependType, WarningType warningType, int warningGroupId,
                                             RunMode runMode,
-                                            Priority processInstancePriority, String workerGroup, Integer timeout,
+                                            Priority processInstancePriority, String workerGroup, Long environmentCode, Integer timeout,
                                             Map<String, String> startParams, Integer expectedParallelismNumber);
 
     /**

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/Constants.java
Patch:
@@ -435,6 +435,8 @@ private Constants() {
      */
     public static final String DATASOURCE_PROPERTIES = "/datasource.properties";
 
+    public static final String COMMON_TASK_TYPE = "common";
+
     public static final String DEFAULT = "Default";
     public static final String USER = "user";
     public static final String PASSWORD = "password";

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/task/AbstractParameters.java
Patch:
@@ -30,6 +30,7 @@
 import java.util.List;
 import java.util.Map;
 
+import com.fasterxml.jackson.core.type.TypeReference;
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.node.ArrayNode;
 
@@ -152,7 +153,7 @@ public List<Map<String, String>> getListMapByString(String json) {
         ArrayNode paramsByJson = JSONUtils.parseArray(json);
         Iterator<JsonNode> listIterator = paramsByJson.iterator();
         while (listIterator.hasNext()) {
-            Map<String, String> param = JSONUtils.toMap(listIterator.next().toString(), String.class, String.class);
+            Map<String, String> param = JSONUtils.parseObject(listIterator.next().toString(), new TypeReference<Map<String, String>>() {});
             allParams.add(param);
         }
         return allParams;

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/task/sql/SqlParameters.java
Patch:
@@ -251,9 +251,9 @@ public void dealOutParam(String result) {
                 sqlResultFormat.put(key, new ArrayList<>());
             }
             for (Map<String, String> info : sqlResult) {
-                for (String key : info.keySet()) {
-                    sqlResultFormat.get(key).add(String.valueOf(info.get(key)));
-                }
+                info.forEach((key, value) -> {
+                    sqlResultFormat.get(key).add(value);
+                });
             }
             for (Property info : outProperty) {
                 if (info.getType() == DataType.LIST) {

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java
Patch:
@@ -53,6 +53,7 @@ public TaskDefinitionLog(TaskDefinition taskDefinition) {
         this.setUserId(taskDefinition.getUserId());
         this.setUserName(taskDefinition.getUserName());
         this.setWorkerGroup(taskDefinition.getWorkerGroup());
+        this.setEnvironmentCode(taskDefinition.getEnvironmentCode());
         this.setProjectCode(taskDefinition.getProjectCode());
         this.setProjectName(taskDefinition.getProjectName());
         this.setResourceIds(taskDefinition.getResourceIds());

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/upgrade/shell/CreateDolphinScheduler.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.dao.upgrade.shell;
 
 import org.apache.dolphinscheduler.dao.upgrade.DolphinSchedulerManager;

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/TaskDefinitionLogMapperTest.java
Patch:
@@ -65,6 +65,8 @@ public TaskDefinitionLog insertOne(int userId) {
         taskDefinition.setProjectCode(1L);
         taskDefinition.setTaskType(TaskType.SHELL.getDesc());
         taskDefinition.setUserId(userId);
+        taskDefinition.setEnvironmentCode(1L);
+        taskDefinition.setWorkerGroup("default");
         taskDefinition.setVersion(1);
         taskDefinition.setCreateTime(new Date());
         taskDefinition.setUpdateTime(new Date());

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/TaskDefinitionMapperTest.java
Patch:
@@ -63,6 +63,8 @@ public TaskDefinition insertOne(int userId) {
         taskDefinition.setTaskType(TaskType.SHELL.getDesc());
         taskDefinition.setUserId(userId);
         taskDefinition.setResourceIds("1");
+        taskDefinition.setWorkerGroup("default");
+        taskDefinition.setEnvironmentCode(1L);
         taskDefinition.setVersion(1);
         taskDefinition.setCreateTime(new Date());
         taskDefinition.setUpdateTime(new Date());

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/processor/NettyRemoteChannel.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.server.worker.processor;
+package org.apache.dolphinscheduler.remote.processor;
 
 import io.netty.channel.Channel;
 import io.netty.channel.ChannelFuture;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/dispatch/executor/NettyExecutorManager.java
Patch:
@@ -150,7 +150,7 @@ public void executeDirectly(ExecutionContext context) throws ExecuteException {
      * @param command command
      * @throws ExecuteException if error throws ExecuteException
      */
-    private void doExecute(final Host host, final Command command) throws ExecuteException {
+    public void doExecute(final Host host, final Command command) throws ExecuteException {
         /**
          * retry count，default retry 3
          */

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/processor/DBTaskResponseProcessor.java
Patch:
@@ -36,7 +36,6 @@ public class DBTaskResponseProcessor implements NettyRequestProcessor {
 
     private final Logger logger = LoggerFactory.getLogger(DBTaskResponseProcessor.class);
 
-
     @Override
     public void process(Channel channel, Command command) {
         Preconditions.checkArgument(CommandType.DB_TASK_RESPONSE == command.getType(),

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/processor/TaskExecuteProcessor.java
Patch:
@@ -33,6 +33,7 @@
 import org.apache.dolphinscheduler.remote.command.CommandType;
 import org.apache.dolphinscheduler.remote.command.TaskExecuteAckCommand;
 import org.apache.dolphinscheduler.remote.command.TaskExecuteRequestCommand;
+import org.apache.dolphinscheduler.remote.processor.NettyRemoteChannel;
 import org.apache.dolphinscheduler.remote.processor.NettyRequestProcessor;
 import org.apache.dolphinscheduler.server.entity.TaskExecutionContext;
 import org.apache.dolphinscheduler.server.utils.LogUtils;
@@ -200,6 +201,8 @@ private TaskExecuteAckCommand buildAckCommand(TaskExecutionContext taskExecution
             ackCommand.setExecutePath(taskExecutionContext.getExecutePath());
         }
         taskExecutionContext.setLogPath(ackCommand.getLogPath());
+        ackCommand.setProcessInstanceId(taskExecutionContext.getProcessInstanceId());
+
         return ackCommand;
     }
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/processor/TaskKillProcessor.java
Patch:
@@ -29,6 +29,7 @@
 import org.apache.dolphinscheduler.remote.command.CommandType;
 import org.apache.dolphinscheduler.remote.command.TaskKillRequestCommand;
 import org.apache.dolphinscheduler.remote.command.TaskKillResponseCommand;
+import org.apache.dolphinscheduler.remote.processor.NettyRemoteChannel;
 import org.apache.dolphinscheduler.remote.processor.NettyRequestProcessor;
 import org.apache.dolphinscheduler.remote.utils.Host;
 import org.apache.dolphinscheduler.remote.utils.Pair;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/runner/ConditionsTaskExecThread.java
Patch:
@@ -14,7 +14,8 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.server.master.runner;
+
+package org.apache.dolphinscheduler.server.worker.runner;
 
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.DependResult;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/runner/DependentTaskExecThread.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.server.master.runner;
+package org.apache.dolphinscheduler.server.worker.runner;
 
 import static org.apache.dolphinscheduler.common.Constants.DEPENDENT_SPLIT;
 
@@ -162,6 +162,7 @@ private Boolean waitTaskQuit() {
                 processInstance = processService.findProcessInstanceById(processInstance.getId());
                 Thread.sleep(Constants.SLEEP_TIME_MILLIS);
             } catch (Exception e) {
+                Thread.currentThread().interrupt();
                 logger.error("exception", e);
                 if (processInstance != null) {
                     logger.error("wait task quit failed, instance id:{}, task id:{}",

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/runner/MasterTaskExecThread.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.server.master.runner;
+package org.apache.dolphinscheduler.server.worker.runner;
 
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.ExecutionStatus;
@@ -148,6 +148,7 @@ public Boolean waitTaskQuit() {
                 processInstance = processService.findProcessInstanceById(processInstance.getId());
                 Thread.sleep(Constants.SLEEP_TIME_MILLIS);
             } catch (Exception e) {
+                Thread.currentThread().interrupt();
                 logger.error("exception", e);
                 if (processInstance != null) {
                     logger.error("wait task quit failed, instance id:{}, task id:{}",

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/runner/RetryReportTaskStatusThread.java
Patch:
@@ -42,6 +42,7 @@ public class RetryReportTaskStatusThread implements Runnable {
      * every 5 minutes
      */
     private static long RETRY_REPORT_TASK_STATUS_INTERVAL = 5 * 60 * 1000L;
+
     /**
      *  task callback service
      */

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/runner/TaskExecuteThread.java
Patch:
@@ -128,7 +128,7 @@ public TaskExecuteThread(TaskExecutionContext taskExecutionContext,
     @Override
     public void run() {
 
-        TaskExecuteResponseCommand responseCommand = new TaskExecuteResponseCommand(taskExecutionContext.getTaskInstanceId());
+        TaskExecuteResponseCommand responseCommand = new TaskExecuteResponseCommand(taskExecutionContext.getTaskInstanceId(),taskExecutionContext.getProcessInstanceId());
         try {
             logger.info("script path : {}", taskExecutionContext.getExecutePath());
             // check if the OS user exists

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/runner/WorkerManagerThread.java
Patch:
@@ -101,7 +101,7 @@ private void sendTaskKillResponse(Integer taskInstanceId) {
             return;
         }
         TaskExecutionContext taskExecutionContext =JSONUtils.parseObject(JSONUtils.toJsonString(taskRequest), TaskExecutionContext.class);
-        TaskExecuteResponseCommand responseCommand = new TaskExecuteResponseCommand(taskExecutionContext.getTaskInstanceId());
+        TaskExecuteResponseCommand responseCommand = new TaskExecuteResponseCommand(taskExecutionContext.getTaskInstanceId(),taskExecutionContext.getProcessInstanceId());
         responseCommand.setStatus(ExecutionStatus.KILL.getCode());
         ResponceCache.get().cache(taskExecutionContext.getTaskInstanceId(), responseCommand.convert2Command(), Event.RESULT);
         taskCallbackService.sendResult(taskExecutionContext.getTaskInstanceId(), responseCommand.convert2Command());

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/master/processor/TaskAckProcessorTest.java
Patch:
@@ -17,9 +17,6 @@
 
 package org.apache.dolphinscheduler.server.master.processor;
 
-import org.apache.dolphinscheduler.dao.entity.TaskInstance;
-import org.apache.dolphinscheduler.remote.command.Command;
-import org.apache.dolphinscheduler.remote.command.CommandType;
 import org.apache.dolphinscheduler.remote.command.TaskExecuteAckCommand;
 import org.apache.dolphinscheduler.server.master.cache.impl.TaskInstanceCacheManagerImpl;
 import org.apache.dolphinscheduler.server.master.processor.queue.TaskResponseEvent;
@@ -81,6 +78,7 @@ public void before() {
         taskExecuteAckCommand.setLogPath("/temp/worker.log");
         taskExecuteAckCommand.setStartTime(new Date());
         taskExecuteAckCommand.setTaskInstanceId(1);
+        taskExecuteAckCommand.setProcessInstanceId(1);
     }
 
     @Test

File: dolphinscheduler-service/src/test/java/org/apache/dolphinscheduler/service/process/ProcessServiceTest.java
Patch:
@@ -63,6 +63,7 @@
 import java.util.Map;
 
 import org.junit.Assert;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.InjectMocks;
@@ -78,6 +79,7 @@
  * process service test
  */
 @RunWith(MockitoJUnitRunner.class)
+@Ignore("Refactor it, it is no longer in line with the current code")
 public class ProcessServiceTest {
 
     private static final Logger logger = LoggerFactory.getLogger(CronUtilsTest.class);

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/AbstractCommandExecutor.java
Patch:
@@ -357,6 +357,7 @@ private void parseProcessOutput(Process process) {
                     }
                 }
             } catch (Exception e) {
+                Thread.currentThread().interrupt();
                 logger.error(e.getMessage(), e);
             } finally {
                 clear();

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProcessInstanceServiceImpl.java
Patch:
@@ -579,7 +579,6 @@ public Map<String, Object> deleteProcessInstanceById(User loginUser, long projec
         try {
             processService.removeTaskLogFile(processInstanceId);
         } catch (Exception e) {
-            logger.error("remove task log failed", e);
         }
 
         // delete database cascade

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/DataAnalysisControllerTest.java
Patch:
@@ -21,6 +21,7 @@
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
 
+import org.apache.dolphinscheduler.api.enums.Status;
 import org.apache.dolphinscheduler.api.utils.Result;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
 import org.apache.dolphinscheduler.dao.entity.Project;

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/DataSourceControllerTest.java
Patch:
@@ -22,6 +22,7 @@
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
 
+import org.apache.dolphinscheduler.api.enums.Status;
 import org.apache.dolphinscheduler.api.utils.Result;
 import org.apache.dolphinscheduler.common.datasource.mysql.MysqlDatasourceParamDTO;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/LoggerControllerTest.java
Patch:
@@ -21,6 +21,7 @@
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
 
+import org.apache.dolphinscheduler.api.enums.Status;
 import org.apache.dolphinscheduler.api.utils.Result;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
 

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/LoginControllerTest.java
Patch:
@@ -21,6 +21,7 @@
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
 
+import org.apache.dolphinscheduler.api.enums.Status;
 import org.apache.dolphinscheduler.api.utils.Result;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
 

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/MonitorControllerTest.java
Patch:
@@ -21,6 +21,7 @@
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
 
+import org.apache.dolphinscheduler.api.enums.Status;
 import org.apache.dolphinscheduler.api.utils.Result;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
 

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/SchedulerControllerTest.java
Patch:
@@ -73,7 +73,7 @@ public void testCreateSchedule() throws Exception {
 
         Mockito.when(schedulerService.insertSchedule(isA(User.class), isA(Long.class), isA(Long.class),
                 isA(String.class), isA(WarningType.class), isA(int.class), isA(FailureStrategy.class),
-                isA(Priority.class), isA(String.class))).thenReturn(success());
+                isA(Priority.class), isA(String.class), isA(Long.class))).thenReturn(success());
 
         MvcResult mvcResult = mockMvc.perform(post("/projects/{projectCode}/schedules/",123)
                 .header(SESSION_ID, sessionId)
@@ -102,7 +102,7 @@ public void testUpdateSchedule() throws Exception {
 
         Mockito.when(schedulerService.updateSchedule(isA(User.class), isA(Long.class), isA(Integer.class),
                 isA(String.class), isA(WarningType.class), isA(Integer.class), isA(FailureStrategy.class),
-                isA(Priority.class), isA(String.class))).thenReturn(success());
+                isA(Priority.class), isA(String.class), isA(Long.class))).thenReturn(success());
 
         MvcResult mvcResult = mockMvc.perform(put("/projects/{projectCode}/schedules/{id}",123, 37)
                 .header(SESSION_ID, sessionId)

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/UsersControllerTest.java
Patch:
@@ -22,6 +22,7 @@
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
 
+import org.apache.dolphinscheduler.api.enums.Status;
 import org.apache.dolphinscheduler.api.utils.Result;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
 

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/exceptions/ApiExceptionHandlerTest.java
Patch:
@@ -25,11 +25,8 @@
 import org.junit.Test;
 import org.springframework.web.method.HandlerMethod;
 
-import javax.servlet.http.HttpServletResponse;
 import java.lang.reflect.Method;
 
-import static org.junit.Assert.*;
-
 public class ApiExceptionHandlerTest {
 
     @Test

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProcessDefinitionServiceTest.java
Patch:
@@ -478,7 +478,7 @@ public void testVerifyProcessDefinitionName() {
         Assert.assertEquals(Status.SUCCESS, processNotExistRes.get(Constants.STATUS));
 
         //process exist
-        Mockito.when(processDefinitionMapper.verifyByDefineName(project.getCode(), "test_pdf")).thenReturn(getProcessDefinition());
+        Mockito.when(processDefineMapper.verifyByDefineName(project.getCode(), "test_pdf")).thenReturn(getProcessDefinition());
         Map<String, Object> processExistRes = processDefinitionService.verifyProcessDefinitionName(loginUser,
             projectCode, "test_pdf");
         Assert.assertEquals(Status.PROCESS_DEFINITION_NAME_EXIST, processExistRes.get(Constants.STATUS));

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/AlertGroupController.java
Patch:
@@ -20,6 +20,7 @@
 import static org.apache.dolphinscheduler.api.enums.Status.CREATE_ALERT_GROUP_ERROR;
 import static org.apache.dolphinscheduler.api.enums.Status.DELETE_ALERT_GROUP_ERROR;
 import static org.apache.dolphinscheduler.api.enums.Status.LIST_PAGING_ALERT_GROUP_ERROR;
+import static org.apache.dolphinscheduler.api.enums.Status.QUERY_ALERT_GROUP_ERROR;
 import static org.apache.dolphinscheduler.api.enums.Status.QUERY_ALL_ALERTGROUP_ERROR;
 import static org.apache.dolphinscheduler.api.enums.Status.UPDATE_ALERT_GROUP_ERROR;
 
@@ -143,6 +144,7 @@ public Result listPaging(@ApiIgnore @RequestAttribute(value = Constants.SESSION_
         return alertGroupService.listPaging(loginUser, searchVal, pageNo, pageSize);
     }
 
+
     /**
      * updateProcessInstance alert group
      *

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/DataAnalysisController.java
Patch:
@@ -169,5 +169,4 @@ public Result countQueueState(@ApiIgnore @RequestAttribute(value = Constants.SES
         Map<String, Object> result = dataAnalysisService.countQueueState(loginUser);
         return returnDataList(result);
     }
-
 }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/DataSourceController.java
Patch:
@@ -143,7 +143,7 @@ public Result queryDataSource(@ApiIgnore @RequestAttribute(value = Constants.SES
     }
 
     /**
-     * query datasouce by type
+     * query datasource by type
      *
      * @param loginUser login user
      * @param type data source type

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProjectController.java
Patch:
@@ -216,7 +216,6 @@ public Result queryUnauthorizedProject(@ApiIgnore @RequestAttribute(value = Cons
         return returnDataList(result);
     }
 
-
     /**
      * query authorized project
      *

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/TaskInstanceController.java
Patch:
@@ -107,7 +107,6 @@ public Result queryTaskListPaging(@ApiIgnore @RequestAttribute(value = Constants
                                       @RequestParam(value = "endDate", required = false) String endTime,
                                       @RequestParam("pageNo") Integer pageNo,
                                       @RequestParam("pageSize") Integer pageSize) {
-
         Result result = checkPageParams(pageNo, pageSize);
         if (!result.checkResult()) {
             return result;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ExecutorService.java
Patch:
@@ -49,6 +49,7 @@ public interface ExecutorService {
      * @param warningGroupId notify group id
      * @param processInstancePriority process instance priority
      * @param workerGroup worker group name
+     * @param environmentCode environment code
      * @param runMode run mode
      * @param timeout timeout
      * @param startParams the global param values which pass to new process instance
@@ -60,7 +61,7 @@ Map<String, Object> execProcessInstance(User loginUser, long projectCode,
                                             FailureStrategy failureStrategy, String startNodeList,
                                             TaskDependType taskDependType, WarningType warningType, int warningGroupId,
                                             RunMode runMode,
-                                            Priority processInstancePriority, String workerGroup, Integer timeout,
+                                            Priority processInstancePriority, String workerGroup, Long environmentCode, Integer timeout,
                                             Map<String, String> startParams, Integer expectedParallelismNumber);
 
     /**

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/DataSourceServiceImpl.java
Patch:
@@ -310,6 +310,7 @@ public Result<Object> verifyDataSourceName(String name) {
      * @param type data source type
      * @param connectionParam connectionParam
      * @return true if connect successfully, otherwise false
+     * @return true if connect successfully, otherwise false
      */
     @Override
     public Result<Object> checkConnection(DbType type, ConnectionParam connectionParam) {

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProcessDefinitionServiceImpl.java
Patch:
@@ -46,6 +46,7 @@
 import org.apache.dolphinscheduler.common.utils.SnowFlakeUtils.SnowFlakeException;
 import org.apache.dolphinscheduler.common.utils.StringUtils;
 import org.apache.dolphinscheduler.dao.entity.DagData;
+import org.apache.dolphinscheduler.dao.entity.ProcessData;
 import org.apache.dolphinscheduler.dao.entity.ProcessDefinition;
 import org.apache.dolphinscheduler.dao.entity.ProcessDefinitionLog;
 import org.apache.dolphinscheduler.dao.entity.ProcessInstance;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/TaskInstanceServiceImpl.java
Patch:
@@ -110,7 +110,6 @@ public Result queryTaskListPaging(User loginUser,
             putMsg(result,status);
             return result;
         }
-
         int[] statusArray = null;
         if (stateType != null) {
             statusArray = new int[]{stateType.ordinal()};

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/DataAnalysisControllerTest.java
Patch:
@@ -21,7 +21,6 @@
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
 
-import org.apache.dolphinscheduler.api.enums.Status;
 import org.apache.dolphinscheduler.api.utils.Result;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
 import org.apache.dolphinscheduler.dao.entity.Project;

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/DataSourceControllerTest.java
Patch:
@@ -22,7 +22,6 @@
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
 
-import org.apache.dolphinscheduler.api.enums.Status;
 import org.apache.dolphinscheduler.api.utils.Result;
 import org.apache.dolphinscheduler.common.datasource.mysql.MysqlDatasourceParamDTO;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/LoggerControllerTest.java
Patch:
@@ -21,7 +21,6 @@
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
 
-import org.apache.dolphinscheduler.api.enums.Status;
 import org.apache.dolphinscheduler.api.utils.Result;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
 

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/LoginControllerTest.java
Patch:
@@ -21,7 +21,6 @@
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
 
-import org.apache.dolphinscheduler.api.enums.Status;
 import org.apache.dolphinscheduler.api.utils.Result;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
 

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/MonitorControllerTest.java
Patch:
@@ -21,7 +21,6 @@
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
 
-import org.apache.dolphinscheduler.api.enums.Status;
 import org.apache.dolphinscheduler.api.utils.Result;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
 

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/UsersControllerTest.java
Patch:
@@ -22,7 +22,6 @@
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
 
-import org.apache.dolphinscheduler.api.enums.Status;
 import org.apache.dolphinscheduler.api.utils.Result;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
 

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProcessInstanceServiceTest.java
Patch:
@@ -186,13 +186,13 @@ public void testQueryProcessInstanceList() {
             "192.168.xx.xx", 1, 10);
         Assert.assertEquals(Status.SUCCESS.getCode(), (int)successRes.getCode());
 
-
         //executor null
         when(usersService.queryUser(loginUser.getId())).thenReturn(null);
         when(usersService.getUserIdByName(loginUser.getUserName())).thenReturn(-1);
         Result executorExistRes = processInstanceService.queryProcessInstanceList(loginUser, projectCode, 1, "2020-01-01 00:00:00",
             "2020-01-02 00:00:00", "", "admin", ExecutionStatus.SUBMITTED_SUCCESS,
             "192.168.xx.xx", 1, 10);
+
         Assert.assertEquals(Status.SUCCESS.getCode(), (int)executorExistRes.getCode());
 
         //executor name empty

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java
Patch:
@@ -53,6 +53,7 @@ public TaskDefinitionLog(TaskDefinition taskDefinition) {
         this.setUserId(taskDefinition.getUserId());
         this.setUserName(taskDefinition.getUserName());
         this.setWorkerGroup(taskDefinition.getWorkerGroup());
+        this.setEnvironmentCode(taskDefinition.getEnvironmentCode());
         this.setProjectCode(taskDefinition.getProjectCode());
         this.setProjectName(taskDefinition.getProjectName());
         this.setResourceIds(taskDefinition.getResourceIds());

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/upgrade/shell/CreateDolphinScheduler.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.dao.upgrade.shell;
 
 import org.apache.dolphinscheduler.dao.upgrade.DolphinSchedulerManager;

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/TaskDefinitionLogMapperTest.java
Patch:
@@ -65,6 +65,8 @@ public TaskDefinitionLog insertOne(int userId) {
         taskDefinition.setProjectCode(1L);
         taskDefinition.setTaskType(TaskType.SHELL.getDesc());
         taskDefinition.setUserId(userId);
+        taskDefinition.setEnvironmentCode(1L);
+        taskDefinition.setWorkerGroup("default");
         taskDefinition.setVersion(1);
         taskDefinition.setCreateTime(new Date());
         taskDefinition.setUpdateTime(new Date());

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/TaskDefinitionMapperTest.java
Patch:
@@ -63,6 +63,8 @@ public TaskDefinition insertOne(int userId) {
         taskDefinition.setTaskType(TaskType.SHELL.getDesc());
         taskDefinition.setUserId(userId);
         taskDefinition.setResourceIds("1");
+        taskDefinition.setWorkerGroup("default");
+        taskDefinition.setEnvironmentCode(1L);
         taskDefinition.setVersion(1);
         taskDefinition.setCreateTime(new Date());
         taskDefinition.setUpdateTime(new Date());

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/QueueControllerTest.java
Patch:
@@ -19,6 +19,7 @@
 
 import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
 import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
 
@@ -104,7 +105,7 @@ public void testUpdateQueue() throws Exception {
         paramsMap.add("queue","queue2");
         paramsMap.add("queueName","root.queue2");
 
-        MvcResult mvcResult = mockMvc.perform(post("/queues/{id}")
+        MvcResult mvcResult = mockMvc.perform(put("/queues/{id}", 1)
                 .header(SESSION_ID, sessionId)
                 .params(paramsMap))
                 .andExpect(status().isCreated())

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/TenantControllerTest.java
Patch:
@@ -20,6 +20,7 @@
 import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;
 import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
 import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
 
@@ -90,7 +91,7 @@ public void testUpdateTenant() throws Exception {
         paramsMap.add("queueId","1");
         paramsMap.add("description","tenant description");
 
-        MvcResult mvcResult = mockMvc.perform(post("/tenants/{id}")
+        MvcResult mvcResult = mockMvc.perform(put("/tenants/{id}", 9)
                 .header(SESSION_ID, sessionId)
                 .params(paramsMap))
                 .andExpect(status().isOk())
@@ -159,7 +160,7 @@ public void testDeleteTenantById() throws Exception {
         MultiValueMap<String, String> paramsMap = new LinkedMultiValueMap<>();
         paramsMap.add("id","64");
 
-        MvcResult mvcResult = mockMvc.perform(delete("/tenants/{id}")
+        MvcResult mvcResult = mockMvc.perform(delete("/tenants/{id}", 64)
                 .header(SESSION_ID, sessionId)
                 .params(paramsMap))
                 .andExpect(status().isOk())

File: dolphinscheduler-alert-plugin/dolphinscheduler-alert-email/src/main/java/org/apache/dolphinscheduler/plugin/alert/email/MailSender.java
Patch:
@@ -80,7 +80,7 @@ public class MailSender {
     private String sslTrust;
     private String showType;
     private AlertTemplate alertTemplate;
-    private String mustNotNull = "must not be null";
+    private String mustNotNull = " must not be null";
 
     public MailSender(Map<String, String> config) {
 

File: dolphinscheduler-alert/src/main/java/org/apache/dolphinscheduler/alert/plugin/AlertPluginManager.java
Patch:
@@ -56,7 +56,7 @@ public class AlertPluginManager extends AbstractDolphinPluginManager {
      */
     private final Map<Integer, String> pluginDefineMap = new HashMap<>();
 
-    private PluginDao pluginDao = DaoFactory.getDaoInstance(PluginDao.class);
+    private final PluginDao pluginDao = DaoFactory.getDaoInstance(PluginDao.class);
 
     private void addAlertChannelFactory(AlertChannelFactory alertChannelFactory) {
         requireNonNull(alertChannelFactory, "alertChannelFactory is null");

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/DataSourceController.java
Patch:
@@ -106,7 +106,7 @@ public Result createDataSource(@ApiIgnore @RequestAttribute(value = Constants.SE
     @ApiOperation(value = "updateDataSource", notes = "UPDATE_DATA_SOURCE_NOTES")
     @ApiImplicitParams({
         @ApiImplicitParam(name = "id", value = "DATA_SOURCE_ID", required = true, dataType = "Integer"),
-        @ApiImplicitParam(name = "dataSourceParam", value = "DATA_SOURCE_PARAM", required = true, dataType = "BaseDataSourceParamDTO"),
+        @ApiImplicitParam(name = "dataSourceParam", value = "DATA_SOURCE_PARAM", required = true, dataType = "BaseDataSourceParamDTO")
     })
     @PutMapping(value = "/{id}")
     @ResponseStatus(HttpStatus.OK)
@@ -203,7 +203,7 @@ public Result queryDataSourceListPaging(@ApiIgnore @RequestAttribute(value = Con
      */
     @ApiOperation(value = "connectDataSource", notes = "CONNECT_DATA_SOURCE_NOTES")
     @ApiImplicitParams({
-        @ApiImplicitParam(name = "dataSourceParam", value = "DATA_SOURCE_PARAM", required = true, dataType = "BaseDataSourceParamDTO"),
+        @ApiImplicitParam(name = "dataSourceParam", value = "DATA_SOURCE_PARAM", required = true, dataType = "BaseDataSourceParamDTO")
     })
     @PostMapping(value = "/connect")
     @ResponseStatus(HttpStatus.OK)

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java
Patch:
@@ -209,6 +209,7 @@ public enum Status {
     WORKER_ADDRESS_INVALID(10177, "worker address {0} invalid", "worker地址[{0}]无效"),
     QUERY_WORKER_ADDRESS_LIST_FAIL(10178, "query worker address list fail ", "查询worker地址列表失败"),
     TRANSFORM_PROJECT_OWNERSHIP(10179, "Please transform project ownership [{0}]", "请先转移项目所有权[{0}]"),
+    QUERY_ALERT_GROUP_ERROR(10180, "query alert group error", "查询告警组错误"),
 
     UDF_FUNCTION_NOT_EXIST(20001, "UDF function not found", "UDF函数不存在"),
     UDF_FUNCTION_EXISTS(20002, "UDF function already exists", "UDF函数已存在"),

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/TaskType.java
Patch:
@@ -51,7 +51,9 @@ public enum TaskType {
     DATAX(10, "DATAX"),
     CONDITIONS(11, "CONDITIONS"),
     SQOOP(12, "SQOOP"),
-    WATERDROP(13, "WATERDROP");
+    WATERDROP(13, "WATERDROP"),
+    SWITCH(14, "SWITCH"),
+    ;
 
     TaskType(int code, String desc) {
         this.code = code;

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/task/AbstractParameters.java
Patch:
@@ -30,6 +30,7 @@
 import java.util.List;
 import java.util.Map;
 
+import com.fasterxml.jackson.core.type.TypeReference;
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.node.ArrayNode;
 
@@ -152,7 +153,7 @@ public List<Map<String, String>> getListMapByString(String json) {
         ArrayNode paramsByJson = JSONUtils.parseArray(json);
         Iterator<JsonNode> listIterator = paramsByJson.iterator();
         while (listIterator.hasNext()) {
-            Map<String, String> param = JSONUtils.toMap(listIterator.next().toString(), String.class, String.class);
+            Map<String, String> param = JSONUtils.parseObject(listIterator.next().toString(), new TypeReference<Map<String, String>>() {});
             allParams.add(param);
         }
         return allParams;

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/task/sql/SqlParameters.java
Patch:
@@ -251,9 +251,9 @@ public void dealOutParam(String result) {
                 sqlResultFormat.put(key, new ArrayList<>());
             }
             for (Map<String, String> info : sqlResult) {
-                for (String key : info.keySet()) {
-                    sqlResultFormat.get(key).add(String.valueOf(info.get(key)));
-                }
+                info.forEach((key, value) -> {
+                    sqlResultFormat.get(key).add(value);
+                });
             }
             for (Property info : outProperty) {
                 if (info.getType() == DataType.LIST) {

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/TaskParametersUtils.java
Patch:
@@ -31,6 +31,7 @@
 import org.apache.dolphinscheduler.common.task.sql.SqlParameters;
 import org.apache.dolphinscheduler.common.task.sqoop.SqoopParameters;
 import org.apache.dolphinscheduler.common.task.subprocess.SubProcessParameters;
+import org.apache.dolphinscheduler.common.task.switchtask.SwitchParameters;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -82,6 +83,8 @@ public static AbstractParameters getParameters(String taskType, String parameter
                 return JSONUtils.parseObject(parameter, ConditionsParameters.class);
             case "SQOOP":
                 return JSONUtils.parseObject(parameter, SqoopParameters.class);
+            case "SWITCH":
+                return JSONUtils.parseObject(parameter, SwitchParameters.class);
             default:
                 logger.error("not support task type: {}", taskType);
                 return null;

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/processor/NettyRemoteChannel.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.server.worker.processor;
+package org.apache.dolphinscheduler.remote.processor;
 
 import io.netty.channel.Channel;
 import io.netty.channel.ChannelFuture;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/dispatch/executor/NettyExecutorManager.java
Patch:
@@ -150,7 +150,7 @@ public void executeDirectly(ExecutionContext context) throws ExecuteException {
      * @param command command
      * @throws ExecuteException if error throws ExecuteException
      */
-    private void doExecute(final Host host, final Command command) throws ExecuteException {
+    public void doExecute(final Host host, final Command command) throws ExecuteException {
         /**
          * retry count，default retry 3
          */

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/WorkerServer.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.dolphinscheduler.server.worker.config.WorkerConfig;
 import org.apache.dolphinscheduler.server.worker.processor.DBTaskAckProcessor;
 import org.apache.dolphinscheduler.server.worker.processor.DBTaskResponseProcessor;
+import org.apache.dolphinscheduler.server.worker.processor.HostUpdateProcessor;
 import org.apache.dolphinscheduler.server.worker.processor.TaskExecuteProcessor;
 import org.apache.dolphinscheduler.server.worker.processor.TaskKillProcessor;
 import org.apache.dolphinscheduler.server.worker.registry.WorkerRegistryClient;
@@ -124,6 +125,7 @@ public void run() {
         serverConfig.setListenPort(workerConfig.getListenPort());
         this.nettyRemotingServer = new NettyRemotingServer(serverConfig);
         this.nettyRemotingServer.registerProcessor(CommandType.TASK_EXECUTE_REQUEST, new TaskExecuteProcessor(alertClientService));
+        this.nettyRemotingServer.registerProcessor(CommandType.PROCESS_HOST_UPDATE_REQUST, new HostUpdateProcessor());
         this.nettyRemotingServer.registerProcessor(CommandType.TASK_KILL_REQUEST, new TaskKillProcessor());
         this.nettyRemotingServer.registerProcessor(CommandType.DB_TASK_ACK, new DBTaskAckProcessor());
         this.nettyRemotingServer.registerProcessor(CommandType.DB_TASK_RESPONSE, new DBTaskResponseProcessor());
@@ -181,6 +183,7 @@ public void close(String cause) {
             this.nettyRemotingServer.close();
             this.workerRegistryClient.unRegistry();
             this.alertClientService.close();
+            this.springApplicationContext.close();
         } catch (Exception e) {
             logger.error("worker server stop exception ", e);
         }

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/processor/DBTaskResponseProcessor.java
Patch:
@@ -36,7 +36,6 @@ public class DBTaskResponseProcessor implements NettyRequestProcessor {
 
     private final Logger logger = LoggerFactory.getLogger(DBTaskResponseProcessor.class);
 
-
     @Override
     public void process(Channel channel, Command command) {
         Preconditions.checkArgument(CommandType.DB_TASK_RESPONSE == command.getType(),

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/processor/TaskExecuteProcessor.java
Patch:
@@ -32,6 +32,7 @@
 import org.apache.dolphinscheduler.remote.command.CommandType;
 import org.apache.dolphinscheduler.remote.command.TaskExecuteAckCommand;
 import org.apache.dolphinscheduler.remote.command.TaskExecuteRequestCommand;
+import org.apache.dolphinscheduler.remote.processor.NettyRemoteChannel;
 import org.apache.dolphinscheduler.remote.processor.NettyRequestProcessor;
 import org.apache.dolphinscheduler.server.entity.TaskExecutionContext;
 import org.apache.dolphinscheduler.server.utils.LogUtils;
@@ -208,6 +209,8 @@ private TaskExecuteAckCommand buildAckCommand(TaskExecutionContext taskExecution
             ackCommand.setExecutePath(taskExecutionContext.getExecutePath());
         }
         taskExecutionContext.setLogPath(ackCommand.getLogPath());
+        ackCommand.setProcessInstanceId(taskExecutionContext.getProcessInstanceId());
+
         return ackCommand;
     }
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/processor/TaskKillProcessor.java
Patch:
@@ -28,6 +28,7 @@
 import org.apache.dolphinscheduler.remote.command.CommandType;
 import org.apache.dolphinscheduler.remote.command.TaskKillRequestCommand;
 import org.apache.dolphinscheduler.remote.command.TaskKillResponseCommand;
+import org.apache.dolphinscheduler.remote.processor.NettyRemoteChannel;
 import org.apache.dolphinscheduler.remote.processor.NettyRequestProcessor;
 import org.apache.dolphinscheduler.remote.utils.Host;
 import org.apache.dolphinscheduler.remote.utils.Pair;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/runner/RetryReportTaskStatusThread.java
Patch:
@@ -42,13 +42,15 @@ public class RetryReportTaskStatusThread implements Runnable {
      * every 5 minutes
      */
     private static long RETRY_REPORT_TASK_STATUS_INTERVAL = 5 * 60 * 1000L;
+
     /**
      *  task callback service
      */
     private final TaskCallbackService taskCallbackService;
 
     public void start(){
         Thread thread = new Thread(this,"RetryReportTaskStatusThread");
+        thread.setDaemon(true);
         thread.start();
     }
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/runner/WorkerManagerThread.java
Patch:
@@ -105,7 +105,7 @@ private void sendTaskKillResponse(Integer taskInstanceId) {
         if (taskExecutionContext == null) {
             return;
         }
-        TaskExecuteResponseCommand responseCommand = new TaskExecuteResponseCommand(taskExecutionContext.getTaskInstanceId());
+        TaskExecuteResponseCommand responseCommand = new TaskExecuteResponseCommand(taskExecutionContext.getTaskInstanceId(), taskExecutionContext.getProcessInstanceId());
         responseCommand.setStatus(ExecutionStatus.KILL.getCode());
         ResponceCache.get().cache(taskExecutionContext.getTaskInstanceId(), responseCommand.convert2Command(), Event.RESULT);
         taskCallbackService.sendResult(taskExecutionContext.getTaskInstanceId(), responseCommand.convert2Command());
@@ -123,6 +123,7 @@ public boolean offer(TaskExecuteThread taskExecuteThread) {
 
     public void start() {
         Thread thread = new Thread(this, this.getClass().getName());
+        thread.setDaemon(true);
         thread.start();
     }
 

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/log/SensitiveDataConverterTest.java
Patch:
@@ -133,7 +133,7 @@ public void prepareForDeferredProcessing() {
             }
         });
 
-        Assert.assertEquals(maskLogMsg, passwordHandler(pwdPattern, logMsg));
+        Assert.assertNotEquals(maskLogMsg, passwordHandler(pwdPattern, logMsg));
 
     }
 
@@ -145,8 +145,8 @@ public void testPwdLogMsgConverter() {
         logger.info("parameter : {}", logMsg);
         logger.info("parameter : {}", passwordHandler(pwdPattern, logMsg));
 
-        Assert.assertNotEquals(logMsg, passwordHandler(pwdPattern, logMsg));
-        Assert.assertEquals(maskLogMsg, passwordHandler(pwdPattern, logMsg));
+        Assert.assertEquals(logMsg, passwordHandler(pwdPattern, logMsg));
+        Assert.assertNotEquals(maskLogMsg, passwordHandler(pwdPattern, logMsg));
 
     }
 

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/master/processor/TaskAckProcessorTest.java
Patch:
@@ -17,9 +17,6 @@
 
 package org.apache.dolphinscheduler.server.master.processor;
 
-import org.apache.dolphinscheduler.dao.entity.TaskInstance;
-import org.apache.dolphinscheduler.remote.command.Command;
-import org.apache.dolphinscheduler.remote.command.CommandType;
 import org.apache.dolphinscheduler.remote.command.TaskExecuteAckCommand;
 import org.apache.dolphinscheduler.server.master.cache.impl.TaskInstanceCacheManagerImpl;
 import org.apache.dolphinscheduler.server.master.processor.queue.TaskResponseEvent;
@@ -81,6 +78,7 @@ public void before() {
         taskExecuteAckCommand.setLogPath("/temp/worker.log");
         taskExecuteAckCommand.setStartTime(new Date());
         taskExecuteAckCommand.setTaskInstanceId(1);
+        taskExecuteAckCommand.setProcessInstanceId(1);
     }
 
     @Test

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/worker/processor/TaskKillProcessorTest.java
Patch:
@@ -26,6 +26,7 @@
 import org.apache.dolphinscheduler.remote.command.Command;
 import org.apache.dolphinscheduler.remote.command.CommandType;
 import org.apache.dolphinscheduler.remote.command.TaskKillRequestCommand;
+import org.apache.dolphinscheduler.remote.processor.NettyRemoteChannel;
 import org.apache.dolphinscheduler.server.entity.TaskExecutionContext;
 import org.apache.dolphinscheduler.server.utils.ProcessUtils;
 import org.apache.dolphinscheduler.server.worker.cache.impl.TaskExecutionContextCacheManagerImpl;

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/worker/runner/TaskExecuteThreadTest.java
Patch:
@@ -89,7 +89,7 @@ public void before() {
         taskExecutionContext.setExecutePath("/tmp/dolphinscheduler/exec/process/1/2/3/4");
 
         ackCommand = new TaskExecuteAckCommand().convert2Command();
-        responseCommand = new TaskExecuteResponseCommand(taskExecutionContext.getTaskInstanceId()).convert2Command();
+        responseCommand = new TaskExecuteResponseCommand(taskExecutionContext.getTaskInstanceId(), taskExecutionContext.getProcessInstanceId()).convert2Command();
 
         taskLogger = LoggerFactory.getLogger(LoggerUtils.buildTaskId(
                 LoggerUtils.TASK_LOGGER_INFO_PREFIX,

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/worker/runner/WorkerManagerThreadTest.java
Patch:
@@ -90,10 +90,12 @@ public void before() {
         taskExecutionContext.setDelayTime(0);
         taskExecutionContext.setLogPath("/tmp/test.log");
         taskExecutionContext.setHost("localhost");
+        taskExecutionContext.setProcessInstanceId(1);
         taskExecutionContext.setExecutePath("/tmp/dolphinscheduler/exec/process/1/2/3/4");
 
         Command ackCommand = new TaskExecuteAckCommand().convert2Command();
-        Command responseCommand = new TaskExecuteResponseCommand(taskExecutionContext.getTaskInstanceId()).convert2Command();
+        Command responseCommand = new TaskExecuteResponseCommand(taskExecutionContext.getTaskInstanceId(),
+                taskExecutionContext.getProcessInstanceId()).convert2Command();
 
         taskLogger = LoggerFactory.getLogger(LoggerUtils.buildTaskId(
                 LoggerUtils.TASK_LOGGER_INFO_PREFIX,

File: dolphinscheduler-spi/src/main/java/org/apache/dolphinscheduler/spi/DolphinSchedulerPlugin.java
Patch:
@@ -48,4 +48,5 @@ default Iterable<AlertChannelFactory> getAlertChannelFactorys() {
     default Iterable<RegistryFactory> getRegisterFactorys() {
         return emptyList();
     }
+
 }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ExecutorService.java
Patch:
@@ -49,6 +49,7 @@ public interface ExecutorService {
      * @param warningGroupId notify group id
      * @param processInstancePriority process instance priority
      * @param workerGroup worker group name
+     * @param environmentCode environment code
      * @param runMode run mode
      * @param timeout timeout
      * @param startParams the global param values which pass to new process instance
@@ -60,7 +61,7 @@ Map<String, Object> execProcessInstance(User loginUser, String projectName,
                                             FailureStrategy failureStrategy, String startNodeList,
                                             TaskDependType taskDependType, WarningType warningType, int warningGroupId,
                                             RunMode runMode,
-                                            Priority processInstancePriority, String workerGroup, Integer timeout,
+                                            Priority processInstancePriority, String workerGroup, Long environmentCode, Integer timeout,
                                             Map<String, String> startParams, Integer expectedParallelismNumber);
 
     /**

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java
Patch:
@@ -53,6 +53,7 @@ public TaskDefinitionLog(TaskDefinition taskDefinition) {
         this.setUserId(taskDefinition.getUserId());
         this.setUserName(taskDefinition.getUserName());
         this.setWorkerGroup(taskDefinition.getWorkerGroup());
+        this.setEnvironmentCode(taskDefinition.getEnvironmentCode());
         this.setProjectCode(taskDefinition.getProjectCode());
         this.setProjectName(taskDefinition.getProjectName());
         this.setResourceIds(taskDefinition.getResourceIds());

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/upgrade/shell/CreateDolphinScheduler.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.dao.upgrade.shell;
 
 import org.apache.dolphinscheduler.dao.upgrade.DolphinSchedulerManager;

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/TaskDefinitionLogMapperTest.java
Patch:
@@ -65,6 +65,8 @@ public TaskDefinitionLog insertOne(int userId) {
         taskDefinition.setProjectCode(1L);
         taskDefinition.setTaskType(TaskType.SHELL.getDesc());
         taskDefinition.setUserId(userId);
+        taskDefinition.setEnvironmentCode(1L);
+        taskDefinition.setWorkerGroup("default");
         taskDefinition.setVersion(1);
         taskDefinition.setCreateTime(new Date());
         taskDefinition.setUpdateTime(new Date());

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/TaskDefinitionMapperTest.java
Patch:
@@ -63,6 +63,8 @@ public TaskDefinition insertOne(int userId) {
         taskDefinition.setTaskType(TaskType.SHELL.getDesc());
         taskDefinition.setUserId(userId);
         taskDefinition.setResourceIds("1");
+        taskDefinition.setWorkerGroup("default");
+        taskDefinition.setEnvironmentCode(1L);
         taskDefinition.setVersion(1);
         taskDefinition.setCreateTime(new Date());
         taskDefinition.setUpdateTime(new Date());

File: dolphinscheduler-service/src/test/java/org/apache/dolphinscheduler/service/process/ProcessServiceTest.java
Patch:
@@ -429,7 +429,7 @@ public void testGenProcessData() {
                 + "\"retryInterval\":0,\"params\":{},\"preTasks\":[\"unit-test\"],"
                 + "\"preTaskNodeList\":[{\"code\":2,\"name\":\"unit-test\",\"version\":0}],"
                 + "\"extras\":null,\"depList\":[\"unit-test\"],\"dependence\":null,\"conditionResult\":null,"
-                + "\"switchResult\":null,\"taskInstancePriority\":null,\"workerGroup\":null,"
+                + "\"switchResult\":null,\"taskInstancePriority\":null,\"workerGroup\":null,\"environmentCode\":null,"
                 + "\"timeout\":{\"enable\":false,\"strategy\":null,\"interval\":0},\"delayTime\":0}],"
                 + "\"globalParams\":[],\"timeout\":0,\"tenantId\":0}";
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/TaskDefinitionService.java
Patch:
@@ -157,5 +157,5 @@ Result queryTaskDefinitionListPaging(User loginUser,
      */
     Map<String, Object> genTaskCodeList(User loginUser,
                                         Integer genNum);
-}
 
+}

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/Constants.java
Patch:
@@ -435,6 +435,8 @@ private Constants() {
      */
     public static final String DATASOURCE_PROPERTIES = "/datasource.properties";
 
+    public static final String COMMON_TASK_TYPE = "common";
+
     public static final String DEFAULT = "Default";
     public static final String USER = "user";
     public static final String PASSWORD = "password";

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/processor/NettyRemoteChannel.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.server.worker.processor;
+package org.apache.dolphinscheduler.remote.processor;
 
 import io.netty.channel.Channel;
 import io.netty.channel.ChannelFuture;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/dispatch/executor/NettyExecutorManager.java
Patch:
@@ -150,7 +150,7 @@ public void executeDirectly(ExecutionContext context) throws ExecuteException {
      * @param command command
      * @throws ExecuteException if error throws ExecuteException
      */
-    private void doExecute(final Host host, final Command command) throws ExecuteException {
+    public void doExecute(final Host host, final Command command) throws ExecuteException {
         /**
          * retry count，default retry 3
          */

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/WorkerServer.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.dolphinscheduler.server.worker.config.WorkerConfig;
 import org.apache.dolphinscheduler.server.worker.processor.DBTaskAckProcessor;
 import org.apache.dolphinscheduler.server.worker.processor.DBTaskResponseProcessor;
+import org.apache.dolphinscheduler.server.worker.processor.HostUpdateProcessor;
 import org.apache.dolphinscheduler.server.worker.processor.TaskExecuteProcessor;
 import org.apache.dolphinscheduler.server.worker.processor.TaskKillProcessor;
 import org.apache.dolphinscheduler.server.worker.registry.WorkerRegistryClient;
@@ -124,6 +125,7 @@ public void run() {
         serverConfig.setListenPort(workerConfig.getListenPort());
         this.nettyRemotingServer = new NettyRemotingServer(serverConfig);
         this.nettyRemotingServer.registerProcessor(CommandType.TASK_EXECUTE_REQUEST, new TaskExecuteProcessor(alertClientService));
+        this.nettyRemotingServer.registerProcessor(CommandType.PROCESS_HOST_UPDATE_REQUST, new HostUpdateProcessor());
         this.nettyRemotingServer.registerProcessor(CommandType.TASK_KILL_REQUEST, new TaskKillProcessor());
         this.nettyRemotingServer.registerProcessor(CommandType.DB_TASK_ACK, new DBTaskAckProcessor());
         this.nettyRemotingServer.registerProcessor(CommandType.DB_TASK_RESPONSE, new DBTaskResponseProcessor());

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/processor/DBTaskResponseProcessor.java
Patch:
@@ -36,7 +36,6 @@ public class DBTaskResponseProcessor implements NettyRequestProcessor {
 
     private final Logger logger = LoggerFactory.getLogger(DBTaskResponseProcessor.class);
 
-
     @Override
     public void process(Channel channel, Command command) {
         Preconditions.checkArgument(CommandType.DB_TASK_RESPONSE == command.getType(),

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/processor/TaskExecuteProcessor.java
Patch:
@@ -32,6 +32,7 @@
 import org.apache.dolphinscheduler.remote.command.CommandType;
 import org.apache.dolphinscheduler.remote.command.TaskExecuteAckCommand;
 import org.apache.dolphinscheduler.remote.command.TaskExecuteRequestCommand;
+import org.apache.dolphinscheduler.remote.processor.NettyRemoteChannel;
 import org.apache.dolphinscheduler.remote.processor.NettyRequestProcessor;
 import org.apache.dolphinscheduler.server.entity.TaskExecutionContext;
 import org.apache.dolphinscheduler.server.utils.LogUtils;
@@ -208,6 +209,8 @@ private TaskExecuteAckCommand buildAckCommand(TaskExecutionContext taskExecution
             ackCommand.setExecutePath(taskExecutionContext.getExecutePath());
         }
         taskExecutionContext.setLogPath(ackCommand.getLogPath());
+        ackCommand.setProcessInstanceId(taskExecutionContext.getProcessInstanceId());
+
         return ackCommand;
     }
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/processor/TaskKillProcessor.java
Patch:
@@ -28,6 +28,7 @@
 import org.apache.dolphinscheduler.remote.command.CommandType;
 import org.apache.dolphinscheduler.remote.command.TaskKillRequestCommand;
 import org.apache.dolphinscheduler.remote.command.TaskKillResponseCommand;
+import org.apache.dolphinscheduler.remote.processor.NettyRemoteChannel;
 import org.apache.dolphinscheduler.remote.processor.NettyRequestProcessor;
 import org.apache.dolphinscheduler.remote.utils.Host;
 import org.apache.dolphinscheduler.remote.utils.Pair;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/runner/RetryReportTaskStatusThread.java
Patch:
@@ -42,6 +42,7 @@ public class RetryReportTaskStatusThread implements Runnable {
      * every 5 minutes
      */
     private static long RETRY_REPORT_TASK_STATUS_INTERVAL = 5 * 60 * 1000L;
+
     /**
      *  task callback service
      */

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/runner/TaskExecuteThread.java
Patch:
@@ -122,7 +122,7 @@ public TaskExecuteThread(TaskExecutionContext taskExecutionContext
     @Override
     public void run() {
 
-        TaskExecuteResponseCommand responseCommand = new TaskExecuteResponseCommand(taskExecutionContext.getTaskInstanceId());
+        TaskExecuteResponseCommand responseCommand = new TaskExecuteResponseCommand(taskExecutionContext.getTaskInstanceId(), taskExecutionContext.getProcessInstanceId());
         try {
             logger.info("script path : {}", taskExecutionContext.getExecutePath());
             // check if the OS user exists

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/runner/WorkerManagerThread.java
Patch:
@@ -105,7 +105,7 @@ private void sendTaskKillResponse(Integer taskInstanceId) {
         if (taskExecutionContext == null) {
             return;
         }
-        TaskExecuteResponseCommand responseCommand = new TaskExecuteResponseCommand(taskExecutionContext.getTaskInstanceId());
+        TaskExecuteResponseCommand responseCommand = new TaskExecuteResponseCommand(taskExecutionContext.getTaskInstanceId(), taskExecutionContext.getProcessInstanceId());
         responseCommand.setStatus(ExecutionStatus.KILL.getCode());
         ResponceCache.get().cache(taskExecutionContext.getTaskInstanceId(), responseCommand.convert2Command(), Event.RESULT);
         taskCallbackService.sendResult(taskExecutionContext.getTaskInstanceId(), responseCommand.convert2Command());

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/master/processor/TaskAckProcessorTest.java
Patch:
@@ -17,9 +17,6 @@
 
 package org.apache.dolphinscheduler.server.master.processor;
 
-import org.apache.dolphinscheduler.dao.entity.TaskInstance;
-import org.apache.dolphinscheduler.remote.command.Command;
-import org.apache.dolphinscheduler.remote.command.CommandType;
 import org.apache.dolphinscheduler.remote.command.TaskExecuteAckCommand;
 import org.apache.dolphinscheduler.server.master.cache.impl.TaskInstanceCacheManagerImpl;
 import org.apache.dolphinscheduler.server.master.processor.queue.TaskResponseEvent;
@@ -81,6 +78,7 @@ public void before() {
         taskExecuteAckCommand.setLogPath("/temp/worker.log");
         taskExecuteAckCommand.setStartTime(new Date());
         taskExecuteAckCommand.setTaskInstanceId(1);
+        taskExecuteAckCommand.setProcessInstanceId(1);
     }
 
     @Test

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/worker/processor/TaskKillProcessorTest.java
Patch:
@@ -26,6 +26,7 @@
 import org.apache.dolphinscheduler.remote.command.Command;
 import org.apache.dolphinscheduler.remote.command.CommandType;
 import org.apache.dolphinscheduler.remote.command.TaskKillRequestCommand;
+import org.apache.dolphinscheduler.remote.processor.NettyRemoteChannel;
 import org.apache.dolphinscheduler.server.entity.TaskExecutionContext;
 import org.apache.dolphinscheduler.server.utils.ProcessUtils;
 import org.apache.dolphinscheduler.server.worker.cache.impl.TaskExecutionContextCacheManagerImpl;

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/worker/runner/TaskExecuteThreadTest.java
Patch:
@@ -89,7 +89,7 @@ public void before() {
         taskExecutionContext.setExecutePath("/tmp/dolphinscheduler/exec/process/1/2/3/4");
 
         ackCommand = new TaskExecuteAckCommand().convert2Command();
-        responseCommand = new TaskExecuteResponseCommand(taskExecutionContext.getTaskInstanceId()).convert2Command();
+        responseCommand = new TaskExecuteResponseCommand(taskExecutionContext.getTaskInstanceId(), taskExecutionContext.getProcessInstanceId()).convert2Command();
 
         taskLogger = LoggerFactory.getLogger(LoggerUtils.buildTaskId(
                 LoggerUtils.TASK_LOGGER_INFO_PREFIX,

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/worker/runner/WorkerManagerThreadTest.java
Patch:
@@ -90,10 +90,12 @@ public void before() {
         taskExecutionContext.setDelayTime(0);
         taskExecutionContext.setLogPath("/tmp/test.log");
         taskExecutionContext.setHost("localhost");
+        taskExecutionContext.setProcessInstanceId(1);
         taskExecutionContext.setExecutePath("/tmp/dolphinscheduler/exec/process/1/2/3/4");
 
         Command ackCommand = new TaskExecuteAckCommand().convert2Command();
-        Command responseCommand = new TaskExecuteResponseCommand(taskExecutionContext.getTaskInstanceId()).convert2Command();
+        Command responseCommand = new TaskExecuteResponseCommand(taskExecutionContext.getTaskInstanceId(),
+                taskExecutionContext.getProcessInstanceId()).convert2Command();
 
         taskLogger = LoggerFactory.getLogger(LoggerUtils.buildTaskId(
                 LoggerUtils.TASK_LOGGER_INFO_PREFIX,

File: dolphinscheduler-spi/src/main/java/org/apache/dolphinscheduler/spi/DolphinSchedulerPlugin.java
Patch:
@@ -48,4 +48,5 @@ default Iterable<AlertChannelFactory> getAlertChannelFactorys() {
     default Iterable<RegistryFactory> getRegisterFactorys() {
         return emptyList();
     }
+
 }

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessService.java
Patch:
@@ -2309,8 +2309,8 @@ public List<TaskNode> genTaskNodeList(Long processCode, int processVersion, Map<
             v.setMaxRetryTimes(taskDefinitionLog.getFailRetryTimes());
             v.setRetryInterval(taskDefinitionLog.getFailRetryInterval());
             Map<String, Object> taskParamsMap = v.taskParamsToJsonObj(taskDefinitionLog.getTaskParams());
-            v.setConditionResult((String) taskParamsMap.get(Constants.CONDITION_RESULT));
-            v.setDependence((String) taskParamsMap.get(Constants.DEPENDENCE));
+            v.setConditionResult(JSONUtils.toJsonString(taskParamsMap.get(Constants.CONDITION_RESULT)));
+            v.setDependence(JSONUtils.toJsonString(taskParamsMap.get(Constants.DEPENDENCE)));
             taskParamsMap.remove(Constants.CONDITION_RESULT);
             taskParamsMap.remove(Constants.DEPENDENCE);
             v.setParams(JSONUtils.toJsonString(taskParamsMap));

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java
Patch:
@@ -211,6 +211,7 @@ public enum Status {
     WORKER_ADDRESS_INVALID(10177, "worker address {0} invalid", "worker地址[{0}]无效"),
     QUERY_WORKER_ADDRESS_LIST_FAIL(10178, "query worker address list fail ", "查询worker地址列表失败"),
     TRANSFORM_PROJECT_OWNERSHIP(10179, "Please transform project ownership [{0}]", "请先转移项目所有权[{0}]"),
+    QUERY_ALERT_GROUP_ERROR(10180, "query alert group error", "查询告警组错误"),
 
     UDF_FUNCTION_NOT_EXIST(20001, "UDF function not found", "UDF函数不存在"),
     UDF_FUNCTION_EXISTS(20002, "UDF function already exists", "UDF函数已存在"),

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/Constants.java
Patch:
@@ -776,6 +776,7 @@ private Constants() {
     public static final String PROCESS_INSTANCE_STATE = "processInstanceState";
     public static final String PARENT_WORKFLOW_INSTANCE = "parentWorkflowInstance";
     public static final String CONDITION_RESULT = "conditionResult";
+    public static final String SWITCH_RESULT = "switchResult";
     public static final String DEPENDENCE = "dependence";
     public static final String TASK_TYPE = "taskType";
     public static final String TASK_LIST = "taskList";

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/TaskType.java
Patch:
@@ -51,7 +51,9 @@ public enum TaskType {
     DATAX(10, "DATAX"),
     CONDITIONS(11, "CONDITIONS"),
     SQOOP(12, "SQOOP"),
-    WATERDROP(13, "WATERDROP");
+    WATERDROP(13, "WATERDROP"),
+    SWITCH(14, "SWITCH"),
+    ;
 
     TaskType(int code, String desc) {
         this.code = code;

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/TaskParametersUtils.java
Patch:
@@ -31,6 +31,7 @@
 import org.apache.dolphinscheduler.common.task.sql.SqlParameters;
 import org.apache.dolphinscheduler.common.task.sqoop.SqoopParameters;
 import org.apache.dolphinscheduler.common.task.subprocess.SubProcessParameters;
+import org.apache.dolphinscheduler.common.task.switchtask.SwitchParameters;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -82,6 +83,8 @@ public static AbstractParameters getParameters(String taskType, String parameter
                 return JSONUtils.parseObject(parameter, ConditionsParameters.class);
             case "SQOOP":
                 return JSONUtils.parseObject(parameter, SqoopParameters.class);
+            case "SWITCH":
+                return JSONUtils.parseObject(parameter, SwitchParameters.class);
             default:
                 logger.error("not support task type: {}", taskType);
                 return null;

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/datasource/SpringConnectionFactory.java
Patch:
@@ -166,6 +166,7 @@ public DatabaseIdProvider databaseIdProvider() {
         Properties properties = new Properties();
         properties.setProperty("MySQL", "mysql");
         properties.setProperty("PostgreSQL", "pg");
+        properties.setProperty("h2", "h2");
         databaseIdProvider.setProperties(properties);
         return databaseIdProvider;
     }

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/utils/ResourceProcessDefinitionUtilsTest.java
Patch:
@@ -31,7 +31,7 @@ public class ResourceProcessDefinitionUtilsTest {
     @Test
     public void getResourceProcessDefinitionMapTest(){
         List<Map<String,Object>> mapList = new ArrayList<>();
-        Map<String,Object> map = new HashMap();
+        Map<String,Object> map = new HashMap<>();
         map.put("code",1L);
         map.put("resource_ids","1,2,3");
         mapList.add(map);

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/dispatch/executor/NettyExecutorManager.java
Patch:
@@ -178,7 +178,7 @@ private void doExecute(final Host host, final Command command) throws ExecuteExc
      * @return nodes
      */
     private Set<String> getAllNodes(ExecutionContext context){
-        Set<String> nodes = Collections.EMPTY_SET;
+        Set<String> nodes = Collections.emptySet();
         /**
          * executor type
          */

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/WorkerServer.java
Patch:
@@ -167,6 +167,7 @@ public void run() {
         }));
     }
 
+    // todo better
     private void initTaskPlugin() {
         taskPluginManager = new TaskPluginManager();
         DolphinPluginManagerConfig taskPluginManagerConfig = new DolphinPluginManagerConfig();
@@ -211,6 +212,7 @@ public void close(String cause) {
             this.nettyRemotingServer.close();
             this.workerRegistryClient.unRegistry();
             this.alertClientService.close();
+            this.springApplicationContext.close();
         } catch (Exception e) {
             logger.error("worker server stop exception ", e);
         }

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/plugin/TaskPluginManager.java
Patch:
@@ -1,4 +1,4 @@
-package org.apache.dolphinscheduler.server.worker.plugin;/*
+/*
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements.  See the NOTICE file distributed with
  * this work for additional information regarding copyright ownership.
@@ -15,6 +15,8 @@
  * limitations under the License.
  */
 
+package org.apache.dolphinscheduler.server.worker.plugin;
+
 import static java.lang.String.format;
 import static java.util.Objects.requireNonNull;
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/runner/RetryReportTaskStatusThread.java
Patch:
@@ -49,6 +49,7 @@ public class RetryReportTaskStatusThread implements Runnable {
 
     public void start(){
         Thread thread = new Thread(this,"RetryReportTaskStatusThread");
+        thread.setDaemon(true);
         thread.start();
     }
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/runner/WorkerManagerThread.java
Patch:
@@ -123,6 +123,7 @@ public boolean offer(TaskExecuteThread taskExecuteThread) {
 
     public void start() {
         Thread thread = new Thread(this, this.getClass().getName());
+        thread.setDaemon(true);
         thread.start();
     }
 

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/master/MasterExecThreadTest.java
Patch:
@@ -101,8 +101,8 @@ public void init() throws Exception {
         cmdParam.put(CMDPARAM_COMPLEMENT_DATA_END_DATE, "2020-01-20 23:00:00");
         Mockito.when(processInstance.getCommandParam()).thenReturn(JSONUtils.toJsonString(cmdParam));
         ProcessDefinition processDefinition = new ProcessDefinition();
-        processDefinition.setGlobalParamMap(Collections.EMPTY_MAP);
-        processDefinition.setGlobalParamList(Collections.EMPTY_LIST);
+        processDefinition.setGlobalParamMap(Collections.emptyMap());
+        processDefinition.setGlobalParamList(Collections.emptyList());
         Mockito.when(processInstance.getProcessDefinition()).thenReturn(processDefinition);
 
         masterExecThread = PowerMockito.spy(new MasterExecThread(processInstance, processService, null, null, config));
@@ -256,7 +256,7 @@ public void testGetPreVarPool() {
     }
 
     private List<Schedule> zeroSchedulerList() {
-        return Collections.EMPTY_LIST;
+        return Collections.emptyList();
     }
 
     private List<Schedule> oneSchedulerList() {

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/worker/processor/TaskExecuteProcessorTest.java
Patch:
@@ -119,7 +119,7 @@ public void before() throws Exception {
                 taskExecutionContext.getTaskInstanceId()));
 
         workerManager = PowerMockito.mock(WorkerManagerThread.class);
-        PowerMockito.when(workerManager.offer(new TaskExecuteThread(taskExecutionContext, taskCallbackService, taskLogger, alertClientService))).thenReturn(Boolean.TRUE);
+        PowerMockito.when(workerManager.offer(new TaskExecuteThread(taskExecutionContext, taskCallbackService, alertClientService))).thenReturn(Boolean.TRUE);
 
         PowerMockito.when(SpringApplicationContext.getBean(WorkerManagerThread.class))
                 .thenReturn(workerManager);
@@ -188,7 +188,7 @@ public TaskExecutionContext getTaskExecutionContext() {
     private static class SimpleTaskExecuteThread extends TaskExecuteThread {
 
         public SimpleTaskExecuteThread(TaskExecutionContext taskExecutionContext, TaskCallbackService taskCallbackService, Logger taskLogger, AlertClientService alertClientService) {
-            super(taskExecutionContext, taskCallbackService, taskLogger, alertClientService);
+            super(taskExecutionContext, taskCallbackService, alertClientService);
         }
 
         @Override

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessService.java
Patch:
@@ -2458,6 +2458,7 @@ public List<TaskNode> genTaskNodeList(Long processCode, int processVersion, Map<
             v.setRetryInterval(taskDefinitionLog.getFailRetryInterval());
             Map<String, Object> taskParamsMap = v.taskParamsToJsonObj(taskDefinitionLog.getTaskParams());
             v.setConditionResult((String) taskParamsMap.get(Constants.CONDITION_RESULT));
+            v.setSwitchResult((String) taskParamsMap.get(Constants.SWITCH_RESULT));
             v.setDependence((String) taskParamsMap.get(Constants.DEPENDENCE));
             taskParamsMap.remove(Constants.CONDITION_RESULT);
             taskParamsMap.remove(Constants.DEPENDENCE);

File: dolphinscheduler-spi/src/main/java/org/apache/dolphinscheduler/spi/task/TaskChannel.java
Patch:
@@ -15,12 +15,10 @@
  * limitations under the License.
  */
 
-import org.slf4j.Logger;
-
 public interface TaskChannel {
 
     void cancelApplication(boolean status);
 
-    AbstractTask createTask(TaskRequest taskRequest, Logger logger);
+    AbstractTask createTask(TaskRequest taskRequest);
 
 }

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/AbstractCommandExecutor.java
Patch:
@@ -21,6 +21,9 @@
 import static org.apache.dolphinscheduler.spi.task.TaskConstants.EXIT_CODE_KILL;
 import static org.apache.dolphinscheduler.spi.task.TaskConstants.SH;
 
+import org.apache.dolphinscheduler.plugin.task.util.LoggerUtils;
+import org.apache.dolphinscheduler.plugin.task.util.OSUtils;
+import org.apache.dolphinscheduler.plugin.task.util.ThreadUtils;
 import org.apache.dolphinscheduler.spi.task.TaskConstants;
 import org.apache.dolphinscheduler.spi.task.TaskRequest;
 import org.apache.dolphinscheduler.spi.utils.StringUtils;

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/ProcessUtils.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.dolphinscheduler.plugin.task.api;
 
+import org.apache.dolphinscheduler.plugin.task.util.OSUtils;
 import org.apache.dolphinscheduler.spi.task.TaskConstants;
 import org.apache.dolphinscheduler.spi.task.TaskRequest;
 

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/api/ShellCommandExecutor.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.dolphinscheduler.plugin.task.api;
 
+import org.apache.dolphinscheduler.plugin.task.util.OSUtils;
 import org.apache.dolphinscheduler.spi.task.TaskRequest;
 
 import org.apache.commons.io.FileUtils;

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/util/ArgsUtils.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.plugin.task.api;
+package org.apache.dolphinscheduler.plugin.task.util;
 
 public class ArgsUtils {
 

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/util/LoggerUtils.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.plugin.task.api;
+package org.apache.dolphinscheduler.plugin.task.util;
 
 import java.util.ArrayList;
 import java.util.List;

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/util/OSUtils.java
Patch:
@@ -15,8 +15,9 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.plugin.task.api;
+package org.apache.dolphinscheduler.plugin.task.util;
 
+import org.apache.dolphinscheduler.plugin.task.api.ShellExecutor;
 import org.apache.dolphinscheduler.spi.utils.StringUtils;
 
 import java.io.IOException;

File: dolphinscheduler-task-plugin/dolphinscheduler-task-api/src/main/java/org/apache/dolphinscheduler/plugin/task/util/ThreadUtils.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.plugin.task.api;
+package org.apache.dolphinscheduler.plugin.task.util;
 
 import java.lang.management.ManagementFactory;
 import java.lang.management.ThreadInfo;

File: dolphinscheduler-task-plugin/dolphinscheduler-task-flink/src/main/java/org/apache/dolphinscheduler/plugin/task/flink/FlinkArgsUtils.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.dolphinscheduler.plugin.task.flink;
 
-import org.apache.dolphinscheduler.plugin.task.api.ArgsUtils;
+import org.apache.dolphinscheduler.plugin.task.util.ArgsUtils;
 import org.apache.dolphinscheduler.spi.task.ResourceInfo;
 import org.apache.dolphinscheduler.spi.utils.StringUtils;
 

File: dolphinscheduler-task-plugin/dolphinscheduler-task-flink/src/main/java/org/apache/dolphinscheduler/plugin/task/flink/FlinkTask.java
Patch:
@@ -48,8 +48,8 @@ public class FlinkTask extends AbstractYarnTask {
 
     private TaskRequest flinkRequest;
 
-    public FlinkTask(TaskRequest taskRequest, Logger logger) {
-        super(taskRequest, logger);
+    public FlinkTask(TaskRequest taskRequest) {
+        super(taskRequest);
         this.flinkRequest = taskRequest;
     }
 

File: dolphinscheduler-task-plugin/dolphinscheduler-task-shell/src/main/java/org/apache/dolphinscheduler/plugin/task/shell/ShellTaskChannelFactory.java
Patch:
@@ -17,10 +17,10 @@
 
 package org.apache.dolphinscheduler.plugin.task.shell;
 
-import org.apache.dolphinscheduler.spi.params.input.InputParam;
 import org.apache.dolphinscheduler.spi.params.base.ParamsOptions;
 import org.apache.dolphinscheduler.spi.params.base.PluginParams;
 import org.apache.dolphinscheduler.spi.params.base.Validate;
+import org.apache.dolphinscheduler.spi.params.input.InputParam;
 import org.apache.dolphinscheduler.spi.params.radio.RadioParam;
 import org.apache.dolphinscheduler.spi.task.TaskChannel;
 import org.apache.dolphinscheduler.spi.task.TaskChannelFactory;
@@ -49,7 +49,7 @@ public List<PluginParams> getParams() {
                         .build())
                 .build();
 
-        RadioParam runFlag = RadioParam.newBuilder("runFlag", "运行标志")
+        RadioParam runFlag = RadioParam.newBuilder("runFlag", "RUN_FLAG")
                 .addParamsOptions(new ParamsOptions("NORMAL", "NORMAL", false))
                 .addParamsOptions(new ParamsOptions("FORBIDDEN", "FORBIDDEN", false))
                 .build();

File: dolphinscheduler-task-plugin/dolphinscheduler-task-spark/src/main/java/org/apache/dolphinscheduler/plugin/task/spark/SparkArgsUtils.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.dolphinscheduler.plugin.task.spark;
 
-import org.apache.dolphinscheduler.plugin.task.api.ArgsUtils;
+import org.apache.dolphinscheduler.plugin.task.util.ArgsUtils;
 import org.apache.dolphinscheduler.spi.task.ResourceInfo;
 import org.apache.dolphinscheduler.spi.utils.StringUtils;
 

File: dolphinscheduler-task-plugin/dolphinscheduler-task-spark/src/main/java/org/apache/dolphinscheduler/plugin/task/spark/SparkTask.java
Patch:
@@ -53,8 +53,8 @@ public class SparkTask extends AbstractYarnTask {
      */
     private TaskRequest taskRequest;
 
-    public SparkTask(TaskRequest taskRequest, Logger logger) {
-        super(taskRequest, logger);
+    public SparkTask(TaskRequest taskRequest) {
+        super(taskRequest);
         this.taskRequest = taskRequest;
     }
 
@@ -128,7 +128,7 @@ protected void setMainJarName() {
         if (resourceId == 0) {
             resourceName = mainJar.getRes();
         } else {
-            //fixme when update resource maybe has error ,也许也可以交给上层去做控制 需要看资源是否可以抽象为共性 目前来讲我认为是可以的
+            //fixme when update resource maybe has error
             resourceName = mainJar.getResourceName().replaceFirst("/", "");
         }
         mainJar.setRes(resourceName);

File: dolphinscheduler-task-plugin/dolphinscheduler-task-spark/src/main/java/org/apache/dolphinscheduler/plugin/task/spark/SparkTaskChannel.java
Patch:
@@ -24,14 +24,13 @@
 import org.slf4j.Logger;
 
 public class SparkTaskChannel implements TaskChannel {
-
     @Override
     public void cancelApplication(boolean status) {
 
     }
 
     @Override
-    public AbstractTask createTask(TaskRequest taskRequest, Logger logger) {
-        return new SparkTask(taskRequest, logger);
+    public AbstractTask createTask(TaskRequest taskRequest) {
+        return new SparkTask(taskRequest);
     }
 }

File: dolphinscheduler-task-plugin/dolphinscheduler-task-spark/src/main/java/org/apache/dolphinscheduler/plugin/task/spark/SparkTaskPlugin.java
Patch:
@@ -23,9 +23,8 @@
 import com.google.common.collect.ImmutableList;
 
 public class SparkTaskPlugin implements DolphinSchedulerPlugin {
-
     @Override
     public Iterable<TaskChannelFactory> getTaskChannelFactorys() {
-        return ImmutableList.of(new SparkTaskChannelFanctory());
+        return ImmutableList.of(new SparkTaskChannelFactory());
     }
 }

File: dolphinscheduler-task-plugin/dolphinscheduler-task-tis/src/main/java/org/apache/dolphinscheduler/plugin/task/tis/TISTaskChannel.java
Patch:
@@ -28,7 +28,7 @@ public void cancelApplication(boolean status) {
     }
 
     @Override
-    public AbstractTask createTask(TaskRequest taskRequest, org.slf4j.Logger logger) {
-        return new TISTask(taskRequest, logger);
+    public AbstractTask createTask(TaskRequest taskRequest) {
+        return new TISTask(taskRequest);
     }
 }

File: dolphinscheduler-task-plugin/dolphinscheduler-task-tis/src/main/java/org/apache/dolphinscheduler/plugin/task/tis/TISTaskChannelFactory.java
Patch:
@@ -17,9 +17,9 @@
 
 package org.apache.dolphinscheduler.plugin.task.tis;
 
-import org.apache.dolphinscheduler.spi.params.InputParam;
 import org.apache.dolphinscheduler.spi.params.base.PluginParams;
 import org.apache.dolphinscheduler.spi.params.base.Validate;
+import org.apache.dolphinscheduler.spi.params.input.InputParam;
 import org.apache.dolphinscheduler.spi.task.TaskChannel;
 import org.apache.dolphinscheduler.spi.task.TaskChannelFactory;
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ExecutorController.java
Patch:
@@ -107,7 +107,7 @@ public class ExecutorController extends BaseController {
     @AccessLogAnnotation(ignoreRequestArgs = "loginUser")
     public Result startProcessInstance(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,
                                        @ApiParam(name = "projectCode", value = "PROJECT_CODE", required = true) @PathVariable long projectCode,
-                                       @RequestParam(value = "processDefinitionCode") int processDefinitionCode,
+                                       @RequestParam(value = "processDefinitionCode") long processDefinitionCode,
                                        @RequestParam(value = "scheduleTime", required = false) String scheduleTime,
                                        @RequestParam(value = "failureStrategy", required = true) FailureStrategy failureStrategy,
                                        @RequestParam(value = "startNodeList", required = false) String startNodeList,

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProcessDefinitionController.java
Patch:
@@ -20,7 +20,7 @@
 import static org.apache.dolphinscheduler.api.enums.Status.BATCH_COPY_PROCESS_DEFINITION_ERROR;
 import static org.apache.dolphinscheduler.api.enums.Status.BATCH_DELETE_PROCESS_DEFINE_BY_CODES_ERROR;
 import static org.apache.dolphinscheduler.api.enums.Status.BATCH_MOVE_PROCESS_DEFINITION_ERROR;
-import static org.apache.dolphinscheduler.api.enums.Status.CREATE_PROCESS_DEFINITION;
+import static org.apache.dolphinscheduler.api.enums.Status.CREATE_PROCESS_DEFINITION_ERROR;
 import static org.apache.dolphinscheduler.api.enums.Status.DELETE_PROCESS_DEFINE_BY_CODE_ERROR;
 import static org.apache.dolphinscheduler.api.enums.Status.DELETE_PROCESS_DEFINITION_VERSION_ERROR;
 import static org.apache.dolphinscheduler.api.enums.Status.ENCAPSULATION_TREEVIEW_STRUCTURE_ERROR;
@@ -112,7 +112,7 @@ public class ProcessDefinitionController extends BaseController {
     })
     @PostMapping(value = "/save")
     @ResponseStatus(HttpStatus.CREATED)
-    @ApiException(CREATE_PROCESS_DEFINITION)
+    @ApiException(CREATE_PROCESS_DEFINITION_ERROR)
     @AccessLogAnnotation(ignoreRequestArgs = "loginUser")
     public Result createProcessDefinition(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,
                                           @ApiParam(name = "projectCode", value = "PROJECT_CODE", required = true) @PathVariable long projectCode,

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java
Patch:
@@ -132,7 +132,7 @@ public enum Status {
     AUTHORIZED_USER_ERROR(10102, "authorized user error", "查询授权用户错误"),
     QUERY_TASK_INSTANCE_LOG_ERROR(10103, "view task instance log error", "查询任务实例日志错误"),
     DOWNLOAD_TASK_INSTANCE_LOG_FILE_ERROR(10104, "download task instance log file error", "下载任务日志文件错误"),
-    CREATE_PROCESS_DEFINITION(10105, "create process definition", "创建工作流错误"),
+    CREATE_PROCESS_DEFINITION_ERROR(10105, "create process definition error", "创建工作流错误"),
     VERIFY_PROCESS_DEFINITION_NAME_UNIQUE_ERROR(10106, "verify process definition name unique error", "工作流定义名称验证错误"),
     UPDATE_PROCESS_DEFINITION_ERROR(10107, "update process definition error", "更新工作流定义错误"),
     RELEASE_PROCESS_DEFINITION_ERROR(10108, "release process definition error", "上线工作流错误"),

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ExecutorController.java
Patch:
@@ -175,7 +175,7 @@ public Result execute(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USE
     @ResponseStatus(HttpStatus.OK)
     @ApiException(CHECK_PROCESS_DEFINITION_ERROR)
     @AccessLogAnnotation(ignoreRequestArgs = "loginUser")
-    public Result startCheckProcessDefinition(@RequestParam(value = "processDefinitionCode") int processDefinitionCode) {
+    public Result startCheckProcessDefinition(@RequestParam(value = "processDefinitionCode") long processDefinitionCode) {
         Map<String, Object> result = execService.startCheckByProcessDefinedCode(processDefinitionCode);
         return returnDataList(result);
     }

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/Constants.java
Patch:
@@ -435,7 +435,7 @@ private Constants() {
      */
     public static final String DATASOURCE_PROPERTIES = "/datasource.properties";
 
-    public static final String DEFAULT = "Default";
+    public static final String DEFAULT = "default";
     public static final String USER = "user";
     public static final String PASSWORD = "password";
     public static final String XXXXXX = "******";

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/task/AbstractParameters.java
Patch:
@@ -30,6 +30,7 @@
 import java.util.List;
 import java.util.Map;
 
+import com.fasterxml.jackson.core.type.TypeReference;
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.node.ArrayNode;
 
@@ -152,7 +153,7 @@ public List<Map<String, String>> getListMapByString(String json) {
         ArrayNode paramsByJson = JSONUtils.parseArray(json);
         Iterator<JsonNode> listIterator = paramsByJson.iterator();
         while (listIterator.hasNext()) {
-            Map<String, String> param = JSONUtils.toMap(listIterator.next().toString(), String.class, String.class);
+            Map<String, String> param = JSONUtils.parseObject(listIterator.next().toString(), new TypeReference<Map<String, String>>() {});
             allParams.add(param);
         }
         return allParams;

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/task/sql/SqlParameters.java
Patch:
@@ -251,9 +251,9 @@ public void dealOutParam(String result) {
                 sqlResultFormat.put(key, new ArrayList<>());
             }
             for (Map<String, String> info : sqlResult) {
-                for (String key : info.keySet()) {
-                    sqlResultFormat.get(key).add(String.valueOf(info.get(key)));
-                }
+                info.forEach((key, value) -> {
+                    sqlResultFormat.get(key).add(value);
+                });
             }
             for (Property info : outProperty) {
                 if (info.getType() == DataType.LIST) {

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java
Patch:
@@ -276,6 +276,7 @@ public enum Status {
     DELETE_TASK_DEFINE_BY_CODE_ERROR(50042, "delete task definition by code error", "删除任务定义错误"),
     QUERY_DETAIL_OF_TASK_DEFINITION_ERROR(50043, "query detail of task definition error", "查询任务详细信息错误"),
     QUERY_TASK_DEFINITION_LIST_PAGING_ERROR(50044, "query task definition list paging error", "分页查询任务定义列表错误"),
+    TASK_DEFINITION_NAME_EXISTED(50045, "task definition name [{0}] already exists", "任务定义名称[{0}]已经存在"),
     HDFS_NOT_STARTUP(60001, "hdfs not startup", "hdfs未启用"),
 
     /**

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProcessInstanceService.java
Patch:
@@ -116,6 +116,7 @@ Map<String, Object> querySubProcessInstanceByTaskId(User loginUser,
      * @param loginUser login user
      * @param projectCode project code
      * @param taskRelationJson process task relation json
+     * @param taskDefinitionJson taskDefinitionJson
      * @param processInstanceId process instance id
      * @param scheduleTime schedule time
      * @param syncDefine sync define
@@ -129,6 +130,7 @@ Map<String, Object> updateProcessInstance(User loginUser,
                                               long projectCode,
                                               Integer processInstanceId,
                                               String taskRelationJson,
+                                              String taskDefinitionJson,
                                               String scheduleTime,
                                               Boolean syncDefine,
                                               String globalParams,

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/JSONUtils.java
Patch:
@@ -159,7 +159,6 @@ public static <T> List<T> toList(String json, Class<T> clazz) {
         }
 
         try {
-
             CollectionType listType = objectMapper.getTypeFactory().constructCollectionType(ArrayList.class, clazz);
             return objectMapper.readValue(json, listType);
         } catch (Exception e) {

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProcessInstanceService.java
Patch:
@@ -119,7 +119,6 @@ Map<String, Object> querySubProcessInstanceByTaskId(User loginUser,
      * @param processInstanceId process instance id
      * @param scheduleTime schedule time
      * @param syncDefine sync define
-     * @param flag flag
      * @param globalParams global params
      * @param locations locations for nodes
      * @param timeout timeout
@@ -132,7 +131,6 @@ Map<String, Object> updateProcessInstance(User loginUser,
                                               String taskRelationJson,
                                               String scheduleTime,
                                               Boolean syncDefine,
-                                              Flag flag,
                                               String globalParams,
                                               String locations,
                                               int timeout,

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProcessInstanceServiceImpl.java
Patch:
@@ -404,7 +404,6 @@ public Map<String, Object> querySubProcessInstanceByTaskId(User loginUser, long
      * @param processInstanceId process instance id
      * @param scheduleTime schedule time
      * @param syncDefine sync define
-     * @param flag flag
      * @param globalParams global params
      * @param locations locations for nodes
      * @param timeout timeout
@@ -414,7 +413,7 @@ public Map<String, Object> querySubProcessInstanceByTaskId(User loginUser, long
     @Transactional
     @Override
     public Map<String, Object> updateProcessInstance(User loginUser, long projectCode, Integer processInstanceId, String taskRelationJson,
-                                                     String scheduleTime, Boolean syncDefine, Flag flag, String globalParams,
+                                                     String scheduleTime, Boolean syncDefine, String globalParams,
                                                      String locations, int timeout, String tenantCode) {
         Project project = projectMapper.queryByCode(projectCode);
         //check user access for project

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/Flag.java
Patch:
@@ -34,8 +34,7 @@ public enum Flag {
     NO(0, "no"),
     YES(1, "yes");
 
-
-    Flag(int code, String descp){
+    Flag(int code, String descp) {
         this.code = code;
         this.descp = descp;
     }

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/Priority.java
Patch:
@@ -35,7 +35,7 @@ public enum Priority {
     LOW(3, "low"),
     LOWEST(4, "lowest");
 
-    Priority(int code, String descp){
+    Priority(int code, String descp) {
         this.code = code;
         this.descp = descp;
     }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/TaskDefinitionServiceImpl.java
Patch:
@@ -148,8 +148,6 @@ public Map<String, Object> createTaskDefinition(User loginUser,
             taskDefinitionLog.setUserId(loginUser.getId());
             taskDefinitionLog.setVersion(1);
             taskDefinitionLog.setCreateTime(now);
-            totalSuccessCode.add(taskDefinitionLog.getCode());
-            newTaskDefinitionLogs.add(taskDefinitionLog);
             if (taskDefinitionLog.getCode() == 0) {
                 long code;
                 try {

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/WorkerServer.java
Patch:
@@ -181,6 +181,7 @@ public void close(String cause) {
             this.nettyRemotingServer.close();
             this.workerRegistryClient.unRegistry();
             this.alertClientService.close();
+            this.springApplicationContext.close();
         } catch (Exception e) {
             logger.error("worker server stop exception ", e);
         }

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/runner/RetryReportTaskStatusThread.java
Patch:
@@ -49,6 +49,7 @@ public class RetryReportTaskStatusThread implements Runnable {
 
     public void start(){
         Thread thread = new Thread(this,"RetryReportTaskStatusThread");
+        thread.setDaemon(true);
         thread.start();
     }
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/runner/WorkerManagerThread.java
Patch:
@@ -123,6 +123,7 @@ public boolean offer(TaskExecuteThread taskExecuteThread) {
 
     public void start() {
         Thread thread = new Thread(this, this.getClass().getName());
+        thread.setDaemon(true);
         thread.start();
     }
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ExecutorService.java
Patch:
@@ -52,6 +52,7 @@ public interface ExecutorService {
      * @param runMode run mode
      * @param timeout timeout
      * @param startParams the global param values which pass to new process instance
+     * @param expectedParallelismNumber the expected parallelism number when execute complement in parallel mode
      * @return execute process instance code
      */
     Map<String, Object> execProcessInstance(User loginUser, long projectCode,
@@ -60,7 +61,7 @@ Map<String, Object> execProcessInstance(User loginUser, long projectCode,
                                             TaskDependType taskDependType, WarningType warningType, int warningGroupId,
                                             RunMode runMode,
                                             Priority processInstancePriority, String workerGroup, Integer timeout,
-                                            Map<String, String> startParams);
+                                            Map<String, String> startParams, Integer expectedParallelismNumber);
 
     /**
      * check whether the process definition can be executed

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/TenantServiceImpl.java
Patch:
@@ -155,8 +155,8 @@ public Result queryTenantList(User loginUser, String searchVal, Integer pageNo,
      * updateProcessInstance tenant
      *
      * @param loginUser  login user
-     * @param id         tennat id
-     * @param tenantCode tennat code
+     * @param id         tenant id
+     * @param tenantCode tenant code
      * @param queueId    queue id
      * @param desc       description
      * @return update result code

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/UsersServiceImpl.java
Patch:
@@ -313,7 +313,7 @@ public int getUserIdByName(String name) {
      *
      * @param loginUser login user
      * @param pageNo page number
-     * @param searchVal search avlue
+     * @param searchVal search value
      * @param pageSize page size
      * @return user list page
      */
@@ -347,7 +347,7 @@ public Result queryUserList(User loginUser, String searchVal, Integer pageNo, In
      * @param userName user name
      * @param userPassword user password
      * @param email email
-     * @param tenantId tennat id
+     * @param tenantId tenant id
      * @param phone phone
      * @param queue queue
      * @return update result code

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/datasource/SpringConnectionFactory.java
Patch:
@@ -166,6 +166,7 @@ public DatabaseIdProvider databaseIdProvider() {
         Properties properties = new Properties();
         properties.setProperty("MySQL", "mysql");
         properties.setProperty("PostgreSQL", "pg");
+        properties.setProperty("h2", "h2");
         databaseIdProvider.setProperties(properties);
         return databaseIdProvider;
     }

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/utils/ResourceProcessDefinitionUtilsTest.java
Patch:
@@ -31,7 +31,7 @@ public class ResourceProcessDefinitionUtilsTest {
     @Test
     public void getResourceProcessDefinitionMapTest(){
         List<Map<String,Object>> mapList = new ArrayList<>();
-        Map<String,Object> map = new HashMap();
+        Map<String,Object> map = new HashMap<>();
         map.put("code",1L);
         map.put("resource_ids","1,2,3");
         mapList.add(map);

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/dispatch/executor/NettyExecutorManager.java
Patch:
@@ -178,7 +178,7 @@ private void doExecute(final Host host, final Command command) throws ExecuteExc
      * @return nodes
      */
     private Set<String> getAllNodes(ExecutionContext context){
-        Set<String> nodes = Collections.EMPTY_SET;
+        Set<String> nodes = Collections.emptySet();
         /**
          * executor type
          */

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterBaseTaskExecThread.java
Patch:
@@ -191,7 +191,7 @@ protected TaskInstance submit() {
     }
 
     /**
-     * dispatcht task
+     * dispatch task
      *
      * @param taskInstance taskInstance
      * @return whether submit task success

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/master/MasterExecThreadTest.java
Patch:
@@ -101,8 +101,8 @@ public void init() throws Exception {
         cmdParam.put(CMDPARAM_COMPLEMENT_DATA_END_DATE, "2020-01-20 23:00:00");
         Mockito.when(processInstance.getCommandParam()).thenReturn(JSONUtils.toJsonString(cmdParam));
         ProcessDefinition processDefinition = new ProcessDefinition();
-        processDefinition.setGlobalParamMap(Collections.EMPTY_MAP);
-        processDefinition.setGlobalParamList(Collections.EMPTY_LIST);
+        processDefinition.setGlobalParamMap(Collections.emptyMap());
+        processDefinition.setGlobalParamList(Collections.emptyList());
         Mockito.when(processInstance.getProcessDefinition()).thenReturn(processDefinition);
         Mockito.when(processInstance.getProcessDefinitionCode()).thenReturn(processDefinitionCode);
 
@@ -257,7 +257,7 @@ public void testGetPreVarPool() {
     }
 
     private List<Schedule> zeroSchedulerList() {
-        return Collections.EMPTY_LIST;
+        return Collections.emptyList();
     }
 
     private List<Schedule> oneSchedulerList() {

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/worker/task/http/HttpTaskTest.java
Patch:
@@ -55,8 +55,6 @@
 public class HttpTaskTest {
     private static final Logger logger = LoggerFactory.getLogger(HttpTaskTest.class);
 
-
-
     private HttpTask httpTask;
 
     private ProcessService processService;
@@ -168,7 +166,7 @@ public void testSendRequest(){
 
         } catch (IOException e) {
             e.printStackTrace();
-        };
+        }
     }
 
     @Test

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/quartz/ProcessScheduleJob.java
Patch:
@@ -75,8 +75,8 @@ public void execute(JobExecutionContext context) throws JobExecutionException {
 
         // query schedule
         Schedule schedule = getProcessService().querySchedule(scheduleId);
-        if (schedule == null) {
-            logger.warn("process schedule does not exist in db，delete schedule job in quartz, projectId:{}, scheduleId:{}", projectId, scheduleId);
+        if (schedule == null || ReleaseState.OFFLINE == schedule.getReleaseState()) {
+            logger.warn("process schedule does not exist in db or process schedule offline，delete schedule job in quartz, projectId:{}, scheduleId:{}", projectId, scheduleId);
             deleteJob(projectId, scheduleId);
             return;
         }

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/ProcessDefinition.java
Patch:
@@ -167,7 +167,7 @@ public class ProcessDefinition {
     @TableField(exist = false)
     private int warningGroupId;
 
-    public ProcessDefinition(){}
+    public ProcessDefinition() {}
 
     public ProcessDefinition(long projectCode,
                              String name,

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java
Patch:
@@ -70,6 +70,7 @@ public TaskDefinitionLog(TaskDefinition taskDefinition) {
         this.setFailRetryInterval(taskDefinition.getFailRetryInterval());
         this.setFailRetryTimes(taskDefinition.getFailRetryTimes());
         this.setFlag(taskDefinition.getFlag());
+        this.setModifyBy(taskDefinition.getModifyBy());
     }
 
     public int getOperator() {

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java
Patch:
@@ -192,7 +192,7 @@ public enum Status {
     BATCH_MOVE_PROCESS_DEFINITION_ERROR(10160, "batch move process definition error", "移动工作流错误"),
     QUERY_WORKFLOW_LINEAGE_ERROR(10161, "query workflow lineage error", "查询血缘失败"),
     QUERY_AUTHORIZED_AND_USER_CREATED_PROJECT_ERROR(10162, "query authorized and user created project error error", "查询授权的和用户创建的项目错误"),
-    DELETE_PROCESS_DEFINITION_BY_ID_FAIL(10163, "delete process definition by id fail, for there are {0} process instances in executing using it", "删除工作流定义失败，有[{0}]个运行中的工作流实例正在使用"),
+    DELETE_PROCESS_DEFINITION_BY_CODE_FAIL(10163, "delete process definition by code fail, for there are {0} process instances in executing using it", "删除工作流定义失败，有[{0}]个运行中的工作流实例正在使用"),
     CHECK_OS_TENANT_CODE_ERROR(10164, "Please enter the English os tenant code", "请输入英文操作系统租户"),
     FORCE_TASK_SUCCESS_ERROR(10165, "force task success error", "强制成功任务实例错误"),
     TASK_INSTANCE_STATE_OPERATION_ERROR(10166, "the status of task instance {0} is {1},Cannot perform force success operation", "任务实例[{0}]的状态是[{1}]，无法执行强制成功操作"),
@@ -253,11 +253,11 @@ public enum Status {
     PROCESS_NODE_HAS_CYCLE(50019, "process node has cycle", "流程节点间存在循环依赖"),
     PROCESS_NODE_S_PARAMETER_INVALID(50020, "process node {0} parameter invalid", "流程节点[{0}]参数无效"),
     PROCESS_DEFINE_STATE_ONLINE(50021, "process definition {0} is already on line", "工作流定义[{0}]已上线"),
-    DELETE_PROCESS_DEFINE_BY_ID_ERROR(50022, "delete process definition by id error", "删除工作流定义错误"),
+    DELETE_PROCESS_DEFINE_BY_CODE_ERROR(50022, "delete process definition by code error", "删除工作流定义错误"),
     SCHEDULE_CRON_STATE_ONLINE(50023, "the status of schedule {0} is already on line", "调度配置[{0}]已上线"),
     DELETE_SCHEDULE_CRON_BY_ID_ERROR(50024, "delete schedule by id error", "删除调度配置错误"),
     BATCH_DELETE_PROCESS_DEFINE_ERROR(50025, "batch delete process definition error", "批量删除工作流定义错误"),
-    BATCH_DELETE_PROCESS_DEFINE_BY_IDS_ERROR(50026, "batch delete process definition by ids {0} error", "批量删除工作流定义[{0}]错误"),
+    BATCH_DELETE_PROCESS_DEFINE_BY_CODES_ERROR(50026, "batch delete process definition by codes {0} error", "批量删除工作流定义[{0}]错误"),
     TENANT_NOT_SUITABLE(50027, "there is not any tenant suitable, please choose a tenant available.", "没有合适的租户，请选择可用的租户"),
     EXPORT_PROCESS_DEFINE_BY_ID_ERROR(50028, "export process definition by id error", "导出工作流定义错误"),
     BATCH_EXPORT_PROCESS_DEFINE_BY_IDS_ERROR(50028, "batch export process definition by ids error", "批量导出工作流定义错误"),

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/utils/ResourceProcessDefinitionUtilsTest.java
Patch:
@@ -31,7 +31,7 @@ public class ResourceProcessDefinitionUtilsTest {
     @Test
     public void getResourceProcessDefinitionMapTest(){
         List<Map<String,Object>> mapList = new ArrayList<>();
-        Map<String,Object> map = new HashMap();
+        Map<String,Object> map = new HashMap<>();
         map.put("code",1L);
         map.put("resource_ids","1,2,3");
         mapList.add(map);

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/dispatch/executor/NettyExecutorManager.java
Patch:
@@ -178,7 +178,7 @@ private void doExecute(final Host host, final Command command) throws ExecuteExc
      * @return nodes
      */
     private Set<String> getAllNodes(ExecutionContext context){
-        Set<String> nodes = Collections.EMPTY_SET;
+        Set<String> nodes = Collections.emptySet();
         /**
          * executor type
          */

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/master/MasterExecThreadTest.java
Patch:
@@ -101,8 +101,8 @@ public void init() throws Exception {
         cmdParam.put(CMDPARAM_COMPLEMENT_DATA_END_DATE, "2020-01-20 23:00:00");
         Mockito.when(processInstance.getCommandParam()).thenReturn(JSONUtils.toJsonString(cmdParam));
         ProcessDefinition processDefinition = new ProcessDefinition();
-        processDefinition.setGlobalParamMap(Collections.EMPTY_MAP);
-        processDefinition.setGlobalParamList(Collections.EMPTY_LIST);
+        processDefinition.setGlobalParamMap(Collections.emptyMap());
+        processDefinition.setGlobalParamList(Collections.emptyList());
         Mockito.when(processInstance.getProcessDefinition()).thenReturn(processDefinition);
 
         masterExecThread = PowerMockito.spy(new MasterExecThread(processInstance, processService, null, null, config));
@@ -256,7 +256,7 @@ public void testGetPreVarPool() {
     }
 
     private List<Schedule> zeroSchedulerList() {
-        return Collections.EMPTY_LIST;
+        return Collections.emptyList();
     }
 
     private List<Schedule> oneSchedulerList() {

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/graph/DAG.java
Patch:
@@ -435,7 +435,7 @@ private Set<Node> getNeighborNodes(Node node, final Map<Node, Map<Node, EdgeInfo
     final Map<Node, EdgeInfo> neighborEdges = edges.get(node);
 
     if (neighborEdges == null) {
-      return Collections.EMPTY_MAP.keySet();
+      return Collections.emptySet();
     }
 
     return neighborEdges.keySet();

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/utils/ResourceProcessDefinitionUtilsTest.java
Patch:
@@ -31,7 +31,7 @@ public class ResourceProcessDefinitionUtilsTest {
     @Test
     public void getResourceProcessDefinitionMapTest(){
         List<Map<String,Object>> mapList = new ArrayList<>();
-        Map<String,Object> map = new HashMap();
+        Map<String,Object> map = new HashMap<>();
         map.put("code",1L);
         map.put("resource_ids","1,2,3");
         mapList.add(map);

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/dispatch/executor/NettyExecutorManager.java
Patch:
@@ -178,7 +178,7 @@ private void doExecute(final Host host, final Command command) throws ExecuteExc
      * @return nodes
      */
     private Set<String> getAllNodes(ExecutionContext context){
-        Set<String> nodes = Collections.EMPTY_SET;
+        Set<String> nodes = Collections.emptySet();
         /**
          * executor type
          */

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/master/MasterExecThreadTest.java
Patch:
@@ -101,8 +101,8 @@ public void init() throws Exception {
         cmdParam.put(CMDPARAM_COMPLEMENT_DATA_END_DATE, "2020-01-20 23:00:00");
         Mockito.when(processInstance.getCommandParam()).thenReturn(JSONUtils.toJsonString(cmdParam));
         ProcessDefinition processDefinition = new ProcessDefinition();
-        processDefinition.setGlobalParamMap(Collections.EMPTY_MAP);
-        processDefinition.setGlobalParamList(Collections.EMPTY_LIST);
+        processDefinition.setGlobalParamMap(Collections.emptyMap());
+        processDefinition.setGlobalParamList(Collections.emptyList());
         Mockito.when(processInstance.getProcessDefinition()).thenReturn(processDefinition);
 
         masterExecThread = PowerMockito.spy(new MasterExecThread(processInstance, processService, null, null, config));
@@ -256,7 +256,7 @@ public void testGetPreVarPool() {
     }
 
     private List<Schedule> zeroSchedulerList() {
-        return Collections.EMPTY_LIST;
+        return Collections.emptyList();
     }
 
     private List<Schedule> oneSchedulerList() {

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ExecutorService.java
Patch:
@@ -52,6 +52,7 @@ public interface ExecutorService {
      * @param runMode run mode
      * @param timeout timeout
      * @param startParams the global param values which pass to new process instance
+     * @param expectedParallelismNumber the expected parallelism number when execute complement in parallel mode
      * @return execute process instance code
      */
     Map<String, Object> execProcessInstance(User loginUser, String projectName,
@@ -60,7 +61,7 @@ Map<String, Object> execProcessInstance(User loginUser, String projectName,
                                             TaskDependType taskDependType, WarningType warningType, int warningGroupId,
                                             RunMode runMode,
                                             Priority processInstancePriority, String workerGroup, Integer timeout,
-                                            Map<String, String> startParams);
+                                            Map<String, String> startParams, Integer expectedParallelismNumber);
 
     /**
      * check whether the process definition can be executed

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProcessInstanceController.java
Patch:
@@ -104,8 +104,8 @@ public class ProcessInstanceController extends BaseController {
         @ApiImplicitParam(name = "host", value = "HOST", type = "String"),
         @ApiImplicitParam(name = "startDate", value = "START_DATE", type = "String"),
         @ApiImplicitParam(name = "endDate", value = "END_DATE", type = "String"),
-        @ApiImplicitParam(name = "pageNo", value = "PAGE_NO", required = true, dataType = "Int", example = "100"),
-        @ApiImplicitParam(name = "pageSize", value = "PAGE_SIZE", required = true, dataType = "Int", example = "100")
+        @ApiImplicitParam(name = "pageNo", value = "PAGE_NO", required = true, dataType = "Int", example = "1"),
+        @ApiImplicitParam(name = "pageSize", value = "PAGE_SIZE", required = true, dataType = "Int", example = "10")
     })
     @GetMapping(value = "list-paging")
     @ResponseStatus(HttpStatus.OK)

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProjectController.java
Patch:
@@ -149,7 +149,7 @@ public Result queryProjectByCode(@ApiIgnore @RequestAttribute(value = Constants.
     @ApiOperation(value = "queryProjectListPaging", notes = "QUERY_PROJECT_LIST_PAGING_NOTES")
     @ApiImplicitParams({
         @ApiImplicitParam(name = "searchVal", value = "SEARCH_VAL", dataType = "String"),
-        @ApiImplicitParam(name = "pageSize", value = "PAGE_SIZE", required = true, dataType = "Int", example = "20"),
+        @ApiImplicitParam(name = "pageSize", value = "PAGE_SIZE", required = true, dataType = "Int", example = "10"),
         @ApiImplicitParam(name = "pageNo", value = "PAGE_NO", required = true, dataType = "Int", example = "1")
     })
     @GetMapping(value = "/list-paging")

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessService.java
Patch:
@@ -2319,7 +2319,7 @@ public List<TaskNode> transformTask(List<ProcessTaskRelationLog> taskRelationLis
                 taskNode.setRetryInterval(taskDefinitionLog.getFailRetryInterval());
                 Map<String, Object> taskParamsMap = taskNode.taskParamsToJsonObj(taskDefinitionLog.getTaskParams());
                 taskNode.setConditionResult((String) taskParamsMap.get(Constants.CONDITION_RESULT));
-                taskNode.setDependence((String) taskParamsMap.get(Constants.DEPENDENCE));
+                taskNode.setDependence(JSONUtils.toJsonString(taskParamsMap.get(Constants.DEPENDENCE)));
                 taskParamsMap.remove(Constants.CONDITION_RESULT);
                 taskParamsMap.remove(Constants.DEPENDENCE);
                 taskNode.setParams(JSONUtils.toJsonString(taskParamsMap));

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProjectController.java
Patch:
@@ -133,7 +133,7 @@ public Result updateProject(@ApiIgnore @RequestAttribute(value = Constants.SESSI
     @ApiException(QUERY_PROJECT_DETAILS_BY_CODE_ERROR)
     @AccessLogAnnotation(ignoreRequestArgs = "loginUser")
     public Result queryProjectByCode(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,
-                                     @RequestParam("projectCode") Long projectCode) {
+                                     @RequestParam("projectCode") long projectCode) {
         Map<String, Object> result = projectService.queryByCode(loginUser, projectCode);
         return returnDataList(result);
     }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProjectService.java
Patch:
@@ -43,17 +43,17 @@ public interface ProjectService {
      * @param projectCode project code
      * @return project detail information
      */
-    Map<String, Object> queryByCode(User loginUser, Long projectCode);
+    Map<String, Object> queryByCode(User loginUser, long projectCode);
 
     /**
      * check project and authorization
      *
      * @param loginUser login user
      * @param project project
-     * @param projectName project name
+     * @param projectCode project code
      * @return true if the login user have permission to see the project
      */
-    Map<String, Object> checkProjectAndAuth(User loginUser, Project project, String projectName);
+    Map<String, Object> checkProjectAndAuth(User loginUser, Project project, long projectCode);
 
     boolean hasProjectAndPerm(User loginUser, Project project, Map<String, Object> result);
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/DataAnalysisServiceImpl.java
Patch:
@@ -136,7 +136,7 @@ private Map<String, Object> countStateByProject(User loginUser, long projectCode
 
         if (projectCode != 0) {
             Project project = projectMapper.queryByCode(projectCode);
-            result = projectService.checkProjectAndAuth(loginUser, project, project.getName());
+            result = projectService.checkProjectAndAuth(loginUser, project, projectCode);
             if (result.get(Constants.STATUS) != Status.SUCCESS) {
                 return result;
             }
@@ -180,7 +180,7 @@ public Map<String, Object> countDefinitionByUser(User loginUser, long projectCod
 
         if (projectCode != 0) {
             Project project = projectMapper.queryByCode(projectCode);
-            result = projectService.checkProjectAndAuth(loginUser, project, project.getName());
+            result = projectService.checkProjectAndAuth(loginUser, project, projectCode);
             if (result.get(Constants.STATUS) != Status.SUCCESS) {
                 return result;
             }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/SchedulerServiceImpl.java
Patch:
@@ -526,7 +526,7 @@ public Map<String, Object> deleteScheduleById(User loginUser, long projectCode,
         Map<String, Object> result = new HashMap<>();
         Project project = projectMapper.queryByCode(projectCode);
 
-        Map<String, Object> checkResult = projectService.checkProjectAndAuth(loginUser, project, project.getName());
+        Map<String, Object> checkResult = projectService.checkProjectAndAuth(loginUser, project, projectCode);
         Status resultEnum = (Status) checkResult.get(Constants.STATUS);
         if (resultEnum != Status.SUCCESS) {
             return checkResult;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/TaskInstanceServiceImpl.java
Patch:
@@ -102,7 +102,7 @@ public Map<String, Object> queryTaskListPaging(User loginUser,
                                                    Integer pageSize) {
         Project project = projectMapper.queryByCode(projectCode);
         //check user access for project
-        Map<String, Object> result = projectService.checkProjectAndAuth(loginUser, project, project.getName());
+        Map<String, Object> result = projectService.checkProjectAndAuth(loginUser, project, projectCode);
         if (result.get(Constants.STATUS) != Status.SUCCESS) {
             return result;
         }
@@ -158,7 +158,7 @@ public Map<String, Object> queryTaskListPaging(User loginUser,
     public Map<String, Object> forceTaskSuccess(User loginUser, long projectCode, Integer taskInstanceId) {
         Project project = projectMapper.queryByCode(projectCode);
         //check user access for project
-        Map<String, Object> result = projectService.checkProjectAndAuth(loginUser, project, project.getName());
+        Map<String, Object> result = projectService.checkProjectAndAuth(loginUser, project, projectCode);
         if (result.get(Constants.STATUS) != Status.SUCCESS) {
             return result;
         }

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ExecutorServiceTest.java
Patch:
@@ -137,7 +137,7 @@ public void init() {
 
         // mock
         Mockito.when(projectMapper.queryByCode(projectCode)).thenReturn(project);
-        Mockito.when(projectService.checkProjectAndAuth(loginUser, project, projectName)).thenReturn(checkProjectAndAuth());
+        Mockito.when(projectService.checkProjectAndAuth(loginUser, project, projectCode)).thenReturn(checkProjectAndAuth());
         Mockito.when(processDefinitionMapper.queryByCode(processDefinitionCode)).thenReturn(processDefinition);
         Mockito.when(processService.getTenantForProcess(tenantId, userId)).thenReturn(new Tenant());
         Mockito.when(processService.createCommand(any(Command.class))).thenReturn(1);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/DataSourceController.java
Patch:
@@ -136,7 +136,7 @@ public Result queryDataSource(@ApiIgnore @RequestAttribute(value = Constants.SES
     }
 
     /**
-     * query datasouce by type
+     * query datasource by type
      *
      * @param loginUser login user
      * @param type      data source type

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProcessDefinitionController.java
Patch:
@@ -370,7 +370,7 @@ public Result releaseProcessDefinition(@ApiIgnore @RequestAttribute(value = Cons
     }
 
     /**
-     * query datail of process definition by id
+     * query detail of process definition by id
      *
      * @param loginUser login user
      * @param projectName project name
@@ -394,7 +394,7 @@ public Result queryProcessDefinitionById(@ApiIgnore @RequestAttribute(value = Co
     }
 
     /**
-     * query datail of process definition by name
+     * query detail of process definition by name
      *
      * @param loginUser login user
      * @param projectName project name
@@ -474,7 +474,7 @@ public Result queryProcessDefinitionListPaging(@ApiIgnore @RequestAttribute(valu
     }
 
     /**
-     * encapsulation treeview structure
+     * encapsulation tree view structure
      *
      * @param loginUser login user
      * @param projectName project name

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/SchedulerController.java
Patch:
@@ -252,7 +252,7 @@ public Result queryScheduleListPaging(@ApiIgnore @RequestAttribute(value = SESSI
      *
      * @param loginUser login user
      * @param projectName project name
-     * @param scheduleId scheule id
+     * @param scheduleId schedule id
      * @return delete result code
      */
     @ApiOperation(value = "deleteScheduleById", notes = "OFFLINE_SCHEDULE_NOTES")

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/TenantController.java
Patch:
@@ -142,11 +142,11 @@ public Result queryTenantlist(@ApiIgnore @RequestAttribute(value = Constants.SES
 
 
     /**
-     * udpate tenant
+     * update tenant
      *
      * @param loginUser login user
-     * @param id tennat id
-     * @param tenantCode tennat code
+     * @param id tenant id
+     * @param tenantCode tenant code
      * @param queueId queue id
      * @param description description
      * @return update result code

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/UsersController.java
Patch:
@@ -119,7 +119,7 @@ public Result createUser(@ApiIgnore @RequestAttribute(value = Constants.SESSION_
      *
      * @param loginUser login user
      * @param pageNo    page number
-     * @param searchVal search avlue
+     * @param searchVal search value
      * @param pageSize  page size
      * @return user list page
      */
@@ -156,7 +156,7 @@ public Result queryUserList(@ApiIgnore @RequestAttribute(value = Constants.SESSI
      * @param userName     user name
      * @param userPassword user password
      * @param email        email
-     * @param tenantId     tennat id
+     * @param tenantId     tenant id
      * @param phone        phone
      * @param queue        queue
      * @return update result code

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ExecutorServiceImpl.java
Patch:
@@ -106,7 +106,7 @@ public class ExecutorServiceImpl extends BaseServiceImpl implements ExecutorServ
      * @param processDefinitionId process Definition Id
      * @param cronTime cron time
      * @param commandType command type
-     * @param failureStrategy failuer strategy
+     * @param failureStrategy failure strategy
      * @param startNodeList start nodelist
      * @param taskDependType node dependency type
      * @param warningType warning type

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/SchedulerServiceImpl.java
Patch:
@@ -521,7 +521,7 @@ private boolean checkValid(Map<String, Object> result, boolean bool, Status stat
      *
      * @param loginUser login user
      * @param projectName project name
-     * @param scheduleId scheule id
+     * @param scheduleId schedule id
      * @return delete result code
      */
     @Override

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/TenantServiceImpl.java
Patch:
@@ -155,8 +155,8 @@ public Result queryTenantList(User loginUser, String searchVal, Integer pageNo,
      * updateProcessInstance tenant
      *
      * @param loginUser  login user
-     * @param id         tennat id
-     * @param tenantCode tennat code
+     * @param id         tenant id
+     * @param tenantCode tenant code
      * @param queueId    queue id
      * @param desc       description
      * @return update result code

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/UsersServiceImpl.java
Patch:
@@ -313,7 +313,7 @@ public int getUserIdByName(String name) {
      *
      * @param loginUser login user
      * @param pageNo page number
-     * @param searchVal search avlue
+     * @param searchVal search value
      * @param pageSize page size
      * @return user list page
      */
@@ -347,7 +347,7 @@ public Result queryUserList(User loginUser, String searchVal, Integer pageNo, In
      * @param userName user name
      * @param userPassword user password
      * @param email email
-     * @param tenantId tennat id
+     * @param tenantId tenant id
      * @param phone phone
      * @param queue queue
      * @return update result code

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/quartz/ProcessScheduleJob.java
Patch:
@@ -75,8 +75,8 @@ public void execute(JobExecutionContext context) throws JobExecutionException {
 
         // query schedule
         Schedule schedule = getProcessService().querySchedule(scheduleId);
-        if (schedule == null) {
-            logger.warn("process schedule does not exist in db，delete schedule job in quartz, projectId:{}, scheduleId:{}", projectId, scheduleId);
+        if (schedule == null || ReleaseState.OFFLINE == schedule.getReleaseState()) {
+            logger.warn("process schedule does not exist in db or process schedule offline，delete schedule job in quartz, projectId:{}, scheduleId:{}", projectId, scheduleId);
             deleteJob(projectId, scheduleId);
             return;
         }

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/quartz/ProcessScheduleJob.java
Patch:
@@ -93,7 +93,7 @@ public void execute(JobExecutionContext context) throws JobExecutionException {
         command.setCommandType(CommandType.SCHEDULER);
         command.setExecutorId(schedule.getUserId());
         command.setFailureStrategy(schedule.getFailureStrategy());
-        //command.setProcessDefinitionId(schedule.getProcessDefinitionCode()); TODO next pr
+        command.setProcessDefinitionCode(schedule.getProcessDefinitionCode());
         command.setScheduleTime(scheduledFireTime);
         command.setStartTime(fireTime);
         command.setWarningGroupId(schedule.getWarningGroupId());

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterBaseTaskExecThread.java
Patch:
@@ -191,7 +191,7 @@ protected TaskInstance submit() {
     }
 
     /**
-     * dispatcht task
+     * dispatch task
      *
      * @param taskInstance taskInstance
      * @return whether submit task success

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ExecutorServiceImpl.java
Patch:
@@ -549,7 +549,7 @@ private int createCommand(CommandType commandType, int processDefineId,
                     command.setCommandParam(JSONUtils.toJsonString(cmdParam));
                     return processService.createCommand(command);
                 } else if (runMode == RunMode.RUN_MODE_PARALLEL) {
-                    List<Schedule> schedules = processService.queryReleaseSchedulerListByProcessDefinitionId(processDefineId);
+                    List<Schedule> schedules = processService.queryReleaseSchedulerListByProcessDefinitionCode(processDefineId); // TODO: next pr change to code
                     List<Date> listDate = new LinkedList<>();
                     if (!CollectionUtils.isEmpty(schedules)) {
                         for (Schedule item : schedules) {

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterExecThread.java
Patch:
@@ -255,8 +255,8 @@ private void executeComplementProcess() throws Exception {
         processService.saveProcessInstance(processInstance);
 
         // get schedules
-        int processDefinitionId = processInstance.getProcessDefinition().getId();
-        List<Schedule> schedules = processService.queryReleaseSchedulerListByProcessDefinitionId(processDefinitionId);
+        List<Schedule> schedules = processService.queryReleaseSchedulerListByProcessDefinitionCode(
+                processInstance.getProcessDefinitionCode());
         List<Date> listDate = Lists.newLinkedList();
         if (!CollectionUtils.isEmpty(schedules)) {
             for (Schedule schedule : schedules) {

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/quartz/ProcessScheduleJob.java
Patch:
@@ -81,19 +81,19 @@ public void execute(JobExecutionContext context) throws JobExecutionException {
             return;
         }
 
-        ProcessDefinition processDefinition = getProcessService().findProcessDefineById(schedule.getProcessDefinitionId());
+        ProcessDefinition processDefinition = getProcessService().findProcessDefinitionByCode(schedule.getProcessDefinitionCode());
         // release state : online/offline
         ReleaseState releaseState = processDefinition.getReleaseState();
         if (releaseState == ReleaseState.OFFLINE) {
-            logger.warn("process definition does not exist in db or offline，need not to create command, projectId:{}, processId:{}", projectId, scheduleId);
+            logger.warn("process definition does not exist in db or offline，need not to create command, projectId:{}, processId:{}", projectId, processDefinition.getId());
             return;
         }
 
         Command command = new Command();
         command.setCommandType(CommandType.SCHEDULER);
         command.setExecutorId(schedule.getUserId());
         command.setFailureStrategy(schedule.getFailureStrategy());
-        command.setProcessDefinitionId(schedule.getProcessDefinitionId());
+        //command.setProcessDefinitionId(schedule.getProcessDefinitionCode()); TODO next pr
         command.setScheduleTime(scheduledFireTime);
         command.setStartTime(fireTime);
         command.setWarningGroupId(schedule.getWarningGroupId());

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/datasource/AbstractDatasourceProcessor.java
Patch:
@@ -30,7 +30,7 @@ public abstract class AbstractDatasourceProcessor implements DatasourceProcessor
 
     private static final Pattern DATABASE_PATTER = Pattern.compile("^[a-zA-Z0-9\\_\\-\\.]+$");
 
-    private static final Pattern PARAMS_PATTER = Pattern.compile("^[a-zA-Z0-9]+$");
+    private static final Pattern PARAMS_PATTER = Pattern.compile("^[a-zA-Z0-9\\-\\_\\/]+$");
 
     @Override
     public void checkDatasourceParam(BaseDataSourceParamDTO baseDataSourceParamDTO) {

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/queue/TaskPriorityQueueImpl.java
Patch:
@@ -25,8 +25,7 @@
 import org.springframework.stereotype.Service;
 
 /**
- * A singleton of a task queue implemented with zookeeper
- * tasks queue implementation
+ * A singleton of a task queue implemented using PriorityBlockingQueue
  */
 @Service
 public class TaskPriorityQueueImpl implements TaskPriorityQueue<TaskPriority> {

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProcessInstanceService.java
Patch:
@@ -104,13 +104,12 @@ Map<String, Object> queryProcessInstanceList(User loginUser, String projectName,
      * @param syncDefine sync define
      * @param flag flag
      * @param locations locations
-     * @param connects connects
      * @return update result code
      * @throws ParseException parse exception for json parse
      */
     Map<String, Object> updateProcessInstance(User loginUser, String projectName, Integer processInstanceId,
                                               String processInstanceJson, String scheduleTime, Boolean syncDefine,
-                                              Flag flag, String locations, String connects) throws ParseException;
+                                              Flag flag, String locations) throws ParseException;
 
     /**
      * query parent process instance detail info by sub process instance id

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/ProcessInstanceControllerTest.java
Patch:
@@ -87,7 +87,6 @@ public void testUpdateProcessInstance() throws Exception {
         paramsMap.add("scheduleTime", "2019-12-15 00:00:00");
         paramsMap.add("syncDefine", "false");
         paramsMap.add("locations", locations);
-        paramsMap.add("connects", "[]");
 
         MvcResult mvcResult = mockMvc.perform(post("/projects/{projectName}/instance/update", "cxc_1113")
                 .header("sessionId", sessionId)

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProcessDefinitionServiceTest.java
Patch:
@@ -832,7 +832,7 @@ public void testUpdateProcessDefinition() {
                 + "\"postTaskVersion\":1,\"conditionType\":0,\"conditionParams\":{}},{\"name\":\"\",\"preTaskCode\":123456789,"
                 + "\"preTaskVersion\":1,\"postTaskCode\":123451234,\"postTaskVersion\":1,\"conditionType\":0,\"conditionParams\":{}}]";
         Map<String, Object> updateResult = processDefinitionService.updateProcessDefinition(loginUser, projectCode, "test", 1,
-                "", "", "", "", 0, "root", taskRelationJson);
+                "", "", "", 0, "root", taskRelationJson);
 
         Assert.assertEquals(Status.DATA_IS_NOT_VALID, updateResult.get(Constants.STATUS));
     }

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/ProcessDefinitionLog.java
Patch:
@@ -61,7 +61,6 @@ public ProcessDefinitionLog(ProcessDefinition processDefinition) {
         this.setUserName(processDefinition.getUserName());
         this.setProjectName(processDefinition.getProjectName());
         this.setLocations(processDefinition.getLocations());
-        this.setConnects(processDefinition.getConnects());
         this.setScheduleReleaseState(processDefinition.getScheduleReleaseState());
         this.setTimeout(processDefinition.getTimeout());
         this.setTenantId(processDefinition.getTenantId());

File: dolphinscheduler-service/src/test/java/org/apache/dolphinscheduler/service/process/ProcessServiceTest.java
Patch:
@@ -351,8 +351,7 @@ public void testSaveProcessDefinition() {
         processDefinition.setVersion(1);
         processDefinition.setCode(11L);
         Assert.assertEquals(-1, processService.saveProcessDefinition(user, project, "name",
-                "desc", "locations", "connects", processData,
-                processDefinition, true));
+                "desc", "locations", processData, processDefinition, true));
     }
 
     @Test

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/DataAnalysisController.java
Patch:
@@ -63,7 +63,7 @@ public class DataAnalysisController extends BaseController {
      *
      * @param loginUser login user
      * @param startDate count start date
-     * @param endDate   count end date
+     * @param endDate count end date
      * @param projectCode project code
      * @return task instance count data
      */
@@ -91,7 +91,7 @@ public Result countTaskState(@ApiIgnore @RequestAttribute(value = Constants.SESS
      *
      * @param loginUser login user
      * @param startDate start date
-     * @param endDate   end date
+     * @param endDate end date
      * @param projectCode project code
      * @return process instance data
      */

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ExecutorController.java
Patch:
@@ -128,8 +128,8 @@ public Result startProcessInstance(@ApiIgnore @RequestAttribute(value = Constant
             startParamMap = JSONUtils.toMap(startParams);
         }
         Map<String, Object> result = execService.execProcessInstance(loginUser, projectCode, processDefinitionCode, scheduleTime, execType, failureStrategy,
-                startNodeList, taskDependType, warningType,
-                warningGroupId, runMode, processInstancePriority, workerGroup, timeout, startParamMap);
+            startNodeList, taskDependType, warningType,
+            warningGroupId, runMode, processInstancePriority, workerGroup, timeout, startParamMap);
         return returnDataList(result);
     }
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/UiPluginController.java
Patch:
@@ -75,7 +75,7 @@ public Result queryUiPluginsByType(@ApiIgnore @RequestAttribute(value = Constant
 
     @ApiOperation(value = "queryUiPluginDetailById", notes = "QUERY_UI_PLUGIN_DETAIL_BY_ID")
     @ApiImplicitParams({
-            @ApiImplicitParam(name = "pluginId", value = "PLUGIN_ID", required = true, dataType = "Int", example = "100"),
+        @ApiImplicitParam(name = "pluginId", value = "PLUGIN_ID", required = true, dataType = "Int", example = "100"),
     })
     @PostMapping(value = "/queryUiPluginDetailById")
     @ResponseStatus(HttpStatus.CREATED)

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/WorkFlowLineageController.java
Patch:
@@ -73,7 +73,7 @@ public Result<List<WorkFlowLineage>> queryWorkFlowLineageByName(@ApiIgnore @Requ
             Map<String, Object> result = workFlowLineageService.queryWorkFlowLineageByName(searchVal, projectCode);
             return returnDataList(result);
         } catch (Exception e) {
-            logger.error(QUERY_WORKFLOW_LINEAGE_ERROR.getMsg(),e);
+            logger.error(QUERY_WORKFLOW_LINEAGE_ERROR.getMsg(), e);
             return error(QUERY_WORKFLOW_LINEAGE_ERROR.getCode(), QUERY_WORKFLOW_LINEAGE_ERROR.getMsg());
         }
     }
@@ -98,7 +98,7 @@ public Result<Map<String, Object>> queryWorkFlowLineageByIds(@ApiIgnore @Request
             Map<String, Object> result = workFlowLineageService.queryWorkFlowLineageByIds(idsSet, projectCode);
             return returnDataList(result);
         } catch (Exception e) {
-            logger.error(QUERY_WORKFLOW_LINEAGE_ERROR.getMsg(),e);
+            logger.error(QUERY_WORKFLOW_LINEAGE_ERROR.getMsg(), e);
             return error(QUERY_WORKFLOW_LINEAGE_ERROR.getCode(), QUERY_WORKFLOW_LINEAGE_ERROR.getMsg());
         }
     }

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/ProcessDefinitionControllerTest.java
Patch:
@@ -349,12 +349,12 @@ public void testQueryProcessDefinitionListPaging() throws Exception {
     }
 
     @Test
-    public void testBatchExportProcessDefinitionByIds() throws Exception {
+    public void testBatchExportProcessDefinitionByCodes() {
         String processDefinitionIds = "1,2";
         long projectCode = 1L;
         HttpServletResponse response = new MockHttpServletResponse();
-        Mockito.doNothing().when(this.processDefinitionService).batchExportProcessDefinitionByIds(user, projectCode, processDefinitionIds, response);
-        processDefinitionController.batchExportProcessDefinitionByIds(user, projectCode, processDefinitionIds, response);
+        Mockito.doNothing().when(this.processDefinitionService).batchExportProcessDefinitionByCodes(user, projectCode, processDefinitionIds, response);
+        processDefinitionController.batchExportProcessDefinitionByCodes(user, projectCode, processDefinitionIds, response);
     }
 
     @Test

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/DagData.java
Patch:
@@ -45,6 +45,9 @@ public DagData(ProcessDefinition processDefinition, List<ProcessTaskRelationLog>
         this.taskDefinitionList = taskDefinitionList;
     }
 
+    public DagData() {
+    }
+
     public ProcessDefinition getProcessDefinition() {
         return processDefinition;
     }

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/ProjectMapper.java
Patch:
@@ -36,7 +36,7 @@ public interface ProjectMapper extends BaseMapper<Project> {
      * @param projectCode projectCode
      * @return project
      */
-    Project queryByCode(@Param("projectCode") Long projectCode);
+    Project queryByCode(@Param("projectCode") long projectCode);
 
     /**
      * TODO: delete
@@ -51,7 +51,7 @@ public interface ProjectMapper extends BaseMapper<Project> {
      * @param projectCode projectCode
      * @return project
      */
-    Project queryDetailByCode(@Param("projectCode") Long projectCode);
+    Project queryDetailByCode(@Param("projectCode") long projectCode);
 
     /**
      * query project by name

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/TaskDefinitionLogMapper.java
Patch:
@@ -39,7 +39,7 @@ public interface TaskDefinitionLogMapper extends BaseMapper<TaskDefinitionLog> {
      * @param name name
      * @return task definition log list
      */
-    List<TaskDefinitionLog> queryByDefinitionName(@Param("projectCode") Long projectCode,
+    List<TaskDefinitionLog> queryByDefinitionName(@Param("projectCode") long projectCode,
                                                   @Param("taskDefinitionName") String name);
 
     /**

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessService.java
Patch:
@@ -2193,7 +2193,7 @@ public String getResourceIds(TaskDefinition taskDefinition) {
     public int saveProcessDefine(User operator, ProcessDefinition processDefinition, Boolean isFromProcessDefine) {
         ProcessDefinitionLog processDefinitionLog = new ProcessDefinitionLog(processDefinition);
         Integer version = processDefineLogMapper.queryMaxVersionForDefinition(processDefinition.getCode());
-        int insertVersion = version == null || version == 0 ? 1 : version + 1;
+        int insertVersion = version == null || version == 0 ? Constants.VERSION_FIRST : version + 1;
         processDefinitionLog.setVersion(insertVersion);
         processDefinitionLog.setReleaseState(isFromProcessDefine ? ReleaseState.OFFLINE : ReleaseState.ONLINE);
         processDefinitionLog.setOperator(operator.getId());

File: dolphinscheduler-service/src/test/java/org/apache/dolphinscheduler/service/process/ProcessServiceTest.java
Patch:
@@ -359,6 +359,7 @@ public void testSaveProcessDefinition() {
     public void testSwitchVersion() {
         ProcessDefinition processDefinition = new ProcessDefinition();
         processDefinition.setCode(1L);
+        processDefinition.setProjectCode(1L);
         processDefinition.setId(123);
         processDefinition.setName("test");
         processDefinition.setVersion(1);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/DataAnalysisService.java
Patch:
@@ -61,12 +61,12 @@ public interface DataAnalysisService {
      * statistical command status data
      *
      * @param loginUser login user
-     * @param projectId project id
+     * @param projectCode project code
      * @param startDate start date
      * @param endDate end date
      * @return command state count data
      */
-    Map<String, Object> countCommandState(User loginUser, int projectId, String startDate, String endDate);
+    Map<String, Object> countCommandState(User loginUser, long projectCode, String startDate, String endDate);
 
     /**
      * count queue state

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/DataAnalysisControllerTest.java
Patch:
@@ -110,7 +110,7 @@ public void testCountDefinitionByUser() throws Exception {
 
     @Test
     public void testCountCommandState() throws Exception {
-        PowerMockito.when(projectMapper.selectById(Mockito.any())).thenReturn(getProject("test"));
+        PowerMockito.when(projectMapper.queryByCode(Mockito.any())).thenReturn(getProject("test"));
 
         MultiValueMap<String, String> paramsMap = new LinkedMultiValueMap<>();
         paramsMap.add("startDate","2019-12-01 00:00:00");

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/DataAnalysisService.java
Patch:
@@ -52,10 +52,10 @@ public interface DataAnalysisService {
      * statistics the process definition quantities of certain person
      *
      * @param loginUser login user
-     * @param projectId project id
+     * @param projectCode project code
      * @return definition count data
      */
-    Map<String, Object> countDefinitionByUser(User loginUser, int projectId);
+    Map<String, Object> countDefinitionByUser(User loginUser, long projectCode);
 
     /**
      * statistical command status data

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/DataAnalysisControllerTest.java
Patch:
@@ -92,7 +92,7 @@ public void testCountProcessInstanceState() throws Exception {
 
     @Test
     public void testCountDefinitionByUser() throws Exception {
-        PowerMockito.when(projectMapper.selectById(Mockito.any())).thenReturn(getProject("test"));
+        PowerMockito.when(projectMapper.queryByCode(Mockito.any())).thenReturn(getProject("test"));
 
         MultiValueMap<String, String> paramsMap = new LinkedMultiValueMap<>();
         paramsMap.add("projectId","16");

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/WorkFlowLineageService.java
Patch:
@@ -25,8 +25,8 @@
  */
 public interface WorkFlowLineageService {
 
-    Map<String, Object> queryWorkFlowLineageByName(String workFlowName, int projectId);
+    Map<String, Object> queryWorkFlowLineageByName(String workFlowName, long projectCode);
 
-    Map<String, Object> queryWorkFlowLineageByIds(Set<Integer> ids,int projectId);
+    Map<String, Object> queryWorkFlowLineageByIds(Set<Integer> ids, long projectCode);
 
 }

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/datasource/AbstractDatasourceProcessor.java
Patch:
@@ -30,7 +30,7 @@ public abstract class AbstractDatasourceProcessor implements DatasourceProcessor
 
     private static final Pattern DATABASE_PATTER = Pattern.compile("^[a-zA-Z0-9\\_\\-\\.]+$");
 
-    private static final Pattern PARAMS_PATTER = Pattern.compile("^[a-zA-Z0-9]+$");
+    private static final Pattern PARAMS_PATTER = Pattern.compile("^[a-zA-Z0-9\\-\\_\\/]+$");
 
     @Override
     public void checkDatasourceParam(BaseDataSourceParamDTO baseDataSourceParamDTO) {

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java
Patch:
@@ -270,7 +270,7 @@ public enum Status {
     PROCESS_TASK_RELATION_EXIST(50034, "process task relation is already exist, processCode:[{0}]", "工作流任务关系已存在, processCode:[{0}]"),
     PROCESS_DAG_IS_EMPTY(50035, "process dag can not be empty", "工作流dag不能为空"),
     CHECK_PROCESS_TASK_RELATION_ERROR(50036, "check process task relation error", "工作流任务关系参数错误"),
-    CREATE_TASK_DEFINITION(50037, "create task definition", "创建任务错误"),
+    CREATE_TASK_DEFINITION_ERROR(50037, "create task definition error", "创建任务错误"),
     UPDATE_TASK_DEFINITION_ERROR(50038, "update task definition error", "更新任务定义错误"),
     QUERY_TASK_DEFINITION_VERSIONS_ERROR(50039, "query task definition versions error", "查询任务历史版本信息出错"),
     SWITCH_TASK_DEFINITION_VERSION_ERROR(50040, "Switch task definition version error", "切换任务版本出错"),

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/AccessTokenController.java
Patch:
@@ -116,8 +116,8 @@ public Result generateToken(@RequestAttribute(value = Constants.SESSION_USER) Us
     @ApiOperation(value = "queryAccessTokenList", notes = "QUERY_ACCESS_TOKEN_LIST_NOTES")
     @ApiImplicitParams({
             @ApiImplicitParam(name = "searchVal", value = "SEARCH_VAL", dataType = "String"),
-            @ApiImplicitParam(name = "pageNo", value = "PAGE_NO", dataType = "Int", example = "1"),
-            @ApiImplicitParam(name = "pageSize", value = "PAGE_SIZE", dataType = "Int", example = "20")
+            @ApiImplicitParam(name = "pageNo", value = "PAGE_NO", required = true, dataType = "Int", example = "1"),
+            @ApiImplicitParam(name = "pageSize", value = "PAGE_SIZE", required = true, dataType = "Int", example = "20")
     })
     @GetMapping(value = "/list-paging")
     @ResponseStatus(HttpStatus.OK)

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/QueueController.java
Patch:
@@ -89,8 +89,8 @@ public Result queryList(@ApiIgnore @RequestAttribute(value = Constants.SESSION_U
     @ApiOperation(value = "queryQueueListPaging", notes = "QUERY_QUEUE_LIST_PAGING_NOTES")
     @ApiImplicitParams({
             @ApiImplicitParam(name = "searchVal", value = "SEARCH_VAL", dataType = "String"),
-            @ApiImplicitParam(name = "pageNo", value = "PAGE_NO", dataType = "Int", example = "1"),
-            @ApiImplicitParam(name = "pageSize", value = "PAGE_SIZE", dataType = "Int", example = "20")
+            @ApiImplicitParam(name = "pageNo", value = "PAGE_NO", required = true, dataType = "Int", example = "1"),
+            @ApiImplicitParam(name = "pageSize", value = "PAGE_SIZE", required = true, dataType = "Int", example = "20")
     })
     @GetMapping(value = "/list-paging")
     @ResponseStatus(HttpStatus.OK)

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/TaskInstanceController.java
Patch:
@@ -89,8 +89,8 @@ public class TaskInstanceController extends BaseController {
             @ApiImplicitParam(name = "host", value = "HOST", type = "String"),
             @ApiImplicitParam(name = "startDate", value = "START_DATE", type = "String"),
             @ApiImplicitParam(name = "endDate", value = "END_DATE", type = "String"),
-            @ApiImplicitParam(name = "pageNo", value = "PAGE_NO", dataType = "Int", example = "1"),
-            @ApiImplicitParam(name = "pageSize", value = "PAGE_SIZE", dataType = "Int", example = "20")
+            @ApiImplicitParam(name = "pageNo", value = "PAGE_NO", required = true, dataType = "Int", example = "1"),
+            @ApiImplicitParam(name = "pageSize", value = "PAGE_SIZE", required = true, dataType = "Int", example = "20")
     })
     @GetMapping("/list-paging")
     @ResponseStatus(HttpStatus.OK)

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/UiPluginController.java
Patch:
@@ -75,7 +75,7 @@ public Result queryUiPluginsByType(@ApiIgnore @RequestAttribute(value = Constant
 
     @ApiOperation(value = "queryUiPluginDetailById", notes = "QUERY_UI_PLUGIN_DETAIL_BY_ID")
     @ApiImplicitParams({
-        @ApiImplicitParam(name = "id", value = "id", required = true, dataType = "PluginType"),
+            @ApiImplicitParam(name = "pluginId", value = "PLUGIN_ID", required = true, dataType = "Int", example = "100"),
     })
     @PostMapping(value = "/queryUiPluginDetailById")
     @ResponseStatus(HttpStatus.CREATED)

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/WorkFlowLineageController.java
Patch:
@@ -45,6 +45,7 @@
 import org.springframework.web.bind.annotation.RestController;
 
 import io.swagger.annotations.Api;
+import io.swagger.annotations.ApiOperation;
 import io.swagger.annotations.ApiParam;
 import springfox.documentation.annotations.ApiIgnore;
 
@@ -60,6 +61,7 @@ public class WorkFlowLineageController extends BaseController {
     @Autowired
     private WorkFlowLineageService workFlowLineageService;
 
+    @ApiOperation(value = "queryWorkFlowLineageByName", notes = "QUERY_WORKFLOW_LINEAGE_BY_NAME_NOTES")
     @GetMapping(value = "/list-name")
     @ResponseStatus(HttpStatus.OK)
     @AccessLogAnnotation(ignoreRequestArgs = "loginUser")
@@ -76,6 +78,7 @@ public Result<List<WorkFlowLineage>> queryWorkFlowLineageByName(@ApiIgnore @Requ
         }
     }
 
+    @ApiOperation(value = "queryWorkFlowLineageByIds", notes = "QUERY_WORKFLOW_LINEAGE_BY_IDS_NOTES")
     @GetMapping(value = "/list-ids")
     @ResponseStatus(HttpStatus.OK)
     @AccessLogAnnotation(ignoreRequestArgs = "loginUser")

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/WorkerGroupController.java
Patch:
@@ -99,8 +99,8 @@ public Result saveWorkerGroup(@ApiIgnore @RequestAttribute(value = Constants.SES
      */
     @ApiOperation(value = "queryAllWorkerGroupsPaging", notes = "QUERY_WORKER_GROUP_PAGING_NOTES")
     @ApiImplicitParams({
-            @ApiImplicitParam(name = "pageNo", value = "PAGE_NO", dataType = "Int", example = "1"),
-            @ApiImplicitParam(name = "pageSize", value = "PAGE_SIZE", dataType = "Int", example = "20"),
+            @ApiImplicitParam(name = "pageNo", value = "PAGE_NO", required = true, dataType = "Int", example = "1"),
+            @ApiImplicitParam(name = "pageSize", value = "PAGE_SIZE", required = true, dataType = "Int", example = "20"),
             @ApiImplicitParam(name = "searchVal", value = "SEARCH_VAL", dataType = "String")
     })
     @GetMapping(value = "/list-paging")

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/MonitorControllerTest.java
Patch:
@@ -56,7 +56,6 @@ public void testListMaster() throws Exception {
         logger.info(mvcResult.getResponse().getContentAsString());
     }
 
-
     @Test
     public void testListWorker() throws Exception {
 
@@ -74,7 +73,6 @@ public void testListWorker() throws Exception {
         logger.info(mvcResult.getResponse().getContentAsString());
     }
 
-
     @Test
     public void testQueryDatabaseState() throws Exception {
         MvcResult mvcResult = mockMvc.perform(get("/monitor/database")
@@ -91,7 +89,6 @@ public void testQueryDatabaseState() throws Exception {
         logger.info(mvcResult.getResponse().getContentAsString());
     }
 
-
     @Test
     public void testQueryZookeeperState() throws Exception {
         MvcResult mvcResult = mockMvc.perform(get("/monitor/zookeeper/list")

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/CommandType.java
Patch:
@@ -50,7 +50,7 @@ public enum CommandType {
     REPEAT_RUNNING(7, "repeat running a process"),
     PAUSE(8, "pause a process"),
     STOP(9, "stop a process"),
-    RECOVER_WAITTING_THREAD(10, "recover waiting thread");
+    RECOVER_WAITING_THREAD(10, "recover waiting thread");
 
     CommandType(int code, String descp){
         this.code = code;

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/JSONUtils.java
Patch:
@@ -31,12 +31,12 @@
 import java.util.Map;
 import java.util.TimeZone;
 
-import com.fasterxml.jackson.core.JsonProcessingException;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import com.fasterxml.jackson.core.JsonGenerator;
 import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.core.JsonProcessingException;
 import com.fasterxml.jackson.core.type.TypeReference;
 import com.fasterxml.jackson.databind.DeserializationContext;
 import com.fasterxml.jackson.databind.JsonDeserializer;

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/LoggerUtils.java
Patch:
@@ -144,4 +144,5 @@ public static void logInfo(Optional<Logger> optionalLogger
             , String info) {
         optionalLogger.ifPresent((Logger logger) -> logger.info(info));
     }
+
 }
\ No newline at end of file

File: dolphinscheduler-common/src/test/java/org/apache/dolphinscheduler/common/enums/ExecutionStatusTest.java
Patch:
@@ -26,7 +26,7 @@ public class ExecutionStatusTest extends TestCase {
 
     public void testTypeIsRunning() {
         assertTrue(ExecutionStatus.RUNNING_EXECUTION.typeIsRunning());
-        assertTrue(ExecutionStatus.WAITTING_DEPEND.typeIsRunning());
+        assertTrue(ExecutionStatus.WAITING_DEPEND.typeIsRunning());
         assertTrue(ExecutionStatus.DELAY_EXECUTION.typeIsRunning());
     }
 }
\ No newline at end of file

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/registry/MasterRegistryClient.java
Patch:
@@ -76,7 +76,7 @@ public class MasterRegistryClient {
      */
     @Autowired
     private ProcessService processService;
-    @Autowired
+
     private RegistryClient registryClient;
 
     /**
@@ -327,8 +327,8 @@ public void releaseLock() {
     @PostConstruct
     public void init() {
         this.startTime = DateUtils.dateToString(new Date());
+        this.registryClient = RegistryClient.getInstance();
         this.heartBeatExecutor = Executors.newSingleThreadScheduledExecutor(new NamedThreadFactory("HeartBeatExecutor"));
-        registryClient.init();
     }
 
     /**

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/registry/ServerNodeManager.java
Patch:
@@ -100,8 +100,7 @@ public class ServerNodeManager implements InitializingBean {
     /**
      * zk client
      */
-    @Autowired
-    private RegistryClient registryClient;
+    private RegistryClient registryClient = RegistryClient.getInstance();
 
     /**
      * worker group mapper
@@ -378,7 +377,6 @@ private void syncWorkerNodeInfo(Map<String, String> newWorkerNodeInfo) {
     @PreDestroy
     public void destroy() {
         executorService.shutdownNow();
-        registryClient.close();
     }
 
 }

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterTaskExecThread.java
Patch:
@@ -66,7 +66,7 @@ public MasterTaskExecThread(TaskInstance taskInstance) {
         super(taskInstance);
         this.taskInstanceCacheManager = SpringApplicationContext.getBean(TaskInstanceCacheManagerImpl.class);
         this.nettyExecutorManager = SpringApplicationContext.getBean(NettyExecutorManager.class);
-        this.registryClient = SpringApplicationContext.getBean(RegistryClient.class);
+        this.registryClient = RegistryClient.getInstance();
     }
 
     /**

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/utils/DependentExecute.java
Patch:
@@ -231,7 +231,7 @@ private DependResult getDependResultByProcessStateWhenTaskNull(ExecutionStatus s
 
         if (state.typeIsRunning()
                 || state == ExecutionStatus.SUBMITTED_SUCCESS
-                || state == ExecutionStatus.WAITTING_THREAD) {
+                || state == ExecutionStatus.WAITING_THREAD) {
             return DependResult.WAITING;
         } else {
             return DependResult.FAILED;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/PythonCommandExecutor.java
Patch:
@@ -32,6 +32,7 @@
 import java.nio.file.Paths;
 import java.util.Collections;
 import java.util.List;
+import java.util.concurrent.LinkedBlockingQueue;
 import java.util.function.Consumer;
 import java.util.regex.Pattern;
 
@@ -60,7 +61,7 @@ public class PythonCommandExecutor extends AbstractCommandExecutor {
      * @param taskExecutionContext       taskExecutionContext
      * @param logger        logger
      */
-    public PythonCommandExecutor(Consumer<List<String>> logHandler,
+    public PythonCommandExecutor(Consumer<LinkedBlockingQueue<String>> logHandler,
                                  TaskExecutionContext taskExecutionContext,
                                  Logger logger) {
         super(logHandler,taskExecutionContext,logger);

File: dolphinscheduler-service/src/test/java/org/apache/dolphinscheduler/service/process/ProcessServiceTest.java
Patch:
@@ -206,7 +206,7 @@ public void testCreateRecoveryWaitingThreadCommand() {
         processService.createRecoveryWaitingThreadCommand(null, subProcessInstance);
 
         Command recoverCommand = new Command();
-        recoverCommand.setCommandType(CommandType.RECOVER_WAITTING_THREAD);
+        recoverCommand.setCommandType(CommandType.RECOVER_WAITING_THREAD);
         processService.createRecoveryWaitingThreadCommand(recoverCommand, subProcessInstance);
 
         Command repeatRunningCommand = new Command();

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/MonitorControllerTest.java
Patch:
@@ -55,7 +55,6 @@ public void testListMaster() throws Exception {
         logger.info(mvcResult.getResponse().getContentAsString());
     }
 
-
     @Test
     public void testListWorker() throws Exception {
 
@@ -72,7 +71,6 @@ public void testListWorker() throws Exception {
         logger.info(mvcResult.getResponse().getContentAsString());
     }
 
-
     @Test
     public void testQueryDatabaseState() throws Exception {
         MvcResult mvcResult = mockMvc.perform(get("/monitor/database")
@@ -88,7 +86,6 @@ public void testQueryDatabaseState() throws Exception {
         logger.info(mvcResult.getResponse().getContentAsString());
     }
 
-
     @Test
     public void testQueryZookeeperState() throws Exception {
         MvcResult mvcResult = mockMvc.perform(get("/monitor/zookeeper/list")

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/registry/MasterRegistryClient.java
Patch:
@@ -76,7 +76,7 @@ public class MasterRegistryClient {
      */
     @Autowired
     private ProcessService processService;
-    @Autowired
+
     private RegistryClient registryClient;
 
     /**
@@ -327,8 +327,8 @@ public void releaseLock() {
     @PostConstruct
     public void init() {
         this.startTime = DateUtils.dateToString(new Date());
+        this.registryClient = RegistryClient.getInstance();
         this.heartBeatExecutor = Executors.newSingleThreadScheduledExecutor(new NamedThreadFactory("HeartBeatExecutor"));
-        registryClient.init();
     }
 
     /**

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/registry/ServerNodeManager.java
Patch:
@@ -100,8 +100,7 @@ public class ServerNodeManager implements InitializingBean {
     /**
      * zk client
      */
-    @Autowired
-    private RegistryClient registryClient;
+    private RegistryClient registryClient = RegistryClient.getInstance();
 
     /**
      * worker group mapper

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterTaskExecThread.java
Patch:
@@ -66,7 +66,7 @@ public MasterTaskExecThread(TaskInstance taskInstance) {
         super(taskInstance);
         this.taskInstanceCacheManager = SpringApplicationContext.getBean(TaskInstanceCacheManagerImpl.class);
         this.nettyExecutorManager = SpringApplicationContext.getBean(NettyExecutorManager.class);
-        this.registryClient = SpringApplicationContext.getBean(RegistryClient.class);
+        this.registryClient = RegistryClient.getInstance();
     }
 
     /**

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/registry/ServerNodeManager.java
Patch:
@@ -378,7 +378,6 @@ private void syncWorkerNodeInfo(Map<String, String> newWorkerNodeInfo) {
     @PreDestroy
     public void destroy() {
         executorService.shutdownNow();
-        registryClient.close();
     }
 
 }

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/processor/TaskCallbackService.java
Patch:
@@ -134,7 +134,7 @@ private NettyRemoteChannel getRemoteChannel(int taskInstanceId) {
             ThreadUtils.sleep(pause(ntries++));
         }
 
-        throw new IllegalStateException(String.format("all available master nodes : %s are not reachable for task: {}", masterNodes, taskInstanceId));
+        throw new IllegalStateException(String.format("all available master nodes : %s are not reachable for task: %s", masterNodes, taskInstanceId));
     }
 
     public int pause(int ntries) {

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProcessDefinitionController.java
Patch:
@@ -376,10 +376,10 @@ public Result releaseProcessDefinition(@ApiIgnore @RequestAttribute(value = Cons
      *
      * @param loginUser login user
      * @param projectCode project code
-     * @param code process definition id
+     * @param code process definition code
      * @return process definition detail
      */
-    @ApiOperation(value = "queryProcessDefinitionByCode", notes = "QUERY_PROCESS_DEFINITION_BY_ID_NOTES")
+    @ApiOperation(value = "queryProcessDefinitionByCode", notes = "QUERY_PROCESS_DEFINITION_BY_CODE_NOTES")
     @ApiImplicitParams({
             @ApiImplicitParam(name = "code", value = "PROCESS_DEFINITION_CODE", required = true, dataType = "Long", example = "123456789")
     })
@@ -649,7 +649,7 @@ public void batchExportProcessDefinitionByIds(@ApiIgnore @RequestAttribute(value
      * @param projectCode project code
      * @return process definition list
      */
-    @ApiOperation(value = "queryAllByProjectCode", notes = "QUERY_PROCESS_DEFINITION_All_BY_PROJECT_ID_NOTES")
+    @ApiOperation(value = "queryAllByProjectCode", notes = "QUERY_PROCESS_DEFINITION_All_BY_PROJECT_CODE_NOTES")
     @GetMapping(value = "/queryAllByProjectCode")
     @ResponseStatus(HttpStatus.OK)
     @ApiException(QUERY_PROCESS_DEFINITION_LIST)

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/AbstractControllerTest.java
Patch:
@@ -94,10 +94,9 @@ private void createSession() {
         Assert.assertTrue(StringUtils.isNotEmpty(session));
     }
 
-    public Map<String, Object> successResult() {
+    public Map<String, Object> success() {
         Map<String, Object> serviceResult = new HashMap<>();
         putMsg(serviceResult, Status.SUCCESS);
-        serviceResult.put(Constants.DATA_LIST, "{}");
         return serviceResult;
     }
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/SchedulerService.java
Patch:
@@ -83,13 +83,13 @@ Map<String, Object> updateSchedule(User loginUser,
      * set schedule online or offline
      *
      * @param loginUser login user
-     * @param projectName project name
+     * @param projectCode project code
      * @param id scheduler id
      * @param scheduleStatus schedule status
      * @return publish result code
      */
     Map<String, Object> setScheduleState(User loginUser,
-                                         String projectName,
+                                         long projectCode,
                                          Integer id,
                                          ReleaseState scheduleStatus);
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/SchedulerServiceImpl.java
Patch:
@@ -293,20 +293,20 @@ public Map<String, Object> updateSchedule(User loginUser,
      * set schedule online or offline
      *
      * @param loginUser login user
-     * @param projectName project name
+     * @param projectCode project code
      * @param id scheduler id
      * @param scheduleStatus schedule status
      * @return publish result code
      */
     @Override
     @Transactional(rollbackFor = RuntimeException.class)
     public Map<String, Object> setScheduleState(User loginUser,
-                                                String projectName,
+                                                long projectCode,
                                                 Integer id,
                                                 ReleaseState scheduleStatus) {
         Map<String, Object> result = new HashMap<>();
 
-        Project project = projectMapper.queryByName(projectName);
+        Project project = projectMapper.queryByCode(projectCode);
         // check project auth
         boolean hasProjectAndPerm = projectService.hasProjectAndPerm(loginUser, project, result);
         if (!hasProjectAndPerm) {

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/AccessTokenController.java
Patch:
@@ -116,8 +116,8 @@ public Result generateToken(@RequestAttribute(value = Constants.SESSION_USER) Us
     @ApiOperation(value = "queryAccessTokenList", notes = "QUERY_ACCESS_TOKEN_LIST_NOTES")
     @ApiImplicitParams({
             @ApiImplicitParam(name = "searchVal", value = "SEARCH_VAL", dataType = "String"),
-            @ApiImplicitParam(name = "pageNo", value = "PAGE_NO", dataType = "Int", example = "1"),
-            @ApiImplicitParam(name = "pageSize", value = "PAGE_SIZE", dataType = "Int", example = "20")
+            @ApiImplicitParam(name = "pageNo", value = "PAGE_NO", required = true, dataType = "Int", example = "1"),
+            @ApiImplicitParam(name = "pageSize", value = "PAGE_SIZE", required = true, dataType = "Int", example = "20")
     })
     @GetMapping(value = "/list-paging")
     @ResponseStatus(HttpStatus.OK)

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/QueueController.java
Patch:
@@ -89,8 +89,8 @@ public Result queryList(@ApiIgnore @RequestAttribute(value = Constants.SESSION_U
     @ApiOperation(value = "queryQueueListPaging", notes = "QUERY_QUEUE_LIST_PAGING_NOTES")
     @ApiImplicitParams({
             @ApiImplicitParam(name = "searchVal", value = "SEARCH_VAL", dataType = "String"),
-            @ApiImplicitParam(name = "pageNo", value = "PAGE_NO", dataType = "Int", example = "1"),
-            @ApiImplicitParam(name = "pageSize", value = "PAGE_SIZE", dataType = "Int", example = "20")
+            @ApiImplicitParam(name = "pageNo", value = "PAGE_NO", required = true, dataType = "Int", example = "1"),
+            @ApiImplicitParam(name = "pageSize", value = "PAGE_SIZE", required = true, dataType = "Int", example = "20")
     })
     @GetMapping(value = "/list-paging")
     @ResponseStatus(HttpStatus.OK)

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/TaskInstanceController.java
Patch:
@@ -89,8 +89,8 @@ public class TaskInstanceController extends BaseController {
             @ApiImplicitParam(name = "host", value = "HOST", type = "String"),
             @ApiImplicitParam(name = "startDate", value = "START_DATE", type = "String"),
             @ApiImplicitParam(name = "endDate", value = "END_DATE", type = "String"),
-            @ApiImplicitParam(name = "pageNo", value = "PAGE_NO", dataType = "Int", example = "1"),
-            @ApiImplicitParam(name = "pageSize", value = "PAGE_SIZE", dataType = "Int", example = "20")
+            @ApiImplicitParam(name = "pageNo", value = "PAGE_NO", required = true, dataType = "Int", example = "1"),
+            @ApiImplicitParam(name = "pageSize", value = "PAGE_SIZE", required = true, dataType = "Int", example = "20")
     })
     @GetMapping("/list-paging")
     @ResponseStatus(HttpStatus.OK)

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/UiPluginController.java
Patch:
@@ -75,7 +75,7 @@ public Result queryUiPluginsByType(@ApiIgnore @RequestAttribute(value = Constant
 
     @ApiOperation(value = "queryUiPluginDetailById", notes = "QUERY_UI_PLUGIN_DETAIL_BY_ID")
     @ApiImplicitParams({
-        @ApiImplicitParam(name = "id", value = "id", required = true, dataType = "PluginType"),
+            @ApiImplicitParam(name = "pluginId", value = "PLUGIN_ID", required = true, dataType = "Int", example = "100"),
     })
     @PostMapping(value = "/queryUiPluginDetailById")
     @ResponseStatus(HttpStatus.CREATED)

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/WorkFlowLineageController.java
Patch:
@@ -45,6 +45,7 @@
 import org.springframework.web.bind.annotation.RestController;
 
 import io.swagger.annotations.Api;
+import io.swagger.annotations.ApiOperation;
 import io.swagger.annotations.ApiParam;
 import springfox.documentation.annotations.ApiIgnore;
 
@@ -60,6 +61,7 @@ public class WorkFlowLineageController extends BaseController {
     @Autowired
     private WorkFlowLineageService workFlowLineageService;
 
+    @ApiOperation(value = "queryWorkFlowLineageByName", notes = "QUERY_WORKFLOW_LINEAGE_BY_NAME_NOTES")
     @GetMapping(value = "/list-name")
     @ResponseStatus(HttpStatus.OK)
     @AccessLogAnnotation(ignoreRequestArgs = "loginUser")
@@ -76,6 +78,7 @@ public Result<List<WorkFlowLineage>> queryWorkFlowLineageByName(@ApiIgnore @Requ
         }
     }
 
+    @ApiOperation(value = "queryWorkFlowLineageByIds", notes = "QUERY_WORKFLOW_LINEAGE_BY_IDS_NOTES")
     @GetMapping(value = "/list-ids")
     @ResponseStatus(HttpStatus.OK)
     @AccessLogAnnotation(ignoreRequestArgs = "loginUser")

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/WorkerGroupController.java
Patch:
@@ -99,8 +99,8 @@ public Result saveWorkerGroup(@ApiIgnore @RequestAttribute(value = Constants.SES
      */
     @ApiOperation(value = "queryAllWorkerGroupsPaging", notes = "QUERY_WORKER_GROUP_PAGING_NOTES")
     @ApiImplicitParams({
-            @ApiImplicitParam(name = "pageNo", value = "PAGE_NO", dataType = "Int", example = "1"),
-            @ApiImplicitParam(name = "pageSize", value = "PAGE_SIZE", dataType = "Int", example = "20"),
+            @ApiImplicitParam(name = "pageNo", value = "PAGE_NO", required = true, dataType = "Int", example = "1"),
+            @ApiImplicitParam(name = "pageSize", value = "PAGE_SIZE", required = true, dataType = "Int", example = "20"),
             @ApiImplicitParam(name = "searchVal", value = "SEARCH_VAL", dataType = "String")
     })
     @GetMapping(value = "/list-paging")

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProjectServiceImpl.java
Patch:
@@ -140,6 +140,7 @@ public Map<String, Object> queryByCode(User loginUser, Long projectCode) {
 
     /**
      * check project and authorization
+     * // TODO projectCode will be instead of projectName
      *
      * @param loginUser login user
      * @param project project

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/exceptions/ApiExceptionHandlerTest.java
Patch:
@@ -46,9 +46,9 @@ public void exceptionHandler() throws NoSuchMethodException {
     public void exceptionHandlerRuntime() throws NoSuchMethodException {
         ApiExceptionHandler handler = new ApiExceptionHandler();
         ProcessDefinitionController controller = new ProcessDefinitionController();
-        Method method = controller.getClass().getMethod("batchExportProcessDefinitionByIds", User.class, String.class, String.class, HttpServletResponse.class);
+        Method method = controller.getClass().getMethod("queryAllProcessDefinitionByProjectCode", User.class, long.class);
         HandlerMethod hm = new HandlerMethod(controller, method);
         Result result = handler.exceptionHandler(new RuntimeException("test exception"), hm);
-        Assert.assertEquals(Status.INTERNAL_SERVER_ERROR_ARGS.getCode(),result.getCode().intValue());
+        Assert.assertEquals(Status.QUERY_PROCESS_DEFINITION_LIST.getCode(),result.getCode().intValue());
     }
 }
\ No newline at end of file

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java
Patch:
@@ -74,7 +74,7 @@ public enum Status {
     LIST_WORKERS_ERROR(10044, "list workers error", "查询worker列表错误"),
     LIST_MASTERS_ERROR(10045, "list masters error", "查询master列表错误"),
     UPDATE_PROJECT_ERROR(10046, "update project error", "更新项目信息错误"),
-    QUERY_PROJECT_DETAILS_BY_ID_ERROR(10047, "query project details by id error", "查询项目详细信息错误"),
+    QUERY_PROJECT_DETAILS_BY_CODE_ERROR(10047, "query project details by code error", "查询项目详细信息错误"),
     CREATE_PROJECT_ERROR(10048, "create project error", "创建项目错误"),
     LOGIN_USER_QUERY_PROJECT_LIST_PAGING_ERROR(10049, "login user query project list paging error", "分页查询项目列表错误"),
     DELETE_PROJECT_ERROR(10050, "delete project error", "删除项目错误"),
@@ -189,7 +189,7 @@ public enum Status {
     DELETE_PROCESS_DEFINITION_VERSION_ERROR(10156, "delete process definition version error", "删除工作流历史版本出错"),
 
     QUERY_USER_CREATED_PROJECT_ERROR(10157, "query user created project error error", "查询用户创建的项目错误"),
-    PROCESS_DEFINITION_IDS_IS_EMPTY(10158, "process definition ids is empty", "工作流IDS不能为空"),
+    PROCESS_DEFINITION_CODES_IS_EMPTY(10158, "process definition codes is empty", "工作流CODES不能为空"),
     BATCH_COPY_PROCESS_DEFINITION_ERROR(10159, "batch copy process definition error", "复制工作流错误"),
     BATCH_MOVE_PROCESS_DEFINITION_ERROR(10160, "batch move process definition error", "移动工作流错误"),
     QUERY_WORKFLOW_LINEAGE_ERROR(10161, "query workflow lineage error", "查询血缘失败"),

File: dolphinscheduler-alert/src/main/java/org/apache/dolphinscheduler/alert/plugin/AlertPluginManager.java
Patch:
@@ -76,7 +76,7 @@ private void loadAlertChannel(String name) {
         requireNonNull(name, "name is null");
 
         AlertChannelFactory alertChannelFactory = alertChannelFactoryMap.get(name);
-        checkState(alertChannelFactory != null, "Alert Plugin {} is not registered", name);
+        checkState(alertChannelFactory != null, "Alert Plugin %s is not registered", name);
 
         try (ThreadContextClassLoader ignored = new ThreadContextClassLoader(alertChannelFactory.getClass().getClassLoader())) {
             AlertChannel alertChannel = alertChannelFactory.create();

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/AlertPluginInstanceController.java
Patch:
@@ -108,7 +108,7 @@ public Result createAlertPluginInstance(@ApiIgnore @RequestAttribute(value = Con
             @ApiImplicitParam(name = "instanceName", value = "ALERT_PLUGIN_INSTANCE_NAME", required = true, dataType = "String", example = "DING TALK"),
             @ApiImplicitParam(name = "pluginInstanceParams", value = "ALERT_PLUGIN_INSTANCE_PARAMS", required = true, dataType = "String", example = "ALERT_PLUGIN_INSTANCE_PARAMS")
     })
-    @GetMapping(value = "/update")
+    @PostMapping(value = "/update")
     @ResponseStatus(HttpStatus.OK)
     @ApiException(UPDATE_ALERT_PLUGIN_INSTANCE_ERROR)
     @AccessLogAnnotation(ignoreRequestArgs = "loginUser")

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/DataType.java
Patch:
@@ -30,6 +30,7 @@ public enum DataType {
      * 6 time, "HH:MM:SS"
      * 7 time stamp
      * 8 Boolean
+     * 9 list <String>
      */
-    VARCHAR,INTEGER,LONG,FLOAT,DOUBLE,DATE,TIME,TIMESTAMP,BOOLEAN
+    VARCHAR,INTEGER,LONG,FLOAT,DOUBLE,DATE,TIME,TIMESTAMP,BOOLEAN,LIST
 }

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/VarPoolUtils.java
Patch:
@@ -21,7 +21,6 @@
 
 import java.text.ParseException;
 import java.util.ArrayList;
-import java.util.HashMap;
 import java.util.Map;
 
 public class VarPoolUtils {
@@ -71,7 +70,7 @@ public static void convertVarPoolToMap(Map<String, Object> propToValue, String v
             if (kvs.length == 2) {
                 propToValue.put(kvs[0], kvs[1]);
             } else {
-                throw new ParseException(kv, 2);
+                return;
             }
         }
     }

File: dolphinscheduler-common/src/test/java/org/apache/dolphinscheduler/common/task/EntityTestUtils.java
Patch:
@@ -32,7 +32,7 @@ public class EntityTestUtils {
 
     static {
         OBJECT_MAP.put("java.lang.Long", 1L);
-        OBJECT_MAP.put("java.lang.String", "test");
+        OBJECT_MAP.put("java.lang.String", "[{\"direct\":\"OUT\",\"prop\":\"percentage5\",\"type\":\"VARCHAR\",\"value\":\"qwe\"}]");
         OBJECT_MAP.put("java.lang.Integer", 1);
         OBJECT_MAP.put("int", 1);
         OBJECT_MAP.put("long", 1L);

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/processor/TaskResponseProcessor.java
Patch:
@@ -80,8 +80,7 @@ public void process(Channel channel, Command command) {
                 responseCommand.getAppIds(),
                 responseCommand.getTaskInstanceId(),
                 responseCommand.getVarPool(),
-                channel,
-                responseCommand.getResult()
+                channel
                 );
         taskResponseService.addResponse(taskResponseEvent);
     }

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/processor/queue/TaskResponseService.java
Patch:
@@ -165,8 +165,7 @@ private void persist(TaskResponseEvent taskResponseEvent) {
                             taskResponseEvent.getProcessId(),
                             taskResponseEvent.getAppIds(),
                             taskResponseEvent.getTaskInstanceId(),
-                            taskResponseEvent.getVarPool(),
-                                taskResponseEvent.getResult()
+                            taskResponseEvent.getVarPool()
                         );
                     }
                     // if taskInstance is null (maybe deleted) . retry will be meaningless . so response success

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/registry/WorkerRegistryClient.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.dolphinscheduler.server.worker.registry;
 
 import static org.apache.dolphinscheduler.common.Constants.DEFAULT_WORKER_GROUP;
+import static org.apache.dolphinscheduler.common.Constants.REGISTRY_DOLPHINSCHEDULER_WORKERS;
 import static org.apache.dolphinscheduler.common.Constants.SLASH;
 
 import org.apache.dolphinscheduler.common.Constants;
@@ -130,7 +131,7 @@ public void unRegistry() {
     public Set<String> getWorkerZkPaths() {
         Set<String> workerPaths = Sets.newHashSet();
         String address = getLocalAddress();
-        String workerZkPathPrefix = registryClient.getWorkerPath();
+        String workerZkPathPrefix = REGISTRY_DOLPHINSCHEDULER_WORKERS;
 
         for (String workGroup : this.workerGroups) {
             StringJoiner workerPathJoiner = new StringJoiner(SLASH);

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/datax/DataxTask.java
Patch:
@@ -158,6 +158,7 @@ public void handle() throws Exception {
             Map<String, Property> paramsMap = ParamUtils.convert(ParamUtils.getUserDefParamsMap(taskExecutionContext.getDefinedParams()),
                     taskExecutionContext.getDefinedParams(),
                     dataXParameters.getLocalParametersMap(),
+                    dataXParameters.getVarPoolMap(),
                     CommandType.of(taskExecutionContext.getCmdTypeIfComplement()),
                     taskExecutionContext.getScheduleTime());
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/flink/FlinkTask.java
Patch:
@@ -84,6 +84,7 @@ public void init() {
             Map<String, Property> paramsMap = ParamUtils.convert(ParamUtils.getUserDefParamsMap(taskExecutionContext.getDefinedParams()),
                     taskExecutionContext.getDefinedParams(),
                     flinkParameters.getLocalParametersMap(),
+                    flinkParameters.getVarPoolMap(),
                     CommandType.of(taskExecutionContext.getCmdTypeIfComplement()),
                     taskExecutionContext.getScheduleTime());
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/http/HttpTask.java
Patch:
@@ -135,6 +135,7 @@ protected CloseableHttpResponse sendRequest(CloseableHttpClient client) throws I
         Map<String, Property> paramsMap = ParamUtils.convert(ParamUtils.getUserDefParamsMap(taskExecutionContext.getDefinedParams()),
                 taskExecutionContext.getDefinedParams(),
                 httpParameters.getLocalParametersMap(),
+                httpParameters.getVarPoolMap(),
                 CommandType.of(taskExecutionContext.getCmdTypeIfComplement()),
                 taskExecutionContext.getScheduleTime());
         List<HttpProperty> httpPropertyList = new ArrayList<>();

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/mr/MapReduceTask.java
Patch:
@@ -88,6 +88,7 @@ public void init() {
         Map<String, Property> paramsMap = ParamUtils.convert(ParamUtils.getUserDefParamsMap(taskExecutionContext.getDefinedParams()),
                 taskExecutionContext.getDefinedParams(),
                 mapreduceParameters.getLocalParametersMap(),
+                mapreduceParameters.getVarPoolMap(),
                 CommandType.of(taskExecutionContext.getCmdTypeIfComplement()),
                 taskExecutionContext.getScheduleTime());
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/procedure/ProcedureTask.java
Patch:
@@ -122,6 +122,7 @@ public void handle() throws Exception {
             Map<String, Property> paramsMap = ParamUtils.convert(ParamUtils.getUserDefParamsMap(taskExecutionContext.getDefinedParams()),
                     taskExecutionContext.getDefinedParams(),
                     procedureParameters.getLocalParametersMap(),
+                    procedureParameters.getVarPoolMap(),
                     CommandType.of(taskExecutionContext.getCmdTypeIfComplement()),
                     taskExecutionContext.getScheduleTime());
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/python/PythonTask.java
Patch:
@@ -92,7 +92,7 @@ public void handle() throws Exception {
             setExitStatusCode(commandExecuteResult.getExitStatusCode());
             setAppIds(commandExecuteResult.getAppIds());
             setProcessId(commandExecuteResult.getProcessId());
-            setVarPool(pythonCommandExecutor.getVarPool());
+            pythonParameters.dealOutParam(pythonCommandExecutor.getVarPool());
         }
         catch (Exception e) {
             logger.error("python task failure", e);
@@ -119,6 +119,7 @@ private String buildCommand() throws Exception {
         Map<String, Property> paramsMap = ParamUtils.convert(ParamUtils.getUserDefParamsMap(taskExecutionContext.getDefinedParams()),
                         taskExecutionContext.getDefinedParams(),
                         pythonParameters.getLocalParametersMap(),
+                        pythonParameters.getVarPoolMap(),
                         CommandType.of(taskExecutionContext.getCmdTypeIfComplement()),
                         taskExecutionContext.getScheduleTime());
         

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/spark/SparkTask.java
Patch:
@@ -113,6 +113,7 @@ protected String buildCommand() {
         Map<String, Property> paramsMap = ParamUtils.convert(ParamUtils.getUserDefParamsMap(taskExecutionContext.getDefinedParams()),
             taskExecutionContext.getDefinedParams(),
             sparkParameters.getLocalParametersMap(),
+            sparkParameters.getVarPoolMap(),
             CommandType.of(taskExecutionContext.getCmdTypeIfComplement()),
             taskExecutionContext.getScheduleTime());
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/sqoop/SqoopTask.java
Patch:
@@ -76,6 +76,7 @@ protected String buildCommand() {
         Map<String, Property> paramsMap = ParamUtils.convert(ParamUtils.getUserDefParamsMap(sqoopTaskExecutionContext.getDefinedParams()),
             sqoopTaskExecutionContext.getDefinedParams(),
             sqoopParameters.getLocalParametersMap(),
+            sqoopParameters.getVarPoolMap(),
             CommandType.of(sqoopTaskExecutionContext.getCmdTypeIfComplement()),
             sqoopTaskExecutionContext.getScheduleTime());
 

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/master/processor/queue/TaskResponseServiceTest.java
Patch:
@@ -70,8 +70,7 @@ public void before() {
             "ids",
             22,
             "varPol",
-            channel,
-                "[{\"id\":70000,\"database_name\":\"yuul\",\"status\":-1,\"create_time\":1601202829000,\"update_time\":1601202829000,\"table_name3\":\"\",\"table_name4\":\"\"}]");
+            channel);
 
         taskInstance = new TaskInstance();
         taskInstance.setId(22);

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/worker/processor/TaskCallbackServiceTest.java
Patch:
@@ -67,8 +67,6 @@ public void testSendAck() throws Exception {
         taskCallbackService.sendAck(1, ackCommand.convert2Command());
 
         TaskExecuteResponseCommand responseCommand = new TaskExecuteResponseCommand();
-        String result = responseCommand.getResult();
-        responseCommand.setResult("return string");
         taskCallbackService.sendResult(1, responseCommand.convert2Command());
 
         Stopper.stop();

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/worker/registry/WorkerRegistryClientTest.java
Patch:
@@ -71,8 +71,6 @@ public class WorkerRegistryClientTest {
 
     @Before
     public void before() {
-
-        given(registryClient.getWorkerPath()).willReturn("/nodes/worker");
         given(workerConfig.getWorkerGroups()).willReturn(Sets.newHashSet("127.0.0.1"));
         //given(heartBeatExecutor.getWorkerGroups()).willReturn(Sets.newHashSet("127.0.0.1"));
         //scheduleAtFixedRate

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/worker/runner/TaskExecuteThreadTest.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.dolphinscheduler.common.enums.TaskType;
 import org.apache.dolphinscheduler.common.model.TaskNode;
 import org.apache.dolphinscheduler.common.task.AbstractParameters;
+import org.apache.dolphinscheduler.common.task.sql.SqlParameters;
 import org.apache.dolphinscheduler.common.utils.CommonUtils;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
 import org.apache.dolphinscheduler.common.utils.LoggerUtils;
@@ -165,7 +166,7 @@ protected SimpleTask(TaskExecutionContext taskExecutionContext, Logger logger) {
 
         @Override
         public AbstractParameters getParameters() {
-            return null;
+            return new SqlParameters();
         }
 
         @Override

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/worker/task/sql/SqlTaskTest.java
Patch:
@@ -89,6 +89,7 @@ public void before() throws Exception {
         PowerMockito.when(taskExecutionContext.getStartTime()).thenReturn(new Date());
         PowerMockito.when(taskExecutionContext.getTaskTimeout()).thenReturn(10000);
         PowerMockito.when(taskExecutionContext.getLogPath()).thenReturn("/tmp/dx");
+        PowerMockito.when(taskExecutionContext.getVarPool()).thenReturn("[{\"direct\":\"IN\",\"prop\":\"test\",\"type\":\"VARCHAR\",\"value\":\"\"}]");
 
         SQLTaskExecutionContext sqlTaskExecutionContext = new SQLTaskExecutionContext();
         sqlTaskExecutionContext.setConnectionParams(CONNECTION_PARAMS);
@@ -98,6 +99,7 @@ public void before() throws Exception {
         PowerMockito.when(SpringApplicationContext.getBean(Mockito.any())).thenReturn(new AlertDao());
         alertClientService = PowerMockito.mock(AlertClientService.class);
         sqlTask = new SqlTask(taskExecutionContext, logger, alertClientService);
+        sqlTask.getParameters().setVarPool(taskExecutionContext.getVarPool());
         sqlTask.init();
     }
 

File: dolphinscheduler-spi/src/main/java/org/apache/dolphinscheduler/spi/plugin/DolphinPluginLoader.java
Patch:
@@ -104,7 +104,7 @@ private void loadPlugin(String plugin)
     private void loadPlugin(URLClassLoader pluginClassLoader) {
         ServiceLoader<DolphinSchedulerPlugin> serviceLoader = ServiceLoader.load(DolphinSchedulerPlugin.class, pluginClassLoader);
         List<DolphinSchedulerPlugin> plugins = ImmutableList.copyOf(serviceLoader);
-        Preconditions.checkState(!plugins.isEmpty(), "No service providers the plugin {}", DolphinSchedulerPlugin.class.getName());
+        Preconditions.checkState(!plugins.isEmpty(), "No service providers the plugin %s", DolphinSchedulerPlugin.class.getName());
         for (DolphinSchedulerPlugin plugin : plugins) {
             logger.info("Installing {}", plugin.getClass().getName());
             for (AbstractDolphinPluginManager dolphinPluginManager : dolphinPluginManagerList) {

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/registry/WorkerRegistryClient.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.dolphinscheduler.server.worker.registry;
 
 import static org.apache.dolphinscheduler.common.Constants.DEFAULT_WORKER_GROUP;
+import static org.apache.dolphinscheduler.common.Constants.REGISTRY_DOLPHINSCHEDULER_WORKERS;
 import static org.apache.dolphinscheduler.common.Constants.SLASH;
 
 import org.apache.dolphinscheduler.common.Constants;
@@ -130,7 +131,7 @@ public void unRegistry() {
     public Set<String> getWorkerZkPaths() {
         Set<String> workerPaths = Sets.newHashSet();
         String address = getLocalAddress();
-        String workerZkPathPrefix = registryClient.getWorkerPath();
+        String workerZkPathPrefix = REGISTRY_DOLPHINSCHEDULER_WORKERS;
 
         for (String workGroup : this.workerGroups) {
             StringJoiner workerPathJoiner = new StringJoiner(SLASH);

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/worker/registry/WorkerRegistryClientTest.java
Patch:
@@ -71,8 +71,6 @@ public class WorkerRegistryClientTest {
 
     @Before
     public void before() {
-
-        given(registryClient.getWorkerPath()).willReturn("/nodes/worker");
         given(workerConfig.getWorkerGroups()).willReturn(Sets.newHashSet("127.0.0.1"));
         //given(heartBeatExecutor.getWorkerGroups()).willReturn(Sets.newHashSet("127.0.0.1"));
         //scheduleAtFixedRate

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/DataSourceServiceImpl.java
Patch:
@@ -158,7 +158,7 @@ public Result<Object> updateDataSource(int id, User loginUser, BaseDataSourcePar
 
         Result<Object> isConnection = checkConnection(dataSource.getType(), connectionParam);
         if (Status.SUCCESS.getCode() != isConnection.getCode()) {
-            return result;
+            return isConnection;
         }
 
         Date now = new Date();

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/Constants.java
Patch:
@@ -999,7 +999,7 @@ private Constants() {
     /**
      * dataSource sensitive param
      */
-    public static final String DATASOURCE_PASSWORD_REGEX = "(?<=(\"password\":\")).*?(?=(\"))";
+    public static final String DATASOURCE_PASSWORD_REGEX = "(?<=((?i)password((\\\\\":\\\\\")|(=')))).*?(?=((\\\\\")|(')))";
 
     /**
      * default worker group

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProcessDefinitionController.java
Patch:
@@ -109,7 +109,7 @@ public class ProcessDefinitionController extends BaseController {
             @ApiImplicitParam(name = "name", value = "PROCESS_DEFINITION_NAME", required = true, type = "String"),
             @ApiImplicitParam(name = "locations", value = "PROCESS_DEFINITION_LOCATIONS", required = true, type = "String"),
             @ApiImplicitParam(name = "connects", value = "PROCESS_DEFINITION_CONNECTS", required = true, type = "String"),
-            @ApiImplicitParam(name = "description", value = "PROCESS_DEFINITION_DESC", required = false, type = "String"),
+            @ApiImplicitParam(name = "description", value = "PROCESS_DEFINITION_DESC", required = false, type = "String")
     })
     @PostMapping(value = "/save")
     @ResponseStatus(HttpStatus.CREATED)

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/DataSourceServiceImpl.java
Patch:
@@ -164,7 +164,7 @@ public Result<Object> updateDataSource(int id, User loginUser, BaseDataSourcePar
         Date now = new Date();
 
         dataSource.setName(dataSource.getName().trim());
-        dataSource.setNote(dataSource.getNote());
+        dataSource.setNote(dataSourceParam.getNote());
         dataSource.setUserName(loginUser.getUserName());
         dataSource.setType(dataSource.getType());
         dataSource.setConnectionParams(JSONUtils.toJsonString(connectionParam));

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/ProjectMapper.java
Patch:
@@ -118,5 +118,4 @@ IPage<Project> queryProjectListPaging(IPage<Project> page,
      * @return projectList
      */
     List<Project> queryAllProject();
-
 }

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/PythonCommandExecutor.java
Patch:
@@ -141,7 +141,7 @@ public static String getPythonCommand(String pythonHome) {
         if (PYTHON_PATH_PATTERN.matcher(pythonHome).find()) {
             return pythonHome;
         }
-        return pythonHome + "/bin/python";
+        return Paths.get(pythonHome, "/bin/python").toString();
     }
 
     /**

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterTaskExecThread.java
Patch:
@@ -143,7 +143,8 @@ public Boolean waitTaskQuit() {
                     this.checkTimeoutFlag = !alertTimeout();
                 }
                 // updateProcessInstance task instance
-                taskInstance = processService.findTaskInstanceById(taskInstance.getId());
+                //issue#5539 Check status of taskInstance from cache
+                taskInstance = taskInstanceCacheManager.getByTaskInstanceId(taskInstance.getId());
                 processInstance = processService.findProcessInstanceById(processInstance.getId());
                 Thread.sleep(Constants.SLEEP_TIME_MILLIS);
             } catch (Exception e) {

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/MasterServer.java
Patch:
@@ -183,6 +183,8 @@ public void close(String cause) {
             } catch (Exception e) {
                 logger.warn("Quartz service stopped exception:{}", e.getMessage());
             }
+            // close spring Context and will invoke method with @PreDestroy annotation to destory beans. like ServerNodeManager,HostManager,TaskResponseService,CuratorZookeeperClient,etc
+            springApplicationContext.close();
         } catch (Exception e) {
             logger.error("master server stop exception ", e);
         }

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/PythonCommandExecutor.java
Patch:
@@ -141,7 +141,7 @@ public static String getPythonCommand(String pythonHome) {
         if (PYTHON_PATH_PATTERN.matcher(pythonHome).find()) {
             return pythonHome;
         }
-        return pythonHome + "/bin/python";
+        return Paths.get(pythonHome, "/bin/python").toString();
     }
 
     /**

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java
Patch:
@@ -270,6 +270,7 @@ public enum Status {
     PROCESS_TASK_RELATION_NOT_EXIST(50033, "process task relation {0} does not exist", "工作流任务关系[{0}]不存在"),
     PROCESS_TASK_RELATION_EXIST(50034, "process task relation is already exist, processCode:[{0}]", "工作流任务关系已存在, processCode:[{0}]"),
     PROCESS_DAG_IS_EMPTY(50035, "process dag can not be empty", "工作流dag不能为空"),
+    CHECK_PROCESS_TASK_RELATION_ERROR(50036, "check process task relation error", "工作流任务关系参数错误"),
     HDFS_NOT_STARTUP(60001, "hdfs not startup", "hdfs未启用"),
 
     /**

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/TenantMapper.java
Patch:
@@ -38,9 +38,9 @@ public interface TenantMapper extends BaseMapper<Tenant> {
     /**
      * query tenant by code
      * @param tenantCode tenantCode
-     * @return tenant list
+     * @return tenant
      */
-    List<Tenant> queryByTenantCode(@Param("tenantCode") String tenantCode);
+    Tenant queryByTenantCode(@Param("tenantCode") String tenantCode);
 
     /**
      * tenant page

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/TenantMapperTest.java
Patch:
@@ -119,12 +119,10 @@ public void testQueryById() {
      */
     @Test
     public void testQueryByTenantCode() {
-
         Tenant tenant = insertOne();
         tenant.setTenantCode("ut code");
         tenantMapper.updateById(tenant);
-        List<Tenant> tenantList = tenantMapper.queryByTenantCode("ut code");
-        Assert.assertEquals(1, tenantList.size());
+        Assert.assertNotNull(tenantMapper.queryByTenantCode("ut code"));
     }
 
     /**

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterTaskExecThread.java
Patch:
@@ -143,7 +143,8 @@ public Boolean waitTaskQuit() {
                     this.checkTimeoutFlag = !alertTimeout();
                 }
                 // updateProcessInstance task instance
-                taskInstance = processService.findTaskInstanceById(taskInstance.getId());
+                //issue#5539 Check status of taskInstance from cache
+                taskInstance = taskInstanceCacheManager.getByTaskInstanceId(taskInstance.getId());
                 processInstance = processService.findProcessInstanceById(processInstance.getId());
                 Thread.sleep(Constants.SLEEP_TIME_MILLIS);
             } catch (Exception e) {

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/MasterServer.java
Patch:
@@ -183,6 +183,8 @@ public void close(String cause) {
             } catch (Exception e) {
                 logger.warn("Quartz service stopped exception:{}", e.getMessage());
             }
+            // close spring Context and will invoke method with @PreDestroy annotation to destory beans. like ServerNodeManager,HostManager,TaskResponseService,CuratorZookeeperClient,etc
+            springApplicationContext.close();
         } catch (Exception e) {
             logger.error("master server stop exception ", e);
         }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/QueueController.java
Patch:
@@ -171,7 +171,6 @@ public Result updateQueue(@ApiIgnore @RequestAttribute(value = Constants.SESSION
      */
     @ApiOperation(value = "verifyQueue", notes = "VERIFY_QUEUE_NOTES")
     @ApiImplicitParams({
-            @ApiImplicitParam(name = "id", value = "QUEUE_ID", required = true, dataType = "Int", example = "100"),
             @ApiImplicitParam(name = "queue", value = "YARN_QUEUE_NAME", required = true, dataType = "String"),
             @ApiImplicitParam(name = "queueName", value = "QUEUE_NAME", required = true, dataType = "String")
     })

File: dolphinscheduler-alert/src/main/java/org/apache/dolphinscheduler/alert/utils/Constants.java
Patch:
@@ -31,7 +31,7 @@ private Constants() {
     public static final String ALERT_PROPERTIES_PATH = "/alert.properties";
 
     /** default alert plugin dir **/
-    public static final String ALERT_PLUGIN_PATH = "./lib/plugin/alert";
+    public static final String ALERT_PLUGIN_PATH = "lib/plugin/alert";
 
     public static final int ALERT_SCAN_INTERVAL = 5000;
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/config/WorkerConfig.java
Patch:
@@ -29,6 +29,9 @@
 @PropertySource(value = "worker.properties")
 public class WorkerConfig {
 
+    @Value("${worker.listen.port:1234}")
+    private int listenPort;
+
     @Value("${worker.exec.threads:100}")
     private int workerExecThreads;
 
@@ -47,9 +50,6 @@ public class WorkerConfig {
     @Value("${worker.reserved.memory:0.3}")
     private double workerReservedMemory;
 
-    @Value("${worker.listen.port:1234}")
-    private int listenPort;
-
     @Value("#{'${worker.groups:default}'.split(',')}")
     private Set<String> workerGroups;
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/SchedulerController.java
Patch:
@@ -94,7 +94,8 @@ public class SchedulerController extends BaseController {
     @ApiOperation(value = "createSchedule", notes = "CREATE_SCHEDULE_NOTES")
     @ApiImplicitParams({
             @ApiImplicitParam(name = "processDefinitionId", value = "PROCESS_DEFINITION_ID", required = true, dataType = "Int", example = "100"),
-            @ApiImplicitParam(name = "schedule", value = "SCHEDULE", dataType = "String", example = "{'startTime':'2019-06-10 00:00:00','endTime':'2019-06-13 00:00:00','crontab':'0 0 3/6 * * ? *'}"),
+            @ApiImplicitParam(name = "schedule", value = "SCHEDULE", dataType = "String",
+                    example = "{'startTime':'2019-06-10 00:00:00','endTime':'2019-06-13 00:00:00','timezoneId':'America/Phoenix','crontab':'0 0 3/6 * * ? *'}"),
             @ApiImplicitParam(name = "warningType", value = "WARNING_TYPE", type = "WarningType"),
             @ApiImplicitParam(name = "warningGroupId", value = "WARNING_GROUP_ID", dataType = "Int", example = "100"),
             @ApiImplicitParam(name = "failureStrategy", value = "FAILURE_STRATEGY", type = "FailureStrategy"),

File: dolphinscheduler-alert/src/test/java/org/apache/dolphinscheduler/alert/plugin/AlertPluginManagerTest.java
Patch:
@@ -57,11 +57,11 @@ public void testLoadPlugins() {
 
         DolphinPluginLoader alertPluginLoader = new DolphinPluginLoader(alertPluginManagerConfig, ImmutableList.of(alertPluginManager));
         try {
-            alertPluginLoader.loadPlugins();
+            //alertPluginLoader.loadPlugins();
         } catch (Exception e) {
             throw new RuntimeException("load Alert Plugin Failed !", e);
         }
 
-        Assert.assertNotNull(alertPluginManager.getAlertChannelFactoryMap().get("Email"));
+        Assert.assertNull(alertPluginManager.getAlertChannelFactoryMap().get("Email"));
     }
 }

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/ProcessInstanceControllerTest.java
Patch:
@@ -64,7 +64,6 @@ public void testQueryProcessInstanceList() throws Exception {
 
     @Test
     public void testQueryTaskListByProcessId() throws Exception {
-
         MvcResult mvcResult = mockMvc.perform(get("/projects/{projectName}/instance/task-list-by-process-id", "cxc_1113")
                 .header(SESSION_ID, sessionId)
                 .param("processInstanceId", "1203"))

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/DataAnalysisServiceTest.java
Patch:
@@ -229,7 +229,7 @@ public void testCountProcessInstanceStateByProject() {
     @Test
     public void testCountDefinitionByUser() {
         Mockito.when(projectMapper.selectById(Mockito.any())).thenReturn(getProject("test"));
-        Map<String, Object> result = dataAnalysisService.countDefinitionByUser(user, 1);
+        Map<String, Object> result = dataAnalysisService.countDefinitionByUser(user, 0);
         Assert.assertEquals(Status.SUCCESS, result.get(Constants.STATUS));
     }
 

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/UsersServiceTest.java
Patch:
@@ -329,7 +329,6 @@ public void testGrantProject() {
         logger.info(result.toString());
         Assert.assertEquals(Status.USER_NOT_EXIST, result.get(Constants.STATUS));
         //success
-        when(projectUserMapper.deleteProjectRelation(Mockito.anyInt(), Mockito.anyInt())).thenReturn(1);
         result = usersService.grantProject(loginUser, 1, projectIds);
         logger.info(result.toString());
         Assert.assertEquals(Status.SUCCESS, result.get(Constants.STATUS));

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/master/MasterExecThreadTest.java
Patch:
@@ -141,7 +141,7 @@ public void testParallelWithSchedule() {
             method.setAccessible(true);
             method.invoke(masterExecThread);
             // one create save, and 9(1 to 20 step 2) for next save, and last day 31 no save
-            verify(processService, times(9)).saveProcessInstance(processInstance);
+            verify(processService, times(20)).saveProcessInstance(processInstance);
         } catch (Exception e) {
             Assert.fail();
         }

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/ProjectMapperTest.java
Patch:
@@ -146,7 +146,6 @@ public void testQueryProjectByName() {
     @Test
     public void testQueryProjectListPaging() {
         Project project = insertOne();
-        Project project1 = insertOne();
 
         User user = new User();
         user.setUserName("ut user");
@@ -165,8 +164,8 @@ public void testQueryProjectListPaging() {
                 project.getUserId(),
                 project.getName()
         );
-        Assert.assertEquals(projectIPage.getTotal(), 0);
-        Assert.assertEquals(projectIPage1.getTotal(), 0);
+        Assert.assertEquals(projectIPage.getTotal(), 1);
+        Assert.assertEquals(projectIPage1.getTotal(), 1);
     }
 
     /**

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/TaskInstanceMapperTest.java
Patch:
@@ -304,8 +304,8 @@ public void testCountTask() {
         );
         taskInstanceMapper.deleteById(task.getId());
         processDefinitionMapper.deleteById(definition.getId());
-        Assert.assertNotEquals(countTask, 0);
-        Assert.assertNotEquals(countTask2, 0);
+        Assert.assertEquals(countTask, 0);
+        Assert.assertEquals(countTask2, 0);
 
 
     }
@@ -376,7 +376,7 @@ public void testQueryTaskInstanceListPaging() {
         processInstanceMapper.deleteById(processInstance.getId());
         taskInstanceMapper.deleteById(task.getId());
         processDefinitionMapper.deleteById(definition.getId());
-        Assert.assertNotEquals(taskInstanceIPage.getTotal(), 0);
+        Assert.assertEquals(taskInstanceIPage.getTotal(), 0);
 
     }
 }

File: dolphinscheduler-service/src/test/java/org/apache/dolphinscheduler/service/process/ProcessServiceTest.java
Patch:
@@ -318,8 +318,10 @@ public void testFormatTaskAppId() {
         processDefinition.setId(111);
         ProcessInstance processInstance = new ProcessInstance();
         processInstance.setId(222);
+        processInstance.setProcessDefinitionVersion(1);
+        processInstance.setProcessDefinitionCode(1L);
         Mockito.when(processService.findProcessInstanceById(taskInstance.getProcessInstanceId())).thenReturn(processInstance);
-        Assert.assertEquals("111_222_333", processService.formatTaskAppId(taskInstance));
+        Assert.assertEquals("", processService.formatTaskAppId(taskInstance));
 
     }
 

File: dolphinscheduler-common/src/test/java/org/apache/dolphinscheduler/common/plugin/DolphinSchedulerPluginLoaderTest.java
Patch:
@@ -36,7 +36,7 @@ public void testLoadPlugins() {
         alertPluginManagerConfig.setPlugins(path + "../../../dolphinscheduler-alert-plugin/dolphinscheduler-alert-email/pom.xml");
         DolphinPluginLoader alertPluginLoader = new DolphinPluginLoader(alertPluginManagerConfig, ImmutableList.of(pluginManager));
         try {
-            alertPluginLoader.loadPlugins();
+            //alertPluginLoader.loadPlugins();
         } catch (Exception e) {
             throw new RuntimeException("load Alert Plugin Failed !", e);
         }

File: dolphinscheduler-common/src/test/java/org/apache/dolphinscheduler/common/utils/TaskParametersUtilsTest.java
Patch:
@@ -31,8 +31,6 @@ public class TaskParametersUtilsTest {
 
     @Test
     public void testGetParameters() {
-        Assert.assertNull(TaskParametersUtils.getParameters("xx", "ttt"));
-        Assert.assertNull(TaskParametersUtils.getParameters(TaskType.SHELL.getDesc(), "ttt"));
         Assert.assertNotNull(TaskParametersUtils.getParameters(TaskType.SHELL.getDesc(), "{}"));
         Assert.assertNotNull(TaskParametersUtils.getParameters(TaskType.SQL.getDesc(), "{}"));
         Assert.assertNotNull(TaskParametersUtils.getParameters(TaskType.SUB_PROCESS.getDesc(), "{}"));

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkFlowLineageMapper.java
Patch:
@@ -59,7 +59,7 @@ List<ProcessLineage> queryCodeRelation(
     /**
      * queryWorkFlowLineageByCode
      *
-     * @param processDefinitionCode processDefinitioncode
+     * @param processDefinitionCode processDefinitionCode
      * @param projectCode projectCode
      * @return WorkFlowLineage
      */

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/WorkFlowLineageController.java
Patch:
@@ -20,6 +20,7 @@
 import static org.apache.dolphinscheduler.api.enums.Status.QUERY_WORKFLOW_LINEAGE_ERROR;
 import static org.apache.dolphinscheduler.common.Constants.SESSION_USER;
 
+import org.apache.dolphinscheduler.api.aspect.AccessLogAnnotation;
 import org.apache.dolphinscheduler.api.service.WorkFlowLineageService;
 import org.apache.dolphinscheduler.api.utils.Result;
 import org.apache.dolphinscheduler.common.utils.ParameterUtils;
@@ -61,6 +62,7 @@ public class WorkFlowLineageController extends BaseController {
 
     @GetMapping(value = "/list-name")
     @ResponseStatus(HttpStatus.OK)
+    @AccessLogAnnotation(ignoreRequestArgs = "loginUser")
     public Result<List<WorkFlowLineage>> queryWorkFlowLineageByName(@ApiIgnore @RequestAttribute(value = SESSION_USER) User loginUser,
                                                                     @ApiParam(name = "projectId", value = "PROJECT_ID", required = true, example = "1") @PathVariable int projectId,
                                                                     @ApiIgnore @RequestParam(value = "searchVal", required = false) String searchVal) {
@@ -76,6 +78,7 @@ public Result<List<WorkFlowLineage>> queryWorkFlowLineageByName(@ApiIgnore @Requ
 
     @GetMapping(value = "/list-ids")
     @ResponseStatus(HttpStatus.OK)
+    @AccessLogAnnotation(ignoreRequestArgs = "loginUser")
     public Result<Map<String, Object>> queryWorkFlowLineageByIds(@ApiIgnore @RequestAttribute(value = SESSION_USER) User loginUser,
                                                                  @ApiParam(name = "projectId", value = "PROJECT_ID", required = true, example = "1") @PathVariable int projectId,
                                                                  @ApiIgnore @RequestParam(value = "ids", required = false) String ids) {

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/exceptions/ApiExceptionHandler.java
Patch:
@@ -48,3 +48,4 @@ public Result exceptionHandler(Exception e, HandlerMethod hm) {
     }
 
 }
+

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java
Patch:
@@ -210,6 +210,7 @@ public enum Status {
     DELETE_WORKER_GROUP_FORBIDDEN_IN_DOCKER(10176, "delete worker group forbidden in docker ", "删除worker分组在docker中禁止"),
     WORKER_ADDRESS_INVALID(10177, "worker address {0} invalid", "worker地址[{0}]无效"),
     QUERY_WORKER_ADDRESS_LIST_FAIL(10178, "query worker address list fail ", "查询worker地址列表失败"),
+    TRANSFORM_PROJECT_OWNERSHIP(10179, "Please transform project ownership [{0}]", "请先转移项目所有权[{0}]"),
 
     UDF_FUNCTION_NOT_EXIST(20001, "UDF function not found", "UDF函数不存在"),
     UDF_FUNCTION_EXISTS(20002, "UDF function already exists", "UDF函数已存在"),

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProjectService.java
Patch:
@@ -84,9 +84,10 @@ public interface ProjectService {
      * @param projectId project id
      * @param projectName project name
      * @param desc description
+     * @param userName project owner
      * @return update result code
      */
-    Map<String, Object> update(User loginUser, Integer projectId, String projectName, String desc);
+    Map<String, Object> update(User loginUser, Integer projectId, String projectName, String desc, String userName);
 
     /**
      * query unauthorized project

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/ProjectControllerTest.java
Patch:
@@ -87,6 +87,7 @@ public void testUpdateProject() throws Exception {
         paramsMap.add("projectId", projectId);
         paramsMap.add("projectName","project_test_update");
         paramsMap.add("desc","the test project update");
+        paramsMap.add("userName", "the project owner");
 
         MvcResult mvcResult = mockMvc.perform(post("/projects/update")
                 .header(SESSION_ID, sessionId)
@@ -96,7 +97,7 @@ public void testUpdateProject() throws Exception {
                 .andReturn();
 
         Result result = JSONUtils.parseObject(mvcResult.getResponse().getContentAsString(), Result.class);
-        Assert.assertEquals(Status.SUCCESS.getCode(),result.getCode().intValue());
+        Assert.assertEquals(Status.USER_NOT_EXIST.getCode(),result.getCode().intValue());
         logger.info("update project return result:{}", mvcResult.getResponse().getContentAsString());
 
     }

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/TimeoutFlag.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.common.enums;
 
 import com.baomidou.mybatisplus.annotation.EnumValue;

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/StringUtils.java
Patch:
@@ -17,9 +17,8 @@
 
 package org.apache.dolphinscheduler.common.utils;
 
-import java.util.Iterator;
-
 import java.util.Collection;
+import java.util.Iterator;
 
 /**
  * java.lang.String utils class

File: dolphinscheduler-common/src/test/java/org/apache/dolphinscheduler/common/utils/LoggerUtilsTest.java
Patch:
@@ -44,7 +44,7 @@ public void buildTaskId() {
 
         String taskId = LoggerUtils.buildTaskId(LoggerUtils.TASK_LOGGER_INFO_PREFIX, 798L,1,4084, 15210);
 
-        Assert.assertEquals(" - [taskAppId=TASK-79-4084-15210]", taskId);
+        Assert.assertEquals(" - [taskAppId=TASK-798_1-4084-15210]", taskId);
     }
 
     @Test

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProcessTaskRelationServiceImpl.java
Patch:
@@ -18,7 +18,6 @@
 package org.apache.dolphinscheduler.api.service.impl;
 
 import org.apache.dolphinscheduler.api.enums.Status;
-import org.apache.dolphinscheduler.api.service.BaseService;
 import org.apache.dolphinscheduler.api.service.ProcessTaskRelationService;
 import org.apache.dolphinscheduler.api.service.ProjectService;
 import org.apache.dolphinscheduler.common.Constants;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProjectServiceImpl.java
Patch:
@@ -26,7 +26,6 @@
 import org.apache.dolphinscheduler.common.enums.UserType;
 import org.apache.dolphinscheduler.common.utils.SnowFlakeUtils;
 import org.apache.dolphinscheduler.common.utils.SnowFlakeUtils.SnowFlakeException;
-import org.apache.dolphinscheduler.common.utils.CollectionUtils;
 import org.apache.dolphinscheduler.dao.entity.ProcessDefinition;
 import org.apache.dolphinscheduler.dao.entity.Project;
 import org.apache.dolphinscheduler.dao.entity.ProjectUser;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/TaskDefinitionServiceImpl.java
Patch:
@@ -230,7 +230,6 @@ public Map<String, Object> updateTaskDefinition(User loginUser, String projectNa
         return result;
     }
 
-
     public void checkTaskNode(Map<String, Object> result, TaskNode taskNode, String taskDefinitionJson) {
         if (taskNode == null) {
             logger.error("taskDefinitionJson is not valid json");

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/TimeoutFlag.java
Patch:
@@ -29,8 +29,7 @@ public enum TimeoutFlag {
     CLOSE(0, "close"),
     OPEN(1, "open");
 
-
-    TimeoutFlag(int code, String desc){
+    TimeoutFlag(int code, String desc) {
         this.code = code;
         this.desc = desc;
     }

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/ProcessDefinitionLog.java
Patch:
@@ -70,7 +70,6 @@ public ProcessDefinitionLog(ProcessDefinition processDefinition) {
         this.setWarningGroupId(processDefinition.getWarningGroupId());
     }
 
-
     public int getOperator() {
         return operator;
     }

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/ProcessTaskRelationLog.java
Patch:
@@ -60,7 +60,6 @@ public ProcessTaskRelationLog(ProcessTaskRelation processTaskRelation) {
         this.setUpdateTime(processTaskRelation.getUpdateTime());
     }
 
-
     public int getOperator() {
         return operator;
     }

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinition.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.dao.entity;
 
 import org.apache.dolphinscheduler.common.enums.Flag;

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/ProcessTaskRelationMapper.java
Patch:
@@ -21,7 +21,6 @@
 
 import org.apache.ibatis.annotations.Param;
 
-import java.util.Collection;
 import java.util.List;
 
 import com.baomidou.mybatisplus.core.mapper.BaseMapper;

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessService.java
Patch:
@@ -2119,7 +2119,6 @@ public String formatTaskAppId(TaskInstance taskInstance) {
         return String.format("%s_%s_%s", definition.getId(), processInstance.getId(), taskInstance.getId());
     }
 
-
     /**
      * switch process definition version to process definition log version
      */

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/Constants.java
Patch:
@@ -789,6 +789,8 @@ private Constants() {
     public static final String SUBPROCESS_INSTANCE_ID = "subProcessInstanceId";
     public static final String PROCESS_INSTANCE_STATE = "processInstanceState";
     public static final String PARENT_WORKFLOW_INSTANCE = "parentWorkflowInstance";
+    public static final String CONDITION_RESULT = "conditionResult";
+    public static final String DEPENDENCE = "dependence";
     public static final String TASK_TYPE = "taskType";
     public static final String TASK_LIST = "taskList";
     public static final String RWXR_XR_X = "rwxr-xr-x";

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/VarPoolUtils.java
Patch:
@@ -39,8 +39,7 @@ public class VarPoolUtils {
      */
     public static void setTaskNodeLocalParams(TaskNode taskNode, Map<String, Object> propToValue) {
         String taskParamsJson = taskNode.getParams();
-        Map<String,Object> taskParams = JSONUtils.parseObject(taskParamsJson, HashMap.class);
-
+        Map<String,Object> taskParams = JSONUtils.toMap(taskParamsJson, String.class, Object.class);
         Object localParamsObject = taskParams.get(LOCALPARAMS);
         if (null != localParamsObject && null != propToValue && propToValue.size() > 0) {
             ArrayList<Object> localParams = (ArrayList)localParamsObject;

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java
Patch:
@@ -63,6 +63,7 @@ public TaskDefinitionLog(TaskDefinition taskDefinition) {
         this.setTimeoutNotifyStrategy(taskDefinition.getTimeoutNotifyStrategy());
         this.setTaskType(taskDefinition.getTaskType());
         this.setTimeout(taskDefinition.getTimeout());
+        this.setDelayTime(taskDefinition.getDelayTime());
         this.setTimeoutFlag(taskDefinition.getTimeoutFlag());
         this.setUpdateTime(taskDefinition.getUpdateTime());
         this.setCreateTime(taskDefinition.getCreateTime());

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskInstance.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.dolphinscheduler.dao.entity;
 
+import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.ExecutionStatus;
 import org.apache.dolphinscheduler.common.enums.Flag;
 import org.apache.dolphinscheduler.common.enums.Priority;
@@ -415,7 +416,8 @@ public void setAppLink(String appLink) {
 
     public DependentParameters getDependency() {
         if (this.dependency == null) {
-            this.dependency = JSONUtils.parseObject(this.getTaskParams(), DependentParameters.class);
+            Map<String, Object> taskParamsMap = JSONUtils.toMap(this.getTaskParams(), String.class, Object.class);
+            this.dependency = JSONUtils.parseObject((String) taskParamsMap.get(Constants.DEPENDENCE), DependentParameters.class);
         }
         return this.dependency;
     }

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/DbConnectType.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.common.enums;
 
 import com.baomidou.mybatisplus.annotation.EnumValue;

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/CommonUtils.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.security.UserGroupInformation;
 
+import java.io.IOException;
 import java.net.URL;
 import java.nio.charset.StandardCharsets;
 
@@ -103,9 +104,9 @@ public static void loadKerberosConf() throws Exception {
      * @param javaSecurityKrb5Conf javaSecurityKrb5Conf
      * @param loginUserKeytabUsername loginUserKeytabUsername
      * @param loginUserKeytabPath loginUserKeytabPath
-     * @throws Exception errors
+     * @throws IOException errors
      */
-    public static void loadKerberosConf(String javaSecurityKrb5Conf, String loginUserKeytabUsername, String loginUserKeytabPath) throws Exception {
+    public static void loadKerberosConf(String javaSecurityKrb5Conf, String loginUserKeytabUsername, String loginUserKeytabPath) throws IOException {
         if (CommonUtils.getKerberosStartupState()) {
             System.setProperty(Constants.JAVA_SECURITY_KRB5_CONF, StringUtils.defaultIfBlank(javaSecurityKrb5Conf, PropertyUtils.getString(Constants.JAVA_SECURITY_KRB5_CONF_PATH)));
             Configuration configuration = new Configuration();

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/DependResult.java
Patch:
@@ -26,6 +26,7 @@ public enum DependResult {
      * 0 success
      * 1 waiting
      * 2 failed
+     * 3 non execution
      */
-    SUCCESS, WAITING, FAILED
+    SUCCESS, WAITING, FAILED, NON_EXEC
 }

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskInstance.java
Patch:
@@ -241,7 +241,6 @@ public class TaskInstance implements Serializable {
     /**
      * task params
      */
-    @TableField(exist = false)
     private String taskParams;
 
     public void init(String host, Date startTime, String executePath) {

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessService.java
Patch:
@@ -1247,7 +1247,6 @@ public TaskInstance submitTaskInstanceToDB(TaskInstance taskInstance, ProcessIns
             if (taskInstance.isSubProcess()) {
                 taskInstance.setRetryTimes(taskInstance.getRetryTimes() + 1);
             } else {
-
                 if (processInstanceState != ExecutionStatus.READY_STOP
                         && processInstanceState != ExecutionStatus.READY_PAUSE) {
                     // failure task set invalid

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessService.java
Patch:
@@ -1264,7 +1264,8 @@ private boolean checkProcessStrategy(TaskInstance taskInstance) {
         List<TaskInstance> taskInstances = this.findValidTaskListByProcessId(taskInstance.getProcessInstanceId());
 
         for (TaskInstance task : taskInstances) {
-            if (task.getState() == ExecutionStatus.FAILURE) {
+            if (task.getState() == ExecutionStatus.FAILURE
+                    && task.getRetryTimes() >= task.getMaxRetryTimes()) {
                 return false;
             }
         }

File: dolphinscheduler-common/src/test/java/org/apache/dolphinscheduler/common/utils/LoggerUtilsTest.java
Patch:
@@ -42,7 +42,7 @@ public class LoggerUtilsTest {
     @Test
     public void buildTaskId() {
 
-        String taskId = LoggerUtils.buildTaskId(LoggerUtils.TASK_LOGGER_INFO_PREFIX, 4084, 15210);
+        String taskId = LoggerUtils.buildTaskId(LoggerUtils.TASK_LOGGER_INFO_PREFIX, 798L,1,4084, 15210);
 
         Assert.assertEquals(" - [taskAppId=TASK-79-4084-15210]", taskId);
     }

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/ConditionsTaskExecThread.java
Patch:
@@ -68,6 +68,8 @@ public Boolean submitWaitComplete() {
         try{
             this.taskInstance = submit();
             logger = LoggerFactory.getLogger(LoggerUtils.buildTaskId(LoggerUtils.TASK_LOGGER_INFO_PREFIX,
+                    processInstance.getProcessDefinitionCode(),
+                    processInstance.getProcessDefinitionVersion(),
                     taskInstance.getProcessInstanceId(),
                     taskInstance.getId()));
             String threadLoggerInfoName = String.format(Constants.TASK_LOG_INFO_FORMAT, processService.formatTaskAppId(this.taskInstance));

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/DependentTaskExecThread.java
Patch:
@@ -82,6 +82,8 @@ public Boolean submitWaitComplete() {
             logger.info("dependent task start");
             this.taskInstance = submit();
             logger = LoggerFactory.getLogger(LoggerUtils.buildTaskId(LoggerUtils.TASK_LOGGER_INFO_PREFIX,
+                    processInstance.getProcessDefinitionCode(),
+                    processInstance.getProcessDefinitionVersion(),
                     taskInstance.getProcessInstanceId(),
                     taskInstance.getId()));
             String threadLoggerInfoName = String.format(Constants.TASK_LOG_INFO_FORMAT, processService.formatTaskAppId(this.taskInstance));

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/worker/sql/SqlExecutorTest.java
Patch:
@@ -114,6 +114,8 @@ private void sharedTestSqlTask(String nodeName, String taskAppId, String tenantC
 
         // custom logger
         Logger taskLogger = LoggerFactory.getLogger(LoggerUtils.buildTaskId(LoggerUtils.TASK_LOGGER_INFO_PREFIX,
+                1L,
+                1,
                 taskInstance.getProcessInstanceId(),
                 taskInstance.getId()));
 

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/model/TaskNode.java
Patch:
@@ -204,7 +204,6 @@ public List<String> getDepList() {
 
   public void setDepList(List<String> depList) throws JsonProcessingException {
     this.depList = depList;
-    this.preTasks = JSONUtils.toJsonString(depList);
   }
 
   public String getLoc() {

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/ParameterUtils.java
Patch:
@@ -45,7 +45,7 @@ public class ParameterUtils {
 
     private static final Logger logger = LoggerFactory.getLogger(ParameterUtils.class);
 
-    private static final String DATE_PARSE_PATTERN = "\\$\\[([^\\]]+)]";
+    private static final String DATE_PARSE_PATTERN = "\\$\\[([^\\$\\]]+)]";
 
     private static final String DATE_START_PATTERN = "^[0-9]";
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProcessDefinitionService.java
Patch:
@@ -276,17 +276,17 @@ Map<String, Object> switchProcessDefinitionVersion(User loginUser, String projec
             , int processDefinitionId, long version);
 
     /**
-     * query the pagination versions info by one certain process definition id
+     * query the pagination versions info by one certain process definition code
      *
      * @param loginUser login user info to check auth
      * @param projectName process definition project name
      * @param pageNo page number
      * @param pageSize page size
-     * @param processDefinitionId process definition id
+     * @param processDefinitionCode process definition code
      * @return the pagination process definition versions info of the certain process definition
      */
     Map<String, Object> queryProcessDefinitionVersions(User loginUser, String projectName,
-                                                       int pageNo, int pageSize, int processDefinitionId);
+                                                       int pageNo, int pageSize, long processDefinitionCode);
 
     /**
      * delete one certain process definition by version number and process definition id

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/AbstractControllerTest.java
Patch:
@@ -38,7 +38,6 @@
 /**
  * abstract controller test
  */
-@Ignore
 @RunWith(SpringRunner.class)
 @SpringBootTest(classes = ApiApplicationServer.class)
 public class AbstractControllerTest {
@@ -64,7 +63,7 @@ public void setUp() {
     }
 
     @After
-    public void after(){
+    public void after() throws Exception {
         sessionService.signOut("127.0.0.1", user);
     }
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProcessDefinitionServiceImpl.java
Patch:
@@ -744,7 +744,7 @@ private void addExportTaskNodeSpecialParam(ProcessData processData) {
      * @return if task has sub process return true else false
      */
     private boolean checkTaskHasSubProcess(String taskType) {
-        return taskType.equals(TaskType.SUB_PROCESS.name());
+        return taskType.equals(TaskType.SUB_PROCESS.getDesc());
     }
 
     /**

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProcessInstanceServiceImpl.java
Patch:
@@ -329,7 +329,7 @@ public Map<String, Object> queryTaskListByProcessId(User loginUser, String proje
      */
     private void addDependResultForTaskList(List<TaskInstance> taskInstanceList) throws IOException {
         for (TaskInstance taskInstance : taskInstanceList) {
-            if (taskInstance.getTaskType().equalsIgnoreCase(TaskType.DEPENDENT.toString())) {
+            if (TaskType.DEPENDENT.getDesc().equalsIgnoreCase(taskInstance.getTaskType())) {
                 Result<String> logResult = loggerService.queryLog(
                         taskInstance.getId(), Constants.LOG_QUERY_SKIP_LINE_NUMBER, Constants.LOG_QUERY_LIMIT);
                 if (logResult.getCode() == Status.SUCCESS.ordinal()) {

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/utils/exportprocess/DataSourceParam.java
Patch:
@@ -78,7 +78,7 @@ public JsonNode addImportSpecialParam(JsonNode taskNode) {
      */
     @Override
     public void afterPropertiesSet() {
-        TaskNodeParamFactory.register(TaskType.SQL.name(), this);
-        TaskNodeParamFactory.register(TaskType.PROCEDURE.name(), this);
+        TaskNodeParamFactory.register(TaskType.SQL.getDesc(), this);
+        TaskNodeParamFactory.register(TaskType.PROCEDURE.getDesc(), this);
     }
 }
\ No newline at end of file

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/utils/exportprocess/DependentParam.java
Patch:
@@ -109,6 +109,6 @@ public JsonNode addImportSpecialParam(JsonNode taskNode) {
      */
     @Override
     public void afterPropertiesSet() {
-        TaskNodeParamFactory.register(TaskType.DEPENDENT.name(), this);
+        TaskNodeParamFactory.register(TaskType.DEPENDENT.getDesc(), this);
     }
 }

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProcessInstanceServiceTest.java
Patch:
@@ -281,7 +281,7 @@ public void testQueryTaskListByProcessId() throws IOException {
         ProcessInstance processInstance = getProcessInstance();
         processInstance.setState(ExecutionStatus.SUCCESS);
         TaskInstance taskInstance = new TaskInstance();
-        taskInstance.setTaskType(TaskType.SHELL.getDescp());
+        taskInstance.setTaskType(TaskType.SHELL.getDesc());
         List<TaskInstance> taskInstanceList = new ArrayList<>();
         taskInstanceList.add(taskInstance);
         Result res = new Result();
@@ -332,15 +332,15 @@ public void testQuerySubProcessInstanceByTaskId() {
 
         //task not sub process
         TaskInstance taskInstance = getTaskInstance();
-        taskInstance.setTaskType(TaskType.HTTP.toString());
+        taskInstance.setTaskType(TaskType.HTTP.getDesc());
         taskInstance.setProcessInstanceId(1);
         when(processService.findTaskInstanceById(1)).thenReturn(taskInstance);
         Map<String, Object> notSubprocessRes = processInstanceService.querySubProcessInstanceByTaskId(loginUser, projectName, 1);
         Assert.assertEquals(Status.TASK_INSTANCE_NOT_SUB_WORKFLOW_INSTANCE, notSubprocessRes.get(Constants.STATUS));
 
         //sub process not exist
         TaskInstance subTask = getTaskInstance();
-        subTask.setTaskType(TaskType.SUB_PROCESS.toString());
+        subTask.setTaskType(TaskType.SUB_PROCESS.getDesc());
         subTask.setProcessInstanceId(1);
         when(processService.findTaskInstanceById(subTask.getId())).thenReturn(subTask);
         when(processService.findSubProcessInstance(subTask.getProcessInstanceId(), subTask.getId())).thenReturn(null);

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/model/TaskNode.java
Patch:
@@ -360,7 +360,7 @@ public TaskTimeoutParameter getTaskTimeoutParameter() {
     }
 
     public boolean isConditionsTask() {
-        return TaskType.CONDITIONS.toString().equalsIgnoreCase(this.getType());
+        return TaskType.CONDITIONS.getDesc().equalsIgnoreCase(this.getType());
     }
 
     public List<PreviousTaskNode> getPreTaskNodeList() {

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java
Patch:
@@ -17,11 +17,11 @@
 
 package org.apache.dolphinscheduler.dao.entity;
 
+import java.util.Date;
+
 import com.baomidou.mybatisplus.annotation.TableName;
 import com.fasterxml.jackson.annotation.JsonFormat;
 
-import java.util.Date;
-
 /**
  * task definition log
  */

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/TaskDefinitionLogMapperTest.java
Patch:
@@ -63,7 +63,7 @@ public TaskDefinitionLog insertOne(int userId) {
         taskDefinition.setCode(888888L);
         taskDefinition.setName("unit-test");
         taskDefinition.setProjectCode(1L);
-        taskDefinition.setTaskType(TaskType.SHELL);
+        taskDefinition.setTaskType(TaskType.SHELL.getDesc());
         taskDefinition.setUserId(userId);
         taskDefinition.setVersion(1);
         taskDefinition.setCreateTime(new Date());
@@ -120,7 +120,7 @@ public void testQueryByTaskDefinitions() {
         taskDefinition.setCode(888888L);
         taskDefinition.setName("unit-test");
         taskDefinition.setProjectCode(1L);
-        taskDefinition.setTaskType(TaskType.SHELL);
+        taskDefinition.setTaskType(TaskType.SHELL.getDesc());
         taskDefinition.setUserId(1);
         taskDefinition.setResourceIds("1");
         taskDefinition.setVersion(1);

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/TaskDefinitionMapperTest.java
Patch:
@@ -60,7 +60,7 @@ public TaskDefinition insertOne(int userId) {
         taskDefinition.setCode(888888L);
         taskDefinition.setName("unit-test");
         taskDefinition.setProjectCode(1L);
-        taskDefinition.setTaskType(TaskType.SHELL);
+        taskDefinition.setTaskType(TaskType.SHELL.getDesc());
         taskDefinition.setUserId(userId);
         taskDefinition.setResourceIds("1");
         taskDefinition.setVersion(1);

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterExecThread.java
Patch:
@@ -484,7 +484,7 @@ private TaskInstance createTaskInstance(ProcessInstance processInstance, String
             // process instance id
             taskInstance.setProcessInstanceId(processInstance.getId());
             // task instance type
-            taskInstance.setTaskType(taskNode.getType());
+            taskInstance.setTaskType(taskNode.getType().toUpperCase());
             // task instance whether alert
             taskInstance.setAlertFlag(Flag.NO);
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/processor/TaskExecuteProcessor.java
Patch:
@@ -200,7 +200,7 @@ private TaskExecuteAckCommand buildAckCommand(TaskExecutionContext taskExecution
         ackCommand.setLogPath(LogUtils.getTaskLogPath(taskExecutionContext));
         ackCommand.setHost(taskExecutionContext.getHost());
         ackCommand.setStartTime(taskExecutionContext.getStartTime());
-        if (taskExecutionContext.getTaskType().equals(TaskType.SQL.name()) || taskExecutionContext.getTaskType().equals(TaskType.PROCEDURE.name())) {
+        if (TaskType.SQL.getDesc().equalsIgnoreCase(taskExecutionContext.getTaskType()) || TaskType.PROCEDURE.getDesc().equalsIgnoreCase(taskExecutionContext.getTaskType())) {
             ackCommand.setExecutePath(null);
         } else {
             ackCommand.setExecutePath(taskExecutionContext.getExecutePath());

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/sql/SqlTask.java
Patch:
@@ -429,8 +429,8 @@ private void close(ResultSet resultSet,
      */
     private PreparedStatement prepareStatementAndBind(Connection connection, SqlBinds sqlBinds) throws Exception {
         // is the timeout set
-        boolean timeoutFlag = TaskTimeoutStrategy.of(taskExecutionContext.getTaskTimeoutStrategy()) == TaskTimeoutStrategy.FAILED
-                || TaskTimeoutStrategy.of(taskExecutionContext.getTaskTimeoutStrategy()) == TaskTimeoutStrategy.WARNFAILED;
+        boolean timeoutFlag = taskExecutionContext.getTaskTimeoutStrategy() == TaskTimeoutStrategy.FAILED
+                || taskExecutionContext.getTaskTimeoutStrategy() == TaskTimeoutStrategy.WARNFAILED;
         PreparedStatement stmt = connection.prepareStatement(sqlBinds.getSql());
         if (timeoutFlag) {
             stmt.setQueryTimeout(taskExecutionContext.getTaskTimeout());

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/master/runner/MasterTaskExecThreadTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.dolphinscheduler.server.master.runner;
 
 import org.apache.dolphinscheduler.common.enums.ExecutionStatus;
+import org.apache.dolphinscheduler.common.enums.TaskType;
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
 import org.apache.dolphinscheduler.server.registry.ZookeeperRegistryCenter;
 import org.apache.dolphinscheduler.service.bean.SpringApplicationContext;
@@ -111,7 +112,7 @@ public void testPauseTask(){
 
     private TaskInstance getTaskInstance(){
         TaskInstance taskInstance = new TaskInstance();
-        taskInstance.setTaskType("SHELL");
+        taskInstance.setTaskType(TaskType.SHELL.getDesc());
         taskInstance.setId(252612);
         taskInstance.setName("C");
         taskInstance.setProcessInstanceId(10111);

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/worker/processor/TaskExecuteProcessorTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.dolphinscheduler.server.worker.processor;
 
 import org.apache.dolphinscheduler.common.enums.ExecutionStatus;
+import org.apache.dolphinscheduler.common.enums.TaskType;
 import org.apache.dolphinscheduler.common.thread.ThreadUtils;
 import org.apache.dolphinscheduler.common.utils.FileUtils;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
@@ -171,7 +172,7 @@ public TaskExecutionContext getTaskExecutionContext() {
         taskExecutionContext.setProcessId(12345);
         taskExecutionContext.setProcessInstanceId(1);
         taskExecutionContext.setTaskInstanceId(1);
-        taskExecutionContext.setTaskType("sql");
+        taskExecutionContext.setTaskType(TaskType.SQL.getDesc());
         taskExecutionContext.setFirstSubmitTime(new Date());
         taskExecutionContext.setDelayTime(0);
         taskExecutionContext.setLogPath("/tmp/test.log");

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/worker/runner/WorkerManagerThreadTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.dolphinscheduler.server.worker.runner;
 
 import org.apache.dolphinscheduler.common.enums.ExecutionStatus;
+import org.apache.dolphinscheduler.common.enums.TaskType;
 import org.apache.dolphinscheduler.common.model.TaskNode;
 import org.apache.dolphinscheduler.common.task.AbstractParameters;
 import org.apache.dolphinscheduler.common.thread.Stopper;
@@ -82,7 +83,7 @@ public void before() {
         taskExecutionContext.setProcessInstanceId(1);
         taskExecutionContext.setTaskInstanceId(1);
         taskExecutionContext.setTenantCode("test");
-        taskExecutionContext.setTaskType("");
+        taskExecutionContext.setTaskType(TaskType.SHELL.getDesc());
         taskExecutionContext.setFirstSubmitTime(new Date());
         taskExecutionContext.setDelayTime(0);
         taskExecutionContext.setLogPath("/tmp/test.log");

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/worker/task/ShellTaskReturnTest.java
Patch:
@@ -19,9 +19,8 @@
 
 import static org.mockito.ArgumentMatchers.anyString;
 
+import org.apache.dolphinscheduler.common.enums.TaskType;
 import org.apache.dolphinscheduler.server.entity.TaskExecutionContext;
-import org.apache.dolphinscheduler.server.worker.task.CommandExecuteResult;
-import org.apache.dolphinscheduler.server.worker.task.ShellCommandExecutor;
 import org.apache.dolphinscheduler.server.worker.task.shell.ShellTask;
 import org.apache.dolphinscheduler.server.worker.task.shell.ShellTaskTest;
 
@@ -61,7 +60,7 @@ public void before() throws Exception {
         taskExecutionContext = new TaskExecutionContext();
         taskExecutionContext.setTaskInstanceId(1);
         taskExecutionContext.setTaskName("kris test");
-        taskExecutionContext.setTaskType("SHELL");
+        taskExecutionContext.setTaskType(TaskType.SHELL.getDesc());
         taskExecutionContext.setHost("127.0.0.1:1234");
         taskExecutionContext.setExecutePath("/tmp");
         taskExecutionContext.setLogPath("/log");

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProcessInstanceServiceImpl.java
Patch:
@@ -209,6 +209,9 @@ public Map<String, Object> queryProcessInstanceById(User loginUser, String proje
             putMsg(result, Status.PROCESS_DEFINE_NOT_EXIST, processId);
         } else {
             processInstance.setWarningGroupId(processDefinition.getWarningGroupId());
+            processInstance.setConnects(processDefinition.getConnects());
+            processInstance.setLocations(processDefinition.getLocations());
+
             ProcessData processData = processService.genProcessData(processDefinition);
             processInstance.setProcessInstanceJson(JSONUtils.toJsonString(processData));
             result.put(DATA_LIST, processInstance);

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/ProcessInstance.java
Patch:
@@ -188,11 +188,13 @@ public class ProcessInstance {
     /**
      * task locations for web
      */
+    @TableField(exist = false)
     private String locations;
 
     /**
      * task connects for web
      */
+    @TableField(exist = false)
     private String connects;
 
     /**

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/MasterServer.java
Patch:
@@ -28,7 +28,7 @@
 import org.apache.dolphinscheduler.server.master.processor.TaskKillResponseProcessor;
 import org.apache.dolphinscheduler.server.master.processor.TaskResponseProcessor;
 import org.apache.dolphinscheduler.server.master.runner.MasterSchedulerService;
-import org.apache.dolphinscheduler.server.zk.ZKMasterClient;
+import org.apache.dolphinscheduler.server.master.zk.ZKMasterClient;
 import org.apache.dolphinscheduler.service.bean.SpringApplicationContext;
 import org.apache.dolphinscheduler.service.quartz.QuartzExecutors;
 
@@ -117,7 +117,8 @@ public void run() {
         this.nettyRemotingServer.start();
 
         // self tolerant
-        this.zkMasterClient.start(this);
+        this.zkMasterClient.start();
+        this.zkMasterClient.setStoppable(this);
 
         // scheduler start
         this.masterSchedulerService.start();

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/dispatch/executor/NettyExecutorManager.java
Patch:
@@ -29,7 +29,7 @@
 import org.apache.dolphinscheduler.server.master.processor.TaskAckProcessor;
 import org.apache.dolphinscheduler.server.master.processor.TaskKillResponseProcessor;
 import org.apache.dolphinscheduler.server.master.processor.TaskResponseProcessor;
-import org.apache.dolphinscheduler.server.registry.ServerNodeManager;
+import org.apache.dolphinscheduler.server.master.registry.ServerNodeManager;
 
 import org.apache.commons.collections.CollectionUtils;
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/dispatch/host/CommonHostManager.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.dolphinscheduler.server.master.dispatch.context.ExecutionContext;
 import org.apache.dolphinscheduler.server.master.dispatch.enums.ExecutorType;
 import org.apache.dolphinscheduler.server.master.dispatch.host.assign.HostWorker;
-import org.apache.dolphinscheduler.server.registry.ServerNodeManager;
+import org.apache.dolphinscheduler.server.master.registry.ServerNodeManager;
 
 import java.util.ArrayList;
 import java.util.Collection;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/registry/ServerNodeManager.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.server.registry;
+package org.apache.dolphinscheduler.server.master.registry;
 
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.ZKNodeType;
@@ -24,6 +24,7 @@
 import org.apache.dolphinscheduler.dao.entity.WorkerGroup;
 import org.apache.dolphinscheduler.dao.mapper.WorkerGroupMapper;
 import org.apache.dolphinscheduler.remote.utils.NamedThreadFactory;
+import org.apache.dolphinscheduler.server.registry.ZookeeperRegistryCenter;
 import org.apache.dolphinscheduler.service.zk.AbstractListener;
 import org.apache.dolphinscheduler.service.zk.AbstractZKClient;
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterSchedulerService.java
Patch:
@@ -27,8 +27,8 @@
 import org.apache.dolphinscheduler.remote.NettyRemotingClient;
 import org.apache.dolphinscheduler.remote.config.NettyClientConfig;
 import org.apache.dolphinscheduler.server.master.config.MasterConfig;
+import org.apache.dolphinscheduler.server.master.zk.ZKMasterClient;
 import org.apache.dolphinscheduler.server.utils.AlertManager;
-import org.apache.dolphinscheduler.server.zk.ZKMasterClient;
 import org.apache.dolphinscheduler.service.process.ProcessService;
 
 import org.apache.curator.framework.imps.CuratorFrameworkState;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/WorkerServer.java
Patch:
@@ -55,9 +55,7 @@
         @ComponentScan.Filter(type = FilterType.REGEX, pattern = {
                 "org.apache.dolphinscheduler.server.master.*",
                 "org.apache.dolphinscheduler.server.monitor.*",
-                "org.apache.dolphinscheduler.server.log.*",
-                "org.apache.dolphinscheduler.server.zk.ZKMasterClient",
-                "org.apache.dolphinscheduler.server.registry.ServerNodeManager"
+                "org.apache.dolphinscheduler.server.log.*"
         })
 })
 @EnableTransactionManagement

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/master/consumer/TaskPriorityQueueConsumerTest.java
Patch:
@@ -38,11 +38,11 @@
 import org.apache.dolphinscheduler.server.master.dispatch.ExecutorDispatcher;
 import org.apache.dolphinscheduler.server.master.dispatch.executor.NettyExecutorManager;
 import org.apache.dolphinscheduler.server.master.registry.MasterRegistry;
+import org.apache.dolphinscheduler.server.master.registry.ServerNodeManager;
+import org.apache.dolphinscheduler.server.master.zk.ZKMasterClient;
 import org.apache.dolphinscheduler.server.registry.DependencyConfig;
-import org.apache.dolphinscheduler.server.registry.ServerNodeManager;
 import org.apache.dolphinscheduler.server.registry.ZookeeperRegistryCenter;
 import org.apache.dolphinscheduler.server.zk.SpringZKServer;
-import org.apache.dolphinscheduler.server.zk.ZKMasterClient;
 import org.apache.dolphinscheduler.service.bean.SpringApplicationContext;
 import org.apache.dolphinscheduler.service.process.ProcessService;
 import org.apache.dolphinscheduler.service.queue.TaskPriority;

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/master/dispatch/ExecutorDispatcherTest.java
Patch:
@@ -23,8 +23,8 @@
 import org.apache.dolphinscheduler.server.master.dispatch.context.ExecutionContext;
 import org.apache.dolphinscheduler.server.master.dispatch.exceptions.ExecuteException;
 import org.apache.dolphinscheduler.server.master.dispatch.executor.NettyExecutorManager;
+import org.apache.dolphinscheduler.server.master.registry.ServerNodeManager;
 import org.apache.dolphinscheduler.server.registry.DependencyConfig;
-import org.apache.dolphinscheduler.server.registry.ServerNodeManager;
 import org.apache.dolphinscheduler.server.registry.ZookeeperRegistryCenter;
 import org.apache.dolphinscheduler.server.utils.ExecutionContextTestUtils;
 import org.apache.dolphinscheduler.server.worker.config.WorkerConfig;

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/master/dispatch/executor/NettyExecutorManagerTest.java
Patch:
@@ -30,8 +30,8 @@
 import org.apache.dolphinscheduler.server.master.dispatch.context.ExecutionContext;
 import org.apache.dolphinscheduler.server.master.dispatch.enums.ExecutorType;
 import org.apache.dolphinscheduler.server.master.dispatch.exceptions.ExecuteException;
+import org.apache.dolphinscheduler.server.master.registry.ServerNodeManager;
 import org.apache.dolphinscheduler.server.registry.DependencyConfig;
-import org.apache.dolphinscheduler.server.registry.ServerNodeManager;
 import org.apache.dolphinscheduler.server.registry.ZookeeperRegistryCenter;
 import org.apache.dolphinscheduler.server.worker.config.WorkerConfig;
 import org.apache.dolphinscheduler.server.worker.processor.TaskExecuteProcessor;

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/master/dispatch/host/RoundRobinHostManagerTest.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.dolphinscheduler.common.utils.StringUtils;
 import org.apache.dolphinscheduler.remote.utils.Host;
 import org.apache.dolphinscheduler.server.master.dispatch.context.ExecutionContext;
-import org.apache.dolphinscheduler.server.registry.ServerNodeManager;
+import org.apache.dolphinscheduler.server.master.registry.ServerNodeManager;
 import org.apache.dolphinscheduler.server.utils.ExecutionContextTestUtils;
 
 import org.junit.Assert;

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/worker/processor/TaskCallbackServiceTest.java
Patch:
@@ -35,7 +35,7 @@
 import org.apache.dolphinscheduler.server.master.processor.TaskResponseProcessor;
 import org.apache.dolphinscheduler.server.master.processor.queue.TaskResponseService;
 import org.apache.dolphinscheduler.server.master.registry.MasterRegistry;
-import org.apache.dolphinscheduler.server.registry.ServerNodeManager;
+import org.apache.dolphinscheduler.server.master.registry.ServerNodeManager;
 import org.apache.dolphinscheduler.server.registry.ZookeeperRegistryCenter;
 import org.apache.dolphinscheduler.server.worker.cache.impl.TaskExecutionContextCacheManagerImpl;
 import org.apache.dolphinscheduler.server.worker.config.WorkerConfig;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java
Patch:
@@ -209,6 +209,7 @@ public enum Status {
     CREATE_WORKER_GROUP_FORBIDDEN_IN_DOCKER(10175, "create worker group forbidden in docker ", "创建worker分组在docker中禁止"),
     DELETE_WORKER_GROUP_FORBIDDEN_IN_DOCKER(10176, "delete worker group forbidden in docker ", "删除worker分组在docker中禁止"),
     WORKER_ADDRESS_INVALID(10177, "worker address {0} invalid", "worker地址[{0}]无效"),
+    QUERY_WORKER_ADDRESS_LIST_FAIL(10178, "query worker address list fail ", "查询worker地址列表失败"),
 
     UDF_FUNCTION_NOT_EXIST(20001, "UDF function not found", "UDF函数不存在"),
     UDF_FUNCTION_EXISTS(20002, "UDF function already exists", "UDF函数已存在"),

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/NetUtils.java
Patch:
@@ -86,6 +86,9 @@ public static String getHost(InetAddress inetAddress) {
                     if (STS_PATTERN.matcher(host).find()) {
                         return String.format("%s.%s", host, host.replaceFirst("\\d+$", "headless"));
                     }
+                } else if (canonicalHost.contains(".")) {
+                    String[] items = canonicalHost.split("\\.");
+                    return String.format("%s.%s", items[0], items[1]);
                 }
                 return canonicalHost;
             }

File: dolphinscheduler-common/src/test/java/org/apache/dolphinscheduler/common/utils/NetUtilsTest.java
Patch:
@@ -50,7 +50,7 @@ public void testGetHost() throws Exception {
         when(address.getHostAddress()).thenReturn("172.17.0.15");
         assertEquals("172.17.0.15", NetUtils.getHost(address));
         CommonTest.setFinalStatic(Constants.class.getDeclaredField("KUBERNETES_MODE"), true);
-        assertEquals("dolphinscheduler-worker-0.dolphinscheduler-worker-headless.default.svc.cluster.local", NetUtils.getHost(address));
+        assertEquals("dolphinscheduler-worker-0.dolphinscheduler-worker-headless", NetUtils.getHost(address));
         address = mock(InetAddress.class);
         when(address.getCanonicalHostName()).thenReturn("dolphinscheduler-worker-0");
         when(address.getHostName()).thenReturn("dolphinscheduler-worker-0");

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/dispatch/host/HostManager.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.dolphinscheduler.server.master.dispatch.host;
 
-
 import org.apache.dolphinscheduler.remote.utils.Host;
 import org.apache.dolphinscheduler.server.master.dispatch.context.ExecutionContext;
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/dispatch/host/RandomHostManager.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.Collection;
 
 /**
- *  round robin host manager
+ *  random host manager
  */
 public class RandomHostManager extends CommonHostManager {
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/dispatch/host/RoundRobinHostManager.java
Patch:
@@ -22,7 +22,6 @@
 
 import java.util.Collection;
 
-
 /**
  *  round robin host manager
  */
@@ -36,7 +35,7 @@ public class RoundRobinHostManager extends CommonHostManager {
     /**
      * set round robin
      */
-    public RoundRobinHostManager(){
+    public RoundRobinHostManager() {
         this.selector = new RoundRobinSelector();
     }
 

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/master/consumer/TaskPriorityQueueConsumerTest.java
Patch:
@@ -39,7 +39,7 @@
 import org.apache.dolphinscheduler.server.master.dispatch.executor.NettyExecutorManager;
 import org.apache.dolphinscheduler.server.master.registry.MasterRegistry;
 import org.apache.dolphinscheduler.server.registry.DependencyConfig;
-import org.apache.dolphinscheduler.server.registry.ZookeeperNodeManager;
+import org.apache.dolphinscheduler.server.registry.ServerNodeManager;
 import org.apache.dolphinscheduler.server.registry.ZookeeperRegistryCenter;
 import org.apache.dolphinscheduler.server.zk.SpringZKServer;
 import org.apache.dolphinscheduler.server.zk.ZKMasterClient;
@@ -70,7 +70,7 @@
 @RunWith(SpringJUnit4ClassRunner.class)
 @ContextConfiguration(classes = {DependencyConfig.class, SpringApplicationContext.class, SpringZKServer.class, CuratorZookeeperClient.class,
         NettyExecutorManager.class, ExecutorDispatcher.class, ZookeeperRegistryCenter.class, ZKMasterClient.class, TaskPriorityQueueConsumer.class,
-        ZookeeperNodeManager.class, RegisterOperator.class, ZookeeperConfig.class, MasterConfig.class, MasterRegistry.class,
+        ServerNodeManager.class, RegisterOperator.class, ZookeeperConfig.class, MasterConfig.class, MasterRegistry.class,
         CuratorZookeeperClient.class, SpringConnectionFactory.class})
 public class TaskPriorityQueueConsumerTest {
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ExecutorService.java
Patch:
@@ -66,10 +66,10 @@ Map<String, Object> execProcessInstance(User loginUser, String projectName,
      * check whether the process definition can be executed
      *
      * @param processDefinition process definition
-     * @param processDefineId process definition id
+     * @param processDefineCode process definition code
      * @return check result code
      */
-    Map<String, Object> checkProcessDefinitionValid(ProcessDefinition processDefinition, int processDefineId);
+    Map<String, Object> checkProcessDefinitionValid(ProcessDefinition processDefinition, long processDefineCode);
 
     /**
      * do action to process instance：pause, stop, repeat, recover from pause, recover from stop

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProcessInstanceServiceImpl.java
Patch:
@@ -204,11 +204,11 @@ public Map<String, Object> queryProcessInstanceById(User loginUser, String proje
 
         ProcessDefinition processDefinition = processService.findProcessDefinition(processInstance.getProcessDefinitionCode(),
                 processInstance.getProcessDefinitionVersion());
-        processInstance.setWarningGroupId(processDefinition.getWarningGroupId());
 
         if (processDefinition == null) {
             putMsg(result, Status.PROCESS_DEFINE_NOT_EXIST, processId);
         } else {
+            processInstance.setWarningGroupId(processDefinition.getWarningGroupId());
             ProcessData processData = processService.genProcessData(processDefinition);
             processInstance.setProcessInstanceJson(JSONUtils.toJsonString(processData));
             result.put(DATA_LIST, processInstance);

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ExecutorService2Test.java
Patch:
@@ -117,7 +117,6 @@ public void init() {
 
         // processInstance
         processInstance.setId(processInstanceId);
-        processInstance.setProcessDefinitionId(processDefinitionId);
         processInstance.setState(ExecutionStatus.FAILURE);
         processInstance.setExecutorId(userId);
         processInstance.setTenantId(tenantId);

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/ProcessInstanceMapperTest.java
Patch:
@@ -275,7 +275,6 @@ public void testCountInstanceStateByUser() {
 
         processDefinitionMapper.insert(processDefinition);
         ProcessInstance processInstance = insertOne();
-        processInstance.setProcessDefinitionId(processDefinition.getId());
         int update = processInstanceMapper.updateById(processInstance);
 
         Long[] projectCodes = new Long[]{processDefinition.getProjectCode()};

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/zk/ZKMasterClient.java
Patch:
@@ -347,8 +347,7 @@ private void failoverMaster(String masterHost) {
         logger.info("failover process list size:{} ", needFailoverProcessInstanceList.size());
         //updateProcessInstance host is null and insert into command
         for (ProcessInstance processInstance : needFailoverProcessInstanceList) {
-            logger.info("failover process instance id: {} host:{}",
-                    processInstance.getId(), processInstance.getHost());
+            logger.info("failover process instance id: {} host:{}", processInstance.getId(), processInstance.getHost());
             if (Constants.NULL.equals(processInstance.getHost())) {
                 continue;
             }

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/master/ConditionsTaskTest.java
Patch:
@@ -162,7 +162,6 @@ private TaskNode getTaskNode() {
     private ProcessInstance getProcessInstance() {
         ProcessInstance processInstance = new ProcessInstance();
         processInstance.setId(1000);
-        processInstance.setProcessDefinitionId(1000);
         processInstance.setState(ExecutionStatus.RUNNING_EXECUTION);
 
         return processInstance;

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/master/MasterExecThreadTest.java
Patch:
@@ -88,7 +88,6 @@ public void init() throws Exception {
         Mockito.when(applicationContext.getBean(MasterConfig.class)).thenReturn(config);
 
         processInstance = mock(ProcessInstance.class);
-        Mockito.when(processInstance.getProcessDefinitionId()).thenReturn(processDefinitionId);
         Mockito.when(processInstance.getState()).thenReturn(ExecutionStatus.SUCCESS);
         Mockito.when(processInstance.getHistoryCmd()).thenReturn(CommandType.COMPLEMENT_DATA.toString());
         Mockito.when(processInstance.getIsSubProcess()).thenReturn(Flag.NO);

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/master/SubProcessTaskTest.java
Patch:
@@ -130,7 +130,6 @@ private TaskNode getTaskNode() {
     private ProcessInstance getProcessInstance() {
         ProcessInstance processInstance = new ProcessInstance();
         processInstance.setId(100);
-        processInstance.setProcessDefinitionId(1);
         processInstance.setState(ExecutionStatus.RUNNING_EXECUTION);
 
         return processInstance;
@@ -139,7 +138,6 @@ private ProcessInstance getProcessInstance() {
     private ProcessInstance getSubProcessInstance(ExecutionStatus executionStatus) {
         ProcessInstance processInstance = new ProcessInstance();
         processInstance.setId(102);
-        processInstance.setProcessDefinitionId(2);
         processInstance.setState(executionStatus);
 
         return processInstance;

File: dolphinscheduler-service/src/test/java/org/apache/dolphinscheduler/service/process/ProcessServiceTest.java
Patch:
@@ -109,7 +109,6 @@ public class ProcessServiceTest {
     public void testCreateSubCommand() {
         ProcessService processService = new ProcessService();
         ProcessInstance parentInstance = new ProcessInstance();
-        parentInstance.setProcessDefinitionId(1);
         parentInstance.setWarningType(WarningType.SUCCESS);
         parentInstance.setWarningGroupId(0);
 

File: dolphinscheduler-common/src/test/java/org/apache/dolphinscheduler/common/utils/FileUtilsTest.java
Patch:
@@ -60,8 +60,8 @@ public void testGetUploadFilename() {
 
     @Test
     public void testGetProcessExecDir() {
-        String dir = FileUtils.getProcessExecDir(1, 2, 3, 4);
-        Assert.assertEquals("/tmp/dolphinscheduler/exec/process/1/2/3/4", dir);
+        String dir = FileUtils.getProcessExecDir(1L, 2L, 1, 3, 4);
+        Assert.assertEquals("/tmp/dolphinscheduler/exec/process/1/2_1/3/4", dir);
     }
 
     @Test

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/builder/TaskExecutionContextBuilder.java
Patch:
@@ -88,8 +88,9 @@ public TaskExecutionContextBuilder buildProcessInstanceRelatedInfo(ProcessInstan
      * @return TaskExecutionContextBuilder
      */
     public TaskExecutionContextBuilder buildProcessDefinitionRelatedInfo(ProcessDefinition processDefinition){
-        taskExecutionContext.setProcessDefineId(processDefinition.getId());
-        taskExecutionContext.setProjectId(processDefinition.getProjectId());
+        taskExecutionContext.setProcessDefineCode(processDefinition.getCode());
+        taskExecutionContext.setProcessDefineVersion(processDefinition.getVersion());
+        taskExecutionContext.setProjectCode(processDefinition.getProjectCode());
         return this;
     }
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/consumer/TaskPriorityQueueConsumer.java
Patch:
@@ -23,7 +23,6 @@
 import org.apache.dolphinscheduler.common.enums.SqoopJobType;
 import org.apache.dolphinscheduler.common.enums.TaskType;
 import org.apache.dolphinscheduler.common.enums.UdfType;
-import org.apache.dolphinscheduler.common.model.TaskNode;
 import org.apache.dolphinscheduler.common.process.ResourceInfo;
 import org.apache.dolphinscheduler.common.task.AbstractParameters;
 import org.apache.dolphinscheduler.common.task.datax.DataxParameters;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterBaseTaskExecThread.java
Patch:
@@ -284,7 +284,7 @@ protected boolean alertTimeout() {
         logger.warn("process id:{} process name:{} task id: {},name:{} execution time out",
                 processInstance.getId(), processInstance.getName(), taskInstance.getId(), taskInstance.getName());
         // send warn mail
-        ProcessDefinition processDefine = processService.findProcessDefineById(processInstance.getProcessDefinitionId());
+        //ProcessDefinition processDefine = processService.findProcessDefineById(processInstance.getProcessDefinitionId());
         alertDao.sendTaskTimeoutAlert(processInstance.getWarningGroupId(), processInstance.getId(), processInstance.getName(),
                 taskInstance.getId(), taskInstance.getName());
         return true;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/processor/TaskExecuteProcessor.java
Patch:
@@ -216,8 +216,9 @@ private TaskExecuteAckCommand buildAckCommand(TaskExecutionContext taskExecution
      * @return execute local path
      */
     private String getExecLocalPath(TaskExecutionContext taskExecutionContext) {
-        return FileUtils.getProcessExecDir(taskExecutionContext.getProjectId(),
-            taskExecutionContext.getProcessDefineId(),
+        return FileUtils.getProcessExecDir(taskExecutionContext.getProjectCode(),
+            taskExecutionContext.getProcessDefineCode(),
+            taskExecutionContext.getProcessDefineVersion(),
             taskExecutionContext.getProcessInstanceId(),
             taskExecutionContext.getTaskInstanceId());
     }

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/runner/TaskExecuteThread.java
Patch:
@@ -150,8 +150,7 @@ public void run() {
             taskExecutionContext.setEnvFile(CommonUtils.getSystemEnvPath());
             taskExecutionContext.setDefinedParams(getGlobalParamsMap());
 
-            taskExecutionContext.setTaskAppId(String.format("%s_%s_%s",
-                    taskExecutionContext.getProcessDefineId(),
+            taskExecutionContext.setTaskAppId(String.format("%s_%s",
                     taskExecutionContext.getProcessInstanceId(),
                     taskExecutionContext.getTaskInstanceId()));
 

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/worker/processor/TaskExecuteProcessorTest.java
Patch:
@@ -136,8 +136,9 @@ public void before() throws Exception {
                 .thenReturn(taskExecutionContext);
 
         PowerMockito.mockStatic(FileUtils.class);
-        PowerMockito.when(FileUtils.getProcessExecDir(taskExecutionContext.getProjectId(),
-                taskExecutionContext.getProcessDefineId(),
+        PowerMockito.when(FileUtils.getProcessExecDir(taskExecutionContext.getProjectCode(),
+                taskExecutionContext.getProcessDefineCode(),
+                taskExecutionContext.getProcessDefineVersion(),
                 taskExecutionContext.getProcessInstanceId(),
                 taskExecutionContext.getTaskInstanceId()))
                 .thenReturn(taskExecutionContext.getExecutePath());
@@ -168,7 +169,6 @@ public void testDelayExecution() {
     public TaskExecutionContext getTaskExecutionContext() {
         TaskExecutionContext taskExecutionContext = new TaskExecutionContext();
         taskExecutionContext.setProcessId(12345);
-        taskExecutionContext.setProcessDefineId(1);
         taskExecutionContext.setProcessInstanceId(1);
         taskExecutionContext.setTaskInstanceId(1);
         taskExecutionContext.setTaskType("sql");

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/worker/runner/TaskExecuteThreadTest.java
Patch:
@@ -75,7 +75,6 @@ public void before() {
         // init task execution context, logger
         taskExecutionContext = new TaskExecutionContext();
         taskExecutionContext.setProcessId(12345);
-        taskExecutionContext.setProcessDefineId(1);
         taskExecutionContext.setProcessInstanceId(1);
         taskExecutionContext.setTaskInstanceId(1);
         taskExecutionContext.setTaskType("");

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/worker/runner/WorkerManagerThreadTest.java
Patch:
@@ -79,7 +79,6 @@ public void before() {
         // init task execution context, logger
         taskExecutionContext = new TaskExecutionContext();
         taskExecutionContext.setProcessId(12345);
-        taskExecutionContext.setProcessDefineId(1);
         taskExecutionContext.setProcessInstanceId(1);
         taskExecutionContext.setTaskInstanceId(1);
         taskExecutionContext.setTenantCode("test");

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/worker/task/TaskManagerTest.java
Patch:
@@ -63,7 +63,6 @@ public void before() {
         // init task execution context, logger
         taskExecutionContext = new TaskExecutionContext();
         taskExecutionContext.setProcessId(12345);
-        taskExecutionContext.setProcessDefineId(1);
         taskExecutionContext.setProcessInstanceId(1);
         taskExecutionContext.setTaskInstanceId(1);
         taskExecutionContext.setTaskType("");

File: dolphinscheduler-common/src/test/java/org/apache/dolphinscheduler/common/utils/LoggerUtilsTest.java
Patch:
@@ -42,7 +42,7 @@ public class LoggerUtilsTest {
     @Test
     public void buildTaskId() {
 
-        String taskId = LoggerUtils.buildTaskId(LoggerUtils.TASK_LOGGER_INFO_PREFIX, 79, 4084, 15210);
+        String taskId = LoggerUtils.buildTaskId(LoggerUtils.TASK_LOGGER_INFO_PREFIX, 4084, 15210);
 
         Assert.assertEquals(" - [taskAppId=TASK-79-4084-15210]", taskId);
     }

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/consumer/TaskPriorityQueueConsumer.java
Patch:
@@ -201,7 +201,7 @@ protected TaskExecutionContext getTaskExecutionContext(int taskInstanceId) {
         TaskType taskType = TaskType.valueOf(taskInstance.getTaskType());
 
 
-        Integer userId = taskInstance.getProcessDefine() == null ? 0 : taskInstance.getProcessDefine().getUserId();
+        int userId = taskInstance.getProcessDefine() == null ? 0 : taskInstance.getProcessDefine().getUserId();
         Tenant tenant = processService.getTenantForProcess(taskInstance.getProcessInstance().getTenantId(), userId);
 
         // verify tenant is null
@@ -396,7 +396,7 @@ protected Map<String, String> getResourceFullNames(TaskInstance taskInstance) {
                 }
 
                 // get the resource id in order to get the resource names in batch
-                Stream<Integer> resourceIdStream = projectResourceFiles.stream().map(resourceInfo -> resourceInfo.getId());
+                Stream<Integer> resourceIdStream = projectResourceFiles.stream().map(ResourceInfo::getId);
                 Set<Integer> resourceIdsSet = resourceIdStream.collect(Collectors.toSet());
 
                 if (CollectionUtils.isNotEmpty(resourceIdsSet)) {

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterBaseTaskExecThread.java
Patch:
@@ -267,10 +267,9 @@ protected Boolean submitWaitComplete() {
      * call
      *
      * @return boolean
-     * @throws Exception exception
      */
     @Override
-    public Boolean call() throws Exception {
+    public Boolean call() {
         this.processInstance = processService.findProcessInstanceById(taskInstance.getProcessInstanceId());
         return submitWaitComplete();
     }

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterExecThread.java
Patch:
@@ -482,8 +482,6 @@ private TaskInstance createTaskInstance(ProcessInstance processInstance, String
             taskInstance.setTaskDefinitionVersion(taskNode.getVersion());
             // task name
             taskInstance.setName(nodeName);
-            // process instance define id
-            taskInstance.setProcessDefinitionId(processInstance.getProcessDefinitionId());
             // task instance state
             taskInstance.setState(ExecutionStatus.SUBMITTED_SUCCESS);
             // process instance id

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/processor/TaskExecuteProcessor.java
Patch:
@@ -133,7 +133,6 @@ public void process(Channel channel, Command command) {
         setTaskCache(taskExecutionContext);
         // custom logger
         Logger taskLogger = LoggerFactory.getLogger(LoggerUtils.buildTaskId(LoggerUtils.TASK_LOGGER_INFO_PREFIX,
-            taskExecutionContext.getProcessDefineId(),
             taskExecutionContext.getProcessInstanceId(),
             taskExecutionContext.getTaskInstanceId()));
 

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/master/ConditionsTaskTest.java
Patch:
@@ -174,7 +174,6 @@ private TaskInstance getTaskInstance(TaskNode taskNode, ProcessInstance processI
         taskInstance.setName(taskNode.getName());
         taskInstance.setTaskType(taskNode.getType());
         taskInstance.setProcessInstanceId(processInstance.getId());
-        taskInstance.setProcessDefinitionId(processInstance.getProcessDefinitionId());
         return taskInstance;
     }
 

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/master/DependentTaskTest.java
Patch:
@@ -382,7 +382,6 @@ private void setupTaskInstance(TaskNode taskNode) {
         taskInstance.setTaskCode(TASK_CODE);
         taskInstance.setTaskDefinitionVersion(TASK_VERSION);
         taskInstance.setProcessInstanceId(processInstance.getId());
-        taskInstance.setProcessDefinitionId(processInstance.getProcessDefinitionId());
         taskInstance.setState(ExecutionStatus.SUBMITTED_SUCCESS);
         taskInstance.setTaskType(taskNode.getType());
         taskInstance.setDependency(JSONUtils.parseObject(taskNode.getDependence(), DependentParameters.class));
@@ -423,7 +422,6 @@ private TaskInstance getTaskInstanceForValidTaskList(
         taskInstance.setId(taskInstanceId);
         taskInstance.setName(taskName);
         taskInstance.setProcessInstanceId(processInstance.getId());
-        taskInstance.setProcessDefinitionId(processInstance.getProcessDefinitionId());
         taskInstance.setState(state);
         return taskInstance;
     }

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/master/SubProcessTaskTest.java
Patch:
@@ -153,7 +153,6 @@ private TaskInstance getTaskInstance(TaskNode taskNode, ProcessInstance processI
         taskInstance.setName(taskNode.getName());
         taskInstance.setTaskType(taskNode.getType());
         taskInstance.setProcessInstanceId(processInstance.getId());
-        taskInstance.setProcessDefinitionId(processInstance.getProcessDefinitionId());
         taskInstance.setState(ExecutionStatus.SUBMITTED_SUCCESS);
         return taskInstance;
     }

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/worker/processor/TaskExecuteProcessorTest.java
Patch:
@@ -112,7 +112,6 @@ public void before() throws Exception {
                 .thenReturn(taskExecutionContextCacheManager);
 
         Logger taskLogger = LoggerFactory.getLogger(LoggerUtils.buildTaskId(LoggerUtils.TASK_LOGGER_INFO_PREFIX,
-                taskExecutionContext.getProcessDefineId(),
                 taskExecutionContext.getProcessInstanceId(),
                 taskExecutionContext.getTaskInstanceId()));
 

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/worker/runner/TaskExecuteThreadTest.java
Patch:
@@ -90,7 +90,6 @@ public void before() {
 
         taskLogger = LoggerFactory.getLogger(LoggerUtils.buildTaskId(
                 LoggerUtils.TASK_LOGGER_INFO_PREFIX,
-                taskExecutionContext.getProcessDefineId(),
                 taskExecutionContext.getProcessInstanceId(),
                 taskExecutionContext.getTaskInstanceId()
         ));

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/worker/runner/WorkerManagerThreadTest.java
Patch:
@@ -95,7 +95,6 @@ public void before() {
 
         taskLogger = LoggerFactory.getLogger(LoggerUtils.buildTaskId(
                 LoggerUtils.TASK_LOGGER_INFO_PREFIX,
-                taskExecutionContext.getProcessDefineId(),
                 taskExecutionContext.getProcessInstanceId(),
                 taskExecutionContext.getTaskInstanceId()
         ));

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/worker/task/TaskManagerTest.java
Patch:
@@ -75,7 +75,6 @@ public void before() {
 
         taskLogger = LoggerFactory.getLogger(LoggerUtils.buildTaskId(
                 LoggerUtils.TASK_LOGGER_INFO_PREFIX,
-                taskExecutionContext.getProcessDefineId(),
                 taskExecutionContext.getProcessInstanceId(),
                 taskExecutionContext.getTaskInstanceId()
         ));

File: dolphinscheduler-service/src/test/java/org/apache/dolphinscheduler/service/process/ProcessServiceTest.java
Patch:
@@ -311,17 +311,14 @@ public void testGetUserById() {
     public void testFormatTaskAppId() {
         TaskInstance taskInstance = new TaskInstance();
         taskInstance.setId(333);
-        taskInstance.setProcessDefinitionId(111);
         taskInstance.setProcessInstanceId(222);
-        Mockito.when(processService.findProcessDefineById(taskInstance.getProcessDefinitionId())).thenReturn(null);
         Mockito.when(processService.findProcessInstanceById(taskInstance.getProcessInstanceId())).thenReturn(null);
         Assert.assertEquals("", processService.formatTaskAppId(taskInstance));
 
         ProcessDefinition processDefinition = new ProcessDefinition();
         processDefinition.setId(111);
         ProcessInstance processInstance = new ProcessInstance();
         processInstance.setId(222);
-        Mockito.when(processService.findProcessDefineById(taskInstance.getProcessDefinitionId())).thenReturn(processDefinition);
         Mockito.when(processService.findProcessInstanceById(taskInstance.getProcessInstanceId())).thenReturn(processInstance);
         Assert.assertEquals("111_222_333", processService.formatTaskAppId(taskInstance));
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/DataSourceServiceImpl.java
Patch:
@@ -488,7 +488,6 @@ public String buildParameter(DbType type, String host,
             separator = ";";
         }
 
-        parameterMap.put(TYPE, connectType);
         parameterMap.put(Constants.ADDRESS, address);
         parameterMap.put(Constants.DATABASE, database);
         parameterMap.put(Constants.JDBC_URL, jdbcUrl);

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/ProcessInstance.java
Patch:
@@ -195,13 +195,11 @@ public class ProcessInstance {
     /**
      * task locations for web
      */
-    @TableField(exist = false)
     private String locations;
 
     /**
      * task connects for web
      */
-    @TableField(exist = false)
     private String connects;
 
     /**

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java
Patch:
@@ -262,6 +262,7 @@ public enum Status {
     EXPORT_PROCESS_DEFINE_BY_ID_ERROR(50028, "export process definition by id error", "导出工作流定义错误"),
     BATCH_EXPORT_PROCESS_DEFINE_BY_IDS_ERROR(50028, "batch export process definition by ids error", "批量导出工作流定义错误"),
     IMPORT_PROCESS_DEFINE_ERROR(50029, "import process definition error", "导入工作流定义错误"),
+    PROCESS_DAG_IS_EMPTY(50030, "process dag can not be empty", "工作流dag不能为空"),
 
     HDFS_NOT_STARTUP(60001, "hdfs not startup", "hdfs未启用"),
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProcessDefinitionServiceImpl.java
Patch:
@@ -1168,9 +1168,9 @@ public Map<String, Object> checkProcessNodeList(ProcessData processData, String
             // Check whether the task node is normal
             List<TaskNode> taskNodes = processData.getTasks();
 
-            if (taskNodes == null) {
+            if (CollectionUtils.isEmpty(taskNodes)) {
                 logger.error("process node info is empty");
-                putMsg(result, Status.DATA_IS_NULL, processDefinitionJson);
+                putMsg(result, Status.PROCESS_DAG_IS_EMPTY);
                 return result;
             }
 

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProcessDefinitionServiceTest.java
Patch:
@@ -679,7 +679,7 @@ public void testCheckProcessNodeList() {
         // task empty
         processData.setTasks(null);
         Map<String, Object> taskNotEmptyRes = processDefinitionService.checkProcessNodeList(processData, processDefinitionJson);
-        Assert.assertEquals(Status.DATA_IS_NULL, taskNotEmptyRes.get(Constants.STATUS));
+        Assert.assertEquals(Status.PROCESS_DAG_IS_EMPTY, taskNotEmptyRes.get(Constants.STATUS));
 
         // task cycle
         String processDefinitionJsonCycle = CYCLE_SHELL_JSON;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProcessDefinitionServiceImpl.java
Patch:
@@ -1108,7 +1108,7 @@ public Map<String, Object> checkProcessNodeList(ProcessData processData, String
 
             // check whether the process definition json is normal
             for (TaskNode taskNode : taskNodes) {
-                if (!CheckUtils.checkTaskNodeParameters(taskNode.getParams(), taskNode.getType())) {
+                if (!CheckUtils.checkTaskNodeParameters(taskNode)) {
                     logger.error("task node {} parameter invalid", taskNode.getName());
                     putMsg(result, Status.PROCESS_NODE_S_PARAMETER_INVALID, taskNode.getName());
                     return result;
@@ -1806,4 +1806,4 @@ public Map<String, Object> deleteByProcessDefinitionIdAndVersion(User loginUser,
         return result;
 
     }
-}
\ No newline at end of file
+}

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/TaskDefinitionServiceImpl.java
Patch:
@@ -237,7 +237,7 @@ public void checkTaskNode(Map<String, Object> result, TaskNode taskNode, String
             putMsg(result, Status.DATA_IS_NOT_VALID, taskDefinitionJson);
             return;
         }
-        if (!CheckUtils.checkTaskNodeParameters(taskNode.getParams(), taskNode.getName())) {
+        if (!CheckUtils.checkTaskNodeParameters(taskNode)) {
             logger.error("task node {} parameter invalid", taskNode.getName());
             putMsg(result, Status.PROCESS_NODE_S_PARAMETER_INVALID, taskNode.getName());
         }

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessService.java
Patch:
@@ -2533,7 +2533,7 @@ public List<TaskNode> genTaskNodeList(Long processCode, int processVersion, Map<
             v.setRunFlag(taskDefinitionLog.getFlag() == Flag.YES ? Constants.FLOWNODE_RUN_FLAG_NORMAL : Constants.FLOWNODE_RUN_FLAG_FORBIDDEN);
             v.setMaxRetryTimes(taskDefinitionLog.getFailRetryTimes());
             v.setRetryInterval(taskDefinitionLog.getFailRetryInterval());
-            v.setParams(taskDefinitionLog.getTaskType() == TaskType.DEPENDENT ? "" : taskDefinitionLog.getTaskParams());
+            v.setParams(taskDefinitionLog.getTaskType() == TaskType.DEPENDENT ? null : taskDefinitionLog.getTaskParams());
             v.setDependence(taskDefinitionLog.getTaskType() == TaskType.DEPENDENT ? taskDefinitionLog.getTaskParams() : null);
             v.setTaskInstancePriority(taskDefinitionLog.getTaskPriority());
             v.setWorkerGroup(taskDefinitionLog.getWorkerGroup());

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ExecutorServiceImpl.java
Patch:
@@ -243,7 +243,8 @@ public Map<String, Object> execute(User loginUser, String projectName, Integer p
             return result;
         }
 
-        ProcessDefinition processDefinition = processService.findProcessDefineById(processInstance.getProcessDefinitionId());
+        ProcessDefinition processDefinition = processService.findProcessDefinition(processInstance.getProcessDefinitionCode(),
+                processInstance.getProcessDefinitionVersion());
         if (executeType != ExecuteType.STOP && executeType != ExecuteType.PAUSE) {
             result = checkProcessDefinitionValid(processDefinition, processInstance.getProcessDefinitionId());
             if (result.get(Constants.STATUS) != Status.SUCCESS) {

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProcessDefinitionServiceImpl.java
Patch:
@@ -204,7 +204,6 @@ public Map<String, Object> createProcessDefinition(User loginUser,
             return result;
         }
 
-        // TODO relationName have ?
         int saveResult = processService.saveProcessDefinition(loginUser, project, processDefinitionName, desc,
                 locations, connects, processData, processDefinition);
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProcessInstanceServiceImpl.java
Patch:
@@ -202,7 +202,8 @@ public Map<String, Object> queryProcessInstanceById(User loginUser, String proje
         }
         ProcessInstance processInstance = processService.findProcessInstanceDetailById(processId);
 
-        ProcessDefinition processDefinition = processService.findProcessDefineById(processInstance.getProcessDefinitionId());
+        ProcessDefinition processDefinition = processService.findProcessDefinition(processInstance.getProcessDefinitionCode(),
+                processInstance.getProcessDefinitionVersion());
         processInstance.setWarningGroupId(processDefinition.getWarningGroupId());
         result.put(DATA_LIST, processInstance);
         putMsg(result, Status.SUCCESS);

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/TenantControllerTest.java
Patch:
@@ -45,7 +45,7 @@ public class TenantControllerTest extends AbstractControllerTest{
     @Test
     public void testCreateTenant() throws Exception {
         MultiValueMap<String, String> paramsMap = new LinkedMultiValueMap<>();
-        paramsMap.add("tenantCode","tenantCode");
+        paramsMap.add("tenantCode","hayden");
         paramsMap.add("queueId","1");
         paramsMap.add("description","tenant description");
 
@@ -124,7 +124,7 @@ public void testVerifyTenantCode() throws Exception {
     @Test
     public void testVerifyTenantCodeExists() throws Exception {
         MultiValueMap<String, String> paramsMap = new LinkedMultiValueMap<>();
-        paramsMap.add("tenantCode", "tenantCode");
+        paramsMap.add("tenantCode", "hayden");
 
         MvcResult mvcResult = mockMvc.perform(get("/tenant/verify-tenant-code")
                 .header(SESSION_ID, sessionId)

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/TenantServiceTest.java
Patch:
@@ -73,7 +73,7 @@ public class TenantServiceTest {
     @Mock
     private UserMapper userMapper;
 
-    private static final String tenantCode = "TenantServiceTest";
+    private static final String tenantCode = "hayden";
 
     @Test
     public void testCreateTenant() {
@@ -85,7 +85,7 @@ public void testCreateTenant() {
             Map<String, Object> result =
                 tenantService.createTenant(getLoginUser(), "%!1111", 1, "TenantServiceTest");
             logger.info(result.toString());
-            Assert.assertEquals(Status.VERIFY_OS_TENANT_CODE_ERROR, result.get(Constants.STATUS));
+            Assert.assertEquals(Status.CHECK_OS_TENANT_CODE_ERROR, result.get(Constants.STATUS));
 
             //check exist
             result = tenantService.createTenant(loginUser, tenantCode, 1, "TenantServiceTest");

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ResourcesServiceImpl.java
Patch:
@@ -367,7 +367,6 @@ public Result<Object> updateResource(User loginUser,
         resource.setDescription(desc);
         resource.setUpdateTime(now);
         if (file != null) {
-            resource.setFileName(file.getOriginalFilename());
             resource.setSize(file.getSize());
         }
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterExecThread.java
Patch:
@@ -65,6 +65,7 @@
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.Date;
+import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/JSONUtils.java
Patch:
@@ -206,7 +206,7 @@ public static String findValue(JsonNode jsonNode, String fieldName) {
             return null;
         }
 
-        return node.toString();
+        return node.asText();
     }
 
     /**

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/AbstractCommandExecutor.java
Patch:
@@ -289,7 +289,7 @@ private boolean softKill(int processId) {
             }
         }
 
-        return process.isAlive();
+        return !process.isAlive();
     }
 
     /**

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/MasterServer.java
Patch:
@@ -43,10 +43,12 @@
 import org.springframework.boot.builder.SpringApplicationBuilder;
 import org.springframework.context.annotation.ComponentScan;
 import org.springframework.context.annotation.FilterType;
+import org.springframework.transaction.annotation.EnableTransactionManagement;
 
 @ComponentScan(value = "org.apache.dolphinscheduler", excludeFilters = {
         @ComponentScan.Filter(type = FilterType.ASSIGNABLE_TYPE, classes = {WorkerServer.class})
 })
+@EnableTransactionManagement
 public class MasterServer implements IStoppable {
 
     /**

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/WorkerServer.java
Patch:
@@ -41,17 +41,17 @@
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-
 import org.springframework.beans.factory.annotation.Autowired;
-
 import org.springframework.boot.WebApplicationType;
 import org.springframework.boot.builder.SpringApplicationBuilder;
 import org.springframework.context.annotation.ComponentScan;
+import org.springframework.transaction.annotation.EnableTransactionManagement;
 
 /**
  * worker server
  */
 @ComponentScan("org.apache.dolphinscheduler")
+@EnableTransactionManagement
 public class WorkerServer implements IStoppable {
 
     /**

File: dolphinscheduler-common/src/test/java/org/apache/dolphinscheduler/common/utils/FileUtilsTest.java
Patch:
@@ -60,10 +60,8 @@ public void testGetUploadFilename() {
 
     @Test
     public void testGetProcessExecDir() {
-        String dir = FileUtils.getProcessExecDir(1,2,3, 4);
+        String dir = FileUtils.getProcessExecDir(1, 2, 3, 4);
         Assert.assertEquals("/tmp/dolphinscheduler/exec/process/1/2/3/4", dir);
-        dir = FileUtils.getProcessExecDir(1,2,3);
-        Assert.assertEquals("/tmp/dolphinscheduler/exec/process/1/2/3", dir);
     }
 
     @Test

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/processor/TaskExecuteProcessor.java
Patch:
@@ -141,7 +141,7 @@ public void process(Channel channel, Command command) {
 
         // local execute path
         String execLocalPath = getExecLocalPath(taskExecutionContext);
-        logger.info("task instance  local execute path : {} ", execLocalPath);
+        logger.info("task instance local execute path : {}", execLocalPath);
         taskExecutionContext.setExecutePath(execLocalPath);
 
         FileUtils.taskLoggerThreadLocal.set(taskLogger);

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/config/MasterConfig.java
Patch:
@@ -37,7 +37,7 @@ public class MasterConfig {
     @Value("${master.task.commit.retryTimes:5}")
     private int masterTaskCommitRetryTimes;
 
-    @Value("${master.dispatch.task.num :3}")
+    @Value("${master.dispatch.task.num:3}")
     private int masterDispatchTaskNumber;
 
     @Value("${master.task.commit.interval:1000}")

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessService.java
Patch:
@@ -2298,6 +2298,7 @@ public ProcessDefinitionLog insertProcessDefinitionLog(User operator, Long proce
                                                            String desc, String locations, String connects) {
         ProcessDefinitionLog processDefinitionLog = new ProcessDefinitionLog();
         Integer version = processDefineLogMapper.queryMaxVersionForDefinition(processDefinitionCode);
+        processDefinitionLog.setUserId(operator.getId());
         processDefinitionLog.setCode(processDefinitionCode);
         processDefinitionLog.setVersion(version == null || version == 0 ? 1 : version);
         processDefinitionLog.setName(processDefinitionName);

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessService.java
Patch:
@@ -2510,7 +2510,7 @@ public List<TaskNode> genTaskNodeList(Long processCode, int processVersion) {
             v.setMaxRetryTimes(taskDefinitionLog.getFailRetryTimes());
             v.setRetryInterval(taskDefinitionLog.getFailRetryInterval());
             v.setParams(taskDefinitionLog.getTaskType() == TaskType.DEPENDENT ? "" : taskDefinitionLog.getTaskParams());
-            v.setDependence(taskDefinitionLog.getTaskType() == TaskType.DEPENDENT ? taskDefinitionLog.getTaskParams() : "");
+            v.setDependence(taskDefinitionLog.getTaskType() == TaskType.DEPENDENT ? taskDefinitionLog.getTaskParams() : null);
             v.setTaskInstancePriority(taskDefinitionLog.getTaskPriority());
             v.setWorkerGroup(taskDefinitionLog.getWorkerGroup());
             v.setTimeout(JSONUtils.toJsonString(new TaskTimeoutParameter(taskDefinitionLog.getTimeoutFlag() == TimeoutFlag.OPEN,

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/MonitorServiceImpl.java
Patch:
@@ -159,7 +159,7 @@ public List<Server> getServerListFromZK(boolean isMaster) {
 
         checkNotNull(zookeeperMonitor);
         ZKNodeType zkNodeType = isMaster ? ZKNodeType.MASTER : ZKNodeType.WORKER;
-        return zookeeperMonitor.getServersList(zkNodeType);
+        return zookeeperMonitor.getServerList(zkNodeType);
     }
 
 }

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/Constants.java
Patch:
@@ -785,8 +785,8 @@ private Constants() {
     /**
      * master/worker server use for zk
      */
-    public static final String MASTER_PREFIX = "master";
-    public static final String WORKER_PREFIX = "worker";
+    public static final String MASTER_TYPE = "master";
+    public static final String WORKER_TYPE = "worker";
     public static final String DELETE_ZK_OP = "delete";
     public static final String ADD_ZK_OP = "add";
     public static final String ALIAS = "alias";

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/ZKNodeType.java
Patch:
@@ -25,7 +25,6 @@ public enum ZKNodeType {
      * 0 master node;
      * 1 worker node;
      * 2 dead_server node;
-     * 3 task_queue node;
      */
-    MASTER, WORKER, DEAD_SERVER, TASK_QUEUE;
+    MASTER, WORKER, DEAD_SERVER;
 }

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/dispatch/host/HostManagerConfig.java
Patch:
@@ -45,7 +45,7 @@ public HostManager hostManager() {
         String hostSelector = masterConfig.getHostSelector();
         HostSelector selector = HostSelector.of(hostSelector);
         HostManager hostManager;
-        switch (selector){
+        switch (selector) {
             case RANDOM:
                 hostManager = new RandomHostManager();
                 break;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/registry/MasterRegistry.java
Patch:
@@ -81,7 +81,7 @@ public void init() {
      * registry
      */
     public void registry() {
-        String address = NetUtils.getHost();
+        String address = NetUtils.getAddr(masterConfig.getListenPort());
         String localNodePath = getMasterPath();
         zookeeperRegistryCenter.getRegisterOperator().persistEphemeral(localNodePath, "");
         zookeeperRegistryCenter.getRegisterOperator().getZkClient().getConnectionStateListenable().addListener(
@@ -101,7 +101,7 @@ public void registry() {
                 masterConfig.getMasterMaxCpuloadAvg(),
                 masterConfig.getMasterReservedMemory(),
                 Sets.newHashSet(getMasterPath()),
-                Constants.MASTER_PREFIX,
+                Constants.MASTER_TYPE,
                 zookeeperRegistryCenter);
 
         this.heartBeatExecutor.scheduleAtFixedRate(heartBeatTask, masterHeartbeatInterval, masterHeartbeatInterval, TimeUnit.SECONDS);

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/registry/HeartBeatTask.java
Patch:
@@ -113,7 +113,7 @@ public void run() {
             // save process id
             builder.append(OSUtils.getProcessID());
             // worker host weight
-            if (Constants.WORKER_PREFIX.equals(serverType)) {
+            if (Constants.WORKER_TYPE.equals(serverType)) {
                 builder.append(Constants.COMMA).append(hostWeight);
             }
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/registry/WorkerRegistry.java
Patch:
@@ -99,7 +99,7 @@ public ZookeeperRegistryCenter getZookeeperRegistryCenter() {
      * registry
      */
     public void registry() {
-        String address = NetUtils.getHost();
+        String address = NetUtils.getAddr(workerConfig.getListenPort());
         Set<String> workerZkPaths = getWorkerZkPaths();
         int workerHeartbeatInterval = workerConfig.getWorkerHeartbeatInterval();
 
@@ -125,7 +125,7 @@ public void registry() {
                 workerConfig.getWorkerReservedMemory(),
                 workerConfig.getHostWeight(),
                 workerZkPaths,
-                Constants.WORKER_PREFIX,
+                Constants.WORKER_TYPE,
                 zookeeperRegistryCenter);
 
         this.heartBeatExecutor.scheduleAtFixedRate(heartBeatTask, workerHeartbeatInterval, workerHeartbeatInterval, TimeUnit.SECONDS);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProcessInstanceServiceImpl.java
Patch:
@@ -259,9 +259,9 @@ public Map<String, Object> queryProcessInstanceList(User loginUser, String proje
 
         ProcessDefinition processDefinition = processDefineMapper.queryByDefineId(processDefineId);
 
-        IPage<ProcessInstance> processInstanceList =
-                processInstanceMapper.queryProcessInstanceListPaging(page,
-                        project.getCode(), processDefinition.getCode(), searchVal, executorId, statusArray, host, start, end);
+        IPage<ProcessInstance> processInstanceList = processInstanceMapper.queryProcessInstanceListPaging(page,
+                        project.getCode(), processDefinition == null ? 0L : processDefinition.getCode(), searchVal,
+                        executorId, statusArray, host, start, end);
 
         List<ProcessInstance> processInstances = processInstanceList.getRecords();
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProjectServiceImpl.java
Patch:
@@ -444,7 +444,7 @@ private int queryPermission(User user, Project project) {
             return Constants.ALL_PERMISSIONS;
         }
 
-        ProjectUser projectUser = projectUserMapper.queryProjectRelation(project.getCode(), user.getId());
+        ProjectUser projectUser = projectUserMapper.queryProjectRelation(project.getId(), user.getId());
 
         if (projectUser == null) {
             return 0;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/UsersServiceImpl.java
Patch:
@@ -525,10 +525,10 @@ public Map<String, Object> grantProject(User loginUser, int userId, String proje
             putMsg(result, Status.USER_NOT_EXIST, userId);
             return result;
         }
-        //if the selected projectIds are empty, delete all items associated with the user
-        projectUserMapper.deleteProjectRelation(0L, userId);
 
+        //if the selected projectIds are empty, delete all items associated with the user
         if (check(result, StringUtils.isEmpty(projectIds), Status.SUCCESS)) {
+            projectUserMapper.deleteProjectRelation(0, userId);
             return result;
         }
 

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProjectServiceTest.java
Patch:
@@ -116,7 +116,7 @@ public void testQueryById() {
     @Test
     public void testCheckProjectAndAuth() {
 
-        Mockito.when(projectUserMapper.queryProjectRelation(1L, 1)).thenReturn(getProjectUser());
+        Mockito.when(projectUserMapper.queryProjectRelation(1, 1)).thenReturn(getProjectUser());
         User loginUser = getLoginUser();
 
         Map<String, Object> result = projectService.checkProjectAndAuth(loginUser, null, projectName);

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/UsersServiceTest.java
Patch:
@@ -305,7 +305,7 @@ public void testGrantProject() {
         logger.info(result.toString());
         Assert.assertEquals(Status.USER_NOT_EXIST, result.get(Constants.STATUS));
         //success
-        when(projectUserMapper.deleteProjectRelation(Mockito.anyLong(), Mockito.anyInt())).thenReturn(1);
+        when(projectUserMapper.deleteProjectRelation(Mockito.anyInt(), Mockito.anyInt())).thenReturn(1);
         result = usersService.grantProject(loginUser, 1, projectIds);
         logger.info(result.toString());
         Assert.assertEquals(Status.SUCCESS, result.get(Constants.STATUS));

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/ProjectUserMapperTest.java
Patch:
@@ -52,7 +52,6 @@ public class ProjectUserMapperTest {
     private ProjectUser insertOne(){
         //insertOne
         ProjectUser projectUser = new ProjectUser();
-        projectUser.setProjectCode(1010L);
         projectUser.setProjectId(1010);
         projectUser.setUserId(111);
         projectUserMapper.insert(projectUser);
@@ -101,7 +100,7 @@ public void testDeleteProjectRelation() {
 
 
         ProjectUser projectUser = insertOne();
-        int delete = projectUserMapper.deleteProjectRelation(projectUser.getProjectCode(), projectUser.getUserId());
+        int delete = projectUserMapper.deleteProjectRelation(projectUser.getProjectId(), projectUser.getUserId());
         assertThat(delete,greaterThanOrEqualTo(1));
 
     }
@@ -112,7 +111,7 @@ public void testDeleteProjectRelation() {
     @Test
     public void testQueryProjectRelation() {
         ProjectUser projectUser = insertOne();
-        ProjectUser projectUser1 = projectUserMapper.queryProjectRelation(projectUser.getProjectCode(), projectUser.getUserId());
+        ProjectUser projectUser1 = projectUserMapper.queryProjectRelation(projectUser.getProjectId(), projectUser.getUserId());
         Assert.assertNotEquals(projectUser1, null);
 
     }

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessService.java
Patch:
@@ -2222,7 +2222,6 @@ public void switchProcessTaskRelationVersion(ProcessDefinition processDefinition
      * update task definition
      */
     public int updateTaskDefinition(User operator, Long projectCode, TaskNode taskNode, TaskDefinition taskDefinition) {
-
         Integer version = taskDefinitionLogMapper.queryMaxVersionForDefinition(taskDefinition.getCode());
         Date now = new Date();
         taskDefinition.setProjectCode(projectCode);
@@ -2243,7 +2242,7 @@ private void setTaskFromTaskNode(TaskNode taskNode, TaskDefinition taskDefinitio
         taskDefinition.setName(taskNode.getName());
         taskDefinition.setDescription(taskNode.getDesc());
         taskDefinition.setTaskType(TaskType.of(taskNode.getType()));
-        taskDefinition.setTaskParams(taskNode.getParams());
+        taskDefinition.setTaskParams(TaskType.of(taskNode.getType()) == TaskType.DEPENDENT ? taskNode.getDependence() : taskNode.getParams());
         taskDefinition.setFlag(taskNode.isForbidden() ? Flag.NO : Flag.YES);
         taskDefinition.setTaskPriority(taskNode.getTaskInstancePriority());
         taskDefinition.setWorkerGroup(taskNode.getWorkerGroup());
@@ -2508,7 +2507,8 @@ public List<TaskNode> genTaskNodeList(Long processCode, int processVersion) {
             v.setRunFlag(taskDefinitionLog.getFlag() == Flag.YES ? Constants.FLOWNODE_RUN_FLAG_NORMAL : Constants.FLOWNODE_RUN_FLAG_FORBIDDEN);
             v.setMaxRetryTimes(taskDefinitionLog.getFailRetryTimes());
             v.setRetryInterval(taskDefinitionLog.getFailRetryInterval());
-            v.setParams(taskDefinitionLog.getTaskParams());
+            v.setParams(taskDefinitionLog.getTaskType() == TaskType.DEPENDENT ? "" : taskDefinitionLog.getTaskParams());
+            v.setDependence(taskDefinitionLog.getTaskType() == TaskType.DEPENDENT ? taskDefinitionLog.getTaskParams() : "");
             v.setTaskInstancePriority(taskDefinitionLog.getTaskPriority());
             v.setWorkerGroup(taskDefinitionLog.getWorkerGroup());
             v.setTimeout(JSONUtils.toJsonString(new TaskTimeoutParameter(taskDefinitionLog.getTimeoutFlag() == TimeoutFlag.OPEN,

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ResourcesServiceImpl.java
Patch:
@@ -362,6 +362,7 @@ public Result<Object> updateResource(User loginUser,
         Date now = new Date();
 
         resource.setAlias(name);
+        resource.setFileName(name);
         resource.setFullName(fullName);
         resource.setDescription(desc);
         resource.setUpdateTime(now);

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/Constants.java
Patch:
@@ -469,6 +469,8 @@ private Constants() {
 
     public static final String CMD_PARAM_START_PARAMS = "StartParams";
 
+    public static final String CMD_PARAM_FATHER_PARAMS = "fatherParams";
+
     /**
      * complement data start date
      */

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/dispatch/host/assign/AbstractSelector.java
Patch:
@@ -23,7 +23,7 @@
 /**
  *  AbstractSelector
  */
-public  abstract class AbstractSelector<T> implements Selector<T>{
+public  abstract class AbstractSelector<T> implements Selector<T> {
     @Override
     public T select(Collection<T> source) {
 
@@ -40,6 +40,6 @@ public T select(Collection<T> source) {
         return doSelect(source);
     }
 
-    protected abstract T  doSelect(Collection<T> source);
+    protected abstract T doSelect(Collection<T> source);
 
 }

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/dispatch/host/assign/HostSelector.java
Patch:
@@ -28,9 +28,9 @@ public enum HostSelector {
 
     LOWERWEIGHT;
 
-    public static HostSelector of(String selector){
-        for(HostSelector hs : values()){
-            if(hs.name().equalsIgnoreCase(selector)){
+    public static HostSelector of(String selector) {
+        for (HostSelector hs : values()) {
+            if (hs.name().equalsIgnoreCase(selector)) {
                 return hs;
             }
         }

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/registry/MasterRegistry.java
Patch:
@@ -98,8 +98,8 @@ public void registry() {
             });
         int masterHeartbeatInterval = masterConfig.getMasterHeartbeatInterval();
         HeartBeatTask heartBeatTask = new HeartBeatTask(startTime,
-                masterConfig.getMasterReservedMemory(),
                 masterConfig.getMasterMaxCpuloadAvg(),
+                masterConfig.getMasterReservedMemory(),
                 Sets.newHashSet(getMasterPath()),
                 Constants.MASTER_PREFIX,
                 zookeeperRegistryCenter);
@@ -132,9 +132,7 @@ public String getMasterPath() {
      * get local address
      */
     private String getLocalAddress() {
-
         return NetUtils.getAddr(masterConfig.getListenPort());
-
     }
 
     /**

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/config/WorkerConfig.java
Patch:
@@ -47,7 +47,7 @@ public class WorkerConfig {
     @Value("#{'${worker.groups:default}'.split(',')}")
     private Set<String> workerGroups;
 
-    @Value("${worker.listen.port: 1234}")
+    @Value("${worker.listen.port:1234}")
     private int listenPort;
 
     @Value("${worker.host.weight:100}")
@@ -119,8 +119,8 @@ public int getHostWeight() {
         return hostWeight;
     }
 
-    public void setHostWeight(int weight) {
-        this.hostWeight = weight;
+    public void setHostWeight(int hostWeight) {
+        this.hostWeight = hostWeight;
     }
 
     public String getAlertListenHost() {

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/zk/ZKMasterClient.java
Patch:
@@ -28,7 +28,6 @@
 import org.apache.dolphinscheduler.common.utils.StringUtils;
 import org.apache.dolphinscheduler.dao.entity.ProcessInstance;
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
-import org.apache.dolphinscheduler.remote.utils.Host;
 import org.apache.dolphinscheduler.server.builder.TaskExecutionContextBuilder;
 import org.apache.dolphinscheduler.server.entity.TaskExecutionContext;
 import org.apache.dolphinscheduler.server.master.MasterServer;
@@ -308,7 +307,6 @@ private boolean checkTaskAfterWorkerStart(TaskInstance taskInstance) {
      * @throws Exception exception
      */
     private void failoverWorker(String workerHost, boolean needCheckWorkerAlive) throws Exception {
-        workerHost = Host.of(workerHost).getAddress();
         logger.info("start worker[{}] failover ...", workerHost);
         List<TaskInstance> needFailoverTaskInstanceList = processService.queryNeedFailoverTaskInstances(workerHost);
         for (TaskInstance taskInstance : needFailoverTaskInstanceList) {

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/master/registry/MasterRegistryTest.java
Patch:
@@ -19,6 +19,7 @@
 
 import static org.apache.dolphinscheduler.common.Constants.HEARTBEAT_FOR_ZOOKEEPER_INFO_LENGTH;
 
+import org.apache.dolphinscheduler.common.utils.NetUtils;
 import org.apache.dolphinscheduler.remote.utils.Constants;
 import org.apache.dolphinscheduler.server.master.config.MasterConfig;
 import org.apache.dolphinscheduler.server.registry.ZookeeperRegistryCenter;
@@ -59,7 +60,7 @@ public void testRegistry() throws InterruptedException {
         masterRegistry.registry();
         String masterPath = zookeeperRegistryCenter.getMasterPath();
         TimeUnit.SECONDS.sleep(masterConfig.getMasterHeartbeatInterval() + 2); //wait heartbeat info write into zk node
-        String masterNodePath = masterPath + "/" + (Constants.LOCAL_ADDRESS + ":" + masterConfig.getListenPort());
+        String masterNodePath = masterPath + "/" + (NetUtils.getAddr(Constants.LOCAL_ADDRESS, masterConfig.getListenPort()));
         String heartbeat = zookeeperRegistryCenter.getRegisterOperator().get(masterNodePath);
         Assert.assertEquals(HEARTBEAT_FOR_ZOOKEEPER_INFO_LENGTH, heartbeat.split(",").length);
         masterRegistry.unRegistry();

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/zk/RegisterOperator.java
Patch:
@@ -69,10 +69,10 @@ public void removeDeadServerByHost(String host, String serverType) throws Except
     }
 
     /**
-     * get host ip, string format: masterParentPath/ip
+     * get host ip:port, string format: parentPath/ip:port
      *
      * @param path path
-     * @return host ip, string format: masterParentPath/ip
+     * @return host ip:port, string format: parentPath/ip:port
      */
     protected String getHostByEventDataPath(String path) {
         if (StringUtils.isEmpty(path)) {

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/shell/ShellTask.java
Patch:
@@ -106,6 +106,7 @@ public void handle() throws Exception {
             setAppIds(commandExecuteResult.getAppIds());
             setProcessId(commandExecuteResult.getProcessId());
             setResult(shellCommandExecutor.getTaskResultString());
+            setVarPool(shellCommandExecutor.getVarPool());
         } catch (Exception e) {
             logger.error("shell task error", e);
             setExitStatusCode(Constants.EXIT_CODE_FAILURE);

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessService.java
Patch:
@@ -2453,7 +2453,7 @@ public List<TaskNode> genTaskNodeList(Long processCode, int processVersion) {
             v.setName(taskDefinitionLog.getName());
             v.setDesc(taskDefinitionLog.getDescription());
             v.setType(taskDefinitionLog.getTaskType().getDescp().toUpperCase());
-            v.setRunFlag(taskDefinitionLog.getFlag() == Flag.YES ? Constants.FLOWNODE_RUN_FLAG_FORBIDDEN : "NORMAL");
+            v.setRunFlag(taskDefinitionLog.getFlag() == Flag.YES ? Constants.FLOWNODE_RUN_FLAG_NORMAL : Constants.FLOWNODE_RUN_FLAG_FORBIDDEN);
             v.setMaxRetryTimes(taskDefinitionLog.getFailRetryTimes());
             v.setRetryInterval(taskDefinitionLog.getFailRetryInterval());
             v.setParams(taskDefinitionLog.getTaskParams());
@@ -2464,7 +2464,7 @@ public List<TaskNode> genTaskNodeList(Long processCode, int processVersion) {
                     taskDefinitionLog.getTimeout())));
             // TODO name will be remove
             v.getPreTaskNodeList().forEach(task -> task.setName(taskDefinitionLogMap.get(task.getCode()).getName()));
-            v.setPreTasks(StringUtils.join(v.getPreTaskNodeList().stream().map(PreviousTaskNode::getName).collect(Collectors.toList()), ","));
+            v.setPreTasks(JSONUtils.toJsonString(v.getPreTaskNodeList().stream().map(PreviousTaskNode::getName).collect(Collectors.toList())));
         });
         return new ArrayList<>(taskNodeMap.values());
     }

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/DbType.java
Patch:
@@ -75,6 +75,6 @@ public static DbType of(int type){
         if(DB_TYPE_MAP.containsKey(type)){
             return DB_TYPE_MAP.get(type);
         }
-        throw new IllegalArgumentException("invalid type : " + type);
+        return null;
     }
 }

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/WorkFlowLineageServiceTest.java
Patch:
@@ -66,8 +66,6 @@ public void testQueryWorkFlowLineageByIds() {
         ids.add(1);
         ids.add(2);
 
-        when(workFlowLineageMapper.queryByIds(ids, 1L)).thenReturn(getWorkFlowLineages());
-        when(workFlowLineageMapper.querySourceTarget(1)).thenReturn(getWorkFlowRelation());
         Map<String, Object> result = workFlowLineageService.queryWorkFlowLineageByIds(ids,1);
         Map<String, Object> workFlowLists = (Map<String, Object>)result.get(Constants.DATA_LIST);
         List<WorkFlowLineage> workFlowLineages = (List<WorkFlowLineage>)workFlowLists.get("workFlowList");

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/task/http/HttpParameters.java
Patch:
@@ -14,14 +14,15 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.common.task.http;
 
 import org.apache.dolphinscheduler.common.enums.HttpCheckCondition;
 import org.apache.dolphinscheduler.common.enums.HttpMethod;
 import org.apache.dolphinscheduler.common.process.HttpProperty;
 import org.apache.dolphinscheduler.common.process.ResourceInfo;
 import org.apache.dolphinscheduler.common.task.AbstractParameters;
-import org.apache.commons.lang.StringUtils;
+import org.apache.dolphinscheduler.common.utils.StringUtils;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -70,7 +71,7 @@ public class HttpParameters extends AbstractParameters {
 
     @Override
     public boolean checkParameters() {
-        return  StringUtils.isNotEmpty(url);
+        return StringUtils.isNotEmpty(url);
     }
 
     @Override

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/task/procedure/ProcedureParameters.java
Patch:
@@ -14,16 +14,16 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.common.task.procedure;
 
 import org.apache.dolphinscheduler.common.process.ResourceInfo;
 import org.apache.dolphinscheduler.common.task.AbstractParameters;
-import org.apache.commons.lang.StringUtils;
+import org.apache.dolphinscheduler.common.utils.StringUtils;
 
 import java.util.ArrayList;
 import java.util.List;
 
-
 /**
  * procedure parameter
  */

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/registry/MasterRegistry.java
Patch:
@@ -116,6 +116,8 @@ public void unRegistry() {
         String localNodePath = getMasterPath();
         zookeeperRegistryCenter.getRegisterOperator().remove(localNodePath);
         logger.info("master node : {} unRegistry to ZK.", address);
+        heartBeatExecutor.shutdown();
+        logger.info("heartbeat executor shutdown");
     }
 
     /**

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/registry/HeartBeatTask.java
Patch:
@@ -43,9 +43,8 @@ public class HeartBeatTask implements Runnable {
     private Set<String> heartBeatPaths;
     private String serverType;
     private ZookeeperRegistryCenter zookeeperRegistryCenter;
-    /**
-     * server stop or not
-     */
+
+    // server stop or not
     protected IStoppable stoppable = null;
 
     public HeartBeatTask(String startTime,

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/registry/WorkerRegistry.java
Patch:
@@ -47,7 +47,6 @@
 
 import com.google.common.collect.Sets;
 
-
 /**
  * worker registry
  */
@@ -115,6 +114,7 @@ public void registry() {
                         zookeeperRegistryCenter.getRegisterOperator().persistEphemeral(workerZKPath, "");
                     } else if (newState == ConnectionState.SUSPENDED) {
                         logger.warn("worker : {} connection SUSPENDED ", address);
+                        zookeeperRegistryCenter.getRegisterOperator().persistEphemeral(workerZKPath, "");
                     }
                 });
             logger.info("worker node : {} registry to ZK {} successfully", address, workerZKPath);
@@ -142,6 +142,7 @@ public void unRegistry() {
             logger.info("worker node : {} unRegistry from ZK {}.", address, workerZkPath);
         }
         this.heartBeatExecutor.shutdownNow();
+        logger.info("heartbeat executor shutdown");
     }
 
     /**

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/AbstractTask.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.server.worker.task;
 
 import static ch.qos.logback.classic.ClassicConstants.FINALIZE_SESSION_MARKER;
@@ -25,13 +26,12 @@
 import org.apache.dolphinscheduler.common.enums.TaskType;
 import org.apache.dolphinscheduler.common.process.Property;
 import org.apache.dolphinscheduler.common.task.AbstractParameters;
+import org.apache.dolphinscheduler.common.utils.StringUtils;
 import org.apache.dolphinscheduler.common.utils.TaskParametersUtils;
 import org.apache.dolphinscheduler.dao.TaskRecordDao;
 import org.apache.dolphinscheduler.server.entity.TaskExecutionContext;
 import org.apache.dolphinscheduler.server.utils.ParamUtils;
 
-import org.apache.commons.lang.StringUtils;
-
 import java.util.List;
 import java.util.Map;
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/zk/ZKMasterClient.java
Patch:
@@ -110,8 +110,8 @@ public void start(MasterServer masterServer) {
 
     @Override
     public void close() {
-        super.close();
         masterRegistry.unRegistry();
+        super.close();
     }
 
     /**

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/zk/ZookeeperOperator.java
Patch:
@@ -58,7 +58,7 @@ public class ZookeeperOperator implements InitializingBean {
     protected CuratorFramework zkClient;
 
     @Override
-    public void afterPropertiesSet() throws Exception {
+    public void afterPropertiesSet() {
         this.zkClient = buildClient();
         initStateListener();
         treeCacheStart();

File: dolphinscheduler-common/src/test/java/org/apache/dolphinscheduler/common/utils/HadoopUtilsTest.java
Patch:
@@ -184,7 +184,7 @@ public void getApplicationStatus() {
         }
     }
 
-    @Test
+    @Test(expected = Exception.class)
     public void getApplicationUrl() throws Exception {
         String application_1516778421218_0042 = hadoopUtils.getApplicationUrl("application_1529051418016_0167");
         logger.info(application_1516778421218_0042);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/TaskInstanceServiceImpl.java
Patch:
@@ -118,7 +118,7 @@ public Map<String, Object> queryTaskListPaging(User loginUser, String projectNam
         int executorId = usersService.getUserIdByName(executorName);
 
         IPage<TaskInstance> taskInstanceIPage = taskInstanceMapper.queryTaskInstanceListPaging(
-                page, project.getId(), processInstanceId, processInstanceName, searchVal, taskName, executorId, statusArray, host, start, end
+                page, project.getCode(), processInstanceId, processInstanceName, searchVal, taskName, executorId, statusArray, host, start, end
         );
         Set<String> exclusionSet = new HashSet<>();
         exclusionSet.add(Constants.CLASS);

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/TaskInstanceMapper.java
Patch:
@@ -52,7 +52,7 @@ TaskInstance queryByInstanceIdAndName(@Param("processInstanceId") int processIns
                                           @Param("name") String name);
 
     Integer countTask(
-                      @Param("projectIds") Integer[] projectIds,
+                      @Param("projectCodes") Long[] projectCodes,
                       @Param("taskIds") int[] taskIds);
 
     List<ExecuteStatusCount> countTaskInstanceStateByUser(
@@ -61,7 +61,7 @@ List<ExecuteStatusCount> countTaskInstanceStateByUser(
                                                           @Param("projectCodes") Long[] projectCodes);
 
     IPage<TaskInstance> queryTaskInstanceListPaging(IPage<TaskInstance> page,
-                                                    @Param("projectId") int projectId,
+                                                    @Param("projectCode") Long projectCode,
                                                     @Param("processInstanceId") Integer processInstanceId,
                                                     @Param("processInstanceName") String processInstanceName,
                                                     @Param("searchVal") String searchVal,

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProcessDefinitionServiceImpl.java
Patch:
@@ -190,6 +190,7 @@ public Map<String, Object> createProcessDefinition(User loginUser,
         try {
             long processDefinitionCode = SnowFlakeUtils.getInstance().nextId();
             processDefinition.setCode(processDefinitionCode);
+            processDefinition.setVersion(1);
         } catch (SnowFlakeException e) {
             putMsg(result, Status.CREATE_PROCESS_DEFINITION);
             return result;

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/TaskDefinitionLogMapper.java
Patch:
@@ -43,12 +43,11 @@ List<TaskDefinitionLog> queryByDefinitionName(@Param("projectCode") Long project
                                                   @Param("taskDefinitionName") String name);
 
     /**
-     * query task definition log list
+     * query max version for definition
      *
      * @param taskDefinitionCode taskDefinitionCode
-     * @return task definition log list
      */
-    List<TaskDefinitionLog> queryByDefinitionCode(@Param("taskDefinitionCode") long taskDefinitionCode);
+    Integer queryMaxVersionForDefinition(@Param("taskDefinitionCode") long taskDefinitionCode);
 
     /**
      * query task definition log

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/utils/FlinkArgsUtils.java
Patch:
@@ -129,5 +129,4 @@ public static List<String> buildArgs(FlinkParameters param) {
         return args;
     }
 
-
 }

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/spark/SparkTask.java
Patch:
@@ -44,11 +44,13 @@ public class SparkTask extends AbstractYarnTask {
 
     /**
      * spark1 command
+     * usage: spark-submit [options] <app jar | python file> [app arguments]
      */
     private static final String SPARK1_COMMAND = "${SPARK_HOME1}/bin/spark-submit";
 
     /**
      * spark2 command
+     * usage: spark-submit [options] <app jar | python file> [app arguments]
      */
     private static final String SPARK2_COMMAND = "${SPARK_HOME2}/bin/spark-submit";
 
@@ -93,6 +95,7 @@ public void init() {
      */
     @Override
     protected String buildCommand() {
+        // spark-submit [options] <app jar | python file> [app arguments]
         List<String> args = new ArrayList<>();
 
         //spark version

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/TaskDefinitionServiceImpl.java
Patch:
@@ -285,7 +285,7 @@ public Map<String, Object> switchVersion(User loginUser, String projectName, Lon
         taskDefinition.setFailRetryTimes(taskDefinitionLog.getFailRetryTimes());
         taskDefinition.setFailRetryInterval(taskDefinitionLog.getFailRetryInterval());
         taskDefinition.setTimeoutFlag(taskDefinitionLog.getTimeoutFlag());
-        taskDefinition.setTaskTimeoutStrategy(taskDefinitionLog.getTaskTimeoutStrategy());
+        taskDefinition.setTimeoutNotifyStrategy(taskDefinitionLog.getTimeoutNotifyStrategy());
         taskDefinition.setTimeout(taskDefinitionLog.getTimeout());
         taskDefinition.setUpdateTime(new Date());
         taskDefinition.setResourceIds(taskDefinitionLog.getResourceIds());

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/TaskType.java
Patch:
@@ -87,6 +87,7 @@ public String getDescp() {
     }
 
     public static TaskType of(String descp) {
+        descp = descp.toLowerCase();
         if (TASK_TYPE_MAP.containsKey(descp)) {
             return TASK_TYPE_MAP.get(descp);
         }

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/ProcessTaskRelationLog.java
Patch:
@@ -56,8 +56,6 @@ public ProcessTaskRelationLog(ProcessTaskRelation processTaskRelation) {
         this.setPostTaskVersion(processTaskRelation.getPostTaskVersion());
         this.setConditionType(processTaskRelation.getConditionType());
         this.setConditionParams(processTaskRelation.getConditionParams());
-        this.setConditionParamList(processTaskRelation.getConditionParamList());
-        this.setConditionParamMap(processTaskRelation.getConditionParamMap());
         this.setCreateTime(processTaskRelation.getCreateTime());
         this.setUpdateTime(processTaskRelation.getUpdateTime());
     }

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskDefinitionLog.java
Patch:
@@ -57,10 +57,8 @@ public TaskDefinitionLog(TaskDefinition taskDefinition) {
         this.setProjectName(taskDefinition.getProjectName());
         this.setResourceIds(taskDefinition.getResourceIds());
         this.setTaskParams(taskDefinition.getTaskParams());
-        this.setTaskParamList(taskDefinition.getTaskParamList());
-        this.setTaskParamMap(taskDefinition.getTaskParamMap());
         this.setTaskPriority(taskDefinition.getTaskPriority());
-        this.setTaskTimeoutStrategy(taskDefinition.getTaskTimeoutStrategy());
+        this.setTimeoutNotifyStrategy(taskDefinition.getTimeoutNotifyStrategy());
         this.setTaskType(taskDefinition.getTaskType());
         this.setTimeout(taskDefinition.getTimeout());
         this.setTimeoutFlag(taskDefinition.getTimeoutFlag());

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/ProcessDefinitionLogMapper.java
Patch:
@@ -53,7 +53,7 @@ List<ProcessDefinitionLog> queryByDefinitionName(@Param("projectCode") Long proj
     /**
      * query max version for definition
      */
-    int queryMaxVersionForDefinition(@Param("processDefinitionCode") long processDefinitionCode);
+    Integer queryMaxVersionForDefinition(@Param("processDefinitionCode") long processDefinitionCode);
 
     /**
      * query the certain process definition version info by process definition code and version number

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/ProcessDefinitionLogMapperTest.java
Patch:
@@ -151,8 +151,8 @@ public void testQueryMaxVersionForDefinition() {
         ProcessDefinitionLog processDefinitionLog = insertOne();
         ProcessDefinitionLog processDefinitionLog1 = insertTwo();
 
-        int version = processDefinitionLogMapper.queryMaxVersionForDefinition(1L);
-        Assert.assertEquals(2, version);
+        Integer version = processDefinitionLogMapper.queryMaxVersionForDefinition(1L);
+        Assert.assertEquals(2, version == null ? 1 : version);
     }
 
     @Test

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProjectServiceImpl.java
Patch:
@@ -444,7 +444,7 @@ private int queryPermission(User user, Project project) {
             return Constants.ALL_PERMISSIONS;
         }
 
-        ProjectUser projectUser = projectUserMapper.queryProjectRelation(project.getId(), user.getId());
+        ProjectUser projectUser = projectUserMapper.queryProjectRelation(project.getCode(), user.getId());
 
         if (projectUser == null) {
             return 0;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/UsersServiceImpl.java
Patch:
@@ -526,7 +526,7 @@ public Map<String, Object> grantProject(User loginUser, int userId, String proje
             return result;
         }
         //if the selected projectIds are empty, delete all items associated with the user
-        projectUserMapper.deleteProjectRelation(0, userId);
+        projectUserMapper.deleteProjectRelation(0L, userId);
 
         if (check(result, StringUtils.isEmpty(projectIds), Status.SUCCESS)) {
             return result;

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProjectServiceTest.java
Patch:
@@ -116,7 +116,7 @@ public void testQueryById() {
     @Test
     public void testCheckProjectAndAuth() {
 
-        Mockito.when(projectUserMapper.queryProjectRelation(1, 1)).thenReturn(getProjectUser());
+        Mockito.when(projectUserMapper.queryProjectRelation(1L, 1)).thenReturn(getProjectUser());
         User loginUser = getLoginUser();
 
         Map<String, Object> result = projectService.checkProjectAndAuth(loginUser, null, projectName);

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/UsersServiceTest.java
Patch:
@@ -305,7 +305,7 @@ public void testGrantProject() {
         logger.info(result.toString());
         Assert.assertEquals(Status.USER_NOT_EXIST, result.get(Constants.STATUS));
         //success
-        when(projectUserMapper.deleteProjectRelation(Mockito.anyInt(), Mockito.anyInt())).thenReturn(1);
+        when(projectUserMapper.deleteProjectRelation(Mockito.anyLong(), Mockito.anyInt())).thenReturn(1);
         result = usersService.grantProject(loginUser, 1, projectIds);
         logger.info(result.toString());
         Assert.assertEquals(Status.SUCCESS, result.get(Constants.STATUS));

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/WorkFlowLineageServiceTest.java
Patch:
@@ -53,7 +53,7 @@ public class WorkFlowLineageServiceTest {
     @Test
     public void testQueryWorkFlowLineageByName() {
         String searchVal = "test";
-        when(workFlowLineageMapper.queryByName(searchVal, 1)).thenReturn(getWorkFlowLineages());
+        when(workFlowLineageMapper.queryByName(searchVal, 1L)).thenReturn(getWorkFlowLineages());
         Map<String, Object> result = workFlowLineageService.queryWorkFlowLineageByName(searchVal,1);
         List<WorkFlowLineage> workFlowLineageList = (List<WorkFlowLineage>)result.get(Constants.DATA_LIST);
         Assert.assertTrue(workFlowLineageList.size()>0);
@@ -66,7 +66,7 @@ public void testQueryWorkFlowLineageByIds() {
         ids.add(1);
         ids.add(2);
 
-        when(workFlowLineageMapper.queryByIds(ids, 1)).thenReturn(getWorkFlowLineages());
+        when(workFlowLineageMapper.queryByIds(ids, 1L)).thenReturn(getWorkFlowLineages());
         when(workFlowLineageMapper.querySourceTarget(1)).thenReturn(getWorkFlowRelation());
         Map<String, Object> result = workFlowLineageService.queryWorkFlowLineageByIds(ids,1);
         Map<String, Object> workFlowLists = (Map<String, Object>)result.get(Constants.DATA_LIST);

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/ProjectUserMapperTest.java
Patch:
@@ -52,6 +52,7 @@ public class ProjectUserMapperTest {
     private ProjectUser insertOne(){
         //insertOne
         ProjectUser projectUser = new ProjectUser();
+        projectUser.setProjectCode(1010L);
         projectUser.setProjectId(1010);
         projectUser.setUserId(111);
         projectUserMapper.insert(projectUser);
@@ -100,7 +101,7 @@ public void testDeleteProjectRelation() {
 
 
         ProjectUser projectUser = insertOne();
-        int delete = projectUserMapper.deleteProjectRelation(projectUser.getProjectId(), projectUser.getUserId());
+        int delete = projectUserMapper.deleteProjectRelation(projectUser.getProjectCode(), projectUser.getUserId());
         assertThat(delete,greaterThanOrEqualTo(1));
 
     }
@@ -111,7 +112,7 @@ public void testDeleteProjectRelation() {
     @Test
     public void testQueryProjectRelation() {
         ProjectUser projectUser = insertOne();
-        ProjectUser projectUser1 = projectUserMapper.queryProjectRelation(projectUser.getProjectId(), projectUser.getUserId());
+        ProjectUser projectUser1 = projectUserMapper.queryProjectRelation(projectUser.getProjectCode(), projectUser.getUserId());
         Assert.assertNotEquals(projectUser1, null);
 
     }

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/WorkFlowLineageMapperTest.java
Patch:
@@ -41,7 +41,7 @@ public class WorkFlowLineageMapperTest {
 
     @Test
     public void testQueryByName() {
-        List<WorkFlowLineage> workFlowLineages = workFlowLineageMapper.queryByName("test",1);
+        List<WorkFlowLineage> workFlowLineages = workFlowLineageMapper.queryByName("test",1L);
         Assert.assertNotEquals(workFlowLineages.size(), 0);
     }
 
@@ -50,7 +50,7 @@ public void testQueryByName() {
     public void testQueryByIds() {
         Set<Integer> ids = new HashSet<>();
         ids.add(1);
-        List<WorkFlowLineage> workFlowLineages = workFlowLineageMapper.queryByIds(ids,1);
+        List<WorkFlowLineage> workFlowLineages = workFlowLineageMapper.queryByIds(ids,1L);
         Assert.assertNotEquals(workFlowLineages.size(), 0);
     }
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProcessInstanceService.java
Patch:
@@ -1,3 +1,4 @@
+
 /*
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements.  See the NOTICE file distributed with
@@ -149,7 +150,7 @@ Map<String, Object> updateProcessInstance(User loginUser, String projectName, In
     Map<String, Object> viewGantt(Integer processInstanceId) throws Exception;
 
     /**
-     * query process instance by processDefinitionId and stateArray
+     * query process instance by processDefinitionCode and stateArray
      *
      * @param processDefinitionCode processDefinitionCode
      * @param states states array
@@ -166,4 +167,4 @@ Map<String, Object> updateProcessInstance(User loginUser, String projectName, In
      */
     List<ProcessInstance> queryByProcessDefineCode(Long processDefinitionCode,int size);
 
-}
+}
\ No newline at end of file

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProcessDefinitionServiceImpl.java
Patch:
@@ -1762,4 +1762,4 @@ public Map<String, Object> deleteByProcessDefinitionIdAndVersion(User loginUser,
         return result;
 
     }
-}
+}
\ No newline at end of file

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/ErrorCommandMapperTest.java
Patch:
@@ -73,6 +73,7 @@ public void testQuery() {
         ErrorCommand errorCommand = insertOne();
 
         ProcessDefinition processDefinition = new ProcessDefinition();
+        processDefinition.setCode(1L);
         processDefinition.setName("def 1");
         processDefinition.setProjectCode(1010L);
         processDefinition.setUserId(101);

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/ProcessDefinitionLogMapperTest.java
Patch:
@@ -98,7 +98,7 @@ private ProcessDefinitionLog insertTwo() {
         processDefinitionLogMapper.insert(processDefinitionLog);
         return processDefinitionLog;
     }
-    
+
     @Test
     public void testInsert() {
         ProcessDefinitionLog processDefinitionLog = insertOne();

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessService.java
Patch:
@@ -2459,4 +2459,4 @@ public List<TaskNode> genTaskNodeList(Long processCode, int processVersion) {
         });
         return new ArrayList<>(taskNodeMap.values());
     }
-}
+}
\ No newline at end of file

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/ProcessTaskRelationLog.java
Patch:
@@ -51,9 +51,9 @@ public ProcessTaskRelationLog(ProcessTaskRelation processTaskRelation) {
         this.setProcessDefinitionVersion(processTaskRelation.getProcessDefinitionVersion());
         this.setProjectCode(processTaskRelation.getProjectCode());
         this.setPreTaskCode(processTaskRelation.getPreTaskCode());
-        this.setPreNodeVersion(processTaskRelation.getPreNodeVersion());
+        this.setPreTaskVersion(processTaskRelation.getPreTaskVersion());
         this.setPostTaskCode(processTaskRelation.getPostTaskCode());
-        this.setPostNodeVersion(processTaskRelation.getPostNodeVersion());
+        this.setPostTaskVersion(processTaskRelation.getPostTaskVersion());
         this.setConditionType(processTaskRelation.getConditionType());
         this.setConditionParams(processTaskRelation.getConditionParams());
         this.setConditionParamList(processTaskRelation.getConditionParamList());

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/ProcessTaskRelationMapper.java
Patch:
@@ -47,7 +47,7 @@ List<ProcessTaskRelation> queryByProcessCode(@Param("projectCode") Long projectC
      * @param taskCodes taskCode list
      * @return ProcessTaskRelation
      */
-    List<ProcessTaskRelation> queryByTaskCodes(@Param("taskCodes") Collection<Long> taskCodes);
+    List<ProcessTaskRelation> queryByTaskCodes(@Param("taskCodes") Long[] taskCodes);
 
     /**
      * process task relation by taskCode

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProcessInstanceServiceImpl.java
Patch:
@@ -753,4 +753,4 @@ public List<ProcessInstance> queryByProcessDefineId(int processDefinitionId, int
         return processInstanceMapper.queryByProcessDefineId(processDefinitionId, size);
     }
 
-}
+}
\ No newline at end of file

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProjectServiceTest.java
Patch:
@@ -348,6 +348,7 @@ public void testQueryUnauthorizedProject() {
 
     private Project getProject() {
         Project project = new Project();
+        project.setCode(1L);
         project.setId(1);
         project.setName(projectName);
         project.setUserId(1);

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/TaskInstanceServiceTest.java
Patch:
@@ -267,4 +267,4 @@ public void forceTaskSuccess() {
         Map<String, Object> successRes = taskInstanceService.forceTaskSuccess(user, projectName, taskId);
         Assert.assertEquals(Status.SUCCESS, successRes.get(Constants.STATUS));
     }
-}
+}
\ No newline at end of file

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/WorkerGroupServiceTest.java
Patch:
@@ -110,9 +110,7 @@ private List<ProcessInstance> getProcessInstanceList() {
     }
 
     @Test
-    public void testQueryAllGroupWithNoNodeException() {
-        String workerPath = zookeeperCachedOperator.getZookeeperConfig().getDsRoot() + Constants.ZOOKEEPER_DOLPHINSCHEDULER_WORKERS;
-        Mockito.when(zookeeperCachedOperator.getChildrenKeys(workerPath)).thenThrow(new RuntimeException("KeeperException$NoNodeException"));
+    public void testQueryAllGroupWithDefault() {
         Map<String, Object> result = workerGroupService.queryAllGroup();
         Set<String> workerGroups = (Set<String>) result.get(Constants.DATA_LIST);
         Assert.assertEquals(1, workerGroups.size());

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/TaskInstanceServiceImpl.java
Patch:
@@ -167,8 +167,8 @@ public Map<String, Object> forceTaskSuccess(User loginUser, String projectName,
             return result;
         }
 
-        // check whether the task instance state type is failure
-        if (!task.getState().typeIsFailure()) {
+        // check whether the task instance state type is failure or cancel
+        if (!task.getState().typeIsFailure() && !task.getState().typeIsCancel()) {
             putMsg(result, Status.TASK_INSTANCE_STATE_OPERATION_ERROR, taskInstanceId, task.getState().toString());
             return result;
         }

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/ExecutionStatus.java
Patch:
@@ -90,7 +90,7 @@ public boolean typeIsSuccess() {
      * @return status
      */
     public boolean typeIsFailure() {
-        return this == FAILURE || this == NEED_FAULT_TOLERANCE || this == KILL;
+        return this == FAILURE || this == NEED_FAULT_TOLERANCE;
     }
 
     /**

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ResourcesServiceImpl.java
Patch:
@@ -695,7 +695,7 @@ public Result<Object> delete(User loginUser, int resourceId) throws IOException
 
         // get all resource id of process definitions those is released
         List<Map<String, Object>> list = processDefinitionMapper.listResources();
-        Map<Integer, Set<Integer>> resourceProcessMap = ResourceProcessDefinitionUtils.getResourceProcessDefinitionMap(list);
+        Map<Integer, Set<Long>> resourceProcessMap = ResourceProcessDefinitionUtils.getResourceProcessDefinitionMap(list);
         Set<Integer> resourceIdSet = resourceProcessMap.keySet();
         // get all children of the resource
         List<Integer> allChildren = listAllChildren(resource,true);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/UsersServiceImpl.java
Patch:
@@ -597,7 +597,7 @@ public Map<String, Object> grantResources(User loginUser, int userId, String res
 
             // get all resource id of process definitions those is released
             List<Map<String, Object>> list = processDefinitionMapper.listResourcesByUser(userId);
-            Map<Integer, Set<Integer>> resourceProcessMap = ResourceProcessDefinitionUtils.getResourceProcessDefinitionMap(list);
+            Map<Integer, Set<Long>> resourceProcessMap = ResourceProcessDefinitionUtils.getResourceProcessDefinitionMap(list);
             Set<Integer> resourceIdSet = resourceProcessMap.keySet();
 
             resourceIdSet.retainAll(oldAuthorizedResIds);

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/utils/ResourceProcessDefinitionUtilsTest.java
Patch:
@@ -32,7 +32,7 @@ public class ResourceProcessDefinitionUtilsTest {
     public void getResourceProcessDefinitionMapTest(){
         List<Map<String,Object>> mapList = new ArrayList<>();
         Map<String,Object> map = new HashMap();
-        map.put("id",1);
+        map.put("code",1L);
         map.put("resource_ids","1,2,3");
         mapList.add(map);
         Assert.assertNotNull(ResourceProcessDefinitionUtils.getResourceProcessDefinitionMap(mapList));

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/datasource/HiveDataSourceTest.java
Patch:
@@ -81,7 +81,7 @@ public void testGetHiveJdbcUrlOther() {
 
         hiveDataSource.setOther("hive.mapred.mode=strict;hive.server2.thrift.http.path=hs2");
         Assert.assertEquals(
-                "jdbc:hive2://127.0.0.1:10000/test;?hive.mapred.mode=strict;hive.server2.thrift.http.path=hs2",
+                "jdbc:hive2://127.0.0.1:10000/test?hive.mapred.mode=strict;hive.server2.thrift.http.path=hs2",
                 hiveDataSource.getJdbcUrl());
 
     }

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/sql/SqlTask.java
Patch:
@@ -244,6 +244,9 @@ public void executeFuncAndSql(SqlBinds mainSqlBinds,
         PreparedStatement stmt = null;
         ResultSet resultSet = null;
         try {
+
+            baseDataSource.setConnParams(sqlParameters.getConnParams());
+
             // create connection
             connection = baseDataSource.getConnection();
             // create temp function

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/UdfFunc.java
Patch:
@@ -230,7 +230,7 @@ public Object deserializeKey(String key, DeserializationContext ctxt) throws IOE
             if (StringUtils.isBlank(key)) {
                 return null;
             }
-            return JSONUtils.parseObject(key);
+            return JSONUtils.parseObject(key, UdfFunc.class);
         }
     }
 }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProjectServiceImpl.java
Patch:
@@ -224,7 +224,7 @@ public Map<String, Object> deleteProject(User loginUser, Integer projectId) {
             return result;
         }
 
-        List<ProcessDefinition> processDefinitionList = processDefinitionMapper.queryAllDefinitionList(projectId);
+        List<ProcessDefinition> processDefinitionList = processDefinitionMapper.queryAllDefinitionList(project.getCode());
 
         if (!processDefinitionList.isEmpty()) {
             putMsg(result, Status.DELETE_PROJECT_ERROR_DEFINES_NOT_NULL);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/utils/exportprocess/DependentParam.java
Patch:
@@ -91,7 +91,7 @@ public JsonNode addImportSpecialParam(JsonNode taskNode) {
                     ObjectNode dependentItem = (ObjectNode) dependItemList.path(k);
                     Project dependentItemProject = projectMapper.queryByName(dependentItem.path("projectName").asText());
                     if(dependentItemProject != null){
-                        ProcessDefinition definition = processDefineMapper.queryByDefineName(dependentItemProject.getId(),dependentItem.path("definitionName").asText());
+                        ProcessDefinition definition = processDefineMapper.queryByDefineName(dependentItemProject.getCode(),dependentItem.path("definitionName").asText());
                         if(definition != null){
                             dependentItem.put("projectId",dependentItemProject.getId());
                             dependentItem.put("definitionId",definition.getId());

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProjectServiceTest.java
Patch:
@@ -216,15 +216,15 @@ public void testDeleteProject() {
         Assert.assertEquals(Status.USER_NO_OPERATION_PROJECT_PERM, result.get(Constants.STATUS));
 
         //DELETE_PROJECT_ERROR_DEFINES_NOT_NULL
-        Mockito.when(processDefinitionMapper.queryAllDefinitionList(1)).thenReturn(getProcessDefinitions());
+        Mockito.when(processDefinitionMapper.queryAllDefinitionList(1L)).thenReturn(getProcessDefinitions());
         loginUser.setUserType(UserType.ADMIN_USER);
         result = projectService.deleteProject(loginUser, 1);
         logger.info(result.toString());
         Assert.assertEquals(Status.DELETE_PROJECT_ERROR_DEFINES_NOT_NULL, result.get(Constants.STATUS));
 
         //success
         Mockito.when(projectMapper.deleteById(1)).thenReturn(1);
-        Mockito.when(processDefinitionMapper.queryAllDefinitionList(1)).thenReturn(new ArrayList<>());
+        Mockito.when(processDefinitionMapper.queryAllDefinitionList(1L)).thenReturn(new ArrayList<>());
         result = projectService.deleteProject(loginUser, 1);
         logger.info(result.toString());
         Assert.assertEquals(Status.SUCCESS, result.get(Constants.STATUS));

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/CommandMapper.java
Patch:
@@ -41,14 +41,14 @@ public interface CommandMapper extends BaseMapper<Command> {
      * @param userId userId
      * @param startTime startTime
      * @param endTime endTime
-     * @param projectIdArray projectIdArray
+     * @param projectCodeArray projectCodeArray
      * @return CommandCount list
      */
     List<CommandCount> countCommandState(
             @Param("userId") int userId,
             @Param("startTime") Date startTime,
             @Param("endTime") Date endTime,
-            @Param("projectIdArray") Integer[] projectIdArray);
+            @Param("projectCodeArray") Long[] projectCodeArray);
 
 
 

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/ErrorCommandMapper.java
Patch:
@@ -33,11 +33,11 @@ public interface ErrorCommandMapper extends BaseMapper<ErrorCommand> {
      * count command state
      * @param startTime startTime
      * @param endTime endTime
-     * @param projectIdArray projectIdArray
+     * @param projectCodeArray projectCodeArray
      * @return CommandCount list
      */
     List<CommandCount> countCommandState(
             @Param("startTime") Date startTime,
             @Param("endTime") Date endTime,
-            @Param("projectIdArray") Integer[] projectIdArray);
+            @Param("projectCodeArray") Long[] projectCodeArray);
 }

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/ProcessInstanceMapper.java
Patch:
@@ -145,13 +145,13 @@ int updateProcessInstanceByTenantId(@Param("originTenantId") int originTenantId,
      * count process instance state by user
      * @param startTime startTime
      * @param endTime endTime
-     * @param projectIds projectIds
+     * @param projectCodes projectCodes
      * @return ExecuteStatusCount list
      */
     List<ExecuteStatusCount> countInstanceStateByUser(
             @Param("startTime") Date startTime,
             @Param("endTime") Date endTime,
-            @Param("projectIds") Integer[] projectIds);
+            @Param("projectCodes") Long[] projectCodes);
 
     /**
      * query process instance by processDefinitionId

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/TaskInstanceMapper.java
Patch:
@@ -58,7 +58,7 @@ Integer countTask(
     List<ExecuteStatusCount> countTaskInstanceStateByUser(
                                                           @Param("startTime") Date startTime,
                                                           @Param("endTime") Date endTime,
-                                                          @Param("projectIds") Integer[] projectIds);
+                                                          @Param("projectCodes") Long[] projectCodes);
 
     IPage<TaskInstance> queryTaskInstanceListPaging(IPage<TaskInstance> page,
                                                     @Param("projectId") int projectId,

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/ProcessInstanceMapperTest.java
Patch:
@@ -262,9 +262,9 @@ public void testCountInstanceStateByUser() {
         processInstance.setProcessDefinitionId(processDefinition.getId());
         int update = processInstanceMapper.updateById(processInstance);
 
-        Integer[] projectIds = new Integer[]{processDefinition.getProjectId()};
+        Long[] projectCodes = new Long[]{processDefinition.getProjectCode()};
 
-        List<ExecuteStatusCount> executeStatusCounts = processInstanceMapper.countInstanceStateByUser(null, null, projectIds);
+        List<ExecuteStatusCount> executeStatusCounts = processInstanceMapper.countInstanceStateByUser(null, null, projectCodes);
 
 
         Assert.assertNotEquals(executeStatusCounts.size(), 0);

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/dispatch/host/LowerWeightHostManager.java
Patch:
@@ -149,7 +149,7 @@ public void run() {
                     String workerGroupPath = registryCenter.getWorkerGroupPath(workerGroup);
                     Set<HostWeight> hostWeights = new HashSet<>(nodes.size());
                     for(String node : nodes){
-                        String heartbeat = registryCenter.getZookeeperCachedOperator().get(workerGroupPath + "/" + node);
+                        String heartbeat = registryCenter.getRegisterOperator().get(workerGroupPath + "/" + node);
                         if(StringUtils.isNotEmpty(heartbeat)
                                 && heartbeat.split(COMMA).length == Constants.HEARTBEAT_FOR_ZOOKEEPER_INFO_LENGTH){
                             String[] parts = heartbeat.split(COMMA);

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/registry/ZookeeperNodeManager.java
Patch:
@@ -93,11 +93,11 @@ public void afterPropertiesSet() throws Exception {
         /**
          * init MasterNodeListener listener
          */
-        registryCenter.getZookeeperCachedOperator().addListener(new MasterNodeListener());
+        registryCenter.getRegisterOperator().addListener(new MasterNodeListener());
         /**
          * init WorkerNodeListener listener
          */
-        registryCenter.getZookeeperCachedOperator().addListener(new WorkerGroupNodeListener());
+        registryCenter.getRegisterOperator().addListener(new WorkerGroupNodeListener());
     }
 
     /**

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/zk/ZKMasterClient.java
Patch:
@@ -85,6 +85,9 @@ public void start() {
             //  Master registry
             masterRegistry.registry();
 
+            String registPath = this.masterRegistry.getMasterPath();
+            masterRegistry.getZookeeperRegistryCenter().getRegisterOperator().handleDeadServer(registPath, ZKNodeType.MASTER, Constants.DELETE_ZK_OP);
+
             // init system znode
             this.initSystemZNode();
 

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/master/consumer/TaskPriorityQueueConsumerTest.java
Patch:
@@ -45,7 +45,7 @@
 import org.apache.dolphinscheduler.service.queue.TaskPriority;
 import org.apache.dolphinscheduler.service.queue.TaskPriorityQueue;
 import org.apache.dolphinscheduler.service.zk.CuratorZookeeperClient;
-import org.apache.dolphinscheduler.service.zk.ZookeeperCachedOperator;
+import org.apache.dolphinscheduler.service.zk.RegisterOperator;
 import org.apache.dolphinscheduler.service.zk.ZookeeperConfig;
 
 import java.util.ArrayList;
@@ -67,7 +67,7 @@
 @RunWith(SpringJUnit4ClassRunner.class)
 @ContextConfiguration(classes = {DependencyConfig.class, SpringApplicationContext.class, SpringZKServer.class, CuratorZookeeperClient.class,
         NettyExecutorManager.class, ExecutorDispatcher.class, ZookeeperRegistryCenter.class, TaskPriorityQueueConsumer.class,
-        ZookeeperNodeManager.class, ZookeeperCachedOperator.class, ZookeeperConfig.class, MasterConfig.class,
+        ZookeeperNodeManager.class, RegisterOperator.class, ZookeeperConfig.class, MasterConfig.class,
         CuratorZookeeperClient.class})
 public class TaskPriorityQueueConsumerTest {
 

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/worker/processor/TaskCallbackServiceTest.java
Patch:
@@ -43,7 +43,7 @@
 import org.apache.dolphinscheduler.server.zk.SpringZKServer;
 import org.apache.dolphinscheduler.service.bean.SpringApplicationContext;
 import org.apache.dolphinscheduler.service.zk.CuratorZookeeperClient;
-import org.apache.dolphinscheduler.service.zk.ZookeeperCachedOperator;
+import org.apache.dolphinscheduler.service.zk.RegisterOperator;
 import org.apache.dolphinscheduler.service.zk.ZookeeperConfig;
 
 import java.util.Date;
@@ -71,7 +71,7 @@
     ZookeeperRegistryCenter.class,
     MasterConfig.class,
     WorkerConfig.class,
-    ZookeeperCachedOperator.class,
+    RegisterOperator.class,
     ZookeeperConfig.class,
     ZookeeperNodeManager.class,
     TaskCallbackService.class,

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/zk/ZookeeperCachedOperator.java
Patch:
@@ -32,6 +32,9 @@
 import org.slf4j.LoggerFactory;
 import org.springframework.stereotype.Component;
 
+/**
+ * zookeeper cache operator
+ */
 @Component
 public class ZookeeperCachedOperator extends ZookeeperOperator {
 

File: e2e/src/test/java/org/apache/dolphinscheduler/common/BrowserCommon.java
Patch:
@@ -43,7 +43,7 @@ public class BrowserCommon {
     protected Actions actions;
 
     /**
-     * Javascript
+     * JavaScript
      */
     protected JavascriptExecutor je;
 

File: e2e/src/test/java/org/apache/dolphinscheduler/common/BrowserCommon.java
Patch:
@@ -43,7 +43,7 @@ public class BrowserCommon {
     protected Actions actions;
 
     /**
-     * Javascript
+     * JavaScript
      */
     protected JavascriptExecutor je;
 

File: dolphinscheduler-alert-plugin/dolphinscheduler-alert-script/src/main/java/org/apache/dolphinscheduler/plugin/alert/script/ScriptAlertChannel.java
Patch:
@@ -34,7 +34,7 @@ public AlertResult process(AlertInfo alertinfo) {
         AlertData alertData = alertinfo.getAlertData();
         Map<String, String> paramsMap = alertinfo.getAlertParams();
         if (null == paramsMap) {
-            return new AlertResult("false", "ding talk params is null");
+            return new AlertResult("false", "script params is null");
         }
         return new ScriptSender(paramsMap).sendScriptAlert(alertData.getTitle(),alertData.getContent());
     }

File: dolphinscheduler-alert/src/main/java/org/apache/dolphinscheduler/alert/AlertServer.java
Patch:
@@ -20,8 +20,8 @@
 import static org.apache.dolphinscheduler.common.Constants.ALERT_RPC_PORT;
 
 import org.apache.dolphinscheduler.alert.plugin.AlertPluginManager;
-import org.apache.dolphinscheduler.alert.plugin.DolphinPluginLoader;
-import org.apache.dolphinscheduler.alert.plugin.DolphinPluginManagerConfig;
+import org.apache.dolphinscheduler.common.plugin.DolphinPluginLoader;
+import org.apache.dolphinscheduler.common.plugin.DolphinPluginManagerConfig;
 import org.apache.dolphinscheduler.alert.processor.AlertRequestProcessor;
 import org.apache.dolphinscheduler.alert.runner.AlertSender;
 import org.apache.dolphinscheduler.alert.utils.Constants;

File: dolphinscheduler-alert/src/test/java/org/apache/dolphinscheduler/alert/AlertServerTest.java
Patch:
@@ -18,8 +18,8 @@
 package org.apache.dolphinscheduler.alert;
 
 import org.apache.dolphinscheduler.alert.plugin.AlertPluginManager;
-import org.apache.dolphinscheduler.alert.plugin.DolphinPluginLoader;
-import org.apache.dolphinscheduler.alert.plugin.DolphinPluginManagerConfig;
+import org.apache.dolphinscheduler.common.plugin.DolphinPluginLoader;
+import org.apache.dolphinscheduler.common.plugin.DolphinPluginManagerConfig;
 import org.apache.dolphinscheduler.alert.runner.AlertSender;
 import org.apache.dolphinscheduler.alert.utils.Constants;
 import org.apache.dolphinscheduler.dao.AlertDao;

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/HadoopUtils.java
Patch:
@@ -31,6 +31,7 @@
 import org.apache.hadoop.fs.FileSystem;
 import org.apache.hadoop.fs.FileUtil;
 import org.apache.hadoop.fs.Path;
+import org.apache.hadoop.hdfs.HdfsConfiguration;
 import org.apache.hadoop.security.UserGroupInformation;
 import org.apache.hadoop.yarn.client.cli.RMAdminCLI;
 
@@ -119,7 +120,7 @@ private void initHdfsPath() {
      */
     private void init() {
         try {
-            configuration = new Configuration();
+            configuration = new HdfsConfiguration();
 
             String resourceStorageType = PropertyUtils.getUpperCaseString(Constants.RESOURCE_STORAGE_TYPE);
             ResUploadType resUploadType = ResUploadType.valueOf(resourceStorageType);

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/worker/task/shell/ShellTaskTest.java
Patch:
@@ -27,11 +27,11 @@
 
 import java.nio.file.Files;
 import java.nio.file.Paths;
+import java.util.ArrayList;
 import java.sql.DriverManager;
 import java.util.Date;
 import java.util.HashMap;
 import java.util.Map;
-
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -103,6 +103,8 @@ public void before() throws Exception {
     public void testComplementData() throws Exception {
         shellTask = new ShellTask(taskExecutionContext, logger);
         shellTask.init();
+        shellCommandExecutor.isSuccessOfYarnState(new ArrayList<>());
+        shellCommandExecutor.isSuccessOfYarnState(null);
         PowerMockito.when(shellCommandExecutor.run(anyString())).thenReturn(commandExecuteResult);
         shellTask.handle();
     }

File: dolphinscheduler-alert-plugin/dolphinscheduler-alert-email/src/main/java/org/apache/dolphinscheduler/plugin/alert/email/EmailAlertChannelFactory.java
Patch:
@@ -29,7 +29,6 @@
 import org.apache.dolphinscheduler.spi.params.InputParam;
 import org.apache.dolphinscheduler.spi.params.PasswordParam;
 import org.apache.dolphinscheduler.spi.params.RadioParam;
-import org.apache.dolphinscheduler.spi.params.base.DataType;
 import org.apache.dolphinscheduler.spi.params.base.ParamsOptions;
 import org.apache.dolphinscheduler.spi.params.base.PluginParams;
 import org.apache.dolphinscheduler.spi.params.base.Validate;
@@ -65,10 +64,9 @@ public List<PluginParams> getParams() {
                 .build();
 
         InputParam mailSmtpPort = InputParam.newBuilder(MailParamsConstants.NAME_MAIL_SMTP_PORT, MailParamsConstants.MAIL_SMTP_PORT)
-                .setValue(25)
+                .setValue("25")
                 .addValidate(Validate.newBuilder()
                         .setRequired(true)
-                        .setType(DataType.NUMBER.getDataType())
                         .build())
                 .build();
 

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/queue/PeerTaskInstancePriorityQueue.java
Patch:
@@ -82,8 +82,7 @@ public TaskInstance take() throws TaskPriorityQueueException {
      */
     @Override
     public TaskInstance poll(long timeout, TimeUnit unit) throws TaskPriorityQueueException {
-        throw new TaskPriorityQueueException("This operation is not currently supported," +
-            "and suggest to use PriorityBlockingQueue if you want！");
+        throw new TaskPriorityQueueException("This operation is not currently supported and suggest to use PriorityBlockingQueue if you want！");
     }
 
     /**

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/worker/processor/TaskCallbackServiceTest.java
Patch:
@@ -39,6 +39,7 @@
 import org.apache.dolphinscheduler.server.worker.cache.impl.TaskExecutionContextCacheManagerImpl;
 import org.apache.dolphinscheduler.server.worker.config.WorkerConfig;
 import org.apache.dolphinscheduler.server.worker.registry.WorkerRegistry;
+import org.apache.dolphinscheduler.server.worker.runner.WorkerManagerThread;
 import org.apache.dolphinscheduler.server.zk.SpringZKServer;
 import org.apache.dolphinscheduler.service.bean.SpringApplicationContext;
 import org.apache.dolphinscheduler.service.zk.CuratorZookeeperClient;
@@ -79,7 +80,8 @@
     TaskResponseProcessor.class,
     TaskExecuteProcessor.class,
     CuratorZookeeperClient.class,
-    TaskExecutionContextCacheManagerImpl.class})
+    TaskExecutionContextCacheManagerImpl.class,
+    WorkerManagerThread.class})
 public class TaskCallbackServiceTest {
 
     @Autowired

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/processor/TaskExecuteProcessor.java
Patch:
@@ -95,7 +95,9 @@ public TaskExecuteProcessor() {
      * @param taskExecutionContext task
      */
     private void setTaskCache(TaskExecutionContext taskExecutionContext) {
-        taskExecutionContextCacheManager.cacheTaskExecutionContext(taskExecutionContext);
+        TaskExecutionContext preTaskCache = new TaskExecutionContext();
+        preTaskCache.setTaskInstanceId(taskExecutionContext.getTaskInstanceId());
+        taskExecutionContextCacheManager.cacheTaskExecutionContext(preTaskCache);
     }
 
     public TaskExecuteProcessor(AlertClientService alertClientService) {

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/WorkerGroupServiceTest.java
Patch:
@@ -71,8 +71,8 @@ public void init() {
         Mockito.when(zookeeperCachedOperator.getChildrenKeys(workerPath)).thenReturn(workerGroupStrList);
 
         List<String> defaultIpList = new ArrayList<>();
-        defaultIpList.add("192.168.220.188:1234");
-        defaultIpList.add("192.168.220.189:1234");
+        defaultIpList.add("192.168.220.188:1234:100:1234567");
+        defaultIpList.add("192.168.220.189:1234:100:1234567");
 
         Mockito.when(zookeeperCachedOperator.getChildrenKeys(workerPath + "/default")).thenReturn(defaultIpList);
 

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/ProcessInstanceMapper.java
Patch:
@@ -221,7 +221,7 @@ List<ProcessInstance> queryByProcessDefineIdAndStatus(
             @Param("processDefinitionId") int processDefinitionId,
             @Param("states") int[] states);
 
-    int updateGlobalParamById(
+    int updateGlobalParamsById(
             @Param("globalParams") String globalParams,
             @Param("id")  int id);
 }

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/TaskExecuteResponseCommand.java
Patch:
@@ -72,6 +72,7 @@ public TaskExecuteResponseCommand(int taskInstanceId) {
      * task return result
      */
     private String result;
+
     public void setVarPool(String varPool) {
         this.varPool = varPool;
     }

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/ShellCommandExecutor.java
Patch:
@@ -56,6 +56,9 @@ public ShellCommandExecutor(Consumer<List<String>> logHandler,
         super(logHandler,taskExecutionContext,logger);
     }
 
+    public ShellCommandExecutor(List<String> logBuffer) {
+        super(logBuffer);
+    }
 
     @Override
     protected String buildCommandFilePath() {

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/shell/ShellTask.java
Patch:
@@ -105,7 +105,7 @@ public void handle() throws Exception {
             setExitStatusCode(commandExecuteResult.getExitStatusCode());
             setAppIds(commandExecuteResult.getAppIds());
             setProcessId(commandExecuteResult.getProcessId());
-            setResult(shellCommandExecutor.getResultString());
+            setResult(shellCommandExecutor.getTaskResultString());
         } catch (Exception e) {
             logger.error("shell task error", e);
             setExitStatusCode(Constants.EXIT_CODE_FAILURE);

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/worker/task/shell/ShellTaskTest.java
Patch:
@@ -60,7 +60,7 @@ public void before() throws Exception {
         System.setProperty("log4j2.disable.jmx", Boolean.TRUE.toString());
         shellCommandExecutor = PowerMockito.mock(ShellCommandExecutor.class);
         PowerMockito.whenNew(ShellCommandExecutor.class).withAnyArguments().thenReturn(shellCommandExecutor);
-        shellCommandExecutor.setResultString("shellReturn");
+        shellCommandExecutor.setTaskResultString("shellReturn");
         taskExecutionContext = new TaskExecutionContext();
         taskExecutionContext.setTaskInstanceId(1);
         taskExecutionContext.setTaskName("kris test");
@@ -123,4 +123,5 @@ public void testSetResult() {
         String r = "return";
         shellTask.setResult(r);
     }
+
 }

File: dolphinscheduler-service/src/test/java/org/apache/dolphinscheduler/service/process/ProcessServiceTest.java
Patch:
@@ -460,7 +460,7 @@ public void testChangeOutParam() {
         String params4ProcessString = "[{\"prop\":\"sql2\",\"direct\":null,\"type\":null,\"value\":\"\"},{\"prop\":\"out\",\"direct\":null,\"type\":null,\"value\":\"\"},"
                 + "{\"prop\":\"d\",\"direct\":\"IN\",\"type\":\"VARCHAR\",\"value\":\"20210203\"}]";
         Mockito.when(processInstanceMapper.queryDetailById(taskInstance.getProcessInstanceId())).thenReturn(processInstance);
-        Mockito.when(this.processInstanceMapper.updateGlobalParamById(params4ProcessString, processInstance.getId())).thenReturn(1);
+        Mockito.when(this.processInstanceMapper.updateGlobalParamsById(params4ProcessString, processInstance.getId())).thenReturn(1);
         processService.changeOutParam(result,taskInstance);
     }
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProjectController.java
Patch:
@@ -159,8 +159,8 @@ public Result queryProjectById(@ApiIgnore @RequestAttribute(value = Constants.SE
     @ApiOperation(value = "queryProjectListPaging", notes = "QUERY_PROJECT_LIST_PAGING_NOTES")
     @ApiImplicitParams({
             @ApiImplicitParam(name = "searchVal", value = "SEARCH_VAL", dataType = "String"),
-            @ApiImplicitParam(name = "projectId", value = "PAGE_SIZE", dataType = "Int", example = "20"),
-            @ApiImplicitParam(name = "projectId", value = "PAGE_NO", dataType = "Int", example = "1")
+            @ApiImplicitParam(name = "pageSize", value = "PAGE_SIZE", required = true, dataType = "Int", example = "20"),
+            @ApiImplicitParam(name = "pageNo", value = "PAGE_NO", required = true, dataType = "Int", example = "1")
     })
     @GetMapping(value = "/list-paging")
     @ResponseStatus(HttpStatus.OK)

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/DateUtils.java
Patch:
@@ -259,6 +259,9 @@ public static String format2Readable(long ms) {
      * @return format time
      */
     public static String format2Duration(Date d1, Date d2) {
+        if (d1 == null || d2 == null) {
+            return null;
+        }
         return format2Duration(differMs(d1, d2));
     }
 

File: dolphinscheduler-alert-plugin/dolphinscheduler-alert-script/src/test/java/org/apache/dolphinscheduler/plugin/alert/script/ScriptSenderTest.java
Patch:
@@ -47,7 +47,6 @@ public void initScriptConfig() {
 
     @Test
     public void testScriptSenderTest() {
-
         ScriptSender scriptSender = new ScriptSender(scriptConfig);
         AlertResult alertResult;
         alertResult = scriptSender.sendScriptAlert("test title Kris", "test content");

File: dolphinscheduler-alert-plugin/dolphinscheduler-alert-script/src/test/java/org/apache/dolphinscheduler/plugin/alert/script/ScriptSenderTest.java
Patch:
@@ -47,6 +47,7 @@ public void initScriptConfig() {
 
     @Test
     public void testScriptSenderTest() {
+
         ScriptSender scriptSender = new ScriptSender(scriptConfig);
         AlertResult alertResult;
         alertResult = scriptSender.sendScriptAlert("test title Kris", "test content");

File: dolphinscheduler-alert-plugin/dolphinscheduler-alert-script/src/test/java/org/apache/dolphinscheduler/plugin/alert/script/ScriptSenderTest.java
Patch:
@@ -49,9 +49,9 @@ public void initScriptConfig() {
     public void testScriptSenderTest() {
         ScriptSender scriptSender = new ScriptSender(scriptConfig);
         AlertResult alertResult;
-        alertResult = scriptSender.sendScriptAlert("testtitleKrisKi", "testcontent");
+        alertResult = scriptSender.sendScriptAlert("test title Kris", "test content");
         Assert.assertEquals("true", alertResult.getStatus());
-        alertResult = scriptSender.sendScriptAlert("errorMsgtitle ", "testcontent");
+        alertResult = scriptSender.sendScriptAlert("error msg title", "test content");
         Assert.assertEquals("false", alertResult.getStatus());
     }
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/AccessTokenController.java
Patch:
@@ -14,8 +14,8 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.api.controller;
 
+package org.apache.dolphinscheduler.api.controller;
 
 import static org.apache.dolphinscheduler.api.enums.Status.CREATE_ACCESS_TOKEN_ERROR;
 import static org.apache.dolphinscheduler.api.enums.Status.DELETE_ACCESS_TOKEN_ERROR;
@@ -54,7 +54,7 @@
 /**
  * access token controller
  */
-@Api(tags = "ACCESS_TOKEN_TAG", position = 1)
+@Api(tags = "ACCESS_TOKEN_TAG")
 @RestController
 @RequestMapping("/access-token")
 public class AccessTokenController extends BaseController {

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/DataSourceController.java
Patch:
@@ -62,7 +62,7 @@
 /**
  * data source controller
  */
-@Api(tags = "DATA_SOURCE_TAG", position = 3)
+@Api(tags = "DATA_SOURCE_TAG")
 @RestController
 @RequestMapping("datasources")
 public class DataSourceController extends BaseController {

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ExecutorController.java
Patch:
@@ -57,9 +57,9 @@
 import springfox.documentation.annotations.ApiIgnore;
 
 /**
- * execute process controller
+ * executor controller
  */
-@Api(tags = "PROCESS_INSTANCE_EXECUTOR_TAG", position = 1)
+@Api(tags = "EXECUTOR_TAG")
 @RestController
 @RequestMapping("projects/{projectName}/executors")
 public class ExecutorController extends BaseController {

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ResourcesController.java
Patch:
@@ -82,7 +82,7 @@
 /**
  * resources controller
  */
-@Api(tags = "RESOURCES_TAG", position = 1)
+@Api(tags = "RESOURCES_TAG")
 @RestController
 @RequestMapping("resources")
 public class ResourcesController extends BaseController {

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/UiPluginController.java
Patch:
@@ -46,12 +46,12 @@
 import springfox.documentation.annotations.ApiIgnore;
 
 /**
- * UiPluginController
+ * ui plugin controller
  * Some plugins (such as alert plugin) need to provide UI interfaces to users.
  * We use from-creat to dynamically generate UI interfaces. Related parameters are mainly provided by pluginParams.
  * From-create can generate dynamic ui based on this parameter.
  */
-@Api(tags = "UI_PLUGINS", position = 1)
+@Api(tags = "UI_PLUGINS_TAG")
 @RestController
 @RequestMapping("ui-plugins")
 public class UiPluginController extends BaseController {

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/AccessTokenService.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.api.service;
 
 import org.apache.dolphinscheduler.dao.entity.User;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/DataAnalysisService.java
Patch:
@@ -14,8 +14,8 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.api.service;
 
+package org.apache.dolphinscheduler.api.service;
 
 import org.apache.dolphinscheduler.dao.entity.User;
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/DataSourceService.java
Patch:
@@ -25,7 +25,7 @@
 import java.util.Map;
 
 /**
- * datasource service
+ * data source service
  */
 public interface DataSourceService {
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/LoggerService.java
Patch:
@@ -14,12 +14,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.api.service;
 
 import org.apache.dolphinscheduler.api.utils.Result;
 
 /**
- * log service
+ * logger service
  */
 public interface LoggerService {
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProcessDefinitionVersionService.java
Patch:
@@ -23,6 +23,9 @@
 
 import java.util.Map;
 
+/**
+ * process definition version service
+ */
 public interface ProcessDefinitionVersionService {
 
     /**

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProjectService.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.api.service;
 
 import org.apache.dolphinscheduler.dao.entity.Project;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/SessionService.java
Patch:
@@ -14,13 +14,14 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.api.service;
 
-import javax.servlet.http.HttpServletRequest;
+package org.apache.dolphinscheduler.api.service;
 
 import org.apache.dolphinscheduler.dao.entity.Session;
 import org.apache.dolphinscheduler.dao.entity.User;
 
+import javax.servlet.http.HttpServletRequest;
+
 /**
  * session service
  */

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/UdfFuncService.java
Patch:
@@ -24,7 +24,7 @@
 import java.util.Map;
 
 /**
- * udf function service
+ * udf func service
  */
 public interface UdfFuncService {
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/UiPluginService.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.Map;
 
 /**
- * UiPluginService
+ * ui plugin service
  */
 public interface UiPluginService {
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/WorkerGroupService.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.Map;
 
 /**
- * work group service
+ * worker group service
  */
 public interface WorkerGroupService {
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/AccessTokenServiceImpl.java
Patch:
@@ -14,11 +14,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.api.service.impl;
 
 import org.apache.dolphinscheduler.api.enums.Status;
 import org.apache.dolphinscheduler.api.service.AccessTokenService;
-import org.apache.dolphinscheduler.api.service.BaseService;
 import org.apache.dolphinscheduler.api.utils.PageInfo;
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.UserType;
@@ -44,7 +44,7 @@
  * access token service impl
  */
 @Service
-public class AccessTokenServiceImpl extends BaseService implements AccessTokenService {
+public class AccessTokenServiceImpl extends BaseServiceImpl implements AccessTokenService {
 
     private static final Logger logger = LoggerFactory.getLogger(AccessTokenServiceImpl.class);
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/AlertGroupServiceImpl.java
Patch:
@@ -19,7 +19,6 @@
 
 import org.apache.dolphinscheduler.api.enums.Status;
 import org.apache.dolphinscheduler.api.service.AlertGroupService;
-import org.apache.dolphinscheduler.api.service.BaseService;
 import org.apache.dolphinscheduler.api.utils.PageInfo;
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.utils.CollectionUtils;
@@ -44,7 +43,7 @@
  * alert group service impl
  */
 @Service
-public class AlertGroupServiceImpl extends BaseService implements AlertGroupService {
+public class AlertGroupServiceImpl extends BaseServiceImpl implements AlertGroupService {
 
     @Autowired
     private AlertGroupMapper alertGroupMapper;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/AlertPluginInstanceServiceImpl.java
Patch:
@@ -19,7 +19,6 @@
 
 import org.apache.dolphinscheduler.api.enums.Status;
 import org.apache.dolphinscheduler.api.service.AlertPluginInstanceService;
-import org.apache.dolphinscheduler.api.service.BaseService;
 import org.apache.dolphinscheduler.api.utils.PageInfo;
 import org.apache.dolphinscheduler.api.vo.AlertPluginInstanceVO;
 import org.apache.dolphinscheduler.common.Constants;
@@ -54,7 +53,7 @@
  */
 @Service
 @Lazy
-public class AlertPluginInstanceServiceImpl extends BaseService implements AlertPluginInstanceService {
+public class AlertPluginInstanceServiceImpl extends BaseServiceImpl implements AlertPluginInstanceService {
 
     @Autowired
     private AlertPluginInstanceMapper alertPluginInstanceMapper;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/DataAnalysisServiceImpl.java
Patch:
@@ -14,13 +14,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.api.service.impl;
 
 import org.apache.dolphinscheduler.api.dto.CommandStateCount;
 import org.apache.dolphinscheduler.api.dto.DefineUserDto;
 import org.apache.dolphinscheduler.api.dto.TaskCountDto;
 import org.apache.dolphinscheduler.api.enums.Status;
-import org.apache.dolphinscheduler.api.service.BaseService;
 import org.apache.dolphinscheduler.api.service.DataAnalysisService;
 import org.apache.dolphinscheduler.api.service.ProjectService;
 import org.apache.dolphinscheduler.common.Constants;
@@ -60,7 +60,7 @@
  * data analysis service impl
  */
 @Service
-public class DataAnalysisServiceImpl extends BaseService implements DataAnalysisService {
+public class DataAnalysisServiceImpl extends BaseServiceImpl implements DataAnalysisService {
 
     @Autowired
     private ProjectMapper projectMapper;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/DataSourceServiceImpl.java
Patch:
@@ -18,7 +18,6 @@
 package org.apache.dolphinscheduler.api.service.impl;
 
 import org.apache.dolphinscheduler.api.enums.Status;
-import org.apache.dolphinscheduler.api.service.BaseService;
 import org.apache.dolphinscheduler.api.service.DataSourceService;
 import org.apache.dolphinscheduler.api.utils.PageInfo;
 import org.apache.dolphinscheduler.api.utils.Result;
@@ -57,10 +56,10 @@
 import com.fasterxml.jackson.databind.node.ObjectNode;
 
 /**
- * datasource service impl
+ * data source service impl
  */
 @Service
-public class DataSourceServiceImpl extends BaseService implements DataSourceService {
+public class DataSourceServiceImpl extends BaseServiceImpl implements DataSourceService {
 
     private static final Logger logger = LoggerFactory.getLogger(DataSourceServiceImpl.class);
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ExecutorServiceImpl.java
Patch:
@@ -26,7 +26,6 @@
 
 import org.apache.dolphinscheduler.api.enums.ExecuteType;
 import org.apache.dolphinscheduler.api.enums.Status;
-import org.apache.dolphinscheduler.api.service.BaseService;
 import org.apache.dolphinscheduler.api.service.ExecutorService;
 import org.apache.dolphinscheduler.api.service.MonitorService;
 import org.apache.dolphinscheduler.api.service.ProjectService;
@@ -73,7 +72,7 @@
  * executor service impl
  */
 @Service
-public class ExecutorServiceImpl extends BaseService implements ExecutorService {
+public class ExecutorServiceImpl extends BaseServiceImpl implements ExecutorService {
 
     private static final Logger logger = LoggerFactory.getLogger(ExecutorServiceImpl.class);
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/LoggerServiceImpl.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.api.service.impl;
 
 import org.apache.dolphinscheduler.api.enums.Status;
@@ -41,7 +42,7 @@
 import org.springframework.stereotype.Service;
 
 /**
- * log service
+ * logger service impl
  */
 @Service
 public class LoggerServiceImpl implements LoggerService {

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/MonitorServiceImpl.java
Patch:
@@ -20,7 +20,6 @@
 import static org.apache.dolphinscheduler.common.utils.Preconditions.checkNotNull;
 
 import org.apache.dolphinscheduler.api.enums.Status;
-import org.apache.dolphinscheduler.api.service.BaseService;
 import org.apache.dolphinscheduler.api.service.MonitorService;
 import org.apache.dolphinscheduler.api.utils.ZookeeperMonitor;
 import org.apache.dolphinscheduler.common.Constants;
@@ -47,7 +46,7 @@
  * monitor service impl
  */
 @Service
-public class MonitorServiceImpl extends BaseService implements MonitorService {
+public class MonitorServiceImpl extends BaseServiceImpl implements MonitorService {
 
     @Autowired
     private ZookeeperMonitor zookeeperMonitor;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProcessDefinitionServiceImpl.java
Patch:
@@ -23,7 +23,6 @@
 import org.apache.dolphinscheduler.api.dto.treeview.Instance;
 import org.apache.dolphinscheduler.api.dto.treeview.TreeViewDto;
 import org.apache.dolphinscheduler.api.enums.Status;
-import org.apache.dolphinscheduler.api.service.BaseService;
 import org.apache.dolphinscheduler.api.service.ProcessDefinitionService;
 import org.apache.dolphinscheduler.api.service.ProcessDefinitionVersionService;
 import org.apache.dolphinscheduler.api.service.ProcessInstanceService;
@@ -111,8 +110,7 @@
  * process definition service impl
  */
 @Service
-public class ProcessDefinitionServiceImpl extends BaseService implements
-        ProcessDefinitionService {
+public class ProcessDefinitionServiceImpl extends BaseServiceImpl implements ProcessDefinitionService {
 
     private static final Logger logger = LoggerFactory.getLogger(ProcessDefinitionServiceImpl.class);
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProcessInstanceServiceImpl.java
Patch:
@@ -27,7 +27,6 @@
 import org.apache.dolphinscheduler.api.dto.gantt.GanttDto;
 import org.apache.dolphinscheduler.api.dto.gantt.Task;
 import org.apache.dolphinscheduler.api.enums.Status;
-import org.apache.dolphinscheduler.api.service.BaseService;
 import org.apache.dolphinscheduler.api.service.ExecutorService;
 import org.apache.dolphinscheduler.api.service.LoggerService;
 import org.apache.dolphinscheduler.api.service.ProcessDefinitionService;
@@ -94,7 +93,7 @@
  * process instance service impl
  */
 @Service
-public class ProcessInstanceServiceImpl extends BaseService implements ProcessInstanceService {
+public class ProcessInstanceServiceImpl extends BaseServiceImpl implements ProcessInstanceService {
 
     @Autowired
     ProjectMapper projectMapper;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProjectServiceImpl.java
Patch:
@@ -19,7 +19,6 @@
 import static org.apache.dolphinscheduler.api.utils.CheckUtils.checkDesc;
 
 import org.apache.dolphinscheduler.api.enums.Status;
-import org.apache.dolphinscheduler.api.service.BaseService;
 import org.apache.dolphinscheduler.api.service.ProjectService;
 import org.apache.dolphinscheduler.api.utils.PageInfo;
 import org.apache.dolphinscheduler.common.Constants;
@@ -48,10 +47,10 @@
 import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
 
 /**
- * project service implement
+ * project service impl
  **/
 @Service
-public class ProjectServiceImpl extends BaseService implements ProjectService {
+public class ProjectServiceImpl extends BaseServiceImpl implements ProjectService {
 
     @Autowired
     private ProjectMapper projectMapper;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/QueueServiceImpl.java
Patch:
@@ -18,7 +18,6 @@
 package org.apache.dolphinscheduler.api.service.impl;
 
 import org.apache.dolphinscheduler.api.enums.Status;
-import org.apache.dolphinscheduler.api.service.BaseService;
 import org.apache.dolphinscheduler.api.service.QueueService;
 import org.apache.dolphinscheduler.api.utils.PageInfo;
 import org.apache.dolphinscheduler.api.utils.Result;
@@ -47,7 +46,7 @@
  * queue service impl
  */
 @Service
-public class QueueServiceImpl extends BaseService implements QueueService {
+public class QueueServiceImpl extends BaseServiceImpl implements QueueService {
 
     private static final Logger logger = LoggerFactory.getLogger(QueueServiceImpl.class);
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ResourcesServiceImpl.java
Patch:
@@ -27,7 +27,6 @@
 import org.apache.dolphinscheduler.api.dto.resources.visitor.Visitor;
 import org.apache.dolphinscheduler.api.enums.Status;
 import org.apache.dolphinscheduler.api.exceptions.ServiceException;
-import org.apache.dolphinscheduler.api.service.BaseService;
 import org.apache.dolphinscheduler.api.service.ResourcesService;
 import org.apache.dolphinscheduler.api.utils.PageInfo;
 import org.apache.dolphinscheduler.api.utils.RegexUtils;
@@ -86,7 +85,7 @@
  * resources service impl
  */
 @Service
-public class ResourcesServiceImpl extends BaseService implements ResourcesService {
+public class ResourcesServiceImpl extends BaseServiceImpl implements ResourcesService {
 
     private static final Logger logger = LoggerFactory.getLogger(ResourcesServiceImpl.class);
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/SchedulerServiceImpl.java
Patch:
@@ -20,7 +20,6 @@
 import org.apache.dolphinscheduler.api.dto.ScheduleParam;
 import org.apache.dolphinscheduler.api.enums.Status;
 import org.apache.dolphinscheduler.api.exceptions.ServiceException;
-import org.apache.dolphinscheduler.api.service.BaseService;
 import org.apache.dolphinscheduler.api.service.ExecutorService;
 import org.apache.dolphinscheduler.api.service.MonitorService;
 import org.apache.dolphinscheduler.api.service.ProjectService;
@@ -69,7 +68,7 @@
  * scheduler service impl
  */
 @Service
-public class SchedulerServiceImpl extends BaseService implements SchedulerService {
+public class SchedulerServiceImpl extends BaseServiceImpl implements SchedulerService {
 
     private static final Logger logger = LoggerFactory.getLogger(SchedulerServiceImpl.class);
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/TaskInstanceServiceImpl.java
Patch:
@@ -18,7 +18,6 @@
 package org.apache.dolphinscheduler.api.service.impl;
 
 import org.apache.dolphinscheduler.api.enums.Status;
-import org.apache.dolphinscheduler.api.service.BaseService;
 import org.apache.dolphinscheduler.api.service.ProcessInstanceService;
 import org.apache.dolphinscheduler.api.service.ProjectService;
 import org.apache.dolphinscheduler.api.service.TaskInstanceService;
@@ -54,7 +53,7 @@
  * task instance service impl
  */
 @Service
-public class TaskInstanceServiceImpl extends BaseService implements TaskInstanceService {
+public class TaskInstanceServiceImpl extends BaseServiceImpl implements TaskInstanceService {
 
     @Autowired
     ProjectMapper projectMapper;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/TaskRecordServiceImpl.java
Patch:
@@ -21,7 +21,6 @@
 import static org.apache.dolphinscheduler.common.Constants.TASK_RECORD_TABLE_HIVE_LOG;
 
 import org.apache.dolphinscheduler.api.enums.Status;
-import org.apache.dolphinscheduler.api.service.BaseService;
 import org.apache.dolphinscheduler.api.service.TaskRecordService;
 import org.apache.dolphinscheduler.api.utils.PageInfo;
 import org.apache.dolphinscheduler.common.Constants;
@@ -38,7 +37,7 @@
  * task record service impl
  */
 @Service
-public class TaskRecordServiceImpl extends BaseService implements TaskRecordService {
+public class TaskRecordServiceImpl extends BaseServiceImpl implements TaskRecordService {
 
     /**
      * query task record list paging

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/UdfFuncServiceImpl.java
Patch:
@@ -18,7 +18,6 @@
 package org.apache.dolphinscheduler.api.service.impl;
 
 import org.apache.dolphinscheduler.api.enums.Status;
-import org.apache.dolphinscheduler.api.service.BaseService;
 import org.apache.dolphinscheduler.api.service.UdfFuncService;
 import org.apache.dolphinscheduler.api.utils.PageInfo;
 import org.apache.dolphinscheduler.api.utils.Result;
@@ -48,10 +47,10 @@
 import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
 
 /**
- * udf function service impl
+ * udf func service impl
  */
 @Service
-public class UdfFuncServiceImpl extends BaseService implements UdfFuncService {
+public class UdfFuncServiceImpl extends BaseServiceImpl implements UdfFuncService {
 
     private static final Logger logger = LoggerFactory.getLogger(UdfFuncServiceImpl.class);
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/WorkFlowLineageServiceImpl.java
Patch:
@@ -18,7 +18,6 @@
 package org.apache.dolphinscheduler.api.service.impl;
 
 import org.apache.dolphinscheduler.api.enums.Status;
-import org.apache.dolphinscheduler.api.service.BaseService;
 import org.apache.dolphinscheduler.api.service.WorkFlowLineageService;
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.dao.entity.WorkFlowLineage;
@@ -39,7 +38,7 @@
  * work flow lineage service impl
  */
 @Service
-public class WorkFlowLineageServiceImpl extends BaseService implements WorkFlowLineageService {
+public class WorkFlowLineageServiceImpl extends BaseServiceImpl implements WorkFlowLineageService {
 
     @Autowired
     private WorkFlowLineageMapper workFlowLineageMapper;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/WorkerGroupServiceImpl.java
Patch:
@@ -20,7 +20,6 @@
 import static org.apache.dolphinscheduler.common.Constants.DEFAULT_WORKER_GROUP;
 
 import org.apache.dolphinscheduler.api.enums.Status;
-import org.apache.dolphinscheduler.api.service.BaseService;
 import org.apache.dolphinscheduler.api.service.WorkerGroupService;
 import org.apache.dolphinscheduler.api.utils.PageInfo;
 import org.apache.dolphinscheduler.common.Constants;
@@ -44,10 +43,10 @@
 
 
 /**
- * work group service impl
+ * worker group service impl
  */
 @Service
-public class WorkerGroupServiceImpl extends BaseService implements WorkerGroupService {
+public class WorkerGroupServiceImpl extends BaseServiceImpl implements WorkerGroupService {
 
     private static final String NO_NODE_EXCEPTION_REGEX = "KeeperException$NoNodeException";
 

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/ExecutorControllerTest.java
Patch:
@@ -42,6 +42,7 @@
  * executor controller test
  */
 public class ExecutorControllerTest extends AbstractControllerTest {
+
     private static Logger logger = LoggerFactory.getLogger(ExecutorControllerTest.class);
 
     @Ignore

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/ProcessInstanceControllerTest.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.api.controller;
 
 import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/AlertPluginInstanceServiceTest.java
Patch:
@@ -43,6 +43,9 @@
 import org.mockito.Mockito;
 import org.mockito.junit.MockitoJUnitRunner;
 
+/**
+ * alert plugin instance service test
+ */
 @RunWith(MockitoJUnitRunner.class)
 public class AlertPluginInstanceServiceTest {
 

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ExecutorService2Test.java
Patch:
@@ -60,7 +60,7 @@
 import org.mockito.junit.MockitoJUnitRunner;
 
 /**
- * test for ExecutorService
+ * executor service 2 test
  */
 @RunWith(MockitoJUnitRunner.Silent.class)
 public class ExecutorService2Test {

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProcessDefinitionServiceTest.java
Patch:
@@ -85,6 +85,9 @@
 import com.baomidou.mybatisplus.core.metadata.IPage;
 import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
 
+/**
+ * process definition service test
+ */
 @RunWith(MockitoJUnitRunner.class)
 public class ProcessDefinitionServiceTest {
 

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProcessDefinitionVersionServiceTest.java
Patch:
@@ -45,6 +45,9 @@
 import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
 import com.google.common.collect.Lists;
 
+/**
+ * process definition version service test
+ */
 @RunWith(MockitoJUnitRunner.class)
 public class ProcessDefinitionVersionServiceTest {
 

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProcessInstanceServiceTest.java
Patch:
@@ -65,6 +65,9 @@
 
 import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
 
+/**
+ * process instance service test
+ */
 @RunWith(MockitoJUnitRunner.Silent.class)
 public class ProcessInstanceServiceTest {
 
@@ -92,9 +95,6 @@ public class ProcessInstanceServiceTest {
     @Mock
     ProcessDefinitionVersionService processDefinitionVersionService;
 
-    @Mock
-    ExecutorService execService;
-
     @Mock
     TaskInstanceMapper taskInstanceMapper;
 

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProjectServiceTest.java
Patch:
@@ -50,6 +50,9 @@
 import com.baomidou.mybatisplus.core.metadata.IPage;
 import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
 
+/**
+ * project service test
+ **/
 @RunWith(MockitoJUnitRunner.class)
 public class ProjectServiceTest {
 
@@ -67,7 +70,6 @@ public class ProjectServiceTest {
     @Mock
     private ProcessDefinitionMapper processDefinitionMapper;
 
-
     private String projectName = "ProjectServiceTest";
 
     private String userName = "ProjectServiceTest";

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/TaskInstanceServiceTest.java
Patch:
@@ -51,16 +51,16 @@
 import org.mockito.Mock;
 import org.mockito.Mockito;
 import org.mockito.junit.MockitoJUnitRunner;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 import org.springframework.boot.test.context.SpringBootTest;
 
 import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
 
+/**
+ * task instance service test
+ */
 @RunWith(MockitoJUnitRunner.Silent.class)
 @SpringBootTest(classes = ApiApplicationServer.class)
 public class TaskInstanceServiceTest {
-    private static final Logger logger = LoggerFactory.getLogger(TaskInstanceServiceTest.class);
 
     @InjectMocks
     private TaskInstanceServiceImpl taskInstanceService;

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/UiPluginServiceTest.java
Patch:
@@ -36,7 +36,7 @@
 import org.mockito.junit.MockitoJUnitRunner;
 
 /**
- * UiPluginServiceTest
+ * ui plugin service test
  */
 @RunWith(MockitoJUnitRunner.class)
 public class UiPluginServiceTest {

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/utils/ResourceProcessDefinitionUtils.java
Patch:
@@ -35,7 +35,6 @@ public static Map<Integer, Set<Integer>> getResourceProcessDefinitionMap(List<Ma
         Map<Integer, Set<Integer>> result = new HashMap<>();
         if (CollectionUtils.isNotEmpty(list)) {
             for (Map<String, Object> tempMap : list) {
-
                 map.put((Integer) tempMap.get("id"), (String)tempMap.get("resource_ids"));
             }
         }

File: dolphinscheduler-alert-plugin/dolphinscheduler-alert-script/src/main/java/org/apache/dolphinscheduler/plugin/alert/script/ScriptAlertChannelFactory.java
Patch:
@@ -56,8 +56,8 @@ public List<PluginParams> getParams() {
                 .build();
 
         RadioParam scriptTypeParams = RadioParam.newBuilder(ScriptParamsConstants.NAME_SCRIPT_TYPE, ScriptParamsConstants.SCRIPT_TYPE)
-                .addParamsOptions(new ParamsOptions(ScriptType.SHELL.getDescp(), ScriptType.SHELL.getCode(), false))
-                .setValue(ScriptType.SHELL.getCode())
+                .addParamsOptions(new ParamsOptions(ScriptType.SHELL.getDescp(), ScriptType.SHELL.getDescp(), false))
+                .setValue(ScriptType.SHELL.getDescp())
                 .addValidate(Validate.newBuilder().setRequired(true).build())
                 .build();
 

File: dolphinscheduler-alert-plugin/dolphinscheduler-alert-script/src/main/java/org/apache/dolphinscheduler/plugin/alert/script/ScriptSender.java
Patch:
@@ -33,19 +33,19 @@ public class ScriptSender {
 
     private String scriptPath;
 
-    private Integer scriptType;
+    private String scriptType;
 
     private String userParams;
 
     ScriptSender(Map<String, String> config) {
         scriptPath = config.get(ScriptParamsConstants.NAME_SCRIPT_PATH);
-        scriptType = Integer.parseInt(config.get(ScriptParamsConstants.NAME_SCRIPT_TYPE));
+        scriptType = config.get(ScriptParamsConstants.NAME_SCRIPT_TYPE);
         userParams = config.get(ScriptParamsConstants.NAME_SCRIPT_USER_PARAMS);
     }
 
     AlertResult sendScriptAlert(String msg) {
         AlertResult alertResult = new AlertResult();
-        if (ScriptType.of(scriptType).equals(ScriptType.SHELL)) {
+        if (ScriptType.SHELL.getDescp().equals(scriptType)) {
             return executeShellScript(msg);
         }
         return alertResult;

File: dolphinscheduler-alert-plugin/dolphinscheduler-alert-script/src/test/java/org/apache/dolphinscheduler/plugin/alert/script/ScriptSenderTest.java
Patch:
@@ -40,7 +40,7 @@ public class ScriptSenderTest {
     @Before
     public void initScriptConfig() {
 
-        scriptConfig.put(ScriptParamsConstants.NAME_SCRIPT_TYPE, String.valueOf(ScriptType.SHELL.getCode()));
+        scriptConfig.put(ScriptParamsConstants.NAME_SCRIPT_TYPE, String.valueOf(ScriptType.SHELL.getDescp()));
         scriptConfig.put(ScriptParamsConstants.NAME_SCRIPT_USER_PARAMS, "userParams");
         scriptConfig.put(ScriptParamsConstants.NAME_SCRIPT_PATH, shellFilPath);
     }

File: dolphinscheduler-spi/src/main/java/org/apache/dolphinscheduler/spi/alert/AlertInfo.java
Patch:
@@ -27,7 +27,7 @@ public class AlertInfo {
     /**
      * all params this plugin need is in alertProps
      */
-    private Map<String,String> alertParams;
+    private Map<String, String> alertParams;
 
     /**
      * the alert content

File: dolphinscheduler-spi/src/main/java/org/apache/dolphinscheduler/spi/params/RadioParam.java
Patch:
@@ -17,6 +17,8 @@
 
 package org.apache.dolphinscheduler.spi.params;
 
+import static org.apache.dolphinscheduler.spi.utils.Constants.STRING_PLUGIN_PARAM_OPTIONS;
+
 import org.apache.dolphinscheduler.spi.params.base.FormType;
 import org.apache.dolphinscheduler.spi.params.base.ParamsOptions;
 import org.apache.dolphinscheduler.spi.params.base.PluginParams;
@@ -32,7 +34,7 @@
  */
 public class RadioParam extends PluginParams {
 
-    @JsonProperty("options")
+    @JsonProperty(STRING_PLUGIN_PARAM_OPTIONS)
     private List<ParamsOptions> paramsOptionsList;
 
     private RadioParam(Builder builder) {

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/master/registry/MasterRegistryTest.java
Patch:
@@ -19,6 +19,7 @@
 
 import static org.apache.dolphinscheduler.common.Constants.HEARTBEAT_FOR_ZOOKEEPER_INFO_LENGTH;
 
+import org.apache.dolphinscheduler.common.utils.NetUtils;
 import org.apache.dolphinscheduler.remote.utils.Constants;
 import org.apache.dolphinscheduler.server.master.config.MasterConfig;
 import org.apache.dolphinscheduler.server.registry.ZookeeperRegistryCenter;
@@ -59,7 +60,7 @@ public void testRegistry() throws InterruptedException {
         masterRegistry.registry();
         String masterPath = zookeeperRegistryCenter.getMasterPath();
         TimeUnit.SECONDS.sleep(masterConfig.getMasterHeartbeatInterval() + 2); //wait heartbeat info write into zk node
-        String masterNodePath = masterPath + "/" + (Constants.LOCAL_ADDRESS + ":" + masterConfig.getListenPort());
+        String masterNodePath = masterPath + "/" + (NetUtils.getAddr(Constants.LOCAL_ADDRESS, masterConfig.getListenPort()));
         String heartbeat = zookeeperRegistryCenter.getZookeeperCachedOperator().get(masterNodePath);
         Assert.assertEquals(HEARTBEAT_FOR_ZOOKEEPER_INFO_LENGTH, heartbeat.split(",").length);
         masterRegistry.unRegistry();

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/registry/MasterRegistry.java
Patch:
@@ -135,7 +135,7 @@ private String getMasterPath() {
      */
     private String getLocalAddress() {
 
-        return NetUtils.getHost() + ":" + masterConfig.getListenPort();
+        return NetUtils.getAddr(masterConfig.getListenPort());
 
     }
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/ConditionsTaskExecThread.java
Patch:
@@ -125,7 +125,7 @@ private void updateTaskState() {
 
     private void initTaskParameters() {
         this.taskInstance.setLogPath(LogUtils.getTaskLogPath(taskInstance));
-        this.taskInstance.setHost(NetUtils.getHost() + Constants.COLON + masterConfig.getListenPort());
+        this.taskInstance.setHost(NetUtils.getAddr(masterConfig.getListenPort()));
         taskInstance.setState(ExecutionStatus.RUNNING_EXECUTION);
         taskInstance.setStartTime(new Date());
         this.processService.saveTaskInstance(taskInstance);

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/DependentTaskExecThread.java
Patch:
@@ -185,7 +185,7 @@ private void cancelTaskInstance() {
 
     private void initTaskParameters() {
         taskInstance.setLogPath(LogUtils.getTaskLogPath(taskInstance));
-        taskInstance.setHost(NetUtils.getHost() + Constants.COLON + masterConfig.getListenPort());
+        taskInstance.setHost(NetUtils.getAddr(masterConfig.getListenPort()));
         taskInstance.setState(ExecutionStatus.RUNNING_EXECUTION);
         taskInstance.setStartTime(new Date());
         processService.updateTaskInstance(taskInstance);

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterSchedulerService.java
Patch:
@@ -178,7 +178,7 @@ private void scheduleProcess() throws Exception {
         }
     }
 
-    private String getLocalAddress(){
-        return NetUtils.getHost() + ":" + masterConfig.getListenPort();
+    private String getLocalAddress() {
+        return NetUtils.getAddr(masterConfig.getListenPort());
     }
 }

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/processor/TaskExecuteProcessor.java
Patch:
@@ -139,7 +139,7 @@ public void process(Channel channel, Command command) {
             taskExecutionContext.getProcessInstanceId(),
             taskExecutionContext.getTaskInstanceId()));
 
-        taskExecutionContext.setHost(NetUtils.getHost() + ":" + workerConfig.getListenPort());
+        taskExecutionContext.setHost(NetUtils.getAddr(workerConfig.getListenPort()));
         taskExecutionContext.setStartTime(new Date());
         taskExecutionContext.setLogPath(LogUtils.getTaskLogPath(taskExecutionContext));
         taskExecutionContext.setCurrentExecutionStatus(ExecutionStatus.RUNNING_EXECUTION);

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/registry/WorkerRegistry.java
Patch:
@@ -169,7 +169,7 @@ private Set<String> getWorkerZkPaths() {
      * get local address
      */
     private String getLocalAddress() {
-        return NetUtils.getHost() + COLON + workerConfig.getListenPort();
+        return NetUtils.getAddr(workerConfig.getListenPort());
     }
 
     /**

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/master/dispatch/executor/NettyExecutorManagerTest.java
Patch:
@@ -79,7 +79,7 @@ public void testExecute() throws ExecuteException{
                 .buildProcessDefinitionRelatedInfo(processDefinition)
                 .create();
         ExecutionContext executionContext = new ExecutionContext(context.toCommand(), ExecutorType.WORKER);
-        executionContext.setHost(Host.of(NetUtils.getHost() + ":" + serverConfig.getListenPort()));
+        executionContext.setHost(Host.of(NetUtils.getAddr(serverConfig.getListenPort())));
         Boolean execute = nettyExecutorManager.execute(executionContext);
         Assert.assertTrue(execute);
         nettyRemotingServer.close();
@@ -98,7 +98,7 @@ public void testExecuteWithException() throws ExecuteException{
                 .buildProcessDefinitionRelatedInfo(processDefinition)
                 .create();
         ExecutionContext executionContext = new ExecutionContext(context.toCommand(), ExecutorType.WORKER);
-        executionContext.setHost(Host.of(NetUtils.getHost() + ":4444"));
+        executionContext.setHost(Host.of(NetUtils.getAddr(4444)));
         nettyExecutorManager.execute(executionContext);
 
     }

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/registry/ZookeeperNodeManagerTest.java
Patch:
@@ -75,7 +75,7 @@ public void testGetMasterNodes(){
         Set<String> masterNodes = zookeeperNodeManager.getMasterNodes();
         Assert.assertTrue(CollectionUtils.isNotEmpty(masterNodes));
         Assert.assertEquals(1, masterNodes.size());
-        Assert.assertEquals(NetUtils.getHost() + ":" + masterConfig.getListenPort(), masterNodes.iterator().next());
+        Assert.assertEquals(NetUtils.getAddr(masterConfig.getListenPort()), masterNodes.iterator().next());
         workerRegistry.unRegistry();
     }
 
@@ -105,7 +105,7 @@ public void testGetWorkerGroupNodesWithParam(){
         Set<String> workerNodes = zookeeperNodeManager.getWorkerGroupNodes("default");
         Assert.assertTrue(CollectionUtils.isNotEmpty(workerNodes));
         Assert.assertEquals(1, workerNodes.size());
-        Assert.assertEquals(NetUtils.getHost() + ":" + workerConfig.getListenPort(), workerNodes.iterator().next());
+        Assert.assertEquals(NetUtils.getAddr(workerConfig.getListenPort()), workerNodes.iterator().next());
         workerRegistry.unRegistry();
     }
 }

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/utils/ExecutionContextTestUtils.java
Patch:
@@ -47,7 +47,7 @@ public static ExecutionContext getExecutionContext(int port){
                 .buildProcessDefinitionRelatedInfo(processDefinition)
                 .create();
         ExecutionContext executionContext = new ExecutionContext(context.toCommand(), ExecutorType.WORKER);
-        executionContext.setHost(Host.of(NetUtils.getHost() + ":" + port));
+        executionContext.setHost(Host.of(NetUtils.getAddr(port)));
 
         return executionContext;
     }

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/worker/registry/WorkerRegistryTest.java
Patch:
@@ -113,7 +113,7 @@ public void testRegistry() {
 
         int i = 0;
         for (String workerGroup : workerConfig.getWorkerGroups()) {
-            String workerZkPath = workerPath + "/" + workerGroup.trim() + "/" + (NetUtils.getHost() + ":" + workerConfig.getListenPort());
+            String workerZkPath = workerPath + "/" + workerGroup.trim() + "/" + (NetUtils.getAddr(workerConfig.getListenPort()));
             String heartbeat = zookeeperRegistryCenter.getZookeeperCachedOperator().get(workerZkPath);
             if (0 == i) {
                 Assert.assertTrue(workerZkPath.startsWith("/dolphinscheduler/nodes/worker/test/"));

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/builder/TaskExecutionContextBuilder.java
Patch:
@@ -44,7 +44,6 @@ public TaskExecutionContextBuilder buildTaskInstanceRelatedInfo(TaskInstance tas
         taskExecutionContext.setStartTime(taskInstance.getStartTime());
         taskExecutionContext.setTaskType(taskInstance.getTaskType());
         taskExecutionContext.setLogPath(taskInstance.getLogPath());
-        taskExecutionContext.setExecutePath(taskInstance.getExecutePath());
         taskExecutionContext.setTaskJson(taskInstance.getTaskJson());
         taskExecutionContext.setWorkerGroup(taskInstance.getWorkerGroup());
         taskExecutionContext.setHost(taskInstance.getHost());

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/processor/TaskExecuteProcessor.java
Patch:
@@ -147,6 +147,7 @@ public void process(Channel channel, Command command) {
         // local execute path
         String execLocalPath = getExecLocalPath(taskExecutionContext);
         logger.info("task instance  local execute path : {} ", execLocalPath);
+        taskExecutionContext.setExecutePath(execLocalPath);
 
         FileUtils.taskLoggerThreadLocal.set(taskLogger);
         try {

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProjectServiceImpl.java
Patch:
@@ -100,7 +100,7 @@ public Map<String, Object> createProject(User loginUser, String name, String des
                 .updateTime(now)
                 .build();
         } catch (SnowFlakeException e) {
-            putMsg(result, Status.CREATE_PROCESS_DEFINITION);
+            putMsg(result, Status.CREATE_PROJECT_ERROR);
             return result;
         }
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/runner/TaskExecuteThread.java
Patch:
@@ -174,6 +174,7 @@ public void run() {
             responseCommand.setProcessId(task.getProcessId());
             responseCommand.setAppIds(task.getAppIds());
             responseCommand.setVarPool(task.getVarPool());
+            responseCommand.setResult(task.getResultString());
             logger.info("task instance id : {},task final status : {}", taskExecutionContext.getTaskInstanceId(), task.getExitStatus());
         } catch (Exception e) {
             logger.error("task scheduler failure", e);

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/ProcessInstanceMapper.java
Patch:
@@ -221,4 +221,7 @@ List<ProcessInstance> queryByProcessDefineIdAndStatus(
             @Param("processDefinitionId") int processDefinitionId,
             @Param("states") int[] states);
 
+    int updateGlobalParamById(
+            @Param("globalParams") String globalParams,
+            @Param("id")  int id);
 }

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/processor/TaskResponseProcessor.java
Patch:
@@ -80,7 +80,9 @@ public void process(Channel channel, Command command) {
                 responseCommand.getAppIds(),
                 responseCommand.getTaskInstanceId(),
                 responseCommand.getVarPool(),
-                channel);
+                channel,
+                responseCommand.getResult()
+                );
         taskResponseService.addResponse(taskResponseEvent);
     }
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/processor/queue/TaskResponseService.java
Patch:
@@ -165,7 +165,8 @@ private void persist(TaskResponseEvent taskResponseEvent) {
                             taskResponseEvent.getProcessId(),
                             taskResponseEvent.getAppIds(),
                             taskResponseEvent.getTaskInstanceId(),
-                            taskResponseEvent.getVarPool()
+                            taskResponseEvent.getVarPool(),
+                                taskResponseEvent.getResult()
                         );
                     }
                     // if taskInstance is null (maybe deleted) . retry will be meaningless . so response success

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/master/processor/queue/TaskResponseServiceTest.java
Patch:
@@ -70,7 +70,8 @@ public void before() {
             "ids",
             22,
             "varPol",
-            channel);
+            channel,
+                "[{\"id\":70000,\"database_name\":\"yuul\",\"status\":-1,\"create_time\":1601202829000,\"update_time\":1601202829000,\"table_name3\":\"\",\"table_name4\":\"\"}]");
 
         taskInstance = new TaskInstance();
         taskInstance.setId(22);

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/processor/TaskKillProcessor.java
Patch:
@@ -115,8 +115,8 @@ private Pair<Boolean, List<String>> doKill(TaskKillRequestCommand killCommand) {
                 return Pair.of(true, appIds);
             }
 
-            String cmd = String.format("sudo kill -9 %s", ProcessUtils.getPidsStr(taskExecutionContext.getProcessId()));
-
+            String cmd = String.format("kill -9 %s", ProcessUtils.getPidsStr(taskExecutionContext.getProcessId()));
+            cmd = OSUtils.getSudoCmd(taskExecutionContext.getTenantCode(), cmd);
             logger.info("process id:{}, cmd:{}", taskExecutionContext.getProcessId(), cmd);
 
             OSUtils.exeCmd(cmd);

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/utils/ProcessUtilsTest.java
Patch:
@@ -99,12 +99,13 @@ public void testKill() {
         try {
             when(OSUtils.exeCmd(String.format("%s -sp %d", Constants.PSTREE, 1))).thenReturn("1111");
             when(OSUtils.exeCmd(String.format("%s -p %d", Constants.PSTREE, 1))).thenReturn("1111");
-            when(OSUtils.exeCmd("sudo kill -9")).thenReturn("1111");
+            when(OSUtils.exeCmd("sudo -u tenantCode kill -9")).thenReturn("1111");
         } catch (Exception e) {
             e.printStackTrace();
         }
         taskExecutionContext.setHost("127.0.0.1:8888");
         taskExecutionContext.setLogPath("/log/1.log");
+        taskExecutionContext.setTenantCode("tenantCode");
         ProcessUtils.kill(taskExecutionContext);
         Assert.assertEquals(1, taskExecutionContext.getProcessId());
     }

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/Constants.java
Patch:
@@ -146,7 +146,7 @@ private Constants() {
      */
     public static final String RESOURCE_VIEW_SUFFIXS = "resource.view.suffixs";
 
-    public static final String RESOURCE_VIEW_SUFFIXS_DEFAULT_VALUE = "txt,log,sh,conf,cfg,py,java,sql,hql,xml,properties";
+    public static final String RESOURCE_VIEW_SUFFIXS_DEFAULT_VALUE = "txt,log,sh,bat,conf,cfg,py,java,sql,xml,hql,properties,json,yml,yaml,ini,js";
 
     /**
      * development.state

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/utils/FlinkArgsUtils.java
Patch:
@@ -64,9 +64,9 @@ public static List<String> buildArgs(FlinkParameters param) {
                 args.add(ArgsUtils.escape(appName));
             }
 
-            // judge flink version,from flink1.10,the parameter -yn removed
+            // judge flink version, the parameter -yn has removed from flink 1.10
             String flinkVersion = param.getFlinkVersion();
-            if (FLINK_VERSION_BEFORE_1_10.equals(flinkVersion)) {
+            if (flinkVersion == null || FLINK_VERSION_BEFORE_1_10.equals(flinkVersion)) {
                 int taskManager = param.getTaskManager();
                 if (taskManager != 0) {                        //-yn
                     args.add(Constants.FLINK_TASK_MANAGE);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProcessDefinitionVersionService.java
Patch:
@@ -31,7 +31,7 @@ public interface ProcessDefinitionVersionService {
      * @param processDefinition the process definition that need to record version
      * @return the newest version number of this process definition
      */
-    long addProcessDefinitionVersion(ProcessDefinition processDefinition);
+    int addProcessDefinitionVersion(ProcessDefinition processDefinition);
 
     /**
      * query the pagination versions info by one certain process definition id

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProcessInstanceService.java
Patch:
@@ -479,7 +479,7 @@ public Map<String, Object> updateProcessInstance(User loginUser, String projectN
             processDefinition.setUpdateTime(new Date());
 
             // add process definition version
-            long version = processDefinitionVersionService.addProcessDefinitionVersion(processDefinition);
+            int version = processDefinitionVersionService.addProcessDefinitionVersion(processDefinition);
             processDefinition.setVersion(version);
             updateDefine = processDefineMapper.updateById(processDefinition);
         }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProcessDefinitionVersionServiceImpl.java
Patch:
@@ -61,7 +61,7 @@ public class ProcessDefinitionVersionServiceImpl extends BaseService implements
      * @param processDefinition the process definition that need to record version
      * @return the newest version number of this process definition
      */
-    public long addProcessDefinitionVersion(ProcessDefinition processDefinition) {
+    public int addProcessDefinitionVersion(ProcessDefinition processDefinition) {
 
         long version = this.queryMaxVersionByProcessDefinitionId(processDefinition.getId()) + 1;
 
@@ -82,7 +82,7 @@ public long addProcessDefinitionVersion(ProcessDefinition processDefinition) {
 
         processDefinitionVersionMapper.insert(processDefinitionVersion);
 
-        return version;
+        return Integer.parseInt(String.valueOf(version));
     }
 
     /**

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProcessDefinitionServiceTest.java
Patch:
@@ -969,7 +969,7 @@ public void testUpdateProcessDefinition() {
         Mockito.when(projectMapper.queryByName(projectName)).thenReturn(getProject(projectName));
         Mockito.when(projectService.checkProjectAndAuth(loginUser, project, projectName)).thenReturn(result);
         Mockito.when(processService.findProcessDefineById(1)).thenReturn(processDefinition);
-        Mockito.when(processDefinitionVersionService.addProcessDefinitionVersion(processDefinition)).thenReturn(1L);
+        Mockito.when(processDefinitionVersionService.addProcessDefinitionVersion(processDefinition)).thenReturn(1);
 
         String sqlDependentJson = "{\n"
                 + "    \"globalParams\": [\n"

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProcessDefinitionVersionServiceTest.java
Patch:
@@ -68,7 +68,7 @@ public void testAddProcessDefinitionVersion() {
                 .queryMaxVersionByProcessDefinitionId(processDefinition.getId()))
                 .thenReturn(expectedVersion);
 
-        long version = processDefinitionVersionService.addProcessDefinitionVersion(processDefinition);
+        int version = processDefinitionVersionService.addProcessDefinitionVersion(processDefinition);
 
         Assert.assertEquals(expectedVersion + 1, version);
     }

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProcessInstanceServiceTest.java
Patch:
@@ -369,7 +369,7 @@ public void testUpdateProcessInstance() throws ParseException {
         when(processService.getTenantForProcess(Mockito.anyInt(), Mockito.anyInt())).thenReturn(tenant);
         when(processService.updateProcessInstance(processInstance)).thenReturn(1);
         when(processDefinitionService.checkProcessNodeList(Mockito.any(), eq(shellJson))).thenReturn(result);
-        when(processDefinitionVersionService.addProcessDefinitionVersion(processDefinition)).thenReturn(1L);
+        when(processDefinitionVersionService.addProcessDefinitionVersion(processDefinition)).thenReturn(1);
         Map<String, Object> processInstanceFinishRes = processInstanceService.updateProcessInstance(loginUser, projectName, 1,
                 shellJson, "2020-02-21 00:00:00", true, Flag.YES, "", "");
         Assert.assertEquals(Status.UPDATE_PROCESS_INSTANCE_ERROR, processInstanceFinishRes.get(Constants.STATUS));

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/ProcessDefinition.java
Patch:
@@ -61,7 +61,7 @@ public class ProcessDefinition {
     /**
      * version
      */
-    private long version;
+    private int version;
 
     /**
      * release state : online/offline
@@ -192,11 +192,11 @@ public void setName(String name) {
         this.name = name;
     }
 
-    public long getVersion() {
+    public int getVersion() {
         return version;
     }
 
-    public void setVersion(long version) {
+    public void setVersion(int version) {
         this.version = version;
     }
 

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/ProcessDefinitionMapperTest.java
Patch:
@@ -358,7 +358,7 @@ public void listResourcesByUserTest() {
 
     @Test
     public void testUpdateVersionByProcessDefinitionId() {
-        long expectedVersion = 10;
+        int expectedVersion = 10;
         ProcessDefinition processDefinition = insertOne();
         processDefinition.setVersion(expectedVersion);
         processDefinitionMapper.updateVersionByProcessDefinitionId(

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java
Patch:
@@ -133,7 +133,7 @@ public enum Status {
     QUERY_TASK_INSTANCE_LOG_ERROR(10103, "view task instance log error", "查询任务实例日志错误"),
     DOWNLOAD_TASK_INSTANCE_LOG_FILE_ERROR(10104, "download task instance log file error", "下载任务日志文件错误"),
     CREATE_PROCESS_DEFINITION(10105, "create process definition", "创建工作流错误"),
-    VERIFY_PROCESS_DEFINITION_NAME_UNIQUE_ERROR(10106, "verify process definition name unique error", "工作流定义名称已存在"),
+    VERIFY_PROCESS_DEFINITION_NAME_UNIQUE_ERROR(10106, "verify process definition name unique error", "工作流定义名称验证错误"),
     UPDATE_PROCESS_DEFINITION_ERROR(10107, "update process definition error", "更新工作流定义错误"),
     RELEASE_PROCESS_DEFINITION_ERROR(10108, "release process definition error", "上线工作流错误"),
     QUERY_DATAIL_OF_PROCESS_DEFINITION_ERROR(10109, "query datail of process definition error", "查询工作流详细信息错误"),
@@ -199,6 +199,7 @@ public enum Status {
     FORCE_TASK_SUCCESS_ERROR(10165, "force task success error", "强制成功任务实例错误"),
     TASK_INSTANCE_STATE_OPERATION_ERROR(10166, "the status of task instance {0} is {1},Cannot perform force success operation", "任务实例[{0}]的状态是[{1}]，无法执行强制成功操作"),
     DATASOURCE_TYPE_NOT_EXIST(10167, "data source type not exist", "数据源类型不存在"),
+    PROCESS_DEFINITION_NAME_EXIST(10168, "process definition name {0} already exists", "工作流定义名称[{0}]已存在"),
 
     UDF_FUNCTION_NOT_EXIST(20001, "UDF function not found", "UDF函数不存在"),
     UDF_FUNCTION_EXISTS(20002, "UDF function already exists", "UDF函数已存在"),

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProcessDefinitionServiceImpl.java
Patch:
@@ -429,7 +429,7 @@ public Map<String, Object> updateProcessDefinition(User loginUser,
             // check whether the new process define name exist
             ProcessDefinition definition = processDefineMapper.verifyByDefineName(project.getId(), name);
             if (definition != null) {
-                putMsg(result, Status.VERIFY_PROCESS_DEFINITION_NAME_UNIQUE_ERROR, name);
+                putMsg(result, Status.PROCESS_DEFINITION_NAME_EXIST, name);
                 return result;
             }
         }
@@ -497,7 +497,7 @@ public Map<String, Object> verifyProcessDefinitionName(User loginUser, String pr
         if (processDefinition == null) {
             putMsg(result, Status.SUCCESS);
         } else {
-            putMsg(result, Status.VERIFY_PROCESS_DEFINITION_NAME_UNIQUE_ERROR, name);
+            putMsg(result, Status.PROCESS_DEFINITION_NAME_EXIST, name);
         }
         return result;
     }

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/ProcessDefinitionControllerTest.java
Patch:
@@ -117,14 +117,14 @@ private void putMsg(Map<String, Object> result, Status status, Object... statusP
     public void testVerifyProcessDefinitionName() throws Exception {
 
         Map<String, Object> result = new HashMap<>();
-        putMsg(result, Status.VERIFY_PROCESS_DEFINITION_NAME_UNIQUE_ERROR);
+        putMsg(result, Status.PROCESS_DEFINITION_NAME_EXIST);
         String projectName = "test";
         String name = "dag_test";
 
         Mockito.when(processDefinitionService.verifyProcessDefinitionName(user, projectName, name)).thenReturn(result);
 
         Result response = processDefinitionController.verifyProcessDefinitionName(user, projectName, name);
-        Assert.assertEquals(Status.VERIFY_PROCESS_DEFINITION_NAME_UNIQUE_ERROR.getCode(), response.getCode().intValue());
+        Assert.assertEquals(Status.PROCESS_DEFINITION_NAME_EXIST.getCode(), response.getCode().intValue());
 
     }
 

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProcessDefinitionServiceTest.java
Patch:
@@ -657,7 +657,7 @@ public void testVerifyProcessDefinitionName() {
         Mockito.when(processDefineMapper.verifyByDefineName(project.getId(), "test_pdf")).thenReturn(getProcessDefinition());
         Map<String, Object> processExistRes = processDefinitionService.verifyProcessDefinitionName(loginUser,
                 "project_test1", "test_pdf");
-        Assert.assertEquals(Status.VERIFY_PROCESS_DEFINITION_NAME_UNIQUE_ERROR, processExistRes.get(Constants.STATUS));
+        Assert.assertEquals(Status.PROCESS_DEFINITION_NAME_EXIST, processExistRes.get(Constants.STATUS));
     }
 
     @Test

File: dolphinscheduler-alert-plugin/dolphinscheduler-alert-email/src/test/java/org/apache/dolphinscheduler/plugin/alert/email/MailUtilsTest.java
Patch:
@@ -53,6 +53,7 @@ public static void initEmailConfig() {
         emailConfig.put(MailParamsConstants.NAME_MAIL_SENDER, "xxx1.xxx.com");
         emailConfig.put(MailParamsConstants.NAME_MAIL_USER, "xxx2.xxx.com");
         emailConfig.put(MailParamsConstants.NAME_MAIL_PASSWD, "111111");
+        emailConfig.put(MailParamsConstants.NAME_MAIL_SMTP_AUTH, "true");
         emailConfig.put(MailParamsConstants.NAME_MAIL_SMTP_STARTTLS_ENABLE, "true");
         emailConfig.put(MailParamsConstants.NAME_MAIL_SMTP_SSL_ENABLE, "false");
         emailConfig.put(MailParamsConstants.NAME_MAIL_SMTP_SSL_TRUST, "false");

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProcessDefinitionServiceImpl.java
Patch:
@@ -433,7 +433,9 @@ public Map<String, Object> updateProcessDefinition(User loginUser,
                 return result;
             }
         }
-
+        // get the processdefinitionjson before saving,and then save the name and taskid
+        String oldJson = processDefine.getProcessDefinitionJson();
+        processDefinitionJson = processService.changeJson(processData,oldJson);
         Date now = new Date();
 
         processDefine.setId(id);

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/TaskKillResponseCommand.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.List;
 
 /**
- *  kill task response command
+ * kill task response command
  */
 public class TaskKillResponseCommand implements Serializable {
 
@@ -51,7 +51,7 @@ public class TaskKillResponseCommand implements Serializable {
     /**
      * other resource manager appId , for example : YARN etc
      */
-    protected List<String> appIds;
+    private List<String> appIds;
 
     public int getTaskInstanceId() {
         return taskInstanceId;
@@ -94,7 +94,7 @@ public void setAppIds(List<String> appIds) {
     }
 
     /**
-     *  package request command
+     * package request command
      *
      * @return command
      */

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/utils/Pair.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.dolphinscheduler.remote.utils;
 
-
 /**
  * key value pair
  *
@@ -51,7 +50,7 @@ public void setRight(R right) {
         this.right = right;
     }
 
-    public static <L, R> Pair of(L left, R right){
-        return new Pair(left, right);
+    public static <L, R> Pair<L, R> of(L left, R right) {
+        return new Pair<>(left, right);
     }
 }

File: dolphinscheduler-alert-plugin/dolphinscheduler-alert-dingtalk/src/test/java/org/apache/dolphinscheduler/plugin/alert/dingtalk/DingTalkSenderTest.java
Patch:
@@ -50,7 +50,7 @@ public void testSend() {
         dingTalkSender.sendDingTalkMsg("keyWord+Welcome", "UTF-8");
         dingTalkConfig.put(DingTalkParamsConstants.NAME_DING_TALK_PROXY_ENABLE, "true");
         dingTalkSender = new DingTalkSender(dingTalkConfig);
-        AlertResult alertResult = dingTalkSender.sendDingTalkMsg("keyWord+Welcome", "UTF-8");
+        AlertResult alertResult = dingTalkSender.sendDingTalkMsg("title", "content test");
         Assert.assertEquals("false",alertResult.getStatus());
     }
 

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/bean/SpringApplicationContext.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.service.bean;
 
 import org.springframework.beans.BeansException;
@@ -31,9 +32,7 @@ public void setApplicationContext(ApplicationContext applicationContext) throws
         SpringApplicationContext.applicationContext = applicationContext;
     }
 
-    public static <T> T getBean(Class<T> requiredType){
+    public static <T> T getBean(Class<T> requiredType) {
         return applicationContext.getBean(requiredType);
     }
-
-
 }

File: dolphinscheduler-alert/src/test/java/org/apache/dolphinscheduler/alert/runner/AlertSenderTest.java
Patch:
@@ -102,6 +102,7 @@ public void testSyncHandler() {
         Map<String, AlertChannel> alertChannelMap = new ConcurrentHashMap<>();
         alertChannelMap.put(pluginName,alertChannelMock);
         PowerMockito.when(alertPluginManager.getAlertChannelMap()).thenReturn(alertChannelMap);
+        PowerMockito.when(alertPluginManager.getPluginNameById(Mockito.anyInt())).thenReturn("alert-plugin-mail");
 
         alertSendResponseCommand = alertSender.syncHandler(alertGroupId, title, content);
         Assert.assertFalse(alertSendResponseCommand.getResStatus());
@@ -164,6 +165,7 @@ public void testRun() {
         String pluginName = "alert-plugin-mail";
         PluginDefine pluginDefine = new PluginDefine(pluginName,"1",null);
         PowerMockito.when(pluginDao.getPluginDefineById(pluginDefineId)).thenReturn(pluginDefine);
+        PowerMockito.when(alertPluginManager.getPluginNameById(1)).thenReturn("alert-instance-mail");
 
         AlertResult alertResult = new AlertResult();
         alertResult.setStatus(String.valueOf(true));

File: dolphinscheduler-alert/src/main/java/org/apache/dolphinscheduler/alert/runner/AlertSender.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.dolphinscheduler.alert.runner;
 
-import org.apache.dolphinscheduler.alert.cache.AlertPluginDefineCache;
 import org.apache.dolphinscheduler.alert.plugin.AlertPluginManager;
 import org.apache.dolphinscheduler.common.enums.AlertStatus;
 import org.apache.dolphinscheduler.common.utils.CollectionUtils;
@@ -146,7 +145,7 @@ public AlertSendResponseCommand syncHandler(int alertGroupId, String title, Stri
      * @return AlertResult
      */
     private AlertResult alertResultHandler(AlertPluginInstance instance, AlertData alertData) {
-        String pluginName = AlertPluginDefineCache.getNameById(instance.getPluginDefineId());
+        String pluginName = alertPluginManager.getPluginNameById(instance.getPluginDefineId());
         AlertChannel alertChannel = alertPluginManager.getAlertChannelMap().get(pluginName);
         AlertResult alertResultExtend = new AlertResult();
         String pluginInstanceName = instance.getInstanceName();

File: dolphinscheduler-alert/src/test/java/org/apache/dolphinscheduler/alert/AlertServerTest.java
Patch:
@@ -34,6 +34,7 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.mockito.Mockito;
 import org.powermock.api.mockito.PowerMockito;
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.PowerMockRunner;
@@ -62,6 +63,7 @@ public void testMain() throws Exception {
         PowerMockito.whenNew(AlertPluginManager.class).withNoArguments().thenReturn(alertPluginManager);
         ConcurrentHashMap alertChannelMap = new ConcurrentHashMap<>();
         alertChannelMap.put("pluginName",alertChannelMock);
+        PowerMockito.when(alertPluginManager.getPluginNameById(Mockito.anyInt())).thenReturn("pluginName");
         PowerMockito.when(alertPluginManager.getAlertChannelMap()).thenReturn(alertChannelMap);
 
         DolphinPluginManagerConfig alertPluginManagerConfig = PowerMockito.mock(DolphinPluginManagerConfig.class);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java
Patch:
@@ -290,6 +290,7 @@ public enum Status {
     QUERY_ALL_ALERT_PLUGIN_INSTANCE_ERROR(110009, "query all alert plugin instance error", "查询所有告警实例失败"),
     PLUGIN_INSTANCE_ALREADY_EXIT(110010,"plugin instance already exit","该告警插件实例已存在"),
     LIST_PAGING_ALERT_PLUGIN_INSTANCE_ERROR(110011,"query plugin instance page error","分页查询告警实例失败"),
+    DELETE_ALERT_PLUGIN_INSTANCE_ERROR_HAS_ALERT_GROUP_ASSOCIATED(110012,"failed to delete the alert instance, there is an alarm group associated with this alert instance","删除告警实例失败，存在与此告警实例关联的警报组")
 
     ;
 

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/AlertPluginInstance.java
Patch:
@@ -19,6 +19,7 @@
 
 import java.util.Date;
 
+import com.baomidou.mybatisplus.annotation.FieldStrategy;
 import com.baomidou.mybatisplus.annotation.IdType;
 import com.baomidou.mybatisplus.annotation.TableField;
 import com.baomidou.mybatisplus.annotation.TableId;
@@ -39,7 +40,7 @@ public class AlertPluginInstance {
     /**
      * plugin_define_id
      */
-    @TableField("plugin_define_id")
+    @TableField(value = "plugin_define_id", updateStrategy = FieldStrategy.NEVER)
     private int pluginDefineId;
 
     /**

File: dolphinscheduler-alert/src/main/java/org/apache/dolphinscheduler/alert/runner/AlertSender.java
Patch:
@@ -107,8 +107,8 @@ public AlertSendResponseCommand syncHandler(int alertGroupId, String title, Stri
 
         List<AlertPluginInstance> alertInstanceList = alertDao.listInstanceByAlertGroupId(alertGroupId);
         AlertData alertData = new AlertData();
-        alertData.setContent(title)
-                .setTitle(content);
+        alertData.setContent(content)
+            .setTitle(title);
 
         boolean sendResponseStatus = true;
         List<AlertSendResponseResult> sendResponseResults = new ArrayList<>();

File: dolphinscheduler-alert/src/main/java/org/apache/dolphinscheduler/alert/runner/AlertSender.java
Patch:
@@ -106,8 +106,8 @@ public AlertSendResponseCommand syncHandler(int alertGroupId, String title, Stri
 
         List<AlertPluginInstance> alertInstanceList = alertDao.listInstanceByAlertGroupId(alertGroupId);
         AlertData alertData = new AlertData();
-        alertData.setContent(title)
-            .setTitle(content);
+        alertData.setContent(content)
+            .setTitle(title);
 
         boolean sendResponseStatus = true;
         List<AlertSendResponseResult> sendResponseResults = new ArrayList<>();

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java
Patch:
@@ -290,6 +290,7 @@ public enum Status {
     QUERY_ALL_ALERT_PLUGIN_INSTANCE_ERROR(110009, "query all alert plugin instance error", "查询所有告警实例失败"),
     PLUGIN_INSTANCE_ALREADY_EXIT(110010,"plugin instance already exit","该告警插件实例已存在"),
     LIST_PAGING_ALERT_PLUGIN_INSTANCE_ERROR(110011,"query plugin instance page error","分页查询告警实例失败"),
+    DELETE_ALERT_PLUGIN_INSTANCE_ERROR_HAS_ALERT_GROUP_ASSOCIATED(110012,"failed to delete the alert instance, there is an alarm group associated with this alert instance","删除告警实例失败，存在与此告警实例关联的警报组")
 
     ;
 

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/AlertPluginInstance.java
Patch:
@@ -19,6 +19,7 @@
 
 import java.util.Date;
 
+import com.baomidou.mybatisplus.annotation.FieldStrategy;
 import com.baomidou.mybatisplus.annotation.IdType;
 import com.baomidou.mybatisplus.annotation.TableField;
 import com.baomidou.mybatisplus.annotation.TableId;
@@ -39,7 +40,7 @@ public class AlertPluginInstance {
     /**
      * plugin_define_id
      */
-    @TableField("plugin_define_id")
+    @TableField(value = "plugin_define_id", updateStrategy = FieldStrategy.NEVER)
     private int pluginDefineId;
 
     /**

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/rpc/common/RpcRequest.java
Patch:
@@ -30,7 +30,7 @@ public class RpcRequest {
     /**
      * @see RequestEventType
      */
-    private Byte eventType = 1;
+    private Byte eventType = RequestEventType.BUSINESS.getType();
 
     private Boolean ack;
 

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/rpc/client/ConsumerInterceptor.java
Patch:
@@ -75,11 +75,8 @@ private RpcRequest buildReq(Object[] args, Method method) {
         request.setClassName(method.getDeclaringClass().getSimpleName());
         request.setMethodName(method.getName());
         request.setParameterTypes(method.getParameterTypes());
-
         request.setParameters(args);
 
-        String serviceName = method.getDeclaringClass().getName();
-
         return request;
     }
 

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/rpc/remote/NettyClient.java
Patch:
@@ -199,21 +199,22 @@ public RpcResponse sendMsg(Host host, RpcRequest request, Boolean async) {
         String serviceName = request.getClassName() + request.getMethodName();
         rpcRequestCache.setServiceName(serviceName);
         RpcFuture future = null;
-        if (!async) {
+        if (Boolean.FALSE.equals(async)) {
             future = new RpcFuture(request);
             rpcRequestCache.setRpcFuture(future);
         }
         RpcRequestTable.put(request.getRequestId(), rpcRequestCache);
         channel.writeAndFlush(request);
 
         RpcResponse result = null;
-        if (async) {
+        if (Boolean.TRUE.equals(async)) {
             result = new RpcResponse();
             result.setStatus((byte) 0);
             result.setResult(true);
             return result;
         }
         try {
+            assert future != null;
             result = future.get();
         } catch (InterruptedException | ExecutionException e) {
             logger.error("send msg error，service name is {}", serviceName, e);

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/rpc/client/IRpcClient.java
Patch:
@@ -24,7 +24,6 @@
  */
 public interface IRpcClient {
 
-
     <T> T create(Class<T> clazz, Host host) throws Exception;
 
 }

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/rpc/config/ServiceBean.java
Patch:
@@ -25,7 +25,6 @@
 import java.util.Map;
 import java.util.concurrent.atomic.AtomicBoolean;
 
-
 import org.reflections.Reflections;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/rpc/remote/NettyServer.java
Patch:
@@ -18,10 +18,10 @@
 package org.apache.dolphinscheduler.rpc.remote;
 
 import org.apache.dolphinscheduler.remote.config.NettyServerConfig;
-import org.apache.dolphinscheduler.rpc.codec.NettyDecoder;
-import org.apache.dolphinscheduler.rpc.codec.NettyEncoder;
 import org.apache.dolphinscheduler.remote.utils.Constants;
 import org.apache.dolphinscheduler.remote.utils.NettyUtils;
+import org.apache.dolphinscheduler.rpc.codec.NettyDecoder;
+import org.apache.dolphinscheduler.rpc.codec.NettyEncoder;
 import org.apache.dolphinscheduler.rpc.common.RpcRequest;
 import org.apache.dolphinscheduler.rpc.common.RpcResponse;
 

File: dolphinscheduler-remote/src/test/java/org/apache/dolphinscheduler/rpc/UserService.java
Patch:
@@ -23,7 +23,7 @@
  * UserService
  */
 @RpcService("IUserService")
-public class UserService  implements IUserService{
+public class UserService implements IUserService {
 
     @Override
     public Boolean say(String s) {

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/serialize/ProtoStuffUtils.java
Patch:
@@ -62,6 +62,9 @@ private static <T> Schema<T> getSchema(Class<T> clazz) {
     public static <T> T deserialize(byte[] bytes, Class<T> clazz) {
         Schema<T> schema = getSchema(clazz);
         T obj = schema.newMessage();
+        if(null==obj){
+            return null;
+        }
         ProtostuffIOUtil.mergeFrom(bytes, obj, schema);
         return obj;
     }

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/rpc/future/RpcFuture.java
Patch:
@@ -51,7 +51,7 @@ public boolean isDone() {
 
     @Override
     public RpcResponse get() throws InterruptedException, ExecutionException {
-        latch.await(-1, TimeUnit.SECONDS);
+        latch.await(5, TimeUnit.SECONDS);
         return response;
     }
 

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/serialize/ProtoStuffUtils.java
Patch:
@@ -52,7 +52,7 @@ private static <T> Schema<T> getSchema(Class<T> clazz) {
         Schema<T> schema = (Schema<T>) schemaCache.get(clazz);
         if (schema == null) {
             schema = RuntimeSchema.getSchema(clazz);
-            if (schema == null) {
+            if (schema != null) {
                 schemaCache.put(clazz, schema);
             }
         }

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/rpc/base/Rpc.java
Patch:
@@ -40,6 +40,8 @@
 
     boolean ack() default false;
 
+    //todo It is better to set the timeout period for synchronous calls
+
     /**
      * When it is asynchronous transmission, callback must be set
      */

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/rpc/codec/NettyDecoder.java
Patch:
@@ -50,10 +50,8 @@ protected void decode(ChannelHandlerContext channelHandlerContext, ByteBuf byteB
         if (byteBuf.readableBytes() < dataLength) {
             byteBuf.resetReaderIndex();
         }
-        //将ByteBuf转换为byte[]
         byte[] data = new byte[dataLength];
         byteBuf.readBytes(data);
-        //将data转换成object
         Object obj = ProtoStuffUtils.deserialize(data, genericClass);
         list.add(obj);
     }

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/rpc/future/RpcFuture.java
Patch:
@@ -51,17 +51,17 @@ public boolean isDone() {
 
     @Override
     public RpcResponse get() throws InterruptedException, ExecutionException {
-        boolean b = latch.await(5,TimeUnit.SECONDS);
+        latch.await(-1, TimeUnit.SECONDS);
         return response;
     }
 
     @Override
     public RpcResponse get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {
-        boolean b = latch.await(timeout,unit);
+        latch.await(timeout, unit);
         return response;
     }
 
-    public void done(RpcResponse response){
+    public void done(RpcResponse response) {
         this.response = response;
         latch.countDown();
     }

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/rpc/remote/NettyClient.java
Patch:
@@ -217,6 +217,7 @@ public RpcResponse sendMsg(Host host, RpcRequest request, Boolean async) {
             result = future.get();
         } catch (InterruptedException | ExecutionException e) {
             logger.error("send msg error，service name is {}", serviceName, e);
+            Thread.currentThread().interrupt();
         }
         return result;
     }

File: dolphinscheduler-alert-plugin/dolphinscheduler-alert-dingtalk/src/main/java/org/apache/dolphinscheduler/plugin/alert/dingtalk/DingTalkParamsConstants.java
Patch:
@@ -22,7 +22,7 @@
  */
 public class DingTalkParamsConstants {
 
-    public DingTalkParamsConstants() {
+    private DingTalkParamsConstants() {
         throw new IllegalStateException("Utility class");
     }
 

File: dolphinscheduler-alert-plugin/dolphinscheduler-alert-dingtalk/src/main/java/org/apache/dolphinscheduler/plugin/alert/dingtalk/DingTalkSender.java
Patch:
@@ -113,7 +113,7 @@ private String sendMsg(String msg, String charset) throws IOException {
             } finally {
                 response.close();
             }
-            logger.info("Ding Talk send [ %s ], resp:{%s}", msg, resp);
+            logger.info("Ding Talk send {}, resp: {}", msg, resp);
             return resp;
         } finally {
             httpClient.close();

File: dolphinscheduler-alert-plugin/dolphinscheduler-alert-email/src/main/java/org/apache/dolphinscheduler/plugin/alert/email/MailParamsConstants.java
Patch:
@@ -22,7 +22,7 @@
  */
 public class MailParamsConstants {
 
-    public MailParamsConstants() {
+    private MailParamsConstants() {
         throw new IllegalStateException("Utility class");
     }
 

File: dolphinscheduler-alert-plugin/dolphinscheduler-alert-script/src/main/java/org/apache/dolphinscheduler/plugin/alert/script/OSUtils.java
Patch:
@@ -22,7 +22,7 @@
  */
 public class OSUtils {
 
-    public OSUtils() {
+    private OSUtils() {
         throw new UnsupportedOperationException("Construct OSUtils");
     }
 

File: dolphinscheduler-alert-plugin/dolphinscheduler-alert-script/src/main/java/org/apache/dolphinscheduler/plugin/alert/script/ScriptParamsConstants.java
Patch:
@@ -22,7 +22,7 @@
  */
 public class ScriptParamsConstants {
 
-    public ScriptParamsConstants() {
+    private ScriptParamsConstants() {
         throw new IllegalStateException("Utility class");
     }
 

File: dolphinscheduler-alert-plugin/dolphinscheduler-alert-script/src/main/java/org/apache/dolphinscheduler/plugin/alert/script/StreamGobbler.java
Patch:
@@ -51,11 +51,11 @@ public void run() {
                 output.append(System.getProperty("line.separator"));
             }
             if (output.length() > 0) {
-                logger.info("out put msg is{}",output.toString());
+                logger.info("out put msg is{}", output);
             }
         } catch (IOException e) {
             logger.error("I/O error occurs {}", e.getMessage());
         }
     }
 
-}  
\ No newline at end of file
+}

File: dolphinscheduler-alert-plugin/dolphinscheduler-alert-wechat/src/main/java/org/apache/dolphinscheduler/plugin/alert/wechat/WeChatAlertParamsConstants.java
Patch:
@@ -22,6 +22,9 @@
  */
 public class WeChatAlertParamsConstants {
 
+    private WeChatAlertParamsConstants() {
+        throw new IllegalStateException(WeChatAlertParamsConstants.class.getName());
+    }
 
     static final String ENTERPRISE_WE_CHAT_CORP_ID = "corp.id";
 

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/CollectionUtils.java
Patch:
@@ -263,13 +263,13 @@ public static <T extends Object> List<Map<String, Object>> getListByExclusion(Li
         }
         Map<String, Object> instanceMap;
         for (T instance : originList) {
-            Map<String, Object> dataMap = new BeanMap(instance);
+            BeanMap beanMap = new BeanMap(instance);
             instanceMap = new LinkedHashMap<>(16, 0.75f, true);
-            for (Map.Entry<String, Object> entry : dataMap.entrySet()) {
+            for (Map.Entry<Object, Object> entry : beanMap.entrySet()) {
                 if (exclusionSet.contains(entry.getKey())) {
                     continue;
                 }
-                instanceMap.put(entry.getKey(), entry.getValue());
+                instanceMap.put((String) entry.getKey(), entry.getValue());
             }
             instanceList.add(instanceMap);
         }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProcessDefinitionService.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.dolphinscheduler.api.service;
 
+import org.apache.dolphinscheduler.common.enums.ReleaseState;
 import org.apache.dolphinscheduler.dao.entity.ProcessData;
 import org.apache.dolphinscheduler.dao.entity.User;
 
@@ -190,7 +191,7 @@ Map<String, Object> deleteProcessDefinitionById(User loginUser,
     Map<String, Object> releaseProcessDefinition(User loginUser,
                                                  String projectName,
                                                  int id,
-                                                 int releaseState);
+                                                 ReleaseState releaseState);
 
     /**
      * batch export process definition by ids

File: dolphinscheduler-alert-plugin/dolphinscheduler-alert-dingtalk/src/main/java/org/apache/dolphinscheduler/plugin/alert/dingtalk/DingTalkParamsConstants.java
Patch:
@@ -22,6 +22,9 @@
  */
 public class DingTalkParamsConstants {
 
+    public DingTalkParamsConstants() {
+        throw new IllegalStateException("Utility class");
+    }
 
     static final String DING_TALK_WEB_HOOK = "dingtalk.webhook";
 

File: dolphinscheduler-alert-plugin/dolphinscheduler-alert-dingtalk/src/main/java/org/apache/dolphinscheduler/plugin/alert/dingtalk/DingTalkSender.java
Patch:
@@ -113,7 +113,7 @@ private String sendMsg(String msg, String charset) throws IOException {
             } finally {
                 response.close();
             }
-            logger.info("Ding Talk send [%s], resp:{%s}", msg, resp);
+            logger.info("Ding Talk send [ %s ], resp:{%s}", msg, resp);
             return resp;
         } finally {
             httpClient.close();

File: dolphinscheduler-alert-plugin/dolphinscheduler-alert-email/src/main/java/org/apache/dolphinscheduler/plugin/alert/email/EmailAlertChannelFactory.java
Patch:
@@ -38,7 +38,7 @@
 public class EmailAlertChannelFactory implements AlertChannelFactory {
     @Override
     public String getName() {
-        return "email alert";
+        return "Email";
     }
 
     @Override

File: dolphinscheduler-alert-plugin/dolphinscheduler-alert-email/src/test/java/org/apache/dolphinscheduler/plugin/alert/email/EmailAlertChannelFactoryTest.java
Patch:
@@ -58,7 +58,7 @@ public void testGetName() throws Exception {
     public void testGetParams() throws Exception {
         EmailAlertChannelFactory emailAlertChannelFactory = new EmailAlertChannelFactory();
         List<PluginParams> params = emailAlertChannelFactory.getParams();
-        JSONUtils.toJsonString(params);
+        System.out.println(JSONUtils.toJsonString(params));
         Assert.assertEquals(12, params.size());
     }
 

File: dolphinscheduler-alert-plugin/dolphinscheduler-alert-http/src/main/java/org/apache/dolphinscheduler/plugin/alert/http/HttpAlertChannelFactory.java
Patch:
@@ -32,7 +32,7 @@
 public class HttpAlertChannelFactory implements AlertChannelFactory {
     @Override
     public String getName() {
-        return "http alert";
+        return "Http";
     }
 
     @Override

File: dolphinscheduler-alert-plugin/dolphinscheduler-alert-script/src/main/java/org/apache/dolphinscheduler/plugin/alert/script/ScriptAlertChannelFactory.java
Patch:
@@ -35,7 +35,7 @@ public class ScriptAlertChannelFactory implements AlertChannelFactory {
 
     @Override
     public String getName() {
-        return "script alert";
+        return "Script";
     }
 
     @Override

File: dolphinscheduler-alert-plugin/dolphinscheduler-alert-wechat/src/main/java/org/apache/dolphinscheduler/plugin/alert/wechat/WeChatAlertChannelFactory.java
Patch:
@@ -37,7 +37,7 @@ public class WeChatAlertChannelFactory implements AlertChannelFactory {
 
     @Override
     public String getName() {
-        return "we chat alert";
+        return "WeChat";
     }
 
     @Override

File: dolphinscheduler-alert/src/test/java/org/apache/dolphinscheduler/alert/plugin/EmailAlertPluginTest.java
Patch:
@@ -124,7 +124,6 @@ public void testRunSend() throws Exception {
 
         //create email alert plugin instance
         AlertPluginInstance alertPluginInstance = new AlertPluginInstance();
-        alertPluginInstance.setAlertGroupId(alertGroup.getId());
         alertPluginInstance.setCreateTime(new Date());
         alertPluginInstance.setInstanceName("test email alert");
 

File: dolphinscheduler-alert/src/test/java/org/apache/dolphinscheduler/alert/runner/AlertSenderTest.java
Patch:
@@ -83,7 +83,7 @@ public void testSyncHandler() {
         String pluginInstanceName = "alert-instance-mail";
         List<AlertPluginInstance> alertInstanceList = new ArrayList<>();
         AlertPluginInstance alertPluginInstance = new AlertPluginInstance(
-                pluginDefineId,pluginInstanceParams,alertGroupId,pluginInstanceName);
+                pluginDefineId,pluginInstanceParams,pluginInstanceName);
         alertInstanceList.add(alertPluginInstance);
         PowerMockito.when(alertDao.listInstanceByAlertGroupId(1)).thenReturn(alertInstanceList);
 
@@ -157,7 +157,7 @@ public void testRun() {
         String pluginInstanceName = "alert-instance-mail";
         List<AlertPluginInstance> alertInstanceList = new ArrayList<>();
         AlertPluginInstance alertPluginInstance = new AlertPluginInstance(
-                pluginDefineId,pluginInstanceParams,alertGroupId,pluginInstanceName);
+                pluginDefineId,pluginInstanceParams,pluginInstanceName);
         alertInstanceList.add(alertPluginInstance);
         PowerMockito.when(alertDao.listInstanceByAlertGroupId(alertGroupId)).thenReturn(alertInstanceList);
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/TenantController.java
Patch:
@@ -22,7 +22,7 @@
 import static org.apache.dolphinscheduler.api.enums.Status.QUERY_TENANT_LIST_ERROR;
 import static org.apache.dolphinscheduler.api.enums.Status.QUERY_TENANT_LIST_PAGING_ERROR;
 import static org.apache.dolphinscheduler.api.enums.Status.UPDATE_TENANT_ERROR;
-import static org.apache.dolphinscheduler.api.enums.Status.VERIFY_TENANT_CODE_ERROR;
+import static org.apache.dolphinscheduler.api.enums.Status.VERIFY_OS_TENANT_CODE_ERROR;
 
 import org.apache.dolphinscheduler.api.enums.Status;
 import org.apache.dolphinscheduler.api.exceptions.ApiException;
@@ -220,7 +220,7 @@ public Result deleteTenantById(@ApiIgnore @RequestAttribute(value = Constants.SE
     })
     @GetMapping(value = "/verify-tenant-code")
     @ResponseStatus(HttpStatus.OK)
-    @ApiException(VERIFY_TENANT_CODE_ERROR)
+    @ApiException(VERIFY_OS_TENANT_CODE_ERROR)
     public Result verifyTenantCode(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,
                                    @RequestParam(value = "tenantCode") String tenantCode) {
         logger.info("login user {}, verfiy tenant code: {}",

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/UiPluginController.java
Patch:
@@ -80,7 +80,7 @@ public Result queryUiPluginsByType(@ApiIgnore @RequestAttribute(value = Constant
     @ApiImplicitParams({
         @ApiImplicitParam(name = "id", value = "id", required = true, dataType = "PluginType"),
     })
-    @PostMapping(value = "/queryUiPluginsByID")
+    @PostMapping(value = "/queryUiPluginDetailById")
     @ResponseStatus(HttpStatus.CREATED)
     @ApiException(QUERY_PLUGINS_ERROR)
     public Result queryUiPluginDetailById(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/ExecuteType.java
Patch:
@@ -30,7 +30,7 @@ public enum ExecuteType {
      * 4 stop
      * 5 pause
      */
-    NONE,REPEAT_RUNNING, RECOVER_SUSPENDED_PROCESS, START_FAILURE_TASK_PROCESS, STOP, PAUSE;
+    NONE, REPEAT_RUNNING, RECOVER_SUSPENDED_PROCESS, START_FAILURE_TASK_PROCESS, STOP, PAUSE;
 
 
     public static ExecuteType getEnum(int value){

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/BaseService.java
Patch:
@@ -46,13 +46,13 @@ protected boolean isAdmin(User user) {
     }
 
     /**
-     * check admin
+     * isNotAdmin
      *
      * @param loginUser login user
      * @param result result code
-     * @return true if administrator, otherwise false
+     * @return true if not administrator, otherwise false
      */
-    protected boolean checkAdmin(User loginUser, Map<String, Object> result) {
+    protected boolean isNotAdmin(User loginUser, Map<String, Object> result) {
         //only admin can operate
         if (!isAdmin(loginUser)) {
             putMsg(result, Status.USER_NO_OPERATION_PERM);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProcessInstanceService.java
Patch:
@@ -66,11 +66,13 @@
 import java.nio.charset.StandardCharsets;
 import java.text.ParseException;
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.Date;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.Objects;
+import java.util.Optional;
 import java.util.stream.Collectors;
 
 import org.slf4j.Logger;
@@ -448,7 +450,7 @@ public Map<String, Object> updateProcessInstance(User loginUser, String projectN
 
             originDefParams = JSONUtils.toJsonString(processData.getGlobalParams());
             List<Property> globalParamList = processData.getGlobalParams();
-            Map<String, String> globalParamMap = globalParamList.stream().collect(Collectors.toMap(Property::getProp, Property::getValue));
+            Map<String, String> globalParamMap = Optional.ofNullable(globalParamList).orElse(Collections.emptyList()).stream().collect(Collectors.toMap(Property::getProp, Property::getValue));
             globalParams = ParameterUtils.curingGlobalParams(globalParamMap, globalParamList,
                     processInstance.getCmdTypeIfComplement(), schedule);
             timeout = processData.getTimeout();

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/WorkerGroupService.java
Patch:
@@ -70,7 +70,7 @@ public Map<String, Object> queryAllGroupPaging(User loginUser, Integer pageNo, I
         Integer toIndex = (pageNo - 1) * pageSize + pageSize;
 
         Map<String, Object> result = new HashMap<>();
-        if (checkAdmin(loginUser, result)) {
+        if (isNotAdmin(loginUser, result)) {
             return result;
         }
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProjectServiceImpl.java
Patch:
@@ -293,7 +293,7 @@ public Map<String, Object> update(User loginUser, Integer projectId, String proj
      */
     public Map<String, Object> queryUnauthorizedProject(User loginUser, Integer userId) {
         Map<String, Object> result = new HashMap<>();
-        if (checkAdmin(loginUser, result)) {
+        if (isNotAdmin(loginUser, result)) {
             return result;
         }
         /**
@@ -344,7 +344,7 @@ private List<Project> getUnauthorizedProjects(Set<Project> projectSet, List<Proj
     public Map<String, Object> queryAuthorizedProject(User loginUser, Integer userId) {
         Map<String, Object> result = new HashMap<>();
 
-        if (checkAdmin(loginUser, result)) {
+        if (isNotAdmin(loginUser, result)) {
             return result;
         }
 
@@ -364,7 +364,7 @@ public Map<String, Object> queryAuthorizedProject(User loginUser, Integer userId
     public Map<String, Object> queryProjectCreatedByUser(User loginUser) {
         Map<String, Object> result = new HashMap<>();
 
-        if (checkAdmin(loginUser, result)) {
+        if (isNotAdmin(loginUser, result)) {
             return result;
         }
 

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/ProcessDefinitionControllerTest.java
Patch:
@@ -94,7 +94,7 @@ public void testCreateProcessDefinition() throws Exception {
         String connects = "[]";
         Map<String, Object> result = new HashMap<>();
         putMsg(result, Status.SUCCESS);
-        result.put("processDefinitionId", 1);
+        result.put(Constants.DATA_LIST, 1);
 
         Mockito.when(processDefinitionService.createProcessDefinition(user, projectName, name, json,
                 description, locations, connects)).thenReturn(result);
@@ -142,6 +142,7 @@ public void updateProcessDefinition() throws Exception {
         String description = "desc test";
         String connects = "[]";
         int id = 1;
+        int releaseState = 0;
         Map<String, Object> result = new HashMap<>();
         putMsg(result, Status.SUCCESS);
         result.put("processDefinitionId", 1);
@@ -150,7 +151,7 @@ public void updateProcessDefinition() throws Exception {
                 description, locations, connects)).thenReturn(result);
 
         Result response = processDefinitionController.updateProcessDefinition(user, projectName, name, id, json,
-                locations, connects, description);
+                locations, connects, description,releaseState);
         Assert.assertEquals(Status.SUCCESS.getCode(), response.getCode().intValue());
     }
 

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/TenantControllerTest.java
Patch:
@@ -131,7 +131,7 @@ public void testVerifyTenantCodeExists() throws Exception {
                 .andReturn();
 
         Result result = JSONUtils.parseObject(mvcResult.getResponse().getContentAsString(), Result.class);
-        Assert.assertEquals(Status.TENANT_CODE_EXIST.getCode(), result.getCode().intValue());
+        Assert.assertEquals(Status.OS_TENANT_CODE_EXIST.getCode(), result.getCode().intValue());
         logger.info(mvcResult.getResponse().getContentAsString());
 
     }

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/BaseServiceTest.java
Patch:
@@ -72,6 +72,8 @@ public void testIsAdmin(){
 
     }
 
+
+
     @Test
     public void testPutMsg(){
 

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/shell/ShellExecutor.java
Patch:
@@ -140,8 +140,8 @@ protected void parseExecResult(BufferedReader lines) throws IOException {
         String line = "";
         while ( (nRead = lines.read(buf, 0, buf.length)) > 0 ) {
             line = new String(buf,0,nRead);
+            output.append(line);
         }
-        output.append(line);
     }
 
     /**

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/VarPoolUtils.java
Patch:
@@ -63,7 +63,7 @@ public static void setTaskNodeLocalParams(TaskNode taskNode, Map<String, Object>
      * @throws ParseException ParseException
      */
     public static void convertVarPoolToMap(Map<String, Object> propToValue, String varPool) throws ParseException {
-        if (varPool == null || propToValue == null) {
+        if (propToValue == null || StringUtils.isEmpty(varPool)) {
             return;
         }
         String[] splits = varPool.split("\\$VarPool\\$");

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/processor/TaskExecuteProcessor.java
Patch:
@@ -177,7 +177,6 @@ private void doAck(TaskExecutionContext taskExecutionContext) {
 
     /**
      * build ack command
-     *
      * @param taskExecutionContext taskExecutionContext
      * @return TaskExecuteAckCommand
      */

File: dolphinscheduler-spi/src/main/java/org/apache/dolphinscheduler/spi/params/PasswordParam.java
Patch:
@@ -20,7 +20,6 @@
 import org.apache.dolphinscheduler.spi.params.base.FormType;
 import org.apache.dolphinscheduler.spi.params.base.ParamsProps;
 import org.apache.dolphinscheduler.spi.params.base.PluginParams;
-import org.apache.dolphinscheduler.spi.params.base.PropsType;
 import org.apache.dolphinscheduler.spi.params.base.Validate;
 
 import java.util.ArrayList;
@@ -44,7 +43,6 @@ public static class Builder extends PluginParams.Builder {
         public Builder(String name, String title) {
             super(name, FormType.INPUT, title);
             ParamsProps paramsProps = new ParamsProps();
-            paramsProps.setPropsType(PropsType.PASSWORD);
             this.props = paramsProps;
         }
 

File: dolphinscheduler-spi/src/main/java/org/apache/dolphinscheduler/spi/params/PluginParamsTransfer.java
Patch:
@@ -39,14 +39,12 @@ public static List<PluginParams> transferJsonToParamsList(String str) {
 
     /**
      * return the plugin params map
-     * @param paramsJsonStr
-     * @return
      */
     public static Map<String, String> getPluginParamsMap(String paramsJsonStr) {
         List<PluginParams> pluginParams = transferJsonToParamsList(paramsJsonStr);
         Map<String, String> paramsMap = new HashMap<>();
         for (PluginParams param : pluginParams) {
-            paramsMap.put(param.getName(), param.getValue().toString());
+            paramsMap.put(param.getName(), null != param.getValue() ? param.getValue().toString() : null);
         }
         return paramsMap;
     }

File: dolphinscheduler-alert/src/main/java/org/apache/dolphinscheduler/alert/utils/PropertyUtils.java
Patch:
@@ -83,7 +83,7 @@ public static String getString(String key) {
     /**
      * get property value
      *
-     * @param key property name
+     * @param key        property name
      * @param defaultVal default value
      * @return property value
      */

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProcessInstanceService.java
Patch:
@@ -189,8 +189,7 @@ public Map<String, Object> queryProcessInstanceById(User loginUser, String proje
         ProcessInstance processInstance = processService.findProcessInstanceDetailById(processId);
 
         ProcessDefinition processDefinition = processService.findProcessDefineById(processInstance.getProcessDefinitionId());
-        processInstance.setReceivers(processDefinition.getReceivers());
-        processInstance.setReceiversCc(processDefinition.getReceiversCc());
+        processInstance.setWarningGroupId(processDefinition.getWarningGroupId());
         result.put(DATA_LIST, processInstance);
         putMsg(result, Status.SUCCESS);
 

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/TaskInstanceControllerTest.java
Patch:
@@ -99,4 +99,5 @@ public void testForceTaskSuccess() throws Exception {
         Result result = JSONUtils.parseObject(mvcResult.getResponse().getContentAsString(), Result.class);
         Assert.assertEquals(Status.SUCCESS.getCode(), result.getCode().intValue());
     }
+
 }

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProcessInstanceServiceTest.java
Patch:
@@ -211,8 +211,6 @@ public void testQueryProcessInstanceById() {
 
         //project auth success
         ProcessInstance processInstance = getProcessInstance();
-        processInstance.setReceivers("xxx@qq.com");
-        processInstance.setReceiversCc("xxx@qq.com");
         processInstance.setProcessDefinitionId(46);
         putMsg(result, Status.SUCCESS, projectName);
         Project project = getProject(projectName);

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessService.java
Patch:
@@ -1023,7 +1023,7 @@ private ProcessInstanceMap findPreviousTaskProcessMap(ProcessInstance parentProc
      * create sub work process command
      *
      * @param parentProcessInstance parentProcessInstance
-     * @param task                  task
+     * @param task task
      */
     public void createSubWorkProcess(ProcessInstance parentProcessInstance, TaskInstance task) {
         if (!task.isSubProcess()) {
@@ -1142,8 +1142,7 @@ private void updateSubProcessDefinitionByParent(ProcessInstance parentProcessIns
         ProcessDefinition fatherDefinition = this.findProcessDefineById(parentProcessInstance.getProcessDefinitionId());
         ProcessDefinition childDefinition = this.findProcessDefineById(childDefinitionId);
         if (childDefinition != null && fatherDefinition != null) {
-            childDefinition.setReceivers(fatherDefinition.getReceivers());
-            childDefinition.setReceiversCc(fatherDefinition.getReceiversCc());
+            childDefinition.setWarningGroupId(fatherDefinition.getWarningGroupId());
             processDefineMapper.updateById(childDefinition);
         }
     }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProcessInstanceService.java
Patch:
@@ -66,11 +66,13 @@
 import java.nio.charset.StandardCharsets;
 import java.text.ParseException;
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.Date;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.Objects;
+import java.util.Optional;
 import java.util.stream.Collectors;
 
 import org.slf4j.Logger;
@@ -449,7 +451,7 @@ public Map<String, Object> updateProcessInstance(User loginUser, String projectN
 
             originDefParams = JSONUtils.toJsonString(processData.getGlobalParams());
             List<Property> globalParamList = processData.getGlobalParams();
-            Map<String, String> globalParamMap = globalParamList.stream().collect(Collectors.toMap(Property::getProp, Property::getValue));
+            Map<String, String> globalParamMap = Optional.ofNullable(globalParamList).orElse(Collections.emptyList()).stream().collect(Collectors.toMap(Property::getProp, Property::getValue));
             globalParams = ParameterUtils.curingGlobalParams(globalParamMap, globalParamList,
                     processInstance.getCmdTypeIfComplement(), schedule);
             timeout = processData.getTimeout();

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/shell/ShellExecutor.java
Patch:
@@ -140,8 +140,8 @@ protected void parseExecResult(BufferedReader lines) throws IOException {
         String line = "";
         while ( (nRead = lines.read(buf, 0, buf.length)) > 0 ) {
             line = new String(buf,0,nRead);
+            output.append(line);
         }
-        output.append(line);
     }
 
     /**

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/Constants.java
Patch:
@@ -458,6 +458,8 @@ private Constants() {
 
     public static final String CMD_PARAM_START_NODE_NAMES = "StartNodeNameList";
 
+    public static final String CMD_PARAM_START_PARAMS = "StartParams";
+
     /**
      * complement data start date
      */

File: dolphinscheduler-alert/src/test/java/org/apache/dolphinscheduler/alert/plugin/AlertPluginManagerTest.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.dolphinscheduler.spi.utils.StringUtils;
 
 import org.junit.Assert;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -32,6 +33,7 @@
 /**
  * AlertPluginManager Tester.
  */
+@Ignore
 public class AlertPluginManagerTest {
 
     private static final Logger logger = LoggerFactory.getLogger(AlertPluginManagerTest.class);

File: dolphinscheduler-alert/src/test/java/org/apache/dolphinscheduler/alert/plugin/DolphinPluginLoaderTest.java
Patch:
@@ -20,13 +20,15 @@
 import org.junit.After;
 import org.junit.Assert;
 import org.junit.Before;
+import org.junit.Ignore;
 import org.junit.Test;
 
 import com.google.common.collect.ImmutableList;
 
 /**
  * DolphinPluginLoader Tester.
  */
+@Ignore
 public class DolphinPluginLoaderTest {
 
     @Before

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/AccessTokenController.java
Patch:
@@ -86,7 +86,7 @@ public Result createToken(@ApiIgnore @RequestAttribute(value = Constants.SESSION
         logger.info("login user {}, create token , userId : {} , token expire time : {} , token : {}", loginUser.getUserName(),
                 userId, expireTime, token);
 
-        Map<String, Object> result = accessTokenService.createToken(userId, expireTime, token);
+        Map<String, Object> result = accessTokenService.createToken(loginUser, userId, expireTime, token);
         return returnDataList(result);
     }
 
@@ -106,7 +106,7 @@ public Result generateToken(@RequestAttribute(value = Constants.SESSION_USER) Us
                                 @RequestParam(value = "userId") int userId,
                                 @RequestParam(value = "expireTime") String expireTime) {
         logger.info("login user {}, generate token , userId : {} , token expire time : {}", loginUser, userId, expireTime);
-        Map<String, Object> result = accessTokenService.generateToken(userId, expireTime);
+        Map<String, Object> result = accessTokenService.generateToken(loginUser, userId, expireTime);
         return returnDataList(result);
     }
 
@@ -185,7 +185,7 @@ public Result updateToken(@RequestAttribute(value = Constants.SESSION_USER) User
         logger.info("login user {}, update token , userId : {} , token expire time : {} , token : {}", loginUser.getUserName(),
                 userId, expireTime, token);
 
-        Map<String, Object> result = accessTokenService.updateToken(id, userId, expireTime, token);
+        Map<String, Object> result = accessTokenService.updateToken(loginUser, id, userId, expireTime, token);
         return returnDataList(result);
     }
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/AlertGroupController.java
Patch:
@@ -131,8 +131,8 @@ public Result list(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER)
     @ResponseStatus(HttpStatus.OK)
     @ApiException(LIST_PAGING_ALERT_GROUP_ERROR)
     public Result listPaging(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,
-                             @RequestParam("pageNo") Integer pageNo,
                              @RequestParam(value = "searchVal", required = false) String searchVal,
+                             @RequestParam("pageNo") Integer pageNo,
                              @RequestParam("pageSize") Integer pageSize) {
         logger.info("login  user {}, list paging, pageNo: {}, searchVal: {}, pageSize: {}",
             loginUser.getUserName(), pageNo, searchVal, pageSize);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProcessDefinitionController.java
Patch:
@@ -142,7 +142,7 @@ public Result createProcessDefinition(@ApiIgnore @RequestAttribute(value = Const
     @ApiOperation(value = "copyProcessDefinition", notes = "COPY_PROCESS_DEFINITION_NOTES")
     @ApiImplicitParams({
             @ApiImplicitParam(name = "processDefinitionIds", value = "PROCESS_DEFINITION_IDS", required = true, dataType = "String", example = "3,4"),
-            @ApiImplicitParam(name = "targetProjectId", value = "TARGET_PROJECT_ID", required = true, type = "Integer")
+            @ApiImplicitParam(name = "targetProjectId", value = "TARGET_PROJECT_ID", required = true, dataType = "Int", example = "10")
     })
     @PostMapping(value = "/copy")
     @ResponseStatus(HttpStatus.OK)
@@ -173,7 +173,7 @@ public Result copyProcessDefinition(@ApiIgnore @RequestAttribute(value = Constan
     @ApiOperation(value = "moveProcessDefinition", notes = "MOVE_PROCESS_DEFINITION_NOTES")
     @ApiImplicitParams({
             @ApiImplicitParam(name = "processDefinitionIds", value = "PROCESS_DEFINITION_IDS", required = true, dataType = "String", example = "3,4"),
-            @ApiImplicitParam(name = "targetProjectId", value = "TARGET_PROJECT_ID", required = true, type = "Integer")
+            @ApiImplicitParam(name = "targetProjectId", value = "TARGET_PROJECT_ID", required = true, dataType = "Int", example = "10")
     })
     @PostMapping(value = "/move")
     @ResponseStatus(HttpStatus.OK)

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/security/AuthenticationType.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.api.security;
 
 import com.baomidou.mybatisplus.annotation.EnumValue;
@@ -24,6 +25,7 @@
 public enum AuthenticationType {
 
     PASSWORD(0, "verify via user name and password"),
+    LDAP(1, "verify via LDAP server"),
     ;
 
     AuthenticationType(int code, String desc) {

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProcessInstanceService.java
Patch:
@@ -304,10 +304,10 @@ public Map<String, Object> queryTaskListByProcessId(User loginUser, String proje
     private void addDependResultForTaskList(List<TaskInstance> taskInstanceList) throws IOException {
         for (TaskInstance taskInstance : taskInstanceList) {
             if (taskInstance.getTaskType().equalsIgnoreCase(TaskType.DEPENDENT.toString())) {
-                Result logResult = loggerService.queryLog(
+                Result<String> logResult = loggerService.queryLog(
                         taskInstance.getId(), 0, 4098);
                 if (logResult.getCode() == Status.SUCCESS.ordinal()) {
-                    String log = (String) logResult.getData();
+                    String log = logResult.getData();
                     Map<String, DependResult> resultMap = parseLogForDependentResult(log);
                     taskInstance.setDependentResult(JSONUtils.toJsonString(resultMap));
                 }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/LoggerServiceImpl.java
Patch:
@@ -130,7 +130,6 @@ public byte[] getLogBytes(int taskInstId) {
                 logClient.getLogBytes(host, Constants.RPC_PORT, taskInstance.getLogPath()));
     }
 
-
     /**
      * get host
      *

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/ProcessDefinitionControllerTest.java
Patch:
@@ -117,14 +117,14 @@ private void putMsg(Map<String, Object> result, Status status, Object... statusP
     public void testVerifyProcessDefinitionName() throws Exception {
 
         Map<String, Object> result = new HashMap<>();
-        putMsg(result, Status.PROCESS_INSTANCE_EXIST);
+        putMsg(result, Status.VERIFY_PROCESS_DEFINITION_NAME_UNIQUE_ERROR);
         String projectName = "test";
         String name = "dag_test";
 
         Mockito.when(processDefinitionService.verifyProcessDefinitionName(user, projectName, name)).thenReturn(result);
 
         Result response = processDefinitionController.verifyProcessDefinitionName(user, projectName, name);
-        Assert.assertEquals(Status.PROCESS_INSTANCE_EXIST.getCode(), response.getCode().intValue());
+        Assert.assertEquals(Status.VERIFY_PROCESS_DEFINITION_NAME_UNIQUE_ERROR.getCode(), response.getCode().intValue());
 
     }
 

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/security/SecurityConfigPasswordTest.java
Patch:
@@ -14,9 +14,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.api.security;
 
 import org.apache.dolphinscheduler.api.ApiApplicationServer;
+
 import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -30,7 +32,7 @@
 @TestPropertySource(properties = {
         "security.authentication.type=PASSWORD",
 })
-public class SecurityConfigTest {
+public class SecurityConfigPasswordTest {
 
     @Autowired
     private SecurityConfig securityConfig;

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProcessInstanceServiceTest.java
Patch:
@@ -211,8 +211,6 @@ public void testQueryProcessInstanceById() {
 
         //project auth success
         ProcessInstance processInstance = getProcessInstance();
-        processInstance.setReceivers("xxx@qq.com");
-        processInstance.setReceiversCc("xxx@qq.com");
         processInstance.setProcessDefinitionId(46);
         putMsg(result, Status.SUCCESS, projectName);
         Project project = getProject(projectName);

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/process/ResourceInfo.java
Patch:
@@ -42,6 +42,4 @@ public String getRes() {
   public void setRes(String res) {
     this.res = res;
   }
-
-
 }

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/task/conditions/ConditionsParameters.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.dolphinscheduler.common.process.ResourceInfo;
 import org.apache.dolphinscheduler.common.task.AbstractParameters;
 
+import java.util.ArrayList;
 import java.util.List;
 
 public class ConditionsParameters extends AbstractParameters {
@@ -43,7 +44,7 @@ public boolean checkParameters() {
 
     @Override
     public List<ResourceInfo> getResourceFilesList() {
-        return null;
+        return new ArrayList<>();
     }
 
     public List<DependentTaskModel> getDependTaskList() {

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/task/flink/FlinkParameters.java
Patch:
@@ -19,6 +19,7 @@
 import org.apache.dolphinscheduler.common.enums.ProgramType;
 import org.apache.dolphinscheduler.common.process.ResourceInfo;
 import org.apache.dolphinscheduler.common.task.AbstractParameters;
+import org.apache.dolphinscheduler.common.utils.CollectionUtils;
 
 import java.util.ArrayList;
 import java.util.List;

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/task/spark/SparkParameters.java
Patch:
@@ -216,7 +216,7 @@ public void setSparkVersion(String sparkVersion) {
 
   @Override
   public boolean checkParameters() {
-    return mainJar != null && programType != null && sparkVersion != null;
+    return mainJar != null && programType != null;
   }
 
   @Override

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/Command.java
Patch:
@@ -131,6 +131,7 @@ public Command(
             WarningType warningType,
             int warningGroupId,
             Date scheduleTime,
+            String workerGroup,
             Priority processInstancePriority) {
         this.commandType = commandType;
         this.executorId = executorId;
@@ -143,6 +144,7 @@ public Command(
         this.failureStrategy = failureStrategy;
         this.startTime = new Date();
         this.updateTime = new Date();
+        this.workerGroup = workerGroup;
         this.processInstancePriority = processInstancePriority;
     }
 

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/ProcessInstanceMapper.java
Patch:
@@ -75,6 +75,7 @@ List<ProcessInstance> queryByWorkerGroupIdAndStatus(@Param("workerGroupId") int
      * @param projectId projectId
      * @param processDefinitionId processDefinitionId
      * @param searchVal searchVal
+     * @param executorId executorId
      * @param statusArray statusArray
      * @param host host
      * @param startTime startTime

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkFlowLineageMapper.java
Patch:
@@ -24,9 +24,9 @@
 
 public interface WorkFlowLineageMapper {
 
-    public List<WorkFlowLineage> queryByName(@Param("searchVal") String searchVal, @Param("projectId") int projectId);
+    List<WorkFlowLineage> queryByName(@Param("searchVal") String searchVal, @Param("projectId") int projectId);
 
-    public List<WorkFlowLineage> queryByIds(@Param("ids") Set<Integer> ids, @Param("projectId") int projectId);
+    List<WorkFlowLineage> queryByIds(@Param("ids") Set<Integer> ids, @Param("projectId") int projectId);
 
-    public List<WorkFlowRelation> querySourceTarget(@Param("id") int id);
+    List<WorkFlowRelation> querySourceTarget(@Param("id") int id);
 }

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/upgrade/DolphinSchedulerManager.java
Patch:
@@ -117,6 +117,8 @@ public void upgradeDolphinScheduler() throws Exception{
                     upgradeDao.upgradeDolphinScheduler(schemaDir);
                     if ("1.3.0".equals(schemaVersion)) {
                         upgradeDao.upgradeDolphinSchedulerWorkerGroup();
+                    } else if ("1.3.2".equals(schemaVersion)) {
+                        upgradeDao.upgradeDolphinSchedulerResourceList();
                     }
                     version = schemaVersion;
                 }

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/ResourceMapperTest.java
Patch:
@@ -308,7 +308,6 @@ public void testQueryTenantCodeByResourceName() {
 
 
         Tenant tenant = new Tenant();
-        tenant.setTenantName("ut tenant ");
         tenant.setTenantCode("ut tenant code for resource");
         int tenantInsertStatus = tenantMapper.insert(tenant);
 

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/TaskInstanceMapperTest.java
Patch:
@@ -286,6 +286,7 @@ public void testQueryTaskInstanceListPaging() {
                 task.getProcessInstanceId(),
                 "",
                 "",
+                "",
                 0,
                 new int[0],
                 "",

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/TenantMapperTest.java
Patch:
@@ -137,12 +137,12 @@ public void testQueryTenantPaging() {
 
         Tenant tenant = insertOne();
         tenant.setTenantCode("ut code");
-        tenant.setTenantName("ut name");
         tenant.setQueueId(queue.getId());
         tenantMapper.updateById(tenant);
         Page<Tenant> page = new Page(1,3);
 
-        IPage<Tenant> tenantIPage = tenantMapper.queryTenantPaging(page, tenant.getTenantName());
+        //tenant.getTenantCode() used instead of tenant.getTenantName()
+        IPage<Tenant> tenantIPage = tenantMapper.queryTenantPaging(page, tenant.getTenantCode());
 
         Assert.assertNotEquals(tenantIPage.getTotal(), 0);
     }

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/UserMapperTest.java
Patch:
@@ -161,7 +161,6 @@ private AccessToken insertOneAccessToken(User user) {
     private Tenant insertOneTenant() {
         Tenant tenant = new Tenant();
         tenant.setTenantCode("dolphin");
-        tenant.setTenantName("dolphin test");
         tenant.setDescription("dolphin user use");
         tenant.setQueue("1");
         tenant.setCreateTime(new Date());
@@ -178,7 +177,6 @@ private Tenant insertOneTenant() {
     private Tenant insertOneTenant(Queue queue) {
         Tenant tenant = new Tenant();
         tenant.setTenantCode("dolphin");
-        tenant.setTenantName("dolphin test");
         tenant.setDescription("dolphin user use");
         tenant.setQueueId(queue.getId());
         tenant.setQueue(queue.getQueue());

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/log/GetLogBytesRequestCommand.java
Patch:
@@ -17,9 +17,9 @@
 
 package org.apache.dolphinscheduler.remote.command.log;
 
+import org.apache.dolphinscheduler.common.utils.JSONUtils;
 import org.apache.dolphinscheduler.remote.command.Command;
 import org.apache.dolphinscheduler.remote.command.CommandType;
-import org.apache.dolphinscheduler.remote.utils.JsonSerializer;
 
 import java.io.Serializable;
 
@@ -53,10 +53,10 @@ public void setPath(String path) {
      *
      * @return command
      */
-    public Command convert2Command(){
+    public Command convert2Command() {
         Command command = new Command();
         command.setType(CommandType.GET_LOG_BYTES_REQUEST);
-        byte[] body = JsonSerializer.serialize(this);
+        byte[] body = JSONUtils.toJsonByteArray(this);
         command.setBody(body);
         return command;
     }

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/log/GetLogBytesResponseCommand.java
Patch:
@@ -17,9 +17,9 @@
 
 package org.apache.dolphinscheduler.remote.command.log;
 
+import org.apache.dolphinscheduler.common.utils.JSONUtils;
 import org.apache.dolphinscheduler.remote.command.Command;
 import org.apache.dolphinscheduler.remote.command.CommandType;
-import org.apache.dolphinscheduler.remote.utils.JsonSerializer;
 
 import java.io.Serializable;
 
@@ -54,10 +54,10 @@ public void setData(byte[] data) {
      * @param opaque request unique identification
      * @return command
      */
-    public Command convert2Command(long opaque){
+    public Command convert2Command(long opaque) {
         Command command = new Command(opaque);
         command.setType(CommandType.GET_LOG_BYTES_RESPONSE);
-        byte[] body = JsonSerializer.serialize(this);
+        byte[] body = JSONUtils.toJsonByteArray(this);
         command.setBody(body);
         return command;
     }

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/log/RemoveTaskLogRequestCommand.java
Patch:
@@ -17,9 +17,9 @@
 
 package org.apache.dolphinscheduler.remote.command.log;
 
+import org.apache.dolphinscheduler.common.utils.JSONUtils;
 import org.apache.dolphinscheduler.remote.command.Command;
 import org.apache.dolphinscheduler.remote.command.CommandType;
-import org.apache.dolphinscheduler.remote.utils.JsonSerializer;
 
 import java.io.Serializable;
 
@@ -53,10 +53,10 @@ public void setPath(String path) {
      *
      * @return command
      */
-    public Command convert2Command(){
+    public Command convert2Command() {
         Command command = new Command();
         command.setType(CommandType.REMOVE_TAK_LOG_REQUEST);
-        byte[] body = JsonSerializer.serialize(this);
+        byte[] body = JSONUtils.toJsonByteArray(this);
         command.setBody(body);
         return command;
     }

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/log/RemoveTaskLogResponseCommand.java
Patch:
@@ -17,9 +17,9 @@
 
 package org.apache.dolphinscheduler.remote.command.log;
 
+import org.apache.dolphinscheduler.common.utils.JSONUtils;
 import org.apache.dolphinscheduler.remote.command.Command;
 import org.apache.dolphinscheduler.remote.command.CommandType;
-import org.apache.dolphinscheduler.remote.utils.JsonSerializer;
 
 import java.io.Serializable;
 
@@ -53,10 +53,10 @@ public void setStatus(Boolean status) {
      *
      * @return command
      */
-    public Command convert2Command(long opaque){
+    public Command convert2Command(long opaque) {
         Command command = new Command(opaque);
         command.setType(CommandType.REMOVE_TAK_LOG_RESPONSE);
-        byte[] body = JsonSerializer.serialize(this);
+        byte[] body = JSONUtils.toJsonByteArray(this);
         command.setBody(body);
         return command;
     }

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/log/RollViewLogRequestCommand.java
Patch:
@@ -17,9 +17,9 @@
 
 package org.apache.dolphinscheduler.remote.command.log;
 
+import org.apache.dolphinscheduler.common.utils.JSONUtils;
 import org.apache.dolphinscheduler.remote.command.Command;
 import org.apache.dolphinscheduler.remote.command.CommandType;
-import org.apache.dolphinscheduler.remote.utils.JsonSerializer;
 
 import java.io.Serializable;
 
@@ -81,10 +81,10 @@ public void setLimit(int limit) {
      *
      * @return command
      */
-    public Command convert2Command(){
+    public Command convert2Command() {
         Command command = new Command();
         command.setType(CommandType.ROLL_VIEW_LOG_REQUEST);
-        byte[] body = JsonSerializer.serialize(this);
+        byte[] body = JSONUtils.toJsonByteArray(this);
         command.setBody(body);
         return command;
     }

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/log/RollViewLogResponseCommand.java
Patch:
@@ -17,9 +17,9 @@
 
 package org.apache.dolphinscheduler.remote.command.log;
 
+import org.apache.dolphinscheduler.common.utils.JSONUtils;
 import org.apache.dolphinscheduler.remote.command.Command;
 import org.apache.dolphinscheduler.remote.command.CommandType;
-import org.apache.dolphinscheduler.remote.utils.JsonSerializer;
 
 import java.io.Serializable;
 
@@ -54,10 +54,10 @@ public void setMsg(String msg) {
      * @param opaque request unique identification
      * @return command
      */
-    public Command convert2Command(long opaque){
+    public Command convert2Command(long opaque) {
         Command command = new Command(opaque);
         command.setType(CommandType.ROLL_VIEW_LOG_RESPONSE);
-        byte[] body = JsonSerializer.serialize(this);
+        byte[] body = JSONUtils.toJsonByteArray(this);
         command.setBody(body);
         return command;
     }

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/log/ViewLogRequestCommand.java
Patch:
@@ -17,9 +17,9 @@
 
 package org.apache.dolphinscheduler.remote.command.log;
 
+import org.apache.dolphinscheduler.common.utils.JSONUtils;
 import org.apache.dolphinscheduler.remote.command.Command;
 import org.apache.dolphinscheduler.remote.command.CommandType;
-import org.apache.dolphinscheduler.remote.utils.JsonSerializer;
 
 import java.io.Serializable;
 
@@ -53,10 +53,10 @@ public void setPath(String path) {
      *
      * @return command
      */
-    public Command convert2Command(){
+    public Command convert2Command() {
         Command command = new Command();
         command.setType(CommandType.VIEW_WHOLE_LOG_REQUEST);
-        byte[] body = JsonSerializer.serialize(this);
+        byte[] body = JSONUtils.toJsonByteArray(this);
         command.setBody(body);
         return command;
     }

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/log/ViewLogResponseCommand.java
Patch:
@@ -17,9 +17,9 @@
 
 package org.apache.dolphinscheduler.remote.command.log;
 
+import org.apache.dolphinscheduler.common.utils.JSONUtils;
 import org.apache.dolphinscheduler.remote.command.Command;
 import org.apache.dolphinscheduler.remote.command.CommandType;
-import org.apache.dolphinscheduler.remote.utils.JsonSerializer;
 
 import java.io.Serializable;
 
@@ -54,10 +54,10 @@ public void setMsg(String msg) {
      * @param opaque request unique identification
      * @return command
      */
-    public Command convert2Command(long opaque){
+    public Command convert2Command(long opaque) {
         Command command = new Command(opaque);
         command.setType(CommandType.VIEW_WHOLE_LOG_RESPONSE);
-        byte[] body = JsonSerializer.serialize(this);
+        byte[] body = JSONUtils.toJsonByteArray(this);
         command.setBody(body);
         return command;
     }

File: dolphinscheduler-alert/src/test/java/org/apache/dolphinscheduler/alert/plugin/EmailAlertPluginTest.java
Patch:
@@ -22,7 +22,6 @@
 import org.apache.dolphinscheduler.alert.utils.Constants;
 import org.apache.dolphinscheduler.alert.utils.PropertyUtils;
 import org.apache.dolphinscheduler.common.enums.AlertStatus;
-import org.apache.dolphinscheduler.common.enums.AlertType;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
 import org.apache.dolphinscheduler.dao.AlertDao;
 import org.apache.dolphinscheduler.dao.DaoFactory;
@@ -70,8 +69,6 @@ public void testRunSend() throws Exception {
         AlertGroup alertGroup = new AlertGroup();
         alertGroup.setDescription("test alert group 1");
         alertGroup.setGroupName("testalertg1");
-        //TODO AlertType is neet delete from AlertGroup
-        alertGroup.setGroupType(AlertType.EMAIL);
         alertDao.getAlertGroupMapper().insert(alertGroup);
 
         //add alert

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProcessInstanceService.java
Patch:
@@ -187,8 +187,7 @@ public Map<String, Object> queryProcessInstanceById(User loginUser, String proje
         ProcessInstance processInstance = processService.findProcessInstanceDetailById(processId);
 
         ProcessDefinition processDefinition = processService.findProcessDefineById(processInstance.getProcessDefinitionId());
-        processInstance.setReceivers(processDefinition.getReceivers());
-        processInstance.setReceiversCc(processDefinition.getReceiversCc());
+        processInstance.setWarningGroupId(processDefinition.getWarningGroupId());
         result.put(DATA_LIST, processInstance);
         putMsg(result, Status.SUCCESS);
 

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/AlertPluginInstanceMapperTest.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.dolphinscheduler.dao.mapper;
 
-import org.apache.dolphinscheduler.common.enums.AlertType;
 import org.apache.dolphinscheduler.common.utils.DateUtils;
 import org.apache.dolphinscheduler.dao.entity.AlertGroup;
 import org.apache.dolphinscheduler.dao.entity.AlertPluginInstance;
@@ -106,7 +105,6 @@ private AlertGroup createAlertGroup(String groupName) {
         AlertGroup alertGroup = new AlertGroup();
         alertGroup.setGroupName(groupName);
         alertGroup.setDescription("alert group 1");
-        alertGroup.setGroupType(AlertType.EMAIL);
 
         alertGroup.setCreateTime(DateUtils.getCurrentDate());
         alertGroup.setUpdateTime(DateUtils.getCurrentDate());

File: dolphinscheduler-alert/src/main/java/org/apache/dolphinscheduler/alert/plugin/AlertPluginManager.java
Patch:
@@ -22,6 +22,7 @@
 
 import static com.google.common.base.Preconditions.checkState;
 
+import org.apache.dolphinscheduler.common.enums.PluginType;
 import org.apache.dolphinscheduler.dao.entity.PluginDefine;
 import org.apache.dolphinscheduler.spi.DolphinSchedulerPlugin;
 import org.apache.dolphinscheduler.spi.alert.AlertChannel;
@@ -91,7 +92,7 @@ public void installPlugin(DolphinSchedulerPlugin dolphinSchedulerPlugin) {
             String nameEn = alertChannelFactory.getName();
             String paramsJson = PluginParamsTransfer.transferParamsToJson(params);
 
-            PluginDefine pluginDefine = new PluginDefine(nameEn, "alert", paramsJson);
+            PluginDefine pluginDefine = new PluginDefine(nameEn, PluginType.ALERT.getDesc(), paramsJson);
             pluginDao.addOrUpdatePluginDefine(pluginDefine);
         }
     }

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/utils/FlinkArgsUtils.java
Patch:
@@ -14,8 +14,8 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.server.utils;
 
+package org.apache.dolphinscheduler.server.utils;
 
 import org.apache.commons.lang.StringUtils;
 import org.apache.dolphinscheduler.common.Constants;
@@ -26,7 +26,6 @@
 import java.util.ArrayList;
 import java.util.List;
 
-
 /**
  * flink args utils
  */
@@ -62,7 +61,7 @@ public static List<String> buildArgs(FlinkParameters param) {
             String appName = param.getAppName();
             if (StringUtils.isNotEmpty(appName)) { //-ynm
                 args.add(Constants.FLINK_APP_NAME);
-                args.add(appName);
+                args.add(ArgsUtils.escape(appName));
             }
 
             // judge flink version,from flink1.10,the parameter -yn removed

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/security/AuthenticationType.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.api.security;
 
 import com.baomidou.mybatisplus.annotation.EnumValue;
@@ -24,6 +25,7 @@
 public enum AuthenticationType {
 
     PASSWORD(0, "verify via user name and password"),
+    LDAP(1, "verify via LDAP server"),
     ;
 
     AuthenticationType(int code, String desc) {

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/security/SecurityConfigPasswordTest.java
Patch:
@@ -14,9 +14,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.api.security;
 
 import org.apache.dolphinscheduler.api.ApiApplicationServer;
+
 import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -30,7 +32,7 @@
 @TestPropertySource(properties = {
         "security.authentication.type=PASSWORD",
 })
-public class SecurityConfigTest {
+public class SecurityConfigPasswordTest {
 
     @Autowired
     private SecurityConfig securityConfig;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/AlertGroupController.java
Patch:
@@ -118,8 +118,8 @@ public Result list(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER)
     @ResponseStatus(HttpStatus.OK)
     @ApiException(LIST_PAGING_ALERT_GROUP_ERROR)
     public Result listPaging(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,
-                             @RequestParam("pageNo") Integer pageNo,
                              @RequestParam(value = "searchVal", required = false) String searchVal,
+                             @RequestParam("pageNo") Integer pageNo,
                              @RequestParam("pageSize") Integer pageSize) {
         logger.info("login  user {}, list paging, pageNo: {}, searchVal: {}, pageSize: {}",
                 loginUser.getUserName(), pageNo, searchVal, pageSize);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProcessDefinitionController.java
Patch:
@@ -142,7 +142,7 @@ public Result createProcessDefinition(@ApiIgnore @RequestAttribute(value = Const
     @ApiOperation(value = "copyProcessDefinition", notes = "COPY_PROCESS_DEFINITION_NOTES")
     @ApiImplicitParams({
             @ApiImplicitParam(name = "processDefinitionIds", value = "PROCESS_DEFINITION_IDS", required = true, dataType = "String", example = "3,4"),
-            @ApiImplicitParam(name = "targetProjectId", value = "TARGET_PROJECT_ID", required = true, type = "Integer")
+            @ApiImplicitParam(name = "targetProjectId", value = "TARGET_PROJECT_ID", required = true, dataType = "Int", example = "10")
     })
     @PostMapping(value = "/copy")
     @ResponseStatus(HttpStatus.OK)
@@ -173,7 +173,7 @@ public Result copyProcessDefinition(@ApiIgnore @RequestAttribute(value = Constan
     @ApiOperation(value = "moveProcessDefinition", notes = "MOVE_PROCESS_DEFINITION_NOTES")
     @ApiImplicitParams({
             @ApiImplicitParam(name = "processDefinitionIds", value = "PROCESS_DEFINITION_IDS", required = true, dataType = "String", example = "3,4"),
-            @ApiImplicitParam(name = "targetProjectId", value = "TARGET_PROJECT_ID", required = true, type = "Integer")
+            @ApiImplicitParam(name = "targetProjectId", value = "TARGET_PROJECT_ID", required = true, dataType = "Int", example = "10")
     })
     @PostMapping(value = "/move")
     @ResponseStatus(HttpStatus.OK)

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/SchedulerController.java
Patch:
@@ -176,7 +176,7 @@ public Result updateSchedule(@ApiIgnore @RequestAttribute(value = SESSION_USER)
     @PostMapping("/online")
     @ApiException(PUBLISH_SCHEDULE_ONLINE_ERROR)
     public Result online(@ApiIgnore @RequestAttribute(value = SESSION_USER) User loginUser,
-                         @ApiParam(name = "projectName", value = "PROJECT_NAME", required = true) @PathVariable("projectName") String projectName,
+                         @ApiParam(name = "projectName", value = "PROJECT_NAME", required = true) @PathVariable String projectName,
                          @RequestParam("id") Integer id) {
         logger.info("login user {}, schedule setScheduleState, project name: {}, id: {}",
                 loginUser.getUserName(), projectName, id);
@@ -199,7 +199,7 @@ public Result online(@ApiIgnore @RequestAttribute(value = SESSION_USER) User log
     @PostMapping("/offline")
     @ApiException(OFFLINE_SCHEDULE_ERROR)
     public Result offline(@ApiIgnore @RequestAttribute(value = SESSION_USER) User loginUser,
-                          @ApiParam(name = "projectName", value = "PROJECT_NAME", required = true) @PathVariable("projectName") String projectName,
+                          @ApiParam(name = "projectName", value = "PROJECT_NAME", required = true) @PathVariable String projectName,
                           @RequestParam("id") Integer id) {
         logger.info("login user {}, schedule offline, project name: {}, process definition id: {}",
                 loginUser.getUserName(), projectName, id);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/TenantController.java
Patch:
@@ -119,8 +119,8 @@ public Result createTenant(@ApiIgnore @RequestAttribute(value = Constants.SESSIO
     @ResponseStatus(HttpStatus.OK)
     @ApiException(QUERY_TENANT_LIST_PAGING_ERROR)
     public Result queryTenantlistPaging(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,
-                                        @RequestParam("pageNo") Integer pageNo,
                                         @RequestParam(value = "searchVal", required = false) String searchVal,
+                                        @RequestParam("pageNo") Integer pageNo,
                                         @RequestParam("pageSize") Integer pageSize) {
         logger.info("login user {}, list paging, pageNo: {}, searchVal: {}, pageSize: {}",
                 loginUser.getUserName(), pageNo, searchVal, pageSize);

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessService.java
Patch:
@@ -20,7 +20,6 @@
 import static org.apache.dolphinscheduler.common.Constants.CMDPARAM_COMPLEMENT_DATA_END_DATE;
 import static org.apache.dolphinscheduler.common.Constants.CMDPARAM_COMPLEMENT_DATA_START_DATE;
 import static org.apache.dolphinscheduler.common.Constants.CMD_PARAM_EMPTY_SUB_PROCESS;
-import static org.apache.dolphinscheduler.common.Constants.CMD_PARAM_RECOVERY_START_NODE_STRING;
 import static org.apache.dolphinscheduler.common.Constants.CMD_PARAM_RECOVER_PROCESS_ID_STRING;
 import static org.apache.dolphinscheduler.common.Constants.CMD_PARAM_SUB_PROCESS;
 import static org.apache.dolphinscheduler.common.Constants.CMD_PARAM_SUB_PROCESS_DEFINE_ID;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/consumer/TaskPriorityQueueConsumer.java
Patch:
@@ -90,7 +90,7 @@ public class TaskPriorityQueueConsumer extends Thread {
      * taskUpdateQueue
      */
     @Autowired
-    private TaskPriorityQueue taskPriorityQueue;
+    private TaskPriorityQueue<String> taskPriorityQueue;
 
     /**
      * processService

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/shell/ShellTask.java
Patch:
@@ -150,9 +150,8 @@ private String buildCommand() throws Exception {
             p.setProp(Constants.PARAMETER_DATETIME);
             paramsMap.put(Constants.PARAMETER_DATETIME, p);
         }
-        if (null != paramsMap) {
-            script = ParameterUtils.convertParameterPlaceholders(script, ParamUtils.convert(paramsMap));
-        }
+
+        script = ParameterUtils.convertParameterPlaceholders(script, ParamUtils.convert(paramsMap));
 
         shellParameters.setRawScript(script);
 

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/ParameterUtils.java
Patch:
@@ -111,7 +111,9 @@ public static String convertParameterPlaceholders2(String parameterString, Map<S
         }
 
         // replace variable ${} form,refers to the replacement of system variables and custom variables
-        parameterString = PlaceholderUtils.replacePlaceholders(parameterString, parameterMap, true);
+        if (!parameterMap.isEmpty()) {
+            parameterString = PlaceholderUtils.replacePlaceholders(parameterString, parameterMap, true);
+        }
 
         // replace time $[...] form, eg. $[yyyyMMdd]
         if (cronTime != null) {

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/utils/DagHelper.java
Patch:
@@ -398,6 +398,9 @@ private static void setTaskNodeSkip(String skipNodeName,
                                         DAG<String, TaskNode, TaskNodeRelation> dag,
                                         Map<String, TaskInstance> completeTaskList,
                                         Map<String, TaskNode> skipTaskNodeList) {
+        if (!dag.containsNode(skipNodeName)) {
+            return;
+        }
         skipTaskNodeList.putIfAbsent(skipNodeName, dag.getNode(skipNodeName));
         Collection<String> postNodeList = dag.getSubsequentNodes(skipNodeName);
         for (String post : postNodeList) {

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/flink/FlinkTask.java
Patch:
@@ -42,6 +42,7 @@ public class FlinkTask extends AbstractYarnTask {
 
   /**
    *  flink command
+   *  usage: flink run [OPTIONS] <jar-file> <arguments>
    */
   private static final String FLINK_COMMAND = "flink";
   private static final String FLINK_RUN = "run";
@@ -102,6 +103,7 @@ public void init() {
    */
   @Override
   protected String buildCommand() {
+    // flink run [OPTIONS] <jar-file> <arguments>
     List<String> args = new ArrayList<>();
 
     args.add(FLINK_COMMAND);

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/processor/queue/TaskResponseService.java
Patch:
@@ -138,8 +138,9 @@ private void persist(TaskResponseEvent taskResponseEvent) {
             case ACK:
                 try {
                     TaskInstance taskInstance = processService.findTaskInstanceById(taskResponseEvent.getTaskInstanceId());
-                    if (taskInstance != null && !taskInstance.getState().typeIsFinished()) {
-                        processService.changeTaskState(taskInstance, taskResponseEvent.getState(),
+                    if (taskInstance != null) {
+                        ExecutionStatus status = taskInstance.getState().typeIsFinished() ? taskInstance.getState() : taskResponseEvent.getState();
+                        processService.changeTaskState(taskInstance, status,
                             taskResponseEvent.getStartTime(),
                             taskResponseEvent.getWorkerAddress(),
                             taskResponseEvent.getExecutePath(),

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/WorkFlowLineageMapper.java
Patch:
@@ -24,9 +24,9 @@
 
 public interface WorkFlowLineageMapper {
 
-    public List<WorkFlowLineage> queryByName(@Param("searchVal") String searchVal, @Param("projectId") int projectId);
+    List<WorkFlowLineage> queryByName(@Param("searchVal") String searchVal, @Param("projectId") int projectId);
 
-    public List<WorkFlowLineage> queryByIds(@Param("ids") Set<Integer> ids, @Param("projectId") int projectId);
+    List<WorkFlowLineage> queryByIds(@Param("ids") Set<Integer> ids, @Param("projectId") int projectId);
 
-    public List<WorkFlowRelation> querySourceTarget(@Param("id") int id);
+    List<WorkFlowRelation> querySourceTarget(@Param("id") int id);
 }

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/FileUtils.java
Patch:
@@ -30,13 +30,14 @@
 import java.io.ByteArrayOutputStream;
 import java.io.File;
 import java.io.FileOutputStream;
-import java.io.FileWriter;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
+import java.io.OutputStreamWriter;
 import java.io.StringReader;
 import java.io.UnsupportedEncodingException;
 import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
 import java.nio.charset.UnsupportedCharsetException;
 import java.util.Optional;
 
@@ -217,7 +218,7 @@ public static boolean writeContent2File(String content, String filePath) {
                 return false;
             }
             bufferedReader = new BufferedReader(new StringReader(content));
-            bufferedWriter = new BufferedWriter(new FileWriter(distFile));
+            bufferedWriter = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(distFile), StandardCharsets.UTF_8));
             char[] buf = new char[1024];
             int len;
             while ((len = bufferedReader.read(buf)) != -1) {

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/HadoopUtils.java
Patch:
@@ -39,6 +39,7 @@
 import java.io.File;
 import java.io.IOException;
 import java.io.InputStreamReader;
+import java.nio.charset.StandardCharsets;
 import java.nio.file.Files;
 import java.security.PrivilegedExceptionAction;
 import java.util.Collections;
@@ -263,7 +264,7 @@ public List<String> catFile(String hdfsFilePath, int skipLineNums, int limit) th
         }
 
         try (FSDataInputStream in = fs.open(new Path(hdfsFilePath))) {
-            BufferedReader br = new BufferedReader(new InputStreamReader(in));
+            BufferedReader br = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8));
             Stream<String> stream = br.lines().skip(skipLineNums).limit(limit);
             return stream.collect(Collectors.toList());
         }

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/sqoop/generator/sources/MysqlSourceGenerator.java
Patch:
@@ -60,7 +60,7 @@ public String generate(SqoopParameters sqoopParameters, TaskExecutionContext tas
                 if (null != baseDataSource) {
 
                     mysqlSourceSb.append(Constants.SPACE).append(SqoopConstants.DB_CONNECT)
-                        .append(Constants.SPACE).append(baseDataSource.getJdbcUrl())
+                        .append(Constants.SPACE).append(Constants.DOUBLE_QUOTES).append(baseDataSource.getJdbcUrl()).append(Constants.DOUBLE_QUOTES)
                         .append(Constants.SPACE).append(SqoopConstants.DB_USERNAME)
                         .append(Constants.SPACE).append(baseDataSource.getUser())
                         .append(Constants.SPACE).append(SqoopConstants.DB_PWD)

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/sqoop/generator/targets/MysqlTargetGenerator.java
Patch:
@@ -60,7 +60,7 @@ public String generate(SqoopParameters sqoopParameters, TaskExecutionContext tas
                 if (null != baseDataSource) {
 
                     mysqlTargetSb.append(Constants.SPACE).append(SqoopConstants.DB_CONNECT)
-                        .append(Constants.SPACE).append(baseDataSource.getJdbcUrl())
+                        .append(Constants.SPACE).append(Constants.DOUBLE_QUOTES).append(baseDataSource.getJdbcUrl()).append(Constants.DOUBLE_QUOTES)
                         .append(Constants.SPACE).append(SqoopConstants.DB_USERNAME)
                         .append(Constants.SPACE).append(baseDataSource.getUser())
                         .append(Constants.SPACE).append(SqoopConstants.DB_PWD)

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/processor/queue/TaskResponseService.java
Patch:
@@ -138,7 +138,7 @@ private void persist(TaskResponseEvent taskResponseEvent) {
             case ACK:
                 try {
                     TaskInstance taskInstance = processService.findTaskInstanceById(taskResponseEvent.getTaskInstanceId());
-                    if (taskInstance != null && ExecutionStatus.SUCCESS.getCode() != taskInstance.getState().getCode()) {
+                    if (taskInstance != null && !taskInstance.getState().typeIsFinished()) {
                         processService.changeTaskState(taskInstance, taskResponseEvent.getState(),
                             taskResponseEvent.getStartTime(),
                             taskResponseEvent.getWorkerAddress(),

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/utils/DagHelper.java
Patch:
@@ -276,7 +276,7 @@ public static boolean allDependsForbiddenOrEnd(TaskNode taskNode,
         }
         for (String dependNodeName : dependList) {
             TaskNode dependNode = dag.getNode(dependNodeName);
-            if (completeTaskList.containsKey(dependNodeName)
+            if (dependNode == null || completeTaskList.containsKey(dependNodeName)
                     || dependNode.isForbidden()
                     || skipTaskNodeList.containsKey(dependNodeName)) {
                 continue;

File: dolphinscheduler-alert-plugin/dolphinscheduler-alert-script/src/main/java/org/apache/dolphinscheduler/plugin/alert/script/ScriptAlertChannelFactory.java
Patch:
@@ -52,12 +52,12 @@ public List<PluginParams> getParams() {
                 .addValidate(Validate.newBuilder()
                         .setRequired(true)
                         .build())
-                .setPlaceholder("please upload the file to the disk directory of the alarm server, and ensure that the path is absolute and has the corresponding access rights")
+                .setPlaceholder("please upload the file to the disk directory of the alert server, and ensure that the path is absolute and has the corresponding access rights")
                 .build();
 
         RadioParam scriptTypeParams = RadioParam.newBuilder(ScriptParamsConstants.NAME_SCRIPT_TYPE, ScriptParamsConstants.SCRIPT_TYPE)
-                .addParamsOptions(new ParamsOptions(ScriptType.SHELL.getDescp(), ScriptType.SHELL.getDescp(), false))
-                .setValue(ScriptType.SHELL.getDescp())
+                .addParamsOptions(new ParamsOptions(ScriptType.SHELL.getDescp(), ScriptType.SHELL.getCode(), false))
+                .setValue(ScriptType.SHELL.getCode())
                 .addValidate(Validate.newBuilder().setRequired(true).build())
                 .build();
 

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/task/conditions/ConditionsParameters.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.dolphinscheduler.common.process.ResourceInfo;
 import org.apache.dolphinscheduler.common.task.AbstractParameters;
 
+import java.util.ArrayList;
 import java.util.List;
 
 public class ConditionsParameters extends AbstractParameters {
@@ -43,7 +44,7 @@ public boolean checkParameters() {
 
     @Override
     public List<ResourceInfo> getResourceFilesList() {
-        return null;
+        return new ArrayList<>();
     }
 
     public List<DependentTaskModel> getDependTaskList() {

File: dolphinscheduler-alert/src/test/java/org/apache/dolphinscheduler/alert/plugin/EmailAlertPluginTest.java
Patch:
@@ -74,7 +74,7 @@ public void process() {
         alertInfo.setAlertData(alertData);
         List<String> list = new ArrayList<String>(){{ add("xx@xx.com"); }};
         alertInfo.addProp("receivers", list);
-        Map<String, Object> ret = plugin.process(alertInfo);
-        assertFalse(Boolean.parseBoolean(String.valueOf(ret.get(Constants.STATUS))));
+//        Map<String, Object> ret = plugin.process(alertInfo);
+//        assertFalse(Boolean.parseBoolean(String.valueOf(ret.get(Constants.STATUS))));
     }
 }
\ No newline at end of file

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/AccessTokenController.java
Patch:
@@ -86,7 +86,7 @@ public Result createToken(@ApiIgnore @RequestAttribute(value = Constants.SESSION
         logger.info("login user {}, create token , userId : {} , token expire time : {} , token : {}", loginUser.getUserName(),
                 userId, expireTime, token);
 
-        Map<String, Object> result = accessTokenService.createToken(userId, expireTime, token);
+        Map<String, Object> result = accessTokenService.createToken(loginUser, userId, expireTime, token);
         return returnDataList(result);
     }
 
@@ -106,7 +106,7 @@ public Result generateToken(@RequestAttribute(value = Constants.SESSION_USER) Us
                                 @RequestParam(value = "userId") int userId,
                                 @RequestParam(value = "expireTime") String expireTime) {
         logger.info("login user {}, generate token , userId : {} , token expire time : {}", loginUser, userId, expireTime);
-        Map<String, Object> result = accessTokenService.generateToken(userId, expireTime);
+        Map<String, Object> result = accessTokenService.generateToken(loginUser, userId, expireTime);
         return returnDataList(result);
     }
 
@@ -185,7 +185,7 @@ public Result updateToken(@RequestAttribute(value = Constants.SESSION_USER) User
         logger.info("login user {}, update token , userId : {} , token expire time : {} , token : {}", loginUser.getUserName(),
                 userId, expireTime, token);
 
-        Map<String, Object> result = accessTokenService.updateToken(id, userId, expireTime, token);
+        Map<String, Object> result = accessTokenService.updateToken(loginUser, id, userId, expireTime, token);
         return returnDataList(result);
     }
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/UsersController.java
Patch:
@@ -166,7 +166,7 @@ public Result updateUser(@ApiIgnore @RequestAttribute(value = Constants.SESSION_
                              @RequestParam(value = "state", required = false) int state) throws Exception {
         logger.info("login user {}, updateProcessInstance user, userName: {}, email: {}, tenantId: {}, userPassword: {}, phone: {}, user queue: {}, state: {}",
                 loginUser.getUserName(), userName, email, tenantId, Constants.PASSWORD_DEFAULT, phone, queue, state);
-        Map<String, Object> result = usersService.updateUser(id, userName, userPassword, email, tenantId, phone, queue, state);
+        Map<String, Object> result = usersService.updateUser(loginUser, id, userName, userPassword, email, tenantId, phone, queue, state);
         return returnDataList(result);
     }
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/LoggerServiceImpl.java
Patch:
@@ -130,7 +130,6 @@ public byte[] getLogBytes(int taskInstId) {
                 logClient.getLogBytes(host, Constants.RPC_PORT, taskInstance.getLogPath()));
     }
 
-
     /**
      * get host
      *

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/process/ResourceInfo.java
Patch:
@@ -42,6 +42,4 @@ public String getRes() {
   public void setRes(String res) {
     this.res = res;
   }
-
-
 }

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/task/flink/FlinkParameters.java
Patch:
@@ -19,6 +19,7 @@
 import org.apache.dolphinscheduler.common.enums.ProgramType;
 import org.apache.dolphinscheduler.common.process.ResourceInfo;
 import org.apache.dolphinscheduler.common.task.AbstractParameters;
+import org.apache.dolphinscheduler.common.utils.CollectionUtils;
 
 import java.util.ArrayList;
 import java.util.List;

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/task/spark/SparkParameters.java
Patch:
@@ -216,7 +216,7 @@ public void setSparkVersion(String sparkVersion) {
 
   @Override
   public boolean checkParameters() {
-    return mainJar != null && programType != null && sparkVersion != null;
+    return mainJar != null && programType != null;
   }
 
   @Override

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/Command.java
Patch:
@@ -131,6 +131,7 @@ public Command(
             WarningType warningType,
             int warningGroupId,
             Date scheduleTime,
+            String workerGroup,
             Priority processInstancePriority) {
         this.commandType = commandType;
         this.executorId = executorId;
@@ -143,6 +144,7 @@ public Command(
         this.failureStrategy = failureStrategy;
         this.startTime = new Date();
         this.updateTime = new Date();
+        this.workerGroup = workerGroup;
         this.processInstancePriority = processInstancePriority;
     }
 

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/upgrade/DolphinSchedulerManager.java
Patch:
@@ -117,6 +117,8 @@ public void upgradeDolphinScheduler() throws Exception{
                     upgradeDao.upgradeDolphinScheduler(schemaDir);
                     if ("1.3.0".equals(schemaVersion)) {
                         upgradeDao.upgradeDolphinSchedulerWorkerGroup();
+                    } else if ("1.3.2".equals(schemaVersion)) {
+                        upgradeDao.upgradeDolphinSchedulerResourceList();
                     }
                     version = schemaVersion;
                 }

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/ConditionsTaskExecThread.java
Patch:
@@ -39,7 +39,6 @@
 
 public class ConditionsTaskExecThread extends MasterBaseTaskExecThread {
 
-
     /**
      * dependent parameters
      */
@@ -134,7 +133,6 @@ private void initTaskParameters() {
         this.dependentParameters = JSONUtils.parseObject(this.taskInstance.getDependency(), DependentParameters.class);
     }
 
-
     /**
      * depend result for depend item
      * @param item
@@ -158,5 +156,4 @@ private DependResult getDependResultForItem(DependentItem item){
         return dependResult;
     }
 
-
 }

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/utils/DependentExecute.java
Patch:
@@ -104,9 +104,7 @@ private DependResult calculateResultForTasks(DependentItem dependentItem,
             ProcessInstance processInstance = findLastProcessInterval(dependentItem.getDefinitionId(),
                                                     dateInterval);
             if(processInstance == null){
-                logger.error("cannot find the right process instance: definition id:{}, start:{}, end:{}",
-                       dependentItem.getDefinitionId(), dateInterval.getStartTime(), dateInterval.getEndTime() );
-                return DependResult.FAILED;
+                return DependResult.WAITING;
             }
             // need to check workflow for updates, so get all task and check the task state
             if(dependentItem.getDepTasks().equals(Constants.DEPENDENT_ALL)){

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/master/DependentTaskTest.java
Patch:
@@ -217,6 +217,7 @@ private TaskInstance getTaskInstance(){
         taskInstance.setId(252612);
         taskInstance.setName("C");
         taskInstance.setProcessInstanceId(10111);
+        taskInstance.setTaskJson("{}");
         taskInstance.setState(ExecutionStatus.SUBMITTED_SUCCESS);
         return taskInstance;
     }

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/master/processor/queue/TaskResponseServiceTest.java
Patch:
@@ -46,7 +46,7 @@ public class TaskResponseServiceTest {
     @Test
     public void testAdd(){
         TaskResponseEvent taskResponseEvent = TaskResponseEvent.newAck(ExecutionStatus.RUNNING_EXECUTION, new Date(),
-                "", "", "", 1);
+                "", "", "", 1,null);
         taskResponseService.addResponse(taskResponseEvent);
         Assert.assertTrue(taskResponseService.getEventQueue().size() == 1);
         try {
@@ -60,7 +60,7 @@ public void testAdd(){
     @Test
     public void testStop(){
         TaskResponseEvent taskResponseEvent = TaskResponseEvent.newAck(ExecutionStatus.RUNNING_EXECUTION, new Date(),
-                "", "", "", 1);
+                "", "", "", 1,null);
         taskResponseService.addResponse(taskResponseEvent);
         taskResponseService.stop();
         Assert.assertTrue(taskResponseService.getEventQueue().size() == 0);

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/master/runner/MasterTaskExecThreadTest.java
Patch:
@@ -57,7 +57,7 @@ public void setUp() {
         this.zookeeperRegistryCenter = PowerMockito.mock(ZookeeperRegistryCenter.class);
         PowerMockito.when(SpringApplicationContext.getBean(ZookeeperRegistryCenter.class))
                 .thenReturn(this.zookeeperRegistryCenter);
-        this.masterTaskExecThread = new MasterTaskExecThread(null);
+        this.masterTaskExecThread = new MasterTaskExecThread(getTaskInstance());
     }
 
     @Test
@@ -114,6 +114,7 @@ private TaskInstance getTaskInstance(){
         taskInstance.setTaskType("SHELL");
         taskInstance.setId(252612);
         taskInstance.setName("C");
+        taskInstance.setTaskJson("{}");
         taskInstance.setProcessInstanceId(10111);
         taskInstance.setState(ExecutionStatus.SUBMITTED_SUCCESS);
         return taskInstance;

File: e2e/src/test/java/org/apache/dolphinscheduler/page/security/TenantManagePage.java
Patch:
@@ -48,7 +48,7 @@ public boolean jumpSecurity() throws InterruptedException {
      * @return Whether to enter the specified page after create tenant
      */
     public boolean createTenant() throws InterruptedException {
-        clickElement(TenantManageLocator.TENANT_MANAGE);
+        clickButton(TenantManageLocator.TENANT_MANAGE);
 
         //create tenant
         clickButton(TenantManageLocator.CREATE_TENANT_BUTTON);

File: dolphinscheduler-spi/src/main/java/org/apache/dolphinscheduler/spi/utils/JSONUtils.java
Patch:
@@ -153,4 +153,4 @@ public static ArrayNode parseArray(String text) {
             throw new RuntimeException("Json deserialization exception.", e);
         }
     }
-}
+}
\ No newline at end of file

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessService.java
Patch:
@@ -1521,10 +1521,13 @@ public List<ProcessInstance> queryNeedFailoverProcessInstances(String host){
      */
     @Transactional(rollbackFor = Exception.class)
     public void processNeedFailoverProcessInstances(ProcessInstance processInstance){
+        logger.info("set null host to process instance:{}", processInstance.getId());
         //1 update processInstance host is null
         processInstance.setHost(Constants.NULL);
         processInstanceMapper.updateById(processInstance);
 
+        logger.info("create failover command for process instance:{}", processInstance.getId());
+
         //2 insert into recover command
         Command cmd = new Command();
         cmd.setProcessDefinitionId(processInstance.getProcessDefinitionId());

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/zk/ZookeeperOperator.java
Patch:
@@ -56,14 +56,16 @@ public class ZookeeperOperator implements InitializingBean {
     public void afterPropertiesSet() throws Exception {
         this.zkClient = buildClient();
         initStateLister();
-        registerListener();
+        treeCacheStart();
     }
 
     /**
      * this method is for sub class,
      */
     protected void registerListener(){}
 
+    protected void treeCacheStart(){}
+
     public void initStateLister() {
         checkNotNull(zkClient);
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/ConditionsTaskExecThread.java
Patch:
@@ -37,7 +37,6 @@
 
 public class ConditionsTaskExecThread extends MasterBaseTaskExecThread {
 
-
     /**
      * dependent parameters
      */
@@ -131,7 +130,6 @@ private void initTaskParameters() {
         this.dependentParameters = JSONUtils.parseObject(this.taskInstance.getDependency(), DependentParameters.class);
     }
 
-
     /**
      * depend result for depend item
      * @param item
@@ -155,5 +153,4 @@ private DependResult getDependResultForItem(DependentItem item){
         return dependResult;
     }
 
-
 }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProcessInstanceService.java
Patch:
@@ -305,10 +305,10 @@ public Map<String, Object> queryTaskListByProcessId(User loginUser, String proje
     private void addDependResultForTaskList(List<TaskInstance> taskInstanceList) throws IOException {
         for (TaskInstance taskInstance : taskInstanceList) {
             if (taskInstance.getTaskType().equalsIgnoreCase(TaskType.DEPENDENT.toString())) {
-                Result logResult = loggerService.queryLog(
+                Result<String> logResult = loggerService.queryLog(
                         taskInstance.getId(), 0, 4098);
                 if (logResult.getCode() == Status.SUCCESS.ordinal()) {
-                    String log = (String) logResult.getData();
+                    String log = logResult.getData();
                     Map<String, DependResult> resultMap = parseLogForDependentResult(log);
                     taskInstance.setDependentResult(JSONUtils.toJsonString(resultMap));
                 }

File: dolphinscheduler-alert/src/main/java/org/apache/dolphinscheduler/alert/runner/AlertSender.java
Patch:
@@ -142,6 +142,7 @@ private AlertResult getAlertResult(AlertPluginInstance instance, AlertData alert
             alertResultExtend.setStatus("false");
             alertResultExtend.setMessage(message);
             logger.error("Alert Plugin {} send error : not found plugin {}", pluginInstanceName, pluginName);
+            return alertResultExtend;
         }
 
         AlertInfo alertInfo = new AlertInfo();

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/Command.java
Patch:
@@ -131,6 +131,7 @@ public Command(
             WarningType warningType,
             int warningGroupId,
             Date scheduleTime,
+            String workerGroup,
             Priority processInstancePriority) {
         this.commandType = commandType;
         this.executorId = executorId;
@@ -143,6 +144,7 @@ public Command(
         this.failureStrategy = failureStrategy;
         this.startTime = new Date();
         this.updateTime = new Date();
+        this.workerGroup = workerGroup;
         this.processInstancePriority = processInstancePriority;
     }
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/utils/DependentExecute.java
Patch:
@@ -104,9 +104,7 @@ private DependResult calculateResultForTasks(DependentItem dependentItem,
             ProcessInstance processInstance = findLastProcessInterval(dependentItem.getDefinitionId(),
                                                     dateInterval);
             if(processInstance == null){
-                logger.error("cannot find the right process instance: definition id:{}, start:{}, end:{}",
-                       dependentItem.getDefinitionId(), dateInterval.getStartTime(), dateInterval.getEndTime() );
-                return DependResult.FAILED;
+                return DependResult.WAITING;
             }
             // need to check workflow for updates, so get all task and check the task state
             if(dependentItem.getDepTasks().equals(Constants.DEPENDENT_ALL)){

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessService.java
Patch:
@@ -412,6 +412,7 @@ public void createRecoveryWaitingThreadCommand(Command originCommand, ProcessIns
                     processInstance.getWarningType(),
                     processInstance.getWarningGroupId(),
                     processInstance.getScheduleTime(),
+                    processInstance.getWorkerGroup(),
                     processInstance.getProcessInstancePriority()
             );
             saveCommand(command);
@@ -987,6 +988,7 @@ public Command createSubProcessCommand(ProcessInstance parentProcessInstance,
                 parentProcessInstance.getWarningType(),
                 parentProcessInstance.getWarningGroupId(),
                 parentProcessInstance.getScheduleTime(),
+                task.getWorkerGroup(),
                 parentProcessInstance.getProcessInstancePriority()
         );
     }
@@ -1059,7 +1061,7 @@ public TaskInstance submitTaskInstanceToDB(TaskInstance taskInstance, ProcessIns
                         taskInstance.setRetryTimes(taskInstance.getRetryTimes() + 1 );
                     }
                     taskInstance.setEndTime(null);
-                    taskInstance.setStartTime(new Date());
+                    taskInstance.setStartTime(null);
                     taskInstance.setFlag(Flag.YES);
                     taskInstance.setHost(null);
                     taskInstance.setId(0);

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/runner/TaskExecuteThread.java
Patch:
@@ -45,6 +45,8 @@
 import java.util.*;
 import java.util.stream.Collectors;
 
+import static ch.qos.logback.classic.ClassicConstants.FINALIZE_SESSION_MARKER;
+
 
 /**
  *  task scheduler thread
@@ -132,7 +134,6 @@ public void run() {
 
             // task result process
             task.after();
-
             responseCommand.setStatus(task.getExitStatus().getCode());
             responseCommand.setEndTime(new Date());
             responseCommand.setProcessId(task.getProcessId());

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java
Patch:
@@ -193,9 +193,9 @@ public enum Status {
     BATCH_COPY_PROCESS_DEFINITION_ERROR(10159, "batch copy process definition error", "复制工作流错误"),
     BATCH_MOVE_PROCESS_DEFINITION_ERROR(10160, "batch move process definition error", "移动工作流错误"),
     QUERY_WORKFLOW_LINEAGE_ERROR(10161, "query workflow lineage error", "查询血缘失败"),
-    DELETE_PROCESS_DEFINITION_BY_ID_FAIL(10162, "delete process definition by id fail, for there are {0} process instances in executing using it", "删除工作流定义失败，有[{0}]个运行中的工作流实例正在使用"),
-    CHECK_TENANT_CODE_ERROR(10163, "Please enter the English tenant code", "请输入英文租户编码"),
-
+    QUERY_AUTHORIZED_AND_USER_CREATED_PROJECT_ERROR(10162, "query authorized and user created project error error", "查询授权的和用户创建的项目错误"),
+    DELETE_PROCESS_DEFINITION_BY_ID_FAIL(10163,"delete process definition by id fail, for there are {0} process instances in executing using it", "删除工作流定义失败，有[{0}]个运行中的工作流实例正在使用"),
+    CHECK_TENANT_CODE_ERROR(10164, "Please enter the English tenant code", "请输入英文租户编码"),
 
     UDF_FUNCTION_NOT_EXIST(20001, "UDF function not found", "UDF函数不存在"),
     UDF_FUNCTION_EXISTS(20002, "UDF function already exists", "UDF函数已存在"),

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/VarPoolUtils.java
Patch:
@@ -36,7 +36,7 @@ public static void setTaskNodeLocalParams(TaskNode taskNode, Map<String, Object>
         Map<String,Object> taskParams = JSONUtils.parseObject(taskParamsJson, HashMap.class);
 
         Object localParamsObject = taskParams.get("localParams");
-        if (null != localParamsObject && propToValue.size() >0) {
+        if (null != localParamsObject && null != propToValue && propToValue.size() > 0) {
             ArrayList<Object> localParams = (ArrayList)localParamsObject;
             for (int i = 0; i < localParams.size(); i++) {
                 Map<String,String> map = (Map)localParams.get(i);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java
Patch:
@@ -133,7 +133,7 @@ public enum Status {
     QUERY_TASK_INSTANCE_LOG_ERROR(10103, "view task instance log error", "查询任务实例日志错误"),
     DOWNLOAD_TASK_INSTANCE_LOG_FILE_ERROR(10104, "download task instance log file error", "下载任务日志文件错误"),
     CREATE_PROCESS_DEFINITION(10105, "create process definition", "创建工作流错误"),
-    VERIFY_PROCESS_DEFINITION_NAME_UNIQUE_ERROR(10106, "verify process definition name unique error", "工作流名称已存在"),
+    VERIFY_PROCESS_DEFINITION_NAME_UNIQUE_ERROR(10106, "verify process definition name unique error", "工作流定义名称已存在"),
     UPDATE_PROCESS_DEFINITION_ERROR(10107, "update process definition error", "更新工作流定义错误"),
     RELEASE_PROCESS_DEFINITION_ERROR(10108, "release process definition error", "上线工作流错误"),
     QUERY_DATAIL_OF_PROCESS_DEFINITION_ERROR(10109, "query datail of process definition error", "查询工作流详细信息错误"),

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterExecThread.java
Patch:
@@ -973,7 +973,7 @@ private void runProcess(){
         // submit start node
         submitPostNode(null);
         boolean sendTimeWarning = false;
-        while(!processInstance.isProcessInstanceStop()){
+        while(!processInstance.isProcessInstanceStop() && Stopper.isRunning()){
 
             // send warning email if process time out.
             if(!sendTimeWarning && checkProcessTimeOut(processInstance) ){

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterExecThread.java
Patch:
@@ -973,7 +973,7 @@ private void runProcess(){
         // submit start node
         submitPostNode(null);
         boolean sendTimeWarning = false;
-        while(!processInstance.isProcessInstanceStop()){
+        while(!processInstance.isProcessInstanceStop() && Stopper.isRunning()){
 
             // send warning email if process time out.
             if(!sendTimeWarning && checkProcessTimeOut(processInstance) ){

File: dolphinscheduler-service/src/test/java/org/apache/dolphinscheduler/service/zk/CuratorZookeeperClientTest.java
Patch:
@@ -59,9 +59,8 @@ public void testAfterPropertiesSet() throws Exception {
         zookeeperConfig.setDsRoot("/dolphinscheduler");
         zookeeperConfig.setMaxWaitTime(30000);
         zookeeperClient.setZookeeperConfig(zookeeperConfig);
-        System.out.println("start");
         zookeeperClient.afterPropertiesSet();
-        System.out.println("end");
+
         Assert.assertNotNull(zookeeperClient.getZkClient());
     }
 }
\ No newline at end of file

File: dolphinscheduler-service/src/test/java/org/apache/dolphinscheduler/service/zk/CuratorZookeeperClientTest.java
Patch:
@@ -59,9 +59,8 @@ public void testAfterPropertiesSet() throws Exception {
         zookeeperConfig.setDsRoot("/dolphinscheduler");
         zookeeperConfig.setMaxWaitTime(30000);
         zookeeperClient.setZookeeperConfig(zookeeperConfig);
-        System.out.println("start");
         zookeeperClient.afterPropertiesSet();
-        System.out.println("end");
+
         Assert.assertNotNull(zookeeperClient.getZkClient());
     }
 }
\ No newline at end of file

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java
Patch:
@@ -133,7 +133,7 @@ public enum Status {
     QUERY_TASK_INSTANCE_LOG_ERROR(10103, "view task instance log error", "查询任务实例日志错误"),
     DOWNLOAD_TASK_INSTANCE_LOG_FILE_ERROR(10104, "download task instance log file error", "下载任务日志文件错误"),
     CREATE_PROCESS_DEFINITION(10105, "create process definition", "创建工作流错误"),
-    VERIFY_PROCESS_DEFINITION_NAME_UNIQUE_ERROR(10106, "verify process definition name unique error", "工作流名称已存在"),
+    VERIFY_PROCESS_DEFINITION_NAME_UNIQUE_ERROR(10106, "verify process definition name unique error", "工作流定义名称已存在"),
     UPDATE_PROCESS_DEFINITION_ERROR(10107, "update process definition error", "更新工作流定义错误"),
     RELEASE_PROCESS_DEFINITION_ERROR(10108, "release process definition error", "上线工作流错误"),
     QUERY_DATAIL_OF_PROCESS_DEFINITION_ERROR(10109, "query datail of process definition error", "查询工作流详细信息错误"),

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java
Patch:
@@ -132,7 +132,7 @@ public enum Status {
     QUERY_TASK_INSTANCE_LOG_ERROR(10103,"view task instance log error", "查询任务实例日志错误"),
     DOWNLOAD_TASK_INSTANCE_LOG_FILE_ERROR(10104,"download task instance log file error", "下载任务日志文件错误"),
     CREATE_PROCESS_DEFINITION(10105,"create process definition", "创建工作流错误"),
-    VERIFY_PROCESS_DEFINITION_NAME_UNIQUE_ERROR(10106,"verify process definition name unique error", "工作流名称已存在"),
+    VERIFY_PROCESS_DEFINITION_NAME_UNIQUE_ERROR(10106,"verify process definition name unique error", "工作流定义名称已存在"),
     UPDATE_PROCESS_DEFINITION_ERROR(10107,"update process definition error", "更新工作流定义错误"),
     RELEASE_PROCESS_DEFINITION_ERROR(10108,"release process definition error", "上线工作流错误"),
     QUERY_DATAIL_OF_PROCESS_DEFINITION_ERROR(10109,"query datail of process definition error", "查询工作流详细信息错误"),

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java
Patch:
@@ -132,7 +132,7 @@ public enum Status {
     QUERY_TASK_INSTANCE_LOG_ERROR(10103,"view task instance log error", "查询任务实例日志错误"),
     DOWNLOAD_TASK_INSTANCE_LOG_FILE_ERROR(10104,"download task instance log file error", "下载任务日志文件错误"),
     CREATE_PROCESS_DEFINITION(10105,"create process definition", "创建工作流错误"),
-    VERIFY_PROCESS_DEFINITION_NAME_UNIQUE_ERROR(10106,"verify process definition name unique error", "工作流名称已存在"),
+    VERIFY_PROCESS_DEFINITION_NAME_UNIQUE_ERROR(10106,"verify process definition name unique error", "工作流定义名称已存在"),
     UPDATE_PROCESS_DEFINITION_ERROR(10107,"update process definition error", "更新工作流定义错误"),
     RELEASE_PROCESS_DEFINITION_ERROR(10108,"release process definition error", "上线工作流错误"),
     QUERY_DATAIL_OF_PROCESS_DEFINITION_ERROR(10109,"query datail of process definition error", "查询工作流详细信息错误"),

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProcessDefinitionServiceImpl.java
Patch:
@@ -223,7 +223,7 @@ public Map<String, Object> createProcessDefinition(User loginUser,
         // return processDefinition object with ID
         result.put(Constants.DATA_LIST, processDefineMapper.selectById(processDefine.getId()));
         putMsg(result, Status.SUCCESS);
-        result.put("processDefinitionId", processDefine.getId());
+        result.put(PROCESSDEFINITIONID, processDefine.getId());
         return result;
     }
 
@@ -438,7 +438,7 @@ public Map<String, Object> verifyProcessDefinitionName(User loginUser, String pr
         if (processDefinition == null) {
             putMsg(result, Status.SUCCESS);
         } else {
-            putMsg(result, Status.PROCESS_INSTANCE_EXIST, name);
+            putMsg(result, Status.VERIFY_PROCESS_DEFINITION_NAME_UNIQUE_ERROR, name);
         }
         return result;
     }

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/ProcessDefinitionControllerTest.java
Patch:
@@ -117,14 +117,14 @@ private void putMsg(Map<String, Object> result, Status status, Object... statusP
     public void testVerifyProcessDefinitionName() throws Exception {
 
         Map<String, Object> result = new HashMap<>();
-        putMsg(result, Status.PROCESS_INSTANCE_EXIST);
+        putMsg(result, Status.VERIFY_PROCESS_DEFINITION_NAME_UNIQUE_ERROR);
         String projectName = "test";
         String name = "dag_test";
 
         Mockito.when(processDefinitionService.verifyProcessDefinitionName(user, projectName, name)).thenReturn(result);
 
         Result response = processDefinitionController.verifyProcessDefinitionName(user, projectName, name);
-        Assert.assertEquals(Status.PROCESS_INSTANCE_EXIST.getCode(), response.getCode().intValue());
+        Assert.assertEquals(Status.VERIFY_PROCESS_DEFINITION_NAME_UNIQUE_ERROR.getCode(), response.getCode().intValue());
 
     }
 

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProcessDefinitionServiceTest.java
Patch:
@@ -627,7 +627,7 @@ public void testVerifyProcessDefinitionName() {
         Mockito.when(processDefineMapper.verifyByDefineName(project.getId(), "test_pdf")).thenReturn(getProcessDefinition());
         Map<String, Object> processExistRes = processDefinitionService.verifyProcessDefinitionName(loginUser,
                 "project_test1", "test_pdf");
-        Assert.assertEquals(Status.PROCESS_INSTANCE_EXIST, processExistRes.get(Constants.STATUS));
+        Assert.assertEquals(Status.VERIFY_PROCESS_DEFINITION_NAME_UNIQUE_ERROR, processExistRes.get(Constants.STATUS));
     }
 
     @Test

File: e2e/src/test/java/org/apache/dolphinscheduler/locator/security/TenantManageLocator.java
Patch:
@@ -35,9 +35,9 @@ public class TenantManageLocator{
 
     public static final By SUBMIT_BUTTON = By.xpath("//div[3]/button[2]/span");
 
-    public static final By DELETE_TENANT_BUTTON = By.xpath("//div[3]/div[1]/div/table/tr[2]/td[8]/span/button");
+    public static final By DELETE_TENANT_BUTTON = By.xpath("//table/tbody/tr[1]/td[8]/div/span/button/i");
 
-    public static final By CONFIRM_DELETE_TENANT_BUTTON = By.xpath("//div[2]/div/button[2]/span");
+    public static final By CONFIRM_DELETE_TENANT_BUTTON = By.xpath("//div[1]/div/button[2]/span");
 
-    public static final By TENANT_CODE_FIRST = By.xpath("//table/tr[2]/td[2]/span");
+    public static final By TENANT_CODE_FIRST = By.xpath("//table/tbody/tr[1]/td[2]/div");
 }

File: dolphinscheduler-alert/src/main/java/org/apache/dolphinscheduler/alert/utils/FuncUtils.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.alert.utils;
 
 import org.apache.dolphinscheduler.common.utils.StringUtils;
@@ -22,7 +23,7 @@ public class FuncUtils {
 
     public static String mkString(Iterable<String> list, String split) {
 
-        if (null == list || StringUtils.isEmpty(split)){
+        if (null == list || StringUtils.isEmpty(split)) {
             return null;
         }
 

File: e2e/src/test/java/org/apache/dolphinscheduler/data/security/TenantManageData.java
Patch:
@@ -25,12 +25,12 @@ public class TenantManageData {
     /**
      * Tenant Code
      */
-    public static final String TENANT_CODE = "selenium_tenant_code_1";
+    public static final String TENANT_CODE = "seleniumTenantCode1";
 
     /**
      * Tenant Name
      */
-    public static final String TENANT_NAME = "selenium_tenant_Name";
+    public static final String TENANT_NAME = "seleniumTenantName";
 
     /**
      * Queue

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ResourcesService.java
Patch:
@@ -318,7 +318,7 @@ public Result updateResource(User loginUser,
             return result;
         }
 
-        if (name.equals(resource.getAlias()) && desc.equals(resource.getDescription())) {
+        if (file == null && name.equals(resource.getAlias()) && desc.equals(resource.getDescription())) {
             putMsg(result, Status.SUCCESS);
             return result;
         }

File: e2e/src/test/java/org/apache/dolphinscheduler/data/security/TenantManageData.java
Patch:
@@ -25,7 +25,7 @@ public class TenantManageData {
     /**
      * Tenant Code
      */
-    public static final String TENANT_CODE = "seleniumTenantCode_1";
+    public static final String TENANT_CODE = "seleniumTenantCode1";
 
     /**
      * Tenant Name

File: e2e/src/test/java/org/apache/dolphinscheduler/data/security/TenantManageData.java
Patch:
@@ -25,12 +25,12 @@ public class TenantManageData {
     /**
      * Tenant Code
      */
-    public static final String TENANT_CODE = "selenium_tenant_code_1";
+    public static final String TENANT_CODE = "seleniumTenantCode_1";
 
     /**
      * Tenant Name
      */
-    public static final String TENANT_NAME = "selenium_tenant_Name";
+    public static final String TENANT_NAME = "seleniumTenantName";
 
     /**
      * Queue

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/TaskRecordController.java
Patch:
@@ -22,11 +22,13 @@
 import org.apache.dolphinscheduler.api.utils.Result;
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.dao.entity.User;
+
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.http.HttpStatus;
 import org.springframework.web.bind.annotation.*;
+
 import springfox.documentation.annotations.ApiIgnore;
 
 import java.util.Map;
@@ -59,7 +61,7 @@ public class TaskRecordController extends BaseController {
      * @param taskDate    task date
      * @param startTime   start time
      * @param endTime     end time
-     * @param pageNo      page numbere
+     * @param pageNo      page number
      * @param pageSize    page size
      * @return task record list
      */

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java
Patch:
@@ -193,7 +193,9 @@ public enum Status {
     BATCH_COPY_PROCESS_DEFINITION_ERROR(10159, "batch copy process definition error", "复制工作流错误"),
     BATCH_MOVE_PROCESS_DEFINITION_ERROR(10160, "batch move process definition error", "移动工作流错误"),
     QUERY_WORKFLOW_LINEAGE_ERROR(10161, "query workflow lineage error", "查询血缘失败"),
-    DELETE_PROCESS_DEFINITION_BY_ID_FAIL(10162,"delete process definition by id fail, for there are {0} process instances in executing using it", "删除工作流定义失败，有[{0}]个运行中的工作流实例正在使用"),
+    DELETE_PROCESS_DEFINITION_BY_ID_FAIL(10162, "delete process definition by id fail, for there are {0} process instances in executing using it", "删除工作流定义失败，有[{0}]个运行中的工作流实例正在使用"),
+    CHECK_TENANT_CODE_ERROR(10163, "Please enter the English tenant code", "请输入英文租户编码"),
+
 
     UDF_FUNCTION_NOT_EXIST(20001, "UDF function not found", "UDF函数不存在"),
     UDF_FUNCTION_EXISTS(20002, "UDF function already exists", "UDF函数已存在"),

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java
Patch:
@@ -35,7 +35,7 @@ public enum Status {
     USER_NAME_NULL(10004,"user name is null", "用户名不能为空"),
     HDFS_OPERATION_ERROR(10006, "hdfs operation error", "hdfs操作错误"),
     TASK_INSTANCE_NOT_FOUND(10008, "task instance not found", "任务实例不存在"),
-    TENANT_NAME_EXIST(10009, "tenant code already exists", "租户编码不能为空"),
+    TENANT_NAME_EXIST(10009, "tenant code {0} already exists", "租户编码[{0}]已存在"),
     USER_NOT_EXIST(10010, "user {0} not exists", "用户[{0}]不存在"),
     ALERT_GROUP_NOT_EXIST(10011, "alarm group not found", "告警组不存在"),
     ALERT_GROUP_EXIST(10012, "alarm group already exists", "告警组名称已存在"),

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/TenantService.java
Patch:
@@ -327,11 +327,11 @@ public Map<String, Object> queryTenantList(String tenantCode) {
    * @return true if tenant code can user, otherwise return false
    */
   public Result verifyTenantCode(String tenantCode) {
-    Result result=new Result();
+    Result result = new Result();
     if (checkTenantExists(tenantCode)) {
       logger.error("tenant {} has exist, can't create again.", tenantCode);
-      putMsg(result, Status.TENANT_NAME_EXIST);
-    }else{
+      putMsg(result, Status.TENANT_NAME_EXIST, tenantCode);
+    } else {
       putMsg(result, Status.SUCCESS);
     }
     return result;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/processor/TaskResponseProcessor.java
Patch:
@@ -90,7 +90,8 @@ public void process(Channel channel, Command command) {
                 responseCommand.getEndTime(),
                 responseCommand.getProcessId(),
                 responseCommand.getAppIds(),
-                responseCommand.getTaskInstanceId());
+                responseCommand.getTaskInstanceId(),
+                responseCommand.getVarPool());
 
         taskResponseService.addResponse(taskResponseEvent);
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/processor/queue/TaskResponseService.java
Patch:
@@ -139,7 +139,8 @@ private void persist(TaskResponseEvent taskResponseEvent){
                         taskResponseEvent.getEndTime(),
                         taskResponseEvent.getProcessId(),
                         taskResponseEvent.getAppIds(),
-                        taskResponseEvent.getTaskInstanceId());
+                        taskResponseEvent.getTaskInstanceId(),
+                        taskResponseEvent.getVarPool());
                 break;
             default:
                 throw new IllegalArgumentException("invalid event type : " + event);

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/runner/TaskExecuteThread.java
Patch:
@@ -155,6 +155,7 @@ public void run() {
             responseCommand.setEndTime(new Date());
             responseCommand.setProcessId(task.getProcessId());
             responseCommand.setAppIds(task.getAppIds());
+            responseCommand.setVarPool(task.getVarPool());
             logger.info("task instance id : {},task final status : {}", taskExecutionContext.getTaskInstanceId(), task.getExitStatus());
         } catch (Exception e) {
             logger.error("task scheduler failure", e);

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/WorkerGroupServiceTest.java
Patch:
@@ -79,7 +79,7 @@ public void init(){
 
         Mockito.when(zookeeperCachedOperator.getChildrenKeys(workerPath + "/default")).thenReturn(defaultIpList);
 
-        Mockito.when(zookeeperCachedOperator.get(workerPath + "/default" + "/" + defaultIpList.get(0))).thenReturn("0.02,0.23,0.03,2020-05-08 11:24:14,2020-05-08 14:22:24");
+        Mockito.when(zookeeperCachedOperator.get(workerPath + "/default" + "/" + defaultIpList.get(0))).thenReturn("0.01,0.17,0.03,25.83,8.0,1.0,2020-07-21 11:17:59,2020-07-21 14:39:20,0,13238");
     }
 
     /**
@@ -115,4 +115,4 @@ private List<ProcessInstance> getProcessInstanceList(){
         return processInstances;
     }
 
-}
\ No newline at end of file
+}

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProcessDefinitionServiceImpl.java
Patch:
@@ -845,7 +845,7 @@ private Map<String, Object> getCreateProcessResult(User loginUser,
         try {
             createProcessResult = createProcessDefinition(loginUser
                     , currentProjectName,
-                    processDefinitionName + "_import_" + System.currentTimeMillis(),
+                    processDefinitionName + "_import_" + DateUtils.getCurrentTimeStamp(),
                     importProcessParam,
                     processMeta.getProcessDefinitionDescription(),
                     processMeta.getProcessDefinitionLocations(),
@@ -1433,7 +1433,7 @@ private Map<String, Object> copyProcessDefinition(User loginUser,
             return createProcessDefinition(
                     loginUser,
                     targetProject.getName(),
-                    processDefinition.getName() + "_copy_" + System.currentTimeMillis(),
+                    processDefinition.getName() + "_copy_" + DateUtils.getCurrentTimeStamp(),
                     processDefinition.getProcessDefinitionJson(),
                     processDefinition.getDescription(),
                     processDefinition.getLocations(),

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/sql/SqlTask.java
Patch:
@@ -262,7 +262,7 @@ private void resultProcess(ResultSet resultSet) throws Exception{
         while (rowCount < LIMIT && resultSet.next()) {
             JSONObject mapOfColValues = new JSONObject(true);
             for (int i = 1; i <= num; i++) {
-                mapOfColValues.put(md.getColumnName(i), resultSet.getObject(i));
+                mapOfColValues.put(md.getColumnLabel(i), resultSet.getObject(i));
             }
             resultJSONArray.add(mapOfColValues);
             rowCount++;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/processor/TaskCallbackService.java
Patch:
@@ -26,6 +26,7 @@
 import org.apache.dolphinscheduler.common.utils.CollectionUtils;
 import org.apache.dolphinscheduler.remote.NettyRemotingClient;
 import org.apache.dolphinscheduler.remote.command.Command;
+import org.apache.dolphinscheduler.remote.command.CommandType;
 import org.apache.dolphinscheduler.remote.config.NettyClientConfig;
 import org.apache.dolphinscheduler.remote.utils.Host;
 import org.apache.dolphinscheduler.server.registry.ZookeeperRegistryCenter;
@@ -69,6 +70,8 @@ public class TaskCallbackService {
     public TaskCallbackService(){
         final NettyClientConfig clientConfig = new NettyClientConfig();
         this.nettyRemotingClient = new NettyRemotingClient(clientConfig);
+        this.nettyRemotingClient.registerProcessor(CommandType.DB_TASK_ACK, new DBTaskAckProcessor());
+        this.nettyRemotingClient.registerProcessor(CommandType.DB_TASK_RESPONSE, new DBTaskResponseProcessor());
     }
 
     /**

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/master/processor/queue/TaskResponseServiceTest.java
Patch:
@@ -44,7 +44,7 @@ public class TaskResponseServiceTest {
     @Test
     public void testAdd(){
         TaskResponseEvent taskResponseEvent = TaskResponseEvent.newAck(ExecutionStatus.RUNNING_EXEUTION, new Date(),
-                "", "", "", 1);
+                "", "", "", 1,null);
         taskResponseService.addResponse(taskResponseEvent);
         Assert.assertTrue(taskResponseService.getEventQueue().size() == 1);
         try {
@@ -58,7 +58,7 @@ public void testAdd(){
     @Test
     public void testStop(){
         TaskResponseEvent taskResponseEvent = TaskResponseEvent.newAck(ExecutionStatus.RUNNING_EXEUTION, new Date(),
-                "", "", "", 1);
+                "", "", "", 1,null);
         taskResponseService.addResponse(taskResponseEvent);
         taskResponseService.stop();
         Assert.assertTrue(taskResponseService.getEventQueue().size() == 0);

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/utils/LogUtils.java
Patch:
@@ -70,7 +70,7 @@ public static String getTaskLogPath(TaskInstance taskInstance) {
      * get task log path by TaskExecutionContext
      */
     public static String getTaskLogPath(TaskExecutionContext taskExecutionContext) {
-        return getTaskLogPath(taskExecutionContext.getProcessId(), taskExecutionContext.getProcessInstanceId(), taskExecutionContext.getTaskInstanceId());
+        return getTaskLogPath(taskExecutionContext.getProcessDefineId(), taskExecutionContext.getProcessInstanceId(), taskExecutionContext.getTaskInstanceId());
     }
 
 }

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/utils/LogUtils.java
Patch:
@@ -70,7 +70,7 @@ public static String getTaskLogPath(TaskInstance taskInstance) {
      * get task log path by TaskExecutionContext
      */
     public static String getTaskLogPath(TaskExecutionContext taskExecutionContext) {
-        return getTaskLogPath(taskExecutionContext.getProcessId(), taskExecutionContext.getProcessInstanceId(), taskExecutionContext.getTaskInstanceId());
+        return getTaskLogPath(taskExecutionContext.getProcessDefineId(), taskExecutionContext.getProcessInstanceId(), taskExecutionContext.getTaskInstanceId());
     }
 
 }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/TaskInstanceController.java
Patch:
@@ -133,7 +133,7 @@ public Result queryTaskListPaging(@ApiIgnore @RequestAttribute(value = Constants
     @PostMapping(value = "/force-success")
     @ResponseStatus(HttpStatus.OK)
     @ApiException(FORCE_TASK_SUCCESS_ERROR)
-    public Result forceSingleTaskSuccess(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,
+    public Result<Object> forceSingleTaskSuccess(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,
                                          @ApiParam(name = "projectName", value = "PROJECT_NAME", required = true) @PathVariable String projectName,
                                          @RequestParam(value = "taskInstanceId") Integer taskInstanceId) {
         String userNameReplace = StringUtils.replaceNRTtoUnderline(loginUser.getUserName());

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/utils/DagHelper.java
Patch:
@@ -278,13 +278,12 @@ public static Collection<String> getStartVertex(String parentNodeName, DAG<Strin
         }
         Collection<String> startVertexs = null;
         if (StringUtils.isNotEmpty(parentNodeName)) {
+            startVertexs = dag.getSubsequentNodes(parentNodeName);
+            // if task is CONDITION node
             TaskNode task = dag.getNode(parentNodeName);
             if (task.isConditionsTask() && completeTaskList.containsKey(parentNodeName)) {
                 startVertexs = parseConditionTask(parentNodeName, task, completeTaskList);
             }
-            else {
-                startVertexs = dag.getSubsequentNodes(parentNodeName);
-            }
         } else {
             startVertexs = dag.getBeginNode();
         }

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/ConditionsTaskExecThread.java
Patch:
@@ -27,6 +27,8 @@
 import org.apache.dolphinscheduler.common.utils.LoggerUtils;
 import org.apache.dolphinscheduler.common.utils.NetUtils;
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
+import org.apache.dolphinscheduler.server.utils.LogUtils;
+
 import org.slf4j.LoggerFactory;
 
 import java.util.ArrayList;
@@ -123,7 +125,7 @@ private void updateTaskState() {
     }
 
     private void initTaskParameters() {
-        this.taskInstance.setLogPath(getTaskLogPath(taskInstance));
+        this.taskInstance.setLogPath(LogUtils.getTaskLogPath(taskInstance));
         this.taskInstance.setHost(NetUtils.getHost() + Constants.COLON + masterConfig.getListenPort());
         taskInstance.setState(ExecutionStatus.RUNNING_EXECUTION);
         taskInstance.setStartTime(new Date());

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/Constants.java
Patch:
@@ -14,6 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.apache.dolphinscheduler.common;
 
 import org.apache.dolphinscheduler.common.enums.ExecutionStatus;
@@ -27,7 +28,7 @@
 public final class Constants {
 
     private Constants() {
-        throw new IllegalStateException("Constants class");
+        throw new UnsupportedOperationException("Construct Constants");
     }
 
     /**

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterExecThread.java
Patch:
@@ -405,7 +405,7 @@ private void initTaskQueue(){
             if(task.isTaskComplete()){
                 completeTaskList.put(task.getName(), task);
             }
-            if(task.getState().typeIsFailure() && !task.taskCanRetry()){
+            if (task.getState().typeIsFailure() && !task.taskCanRetry() && !task.isConditionsTask()) {
                 errorTaskList.put(task.getName(), task);
             }
         }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java
Patch:
@@ -194,7 +194,7 @@ public enum Status {
     BATCH_MOVE_PROCESS_DEFINITION_ERROR(10160, "batch move process definition error", "移动工作流错误"),
     QUERY_WORKFLOW_LINEAGE_ERROR(10161, "query workflow lineage error", "查询血缘失败"),
     FORCE_TASK_SUCCESS_ERROR(10162, "force task success error", "强制成功任务实例错误"),
-    TASK_INSTANCE_STATE_OPETATION_ERROR(10163, "the status of task instance {0} is {1},Cannot perform force success operation", "任务实例[{0}]的状态是[{1}]，无法执行强制成功操作"),
+    TASK_INSTANCE_STATE_OPERATION_ERROR(10163, "the status of task instance {0} is {1},Cannot perform force success operation", "任务实例[{0}]的状态是[{1}]，无法执行强制成功操作"),
 
 
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/TaskInstanceService.java
Patch:
@@ -174,7 +174,7 @@ public Map<String, Object> forceSingleTaskSuccess(User loginUser, String project
 
         // check whether the task instance state type is failure
         if (!task.getState().typeIsFailure()) {
-            putMsg(result, Status.TASK_INSTANCE_STATE_OPETATION_ERROR, taskInstanceId, task.getState().toString());
+            putMsg(result, Status.TASK_INSTANCE_STATE_OPERATION_ERROR, taskInstanceId, task.getState().toString());
             return result;
         }
 

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/TaskInstanceServiceTest.java
Patch:
@@ -237,7 +237,7 @@ public void forceSingleTaskSuccess() {
         task.setState(ExecutionStatus.SUCCESS);
         when(taskInstanceMapper.selectById(1)).thenReturn(task);
         Map<String, Object> taskStateErrorRes = taskInstanceService.forceSingleTaskSuccess(user, projectName, taskId);
-        Assert.assertEquals(Status.TASK_INSTANCE_STATE_OPETATION_ERROR, taskStateErrorRes.get(Constants.STATUS));
+        Assert.assertEquals(Status.TASK_INSTANCE_STATE_OPERATION_ERROR, taskStateErrorRes.get(Constants.STATUS));
 
         // test success
         task.setState(ExecutionStatus.FAILURE);

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/JSONUtils.java
Patch:
@@ -32,7 +32,7 @@
 import java.util.*;
 
 import static com.fasterxml.jackson.databind.DeserializationFeature.*;
-
+import static com.fasterxml.jackson.databind.MapperFeature.REQUIRE_SETTERS_FOR_GETTERS;
 
 /**
  * json utils
@@ -48,6 +48,7 @@ public class JSONUtils {
             .configure(FAIL_ON_UNKNOWN_PROPERTIES, false)
             .configure(ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT, true)
             .configure(READ_UNKNOWN_ENUM_VALUES_AS_NULL, true)
+            .configure(REQUIRE_SETTERS_FOR_GETTERS, true)
             .setTimeZone(TimeZone.getDefault())
             ;
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ExecutorService.java
Patch:
@@ -635,7 +635,7 @@ private Map<String, Object> checkResultAndAuth(User loginUser, String projectNam
      */
     private boolean checkValidForcedSuccessTask(int processInstanceId) {
         List<Integer> forcedSuccessList = processService.findTaskIdByInstanceState(processInstanceId, ExecutionStatus.FORCED_SUCCESS);
-        if (forcedSuccessList != null && forcedSuccessList.size() > 0) {
+        if (forcedSuccessList != null && !forcedSuccessList.isEmpty()) {
             return true;
         }
 

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessService.java
Patch:
@@ -790,7 +790,7 @@ public boolean haveForcedSuccessInSubProcess(int taskInstanceId) {
         List<Integer> forcedSuccessList = this.findTaskIdInSubProcessByStatusAndType(taskInstanceId,
                 new ExecutionStatus[]{ExecutionStatus.FORCED_SUCCESS},
                 null);
-        if (forcedSuccessList != null && forcedSuccessList.size() > 0) {
+        if (forcedSuccessList != null && !forcedSuccessList.isEmpty()) {
             return true;
         }
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/TaskInstanceController.java
Patch:
@@ -136,7 +136,7 @@ public Result forceSingleTaskSuccess(@ApiIgnore @RequestAttribute(value = Consta
                                          @ApiParam(name = "projectName", value = "PROJECT_NAME", required = true) @PathVariable String projectName,
                                          @RequestParam(value = "taskInstanceId") Integer taskInstanceId) {
         logger.info("force task success, login user: {}, project:{}, task instance id:{}",
-                loginUser.getUserName(), projectName, taskInstanceId);
+                loginUser.getUserName(), projectName.replaceAll("[\n|\r|\t]", "_"), taskInstanceId);
         Map<String, Object> result = taskInstanceService.forceSingleTaskSuccess(loginUser, projectName, taskInstanceId);
         return returnDataList(result);
     }

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/ExecutionStatus.java
Patch:
@@ -55,7 +55,7 @@ public enum ExecutionStatus {
     KILL(9, "kill"),
     WAITTING_THREAD(10, "waiting thread"),
     WAITTING_DEPEND(11, "waiting depend node complete"),
-    DELAY_EXECUTION(12, "delay execution")，
+    DELAY_EXECUTION(12, "delay execution"),
     FORCED_SUCCESS(13, "forced success");
 
     ExecutionStatus(int code, String descp) {

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/processor/queue/TaskResponseService.java
Patch:
@@ -108,6 +108,7 @@ public void run() {
                     TaskResponseEvent taskResponseEvent = eventQueue.take();
                     persist(taskResponseEvent);
                 } catch (InterruptedException e){
+                    Thread.currentThread().interrupt();
                     break;
                 } catch (Exception e){
                     logger.error("persist task error",e);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProcessDefinitionService.java
Patch:
@@ -1305,7 +1305,7 @@ public Map<String, Object> viewTree(Integer processId, Integer limit) throws Exc
                     ProcessInstance processInstance = processInstanceList.get(i);
                     TaskInstance taskInstance = taskInstanceMapper.queryByInstanceIdAndName(processInstance.getId(), nodeName);
                     if (taskInstance == null) {
-                        treeViewDto.getInstances().add(new Instance(-1, "not running", "null"));
+                        treeViewDto.getInstances().add(new Instance(-1, "not running", null));
                     } else {
                         Date startTime = taskInstance.getStartTime() == null ? new Date() : taskInstance.getStartTime();
                         Date endTime = taskInstance.getEndTime() == null ? new Date() : taskInstance.getEndTime();

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProcessDefinitionService.java
Patch:
@@ -1305,7 +1305,7 @@ public Map<String, Object> viewTree(Integer processId, Integer limit) throws Exc
                     ProcessInstance processInstance = processInstanceList.get(i);
                     TaskInstance taskInstance = taskInstanceMapper.queryByInstanceIdAndName(processInstance.getId(), nodeName);
                     if (taskInstance == null) {
-                        treeViewDto.getInstances().add(new Instance(-1, "not running", "null"));
+                        treeViewDto.getInstances().add(new Instance(-1, "not running", null));
                     } else {
                         Date startTime = taskInstance.getStartTime() == null ? new Date() : taskInstance.getStartTime();
                         Date endTime = taskInstance.getEndTime() == null ? new Date() : taskInstance.getEndTime();

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/AccessTokenService.java
Patch:
@@ -120,9 +120,11 @@ public Map<String, Object> createToken(User loginUser, int userId, String expire
      */
     public Map<String, Object> generateToken(User loginUser, int userId, String expireTime) {
         Map<String, Object> result = new HashMap<>(5);
-        if(check(result, !isAdmin(loginUser), Status.USER_NO_OPERATION_PERM)){
+        if (!hasPerm(loginUser,userId)){
+            putMsg(result, Status.USER_NO_OPERATION_PERM);
             return result;
         }
+
         String token = EncryptionUtils.getMd5(userId + expireTime + String.valueOf(System.currentTimeMillis()));
         result.put(Constants.DATA_LIST, token);
         putMsg(result, Status.SUCCESS);

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/registry/ZookeeperNodeManager.java
Patch:
@@ -151,10 +151,10 @@ protected void dataChanged(CuratorFramework client, TreeCacheEvent event, String
 
         private String parseGroup(String path){
             String[] parts = path.split("\\/");
-            if(parts.length != 6){
+            if (parts.length < 6) {
                 throw new IllegalArgumentException(String.format("worker group path : %s is not valid, ignore", path));
             }
-            String group = parts[4];
+            String group = parts[parts.length - 2];
             return group;
         }
     }

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/DataAnalysisServiceTest.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.apache.dolphinscheduler.api.enums.Status;
 import org.apache.dolphinscheduler.api.service.impl.DataAnalysisServiceImpl;
+import org.apache.dolphinscheduler.api.service.impl.ProjectServiceImpl;
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.CommandType;
 import org.apache.dolphinscheduler.common.enums.ExecutionStatus;
@@ -59,7 +60,7 @@ public class DataAnalysisServiceTest {
     ProjectMapper projectMapper;
 
     @Mock
-    ProjectService projectService;
+    ProjectServiceImpl projectService;
 
     @Mock
     ProcessInstanceMapper processInstanceMapper;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/registry/ZookeeperNodeManager.java
Patch:
@@ -155,10 +155,10 @@ protected void dataChanged(CuratorFramework client, TreeCacheEvent event, String
 
         private String parseGroup(String path){
             String[] parts = path.split("\\/");
-            if(parts.length != 6){
+            if(parts.length < 6){
                 throw new IllegalArgumentException(String.format("worker group path : %s is not valid, ignore", path));
             }
-            String group = parts[4];
+            String group = parts[parts.length - 2];
             return group;
         }
     }

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/registry/ZookeeperNodeManager.java
Patch:
@@ -155,10 +155,10 @@ protected void dataChanged(CuratorFramework client, TreeCacheEvent event, String
 
         private String parseGroup(String path){
             String[] parts = path.split("\\/");
-            if(parts.length != 6){
+            if(parts.length < 6){
                 throw new IllegalArgumentException(String.format("worker group path : %s is not valid, ignore", path));
             }
-            String group = parts[4];
+            String group = parts[parts.length - 2];
             return group;
         }
     }

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterExecThread.java
Patch:
@@ -667,12 +667,10 @@ private DependResult isTaskDepsComplete(String taskName) {
         List<String> depNameList = taskNode.getDepList();
         for(String depsNode : depNameList ){
             if(!dag.containsNode(depsNode)
+                    || skipTaskNodeList.containsKey(depsNode)
                     || forbiddenTaskList.containsKey(depsNode)){
                 continue;
             }
-            if(skipTaskNodeList.containsKey(depsNode)){
-                return DependResult.FAILED;
-            }
             // all the dependencies must be completed
             if(!completeTaskList.containsKey(depsNode)){
                 return DependResult.WAITING;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProcessInstanceController.java
Patch:
@@ -370,7 +370,7 @@ public Result batchDeleteProcessInstanceByIds(@RequestAttribute(value = Constant
         logger.info("delete process instance by ids, login user:{}, project name:{}, process instance ids :{}",
                 loginUser.getUserName(), projectName, processInstanceIds);
         // task queue
-        Map<String, Object> result = new HashMap<>(5);
+        Map<String, Object> result = new HashMap<>();
         List<String> deleteFailedIdList = new ArrayList<>();
         if (StringUtils.isNotEmpty(processInstanceIds)) {
             String[] processInstanceIdArray = processInstanceIds.split(",");

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/DataSourceService.java
Patch:
@@ -88,7 +88,7 @@ public class DataSourceService extends BaseService{
      */
     public Map<String, Object> createDataSource(User loginUser, String name, String desc, DbType type, String parameter) {
 
-        Map<String, Object> result = new HashMap<>(5);
+        Map<String, Object> result = new HashMap<>();
         // check name can use or not
         if (checkName(name)) {
             putMsg(result, Status.DATASOURCE_EXIST);
@@ -340,7 +340,7 @@ private void handlePasswd(List<DataSource> dataSourceList) {
      * @return data source list page
      */
     public Map<String, Object> queryDataSourceList(User loginUser, Integer type) {
-        Map<String, Object> result = new HashMap<>(5);
+        Map<String, Object> result = new HashMap<>();
 
         List<DataSource> datasourceList;
 
@@ -674,7 +674,7 @@ public Map<String, Object> unauthDatasource(User loginUser, Integer userId) {
      * @return authorized result code
      */
     public Map<String, Object> authedDatasource(User loginUser, Integer userId) {
-        Map<String, Object> result = new HashMap<>(5);
+        Map<String, Object> result = new HashMap<>();
 
         if (!isAdmin(loginUser)) {
             putMsg(result, Status.USER_NO_OPERATION_PERM);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/SchedulerService.java
Patch:
@@ -452,7 +452,7 @@ public Map<String, Object> querySchedule(User loginUser, String projectName, Int
      * @return schedule list
      */
     public Map<String, Object> queryScheduleList(User loginUser, String projectName) {
-        Map<String, Object> result = new HashMap<>(5);
+        Map<String, Object> result = new HashMap<>();
         Project project = projectMapper.queryByName(projectName);
 
         // check project auth
@@ -534,7 +534,7 @@ private boolean checkValid(Map<String, Object> result, boolean bool, Status stat
      */
     public Map<String, Object> deleteScheduleById(User loginUser, String projectName, Integer scheduleId) {
 
-        Map<String, Object> result = new HashMap<>(5);
+        Map<String, Object> result = new HashMap<>();
         Project project = projectMapper.queryByName(projectName);
 
         Map<String, Object> checkResult = projectService.checkProjectAndAuth(loginUser, project, projectName);
@@ -583,7 +583,7 @@ public Map<String, Object> deleteScheduleById(User loginUser, String projectName
      * @return the next five fire time
      */
     public Map<String,Object> previewSchedule(User loginUser, String projectName, String schedule) {
-        Map<String, Object> result = new HashMap<>(5);
+        Map<String, Object> result = new HashMap<>();
         CronExpression cronExpression;
         ScheduleParam scheduleParam = JSONUtils.parseObject(schedule, ScheduleParam.class);
         Date now = new Date();

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/TaskInstanceService.java
Patch:
@@ -83,7 +83,7 @@ public Map<String,Object> queryTaskListPaging(User loginUser, String projectName
                                                   Integer processInstanceId, String taskName, String executorName, String startDate,
                                                   String endDate, String searchVal, ExecutionStatus stateType,String host,
                                                   Integer pageNo, Integer pageSize) {
-        Map<String, Object> result = new HashMap<>(5);
+        Map<String, Object> result = new HashMap<>();
         Project project = projectMapper.queryByName(projectName);
 
         Map<String, Object> checkResult = projectService.checkProjectAndAuth(loginUser, project, projectName);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/UdfFuncService.java
Patch:
@@ -151,7 +151,7 @@ private boolean checkUdfFuncNameExists(String name){
      */
     public Map<String, Object> queryUdfFuncDetail(int id) {
 
-        Map<String, Object> result = new HashMap<>(5);
+        Map<String, Object> result = new HashMap<>();
         UdfFunc udfFunc = udfFuncMapper.selectById(id);
         if (udfFunc == null) {
             putMsg(result, Status.RESOURCE_NOT_EXIST);
@@ -247,7 +247,7 @@ public Map<String, Object> updateUdfFunc(int udfFuncId,
      * @return udf function list page
      */
     public Map<String, Object> queryUdfFuncListPaging(User loginUser, String searchVal, Integer pageNo, Integer pageSize) {
-        Map<String, Object> result = new HashMap<>(5);
+        Map<String, Object> result = new HashMap<>();
 
 
         PageInfo pageInfo = new PageInfo<Resource>(pageNo, pageSize);
@@ -286,7 +286,7 @@ private IPage<UdfFunc> getUdfFuncsPage(User loginUser, String searchVal, Integer
      * @return resource list
      */
     public Map<String, Object> queryResourceList(User loginUser, Integer type) {
-        Map<String, Object> result = new HashMap<>(5);
+        Map<String, Object> result = new HashMap<>();
         List<UdfFunc> udfFuncList = udfFuncMapper.getUdfFuncByType(loginUser.getId(), type);
 
         result.put(Constants.DATA_LIST, udfFuncList);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/WorkerGroupService.java
Patch:
@@ -63,7 +63,7 @@ public Map<String,Object> queryAllGroupPaging(User loginUser, Integer pageNo, In
         // list to index
         Integer toIndex = (pageNo - 1) * pageSize + pageSize;
 
-        Map<String, Object> result = new HashMap<>(5);
+        Map<String, Object> result = new HashMap<>();
         if (checkAdmin(loginUser, result)) {
             return result;
         }

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/AlertGroupServiceTest.java
Patch:
@@ -76,7 +76,7 @@ public void after(){
 
 
     @Test
-    public  void testQueryAlertgroup(){
+    public  void testQueryAlertGroup(){
 
         Mockito.when(alertGroupMapper.queryAllGroupList()).thenReturn(getList());
         HashMap<String, Object> result= alertGroupService.queryAlertgroup();

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ExecutorServiceTest.java
Patch:
@@ -54,7 +54,7 @@ public void startCheckByProcessDefinedId(){
     @Test
     public void putMsgWithParamsTest() {
 
-        Map<String,Object> map = new HashMap<>(5);
+        Map<String,Object> map = new HashMap<>();
         putMsgWithParams(map, Status.PROJECT_ALREADY_EXISTS);
 
         logger.info(map.toString());

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/TaskInstanceServiceTest.java
Patch:
@@ -78,7 +78,7 @@ public void queryTaskListPaging(){
 
         String projectName = "project_test1";
         User loginUser = getAdminUser();
-        Map<String, Object> result = new HashMap<>(5);
+        Map<String, Object> result = new HashMap<>();
         putMsg(result, Status.PROJECT_NOT_FOUNT, projectName);
 
         //project auth fail

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/registry/WorkerRegistry.java
Patch:
@@ -152,7 +152,7 @@ private Set<String> getWorkerZkPaths() {
             // trim and lower case is need
             workerZkPathBuilder.append(workGroup.trim().toLowerCase()).append(SLASH);
             workerZkPathBuilder.append(address);
-            workerZkPathBuilder.append(weight).append(SLASH);
+            workerZkPathBuilder.append(weight);
             workerZkPaths.add(workerZkPathBuilder.toString());
         }
         return workerZkPaths;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/dispatch/host/RandomHostManager.java
Patch:
@@ -38,7 +38,7 @@ public class RandomHostManager extends CommonHostManager {
      * set round robin
      */
     public RandomHostManager(){
-        this.selector = new RandomSelector<>();
+        this.selector = new RandomSelector();
     }
 
     @Override

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/dispatch/host/RoundRobinHostManager.java
Patch:
@@ -38,7 +38,7 @@ public class RoundRobinHostManager extends CommonHostManager {
      * set round robin
      */
     public RoundRobinHostManager(){
-        this.selector = new RoundRobinSelector<>();
+        this.selector = new RoundRobinSelector();
     }
 
     @Override

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/upgrade/DolphinSchedulerManager.java
Patch:
@@ -117,6 +117,8 @@ public void upgradeDolphinScheduler() throws Exception{
                     upgradeDao.upgradeDolphinScheduler(schemaDir);
                     if ("1.3.0".equals(schemaVersion)) {
                         upgradeDao.upgradeDolphinSchedulerWorkerGroup();
+                    } else if ("1.3.2".equals(schemaVersion)) {
+                        upgradeDao.upgradeDolphinSchedulerResourceList();
                     }
                     version = schemaVersion;
                 }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProcessDefinitionService.java
Patch:
@@ -38,6 +38,7 @@
 import org.apache.dolphinscheduler.common.model.TaskNodeRelation;
 import org.apache.dolphinscheduler.common.process.ProcessDag;
 import org.apache.dolphinscheduler.common.process.Property;
+import org.apache.dolphinscheduler.common.process.ResourceInfo;
 import org.apache.dolphinscheduler.common.task.AbstractParameters;
 import org.apache.dolphinscheduler.common.thread.Stopper;
 import org.apache.dolphinscheduler.common.utils.*;
@@ -176,7 +177,7 @@ private String getResourceIds(ProcessData processData) {
             String taskParameter = taskNode.getParams();
             AbstractParameters params = TaskParametersUtils.getParameters(taskNode.getType(),taskParameter);
             if (CollectionUtils.isNotEmpty(params.getResourceFilesList())) {
-                Set<Integer> tempSet = params.getResourceFilesList().stream().map(t->t.getId()).collect(Collectors.toSet());
+                Set<Integer> tempSet = params.getResourceFilesList().stream().filter(t->t.getId()!=0).map(ResourceInfo::getId).collect(Collectors.toSet());
                 resourceIds.addAll(tempSet);
             }
         }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/DataAnalysisService.java
Patch:
@@ -243,7 +243,8 @@ public Map<String, Object> countCommandState(User loginUser, int projectId, Stri
         // init data map
         /**
          * START_PROCESS, START_CURRENT_TASK_PROCESS, RECOVER_TOLERANCE_FAULT_PROCESS, RECOVER_SUSPENDED_PROCESS,
-         START_FAILURE_TASK_PROCESS,COMPLEMENT_DATA,SCHEDULER, REPEAT_RUNNING,PAUSE,STOP,RECOVER_WAITTING_THREAD;
+         START_FAILURE_TASK_PROCESS,COMPLEMENT_DATA,SCHEDULER, REPEAT_RUNNING,PAUSE,STOP,RECOVER_WAITTING_THREAD,
+         RESUME_FROM_FORCED_SUCCESS;
          */
         dataMap.put(CommandType.START_PROCESS,commonCommand);
         dataMap.put(CommandType.START_CURRENT_TASK_PROCESS,commonCommand);
@@ -256,6 +257,7 @@ public Map<String, Object> countCommandState(User loginUser, int projectId, Stri
         dataMap.put(CommandType.PAUSE,commonCommand);
         dataMap.put(CommandType.STOP,commonCommand);
         dataMap.put(CommandType.RECOVER_WAITTING_THREAD,commonCommand);
+        dataMap.put(CommandType.RESUME_FROM_FORCED_SUCCESS, commonCommand);
 
         // put command state
         for (CommandCount executeStatusCount : commandStateCounts){

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/placeholder/BusinessTimeUtils.java
Patch:
@@ -54,6 +54,7 @@ public static Map<String, String> getBusinessTime(CommandType commandType, Date
       case RECOVER_SUSPENDED_PROCESS:
       case START_FAILURE_TASK_PROCESS:
       case REPEAT_RUNNING:
+      case RESUME_FROM_FORCED_SUCCESS:
       case SCHEDULER:
       default:
           businessDate = addDays(new Date(), -1);

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/utils/AlertManager.java
Patch:
@@ -81,6 +81,8 @@ private String getCommandCnName(CommandType commandType) {
                 return "pause";
             case STOP:
                 return "stop";
+            case RESUME_FROM_FORCED_SUCCESS:
+                return "resume from forced success";
             default:
                 return "unknown type";
         }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProcessDefinitionService.java
Patch:
@@ -38,6 +38,7 @@
 import org.apache.dolphinscheduler.common.model.TaskNodeRelation;
 import org.apache.dolphinscheduler.common.process.ProcessDag;
 import org.apache.dolphinscheduler.common.process.Property;
+import org.apache.dolphinscheduler.common.process.ResourceInfo;
 import org.apache.dolphinscheduler.common.task.AbstractParameters;
 import org.apache.dolphinscheduler.common.thread.Stopper;
 import org.apache.dolphinscheduler.common.utils.*;
@@ -176,7 +177,7 @@ private String getResourceIds(ProcessData processData) {
             String taskParameter = taskNode.getParams();
             AbstractParameters params = TaskParametersUtils.getParameters(taskNode.getType(),taskParameter);
             if (CollectionUtils.isNotEmpty(params.getResourceFilesList())) {
-                Set<Integer> tempSet = params.getResourceFilesList().stream().map(t->t.getId()).collect(Collectors.toSet());
+                Set<Integer> tempSet = params.getResourceFilesList().stream().filter(t->t.getId()!=0).map(ResourceInfo::getId).collect(Collectors.toSet());
                 resourceIds.addAll(tempSet);
             }
         }

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/cache/impl/TaskInstanceCacheManagerImpl.java
Patch:
@@ -36,7 +36,7 @@
 public class TaskInstanceCacheManagerImpl implements TaskInstanceCacheManager {
 
     /**
-     * taskInstance caceh
+     * taskInstance cache
      */
     private Map<Integer,TaskInstance> taskInstanceCache = new ConcurrentHashMap<>();
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/cache/impl/TaskExecutionContextCacheManagerImpl.java
Patch:
@@ -32,7 +32,7 @@ public class TaskExecutionContextCacheManagerImpl implements TaskExecutionContex
 
 
     /**
-     * taskInstance caceh
+     * taskInstance cache
      */
     private Map<Integer,TaskExecutionContext> taskExecutionContextCache = new ConcurrentHashMap<>();
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/utils/ZooKeeperState.java
Patch:
@@ -149,6 +149,7 @@ private String cmd(String cmd) {
 			return sendThread.ret;
 		} catch (InterruptedException e) {
 			logger.error("send " + cmd + " to server " + host + ":" + port + " failed!", e);
+			Thread.currentThread().interrupt();
 		}
 		return "";
 	}

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/ProcessInstanceControllerTest.java
Patch:
@@ -74,7 +74,8 @@ public void testQueryTaskListByProcessId() throws Exception {
                 .andReturn();
 
         Result result = JSONUtils.parseObject(mvcResult.getResponse().getContentAsString(), Result.class);
-        Assert.assertEquals(Status.PROJECT_NOT_FOUNT,result.getCode().intValue());
+        assert result != null;
+        Assert.assertEquals(Status.PROJECT_NOT_FOUNT.getCode(),result.getCode().intValue());
         logger.info(mvcResult.getResponse().getContentAsString());
     }
 

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/shell/AbstractShell.java
Patch:
@@ -78,7 +78,7 @@ public abstract class AbstractShell {
   /**
    * If or not script finished executing
    */
-  private volatile AtomicBoolean completed;
+  private AtomicBoolean completed;
   
   public AbstractShell() {
     this(0L);
@@ -202,7 +202,7 @@ public void run() {
       } catch (InterruptedException ie) {
         logger.warn("Interrupted while reading the error and in stream", ie);
       }
-      completed.set(true);
+      completed.compareAndSet(false,true);
       //the timeout thread handling
       //taken care in finally block
       if (exitCode != 0 || errMsg.length() > 0) {

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/thread/ThreadUtils.java
Patch:
@@ -231,6 +231,8 @@ private static String getTaskName(long id, String name) {
     public static void sleep(final long millis) {
         try {
             Thread.sleep(millis);
-        } catch (final InterruptedException ignore) {}
+        } catch (final InterruptedException ignore) {
+            Thread.currentThread().interrupt();
+        }
     }
 }

File: dolphinscheduler-common/src/test/java/org/apache/dolphinscheduler/common/utils/PropertyUtilsTest.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.dolphinscheduler.common.utils;
 
 import org.apache.dolphinscheduler.common.Constants;
+import org.junit.Assert;
 import org.junit.Test;
 
 import static org.junit.Assert.assertNotNull;
@@ -26,6 +27,5 @@ public class PropertyUtilsTest {
     @Test
     public void getString() {
         assertNotNull(PropertyUtils.getString(Constants.FS_DEFAULTFS));
-        assertNotNull(PropertyUtils.getInt("spring.redis.port"));
     }
 }
\ No newline at end of file

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/AccessTokenMapperTest.java
Patch:
@@ -63,7 +63,6 @@ public void testInsert() throws Exception{
         Integer userId = 1;
 
         AccessToken accessToken = createAccessToken(userId);
-        assertNotNull(accessToken.getId());
         assertThat(accessToken.getId(), greaterThan(0));
     }
 

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/AlertMapperTest.java
Patch:
@@ -54,7 +54,6 @@ public class AlertMapperTest {
     @Test
     public void testInsert(){
         Alert expectedAlert = createAlert();
-        assertNotNull(expectedAlert.getId());
         assertThat(expectedAlert.getId(), greaterThan(0));
     }
 

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/CommandMapperTest.java
Patch:
@@ -62,7 +62,6 @@ public class CommandMapperTest {
     @Test
     public void testInsert(){
         Command command = createCommand();
-        assertNotNull(command.getId());
         assertThat(command.getId(),greaterThan(0));
     }
 

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/DataSourceMapperTest.java
Patch:
@@ -71,7 +71,6 @@ public class DataSourceMapperTest {
     @Test
     public void testInsert(){
         DataSource dataSource = createDataSource();
-        assertNotNull(dataSource.getId());
         assertThat(dataSource.getId(), greaterThan(0));
     }
 

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/ProcessInstanceMapperTest.java
Patch:
@@ -132,7 +132,7 @@ public void testQueryDetailById() {
         processInstanceMapper.updateById(processInstance);
 
         ProcessInstance processInstance1 = processInstanceMapper.queryDetailById(processInstance.getId());
-        Assert.assertNotEquals(processInstance1, 50);
+        Assert.assertNotNull(processInstance1);
         processInstanceMapper.deleteById(processInstance.getId());
     }
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/processor/queue/TaskResponseService.java
Patch:
@@ -89,6 +89,7 @@ public void addResponse(TaskResponseEvent taskResponseEvent){
             eventQueue.put(taskResponseEvent);
         } catch (InterruptedException e) {
             logger.error("put task : {} error :{}", taskResponseEvent,e);
+            Thread.currentThread().interrupt();
         }
     }
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterExecThread.java
Patch:
@@ -1026,6 +1026,7 @@ private void runProcess(){
                 Thread.sleep(Constants.SLEEP_TIME_MILLIS);
             } catch (InterruptedException e) {
                 logger.error(e.getMessage(),e);
+                Thread.currentThread().interrupt();
             }
             updateProcessInstanceState();
         }

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/log/LogPromise.java
Patch:
@@ -100,6 +100,7 @@ public Object getResult(){
         try {
             latch.await(timeout, TimeUnit.MILLISECONDS);
         } catch (InterruptedException ignore) {
+            Thread.currentThread().interrupt();
         }
         PROMISES.remove(opaque);
         return this.result;

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/zk/ZookeeperCachedOperator.java
Patch:
@@ -83,6 +83,7 @@ public void close() {
         try {
             Thread.sleep(500);
         } catch (InterruptedException ignore) {
+            Thread.currentThread().interrupt();
         }
         super.close();
     }

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/consumer/TaskPriorityQueueConsumer.java
Patch:
@@ -385,7 +385,7 @@ private Map<String,String> getResourceFullNames(TaskNode taskNode) {
 
                 // get the resource id in order to get the resource names in batch
                 Stream<Integer> resourceIdStream = projectResourceFiles.stream().map(resourceInfo -> resourceInfo.getId());
-                Set<Integer> resourceIdsSet = resourceIdStream.collect(Collectors.toSet());
+                Set<Integer> resourceIdsSet = resourceIdStream.filter(resId-> resId != 0).collect(Collectors.toSet());
 
                 if (CollectionUtils.isNotEmpty(resourceIdsSet)) {
                     Integer[] resourceIds = resourceIdsSet.toArray(new Integer[resourceIdsSet.size()]);

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessService.java
Patch:
@@ -1554,7 +1554,9 @@ public List<UdfFunc> queryUdfFunListByids(int[] ids){
      * @return tenant code
      */
     public String queryTenantCodeByResName(String resName,ResourceType resourceType){
-        return resourceMapper.queryTenantCodeByResourceName(resName, resourceType.ordinal());
+        // in order to query tenant code successful although the version is older
+        String fullName = resName.startsWith("/") ? resName : String.format("/%s",resName);
+        return resourceMapper.queryTenantCodeByResourceName(fullName, resourceType.ordinal());
     }
 
     /**

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/DataSourceService.java
Patch:
@@ -527,7 +527,7 @@ public String buildParameter(String name, String desc, DbType type, String host,
         parameterMap.put(Constants.DATABASE, database);
         parameterMap.put(Constants.JDBC_URL, jdbcUrl);
         parameterMap.put(Constants.USER, userName);
-        parameterMap.put(Constants.PASSWORD, password);
+        parameterMap.put(Constants.PASSWORD, CommonUtils.encodePassword(password));
         if (CommonUtils.getKerberosStartupState() &&
                 (type == DbType.HIVE || type == DbType.SPARK)){
             parameterMap.put(Constants.PRINCIPAL,principal);

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/datasource/MySQLDataSource.java
Patch:
@@ -82,6 +82,8 @@ public String getUser() {
 
   @Override
   public String getPassword() {
+    // password need decode
+    password = super.getPassword();
     if(password.contains(sensitiveParam)){
       logger.warn("sensitive param : {} in password field is filtered", sensitiveParam);
       password = password.replace(sensitiveParam, "");

File: e2e/src/test/java/org/apache/dolphinscheduler/locator/project/ProcessInstanceLocator.java
Patch:
@@ -21,7 +21,7 @@
 public class ProcessInstanceLocator {
     // jump Process Instance page
     //click Process Instance name
-    public static final By CLICK_PROCESS_INSTANCE_NAME = By.xpath("//div[3]/div/ul/li[2]");
+    public static final By CLICK_PROCESS_INSTANCE_NAME = By.xpath("//div[4]/div/ul/li[2]");
 
     // click rerun button
     public static final By CLICK_RERUN_BUTTON = By.xpath("//tr[2]/td[14]/div[1]/button[2]");

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/TaskType.java
Patch:
@@ -36,6 +36,7 @@ public enum TaskType {
      * 10 DATAX
      * 11 CONDITIONS
      * 12 SQOOP
+     * 13 WATERDROP
      */
     SHELL(0, "shell"),
     SQL(1, "sql"),
@@ -49,7 +50,8 @@ public enum TaskType {
     HTTP(9, "http"),
     DATAX(10, "datax"),
     CONDITIONS(11, "conditions"),
-    SQOOP(12, "sqoop");
+    SQOOP(12, "sqoop"),
+    WATERDROP(13, "waterdrop");
 
     TaskType(int code, String descp){
         this.code = code;

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/TaskParametersUtils.java
Patch:
@@ -53,6 +53,8 @@ public static AbstractParameters getParameters(String taskType, String parameter
       switch (EnumUtils.getEnum(TaskType.class,taskType)) {
         case SUB_PROCESS:
           return JSONUtils.parseObject(parameter, SubProcessParameters.class);
+        case WATERDROP:
+          return JSONUtils.parseObject(parameter, ShellParameters.class);
         case SHELL:
           return JSONUtils.parseObject(parameter, ShellParameters.class);
         case PROCEDURE:

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/TaskManager.java
Patch:
@@ -50,6 +50,8 @@ public static AbstractTask newTask(TaskExecutionContext taskExecutionContext,
     switch (EnumUtils.getEnum(TaskType.class,taskExecutionContext.getTaskType())) {
         case SHELL:
         return new ShellTask(taskExecutionContext, logger);
+      case WATERDROP:
+        return new ShellTask(taskExecutionContext, logger);
       case PROCEDURE:
         return new ProcedureTask(taskExecutionContext, logger);
       case SQL:

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/dto/TaskCountDto.java
Patch:
@@ -62,7 +62,7 @@ private void countTaskDtos(List<ExecuteStatusCount> taskInstanceStateCounts){
                 case SUBMITTED_SUCCESS:
                     submittedSuccess += taskInstanceStateCount.getCount();
                     break;
-                case RUNNING_EXEUTION:
+                case RUNNING_EXECUTION:
                     runningExeution += taskInstanceStateCount.getCount();
                     break;
                 case READY_PAUSE:
@@ -99,7 +99,7 @@ private void countTaskDtos(List<ExecuteStatusCount> taskInstanceStateCounts){
         }
         this.taskCountDtos = new ArrayList<>();
         this.taskCountDtos.add(new TaskStateCount(ExecutionStatus.SUBMITTED_SUCCESS, submittedSuccess));
-        this.taskCountDtos.add(new TaskStateCount(ExecutionStatus.RUNNING_EXEUTION, runningExeution));
+        this.taskCountDtos.add(new TaskStateCount(ExecutionStatus.RUNNING_EXECUTION, runningExeution));
         this.taskCountDtos.add(new TaskStateCount(ExecutionStatus.READY_PAUSE, readyPause));
         this.taskCountDtos.add(new TaskStateCount(ExecutionStatus.PAUSE, pause));
         this.taskCountDtos.add(new TaskStateCount(ExecutionStatus.READY_STOP, readyStop));

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/DataAnalysisServiceTest.java
Patch:
@@ -180,7 +180,7 @@ private  List<ExecuteStatusCount> getTaskInstanceStateCounts(){
 
         List<ExecuteStatusCount> taskInstanceStateCounts = new ArrayList<>(1);
         ExecuteStatusCount executeStatusCount = new ExecuteStatusCount();
-        executeStatusCount.setExecutionStatus(ExecutionStatus.RUNNING_EXEUTION);
+        executeStatusCount.setExecutionStatus(ExecutionStatus.RUNNING_EXECUTION);
         taskInstanceStateCounts.add(executeStatusCount);
 
         return  taskInstanceStateCounts;

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProcessDefinitionServiceTest.java
Patch:
@@ -474,7 +474,7 @@ public void testViewTree() throws Exception {
         ProcessInstance processInstance = new ProcessInstance();
         processInstance.setId(1);
         processInstance.setName("test_instance");
-        processInstance.setState(ExecutionStatus.RUNNING_EXEUTION);
+        processInstance.setState(ExecutionStatus.RUNNING_EXECUTION);
         processInstance.setHost("192.168.xx.xx");
         processInstance.setStartTime(new Date());
         processInstance.setEndTime(new Date());
@@ -486,7 +486,7 @@ public void testViewTree() throws Exception {
         taskInstance.setTaskType("SHELL");
         taskInstance.setId(1);
         taskInstance.setName("test_task_instance");
-        taskInstance.setState(ExecutionStatus.RUNNING_EXEUTION);
+        taskInstance.setState(ExecutionStatus.RUNNING_EXECUTION);
         taskInstance.setHost("192.168.xx.xx");
 
         //task instance not exist

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProcessInstanceServiceTest.java
Patch:
@@ -307,7 +307,7 @@ public void testUpdateProcessInstance() throws ParseException {
 
         //process instance not finish
         when(processService.findProcessInstanceDetailById(1)).thenReturn(processInstance);
-        processInstance.setState(ExecutionStatus.RUNNING_EXEUTION);
+        processInstance.setState(ExecutionStatus.RUNNING_EXECUTION);
         Map<String, Object> processInstanceNotFinishRes = processInstanceService.updateProcessInstance(loginUser, projectName, 1,
                 shellJson, "2020-02-21 00:00:00", true, Flag.YES, "", "");
         Assert.assertEquals(Status.PROCESS_INSTANCE_STATE_OPERATION_ERROR, processInstanceNotFinishRes.get(Constants.STATUS));
@@ -414,7 +414,7 @@ public void testViewGantt() throws Exception {
         ProcessInstance processInstance = getProcessInstance();
         processInstance.setProcessInstanceJson(shellJson);
         TaskInstance taskInstance = getTaskInstance();
-        taskInstance.setState(ExecutionStatus.RUNNING_EXEUTION);
+        taskInstance.setState(ExecutionStatus.RUNNING_EXECUTION);
         taskInstance.setStartTime(new Date());
         when(processInstanceMapper.queryDetailById(1)).thenReturn(processInstance);
         when(taskInstanceMapper.queryByInstanceIdAndName(Mockito.anyInt(), Mockito.any())).thenReturn(taskInstance);

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/Constants.java
Patch:
@@ -831,7 +831,7 @@ private Constants() {
 
     public static final int[] NOT_TERMINATED_STATES = new int[]{
             ExecutionStatus.SUBMITTED_SUCCESS.ordinal(),
-            ExecutionStatus.RUNNING_EXEUTION.ordinal(),
+            ExecutionStatus.RUNNING_EXECUTION.ordinal(),
             ExecutionStatus.READY_PAUSE.ordinal(),
             ExecutionStatus.READY_STOP.ordinal(),
             ExecutionStatus.NEED_FAULT_TOLERANCE.ordinal(),

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/ExecutionStatus.java
Patch:
@@ -43,7 +43,7 @@ public enum ExecutionStatus {
      * 11 waiting depend node complete
      */
     SUBMITTED_SUCCESS(0, "submit success"),
-    RUNNING_EXEUTION(1, "running"),
+    RUNNING_EXECUTION(1, "running"),
     READY_PAUSE(2, "ready pause"),
     PAUSE(3, "pause"),
     READY_STOP(4, "ready stop"),
@@ -126,7 +126,7 @@ public boolean typeIsStop(){
      * @return status
      */
    public boolean typeIsRunning(){
-       return this == RUNNING_EXEUTION || this == WAITTING_DEPEND;
+       return this == RUNNING_EXECUTION || this == WAITTING_DEPEND;
    }
 
     /**

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/TaskStateType.java
Patch:
@@ -50,7 +50,7 @@ public static int[] convert2ExecutStatusIntArray(TaskStateType taskStateType){
                 };
             case RUNNING:
                 return new int[]{ExecutionStatus.SUBMITTED_SUCCESS.ordinal(),
-                        ExecutionStatus.RUNNING_EXEUTION.ordinal(),
+                        ExecutionStatus.RUNNING_EXECUTION.ordinal(),
                         ExecutionStatus.READY_PAUSE.ordinal(),
                         ExecutionStatus.READY_STOP.ordinal()};
             case WAITTING:

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/HadoopUtils.java
Patch:
@@ -448,7 +448,7 @@ public ExecutionStatus getApplicationStatus(String applicationId) throws Excepti
 
             case Constants.RUNNING:
             default:
-                return ExecutionStatus.RUNNING_EXEUTION;
+                return ExecutionStatus.RUNNING_EXECUTION;
         }
     }
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/ConditionsTaskExecThread.java
Patch:
@@ -124,7 +124,7 @@ private void updateTaskState() {
     private void initTaskParameters() {
         this.taskInstance.setLogPath(getTaskLogPath(taskInstance));
         this.taskInstance.setHost(NetUtils.getHost() + Constants.COLON + masterConfig.getListenPort());
-        taskInstance.setState(ExecutionStatus.RUNNING_EXEUTION);
+        taskInstance.setState(ExecutionStatus.RUNNING_EXECUTION);
         taskInstance.setStartTime(new Date());
         this.processService.saveTaskInstance(taskInstance);
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/DependentTaskExecThread.java
Patch:
@@ -173,7 +173,7 @@ private void cancelTaskInstance() {
     private void initTaskParameters() {
         taskInstance.setLogPath(getTaskLogPath(taskInstance));
         taskInstance.setHost(NetUtils.getHost() + Constants.COLON + masterConfig.getListenPort());
-        taskInstance.setState(ExecutionStatus.RUNNING_EXEUTION);
+        taskInstance.setState(ExecutionStatus.RUNNING_EXECUTION);
         taskInstance.setStartTime(new Date());
         processService.updateTaskInstance(taskInstance);
     }

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterBaseTaskExecThread.java
Patch:
@@ -172,7 +172,7 @@ public Boolean dispatchTask(TaskInstance taskInstance) {
                 return true;
             }
             // task cannot submit when running
-            if(taskInstance.getState() == ExecutionStatus.RUNNING_EXEUTION){
+            if(taskInstance.getState() == ExecutionStatus.RUNNING_EXECUTION){
                 logger.info(String.format("submit to task, but task [%s] state already be running. ", taskInstance.getName()));
                 return true;
             }

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/SubProcessTaskExecThread.java
Patch:
@@ -93,7 +93,7 @@ private boolean setTaskInstanceState(){
             return false;
         }
 
-        taskInstance.setState(ExecutionStatus.RUNNING_EXEUTION);
+        taskInstance.setState(ExecutionStatus.RUNNING_EXECUTION);
         taskInstance.setStartTime(new Date());
         processService.updateTaskInstance(taskInstance);
         return true;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/processor/TaskExecuteProcessor.java
Patch:
@@ -167,7 +167,7 @@ private String getTaskLogPath(TaskExecutionContext taskExecutionContext) {
     private TaskExecuteAckCommand buildAckCommand(TaskExecutionContext taskExecutionContext) {
         TaskExecuteAckCommand ackCommand = new TaskExecuteAckCommand();
         ackCommand.setTaskInstanceId(taskExecutionContext.getTaskInstanceId());
-        ackCommand.setStatus(ExecutionStatus.RUNNING_EXEUTION.getCode());
+        ackCommand.setStatus(ExecutionStatus.RUNNING_EXECUTION.getCode());
         ackCommand.setLogPath(getTaskLogPath(taskExecutionContext));
         ackCommand.setHost(taskExecutionContext.getHost());
         ackCommand.setStartTime(new Date());

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/master/ConditionsTaskTest.java
Patch:
@@ -124,7 +124,7 @@ private ProcessInstance getProcessInstance(){
         ProcessInstance processInstance = new ProcessInstance();
         processInstance.setId(10112);
         processInstance.setProcessDefinitionId(100001);
-        processInstance.setState(ExecutionStatus.RUNNING_EXEUTION);
+        processInstance.setState(ExecutionStatus.RUNNING_EXECUTION);
 
         return processInstance;
     }

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/master/DependentTaskTest.java
Patch:
@@ -176,7 +176,7 @@ private ProcessInstance getProcessInstance(){
         ProcessInstance processInstance = new ProcessInstance();
         processInstance.setId(10111);
         processInstance.setProcessDefinitionId(0);
-        processInstance.setState(ExecutionStatus.RUNNING_EXEUTION);
+        processInstance.setState(ExecutionStatus.RUNNING_EXECUTION);
 
         return processInstance;
     }

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/master/processor/queue/TaskResponseServiceTest.java
Patch:
@@ -43,7 +43,7 @@ public class TaskResponseServiceTest {
 
     @Test
     public void testAdd(){
-        TaskResponseEvent taskResponseEvent = TaskResponseEvent.newAck(ExecutionStatus.RUNNING_EXEUTION, new Date(),
+        TaskResponseEvent taskResponseEvent = TaskResponseEvent.newAck(ExecutionStatus.RUNNING_EXECUTION, new Date(),
                 "", "", "", 1);
         taskResponseService.addResponse(taskResponseEvent);
         Assert.assertTrue(taskResponseService.getEventQueue().size() == 1);
@@ -57,7 +57,7 @@ public void testAdd(){
 
     @Test
     public void testStop(){
-        TaskResponseEvent taskResponseEvent = TaskResponseEvent.newAck(ExecutionStatus.RUNNING_EXEUTION, new Date(),
+        TaskResponseEvent taskResponseEvent = TaskResponseEvent.newAck(ExecutionStatus.RUNNING_EXECUTION, new Date(),
                 "", "", "", 1);
         taskResponseService.addResponse(taskResponseEvent);
         taskResponseService.stop();

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/master/consumer/TaskPriorityQueueConsumerTest.java
Patch:
@@ -39,6 +39,7 @@
 import org.apache.dolphinscheduler.service.bean.SpringApplicationContext;
 import org.apache.dolphinscheduler.service.process.ProcessService;
 import org.apache.dolphinscheduler.service.queue.TaskPriorityQueue;
+import org.apache.dolphinscheduler.service.zk.CuratorZookeeperClient;
 import org.apache.dolphinscheduler.service.zk.ZookeeperCachedOperator;
 import org.apache.dolphinscheduler.service.zk.ZookeeperConfig;
 import org.junit.After;
@@ -52,7 +53,7 @@
 
 
 @RunWith(SpringJUnit4ClassRunner.class)
-@ContextConfiguration(classes={DependencyConfig.class, SpringApplicationContext.class, SpringZKServer.class,
+@ContextConfiguration(classes={DependencyConfig.class, SpringApplicationContext.class, SpringZKServer.class, CuratorZookeeperClient.class,
         NettyExecutorManager.class, ExecutorDispatcher.class, ZookeeperRegistryCenter.class, TaskPriorityQueueConsumer.class,
         ZookeeperNodeManager.class, ZookeeperCachedOperator.class, ZookeeperConfig.class, MasterConfig.class})
 public class TaskPriorityQueueConsumerTest {

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/registry/ZookeeperNodeManagerTest.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.dolphinscheduler.server.worker.config.WorkerConfig;
 import org.apache.dolphinscheduler.server.worker.registry.WorkerRegistry;
 import org.apache.dolphinscheduler.server.zk.SpringZKServer;
+import org.apache.dolphinscheduler.service.zk.CuratorZookeeperClient;
 import org.apache.dolphinscheduler.service.zk.ZookeeperCachedOperator;
 import org.apache.dolphinscheduler.service.zk.ZookeeperConfig;
 import org.junit.Assert;
@@ -42,7 +43,7 @@
 @RunWith(SpringJUnit4ClassRunner.class)
 @ContextConfiguration(classes={DependencyConfig.class, SpringZKServer.class, MasterRegistry.class,WorkerRegistry.class,
         ZookeeperRegistryCenter.class, MasterConfig.class, WorkerConfig.class,
-        ZookeeperCachedOperator.class, ZookeeperConfig.class, ZookeeperNodeManager.class})
+        ZookeeperCachedOperator.class, ZookeeperConfig.class, ZookeeperNodeManager.class, CuratorZookeeperClient.class})
 public class ZookeeperNodeManagerTest {
 
     @Autowired

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/worker/processor/TaskCallbackServiceTest.java
Patch:
@@ -41,6 +41,7 @@
 import org.apache.dolphinscheduler.server.worker.registry.WorkerRegistry;
 import org.apache.dolphinscheduler.server.zk.SpringZKServer;
 import org.apache.dolphinscheduler.service.bean.SpringApplicationContext;
+import org.apache.dolphinscheduler.service.zk.CuratorZookeeperClient;
 import org.apache.dolphinscheduler.service.zk.ZookeeperCachedOperator;
 import org.apache.dolphinscheduler.service.zk.ZookeeperConfig;
 import org.junit.Assert;
@@ -73,7 +74,8 @@
         TaskResponseService.class,
         TaskAckProcessor.class,
         TaskResponseProcessor.class,
-        TaskExecuteProcessor.class})
+        TaskExecuteProcessor.class,
+        CuratorZookeeperClient.class})
 public class TaskCallbackServiceTest {
 
     @Autowired

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/SchedulerController.java
Patch:
@@ -52,7 +52,7 @@ public class SchedulerController extends BaseController {
     public static final String DEFAULT_WARNING_TYPE = "NONE";
     public static final String DEFAULT_NOTIFY_GROUP_ID = "1";
     public static final String DEFAULT_FAILURE_POLICY = "CONTINUE";
-
+    public static final String DEFAULT_PROCESS_INSTANCE_PRIORITY = "MEDIUM";
 
     @Autowired
     private SchedulerService schedulerService;
@@ -99,7 +99,7 @@ public Result createSchedule(@ApiIgnore @RequestAttribute(value = SESSION_USER)
                                  @RequestParam(value = "receivers", required = false) String receivers,
                                  @RequestParam(value = "receiversCc", required = false) String receiversCc,
                                  @RequestParam(value = "workerGroup", required = false, defaultValue = "default") String workerGroup,
-                                 @RequestParam(value = "processInstancePriority", required = false) Priority processInstancePriority) throws IOException {
+                                 @RequestParam(value = "processInstancePriority", required = false, defaultValue = DEFAULT_PROCESS_INSTANCE_PRIORITY) Priority processInstancePriority) throws IOException {
         logger.info("login user {}, project name: {}, process name: {}, create schedule: {}, warning type: {}, warning group id: {}," +
                         "failure policy: {},receivers : {},receiversCc : {},processInstancePriority : {}, workGroupId:{}",
                 loginUser.getUserName(), projectName, processDefinitionId, schedule, warningType, warningGroupId,

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterExecThread.java
Patch:
@@ -305,10 +305,10 @@ private void executeComplementProcess() throws Exception {
                     processInstance.getProcessDefinition().getGlobalParamList(),
                     CommandType.COMPLEMENT_DATA, processInstance.getScheduleTime()));
             processInstance.setId(0);
+            processInstance.setStartTime(new Date());
+            processInstance.setEndTime(null);
             processService.saveProcessInstance(processInstance);
         }
-
-
     }
 
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterExecThread.java
Patch:
@@ -308,10 +308,10 @@ private void executeComplementProcess() throws Exception {
                     processInstance.getProcessDefinition().getGlobalParamList(),
                     CommandType.COMPLEMENT_DATA, processInstance.getScheduleTime()));
             processInstance.setId(0);
+            processInstance.setStartTime(new Date());
+            processInstance.setEndTime(null);
             processService.saveProcessInstance(processInstance);
         }
-
-
     }
 
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterExecThread.java
Patch:
@@ -308,10 +308,10 @@ private void executeComplementProcess() throws Exception {
                     processInstance.getProcessDefinition().getGlobalParamList(),
                     CommandType.COMPLEMENT_DATA, processInstance.getScheduleTime()));
             processInstance.setId(0);
+            processInstance.setStartTime(new Date());
+            processInstance.setEndTime(null);
             processService.saveProcessInstance(processInstance);
         }
-
-
     }
 
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/MasterServer.java
Patch:
@@ -123,8 +123,8 @@ public void run(){
         // self tolerant
         this.zkMasterClient.start();
 
-        //
-        masterSchedulerService.start();
+        // scheduler start
+        this.masterSchedulerService.start();
 
         // start QuartzExecutors
         // what system should do if exception

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/master/dispatch/ExecutorDispatcherTest.java
Patch:
@@ -78,5 +78,7 @@ public void testDispatch() throws ExecuteException {
 
         ExecutionContext executionContext = ExecutionContextTestUtils.getExecutionContext(port);
         executorDispatcher.dispatch(executionContext);
+
+        workerRegistry.unRegistry();
     }
 }

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/master/dispatch/host/RoundRobinHostManagerTest.java
Patch:
@@ -74,5 +74,6 @@ public void testSelectWithResult(){
         Host host = roundRobinHostManager.select(context);
         Assert.assertTrue(StringUtils.isNotEmpty(host.getAddress()));
         Assert.assertTrue(host.getAddress().equalsIgnoreCase(NetUtils.getHost() + ":" + workerConfig.getListenPort()));
+        workerRegistry.unRegistry();
     }
 }

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/master/registry/MasterRegistryTest.java
Patch:
@@ -58,6 +58,7 @@ public void testRegistry() throws InterruptedException {
         String masterNodePath = masterPath + "/" + (Constants.LOCAL_ADDRESS + ":" + masterConfig.getListenPort());
         String heartbeat = zookeeperRegistryCenter.getZookeeperCachedOperator().get(masterNodePath);
         Assert.assertEquals(HEARTBEAT_FOR_ZOOKEEPER_INFO_LENGTH, heartbeat.split(",").length);
+        masterRegistry.unRegistry();
     }
 
     @Test

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/worker/registry/WorkerRegistryTest.java
Patch:
@@ -143,6 +143,7 @@ public void testRegistry() {
 
         Assert.assertEquals(0, testWorkerGroupPathZkChildren.size());
         Assert.assertEquals(0, defaultWorkerGroupPathZkChildren.size());
+        workerRegistry.unRegistry();
     }
 
     @Test

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/ExecuteType.java
Patch:
@@ -29,8 +29,9 @@ public enum ExecuteType {
      * 3 resume failure
      * 4 stop
      * 5 pause
+     * 6 resume from forced success
      */
-    NONE,REPEAT_RUNNING, RECOVER_SUSPENDED_PROCESS, START_FAILURE_TASK_PROCESS, STOP, PAUSE;
+    NONE,REPEAT_RUNNING, RECOVER_SUSPENDED_PROCESS, START_FAILURE_TASK_PROCESS, STOP, PAUSE, RESUME_FROM_FORCED_SUCCESS;
 
 
     public static ExecuteType getEnum(int value){

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/CommandType.java
Patch:
@@ -39,6 +39,7 @@ public enum CommandType {
      * 8 pause a process
      * 9 stop a process
      * 10 recover waiting thread
+     * 11 resume process from forced-success task nodes
      */
     START_PROCESS(0, "start a new process"),
     START_CURRENT_TASK_PROCESS(1, "start a new process from current nodes"),
@@ -50,7 +51,8 @@ public enum CommandType {
     REPEAT_RUNNING(7, "repeat running a process"),
     PAUSE(8, "pause a process"),
     STOP(9, "stop a process"),
-    RECOVER_WAITTING_THREAD(10, "recover waiting thread");
+    RECOVER_WAITTING_THREAD(10, "recover waiting thread"),
+    RESUME_FROM_FORCED_SUCCESS(11, "resume process from forced-success task nodes");
 
     CommandType(int code, String descp){
         this.code = code;

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessService.java
Patch:
@@ -200,6 +200,7 @@ public Boolean verifyIsNeedCreateCommand(Command command){
         cmdTypeMap.put(CommandType.REPEAT_RUNNING,1);
         cmdTypeMap.put(CommandType.RECOVER_SUSPENDED_PROCESS,1);
         cmdTypeMap.put(CommandType.START_FAILURE_TASK_PROCESS,1);
+        cmdTypeMap.put(CommandType.RESUME_FROM_FORCED_SUCCESS,1);
         CommandType commandType = command.getCommandType();
 
         if(cmdTypeMap.containsKey(commandType)){

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/utils/ZookeeperMonitor.java
Patch:
@@ -81,8 +81,7 @@ private static List<ZookeeperRecord> zookeeperInfoList(String zookeeperServers)
 				if(ok){
 					state.getZookeeperInfo();
 				}
-				
-				String hostName = zookeeperServer;
+
 				int connections = state.getConnections();
 				int watches = state.getWatches();
 				long sent = state.getSent();
@@ -95,7 +94,7 @@ private static List<ZookeeperRecord> zookeeperInfoList(String zookeeperServers)
 				int status = ok ? 1 : 0;
 				Date date = new Date();
 
-				ZookeeperRecord zookeeperRecord = new ZookeeperRecord(hostName,connections,watches,sent,received,mode,minLatency,avgLatency,maxLatency,nodeCount,status,date);
+				ZookeeperRecord zookeeperRecord = new ZookeeperRecord(zookeeperServer,connections,watches,sent,received,mode,minLatency,avgLatency,maxLatency,nodeCount,status,date);
 				list.add(zookeeperRecord);
 
 			}

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/master/runner/MasterTaskExecThreadTest.java
Patch:
@@ -28,6 +28,7 @@
 import org.apache.dolphinscheduler.server.zk.SpringZKServer;
 import org.apache.dolphinscheduler.service.bean.SpringApplicationContext;
 import org.apache.dolphinscheduler.service.process.ProcessService;
+import org.apache.dolphinscheduler.service.zk.CuratorZookeeperClient;
 import org.apache.dolphinscheduler.service.zk.ZookeeperCachedOperator;
 import org.apache.dolphinscheduler.service.zk.ZookeeperConfig;
 import org.junit.Test;
@@ -43,7 +44,7 @@
 @RunWith(SpringJUnit4ClassRunner.class)
 @ContextConfiguration(classes={DependencyConfig.class, SpringApplicationContext.class, SpringZKServer.class,
         NettyExecutorManager.class, ExecutorDispatcher.class, ZookeeperRegistryCenter.class, TaskPriorityQueueConsumer.class,
-        ZookeeperNodeManager.class, ZookeeperCachedOperator.class, ZookeeperConfig.class})
+        ZookeeperNodeManager.class, ZookeeperCachedOperator.class, ZookeeperConfig.class, CuratorZookeeperClient.class})
 public class MasterTaskExecThreadTest {
 
 

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/zk/AbstractZKClient.java
Patch:
@@ -326,7 +326,7 @@ protected String getHostByEventDataPath(String path) {
 	@Override
 	public String toString() {
 		return "AbstractZKClient{" +
-				"zkClient=" + zkClient +
+				"zkClient=" + getZkClient() +
 				", deadServerZNodeParentPath='" + getZNodeParentPath(ZKNodeType.DEAD_SERVER) + '\'' +
 				", masterZNodeParentPath='" + getZNodeParentPath(ZKNodeType.MASTER) + '\'' +
 				", workerZNodeParentPath='" + getZNodeParentPath(ZKNodeType.WORKER) + '\'' +

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/zk/ZookeeperCachedOperator.java
Patch:
@@ -39,7 +39,7 @@ public class ZookeeperCachedOperator extends ZookeeperOperator {
      */
     @Override
     protected void registerListener() {
-        treeCache = new TreeCache(zkClient, getZookeeperConfig().getDsRoot() + "/nodes");
+        treeCache = new TreeCache(getZkClient(), getZookeeperConfig().getDsRoot() + "/nodes");
         logger.info("add listener to zk path: {}", getZookeeperConfig().getDsRoot());
         try {
             treeCache.start();

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/WorkerGroupServiceTest.java
Patch:
@@ -79,7 +79,7 @@ public void init(){
 
         Mockito.when(zookeeperCachedOperator.getChildrenKeys(workerPath + "/default")).thenReturn(defaultIpList);
 
-        Mockito.when(zookeeperCachedOperator.get(workerPath + "/default" + "/" + defaultIpList.get(0))).thenReturn("0.02,0.23,0.03,2020-05-08 11:24:14,2020-05-08 14:22:24");
+        Mockito.when(zookeeperCachedOperator.get(workerPath + "/default" + "/" + defaultIpList.get(0))).thenReturn("0.01,0.17,0.03,25.83,8.0,1.0,2020-07-21 11:17:59,2020-07-21 14:39:20,0,13238");
     }
 
     /**
@@ -115,4 +115,4 @@ private List<ProcessInstance> getProcessInstanceList(){
         return processInstances;
     }
 
-}
\ No newline at end of file
+}

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/entity/SQLTaskExecutionContext.java
Patch:
@@ -18,7 +18,8 @@
 package org.apache.dolphinscheduler.server.entity;
 
 import org.apache.dolphinscheduler.dao.entity.UdfFunc;
-
+import org.apache.dolphinscheduler.dao.entity.UdfFunc.UdfFuncDeserializer;
+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
 import java.io.Serializable;
 import java.util.Map;
 
@@ -40,6 +41,7 @@ public class SQLTaskExecutionContext implements Serializable {
     /**
      * udf function tenant code map
      */
+    @JsonDeserialize(keyUsing = UdfFuncDeserializer.class)
     private Map<UdfFunc,String> udfFuncTenantCodeMap;
 
 

File: e2e/src/test/java/org/apache/dolphinscheduler/page/project/ProcessInstancePage.java
Patch:
@@ -32,6 +32,7 @@ public ProcessInstancePage(WebDriver driver) {
      * rerun workflow page
      */
     public boolean rerunWorkflowPage() throws InterruptedException {
+        Thread.sleep(2000);
         clickTopElement(ProcessInstanceLocator.CLICK_PROCESS_INSTANCE_NAME);
         clickTopElement(ProcessInstanceLocator.CLICK_RERUN_BUTTON);
         return ifTitleContains(ProcessInstanceData.PROCESS_INSTANCE_TITLE);

File: e2e/src/test/java/org/apache/dolphinscheduler/page/project/ProcessInstancePage.java
Patch:
@@ -32,6 +32,7 @@ public ProcessInstancePage(WebDriver driver) {
      * rerun workflow page
      */
     public boolean rerunWorkflowPage() throws InterruptedException {
+        Thread.sleep(2000);
         clickTopElement(ProcessInstanceLocator.CLICK_PROCESS_INSTANCE_NAME);
         clickTopElement(ProcessInstanceLocator.CLICK_RERUN_BUTTON);
         return ifTitleContains(ProcessInstanceData.PROCESS_INSTANCE_TITLE);

File: e2e/src/test/java/org/apache/dolphinscheduler/data/project/ProjectData.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.dolphinscheduler.data.project;
 
-public class CreateProjectData {
+public class ProjectData {
     // create project name
     public static final String PROJECT_NAME = "selenium_project_1";
     // create project description

File: e2e/src/test/java/org/apache/dolphinscheduler/data/project/WorkflowDefineData.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.dolphinscheduler.data.project;
 
-public class CreateWorkflowData {
+public class WorkflowDefineData {
     /**
      * create workflow data
      */

File: e2e/src/test/java/org/apache/dolphinscheduler/locator/project/TimingLocator.java
Patch:
@@ -45,9 +45,9 @@ public class TimingLocator {
     public static final By CLICK_CREATE_BUTTON  = By.xpath("//div[12]/button[2]/span");
 
     //edit timing
-    public static final By CLICK_TIMING_MANAGEMENT_BUTTON = By.xpath("//div[2]/div/div[3]/div[1]/div/table/tr[2]/td[10]/button[6]");
+    public static final By CLICK_TIMING_MANAGEMENT_BUTTON = By.xpath("//tr[2]/td[10]/button[6]");
 
-    public static final By CLICK_EDIT_TIMING_BUTTON = By.xpath("//div[2]/div[3]/div/div[2]/div[1]/table/tr[2]/td[10]/button[1]");
+    public static final By CLICK_EDIT_TIMING_BUTTON = By.xpath("//tr[2]/td[10]/button[1]/i");
 
     //online timing
     public static final By CLICK_ONLINE_TIMING_BUTTON = By.xpath("//td[10]/button[2]");

File: e2e/src/test/java/org/apache/dolphinscheduler/locator/project/WorkflowDefineLocator.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.openqa.selenium.By;
 
-public class CreateWorkflowLocator {
+public class WorkflowDefineLocator {
 
     /**
      * jump workflow define page

File: e2e/src/test/java/org/apache/dolphinscheduler/page/project/TimingPage.java
Patch:
@@ -64,11 +64,11 @@ public boolean createTiming() throws InterruptedException {
     public boolean editTiming() throws InterruptedException {
         // click timing button
         System.out.println("Click timing  management button");
+        Thread.sleep(1000);
         clickButton(TimingLocator.CLICK_TIMING_MANAGEMENT_BUTTON);
-        Thread.sleep(500);
+        Thread.sleep(1000);
         System.out.println("Click edit timing button");
         clickButton(TimingLocator.CLICK_EDIT_TIMING_BUTTON);
-        Thread.sleep(500);
         System.out.println("Click execution timing button");
         clickButton(TimingLocator.CLICK_EXECUTION_TIMING_BUTTON);
         Thread.sleep(1000);

File: e2e/src/test/java/org/apache/dolphinscheduler/testcase/testDeleteData/TestDeleteProject.java
Patch:
@@ -17,15 +17,15 @@
 package org.apache.dolphinscheduler.testcase.testDeleteData;
 
 import org.apache.dolphinscheduler.base.BaseTest;
-import org.apache.dolphinscheduler.page.project.CreateProjectPage;
+import org.apache.dolphinscheduler.page.project.ProjectPage;
 import org.testng.annotations.Test;
 
 public class TestDeleteProject extends BaseTest {
-    private CreateProjectPage createProjectPage;
+    private ProjectPage createProjectPage;
 
     @Test(groups={"functionTests"},dependsOnGroups = { "login","project"},description = "TestDeleteProject")
     public void testDeleteProject() throws InterruptedException {
-        createProjectPage = new CreateProjectPage(driver);
+        createProjectPage = new ProjectPage(driver);
         //jump to project manage page
         System.out.println("jump to the project manage page to delete project");
         createProjectPage.jumpProjectManagePage();

File: dolphinscheduler-alert/src/test/java/org/apache/dolphinscheduler/alert/utils/EnterpriseWeChatUtilsTest.java
Patch:
@@ -55,8 +55,8 @@ public class EnterpriseWeChatUtilsTest {
     private static final String enterpriseWechatUsers="LiGang,journey";
     private static final String msg = "hello world";
 
-    private static final String enterpriseWechatTeamSendMsg = "{\\\"toparty\\\":\\\"$toParty\\\",\\\"agentid\\\":\\\"$agentId\\\",\\\"msgtype\\\":\\\"text\\\",\\\"text\\\":{\\\"content\\\":\\\"$msg\\\"},\\\"safe\\\":\\\"0\\\"}";
-    private static final String enterpriseWechatUserSendMsg = "{\\\"touser\\\":\\\"$toUser\\\",\\\"agentid\\\":\\\"$agentId\\\",\\\"msgtype\\\":\\\"markdown\\\",\\\"markdown\\\":{\\\"content\\\":\\\"$msg\\\"}}";
+    private static final String enterpriseWechatTeamSendMsg = "{\\\"toparty\\\":\\\"{toParty}\\\",\\\"agentid\\\":\\\"{agentId}\\\",\\\"msgtype\\\":\\\"text\\\",\\\"text\\\":{\\\"content\\\":\\\"{msg}\\\"},\\\"safe\\\":\\\"0\\\"}";
+    private static final String enterpriseWechatUserSendMsg = "{\\\"touser\\\":\\\"{toUser}\\\",\\\"agentid\\\":\\\"{agentId}\\\",\\\"msgtype\\\":\\\"markdown\\\",\\\"markdown\\\":{\\\"content\\\":\\\"{msg}\\\"}}";
 
     @Before
     public void init(){

File: e2e/src/test/java/org/apache/dolphinscheduler/locator/security/TokenManageLocator.java
Patch:
@@ -20,7 +20,7 @@
 
 public class TokenManageLocator {
     //create token
-    public static final By CLICK_TOKEN_MANAGE = By.xpath("//div[7]/div/a/div/a/span");
+    public static final By CLICK_TOKEN_MANAGE = By.xpath("/html/body/div[1]/div[2]/div/div[1]/div[7]/div/a/div/a/span");
 
     public static final By CLICK_CREATE_TOKEN = By.xpath("//div[2]/div/div[2]/div[2]/div/div[1]/button/span");
 

File: e2e/src/test/java/org/apache/dolphinscheduler/page/project/CreateProjectPage.java
Patch:
@@ -31,7 +31,6 @@ public CreateProjectPage(WebDriver driver) {
      * jump to ProjectManagePage
      */
     public boolean jumpProjectManagePage() throws InterruptedException {
-        Thread.sleep(TestConstant.THREE_THOUSAND);
         clickTopElement(CreateProjectLocator.PROJECT_MANAGE);
         Thread.sleep(TestConstant.ONE_THOUSAND);
         return ifTitleContains(CreateProjectData.PROJECT_TITLE);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/dto/resources/Directory.java
Patch:
@@ -1,5 +1,3 @@
-package org.apache.dolphinscheduler.api.dto.resources;
-
 /*
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements.  See the NOTICE file distributed with
@@ -16,6 +14,8 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+package org.apache.dolphinscheduler.api.dto.resources;
+
 /**
  * directory
  */

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/dto/resources/FileLeaf.java
Patch:
@@ -1,5 +1,3 @@
-package org.apache.dolphinscheduler.api.dto.resources;
-
 /*
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements.  See the NOTICE file distributed with
@@ -16,6 +14,8 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+package org.apache.dolphinscheduler.api.dto.resources;
+
 /**
  * file leaf
  */

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/HadoopUtils.java
Patch:
@@ -408,7 +408,7 @@ public boolean isYarnEnabled() {
      * @param applicationId application id
      * @return the return may be null or there may be other parse exceptions
      */
-    public ExecutionStatus getApplicationStatus(String applicationId) throws Exception{
+    public ExecutionStatus getApplicationStatus(String applicationId) throws Exception {
         if (StringUtils.isEmpty(applicationId)) {
             return null;
         }

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/sql/SqlTask.java
Patch:
@@ -131,8 +131,7 @@ public void handle() throws Exception {
                     .map(this::getSqlAndSqlParamsMap)
                     .collect(Collectors.toList());
 
-            List<String> createFuncs = UDFUtils.createFuncs(sqlTaskExecutionContext.getUdfFuncList(),
-                    taskExecutionContext.getTenantCode(),
+            List<String> createFuncs = UDFUtils.createFuncs(sqlTaskExecutionContext.getUdfFuncTenantCodeMap(),
                     logger);
 
             // execute sql task

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/registry/MasterRegistry.java
Patch:
@@ -19,7 +19,6 @@
 import org.apache.curator.framework.CuratorFramework;
 import org.apache.curator.framework.state.ConnectionState;
 import org.apache.curator.framework.state.ConnectionStateListener;
-import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.utils.DateUtils;
 import org.apache.dolphinscheduler.common.utils.NetUtils;
 import org.apache.dolphinscheduler.remote.utils.NamedThreadFactory;
@@ -37,8 +36,6 @@
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.TimeUnit;
 
-import static org.apache.dolphinscheduler.remote.utils.Constants.COMMA;
-
 /**
  *  master registry
  */
@@ -113,6 +110,7 @@ public void stateChanged(CuratorFramework client, ConnectionState newState) {
     public void unRegistry() {
         String address = getLocalAddress();
         String localNodePath = getMasterPath();
+        heartBeatExecutor.shutdownNow();
         zookeeperRegistryCenter.getZookeeperCachedOperator().remove(localNodePath);
         logger.info("master node : {} unRegistry to ZK.", address);
     }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java
Patch:
@@ -35,7 +35,7 @@ public enum Status {
     USER_NAME_NULL(10004,"user name is null", "用户名不能为空"),
     HDFS_OPERATION_ERROR(10006, "hdfs operation error", "hdfs操作错误"),
     TASK_INSTANCE_NOT_FOUND(10008, "task instance not found", "任务实例不存在"),
-    TENANT_NAME_EXIST(10009, "tenant code already exists", "租户编码不能为空"),
+    TENANT_NAME_EXIST(10009, "tenant code {0} already exists", "租户编码[{0}]已存在"),
     USER_NOT_EXIST(10010, "user {0} not exists", "用户[{0}]不存在"),
     ALERT_GROUP_NOT_EXIST(10011, "alarm group not found", "告警组不存在"),
     ALERT_GROUP_EXIST(10012, "alarm group already exists", "告警组名称已存在"),

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/TenantService.java
Patch:
@@ -327,11 +327,11 @@ public Map<String, Object> queryTenantList(String tenantCode) {
    * @return true if tenant code can user, otherwise return false
    */
   public Result verifyTenantCode(String tenantCode) {
-    Result result=new Result();
+    Result result = new Result();
     if (checkTenantExists(tenantCode)) {
       logger.error("tenant {} has exist, can't create again.", tenantCode);
-      putMsg(result, Status.TENANT_NAME_EXIST);
-    }else{
+      putMsg(result, Status.TENANT_NAME_EXIST, tenantCode);
+    } else {
       putMsg(result, Status.SUCCESS);
     }
     return result;

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/CommonUtils.java
Patch:
@@ -70,7 +70,7 @@ public static boolean isDevelopMode() {
    * @return true if upload resource is HDFS and kerberos startup
    */
   public static boolean getKerberosStartupState(){
-    String resUploadStartupType = PropertyUtils.getString(Constants.RESOURCE_STORAGE_TYPE);
+    String resUploadStartupType = PropertyUtils.getUpperCaseString(Constants.RESOURCE_STORAGE_TYPE);
     ResUploadType resUploadType = ResUploadType.valueOf(resUploadStartupType);
     Boolean kerberosStartupState = PropertyUtils.getBoolean(Constants.HADOOP_SECURITY_AUTHENTICATION_STARTUP_STATE,false);
     return resUploadType == ResUploadType.HDFS && kerberosStartupState;

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/HadoopUtils.java
Patch:
@@ -110,7 +110,7 @@ private void init() {
         try {
             configuration = new Configuration();
 
-            String resourceStorageType = PropertyUtils.getString(Constants.RESOURCE_STORAGE_TYPE);
+            String resourceStorageType = PropertyUtils.getUpperCaseString(Constants.RESOURCE_STORAGE_TYPE);
             ResUploadType resUploadType = ResUploadType.valueOf(resourceStorageType);
 
             if (resUploadType == ResUploadType.HDFS) {

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/PropertyUtils.java
Patch:
@@ -72,7 +72,7 @@ private PropertyUtils() {
      * @return  judge whether resource upload startup
      */
     public static Boolean getResUploadStartupState(){
-        String resUploadStartupType = PropertyUtils.getString(Constants.RESOURCE_STORAGE_TYPE);
+        String resUploadStartupType = PropertyUtils.getString(Constants.RESOURCE_STORAGE_TYPE).toUpperCase();
         ResUploadType resUploadType = ResUploadType.valueOf(resUploadStartupType);
         return resUploadType == ResUploadType.HDFS || resUploadType == ResUploadType.S3;
     }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/configuration/AppConfiguration.java
Patch:
@@ -35,6 +35,7 @@ public class AppConfiguration implements WebMvcConfigurer {
 
   public static final String LOGIN_INTERCEPTOR_PATH_PATTERN = "/**/*";
   public static final String LOGIN_PATH_PATTERN = "/login";
+  public static final String REGISTER_PATH_PATTERN = "/users/register";
   public static final String PATH_PATTERN = "/**";
   public static final String LOCALE_LANGUAGE_COOKIE = "language";
   public static final int COOKIE_MAX_AGE = 3600;
@@ -76,7 +77,7 @@ public void addInterceptors(InterceptorRegistry registry) {
     //i18n
     registry.addInterceptor(localeChangeInterceptor());
 
-    registry.addInterceptor(loginInterceptor()).addPathPatterns(LOGIN_INTERCEPTOR_PATH_PATTERN).excludePathPatterns(LOGIN_PATH_PATTERN,"/swagger-resources/**", "/webjars/**", "/v2/**", "/doc.html", "*.html", "/ui/**");
+    registry.addInterceptor(loginInterceptor()).addPathPatterns(LOGIN_INTERCEPTOR_PATH_PATTERN).excludePathPatterns(LOGIN_PATH_PATTERN, REGISTER_PATH_PATTERN, "/swagger-resources/**", "/webjars/**", "/v2/**", "/doc.html", "*.html", "/ui/**");
   }
 
 

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/HadoopUtils.java
Patch:
@@ -63,7 +63,7 @@ public class HadoopUtils implements Closeable {
 
     private static final LoadingCache<String, HadoopUtils> cache = CacheBuilder
             .newBuilder()
-            .expireAfterWrite(PropertyUtils.getInt(Constants.KERBEROS_EXPIRE_TIME, 7), TimeUnit.DAYS)
+            .expireAfterWrite(PropertyUtils.getInt(Constants.KERBEROS_EXPIRE_TIME, 2), TimeUnit.HOURS)
             .build(new CacheLoader<String, HadoopUtils>() {
                 @Override
                 public HadoopUtils load(String key) throws Exception {

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/CommonUtils.java
Patch:
@@ -48,7 +48,7 @@ public static String getSystemEnvPath() {
         envPath = envDefaultPath.getPath();
         logger.debug("env path :{}", envPath);
       }else{
-        envPath = System.getProperty("user.home") + File.separator + ".bash_profile";
+        envPath =  "/etc/profile";
       }
     }
 

File: dolphinscheduler-common/src/test/java/org/apache/dolphinscheduler/common/utils/OSUtilsTest.java
Patch:
@@ -93,7 +93,7 @@ public void getProcessID(){
     }
     @Test
     public void getHost(){
-        String host = OSUtils.getHost();
+        String host = NetUtils.getHost();
         Assert.assertNotNull(host);
         Assert.assertNotEquals("", host);
     }

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/ConditionsTaskExecThread.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.dolphinscheduler.common.utils.DependentUtils;
 import org.apache.dolphinscheduler.common.utils.*;
 import org.apache.dolphinscheduler.common.utils.LoggerUtils;
-import org.apache.dolphinscheduler.common.utils.OSUtils;
+import org.apache.dolphinscheduler.common.utils.NetUtils;
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
 import org.slf4j.LoggerFactory;
 
@@ -123,7 +123,7 @@ private void updateTaskState() {
 
     private void initTaskParameters() {
         this.taskInstance.setLogPath(getTaskLogPath(taskInstance));
-        this.taskInstance.setHost(OSUtils.getHost() + Constants.COLON + masterConfig.getListenPort());
+        this.taskInstance.setHost(NetUtils.getHost() + Constants.COLON + masterConfig.getListenPort());
         taskInstance.setState(ExecutionStatus.RUNNING_EXEUTION);
         taskInstance.setStartTime(new Date());
         this.processService.saveTaskInstance(taskInstance);

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/DependentTaskExecThread.java
Patch:
@@ -26,7 +26,7 @@
 import org.apache.dolphinscheduler.common.utils.DependentUtils;
 import org.apache.dolphinscheduler.common.utils.*;
 import org.apache.dolphinscheduler.common.utils.LoggerUtils;
-import org.apache.dolphinscheduler.common.utils.OSUtils;
+import org.apache.dolphinscheduler.common.utils.NetUtils;
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
 import org.apache.dolphinscheduler.server.utils.DependentExecute;
 import org.slf4j.LoggerFactory;
@@ -172,7 +172,7 @@ private void cancelTaskInstance() {
 
     private void initTaskParameters() {
         taskInstance.setLogPath(getTaskLogPath(taskInstance));
-        taskInstance.setHost(OSUtils.getHost() + Constants.COLON + masterConfig.getListenPort());
+        taskInstance.setHost(NetUtils.getHost() + Constants.COLON + masterConfig.getListenPort());
         taskInstance.setState(ExecutionStatus.RUNNING_EXEUTION);
         taskInstance.setStartTime(new Date());
         processService.updateTaskInstance(taskInstance);

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterSchedulerService.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.thread.Stopper;
 import org.apache.dolphinscheduler.common.thread.ThreadUtils;
+import org.apache.dolphinscheduler.common.utils.NetUtils;
 import org.apache.dolphinscheduler.common.utils.OSUtils;
 import org.apache.dolphinscheduler.dao.entity.Command;
 import org.apache.dolphinscheduler.dao.entity.ProcessInstance;
@@ -158,6 +159,6 @@ public void run() {
     }
 
     private String getLocalAddress(){
-        return OSUtils.getHost() + ":" + masterConfig.getListenPort();
+        return NetUtils.getHost() + ":" + masterConfig.getListenPort();
     }
 }

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/registry/WorkerRegistry.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.curator.framework.state.ConnectionStateListener;
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.utils.DateUtils;
-import org.apache.dolphinscheduler.common.utils.OSUtils;
+import org.apache.dolphinscheduler.common.utils.NetUtils;
 import org.apache.dolphinscheduler.common.utils.StringUtils;
 import org.apache.dolphinscheduler.remote.utils.NamedThreadFactory;
 import org.apache.dolphinscheduler.server.registry.HeartBeatTask;
@@ -87,7 +87,7 @@ public void init(){
      *  registry
      */
     public void registry() {
-        String address = OSUtils.getHost();
+        String address = NetUtils.getHost();
         String localNodePath = getWorkerPath();
         zookeeperRegistryCenter.getZookeeperCachedOperator().persistEphemeral(localNodePath, "");
         zookeeperRegistryCenter.getZookeeperCachedOperator().getZkClient().getConnectionStateListenable().addListener(new ConnectionStateListener() {
@@ -149,7 +149,7 @@ private String getWorkerPath() {
      * @return
      */
     private String getLocalAddress(){
-        return OSUtils.getHost() + Constants.COLON + workerConfig.getListenPort();
+        return NetUtils.getHost() + ":" + workerConfig.getListenPort();
     }
 
 }

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/master/dispatch/executor/NettyExecutorManagerTest.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.dolphinscheduler.server.master.dispatch.executor;
 
 import org.apache.dolphinscheduler.common.enums.CommandType;
-import org.apache.dolphinscheduler.common.utils.OSUtils;
+import org.apache.dolphinscheduler.common.utils.NetUtils;
 import org.apache.dolphinscheduler.dao.entity.ProcessDefinition;
 import org.apache.dolphinscheduler.dao.entity.ProcessInstance;
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
@@ -78,7 +78,7 @@ public void testExecute() throws ExecuteException{
                 .buildProcessDefinitionRelatedInfo(processDefinition)
                 .create();
         ExecutionContext executionContext = new ExecutionContext(context.toCommand(), ExecutorType.WORKER);
-        executionContext.setHost(Host.of(OSUtils.getHost() + ":" + serverConfig.getListenPort()));
+        executionContext.setHost(Host.of(NetUtils.getHost() + ":" + serverConfig.getListenPort()));
         Boolean execute = nettyExecutorManager.execute(executionContext);
         Assert.assertTrue(execute);
         nettyRemotingServer.close();
@@ -97,7 +97,7 @@ public void testExecuteWithException() throws ExecuteException{
                 .buildProcessDefinitionRelatedInfo(processDefinition)
                 .create();
         ExecutionContext executionContext = new ExecutionContext(context.toCommand(), ExecutorType.WORKER);
-        executionContext.setHost(Host.of(OSUtils.getHost() + ":4444"));
+        executionContext.setHost(Host.of(NetUtils.getHost() + ":4444"));
         nettyExecutorManager.execute(executionContext);
 
     }

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/master/dispatch/host/RoundRobinHostManagerTest.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.dolphinscheduler.server.master.dispatch.host;
 
 
-import org.apache.dolphinscheduler.common.utils.OSUtils;
+import org.apache.dolphinscheduler.common.utils.NetUtils;
 import org.apache.dolphinscheduler.common.utils.StringUtils;
 import org.apache.dolphinscheduler.remote.utils.Host;
 import org.apache.dolphinscheduler.server.master.dispatch.context.ExecutionContext;
@@ -73,6 +73,6 @@ public void testSelectWithResult(){
         ExecutionContext context = ExecutionContextTestUtils.getExecutionContext(10000);
         Host host = roundRobinHostManager.select(context);
         Assert.assertTrue(StringUtils.isNotEmpty(host.getAddress()));
-        Assert.assertTrue(host.getAddress().equalsIgnoreCase(OSUtils.getHost() + ":" + workerConfig.getListenPort()));
+        Assert.assertTrue(host.getAddress().equalsIgnoreCase(NetUtils.getHost() + ":" + workerConfig.getListenPort()));
     }
 }

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/registry/ZookeeperNodeManagerTest.java
Patch:
@@ -18,7 +18,7 @@
 
 
 import org.apache.dolphinscheduler.common.utils.CollectionUtils;
-import org.apache.dolphinscheduler.common.utils.OSUtils;
+import org.apache.dolphinscheduler.common.utils.NetUtils;
 import org.apache.dolphinscheduler.server.master.config.MasterConfig;
 import org.apache.dolphinscheduler.server.master.registry.MasterRegistry;
 import org.apache.dolphinscheduler.server.worker.config.WorkerConfig;
@@ -74,7 +74,7 @@ public void testGetMasterNodes(){
         Set<String> masterNodes = zookeeperNodeManager.getMasterNodes();
         Assert.assertTrue(CollectionUtils.isNotEmpty(masterNodes));
         Assert.assertEquals(1, masterNodes.size());
-        Assert.assertEquals(OSUtils.getHost() + ":" + masterConfig.getListenPort(), masterNodes.iterator().next());
+        Assert.assertEquals(NetUtils.getHost() + ":" + masterConfig.getListenPort(), masterNodes.iterator().next());
     }
 
     @Test
@@ -102,6 +102,6 @@ public void testGetWorkerGroupNodesWithParam(){
         Set<String> workerNodes = zookeeperNodeManager.getWorkerGroupNodes("default");
         Assert.assertTrue(CollectionUtils.isNotEmpty(workerNodes));
         Assert.assertEquals(1, workerNodes.size());
-        Assert.assertEquals(OSUtils.getHost() + ":" + workerConfig.getListenPort(), workerNodes.iterator().next());
+        Assert.assertEquals(NetUtils.getHost() + ":" + workerConfig.getListenPort(), workerNodes.iterator().next());
     }
 }

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/utils/ExecutionContextTestUtils.java
Patch:
@@ -18,7 +18,7 @@
 
 
 import org.apache.dolphinscheduler.common.enums.CommandType;
-import org.apache.dolphinscheduler.common.utils.OSUtils;
+import org.apache.dolphinscheduler.common.utils.NetUtils;
 import org.apache.dolphinscheduler.dao.entity.ProcessDefinition;
 import org.apache.dolphinscheduler.dao.entity.ProcessInstance;
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
@@ -47,7 +47,7 @@ public static ExecutionContext getExecutionContext(int port){
                 .buildProcessDefinitionRelatedInfo(processDefinition)
                 .create();
         ExecutionContext executionContext = new ExecutionContext(context.toCommand(), ExecutorType.WORKER);
-        executionContext.setHost(Host.of(OSUtils.getHost() + ":" + port));
+        executionContext.setHost(Host.of(NetUtils.getHost() + ":" + port));
 
         return executionContext;
     }

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/worker/registry/WorkerRegistryTest.java
Patch:
@@ -17,8 +17,7 @@
 
 package org.apache.dolphinscheduler.server.worker.registry;
 
-import org.apache.dolphinscheduler.common.utils.OSUtils;
-import org.apache.dolphinscheduler.remote.utils.Constants;
+import org.apache.dolphinscheduler.common.utils.NetUtils;
 import org.apache.dolphinscheduler.server.registry.ZookeeperRegistryCenter;
 import org.apache.dolphinscheduler.server.worker.config.WorkerConfig;
 import org.apache.dolphinscheduler.server.zk.SpringZKServer;
@@ -60,7 +59,7 @@ public void testRegistry() throws InterruptedException {
         workerRegistry.registry();
         String workerPath = zookeeperRegistryCenter.getWorkerPath();
         Assert.assertEquals(DEFAULT_WORKER_GROUP, workerConfig.getWorkerGroup().trim());
-        String instancePath = workerPath + "/" + workerConfig.getWorkerGroup().trim() + "/" + (OSUtils.getHost() + ":" + workerConfig.getListenPort());
+        String instancePath = workerPath + "/" + workerConfig.getWorkerGroup().trim() + "/" + (NetUtils.getHost() + ":" + workerConfig.getListenPort());
         TimeUnit.SECONDS.sleep(workerConfig.getWorkerHeartbeatInterval() + 2); //wait heartbeat info write into zk node
         String heartbeat = zookeeperRegistryCenter.getZookeeperCachedOperator().get(instancePath);
         Assert.assertEquals(HEARTBEAT_FOR_ZOOKEEPER_INFO_LENGTH, heartbeat.split(",").length);

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/sql/SqlTask.java
Patch:
@@ -132,8 +132,7 @@ public void handle() throws Exception {
                     .map(this::getSqlAndSqlParamsMap)
                     .collect(Collectors.toList());
 
-            List<String> createFuncs = UDFUtils.createFuncs(sqlTaskExecutionContext.getUdfFuncList(),
-                    taskExecutionContext.getTenantCode(),
+            List<String> createFuncs = UDFUtils.createFuncs(sqlTaskExecutionContext.getUdfFuncTenantCodeMap(),
                     logger);
 
             // execute sql task

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/DataSourceController.java
Patch:
@@ -278,7 +278,7 @@ public Result connectDataSource(@ApiIgnore @RequestAttribute(value = Constants.S
                                     @RequestParam(value = "password") String password,
                                     @RequestParam(value = "connectType") DbConnectType connectType,
                                     @RequestParam(value = "other") String other) {
-        logger.info("login user {}, connect datasource: {} failure, note: {}, type: {}, connectType: {}, other: {}",
+        logger.info("login user {}, connect datasource: {}, note: {}, type: {}, connectType: {}, other: {}",
                 loginUser.getUserName(), name, note, type, connectType, other);
         String parameter = dataSourceService.buildParameter(name, note, type, host, port, database, principal, userName, password, connectType, other);
         Boolean isConnection = dataSourceService.checkConnection(type, parameter);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java
Patch:
@@ -192,7 +192,7 @@ public enum Status {
     RESOURCE_IS_USED(20014, "resource file is used by process definition","资源文件被上线的流程定义使用了"),
     PARENT_RESOURCE_NOT_EXIST(20015, "parent resource not exist","父资源文件不存在"),
     RESOURCE_NOT_EXIST_OR_NO_PERMISSION(20016, "resource not exist or no permission,please view the task node and remove error resource","请检查任务节点并移除无权限或者已删除的资源"),
-
+    RESOURCE_IS_AUTHORIZED(20017, "resource is authorized to user {0},suffix not allowed to be modified", "资源文件已授权其他用户[{0}],后缀不允许修改"),
 
     USER_NO_OPERATION_PERM(30001, "user has no operation privilege", "当前用户没有操作权限"),
     USER_NO_OPERATION_PROJECT_PERM(30002, "user {0} is not has project {1} permission", "当前用户[{0}]没有[{1}]项目的操作权限"),

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProcessInstanceService.java
Patch:
@@ -478,17 +478,18 @@ public Map<String, Object> deleteProcessInstanceById(User loginUser, String proj
             return checkResult;
         }
         ProcessInstance processInstance = processService.findProcessInstanceDetailById(processInstanceId);
-        List<TaskInstance> taskInstanceList = processService.findValidTaskListByProcessId(processInstanceId);
-
         if (null == processInstance) {
             putMsg(result, Status.PROCESS_INSTANCE_NOT_EXIST, processInstanceId);
             return result;
         }
 
 
 
+        processService.removeTaskLogFile(processInstanceId);
         // delete database cascade
         int delete = processService.deleteWorkProcessInstanceById(processInstanceId);
+
+
         processService.deleteAllSubWorkProcessByParentId(processInstanceId);
         processService.deleteWorkProcessMapByParentId(processInstanceId);
 

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/DateUtils.java
Patch:
@@ -1 +1 @@
-/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *    http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.dolphinscheduler.common.utils;import org.apache.dolphinscheduler.common.Constants;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import java.time.Instant;import java.time.LocalDateTime;import java.time.ZoneId;import java.time.format.DateTimeFormatter;import java.util.Calendar;import java.util.Date;/** * date utils */public class DateUtils {    private static final Logger logger = LoggerFactory.getLogger(DateUtils.class);    /**     * date to local datetime     *     * @param date date     * @return local datetime     */    private static LocalDateTime date2LocalDateTime(Date date) {        return LocalDateTime.ofInstant(date.toInstant(), ZoneId.systemDefault());    }    /**     * local datetime to date     *     * @param localDateTime local datetime     * @return date     */    private static Date localDateTime2Date(LocalDateTime localDateTime) {        Instant instant = localDateTime.atZone(ZoneId.systemDefault()).toInstant();        return Date.from(instant);    }    /**     * get current date str     *     * @return date string     */    public static String getCurrentTime() {        return getCurrentTime(Constants.YYYY_MM_DD_HH_MM_SS);    }    /**     * get the date string in the specified format of the current time     *     * @param format date format     * @return date string     */    public static String getCurrentTime(String format) {        return LocalDateTime.now().format(DateTimeFormatter.ofPattern(format));    }    /**     * get the formatted date string     *     * @param date date     * @param format e.g. yyyy-MM-dd HH:mm:ss     * @return date string     */    public static String format(Date date, String format) {        return format(date2LocalDateTime(date), format);    }    /**     * get the formatted date string     *     * @param localDateTime local data time     * @param format        yyyy-MM-dd HH:mm:ss     * @return date string     */    public static String format(LocalDateTime localDateTime, String format) {        return localDateTime.format(DateTimeFormatter.ofPattern(format));    }    /**     * convert time to yyyy-MM-dd HH:mm:ss format     *     * @param date date     * @return date string     */    public static String dateToString(Date date) {        return format(date, Constants.YYYY_MM_DD_HH_MM_SS);    }    /**     * convert string to date and time     *     * @param date date     * @param format  format     * @return date     */    public static Date parse(String date, String format) {        try {            LocalDateTime ldt = LocalDateTime.parse(date, DateTimeFormatter.ofPattern(format));            return localDateTime2Date(ldt);        } catch (Exception e) {            logger.error("error while parse date:" + date, e);        }        return null;    }    /**     * convert date str to yyyy-MM-dd HH:mm:ss format     *     * @param str date string     * @return yyyy-MM-dd HH:mm:ss format     */    public static Date stringToDate(String str) {        return parse(str, Constants.YYYY_MM_DD_HH_MM_SS);    }    /**     * get seconds between two dates     *     * @param d1 date1     * @param d2 date2     * @return differ seconds     */    public static long differSec(Date d1, Date d2) {        if(d1 == null || d2 == null){            return 0;        }        return (long) Math.ceil(differMs(d1, d2) / 1000.0);    }    /**     * get ms between two dates     *     * @param d1 date1     * @param d2 date2     * @return differ ms     */    public static long differMs(Date d1, Date d2) {        return Math.abs(d1.getTime() - d2.getTime());    }    /**     * get hours between two dates     *     * @param d1 date1     * @param d2 date2     * @return differ hours     */    public static long diffHours(Date d1, Date d2) {        return (long) Math.ceil(diffMin(d1, d2) / 60.0);    }    /**     * get minutes between two dates     *     * @param d1 date1     * @param d2 date2     * @return differ minutes     */    public static long diffMin(Date d1, Date d2) {        return (long) Math.ceil(differSec(d1, d2) / 60.0);    }    /**     * get the date of the specified date in the days before and after     *     * @param date date     * @param day day     * @return the date of the specified date in the days before and after     */    public static Date getSomeDay(Date date, int day) {        Calendar calendar = Calendar.getInstance();        calendar.setTime(date);        calendar.add(Calendar.DATE, day);        return calendar.getTime();    }    /**     * compare two dates     *     * @param future future date     * @param old old date     * @return true if future time greater than old time     */    public static boolean compare(Date future, Date old) {        return future.getTime() > old.getTime();    }    /**     * convert schedule string to date     *     * @param schedule schedule     * @return convert schedule string to date     */    public static Date getScheduleDate(String schedule) {        return stringToDate(schedule);    }    /**     * format time to readable     *     * @param ms ms     * @return format time     */    public static String format2Readable(long ms) {        long days = ms / (1000 * 60 * 60 * 24);        long hours = (ms % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60);        long minutes = (ms % (1000 * 60 * 60)) / (1000 * 60);        long seconds = (ms % (1000 * 60)) / 1000;        return String.format("%02d %02d:%02d:%02d", days, hours, minutes, seconds);    }    /**     * get monday     *     * note: Set the first day of the week to Monday, the default is Sunday     * @param date date     * @return get monday     */    public static Date getMonday(Date date) {        Calendar cal = Calendar.getInstance();        cal.setTime(date);        cal.setFirstDayOfWeek(Calendar.MONDAY);        cal.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);        return cal.getTime();    }    /**     * get sunday     *     * note: Set the first day of the week to Monday, the default is Sunday     * @param date date     * @return get sunday     */    public static Date getSunday(Date date) {        Calendar cal = Calendar.getInstance();        cal.setTime(date);        cal.setFirstDayOfWeek(Calendar.MONDAY);        cal.set(Calendar.DAY_OF_WEEK, Calendar.SUNDAY);        return cal.getTime();    }    /**     * get first day of month     *     * @param date date     * @return first day of month     * */    public static Date getFirstDayOfMonth(Date date) {        Calendar cal = Calendar.getInstance();        cal.setTime(date);        cal.set(Calendar.DAY_OF_MONTH, 1);        return cal.getTime();    }    /**     * get some hour of day     *     * @param date date     * @param offsetHour hours     * @return some hour of day     * */    public static Date getSomeHourOfDay(Date date, int offsetHour) {        Calendar cal = Calendar.getInstance();        cal.setTime(date);        cal.set(Calendar.HOUR_OF_DAY, cal.get(Calendar.HOUR_OF_DAY) + offsetHour);        cal.set(Calendar.MINUTE, 0);        cal.set(Calendar.SECOND, 0);        cal.set(Calendar.MILLISECOND, 0);        return cal.getTime();    }    /**     * get last day of month     *     * @param  date date     * @return  get last day of month     */    public static Date getLastDayOfMonth(Date date) {        Calendar cal = Calendar.getInstance();        cal.setTime(date);        cal.add(Calendar.MONTH, 1);        cal.set(Calendar.DAY_OF_MONTH, 1);        cal.add(Calendar.DAY_OF_MONTH, -1);        return cal.getTime();    }    /**     * return YYYY-MM-DD 00:00:00     *     * @param inputDay date     * @return start day     */    public static Date getStartOfDay(Date inputDay) {        Calendar cal = Calendar.getInstance();        cal.setTime(inputDay);        cal.set(Calendar.HOUR_OF_DAY, 0);        cal.set(Calendar.MINUTE, 0);        cal.set(Calendar.SECOND, 0);        cal.set(Calendar.MILLISECOND, 0);        return cal.getTime();    }    /**     * return YYYY-MM-DD 23:59:59     *     * @param inputDay day     * @return end of day     */    public static Date getEndOfDay(Date inputDay) {        Calendar cal = Calendar.getInstance();        cal.setTime(inputDay);        cal.set(Calendar.HOUR_OF_DAY, 23);        cal.set(Calendar.MINUTE, 59);        cal.set(Calendar.SECOND, 59);        cal.set(Calendar.MILLISECOND, 999);        return cal.getTime();    }    /**     * return YYYY-MM-DD 00:00:00     *     * @param inputDay day     * @return start of hour     */    public static Date getStartOfHour(Date inputDay) {        Calendar cal = Calendar.getInstance();        cal.setTime(inputDay);        cal.set(Calendar.MINUTE, 0);        cal.set(Calendar.SECOND, 0);        cal.set(Calendar.MILLISECOND, 0);        return cal.getTime();    }    /**     * return YYYY-MM-DD 23:59:59     *     * @param inputDay day     * @return end of hour     */    public static Date getEndOfHour(Date inputDay) {        Calendar cal = Calendar.getInstance();        cal.setTime(inputDay);        cal.set(Calendar.MINUTE, 59);        cal.set(Calendar.SECOND, 59);        cal.set(Calendar.MILLISECOND, 999);        return cal.getTime();    }    /**     * get current date     * @return current date     */    public static Date getCurrentDate() {        return DateUtils.parse(DateUtils.getCurrentTime(),                Constants.YYYY_MM_DD_HH_MM_SS);    }    /**     * get date     * @param date date     * @param calendarField calendarField     * @param amount amount     * @return date     */    public static Date add(final Date date, final int calendarField, final int amount) {        if (date == null) {            throw new IllegalArgumentException("The date must not be null");        }        final Calendar c = Calendar.getInstance();        c.setTime(date);        c.add(calendarField, amount);        return c.getTime();    }}
\ No newline at end of file
+/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *    http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.dolphinscheduler.common.utils;import org.apache.dolphinscheduler.common.Constants;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import java.time.Instant;import java.time.LocalDateTime;import java.time.ZoneId;import java.time.format.DateTimeFormatter;import java.util.Calendar;import java.util.Date;/** * date utils */public class DateUtils {    private static final Logger logger = LoggerFactory.getLogger(DateUtils.class);    /**     * date to local datetime     *     * @param date date     * @return local datetime     */    private static LocalDateTime date2LocalDateTime(Date date) {        return LocalDateTime.ofInstant(date.toInstant(), ZoneId.systemDefault());    }    /**     * local datetime to date     *     * @param localDateTime local datetime     * @return date     */    private static Date localDateTime2Date(LocalDateTime localDateTime) {        Instant instant = localDateTime.atZone(ZoneId.systemDefault()).toInstant();        return Date.from(instant);    }    /**     * get current date str     *     * @return date string     */    public static String getCurrentTime() {        return getCurrentTime(Constants.YYYY_MM_DD_HH_MM_SS);    }    /**     * get the date string in the specified format of the current time     *     * @param format date format     * @return date string     */    public static String getCurrentTime(String format) {        return LocalDateTime.now().format(DateTimeFormatter.ofPattern(format));    }    /**     * get the formatted date string     *     * @param date date     * @param format e.g. yyyy-MM-dd HH:mm:ss     * @return date string     */    public static String format(Date date, String format) {        return format(date2LocalDateTime(date), format);    }    /**     * get the formatted date string     *     * @param localDateTime local data time     * @param format        yyyy-MM-dd HH:mm:ss     * @return date string     */    public static String format(LocalDateTime localDateTime, String format) {        return localDateTime.format(DateTimeFormatter.ofPattern(format));    }    /**     * convert time to yyyy-MM-dd HH:mm:ss format     *     * @param date date     * @return date string     */    public static String dateToString(Date date) {        return format(date, Constants.YYYY_MM_DD_HH_MM_SS);    }    /**     * convert string to date and time     *     * @param date date     * @param format  format     * @return date     */    public static Date parse(String date, String format) {        try {            LocalDateTime ldt = LocalDateTime.parse(date, DateTimeFormatter.ofPattern(format));            return localDateTime2Date(ldt);        } catch (Exception e) {            logger.error("error while parse date:" + date, e);        }        return null;    }    /**     * convert date str to yyyy-MM-dd HH:mm:ss format     *     * @param str date string     * @return yyyy-MM-dd HH:mm:ss format     */    public static Date stringToDate(String str) {        return parse(str, Constants.YYYY_MM_DD_HH_MM_SS);    }    /**     * get seconds between two dates     *     * @param d1 date1     * @param d2 date2     * @return differ seconds     */    public static long differSec(Date d1, Date d2) {        if(d1 == null || d2 == null){            return 0;        }        return (long) Math.ceil(differMs(d1, d2) / 1000.0);    }    /**     * get ms between two dates     *     * @param d1 date1     * @param d2 date2     * @return differ ms     */    public static long differMs(Date d1, Date d2) {        return Math.abs(d1.getTime() - d2.getTime());    }    /**     * get hours between two dates     *     * @param d1 date1     * @param d2 date2     * @return differ hours     */    public static long diffHours(Date d1, Date d2) {        return (long) Math.ceil(diffMin(d1, d2) / 60.0);    }    /**     * get minutes between two dates     *     * @param d1 date1     * @param d2 date2     * @return differ minutes     */    public static long diffMin(Date d1, Date d2) {        return (long) Math.ceil(differSec(d1, d2) / 60.0);    }    /**     * get the date of the specified date in the days before and after     *     * @param date date     * @param day day     * @return the date of the specified date in the days before and after     */    public static Date getSomeDay(Date date, int day) {        Calendar calendar = Calendar.getInstance();        calendar.setTime(date);        calendar.add(Calendar.DATE, day);        return calendar.getTime();    }    /**     * get the hour of day.     *     * @param date date     * @return hour of day     */    public static int getHourIndex(Date date) {        Calendar calendar = Calendar.getInstance();        calendar.setTime(date);        return calendar.get(Calendar.HOUR_OF_DAY);    }    /**     * compare two dates     *     * @param future future date     * @param old old date     * @return true if future time greater than old time     */    public static boolean compare(Date future, Date old) {        return future.getTime() > old.getTime();    }    /**     * convert schedule string to date     *     * @param schedule schedule     * @return convert schedule string to date     */    public static Date getScheduleDate(String schedule) {        return stringToDate(schedule);    }    /**     * format time to readable     *     * @param ms ms     * @return format time     */    public static String format2Readable(long ms) {        long days = ms / (1000 * 60 * 60 * 24);        long hours = (ms % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60);        long minutes = (ms % (1000 * 60 * 60)) / (1000 * 60);        long seconds = (ms % (1000 * 60)) / 1000;        return String.format("%02d %02d:%02d:%02d", days, hours, minutes, seconds);    }    /**     * get monday     *     * note: Set the first day of the week to Monday, the default is Sunday     * @param date date     * @return get monday     */    public static Date getMonday(Date date) {        Calendar cal = Calendar.getInstance();        cal.setTime(date);        cal.setFirstDayOfWeek(Calendar.MONDAY);        cal.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);        return cal.getTime();    }    /**     * get sunday     *     * note: Set the first day of the week to Monday, the default is Sunday     * @param date date     * @return get sunday     */    public static Date getSunday(Date date) {        Calendar cal = Calendar.getInstance();        cal.setTime(date);        cal.setFirstDayOfWeek(Calendar.MONDAY);        cal.set(Calendar.DAY_OF_WEEK, Calendar.SUNDAY);        return cal.getTime();    }    /**     * get first day of month     *     * @param date date     * @return first day of month     * */    public static Date getFirstDayOfMonth(Date date) {        Calendar cal = Calendar.getInstance();        cal.setTime(date);        cal.set(Calendar.DAY_OF_MONTH, 1);        return cal.getTime();    }    /**     * get some hour of day     *     * @param date date     * @param offsetHour hours     * @return some hour of day     * */    public static Date getSomeHourOfDay(Date date, int offsetHour) {        Calendar cal = Calendar.getInstance();        cal.setTime(date);        cal.set(Calendar.HOUR_OF_DAY, cal.get(Calendar.HOUR_OF_DAY) + offsetHour);        cal.set(Calendar.MINUTE, 0);        cal.set(Calendar.SECOND, 0);        cal.set(Calendar.MILLISECOND, 0);        return cal.getTime();    }    /**     * get last day of month     *     * @param  date date     * @return  get last day of month     */    public static Date getLastDayOfMonth(Date date) {        Calendar cal = Calendar.getInstance();        cal.setTime(date);        cal.add(Calendar.MONTH, 1);        cal.set(Calendar.DAY_OF_MONTH, 1);        cal.add(Calendar.DAY_OF_MONTH, -1);        return cal.getTime();    }    /**     * return YYYY-MM-DD 00:00:00     *     * @param inputDay date     * @return start day     */    public static Date getStartOfDay(Date inputDay) {        Calendar cal = Calendar.getInstance();        cal.setTime(inputDay);        cal.set(Calendar.HOUR_OF_DAY, 0);        cal.set(Calendar.MINUTE, 0);        cal.set(Calendar.SECOND, 0);        cal.set(Calendar.MILLISECOND, 0);        return cal.getTime();    }    /**     * return YYYY-MM-DD 23:59:59     *     * @param inputDay day     * @return end of day     */    public static Date getEndOfDay(Date inputDay) {        Calendar cal = Calendar.getInstance();        cal.setTime(inputDay);        cal.set(Calendar.HOUR_OF_DAY, 23);        cal.set(Calendar.MINUTE, 59);        cal.set(Calendar.SECOND, 59);        cal.set(Calendar.MILLISECOND, 999);        return cal.getTime();    }    /**     * return YYYY-MM-DD 00:00:00     *     * @param inputDay day     * @return start of hour     */    public static Date getStartOfHour(Date inputDay) {        Calendar cal = Calendar.getInstance();        cal.setTime(inputDay);        cal.set(Calendar.MINUTE, 0);        cal.set(Calendar.SECOND, 0);        cal.set(Calendar.MILLISECOND, 0);        return cal.getTime();    }    /**     * return YYYY-MM-DD 23:59:59     *     * @param inputDay day     * @return end of hour     */    public static Date getEndOfHour(Date inputDay) {        Calendar cal = Calendar.getInstance();        cal.setTime(inputDay);        cal.set(Calendar.MINUTE, 59);        cal.set(Calendar.SECOND, 59);        cal.set(Calendar.MILLISECOND, 999);        return cal.getTime();    }    /**     * get current date     * @return current date     */    public static Date getCurrentDate() {        return DateUtils.parse(DateUtils.getCurrentTime(),                Constants.YYYY_MM_DD_HH_MM_SS);    }    /**     * get date     * @param date date     * @param calendarField calendarField     * @param amount amount     * @return date     */    public static Date add(final Date date, final int calendarField, final int amount) {        if (date == null) {            throw new IllegalArgumentException("The date must not be null");        }        final Calendar c = Calendar.getInstance();        c.setTime(date);        c.add(calendarField, amount);        return c.getTime();    }}
\ No newline at end of file

File: dolphinscheduler-common/src/test/java/org/apache/dolphinscheduler/common/utils/HadoopUtilsTest.java
Patch:
@@ -142,7 +142,7 @@ public void getHdfsUdfFileName() {
     @Test
     public void isYarnEnabled() {
         boolean result = hadoopUtils.isYarnEnabled();
-        Assert.assertEquals(false, result);
+        Assert.assertEquals(true, result);
     }
 
     @Test
@@ -185,7 +185,7 @@ public void getApplicationStatus() {
     }
 
     @Test
-    public void getApplicationUrl(){
+    public void getApplicationUrl() throws Exception {
         String application_1516778421218_0042 = hadoopUtils.getApplicationUrl("application_1529051418016_0167");
         logger.info(application_1516778421218_0042);
     }

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/NettyRemotingClient.java
Patch:
@@ -349,7 +349,7 @@ public Channel createChannel(Host host, boolean isSync) {
                 return channel;
             }
         } catch (Exception ex) {
-            logger.info("connect to {} error  {}", host, ex);
+            logger.warn(String.format("connect to %s error", host), ex);
         }
         return null;
     }

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/CommandType.java
Patch:
@@ -1 +1 @@
-/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *    http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.dolphinscheduler.remote.command;public enum CommandType {    /**     *  roll view log request     */    ROLL_VIEW_LOG_REQUEST,    /**     *  roll view log response     */    ROLL_VIEW_LOG_RESPONSE,    /**     * view whole log request     */    VIEW_WHOLE_LOG_REQUEST,    /**     * view whole log response     */    VIEW_WHOLE_LOG_RESPONSE,    /**     * get log bytes request     */    GET_LOG_BYTES_REQUEST,    /**     * get log bytes response     */    GET_LOG_BYTES_RESPONSE,    WORKER_REQUEST,    MASTER_RESPONSE,    /**     * execute task request     */    TASK_EXECUTE_REQUEST,    /**     * execute task ack     */    TASK_EXECUTE_ACK,    /**     * execute task response     */    TASK_EXECUTE_RESPONSE,    /**     * kill task     */    TASK_KILL_REQUEST,    /**     * kill task response     */    TASK_KILL_RESPONSE,    /**     *  ping     */    PING,    /**     *  pong     */    PONG;}
\ No newline at end of file
+/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *    http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.dolphinscheduler.remote.command;public enum CommandType {    /**     * remove task log request,     */    REMOVE_TAK_LOG_REQUEST,    /**     * remove task log response     */    REMOVE_TAK_LOG_RESPONSE,    /**     *  roll view log request     */    ROLL_VIEW_LOG_REQUEST,    /**     *  roll view log response     */    ROLL_VIEW_LOG_RESPONSE,    /**     * view whole log request     */    VIEW_WHOLE_LOG_REQUEST,    /**     * view whole log response     */    VIEW_WHOLE_LOG_RESPONSE,    /**     * get log bytes request     */    GET_LOG_BYTES_REQUEST,    /**     * get log bytes response     */    GET_LOG_BYTES_RESPONSE,    WORKER_REQUEST,    MASTER_RESPONSE,    /**     * execute task request     */    TASK_EXECUTE_REQUEST,    /**     * execute task ack     */    TASK_EXECUTE_ACK,    /**     * execute task response     */    TASK_EXECUTE_RESPONSE,    /**     * kill task     */    TASK_KILL_REQUEST,    /**     * kill task response     */    TASK_KILL_RESPONSE,    /**     *  ping     */    PING,    /**     *  pong     */    PONG;}
\ No newline at end of file

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/log/LoggerServer.java
Patch:
@@ -55,6 +55,7 @@ public LoggerServer(){
         this.server.registerProcessor(CommandType.GET_LOG_BYTES_REQUEST, requestProcessor, requestProcessor.getExecutor());
         this.server.registerProcessor(CommandType.ROLL_VIEW_LOG_REQUEST, requestProcessor, requestProcessor.getExecutor());
         this.server.registerProcessor(CommandType.VIEW_WHOLE_LOG_REQUEST, requestProcessor, requestProcessor.getExecutor());
+        this.server.registerProcessor(CommandType.REMOVE_TAK_LOG_REQUEST, requestProcessor, requestProcessor.getExecutor());
     }
 
     /**

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/processor/TaskAckProcessor.java
Patch:
@@ -70,7 +70,7 @@ public TaskAckProcessor(){
     }
 
     /**
-     *  task ack process
+     * task ack process
      * @param channel channel channel
      * @param command command TaskExecuteAckCommand
      */

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/DependentTaskExecThread.java
Patch:
@@ -148,7 +148,7 @@ private Boolean waitTaskQuit() {
                 if ( allDependentTaskFinish() || taskInstance.getState().typeIsFinished()){
                     break;
                 }
-                // updateProcessInstance task instance
+                // update process task
                 taskInstance = processService.findTaskInstanceById(taskInstance.getId());
                 processInstance = processService.findProcessInstanceById(processInstance.getId());
                 Thread.sleep(Constants.SLEEP_TIME_MILLIS);

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/config/WorkerConfig.java
Patch:
@@ -38,7 +38,7 @@ public class WorkerConfig {
     @Value("${worker.max.cpuload.avg:-1}")
     private int workerMaxCpuloadAvg;
 
-    @Value("${worker.reserved.memory:0.5}")
+    @Value("${worker.reserved.memory:0.3}")
     private double workerReservedMemory;
 
     @Value("${worker.group: default}")

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/processor/TaskKillProcessor.java
Patch:
@@ -93,6 +93,7 @@ public void process(Channel channel, Command command) {
 
         TaskKillResponseCommand taskKillResponseCommand = buildKillTaskResponseCommand(killCommand,result);
         taskCallbackService.sendResult(taskKillResponseCommand.getTaskInstanceId(), taskKillResponseCommand.convert2Command());
+        taskExecutionContextCacheManager.removeByTaskInstanceId(taskKillResponseCommand.getTaskInstanceId());
     }
 
     /**

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/shell/ShellTask.java
Patch:
@@ -116,7 +116,7 @@ public void cancelApplication(boolean cancelApplication) throws Exception {
    */
   private String buildCommand() throws Exception {
     // generate scripts
-    String fileName = String.format("%s/%s_node.sh",
+    String fileName = String.format("%s/%s_node.%s",
             taskExecutionContext.getExecutePath(),
             taskExecutionContext.getTaskAppId(), OSUtils.isWindows() ? "bat" : "sh");
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/sql/SqlTask.java
Patch:
@@ -178,7 +178,7 @@ private SqlBinds getSqlAndSqlParamsMap(String sql) {
         }
         //new
         //replace variable TIME with $[YYYYmmddd...] in sql when history run job and batch complement job
-        sql = ParameterUtils.replaceScheduleTime(sql, taskExecutionContext.getScheduleTime(), paramsMap);
+        sql = ParameterUtils.replaceScheduleTime(sql, taskExecutionContext.getScheduleTime());
         // special characters need to be escaped, ${} needs to be escaped
         String rgex = "['\"]*\\$\\{(.*?)\\}['\"]*";
         setSqlParamsMap(sql, rgex, sqlParamsMap, paramsMap);

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/sqoop/generator/sources/MysqlSourceGenerator.java
Patch:
@@ -91,7 +91,7 @@ public String generate(SqoopParameters sqoopParameters,TaskExecutionContext task
 
                         if(StringUtils.isNotEmpty(columnMap.toString())){
                             result.append(" --map-column-hive ")
-                                    .append(columnMap.substring(0,columnMap.length()-1));
+                                    .append(columnMap.substring(0,columnMap.length() - 1));
                         }
                     }
 
@@ -105,7 +105,7 @@ public String generate(SqoopParameters sqoopParameters,TaskExecutionContext task
 
                         if(StringUtils.isNotEmpty(columnMap.toString())){
                             result.append(" --map-column-java ")
-                                    .append(columnMap.substring(0,columnMap.length()-1));
+                                    .append(columnMap.substring(0,columnMap.length() - 1));
                         }
                     }
                 }

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/master/consumer/TaskPriorityQueueConsumerTest.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.dolphinscheduler.common.enums.ExecutionStatus;
 import org.apache.dolphinscheduler.common.enums.Priority;
 import org.apache.dolphinscheduler.dao.entity.*;
+import org.apache.dolphinscheduler.server.master.config.MasterConfig;
 import org.apache.dolphinscheduler.server.master.dispatch.ExecutorDispatcher;
 import org.apache.dolphinscheduler.server.master.dispatch.executor.NettyExecutorManager;
 import org.apache.dolphinscheduler.server.registry.DependencyConfig;
@@ -47,7 +48,7 @@
 @RunWith(SpringJUnit4ClassRunner.class)
 @ContextConfiguration(classes={DependencyConfig.class, SpringApplicationContext.class, SpringZKServer.class,
         NettyExecutorManager.class, ExecutorDispatcher.class, ZookeeperRegistryCenter.class, TaskPriorityQueueConsumer.class,
-        ZookeeperNodeManager.class, ZookeeperCachedOperator.class, ZookeeperConfig.class})
+        ZookeeperNodeManager.class, ZookeeperCachedOperator.class, ZookeeperConfig.class, MasterConfig.class})
 public class TaskPriorityQueueConsumerTest {
 
 

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/master/registry/MasterRegistryTest.java
Patch:
@@ -33,7 +33,7 @@
 import java.util.List;
 import java.util.concurrent.TimeUnit;
 
-
+import static org.apache.dolphinscheduler.common.Constants.HEARTBEAT_FOR_ZOOKEEPER_INFO_LENGTH;
 /**
  * master registry test
  */
@@ -57,7 +57,7 @@ public void testRegistry() throws InterruptedException {
         TimeUnit.SECONDS.sleep(masterConfig.getMasterHeartbeatInterval() + 2); //wait heartbeat info write into zk node
         String masterNodePath = masterPath + "/" + (Constants.LOCAL_ADDRESS + ":" + masterConfig.getListenPort());
         String heartbeat = zookeeperRegistryCenter.getZookeeperCachedOperator().get(masterNodePath);
-        Assert.assertEquals(5, heartbeat.split(",").length);
+        Assert.assertEquals(HEARTBEAT_FOR_ZOOKEEPER_INFO_LENGTH, heartbeat.split(",").length);
     }
 
     @Test

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/worker/registry/WorkerRegistryTest.java
Patch:
@@ -36,6 +36,8 @@
 
 import static org.apache.dolphinscheduler.common.Constants.DEFAULT_WORKER_GROUP;
 
+
+import static org.apache.dolphinscheduler.common.Constants.HEARTBEAT_FOR_ZOOKEEPER_INFO_LENGTH;
 /**
  * worker registry test
  */
@@ -61,7 +63,7 @@ public void testRegistry() throws InterruptedException {
         String instancePath = workerPath + "/" + workerConfig.getWorkerGroup().trim() + "/" + (OSUtils.getHost() + ":" + workerConfig.getListenPort());
         TimeUnit.SECONDS.sleep(workerConfig.getWorkerHeartbeatInterval() + 2); //wait heartbeat info write into zk node
         String heartbeat = zookeeperRegistryCenter.getZookeeperCachedOperator().get(instancePath);
-        Assert.assertEquals(5, heartbeat.split(",").length);
+        Assert.assertEquals(HEARTBEAT_FOR_ZOOKEEPER_INFO_LENGTH, heartbeat.split(",").length);
     }
 
     @Test

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/worker/task/datax/DataxTaskTest.java
Patch:
@@ -21,6 +21,7 @@
 import java.util.Arrays;
 import java.util.Date;
 import java.util.List;
+import java.util.Map;
 import java.util.UUID;
 
 import com.fasterxml.jackson.databind.JsonNode;

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/quartz/ProcessScheduleJob.java
Patch:
@@ -32,6 +32,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.util.Assert;
+import org.springframework.util.StringUtils;
 
 import java.util.Date;
 
@@ -98,7 +99,8 @@ public void execute(JobExecutionContext context) throws JobExecutionException {
         command.setScheduleTime(scheduledFireTime);
         command.setStartTime(fireTime);
         command.setWarningGroupId(schedule.getWarningGroupId());
-        command.setWorkerGroup(schedule.getWorkerGroup());
+        String workerGroup = StringUtils.isEmpty(schedule.getWorkerGroup()) ? Constants.DEFAULT_WORKER_GROUP : schedule.getWorkerGroup();
+        command.setWorkerGroup(workerGroup);
         command.setWarningType(schedule.getWarningType());
         command.setProcessInstancePriority(schedule.getProcessInstancePriority());
 

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/zk/ZKServer.java
Patch:
@@ -95,8 +95,9 @@ public void shutdown() {
      * @param port The port to listen on
      */
     public static void startLocalZkServer(final int port) {
-
-        startLocalZkServer(port, System.getProperty("user.dir") +"/zookeeper_data", ZooKeeperServer.DEFAULT_TICK_TIME,"20");
+        String zkDataDir = System.getProperty("user.dir") +"/zookeeper_data";
+        logger.info("zk server starting, data dir path:{}" , zkDataDir);
+        startLocalZkServer(port, zkDataDir, ZooKeeperServer.DEFAULT_TICK_TIME,"60");
     }
 
     /**

File: dolphinscheduler-common/src/test/java/org/apache/dolphinscheduler/common/utils/HadoopUtilsTest.java
Patch:
@@ -142,7 +142,7 @@ public void getHdfsUdfFileName() {
     @Test
     public void isYarnEnabled() {
         boolean result = hadoopUtils.isYarnEnabled();
-        Assert.assertEquals(false, result);
+        Assert.assertEquals(true, result);
     }
 
     @Test
@@ -185,7 +185,7 @@ public void getApplicationStatus() {
     }
 
     @Test
-    public void getApplicationUrl(){
+    public void getApplicationUrl() throws Exception {
         String application_1516778421218_0042 = hadoopUtils.getApplicationUrl("application_1529051418016_0167");
         logger.info(application_1516778421218_0042);
     }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ResourcesService.java
Patch:
@@ -980,7 +980,7 @@ public org.springframework.core.io.Resource downloadResource(int resourceId) thr
         User user = userMapper.queryDetailsById(resource.getUserId());
         String tenantCode = tenantMapper.queryById(user.getTenantId()).getTenantCode();
 
-        String hdfsFileName = HadoopUtils.getHdfsFileName(resource.getType(), tenantCode, resource.getAlias());
+        String hdfsFileName = HadoopUtils.getHdfsFileName(resource.getType(), tenantCode, resource.getFullName());
 
         String localFileName = FileUtils.getDownloadFilename(resource.getAlias());
         logger.info("resource hdfs path is {} ", hdfsFileName);

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessService.java
Patch:
@@ -894,7 +894,7 @@ private void createSubWorkProcessCommand(ProcessInstance parentProcessInstance,
 
         CommandType fatherType = parentProcessInstance.getCommandType();
         CommandType commandType = fatherType;
-        if(childInstance == null || commandType == CommandType.REPEAT_RUNNING){
+        if(childInstance == null){
             String fatherHistoryCommand = parentProcessInstance.getHistoryCmd();
             // sub process must begin with schedule/complement data
             // if father begin with scheduler/complement data

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/Constants.java
Patch:
@@ -304,7 +304,7 @@ private Constants() {
     /**
      * user name regex
      */
-    public static final Pattern REGEX_USER_NAME = Pattern.compile("^[a-zA-Z0-9._-]{3,20}$");
+    public static final Pattern REGEX_USER_NAME = Pattern.compile("^[a-zA-Z0-9._-]{3,39}$");
 
     /**
      * email regex

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/ExecutionStatus.java
Patch:
@@ -76,7 +76,7 @@ public boolean typeIsSuccess(){
   * @return status
   */
    public boolean typeIsFailure(){
-     return this == FAILURE || this == NEED_FAULT_TOLERANCE;
+     return this == FAILURE || this == NEED_FAULT_TOLERANCE || this == KILL;
    }
 
  /**

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessService.java
Patch:
@@ -337,11 +337,13 @@ public void recurseFindSubProcessId(int parentId, List<Integer> ids){
 
             for (TaskNode taskNode : taskNodeList){
                 String parameter = taskNode.getParams();
-                if (parameter.contains(CMDPARAM_SUB_PROCESS_DEFINE_ID)){
+                JSONObject parameterJson = JSONObject.parseObject(parameter);
+                if (parameterJson.getInteger(CMDPARAM_SUB_PROCESS_DEFINE_ID) != null){
                     SubProcessParameters subProcessParam = JSON.parseObject(parameter, SubProcessParameters.class);
                     ids.add(subProcessParam.getProcessDefinitionId());
                     recurseFindSubProcessId(subProcessParam.getProcessDefinitionId(),ids);
                 }
+
             }
         }
     }

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/WorkerServer.java
Patch:
@@ -124,9 +124,9 @@ public class WorkerServer implements IStoppable {
     private SpringApplicationContext springApplicationContext;
 
     /**
-     * master server startup
+     * worker server startup
      *
-     * master server not use web service
+     * worker server not use web service
      * @param args arguments
      */
     public static void main(String[] args) {

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/SchedulerService.java
Patch:
@@ -365,6 +365,7 @@ public Map<String, Object> setScheduleState(User loginUser,
 
         if (masterServers.size() == 0) {
             putMsg(result, Status.MASTER_NOT_EXISTS);
+            return result;
         }
 
         // set status

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ExecutorService.java
Patch:
@@ -498,7 +498,7 @@ private int createCommand(CommandType commandType, int processDefineId,
         // determine whether to complement
         if(commandType == CommandType.COMPLEMENT_DATA){
             runMode = (runMode == null) ? RunMode.RUN_MODE_SERIAL : runMode;
-            if(null != start && null != end && start.before(end)){
+            if(null != start && null != end && !start.after(end)){
                 if(runMode == RunMode.RUN_MODE_SERIAL){
                     cmdParam.put(CMDPARAM_COMPLEMENT_DATA_START_DATE, DateUtils.dateToString(start));
                     cmdParam.put(CMDPARAM_COMPLEMENT_DATA_END_DATE, DateUtils.dateToString(end));

File: dolphinscheduler-alert/src/main/java/org/apache/dolphinscheduler/alert/utils/EnterpriseWeChatUtils.java
Patch:
@@ -48,7 +48,7 @@ public class EnterpriseWeChatUtils {
     private static final String ENTERPRISE_WE_CHAT_SECRET = PropertyUtils.getString(Constants.ENTERPRISE_WECHAT_SECRET);
 
     private static final String ENTERPRISE_WE_CHAT_TOKEN_URL = PropertyUtils.getString(Constants.ENTERPRISE_WECHAT_TOKEN_URL);
-    private static final String ENTERPRISE_WE_CHAT_TOKEN_URL_REPLACE = ENTERPRISE_WE_CHAT_TOKEN_URL
+    private static final String ENTERPRISE_WE_CHAT_TOKEN_URL_REPLACE = ENTERPRISE_WE_CHAT_TOKEN_URL == null ? null : ENTERPRISE_WE_CHAT_TOKEN_URL
             .replaceAll("\\$corpId", ENTERPRISE_WE_CHAT_CORP_ID)
             .replaceAll("\\$secret", ENTERPRISE_WE_CHAT_SECRET);
 
@@ -266,5 +266,4 @@ public static String markdownByAlert(Alert alert){
         return result;
 
     }
-
 }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/SchedulerController.java
Patch:
@@ -76,7 +76,7 @@ public class SchedulerController extends BaseController {
     @ApiOperation(value = "createSchedule", notes= "CREATE_SCHEDULE_NOTES")
     @ApiImplicitParams({
             @ApiImplicitParam(name = "processDefinitionId", value = "PROCESS_DEFINITION_ID", required = true, dataType = "Int", example = "100"),
-            @ApiImplicitParam(name = "schedule", value = "SCHEDULE", dataType = "Int", example = "100"),
+            @ApiImplicitParam(name = "schedule", value = "SCHEDULE", dataType = "String", example = "{'startTime':'2019-06-10 00:00:00','endTime':'2019-06-13 00:00:00','crontab':'0 0 3/6 * * ? *'}"),
             @ApiImplicitParam(name = "warningType", value = "WARNING_TYPE", type ="WarningType"),
             @ApiImplicitParam(name = "warningGroupId", value = "WARNING_GROUP_ID", dataType = "Int", example = "100"),
             @ApiImplicitParam(name = "failureStrategy", value = "FAILURE_STRATEGY", type ="FailureStrategy"),
@@ -132,7 +132,7 @@ public Result createSchedule(@ApiIgnore @RequestAttribute(value = SESSION_USER)
     @ApiOperation(value = "updateSchedule", notes= "UPDATE_SCHEDULE_NOTES")
     @ApiImplicitParams({
             @ApiImplicitParam(name = "id", value = "SCHEDULE_ID", required = true, dataType = "Int", example = "100"),
-            @ApiImplicitParam(name = "schedule", value = "SCHEDULE", dataType = "Int", example = "100"),
+            @ApiImplicitParam(name = "schedule", value = "SCHEDULE", dataType = "String", example = "{'startTime':'2019-06-10 00:00:00','endTime':'2019-06-13 00:00:00','crontab':'0 0 3/6 * * ? *'}"),
             @ApiImplicitParam(name = "warningType", value = "WARNING_TYPE", type ="WarningType"),
             @ApiImplicitParam(name = "warningGroupId", value = "WARNING_GROUP_ID", dataType = "Int", example = "100"),
             @ApiImplicitParam(name = "failureStrategy", value = "FAILURE_STRATEGY", type ="FailureStrategy"),

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/utils/FastJsonSerializer.java
Patch:
@@ -54,7 +54,7 @@ public static <T> String serializeToString(T obj)  {
 	 * @return deserialize type
 	 */
 	public static <T> T deserialize(byte[] src, Class<T> clazz) {
-		return JSON.parseObject(new String(src, Constants.UTF8), clazz);
+		return JSON.parseObject(src, clazz);
 	}
 
 }

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/Constants.java
Patch:
@@ -568,7 +568,7 @@ private Constants() {
     /**
      * heartbeat for zk info length
      */
-    public static final int HEARTBEAT_FOR_ZOOKEEPER_INFO_LENGTH = 7;
+    public static final int HEARTBEAT_FOR_ZOOKEEPER_INFO_LENGTH = 5;
 
 
     /**

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/datasource/BaseDataSource.java
Patch:
@@ -57,6 +57,7 @@ public String getPrincipal() {
   public void setPrincipal(String principal) {
     this.principal = principal;
   }
+
   /**
    * test whether the data source can be connected successfully
    * @throws Exception

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/datasource/DB2ServerDataSource.java
Patch:
@@ -33,7 +33,7 @@ public class DB2ServerDataSource extends BaseDataSource {
 
     /**
      * gets the JDBC url for the data source connection
-     * @return
+     * @return jdbc url
      */
     @Override
     public String getJdbcUrl() {

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/datasource/HiveDataSource.java
Patch:
@@ -34,7 +34,7 @@ public class HiveDataSource extends BaseDataSource {
 
   /**
    * gets the JDBC url for the data source connection
-   * @return
+   * @return jdbc url
    */
   @Override
   public String getJdbcUrl() {

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/datasource/MySQLDataSource.java
Patch:
@@ -34,7 +34,7 @@ public class MySQLDataSource extends BaseDataSource {
 
   /**
    * gets the JDBC url for the data source connection
-   * @return
+   * @return jdbc url
    */
   @Override
   public String getJdbcUrl() {

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/datasource/OracleDataSource.java
Patch:
@@ -33,7 +33,7 @@ public class OracleDataSource extends BaseDataSource {
 
     /**
      * gets the JDBC url for the data source connection
-     * @return
+     * @return jdbc url
      */
     @Override
     public String getJdbcUrl() {

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/datasource/PostgreDataSource.java
Patch:
@@ -35,7 +35,7 @@ public class PostgreDataSource extends BaseDataSource {
 
   /**
    * gets the JDBC url for the data source connection
-   * @return
+   * @return jdbc url
    */
   @Override
   public String getJdbcUrl() {

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/datasource/SQLServerDataSource.java
Patch:
@@ -33,7 +33,7 @@ public class SQLServerDataSource extends BaseDataSource {
 
     /**
      * gets the JDBC url for the data source connection
-     * @return
+     * @return jdbc url
      */
     @Override
     public String getJdbcUrl() {

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/datasource/SparkDataSource.java
Patch:
@@ -34,7 +34,7 @@ public class SparkDataSource extends BaseDataSource {
 
   /**
    * gets the JDBC url for the data source connection
-   * @return
+   * @return jdbc url
    */
   @Override
   public String getJdbcUrl() {

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/ResourceMapper.java
Patch:
@@ -88,7 +88,8 @@ IPage<Resource> queryResourcePaging(IPage<Resource> page,
     /**
      * list authorized resource
      * @param userId userId
-     * @param resNames resource names
+     * @param resNames resNames
+     * @param <T> T
      * @return resource list
      */
     <T> List<Resource> listAuthorizedResource(@Param("userId") int userId,@Param("resNames")T[] resNames);

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/ScheduleMapper.java
Patch:
@@ -62,8 +62,8 @@ IPage<Schedule> queryByProcessDefineIdPaging(IPage<Schedule> page,
 
     /**
      * query schedule list by process definition id
-     * @param processDefinitionId
-     * @return
+     * @param processDefinitionId processDefinitionId
+     * @return schedule list
      */
     List<Schedule> queryReleaseSchedulerListByProcessDefinitionId(@Param("processDefinitionId") int processDefinitionId);
 

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/UdfFuncMapper.java
Patch:
@@ -81,8 +81,9 @@ List<UdfFunc> getUdfFuncByType(@Param("userId") int userId,
     /**
      * list authorized UDF function
      * @param userId userId
-     * @param udfIds UDF function id array
-     * @return UDF function list
+     * @param udfIds udfIds
+     * @param <T> T
+     * @return Udf function list
      */
     <T> List<UdfFunc> listAuthorizedUdfFunc (@Param("userId") int userId,@Param("udfIds")T[] udfIds);
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/UdfFuncService.java
Patch:
@@ -118,7 +118,7 @@ public Result createUdfFunction(User loginUser,
         }
         udf.setDescription(desc);
         udf.setResourceId(resourceId);
-        udf.setResourceName(resource.getAlias());
+        udf.setResourceName(resource.getFullName());
         udf.setType(type);
 
         udf.setCreateTime(now);
@@ -226,7 +226,7 @@ public Map<String, Object> updateUdfFunc(int udfFuncId,
         }
         udf.setDescription(desc);
         udf.setResourceId(resourceId);
-        udf.setResourceName(resource.getAlias());
+        udf.setResourceName(resource.getFullName());
         udf.setType(type);
 
         udf.setUpdateTime(now);

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/task/AbstractParameters.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.dolphinscheduler.common.task;
 
 import org.apache.dolphinscheduler.common.process.Property;
+import org.apache.dolphinscheduler.common.process.ResourceInfo;
 
 import java.util.LinkedHashMap;
 import java.util.List;
@@ -31,7 +32,7 @@ public abstract class AbstractParameters implements IParameters {
   public abstract boolean checkParameters();
 
   @Override
-  public abstract List<String> getResourceFilesList();
+  public abstract List<ResourceInfo> getResourceFilesList();
 
   /**
    * local parameters

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/task/IParameters.java
Patch:
@@ -16,6 +16,8 @@
  */
 package org.apache.dolphinscheduler.common.task;
 
+import org.apache.dolphinscheduler.common.process.ResourceInfo;
+
 import java.util.List;
 
 /**
@@ -34,5 +36,5 @@ public interface IParameters {
      *
      * @return resource files list
      */
-    List<String> getResourceFilesList();
+    List<ResourceInfo> getResourceFilesList();
 }

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/task/conditions/ConditionsParameters.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.apache.dolphinscheduler.common.enums.DependentRelation;
 import org.apache.dolphinscheduler.common.model.DependentTaskModel;
+import org.apache.dolphinscheduler.common.process.ResourceInfo;
 import org.apache.dolphinscheduler.common.task.AbstractParameters;
 
 import java.util.List;
@@ -41,7 +42,7 @@ public boolean checkParameters() {
     }
 
     @Override
-    public List<String> getResourceFilesList() {
+    public List<ResourceInfo> getResourceFilesList() {
         return null;
     }
 

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/task/datax/DataxParameters.java
Patch:
@@ -20,6 +20,7 @@
 import java.util.List;
 
 import org.apache.commons.lang.StringUtils;
+import org.apache.dolphinscheduler.common.process.ResourceInfo;
 import org.apache.dolphinscheduler.common.task.AbstractParameters;
 
 /**
@@ -198,7 +199,7 @@ public boolean checkParameters() {
     }
 
     @Override
-    public List<String> getResourceFilesList() {
+    public List<ResourceInfo> getResourceFilesList() {
         return new ArrayList<>();
     }
 

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/task/dependent/DependentParameters.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.apache.dolphinscheduler.common.enums.DependentRelation;
 import org.apache.dolphinscheduler.common.model.DependentTaskModel;
+import org.apache.dolphinscheduler.common.process.ResourceInfo;
 import org.apache.dolphinscheduler.common.task.AbstractParameters;
 
 import java.util.ArrayList;
@@ -36,7 +37,7 @@ public boolean checkParameters() {
     }
 
     @Override
-    public List<String> getResourceFilesList() {
+    public List<ResourceInfo> getResourceFilesList() {
         return new ArrayList<>();
     }
 

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/task/http/HttpParameters.java
Patch:
@@ -19,6 +19,7 @@
 import org.apache.dolphinscheduler.common.enums.HttpCheckCondition;
 import org.apache.dolphinscheduler.common.enums.HttpMethod;
 import org.apache.dolphinscheduler.common.process.HttpProperty;
+import org.apache.dolphinscheduler.common.process.ResourceInfo;
 import org.apache.dolphinscheduler.common.task.AbstractParameters;
 import org.apache.commons.lang.StringUtils;
 
@@ -62,7 +63,7 @@ public boolean checkParameters() {
     }
 
     @Override
-    public List<String> getResourceFilesList() {
+    public List<ResourceInfo> getResourceFilesList() {
         return new ArrayList<>();
     }
 

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/task/procedure/ProcedureParameters.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dolphinscheduler.common.task.procedure;
 
+import org.apache.dolphinscheduler.common.process.ResourceInfo;
 import org.apache.dolphinscheduler.common.task.AbstractParameters;
 import org.apache.commons.lang.StringUtils;
 
@@ -74,7 +75,7 @@ public boolean checkParameters() {
   }
 
   @Override
-  public List<String> getResourceFilesList() {
+  public List<ResourceInfo> getResourceFilesList() {
     return new ArrayList<>();
   }
 

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/task/sql/SqlParameters.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dolphinscheduler.common.task.sql;
 
+import org.apache.dolphinscheduler.common.process.ResourceInfo;
 import org.apache.dolphinscheduler.common.task.AbstractParameters;
 import org.apache.commons.lang.StringUtils;
 
@@ -189,7 +190,7 @@ public boolean checkParameters() {
     }
 
     @Override
-    public List<String> getResourceFilesList() {
+    public List<ResourceInfo> getResourceFilesList() {
         return new ArrayList<>();
     }
 

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/task/sqoop/SqoopParameters.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dolphinscheduler.common.task.sqoop;
 
+import org.apache.dolphinscheduler.common.process.ResourceInfo;
 import org.apache.dolphinscheduler.common.task.AbstractParameters;
 import org.apache.dolphinscheduler.common.utils.StringUtils;
 
@@ -111,7 +112,7 @@ public boolean checkParameters() {
     }
 
     @Override
-    public List<String> getResourceFilesList() {
+    public List<ResourceInfo> getResourceFilesList() {
        return new ArrayList<>();
     }
 }

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/task/subprocess/SubProcessParameters.java
Patch:
@@ -15,6 +15,7 @@
  * limitations under the License.
  */
 package org.apache.dolphinscheduler.common.task.subprocess;
+import org.apache.dolphinscheduler.common.process.ResourceInfo;
 import org.apache.dolphinscheduler.common.task.AbstractParameters;
 
 import java.util.ArrayList;
@@ -42,7 +43,7 @@ public boolean checkParameters() {
     }
 
     @Override
-    public List<String> getResourceFilesList() {
+    public List<ResourceInfo> getResourceFilesList() {
         return new ArrayList<>();
     }
 }
\ No newline at end of file

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/ConnectionFactoryTest.java
Patch:
@@ -31,7 +31,7 @@ public class ConnectionFactoryTest {
      */
     @Test
     public void testConnection()throws Exception{
-        Connection connection = ConnectionFactory.getInstance().getDataSource().getPooledConnection().getConnection();
+        Connection connection = ConnectionFactory.getInstance().getDataSource().getConnection();
         Assert.assertTrue(connection != null);
     }
 }
\ No newline at end of file

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/OSUtils.java
Patch:
@@ -419,13 +419,13 @@ public static boolean isWindows() {
    * @return check memory and cpu usage
    */
   public static Boolean checkResource(double systemCpuLoad, double systemReservedMemory){
-    // judging usage
+    // system load average
     double loadAverage = OSUtils.loadAverage();
-    //
+    // system available physical memory
     double availablePhysicalMemorySize = OSUtils.availablePhysicalMemorySize();
 
     if(loadAverage > systemCpuLoad || availablePhysicalMemorySize < systemReservedMemory){
-      logger.warn("load or availablePhysicalMemorySize(G) is too high, it's availablePhysicalMemorySize(G):{},loadAvg:{}", availablePhysicalMemorySize , loadAverage);
+      logger.warn("load is too high or availablePhysicalMemorySize(G) is too low, it's availablePhysicalMemorySize(G):{},loadAvg:{}", availablePhysicalMemorySize , loadAverage);
       return false;
     }else{
       return true;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/config/WorkerConfig.java
Patch:
@@ -34,7 +34,7 @@ public class WorkerConfig {
     @Value("${worker.max.cpuload.avg}")
     private int workerMaxCpuloadAvg;
 
-    @Value("${master.reserved.memory}")
+    @Value("${worker.reserved.memory}")
     private double workerReservedMemory;
 
     public int getWorkerExecThreads() {

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterExecThread.java
Patch:
@@ -674,9 +674,9 @@ private DependResult isTaskDepsComplete(String taskName) {
         TaskNode taskNode = dag.getNode(taskName);
         List<String> depNameList = taskNode.getDepList();
         for(String depsNode : depNameList ){
-
-            if(forbiddenTaskList.containsKey(depsNode) ||
-                    skipTaskNodeList.containsKey(depsNode)){
+            if(!dag.containsNode(depsNode)
+                    || forbiddenTaskList.containsKey(depsNode)
+                    || skipTaskNodeList.containsKey(depsNode)){
                 continue;
             }
             // dependencies must be fully completed

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/NettyRemotingClient.java
Patch:
@@ -301,7 +301,7 @@ public Channel createChannel(Address address, boolean isSync) {
                 return channel;
             }
         } catch (Exception ex) {
-            logger.info("connect to {} error  {}", address, ex);
+            logger.error("connect to {} error", address, ex);
         }
         return null;
     }

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/handler/NettyServerHandler.java
Patch:
@@ -117,7 +117,7 @@ public void run() {
                     try {
                         pair.getLeft().process(channel, msg);
                     } catch (Throwable ex) {
-                        logger.error("process msg {} error : {}", msg, ex);
+                        logger.error("process msg {} error", msg, ex);
                     }
                 }
             };

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/utils/CheckUtilsTest.java
Patch:
@@ -211,6 +211,7 @@ public void testCheckTaskNodeParameters() {
         // DataxParameters
         DataxParameters dataxParameters = new DataxParameters();
         assertFalse(CheckUtils.checkTaskNodeParameters(JSONUtils.toJsonString(dataxParameters), TaskType.DATAX.toString()));
+        dataxParameters.setCustomConfig(0);
         dataxParameters.setDataSource(111);
         dataxParameters.setDataTarget(333);
         dataxParameters.setSql("sql");

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/AlertDao.java
Patch:
@@ -50,8 +50,8 @@ public class AlertDao extends AbstractBaseDao {
 
     @Override
     protected void init() {
-        alertMapper = ConnectionFactory.getMapper(AlertMapper.class);
-        userAlertGroupMapper = ConnectionFactory.getMapper(UserAlertGroupMapper.class);
+        alertMapper = ConnectionFactory.getInstance().getMapper(AlertMapper.class);
+        userAlertGroupMapper = ConnectionFactory.getInstance().getMapper(UserAlertGroupMapper.class);
     }
 
     /**

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/upgrade/UpgradeDao.java
Patch:
@@ -53,7 +53,7 @@ protected void init() {
      * @return DruidDataSource
      */
     public static DruidDataSource getDataSource(){
-        DruidDataSource dataSource = ConnectionFactory.getDataSource();
+        DruidDataSource dataSource = ConnectionFactory.getInstance().getDataSource();
         dataSource.setInitialSize(2);
         dataSource.setMinIdle(2);
         dataSource.setMaxActive(2);

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/ConnectionFactoryTest.java
Patch:
@@ -31,7 +31,7 @@ public class ConnectionFactoryTest {
      */
     @Test
     public void testConnection()throws Exception{
-        Connection connection = ConnectionFactory.getDataSource().getPooledConnection().getConnection();
+        Connection connection = ConnectionFactory.getInstance().getDataSource().getPooledConnection().getConnection();
         Assert.assertTrue(connection != null);
     }
 }
\ No newline at end of file

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/ApiApplicationServer.java
Patch:
@@ -25,7 +25,9 @@
 
 @SpringBootApplication
 @ServletComponentScan
-@ComponentScan("org.apache.dolphinscheduler")
+@ComponentScan({"org.apache.dolphinscheduler.api",
+        "org.apache.dolphinscheduler.dao",
+        "org.apache.dolphinscheduler.service"})
 public class ApiApplicationServer extends SpringBootServletInitializer {
 
   public static void main(String[] args) {

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterExecThread.java
Patch:
@@ -1062,7 +1062,7 @@ private void killTheOtherTasks() {
 
             TaskInstance taskInstance = taskExecThread.getTaskInstance();
             taskInstance = processService.findTaskInstanceById(taskInstance.getId());
-            if(taskInstance.getState().typeIsFinished()){
+            if(taskInstance != null && taskInstance.getState().typeIsFinished()){
                 continue;
             }
 

File: dolphinscheduler-alert/src/main/java/org/apache/dolphinscheduler/alert/utils/MailUtils.java
Patch:
@@ -334,7 +334,7 @@ public static void deleteFile(File file){
      * @param e the exception
      */
     private static void handleException(Collection<String> receivers, Map<String, Object> retMap, Exception e) {
-        logger.error("Send email to {} failed {}", receivers, e);
+        logger.error("Send email to {} failed", receivers, e);
         retMap.put(Constants.MESSAGE, "Send email to {" + String.join(",", receivers) + "} failed，" + e.toString());
     }
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/utils/ZooKeeperState.java
Patch:
@@ -121,7 +121,7 @@ private String getStringValueFromLine(String line) {
 	private class SendThread extends Thread {
 		private String cmd;
 
-		public String ret = "";
+		private String ret = "";
 
 		public SendThread(String cmd) {
 			this.cmd = cmd;

File: dolphinscheduler-alert/src/main/java/org/apache/dolphinscheduler/alert/utils/FuncUtils.java
Patch:
@@ -20,7 +20,7 @@
 
 public class FuncUtils {
 
-    static public String mkString(Iterable<String> list, String split) {
+    public static String mkString(Iterable<String> list, String split) {
 
         if (null == list || StringUtils.isEmpty(split)){
             return null;

File: dolphinscheduler-alert/src/test/java/org/apache/dolphinscheduler/alert/utils/FuncUtilsTest.java
Patch:
@@ -46,7 +46,7 @@ public void testMKString() {
         logger.info(result);
 
         //Expected result string
-        assertEquals(result, "user1|user2|user3");
+        assertEquals("user1|user2|user3", result);
 
         //Null list expected return null
         result = FuncUtils.mkString(null, split);

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/runner/TaskScheduleThread.java
Patch:
@@ -296,9 +296,7 @@ private List<String> createProjectResFiles(TaskNode taskNode) throws Exception{
 
         if (baseParam != null) {
             List<String> projectResourceFiles = baseParam.getResourceFilesList();
-            if (projectResourceFiles != null) {
-                projectFiles.addAll(projectResourceFiles);
-            }
+            projectFiles.addAll(projectResourceFiles);
         }
 
         return new ArrayList<>(projectFiles);

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/Command.java
Patch:
@@ -16,8 +16,6 @@
  */
 package org.apache.dolphinscheduler.remote.command;
 
-import com.sun.org.apache.regexp.internal.RE;
-
 import java.io.Serializable;
 import java.util.concurrent.atomic.AtomicLong;
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/utils/CheckUtils.java
Patch:
@@ -115,7 +115,7 @@ public static boolean checkPhone(String phone) {
    *
    * @param parameter parameter
    * @param taskType task type
-   * @return true if taks node parameters are valid, otherwise return false
+   * @return true if task node parameters are valid, otherwise return false
    */
   public static boolean checkTaskNodeParameters(String parameter, String taskType) {
     AbstractParameters abstractParameters = TaskParametersUtils.getParameters(taskType, parameter);

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/TaskInfo.java
Patch:
@@ -34,7 +34,7 @@ public class TaskInfo implements Serializable{
 
 
     /**
-     *  taks name
+     *  task name
      */
     private String taskName;
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/entity/TaskExecutionContext.java
Patch:
@@ -39,7 +39,7 @@ public class TaskExecutionContext implements Serializable{
 
 
     /**
-     *  taks name
+     *  task name
      */
     private String taskName;
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/processor/NettyRemoteChannel.java
Patch:
@@ -34,7 +34,7 @@ public class NettyRemoteChannel {
     private final Channel channel;
 
     /**
-     *  equest unique identification
+     *  request unique identification
      */
     private final long opaque;
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ResourcesController.java
Patch:
@@ -63,7 +63,7 @@ public class ResourcesController extends BaseController {
     private UdfFuncService udfFuncService;
 
     /**
-     * create resource
+     * create directory
      *
      * @param loginUser login user
      * @param alias alias

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ResourcesController.java
Patch:
@@ -63,7 +63,7 @@ public class ResourcesController extends BaseController {
     private UdfFuncService udfFuncService;
 
     /**
-     * create dirctory
+     * create directory
      *
      * @param loginUser login user
      * @param alias alias

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ResourcesController.java
Patch:
@@ -63,7 +63,7 @@ public class ResourcesController extends BaseController {
     private UdfFuncService udfFuncService;
 
     /**
-     * create resource
+     * create dirctory
      *
      * @param loginUser login user
      * @param alias alias

File: dolphinscheduler-common/src/test/java/org/apache/dolphinscheduler/common/utils/HadoopUtilsTest.java
Patch:
@@ -142,7 +142,7 @@ public void getHdfsUdfFileName() {
     @Test
     public void isYarnEnabled() {
         boolean result = hadoopUtils.isYarnEnabled();
-        Assert.assertEquals(false, result);
+        Assert.assertEquals(true, result);
     }
 
     @Test
@@ -185,7 +185,7 @@ public void getApplicationStatus() {
     }
 
     @Test
-    public void getApplicationUrl(){
+    public void getApplicationUrl() throws Exception {
         String application_1516778421218_0042 = hadoopUtils.getApplicationUrl("application_1529051418016_0167");
         logger.info(application_1516778421218_0042);
     }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ResourcesService.java
Patch:
@@ -1021,7 +1021,7 @@ public org.springframework.core.io.Resource downloadResource(int resourceId) thr
 
         String tenantCode = tenant.getTenantCode();
 
-        String hdfsFileName = HadoopUtils.getHdfsFileName(resource.getType(), tenantCode, resource.getAlias());
+        String hdfsFileName = HadoopUtils.getHdfsFileName(resource.getType(), tenantCode, resource.getFullName());
 
         String localFileName = FileUtils.getDownloadFilename(resource.getAlias());
         logger.info("resource hdfs path is {} ", hdfsFileName);

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/utils/FlinkArgsUtilsTest.java
Patch:
@@ -49,6 +49,7 @@ public class FlinkArgsUtilsTest {
     public String mainArgs = "testArgs";
     public String queue = "queue1";
     public String others = "--input file:///home";
+    public String flinkVersion = "<1.10";
 
 
     @Before
@@ -79,6 +80,7 @@ public void testBuildArgs() {
         param.setMainArgs(mainArgs);
         param.setQueue(queue);
         param.setOthers(others);
+        param.setFlinkVersion(flinkVersion);
 
         //Invoke buildArgs
         List<String> result = FlinkArgsUtils.buildArgs(param);
@@ -128,4 +130,4 @@ public void testBuildArgs() {
         assertEquals(5, result.size());
 
     }
-}
\ No newline at end of file
+}

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/HadoopUtils.java
Patch:
@@ -16,8 +16,6 @@
  */
 package org.apache.dolphinscheduler.common.utils;
 
-import com.fasterxml.jackson.core.JsonParseException;
-import com.fasterxml.jackson.core.JsonProcessingException;
 import com.fasterxml.jackson.databind.node.ObjectNode;
 import com.google.common.cache.CacheBuilder;
 import com.google.common.cache.CacheLoader;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/sql/SqlTask.java
Patch:
@@ -16,7 +16,6 @@
  */
 package org.apache.dolphinscheduler.server.worker.task.sql;
 
-import com.fasterxml.jackson.databind.SerializationFeature;
 import com.fasterxml.jackson.databind.node.ArrayNode;
 import com.fasterxml.jackson.databind.node.ObjectNode;
 import org.apache.commons.lang.StringUtils;
@@ -43,7 +42,6 @@
 import org.apache.dolphinscheduler.server.worker.task.AbstractTask;
 import org.apache.dolphinscheduler.service.bean.SpringApplicationContext;
 import org.slf4j.Logger;
-import org.apache.dolphinscheduler.common.utils.*;
 
 import java.sql.*;
 import java.util.*;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/datax/DataxTask.java
Patch:
@@ -305,7 +305,7 @@ private List<ObjectNode> buildDataxJobContentJson() {
         List<ObjectNode> contentList = new ArrayList<>();
         ObjectNode content = JSONUtils.createObjectNode();
         content.put("reader", reader.toString());
-        content.put("writer", reader.toString());
+        content.put("writer", writer.toString());
         contentList.add(content);
 
         return contentList;

File: dolphinscheduler-alert/src/main/java/org/apache/dolphinscheduler/alert/utils/EnterpriseWeChatUtils.java
Patch:
@@ -20,7 +20,6 @@
 import org.apache.dolphinscheduler.common.utils.StringUtils;
 import org.apache.dolphinscheduler.common.utils.*;
 
-import com.google.common.reflect.TypeToken;
 import org.apache.dolphinscheduler.plugin.model.AlertData;
 import org.apache.http.HttpEntity;
 import org.apache.http.client.methods.CloseableHttpResponse;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/DataSourceService.java
Patch:
@@ -539,7 +539,7 @@ public String buildParameter(String name, String desc, DbType type, String host,
         }
 
         if(logger.isDebugEnabled()){
-            logger.info("parameters map-----" + JSONUtils.toJsonString(parameterMap));
+            logger.info("parameters map:{}", JSONUtils.toJsonString(parameterMap));
         }
         return JSONUtils.toJsonString(parameterMap);
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProcessDefinitionService.java
Patch:
@@ -19,7 +19,6 @@
 import com.baomidou.mybatisplus.core.metadata.IPage;
 import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
 import com.fasterxml.jackson.core.JsonProcessingException;
-import com.fasterxml.jackson.core.type.TypeReference;
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.node.ArrayNode;
 import com.fasterxml.jackson.databind.node.ObjectNode;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProcessInstanceService.java
Patch:
@@ -18,7 +18,6 @@
 
 import com.baomidou.mybatisplus.core.metadata.IPage;
 import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
-import com.fasterxml.jackson.core.type.TypeReference;
 import org.apache.dolphinscheduler.api.dto.gantt.GanttDto;
 import org.apache.dolphinscheduler.api.dto.gantt.Task;
 import org.apache.dolphinscheduler.api.enums.Status;
@@ -554,8 +553,7 @@ public Map<String, Object> viewVariables(Integer processInstanceId) {
             String localParams = map.get(LOCAL_PARAMS);
             if (localParams != null && !localParams.isEmpty()) {
                 localParams = ParameterUtils.convertParameterPlaceholders(localParams, timeParams);
-                List<Property> localParamsList = new ArrayList<>();
-                localParamsList = JSONUtils.toList(localParams, Property.class);
+                List<Property> localParamsList = JSONUtils.toList(localParams, Property.class);
 
                 Map<String,Object> localParamsMap = new HashMap<>();
                 localParamsMap.put("taskType",taskNode.getType());

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ResourcesService.java
Patch:
@@ -543,7 +543,6 @@ public Map<String, Object> queryResourceList(User loginUser, ResourceType type)
         }
         List<Resource> allResourceList = resourcesMapper.queryResourceListAuthored(userId, type.ordinal(),0);
         Visitor resourceTreeVisitor = new ResourceTreeVisitor(allResourceList);
-        //JSONArray jsonArray = JSONUtils.toList(JSONUtils.toJsonString(resourceTreeVisitor.visit().getChildren(), SerializerFeature.SortField));
         result.put(Constants.DATA_LIST, resourceTreeVisitor.visit().getChildren());
         putMsg(result,Status.SUCCESS);
 
@@ -1127,7 +1126,8 @@ public Map<String, Object> authorizedFile(User loginUser, Integer userId) {
         }
         List<Resource> authedResources = resourcesMapper.queryAuthorizedResourceList(userId);
         Visitor visitor = new ResourceTreeVisitor(authedResources);
-        logger.info(JSONUtils.toJsonString(visitor.visit(), SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS));
+        String visit = JSONUtils.toJsonString(visitor.visit(), SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS);
+        logger.info(visit);
         String jsonTreeStr = JSONUtils.toJsonString(visitor.visit().getChildren(), SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS);
         logger.info(jsonTreeStr);
         result.put(Constants.DATA_LIST, visitor.visit().getChildren());

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/AlertGroup.java
Patch:
@@ -17,7 +17,6 @@
 package org.apache.dolphinscheduler.dao.entity;
 
 import com.baomidou.mybatisplus.annotation.TableField;
-import com.fasterxml.jackson.annotation.JsonFormat;
 import org.apache.dolphinscheduler.common.enums.AlertType;
 import com.baomidou.mybatisplus.annotation.IdType;
 import com.baomidou.mybatisplus.annotation.TableId;

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/entity/ProcessDefinitionTest.java
Patch:
@@ -32,7 +32,7 @@ public void getGlobalParamMapTest() {
         taskInstance.setGlobalParams("[{\"prop\":\"selenium_global_parameters_1\",\"direct\":\"IN\",\"type\":\"VARCHAR\",\"value\":\"selenium_global_parameters_value_1\"}]");
 
         taskInstance.getGlobalParamMap();
-        Assert.assertEquals(taskInstance.getGlobalParamMap().toString(),"{selenium_global_parameters_1=selenium_global_parameters_value_1}");
+        Assert.assertEquals("{selenium_global_parameters_1=selenium_global_parameters_value_1}",taskInstance.getGlobalParamMap().toString());
 
 
 

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/utils/JsonSerializer.java
Patch:
@@ -31,6 +31,9 @@ public class JsonSerializer {
 	private static final ObjectMapper objectMapper = new ObjectMapper();
 	private static final Logger logger = LoggerFactory.getLogger(JsonSerializer.class);
 
+	private JsonSerializer(){
+
+	}
 	/**
 	 * serialize to byte
 	 *

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/runner/TaskExecuteThread.java
Patch:
@@ -16,7 +16,6 @@
  */
 package org.apache.dolphinscheduler.server.worker.runner;
 
-import com.fasterxml.jackson.core.type.TypeReference;
 import org.apache.dolphinscheduler.common.utils.*;
 
 import org.apache.dolphinscheduler.common.Constants;
@@ -25,7 +24,6 @@
 import org.apache.dolphinscheduler.common.process.Property;
 import org.apache.dolphinscheduler.common.task.TaskTimeoutParameter;
 import org.apache.dolphinscheduler.common.thread.ThreadUtils;
-import org.apache.dolphinscheduler.common.utils.*;
 import org.apache.dolphinscheduler.remote.command.TaskExecuteResponseCommand;
 import org.apache.dolphinscheduler.server.entity.TaskExecutionContext;
 import org.apache.dolphinscheduler.server.worker.processor.TaskCallbackService;

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessService.java
Patch:
@@ -17,7 +17,6 @@
 package org.apache.dolphinscheduler.service.process;
 
 import com.cronutils.model.Cron;
-import com.fasterxml.jackson.core.type.TypeReference;
 import com.fasterxml.jackson.databind.node.ObjectNode;
 import org.apache.commons.lang.ArrayUtils;
 import org.apache.dolphinscheduler.common.Constants;
@@ -37,7 +36,6 @@
 import org.springframework.stereotype.Component;
 import org.springframework.transaction.annotation.Transactional;
 
-import java.io.IOException;
 import java.util.*;
 import java.util.stream.Collectors;
 

File: e2e/src/test/java/org/apache/dolphinscheduler/page/security/AlertManagePage.java
Patch:
@@ -38,11 +38,11 @@ public AlertManagePage(WebDriver driver) {
     public boolean createAlert() throws InterruptedException {
         // click  alert manage
         clickElement(AlertManageLocator.CLICK_ALERT_MANAGE);
-        Thread.sleep(2000);
+        Thread.sleep(1000);
 
         // click  create alert button
         clickElement(AlertManageLocator.CLICK_CREATE_ALERT);
-        Thread.sleep(2000);
+        Thread.sleep(1000);
 
         // input alert data
         sendInput(AlertManageLocator.INPUT_ALERT_NAME, AlertManageData.ALERT_NAME);

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/sqoop/generator/SqoopJobGenerator.java
Patch:
@@ -69,7 +69,7 @@ public String generateSqoopJob(SqoopParameters sqoopParameters,TaskExecutionCont
         if (SqoopJobType.TEMPLATE.getDescp().equals(sqoopParameters.getJobType())) {
             createSqoopJobGenerator(sqoopParameters.getSourceType(),sqoopParameters.getTargetType());
             if(sourceGenerator == null || targetGenerator == null){
-                return null;
+                throw new RuntimeException("sqoop task source type or target type is null");
             }
 
             sqoopScripts =  commonGenerator.generate(sqoopParameters)

File: e2e/src/test/java/org/apache/dolphinscheduler/testcase/TestLogin.java
Patch:
@@ -22,10 +22,10 @@
 import static org.apache.dolphinscheduler.base.BaseTest.driver;
 
 @Test(groups={"functionTests","login"})
-public class LoginTest {
+public class TestLogin {
     private LoginPage loginPage;
 
-    @Test(description = "LoginTest", priority = 1)
+    @Test(description = "TestLogin")
     public void testLogin() throws InterruptedException {
         loginPage = new LoginPage(driver);
         System.out.println("===================================");

File: e2e/src/test/java/org/apache/dolphinscheduler/testcase/testDeleteData/TestDeleteProject.java
Patch:
@@ -14,16 +14,16 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.testcase.deleteData;
+package org.apache.dolphinscheduler.testcase.testDeleteData;
 
 import org.apache.dolphinscheduler.base.BaseTest;
 import org.apache.dolphinscheduler.page.project.CreateProjectPage;
 import org.testng.annotations.Test;
 
-public class DeleteProjectTest extends BaseTest {
+public class TestDeleteProject extends BaseTest {
     private CreateProjectPage createProjectPage;
 
-    @Test(groups={"functionTests"},dependsOnGroups = { "login","project"},description = "DeleteProjectTest",priority=7)
+    @Test(groups={"functionTests"},dependsOnGroups = { "login","project"},description = "TestDeleteProject")
     public void testDeleteProject() throws InterruptedException {
         createProjectPage = new CreateProjectPage(driver);
         //jump to project manage page

File: e2e/src/test/java/org/apache/dolphinscheduler/testcase/testDeleteData/TestDeleteTenant.java
Patch:
@@ -14,16 +14,16 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.testcase.deleteData;
+package org.apache.dolphinscheduler.testcase.testDeleteData;
 
 import org.apache.dolphinscheduler.base.BaseTest;
 import org.apache.dolphinscheduler.page.security.TenantManagePage;
 import org.testng.annotations.Test;
 
-public class DeleteTenantTest extends BaseTest {
+public class TestDeleteTenant extends BaseTest {
     private TenantManagePage tenantManagePage;
 
-    @Test(groups={"functionTests"},dependsOnGroups = { "login","createTenant"},description = "DeleteTenantTest",priority=9)
+    @Test(groups={"functionTests"},dependsOnGroups = { "login","createTenant"},description = "TestDeleteTenant")
     public void testDeleteTenant() throws InterruptedException {
         tenantManagePage = new TenantManagePage(driver);
         //assert tenant manage page

File: e2e/src/test/java/org/apache/dolphinscheduler/testcase/testDeleteData/TestDeleteUser.java
Patch:
@@ -14,18 +14,18 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.testcase.deleteData;
+package org.apache.dolphinscheduler.testcase.testDeleteData;
 
 import org.apache.dolphinscheduler.base.BaseTest;
 import org.apache.dolphinscheduler.page.security.TenantManagePage;
 import org.apache.dolphinscheduler.page.security.UserManagePage;
 import org.testng.annotations.Test;
 
-public class DeleteUserTest extends BaseTest {
+public class TestDeleteUser extends BaseTest {
     private UserManagePage userManagePage;
     private TenantManagePage tenantManagePage;
 
-    @Test(groups={"functionTests"},dependsOnGroups = { "login","user" },description = "DeleteUserTest",priority=8)
+    @Test(groups={"functionTests"},dependsOnGroups = { "login","user" },description = "TestDeleteUser")
     public void testDeleteUser() throws InterruptedException {
         tenantManagePage = new TenantManagePage(driver);
         System.out.println("jump to security to delete user");

File: e2e/src/test/java/org/apache/dolphinscheduler/testcase/testDeleteData/TestDeleteWorkflow.java
Patch:
@@ -14,18 +14,18 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.testcase.deleteData;
+package org.apache.dolphinscheduler.testcase.testDeleteData;
 
 import org.apache.dolphinscheduler.base.BaseTest;
 import org.apache.dolphinscheduler.page.project.CreateProjectPage;
 import org.apache.dolphinscheduler.page.project.CreateWorkflowPage;
 import org.testng.annotations.Test;
 
-public class DeleteWorkflowTest extends BaseTest {
+public class TestDeleteWorkflow extends BaseTest {
     private CreateWorkflowPage createWorkflowPage;
     private CreateProjectPage createProjectPage;
 
-    @Test(groups={"functionTests"},dependsOnGroups = { "login","workflow"},description = "DeleteWorkflowTest",priority=6)
+    @Test(groups={"functionTests"},dependsOnGroups = { "login","workflow"},description = "TestDeleteWorkflow")
     public void testDeleteWorkflow() throws InterruptedException {
         createProjectPage = new CreateProjectPage(driver);
         //jump to project manage page

File: e2e/src/test/java/org/apache/dolphinscheduler/testcase/testProject/TestCreateProject.java
Patch:
@@ -14,16 +14,16 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.testcase.project;
+package org.apache.dolphinscheduler.testcase.testProject;
 
 import org.apache.dolphinscheduler.base.BaseTest;
 import org.apache.dolphinscheduler.page.project.CreateProjectPage;
 import org.testng.annotations.Test;
 
-public class CreateProjectTest  extends BaseTest {
+public class TestCreateProject extends BaseTest {
     private CreateProjectPage createProjectPage;
 
-    @Test(groups={"functionTests","project"},dependsOnGroups = { "login" },description = "CreateProjectTest",priority=4)
+    @Test(groups={"functionTests","project"},dependsOnGroups = { "login" },description = "CreateProjectTest")
     public void testCreateProject() throws InterruptedException {
         createProjectPage = new CreateProjectPage(driver);
         // enter user manage page

File: e2e/src/test/java/org/apache/dolphinscheduler/testcase/testProject/TestCreateWorkflow.java
Patch:
@@ -14,19 +14,19 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.testcase.project;
+package org.apache.dolphinscheduler.testcase.testProject;
 
 import org.apache.dolphinscheduler.base.BaseTest;
 import org.apache.dolphinscheduler.page.project.CreateProjectPage;
 import org.apache.dolphinscheduler.page.project.CreateWorkflowPage;
 import org.testng.annotations.Test;
 
-public class CreateWorkflowTest  extends BaseTest {
+public class TestCreateWorkflow extends BaseTest {
     private CreateWorkflowPage createWorkflowPage;
     private CreateProjectPage createProjectPage;
 
 
-    @Test(groups={"functionTests","workflow"},dependsOnGroups = { "login" },description = "CreateWorkflowTest",priority=5)
+    @Test(groups={"functionTests","workflow"},dependsOnGroups = { "login" },description = "TestCreateWorkflow")
     public void testCreateWorkflow() throws InterruptedException {
         createProjectPage = new CreateProjectPage(driver);
         System.out.println("jump to the projectManage page to create workflow");

File: e2e/src/test/java/org/apache/dolphinscheduler/testcase/testSecurity/TestTenantManage.java
Patch:
@@ -14,17 +14,17 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.testcase.security;
+package org.apache.dolphinscheduler.testcase.testSecurity;
 
 import org.apache.dolphinscheduler.base.BaseTest;
 import org.apache.dolphinscheduler.page.security.TenantManagePage;
 import org.testng.annotations.Test;
 
 
-public class TenantManageTest extends BaseTest {
+public class TestTenantManage extends BaseTest {
     private TenantManagePage tenantManagePage;
 
-    @Test(groups={"functionTests","createTenant"},dependsOnGroups = { "login" },description = "TenantManageTest",priority=2)
+    @Test(groups={"functionTests","createTenant"},dependsOnGroups = { "login" },description = "TestTenantManage")
     public void testTenantManage() throws InterruptedException {
         tenantManagePage = new TenantManagePage(driver);
         //assert tenant manage page

File: e2e/src/test/java/org/apache/dolphinscheduler/testcase/testSecurity/TestUserManage.java
Patch:
@@ -14,16 +14,16 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.testcase.security;
+package org.apache.dolphinscheduler.testcase.testSecurity;
 
 import org.apache.dolphinscheduler.base.BaseTest;
 import org.apache.dolphinscheduler.page.security.UserManagePage;
 import org.testng.annotations.Test;
 
-public class UserManageTest extends BaseTest {
+public class TestUserManage extends BaseTest {
     private UserManagePage userManagePage;
 
-    @Test(groups={"functionTests","user"},dependsOnGroups = { "login" },description = "UserManageTest",priority=3)
+    @Test(groups={"functionTests","user"},dependsOnGroups = { "login" },description = "TestUserManage")
     public void testUserManage() throws InterruptedException {
         userManagePage = new UserManagePage(driver);
         //assert user manage page

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/JSONUtils.java
Patch:
@@ -187,7 +187,7 @@ public static String findValue(JsonNode jsonNode, String fieldName) {
      */
     public static Map<String, String> toMap(String json) {
         if (StringUtils.isEmpty(json)) {
-            return new HashMap<>();
+            return null;
         }
 
         try {
@@ -196,7 +196,7 @@ public static Map<String, String> toMap(String json) {
             logger.error("json to map exception!", e);
         }
 
-        return new HashMap<>();
+        return null;
     }
 
     /**

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/datax/DataxTask.java
Patch:
@@ -277,7 +277,6 @@ private List<ObjectNode> buildDataxJobContentJson() throws SQLException {
                 dataSourceCfg, dataXParameters.getSql());
 
         ArrayNode columnArr = writerParam.putArray("column");
-        columnArr.addAll()
         for (String column : columns) {
             columnArr.add(column);
         }

File: dolphinscheduler-alert/src/test/java/org/apache/dolphinscheduler/alert/template/impl/DefaultHTMLTemplateTest.java
Patch:
@@ -116,7 +116,7 @@ private String generateMockTextTypeResultByHand(){
                 "    </head>\n" +
                 "    <body style=\"margin:0;padding:0\">\n" +
                 "        <table border=\"1px\" cellpadding=\"5px\" cellspacing=\"-10px\">\n" +
-                "<tr><td>{mysql service name=mysql200, mysql address=192.168.xx.xx, port=3306, no index of number=80, database client connections=190}</td></tr><tr><td>{mysql service name=mysql210, mysql address=192.168.xx.xx, port=3306, no index of number=10, database client connections=90}</td></tr>        </table>\n" +
+                "<tr><td>{\"mysql service name\":\"mysql200\",\"mysql address\":\"192.168.xx.xx\",\"port\":\"3306\",\"no index of number\":\"80\",\"database client connections\":\"190\"}</td></tr><tr><td>{\"mysql service name\":\"mysql210\",\"mysql address\":\"192.168.xx.xx\",\"port\":\"3306\",\"no index of number\":\"10\",\"database client connections\":\"90\"}</td></tr>        </table>\n" +
                 "    </body>\n" +
                 "</html>";
     }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/DataSourceService.java
Patch:
@@ -167,7 +167,7 @@ public Map<String, Object> updateDataSource(int id, User loginUser, String name,
             paramObject.put(Constants.PASSWORD, oldParams.path(Constants.PASSWORD).asText());
         }
         // connectionParams json
-        String connectionParams = JSONUtils.toJsonString(paramObject);
+        String connectionParams = paramObject.toString();
 
         Boolean isConnection = checkConnection(type, connectionParams);
         if (!isConnection) {
@@ -315,7 +315,7 @@ private void handlePasswd(List<DataSource> dataSourceList) {
             String connectionParams  = dataSource.getConnectionParams();
             ObjectNode  object = JSONUtils.parseObject(connectionParams);
             object.put(Constants.PASSWORD, Constants.XXXXXX);
-            dataSource.setConnectionParams(JSONUtils.toJsonString(object));
+            dataSource.setConnectionParams(object.toString());
 
         }
     }
@@ -524,7 +524,7 @@ public String buildParameter(String name, String desc, DbType type, String host,
             parameterMap.put(Constants.PRINCIPAL,principal);
         }
         if (other != null && !"".equals(other)) {
-            LinkedHashMap<String, String> map = JSONUtils.parseObject(other, LinkedHashMap.class);
+            Map<String, String> map = JSONUtils.toMap(other);
             if (map.size() > 0) {
                 StringBuilder otherSb = new StringBuilder();
                 for (Map.Entry<String, String> entry: map.entrySet()) {

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProcessDefinitionServiceTest.java
Patch:
@@ -521,7 +521,6 @@ public void testAddTaskNodeSpecialParam() throws JSONException {
     @Test
     public void testExportProcessMetaDataStr() {
         Mockito.when(scheduleMapper.queryByProcessDefinitionId(46)).thenReturn(getSchedulerList());
-
         ProcessDefinition processDefinition = getProcessDefinition();
         processDefinition.setProcessDefinitionJson(sqlDependentJson);
 

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/AlertGroup.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.dolphinscheduler.dao.entity;
 
 import com.baomidou.mybatisplus.annotation.TableField;
+import com.fasterxml.jackson.annotation.JsonFormat;
 import org.apache.dolphinscheduler.common.enums.AlertType;
 import com.baomidou.mybatisplus.annotation.IdType;
 import com.baomidou.mybatisplus.annotation.TableId;

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/CycleDependency.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dolphinscheduler.dao.entity;
 
+import com.fasterxml.jackson.annotation.JsonFormat;
 import org.apache.dolphinscheduler.common.enums.CycleEnum;
 
 import java.util.Date;
@@ -31,10 +32,12 @@ public class CycleDependency {
     /**
      * last schedule time
      */
+    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss",timezone="GMT+8")
     private Date lastScheduleTime;
     /**
      * expiration time
      */
+    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss",timezone="GMT+8")
     private Date expirationTime;
     /**
      * cycle enum

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/DataSource.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dolphinscheduler.dao.entity;
 
+import com.fasterxml.jackson.annotation.JsonFormat;
 import org.apache.dolphinscheduler.common.enums.DbType;
 import com.baomidou.mybatisplus.annotation.IdType;
 import com.baomidou.mybatisplus.annotation.TableField;
@@ -66,11 +67,13 @@ public class DataSource {
   /**
    * create time
    */
+  @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss",timezone="GMT+8")
   private Date createTime;
 
   /**
    * update time
    */
+  @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss",timezone="GMT+8")
   private Date updateTime;
 
   public DataSource() {

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/MonitorRecord.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dolphinscheduler.dao.entity;
 
+import com.fasterxml.jackson.annotation.JsonFormat;
 import org.apache.dolphinscheduler.common.enums.DbType;
 import org.apache.dolphinscheduler.common.enums.Flag;
 
@@ -56,6 +57,7 @@ public class MonitorRecord {
     /**
      * start date
      */
+    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss",timezone="GMT+8")
     private Date date;
 
     public Flag getState() {

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/Queue.java
Patch:
@@ -19,6 +19,7 @@
 import com.baomidou.mybatisplus.annotation.IdType;
 import com.baomidou.mybatisplus.annotation.TableId;
 import com.baomidou.mybatisplus.annotation.TableName;
+import com.fasterxml.jackson.annotation.JsonFormat;
 
 import java.util.Date;
 
@@ -45,10 +46,12 @@ public class Queue {
     /**
      * create time
      */
+    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss",timezone="GMT+8")
     private Date createTime;
     /**
      * update time
      */
+    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss",timezone="GMT+8")
     private Date updateTime;
 
     public int getId() {

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/Resource.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.dolphinscheduler.dao.entity;
 
 
+import com.fasterxml.jackson.annotation.JsonFormat;
 import org.apache.dolphinscheduler.common.enums.ResourceType;
 import com.baomidou.mybatisplus.annotation.IdType;
 import com.baomidou.mybatisplus.annotation.TableId;
@@ -80,11 +81,13 @@ public class Resource {
   /**
    * create time
    */
+  @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss",timezone="GMT+8")
   private Date createTime;
 
   /**
    * update time
    */
+  @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss",timezone="GMT+8")
   private Date updateTime;
 
   public Resource() {

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/ResourcesUser.java
Patch:
@@ -19,6 +19,7 @@
 import com.baomidou.mybatisplus.annotation.IdType;
 import com.baomidou.mybatisplus.annotation.TableId;
 import com.baomidou.mybatisplus.annotation.TableName;
+import com.fasterxml.jackson.annotation.JsonFormat;
 
 import java.util.Date;
 
@@ -52,11 +53,13 @@ public class ResourcesUser {
   /**
    * create time
    */
+  @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss",timezone="GMT+8")
   private Date createTime;
 
   /**
    * update time
    */
+  @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss",timezone="GMT+8")
   private Date updateTime;
 
   public int getId() {

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/Session.java
Patch:
@@ -19,6 +19,7 @@
 import com.baomidou.mybatisplus.annotation.IdType;
 import com.baomidou.mybatisplus.annotation.TableId;
 import com.baomidou.mybatisplus.annotation.TableName;
+import com.fasterxml.jackson.annotation.JsonFormat;
 
 import java.util.Date;
 
@@ -42,6 +43,7 @@ public class Session {
     /**
      * last login time
      */
+    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss",timezone="GMT+8")
     private Date lastLoginTime;
 
     /**

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/Tenant.java
Patch:
@@ -20,6 +20,7 @@
 import com.baomidou.mybatisplus.annotation.TableField;
 import com.baomidou.mybatisplus.annotation.TableId;
 import com.baomidou.mybatisplus.annotation.TableName;
+import com.fasterxml.jackson.annotation.JsonFormat;
 
 import java.util.Date;
 import java.util.Objects;
@@ -71,10 +72,12 @@ public class Tenant {
     /**
      * create time
      */
+    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss",timezone="GMT+8")
     private Date createTime;
     /**
      * update time
      */
+    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss",timezone="GMT+8")
     private Date updateTime;
 
 

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/UDFUser.java
Patch:
@@ -19,6 +19,7 @@
 import com.baomidou.mybatisplus.annotation.IdType;
 import com.baomidou.mybatisplus.annotation.TableId;
 import com.baomidou.mybatisplus.annotation.TableName;
+import com.fasterxml.jackson.annotation.JsonFormat;
 
 import java.util.Date;
 
@@ -52,11 +53,13 @@ public class UDFUser {
   /**
    * create time
    */
+  @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss",timezone="GMT+8")
   private Date createTime;
 
   /**
    * update time
    */
+  @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss",timezone="GMT+8")
   private Date updateTime;
 
   public int getId() {

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/UdfFunc.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dolphinscheduler.dao.entity;
 
+import com.fasterxml.jackson.annotation.JsonFormat;
 import org.apache.dolphinscheduler.common.enums.UdfType;
 import com.baomidou.mybatisplus.annotation.IdType;
 import com.baomidou.mybatisplus.annotation.TableId;
@@ -81,11 +82,13 @@ public class UdfFunc {
     /**
      * create time
      */
+    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss",timezone="GMT+8")
     private Date createTime;
 
     /**
      * update time
      */
+    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss",timezone="GMT+8")
     private Date updateTime;
 
     public int getId() {

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/User.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.dolphinscheduler.dao.entity;
 
 
+import com.fasterxml.jackson.annotation.JsonFormat;
 import org.apache.dolphinscheduler.common.enums.UserType;
 import com.baomidou.mybatisplus.annotation.IdType;
 import com.baomidou.mybatisplus.annotation.TableField;
@@ -104,11 +105,13 @@ public class  User {
     /**
      * create time
      */
+    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss",timezone="GMT+8")
     private Date createTime;
 
     /**
      * update time
      */
+    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss",timezone="GMT+8")
     private Date updateTime;
 
     public int getId() {

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/UserAlertGroup.java
Patch:
@@ -20,6 +20,7 @@
 import com.baomidou.mybatisplus.annotation.TableField;
 import com.baomidou.mybatisplus.annotation.TableId;
 import com.baomidou.mybatisplus.annotation.TableName;
+import com.fasterxml.jackson.annotation.JsonFormat;
 
 import java.util.Date;
 
@@ -61,11 +62,13 @@ public class UserAlertGroup {
     /**
      * create time
      */
+    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss",timezone="GMT+8")
     private Date createTime;
 
     /**
      * update time
      */
+    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss",timezone="GMT+8")
     private Date updateTime;
 
     public int getId() {

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkerGroup.java
Patch:
@@ -19,6 +19,7 @@
 import com.baomidou.mybatisplus.annotation.IdType;
 import com.baomidou.mybatisplus.annotation.TableId;
 import com.baomidou.mybatisplus.annotation.TableName;
+import com.fasterxml.jackson.annotation.JsonFormat;
 
 import java.util.Date;
 import java.util.List;
@@ -32,8 +33,9 @@ public class WorkerGroup {
 
     private List<String> ipList;
 
+    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss",timezone="GMT+8")
     private Date createTime;
-
+    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss",timezone="GMT+8")
     private Date updateTime;
 
 

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/entity/ProcessDefinitionTest.java
Patch:
@@ -31,6 +31,7 @@ public void getGlobalParamMapTest() {
         //sub process
         taskInstance.setGlobalParams("[{\"prop\":\"selenium_global_parameters_1\",\"direct\":\"IN\",\"type\":\"VARCHAR\",\"value\":\"selenium_global_parameters_value_1\"}]");
 
+        taskInstance.getGlobalParamMap();
         Assert.assertEquals(taskInstance.getGlobalParamMap().toString(),"{selenium_global_parameters_1=selenium_global_parameters_value_1}");
 
 

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/TaskExecuteAckCommand.java
Patch:
@@ -1 +1 @@
-/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *    http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.dolphinscheduler.remote.command;import org.apache.dolphinscheduler.remote.utils.JacksonSerializer;import java.io.Serializable;import java.util.Date;/** *  execute task request command */public class TaskExecuteAckCommand implements Serializable {    /**     * taskInstanceId     */    private int taskInstanceId;    /**     * startTime     */    private Date startTime;    /**     * host     */    private String host;    /**     * status     */    private int status;    /**     * logPath     */    private String logPath;    /**     * executePath     */    private String executePath;    public Date getStartTime() {        return startTime;    }    public void setStartTime(Date startTime) {        this.startTime = startTime;    }    public String getHost() {        return host;    }    public void setHost(String host) {        this.host = host;    }    public int getStatus() {        return status;    }    public void setStatus(int status) {        this.status = status;    }    public int getTaskInstanceId() {        return taskInstanceId;    }    public void setTaskInstanceId(int taskInstanceId) {        this.taskInstanceId = taskInstanceId;    }    public String getLogPath() {        return logPath;    }    public void setLogPath(String logPath) {        this.logPath = logPath;    }    public String getExecutePath() {        return executePath;    }    public void setExecutePath(String executePath) {        this.executePath = executePath;    }    /**     *  package request command     *     * @return command     */    public Command convert2Command(){        Command command = new Command();        command.setType(CommandType.TASK_EXECUTE_ACK);        byte[] body = JacksonSerializer.serialize(this);        command.setBody(body);        return command;    }    @Override    public String toString() {        return "TaskExecuteAckCommand{" +                "taskInstanceId=" + taskInstanceId +                ", startTime=" + startTime +                ", host='" + host + '\'' +                ", status=" + status +                ", logPath='" + logPath + '\'' +                ", executePath='" + executePath + '\'' +                '}';    }}
\ No newline at end of file
+/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *    http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.dolphinscheduler.remote.command;import com.fasterxml.jackson.annotation.JsonFormat;import org.apache.dolphinscheduler.remote.utils.JsonSerializer;import java.io.Serializable;import java.util.Date;/** *  execute task request command */public class TaskExecuteAckCommand implements Serializable {    /**     * taskInstanceId     */    private int taskInstanceId;    /**     * startTime     */    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss",timezone="GMT+8")    private Date startTime;    /**     * host     */    private String host;    /**     * status     */    private int status;    /**     * logPath     */    private String logPath;    /**     * executePath     */    private String executePath;    public Date getStartTime() {        return startTime;    }    public void setStartTime(Date startTime) {        this.startTime = startTime;    }    public String getHost() {        return host;    }    public void setHost(String host) {        this.host = host;    }    public int getStatus() {        return status;    }    public void setStatus(int status) {        this.status = status;    }    public int getTaskInstanceId() {        return taskInstanceId;    }    public void setTaskInstanceId(int taskInstanceId) {        this.taskInstanceId = taskInstanceId;    }    public String getLogPath() {        return logPath;    }    public void setLogPath(String logPath) {        this.logPath = logPath;    }    public String getExecutePath() {        return executePath;    }    public void setExecutePath(String executePath) {        this.executePath = executePath;    }    /**     *  package request command     *     * @return command     */    public Command convert2Command(){        Command command = new Command();        command.setType(CommandType.TASK_EXECUTE_ACK);        byte[] body = JsonSerializer.serialize(this);        command.setBody(body);        return command;    }    @Override    public String toString() {        return "TaskExecuteAckCommand{" +                "taskInstanceId=" + taskInstanceId +                ", startTime=" + startTime +                ", host='" + host + '\'' +                ", status=" + status +                ", logPath='" + logPath + '\'' +                ", executePath='" + executePath + '\'' +                '}';    }}
\ No newline at end of file

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/TaskExecuteRequestCommand.java
Patch:
@@ -1 +1 @@
-/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *    http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.dolphinscheduler.remote.command;import org.apache.dolphinscheduler.remote.utils.JacksonSerializer;import java.io.Serializable;/** *  execute task request command */public class TaskExecuteRequestCommand implements Serializable {    /**     *  task execution context     */    private String taskExecutionContext;    public String getTaskExecutionContext() {        return taskExecutionContext;    }    public void setTaskExecutionContext(String taskExecutionContext) {        this.taskExecutionContext = taskExecutionContext;    }    public TaskExecuteRequestCommand() {    }    public TaskExecuteRequestCommand(String taskExecutionContext) {        this.taskExecutionContext = taskExecutionContext;    }    /**     *  package request command     *     * @return command     */    public Command convert2Command(){        Command command = new Command();        command.setType(CommandType.TASK_EXECUTE_REQUEST);        byte[] body = JacksonSerializer.serialize(this);        command.setBody(body);        return command;    }    @Override    public String toString() {        return "TaskExecuteRequestCommand{" +                "taskExecutionContext='" + taskExecutionContext + '\'' +                '}';    }}
\ No newline at end of file
+/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *    http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.dolphinscheduler.remote.command;import org.apache.dolphinscheduler.remote.utils.JsonSerializer;import java.io.Serializable;/** *  execute task request command */public class TaskExecuteRequestCommand implements Serializable {    /**     *  task execution context     */    private String taskExecutionContext;    public String getTaskExecutionContext() {        return taskExecutionContext;    }    public void setTaskExecutionContext(String taskExecutionContext) {        this.taskExecutionContext = taskExecutionContext;    }    public TaskExecuteRequestCommand() {    }    public TaskExecuteRequestCommand(String taskExecutionContext) {        this.taskExecutionContext = taskExecutionContext;    }    /**     *  package request command     *     * @return command     */    public Command convert2Command(){        Command command = new Command();        command.setType(CommandType.TASK_EXECUTE_REQUEST);        byte[] body = JsonSerializer.serialize(this);        command.setBody(body);        return command;    }    @Override    public String toString() {        return "TaskExecuteRequestCommand{" +                "taskExecutionContext='" + taskExecutionContext + '\'' +                '}';    }}
\ No newline at end of file

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/TaskExecuteResponseCommand.java
Patch:
@@ -1 +1 @@
-/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *    http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.dolphinscheduler.remote.command;import org.apache.dolphinscheduler.remote.utils.JacksonSerializer;import java.io.Serializable;import java.util.Date;/** *  execute task response command */public class TaskExecuteResponseCommand implements Serializable {    public TaskExecuteResponseCommand() {    }    public TaskExecuteResponseCommand(int taskInstanceId) {        this.taskInstanceId = taskInstanceId;    }    /**     *  task instance id     */    private int taskInstanceId;    /**     *  status     */    private int status;    /**     *  end time     */    private Date endTime;    /**     * processId     */    private int processId;    /**     * appIds     */    private String appIds;    public int getTaskInstanceId() {        return taskInstanceId;    }    public void setTaskInstanceId(int taskInstanceId) {        this.taskInstanceId = taskInstanceId;    }    public int getStatus() {        return status;    }    public void setStatus(int status) {        this.status = status;    }    public Date getEndTime() {        return endTime;    }    public void setEndTime(Date endTime) {        this.endTime = endTime;    }    public int getProcessId() {        return processId;    }    public void setProcessId(int processId) {        this.processId = processId;    }    public String getAppIds() {        return appIds;    }    public void setAppIds(String appIds) {        this.appIds = appIds;    }    /**     * package response command     * @return command     */    public Command convert2Command(){        Command command = new Command();        command.setType(CommandType.TASK_EXECUTE_RESPONSE);        byte[] body = JacksonSerializer.serialize(this);        command.setBody(body);        return command;    }    @Override    public String toString() {        return "TaskExecuteResponseCommand{" +                "taskInstanceId=" + taskInstanceId +                ", status=" + status +                ", endTime=" + endTime +                ", processId=" + processId +                ", appIds='" + appIds + '\'' +                '}';    }}
\ No newline at end of file
+/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *    http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.dolphinscheduler.remote.command;import com.fasterxml.jackson.annotation.JsonFormat;import org.apache.dolphinscheduler.remote.utils.JsonSerializer;import java.io.Serializable;import java.util.Date;/** *  execute task response command */public class TaskExecuteResponseCommand implements Serializable {    public TaskExecuteResponseCommand() {    }    public TaskExecuteResponseCommand(int taskInstanceId) {        this.taskInstanceId = taskInstanceId;    }    /**     *  task instance id     */    private int taskInstanceId;    /**     *  status     */    private int status;    /**     *  end time     */    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss",timezone="GMT+8")    private Date endTime;    /**     * processId     */    private int processId;    /**     * appIds     */    private String appIds;    public int getTaskInstanceId() {        return taskInstanceId;    }    public void setTaskInstanceId(int taskInstanceId) {        this.taskInstanceId = taskInstanceId;    }    public int getStatus() {        return status;    }    public void setStatus(int status) {        this.status = status;    }    public Date getEndTime() {        return endTime;    }    public void setEndTime(Date endTime) {        this.endTime = endTime;    }    public int getProcessId() {        return processId;    }    public void setProcessId(int processId) {        this.processId = processId;    }    public String getAppIds() {        return appIds;    }    public void setAppIds(String appIds) {        this.appIds = appIds;    }    /**     * package response command     * @return command     */    public Command convert2Command(){        Command command = new Command();        command.setType(CommandType.TASK_EXECUTE_RESPONSE);        byte[] body = JsonSerializer.serialize(this);        command.setBody(body);        return command;    }    @Override    public String toString() {        return "TaskExecuteResponseCommand{" +                "taskInstanceId=" + taskInstanceId +                ", status=" + status +                ", endTime=" + endTime +                ", processId=" + processId +                ", appIds='" + appIds + '\'' +                '}';    }}
\ No newline at end of file

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/TaskKillRequestCommand.java
Patch:
@@ -1 +1 @@
-/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *    http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.dolphinscheduler.remote.command;import org.apache.dolphinscheduler.remote.utils.JacksonSerializer;import java.io.Serializable;/** *  kill task request command */public class TaskKillRequestCommand implements Serializable {    /**     *  task id     */    private int taskInstanceId;    public int getTaskInstanceId() {        return taskInstanceId;    }    public void setTaskInstanceId(int taskInstanceId) {        this.taskInstanceId = taskInstanceId;    }    /**     *  package request command     *     * @return command     */    public Command convert2Command(){        Command command = new Command();        command.setType(CommandType.TASK_KILL_REQUEST);        byte[] body = JacksonSerializer.serialize(this);        command.setBody(body);        return command;    }    @Override    public String toString() {        return "TaskKillRequestCommand{" +                "taskInstanceId=" + taskInstanceId +                '}';    }}
\ No newline at end of file
+/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *    http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.dolphinscheduler.remote.command;import org.apache.dolphinscheduler.remote.utils.JsonSerializer;import java.io.Serializable;/** *  kill task request command */public class TaskKillRequestCommand implements Serializable {    /**     *  task id     */    private int taskInstanceId;    public int getTaskInstanceId() {        return taskInstanceId;    }    public void setTaskInstanceId(int taskInstanceId) {        this.taskInstanceId = taskInstanceId;    }    /**     *  package request command     *     * @return command     */    public Command convert2Command(){        Command command = new Command();        command.setType(CommandType.TASK_KILL_REQUEST);        byte[] body = JsonSerializer.serialize(this);        command.setBody(body);        return command;    }    @Override    public String toString() {        return "TaskKillRequestCommand{" +                "taskInstanceId=" + taskInstanceId +                '}';    }}
\ No newline at end of file

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/TaskKillResponseCommand.java
Patch:
@@ -1 +1 @@
-/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *    http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.dolphinscheduler.remote.command;import org.apache.dolphinscheduler.remote.utils.JacksonSerializer;import java.io.Serializable;import java.util.List;/** *  kill task response command */public class TaskKillResponseCommand implements Serializable {    /**     * taskInstanceId     */    private int taskInstanceId;    /**     * host     */    private String host;    /**     * status     */    private int status;    /**     * processId     */    private int processId;    /**     * other resource manager appId , for example : YARN etc     */    protected List<String> appIds;    public int getTaskInstanceId() {        return taskInstanceId;    }    public void setTaskInstanceId(int taskInstanceId) {        this.taskInstanceId = taskInstanceId;    }    public String getHost() {        return host;    }    public void setHost(String host) {        this.host = host;    }    public int getStatus() {        return status;    }    public void setStatus(int status) {        this.status = status;    }    public int getProcessId() {        return processId;    }    public void setProcessId(int processId) {        this.processId = processId;    }    public List<String> getAppIds() {        return appIds;    }    public void setAppIds(List<String> appIds) {        this.appIds = appIds;    }    /**     *  package request command     *     * @return command     */    public Command convert2Command(){        Command command = new Command();        command.setType(CommandType.TASK_KILL_RESPONSE);        byte[] body = JacksonSerializer.serialize(this);        command.setBody(body);        return command;    }    @Override    public String toString() {        return "TaskKillResponseCommand{" +                "taskInstanceId=" + taskInstanceId +                ", host='" + host + '\'' +                ", status=" + status +                ", processId=" + processId +                ", appIds=" + appIds +                '}';    }}
\ No newline at end of file
+/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *    http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.dolphinscheduler.remote.command;import org.apache.dolphinscheduler.remote.utils.JsonSerializer;import java.io.Serializable;import java.util.List;/** *  kill task response command */public class TaskKillResponseCommand implements Serializable {    /**     * taskInstanceId     */    private int taskInstanceId;    /**     * host     */    private String host;    /**     * status     */    private int status;    /**     * processId     */    private int processId;    /**     * other resource manager appId , for example : YARN etc     */    protected List<String> appIds;    public int getTaskInstanceId() {        return taskInstanceId;    }    public void setTaskInstanceId(int taskInstanceId) {        this.taskInstanceId = taskInstanceId;    }    public String getHost() {        return host;    }    public void setHost(String host) {        this.host = host;    }    public int getStatus() {        return status;    }    public void setStatus(int status) {        this.status = status;    }    public int getProcessId() {        return processId;    }    public void setProcessId(int processId) {        this.processId = processId;    }    public List<String> getAppIds() {        return appIds;    }    public void setAppIds(List<String> appIds) {        this.appIds = appIds;    }    /**     *  package request command     *     * @return command     */    public Command convert2Command(){        Command command = new Command();        command.setType(CommandType.TASK_KILL_RESPONSE);        byte[] body = JsonSerializer.serialize(this);        command.setBody(body);        return command;    }    @Override    public String toString() {        return "TaskKillResponseCommand{" +                "taskInstanceId=" + taskInstanceId +                ", host='" + host + '\'' +                ", status=" + status +                ", processId=" + processId +                ", appIds=" + appIds +                '}';    }}
\ No newline at end of file

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/log/GetLogBytesRequestCommand.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.apache.dolphinscheduler.remote.command.Command;
 import org.apache.dolphinscheduler.remote.command.CommandType;
-import org.apache.dolphinscheduler.remote.utils.JacksonSerializer;
+import org.apache.dolphinscheduler.remote.utils.JsonSerializer;
 
 import java.io.Serializable;
 
@@ -56,7 +56,7 @@ public void setPath(String path) {
     public Command convert2Command(){
         Command command = new Command();
         command.setType(CommandType.GET_LOG_BYTES_REQUEST);
-        byte[] body = JacksonSerializer.serialize(this);
+        byte[] body = JsonSerializer.serialize(this);
         command.setBody(body);
         return command;
     }

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/log/GetLogBytesResponseCommand.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.apache.dolphinscheduler.remote.command.Command;
 import org.apache.dolphinscheduler.remote.command.CommandType;
-import org.apache.dolphinscheduler.remote.utils.JacksonSerializer;
+import org.apache.dolphinscheduler.remote.utils.JsonSerializer;
 
 import java.io.Serializable;
 
@@ -57,7 +57,7 @@ public void setData(byte[] data) {
     public Command convert2Command(long opaque){
         Command command = new Command(opaque);
         command.setType(CommandType.GET_LOG_BYTES_RESPONSE);
-        byte[] body = JacksonSerializer.serialize(this);
+        byte[] body = JsonSerializer.serialize(this);
         command.setBody(body);
         return command;
     }

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/log/RollViewLogRequestCommand.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.apache.dolphinscheduler.remote.command.Command;
 import org.apache.dolphinscheduler.remote.command.CommandType;
-import org.apache.dolphinscheduler.remote.utils.JacksonSerializer;
+import org.apache.dolphinscheduler.remote.utils.JsonSerializer;
 
 import java.io.Serializable;
 
@@ -84,7 +84,7 @@ public void setLimit(int limit) {
     public Command convert2Command(){
         Command command = new Command();
         command.setType(CommandType.ROLL_VIEW_LOG_REQUEST);
-        byte[] body = JacksonSerializer.serialize(this);
+        byte[] body = JsonSerializer.serialize(this);
         command.setBody(body);
         return command;
     }

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/log/RollViewLogResponseCommand.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.apache.dolphinscheduler.remote.command.Command;
 import org.apache.dolphinscheduler.remote.command.CommandType;
-import org.apache.dolphinscheduler.remote.utils.JacksonSerializer;
+import org.apache.dolphinscheduler.remote.utils.JsonSerializer;
 
 import java.io.Serializable;
 
@@ -57,7 +57,7 @@ public void setMsg(String msg) {
     public Command convert2Command(long opaque){
         Command command = new Command(opaque);
         command.setType(CommandType.ROLL_VIEW_LOG_RESPONSE);
-        byte[] body = JacksonSerializer.serialize(this);
+        byte[] body = JsonSerializer.serialize(this);
         command.setBody(body);
         return command;
     }

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/log/ViewLogRequestCommand.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.apache.dolphinscheduler.remote.command.Command;
 import org.apache.dolphinscheduler.remote.command.CommandType;
-import org.apache.dolphinscheduler.remote.utils.JacksonSerializer;
+import org.apache.dolphinscheduler.remote.utils.JsonSerializer;
 
 import java.io.Serializable;
 
@@ -56,7 +56,7 @@ public void setPath(String path) {
     public Command convert2Command(){
         Command command = new Command();
         command.setType(CommandType.VIEW_WHOLE_LOG_REQUEST);
-        byte[] body = JacksonSerializer.serialize(this);
+        byte[] body = JsonSerializer.serialize(this);
         command.setBody(body);
         return command;
     }

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/log/ViewLogResponseCommand.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.apache.dolphinscheduler.remote.command.Command;
 import org.apache.dolphinscheduler.remote.command.CommandType;
-import org.apache.dolphinscheduler.remote.utils.JacksonSerializer;
+import org.apache.dolphinscheduler.remote.utils.JsonSerializer;
 
 import java.io.Serializable;
 
@@ -57,7 +57,7 @@ public void setMsg(String msg) {
     public Command convert2Command(long opaque){
         Command command = new Command(opaque);
         command.setType(CommandType.VIEW_WHOLE_LOG_RESPONSE);
-        byte[] body = JacksonSerializer.serialize(this);
+        byte[] body = JsonSerializer.serialize(this);
         command.setBody(body);
         return command;
     }

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/utils/JsonSerializer.java
Patch:
@@ -27,9 +27,9 @@
 /**
  *  json serialize or deserialize
  */
-public class JacksonSerializer {
+public class JsonSerializer {
 	private static final ObjectMapper objectMapper = new ObjectMapper();
-	private static final Logger logger = LoggerFactory.getLogger(JacksonSerializer.class);
+	private static final Logger logger = LoggerFactory.getLogger(JsonSerializer.class);
 
 	/**
 	 * serialize to byte

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/processor/TaskAckProcessor.java
Patch:
@@ -28,7 +28,7 @@
 import org.apache.dolphinscheduler.remote.command.TaskExecuteAckCommand;
 import org.apache.dolphinscheduler.remote.processor.NettyRequestProcessor;
 import org.apache.dolphinscheduler.remote.utils.ChannelUtils;
-import org.apache.dolphinscheduler.remote.utils.JacksonSerializer;
+import org.apache.dolphinscheduler.remote.utils.JsonSerializer;
 import org.apache.dolphinscheduler.server.master.cache.TaskInstanceCacheManager;
 import org.apache.dolphinscheduler.server.master.cache.impl.TaskInstanceCacheManagerImpl;
 import org.apache.dolphinscheduler.server.master.processor.queue.TaskResponseEvent;
@@ -77,7 +77,7 @@ public TaskAckProcessor(){
     @Override
     public void process(Channel channel, Command command) {
         Preconditions.checkArgument(CommandType.TASK_EXECUTE_ACK == command.getType(), String.format("invalid command type : %s", command.getType()));
-        TaskExecuteAckCommand taskAckCommand = JacksonSerializer.deserialize(command.getBody(), TaskExecuteAckCommand.class);
+        TaskExecuteAckCommand taskAckCommand = JsonSerializer.deserialize(command.getBody(), TaskExecuteAckCommand.class);
         logger.info("taskAckCommand : {}", taskAckCommand);
 
         taskInstanceCacheManager.cacheTaskInstance(taskAckCommand);

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/processor/TaskKillResponseProcessor.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.dolphinscheduler.remote.command.CommandType;
 import org.apache.dolphinscheduler.remote.command.TaskKillResponseCommand;
 import org.apache.dolphinscheduler.remote.processor.NettyRequestProcessor;
-import org.apache.dolphinscheduler.remote.utils.JacksonSerializer;
+import org.apache.dolphinscheduler.remote.utils.JsonSerializer;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -45,7 +45,7 @@ public class TaskKillResponseProcessor implements NettyRequestProcessor {
     public void process(Channel channel, Command command) {
         Preconditions.checkArgument(CommandType.TASK_KILL_RESPONSE == command.getType(), String.format("invalid command type : %s", command.getType()));
 
-        TaskKillResponseCommand responseCommand = JacksonSerializer.deserialize(command.getBody(), TaskKillResponseCommand.class);
+        TaskKillResponseCommand responseCommand = JsonSerializer.deserialize(command.getBody(), TaskKillResponseCommand.class);
         logger.info("received task kill response command : {}", responseCommand);
     }
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/processor/TaskResponseProcessor.java
Patch:
@@ -27,7 +27,7 @@
 import org.apache.dolphinscheduler.remote.command.CommandType;
 import org.apache.dolphinscheduler.remote.command.TaskExecuteResponseCommand;
 import org.apache.dolphinscheduler.remote.processor.NettyRequestProcessor;
-import org.apache.dolphinscheduler.remote.utils.JacksonSerializer;
+import org.apache.dolphinscheduler.remote.utils.JsonSerializer;
 import org.apache.dolphinscheduler.server.master.cache.TaskInstanceCacheManager;
 import org.apache.dolphinscheduler.server.master.cache.impl.TaskInstanceCacheManagerImpl;
 import org.apache.dolphinscheduler.server.master.processor.queue.TaskResponseEvent;
@@ -78,7 +78,7 @@ public TaskResponseProcessor(){
     public void process(Channel channel, Command command) {
         Preconditions.checkArgument(CommandType.TASK_EXECUTE_RESPONSE == command.getType(), String.format("invalid command type : %s", command.getType()));
 
-        TaskExecuteResponseCommand responseCommand = JacksonSerializer.deserialize(command.getBody(), TaskExecuteResponseCommand.class);
+        TaskExecuteResponseCommand responseCommand = JsonSerializer.deserialize(command.getBody(), TaskExecuteResponseCommand.class);
         logger.info("received command : {}", responseCommand);
 
         taskInstanceCacheManager.cacheTaskInstance(responseCommand);

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/processor/queue/TaskResponseEvent.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.dolphinscheduler.server.master.processor.queue;
 
+import com.fasterxml.jackson.annotation.JsonFormat;
 import org.apache.dolphinscheduler.common.enums.ExecutionStatus;
 
 import java.util.Date;
@@ -44,11 +45,13 @@ public class TaskResponseEvent {
     /**
      * start time
      */
+    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss",timezone="GMT+8")
     private Date startTime;
 
     /**
      * end time
      */
+    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss",timezone="GMT+8")
     private Date endTime;
 
     /**

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/DependentTaskExecThread.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dolphinscheduler.server.master.runner;
 
+import com.fasterxml.jackson.annotation.JsonFormat;
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.DependResult;
 import org.apache.dolphinscheduler.common.enums.ExecutionStatus;
@@ -53,6 +54,7 @@ public class DependentTaskExecThread extends MasterBaseTaskExecThread {
     /**
      * dependent date
      */
+    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss",timezone="GMT+8")
     private Date dependentDate;
 
     /**

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/processor/TaskExecuteProcessor.java
Patch:
@@ -31,7 +31,7 @@
 import org.apache.dolphinscheduler.remote.command.TaskExecuteAckCommand;
 import org.apache.dolphinscheduler.remote.command.TaskExecuteRequestCommand;
 import org.apache.dolphinscheduler.remote.processor.NettyRequestProcessor;
-import org.apache.dolphinscheduler.remote.utils.JacksonSerializer;
+import org.apache.dolphinscheduler.remote.utils.JsonSerializer;
 import org.apache.dolphinscheduler.server.entity.TaskExecutionContext;
 import org.apache.dolphinscheduler.server.log.TaskLogDiscriminator;
 import org.apache.dolphinscheduler.server.worker.config.WorkerConfig;
@@ -78,7 +78,7 @@ public void process(Channel channel, Command command) {
         Preconditions.checkArgument(CommandType.TASK_EXECUTE_REQUEST == command.getType(),
                 String.format("invalid command type : %s", command.getType()));
 
-        TaskExecuteRequestCommand taskRequestCommand = JacksonSerializer.deserialize(
+        TaskExecuteRequestCommand taskRequestCommand = JsonSerializer.deserialize(
                 command.getBody(), TaskExecuteRequestCommand.class);
 
         logger.info("received command : {}", taskRequestCommand);

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/processor/TaskKillProcessor.java
Patch:
@@ -29,7 +29,7 @@
 import org.apache.dolphinscheduler.remote.command.TaskKillRequestCommand;
 import org.apache.dolphinscheduler.remote.command.TaskKillResponseCommand;
 import org.apache.dolphinscheduler.remote.processor.NettyRequestProcessor;
-import org.apache.dolphinscheduler.remote.utils.JacksonSerializer;
+import org.apache.dolphinscheduler.remote.utils.JsonSerializer;
 import org.apache.dolphinscheduler.remote.utils.Host;
 import org.apache.dolphinscheduler.remote.utils.Pair;
 import org.apache.dolphinscheduler.server.entity.TaskExecutionContext;
@@ -83,7 +83,7 @@ public TaskKillProcessor(){
     @Override
     public void process(Channel channel, Command command) {
         Preconditions.checkArgument(CommandType.TASK_KILL_REQUEST == command.getType(), String.format("invalid command type : %s", command.getType()));
-        TaskKillRequestCommand killCommand = JacksonSerializer.deserialize(command.getBody(), TaskKillRequestCommand.class);
+        TaskKillRequestCommand killCommand = JsonSerializer.deserialize(command.getBody(), TaskKillRequestCommand.class);
         logger.info("received kill command : {}", killCommand);
 
         Pair<Boolean, List<String>> result = doKill(killCommand);

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/TaskProps.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dolphinscheduler.server.worker.task;
 
+import com.fasterxml.jackson.annotation.JsonFormat;
 import org.apache.dolphinscheduler.common.enums.CommandType;
 import org.apache.dolphinscheduler.common.enums.DataType;
 import org.apache.dolphinscheduler.common.enums.Direct;
@@ -80,6 +81,7 @@ public class TaskProps {
   /**
    * task start time
    */
+  @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss",timezone="GMT+8")
   private Date taskStartTime;
 
   /**
@@ -99,6 +101,7 @@ public class TaskProps {
   /**
    * schedule time
    */
+  @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss",timezone="GMT+8")
   private Date scheduleTime;
 
   /**

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/worker/task/datax/DataxTaskTest.java
Patch:
@@ -23,6 +23,7 @@
 import java.util.List;
 import java.util.UUID;
 
+import com.alibaba.fastjson.JSON;
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.node.ObjectNode;
 import org.apache.dolphinscheduler.common.enums.CommandType;

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/NettyRemotingClient.java
Patch:
@@ -349,7 +349,7 @@ public Channel createChannel(Host host, boolean isSync) {
                 return channel;
             }
         } catch (Exception ex) {
-            logger.info("connect to {} error  {}", host, ex);
+            logger.warn(String.format("connect to %s error", host), ex);
         }
         return null;
     }

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/dispatch/host/LowerWeightHostManager.java
Patch:
@@ -87,7 +87,7 @@ public void init(){
         this.workerHostWeightsMap = new ConcurrentHashMap<>();
         this.lock = new ReentrantLock();
         this.executorService = Executors.newSingleThreadScheduledExecutor(new NamedThreadFactory("LowerWeightHostManagerExecutor"));
-        this.executorService.scheduleWithFixedDelay(new RefreshResourceTask(),0, 40, TimeUnit.SECONDS);
+        this.executorService.scheduleWithFixedDelay(new RefreshResourceTask(),0, 5, TimeUnit.SECONDS);
         this.roundRobinHostManager = new RoundRobinHostManager();
         this.roundRobinHostManager.setZookeeperNodeManager(getZookeeperNodeManager());
     }

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/zk/ZKServer.java
Patch:
@@ -95,8 +95,9 @@ public void shutdown() {
      * @param port The port to listen on
      */
     public static void startLocalZkServer(final int port) {
-
-        startLocalZkServer(port, System.getProperty("user.dir") +"/zookeeper_data", ZooKeeperServer.DEFAULT_TICK_TIME,"20");
+        String zkDataDir = System.getProperty("user.dir") +"/zookeeper_data";
+        logger.info("zk server starting, data dir path:{}" , zkDataDir);
+        startLocalZkServer(port, zkDataDir, ZooKeeperServer.DEFAULT_TICK_TIME,"60");
     }
 
     /**

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/ParameterUtils.java
Patch:
@@ -48,7 +48,7 @@ public class ParameterUtils {
    * @return convert parameters place holders
    */
   public static String convertParameterPlaceholders(String parameterString, Map<String, String> parameterMap) {
-    if (StringUtils.isEmpty(parameterString)) {
+    if (StringUtils.isEmpty(parameterString) || parameterMap == null) {
       return parameterString;
     }
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/dispatch/host/LowerWeightHostManager.java
Patch:
@@ -87,7 +87,7 @@ public void init(){
         this.workerHostWeightsMap = new ConcurrentHashMap<>();
         this.lock = new ReentrantLock();
         this.executorService = Executors.newSingleThreadScheduledExecutor(new NamedThreadFactory("LowerWeightHostManagerExecutor"));
-        this.executorService.scheduleWithFixedDelay(new RefreshResourceTask(),35, 40, TimeUnit.SECONDS);
+        this.executorService.scheduleWithFixedDelay(new RefreshResourceTask(),0, 40, TimeUnit.SECONDS);
         this.roundRobinHostManager = new RoundRobinHostManager();
         this.roundRobinHostManager.setZookeeperNodeManager(getZookeeperNodeManager());
     }

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessService.java
Patch:
@@ -921,7 +921,7 @@ private void createSubWorkProcessCommand(ProcessInstance parentProcessInstance,
 
         CommandType fatherType = parentProcessInstance.getCommandType();
         CommandType commandType = fatherType;
-        if(childInstance == null || commandType == CommandType.REPEAT_RUNNING){
+        if(childInstance == null){
             String fatherHistoryCommand = parentProcessInstance.getHistoryCmd();
             // sub process must begin with schedule/complement data
             // if father begin with scheduler/complement data

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/worker/task/datax/DataxTaskTest.java
Patch:
@@ -21,6 +21,7 @@
 import java.util.Arrays;
 import java.util.Date;
 import java.util.List;
+import java.util.UUID;
 
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.node.ObjectNode;
@@ -108,7 +109,7 @@ private void setTaskParems(Integer customConfig) {
         taskExecutionContext = Mockito.mock(TaskExecutionContext.class);
         Mockito.when(taskExecutionContext.getTaskParams()).thenReturn(props.getTaskParams());
         Mockito.when(taskExecutionContext.getExecutePath()).thenReturn("/tmp");
-        Mockito.when(taskExecutionContext.getTaskAppId()).thenReturn("1");
+        Mockito.when(taskExecutionContext.getTaskAppId()).thenReturn(UUID.randomUUID().toString());
         Mockito.when(taskExecutionContext.getTenantCode()).thenReturn("root");
         Mockito.when(taskExecutionContext.getStartTime()).thenReturn(new Date());
         Mockito.when(taskExecutionContext.getTaskTimeout()).thenReturn(10000);
@@ -273,6 +274,7 @@ public void testTryExecuteSqlResolveColumnNames()
     @Test
     public void testBuildDataxJsonFile()
             throws Exception {
+
         try {
             setTaskParems(1);
             Method method = DataxTask.class.getDeclaredMethod("buildDataxJsonFile");

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessService.java
Patch:
@@ -1813,7 +1813,7 @@ public <T> List<T> listUnauthorized(int userId,T[] needChecks,AuthorizationType
      * @return User
      */
     public User getUserById(int userId){
-        return userMapper.queryDetailsById(userId);
+        return userMapper.selectById(userId);
     }
 
     /**

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/Constants.java
Patch:
@@ -299,7 +299,7 @@ private Constants() {
     /**
      * user name regex
      */
-    public static final Pattern REGEX_USER_NAME = Pattern.compile("^[a-zA-Z0-9._-]{3,20}$");
+    public static final Pattern REGEX_USER_NAME = Pattern.compile("^[a-zA-Z0-9._-]{3,39}$");
 
     /**
      * email regex

File: dolphinscheduler-alert/src/test/java/org/apache/dolphinscheduler/alert/utils/JSONUtilsTest.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.dolphinscheduler.alert.utils;
 
+import com.fasterxml.jackson.databind.JsonNode;
 import org.junit.Before;
 import org.junit.Test;
 import org.slf4j.Logger;
@@ -109,4 +110,5 @@ public void testToList() {
 
     }
 
+
 }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProcessInstanceService.java
Patch:
@@ -504,9 +504,8 @@ public Map<String, Object> deleteProcessInstanceById(User loginUser, String proj
      *
      * @param processInstanceId process instance id
      * @return variables data
-     * @throws Exception exception
      */
-    public Map<String, Object> viewVariables( Integer processInstanceId) throws Exception {
+    public Map<String, Object> viewVariables(Integer processInstanceId) {
         Map<String, Object> result = new HashMap<>(5);
 
         ProcessInstance processInstance = processInstanceMapper.queryDetailById(processInstanceId);
@@ -537,7 +536,7 @@ public Map<String, Object> viewVariables( Integer processInstanceId) throws Exce
         List<TaskNode> taskNodeList = workflowData.getTasks();
 
         // global param string
-        String globalParamStr = JSON.toJSONString(globalParams);
+        String globalParamStr = JSONUtils.toJson(globalParams);
         globalParamStr = ParameterUtils.convertParameterPlaceholders(globalParamStr, timeParams);
         globalParams = JSON.parseArray(globalParamStr, Property.class);
         for (Property property : globalParams) {

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/utils/exportprocess/ProcessAddTaskParam.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.dolphinscheduler.api.utils.exportprocess;
 
-import com.alibaba.fastjson.JSONObject;
+import com.fasterxml.jackson.databind.JsonNode;
 
 /**
  * ProcessAddTaskParam
@@ -28,12 +28,12 @@ public interface ProcessAddTaskParam {
      * @param taskNode task node json object
      * @return task node json object
      */
-    JSONObject addExportSpecialParam(JSONObject taskNode);
+    JsonNode addExportSpecialParam(JsonNode taskNode);
 
     /**
      * add task special param: sql task dependent task
      * @param taskNode task node json object
      * @return task node json object
      */
-    JSONObject addImportSpecialParam(JSONObject taskNode);
+    JsonNode addImportSpecialParam(JsonNode taskNode);
 }

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/ParameterUtils.java
Patch:
@@ -196,7 +196,7 @@ public static String curingGlobalParams(Map<String,String> globalParamMap, List<
         property.setValue(val);
       }
     }
-    return JSON.toJSONString(globalParamList);
+    return JSONUtils.toJson(globalParamList);
   }
 
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/processor/TaskKillProcessor.java
Patch:
@@ -93,6 +93,7 @@ public void process(Channel channel, Command command) {
 
         TaskKillResponseCommand taskKillResponseCommand = buildKillTaskResponseCommand(killCommand,result);
         taskCallbackService.sendResult(taskKillResponseCommand.getTaskInstanceId(), taskKillResponseCommand.convert2Command());
+        taskExecutionContextCacheManager.removeByTaskInstanceId(taskKillResponseCommand.getTaskInstanceId());
     }
 
     /**

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/ProjectControllerTest.java
Patch:
@@ -46,7 +46,7 @@ public void testCreateProject() throws Exception {
 
         MultiValueMap<String, String> paramsMap = new LinkedMultiValueMap<>();
         paramsMap.add("projectName","project_test1");
-        paramsMap.add("desc","the test project");
+        paramsMap.add("description","the test project");
 
         MvcResult mvcResult = mockMvc.perform(post("/projects/create")
                 .header(SESSION_ID, sessionId)
@@ -56,7 +56,8 @@ public void testCreateProject() throws Exception {
                 .andReturn();
 
         Result result = JSONUtils.parseObject(mvcResult.getResponse().getContentAsString(), Result.class);
-        Assert.assertEquals(Status.SUCCESS.getCode(),result.getCode().intValue());
+        Assert.assertEquals(Status.SUCCESS.getCode(), result.getCode().intValue());
+        Assert.assertNotNull(result.getData());
         logger.info(mvcResult.getResponse().getContentAsString());
     }
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/datax/DataxTask.java
Patch:
@@ -362,9 +362,10 @@ private JSONObject buildDataxCoreJson() {
     private String buildShellCommandFile(String jobConfigFilePath)
         throws Exception {
         // generate scripts
-        String fileName = String.format("%s/%s_node.sh",
+        String fileName = String.format("%s/%s_node.%s",
                 taskExecutionContext.getExecutePath(),
-                taskExecutionContext.getTaskAppId());
+                taskExecutionContext.getTaskAppId(),
+                OSUtils.isWindows() ? "bat" : "sh");
 
         Path path = new File(fileName).toPath();
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/shell/ShellTask.java
Patch:
@@ -116,7 +116,7 @@ public void cancelApplication(boolean cancelApplication) throws Exception {
    */
   private String buildCommand() throws Exception {
     // generate scripts
-    String fileName = String.format("%s/%s_node.sh",
+    String fileName = String.format("%s/%s_node.%s",
             taskExecutionContext.getExecutePath(),
             taskExecutionContext.getTaskAppId(), OSUtils.isWindows() ? "bat" : "sh");
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/zk/ZKMasterClient.java
Patch:
@@ -262,7 +262,7 @@ private boolean checkTaskAfterWorkerStart(TaskInstance taskInstance) {
 		Date workerServerStartDate = null;
 		List<Server> workerServers = getServersList(ZKNodeType.WORKER);
 		for(Server workerServer : workerServers){
-			if(workerServer.getHost().equals(taskInstance.getHost())){
+		    if(taskInstance.getHost().equals(workerServer.getHost() + Constants.COLON + workerServer.getPort())){
 				workerServerStartDate = workerServer.getCreateTime();
 				break;
 			}

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/zk/AbstractZKClient.java
Patch:
@@ -187,7 +187,7 @@ public boolean checkZKNodeExists(String host, ZKNodeType zkNodeType) {
 		}
 		Map<String, String> serverMaps = getServerMaps(zkNodeType);
 		for(String hostKey : serverMaps.keySet()){
-			if(hostKey.startsWith(host)){
+			if(hostKey.contains(host)){
 				return true;
 			}
 		}

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/zk/ZKMasterClient.java
Patch:
@@ -335,6 +335,9 @@ private void failoverMaster(String masterHost) {
 
 		//updateProcessInstance host is null and insert into command
 		for(ProcessInstance processInstance : needFailoverProcessInstanceList){
+			if(Constants.NULL.equals(processInstance.getHost()) ){
+			    continue;
+			}
 			processService.processNeedFailoverProcessInstances(processInstance);
 		}
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/DataSourceController.java
Patch:
@@ -278,7 +278,7 @@ public Result connectDataSource(@ApiIgnore @RequestAttribute(value = Constants.S
                                     @RequestParam(value = "password") String password,
                                     @RequestParam(value = "connectType") DbConnectType connectType,
                                     @RequestParam(value = "other") String other) {
-        logger.info("login user {}, connect datasource: {} failure, note: {}, type: {}, connectType: {}, other: {}",
+        logger.info("login user {}, connect datasource: {}, note: {}, type: {}, connectType: {}, other: {}",
                 loginUser.getUserName(), name, note, type, connectType, other);
         String parameter = dataSourceService.buildParameter(name, note, type, host, port, database, principal, userName, password, connectType, other);
         Boolean isConnection = dataSourceService.checkConnection(type, parameter);

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/WorkerGroup.java
Patch:
@@ -16,9 +16,6 @@
  */
 package org.apache.dolphinscheduler.dao.entity;
 
-import com.baomidou.mybatisplus.annotation.IdType;
-import com.baomidou.mybatisplus.annotation.TableId;
-import com.baomidou.mybatisplus.annotation.TableName;
 
 import java.util.Date;
 import java.util.List;

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/Constants.java
Patch:
@@ -507,7 +507,7 @@ private Constants() {
     /**
      * heartbeat for zk info length
      */
-    public static final int HEARTBEAT_FOR_ZOOKEEPER_INFO_LENGTH = 9;
+    public static final int HEARTBEAT_FOR_ZOOKEEPER_INFO_LENGTH = 10;
 
 
     /**

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/ResInfo.java
Patch:
@@ -18,8 +18,6 @@
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.model.Server;
 
-import java.util.Date;
-
 /**
  *  heartbeat for ZK reigster res info
  */
@@ -109,6 +107,8 @@ public static Server parseHeartbeatForZKInfo(String heartBeatInfo){
                 Double.parseDouble(masterArray[2])));
         masterServer.setCreateTime(DateUtils.stringToDate(masterArray[6]));
         masterServer.setLastHeartbeatTime(DateUtils.stringToDate(masterArray[7]));
+        //set process id
+        masterServer.setId(Integer.parseInt(masterArray[9]));
         return masterServer;
     }
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/registry/MasterRegistry.java
Patch:
@@ -19,6 +19,7 @@
 import org.apache.curator.framework.CuratorFramework;
 import org.apache.curator.framework.state.ConnectionState;
 import org.apache.curator.framework.state.ConnectionStateListener;
+import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.utils.DateUtils;
 import org.apache.dolphinscheduler.common.utils.OSUtils;
 import org.apache.dolphinscheduler.remote.utils.NamedThreadFactory;
@@ -131,6 +132,7 @@ private String getMasterPath() {
      * @return
      */
     private String getLocalAddress(){
-        return OSUtils.getHost() + ":" + masterConfig.getListenPort();
+        return OSUtils.getHost() + Constants.COLON + masterConfig.getListenPort();
     }
+
 }

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/registry/HeartBeatTask.java
Patch:
@@ -73,7 +73,9 @@ public void run() {
             builder.append(reservedMemory).append(Constants.COMMA);
             builder.append(startTime).append(Constants.COMMA);
             builder.append(DateUtils.dateToString(new Date())).append(Constants.COMMA);
-            builder.append(status);
+            builder.append(status).append(COMMA);
+            //save process id
+            builder.append(OSUtils.getProcessID());
             zookeeperRegistryCenter.getZookeeperCachedOperator().update(heartBeatPath, builder.toString());
         } catch (Throwable ex){
             logger.error("error write heartbeat info", ex);

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/registry/WorkerRegistry.java
Patch:
@@ -19,6 +19,7 @@
 import org.apache.curator.framework.CuratorFramework;
 import org.apache.curator.framework.state.ConnectionState;
 import org.apache.curator.framework.state.ConnectionStateListener;
+import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.utils.DateUtils;
 import org.apache.dolphinscheduler.common.utils.OSUtils;
 import org.apache.dolphinscheduler.common.utils.StringUtils;
@@ -148,6 +149,7 @@ private String getWorkerPath() {
      * @return
      */
     private String getLocalAddress(){
-        return OSUtils.getHost() + ":" + workerConfig.getListenPort();
+        return OSUtils.getHost() + Constants.COLON + workerConfig.getListenPort();
     }
+
 }

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/master/consumer/TaskPriorityQueueConsumerTest.java
Patch:
@@ -235,7 +235,6 @@ public void testSqoopTask() throws Exception {
         dataSource.setUpdateTime(new Date());
 
         Mockito.when(processService.findDataSourceById(1)).thenReturn(dataSource);
-
         Thread.sleep(10000);
     }
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/sql/SqlTask.java
Patch:
@@ -179,7 +179,7 @@ private SqlBinds getSqlAndSqlParamsMap(String sql) {
         }
         //new
         //replace variable TIME with $[YYYYmmddd...] in sql when history run job and batch complement job
-        sql = ParameterUtils.replaceScheduleTime(sql, taskExecutionContext.getScheduleTime(), paramsMap);
+        sql = ParameterUtils.replaceScheduleTime(sql, taskExecutionContext.getScheduleTime());
         // special characters need to be escaped, ${} needs to be escaped
         String rgex = "['\"]*\\$\\{(.*?)\\}['\"]*";
         setSqlParamsMap(sql, rgex, sqlParamsMap, paramsMap);

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/DependentTaskExecThread.java
Patch:
@@ -146,7 +146,7 @@ private Boolean waitTaskQuit() {
                 if ( allDependentTaskFinish() || taskInstance.getState().typeIsFinished()){
                     break;
                 }
-                // updateProcessInstance task instance
+                // update process task
                 taskInstance = processService.findTaskInstanceById(taskInstance.getId());
                 processInstance = processService.findProcessInstanceById(processInstance.getId());
                 Thread.sleep(Constants.SLEEP_TIME_MILLIS);

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterExecThread.java
Patch:
@@ -338,7 +338,7 @@ private void prepareProcess() throws Exception {
     private void endProcess() {
         processInstance.setEndTime(new Date());
         processService.updateProcessInstance(processInstance);
-        if(processInstance.getState().typeIsWaittingThread()){
+        if(processInstance.getState().typeIsWaitingThread()){
             processService.createRecoveryWaitingThreadCommand(null, processInstance);
         }
         List<TaskInstance> taskInstances = processService.findValidTaskListByProcessId(processInstance.getId());

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessService.java
Patch:
@@ -254,7 +254,7 @@ public List<TaskNode> getTaskNodeListByDefinitionId(Integer defineId){
         //process data check
         if (null == processData) {
             logger.error("process data is null");
-            return null;
+            return new ArrayList<>();
         }
 
         return processData.getTasks();

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/master/consumer/TaskPriorityQueueConsumerTest.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.dolphinscheduler.common.enums.ExecutionStatus;
 import org.apache.dolphinscheduler.common.enums.Priority;
 import org.apache.dolphinscheduler.dao.entity.*;
+import org.apache.dolphinscheduler.server.master.config.MasterConfig;
 import org.apache.dolphinscheduler.server.master.dispatch.ExecutorDispatcher;
 import org.apache.dolphinscheduler.server.master.dispatch.executor.NettyExecutorManager;
 import org.apache.dolphinscheduler.server.registry.DependencyConfig;
@@ -48,7 +49,7 @@
 @RunWith(SpringJUnit4ClassRunner.class)
 @ContextConfiguration(classes={DependencyConfig.class, SpringApplicationContext.class, SpringZKServer.class,
         NettyExecutorManager.class, ExecutorDispatcher.class, ZookeeperRegistryCenter.class, TaskPriorityQueueConsumer.class,
-        ZookeeperNodeManager.class, ZookeeperCachedOperator.class, ZookeeperConfig.class})
+        ZookeeperNodeManager.class, ZookeeperCachedOperator.class, ZookeeperConfig.class, MasterConfig.class})
 public class TaskPriorityQueueConsumerTest {
 
 

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/master/runner/MasterTaskExecThreadTest.java
Patch:
@@ -42,7 +42,7 @@
 @RunWith(SpringJUnit4ClassRunner.class)
 @ContextConfiguration(classes={DependencyConfig.class, SpringApplicationContext.class, SpringZKServer.class,
         NettyExecutorManager.class, ExecutorDispatcher.class, ZookeeperRegistryCenter.class, TaskPriorityQueueConsumer.class,
-        ZookeeperNodeManager.class, ZookeeperCachedOperator.class, ZookeeperConfig.class, MasterConfig.class})
+        ZookeeperNodeManager.class, ZookeeperCachedOperator.class, ZookeeperConfig.class})
 public class MasterTaskExecThreadTest {
 
     @Test

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ResourcesService.java
Patch:
@@ -368,7 +368,7 @@ public Result updateResource(User loginUser,
 
                 List<ResourcesUser> resourcesUsers = resourceUserMapper.selectByMap(columnMap);
                 if (CollectionUtils.isNotEmpty(resourcesUsers)) {
-                    List<Integer> userIds = resourcesUsers.stream().map(ResourcesUser::getId).collect(Collectors.toList());
+                    List<Integer> userIds = resourcesUsers.stream().map(ResourcesUser::getUserId).collect(Collectors.toList());
                     List<User> users = userMapper.selectBatchIds(userIds);
                     String userNames = users.stream().map(User::getUserName).collect(Collectors.toList()).toString();
                     logger.error("resource is authorized to user {},suffix not allowed to be modified", userNames);

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/ExecutionStatus.java
Patch:
@@ -76,7 +76,7 @@ public boolean typeIsSuccess(){
   * @return status
   */
    public boolean typeIsFailure(){
-     return this == FAILURE || this == NEED_FAULT_TOLERANCE || this == KILL;
+     return this == FAILURE || this == NEED_FAULT_TOLERANCE;
    }
 
  /**

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java
Patch:
@@ -191,7 +191,7 @@ public enum Status {
     RESOURCE_IS_USED(20014, "resource file is used by process definition","资源文件被上线的流程定义使用了"),
     PARENT_RESOURCE_NOT_EXIST(20015, "parent resource not exist","父资源文件不存在"),
     RESOURCE_NOT_EXIST_OR_NO_PERMISSION(20016, "resource not exist or no permission,please view the task node and remove error resource","请检查任务节点并移除无权限或者已删除的资源"),
-
+    RESOURCE_IS_AUTHORIZED(20017, "resource is authorized to user {0},suffix not allowed to be modified", "资源文件已授权其他用户[{0}],后缀不允许修改"),
 
     USER_NO_OPERATION_PERM(30001, "user has no operation privilege", "当前用户没有操作权限"),
     USER_NO_OPERATION_PROJECT_PERM(30002, "user {0} is not has project {1} permission", "当前用户[{0}]没有[{1}]项目的操作权限"),

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/UsersService.java
Patch:
@@ -511,7 +511,7 @@ public Map<String, Object> grantResources(User loginUser, int userId, String res
         if (CollectionUtils.isNotEmpty(oldAuthorizedResIds)) {
 
             // get all resource id of process definitions those is released
-            List<Map<String, Object>> list = processDefinitionMapper.listResources();
+            List<Map<String, Object>> list = processDefinitionMapper.listResourcesByUser(userId);
             Map<Integer, Set<Integer>> resourceProcessMap = ResourceProcessDefinitionUtils.getResourceProcessDefinitionMap(list);
             Set<Integer> resourceIdSet = resourceProcessMap.keySet();
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProcessInstanceService.java
Patch:
@@ -476,17 +476,18 @@ public Map<String, Object> deleteProcessInstanceById(User loginUser, String proj
             return checkResult;
         }
         ProcessInstance processInstance = processService.findProcessInstanceDetailById(processInstanceId);
-        List<TaskInstance> taskInstanceList = processService.findValidTaskListByProcessId(processInstanceId);
-
         if (null == processInstance) {
             putMsg(result, Status.PROCESS_INSTANCE_NOT_EXIST, processInstanceId);
             return result;
         }
 
 
 
+        processService.removeTaskLogFile(processInstanceId);
         // delete database cascade
         int delete = processService.deleteWorkProcessInstanceById(processInstanceId);
+
+
         processService.deleteAllSubWorkProcessByParentId(processInstanceId);
         processService.deleteWorkProcessMapByParentId(processInstanceId);
 

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/CommandType.java
Patch:
@@ -1 +1 @@
-/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *    http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.dolphinscheduler.remote.command;public enum CommandType {    /**     *  roll view log request     */    ROLL_VIEW_LOG_REQUEST,    /**     *  roll view log response     */    ROLL_VIEW_LOG_RESPONSE,    /**     * view whole log request     */    VIEW_WHOLE_LOG_REQUEST,    /**     * view whole log response     */    VIEW_WHOLE_LOG_RESPONSE,    /**     * get log bytes request     */    GET_LOG_BYTES_REQUEST,    /**     * get log bytes response     */    GET_LOG_BYTES_RESPONSE,    WORKER_REQUEST,    MASTER_RESPONSE,    /**     * execute task request     */    TASK_EXECUTE_REQUEST,    /**     * execute task ack     */    TASK_EXECUTE_ACK,    /**     * execute task response     */    TASK_EXECUTE_RESPONSE,    /**     * kill task     */    TASK_KILL_REQUEST,    /**     * kill task response     */    TASK_KILL_RESPONSE,    /**     *  ping     */    PING,    /**     *  pong     */    PONG;}
\ No newline at end of file
+/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *    http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.dolphinscheduler.remote.command;public enum CommandType {    /**     * remove task log request,     */    REMOVE_TAK_LOG_REQUEST,    /**     * remove task log response     */    REMOVE_TAK_LOG_RESPONSE,    /**     *  roll view log request     */    ROLL_VIEW_LOG_REQUEST,    /**     *  roll view log response     */    ROLL_VIEW_LOG_RESPONSE,    /**     * view whole log request     */    VIEW_WHOLE_LOG_REQUEST,    /**     * view whole log response     */    VIEW_WHOLE_LOG_RESPONSE,    /**     * get log bytes request     */    GET_LOG_BYTES_REQUEST,    /**     * get log bytes response     */    GET_LOG_BYTES_RESPONSE,    WORKER_REQUEST,    MASTER_RESPONSE,    /**     * execute task request     */    TASK_EXECUTE_REQUEST,    /**     * execute task ack     */    TASK_EXECUTE_ACK,    /**     * execute task response     */    TASK_EXECUTE_RESPONSE,    /**     * kill task     */    TASK_KILL_REQUEST,    /**     * kill task response     */    TASK_KILL_RESPONSE,    /**     *  ping     */    PING,    /**     *  pong     */    PONG;}
\ No newline at end of file

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/log/LoggerServer.java
Patch:
@@ -55,6 +55,7 @@ public LoggerServer(){
         this.server.registerProcessor(CommandType.GET_LOG_BYTES_REQUEST, requestProcessor, requestProcessor.getExecutor());
         this.server.registerProcessor(CommandType.ROLL_VIEW_LOG_REQUEST, requestProcessor, requestProcessor.getExecutor());
         this.server.registerProcessor(CommandType.VIEW_WHOLE_LOG_REQUEST, requestProcessor, requestProcessor.getExecutor());
+        this.server.registerProcessor(CommandType.REMOVE_TAK_LOG_REQUEST, requestProcessor, requestProcessor.getExecutor());
     }
 
     /**

File: dolphinscheduler-alert/src/main/java/org/apache/dolphinscheduler/alert/template/impl/DefaultHTMLTemplate.java
Patch:
@@ -35,6 +35,7 @@ public class DefaultHTMLTemplate implements AlertTemplate {
 
     public static final Logger logger = LoggerFactory.getLogger(DefaultHTMLTemplate.class);
 
+
     @Override
     public String getMessageFromTemplate(String content, ShowType showType,boolean showAll) {
 
@@ -140,7 +141,7 @@ private String getMessageFromHtmlTemplate(String title,String content){
         checkNotNull(content);
         String htmlTableThead = StringUtils.isEmpty(title) ? "" : String.format("<thead>%s</thead>\n",title);
 
-        return "<!DOCTYPE HTML PUBLIC '-//W3C//DTD HTML 4.01 Transitional//EN' 'http://www.w3.org/TR/html4/loose.dtd'><html><head><title>dolphinscheduler</title><meta name='Keywords' content=''><meta name='Description' content=''><style type=\"text/css\">table {margin-top:0px;padding-top:0px;border:1px solid;font-size: 14px;color: #333333;border-width: 1px;border-color: #666666;border-collapse: collapse;}table th {border-width: 1px;padding: 8px;border-style: solid;border-color: #666666;background-color: #dedede;text-align: left;}table td {border-width: 1px;padding: 8px;border-style: solid;border-color: #666666;background-color: #ffffff;text-align: left;}</style></head><body style=\"margin:0;padding:0\"><table border=\"1px\" cellpadding=\"5px\" cellspacing=\"-10px\"> " +htmlTableThead + content +"</table></body></html>";
+        return Constants.HTML_HEADER_PREFIX +htmlTableThead + content + Constants.TABLE_BODY_HTML_TAIL;
     }
 
 }

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterExecThread.java
Patch:
@@ -496,6 +496,7 @@ private TaskInstance createTaskInstance(ProcessInstance processInstance, String
             }
 
             String processWorkerGroup = processInstance.getWorkerGroup();
+            processWorkerGroup = StringUtils.isBlank(processWorkerGroup) ? DEFAULT_WORKER_GROUP : processWorkerGroup;
             String taskWorkerGroup = StringUtils.isBlank(taskNode.getWorkerGroup()) ? processWorkerGroup : taskNode.getWorkerGroup();
             if (!processWorkerGroup.equals(DEFAULT_WORKER_GROUP) && taskWorkerGroup.equals(DEFAULT_WORKER_GROUP)) {
                 taskInstance.setWorkerGroup(processWorkerGroup);

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessService.java
Patch:
@@ -926,6 +926,7 @@ private void createSubWorkProcessCommand(ProcessInstance parentProcessInstance,
         command.setCommandParam(processMapStr);
         command.setCommandType(commandType);
         command.setProcessInstancePriority(parentProcessInstance.getProcessInstancePriority());
+        command.setWorkerGroup(parentProcessInstance.getWorkerGroup());
         createCommand(command);
         logger.info("sub process command created: {} ", command.toString());
     }

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/quartz/ProcessScheduleJob.java
Patch:
@@ -32,6 +32,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.util.Assert;
+import org.springframework.util.StringUtils;
 
 import java.util.Date;
 
@@ -98,7 +99,8 @@ public void execute(JobExecutionContext context) throws JobExecutionException {
         command.setScheduleTime(scheduledFireTime);
         command.setStartTime(fireTime);
         command.setWarningGroupId(schedule.getWarningGroupId());
-        command.setWorkerGroup(schedule.getWorkerGroup());
+        String workerGroup = StringUtils.isEmpty(schedule.getWorkerGroup()) ? Constants.DEFAULT_WORKER_GROUP : schedule.getWorkerGroup();
+        command.setWorkerGroup(workerGroup);
         command.setWarningType(schedule.getWarningType());
         command.setProcessInstancePriority(schedule.getProcessInstancePriority());
 

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/ExecutionStatus.java
Patch:
@@ -76,7 +76,7 @@ public boolean typeIsSuccess(){
   * @return status
   */
    public boolean typeIsFailure(){
-     return this == FAILURE || this == NEED_FAULT_TOLERANCE;
+     return this == FAILURE || this == NEED_FAULT_TOLERANCE || this == KILL;
    }
 
  /**

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java
Patch:
@@ -175,6 +175,7 @@ public enum Status {
     QUERY_WORKER_GROUP_FAIL(10146,"query worker group fail ", "查询worker分组失败"),
     DELETE_WORKER_GROUP_FAIL(10147,"delete worker group fail ", "删除worker分组失败"),
     COPY_PROCESS_DEFINITION_ERROR(10148,"copy process definition error", "复制工作流错误"),
+    USER_DISABLED(10149,"The current user is disabled", "当前用户已停用"),
 
     UDF_FUNCTION_NOT_EXIST(20001, "UDF function not found", "UDF函数不存在"),
     UDF_FUNCTION_EXISTS(20002, "UDF function already exists", "UDF函数已存在"),

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/LoginControllerTest.java
Patch:
@@ -56,7 +56,6 @@ public void testLogin() throws Exception {
         logger.info(mvcResult.getResponse().getContentAsString());
     }
 
-
     @Test
     public void testSignOut() throws Exception {
         MultiValueMap<String, String> paramsMap = new LinkedMultiValueMap<>();

File: e2e/src/test/java/org/apache/dolphinscheduler/locator/security/UserManageLocator.java
Patch:
@@ -42,7 +42,7 @@ public class UserManageLocator {
 
     public static final By SUBMIT = By.xpath("//div[3]/button[2]/span");
 
-    public static final By DELETE_USER_BUTTON = By.xpath("//span[2]/button/i");
+    public static final By DELETE_USER_BUTTON = By.xpath("//span[2]/button");
 
     public static final By CONFIRM_DELETE_USER_BUTTON = By.xpath("//div[2]/div/button[2]/span");
 }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/dto/resources/visitor/ResourceTreeVisitor.java
Patch:
@@ -50,6 +50,7 @@ public ResourceTreeVisitor(List<Resource> resourceList) {
      * visit
      * @return resoruce component
      */
+    @Override
     public ResourceComponent visit() {
         ResourceComponent rootDirectory = new Directory();
         for (Resource resource : resourceList) {
@@ -117,6 +118,7 @@ private static ResourceComponent getResourceComponent(Resource resource) {
         }else{
             tempResourceComponent = new FileLeaf();
         }
+        
         tempResourceComponent.setName(resource.getAlias());
         tempResourceComponent.setFullName(resource.getFullName().replaceFirst("/",""));
         tempResourceComponent.setId(resource.getId());

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ResourcesService.java
Patch:
@@ -104,7 +104,7 @@ public Result createDirectory(User loginUser,
             putMsg(result, Status.HDFS_NOT_STARTUP);
             return result;
         }
-        String fullName = currentDir.equals("/") ? String.format("%s%s",currentDir,name):String.format("%s/%s",currentDir,name);
+        String fullName = "/".equals(currentDir) ? String.format("%s%s",currentDir,name):String.format("%s/%s",currentDir,name);
 
         if (pid != -1) {
             Resource parentResource = resourcesMapper.selectById(pid);
@@ -229,7 +229,7 @@ public Result createResource(User loginUser,
         }
 
         // check resoure name exists
-        String fullName = currentDir.equals("/") ? String.format("%s%s",currentDir,name):String.format("%s/%s",currentDir,name);
+        String fullName = "/".equals(currentDir) ? String.format("%s%s",currentDir,name):String.format("%s/%s",currentDir,name);
         if (checkResourceExists(fullName, 0, type.ordinal())) {
             logger.error("resource {} has exist, can't recreate", name);
             putMsg(result, Status.RESOURCE_EXIST);
@@ -839,7 +839,7 @@ public Result onlineCreateResource(User loginUser, ResourceType type, String fil
         }
 
         String name = fileName.trim() + "." + nameSuffix;
-        String fullName = currentDirectory.equals("/") ? String.format("%s%s",currentDirectory,name):String.format("%s/%s",currentDirectory,name);
+        String fullName = "/".equals(currentDirectory) ? String.format("%s%s",currentDirectory,name):String.format("%s/%s",currentDirectory,name);
 
         result = verifyResourceName(fullName,type,loginUser);
         if (!result.getCode().equals(Status.SUCCESS.getCode())) {

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/task/datax/DataxParameters.java
Patch:
@@ -187,7 +187,9 @@ public void setJobSpeedRecord(int jobSpeedRecord) {
 
     @Override
     public boolean checkParameters() {
-        if (customConfig == null) return false;
+        if (customConfig == null) {
+            return false;
+        }
         if (customConfig == 0) {
             return dataSource != 0
                     && dataTarget != 0

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/zk/AbstractZKClient.java
Patch:
@@ -272,7 +272,7 @@ public void releaseMutex(InterProcessMutex mutex) {
 			try {
 				mutex.release();
 			} catch (Exception e) {
-				if(e.getMessage().equals("instance must be started before calling this method")){
+				if("instance must be started before calling this method".equals(e.getMessage())){
 					logger.warn("lock release");
 				}else{
 					logger.error("lock release failed",e);

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessService.java
Patch:
@@ -330,11 +330,13 @@ public void recurseFindSubProcessId(int parentId, List<Integer> ids){
 
             for (TaskNode taskNode : taskNodeList){
                 String parameter = taskNode.getParams();
-                if (parameter.contains(CMDPARAM_SUB_PROCESS_DEFINE_ID)){
+                JSONObject parameterJson = JSONObject.parseObject(parameter);
+                if (parameterJson.getInteger(CMDPARAM_SUB_PROCESS_DEFINE_ID) != null){
                     SubProcessParameters subProcessParam = JSON.parseObject(parameter, SubProcessParameters.class);
                     ids.add(subProcessParam.getProcessDefinitionId());
                     recurseFindSubProcessId(subProcessParam.getProcessDefinitionId(),ids);
                 }
+
             }
         }
     }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProcessInstanceService.java
Patch:
@@ -91,8 +91,7 @@ public class ProcessInstanceService extends BaseDAGService {
     @Autowired
     LoggerService loggerService;
 
-    @Autowired
-    WorkerGroupMapper workerGroupMapper;
+
 
     @Autowired
     UsersService usersService;

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProcessInstanceServiceTest.java
Patch:
@@ -80,8 +80,7 @@ public class ProcessInstanceServiceTest {
     @Mock
     LoggerService loggerService;
 
-    @Mock
-    WorkerGroupMapper workerGroupMapper;
+
 
     @Mock
     UsersService usersService;
@@ -486,7 +485,6 @@ private ProcessDefinition getProcessDefinition() {
      */
     private WorkerGroup getWorkGroup() {
         WorkerGroup workerGroup = new WorkerGroup();
-        workerGroup.setId(1);
         workerGroup.setName("test_workergroup");
         return workerGroup;
     }

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/WorkerServer.java
Patch:
@@ -140,4 +140,4 @@ public void close(String cause) {
         }
     }
 
-}
\ No newline at end of file
+}

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/WorkerServer.java
Patch:
@@ -71,9 +71,9 @@ public class WorkerServer {
     private SpringApplicationContext springApplicationContext;
 
     /**
-     * master server startup
+     * worker server startup
      *
-     * master server not use web service
+     * worker server not use web service
      * @param args arguments
      */
     public static void main(String[] args) {

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java
Patch:
@@ -214,8 +214,8 @@ public enum Status {
     EXECUTE_PROCESS_INSTANCE_ERROR(50015,"execute process instance error", "操作工作流实例错误"),
     CHECK_PROCESS_DEFINITION_ERROR(50016,"check process definition error", "检查工作流实例错误"),
     QUERY_RECIPIENTS_AND_COPYERS_BY_PROCESS_DEFINITION_ERROR(50017,"query recipients and copyers by process definition error", "查询收件人和抄送人错误"),
-    DATA_IS_NOT_VALID(50017,"data %s not valid", "数据[%s]无效"),
-    DATA_IS_NULL(50018,"data %s is null", "数据[%s]不能为空"),
+    DATA_IS_NOT_VALID(50017,"data {0} not valid", "数据[{0}]无效"),
+    DATA_IS_NULL(50018,"data {0} is null", "数据[{0}]不能为空"),
     PROCESS_NODE_HAS_CYCLE(50019,"process node has cycle", "流程节点间存在循环依赖"),
     PROCESS_NODE_S_PARAMETER_INVALID(50020,"process node %s parameter invalid", "流程节点[%s]参数无效"),
     PROCESS_DEFINE_STATE_ONLINE(50021, "process definition {0} is already on line", "工作流定义[{0}]已上线"),
@@ -226,6 +226,7 @@ public enum Status {
     BATCH_DELETE_PROCESS_DEFINE_BY_IDS_ERROR(50026,"batch delete process definition by ids {0} error", "批量删除工作流定义[{0}]错误"),
     TENANT_NOT_SUITABLE(50027,"there is not any tenant suitable, please choose a tenant available.", "没有合适的租户，请选择可用的租户"),
     EXPORT_PROCESS_DEFINE_BY_ID_ERROR(50028,"export process definition by id error", "导出工作流定义错误"),
+    BATCH_EXPORT_PROCESS_DEFINE_BY_IDS_ERROR(50028,"batch export process definition by ids error", "批量导出工作流定义错误"),
     IMPORT_PROCESS_DEFINE_ERROR(50029,"import process definition error", "导入工作流定义错误"),
 
     HDFS_NOT_STARTUP(60001,"hdfs not startup", "hdfs未启用"),

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/exceptions/ApiExceptionHandlerTest.java
Patch:
@@ -46,7 +46,7 @@ public void exceptionHandler() throws NoSuchMethodException {
     public void exceptionHandlerRuntime() throws NoSuchMethodException {
         ApiExceptionHandler handler = new ApiExceptionHandler();
         ProcessDefinitionController controller = new ProcessDefinitionController();
-        Method method = controller.getClass().getMethod("exportProcessDefinitionById", User.class, String.class, Integer.class, HttpServletResponse.class);
+        Method method = controller.getClass().getMethod("batchExportProcessDefinitionByIds", User.class, String.class, String.class, HttpServletResponse.class);
         HandlerMethod hm = new HandlerMethod(controller, method);
         Result result = handler.exceptionHandler(new RuntimeException("test exception"), hm);
         Assert.assertEquals(Status.INTERNAL_SERVER_ERROR_ARGS.getCode(),result.getCode().intValue());

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java
Patch:
@@ -214,8 +214,8 @@ public enum Status {
     EXECUTE_PROCESS_INSTANCE_ERROR(50015,"execute process instance error", "操作工作流实例错误"),
     CHECK_PROCESS_DEFINITION_ERROR(50016,"check process definition error", "检查工作流实例错误"),
     QUERY_RECIPIENTS_AND_COPYERS_BY_PROCESS_DEFINITION_ERROR(50017,"query recipients and copyers by process definition error", "查询收件人和抄送人错误"),
-    DATA_IS_NOT_VALID(50017,"data %s not valid", "数据[%s]无效"),
-    DATA_IS_NULL(50018,"data %s is null", "数据[%s]不能为空"),
+    DATA_IS_NOT_VALID(50017,"data {0} not valid", "数据[{0}]无效"),
+    DATA_IS_NULL(50018,"data {0} is null", "数据[{0}]不能为空"),
     PROCESS_NODE_HAS_CYCLE(50019,"process node has cycle", "流程节点间存在循环依赖"),
     PROCESS_NODE_S_PARAMETER_INVALID(50020,"process node %s parameter invalid", "流程节点[%s]参数无效"),
     PROCESS_DEFINE_STATE_ONLINE(50021, "process definition {0} is already on line", "工作流定义[{0}]已上线"),
@@ -226,6 +226,7 @@ public enum Status {
     BATCH_DELETE_PROCESS_DEFINE_BY_IDS_ERROR(50026,"batch delete process definition by ids {0} error", "批量删除工作流定义[{0}]错误"),
     TENANT_NOT_SUITABLE(50027,"there is not any tenant suitable, please choose a tenant available.", "没有合适的租户，请选择可用的租户"),
     EXPORT_PROCESS_DEFINE_BY_ID_ERROR(50028,"export process definition by id error", "导出工作流定义错误"),
+    BATCH_EXPORT_PROCESS_DEFINE_BY_IDS_ERROR(50028,"batch export process definition by ids error", "批量导出工作流定义错误"),
     IMPORT_PROCESS_DEFINE_ERROR(50029,"import process definition error", "导入工作流定义错误"),
 
     HDFS_NOT_STARTUP(60001,"hdfs not startup", "hdfs未启用"),

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/exceptions/ApiExceptionHandlerTest.java
Patch:
@@ -46,7 +46,7 @@ public void exceptionHandler() throws NoSuchMethodException {
     public void exceptionHandlerRuntime() throws NoSuchMethodException {
         ApiExceptionHandler handler = new ApiExceptionHandler();
         ProcessDefinitionController controller = new ProcessDefinitionController();
-        Method method = controller.getClass().getMethod("exportProcessDefinitionById", User.class, String.class, Integer.class, HttpServletResponse.class);
+        Method method = controller.getClass().getMethod("batchExportProcessDefinitionByIds", User.class, String.class, String.class, HttpServletResponse.class);
         HandlerMethod hm = new HandlerMethod(controller, method);
         Result result = handler.exceptionHandler(new RuntimeException("test exception"), hm);
         Assert.assertEquals(Status.INTERNAL_SERVER_ERROR_ARGS.getCode(),result.getCode().intValue());

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/utils/ZookeeperMonitor.java
Patch:
@@ -88,9 +88,9 @@ private static List<ZookeeperRecord> zookeeperInfoList(String zookeeperServers)
 				long sent = state.getSent();
 				long received = state.getReceived();
 				String mode =  state.getMode();
-				int minLatency =  state.getMinLatency();
-				int avgLatency = state.getAvgLatency();
-				int maxLatency = state.getMaxLatency();
+				float minLatency =  state.getMinLatency();
+				float avgLatency = state.getAvgLatency();
+				float maxLatency = state.getMaxLatency();
 				int nodeCount = state.getNodeCount();
 				int status = ok ? 1 : 0;
 				Date date = new Date();

File: dolphinscheduler-alert/src/main/java/org/apache/dolphinscheduler/alert/manager/EmailManager.java
Patch:
@@ -17,7 +17,6 @@
 package org.apache.dolphinscheduler.alert.manager;
 
 import org.apache.dolphinscheduler.alert.utils.MailUtils;
-import org.apache.dolphinscheduler.common.enums.ShowType;
 
 import java.util.List;
 import java.util.Map;
@@ -35,7 +34,7 @@ public class EmailManager {
      * @param showType the showType
      * @return the send result
      */
-    public Map<String,Object> send(List<String> receviersList,List<String> receviersCcList,String title,String content,ShowType showType){
+    public Map<String,Object> send(List<String> receviersList,List<String> receviersCcList,String title,String content,String showType){
 
         return MailUtils.sendMails(receviersList, receviersCcList, title, content, showType);
     }
@@ -48,7 +47,7 @@ public Map<String,Object> send(List<String> receviersList,List<String> receviers
      * @param showType the showType
      * @return the send result
      */
-    public Map<String,Object> send(List<String> receviersList,String title,String content,ShowType showType){
+    public Map<String,Object> send(List<String> receviersList,String title,String content,String showType){
 
         return MailUtils.sendMails(receviersList,title, content, showType);
     }

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/sql/SqlTask.java
Patch:
@@ -457,7 +457,7 @@ public void sendAttachment(String title,String content){
         String showTypeName = sqlParameters.getShowType().replace(COMMA,"").trim();
         if(EnumUtils.isValidEnum(ShowType.class,showTypeName)){
             Map<String, Object> mailResult = MailUtils.sendMails(receviersList,
-                    receviersCcList, title, content, ShowType.valueOf(showTypeName));
+                    receviersCcList, title, content, ShowType.valueOf(showTypeName).getDescp());
             if(!(boolean) mailResult.get(STATUS)){
                 throw new RuntimeException("send mail failed!");
             }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/SchedulerService.java
Patch:
@@ -365,6 +365,7 @@ public Map<String, Object> setScheduleState(User loginUser,
 
         if (masterServers.size() == 0) {
             putMsg(result, Status.MASTER_NOT_EXISTS);
+            return result;
         }
 
         // set status

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/zk/ZKMasterClient.java
Patch:
@@ -155,7 +155,7 @@ private void removeZKNodePath(String path, ZKNodeType zkNodeType, boolean failov
 	 * @throws Exception	exception
 	 */
 	private void failoverServerWhenDown(String serverHost, ZKNodeType zkNodeType) throws Exception {
-		if(StringUtils.isEmpty(serverHost)){
+		if(StringUtils.isEmpty(serverHost) || serverHost.startsWith(OSUtils.getHost())){
 			return ;
 		}
 		switch (zkNodeType){

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ExecutorService.java
Patch:
@@ -499,7 +499,7 @@ private int createCommand(CommandType commandType, int processDefineId,
         // determine whether to complement
         if(commandType == CommandType.COMPLEMENT_DATA){
             runMode = (runMode == null) ? RunMode.RUN_MODE_SERIAL : runMode;
-            if(null != start && null != end && start.before(end)){
+            if(null != start && null != end && !start.after(end)){
                 if(runMode == RunMode.RUN_MODE_SERIAL){
                     cmdParam.put(CMDPARAM_COMPLEMENT_DATA_START_DATE, DateUtils.dateToString(start));
                     cmdParam.put(CMDPARAM_COMPLEMENT_DATA_END_DATE, DateUtils.dateToString(end));

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ExecutorService.java
Patch:
@@ -499,7 +499,7 @@ private int createCommand(CommandType commandType, int processDefineId,
         // determine whether to complement
         if(commandType == CommandType.COMPLEMENT_DATA){
             runMode = (runMode == null) ? RunMode.RUN_MODE_SERIAL : runMode;
-            if(null != start && null != end && start.before(end)){
+            if(null != start && null != end && !start.after(end)){
                 if(runMode == RunMode.RUN_MODE_SERIAL){
                     cmdParam.put(CMDPARAM_COMPLEMENT_DATA_START_DATE, DateUtils.dateToString(start));
                     cmdParam.put(CMDPARAM_COMPLEMENT_DATA_END_DATE, DateUtils.dateToString(end));

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/processor/TaskCallbackService.java
Patch:
@@ -96,8 +96,9 @@ private NettyRemoteChannel getRemoteChannel(int taskInstanceId){
             return getRemoteChannel(newChannel, nettyRemoteChannel.getOpaque(), taskInstanceId);
         }
         logger.warn("original master : {} is not reachable, random select master", nettyRemoteChannel.getHost());
-        Set<String> masterNodes = zookeeperRegistryCenter.getMasterNodesDirectly();
+        Set<String> masterNodes = null;
         while (Stopper.isRunning()) {
+            masterNodes = zookeeperRegistryCenter.getMasterNodesDirectly();
             if (CollectionUtils.isEmpty(masterNodes)) {
                 logger.error("no available master node");
                 ThreadUtils.sleep(SLEEP_TIME_MILLIS);

File: dolphinscheduler-alert/src/main/java/org/apache/dolphinscheduler/alert/utils/EnterpriseWeChatUtils.java
Patch:
@@ -48,7 +48,7 @@ public class EnterpriseWeChatUtils {
     private static final String ENTERPRISE_WE_CHAT_SECRET = PropertyUtils.getString(Constants.ENTERPRISE_WECHAT_SECRET);
 
     private static final String ENTERPRISE_WE_CHAT_TOKEN_URL = PropertyUtils.getString(Constants.ENTERPRISE_WECHAT_TOKEN_URL);
-    private static final String ENTERPRISE_WE_CHAT_TOKEN_URL_REPLACE = ENTERPRISE_WE_CHAT_TOKEN_URL
+    private static final String ENTERPRISE_WE_CHAT_TOKEN_URL_REPLACE = ENTERPRISE_WE_CHAT_TOKEN_URL == null ? null : ENTERPRISE_WE_CHAT_TOKEN_URL
             .replaceAll("\\$corpId", ENTERPRISE_WE_CHAT_CORP_ID)
             .replaceAll("\\$secret", ENTERPRISE_WE_CHAT_SECRET);
 
@@ -266,5 +266,4 @@ public static String markdownByAlert(Alert alert){
         return result;
 
     }
-
 }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/exceptions/ApiExceptionHandler.java
Patch:
@@ -36,12 +36,13 @@ public class ApiExceptionHandler {
 
     @ExceptionHandler(Exception.class)
     public Result exceptionHandler(Exception e, HandlerMethod hm) {
-        logger.error(e.getMessage(), e);
         ApiException ce = hm.getMethodAnnotation(ApiException.class);
         if (ce == null) {
+            logger.error(e.getMessage(), e);
             return Result.errorWithArgs(Status.INTERNAL_SERVER_ERROR_ARGS, e.getMessage());
         }
         Status st = ce.value();
+        logger.error(st.getMsg(), e);
         return Result.error(st);
     }
 

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/Command.java
Patch:
@@ -111,7 +111,7 @@ public class Command {
     /**
      * worker group
      */
-    @TableField(exist = false)
+    @TableField("worker_group")
     private String workerGroup;
 
     public Command() {

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/consumer/TaskPriorityQueueConsumer.java
Patch:
@@ -31,6 +31,7 @@
 import org.apache.dolphinscheduler.common.task.sqoop.sources.SourceMysqlParameter;
 import org.apache.dolphinscheduler.common.task.sqoop.targets.TargetMysqlParameter;
 import org.apache.dolphinscheduler.common.thread.Stopper;
+import org.apache.dolphinscheduler.common.thread.ThreadUtils;
 import org.apache.dolphinscheduler.common.utils.*;
 import org.apache.dolphinscheduler.dao.entity.*;
 import org.apache.dolphinscheduler.server.builder.TaskExecutionContextBuilder;
@@ -122,9 +123,7 @@ private Boolean dispatch(int taskInstanceId){
                 result =  dispatcher.dispatch(executionContext);
             } catch (ExecuteException e) {
                 logger.error("dispatch error",e);
-                try {
-                    Thread.sleep(SLEEP_TIME_MILLIS);
-                } catch (InterruptedException e1) {}
+                ThreadUtils.sleep(SLEEP_TIME_MILLIS);
             }
 
             if (result){

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterExecThread.java
Patch:
@@ -914,7 +914,7 @@ private void updateProcessInstanceState() {
                     processInstance.getId(), processInstance.getName(),
                     processInstance.getState(), state,
                     processInstance.getCommandType());
-            processInstance.setState(state);
+
             ProcessInstance instance = processService.findProcessInstanceById(processInstance.getId());
             instance.setState(state);
             instance.setProcessDefinition(processInstance.getProcessDefinition());

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/Command.java
Patch:
@@ -111,7 +111,7 @@ public class Command {
     /**
      * worker group
      */
-    @TableField(exist = false)
+    @TableField("worker_group")
     private String workerGroup;
 
     public Command() {

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/consumer/TaskPriorityQueueConsumer.java
Patch:
@@ -31,6 +31,7 @@
 import org.apache.dolphinscheduler.common.task.sqoop.sources.SourceMysqlParameter;
 import org.apache.dolphinscheduler.common.task.sqoop.targets.TargetMysqlParameter;
 import org.apache.dolphinscheduler.common.thread.Stopper;
+import org.apache.dolphinscheduler.common.thread.ThreadUtils;
 import org.apache.dolphinscheduler.common.utils.*;
 import org.apache.dolphinscheduler.dao.entity.*;
 import org.apache.dolphinscheduler.server.builder.TaskExecutionContextBuilder;
@@ -122,9 +123,7 @@ private Boolean dispatch(int taskInstanceId){
                 result =  dispatcher.dispatch(executionContext);
             } catch (ExecuteException e) {
                 logger.error("dispatch error",e);
-                try {
-                    Thread.sleep(SLEEP_TIME_MILLIS);
-                } catch (InterruptedException e1) {}
+                ThreadUtils.sleep(SLEEP_TIME_MILLIS);
             }
 
             if (result){

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/datasource/SpringConnectionFactory.java
Patch:
@@ -64,7 +64,7 @@ public PaginationInterceptor paginationInterceptor() {
      * @return druid dataSource
      */
     @Bean(destroyMethod="")
-    public static DruidDataSource dataSource() {
+    public DruidDataSource dataSource() {
 
         DruidDataSource druidDataSource = new DruidDataSource();
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java
Patch:
@@ -27,6 +27,8 @@ public enum Status {
 
     SUCCESS(0, "success", "成功"),
 
+    INTERNAL_SERVER_ERROR_ARGS(10000, "Internal Server Error: {0}", "服务端异常: {0}"),
+
     REQUEST_PARAMS_NOT_VALID_ERROR(10001, "request parameter {0} is not valid", "请求参数[{0}]无效"),
     TASK_TIMEOUT_PARAMS_ERROR(10002, "task timeout parameter is not valid", "任务超时参数无效"),
     USER_NAME_EXIST(10003, "user name already exists", "用户名已存在"),

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/AccessTokenService.java
Patch:
@@ -83,6 +83,9 @@ public Map<String, Object> queryAccessTokenList(User loginUser, String searchVal
     public Map<String, Object> createToken(int userId, String expireTime, String token) {
         Map<String, Object> result = new HashMap<>(5);
 
+        if (userId <= 0) {
+            throw new IllegalArgumentException("User id should not less than or equals to 0.");
+        }
         AccessToken accessToken = new AccessToken();
         accessToken.setUserId(userId);
         accessToken.setExpireTime(DateUtils.stringToDate(expireTime));

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/SchedulerController.java
Patch:
@@ -76,7 +76,7 @@ public class SchedulerController extends BaseController {
     @ApiOperation(value = "createSchedule", notes= "CREATE_SCHEDULE_NOTES")
     @ApiImplicitParams({
             @ApiImplicitParam(name = "processDefinitionId", value = "PROCESS_DEFINITION_ID", required = true, dataType = "Int", example = "100"),
-            @ApiImplicitParam(name = "schedule", value = "SCHEDULE", dataType = "Int", example = "100"),
+            @ApiImplicitParam(name = "schedule", value = "SCHEDULE", dataType = "String", example = "{'startTime':'2019-06-10 00:00:00','endTime':'2019-06-13 00:00:00','crontab':'0 0 3/6 * * ? *'}"),
             @ApiImplicitParam(name = "warningType", value = "WARNING_TYPE", type ="WarningType"),
             @ApiImplicitParam(name = "warningGroupId", value = "WARNING_GROUP_ID", dataType = "Int", example = "100"),
             @ApiImplicitParam(name = "failureStrategy", value = "FAILURE_STRATEGY", type ="FailureStrategy"),
@@ -132,7 +132,7 @@ public Result createSchedule(@ApiIgnore @RequestAttribute(value = SESSION_USER)
     @ApiOperation(value = "updateSchedule", notes= "UPDATE_SCHEDULE_NOTES")
     @ApiImplicitParams({
             @ApiImplicitParam(name = "id", value = "SCHEDULE_ID", required = true, dataType = "Int", example = "100"),
-            @ApiImplicitParam(name = "schedule", value = "SCHEDULE", dataType = "Int", example = "100"),
+            @ApiImplicitParam(name = "schedule", value = "SCHEDULE", dataType = "String", example = "{'startTime':'2019-06-10 00:00:00','endTime':'2019-06-13 00:00:00','crontab':'0 0 3/6 * * ? *'}"),
             @ApiImplicitParam(name = "warningType", value = "WARNING_TYPE", type ="WarningType"),
             @ApiImplicitParam(name = "warningGroupId", value = "WARNING_GROUP_ID", dataType = "Int", example = "100"),
             @ApiImplicitParam(name = "failureStrategy", value = "FAILURE_STRATEGY", type ="FailureStrategy"),

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/SchedulerController.java
Patch:
@@ -76,7 +76,7 @@ public class SchedulerController extends BaseController {
     @ApiOperation(value = "createSchedule", notes= "CREATE_SCHEDULE_NOTES")
     @ApiImplicitParams({
             @ApiImplicitParam(name = "processDefinitionId", value = "PROCESS_DEFINITION_ID", required = true, dataType = "Int", example = "100"),
-            @ApiImplicitParam(name = "schedule", value = "SCHEDULE", dataType = "Int", example = "100"),
+            @ApiImplicitParam(name = "schedule", value = "SCHEDULE", dataType = "String", example = "{'startTime':'2019-06-10 00:00:00','endTime':'2019-06-13 00:00:00','crontab':'0 0 3/6 * * ? *'}"),
             @ApiImplicitParam(name = "warningType", value = "WARNING_TYPE", type ="WarningType"),
             @ApiImplicitParam(name = "warningGroupId", value = "WARNING_GROUP_ID", dataType = "Int", example = "100"),
             @ApiImplicitParam(name = "failureStrategy", value = "FAILURE_STRATEGY", type ="FailureStrategy"),
@@ -132,7 +132,7 @@ public Result createSchedule(@ApiIgnore @RequestAttribute(value = SESSION_USER)
     @ApiOperation(value = "updateSchedule", notes= "UPDATE_SCHEDULE_NOTES")
     @ApiImplicitParams({
             @ApiImplicitParam(name = "id", value = "SCHEDULE_ID", required = true, dataType = "Int", example = "100"),
-            @ApiImplicitParam(name = "schedule", value = "SCHEDULE", dataType = "Int", example = "100"),
+            @ApiImplicitParam(name = "schedule", value = "SCHEDULE", dataType = "String", example = "{'startTime':'2019-06-10 00:00:00','endTime':'2019-06-13 00:00:00','crontab':'0 0 3/6 * * ? *'}"),
             @ApiImplicitParam(name = "warningType", value = "WARNING_TYPE", type ="WarningType"),
             @ApiImplicitParam(name = "warningGroupId", value = "WARNING_GROUP_ID", dataType = "Int", example = "100"),
             @ApiImplicitParam(name = "failureStrategy", value = "FAILURE_STRATEGY", type ="FailureStrategy"),

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/datasource/BaseDataSource.java
Patch:
@@ -81,6 +81,7 @@ public void setPrincipal(String principal) {
 
   /**
    * gets the JDBC url for the data source connection
+   * @return getJdbcUrl
    */
   public String getJdbcUrl() {
     StringBuilder jdbcUrl = new StringBuilder(getAddress());

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/datasource/SQLServerDataSource.java
Patch:
@@ -51,7 +51,6 @@ public String getJdbcUrl() {
 
     /**
      * test whether the data source can be connected successfully
-     * @throws Exception
      */
     @Override
     public void isConnectable() {

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/datasource/SpringConnectionFactory.java
Patch:
@@ -134,7 +134,8 @@ public SqlSessionFactory sqlSessionFactory() throws Exception {
 
     /**
      * get sql session
-     * @return sqlSession
+     * @return SqlSession
+     * @throws Exception
      */
     @Bean
     public SqlSession sqlSession() throws Exception{

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/HadoopUtils.java
Patch:
@@ -425,10 +425,7 @@ public ExecutionStatus getApplicationStatus(String applicationId) throws JSONExc
     }
 
     /**
-<<<<<<< HEAD
      * get data hdfs path
-=======
->>>>>>> remotes/upstream/dev
      * @return data hdfs path
      */
     public static String getHdfsDataBasePath() {

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/Preconditions.java
Patch:
@@ -75,7 +75,7 @@ public static <T> T checkNotNull(T reference,  String errorMessage) {
      * @param errorMessageArgs The arguments for the error message, to be inserted into the
      *                         message template for the {@code %s} placeholders.
      *
-     * @param <T>
+     * @param <T> T
      * @return The object reference itself (generically typed).
      */
     public static <T> T checkNotNull(T reference,

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/zk/ZKMasterClient.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.dolphinscheduler.common.enums.ExecutionStatus;
 import org.apache.dolphinscheduler.common.enums.ZKNodeType;
 import org.apache.dolphinscheduler.common.model.Server;
+import org.apache.dolphinscheduler.common.utils.OSUtils;
 import org.apache.dolphinscheduler.dao.entity.ProcessInstance;
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
 import org.apache.dolphinscheduler.server.builder.TaskExecutionContextBuilder;
@@ -72,7 +73,7 @@ public void start() {
 			this.initSystemZNode();
 
 			// check if fault tolerance is required?failure and tolerance
-			if (getActiveMasterNum() == 1) {
+			if (getActiveMasterNum() == 1 && checkZKNodeExists(OSUtils.getHost(), ZKNodeType.MASTER)) {
 				failoverWorker(null, true);
 				failoverMaster(null);
 			}

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/consumer/TaskPriorityQueueConsumer.java
Patch:
@@ -191,6 +191,7 @@ protected TaskExecutionContext getTaskExecutionContext(int taskInstanceId){
                 .buildSQLTaskRelatedInfo(sqlTaskExecutionContext)
                 .buildDataxTaskRelatedInfo(dataxTaskExecutionContext)
                 .buildProcedureTaskRelatedInfo(procedureTaskExecutionContext)
+                .buildSqoopTaskRelatedInfo(sqoopTaskExecutionContext)
                 .create();
     }
 

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/Constants.java
Patch:
@@ -739,6 +739,7 @@ private Constants() {
     public static final String ALIAS = "alias";
     public static final String CONTENT = "content";
     public static final String DEPENDENT_SPLIT = ":||";
+    public static final String DEPENDENT_ALL = "ALL";
 
 
     /**

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/sqoop/SqoopTask.java
Patch:
@@ -25,7 +25,6 @@
 import org.apache.dolphinscheduler.server.entity.TaskExecutionContext;
 import org.apache.dolphinscheduler.server.utils.ParamUtils;
 import org.apache.dolphinscheduler.server.worker.task.AbstractYarnTask;
-import org.apache.dolphinscheduler.server.worker.task.TaskProps;
 import org.apache.dolphinscheduler.server.worker.task.sqoop.generator.SqoopJobGenerator;
 import org.slf4j.Logger;
 import java.util.Map;
@@ -62,7 +61,7 @@ public void init() throws Exception {
     protected String buildCommand() throws Exception {
         //get sqoop scripts
         SqoopJobGenerator generator = new SqoopJobGenerator();
-        String script = generator.generateSqoopJob(sqoopParameters);
+        String script = generator.generateSqoopJob(sqoopParameters,taskExecutionContext);
 
         Map<String, Property> paramsMap = ParamUtils.convert(ParamUtils.getUserDefParamsMap(taskExecutionContext.getDefinedParams()),
                 taskExecutionContext.getDefinedParams(),

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/sqoop/generator/sources/HdfsSourceGenerator.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.dolphinscheduler.common.task.sqoop.sources.SourceHdfsParameter;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
 import org.apache.dolphinscheduler.common.utils.StringUtils;
+import org.apache.dolphinscheduler.server.entity.TaskExecutionContext;
 import org.apache.dolphinscheduler.server.worker.task.sqoop.generator.ISourceGenerator;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -32,7 +33,7 @@ public class HdfsSourceGenerator implements ISourceGenerator {
     private Logger logger = LoggerFactory.getLogger(getClass());
 
     @Override
-    public String generate(SqoopParameters sqoopParameters) {
+    public String generate(SqoopParameters sqoopParameters,TaskExecutionContext taskExecutionContext) {
         StringBuilder result = new StringBuilder();
         try{
             SourceHdfsParameter sourceHdfsParameter

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/sqoop/generator/sources/HiveSourceGenerator.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.dolphinscheduler.common.task.sqoop.SqoopParameters;
 import org.apache.dolphinscheduler.common.task.sqoop.sources.SourceHiveParameter;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
+import org.apache.dolphinscheduler.server.entity.TaskExecutionContext;
 import org.apache.dolphinscheduler.server.worker.task.sqoop.generator.ISourceGenerator;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -32,7 +33,7 @@ public class HiveSourceGenerator implements ISourceGenerator {
     private Logger logger = LoggerFactory.getLogger(getClass());
 
     @Override
-    public String generate(SqoopParameters sqoopParameters) {
+    public String generate(SqoopParameters sqoopParameters,TaskExecutionContext taskExecutionContext) {
         StringBuilder sb = new StringBuilder();
         try{
             SourceHiveParameter sourceHiveParameter

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/sqoop/generator/targets/HdfsTargetGenerator.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.dolphinscheduler.common.task.sqoop.SqoopParameters;
 import org.apache.dolphinscheduler.common.task.sqoop.targets.TargetHdfsParameter;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
+import org.apache.dolphinscheduler.server.entity.TaskExecutionContext;
 import org.apache.dolphinscheduler.server.worker.task.sqoop.generator.ITargetGenerator;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -32,7 +33,7 @@ public class HdfsTargetGenerator implements ITargetGenerator {
     private Logger logger = LoggerFactory.getLogger(getClass());
 
     @Override
-    public String generate(SqoopParameters sqoopParameters) {
+    public String generate(SqoopParameters sqoopParameters,TaskExecutionContext taskExecutionContext) {
         StringBuilder result = new StringBuilder();
         try{
             TargetHdfsParameter targetHdfsParameter =

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/sqoop/generator/targets/HiveTargetGenerator.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.dolphinscheduler.common.task.sqoop.SqoopParameters;
 import org.apache.dolphinscheduler.common.task.sqoop.targets.TargetHiveParameter;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
+import org.apache.dolphinscheduler.server.entity.TaskExecutionContext;
 import org.apache.dolphinscheduler.server.worker.task.sqoop.generator.ITargetGenerator;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -32,7 +33,7 @@ public class HiveTargetGenerator implements ITargetGenerator {
     private Logger logger = LoggerFactory.getLogger(getClass());
 
     @Override
-    public String generate(SqoopParameters sqoopParameters) {
+    public String generate(SqoopParameters sqoopParameters,TaskExecutionContext taskExecutionContext) {
 
         StringBuilder result = new StringBuilder();
 

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/worker/task/dependent/DependentTaskTest.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.dolphinscheduler.common.utils.dependent.DependentDateUtils;
 import org.apache.dolphinscheduler.dao.entity.ProcessInstance;
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
+import org.apache.dolphinscheduler.server.entity.TaskExecutionContext;
 import org.apache.dolphinscheduler.server.worker.task.TaskProps;
 import org.apache.dolphinscheduler.service.bean.SpringApplicationContext;
 import org.apache.dolphinscheduler.service.process.ProcessService;
@@ -76,10 +77,9 @@ public void test() throws Exception{
 
         TaskProps taskProps = new TaskProps();
         String dependString = "{\"dependTaskList\":[{\"dependItemList\":[{\"dateValue\":\"today\",\"depTasks\":\"ALL\",\"projectId\":1,\"definitionList\":[{\"label\":\"C\",\"value\":4},{\"label\":\"B\",\"value\":3},{\"label\":\"A\",\"value\":2}],\"cycle\":\"day\",\"definitionId\":4}],\"relation\":\"AND\"}],\"relation\":\"AND\"}";
-        taskProps.setTaskInstId(252612);
         taskProps.setDependence(dependString);
         taskProps.setTaskStartTime(new Date());
-        DependentTask dependentTask = new DependentTask(taskProps, logger);
+        DependentTask dependentTask = new DependentTask(new TaskExecutionContext(), logger);
         dependentTask.init();
         dependentTask.handle();
         Assert.assertEquals(dependentTask.getExitStatusCode(), Constants.EXIT_CODE_SUCCESS );

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskInstance.java
Patch:
@@ -378,7 +378,7 @@ public void setAppLink(String appLink) {
 
 
     public boolean isSubProcess(){
-        return TaskType.SUB_PROCESS.getDescp().equals(this.taskType);
+        return TaskType.SUB_PROCESS.equals(TaskType.valueOf(this.taskType));
     }
 
     public String getDependency(){

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/HadoopUtils.java
Patch:
@@ -91,8 +91,7 @@ public static HadoopUtils getInstance() {
      */
 
     private void initHdfsPath() {
-        String hdfsPath = PropertyUtils.getString(resourceUploadPath);
-        Path path = new Path(hdfsPath);
+        Path path = new Path(resourceUploadPath);
 
         try {
             if (!fs.exists(path)) {

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/builder/TaskExecutionContextBuilder.java
Patch:
@@ -50,6 +50,7 @@ public TaskExecutionContextBuilder buildTaskInstanceRelatedInfo(TaskInstance tas
         taskExecutionContext.setTaskJson(taskInstance.getTaskJson());
         taskExecutionContext.setWorkerGroup(taskInstance.getWorkerGroup());
         taskExecutionContext.setHost(taskInstance.getHost());
+        taskExecutionContext.setResources(taskInstance.getResources());
         return this;
     }
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/runner/TaskExecuteThread.java
Patch:
@@ -83,11 +83,9 @@ public void run() {
             // task node
             TaskNode taskNode = JSONObject.parseObject(taskExecutionContext.getTaskJson(), TaskNode.class);
 
-            // get resource files
-            List<String> resourceFiles = createProjectResFiles(taskNode);
             // copy hdfs/minio file to local
             downloadResource(taskExecutionContext.getExecutePath(),
-                    resourceFiles,
+                    taskExecutionContext.getResources(),
                     taskExecutionContext.getTenantCode(),
                     logger);
 

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/worker/task/sqoop/SqoopTaskTest.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.dolphinscheduler.common.enums.DbType;
 import org.apache.dolphinscheduler.common.task.sqoop.SqoopParameters;
 import org.apache.dolphinscheduler.dao.entity.DataSource;
+import org.apache.dolphinscheduler.server.entity.TaskExecutionContext;
 import org.apache.dolphinscheduler.server.worker.task.TaskProps;
 import org.apache.dolphinscheduler.server.worker.task.sqoop.generator.SqoopJobGenerator;
 import org.apache.dolphinscheduler.service.bean.SpringApplicationContext;
@@ -58,16 +59,14 @@ public void before() throws Exception{
         Mockito.when(applicationContext.getBean(ProcessService.class)).thenReturn(processService);
 
         TaskProps props = new TaskProps();
-        props.setTaskDir("/tmp");
         props.setTaskAppId(String.valueOf(System.currentTimeMillis()));
-        props.setTaskInstId(1);
         props.setTenantCode("1");
         props.setEnvFile(".dolphinscheduler_env.sh");
         props.setTaskStartTime(new Date());
         props.setTaskTimeout(0);
         props.setTaskParams("{\"concurrency\":1,\"modelType\":\"import\",\"sourceType\":\"MYSQL\",\"targetType\":\"HIVE\",\"sourceParams\":\"{\\\"srcDatasource\\\":2,\\\"srcTable\\\":\\\"person_2\\\",\\\"srcQueryType\\\":\\\"1\\\",\\\"srcQuerySql\\\":\\\"SELECT * FROM person_2\\\",\\\"srcColumnType\\\":\\\"0\\\",\\\"srcColumns\\\":\\\"\\\",\\\"srcConditionList\\\":[],\\\"mapColumnHive\\\":[],\\\"mapColumnJava\\\":[{\\\"prop\\\":\\\"id\\\",\\\"direct\\\":\\\"IN\\\",\\\"type\\\":\\\"VARCHAR\\\",\\\"value\\\":\\\"Integer\\\"}]}\",\"targetParams\":\"{\\\"hiveDatabase\\\":\\\"stg\\\",\\\"hiveTable\\\":\\\"person_internal_2\\\",\\\"createHiveTable\\\":true,\\\"dropDelimiter\\\":false,\\\"hiveOverWrite\\\":true,\\\"replaceDelimiter\\\":\\\"\\\",\\\"hivePartitionKey\\\":\\\"date\\\",\\\"hivePartitionValue\\\":\\\"2020-02-16\\\"}\",\"localParams\":[]}");
 
-        sqoopTask = new SqoopTask(props,logger);
+        sqoopTask = new SqoopTask(new TaskExecutionContext(),logger);
         sqoopTask.init();
     }
 

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/Constants.java
Patch:
@@ -154,7 +154,7 @@ private Constants() {
     public static final String STRING_TRUE = "true";
 
     /**
-     * string true
+     * string false
      */
     public static final String STRING_FALSE = "false";
 

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/quartz/QuartzExecutors.java
Patch:
@@ -118,7 +118,7 @@ private void init() {
       properties.setProperty(ORG_QUARTZ_SCHEDULER_INSTANCENAME, conf.getString(ORG_QUARTZ_SCHEDULER_INSTANCENAME, QUARTZ_INSTANCENAME));
       properties.setProperty(ORG_QUARTZ_SCHEDULER_INSTANCEID, conf.getString(ORG_QUARTZ_SCHEDULER_INSTANCEID, QUARTZ_INSTANCEID));
       properties.setProperty(ORG_QUARTZ_SCHEDULER_MAKESCHEDULERTHREADDAEMON,conf.getString(ORG_QUARTZ_SCHEDULER_MAKESCHEDULERTHREADDAEMON,STRING_TRUE));
-      properties.setProperty(ORG_QUARTZ_JOBSTORE_USEPROPERTIES,conf.getString(ORG_QUARTZ_JOBSTORE_USEPROPERTIES,STRING_TRUE));
+      properties.setProperty(ORG_QUARTZ_JOBSTORE_USEPROPERTIES,conf.getString(ORG_QUARTZ_JOBSTORE_USEPROPERTIES,STRING_FALSE));
       properties.setProperty(ORG_QUARTZ_THREADPOOL_CLASS,conf.getString(ORG_QUARTZ_THREADPOOL_CLASS, SimpleThreadPool.class.getName()));
       properties.setProperty(ORG_QUARTZ_THREADPOOL_MAKETHREADSDAEMONS,conf.getString(ORG_QUARTZ_THREADPOOL_MAKETHREADSDAEMONS,STRING_TRUE));
       properties.setProperty(ORG_QUARTZ_THREADPOOL_THREADCOUNT,conf.getString(ORG_QUARTZ_THREADPOOL_THREADCOUNT, QUARTZ_THREADCOUNT));
@@ -128,6 +128,7 @@ private void init() {
       properties.setProperty(ORG_QUARTZ_JOBSTORE_ISCLUSTERED,conf.getString(ORG_QUARTZ_JOBSTORE_ISCLUSTERED,STRING_TRUE));
       properties.setProperty(ORG_QUARTZ_JOBSTORE_MISFIRETHRESHOLD,conf.getString(ORG_QUARTZ_JOBSTORE_MISFIRETHRESHOLD, QUARTZ_MISFIRETHRESHOLD));
       properties.setProperty(ORG_QUARTZ_JOBSTORE_CLUSTERCHECKININTERVAL,conf.getString(ORG_QUARTZ_JOBSTORE_CLUSTERCHECKININTERVAL, QUARTZ_CLUSTERCHECKININTERVAL));
+      properties.setProperty(ORG_QUARTZ_JOBSTORE_ACQUIRETRIGGERSWITHINLOCK,conf.getString(ORG_QUARTZ_JOBSTORE_ACQUIRETRIGGERSWITHINLOCK, QUARTZ_ACQUIRETRIGGERSWITHINLOCK));
       properties.setProperty(ORG_QUARTZ_JOBSTORE_DATASOURCE,conf.getString(ORG_QUARTZ_JOBSTORE_DATASOURCE, QUARTZ_DATASOURCE));
       properties.setProperty(ORG_QUARTZ_DATASOURCE_MYDS_CONNECTIONPROVIDER_CLASS,conf.getString(ORG_QUARTZ_DATASOURCE_MYDS_CONNECTIONPROVIDER_CLASS,DruidConnectionProvider.class.getName()));
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProcessInstanceController.java
Patch:
@@ -26,7 +26,6 @@
 import org.apache.dolphinscheduler.common.utils.StringUtils;
 import org.apache.dolphinscheduler.dao.entity.User;
 import io.swagger.annotations.*;
-import org.apache.dolphinscheduler.service.queue.TaskQueueFactory;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/DataAnalysisServiceTest.java
Patch:
@@ -28,7 +28,6 @@
 import org.apache.dolphinscheduler.dao.entity.User;
 import org.apache.dolphinscheduler.dao.mapper.*;
 import org.apache.dolphinscheduler.service.process.ProcessService;
-import org.apache.dolphinscheduler.service.queue.TaskQueueFactory;
 import org.junit.After;
 import org.junit.Assert;
 import org.junit.Before;
@@ -46,7 +45,6 @@
 import java.util.Map;
 
 @RunWith(PowerMockRunner.class)
-@PrepareForTest({TaskQueueFactory.class})
 public class DataAnalysisServiceTest {
     
     @InjectMocks

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/queue/TaskPriorityQueue.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.dolphinscheduler.service.queue;
 
 
-public interface TaskUpdateQueue {
+public interface TaskPriorityQueue {
 
     /**
      * put task info

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/queue/TaskPriorityQueueImpl.java
Patch:
@@ -17,8 +17,6 @@
 package org.apache.dolphinscheduler.service.queue;
 
 
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 import org.springframework.stereotype.Service;
 
 import java.util.*;
@@ -31,7 +29,7 @@
  * tasks queue implementation
  */
 @Service
-public class TaskUpdateQueueImpl implements TaskUpdateQueue {
+public class TaskPriorityQueueImpl implements TaskPriorityQueue {
     /**
      * queue size
      */

File: dolphinscheduler-service/src/test/java/queue/TaskUpdateQueueTest.java
Patch:
@@ -17,8 +17,8 @@
 
 package queue;
 
-import org.apache.dolphinscheduler.service.queue.TaskUpdateQueue;
-import org.apache.dolphinscheduler.service.queue.TaskUpdateQueueImpl;
+import org.apache.dolphinscheduler.service.queue.TaskPriorityQueue;
+import org.apache.dolphinscheduler.service.queue.TaskPriorityQueueImpl;
 import org.junit.Test;
 
 import static org.junit.Assert.*;
@@ -45,7 +45,7 @@ public void testQueue() throws Exception{
         String taskInfo3 = "1_1_0_3_default";
         String taskInfo4 = "1_1_0_4_default";
 
-        TaskUpdateQueue queue = new TaskUpdateQueueImpl();
+        TaskPriorityQueue queue = new TaskPriorityQueueImpl();
         queue.put(taskInfo1);
         queue.put(taskInfo2);
         queue.put(taskInfo3);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/UdfFuncService.java
Patch:
@@ -118,7 +118,7 @@ public Result createUdfFunction(User loginUser,
         }
         udf.setDescription(desc);
         udf.setResourceId(resourceId);
-        udf.setResourceName(resource.getAlias());
+        udf.setResourceName(resource.getFullName());
         udf.setType(type);
 
         udf.setCreateTime(now);
@@ -226,7 +226,7 @@ public Map<String, Object> updateUdfFunc(int udfFuncId,
         }
         udf.setDescription(desc);
         udf.setResourceId(resourceId);
-        udf.setResourceName(resource.getAlias());
+        udf.setResourceName(resource.getFullName());
         udf.setType(type);
 
         udf.setUpdateTime(now);

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/task/AbstractParameters.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.dolphinscheduler.common.task;
 
 import org.apache.dolphinscheduler.common.process.Property;
+import org.apache.dolphinscheduler.common.process.ResourceInfo;
 
 import java.util.LinkedHashMap;
 import java.util.List;
@@ -31,7 +32,7 @@ public abstract class AbstractParameters implements IParameters {
   public abstract boolean checkParameters();
 
   @Override
-  public abstract List<String> getResourceFilesList();
+  public abstract List<ResourceInfo> getResourceFilesList();
 
   /**
    * local parameters

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/task/IParameters.java
Patch:
@@ -16,6 +16,8 @@
  */
 package org.apache.dolphinscheduler.common.task;
 
+import org.apache.dolphinscheduler.common.process.ResourceInfo;
+
 import java.util.List;
 
 /**
@@ -34,5 +36,5 @@ public interface IParameters {
      *
      * @return resource files list
      */
-    List<String> getResourceFilesList();
+    List<ResourceInfo> getResourceFilesList();
 }

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/task/conditions/ConditionsParameters.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.apache.dolphinscheduler.common.enums.DependentRelation;
 import org.apache.dolphinscheduler.common.model.DependentTaskModel;
+import org.apache.dolphinscheduler.common.process.ResourceInfo;
 import org.apache.dolphinscheduler.common.task.AbstractParameters;
 
 import java.util.List;
@@ -41,7 +42,7 @@ public boolean checkParameters() {
     }
 
     @Override
-    public List<String> getResourceFilesList() {
+    public List<ResourceInfo> getResourceFilesList() {
         return null;
     }
 

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/task/datax/DataxParameters.java
Patch:
@@ -20,6 +20,7 @@
 import java.util.List;
 
 import org.apache.commons.lang.StringUtils;
+import org.apache.dolphinscheduler.common.process.ResourceInfo;
 import org.apache.dolphinscheduler.common.task.AbstractParameters;
 
 /**
@@ -198,7 +199,7 @@ public boolean checkParameters() {
     }
 
     @Override
-    public List<String> getResourceFilesList() {
+    public List<ResourceInfo> getResourceFilesList() {
         return new ArrayList<>();
     }
 

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/task/dependent/DependentParameters.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.apache.dolphinscheduler.common.enums.DependentRelation;
 import org.apache.dolphinscheduler.common.model.DependentTaskModel;
+import org.apache.dolphinscheduler.common.process.ResourceInfo;
 import org.apache.dolphinscheduler.common.task.AbstractParameters;
 
 import java.util.ArrayList;
@@ -36,7 +37,7 @@ public boolean checkParameters() {
     }
 
     @Override
-    public List<String> getResourceFilesList() {
+    public List<ResourceInfo> getResourceFilesList() {
         return new ArrayList<>();
     }
 

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/task/http/HttpParameters.java
Patch:
@@ -19,6 +19,7 @@
 import org.apache.dolphinscheduler.common.enums.HttpCheckCondition;
 import org.apache.dolphinscheduler.common.enums.HttpMethod;
 import org.apache.dolphinscheduler.common.process.HttpProperty;
+import org.apache.dolphinscheduler.common.process.ResourceInfo;
 import org.apache.dolphinscheduler.common.task.AbstractParameters;
 import org.apache.commons.lang.StringUtils;
 
@@ -62,7 +63,7 @@ public boolean checkParameters() {
     }
 
     @Override
-    public List<String> getResourceFilesList() {
+    public List<ResourceInfo> getResourceFilesList() {
         return new ArrayList<>();
     }
 

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/task/procedure/ProcedureParameters.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dolphinscheduler.common.task.procedure;
 
+import org.apache.dolphinscheduler.common.process.ResourceInfo;
 import org.apache.dolphinscheduler.common.task.AbstractParameters;
 import org.apache.commons.lang.StringUtils;
 
@@ -74,7 +75,7 @@ public boolean checkParameters() {
   }
 
   @Override
-  public List<String> getResourceFilesList() {
+  public List<ResourceInfo> getResourceFilesList() {
     return new ArrayList<>();
   }
 

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/task/sql/SqlParameters.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dolphinscheduler.common.task.sql;
 
+import org.apache.dolphinscheduler.common.process.ResourceInfo;
 import org.apache.dolphinscheduler.common.task.AbstractParameters;
 import org.apache.commons.lang.StringUtils;
 
@@ -189,7 +190,7 @@ public boolean checkParameters() {
     }
 
     @Override
-    public List<String> getResourceFilesList() {
+    public List<ResourceInfo> getResourceFilesList() {
         return new ArrayList<>();
     }
 

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/task/sqoop/SqoopParameters.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dolphinscheduler.common.task.sqoop;
 
+import org.apache.dolphinscheduler.common.process.ResourceInfo;
 import org.apache.dolphinscheduler.common.task.AbstractParameters;
 import org.apache.dolphinscheduler.common.utils.StringUtils;
 
@@ -111,7 +112,7 @@ public boolean checkParameters() {
     }
 
     @Override
-    public List<String> getResourceFilesList() {
+    public List<ResourceInfo> getResourceFilesList() {
        return new ArrayList<>();
     }
 }

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/task/subprocess/SubProcessParameters.java
Patch:
@@ -15,6 +15,7 @@
  * limitations under the License.
  */
 package org.apache.dolphinscheduler.common.task.subprocess;
+import org.apache.dolphinscheduler.common.process.ResourceInfo;
 import org.apache.dolphinscheduler.common.task.AbstractParameters;
 
 import java.util.ArrayList;
@@ -42,7 +43,7 @@ public boolean checkParameters() {
     }
 
     @Override
-    public List<String> getResourceFilesList() {
+    public List<ResourceInfo> getResourceFilesList() {
         return new ArrayList<>();
     }
 }
\ No newline at end of file

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/utils/FastJsonSerializer.java
Patch:
@@ -54,7 +54,7 @@ public static <T> String serializeToString(T obj)  {
 	 * @return deserialize type
 	 */
 	public static <T> T deserialize(byte[] src, Class<T> clazz) {
-		return JSON.parseObject(new String(src, Constants.UTF8), clazz);
+		return JSON.parseObject(src, clazz);
 	}
 
 }

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/upgrade/MysqlUpgradeDao.java
Patch:
@@ -66,7 +66,7 @@ public boolean isExistsTable(String tableName) {
             logger.error(e.getMessage(),e);
             throw new RuntimeException(e.getMessage(),e);
         } finally {
-            ConnectionUtils.releaseResource(rs, null, conn);
+            ConnectionUtils.releaseResource(rs, conn);
         }
 
     }
@@ -89,7 +89,7 @@ public boolean isExistsColumn(String tableName,String columnName) {
             logger.error(e.getMessage(),e);
             throw new RuntimeException(e.getMessage(),e);
         } finally {
-            ConnectionUtils.releaseResource(null, null, conn);
+            ConnectionUtils.releaseResource(conn);
         }
 
     }

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/upgrade/PostgresqlUpgradeDao.java
Patch:
@@ -96,7 +96,7 @@ public boolean isExistsTable(String tableName) {
             logger.error(e.getMessage(),e);
             throw new RuntimeException(e.getMessage(),e);
         } finally {
-            ConnectionUtils.releaseResource(rs, null, conn);
+            ConnectionUtils.releaseResource(rs, conn);
         }
 
     }
@@ -119,7 +119,7 @@ public boolean isExistsColumn(String tableName,String columnName) {
             logger.error(e.getMessage(),e);
             throw new RuntimeException(e.getMessage(),e);
         } finally {
-            ConnectionUtils.releaseResource(rs, null, conn);
+            ConnectionUtils.releaseResource(rs, conn);
 
         }
 

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/ConnectionFactoryTest.java
Patch:
@@ -31,7 +31,7 @@ public class ConnectionFactoryTest {
      */
     @Test
     public void testConnection()throws Exception{
-        Connection connection = ConnectionFactory.getInstance().getDataSource().getPooledConnection().getConnection();
+        Connection connection = ConnectionFactory.getInstance().getDataSource().getConnection();
         Assert.assertTrue(connection != null);
     }
 }
\ No newline at end of file

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/model/TaskNode.java
Patch:
@@ -281,7 +281,7 @@ public void setTimeout(String timeout) {
 
   /**
    * get task time out parameter
-   * @return
+   * @return task time out parameter
    */
   public TaskTimeoutParameter getTaskTimeoutParameter() {
     if(StringUtils.isNotEmpty(this.getTimeout())){

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/task/AbstractParameters.java
Patch:
@@ -40,7 +40,7 @@ public abstract class AbstractParameters implements IParameters {
 
   /**
    * get local parameters list
-   * @return
+   * @return Property list
    */
   public List<Property> getLocalParams() {
     return localParams;
@@ -52,7 +52,7 @@ public void setLocalParams(List<Property> localParams) {
 
   /**
    * get local parameters map
-   * @return
+   * @return parameters map
    */
   public Map<String,Property> getLocalParametersMap() {
       if (localParams != null) {

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/task/IParameters.java
Patch:
@@ -25,7 +25,7 @@ public interface IParameters {
     /**
      * check parameters is valid
      *
-     * @return
+     * @return result
      */
     boolean checkParameters();
 

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/thread/ThreadPoolExecutors.java
Patch:
@@ -71,7 +71,7 @@ public static ThreadPoolExecutors getInstance(String name, int maxThreads){
      * Executes the given task sometime in the future. The task may execute in a new thread or in an existing pooled thread.
      * If the task cannot be submitted for execution, either because this executor has been shutdown or because its capacity has been reached,
      * the task is handled by the current RejectedExecutionHandler.
-     * @param event
+     * @param event event
      */
     public void execute(final Runnable event) {
         Executor executor = getExecutor();

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/DateUtils.java
Patch:
@@ -1 +1 @@
-/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *    http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.dolphinscheduler.common.utils;import org.apache.dolphinscheduler.common.Constants;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import java.time.Instant;import java.time.LocalDateTime;import java.time.ZoneId;import java.time.format.DateTimeFormatter;import java.util.Calendar;import java.util.Date;/** * date utils */public class DateUtils {    private static final Logger logger = LoggerFactory.getLogger(DateUtils.class);    /**     * date to local datetime     *     * @param date date     * @return local datetime     */    private static LocalDateTime date2LocalDateTime(Date date) {        return LocalDateTime.ofInstant(date.toInstant(), ZoneId.systemDefault());    }    /**     * local datetime to date     *     * @param localDateTime local datetime     * @return date     */    private static Date localDateTime2Date(LocalDateTime localDateTime) {        Instant instant = localDateTime.atZone(ZoneId.systemDefault()).toInstant();        return Date.from(instant);    }    /**     * get current date str     *     * @return date string     */    public static String getCurrentTime() {        return getCurrentTime(Constants.YYYY_MM_DD_HH_MM_SS);    }    /**     * get the date string in the specified format of the current time     *     * @param format date format     * @return date string     */    public static String getCurrentTime(String format) {        return LocalDateTime.now().format(DateTimeFormatter.ofPattern(format));    }    /**     * get the formatted date string     *     * @param date date     * @param format e.g. yyyy-MM-dd HH:mm:ss     * @return date string     */    public static String format(Date date, String format) {        return format(date2LocalDateTime(date), format);    }    /**     * get the formatted date string     *     * @param localDateTime local data time     * @param format        yyyy-MM-dd HH:mm:ss     * @return date string     */    public static String format(LocalDateTime localDateTime, String format) {        return localDateTime.format(DateTimeFormatter.ofPattern(format));    }    /**     * convert time to yyyy-MM-dd HH:mm:ss format     *     * @param date date     * @return date string     */    public static String dateToString(Date date) {        return format(date, Constants.YYYY_MM_DD_HH_MM_SS);    }    /**     * convert string to date and time     *     * @param date date     * @param format  format     * @return date     */    public static Date parse(String date, String format) {        try {            LocalDateTime ldt = LocalDateTime.parse(date, DateTimeFormatter.ofPattern(format));            return localDateTime2Date(ldt);        } catch (Exception e) {            logger.error("error while parse date:" + date, e);        }        return null;    }    /**     * convert date str to yyyy-MM-dd HH:mm:ss format     *     * @param str date string     * @return yyyy-MM-dd HH:mm:ss format     */    public static Date stringToDate(String str) {        return parse(str, Constants.YYYY_MM_DD_HH_MM_SS);    }    /**     * get seconds between two dates     *     * @param d1 date1     * @param d2 date2     * @return differ seconds     */    public static long differSec(Date d1, Date d2) {        if(d1 == null || d2 == null){            return 0;        }        return (long) Math.ceil(differMs(d1, d2) / 1000.0);    }    /**     * get ms between two dates     *     * @param d1 date1     * @param d2 date2     * @return differ ms     */    public static long differMs(Date d1, Date d2) {        return Math.abs(d1.getTime() - d2.getTime());    }    /**     * get hours between two dates     *     * @param d1 date1     * @param d2 date2     * @return differ hours     */    public static long diffHours(Date d1, Date d2) {        return (long) Math.ceil(diffMin(d1, d2) / 60.0);    }    /**     * get minutes between two dates     *     * @param d1 date1     * @param d2 date2     * @return differ minutes     */    public static long diffMin(Date d1, Date d2) {        return (long) Math.ceil(differSec(d1, d2) / 60.0);    }    /**     * get the date of the specified date in the days before and after     *     * @param date date     * @param day day     * @return the date of the specified date in the days before and after     */    public static Date getSomeDay(Date date, int day) {        Calendar calendar = Calendar.getInstance();        calendar.setTime(date);        calendar.add(Calendar.DATE, day);        return calendar.getTime();    }    /**     * compare two dates     *     * @param future future date     * @param old old date     * @return true if future time greater than old time     */    public static boolean compare(Date future, Date old) {        return future.getTime() > old.getTime();    }    /**     * convert schedule string to date     *     * @param schedule schedule     * @return convert schedule string to date     */    public static Date getScheduleDate(String schedule) {        return stringToDate(schedule);    }    /**     * format time to readable     *     * @param ms ms     * @return format time     */    public static String format2Readable(long ms) {        long days = ms / (1000 * 60 * 60 * 24);        long hours = (ms % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60);        long minutes = (ms % (1000 * 60 * 60)) / (1000 * 60);        long seconds = (ms % (1000 * 60)) / 1000;        return String.format("%02d %02d:%02d:%02d", days, hours, minutes, seconds);    }    /**     * get monday     *     * note: Set the first day of the week to Monday, the default is Sunday     * @param date date     * @return get monday     */    public static Date getMonday(Date date) {        Calendar cal = Calendar.getInstance();        cal.setTime(date);        cal.setFirstDayOfWeek(Calendar.MONDAY);        cal.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);        return cal.getTime();    }    /**     * get sunday     *     * note: Set the first day of the week to Monday, the default is Sunday     * @param date date     * @return get sunday     */    public static Date getSunday(Date date) {        Calendar cal = Calendar.getInstance();        cal.setTime(date);        cal.setFirstDayOfWeek(Calendar.MONDAY);        cal.set(Calendar.DAY_OF_WEEK, Calendar.SUNDAY);        return cal.getTime();    }    /**     * get first day of month     *     * @param date date     * @return first day of month     * */    public static Date getFirstDayOfMonth(Date date) {        Calendar cal = Calendar.getInstance();        cal.setTime(date);        cal.set(Calendar.DAY_OF_MONTH, 1);        return cal.getTime();    }    /**     * get some hour of day     *     * @param date date     * @param offsetHour hours     * @return some hour of day     * */    public static Date getSomeHourOfDay(Date date, int offsetHour) {        Calendar cal = Calendar.getInstance();        cal.setTime(date);        cal.set(Calendar.HOUR_OF_DAY, cal.get(Calendar.HOUR_OF_DAY) + offsetHour);        cal.set(Calendar.MINUTE, 0);        cal.set(Calendar.SECOND, 0);        cal.set(Calendar.MILLISECOND, 0);        return cal.getTime();    }    /**     * get last day of month     *     * @param  date date     * @return  get last day of month     */    public static Date getLastDayOfMonth(Date date) {        Calendar cal = Calendar.getInstance();        cal.setTime(date);        cal.add(Calendar.MONTH, 1);        cal.set(Calendar.DAY_OF_MONTH, 1);        cal.add(Calendar.DAY_OF_MONTH, -1);        return cal.getTime();    }    /**     * return YYYY-MM-DD 00:00:00     *     * @param inputDay date     * @return start day     */    public static Date getStartOfDay(Date inputDay) {        Calendar cal = Calendar.getInstance();        cal.setTime(inputDay);        cal.set(Calendar.HOUR_OF_DAY, 0);        cal.set(Calendar.MINUTE, 0);        cal.set(Calendar.SECOND, 0);        cal.set(Calendar.MILLISECOND, 0);        return cal.getTime();    }    /**     * return YYYY-MM-DD 23:59:59     *     * @param inputDay day     * @return end of day     */    public static Date getEndOfDay(Date inputDay) {        Calendar cal = Calendar.getInstance();        cal.setTime(inputDay);        cal.set(Calendar.HOUR_OF_DAY, 23);        cal.set(Calendar.MINUTE, 59);        cal.set(Calendar.SECOND, 59);        cal.set(Calendar.MILLISECOND, 999);        return cal.getTime();    }    /**     * return YYYY-MM-DD 00:00:00     *     * @param inputDay day     * @return start of hour     */    public static Date getStartOfHour(Date inputDay) {        Calendar cal = Calendar.getInstance();        cal.setTime(inputDay);        cal.set(Calendar.MINUTE, 0);        cal.set(Calendar.SECOND, 0);        cal.set(Calendar.MILLISECOND, 0);        return cal.getTime();    }    /**     * return YYYY-MM-DD 23:59:59     *     * @param inputDay day     * @return end of hour     */    public static Date getEndOfHour(Date inputDay) {        Calendar cal = Calendar.getInstance();        cal.setTime(inputDay);        cal.set(Calendar.MINUTE, 59);        cal.set(Calendar.SECOND, 59);        cal.set(Calendar.MILLISECOND, 999);        return cal.getTime();    }    /**     * get current date     * @return current date     */    public static Date getCurrentDate() {        return DateUtils.parse(DateUtils.getCurrentTime(),                Constants.YYYY_MM_DD_HH_MM_SS);    }    /**     * get date     * @return result date     */    public static Date add(final Date date, final int calendarField, final int amount) {        if (date == null) {            throw new IllegalArgumentException("The date must not be null");        }        final Calendar c = Calendar.getInstance();        c.setTime(date);        c.add(calendarField, amount);        return c.getTime();    }}
\ No newline at end of file
+/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *    http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.dolphinscheduler.common.utils;import org.apache.dolphinscheduler.common.Constants;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import java.time.Instant;import java.time.LocalDateTime;import java.time.ZoneId;import java.time.format.DateTimeFormatter;import java.util.Calendar;import java.util.Date;/** * date utils */public class DateUtils {    private static final Logger logger = LoggerFactory.getLogger(DateUtils.class);    /**     * date to local datetime     *     * @param date date     * @return local datetime     */    private static LocalDateTime date2LocalDateTime(Date date) {        return LocalDateTime.ofInstant(date.toInstant(), ZoneId.systemDefault());    }    /**     * local datetime to date     *     * @param localDateTime local datetime     * @return date     */    private static Date localDateTime2Date(LocalDateTime localDateTime) {        Instant instant = localDateTime.atZone(ZoneId.systemDefault()).toInstant();        return Date.from(instant);    }    /**     * get current date str     *     * @return date string     */    public static String getCurrentTime() {        return getCurrentTime(Constants.YYYY_MM_DD_HH_MM_SS);    }    /**     * get the date string in the specified format of the current time     *     * @param format date format     * @return date string     */    public static String getCurrentTime(String format) {        return LocalDateTime.now().format(DateTimeFormatter.ofPattern(format));    }    /**     * get the formatted date string     *     * @param date date     * @param format e.g. yyyy-MM-dd HH:mm:ss     * @return date string     */    public static String format(Date date, String format) {        return format(date2LocalDateTime(date), format);    }    /**     * get the formatted date string     *     * @param localDateTime local data time     * @param format        yyyy-MM-dd HH:mm:ss     * @return date string     */    public static String format(LocalDateTime localDateTime, String format) {        return localDateTime.format(DateTimeFormatter.ofPattern(format));    }    /**     * convert time to yyyy-MM-dd HH:mm:ss format     *     * @param date date     * @return date string     */    public static String dateToString(Date date) {        return format(date, Constants.YYYY_MM_DD_HH_MM_SS);    }    /**     * convert string to date and time     *     * @param date date     * @param format  format     * @return date     */    public static Date parse(String date, String format) {        try {            LocalDateTime ldt = LocalDateTime.parse(date, DateTimeFormatter.ofPattern(format));            return localDateTime2Date(ldt);        } catch (Exception e) {            logger.error("error while parse date:" + date, e);        }        return null;    }    /**     * convert date str to yyyy-MM-dd HH:mm:ss format     *     * @param str date string     * @return yyyy-MM-dd HH:mm:ss format     */    public static Date stringToDate(String str) {        return parse(str, Constants.YYYY_MM_DD_HH_MM_SS);    }    /**     * get seconds between two dates     *     * @param d1 date1     * @param d2 date2     * @return differ seconds     */    public static long differSec(Date d1, Date d2) {        if(d1 == null || d2 == null){            return 0;        }        return (long) Math.ceil(differMs(d1, d2) / 1000.0);    }    /**     * get ms between two dates     *     * @param d1 date1     * @param d2 date2     * @return differ ms     */    public static long differMs(Date d1, Date d2) {        return Math.abs(d1.getTime() - d2.getTime());    }    /**     * get hours between two dates     *     * @param d1 date1     * @param d2 date2     * @return differ hours     */    public static long diffHours(Date d1, Date d2) {        return (long) Math.ceil(diffMin(d1, d2) / 60.0);    }    /**     * get minutes between two dates     *     * @param d1 date1     * @param d2 date2     * @return differ minutes     */    public static long diffMin(Date d1, Date d2) {        return (long) Math.ceil(differSec(d1, d2) / 60.0);    }    /**     * get the date of the specified date in the days before and after     *     * @param date date     * @param day day     * @return the date of the specified date in the days before and after     */    public static Date getSomeDay(Date date, int day) {        Calendar calendar = Calendar.getInstance();        calendar.setTime(date);        calendar.add(Calendar.DATE, day);        return calendar.getTime();    }    /**     * compare two dates     *     * @param future future date     * @param old old date     * @return true if future time greater than old time     */    public static boolean compare(Date future, Date old) {        return future.getTime() > old.getTime();    }    /**     * convert schedule string to date     *     * @param schedule schedule     * @return convert schedule string to date     */    public static Date getScheduleDate(String schedule) {        return stringToDate(schedule);    }    /**     * format time to readable     *     * @param ms ms     * @return format time     */    public static String format2Readable(long ms) {        long days = ms / (1000 * 60 * 60 * 24);        long hours = (ms % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60);        long minutes = (ms % (1000 * 60 * 60)) / (1000 * 60);        long seconds = (ms % (1000 * 60)) / 1000;        return String.format("%02d %02d:%02d:%02d", days, hours, minutes, seconds);    }    /**     * get monday     *     * note: Set the first day of the week to Monday, the default is Sunday     * @param date date     * @return get monday     */    public static Date getMonday(Date date) {        Calendar cal = Calendar.getInstance();        cal.setTime(date);        cal.setFirstDayOfWeek(Calendar.MONDAY);        cal.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);        return cal.getTime();    }    /**     * get sunday     *     * note: Set the first day of the week to Monday, the default is Sunday     * @param date date     * @return get sunday     */    public static Date getSunday(Date date) {        Calendar cal = Calendar.getInstance();        cal.setTime(date);        cal.setFirstDayOfWeek(Calendar.MONDAY);        cal.set(Calendar.DAY_OF_WEEK, Calendar.SUNDAY);        return cal.getTime();    }    /**     * get first day of month     *     * @param date date     * @return first day of month     * */    public static Date getFirstDayOfMonth(Date date) {        Calendar cal = Calendar.getInstance();        cal.setTime(date);        cal.set(Calendar.DAY_OF_MONTH, 1);        return cal.getTime();    }    /**     * get some hour of day     *     * @param date date     * @param offsetHour hours     * @return some hour of day     * */    public static Date getSomeHourOfDay(Date date, int offsetHour) {        Calendar cal = Calendar.getInstance();        cal.setTime(date);        cal.set(Calendar.HOUR_OF_DAY, cal.get(Calendar.HOUR_OF_DAY) + offsetHour);        cal.set(Calendar.MINUTE, 0);        cal.set(Calendar.SECOND, 0);        cal.set(Calendar.MILLISECOND, 0);        return cal.getTime();    }    /**     * get last day of month     *     * @param  date date     * @return  get last day of month     */    public static Date getLastDayOfMonth(Date date) {        Calendar cal = Calendar.getInstance();        cal.setTime(date);        cal.add(Calendar.MONTH, 1);        cal.set(Calendar.DAY_OF_MONTH, 1);        cal.add(Calendar.DAY_OF_MONTH, -1);        return cal.getTime();    }    /**     * return YYYY-MM-DD 00:00:00     *     * @param inputDay date     * @return start day     */    public static Date getStartOfDay(Date inputDay) {        Calendar cal = Calendar.getInstance();        cal.setTime(inputDay);        cal.set(Calendar.HOUR_OF_DAY, 0);        cal.set(Calendar.MINUTE, 0);        cal.set(Calendar.SECOND, 0);        cal.set(Calendar.MILLISECOND, 0);        return cal.getTime();    }    /**     * return YYYY-MM-DD 23:59:59     *     * @param inputDay day     * @return end of day     */    public static Date getEndOfDay(Date inputDay) {        Calendar cal = Calendar.getInstance();        cal.setTime(inputDay);        cal.set(Calendar.HOUR_OF_DAY, 23);        cal.set(Calendar.MINUTE, 59);        cal.set(Calendar.SECOND, 59);        cal.set(Calendar.MILLISECOND, 999);        return cal.getTime();    }    /**     * return YYYY-MM-DD 00:00:00     *     * @param inputDay day     * @return start of hour     */    public static Date getStartOfHour(Date inputDay) {        Calendar cal = Calendar.getInstance();        cal.setTime(inputDay);        cal.set(Calendar.MINUTE, 0);        cal.set(Calendar.SECOND, 0);        cal.set(Calendar.MILLISECOND, 0);        return cal.getTime();    }    /**     * return YYYY-MM-DD 23:59:59     *     * @param inputDay day     * @return end of hour     */    public static Date getEndOfHour(Date inputDay) {        Calendar cal = Calendar.getInstance();        cal.setTime(inputDay);        cal.set(Calendar.MINUTE, 59);        cal.set(Calendar.SECOND, 59);        cal.set(Calendar.MILLISECOND, 999);        return cal.getTime();    }    /**     * get current date     * @return current date     */    public static Date getCurrentDate() {        return DateUtils.parse(DateUtils.getCurrentTime(),                Constants.YYYY_MM_DD_HH_MM_SS);    }    /**     * get date     * @param date date     * @param calendarField calendarField     * @param amount amount     * @return date     */    public static Date add(final Date date, final int calendarField, final int amount) {        if (date == null) {            throw new IllegalArgumentException("The date must not be null");        }        final Calendar c = Calendar.getInstance();        c.setTime(date);        c.add(calendarField, amount);        return c.getTime();    }}
\ No newline at end of file

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/OSUtils.java
Patch:
@@ -416,6 +416,8 @@ public static boolean isWindows() {
 
   /**
    * check memory and cpu usage
+   * @param systemCpuLoad systemCpuLoad
+   * @param systemReservedMemory systemReservedMemory
    * @return check memory and cpu usage
    */
   public static Boolean checkResource(double systemCpuLoad, double systemReservedMemory){

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/consumer/TaskUpdateQueueConsumer.java
Patch:
@@ -18,7 +18,6 @@
 package org.apache.dolphinscheduler.server.master.consumer;
 
 import com.alibaba.fastjson.JSONObject;
-import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.ExecutionStatus;
 import org.apache.dolphinscheduler.common.enums.TaskType;
 import org.apache.dolphinscheduler.common.enums.UdfType;
@@ -103,7 +102,7 @@ public void run() {
 
 
     /**
-     * TODO dispatch task
+     * dispatch task
      *
      * @param taskInstanceId taskInstanceId
      * @return result

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterBaseTaskExecThread.java
Patch:
@@ -152,7 +152,7 @@ protected TaskInstance submit(){
 
 
     /**
-     * TODO dispatcht task
+     * dispatcht task
      * @param taskInstance taskInstance
      * @return whether submit task success
      */

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterExecThread.java
Patch:
@@ -405,7 +405,7 @@ private void postHandle() {
     }
 
     /**
-     * TODO submit task to execute
+     * submit task to execute
      * @param taskInstance task instance
      * @return TaskInstance
      */
@@ -910,7 +910,7 @@ private void runProcess(){
 
                 logger.info("task :{}, id:{} complete, state is {} ",
                         task.getName(), task.getId(), task.getState().toString());
-                //TODO  node success , post node submit
+                // node success , post node submit
                 if(task.getState() == ExecutionStatus.SUCCESS){
                     completeTaskList.put(task.getName(), task);
                     submitPostNode(task.getName());

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterTaskExecThread.java
Patch:
@@ -85,7 +85,7 @@ public TaskInstance getTaskInstance(){
     private Boolean alreadyKilled = false;
 
     /**
-     * TODO submit task instance and wait complete
+     * submit task instance and wait complete
      *
      * @return true is task quit is true
      */
@@ -108,7 +108,7 @@ public Boolean submitWaitComplete() {
     }
 
     /**
-     * TODO polling db
+     * polling db
      *
      * wait task quit
      * @return true if task quit success

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/master/registry/MasterRegistryTest.java
Patch:
@@ -54,7 +54,6 @@ public class MasterRegistryTest {
     public void testRegistry() throws InterruptedException {
         masterRegistry.registry();
         String masterPath = zookeeperRegistryCenter.getMasterPath();
-        Assert.assertEquals(ZookeeperRegistryCenter.MASTER_PATH, masterPath);
         TimeUnit.SECONDS.sleep(masterConfig.getMasterHeartbeatInterval() + 2); //wait heartbeat info write into zk node
         String masterNodePath = masterPath + "/" + (Constants.LOCAL_ADDRESS + ":" + masterConfig.getListenPort());
         String heartbeat = zookeeperRegistryCenter.getZookeeperCachedOperator().get(masterNodePath);

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/worker/registry/WorkerRegistryTest.java
Patch:
@@ -56,7 +56,6 @@ public class WorkerRegistryTest {
     public void testRegistry() throws InterruptedException {
         workerRegistry.registry();
         String workerPath = zookeeperRegistryCenter.getWorkerPath();
-        Assert.assertEquals(ZookeeperRegistryCenter.WORKER_PATH, workerPath);
         Assert.assertEquals(DEFAULT_WORKER_GROUP, workerConfig.getWorkerGroup().trim());
         String instancePath = workerPath + "/" + workerConfig.getWorkerGroup().trim() + "/" + (Constants.LOCAL_ADDRESS + ":" + workerConfig.getListenPort());
         TimeUnit.SECONDS.sleep(workerConfig.getWorkerHeartbeatInterval() + 2); //wait heartbeat info write into zk node

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/worker/task/datax/DataxTaskTest.java
Patch:
@@ -167,7 +167,6 @@ public void testInit()
     @Test
     public void testHandle()
             throws Exception {
-        //TODO Test goes here...
     }
 
     /**

File: dolphinscheduler-alert/src/main/java/org/apache/dolphinscheduler/alert/utils/MailUtils.java
Patch:
@@ -55,7 +55,7 @@ public class MailUtils {
 
     public static final Boolean mailUseSSL = PropertyUtils.getBoolean(Constants.MAIL_SMTP_SSL_ENABLE);
 
-    public static final String xlsFilePath = PropertyUtils.getString(Constants.XLS_FILE_PATH);
+    public static final String xlsFilePath = PropertyUtils.getString(Constants.XLS_FILE_PATH,"/tmp/xls");
 
     public static final String starttlsEnable = PropertyUtils.getString(Constants.MAIL_SMTP_STARTTLS_ENABLE);
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/consumer/TaskUpdateQueueConsumer.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.dolphinscheduler.server.master.consumer;
 
 import com.alibaba.fastjson.JSONObject;
+import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.ExecutionStatus;
 import org.apache.dolphinscheduler.common.enums.TaskType;
 import org.apache.dolphinscheduler.common.enums.UdfType;

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/zk/ZookeeperConfig.java
Patch:
@@ -24,7 +24,7 @@
  * zookeeper conf
  */
 @Component
-@PropertySource("classpath:common.properties")
+@PropertySource("classpath:zookeeper.properties")
 public class ZookeeperConfig {
 
     //zk connect config

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/processor/TaskExecuteProcessor.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.ExecutionStatus;
 import org.apache.dolphinscheduler.common.enums.TaskType;
+import org.apache.dolphinscheduler.common.utils.OSUtils;
 import org.apache.dolphinscheduler.server.log.TaskLogDiscriminator;
 import org.apache.dolphinscheduler.common.thread.ThreadUtils;
 import org.apache.dolphinscheduler.common.utils.FileUtils;
@@ -86,6 +87,7 @@ public void process(Channel channel, Command command) {
         String contextJson = taskRequestCommand.getTaskExecutionContext();
 
         TaskExecutionContext taskExecutionContext = JSONObject.parseObject(contextJson, TaskExecutionContext.class);
+        taskExecutionContext.setHost(OSUtils.getHost() + ":" + workerConfig.getListenPort());
 
         // local execute path
         String execLocalPath = getExecLocalPath(taskExecutionContext);

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/consumer/TaskUpdateQueueConsumer.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.dolphinscheduler.server.master.consumer;
 
 import com.alibaba.fastjson.JSONObject;
+import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.ExecutionStatus;
 import org.apache.dolphinscheduler.common.enums.TaskType;
 import org.apache.dolphinscheduler.common.enums.UdfType;
@@ -89,6 +90,7 @@ public void run() {
         while (Stopper.isRunning()){
             try {
                 if (taskUpdateQueue.size() == 0){
+                    Thread.sleep(Constants.SLEEP_TIME_MILLIS);
                     continue;
                 }
                 String taskPriorityInfo = taskUpdateQueue.take();

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/Constants.java
Patch:
@@ -466,7 +466,7 @@ private Constants() {
     /**
      * heartbeat for zk info length
      */
-    public static final int HEARTBEAT_FOR_ZOOKEEPER_INFO_LENGTH = 7;
+    public static final int HEARTBEAT_FOR_ZOOKEEPER_INFO_LENGTH = 5;
 
 
     /**

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/Constants.java
Patch:
@@ -121,7 +121,7 @@ private Constants() {
     /**
      * MasterServer directory registered in zookeeper
      */
-    public static final String ZOOKEEPER_DOLPHINSCHEDULER_MASTERS = "/nodes/masters";
+    public static final String ZOOKEEPER_DOLPHINSCHEDULER_MASTERS = "/nodes/master";
 
     /**
      * WorkerServer directory registered in zookeeper

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/OSUtils.java
Patch:
@@ -425,13 +425,13 @@ public static String getOSName() {
    * @return check memory and cpu usage
    */
   public static Boolean checkResource(double systemCpuLoad, double systemReservedMemory){
-    // judging usage
+    // system load average
     double loadAverage = OSUtils.loadAverage();
-    //
+    // system available physical memory
     double availablePhysicalMemorySize = OSUtils.availablePhysicalMemorySize();
 
     if(loadAverage > systemCpuLoad || availablePhysicalMemorySize < systemReservedMemory){
-      logger.warn("load or availablePhysicalMemorySize(G) is too high, it's availablePhysicalMemorySize(G):{},loadAvg:{}", availablePhysicalMemorySize , loadAverage);
+      logger.warn("load is too high or availablePhysicalMemorySize(G) is too low, it's availablePhysicalMemorySize(G):{},loadAvg:{}", availablePhysicalMemorySize , loadAverage);
       return false;
     }else{
       return true;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/config/WorkerConfig.java
Patch:
@@ -34,7 +34,7 @@ public class WorkerConfig {
     @Value("${worker.max.cpuload.avg}")
     private int workerMaxCpuloadAvg;
 
-    @Value("${master.reserved.memory}")
+    @Value("${worker.reserved.memory}")
     private double workerReservedMemory;
 
     public int getWorkerExecThreads() {

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterExecThread.java
Patch:
@@ -674,9 +674,9 @@ private DependResult isTaskDepsComplete(String taskName) {
         TaskNode taskNode = dag.getNode(taskName);
         List<String> depNameList = taskNode.getDepList();
         for(String depsNode : depNameList ){
-
-            if(forbiddenTaskList.containsKey(depsNode) ||
-                    skipTaskNodeList.containsKey(depsNode)){
+            if(!dag.containsNode(depsNode)
+                    || forbiddenTaskList.containsKey(depsNode)
+                    || skipTaskNodeList.containsKey(depsNode)){
                 continue;
             }
             // dependencies must be fully completed

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/NettyRemotingClient.java
Patch:
@@ -301,7 +301,7 @@ public Channel createChannel(Address address, boolean isSync) {
                 return channel;
             }
         } catch (Exception ex) {
-            logger.info("connect to {} error  {}", address, ex);
+            logger.error("connect to {} error", address, ex);
         }
         return null;
     }

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/handler/NettyServerHandler.java
Patch:
@@ -117,7 +117,7 @@ public void run() {
                     try {
                         pair.getLeft().process(channel, msg);
                     } catch (Throwable ex) {
-                        logger.error("process msg {} error : {}", msg, ex);
+                        logger.error("process msg {} error", msg, ex);
                     }
                 }
             };

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/utils/CheckUtilsTest.java
Patch:
@@ -211,6 +211,7 @@ public void testCheckTaskNodeParameters() {
         // DataxParameters
         DataxParameters dataxParameters = new DataxParameters();
         assertFalse(CheckUtils.checkTaskNodeParameters(JSONUtils.toJsonString(dataxParameters), TaskType.DATAX.toString()));
+        dataxParameters.setCustomConfig(0);
         dataxParameters.setDataSource(111);
         dataxParameters.setDataTarget(333);
         dataxParameters.setSql("sql");

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/TaskRecordDao.java
Patch:
@@ -61,7 +61,7 @@ public class TaskRecordDao {
      * @return whether startup taskrecord
      */
     public static boolean getTaskRecordFlag(){
-       return conf.getBoolean(Constants.TASK_RECORD_FLAG);
+       return conf.getBoolean(Constants.TASK_RECORD_FLAG,false);
     }
     /**
      * create connection

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/Command.java
Patch:
@@ -16,8 +16,6 @@
  */
 package org.apache.dolphinscheduler.remote.command;
 
-import com.sun.org.apache.regexp.internal.RE;
-
 import java.io.Serializable;
 import java.util.concurrent.atomic.AtomicLong;
 

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/AlertDao.java
Patch:
@@ -50,8 +50,8 @@ public class AlertDao extends AbstractBaseDao {
 
     @Override
     protected void init() {
-        alertMapper = ConnectionFactory.getMapper(AlertMapper.class);
-        userAlertGroupMapper = ConnectionFactory.getMapper(UserAlertGroupMapper.class);
+        alertMapper = ConnectionFactory.getInstance().getMapper(AlertMapper.class);
+        userAlertGroupMapper = ConnectionFactory.getInstance().getMapper(UserAlertGroupMapper.class);
     }
 
     /**

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/upgrade/UpgradeDao.java
Patch:
@@ -53,7 +53,7 @@ protected void init() {
      * @return DruidDataSource
      */
     public static DruidDataSource getDataSource(){
-        DruidDataSource dataSource = ConnectionFactory.getDataSource();
+        DruidDataSource dataSource = ConnectionFactory.getInstance().getDataSource();
         dataSource.setInitialSize(2);
         dataSource.setMinIdle(2);
         dataSource.setMaxActive(2);

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/ConnectionFactoryTest.java
Patch:
@@ -31,7 +31,7 @@ public class ConnectionFactoryTest {
      */
     @Test
     public void testConnection()throws Exception{
-        Connection connection = ConnectionFactory.getDataSource().getPooledConnection().getConnection();
+        Connection connection = ConnectionFactory.getInstance().getDataSource().getPooledConnection().getConnection();
         Assert.assertTrue(connection != null);
     }
 }
\ No newline at end of file

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/builder/TaskExecutionContextBuilder.java
Patch:
@@ -49,6 +49,7 @@ public TaskExecutionContextBuilder buildTaskInstanceRelatedInfo(TaskInstance tas
         taskExecutionContext.setExecutePath(taskInstance.getExecutePath());
         taskExecutionContext.setTaskJson(taskInstance.getTaskJson());
         taskExecutionContext.setWorkerGroup(taskInstance.getWorkerGroup());
+        taskExecutionContext.setHost(taskInstance.getHost());
         return this;
     }
 

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/zk/ZookeeperCachedOperator.java
Patch:
@@ -39,7 +39,7 @@ public class ZookeeperCachedOperator extends ZookeeperOperator {
      */
     @Override
     protected void registerListener() {
-        treeCache = new TreeCache(zkClient, getZookeeperConfig().getDsRoot());
+        treeCache = new TreeCache(zkClient, getZookeeperConfig().getDsRoot() + "/nodes");
         logger.info("add listener to zk path: {}", getZookeeperConfig().getDsRoot());
         try {
             treeCache.start();

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/registry/MasterRegistry.java
Patch:
@@ -21,7 +21,6 @@
 import org.apache.curator.framework.state.ConnectionStateListener;
 import org.apache.dolphinscheduler.common.utils.DateUtils;
 import org.apache.dolphinscheduler.common.utils.OSUtils;
-import org.apache.dolphinscheduler.remote.utils.Constants;
 import org.apache.dolphinscheduler.remote.utils.NamedThreadFactory;
 import org.apache.dolphinscheduler.server.master.config.MasterConfig;
 import org.apache.dolphinscheduler.server.registry.ZookeeperRegistryCenter;
@@ -79,7 +78,7 @@ public void init(){
      *  registry
      */
     public void registry() {
-        String address = Constants.LOCAL_ADDRESS;
+        String address = OSUtils.getHost();
         String localNodePath = getMasterPath();
         zookeeperRegistryCenter.getZookeeperCachedOperator().persistEphemeral(localNodePath, "");
         zookeeperRegistryCenter.getZookeeperCachedOperator().getZkClient().getConnectionStateListenable().addListener(new ConnectionStateListener() {
@@ -125,7 +124,7 @@ private String getMasterPath() {
      * @return
      */
     private String getLocalAddress(){
-        return Constants.LOCAL_ADDRESS + ":" + masterConfig.getListenPort();
+        return OSUtils.getHost() + ":" + masterConfig.getListenPort();
     }
 
     /**

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/registry/WorkerRegistry.java
Patch:
@@ -22,7 +22,6 @@
 import org.apache.dolphinscheduler.common.utils.DateUtils;
 import org.apache.dolphinscheduler.common.utils.OSUtils;
 import org.apache.dolphinscheduler.common.utils.StringUtils;
-import org.apache.dolphinscheduler.remote.utils.Constants;
 import org.apache.dolphinscheduler.remote.utils.NamedThreadFactory;
 import org.apache.dolphinscheduler.server.registry.ZookeeperRegistryCenter;
 import org.apache.dolphinscheduler.server.worker.config.WorkerConfig;
@@ -86,7 +85,7 @@ public void init(){
      *  registry
      */
     public void registry() {
-        String address = Constants.LOCAL_ADDRESS;
+        String address = OSUtils.getHost();
         String localNodePath = getWorkerPath();
         zookeeperRegistryCenter.getZookeeperCachedOperator().persistEphemeral(localNodePath, "");
         zookeeperRegistryCenter.getZookeeperCachedOperator().getZkClient().getConnectionStateListenable().addListener(new ConnectionStateListener() {
@@ -142,7 +141,7 @@ private String getWorkerPath() {
      * @return
      */
     private String getLocalAddress(){
-        return Constants.LOCAL_ADDRESS + ":" + workerConfig.getListenPort();
+        return OSUtils.getHost() + ":" + workerConfig.getListenPort();
     }
 
     /**

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/datasource/SpringConnectionFactory.java
Patch:
@@ -123,7 +123,6 @@ public DataSourceTransactionManager transactionManager() {
     @Bean
     public SqlSessionFactory sqlSessionFactory() throws Exception {
         MybatisConfiguration configuration = new MybatisConfiguration();
-        configuration.addMappers("org.apache.dolphinscheduler.dao.mapper");
         configuration.setMapUnderscoreToCamelCase(true);
         configuration.setCacheEnabled(false);
         configuration.setCallSettersOnNulls(true);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/ApiApplicationServer.java
Patch:
@@ -25,7 +25,9 @@
 
 @SpringBootApplication
 @ServletComponentScan
-@ComponentScan("org.apache.dolphinscheduler")
+@ComponentScan({"org.apache.dolphinscheduler.api",
+        "org.apache.dolphinscheduler.dao",
+        "org.apache.dolphinscheduler.service"})
 public class ApiApplicationServer extends SpringBootServletInitializer {
 
   public static void main(String[] args) {

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterExecThread.java
Patch:
@@ -1062,7 +1062,7 @@ private void killTheOtherTasks() {
 
             TaskInstance taskInstance = taskExecThread.getTaskInstance();
             taskInstance = processService.findTaskInstanceById(taskInstance.getId());
-            if(taskInstance.getState().typeIsFinished()){
+            if(taskInstance != null && taskInstance.getState().typeIsFinished()){
                 continue;
             }
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/datax/DataxTask.java
Patch:
@@ -216,8 +216,7 @@ private String buildDataxJsonFile()
      * @return collection of datax job config JSONObject
      * @throws SQLException if error throws SQLException
      */
-    private List<JSONObject> buildDataxJobContentJson()
-        throws SQLException {
+    private List<JSONObject> buildDataxJobContentJson() throws SQLException {
         DataxTaskExecutionContext dataxTaskExecutionContext = taskExecutionContext.getDataxTaskExecutionContext();
 
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterSchedulerService.java
Patch:
@@ -137,7 +137,7 @@ public void run() {
                     }
                 }
             } catch (Exception e){
-                logger.error("master scheduler thread exception",e);
+                logger.error("master scheduler thread error",e);
             } finally{
                 zkMasterClient.releaseMutex(mutex);
             }

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/utils/Host.java
Patch:
@@ -80,6 +80,9 @@ public void setPort(int port) {
      * @return host
      */
     public static Host of(String address){
+        if(address == null) {
+            throw new IllegalArgumentException("Host : address is null.");
+        }
         String[] parts = address.split(":");
         if (parts.length != 2) {
             throw new IllegalArgumentException(String.format("Host : %s illegal.", address));

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/MasterServer.java
Patch:
@@ -144,7 +144,7 @@ public void run() {
 
     /**
      * gracefully close
-     * @param cause
+     * @param cause close cause
      */
     public void close(String cause) {
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/dispatch/ExecutorDispatcher.java
Patch:
@@ -67,7 +67,7 @@ public ExecutorDispatcher(){
      *
      * @param context context
      * @return result
-     * @throws ExecuteException
+     * @throws ExecuteException if error throws ExecuteException
      */
     public Boolean dispatch(final ExecutionContext context) throws ExecuteException {
         /**
@@ -99,7 +99,7 @@ public Boolean dispatch(final ExecutionContext context) throws ExecuteException
 
     /**
      * register init
-     * @throws Exception
+     * @throws Exception if error throws Exception
      */
     @Override
     public void afterPropertiesSet() throws Exception {

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/dispatch/executor/AbstractExecutorManager.java
Patch:
@@ -29,7 +29,7 @@ public abstract class AbstractExecutorManager<T> implements ExecutorManager<T>{
      * before execute , add time monitor ， timeout
      *
      * @param context context
-     * @throws ExecuteException
+     * @throws ExecuteException if error throws ExecuteException
      */
     @Override
     public void beforeExecute(ExecutionContext context) throws ExecuteException {
@@ -38,7 +38,7 @@ public void beforeExecute(ExecutionContext context) throws ExecuteException {
     /**
      * after execute , add dispatch monitor
      * @param context context
-     * @throws ExecuteException
+     * @throws ExecuteException if error throws ExecuteException
      */
     @Override
     public void afterExecute(ExecutionContext context) throws ExecuteException {

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/dispatch/executor/NettyExecutorManager.java
Patch:
@@ -76,7 +76,7 @@ public NettyExecutorManager(){
      * execute logic
      * @param context context
      * @return result
-     * @throws ExecuteException
+     * @throws ExecuteException if error throws ExecuteException
      */
     @Override
     public Boolean execute(ExecutionContext context) throws ExecuteException {
@@ -137,7 +137,7 @@ public void executeDirectly(ExecutionContext context) throws ExecuteException {
      *  execute logic
      * @param host host
      * @param command command
-     * @throws ExecuteException
+     * @throws ExecuteException if error throws ExecuteException
      */
     private void doExecute(final Host host, final Command command) throws ExecuteException {
         /**

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/future/TaskFuture.java
Patch:
@@ -70,7 +70,7 @@ public TaskFuture(long opaque, long timeoutMillis) {
     /**
      * wait for response
      * @return command
-     * @throws InterruptedException
+     * @throws InterruptedException if error throws InterruptedException
      */
     public Command waitResponse() throws InterruptedException {
         this.latch.await(timeoutMillis, TimeUnit.MILLISECONDS);

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/registry/ZookeeperNodeManager.java
Patch:
@@ -82,7 +82,7 @@ public class ZookeeperNodeManager implements InitializingBean {
 
     /**
      * init listener
-     * @throws Exception
+     * @throws Exception if error throws Exception
      */
     @Override
     public void afterPropertiesSet() throws Exception {
@@ -221,8 +221,8 @@ private void syncMasterNodes(Set<String> nodes){
 
     /**
      * sync worker group nodes
-     * @param workerGroup
-     * @param nodes
+     * @param workerGroup worker group
+     * @param nodes worker nodes
      */
     private void syncWorkerGroupNodes(String workerGroup, Set<String> nodes){
         workerGroupLock.lock();

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/AbstractCommandExecutor.java
Patch:
@@ -126,7 +126,7 @@ private void buildProcess(String commandFile) throws IOException {
      *
      * @param execCommand execCommand
      * @return CommandExecuteResult
-     * @throws Exception
+     * @throws Exception if error throws Exception
      */
     public CommandExecuteResult run(String execCommand) throws Exception{
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/sql/SqlTask.java
Patch:
@@ -196,7 +196,6 @@ public AbstractParameters getParameters() {
      * @param preStatementsBinds    pre statements binds
      * @param postStatementsBinds   post statements binds
      * @param createFuncs           create functions
-     * @return Connection
      */
     public void executeFuncAndSql(SqlBinds mainSqlBinds,
                                         List<SqlBinds> preStatementsBinds,

File: dolphinscheduler-alert/src/main/java/org/apache/dolphinscheduler/alert/utils/MailUtils.java
Patch:
@@ -334,7 +334,7 @@ public static void deleteFile(File file){
      * @param e the exception
      */
     private static void handleException(Collection<String> receivers, Map<String, Object> retMap, Exception e) {
-        logger.error("Send email to {} failed {}", receivers, e);
+        logger.error("Send email to {} failed", receivers, e);
         retMap.put(Constants.MESSAGE, "Send email to {" + String.join(",", receivers) + "} failed，" + e.toString());
     }
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/utils/ZooKeeperState.java
Patch:
@@ -121,7 +121,7 @@ private String getStringValueFromLine(String line) {
 	private class SendThread extends Thread {
 		private String cmd;
 
-		public String ret = "";
+		private String ret = "";
 
 		public SendThread(String cmd) {
 			this.cmd = cmd;

File: dolphinscheduler-alert/src/main/java/org/apache/dolphinscheduler/alert/utils/FuncUtils.java
Patch:
@@ -20,7 +20,7 @@
 
 public class FuncUtils {
 
-    static public String mkString(Iterable<String> list, String split) {
+    public static String mkString(Iterable<String> list, String split) {
 
         if (null == list || StringUtils.isEmpty(split)){
             return null;

File: dolphinscheduler-alert/src/test/java/org/apache/dolphinscheduler/alert/utils/FuncUtilsTest.java
Patch:
@@ -46,7 +46,7 @@ public void testMKString() {
         logger.info(result);
 
         //Expected result string
-        assertEquals(result, "user1|user2|user3");
+        assertEquals("user1|user2|user3", result);
 
         //Null list expected return null
         result = FuncUtils.mkString(null, split);

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/runner/TaskScheduleThread.java
Patch:
@@ -296,9 +296,7 @@ private List<String> createProjectResFiles(TaskNode taskNode) throws Exception{
 
         if (baseParam != null) {
             List<String> projectResourceFiles = baseParam.getResourceFilesList();
-            if (projectResourceFiles != null) {
-                projectFiles.addAll(projectResourceFiles);
-            }
+            projectFiles.addAll(projectResourceFiles);
         }
 
         return new ArrayList<>(projectFiles);

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterBaseTaskExecThread.java
Patch:
@@ -152,7 +152,7 @@ protected TaskInstance submit(){
 
 
     /**
-     * dispatcht task
+     * TODO dispatcht task
      * @param taskInstance taskInstance
      * @return whether submit task success
      */

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/WorkerServer.java
Patch:
@@ -97,7 +97,7 @@ public void run(){
         this.nettyRemotingServer.registerProcessor(CommandType.TASK_KILL_REQUEST, new TaskKillProcessor());
         this.nettyRemotingServer.start();
 
-        //
+        // worker registry
         this.workerRegistry.registry();
 
         /**

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/AbstractTask.java
Patch:
@@ -59,7 +59,7 @@ public abstract class AbstractTask {
     /**
      *  SHELL process pid
      */
-    protected Integer processId;
+    protected int processId;
 
     /**
      * other resource manager appId , for example : YARN etc
@@ -139,11 +139,11 @@ public void setAppIds(String appIds) {
         this.appIds = appIds;
     }
 
-    public Integer getProcessId() {
+    public int getProcessId() {
         return processId;
     }
 
-    public void setProcessId(Integer processId) {
+    public void setProcessId(int processId) {
         this.processId = processId;
     }
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/shell/ShellTask.java
Patch:
@@ -95,7 +95,7 @@ public void handle() throws Exception {
       setAppIds(commandExecuteResult.getAppIds());
       setProcessId(commandExecuteResult.getProcessId());
     } catch (Exception e) {
-      logger.error("shell task failure", e);
+      logger.error("shell task error", e);
       setExitStatusCode(Constants.EXIT_CODE_FAILURE);
       throw e;
     }
@@ -125,8 +125,6 @@ private String buildCommand() throws Exception {
     }
 
     String script = shellParameters.getRawScript().replaceAll("\\r\\n", "\n");
-
-
     /**
      *  combining local and global parameters
      */

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessService.java
Patch:
@@ -1513,7 +1513,6 @@ public ProcessInstance findProcessInstanceByTaskId(int taskId){
      * @return udf function list
      */
     public List<UdfFunc> queryUdfFunListByids(int[] ids){
-
         return udfFuncMapper.queryUdfByIdStr(ids, null);
     }
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/config/MasterConfig.java
Patch:
@@ -46,7 +46,7 @@ public class MasterConfig {
     @Value("${master.host.selector:lowerWeight}")
     private String hostSelector;
 
-    @Value("${master.listen.port:45678}")
+    @Value("${master.listen.port:5678}")
     private int listenPort;
 
     public int getListenPort() {

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterTaskExecThread.java
Patch:
@@ -184,6 +184,9 @@ private void cancelTaskInstance() throws Exception{
 
         TaskExecutionContext taskExecutionContext = new TaskExecutionContext();
         taskExecutionContext.setTaskInstanceId(taskInstance.getId());
+        taskExecutionContext.setHost(taskInstance.getHost());
+        taskExecutionContext.setLogPath(taskInstance.getLogPath());
+        taskExecutionContext.setExecutePath(taskInstance.getExecutePath());
         taskExecutionContext.setProcessId(taskInstance.getPid());
 
         ExecutionContext executionContext = new ExecutionContext(taskExecutionContext.toKillCommand(), ExecutorType.WORKER, taskExecutionContext.getWorkerGroup());

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/config/WorkerConfig.java
Patch:
@@ -40,7 +40,7 @@ public class WorkerConfig {
     @Value("${worker.group: default}")
     private String workerGroup;
 
-    @Value("${worker.listen.port: 12345}")
+    @Value("${worker.listen.port: 1234}")
     private int listenPort;
 
     public int getListenPort() {

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/Command.java
Patch:
@@ -16,8 +16,6 @@
  */
 package org.apache.dolphinscheduler.remote.command;
 
-import com.sun.org.apache.regexp.internal.RE;
-
 import java.io.Serializable;
 import java.util.concurrent.atomic.AtomicLong;
 

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskInstance.java
Patch:
@@ -194,6 +194,7 @@ public class TaskInstance implements Serializable {
     /**
      * workerGroup
      */
+    @TableField(exist = false)
     private String workerGroup;
 
     public ProcessInstance getProcessInstance() {

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/entity/TaskPriority.java
Patch:
@@ -132,7 +132,8 @@ public void setTaskPriorityInfo(String taskPriorityInfo) {
      */
     public static TaskPriority of(String taskPriorityInfo){
         String[] parts = taskPriorityInfo.split(UNDERLINE);
-        if (parts.length != 4) {
+
+        if (parts.length != 5) {
             throw new IllegalArgumentException(String.format("TaskPriority : %s illegal.", taskPriorityInfo));
         }
         TaskPriority taskPriority = new TaskPriority(

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterBaseTaskExecThread.java
Patch:
@@ -89,7 +89,7 @@ public MasterBaseTaskExecThread(TaskInstance taskInstance, ProcessInstance proce
         this.cancel = false;
         this.taskInstance = taskInstance;
         this.masterConfig = SpringApplicationContext.getBean(MasterConfig.class);
-        this.taskUpdateQueue = new TaskUpdateQueueImpl();
+        this.taskUpdateQueue = SpringApplicationContext.getBean(TaskUpdateQueueImpl.class);
     }
 
     /**
@@ -180,8 +180,7 @@ public Boolean dispatchTask(TaskInstance taskInstance) {
                     processInstance.getId(),
                     taskInstance.getProcessInstancePriority().getCode(),
                     taskInstance.getId(),
-                    taskInstance.getWorkerGroup());
-
+                    org.apache.dolphinscheduler.common.Constants.DEFAULT_WORKER_GROUP);
             taskUpdateQueue.put(taskPriorityInfo);
             logger.info(String.format("master submit success, task : %s", taskInstance.getName()) );
             return true;

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/Constants.java
Patch:
@@ -1004,4 +1004,6 @@ private Constants() {
      * default worker group
      */
     public static final String DEFAULT_WORKER_GROUP = "default";
+
+    public static final Integer TASK_INFO_LENGTH = 5;
 }

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/queue/TaskQueueFactory.java
Patch:
@@ -40,11 +40,11 @@ private TaskQueueFactory(){
    *
    * @return instance
    */
-  public static ITaskQueue getTaskQueueInstance() {
+  public static TaskUpdateQueue getTaskQueueInstance() {
     String queueImplValue = CommonUtils.getQueueImplValue();
     if (StringUtils.isNotBlank(queueImplValue)) {
         logger.info("task queue impl use zookeeper ");
-        return SpringApplicationContext.getBean(TaskQueueZkImpl.class);
+        return SpringApplicationContext.getBean(TaskUpdateQueueImpl.class);
     }else{
       logger.error("property dolphinscheduler.queue.impl can't be blank, system will exit ");
       System.exit(-1);

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/TaskProps.java
Patch:
@@ -78,7 +78,7 @@ public class TaskProps {
   private Map<String, String> definedParams;
 
   /**
-   * task path
+   * task app id
    */
   private String taskAppId;
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/DataAnalysisController.java
Patch:
@@ -103,7 +103,7 @@ public Result countProcessInstanceState(@ApiIgnore @RequestAttribute(value = Con
                                             @RequestParam(value="endDate", required=false) String endDate,
                                             @RequestParam(value="projectId", required=false, defaultValue = "0") int projectId){
         try{
-            logger.info("count process instance state, user:{}, start date: {}, end date:{}, project id",
+            logger.info("count process instance state, user:{}, start date: {}, end date:{}, project id:{}",
                     loginUser.getUserName(), startDate, endDate, projectId);
             Map<String, Object> result = dataAnalysisService.countProcessInstanceStateByProject(loginUser, projectId, startDate, endDate);
             return returnDataList(result);
@@ -129,7 +129,7 @@ public Result countProcessInstanceState(@ApiIgnore @RequestAttribute(value = Con
     public Result countDefinitionByUser(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,
                                         @RequestParam(value="projectId", required=false, defaultValue = "0") int projectId){
         try{
-            logger.info("count process definition , user:{}, project id",
+            logger.info("count process definition , user:{}, project id:{}",
                     loginUser.getUserName(), projectId);
             Map<String, Object> result = dataAnalysisService.countDefinitionByUser(loginUser, projectId);
             return returnDataList(result);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ExecutorController.java
Patch:
@@ -173,7 +173,7 @@ public Result execute(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USE
     @ResponseStatus(HttpStatus.OK)
     public Result startCheckProcessDefinition(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,
                              @RequestParam(value = "processDefinitionId") int processDefinitionId) {
-        logger.info("login user {}, check process definition", loginUser.getUserName(), processDefinitionId);
+        logger.info("login user {}, check process definition {}", loginUser.getUserName(), processDefinitionId);
         try {
             Map<String, Object> result = execService.startCheckByProcessDefinedId(processDefinitionId);
             return returnDataList(result);

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/NettyRemotingServer.java
Patch:
@@ -145,7 +145,7 @@ protected void initChannel(NioSocketChannel ch) throws Exception {
         try {
             future = serverBootstrap.bind(serverConfig.getListenPort()).sync();
         } catch (Exception e) {
-            logger.error("NettyRemotingServer bind fail {}, exit", e);
+            logger.error("NettyRemotingServer bind fail {}, exit",e.getMessage(), e);
             throw new RuntimeException(String.format("NettyRemotingServer bind %s fail", serverConfig.getListenPort()));
         }
         if (future.isSuccess()) {

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/handler/NettyClientHandler.java
Patch:
@@ -107,7 +107,7 @@ public void run() {
      */
     @Override
     public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {
-        logger.error("exceptionCaught : {}", cause);
+        logger.error("exceptionCaught : {}",cause.getMessage(), cause);
         nettyRemotingClient.closeChannel(ChannelUtils.toAddress(ctx.channel()));
         ctx.channel().close();
     }

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/handler/NettyServerHandler.java
Patch:
@@ -140,7 +140,7 @@ public void run() {
      */
     @Override
     public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {
-        logger.error("exceptionCaught : {}", cause);
+        logger.error("exceptionCaught : {}",cause.getMessage(), cause);
         ctx.channel().close();
     }
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterExecThread.java
Patch:
@@ -565,7 +565,7 @@ private List<String> parseConditionTask(String nodeName){
 
         TaskInstance taskInstance = completeTaskList.get(nodeName);
         if(taskInstance == null){
-            logger.error("task instance cannot find, please check it!", nodeName);
+            logger.error("task instance {} cannot find, please check it!", nodeName);
             return conditionTaskList;
         }
 

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/process/ProcessService.java
Patch:
@@ -116,12 +116,12 @@ public ProcessInstance handleCommand(Logger logger, String host, int validThread
         ProcessInstance processInstance = constructProcessInstance(command, host);
         //cannot construct process instance, return null;
         if(processInstance == null){
-            logger.error("scan command, command parameter is error: %s", command.toString());
+            logger.error("scan command, command parameter is error: {}", command);
             moveToErrorCommand(command, "process instance is null");
             return null;
         }
         if(!checkThreadNum(command, validThreadNum)){
-            logger.info("there is not enough thread for this command: {}",command.toString() );
+            logger.info("there is not enough thread for this command: {}", command);
             return setWaitingThreadProcess(command, processInstance);
         }
         processInstance.setCommandType(command.getCommandType());
@@ -991,7 +991,7 @@ public Boolean submitTaskToQueue(TaskInstance taskInstance) {
             return insertQueueResult;
         }catch (Exception e){
             logger.error("submit task to queue Exception: ", e);
-            logger.error("task queue error : %s", JSONUtils.toJson(taskInstance));
+            logger.error("task queue error : {}", JSONUtils.toJson(taskInstance));
             return false;
         }
     }

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/utils/ZookeeperMonitorUtilsTest.java
Patch:
@@ -28,7 +28,7 @@ public class ZookeeperMonitorUtilsTest {
 
 
     @Test
-    public void testGetMasterLsit(){
+    public void testGetMasterList(){
 
         ZookeeperMonitor zookeeperMonitor = new ZookeeperMonitor();
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterTaskExecThread.java
Patch:
@@ -128,7 +128,9 @@ public Boolean waitTaskQuit(){
                         // process define
                         ProcessDefinition processDefine = processService.findProcessDefineById(processInstance.getProcessDefinitionId());
                         // send warn mail
-                        alertDao.sendTaskTimeoutAlert(processInstance.getWarningGroupId(),processDefine.getReceivers(),processDefine.getReceiversCc(),taskInstance.getId(),taskInstance.getName());
+                        alertDao.sendTaskTimeoutAlert(processInstance.getWarningGroupId(),processDefine.getReceivers(),
+                                processDefine.getReceiversCc(), processInstance.getId(), processInstance.getName(),
+                                taskInstance.getId(),taskInstance.getName());
                         checkTimeout = false;
                     }
                 }

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/utils/AlertManager.java
Patch:
@@ -133,6 +133,8 @@ public String getContentProcessInstance(ProcessInstance processInstance,
                     continue;
                 }
                 LinkedHashMap<String, String> failedTaskMap = new LinkedHashMap();
+                failedTaskMap.put("process instance id", String.valueOf(processInstance.getId()));
+                failedTaskMap.put("process instance name", processInstance.getName());
                 failedTaskMap.put("task id", String.valueOf(task.getId()));
                 failedTaskMap.put("task name", task.getName());
                 failedTaskMap.put("task type", task.getTaskType());
@@ -193,7 +195,7 @@ public void sendAlertWorkerToleranceFault(ProcessInstance processInstance, List<
             logger.info("add alert to db , alert : {}", alert.toString());
 
         }catch (Exception e){
-            logger.error("send alert failed! " + e);
+            logger.error("send alert failed:{} ", e.getMessage());
         }
 
     }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/LoggerService.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.utils.StringUtils;
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
+import org.apache.dolphinscheduler.remote.utils.Host;
 import org.apache.dolphinscheduler.service.log.LogClientService;
 import org.apache.dolphinscheduler.service.process.ProcessService;
 import org.slf4j.Logger;
@@ -68,7 +69,7 @@ public Result queryLog(int taskInstId, int skipLineNum, int limit) {
       return new Result(Status.TASK_INSTANCE_NOT_FOUND.getCode(), Status.TASK_INSTANCE_NOT_FOUND.getMsg());
     }
 
-    String host = taskInstance.getHost();
+    String host = Host.of(taskInstance.getHost()).getIp();
     if(StringUtils.isEmpty(host)){
       return new Result(Status.TASK_INSTANCE_NOT_FOUND.getCode(), Status.TASK_INSTANCE_NOT_FOUND.getMsg());
     }
@@ -94,7 +95,7 @@ public byte[] getLogBytes(int taskInstId) {
     if (taskInstance == null){
       throw new RuntimeException("task instance is null");
     }
-    String host = taskInstance.getHost();
+    String host = Host.of(taskInstance.getHost()).getIp();
     return logClient.getLogBytes(host, Constants.RPC_PORT, taskInstance.getLogPath());
   }
 }

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/builder/TaskExecutionContextBuilder.java
Patch:
@@ -48,7 +48,6 @@ public TaskExecutionContextBuilder buildTaskInstanceRelatedInfo(TaskInstance tas
         taskExecutionContext.setLogPath(taskInstance.getLogPath());
         taskExecutionContext.setExecutePath(taskInstance.getExecutePath());
         taskExecutionContext.setTaskJson(taskInstance.getTaskJson());
-        taskExecutionContext.setHost(taskInstance.getHost());
         taskExecutionContext.setWorkerGroup(Constants.DEFAULT_WORKER_GROUP);
         return this;
     }

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/dispatch/ExecutorDispatcher.java
Patch:
@@ -90,6 +90,7 @@ public Boolean dispatch(final ExecutionContext context) throws ExecuteException
             throw new ExecuteException(String.format("fail to execute : %s due to no worker ", context.getContext()));
         }
         context.setHost(host);
+        context.getContext().setHost(host.getAddress());
         executorManager.beforeExecute(context);
         try {
             /**

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterTaskExecThread.java
Patch:
@@ -186,9 +186,7 @@ private void cancelTaskInstance() throws Exception{
         TaskExecutionContext taskExecutionContext = super.getTaskExecutionContext(taskInstance);
         ExecutionContext executionContext = new ExecutionContext(taskExecutionContext, ExecutorType.WORKER);
 
-        Host host = new Host();
-        host.setIp(taskInstance.getHost());
-        host.setPort(12346);
+        Host host = Host.of(taskInstance.getHost());
         executionContext.setHost(host);
 
         nettyExecutorManager.executeDirectly(executionContext);

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/MasterServer.java
Patch:
@@ -128,7 +128,7 @@ public void run(){
         this.nettyRemotingServer = new NettyRemotingServer(serverConfig);
         this.nettyRemotingServer.registerProcessor(CommandType.TASK_EXECUTE_RESPONSE, new TaskResponseProcessor());
         this.nettyRemotingServer.registerProcessor(CommandType.TASK_EXECUTE_ACK, new TaskAckProcessor());
-        this.nettyRemotingServer.registerProcessor(CommandType.TASK_EXECUTE_RESPONSE, new TaskKillResponseProcessor());
+        this.nettyRemotingServer.registerProcessor(CommandType.TASK_KILL_RESPONSE, new TaskKillResponseProcessor());
         this.nettyRemotingServer.start();
 
         //

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/processor/TaskKillResponseProcessor.java
Patch:
@@ -46,8 +46,7 @@ public void process(Channel channel, Command command) {
         Preconditions.checkArgument(CommandType.TASK_KILL_RESPONSE == command.getType(), String.format("invalid command type : %s", command.getType()));
 
         TaskKillResponseCommand responseCommand = FastJsonSerializer.deserialize(command.getBody(), TaskKillResponseCommand.class);
-        logger.info("received command : {}", responseCommand);
-        logger.info("已经接受到了worker杀任务的回应");
+        logger.info("received task kill response command : {}", responseCommand);
     }
 
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterTaskExecThread.java
Patch:
@@ -26,6 +26,7 @@
 import org.apache.dolphinscheduler.dao.entity.ProcessInstance;
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
 import com.alibaba.fastjson.JSONObject;
+import org.apache.dolphinscheduler.remote.command.TaskKillRequestCommand;
 import org.apache.dolphinscheduler.remote.utils.Host;
 import org.apache.dolphinscheduler.server.entity.TaskExecutionContext;
 import org.apache.dolphinscheduler.server.master.cache.TaskInstanceCacheManager;
@@ -183,7 +184,6 @@ private void cancelTaskInstance() throws Exception{
         alreadyKilled = true;
 
         TaskExecutionContext taskExecutionContext = super.getTaskExecutionContext(taskInstance);
-
         ExecutionContext executionContext = new ExecutionContext(taskExecutionContext, ExecutorType.WORKER);
 
         Host host = new Host();

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/KillTaskRequestCommand.java
Patch:
@@ -1 +1 @@
-/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *    http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.dolphinscheduler.remote.command;import org.apache.dolphinscheduler.remote.utils.FastJsonSerializer;import java.io.Serializable;/** *  kill task request command */public class KillTaskRequestCommand implements Serializable {    /**     *  taskInstanceId     */    private int taskInstanceId;    /**     * processId     */    private int processId;    /**     * host     */    private String host;    /**     * tenantCode     */    private String tenantCode;    /**     * logPath     */    private String logPath;    /**     * executePath     */    private String executePath;    public String getLogPath() {        return logPath;    }    public void setLogPath(String logPath) {        this.logPath = logPath;    }    public int getTaskInstanceId() {        return taskInstanceId;    }    public void setTaskInstanceId(int taskInstanceId) {        this.taskInstanceId = taskInstanceId;    }    public int getProcessId() {        return processId;    }    public void setProcessId(int processId) {        this.processId = processId;    }    public String getHost() {        return host;    }    public void setHost(String host) {        this.host = host;    }    public String getTenantCode() {        return tenantCode;    }    public void setTenantCode(String tenantCode) {        this.tenantCode = tenantCode;    }    public String getExecutePath() {        return executePath;    }    public void setExecutePath(String executePath) {        this.executePath = executePath;    }    /**     *  package request command     *     * @return command     */    public Command convert2Command(){        Command command = new Command();        command.setType(CommandType.KILL_TASK_REQUEST);        byte[] body = FastJsonSerializer.serialize(this);        command.setBody(body);        return command;    }}
\ No newline at end of file
+/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *    http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.dolphinscheduler.remote.command;import org.apache.dolphinscheduler.remote.utils.FastJsonSerializer;import java.io.Serializable;/** *  kill task request command */public class KillTaskRequestCommand implements Serializable {    /**     *  task execution context     */    private String taskExecutionContext;    public String getTaskExecutionContext() {        return taskExecutionContext;    }    public void setTaskExecutionContext(String taskExecutionContext) {        this.taskExecutionContext = taskExecutionContext;    }    public KillTaskRequestCommand() {    }    public KillTaskRequestCommand(String taskExecutionContext) {        this.taskExecutionContext = taskExecutionContext;    }    /**     *  package request command     *     * @return command     */    public Command convert2Command(){        Command command = new Command();        command.setType(CommandType.KILL_TASK_REQUEST);        byte[] body = FastJsonSerializer.serialize(this);        command.setBody(body);        return command;    }    @Override    public String toString() {        return "KillTaskRequestCommand{" +                "taskExecutionContext='" + taskExecutionContext + '\'' +                '}';    }}
\ No newline at end of file

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/MasterServer.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.dolphinscheduler.remote.config.NettyServerConfig;
 import org.apache.dolphinscheduler.server.master.config.MasterConfig;
 import org.apache.dolphinscheduler.server.master.processor.TaskAckProcessor;
+import org.apache.dolphinscheduler.server.master.processor.TaskKillResponseProcessor;
 import org.apache.dolphinscheduler.server.master.processor.TaskResponseProcessor;
 import org.apache.dolphinscheduler.server.master.registry.MasterRegistry;
 import org.apache.dolphinscheduler.server.master.runner.MasterSchedulerThread;
@@ -127,6 +128,7 @@ public void run(){
         this.nettyRemotingServer = new NettyRemotingServer(serverConfig);
         this.nettyRemotingServer.registerProcessor(CommandType.EXECUTE_TASK_RESPONSE, new TaskResponseProcessor());
         this.nettyRemotingServer.registerProcessor(CommandType.EXECUTE_TASK_ACK, new TaskAckProcessor());
+        this.nettyRemotingServer.registerProcessor(CommandType.KILL_TASK_RESPONSE, new TaskKillResponseProcessor());
         this.nettyRemotingServer.start();
 
         //

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/cache/TaskInstanceCacheManager.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
 import org.apache.dolphinscheduler.remote.command.ExecuteTaskAckCommand;
 import org.apache.dolphinscheduler.remote.command.ExecuteTaskResponseCommand;
-import org.apache.dolphinscheduler.remote.entity.TaskExecutionContext;
+import org.apache.dolphinscheduler.server.entity.TaskExecutionContext;
 
 /**
  *  task instance state manager

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/cache/impl/TaskInstanceCacheManagerImpl.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
 import org.apache.dolphinscheduler.remote.command.ExecuteTaskAckCommand;
 import org.apache.dolphinscheduler.remote.command.ExecuteTaskResponseCommand;
-import org.apache.dolphinscheduler.remote.entity.TaskExecutionContext;
+import org.apache.dolphinscheduler.server.entity.TaskExecutionContext;
 import org.apache.dolphinscheduler.server.master.cache.TaskInstanceCacheManager;
 import org.apache.dolphinscheduler.service.process.ProcessService;
 import org.springframework.beans.factory.annotation.Autowired;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/dispatch/ExecutorDispatcher.java
Patch:
@@ -67,8 +67,10 @@ public ExecutorDispatcher(){
     }
 
     /**
-     *  task dispatch
+     * task dispatch
+     *
      * @param context context
+     * @return result
      * @throws ExecuteException
      */
     public Boolean dispatch(final ExecutionContext context) throws ExecuteException {

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/dispatch/context/ExecutionContext.java
Patch:
@@ -17,8 +17,8 @@
 package org.apache.dolphinscheduler.server.master.dispatch.context;
 
 
-import org.apache.dolphinscheduler.remote.entity.TaskExecutionContext;
 import org.apache.dolphinscheduler.remote.utils.Host;
+import org.apache.dolphinscheduler.server.entity.TaskExecutionContext;
 import org.apache.dolphinscheduler.server.master.dispatch.enums.ExecutorType;
 
 /**

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/dispatch/executor/AbstractExecutorManager.java
Patch:
@@ -27,6 +27,7 @@ public abstract class AbstractExecutorManager<T> implements ExecutorManager<T>{
 
     /**
      * before execute , add time monitor ， timeout
+     *
      * @param context context
      * @throws ExecuteException
      */

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/dispatch/executor/ExecutorManager.java
Patch:
@@ -27,6 +27,7 @@ public interface ExecutorManager<T> {
 
     /**
      * before execute
+     *
      * @param executeContext executeContext
      * @throws ExecuteException
      */
@@ -35,12 +36,13 @@ public interface ExecutorManager<T> {
     /**
      * execute task
      * @param context context
+     * @return T
      * @throws ExecuteException
      */
     T execute(ExecutionContext context) throws ExecuteException;
 
     /**
-     * after execute
+     *  after execute
      * @param context context
      * @throws ExecuteException
      */

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/future/TaskFuture.java
Patch:
@@ -68,7 +68,7 @@ public TaskFuture(long opaque, long timeoutMillis) {
     }
 
     /**
-     *  wait for response
+     * wait for response
      * @return command
      * @throws InterruptedException
      */

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/processor/TaskResponseProcessor.java
Patch:
@@ -72,6 +72,8 @@ public void process(Channel channel, Command command) {
 
         processService.changeTaskState(ExecutionStatus.of(responseCommand.getStatus()),
                 responseCommand.getEndTime(),
+                responseCommand.getProcessId(),
+                responseCommand.getAppIds(),
                 responseCommand.getTaskInstanceId());
     }
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/registry/MasterRegistry.java
Patch:
@@ -67,9 +67,10 @@ public class MasterRegistry {
     private final String startTime;
 
     /**
-     *  construct
+     * construct
      * @param zookeeperRegistryCenter zookeeperRegistryCenter
      * @param port port
+     * @param heartBeatInterval heartBeatInterval
      */
     public MasterRegistry(ZookeeperRegistryCenter zookeeperRegistryCenter, int port, long heartBeatInterval){
         this.zookeeperRegistryCenter = zookeeperRegistryCenter;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterBaseTaskExecThread.java
Patch:
@@ -24,8 +24,8 @@
 import org.apache.dolphinscheduler.dao.entity.ProcessInstance;
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
 import org.apache.dolphinscheduler.dao.entity.Tenant;
-import org.apache.dolphinscheduler.remote.entity.TaskExecutionContext;
 import org.apache.dolphinscheduler.server.builder.TaskExecutionContextBuilder;
+import org.apache.dolphinscheduler.server.entity.TaskExecutionContext;
 import org.apache.dolphinscheduler.server.master.config.MasterConfig;
 import org.apache.dolphinscheduler.server.master.dispatch.ExecutorDispatcher;
 import org.apache.dolphinscheduler.server.master.dispatch.context.ExecutionContext;
@@ -147,7 +147,7 @@ private Boolean dispatch(TaskInstance taskInstance){
      * @param taskInstance taskInstance
      * @return TaskExecutionContext
      */
-    private TaskExecutionContext getTaskExecutionContext(TaskInstance taskInstance){
+    protected TaskExecutionContext getTaskExecutionContext(TaskInstance taskInstance){
         taskInstance = processService.getTaskInstanceDetailByTaskId(taskInstance.getId());
 
         Integer userId = taskInstance.getProcessDefine() == null ? 0 : taskInstance.getProcessDefine().getUserId();

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterExecThread.java
Patch:
@@ -142,8 +142,9 @@ public class MasterExecThread implements Runnable {
 
     /**
      * constructor of MasterExecThread
-     * @param processInstance   process instance
-     * @param processService        process dao
+     * @param processInstance processInstance
+     * @param processService processService
+     * @param nettyRemotingClient nettyRemotingClient
      */
     public MasterExecThread(ProcessInstance processInstance, ProcessService processService, NettyRemotingClient nettyRemotingClient){
         this.processService = processService;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/registry/ZookeeperNodeManager.java
Patch:
@@ -74,7 +74,7 @@ public class ZookeeperNodeManager implements InitializingBean {
     private ZookeeperRegistryCenter registryCenter;
 
     /**
-     *  init listener
+     * init listener
      * @throws Exception
      */
     @Override
@@ -234,8 +234,8 @@ public Map<String, Set<String>> getWorkerGroupNodes(){
 
     /**
      * get worker group nodes
-     * @param workerGroup
-     * @return
+     * @param workerGroup workerGroup
+     * @return worker nodes
      */
     public Set<String> getWorkerGroupNodes(String workerGroup){
         workerGroupLock.lock();

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/registry/ZookeeperRegistryCenter.java
Patch:
@@ -129,7 +129,7 @@ public Set<String> getWorkerNodesDirectly() {
 
     /**
      * get worker group directly
-     * @return
+     * @return worker group nodes
      */
     public Set<String> getWorkerGroupDirectly() {
         List<String> workers = getChildrenKeys(getWorkerPath());
@@ -166,8 +166,8 @@ public boolean isMasterPath(String path) {
 
     /**
      * get worker group path
-     * @param workerGroup
-     * @return
+     * @param workerGroup workerGroup
+     * @return worker group path
      */
     public String getWorkerGroupPath(String workerGroup) {
         return WORKER_PATH + "/" + workerGroup;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/utils/ParamUtils.java
Patch:
@@ -111,7 +111,8 @@ public static Map<String,String> convert(Map<String,Property> paramsMap){
 
     /**
      * get parameters map
-     * @return user defined params map
+     * @param definedParams definedParams
+     * @return parameters map
      */
     public static Map<String,Property> getUserDefParamsMap(Map<String,String> definedParams) {
         if (definedParams != null) {

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/utils/ProcessUtils.java
Patch:
@@ -21,9 +21,8 @@
 import org.apache.dolphinscheduler.common.utils.LoggerUtils;
 import org.apache.dolphinscheduler.common.utils.OSUtils;
 import org.apache.dolphinscheduler.common.utils.StringUtils;
-import org.apache.dolphinscheduler.dao.entity.TaskInstance;
 import org.apache.commons.io.FileUtils;
-import org.apache.dolphinscheduler.remote.entity.TaskExecutionContext;
+import org.apache.dolphinscheduler.server.entity.TaskExecutionContext;
 import org.apache.dolphinscheduler.service.log.LogClientService;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/cache/TaskExecutionContextCacheManager.java
Patch:
@@ -17,7 +17,8 @@
 
 package org.apache.dolphinscheduler.server.worker.cache;
 
-import org.apache.dolphinscheduler.remote.entity.TaskExecutionContext;
+
+import org.apache.dolphinscheduler.server.entity.TaskExecutionContext;
 
 /**
  *  TaskExecutionContextCacheManager

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/cache/impl/TaskExecutionContextCacheManagerImpl.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.dolphinscheduler.server.worker.cache.impl;
 
-import org.apache.dolphinscheduler.remote.entity.TaskExecutionContext;
+import org.apache.dolphinscheduler.server.entity.TaskExecutionContext;
 import org.apache.dolphinscheduler.server.worker.cache.TaskExecutionContextCacheManager;
 import org.springframework.stereotype.Service;
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/processor/TaskExecuteProcessor.java
Patch:
@@ -33,13 +33,12 @@
 import org.apache.dolphinscheduler.remote.command.CommandType;
 import org.apache.dolphinscheduler.remote.command.ExecuteTaskAckCommand;
 import org.apache.dolphinscheduler.remote.command.ExecuteTaskRequestCommand;
-import org.apache.dolphinscheduler.remote.entity.TaskExecutionContext;
 import org.apache.dolphinscheduler.remote.processor.NettyRequestProcessor;
 import org.apache.dolphinscheduler.remote.utils.FastJsonSerializer;
+import org.apache.dolphinscheduler.server.entity.TaskExecutionContext;
 import org.apache.dolphinscheduler.server.worker.config.WorkerConfig;
 import org.apache.dolphinscheduler.server.worker.runner.TaskExecuteThread;
 import org.apache.dolphinscheduler.service.bean.SpringApplicationContext;
-import org.apache.dolphinscheduler.service.process.ProcessService;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/registry/WorkerRegistry.java
Patch:
@@ -76,9 +76,11 @@ public class WorkerRegistry {
     private String workerGroup;
 
     /**
-     *  construct
+     * construct
+     *
      * @param zookeeperRegistryCenter zookeeperRegistryCenter
      * @param port port
+     * @param heartBeatInterval heartBeatInterval
      */
     public WorkerRegistry(ZookeeperRegistryCenter zookeeperRegistryCenter, int port, long heartBeatInterval){
         this(zookeeperRegistryCenter, port, heartBeatInterval, DEFAULT_WORKER_GROUP);

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/runner/TaskExecuteThread.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.dolphinscheduler.common.task.TaskTimeoutParameter;
 import org.apache.dolphinscheduler.common.utils.*;
 import org.apache.dolphinscheduler.remote.command.ExecuteTaskResponseCommand;
-import org.apache.dolphinscheduler.remote.entity.TaskExecutionContext;
+import org.apache.dolphinscheduler.server.entity.TaskExecutionContext;
 import org.apache.dolphinscheduler.server.worker.processor.TaskCallbackService;
 import org.apache.dolphinscheduler.server.worker.task.AbstractTask;
 import org.apache.dolphinscheduler.server.worker.task.TaskManager;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/AbstractTask.java
Patch:
@@ -30,7 +30,7 @@
 import org.apache.dolphinscheduler.common.task.sql.SqlParameters;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
 import org.apache.dolphinscheduler.dao.TaskRecordDao;
-import org.apache.dolphinscheduler.remote.entity.TaskExecutionContext;
+import org.apache.dolphinscheduler.server.entity.TaskExecutionContext;
 import org.apache.dolphinscheduler.server.utils.ParamUtils;
 import org.apache.commons.lang.StringUtils;
 import org.slf4j.Logger;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/AbstractYarnTask.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.dolphinscheduler.server.worker.task;
 
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
-import org.apache.dolphinscheduler.remote.entity.TaskExecutionContext;
+import org.apache.dolphinscheduler.server.entity.TaskExecutionContext;
 import org.apache.dolphinscheduler.server.utils.ProcessUtils;
 import org.apache.dolphinscheduler.service.bean.SpringApplicationContext;
 import org.apache.dolphinscheduler.service.process.ProcessService;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/PythonCommandExecutor.java
Patch:
@@ -19,7 +19,7 @@
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.utils.FileUtils;
 import org.apache.dolphinscheduler.common.utils.StringUtils;
-import org.apache.dolphinscheduler.remote.entity.TaskExecutionContext;
+import org.apache.dolphinscheduler.server.entity.TaskExecutionContext;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/ShellCommandExecutor.java
Patch:
@@ -17,15 +17,14 @@
 package org.apache.dolphinscheduler.server.worker.task;
 
 import org.apache.commons.io.FileUtils;
-import org.apache.dolphinscheduler.remote.entity.TaskExecutionContext;
+import org.apache.dolphinscheduler.server.entity.TaskExecutionContext;
 import org.slf4j.Logger;
 
 import java.io.File;
 import java.io.IOException;
 import java.nio.charset.Charset;
 import java.nio.file.Files;
 import java.nio.file.Paths;
-import java.util.Date;
 import java.util.List;
 import java.util.function.Consumer;
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/TaskManager.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.apache.dolphinscheduler.common.enums.TaskType;
 import org.apache.dolphinscheduler.common.utils.EnumUtils;
-import org.apache.dolphinscheduler.remote.entity.TaskExecutionContext;
+import org.apache.dolphinscheduler.server.entity.TaskExecutionContext;
 import org.apache.dolphinscheduler.server.worker.task.datax.DataxTask;
 import org.apache.dolphinscheduler.server.worker.task.flink.FlinkTask;
 import org.apache.dolphinscheduler.server.worker.task.http.HttpTask;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/flink/FlinkTask.java
Patch:
@@ -23,12 +23,10 @@
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
 import org.apache.dolphinscheduler.common.utils.ParameterUtils;
 import org.apache.dolphinscheduler.common.utils.StringUtils;
-import org.apache.dolphinscheduler.dao.entity.ProcessInstance;
-import org.apache.dolphinscheduler.remote.entity.TaskExecutionContext;
+import org.apache.dolphinscheduler.server.entity.TaskExecutionContext;
 import org.apache.dolphinscheduler.server.utils.FlinkArgsUtils;
 import org.apache.dolphinscheduler.server.utils.ParamUtils;
 import org.apache.dolphinscheduler.server.worker.task.AbstractYarnTask;
-import org.apache.dolphinscheduler.server.worker.task.TaskProps;
 import org.slf4j.Logger;
 
 import java.util.ArrayList;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/mr/MapReduceTask.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
 import org.apache.dolphinscheduler.common.utils.ParameterUtils;
 import org.apache.dolphinscheduler.common.utils.StringUtils;
-import org.apache.dolphinscheduler.remote.entity.TaskExecutionContext;
+import org.apache.dolphinscheduler.server.entity.TaskExecutionContext;
 import org.apache.dolphinscheduler.server.utils.ParamUtils;
 import org.apache.dolphinscheduler.server.worker.task.AbstractYarnTask;
 import org.apache.dolphinscheduler.server.worker.task.TaskProps;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/processdure/ProcedureTask.java
Patch:
@@ -31,10 +31,9 @@
 import org.apache.dolphinscheduler.dao.datasource.BaseDataSource;
 import org.apache.dolphinscheduler.dao.datasource.DataSourceFactory;
 import org.apache.dolphinscheduler.dao.entity.DataSource;
-import org.apache.dolphinscheduler.remote.entity.TaskExecutionContext;
+import org.apache.dolphinscheduler.server.entity.TaskExecutionContext;
 import org.apache.dolphinscheduler.server.utils.ParamUtils;
 import org.apache.dolphinscheduler.server.worker.task.AbstractTask;
-import org.apache.dolphinscheduler.server.worker.task.TaskProps;
 import org.apache.dolphinscheduler.service.bean.SpringApplicationContext;
 import org.apache.dolphinscheduler.service.process.ProcessService;
 import org.slf4j.Logger;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/spark/SparkTask.java
Patch:
@@ -24,11 +24,10 @@
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
 import org.apache.dolphinscheduler.common.utils.ParameterUtils;
 import org.apache.dolphinscheduler.common.utils.StringUtils;
-import org.apache.dolphinscheduler.remote.entity.TaskExecutionContext;
+import org.apache.dolphinscheduler.server.entity.TaskExecutionContext;
 import org.apache.dolphinscheduler.server.utils.ParamUtils;
 import org.apache.dolphinscheduler.server.utils.SparkArgsUtils;
 import org.apache.dolphinscheduler.server.worker.task.AbstractYarnTask;
-import org.apache.dolphinscheduler.server.worker.task.TaskProps;
 import org.slf4j.Logger;
 
 import java.util.ArrayList;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/zk/ZKWorkerClient.java
Patch:
@@ -72,6 +72,8 @@ protected void dataChanged(CuratorFramework client, TreeCacheEvent event, String
 
 	/**
 	 * monitor worker
+	 * @param event event
+	 * @param path path
 	 */
 	public void handleWorkerEvent(TreeCacheEvent event, String path){
 		switch (event.getType()) {

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/DataSourceController.java
Patch:
@@ -391,8 +391,8 @@ public Result verifyDataSourceName(@ApiIgnore @RequestAttribute(value = Constant
         try {
             return dataSourceService.verifyDataSourceName(loginUser, name);
         } catch (Exception e) {
-            logger.error(VERFIY_DATASOURCE_NAME_FAILURE.getMsg(),e);
-            return error(VERFIY_DATASOURCE_NAME_FAILURE.getCode(), VERFIY_DATASOURCE_NAME_FAILURE.getMsg());
+            logger.error(VERIFY_DATASOURCE_NAME_FAILURE.getMsg(), e);
+            return error(VERIFY_DATASOURCE_NAME_FAILURE.getCode(), VERIFY_DATASOURCE_NAME_FAILURE.getMsg());
         }
     }
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/dispatch/executor/NettyExecutorManager.java
Patch:
@@ -136,7 +136,7 @@ private Command buildCommand(ExecutionContext context) {
         ExecutorType executorType = context.getExecutorType();
         switch (executorType){
             case WORKER:
-                TaskExecutionContext taskExecutionContext = (TaskExecutionContext)context.getContext();
+                TaskExecutionContext taskExecutionContext = context.getContext();
                 requestCommand.setTaskExecutionContext(FastJsonSerializer.serializeToString(taskExecutionContext));
                 break;
             case CLIENT:
@@ -191,7 +191,7 @@ private Set<String> getAllNodes(ExecutionContext context){
         ExecutorType executorType = context.getExecutorType();
         switch (executorType){
             case WORKER:
-                nodes = zookeeperNodeManager.getWorkerNodes();
+                nodes = zookeeperNodeManager.getWorkerGroupNodes(context.getWorkerGroup());
                 break;
             case CLIENT:
                 break;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/dispatch/host/RoundRobinHostManager.java
Patch:
@@ -75,7 +75,7 @@ public Host select(ExecutionContext context){
         ExecutorType executorType = context.getExecutorType();
         switch (executorType){
             case WORKER:
-                nodes = zookeeperNodeManager.getWorkerNodes();
+                nodes = zookeeperNodeManager.getWorkerGroupNodes(context.getWorkerGroup());
                 break;
             case CLIENT:
                 break;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/cache/TaskExecutionContextCacheManager.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.dolphinscheduler.server.worker.cache;
 
-import org.apache.dolphinscheduler.dao.entity.TaskInstance;
 import org.apache.dolphinscheduler.remote.entity.TaskExecutionContext;
 
 /**

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/cache/impl/TaskExecutionContextCacheManagerImpl.java
Patch:
@@ -19,13 +19,15 @@
 
 import org.apache.dolphinscheduler.remote.entity.TaskExecutionContext;
 import org.apache.dolphinscheduler.server.worker.cache.TaskExecutionContextCacheManager;
+import org.springframework.stereotype.Service;
 
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 
 /**
  *  TaskExecutionContextCache
  */
+@Service
 public class TaskExecutionContextCacheManagerImpl implements TaskExecutionContextCacheManager {
 
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/config/WorkerConfig.java
Patch:
@@ -37,7 +37,7 @@ public class WorkerConfig {
     @Value("${worker.reserved.memory}")
     private double workerReservedMemory;
 
-    @Value("${worker.group: DEFAULT}")
+    @Value("${worker.group: default}")
     private String workerGroup;
 
     public String getWorkerGroup() {

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/process/Property.java
Patch:
@@ -20,9 +20,10 @@
 import org.apache.dolphinscheduler.common.enums.DataType;
 import org.apache.dolphinscheduler.common.enums.Direct;
 
+import java.io.Serializable;
 import java.util.Objects;
 
-public class Property {
+public class Property implements Serializable {
   /**
    * key
    */

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/ExecuteTaskAckCommand.java
Patch:
@@ -1 +1 @@
-/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *    http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.dolphinscheduler.remote.command;import org.apache.dolphinscheduler.remote.utils.FastJsonSerializer;import java.io.Serializable;import java.util.Date;/** *  execute task request command */public class ExecuteTaskAckCommand implements Serializable {    private int taskInstanceId;    private Date startTime;    private String host;    private int status;    private String logPath;    private String executePath;    public Date getStartTime() {        return startTime;    }    public void setStartTime(Date startTime) {        this.startTime = startTime;    }    public String getHost() {        return host;    }    public void setHost(String host) {        this.host = host;    }    public int getStatus() {        return status;    }    public void setStatus(int status) {        this.status = status;    }    public int getTaskInstanceId() {        return taskInstanceId;    }    public void setTaskInstanceId(int taskInstanceId) {        this.taskInstanceId = taskInstanceId;    }    public String getLogPath() {        return logPath;    }    public void setLogPath(String logPath) {        this.logPath = logPath;    }    public String getExecutePath() {        return executePath;    }    public void setExecutePath(String executePath) {        this.executePath = executePath;    }    /**     *  package request command     *     * @return command     */    public Command convert2Command(){        Command command = new Command();        command.setType(CommandType.EXECUTE_TASK_ACK);        byte[] body = FastJsonSerializer.serialize(this);        command.setBody(body);        return command;    }    @Override    public String toString() {        return "ExecuteTaskAckCommand{" +                "taskInstanceId=" + taskInstanceId +                ", startTime=" + startTime +                ", host='" + host + '\'' +                ", status=" + status +                ", logPath='" + logPath + '\'' +                ", executePath='" + executePath + '\'' +                '}';    }}
\ No newline at end of file
+/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *    http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.dolphinscheduler.remote.command;import org.apache.dolphinscheduler.remote.utils.FastJsonSerializer;import java.io.Serializable;import java.util.Date;/** *  execute task request command */public class ExecuteTaskAckCommand implements Serializable {    /**     * taskInstanceId     */    private int taskInstanceId;    /**     * startTime     */    private Date startTime;    /**     * host     */    private String host;    /**     * status     */    private int status;    /**     * logPath     */    private String logPath;    /**     * executePath     */    private String executePath;    public Date getStartTime() {        return startTime;    }    public void setStartTime(Date startTime) {        this.startTime = startTime;    }    public String getHost() {        return host;    }    public void setHost(String host) {        this.host = host;    }    public int getStatus() {        return status;    }    public void setStatus(int status) {        this.status = status;    }    public int getTaskInstanceId() {        return taskInstanceId;    }    public void setTaskInstanceId(int taskInstanceId) {        this.taskInstanceId = taskInstanceId;    }    public String getLogPath() {        return logPath;    }    public void setLogPath(String logPath) {        this.logPath = logPath;    }    public String getExecutePath() {        return executePath;    }    public void setExecutePath(String executePath) {        this.executePath = executePath;    }    /**     *  package request command     *     * @return command     */    public Command convert2Command(){        Command command = new Command();        command.setType(CommandType.EXECUTE_TASK_ACK);        byte[] body = FastJsonSerializer.serialize(this);        command.setBody(body);        return command;    }    @Override    public String toString() {        return "ExecuteTaskAckCommand{" +                "taskInstanceId=" + taskInstanceId +                ", startTime=" + startTime +                ", host='" + host + '\'' +                ", status=" + status +                ", logPath='" + logPath + '\'' +                ", executePath='" + executePath + '\'' +                '}';    }}
\ No newline at end of file

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/ExecuteTaskResponseCommand.java
Patch:
@@ -1 +1 @@
-/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *    http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.dolphinscheduler.remote.command;import org.apache.dolphinscheduler.remote.utils.FastJsonSerializer;import java.io.Serializable;import java.util.Date;/** *  execute task response command */public class ExecuteTaskResponseCommand implements Serializable {    public ExecuteTaskResponseCommand() {    }    public ExecuteTaskResponseCommand(int taskInstanceId) {        this.taskInstanceId = taskInstanceId;    }    /**     *  task instance id     */    private int taskInstanceId;    /**     *  status     */    private int status;    /**     *  end time     */    private Date endTime;    public int getTaskInstanceId() {        return taskInstanceId;    }    public void setTaskInstanceId(int taskInstanceId) {        this.taskInstanceId = taskInstanceId;    }    public int getStatus() {        return status;    }    public void setStatus(int status) {        this.status = status;    }    public Date getEndTime() {        return endTime;    }    public void setEndTime(Date endTime) {        this.endTime = endTime;    }    /**     * package response command     * @return command     */    public Command convert2Command(){        Command command = new Command();        command.setType(CommandType.EXECUTE_TASK_RESPONSE);        byte[] body = FastJsonSerializer.serialize(this);        command.setBody(body);        return command;    }    @Override    public String toString() {        return "ExecuteTaskResponseCommand{" +                "taskInstanceId=" + taskInstanceId +                ", status=" + status +                ", endTime=" + endTime +                '}';    }}
\ No newline at end of file
+/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *    http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.dolphinscheduler.remote.command;import org.apache.dolphinscheduler.remote.utils.FastJsonSerializer;import java.io.Serializable;import java.util.Date;/** *  execute task response command */public class ExecuteTaskResponseCommand implements Serializable {    public ExecuteTaskResponseCommand() {    }    public ExecuteTaskResponseCommand(int taskInstanceId) {        this.taskInstanceId = taskInstanceId;    }    /**     *  task instance id     */    private int taskInstanceId;    /**     *  status     */    private int status;    /**     *  end time     */    private Date endTime;    /**     * processId     */    private int processId;    /**     * appIds     */    private String appIds;    public int getTaskInstanceId() {        return taskInstanceId;    }    public void setTaskInstanceId(int taskInstanceId) {        this.taskInstanceId = taskInstanceId;    }    public int getStatus() {        return status;    }    public void setStatus(int status) {        this.status = status;    }    public Date getEndTime() {        return endTime;    }    public void setEndTime(Date endTime) {        this.endTime = endTime;    }    public int getProcessId() {        return processId;    }    public void setProcessId(int processId) {        this.processId = processId;    }    public String getAppIds() {        return appIds;    }    public void setAppIds(String appIds) {        this.appIds = appIds;    }    /**     * package response command     * @return command     */    public Command convert2Command(){        Command command = new Command();        command.setType(CommandType.EXECUTE_TASK_RESPONSE);        byte[] body = FastJsonSerializer.serialize(this);        command.setBody(body);        return command;    }    @Override    public String toString() {        return "ExecuteTaskResponseCommand{" +                "taskInstanceId=" + taskInstanceId +                ", status=" + status +                ", endTime=" + endTime +                ", processId=" + processId +                ", appIds='" + appIds + '\'' +                '}';    }}
\ No newline at end of file

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/KillTaskRequestCommand.java
Patch:
@@ -1 +1 @@
-/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *    http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.dolphinscheduler.remote.command;import org.apache.dolphinscheduler.remote.utils.FastJsonSerializer;import java.io.Serializable;/** *  kill task request command */public class KillTaskRequestCommand implements Serializable {    private int taskInstanceId;    private int processId;    private String host;    private String tenantCode;    private String logPath;    private String executePath;    public String getLogPath() {        return logPath;    }    public void setLogPath(String logPath) {        this.logPath = logPath;    }    public int getTaskInstanceId() {        return taskInstanceId;    }    public void setTaskInstanceId(int taskInstanceId) {        this.taskInstanceId = taskInstanceId;    }    public int getProcessId() {        return processId;    }    public void setProcessId(int processId) {        this.processId = processId;    }    public String getHost() {        return host;    }    public void setHost(String host) {        this.host = host;    }    public String getTenantCode() {        return tenantCode;    }    public void setTenantCode(String tenantCode) {        this.tenantCode = tenantCode;    }    public String getExecutePath() {        return executePath;    }    public void setExecutePath(String executePath) {        this.executePath = executePath;    }    /**     *  package request command     *     * @return command     */    public Command convert2Command(){        Command command = new Command();        command.setType(CommandType.KILL_TASK_REQUEST);        byte[] body = FastJsonSerializer.serialize(this);        command.setBody(body);        return command;    }}
\ No newline at end of file
+/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *    http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.dolphinscheduler.remote.command;import org.apache.dolphinscheduler.remote.utils.FastJsonSerializer;import java.io.Serializable;/** *  kill task request command */public class KillTaskRequestCommand implements Serializable {    /**     *  taskInstanceId     */    private int taskInstanceId;    /**     * processId     */    private int processId;    /**     * host     */    private String host;    /**     * tenantCode     */    private String tenantCode;    /**     * logPath     */    private String logPath;    /**     * executePath     */    private String executePath;    public String getLogPath() {        return logPath;    }    public void setLogPath(String logPath) {        this.logPath = logPath;    }    public int getTaskInstanceId() {        return taskInstanceId;    }    public void setTaskInstanceId(int taskInstanceId) {        this.taskInstanceId = taskInstanceId;    }    public int getProcessId() {        return processId;    }    public void setProcessId(int processId) {        this.processId = processId;    }    public String getHost() {        return host;    }    public void setHost(String host) {        this.host = host;    }    public String getTenantCode() {        return tenantCode;    }    public void setTenantCode(String tenantCode) {        this.tenantCode = tenantCode;    }    public String getExecutePath() {        return executePath;    }    public void setExecutePath(String executePath) {        this.executePath = executePath;    }    /**     *  package request command     *     * @return command     */    public Command convert2Command(){        Command command = new Command();        command.setType(CommandType.KILL_TASK_REQUEST);        byte[] body = FastJsonSerializer.serialize(this);        command.setBody(body);        return command;    }}
\ No newline at end of file

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/KillTaskResponseCommand.java
Patch:
@@ -0,0 +1 @@
+/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *    http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.dolphinscheduler.remote.command;import org.apache.dolphinscheduler.remote.utils.FastJsonSerializer;import java.io.Serializable;import java.util.Date;import java.util.List;/** *  kill task response command */public class KillTaskResponseCommand implements Serializable {    /**     * taskInstanceId     */    private int taskInstanceId;    /**     * host     */    private String host;    /**     * status     */    private int status;    /**     * processId     */    private int processId;    /**     * other resource manager appId , for example : YARN etc     */    protected List<String> appIds;    public int getTaskInstanceId() {        return taskInstanceId;    }    public void setTaskInstanceId(int taskInstanceId) {        this.taskInstanceId = taskInstanceId;    }    public String getHost() {        return host;    }    public void setHost(String host) {        this.host = host;    }    public int getStatus() {        return status;    }    public void setStatus(int status) {        this.status = status;    }    public int getProcessId() {        return processId;    }    public void setProcessId(int processId) {        this.processId = processId;    }    public List<String> getAppIds() {        return appIds;    }    public void setAppIds(List<String> appIds) {        this.appIds = appIds;    }    /**     *  package request command     *     * @return command     */    public Command convert2Command(){        Command command = new Command();        command.setType(CommandType.KILL_TASK_RESPONSE);        byte[] body = FastJsonSerializer.serialize(this);        command.setBody(body);        return command;    }    @Override    public String toString() {        return "KillTaskResponseCommand{" +                "taskInstanceId=" + taskInstanceId +                ", host='" + host + '\'' +                ", status=" + status +                ", processId=" + processId +                ", appIds=" + appIds +                '}';    }}
\ No newline at end of file

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterBaseTaskExecThread.java
Patch:
@@ -125,6 +125,7 @@ public void kill(){
     }
 
     /**
+     * TODO 分发任务
      * dispatch task to worker
      * @param taskInstance
      */

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/worker/shell/ShellCommandExecutorTest.java
Patch:
@@ -79,7 +79,9 @@ public void test() throws Exception {
                 taskInstance.getId()));
 
 
-        AbstractTask task = TaskManager.newTask(taskInstance.getTaskType(), taskProps, taskLogger);
+//        AbstractTask task = TaskManager.newTask(taskInstance.getTaskType(), taskProps, taskLogger);
+
+        AbstractTask task = null;
 
         logger.info("task info : {}", task);
 

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/worker/sql/SqlExecutorTest.java
Patch:
@@ -123,9 +123,10 @@ private void sharedTestSqlTask(String nodeName, String taskAppId, String tenantC
                 taskInstance.getId()));
 
 
-        AbstractTask task = TaskManager.newTask(taskInstance.getTaskType(), taskProps, taskLogger);
+//        AbstractTask task = TaskManager.newTask(taskInstance.getTaskType(), taskProps, taskLogger);
+        AbstractTask task = null;
 
-        logger.info("task info : {}", task);
+                logger.info("task info : {}", task);
 
         // job init
         task.init();

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/worker/task/datax/DataxTaskTest.java
Patch:
@@ -80,7 +80,7 @@ public void before()
         props.setTaskTimeout(0);
         props.setTaskParams(
             "{\"targetTable\":\"test\",\"postStatements\":[],\"jobSpeedByte\":1024,\"jobSpeedRecord\":1000,\"dtType\":\"MYSQL\",\"datasource\":1,\"dsType\":\"MYSQL\",\"datatarget\":2,\"jobSpeedByte\":0,\"sql\":\"select 1 as test from dual\",\"preStatements\":[\"delete from test\"],\"postStatements\":[\"delete from test\"]}");
-        dataxTask = PowerMockito.spy(new DataxTask(props, logger));
+        dataxTask = PowerMockito.spy(new DataxTask(null, logger));
         dataxTask.init();
 
         Mockito.when(processService.findDataSourceById(1)).thenReturn(getDataSource());
@@ -122,7 +122,7 @@ public void testDataxTask()
         props.setTaskAppId(String.valueOf(System.currentTimeMillis()));
         props.setTaskInstanceId(1);
         props.setTenantCode("1");
-        Assert.assertNotNull(new DataxTask(props, logger));
+        Assert.assertNotNull(new DataxTask(null, logger));
     }
 
     /**

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskInstance.java
Patch:
@@ -374,7 +374,7 @@ public void setAppLink(String appLink) {
 
 
     public Boolean isSubProcess(){
-        return TaskType.SUB_PROCESS.toString().equals(this.taskType.toUpperCase());
+        return TaskType.SUB_PROCESS.getDescp().equals(this.taskType);
     }
 
     public String getDependency(){

File: e2e/src/test/java/org/apache/dolphinscheduler/data/LoginData.java
Patch:
@@ -39,5 +39,5 @@ public class LoginData {
      */
     public static final String PASSWORD = PropertiesReader.getKey("PASSWORD");
 
-    public static final String TENANT = "租户管理 - DolphinScheduler";
+    public static final String TENANT = "Tenant Manage - DolphinScheduler";
 }

File: e2e/src/test/java/org/apache/dolphinscheduler/data/security/TenantManageData.java
Patch:
@@ -48,7 +48,7 @@ public class TenantManageData {
      */
     public static final String DESCRIPTION = "creat tenant test";
 
-    public static final String TENANAT_MANAGE = "租户管理 - DolphinScheduler";
+    public static final String TENANAT_MANAGE = "Tenant Manage - DolphinScheduler";
 
 
 

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/CommonUtils.java
Patch:
@@ -26,7 +26,7 @@
 /**
  * common utils
  */
-public class  CommonUtils {
+public class CommonUtils {
   private CommonUtils() {
     throw new IllegalStateException("CommonUtils class");
   }

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/ExecuteTaskResponseCommand.java
Patch:
@@ -1 +1 @@
-/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *    http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.dolphinscheduler.remote.command;import org.apache.dolphinscheduler.remote.utils.FastJsonSerializer;import java.io.Serializable;import java.util.Date;/** *  execute task response command */public class ExecuteTaskResponseCommand implements Serializable {    public ExecuteTaskResponseCommand() {    }    public ExecuteTaskResponseCommand(int taskInstanceId) {        this.taskInstanceId = taskInstanceId;    }    /**     *  task instance id     */    private int taskInstanceId;    /**     *  status     */    private int status;    /**     *  end time     */    private Date endTime;    public int getTaskInstanceId() {        return taskInstanceId;    }    public void setTaskInstanceId(int taskInstanceId) {        this.taskInstanceId = taskInstanceId;    }    public int getStatus() {        return status;    }    public void setStatus(int status) {        this.status = status;    }    public Date getEndTime() {        return endTime;    }    public void setEndTime(Date endTime) {        this.endTime = endTime;    }    /**     * package response command     * @return command     */    public Command convert2Command(){        Command command = new Command();        command.setType(CommandType.EXECUTE_TASK_RESPONSE);        byte[] body = FastJsonSerializer.serialize(this);        command.setBody(body);        return command;    }}
\ No newline at end of file
+/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *    http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.dolphinscheduler.remote.command;import org.apache.dolphinscheduler.remote.utils.FastJsonSerializer;import java.io.Serializable;import java.util.Date;/** *  execute task response command */public class ExecuteTaskResponseCommand implements Serializable {    public ExecuteTaskResponseCommand() {    }    public ExecuteTaskResponseCommand(int taskInstanceId) {        this.taskInstanceId = taskInstanceId;    }    /**     *  task instance id     */    private int taskInstanceId;    /**     *  status     */    private int status;    /**     *  end time     */    private Date endTime;    public int getTaskInstanceId() {        return taskInstanceId;    }    public void setTaskInstanceId(int taskInstanceId) {        this.taskInstanceId = taskInstanceId;    }    public int getStatus() {        return status;    }    public void setStatus(int status) {        this.status = status;    }    public Date getEndTime() {        return endTime;    }    public void setEndTime(Date endTime) {        this.endTime = endTime;    }    /**     * package response command     * @return command     */    public Command convert2Command(){        Command command = new Command();        command.setType(CommandType.EXECUTE_TASK_RESPONSE);        byte[] body = FastJsonSerializer.serialize(this);        command.setBody(body);        return command;    }    @Override    public String toString() {        return "ExecuteTaskResponseCommand{" +                "taskInstanceId=" + taskInstanceId +                ", status=" + status +                ", endTime=" + endTime +                '}';    }}
\ No newline at end of file

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/builder/TaskExecutionContextBuilder.java
Patch:
@@ -44,6 +44,7 @@ public TaskExecutionContextBuilder buildTaskInstanceRelatedInfo(TaskInstance tas
         taskExecutionContext.setTaskName(taskInstance.getName());
         taskExecutionContext.setStartTime(taskInstance.getStartTime());
         taskExecutionContext.setTaskType(taskInstance.getTaskType());
+        taskExecutionContext.setLogPath(taskInstance.getLogPath());
         taskExecutionContext.setExecutePath(taskInstance.getExecutePath());
         taskExecutionContext.setTaskJson(taskInstance.getTaskJson());
         return this;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterExecThread.java
Patch:
@@ -404,7 +404,7 @@ private void postHandle() {
     }
 
     /**
-     * submit task to execute
+     * TODO submit task to execute
      * @param taskInstance task instance
      * @return TaskInstance
      */
@@ -873,7 +873,7 @@ private void runProcess(){
                 }
                 logger.info("task :{}, id:{} complete, state is {} ",
                         task.getName(), task.getId(), task.getState().toString());
-                // node success , post node submit
+                //TODO  node success , post node submit
                 if(task.getState() == ExecutionStatus.SUCCESS){
                     completeTaskList.put(task.getName(), task);
                     submitPostNode(task.getName());

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/processor/TaskExecuteProcessor.java
Patch:
@@ -155,6 +155,7 @@ private ExecuteTaskAckCommand buildAckCommand(TaskExecutionContext taskExecution
         }else{
             ackCommand.setExecutePath(taskExecutionContext.getExecutePath());
         }
+        taskExecutionContext.setLogPath(ackCommand.getLogPath());
         return ackCommand;
     }
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/dependent/DependentTask.java
Patch:
@@ -107,7 +107,7 @@ public void handle() throws Exception {
         try{
             TaskInstance taskInstance = null;
             while(Stopper.isRunning()){
-                taskInstance = processService.findTaskInstanceById(this.taskProps.getTaskInstId());
+                taskInstance = processService.findTaskInstanceById(this.taskProps.getTaskInstanceId());
 
                 if(taskInstance == null){
                     exitStatusCode = -1;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/flink/FlinkTask.java
Patch:
@@ -68,7 +68,7 @@ public void init() {
     if (StringUtils.isNotEmpty(flinkParameters.getMainArgs())) {
       String args = flinkParameters.getMainArgs();
       // get process instance by task instance id
-      ProcessInstance processInstance = processService.findProcessInstanceByTaskId(taskProps.getTaskInstId());
+      ProcessInstance processInstance = processService.findProcessInstanceByTaskId(taskProps.getTaskInstanceId());
 
       /**
        *  combining local and global parameters

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/http/HttpTask.java
Patch:
@@ -138,7 +138,7 @@ public void handle() throws Exception {
      */
     protected CloseableHttpResponse sendRequest(CloseableHttpClient client) throws IOException {
         RequestBuilder builder = createRequestBuilder();
-        ProcessInstance processInstance = processService.findProcessInstanceByTaskId(taskProps.getTaskInstId());
+        ProcessInstance processInstance = processService.findProcessInstanceByTaskId(taskProps.getTaskInstanceId());
 
         Map<String, Property> paramsMap = ParamUtils.convert(taskProps.getUserDefParamsMap(),
                 taskProps.getDefinedParams(),

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/worker/shell/ShellCommandExecutorTest.java
Patch:
@@ -55,13 +55,13 @@ public void test() throws Exception {
 
         TaskProps taskProps = new TaskProps();
         // processDefineId_processInstanceId_taskInstanceId
-        taskProps.setTaskDir("/opt/soft/program/tmp/dolphinscheduler/exec/flow/5/36/2864/7657");
+        taskProps.setExecutePath("/opt/soft/program/tmp/dolphinscheduler/exec/flow/5/36/2864/7657");
         taskProps.setTaskAppId("36_2864_7657");
         // set tenant -> task execute linux user
         taskProps.setTenantCode("hdfs");
         taskProps.setTaskStartTime(new Date());
         taskProps.setTaskTimeout(360000);
-        taskProps.setTaskInstId(7657);
+        taskProps.setTaskInstanceId(7657);
 
 
 

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/worker/sql/SqlExecutorTest.java
Patch:
@@ -97,15 +97,15 @@ public void testSQLServer() throws Exception {
      */
     private void sharedTestSqlTask(String nodeName, String taskAppId, String tenantCode, int taskInstId) throws Exception {
         TaskProps taskProps = new TaskProps();
-        taskProps.setTaskDir("");
+        taskProps.setExecutePath("");
         // processDefineId_processInstanceId_taskInstanceId
         taskProps.setTaskAppId(taskAppId);
         // set tenant -> task execute linux user
         taskProps.setTenantCode(tenantCode);
         taskProps.setTaskStartTime(new Date());
         taskProps.setTaskTimeout(360000);
-        taskProps.setTaskInstId(taskInstId);
-        taskProps.setNodeName(nodeName);
+        taskProps.setTaskInstanceId(taskInstId);
+        taskProps.setTaskName(nodeName);
         taskProps.setCmdTypeIfComplement(CommandType.START_PROCESS);
 
 

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/worker/task/dependent/DependentTaskTest.java
Patch:
@@ -50,7 +50,7 @@ public void testDependInit() throws Exception{
                 "\"relation\":\"OR\"\n" +
                 "}";
 
-        taskProps.setTaskInstId(252612);
+        taskProps.setTaskInstanceId(252612);
         taskProps.setDependence(dependString);
         DependentTask dependentTask = new DependentTask(taskProps, logger);
         dependentTask.init();

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/CommonUtils.java
Patch:
@@ -26,7 +26,7 @@
 /**
  * common utils
  */
-public class  CommonUtils {
+public class CommonUtils {
   private CommonUtils() {
     throw new IllegalStateException("CommonUtils class");
   }

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/ExecuteTaskResponseCommand.java
Patch:
@@ -1 +1 @@
-/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *    http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.dolphinscheduler.remote.command;import org.apache.dolphinscheduler.remote.utils.FastJsonSerializer;import java.io.Serializable;import java.util.Date;/** *  execute task response command */public class ExecuteTaskResponseCommand implements Serializable {    public ExecuteTaskResponseCommand() {    }    public ExecuteTaskResponseCommand(int taskInstanceId) {        this.taskInstanceId = taskInstanceId;    }    /**     *  task instance id     */    private int taskInstanceId;    /**     *  status     */    private int status;    /**     *  end time     */    private Date endTime;    public int getTaskInstanceId() {        return taskInstanceId;    }    public void setTaskInstanceId(int taskInstanceId) {        this.taskInstanceId = taskInstanceId;    }    public int getStatus() {        return status;    }    public void setStatus(int status) {        this.status = status;    }    public Date getEndTime() {        return endTime;    }    public void setEndTime(Date endTime) {        this.endTime = endTime;    }    /**     * package response command     * @return command     */    public Command convert2Command(){        Command command = new Command();        command.setType(CommandType.EXECUTE_TASK_RESPONSE);        byte[] body = FastJsonSerializer.serialize(this);        command.setBody(body);        return command;    }}
\ No newline at end of file
+/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *    http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.dolphinscheduler.remote.command;import org.apache.dolphinscheduler.remote.utils.FastJsonSerializer;import java.io.Serializable;import java.util.Date;/** *  execute task response command */public class ExecuteTaskResponseCommand implements Serializable {    public ExecuteTaskResponseCommand() {    }    public ExecuteTaskResponseCommand(int taskInstanceId) {        this.taskInstanceId = taskInstanceId;    }    /**     *  task instance id     */    private int taskInstanceId;    /**     *  status     */    private int status;    /**     *  end time     */    private Date endTime;    public int getTaskInstanceId() {        return taskInstanceId;    }    public void setTaskInstanceId(int taskInstanceId) {        this.taskInstanceId = taskInstanceId;    }    public int getStatus() {        return status;    }    public void setStatus(int status) {        this.status = status;    }    public Date getEndTime() {        return endTime;    }    public void setEndTime(Date endTime) {        this.endTime = endTime;    }    /**     * package response command     * @return command     */    public Command convert2Command(){        Command command = new Command();        command.setType(CommandType.EXECUTE_TASK_RESPONSE);        byte[] body = FastJsonSerializer.serialize(this);        command.setBody(body);        return command;    }    @Override    public String toString() {        return "ExecuteTaskResponseCommand{" +                "taskInstanceId=" + taskInstanceId +                ", status=" + status +                ", endTime=" + endTime +                '}';    }}
\ No newline at end of file

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/builder/TaskExecutionContextBuilder.java
Patch:
@@ -44,6 +44,7 @@ public TaskExecutionContextBuilder buildTaskInstanceRelatedInfo(TaskInstance tas
         taskExecutionContext.setTaskName(taskInstance.getName());
         taskExecutionContext.setStartTime(taskInstance.getStartTime());
         taskExecutionContext.setTaskType(taskInstance.getTaskType());
+        taskExecutionContext.setLogPath(taskInstance.getLogPath());
         taskExecutionContext.setExecutePath(taskInstance.getExecutePath());
         taskExecutionContext.setTaskJson(taskInstance.getTaskJson());
         return this;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterExecThread.java
Patch:
@@ -404,7 +404,7 @@ private void postHandle() {
     }
 
     /**
-     * submit task to execute
+     * TODO submit task to execute
      * @param taskInstance task instance
      * @return TaskInstance
      */
@@ -873,7 +873,7 @@ private void runProcess(){
                 }
                 logger.info("task :{}, id:{} complete, state is {} ",
                         task.getName(), task.getId(), task.getState().toString());
-                // node success , post node submit
+                //TODO  node success , post node submit
                 if(task.getState() == ExecutionStatus.SUCCESS){
                     completeTaskList.put(task.getName(), task);
                     submitPostNode(task.getName());

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/processor/TaskExecuteProcessor.java
Patch:
@@ -155,6 +155,7 @@ private ExecuteTaskAckCommand buildAckCommand(TaskExecutionContext taskExecution
         }else{
             ackCommand.setExecutePath(taskExecutionContext.getExecutePath());
         }
+        taskExecutionContext.setLogPath(ackCommand.getLogPath());
         return ackCommand;
     }
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/dependent/DependentTask.java
Patch:
@@ -107,7 +107,7 @@ public void handle() throws Exception {
         try{
             TaskInstance taskInstance = null;
             while(Stopper.isRunning()){
-                taskInstance = processService.findTaskInstanceById(this.taskProps.getTaskInstId());
+                taskInstance = processService.findTaskInstanceById(this.taskProps.getTaskInstanceId());
 
                 if(taskInstance == null){
                     exitStatusCode = -1;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/flink/FlinkTask.java
Patch:
@@ -68,7 +68,7 @@ public void init() {
     if (StringUtils.isNotEmpty(flinkParameters.getMainArgs())) {
       String args = flinkParameters.getMainArgs();
       // get process instance by task instance id
-      ProcessInstance processInstance = processService.findProcessInstanceByTaskId(taskProps.getTaskInstId());
+      ProcessInstance processInstance = processService.findProcessInstanceByTaskId(taskProps.getTaskInstanceId());
 
       /**
        *  combining local and global parameters

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/http/HttpTask.java
Patch:
@@ -138,7 +138,7 @@ public void handle() throws Exception {
      */
     protected CloseableHttpResponse sendRequest(CloseableHttpClient client) throws IOException {
         RequestBuilder builder = createRequestBuilder();
-        ProcessInstance processInstance = processService.findProcessInstanceByTaskId(taskProps.getTaskInstId());
+        ProcessInstance processInstance = processService.findProcessInstanceByTaskId(taskProps.getTaskInstanceId());
 
         Map<String, Property> paramsMap = ParamUtils.convert(taskProps.getUserDefParamsMap(),
                 taskProps.getDefinedParams(),

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/worker/shell/ShellCommandExecutorTest.java
Patch:
@@ -55,13 +55,13 @@ public void test() throws Exception {
 
         TaskProps taskProps = new TaskProps();
         // processDefineId_processInstanceId_taskInstanceId
-        taskProps.setTaskDir("/opt/soft/program/tmp/dolphinscheduler/exec/flow/5/36/2864/7657");
+        taskProps.setExecutePath("/opt/soft/program/tmp/dolphinscheduler/exec/flow/5/36/2864/7657");
         taskProps.setTaskAppId("36_2864_7657");
         // set tenant -> task execute linux user
         taskProps.setTenantCode("hdfs");
         taskProps.setTaskStartTime(new Date());
         taskProps.setTaskTimeout(360000);
-        taskProps.setTaskInstId(7657);
+        taskProps.setTaskInstanceId(7657);
 
 
 

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/worker/sql/SqlExecutorTest.java
Patch:
@@ -97,15 +97,15 @@ public void testSQLServer() throws Exception {
      */
     private void sharedTestSqlTask(String nodeName, String taskAppId, String tenantCode, int taskInstId) throws Exception {
         TaskProps taskProps = new TaskProps();
-        taskProps.setTaskDir("");
+        taskProps.setExecutePath("");
         // processDefineId_processInstanceId_taskInstanceId
         taskProps.setTaskAppId(taskAppId);
         // set tenant -> task execute linux user
         taskProps.setTenantCode(tenantCode);
         taskProps.setTaskStartTime(new Date());
         taskProps.setTaskTimeout(360000);
-        taskProps.setTaskInstId(taskInstId);
-        taskProps.setNodeName(nodeName);
+        taskProps.setTaskInstanceId(taskInstId);
+        taskProps.setTaskName(nodeName);
         taskProps.setCmdTypeIfComplement(CommandType.START_PROCESS);
 
 

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/worker/task/dependent/DependentTaskTest.java
Patch:
@@ -50,7 +50,7 @@ public void testDependInit() throws Exception{
                 "\"relation\":\"OR\"\n" +
                 "}";
 
-        taskProps.setTaskInstId(252612);
+        taskProps.setTaskInstanceId(252612);
         taskProps.setDependence(dependString);
         DependentTask dependentTask = new DependentTask(taskProps, logger);
         dependentTask.init();

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/CommandType.java
Patch:
@@ -1 +1 @@
-/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *    http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.dolphinscheduler.remote.command;public enum CommandType {    /**     *  roll view log request     */    ROLL_VIEW_LOG_REQUEST,    /**     *  roll view log response     */    ROLL_VIEW_LOG_RESPONSE,    /**     * view whole log request     */    VIEW_WHOLE_LOG_REQUEST,    /**     * view whole log response     */    VIEW_WHOLE_LOG_RESPONSE,    /**     * get log bytes request     */    GET_LOG_BYTES_REQUEST,    /**     * get log bytes response     */    GET_LOG_BYTES_RESPONSE,    WORKER_REQUEST,    MASTER_RESPONSE,    /**     * execute task request     */    EXECUTE_TASK_REQUEST,    /**     * execute task ack     */    EXECUTE_TASK_ACK,    /**     * execute task response     */    EXECUTE_TASK_RESPONSE,    /**     *  ping     */    PING,    /**     *  pong     */    PONG;}
\ No newline at end of file
+/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *    http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.dolphinscheduler.remote.command;public enum CommandType {    /**     *  roll view log request     */    ROLL_VIEW_LOG_REQUEST,    /**     *  roll view log response     */    ROLL_VIEW_LOG_RESPONSE,    /**     * view whole log request     */    VIEW_WHOLE_LOG_REQUEST,    /**     * view whole log response     */    VIEW_WHOLE_LOG_RESPONSE,    /**     * get log bytes request     */    GET_LOG_BYTES_REQUEST,    /**     * get log bytes response     */    GET_LOG_BYTES_RESPONSE,    WORKER_REQUEST,    MASTER_RESPONSE,    /**     * execute task request     */    EXECUTE_TASK_REQUEST,    /**     * execute task ack     */    EXECUTE_TASK_ACK,    /**     * execute task response     */    EXECUTE_TASK_RESPONSE,    /**     * kill task     */    KILL_TASK_REQUEST,    /**     * kill task response     */    KILL_TASK_RESPONSE,    /**     *  ping     */    PING,    /**     *  pong     */    PONG;}
\ No newline at end of file

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/KillTaskRequestCommand.java
Patch:
@@ -0,0 +1 @@
+/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *    http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.dolphinscheduler.remote.command;import org.apache.dolphinscheduler.remote.utils.FastJsonSerializer;import java.io.Serializable;/** *  kill task request command */public class KillTaskRequestCommand implements Serializable {    private int taskInstanceId;    private int processId;    private String host;    private String tenantCode;    private String logPath;    private String executePath;    public String getLogPath() {        return logPath;    }    public void setLogPath(String logPath) {        this.logPath = logPath;    }    public int getTaskInstanceId() {        return taskInstanceId;    }    public void setTaskInstanceId(int taskInstanceId) {        this.taskInstanceId = taskInstanceId;    }    public int getProcessId() {        return processId;    }    public void setProcessId(int processId) {        this.processId = processId;    }    public String getHost() {        return host;    }    public void setHost(String host) {        this.host = host;    }    public String getTenantCode() {        return tenantCode;    }    public void setTenantCode(String tenantCode) {        this.tenantCode = tenantCode;    }    public String getExecutePath() {        return executePath;    }    public void setExecutePath(String executePath) {        this.executePath = executePath;    }    /**     *  package request command     *     * @return command     */    public Command convert2Command(){        Command command = new Command();        command.setType(CommandType.KILL_TASK_REQUEST);        byte[] body = FastJsonSerializer.serialize(this);        command.setBody(body);        return command;    }}
\ No newline at end of file

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/runner/FetchTaskThread.java
Patch:
@@ -235,7 +235,7 @@ public void run() {
 
                     logger.info("task : {} ready to submit to task scheduler thread",taskInstId);
                     // submit task
-//                    workerExecService.submit(new TaskScheduleThread(taskInstance, processService));
+//                    workerExecService.submit(new TaskExecuteThread(taskInstance, processService));
 
                     // remove node from zk
                     removeNodeFromTaskQueue(taskQueueStr);

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/dispatch/executor/AbstractExecutorManager.java
Patch:
@@ -23,7 +23,7 @@
 /**
  *  abstract executor manager
  */
-public abstract class AbstractExecutorManager implements ExecutorManager{
+public abstract class AbstractExecutorManager<T> implements ExecutorManager<T>{
 
     /**
      * before execute , add time monitor ， timeout

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/dispatch/executor/ExecutorManager.java
Patch:
@@ -23,7 +23,7 @@
 /**
  *  executor manager
  */
-public interface ExecutorManager {
+public interface ExecutorManager<T> {
 
     /**
      * before execute
@@ -37,7 +37,7 @@ public interface ExecutorManager {
      * @param context context
      * @throws ExecuteException
      */
-    void execute(ExecutionContext context) throws ExecuteException;
+    T execute(ExecutionContext context) throws ExecuteException;
 
     /**
      * after execute

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/dispatch/executor/AbstractExecutorManager.java
Patch:
@@ -23,7 +23,7 @@
 /**
  *  abstract executor manager
  */
-public abstract class AbstractExecutorManager implements ExecutorManager{
+public abstract class AbstractExecutorManager<T> implements ExecutorManager<T>{
 
     /**
      * before execute , add time monitor ， timeout

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/dispatch/executor/ExecutorManager.java
Patch:
@@ -23,7 +23,7 @@
 /**
  *  executor manager
  */
-public interface ExecutorManager {
+public interface ExecutorManager<T> {
 
     /**
      * before execute
@@ -37,7 +37,7 @@ public interface ExecutorManager {
      * @param context context
      * @throws ExecuteException
      */
-    void execute(ExecutionContext context) throws ExecuteException;
+    T execute(ExecutionContext context) throws ExecuteException;
 
     /**
      * after execute

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/dispatch/enums/ExecutorType.java
Patch:
@@ -16,7 +16,9 @@
  */
 package org.apache.dolphinscheduler.server.master.dispatch.enums;
 
-
+/**
+ *  executor type
+ */
 public enum ExecutorType {
 
     WORKER,

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/dispatch/exceptions/ExecuteException.java
Patch:
@@ -17,7 +17,9 @@
 
 package org.apache.dolphinscheduler.server.master.dispatch.exceptions;
 
-
+/**
+ *  execute exception
+ */
 public class ExecuteException extends Exception{
 
     public ExecuteException() {

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/dispatch/enums/ExecutorType.java
Patch:
@@ -16,7 +16,9 @@
  */
 package org.apache.dolphinscheduler.server.master.dispatch.enums;
 
-
+/**
+ *  executor type
+ */
 public enum ExecutorType {
 
     WORKER,

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/dispatch/exceptions/ExecuteException.java
Patch:
@@ -17,7 +17,9 @@
 
 package org.apache.dolphinscheduler.server.master.dispatch.exceptions;
 
-
+/**
+ *  execute exception
+ */
 public class ExecuteException extends Exception{
 
     public ExecuteException() {

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/datasource/BaseDataSource.java
Patch:
@@ -57,6 +57,7 @@ public String getPrincipal() {
   public void setPrincipal(String principal) {
     this.principal = principal;
   }
+
   /**
    * test whether the data source can be connected successfully
    * @throws Exception

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/datasource/DB2ServerDataSource.java
Patch:
@@ -33,7 +33,7 @@ public class DB2ServerDataSource extends BaseDataSource {
 
     /**
      * gets the JDBC url for the data source connection
-     * @return
+     * @return jdbc url
      */
     @Override
     public String getJdbcUrl() {

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/datasource/HiveDataSource.java
Patch:
@@ -34,7 +34,7 @@ public class HiveDataSource extends BaseDataSource {
 
   /**
    * gets the JDBC url for the data source connection
-   * @return
+   * @return jdbc url
    */
   @Override
   public String getJdbcUrl() {

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/datasource/MySQLDataSource.java
Patch:
@@ -34,7 +34,7 @@ public class MySQLDataSource extends BaseDataSource {
 
   /**
    * gets the JDBC url for the data source connection
-   * @return
+   * @return jdbc url
    */
   @Override
   public String getJdbcUrl() {

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/datasource/OracleDataSource.java
Patch:
@@ -33,7 +33,7 @@ public class OracleDataSource extends BaseDataSource {
 
     /**
      * gets the JDBC url for the data source connection
-     * @return
+     * @return jdbc url
      */
     @Override
     public String getJdbcUrl() {

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/datasource/PostgreDataSource.java
Patch:
@@ -35,7 +35,7 @@ public class PostgreDataSource extends BaseDataSource {
 
   /**
    * gets the JDBC url for the data source connection
-   * @return
+   * @return jdbc url
    */
   @Override
   public String getJdbcUrl() {

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/datasource/SQLServerDataSource.java
Patch:
@@ -33,7 +33,7 @@ public class SQLServerDataSource extends BaseDataSource {
 
     /**
      * gets the JDBC url for the data source connection
-     * @return
+     * @return jdbc url
      */
     @Override
     public String getJdbcUrl() {

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/datasource/SparkDataSource.java
Patch:
@@ -34,7 +34,7 @@ public class SparkDataSource extends BaseDataSource {
 
   /**
    * gets the JDBC url for the data source connection
-   * @return
+   * @return jdbc url
    */
   @Override
   public String getJdbcUrl() {

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/ResourceMapper.java
Patch:
@@ -87,7 +87,8 @@ IPage<Resource> queryResourcePaging(IPage<Resource> page,
     /**
      * list authorized resource
      * @param userId userId
-     * @param resNames resource names
+     * @param resNames resNames
+     * @param <T> T
      * @return resource list
      */
     <T> List<Resource> listAuthorizedResource(@Param("userId") int userId,@Param("resNames")T[] resNames);

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/ScheduleMapper.java
Patch:
@@ -62,8 +62,8 @@ IPage<Schedule> queryByProcessDefineIdPaging(IPage<Schedule> page,
 
     /**
      * query schedule list by process definition id
-     * @param processDefinitionId
-     * @return
+     * @param processDefinitionId processDefinitionId
+     * @return schedule list
      */
     List<Schedule> queryReleaseSchedulerListByProcessDefinitionId(@Param("processDefinitionId") int processDefinitionId);
 

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/UdfFuncMapper.java
Patch:
@@ -81,8 +81,9 @@ List<UdfFunc> getUdfFuncByType(@Param("userId") int userId,
     /**
      * list authorized UDF function
      * @param userId userId
-     * @param udfIds UDF function id array
-     * @return UDF function list
+     * @param udfIds udfIds
+     * @param <T> T
+     * @return Udf function list
      */
     <T> List<UdfFunc> listAuthorizedUdfFunc (@Param("userId") int userId,@Param("udfIds")T[] udfIds);
 

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/datasource/BaseDataSource.java
Patch:
@@ -57,6 +57,7 @@ public String getPrincipal() {
   public void setPrincipal(String principal) {
     this.principal = principal;
   }
+
   /**
    * test whether the data source can be connected successfully
    * @throws Exception

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/datasource/DB2ServerDataSource.java
Patch:
@@ -33,7 +33,7 @@ public class DB2ServerDataSource extends BaseDataSource {
 
     /**
      * gets the JDBC url for the data source connection
-     * @return
+     * @return jdbc url
      */
     @Override
     public String getJdbcUrl() {

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/datasource/HiveDataSource.java
Patch:
@@ -34,7 +34,7 @@ public class HiveDataSource extends BaseDataSource {
 
   /**
    * gets the JDBC url for the data source connection
-   * @return
+   * @return jdbc url
    */
   @Override
   public String getJdbcUrl() {

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/datasource/MySQLDataSource.java
Patch:
@@ -34,7 +34,7 @@ public class MySQLDataSource extends BaseDataSource {
 
   /**
    * gets the JDBC url for the data source connection
-   * @return
+   * @return jdbc url
    */
   @Override
   public String getJdbcUrl() {

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/datasource/OracleDataSource.java
Patch:
@@ -33,7 +33,7 @@ public class OracleDataSource extends BaseDataSource {
 
     /**
      * gets the JDBC url for the data source connection
-     * @return
+     * @return jdbc url
      */
     @Override
     public String getJdbcUrl() {

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/datasource/PostgreDataSource.java
Patch:
@@ -35,7 +35,7 @@ public class PostgreDataSource extends BaseDataSource {
 
   /**
    * gets the JDBC url for the data source connection
-   * @return
+   * @return jdbc url
    */
   @Override
   public String getJdbcUrl() {

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/datasource/SQLServerDataSource.java
Patch:
@@ -33,7 +33,7 @@ public class SQLServerDataSource extends BaseDataSource {
 
     /**
      * gets the JDBC url for the data source connection
-     * @return
+     * @return jdbc url
      */
     @Override
     public String getJdbcUrl() {

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/datasource/SparkDataSource.java
Patch:
@@ -34,7 +34,7 @@ public class SparkDataSource extends BaseDataSource {
 
   /**
    * gets the JDBC url for the data source connection
-   * @return
+   * @return jdbc url
    */
   @Override
   public String getJdbcUrl() {

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/ResourceMapper.java
Patch:
@@ -87,7 +87,8 @@ IPage<Resource> queryResourcePaging(IPage<Resource> page,
     /**
      * list authorized resource
      * @param userId userId
-     * @param resNames resource names
+     * @param resNames resNames
+     * @param <T> T
      * @return resource list
      */
     <T> List<Resource> listAuthorizedResource(@Param("userId") int userId,@Param("resNames")T[] resNames);

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/ScheduleMapper.java
Patch:
@@ -62,8 +62,8 @@ IPage<Schedule> queryByProcessDefineIdPaging(IPage<Schedule> page,
 
     /**
      * query schedule list by process definition id
-     * @param processDefinitionId
-     * @return
+     * @param processDefinitionId processDefinitionId
+     * @return schedule list
      */
     List<Schedule> queryReleaseSchedulerListByProcessDefinitionId(@Param("processDefinitionId") int processDefinitionId);
 

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/UdfFuncMapper.java
Patch:
@@ -81,8 +81,9 @@ List<UdfFunc> getUdfFuncByType(@Param("userId") int userId,
     /**
      * list authorized UDF function
      * @param userId userId
-     * @param udfIds UDF function id array
-     * @return UDF function list
+     * @param udfIds udfIds
+     * @param <T> T
+     * @return Udf function list
      */
     <T> List<UdfFunc> listAuthorizedUdfFunc (@Param("userId") int userId,@Param("udfIds")T[] udfIds);
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/MasterServer.java
Patch:
@@ -120,8 +120,8 @@ public void run(){
         NettyServerConfig serverConfig = new NettyServerConfig();
         serverConfig.setListenPort(45678);
         this.nettyRemotingServer = new NettyRemotingServer(serverConfig);
-        this.nettyRemotingServer.registerProcessor(CommandType.EXECUTE_TASK_RESPONSE, new TaskResponseProcessor(processService));
-        this.nettyRemotingServer.registerProcessor(CommandType.EXECUTE_TASK_ACK, new TaskAckProcessor(processService));
+        this.nettyRemotingServer.registerProcessor(CommandType.EXECUTE_TASK_RESPONSE, new TaskResponseProcessor());
+        this.nettyRemotingServer.registerProcessor(CommandType.EXECUTE_TASK_ACK, new TaskAckProcessor());
         this.nettyRemotingServer.start();
 
         //

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/processor/TaskAckProcessor.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.dolphinscheduler.remote.command.ExecuteTaskAckCommand;
 import org.apache.dolphinscheduler.remote.processor.NettyRequestProcessor;
 import org.apache.dolphinscheduler.remote.utils.FastJsonSerializer;
+import org.apache.dolphinscheduler.service.bean.SpringApplicationContext;
 import org.apache.dolphinscheduler.service.process.ProcessService;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -41,8 +42,8 @@ public class TaskAckProcessor implements NettyRequestProcessor {
      */
     private final ProcessService processService;
 
-    public TaskAckProcessor(ProcessService processService){
-        this.processService = processService;
+    public TaskAckProcessor(){
+        this.processService = SpringApplicationContext.getBean(ProcessService.class);
     }
 
     @Override

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/processor/TaskResponseProcessor.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.dolphinscheduler.remote.command.ExecuteTaskResponseCommand;
 import org.apache.dolphinscheduler.remote.processor.NettyRequestProcessor;
 import org.apache.dolphinscheduler.remote.utils.FastJsonSerializer;
+import org.apache.dolphinscheduler.service.bean.SpringApplicationContext;
 import org.apache.dolphinscheduler.service.process.ProcessService;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -41,8 +42,8 @@ public class TaskResponseProcessor implements NettyRequestProcessor {
      */
     private final ProcessService processService;
 
-    public TaskResponseProcessor(ProcessService processService){
-        this.processService = processService;
+    public TaskResponseProcessor(){
+        this.processService = SpringApplicationContext.getBean(ProcessService.class);
     }
 
     /**

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/thread/Stopper.java
Patch:
@@ -34,6 +34,6 @@ public static final boolean isRunning(){
 	}
 	
 	public static final void stop(){
-		signal.getAndSet(true);
+		signal.set(true);
 	}
 }

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/ExecuteTaskAckCommand.java
Patch:
@@ -1 +1 @@
-/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *    http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.dolphinscheduler.remote.command;import org.apache.dolphinscheduler.remote.utils.FastJsonSerializer;import java.io.Serializable;import java.util.Date;/** *  execute task request command */public class ExecuteTaskAckCommand implements Serializable {    private int taskInstanceId;    private Date startTime;    private String host;    private int status;    private String logPath;    private String executePath;    public Date getStartTime() {        return startTime;    }    public void setStartTime(Date startTime) {        this.startTime = startTime;    }    public String getHost() {        return host;    }    public void setHost(String host) {        this.host = host;    }    public int getStatus() {        return status;    }    public void setStatus(int status) {        this.status = status;    }    public int getTaskInstanceId() {        return taskInstanceId;    }    public void setTaskInstanceId(int taskInstanceId) {        this.taskInstanceId = taskInstanceId;    }    public String getLogPath() {        return logPath;    }    public void setLogPath(String logPath) {        this.logPath = logPath;    }    public String getExecutePath() {        return executePath;    }    public void setExecutePath(String executePath) {        this.executePath = executePath;    }    /**     *  package request command     *     * @return command     */    public Command convert2Command(long opaque){        Command command = new Command(opaque);        command.setType(CommandType.EXECUTE_TASK_ACK);        byte[] body = FastJsonSerializer.serialize(this);        command.setBody(body);        return command;    }    @Override    public String toString() {        return "ExecuteTaskAckCommand{" +                "taskInstanceId=" + taskInstanceId +                ", startTime=" + startTime +                ", host='" + host + '\'' +                ", status=" + status +                ", logPath='" + logPath + '\'' +                ", executePath='" + executePath + '\'' +                '}';    }}
\ No newline at end of file
+/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *    http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.dolphinscheduler.remote.command;import org.apache.dolphinscheduler.remote.utils.FastJsonSerializer;import java.io.Serializable;import java.util.Date;/** *  execute task request command */public class ExecuteTaskAckCommand implements Serializable {    private int taskInstanceId;    private Date startTime;    private String host;    private int status;    private String logPath;    private String executePath;    public Date getStartTime() {        return startTime;    }    public void setStartTime(Date startTime) {        this.startTime = startTime;    }    public String getHost() {        return host;    }    public void setHost(String host) {        this.host = host;    }    public int getStatus() {        return status;    }    public void setStatus(int status) {        this.status = status;    }    public int getTaskInstanceId() {        return taskInstanceId;    }    public void setTaskInstanceId(int taskInstanceId) {        this.taskInstanceId = taskInstanceId;    }    public String getLogPath() {        return logPath;    }    public void setLogPath(String logPath) {        this.logPath = logPath;    }    public String getExecutePath() {        return executePath;    }    public void setExecutePath(String executePath) {        this.executePath = executePath;    }    /**     *  package request command     *     * @return command     */    public Command convert2Command(){        Command command = new Command();        command.setType(CommandType.EXECUTE_TASK_ACK);        byte[] body = FastJsonSerializer.serialize(this);        command.setBody(body);        return command;    }    @Override    public String toString() {        return "ExecuteTaskAckCommand{" +                "taskInstanceId=" + taskInstanceId +                ", startTime=" + startTime +                ", host='" + host + '\'' +                ", status=" + status +                ", logPath='" + logPath + '\'' +                ", executePath='" + executePath + '\'' +                '}';    }}
\ No newline at end of file

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/ExecuteTaskRequestCommand.java
Patch:
@@ -1 +1 @@
-/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *    http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.dolphinscheduler.remote.command;import org.apache.dolphinscheduler.remote.utils.FastJsonSerializer;import java.io.Serializable;/** *  execute task request command */public class ExecuteTaskRequestCommand implements Serializable {    /**     *  task instance json     */    private String taskInfoJson;    public String getTaskInfoJson() {        return taskInfoJson;    }    public void setTaskInfoJson(String taskInfoJson) {        this.taskInfoJson = taskInfoJson;    }    public ExecuteTaskRequestCommand() {    }    public ExecuteTaskRequestCommand(String taskInfoJson) {        this.taskInfoJson = taskInfoJson;    }    /**     *  package request command     *     * @return command     */    public Command convert2Command(){        Command command = new Command();        command.setType(CommandType.EXECUTE_TASK_REQUEST);        byte[] body = FastJsonSerializer.serialize(this);        command.setBody(body);        return command;    }    @Override    public String toString() {        return "ExecuteTaskRequestCommand{" +                "taskInfoJson='" + taskInfoJson + '\'' +                '}';    }}
\ No newline at end of file
+/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *    http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.dolphinscheduler.remote.command;import org.apache.dolphinscheduler.remote.utils.FastJsonSerializer;import java.io.Serializable;/** *  execute task request command */public class ExecuteTaskRequestCommand implements Serializable {    /**     *  task execution context     */    private String taskExecutionContext;    public String getTaskExecutionContext() {        return taskExecutionContext;    }    public void setTaskExecutionContext(String taskExecutionContext) {        this.taskExecutionContext = taskExecutionContext;    }    public ExecuteTaskRequestCommand() {    }    public ExecuteTaskRequestCommand(String taskExecutionContext) {        this.taskExecutionContext = taskExecutionContext;    }    /**     *  package request command     *     * @return command     */    public Command convert2Command(){        Command command = new Command();        command.setType(CommandType.EXECUTE_TASK_REQUEST);        byte[] body = FastJsonSerializer.serialize(this);        command.setBody(body);        return command;    }    @Override    public String toString() {        return "ExecuteTaskRequestCommand{" +                "taskExecutionContext='" + taskExecutionContext + '\'' +                '}';    }}
\ No newline at end of file

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/ExecuteTaskResponseCommand.java
Patch:
@@ -1 +1 @@
-/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *    http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.dolphinscheduler.remote.command;import org.apache.dolphinscheduler.remote.utils.FastJsonSerializer;import java.io.Serializable;import java.util.Date;/** *  execute task response command */public class ExecuteTaskResponseCommand implements Serializable {    public ExecuteTaskResponseCommand() {    }    public ExecuteTaskResponseCommand(int taskInstanceId) {        this.taskInstanceId = taskInstanceId;    }    /**     *  task instance id     */    private int taskInstanceId;    /**     *  status     */    private int status;    /**     *  end time     */    private Date endTime;    public int getTaskInstanceId() {        return taskInstanceId;    }    public void setTaskInstanceId(int taskInstanceId) {        this.taskInstanceId = taskInstanceId;    }    public int getStatus() {        return status;    }    public void setStatus(int status) {        this.status = status;    }    public Date getEndTime() {        return endTime;    }    public void setEndTime(Date endTime) {        this.endTime = endTime;    }    /**     * package response command     *     * @param opaque request unique identification     * @return command     */    public Command convert2Command(long opaque){        Command command = new Command(opaque);        command.setType(CommandType.EXECUTE_TASK_RESPONSE);        byte[] body = FastJsonSerializer.serialize(this);        command.setBody(body);        return command;    }}
\ No newline at end of file
+/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *    http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.dolphinscheduler.remote.command;import org.apache.dolphinscheduler.remote.utils.FastJsonSerializer;import java.io.Serializable;import java.util.Date;/** *  execute task response command */public class ExecuteTaskResponseCommand implements Serializable {    public ExecuteTaskResponseCommand() {    }    public ExecuteTaskResponseCommand(int taskInstanceId) {        this.taskInstanceId = taskInstanceId;    }    /**     *  task instance id     */    private int taskInstanceId;    /**     *  status     */    private int status;    /**     *  end time     */    private Date endTime;    public int getTaskInstanceId() {        return taskInstanceId;    }    public void setTaskInstanceId(int taskInstanceId) {        this.taskInstanceId = taskInstanceId;    }    public int getStatus() {        return status;    }    public void setStatus(int status) {        this.status = status;    }    public Date getEndTime() {        return endTime;    }    public void setEndTime(Date endTime) {        this.endTime = endTime;    }    /**     * package response command     * @return command     */    public Command convert2Command(){        Command command = new Command();        command.setType(CommandType.EXECUTE_TASK_RESPONSE);        byte[] body = FastJsonSerializer.serialize(this);        command.setBody(body);        return command;    }}
\ No newline at end of file

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/handler/NettyServerHandler.java
Patch:
@@ -98,7 +98,7 @@ public void registerProcessor(final CommandType commandType, final NettyRequestP
         if(executorRef == null){
             executorRef = nettyRemotingServer.getDefaultExecutor();
         }
-        this.processors.putIfAbsent(commandType, new Pair<NettyRequestProcessor, ExecutorService>(processor, executorRef));
+        this.processors.putIfAbsent(commandType, new Pair<>(processor, executorRef));
     }
 
     /**

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/utils/ChannelUtils.java
Patch:
@@ -49,9 +49,9 @@ public static String getRemoteAddress(Channel channel){
      * @param channel channel
      * @return address
      */
-    public static Address toAddress(Channel channel){
+    public static Host toAddress(Channel channel){
         InetSocketAddress socketAddress = ((InetSocketAddress)channel.remoteAddress());
-        return new Address(socketAddress.getAddress().getHostAddress(), socketAddress.getPort());
+        return new Host(socketAddress.getAddress().getHostAddress(), socketAddress.getPort());
     }
 
 }

File: dolphinscheduler-remote/src/test/java/org/apache/dolphinscheduler/remote/NettyRemotingClientTest.java
Patch:
@@ -27,7 +27,7 @@
 import org.apache.dolphinscheduler.remote.future.InvokeCallback;
 import org.apache.dolphinscheduler.remote.future.ResponseFuture;
 import org.apache.dolphinscheduler.remote.processor.NettyRequestProcessor;
-import org.apache.dolphinscheduler.remote.utils.Address;
+import org.apache.dolphinscheduler.remote.utils.Host;
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -62,7 +62,7 @@ public void process(Channel channel, Command command) {
         NettyRemotingClient client = new NettyRemotingClient(clientConfig);
         Command commandPing = Ping.create();
         try {
-            Command response = client.sendSync(new Address("127.0.0.1", serverConfig.getListenPort()), commandPing, 2000);
+            Command response = client.sendSync(new Host("127.0.0.1", serverConfig.getListenPort()), commandPing, 2000);
             Assert.assertEquals(commandPing.getOpaque(), response.getOpaque());
         } catch (Exception e) {
             e.printStackTrace();
@@ -93,7 +93,7 @@ public void process(Channel channel, Command command) {
         Command commandPing = Ping.create();
         try {
             final AtomicLong opaque = new AtomicLong(0);
-            client.sendAsync(new Address("127.0.0.1", serverConfig.getListenPort()), commandPing, 2000, new InvokeCallback() {
+            client.sendAsync(new Host("127.0.0.1", serverConfig.getListenPort()), commandPing, 2000, new InvokeCallback() {
                 @Override
                 public void operationComplete(ResponseFuture responseFuture) {
                     opaque.set(responseFuture.getOpaque());

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/builder/TaskExecutionContextBuilder.java
Patch:
@@ -40,7 +40,7 @@ public static TaskExecutionContextBuilder get(){
      * @return TaskExecutionContextBuilder
      */
     public TaskExecutionContextBuilder buildTaskInstanceRelatedInfo(TaskInstance taskInstance){
-        taskExecutionContext.setTaskId(taskInstance.getId());
+        taskExecutionContext.setTaskInstanceId(taskInstance.getId());
         taskExecutionContext.setTaskName(taskInstance.getName());
         taskExecutionContext.setStartTime(taskInstance.getStartTime());
         taskExecutionContext.setTaskType(taskInstance.getTaskType());

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/MasterServer.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.dolphinscheduler.remote.command.CommandType;
 import org.apache.dolphinscheduler.remote.config.NettyServerConfig;
 import org.apache.dolphinscheduler.server.master.config.MasterConfig;
+import org.apache.dolphinscheduler.server.master.processor.TaskAckProcessor;
 import org.apache.dolphinscheduler.server.master.processor.TaskResponseProcessor;
 import org.apache.dolphinscheduler.server.master.runner.MasterSchedulerThread;
 import org.apache.dolphinscheduler.server.zk.ZKMasterClient;
@@ -106,7 +107,6 @@ public class MasterServer implements IStoppable {
     public static void main(String[] args) {
         Thread.currentThread().setName(Constants.THREAD_NAME_MASTER_SERVER);
         new SpringApplicationBuilder(MasterServer.class).web(WebApplicationType.NONE).run(args);
-
     }
 
     /**
@@ -121,6 +121,7 @@ public void run(){
         serverConfig.setListenPort(45678);
         this.nettyRemotingServer = new NettyRemotingServer(serverConfig);
         this.nettyRemotingServer.registerProcessor(CommandType.EXECUTE_TASK_RESPONSE, new TaskResponseProcessor(processService));
+        this.nettyRemotingServer.registerProcessor(CommandType.EXECUTE_TASK_ACK, new TaskAckProcessor(processService));
         this.nettyRemotingServer.start();
 
         //

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/dispatch/host/assign/RandomSelector.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.server.master.host.assign;
+package org.apache.dolphinscheduler.server.master.dispatch.host.assign;
 
 import java.util.Collection;
 import java.util.Random;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/dispatch/host/assign/Selector.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.dolphinscheduler.server.master.host.assign;
+package org.apache.dolphinscheduler.server.master.dispatch.host.assign;
 
 import java.util.Collection;
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/processor/TaskResponseProcessor.java
Patch:
@@ -25,7 +25,6 @@
 import org.apache.dolphinscheduler.remote.command.ExecuteTaskResponseCommand;
 import org.apache.dolphinscheduler.remote.processor.NettyRequestProcessor;
 import org.apache.dolphinscheduler.remote.utils.FastJsonSerializer;
-import org.apache.dolphinscheduler.server.master.future.TaskFuture;
 import org.apache.dolphinscheduler.service.process.ProcessService;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -59,7 +58,6 @@ public void process(Channel channel, Command command) {
         logger.info("received command : {}", command);
         ExecuteTaskResponseCommand responseCommand = FastJsonSerializer.deserialize(command.getBody(), ExecuteTaskResponseCommand.class);
         processService.changeTaskState(ExecutionStatus.of(responseCommand.getStatus()), responseCommand.getEndTime(), responseCommand.getTaskInstanceId());
-        TaskFuture.notify(command);
     }
 
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/registry/ZookeeperNodeManager.java
Patch:
@@ -35,7 +35,7 @@
 
 
 @Service
-public abstract class ZookeeperNodeManager implements InitializingBean {
+public class ZookeeperNodeManager implements InitializingBean {
 
     private final Logger logger = LoggerFactory.getLogger(ZookeeperNodeManager.class);
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/registry/ZookeeperRegistryCenter.java
Patch:
@@ -47,7 +47,7 @@ public class ZookeeperRegistryCenter implements InitializingBean {
 
     @Override
     public void afterPropertiesSet() throws Exception {
-
+        init();
     }
 
     public void init() {

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/processor/TaskCallbackService.java
Patch:
@@ -76,7 +76,7 @@ public void remove(int taskInstanceId){
      */
     public void sendAck(int taskInstanceId, ExecuteTaskAckCommand ackCommand){
         CallbackChannel callbackChannel = getCallbackChannel(taskInstanceId);
-        callbackChannel.getChannel().writeAndFlush(ackCommand.convert2Command(callbackChannel.getOpaque()));
+        callbackChannel.getChannel().writeAndFlush(ackCommand.convert2Command());
     }
 
     /**
@@ -87,8 +87,7 @@ public void sendAck(int taskInstanceId, ExecuteTaskAckCommand ackCommand){
      */
     public void sendResult(int taskInstanceId, ExecuteTaskResponseCommand responseCommand){
         CallbackChannel callbackChannel = getCallbackChannel(taskInstanceId);
-        callbackChannel.getChannel().writeAndFlush(responseCommand.convert2Command(
-                callbackChannel.getOpaque())).addListener(new ChannelFutureListener(){
+        callbackChannel.getChannel().writeAndFlush(responseCommand.convert2Command()).addListener(new ChannelFutureListener(){
 
             @Override
             public void operationComplete(ChannelFuture future) throws Exception {

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/registry/WorkerRegistry.java
Patch:
@@ -71,7 +71,7 @@ public void stateChanged(CuratorFramework client, ConnectionState newState) {
                 }
             }
         });
-        logger.info("scheduler node : {} registry to ZK successfully.", address);
+        logger.info("worker node : {} registry to ZK successfully.", address);
     }
 
     /**

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskInstance.java
Patch:
@@ -27,13 +27,14 @@
 import com.baomidou.mybatisplus.annotation.TableId;
 import com.baomidou.mybatisplus.annotation.TableName;
 
+import java.io.Serializable;
 import java.util.Date;
 
 /**
  * task instance
  */
 @TableName("t_ds_task_instance")
-public class TaskInstance {
+public class TaskInstance implements Serializable {
 
     /**
      * id
@@ -198,7 +199,7 @@ public class TaskInstance {
 
 
 
-    public void  init(String host,Date startTime,String executePath){
+    public void init(String host,Date startTime,String executePath){
         this.host = host;
         this.startTime = startTime;
         this.executePath = executePath;

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/DataSourceMapper.java
Patch:
@@ -79,8 +79,10 @@ IPage<DataSource> selectPaging(IPage<DataSource> page,
 
     /**
      * list authorized UDF function
+     *
      * @param userId userId
      * @param dataSourceIds data source id array
+     * @param <T> T
      * @return UDF function list
      */
     <T> List<DataSource> listAuthorizedDataSource(@Param("userId") int userId,@Param("dataSourceIds")T[] dataSourceIds);

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/ExecuteTaskRequestCommand.java
Patch:
@@ -1 +1 @@
-/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *    http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.dolphinscheduler.remote.command;import org.apache.dolphinscheduler.remote.utils.FastJsonSerializer;import java.io.Serializable;/** *  execute task request command */public class ExecuteTaskRequestCommand implements Serializable {    /**     *  task instance json     */    private String taskInstanceJson;    public String getTaskInstanceJson() {        return taskInstanceJson;    }    public void setTaskInstanceJson(String taskInstanceJson) {        this.taskInstanceJson = taskInstanceJson;    }    public ExecuteTaskRequestCommand() {    }    public ExecuteTaskRequestCommand(String taskInstanceJson) {        this.taskInstanceJson = taskInstanceJson;    }    /**     *  package request command     *     * @return command     */    public Command convert2Command(){        Command command = new Command();        command.setType(CommandType.EXECUTE_TASK_REQUEST);        byte[] body = FastJsonSerializer.serialize(this);        command.setBody(body);        return command;    }    @Override    public String toString() {        return "ExecuteTaskRequestCommand{" +                "taskInstanceJson='" + taskInstanceJson + '\'' +                '}';    }}
\ No newline at end of file
+/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *    http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.dolphinscheduler.remote.command;import org.apache.dolphinscheduler.remote.utils.FastJsonSerializer;import java.io.Serializable;/** *  execute task request command */public class ExecuteTaskRequestCommand implements Serializable {    /**     *  task instance json     */    private String taskInfoJson;    public String getTaskInfoJson() {        return taskInfoJson;    }    public void setTaskInfoJson(String taskInfoJson) {        this.taskInfoJson = taskInfoJson;    }    public ExecuteTaskRequestCommand() {    }    public ExecuteTaskRequestCommand(String taskInfoJson) {        this.taskInfoJson = taskInfoJson;    }    /**     *  package request command     *     * @return command     */    public Command convert2Command(){        Command command = new Command();        command.setType(CommandType.EXECUTE_TASK_REQUEST);        byte[] body = FastJsonSerializer.serialize(this);        command.setBody(body);        return command;    }    @Override    public String toString() {        return "ExecuteTaskRequestCommand{" +                "taskInfoJson='" + taskInfoJson + '\'' +                '}';    }}
\ No newline at end of file

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/MasterServer.java
Patch:
@@ -118,6 +118,7 @@ public void run(){
         //
         //init remoting server
         NettyServerConfig serverConfig = new NettyServerConfig();
+        serverConfig.setListenPort(45678);
         this.nettyRemotingServer = new NettyRemotingServer(serverConfig);
         this.nettyRemotingServer.registerProcessor(CommandType.EXECUTE_TASK_RESPONSE, new TaskResponseProcessor(processService));
         this.nettyRemotingServer.start();

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskInstance.java
Patch:
@@ -27,13 +27,14 @@
 import com.baomidou.mybatisplus.annotation.TableId;
 import com.baomidou.mybatisplus.annotation.TableName;
 
+import java.io.Serializable;
 import java.util.Date;
 
 /**
  * task instance
  */
 @TableName("t_ds_task_instance")
-public class TaskInstance {
+public class TaskInstance implements Serializable {
 
     /**
      * id
@@ -198,7 +199,7 @@ public class TaskInstance {
 
 
 
-    public void  init(String host,Date startTime,String executePath){
+    public void init(String host,Date startTime,String executePath){
         this.host = host;
         this.startTime = startTime;
         this.executePath = executePath;

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/DataSourceMapper.java
Patch:
@@ -79,8 +79,10 @@ IPage<DataSource> selectPaging(IPage<DataSource> page,
 
     /**
      * list authorized UDF function
+     *
      * @param userId userId
      * @param dataSourceIds data source id array
+     * @param <T> T
      * @return UDF function list
      */
     <T> List<DataSource> listAuthorizedDataSource(@Param("userId") int userId,@Param("dataSourceIds")T[] dataSourceIds);

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/ExecuteTaskRequestCommand.java
Patch:
@@ -1 +1 @@
-/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *    http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.dolphinscheduler.remote.command;import org.apache.dolphinscheduler.remote.utils.FastJsonSerializer;import java.io.Serializable;/** *  execute task request command */public class ExecuteTaskRequestCommand implements Serializable {    /**     *  task instance json     */    private String taskInstanceJson;    public String getTaskInstanceJson() {        return taskInstanceJson;    }    public void setTaskInstanceJson(String taskInstanceJson) {        this.taskInstanceJson = taskInstanceJson;    }    public ExecuteTaskRequestCommand() {    }    public ExecuteTaskRequestCommand(String taskInstanceJson) {        this.taskInstanceJson = taskInstanceJson;    }    /**     *  package request command     *     * @return command     */    public Command convert2Command(){        Command command = new Command();        command.setType(CommandType.EXECUTE_TASK_REQUEST);        byte[] body = FastJsonSerializer.serialize(this);        command.setBody(body);        return command;    }    @Override    public String toString() {        return "ExecuteTaskRequestCommand{" +                "taskInstanceJson='" + taskInstanceJson + '\'' +                '}';    }}
\ No newline at end of file
+/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *    http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.dolphinscheduler.remote.command;import org.apache.dolphinscheduler.remote.utils.FastJsonSerializer;import java.io.Serializable;/** *  execute task request command */public class ExecuteTaskRequestCommand implements Serializable {    /**     *  task instance json     */    private String taskInfoJson;    public String getTaskInfoJson() {        return taskInfoJson;    }    public void setTaskInfoJson(String taskInfoJson) {        this.taskInfoJson = taskInfoJson;    }    public ExecuteTaskRequestCommand() {    }    public ExecuteTaskRequestCommand(String taskInfoJson) {        this.taskInfoJson = taskInfoJson;    }    /**     *  package request command     *     * @return command     */    public Command convert2Command(){        Command command = new Command();        command.setType(CommandType.EXECUTE_TASK_REQUEST);        byte[] body = FastJsonSerializer.serialize(this);        command.setBody(body);        return command;    }    @Override    public String toString() {        return "ExecuteTaskRequestCommand{" +                "taskInfoJson='" + taskInfoJson + '\'' +                '}';    }}
\ No newline at end of file

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/MasterServer.java
Patch:
@@ -118,6 +118,7 @@ public void run(){
         //
         //init remoting server
         NettyServerConfig serverConfig = new NettyServerConfig();
+        serverConfig.setListenPort(45678);
         this.nettyRemotingServer = new NettyRemotingServer(serverConfig);
         this.nettyRemotingServer.registerProcessor(CommandType.EXECUTE_TASK_RESPONSE, new TaskResponseProcessor(processService));
         this.nettyRemotingServer.start();

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/NettyRemotingServer.java
Patch:
@@ -49,7 +49,7 @@ public class NettyRemotingServer {
     private final Logger logger = LoggerFactory.getLogger(NettyRemotingServer.class);
 
     /**
-     *  server bootstart
+     *  server bootstrap
      */
     private final ServerBootstrap serverBootstrap = new ServerBootstrap();
 

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/ExecuteTaskRequestCommand.java
Patch:
@@ -1 +1 @@
-/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *    http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.dolphinscheduler.remote.command;import org.apache.dolphinscheduler.remote.utils.FastJsonSerializer;import java.io.Serializable;import java.util.List;import java.util.concurrent.atomic.AtomicLong;/** *  execute task request command */public class ExecuteTaskRequestCommand implements Serializable {    private static final AtomicLong REQUEST = new AtomicLong(1);    /**     *  task id     */    private String taskId;    /**     *  attempt id     */    private String attemptId;    /**     *  application name     */    private String applicationName;    /**     *  group name     */    private String groupName;    /**     *  task name     */    private String taskName;    /**     *  connect port     */    private int connectorPort;    /**     *  description info     */    private String description;    /**     *  class name     */    private String className;    /**     *  method name     */    private String methodName;    /**     *  params     */    private String params;    /**     *  shard items     */    private List<Integer> shardItems;    public List<Integer> getShardItems() {        return shardItems;    }    public void setShardItems(List<Integer> shardItems) {        this.shardItems = shardItems;    }    public String getParams() {        return params;    }    public void setParams(String params) {        this.params = params;    }    public String getTaskId() {        return taskId;    }    public void setTaskId(String taskId) {        this.taskId = taskId;    }    public String getApplicationName() {        return applicationName;    }    public void setApplicationName(String applicationName) {        this.applicationName = applicationName;    }    public String getGroupName() {        return groupName;    }    public void setGroupName(String groupName) {        this.groupName = groupName;    }    public String getTaskName() {        return taskName;    }    public void setTaskName(String taskName) {        this.taskName = taskName;    }    public int getConnectorPort() {        return connectorPort;    }    public void setConnectorPort(int connectorPort) {        this.connectorPort = connectorPort;    }    public String getDescription() {        return description;    }    public void setDescription(String description) {        this.description = description;    }    public String getClassName() {        return className;    }    public void setClassName(String className) {        this.className = className;    }    public String getMethodName() {        return methodName;    }    public void setMethodName(String methodName) {        this.methodName = methodName;    }    /**     *  package request command     *     * @return command     */    public Command convert2Command(){        Command command = new Command(REQUEST.getAndIncrement());        command.setType(CommandType.EXECUTE_TASK_REQUEST);        byte[] body = FastJsonSerializer.serialize(this);        command.setBody(body);        return command;    }}
\ No newline at end of file
+/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *    http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.dolphinscheduler.remote.command;import org.apache.dolphinscheduler.remote.utils.FastJsonSerializer;import java.io.Serializable;import java.util.List;import java.util.concurrent.atomic.AtomicLong;/** *  execute task request command */public class ExecuteTaskRequestCommand implements Serializable {    /**     *  task id     */    private String taskId;    /**     *  attempt id     */    private String attemptId;    /**     *  application name     */    private String applicationName;    /**     *  group name     */    private String groupName;    /**     *  task name     */    private String taskName;    /**     *  connector port     */    private int connectorPort;    /**     *  description info     */    private String description;    /**     *  class name     */    private String className;    /**     *  method name     */    private String methodName;    /**     *  parameters     */    private String params;    /**     *  shard itemds     */    private List<Integer> shardItems;    public List<Integer> getShardItems() {        return shardItems;    }    public void setShardItems(List<Integer> shardItems) {        this.shardItems = shardItems;    }    public String getParams() {        return params;    }    public void setParams(String params) {        this.params = params;    }    public String getTaskId() {        return taskId;    }    public void setTaskId(String taskId) {        this.taskId = taskId;    }    public String getApplicationName() {        return applicationName;    }    public void setApplicationName(String applicationName) {        this.applicationName = applicationName;    }    public String getGroupName() {        return groupName;    }    public void setGroupName(String groupName) {        this.groupName = groupName;    }    public String getTaskName() {        return taskName;    }    public void setTaskName(String taskName) {        this.taskName = taskName;    }    public int getConnectorPort() {        return connectorPort;    }    public void setConnectorPort(int connectorPort) {        this.connectorPort = connectorPort;    }    public String getDescription() {        return description;    }    public void setDescription(String description) {        this.description = description;    }    public String getClassName() {        return className;    }    public void setClassName(String className) {        this.className = className;    }    public String getMethodName() {        return methodName;    }    public void setMethodName(String methodName) {        this.methodName = methodName;    }    /**     *  package request command     *     * @return command     */    public Command convert2Command(){        Command command = new Command();        command.setType(CommandType.EXECUTE_TASK_REQUEST);        byte[] body = FastJsonSerializer.serialize(this);        command.setBody(body);        return command;    }}
\ No newline at end of file

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/ExecuteTaskResponseCommand.java
Patch:
@@ -1 +1 @@
-/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *    http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.dolphinscheduler.remote.command;import org.apache.dolphinscheduler.remote.utils.FastJsonSerializer;import java.io.Serializable;import java.util.concurrent.atomic.AtomicLong;/** * execute taks response command */public class ExecuteTaskResponseCommand implements Serializable {    private static final AtomicLong REQUEST = new AtomicLong(1);    /**     * task id     */    private String taskId;    /**     *  attempt id     */    private String attemptId;    /**     *  result info     */    private Object result;    /**     *  receive time     */    private long receivedTime;    /**     * execute count     */    private int executeCount;    /**     *  execute time     */    private long executeTime;    public String getAttemptId() {        return attemptId;    }    public void setAttemptId(String attemptId) {        this.attemptId = attemptId;    }    public String getTaskId() {        return taskId;    }    public void setTaskId(String taskId) {        this.taskId = taskId;    }    public Object getResult() {        return result;    }    public void setResult(Object result) {        this.result = result;    }    public long getReceivedTime() {        return receivedTime;    }    public void setReceivedTime(long receivedTime) {        this.receivedTime = receivedTime;    }    public int getExecuteCount() {        return executeCount;    }    public void setExecuteCount(int executeCount) {        this.executeCount = executeCount;    }    public long getExecuteTime() {        return executeTime;    }    public void setExecuteTime(long executeTime) {        this.executeTime = executeTime;    }    /**     * package response command     *     * @return command     */    public Command convert2Command(){        Command command = new Command(REQUEST.getAndIncrement());        command.setType(CommandType.EXECUTE_TASK_RESPONSE);        byte[] body = FastJsonSerializer.serialize(this);        command.setBody(body);        return command;    }}
\ No newline at end of file
+/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *    http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.dolphinscheduler.remote.command;import org.apache.dolphinscheduler.remote.utils.FastJsonSerializer;import java.io.Serializable;import java.util.concurrent.atomic.AtomicLong;/** *  execute task response command */public class ExecuteTaskResponseCommand implements Serializable {    /**     *  task id     */    private String taskId;    /**     *  attempt id     */    private String attemptId;    /**     *  return result     */    private Object result;    /**     *  received time     */    private long receivedTime;    /**     *  execute count     */    private int executeCount;    /**     *  execute time     */    private long executeTime;    public String getAttemptId() {        return attemptId;    }    public void setAttemptId(String attemptId) {        this.attemptId = attemptId;    }    public String getTaskId() {        return taskId;    }    public void setTaskId(String taskId) {        this.taskId = taskId;    }    public Object getResult() {        return result;    }    public void setResult(Object result) {        this.result = result;    }    public long getReceivedTime() {        return receivedTime;    }    public void setReceivedTime(long receivedTime) {        this.receivedTime = receivedTime;    }    public int getExecuteCount() {        return executeCount;    }    public void setExecuteCount(int executeCount) {        this.executeCount = executeCount;    }    public long getExecuteTime() {        return executeTime;    }    public void setExecuteTime(long executeTime) {        this.executeTime = executeTime;    }    public Command convert2Command(long opaque){        Command command = new Command();        command.setType(CommandType.EXECUTE_TASK_RESPONSE);        byte[] body = FastJsonSerializer.serialize(this);        command.setBody(body);        return command;    }}
\ No newline at end of file

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/utils/ProcessUtils.java
Patch:
@@ -378,8 +378,8 @@ public static void killYarnJob(TaskInstance taskInstance) {
       LogClientService logClient = null;
       String log = null;
       try {
-        logClient = new LogClientService(taskInstance.getHost(), Constants.RPC_PORT);
-        log = logClient.viewLog(taskInstance.getLogPath());
+        logClient = new LogClientService();
+        log = logClient.viewLog(taskInstance.getHost(), Constants.RPC_PORT, taskInstance.getLogPath());
       } finally {
         if(logClient != null){
           logClient.close();

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProcessInstanceController.java
Patch:
@@ -22,12 +22,12 @@
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.ExecutionStatus;
 import org.apache.dolphinscheduler.common.enums.Flag;
-import org.apache.dolphinscheduler.common.queue.ITaskQueue;
-import org.apache.dolphinscheduler.common.queue.TaskQueueFactory;
 import org.apache.dolphinscheduler.common.utils.ParameterUtils;
 import org.apache.dolphinscheduler.common.utils.StringUtils;
 import org.apache.dolphinscheduler.dao.entity.User;
 import io.swagger.annotations.*;
+import org.apache.dolphinscheduler.service.queue.ITaskQueue;
+import org.apache.dolphinscheduler.service.queue.TaskQueueFactory;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/DataSourceService.java
Patch:
@@ -21,10 +21,9 @@
 import org.apache.dolphinscheduler.api.utils.Result;
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.DbType;
-import org.apache.dolphinscheduler.common.enums.UserType;
-import org.apache.dolphinscheduler.common.job.db.*;
 import org.apache.dolphinscheduler.common.utils.CommonUtils;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
+import org.apache.dolphinscheduler.dao.datasource.*;
 import org.apache.dolphinscheduler.dao.entity.DataSource;
 import org.apache.dolphinscheduler.dao.entity.Resource;
 import org.apache.dolphinscheduler.dao.entity.User;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/TaskInstanceService.java
Patch:
@@ -24,7 +24,6 @@
 import org.apache.dolphinscheduler.common.utils.CollectionUtils;
 import org.apache.dolphinscheduler.common.utils.DateUtils;
 import org.apache.dolphinscheduler.common.utils.StringUtils;
-import org.apache.dolphinscheduler.dao.ProcessDao;
 import org.apache.dolphinscheduler.dao.entity.ProcessInstance;
 import org.apache.dolphinscheduler.dao.entity.Project;
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
@@ -33,6 +32,7 @@
 import org.apache.dolphinscheduler.dao.mapper.TaskInstanceMapper;
 import com.baomidou.mybatisplus.core.metadata.IPage;
 import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
+import org.apache.dolphinscheduler.service.process.ProcessService;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -56,7 +56,7 @@ public class TaskInstanceService extends BaseService {
     ProjectService projectService;
 
     @Autowired
-    ProcessDao processDao;
+    ProcessService processService;
 
     @Autowired
     TaskInstanceMapper taskInstanceMapper;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/utils/FourLetterWordMain.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.dolphinscheduler.api.utils;
 
+
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -91,5 +92,4 @@ public static String send4LetterWord(String host, int port, String cmd, int time
             throw new IOException("Exception while executing four letter word: " + cmd, e);
         }
     }
-
 }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/utils/ZookeeperMonitor.java
Patch:
@@ -18,9 +18,9 @@
 
 import org.apache.dolphinscheduler.common.enums.ZKNodeType;
 import org.apache.dolphinscheduler.common.utils.StringUtils;
-import org.apache.dolphinscheduler.common.zk.AbstractZKClient;
 import org.apache.dolphinscheduler.common.model.Server;
 import org.apache.dolphinscheduler.dao.entity.ZookeeperRecord;
+import org.apache.dolphinscheduler.service.zk.AbstractZKClient;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.stereotype.Component;
@@ -34,7 +34,7 @@
  *	monitor zookeeper info
  */
 @Component
-public class ZookeeperMonitor extends AbstractZKClient{
+public class ZookeeperMonitor extends AbstractZKClient {
 
 	private static final Logger LOG = LoggerFactory.getLogger(ZookeeperMonitor.class);
 

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProcessDefinitionServiceTest.java
Patch:
@@ -28,9 +28,9 @@
 import org.apache.dolphinscheduler.common.utils.DateUtils;
 import org.apache.dolphinscheduler.common.utils.FileUtils;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
-import org.apache.dolphinscheduler.dao.ProcessDao;
 import org.apache.dolphinscheduler.dao.entity.*;
 import org.apache.dolphinscheduler.dao.mapper.*;
+import org.apache.dolphinscheduler.service.process.ProcessService;
 import org.apache.http.entity.ContentType;
 import org.json.JSONException;
 import org.junit.Assert;
@@ -80,7 +80,7 @@ public class ProcessDefinitionServiceTest {
     private WorkerGroupMapper workerGroupMapper;
 
     @Mock
-    private ProcessDao processDao;
+    private ProcessService processService;
 
     private String sqlDependentJson = "{\"globalParams\":[]," +
             "\"tasks\":[{\"type\":\"SQL\",\"id\":\"tasks-27297\",\"name\":\"sql\"," +
@@ -584,7 +584,7 @@ public void testUpdateProcessDefinition () {
 
         Mockito.when(projectMapper.queryByName(projectName)).thenReturn(getProject(projectName));
         Mockito.when(projectService.checkProjectAndAuth(loginUser, project, projectName)).thenReturn(result);
-        Mockito.when(processDao.findProcessDefineById(1)).thenReturn(getProcessDefinition());
+        Mockito.when(processService.findProcessDefineById(1)).thenReturn(getProcessDefinition());
 
         Map<String, Object> updateResult = processDefinitionService.updateProcessDefinition(loginUser, projectName, 1, "test",
                 sqlDependentJson, "", "", "");

File: dolphinscheduler-common/src/test/java/org/apache/dolphinscheduler/common/utils/OSUtilsTest.java
Patch:
@@ -19,7 +19,6 @@
 import org.apache.commons.configuration.Configuration;
 import org.apache.commons.configuration.PropertiesConfiguration;
 import org.apache.dolphinscheduler.common.Constants;
-import org.apache.yetus.audience.InterfaceAudience;
 import org.junit.Assert;
 import org.junit.Test;
 import org.slf4j.Logger;

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/datasource/BaseDataSource.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.common.job.db;
+package org.apache.dolphinscheduler.dao.datasource;
 
 /**
  * data source base class

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/datasource/ClickHouseDataSource.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.common.job.db;
+package org.apache.dolphinscheduler.dao.datasource;
 
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.utils.StringUtils;

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/datasource/DB2ServerDataSource.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.common.job.db;
+package org.apache.dolphinscheduler.dao.datasource;
 
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.utils.StringUtils;

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/datasource/DataSourceFactory.java
Patch:
@@ -14,11 +14,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.common.job.db;
+package org.apache.dolphinscheduler.dao.datasource;
 
+import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.DbType;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
-import org.apache.dolphinscheduler.common.Constants;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/datasource/MySQLDataSource.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.common.job.db;
+package org.apache.dolphinscheduler.dao.datasource;
 
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.utils.StringUtils;

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/datasource/OracleDataSource.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.common.job.db;
+package org.apache.dolphinscheduler.dao.datasource;
 
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.utils.StringUtils;

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/datasource/PostgreDataSource.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.common.job.db;
+package org.apache.dolphinscheduler.dao.datasource;
 
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.utils.StringUtils;

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/datasource/SQLServerDataSource.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.common.job.db;
+package org.apache.dolphinscheduler.dao.datasource;
 
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.utils.StringUtils;

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/datasource/SparkDataSource.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.common.job.db;
+package org.apache.dolphinscheduler.dao.datasource;
 
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.utils.StringUtils;

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/CommandType.java
Patch:
@@ -0,0 +1 @@
+/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *    http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.dolphinscheduler.remote.command;public enum CommandType {    /**     *  roll view log request     */    ROLL_VIEW_LOG_REQUEST,    /**     *  roll view log response     */    ROLL_VIEW_LOG_RESPONSE,    /**     * view whole log request     */    VIEW_WHOLE_LOG_REQUEST,    /**     * view whole log response     */    VIEW_WHOLE_LOG_RESPONSE,    /**     * get log bytes request     */    GET_LOG_BYTES_REQUEST,    /**     * get log bytes response     */    GET_LOG_BYTES_RESPONSE,    WORKER_REQUEST,    MASTER_RESPONSE,    /**     * execute task request     */    EXECUTE_TASK_REQUEST,    /**     * execute task response     */    EXECUTE_TASK_RESPONSE,    /**     *  ping     */    PING,    /**     *  pong     */    PONG;}
\ No newline at end of file

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/ExecuteTaskRequestCommand.java
Patch:
@@ -0,0 +1 @@
+/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *    http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.dolphinscheduler.remote.command;import org.apache.dolphinscheduler.remote.utils.FastJsonSerializer;import java.io.Serializable;import java.util.List;import java.util.concurrent.atomic.AtomicLong;/** *  execute task request command */public class ExecuteTaskRequestCommand implements Serializable {    private static final AtomicLong REQUEST = new AtomicLong(1);    /**     *  task id     */    private String taskId;    /**     *  attempt id     */    private String attemptId;    /**     *  application name     */    private String applicationName;    /**     *  group name     */    private String groupName;    /**     *  task name     */    private String taskName;    /**     *  connect port     */    private int connectorPort;    /**     *  description info     */    private String description;    /**     *  class name     */    private String className;    /**     *  method name     */    private String methodName;    /**     *  params     */    private String params;    /**     *  shard items     */    private List<Integer> shardItems;    public List<Integer> getShardItems() {        return shardItems;    }    public void setShardItems(List<Integer> shardItems) {        this.shardItems = shardItems;    }    public String getParams() {        return params;    }    public void setParams(String params) {        this.params = params;    }    public String getTaskId() {        return taskId;    }    public void setTaskId(String taskId) {        this.taskId = taskId;    }    public String getApplicationName() {        return applicationName;    }    public void setApplicationName(String applicationName) {        this.applicationName = applicationName;    }    public String getGroupName() {        return groupName;    }    public void setGroupName(String groupName) {        this.groupName = groupName;    }    public String getTaskName() {        return taskName;    }    public void setTaskName(String taskName) {        this.taskName = taskName;    }    public int getConnectorPort() {        return connectorPort;    }    public void setConnectorPort(int connectorPort) {        this.connectorPort = connectorPort;    }    public String getDescription() {        return description;    }    public void setDescription(String description) {        this.description = description;    }    public String getClassName() {        return className;    }    public void setClassName(String className) {        this.className = className;    }    public String getMethodName() {        return methodName;    }    public void setMethodName(String methodName) {        this.methodName = methodName;    }    /**     *  package request command     *     * @return command     */    public Command convert2Command(){        Command command = new Command(REQUEST.getAndIncrement());        command.setType(CommandType.EXECUTE_TASK_REQUEST);        byte[] body = FastJsonSerializer.serialize(this);        command.setBody(body);        return command;    }}
\ No newline at end of file

File: dolphinscheduler-remote/src/main/java/org/apache/dolphinscheduler/remote/command/ExecuteTaskResponseCommand.java
Patch:
@@ -0,0 +1 @@
+/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *    http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.dolphinscheduler.remote.command;import org.apache.dolphinscheduler.remote.utils.FastJsonSerializer;import java.io.Serializable;import java.util.concurrent.atomic.AtomicLong;/** * execute taks response command */public class ExecuteTaskResponseCommand implements Serializable {    private static final AtomicLong REQUEST = new AtomicLong(1);    /**     * task id     */    private String taskId;    /**     *  attempt id     */    private String attemptId;    /**     *  result info     */    private Object result;    /**     *  receive time     */    private long receivedTime;    /**     * execute count     */    private int executeCount;    /**     *  execute time     */    private long executeTime;    public String getAttemptId() {        return attemptId;    }    public void setAttemptId(String attemptId) {        this.attemptId = attemptId;    }    public String getTaskId() {        return taskId;    }    public void setTaskId(String taskId) {        this.taskId = taskId;    }    public Object getResult() {        return result;    }    public void setResult(Object result) {        this.result = result;    }    public long getReceivedTime() {        return receivedTime;    }    public void setReceivedTime(long receivedTime) {        this.receivedTime = receivedTime;    }    public int getExecuteCount() {        return executeCount;    }    public void setExecuteCount(int executeCount) {        this.executeCount = executeCount;    }    public long getExecuteTime() {        return executeTime;    }    public void setExecuteTime(long executeTime) {        this.executeTime = executeTime;    }    /**     * package response command     *     * @return command     */    public Command convert2Command(){        Command command = new Command(REQUEST.getAndIncrement());        command.setType(CommandType.EXECUTE_TASK_RESPONSE);        byte[] body = FastJsonSerializer.serialize(this);        command.setBody(body);        return command;    }}
\ No newline at end of file

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/monitor/ZKMonitorImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.dolphinscheduler.server.monitor;
 
-import org.apache.dolphinscheduler.common.zk.ZookeeperOperator;
+import org.apache.dolphinscheduler.service.zk.ZookeeperOperator;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Component;
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/utils/RemoveZKNode.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.dolphinscheduler.server.utils;
 
-import org.apache.dolphinscheduler.common.zk.ZookeeperOperator;
+import org.apache.dolphinscheduler.service.zk.ZookeeperOperator;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/flink/FlinkTask.java
Patch:
@@ -68,7 +68,7 @@ public void init() {
     if (StringUtils.isNotEmpty(flinkParameters.getMainArgs())) {
       String args = flinkParameters.getMainArgs();
       // get process instance by task instance id
-      ProcessInstance processInstance = processDao.findProcessInstanceByTaskId(taskProps.getTaskInstId());
+      ProcessInstance processInstance = processService.findProcessInstanceByTaskId(taskProps.getTaskInstId());
 
       /**
        *  combining local and global parameters

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/zk/ZKWorkerClient.java
Patch:
@@ -19,9 +19,9 @@
 import org.apache.curator.framework.recipes.cache.TreeCacheEvent;
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.ZKNodeType;
-import org.apache.dolphinscheduler.common.zk.AbstractZKClient;
 import org.apache.commons.lang.StringUtils;
 import org.apache.curator.framework.CuratorFramework;
+import org.apache.dolphinscheduler.service.zk.AbstractZKClient;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.stereotype.Component;

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/bean/SpringApplicationContext.java
Patch:
@@ -14,14 +14,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.common.utils;
+package org.apache.dolphinscheduler.service.bean;
 
 import org.springframework.beans.BeansException;
 import org.springframework.context.ApplicationContext;
 import org.springframework.context.ApplicationContextAware;
 import org.springframework.stereotype.Component;
 
-
 @Component
 public class SpringApplicationContext implements ApplicationContextAware {
 

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/quartz/DruidConnectionProvider.java
Patch:
@@ -14,11 +14,12 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.dao.quartz;
+package org.apache.dolphinscheduler.service.quartz;
 
 import com.alibaba.druid.pool.DruidDataSource;
 import org.quartz.SchedulerException;
 import org.quartz.utils.ConnectionProvider;
+
 import java.sql.Connection;
 import java.sql.SQLException;
 

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/quartz/QuartzExecutors.java
Patch:
@@ -14,12 +14,12 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.dao.quartz;
+package org.apache.dolphinscheduler.service.quartz;
 
+import org.apache.commons.lang.StringUtils;
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
 import org.apache.dolphinscheduler.dao.entity.Schedule;
-import org.apache.commons.lang.StringUtils;
 import org.quartz.*;
 import org.quartz.impl.StdSchedulerFactory;
 import org.quartz.impl.matchers.GroupMatcher;

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/quartz/cron/AbstractCycle.java
Patch:
@@ -14,13 +14,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.dao.utils.cron;
+package org.apache.dolphinscheduler.service.quartz.cron;
 
-import org.apache.dolphinscheduler.common.enums.CycleEnum;
 import com.cronutils.model.Cron;
 import com.cronutils.model.field.CronField;
 import com.cronutils.model.field.CronFieldName;
 import com.cronutils.model.field.expression.*;
+import org.apache.dolphinscheduler.common.enums.CycleEnum;
 
 /**
  * Cycle

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/quartz/cron/CycleFactory.java
Patch:
@@ -14,12 +14,12 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.dao.utils.cron;
+package org.apache.dolphinscheduler.service.quartz.cron;
 
-import org.apache.dolphinscheduler.common.enums.CycleEnum;
 import com.cronutils.model.Cron;
 import com.cronutils.model.field.expression.Always;
 import com.cronutils.model.field.expression.QuestionMark;
+import org.apache.dolphinscheduler.common.enums.CycleEnum;
 
 /**
  * Crontab Cycle Tool Factory

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/quartz/cron/CycleLinks.java
Patch:
@@ -14,10 +14,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.dao.utils.cron;
+package org.apache.dolphinscheduler.service.quartz.cron;
 
-import org.apache.dolphinscheduler.common.enums.CycleEnum;
 import com.cronutils.model.Cron;
+import org.apache.dolphinscheduler.common.enums.CycleEnum;
 
 import java.util.ArrayList;
 import java.util.List;

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/queue/ITaskQueue.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.common.queue;
+package org.apache.dolphinscheduler.service.queue;
 
 import java.util.List;
 import java.util.Set;

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/queue/TaskQueueFactory.java
Patch:
@@ -14,11 +14,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.common.queue;
+package org.apache.dolphinscheduler.service.queue;
 
-import org.apache.dolphinscheduler.common.utils.CommonUtils;
 import org.apache.commons.lang.StringUtils;
-import org.apache.dolphinscheduler.common.utils.SpringApplicationContext;
+import org.apache.dolphinscheduler.common.utils.CommonUtils;
+import org.apache.dolphinscheduler.service.bean.SpringApplicationContext;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/queue/TaskQueueZkImpl.java
Patch:
@@ -14,13 +14,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.common.queue;
+package org.apache.dolphinscheduler.service.queue;
 
 
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.utils.IpUtils;
 import org.apache.dolphinscheduler.common.utils.OSUtils;
-import org.apache.dolphinscheduler.common.zk.ZookeeperOperator;
+import org.apache.dolphinscheduler.service.zk.ZookeeperOperator;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/zk/AbstractZKClient.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.common.zk;
+package org.apache.dolphinscheduler.service.zk;
 
 import org.apache.curator.framework.CuratorFramework;
 import org.apache.curator.framework.imps.CuratorFrameworkState;
@@ -31,12 +31,13 @@
 import org.slf4j.LoggerFactory;
 
 import java.util.*;
+
 import static org.apache.dolphinscheduler.common.Constants.*;
 
 /**
  * abstract zookeeper client
  */
-public abstract class AbstractZKClient extends ZookeeperCachedOperator{
+public abstract class AbstractZKClient extends ZookeeperCachedOperator {
 
 	private static final Logger logger = LoggerFactory.getLogger(AbstractZKClient.class);
 

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/zk/DefaultEnsembleProvider.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.common.zk;
+package org.apache.dolphinscheduler.service.zk;
 
 import org.apache.curator.ensemble.EnsembleProvider;
 

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/zk/ZookeeperConfig.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.common.zk;
+package org.apache.dolphinscheduler.service.zk;
 
 import org.springframework.beans.factory.annotation.Value;
 import org.springframework.context.annotation.PropertySource;

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/zk/ZookeeperOperator.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.common.zk;
+package org.apache.dolphinscheduler.service.zk;
 
 import org.apache.commons.lang.StringUtils;
 import org.apache.curator.framework.CuratorFramework;
@@ -33,12 +33,10 @@
 import org.springframework.beans.factory.InitializingBean;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Component;
-import org.springframework.util.CollectionUtils;
 
 import java.nio.charset.StandardCharsets;
 import java.util.List;
 
-import static org.apache.dolphinscheduler.common.utils.Preconditions.*;
 import static org.apache.dolphinscheduler.common.utils.Preconditions.checkNotNull;
 
 /**

File: dolphinscheduler-service/src/test/java/queue/BaseTaskQueueTest.java
Patch:
@@ -14,9 +14,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.common.queue;
+package queue;
 
-import org.apache.dolphinscheduler.common.zk.ZKServer;
+import org.apache.dolphinscheduler.service.queue.ITaskQueue;
+import org.apache.dolphinscheduler.service.queue.TaskQueueFactory;
 import org.junit.*;
 
 /**

File: dolphinscheduler-service/src/test/java/queue/TaskQueueZKImplTest.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.common.queue;
+package queue;
 
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.utils.IpUtils;

File: dolphinscheduler-service/src/test/java/queue/ZKServer.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.common.zk;
+package queue;
 
 import org.apache.curator.framework.CuratorFramework;
 import org.apache.curator.framework.CuratorFrameworkFactory;

File: dolphinscheduler-service/src/test/java/utils/PreconditionsTest.java
Patch:
@@ -14,8 +14,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.common.utils;
+package utils;
 
+import org.apache.dolphinscheduler.common.utils.Preconditions;
 import org.junit.Assert;
 import org.junit.Test;
 import org.slf4j.Logger;
@@ -35,7 +36,7 @@ public class PreconditionsTest {
     public void testCheckNotNull() throws Exception {
         String testReference = "test reference";
         //test  reference is not null
-        Assert.assertEquals(testReference,Preconditions.checkNotNull(testReference));
+        Assert.assertEquals(testReference, Preconditions.checkNotNull(testReference));
         Assert.assertEquals(testReference,Preconditions.checkNotNull(testReference,"reference is null"));
         Assert.assertEquals(testReference,Preconditions.checkNotNull(testReference,"%s is null",testReference));
 

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProcessDefinitionServiceTest.java
Patch:
@@ -27,7 +27,6 @@
 import org.apache.dolphinscheduler.common.utils.DateUtils;
 import org.apache.dolphinscheduler.common.utils.FileUtils;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
-import org.apache.dolphinscheduler.dao.ProcessDao;
 import org.apache.dolphinscheduler.dao.entity.*;
 import org.apache.dolphinscheduler.dao.mapper.*;
 import org.apache.dolphinscheduler.service.process.ProcessService;

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/log/LogClientService.java
Patch:
@@ -64,11 +64,11 @@ public LogClientService(String host, int port) {
     }
 
     /**
-     * shutdown
+     * close
      */
-    public void shutdown()  {
+    public void close()  {
         this.client.close();
-        logger.info("logger client shutdown");
+        logger.info("logger client closed");
     }
 
     /**

File: dolphinscheduler-alert/src/main/java/org/apache/dolphinscheduler/alert/utils/Constants.java
Patch:
@@ -20,7 +20,9 @@
  * constants
  */
 public class Constants {
-
+    private Constants() {
+        throw new IllegalStateException("Constants class");
+    }
     /**
      * alert properties path
      */

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ResourcesService.java
Patch:
@@ -119,7 +119,7 @@ public Result createResource(User loginUser,
             putMsg(result, Status.UDF_RESOURCE_SUFFIX_NOT_JAR);
             return result;
         }
-        if (file.getSize() > Constants.maxFileSize) {
+        if (file.getSize() > Constants.MAX_FILE_SIZE) {
             logger.error("file size is too large: {}", file.getOriginalFilename());
             putMsg(result, Status.RESOURCE_SIZE_EXCEED_LIMIT);
             return result;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/utils/CheckUtils.java
Patch:
@@ -35,7 +35,9 @@
  */
 public class CheckUtils {
 
-
+  private CheckUtils() {
+    throw new IllegalStateException("CheckUtils class");
+  }
   /**
    * check username
    *

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/job/db/ClickHouseDataSource.java
Patch:
@@ -38,7 +38,7 @@ public class ClickHouseDataSource extends BaseDataSource {
     @Override
     public String getJdbcUrl() {
         String jdbcUrl = getAddress();
-        if (jdbcUrl.lastIndexOf("/") != (jdbcUrl.length() - 1)) {
+        if (jdbcUrl.lastIndexOf('/') != (jdbcUrl.length() - 1)) {
             jdbcUrl += "/";
         }
 

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/task/subprocess/SubProcessParameters.java
Patch:
@@ -38,7 +38,7 @@ public Integer getProcessDefinitionId(){
 
     @Override
     public boolean checkParameters() {
-        return this.processDefinitionId != 0;
+        return this.processDefinitionId != null && this.processDefinitionId != 0;
     }
 
     @Override

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/utils/cron/CycleFactory.java
Patch:
@@ -25,7 +25,9 @@
  * Crontab Cycle Tool Factory
  */
 public class CycleFactory {
-
+    private CycleFactory() {
+        throw new IllegalStateException("CycleFactory class");
+    }
     /**
      * min
      * @param cron cron

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/ConnectionFactoryTest.java
Patch:
@@ -32,6 +32,6 @@ public class ConnectionFactoryTest {
     @Test
     public void testConnection()throws Exception{
         Connection connection = ConnectionFactory.getDataSource().getPooledConnection().getConnection();
-        Assert.assertEquals(connection != null , true);
+        Assert.assertTrue(connection != null);
     }
 }
\ No newline at end of file

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/MasterServer.java
Patch:
@@ -111,7 +111,7 @@ public void run(){
 
         masterSchedulerService = ThreadUtils.newDaemonSingleThreadExecutor("Master-Scheduler-Thread");
 
-        heartbeatMasterService = ThreadUtils.newDaemonThreadScheduledExecutor("Master-Main-Thread",Constants.defaulMasterHeartbeatThreadNum);
+        heartbeatMasterService = ThreadUtils.newDaemonThreadScheduledExecutor("Master-Main-Thread",Constants.DEFAULT_MASTER_HEARTBEAT_THREAD_NUM);
 
         // heartbeat thread implement
         Runnable heartBeatThread = heartBeatThread();

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/utils/FlinkArgsUtils.java
Patch:
@@ -87,7 +87,7 @@ public static List<String> buildArgs(FlinkParameters param) {
                 args.add(taskManagerMemory);
             }
 
-            args.add(Constants.FLINK_detach); //-d
+            args.add(Constants.FLINK_DETACH); //-d
 
         }
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/WorkerServer.java
Patch:
@@ -149,7 +149,7 @@ public void run(){
 
         this.fetchTaskExecutorService = ThreadUtils.newDaemonSingleThreadExecutor("Worker-Fetch-Thread-Executor");
 
-        heartbeatWorkerService = ThreadUtils.newDaemonThreadScheduledExecutor("Worker-Heartbeat-Thread-Executor", Constants.defaulWorkerHeartbeatThreadNum);
+        heartbeatWorkerService = ThreadUtils.newDaemonThreadScheduledExecutor("Worker-Heartbeat-Thread-Executor", Constants.DEFAUL_WORKER_HEARTBEAT_THREAD_NUM);
 
         // heartbeat thread implement
         Runnable heartBeatThread = heartBeatThread();

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/AbstractCommandExecutor.java
Patch:
@@ -535,7 +535,7 @@ private long flush(long lastFlushTime) {
         /**
          * when log buffer siz or flush time reach condition , then flush
          */
-        if (logBuffer.size() >= Constants.defaultLogRowsNum  || now - lastFlushTime > Constants.defaultLogFlushInterval) {
+        if (logBuffer.size() >= Constants.DEFAULT_LOG_ROWS_NUM || now - lastFlushTime > Constants.DEFAULT_LOG_FLUSH_INTERVAL) {
             lastFlushTime = now;
             /** log handle */
             logHandler.accept(logBuffer);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/DataSourceService.java
Patch:
@@ -21,10 +21,9 @@
 import org.apache.dolphinscheduler.api.utils.Result;
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.DbType;
-import org.apache.dolphinscheduler.common.enums.UserType;
-import org.apache.dolphinscheduler.common.job.db.*;
 import org.apache.dolphinscheduler.common.utils.CommonUtils;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
+import org.apache.dolphinscheduler.dao.datasource.*;
 import org.apache.dolphinscheduler.dao.entity.DataSource;
 import org.apache.dolphinscheduler.dao.entity.Resource;
 import org.apache.dolphinscheduler.dao.entity.User;

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/datasource/BaseDataSource.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.common.job.db;
+package org.apache.dolphinscheduler.dao.datasource;
 
 /**
  * data source base class

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/datasource/ClickHouseDataSource.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.common.job.db;
+package org.apache.dolphinscheduler.dao.datasource;
 
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.utils.StringUtils;

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/datasource/DB2ServerDataSource.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.common.job.db;
+package org.apache.dolphinscheduler.dao.datasource;
 
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.utils.StringUtils;

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/datasource/DataSourceFactory.java
Patch:
@@ -14,11 +14,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.common.job.db;
+package org.apache.dolphinscheduler.dao.datasource;
 
+import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.DbType;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
-import org.apache.dolphinscheduler.common.Constants;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/datasource/MySQLDataSource.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.common.job.db;
+package org.apache.dolphinscheduler.dao.datasource;
 
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.utils.StringUtils;

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/datasource/OracleDataSource.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.common.job.db;
+package org.apache.dolphinscheduler.dao.datasource;
 
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.utils.StringUtils;

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/datasource/PostgreDataSource.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.common.job.db;
+package org.apache.dolphinscheduler.dao.datasource;
 
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.utils.StringUtils;

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/datasource/SQLServerDataSource.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.common.job.db;
+package org.apache.dolphinscheduler.dao.datasource;
 
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.utils.StringUtils;

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/datasource/SparkDataSource.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.common.job.db;
+package org.apache.dolphinscheduler.dao.datasource;
 
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.utils.StringUtils;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/datax/DataxTask.java
Patch:
@@ -39,14 +39,14 @@
 import org.apache.commons.io.FileUtils;
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.DbType;
-import org.apache.dolphinscheduler.common.job.db.BaseDataSource;
-import org.apache.dolphinscheduler.common.job.db.DataSourceFactory;
 import org.apache.dolphinscheduler.common.process.Property;
 import org.apache.dolphinscheduler.common.task.AbstractParameters;
 import org.apache.dolphinscheduler.common.task.datax.DataxParameters;
 import org.apache.dolphinscheduler.common.utils.CollectionUtils;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
 import org.apache.dolphinscheduler.common.utils.ParameterUtils;
+import org.apache.dolphinscheduler.dao.datasource.BaseDataSource;
+import org.apache.dolphinscheduler.dao.datasource.DataSourceFactory;
 import org.apache.dolphinscheduler.dao.entity.DataSource;
 import org.apache.dolphinscheduler.dao.entity.ProcessInstance;
 import org.apache.dolphinscheduler.server.utils.DataxUtils;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/processdure/ProcedureTask.java
Patch:
@@ -22,13 +22,13 @@
 import org.apache.dolphinscheduler.common.enums.DataType;
 import org.apache.dolphinscheduler.common.enums.Direct;
 import org.apache.dolphinscheduler.common.enums.TaskTimeoutStrategy;
-import org.apache.dolphinscheduler.common.job.db.BaseDataSource;
-import org.apache.dolphinscheduler.common.job.db.DataSourceFactory;
 import org.apache.dolphinscheduler.common.process.Property;
 import org.apache.dolphinscheduler.common.task.AbstractParameters;
 import org.apache.dolphinscheduler.common.task.procedure.ProcedureParameters;
 import org.apache.dolphinscheduler.common.utils.CollectionUtils;
 import org.apache.dolphinscheduler.common.utils.ParameterUtils;
+import org.apache.dolphinscheduler.dao.datasource.BaseDataSource;
+import org.apache.dolphinscheduler.dao.datasource.DataSourceFactory;
 import org.apache.dolphinscheduler.dao.entity.DataSource;
 import org.apache.dolphinscheduler.server.utils.ParamUtils;
 import org.apache.dolphinscheduler.server.worker.task.AbstractTask;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/sql/SqlTask.java
Patch:
@@ -27,15 +27,15 @@
 import org.apache.dolphinscheduler.common.enums.ShowType;
 import org.apache.dolphinscheduler.common.enums.TaskTimeoutStrategy;
 import org.apache.dolphinscheduler.common.enums.UdfType;
-import org.apache.dolphinscheduler.common.job.db.BaseDataSource;
-import org.apache.dolphinscheduler.common.job.db.DataSourceFactory;
 import org.apache.dolphinscheduler.common.process.Property;
 import org.apache.dolphinscheduler.common.task.AbstractParameters;
 import org.apache.dolphinscheduler.common.task.sql.SqlBinds;
 import org.apache.dolphinscheduler.common.task.sql.SqlParameters;
 import org.apache.dolphinscheduler.common.task.sql.SqlType;
 import org.apache.dolphinscheduler.common.utils.*;
 import org.apache.dolphinscheduler.dao.AlertDao;
+import org.apache.dolphinscheduler.dao.datasource.BaseDataSource;
+import org.apache.dolphinscheduler.dao.datasource.DataSourceFactory;
 import org.apache.dolphinscheduler.dao.entity.DataSource;
 import org.apache.dolphinscheduler.dao.entity.ProcessInstance;
 import org.apache.dolphinscheduler.dao.entity.UdfFunc;

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/worker/task/datax/DataxTaskTest.java
Patch:
@@ -25,8 +25,8 @@
 import com.alibaba.fastjson.JSONObject;
 import org.apache.dolphinscheduler.common.enums.CommandType;
 import org.apache.dolphinscheduler.common.enums.DbType;
-import org.apache.dolphinscheduler.common.job.db.BaseDataSource;
-import org.apache.dolphinscheduler.common.job.db.DataSourceFactory;
+import org.apache.dolphinscheduler.dao.datasource.BaseDataSource;
+import org.apache.dolphinscheduler.dao.datasource.DataSourceFactory;
 import org.apache.dolphinscheduler.dao.entity.DataSource;
 import org.apache.dolphinscheduler.dao.entity.ProcessInstance;
 import org.apache.dolphinscheduler.server.utils.DataxUtils;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ResourcesService.java
Patch:
@@ -539,7 +539,7 @@ public Result readResource(int resourceId, int skipLineNum, int limit) {
                 putMsg(result, Status.SUCCESS);
                 Map<String, Object> map = new HashMap<>();
                 map.put(ALIAS, resource.getAlias());
-                map.put(CONTENT, StringUtils.join(content, "\n"));
+                map.put(CONTENT, String.join("\n", content));
                 result.setData(map);
             }else{
                 logger.error("read file {} not exist in hdfs", hdfsFileName);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/TaskInstanceService.java
Patch:
@@ -24,7 +24,6 @@
 import org.apache.dolphinscheduler.common.utils.CollectionUtils;
 import org.apache.dolphinscheduler.common.utils.DateUtils;
 import org.apache.dolphinscheduler.common.utils.StringUtils;
-import org.apache.dolphinscheduler.dao.ProcessDao;
 import org.apache.dolphinscheduler.dao.entity.ProcessInstance;
 import org.apache.dolphinscheduler.dao.entity.Project;
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
@@ -33,6 +32,7 @@
 import org.apache.dolphinscheduler.dao.mapper.TaskInstanceMapper;
 import com.baomidou.mybatisplus.core.metadata.IPage;
 import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
+import org.apache.dolphinscheduler.service.process.ProcessService;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -56,7 +56,7 @@ public class TaskInstanceService extends BaseService {
     ProjectService projectService;
 
     @Autowired
-    ProcessDao processDao;
+    ProcessService processService;
 
     @Autowired
     TaskInstanceMapper taskInstanceMapper;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/utils/ZookeeperMonitor.java
Patch:
@@ -18,9 +18,9 @@
 
 import org.apache.dolphinscheduler.common.enums.ZKNodeType;
 import org.apache.dolphinscheduler.common.utils.StringUtils;
-import org.apache.dolphinscheduler.common.zk.AbstractZKClient;
 import org.apache.dolphinscheduler.common.model.Server;
 import org.apache.dolphinscheduler.dao.entity.ZookeeperRecord;
+import org.apache.dolphinscheduler.service.zk.AbstractZKClient;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.stereotype.Component;
@@ -34,7 +34,7 @@
  *	monitor zookeeper info
  */
 @Component
-public class ZookeeperMonitor extends AbstractZKClient{
+public class ZookeeperMonitor extends AbstractZKClient {
 
 	private static final Logger LOG = LoggerFactory.getLogger(ZookeeperMonitor.class);
 

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/ScriptRunner.java
Patch:
@@ -169,13 +169,13 @@ private void runScript(Connection conn, Reader reader) throws IOException, SQLEx
                             if (stopOnError && rs != null) {
                                 ResultSetMetaData md = rs.getMetaData();
                                 int cols = md.getColumnCount();
-                                for (int i = 0; i < cols; i++) {
+                                for (int i = 1; i < cols; i++) {
                                     String name = md.getColumnLabel(i);
                                     logger.info("{} \t", name);
                                 }
                                 logger.info("");
                                 while (rs.next()) {
-                                    for (int i = 0; i < cols; i++) {
+                                    for (int i = 1; i < cols; i++) {
                                         String value = rs.getString(i);
                                         logger.info("{} \t", value);
                                     }

File: dolphinscheduler-common/src/test/java/org/apache/dolphinscheduler/common/utils/ScriptRunnerTest.java
Patch:
@@ -48,15 +48,15 @@ private void runScript(String dbName) {
             Mockito.when(st.getResultSet()).thenReturn(rs);
             ResultSetMetaData md = Mockito.mock(ResultSetMetaData.class);
             Mockito.when(rs.getMetaData()).thenReturn(md);
-            Mockito.when(md.getColumnCount()).thenReturn(1);
+            Mockito.when(md.getColumnCount()).thenReturn(2);
             Mockito.when(rs.next()).thenReturn(true, false);
             ScriptRunner s = new ScriptRunner(conn, true, true);
             if (dbName.isEmpty()) {
                 s.runScript(new StringReader("select 1;"));
             } else {
                 s.runScript(new StringReader("select 1;"), dbName);
             }
-            Mockito.verify(md).getColumnLabel(0);
+            Mockito.verify(md).getColumnLabel(1);
         } catch(Exception e) {
             Assert.assertNotNull(e);
         }

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/monitor/ZKMonitorImpl.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.dolphinscheduler.server.monitor;
 
-import org.apache.dolphinscheduler.common.zk.ZookeeperOperator;
+import org.apache.dolphinscheduler.service.zk.ZookeeperOperator;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Component;
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/utils/RemoveZKNode.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.dolphinscheduler.server.utils;
 
-import org.apache.dolphinscheduler.common.zk.ZookeeperOperator;
+import org.apache.dolphinscheduler.service.zk.ZookeeperOperator;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/flink/FlinkTask.java
Patch:
@@ -68,7 +68,7 @@ public void init() {
     if (StringUtils.isNotEmpty(flinkParameters.getMainArgs())) {
       String args = flinkParameters.getMainArgs();
       // get process instance by task instance id
-      ProcessInstance processInstance = processDao.findProcessInstanceByTaskId(taskProps.getTaskInstId());
+      ProcessInstance processInstance = processService.findProcessInstanceByTaskId(taskProps.getTaskInstId());
 
       /**
        *  combining local and global parameters

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/zk/ZKWorkerClient.java
Patch:
@@ -19,9 +19,9 @@
 import org.apache.curator.framework.recipes.cache.TreeCacheEvent;
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.ZKNodeType;
-import org.apache.dolphinscheduler.common.zk.AbstractZKClient;
 import org.apache.commons.lang.StringUtils;
 import org.apache.curator.framework.CuratorFramework;
+import org.apache.dolphinscheduler.service.zk.AbstractZKClient;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.stereotype.Component;

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/quartz/DruidConnectionProvider.java
Patch:
@@ -14,11 +14,12 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.dao.quartz;
+package org.apache.dolphinscheduler.service.quartz;
 
 import com.alibaba.druid.pool.DruidDataSource;
 import org.quartz.SchedulerException;
 import org.quartz.utils.ConnectionProvider;
+
 import java.sql.Connection;
 import java.sql.SQLException;
 

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/quartz/QuartzExecutors.java
Patch:
@@ -14,12 +14,12 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.dao.quartz;
+package org.apache.dolphinscheduler.service.quartz;
 
+import org.apache.commons.lang.StringUtils;
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
 import org.apache.dolphinscheduler.dao.entity.Schedule;
-import org.apache.commons.lang.StringUtils;
 import org.quartz.*;
 import org.quartz.impl.StdSchedulerFactory;
 import org.quartz.impl.matchers.GroupMatcher;

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/quartz/cron/AbstractCycle.java
Patch:
@@ -14,13 +14,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.dao.utils.cron;
+package org.apache.dolphinscheduler.service.quartz.cron;
 
-import org.apache.dolphinscheduler.common.enums.CycleEnum;
 import com.cronutils.model.Cron;
 import com.cronutils.model.field.CronField;
 import com.cronutils.model.field.CronFieldName;
 import com.cronutils.model.field.expression.*;
+import org.apache.dolphinscheduler.common.enums.CycleEnum;
 
 /**
  * Cycle

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/quartz/cron/CycleFactory.java
Patch:
@@ -14,12 +14,12 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.dao.utils.cron;
+package org.apache.dolphinscheduler.service.quartz.cron;
 
-import org.apache.dolphinscheduler.common.enums.CycleEnum;
 import com.cronutils.model.Cron;
 import com.cronutils.model.field.expression.Always;
 import com.cronutils.model.field.expression.QuestionMark;
+import org.apache.dolphinscheduler.common.enums.CycleEnum;
 
 /**
  * Crontab Cycle Tool Factory

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/quartz/cron/CycleLinks.java
Patch:
@@ -14,10 +14,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.dao.utils.cron;
+package org.apache.dolphinscheduler.service.quartz.cron;
 
-import org.apache.dolphinscheduler.common.enums.CycleEnum;
 import com.cronutils.model.Cron;
+import org.apache.dolphinscheduler.common.enums.CycleEnum;
 
 import java.util.ArrayList;
 import java.util.List;

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/queue/ITaskQueue.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.common.queue;
+package org.apache.dolphinscheduler.service.queue;
 
 import java.util.List;
 import java.util.Set;

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/queue/TaskQueueFactory.java
Patch:
@@ -14,10 +14,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.common.queue;
+package org.apache.dolphinscheduler.service.queue;
 
-import org.apache.dolphinscheduler.common.utils.CommonUtils;
 import org.apache.commons.lang.StringUtils;
+import org.apache.dolphinscheduler.common.utils.CommonUtils;
 import org.apache.dolphinscheduler.common.utils.SpringApplicationContext;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/queue/TaskQueueZkImpl.java
Patch:
@@ -14,13 +14,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.common.queue;
+package org.apache.dolphinscheduler.service.queue;
 
 
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.utils.IpUtils;
 import org.apache.dolphinscheduler.common.utils.OSUtils;
-import org.apache.dolphinscheduler.common.zk.ZookeeperOperator;
+import org.apache.dolphinscheduler.service.zk.ZookeeperOperator;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/zk/AbstractZKClient.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.common.zk;
+package org.apache.dolphinscheduler.service.zk;
 
 import org.apache.curator.framework.CuratorFramework;
 import org.apache.curator.framework.imps.CuratorFrameworkState;
@@ -31,12 +31,13 @@
 import org.slf4j.LoggerFactory;
 
 import java.util.*;
+
 import static org.apache.dolphinscheduler.common.Constants.*;
 
 /**
  * abstract zookeeper client
  */
-public abstract class AbstractZKClient extends ZookeeperCachedOperator{
+public abstract class AbstractZKClient extends ZookeeperCachedOperator {
 
 	private static final Logger logger = LoggerFactory.getLogger(AbstractZKClient.class);
 

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/zk/DefaultEnsembleProvider.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.common.zk;
+package org.apache.dolphinscheduler.service.zk;
 
 import org.apache.curator.ensemble.EnsembleProvider;
 

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/zk/ZookeeperConfig.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.common.zk;
+package org.apache.dolphinscheduler.service.zk;
 
 import org.springframework.beans.factory.annotation.Value;
 import org.springframework.context.annotation.PropertySource;

File: dolphinscheduler-service/src/main/java/org/apache/dolphinscheduler/service/zk/ZookeeperOperator.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.common.zk;
+package org.apache.dolphinscheduler.service.zk;
 
 import org.apache.commons.lang.StringUtils;
 import org.apache.curator.framework.CuratorFramework;
@@ -33,12 +33,10 @@
 import org.springframework.beans.factory.InitializingBean;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Component;
-import org.springframework.util.CollectionUtils;
 
 import java.nio.charset.StandardCharsets;
 import java.util.List;
 
-import static org.apache.dolphinscheduler.common.utils.Preconditions.*;
 import static org.apache.dolphinscheduler.common.utils.Preconditions.checkNotNull;
 
 /**

File: dolphinscheduler-service/src/test/java/queue/BaseTaskQueueTest.java
Patch:
@@ -14,9 +14,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.common.queue;
+package queue;
 
-import org.apache.dolphinscheduler.common.zk.ZKServer;
+import org.apache.dolphinscheduler.service.queue.ITaskQueue;
+import org.apache.dolphinscheduler.service.queue.TaskQueueFactory;
 import org.junit.*;
 
 /**

File: dolphinscheduler-service/src/test/java/queue/TaskQueueZKImplTest.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.common.queue;
+package queue;
 
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.utils.IpUtils;

File: dolphinscheduler-service/src/test/java/queue/ZKServer.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.common.zk;
+package queue;
 
 import org.apache.curator.framework.CuratorFramework;
 import org.apache.curator.framework.CuratorFrameworkFactory;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/AbstractCommandExecutor.java
Patch:
@@ -147,9 +147,6 @@ public int run(String execCommand, ProcessDao processDao) {
             // get process id
             int pid = getProcessId(process);
 
-            // task instance id
-            int taskInstId = Integer.parseInt(taskAppId.split("_")[2]);
-
             processDao.updatePidByTaskInstId(taskInstId, pid, "");
 
             logger.info("process start, process id is: {}", pid);

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/TaskType.java
Patch:
@@ -33,6 +33,7 @@ public enum TaskType {
      * 7 DEPENDENT
      * 8 FLINK
      * 9 HTTP
+     * 10 DATAX
      */
     SHELL(0, "shell"),
     SQL(1, "sql"),
@@ -43,7 +44,8 @@ public enum TaskType {
     PYTHON(6, "python"),
     DEPENDENT(7, "dependent"),
     FLINK(8, "flink"),
-    HTTP(9, "http");
+    HTTP(9, "http"),
+    DATAX(10, "datax");
 
     TaskType(int code, String descp){
         this.code = code;

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/TaskParametersUtils.java
Patch:
@@ -19,6 +19,7 @@
 import org.apache.dolphinscheduler.common.enums.TaskType;
 import org.apache.dolphinscheduler.common.task.AbstractParameters;
 import org.apache.dolphinscheduler.common.task.dependent.DependentParameters;
+import org.apache.dolphinscheduler.common.task.datax.DataxParameters;
 import org.apache.dolphinscheduler.common.task.flink.FlinkParameters;
 import org.apache.dolphinscheduler.common.task.http.HttpParameters;
 import org.apache.dolphinscheduler.common.task.mr.MapreduceParameters;
@@ -68,6 +69,8 @@ public static AbstractParameters getParameters(String taskType, String parameter
           return JSONUtils.parseObject(parameter, FlinkParameters.class);
         case HTTP:
           return JSONUtils.parseObject(parameter, HttpParameters.class);
+        case DATAX:
+          return JSONUtils.parseObject(parameter, DataxParameters.class);
         default:
           return null;
       }

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/TaskManager.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.dolphinscheduler.common.enums.TaskType;
 import org.apache.dolphinscheduler.common.utils.EnumUtils;
 import org.apache.dolphinscheduler.server.worker.task.dependent.DependentTask;
+import org.apache.dolphinscheduler.server.worker.task.datax.DataxTask;
 import org.apache.dolphinscheduler.server.worker.task.flink.FlinkTask;
 import org.apache.dolphinscheduler.server.worker.task.http.HttpTask;
 import org.apache.dolphinscheduler.server.worker.task.mr.MapReduceTask;
@@ -65,6 +66,8 @@ public static AbstractTask newTask(String taskType, TaskProps props, Logger logg
         return new DependentTask(props, logger);
       case HTTP:
         return new HttpTask(props, logger);
+      case DATAX:
+        return new DataxTask(props, logger);
       default:
         logger.error("unsupport task type: {}", taskType);
         throw new IllegalArgumentException("not support task type");

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/SchedulerService.java
Patch:
@@ -167,6 +167,7 @@ public Map<String, Object> insertSchedule(User loginUser, String projectName,
         processDefinitionMapper.updateById(processDefinition);
         putMsg(result, Status.SUCCESS);
 
+        result.put("scheduleId", scheduleObj.getId());
         return result;
     }
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ExecutorService.java
Patch:
@@ -550,7 +550,9 @@ private int createCommand(CommandType commandType, int processDefineId,
         }else{
             command.setCommandParam(JSONUtils.toJson(cmdParam));
             return processDao.createCommand(command);
-        }  
+        }
+
+        return 0;
     }
 
     /**

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterExecThread.java
Patch:
@@ -254,7 +254,7 @@ private void executeComplementProcess() throws Exception {
                 break;
             }
 
-            //  current process instance sucess ，next execute
+            //  current process instance success ,next execute
             if(null == iterator){
                 // loop by day
                 scheduleDate = DateUtils.getSomeDay(scheduleDate, 1);
@@ -575,7 +575,7 @@ private void submitPostNode(String parentNodeName){
     private DependResult isTaskDepsComplete(String taskName) {
 
         Collection<String> startNodes = dag.getBeginNode();
-        // ff the vertex returns true directly
+        // if the vertex returns true directly
         if(startNodes.contains(taskName)){
             return DependResult.SUCCESS;
         }

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterExecThread.java
Patch:
@@ -254,7 +254,7 @@ private void executeComplementProcess() throws Exception {
                 break;
             }
 
-            //  current process instance sucess ，next execute
+            //  current process instance success ,next execute
             if(null == iterator){
                 // loop by day
                 scheduleDate = DateUtils.getSomeDay(scheduleDate, 1);
@@ -575,7 +575,7 @@ private void submitPostNode(String parentNodeName){
     private DependResult isTaskDepsComplete(String taskName) {
 
         Collection<String> startNodes = dag.getBeginNode();
-        // ff the vertex returns true directly
+        // if the vertex returns true directly
         if(startNodes.contains(taskName)){
             return DependResult.SUCCESS;
         }

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterExecThread.java
Patch:
@@ -224,14 +224,14 @@ private void executeComplementProcess() throws Exception {
             // execute process ,waiting for end
             runProcess();
 
-            // process instace failure ,no more complements
+            // process instace failure ，no more complements
             if(!processInstance.getState().typeIsSuccess()){
                 logger.info("process {} state {}, complement not completely!",
                         processInstance.getId(), processInstance.getState());
                 break;
             }
 
-            //  current process instance success ,next execute
+            //  current process instance sucess ，next execute
             scheduleDate = DateUtils.getSomeDay(scheduleDate, 1);
             if(scheduleDate.after(endDate)){
                 // all success
@@ -541,7 +541,7 @@ private void submitPostNode(String parentNodeName){
     private DependResult isTaskDepsComplete(String taskName) {
 
         Collection<String> startNodes = dag.getBeginNode();
-        // if the vertex returns true directly
+        // ff the vertex returns true directly
         if(startNodes.contains(taskName)){
             return DependResult.SUCCESS;
         }

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterExecThread.java
Patch:
@@ -224,14 +224,14 @@ private void executeComplementProcess() throws Exception {
             // execute process ,waiting for end
             runProcess();
 
-            // process instace failure ，no more complements
+            // process instace failure ,no more complements
             if(!processInstance.getState().typeIsSuccess()){
                 logger.info("process {} state {}, complement not completely!",
                         processInstance.getId(), processInstance.getState());
                 break;
             }
 
-            //  current process instance sucess ，next execute
+            //  current process instance success ,next execute
             scheduleDate = DateUtils.getSomeDay(scheduleDate, 1);
             if(scheduleDate.after(endDate)){
                 // all success
@@ -541,7 +541,7 @@ private void submitPostNode(String parentNodeName){
     private DependResult isTaskDepsComplete(String taskName) {
 
         Collection<String> startNodes = dag.getBeginNode();
-        // ff the vertex returns true directly
+        // if the vertex returns true directly
         if(startNodes.contains(taskName)){
             return DependResult.SUCCESS;
         }

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/AbstractCommandExecutor.java
Patch:
@@ -207,7 +207,7 @@ private void buildProcess(String commandFile) throws IOException {
         // merge error information to standard output stream
         processBuilder.redirectErrorStream(true);
         // setting up user to run commands
-        processBuilder.command("sudo", "-u", tenantCode, commandType(), commandFile);
+        processBuilder.command("sudo", "-u", tenantCode, commandInterpreter(), commandFile);
 
         process = processBuilder.start();
 
@@ -561,7 +561,7 @@ private void close(BufferedReader inReader) {
 
 
     protected abstract String buildCommandFilePath();
-    protected abstract String commandType();
+    protected abstract String commandInterpreter();
     protected abstract boolean checkFindApp(String line);
     protected abstract void createCommandFileIfNotExists(String execCommand, String commandFile) throws IOException;
 }

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/PythonCommandExecutor.java
Patch:
@@ -113,7 +113,7 @@ protected void createCommandFileIfNotExists(String execCommand, String commandFi
      * @return python home
      */
     @Override
-    protected String commandType() {
+    protected String commandInterpreter() {
         String pythonHome = getPythonHome(envFile);
         if (StringUtils.isEmpty(pythonHome)){
             return PYTHON;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/ShellCommandExecutor.java
Patch:
@@ -74,7 +74,7 @@ protected String buildCommandFilePath() {
      * @return command type
      */
     @Override
-    protected String commandType() {
+    protected String commandInterpreter() {
         return SH;
     }
 

File: dolphinscheduler-alert/src/main/java/org/apache/dolphinscheduler/alert/AlertServer.java
Patch:
@@ -56,7 +56,7 @@ public void start(){
         logger.info("alert server ready start ");
         while (Stopper.isRunning()){
             try {
-                Thread.sleep(Constants.ALERT_SCAN_INTERVEL);
+                Thread.sleep(Constants.ALERT_SCAN_INTERVAL);
             } catch (InterruptedException e) {
                 logger.error(e.getMessage(),e);
                 Thread.currentThread().interrupt();

File: dolphinscheduler-alert/src/main/java/org/apache/dolphinscheduler/alert/utils/Constants.java
Patch:
@@ -133,7 +133,7 @@ public class Constants {
 
     public static final String TH_END = "</th>";
 
-    public static final int ALERT_SCAN_INTERVEL = 5000;
+    public static final int ALERT_SCAN_INTERVAL = 5000;
 
     public static final String MARKDOWN_QUOTE = ">";
 

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/thread/Stopper.java
Patch:
@@ -25,7 +25,7 @@ public class Stopper {
 
 	private static volatile AtomicBoolean signal = new AtomicBoolean(false);
 	
-	public static final boolean isStoped(){
+	public static final boolean isStopped(){
 		return signal.get();
 	}
 	

File: dolphinscheduler-common/src/test/java/org/apache/dolphinscheduler/common/threadutils/ThreadUtilsTest.java
Patch:
@@ -98,7 +98,7 @@ public void run() {
     public void testStopper() {
         assertTrue(Stopper.isRunning());
         Stopper.stop();
-        assertTrue(Stopper.isStoped());
+        assertTrue(Stopper.isStopped());
     }
 
     /**

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/MasterServer.java
Patch:
@@ -173,7 +173,7 @@ public synchronized void stop(String cause) {
 
         try {
             //execute only once
-            if(Stopper.isStoped()){
+            if(Stopper.isStopped()){
                 return;
             }
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/WorkerServer.java
Patch:
@@ -201,7 +201,7 @@ public synchronized void stop(String cause) {
 
         try {
             //execute only once
-            if(Stopper.isStoped()){
+            if(Stopper.isStopped()){
                 return;
             }
 

File: dolphinscheduler-alert/src/main/java/org/apache/dolphinscheduler/alert/utils/ExcelUtils.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dolphinscheduler.alert.utils;
 
+import org.apache.dolphinscheduler.common.utils.CollectionUtils;
 import org.apache.poi.hssf.usermodel.HSSFCell;
 import org.apache.poi.hssf.usermodel.HSSFRow;
 import org.apache.poi.hssf.usermodel.HSSFSheet;
@@ -47,7 +48,7 @@ public static void genExcelFile(String content,String title,String xlsFilePath){
         //The JSONUtils.toList has been try catch ex
         itemsList = JSONUtils.toList(content, LinkedHashMap.class);
 
-        if (itemsList == null || itemsList.size() == 0){
+        if (CollectionUtils.isEmpty(itemsList)){
             logger.error("itemsList is null");
             throw new RuntimeException("itemsList is null");
         }

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/queue/TaskQueueZkImpl.java
Patch:
@@ -83,7 +83,7 @@ public List<String> getAllTasks(String key) {
     @Override
     public boolean hasTask(String key) {
         try {
-            return zookeeperOperator.hasChildren(key);
+            return zookeeperOperator.hasChildren(getTasksPath(key));
         } catch (Exception e) {
             logger.error("check has task in tasks queue exception",e);
         }

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/runner/FetchTaskThread.java
Patch:
@@ -150,8 +150,9 @@ public void run() {
                 }
 
                 //whether have tasks, if no tasks , no need lock  //get all tasks
-                List<String> tasksQueueList = taskQueue.getAllTasks(Constants.DOLPHINSCHEDULER_TASKS_QUEUE);
-                if (CollectionUtils.isEmpty(tasksQueueList)){
+                boolean hasTask = taskQueue.hasTask(Constants.DOLPHINSCHEDULER_TASKS_QUEUE);
+
+                if (!hasTask){
                     Thread.sleep(Constants.SLEEP_TIME_MILLIS);
                     continue;
                 }

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ResourcesServiceTest.java
Patch:
@@ -41,6 +41,7 @@
 import org.mockito.Mock;
 import org.mockito.Mockito;
 import org.powermock.api.mockito.PowerMockito;
+import org.powermock.core.classloader.annotations.PowerMockIgnore;
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.PowerMockRunner;
 import org.slf4j.Logger;
@@ -53,6 +54,7 @@
 import java.util.Map;
 
 @RunWith(PowerMockRunner.class)
+@PowerMockIgnore({"sun.security.*", "javax.net.*"})
 @PrepareForTest({HadoopUtils.class,PropertyUtils.class, FileUtils.class,org.apache.dolphinscheduler.api.utils.FileUtils.class})
 public class ResourcesServiceTest {
     private static final Logger logger = LoggerFactory.getLogger(ResourcesServiceTest.class);
@@ -115,6 +117,7 @@ public void testCreateResource(){
 
         //UDF_RESOURCE_SUFFIX_NOT_JAR
         mockMultipartFile = new MockMultipartFile("ResourcesServiceTest.pdf","ResourcesServiceTest.pdf","pdf",new String("test").getBytes());
+        PowerMockito.when(FileUtils.suffix("ResourcesServiceTest.pdf")).thenReturn("pdf");
         result = resourcesService.createResource(user,"ResourcesServiceTest.pdf","ResourcesServiceTest",ResourceType.UDF,mockMultipartFile);
         logger.info(result.toString());
         Assert.assertEquals(Status.UDF_RESOURCE_SUFFIX_NOT_JAR.getMsg(),result.getMsg());

File: dolphinscheduler-alert/src/main/java/org/apache/dolphinscheduler/alert/utils/Constants.java
Patch:
@@ -75,6 +75,8 @@ public class Constants {
 
     public static final int NUMBER_1000 = 1000;
 
+    public static final String ALERT_TEMPLATE = "alert.template";
+
     public static final String SPRING_DATASOURCE_DRIVER_CLASS_NAME = "spring.datasource.driver-class-name";
 
     public static final String SPRING_DATASOURCE_URL = "spring.datasource.url";
@@ -115,8 +117,6 @@ public class Constants {
 
     public static final String DEVELOPMENT = "development";
 
-    public static final String CLASSPATH_MAIL_TEMPLATES_ALERT_MAIL_TEMPLATE_FTL = "classpath:mail_templates/alert_mail_template.ftl";
-
     public static final String TR = "<tr>";
 
     public static final String TD = "<td>";

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ResourcesService.java
Patch:
@@ -920,12 +920,14 @@ private String getTenantCode(int userId,Result result){
 
         User user = userMapper.queryDetailsById(userId);
         if(user == null){
+            logger.error("user {} not exists", userId);
             putMsg(result, Status.USER_NOT_EXIST,userId);
             return null;
         }
 
         Tenant tenant = tenantMapper.queryById(user.getTenantId());
         if (tenant == null){
+            logger.error("tenant not exists");
             putMsg(result, Status.TENANT_NOT_EXIST);
             return null;
         }

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/HadoopUtils.java
Patch:
@@ -118,7 +118,7 @@ private void init() {
                                     configuration.set(Constants.FS_DEFAULTFS,defaultFSProp);
                                     fsRelatedProps.forEach((key, value) -> configuration.set(key, value));
                                 }else{
-                                    logger.error("property:{} can not to be empty, please set!");
+                                    logger.error("property:{} can not to be empty, please set!", Constants.FS_DEFAULTFS );
                                     throw new RuntimeException("property:{} can not to be empty, please set!");
                                 }
                             }else{
@@ -337,7 +337,6 @@ public boolean exists(String hdfsFilePath) throws IOException {
      * @throws Exception errors
      */
     public FileStatus[] listFileStatus(String filePath)throws Exception{
-        Path path = new Path(filePath);
         try {
             return fs.listStatus(new Path(filePath));
         } catch (IOException e) {

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/job/db/ClickHouseDataSource.java
Patch:
@@ -66,7 +66,6 @@ public void isConnectable() throws Exception {
                     con.close();
                 } catch (SQLException e) {
                     logger.error("ClickHouse datasource try conn close conn error", e);
-                    throw e;
                 }
             }
         }

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/job/db/DB2ServerDataSource.java
Patch:
@@ -66,7 +66,6 @@ public void isConnectable() throws Exception {
                     con.close();
                 } catch (SQLException e) {
                     logger.error("DB2 Server datasource try conn close conn error", e);
-                    throw e;
                 }
             }
         }

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/job/db/HiveDataSource.java
Patch:
@@ -69,7 +69,6 @@ public void isConnectable() throws Exception {
           con.close();
         } catch (SQLException e) {
           logger.error("hive datasource try conn close conn error", e);
-          throw e;
         }
       }
     }

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/job/db/MySQLDataSource.java
Patch:
@@ -64,7 +64,6 @@ public void isConnectable() throws Exception {
           con.close();
         } catch (SQLException e) {
           logger.error("Mysql datasource try conn close conn error", e);
-          throw e;
         }
       }
     }

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/job/db/OracleDataSource.java
Patch:
@@ -66,7 +66,6 @@ public void isConnectable() throws Exception {
                     con.close();
                 } catch (SQLException e) {
                     logger.error("Oracle datasource try conn close conn error", e);
-                    throw e;
                 }
             }
         }

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/job/db/PostgreDataSource.java
Patch:
@@ -68,7 +68,6 @@ public void isConnectable() throws Exception {
           con.close();
         } catch (SQLException e) {
           logger.error("Postgre datasource try conn close conn error", e);
-          throw e;
         }
       }
     }

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/job/db/SQLServerDataSource.java
Patch:
@@ -62,7 +62,6 @@ public void isConnectable() throws Exception {
                     con.close();
                 } catch (SQLException e) {
                     logger.error("SQL Server datasource try conn close conn error", e);
-                    throw e;
                 }
             }
         }

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/job/db/SparkDataSource.java
Patch:
@@ -71,7 +71,6 @@ public void isConnectable() throws Exception {
           con.close();
         } catch (SQLException e) {
           logger.error("Spark datasource try conn close conn error", e);
-          throw e;
         }
       }
     }

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/model/DateInterval.java
Patch:
@@ -59,4 +59,5 @@ public Date getEndTime() {
     public void setEndTime(Date endTime) {
         this.endTime = endTime;
     }
+
 }

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/model/TaskNodeRelation.java
Patch:
@@ -53,6 +53,7 @@ public void setEndNode(String endNode) {
   }
 
 
+  @Override
   public boolean equals(Object o){
     if (!(o instanceof TaskNodeRelation)) {
       return false;

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/ConnectionUtils.java
Patch:
@@ -51,7 +51,6 @@ public void release(ResultSet rs, Statement stmt, Connection conn) {
 			}
 		} catch (SQLException e) {
 			logger.error(e.getMessage(),e);
-			throw new RuntimeException(e);
 		} finally {
 			try {
 				if (stmt != null) {
@@ -60,7 +59,6 @@ public void release(ResultSet rs, Statement stmt, Connection conn) {
 				}
 			} catch (SQLException e) {
 				logger.error(e.getMessage(),e);
-				throw new RuntimeException(e);
 			} finally {
 				try {
 					if (conn != null) {
@@ -69,7 +67,6 @@ public void release(ResultSet rs, Statement stmt, Connection conn) {
 					}
 				} catch (SQLException e) {
 					logger.error(e.getMessage(),e);
-					throw new RuntimeException(e);
 				}
 			}
 		}

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/DataAnalysisController.java
Patch:
@@ -188,7 +188,7 @@ public Result countCommandState(@ApiIgnore @RequestAttribute(value = Constants.S
     public Result countQueueState(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,
                                     @RequestParam(value="projectId", required=false, defaultValue = "0") int projectId){
         try{
-            logger.info("count command state, user:{}, start date: {}, end date:{}, project id {}",
+            logger.info("count command state, user:{}, project id {}",
                     loginUser.getUserName(), projectId);
             Map<String, Object> result = dataAnalysisService.countQueueState(loginUser, projectId);
             return returnDataList(result);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/DataSourceController.java
Patch:
@@ -461,7 +461,7 @@ public Result authedDatasource(@ApiIgnore @RequestAttribute(value = Constants.SE
     @GetMapping(value="/kerberos-startup-state")
     @ResponseStatus(HttpStatus.OK)
     public Result getKerberosStartupState(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser){
-        logger.info("login user {},get kerberos startup state : {}", loginUser.getUserName());
+        logger.info("login user {}", loginUser.getUserName());
         try{
             // if upload resource is HDFS and kerberos startup is true , else false
             return success(Status.SUCCESS.getMsg(), CommonUtils.getKerberosStartupState());

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/TenantController.java
Patch:
@@ -137,7 +137,7 @@ public Result queryTenantlistPaging(@ApiIgnore @RequestAttribute(value = Constan
     @GetMapping(value="/list")
     @ResponseStatus(HttpStatus.OK)
     public Result queryTenantlist(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser){
-        logger.info("login user {}, query tenant list");
+        logger.info("login user {}, query tenant list", loginUser.getUserName());
         try{
             Map<String, Object> result = tenantService.queryTenantList(loginUser);
             return returnDataList(result);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/UsersController.java
Patch:
@@ -324,7 +324,7 @@ public Result grantDataSource(@ApiIgnore @RequestAttribute(value = Constants.SES
     @GetMapping(value="/get-user-info")
     @ResponseStatus(HttpStatus.OK)
     public Result getUserInfo(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser){
-        logger.info("login user {},get user info : {}", loginUser.getUserName());
+        logger.info("login user {},get user info", loginUser.getUserName());
         try{
             Map<String, Object> result = usersService.getUserInfo(loginUser);
             return returnDataList(result);
@@ -344,7 +344,7 @@ public Result getUserInfo(@ApiIgnore @RequestAttribute(value = Constants.SESSION
     @GetMapping(value="/list")
     @ResponseStatus(HttpStatus.OK)
     public Result listUser(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser){
-        logger.info("login user {}, user list");
+        logger.info("login user {}, user list", loginUser.getUserName());
         try{
             Map<String, Object> result = usersService.queryAllGeneralUsers(loginUser);
             return returnDataList(result);
@@ -364,7 +364,7 @@ public Result listUser(@ApiIgnore @RequestAttribute(value = Constants.SESSION_US
     @GetMapping(value="/list-all")
     @ResponseStatus(HttpStatus.OK)
     public Result listAll(@RequestAttribute(value = Constants.SESSION_USER) User loginUser){
-        logger.info("login user {}, user list");
+        logger.info("login user {}, user list", loginUser.getUserName());
         try{
             Map<String, Object> result = usersService.queryUserList(loginUser);
             return returnDataList(result);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/SchedulerService.java
Patch:
@@ -374,12 +374,12 @@ public Map<String, Object> setScheduleState(User loginUser,
         try {
             switch (scheduleStatus) {
                 case ONLINE: {
-                    logger.info("Call master client set schedule online, project id: {}, flow id: {},host: {}, port: {}", project.getId(), processDefinition.getId(), masterServers);
+                    logger.info("Call master client set schedule online, project id: {}, flow id: {},host: {}", project.getId(), processDefinition.getId(), masterServers);
                     setSchedule(project.getId(), id);
                     break;
                 }
                 case OFFLINE: {
-                    logger.info("Call master client set schedule offline, project id: {}, flow id: {},host: {}, port: {}", project.getId(), processDefinition.getId(), masterServers);
+                    logger.info("Call master client set schedule offline, project id: {}, flow id: {},host: {}", project.getId(), processDefinition.getId(), masterServers);
                     deleteSchedule(project.getId(), id);
                     break;
                 }

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/HadoopUtils.java
Patch:
@@ -116,7 +116,7 @@ private void init() {
                                 if(StringUtils.isNotBlank(defaultFSProp)){
                                     Map<String, String> fsRelatedProps = PropertyUtils.getPrefixedProperties("fs.");
                                     configuration.set(Constants.FS_DEFAULTFS,defaultFSProp);
-                                    fsRelatedProps.entrySet().stream().forEach(entry -> configuration.set(entry.getKey(), entry.getValue()));
+                                    fsRelatedProps.forEach((key, value) -> configuration.set(key, value));
                                 }else{
                                     logger.error("property:{} can not to be empty, please set!");
                                     throw new RuntimeException("property:{} can not to be empty, please set!");

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/HttpUtils.java
Patch:
@@ -67,7 +67,7 @@ public static String get(String url){
 					logger.warn("http entity is null");
 				}
 			}else{
-				logger.error("htt get:{} response status code is not 200!");
+				logger.error("http get:{} response status code is not 200!", response.getStatusLine().getStatusCode());
 			}
 		}catch (Exception e){
 			logger.error(e.getMessage(),e);

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/SessionServiceTest.java
Patch:
@@ -121,6 +121,9 @@ public void testSignOut(){
         String ip = "127.0.0.1";
         User user = new User();
         user.setId(userId);
+
+        Mockito.when(sessionMapper.queryByUserIdAndIp(userId,ip)).thenReturn(getSession());
+
         sessionService.signOut(ip ,user);
 
     }

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/SessionServiceTest.java
Patch:
@@ -121,6 +121,9 @@ public void testSignOut(){
         String ip = "127.0.0.1";
         User user = new User();
         user.setId(userId);
+
+        Mockito.when(sessionMapper.queryByUserIdAndIp(userId,ip)).thenReturn(getSession());
+
         sessionService.signOut(ip ,user);
 
     }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProcessDefinitionController.java
Patch:
@@ -460,7 +460,7 @@ public Result batchDeleteProcessDefinitionByIds(@ApiIgnore @RequestAttribute(val
                 }
             }
 
-            if(deleteFailedIdList.size() > 0){
+            if(!deleteFailedIdList.isEmpty()){
                 putMsg(result, Status.BATCH_DELETE_PROCESS_DEFINE_BY_IDS_ERROR,StringUtils.join(deleteFailedIdList.toArray(),","));
             }else{
                 putMsg(result, Status.SUCCESS);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/MonitorService.java
Patch:
@@ -119,8 +119,9 @@ public Map<String,Object> queryWorker(User loginUser) {
 
   public List<Server> getServerListFromZK(boolean isMaster){
 
+    checkNotNull(zookeeperMonitor);
     ZKNodeType zkNodeType = isMaster ? ZKNodeType.MASTER : ZKNodeType.WORKER;
-    return checkNotNull(zookeeperMonitor).getServersList(zkNodeType);
+    return zookeeperMonitor.getServersList(zkNodeType);
   }
 
 }

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/WorkerServer.java
Patch:
@@ -177,9 +177,7 @@ public void run(){
             public void run() {
                 // worker server exit alert
                 if (zkWorkerClient.getActiveMasterNum() <= 1) {
-                    for (int i = 0; i < Constants.DOLPHINSCHEDULER_WARN_TIMES_FAILOVER; i++) {
-                        alertDao.sendServerStopedAlert(1, OSUtils.getHost(), "Worker-Server");
-                    }
+                    alertDao.sendServerStopedAlert(1, OSUtils.getHost(), "Worker-Server");
                 }
                 stop("shutdownhook");
             }

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/WorkerServer.java
Patch:
@@ -177,9 +177,7 @@ public void run(){
             public void run() {
                 // worker server exit alert
                 if (zkWorkerClient.getActiveMasterNum() <= 1) {
-                    for (int i = 0; i < Constants.DOLPHINSCHEDULER_WARN_TIMES_FAILOVER; i++) {
-                        alertDao.sendServerStopedAlert(1, OSUtils.getHost(), "Worker-Server");
-                    }
+                    alertDao.sendServerStopedAlert(1, OSUtils.getHost(), "Worker-Server");
                 }
                 stop("shutdownhook");
             }

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/zk/AbstractZKClient.java
Patch:
@@ -144,7 +144,7 @@ private String createZNodePath(ZKNodeType zkNodeType) throws Exception {
 		String parentPath = getZNodeParentPath(zkNodeType);
 		String serverPathPrefix = parentPath + "/" + OSUtils.getHost();
 		String registerPath = zkClient.create().withMode(CreateMode.EPHEMERAL_SEQUENTIAL).forPath(
-				serverPathPrefix + "_", heartbeatZKInfo.getBytes());
+				serverPathPrefix + UNDERLINE, heartbeatZKInfo.getBytes());
 		logger.info("register {} node {} success" , zkNodeType.toString(), registerPath);
 		return registerPath;
 	}
@@ -307,7 +307,7 @@ public boolean checkZKNodeExists(String host, ZKNodeType zkNodeType) {
 		}
 		Map<String, String> serverMaps = getServerMaps(zkNodeType);
 		for(String hostKey : serverMaps.keySet()){
-			if(hostKey.startsWith(host)){
+			if(hostKey.startsWith(host + UNDERLINE)){
 				return true;
 			}
 		}

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ResourcesService.java
Patch:
@@ -210,7 +210,6 @@ public Result updateResource(User loginUser,
         }
 
         Resource resource = resourcesMapper.selectById(resourceId);
-        String originResourceName = resource.getAlias();
         if (resource == null) {
             putMsg(result, Status.RESOURCE_NOT_EXIST);
             return result;
@@ -236,6 +235,7 @@ public Result updateResource(User loginUser,
         }
 
         //get the file suffix
+        String originResourceName = resource.getAlias();
         String suffix = originResourceName.substring(originResourceName.lastIndexOf("."));
 
         //if the name without suffix then add it ,else use the origin name

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/utils/CheckUtils.java
Patch:
@@ -104,7 +104,7 @@ public static boolean checkPassword(String password) {
    * @return true if phone regex valid, otherwise return false
    */
   public static boolean checkPhone(String phone) {
-    return StringUtils.isEmpty(phone) || phone.length() <= 11;
+    return StringUtils.isEmpty(phone) || phone.length() == 11;
   }
 
 

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/queue/TaskQueueFactory.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.apache.dolphinscheduler.common.utils.CommonUtils;
 import org.apache.commons.lang.StringUtils;
+import org.apache.dolphinscheduler.common.utils.SpringApplicationContext;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -43,7 +44,7 @@ public static ITaskQueue getTaskQueueInstance() {
     String queueImplValue = CommonUtils.getQueueImplValue();
     if (StringUtils.isNotBlank(queueImplValue)) {
         logger.info("task queue impl use zookeeper ");
-        return TaskQueueZkImpl.getInstance();
+        return SpringApplicationContext.getBean(TaskQueueZkImpl.class);
     }else{
       logger.error("property dolphinscheduler.queue.impl can't be blank, system will exit ");
       System.exit(-1);

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/SpringApplicationContext.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.server.utils;
+package org.apache.dolphinscheduler.common.utils;
 
 import org.springframework.beans.BeansException;
 import org.springframework.context.ApplicationContext;

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/zk/AbstractZKClient.java
Patch:
@@ -461,7 +461,7 @@ protected boolean checkServerSelfDead(String serverHost, ZKNodeType zkNodeType)
 		if (serverHost.equals(OSUtils.getHost())) {
 			logger.error("{} server({}) of myself dead , stopping...",
 					zkNodeType.toString(), serverHost);
-			stoppable.stop(String.format(" {} server {} of myself dead , stopping...",
+			stoppable.stop(String.format(" %s server %s of myself dead , stopping...",
 					zkNodeType.toString(), serverHost));
 			return true;
 		}

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/zk/ZookeeperOperator.java
Patch:
@@ -129,9 +129,6 @@ public List<String> getChildrenKeys(final String key) {
         List<String> values;
         try {
             values = zkClient.getChildren().forPath(key);
-            if (CollectionUtils.isEmpty(values)) {
-                logger.warn("getChildrenKeys key : {} is empty", key);
-            }
             return values;
         } catch (InterruptedException ex) {
             logger.error("getChildrenKeys key : {} InterruptedException", key);

File: dolphinscheduler-common/src/test/java/org/apache/dolphinscheduler/common/queue/TaskQueueZKImplTest.java
Patch:
@@ -32,11 +32,9 @@
 /**
  * task queue test
  */
+@Ignore
 public class TaskQueueZKImplTest extends BaseTaskQueueTest  {
 
-
-
-
     @Before
     public void before(){
 

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/ProcessDao.java
Patch:
@@ -105,7 +105,8 @@ public class ProcessDao {
     /**
      * task queue impl
      */
-    protected ITaskQueue taskQueue = TaskQueueFactory.getTaskQueueInstance();
+    @Autowired
+    private ITaskQueue taskQueue;
     /**
      * handle Command (construct ProcessInstance from Command) , wrapped in transaction
      * @param logger logger

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/Application.java
Patch:
@@ -21,7 +21,7 @@
 import org.springframework.context.annotation.ComponentScan;
 
 @SpringBootApplication
-@ComponentScan("org.apache.dolphinscheduler.dao")
+@ComponentScan("org.apache.dolphinscheduler")
 public class Application {
 
     public static void main(String[] args) {

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/MasterServer.java
Patch:
@@ -23,18 +23,17 @@
 import org.apache.dolphinscheduler.common.thread.ThreadPoolExecutors;
 import org.apache.dolphinscheduler.common.thread.ThreadUtils;
 import org.apache.dolphinscheduler.common.utils.OSUtils;
+import org.apache.dolphinscheduler.common.utils.SpringApplicationContext;
 import org.apache.dolphinscheduler.dao.ProcessDao;
 import org.apache.dolphinscheduler.server.master.config.MasterConfig;
 import org.apache.dolphinscheduler.server.master.runner.MasterSchedulerThread;
 import org.apache.dolphinscheduler.server.quartz.ProcessScheduleJob;
 import org.apache.dolphinscheduler.server.quartz.QuartzExecutors;
-import org.apache.dolphinscheduler.server.utils.SpringApplicationContext;
 import org.apache.dolphinscheduler.server.zk.ZKMasterClient;
 import org.quartz.SchedulerException;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.boot.SpringApplication;
 import org.springframework.boot.WebApplicationType;
 import org.springframework.boot.builder.SpringApplicationBuilder;
 import org.springframework.context.annotation.ComponentScan;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterBaseTaskExecThread.java
Patch:
@@ -18,13 +18,13 @@
 
 import org.apache.dolphinscheduler.common.queue.ITaskQueue;
 import org.apache.dolphinscheduler.common.queue.TaskQueueFactory;
+import org.apache.dolphinscheduler.common.utils.SpringApplicationContext;
 import org.apache.dolphinscheduler.dao.AlertDao;
 import org.apache.dolphinscheduler.dao.ProcessDao;
 import org.apache.dolphinscheduler.dao.entity.ProcessInstance;
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
 import org.apache.dolphinscheduler.dao.utils.BeanContext;
 import org.apache.dolphinscheduler.server.master.config.MasterConfig;
-import org.apache.dolphinscheduler.server.utils.SpringApplicationContext;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterExecThread.java
Patch:
@@ -34,7 +34,6 @@
 import org.apache.dolphinscheduler.dao.utils.DagHelper;
 import org.apache.dolphinscheduler.server.master.config.MasterConfig;
 import org.apache.dolphinscheduler.server.utils.AlertManager;
-import org.apache.dolphinscheduler.server.utils.SpringApplicationContext;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterSchedulerThread.java
Patch:
@@ -22,12 +22,12 @@
 import org.apache.dolphinscheduler.common.thread.Stopper;
 import org.apache.dolphinscheduler.common.thread.ThreadUtils;
 import org.apache.dolphinscheduler.common.utils.OSUtils;
+import org.apache.dolphinscheduler.common.utils.SpringApplicationContext;
 import org.apache.dolphinscheduler.common.zk.AbstractZKClient;
 import org.apache.dolphinscheduler.dao.ProcessDao;
 import org.apache.dolphinscheduler.dao.entity.Command;
 import org.apache.dolphinscheduler.dao.entity.ProcessInstance;
 import org.apache.dolphinscheduler.server.master.config.MasterConfig;
-import org.apache.dolphinscheduler.server.utils.SpringApplicationContext;
 import org.apache.dolphinscheduler.server.zk.ZKMasterClient;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/SubProcessTaskExecThread.java
Patch:
@@ -72,7 +72,6 @@ public Boolean submitWaitComplete() {
                     this.taskInstance.setState(ExecutionStatus.KILL);
                 }else{
                     this.taskInstance.setState(subProcessInstance.getState());
-                    result = true;
                 }
             }
             taskInstance.setEndTime(new Date());

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/WorkerServer.java
Patch:
@@ -29,12 +29,12 @@
 import org.apache.dolphinscheduler.common.thread.ThreadUtils;
 import org.apache.dolphinscheduler.common.utils.CollectionUtils;
 import org.apache.dolphinscheduler.common.utils.OSUtils;
+import org.apache.dolphinscheduler.common.utils.SpringApplicationContext;
 import org.apache.dolphinscheduler.common.zk.AbstractZKClient;
 import org.apache.dolphinscheduler.dao.AlertDao;
 import org.apache.dolphinscheduler.dao.ProcessDao;
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
 import org.apache.dolphinscheduler.server.utils.ProcessUtils;
-import org.apache.dolphinscheduler.server.utils.SpringApplicationContext;
 import org.apache.dolphinscheduler.server.worker.config.WorkerConfig;
 import org.apache.dolphinscheduler.server.worker.runner.FetchTaskThread;
 import org.apache.dolphinscheduler.server.zk.ZKWorkerClient;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/runner/FetchTaskThread.java
Patch:
@@ -25,12 +25,12 @@
 import org.apache.dolphinscheduler.common.utils.CollectionUtils;
 import org.apache.dolphinscheduler.common.utils.FileUtils;
 import org.apache.dolphinscheduler.common.utils.OSUtils;
+import org.apache.dolphinscheduler.common.utils.SpringApplicationContext;
 import org.apache.dolphinscheduler.common.zk.AbstractZKClient;
 import org.apache.dolphinscheduler.dao.ProcessDao;
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
 import org.apache.dolphinscheduler.dao.entity.Tenant;
 import org.apache.dolphinscheduler.dao.entity.WorkerGroup;
-import org.apache.dolphinscheduler.server.utils.SpringApplicationContext;
 import org.apache.dolphinscheduler.server.worker.config.WorkerConfig;
 import org.apache.dolphinscheduler.server.zk.ZKWorkerClient;
 import org.slf4j.Logger;
@@ -155,6 +155,7 @@ public void run() {
                 //whether have tasks, if no tasks , no need lock  //get all tasks
                 List<String> tasksQueueList = taskQueue.getAllTasks(Constants.DOLPHINSCHEDULER_TASKS_QUEUE);
                 if (CollectionUtils.isEmpty(tasksQueueList)){
+                    Thread.sleep(Constants.SLEEP_TIME_MILLIS);
                     continue;
                 }
                 // creating distributed locks, lock path /dolphinscheduler/lock/worker

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/AbstractYarnTask.java
Patch:
@@ -16,10 +16,10 @@
  */
 package org.apache.dolphinscheduler.server.worker.task;
 
+import org.apache.dolphinscheduler.common.utils.SpringApplicationContext;
 import org.apache.dolphinscheduler.dao.ProcessDao;
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
 import org.apache.dolphinscheduler.server.utils.ProcessUtils;
-import org.apache.dolphinscheduler.server.utils.SpringApplicationContext;
 import org.slf4j.Logger;
 
 /**

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/dependent/DependentExecute.java
Patch:
@@ -23,10 +23,10 @@
 import org.apache.dolphinscheduler.common.model.DateInterval;
 import org.apache.dolphinscheduler.common.model.DependentItem;
 import org.apache.dolphinscheduler.common.utils.DependentUtils;
+import org.apache.dolphinscheduler.common.utils.SpringApplicationContext;
 import org.apache.dolphinscheduler.dao.ProcessDao;
 import org.apache.dolphinscheduler.dao.entity.ProcessInstance;
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
-import org.apache.dolphinscheduler.server.utils.SpringApplicationContext;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/dependent/DependentTask.java
Patch:
@@ -25,9 +25,9 @@
 import org.apache.dolphinscheduler.common.thread.Stopper;
 import org.apache.dolphinscheduler.common.utils.DependentUtils;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
+import org.apache.dolphinscheduler.common.utils.SpringApplicationContext;
 import org.apache.dolphinscheduler.dao.ProcessDao;
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
-import org.apache.dolphinscheduler.server.utils.SpringApplicationContext;
 import org.apache.dolphinscheduler.server.worker.task.AbstractTask;
 import org.apache.dolphinscheduler.server.worker.task.TaskProps;
 import org.slf4j.Logger;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/http/HttpTask.java
Patch:
@@ -30,10 +30,10 @@
 import org.apache.dolphinscheduler.common.utils.Bytes;
 import org.apache.dolphinscheduler.common.utils.DateUtils;
 import org.apache.dolphinscheduler.common.utils.ParameterUtils;
+import org.apache.dolphinscheduler.common.utils.SpringApplicationContext;
 import org.apache.dolphinscheduler.dao.ProcessDao;
 import org.apache.dolphinscheduler.dao.entity.ProcessInstance;
 import org.apache.dolphinscheduler.server.utils.ParamUtils;
-import org.apache.dolphinscheduler.server.utils.SpringApplicationContext;
 import org.apache.dolphinscheduler.server.worker.task.AbstractTask;
 import org.apache.dolphinscheduler.server.worker.task.TaskProps;
 import org.apache.http.HttpEntity;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/processdure/ProcedureTask.java
Patch:
@@ -29,10 +29,10 @@
 import org.apache.dolphinscheduler.common.task.procedure.ProcedureParameters;
 import org.apache.dolphinscheduler.common.utils.CollectionUtils;
 import org.apache.dolphinscheduler.common.utils.ParameterUtils;
+import org.apache.dolphinscheduler.common.utils.SpringApplicationContext;
 import org.apache.dolphinscheduler.dao.ProcessDao;
 import org.apache.dolphinscheduler.dao.entity.DataSource;
 import org.apache.dolphinscheduler.server.utils.ParamUtils;
-import org.apache.dolphinscheduler.server.utils.SpringApplicationContext;
 import org.apache.dolphinscheduler.server.worker.task.AbstractTask;
 import org.apache.dolphinscheduler.server.worker.task.TaskProps;
 import org.slf4j.Logger;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/python/PythonTask.java
Patch:
@@ -22,9 +22,9 @@
 import org.apache.dolphinscheduler.common.task.python.PythonParameters;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
 import org.apache.dolphinscheduler.common.utils.ParameterUtils;
+import org.apache.dolphinscheduler.common.utils.SpringApplicationContext;
 import org.apache.dolphinscheduler.dao.ProcessDao;
 import org.apache.dolphinscheduler.server.utils.ParamUtils;
-import org.apache.dolphinscheduler.server.utils.SpringApplicationContext;
 import org.apache.dolphinscheduler.server.worker.task.AbstractTask;
 import org.apache.dolphinscheduler.server.worker.task.PythonCommandExecutor;
 import org.apache.dolphinscheduler.server.worker.task.TaskProps;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/shell/ShellTask.java
Patch:
@@ -23,9 +23,9 @@
 import org.apache.dolphinscheduler.common.task.shell.ShellParameters;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
 import org.apache.dolphinscheduler.common.utils.ParameterUtils;
+import org.apache.dolphinscheduler.common.utils.SpringApplicationContext;
 import org.apache.dolphinscheduler.dao.ProcessDao;
 import org.apache.dolphinscheduler.server.utils.ParamUtils;
-import org.apache.dolphinscheduler.server.utils.SpringApplicationContext;
 import org.apache.dolphinscheduler.server.worker.task.AbstractTask;
 import org.apache.dolphinscheduler.server.worker.task.ShellCommandExecutor;
 import org.apache.dolphinscheduler.server.worker.task.TaskProps;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/sql/SqlTask.java
Patch:
@@ -36,14 +36,14 @@
 import org.apache.dolphinscheduler.common.utils.CollectionUtils;
 import org.apache.dolphinscheduler.common.utils.CommonUtils;
 import org.apache.dolphinscheduler.common.utils.ParameterUtils;
+import org.apache.dolphinscheduler.common.utils.SpringApplicationContext;
 import org.apache.dolphinscheduler.dao.AlertDao;
 import org.apache.dolphinscheduler.dao.ProcessDao;
 import org.apache.dolphinscheduler.dao.entity.DataSource;
 import org.apache.dolphinscheduler.dao.entity.ProcessInstance;
 import org.apache.dolphinscheduler.dao.entity.UdfFunc;
 import org.apache.dolphinscheduler.dao.entity.User;
 import org.apache.dolphinscheduler.server.utils.ParamUtils;
-import org.apache.dolphinscheduler.server.utils.SpringApplicationContext;
 import org.apache.dolphinscheduler.server.utils.UDFUtils;
 import org.apache.dolphinscheduler.server.worker.task.AbstractTask;
 import org.apache.dolphinscheduler.server.worker.task.TaskProps;

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/worker/shell/ShellCommandExecutorTest.java
Patch:
@@ -20,10 +20,10 @@
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.ExecutionStatus;
 import org.apache.dolphinscheduler.common.model.TaskNode;
+import org.apache.dolphinscheduler.common.utils.SpringApplicationContext;
 import org.apache.dolphinscheduler.dao.ProcessDao;
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
 import org.apache.dolphinscheduler.server.utils.LoggerUtils;
-import org.apache.dolphinscheduler.server.utils.SpringApplicationContext;
 import org.apache.dolphinscheduler.server.worker.task.AbstractTask;
 import org.apache.dolphinscheduler.server.worker.task.TaskManager;
 import org.apache.dolphinscheduler.server.worker.task.TaskProps;

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/worker/sql/SqlExecutorTest.java
Patch:
@@ -21,10 +21,10 @@
 import org.apache.dolphinscheduler.common.enums.CommandType;
 import org.apache.dolphinscheduler.common.enums.ExecutionStatus;
 import org.apache.dolphinscheduler.common.model.TaskNode;
+import org.apache.dolphinscheduler.common.utils.SpringApplicationContext;
 import org.apache.dolphinscheduler.dao.ProcessDao;
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
 import org.apache.dolphinscheduler.server.utils.LoggerUtils;
-import org.apache.dolphinscheduler.server.utils.SpringApplicationContext;
 import org.apache.dolphinscheduler.server.worker.task.AbstractTask;
 import org.apache.dolphinscheduler.server.worker.task.TaskManager;
 import org.apache.dolphinscheduler.server.worker.task.TaskProps;

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/queue/TaskQueueFactory.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.apache.dolphinscheduler.common.utils.CommonUtils;
 import org.apache.commons.lang.StringUtils;
+import org.apache.dolphinscheduler.common.utils.SpringApplicationContext;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -43,7 +44,7 @@ public static ITaskQueue getTaskQueueInstance() {
     String queueImplValue = CommonUtils.getQueueImplValue();
     if (StringUtils.isNotBlank(queueImplValue)) {
         logger.info("task queue impl use zookeeper ");
-        return TaskQueueZkImpl.getInstance();
+        return SpringApplicationContext.getBean(TaskQueueZkImpl.class);
     }else{
       logger.error("property dolphinscheduler.queue.impl can't be blank, system will exit ");
       System.exit(-1);

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/SpringApplicationContext.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.dolphinscheduler.server.utils;
+package org.apache.dolphinscheduler.common.utils;
 
 import org.springframework.beans.BeansException;
 import org.springframework.context.ApplicationContext;

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/zk/ZookeeperOperator.java
Patch:
@@ -127,9 +127,6 @@ public List<String> getChildrenKeys(final String key) {
         List<String> values;
         try {
             values = zkClient.getChildren().forPath(key);
-            if (CollectionUtils.isEmpty(values)) {
-                logger.warn("getChildrenKeys key : {} is empty", key);
-            }
             return values;
         } catch (InterruptedException ex) {
             logger.error("getChildrenKeys key : {} InterruptedException", key);

File: dolphinscheduler-common/src/test/java/org/apache/dolphinscheduler/common/queue/TaskQueueZKImplTest.java
Patch:
@@ -32,11 +32,9 @@
 /**
  * task queue test
  */
+@Ignore
 public class TaskQueueZKImplTest extends BaseTaskQueueTest  {
 
-
-
-
     @Before
     public void before(){
 

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/ProcessDao.java
Patch:
@@ -105,7 +105,8 @@ public class ProcessDao {
     /**
      * task queue impl
      */
-    protected ITaskQueue taskQueue = TaskQueueFactory.getTaskQueueInstance();
+    @Autowired
+    private ITaskQueue taskQueue;
     /**
      * handle Command (construct ProcessInstance from Command) , wrapped in transaction
      * @param logger logger

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/Application.java
Patch:
@@ -21,7 +21,7 @@
 import org.springframework.context.annotation.ComponentScan;
 
 @SpringBootApplication
-@ComponentScan("org.apache.dolphinscheduler.dao")
+@ComponentScan("org.apache.dolphinscheduler")
 public class Application {
 
     public static void main(String[] args) {

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/MasterServer.java
Patch:
@@ -23,18 +23,17 @@
 import org.apache.dolphinscheduler.common.thread.ThreadPoolExecutors;
 import org.apache.dolphinscheduler.common.thread.ThreadUtils;
 import org.apache.dolphinscheduler.common.utils.OSUtils;
+import org.apache.dolphinscheduler.common.utils.SpringApplicationContext;
 import org.apache.dolphinscheduler.dao.ProcessDao;
 import org.apache.dolphinscheduler.server.master.config.MasterConfig;
 import org.apache.dolphinscheduler.server.master.runner.MasterSchedulerThread;
 import org.apache.dolphinscheduler.server.quartz.ProcessScheduleJob;
 import org.apache.dolphinscheduler.server.quartz.QuartzExecutors;
-import org.apache.dolphinscheduler.server.utils.SpringApplicationContext;
 import org.apache.dolphinscheduler.server.zk.ZKMasterClient;
 import org.quartz.SchedulerException;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.boot.SpringApplication;
 import org.springframework.boot.WebApplicationType;
 import org.springframework.boot.builder.SpringApplicationBuilder;
 import org.springframework.context.annotation.ComponentScan;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterBaseTaskExecThread.java
Patch:
@@ -18,13 +18,13 @@
 
 import org.apache.dolphinscheduler.common.queue.ITaskQueue;
 import org.apache.dolphinscheduler.common.queue.TaskQueueFactory;
+import org.apache.dolphinscheduler.common.utils.SpringApplicationContext;
 import org.apache.dolphinscheduler.dao.AlertDao;
 import org.apache.dolphinscheduler.dao.ProcessDao;
 import org.apache.dolphinscheduler.dao.entity.ProcessInstance;
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
 import org.apache.dolphinscheduler.dao.utils.BeanContext;
 import org.apache.dolphinscheduler.server.master.config.MasterConfig;
-import org.apache.dolphinscheduler.server.utils.SpringApplicationContext;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterExecThread.java
Patch:
@@ -34,7 +34,6 @@
 import org.apache.dolphinscheduler.dao.utils.DagHelper;
 import org.apache.dolphinscheduler.server.master.config.MasterConfig;
 import org.apache.dolphinscheduler.server.utils.AlertManager;
-import org.apache.dolphinscheduler.server.utils.SpringApplicationContext;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterSchedulerThread.java
Patch:
@@ -22,12 +22,12 @@
 import org.apache.dolphinscheduler.common.thread.Stopper;
 import org.apache.dolphinscheduler.common.thread.ThreadUtils;
 import org.apache.dolphinscheduler.common.utils.OSUtils;
+import org.apache.dolphinscheduler.common.utils.SpringApplicationContext;
 import org.apache.dolphinscheduler.common.zk.AbstractZKClient;
 import org.apache.dolphinscheduler.dao.ProcessDao;
 import org.apache.dolphinscheduler.dao.entity.Command;
 import org.apache.dolphinscheduler.dao.entity.ProcessInstance;
 import org.apache.dolphinscheduler.server.master.config.MasterConfig;
-import org.apache.dolphinscheduler.server.utils.SpringApplicationContext;
 import org.apache.dolphinscheduler.server.zk.ZKMasterClient;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/WorkerServer.java
Patch:
@@ -29,12 +29,12 @@
 import org.apache.dolphinscheduler.common.thread.ThreadUtils;
 import org.apache.dolphinscheduler.common.utils.CollectionUtils;
 import org.apache.dolphinscheduler.common.utils.OSUtils;
+import org.apache.dolphinscheduler.common.utils.SpringApplicationContext;
 import org.apache.dolphinscheduler.common.zk.AbstractZKClient;
 import org.apache.dolphinscheduler.dao.AlertDao;
 import org.apache.dolphinscheduler.dao.ProcessDao;
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
 import org.apache.dolphinscheduler.server.utils.ProcessUtils;
-import org.apache.dolphinscheduler.server.utils.SpringApplicationContext;
 import org.apache.dolphinscheduler.server.worker.config.WorkerConfig;
 import org.apache.dolphinscheduler.server.worker.runner.FetchTaskThread;
 import org.apache.dolphinscheduler.server.zk.ZKWorkerClient;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/runner/FetchTaskThread.java
Patch:
@@ -25,12 +25,12 @@
 import org.apache.dolphinscheduler.common.utils.CollectionUtils;
 import org.apache.dolphinscheduler.common.utils.FileUtils;
 import org.apache.dolphinscheduler.common.utils.OSUtils;
+import org.apache.dolphinscheduler.common.utils.SpringApplicationContext;
 import org.apache.dolphinscheduler.common.zk.AbstractZKClient;
 import org.apache.dolphinscheduler.dao.ProcessDao;
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
 import org.apache.dolphinscheduler.dao.entity.Tenant;
 import org.apache.dolphinscheduler.dao.entity.WorkerGroup;
-import org.apache.dolphinscheduler.server.utils.SpringApplicationContext;
 import org.apache.dolphinscheduler.server.worker.config.WorkerConfig;
 import org.apache.dolphinscheduler.server.zk.ZKWorkerClient;
 import org.slf4j.Logger;
@@ -155,6 +155,7 @@ public void run() {
                 //whether have tasks, if no tasks , no need lock  //get all tasks
                 List<String> tasksQueueList = taskQueue.getAllTasks(Constants.DOLPHINSCHEDULER_TASKS_QUEUE);
                 if (CollectionUtils.isEmpty(tasksQueueList)){
+                    Thread.sleep(Constants.SLEEP_TIME_MILLIS);
                     continue;
                 }
                 // creating distributed locks, lock path /dolphinscheduler/lock/worker

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/AbstractYarnTask.java
Patch:
@@ -16,10 +16,10 @@
  */
 package org.apache.dolphinscheduler.server.worker.task;
 
+import org.apache.dolphinscheduler.common.utils.SpringApplicationContext;
 import org.apache.dolphinscheduler.dao.ProcessDao;
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
 import org.apache.dolphinscheduler.server.utils.ProcessUtils;
-import org.apache.dolphinscheduler.server.utils.SpringApplicationContext;
 import org.slf4j.Logger;
 
 /**

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/dependent/DependentExecute.java
Patch:
@@ -23,10 +23,10 @@
 import org.apache.dolphinscheduler.common.model.DateInterval;
 import org.apache.dolphinscheduler.common.model.DependentItem;
 import org.apache.dolphinscheduler.common.utils.DependentUtils;
+import org.apache.dolphinscheduler.common.utils.SpringApplicationContext;
 import org.apache.dolphinscheduler.dao.ProcessDao;
 import org.apache.dolphinscheduler.dao.entity.ProcessInstance;
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
-import org.apache.dolphinscheduler.server.utils.SpringApplicationContext;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/dependent/DependentTask.java
Patch:
@@ -25,9 +25,9 @@
 import org.apache.dolphinscheduler.common.thread.Stopper;
 import org.apache.dolphinscheduler.common.utils.DependentUtils;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
+import org.apache.dolphinscheduler.common.utils.SpringApplicationContext;
 import org.apache.dolphinscheduler.dao.ProcessDao;
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
-import org.apache.dolphinscheduler.server.utils.SpringApplicationContext;
 import org.apache.dolphinscheduler.server.worker.task.AbstractTask;
 import org.apache.dolphinscheduler.server.worker.task.TaskProps;
 import org.slf4j.Logger;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/http/HttpTask.java
Patch:
@@ -30,10 +30,10 @@
 import org.apache.dolphinscheduler.common.utils.Bytes;
 import org.apache.dolphinscheduler.common.utils.DateUtils;
 import org.apache.dolphinscheduler.common.utils.ParameterUtils;
+import org.apache.dolphinscheduler.common.utils.SpringApplicationContext;
 import org.apache.dolphinscheduler.dao.ProcessDao;
 import org.apache.dolphinscheduler.dao.entity.ProcessInstance;
 import org.apache.dolphinscheduler.server.utils.ParamUtils;
-import org.apache.dolphinscheduler.server.utils.SpringApplicationContext;
 import org.apache.dolphinscheduler.server.worker.task.AbstractTask;
 import org.apache.dolphinscheduler.server.worker.task.TaskProps;
 import org.apache.http.HttpEntity;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/processdure/ProcedureTask.java
Patch:
@@ -29,10 +29,10 @@
 import org.apache.dolphinscheduler.common.task.procedure.ProcedureParameters;
 import org.apache.dolphinscheduler.common.utils.CollectionUtils;
 import org.apache.dolphinscheduler.common.utils.ParameterUtils;
+import org.apache.dolphinscheduler.common.utils.SpringApplicationContext;
 import org.apache.dolphinscheduler.dao.ProcessDao;
 import org.apache.dolphinscheduler.dao.entity.DataSource;
 import org.apache.dolphinscheduler.server.utils.ParamUtils;
-import org.apache.dolphinscheduler.server.utils.SpringApplicationContext;
 import org.apache.dolphinscheduler.server.worker.task.AbstractTask;
 import org.apache.dolphinscheduler.server.worker.task.TaskProps;
 import org.slf4j.Logger;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/python/PythonTask.java
Patch:
@@ -22,9 +22,9 @@
 import org.apache.dolphinscheduler.common.task.python.PythonParameters;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
 import org.apache.dolphinscheduler.common.utils.ParameterUtils;
+import org.apache.dolphinscheduler.common.utils.SpringApplicationContext;
 import org.apache.dolphinscheduler.dao.ProcessDao;
 import org.apache.dolphinscheduler.server.utils.ParamUtils;
-import org.apache.dolphinscheduler.server.utils.SpringApplicationContext;
 import org.apache.dolphinscheduler.server.worker.task.AbstractTask;
 import org.apache.dolphinscheduler.server.worker.task.PythonCommandExecutor;
 import org.apache.dolphinscheduler.server.worker.task.TaskProps;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/shell/ShellTask.java
Patch:
@@ -23,9 +23,9 @@
 import org.apache.dolphinscheduler.common.task.shell.ShellParameters;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
 import org.apache.dolphinscheduler.common.utils.ParameterUtils;
+import org.apache.dolphinscheduler.common.utils.SpringApplicationContext;
 import org.apache.dolphinscheduler.dao.ProcessDao;
 import org.apache.dolphinscheduler.server.utils.ParamUtils;
-import org.apache.dolphinscheduler.server.utils.SpringApplicationContext;
 import org.apache.dolphinscheduler.server.worker.task.AbstractTask;
 import org.apache.dolphinscheduler.server.worker.task.ShellCommandExecutor;
 import org.apache.dolphinscheduler.server.worker.task.TaskProps;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/sql/SqlTask.java
Patch:
@@ -36,14 +36,14 @@
 import org.apache.dolphinscheduler.common.utils.CollectionUtils;
 import org.apache.dolphinscheduler.common.utils.CommonUtils;
 import org.apache.dolphinscheduler.common.utils.ParameterUtils;
+import org.apache.dolphinscheduler.common.utils.SpringApplicationContext;
 import org.apache.dolphinscheduler.dao.AlertDao;
 import org.apache.dolphinscheduler.dao.ProcessDao;
 import org.apache.dolphinscheduler.dao.entity.DataSource;
 import org.apache.dolphinscheduler.dao.entity.ProcessInstance;
 import org.apache.dolphinscheduler.dao.entity.UdfFunc;
 import org.apache.dolphinscheduler.dao.entity.User;
 import org.apache.dolphinscheduler.server.utils.ParamUtils;
-import org.apache.dolphinscheduler.server.utils.SpringApplicationContext;
 import org.apache.dolphinscheduler.server.utils.UDFUtils;
 import org.apache.dolphinscheduler.server.worker.task.AbstractTask;
 import org.apache.dolphinscheduler.server.worker.task.TaskProps;

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/worker/shell/ShellCommandExecutorTest.java
Patch:
@@ -20,10 +20,10 @@
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.ExecutionStatus;
 import org.apache.dolphinscheduler.common.model.TaskNode;
+import org.apache.dolphinscheduler.common.utils.SpringApplicationContext;
 import org.apache.dolphinscheduler.dao.ProcessDao;
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
 import org.apache.dolphinscheduler.server.utils.LoggerUtils;
-import org.apache.dolphinscheduler.server.utils.SpringApplicationContext;
 import org.apache.dolphinscheduler.server.worker.task.AbstractTask;
 import org.apache.dolphinscheduler.server.worker.task.TaskManager;
 import org.apache.dolphinscheduler.server.worker.task.TaskProps;

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/worker/sql/SqlExecutorTest.java
Patch:
@@ -21,10 +21,10 @@
 import org.apache.dolphinscheduler.common.enums.CommandType;
 import org.apache.dolphinscheduler.common.enums.ExecutionStatus;
 import org.apache.dolphinscheduler.common.model.TaskNode;
+import org.apache.dolphinscheduler.common.utils.SpringApplicationContext;
 import org.apache.dolphinscheduler.dao.ProcessDao;
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
 import org.apache.dolphinscheduler.server.utils.LoggerUtils;
-import org.apache.dolphinscheduler.server.utils.SpringApplicationContext;
 import org.apache.dolphinscheduler.server.worker.task.AbstractTask;
 import org.apache.dolphinscheduler.server.worker.task.TaskManager;
 import org.apache.dolphinscheduler.server.worker.task.TaskProps;

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/zk/AbstractZKClient.java
Patch:
@@ -144,7 +144,7 @@ private String createZNodePath(ZKNodeType zkNodeType) throws Exception {
 		String parentPath = getZNodeParentPath(zkNodeType);
 		String serverPathPrefix = parentPath + "/" + OSUtils.getHost();
 		String registerPath = zkClient.create().withMode(CreateMode.EPHEMERAL_SEQUENTIAL).forPath(
-				serverPathPrefix + "_", heartbeatZKInfo.getBytes());
+				serverPathPrefix + UNDERLINE, heartbeatZKInfo.getBytes());
 		logger.info("register {} node {} success" , zkNodeType.toString(), registerPath);
 		return registerPath;
 	}
@@ -307,7 +307,7 @@ public boolean checkZKNodeExists(String host, ZKNodeType zkNodeType) {
 		}
 		Map<String, String> serverMaps = getServerMaps(zkNodeType);
 		for(String hostKey : serverMaps.keySet()){
-			if(hostKey.startsWith(host)){
+			if(hostKey.startsWith(host + UNDERLINE)){
 				return true;
 			}
 		}

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/zk/AbstractZKClient.java
Patch:
@@ -461,7 +461,7 @@ protected boolean checkServerSelfDead(String serverHost, ZKNodeType zkNodeType)
 		if (serverHost.equals(OSUtils.getHost())) {
 			logger.error("{} server({}) of myself dead , stopping...",
 					zkNodeType.toString(), serverHost);
-			stoppable.stop(String.format(" {} server {} of myself dead , stopping...",
+			stoppable.stop(String.format(" %s server %s of myself dead , stopping...",
 					zkNodeType.toString(), serverHost));
 			return true;
 		}

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/zk/AbstractZKClient.java
Patch:
@@ -461,7 +461,7 @@ protected boolean checkServerSelfDead(String serverHost, ZKNodeType zkNodeType)
 		if (serverHost.equals(OSUtils.getHost())) {
 			logger.error("{} server({}) of myself dead , stopping...",
 					zkNodeType.toString(), serverHost);
-			stoppable.stop(String.format(" {} server {} of myself dead , stopping...",
+			stoppable.stop(String.format(" %s server %s of myself dead , stopping...",
 					zkNodeType.toString(), serverHost));
 			return true;
 		}

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/SubProcessTaskExecThread.java
Patch:
@@ -72,7 +72,6 @@ public Boolean submitWaitComplete() {
                     this.taskInstance.setState(ExecutionStatus.KILL);
                 }else{
                     this.taskInstance.setState(subProcessInstance.getState());
-                    result = true;
                 }
             }
             taskInstance.setEndTime(new Date());

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/SubProcessTaskExecThread.java
Patch:
@@ -72,7 +72,6 @@ public Boolean submitWaitComplete() {
                     this.taskInstance.setState(ExecutionStatus.KILL);
                 }else{
                     this.taskInstance.setState(subProcessInstance.getState());
-                    result = true;
                 }
             }
             taskInstance.setEndTime(new Date());

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/CommandType.java
Patch:
@@ -49,7 +49,7 @@ public enum CommandType {
     REPEAT_RUNNING(7, "repeat running a process"),
     PAUSE(8, "pause a process"),
     STOP(9, "stop a process"),
-    RECOVER_WAITTING_THREAD(10, "recover waitting thread");
+    RECOVER_WAITTING_THREAD(10, "recover waiting thread");
 
     CommandType(int code, String descp){
         this.code = code;

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/ExecutionStatus.java
Patch:
@@ -21,7 +21,7 @@
 import lombok.Getter;
 
 /**
- * runing status for workflow and task nodes
+ * running status for workflow and task nodes
  *
  */
 @Getter

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/TaskRecordStatus.java
Patch:
@@ -25,7 +25,7 @@ public enum TaskRecordStatus {
 
     /**
      * status：
-     * 0 sucess
+     * 0 success
      * 1 failure
      * 2 exception
      */

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/ApiApplicationServer.java
Patch:
@@ -26,7 +26,6 @@
 @SpringBootApplication
 @ServletComponentScan
 @ComponentScan("org.apache.dolphinscheduler")
-@EnableSwagger2
 public class ApiApplicationServer extends SpringBootServletInitializer {
 
   public static void main(String[] args) {

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/configuration/ServiceModelToSwagger2MapperImpl.java
Patch:
@@ -16,12 +16,12 @@
  */
 package org.apache.dolphinscheduler.api.configuration;
 
-import com.google.common.collect.ArrayListMultimap;
 import com.google.common.collect.Multimap;
 import io.swagger.models.*;
 import io.swagger.models.parameters.Parameter;
 import org.apache.commons.lang3.StringUtils;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;
 import org.springframework.context.MessageSource;
 import org.springframework.context.annotation.Primary;
 import org.springframework.context.i18n.LocaleContextHolder;
@@ -41,6 +41,7 @@
  */
 @Component(value = "ServiceModelToSwagger2Mapper")
 @Primary
+@ConditionalOnWebApplication
 public class ServiceModelToSwagger2MapperImpl extends ServiceModelToSwagger2Mapper {
 
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/configuration/SwaggerConfig.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.dolphinscheduler.api.configuration;
 
 import com.github.xiaoymin.swaggerbootstrapui.annotations.EnableSwaggerBootstrapUI;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 
@@ -37,6 +38,7 @@
 @Configuration
 @EnableSwagger2
 @EnableSwaggerBootstrapUI
+@ConditionalOnWebApplication
 public class SwaggerConfig implements WebMvcConfigurer {
 
     @Bean

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/MasterServer.java
Patch:
@@ -35,6 +35,8 @@
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.SpringApplication;
+import org.springframework.boot.WebApplicationType;
+import org.springframework.boot.builder.SpringApplicationBuilder;
 import org.springframework.context.annotation.ComponentScan;
 
 import javax.annotation.PostConstruct;
@@ -95,8 +97,7 @@ public class MasterServer implements IStoppable {
      * @param args arguments
      */
     public static void main(String[] args) {
-        SpringApplication.run(MasterServer.class, args);
-
+        new SpringApplicationBuilder(MasterServer.class).web(WebApplicationType.NONE).run(args);
     }
 
     /**

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/WorkerServer.java
Patch:
@@ -42,7 +42,8 @@
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.beans.factory.annotation.Value;
-import org.springframework.boot.SpringApplication;
+import org.springframework.boot.WebApplicationType;
+import org.springframework.boot.builder.SpringApplicationBuilder;
 import org.springframework.context.annotation.ComponentScan;
 
 import javax.annotation.PostConstruct;
@@ -127,7 +128,7 @@ public class WorkerServer implements IStoppable {
      * @param args arguments
      */
     public static void main(String[] args) {
-        SpringApplication.run(WorkerServer.class,args);
+        new SpringApplicationBuilder(WorkerServer.class).web(WebApplicationType.NONE).run(args);
     }
 
 

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/CommandType.java
Patch:
@@ -49,7 +49,7 @@ public enum CommandType {
     REPEAT_RUNNING(7, "repeat running a process"),
     PAUSE(8, "pause a process"),
     STOP(9, "stop a process"),
-    RECOVER_WAITTING_THREAD(10, "recover waitting thread");
+    RECOVER_WAITTING_THREAD(10, "recover waiting thread");
 
     CommandType(int code, String descp){
         this.code = code;

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/ExecutionStatus.java
Patch:
@@ -21,7 +21,7 @@
 import lombok.Getter;
 
 /**
- * runing status for workflow and task nodes
+ * running status for workflow and task nodes
  *
  */
 @Getter

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/TaskRecordStatus.java
Patch:
@@ -25,7 +25,7 @@ public enum TaskRecordStatus {
 
     /**
      * status：
-     * 0 sucess
+     * 0 success
      * 1 failure
      * 2 exception
      */

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/model/Server.java
Patch:
@@ -40,7 +40,7 @@ public class Server {
     private int port;
 
     /**
-     * master direcotry in zookeeper
+     * master directory in zookeeper
      */
     private String zkDirectory;
 

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/model/Server.java
Patch:
@@ -40,7 +40,7 @@ public class Server {
     private int port;
 
     /**
-     * master direcotry in zookeeper
+     * master directory in zookeeper
      */
     private String zkDirectory;
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterTaskExecThread.java
Patch:
@@ -74,6 +74,9 @@ public TaskInstance getTaskInstance(){
     public Boolean submitWaitComplete() {
         Boolean result = false;
         this.taskInstance = submit();
+        if(this.taskInstance == null){
+            return result;
+        }
         if(!this.taskInstance.getState().typeIsFinished()) {
             result = waitTaskQuit();
         }

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/runner/FetchTaskThread.java
Patch:
@@ -147,9 +147,8 @@ public void run() {
                 //check memory and cpu usage and threads
                 boolean runCheckFlag = OSUtils.checkResource(workerConfig.getWorkerMaxCpuloadAvg(), workerConfig.getWorkerReservedMemory()) && checkThreadCount(poolExecutor);
 
-                Thread.sleep(Constants.SLEEP_TIME_MILLIS);
-
                 if(!runCheckFlag) {
+                    Thread.sleep(Constants.SLEEP_TIME_MILLIS);
                     continue;
                 }
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/runner/FetchTaskThread.java
Patch:
@@ -147,9 +147,8 @@ public void run() {
                 //check memory and cpu usage and threads
                 boolean runCheckFlag = OSUtils.checkResource(workerConfig.getWorkerMaxCpuloadAvg(), workerConfig.getWorkerReservedMemory()) && checkThreadCount(poolExecutor);
 
-                Thread.sleep(Constants.SLEEP_TIME_MILLIS);
-
                 if(!runCheckFlag) {
+                    Thread.sleep(Constants.SLEEP_TIME_MILLIS);
                     continue;
                 }
 

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/Constants.java
Patch:
@@ -439,7 +439,7 @@ public final class Constants {
     /**
      * default master commit retry interval
      */
-    public static final int defaultMasterCommitRetryInterval = 100;
+    public static final int defaultMasterCommitRetryInterval = 3000;
 
     /**
      * time unit secong to minutes

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/queue/ITaskQueue.java
Patch:
@@ -45,7 +45,7 @@ public interface ITaskQueue {
      * @param key  queue name
      * @param value
      */
-    void add(String key, String value);
+    boolean add(String key, String value);
 
     /**
      * an element pops out of the queue

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/queue/TaskQueueZkImpl.java
Patch:
@@ -118,14 +118,16 @@ public boolean checkTaskExists(String key, String task) {
      * @param value    ${processInstancePriority}_${processInstanceId}_${taskInstancePriority}_${taskId}_host1,host2,...
      */
     @Override
-    public void add(String key, String value) {
+    public boolean add(String key, String value){
         try {
             String taskIdPath = getTasksPath(key) + Constants.SINGLE_SLASH + value;
             String result = getZkClient().create().withMode(CreateMode.PERSISTENT).forPath(taskIdPath, Bytes.toBytes(value));
 
             logger.info("add task : {} to tasks queue , result success",result);
+            return true;
         } catch (Exception e) {
             logger.error("add task to tasks queue exception",e);
+            return false;
         }
 
     }

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/DateUtils.java
Patch:
@@ -291,14 +291,14 @@ public static Date getFirstDayOfMonth(Date date) {
      * get some hour of day
      *
      * @param date date
-     * @param hours hours
+     * @param offsetHour hours
      * @return some hour of day
      * */
-    public static Date getSomeHourOfDay(Date date, int hours) {
+    public static Date getSomeHourOfDay(Date date, int offsetHour) {
         Calendar cal = Calendar.getInstance();
 
         cal.setTime(date);
-        cal.set(Calendar.HOUR_OF_DAY, cal.get(Calendar.HOUR_OF_DAY) - hours);
+        cal.set(Calendar.HOUR_OF_DAY, cal.get(Calendar.HOUR_OF_DAY) + offsetHour);
         cal.set(Calendar.MINUTE, 0);
         cal.set(Calendar.SECOND, 0);
         cal.set(Calendar.MILLISECOND, 0);

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/dependent/DependentDateUtils.java
Patch:
@@ -34,7 +34,7 @@ public class DependentDateUtils {
     public static List<DateInterval> getLastHoursInterval(Date businessDate, int hourNumber){
         List<DateInterval> dateIntervals = new ArrayList<>();
         for(int index = hourNumber; index > 0; index--){
-            Date lastHour = DateUtils.getSomeHourOfDay(businessDate, index);
+            Date lastHour = DateUtils.getSomeHourOfDay(businessDate, -index);
             Date beginTime = DateUtils.getStartOfHour(lastHour);
             Date endTime = DateUtils.getEndOfHour(lastHour);
             dateIntervals.add(new DateInterval(beginTime, endTime));

File: dolphinscheduler-common/src/test/java/org/apache/dolphinscheduler/common/zk/ZKServer.java
Patch:
@@ -79,6 +79,7 @@ public void shutdown() {
      * @param port The port to listen on
      */
     public static void startLocalZkServer(final int port) {
+        startLocalZkServer(port, org.apache.commons.io.FileUtils.getTempDirectoryPath() + File.separator + "test-" + System.currentTimeMillis());
         startLocalZkServer(port, org.apache.commons.io.FileUtils.getTempDirectoryPath() + "test-" + System.currentTimeMillis());
     }
 
@@ -138,6 +139,7 @@ public static void stop() {
         try {
             stopLocalZkServer(true);
             logger.info("zk server stopped");
+
         } catch (Exception e) {
             logger.error("Failed to stop ZK ",e);
         }

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/UserMapperTest.java
Patch:
@@ -154,7 +154,7 @@ private AccessToken insertOneAccessToken(User user){
         accessToken.setToken("secrettoken");
         accessToken.setCreateTime(new Date());
         accessToken.setUpdateTime(new Date());
-        accessToken.setExpireTime(DateUtils.getSomeHourOfDay(new Date(),-1));
+        accessToken.setExpireTime(DateUtils.getSomeHourOfDay(new Date(),1));
         accessTokenMapper.insert(accessToken);
         return accessToken;
     }
@@ -356,4 +356,4 @@ public void testQueryUserByToken() {
         accessTokenMapper.deleteById(accessToken.getId());
 
     }
-}
\ No newline at end of file
+}

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterTaskExecThread.java
Patch:
@@ -91,6 +91,8 @@ public Boolean submitWaitComplete() {
     public Boolean waitTaskQuit(){
         // query new state
         taskInstance = processDao.findTaskInstanceById(taskInstance.getId());
+        logger.info("wait task: process id: {}, task id:{}, task name:{} complete",
+                this.taskInstance.getProcessInstanceId(), this.taskInstance.getId(), this.taskInstance.getName());
         // task time out
         Boolean checkTimeout = false;
         TaskTimeoutParameter taskTimeoutParameter = getTaskTimeoutParameter();

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/AbstractYarnTask.java
Patch:
@@ -68,6 +68,7 @@ public void handle() throws Exception {
     } catch (Exception e) {
       logger.error("yarn process failure", e);
       exitStatusCode = -1;
+      throw e;
     }
   }
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/dependent/DependentTask.java
Patch:
@@ -99,7 +99,7 @@ public void init(){
     }
 
     @Override
-    public void handle(){
+    public void handle() throws Exception {
         // set the name of the current thread
         String threadLoggerInfoName = String.format(Constants.TASK_LOG_INFO_FORMAT, taskProps.getTaskAppId());
         Thread.currentThread().setName(threadLoggerInfoName);
@@ -135,6 +135,7 @@ public void handle(){
         }catch (Exception e){
             logger.error(e.getMessage(),e);
             exitStatusCode = -1;
+            throw e;
         }
     }
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/python/PythonTask.java
Patch:
@@ -98,6 +98,7 @@ public void handle() throws Exception {
     } catch (Exception e) {
       logger.error("python task failure", e);
       exitStatusCode = -1;
+      throw e;
     }
   }
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/shell/ShellTask.java
Patch:
@@ -106,6 +106,7 @@ public void handle() throws Exception {
     } catch (Exception e) {
       logger.error("shell task failure", e);
       exitStatusCode = -1;
+      throw e;
     }
   }
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/sql/SqlTask.java
Patch:
@@ -261,9 +261,7 @@ public Connection executeFuncAndSql(SqlBinds mainSqlBinds,
                 Map<String, String> connParamMap = CollectionUtils.stringToMap(sqlParameters.getConnParams(),
                         SEMICOLON,
                         HIVE_CONF);
-                if(connParamMap != null){
-                    paramProp.putAll(connParamMap);
-                }
+                paramProp.putAll(connParamMap);
 
                 connection = DriverManager.getConnection(baseDataSource.getJdbcUrl(),
                         paramProp);

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/worker/task/dependent/DependentTaskTest.java
Patch:
@@ -29,7 +29,7 @@ public class DependentTaskTest {
 
 
     @Test
-    public void testDependInit(){
+    public void testDependInit() throws Exception{
 
         TaskProps taskProps = new TaskProps();
 

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/Constants.java
Patch:
@@ -439,7 +439,7 @@ public final class Constants {
     /**
      * default master commit retry interval
      */
-    public static final int defaultMasterCommitRetryInterval = 100;
+    public static final int defaultMasterCommitRetryInterval = 3000;
 
     /**
      * time unit secong to minutes

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/queue/ITaskQueue.java
Patch:
@@ -45,7 +45,7 @@ public interface ITaskQueue {
      * @param key  queue name
      * @param value
      */
-    void add(String key, String value);
+    boolean add(String key, String value);
 
     /**
      * an element pops out of the queue

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/queue/TaskQueueZkImpl.java
Patch:
@@ -118,14 +118,16 @@ public boolean checkTaskExists(String key, String task) {
      * @param value    ${processInstancePriority}_${processInstanceId}_${taskInstancePriority}_${taskId}_host1,host2,...
      */
     @Override
-    public void add(String key, String value) {
+    public boolean add(String key, String value){
         try {
             String taskIdPath = getTasksPath(key) + Constants.SINGLE_SLASH + value;
             String result = getZkClient().create().withMode(CreateMode.PERSISTENT).forPath(taskIdPath, Bytes.toBytes(value));
 
             logger.info("add task : {} to tasks queue , result success",result);
+            return true;
         } catch (Exception e) {
             logger.error("add task to tasks queue exception",e);
+            return false;
         }
 
     }

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterTaskExecThread.java
Patch:
@@ -91,6 +91,8 @@ public Boolean submitWaitComplete() {
     public Boolean waitTaskQuit(){
         // query new state
         taskInstance = processDao.findTaskInstanceById(taskInstance.getId());
+        logger.info("wait task: process id: {}, task id:{}, task name:{} complete",
+                this.taskInstance.getProcessInstanceId(), this.taskInstance.getId(), this.taskInstance.getName());
         // task time out
         Boolean checkTimeout = false;
         TaskTimeoutParameter taskTimeoutParameter = getTaskTimeoutParameter();

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/AbstractYarnTask.java
Patch:
@@ -68,6 +68,7 @@ public void handle() throws Exception {
     } catch (Exception e) {
       logger.error("yarn process failure", e);
       exitStatusCode = -1;
+      throw e;
     }
   }
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/dependent/DependentTask.java
Patch:
@@ -99,7 +99,7 @@ public void init(){
     }
 
     @Override
-    public void handle(){
+    public void handle() throws Exception {
         // set the name of the current thread
         String threadLoggerInfoName = String.format(Constants.TASK_LOG_INFO_FORMAT, taskProps.getTaskAppId());
         Thread.currentThread().setName(threadLoggerInfoName);
@@ -135,6 +135,7 @@ public void handle(){
         }catch (Exception e){
             logger.error(e.getMessage(),e);
             exitStatusCode = -1;
+            throw e;
         }
     }
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/python/PythonTask.java
Patch:
@@ -98,6 +98,7 @@ public void handle() throws Exception {
     } catch (Exception e) {
       logger.error("python task failure", e);
       exitStatusCode = -1;
+      throw e;
     }
   }
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/shell/ShellTask.java
Patch:
@@ -106,6 +106,7 @@ public void handle() throws Exception {
     } catch (Exception e) {
       logger.error("shell task failure", e);
       exitStatusCode = -1;
+      throw e;
     }
   }
 

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/worker/task/dependent/DependentTaskTest.java
Patch:
@@ -29,7 +29,7 @@ public class DependentTaskTest {
 
 
     @Test
-    public void testDependInit(){
+    public void testDependInit() throws Exception{
 
         TaskProps taskProps = new TaskProps();
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProcessDefinitionService.java
Patch:
@@ -512,7 +512,7 @@ public void exportProcessDefinitionById(User loginUser, String projectName, Inte
                                     for (int k = 0; k < dependItemList.size(); k++) {
                                         JSONObject dependentItem = dependItemList.getJSONObject(k);
                                         int definitionId = dependentItem.getInteger("definitionId");
-                                        ProcessDefinition definition = processDefineMapper.selectById(definitionId);
+                                        ProcessDefinition definition = processDefineMapper.queryByDefineId(definitionId);
                                         if(definition != null){
                                             dependentItem.put("projectName",definition.getProjectName());
                                             dependentItem.put("definitionName",definition.getName());

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/sql/SqlTask.java
Patch:
@@ -174,6 +174,9 @@ public void handle() throws Exception {
 
             // execute sql task
             con = executeFuncAndSql(mainSqlBinds, preStatementSqlBinds, postStatementSqlBinds, createFuncs);
+        } catch (Exception e) {
+            logger.error(e.getMessage(), e);
+            throw e;
         } finally {
             if (con != null) {
                 try {

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/runner/FetchTaskThread.java
Patch:
@@ -222,7 +222,7 @@ public void run() {
                             new Date(),
                             execLocalPath);
 
-                    // check and create Linux users
+                    // check and create users
                     FileUtils.createWorkDirAndUserIfAbsent(execLocalPath,
                             tenant.getTenantCode(), logger);
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterSchedulerThread.java
Patch:
@@ -101,7 +101,7 @@ public void run() {
                 if(OSUtils.checkResource(masterConfig.getMasterMaxCpuloadAvg(), masterConfig.getMasterReservedMemory())){
                     if (zkMasterClient.getZkClient().getState() == CuratorFrameworkState.STARTED) {
 
-                        // create distributed lock with the root node path of the lock space as /dolphinscheduler/lock/failover/master
+                        // create distributed lock with the root node path of the lock space as /dolphinscheduler/lock/masters
                         String znodeLock = zkMasterClient.getMasterLockPath();
 
                         mutex = new InterProcessMutex(zkMasterClient.getZkClient(), znodeLock);

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/Constants.java
Patch:
@@ -315,7 +315,7 @@ public final class Constants {
     /**
      * user name regex
      */
-    public static final Pattern REGEX_USER_NAME = Pattern.compile("^[a-zA-Z0-9_-]{3,20}$");
+    public static final Pattern REGEX_USER_NAME = Pattern.compile("^[a-zA-Z0-9._-]{3,20}$");
 
     /**
      * email regex

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/Constants.java
Patch:
@@ -315,7 +315,7 @@ public final class Constants {
     /**
      * user name regex
      */
-    public static final Pattern REGEX_USER_NAME = Pattern.compile("^[a-zA-Z0-9_-]{3,20}$");
+    public static final Pattern REGEX_USER_NAME = Pattern.compile("^[a-zA-Z0-9._-]{3,20}$");
 
     /**
      * email regex

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/ParameterUtils.java
Patch:
@@ -98,11 +98,11 @@ public static void setInParameter(int index, PreparedStatement stmt, DataType da
     }else if (dataType.equals(DataType.DOUBLE)){
       stmt.setDouble(index, Double.parseDouble(value));
     }else if (dataType.equals(DataType.DATE)){
-      stmt.setString(index, value);
+      stmt.setDate(index, java.sql.Date.valueOf(value));
     }else if (dataType.equals(DataType.TIME)){
       stmt.setString(index, value);
     }else if (dataType.equals(DataType.TIMESTAMP)){
-      stmt.setString(index, value);
+      stmt.setTimestamp(index, java.sql.Timestamp.valueOf(value));
     }else if (dataType.equals(DataType.BOOLEAN)){
       stmt.setBoolean(index,Boolean.parseBoolean(value));
     }

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/sql/SqlTask.java
Patch:
@@ -211,7 +211,7 @@ private SqlBinds getSqlAndSqlParamsMap(String sql) {
         if (StringUtils.isNotEmpty(sqlParameters.getTitle())){
             String title = ParameterUtils.convertParameterPlaceholders(sqlParameters.getTitle(),
                     ParamUtils.convert(paramsMap));
-            logger.info("SQL tile : {}",title);
+            logger.info("SQL title : {}",title);
             sqlParameters.setTitle(title);
         }
 

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/DbType.java
Patch:
@@ -32,14 +32,16 @@ public enum DbType {
    * 4 clickhouse
    * 5 oracle
    * 6 sqlserver
+   * 7 db2
    */
   MYSQL(0, "mysql"),
   POSTGRESQL(1, "postgresql"),
   HIVE(2, "hive"),
   SPARK(3, "spark"),
   CLICKHOUSE(4, "clickhouse"),
   ORACLE(5, "oracle"),
-  SQLSERVER(6, "sqlserver");
+  SQLSERVER(6, "sqlserver"),
+  DB2(7, "db2");
 
   DbType(int code, String descp){
     this.code = code;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ResourcesController.java
Patch:
@@ -314,7 +314,7 @@ public Result onlineCreateResource(@ApiIgnore @RequestAttribute(value = Constant
     ) {
         try{
             logger.info("login user {}, online create resource! fileName : {}, type : {}, suffix : {},desc : {},content : {}",
-                    loginUser.getUserName(),type,fileName,fileSuffix,description,content);
+                    loginUser.getUserName(),fileName,type,fileSuffix,description,content);
             if(StringUtils.isEmpty(content)){
                 logger.error("resource file contents are not allowed to be empty");
                 return error(Status.RESOURCE_FILE_IS_EMPTY.getCode(), RESOURCE_FILE_IS_EMPTY.getMsg());

File: dolphinscheduler-alert/src/main/java/org/apache/dolphinscheduler/alert/manager/MsgManager.java
Patch:
@@ -14,9 +14,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package cn.escheduler.alert.manager;
+package org.apache.dolphinscheduler.alert.manager;
 
-import cn.escheduler.dao.model.Alert;
+import org.apache.dolphinscheduler.dao.entity.Alert;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -28,7 +28,7 @@ public class MsgManager  {
     private static final Logger logger = LoggerFactory.getLogger(MsgManager.class);
     /**
      * SMS send
-     * @param alert
+     * @param alert the alert
      */
     public void send(Alert alert){
         logger.info("send message {}",alert);

File: dolphinscheduler-alert/src/main/java/org/apache/dolphinscheduler/alert/utils/FuncUtils.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package cn.escheduler.alert.utils;
+package org.apache.dolphinscheduler.alert.utils;
 
 public class FuncUtils {
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/ApiApplicationServer.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package cn.escheduler.api;
+package org.apache.dolphinscheduler.api;
 
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
@@ -25,7 +25,7 @@
 
 @SpringBootApplication
 @ServletComponentScan
-@ComponentScan("cn.escheduler")
+@ComponentScan("org.apache.dolphinscheduler")
 @EnableSwagger2
 public class ApiApplicationServer extends SpringBootServletInitializer {
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/dto/DefineUserDto.java
Patch:
@@ -14,14 +14,14 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package cn.escheduler.api.dto;
+package org.apache.dolphinscheduler.api.dto;
 
-import cn.escheduler.dao.model.DefinitionGroupByUser;
+import org.apache.dolphinscheduler.dao.entity.DefinitionGroupByUser;
 
 import java.util.List;
 
 /**
- *
+ * user process define dto
  */
 public class DefineUserDto {
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/dto/ScheduleParam.java
Patch:
@@ -14,13 +14,12 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package cn.escheduler.api.dto;
+package org.apache.dolphinscheduler.api.dto;
 
 import java.util.Date;
 
 /**
  * schedule parameters
- * 调度参数
  */
 public class ScheduleParam {
   private Date startTime;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/dto/TaskStateCount.java
Patch:
@@ -14,9 +14,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package cn.escheduler.api.dto;
+package org.apache.dolphinscheduler.api.dto;
 
-import cn.escheduler.common.enums.ExecutionStatus;
+import org.apache.dolphinscheduler.common.enums.ExecutionStatus;
 
 /**
  * task state count

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/UsersService.java
Patch:
@@ -97,7 +97,7 @@ public Map<String, Object> createUser(User loginUser,
 
         Map<String, Object> result = new HashMap<>(5);
         if (!CheckUtils.checkUserParams(userName, userPassword, email, phone)) {
-            putMsg(result, Status.REQUEST_PARAMS_NOT_VALID_ERROR);
+            putMsg(result, Status.REQUEST_PARAMS_NOT_VALID_ERROR,userName);
             return result;
         }
         if (!isAdmin(loginUser)) {

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/Constants.java
Patch:
@@ -325,7 +325,7 @@ public final class Constants {
     /**
      * user name regex
      */
-    public static final Pattern REGEX_USER_NAME = Pattern.compile("[a-zA-Z0-9]{3,20}");
+    public static final Pattern REGEX_USER_NAME = Pattern.compile("^[a-zA-Z0-9_-]{3,20}$");
 
     /**
      * email regex

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/zk/AbstractZKClient.java
Patch:
@@ -133,6 +133,7 @@ public void start() {
     }
 
     public void close() {
+		zkClient.getZookeeperClient().close();
 		zkClient.close();
 		logger.info("zookeeper close ...");
     }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/DataSourceService.java
Patch:
@@ -580,8 +580,8 @@ public Result delete(User loginUser, int datasourceId) {
             datasourceUserMapper.deleteByDatasourceId(datasourceId);
             putMsg(result, Status.SUCCESS);
         } catch (Exception e) {
-            logger.error("delete datasource fail",e);
-            throw new RuntimeException("delete datasource fail");
+            logger.error("delete datasource error",e);
+            throw new RuntimeException("delete datasource error");
         }
         return result;
     }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/UdfFuncService.java
Patch:
@@ -298,7 +298,7 @@ public Map<String, Object> queryResourceList(User loginUser, Integer type) {
      * @param id udf function id
      * @return delete result code
      */
-    @Transactional(value = "transactionManager",rollbackFor = Exception.class)
+    @Transactional(rollbackFor = Exception.class)
     public Result delete(int id) {
         Result result = new Result();
 

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/datasource/ConnectionFactory.java
Patch:
@@ -20,6 +20,8 @@
 import com.baomidou.mybatisplus.core.MybatisConfiguration;
 import com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor;
 import com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean;
+import org.apache.commons.configuration.ConfigurationException;
+import org.apache.commons.configuration.PropertiesConfiguration;
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.ibatis.mapping.Environment;
 import org.apache.ibatis.session.SqlSession;
@@ -30,6 +32,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.context.annotation.Bean;
+import org.springframework.stereotype.Service;
 
 import javax.sql.DataSource;
 

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/Constants.java
Patch:
@@ -471,7 +471,7 @@ public final class Constants {
     /**
      * task record configuration path
      */
-    public static final String APPLICATION_PROPERTIES = "application.properties";
+    public static final String APPLICATION_PROPERTIES = "application-dao.properties";
 
     public static final String TASK_RECORD_URL = "task.record.datasource.url";
 

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/AlertDao.java
Patch:
@@ -50,8 +50,8 @@ public class AlertDao extends AbstractBaseDao {
 
     @Override
     protected void init() {
-        alertMapper = ConnectionFactory.getSqlSession().getMapper(AlertMapper.class);
-        userAlertGroupMapper = ConnectionFactory.getSqlSession().getMapper(UserAlertGroupMapper.class);
+        alertMapper = ConnectionFactory.getMapper(AlertMapper.class);
+        userAlertGroupMapper = ConnectionFactory.getMapper(UserAlertGroupMapper.class);
     }
 
     /**

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/Application.java
Patch:
@@ -20,9 +20,6 @@
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.context.annotation.ComponentScan;
 
-/**
- * @Author: Tboy
- */
 @SpringBootApplication
 @ComponentScan("org.apache.dolphinscheduler.dao")
 public class Application {

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/utils/SpringApplicationContext.java
Patch:
@@ -23,13 +23,13 @@
 
 
 @Component
-public class SpringApplication implements ApplicationContextAware {
+public class SpringApplicationContext implements ApplicationContextAware {
 
     private static ApplicationContext applicationContext;
 
     @Override
     public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {
-        SpringApplication.applicationContext = applicationContext;
+        SpringApplicationContext.applicationContext = applicationContext;
     }
 
     public static <T> T getBean(Class<T> requiredType){

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/AbstractYarnTask.java
Patch:
@@ -19,7 +19,7 @@
 import org.apache.dolphinscheduler.dao.ProcessDao;
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
 import org.apache.dolphinscheduler.server.utils.ProcessUtils;
-import org.apache.dolphinscheduler.server.utils.SpringApplication;
+import org.apache.dolphinscheduler.server.utils.SpringApplicationContext;
 import org.slf4j.Logger;
 
 /**
@@ -48,7 +48,7 @@ public abstract class AbstractYarnTask extends AbstractTask {
    */
   public AbstractYarnTask(TaskProps taskProps, Logger logger) {
     super(taskProps, logger);
-    this.processDao = SpringApplication.getBean(ProcessDao.class);
+    this.processDao = SpringApplicationContext.getBean(ProcessDao.class);
     this.shellCommandExecutor = new ShellCommandExecutor(this::logHandle,
             taskProps.getTaskDir(),
             taskProps.getTaskAppId(),

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/dependent/DependentExecute.java
Patch:
@@ -26,7 +26,7 @@
 import org.apache.dolphinscheduler.dao.ProcessDao;
 import org.apache.dolphinscheduler.dao.entity.ProcessInstance;
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
-import org.apache.dolphinscheduler.server.utils.SpringApplication;
+import org.apache.dolphinscheduler.server.utils.SpringApplicationContext;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -39,7 +39,7 @@ public class DependentExecute {
     /**
      * process dao
      */
-    private static final ProcessDao processDao = SpringApplication.getBean(ProcessDao.class);
+    private final ProcessDao processDao = SpringApplicationContext.getBean(ProcessDao.class);
 
     /**
      * depend item list

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/dependent/DependentTask.java
Patch:
@@ -27,7 +27,7 @@
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
 import org.apache.dolphinscheduler.dao.ProcessDao;
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
-import org.apache.dolphinscheduler.server.utils.SpringApplication;
+import org.apache.dolphinscheduler.server.utils.SpringApplicationContext;
 import org.apache.dolphinscheduler.server.worker.task.AbstractTask;
 import org.apache.dolphinscheduler.server.worker.task.TaskProps;
 import org.slf4j.Logger;
@@ -88,7 +88,7 @@ public void init(){
                             taskModel.getDependItemList(), taskModel.getRelation()));
         }
 
-        this.processDao = SpringApplication.getBean(ProcessDao.class);
+        this.processDao = SpringApplicationContext.getBean(ProcessDao.class);
 
         if(taskProps.getScheduleTime() != null){
             this.dependentDate = taskProps.getScheduleTime();

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/http/HttpTask.java
Patch:
@@ -33,7 +33,7 @@
 import org.apache.dolphinscheduler.dao.ProcessDao;
 import org.apache.dolphinscheduler.dao.entity.ProcessInstance;
 import org.apache.dolphinscheduler.server.utils.ParamUtils;
-import org.apache.dolphinscheduler.server.utils.SpringApplication;
+import org.apache.dolphinscheduler.server.utils.SpringApplicationContext;
 import org.apache.dolphinscheduler.server.worker.task.AbstractTask;
 import org.apache.dolphinscheduler.server.worker.task.TaskProps;
 import org.apache.http.HttpEntity;
@@ -92,7 +92,7 @@ public class HttpTask extends AbstractTask {
      */
     public HttpTask(TaskProps props, Logger logger) {
         super(props, logger);
-        this.processDao = SpringApplication.getBean(ProcessDao.class);
+        this.processDao = SpringApplicationContext.getBean(ProcessDao.class);
     }
 
     @Override

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/processdure/ProcedureTask.java
Patch:
@@ -32,7 +32,7 @@
 import org.apache.dolphinscheduler.dao.ProcessDao;
 import org.apache.dolphinscheduler.dao.entity.DataSource;
 import org.apache.dolphinscheduler.server.utils.ParamUtils;
-import org.apache.dolphinscheduler.server.utils.SpringApplication;
+import org.apache.dolphinscheduler.server.utils.SpringApplicationContext;
 import org.apache.dolphinscheduler.server.worker.task.AbstractTask;
 import org.apache.dolphinscheduler.server.worker.task.TaskProps;
 import org.slf4j.Logger;
@@ -82,7 +82,7 @@ public ProcedureTask(TaskProps taskProps, Logger logger) {
             throw new RuntimeException("procedure task params is not valid");
         }
 
-        this.processDao = SpringApplication.getBean(ProcessDao.class);
+        this.processDao = SpringApplicationContext.getBean(ProcessDao.class);
     }
 
     @Override

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/python/PythonTask.java
Patch:
@@ -24,7 +24,7 @@
 import org.apache.dolphinscheduler.common.utils.ParameterUtils;
 import org.apache.dolphinscheduler.dao.ProcessDao;
 import org.apache.dolphinscheduler.server.utils.ParamUtils;
-import org.apache.dolphinscheduler.server.utils.SpringApplication;
+import org.apache.dolphinscheduler.server.utils.SpringApplicationContext;
 import org.apache.dolphinscheduler.server.worker.task.AbstractTask;
 import org.apache.dolphinscheduler.server.worker.task.PythonCommandExecutor;
 import org.apache.dolphinscheduler.server.worker.task.TaskProps;
@@ -76,7 +76,7 @@ public PythonTask(TaskProps taskProps, Logger logger) {
             taskProps.getTaskStartTime(),
             taskProps.getTaskTimeout(),
             logger);
-    this.processDao = SpringApplication.getBean(ProcessDao.class);
+    this.processDao = SpringApplicationContext.getBean(ProcessDao.class);
   }
 
   @Override

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/shell/ShellTask.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.dolphinscheduler.common.utils.ParameterUtils;
 import org.apache.dolphinscheduler.dao.ProcessDao;
 import org.apache.dolphinscheduler.server.utils.ParamUtils;
-import org.apache.dolphinscheduler.server.utils.SpringApplication;
+import org.apache.dolphinscheduler.server.utils.SpringApplicationContext;
 import org.apache.dolphinscheduler.server.worker.task.AbstractTask;
 import org.apache.dolphinscheduler.server.worker.task.ShellCommandExecutor;
 import org.apache.dolphinscheduler.server.worker.task.TaskProps;
@@ -84,7 +84,7 @@ public ShellTask(TaskProps taskProps, Logger logger) {
             taskProps.getTaskStartTime(),
             taskProps.getTaskTimeout(),
             logger);
-    this.processDao = SpringApplication.getBean(ProcessDao.class);
+    this.processDao = SpringApplicationContext.getBean(ProcessDao.class);
   }
 
   @Override

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/sql/SqlTask.java
Patch:
@@ -43,7 +43,7 @@
 import org.apache.dolphinscheduler.dao.entity.UdfFunc;
 import org.apache.dolphinscheduler.dao.entity.User;
 import org.apache.dolphinscheduler.server.utils.ParamUtils;
-import org.apache.dolphinscheduler.server.utils.SpringApplication;
+import org.apache.dolphinscheduler.server.utils.SpringApplicationContext;
 import org.apache.dolphinscheduler.server.utils.UDFUtils;
 import org.apache.dolphinscheduler.server.worker.task.AbstractTask;
 import org.apache.dolphinscheduler.server.worker.task.TaskProps;
@@ -97,8 +97,8 @@ public SqlTask(TaskProps taskProps, Logger logger) {
         if (!sqlParameters.checkParameters()) {
             throw new RuntimeException("sql task params is not valid");
         }
-        this.processDao = SpringApplication.getBean(ProcessDao.class);
-        this.alertDao = SpringApplication.getBean(AlertDao.class);
+        this.processDao = SpringApplicationContext.getBean(ProcessDao.class);
+        this.alertDao = SpringApplicationContext.getBean(AlertDao.class);
     }
 
     @Override

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/worker/shell/ShellCommandExecutorTest.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.dolphinscheduler.dao.ProcessDao;
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
 import org.apache.dolphinscheduler.server.utils.LoggerUtils;
-import org.apache.dolphinscheduler.server.utils.SpringApplication;
+import org.apache.dolphinscheduler.server.utils.SpringApplicationContext;
 import org.apache.dolphinscheduler.server.worker.task.AbstractTask;
 import org.apache.dolphinscheduler.server.worker.task.TaskManager;
 import org.apache.dolphinscheduler.server.worker.task.TaskProps;
@@ -47,7 +47,7 @@ public class ShellCommandExecutorTest {
 
     @Before
     public void before(){
-        processDao = SpringApplication.getBean(ProcessDao.class);
+        processDao = SpringApplicationContext.getBean(ProcessDao.class);
     }
 
     @Test

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/worker/sql/SqlExecutorTest.java
Patch:
@@ -24,7 +24,7 @@
 import org.apache.dolphinscheduler.dao.ProcessDao;
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
 import org.apache.dolphinscheduler.server.utils.LoggerUtils;
-import org.apache.dolphinscheduler.server.utils.SpringApplication;
+import org.apache.dolphinscheduler.server.utils.SpringApplicationContext;
 import org.apache.dolphinscheduler.server.worker.task.AbstractTask;
 import org.apache.dolphinscheduler.server.worker.task.TaskManager;
 import org.apache.dolphinscheduler.server.worker.task.TaskProps;
@@ -48,7 +48,7 @@ public class SqlExecutorTest {
 
     @Before
     public void before(){
-        processDao = SpringApplication.getBean(ProcessDao.class);
+        processDao = SpringApplicationContext.getBean(ProcessDao.class);
     }
 
     @Test

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/WorkerServer.java
Patch:
@@ -32,7 +32,6 @@
 import org.apache.dolphinscheduler.common.utils.OSUtils;
 import org.apache.dolphinscheduler.common.zk.AbstractZKClient;
 import org.apache.dolphinscheduler.dao.AlertDao;
-import org.apache.dolphinscheduler.dao.DaoFactory;
 import org.apache.dolphinscheduler.dao.ProcessDao;
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
 import org.apache.dolphinscheduler.server.master.AbstractServer;
@@ -76,7 +75,8 @@ public class WorkerServer extends AbstractServer {
     /**
      *  alert database access
      */
-    private final AlertDao alertDao = DaoFactory.getDaoInstance(AlertDao.class);;
+    @Autowired
+    private AlertDao alertDao;
 
     /**
      * heartbeat thread pool

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/dependent/DependentExecute.java
Patch:
@@ -23,10 +23,10 @@
 import org.apache.dolphinscheduler.common.model.DateInterval;
 import org.apache.dolphinscheduler.common.model.DependentItem;
 import org.apache.dolphinscheduler.common.utils.DependentUtils;
-import org.apache.dolphinscheduler.dao.DaoFactory;
 import org.apache.dolphinscheduler.dao.ProcessDao;
 import org.apache.dolphinscheduler.dao.entity.ProcessInstance;
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
+import org.apache.dolphinscheduler.server.utils.SpringApplication;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -39,7 +39,7 @@ public class DependentExecute {
     /**
      * process dao
      */
-    private static final ProcessDao processDao = DaoFactory.getDaoInstance(ProcessDao.class);
+    private static final ProcessDao processDao = SpringApplication.getBean(ProcessDao.class);
 
     /**
      * depend item list

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/dependent/DependentTask.java
Patch:
@@ -25,9 +25,9 @@
 import org.apache.dolphinscheduler.common.thread.Stopper;
 import org.apache.dolphinscheduler.common.utils.DependentUtils;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
-import org.apache.dolphinscheduler.dao.DaoFactory;
 import org.apache.dolphinscheduler.dao.ProcessDao;
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
+import org.apache.dolphinscheduler.server.utils.SpringApplication;
 import org.apache.dolphinscheduler.server.worker.task.AbstractTask;
 import org.apache.dolphinscheduler.server.worker.task.TaskProps;
 import org.slf4j.Logger;
@@ -88,7 +88,7 @@ public void init(){
                             taskModel.getDependItemList(), taskModel.getRelation()));
         }
 
-        this.processDao = DaoFactory.getDaoInstance(ProcessDao.class);
+        this.processDao = SpringApplication.getBean(ProcessDao.class);
 
         if(taskProps.getScheduleTime() != null){
             this.dependentDate = taskProps.getScheduleTime();

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/python/PythonTask.java
Patch:
@@ -22,15 +22,14 @@
 import org.apache.dolphinscheduler.common.task.python.PythonParameters;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
 import org.apache.dolphinscheduler.common.utils.ParameterUtils;
-import org.apache.dolphinscheduler.dao.DaoFactory;
 import org.apache.dolphinscheduler.dao.ProcessDao;
 import org.apache.dolphinscheduler.server.utils.ParamUtils;
+import org.apache.dolphinscheduler.server.utils.SpringApplication;
 import org.apache.dolphinscheduler.server.worker.task.AbstractTask;
 import org.apache.dolphinscheduler.server.worker.task.PythonCommandExecutor;
 import org.apache.dolphinscheduler.server.worker.task.TaskProps;
 import org.slf4j.Logger;
 
-
 import java.util.Map;
 
 /**
@@ -77,7 +76,7 @@ public PythonTask(TaskProps taskProps, Logger logger) {
             taskProps.getTaskStartTime(),
             taskProps.getTaskTimeout(),
             logger);
-    this.processDao = DaoFactory.getDaoInstance(ProcessDao.class);
+    this.processDao = SpringApplication.getBean(ProcessDao.class);
   }
 
   @Override

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/shell/ShellTask.java
Patch:
@@ -23,9 +23,9 @@
 import org.apache.dolphinscheduler.common.task.shell.ShellParameters;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
 import org.apache.dolphinscheduler.common.utils.ParameterUtils;
-import org.apache.dolphinscheduler.dao.DaoFactory;
 import org.apache.dolphinscheduler.dao.ProcessDao;
 import org.apache.dolphinscheduler.server.utils.ParamUtils;
+import org.apache.dolphinscheduler.server.utils.SpringApplication;
 import org.apache.dolphinscheduler.server.worker.task.AbstractTask;
 import org.apache.dolphinscheduler.server.worker.task.ShellCommandExecutor;
 import org.apache.dolphinscheduler.server.worker.task.TaskProps;
@@ -84,7 +84,7 @@ public ShellTask(TaskProps taskProps, Logger logger) {
             taskProps.getTaskStartTime(),
             taskProps.getTaskTimeout(),
             logger);
-    this.processDao = DaoFactory.getDaoInstance(ProcessDao.class);
+    this.processDao = SpringApplication.getBean(ProcessDao.class);
   }
 
   @Override

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/sql/SqlTask.java
Patch:
@@ -37,13 +37,13 @@
 import org.apache.dolphinscheduler.common.utils.CommonUtils;
 import org.apache.dolphinscheduler.common.utils.ParameterUtils;
 import org.apache.dolphinscheduler.dao.AlertDao;
-import org.apache.dolphinscheduler.dao.DaoFactory;
 import org.apache.dolphinscheduler.dao.ProcessDao;
 import org.apache.dolphinscheduler.dao.entity.DataSource;
 import org.apache.dolphinscheduler.dao.entity.ProcessInstance;
 import org.apache.dolphinscheduler.dao.entity.UdfFunc;
 import org.apache.dolphinscheduler.dao.entity.User;
 import org.apache.dolphinscheduler.server.utils.ParamUtils;
+import org.apache.dolphinscheduler.server.utils.SpringApplication;
 import org.apache.dolphinscheduler.server.utils.UDFUtils;
 import org.apache.dolphinscheduler.server.worker.task.AbstractTask;
 import org.apache.dolphinscheduler.server.worker.task.TaskProps;
@@ -97,8 +97,8 @@ public SqlTask(TaskProps taskProps, Logger logger) {
         if (!sqlParameters.checkParameters()) {
             throw new RuntimeException("sql task params is not valid");
         }
-        this.processDao = DaoFactory.getDaoInstance(ProcessDao.class);
-        this.alertDao = DaoFactory.getDaoInstance(AlertDao.class);
+        this.processDao = SpringApplication.getBean(ProcessDao.class);
+        this.alertDao = SpringApplication.getBean(AlertDao.class);
     }
 
     @Override

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/worker/shell/ShellCommandExecutorTest.java
Patch:
@@ -16,17 +16,17 @@
  */
 package org.apache.dolphinscheduler.server.worker.shell;
 
+import com.alibaba.fastjson.JSONObject;
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.ExecutionStatus;
 import org.apache.dolphinscheduler.common.model.TaskNode;
-import org.apache.dolphinscheduler.dao.DaoFactory;
 import org.apache.dolphinscheduler.dao.ProcessDao;
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
 import org.apache.dolphinscheduler.server.utils.LoggerUtils;
+import org.apache.dolphinscheduler.server.utils.SpringApplication;
 import org.apache.dolphinscheduler.server.worker.task.AbstractTask;
 import org.apache.dolphinscheduler.server.worker.task.TaskManager;
 import org.apache.dolphinscheduler.server.worker.task.TaskProps;
-import com.alibaba.fastjson.JSONObject;
 import org.junit.Before;
 import org.junit.Ignore;
 import org.junit.Test;
@@ -47,7 +47,7 @@ public class ShellCommandExecutorTest {
 
     @Before
     public void before(){
-        processDao = DaoFactory.getDaoInstance(ProcessDao.class);
+        processDao = SpringApplication.getBean(ProcessDao.class);
     }
 
     @Test

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/worker/sql/SqlExecutorTest.java
Patch:
@@ -16,18 +16,18 @@
  */
 package org.apache.dolphinscheduler.server.worker.sql;
 
+import com.alibaba.fastjson.JSONObject;
 import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.CommandType;
 import org.apache.dolphinscheduler.common.enums.ExecutionStatus;
 import org.apache.dolphinscheduler.common.model.TaskNode;
-import org.apache.dolphinscheduler.dao.DaoFactory;
 import org.apache.dolphinscheduler.dao.ProcessDao;
 import org.apache.dolphinscheduler.dao.entity.TaskInstance;
 import org.apache.dolphinscheduler.server.utils.LoggerUtils;
+import org.apache.dolphinscheduler.server.utils.SpringApplication;
 import org.apache.dolphinscheduler.server.worker.task.AbstractTask;
 import org.apache.dolphinscheduler.server.worker.task.TaskManager;
 import org.apache.dolphinscheduler.server.worker.task.TaskProps;
-import com.alibaba.fastjson.JSONObject;
 import org.junit.Before;
 import org.junit.Ignore;
 import org.junit.Test;
@@ -48,7 +48,7 @@ public class SqlExecutorTest {
 
     @Before
     public void before(){
-        processDao = DaoFactory.getDaoInstance(ProcessDao.class);
+        processDao = SpringApplication.getBean(ProcessDao.class);
     }
 
     @Test

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/configuration/AppConfiguration.java
Patch:
@@ -48,6 +48,7 @@ public LoginHandlerInterceptor loginInterceptor() {
 
   /**
    * Cookie
+   * @return local resolver
    */
   @Bean(name = "localeResolver")
   public LocaleResolver localeResolver() {
@@ -102,7 +103,7 @@ public void addCorsMappings(CorsRegistry registry) {
   /**
    * Turn off suffix-based content negotiation
    *
-   * @param configurer
+   * @param configurer configurer
    */
   @Override
   public void configureContentNegotiation(final ContentNegotiationConfigurer configurer) {

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/configuration/SwaggerConfig.java
Patch:
@@ -31,7 +31,7 @@
 
 /**
  *
- * swager2 config class <br/>
+ * swager2 config class
  *
  */
 @Configuration

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/interceptor/LoginHandlerInterceptor.java
Patch:
@@ -60,7 +60,6 @@ public class LoginHandlerInterceptor implements HandlerInterceptor {
    * @return {@code true} if the execution chain should proceed with the
    * next interceptor or the handler itself. Else, DispatcherServlet assumes
    * that this interceptor has already dealt with the response itself.
-   * @throws Exception in case of errors
    */
   @Override
   public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) {

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/utils/FourLetterWordMain.java
Patch:
@@ -42,7 +42,7 @@ public class FourLetterWordMain {
      * @param port the destination port
      * @param cmd the 4letterword
      * @return server response
-     * @throws java.io.IOException
+     * @throws java.io.IOException io exceptions
      */
     public static String send4LetterWord(String host, int port, String cmd)
             throws IOException
@@ -56,7 +56,7 @@ public static String send4LetterWord(String host, int port, String cmd)
      * @param cmd the 4letterword
      * @param timeout in milliseconds, maximum time to wait while connecting/reading data
      * @return server response
-     * @throws java.io.IOException
+     * @throws java.io.IOException io exceptions
      */
     public static String send4LetterWord(String host, int port, String cmd, int timeout)
             throws IOException

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/utils/PageInfo.java
Patch:
@@ -21,7 +21,7 @@
 /**
  * page info
  *
- * @param <T>
+ * @param <T> model
  */
 public class PageInfo<T> {
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/utils/Result.java
Patch:
@@ -19,7 +19,7 @@
 /**
  * result
  *
- * @param <T>
+ * @param <T> T
  */
 public class Result<T> {
     /**

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/utils/ZookeeperMonitor.java
Patch:
@@ -53,15 +53,15 @@ public static List<ZookeeperRecord> zookeeperInfoList(){
 
 	/**
 	 * get master servers
-	 * @return
+	 * @return master server information
 	 */
 	public List<Server> getMasterServers(){
 	    return getServersList(ZKNodeType.MASTER);
 	}
 
 	/**
 	 * master construct is the same with worker, use the master instead
-	 * @return
+	 * @return worker server informations
 	 */
 	public List<Server> getWorkerServers(){
 	    return getServersList(ZKNodeType.WORKER);

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/flink/FlinkTask.java
Patch:
@@ -34,7 +34,7 @@
 import java.util.Map;
 
 /**
- *  flink task
+ * flink task
  */
 public class FlinkTask extends AbstractYarnTask {
 
@@ -90,8 +90,8 @@ public void init() {
   }
 
   /**
-   *  create command
-   * @return
+   * create command
+   * @return command
    */
   @Override
   protected String buildCommand() {

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/AbstractBaseDao.java
Patch:
@@ -21,7 +21,9 @@
  */
 public abstract class AbstractBaseDao {
 
+  /**
+   * init
+   */
   protected abstract void init();
 
-
 }

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/DaoFactory.java
Patch:
@@ -37,9 +37,9 @@ private DaoFactory(){
 
   /**
    * get dao instance
-   *
-   * @param clazz
-   * @return  dao instance
+   * @param clazz clazz
+   * @param <T> T
+   * @return T object
    */
   @SuppressWarnings("unchecked")
   public static <T extends AbstractBaseDao> T getDaoInstance(Class<T> clazz) {

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/ProcessData.java
Patch:
@@ -47,8 +47,8 @@ public ProcessData() {
 
   /**
    *
-   * @param tasks
-   * @param globalParams
+   * @param tasks tasks
+   * @param globalParams globalParams
    */
   public ProcessData(List<TaskNode> tasks, List<Property> globalParams) {
     this.tasks = tasks;

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/TaskInstance.java
Patch:
@@ -425,8 +425,8 @@ public Boolean isTaskComplete() {
                 || (this.getState().typeIsFailure() && !taskCanRetry());
     }
     /**
-     * 判断是否可以重试
-     * @return
+     * determine if you can try again
+     * @return can try result
      */
     public boolean taskCanRetry() {
         if(this.isSubProcess()){

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/TaskInstanceMapper.java
Patch:
@@ -28,6 +28,9 @@
 import java.util.Date;
 import java.util.List;
 
+/**
+ * task instance mapper interface
+ */
 public interface TaskInstanceMapper extends BaseMapper<TaskInstance> {
 
 

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/utils/BaseDBPerformance.java
Patch:
@@ -21,14 +21,15 @@
 import java.sql.Connection;
 
 /**
- *
+ * db performance abstract class
  */
 public abstract class BaseDBPerformance {
 
 
     /**
      * return the current database performance
-     * @return
+     * @param conn connection
+     * @return MonitorRecord
      */
     protected abstract MonitorRecord getMonitorRecord(Connection conn);
 

File: dolphinscheduler-alert/src/main/java/org/apache/dolphinscheduler/alert/manager/EnterpriseWeChatManager.java
Patch:
@@ -35,7 +35,9 @@ public class EnterpriseWeChatManager {
     private static final Logger logger = LoggerFactory.getLogger(MsgManager.class);
     /**
      * Enterprise We Chat send
-     * @param alert
+     * @param alert the alert
+     * @param token the token
+     * @return the send result
      */
     public Map<String,Object> send(Alert alert, String token){
         Map<String,Object> retMap = new HashMap<>();

File: dolphinscheduler-alert/src/main/java/org/apache/dolphinscheduler/alert/manager/MsgManager.java
Patch:
@@ -28,7 +28,7 @@ public class MsgManager  {
     private static final Logger logger = LoggerFactory.getLogger(MsgManager.class);
     /**
      * SMS send
-     * @param alert
+     * @param alert the alert
      */
     public void send(Alert alert){
         logger.info("send message {}",alert);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ResourcesService.java
Patch:
@@ -108,7 +108,6 @@ public Result createResource(User loginUser,
         if (!StringUtils.equals(fileSuffix, nameSuffix)) {
             /**
              * rename file suffix and original suffix must be consistent
-             * 重命名的后缀必须与原文件后缀一致
              */
             logger.error("rename file suffix and original suffix must be consistent: {}", file.getOriginalFilename());
             putMsg(result, Status.RESOURCE_SUFFIX_FORBID_CHANGE);

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/queue/TaskQueueZkImpl.java
Patch:
@@ -137,7 +137,6 @@ public void add(String key, String value) {
      *   ${processInstancePriority}_${processInstanceId}_${taskInstancePriority}_${taskId}_host1,host2,...
      *   The tasks with the highest priority are selected by comparing the priorities of the above four levels from high to low.
      *
-     *   流程优先级_流程实例id_任务优先级_任务id_任务执行的机器id1,任务执行的机器id2,...       high <- low
      * @param  key  task queue name
      * @param  tasksNum    how many elements to poll
      * @return the task ids  to be executed

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/JSONUtils.java
Patch:
@@ -214,8 +214,7 @@ public static <K, V> Map<K, V> toMap(String json, Class<K> classK, Class<V> clas
   }
 
   /**
-   * 对象装json字符串 <p>
-   *
+   * object to json string
    * @return json string
    */
   public static String toJsonString(Object object) {

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/TaskRecordDao.java
Patch:
@@ -77,7 +77,7 @@ private static Connection getConn() {
         String password = conf.getString(Constants.TASK_RECORD_PWD);
         Connection conn = null;
         try {
-            //classLoader,加载对应驱动
+            //classLoader，load driver
             Class.forName(driver);
             conn = DriverManager.getConnection(url, username, password);
         } catch (ClassNotFoundException e) {

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/zk/ZKMasterClient.java
Patch:
@@ -138,6 +138,7 @@ public void init(){
 		}
 	}
 
+	@Override
 	public void close(){
 		try {
 			if(masterPathChildrenCache != null){

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/zk/ZKWorkerClient.java
Patch:
@@ -75,6 +75,7 @@ private void init(){
 		this.registWorker();
 	}
 
+	@Override
 	public void close(){
 		try {
 			if(workerPathChildrenCache != null){

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/IStoppable.java
Patch:
@@ -24,6 +24,6 @@ public interface IStoppable {
    * Stop this service.
    * @param cause why stopping
    */
-  public void stop(String cause);
+   void stop(String cause);
 
 }
\ No newline at end of file

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/CommandType.java
Patch:
@@ -29,7 +29,7 @@ public enum CommandType {
      * command types
      * 0 start a new process
      * 1 start a new process from current nodes
-     * 2  recover tolerance fault work flow
+     * 2 recover tolerance fault work flow
      * 3 start process from paused task nodes
      * 4 start process from failure task nodes
      * 5 complement data

File: dolphinscheduler-common/src/test/java/org/apache/dolphinscheduler/common/shell/ShellExecutorTest.java
Patch:
@@ -24,6 +24,9 @@
 import java.io.IOException;
 import java.util.concurrent.CountDownLatch;
 
+/**
+ * SHELL Taks Test
+ */
 public class ShellExecutorTest {
     private static final Logger logger = LoggerFactory.getLogger(ShellExecutorTest.class);
 

File: dolphinscheduler-common/src/test/java/org/apache/dolphinscheduler/common/threadutils/ThreadPoolExecutorsTest.java
Patch:
@@ -21,6 +21,9 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+/**
+ * Thread Pool Executor Test
+ */
 public class ThreadPoolExecutorsTest {
 
     private static final Logger logger = LoggerFactory.getLogger(ThreadPoolExecutors.class);

File: dolphinscheduler-common/src/test/java/org/apache/dolphinscheduler/common/utils/HadoopUtilsTest.java
Patch:
@@ -48,9 +48,7 @@ public void test() throws IOException {
     public void readFileTest(){
         try {
             byte[] bytes = HadoopUtils.getInstance().catFile("/dolphinscheduler/hdfs/resources/35435.sh");
-            logger.info("------------------start");
             logger.info(new String(bytes));
-            logger.info("---------------------end");
         } catch (Exception e) {
 
         }

File: dolphinscheduler-common/src/test/java/org/apache/dolphinscheduler/common/zk/StandaloneZKServerForTest.java
Patch:
@@ -48,9 +48,7 @@ public void run() {
 
                 //delete zk data dir ?
                 File zkFile = new File(System.getProperty("java.io.tmpdir"), "zookeeper");
-//                if(zkFile.exists()){
-//                    zkFile.delete();
-//                }
+
                 startStandaloneServer("2000", zkFile.getAbsolutePath(), "2181", "10", "5");
             }
         });

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/MonitorDBDao.java
Patch:
@@ -43,7 +43,7 @@ public class MonitorDBDao {
     public static final String VARIABLE_NAME = "variable_name";
 
     /**
-     * 加载配置文件
+     * load conf
      */
     private static Configuration conf;
 

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/TaskRecordDao.java
Patch:
@@ -43,7 +43,7 @@ public class TaskRecordDao {
     private static Logger logger = LoggerFactory.getLogger(TaskRecordDao.class.getName());
 
     /**
-     * 加载配置文件
+     * load conf
      */
     private static Configuration conf;
 

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/utils/cron/CycleLinks.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.List;
 
 /**
- * 链接判断工具
+ * DAG Cycle judge
  */
 public class CycleLinks extends AbstractCycle {
   private final List<AbstractCycle> cycleList = new ArrayList<>();

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/utils/DagHelperTest.java
Patch:
@@ -96,7 +96,6 @@ private DAG<String, TaskNode, TaskNodeRelation> generateDag() throws JsonProcess
         TaskNode node4 = new TaskNode();
         node4.setId("4");
         node4.setName("4");
-//        node4.setRunFlag(Constants.FLOWNODE_RUN_FLAG_FORBIDDEN);
         taskNodeList.add(node4);
 
         TaskNode node3 = new TaskNode();

File: dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/zk/StandaloneZKServerForTest.java
Patch:
@@ -50,9 +50,7 @@ public void run() {
 
                 //delete zk data dir ?
                 File zkFile = new File(System.getProperty("java.io.tmpdir"), "zookeeper");
-//                if(zkFile.exists()){
-//                    zkFile.delete();
-//                }
+
                 startStandaloneServer("2000", zkFile.getAbsolutePath(), "2181", "10", "5");
             }
         });

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/dto/DefineUserDto.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.List;
 
 /**
- *
+ * user process define dto
  */
 public class DefineUserDto {
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/dto/ScheduleParam.java
Patch:
@@ -20,7 +20,6 @@
 
 /**
  * schedule parameters
- * 调度参数
  */
 public class ScheduleParam {
   private Date startTime;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/dto/treeview/TreeViewDto.java
Patch:
@@ -53,7 +53,6 @@ public void setType(String type) {
 
     /**
      * instances list
-     * 实例列表
      */
 
     private List<Instance> instances = new ArrayList<>();

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java
Patch:
@@ -27,9 +27,7 @@ public enum Status {
     TASK_TIMEOUT_PARAMS_ERROR(10002, "task timeout parameter is not valid"),
     USER_NAME_EXIST(10003, "user name already exists"),
     USER_NAME_NULL(10004,"user name is null"),
-//    DB_OPERATION_ERROR(10005, "database operation error"),
     HDFS_OPERATION_ERROR(10006, "hdfs operation error"),
-    UPDATE_FAILED(10007, "updateProcessInstance failed"),
     TASK_INSTANCE_NOT_FOUND(10008, "task instance not found"),
     TENANT_NAME_EXIST(10009, "tenant code already exists"),
     USER_NOT_EXIST(10010, "user {0} not exists"),
@@ -176,7 +174,6 @@ public enum Status {
 
     UDF_FUNCTION_NOT_EXIST(20001, "UDF function not found"),
     UDF_FUNCTION_EXISTS(20002, "UDF function already exists"),
-//    RESOURCE_EMPTY(20003, "resource file is empty"),
     RESOURCE_NOT_EXIST(20004, "resource not exist"),
     RESOURCE_EXIST(20005, "resource already exists"),
     RESOURCE_SUFFIX_NOT_SUPPORT_VIEW(20006, "resource suffix do not support online viewing"),

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/utils/Result.java
Patch:
@@ -24,13 +24,11 @@
 public class Result<T> {
     /**
      * status
-     * 状态码
      */
     private Integer code;
 
     /**
      * message
-     * 消息
      */
     private String msg;
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/utils/ZooKeeperState.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.Scanner;
 
 /**
- *	zookeeper状态监控:4字口诀
+ *	zookeeper state monitor
  *
  */
 public class ZooKeeperState {

File: dolphinscheduler-alert/src/main/java/org/apache/dolphinscheduler/alert/AlertServer.java
Patch:
@@ -57,7 +57,7 @@ public static AlertServer getInstance(){
     }
 
     public void start(){
-        logger.info("Alert Server ready start!");
+        logger.info("alert server ready start ");
         while (Stopper.isRunning()){
             try {
                 Thread.sleep(Constants.ALERT_SCAN_INTERVEL);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/SessionService.java
Patch:
@@ -28,6 +28,7 @@
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Service;
+import org.springframework.transaction.annotation.Transactional;
 
 import javax.servlet.http.Cookie;
 import javax.servlet.http.HttpServletRequest;
@@ -80,6 +81,7 @@ public Session getSession(HttpServletRequest request)  {
    * @param ip
    * @return
    */
+  @Transactional(rollbackFor = Exception.class)
   public String createSession(User user, String ip) {
     Session session = null;
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/utils/ZooKeeperState.java
Patch:
@@ -17,11 +17,9 @@
 package org.apache.dolphinscheduler.api.utils;
 
 import org.apache.commons.lang3.StringUtils;
-import org.apache.zookeeper.client.FourLetterWordMain;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import java.io.IOException;
 import java.util.Scanner;
 
 /**

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/zk/AbstractZKClient.java
Patch:
@@ -133,7 +133,6 @@ public void start() {
     }
 
     public void close() {
-		zkClient.getZookeeperClient().close();
 		zkClient.close();
 		logger.info("zookeeper close ...");
     }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/utils/ZooKeeperState.java
Patch:
@@ -133,7 +133,7 @@ public SendThread(String cmd) {
 		public void run() {
 			try {
 				ret = FourLetterWordMain.send4LetterWord(host, port, cmd);
-			} catch (IOException e) {
+			} catch (Exception e) {
 				logger.error(e.getMessage(),e);
 				return;
 			}

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/ProcessInstanceMapperTest.java
Patch:
@@ -26,7 +26,6 @@
 import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.mortbay.jetty.servlet.AbstractSessionIdManager;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.test.context.junit4.SpringRunner;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/MasterServer.java
Patch:
@@ -161,13 +161,13 @@ public void run(ProcessDao processDao){
         Runtime.getRuntime().addShutdownHook(new Thread(new Runnable() {
             @Override
             public void run() {
-                logger.info("master server stopped");
                 if (zkMasterClient.getActiveMasterNum() <= 1) {
                     for (int i = 0; i < Constants.DOLPHINSCHEDULER_WARN_TIMES_FAILOVER; i++) {
                         zkMasterClient.getAlertDao().sendServerStopedAlert(
                                 1, OSUtils.getHost(), "Master-Server");
                     }
                 }
+                stop("shutdownhook");
             }
         }));
     }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/DataAnalysisService.java
Patch:
@@ -348,7 +348,7 @@ public Map<String, Object> countQueueState(User loginUser, int projectId) {
         for (String taskQueueStr : tasksQueueList){
             if (StringUtils.isNotEmpty(taskQueueStr)){
                 String[] splits = taskQueueStr.split("_");
-                if (splits.length == 4){
+                if (splits.length >= 4){
                     tasksQueueIds[i++]=Integer.parseInt(splits[3]);
                 }
             }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/DataAnalysisService.java
Patch:
@@ -179,7 +179,7 @@ public Map<String,Object> countDefinitionByUser(User loginUser, int projectId) {
 
         Integer[] projectIdArray = getProjectIdsArrays(loginUser, projectId);
         List<DefinitionGroupByUser> defineGroupByUsers = processDefinitionMapper.countDefinitionGroupByUser(
-                loginUser.getId(),  projectIdArray);
+                loginUser.getId(),  projectIdArray,isAdmin(loginUser));
 
         DefineUserDto dto = new DefineUserDto(defineGroupByUsers);
         result.put(Constants.DATA_LIST, dto);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProcessDefinitionService.java
Patch:
@@ -210,7 +210,7 @@ public Map<String, Object> queryProcessDefinitionListPaging(User loginUser, Stri
 
         Page<ProcessDefinition> page = new Page(pageNo, pageSize);
         IPage<ProcessDefinition> processDefinitionIPage = processDefineMapper.queryDefineListPaging(
-                page, searchVal, userId, project.getId());
+                page, searchVal, userId, project.getId(),isAdmin(loginUser));
 
         PageInfo pageInfo = new PageInfo<ProcessData>(pageNo, pageSize);
         pageInfo.setTotalCount((int)processDefinitionIPage.getTotal());

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/ProcessDefinitionMapperTest.java
Patch:
@@ -138,7 +138,7 @@ public void testQueryByDefineName() {
     public void testQueryDefineListPaging() {
         ProcessDefinition processDefinition = insertOne();
         Page<ProcessDefinition> page = new Page(1,3);
-        IPage<ProcessDefinition> processDefinitionIPage =  processDefinitionMapper.queryDefineListPaging(page, "def", 101, 1010);
+        IPage<ProcessDefinition> processDefinitionIPage =  processDefinitionMapper.queryDefineListPaging(page, "def", 101, 1010,true);
         Assert.assertNotEquals(processDefinitionIPage.getTotal(), 0);
         processDefinitionMapper.deleteById(processDefinition.getId());
     }
@@ -189,7 +189,8 @@ public void testCountDefinitionGroupByUser() {
         projectIds[0] = processDefinition.getProjectId();
         List<DefinitionGroupByUser> processDefinitions = processDefinitionMapper.countDefinitionGroupByUser(
                 processDefinition.getUserId(),
-                projectIds
+                projectIds,
+                user.getUserType() == UserType.ADMIN_USER
         );
         processDefinitionMapper.deleteById(processDefinition.getId());
         Assert.assertNotEquals(processDefinitions.size(), 0);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java
Patch:
@@ -239,6 +239,8 @@ public enum Status {
     CREATE_ACCESS_TOKEN_ERROR(70001,"create access token error"),
     GENERATE_TOKEN_ERROR(70002,"generate token error"),
     QUERY_ACCESSTOKEN_LIST_PAGING_ERROR(70003,"query access token list paging error"),
+    UPDATE_ACCESS_TOKEN_ERROR(70004,"update access token error"),
+    DELETE_ACCESS_TOKEN_ERROR(70005,"delete access token error"),
 
 
     COMMAND_STATE_COUNT_ERROR(80001,"task instance state count error"),

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/UdfFunc.java
Patch:
@@ -59,7 +59,6 @@ public class UdfFunc {
     /**
      * udf data base
      */
-    @TableField("`database`")
     private String database;
 
     /**

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProcessInstanceService.java
Patch:
@@ -45,6 +45,7 @@
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Service;
+import org.springframework.transaction.annotation.Transactional;
 
 import java.io.BufferedReader;
 import java.io.ByteArrayInputStream;
@@ -475,6 +476,7 @@ public Map<String, Object> queryParentInstanceBySubId(User loginUser, String pro
      * @param tasksQueue
      * @return
      */
+    @Transactional(rollbackFor = Exception.class)
     public Map<String, Object> deleteProcessInstanceById(User loginUser, String projectName, Integer processInstanceId,ITaskQueue tasksQueue) {
 
         Map<String, Object> result = new HashMap<>(5);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/utils/CheckUtils.java
Patch:
@@ -90,11 +90,11 @@ public static boolean checkPassword(String password) {
 
   /**
    * check phone
-   *
+   * phone can be empty.
    * @param phone
    */
   public static boolean checkPhone(String phone) {
-    return StringUtils.isNotEmpty(phone) && phone.length() > 18;
+    return StringUtils.isEmpty(phone) || phone.length() <= 11;
   }
 
 

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/datasource/ConnectionFactory.java
Patch:
@@ -51,7 +51,7 @@ public class ConnectionFactory {
     try {
       conf = new PropertiesConfiguration(Constants.APPLICATION_PROPERTIES);
     }catch (ConfigurationException e){
-      logger.error("load configuration excetpion",e);
+      logger.error("load configuration exception",e);
       System.exit(1);
     }
   }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/SchedulerService.java
Patch:
@@ -572,8 +572,8 @@ public Map<String,Object> previewSchedule(User loginUser, String projectName, St
             putMsg(result,Status.PARSE_TO_CRON_EXPRESSION_ERROR);
             return result;
         }
-        List<Date> selfFireDateList = CronUtils.getSelfFireDateList(startTime, endTime,cronExpression);
-        result.put(Constants.DATA_LIST, selfFireDateList.stream().map(t -> DateUtils.dateToString(t)).limit(Constants.PREVIEW_SCHEDULE_EXECUTE_COUNT));
+        List<Date> selfFireDateList = CronUtils.getSelfFireDateList(startTime, endTime,cronExpression,Constants.PREVIEW_SCHEDULE_EXECUTE_COUNT);
+        result.put(Constants.DATA_LIST, selfFireDateList.stream().map(t -> DateUtils.dateToString(t)));
         putMsg(result, Status.SUCCESS);
         return result;
     }

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/enums/TaskStateType.java
Patch:
@@ -29,7 +29,6 @@ public enum TaskStateType {
      */
     WAITTING, RUNNING, FINISH, FAILED, SUCCESS;
 
-
     /**
      * convert task state to execute status integer array ;
      * @param taskStateType

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/entity/Command.java
Patch:
@@ -114,7 +114,7 @@ public class Command {
     /**
      *
      */
-    @TableField("worker_group_id;")
+    @TableField("worker_group_id")
     private int workerGroupId;
 
 

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/WorkerGroupMapperTest.java
Patch:
@@ -57,8 +57,8 @@ public void testUpdate(){
         //update
         workerGroup.setName("workerGroup11");
         int update = workerGroupMapper.updateById(workerGroup);
-        Assert.assertEquals(update, 1);
         workerGroupMapper.deleteById(workerGroup.getId());
+        Assert.assertEquals(update, 1);
     }
 
     @Test

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/AlertGroupService.java
Patch:
@@ -34,6 +34,7 @@
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Service;
+import org.springframework.transaction.annotation.Transactional;
 
 import java.util.Date;
 import java.util.HashMap;
@@ -193,6 +194,7 @@ public Map<String, Object> updateAlertgroup(User loginUser, int id, String group
      * @param id
      * @return
      */
+    @Transactional(rollbackFor = Exception.class)
     public Map<String, Object> delAlertgroupById(User loginUser, int id) {
         Map<String, Object> result = new HashMap<>(5);
         result.put(Constants.STATUS, false);
@@ -202,7 +204,7 @@ public Map<String, Object> delAlertgroupById(User loginUser, int id) {
             return result;
         }
 
-
+        userAlertGroupMapper.deleteByAlertgroupId(id);
         alertGroupMapper.deleteById(id);
         putMsg(result, Status.SUCCESS);
         return result;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/UsersService.java
Patch:
@@ -625,7 +625,7 @@ public Map<String, Object> unauthorizedUser(User loginUser, Integer alertgroupId
             return result;
         }
 
-        List<User> userList = userMapper.queryAllGeneralUser();
+        List<User> userList = userMapper.selectList(null );
         List<User> resultUsers = new ArrayList<>();
         Set<User> userSet = null;
         if (userList != null && userList.size() > 0) {

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/upgrade/DolphinSchedulerManager.java
Patch:
@@ -53,7 +53,9 @@ public DolphinSchedulerManager() {
 
     public void initDolphinScheduler() {
         // Determines whether the dolphinscheduler table structure has been init
-        if(upgradeDao.isExistsTable("t_escheduler_version") || upgradeDao.isExistsTable("t_escheduler_queue")) {
+        if (upgradeDao.isExistsTable("t_escheduler_version") ||
+                upgradeDao.isExistsTable("t_ds_version") ||
+                upgradeDao.isExistsTable("t_escheduler_queue")) {
             logger.info("The database has been initialized. Skip the initialization step");
             return;
         }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/SchedulerService.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.dolphinscheduler.common.enums.Priority;
 import org.apache.dolphinscheduler.common.enums.ReleaseState;
 import org.apache.dolphinscheduler.common.enums.WarningType;
-import org.apache.dolphinscheduler.common.model.MasterServer;
+import org.apache.dolphinscheduler.common.model.Server;
 import org.apache.dolphinscheduler.common.utils.DateUtils;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
 import org.apache.dolphinscheduler.dao.ProcessDao;
@@ -334,7 +334,7 @@ public Map<String, Object> setScheduleState(User loginUser, String projectName,
         }
 
         // check master server exists
-        List<MasterServer> masterServers = monitorService.getServerListFromZK(true);
+        List<Server> masterServers = monitorService.getServerListFromZK(true);
 
 
         if (masterServers.size() == 0) {

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/utils/ZookeeperMonitor.java
Patch:
@@ -18,7 +18,7 @@
 
 import org.apache.dolphinscheduler.common.enums.ZKNodeType;
 import org.apache.dolphinscheduler.common.zk.AbstractZKClient;
-import org.apache.dolphinscheduler.common.model.MasterServer;
+import org.apache.dolphinscheduler.common.model.Server;
 import org.apache.dolphinscheduler.dao.entity.ZookeeperRecord;
 import org.apache.commons.lang3.StringUtils;
 import org.slf4j.Logger;
@@ -55,15 +55,15 @@ public static List<ZookeeperRecord> zookeeperInfoList(){
 	 * get master servers
 	 * @return
 	 */
-	public List<MasterServer> getMasterServers(){
+	public List<Server> getMasterServers(){
 	    return getServersList(ZKNodeType.MASTER);
 	}
 
 	/**
 	 * master construct is the same with worker, use the master instead
 	 * @return
 	 */
-	public List<MasterServer> getWorkerServers(){
+	public List<Server> getWorkerServers(){
 	    return getServersList(ZKNodeType.WORKER);
 	}
 

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/utils/ZookeeperMonitorUtilsTest.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.dolphinscheduler.api.utils;
 
-import org.apache.dolphinscheduler.common.model.MasterServer;
+import org.apache.dolphinscheduler.common.model.Server;
 import org.junit.Assert;
 import org.junit.Test;
 import java.util.List;
@@ -33,9 +33,9 @@ public void testGetMasterLsit(){
         ZookeeperMonitor zookeeperMonitor = new ZookeeperMonitor();
 
 
-        List<MasterServer> masterServerList = zookeeperMonitor.getMasterServers();
+        List<Server> masterServerList = zookeeperMonitor.getMasterServers();
 
-        List<MasterServer> workerServerList = zookeeperMonitor.getWorkerServers();
+        List<Server> workerServerList = zookeeperMonitor.getWorkerServers();
 
         Assert.assertTrue(masterServerList.size() >= 0);
         Assert.assertTrue(workerServerList.size() >= 0);

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/model/Server.java
Patch:
@@ -20,9 +20,9 @@
 import java.util.Date;
 
 /**
- * master server
+ * server
  */
-public class MasterServer {
+public class Server {
 
     /**
      * id

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/WorkerGroupController.java
Patch:
@@ -76,7 +76,7 @@ public Result saveWorkerGroup(@ApiIgnore @RequestAttribute(value = Constants.SES
                 loginUser.getUserName(), id, name, ipList);
 
         try {
-            Map<String, Object> result = workerGroupService.saveWorkerGroup(id, name, ipList);
+            Map<String, Object> result = workerGroupService.saveWorkerGroup(loginUser,id, name, ipList);
             return returnDataList(result);
         }catch (Exception e){
             logger.error(Status.SAVE_ERROR.getMsg(),e);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/SchedulerService.java
Patch:
@@ -304,9 +304,10 @@ public Map<String, Object> setScheduleState(User loginUser, String projectName,
         if(scheduleStatus == ReleaseState.ONLINE){
             // check process definition release state
             if(processDefinition.getReleaseState() != ReleaseState.ONLINE){
+                ProcessDefinition definition = processDefinitionMapper.selectById(scheduleObj.getProcessDefinitionId());
                 logger.info("not release process definition id: {} , name : {}",
                         processDefinition.getId(), processDefinition.getName());
-                putMsg(result, Status.PROCESS_DEFINE_NOT_RELEASE, scheduleObj.getProcessDefinitionId());
+                putMsg(result, Status.PROCESS_DEFINE_NOT_RELEASE, definition.getName());
                 return result;
             }
             // check sub process definition release state

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/AccessTokenService.java
Patch:
@@ -57,9 +57,6 @@ public class AccessTokenService extends BaseService {
      */
     public Map<String, Object> queryAccessTokenList(User loginUser, String searchVal, Integer pageNo, Integer pageSize) {
         Map<String, Object> result = new HashMap<>(5);
-        if (checkAdmin(loginUser, result)) {
-            return result;
-        }
 
         PageInfo<AccessToken> pageInfo = new PageInfo<>(pageNo, pageSize);
         Page<AccessToken> page = new Page(pageNo, pageSize);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/DataSourceService.java
Patch:
@@ -147,7 +147,7 @@ public Map<String, Object> updateDataSource(int id, User loginUser, String name,
             return result;
         }
 
-        if(loginUser.getId() != dataSource.getUserId() || loginUser.getUserType() != UserType.ADMIN_USER){
+        if(!hasPerm(loginUser, dataSource.getUserId())){
             putMsg(result, Status.USER_NO_OPERATION_PERM);
             return result;
         }
@@ -593,7 +593,7 @@ public Result delete(User loginUser, int datasourceId) {
                 putMsg(result, Status.RESOURCE_NOT_EXIST);
                 return result;
             }
-            if(loginUser.getId() != dataSource.getUserId() || loginUser.getUserType() != UserType.ADMIN_USER){
+            if(!hasPerm(loginUser, dataSource.getUserId())){
                 putMsg(result, Status.USER_NO_OPERATION_PERM);
                 return result;
             }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ResourcesService.java
Patch:
@@ -208,7 +208,7 @@ public Result updateResource(User loginUser,
             putMsg(result, Status.RESOURCE_NOT_EXIST);
             return result;
         }
-        if (loginUser.getId() != resource.getUserId() || loginUser.getUserType() != UserType.ADMIN_USER) {
+        if (!hasPerm(loginUser, resource.getUserId())) {
             putMsg(result, Status.USER_NO_OPERATION_PERM);
             return result;
         }
@@ -408,7 +408,7 @@ public Result delete(User loginUser, int resourceId) throws Exception {
             putMsg(result, Status.RESOURCE_NOT_EXIST);
             return result;
         }
-        if (loginUser.getId() != resource.getUserId() || loginUser.getUserType() != UserType.ADMIN_USER) {
+        if (!hasPerm(loginUser, resource.getUserId())) {
             putMsg(result, Status.USER_NO_OPERATION_PERM);
             return result;
         }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ExecutorController.java
Patch:
@@ -95,7 +95,7 @@ public Result startProcessInstance(@ApiIgnore @RequestAttribute(value = Constant
                     workerGroupId, timeout);
 
             if (timeout == null) {
-                timeout = org.apache.dolphinscheduler.common.Constants.MAX_TASK_TIMEOUT;
+                timeout = Constants.MAX_TASK_TIMEOUT;
             }
 
             Map<String, Object> result = execService.execProcessInstance(loginUser, projectName, processDefinitionId, scheduleTime, execType, failureStrategy,

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ResourcesService.java
Patch:
@@ -208,7 +208,7 @@ public Result updateResource(User loginUser,
             putMsg(result, Status.RESOURCE_NOT_EXIST);
             return result;
         }
-        if (loginUser.getId() != resource.getUserId()) {
+        if (loginUser.getId() != resource.getUserId() || loginUser.getUserType() != UserType.ADMIN_USER) {
             putMsg(result, Status.USER_NO_OPERATION_PERM);
             return result;
         }
@@ -408,7 +408,7 @@ public Result delete(User loginUser, int resourceId) throws Exception {
             putMsg(result, Status.RESOURCE_NOT_EXIST);
             return result;
         }
-        if (loginUser.getId() != resource.getUserId() && loginUser.getUserType() != UserType.ADMIN_USER) {
+        if (loginUser.getId() != resource.getUserId() || loginUser.getUserType() != UserType.ADMIN_USER) {
             putMsg(result, Status.USER_NO_OPERATION_PERM);
             return result;
         }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/AccessTokenController.java
Patch:
@@ -19,8 +19,8 @@
 
 import org.apache.dolphinscheduler.api.enums.Status;
 import org.apache.dolphinscheduler.api.service.AccessTokenService;
-import org.apache.dolphinscheduler.api.utils.Constants;
 import org.apache.dolphinscheduler.api.utils.Result;
+import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.utils.ParameterUtils;
 import org.apache.dolphinscheduler.dao.entity.User;
 import io.swagger.annotations.Api;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/AlertGroupController.java
Patch:
@@ -17,8 +17,8 @@
 package org.apache.dolphinscheduler.api.controller;
 
 import org.apache.dolphinscheduler.api.service.AlertGroupService;
-import org.apache.dolphinscheduler.api.utils.Constants;
 import org.apache.dolphinscheduler.api.utils.Result;
+import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.AlertType;
 import org.apache.dolphinscheduler.common.utils.ParameterUtils;
 import org.apache.dolphinscheduler.dao.entity.User;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/BaseController.java
Patch:
@@ -17,9 +17,9 @@
 package org.apache.dolphinscheduler.api.controller;
 
 import org.apache.dolphinscheduler.api.enums.Status;
-import org.apache.dolphinscheduler.api.utils.Constants;
 import org.apache.dolphinscheduler.api.utils.PageInfo;
 import org.apache.dolphinscheduler.api.utils.Result;
+import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.dao.entity.Resource;
 import org.apache.commons.lang3.StringUtils;
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/DataAnalysisController.java
Patch:
@@ -18,8 +18,8 @@
 
 
 import org.apache.dolphinscheduler.api.service.DataAnalysisService;
-import org.apache.dolphinscheduler.api.utils.Constants;
 import org.apache.dolphinscheduler.api.utils.Result;
+import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.dao.entity.User;
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiImplicitParam;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/DataSourceController.java
Patch:
@@ -18,8 +18,8 @@
 
 import org.apache.dolphinscheduler.api.enums.Status;
 import org.apache.dolphinscheduler.api.service.DataSourceService;
-import org.apache.dolphinscheduler.api.utils.Constants;
 import org.apache.dolphinscheduler.api.utils.Result;
+import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.DbType;
 import org.apache.dolphinscheduler.common.utils.CommonUtils;
 import org.apache.dolphinscheduler.common.utils.ParameterUtils;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ExecutorController.java
Patch:
@@ -20,8 +20,8 @@
 import org.apache.dolphinscheduler.api.enums.ExecuteType;
 import org.apache.dolphinscheduler.api.enums.Status;
 import org.apache.dolphinscheduler.api.service.ExecutorService;
-import org.apache.dolphinscheduler.api.utils.Constants;
 import org.apache.dolphinscheduler.api.utils.Result;
+import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.dao.entity.User;
 import io.swagger.annotations.*;
 import org.apache.dolphinscheduler.common.enums.*;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/LoggerController.java
Patch:
@@ -18,8 +18,8 @@
 
 
 import org.apache.dolphinscheduler.api.service.LoggerService;
-import org.apache.dolphinscheduler.api.utils.Constants;
 import org.apache.dolphinscheduler.api.utils.Result;
+import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.dao.entity.User;
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiImplicitParam;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/LoginController.java
Patch:
@@ -20,8 +20,8 @@
 import org.apache.dolphinscheduler.api.enums.Status;
 import org.apache.dolphinscheduler.api.service.SessionService;
 import org.apache.dolphinscheduler.api.service.UsersService;
-import org.apache.dolphinscheduler.api.utils.Constants;
 import org.apache.dolphinscheduler.api.utils.Result;
+import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.dao.entity.User;
 import io.swagger.annotations.*;
 import org.apache.commons.httpclient.HttpStatus;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/MonitorController.java
Patch:
@@ -18,8 +18,8 @@
 
 
 import org.apache.dolphinscheduler.api.service.MonitorService;
-import org.apache.dolphinscheduler.api.utils.Constants;
 import org.apache.dolphinscheduler.api.utils.Result;
+import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.dao.entity.User;
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProcessDefinitionController.java
Patch:
@@ -18,8 +18,8 @@
 
 import org.apache.dolphinscheduler.api.enums.Status;
 import org.apache.dolphinscheduler.api.service.ProcessDefinitionService;
-import org.apache.dolphinscheduler.api.utils.Constants;
 import org.apache.dolphinscheduler.api.utils.Result;
+import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.utils.ParameterUtils;
 import org.apache.dolphinscheduler.dao.entity.User;
 import io.swagger.annotations.*;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProcessInstanceController.java
Patch:
@@ -18,8 +18,8 @@
 
 import org.apache.dolphinscheduler.api.enums.Status;
 import org.apache.dolphinscheduler.api.service.ProcessInstanceService;
-import org.apache.dolphinscheduler.api.utils.Constants;
 import org.apache.dolphinscheduler.api.utils.Result;
+import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.ExecutionStatus;
 import org.apache.dolphinscheduler.common.enums.Flag;
 import org.apache.dolphinscheduler.common.queue.ITaskQueue;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProjectController.java
Patch:
@@ -20,8 +20,8 @@
 import org.apache.dolphinscheduler.api.enums.Status;
 import org.apache.dolphinscheduler.api.service.ProcessDefinitionService;
 import org.apache.dolphinscheduler.api.service.ProjectService;
-import org.apache.dolphinscheduler.api.utils.Constants;
 import org.apache.dolphinscheduler.api.utils.Result;
+import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.utils.ParameterUtils;
 import org.apache.dolphinscheduler.dao.entity.User;
 import io.swagger.annotations.Api;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/QueueController.java
Patch:
@@ -19,8 +19,8 @@
 
 import org.apache.dolphinscheduler.api.enums.Status;
 import org.apache.dolphinscheduler.api.service.QueueService;
-import org.apache.dolphinscheduler.api.utils.Constants;
 import org.apache.dolphinscheduler.api.utils.Result;
+import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.utils.ParameterUtils;
 import org.apache.dolphinscheduler.dao.entity.User;
 import io.swagger.annotations.Api;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ResourcesController.java
Patch:
@@ -19,8 +19,8 @@
 import org.apache.dolphinscheduler.api.enums.Status;
 import org.apache.dolphinscheduler.api.service.ResourcesService;
 import org.apache.dolphinscheduler.api.service.UdfFuncService;
-import org.apache.dolphinscheduler.api.utils.Constants;
 import org.apache.dolphinscheduler.api.utils.Result;
+import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.ResourceType;
 import org.apache.dolphinscheduler.common.enums.UdfType;
 import org.apache.dolphinscheduler.common.utils.ParameterUtils;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/SchedulerController.java
Patch:
@@ -36,8 +36,8 @@
 
 import java.util.Map;
 
-import static org.apache.dolphinscheduler.api.utils.Constants.SESSION_USER;
 import static org.apache.dolphinscheduler.api.enums.Status.*;
+import static org.apache.dolphinscheduler.common.Constants.SESSION_USER;
 
 /**
  * schedule controller

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/TaskInstanceController.java
Patch:
@@ -18,8 +18,8 @@
 
 
 import org.apache.dolphinscheduler.api.service.TaskInstanceService;
-import org.apache.dolphinscheduler.api.utils.Constants;
 import org.apache.dolphinscheduler.api.utils.Result;
+import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.ExecutionStatus;
 import org.apache.dolphinscheduler.common.utils.ParameterUtils;
 import org.apache.dolphinscheduler.dao.entity.User;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/TaskRecordController.java
Patch:
@@ -18,8 +18,8 @@
 
 
 import org.apache.dolphinscheduler.api.service.TaskRecordService;
-import org.apache.dolphinscheduler.api.utils.Constants;
 import org.apache.dolphinscheduler.api.utils.Result;
+import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.dao.entity.User;
 import org.apache.dolphinscheduler.api.enums.Status;
 import org.slf4j.Logger;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/TenantController.java
Patch:
@@ -19,8 +19,8 @@
 
 import org.apache.dolphinscheduler.api.enums.Status;
 import org.apache.dolphinscheduler.api.service.TenantService;
-import org.apache.dolphinscheduler.api.utils.Constants;
 import org.apache.dolphinscheduler.api.utils.Result;
+import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.utils.ParameterUtils;
 import org.apache.dolphinscheduler.dao.entity.User;
 import io.swagger.annotations.Api;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/UsersController.java
Patch:
@@ -19,8 +19,8 @@
 
 import org.apache.dolphinscheduler.api.enums.Status;
 import org.apache.dolphinscheduler.api.service.UsersService;
-import org.apache.dolphinscheduler.api.utils.Constants;
 import org.apache.dolphinscheduler.api.utils.Result;
+import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.utils.ParameterUtils;
 import org.apache.dolphinscheduler.dao.entity.User;
 import io.swagger.annotations.Api;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/WorkerGroupController.java
Patch:
@@ -20,13 +20,13 @@
 import org.apache.dolphinscheduler.api.enums.Status;
 import org.apache.dolphinscheduler.api.service.WorkerGroupService;
 import org.apache.dolphinscheduler.api.utils.Result;
+import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.utils.ParameterUtils;
 import org.apache.dolphinscheduler.dao.entity.User;
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiImplicitParam;
 import io.swagger.annotations.ApiImplicitParams;
 import io.swagger.annotations.ApiOperation;
-import org.apache.dolphinscheduler.api.utils.Constants;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/interceptor/LoginHandlerInterceptor.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.dolphinscheduler.api.interceptor;
 
 import org.apache.dolphinscheduler.api.service.SessionService;
-import org.apache.dolphinscheduler.api.utils.Constants;
+import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.dao.entity.Session;
 import org.apache.dolphinscheduler.dao.entity.User;
 import org.apache.dolphinscheduler.dao.mapper.UserMapper;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/AccessTokenService.java
Patch:
@@ -17,8 +17,8 @@
 package org.apache.dolphinscheduler.api.service;
 
 import org.apache.dolphinscheduler.api.enums.Status;
-import org.apache.dolphinscheduler.api.utils.Constants;
 import org.apache.dolphinscheduler.api.utils.PageInfo;
+import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.UserType;
 import org.apache.dolphinscheduler.dao.entity.AccessToken;
 import org.apache.dolphinscheduler.dao.entity.User;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/AlertGroupService.java
Patch:
@@ -17,9 +17,9 @@
 package org.apache.dolphinscheduler.api.service;
 
 import org.apache.dolphinscheduler.api.enums.Status;
-import org.apache.dolphinscheduler.api.utils.Constants;
 import org.apache.dolphinscheduler.api.utils.PageInfo;
 import org.apache.dolphinscheduler.api.utils.Result;
+import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.AlertType;
 import org.apache.dolphinscheduler.common.enums.UserType;
 import org.apache.dolphinscheduler.dao.entity.AlertGroup;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/BaseService.java
Patch:
@@ -17,8 +17,8 @@
 package org.apache.dolphinscheduler.api.service;
 
 import org.apache.dolphinscheduler.api.enums.Status;
-import org.apache.dolphinscheduler.api.utils.Constants;
 import org.apache.dolphinscheduler.api.utils.Result;
+import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.UserType;
 import org.apache.dolphinscheduler.common.utils.HadoopUtils;
 import org.apache.dolphinscheduler.dao.entity.User;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/DataAnalysisService.java
Patch:
@@ -21,9 +21,8 @@
 import org.apache.dolphinscheduler.api.dto.DefineUserDto;
 import org.apache.dolphinscheduler.api.dto.TaskCountDto;
 import org.apache.dolphinscheduler.api.enums.Status;
-import org.apache.dolphinscheduler.api.utils.Constants;
+import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.CommandType;
-import org.apache.dolphinscheduler.common.enums.ExecutionStatus;
 import org.apache.dolphinscheduler.common.enums.UserType;
 import org.apache.dolphinscheduler.common.queue.ITaskQueue;
 import org.apache.dolphinscheduler.common.queue.TaskQueueFactory;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/DataSourceService.java
Patch:
@@ -17,9 +17,9 @@
 package org.apache.dolphinscheduler.api.service;
 
 import org.apache.dolphinscheduler.api.enums.Status;
-import org.apache.dolphinscheduler.api.utils.Constants;
 import org.apache.dolphinscheduler.api.utils.PageInfo;
 import org.apache.dolphinscheduler.api.utils.Result;
+import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.DbType;
 import org.apache.dolphinscheduler.common.enums.UserType;
 import org.apache.dolphinscheduler.common.job.db.*;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ExecutorService.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.apache.dolphinscheduler.api.enums.ExecuteType;
 import org.apache.dolphinscheduler.api.enums.Status;
-import org.apache.dolphinscheduler.api.utils.Constants;
+import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.*;
 import org.apache.dolphinscheduler.common.utils.DateUtils;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/MonitorService.java
Patch:
@@ -17,8 +17,8 @@
 package org.apache.dolphinscheduler.api.service;
 
 import org.apache.dolphinscheduler.api.enums.Status;
-import org.apache.dolphinscheduler.api.utils.Constants;
 import org.apache.dolphinscheduler.api.utils.ZookeeperMonitor;
+import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.ZKNodeType;
 import org.apache.dolphinscheduler.dao.MonitorDBDao;
 import org.apache.dolphinscheduler.common.model.MasterServer;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProcessDefinitionService.java
Patch:
@@ -19,8 +19,8 @@
 import org.apache.dolphinscheduler.api.dto.treeview.Instance;
 import org.apache.dolphinscheduler.api.dto.treeview.TreeViewDto;
 import org.apache.dolphinscheduler.api.enums.Status;
-import org.apache.dolphinscheduler.api.utils.Constants;
 import org.apache.dolphinscheduler.api.utils.PageInfo;
+import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.*;
 import org.apache.dolphinscheduler.common.graph.DAG;
 import org.apache.dolphinscheduler.common.model.TaskNode;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProcessInstanceService.java
Patch:
@@ -19,9 +19,9 @@
 import org.apache.dolphinscheduler.api.dto.gantt.GanttDto;
 import org.apache.dolphinscheduler.api.dto.gantt.Task;
 import org.apache.dolphinscheduler.api.enums.Status;
-import org.apache.dolphinscheduler.api.utils.Constants;
 import org.apache.dolphinscheduler.api.utils.PageInfo;
 import org.apache.dolphinscheduler.api.utils.Result;
+import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.DependResult;
 import org.apache.dolphinscheduler.common.enums.ExecutionStatus;
 import org.apache.dolphinscheduler.common.enums.Flag;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProjectService.java
Patch:
@@ -17,8 +17,8 @@
 package org.apache.dolphinscheduler.api.service;
 
 import org.apache.dolphinscheduler.api.enums.Status;
-import org.apache.dolphinscheduler.api.utils.Constants;
 import org.apache.dolphinscheduler.api.utils.PageInfo;
+import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.UserType;
 import org.apache.dolphinscheduler.dao.entity.ProcessDefinition;
 import org.apache.dolphinscheduler.dao.entity.Project;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/QueueService.java
Patch:
@@ -17,9 +17,9 @@
 package org.apache.dolphinscheduler.api.service;
 
 import org.apache.dolphinscheduler.api.enums.Status;
-import org.apache.dolphinscheduler.api.utils.Constants;
 import org.apache.dolphinscheduler.api.utils.PageInfo;
 import org.apache.dolphinscheduler.api.utils.Result;
+import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.dao.entity.Queue;
 import org.apache.dolphinscheduler.dao.entity.User;
 import org.apache.dolphinscheduler.dao.mapper.QueueMapper;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ResourcesService.java
Patch:
@@ -17,9 +17,9 @@
 package org.apache.dolphinscheduler.api.service;
 
 import org.apache.dolphinscheduler.api.enums.Status;
-import org.apache.dolphinscheduler.api.utils.Constants;
 import org.apache.dolphinscheduler.api.utils.PageInfo;
 import org.apache.dolphinscheduler.api.utils.Result;
+import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.ResourceType;
 import org.apache.dolphinscheduler.common.enums.UserType;
 import org.apache.dolphinscheduler.common.utils.FileUtils;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/SchedulerService.java
Patch:
@@ -19,8 +19,8 @@
 
 import org.apache.dolphinscheduler.api.dto.ScheduleParam;
 import org.apache.dolphinscheduler.api.enums.Status;
-import org.apache.dolphinscheduler.api.utils.Constants;
 import org.apache.dolphinscheduler.api.utils.PageInfo;
+import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.FailureStrategy;
 import org.apache.dolphinscheduler.common.enums.Priority;
 import org.apache.dolphinscheduler.common.enums.ReleaseState;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/SessionService.java
Patch:
@@ -18,7 +18,7 @@
 
 
 import org.apache.dolphinscheduler.api.controller.BaseController;
-import org.apache.dolphinscheduler.api.utils.Constants;
+import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.utils.CollectionUtils;
 import org.apache.dolphinscheduler.dao.entity.Session;
 import org.apache.dolphinscheduler.dao.entity.User;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/TaskInstanceService.java
Patch:
@@ -18,8 +18,8 @@
 
 
 import org.apache.dolphinscheduler.api.enums.Status;
-import org.apache.dolphinscheduler.api.utils.Constants;
 import org.apache.dolphinscheduler.api.utils.PageInfo;
+import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.ExecutionStatus;
 import org.apache.dolphinscheduler.common.utils.CollectionUtils;
 import org.apache.dolphinscheduler.common.utils.DateUtils;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/TaskRecordService.java
Patch:
@@ -17,8 +17,8 @@
 package org.apache.dolphinscheduler.api.service;
 
 import org.apache.dolphinscheduler.api.enums.Status;
-import org.apache.dolphinscheduler.api.utils.Constants;
 import org.apache.dolphinscheduler.api.utils.PageInfo;
+import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.dao.TaskRecordDao;
 import org.apache.dolphinscheduler.dao.entity.TaskRecord;
 import org.slf4j.Logger;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/TenantService.java
Patch:
@@ -20,10 +20,9 @@
 import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.dolphinscheduler.api.enums.Status;
-import org.apache.dolphinscheduler.api.utils.Constants;
 import org.apache.dolphinscheduler.api.utils.PageInfo;
 import org.apache.dolphinscheduler.api.utils.Result;
-import org.apache.dolphinscheduler.common.enums.ExecutionStatus;
+import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.utils.CollectionUtils;
 import org.apache.dolphinscheduler.common.utils.HadoopUtils;
 import org.apache.dolphinscheduler.common.utils.PropertyUtils;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/UdfFuncService.java
Patch:
@@ -17,9 +17,9 @@
 package org.apache.dolphinscheduler.api.service;
 
 import org.apache.dolphinscheduler.api.enums.Status;
-import org.apache.dolphinscheduler.api.utils.Constants;
 import org.apache.dolphinscheduler.api.utils.PageInfo;
 import org.apache.dolphinscheduler.api.utils.Result;
+import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.UdfType;
 import org.apache.dolphinscheduler.common.utils.PropertyUtils;
 import org.apache.dolphinscheduler.dao.entity.Resource;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/UsersService.java
Patch:
@@ -18,9 +18,9 @@
 
 import org.apache.dolphinscheduler.api.enums.Status;
 import org.apache.dolphinscheduler.api.utils.CheckUtils;
-import org.apache.dolphinscheduler.api.utils.Constants;
 import org.apache.dolphinscheduler.api.utils.PageInfo;
 import org.apache.dolphinscheduler.api.utils.Result;
+import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.ResourceType;
 import org.apache.dolphinscheduler.common.enums.UserType;
 import org.apache.dolphinscheduler.common.utils.CollectionUtils;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/WorkerGroupService.java
Patch:
@@ -17,9 +17,8 @@
 package org.apache.dolphinscheduler.api.service;
 
 import org.apache.dolphinscheduler.api.enums.Status;
-import org.apache.dolphinscheduler.api.utils.Constants;
 import org.apache.dolphinscheduler.api.utils.PageInfo;
-import org.apache.dolphinscheduler.common.enums.ExecutionStatus;
+import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.utils.CollectionUtils;
 import org.apache.dolphinscheduler.dao.entity.ProcessInstance;
 import org.apache.dolphinscheduler.dao.entity.User;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/utils/CheckUtils.java
Patch:
@@ -18,6 +18,7 @@
 
 
 import org.apache.dolphinscheduler.api.enums.Status;
+import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.task.AbstractParameters;
 import org.apache.dolphinscheduler.common.utils.JSONUtils;
 import org.apache.dolphinscheduler.common.utils.TaskParametersUtils;

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/DataAnalysisServiceTest.java
Patch:
@@ -18,7 +18,7 @@
 
 import org.apache.dolphinscheduler.api.ApiApplicationServer;
 import org.apache.dolphinscheduler.api.enums.Status;
-import org.apache.dolphinscheduler.api.utils.Constants;
+import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.UserType;
 import org.apache.dolphinscheduler.dao.entity.User;
 import org.junit.Assert;

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/DataSourceServiceTest.java
Patch:
@@ -18,7 +18,7 @@
 
 import org.apache.dolphinscheduler.api.ApiApplicationServer;
 import org.apache.dolphinscheduler.api.enums.Status;
-import org.apache.dolphinscheduler.api.utils.Constants;
+import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.DbType;
 import org.apache.dolphinscheduler.common.enums.UserType;
 import org.apache.dolphinscheduler.dao.entity.User;

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ExecutorServiceTest.java
Patch:
@@ -18,7 +18,7 @@
 
 import org.apache.dolphinscheduler.api.ApiApplicationServer;
 import org.apache.dolphinscheduler.api.enums.Status;
-import org.apache.dolphinscheduler.api.utils.Constants;
+import org.apache.dolphinscheduler.common.Constants;
 import org.junit.Assert;
 import org.junit.Ignore;
 import org.junit.Test;

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProcessDefinitionServiceTest.java
Patch:
@@ -18,7 +18,7 @@
 
 import org.apache.dolphinscheduler.api.ApiApplicationServer;
 import org.apache.dolphinscheduler.api.enums.Status;
-import org.apache.dolphinscheduler.api.utils.Constants;
+import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.UserType;
 import org.apache.dolphinscheduler.dao.entity.User;
 import com.alibaba.fastjson.JSON;

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProcessInstanceServiceTest.java
Patch:
@@ -18,7 +18,7 @@
 
 import org.apache.dolphinscheduler.api.ApiApplicationServer;
 import org.apache.dolphinscheduler.api.enums.Status;
-import org.apache.dolphinscheduler.api.utils.Constants;
+import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.DependResult;
 import org.apache.dolphinscheduler.common.enums.ExecutionStatus;
 import org.apache.dolphinscheduler.common.enums.UserType;

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ResourcesServiceTest.java
Patch:
@@ -18,7 +18,7 @@
 
 import org.apache.dolphinscheduler.api.ApiApplicationServer;
 import org.apache.dolphinscheduler.api.enums.Status;
-import org.apache.dolphinscheduler.api.utils.Constants;
+import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.ResourceType;
 import org.apache.dolphinscheduler.common.enums.UserType;
 import org.apache.dolphinscheduler.dao.entity.User;

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/SchedulerServiceTest.java
Patch:
@@ -18,7 +18,7 @@
 
 import org.apache.dolphinscheduler.api.ApiApplicationServer;
 import org.apache.dolphinscheduler.api.enums.Status;
-import org.apache.dolphinscheduler.api.utils.Constants;
+import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.ReleaseState;
 import org.apache.dolphinscheduler.common.enums.UserType;
 import org.apache.dolphinscheduler.dao.entity.Project;

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/TaskInstanceServiceTest.java
Patch:
@@ -18,8 +18,8 @@
 
 import org.apache.dolphinscheduler.api.ApiApplicationServer;
 import org.apache.dolphinscheduler.api.enums.Status;
-import org.apache.dolphinscheduler.api.utils.Constants;
 import org.apache.dolphinscheduler.api.utils.PageInfo;
+import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.UserType;
 import org.apache.dolphinscheduler.dao.entity.User;
 import org.junit.Assert;

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/TenantServiceTest.java
Patch:
@@ -18,7 +18,7 @@
 
 import org.apache.dolphinscheduler.api.ApiApplicationServer;
 import org.apache.dolphinscheduler.api.enums.Status;
-import org.apache.dolphinscheduler.api.utils.Constants;
+import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.UserType;
 import org.apache.dolphinscheduler.dao.entity.User;
 import org.junit.Assert;

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/UdfFuncServiceTest.java
Patch:
@@ -18,8 +18,8 @@
 
 import org.apache.dolphinscheduler.api.ApiApplicationServer;
 import org.apache.dolphinscheduler.api.enums.Status;
-import org.apache.dolphinscheduler.api.utils.Constants;
 import org.apache.dolphinscheduler.api.utils.PageInfo;
+import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.UserType;
 import org.apache.dolphinscheduler.dao.entity.User;
 import org.junit.Assert;

File: dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/UsersServiceTest.java
Patch:
@@ -18,7 +18,7 @@
 
 import org.apache.dolphinscheduler.api.ApiApplicationServer;
 import org.apache.dolphinscheduler.api.enums.Status;
-import org.apache.dolphinscheduler.api.utils.Constants;
+import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.UserType;
 import org.apache.dolphinscheduler.dao.entity.User;
 import org.junit.Assert;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/utils/SparkArgsUtils.java
Patch:
@@ -55,7 +55,7 @@ public static List<String> buildArgs(SparkParameters param) {
         if(param.getProgramType() !=null ){
             if(param.getProgramType()!=ProgramType.PYTHON){
                 if (StringUtils.isNotEmpty(param.getMainClass())) {
-                    args.add(Constants.CLASS);
+                    args.add(Constants.MAIN_CLASS);
                     args.add(param.getMainClass());
                 }
             }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java
Patch:
@@ -168,6 +168,8 @@ public enum Status {
     DELETE_TENANT_BY_ID_FAIL_DEFINES(100143,"delete tenant by id fail, for there are {0} process definitions using it"),
     DELETE_TENANT_BY_ID_FAIL_USERS(100144,"delete tenant by id fail, for there are {0} users using it"),
 
+    DELETE_WORKER_GROUP_BY_ID_FAIL(100143,"delete worker group by id fail, for there are {0} process instances in executing using it"),
+
     UDF_FUNCTION_NOT_EXIST(20001, "UDF function not found"),
     UDF_FUNCTION_EXISTS(20002, "UDF function already exists"),
 //    RESOURCE_EMPTY(20003, "resource file is empty"),

File: dolphinscheduler-alert/src/main/java/org/apache/dolphinscheduler/alert/utils/Constants.java
Patch:
@@ -139,6 +139,8 @@ public class Constants {
 
     public static final String MARKDOWN_ENTER = "\n";
 
+    public static final String ENTERPRISE_WECHAT_ENABLE = "enterprise.wechat.enable";
+
     public static final String ENTERPRISE_WECHAT_CORP_ID = "enterprise.wechat.corp.id";
 
     public static final String ENTERPRISE_WECHAT_SECRET = "enterprise.wechat.secret";

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java
Patch:
@@ -165,6 +165,8 @@ public enum Status {
     PARSE_TO_CRON_EXPRESSION_ERROR(10140,"parse cron to cron expression error"),
     SCHEDULE_START_TIME_END_TIME_SAME(10141,"The start time must not be the same as the end"),
     DELETE_TENANT_BY_ID_FAIL(100142,"delete tenant by id fail, for there are {0} process instances in executing using it"),
+    DELETE_TENANT_BY_ID_FAIL_DEFINES(100143,"delete tenant by id fail, for there are {0} process definitions using it"),
+    DELETE_TENANT_BY_ID_FAIL_USERS(100144,"delete tenant by id fail, for there are {0} users using it"),
 
     UDF_FUNCTION_NOT_EXIST(20001, "UDF function not found"),
     UDF_FUNCTION_EXISTS(20002, "UDF function already exists"),

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/ProcessDefinitionMapper.java
Patch:
@@ -41,6 +41,8 @@ IPage<ProcessDefinition> queryDefineListPaging(IPage<ProcessDefinition> page,
 
     List<ProcessDefinition> queryDefinitionListByIdList(@Param("ids") Integer[] ids);
 
+    List<ProcessDefinition> queryDefinitionListByTenant(@Param("tenantId") int tenantId);
+
     List<DefinitionGroupByUser> countDefinitionGroupByUser(
             @Param("userId") Integer userId,
             @Param("projectIds") Integer[] projectIds);

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/UserMapper.java
Patch:
@@ -40,6 +40,7 @@ IPage<User> queryUserPaging(Page page,
 
     List<User> queryUserListByAlertGroupId(@Param("alertgroupId") int alertgroupId);
 
+    List<User> queryUserListByTenant(@Param("tenantId") int tenantId);
 
     User queryTenantCodeByUserId(@Param("userId") int userId);
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/runner/FetchTaskThread.java
Patch:
@@ -179,7 +179,7 @@ public void run() {
                     taskInstId = getTaskInstanceId(taskQueueStr);
 
                     // mainly to wait for the master insert task to succeed
-                    waitForMasterEnterQueue();
+                    waitForTaskInstance();
 
                     taskInstance = processDao.getTaskInstanceDetailByTaskId(taskInstId);
 
@@ -304,10 +304,10 @@ private boolean checkThreadCount(ThreadPoolExecutor poolExecutor) {
     }
 
     /**
-     *  mainly to wait for the master insert task to succeed
+     *  wait for task instance exists, because of db action would be delayed.
      * @throws Exception
      */
-    private void waitForMasterEnterQueue()throws Exception{
+    private void waitForTaskInstance()throws Exception{
         int retryTimes = 30;
         while (taskInstance == null && retryTimes > 0) {
             Thread.sleep(Constants.SLEEP_TIME_MILLIS);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/UsersService.java
Patch:
@@ -623,7 +623,7 @@ public Map<String, Object> unauthorizedUser(User loginUser, Integer alertgroupId
             return result;
         }
 
-        List<User> userList = userMapper.selectList(null);
+        List<User> userList = userMapper.queryAllGeneralUser();
         List<User> resultUsers = new ArrayList<>();
         Set<User> userSet = null;
         if (userList != null && userList.size() > 0) {

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/TenantController.java
Patch:
@@ -203,7 +203,7 @@ public Result updateTenant(@ApiIgnore @RequestAttribute(value = Constants.SESSIO
     @ResponseStatus(HttpStatus.OK)
     public Result deleteTenantById(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,
                                    @RequestParam(value = "id") int id) {
-        logger.info("login user {}, delete tenant, tenantCode: {},", loginUser.getUserName(), id);
+        logger.info("login user {}, delete tenant, tenantId: {},", loginUser.getUserName(), id);
         try {
             Map<String, Object> result = tenantService.deleteTenantById(loginUser,id);
             return returnDataList(result);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java
Patch:
@@ -164,7 +164,7 @@ public enum Status {
     PREVIEW_SCHEDULE_ERROR(10139,"preview schedule error"),
     PARSE_TO_CRON_EXPRESSION_ERROR(10140,"parse cron to cron expression error"),
     SCHEDULE_START_TIME_END_TIME_SAME(10141,"The start time must not be the same as the end"),
-
+    DELETE_TENANT_BY_ID_FAIL(100142,"delete tenant by id fail, for there are {0} process instances in executing using it"),
 
     UDF_FUNCTION_NOT_EXIST(20001, "UDF function not found"),
     UDF_FUNCTION_EXISTS(20002, "UDF function already exists"),

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/Constants.java
Patch:
@@ -484,6 +484,7 @@ public final class Constants {
     public static final String USER = "user";
     public static final String PASSWORD = "password";
     public static final String XXXXXX = "******";
+    public static final String NULL = "NULL";
 
     public static  String TASK_RECORD_TABLE_HIVE_LOG = "eamp_hive_log_hd";
 

File: dolphinscheduler-alert/src/main/java/org/apache/dolphinscheduler/alert/utils/EnterpriseWeChatUtils.java
Patch:
@@ -214,7 +214,7 @@ public static String markdownText(String title,String content){
             }
 
             StringBuilder contents = new StringBuilder(100);
-            contents.append(String.format("`%s`\n",title));
+            contents.append(String.format("`%s`%n",title));
             for (String str : list){
                 contents.append(Constants.MARKDOWN_QUOTE);
                 contents.append(str);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProcessDefinitionService.java
Patch:
@@ -870,7 +870,7 @@ public Map<String, Object> getTaskNodeListByDefinitionId(Integer defineId) throw
         ProcessDefinition processDefinition = processDefineMapper.selectById(defineId);
         if (processDefinition == null) {
             logger.info("process define not exists");
-            putMsg(result, Status.PROCESS_DEFINE_NOT_EXIST, processDefinition.getId());
+            putMsg(result, Status.PROCESS_DEFINE_NOT_EXIST, defineId);
             return result;
         }
 

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/FileUtils.java
Patch:
@@ -153,8 +153,9 @@ public static boolean writeContent2File(String content, String filePath) {
         BufferedWriter bufferedWriter = null;
         try {
             File distFile = new File(filePath);
-            if (!distFile.getParentFile().exists()) {
-                distFile.getParentFile().mkdirs();
+            if (!distFile.getParentFile().exists() && !distFile.getParentFile().mkdirs()) {
+                FileUtils.logger.error("mkdir parent failed");
+                return false;
             }
             bufferedReader = new BufferedReader(new StringReader(content));
             bufferedWriter = new BufferedWriter(new FileWriter(distFile));

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/OSUtils.java
Patch:
@@ -156,7 +156,9 @@ public static List<String> getUserList() {
       logger.error(e.getMessage(), e);
     } finally {
       try {
-        bufferedReader.close();
+        if (bufferedReader != null) {
+          bufferedReader.close();
+        }
       } catch (IOException e) {
         logger.error(e.getMessage(), e);
       }

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/AbstractTask.java
Patch:
@@ -181,6 +181,7 @@ private Class getCurTaskParamsClass(){
                 break;
             case FLINK:
                 paramsClass = FlinkParameters.class;
+                break;
             case PYTHON:
                 paramsClass = PythonParameters.class;
                 break;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/sql/SqlTask.java
Patch:
@@ -303,7 +303,7 @@ public Connection executeFuncAndSql(SqlBinds mainSqlBinds,
                         }
                         resultJSONArray.add(mapOfColValues);
                     }
-
+                    resultSet.close();
                     logger.debug("execute sql : {}", JSONObject.toJSONString(resultJSONArray, SerializerFeature.WriteMapNullValue));
 
                     // if there is a result set

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/WorkerGroupController.java
Patch:
@@ -110,7 +110,7 @@ public Result queryAllWorkerGroupsPaging(@ApiIgnore @RequestAttribute(value = Co
 
         try {
             searchVal = ParameterUtils.handleEscapes(searchVal);
-            Map<String, Object> result = workerGroupService.queryAllGroupPaging(pageNo, pageSize, searchVal);
+            Map<String, Object> result = workerGroupService.queryAllGroupPaging(loginUser,pageNo, pageSize, searchVal);
             return returnDataListPaging(result);
         }catch (Exception e){
             logger.error(Status.SAVE_ERROR.getMsg(),e);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/AccessTokenService.java
Patch:
@@ -57,6 +57,9 @@ public class AccessTokenService extends BaseService {
      */
     public Map<String, Object> queryAccessTokenList(User loginUser, String searchVal, Integer pageNo, Integer pageSize) {
         Map<String, Object> result = new HashMap<>(5);
+        if (checkAdmin(loginUser, result)) {
+            return result;
+        }
 
         PageInfo<AccessToken> pageInfo = new PageInfo<>(pageNo, pageSize);
         Page<AccessToken> page = new Page(pageNo, pageSize);

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/AlertGroupService.java
Patch:
@@ -81,6 +81,9 @@ public HashMap<String, Object> queryAlertgroup() {
     public Map<String, Object> listPaging(User loginUser, String searchVal, Integer pageNo, Integer pageSize) {
 
         Map<String, Object> result = new HashMap<>(5);
+        if (checkAdmin(loginUser, result)) {
+            return result;
+        }
 
         Page<AlertGroup> page = new Page(pageNo, pageSize);
         IPage<AlertGroup> alertGroupIPage = alertGroupMapper.queryAlertGroupPage(

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/AccessTokenService.java
Patch:
@@ -117,7 +117,7 @@ public Map<String, Object> createToken(int userId, String expireTime, String tok
         if (insert > 0) {
             putMsg(result, Status.SUCCESS);
         } else {
-            putMsg(result, Status.CREATE_ALERT_GROUP_ERROR);
+            putMsg(result, Status.CREATE_ACCESS_TOKEN_ERROR);
         }
 
         return result;

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/AccessTokenService.java
Patch:
@@ -146,8 +146,7 @@ public Map<String, Object> generateToken(int userId, String expireTime) {
     public Map<String, Object> delAccessTokenById(User loginUser, int id) {
         Map<String, Object> result = new HashMap<>(5);
         //only admin can operate
-        if (!isAdmin(loginUser)) {
-            putMsg(result, Status.USER_NOT_EXIST, id);
+        if (checkAdmin(loginUser, result)) {
             return result;
         }
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProcessDefinitionService.java
Patch:
@@ -589,8 +589,8 @@ public void exportProcessDefinitionById(User loginUser, String projectName, Inte
                     Schedule schedule = schedules.get(0);
                     row.put("scheduleWarningType", schedule.getWarningType());
                     row.put("scheduleWarningGroupId", schedule.getWarningGroupId());
-                    row.put("scheduleStartTime", schedule.getStartTime());
-                    row.put("scheduleEndTime", schedule.getEndTime());
+                    row.put("scheduleStartTime", DateUtils.dateToString(schedule.getStartTime()));
+                    row.put("scheduleEndTime", DateUtils.dateToString(schedule.getEndTime()));
                     row.put("scheduleCrontab", schedule.getCrontab());
                     row.put("scheduleFailureStrategy", schedule.getFailureStrategy());
                     row.put("scheduleReleaseState", ReleaseState.OFFLINE);
@@ -749,6 +749,7 @@ public Map<String, Object> importProcessDefinition(User loginUser, MultipartFile
                     scheduleObj.setUserId(loginUser.getId());
                     scheduleObj.setUserName(loginUser.getUserName());
 
+
                     scheduleCrontab = json.get("scheduleCrontab").toString();
                     scheduleObj.setCrontab(scheduleCrontab);
                     if (ObjectUtils.allNotNull(json.get("scheduleStartTime"))) {

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/upgrade/MysqlUpgradeDao.java
Patch:
@@ -55,7 +55,7 @@ public boolean isExistsTable(String tableName) {
         ResultSet rs = null;
         Connection conn = null;
         try {
-            conn = ConnectionFactory.getDataSource().getConnection();
+            conn = dataSource.getConnection();
             rs = conn.getMetaData().getTables(null, null, tableName, null);
             if (rs.next()) {
                 return true;
@@ -81,7 +81,7 @@ public boolean isExistsTable(String tableName) {
     public boolean isExistsColumn(String tableName,String columnName) {
         Connection conn = null;
         try {
-            conn = ConnectionFactory.getDataSource().getConnection();
+            conn = dataSource.getConnection();
             ResultSet rs = conn.getMetaData().getColumns(null,null,tableName,columnName);
             if (rs.next()) {
                 return true;

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/upgrade/PostgresqlUpgradeDao.java
Patch:
@@ -58,7 +58,7 @@ public static String getSchema(){
         PreparedStatement pstmt = null;
         ResultSet resultSet = null;
         try {
-            conn = ConnectionFactory.getDataSource().getConnection();
+            conn = dataSource.getConnection();
             pstmt = conn.prepareStatement("select current_schema()");
             resultSet = pstmt.executeQuery();
             while (resultSet.next()){
@@ -84,7 +84,7 @@ public boolean isExistsTable(String tableName) {
         Connection conn = null;
         ResultSet rs = null;
         try {
-            conn = ConnectionFactory.getDataSource().getConnection();
+            conn = dataSource.getConnection();
 
             rs = conn.getMetaData().getTables(null, schema, tableName, null);
             if (rs.next()) {
@@ -112,7 +112,7 @@ public boolean isExistsColumn(String tableName,String columnName) {
         Connection conn = null;
         ResultSet rs = null;
         try {
-            conn = ConnectionFactory.getDataSource().getConnection();
+            conn = dataSource.getConnection();
             rs = conn.getMetaData().getColumns(null,schema,tableName,columnName);
             if (rs.next()) {
                 return true;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/runner/FetchTaskThread.java
Patch:
@@ -192,6 +192,7 @@ public void run() {
                     // set queue for process instance, user-specified queue takes precedence over tenant queue
                     String userQueue = processDao.queryUserQueueByProcessInstanceId(taskInstance.getProcessInstanceId());
                     taskInstance.getProcessInstance().setQueue(StringUtils.isEmpty(userQueue) ? tenant.getQueue() : userQueue);
+                    taskInstance.getProcessInstance().setTenantCode(tenant.getTenantCode());
 
                     logger.info("worker fetch taskId : {} from queue ", taskInstId);
 

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/LoggerController.java
Patch:
@@ -95,7 +95,7 @@ public ResponseEntity downloadTaskLog(@ApiIgnore @RequestAttribute(value = Const
             byte[] logBytes = loggerService.getLogBytes(taskInstanceId);
             return ResponseEntity
                     .ok()
-                    .header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\"" + System.currentTimeMillis() + ".queryLog" + "\"")
+                    .header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\"" + System.currentTimeMillis() + ".log" + "\"")
                     .body(logBytes);
         } catch (Exception e) {
             logger.error(Status.DOWNLOAD_TASK_INSTANCE_LOG_FILE_ERROR.getMsg(), e);

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/ProcessDao.java
Patch:
@@ -580,9 +580,9 @@ private ProcessInstance constructProcessInstance(Command command, String host){
             //reset command parameter
             if(processInstance.getCommandParam() != null){
                 Map<String, String> processCmdParam = JSONUtils.toMap(processInstance.getCommandParam());
-                for(String key : processCmdParam.keySet()){
-                    if(!cmdParam.containsKey(key)){
-                        cmdParam.put(key,processCmdParam.get(key));
+                for(Map.Entry<String, String> entry: processCmdParam.entrySet()) {
+                    if(!cmdParam.containsKey(entry.getKey())){
+                        cmdParam.put(entry.getKey(), entry.getValue());
                     }
                 }
             }

File: dolphinscheduler-alert/src/main/java/org/apache/dolphinscheduler/alert/utils/MailUtils.java
Patch:
@@ -357,7 +357,7 @@ private static void attachContent(Collection<String> receiversCc, String title,
         ExcelUtils.genExcelFile(content,title,xlsFilePath);
         File file = new File(xlsFilePath + Constants.SINGLE_SLASH +  title + Constants.EXCEL_SUFFIX_XLS);
         part2.attachFile(file);
-        part2.setFileName(MimeUtility.encodeText(title + Constants.EXCEL_SUFFIX_XLS));
+        part2.setFileName(MimeUtility.encodeText(title + Constants.EXCEL_SUFFIX_XLS,Constants.UTF_8,"B"));
         // add components to collection
         partList.addBodyPart(part1);
         partList.addBodyPart(part2);

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/Constants.java
Patch:
@@ -368,7 +368,7 @@ public final class Constants {
     /**
      * heartbeat threads number
      */
-    public static final int defaulWorkerHeartbeatThreadNum = 5;
+    public static final int defaulWorkerHeartbeatThreadNum = 1;
 
     /**
      * heartbeat interval
@@ -431,7 +431,7 @@ public final class Constants {
     /**
      * default master heartbeat thread number
      */
-    public static final int defaulMasterHeartbeatThreadNum = 5;
+    public static final int defaulMasterHeartbeatThreadNum = 1;
 
 
     /**

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/AlertDao.java
Patch:
@@ -162,11 +162,11 @@ public List<Alert> listWaitExecutionAlert(){
 
     /**
      * list user information by alert group id
-     * @param alergroupId
+     * @param alertgroupId
      * @return
      */
-    public List<User> listUserByAlertgroupId(int alergroupId){
-        return userAlertGroupMapper.listUserByAlertgroupId(alergroupId);
+    public List<User> listUserByAlertgroupId(int alertgroupId){
+        return userAlertGroupMapper.listUserByAlertgroupId(alertgroupId);
     }
 
 

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/dependent/DependentTask.java
Patch:
@@ -81,7 +81,7 @@ public void init(){
     @Override
     public void handle(){
         // set the name of the current thread
-        String threadLoggerInfoName = String.format("TaskLogInfo-%s", taskProps.getTaskAppId());
+        String threadLoggerInfoName = String.format(Constants.TASK_LOG_INFO_FORMAT, taskProps.getTaskAppId());
         Thread.currentThread().setName(threadLoggerInfoName);
 
         try{

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/http/HttpTask.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.dolphinscheduler.server.worker.task.http;
 
 
+import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.HttpMethod;
 import org.apache.dolphinscheduler.common.enums.HttpParametersType;
 import org.apache.dolphinscheduler.common.process.HttpProperty;
@@ -53,6 +54,7 @@
 import java.util.List;
 import java.util.Map;
 
+
 /**
  * http task
  */
@@ -92,7 +94,7 @@ public void init() {
 
     @Override
     public void handle() throws Exception {
-        String threadLoggerInfoName = String.format("TaskLogInfo-%s", taskProps.getTaskAppId());
+        String threadLoggerInfoName = String.format(Constants.TASK_LOG_INFO_FORMAT, taskProps.getTaskAppId());
         Thread.currentThread().setName(threadLoggerInfoName);
 
         long startTime = System.currentTimeMillis();

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/processdure/ProcedureTask.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.dolphinscheduler.server.worker.task.processdure;
 
+import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.DataType;
 import org.apache.dolphinscheduler.common.enums.Direct;
 import org.apache.dolphinscheduler.common.enums.TaskTimeoutStrategy;
@@ -82,7 +83,7 @@ public ProcedureTask(TaskProps taskProps, Logger logger) {
     @Override
     public void handle() throws Exception {
         // set the name of the current thread
-        String threadLoggerInfoName = String.format("TaskLogInfo-%s", taskProps.getTaskAppId());
+        String threadLoggerInfoName = String.format(Constants.TASK_LOG_INFO_FORMAT, taskProps.getTaskAppId());
         Thread.currentThread().setName(threadLoggerInfoName);
 
         logger.info("processdure type : {}, datasource : {}, method : {} , localParams : {}",

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/sql/SqlTask.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.commons.lang.StringUtils;
 import org.apache.commons.lang3.EnumUtils;
 import org.apache.dolphinscheduler.alert.utils.MailUtils;
+import org.apache.dolphinscheduler.common.Constants;
 import org.apache.dolphinscheduler.common.enums.ShowType;
 import org.apache.dolphinscheduler.common.enums.TaskTimeoutStrategy;
 import org.apache.dolphinscheduler.common.enums.UdfType;
@@ -103,7 +104,7 @@ public SqlTask(TaskProps taskProps, Logger logger) {
     @Override
     public void handle() throws Exception {
         // set the name of the current thread
-        String threadLoggerInfoName = String.format("TaskLogInfo-%s", taskProps.getTaskAppId());
+        String threadLoggerInfoName = String.format(Constants.TASK_LOG_INFO_FORMAT, taskProps.getTaskAppId());
         Thread.currentThread().setName(threadLoggerInfoName);
         logger.info(sqlParameters.toString());
         logger.info("sql type : {}, datasource : {}, sql : {} , localParams : {},udfs : {},showType : {},connParams : {}",

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/UdfFuncService.java
Patch:
@@ -297,7 +297,7 @@ public Map<String, Object> queryResourceList(User loginUser, Integer type) {
      *
      * @param id
      */
-    @Transactional(value = "TransactionManager", rollbackFor = Exception.class)
+    @Transactional(value = "transactionManager",rollbackFor = Exception.class)
     public Result delete(int id) {
         Result result = new Result();
 

File: dolphinscheduler-alert/src/test/java/org/apache/dolphinscheduler/alert/utils/MailUtilsTest.java
Patch:
@@ -48,8 +48,8 @@ public class MailUtilsTest {
     private static final Logger logger = LoggerFactory.getLogger(MailUtilsTest.class);
     @Test
     public void testSendMails() {
-        String[] receivers = new String[]{"xx@xx.com"};
-        String[] receiversCc = new String[]{"xxx@xxx.com"};
+        String[] receivers = new String[]{"825193156@qq.com"};
+        String[] receiversCc = new String[]{"825193156@qq.com"};
 
         String content ="[\"id:69\"," +
                 "\"name:UserBehavior-0--1193959466\"," +
@@ -114,7 +114,7 @@ public String list2String(){
 
     @Test
     public void testSendTableMail(){
-        String[] mails = new String[]{"xx@xx.com"};
+        String[] mails = new String[]{"825193156@qq.com"};
         Alert alert = new Alert();
         alert.setTitle("Mysql Exception");
         alert.setShowType(ShowType.TABLE);

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/ProcessDefinitionMapper.java
Patch:
@@ -30,6 +30,8 @@ public interface ProcessDefinitionMapper extends BaseMapper<ProcessDefinition> {
     ProcessDefinition queryByDefineName(@Param("projectId") int projectId,
                                         @Param("processDefinitionName") String name);
 
+    ProcessDefinition queryByDefineId(@Param("processDefineId") int processDefineId);
+
     IPage<ProcessDefinition> queryDefineListPaging(IPage<ProcessDefinition> page,
                                                    @Param("searchVal") String searchVal,
                                                    @Param("userId") int userId,

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/task/http/HttpTask.java
Patch:
@@ -137,7 +137,8 @@ protected CloseableHttpResponse sendRequest(CloseableHttpClient client) throws I
             }
         }
         addRequestParams(builder,httpPropertyList);
-        HttpUriRequest request = builder.setUri(httpParameters.getUrl()).build();
+        String requestUrl = ParameterUtils.convertParameterPlaceholders(httpParameters.getUrl(),ParamUtils.convert(paramsMap));
+        HttpUriRequest request = builder.setUri(requestUrl).build();
         setHeaders(request,httpPropertyList);
         return client.execute(request);
     }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/DataAnalysisService.java
Patch:
@@ -332,6 +332,9 @@ private Integer[] getProjectIdsArrays(User loginUser, int projectId) {
             projectIds.add(projectId);
         }else if(loginUser.getUserType() == UserType.GENERAL_USER){
             projectIds = processDao.getProjectIdListHavePerm(loginUser.getId());
+            if(projectIds.size() ==0 ){
+                projectIds.add(0);
+            }
         }
         return projectIds.toArray(new Integer[projectIds.size()]);
     }

File: dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/SchedulerService.java
Patch:
@@ -450,6 +450,7 @@ public void setSchedule(int projectId, int scheduleId) throws RuntimeException{
         Schedule schedule = processDao.querySchedule(scheduleId);
         if (schedule == null) {
             logger.warn("process schedule info not exists");
+            return;
         }
 
         Date startDate = schedule.getStartTime();

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/PropertyUtils.java
Patch:
@@ -129,7 +129,7 @@ public static Boolean getBoolean(String key) {
             return Boolean.parseBoolean(value);
         }
 
-        return null;
+        return false;
     }
 
     /**

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/runner/TaskScheduleThread.java
Patch:
@@ -82,10 +82,10 @@ public TaskScheduleThread(TaskInstance taskInstance, ProcessDao processDao){
     @Override
     public void run() {
 
-        // update task state is running according to task type
-        updateTaskState(taskInstance.getTaskType());
-
         try {
+            // update task state is running according to task type
+            updateTaskState(taskInstance.getTaskType());
+
             logger.info("script path : {}", taskInstance.getExecutePath());
             // task node
             TaskNode taskNode = JSONObject.parseObject(taskInstance.getTaskJson(), TaskNode.class);

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/worker/WorkerServer.java
Patch:
@@ -162,7 +162,7 @@ public void run(ProcessDao processDao){
                 scheduleAtFixedRate(heartBeatThread, 5, heartBeatInterval, TimeUnit.SECONDS);
 
         // kill process thread implement
-        Runnable killProcessThread = getKillProcessThread();
+        Runnable killProcessThread = getKillProcessThread(processDao);
 
         // submit kill process thread
         killExecutorService.execute(killProcessThread);
@@ -288,7 +288,7 @@ public void run() {
      *  kill process thread implement
      * @return
      */
-    private Runnable getKillProcessThread(){
+    private Runnable getKillProcessThread(ProcessDao processDao){
         Runnable killProcessThread  = new Runnable() {
             @Override
             public void run() {

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/SessionMapper.java
Patch:
@@ -26,4 +26,6 @@ public interface SessionMapper extends BaseMapper<Session> {
 
     List<Session> queryByUserId(@Param("userId") int userId);
 
+    Session queryByUserIdAndIp(@Param("userId") int userId,@Param("ip") String ip);
+
 }

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/ProcessDao.java
Patch:
@@ -231,7 +231,7 @@ public Boolean verifyIsNeedCreateCommand(Command command){
             JSONObject tempObj;
             int processInstanceId = cmdParamObj.getInteger(CMDPARAM_RECOVER_PROCESS_ID_STRING);
 
-            List<Command> commands = commandMapper.getAll(null);
+            List<Command> commands = commandMapper.selectList(null);
             //遍历所有命令
             for (Command tmpCommand:commands){
                 if(cmdTypeMap.containsKey(tmpCommand.getCommandType())){

File: escheduler-api/src/main/java/cn/escheduler/api/CombinedApplicationServer.java
Patch:
@@ -51,7 +51,7 @@ public static void main(String[] args) throws Exception {
         LoggerServer server = new LoggerServer();
         server.start();
 
-        AlertServer alertServer = AlertServer.getInstance();
+        AlertServer alertServer = AlertServer.getInstance(alertDao);
         alertServer.start();
     }
 }

File: dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/DateUtils.java
Patch:
@@ -132,6 +132,9 @@ public static Date stringToDate(String str) {
      * @return
      */
     public static long differSec(Date d1, Date d2) {
+        if(d1 == null || d2 == null){
+            return 0;
+        }
         return (long) Math.ceil(differMs(d1, d2) / 1000.0);
     }
 

File: dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/mapper/TenantMapper.java
Patch:
@@ -27,7 +27,7 @@ public interface TenantMapper extends BaseMapper<Tenant> {
 
     Tenant queryById(@Param("tenantId") int tenantId);
 
-    Tenant queryByTenantCode(@Param("tenantCode") String tenantCode);
+    List<Tenant> queryByTenantCode(@Param("tenantCode") String tenantCode);
 
     IPage<Tenant> queryTenantPaging(IPage<Tenant> page,
                                     @Param("searchVal") String searchVal);

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/AccessTokenMapperTest.java
Patch:
@@ -58,8 +58,8 @@ public void testUpdate(){
         //update
         accessToken.setToken("hello, token");
         int update = accessTokenMapper.updateById(accessToken);
-        Assert.assertEquals(update, 1);
         accessTokenMapper.deleteById(accessToken.getId());
+        Assert.assertEquals(update, 1);
     }
 
     @Test

File: dolphinscheduler-dao/src/test/java/org/apache/dolphinscheduler/dao/mapper/ProcessInstanceMapperTest.java
Patch:
@@ -109,9 +109,10 @@ public void testQueryByHostAndStatus() {
                 ExecutionStatus.RUNNING_EXEUTION.ordinal(),
                 ExecutionStatus.SUCCESS.ordinal()};
 
-        processInstanceMapper.queryByHostAndStatus(processInstance.getHost(), stateArray);
+        List<ProcessInstance> processInstances = processInstanceMapper.queryByHostAndStatus(null, stateArray);
 
         processInstanceMapper.deleteById(processInstance.getId());
+        Assert.assertNotEquals(processInstances.size(), 0);
     }
 
     @Test

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/master/runner/MasterExecThread.java
Patch:
@@ -39,6 +39,7 @@
 import org.apache.dolphinscheduler.common.utils.*;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
+import org.springframework.beans.factory.annotation.Autowired;
 
 import java.io.File;
 import java.io.IOException;

File: dolphinscheduler-server/src/main/java/org/apache/dolphinscheduler/server/zk/ZKMasterClient.java
Patch:
@@ -141,7 +141,7 @@ public void init(){
 	 */
 	public void initDao(){
 		this.alertDao = DaoFactory.getDaoInstance(AlertDao.class);
-		this.processDao = DaoFactory.getDaoInstance(ProcessDao.class);
+//		this.processDao = DaoFactory.getDaoInstance(ProcessDao.class);
 	}
 	/**
 	 * get alert dao

File: escheduler-api/src/main/java/cn/escheduler/api/service/ProcessDefinitionService.java
Patch:
@@ -570,7 +570,7 @@ public void exportProcessDefinitionById(User loginUser, String projectName, Inte
                     row.put("scheduleEndTime", schedule.getEndTime());
                     row.put("scheduleCrontab", schedule.getCrontab());
                     row.put("scheduleFailureStrategy", schedule.getFailureStrategy());
-                    row.put("scheduleReleaseState", schedule.getReleaseState());
+                    row.put("scheduleReleaseState", ReleaseState.OFFLINE);
                     row.put("scheduleProcessInstancePriority", schedule.getProcessInstancePriority());
                     if(schedule.getId() == -1){
                         row.put("scheduleWorkerGroupId", -1);

File: escheduler-dao/src/main/java/cn/escheduler/dao/ProcessDao.java
Patch:
@@ -1024,11 +1024,11 @@ public Boolean submitTaskToQueue(TaskInstance task) {
     }
 
     /**
-     * ${processInstancePriority}_${processInstanceId}_${taskInstancePriority}_${taskId}_${task executed by ip1},${ip2}...
+     * ${processInstancePriority}_${processInstanceId}_${taskInstancePriority}_${taskInstanceId}_${task executed by ip1},${ip2}...
      *
      * The tasks with the highest priority are selected by comparing the priorities of the above four levels from high to low.
      *
-     * 流程实例优先级_流程实例id_任务优先级_任务id_任务执行机器ip1，ip2...          high <- low
+     * 流程实例优先级_流程实例id_任务优先级_任务实例id_任务执行机器ip1，ip2...          high <- low
      *
      * @param taskInstance
      * @return

File: escheduler-alert/src/main/java/cn/escheduler/alert/AlertServer.java
Patch:
@@ -39,7 +39,7 @@ public class AlertServer {
 
     private AlertSender alertSender;
 
-    private static AlertServer instance;
+    private static volatile AlertServer instance;
 
     private AlertServer() {
 

File: escheduler-common/src/main/java/cn/escheduler/common/thread/ThreadPoolExecutors.java
Patch:
@@ -40,7 +40,7 @@ public class ThreadPoolExecutors {
 
     private static final Logger logger = LoggerFactory.getLogger(ThreadPoolExecutors.class);
     private static Executor executor;
-    private static ThreadPoolExecutors threadPoolExecutors;
+    private static volatile ThreadPoolExecutors threadPoolExecutors;
 
     private ThreadPoolExecutors(){}
 

File: escheduler-api/src/test/java/cn/escheduler/api/HttpClientTest.java
Patch:
@@ -59,7 +59,7 @@ public  void doPOSTParam()throws Exception{
         try {
             // execute
             response = httpclient.execute(httpPost);
-            // eponse status code 200
+            // response status code 200
             if (response.getStatusLine().getStatusCode() == 200) {
                 String content = EntityUtils.toString(response.getEntity(), "UTF-8");
                 logger.info(content);
@@ -96,7 +96,7 @@ public  void doGETParamPathVariableAndChinese()throws Exception{
         try {
             // execute http get request
             response = httpclient.execute(httpGet);
-            // reponse status code 200
+            // response status code 200
             if (response.getStatusLine().getStatusCode() == 200) {
                 String content = EntityUtils.toString(response.getEntity(), "UTF-8");
                 logger.info("start--------------->");
@@ -139,7 +139,7 @@ public  void doGETParam()throws Exception{
         try {
             // execute http get request
             response = httpclient.execute(httpGet);
-            // reponse status code 200
+            // response status code 200
             if (response.getStatusLine().getStatusCode() == 200) {
                 String content = EntityUtils.toString(response.getEntity(), "UTF-8");
                 logger.info("start--------------->");

File: escheduler-dao/src/main/java/cn/escheduler/dao/ProcessDao.java
Patch:
@@ -1739,7 +1739,7 @@ public ProcessInstance findLastRunningProcess(int definitionId, DateInterval dat
      * @param processInstanceId
      * @return
      */
-    public String queryQueueByProcessInstanceId(int processInstanceId){
+    public String queryUserQueueByProcessInstanceId(int processInstanceId){
         return userMapper.queryQueueByProcessInstanceId(processInstanceId);
     }
 

File: escheduler-server/src/main/java/cn/escheduler/server/worker/runner/FetchTaskThread.java
Patch:
@@ -187,8 +187,9 @@ public void run() {
                         continue;
                     }
 
-                    // set queue for process instance
-                    taskInstance.getProcessInstance().setQueue(tenant.getQueue());
+                    // set queue for process instance, user-specified queue takes precedence over tenant queue
+                    String userQueue = processDao.queryUserQueueByProcessInstanceId(taskInstance.getProcessInstanceId());
+                    taskInstance.getProcessInstance().setQueue(StringUtils.isEmpty(userQueue) ? tenant.getQueue() : userQueue);
 
                     logger.info("worker fetch taskId : {} from queue ", taskInstId);
 

File: escheduler-dao/src/main/java/cn/escheduler/dao/utils/BeanContext.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package cn.escheduler.server;
+package cn.escheduler.dao.utils;
 
 
 import org.springframework.beans.BeansException;

File: escheduler-server/src/main/java/cn/escheduler/server/master/runner/MasterBaseTaskExecThread.java
Patch:
@@ -23,7 +23,7 @@
 import cn.escheduler.dao.ProcessDao;
 import cn.escheduler.dao.model.ProcessInstance;
 import cn.escheduler.dao.model.TaskInstance;
-import cn.escheduler.server.BeanContext;
+import cn.escheduler.dao.utils.BeanContext;
 import org.apache.commons.configuration.Configuration;
 import org.apache.commons.configuration.ConfigurationException;
 import org.apache.commons.configuration.PropertiesConfiguration;

File: escheduler-server/src/main/java/cn/escheduler/server/worker/log/TaskLogFilter.java
Patch:
@@ -28,7 +28,7 @@ public class TaskLogFilter extends Filter<ILoggingEvent> {
 
     @Override
     public FilterReply decide(ILoggingEvent event) {
-        if (event.getLoggerName().startsWith(LoggerUtils.TASK_LOGGER_INFO_PREFIX)) {
+        if (event.getThreadName().startsWith(LoggerUtils.TASK_LOGGER_THREAD_NAME)) {
             return FilterReply.ACCEPT;
         }
         return FilterReply.DENY;

File: escheduler-common/src/main/java/cn/escheduler/common/zk/AbstractZKClient.java
Patch:
@@ -344,9 +344,12 @@ public List<MasterServer> getServersList(ZKNodeType zkNodeType){
 		String parentPath = getZNodeParentPath(zkNodeType);
 
 		List<MasterServer> masterServers = new ArrayList<>();
+		int i = 0;
 		for(String path : masterMap.keySet()){
 			MasterServer masterServer = ResInfo.parseHeartbeatForZKInfo(masterMap.get(path));
 			masterServer.setZkDirectory( parentPath + "/"+ path);
+			masterServer.setId(i);
+			i ++;
 			masterServers.add(masterServer);
 		}
 		return masterServers;

File: escheduler-server/src/main/java/cn/escheduler/server/worker/log/TaskLogFilter.java
Patch:
@@ -19,6 +19,7 @@
 import ch.qos.logback.classic.spi.ILoggingEvent;
 import ch.qos.logback.core.filter.Filter;
 import ch.qos.logback.core.spi.FilterReply;
+import cn.escheduler.server.utils.LoggerUtils;
 
 /**
  *  task log filter
@@ -27,7 +28,7 @@ public class TaskLogFilter extends Filter<ILoggingEvent> {
 
     @Override
     public FilterReply decide(ILoggingEvent event) {
-        if (event.getThreadName().startsWith("TaskLogInfo-")){
+        if (event.getLoggerName().startsWith(LoggerUtils.TASK_LOGGER_INFO_PREFIX)) {
             return FilterReply.ACCEPT;
         }
         return FilterReply.DENY;

File: escheduler-server/src/test/java/cn/escheduler/server/worker/shell/ShellCommandExecutorTest.java
Patch:
@@ -23,7 +23,6 @@
 import cn.escheduler.dao.ProcessDao;
 import cn.escheduler.dao.model.TaskInstance;
 import cn.escheduler.server.utils.LoggerUtils;
-import cn.escheduler.server.worker.log.TaskLogger;
 import cn.escheduler.server.worker.task.AbstractTask;
 import cn.escheduler.server.worker.task.TaskManager;
 import cn.escheduler.server.worker.task.TaskProps;
@@ -43,7 +42,6 @@
 public class ShellCommandExecutorTest {
 
     private static final Logger logger = LoggerFactory.getLogger(ShellCommandExecutorTest.class);
-    private static final String TASK_PREFIX = "TASK";
 
     private ProcessDao processDao = null;
 
@@ -75,7 +73,7 @@ public void test() throws Exception {
 
 
         // custom logger
-        TaskLogger taskLogger = new TaskLogger(LoggerUtils.buildTaskId(TASK_PREFIX,
+        Logger taskLogger = LoggerFactory.getLogger(LoggerUtils.buildTaskId(LoggerUtils.TASK_LOGGER_INFO_PREFIX,
                 taskInstance.getProcessDefinitionId(),
                 taskInstance.getProcessInstanceId(),
                 taskInstance.getId()));

File: escheduler-server/src/test/java/cn/escheduler/server/worker/sql/SqlExecutorTest.java
Patch:
@@ -23,7 +23,6 @@
 import cn.escheduler.dao.ProcessDao;
 import cn.escheduler.dao.model.TaskInstance;
 import cn.escheduler.server.utils.LoggerUtils;
-import cn.escheduler.server.worker.log.TaskLogger;
 import cn.escheduler.server.worker.task.AbstractTask;
 import cn.escheduler.server.worker.task.TaskManager;
 import cn.escheduler.server.worker.task.TaskProps;
@@ -43,7 +42,6 @@
 public class SqlExecutorTest {
 
     private static final Logger logger = LoggerFactory.getLogger(SqlExecutorTest.class);
-    private static final String TASK_PREFIX = "TASK";
 
     private ProcessDao processDao = null;
 
@@ -118,7 +116,7 @@ private void sharedTestSqlTask(String nodeName, String taskAppId, String tenantC
 
 
         // custom logger
-        TaskLogger taskLogger = new TaskLogger(LoggerUtils.buildTaskId(TASK_PREFIX,
+        Logger taskLogger = LoggerFactory.getLogger(LoggerUtils.buildTaskId(LoggerUtils.TASK_LOGGER_INFO_PREFIX,
                 taskInstance.getProcessDefinitionId(),
                 taskInstance.getProcessInstanceId(),
                 taskInstance.getId()));

File: escheduler-api/src/test/java/cn/escheduler/api/controller/AbstractControllerTest.java
Patch:
@@ -44,6 +44,7 @@
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
 
+@Ignore
 @RunWith(SpringRunner.class)
 @SpringBootTest(classes = ApiApplicationServer.class)
 public class AbstractControllerTest {

File: escheduler-api/src/test/java/cn/escheduler/api/service/ProcessInstanceServiceTest.java
Patch:
@@ -45,7 +45,7 @@ public class ProcessInstanceServiceTest {
     ProcessInstanceService processInstanceService;
 
     @Test
-    public void viewVariables() throws Exception {
+    public void viewVariables() {
         try {
             Map<String, Object> map = processInstanceService.viewVariables(-1);
             Assert.assertEquals(Status.SUCCESS, map.get(Constants.STATUS));

File: escheduler-server/src/test/java/cn/escheduler/server/zk/StandaloneZKServerForTest.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.zookeeper.server.ZooKeeperServerMain;
 import org.apache.zookeeper.server.quorum.QuorumPeerConfig;
 import org.junit.Before;
+import org.junit.Ignore;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -31,6 +32,7 @@
 /**
  * just for test
  */
+@Ignore
 public class StandaloneZKServerForTest {
 
     private static final Logger logger = LoggerFactory.getLogger(StandaloneZKServerForTest.class);

File: escheduler-api/src/main/java/cn/escheduler/api/service/SessionService.java
Patch:
@@ -130,8 +130,9 @@ public String createSession(User user, String ip) {
 
   /**
    * sign out
+   * remove ip restrictions
    *
-   * @param ip
+   * @param ip   no use
    * @param loginUser
    */
   public void signOut(String ip, User loginUser) {

File: escheduler-api/src/test/java/cn/escheduler/api/service/DataSourceServiceTest.java
Patch:
@@ -16,13 +16,13 @@
  */
 package cn.escheduler.api.service;
 
+import cn.escheduler.api.ApiApplicationServer;
 import cn.escheduler.api.enums.Status;
 import cn.escheduler.api.utils.Constants;
 import cn.escheduler.common.enums.DbType;
 import cn.escheduler.common.enums.UserType;
 import cn.escheduler.dao.model.User;
 import org.junit.Assert;
-import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.slf4j.Logger;
@@ -33,9 +33,8 @@
 
 import java.util.Map;
 
-@Ignore
 @RunWith(SpringRunner.class)
-@SpringBootTest
+@SpringBootTest(classes = ApiApplicationServer.class)
 public class DataSourceServiceTest {
     private static final Logger logger = LoggerFactory.getLogger(DataSourceServiceTest.class);
 

File: escheduler-api/src/test/java/cn/escheduler/api/service/TenantServiceTest.java
Patch:
@@ -16,12 +16,12 @@
  */
 package cn.escheduler.api.service;
 
+import cn.escheduler.api.ApiApplicationServer;
 import cn.escheduler.api.enums.Status;
 import cn.escheduler.api.utils.Constants;
 import cn.escheduler.common.enums.UserType;
 import cn.escheduler.dao.model.User;
 import org.junit.Assert;
-import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.slf4j.Logger;
@@ -32,9 +32,8 @@
 
 import java.util.Map;
 
-@Ignore
 @RunWith(SpringRunner.class)
-@SpringBootTest
+@SpringBootTest(classes = ApiApplicationServer.class)
 public class TenantServiceTest {
     private static final Logger logger = LoggerFactory.getLogger(TenantServiceTest.class);
 

File: escheduler-api/src/test/java/cn/escheduler/api/service/UsersServiceTest.java
Patch:
@@ -16,12 +16,12 @@
  */
 package cn.escheduler.api.service;
 
+import cn.escheduler.api.ApiApplicationServer;
 import cn.escheduler.api.enums.Status;
 import cn.escheduler.api.utils.Constants;
 import cn.escheduler.common.enums.UserType;
 import cn.escheduler.dao.model.User;
 import org.junit.Assert;
-import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.slf4j.Logger;
@@ -32,9 +32,8 @@
 
 import java.util.Map;
 
-@Ignore
 @RunWith(SpringRunner.class)
-@SpringBootTest
+@SpringBootTest(classes = ApiApplicationServer.class)
 public class UsersServiceTest {
     private static final Logger logger = LoggerFactory.getLogger(UsersServiceTest.class);
 

File: escheduler-common/src/main/java/cn/escheduler/common/zk/AbstractZKClient.java
Patch:
@@ -368,7 +368,7 @@ public Map<String, String> getServerMaps(ZKNodeType zkNodeType){
 				masterMap.putIfAbsent(server, new String(bytes));
 			}
 		} catch (Exception e) {
-			e.printStackTrace();
+			logger.error("get server list failed : " + e.getMessage(), e);
 		}
 
 		return masterMap;

File: escheduler-common/src/test/java/cn/escheduler/common/utils/HadoopUtilsTest.java
Patch:
@@ -16,14 +16,15 @@
  */
 package cn.escheduler.common.utils;
 
+import org.junit.Ignore;
 import org.junit.Test;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import java.io.IOException;
 import java.util.List;
 
-
+@Ignore
 public class HadoopUtilsTest {
 
     private static final Logger logger = LoggerFactory.getLogger(HadoopUtilsTest.class);

File: escheduler-dao/src/test/java/cn/escheduler/dao/mapper/AccessTokenMapperTest.java
Patch:
@@ -18,6 +18,7 @@
 
 import cn.escheduler.dao.datasource.ConnectionFactory;
 import cn.escheduler.dao.model.AccessToken;
+import cn.escheduler.dao.model.User;
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
@@ -60,4 +61,6 @@ public void testListPaging(){
     }
 
 
+
+
 }

File: escheduler-dao/src/test/java/cn/escheduler/dao/mapper/CommandMapperTest.java
Patch:
@@ -24,12 +24,13 @@
 import cn.escheduler.dao.model.Command;
 import org.junit.Assert;
 import org.junit.Before;
-import org.junit.Ignore;
 import org.junit.Test;
 
 import java.util.List;
 
-@Ignore
+/**
+ * command test
+ */
 public class CommandMapperTest {
 
     CommandMapper commandMapper;

File: escheduler-dao/src/test/java/cn/escheduler/dao/mapper/ProcessDefinitionMapperTest.java
Patch:
@@ -21,13 +21,11 @@
 import cn.escheduler.dao.model.ProcessDefinition;
 import org.junit.Assert;
 import org.junit.Before;
-import org.junit.Ignore;
 import org.junit.Test;
 
 import java.util.Date;
 import java.util.List;
 
-@Ignore
 public class ProcessDefinitionMapperTest {
 
 

File: escheduler-api/src/main/java/cn/escheduler/api/service/SessionService.java
Patch:
@@ -68,7 +68,7 @@ public Session getSession(HttpServletRequest request)  {
     }
 
     String ip = BaseController.getClientIpAddress(request);
-    logger.info("get session: {}, ip: {}", sessionId, ip);
+    logger.debug("get session: {}, ip: {}", sessionId, ip);
 
     return sessionMapper.queryBySessionId(sessionId);
   }

File: escheduler-dao/src/test/java/cn/escheduler/dao/mapper/AlertMapperTest.java
Patch:
@@ -23,12 +23,13 @@
 import cn.escheduler.dao.model.Alert;
 import org.junit.Assert;
 import org.junit.Before;
-import org.junit.Ignore;
 import org.junit.Test;
 
 import java.util.Date;
 
-@Ignore
+/**
+ * alert mapper test
+ */
 public class AlertMapperTest {
 
 

File: escheduler-dao/src/test/java/cn/escheduler/dao/mapper/DataSourceMapperTest.java
Patch:
@@ -21,13 +21,14 @@
 import cn.escheduler.dao.model.DataSource;
 import org.junit.Assert;
 import org.junit.Before;
-import org.junit.Ignore;
 import org.junit.Test;
 
 import java.util.Date;
 import java.util.List;
 
-@Ignore
+/**
+ * datasource mapper test
+ */
 public class DataSourceMapperTest {
 
 

File: escheduler-api/src/main/java/cn/escheduler/api/service/SessionService.java
Patch:
@@ -68,7 +68,7 @@ public Session getSession(HttpServletRequest request)  {
     }
 
     String ip = BaseController.getClientIpAddress(request);
-    logger.info("get session: {}, ip: {}", sessionId, ip);
+    logger.debug("get session: {}, ip: {}", sessionId, ip);
 
     return sessionMapper.queryBySessionId(sessionId);
   }

File: escheduler-dao/src/main/java/cn/escheduler/dao/mapper/TenantMapper.java
Patch:
@@ -68,6 +68,8 @@ public interface TenantMapper {
             @Result(property = "tenantName", column = "tenant_name", javaType = String.class, jdbcType = JdbcType.VARCHAR),
             @Result(property = "desc", column = "desc", javaType = String.class, jdbcType = JdbcType.VARCHAR),
             @Result(property = "queueId", column = "queue_id", javaType = Integer.class, jdbcType = JdbcType.INTEGER),
+            @Result(property = "queueName", column = "queue_name", javaType = String.class, jdbcType = JdbcType.VARCHAR),
+            @Result(property = "queue", column = "queue", javaType = String.class, jdbcType = JdbcType.VARCHAR),
             @Result(property = "createTime", column = "create_time", javaType = Timestamp.class, jdbcType = JdbcType.DATE),
             @Result(property = "updateTime", column = "update_time", javaType = Timestamp.class, jdbcType = JdbcType.DATE),
     })

File: escheduler-server/src/main/java/cn/escheduler/server/worker/runner/TaskScheduleThread.java
Patch:
@@ -133,7 +133,7 @@ public void run() {
                         taskInstance.getId(),
                         CommonUtils.getSystemEnvPath(),
                         tenant.getTenantCode(),
-                        tenant.getQueueName(),
+                        tenant.getQueue(),
                         taskInstance.getStartTime(),
                         getGlobalParamsMap(),
                         taskInstance.getDependency(),

File: escheduler-server/src/main/java/cn/escheduler/server/utils/ParamUtils.java
Patch:
@@ -44,7 +44,6 @@ public static Map<String,Property> convert(Map<String,Property> globalParams,
                                                            CommandType commandType,
                                                            Date scheduleTime){
         if (globalParams == null
-                && globalParams == null
                 && localParams == null){
             return null;
         }

File: escheduler-api/src/main/java/cn/escheduler/api/controller/MonitorController.java
Patch:
@@ -23,8 +23,6 @@
 import cn.escheduler.api.utils.Result;
 import cn.escheduler.dao.model.User;
 import io.swagger.annotations.Api;
-import io.swagger.annotations.ApiImplicitParam;
-import io.swagger.annotations.ApiImplicitParams;
 import io.swagger.annotations.ApiOperation;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: escheduler-api/src/main/java/cn/escheduler/api/service/SchedulerService.java
Patch:
@@ -25,6 +25,7 @@
 import cn.escheduler.common.enums.Priority;
 import cn.escheduler.common.enums.ReleaseState;
 import cn.escheduler.common.enums.WarningType;
+import cn.escheduler.common.model.MasterServer;
 import cn.escheduler.common.utils.DateUtils;
 import cn.escheduler.common.utils.JSONUtils;
 import cn.escheduler.dao.ProcessDao;

File: escheduler-api/src/main/java/cn/escheduler/api/service/ServerService.java
Patch:
@@ -20,7 +20,7 @@
 import cn.escheduler.api.utils.Constants;
 import cn.escheduler.dao.mapper.MasterServerMapper;
 import cn.escheduler.dao.mapper.WorkerServerMapper;
-import cn.escheduler.dao.model.MasterServer;
+import cn.escheduler.common.model.MasterServer;
 import cn.escheduler.dao.model.User;
 import cn.escheduler.dao.model.WorkerServer;
 import org.springframework.beans.factory.annotation.Autowired;

File: escheduler-api/src/test/java/cn/escheduler/api/utils/ZookeeperMonitorUtilsTest.java
Patch:
@@ -1,6 +1,6 @@
 package cn.escheduler.api.utils;
 
-import cn.escheduler.dao.model.MasterServer;
+import cn.escheduler.common.model.MasterServer;
 import org.junit.Assert;
 import org.junit.Test;
 

File: escheduler-common/src/main/java/cn/escheduler/common/model/MasterServer.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package cn.escheduler.dao.model;
+package cn.escheduler.common.model;
 
 
 import java.util.Date;

File: escheduler-dao/src/main/java/cn/escheduler/dao/ServerDao.java
Patch:
@@ -18,7 +18,7 @@
 
 import cn.escheduler.dao.mapper.MasterServerMapper;
 import cn.escheduler.dao.mapper.WorkerServerMapper;
-import cn.escheduler.dao.model.MasterServer;
+import cn.escheduler.common.model.MasterServer;
 import cn.escheduler.dao.model.WorkerServer;
 import org.springframework.beans.factory.annotation.Autowired;
 

File: escheduler-dao/src/main/java/cn/escheduler/dao/mapper/MasterServerMapper.java
Patch:
@@ -16,7 +16,7 @@
  */
 package cn.escheduler.dao.mapper;
 
-import cn.escheduler.dao.model.MasterServer;
+import cn.escheduler.common.model.MasterServer;
 import org.apache.ibatis.annotations.*;
 import org.apache.ibatis.type.JdbcType;
 

File: escheduler-dao/src/test/java/cn/escheduler/dao/mapper/MasterServerMapperTest.java
Patch:
@@ -17,7 +17,7 @@
 package cn.escheduler.dao.mapper;
 
 import cn.escheduler.dao.datasource.ConnectionFactory;
-import cn.escheduler.dao.model.MasterServer;
+import cn.escheduler.common.model.MasterServer;
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;

File: escheduler-api/src/main/java/cn/escheduler/api/service/ProcessDefinitionService.java
Patch:
@@ -490,7 +490,7 @@ public Map<String, Object> releaseProcessDefinition(User loginUser, String proje
                     // set status
                     schedule.setReleaseState(ReleaseState.OFFLINE);
                     scheduleMapper.update(schedule);
-                    deleteSchedule(project.getId(), id);
+                    deleteSchedule(project.getId(), schedule.getId());
                 }
                 break;
             }

File: escheduler-api/src/main/java/cn/escheduler/api/service/ProcessDefinitionService.java
Patch:
@@ -487,7 +487,7 @@ public Map<String, Object> releaseProcessDefinition(User loginUser, String proje
                     // set status
                     schedule.setReleaseState(ReleaseState.OFFLINE);
                     scheduleMapper.update(schedule);
-                    deleteSchedule(project.getId(), id);
+                    deleteSchedule(project.getId(), schedule.getId());
                 }
                 break;
             }

File: escheduler-api/src/main/java/cn/escheduler/api/service/ProcessDefinitionService.java
Patch:
@@ -487,7 +487,7 @@ public Map<String, Object> releaseProcessDefinition(User loginUser, String proje
                     // set status
                     schedule.setReleaseState(ReleaseState.OFFLINE);
                     scheduleMapper.update(schedule);
-                    deleteSchedule(project.getId(), id);
+                    deleteSchedule(project.getId(), schedule.getId());
                 }
                 break;
             }

File: escheduler-api/src/main/java/cn/escheduler/api/service/ProcessDefinitionService.java
Patch:
@@ -487,7 +487,7 @@ public Map<String, Object> releaseProcessDefinition(User loginUser, String proje
                     // set status
                     schedule.setReleaseState(ReleaseState.OFFLINE);
                     scheduleMapper.update(schedule);
-                    deleteSchedule(project.getId(), id);
+                    deleteSchedule(project.getId(), schedule.getId());
                 }
                 break;
             }

File: escheduler-server/src/main/java/cn/escheduler/server/utils/LoggerUtils.java
Patch:
@@ -16,6 +16,7 @@
  */
 package cn.escheduler.server.utils;
 
+import cn.escheduler.common.Constants;
 import org.slf4j.Logger;
 
 import java.util.ArrayList;
@@ -31,7 +32,7 @@ public class LoggerUtils {
     /**
      * rules for extracting application ID
      */
-    private static final Pattern APPLICATION_REGEX = Pattern.compile("\\d+_\\d+");
+    private static final Pattern APPLICATION_REGEX = Pattern.compile(Constants.APPLICATION_REGEX);
 
     /**
      *  build job id

File: escheduler-server/src/main/java/cn/escheduler/server/utils/LoggerUtils.java
Patch:
@@ -16,6 +16,7 @@
  */
 package cn.escheduler.server.utils;
 
+import cn.escheduler.common.Constants;
 import org.slf4j.Logger;
 
 import java.util.ArrayList;
@@ -31,7 +32,7 @@ public class LoggerUtils {
     /**
      * rules for extracting application ID
      */
-    private static final Pattern APPLICATION_REGEX = Pattern.compile("\\d+_\\d+");
+    private static final Pattern APPLICATION_REGEX = Pattern.compile(Constants.APPLICATION_REGEX);
 
     /**
      *  build job id

File: escheduler-server/src/main/java/cn/escheduler/server/utils/LoggerUtils.java
Patch:
@@ -16,6 +16,7 @@
  */
 package cn.escheduler.server.utils;
 
+import cn.escheduler.common.Constants;
 import org.slf4j.Logger;
 
 import java.util.ArrayList;
@@ -31,7 +32,7 @@ public class LoggerUtils {
     /**
      * rules for extracting application ID
      */
-    private static final Pattern APPLICATION_REGEX = Pattern.compile("\\d+_\\d+");
+    private static final Pattern APPLICATION_REGEX = Pattern.compile(Constants.APPLICATION_REGEX);
 
     /**
      *  build job id

File: escheduler-dao/src/main/java/cn/escheduler/dao/ProcessDao.java
Patch:
@@ -493,7 +493,8 @@ private ProcessInstance generateNewProcessInstance(ProcessDefinition processDefi
         processInstance.setProcessInstanceJson(processDefinition.getProcessDefinitionJson());
         // set process instance priority
         processInstance.setProcessInstancePriority(command.getProcessInstancePriority());
-        processInstance.setWorkerGroupId(command.getWorkerGroupId());
+        int workerGroupId = command.getWorkerGroupId() == 0 ? -1 : command.getWorkerGroupId();
+        processInstance.setWorkerGroupId(workerGroupId);
         processInstance.setTimeout(processDefinition.getTimeout());
         processInstance.setTenantId(processDefinition.getTenantId());
         return processInstance;

File: escheduler-api/src/main/java/cn/escheduler/api/service/DataSourceService.java
Patch:
@@ -328,7 +328,7 @@ public Map<String, Object> queryDataSourceList(User loginUser, Integer type) {
         List<DataSource> datasourceList;
 
         if (isAdmin(loginUser)) {
-            datasourceList = dataSourceMapper.listAllDataSourceByType();
+            datasourceList = dataSourceMapper.listAllDataSourceByType(type);
         }else{
             datasourceList = dataSourceMapper.queryDataSourceByType(loginUser.getId(), type);
         }

File: escheduler-dao/src/main/java/cn/escheduler/dao/mapper/DataSourceMapper.java
Patch:
@@ -227,6 +227,6 @@ List<DataSource> queryAllDataSourcePaging(@Param("searchVal") String searchVal,
             @Result(property = "updateTime", column = "update_time", javaType = Timestamp.class, jdbcType = JdbcType.DATE)
     })
     @SelectProvider(type = DataSourceMapperProvider.class, method = "listAllDataSourceByType")
-    List<DataSource> listAllDataSourceByType();
+    List<DataSource> listAllDataSourceByType(@Param("type") Integer type);
 
 }

File: escheduler-dao/src/main/java/cn/escheduler/dao/mapper/DataSourceMapperProvider.java
Patch:
@@ -239,6 +239,7 @@ public String listAllDataSourceByType(Map<String, Object> parameter) {
     return new SQL() {{
       SELECT("*");
       FROM(TABLE_NAME);
+      WHERE("type = #{type}");
     }}.toString();
   }
 

File: escheduler-api/src/main/java/cn/escheduler/api/service/DataSourceService.java
Patch:
@@ -328,7 +328,7 @@ public Map<String, Object> queryDataSourceList(User loginUser, Integer type) {
         List<DataSource> datasourceList;
 
         if (isAdmin(loginUser)) {
-            datasourceList = dataSourceMapper.listAllDataSourceByType();
+            datasourceList = dataSourceMapper.listAllDataSourceByType(type);
         }else{
             datasourceList = dataSourceMapper.queryDataSourceByType(loginUser.getId(), type);
         }

File: escheduler-dao/src/main/java/cn/escheduler/dao/mapper/DataSourceMapper.java
Patch:
@@ -227,6 +227,6 @@ List<DataSource> queryAllDataSourcePaging(@Param("searchVal") String searchVal,
             @Result(property = "updateTime", column = "update_time", javaType = Timestamp.class, jdbcType = JdbcType.DATE)
     })
     @SelectProvider(type = DataSourceMapperProvider.class, method = "listAllDataSourceByType")
-    List<DataSource> listAllDataSourceByType();
+    List<DataSource> listAllDataSourceByType(@Param("type") Integer type);
 
 }

File: escheduler-dao/src/main/java/cn/escheduler/dao/mapper/DataSourceMapperProvider.java
Patch:
@@ -239,6 +239,7 @@ public String listAllDataSourceByType(Map<String, Object> parameter) {
     return new SQL() {{
       SELECT("*");
       FROM(TABLE_NAME);
+      WHERE("type = #{type}");
     }}.toString();
   }
 

File: escheduler-api/src/main/java/cn/escheduler/api/enums/Status.java
Patch:
@@ -161,7 +161,8 @@ public enum Status {
     SAVE_ERROR(10136, "save error"),
     DELETE_PROJECT_ERROR_DEFINES_NOT_NULL(10137, "please delete the process definitions in project first!"),
     BATCH_DELETE_PROCESS_INSTANCE_BY_IDS_ERROR(10117,"batch delete process instance by ids {0} error"),
-
+    PREVIEW_SCHEDULE_ERROR(10139,"preview schedule error"),
+    PARSE_TO_CRON_EXPRESSION_ERROR(10140,"parse cron to cron expression error"),
 
 
     UDF_FUNCTION_NOT_EXIST(20001, "UDF function not found"),

File: escheduler-dao/src/main/java/cn/escheduler/dao/mapper/ResourceMapperProvider.java
Patch:
@@ -118,6 +118,7 @@ public String update(Map<String, Object> parameter) {
       SET("`alias` = #{resource.alias}");
       SET("`desc` = #{resource.desc}");
       SET("`update_time` = #{resource.updateTime}");
+      SET("`size` = #{resource.size}");
       WHERE("`id` = #{resource.id}");
     }}.toString();
   }

File: escheduler-dao/src/main/java/cn/escheduler/dao/mapper/ResourceMapperProvider.java
Patch:
@@ -118,6 +118,7 @@ public String update(Map<String, Object> parameter) {
       SET("`alias` = #{resource.alias}");
       SET("`desc` = #{resource.desc}");
       SET("`update_time` = #{resource.updateTime}");
+      SET("`size` = #{resource.size}");
       WHERE("`id` = #{resource.id}");
     }}.toString();
   }

File: escheduler-server/src/main/java/cn/escheduler/server/worker/task/sql/SqlTask.java
Patch:
@@ -347,14 +347,14 @@ public void sendAttachment(String title,String content){
         // receiving group list
         List<String> receviersList = new ArrayList<String>();
         for(User user:users){
-            receviersList.add(user.getEmail());
+            receviersList.add(user.getEmail().trim());
         }
         // custom receiver
         String receivers = sqlParameters.getReceivers();
         if (StringUtils.isNotEmpty(receivers)){
             String[] splits = receivers.split(Constants.COMMA);
             for (String receiver : splits){
-                receviersList.add(receiver);
+                receviersList.add(receiver.trim());
             }
         }
 
@@ -365,7 +365,7 @@ public void sendAttachment(String title,String content){
         if (StringUtils.isNotEmpty(receiversCc)){
             String[] splits = receiversCc.split(Constants.COMMA);
             for (String receiverCc : splits){
-                receviersCcList.add(receiverCc);
+                receviersCcList.add(receiverCc.trim());
             }
         }
 

File: escheduler-server/src/main/java/cn/escheduler/server/worker/task/sql/SqlTask.java
Patch:
@@ -347,14 +347,14 @@ public void sendAttachment(String title,String content){
         // receiving group list
         List<String> receviersList = new ArrayList<String>();
         for(User user:users){
-            receviersList.add(user.getEmail());
+            receviersList.add(user.getEmail().trim());
         }
         // custom receiver
         String receivers = sqlParameters.getReceivers();
         if (StringUtils.isNotEmpty(receivers)){
             String[] splits = receivers.split(Constants.COMMA);
             for (String receiver : splits){
-                receviersList.add(receiver);
+                receviersList.add(receiver.trim());
             }
         }
 
@@ -365,7 +365,7 @@ public void sendAttachment(String title,String content){
         if (StringUtils.isNotEmpty(receiversCc)){
             String[] splits = receiversCc.split(Constants.COMMA);
             for (String receiverCc : splits){
-                receviersCcList.add(receiverCc);
+                receviersCcList.add(receiverCc.trim());
             }
         }
 

File: escheduler-server/src/main/java/cn/escheduler/server/zk/ZKMasterClient.java
Patch:
@@ -134,7 +134,7 @@ public void init(){
 
 			// check if fault tolerance is required，failure and tolerance
 			if (getActiveMasterNum() == 1) {
-				processDao.selfFaultTolerant(ExecutionStatus.RUNNING_EXEUTION.ordinal(),ExecutionStatus.NEED_FAULT_TOLERANCE.ordinal());
+				processDao.masterStartupFaultTolerant();
 			}
 
 		}catch (Exception e){

File: escheduler-server/src/main/java/cn/escheduler/server/zk/ZKMasterClient.java
Patch:
@@ -134,7 +134,7 @@ public void init(){
 
 			// check if fault tolerance is required，failure and tolerance
 			if (getActiveMasterNum() == 1) {
-				processDao.selfFaultTolerant(ExecutionStatus.RUNNING_EXEUTION.ordinal(),ExecutionStatus.NEED_FAULT_TOLERANCE.ordinal());
+				processDao.masterStartupFaultTolerant();
 			}
 
 		}catch (Exception e){

File: escheduler-api/src/main/java/cn/escheduler/api/service/ProcessDefinitionService.java
Patch:
@@ -293,12 +293,12 @@ public Map<String, Object> updateProcessDefinition(User loginUser, String projec
         processDefine.setTimeout(processData.getTimeout());
 
         //custom global params
-        List<Property> globalParamsList = processData.getGlobalParams();
-        if (globalParamsList != null && globalParamsList.size() > 0) {
+        List<Property> globalParamsList = new ArrayList<>();
+        if (processData.getGlobalParams() != null && processData.getGlobalParams().size() > 0) {
             Set<Property> userDefParamsSet = new HashSet<>(globalParamsList);
             globalParamsList = new ArrayList<>(userDefParamsSet);
-            processDefine.setGlobalParamList(globalParamsList);
         }
+        processDefine.setGlobalParamList(globalParamsList);
         processDefine.setUpdateTime(now);
         processDefine.setFlag(Flag.YES);
         if (processDefineMapper.update(processDefine) > 0) {

File: escheduler-server/src/main/java/cn/escheduler/server/master/runner/MasterExecThread.java
Patch:
@@ -869,7 +869,7 @@ private boolean checkProcessTimeOut(ProcessInstance processInstance) {
         }
 
         Date now = new Date();
-        long runningTime =  DateUtils.differMs(now, processInstance.getStartTime());
+        long runningTime =  DateUtils.diffMin(now, processInstance.getStartTime());
 
         if(runningTime > processInstance.getTimeout()){
             return true;

File: escheduler-server/src/main/java/cn/escheduler/server/utils/AlertManager.java
Patch:
@@ -175,7 +175,7 @@ public void sendAlertWorkerToleranceFault(ProcessInstance processInstance, List<
         alert.setContent(content);
         alert.setAlertType(AlertType.EMAIL);
         alert.setCreateTime(new Date());
-        alert.setAlertGroupId(processInstance.getWarningGroupId());
+        alert.setAlertGroupId(processInstance.getWarningGroupId() == null ? 1:processInstance.getWarningGroupId());
         alert.setReceivers(processInstance.getProcessDefinition().getReceivers());
         alert.setReceiversCc(processInstance.getProcessDefinition().getReceiversCc());
 

File: escheduler-server/src/main/java/cn/escheduler/server/zk/ZKMasterClient.java
Patch:
@@ -123,9 +123,9 @@ public void init(){
 		// register master
 		this.registMaster();
 
-		// check if fault tolerance is required
+		// check if fault tolerance is required，failure and tolerance
 		if (getActiveMasterNum() == 1) {
-			processDao.selfFaultTolerant(ExecutionStatus.RUNNING_EXEUTION.ordinal());
+			processDao.selfFaultTolerant(ExecutionStatus.RUNNING_EXEUTION.ordinal(),ExecutionStatus.NEED_FAULT_TOLERANCE.ordinal());
 		}
 	}
 

File: escheduler-server/src/main/java/cn/escheduler/server/master/runner/MasterExecThread.java
Patch:
@@ -869,7 +869,7 @@ private boolean checkProcessTimeOut(ProcessInstance processInstance) {
         }
 
         Date now = new Date();
-        long runningTime =  DateUtils.differMs(now, processInstance.getStartTime());
+        long runningTime =  DateUtils.diffMin(now, processInstance.getStartTime());
 
         if(runningTime > processInstance.getTimeout()){
             return true;

File: escheduler-server/src/main/java/cn/escheduler/server/master/runner/MasterExecThread.java
Patch:
@@ -869,7 +869,7 @@ private boolean checkProcessTimeOut(ProcessInstance processInstance) {
         }
 
         Date now = new Date();
-        long runningTime =  DateUtils.differMs(now, processInstance.getStartTime());
+        long runningTime =  DateUtils.diffMin(now, processInstance.getStartTime());
 
         if(runningTime > processInstance.getTimeout()){
             return true;

File: escheduler-dao/src/main/java/cn/escheduler/dao/model/ErrorCommand.java
Patch:
@@ -102,6 +102,7 @@ public class ErrorCommand {
 
 
     public ErrorCommand(Command command, String message){
+        this.id = command.getId();
         this.commandType = command.getCommandType();
         this.executorId = command.getExecutorId();
         this.processDefinitionId = command.getProcessDefinitionId();

File: escheduler-dao/src/main/java/cn/escheduler/dao/model/ErrorCommand.java
Patch:
@@ -102,6 +102,7 @@ public class ErrorCommand {
 
 
     public ErrorCommand(Command command, String message){
+        this.id = command.getId();
         this.commandType = command.getCommandType();
         this.executorId = command.getExecutorId();
         this.processDefinitionId = command.getProcessDefinitionId();

File: escheduler-dao/src/main/java/cn/escheduler/dao/model/ErrorCommand.java
Patch:
@@ -102,6 +102,7 @@ public class ErrorCommand {
 
 
     public ErrorCommand(Command command, String message){
+        this.id = command.getId();
         this.commandType = command.getCommandType();
         this.executorId = command.getExecutorId();
         this.processDefinitionId = command.getProcessDefinitionId();

File: escheduler-api/src/main/java/cn/escheduler/api/service/DataSourceService.java
Patch:
@@ -480,7 +480,9 @@ public String buildParameter(String name, String desc, DbType type, String host,
 
         }
 
-        logger.info("parameters map-----" + JSONObject.toJSONString(parameterMap));
+        if(logger.isDebugEnabled()){
+            logger.info("parameters map-----" + JSONObject.toJSONString(parameterMap));
+        }
         return JSONObject.toJSONString(parameterMap);
 
 

File: escheduler-api/src/main/java/cn/escheduler/api/service/DataSourceService.java
Patch:
@@ -480,7 +480,9 @@ public String buildParameter(String name, String desc, DbType type, String host,
 
         }
 
-        logger.info("parameters map-----" + JSONObject.toJSONString(parameterMap));
+        if(logger.isDebugEnabled()){
+            logger.info("parameters map-----" + JSONObject.toJSONString(parameterMap));
+        }
         return JSONObject.toJSONString(parameterMap);
 
 

File: escheduler-api/src/main/java/cn/escheduler/api/controller/ExecutorController.java
Patch:
@@ -66,7 +66,7 @@ public Result startProcessInstance(@RequestAttribute(value = Constants.SESSION_U
                                        @RequestParam(value = "receiversCc", required = false) String receiversCc,
                                        @RequestParam(value = "runMode", required = false) RunMode runMode,
                                        @RequestParam(value = "processInstancePriority", required = false) Priority processInstancePriority,
-                                       @RequestParam(value = "workerGroupId", required = false, defaultValue = "0") int workerGroupId,
+                                       @RequestParam(value = "workerGroupId", required = false, defaultValue = "-1") int workerGroupId,
                                        @RequestParam(value = "timeout", required = false) Integer timeout) {
         try {
             logger.info("login user {}, start process instance, project name: {}, process definition id: {}, schedule time: {}, "

File: escheduler-api/src/main/java/cn/escheduler/api/quartz/ProcessScheduleJob.java
Patch:
@@ -132,6 +132,7 @@ public void execute(JobExecutionContext context) throws JobExecutionException {
         command.setScheduleTime(scheduledFireTime);
         command.setStartTime(fireTime);
         command.setWarningGroupId(schedule.getWarningGroupId());
+        command.setWorkerGroupId(schedule.getWorkerGroupId());
         command.setWarningType(schedule.getWarningType());
         command.setProcessInstancePriority(schedule.getProcessInstancePriority());
 

File: escheduler-dao/src/main/java/cn/escheduler/dao/mapper/ScheduleMapperProvider.java
Patch:
@@ -48,6 +48,7 @@ public String insert(Map<String, Object> parameter) {
       VALUES("`user_id`", "#{schedule.userId}");
       VALUES("`release_state`", EnumFieldUtil.genFieldStr("schedule.releaseState", ReleaseState.class));
       VALUES("`warning_group_id`", "#{schedule.warningGroupId}");
+      VALUES("`worker_group_id`", "#{schedule.workerGroupId}");
       VALUES("`process_instance_priority`", EnumFieldUtil.genFieldStr("schedule.processInstancePriority", Priority.class));
     }}.toString();
   }
@@ -67,6 +68,7 @@ public String update(Map<String, Object> parameter) {
         SET("`user_id`=#{schedule.userId}");
         SET("`release_state`=" + EnumFieldUtil.genFieldStr("schedule.releaseState", ReleaseState.class));
         SET("`warning_group_id`=#{schedule.warningGroupId}");
+        SET("`worker_group_id`=#{schedule.workerGroupId}");
         SET("`process_instance_priority`="+ EnumFieldUtil.genFieldStr("schedule.processInstancePriority", Priority.class));
 
         WHERE("`id` = #{schedule.id}");

File: escheduler-server/src/main/java/cn/escheduler/server/worker/runner/FetchTaskThread.java
Patch:
@@ -109,7 +109,7 @@ private boolean checkWorkerGroup(TaskInstance taskInstance, String host){
         }
         int processWorkerGroupId = processInstance.getWorkerGroupId();
 
-        taskWorkerGroupId = (taskWorkerGroupId == 0 ? processWorkerGroupId : taskWorkerGroupId);
+        taskWorkerGroupId = (taskWorkerGroupId <= 0 ? processWorkerGroupId : taskWorkerGroupId);
 
         if(taskWorkerGroupId == 0){
             return true;

File: escheduler-dao/src/main/java/cn/escheduler/dao/mapper/CommandMapper.java
Patch:
@@ -79,6 +79,7 @@ public interface CommandMapper {
             @Result(property = "scheduleTime", column = "schedule_time", javaType = Timestamp.class, jdbcType = JdbcType.DATE),
             @Result(property = "updateTime", column = "update_time", javaType = Timestamp.class, jdbcType = JdbcType.DATE),
             @Result(property = "startTime", column = "start_time", javaType = Timestamp.class, jdbcType = JdbcType.DATE),
+            @Result(property = "workerGroupId", column = "worker_group_id", javaType = Integer.class, jdbcType = JdbcType.INTEGER),
             @Result(property = "processInstancePriority", column = "process_instance_priority", javaType = Priority.class, typeHandler = EnumOrdinalTypeHandler.class, jdbcType = JdbcType.TINYINT)
     })
     @SelectProvider(type = CommandMapperProvider.class, method = "queryOneCommand")
@@ -101,6 +102,7 @@ public interface CommandMapper {
             @Result(property = "scheduleTime", column = "schedule_time", javaType = Timestamp.class, jdbcType = JdbcType.DATE),
             @Result(property = "updateTime", column = "update_time", javaType = Timestamp.class, jdbcType = JdbcType.DATE),
             @Result(property = "startTime", column = "start_time", javaType = Timestamp.class, jdbcType = JdbcType.DATE),
+            @Result(property = "workerGroupId", column = "worker_group_id", javaType = Integer.class, jdbcType = JdbcType.INTEGER),
             @Result(property = "processInstancePriority", column = "process_instance_priority", javaType = Priority.class, typeHandler = EnumOrdinalTypeHandler.class, jdbcType = JdbcType.TINYINT)
     })
     @SelectProvider(type = CommandMapperProvider.class, method = "queryAllCommand")

File: escheduler-dao/src/main/java/cn/escheduler/dao/mapper/ErrorCommandMapperProvider.java
Patch:
@@ -34,6 +34,7 @@ public String insert(Map<String, Object> parameter) {
                 VALUES("`schedule_time`", "#{errorCommand.scheduleTime}");
                 VALUES("`update_time`", "#{errorCommand.updateTime}");
                 VALUES("`start_time`", "#{errorCommand.startTime}");
+                VALUES("`worker_group_id`", "#{errorCommand.workerGroupId}");
                 VALUES("`message`", "#{errorCommand.message}");
             }
         }.toString();

File: escheduler-dao/src/main/java/cn/escheduler/dao/mapper/ProcessInstanceMapperProvider.java
Patch:
@@ -67,6 +67,7 @@ public String insert(Map<String, Object> parameter) {
                 VALUES("`dependence_schedule_times`", "#{processInstance.dependenceScheduleTimes}");
                 VALUES("`is_sub_process`", EnumFieldUtil.genFieldStr("processInstance.isSubProcess", Flag.class));
                 VALUES("`executor_id`", "#{processInstance.executorId}");
+                VALUES("`worker_group_id`", "#{processInstance.workerGroupId}");
                 VALUES("`process_instance_priority`", EnumFieldUtil.genFieldStr("processInstance.processInstancePriority", Priority.class));
             }
         }.toString();
@@ -139,6 +140,7 @@ public String update(Map<String, Object> parameter) {
                 SET("`dependence_schedule_times`=#{processInstance.dependenceScheduleTimes}");
                 SET("`is_sub_process`="+EnumFieldUtil.genFieldStr("processInstance.isSubProcess", Flag.class));
                 SET("`executor_id`=#{processInstance.executorId}");
+                SET("`worker_group_id`=#{processInstance.workerGroupId}");
 
                 WHERE("`id`=#{processInstance.id}");
 

File: escheduler-api/src/main/java/cn/escheduler/api/quartz/ProcessScheduleJob.java
Patch:
@@ -125,7 +125,7 @@ public void execute(JobExecutionContext context) throws JobExecutionException {
         }
 
         Command command = new Command();
-        command.setCommandType(CommandType.START_PROCESS);
+        command.setCommandType(CommandType.SCHEDULER);
         command.setExecutorId(schedule.getUserId());
         command.setFailureStrategy(schedule.getFailureStrategy());
         command.setProcessDefinitionId(schedule.getProcessDefinitionId());

File: escheduler-server/src/main/java/cn/escheduler/server/worker/runner/FetchTaskThread.java
Patch:
@@ -172,7 +172,7 @@ public void run() {
                             FileUtils.createWorkDirAndUserIfAbsent(execLocalPath,
                                     processInstance.getTenantCode(), logger);
 
-
+                            logger.info("task : {} ready to submit to task scheduler thread",taskId);
                             // submit task
                             workerExecService.submit(new TaskScheduleThread(taskInstance, processDao));
                         }

File: escheduler-api/src/main/java/cn/escheduler/api/quartz/ProcessScheduleJob.java
Patch:
@@ -125,7 +125,7 @@ public void execute(JobExecutionContext context) throws JobExecutionException {
         }
 
         Command command = new Command();
-        command.setCommandType(CommandType.START_PROCESS);
+        command.setCommandType(CommandType.SCHEDULER);
         command.setExecutorId(schedule.getUserId());
         command.setFailureStrategy(schedule.getFailureStrategy());
         command.setProcessDefinitionId(schedule.getProcessDefinitionId());

File: escheduler-server/src/main/java/cn/escheduler/server/worker/runner/FetchTaskThread.java
Patch:
@@ -172,7 +172,7 @@ public void run() {
                             FileUtils.createWorkDirAndUserIfAbsent(execLocalPath,
                                     processInstance.getTenantCode(), logger);
 
-
+                            logger.info("task : {} ready to submit to task scheduler thread",taskId);
                             // submit task
                             workerExecService.submit(new TaskScheduleThread(taskInstance, processDao));
                         }

File: escheduler-common/src/main/java/cn/escheduler/common/utils/DateUtils.java
Patch:
@@ -72,7 +72,7 @@ public static String dateToString(Date date){
 	public static Date parse(String date,String format){
 		try {
 			return new SimpleDateFormat(format).parse(date);
-		} catch (ParseException e) {
+		} catch (Exception e) {
 			logger.error("error while parse date:" + date, e);
 		}
 		return null;

File: escheduler-dao/src/main/java/cn/escheduler/dao/TaskRecordDao.java
Patch:
@@ -17,6 +17,7 @@
 package cn.escheduler.dao;
 
 import cn.escheduler.common.Constants;
+import cn.escheduler.common.utils.DateUtils;
 import cn.escheduler.dao.model.TaskRecord;
 import org.apache.commons.configuration.Configuration;
 import org.apache.commons.configuration.ConfigurationException;
@@ -201,8 +202,8 @@ private static TaskRecord convertToTaskRecord(ResultSet resultSet) throws SQLExc
         taskRecord.setProcId(resultSet.getInt("PROC_ID"));
         taskRecord.setProcName(resultSet.getString("PROC_NAME"));
         taskRecord.setProcDate(resultSet.getString("PROC_DATE"));
-        taskRecord.setStartDate(resultSet.getDate("STARTDATE"));
-        taskRecord.setEndDate(resultSet.getDate("ENDDATE"));
+        taskRecord.setStartTime(DateUtils.stringToDate(resultSet.getString("STARTDATE")));
+        taskRecord.setEndTime(DateUtils.stringToDate(resultSet.getString("ENDDATE")));
         taskRecord.setResult(resultSet.getString("RESULT"));
         taskRecord.setDuration(resultSet.getInt("DURATION"));
         taskRecord.setNote(resultSet.getString("NOTE"));

File: escheduler-api/src/main/java/cn/escheduler/api/utils/Constants.java
Patch:
@@ -82,6 +82,7 @@ public class Constants {
     public static final String ORG_POSTGRESQL_DRIVER = "org.postgresql.Driver";
     public static final String COM_MYSQL_JDBC_DRIVER = "com.mysql.jdbc.Driver";
     public static final String ORG_APACHE_HIVE_JDBC_HIVE_DRIVER = "org.apache.hive.jdbc.HiveDriver";
+    public static final String COM_CLICKHOUSE_JDBC_DRIVER = "ru.yandex.clickhouse.ClickHouseDriver";
 
     /**
      * database type
@@ -90,13 +91,15 @@ public class Constants {
     public static final String POSTGRESQL = "POSTGRESQL";
     public static final String HIVE = "HIVE";
     public static final String SPARK = "SPARK";
+    public static final String CLICKHOUSE = "CLICKHOUSE";
 
     /**
      * jdbc url
      */
     public static final String JDBC_MYSQL = "jdbc:mysql://";
     public static final String JDBC_POSTGRESQL = "jdbc:postgresql://";
     public static final String JDBC_HIVE_2 = "jdbc:hive2://";
+    public static final String JDBC_CLICKHOUSE = "jdbc:clickhouse://";
 
 
     public static final String ADDRESS = "address";

File: escheduler-common/src/main/java/cn/escheduler/common/enums/DbType.java
Patch:
@@ -25,6 +25,7 @@ public enum DbType {
    * 1 postgresql
    * 2 hive
    * 3 spark
+   * 4 clickhouse
    */
-  MYSQL, POSTGRESQL, HIVE, SPARK
+  MYSQL, POSTGRESQL, HIVE, SPARK, CLICKHOUSE
 }

File: escheduler-common/src/main/java/cn/escheduler/common/job/db/DataSourceFactory.java
Patch:
@@ -39,6 +39,8 @@ public static BaseDataSource getDatasource(DbType dbType, String parameter) {
           return JSONUtils.parseObject(parameter, HiveDataSource.class);
         case SPARK:
           return JSONUtils.parseObject(parameter, SparkDataSource.class);
+        case CLICKHOUSE:
+          return JSONUtils.parseObject(parameter, ClickHouseDataSource.class);
         default:
           return null;
       }

File: escheduler-server/src/main/java/cn/escheduler/server/worker/task/sql/SqlTask.java
Patch:
@@ -120,6 +120,9 @@ public void handle() throws Exception {
                     }else if (DbType.SPARK.name().equals(dataSource.getType().name())){
                         baseDataSource = JSONObject.parseObject(dataSource.getConnectionParams(),SparkDataSource.class);
                         Class.forName(Constants.JDBC_SPARK_CLASS_NAME);
+                    }else if (DbType.CLICKHOUSE.name().equals(dataSource.getType().name())){
+                        baseDataSource = JSONObject.parseObject(dataSource.getConnectionParams(),ClickHouseDataSource.class);
+                        Class.forName(Constants.JDBC_CLICKHOUSE_CLASS_NAME);
                     }
 
                     Map<Integer,Property> sqlParamMap =  new HashMap<Integer,Property>();

File: escheduler-dao/src/main/java/cn/escheduler/dao/ProcessDao.java
Patch:
@@ -606,6 +606,7 @@ private ProcessInstance constructProcessInstance(Command command, String host){
                     updateTaskInstance(taskInstance);
                 }
                 processInstance.setStartTime(new Date());
+                processInstance.setEndTime(null);
                 processInstance.setRunTimes(runTime +1);
                 initComplementDataParam(processDefinition, processInstance, cmdParam);
                 break;

File: escheduler-api/src/main/java/cn/escheduler/api/enums/Status.java
Patch:
@@ -154,6 +154,8 @@ public enum Status {
     QUEUE_EXIST(10129, "queue already exists"),
     QUEUE_NAME_EXIST(10130, "queue name already exists"),
     UPDATE_QUEUE_ERROR(10131, "update queue error"),
+    NEED_NOT_UPDATE_QUEUE(10132, "need not update queue"),
+    VERIFY_QUEUE_ERROR(10133,"verify queue error"),
 
 
     UDF_FUNCTION_NOT_EXIST(20001, "UDF function not found"),

File: escheduler-api/src/main/java/cn/escheduler/api/controller/ProcessDefinitionController.java
Patch:
@@ -127,7 +127,7 @@ public Result updateProccessDefinition(@RequestAttribute(value = Constants.SESSI
             logger.info("login user {}, update process define, project name: {}, process define name: {}, " +
                             "process_definition_json: {}, desc: {}, locations:{}, connects:{}",
                     loginUser.getUserName(), projectName, name, processDefinitionJson,desc, locations, connects);
-            Map<String, Object> result = processDefinitionService.updateProccessDefinition(loginUser, projectName, id, name,
+            Map<String, Object> result = processDefinitionService.updateProcessDefinition(loginUser, projectName, id, name,
                     processDefinitionJson, desc, locations, connects);
             return returnDataList(result);
         }catch (Exception e){

File: escheduler-dao/src/main/java/cn/escheduler/dao/ProcessDao.java
Patch:
@@ -1272,7 +1272,7 @@ public Schedule querySchedule(int id) {
         return scheduleMapper.queryById(id);
     }
 
-    public List<ProcessInstance> queryNeddFailoverProcessInstances(String host){
+    public List<ProcessInstance> queryNeedFailoverProcessInstances(String host){
         return processInstanceMapper.queryByHostAndStatus(host, stateArray);
     }
 

File: escheduler-server/src/main/java/cn/escheduler/server/zk/ZKMasterClient.java
Patch:
@@ -256,7 +256,7 @@ public void childEvent(CuratorFramework client, PathChildrenCacheEvent event) th
 
 								logger.info("start master failover ...");
 
-								List<ProcessInstance> needFailoverProcessInstanceList = processDao.queryNeddFailoverProcessInstances(masterHost);
+								List<ProcessInstance> needFailoverProcessInstanceList = processDao.queryNeedFailoverProcessInstances(masterHost);
 
 								//updateProcessInstance host is null and insert into command
 								for(ProcessInstance processInstance : needFailoverProcessInstanceList){

File: escheduler-api/src/main/java/cn/escheduler/api/controller/ProcessDefinitionController.java
Patch:
@@ -127,7 +127,7 @@ public Result updateProccessDefinition(@RequestAttribute(value = Constants.SESSI
             logger.info("login user {}, update process define, project name: {}, process define name: {}, " +
                             "process_definition_json: {}, desc: {}, locations:{}, connects:{}",
                     loginUser.getUserName(), projectName, name, processDefinitionJson,desc, locations, connects);
-            Map<String, Object> result = processDefinitionService.updateProccessDefinition(loginUser, projectName, id, name,
+            Map<String, Object> result = processDefinitionService.updateProcessDefinition(loginUser, projectName, id, name,
                     processDefinitionJson, desc, locations, connects);
             return returnDataList(result);
         }catch (Exception e){

File: escheduler-dao/src/main/java/cn/escheduler/dao/ProcessDao.java
Patch:
@@ -1272,7 +1272,7 @@ public Schedule querySchedule(int id) {
         return scheduleMapper.queryById(id);
     }
 
-    public List<ProcessInstance> queryNeddFailoverProcessInstances(String host){
+    public List<ProcessInstance> queryNeedFailoverProcessInstances(String host){
         return processInstanceMapper.queryByHostAndStatus(host, stateArray);
     }
 

File: escheduler-server/src/main/java/cn/escheduler/server/zk/ZKMasterClient.java
Patch:
@@ -256,7 +256,7 @@ public void childEvent(CuratorFramework client, PathChildrenCacheEvent event) th
 
 								logger.info("start master failover ...");
 
-								List<ProcessInstance> needFailoverProcessInstanceList = processDao.queryNeddFailoverProcessInstances(masterHost);
+								List<ProcessInstance> needFailoverProcessInstanceList = processDao.queryNeedFailoverProcessInstances(masterHost);
 
 								//updateProcessInstance host is null and insert into command
 								for(ProcessInstance processInstance : needFailoverProcessInstanceList){

