File: src/com/interview/dynamic/OptimalTreeSearch.java
Patch:
@@ -15,7 +15,7 @@ private int minCostRec(int input[],int freq[],int low,int high,int level){
             return 0;
         }
         
-        int min = Integer.MIN_VALUE;
+        int min = Integer.MAX_VALUE;
         for(int i=low; i <= high; i++){
             int val = minCostRec(input,freq,low,i-1,level+1) + 
                     minCostRec(input,freq,i+1,high,level+1)

File: src/com/interview/dynamic/OptimalTreeSearch.java
Patch:
@@ -15,7 +15,7 @@ private int minCostRec(int input[],int freq[],int low,int high,int level){
             return 0;
         }
         
-        int min = Integer.MIN_VALUE;
+        int min = Integer.MAX_VALUE;
         for(int i=low; i <= high; i++){
             int val = minCostRec(input,freq,low,i-1,level+1) + 
                     minCostRec(input,freq,i+1,high,level+1)

File: src/com/interview/array/MaximumGap.java
Patch:
@@ -73,6 +73,6 @@ public int maximumGap(int[] input) {
     public static void main(String args[]) {
         int[] input = {4, 3, 13, 2, 9, 7};
         MaximumGap mg = new MaximumGap();
-        System.out.println(mg.maxGap(input));
+        System.out.println(mg.maximumGap(input));
     }
 }

File: src/com/interview/dynamic/LongestCommonSubsequence.java
Patch:
@@ -1,7 +1,7 @@
 package com.interview.dynamic;
 
 /**
- http://www.geeksforgeeks.org/longest-common-substring/
+ http://www.geeksforgeeks.org/dynamic-programming-set-4-longest-common-subsequence/
  */
 public class LongestCommonSubsequence {
 

File: src/com/interview/dynamic/LongestCommonSubsequence.java
Patch:
@@ -1,7 +1,7 @@
 package com.interview.dynamic;
 
 /**
- http://www.geeksforgeeks.org/longest-common-substring/
+ http://www.geeksforgeeks.org/dynamic-programming-set-4-longest-common-subsequence/
  */
 public class LongestCommonSubsequence {
 

File: src/com/interview/array/Flip0sMaximum1s.java
Patch:
@@ -25,6 +25,7 @@ public int flip0sToMaximizeConsecutive1s(int input[], int flipsAllowed) {
             } else {
                 if (countZero < flipsAllowed) {
                     countZero++;
+                    result = Math.max(result, i - windowStart + 1);
                 } else {
                     while(true) {
                         if (input[windowStart] == 0) {

File: src/com/interview/array/LongestSameSumSpan.java
Patch:
@@ -24,6 +24,7 @@ public int longestSpan(int input1[], int input2[]) {
         Map<Integer, Integer> diff = new HashMap<>();
         int prefix1 = 0, prefix2 = 0;
         int maxSpan = 0;
+        diff.put(0, -1);
         for (int i = 0; i < input1.length ; i++) {
             prefix1 += input1[i];
             prefix2 += input2[i];
@@ -38,9 +39,8 @@ public int longestSpan(int input1[], int input2[]) {
     }
 
     public static void main(String args[]) {
-        int input1[] = {0, 1, 0, 1, 1, 1, 1};
-        int input2[] = {1, 1, 1, 1, 1, 0, 1};
-
+        int input1[] = {1, 0, 0, 1, 1, 0};
+        int input2[] = {0, 1, 1, 0, 1 ,1};
         LongestSameSumSpan lsss = new LongestSameSumSpan();
         System.out.print(lsss.longestSpan(input1, input2));
     }

File: src/com/interview/dynamic/SubRectangularMatrixWithMaximumSum.java
Patch:
@@ -91,7 +91,7 @@ private KadaneResult kadane(int arr[]){
                 max = maxSoFar;
             }
         }
-        return new KadaneResult(maxSoFar, maxStart, maxEnd);
+        return new KadaneResult(max, maxStart, maxEnd);
     }
     
     

File: src/com/interview/array/TugOfWar.java
Patch:
@@ -21,7 +21,7 @@ public int findMind(int arr[]){
 
     private void combinationUtil(int arr[],int k, int start,int sum, int total,int pos, List<Integer> result){
         if(pos == k){
-            if(Math.abs(sum - total/2)) < minFoundSoFar){
+            if(Math.abs(sum - total/2) < minFoundSoFar) {
                 minFoundSoFar = Math.abs(sum - total/2);
                 System.out.println(result);
             }

File: src/com/interview/dynamic/CoinChanging.java
Patch:
@@ -74,12 +74,12 @@ public int minCoinChangeInfinteSupply(int total, int arr[]){
         int temp[] = new int[total+1];
         temp[0] = 0;
         for(int i=1; i <= total; i++){
-            temp[i] = Integer.MAX_VALUE;
+            temp[i] = Integer.MAX_VALUE-1;
         }
         for(int i=0; i < arr.length; i++){
             for(int j=1; j <= total; j++){
                 if(j >= arr[i]){
-                    //be careful here. Max_val + 1 can result in very small neg number.
+                    //be careful here. Max_val + 1 can result in very small negative number.
                     temp[j] = Math.min(temp[j], temp[j-arr[i]] +1);
                 }
             }
@@ -113,7 +113,7 @@ private int minCoinChangeInfinteSupplyRec(int total, int coins[], int count){
     public static void main(String args[]){
         CoinChanging cc = new CoinChanging();
         int total = 15;
-        int coins[] = {1,3,4,6,7,9};
+        int coins[] = {3,4,6,7,9};
         System.out.println(cc.minCoinChangeInfinteSupply(total, coins));
         System.out.println(cc.minCoinChangeInfinteSupplyRec(total, coins));
     }

File: src/com/interview/graph/DisjointSet.java
Patch:
@@ -56,10 +56,10 @@ public void union(long id1, long id2){
         
         //else whoever's rank is higher becomes parent of other
         if(parent1.rank >= parent2.rank){
-            parent1.rank += 1;
+            //increment rank only if both sets have same rank
+            parent1.rank = (parent1.rank == parent2.rank) ? parent1.rank + 1 : parent1.rank; 
             parent2.parent = parent1;
         } else{
-            parent2.rank += 1;
             parent1.parent = parent2;
         }
     }

File: src/com/interview/tree/HuffmanEncoding.java
Patch:
@@ -67,10 +67,10 @@ public void createCode(HuffmanNode node,Map<Character,String> map,StringBuffer b
             map.put(node.input,buff.toString());
             return;
         }
-        buff.append("1");
+        buff.append("0");
         createCode(node.left,map,buff);
         buff.deleteCharAt(buff.length()-1);
-        buff.append("0");
+        buff.append("1");
         createCode(node.right,map,buff);
         buff.deleteCharAt(buff.length()-1);
     }

File: src/com/interview/tree/LargestBSTInBinaryTree.java
Patch:
@@ -28,7 +28,7 @@ public int largestBST(Node root){
     }
     
     private MinMax largest(Node root){
-        //if root is null return min as Integer.MAX and max as Integer.MIN
+        //if root is null return min as Integer.MAX and max as Integer.MIN 
         if(root == null){
             return new MinMax();
         }

File: src/com/interview/tree/TreeTraversalInSpiralOrder.java
Patch:
@@ -65,7 +65,7 @@ public void spiralWithTwoStack(Node root) {
     }
 
     /**
-     * One deque method to print the matrix
+     * One deque method to print tree in spiral order
      */
     public void spiralWithOneDeque(Node root) {
         if (root == null) {

File: src/com/interview/misc/HorizonMapping.java
Patch:
@@ -32,9 +32,9 @@ public Deque<Interval> mergeInterval(Interval[] intervals) {
         stack.offerFirst(intervals[0]);
         for (int i = 1; i < intervals.length; i++) {
             Interval curr = stack.peekFirst();
-            if (curr.end <= intervals[i].start) {
+            if (curr.end < intervals[i].start) {
                 stack.offerFirst(intervals[i]);
-            } else if (curr.end > intervals[i].start) {
+            } else if (curr.end >= intervals[i].start) {
                 Interval newInterval = mergeOverlap(curr, intervals[i]);
                 if (newInterval != null) {
                     stack.offerFirst(newInterval);
@@ -71,7 +71,7 @@ private Interval mergeOverlap(Interval i1, Interval i2) {
     public static void main(String args[]) {
         Interval intervals[] = new Interval[6];
         intervals[0] = new Interval(0, 2, 3);
-        intervals[1] = new Interval(2, 6, 5);
+        intervals[1] = new Interval(2, 6, 3);
         intervals[2] = new Interval(4, 8, 8);
         intervals[3] = new Interval(5, 9, 10);
         intervals[4] = new Interval(6, 10, 9);

File: src/com/interview/misc/AddingTwoSetOfIntervals.java
Patch:
@@ -34,7 +34,7 @@ public List<Pair> combineInterval(Pair[] arr1, Pair[] arr2){
         List<Pair> result = new ArrayList<Pair>();
         int i=0;
         int j=0;
-        Pair current = new Pair(-1000,-1000);
+        Pair current = new Pair(Integer.MIN_VALUE,Integer.MIN_VALUE+1);
         while(i < arr1.length && j < arr2.length){
             if(arr1[i].low <= arr2[j].low){
                 if(arr1[i].low <= current.high){

File: src/com/interview/dynamic/EggDropping.java
Patch:
@@ -46,7 +46,7 @@ public int calculateRecursive(int eggs, int floors){
     
     public static void main(String args[]){
         EggDropping ed = new EggDropping();
-        int r = ed.calculateRecursive(3,20);
+        int r = ed.calculate(3,100);
         System.out.println(r);
     }
 }

File: src/com/interview/dynamic/NumberOfWaysToScorePoints.java
Patch:
@@ -39,7 +39,7 @@ public int version2(int score[],int total){
     }
     
     public static void main(String args[]){
-        int score[] = {1,2};
+        int score[] = {1,2,3};
         NumberOfWaysToScorePoints now = new NumberOfWaysToScorePoints();
         System.out.println(now.version1(score, 4));
         System.out.println(now.version2(score, 4));

File: src/com/interview/dynamic/DiceThrowWays.java
Patch:
@@ -7,7 +7,7 @@
  */
 public class DiceThrowWays {
 
-    public int numberOfWays(int n, int m, int k){
+    public int numberOfWays(int n, int f, int k){
         
         int T[][] = new int[n+1][k+1];
         T[0][0] = 1;
@@ -16,15 +16,15 @@ public int numberOfWays(int n, int m, int k){
         }*/
         
         for(int i=1; i <= n; i++){
-            for(int j =1; j <= i*m && j <= k ; j++){
+            for(int j =1; j <= i*f && j <= k ; j++){
                 if(j == i){
                     T[i][j] = 1;
                     continue;
                 }
                 if(j < i){
                     continue;
                 }
-                for(int l =1; l <=m ;l++){
+                for(int l =1; l <=f ;l++){
                     if(j >= l){
                         T[i][j] += T[i-1][j-l];
                     }

File: src/com/interview/array/TrappingWater.java
Patch:
@@ -1,4 +1,4 @@
-
+package com.interview.array;
 /**
  * https://oj.leetcode.com/problems/trapping-rain-water/
  */

File: src/com/interview/linklist/LinkList.java
Patch:
@@ -137,7 +137,7 @@ public static void main(String args[]){
     //  head = headRef.node;
     //  ll.printList(head);
         System.out.println();
-        head = ll.reverseRecursive1(head);
+        head = ll.reverseRecursiveEasy(head);
         ll.printList(head);
     }
 }

File: src/com/interview/tree/SortedOrderPrintCompleteTreeArray.java
Patch:
@@ -7,7 +7,7 @@
  * 1 element array
  * multi element array
  */
-public class SortedOrderPrintFullTreeArray {
+public class SortedOrderPrintCompleteTreeArray {
 
 	private void print(int arr[],int current){
 		if(current >= arr.length){
@@ -24,7 +24,7 @@ public void print(int arr[]){
 	
 	public static void main(String args[]){
 		int arr[] = {4, 2, 5, 1, 3};
-		SortedOrderPrintFullTreeArray sop = new SortedOrderPrintFullTreeArray();
+		SortedOrderPrintCompleteTreeArray sop = new SortedOrderPrintCompleteTreeArray();
 		sop.print(arr);
 	}
 }

File: src/com/interview/tree/ConnectNodesAtSameLevel.java
Patch:
@@ -63,7 +63,7 @@ private Node findRightSibling(Node root){
 		else if(root.right != null){
 			return root.right;
 		}
-		return findRightSibling(root.right);
+		return findRightSibling(root.next);
 	}
 	
 	public static void main(String args[]){

File: src/com/interview/multithreaded/ThreadPoolImpl.java
Patch:
@@ -51,7 +51,7 @@ public void run(Runnable thread) {
 		}
 	}
 
-	public void execute() {
+	private void execute() {
 		if (!isExecuting) {
 			isExecuting = true;
 			ExecutingRunnable runnable = new ExecutingRunnable();

