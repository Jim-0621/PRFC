File: processor/src/test/java/permissions/dispatcher/processor/base/BaseTest.java
Patch:
@@ -6,11 +6,11 @@
 
 public abstract class BaseTest {
 
-    public final JavaFileObject actual() {
+    final JavaFileObject actual() {
         return JavaFileObjects.forSourceLines(getName(), getActualSource());
     }
 
-    public final JavaFileObject expect() {
+    final JavaFileObject expect() {
         return JavaFileObjects.forSourceLines(getName() + "PermissionsDispatcher", getExpectSource());
     }
 

File: test/src/main/java/permissions/dispatcher/test/FragmentWithAllAnnotations.java
Patch:
@@ -12,7 +12,7 @@
 import permissions.dispatcher.RuntimePermissions;
 
 @RuntimePermissions
-public class SupportFragmentWithAllAnnotations extends Fragment {
+public class FragmentWithAllAnnotations extends Fragment {
 
     @NeedsPermission(Manifest.permission.CAMERA)
     void showCamera() {
@@ -33,7 +33,6 @@ void showNeverAskForCamera() {
     @Override
     public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
         super.onRequestPermissionsResult(requestCode, permissions, grantResults);
-        SupportFragmentWithAllAnnotationsPermissionsDispatcher.onRequestPermissionsResult(this, requestCode, grantResults);
+        FragmentWithAllAnnotationsPermissionsDispatcher.onRequestPermissionsResult(this, requestCode, grantResults);
     }
-
 }

File: processor/src/test/java/permissions/dispatcher/processor/base/BaseTest.java
Patch:
@@ -6,11 +6,11 @@
 
 public abstract class BaseTest {
 
-    public final JavaFileObject actual() {
+    final JavaFileObject actual() {
         return JavaFileObjects.forSourceLines(getName(), getActualSource());
     }
 
-    public final JavaFileObject expect() {
+    final JavaFileObject expect() {
         return JavaFileObjects.forSourceLines(getName() + "PermissionsDispatcher", getExpectSource());
     }
 

File: processor/src/test/java/permissions/dispatcher/processor/data/Source.java
Patch:
@@ -236,7 +236,7 @@ protected String[] getExpectSource() {
         }
     };
 
-    public static final BaseTest RationaleWithoutParameters = new BaseTest() {
+    public static final BaseTest RationaleWithOneMoreParameters = new BaseTest() {
         @Override
         protected String getName() {
             return "MyActivity";
@@ -251,13 +251,14 @@ protected String[] getActualSource() {
                     "import permissions.dispatcher.RuntimePermissions;",
                     "import permissions.dispatcher.NeedsPermission;",
                     "import permissions.dispatcher.OnShowRationale;",
+                    "import permissions.dispatcher.PermissionRequest;",
                     "@RuntimePermissions",
                     "public class MyActivity extends Activity {",
                     "   @NeedsPermission(Manifest.permission.CAMERA)",
                     "   void showCamera() {",
                     "   }",
                     "   @OnShowRationale(Manifest.permission.CAMERA)",
-                    "   void cameraRationale() {",
+                    "   void cameraRationale(PermissionRequest request, int value) {",
                     "   }",
                     "}"
             };

File: library/src/main/java/permissions/dispatcher/PermissionUtils.java
Patch:
@@ -1,7 +1,6 @@
 package permissions.dispatcher;
 
 import android.app.Activity;
-import android.app.Fragment;
 import android.content.Context;
 import android.content.pm.PackageManager;
 import android.os.Build;
@@ -11,6 +10,7 @@
 import androidx.core.app.ActivityCompat;
 import androidx.core.app.AppOpsManagerCompat;
 import androidx.core.content.PermissionChecker;
+import androidx.fragment.app.Fragment;
 import androidx.legacy.app.FragmentCompat;
 
 public final class PermissionUtils {
@@ -153,7 +153,7 @@ public static boolean shouldShowRequestPermissionRationale(Fragment fragment, St
      * @return returns true if one of the permission is needed to show rationale.
      */
     @Deprecated
-    public static boolean shouldShowRequestPermissionRationale(Fragment fragment, String... permissions) {
+    public static boolean shouldShowRequestPermissionRationale(android.app.Fragment fragment, String... permissions) {
         for (String permission : permissions) {
             if (FragmentCompat.shouldShowRequestPermissionRationale(fragment, permission)) {
                 return true;
@@ -170,7 +170,7 @@ public static boolean shouldShowRequestPermissionRationale(Fragment fragment, St
      * @param requestCode Request code connected to the permission request
      */
     @Deprecated
-    public static void requestPermissions(Fragment fragment, String[] permissions, int requestCode) {
+    public static void requestPermissions(android.app.Fragment fragment, String[] permissions, int requestCode) {
         FragmentCompat.requestPermissions(fragment, permissions, requestCode);
     }
 }

File: test-v13/src/main/java/permissions/dispatcher/test_v13/FragmentWithAllAnnotations.java
Patch:
@@ -1,9 +1,9 @@
 package permissions.dispatcher.test_v13;
 
 import android.Manifest;
-import android.app.Fragment;
 
 import androidx.annotation.NonNull;
+import androidx.fragment.app.Fragment;
 import permissions.dispatcher.NeedsPermission;
 import permissions.dispatcher.OnNeverAskAgain;
 import permissions.dispatcher.OnPermissionDenied;

File: lint/src/main/java/permissions/dispatcher/CallNeedsPermissionDetector.java
Patch:
@@ -62,7 +62,7 @@ public boolean visitCallExpression(UCallExpression node) {
             if (isGeneratedFiles(context)) {
                 return true;
             }
-            if (annotatedMethods.contains(node.getMethodName())) {
+            if (node.getReceiver() == null && annotatedMethods.contains(node.getMethodName())) {
                 context.report(ISSUE, node, context.getLocation(node), "Trying to access permission-protected method directly");
             }
             return true;

File: lint/src/main/java/permissions/dispatcher/CallNeedsPermissionDetector.java
Patch:
@@ -62,7 +62,7 @@ public boolean visitCallExpression(UCallExpression node) {
             if (isGeneratedFiles(context)) {
                 return true;
             }
-            if (annotatedMethods.contains(node.getMethodName())) {
+            if (node.getReceiver() == null && annotatedMethods.contains(node.getMethodName())) {
                 context.report(ISSUE, node, context.getLocation(node), "Trying to access permission-protected method directly");
             }
             return true;

File: sample/src/main/java/permissions/dispatcher/sample/camera/CameraPreview.java
Patch:
@@ -16,6 +16,7 @@
 
 package permissions.dispatcher.sample.camera;
 
+import android.annotation.SuppressLint;
 import android.content.Context;
 import android.hardware.Camera;
 import android.util.Log;
@@ -33,6 +34,7 @@
  * Implementation is based directly on the documentation at
  * http://developer.android.com/guide/topics/media/camera.html
  */
+@SuppressLint("ViewConstructor")
 public class CameraPreview extends SurfaceView implements SurfaceHolder.Callback {
 
     private static final String TAG = "CameraPreview";

File: sample/src/main/java/permissions/dispatcher/sample/camera/CameraPreview.java
Patch:
@@ -16,6 +16,7 @@
 
 package permissions.dispatcher.sample.camera;
 
+import android.annotation.SuppressLint;
 import android.content.Context;
 import android.hardware.Camera;
 import android.util.Log;
@@ -33,6 +34,7 @@
  * Implementation is based directly on the documentation at
  * http://developer.android.com/guide/topics/media/camera.html
  */
+@SuppressLint("ViewConstructor")
 public class CameraPreview extends SurfaceView implements SurfaceHolder.Callback {
 
     private static final String TAG = "CameraPreview";

File: lint/src/main/java/permissions/dispatcher/CallOnRequestPermissionsResultDetector.java
Patch:
@@ -107,9 +107,9 @@ private static boolean checkMethodCall(UMethod method, Set<String> targetClasses
                         continue;
                     }
                     UQualifiedReferenceExpression referenceExpression = (UQualifiedReferenceExpression) expression;
-                    String targetMethod = "onRequestPermissionsResult(requestCode, permissions, grantResults)";
+                    String targetMethodName = "onRequestPermissionsResult";
                     if (targetClasses.contains(referenceExpression.getReceiver().toString())
-                            && targetMethod.equals(referenceExpression.getSelector().toString())) {
+                            && referenceExpression.getSelector().toString().startsWith(targetMethodName)) {
                         return true;
                     }
                 }

File: lint/src/main/java/permissions/dispatcher/NoCorrespondingNeedsPermissionDetector.java
Patch:
@@ -86,8 +86,8 @@ public boolean visitAnnotation(UAnnotation node) {
                 return true;
             }
             // If there is OnShowRationale, find corresponding NeedsPermission
-            boolean found = false;
             for (UAnnotation onShowRationaleAnnotation : onShowRationaleAnnotations) {
+                boolean found = false;
                 for (UAnnotation needsPermissionAnnotation : needsPermissionAnnotations) {
                     if (hasSameNodes(onShowRationaleAnnotation.getAttributeValues(), needsPermissionAnnotation.getAttributeValues())) {
                         found = true;

File: lint/src/test/java/permissions/dispatcher/CallOnRequestPermissionsResultDetectorTest.java
Patch:
@@ -23,8 +23,9 @@ public void callOnRequestPermissionsResultDetectorNoError() throws Exception {
         @Language("JAVA") String foo = ""
                 + "package permissions.dispatcher;\n"
                 + "@RuntimePermissions\n"
-                + "public class Foo {\n"
+                + "public class Foo extends android.app.Activity {\n"
                 + "public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {\n"
+                + "super.onRequestPermissionsResult(requestCode, permissions, grantResults);\n"
                 + "FooPermissionsDispatcher.onRequestPermissionsResult(requestCode, permissions, grantResults);\n"
                 + "}\n"
                 + "@NeedsPermission(\"Camera\")"

File: sample/src/main/java/permissions/dispatcher/sample/camera/CameraPreviewFragment.java
Patch:
@@ -85,7 +85,7 @@ private void initCamera() {
             return;
         }
 
-        FrameLayout preview = (FrameLayout) getView().findViewById(R.id.camera_preview);
+        FrameLayout preview = getView().findViewById(R.id.camera_preview);
         preview.removeAllViews();
 
         if (mPreview == null) {

File: lint/src/main/java/permissions/dispatcher/CallNeedsPermissionDetector.java
Patch:
@@ -93,12 +93,10 @@ public boolean visitSimpleNameReferenceExpression(USimpleNameReferenceExpression
         @Override
         public boolean visitAnnotation(UAnnotation annotation) {
             if (!context.isEnabled(ISSUE)) {
-                super.visitAnnotation(annotation);
                 return true;
             }
             String type = annotation.getQualifiedName();
             if (!matchingAnnotationTypeNames.contains(type)) {
-                super.visitAnnotation(annotation);
                 return true;
             }
             UFile file = context.getUastFile();

File: lint/src/main/java/permissions/dispatcher/NoCorrespondingNeedsPermissionDetector.java
Patch:
@@ -44,7 +44,7 @@ public final class NoCorrespondingNeedsPermissionDetector extends Detector imple
 
     @Override
     public List<Class<? extends UElement>> getApplicableUastTypes() {
-        return Collections.<Class<? extends UElement>>singletonList(UAnnotation.class);
+        return Collections.<Class<? extends UElement>>singletonList(UClass.class);
     }
 
     @Override

File: lint/src/main/java/permissions/dispatcher/PermissionsDispatcherIssueRegistry.java
Patch:
@@ -12,7 +12,7 @@ public final class PermissionsDispatcherIssueRegistry extends IssueRegistry {
     public List<Issue> getIssues() {
         return Arrays.asList(
                 CallNeedsPermissionDetector.ISSUE,
-                NoCorrespondingNeedsPermissionDetector.ISSUE,
-                CallOnRequestPermissionsResultDetector.ISSUE);
+                CallOnRequestPermissionsResultDetector.ISSUE,
+                NoCorrespondingNeedsPermissionDetector.ISSUE);
     }
 }

File: lint/src/test/java/permissions/dispatcher/CallNeedsPermissionDetectorTest.java
Patch:
@@ -13,6 +13,7 @@ public final class CallNeedsPermissionDetectorTest {
     @Test
     public void callNeedsPermissionMethod() throws Exception {
         CallNeedsPermissionDetector.methods = Collections.singletonList("fooBar");
+
         @Language("JAVA") String foo = ""
                 + "package com.example;\n"
                 + "public class Foo {\n"
@@ -21,6 +22,7 @@ public void callNeedsPermissionMethod() throws Exception {
                 + "baz.fooBar();  "
                 + "}\n"
                 + "}";
+
         @Language("JAVA") String baz = ""
                 + "package com.example;\n"
                 + "public class Baz {\n"
@@ -50,6 +52,7 @@ public void callNeedsPermissionMethodNoError() throws Exception {
                 + "baz.noFooBar();\n"
                 + "}\n"
                 + "}";
+
         @Language("JAVA") String baz = ""
                 + "package com.example;\n"
                 + "public class Baz {\n"

File: lint/src/test/java/permissions/dispatcher/PermissionsDispatcherIssueRegistryTest.java
Patch:
@@ -4,7 +4,7 @@
 
 import static com.google.common.truth.Truth.assertThat;
 
-public final class LintRegistryTest {
+public final class PermissionsDispatcherIssueRegistryTest {
     @Test
     public void issues() {
         assertThat(new PermissionsDispatcherIssueRegistry().getIssues()).containsAllOf(

File: library/src/main/android/permissions/dispatcher/PermissionUtils.java
Patch:
@@ -96,7 +96,7 @@ public static boolean hasSelfPermissions(Context context, String... permissions)
      * @see #hasSelfPermissions(Context, String...)
      */
     private static boolean hasSelfPermission(Context context, String permission) {
-        if (Build.VERSION.SDK_INT > Build.VERSION_CODES.M && "Xiaomi".equalsIgnoreCase(Build.MANUFACTURER)) {
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && "Xiaomi".equalsIgnoreCase(Build.MANUFACTURER)) {
             return hasSelfPermissionForXiaomi(context, permission);
         }
         try {

File: library/src/main/android/permissions/dispatcher/PermissionUtils.java
Patch:
@@ -96,7 +96,7 @@ public static boolean hasSelfPermissions(Context context, String... permissions)
      * @see #hasSelfPermissions(Context, String...)
      */
     private static boolean hasSelfPermission(Context context, String permission) {
-        if (Build.VERSION.SDK_INT > Build.VERSION_CODES.M && "Xiaomi".equalsIgnoreCase(Build.MANUFACTURER)) {
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && "Xiaomi".equalsIgnoreCase(Build.MANUFACTURER)) {
             return hasSelfPermissionForXiaomi(context, permission);
         }
         try {

File: lint/src/test/java/permissions/dispatcher/NoCorrespondingNeedsPermissionDetectorTest.java
Patch:
@@ -24,8 +24,8 @@ protected List<Issue> getIssues() {
 
     @Test
     public void testNoNeedsPermissionAnnotationNoErrors() throws Exception {
-        String onNeeds = getOnNeedsPermission();
-        String onShow = getOnRationaleAnnotation();
+        @Language("JAVA") String onNeeds = getOnNeedsPermission();
+        @Language("JAVA") String onShow = getOnRationaleAnnotation();
         @Language("JAVA") String foo = ""
                 + PACKAGE
                 + "public class Foo {\n"
@@ -48,7 +48,7 @@ public void testNoNeedsPermissionAnnotationNoErrors() throws Exception {
     @Test
     public void testNoNeedsPermissionAnnotation() throws Exception {
 
-        String onShow = getOnRationaleAnnotation();
+        @Language("JAVA") String onShow = getOnRationaleAnnotation();
 
         @Language("JAVA") String foo = ""
                 + PACKAGE

File: lint/src/test/java/permissions/dispatcher/NoCorrespondingNeedsPermissionDetectorTest.java
Patch:
@@ -24,8 +24,8 @@ protected List<Issue> getIssues() {
 
     @Test
     public void testNoNeedsPermissionAnnotationNoErrors() throws Exception {
-        String onNeeds = getOnNeedsPermission();
-        String onShow = getOnRationaleAnnotation();
+        @Language("JAVA") String onNeeds = getOnNeedsPermission();
+        @Language("JAVA") String onShow = getOnRationaleAnnotation();
         @Language("JAVA") String foo = ""
                 + PACKAGE
                 + "public class Foo {\n"
@@ -48,7 +48,7 @@ public void testNoNeedsPermissionAnnotationNoErrors() throws Exception {
     @Test
     public void testNoNeedsPermissionAnnotation() throws Exception {
 
-        String onShow = getOnRationaleAnnotation();
+        @Language("JAVA") String onShow = getOnRationaleAnnotation();
 
         @Language("JAVA") String foo = ""
                 + PACKAGE

File: library/src/main/android/permissions/dispatcher/PermissionUtils.java
Patch:
@@ -18,7 +18,7 @@ public final class PermissionUtils {
     private static final SimpleArrayMap<String, Integer> MIN_SDK_PERMISSIONS;
 
     static {
-        MIN_SDK_PERMISSIONS = new SimpleArrayMap<>(8);
+        MIN_SDK_PERMISSIONS = new SimpleArrayMap<String, Integer>(8);
         MIN_SDK_PERMISSIONS.put("com.android.voicemail.permission.ADD_VOICEMAIL", 14);
         MIN_SDK_PERMISSIONS.put("android.permission.BODY_SENSORS", 20);
         MIN_SDK_PERMISSIONS.put("android.permission.READ_CALL_LOG", 16);

File: lint/src/main/java/permissions/dispatcher/CallNeedsPermissionDetector.java
Patch:
@@ -32,7 +32,7 @@ public class CallNeedsPermissionDetector extends Detector implements Detector.Ja
             Severity.ERROR,
             new Implementation(CallNeedsPermissionDetector.class, EnumSet.of(Scope.ALL_JAVA_FILES)));
 
-    static List<String> generatedClassNames = new ArrayList<>();
+    static List<String> generatedClassNames = new ArrayList<String>();
 
     @Override
     public AstVisitor createJavaVisitor(JavaContext context) {
@@ -54,7 +54,7 @@ private static class AnnotationChecker extends ForwardingAstVisitor {
         private AnnotationChecker(JavaContext context) {
             this.context = context;
 
-            matchingAnnotationTypeNames = new HashSet<>();
+            matchingAnnotationTypeNames = new HashSet<String>();
             matchingAnnotationTypeNames.add("RuntimePermissions");
             matchingAnnotationTypeNames.add("permissions.dispatcher.RuntimePermissions");
         }

File: lint/src/main/java/permissions/dispatcher/NoCorrespondingNeedsPermissionDetector.java
Patch:
@@ -52,8 +52,8 @@ static class AnnotationChecker extends ForwardingAstVisitor {
         private AnnotationChecker(JavaContext context) {
             this.context = context;
 
-            needsPermissionAnnotations = new HashSet<>();
-            onShowRationaleAnnotations = new HashSet<>();
+            needsPermissionAnnotations = new HashSet<Annotation>();
+            onShowRationaleAnnotations = new HashSet<Annotation>();
         }
 
         @Override

File: library/src/main/java/permissions/dispatcher/NeedsPermission.java
Patch:
@@ -12,4 +12,5 @@
 @Retention(RetentionPolicy.CLASS)
 public @interface NeedsPermission {
     String[] value();
+    int maxSdkVersion() default 0;
 }
\ No newline at end of file

File: library/src/main/android/permissions/dispatcher/PermissionUtils.java
Patch:
@@ -18,13 +18,15 @@ public final class PermissionUtils {
     private static final SimpleArrayMap<String, Integer> MIN_SDK_PERMISSIONS;
 
     static {
-        MIN_SDK_PERMISSIONS = new SimpleArrayMap<>(6);
+        MIN_SDK_PERMISSIONS = new SimpleArrayMap<>(8);
         MIN_SDK_PERMISSIONS.put("com.android.voicemail.permission.ADD_VOICEMAIL", 14);
         MIN_SDK_PERMISSIONS.put("android.permission.BODY_SENSORS", 20);
         MIN_SDK_PERMISSIONS.put("android.permission.READ_CALL_LOG", 16);
         MIN_SDK_PERMISSIONS.put("android.permission.READ_EXTERNAL_STORAGE", 16);
         MIN_SDK_PERMISSIONS.put("android.permission.USE_SIP", 9);
         MIN_SDK_PERMISSIONS.put("android.permission.WRITE_CALL_LOG", 16);
+        MIN_SDK_PERMISSIONS.put("android.permission.SYSTEM_ALERT_WINDOW", 23);
+        MIN_SDK_PERMISSIONS.put("android.permission.WRITE_SETTINGS", 23);
     }
 
     private static volatile int targetSdkVersion = -1;

File: lint/src/main/java/permissions/dispatcher/PermissionsDispatcherIssueRegistry.java
Patch:
@@ -11,6 +11,7 @@ public class PermissionsDispatcherIssueRegistry extends IssueRegistry {
     @Override
     public List<Issue> getIssues() {
         return Arrays.asList(CallNeedsPermissionDetector.ISSUE,
-                NoCorrespondingNeedsPermissionDetector.ISSUE);
+                NoCorrespondingNeedsPermissionDetector.ISSUE,
+                CallOnRequestPermissionsResultDetector.ISSUE);
     }
 }

File: lint/src/main/java/permissions/dispatcher/PermissionsDispatcherIssueRegistry.java
Patch:
@@ -11,7 +11,6 @@ public class PermissionsDispatcherIssueRegistry extends IssueRegistry {
     @Override
     public List<Issue> getIssues() {
         return Arrays.asList(CallNeedsPermissionDetector.ISSUE,
-                NoCorrespondingNeedsPermissionDetector.ISSUE,
-                CallOnRequestPermissionsResultDetector.ISSUE);
+                NoCorrespondingNeedsPermissionDetector.ISSUE);
     }
 }

File: library/src/main/android/permissions/dispatcher/PermissionUtils.java
Patch:
@@ -39,6 +39,9 @@ private PermissionUtils() {
      * @return returns true if all permissions have been granted.
      */
     public static boolean verifyPermissions(int... grantResults) {
+        if (grantResults.length == 0) {
+            return false;
+        }
         for (int result : grantResults) {
             if (result != PackageManager.PERMISSION_GRANTED) {
                 return false;

File: library/src/main/android/permissions/dispatcher/PermissionUtils.java
Patch:
@@ -39,6 +39,9 @@ private PermissionUtils() {
      * @return returns true if all permissions have been granted.
      */
     public static boolean verifyPermissions(int... grantResults) {
+        if (grantResults.length == 0) {
+            return false;
+        }
         for (int result : grantResults) {
             if (result != PackageManager.PERMISSION_GRANTED) {
                 return false;

File: library/src/main/java/permissions/dispatcher/NeedsPermission.java
Patch:
@@ -9,7 +9,7 @@
  * Register some methods which permissions are needed.
  */
 @Target(ElementType.METHOD)
-@Retention(RetentionPolicy.SOURCE)
+@Retention(RetentionPolicy.CLASS)
 public @interface NeedsPermission {
     String[] value();
 }
\ No newline at end of file

File: library/src/main/java/permissions/dispatcher/OnNeverAskAgain.java
Patch:
@@ -9,7 +9,7 @@
  * Register some methods handling the user's choice to permanently deny permissions.
  */
 @Target(ElementType.METHOD)
-@Retention(RetentionPolicy.SOURCE)
+@Retention(RetentionPolicy.CLASS)
 public @interface OnNeverAskAgain {
     String[] value();
 }

File: library/src/main/java/permissions/dispatcher/OnPermissionDenied.java
Patch:
@@ -9,7 +9,7 @@
  * Register some methods which permissions are needed.
  */
 @Target(ElementType.METHOD)
-@Retention(RetentionPolicy.SOURCE)
+@Retention(RetentionPolicy.CLASS)
 public @interface OnPermissionDenied {
     String[] value();
 }
\ No newline at end of file

File: library/src/main/java/permissions/dispatcher/OnShowRationale.java
Patch:
@@ -9,7 +9,7 @@
  * Register some methods which explain why permissions are needed.
  */
 @Target(ElementType.METHOD)
-@Retention(RetentionPolicy.SOURCE)
+@Retention(RetentionPolicy.CLASS)
 public @interface OnShowRationale {
     String[] value();
 }
\ No newline at end of file

File: library/src/main/java/permissions/dispatcher/RuntimePermissions.java
Patch:
@@ -9,6 +9,6 @@
  * Register an <code>Activity</code> or <code>Fragment</code> to handle permissions.
  */
 @Target(ElementType.TYPE)
-@Retention(RetentionPolicy.SOURCE)
+@Retention(RetentionPolicy.CLASS)
 public @interface RuntimePermissions {
 }
\ No newline at end of file

File: library/src/main/java/permissions/dispatcher/NeedsPermission.java
Patch:
@@ -9,7 +9,7 @@
  * Register some methods which permissions are needed.
  */
 @Target(ElementType.METHOD)
-@Retention(RetentionPolicy.SOURCE)
+@Retention(RetentionPolicy.CLASS)
 public @interface NeedsPermission {
     String[] value();
 }
\ No newline at end of file

File: library/src/main/java/permissions/dispatcher/OnNeverAskAgain.java
Patch:
@@ -9,7 +9,7 @@
  * Register some methods handling the user's choice to permanently deny permissions.
  */
 @Target(ElementType.METHOD)
-@Retention(RetentionPolicy.SOURCE)
+@Retention(RetentionPolicy.CLASS)
 public @interface OnNeverAskAgain {
     String[] value();
 }

File: library/src/main/java/permissions/dispatcher/OnPermissionDenied.java
Patch:
@@ -9,7 +9,7 @@
  * Register some methods which permissions are needed.
  */
 @Target(ElementType.METHOD)
-@Retention(RetentionPolicy.SOURCE)
+@Retention(RetentionPolicy.CLASS)
 public @interface OnPermissionDenied {
     String[] value();
 }
\ No newline at end of file

File: library/src/main/java/permissions/dispatcher/OnShowRationale.java
Patch:
@@ -9,7 +9,7 @@
  * Register some methods which explain why permissions are needed.
  */
 @Target(ElementType.METHOD)
-@Retention(RetentionPolicy.SOURCE)
+@Retention(RetentionPolicy.CLASS)
 public @interface OnShowRationale {
     String[] value();
 }
\ No newline at end of file

File: library/src/main/java/permissions/dispatcher/RuntimePermissions.java
Patch:
@@ -9,6 +9,6 @@
  * Register an <code>Activity</code> or <code>Fragment</code> to handle permissions.
  */
 @Target(ElementType.TYPE)
-@Retention(RetentionPolicy.SOURCE)
+@Retention(RetentionPolicy.CLASS)
 public @interface RuntimePermissions {
 }
\ No newline at end of file

File: lint/src/main/java/permissions/dispatcher/CallNeedsPermissionDetector.java
Patch:
@@ -23,14 +23,14 @@
 import lombok.ast.MethodInvocation;
 
 
-public class PermissionsDispatcherDetector extends Detector implements Detector.JavaScanner {
+public class CallNeedsPermissionDetector extends Detector implements Detector.JavaScanner {
     public static final Issue ISSUE = Issue.create("CallNeedsPermission",
             "Call the corresponding \"withCheck\" method of the generated PermissionsDispatcher class instead",
             "Directly invoking a method annotated with @NeedsPermission may lead to misleading behaviour on devices running Marshmallow and up. Therefore, it is advised to use the generated PermissionsDispatcher class instead, which provides a \"withCheck\" method that safely handles runtime permissions.",
             Category.CORRECTNESS,
             7,
             Severity.ERROR,
-            new Implementation(PermissionsDispatcherDetector.class, EnumSet.of(Scope.ALL_JAVA_FILES)));
+            new Implementation(CallNeedsPermissionDetector.class, EnumSet.of(Scope.ALL_JAVA_FILES)));
 
     static List<String> generatedClassNames = new ArrayList<>();
 
@@ -74,7 +74,7 @@ public boolean visitAnnotation(Annotation node) {
             if (resolvedNode instanceof JavaParser.ResolvedClass) {
                 generatedClassNames.add(resolvedNode.getName() + "PermissionsDispatcher");
                 // let's check method call!
-                context.requestRepeat(new PermissionsDispatcherDetector(), EnumSet.of(Scope.ALL_JAVA_FILES));
+                context.requestRepeat(new CallNeedsPermissionDetector(), EnumSet.of(Scope.ALL_JAVA_FILES));
             }
             return super.visitAnnotation(node);
         }

File: lint/src/main/java/permissions/dispatcher/PermissionsDispatcherIssueRegistry.java
Patch:
@@ -10,6 +10,6 @@
 public class PermissionsDispatcherIssueRegistry extends IssueRegistry {
     @Override
     public List<Issue> getIssues() {
-        return Arrays.asList(PermissionsDispatcherDetector.ISSUE, NoCorrespondingNeedsPermissionDetector.ISSUE);
+        return Arrays.asList(CallNeedsPermissionDetector.ISSUE, NoCorrespondingNeedsPermissionDetector.ISSUE);
     }
 }

File: library/src/main/android/permissions/dispatcher/PermissionUtils.java
Patch:
@@ -101,7 +101,8 @@ public static boolean shouldShowRequestPermissionRationale(Activity activity, St
      */
     @TargetApi(Build.VERSION_CODES.DONUT)
     public static synchronized int getTargetSdkVersion(Context context) {
-        if (targetSdkVersion == -1) {
+        if (targetSdkVersion != -1) {
+            // target sdk version is already set
             return targetSdkVersion;
         }
         try {

File: library/src/main/java/permissions/dispatcher/PermissionRequest.java
Patch:
@@ -2,7 +2,7 @@
 
 /**
  * Interface used by {@link OnShowRationale} methods to allow for continuation
- * or cancelation of a permission request.
+ * or cancellation of a permission request.
  */
 public interface PermissionRequest {
 

File: library/src/main/java/permissions/dispatcher/PermissionRequest.java
Patch:
@@ -2,7 +2,7 @@
 
 /**
  * Interface used by {@link OnShowRationale} methods to allow for continuation
- * or cancelation of a permission request.
+ * or cancellation of a permission request.
  */
 public interface PermissionRequest {
 

File: permissionsdispatcher-processor/src/main/java/permissions/dispatcher/processor/ClassType.java
Patch:
@@ -2,7 +2,7 @@
 
 enum ClassType {
     ACTIVITY("target"),
-    FRAGMENT("target.getActivity()");
+    V4FRAGMENT("target.getActivity()");
 
     private final String activity;
 
@@ -18,7 +18,7 @@ static ClassType getClassType(String className, TypeResolver resolver) {
         if (resolver.isSubTypeOf(className, ConstantsProvider.ACTIVITY)) {
             return ACTIVITY;
         } else if (resolver.isSubTypeOf(className, ConstantsProvider.V4FRAGMENT)) {
-            return FRAGMENT;
+            return V4FRAGMENT;
         }
         return null;
     }

File: permissionsdispatcher-processor/src/test/java/permissions/dispatcher/processor/ClassTypeTest.java
Patch:
@@ -12,7 +12,7 @@ public class ClassTypeTest {
     @Test
     public void getActivityTest() {
         assertThat(ClassType.ACTIVITY.getActivity()).isEqualTo("target");
-        assertThat(ClassType.FRAGMENT.getActivity()).isEqualTo("target.getActivity()");
+        assertThat(ClassType.V4FRAGMENT.getActivity()).isEqualTo("target.getActivity()");
     }
 
 }

File: permissionsdispatcher-processor/src/test/java/permissions/dispatcher/processor/UtilsTest.java
Patch:
@@ -69,8 +69,8 @@ public void testGetFieldName() {
             assertThat(getRequestCodeFieldName(name)).isEqualTo("REQUEST_ACTIVITY");
         }
         {
-            String name = "FRAGMENT";
-            assertThat(getRequestCodeFieldName(name)).isEqualTo("REQUEST_FRAGMENT");
+            String name = "V4FRAGMENT";
+            assertThat(getRequestCodeFieldName(name)).isEqualTo("REQUEST_V4FRAGMENT");
         }
     }
 

File: permissionsdispatcher-processor/src/main/java/permissions/dispatcher/processor/ClassType.java
Patch:
@@ -2,7 +2,7 @@
 
 enum ClassType {
     ACTIVITY("target"),
-    FRAGMENT("target.getActivity()");
+    V4FRAGMENT("target.getActivity()");
 
     private final String activity;
 
@@ -18,7 +18,7 @@ static ClassType getClassType(String className, TypeResolver resolver) {
         if (resolver.isSubTypeOf(className, ConstantsProvider.ACTIVITY)) {
             return ACTIVITY;
         } else if (resolver.isSubTypeOf(className, ConstantsProvider.V4FRAGMENT)) {
-            return FRAGMENT;
+            return V4FRAGMENT;
         }
         return null;
     }

File: permissionsdispatcher-processor/src/test/java/permissions/dispatcher/processor/ClassTypeTest.java
Patch:
@@ -12,7 +12,7 @@ public class ClassTypeTest {
     @Test
     public void getActivityTest() {
         assertThat(ClassType.ACTIVITY.getActivity()).isEqualTo("target");
-        assertThat(ClassType.FRAGMENT.getActivity()).isEqualTo("target.getActivity()");
+        assertThat(ClassType.V4FRAGMENT.getActivity()).isEqualTo("target.getActivity()");
     }
 
 }

File: permissionsdispatcher-processor/src/test/java/permissions/dispatcher/processor/UtilsTest.java
Patch:
@@ -69,8 +69,8 @@ public void testGetFieldName() {
             assertThat(getRequestCodeFieldName(name)).isEqualTo("REQUEST_ACTIVITY");
         }
         {
-            String name = "FRAGMENT";
-            assertThat(getRequestCodeFieldName(name)).isEqualTo("REQUEST_FRAGMENT");
+            String name = "V4FRAGMENT";
+            assertThat(getRequestCodeFieldName(name)).isEqualTo("REQUEST_V4FRAGMENT");
         }
     }
 

File: permissionsdispatcher-processor/src/main/java/permissions/dispatcher/processor/ConstantsProvider.java
Patch:
@@ -6,6 +6,8 @@ interface ConstantsProvider {
 
     ClassName ACTIVITY_COMPAT = ClassName.get("android.support.v4.app", "ActivityCompat");
     ClassName PERMISSION_UTILS = ClassName.get("permissions.dispatcher", "PermissionUtils");
+    String ACTIVITY = "android.app.Activity";
+    String V4FRAGMENT = "android.support.v4.app.Fragment";
     String CLASS_SUFFIX = "PermissionsDispatcher";
     String METHOD_SUFFIX = "WithCheck";
     String REQUEST_CODE_PREFIX = "REQUEST_";

File: permissionsdispatcher-processor/src/main/java/permissions/dispatcher/processor/Validator.java
Patch:
@@ -28,11 +28,11 @@ static void checkNeedsPermissionsSize(List<ExecutableElement> permission, List<E
         }
     }
 
-    static void checkClassName(String name) {
-        if (name.endsWith("Activity") || name.endsWith("Fragment")) {
+    static void checkClassType(ClassType classType) {
+        if (classType != null) {
             return;
         }
-        throw new WrongClassException("Annotated class must be finished with 'Activity' or 'Fragment'");
+        throw new WrongClassException("Annotated class must be a subclass of 'android.app.Activity' or 'android.support.v4.app.Fragment'");
     }
 
     static void checkDuplicatedValue(List<ExecutableElement> methods, Class<? extends Annotation> clazz) {

File: permissionsdispatcher-processor/src/main/java/permissions/dispatcher/processor/PermissionsProcessor.java
Patch:
@@ -52,7 +52,7 @@ public synchronized void init(ProcessingEnvironment env) {
 
     @Override
     public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment env) {
-        List<RuntimePermissionsAnnotatedElement> classes = getAnnotatedClasses(env);
+        List<RuntimePermissionsAnnotatedElement> classes = getAnnotatedClasses(env, this);
         for (RuntimePermissionsAnnotatedElement clazz : classes) {
             JavaFile javaFile = createJavaFile(clazz);
             try {

File: permissionsdispatcher-processor/src/main/java/permissions/dispatcher/processor/RuntimePermissionsAnnotatedElement.java
Patch:
@@ -36,7 +36,7 @@ class RuntimePermissionsAnnotatedElement {
         String qualifiedName = element.getQualifiedName().toString();
         packageName = Utils.getPackageName(qualifiedName);
         className = Utils.getClassName(qualifiedName);
-        classType = ClassType.getClassType(className, resolver);
+        classType = ClassType.getClassType(qualifiedName, resolver);
         checkClassType(classType);
         needsPermissionMethods = findMethods(element, NeedsPermission.class);
         validateNeedsPermissionMethods();
@@ -122,8 +122,8 @@ public ExecutableElement getDeniedPermissionFromValue(String value) {
         return findDeniedPermissionFromValue(value, deniedPermissionMethods);
     }
 
-    public ExecutableElement getDeniedPermissionFromValue(String[] value) {
-        return findDeniedPermissionFromValue(value, deniedPermissionsMethods);
+    public ExecutableElement getDeniedPermissionsFromValue(String[] value) {
+        return findDeniedPermissionsFromValue(value, deniedPermissionsMethods);
     }
 
     public ExecutableElement getShowsRationaleFromValue(String value) {

File: permissionsdispatcher-processor/src/test/java/permissions/dispatcher/processor/PermissionsProcessorTest.java
Patch:
@@ -154,7 +154,7 @@ public void zeroPermission() {
     @Test
     public void wrongClassName() {
         expectedException.expect(RuntimeException.class);
-        expectedException.expectMessage("Annotated class must be finished with 'Activity' or 'Fragment'");
+        expectedException.expectMessage("Annotated class must be a subclass of 'android.app.Activity' or 'android.support.v4.app.Fragment'");
         String className = "MainUtils";
         JavaFileObject actual = forSourceLines(className, Source.WrongClassName.ACTUAL);
         JavaFileObject expect = forSourceLines(className + CLASS_SUFFIX, Source.EMPTY);

File: permissionsdispatcher-processor/src/test/java/permissions/dispatcher/processor/data/Source.java
Patch:
@@ -70,7 +70,7 @@ public static class OnePermissionFragment {
         public static final String[] ACTUAL = {
                 "package permissions.dispatcher.sample;",
                 "import android.Manifest;",
-                "import android.app.Fragment;",
+                "import android.support.v4.app.Fragment;",
                 "import android.os.Bundle;",
                 "import android.view.Menu;",
                 "import android.view.MenuItem;",

File: permissionsdispatcher-processor/src/main/java/permissions/dispatcher/processor/RuntimePermissionsAnnotatedElement.java
Patch:
@@ -32,12 +32,12 @@ class RuntimePermissionsAnnotatedElement {
 
     private final List<ExecutableElement> deniedPermissionsMethods;
 
-    RuntimePermissionsAnnotatedElement(TypeElement element) {
+    RuntimePermissionsAnnotatedElement(TypeElement element, TypeResolver resolver) {
         String qualifiedName = element.getQualifiedName().toString();
         packageName = Utils.getPackageName(qualifiedName);
         className = Utils.getClassName(qualifiedName);
-        checkClassName(className);
-        classType = ClassType.getClassType(className);
+        classType = ClassType.getClassType(className, resolver);
+        checkClassType(classType);
         needsPermissionMethods = findMethods(element, NeedsPermission.class);
         validateNeedsPermissionMethods();
         needsPermissionsMethods = findMethods(element, NeedsPermissions.class);

File: permissionsdispatcher-processor/src/main/java/permissions/dispatcher/processor/TypeResolver.java
Patch:
@@ -2,6 +2,6 @@
 
 interface TypeResolver {
 
-    boolean isSubTypeOf(String subType, String superType);
+    boolean isSubTypeOf(String subTypeClass, String superTypeClass);
 
 }

File: permissionsdispatcher-processor/src/main/java/permissions/dispatcher/processor/Utils.java
Patch:
@@ -32,11 +32,11 @@ final class Utils {
     private Utils() {
     }
 
-    static List<RuntimePermissionsAnnotatedElement> getAnnotatedClasses(RoundEnvironment env) {
+    static List<RuntimePermissionsAnnotatedElement> getAnnotatedClasses(RoundEnvironment env, TypeResolver resolver) {
         List<RuntimePermissionsAnnotatedElement> models = new ArrayList<>();
         Set<? extends Element> elements = env.getElementsAnnotatedWith(RuntimePermissions.class);
         for (Element element : elements) {
-            models.add(new RuntimePermissionsAnnotatedElement((TypeElement) element));
+            models.add(new RuntimePermissionsAnnotatedElement((TypeElement) element, resolver));
         }
         return models;
     }

File: permissionsdispatcher-processor/src/main/java/permissions/dispatcher/processor/Validator.java
Patch:
@@ -28,11 +28,11 @@ static void checkNeedsPermissionsSize(List<ExecutableElement> permission, List<E
         }
     }
 
-    static void checkClassName(String name) {
-        if (name.endsWith("Activity") || name.endsWith("Fragment")) {
+    static void checkClassType(ClassType classType) {
+        if (classType != null) {
             return;
         }
-        throw new WrongClassException("Annotated class must be finished with 'Activity' or 'Fragment'");
+        throw new WrongClassException("Annotated class must be a subclass of 'android.app.Activity' or 'android.support.v4.app.Fragment'");
     }
 
     static void checkDuplicatedValue(List<ExecutableElement> methods, Class<? extends Annotation> clazz) {

File: permissionsdispatcher-processor/src/main/java/permissions/dispatcher/processor/ClassType.java
Patch:
@@ -10,10 +10,10 @@ enum ClassType {
         this.activity = activity;
     }
 
-    static ClassType getClassType(String className) {
-        if (className.endsWith("Activity")) {
+    static ClassType getClassType(String className, TypeResolver resolver) {
+        if (resolver.isSubTypeOf(className, ConstantsProvider.ACTIVITY)) {
             return ACTIVITY;
-        } else if (className.endsWith("Fragment")) {
+        } else if (resolver.isSubTypeOf(className, ConstantsProvider.V4FRAGMENT)) {
             return FRAGMENT;
         }
         return null;

File: permissionsdispatcher-processor/src/main/java/permissions/dispatcher/processor/ConstantsProvider.java
Patch:
@@ -6,6 +6,8 @@ interface ConstantsProvider {
 
     ClassName ACTIVITY_COMPAT = ClassName.get("android.support.v4.app", "ActivityCompat");
     ClassName PERMISSION_UTILS = ClassName.get("permissions.dispatcher", "PermissionUtils");
+    String ACTIVITY = "android.app.Activity";
+    String V4FRAGMENT = "android.support.v4.app.Fragment";
     String CLASS_SUFFIX = "PermissionsDispatcher";
     String METHOD_SUFFIX = "WithCheck";
     String REQUEST_CODE_PREFIX = "REQUEST_";

File: library/src/main/android/permissions/dispatcher/PermissionUtils.java
Patch:
@@ -7,7 +7,7 @@
 
 import static android.support.v4.content.PermissionChecker.checkSelfPermission;
 
-public class PermissionUtils {
+public final class PermissionUtils {
 
     private PermissionUtils() {
     }
@@ -58,5 +58,4 @@ public static boolean shouldShowRequestPermissionRationale(Activity activity, St
         }
         return false;
     }
-
 }

File: sample/src/main/java/permissions/dispatcher/sample/camera/CameraPreview.java
Patch:
@@ -14,7 +14,7 @@
 * limitations under the License.
 */
 
-package permissions.dispatcher.dispatcher.sample.camera;
+package permissions.dispatcher.sample.camera;
 
 import android.content.Context;
 import android.hardware.Camera;

File: sample/src/main/java/permissions/dispatcher/sample/camera/CameraPreviewFragment.java
Patch:
@@ -14,7 +14,7 @@
 * limitations under the License.
 */
 
-package permissions.dispatcher.dispatcher.sample.camera;
+package permissions.dispatcher.sample.camera;
 
 import android.hardware.Camera;
 import android.os.Bundle;
@@ -24,8 +24,7 @@
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.FrameLayout;
-
-import permissions.dispatcher.dispatcher.sample.R;
+import permissions.dispatcher.sample.R;
 
 /**
  * Displays a {@link CameraPreview} of the first {@link Camera}.

File: sample/src/main/java/permissions/dispatcher/sample/contacts/ContactsFragment.java
Patch:
@@ -14,7 +14,7 @@
 * limitations under the License.
 */
 
-package permissions.dispatcher.dispatcher.sample.contacts;
+package permissions.dispatcher.sample.contacts;
 
 import android.content.ContentProviderOperation;
 import android.content.ContentResolver;
@@ -34,11 +34,10 @@
 import android.view.ViewGroup;
 import android.widget.Button;
 import android.widget.TextView;
+import permissions.dispatcher.sample.R;
 
 import java.util.ArrayList;
 
-import permissions.dispatcher.dispatcher.sample.R;
-
 /**
  * Displays the first contact stored on the device and contains an option to add a dummy contact.
  * <p>

File: permissionsdispatcher-sample/src/main/java/permissions/dispatcher/sample/camera/CameraPreviewFragment.java
Patch:
@@ -24,6 +24,7 @@
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.FrameLayout;
+
 import permissions.dispatcher.sample.R;
 
 /**

File: permissionsdispatcher-sample/src/main/java/permissions/dispatcher/sample/contacts/ContactsFragment.java
Patch:
@@ -34,10 +34,11 @@
 import android.view.ViewGroup;
 import android.widget.Button;
 import android.widget.TextView;
-import permissions.dispatcher.sample.R;
 
 import java.util.ArrayList;
 
+import permissions.dispatcher.sample.R;
+
 /**
  * Displays the first contact stored on the device and contains an option to add a dummy contact.
  * <p>

File: permissionsdispatcher/src/main/android/permissions/dispatcher/PermissionUtils.java
Patch:
@@ -7,7 +7,7 @@
 
 import static android.support.v4.content.PermissionChecker.checkSelfPermission;
 
-public final class PermissionUtils {
+public class PermissionUtils {
 
     private PermissionUtils() {
     }
@@ -58,4 +58,5 @@ public static boolean shouldShowRequestPermissionRationale(Activity activity, St
         }
         return false;
     }
+
 }

File: permissionsdispatcher/src/main/java/permissions/dispatcher/DeniedPermissions.java
Patch:
@@ -6,10 +6,10 @@
 import java.lang.annotation.Target;
 
 /**
- * Register some methods which permissions are needed.
+ * Register some methods invoked when a permission request is denied.
  */
 @Target(ElementType.METHOD)
 @Retention(RetentionPolicy.SOURCE)
-public @interface OnDenied {
+public @interface DeniedPermissions {
     String[] value();
 }
\ No newline at end of file

File: permissionsdispatcher/src/main/java/permissions/dispatcher/NeedsPermissions.java
Patch:
@@ -10,6 +10,6 @@
  */
 @Target(ElementType.METHOD)
 @Retention(RetentionPolicy.SOURCE)
-public @interface Needs {
+public @interface NeedsPermissions {
     String[] value();
 }
\ No newline at end of file

File: permissionsdispatcher/src/main/java/permissions/dispatcher/ShowsRationales.java
Patch:
@@ -10,6 +10,6 @@
  */
 @Target(ElementType.METHOD)
 @Retention(RetentionPolicy.SOURCE)
-public @interface OnRationale {
+public @interface ShowsRationales {
     String[] value();
 }
\ No newline at end of file

File: permissionsdispatcher-sample/src/main/java/permissions/dispatcher/sample/camera/CameraPreviewFragment.java
Patch:
@@ -24,6 +24,7 @@
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.FrameLayout;
+
 import permissions.dispatcher.sample.R;
 
 /**

File: permissionsdispatcher-sample/src/main/java/permissions/dispatcher/sample/contacts/ContactsFragment.java
Patch:
@@ -34,10 +34,11 @@
 import android.view.ViewGroup;
 import android.widget.Button;
 import android.widget.TextView;
-import permissions.dispatcher.sample.R;
 
 import java.util.ArrayList;
 
+import permissions.dispatcher.sample.R;
+
 /**
  * Displays the first contact stored on the device and contains an option to add a dummy contact.
  * <p>

File: permissionsdispatcher/src/main/android/permissions/dispatcher/PermissionUtils.java
Patch:
@@ -7,7 +7,7 @@
 
 import static android.support.v4.content.PermissionChecker.checkSelfPermission;
 
-public final class PermissionUtils {
+public class PermissionUtils {
 
     private PermissionUtils() {
     }
@@ -58,4 +58,5 @@ public static boolean shouldShowRequestPermissionRationale(Activity activity, St
         }
         return false;
     }
+
 }

File: permissionsdispatcher/src/main/java/permissions/dispatcher/DeniedPermissions.java
Patch:
@@ -6,10 +6,10 @@
 import java.lang.annotation.Target;
 
 /**
- * Register some methods which permissions are needed.
+ * Register some methods invoked when a permission request is denied.
  */
 @Target(ElementType.METHOD)
 @Retention(RetentionPolicy.SOURCE)
-public @interface OnDenied {
+public @interface DeniedPermissions {
     String[] value();
 }
\ No newline at end of file

File: permissionsdispatcher/src/main/java/permissions/dispatcher/NeedsPermissions.java
Patch:
@@ -10,6 +10,6 @@
  */
 @Target(ElementType.METHOD)
 @Retention(RetentionPolicy.SOURCE)
-public @interface Needs {
+public @interface NeedsPermissions {
     String[] value();
 }
\ No newline at end of file

File: permissionsdispatcher/src/main/java/permissions/dispatcher/ShowsRationales.java
Patch:
@@ -10,6 +10,6 @@
  */
 @Target(ElementType.METHOD)
 @Retention(RetentionPolicy.SOURCE)
-public @interface OnRationale {
+public @interface ShowsRationales {
     String[] value();
 }
\ No newline at end of file

File: library/src/main/android/permissions/dispatcher/PermissionUtils.java
Patch:
@@ -7,7 +7,7 @@
 
 import static android.support.v4.content.PermissionChecker.checkSelfPermission;
 
-public class PermissionUtils {
+public final class PermissionUtils {
 
     private PermissionUtils() {
     }
@@ -58,5 +58,4 @@ public static boolean shouldShowRequestPermissionRationale(Activity activity, St
         }
         return false;
     }
-
 }

File: library/src/main/java/permissions/dispatcher/Needs.java
Patch:
@@ -10,6 +10,6 @@
  */
 @Target(ElementType.METHOD)
 @Retention(RetentionPolicy.SOURCE)
-public @interface NeedsPermissions {
+public @interface Needs {
     String[] value();
 }
\ No newline at end of file

File: library/src/main/java/permissions/dispatcher/OnDenied.java
Patch:
@@ -6,10 +6,10 @@
 import java.lang.annotation.Target;
 
 /**
- * Register some methods invoked when a permission request is denied.
+ * Register some methods which permissions are needed.
  */
 @Target(ElementType.METHOD)
 @Retention(RetentionPolicy.SOURCE)
-public @interface DeniedPermissions {
+public @interface OnDenied {
     String[] value();
 }
\ No newline at end of file

File: library/src/main/java/permissions/dispatcher/OnRationale.java
Patch:
@@ -10,6 +10,6 @@
  */
 @Target(ElementType.METHOD)
 @Retention(RetentionPolicy.SOURCE)
-public @interface ShowsRationales {
+public @interface OnRationale {
     String[] value();
 }
\ No newline at end of file

File: sample/src/main/java/permissions/dispatcher/sample/camera/CameraPreviewFragment.java
Patch:
@@ -24,7 +24,6 @@
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.FrameLayout;
-
 import permissions.dispatcher.sample.R;
 
 /**

File: sample/src/main/java/permissions/dispatcher/sample/contacts/ContactsFragment.java
Patch:
@@ -34,11 +34,10 @@
 import android.view.ViewGroup;
 import android.widget.Button;
 import android.widget.TextView;
+import permissions.dispatcher.sample.R;
 
 import java.util.ArrayList;
 
-import permissions.dispatcher.sample.R;
-
 /**
  * Displays the first contact stored on the device and contains an option to add a dummy contact.
  * <p>

File: sample/src/main/java/permissions/dispatcher/sample/camera/CameraPreview.java
Patch:
@@ -14,7 +14,7 @@
 * limitations under the License.
 */
 
-package permissions.dispatcher.dispatcher.sample.camera;
+package permissions.dispatcher.sample.camera;
 
 import android.content.Context;
 import android.hardware.Camera;

File: sample/src/main/java/permissions/dispatcher/sample/camera/CameraPreviewFragment.java
Patch:
@@ -14,7 +14,7 @@
 * limitations under the License.
 */
 
-package permissions.dispatcher.dispatcher.sample.camera;
+package permissions.dispatcher.sample.camera;
 
 import android.hardware.Camera;
 import android.os.Bundle;
@@ -24,8 +24,7 @@
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.FrameLayout;
-
-import permissions.dispatcher.dispatcher.sample.R;
+import permissions.dispatcher.sample.R;
 
 /**
  * Displays a {@link CameraPreview} of the first {@link Camera}.

File: sample/src/main/java/permissions/dispatcher/sample/contacts/ContactsFragment.java
Patch:
@@ -14,7 +14,7 @@
 * limitations under the License.
 */
 
-package permissions.dispatcher.dispatcher.sample.contacts;
+package permissions.dispatcher.sample.contacts;
 
 import android.content.ContentProviderOperation;
 import android.content.ContentResolver;
@@ -34,11 +34,10 @@
 import android.view.ViewGroup;
 import android.widget.Button;
 import android.widget.TextView;
+import permissions.dispatcher.sample.R;
 
 import java.util.ArrayList;
 
-import permissions.dispatcher.dispatcher.sample.R;
-
 /**
  * Displays the first contact stored on the device and contains an option to add a dummy contact.
  * <p>

File: permissionsdispatcher-processor/src/main/java/permissions/dispatcher/processor/Validator.java
Patch:
@@ -26,8 +26,8 @@ final class Validator {
     private Validator() {
     }
 
-    static void checkNeedsPermissionsSize(List<ExecutableElement> methods) {
-        if (isEmpty(methods)) {
+    static void checkNeedsPermissionsSize(List<ExecutableElement> permission, List<ExecutableElement> permissions) {
+        if (isEmpty(permission) && isEmpty(permissions)) {
             throw new NotDefinedException("@NeedsPermission or @NeedsPermissions are not defined");
         }
     }

File: permissionsdispatcher-processor/src/main/java/permissions/dispatcher/processor/Utils.java
Patch:
@@ -41,7 +41,7 @@ static List<ExecutableElement> findMethods(Element element, Class<? extends Anno
         return methods;
     }
 
-    static ExecutableElement findShowsRationalFromValue(String value, List<ExecutableElement> elements) {
+    static ExecutableElement findShowsRationaleFromValue(String value, List<ExecutableElement> elements) {
         for (ExecutableElement element : elements) {
             ShowsRationale annotation = element.getAnnotation(ShowsRationale.class);
             if (value.equals(annotation.value())) {

File: permissionsdispatcher-processor/src/main/java/permissions/dispatcher/processor/ConstantsProvider.java
Patch:
@@ -4,6 +4,7 @@
 
 interface ConstantsProvider {
 
+    ClassName ACTIVITY_COMPAT = ClassName.get("android.support.v4.app", "ActivityCompat");
     ClassName PERMISSION_UTIL = ClassName.get("permissions.dispatcher", "PermissionUtils");
     String CLASS_SUFFIX = "PermissionsDispatcher";
     String METHOD_SUFFIX = "WithCheck";

File: permissionsdispatcher/src/androidTest/java/permissions.dispatcher/PermissionUtilsTest.java
Patch:
@@ -1,7 +1,6 @@
 package permissions.dispatcher;
 
 import android.Manifest;
-import android.content.Context;
 import android.content.pm.PackageManager;
 import android.test.AndroidTestCase;
 
@@ -27,8 +26,7 @@ public void testVerifyPermissions() {
 
     @Test
     public void testHasSelfPermissions() {
-        Context context = getContext();
-        assertThat(hasSelfPermissions(context, Manifest.permission.CAMERA), is(false));
+        assertThat(hasSelfPermissions(getContext(), Manifest.permission.CAMERA), is(false));
     }
 
 }

File: permissionsdispatcher-processor/src/main/java/permissions/dispatcher/processor/exceptions/NotDefinedException.java
Patch:
@@ -7,4 +7,3 @@ public NotDefinedException(String detailMessage) {
     }
 
 }
-

File: permissionsdispatcher-sample/src/main/java/permissions/dispatcher/sample/MainActivity.java
Patch:
@@ -53,7 +53,7 @@ public void onRequestPermissionsResult(int requestCode, String[] permissions, in
     void showCamera() {
         getSupportFragmentManager().beginTransaction()
                 .replace(R.id.sample_content_fragment, CameraPreviewFragment.newInstance())
-                .addToBackStack("contacts")
+                .addToBackStack("camera")
                 .commitAllowingStateLoss();
     }
 

